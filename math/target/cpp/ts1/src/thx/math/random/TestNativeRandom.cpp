// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_math_random_NativeRandom
#include <thx/math/random/NativeRandom.h>
#endif
#ifndef INCLUDED_thx_math_random_TestNativeRandom
#include <thx/math/random/TestNativeRandom.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace math{
namespace random{

void TestNativeRandom_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.math.random.TestNativeRandom","new",0x61225d4d,"thx.math.random.TestNativeRandom.new","thx/math/random/TestNativeRandom.hx",8,0x764583c2)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(   8)		this->x = i;
            	}

Dynamic TestNativeRandom_obj::__CreateEmpty() { return new TestNativeRandom_obj; }

hx::ObjectPtr< TestNativeRandom_obj > TestNativeRandom_obj::__new(Int i)
{
	hx::ObjectPtr< TestNativeRandom_obj > _hx_result = new TestNativeRandom_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestNativeRandom_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestNativeRandom_obj > _hx_result = new TestNativeRandom_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestNativeRandom_obj::testIntBoundaries(){
            	HX_STACK_FRAME("thx.math.random.TestNativeRandom","testIntBoundaries",0x3bf92b92,"thx.math.random.TestNativeRandom.testIntBoundaries","thx/math/random/TestNativeRandom.hx",12,0x764583c2)
            	HX_STACK_THIS(this)
HXLINE(  12)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  12)		HX_VARI( Int,_g) = this->x;
HXDLIN(  12)		while((_g1 < _g)){
HXLINE(  12)			++_g1;
HXLINE(  13)			HX_VARI(  ::thx::math::random::NativeRandom,random) =  ::thx::math::random::NativeRandom_obj::__new();
HXLINE(  15)			{
HXLINE(  15)				HX_VARI( Int,_g2) = (int)0;
HXDLIN(  15)				while((_g2 < (int)1000)){
HXLINE(  15)					HX_VARI( Int,i) = _g2++;
HXLINE(  16)					HX_VARI( Int,v) = random->_hx_int();
HXLINE(  17)					Bool _hx_tmp;
HXDLIN(  17)					if ((v >= (int)0)) {
HXLINE(  17)						_hx_tmp = (v <= (int)2147483647);
            					}
            					else {
HXLINE(  17)						_hx_tmp = false;
            					}
HXDLIN(  17)					::utest::Assert_obj::isTrue(_hx_tmp,(HX_("expected value to be between 0 and 0x7FFFFFFF, but is ",0c,60,53,31) + i),hx::SourceInfo(HX_("TestNativeRandom.hx",b2,93,10,47),17,HX_("thx.math.random.TestNativeRandom",db,b2,64,d4),HX_("testIntBoundaries",e5,b9,5a,c6)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestNativeRandom_obj,testIntBoundaries,(void))

void TestNativeRandom_obj::testFloatBoundaries(){
            	HX_STACK_FRAME("thx.math.random.TestNativeRandom","testFloatBoundaries",0x2828133f,"thx.math.random.TestNativeRandom.testFloatBoundaries","thx/math/random/TestNativeRandom.hx",22,0x764583c2)
            	HX_STACK_THIS(this)
HXLINE(  22)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  22)		HX_VARI( Int,_g) = this->x;
HXDLIN(  22)		while((_g1 < _g)){
HXLINE(  22)			++_g1;
HXLINE(  23)			HX_VARI(  ::thx::math::random::NativeRandom,random) =  ::thx::math::random::NativeRandom_obj::__new();
HXLINE(  25)			{
HXLINE(  25)				HX_VARI( Int,_g2) = (int)0;
HXDLIN(  25)				while((_g2 < (int)1000)){
HXLINE(  25)					HX_VARI( Int,i) = _g2++;
HXLINE(  26)					HX_VARI( Float,v) = random->_hx_float();
HXLINE(  27)					Bool _hx_tmp;
HXDLIN(  27)					if ((v >= (int)0)) {
HXLINE(  27)						_hx_tmp = (v <= ((Float)1.0));
            					}
            					else {
HXLINE(  27)						_hx_tmp = false;
            					}
HXDLIN(  27)					::utest::Assert_obj::isTrue(_hx_tmp,(HX_("expected value to be between 0 and 1, but is ",92,24,5d,d0) + i),hx::SourceInfo(HX_("TestNativeRandom.hx",b2,93,10,47),27,HX_("thx.math.random.TestNativeRandom",db,b2,64,d4),HX_("testFloatBoundaries",52,1c,c8,38)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestNativeRandom_obj,testFloatBoundaries,(void))


TestNativeRandom_obj::TestNativeRandom_obj()
{
}

hx::Val TestNativeRandom_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"testIntBoundaries") ) { return hx::Val( testIntBoundaries_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"testFloatBoundaries") ) { return hx::Val( testFloatBoundaries_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestNativeRandom_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestNativeRandom_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestNativeRandom_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestNativeRandom_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestNativeRandom_obj_sStaticStorageInfo = 0;
#endif

static ::String TestNativeRandom_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testIntBoundaries","\xe5","\xb9","\x5a","\xc6"),
	HX_HCSTRING("testFloatBoundaries","\x52","\x1c","\xc8","\x38"),
	::String(null()) };

static void TestNativeRandom_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestNativeRandom_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestNativeRandom_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestNativeRandom_obj::__mClass,"__mClass");
};

#endif

hx::Class TestNativeRandom_obj::__mClass;

void TestNativeRandom_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.math.random.TestNativeRandom","\xdb","\xb2","\x64","\xd4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestNativeRandom_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestNativeRandom_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestNativeRandom_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestNativeRandom_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestNativeRandom_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestNativeRandom_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace math
} // end namespace random
