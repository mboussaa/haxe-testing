// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_thx_math_random_PseudoRandom
#include <thx/math/random/PseudoRandom.h>
#endif

namespace thx{
namespace math{
namespace random{

void PseudoRandom_obj::__construct(hx::Null< Int >  __o_seed){
Int seed = __o_seed.Default(1);
            	HX_STACK_FRAME("thx.math.random.PseudoRandom","new",0x72941a02,"thx.math.random.PseudoRandom.new","thx/math/random/PseudoRandom.hx",7,0x03f4692d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(seed,"seed")
HXLINE(   7)		this->seed = seed;
            	}

Dynamic PseudoRandom_obj::__CreateEmpty() { return new PseudoRandom_obj; }

hx::ObjectPtr< PseudoRandom_obj > PseudoRandom_obj::__new(hx::Null< Int >  __o_seed)
{
	hx::ObjectPtr< PseudoRandom_obj > _hx_result = new PseudoRandom_obj();
	_hx_result->__construct(__o_seed);
	return _hx_result;
}

Dynamic PseudoRandom_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PseudoRandom_obj > _hx_result = new PseudoRandom_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

Int PseudoRandom_obj::_hx_int(){
            	HX_STACK_FRAME("thx.math.random.PseudoRandom","int",0x72905691,"thx.math.random.PseudoRandom.int","thx/math/random/PseudoRandom.hx",10,0x03f4692d)
            	HX_STACK_THIS(this)
HXLINE(  10)		Float _hx_tmp = hx::Mod((this->seed * ((Float)48271.0)),((Float)2147483647.0));
HXDLIN(  10)		Int _hx_tmp1 = (this->seed = ::Std_obj::_hx_int(_hx_tmp));
HXDLIN(  10)		return ((int)_hx_tmp1 & (int)(int)1073741823);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PseudoRandom_obj,_hx_int,return )

Float PseudoRandom_obj::_hx_float(){
            	HX_STACK_FRAME("thx.math.random.PseudoRandom","float",0xbcb63bbe,"thx.math.random.PseudoRandom.float","thx/math/random/PseudoRandom.hx",13,0x03f4692d)
            	HX_STACK_THIS(this)
HXLINE(  13)		Int _hx_tmp = this->_hx_int();
HXDLIN(  13)		return ((Float)_hx_tmp / (Float)((Float)1073741823.0));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PseudoRandom_obj,_hx_float,return )


PseudoRandom_obj::PseudoRandom_obj()
{
}

hx::Val PseudoRandom_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"int") ) { return hx::Val( _hx_int_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"seed") ) { return hx::Val( seed); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"float") ) { return hx::Val( _hx_float_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PseudoRandom_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"seed") ) { seed=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PseudoRandom_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("seed","\x71","\x85","\x50","\x4c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PseudoRandom_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(PseudoRandom_obj,seed),HX_HCSTRING("seed","\x71","\x85","\x50","\x4c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PseudoRandom_obj_sStaticStorageInfo = 0;
#endif

static ::String PseudoRandom_obj_sMemberFields[] = {
	HX_HCSTRING("seed","\x71","\x85","\x50","\x4c"),
	HX_HCSTRING("int","\xef","\x0c","\x50","\x00"),
	HX_HCSTRING("float","\x9c","\xc5","\x96","\x02"),
	::String(null()) };

static void PseudoRandom_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PseudoRandom_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PseudoRandom_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PseudoRandom_obj::__mClass,"__mClass");
};

#endif

hx::Class PseudoRandom_obj::__mClass;

void PseudoRandom_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.math.random.PseudoRandom","\x10","\xb1","\xc2","\x27");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PseudoRandom_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PseudoRandom_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PseudoRandom_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PseudoRandom_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PseudoRandom_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PseudoRandom_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace math
} // end namespace random
