// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_math_random_TestNativeRandom
#define INCLUDED_thx_math_random_TestNativeRandom

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(thx,math,random,TestNativeRandom)

namespace thx{
namespace math{
namespace random{


class HXCPP_CLASS_ATTRIBUTES TestNativeRandom_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TestNativeRandom_obj OBJ_;
		TestNativeRandom_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.math.random.TestNativeRandom")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.math.random.TestNativeRandom"); }
		static hx::ObjectPtr< TestNativeRandom_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestNativeRandom_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("TestNativeRandom","\x8c","\x4e","\xe1","\x66"); }

		void testIntBoundaries();
		::Dynamic testIntBoundaries_dyn();

		void testFloatBoundaries();
		::Dynamic testFloatBoundaries_dyn();

};

} // end namespace thx
} // end namespace math
} // end namespace random

#endif /* INCLUDED_thx_math_random_TestNativeRandom */ 
