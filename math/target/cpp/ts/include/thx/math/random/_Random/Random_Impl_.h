// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_math_random__Random_Random_Impl_
#define INCLUDED_thx_math_random__Random_Random_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS4(thx,math,random,_Random,Random_Impl_)

namespace thx{
namespace math{
namespace random{
namespace _Random{


class HXCPP_CLASS_ATTRIBUTES Random_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Random_Impl__obj OBJ_;
		Random_Impl__obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.math.random._Random.Random_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.math.random._Random.Random_Impl_"); }
		static hx::ObjectPtr< Random_Impl__obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Random_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Random_Impl_","\x03","\x8f","\xf0","\xb7"); }

		static Int lessThan( ::Dynamic this1,Int max);
		static ::Dynamic lessThan_dyn();

		static Int between( ::Dynamic this1,Int min,Int max);
		static ::Dynamic between_dyn();

		static Int _hx_int( ::Dynamic this1);
		static ::Dynamic _hx_int_dyn();

		static Bool _hx_bool( ::Dynamic this1);
		static ::Dynamic _hx_bool_dyn();

		static ::cpp::VirtualArray shuffle( ::Dynamic this1,::cpp::VirtualArray arr);
		static ::Dynamic shuffle_dyn();

};

} // end namespace thx
} // end namespace math
} // end namespace random
} // end namespace _Random

#endif /* INCLUDED_thx_math_random__Random_Random_Impl_ */ 
