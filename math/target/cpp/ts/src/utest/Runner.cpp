// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_utest_Dispatcher
#include <utest/Dispatcher.h>
#endif
#ifndef INCLUDED_utest_Runner
#include <utest/Runner.h>
#endif
#ifndef INCLUDED_utest_TestFixture
#include <utest/TestFixture.h>
#endif
#ifndef INCLUDED_utest_TestHandler
#include <utest/TestHandler.h>
#endif
#ifndef INCLUDED_utest_TestResult
#include <utest/TestResult.h>
#endif

namespace utest{

void Runner_obj::__construct(){
            	HX_STACK_FRAME("utest.Runner","new",0x38210cc9,"utest.Runner.new","utest/Runner.hx",13,0x0fc0d6a6)
            	HX_STACK_THIS(this)
HXLINE(  57)		this->globalPattern = null();
HXLINE(  63)		this->fixtures = ::Array_obj< ::Dynamic>::__new();
HXLINE(  64)		this->onProgress =  ::utest::Dispatcher_obj::__new();
HXLINE(  65)		this->onStart =  ::utest::Dispatcher_obj::__new();
HXLINE(  66)		this->onComplete =  ::utest::Dispatcher_obj::__new();
HXLINE(  67)		this->onPrecheck =  ::utest::Dispatcher_obj::__new();
HXLINE(  68)		this->onTestStart =  ::utest::Dispatcher_obj::__new();
HXLINE(  69)		this->onTestComplete =  ::utest::Dispatcher_obj::__new();
HXLINE(  70)		this->length = (int)0;
            	}

Dynamic Runner_obj::__CreateEmpty() { return new Runner_obj; }

hx::ObjectPtr< Runner_obj > Runner_obj::__new()
{
	hx::ObjectPtr< Runner_obj > _hx_result = new Runner_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Runner_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Runner_obj > _hx_result = new Runner_obj();
	_hx_result->__construct();
	return _hx_result;
}

void Runner_obj::addCase( ::Dynamic test,::String __o_setup,::String __o_teardown,::String __o_prefix, ::EReg pattern){
::String setup = __o_setup.Default(HX_HCSTRING("setup","\x7d","\xae","\x2f","\x7a"));
::String teardown = __o_teardown.Default(HX_HCSTRING("teardown","\x04","\xaa","\x8d","\x01"));
::String prefix = __o_prefix.Default(HX_HCSTRING("test","\x52","\xc8","\xf9","\x4c"));
            	HX_STACK_FRAME("utest.Runner","addCase",0xa025865a,"utest.Runner.addCase","utest/Runner.hx",82,0x0fc0d6a6)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(test,"test")
            	HX_STACK_ARG(setup,"setup")
            	HX_STACK_ARG(teardown,"teardown")
            	HX_STACK_ARG(prefix,"prefix")
            	HX_STACK_ARG(pattern,"pattern")
HXLINE(  83)		Bool _hx_tmp = !(::Reflect_obj::isObject(test));
HXDLIN(  83)		if (_hx_tmp) {
HXLINE(  83)			HX_STACK_DO_THROW(HX_("can't add a null object as a test case",3a,62,dc,6f));
            		}
HXLINE(  84)		Bool _hx_tmp1 = !(this->isMethod(test,setup));
HXDLIN(  84)		if (_hx_tmp1) {
HXLINE(  85)			setup = null();
            		}
HXLINE(  86)		Bool _hx_tmp2 = !(this->isMethod(test,teardown));
HXDLIN(  86)		if (_hx_tmp2) {
HXLINE(  87)			teardown = null();
            		}
HXLINE(  88)		hx::Class _hx_tmp3 = ::Type_obj::getClass(test);
HXDLIN(  88)		HX_VARI( ::Array< ::String >,fields) = ::Type_obj::getInstanceFields(_hx_tmp3);
HXLINE(  89)		Bool _hx_tmp4;
HXDLIN(  89)		if (hx::IsNull( this->globalPattern )) {
HXLINE(  89)			_hx_tmp4 = hx::IsNull( pattern );
            		}
            		else {
HXLINE(  89)			_hx_tmp4 = false;
            		}
HXDLIN(  89)		if (_hx_tmp4) {
HXLINE(  90)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  90)			while((_g < fields->length)){
HXLINE(  90)				HX_VARI( ::String,field) = fields->__get(_g);
HXDLIN(  90)				++_g;
HXLINE(  91)				Bool _hx_tmp5 = !(::StringTools_obj::startsWith(field,prefix));
HXDLIN(  91)				if (_hx_tmp5) {
HXLINE(  91)					continue;
            				}
HXLINE(  92)				Bool _hx_tmp6 = !(this->isMethod(test,field));
HXDLIN(  92)				if (_hx_tmp6) {
HXLINE(  92)					continue;
            				}
HXLINE(  93)				this->addFixture( ::utest::TestFixture_obj::__new(test,field,setup,teardown));
            			}
            		}
            		else {
HXLINE(  96)			if (hx::IsNotNull( this->globalPattern )) {
HXLINE(  96)				pattern = this->globalPattern;
            			}
            			else {
HXLINE(  96)				pattern = pattern;
            			}
HXLINE(  97)			{
HXLINE(  97)				HX_VARI_NAME( Int,_g1,"_g") = (int)0;
HXDLIN(  97)				while((_g1 < fields->length)){
HXLINE(  97)					HX_VARI_NAME( ::String,field1,"field") = fields->__get(_g1);
HXDLIN(  97)					++_g1;
HXLINE(  98)					Bool _hx_tmp7 = !(pattern->match(field1));
HXDLIN(  98)					if (_hx_tmp7) {
HXLINE(  98)						continue;
            					}
HXLINE(  99)					Bool _hx_tmp8 = !(this->isMethod(test,field1));
HXDLIN(  99)					if (_hx_tmp8) {
HXLINE(  99)						continue;
            					}
HXLINE( 100)					this->addFixture( ::utest::TestFixture_obj::__new(test,field1,setup,teardown));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(Runner_obj,addCase,(void))

void Runner_obj::addFixture( ::utest::TestFixture fixture){
            	HX_STACK_FRAME("utest.Runner","addFixture",0xadeefa5f,"utest.Runner.addFixture","utest/Runner.hx",105,0x0fc0d6a6)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(fixture,"fixture")
HXLINE( 106)		this->fixtures->push(fixture);
HXLINE( 107)		this->length++;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Runner_obj,addFixture,(void))

 ::utest::TestFixture Runner_obj::getFixture(Int index){
            	HX_STACK_FRAME("utest.Runner","getFixture",0x95c6548a,"utest.Runner.getFixture","utest/Runner.hx",111,0x0fc0d6a6)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE( 111)		return this->fixtures->__get(index).StaticCast<  ::utest::TestFixture >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Runner_obj,getFixture,return )

Bool Runner_obj::isMethod( ::Dynamic test,::String name){
            	HX_STACK_FRAME("utest.Runner","isMethod",0x27f6b962,"utest.Runner.isMethod","utest/Runner.hx",115,0x0fc0d6a6)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(test,"test")
            	HX_STACK_ARG(name,"name")
HXLINE( 115)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 116)			 ::Dynamic _hx_tmp = ::Reflect_obj::field(test,name);
HXDLIN( 116)			return ::Reflect_obj::isFunction(_hx_tmp);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 118)				return false;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 115)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Runner_obj,isMethod,return )

void Runner_obj::run(){
            	HX_STACK_FRAME("utest.Runner","run",0x382423b4,"utest.Runner.run","utest/Runner.hx",142,0x0fc0d6a6)
            	HX_STACK_THIS(this)
HXLINE( 143)		this->pos = (int)0;
HXLINE( 144)		this->onStart->dispatch(hx::ObjectPtr<OBJ_>(this));
HXLINE( 145)		this->runNext();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Runner_obj,run,(void))

void Runner_obj::runNext(){
            	HX_STACK_FRAME("utest.Runner","runNext",0xf86dbec7,"utest.Runner.runNext","utest/Runner.hx",149,0x0fc0d6a6)
            	HX_STACK_THIS(this)
HXLINE( 149)		Bool _hx_tmp = (this->fixtures->length > this->pos);
HXDLIN( 149)		if (_hx_tmp) {
HXLINE( 150)			 ::utest::TestFixture _hx_tmp1 = this->fixtures->__get(this->pos++).StaticCast<  ::utest::TestFixture >();
HXDLIN( 150)			this->runFixture(_hx_tmp1);
            		}
            		else {
HXLINE( 152)			this->onComplete->dispatch(hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Runner_obj,runNext,(void))

void Runner_obj::runFixture( ::utest::TestFixture fixture){
            	HX_STACK_FRAME("utest.Runner","runFixture",0xb0e15e75,"utest.Runner.runFixture","utest/Runner.hx",155,0x0fc0d6a6)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(fixture,"fixture")
HXLINE( 157)		HX_VARI(  ::utest::TestHandler,handler) =  ::utest::TestHandler_obj::__new(fixture);
HXLINE( 158)		handler->onComplete->add(this->testComplete_dyn());
HXLINE( 159)		handler->onPrecheck->add(this->onPrecheck->dispatch_dyn());
HXLINE( 160)		this->onTestStart->dispatch(handler);
HXLINE( 161)		handler->execute();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Runner_obj,runFixture,(void))

void Runner_obj::testComplete( ::utest::TestHandler h){
            	HX_STACK_FRAME("utest.Runner","testComplete",0x2c0595a2,"utest.Runner.testComplete","utest/Runner.hx",164,0x0fc0d6a6)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(h,"h")
HXLINE( 165)		this->onTestComplete->dispatch(h);
HXLINE( 166)		 ::utest::TestResult _hx_tmp = ::utest::TestResult_obj::ofHandler(h);
HXDLIN( 166)		this->onProgress->dispatch( ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("totals",2f,f8,d6,97),this->length)
            			->setFixed(1,HX_("result",dd,68,84,08),_hx_tmp)
            			->setFixed(2,HX_("done",82,f0,6d,42),this->pos)));
HXLINE( 167)		this->runNext();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Runner_obj,testComplete,(void))


Runner_obj::Runner_obj()
{
}

void Runner_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Runner);
	HX_MARK_MEMBER_NAME(fixtures,"fixtures");
	HX_MARK_MEMBER_NAME(onProgress,"onProgress");
	HX_MARK_MEMBER_NAME(onStart,"onStart");
	HX_MARK_MEMBER_NAME(onComplete,"onComplete");
	HX_MARK_MEMBER_NAME(onPrecheck,"onPrecheck");
	HX_MARK_MEMBER_NAME(onTestStart,"onTestStart");
	HX_MARK_MEMBER_NAME(onTestComplete,"onTestComplete");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(globalPattern,"globalPattern");
	HX_MARK_MEMBER_NAME(pos,"pos");
	HX_MARK_END_CLASS();
}

void Runner_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(fixtures,"fixtures");
	HX_VISIT_MEMBER_NAME(onProgress,"onProgress");
	HX_VISIT_MEMBER_NAME(onStart,"onStart");
	HX_VISIT_MEMBER_NAME(onComplete,"onComplete");
	HX_VISIT_MEMBER_NAME(onPrecheck,"onPrecheck");
	HX_VISIT_MEMBER_NAME(onTestStart,"onTestStart");
	HX_VISIT_MEMBER_NAME(onTestComplete,"onTestComplete");
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(globalPattern,"globalPattern");
	HX_VISIT_MEMBER_NAME(pos,"pos");
}

hx::Val Runner_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { return hx::Val( pos); }
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onStart") ) { return hx::Val( onStart); }
		if (HX_FIELD_EQ(inName,"addCase") ) { return hx::Val( addCase_dyn()); }
		if (HX_FIELD_EQ(inName,"runNext") ) { return hx::Val( runNext_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fixtures") ) { return hx::Val( fixtures); }
		if (HX_FIELD_EQ(inName,"isMethod") ) { return hx::Val( isMethod_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"onProgress") ) { return hx::Val( onProgress); }
		if (HX_FIELD_EQ(inName,"onComplete") ) { return hx::Val( onComplete); }
		if (HX_FIELD_EQ(inName,"onPrecheck") ) { return hx::Val( onPrecheck); }
		if (HX_FIELD_EQ(inName,"addFixture") ) { return hx::Val( addFixture_dyn()); }
		if (HX_FIELD_EQ(inName,"getFixture") ) { return hx::Val( getFixture_dyn()); }
		if (HX_FIELD_EQ(inName,"runFixture") ) { return hx::Val( runFixture_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onTestStart") ) { return hx::Val( onTestStart); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testComplete") ) { return hx::Val( testComplete_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"globalPattern") ) { return hx::Val( globalPattern); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onTestComplete") ) { return hx::Val( onTestComplete); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Runner_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { pos=inValue.Cast< Int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< Int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onStart") ) { onStart=inValue.Cast<  ::utest::Dispatcher >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fixtures") ) { fixtures=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"onProgress") ) { onProgress=inValue.Cast<  ::utest::Dispatcher >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onComplete") ) { onComplete=inValue.Cast<  ::utest::Dispatcher >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onPrecheck") ) { onPrecheck=inValue.Cast<  ::utest::Dispatcher >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onTestStart") ) { onTestStart=inValue.Cast<  ::utest::Dispatcher >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"globalPattern") ) { globalPattern=inValue.Cast<  ::EReg >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onTestComplete") ) { onTestComplete=inValue.Cast<  ::utest::Dispatcher >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Runner_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("fixtures","\x8a","\x94","\x62","\xeb"));
	outFields->push(HX_HCSTRING("onProgress","\xec","\xcb","\xe1","\x63"));
	outFields->push(HX_HCSTRING("onStart","\xc3","\x12","\x49","\x1a"));
	outFields->push(HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d"));
	outFields->push(HX_HCSTRING("onPrecheck","\x04","\xae","\x19","\x10"));
	outFields->push(HX_HCSTRING("onTestStart","\x91","\x95","\x50","\x6f"));
	outFields->push(HX_HCSTRING("onTestComplete","\xea","\x86","\xbe","\x1c"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("globalPattern","\x2d","\x3f","\xb0","\x37"));
	outFields->push(HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Runner_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Runner_obj,fixtures),HX_HCSTRING("fixtures","\x8a","\x94","\x62","\xeb")},
	{hx::fsObject /*::utest::Dispatcher*/ ,(int)offsetof(Runner_obj,onProgress),HX_HCSTRING("onProgress","\xec","\xcb","\xe1","\x63")},
	{hx::fsObject /*::utest::Dispatcher*/ ,(int)offsetof(Runner_obj,onStart),HX_HCSTRING("onStart","\xc3","\x12","\x49","\x1a")},
	{hx::fsObject /*::utest::Dispatcher*/ ,(int)offsetof(Runner_obj,onComplete),HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d")},
	{hx::fsObject /*::utest::Dispatcher*/ ,(int)offsetof(Runner_obj,onPrecheck),HX_HCSTRING("onPrecheck","\x04","\xae","\x19","\x10")},
	{hx::fsObject /*::utest::Dispatcher*/ ,(int)offsetof(Runner_obj,onTestStart),HX_HCSTRING("onTestStart","\x91","\x95","\x50","\x6f")},
	{hx::fsObject /*::utest::Dispatcher*/ ,(int)offsetof(Runner_obj,onTestComplete),HX_HCSTRING("onTestComplete","\xea","\x86","\xbe","\x1c")},
	{hx::fsInt,(int)offsetof(Runner_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{hx::fsObject /*::EReg*/ ,(int)offsetof(Runner_obj,globalPattern),HX_HCSTRING("globalPattern","\x2d","\x3f","\xb0","\x37")},
	{hx::fsInt,(int)offsetof(Runner_obj,pos),HX_HCSTRING("pos","\x94","\x5d","\x55","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Runner_obj_sStaticStorageInfo = 0;
#endif

static ::String Runner_obj_sMemberFields[] = {
	HX_HCSTRING("fixtures","\x8a","\x94","\x62","\xeb"),
	HX_HCSTRING("onProgress","\xec","\xcb","\xe1","\x63"),
	HX_HCSTRING("onStart","\xc3","\x12","\x49","\x1a"),
	HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d"),
	HX_HCSTRING("onPrecheck","\x04","\xae","\x19","\x10"),
	HX_HCSTRING("onTestStart","\x91","\x95","\x50","\x6f"),
	HX_HCSTRING("onTestComplete","\xea","\x86","\xbe","\x1c"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("globalPattern","\x2d","\x3f","\xb0","\x37"),
	HX_HCSTRING("addCase","\x71","\x61","\xf7","\x7d"),
	HX_HCSTRING("addFixture","\xa8","\xe7","\xab","\x59"),
	HX_HCSTRING("getFixture","\xd3","\x41","\x83","\x41"),
	HX_HCSTRING("isMethod","\x6b","\x92","\xc4","\x61"),
	HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("runNext","\xde","\x99","\x3f","\xd6"),
	HX_HCSTRING("runFixture","\xbe","\x4b","\x9e","\x5c"),
	HX_HCSTRING("testComplete","\x2b","\x27","\xcf","\xf2"),
	::String(null()) };

static void Runner_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Runner_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Runner_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Runner_obj::__mClass,"__mClass");
};

#endif

hx::Class Runner_obj::__mClass;

void Runner_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("utest.Runner","\x57","\xf4","\xfe","\xe4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Runner_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Runner_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Runner_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Runner_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Runner_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Runner_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace utest
