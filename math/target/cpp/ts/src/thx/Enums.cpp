// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_thx_Arrays
#include <thx/Arrays.h>
#endif
#ifndef INCLUDED_thx_Dynamics
#include <thx/Dynamics.h>
#endif
#ifndef INCLUDED_thx_Enums
#include <thx/Enums.h>
#endif

namespace thx{

void Enums_obj::__construct() { }

Dynamic Enums_obj::__CreateEmpty() { return new Enums_obj; }

hx::ObjectPtr< Enums_obj > Enums_obj::__new()
{
	hx::ObjectPtr< Enums_obj > _hx_result = new Enums_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Enums_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Enums_obj > _hx_result = new Enums_obj();
	_hx_result->__construct();
	return _hx_result;
}

::String Enums_obj::string( ::Dynamic e){
            	HX_STACK_FRAME("thx.Enums","string",0x98930db7,"thx.Enums.string","thx/Enums.hx",10,0x21babdf7)
            	HX_STACK_ARG(e,"e")
HXLINE(  11)		HX_VARI( ::String,cons) = ::Type_obj::enumConstructor(e);
HXLINE(  12)		HX_VARI( ::Array< ::String >,params) = ::Array_obj< ::String >::__new(0);
HXLINE(  13)		{
HXLINE(  13)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  13)			HX_VARI( ::cpp::VirtualArray,_g1) = ::Type_obj::enumParameters(e);
HXDLIN(  13)			while((_g < _g1->get_length())){
HXLINE(  13)				HX_VARI(  ::Dynamic,param) = _g1->__get(_g);
HXDLIN(  13)				++_g;
HXLINE(  14)				::String _hx_tmp = ::thx::Dynamics_obj::string(param);
HXDLIN(  14)				params->push(_hx_tmp);
            			}
            		}
HXLINE(  15)		::String _hx_tmp1;
HXDLIN(  15)		Bool _hx_tmp2 = (params->length == (int)0);
HXDLIN(  15)		if (_hx_tmp2) {
HXLINE(  15)			_hx_tmp1 = HX_("",00,00,00,00);
            		}
            		else {
HXLINE(  15)			::String _hx_tmp3 = params->join(HX_(", ",74,26,00,00));
HXDLIN(  15)			_hx_tmp1 = ((HX_("(",28,00,00,00) + _hx_tmp3) + HX_(")",29,00,00,00));
            		}
HXDLIN(  15)		return (cons + _hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Enums_obj,string,return )

Int Enums_obj::compare( ::Dynamic a, ::Dynamic b){
            	HX_STACK_FRAME("thx.Enums","compare",0x728e7cff,"thx.Enums.compare","thx/Enums.hx",23,0x21babdf7)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(  24)		HX_VARI_NAME( Int,a1,"a") = ( ( ::hx::EnumBase)(a) )->_hx_getIndex();
HXDLIN(  24)		HX_VARI_NAME( Int,b1,"b") = ( ( ::hx::EnumBase)(b) )->_hx_getIndex();
HXDLIN(  24)		HX_VARI( Int,v) = (a1 - b1);
HXLINE(  25)		if ((v != (int)0)) {
HXLINE(  26)			return v;
            		}
HXLINE(  27)		::cpp::VirtualArray _hx_tmp = ::Type_obj::enumParameters(a);
HXDLIN(  27)		::cpp::VirtualArray _hx_tmp1 = ::Type_obj::enumParameters(b);
HXDLIN(  27)		return ::thx::Arrays_obj::compare(_hx_tmp,_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Enums_obj,compare,return )

Bool Enums_obj::sameConstructor( ::Dynamic a, ::Dynamic b){
            	HX_STACK_FRAME("thx.Enums","sameConstructor",0x62311d8e,"thx.Enums.sameConstructor","thx/Enums.hx",34,0x21babdf7)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(  34)		Int _hx_tmp = ( ( ::hx::EnumBase)(a) )->_hx_getIndex();
HXDLIN(  34)		Int _hx_tmp1 = ( ( ::hx::EnumBase)(b) )->_hx_getIndex();
HXDLIN(  34)		return (_hx_tmp == _hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Enums_obj,sameConstructor,return )

 ::Dynamic Enums_obj::min( ::Dynamic a, ::Dynamic b){
            	HX_STACK_FRAME("thx.Enums","min",0xa164c0ec,"thx.Enums.min","thx/Enums.hx",41,0x21babdf7)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(  41)		Int _hx_tmp = ::thx::Enums_obj::compare(a,b);
HXDLIN(  41)		if ((_hx_tmp < (int)0)) {
HXLINE(  42)			return a;
            		}
            		else {
HXLINE(  44)			return b;
            		}
HXLINE(  41)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Enums_obj,min,return )

 ::Dynamic Enums_obj::max( ::Dynamic a, ::Dynamic b){
            	HX_STACK_FRAME("thx.Enums","max",0xa164b9fe,"thx.Enums.max","thx/Enums.hx",52,0x21babdf7)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(  52)		Int _hx_tmp = ::thx::Enums_obj::compare(a,b);
HXDLIN(  52)		if ((_hx_tmp > (int)0)) {
HXLINE(  53)			return a;
            		}
            		else {
HXLINE(  55)			return b;
            		}
HXLINE(  52)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Enums_obj,max,return )


Enums_obj::Enums_obj()
{
}

bool Enums_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { outValue = min_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"max") ) { outValue = max_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"string") ) { outValue = string_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"compare") ) { outValue = compare_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sameConstructor") ) { outValue = sameConstructor_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Enums_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Enums_obj_sStaticStorageInfo = 0;
#endif

static void Enums_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Enums_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Enums_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Enums_obj::__mClass,"__mClass");
};

#endif

hx::Class Enums_obj::__mClass;

static ::String Enums_obj_sStaticFields[] = {
	HX_HCSTRING("string","\xd1","\x28","\x30","\x11"),
	HX_HCSTRING("compare","\xa5","\x18","\x69","\x83"),
	HX_HCSTRING("sameConstructor","\x34","\xcf","\x28","\xd0"),
	HX_HCSTRING("min","\x92","\x11","\x53","\x00"),
	HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"),
	::String(null())
};

void Enums_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.Enums","\xc8","\xda","\x10","\xb8");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Enums_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Enums_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Enums_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Enums_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Enums_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Enums_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Enums_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
