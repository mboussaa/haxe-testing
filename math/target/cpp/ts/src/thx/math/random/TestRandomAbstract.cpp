// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_math_random_PseudoRandom
#include <thx/math/random/PseudoRandom.h>
#endif
#ifndef INCLUDED_thx_math_random_TestRandomAbstract
#include <thx/math/random/TestRandomAbstract.h>
#endif
#ifndef INCLUDED_thx_math_random__Random_Random_Impl_
#include <thx/math/random/_Random/Random_Impl_.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace math{
namespace random{

void TestRandomAbstract_obj::__construct(){
            	HX_STACK_FRAME("thx.math.random.TestRandomAbstract","new",0x92728818,"thx.math.random.TestRandomAbstract.new","thx/math/random/TestRandomAbstract.hx",7,0xbb8d7917)
            	HX_STACK_THIS(this)
            	}

Dynamic TestRandomAbstract_obj::__CreateEmpty() { return new TestRandomAbstract_obj; }

hx::ObjectPtr< TestRandomAbstract_obj > TestRandomAbstract_obj::__new()
{
	hx::ObjectPtr< TestRandomAbstract_obj > _hx_result = new TestRandomAbstract_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestRandomAbstract_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestRandomAbstract_obj > _hx_result = new TestRandomAbstract_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestRandomAbstract_obj::testLessThan(){
            	HX_STACK_FRAME("thx.math.random.TestRandomAbstract","testLessThan",0x11941714,"thx.math.random.TestRandomAbstract.testLessThan","thx/math/random/TestRandomAbstract.hx",9,0xbb8d7917)
            	HX_STACK_THIS(this)
HXLINE(  10)		HX_VARI(  ::Dynamic,random) =  ::thx::math::random::PseudoRandom_obj::__new(null());
HXLINE(  11)		{
HXLINE(  11)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  11)			while((_g < (int)100)){
HXLINE(  11)				++_g;
HXLINE(  12)				HX_VARI( Int,r) = ::thx::math::random::_Random::Random_Impl__obj::lessThan(random,(int)10);
HXLINE(  13)				::utest::Assert_obj::isTrue((r >= (int)0),null(),hx::SourceInfo(HX_("TestRandomAbstract.hx",07,65,30,a1),13,HX_("thx.math.random.TestRandomAbstract",26,dc,de,23),HX_("testLessThan",cc,85,3b,66)));
HXLINE(  14)				::utest::Assert_obj::isTrue((r < (int)10),null(),hx::SourceInfo(HX_("TestRandomAbstract.hx",07,65,30,a1),14,HX_("thx.math.random.TestRandomAbstract",26,dc,de,23),HX_("testLessThan",cc,85,3b,66)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestRandomAbstract_obj,testLessThan,(void))


TestRandomAbstract_obj::TestRandomAbstract_obj()
{
}

hx::Val TestRandomAbstract_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"testLessThan") ) { return hx::Val( testLessThan_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestRandomAbstract_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestRandomAbstract_obj_sStaticStorageInfo = 0;
#endif

static ::String TestRandomAbstract_obj_sMemberFields[] = {
	HX_HCSTRING("testLessThan","\xcc","\x85","\x3b","\x66"),
	::String(null()) };

static void TestRandomAbstract_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestRandomAbstract_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestRandomAbstract_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestRandomAbstract_obj::__mClass,"__mClass");
};

#endif

hx::Class TestRandomAbstract_obj::__mClass;

void TestRandomAbstract_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.math.random.TestRandomAbstract","\x26","\xdc","\xde","\x23");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestRandomAbstract_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestRandomAbstract_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestRandomAbstract_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestRandomAbstract_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestRandomAbstract_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestRandomAbstract_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace math
} // end namespace random
