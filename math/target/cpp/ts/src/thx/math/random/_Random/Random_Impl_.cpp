// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_thx_Ints
#include <thx/Ints.h>
#endif
#ifndef INCLUDED_thx_math_random__Random_Random_Impl_
#include <thx/math/random/_Random/Random_Impl_.h>
#endif

namespace thx{
namespace math{
namespace random{
namespace _Random{

void Random_Impl__obj::__construct() { }

Dynamic Random_Impl__obj::__CreateEmpty() { return new Random_Impl__obj; }

hx::ObjectPtr< Random_Impl__obj > Random_Impl__obj::__new()
{
	hx::ObjectPtr< Random_Impl__obj > _hx_result = new Random_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Random_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Random_Impl__obj > _hx_result = new Random_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Int Random_Impl__obj::lessThan( ::Dynamic this1,Int max){
            	HX_STACK_FRAME("thx.math.random._Random.Random_Impl_","lessThan",0x8ec272ca,"thx.math.random._Random.Random_Impl_.lessThan","thx/math/random/Random.hx",8,0x756f208b)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(max,"max")
HXLINE(   8)		Float _hx_tmp = ( (Float)( ::Dynamic(this1->__Field(HX_("float",9c,c5,96,02),hx::paccDynamic))()) );
HXDLIN(   8)		return ::Std_obj::_hx_int((max * _hx_tmp));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Random_Impl__obj,lessThan,return )

Int Random_Impl__obj::between( ::Dynamic this1,Int min,Int max){
            	HX_STACK_FRAME("thx.math.random._Random.Random_Impl_","between",0xeb6abc58,"thx.math.random._Random.Random_Impl_.between","thx/math/random/Random.hx",12,0x756f208b)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(min,"min")
            	HX_STACK_ARG(max,"max")
HXLINE(  12)		Float _hx_tmp = ( (Float)( ::Dynamic(this1->__Field(HX_("float",9c,c5,96,02),hx::paccDynamic))()) );
HXDLIN(  12)		Int _hx_tmp1 = ::Math_obj::floor((_hx_tmp * (((int)1 + max) - min)));
HXDLIN(  12)		return (_hx_tmp1 + min);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Random_Impl__obj,between,return )

Int Random_Impl__obj::_hx_int( ::Dynamic this1){
            	HX_STACK_FRAME("thx.math.random._Random.Random_Impl_","int",0xe45aaf7f,"thx.math.random._Random.Random_Impl_.int","thx/math/random/Random.hx",15,0x756f208b)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  15)		return ::Std_obj::random((int)2147483647);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Random_Impl__obj,_hx_int,return )

Bool Random_Impl__obj::_hx_bool( ::Dynamic this1){
            	HX_STACK_FRAME("thx.math.random._Random.Random_Impl_","bool",0xe65f1f9a,"thx.math.random._Random.Random_Impl_.bool","thx/math/random/Random.hx",18,0x756f208b)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  18)		Int _hx_tmp = ::thx::math::random::_Random::Random_Impl__obj::_hx_int(this1);
HXDLIN(  18)		return (hx::Mod(_hx_tmp,(int)2) == (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Random_Impl__obj,_hx_bool,return )

::cpp::VirtualArray Random_Impl__obj::shuffle( ::Dynamic this1,::cpp::VirtualArray arr){
            	HX_STACK_FRAME("thx.math.random._Random.Random_Impl_","shuffle",0x69947089,"thx.math.random._Random.Random_Impl_.shuffle","thx/math/random/Random.hx",21,0x756f208b)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(arr,"arr")
HXLINE(  22)		HX_VARI( ::Array< Int >,t) = ::thx::Ints_obj::range(arr->get_length(),null(),null());
HXDLIN(  22)		HX_VARI( ::cpp::VirtualArray,array) = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  24)		while((t->length > (int)0)){
HXLINE(  25)			HX_VARI( Int,pos) = ::thx::math::random::_Random::Random_Impl__obj::lessThan(this1,t->length);
HXDLIN(  25)			HX_VARI( Int,index) = t->__get(pos);
HXLINE(  27)			t->removeRange(pos,(int)1);
HXLINE(  28)			array->push(arr->__get(index));
            		}
HXLINE(  30)		return array;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Random_Impl__obj,shuffle,return )


Random_Impl__obj::Random_Impl__obj()
{
}

bool Random_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"int") ) { outValue = _hx_int_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"bool") ) { outValue = _hx_bool_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"between") ) { outValue = between_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"shuffle") ) { outValue = shuffle_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lessThan") ) { outValue = lessThan_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Random_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Random_Impl__obj_sStaticStorageInfo = 0;
#endif

static void Random_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Random_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Random_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Random_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class Random_Impl__obj::__mClass;

static ::String Random_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("lessThan","\x5a","\x5f","\x34","\xf3"),
	HX_HCSTRING("between","\xc8","\x91","\xb3","\x66"),
	HX_HCSTRING("int","\xef","\x0c","\x50","\x00"),
	HX_HCSTRING("bool","\x2a","\x84","\x1b","\x41"),
	HX_HCSTRING("shuffle","\xf9","\x45","\xdd","\xe4"),
	::String(null())
};

void Random_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.math.random._Random.Random_Impl_","\xfe","\x7a","\x16","\xe0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Random_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Random_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Random_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Random_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Random_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Random_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Random_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace math
} // end namespace random
} // end namespace _Random
