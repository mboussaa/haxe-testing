// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_thx_math_random_NativeRandom
#include <thx/math/random/NativeRandom.h>
#endif

namespace thx{
namespace math{
namespace random{

void NativeRandom_obj::__construct(){
            	HX_STACK_FRAME("thx.math.random.NativeRandom","new",0x246a115b,"thx.math.random.NativeRandom.new","thx/math/random/NativeRandom.hx",4,0xb7d65ff4)
            	HX_STACK_THIS(this)
            	}

Dynamic NativeRandom_obj::__CreateEmpty() { return new NativeRandom_obj; }

hx::ObjectPtr< NativeRandom_obj > NativeRandom_obj::__new()
{
	hx::ObjectPtr< NativeRandom_obj > _hx_result = new NativeRandom_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic NativeRandom_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NativeRandom_obj > _hx_result = new NativeRandom_obj();
	_hx_result->__construct();
	return _hx_result;
}

Int NativeRandom_obj::_hx_int(){
            	HX_STACK_FRAME("thx.math.random.NativeRandom","int",0x24664dea,"thx.math.random.NativeRandom.int","thx/math/random/NativeRandom.hx",7,0xb7d65ff4)
            	HX_STACK_THIS(this)
HXLINE(   7)		return ::Std_obj::random((int)2147483647);
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeRandom_obj,_hx_int,return )

Float NativeRandom_obj::_hx_float(){
            	HX_STACK_FRAME("thx.math.random.NativeRandom","float",0x097b7b57,"thx.math.random.NativeRandom.float","thx/math/random/NativeRandom.hx",10,0xb7d65ff4)
            	HX_STACK_THIS(this)
HXLINE(  10)		return ::Math_obj::random();
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeRandom_obj,_hx_float,return )


NativeRandom_obj::NativeRandom_obj()
{
}

hx::Val NativeRandom_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"int") ) { return hx::Val( _hx_int_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"float") ) { return hx::Val( _hx_float_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *NativeRandom_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *NativeRandom_obj_sStaticStorageInfo = 0;
#endif

static ::String NativeRandom_obj_sMemberFields[] = {
	HX_HCSTRING("int","\xef","\x0c","\x50","\x00"),
	HX_HCSTRING("float","\x9c","\xc5","\x96","\x02"),
	::String(null()) };

static void NativeRandom_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NativeRandom_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NativeRandom_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NativeRandom_obj::__mClass,"__mClass");
};

#endif

hx::Class NativeRandom_obj::__mClass;

void NativeRandom_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.math.random.NativeRandom","\xe9","\xc7","\x61","\x5b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = NativeRandom_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NativeRandom_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NativeRandom_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NativeRandom_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NativeRandom_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NativeRandom_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace math
} // end namespace random
