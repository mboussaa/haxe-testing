<?php

// Generated by Haxe 3.3.0
class thx_math_random_TestNativeRandom {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testIntBoundaries() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$random = new thx_math_random_NativeRandom();
			{
				$_g2 = 0;
				while($_g2 < 1000) {
					$i = $_g2++;
					$v = $random->int();
					$tmp = null;
					if($v >= 0) {
						$tmp = $v <= 2147483647;
					} else {
						$tmp = false;
					}
					utest_Assert::isTrue($tmp, "expected value to be between 0 and 0x7FFFFFFF, but is " . _hx_string_rec($i, ""), _hx_anonymous(array("fileName" => "TestNativeRandom.hx", "lineNumber" => 17, "className" => "thx.math.random.TestNativeRandom", "methodName" => "testIntBoundaries")));
					unset($v,$tmp,$i);
				}
				unset($_g2);
			}
			unset($random);
		}
	}
	public function testFloatBoundaries() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$random = new thx_math_random_NativeRandom();
			{
				$_g2 = 0;
				while($_g2 < 1000) {
					$i = $_g2++;
					$v = $random->float();
					$tmp = null;
					if($v >= 0) {
						$tmp = $v <= 1.0;
					} else {
						$tmp = false;
					}
					utest_Assert::isTrue($tmp, "expected value to be between 0 and 1, but is " . _hx_string_rec($i, ""), _hx_anonymous(array("fileName" => "TestNativeRandom.hx", "lineNumber" => 27, "className" => "thx.math.random.TestNativeRandom", "methodName" => "testFloatBoundaries")));
					unset($v,$tmp,$i);
				}
				unset($_g2);
			}
			unset($random);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.math.random.TestNativeRandom'; }
}
