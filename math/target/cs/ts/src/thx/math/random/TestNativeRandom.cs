// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.math.random {
	public class TestNativeRandom : global::haxe.lang.HxObject {
		
		public TestNativeRandom(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestNativeRandom() {
			global::thx.math.random.TestNativeRandom.__hx_ctor_thx_math_random_TestNativeRandom(this);
		}
		
		
		public static void __hx_ctor_thx_math_random_TestNativeRandom(global::thx.math.random.TestNativeRandom __temp_me137) {
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.math.random.TestNativeRandom(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.math.random.TestNativeRandom();
		}
		
		
		public virtual void testIntBoundaries() {
			unchecked {
				global::thx.math.random.NativeRandom random = new global::thx.math.random.NativeRandom();
				{
					int _g = 0;
					while (( _g < 1000 )) {
						int i = _g++;
						int v = random.@int();
						global::utest.Assert.isTrue(( ( v >= 0 ) && ( v <= 2147483647 ) ), global::haxe.lang.Runtime.concat("expected value to be between 0 and 0x7FFFFFFF, but is ", global::haxe.lang.Runtime.toString(i)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIntBoundaries", "thx.math.random.TestNativeRandom", "TestNativeRandom.hx"}, new int[]{1981972957}, new double[]{((double) (13) )}));
					}
					
				}
				
			}
		}
		
		
		public virtual void testFloatBoundaries() {
			unchecked {
				global::thx.math.random.NativeRandom random = new global::thx.math.random.NativeRandom();
				{
					int _g = 0;
					while (( _g < 1000 )) {
						int i = _g++;
						double v = random.@float();
						global::utest.Assert.isTrue(( ( v >= 0 ) && ( v <= 1.0 ) ), global::haxe.lang.Runtime.concat("expected value to be between 0 and 1, but is ", global::haxe.lang.Runtime.toString(i)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFloatBoundaries", "thx.math.random.TestNativeRandom", "TestNativeRandom.hx"}, new int[]{1981972957}, new double[]{((double) (22) )}));
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 952638546:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFloatBoundaries", 952638546)) );
					}
					
					
					case 1180350949:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testIntBoundaries", 1180350949)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 952638546:
					{
						this.testFloatBoundaries();
						break;
					}
					
					
					case 1180350949:
					{
						this.testIntBoundaries();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
	}
}


