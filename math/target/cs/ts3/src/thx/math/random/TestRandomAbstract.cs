// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.math.random {
	public class TestRandomAbstract : global::haxe.lang.HxObject {
		
		public TestRandomAbstract(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestRandomAbstract(int i) {
			global::thx.math.random.TestRandomAbstract.__hx_ctor_thx_math_random_TestRandomAbstract(this, i);
		}
		
		
		public static void __hx_ctor_thx_math_random_TestRandomAbstract(global::thx.math.random.TestRandomAbstract __temp_me136, int i) {
			__temp_me136.x = i;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.math.random.TestRandomAbstract(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.math.random.TestRandomAbstract(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ));
		}
		
		
		public int x;
		
		public virtual void testLessThan() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					object random = new global::thx.math.random.PseudoRandom(((global::haxe.lang.Null<int>) (default(global::haxe.lang.Null<int>)) ));
					{
						int _g2 = 0;
						while (( _g2 < 100 )) {
							 ++ _g2;
							int r = global::thx.math.random._Random.Random_Impl_.lessThan(random, 10);
							global::utest.Assert.isTrue(( r >= 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLessThan", "thx.math.random.TestRandomAbstract", "TestRandomAbstract.hx"}, new int[]{1981972957}, new double[]{((double) (17) )}));
							global::utest.Assert.isTrue(( r < 10 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLessThan", "thx.math.random.TestRandomAbstract", "TestRandomAbstract.hx"}, new int[]{1981972957}, new double[]{((double) (18) )}));
						}
						
					}
					
				}
				
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1715176908:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testLessThan", 1715176908)) );
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						return ((double) (this.x) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1715176908:
					{
						this.testLessThan();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}


