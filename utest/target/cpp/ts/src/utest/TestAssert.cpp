// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_IntIterator
#include <IntIterator.h>
#endif
#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED__List_ListNode
#include <_List/ListNode.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif
#ifndef INCLUDED_utest_Assertation
#include <utest/Assertation.h>
#endif
#ifndef INCLUDED_utest_TestAssert
#include <utest/TestAssert.h>
#endif
#ifndef INCLUDED_utest__TestAssert_Sample
#include <utest/_TestAssert/Sample.h>
#endif

namespace utest{

void TestAssert_obj::__construct(){
            	HX_STACK_FRAME("utest.TestAssert","new",0xb263d311,"utest.TestAssert.new","utest/TestAssert.hx",8,0x23e84cde)
            	HX_STACK_THIS(this)
            	}

Dynamic TestAssert_obj::__CreateEmpty() { return new TestAssert_obj; }

hx::ObjectPtr< TestAssert_obj > TestAssert_obj::__new()
{
	hx::ObjectPtr< TestAssert_obj > _hx_result = new TestAssert_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestAssert_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestAssert_obj > _hx_result = new TestAssert_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestAssert_obj::bypass(){
            	HX_STACK_FRAME("utest.TestAssert","bypass",0xe4237417,"utest.TestAssert.bypass","utest/TestAssert.hx",12,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE(  13)		this->resultsbypass = ::utest::Assert_obj::results;
HXLINE(  14)		::utest::Assert_obj::results =  ::List_obj::__new();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,bypass,(void))

void TestAssert_obj::restore(){
            	HX_STACK_FRAME("utest.TestAssert","restore",0x1bd6167f,"utest.TestAssert.restore","utest/TestAssert.hx",17,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE(  18)		this->results = ::utest::Assert_obj::results;
HXLINE(  19)		::utest::Assert_obj::results = this->resultsbypass;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,restore,(void))

void TestAssert_obj::testBooleans(){
            	HX_STACK_FRAME("utest.TestAssert","testBooleans",0x48722e6c,"utest.TestAssert.testBooleans","utest/TestAssert.hx",22,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE(  23)		this->bypass();
HXLINE(  24)		::utest::Assert_obj::isTrue(true,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),24,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testBooleans",3d,8f,15,34)));
HXLINE(  25)		::utest::Assert_obj::isTrue(false,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),25,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testBooleans",3d,8f,15,34)));
HXLINE(  26)		::utest::Assert_obj::isFalse(true,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),26,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testBooleans",3d,8f,15,34)));
HXLINE(  27)		::utest::Assert_obj::isFalse(false,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),27,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testBooleans",3d,8f,15,34)));
HXLINE(  28)		this->restore();
HXLINE(  29)		this->expect((int)2,(int)2,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testBooleans,(void))

void TestAssert_obj::testNullity(){
            	HX_STACK_FRAME("utest.TestAssert","testNullity",0xd7888b86,"utest.TestAssert.testNullity","utest/TestAssert.hx",32,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE(  33)		this->bypass();
HXLINE(  34)		::utest::Assert_obj::isNull(null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),34,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNullity",d5,ef,bc,d9)));
HXLINE(  35)		::utest::Assert_obj::isNull((int)0,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),35,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNullity",d5,ef,bc,d9)));
HXLINE(  36)		::utest::Assert_obj::isNull(((Float)0.0),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),36,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNullity",d5,ef,bc,d9)));
HXLINE(  37)		::utest::Assert_obj::isNull(((Float)0.1),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),37,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNullity",d5,ef,bc,d9)));
HXLINE(  38)		::utest::Assert_obj::isNull((int)1,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),38,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNullity",d5,ef,bc,d9)));
HXLINE(  39)		::utest::Assert_obj::isNull(HX_("",00,00,00,00),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),39,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNullity",d5,ef,bc,d9)));
HXLINE(  40)		::utest::Assert_obj::isNull(HX_("a",61,00,00,00),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),40,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNullity",d5,ef,bc,d9)));
HXLINE(  41)		::utest::Assert_obj::isNull(::Math_obj::NaN,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),41,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNullity",d5,ef,bc,d9)));
HXLINE(  42)		::utest::Assert_obj::isNull(::Math_obj::POSITIVE_INFINITY,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),42,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNullity",d5,ef,bc,d9)));
HXLINE(  43)		::utest::Assert_obj::isNull(true,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),43,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNullity",d5,ef,bc,d9)));
HXLINE(  44)		::utest::Assert_obj::isNull(false,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),44,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNullity",d5,ef,bc,d9)));
HXLINE(  45)		this->restore();
HXLINE(  46)		this->expect((int)1,(int)10,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testNullity,(void))

void TestAssert_obj::testNoNullity(){
            	HX_STACK_FRAME("utest.TestAssert","testNoNullity",0x4ac8eb05,"utest.TestAssert.testNoNullity","utest/TestAssert.hx",49,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE(  50)		this->bypass();
HXLINE(  51)		::utest::Assert_obj::notNull(null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),51,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNoNullity",14,41,1a,8e)));
HXLINE(  52)		::utest::Assert_obj::notNull((int)0,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),52,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNoNullity",14,41,1a,8e)));
HXLINE(  53)		::utest::Assert_obj::notNull(((Float)0.0),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),53,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNoNullity",14,41,1a,8e)));
HXLINE(  54)		::utest::Assert_obj::notNull(((Float)0.1),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),54,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNoNullity",14,41,1a,8e)));
HXLINE(  55)		::utest::Assert_obj::notNull((int)1,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),55,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNoNullity",14,41,1a,8e)));
HXLINE(  56)		::utest::Assert_obj::notNull(HX_("",00,00,00,00),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),56,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNoNullity",14,41,1a,8e)));
HXLINE(  57)		::utest::Assert_obj::notNull(HX_("a",61,00,00,00),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),57,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNoNullity",14,41,1a,8e)));
HXLINE(  58)		::utest::Assert_obj::notNull(::Math_obj::NaN,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),58,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNoNullity",14,41,1a,8e)));
HXLINE(  59)		::utest::Assert_obj::notNull(::Math_obj::POSITIVE_INFINITY,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),59,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNoNullity",14,41,1a,8e)));
HXLINE(  60)		::utest::Assert_obj::notNull(true,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),60,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNoNullity",14,41,1a,8e)));
HXLINE(  61)		::utest::Assert_obj::notNull(false,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),61,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNoNullity",14,41,1a,8e)));
HXLINE(  62)		this->restore();
HXLINE(  63)		this->expect((int)10,(int)1,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testNoNullity,(void))

void TestAssert_obj::testRaises(){
            	HX_STACK_FRAME("utest.TestAssert","testRaises",0x6df5d568,"utest.TestAssert.testRaises","utest/TestAssert.hx",66,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE(  67)		this->bypass();
HXLINE(  68)		HX_VARI( ::cpp::VirtualArray,errors) = ::cpp::VirtualArray_obj::__new(6)->init(0,HX_("e",65,00,00,00))->init(1,(int)1)->init(2,((Float)0.1))->init(3, ::utest::TestAssert_obj::__new())->init(4, ::Dynamic(hx::Anon_obj::Create(0)))->init(5,::cpp::VirtualArray_obj::__new(1)->init(0,(int)1));
HXLINE(  69)		HX_VARI( ::cpp::VirtualArray,types) = ::cpp::VirtualArray_obj::__new(6)->init(0,hx::ClassOf< ::String >())->init(1,hx::ClassOf< ::Int >())->init(2,hx::ClassOf< ::Float >())->init(3,hx::ClassOf< ::utest::TestAssert >())->init(4,hx::ClassOf< ::Dynamic >())->init(5,hx::ArrayBase::__mClass);
HXLINE(  70)		HX_VARI( Int,i) = (int)0;
HXLINE(  72)		{
HXLINE(  72)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  72)			while((_g < errors->get_length())){
HXLINE(  72)				HX_VARI(  ::Dynamic,error) = errors->__get(_g);
HXDLIN(  72)				++_g;
HXLINE(  73)				{
HXLINE(  73)					HX_VARI( Int,_g1) = (int)0;
HXDLIN(  73)					while((_g1 < types->get_length())){
            						HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,error) HXARGC(0)
            						void _hx_run(){
            							HX_STACK_FRAME("utest.TestAssert","testRaises",0x6df5d568,"utest.TestAssert.testRaises","utest/TestAssert.hx",75,0x23e84cde)
HXLINE(  75)							HX_STACK_DO_THROW(error);
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE(  73)						HX_VARI(  ::Dynamic,type) = types->__get(_g1);
HXDLIN(  73)						++_g1;
HXLINE(  74)						++i;
HXLINE(  75)						::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_0(error)),type,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),75,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testRaises",f9,af,40,cd)));
            					}
            				}
            			}
            		}
HXLINE(  77)		this->restore();
HXLINE(  78)		this->expect((int)12,(i - (int)12),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testRaises,(void))

void TestAssert_obj::testIs(){
            	HX_STACK_FRAME("utest.TestAssert","testIs",0x949642cb,"utest.TestAssert.testIs","utest/TestAssert.hx",81,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE(  82)		this->bypass();
HXLINE(  83)		HX_VARI( ::cpp::VirtualArray,values) = ::cpp::VirtualArray_obj::__new(6)->init(0,HX_("e",65,00,00,00))->init(1,(int)1)->init(2,((Float)0.1))->init(3, ::utest::TestAssert_obj::__new())->init(4, ::Dynamic(hx::Anon_obj::Create(0)))->init(5,::cpp::VirtualArray_obj::__new(1)->init(0,(int)1));
HXLINE(  84)		HX_VARI( ::cpp::VirtualArray,types) = ::cpp::VirtualArray_obj::__new(6)->init(0,hx::ClassOf< ::String >())->init(1,hx::ClassOf< ::Int >())->init(2,hx::ClassOf< ::Float >())->init(3,hx::ClassOf< ::utest::TestAssert >())->init(4,hx::ClassOf< ::Dynamic >())->init(5,hx::ArrayBase::__mClass);
HXLINE(  85)		HX_VARI( Int,i) = (int)0;
HXLINE(  87)		{
HXLINE(  87)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  87)			while((_g < values->get_length())){
HXLINE(  87)				HX_VARI(  ::Dynamic,value) = values->__get(_g);
HXDLIN(  87)				++_g;
HXLINE(  88)				{
HXLINE(  88)					HX_VARI( Int,_g1) = (int)0;
HXDLIN(  88)					while((_g1 < types->get_length())){
HXLINE(  88)						HX_VARI(  ::Dynamic,type) = types->__get(_g1);
HXDLIN(  88)						++_g1;
HXLINE(  89)						++i;
HXLINE(  90)						::utest::Assert_obj::is(value,type,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),90,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testIs",dc,40,3a,d5)));
            					}
            				}
            			}
            		}
HXLINE(  92)		this->restore();
HXLINE(  93)		this->expect((int)12,(i - (int)12),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testIs,(void))

void TestAssert_obj::testSamePrimitive(){
            	HX_STACK_FRAME("utest.TestAssert","testSamePrimitive",0x43887b20,"utest.TestAssert.testSamePrimitive","utest/TestAssert.hx",96,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE(  97)		this->bypass();
HXLINE(  98)		::utest::Assert_obj::same(null(),(int)1,null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),98,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSamePrimitive",af,84,3f,1c)));
HXLINE(  99)		::utest::Assert_obj::same((int)1,(int)1,null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),99,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSamePrimitive",af,84,3f,1c)));
HXLINE( 100)		::utest::Assert_obj::same((int)1,HX_("1",31,00,00,00),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),100,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSamePrimitive",af,84,3f,1c)));
HXLINE( 101)		::utest::Assert_obj::same(HX_("a",61,00,00,00),HX_("a",61,00,00,00),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),101,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSamePrimitive",af,84,3f,1c)));
HXLINE( 102)		::utest::Assert_obj::same(null(),HX_("",00,00,00,00),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),102,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSamePrimitive",af,84,3f,1c)));
HXLINE( 103)		::utest::Assert_obj::same( ::Date_obj::__new((int)2000,(int)0,(int)1,(int)0,(int)0,(int)0),null(),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),103,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSamePrimitive",af,84,3f,1c)));
HXLINE( 104)		HX_VARI(  ::haxe::ds::IntMap,_g) =  ::haxe::ds::IntMap_obj::__new();
HXDLIN( 104)		_g->set((int)1,HX_("a",61,00,00,00));
HXDLIN( 104)		_g->set((int)2,HX_("b",62,00,00,00));
HXDLIN( 104)		HX_VARI(  ::haxe::ds::IntMap,_g1) =  ::haxe::ds::IntMap_obj::__new();
HXDLIN( 104)		_g1->set((int)1,HX_("a",61,00,00,00));
HXDLIN( 104)		_g1->set((int)2,HX_("b",62,00,00,00));
HXDLIN( 104)		::utest::Assert_obj::same(_g,_g1,null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),104,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSamePrimitive",af,84,3f,1c)));
HXLINE( 105)		HX_VARI(  ::haxe::ds::StringMap,_g2) =  ::haxe::ds::StringMap_obj::__new();
HXDLIN( 105)		_g2->set(HX_("a",61,00,00,00),(int)1);
HXDLIN( 105)		HX_VARI(  ::haxe::ds::StringMap,_g3) =  ::haxe::ds::StringMap_obj::__new();
HXDLIN( 105)		_g3->set(HX_("a",61,00,00,00),(int)1);
HXDLIN( 105)		::utest::Assert_obj::same(_g2,_g3,null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),105,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSamePrimitive",af,84,3f,1c)));
HXLINE( 106)		HX_VARI(  ::haxe::ds::StringMap,_g4) =  ::haxe::ds::StringMap_obj::__new();
HXDLIN( 106)		_g4->set(HX_("a",61,00,00,00),(int)1);
HXDLIN( 106)		HX_VARI(  ::haxe::ds::IntMap,_g5) =  ::haxe::ds::IntMap_obj::__new();
HXDLIN( 106)		_g5->set((int)1,(int)1);
HXDLIN( 106)		::utest::Assert_obj::same(_g4,_g5,null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),106,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSamePrimitive",af,84,3f,1c)));
HXLINE( 107)		HX_VARI(  ::haxe::ds::IntMap,_g6) =  ::haxe::ds::IntMap_obj::__new();
HXDLIN( 107)		_g6->set((int)1,HX_("a",61,00,00,00));
HXDLIN( 107)		HX_VARI(  ::haxe::ds::IntMap,_g7) =  ::haxe::ds::IntMap_obj::__new();
HXDLIN( 107)		_g7->set((int)1,HX_("a",61,00,00,00));
HXDLIN( 107)		_g7->set((int)2,HX_("b",62,00,00,00));
HXDLIN( 107)		::utest::Assert_obj::same(_g6,_g7,null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),107,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSamePrimitive",af,84,3f,1c)));
HXLINE( 111)		this->restore();
HXLINE( 112)		this->expect((int)5,(int)6,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testSamePrimitive,(void))

void TestAssert_obj::testSameType(){
            	HX_STACK_FRAME("utest.TestAssert","testSameType",0xeef012e1,"utest.TestAssert.testSameType","utest/TestAssert.hx",115,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE( 116)		this->bypass();
HXLINE( 117)		::utest::Assert_obj::same(null(), ::Dynamic(hx::Anon_obj::Create(0)),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),117,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameType",b2,73,93,da)));
HXLINE( 118)		::utest::Assert_obj::same(null(),null(),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),118,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameType",b2,73,93,da)));
HXLINE( 119)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(0)),null(),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),119,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameType",b2,73,93,da)));
HXLINE( 120)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(0)),(int)1,null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),120,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameType",b2,73,93,da)));
HXLINE( 121)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(0)),::cpp::VirtualArray_obj::__new(0),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),121,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameType",b2,73,93,da)));
HXLINE( 122)		::utest::Assert_obj::same(null(),::utest::_TestAssert::Sample_obj::None_dyn(),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),122,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameType",b2,73,93,da)));
HXLINE( 123)		::utest::Assert_obj::same(::utest::_TestAssert::Sample_obj::None_dyn(),null(),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),123,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameType",b2,73,93,da)));
HXLINE( 125)		this->restore();
HXLINE( 126)		this->expect((int)1,(int)6,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testSameType,(void))

void TestAssert_obj::testSameArray(){
            	HX_STACK_FRAME("utest.TestAssert","testSameArray",0x2de46f92,"utest.TestAssert.testSameArray","utest/TestAssert.hx",129,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE( 130)		this->bypass();
HXLINE( 131)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(0),::cpp::VirtualArray_obj::__new(0),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),131,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameArray",a1,c5,35,71)));
HXLINE( 132)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,(int)1),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("1",31,00,00,00)),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),132,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameArray",a1,c5,35,71)));
HXLINE( 133)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),133,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameArray",a1,c5,35,71)));
HXLINE( 134)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,(int)2),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),134,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameArray",a1,c5,35,71)));
HXLINE( 135)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,(int)2),::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),135,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameArray",a1,c5,35,71)));
HXLINE( 136)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,(int)2)),::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,(int)2)),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),136,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameArray",a1,c5,35,71)));
HXLINE( 137)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,(int)2)),::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,::cpp::VirtualArray_obj::__new(0)),false,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),137,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameArray",a1,c5,35,71)));
HXLINE( 138)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,(int)2)),::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,::cpp::VirtualArray_obj::__new(0)),true,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),138,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameArray",a1,c5,35,71)));
HXLINE( 140)		this->restore();
HXLINE( 141)		this->expect((int)4,(int)4,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testSameArray,(void))

void TestAssert_obj::testSameObject(){
            	HX_STACK_FRAME("utest.TestAssert","testSameObject",0x574c36a6,"utest.TestAssert.testSameObject","utest/TestAssert.hx",144,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE( 145)		this->bypass();
HXLINE( 146)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(0)), ::Dynamic(hx::Anon_obj::Create(0)),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),146,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameObject",b7,2d,26,fb)));
HXLINE( 147)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("a",61,00,00,00),(int)1)), ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("a",61,00,00,00),HX_("1",31,00,00,00))),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),147,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameObject",b7,2d,26,fb)));
HXLINE( 148)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("a",61,00,00,00),(int)1)
            			->setFixed(1,HX_("b",62,00,00,00),HX_("c",63,00,00,00))), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("a",61,00,00,00),(int)1)
            			->setFixed(1,HX_("b",62,00,00,00),HX_("c",63,00,00,00))),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),148,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameObject",b7,2d,26,fb)));
HXLINE( 149)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("a",61,00,00,00),(int)1)
            			->setFixed(1,HX_("b",62,00,00,00),HX_("c",63,00,00,00))), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("a",61,00,00,00),(int)1)
            			->setFixed(1,HX_("c",63,00,00,00),HX_("c",63,00,00,00))),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),149,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameObject",b7,2d,26,fb)));
HXLINE( 150)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("a",61,00,00,00),(int)1)
            			->setFixed(1,HX_("b",62,00,00,00),HX_("c",63,00,00,00))), ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("a",61,00,00,00),(int)1)),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),150,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameObject",b7,2d,26,fb)));
HXLINE( 151)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("a",61,00,00,00),(int)1)
            			->setFixed(1,HX_("b",62,00,00,00), ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("a",61,00,00,00),(int)1)
            				->setFixed(1,HX_("c",63,00,00,00),HX_("c",63,00,00,00))))), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("a",61,00,00,00),(int)1)
            			->setFixed(1,HX_("b",62,00,00,00), ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("a",61,00,00,00),(int)1)
            				->setFixed(1,HX_("c",63,00,00,00),HX_("c",63,00,00,00))))),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),151,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameObject",b7,2d,26,fb)));
HXLINE( 152)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("a",61,00,00,00),(int)1)
            			->setFixed(1,HX_("b",62,00,00,00), ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("a",61,00,00,00),(int)1)
            				->setFixed(1,HX_("c",63,00,00,00),HX_("c",63,00,00,00))))), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("a",61,00,00,00),(int)1)
            			->setFixed(1,HX_("b",62,00,00,00), ::Dynamic(hx::Anon_obj::Create(0)))),false,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),152,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameObject",b7,2d,26,fb)));
HXLINE( 153)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("a",61,00,00,00),(int)1)
            			->setFixed(1,HX_("b",62,00,00,00), ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("a",61,00,00,00),(int)1)
            				->setFixed(1,HX_("c",63,00,00,00),HX_("c",63,00,00,00))))), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("a",61,00,00,00),(int)1)
            			->setFixed(1,HX_("b",62,00,00,00), ::Dynamic(hx::Anon_obj::Create(0)))),true,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),153,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameObject",b7,2d,26,fb)));
HXLINE( 155)		this->restore();
HXLINE( 156)		this->expect((int)4,(int)4,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testSameObject,(void))

void TestAssert_obj::testSameInstance(){
            	HX_STACK_FRAME("utest.TestAssert","testSameInstance",0xc278df3c,"utest.TestAssert.testSameInstance","utest/TestAssert.hx",161,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE( 162)		HX_VARI(  ::utest::TestAssert,c1) =  ::utest::TestAssert_obj::__new();
HXLINE( 163)		c1->value = HX_("a",61,00,00,00);
HXLINE( 164)		HX_VARI(  ::utest::TestAssert,c2) =  ::utest::TestAssert_obj::__new();
HXLINE( 165)		c2->value = HX_("a",61,00,00,00);
HXLINE( 166)		HX_VARI(  ::utest::TestAssert,c3) =  ::utest::TestAssert_obj::__new();
HXLINE( 168)		HX_VARI(  ::utest::TestAssert,r1) =  ::utest::TestAssert_obj::__new();
HXLINE( 169)		r1->sub = c1;
HXLINE( 170)		HX_VARI(  ::utest::TestAssert,r2) =  ::utest::TestAssert_obj::__new();
HXLINE( 171)		r2->sub = c2;
HXLINE( 172)		HX_VARI(  ::utest::TestAssert,r3) =  ::utest::TestAssert_obj::__new();
HXLINE( 173)		r3->sub = c3;
HXLINE( 176)		this->bypass();
HXLINE( 177)		::utest::Assert_obj::same(c1,c1,null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),177,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameInstance",8d,7c,0b,8a)));
HXLINE( 178)		::utest::Assert_obj::same(c1,c2,null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),178,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameInstance",8d,7c,0b,8a)));
HXLINE( 179)		::utest::Assert_obj::same(c1,c3,null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),179,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameInstance",8d,7c,0b,8a)));
HXLINE( 181)		::utest::Assert_obj::same(r1,r2,null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),181,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameInstance",8d,7c,0b,8a)));
HXLINE( 182)		::utest::Assert_obj::same(r1,r3,false,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),182,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameInstance",8d,7c,0b,8a)));
HXLINE( 183)		::utest::Assert_obj::same(r1,r3,true,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),183,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameInstance",8d,7c,0b,8a)));
HXLINE( 185)		this->restore();
HXLINE( 186)		this->expect((int)4,(int)2,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testSameInstance,(void))

void TestAssert_obj::testSameIterable(){
            	HX_STACK_FRAME("utest.TestAssert","testSameIterable",0xfc245e59,"utest.TestAssert.testSameIterable","utest/TestAssert.hx",189,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE( 190)		HX_VARI(  ::List,list1) =  ::List_obj::__new();
HXLINE( 191)		list1->add(HX_("a",61,00,00,00));
HXLINE( 192)		list1->add((int)1);
HXLINE( 193)		HX_VARI(  ::List,s1) =  ::List_obj::__new();
HXLINE( 194)		s1->add((int)2);
HXLINE( 195)		list1->add(s1);
HXLINE( 196)		HX_VARI(  ::List,list2) =  ::List_obj::__new();
HXLINE( 197)		list2->add(HX_("a",61,00,00,00));
HXLINE( 198)		list2->add((int)1);
HXLINE( 199)		list2->add(s1);
HXLINE( 200)		HX_VARI(  ::List,list3) =  ::List_obj::__new();
HXLINE( 201)		list3->add(HX_("a",61,00,00,00));
HXLINE( 202)		list3->add((int)1);
HXLINE( 203)		list3->add( ::List_obj::__new());
HXLINE( 205)		this->bypass();
HXLINE( 206)		::utest::Assert_obj::same(list1,list2,null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),206,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameIterable",aa,fb,b6,c3)));
HXLINE( 207)		::utest::Assert_obj::same(list1,list3,false,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),207,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameIterable",aa,fb,b6,c3)));
HXLINE( 208)		::utest::Assert_obj::same(list1,list3,true,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),208,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameIterable",aa,fb,b6,c3)));
HXLINE( 210)		::utest::Assert_obj::same( ::IntIterator_obj::__new((int)0,(int)3), ::IntIterator_obj::__new((int)0,(int)3),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),210,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameIterable",aa,fb,b6,c3)));
HXLINE( 211)		::utest::Assert_obj::same( ::IntIterator_obj::__new((int)0,(int)3), ::IntIterator_obj::__new((int)0,(int)4),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),211,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameIterable",aa,fb,b6,c3)));
HXLINE( 213)		this->restore();
HXLINE( 214)		this->expect((int)3,(int)2,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testSameIterable,(void))

void TestAssert_obj::testSameEnums(){
            	HX_STACK_FRAME("utest.TestAssert","testSameEnums",0x78dc384b,"utest.TestAssert.testSameEnums","utest/TestAssert.hx",245,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE( 246)		this->bypass();
HXLINE( 248)		::utest::Assert_obj::same(::utest::_TestAssert::Sample_obj::None_dyn(),::utest::_TestAssert::Sample_obj::None_dyn(),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),248,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameEnums",5a,8e,2d,bc)));
HXLINE( 249)		::hx::EnumBase _hx_tmp = ::utest::_TestAssert::Sample_obj::Some(HX_("a",61,00,00,00));
HXDLIN( 249)		::hx::EnumBase _hx_tmp1 = ::utest::_TestAssert::Sample_obj::Some(HX_("a",61,00,00,00));
HXDLIN( 249)		::utest::Assert_obj::same(_hx_tmp,_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),249,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameEnums",5a,8e,2d,bc)));
HXLINE( 250)		::hx::EnumBase _hx_tmp2 = ::utest::_TestAssert::Sample_obj::Some(HX_("a",61,00,00,00));
HXDLIN( 250)		::hx::EnumBase _hx_tmp3 = ::utest::_TestAssert::Sample_obj::Some(HX_("b",62,00,00,00));
HXDLIN( 250)		::utest::Assert_obj::same(_hx_tmp2,_hx_tmp3,true,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),250,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameEnums",5a,8e,2d,bc)));
HXLINE( 251)		::hx::EnumBase _hx_tmp4 = ::utest::_TestAssert::Sample_obj::Some(HX_("a",61,00,00,00));
HXDLIN( 251)		::hx::EnumBase _hx_tmp5 = ::utest::_TestAssert::Sample_obj::Some(HX_("b",62,00,00,00));
HXDLIN( 251)		::utest::Assert_obj::same(_hx_tmp4,_hx_tmp5,false,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),251,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameEnums",5a,8e,2d,bc)));
HXLINE( 252)		::hx::EnumBase _hx_tmp6 = ::utest::_TestAssert::Sample_obj::Some(HX_("a",61,00,00,00));
HXDLIN( 252)		::utest::Assert_obj::same(_hx_tmp6,::utest::_TestAssert::Sample_obj::None_dyn(),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),252,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameEnums",5a,8e,2d,bc)));
HXLINE( 253)		::hx::EnumBase _hx_tmp7 = ::utest::_TestAssert::Sample_obj::Some(HX_("a",61,00,00,00));
HXDLIN( 253)		::hx::EnumBase _hx_tmp8 = ::utest::_TestAssert::Sample_obj::Rec(_hx_tmp7);
HXDLIN( 253)		::hx::EnumBase _hx_tmp9 = ::utest::_TestAssert::Sample_obj::Rec(_hx_tmp8);
HXDLIN( 253)		::hx::EnumBase _hx_tmp10 = ::utest::_TestAssert::Sample_obj::Some(HX_("a",61,00,00,00));
HXDLIN( 253)		::hx::EnumBase _hx_tmp11 = ::utest::_TestAssert::Sample_obj::Rec(_hx_tmp10);
HXDLIN( 253)		::hx::EnumBase _hx_tmp12 = ::utest::_TestAssert::Sample_obj::Rec(_hx_tmp11);
HXDLIN( 253)		::utest::Assert_obj::same(_hx_tmp9,_hx_tmp12,null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),253,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameEnums",5a,8e,2d,bc)));
HXLINE( 254)		::hx::EnumBase _hx_tmp13 = ::utest::_TestAssert::Sample_obj::Some(HX_("a",61,00,00,00));
HXDLIN( 254)		::hx::EnumBase _hx_tmp14 = ::utest::_TestAssert::Sample_obj::Rec(_hx_tmp13);
HXDLIN( 254)		::hx::EnumBase _hx_tmp15 = ::utest::_TestAssert::Sample_obj::Rec(_hx_tmp14);
HXDLIN( 254)		::hx::EnumBase _hx_tmp16 = ::utest::_TestAssert::Sample_obj::Rec(::utest::_TestAssert::Sample_obj::None_dyn());
HXDLIN( 254)		::utest::Assert_obj::same(_hx_tmp15,_hx_tmp16,true,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),254,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameEnums",5a,8e,2d,bc)));
HXLINE( 257)		::hx::EnumBase _hx_tmp17 = ::utest::_TestAssert::Sample_obj::Some(HX_("a",61,00,00,00));
HXDLIN( 257)		::hx::EnumBase _hx_tmp18 = ::utest::_TestAssert::Sample_obj::Rec(_hx_tmp17);
HXDLIN( 257)		::hx::EnumBase _hx_tmp19 = ::utest::_TestAssert::Sample_obj::Rec(_hx_tmp18);
HXDLIN( 257)		::hx::EnumBase _hx_tmp20 = ::utest::_TestAssert::Sample_obj::Rec(::utest::_TestAssert::Sample_obj::None_dyn());
HXDLIN( 257)		::hx::EnumBase _hx_tmp21 = ::utest::_TestAssert::Sample_obj::Rec(_hx_tmp20);
HXDLIN( 257)		::utest::Assert_obj::same(_hx_tmp19,_hx_tmp21,false,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),257,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameEnums",5a,8e,2d,bc)));
HXLINE( 260)		this->restore();
HXLINE( 264)		this->expect((int)4,(int)4,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testSameEnums,(void))

void TestAssert_obj::testEquals(){
            	HX_STACK_FRAME("utest.TestAssert","testEquals",0x799c59a0,"utest.TestAssert.testEquals","utest/TestAssert.hx",268,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE( 269)		this->bypass();
HXLINE( 270)		HX_VARI( ::cpp::VirtualArray,values) = ::cpp::VirtualArray_obj::__new(4)->init(0,HX_("e",65,00,00,00))->init(1,(int)1)->init(2,((Float)0.1))->init(3, ::Dynamic(hx::Anon_obj::Create(0)));
HXLINE( 271)		HX_VARI( ::cpp::VirtualArray,expecteds) = ::cpp::VirtualArray_obj::__new(4)->init(0,HX_("e",65,00,00,00))->init(1,(int)1)->init(2,((Float)0.1))->init(3, ::Dynamic(hx::Anon_obj::Create(0)));
HXLINE( 272)		HX_VARI( Int,i) = (int)0;
HXLINE( 274)		{
HXLINE( 274)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 274)			while((_g < expecteds->get_length())){
HXLINE( 274)				HX_VARI(  ::Dynamic,expected) = expecteds->__get(_g);
HXDLIN( 274)				++_g;
HXLINE( 275)				{
HXLINE( 275)					HX_VARI( Int,_g1) = (int)0;
HXDLIN( 275)					while((_g1 < values->get_length())){
HXLINE( 275)						HX_VARI(  ::Dynamic,value) = values->__get(_g1);
HXDLIN( 275)						++_g1;
HXLINE( 276)						++i;
HXLINE( 277)						::utest::Assert_obj::equals(expected,value,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),277,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testEquals",31,34,e7,d8)));
            					}
            				}
            			}
            		}
HXLINE( 279)		this->restore();
HXLINE( 280)		this->expect((int)3,(i - (int)3),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testEquals,(void))

void TestAssert_obj::testFloatEquals(){
            	HX_STACK_FRAME("utest.TestAssert","testFloatEquals",0x0104f9fa,"utest.TestAssert.testFloatEquals","utest/TestAssert.hx",283,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE( 284)		this->bypass();
HXLINE( 285)		HX_VARI( ::Array< Float >,values) = ::Array_obj< Float >::__new(8)->init(0,(int)1)->init(1,((Float)0.1))->init(2,((Float)0.000000000000000000000000000011))->init(3,::Math_obj::NaN)->init(4,::Math_obj::NEGATIVE_INFINITY)->init(5,::Math_obj::POSITIVE_INFINITY)->init(6,::Math_obj::PI)->init(7,((Float)0.11));
HXLINE( 286)		HX_VARI( ::Array< Float >,expecteds) = ::Array_obj< Float >::__new(8)->init(0,(int)1)->init(1,((Float)0.1))->init(2,((Float)0.000000000000000000000000000012))->init(3,::Math_obj::NaN)->init(4,::Math_obj::NEGATIVE_INFINITY)->init(5,::Math_obj::POSITIVE_INFINITY)->init(6,::Math_obj::PI)->init(7,((Float)0.12));
HXLINE( 287)		HX_VARI( Int,i) = (int)0;
HXLINE( 289)		{
HXLINE( 289)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 289)			while((_g < expecteds->length)){
HXLINE( 289)				HX_VARI( Float,expected) = expecteds->__get(_g);
HXDLIN( 289)				++_g;
HXLINE( 290)				{
HXLINE( 290)					HX_VARI( Int,_g1) = (int)0;
HXDLIN( 290)					while((_g1 < values->length)){
HXLINE( 290)						HX_VARI( Float,value) = values->__get(_g1);
HXDLIN( 290)						++_g1;
HXLINE( 291)						++i;
HXLINE( 292)						::utest::Assert_obj::floatEquals(expected,value,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),292,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testFloatEquals",c9,31,e3,bb)));
            					}
            				}
            			}
            		}
HXLINE( 294)		this->restore();
HXLINE( 295)		this->expect((int)7,(i - (int)7),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testFloatEquals,(void))

void TestAssert_obj::testPass(){
            	HX_STACK_FRAME("utest.TestAssert","testPass",0x9d5805f2,"utest.TestAssert.testPass","utest/TestAssert.hx",298,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE( 299)		this->bypass();
HXLINE( 300)		::utest::Assert_obj::pass(null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),300,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testPass",43,6a,84,4d)));
HXLINE( 301)		this->restore();
HXLINE( 302)		this->expect((int)1,(int)0,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testPass,(void))

void TestAssert_obj::testFail(){
            	HX_STACK_FRAME("utest.TestAssert","testFail",0x96bbdaff,"utest.TestAssert.testFail","utest/TestAssert.hx",305,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE( 306)		this->bypass();
HXLINE( 307)		::utest::Assert_obj::fail(null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),307,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testFail",50,3f,e8,46)));
HXLINE( 308)		this->restore();
HXLINE( 309)		this->expect((int)0,(int)1,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testFail,(void))

void TestAssert_obj::testWarn(){
            	HX_STACK_FRAME("utest.TestAssert","testWarn",0xa1f88367,"utest.TestAssert.testWarn","utest/TestAssert.hx",312,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE( 313)		this->bypass();
HXLINE( 314)		::utest::Assert_obj::warn(HX_("",00,00,00,00));
HXLINE( 315)		this->restore();
HXLINE( 316)		this->expect((int)0,(int)0,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testWarn,(void))

void TestAssert_obj::expect(Int esuccesses,Int efailures,hx::Null< Int >  __o_eothers){
Int eothers = __o_eothers.Default(0);
            	HX_STACK_FRAME("utest.TestAssert","expect",0x83d1efc8,"utest.TestAssert.expect","utest/TestAssert.hx",319,0x23e84cde)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(esuccesses,"esuccesses")
            	HX_STACK_ARG(efailures,"efailures")
            	HX_STACK_ARG(eothers,"eothers")
HXLINE( 321)		HX_VARI( Int,failures) = (int)0;
HXLINE( 322)		HX_VARI( Int,others) = (int)0;
HXLINE( 323)		{
HXLINE( 323)			HX_VARI(  ::_List::ListNode,_g_head) = this->results->h;
HXDLIN( 323)			while(hx::IsNotNull( _g_head )){
HXLINE( 323)				HX_VARI( ::hx::EnumBase,val) = _g_head->item;
HXLINE( 319)				_g_head = _g_head->next;
HXLINE( 324)				Int _hx_tmp = ( ( ::hx::EnumBase)(val) )->_hx_getIndex();
HXDLIN( 324)				switch((int)(_hx_tmp)){
            					case (int)0: {
            					}
            					break;
            					case (int)1: {
HXLINE( 328)						++failures;
            					}
            					break;
            					default:{
HXLINE( 330)						++others;
            					}
            				}
            			}
            		}
HXLINE( 333)		::utest::Assert_obj::equals(eothers,others,(((HX_("expected ",a8,7a,f8,e9) + eothers) + HX_(" other results but were ",86,c2,27,72)) + others),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),333,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("expect",d9,ed,75,c4)));
HXLINE( 336)		::utest::Assert_obj::equals(efailures,failures,(((HX_("expected ",a8,7a,f8,e9) + efailures) + HX_(" failures but were ",c9,15,d3,56)) + failures),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),336,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("expect",d9,ed,75,c4)));
            	}


HX_DEFINE_DYNAMIC_FUNC3(TestAssert_obj,expect,(void))


TestAssert_obj::TestAssert_obj()
{
}

void TestAssert_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TestAssert);
	HX_MARK_MEMBER_NAME(resultsbypass,"resultsbypass");
	HX_MARK_MEMBER_NAME(results,"results");
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_MEMBER_NAME(sub,"sub");
	HX_MARK_END_CLASS();
}

void TestAssert_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(resultsbypass,"resultsbypass");
	HX_VISIT_MEMBER_NAME(results,"results");
	HX_VISIT_MEMBER_NAME(value,"value");
	HX_VISIT_MEMBER_NAME(sub,"sub");
}

hx::Val TestAssert_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"sub") ) { return hx::Val( sub); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bypass") ) { return hx::Val( bypass_dyn()); }
		if (HX_FIELD_EQ(inName,"testIs") ) { return hx::Val( testIs_dyn()); }
		if (HX_FIELD_EQ(inName,"expect") ) { return hx::Val( expect_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"results") ) { return hx::Val( results); }
		if (HX_FIELD_EQ(inName,"restore") ) { return hx::Val( restore_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"testPass") ) { return hx::Val( testPass_dyn()); }
		if (HX_FIELD_EQ(inName,"testFail") ) { return hx::Val( testFail_dyn()); }
		if (HX_FIELD_EQ(inName,"testWarn") ) { return hx::Val( testWarn_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testRaises") ) { return hx::Val( testRaises_dyn()); }
		if (HX_FIELD_EQ(inName,"testEquals") ) { return hx::Val( testEquals_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testNullity") ) { return hx::Val( testNullity_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testBooleans") ) { return hx::Val( testBooleans_dyn()); }
		if (HX_FIELD_EQ(inName,"testSameType") ) { return hx::Val( testSameType_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"resultsbypass") ) { return hx::Val( resultsbypass); }
		if (HX_FIELD_EQ(inName,"testNoNullity") ) { return hx::Val( testNoNullity_dyn()); }
		if (HX_FIELD_EQ(inName,"testSameArray") ) { return hx::Val( testSameArray_dyn()); }
		if (HX_FIELD_EQ(inName,"testSameEnums") ) { return hx::Val( testSameEnums_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testSameObject") ) { return hx::Val( testSameObject_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"testFloatEquals") ) { return hx::Val( testFloatEquals_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"testSameInstance") ) { return hx::Val( testSameInstance_dyn()); }
		if (HX_FIELD_EQ(inName,"testSameIterable") ) { return hx::Val( testSameIterable_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"testSamePrimitive") ) { return hx::Val( testSamePrimitive_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestAssert_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"sub") ) { sub=inValue.Cast<  ::utest::TestAssert >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"results") ) { results=inValue.Cast<  ::List >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"resultsbypass") ) { resultsbypass=inValue.Cast<  ::List >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestAssert_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("resultsbypass","\x9e","\xe7","\xd0","\x81"));
	outFields->push(HX_HCSTRING("results","\xf6","\x58","\x57","\x6b"));
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	outFields->push(HX_HCSTRING("sub","\x80","\xa9","\x57","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestAssert_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::List*/ ,(int)offsetof(TestAssert_obj,resultsbypass),HX_HCSTRING("resultsbypass","\x9e","\xe7","\xd0","\x81")},
	{hx::fsObject /*::List*/ ,(int)offsetof(TestAssert_obj,results),HX_HCSTRING("results","\xf6","\x58","\x57","\x6b")},
	{hx::fsString,(int)offsetof(TestAssert_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{hx::fsObject /*::utest::TestAssert*/ ,(int)offsetof(TestAssert_obj,sub),HX_HCSTRING("sub","\x80","\xa9","\x57","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestAssert_obj_sStaticStorageInfo = 0;
#endif

static ::String TestAssert_obj_sMemberFields[] = {
	HX_HCSTRING("resultsbypass","\x9e","\xe7","\xd0","\x81"),
	HX_HCSTRING("results","\xf6","\x58","\x57","\x6b"),
	HX_HCSTRING("bypass","\x28","\x72","\xc7","\x24"),
	HX_HCSTRING("restore","\x4e","\x67","\xb0","\x6a"),
	HX_HCSTRING("testBooleans","\x3d","\x8f","\x15","\x34"),
	HX_HCSTRING("testNullity","\xd5","\xef","\xbc","\xd9"),
	HX_HCSTRING("testNoNullity","\x14","\x41","\x1a","\x8e"),
	HX_HCSTRING("testRaises","\xf9","\xaf","\x40","\xcd"),
	HX_HCSTRING("testIs","\xdc","\x40","\x3a","\xd5"),
	HX_HCSTRING("testSamePrimitive","\xaf","\x84","\x3f","\x1c"),
	HX_HCSTRING("testSameType","\xb2","\x73","\x93","\xda"),
	HX_HCSTRING("testSameArray","\xa1","\xc5","\x35","\x71"),
	HX_HCSTRING("testSameObject","\xb7","\x2d","\x26","\xfb"),
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("sub","\x80","\xa9","\x57","\x00"),
	HX_HCSTRING("testSameInstance","\x8d","\x7c","\x0b","\x8a"),
	HX_HCSTRING("testSameIterable","\xaa","\xfb","\xb6","\xc3"),
	HX_HCSTRING("testSameEnums","\x5a","\x8e","\x2d","\xbc"),
	HX_HCSTRING("testEquals","\x31","\x34","\xe7","\xd8"),
	HX_HCSTRING("testFloatEquals","\xc9","\x31","\xe3","\xbb"),
	HX_HCSTRING("testPass","\x43","\x6a","\x84","\x4d"),
	HX_HCSTRING("testFail","\x50","\x3f","\xe8","\x46"),
	HX_HCSTRING("testWarn","\xb8","\xe7","\x24","\x52"),
	HX_HCSTRING("expect","\xd9","\xed","\x75","\xc4"),
	::String(null()) };

static void TestAssert_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestAssert_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestAssert_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestAssert_obj::__mClass,"__mClass");
};

#endif

hx::Class TestAssert_obj::__mClass;

void TestAssert_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("utest.TestAssert","\x9f","\xf6","\x3e","\xfd");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestAssert_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestAssert_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestAssert_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestAssert_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestAssert_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestAssert_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace utest
