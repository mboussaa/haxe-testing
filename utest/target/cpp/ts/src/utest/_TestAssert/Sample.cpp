// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_utest__TestAssert_Sample
#include <utest/_TestAssert/Sample.h>
#endif
namespace utest{
namespace _TestAssert{

::utest::_TestAssert::Sample Sample_obj::None;

::utest::_TestAssert::Sample Sample_obj::Rec(::hx::EnumBase s)
{
	return hx::CreateEnum< Sample_obj >(HX_("Rec",30,91,3e,00),2,1)->_hx_init(0,s);
}

::utest::_TestAssert::Sample Sample_obj::Some(::String s)
{
	return hx::CreateEnum< Sample_obj >(HX_("Some",14,4f,31,37),1,1)->_hx_init(0,s);
}

bool Sample_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	if (inName==HX_("None",d8,3e,e3,33)) { outValue = Sample_obj::None; return true; }
	if (inName==HX_("Rec",30,91,3e,00)) { outValue = Sample_obj::Rec_dyn(); return true; }
	if (inName==HX_("Some",14,4f,31,37)) { outValue = Sample_obj::Some_dyn(); return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(Sample_obj)

int Sample_obj::__FindIndex(::String inName)
{
	if (inName==HX_("None",d8,3e,e3,33)) return 0;
	if (inName==HX_("Rec",30,91,3e,00)) return 2;
	if (inName==HX_("Some",14,4f,31,37)) return 1;
	return super::__FindIndex(inName);
}

STATIC_HX_DEFINE_DYNAMIC_FUNC1(Sample_obj,Rec,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(Sample_obj,Some,return)

int Sample_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("None",d8,3e,e3,33)) return 0;
	if (inName==HX_("Rec",30,91,3e,00)) return 1;
	if (inName==HX_("Some",14,4f,31,37)) return 1;
	return super::__FindArgCount(inName);
}

hx::Val Sample_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	if (inName==HX_("None",d8,3e,e3,33)) return None;
	if (inName==HX_("Rec",30,91,3e,00)) return Rec_dyn();
	if (inName==HX_("Some",14,4f,31,37)) return Some_dyn();
	return super::__Field(inName,inCallProp);
}

static ::String Sample_obj_sStaticFields[] = {
	HX_("None",d8,3e,e3,33),
	HX_("Some",14,4f,31,37),
	HX_("Rec",30,91,3e,00),
	::String(null())
};

static void Sample_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Sample_obj::None,"None");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Sample_obj_sVisitStatic(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Sample_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Sample_obj::None,"None");
};
#endif

hx::Class Sample_obj::__mClass;

Dynamic __Create_Sample_obj() { return new Sample_obj; }

void Sample_obj::__register()
{

hx::Static(__mClass) = hx::_hx_RegisterClass(HX_HCSTRING("utest._TestAssert.Sample","\xa8","\x8e","\x95","\x89"), hx::TCanCast< Sample_obj >,Sample_obj_sStaticFields,0,
	&__Create_Sample_obj, &__Create,
	&super::__SGetClass(), &CreateSample_obj, Sample_obj_sMarkStatics
#ifdef HXCPP_VISIT_ALLOCS
    , Sample_obj_sVisitStatic
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &Sample_obj::__GetStatic;
}

void Sample_obj::__boot()
{
None = hx::CreateEnum< Sample_obj >(HX_HCSTRING("None","\xd8","\x3e","\xe3","\x33"),0,0);
}


} // end namespace utest
} // end namespace _TestAssert
