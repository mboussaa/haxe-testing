// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif
#ifndef INCLUDED_utest_Dispatcher
#include <utest/Dispatcher.h>
#endif
#ifndef INCLUDED_utest_TestDispatcher
#include <utest/TestDispatcher.h>
#endif

namespace utest{

void TestDispatcher_obj::__construct(){
            	HX_STACK_FRAME("utest.TestDispatcher","new",0xe4e47af2,"utest.TestDispatcher.new","utest/TestDispatcher.hx",8,0xf6b7979d)
            	HX_STACK_THIS(this)
            	}

Dynamic TestDispatcher_obj::__CreateEmpty() { return new TestDispatcher_obj; }

hx::ObjectPtr< TestDispatcher_obj > TestDispatcher_obj::__new()
{
	hx::ObjectPtr< TestDispatcher_obj > _hx_result = new TestDispatcher_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestDispatcher_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestDispatcher_obj > _hx_result = new TestDispatcher_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestDispatcher_obj::testBase(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run(::String x){
            			HX_STACK_FRAME("utest.TestDispatcher","testBase",0xe12531b1,"utest.TestDispatcher.testBase","utest/TestDispatcher.hx",13,0xf6b7979d)
            			HX_STACK_ARG(x,"x")
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("utest.TestDispatcher","testBase",0xe12531b1,"utest.TestDispatcher.testBase","utest/TestDispatcher.hx",10,0xf6b7979d)
            	HX_STACK_THIS(this)
HXLINE(  11)		HX_VARI(  ::utest::Dispatcher,dispatcher) =  ::utest::Dispatcher_obj::__new();
HXLINE(  12)		Bool _hx_tmp = dispatcher->has();
HXDLIN(  12)		::utest::Assert_obj::isFalse(_hx_tmp,null(),hx::SourceInfo(HX_("TestDispatcher.hx",a5,b7,ec,29),12,HX_("utest.TestDispatcher",00,da,33,d6),HX_("testBase",83,6d,43,44)));
HXLINE(  13)		HX_VARI(  ::Dynamic,h) = dispatcher->add( ::Dynamic(new _hx_Closure_0()));
HXLINE(  14)		Bool _hx_tmp1 = dispatcher->has();
HXDLIN(  14)		::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestDispatcher.hx",a5,b7,ec,29),14,HX_("utest.TestDispatcher",00,da,33,d6),HX_("testBase",83,6d,43,44)));
HXLINE(  15)		dispatcher->remove(h);
HXLINE(  16)		Bool _hx_tmp2 = dispatcher->has();
HXDLIN(  16)		::utest::Assert_obj::isFalse(_hx_tmp2,null(),hx::SourceInfo(HX_("TestDispatcher.hx",a5,b7,ec,29),16,HX_("utest.TestDispatcher",00,da,33,d6),HX_("testBase",83,6d,43,44)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDispatcher_obj,testBase,(void))

void TestDispatcher_obj::handler1(::String s){
            	HX_STACK_FRAME("utest.TestDispatcher","handler1",0x7205e555,"utest.TestDispatcher.handler1","utest/TestDispatcher.hx",21,0xf6b7979d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s,"s")
HXLINE(  21)		hx::AddEq(this->v,(s + HX_("e1",2c,58,00,00)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestDispatcher_obj,handler1,(void))

void TestDispatcher_obj::handler2(::String s){
            	HX_STACK_FRAME("utest.TestDispatcher","handler2",0x7205e556,"utest.TestDispatcher.handler2","utest/TestDispatcher.hx",25,0xf6b7979d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s,"s")
HXLINE(  25)		hx::AddEq(this->v,(s + HX_("e2",2d,58,00,00)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestDispatcher_obj,handler2,(void))

void TestDispatcher_obj::testHandlers(){
            	HX_STACK_FRAME("utest.TestDispatcher","testHandlers",0x6fadbb09,"utest.TestDispatcher.testHandlers","utest/TestDispatcher.hx",28,0xf6b7979d)
            	HX_STACK_THIS(this)
HXLINE(  29)		HX_VARI(  ::utest::Dispatcher,dispatcher) =  ::utest::Dispatcher_obj::__new();
HXLINE(  30)		this->v = HX_("",00,00,00,00);
HXLINE(  31)		dispatcher->dispatch(HX_("d1",4d,57,00,00));
HXLINE(  32)		::utest::Assert_obj::equals(HX_("",00,00,00,00),this->v,null(),hx::SourceInfo(HX_("TestDispatcher.hx",a5,b7,ec,29),32,HX_("utest.TestDispatcher",00,da,33,d6),HX_("testHandlers",db,47,2b,48)));
HXLINE(  34)		this->v = HX_("",00,00,00,00);
HXLINE(  35)		dispatcher->add(this->handler1_dyn());
HXLINE(  36)		dispatcher->dispatch(HX_("d2",4e,57,00,00));
HXLINE(  37)		::utest::Assert_obj::equals(HX_("d2e1",fa,9e,3f,42),this->v,null(),hx::SourceInfo(HX_("TestDispatcher.hx",a5,b7,ec,29),37,HX_("utest.TestDispatcher",00,da,33,d6),HX_("testHandlers",db,47,2b,48)));
HXLINE(  39)		this->v = HX_("",00,00,00,00);
HXLINE(  40)		dispatcher->add(this->handler2_dyn());
HXLINE(  41)		dispatcher->dispatch(HX_("d3",4f,57,00,00));
HXLINE(  42)		::utest::Assert_obj::equals(HX_("d3e1d3e2",f7,7b,69,7b),this->v,null(),hx::SourceInfo(HX_("TestDispatcher.hx",a5,b7,ec,29),42,HX_("utest.TestDispatcher",00,da,33,d6),HX_("testHandlers",db,47,2b,48)));
HXLINE(  44)		this->v = HX_("",00,00,00,00);
HXLINE(  45)		dispatcher->add(this->handler1_dyn());
HXLINE(  46)		dispatcher->dispatch(HX_("d4",50,57,00,00));
HXLINE(  47)		::utest::Assert_obj::equals(HX_("d4e1d4e2d4e1",f5,48,f1,51),this->v,null(),hx::SourceInfo(HX_("TestDispatcher.hx",a5,b7,ec,29),47,HX_("utest.TestDispatcher",00,da,33,d6),HX_("testHandlers",db,47,2b,48)));
HXLINE(  49)		this->v = HX_("",00,00,00,00);
HXLINE(  50)		dispatcher->remove(this->handler1_dyn());
HXLINE(  51)		dispatcher->dispatch(HX_("d5",51,57,00,00));
HXLINE(  52)		::utest::Assert_obj::equals(HX_("d5e2d5e1",7b,82,fc,61),this->v,null(),hx::SourceInfo(HX_("TestDispatcher.hx",a5,b7,ec,29),52,HX_("utest.TestDispatcher",00,da,33,d6),HX_("testHandlers",db,47,2b,48)));
HXLINE(  54)		this->v = HX_("",00,00,00,00);
HXLINE(  55)		dispatcher->remove(this->handler1_dyn());
HXLINE(  56)		dispatcher->dispatch(HX_("d6",52,57,00,00));
HXLINE(  57)		::utest::Assert_obj::equals(HX_("d6e2",ff,a7,42,42),this->v,null(),hx::SourceInfo(HX_("TestDispatcher.hx",a5,b7,ec,29),57,HX_("utest.TestDispatcher",00,da,33,d6),HX_("testHandlers",db,47,2b,48)));
HXLINE(  59)		this->v = HX_("",00,00,00,00);
HXLINE(  60)		dispatcher->remove(this->handler2_dyn());
HXLINE(  61)		dispatcher->dispatch(HX_("d7",53,57,00,00));
HXLINE(  62)		::utest::Assert_obj::equals(HX_("",00,00,00,00),this->v,null(),hx::SourceInfo(HX_("TestDispatcher.hx",a5,b7,ec,29),62,HX_("utest.TestDispatcher",00,da,33,d6),HX_("testHandlers",db,47,2b,48)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDispatcher_obj,testHandlers,(void))

void TestDispatcher_obj::stopper(::String s){
            	HX_STACK_FRAME("utest.TestDispatcher","stopper",0xdf102dad,"utest.TestDispatcher.stopper","utest/TestDispatcher.hx",65,0xf6b7979d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s,"s")
HXLINE(  66)		hx::AddEq(this->v,(s + HX_("s",73,00,00,00)));
HXLINE(  67)		::utest::Dispatcher_obj::stop();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestDispatcher_obj,stopper,(void))

void TestDispatcher_obj::testStop(){
            	HX_STACK_FRAME("utest.TestDispatcher","testStop",0xec7039a2,"utest.TestDispatcher.testStop","utest/TestDispatcher.hx",70,0xf6b7979d)
            	HX_STACK_THIS(this)
HXLINE(  71)		HX_VARI(  ::utest::Dispatcher,dispatcher) =  ::utest::Dispatcher_obj::__new();
HXLINE(  72)		this->v = HX_("",00,00,00,00);
HXLINE(  73)		dispatcher->add(this->handler1_dyn());
HXLINE(  74)		dispatcher->add(this->stopper_dyn());
HXLINE(  75)		dispatcher->add(this->handler2_dyn());
HXLINE(  76)		dispatcher->dispatch(HX_("d1",4d,57,00,00));
HXLINE(  78)		::utest::Assert_obj::equals(HX_("d1e1d1s",6d,29,07,1e),this->v,null(),hx::SourceInfo(HX_("TestDispatcher.hx",a5,b7,ec,29),78,HX_("utest.TestDispatcher",00,da,33,d6),HX_("testStop",74,75,8e,4f)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDispatcher_obj,testStop,(void))


TestDispatcher_obj::TestDispatcher_obj()
{
}

void TestDispatcher_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TestDispatcher);
	HX_MARK_MEMBER_NAME(v,"v");
	HX_MARK_END_CLASS();
}

void TestDispatcher_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(v,"v");
}

hx::Val TestDispatcher_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"v") ) { return hx::Val( v); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"stopper") ) { return hx::Val( stopper_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"testBase") ) { return hx::Val( testBase_dyn()); }
		if (HX_FIELD_EQ(inName,"handler1") ) { return hx::Val( handler1_dyn()); }
		if (HX_FIELD_EQ(inName,"handler2") ) { return hx::Val( handler2_dyn()); }
		if (HX_FIELD_EQ(inName,"testStop") ) { return hx::Val( testStop_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testHandlers") ) { return hx::Val( testHandlers_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestDispatcher_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"v") ) { v=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestDispatcher_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("v","\x76","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestDispatcher_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TestDispatcher_obj,v),HX_HCSTRING("v","\x76","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestDispatcher_obj_sStaticStorageInfo = 0;
#endif

static ::String TestDispatcher_obj_sMemberFields[] = {
	HX_HCSTRING("testBase","\x83","\x6d","\x43","\x44"),
	HX_HCSTRING("v","\x76","\x00","\x00","\x00"),
	HX_HCSTRING("handler1","\x27","\x21","\x24","\xd5"),
	HX_HCSTRING("handler2","\x28","\x21","\x24","\xd5"),
	HX_HCSTRING("testHandlers","\xdb","\x47","\x2b","\x48"),
	HX_HCSTRING("stopper","\x1b","\xd2","\x61","\x43"),
	HX_HCSTRING("testStop","\x74","\x75","\x8e","\x4f"),
	::String(null()) };

static void TestDispatcher_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestDispatcher_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestDispatcher_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestDispatcher_obj::__mClass,"__mClass");
};

#endif

hx::Class TestDispatcher_obj::__mClass;

void TestDispatcher_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("utest.TestDispatcher","\x00","\xda","\x33","\xd6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestDispatcher_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestDispatcher_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestDispatcher_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestDispatcher_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestDispatcher_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestDispatcher_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace utest
