// Generated by Haxe 3.3.0
#ifndef INCLUDED_utest_TestDispatcher
#define INCLUDED_utest_TestDispatcher

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(utest,TestDispatcher)

namespace utest{


class HXCPP_CLASS_ATTRIBUTES TestDispatcher_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TestDispatcher_obj OBJ_;
		TestDispatcher_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="utest.TestDispatcher")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"utest.TestDispatcher"); }
		static hx::ObjectPtr< TestDispatcher_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestDispatcher_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("TestDispatcher","\xb9","\x84","\x49","\xa4"); }

		void testBase();
		::Dynamic testBase_dyn();

		::String v;
		void handler1(::String s);
		::Dynamic handler1_dyn();

		void handler2(::String s);
		::Dynamic handler2_dyn();

		void testHandlers();
		::Dynamic testHandlers_dyn();

		void stopper(::String s);
		::Dynamic stopper_dyn();

		void testStop();
		::Dynamic testStop_dyn();

};

} // end namespace utest

#endif /* INCLUDED_utest_TestDispatcher */ 
