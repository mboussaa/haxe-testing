// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_IntIterator
#include <IntIterator.h>
#endif
#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED__List_ListNode
#include <_List/ListNode.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif
#ifndef INCLUDED_utest_Assertation
#include <utest/Assertation.h>
#endif
#ifndef INCLUDED_utest_TestAssert
#include <utest/TestAssert.h>
#endif
#ifndef INCLUDED_utest__TestAssert_Sample
#include <utest/_TestAssert/Sample.h>
#endif

namespace utest{

void TestAssert_obj::__construct(Int i){
            	HX_STACK_FRAME("utest.TestAssert","new",0xb263d311,"utest.TestAssert.new","utest/TestAssert.hx",10,0x23e84cde)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(  10)		this->x = i;
            	}

Dynamic TestAssert_obj::__CreateEmpty() { return new TestAssert_obj; }

hx::ObjectPtr< TestAssert_obj > TestAssert_obj::__new(Int i)
{
	hx::ObjectPtr< TestAssert_obj > _hx_result = new TestAssert_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestAssert_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestAssert_obj > _hx_result = new TestAssert_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestAssert_obj::bypass(){
            	HX_STACK_FRAME("utest.TestAssert","bypass",0xe4237417,"utest.TestAssert.bypass","utest/TestAssert.hx",15,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE(  16)		this->resultsbypass = ::utest::Assert_obj::results;
HXLINE(  17)		::utest::Assert_obj::results =  ::List_obj::__new();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,bypass,(void))

void TestAssert_obj::restore(){
            	HX_STACK_FRAME("utest.TestAssert","restore",0x1bd6167f,"utest.TestAssert.restore","utest/TestAssert.hx",20,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE(  21)		this->results = ::utest::Assert_obj::results;
HXLINE(  22)		::utest::Assert_obj::results = this->resultsbypass;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,restore,(void))

void TestAssert_obj::testBooleans(){
            	HX_STACK_FRAME("utest.TestAssert","testBooleans",0x48722e6c,"utest.TestAssert.testBooleans","utest/TestAssert.hx",26,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE(  26)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  26)		HX_VARI( Int,_g) = this->x;
HXDLIN(  26)		while((_g1 < _g)){
HXLINE(  26)			++_g1;
HXLINE(  27)			this->bypass();
HXLINE(  28)			::utest::Assert_obj::isTrue(true,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),28,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testBooleans",3d,8f,15,34)));
HXLINE(  29)			::utest::Assert_obj::isTrue(false,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),29,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testBooleans",3d,8f,15,34)));
HXLINE(  30)			::utest::Assert_obj::isFalse(true,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),30,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testBooleans",3d,8f,15,34)));
HXLINE(  31)			::utest::Assert_obj::isFalse(false,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),31,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testBooleans",3d,8f,15,34)));
HXLINE(  32)			this->restore();
HXLINE(  33)			this->expect((int)2,(int)2,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testBooleans,(void))

void TestAssert_obj::testNullity(){
            	HX_STACK_FRAME("utest.TestAssert","testNullity",0xd7888b86,"utest.TestAssert.testNullity","utest/TestAssert.hx",37,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE(  37)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  37)		HX_VARI( Int,_g) = this->x;
HXDLIN(  37)		while((_g1 < _g)){
HXLINE(  37)			++_g1;
HXLINE(  38)			this->bypass();
HXLINE(  39)			::utest::Assert_obj::isNull(null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),39,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNullity",d5,ef,bc,d9)));
HXLINE(  40)			::utest::Assert_obj::isNull((int)0,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),40,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNullity",d5,ef,bc,d9)));
HXLINE(  41)			::utest::Assert_obj::isNull(((Float)0.0),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),41,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNullity",d5,ef,bc,d9)));
HXLINE(  42)			::utest::Assert_obj::isNull(((Float)0.1),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),42,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNullity",d5,ef,bc,d9)));
HXLINE(  43)			::utest::Assert_obj::isNull((int)1,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),43,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNullity",d5,ef,bc,d9)));
HXLINE(  44)			::utest::Assert_obj::isNull(HX_("",00,00,00,00),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),44,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNullity",d5,ef,bc,d9)));
HXLINE(  45)			::utest::Assert_obj::isNull(HX_("a",61,00,00,00),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),45,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNullity",d5,ef,bc,d9)));
HXLINE(  46)			::utest::Assert_obj::isNull(::Math_obj::NaN,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),46,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNullity",d5,ef,bc,d9)));
HXLINE(  47)			::utest::Assert_obj::isNull(::Math_obj::POSITIVE_INFINITY,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),47,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNullity",d5,ef,bc,d9)));
HXLINE(  48)			::utest::Assert_obj::isNull(true,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),48,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNullity",d5,ef,bc,d9)));
HXLINE(  49)			::utest::Assert_obj::isNull(false,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),49,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNullity",d5,ef,bc,d9)));
HXLINE(  50)			this->restore();
HXLINE(  51)			this->expect((int)1,(int)10,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testNullity,(void))

void TestAssert_obj::testNoNullity(){
            	HX_STACK_FRAME("utest.TestAssert","testNoNullity",0x4ac8eb05,"utest.TestAssert.testNoNullity","utest/TestAssert.hx",55,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE(  55)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  55)		HX_VARI( Int,_g) = this->x;
HXDLIN(  55)		while((_g1 < _g)){
HXLINE(  55)			++_g1;
HXLINE(  56)			this->bypass();
HXLINE(  57)			::utest::Assert_obj::notNull(null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),57,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNoNullity",14,41,1a,8e)));
HXLINE(  58)			::utest::Assert_obj::notNull((int)0,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),58,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNoNullity",14,41,1a,8e)));
HXLINE(  59)			::utest::Assert_obj::notNull(((Float)0.0),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),59,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNoNullity",14,41,1a,8e)));
HXLINE(  60)			::utest::Assert_obj::notNull(((Float)0.1),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),60,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNoNullity",14,41,1a,8e)));
HXLINE(  61)			::utest::Assert_obj::notNull((int)1,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),61,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNoNullity",14,41,1a,8e)));
HXLINE(  62)			::utest::Assert_obj::notNull(HX_("",00,00,00,00),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),62,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNoNullity",14,41,1a,8e)));
HXLINE(  63)			::utest::Assert_obj::notNull(HX_("a",61,00,00,00),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),63,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNoNullity",14,41,1a,8e)));
HXLINE(  64)			::utest::Assert_obj::notNull(::Math_obj::NaN,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),64,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNoNullity",14,41,1a,8e)));
HXLINE(  65)			::utest::Assert_obj::notNull(::Math_obj::POSITIVE_INFINITY,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),65,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNoNullity",14,41,1a,8e)));
HXLINE(  66)			::utest::Assert_obj::notNull(true,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),66,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNoNullity",14,41,1a,8e)));
HXLINE(  67)			::utest::Assert_obj::notNull(false,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),67,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testNoNullity",14,41,1a,8e)));
HXLINE(  68)			this->restore();
HXLINE(  69)			this->expect((int)10,(int)1,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testNoNullity,(void))

void TestAssert_obj::testRaises(){
            	HX_STACK_FRAME("utest.TestAssert","testRaises",0x6df5d568,"utest.TestAssert.testRaises","utest/TestAssert.hx",73,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE(  73)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  73)		HX_VARI( Int,_g) = this->x;
HXDLIN(  73)		while((_g1 < _g)){
HXLINE(  73)			++_g1;
HXLINE(  74)			this->bypass();
HXLINE(  75)			HX_VARI( ::cpp::VirtualArray,errors) = ::cpp::VirtualArray_obj::__new(6)->init(0,HX_("e",65,00,00,00))->init(1,(int)1)->init(2,((Float)0.1))->init(3, ::utest::TestAssert_obj::__new(this->x))->init(4, ::Dynamic(hx::Anon_obj::Create(0)))->init(5,::cpp::VirtualArray_obj::__new(1)->init(0,(int)1));
HXLINE(  76)			HX_VARI( ::cpp::VirtualArray,types) = ::cpp::VirtualArray_obj::__new(6)->init(0,hx::ClassOf< ::String >())->init(1,hx::ClassOf< ::Int >())->init(2,hx::ClassOf< ::Float >())->init(3,hx::ClassOf< ::utest::TestAssert >())->init(4,hx::ClassOf< ::Dynamic >())->init(5,hx::ArrayBase::__mClass);
HXLINE(  77)			HX_VARI( Int,i) = (int)0;
HXLINE(  79)			{
HXLINE(  79)				HX_VARI( Int,_g2) = (int)0;
HXDLIN(  79)				while((_g2 < errors->get_length())){
HXLINE(  79)					HX_VARI(  ::Dynamic,error) = errors->__get(_g2);
HXDLIN(  79)					++_g2;
HXLINE(  80)					{
HXLINE(  80)						HX_VARI( Int,_g3) = (int)0;
HXDLIN(  80)						while((_g3 < types->get_length())){
            							HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,error) HXARGC(0)
            							void _hx_run(){
            								HX_STACK_FRAME("utest.TestAssert","testRaises",0x6df5d568,"utest.TestAssert.testRaises","utest/TestAssert.hx",82,0x23e84cde)
HXLINE(  82)								HX_STACK_DO_THROW(error);
            							}
            							HX_END_LOCAL_FUNC0((void))

HXLINE(  80)							HX_VARI(  ::Dynamic,type) = types->__get(_g3);
HXDLIN(  80)							++_g3;
HXLINE(  81)							++i;
HXLINE(  82)							::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_0(error)),type,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),82,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testRaises",f9,af,40,cd)));
            						}
            					}
            				}
            			}
HXLINE(  84)			this->restore();
HXLINE(  85)			this->expect((int)12,(i - (int)12),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testRaises,(void))

void TestAssert_obj::testIs(){
            	HX_STACK_FRAME("utest.TestAssert","testIs",0x949642cb,"utest.TestAssert.testIs","utest/TestAssert.hx",89,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE(  89)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  89)		HX_VARI( Int,_g) = this->x;
HXDLIN(  89)		while((_g1 < _g)){
HXLINE(  89)			++_g1;
HXLINE(  90)			this->bypass();
HXLINE(  91)			HX_VARI( ::cpp::VirtualArray,values) = ::cpp::VirtualArray_obj::__new(6)->init(0,HX_("e",65,00,00,00))->init(1,(int)1)->init(2,((Float)0.1))->init(3, ::utest::TestAssert_obj::__new(this->x))->init(4, ::Dynamic(hx::Anon_obj::Create(0)))->init(5,::cpp::VirtualArray_obj::__new(1)->init(0,(int)1));
HXLINE(  92)			HX_VARI( ::cpp::VirtualArray,types) = ::cpp::VirtualArray_obj::__new(6)->init(0,hx::ClassOf< ::String >())->init(1,hx::ClassOf< ::Int >())->init(2,hx::ClassOf< ::Float >())->init(3,hx::ClassOf< ::utest::TestAssert >())->init(4,hx::ClassOf< ::Dynamic >())->init(5,hx::ArrayBase::__mClass);
HXLINE(  93)			HX_VARI( Int,i) = (int)0;
HXLINE(  95)			{
HXLINE(  95)				HX_VARI( Int,_g2) = (int)0;
HXDLIN(  95)				while((_g2 < values->get_length())){
HXLINE(  95)					HX_VARI(  ::Dynamic,value) = values->__get(_g2);
HXDLIN(  95)					++_g2;
HXLINE(  96)					{
HXLINE(  96)						HX_VARI( Int,_g3) = (int)0;
HXDLIN(  96)						while((_g3 < types->get_length())){
HXLINE(  96)							HX_VARI(  ::Dynamic,type) = types->__get(_g3);
HXDLIN(  96)							++_g3;
HXLINE(  97)							++i;
HXLINE(  98)							::utest::Assert_obj::is(value,type,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),98,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testIs",dc,40,3a,d5)));
            						}
            					}
            				}
            			}
HXLINE( 100)			this->restore();
HXLINE( 101)			this->expect((int)12,(i - (int)12),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testIs,(void))

void TestAssert_obj::testSamePrimitive(){
            	HX_STACK_FRAME("utest.TestAssert","testSamePrimitive",0x43887b20,"utest.TestAssert.testSamePrimitive","utest/TestAssert.hx",105,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE( 105)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 105)		HX_VARI( Int,_g) = this->x;
HXDLIN( 105)		while((_g1 < _g)){
HXLINE( 105)			++_g1;
HXLINE( 106)			this->bypass();
HXLINE( 107)			::utest::Assert_obj::same(null(),(int)1,null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),107,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSamePrimitive",af,84,3f,1c)));
HXLINE( 108)			::utest::Assert_obj::same((int)1,(int)1,null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),108,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSamePrimitive",af,84,3f,1c)));
HXLINE( 109)			::utest::Assert_obj::same((int)1,HX_("1",31,00,00,00),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),109,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSamePrimitive",af,84,3f,1c)));
HXLINE( 110)			::utest::Assert_obj::same(HX_("a",61,00,00,00),HX_("a",61,00,00,00),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),110,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSamePrimitive",af,84,3f,1c)));
HXLINE( 111)			::utest::Assert_obj::same(null(),HX_("",00,00,00,00),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),111,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSamePrimitive",af,84,3f,1c)));
HXLINE( 112)			::utest::Assert_obj::same( ::Date_obj::__new((int)2000,(int)0,(int)1,(int)0,(int)0,(int)0),null(),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),112,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSamePrimitive",af,84,3f,1c)));
HXLINE( 113)			HX_VARI(  ::haxe::ds::IntMap,_g2) =  ::haxe::ds::IntMap_obj::__new();
HXDLIN( 113)			_g2->set((int)1,HX_("a",61,00,00,00));
HXDLIN( 113)			_g2->set((int)2,HX_("b",62,00,00,00));
HXDLIN( 113)			HX_VARI(  ::haxe::ds::IntMap,_g3) =  ::haxe::ds::IntMap_obj::__new();
HXDLIN( 113)			_g3->set((int)1,HX_("a",61,00,00,00));
HXDLIN( 113)			_g3->set((int)2,HX_("b",62,00,00,00));
HXDLIN( 113)			::utest::Assert_obj::same(_g2,_g3,null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),113,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSamePrimitive",af,84,3f,1c)));
HXLINE( 114)			HX_VARI(  ::haxe::ds::StringMap,_g4) =  ::haxe::ds::StringMap_obj::__new();
HXDLIN( 114)			_g4->set(HX_("a",61,00,00,00),(int)1);
HXDLIN( 114)			HX_VARI(  ::haxe::ds::StringMap,_g5) =  ::haxe::ds::StringMap_obj::__new();
HXDLIN( 114)			_g5->set(HX_("a",61,00,00,00),(int)1);
HXDLIN( 114)			::utest::Assert_obj::same(_g4,_g5,null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),114,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSamePrimitive",af,84,3f,1c)));
HXLINE( 115)			HX_VARI(  ::haxe::ds::StringMap,_g6) =  ::haxe::ds::StringMap_obj::__new();
HXDLIN( 115)			_g6->set(HX_("a",61,00,00,00),(int)1);
HXDLIN( 115)			HX_VARI(  ::haxe::ds::IntMap,_g7) =  ::haxe::ds::IntMap_obj::__new();
HXDLIN( 115)			_g7->set((int)1,(int)1);
HXDLIN( 115)			::utest::Assert_obj::same(_g6,_g7,null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),115,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSamePrimitive",af,84,3f,1c)));
HXLINE( 116)			HX_VARI(  ::haxe::ds::IntMap,_g8) =  ::haxe::ds::IntMap_obj::__new();
HXDLIN( 116)			_g8->set((int)1,HX_("a",61,00,00,00));
HXDLIN( 116)			HX_VARI(  ::haxe::ds::IntMap,_g9) =  ::haxe::ds::IntMap_obj::__new();
HXDLIN( 116)			_g9->set((int)1,HX_("a",61,00,00,00));
HXDLIN( 116)			_g9->set((int)2,HX_("b",62,00,00,00));
HXDLIN( 116)			::utest::Assert_obj::same(_g8,_g9,null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),116,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSamePrimitive",af,84,3f,1c)));
HXLINE( 120)			this->restore();
HXLINE( 121)			this->expect((int)5,(int)6,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testSamePrimitive,(void))

void TestAssert_obj::testSameType(){
            	HX_STACK_FRAME("utest.TestAssert","testSameType",0xeef012e1,"utest.TestAssert.testSameType","utest/TestAssert.hx",125,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE( 125)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 125)		HX_VARI( Int,_g) = this->x;
HXDLIN( 125)		while((_g1 < _g)){
HXLINE( 125)			++_g1;
HXLINE( 126)			this->bypass();
HXLINE( 127)			::utest::Assert_obj::same(null(), ::Dynamic(hx::Anon_obj::Create(0)),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),127,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameType",b2,73,93,da)));
HXLINE( 128)			::utest::Assert_obj::same(null(),null(),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),128,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameType",b2,73,93,da)));
HXLINE( 129)			::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(0)),null(),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),129,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameType",b2,73,93,da)));
HXLINE( 130)			::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(0)),(int)1,null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),130,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameType",b2,73,93,da)));
HXLINE( 131)			::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(0)),::cpp::VirtualArray_obj::__new(0),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),131,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameType",b2,73,93,da)));
HXLINE( 132)			::utest::Assert_obj::same(null(),::utest::_TestAssert::Sample_obj::None_dyn(),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),132,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameType",b2,73,93,da)));
HXLINE( 133)			::utest::Assert_obj::same(::utest::_TestAssert::Sample_obj::None_dyn(),null(),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),133,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameType",b2,73,93,da)));
HXLINE( 135)			this->restore();
HXLINE( 136)			this->expect((int)1,(int)6,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testSameType,(void))

void TestAssert_obj::testSameArray(){
            	HX_STACK_FRAME("utest.TestAssert","testSameArray",0x2de46f92,"utest.TestAssert.testSameArray","utest/TestAssert.hx",140,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE( 140)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 140)		HX_VARI( Int,_g) = this->x;
HXDLIN( 140)		while((_g1 < _g)){
HXLINE( 140)			++_g1;
HXLINE( 141)			this->bypass();
HXLINE( 142)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(0),::cpp::VirtualArray_obj::__new(0),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),142,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameArray",a1,c5,35,71)));
HXLINE( 143)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,(int)1),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("1",31,00,00,00)),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),143,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameArray",a1,c5,35,71)));
HXLINE( 144)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),144,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameArray",a1,c5,35,71)));
HXLINE( 145)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,(int)2),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),145,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameArray",a1,c5,35,71)));
HXLINE( 146)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,(int)2),::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),146,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameArray",a1,c5,35,71)));
HXLINE( 147)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,(int)2)),::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,(int)2)),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),147,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameArray",a1,c5,35,71)));
HXLINE( 148)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,(int)2)),::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,::cpp::VirtualArray_obj::__new(0)),false,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),148,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameArray",a1,c5,35,71)));
HXLINE( 149)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,(int)2)),::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,::cpp::VirtualArray_obj::__new(0)),true,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),149,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameArray",a1,c5,35,71)));
HXLINE( 151)			this->restore();
HXLINE( 152)			this->expect((int)4,(int)4,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testSameArray,(void))

void TestAssert_obj::testSameObject(){
            	HX_STACK_FRAME("utest.TestAssert","testSameObject",0x574c36a6,"utest.TestAssert.testSameObject","utest/TestAssert.hx",156,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE( 156)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 156)		HX_VARI( Int,_g) = this->x;
HXDLIN( 156)		while((_g1 < _g)){
HXLINE( 156)			++_g1;
HXLINE( 157)			this->bypass();
HXLINE( 158)			::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(0)), ::Dynamic(hx::Anon_obj::Create(0)),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),158,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameObject",b7,2d,26,fb)));
HXLINE( 159)			::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("a",61,00,00,00),(int)1)), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("a",61,00,00,00),HX_("1",31,00,00,00))),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),159,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameObject",b7,2d,26,fb)));
HXLINE( 160)			::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("a",61,00,00,00),(int)1)
            				->setFixed(1,HX_("b",62,00,00,00),HX_("c",63,00,00,00))), ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("a",61,00,00,00),(int)1)
            				->setFixed(1,HX_("b",62,00,00,00),HX_("c",63,00,00,00))),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),160,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameObject",b7,2d,26,fb)));
HXLINE( 161)			::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("a",61,00,00,00),(int)1)
            				->setFixed(1,HX_("b",62,00,00,00),HX_("c",63,00,00,00))), ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("a",61,00,00,00),(int)1)
            				->setFixed(1,HX_("c",63,00,00,00),HX_("c",63,00,00,00))),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),161,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameObject",b7,2d,26,fb)));
HXLINE( 162)			::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("a",61,00,00,00),(int)1)
            				->setFixed(1,HX_("b",62,00,00,00),HX_("c",63,00,00,00))), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("a",61,00,00,00),(int)1)),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),162,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameObject",b7,2d,26,fb)));
HXLINE( 163)			::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("a",61,00,00,00),(int)1)
            				->setFixed(1,HX_("b",62,00,00,00), ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("a",61,00,00,00),(int)1)
            					->setFixed(1,HX_("c",63,00,00,00),HX_("c",63,00,00,00))))), ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("a",61,00,00,00),(int)1)
            				->setFixed(1,HX_("b",62,00,00,00), ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("a",61,00,00,00),(int)1)
            					->setFixed(1,HX_("c",63,00,00,00),HX_("c",63,00,00,00))))),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),163,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameObject",b7,2d,26,fb)));
HXLINE( 164)			::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("a",61,00,00,00),(int)1)
            				->setFixed(1,HX_("b",62,00,00,00), ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("a",61,00,00,00),(int)1)
            					->setFixed(1,HX_("c",63,00,00,00),HX_("c",63,00,00,00))))), ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("a",61,00,00,00),(int)1)
            				->setFixed(1,HX_("b",62,00,00,00), ::Dynamic(hx::Anon_obj::Create(0)))),false,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),164,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameObject",b7,2d,26,fb)));
HXLINE( 165)			::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("a",61,00,00,00),(int)1)
            				->setFixed(1,HX_("b",62,00,00,00), ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("a",61,00,00,00),(int)1)
            					->setFixed(1,HX_("c",63,00,00,00),HX_("c",63,00,00,00))))), ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("a",61,00,00,00),(int)1)
            				->setFixed(1,HX_("b",62,00,00,00), ::Dynamic(hx::Anon_obj::Create(0)))),true,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),165,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameObject",b7,2d,26,fb)));
HXLINE( 167)			this->restore();
HXLINE( 168)			this->expect((int)4,(int)4,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testSameObject,(void))

void TestAssert_obj::testSameInstance(){
            	HX_STACK_FRAME("utest.TestAssert","testSameInstance",0xc278df3c,"utest.TestAssert.testSameInstance","utest/TestAssert.hx",174,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE( 174)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 174)		HX_VARI( Int,_g) = this->x;
HXDLIN( 174)		while((_g1 < _g)){
HXLINE( 174)			++_g1;
HXLINE( 175)			HX_VARI(  ::utest::TestAssert,c1) =  ::utest::TestAssert_obj::__new(this->x);
HXLINE( 176)			c1->value = HX_("a",61,00,00,00);
HXLINE( 177)			HX_VARI(  ::utest::TestAssert,c2) =  ::utest::TestAssert_obj::__new(this->x);
HXLINE( 178)			c2->value = HX_("a",61,00,00,00);
HXLINE( 179)			HX_VARI(  ::utest::TestAssert,c3) =  ::utest::TestAssert_obj::__new(this->x);
HXLINE( 181)			HX_VARI(  ::utest::TestAssert,r1) =  ::utest::TestAssert_obj::__new(this->x);
HXLINE( 182)			r1->sub = c1;
HXLINE( 183)			HX_VARI(  ::utest::TestAssert,r2) =  ::utest::TestAssert_obj::__new(this->x);
HXLINE( 184)			r2->sub = c2;
HXLINE( 185)			HX_VARI(  ::utest::TestAssert,r3) =  ::utest::TestAssert_obj::__new(this->x);
HXLINE( 186)			r3->sub = c3;
HXLINE( 189)			this->bypass();
HXLINE( 190)			::utest::Assert_obj::same(c1,c1,null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),190,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameInstance",8d,7c,0b,8a)));
HXLINE( 191)			::utest::Assert_obj::same(c1,c2,null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),191,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameInstance",8d,7c,0b,8a)));
HXLINE( 192)			::utest::Assert_obj::same(c1,c3,null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),192,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameInstance",8d,7c,0b,8a)));
HXLINE( 194)			::utest::Assert_obj::same(r1,r2,null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),194,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameInstance",8d,7c,0b,8a)));
HXLINE( 195)			::utest::Assert_obj::same(r1,r3,false,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),195,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameInstance",8d,7c,0b,8a)));
HXLINE( 196)			::utest::Assert_obj::same(r1,r3,true,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),196,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameInstance",8d,7c,0b,8a)));
HXLINE( 198)			this->restore();
HXLINE( 199)			this->expect((int)4,(int)2,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testSameInstance,(void))

void TestAssert_obj::testSameIterable(){
            	HX_STACK_FRAME("utest.TestAssert","testSameIterable",0xfc245e59,"utest.TestAssert.testSameIterable","utest/TestAssert.hx",203,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE( 203)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 203)		HX_VARI( Int,_g) = this->x;
HXDLIN( 203)		while((_g1 < _g)){
HXLINE( 203)			++_g1;
HXLINE( 204)			HX_VARI(  ::List,list1) =  ::List_obj::__new();
HXLINE( 205)			list1->add(HX_("a",61,00,00,00));
HXLINE( 206)			list1->add((int)1);
HXLINE( 207)			HX_VARI(  ::List,s1) =  ::List_obj::__new();
HXLINE( 208)			s1->add((int)2);
HXLINE( 209)			list1->add(s1);
HXLINE( 210)			HX_VARI(  ::List,list2) =  ::List_obj::__new();
HXLINE( 211)			list2->add(HX_("a",61,00,00,00));
HXLINE( 212)			list2->add((int)1);
HXLINE( 213)			list2->add(s1);
HXLINE( 214)			HX_VARI(  ::List,list3) =  ::List_obj::__new();
HXLINE( 215)			list3->add(HX_("a",61,00,00,00));
HXLINE( 216)			list3->add((int)1);
HXLINE( 217)			list3->add( ::List_obj::__new());
HXLINE( 219)			this->bypass();
HXLINE( 220)			::utest::Assert_obj::same(list1,list2,null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),220,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameIterable",aa,fb,b6,c3)));
HXLINE( 221)			::utest::Assert_obj::same(list1,list3,false,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),221,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameIterable",aa,fb,b6,c3)));
HXLINE( 222)			::utest::Assert_obj::same(list1,list3,true,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),222,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameIterable",aa,fb,b6,c3)));
HXLINE( 224)			::utest::Assert_obj::same( ::IntIterator_obj::__new((int)0,(int)3), ::IntIterator_obj::__new((int)0,(int)3),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),224,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameIterable",aa,fb,b6,c3)));
HXLINE( 225)			::utest::Assert_obj::same( ::IntIterator_obj::__new((int)0,(int)3), ::IntIterator_obj::__new((int)0,(int)4),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),225,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameIterable",aa,fb,b6,c3)));
HXLINE( 227)			this->restore();
HXLINE( 228)			this->expect((int)3,(int)2,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testSameIterable,(void))

void TestAssert_obj::testSameEnums(){
            	HX_STACK_FRAME("utest.TestAssert","testSameEnums",0x78dc384b,"utest.TestAssert.testSameEnums","utest/TestAssert.hx",260,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE( 260)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 260)		HX_VARI( Int,_g) = this->x;
HXDLIN( 260)		while((_g1 < _g)){
HXLINE( 260)			++_g1;
HXLINE( 261)			this->bypass();
HXLINE( 263)			::utest::Assert_obj::same(::utest::_TestAssert::Sample_obj::None_dyn(),::utest::_TestAssert::Sample_obj::None_dyn(),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),263,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameEnums",5a,8e,2d,bc)));
HXLINE( 264)			::hx::EnumBase _hx_tmp = ::utest::_TestAssert::Sample_obj::Some(HX_("a",61,00,00,00));
HXDLIN( 264)			::hx::EnumBase _hx_tmp1 = ::utest::_TestAssert::Sample_obj::Some(HX_("a",61,00,00,00));
HXDLIN( 264)			::utest::Assert_obj::same(_hx_tmp,_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),264,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameEnums",5a,8e,2d,bc)));
HXLINE( 265)			::hx::EnumBase _hx_tmp2 = ::utest::_TestAssert::Sample_obj::Some(HX_("a",61,00,00,00));
HXDLIN( 265)			::hx::EnumBase _hx_tmp3 = ::utest::_TestAssert::Sample_obj::Some(HX_("b",62,00,00,00));
HXDLIN( 265)			::utest::Assert_obj::same(_hx_tmp2,_hx_tmp3,true,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),265,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameEnums",5a,8e,2d,bc)));
HXLINE( 266)			::hx::EnumBase _hx_tmp4 = ::utest::_TestAssert::Sample_obj::Some(HX_("a",61,00,00,00));
HXDLIN( 266)			::hx::EnumBase _hx_tmp5 = ::utest::_TestAssert::Sample_obj::Some(HX_("b",62,00,00,00));
HXDLIN( 266)			::utest::Assert_obj::same(_hx_tmp4,_hx_tmp5,false,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),266,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameEnums",5a,8e,2d,bc)));
HXLINE( 267)			::hx::EnumBase _hx_tmp6 = ::utest::_TestAssert::Sample_obj::Some(HX_("a",61,00,00,00));
HXDLIN( 267)			::utest::Assert_obj::same(_hx_tmp6,::utest::_TestAssert::Sample_obj::None_dyn(),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),267,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameEnums",5a,8e,2d,bc)));
HXLINE( 268)			::hx::EnumBase _hx_tmp7 = ::utest::_TestAssert::Sample_obj::Some(HX_("a",61,00,00,00));
HXDLIN( 268)			::hx::EnumBase _hx_tmp8 = ::utest::_TestAssert::Sample_obj::Rec(_hx_tmp7);
HXDLIN( 268)			::hx::EnumBase _hx_tmp9 = ::utest::_TestAssert::Sample_obj::Rec(_hx_tmp8);
HXDLIN( 268)			::hx::EnumBase _hx_tmp10 = ::utest::_TestAssert::Sample_obj::Some(HX_("a",61,00,00,00));
HXDLIN( 268)			::hx::EnumBase _hx_tmp11 = ::utest::_TestAssert::Sample_obj::Rec(_hx_tmp10);
HXDLIN( 268)			::hx::EnumBase _hx_tmp12 = ::utest::_TestAssert::Sample_obj::Rec(_hx_tmp11);
HXDLIN( 268)			::utest::Assert_obj::same(_hx_tmp9,_hx_tmp12,null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),268,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameEnums",5a,8e,2d,bc)));
HXLINE( 269)			::hx::EnumBase _hx_tmp13 = ::utest::_TestAssert::Sample_obj::Some(HX_("a",61,00,00,00));
HXDLIN( 269)			::hx::EnumBase _hx_tmp14 = ::utest::_TestAssert::Sample_obj::Rec(_hx_tmp13);
HXDLIN( 269)			::hx::EnumBase _hx_tmp15 = ::utest::_TestAssert::Sample_obj::Rec(_hx_tmp14);
HXDLIN( 269)			::hx::EnumBase _hx_tmp16 = ::utest::_TestAssert::Sample_obj::Rec(::utest::_TestAssert::Sample_obj::None_dyn());
HXDLIN( 269)			::utest::Assert_obj::same(_hx_tmp15,_hx_tmp16,true,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),269,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameEnums",5a,8e,2d,bc)));
HXLINE( 272)			::hx::EnumBase _hx_tmp17 = ::utest::_TestAssert::Sample_obj::Some(HX_("a",61,00,00,00));
HXDLIN( 272)			::hx::EnumBase _hx_tmp18 = ::utest::_TestAssert::Sample_obj::Rec(_hx_tmp17);
HXDLIN( 272)			::hx::EnumBase _hx_tmp19 = ::utest::_TestAssert::Sample_obj::Rec(_hx_tmp18);
HXDLIN( 272)			::hx::EnumBase _hx_tmp20 = ::utest::_TestAssert::Sample_obj::Rec(::utest::_TestAssert::Sample_obj::None_dyn());
HXDLIN( 272)			::hx::EnumBase _hx_tmp21 = ::utest::_TestAssert::Sample_obj::Rec(_hx_tmp20);
HXDLIN( 272)			::utest::Assert_obj::same(_hx_tmp19,_hx_tmp21,false,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),272,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testSameEnums",5a,8e,2d,bc)));
HXLINE( 275)			this->restore();
HXLINE( 279)			this->expect((int)4,(int)4,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testSameEnums,(void))

void TestAssert_obj::testEquals(){
            	HX_STACK_FRAME("utest.TestAssert","testEquals",0x799c59a0,"utest.TestAssert.testEquals","utest/TestAssert.hx",284,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE( 284)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 284)		HX_VARI( Int,_g) = this->x;
HXDLIN( 284)		while((_g1 < _g)){
HXLINE( 284)			++_g1;
HXLINE( 285)			this->bypass();
HXLINE( 286)			HX_VARI( ::cpp::VirtualArray,values) = ::cpp::VirtualArray_obj::__new(4)->init(0,HX_("e",65,00,00,00))->init(1,(int)1)->init(2,((Float)0.1))->init(3, ::Dynamic(hx::Anon_obj::Create(0)));
HXLINE( 287)			HX_VARI( ::cpp::VirtualArray,expecteds) = ::cpp::VirtualArray_obj::__new(4)->init(0,HX_("e",65,00,00,00))->init(1,(int)1)->init(2,((Float)0.1))->init(3, ::Dynamic(hx::Anon_obj::Create(0)));
HXLINE( 288)			HX_VARI( Int,i) = (int)0;
HXLINE( 290)			{
HXLINE( 290)				HX_VARI( Int,_g2) = (int)0;
HXDLIN( 290)				while((_g2 < expecteds->get_length())){
HXLINE( 290)					HX_VARI(  ::Dynamic,expected) = expecteds->__get(_g2);
HXDLIN( 290)					++_g2;
HXLINE( 291)					{
HXLINE( 291)						HX_VARI( Int,_g3) = (int)0;
HXDLIN( 291)						while((_g3 < values->get_length())){
HXLINE( 291)							HX_VARI(  ::Dynamic,value) = values->__get(_g3);
HXDLIN( 291)							++_g3;
HXLINE( 292)							++i;
HXLINE( 293)							::utest::Assert_obj::equals(expected,value,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),293,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testEquals",31,34,e7,d8)));
            						}
            					}
            				}
            			}
HXLINE( 295)			this->restore();
HXLINE( 296)			this->expect((int)3,(i - (int)3),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testEquals,(void))

void TestAssert_obj::testFloatEquals(){
            	HX_STACK_FRAME("utest.TestAssert","testFloatEquals",0x0104f9fa,"utest.TestAssert.testFloatEquals","utest/TestAssert.hx",300,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE( 300)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 300)		HX_VARI( Int,_g) = this->x;
HXDLIN( 300)		while((_g1 < _g)){
HXLINE( 300)			++_g1;
HXLINE( 301)			this->bypass();
HXLINE( 302)			HX_VARI( ::Array< Float >,values) = ::Array_obj< Float >::__new(8)->init(0,(int)1)->init(1,((Float)0.1))->init(2,((Float)0.000000000000000000000000000011))->init(3,::Math_obj::NaN)->init(4,::Math_obj::NEGATIVE_INFINITY)->init(5,::Math_obj::POSITIVE_INFINITY)->init(6,::Math_obj::PI)->init(7,((Float)0.11));
HXLINE( 303)			HX_VARI( ::Array< Float >,expecteds) = ::Array_obj< Float >::__new(8)->init(0,(int)1)->init(1,((Float)0.1))->init(2,((Float)0.000000000000000000000000000012))->init(3,::Math_obj::NaN)->init(4,::Math_obj::NEGATIVE_INFINITY)->init(5,::Math_obj::POSITIVE_INFINITY)->init(6,::Math_obj::PI)->init(7,((Float)0.12));
HXLINE( 304)			HX_VARI( Int,i) = (int)0;
HXLINE( 306)			{
HXLINE( 306)				HX_VARI( Int,_g2) = (int)0;
HXDLIN( 306)				while((_g2 < expecteds->length)){
HXLINE( 306)					HX_VARI( Float,expected) = expecteds->__get(_g2);
HXDLIN( 306)					++_g2;
HXLINE( 307)					{
HXLINE( 307)						HX_VARI( Int,_g3) = (int)0;
HXDLIN( 307)						while((_g3 < values->length)){
HXLINE( 307)							HX_VARI( Float,value) = values->__get(_g3);
HXDLIN( 307)							++_g3;
HXLINE( 308)							++i;
HXLINE( 309)							::utest::Assert_obj::floatEquals(expected,value,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),309,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testFloatEquals",c9,31,e3,bb)));
            						}
            					}
            				}
            			}
HXLINE( 311)			this->restore();
HXLINE( 312)			this->expect((int)7,(i - (int)7),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testFloatEquals,(void))

void TestAssert_obj::testPass(){
            	HX_STACK_FRAME("utest.TestAssert","testPass",0x9d5805f2,"utest.TestAssert.testPass","utest/TestAssert.hx",316,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE( 316)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 316)		HX_VARI( Int,_g) = this->x;
HXDLIN( 316)		while((_g1 < _g)){
HXLINE( 316)			++_g1;
HXLINE( 317)			this->bypass();
HXLINE( 318)			::utest::Assert_obj::pass(null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),318,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testPass",43,6a,84,4d)));
HXLINE( 319)			this->restore();
HXLINE( 320)			this->expect((int)1,(int)0,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testPass,(void))

void TestAssert_obj::testFail(){
            	HX_STACK_FRAME("utest.TestAssert","testFail",0x96bbdaff,"utest.TestAssert.testFail","utest/TestAssert.hx",324,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE( 324)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 324)		HX_VARI( Int,_g) = this->x;
HXDLIN( 324)		while((_g1 < _g)){
HXLINE( 324)			++_g1;
HXLINE( 325)			this->bypass();
HXLINE( 326)			::utest::Assert_obj::fail(null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),326,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("testFail",50,3f,e8,46)));
HXLINE( 327)			this->restore();
HXLINE( 328)			this->expect((int)0,(int)1,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testFail,(void))

void TestAssert_obj::testWarn(){
            	HX_STACK_FRAME("utest.TestAssert","testWarn",0xa1f88367,"utest.TestAssert.testWarn","utest/TestAssert.hx",332,0x23e84cde)
            	HX_STACK_THIS(this)
HXLINE( 332)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 332)		HX_VARI( Int,_g) = this->x;
HXDLIN( 332)		while((_g1 < _g)){
HXLINE( 332)			++_g1;
HXLINE( 333)			this->bypass();
HXLINE( 334)			::utest::Assert_obj::warn(HX_("",00,00,00,00));
HXLINE( 335)			this->restore();
HXLINE( 336)			this->expect((int)0,(int)0,(int)1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testWarn,(void))

void TestAssert_obj::expect(Int esuccesses,Int efailures,hx::Null< Int >  __o_eothers){
Int eothers = __o_eothers.Default(0);
            	HX_STACK_FRAME("utest.TestAssert","expect",0x83d1efc8,"utest.TestAssert.expect","utest/TestAssert.hx",339,0x23e84cde)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(esuccesses,"esuccesses")
            	HX_STACK_ARG(efailures,"efailures")
            	HX_STACK_ARG(eothers,"eothers")
HXLINE( 341)		HX_VARI( Int,failures) = (int)0;
HXLINE( 342)		HX_VARI( Int,others) = (int)0;
HXLINE( 343)		{
HXLINE( 343)			HX_VARI(  ::_List::ListNode,_g_head) = this->results->h;
HXDLIN( 343)			while(hx::IsNotNull( _g_head )){
HXLINE( 343)				HX_VARI( ::hx::EnumBase,val) = _g_head->item;
HXLINE( 339)				_g_head = _g_head->next;
HXLINE( 344)				Int _hx_tmp = ( ( ::hx::EnumBase)(val) )->_hx_getIndex();
HXDLIN( 344)				switch((int)(_hx_tmp)){
            					case (int)0: {
            					}
            					break;
            					case (int)1: {
HXLINE( 348)						++failures;
            					}
            					break;
            					default:{
HXLINE( 350)						++others;
            					}
            				}
            			}
            		}
HXLINE( 353)		::utest::Assert_obj::equals(eothers,others,(((HX_("expected ",a8,7a,f8,e9) + eothers) + HX_(" other results but were ",86,c2,27,72)) + others),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),353,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("expect",d9,ed,75,c4)));
HXLINE( 356)		::utest::Assert_obj::equals(efailures,failures,(((HX_("expected ",a8,7a,f8,e9) + efailures) + HX_(" failures but were ",c9,15,d3,56)) + failures),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),356,HX_("utest.TestAssert",9f,f6,3e,fd),HX_("expect",d9,ed,75,c4)));
            	}


HX_DEFINE_DYNAMIC_FUNC3(TestAssert_obj,expect,(void))


TestAssert_obj::TestAssert_obj()
{
}

void TestAssert_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TestAssert);
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(resultsbypass,"resultsbypass");
	HX_MARK_MEMBER_NAME(results,"results");
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_MEMBER_NAME(sub,"sub");
	HX_MARK_END_CLASS();
}

void TestAssert_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(resultsbypass,"resultsbypass");
	HX_VISIT_MEMBER_NAME(results,"results");
	HX_VISIT_MEMBER_NAME(value,"value");
	HX_VISIT_MEMBER_NAME(sub,"sub");
}

hx::Val TestAssert_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"sub") ) { return hx::Val( sub); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bypass") ) { return hx::Val( bypass_dyn()); }
		if (HX_FIELD_EQ(inName,"testIs") ) { return hx::Val( testIs_dyn()); }
		if (HX_FIELD_EQ(inName,"expect") ) { return hx::Val( expect_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"results") ) { return hx::Val( results); }
		if (HX_FIELD_EQ(inName,"restore") ) { return hx::Val( restore_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"testPass") ) { return hx::Val( testPass_dyn()); }
		if (HX_FIELD_EQ(inName,"testFail") ) { return hx::Val( testFail_dyn()); }
		if (HX_FIELD_EQ(inName,"testWarn") ) { return hx::Val( testWarn_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testRaises") ) { return hx::Val( testRaises_dyn()); }
		if (HX_FIELD_EQ(inName,"testEquals") ) { return hx::Val( testEquals_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testNullity") ) { return hx::Val( testNullity_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testBooleans") ) { return hx::Val( testBooleans_dyn()); }
		if (HX_FIELD_EQ(inName,"testSameType") ) { return hx::Val( testSameType_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"resultsbypass") ) { return hx::Val( resultsbypass); }
		if (HX_FIELD_EQ(inName,"testNoNullity") ) { return hx::Val( testNoNullity_dyn()); }
		if (HX_FIELD_EQ(inName,"testSameArray") ) { return hx::Val( testSameArray_dyn()); }
		if (HX_FIELD_EQ(inName,"testSameEnums") ) { return hx::Val( testSameEnums_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testSameObject") ) { return hx::Val( testSameObject_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"testFloatEquals") ) { return hx::Val( testFloatEquals_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"testSameInstance") ) { return hx::Val( testSameInstance_dyn()); }
		if (HX_FIELD_EQ(inName,"testSameIterable") ) { return hx::Val( testSameIterable_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"testSamePrimitive") ) { return hx::Val( testSamePrimitive_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestAssert_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"sub") ) { sub=inValue.Cast<  ::utest::TestAssert >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"results") ) { results=inValue.Cast<  ::List >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"resultsbypass") ) { resultsbypass=inValue.Cast<  ::List >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestAssert_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("resultsbypass","\x9e","\xe7","\xd0","\x81"));
	outFields->push(HX_HCSTRING("results","\xf6","\x58","\x57","\x6b"));
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	outFields->push(HX_HCSTRING("sub","\x80","\xa9","\x57","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestAssert_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestAssert_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsObject /*::List*/ ,(int)offsetof(TestAssert_obj,resultsbypass),HX_HCSTRING("resultsbypass","\x9e","\xe7","\xd0","\x81")},
	{hx::fsObject /*::List*/ ,(int)offsetof(TestAssert_obj,results),HX_HCSTRING("results","\xf6","\x58","\x57","\x6b")},
	{hx::fsString,(int)offsetof(TestAssert_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{hx::fsObject /*::utest::TestAssert*/ ,(int)offsetof(TestAssert_obj,sub),HX_HCSTRING("sub","\x80","\xa9","\x57","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestAssert_obj_sStaticStorageInfo = 0;
#endif

static ::String TestAssert_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("resultsbypass","\x9e","\xe7","\xd0","\x81"),
	HX_HCSTRING("results","\xf6","\x58","\x57","\x6b"),
	HX_HCSTRING("bypass","\x28","\x72","\xc7","\x24"),
	HX_HCSTRING("restore","\x4e","\x67","\xb0","\x6a"),
	HX_HCSTRING("testBooleans","\x3d","\x8f","\x15","\x34"),
	HX_HCSTRING("testNullity","\xd5","\xef","\xbc","\xd9"),
	HX_HCSTRING("testNoNullity","\x14","\x41","\x1a","\x8e"),
	HX_HCSTRING("testRaises","\xf9","\xaf","\x40","\xcd"),
	HX_HCSTRING("testIs","\xdc","\x40","\x3a","\xd5"),
	HX_HCSTRING("testSamePrimitive","\xaf","\x84","\x3f","\x1c"),
	HX_HCSTRING("testSameType","\xb2","\x73","\x93","\xda"),
	HX_HCSTRING("testSameArray","\xa1","\xc5","\x35","\x71"),
	HX_HCSTRING("testSameObject","\xb7","\x2d","\x26","\xfb"),
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("sub","\x80","\xa9","\x57","\x00"),
	HX_HCSTRING("testSameInstance","\x8d","\x7c","\x0b","\x8a"),
	HX_HCSTRING("testSameIterable","\xaa","\xfb","\xb6","\xc3"),
	HX_HCSTRING("testSameEnums","\x5a","\x8e","\x2d","\xbc"),
	HX_HCSTRING("testEquals","\x31","\x34","\xe7","\xd8"),
	HX_HCSTRING("testFloatEquals","\xc9","\x31","\xe3","\xbb"),
	HX_HCSTRING("testPass","\x43","\x6a","\x84","\x4d"),
	HX_HCSTRING("testFail","\x50","\x3f","\xe8","\x46"),
	HX_HCSTRING("testWarn","\xb8","\xe7","\x24","\x52"),
	HX_HCSTRING("expect","\xd9","\xed","\x75","\xc4"),
	::String(null()) };

static void TestAssert_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestAssert_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestAssert_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestAssert_obj::__mClass,"__mClass");
};

#endif

hx::Class TestAssert_obj::__mClass;

void TestAssert_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("utest.TestAssert","\x9f","\xf6","\x3e","\xfd");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestAssert_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestAssert_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestAssert_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestAssert_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestAssert_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestAssert_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace utest
