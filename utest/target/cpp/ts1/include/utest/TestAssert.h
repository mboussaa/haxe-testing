// Generated by Haxe 3.3.0
#ifndef INCLUDED_utest_TestAssert
#define INCLUDED_utest_TestAssert

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(List)
HX_DECLARE_CLASS1(utest,TestAssert)

namespace utest{


class HXCPP_CLASS_ATTRIBUTES TestAssert_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TestAssert_obj OBJ_;
		TestAssert_obj();

	public:
		void __construct(Int i);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="utest.TestAssert")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"utest.TestAssert"); }
		static hx::ObjectPtr< TestAssert_obj > __new(Int i);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestAssert_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("TestAssert","\xd8","\x90","\xa8","\x5b"); }

		Int x;
		 ::List resultsbypass;
		 ::List results;
		void bypass();
		::Dynamic bypass_dyn();

		void restore();
		::Dynamic restore_dyn();

		void testBooleans();
		::Dynamic testBooleans_dyn();

		void testNullity();
		::Dynamic testNullity_dyn();

		void testNoNullity();
		::Dynamic testNoNullity_dyn();

		void testRaises();
		::Dynamic testRaises_dyn();

		void testIs();
		::Dynamic testIs_dyn();

		void testSamePrimitive();
		::Dynamic testSamePrimitive_dyn();

		void testSameType();
		::Dynamic testSameType_dyn();

		void testSameArray();
		::Dynamic testSameArray_dyn();

		void testSameObject();
		::Dynamic testSameObject_dyn();

		::String value;
		 ::utest::TestAssert sub;
		void testSameInstance();
		::Dynamic testSameInstance_dyn();

		void testSameIterable();
		::Dynamic testSameIterable_dyn();

		void testSameEnums();
		::Dynamic testSameEnums_dyn();

		void testEquals();
		::Dynamic testEquals_dyn();

		void testFloatEquals();
		::Dynamic testFloatEquals_dyn();

		void testPass();
		::Dynamic testPass_dyn();

		void testFail();
		::Dynamic testFail_dyn();

		void testWarn();
		::Dynamic testWarn_dyn();

		void expect(Int esuccesses,Int efailures,hx::Null< Int >  eothers);
		::Dynamic expect_dyn();

};

} // end namespace utest

#endif /* INCLUDED_utest_TestAssert */ 
