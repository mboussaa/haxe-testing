// Generated by Haxe 3.3.0
package utest;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestAssert extends haxe.lang.HxObject
{
	public TestAssert(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestAssert(int i)
	{
		//line 9 "/shared/utest/test/utest/TestAssert.hx"
		utest.TestAssert.__hx_ctor_utest_TestAssert(this, i);
	}
	
	
	public static void __hx_ctor_utest_TestAssert(utest.TestAssert __temp_me39, int i)
	{
		//line 10 "/shared/utest/test/utest/TestAssert.hx"
		__temp_me39.x = i;
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 7 "/shared/utest/test/utest/TestAssert.hx"
		return new utest.TestAssert(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 7 "/shared/utest/test/utest/TestAssert.hx"
		return new utest.TestAssert(((int) (haxe.lang.Runtime.toInt(arr.__get(0))) ));
	}
	
	
	public int x;
	
	public haxe.root.List<utest.Assertation> resultsbypass;
	
	public haxe.root.List<utest.Assertation> results;
	
	public void bypass()
	{
		//line 16 "/shared/utest/test/utest/TestAssert.hx"
		this.resultsbypass = utest.Assert.results;
		//line 17 "/shared/utest/test/utest/TestAssert.hx"
		utest.Assert.results = new haxe.root.List<utest.Assertation>();
	}
	
	
	public void restore()
	{
		//line 21 "/shared/utest/test/utest/TestAssert.hx"
		this.results = utest.Assert.results;
		//line 22 "/shared/utest/test/utest/TestAssert.hx"
		utest.Assert.results = this.resultsbypass;
	}
	
	
	public void testBooleans()
	{
		//line 26 "/shared/utest/test/utest/TestAssert.hx"
		int _g1 = 0;
		//line 26 "/shared/utest/test/utest/TestAssert.hx"
		int _g = this.x;
		//line 26 "/shared/utest/test/utest/TestAssert.hx"
		while (( _g1 < _g ))
		{
			//line 26 "/shared/utest/test/utest/TestAssert.hx"
			 ++ _g1;
			//line 27 "/shared/utest/test/utest/TestAssert.hx"
			this.bypass();
			//line 28 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.isTrue(true, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testBooleans"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (28) )) )}));
			//line 29 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.isTrue(false, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testBooleans"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (29) )) )}));
			//line 30 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.isFalse(true, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testBooleans"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (30) )) )}));
			//line 31 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.isFalse(false, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testBooleans"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (31) )) )}));
			//line 32 "/shared/utest/test/utest/TestAssert.hx"
			this.restore();
			//line 33 "/shared/utest/test/utest/TestAssert.hx"
			this.expect(2, 2, null);
		}
		
	}
	
	
	public void testNullity()
	{
		//line 37 "/shared/utest/test/utest/TestAssert.hx"
		int _g1 = 0;
		//line 37 "/shared/utest/test/utest/TestAssert.hx"
		int _g = this.x;
		//line 37 "/shared/utest/test/utest/TestAssert.hx"
		while (( _g1 < _g ))
		{
			//line 37 "/shared/utest/test/utest/TestAssert.hx"
			 ++ _g1;
			//line 38 "/shared/utest/test/utest/TestAssert.hx"
			this.bypass();
			//line 39 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.isNull(null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testNullity"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (39) )) )}));
			//line 40 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.isNull(0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testNullity"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (40) )) )}));
			//line 41 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.isNull(0.0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testNullity"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (41) )) )}));
			//line 42 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.isNull(0.1, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testNullity"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (42) )) )}));
			//line 43 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.isNull(1, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testNullity"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (43) )) )}));
			//line 44 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.isNull("", null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testNullity"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (44) )) )}));
			//line 45 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.isNull("a", null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testNullity"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (45) )) )}));
			//line 46 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.isNull(java.lang.Double.NaN, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testNullity"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (46) )) )}));
			//line 47 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.isNull(java.lang.Double.POSITIVE_INFINITY, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testNullity"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (47) )) )}));
			//line 48 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.isNull(true, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testNullity"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (48) )) )}));
			//line 49 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.isNull(false, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testNullity"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (49) )) )}));
			//line 50 "/shared/utest/test/utest/TestAssert.hx"
			this.restore();
			//line 51 "/shared/utest/test/utest/TestAssert.hx"
			this.expect(1, 10, null);
		}
		
	}
	
	
	public void testNoNullity()
	{
		//line 55 "/shared/utest/test/utest/TestAssert.hx"
		int _g1 = 0;
		//line 55 "/shared/utest/test/utest/TestAssert.hx"
		int _g = this.x;
		//line 55 "/shared/utest/test/utest/TestAssert.hx"
		while (( _g1 < _g ))
		{
			//line 55 "/shared/utest/test/utest/TestAssert.hx"
			 ++ _g1;
			//line 56 "/shared/utest/test/utest/TestAssert.hx"
			this.bypass();
			//line 57 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.notNull(null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testNoNullity"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (57) )) )}));
			//line 58 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.notNull(0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testNoNullity"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (58) )) )}));
			//line 59 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.notNull(0.0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testNoNullity"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (59) )) )}));
			//line 60 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.notNull(0.1, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testNoNullity"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (60) )) )}));
			//line 61 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.notNull(1, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testNoNullity"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (61) )) )}));
			//line 62 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.notNull("", null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testNoNullity"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (62) )) )}));
			//line 63 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.notNull("a", null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testNoNullity"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (63) )) )}));
			//line 64 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.notNull(java.lang.Double.NaN, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testNoNullity"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (64) )) )}));
			//line 65 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.notNull(java.lang.Double.POSITIVE_INFINITY, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testNoNullity"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (65) )) )}));
			//line 66 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.notNull(true, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testNoNullity"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (66) )) )}));
			//line 67 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.notNull(false, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testNoNullity"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (67) )) )}));
			//line 68 "/shared/utest/test/utest/TestAssert.hx"
			this.restore();
			//line 69 "/shared/utest/test/utest/TestAssert.hx"
			this.expect(10, 1, null);
		}
		
	}
	
	
	public void testRaises()
	{
		//line 73 "/shared/utest/test/utest/TestAssert.hx"
		int _g1 = 0;
		//line 73 "/shared/utest/test/utest/TestAssert.hx"
		int _g = this.x;
		//line 73 "/shared/utest/test/utest/TestAssert.hx"
		while (( _g1 < _g ))
		{
			//line 73 "/shared/utest/test/utest/TestAssert.hx"
			 ++ _g1;
			//line 74 "/shared/utest/test/utest/TestAssert.hx"
			this.bypass();
			//line 75 "/shared/utest/test/utest/TestAssert.hx"
			haxe.root.Array errors = new haxe.root.Array(new java.lang.Object[]{"e", 1, 0.1, new utest.TestAssert(((int) (this.x) )), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{}, new double[]{}), new haxe.root.Array(new java.lang.Object[]{1})});
			//line 76 "/shared/utest/test/utest/TestAssert.hx"
			haxe.root.Array types = new haxe.root.Array(new java.lang.Object[]{java.lang.String.class, int.class, double.class, utest.TestAssert.class, java.lang.Object.class, haxe.root.Array.class});
			//line 77 "/shared/utest/test/utest/TestAssert.hx"
			int i = 0;
			//line 79 "/shared/utest/test/utest/TestAssert.hx"
			{
				//line 79 "/shared/utest/test/utest/TestAssert.hx"
				int _g2 = 0;
				//line 79 "/shared/utest/test/utest/TestAssert.hx"
				while (( _g2 < errors.length ))
				{
					//line 79 "/shared/utest/test/utest/TestAssert.hx"
					java.lang.Object error = errors.__get(_g2);
					//line 79 "/shared/utest/test/utest/TestAssert.hx"
					 ++ _g2;
					//line 80 "/shared/utest/test/utest/TestAssert.hx"
					{
						//line 80 "/shared/utest/test/utest/TestAssert.hx"
						int _g3 = 0;
						//line 80 "/shared/utest/test/utest/TestAssert.hx"
						while (( _g3 < types.length ))
						{
							//line 80 "/shared/utest/test/utest/TestAssert.hx"
							java.lang.Object type = types.__get(_g3);
							//line 80 "/shared/utest/test/utest/TestAssert.hx"
							 ++ _g3;
							//line 81 "/shared/utest/test/utest/TestAssert.hx"
							 ++ i;
							//line 82 "/shared/utest/test/utest/TestAssert.hx"
							utest.Assert.raises(new utest.TestAssert_testRaises_82__Fun(error), ((java.lang.Class) (type) ), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testRaises"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (82) )) )}));
						}
						
					}
					
				}
				
			}
			
			//line 84 "/shared/utest/test/utest/TestAssert.hx"
			this.restore();
			//line 85 "/shared/utest/test/utest/TestAssert.hx"
			this.expect(12, ( i - 12 ), null);
		}
		
	}
	
	
	public void testIs()
	{
		//line 89 "/shared/utest/test/utest/TestAssert.hx"
		int _g1 = 0;
		//line 89 "/shared/utest/test/utest/TestAssert.hx"
		int _g = this.x;
		//line 89 "/shared/utest/test/utest/TestAssert.hx"
		while (( _g1 < _g ))
		{
			//line 89 "/shared/utest/test/utest/TestAssert.hx"
			 ++ _g1;
			//line 90 "/shared/utest/test/utest/TestAssert.hx"
			this.bypass();
			//line 91 "/shared/utest/test/utest/TestAssert.hx"
			haxe.root.Array values = new haxe.root.Array(new java.lang.Object[]{"e", 1, 0.1, new utest.TestAssert(((int) (this.x) )), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{}, new double[]{}), new haxe.root.Array(new java.lang.Object[]{1})});
			//line 92 "/shared/utest/test/utest/TestAssert.hx"
			haxe.root.Array types = new haxe.root.Array(new java.lang.Object[]{java.lang.String.class, int.class, double.class, utest.TestAssert.class, java.lang.Object.class, haxe.root.Array.class});
			//line 93 "/shared/utest/test/utest/TestAssert.hx"
			int i = 0;
			//line 95 "/shared/utest/test/utest/TestAssert.hx"
			{
				//line 95 "/shared/utest/test/utest/TestAssert.hx"
				int _g2 = 0;
				//line 95 "/shared/utest/test/utest/TestAssert.hx"
				while (( _g2 < values.length ))
				{
					//line 95 "/shared/utest/test/utest/TestAssert.hx"
					java.lang.Object value = values.__get(_g2);
					//line 95 "/shared/utest/test/utest/TestAssert.hx"
					 ++ _g2;
					//line 96 "/shared/utest/test/utest/TestAssert.hx"
					{
						//line 96 "/shared/utest/test/utest/TestAssert.hx"
						int _g3 = 0;
						//line 96 "/shared/utest/test/utest/TestAssert.hx"
						while (( _g3 < types.length ))
						{
							//line 96 "/shared/utest/test/utest/TestAssert.hx"
							java.lang.Object type = types.__get(_g3);
							//line 96 "/shared/utest/test/utest/TestAssert.hx"
							 ++ _g3;
							//line 97 "/shared/utest/test/utest/TestAssert.hx"
							 ++ i;
							//line 98 "/shared/utest/test/utest/TestAssert.hx"
							utest.Assert.is(value, type, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testIs"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (98) )) )}));
						}
						
					}
					
				}
				
			}
			
			//line 100 "/shared/utest/test/utest/TestAssert.hx"
			this.restore();
			//line 101 "/shared/utest/test/utest/TestAssert.hx"
			this.expect(12, ( i - 12 ), null);
		}
		
	}
	
	
	public void testSamePrimitive()
	{
		//line 105 "/shared/utest/test/utest/TestAssert.hx"
		int _g1 = 0;
		//line 105 "/shared/utest/test/utest/TestAssert.hx"
		int _g = this.x;
		//line 105 "/shared/utest/test/utest/TestAssert.hx"
		while (( _g1 < _g ))
		{
			//line 105 "/shared/utest/test/utest/TestAssert.hx"
			 ++ _g1;
			//line 106 "/shared/utest/test/utest/TestAssert.hx"
			this.bypass();
			//line 107 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(null, 1, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSamePrimitive"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (107) )) )}));
			//line 108 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(1, 1, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSamePrimitive"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (108) )) )}));
			//line 109 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(1, "1", null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSamePrimitive"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (109) )) )}));
			//line 110 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same("a", "a", null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSamePrimitive"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (110) )) )}));
			//line 111 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(null, "", null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSamePrimitive"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (111) )) )}));
			//line 112 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(new haxe.root.Date(2000, 0, 1, 0, 0, 0), null, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSamePrimitive"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (112) )) )}));
			//line 113 "/shared/utest/test/utest/TestAssert.hx"
			haxe.ds.IntMap<java.lang.String> _g2 = new haxe.ds.IntMap<java.lang.String>();
			//line 113 "/shared/utest/test/utest/TestAssert.hx"
			_g2.set(1, "a");
			//line 113 "/shared/utest/test/utest/TestAssert.hx"
			_g2.set(2, "b");
			//line 113 "/shared/utest/test/utest/TestAssert.hx"
			haxe.ds.IntMap<java.lang.String> _g3 = new haxe.ds.IntMap<java.lang.String>();
			//line 113 "/shared/utest/test/utest/TestAssert.hx"
			_g3.set(1, "a");
			//line 113 "/shared/utest/test/utest/TestAssert.hx"
			_g3.set(2, "b");
			//line 113 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(_g2, _g3, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSamePrimitive"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (113) )) )}));
			//line 114 "/shared/utest/test/utest/TestAssert.hx"
			haxe.ds.StringMap<java.lang.Object> _g4 = new haxe.ds.StringMap<java.lang.Object>();
			//line 114 "/shared/utest/test/utest/TestAssert.hx"
			_g4.set("a", 1);
			//line 114 "/shared/utest/test/utest/TestAssert.hx"
			haxe.ds.StringMap<java.lang.Object> _g5 = new haxe.ds.StringMap<java.lang.Object>();
			//line 114 "/shared/utest/test/utest/TestAssert.hx"
			_g5.set("a", 1);
			//line 114 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(_g4, _g5, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSamePrimitive"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (114) )) )}));
			//line 115 "/shared/utest/test/utest/TestAssert.hx"
			haxe.ds.StringMap<java.lang.Object> _g6 = new haxe.ds.StringMap<java.lang.Object>();
			//line 115 "/shared/utest/test/utest/TestAssert.hx"
			_g6.set("a", 1);
			//line 115 "/shared/utest/test/utest/TestAssert.hx"
			haxe.ds.IntMap<java.lang.Object> _g7 = new haxe.ds.IntMap<java.lang.Object>();
			//line 115 "/shared/utest/test/utest/TestAssert.hx"
			_g7.set(1, 1);
			//line 115 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(_g6, _g7, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSamePrimitive"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (115) )) )}));
			//line 116 "/shared/utest/test/utest/TestAssert.hx"
			haxe.ds.IntMap<java.lang.String> _g8 = new haxe.ds.IntMap<java.lang.String>();
			//line 116 "/shared/utest/test/utest/TestAssert.hx"
			_g8.set(1, "a");
			//line 116 "/shared/utest/test/utest/TestAssert.hx"
			haxe.ds.IntMap<java.lang.String> _g9 = new haxe.ds.IntMap<java.lang.String>();
			//line 116 "/shared/utest/test/utest/TestAssert.hx"
			_g9.set(1, "a");
			//line 116 "/shared/utest/test/utest/TestAssert.hx"
			_g9.set(2, "b");
			//line 116 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(_g8, _g9, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSamePrimitive"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (116) )) )}));
			//line 120 "/shared/utest/test/utest/TestAssert.hx"
			this.restore();
			//line 121 "/shared/utest/test/utest/TestAssert.hx"
			this.expect(5, 6, null);
		}
		
	}
	
	
	public void testSameType()
	{
		//line 125 "/shared/utest/test/utest/TestAssert.hx"
		int _g1 = 0;
		//line 125 "/shared/utest/test/utest/TestAssert.hx"
		int _g = this.x;
		//line 125 "/shared/utest/test/utest/TestAssert.hx"
		while (( _g1 < _g ))
		{
			//line 125 "/shared/utest/test/utest/TestAssert.hx"
			 ++ _g1;
			//line 126 "/shared/utest/test/utest/TestAssert.hx"
			this.bypass();
			//line 127 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(null, new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{}, new double[]{}), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameType"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (127) )) )}));
			//line 128 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(null, null, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameType"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (128) )) )}));
			//line 129 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{}, new double[]{}), null, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameType"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (129) )) )}));
			//line 130 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{}, new double[]{}), 1, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameType"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (130) )) )}));
			//line 131 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{}, new double[]{}), new haxe.root.Array(new java.lang.Object[]{}), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameType"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (131) )) )}));
			//line 132 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(null, utest._TestAssert.Sample.None, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameType"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (132) )) )}));
			//line 133 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(utest._TestAssert.Sample.None, null, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameType"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (133) )) )}));
			//line 135 "/shared/utest/test/utest/TestAssert.hx"
			this.restore();
			//line 136 "/shared/utest/test/utest/TestAssert.hx"
			this.expect(1, 6, null);
		}
		
	}
	
	
	public void testSameArray()
	{
		//line 140 "/shared/utest/test/utest/TestAssert.hx"
		int _g1 = 0;
		//line 140 "/shared/utest/test/utest/TestAssert.hx"
		int _g = this.x;
		//line 140 "/shared/utest/test/utest/TestAssert.hx"
		while (( _g1 < _g ))
		{
			//line 140 "/shared/utest/test/utest/TestAssert.hx"
			 ++ _g1;
			//line 141 "/shared/utest/test/utest/TestAssert.hx"
			this.bypass();
			//line 142 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{}), new haxe.root.Array(new java.lang.Object[]{}), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameArray"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (142) )) )}));
			//line 143 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1}), new haxe.root.Array(new java.lang.Object[]{"1"}), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameArray"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (143) )) )}));
			//line 144 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2, 3}), new haxe.root.Array(new java.lang.Object[]{1, 2, 3}), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameArray"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (144) )) )}));
			//line 145 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2, 3}), new haxe.root.Array(new java.lang.Object[]{1, 2}), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameArray"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (145) )) )}));
			//line 146 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2}), new haxe.root.Array(new java.lang.Object[]{1, 2, 3}), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameArray"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (146) )) )}));
			//line 147 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, new haxe.root.Array(new java.lang.Object[]{1, 2})}), new haxe.root.Array(new java.lang.Object[]{1, new haxe.root.Array(new java.lang.Object[]{1, 2})}), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameArray"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (147) )) )}));
			//line 148 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, new haxe.root.Array(new java.lang.Object[]{1, 2})}), new haxe.root.Array(new java.lang.Object[]{1, new haxe.root.Array(new java.lang.Object[]{})}), false, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameArray"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (148) )) )}));
			//line 149 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, new haxe.root.Array(new java.lang.Object[]{1, 2})}), new haxe.root.Array(new java.lang.Object[]{1, new haxe.root.Array(new java.lang.Object[]{})}), true, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameArray"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (149) )) )}));
			//line 151 "/shared/utest/test/utest/TestAssert.hx"
			this.restore();
			//line 152 "/shared/utest/test/utest/TestAssert.hx"
			this.expect(4, 4, null);
		}
		
	}
	
	
	public void testSameObject()
	{
		//line 156 "/shared/utest/test/utest/TestAssert.hx"
		int _g1 = 0;
		//line 156 "/shared/utest/test/utest/TestAssert.hx"
		int _g = this.x;
		//line 156 "/shared/utest/test/utest/TestAssert.hx"
		while (( _g1 < _g ))
		{
			//line 156 "/shared/utest/test/utest/TestAssert.hx"
			 ++ _g1;
			//line 157 "/shared/utest/test/utest/TestAssert.hx"
			this.bypass();
			//line 158 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{}, new double[]{}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{}, new double[]{}), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameObject"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (158) )) )}));
			//line 159 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"a"}, new java.lang.Object[]{"1"}, new java.lang.String[]{}, new double[]{}), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameObject"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (159) )) )}));
			//line 160 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(new haxe.lang.DynamicObject(new java.lang.String[]{"b"}, new java.lang.Object[]{"c"}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"b"}, new java.lang.Object[]{"c"}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )}), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameObject"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (160) )) )}));
			//line 161 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(new haxe.lang.DynamicObject(new java.lang.String[]{"b"}, new java.lang.Object[]{"c"}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"c"}, new java.lang.Object[]{"c"}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )}), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameObject"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (161) )) )}));
			//line 162 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(new haxe.lang.DynamicObject(new java.lang.String[]{"b"}, new java.lang.Object[]{"c"}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )}), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameObject"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (162) )) )}));
			//line 163 "/shared/utest/test/utest/TestAssert.hx"
			java.lang.Object __temp_stmt7 = null;
			//line 163 "/shared/utest/test/utest/TestAssert.hx"
			{
				//line 163 "/shared/utest/test/utest/TestAssert.hx"
				java.lang.Object __temp_odecl1 = new haxe.lang.DynamicObject(new java.lang.String[]{"c"}, new java.lang.Object[]{"c"}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )});
				//line 163 "/shared/utest/test/utest/TestAssert.hx"
				__temp_stmt7 = new haxe.lang.DynamicObject(new java.lang.String[]{"b"}, new java.lang.Object[]{__temp_odecl1}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )});
			}
			
			//line 163 "/shared/utest/test/utest/TestAssert.hx"
			java.lang.Object __temp_stmt8 = null;
			//line 163 "/shared/utest/test/utest/TestAssert.hx"
			{
				//line 163 "/shared/utest/test/utest/TestAssert.hx"
				java.lang.Object __temp_odecl2 = new haxe.lang.DynamicObject(new java.lang.String[]{"c"}, new java.lang.Object[]{"c"}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )});
				//line 163 "/shared/utest/test/utest/TestAssert.hx"
				__temp_stmt8 = new haxe.lang.DynamicObject(new java.lang.String[]{"b"}, new java.lang.Object[]{__temp_odecl2}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )});
			}
			
			//line 163 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(__temp_stmt7, __temp_stmt8, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameObject"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (163) )) )}));
			//line 164 "/shared/utest/test/utest/TestAssert.hx"
			java.lang.Object __temp_stmt9 = null;
			//line 164 "/shared/utest/test/utest/TestAssert.hx"
			{
				//line 164 "/shared/utest/test/utest/TestAssert.hx"
				java.lang.Object __temp_odecl3 = new haxe.lang.DynamicObject(new java.lang.String[]{"c"}, new java.lang.Object[]{"c"}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )});
				//line 164 "/shared/utest/test/utest/TestAssert.hx"
				__temp_stmt9 = new haxe.lang.DynamicObject(new java.lang.String[]{"b"}, new java.lang.Object[]{__temp_odecl3}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )});
			}
			
			//line 164 "/shared/utest/test/utest/TestAssert.hx"
			java.lang.Object __temp_stmt10 = null;
			//line 164 "/shared/utest/test/utest/TestAssert.hx"
			{
				//line 164 "/shared/utest/test/utest/TestAssert.hx"
				java.lang.Object __temp_odecl4 = new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{}, new double[]{});
				//line 164 "/shared/utest/test/utest/TestAssert.hx"
				__temp_stmt10 = new haxe.lang.DynamicObject(new java.lang.String[]{"b"}, new java.lang.Object[]{__temp_odecl4}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )});
			}
			
			//line 164 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(__temp_stmt9, __temp_stmt10, false, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameObject"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (164) )) )}));
			//line 165 "/shared/utest/test/utest/TestAssert.hx"
			java.lang.Object __temp_stmt11 = null;
			//line 165 "/shared/utest/test/utest/TestAssert.hx"
			{
				//line 165 "/shared/utest/test/utest/TestAssert.hx"
				java.lang.Object __temp_odecl5 = new haxe.lang.DynamicObject(new java.lang.String[]{"c"}, new java.lang.Object[]{"c"}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )});
				//line 165 "/shared/utest/test/utest/TestAssert.hx"
				__temp_stmt11 = new haxe.lang.DynamicObject(new java.lang.String[]{"b"}, new java.lang.Object[]{__temp_odecl5}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )});
			}
			
			//line 165 "/shared/utest/test/utest/TestAssert.hx"
			java.lang.Object __temp_stmt12 = null;
			//line 165 "/shared/utest/test/utest/TestAssert.hx"
			{
				//line 165 "/shared/utest/test/utest/TestAssert.hx"
				java.lang.Object __temp_odecl6 = new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{}, new double[]{});
				//line 165 "/shared/utest/test/utest/TestAssert.hx"
				__temp_stmt12 = new haxe.lang.DynamicObject(new java.lang.String[]{"b"}, new java.lang.Object[]{__temp_odecl6}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )});
			}
			
			//line 165 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(__temp_stmt11, __temp_stmt12, true, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameObject"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (165) )) )}));
			//line 167 "/shared/utest/test/utest/TestAssert.hx"
			this.restore();
			//line 168 "/shared/utest/test/utest/TestAssert.hx"
			this.expect(4, 4, null);
		}
		
	}
	
	
	public java.lang.String value;
	
	public utest.TestAssert sub;
	
	public void testSameInstance()
	{
		//line 174 "/shared/utest/test/utest/TestAssert.hx"
		int _g1 = 0;
		//line 174 "/shared/utest/test/utest/TestAssert.hx"
		int _g = this.x;
		//line 174 "/shared/utest/test/utest/TestAssert.hx"
		while (( _g1 < _g ))
		{
			//line 174 "/shared/utest/test/utest/TestAssert.hx"
			 ++ _g1;
			//line 175 "/shared/utest/test/utest/TestAssert.hx"
			utest.TestAssert c1 = new utest.TestAssert(((int) (this.x) ));
			//line 176 "/shared/utest/test/utest/TestAssert.hx"
			c1.value = "a";
			//line 177 "/shared/utest/test/utest/TestAssert.hx"
			utest.TestAssert c2 = new utest.TestAssert(((int) (this.x) ));
			//line 178 "/shared/utest/test/utest/TestAssert.hx"
			c2.value = "a";
			//line 179 "/shared/utest/test/utest/TestAssert.hx"
			utest.TestAssert c3 = new utest.TestAssert(((int) (this.x) ));
			//line 181 "/shared/utest/test/utest/TestAssert.hx"
			utest.TestAssert r1 = new utest.TestAssert(((int) (this.x) ));
			//line 182 "/shared/utest/test/utest/TestAssert.hx"
			r1.sub = c1;
			//line 183 "/shared/utest/test/utest/TestAssert.hx"
			utest.TestAssert r2 = new utest.TestAssert(((int) (this.x) ));
			//line 184 "/shared/utest/test/utest/TestAssert.hx"
			r2.sub = c2;
			//line 185 "/shared/utest/test/utest/TestAssert.hx"
			utest.TestAssert r3 = new utest.TestAssert(((int) (this.x) ));
			//line 186 "/shared/utest/test/utest/TestAssert.hx"
			r3.sub = c3;
			//line 189 "/shared/utest/test/utest/TestAssert.hx"
			this.bypass();
			//line 190 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(c1, c1, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameInstance"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (190) )) )}));
			//line 191 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(c1, c2, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameInstance"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (191) )) )}));
			//line 192 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(c1, c3, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameInstance"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (192) )) )}));
			//line 194 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(r1, r2, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameInstance"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (194) )) )}));
			//line 195 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(r1, r3, false, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameInstance"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (195) )) )}));
			//line 196 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(r1, r3, true, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameInstance"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (196) )) )}));
			//line 198 "/shared/utest/test/utest/TestAssert.hx"
			this.restore();
			//line 199 "/shared/utest/test/utest/TestAssert.hx"
			this.expect(4, 2, null);
		}
		
	}
	
	
	public void testSameIterable()
	{
		//line 203 "/shared/utest/test/utest/TestAssert.hx"
		int _g1 = 0;
		//line 203 "/shared/utest/test/utest/TestAssert.hx"
		int _g = this.x;
		//line 203 "/shared/utest/test/utest/TestAssert.hx"
		while (( _g1 < _g ))
		{
			//line 203 "/shared/utest/test/utest/TestAssert.hx"
			 ++ _g1;
			//line 204 "/shared/utest/test/utest/TestAssert.hx"
			haxe.root.List list1 = new haxe.root.List();
			//line 205 "/shared/utest/test/utest/TestAssert.hx"
			list1.add("a");
			//line 206 "/shared/utest/test/utest/TestAssert.hx"
			list1.add(1);
			//line 207 "/shared/utest/test/utest/TestAssert.hx"
			haxe.root.List<java.lang.Object> s1 = new haxe.root.List<java.lang.Object>();
			//line 208 "/shared/utest/test/utest/TestAssert.hx"
			s1.add(2);
			//line 209 "/shared/utest/test/utest/TestAssert.hx"
			list1.add(s1);
			//line 210 "/shared/utest/test/utest/TestAssert.hx"
			haxe.root.List list2 = new haxe.root.List();
			//line 211 "/shared/utest/test/utest/TestAssert.hx"
			list2.add("a");
			//line 212 "/shared/utest/test/utest/TestAssert.hx"
			list2.add(1);
			//line 213 "/shared/utest/test/utest/TestAssert.hx"
			list2.add(s1);
			//line 214 "/shared/utest/test/utest/TestAssert.hx"
			haxe.root.List list3 = new haxe.root.List();
			//line 215 "/shared/utest/test/utest/TestAssert.hx"
			list3.add("a");
			//line 216 "/shared/utest/test/utest/TestAssert.hx"
			list3.add(1);
			//line 217 "/shared/utest/test/utest/TestAssert.hx"
			list3.add(new haxe.root.List());
			//line 219 "/shared/utest/test/utest/TestAssert.hx"
			this.bypass();
			//line 220 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(list1, list2, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameIterable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (220) )) )}));
			//line 221 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(list1, list3, false, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameIterable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (221) )) )}));
			//line 222 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(list1, list3, true, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameIterable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (222) )) )}));
			//line 224 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(new haxe.root.IntIterator(0, 3), new haxe.root.IntIterator(0, 3), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameIterable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (224) )) )}));
			//line 225 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(new haxe.root.IntIterator(0, 3), new haxe.root.IntIterator(0, 4), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameIterable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (225) )) )}));
			//line 227 "/shared/utest/test/utest/TestAssert.hx"
			this.restore();
			//line 228 "/shared/utest/test/utest/TestAssert.hx"
			this.expect(3, 2, null);
		}
		
	}
	
	
	public void testSameEnums()
	{
		//line 260 "/shared/utest/test/utest/TestAssert.hx"
		int _g1 = 0;
		//line 260 "/shared/utest/test/utest/TestAssert.hx"
		int _g = this.x;
		//line 260 "/shared/utest/test/utest/TestAssert.hx"
		while (( _g1 < _g ))
		{
			//line 260 "/shared/utest/test/utest/TestAssert.hx"
			 ++ _g1;
			//line 261 "/shared/utest/test/utest/TestAssert.hx"
			this.bypass();
			//line 263 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(utest._TestAssert.Sample.None, utest._TestAssert.Sample.None, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameEnums"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (263) )) )}));
			//line 264 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(utest._TestAssert.Sample.Some("a"), utest._TestAssert.Sample.Some("a"), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameEnums"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (264) )) )}));
			//line 265 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(utest._TestAssert.Sample.Some("a"), utest._TestAssert.Sample.Some("b"), true, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameEnums"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (265) )) )}));
			//line 266 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(utest._TestAssert.Sample.Some("a"), utest._TestAssert.Sample.Some("b"), false, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameEnums"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (266) )) )}));
			//line 267 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(utest._TestAssert.Sample.Some("a"), utest._TestAssert.Sample.None, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameEnums"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (267) )) )}));
			//line 268 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(utest._TestAssert.Sample.Rec(utest._TestAssert.Sample.Rec(utest._TestAssert.Sample.Some("a"))), utest._TestAssert.Sample.Rec(utest._TestAssert.Sample.Rec(utest._TestAssert.Sample.Some("a"))), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameEnums"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (268) )) )}));
			//line 269 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(utest._TestAssert.Sample.Rec(utest._TestAssert.Sample.Rec(utest._TestAssert.Sample.Some("a"))), utest._TestAssert.Sample.Rec(utest._TestAssert.Sample.None), true, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameEnums"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (269) )) )}));
			//line 272 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.same(utest._TestAssert.Sample.Rec(utest._TestAssert.Sample.Rec(utest._TestAssert.Sample.Some("a"))), utest._TestAssert.Sample.Rec(utest._TestAssert.Sample.Rec(utest._TestAssert.Sample.None)), false, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testSameEnums"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (272) )) )}));
			//line 275 "/shared/utest/test/utest/TestAssert.hx"
			this.restore();
			//line 279 "/shared/utest/test/utest/TestAssert.hx"
			this.expect(4, 4, null);
		}
		
	}
	
	
	public void testEquals()
	{
		//line 284 "/shared/utest/test/utest/TestAssert.hx"
		int _g1 = 0;
		//line 284 "/shared/utest/test/utest/TestAssert.hx"
		int _g = this.x;
		//line 284 "/shared/utest/test/utest/TestAssert.hx"
		while (( _g1 < _g ))
		{
			//line 284 "/shared/utest/test/utest/TestAssert.hx"
			 ++ _g1;
			//line 285 "/shared/utest/test/utest/TestAssert.hx"
			this.bypass();
			//line 286 "/shared/utest/test/utest/TestAssert.hx"
			haxe.root.Array values = new haxe.root.Array(new java.lang.Object[]{"e", 1, 0.1, new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{}, new double[]{})});
			//line 287 "/shared/utest/test/utest/TestAssert.hx"
			haxe.root.Array expecteds = new haxe.root.Array(new java.lang.Object[]{"e", 1, 0.1, new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{}, new double[]{})});
			//line 288 "/shared/utest/test/utest/TestAssert.hx"
			int i = 0;
			//line 290 "/shared/utest/test/utest/TestAssert.hx"
			{
				//line 290 "/shared/utest/test/utest/TestAssert.hx"
				int _g2 = 0;
				//line 290 "/shared/utest/test/utest/TestAssert.hx"
				while (( _g2 < expecteds.length ))
				{
					//line 290 "/shared/utest/test/utest/TestAssert.hx"
					java.lang.Object expected = expecteds.__get(_g2);
					//line 290 "/shared/utest/test/utest/TestAssert.hx"
					 ++ _g2;
					//line 291 "/shared/utest/test/utest/TestAssert.hx"
					{
						//line 291 "/shared/utest/test/utest/TestAssert.hx"
						int _g3 = 0;
						//line 291 "/shared/utest/test/utest/TestAssert.hx"
						while (( _g3 < values.length ))
						{
							//line 291 "/shared/utest/test/utest/TestAssert.hx"
							java.lang.Object value = values.__get(_g3);
							//line 291 "/shared/utest/test/utest/TestAssert.hx"
							 ++ _g3;
							//line 292 "/shared/utest/test/utest/TestAssert.hx"
							 ++ i;
							//line 293 "/shared/utest/test/utest/TestAssert.hx"
							utest.Assert.equals(expected, value, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (293) )) )}));
						}
						
					}
					
				}
				
			}
			
			//line 295 "/shared/utest/test/utest/TestAssert.hx"
			this.restore();
			//line 296 "/shared/utest/test/utest/TestAssert.hx"
			this.expect(3, ( i - 3 ), null);
		}
		
	}
	
	
	public void testFloatEquals()
	{
		//line 300 "/shared/utest/test/utest/TestAssert.hx"
		int _g1 = 0;
		//line 300 "/shared/utest/test/utest/TestAssert.hx"
		int _g = this.x;
		//line 300 "/shared/utest/test/utest/TestAssert.hx"
		while (( _g1 < _g ))
		{
			//line 300 "/shared/utest/test/utest/TestAssert.hx"
			 ++ _g1;
			//line 301 "/shared/utest/test/utest/TestAssert.hx"
			this.bypass();
			//line 302 "/shared/utest/test/utest/TestAssert.hx"
			haxe.root.Array<java.lang.Object> values = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (1) ), ((java.lang.Object) (0.1) ), ((java.lang.Object) (0.000000000000000000000000000011) ), ((java.lang.Object) (java.lang.Double.NaN) ), ((java.lang.Object) (java.lang.Double.NEGATIVE_INFINITY) ), ((java.lang.Object) (java.lang.Double.POSITIVE_INFINITY) ), ((java.lang.Object) (java.lang.Math.PI) ), ((java.lang.Object) (0.11) )});
			//line 303 "/shared/utest/test/utest/TestAssert.hx"
			haxe.root.Array<java.lang.Object> expecteds = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (1) ), ((java.lang.Object) (0.1) ), ((java.lang.Object) (0.000000000000000000000000000012) ), ((java.lang.Object) (java.lang.Double.NaN) ), ((java.lang.Object) (java.lang.Double.NEGATIVE_INFINITY) ), ((java.lang.Object) (java.lang.Double.POSITIVE_INFINITY) ), ((java.lang.Object) (java.lang.Math.PI) ), ((java.lang.Object) (0.12) )});
			//line 304 "/shared/utest/test/utest/TestAssert.hx"
			int i = 0;
			//line 306 "/shared/utest/test/utest/TestAssert.hx"
			{
				//line 306 "/shared/utest/test/utest/TestAssert.hx"
				int _g2 = 0;
				//line 306 "/shared/utest/test/utest/TestAssert.hx"
				while (( _g2 < expecteds.length ))
				{
					//line 306 "/shared/utest/test/utest/TestAssert.hx"
					double expected = ((double) (haxe.lang.Runtime.toDouble(expecteds.__get(_g2))) );
					//line 306 "/shared/utest/test/utest/TestAssert.hx"
					 ++ _g2;
					//line 307 "/shared/utest/test/utest/TestAssert.hx"
					{
						//line 307 "/shared/utest/test/utest/TestAssert.hx"
						int _g3 = 0;
						//line 307 "/shared/utest/test/utest/TestAssert.hx"
						while (( _g3 < values.length ))
						{
							//line 307 "/shared/utest/test/utest/TestAssert.hx"
							double value = ((double) (haxe.lang.Runtime.toDouble(values.__get(_g3))) );
							//line 307 "/shared/utest/test/utest/TestAssert.hx"
							 ++ _g3;
							//line 308 "/shared/utest/test/utest/TestAssert.hx"
							 ++ i;
							//line 309 "/shared/utest/test/utest/TestAssert.hx"
							utest.Assert.floatEquals(expected, value, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testFloatEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (309) )) )}));
						}
						
					}
					
				}
				
			}
			
			//line 311 "/shared/utest/test/utest/TestAssert.hx"
			this.restore();
			//line 312 "/shared/utest/test/utest/TestAssert.hx"
			this.expect(7, ( i - 7 ), null);
		}
		
	}
	
	
	public void testPass()
	{
		//line 316 "/shared/utest/test/utest/TestAssert.hx"
		int _g1 = 0;
		//line 316 "/shared/utest/test/utest/TestAssert.hx"
		int _g = this.x;
		//line 316 "/shared/utest/test/utest/TestAssert.hx"
		while (( _g1 < _g ))
		{
			//line 316 "/shared/utest/test/utest/TestAssert.hx"
			 ++ _g1;
			//line 317 "/shared/utest/test/utest/TestAssert.hx"
			this.bypass();
			//line 318 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.pass(null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testPass"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (318) )) )}));
			//line 319 "/shared/utest/test/utest/TestAssert.hx"
			this.restore();
			//line 320 "/shared/utest/test/utest/TestAssert.hx"
			this.expect(1, 0, null);
		}
		
	}
	
	
	public void testFail()
	{
		//line 324 "/shared/utest/test/utest/TestAssert.hx"
		int _g1 = 0;
		//line 324 "/shared/utest/test/utest/TestAssert.hx"
		int _g = this.x;
		//line 324 "/shared/utest/test/utest/TestAssert.hx"
		while (( _g1 < _g ))
		{
			//line 324 "/shared/utest/test/utest/TestAssert.hx"
			 ++ _g1;
			//line 325 "/shared/utest/test/utest/TestAssert.hx"
			this.bypass();
			//line 326 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.fail(null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "testFail"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (326) )) )}));
			//line 327 "/shared/utest/test/utest/TestAssert.hx"
			this.restore();
			//line 328 "/shared/utest/test/utest/TestAssert.hx"
			this.expect(0, 1, null);
		}
		
	}
	
	
	public void testWarn()
	{
		//line 332 "/shared/utest/test/utest/TestAssert.hx"
		int _g1 = 0;
		//line 332 "/shared/utest/test/utest/TestAssert.hx"
		int _g = this.x;
		//line 332 "/shared/utest/test/utest/TestAssert.hx"
		while (( _g1 < _g ))
		{
			//line 332 "/shared/utest/test/utest/TestAssert.hx"
			 ++ _g1;
			//line 333 "/shared/utest/test/utest/TestAssert.hx"
			this.bypass();
			//line 334 "/shared/utest/test/utest/TestAssert.hx"
			utest.Assert.warn("");
			//line 335 "/shared/utest/test/utest/TestAssert.hx"
			this.restore();
			//line 336 "/shared/utest/test/utest/TestAssert.hx"
			this.expect(0, 0, 1);
		}
		
	}
	
	
	public void expect(int esuccesses, int efailures, java.lang.Object eothers)
	{
		//line 339 "/shared/utest/test/utest/TestAssert.hx"
		int __temp_eothers38 = ( (haxe.lang.Runtime.eq(eothers, null)) ? (0) : (((int) (haxe.lang.Runtime.toInt(eothers)) )) );
		//line 341 "/shared/utest/test/utest/TestAssert.hx"
		int failures = 0;
		//line 342 "/shared/utest/test/utest/TestAssert.hx"
		int others = 0;
		//line 343 "/shared/utest/test/utest/TestAssert.hx"
		{
			//line 343 "/shared/utest/test/utest/TestAssert.hx"
			_List.ListNode<utest.Assertation> _g_head = this.results.h;
			//line 343 "/shared/utest/test/utest/TestAssert.hx"
			while (( _g_head != null ))
			{
				//line 343 "/shared/utest/test/utest/TestAssert.hx"
				utest.Assertation val = _g_head.item;
				//line 339 "/shared/utest/test/utest/TestAssert.hx"
				_g_head = _g_head.next;
				//line 344 "/shared/utest/test/utest/TestAssert.hx"
				switch (val.index)
				{
					case 0:
					{
						//line 346 "/shared/utest/test/utest/TestAssert.hx"
						break;
					}
					
					
					case 1:
					{
						//line 348 "/shared/utest/test/utest/TestAssert.hx"
						 ++ failures;
						//line 348 "/shared/utest/test/utest/TestAssert.hx"
						break;
					}
					
					
					default:
					{
						//line 350 "/shared/utest/test/utest/TestAssert.hx"
						 ++ others;
						//line 350 "/shared/utest/test/utest/TestAssert.hx"
						break;
					}
					
				}
				
			}
			
		}
		
		//line 353 "/shared/utest/test/utest/TestAssert.hx"
		utest.Assert.equals(__temp_eothers38, others, ( ( ( "expected " + __temp_eothers38 ) + " other results but were " ) + others ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "expect"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (353) )) )}));
		//line 356 "/shared/utest/test/utest/TestAssert.hx"
		utest.Assert.equals(efailures, failures, ( ( ( "expected " + efailures ) + " failures but were " ) + failures ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"utest.TestAssert", "TestAssert.hx", "expect"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (356) )) )}));
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 7 "/shared/utest/test/utest/TestAssert.hx"
		{
			//line 7 "/shared/utest/test/utest/TestAssert.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/utest/test/utest/TestAssert.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("x")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						this.x = ((int) (value) );
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return value;
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/utest/test/utest/TestAssert.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/utest/test/utest/TestAssert.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 7 "/shared/utest/test/utest/TestAssert.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 7 "/shared/utest/test/utest/TestAssert.hx"
		{
			//line 7 "/shared/utest/test/utest/TestAssert.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/utest/test/utest/TestAssert.hx"
			switch (field.hashCode())
			{
				case 114240:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("sub")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						this.sub = ((utest.TestAssert) (value) );
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return value;
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case 120:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("x")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						this.x = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return value;
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case 111972721:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("value")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						this.value = haxe.lang.Runtime.toString(value);
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return value;
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case -668444578:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("resultsbypass")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						this.resultsbypass = ((haxe.root.List<utest.Assertation>) (value) );
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return value;
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case 1097546742:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("results")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						this.results = ((haxe.root.List<utest.Assertation>) (value) );
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return value;
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/utest/test/utest/TestAssert.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/utest/test/utest/TestAssert.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 7 "/shared/utest/test/utest/TestAssert.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 7 "/shared/utest/test/utest/TestAssert.hx"
		{
			//line 7 "/shared/utest/test/utest/TestAssert.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/utest/test/utest/TestAssert.hx"
			switch (field.hashCode())
			{
				case -1289163687:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("expect")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "expect")) );
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case 120:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("x")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return this.x;
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case -1146703304:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testWarn")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testWarn")) );
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case -668444578:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("resultsbypass")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return this.resultsbypass;
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case -1147210032:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testFail")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFail")) );
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case 1097546742:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("results")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return this.results;
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case -1146911805:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testPass")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testPass")) );
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case -1374130968:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("bypass")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "bypass")) );
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case 1430949193:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testFloatEquals")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFloatEquals")) );
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case 1097519758:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("restore")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "restore")) );
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case 1324251889:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testEquals")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testEquals")) );
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case -1574563843:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testBooleans")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testBooleans")) );
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case 1432062554:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testSameEnums")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSameEnums")) );
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case 1901231317:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testNullity")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testNullity")) );
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case -377130838:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testSameIterable")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSameIterable")) );
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case -739856300:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testNoNullity")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testNoNullity")) );
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case -1004519219:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testSameInstance")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSameInstance")) );
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case 1681314105:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testRaises")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testRaises")) );
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case 114240:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("sub")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return this.sub;
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case -877170340:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testIs")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testIs")) );
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case 111972721:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("value")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return this.value;
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case 1355737007:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testSamePrimitive")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSamePrimitive")) );
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case 1719139703:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testSameObject")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSameObject")) );
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case -1615915150:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testSameType")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSameType")) );
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case 1428484385:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testSameArray")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSameArray")) );
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/utest/test/utest/TestAssert.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/utest/test/utest/TestAssert.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 7 "/shared/utest/test/utest/TestAssert.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 7 "/shared/utest/test/utest/TestAssert.hx"
		{
			//line 7 "/shared/utest/test/utest/TestAssert.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/utest/test/utest/TestAssert.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("x")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						return ((double) (this.x) );
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/utest/test/utest/TestAssert.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/utest/test/utest/TestAssert.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 7 "/shared/utest/test/utest/TestAssert.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 7 "/shared/utest/test/utest/TestAssert.hx"
		{
			//line 7 "/shared/utest/test/utest/TestAssert.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/utest/test/utest/TestAssert.hx"
			switch (field.hashCode())
			{
				case -1289163687:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("expect")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						this.expect(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ), ((int) (haxe.lang.Runtime.toInt(dynargs.__get(1))) ), dynargs.__get(2));
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case -1374130968:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("bypass")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						this.bypass();
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case -1146703304:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testWarn")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						this.testWarn();
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case 1097519758:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("restore")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						this.restore();
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case -1147210032:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testFail")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						this.testFail();
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case -1574563843:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testBooleans")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						this.testBooleans();
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case -1146911805:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testPass")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						this.testPass();
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case 1901231317:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testNullity")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						this.testNullity();
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case 1430949193:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testFloatEquals")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						this.testFloatEquals();
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case -739856300:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testNoNullity")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						this.testNoNullity();
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case 1324251889:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testEquals")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						this.testEquals();
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case 1681314105:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testRaises")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						this.testRaises();
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case 1432062554:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testSameEnums")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						this.testSameEnums();
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case -877170340:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testIs")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						this.testIs();
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case -377130838:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testSameIterable")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						this.testSameIterable();
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case 1355737007:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testSamePrimitive")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						this.testSamePrimitive();
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case -1004519219:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testSameInstance")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						this.testSameInstance();
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case -1615915150:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testSameType")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						this.testSameType();
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case 1719139703:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testSameObject")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						this.testSameObject();
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
				case 1428484385:
				{
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					if (field.equals("testSameArray")) 
					{
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/utest/test/utest/TestAssert.hx"
						this.testSameArray();
					}
					
					//line 7 "/shared/utest/test/utest/TestAssert.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/utest/test/utest/TestAssert.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/utest/test/utest/TestAssert.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 7 "/shared/utest/test/utest/TestAssert.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 7 "/shared/utest/test/utest/TestAssert.hx"
		baseArr.push("sub");
		//line 7 "/shared/utest/test/utest/TestAssert.hx"
		baseArr.push("value");
		//line 7 "/shared/utest/test/utest/TestAssert.hx"
		baseArr.push("results");
		//line 7 "/shared/utest/test/utest/TestAssert.hx"
		baseArr.push("resultsbypass");
		//line 7 "/shared/utest/test/utest/TestAssert.hx"
		baseArr.push("x");
		//line 7 "/shared/utest/test/utest/TestAssert.hx"
		{
			//line 7 "/shared/utest/test/utest/TestAssert.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


