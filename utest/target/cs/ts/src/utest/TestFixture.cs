// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace utest {
	public class TestFixture : global::haxe.lang.HxObject {
		
		public TestFixture(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestFixture(object target, string method, string setup, string teardown) {
			global::utest.TestFixture.__hx_ctor_utest_TestFixture(this, target, method, setup, teardown);
		}
		
		
		public static void __hx_ctor_utest_TestFixture(global::utest.TestFixture __temp_me51, object target, string method, string setup, string teardown) {
			__temp_me51.target = target;
			__temp_me51.method = method;
			__temp_me51.setup = setup;
			__temp_me51.teardown = teardown;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::utest.TestFixture(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			unchecked {
				return new global::utest.TestFixture(arr[0], global::haxe.lang.Runtime.toString(arr[1]), global::haxe.lang.Runtime.toString(arr[2]), global::haxe.lang.Runtime.toString(arr[3]));
			}
		}
		
		
		public object target;
		
		public string method;
		
		public string setup;
		
		public string teardown;
		
		public virtual void checkMethod(string name, string arg) {
			object field = global::Reflect.field(this.target, name);
			if (( field == null )) {
				throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(arg, " function "), name), " is not a field of target"));
			}
			
			if ( ! (( field is global::haxe.lang.Function )) ) {
				throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(arg, " function "), name), " is not a function"));
			}
			
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 116192081:
					{
						this.target = ((object) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 26061316:
					{
						this.teardown = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 2049945213:
					{
						this.setup = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 156956385:
					{
						this.method = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 116192081:
					{
						this.target = ((object) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1802291657:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "checkMethod", 1802291657)) );
					}
					
					
					case 26061316:
					{
						return this.teardown;
					}
					
					
					case 2049945213:
					{
						return this.setup;
					}
					
					
					case 156956385:
					{
						return this.method;
					}
					
					
					case 116192081:
					{
						return this.target;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 116192081:
					{
						return ((double) (global::haxe.lang.Runtime.toDouble(this.target)) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1802291657:
					{
						this.checkMethod(global::haxe.lang.Runtime.toString(dynargs[0]), global::haxe.lang.Runtime.toString(dynargs[1]));
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("teardown");
			baseArr.push("setup");
			baseArr.push("method");
			baseArr.push("target");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}


