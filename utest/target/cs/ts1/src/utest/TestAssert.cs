// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace utest {
	public class TestAssert : global::haxe.lang.HxObject {
		
		public TestAssert(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestAssert(int i) {
			global::utest.TestAssert.__hx_ctor_utest_TestAssert(this, i);
		}
		
		
		public static void __hx_ctor_utest_TestAssert(global::utest.TestAssert __temp_me49, int i) {
			__temp_me49.x = i;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::utest.TestAssert(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::utest.TestAssert(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ));
		}
		
		
		public int x;
		
		public global::List<object> resultsbypass;
		
		public global::List<object> results;
		
		public virtual void bypass() {
			this.resultsbypass = global::utest.Assert.results;
			global::utest.Assert.results = new global::List<object>();
		}
		
		
		public virtual void restore() {
			this.results = global::utest.Assert.results;
			global::utest.Assert.results = this.resultsbypass;
		}
		
		
		public virtual void testBooleans() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					this.bypass();
					global::utest.Assert.isTrue(true, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBooleans", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (28) )}));
					global::utest.Assert.isTrue(false, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBooleans", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (29) )}));
					global::utest.Assert.isFalse(true, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBooleans", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (30) )}));
					global::utest.Assert.isFalse(false, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBooleans", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (31) )}));
					this.restore();
					this.expect(2, 2, default(global::haxe.lang.Null<int>));
				}
				
			}
		}
		
		
		public virtual void testNullity() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					this.bypass();
					global::utest.Assert.isNull(null, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNullity", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (39) )}));
					global::utest.Assert.isNull(0, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNullity", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (40) )}));
					global::utest.Assert.isNull(0.0, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNullity", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (41) )}));
					global::utest.Assert.isNull(0.1, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNullity", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (42) )}));
					global::utest.Assert.isNull(1, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNullity", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (43) )}));
					global::utest.Assert.isNull("", null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNullity", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (44) )}));
					global::utest.Assert.isNull("a", null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNullity", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (45) )}));
					global::utest.Assert.isNull(global::Math.NaN, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNullity", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (46) )}));
					global::utest.Assert.isNull(global::Math.POSITIVE_INFINITY, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNullity", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (47) )}));
					global::utest.Assert.isNull(true, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNullity", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (48) )}));
					global::utest.Assert.isNull(false, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNullity", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (49) )}));
					this.restore();
					this.expect(1, 10, default(global::haxe.lang.Null<int>));
				}
				
			}
		}
		
		
		public virtual void testNoNullity() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					this.bypass();
					global::utest.Assert.notNull(null, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNoNullity", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (57) )}));
					global::utest.Assert.notNull(0, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNoNullity", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (58) )}));
					global::utest.Assert.notNull(0.0, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNoNullity", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (59) )}));
					global::utest.Assert.notNull(0.1, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNoNullity", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (60) )}));
					global::utest.Assert.notNull(1, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNoNullity", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (61) )}));
					global::utest.Assert.notNull("", null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNoNullity", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (62) )}));
					global::utest.Assert.notNull("a", null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNoNullity", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (63) )}));
					global::utest.Assert.notNull(global::Math.NaN, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNoNullity", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (64) )}));
					global::utest.Assert.notNull(global::Math.POSITIVE_INFINITY, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNoNullity", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (65) )}));
					global::utest.Assert.notNull(true, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNoNullity", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (66) )}));
					global::utest.Assert.notNull(false, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNoNullity", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (67) )}));
					this.restore();
					this.expect(10, 1, default(global::haxe.lang.Null<int>));
				}
				
			}
		}
		
		
		public virtual void testRaises() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					this.bypass();
					global::Array errors = new global::Array<object>(new object[]{"e", 1, 0.1, new global::utest.TestAssert(((int) (this.x) )), new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{}, new double[]{}), new global::Array<object>(new object[]{1})});
					global::Array types = new global::Array<object>(new object[]{typeof(string), typeof(int), typeof(double), typeof(global::utest.TestAssert), typeof(object), typeof(global::Array<object>)});
					int i = 0;
					{
						int _g2 = 0;
						while (( global::haxe.lang.Runtime.compare(_g2, ((int) (global::haxe.lang.Runtime.getField_f(errors, "length", 520590566, true)) )) < 0 )) {
							object error = errors[_g2];
							 ++ _g2;
							{
								int _g3 = 0;
								while (( global::haxe.lang.Runtime.compare(_g3, ((int) (global::haxe.lang.Runtime.getField_f(types, "length", 520590566, true)) )) < 0 )) {
									object type = types[_g3];
									 ++ _g3;
									 ++ i;
									global::utest.Assert.raises(new global::utest.TestAssert_testRaises_82__Fun(error), ((global::System.Type) (type) ), null, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRaises", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (82) )}));
								}
								
							}
							
						}
						
					}
					
					this.restore();
					this.expect(12, ( i - 12 ), default(global::haxe.lang.Null<int>));
				}
				
			}
		}
		
		
		public virtual void testIs() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					this.bypass();
					global::Array values = new global::Array<object>(new object[]{"e", 1, 0.1, new global::utest.TestAssert(((int) (this.x) )), new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{}, new double[]{}), new global::Array<object>(new object[]{1})});
					global::Array types = new global::Array<object>(new object[]{typeof(string), typeof(int), typeof(double), typeof(global::utest.TestAssert), typeof(object), typeof(global::Array<object>)});
					int i = 0;
					{
						int _g2 = 0;
						while (( global::haxe.lang.Runtime.compare(_g2, ((int) (global::haxe.lang.Runtime.getField_f(values, "length", 520590566, true)) )) < 0 )) {
							object @value = values[_g2];
							 ++ _g2;
							{
								int _g3 = 0;
								while (( global::haxe.lang.Runtime.compare(_g3, ((int) (global::haxe.lang.Runtime.getField_f(types, "length", 520590566, true)) )) < 0 )) {
									object type = types[_g3];
									 ++ _g3;
									 ++ i;
									global::utest.Assert.@is(@value, type, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIs", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (98) )}));
								}
								
							}
							
						}
						
					}
					
					this.restore();
					this.expect(12, ( i - 12 ), default(global::haxe.lang.Null<int>));
				}
				
			}
		}
		
		
		public virtual void testSamePrimitive() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					this.bypass();
					global::utest.Assert.same(null, 1, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSamePrimitive", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (107) )}));
					global::utest.Assert.same(1, 1, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSamePrimitive", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (108) )}));
					global::utest.Assert.same(1, "1", default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSamePrimitive", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (109) )}));
					global::utest.Assert.same("a", "a", default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSamePrimitive", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (110) )}));
					global::utest.Assert.same(null, "", default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSamePrimitive", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (111) )}));
					global::utest.Assert.same(new global::Date(2000, 0, 1, 0, 0, 0), null, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSamePrimitive", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (112) )}));
					global::haxe.ds.IntMap<object> _g2 = new global::haxe.ds.IntMap<object>();
					_g2.@set(1, "a");
					_g2.@set(2, "b");
					global::haxe.ds.IntMap<object> _g3 = new global::haxe.ds.IntMap<object>();
					_g3.@set(1, "a");
					_g3.@set(2, "b");
					global::utest.Assert.same(_g2, _g3, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSamePrimitive", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (113) )}));
					global::haxe.ds.StringMap<int> _g4 = new global::haxe.ds.StringMap<int>();
					_g4.@set("a", 1);
					global::haxe.ds.StringMap<int> _g5 = new global::haxe.ds.StringMap<int>();
					_g5.@set("a", 1);
					global::utest.Assert.same(_g4, _g5, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSamePrimitive", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (114) )}));
					global::haxe.ds.StringMap<int> _g6 = new global::haxe.ds.StringMap<int>();
					_g6.@set("a", 1);
					global::haxe.ds.IntMap<int> _g7 = new global::haxe.ds.IntMap<int>();
					_g7.@set(1, 1);
					global::utest.Assert.same(_g6, _g7, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSamePrimitive", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (115) )}));
					global::haxe.ds.IntMap<object> _g8 = new global::haxe.ds.IntMap<object>();
					_g8.@set(1, "a");
					global::haxe.ds.IntMap<object> _g9 = new global::haxe.ds.IntMap<object>();
					_g9.@set(1, "a");
					_g9.@set(2, "b");
					global::utest.Assert.same(_g8, _g9, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSamePrimitive", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (116) )}));
					this.restore();
					this.expect(5, 6, default(global::haxe.lang.Null<int>));
				}
				
			}
		}
		
		
		public virtual void testSameType() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					this.bypass();
					global::utest.Assert.same(null, new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{}, new double[]{}), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameType", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (127) )}));
					global::utest.Assert.same(null, null, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameType", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (128) )}));
					global::utest.Assert.same(new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{}, new double[]{}), null, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameType", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (129) )}));
					global::utest.Assert.same(new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{}, new double[]{}), 1, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameType", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (130) )}));
					global::utest.Assert.same(new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{}, new double[]{}), new global::Array<object>(new object[]{}), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameType", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (131) )}));
					global::utest.Assert.same(null, global::utest._TestAssert.Sample.None, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameType", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (132) )}));
					global::utest.Assert.same(global::utest._TestAssert.Sample.None, null, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameType", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (133) )}));
					this.restore();
					this.expect(1, 6, default(global::haxe.lang.Null<int>));
				}
				
			}
		}
		
		
		public virtual void testSameArray() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					this.bypass();
					global::utest.Assert.same(new global::Array<object>(new object[]{}), new global::Array<object>(new object[]{}), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameArray", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (142) )}));
					global::utest.Assert.same(new global::Array<object>(new object[]{1}), new global::Array<object>(new object[]{"1"}), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameArray", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (143) )}));
					global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 3}), new global::Array<object>(new object[]{1, 2, 3}), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameArray", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (144) )}));
					global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 3}), new global::Array<object>(new object[]{1, 2}), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameArray", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (145) )}));
					global::utest.Assert.same(new global::Array<object>(new object[]{1, 2}), new global::Array<object>(new object[]{1, 2, 3}), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameArray", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (146) )}));
					global::utest.Assert.same(new global::Array<object>(new object[]{1, new global::Array<object>(new object[]{1, 2})}), new global::Array<object>(new object[]{1, new global::Array<object>(new object[]{1, 2})}), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameArray", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (147) )}));
					global::utest.Assert.same(new global::Array<object>(new object[]{1, new global::Array<object>(new object[]{1, 2})}), new global::Array<object>(new object[]{1, new global::Array<object>(new object[]{})}), new global::haxe.lang.Null<bool>(false, true), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameArray", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (148) )}));
					global::utest.Assert.same(new global::Array<object>(new object[]{1, new global::Array<object>(new object[]{1, 2})}), new global::Array<object>(new object[]{1, new global::Array<object>(new object[]{})}), new global::haxe.lang.Null<bool>(true, true), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameArray", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (149) )}));
					this.restore();
					this.expect(4, 4, default(global::haxe.lang.Null<int>));
				}
				
			}
		}
		
		
		public virtual void testSameObject() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					this.bypass();
					global::utest.Assert.same(new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{}, new double[]{}), new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{}, new double[]{}), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameObject", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (158) )}));
					global::utest.Assert.same(new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{97}, new double[]{((double) (1) )}), new global::haxe.lang.DynamicObject(new int[]{97}, new object[]{"1"}, new int[]{}, new double[]{}), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameObject", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (159) )}));
					global::utest.Assert.same(new global::haxe.lang.DynamicObject(new int[]{98}, new object[]{"c"}, new int[]{97}, new double[]{((double) (1) )}), new global::haxe.lang.DynamicObject(new int[]{98}, new object[]{"c"}, new int[]{97}, new double[]{((double) (1) )}), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameObject", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (160) )}));
					global::utest.Assert.same(new global::haxe.lang.DynamicObject(new int[]{98}, new object[]{"c"}, new int[]{97}, new double[]{((double) (1) )}), new global::haxe.lang.DynamicObject(new int[]{99}, new object[]{"c"}, new int[]{97}, new double[]{((double) (1) )}), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameObject", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (161) )}));
					global::utest.Assert.same(new global::haxe.lang.DynamicObject(new int[]{98}, new object[]{"c"}, new int[]{97}, new double[]{((double) (1) )}), new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{97}, new double[]{((double) (1) )}), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameObject", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (162) )}));
					object __temp_stmt7 = null;
					{
						object __temp_odecl1 = new global::haxe.lang.DynamicObject(new int[]{99}, new object[]{"c"}, new int[]{97}, new double[]{((double) (1) )});
						__temp_stmt7 = new global::haxe.lang.DynamicObject(new int[]{98}, new object[]{__temp_odecl1}, new int[]{97}, new double[]{((double) (1) )});
					}
					
					object __temp_stmt8 = null;
					{
						object __temp_odecl2 = new global::haxe.lang.DynamicObject(new int[]{99}, new object[]{"c"}, new int[]{97}, new double[]{((double) (1) )});
						__temp_stmt8 = new global::haxe.lang.DynamicObject(new int[]{98}, new object[]{__temp_odecl2}, new int[]{97}, new double[]{((double) (1) )});
					}
					
					global::utest.Assert.same(__temp_stmt7, __temp_stmt8, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameObject", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (163) )}));
					object __temp_stmt9 = null;
					{
						object __temp_odecl3 = new global::haxe.lang.DynamicObject(new int[]{99}, new object[]{"c"}, new int[]{97}, new double[]{((double) (1) )});
						__temp_stmt9 = new global::haxe.lang.DynamicObject(new int[]{98}, new object[]{__temp_odecl3}, new int[]{97}, new double[]{((double) (1) )});
					}
					
					object __temp_stmt10 = null;
					{
						object __temp_odecl4 = new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{}, new double[]{});
						__temp_stmt10 = new global::haxe.lang.DynamicObject(new int[]{98}, new object[]{__temp_odecl4}, new int[]{97}, new double[]{((double) (1) )});
					}
					
					global::utest.Assert.same(__temp_stmt9, __temp_stmt10, new global::haxe.lang.Null<bool>(false, true), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameObject", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (164) )}));
					object __temp_stmt11 = null;
					{
						object __temp_odecl5 = new global::haxe.lang.DynamicObject(new int[]{99}, new object[]{"c"}, new int[]{97}, new double[]{((double) (1) )});
						__temp_stmt11 = new global::haxe.lang.DynamicObject(new int[]{98}, new object[]{__temp_odecl5}, new int[]{97}, new double[]{((double) (1) )});
					}
					
					object __temp_stmt12 = null;
					{
						object __temp_odecl6 = new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{}, new double[]{});
						__temp_stmt12 = new global::haxe.lang.DynamicObject(new int[]{98}, new object[]{__temp_odecl6}, new int[]{97}, new double[]{((double) (1) )});
					}
					
					global::utest.Assert.same(__temp_stmt11, __temp_stmt12, new global::haxe.lang.Null<bool>(true, true), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameObject", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (165) )}));
					this.restore();
					this.expect(4, 4, default(global::haxe.lang.Null<int>));
				}
				
			}
		}
		
		
		public string @value;
		
		public global::utest.TestAssert sub;
		
		public virtual void testSameInstance() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.TestAssert c1 = new global::utest.TestAssert(((int) (this.x) ));
					c1.@value = "a";
					global::utest.TestAssert c2 = new global::utest.TestAssert(((int) (this.x) ));
					c2.@value = "a";
					global::utest.TestAssert c3 = new global::utest.TestAssert(((int) (this.x) ));
					global::utest.TestAssert r1 = new global::utest.TestAssert(((int) (this.x) ));
					r1.sub = c1;
					global::utest.TestAssert r2 = new global::utest.TestAssert(((int) (this.x) ));
					r2.sub = c2;
					global::utest.TestAssert r3 = new global::utest.TestAssert(((int) (this.x) ));
					r3.sub = c3;
					this.bypass();
					global::utest.Assert.same(c1, c1, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameInstance", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (190) )}));
					global::utest.Assert.same(c1, c2, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameInstance", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (191) )}));
					global::utest.Assert.same(c1, c3, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameInstance", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (192) )}));
					global::utest.Assert.same(r1, r2, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameInstance", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (194) )}));
					global::utest.Assert.same(r1, r3, new global::haxe.lang.Null<bool>(false, true), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameInstance", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (195) )}));
					global::utest.Assert.same(r1, r3, new global::haxe.lang.Null<bool>(true, true), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameInstance", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (196) )}));
					this.restore();
					this.expect(4, 2, default(global::haxe.lang.Null<int>));
				}
				
			}
		}
		
		
		public virtual void testSameIterable() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::List list1 = new global::List<object>();
					global::haxe.lang.Runtime.callField(list1, "add", 4846113, new global::Array<object>(new object[]{"a"}));
					global::haxe.lang.Runtime.callField(list1, "add", 4846113, new global::Array<object>(new object[]{1}));
					global::List<int> s1 = new global::List<int>();
					s1.@add(2);
					global::haxe.lang.Runtime.callField(list1, "add", 4846113, new global::Array<object>(new object[]{s1}));
					global::List list2 = new global::List<object>();
					global::haxe.lang.Runtime.callField(list2, "add", 4846113, new global::Array<object>(new object[]{"a"}));
					global::haxe.lang.Runtime.callField(list2, "add", 4846113, new global::Array<object>(new object[]{1}));
					global::haxe.lang.Runtime.callField(list2, "add", 4846113, new global::Array<object>(new object[]{s1}));
					global::List list3 = new global::List<object>();
					global::haxe.lang.Runtime.callField(list3, "add", 4846113, new global::Array<object>(new object[]{"a"}));
					global::haxe.lang.Runtime.callField(list3, "add", 4846113, new global::Array<object>(new object[]{1}));
					global::haxe.lang.Runtime.callField(list3, "add", 4846113, new global::Array<object>(new object[]{new global::List<object>()}));
					this.bypass();
					global::utest.Assert.same(list1, list2, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameIterable", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (220) )}));
					global::utest.Assert.same(list1, list3, new global::haxe.lang.Null<bool>(false, true), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameIterable", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (221) )}));
					global::utest.Assert.same(list1, list3, new global::haxe.lang.Null<bool>(true, true), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameIterable", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (222) )}));
					global::utest.Assert.same(new global::IntIterator(0, 3), new global::IntIterator(0, 3), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameIterable", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (224) )}));
					global::utest.Assert.same(new global::IntIterator(0, 3), new global::IntIterator(0, 4), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameIterable", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (225) )}));
					this.restore();
					this.expect(3, 2, default(global::haxe.lang.Null<int>));
				}
				
			}
		}
		
		
		public virtual void testSameEnums() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					this.bypass();
					global::utest.Assert.same(global::utest._TestAssert.Sample.None, global::utest._TestAssert.Sample.None, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameEnums", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (263) )}));
					global::utest.Assert.same(global::utest._TestAssert.Sample.Some("a"), global::utest._TestAssert.Sample.Some("a"), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameEnums", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (264) )}));
					global::utest.Assert.same(global::utest._TestAssert.Sample.Some("a"), global::utest._TestAssert.Sample.Some("b"), new global::haxe.lang.Null<bool>(true, true), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameEnums", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (265) )}));
					global::utest.Assert.same(global::utest._TestAssert.Sample.Some("a"), global::utest._TestAssert.Sample.Some("b"), new global::haxe.lang.Null<bool>(false, true), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameEnums", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (266) )}));
					global::utest.Assert.same(global::utest._TestAssert.Sample.Some("a"), global::utest._TestAssert.Sample.None, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameEnums", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (267) )}));
					global::utest.Assert.same(global::utest._TestAssert.Sample.Rec(global::utest._TestAssert.Sample.Rec(global::utest._TestAssert.Sample.Some("a"))), global::utest._TestAssert.Sample.Rec(global::utest._TestAssert.Sample.Rec(global::utest._TestAssert.Sample.Some("a"))), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameEnums", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (268) )}));
					global::utest.Assert.same(global::utest._TestAssert.Sample.Rec(global::utest._TestAssert.Sample.Rec(global::utest._TestAssert.Sample.Some("a"))), global::utest._TestAssert.Sample.Rec(global::utest._TestAssert.Sample.None), new global::haxe.lang.Null<bool>(true, true), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameEnums", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (269) )}));
					global::utest.Assert.same(global::utest._TestAssert.Sample.Rec(global::utest._TestAssert.Sample.Rec(global::utest._TestAssert.Sample.Some("a"))), global::utest._TestAssert.Sample.Rec(global::utest._TestAssert.Sample.Rec(global::utest._TestAssert.Sample.None)), new global::haxe.lang.Null<bool>(false, true), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameEnums", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (272) )}));
					this.restore();
					this.expect(4, 4, default(global::haxe.lang.Null<int>));
				}
				
			}
		}
		
		
		public virtual void testEquals() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					this.bypass();
					global::Array values = new global::Array<object>(new object[]{"e", 1, 0.1, new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{}, new double[]{})});
					global::Array expecteds = new global::Array<object>(new object[]{"e", 1, 0.1, new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{}, new double[]{})});
					int i = 0;
					{
						int _g2 = 0;
						while (( global::haxe.lang.Runtime.compare(_g2, ((int) (global::haxe.lang.Runtime.getField_f(expecteds, "length", 520590566, true)) )) < 0 )) {
							object expected = expecteds[_g2];
							 ++ _g2;
							{
								int _g3 = 0;
								while (( global::haxe.lang.Runtime.compare(_g3, ((int) (global::haxe.lang.Runtime.getField_f(values, "length", 520590566, true)) )) < 0 )) {
									object @value = values[_g3];
									 ++ _g3;
									 ++ i;
									global::utest.Assert.@equals(expected, @value, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (293) )}));
								}
								
							}
							
						}
						
					}
					
					this.restore();
					this.expect(3, ( i - 3 ), default(global::haxe.lang.Null<int>));
				}
				
			}
		}
		
		
		public virtual void testFloatEquals() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					this.bypass();
					global::Array<double> values = new global::Array<double>(new double[]{((double) (1) ), 0.1, 0.000000000000000000000000000011, global::Math.NaN, global::Math.NEGATIVE_INFINITY, global::Math.POSITIVE_INFINITY, global::Math.PI, 0.11});
					global::Array<double> expecteds = new global::Array<double>(new double[]{((double) (1) ), 0.1, 0.000000000000000000000000000012, global::Math.NaN, global::Math.NEGATIVE_INFINITY, global::Math.POSITIVE_INFINITY, global::Math.PI, 0.12});
					int i = 0;
					{
						int _g2 = 0;
						while (( _g2 < expecteds.length )) {
							double expected = expecteds[_g2];
							 ++ _g2;
							{
								int _g3 = 0;
								while (( _g3 < values.length )) {
									double @value = values[_g3];
									 ++ _g3;
									 ++ i;
									global::utest.Assert.floatEquals(expected, @value, default(global::haxe.lang.Null<double>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFloatEquals", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (309) )}));
								}
								
							}
							
						}
						
					}
					
					this.restore();
					this.expect(7, ( i - 7 ), default(global::haxe.lang.Null<int>));
				}
				
			}
		}
		
		
		public virtual void testPass() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					this.bypass();
					global::utest.Assert.pass(null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPass", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (318) )}));
					this.restore();
					this.expect(1, 0, default(global::haxe.lang.Null<int>));
				}
				
			}
		}
		
		
		public virtual void testFail() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					this.bypass();
					global::utest.Assert.fail(null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFail", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (326) )}));
					this.restore();
					this.expect(0, 1, default(global::haxe.lang.Null<int>));
				}
				
			}
		}
		
		
		public virtual void testWarn() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					this.bypass();
					global::utest.Assert.warn("");
					this.restore();
					this.expect(0, 0, new global::haxe.lang.Null<int>(1, true));
				}
				
			}
		}
		
		
		public virtual void expect(int esuccesses, int efailures, global::haxe.lang.Null<int> eothers) {
			unchecked {
				int __temp_eothers48 = ( ( ! (eothers.hasValue) ) ? (0) : ((eothers).@value) );
				int failures = 0;
				int others = 0;
				{
					global::_List.ListNode<object> _g_head = this.results.h;
					while (( _g_head != null )) {
						global::utest.Assertation val = ((global::utest.Assertation) (_g_head.item) );
						_g_head = _g_head.next;
						switch (val.index) {
							case 0:
							{
								break;
							}
							
							
							case 1:
							{
								 ++ failures;
								break;
							}
							
							
							default:
							{
								 ++ others;
								break;
							}
							
						}
						
					}
					
				}
				
				global::utest.Assert.@equals(__temp_eothers48, others, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::haxe.lang.Runtime.toString(__temp_eothers48)), " other results but were "), global::haxe.lang.Runtime.toString(others)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"expect", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (353) )}));
				global::utest.Assert.@equals(efailures, failures, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::haxe.lang.Runtime.toString(efailures)), " failures but were "), global::haxe.lang.Runtime.toString(failures)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"expect", "utest.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (356) )}));
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 5745024:
					{
						this.sub = ((global::utest.TestAssert) (@value) );
						return @value;
					}
					
					
					case 834174833:
					{
						this.@value = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 1800886518:
					{
						this.results = ((global::List<object>) (global::List<object>.__hx_cast<object>(((global::List) (@value) ))) );
						return @value;
					}
					
					
					case 30467998:
					{
						this.resultsbypass = ((global::List<object>) (global::List<object>.__hx_cast<object>(((global::List) (@value) ))) );
						return @value;
					}
					
					
					case 120:
					{
						this.x = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1148579289:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "expect", 1148579289)) );
					}
					
					
					case 1378150328:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testWarn", 1378150328)) );
					}
					
					
					case 1189625680:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFail", 1189625680)) );
					}
					
					
					case 1300523587:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testPass", 1300523587)) );
					}
					
					
					case 1004745161:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFloatEquals", 1004745161)) );
					}
					
					
					case 1491547185:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testEquals", 1491547185)) );
					}
					
					
					case 1009618522:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSameEnums", 1009618522)) );
					}
					
					
					case 1136065450:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSameIterable", 1136065450)) );
					}
					
					
					case 168524941:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSameInstance", 168524941)) );
					}
					
					
					case 5745024:
					{
						return this.sub;
					}
					
					
					case 834174833:
					{
						return this.@value;
					}
					
					
					case 2066099639:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSameObject", 2066099639)) );
					}
					
					
					case 1899349409:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSameArray", 1899349409)) );
					}
					
					
					case 1519612850:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSameType", 1519612850)) );
					}
					
					
					case 473924783:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSamePrimitive", 473924783)) );
					}
					
					
					case 1429881052:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testIs", 1429881052)) );
					}
					
					
					case 1296084985:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testRaises", 1296084985)) );
					}
					
					
					case 236601620:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testNoNullity", 236601620)) );
					}
					
					
					case 1505554389:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testNullity", 1505554389)) );
					}
					
					
					case 873828157:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testBooleans", 873828157)) );
					}
					
					
					case 1789945678:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "restore", 1789945678)) );
					}
					
					
					case 617050664:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "bypass", 617050664)) );
					}
					
					
					case 1800886518:
					{
						return this.results;
					}
					
					
					case 30467998:
					{
						return this.resultsbypass;
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						return ((double) (this.x) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1148579289:
					{
						this.expect(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ), global::haxe.lang.Null<object>.ofDynamic<int>(dynargs[2]));
						break;
					}
					
					
					case 1378150328:
					{
						this.testWarn();
						break;
					}
					
					
					case 1189625680:
					{
						this.testFail();
						break;
					}
					
					
					case 1300523587:
					{
						this.testPass();
						break;
					}
					
					
					case 1004745161:
					{
						this.testFloatEquals();
						break;
					}
					
					
					case 1491547185:
					{
						this.testEquals();
						break;
					}
					
					
					case 1009618522:
					{
						this.testSameEnums();
						break;
					}
					
					
					case 1136065450:
					{
						this.testSameIterable();
						break;
					}
					
					
					case 168524941:
					{
						this.testSameInstance();
						break;
					}
					
					
					case 2066099639:
					{
						this.testSameObject();
						break;
					}
					
					
					case 1899349409:
					{
						this.testSameArray();
						break;
					}
					
					
					case 1519612850:
					{
						this.testSameType();
						break;
					}
					
					
					case 473924783:
					{
						this.testSamePrimitive();
						break;
					}
					
					
					case 1429881052:
					{
						this.testIs();
						break;
					}
					
					
					case 1296084985:
					{
						this.testRaises();
						break;
					}
					
					
					case 236601620:
					{
						this.testNoNullity();
						break;
					}
					
					
					case 1505554389:
					{
						this.testNullity();
						break;
					}
					
					
					case 873828157:
					{
						this.testBooleans();
						break;
					}
					
					
					case 1789945678:
					{
						this.restore();
						break;
					}
					
					
					case 617050664:
					{
						this.bypass();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("sub");
			baseArr.push("value");
			baseArr.push("results");
			baseArr.push("resultsbypass");
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace utest {
	public class TestAssert_testRaises_82__Fun : global::haxe.lang.Function {
		
		public TestAssert_testRaises_82__Fun(object error) : base(0, 0) {
			this.error = error;
		}
		
		
		public override object __hx_invoke0_o() {
			throw global::haxe.lang.HaxeException.wrap(this.error);
		}
		
		
		public object error;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace utest._TestAssert {
	public class Sample : global::haxe.lang.ParamEnum {
		
		public Sample(int index, object[] @params) : base(index, @params) {
		}
		
		
		public static readonly string[] __hx_constructs = new string[]{"None", "Some", "Rec"};
		
		public static readonly global::utest._TestAssert.Sample None = new global::utest._TestAssert.Sample(0, null);
		
		public static global::utest._TestAssert.Sample Some(string s) {
			unchecked {
				return new global::utest._TestAssert.Sample(1, new object[]{s});
			}
		}
		
		
		public static global::utest._TestAssert.Sample Rec(global::utest._TestAssert.Sample s) {
			unchecked {
				return new global::utest._TestAssert.Sample(2, new object[]{s});
			}
		}
		
		
		public override string getTag() {
			return global::utest._TestAssert.Sample.__hx_constructs[this.index];
		}
		
		
	}
}


