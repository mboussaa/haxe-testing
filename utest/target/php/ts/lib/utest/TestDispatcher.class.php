<?php

// Generated by Haxe 3.3.0
class utest_TestDispatcher {
	public function __construct() {}
	public function testBase() {
		$dispatcher = new utest_Dispatcher();
		$tmp = $dispatcher->has();
		utest_Assert::isFalse($tmp, null, _hx_anonymous(array("fileName" => "TestDispatcher.hx", "lineNumber" => 12, "className" => "utest.TestDispatcher", "methodName" => "testBase")));
		$h = $dispatcher->add(array(new _hx_lambda(array(), "utest_TestDispatcher_0"), 'execute'));
		$tmp1 = $dispatcher->has();
		utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestDispatcher.hx", "lineNumber" => 14, "className" => "utest.TestDispatcher", "methodName" => "testBase")));
		$dispatcher->remove($h);
		$tmp2 = $dispatcher->has();
		utest_Assert::isFalse($tmp2, null, _hx_anonymous(array("fileName" => "TestDispatcher.hx", "lineNumber" => 16, "className" => "utest.TestDispatcher", "methodName" => "testBase")));
	}
	public $v;
	public function handler1($s) {
		$this->v .= _hx_string_or_null($s) . "e1";
	}
	public function handler2($s) {
		$this->v .= _hx_string_or_null($s) . "e2";
	}
	public function testHandlers() {
		$dispatcher = new utest_Dispatcher();
		$this->v = "";
		$dispatcher->dispatch("d1");
		utest_Assert::equals("", $this->v, null, _hx_anonymous(array("fileName" => "TestDispatcher.hx", "lineNumber" => 32, "className" => "utest.TestDispatcher", "methodName" => "testHandlers")));
		$this->v = "";
		$dispatcher->add((isset($this->handler1) ? $this->handler1: array($this, "handler1")));
		$dispatcher->dispatch("d2");
		utest_Assert::equals("d2e1", $this->v, null, _hx_anonymous(array("fileName" => "TestDispatcher.hx", "lineNumber" => 37, "className" => "utest.TestDispatcher", "methodName" => "testHandlers")));
		$this->v = "";
		$dispatcher->add((isset($this->handler2) ? $this->handler2: array($this, "handler2")));
		$dispatcher->dispatch("d3");
		utest_Assert::equals("d3e1d3e2", $this->v, null, _hx_anonymous(array("fileName" => "TestDispatcher.hx", "lineNumber" => 42, "className" => "utest.TestDispatcher", "methodName" => "testHandlers")));
		$this->v = "";
		$dispatcher->add((isset($this->handler1) ? $this->handler1: array($this, "handler1")));
		$dispatcher->dispatch("d4");
		utest_Assert::equals("d4e1d4e2d4e1", $this->v, null, _hx_anonymous(array("fileName" => "TestDispatcher.hx", "lineNumber" => 47, "className" => "utest.TestDispatcher", "methodName" => "testHandlers")));
		$this->v = "";
		$dispatcher->remove((isset($this->handler1) ? $this->handler1: array($this, "handler1")));
		$dispatcher->dispatch("d5");
		utest_Assert::equals("d5e2d5e1", $this->v, null, _hx_anonymous(array("fileName" => "TestDispatcher.hx", "lineNumber" => 52, "className" => "utest.TestDispatcher", "methodName" => "testHandlers")));
		$this->v = "";
		$dispatcher->remove((isset($this->handler1) ? $this->handler1: array($this, "handler1")));
		$dispatcher->dispatch("d6");
		utest_Assert::equals("d6e2", $this->v, null, _hx_anonymous(array("fileName" => "TestDispatcher.hx", "lineNumber" => 57, "className" => "utest.TestDispatcher", "methodName" => "testHandlers")));
		$this->v = "";
		$dispatcher->remove((isset($this->handler2) ? $this->handler2: array($this, "handler2")));
		$dispatcher->dispatch("d7");
		utest_Assert::equals("", $this->v, null, _hx_anonymous(array("fileName" => "TestDispatcher.hx", "lineNumber" => 62, "className" => "utest.TestDispatcher", "methodName" => "testHandlers")));
	}
	public function stopper($s) {
		$this->v .= _hx_string_or_null($s) . "s";
		utest_Dispatcher::stop();
	}
	public function testStop() {
		$dispatcher = new utest_Dispatcher();
		$this->v = "";
		$dispatcher->add((isset($this->handler1) ? $this->handler1: array($this, "handler1")));
		$dispatcher->add((isset($this->stopper) ? $this->stopper: array($this, "stopper")));
		$dispatcher->add((isset($this->handler2) ? $this->handler2: array($this, "handler2")));
		$dispatcher->dispatch("d1");
		utest_Assert::equals("d1e1d1s", $this->v, null, _hx_anonymous(array("fileName" => "TestDispatcher.hx", "lineNumber" => 78, "className" => "utest.TestDispatcher", "methodName" => "testStop")));
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'utest.TestDispatcher'; }
}
function utest_TestDispatcher_0($x) {
	{}
}
