<?php

// Generated by Haxe 3.3.0
class utest_TestAssert {
	public function __construct() {}
	public $resultsbypass;
	public $results;
	public function bypass() {
		$this->resultsbypass = utest_Assert::$results;
		utest_Assert::$results = new HList();
	}
	public function restore() {
		$this->results = utest_Assert::$results;
		utest_Assert::$results = $this->resultsbypass;
	}
	public function testBooleans() {
		$this->bypass();
		utest_Assert::isTrue(true, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 24, "className" => "utest.TestAssert", "methodName" => "testBooleans")));
		utest_Assert::isTrue(false, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 25, "className" => "utest.TestAssert", "methodName" => "testBooleans")));
		utest_Assert::isFalse(true, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 26, "className" => "utest.TestAssert", "methodName" => "testBooleans")));
		utest_Assert::isFalse(false, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 27, "className" => "utest.TestAssert", "methodName" => "testBooleans")));
		$this->restore();
		$this->expect(2, 2, null);
	}
	public function testNullity() {
		$this->bypass();
		utest_Assert::isNull(null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 34, "className" => "utest.TestAssert", "methodName" => "testNullity")));
		utest_Assert::isNull(0, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 35, "className" => "utest.TestAssert", "methodName" => "testNullity")));
		utest_Assert::isNull(0.0, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 36, "className" => "utest.TestAssert", "methodName" => "testNullity")));
		utest_Assert::isNull(0.1, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 37, "className" => "utest.TestAssert", "methodName" => "testNullity")));
		utest_Assert::isNull(1, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 38, "className" => "utest.TestAssert", "methodName" => "testNullity")));
		utest_Assert::isNull("", null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 39, "className" => "utest.TestAssert", "methodName" => "testNullity")));
		utest_Assert::isNull("a", null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 40, "className" => "utest.TestAssert", "methodName" => "testNullity")));
		utest_Assert::isNull(Math::$NaN, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 41, "className" => "utest.TestAssert", "methodName" => "testNullity")));
		utest_Assert::isNull(Math::$POSITIVE_INFINITY, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 42, "className" => "utest.TestAssert", "methodName" => "testNullity")));
		utest_Assert::isNull(true, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 43, "className" => "utest.TestAssert", "methodName" => "testNullity")));
		utest_Assert::isNull(false, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 44, "className" => "utest.TestAssert", "methodName" => "testNullity")));
		$this->restore();
		$this->expect(1, 10, null);
	}
	public function testNoNullity() {
		$this->bypass();
		utest_Assert::notNull(null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 51, "className" => "utest.TestAssert", "methodName" => "testNoNullity")));
		utest_Assert::notNull(0, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 52, "className" => "utest.TestAssert", "methodName" => "testNoNullity")));
		utest_Assert::notNull(0.0, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 53, "className" => "utest.TestAssert", "methodName" => "testNoNullity")));
		utest_Assert::notNull(0.1, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 54, "className" => "utest.TestAssert", "methodName" => "testNoNullity")));
		utest_Assert::notNull(1, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 55, "className" => "utest.TestAssert", "methodName" => "testNoNullity")));
		utest_Assert::notNull("", null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 56, "className" => "utest.TestAssert", "methodName" => "testNoNullity")));
		utest_Assert::notNull("a", null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 57, "className" => "utest.TestAssert", "methodName" => "testNoNullity")));
		utest_Assert::notNull(Math::$NaN, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 58, "className" => "utest.TestAssert", "methodName" => "testNoNullity")));
		utest_Assert::notNull(Math::$POSITIVE_INFINITY, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 59, "className" => "utest.TestAssert", "methodName" => "testNoNullity")));
		utest_Assert::notNull(true, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 60, "className" => "utest.TestAssert", "methodName" => "testNoNullity")));
		utest_Assert::notNull(false, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 61, "className" => "utest.TestAssert", "methodName" => "testNoNullity")));
		$this->restore();
		$this->expect(10, 1, null);
	}
	public function testRaises() {
		$this->bypass();
		$errors = (new _hx_array(array("e", 1, 0.1, new utest_TestAssert(), _hx_anonymous(array()), (new _hx_array(array(1))))));
		$types = (new _hx_array(array(_hx_qtype("String"), _hx_qtype("Int"), _hx_qtype("Float"), _hx_qtype("utest.TestAssert"), _hx_qtype("Dynamic"), _hx_qtype("Array"))));
		$i = 0;
		{
			$_g = 0;
			while($_g < $errors->length) {
				$error = $errors[$_g];
				++$_g;
				{
					$_g1 = 0;
					while($_g1 < $types->length) {
						$type = $types[$_g1];
						++$_g1;
						++$i;
						utest_Assert::raises(array(new _hx_lambda(array(&$error), "utest_TestAssert_0"), 'execute'), $type, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 75, "className" => "utest.TestAssert", "methodName" => "testRaises")));
						unset($type);
					}
					unset($_g1);
				}
				unset($error);
			}
		}
		$this->restore();
		$this->expect(12, $i - 12, null);
	}
	public function testIs() {
		$this->bypass();
		$values = (new _hx_array(array("e", 1, 0.1, new utest_TestAssert(), _hx_anonymous(array()), (new _hx_array(array(1))))));
		$types = (new _hx_array(array(_hx_qtype("String"), _hx_qtype("Int"), _hx_qtype("Float"), _hx_qtype("utest.TestAssert"), _hx_qtype("Dynamic"), _hx_qtype("Array"))));
		$i = 0;
		{
			$_g = 0;
			while($_g < $values->length) {
				$value = $values[$_g];
				++$_g;
				{
					$_g1 = 0;
					while($_g1 < $types->length) {
						$type = $types[$_g1];
						++$_g1;
						++$i;
						utest_Assert::is($value, $type, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 90, "className" => "utest.TestAssert", "methodName" => "testIs")));
						unset($type);
					}
					unset($_g1);
				}
				unset($value);
			}
		}
		$this->restore();
		$this->expect(12, $i - 12, null);
	}
	public function testSamePrimitive() {
		$this->bypass();
		utest_Assert::same(null, 1, null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 98, "className" => "utest.TestAssert", "methodName" => "testSamePrimitive")));
		utest_Assert::same(1, 1, null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 99, "className" => "utest.TestAssert", "methodName" => "testSamePrimitive")));
		utest_Assert::same(1, "1", null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 100, "className" => "utest.TestAssert", "methodName" => "testSamePrimitive")));
		utest_Assert::same("a", "a", null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 101, "className" => "utest.TestAssert", "methodName" => "testSamePrimitive")));
		utest_Assert::same(null, "", null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 102, "className" => "utest.TestAssert", "methodName" => "testSamePrimitive")));
		utest_Assert::same(new Date(2000, 0, 1, 0, 0, 0), null, null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 103, "className" => "utest.TestAssert", "methodName" => "testSamePrimitive")));
		$_g = new haxe_ds_IntMap();
		$_g->set(1, "a");
		$_g->set(2, "b");
		$_g1 = new haxe_ds_IntMap();
		$_g1->set(1, "a");
		$_g1->set(2, "b");
		utest_Assert::same($_g, $_g1, null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 104, "className" => "utest.TestAssert", "methodName" => "testSamePrimitive")));
		$_g2 = new haxe_ds_StringMap();
		$_g2->set("a", 1);
		$_g3 = new haxe_ds_StringMap();
		$_g3->set("a", 1);
		utest_Assert::same($_g2, $_g3, null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 105, "className" => "utest.TestAssert", "methodName" => "testSamePrimitive")));
		$_g4 = new haxe_ds_StringMap();
		$_g4->set("a", 1);
		$_g5 = new haxe_ds_IntMap();
		$_g5->set(1, 1);
		utest_Assert::same($_g4, $_g5, null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 106, "className" => "utest.TestAssert", "methodName" => "testSamePrimitive")));
		$_g6 = new haxe_ds_IntMap();
		$_g6->set(1, "a");
		$_g7 = new haxe_ds_IntMap();
		$_g7->set(1, "a");
		$_g7->set(2, "b");
		utest_Assert::same($_g6, $_g7, null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 107, "className" => "utest.TestAssert", "methodName" => "testSamePrimitive")));
		$this->restore();
		$this->expect(5, 6, null);
	}
	public function testSameType() {
		$this->bypass();
		utest_Assert::same(null, _hx_anonymous(array()), null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 117, "className" => "utest.TestAssert", "methodName" => "testSameType")));
		utest_Assert::same(null, null, null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 118, "className" => "utest.TestAssert", "methodName" => "testSameType")));
		utest_Assert::same(_hx_anonymous(array()), null, null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 119, "className" => "utest.TestAssert", "methodName" => "testSameType")));
		utest_Assert::same(_hx_anonymous(array()), 1, null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 120, "className" => "utest.TestAssert", "methodName" => "testSameType")));
		utest_Assert::same(_hx_anonymous(array()), (new _hx_array(array())), null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 121, "className" => "utest.TestAssert", "methodName" => "testSameType")));
		utest_Assert::same(null, utest__TestAssert_Sample::$None, null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 122, "className" => "utest.TestAssert", "methodName" => "testSameType")));
		utest_Assert::same(utest__TestAssert_Sample::$None, null, null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 123, "className" => "utest.TestAssert", "methodName" => "testSameType")));
		$this->restore();
		$this->expect(1, 6, null);
	}
	public function testSameArray() {
		$this->bypass();
		utest_Assert::same((new _hx_array(array())), (new _hx_array(array())), null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 131, "className" => "utest.TestAssert", "methodName" => "testSameArray")));
		utest_Assert::same((new _hx_array(array(1))), (new _hx_array(array("1"))), null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 132, "className" => "utest.TestAssert", "methodName" => "testSameArray")));
		utest_Assert::same((new _hx_array(array(1, 2, 3))), (new _hx_array(array(1, 2, 3))), null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 133, "className" => "utest.TestAssert", "methodName" => "testSameArray")));
		utest_Assert::same((new _hx_array(array(1, 2, 3))), (new _hx_array(array(1, 2))), null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 134, "className" => "utest.TestAssert", "methodName" => "testSameArray")));
		utest_Assert::same((new _hx_array(array(1, 2))), (new _hx_array(array(1, 2, 3))), null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 135, "className" => "utest.TestAssert", "methodName" => "testSameArray")));
		utest_Assert::same((new _hx_array(array(1, (new _hx_array(array(1, 2)))))), (new _hx_array(array(1, (new _hx_array(array(1, 2)))))), null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 136, "className" => "utest.TestAssert", "methodName" => "testSameArray")));
		utest_Assert::same((new _hx_array(array(1, (new _hx_array(array(1, 2)))))), (new _hx_array(array(1, (new _hx_array(array()))))), false, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 137, "className" => "utest.TestAssert", "methodName" => "testSameArray")));
		utest_Assert::same((new _hx_array(array(1, (new _hx_array(array(1, 2)))))), (new _hx_array(array(1, (new _hx_array(array()))))), true, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 138, "className" => "utest.TestAssert", "methodName" => "testSameArray")));
		$this->restore();
		$this->expect(4, 4, null);
	}
	public function testSameObject() {
		$this->bypass();
		utest_Assert::same(_hx_anonymous(array()), _hx_anonymous(array()), null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 146, "className" => "utest.TestAssert", "methodName" => "testSameObject")));
		utest_Assert::same(_hx_anonymous(array("a" => 1)), _hx_anonymous(array("a" => "1")), null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 147, "className" => "utest.TestAssert", "methodName" => "testSameObject")));
		utest_Assert::same(_hx_anonymous(array("a" => 1, "b" => "c")), _hx_anonymous(array("a" => 1, "b" => "c")), null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 148, "className" => "utest.TestAssert", "methodName" => "testSameObject")));
		utest_Assert::same(_hx_anonymous(array("a" => 1, "b" => "c")), _hx_anonymous(array("a" => 1, "c" => "c")), null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 149, "className" => "utest.TestAssert", "methodName" => "testSameObject")));
		utest_Assert::same(_hx_anonymous(array("a" => 1, "b" => "c")), _hx_anonymous(array("a" => 1)), null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 150, "className" => "utest.TestAssert", "methodName" => "testSameObject")));
		utest_Assert::same(_hx_anonymous(array("a" => 1, "b" => _hx_anonymous(array("a" => 1, "c" => "c")))), _hx_anonymous(array("a" => 1, "b" => _hx_anonymous(array("a" => 1, "c" => "c")))), null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 151, "className" => "utest.TestAssert", "methodName" => "testSameObject")));
		utest_Assert::same(_hx_anonymous(array("a" => 1, "b" => _hx_anonymous(array("a" => 1, "c" => "c")))), _hx_anonymous(array("a" => 1, "b" => _hx_anonymous(array()))), false, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 152, "className" => "utest.TestAssert", "methodName" => "testSameObject")));
		utest_Assert::same(_hx_anonymous(array("a" => 1, "b" => _hx_anonymous(array("a" => 1, "c" => "c")))), _hx_anonymous(array("a" => 1, "b" => _hx_anonymous(array()))), true, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 153, "className" => "utest.TestAssert", "methodName" => "testSameObject")));
		$this->restore();
		$this->expect(4, 4, null);
	}
	public $value;
	public $sub;
	public function testSameInstance() {
		$c1 = new utest_TestAssert();
		$c1->value = "a";
		$c2 = new utest_TestAssert();
		$c2->value = "a";
		$c3 = new utest_TestAssert();
		$r1 = new utest_TestAssert();
		$r1->sub = $c1;
		$r2 = new utest_TestAssert();
		$r2->sub = $c2;
		$r3 = new utest_TestAssert();
		$r3->sub = $c3;
		$this->bypass();
		utest_Assert::same($c1, $c1, null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 177, "className" => "utest.TestAssert", "methodName" => "testSameInstance")));
		utest_Assert::same($c1, $c2, null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 178, "className" => "utest.TestAssert", "methodName" => "testSameInstance")));
		utest_Assert::same($c1, $c3, null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 179, "className" => "utest.TestAssert", "methodName" => "testSameInstance")));
		utest_Assert::same($r1, $r2, null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 181, "className" => "utest.TestAssert", "methodName" => "testSameInstance")));
		utest_Assert::same($r1, $r3, false, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 182, "className" => "utest.TestAssert", "methodName" => "testSameInstance")));
		utest_Assert::same($r1, $r3, true, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 183, "className" => "utest.TestAssert", "methodName" => "testSameInstance")));
		$this->restore();
		$this->expect(4, 2, null);
	}
	public function testSameIterable() {
		$list1 = new HList();
		$list1->add("a");
		$list1->add(1);
		$s1 = new HList();
		$s1->add(2);
		$list1->add($s1);
		$list2 = new HList();
		$list2->add("a");
		$list2->add(1);
		$list2->add($s1);
		$list3 = new HList();
		$list3->add("a");
		$list3->add(1);
		$list3->add(new HList());
		$this->bypass();
		utest_Assert::same($list1, $list2, null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 206, "className" => "utest.TestAssert", "methodName" => "testSameIterable")));
		utest_Assert::same($list1, $list3, false, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 207, "className" => "utest.TestAssert", "methodName" => "testSameIterable")));
		utest_Assert::same($list1, $list3, true, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 208, "className" => "utest.TestAssert", "methodName" => "testSameIterable")));
		$tmp = new IntIterator(0, 3);
		utest_Assert::same($tmp, new IntIterator(0, 3), null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 210, "className" => "utest.TestAssert", "methodName" => "testSameIterable")));
		$tmp1 = new IntIterator(0, 3);
		utest_Assert::same($tmp1, new IntIterator(0, 4), null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 211, "className" => "utest.TestAssert", "methodName" => "testSameIterable")));
		$this->restore();
		$this->expect(3, 2, null);
	}
	public function testSameEnums() {
		$this->bypass();
		utest_Assert::same(utest__TestAssert_Sample::$None, utest__TestAssert_Sample::$None, null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 248, "className" => "utest.TestAssert", "methodName" => "testSameEnums")));
		$tmp = utest__TestAssert_Sample::Some("a");
		$tmp1 = utest__TestAssert_Sample::Some("a");
		utest_Assert::same($tmp, $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 249, "className" => "utest.TestAssert", "methodName" => "testSameEnums")));
		$tmp2 = utest__TestAssert_Sample::Some("a");
		$tmp3 = utest__TestAssert_Sample::Some("b");
		utest_Assert::same($tmp2, $tmp3, true, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 250, "className" => "utest.TestAssert", "methodName" => "testSameEnums")));
		$tmp4 = utest__TestAssert_Sample::Some("a");
		$tmp5 = utest__TestAssert_Sample::Some("b");
		utest_Assert::same($tmp4, $tmp5, false, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 251, "className" => "utest.TestAssert", "methodName" => "testSameEnums")));
		$tmp6 = utest__TestAssert_Sample::Some("a");
		utest_Assert::same($tmp6, utest__TestAssert_Sample::$None, null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 252, "className" => "utest.TestAssert", "methodName" => "testSameEnums")));
		$tmp7 = utest__TestAssert_Sample::Some("a");
		$tmp8 = utest__TestAssert_Sample::Rec($tmp7);
		$tmp9 = utest__TestAssert_Sample::Rec($tmp8);
		$tmp10 = utest__TestAssert_Sample::Some("a");
		$tmp11 = utest__TestAssert_Sample::Rec($tmp10);
		$tmp12 = utest__TestAssert_Sample::Rec($tmp11);
		utest_Assert::same($tmp9, $tmp12, null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 253, "className" => "utest.TestAssert", "methodName" => "testSameEnums")));
		$tmp13 = utest__TestAssert_Sample::Some("a");
		$tmp14 = utest__TestAssert_Sample::Rec($tmp13);
		$tmp15 = utest__TestAssert_Sample::Rec($tmp14);
		$tmp16 = utest__TestAssert_Sample::Rec(utest__TestAssert_Sample::$None);
		utest_Assert::same($tmp15, $tmp16, true, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 254, "className" => "utest.TestAssert", "methodName" => "testSameEnums")));
		$tmp17 = utest__TestAssert_Sample::Some("a");
		$tmp18 = utest__TestAssert_Sample::Rec($tmp17);
		$tmp19 = utest__TestAssert_Sample::Rec($tmp18);
		$tmp20 = utest__TestAssert_Sample::Rec(utest__TestAssert_Sample::$None);
		$tmp21 = utest__TestAssert_Sample::Rec($tmp20);
		utest_Assert::same($tmp19, $tmp21, false, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 257, "className" => "utest.TestAssert", "methodName" => "testSameEnums")));
		$this->restore();
		$this->expect(4, 4, null);
	}
	public function testEquals() {
		$this->bypass();
		$values = (new _hx_array(array("e", 1, 0.1, _hx_anonymous(array()))));
		$expecteds = (new _hx_array(array("e", 1, 0.1, _hx_anonymous(array()))));
		$i = 0;
		{
			$_g = 0;
			while($_g < $expecteds->length) {
				$expected = $expecteds[$_g];
				++$_g;
				{
					$_g1 = 0;
					while($_g1 < $values->length) {
						$value = $values[$_g1];
						++$_g1;
						++$i;
						utest_Assert::equals($expected, $value, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 277, "className" => "utest.TestAssert", "methodName" => "testEquals")));
						unset($value);
					}
					unset($_g1);
				}
				unset($expected);
			}
		}
		$this->restore();
		$this->expect(3, $i - 3, null);
	}
	public function testFloatEquals() {
		$this->bypass();
		$values = (new _hx_array(array(1, 0.1, 0.000000000000000000000000000011, Math::$NaN, Math::$NEGATIVE_INFINITY, Math::$POSITIVE_INFINITY, Math::$PI, 0.11)));
		$expecteds = (new _hx_array(array(1, 0.1, 0.000000000000000000000000000012, Math::$NaN, Math::$NEGATIVE_INFINITY, Math::$POSITIVE_INFINITY, Math::$PI, 0.12)));
		$i = 0;
		{
			$_g = 0;
			while($_g < $expecteds->length) {
				$expected = $expecteds[$_g];
				++$_g;
				{
					$_g1 = 0;
					while($_g1 < $values->length) {
						$value = $values[$_g1];
						++$_g1;
						++$i;
						utest_Assert::floatEquals($expected, $value, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 292, "className" => "utest.TestAssert", "methodName" => "testFloatEquals")));
						unset($value);
					}
					unset($_g1);
				}
				unset($expected);
			}
		}
		$this->restore();
		$this->expect(7, $i - 7, null);
	}
	public function testPass() {
		$this->bypass();
		utest_Assert::pass(null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 300, "className" => "utest.TestAssert", "methodName" => "testPass")));
		$this->restore();
		$this->expect(1, 0, null);
	}
	public function testFail() {
		$this->bypass();
		utest_Assert::fail(null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 307, "className" => "utest.TestAssert", "methodName" => "testFail")));
		$this->restore();
		$this->expect(0, 1, null);
	}
	public function testWarn() {
		$this->bypass();
		utest_Assert::warn("");
		$this->restore();
		$this->expect(0, 0, 1);
	}
	public function expect($esuccesses, $efailures, $eothers = null) {
		if($eothers === null) {
			$eothers = 0;
		}
		$failures = 0;
		$others = 0;
		{
			$tmp = $this->results->iterator();
			while(true) {
				$tmp1 = !$tmp->hasNext();
				if($tmp1) {
					break;
				}
				$result = $tmp->next();
				switch($result->index) {
				case 0:{}break;
				case 1:{
					++$failures;
				}break;
				default:{
					++$others;
				}break;
				}
				unset($tmp1,$result);
			}
		}
		utest_Assert::equals($eothers, $others, "expected " . _hx_string_rec($eothers, "") . " other results but were " . _hx_string_rec($others, ""), _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 333, "className" => "utest.TestAssert", "methodName" => "expect")));
		utest_Assert::equals($efailures, $failures, "expected " . _hx_string_rec($efailures, "") . " failures but were " . _hx_string_rec($failures, ""), _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 336, "className" => "utest.TestAssert", "methodName" => "expect")));
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'utest.TestAssert'; }
}
function utest_TestAssert_0(&$error) {
	{
		throw new HException($error);
	}
}
