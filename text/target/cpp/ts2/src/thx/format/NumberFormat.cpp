// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_thx_Floats
#include <thx/Floats.h>
#endif
#ifndef INCLUDED_thx_Ints
#include <thx/Ints.h>
#endif
#ifndef INCLUDED_thx_Strings
#include <thx/Strings.h>
#endif
#ifndef INCLUDED_thx_culture_Culture
#include <thx/culture/Culture.h>
#endif
#ifndef INCLUDED_thx_culture_NumberFormatInfo
#include <thx/culture/NumberFormatInfo.h>
#endif
#ifndef INCLUDED_thx_culture_Pattern
#include <thx/culture/Pattern.h>
#endif
#ifndef INCLUDED_thx_format_Format
#include <thx/format/Format.h>
#endif
#ifndef INCLUDED_thx_format_NumberFormat
#include <thx/format/NumberFormat.h>
#endif
#ifndef INCLUDED_thx_format__NumberFormat_CustomFormat
#include <thx/format/_NumberFormat/CustomFormat.h>
#endif

namespace thx{
namespace format{

void NumberFormat_obj::__construct() { }

Dynamic NumberFormat_obj::__CreateEmpty() { return new NumberFormat_obj; }

hx::ObjectPtr< NumberFormat_obj > NumberFormat_obj::__new()
{
	hx::ObjectPtr< NumberFormat_obj > _hx_result = new NumberFormat_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic NumberFormat_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NumberFormat_obj > _hx_result = new NumberFormat_obj();
	_hx_result->__construct();
	return _hx_result;
}

::String NumberFormat_obj::binary(Float f, ::Dynamic __o_significantDigits, ::thx::culture::Culture culture){
 ::Dynamic significantDigits = __o_significantDigits.Default(1);
            	HX_STACK_FRAME("thx.format.NumberFormat","binary",0x1dd468a2,"thx.format.NumberFormat.binary","thx/format/NumberFormat.hx",18,0x078ed511)
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(significantDigits,"significantDigits")
            	HX_STACK_ARG(culture,"culture")
HXLINE(  19)		HX_VARI(  ::thx::culture::NumberFormatInfo,nf) = ::thx::format::NumberFormat_obj::numberFormat(culture);
HXLINE(  20)		Bool _hx_tmp = ::Math_obj::isNaN(f);
HXDLIN(  20)		if (_hx_tmp) {
HXLINE(  21)			return nf->symbolNaN;
            		}
HXLINE(  22)		Bool _hx_tmp1 = !(::Math_obj::isFinite(f));
HXDLIN(  22)		if (_hx_tmp1) {
HXLINE(  23)			if ((f < (int)0)) {
HXLINE(  23)				return nf->symbolNegativeInfinity;
            			}
            			else {
HXLINE(  23)				return nf->symbolPositiveInfinity;
            			}
            		}
HXLINE(  24)		Bool _hx_tmp2;
HXDLIN(  24)		if (hx::IsEq( significantDigits,(int)0 )) {
HXLINE(  24)			_hx_tmp2 = (f == (int)0);
            		}
            		else {
HXLINE(  24)			_hx_tmp2 = false;
            		}
HXDLIN(  24)		if (_hx_tmp2) {
HXLINE(  24)			return HX_("",00,00,00,00);
            		}
            		else {
HXLINE(  24)			Int _hx_tmp3 = ::Std_obj::_hx_int(f);
HXDLIN(  24)			::String _hx_tmp4 = ::thx::format::NumberFormat_obj::toBase(_hx_tmp3,(int)2,culture);
HXDLIN(  24)			return ::StringTools_obj::lpad(_hx_tmp4,HX_("0",30,00,00,00),significantDigits);
            		}
HXDLIN(  24)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(NumberFormat_obj,binary,return )

::String NumberFormat_obj::currency(Float f, ::Dynamic precision,::String symbol, ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.NumberFormat","currency",0x110ade32,"thx.format.NumberFormat.currency","thx/format/NumberFormat.hx",31,0x078ed511)
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(precision,"precision")
            	HX_STACK_ARG(symbol,"symbol")
            	HX_STACK_ARG(culture,"culture")
HXLINE(  32)		HX_VARI(  ::thx::culture::NumberFormatInfo,nf) = ::thx::format::NumberFormat_obj::numberFormat(culture);
HXLINE(  33)		Bool _hx_tmp = ::Math_obj::isNaN(f);
HXDLIN(  33)		if (_hx_tmp) {
HXLINE(  34)			return nf->symbolNaN;
            		}
HXLINE(  35)		Bool _hx_tmp1 = !(::Math_obj::isFinite(f));
HXDLIN(  35)		if (_hx_tmp1) {
HXLINE(  36)			if ((f < (int)0)) {
HXLINE(  36)				return nf->symbolNegativeInfinity;
            			}
            			else {
HXLINE(  36)				return nf->symbolPositiveInfinity;
            			}
            		}
HXLINE(  37)		HX_VAR( ::String,pattern);
HXDLIN(  37)		if ((f < (int)0)) {
HXLINE(  37)			pattern = ::thx::culture::Pattern_obj::currencyNegatives->__get(nf->patternNegativeCurrency);
            		}
            		else {
HXLINE(  37)			pattern = ::thx::culture::Pattern_obj::currencyPositives->__get(nf->patternPositiveCurrency);
            		}
HXLINE( 139)		HX_VAR(  ::Dynamic,t);
HXLINE(  38)		if (hx::IsNull( precision )) {
HXLINE( 139)			t = null();
            		}
            		else {
HXLINE( 139)			t = precision;
            		}
HXDLIN( 139)		Int _hx_tmp2;
HXDLIN( 139)		if (hx::IsNotNull( t )) {
HXLINE( 139)			_hx_tmp2 = t;
            		}
            		else {
HXLINE( 139)			_hx_tmp2 = nf->decimalDigitsCurrency;
            		}
HXLINE(  37)		HX_VARI( ::String,formatted) = ::thx::format::NumberFormat_obj::value(f,_hx_tmp2,nf->groupSizesCurrency,nf->separatorGroupCurrency,nf->separatorDecimalCurrency);
HXLINE(  39)		::String _hx_tmp3 = ::StringTools_obj::replace(pattern,HX_("n",6e,00,00,00),formatted);
HXLINE( 139)		HX_VAR_NAME( ::String,t1,"t");
HXLINE(  39)		if (hx::IsNull( symbol )) {
HXLINE( 139)			t1 = null();
            		}
            		else {
HXLINE( 139)			t1 = symbol;
            		}
HXDLIN( 139)		::String _hx_tmp4;
HXDLIN( 139)		if (hx::IsNotNull( t1 )) {
HXLINE( 139)			_hx_tmp4 = t1;
            		}
            		else {
HXLINE( 139)			_hx_tmp4 = nf->symbolCurrency;
            		}
HXLINE(  39)		return ::StringTools_obj::replace(_hx_tmp3,HX_("$",24,00,00,00),_hx_tmp4);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(NumberFormat_obj,currency,return )

::String NumberFormat_obj::customFormat(Float f,::String pattern, ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.NumberFormat","customFormat",0x86bd4129,"thx.format.NumberFormat.customFormat","thx/format/NumberFormat.hx",59,0x078ed511)
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(pattern,"pattern")
            	HX_STACK_ARG(culture,"culture")
HXLINE(  60)		HX_VARI(  ::thx::culture::NumberFormatInfo,nf) = ::thx::format::NumberFormat_obj::numberFormat(culture);
HXLINE(  61)		Bool _hx_tmp = ::Math_obj::isNaN(f);
HXDLIN(  61)		if (_hx_tmp) {
HXLINE(  62)			return nf->symbolNaN;
            		}
HXLINE(  63)		Bool _hx_tmp1 = !(::Math_obj::isFinite(f));
HXDLIN(  63)		if (_hx_tmp1) {
HXLINE(  64)			if ((f < (int)0)) {
HXLINE(  64)				return nf->symbolNegativeInfinity;
            			}
            			else {
HXLINE(  64)				return nf->symbolPositiveInfinity;
            			}
            		}
HXLINE(  67)		HX_VARI( Bool,isCurrency) = ::thx::format::NumberFormat_obj::hasSymbols(pattern,HX_("$",24,00,00,00));
HXDLIN(  67)		HX_VAR( Bool,isPercent);
HXLINE(  68)		if (!(isCurrency)) {
HXLINE(  67)			isPercent = ::thx::format::NumberFormat_obj::hasSymbols(pattern,HX_("%\xe2""\x80""\xb0""",8d,d2,20,19));
            		}
            		else {
HXLINE(  67)			isPercent = false;
            		}
HXDLIN(  67)		HX_VARI( ::Array< ::String >,groups) = ::thx::format::NumberFormat_obj::splitPattern(pattern,HX_(";",3b,00,00,00));
HXLINE(  70)		if ((groups->length > (int)3)) {
HXLINE(  70)			HX_STACK_DO_THROW(((HX_("invalid number of sections in \"",de,43,9e,5c) + pattern) + HX_("\"",22,00,00,00)));
            		}
HXLINE(  71)		if ((f < (int)0)) {
HXLINE(  72)			if (hx::IsNotNull( groups->__get((int)1) )) {
HXLINE(  71)				return ::thx::format::NumberFormat_obj::customFormatF(-(f),groups->__get((int)1),nf,isCurrency,isPercent);
            			}
            			else {
HXLINE(  71)				return ::thx::format::NumberFormat_obj::customFormatF(-(f),(HX_("-",2d,00,00,00) + groups->__get((int)0)),nf,isCurrency,isPercent);
            			}
            		}
            		else {
HXLINE(  77)			if ((f > (int)0)) {
HXLINE(  71)				return ::thx::format::NumberFormat_obj::customFormatF(f,groups->__get((int)0),nf,isCurrency,isPercent);
            			}
            			else {
HXLINE(  80)				::String _hx_tmp2;
HXDLIN(  80)				if (hx::IsNull( groups )) {
HXLINE(  80)					_hx_tmp2 = null();
            				}
            				else {
HXLINE(  80)					HX_VARI( ::String,_1) = groups->__get((int)2);
HXDLIN(  80)					if (hx::IsNull( _1 )) {
HXLINE(  80)						_hx_tmp2 = null();
            					}
            					else {
HXLINE(  80)						_hx_tmp2 = _1;
            					}
            				}
HXLINE( 139)				HX_VARI( ::String,t) = _hx_tmp2;
HXDLIN( 139)				::String _hx_tmp3;
HXDLIN( 139)				if (hx::IsNotNull( t )) {
HXLINE( 139)					_hx_tmp3 = t;
            				}
            				else {
HXLINE( 139)					_hx_tmp3 = groups->__get((int)0);
            				}
HXLINE(  71)				return ::thx::format::NumberFormat_obj::customFormatF((int)0,_hx_tmp3,nf,isCurrency,isPercent);
            			}
            		}
HXDLIN(  71)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(NumberFormat_obj,customFormat,return )

::String NumberFormat_obj::decimal(Float f, ::Dynamic __o_significantDigits, ::thx::culture::Culture culture){
 ::Dynamic significantDigits = __o_significantDigits.Default(1);
            	HX_STACK_FRAME("thx.format.NumberFormat","decimal",0x65a214d0,"thx.format.NumberFormat.decimal","thx/format/NumberFormat.hx",87,0x078ed511)
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(significantDigits,"significantDigits")
            	HX_STACK_ARG(culture,"culture")
HXLINE(  88)		HX_VARI(  ::thx::culture::NumberFormatInfo,nf) = ::thx::format::NumberFormat_obj::numberFormat(culture);
HXLINE(  89)		Bool _hx_tmp = ::Math_obj::isNaN(f);
HXDLIN(  89)		if (_hx_tmp) {
HXLINE(  90)			return nf->symbolNaN;
            		}
HXLINE(  91)		Bool _hx_tmp1 = !(::Math_obj::isFinite(f));
HXDLIN(  91)		if (_hx_tmp1) {
HXLINE(  92)			if ((f < (int)0)) {
HXLINE(  92)				return nf->symbolNegativeInfinity;
            			}
            			else {
HXLINE(  92)				return nf->symbolPositiveInfinity;
            			}
            		}
HXLINE(  93)		HX_VARI( ::String,formatted) = ::thx::format::NumberFormat_obj::value(f,(int)0,::Array_obj< Int >::__new(1)->init(0,(int)0),HX_("",00,00,00,00),HX_("",00,00,00,00));
HXLINE(  94)		::String _hx_tmp2;
HXDLIN(  94)		if ((f < (int)0)) {
HXLINE(  94)			_hx_tmp2 = nf->signNegative;
            		}
            		else {
HXLINE(  94)			_hx_tmp2 = HX_("",00,00,00,00);
            		}
HXDLIN(  94)		return (_hx_tmp2 + ::StringTools_obj::lpad(formatted,HX_("0",30,00,00,00),significantDigits));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(NumberFormat_obj,decimal,return )

::String NumberFormat_obj::exponential(Float f, ::Dynamic __o_precision, ::Dynamic __o_digits,::String __o_symbol, ::thx::culture::Culture culture){
 ::Dynamic precision = __o_precision.Default(6);
 ::Dynamic digits = __o_digits.Default(3);
::String symbol = __o_symbol.Default(HX_HCSTRING("e","\x65","\x00","\x00","\x00"));
            	HX_STACK_FRAME("thx.format.NumberFormat","exponential",0xb037e244,"thx.format.NumberFormat.exponential","thx/format/NumberFormat.hx",100,0x078ed511)
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(precision,"precision")
            	HX_STACK_ARG(digits,"digits")
            	HX_STACK_ARG(symbol,"symbol")
            	HX_STACK_ARG(culture,"culture")
HXLINE( 101)		HX_VARI(  ::thx::culture::NumberFormatInfo,nf) = ::thx::format::NumberFormat_obj::numberFormat(culture);
HXLINE( 102)		Bool _hx_tmp = ::Math_obj::isNaN(f);
HXDLIN( 102)		if (_hx_tmp) {
HXLINE( 103)			return nf->symbolNaN;
            		}
HXLINE( 104)		Bool _hx_tmp1 = !(::Math_obj::isFinite(f));
HXDLIN( 104)		if (_hx_tmp1) {
HXLINE( 105)			if ((f < (int)0)) {
HXLINE( 105)				return nf->symbolNegativeInfinity;
            			}
            			else {
HXLINE( 105)				return nf->symbolPositiveInfinity;
            			}
            		}
HXLINE( 106)		HX_VARI(  ::Dynamic,info) = ::thx::format::NumberFormat_obj::exponentialInfo(f);
HXLINE( 107)		::String _hx_tmp2 = ::thx::format::NumberFormat_obj::number( ::Dynamic(info->__Field(HX_("f",66,00,00,00),hx::paccDynamic)),precision,culture);
HXDLIN( 107)		::String _hx_tmp3 = (_hx_tmp2 + symbol);
HXLINE( 109)		::String _hx_tmp4;
HXDLIN( 109)		if (hx::IsLess( info->__Field(HX_("e",65,00,00,00),hx::paccDynamic),(int)0 )) {
HXLINE( 109)			_hx_tmp4 = nf->signNegative;
            		}
            		else {
HXLINE( 109)			_hx_tmp4 = nf->signPositive;
            		}
HXLINE( 107)		::String _hx_tmp5 = (_hx_tmp3 + _hx_tmp4);
HXLINE( 110)		HX_VARI( Int,v) = ( (Int)(info->__Field(HX_("e",65,00,00,00),hx::paccDynamic)) );
HXDLIN( 110)		Int _hx_tmp6;
HXDLIN( 110)		if ((v < (int)0)) {
HXLINE( 110)			_hx_tmp6 = -(v);
            		}
            		else {
HXLINE( 110)			_hx_tmp6 = v;
            		}
HXLINE( 107)		return (_hx_tmp5 + ::StringTools_obj::lpad((HX_("",00,00,00,00) + _hx_tmp6),HX_("0",30,00,00,00),digits));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(NumberFormat_obj,exponential,return )

::String NumberFormat_obj::fixed(Float f, ::Dynamic precision, ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.NumberFormat","fixed",0x682b7bf3,"thx.format.NumberFormat.fixed","thx/format/NumberFormat.hx",116,0x078ed511)
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(precision,"precision")
            	HX_STACK_ARG(culture,"culture")
HXLINE( 117)		HX_VARI(  ::thx::culture::NumberFormatInfo,nf) = ::thx::format::NumberFormat_obj::numberFormat(culture);
HXLINE( 118)		Bool _hx_tmp = ::Math_obj::isNaN(f);
HXDLIN( 118)		if (_hx_tmp) {
HXLINE( 119)			return nf->symbolNaN;
            		}
HXLINE( 120)		Bool _hx_tmp1 = !(::Math_obj::isFinite(f));
HXDLIN( 120)		if (_hx_tmp1) {
HXLINE( 121)			if ((f < (int)0)) {
HXLINE( 121)				return nf->symbolNegativeInfinity;
            			}
            			else {
HXLINE( 121)				return nf->symbolPositiveInfinity;
            			}
            		}
HXLINE( 122)		HX_VAR( ::String,pattern);
HXDLIN( 122)		if ((f < (int)0)) {
HXLINE( 122)			pattern = ::thx::culture::Pattern_obj::numberNegatives->__get(nf->patternNegativeNumber);
            		}
            		else {
HXLINE( 122)			pattern = HX_("n",6e,00,00,00);
            		}
HXLINE( 139)		HX_VAR(  ::Dynamic,t);
HXLINE( 123)		if (hx::IsNull( precision )) {
HXLINE( 139)			t = null();
            		}
            		else {
HXLINE( 139)			t = precision;
            		}
HXDLIN( 139)		Int _hx_tmp2;
HXDLIN( 139)		if (hx::IsNotNull( t )) {
HXLINE( 139)			_hx_tmp2 = t;
            		}
            		else {
HXLINE( 139)			_hx_tmp2 = nf->decimalDigitsNumber;
            		}
HXLINE( 122)		HX_VARI( ::String,formatted) = ::thx::format::NumberFormat_obj::value(f,_hx_tmp2,::Array_obj< Int >::__new(1)->init(0,(int)0),HX_("",00,00,00,00),nf->separatorDecimalNumber);
HXLINE( 124)		return ::StringTools_obj::replace(pattern,HX_("n",6e,00,00,00),formatted);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(NumberFormat_obj,fixed,return )

::String NumberFormat_obj::format(Float f,::String pattern, ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.NumberFormat","format",0x2e573bd8,"thx.format.NumberFormat.format","thx/format/NumberFormat.hx",153,0x078ed511)
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(pattern,"pattern")
            	HX_STACK_ARG(culture,"culture")
HXLINE( 154)		HX_VARI( ::String,specifier) = pattern.substring((int)0,(int)1);
HXLINE( 155)		::String _hx_tmp = pattern.substring((int)1,null());
HXLINE( 154)		HX_VARI(  ::Dynamic,param) = ::thx::format::NumberFormat_obj::paramOrNull(_hx_tmp);
HXLINE( 156)		::String _hx_switch_0 = specifier;
            		if (  (_hx_switch_0==HX_("%",25,00,00,00)) ){
HXLINE( 156)			return ::thx::format::NumberFormat_obj::printf(f,pattern,culture);
HXDLIN( 156)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("C",43,00,00,00)) ||  (_hx_switch_0==HX_("c",63,00,00,00)) ){
HXLINE( 156)			return ::thx::format::NumberFormat_obj::currency(f,param,null(),culture);
HXDLIN( 156)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("E",45,00,00,00)) ){
HXLINE( 156)			return ::thx::format::NumberFormat_obj::exponential(f,param,null(),null(),culture);
HXDLIN( 156)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("G",47,00,00,00)) ){
HXLINE( 156)			return ::thx::format::NumberFormat_obj::general(f,param,culture);
HXDLIN( 156)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("P",50,00,00,00)) ||  (_hx_switch_0==HX_("p",70,00,00,00)) ){
HXLINE( 156)			return ::thx::format::NumberFormat_obj::percent(f,param,culture);
HXDLIN( 156)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("X",58,00,00,00)) ){
HXLINE( 156)			return ::thx::format::NumberFormat_obj::hex(f,param,culture).toUpperCase();
HXDLIN( 156)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("D",44,00,00,00)) ||  (_hx_switch_0==HX_("d",64,00,00,00)) ){
HXLINE( 156)			return ::thx::format::NumberFormat_obj::decimal(f,param,culture);
HXDLIN( 156)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("e",65,00,00,00)) ){
HXLINE( 156)			return ::thx::format::NumberFormat_obj::exponential(f,param,null(),null(),culture).toLowerCase();
HXDLIN( 156)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("F",46,00,00,00)) ||  (_hx_switch_0==HX_("f",66,00,00,00)) ){
HXLINE( 156)			return ::thx::format::NumberFormat_obj::fixed(f,param,culture);
HXDLIN( 156)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("g",67,00,00,00)) ){
HXLINE( 156)			return ::thx::format::NumberFormat_obj::general(f,param,culture).toLowerCase();
HXDLIN( 156)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("N",4e,00,00,00)) ||  (_hx_switch_0==HX_("n",6e,00,00,00)) ){
HXLINE( 156)			return ::thx::format::NumberFormat_obj::number(f,param,culture);
HXDLIN( 156)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("R",52,00,00,00)) ||  (_hx_switch_0==HX_("r",72,00,00,00)) ){
HXLINE( 156)			return (HX_("",00,00,00,00) + f);
HXDLIN( 156)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("x",78,00,00,00)) ){
HXLINE( 156)			return ::thx::format::NumberFormat_obj::hex(f,param,culture);
HXDLIN( 156)			goto _hx_goto_0;
            		}
            		/* default */{
HXLINE( 156)			return ::thx::format::NumberFormat_obj::customFormat(f,pattern,culture);
            		}
            		_hx_goto_0:;
HXDLIN( 156)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(NumberFormat_obj,format,return )

::String NumberFormat_obj::general(Float f, ::Dynamic significantDigits, ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.NumberFormat","general",0x3529cb67,"thx.format.NumberFormat.general","thx/format/NumberFormat.hx",191,0x078ed511)
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(significantDigits,"significantDigits")
            	HX_STACK_ARG(culture,"culture")
HXLINE( 192)		HX_VARI( ::String,e) = ::thx::format::NumberFormat_obj::exponential(f,significantDigits,null(),null(),culture);
HXDLIN( 192)		HX_VARI_NAME( ::String,f1,"f") = ::thx::format::NumberFormat_obj::fixed(f,significantDigits,culture);
HXLINE( 194)		if ((e.length < f1.length)) {
HXLINE( 194)			return e;
            		}
            		else {
HXLINE( 194)			return f1;
            		}
HXDLIN( 194)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(NumberFormat_obj,general,return )

::String NumberFormat_obj::hex(Float f, ::Dynamic __o_significantDigits, ::thx::culture::Culture culture){
 ::Dynamic significantDigits = __o_significantDigits.Default(1);
            	HX_STACK_FRAME("thx.format.NumberFormat","hex",0x663ad79a,"thx.format.NumberFormat.hex","thx/format/NumberFormat.hx",200,0x078ed511)
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(significantDigits,"significantDigits")
            	HX_STACK_ARG(culture,"culture")
HXLINE( 201)		HX_VARI(  ::thx::culture::NumberFormatInfo,nf) = ::thx::format::NumberFormat_obj::numberFormat(culture);
HXLINE( 202)		Bool _hx_tmp = ::Math_obj::isNaN(f);
HXDLIN( 202)		if (_hx_tmp) {
HXLINE( 203)			return nf->symbolNaN;
            		}
HXLINE( 204)		Bool _hx_tmp1 = !(::Math_obj::isFinite(f));
HXDLIN( 204)		if (_hx_tmp1) {
HXLINE( 205)			if ((f < (int)0)) {
HXLINE( 205)				return nf->symbolNegativeInfinity;
            			}
            			else {
HXLINE( 205)				return nf->symbolPositiveInfinity;
            			}
            		}
HXLINE( 206)		Bool _hx_tmp2;
HXDLIN( 206)		if (hx::IsEq( significantDigits,(int)0 )) {
HXLINE( 206)			_hx_tmp2 = (f == (int)0);
            		}
            		else {
HXLINE( 206)			_hx_tmp2 = false;
            		}
HXDLIN( 206)		if (_hx_tmp2) {
HXLINE( 206)			return HX_("",00,00,00,00);
            		}
            		else {
HXLINE( 206)			Int _hx_tmp3 = ::Std_obj::_hx_int(f);
HXDLIN( 206)			::String _hx_tmp4 = ::thx::format::NumberFormat_obj::toBase(_hx_tmp3,(int)16,culture);
HXDLIN( 206)			return ::StringTools_obj::lpad(_hx_tmp4,HX_("0",30,00,00,00),significantDigits);
            		}
HXDLIN( 206)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(NumberFormat_obj,hex,return )

::String NumberFormat_obj::integer(Float f, ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.NumberFormat","integer",0x95ea1dfd,"thx.format.NumberFormat.integer","thx/format/NumberFormat.hx",212,0x078ed511)
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(culture,"culture")
HXLINE( 213)		HX_VARI(  ::thx::culture::NumberFormatInfo,nf) = ::thx::format::NumberFormat_obj::numberFormat(culture);
HXLINE( 214)		Bool _hx_tmp = ::Math_obj::isNaN(f);
HXDLIN( 214)		if (_hx_tmp) {
HXLINE( 215)			return nf->symbolNaN;
            		}
HXLINE( 216)		Bool _hx_tmp1 = !(::Math_obj::isFinite(f));
HXDLIN( 216)		if (_hx_tmp1) {
HXLINE( 217)			if ((f < (int)0)) {
HXLINE( 217)				return nf->symbolNegativeInfinity;
            			}
            			else {
HXLINE( 217)				return nf->symbolPositiveInfinity;
            			}
            		}
HXLINE( 218)		return ::thx::format::NumberFormat_obj::number(f,(int)0,culture);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NumberFormat_obj,integer,return )

::String NumberFormat_obj::number(Float f, ::Dynamic precision, ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.NumberFormat","number",0xd243336a,"thx.format.NumberFormat.number","thx/format/NumberFormat.hx",224,0x078ed511)
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(precision,"precision")
            	HX_STACK_ARG(culture,"culture")
HXLINE( 225)		HX_VARI(  ::thx::culture::NumberFormatInfo,nf) = ::thx::format::NumberFormat_obj::numberFormat(culture);
HXLINE( 226)		Bool _hx_tmp = ::Math_obj::isNaN(f);
HXDLIN( 226)		if (_hx_tmp) {
HXLINE( 227)			return nf->symbolNaN;
            		}
HXLINE( 228)		Bool _hx_tmp1 = !(::Math_obj::isFinite(f));
HXDLIN( 228)		if (_hx_tmp1) {
HXLINE( 229)			if ((f < (int)0)) {
HXLINE( 229)				return nf->symbolNegativeInfinity;
            			}
            			else {
HXLINE( 229)				return nf->symbolPositiveInfinity;
            			}
            		}
HXLINE( 230)		HX_VAR( ::String,pattern);
HXDLIN( 230)		if ((f < (int)0)) {
HXLINE( 230)			pattern = ::thx::culture::Pattern_obj::numberNegatives->__get(nf->patternNegativeNumber);
            		}
            		else {
HXLINE( 230)			pattern = HX_("n",6e,00,00,00);
            		}
HXLINE( 139)		HX_VAR(  ::Dynamic,t);
HXLINE( 231)		if (hx::IsNull( precision )) {
HXLINE( 139)			t = null();
            		}
            		else {
HXLINE( 139)			t = precision;
            		}
HXDLIN( 139)		Int _hx_tmp2;
HXDLIN( 139)		if (hx::IsNotNull( t )) {
HXLINE( 139)			_hx_tmp2 = t;
            		}
            		else {
HXLINE( 139)			_hx_tmp2 = nf->decimalDigitsNumber;
            		}
HXLINE( 230)		HX_VARI( ::String,formatted) = ::thx::format::NumberFormat_obj::value(f,_hx_tmp2,nf->groupSizesNumber,nf->separatorGroupNumber,nf->separatorDecimalNumber);
HXLINE( 232)		return ::StringTools_obj::replace(pattern,HX_("n",6e,00,00,00),formatted);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(NumberFormat_obj,number,return )

::String NumberFormat_obj::octal(Float f, ::Dynamic __o_significantDigits, ::thx::culture::Culture culture){
 ::Dynamic significantDigits = __o_significantDigits.Default(1);
            	HX_STACK_FRAME("thx.format.NumberFormat","octal",0x92cc604a,"thx.format.NumberFormat.octal","thx/format/NumberFormat.hx",238,0x078ed511)
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(significantDigits,"significantDigits")
            	HX_STACK_ARG(culture,"culture")
HXLINE( 239)		HX_VARI(  ::thx::culture::NumberFormatInfo,nf) = ::thx::format::NumberFormat_obj::numberFormat(culture);
HXLINE( 240)		Bool _hx_tmp = ::Math_obj::isNaN(f);
HXDLIN( 240)		if (_hx_tmp) {
HXLINE( 241)			return nf->symbolNaN;
            		}
HXLINE( 242)		Bool _hx_tmp1 = !(::Math_obj::isFinite(f));
HXDLIN( 242)		if (_hx_tmp1) {
HXLINE( 243)			if ((f < (int)0)) {
HXLINE( 243)				return nf->symbolNegativeInfinity;
            			}
            			else {
HXLINE( 243)				return nf->symbolPositiveInfinity;
            			}
            		}
HXLINE( 244)		Bool _hx_tmp2;
HXDLIN( 244)		if (hx::IsEq( significantDigits,(int)0 )) {
HXLINE( 244)			_hx_tmp2 = (f == (int)0);
            		}
            		else {
HXLINE( 244)			_hx_tmp2 = false;
            		}
HXDLIN( 244)		if (_hx_tmp2) {
HXLINE( 244)			return HX_("",00,00,00,00);
            		}
            		else {
HXLINE( 244)			Int _hx_tmp3 = ::Std_obj::_hx_int(f);
HXDLIN( 244)			::String _hx_tmp4 = ::thx::format::NumberFormat_obj::toBase(_hx_tmp3,(int)8,culture);
HXDLIN( 244)			return ::StringTools_obj::lpad(_hx_tmp4,HX_("0",30,00,00,00),significantDigits);
            		}
HXDLIN( 244)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(NumberFormat_obj,octal,return )

::String NumberFormat_obj::percent(Float f, ::Dynamic decimals, ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.NumberFormat","percent",0xf7a90b04,"thx.format.NumberFormat.percent","thx/format/NumberFormat.hx",250,0x078ed511)
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(decimals,"decimals")
            	HX_STACK_ARG(culture,"culture")
HXLINE( 251)		HX_VARI(  ::thx::culture::NumberFormatInfo,nf) = ::thx::format::NumberFormat_obj::numberFormat(culture);
HXLINE( 252)		Bool _hx_tmp = ::Math_obj::isNaN(f);
HXDLIN( 252)		if (_hx_tmp) {
HXLINE( 253)			return nf->symbolNaN;
            		}
HXLINE( 254)		Bool _hx_tmp1 = !(::Math_obj::isFinite(f));
HXDLIN( 254)		if (_hx_tmp1) {
HXLINE( 255)			if ((f < (int)0)) {
HXLINE( 255)				return nf->symbolNegativeInfinity;
            			}
            			else {
HXLINE( 255)				return nf->symbolPositiveInfinity;
            			}
            		}
HXLINE( 256)		Float _hx_tmp2 = (f * (int)100);
HXLINE( 139)		HX_VAR(  ::Dynamic,t);
HXLINE( 256)		if (hx::IsNull( decimals )) {
HXLINE( 139)			t = null();
            		}
            		else {
HXLINE( 139)			t = decimals;
            		}
HXDLIN( 139)		Int _hx_tmp3;
HXDLIN( 139)		if (hx::IsNotNull( t )) {
HXLINE( 139)			_hx_tmp3 = t;
            		}
            		else {
HXLINE( 139)			_hx_tmp3 = nf->decimalDigitsPercent;
            		}
HXLINE( 256)		return ::thx::format::NumberFormat_obj::unit(_hx_tmp2,_hx_tmp3,nf->symbolPercent,culture);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(NumberFormat_obj,percent,return )

::String NumberFormat_obj::permille(Float f, ::Dynamic decimals, ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.NumberFormat","permille",0x80e5b4ed,"thx.format.NumberFormat.permille","thx/format/NumberFormat.hx",262,0x078ed511)
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(decimals,"decimals")
            	HX_STACK_ARG(culture,"culture")
HXLINE( 263)		HX_VARI(  ::thx::culture::NumberFormatInfo,nf) = ::thx::format::NumberFormat_obj::numberFormat(culture);
HXLINE( 264)		Bool _hx_tmp = ::Math_obj::isNaN(f);
HXDLIN( 264)		if (_hx_tmp) {
HXLINE( 265)			return nf->symbolNaN;
            		}
HXLINE( 266)		Bool _hx_tmp1 = !(::Math_obj::isFinite(f));
HXDLIN( 266)		if (_hx_tmp1) {
HXLINE( 267)			if ((f < (int)0)) {
HXLINE( 267)				return nf->symbolNegativeInfinity;
            			}
            			else {
HXLINE( 267)				return nf->symbolPositiveInfinity;
            			}
            		}
HXLINE( 268)		Float _hx_tmp2 = (f * (int)1000);
HXLINE( 139)		HX_VAR(  ::Dynamic,t);
HXLINE( 268)		if (hx::IsNull( decimals )) {
HXLINE( 139)			t = null();
            		}
            		else {
HXLINE( 139)			t = decimals;
            		}
HXDLIN( 139)		Int _hx_tmp3;
HXDLIN( 139)		if (hx::IsNotNull( t )) {
HXLINE( 139)			_hx_tmp3 = t;
            		}
            		else {
HXLINE( 139)			_hx_tmp3 = nf->decimalDigitsPercent;
            		}
HXLINE( 268)		return ::thx::format::NumberFormat_obj::unit(_hx_tmp2,_hx_tmp3,nf->symbolPermille,culture);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(NumberFormat_obj,permille,return )

::String NumberFormat_obj::printf(Float f,::String pattern, ::thx::culture::Culture culture){
            		HX_BEGIN_LOCAL_FUNC_S6(hx::LocalFunc,_hx_Closure_0,Bool,negativeSignOnly,Bool,prefix,Bool,justifyRight,::String,padding,Bool,emptySpaceForSign,Int,width) HXARGC(5)
            		::String _hx_run(::String s,Float f1,::String p1,::String ns,::String ps){
            			HX_STACK_FRAME("thx.format.NumberFormat","printf",0xe22a7c3a,"thx.format.NumberFormat.printf","thx/format/NumberFormat.hx",361,0x078ed511)
            			HX_STACK_ARG(s,"s")
            			HX_STACK_ARG(f1,"f1")
            			HX_STACK_ARG(p1,"p1")
            			HX_STACK_ARG(ns,"ns")
            			HX_STACK_ARG(ps,"ps")
HXLINE( 362)			if (prefix) {
HXLINE( 363)				s = (p1 + s);
            			}
HXLINE( 364)			if ((f1 < (int)0)) {
HXLINE( 365)				s = (ns + s);
            			}
            			else {
HXLINE( 366)				if (!(negativeSignOnly)) {
HXLINE( 367)					s = (ps + s);
            				}
            				else {
HXLINE( 368)					if (emptySpaceForSign) {
HXLINE( 369)						s = (HX_(" ",20,00,00,00) + s);
            					}
            				}
            			}
HXLINE( 371)			if (justifyRight) {
HXLINE( 372)				return ::StringTools_obj::lpad(s,padding,width);
            			}
            			else {
HXLINE( 374)				return ::StringTools_obj::rpad(s,padding,width);
            			}
HXLINE( 371)			return null();
            		}
            		HX_END_LOCAL_FUNC5(return)

            	HX_STACK_FRAME("thx.format.NumberFormat","printf",0xe22a7c3a,"thx.format.NumberFormat.printf","thx/format/NumberFormat.hx",325,0x078ed511)
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(pattern,"pattern")
            	HX_STACK_ARG(culture,"culture")
HXLINE( 326)		Bool _hx_tmp = !(::StringTools_obj::startsWith(pattern,HX_("%",25,00,00,00)));
HXDLIN( 326)		if (_hx_tmp) {
HXLINE( 327)			HX_STACK_DO_THROW(((HX_("invalid printf term \"",2c,9d,69,d1) + pattern) + HX_("\"",22,00,00,00)));
            		}
HXLINE( 328)		Int _hx_tmp1 = (pattern.length - (int)1);
HXDLIN( 328)		HX_VARI( ::String,specifier) = pattern.substring(_hx_tmp1,null());
HXLINE( 329)		Int _hx_tmp2 = (pattern.length - (int)1);
HXLINE( 328)		HX_VARI( ::Array< ::String >,p) = pattern.substring((int)1,_hx_tmp2).split(HX_(".",2e,00,00,00));
HXDLIN( 328)		HX_VAR(  ::Dynamic,precision);
HXLINE( 330)		Bool _hx_tmp3;
HXDLIN( 330)		if (hx::IsNotNull( p->__get((int)1) )) {
HXLINE( 330)			_hx_tmp3 = (HX_("",00,00,00,00) == p->__get((int)1));
            		}
            		else {
HXLINE( 330)			_hx_tmp3 = true;
            		}
HXDLIN( 330)		if (_hx_tmp3) {
HXLINE( 328)			precision = null();
            		}
            		else {
HXLINE( 328)			precision = ::Std_obj::parseInt(p->__get((int)1));
            		}
HXDLIN( 328)		HX_VARI( Bool,justifyRight) = true;
HXDLIN( 328)		HX_VARI( Bool,negativeSignOnly) = true;
HXDLIN( 328)		HX_VARI( Bool,emptySpaceForSign) = false;
HXDLIN( 328)		HX_VARI( Bool,prefix) = false;
HXDLIN( 328)		HX_VARI( ::String,padding) = HX_(" ",20,00,00,00);
HXDLIN( 328)		HX_VARI( Int,width) = (int)0;
HXDLIN( 328)		HX_VARI( ::String,flags) = p->__get((int)0);
HXLINE( 339)		while((flags.length > (int)0)){
HXLINE( 340)			{
HXLINE( 340)				HX_VARI( ::String,_g) = flags.substring((int)0,(int)1);
HXDLIN( 340)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_(" ",20,00,00,00)) ){
HXLINE( 346)					emptySpaceForSign = true;
HXDLIN( 346)					goto _hx_goto_2;
            				}
            				if (  (_hx_switch_0==HX_("#",23,00,00,00)) ){
HXLINE( 348)					prefix = true;
HXDLIN( 348)					goto _hx_goto_2;
            				}
            				if (  (_hx_switch_0==HX_("+",2b,00,00,00)) ){
HXLINE( 344)					negativeSignOnly = false;
HXDLIN( 344)					goto _hx_goto_2;
            				}
            				if (  (_hx_switch_0==HX_("-",2d,00,00,00)) ){
HXLINE( 342)					justifyRight = false;
HXDLIN( 342)					goto _hx_goto_2;
            				}
            				if (  (_hx_switch_0==HX_("0",30,00,00,00)) ){
HXLINE( 350)					padding = HX_("0",30,00,00,00);
HXDLIN( 350)					goto _hx_goto_2;
            				}
            				/* default */{
HXLINE( 351)					Bool _hx_tmp4 = ::thx::Ints_obj::canParse(_g);
HXDLIN( 351)					if (_hx_tmp4) {
HXLINE( 352)						width = ::thx::Ints_obj::parse(flags,null());
HXLINE( 353)						flags = HX_("",00,00,00,00);
HXLINE( 354)						continue;
            					}
            					else {
HXLINE( 356)						HX_STACK_DO_THROW((HX_("invalid flags ",02,0d,3c,5b) + flags));
            					}
            				}
            				_hx_goto_2:;
            			}
HXLINE( 358)			flags = flags.substring((int)1,null());
            		}
HXLINE( 361)		HX_VARI(  ::Dynamic,decorate) =  ::Dynamic(new _hx_Closure_0(negativeSignOnly,prefix,justifyRight,padding,emptySpaceForSign,width));
HXLINE( 377)		HX_VARI(  ::thx::culture::NumberFormatInfo,nf) = ::thx::format::NumberFormat_obj::numberFormat(culture);
HXLINE( 378)		::String _hx_switch_1 = specifier;
            		if (  (_hx_switch_1==HX_("%",25,00,00,00)) ){
HXLINE( 378)			return ( (::String)(decorate(HX_("%",25,00,00,00),(int)1,HX_("",00,00,00,00),HX_("",00,00,00,00),HX_("",00,00,00,00))) );
HXDLIN( 378)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_1==HX_("B",42,00,00,00)) ){
HXLINE( 380)			HX_VARI( Int,v) = ::Std_obj::_hx_int(f);
HXDLIN( 380)			Int _hx_tmp5;
HXDLIN( 380)			if ((v < (int)0)) {
HXLINE( 380)				_hx_tmp5 = -(v);
            			}
            			else {
HXLINE( 380)				_hx_tmp5 = v;
            			}
HXDLIN( 380)			::String _hx_tmp6 = ::thx::Ints_obj::toString(_hx_tmp5,(int)2);
HXLINE( 378)			return ( (::String)(decorate(_hx_tmp6,(int)1,HX_("B",42,00,00,00),HX_("",00,00,00,00),HX_("",00,00,00,00))) );
HXDLIN( 378)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_1==HX_("E",45,00,00,00)) ){
HXLINE( 385)			Float _hx_tmp7 = ::Math_obj::abs(f);
HXDLIN( 385)			::String _hx_tmp8 = ::thx::format::NumberFormat_obj::exponential(_hx_tmp7,precision,(int)0,HX_("E",45,00,00,00),culture);
HXLINE( 378)			return ( (::String)(decorate(_hx_tmp8,f,HX_("",00,00,00,00),nf->signNegative,nf->signPositive)) );
HXDLIN( 378)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_1==HX_("G",47,00,00,00)) ){
HXLINE( 392)			HX_VARI( ::String,e) = ::thx::format::NumberFormat_obj::printf(f,HX_("E",45,00,00,00),culture);
HXDLIN( 392)			HX_VARI_NAME( ::String,f2,"f") = ::thx::format::NumberFormat_obj::printf(f,HX_("f",66,00,00,00),culture);
HXLINE( 394)			if ((e.length < f2.length)) {
HXLINE( 378)				return e;
            			}
            			else {
HXLINE( 378)				return f2;
            			}
HXLINE( 391)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_1==HX_("X",58,00,00,00)) ){
HXLINE( 397)			Float _hx_tmp9 = ::Math_obj::abs(f);
HXDLIN( 397)			::String _hx_tmp10 = ::thx::format::NumberFormat_obj::hex(_hx_tmp9,precision,culture);
HXLINE( 378)			return ( (::String)(decorate(_hx_tmp10,f,HX_("0X",28,2a,00,00),nf->signNegative,nf->signPositive)) );
HXDLIN( 378)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_1==HX_("b",62,00,00,00)) ){
HXLINE( 379)			HX_VARI_NAME( Int,v1,"v") = ::Std_obj::_hx_int(f);
HXDLIN( 379)			Int _hx_tmp11;
HXDLIN( 379)			if ((v1 < (int)0)) {
HXLINE( 379)				_hx_tmp11 = -(v1);
            			}
            			else {
HXLINE( 379)				_hx_tmp11 = v1;
            			}
HXDLIN( 379)			::String _hx_tmp12 = ::thx::Ints_obj::toString(_hx_tmp11,(int)2);
HXLINE( 378)			return ( (::String)(decorate(_hx_tmp12,(int)1,HX_("b",62,00,00,00),HX_("",00,00,00,00),HX_("",00,00,00,00))) );
HXDLIN( 378)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_1==HX_("c",63,00,00,00)) ){
HXLINE( 381)			HX_VARI_NAME( Int,v2,"v") = ::Std_obj::_hx_int(f);
HXDLIN( 381)			Int _hx_tmp13;
HXDLIN( 381)			if ((v2 < (int)0)) {
HXLINE( 381)				_hx_tmp13 = -(v2);
            			}
            			else {
HXLINE( 381)				_hx_tmp13 = v2;
            			}
HXLINE( 378)			return ( (::String)(decorate(::String::fromCharCode(_hx_tmp13),(int)1,HX_("",00,00,00,00),HX_("",00,00,00,00),HX_("",00,00,00,00))) );
HXDLIN( 378)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_1==HX_("d",64,00,00,00)) ||  (_hx_switch_1==HX_("i",69,00,00,00)) ){
HXLINE( 383)			Int _hx_tmp14 = ::Math_obj::round(f);
HXDLIN( 383)			::String _hx_tmp15 = (HX_("",00,00,00,00) + _hx_tmp14);
HXDLIN( 383)			HX_VARI(  ::Dynamic,_0) = precision;
HXLINE( 139)			HX_VAR(  ::Dynamic,t);
HXLINE( 383)			if (hx::IsNull( _0 )) {
HXLINE( 139)				t = null();
            			}
            			else {
HXLINE( 139)				t = _0;
            			}
HXDLIN( 139)			Int _hx_tmp16;
HXDLIN( 139)			if (hx::IsNotNull( t )) {
HXLINE( 139)				_hx_tmp16 = t;
            			}
            			else {
HXLINE( 139)				_hx_tmp16 = (int)0;
            			}
HXLINE( 378)			return ( (::String)(decorate(::StringTools_obj::lpad(_hx_tmp15,HX_("0",30,00,00,00),_hx_tmp16),f,HX_("",00,00,00,00),nf->signNegative,nf->signPositive)) );
HXDLIN( 378)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_1==HX_("e",65,00,00,00)) ){
HXLINE( 384)			Float _hx_tmp17 = ::Math_obj::abs(f);
HXDLIN( 384)			::String _hx_tmp18 = ::thx::format::NumberFormat_obj::exponential(_hx_tmp17,precision,(int)0,HX_("e",65,00,00,00),culture);
HXLINE( 378)			return ( (::String)(decorate(_hx_tmp18,f,HX_("",00,00,00,00),nf->signNegative,nf->signPositive)) );
HXDLIN( 378)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_1==HX_("f",66,00,00,00)) ){
HXLINE( 386)			Float _hx_tmp19 = ::Math_obj::abs(f);
HXDLIN( 386)			::String _hx_tmp20 = ::thx::format::NumberFormat_obj::fixed(_hx_tmp19,precision,culture);
HXLINE( 378)			return ( (::String)(decorate(_hx_tmp20,f,HX_("",00,00,00,00),nf->signNegative,nf->signPositive)) );
HXDLIN( 378)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_1==HX_("g",67,00,00,00)) ){
HXLINE( 388)			HX_VARI_NAME( ::String,e1,"e") = ::thx::format::NumberFormat_obj::printf(f,HX_("e",65,00,00,00),culture);
HXDLIN( 388)			HX_VARI_NAME( ::String,f3,"f") = ::thx::format::NumberFormat_obj::printf(f,HX_("f",66,00,00,00),culture);
HXLINE( 390)			if ((e1.length < f3.length)) {
HXLINE( 378)				return e1;
            			}
            			else {
HXLINE( 378)				return f3;
            			}
HXLINE( 387)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_1==HX_("o",6f,00,00,00)) ){
HXLINE( 398)			Float _hx_tmp21 = ::Math_obj::abs(f);
HXDLIN( 398)			::String _hx_tmp22 = ::thx::format::NumberFormat_obj::octal(_hx_tmp21,precision,culture);
HXLINE( 378)			return ( (::String)(decorate(_hx_tmp22,f,HX_("0",30,00,00,00),nf->signNegative,nf->signPositive)) );
HXDLIN( 378)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_1==HX_("u",75,00,00,00)) ){
HXLINE( 395)			Float _hx_tmp23 = ::Math_obj::abs(f);
HXLINE( 378)			return ::thx::format::NumberFormat_obj::printf(_hx_tmp23,HX_("d",64,00,00,00),culture);
HXDLIN( 378)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_1==HX_("x",78,00,00,00)) ){
HXLINE( 396)			Float _hx_tmp24 = ::Math_obj::abs(f);
HXDLIN( 396)			::String _hx_tmp25 = ::thx::format::NumberFormat_obj::hex(_hx_tmp24,precision,culture);
HXLINE( 378)			return ( (::String)(decorate(_hx_tmp25,f,HX_("0x",48,2a,00,00),nf->signNegative,nf->signPositive)) );
HXDLIN( 378)			goto _hx_goto_3;
            		}
            		/* default */{
HXLINE( 400)			HX_STACK_DO_THROW(((HX_("invalid pattern \"",e9,27,46,23) + pattern) + HX_("\"",22,00,00,00)));
            		}
            		_hx_goto_3:;
HXLINE( 378)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(NumberFormat_obj,printf,return )

::String NumberFormat_obj::toBase(Int value,Int base, ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.NumberFormat","toBase",0xa792ffcd,"thx.format.NumberFormat.toBase","thx/format/NumberFormat.hx",407,0x078ed511)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(base,"base")
            	HX_STACK_ARG(culture,"culture")
HXLINE( 408)		HX_VARI(  ::thx::culture::NumberFormatInfo,nf) = ::thx::format::NumberFormat_obj::numberFormat(culture);
HXLINE( 413)		Bool _hx_tmp;
HXDLIN( 413)		if ((base >= (int)2)) {
HXLINE( 413)			_hx_tmp = (base > ::thx::format::NumberFormat_obj::BASE.length);
            		}
            		else {
HXLINE( 413)			_hx_tmp = true;
            		}
HXDLIN( 413)		if (_hx_tmp) {
HXLINE( 414)			HX_STACK_DO_THROW((((HX_("invalid base ",06,a1,02,4a) + base) + HX_(", it must be between 2 and ",f6,dd,3e,5e)) + ::thx::format::NumberFormat_obj::BASE.length));
            		}
HXLINE( 415)		Bool _hx_tmp1;
HXDLIN( 415)		if ((base != (int)10)) {
HXLINE( 415)			_hx_tmp1 = (value == (int)0);
            		}
            		else {
HXLINE( 415)			_hx_tmp1 = true;
            		}
HXDLIN( 415)		if (_hx_tmp1) {
HXLINE( 416)			return (HX_("",00,00,00,00) + value);
            		}
HXLINE( 418)		HX_VARI( ::String,buf) = HX_("",00,00,00,00);
HXDLIN( 418)		HX_VAR( Int,abs);
HXLINE( 419)		if ((value < (int)0)) {
HXLINE( 418)			abs = -(value);
            		}
            		else {
HXLINE( 418)			abs = value;
            		}
HXLINE( 420)		while((abs > (int)0)){
HXLINE( 421)			::String _hx_tmp2 = ::thx::format::NumberFormat_obj::BASE.charAt(hx::Mod(abs,base));
HXDLIN( 421)			buf = (_hx_tmp2 + buf);
HXLINE( 422)			abs = ::Std_obj::_hx_int(((Float)abs / (Float)base));
            		}
HXLINE( 425)		::String _hx_tmp3;
HXDLIN( 425)		if ((value < (int)0)) {
HXLINE( 425)			_hx_tmp3 = nf->signNegative;
            		}
            		else {
HXLINE( 425)			_hx_tmp3 = HX_("",00,00,00,00);
            		}
HXDLIN( 425)		return (_hx_tmp3 + buf);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(NumberFormat_obj,toBase,return )

::String NumberFormat_obj::unit(Float f,Int decimals,::String unitSymbol, ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.NumberFormat","unit",0x15e05ce5,"thx.format.NumberFormat.unit","thx/format/NumberFormat.hx",432,0x078ed511)
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(decimals,"decimals")
            	HX_STACK_ARG(unitSymbol,"unitSymbol")
            	HX_STACK_ARG(culture,"culture")
HXLINE( 433)		HX_VARI(  ::thx::culture::NumberFormatInfo,nf) = ::thx::format::NumberFormat_obj::numberFormat(culture);
HXLINE( 434)		Bool _hx_tmp = ::Math_obj::isNaN(f);
HXDLIN( 434)		if (_hx_tmp) {
HXLINE( 435)			return nf->symbolNaN;
            		}
HXLINE( 436)		Bool _hx_tmp1 = !(::Math_obj::isFinite(f));
HXDLIN( 436)		if (_hx_tmp1) {
HXLINE( 437)			if ((f < (int)0)) {
HXLINE( 437)				return nf->symbolNegativeInfinity;
            			}
            			else {
HXLINE( 437)				return nf->symbolPositiveInfinity;
            			}
            		}
HXLINE( 438)		HX_VAR( ::String,pattern);
HXDLIN( 438)		if ((f < (int)0)) {
HXLINE( 438)			pattern = ::thx::culture::Pattern_obj::percentNegatives->__get(nf->patternNegativePercent);
            		}
            		else {
HXLINE( 438)			pattern = ::thx::culture::Pattern_obj::percentPositives->__get(nf->patternPositivePercent);
            		}
HXDLIN( 438)		HX_VARI( ::String,formatted) = ::thx::format::NumberFormat_obj::value(f,decimals,nf->groupSizesPercent,nf->separatorGroupPercent,nf->separatorDecimalPercent);
HXLINE( 440)		::String _hx_tmp2 = ::StringTools_obj::replace(pattern,HX_("n",6e,00,00,00),formatted);
HXDLIN( 440)		return ::StringTools_obj::replace(_hx_tmp2,HX_("%",25,00,00,00),unitSymbol);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(NumberFormat_obj,unit,return )

::String NumberFormat_obj::BASE;

Int NumberFormat_obj::countSymbols(::String pattern,::String symbols){
            	HX_STACK_FRAME("thx.format.NumberFormat","countSymbols",0x2815c46d,"thx.format.NumberFormat.countSymbols","thx/format/NumberFormat.hx",446,0x078ed511)
            	HX_STACK_ARG(pattern,"pattern")
            	HX_STACK_ARG(symbols,"symbols")
HXLINE( 447)		HX_VARI( Int,i) = (int)0;
HXDLIN( 447)		HX_VARI( Int,quote) = (int)0;
HXDLIN( 447)		HX_VARI( Int,count) = (int)0;
HXLINE( 450)		while((i < pattern.length)){
HXLINE( 451)			{
HXLINE( 451)				HX_VARI( ::String,_g) = pattern.substring(i,(i + (int)1));
HXDLIN( 451)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("\"",22,00,00,00)) ){
HXLINE( 451)					Int _hx_tmp = quote;
HXDLIN( 451)					switch((int)(_hx_tmp)){
            						case (int)0: {
HXLINE( 456)							quote = (int)2;
            						}
            						break;
            						case (int)2: {
HXLINE( 454)							quote = (int)0;
            						}
            						break;
            						default:{
            						}
            					}
HXLINE( 451)					goto _hx_goto_6;
            				}
            				if (  (_hx_switch_0==HX_("'",27,00,00,00)) ){
HXLINE( 451)					Int _hx_tmp1 = quote;
HXDLIN( 451)					switch((int)(_hx_tmp1)){
            						case (int)0: {
HXLINE( 455)							quote = (int)1;
            						}
            						break;
            						case (int)1: {
HXLINE( 454)							quote = (int)0;
            						}
            						break;
            						default:{
            						}
            					}
HXLINE( 451)					goto _hx_goto_6;
            				}
            				if (  (_hx_switch_0==HX_("\\",5c,00,00,00)) ){
HXLINE( 452)					++i;
HXDLIN( 452)					goto _hx_goto_6;
            				}
            				/* default */{
HXLINE( 451)					if ((quote == (int)0)) {
HXLINE( 457)						Int _hx_tmp2 = symbols.indexOf(_g,null());
HXDLIN( 457)						if ((_hx_tmp2 >= (int)0)) {
HXLINE( 457)							++count;
            						}
            					}
            				}
            				_hx_goto_6:;
            			}
HXLINE( 460)			++i;
            		}
HXLINE( 462)		return count;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NumberFormat_obj,countSymbols,return )

::String NumberFormat_obj::customFormatDecimalFraction(::String d,::String pattern, ::thx::culture::NumberFormatInfo nf){
            	HX_STACK_FRAME("thx.format.NumberFormat","customFormatDecimalFraction",0x009afc8a,"thx.format.NumberFormat.customFormatDecimalFraction","thx/format/NumberFormat.hx",465,0x078ed511)
            	HX_STACK_ARG(d,"d")
            	HX_STACK_ARG(pattern,"pattern")
            	HX_STACK_ARG(nf,"nf")
HXLINE( 466)		HX_VARI( ::String,buf) = HX_("",00,00,00,00);
HXDLIN( 466)		HX_VARI( Int,i) = (int)0;
HXDLIN( 466)		HX_VARI( Int,quote) = (int)0;
HXDLIN( 466)		HX_VARI( ::Array< ::String >,p) = d.split(HX_("",00,00,00,00));
HXLINE( 471)		while((i < pattern.length)){
HXLINE( 472)			{
HXLINE( 472)				HX_VARI( ::String,_g) = pattern.substring(i,(i + (int)1));
HXDLIN( 472)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("\"",22,00,00,00)) ){
HXLINE( 472)					Int _hx_tmp = quote;
HXDLIN( 472)					switch((int)(_hx_tmp)){
            						case (int)0: {
HXLINE( 477)							quote = (int)2;
            						}
            						break;
            						case (int)1: {
HXLINE( 485)							hx::AddEq(buf,_g);
            						}
            						break;
            						case (int)2: {
HXLINE( 482)							quote = (int)0;
            						}
            						break;
            						default:{
HXLINE( 499)							hx::AddEq(buf,_g);
            						}
            					}
HXLINE( 472)					goto _hx_goto_8;
            				}
            				if (  (_hx_switch_0==HX_("#",23,00,00,00)) ){
HXLINE( 472)					switch((int)(quote)){
            						case (int)0: {
HXLINE( 491)							::String _hx_tmp1;
HXDLIN( 491)							Bool _hx_tmp2 = (p->length == (int)0);
HXDLIN( 491)							if (_hx_tmp2) {
HXLINE( 491)								_hx_tmp1 = HX_("",00,00,00,00);
            							}
            							else {
HXLINE( 491)								_hx_tmp1 = ( (::String)(p->shift()) );
            							}
HXDLIN( 491)							hx::AddEq(buf,_hx_tmp1);
            						}
            						break;
            						case (int)1: case (int)2: {
HXLINE( 485)							hx::AddEq(buf,_g);
            						}
            						break;
            						default:{
HXLINE( 499)							hx::AddEq(buf,_g);
            						}
            					}
HXLINE( 472)					goto _hx_goto_8;
            				}
            				if (  (_hx_switch_0==HX_("$",24,00,00,00)) ){
HXLINE( 472)					switch((int)(quote)){
            						case (int)0: {
HXLINE( 493)							hx::AddEq(buf,nf->symbolCurrency);
            						}
            						break;
            						case (int)1: case (int)2: {
HXLINE( 485)							hx::AddEq(buf,_g);
            						}
            						break;
            						default:{
HXLINE( 499)							hx::AddEq(buf,_g);
            						}
            					}
HXLINE( 472)					goto _hx_goto_8;
            				}
            				if (  (_hx_switch_0==HX_("%",25,00,00,00)) ){
HXLINE( 472)					switch((int)(quote)){
            						case (int)0: {
HXLINE( 495)							hx::AddEq(buf,nf->symbolPercent);
            						}
            						break;
            						case (int)1: case (int)2: {
HXLINE( 485)							hx::AddEq(buf,_g);
            						}
            						break;
            						default:{
HXLINE( 499)							hx::AddEq(buf,_g);
            						}
            					}
HXLINE( 472)					goto _hx_goto_8;
            				}
            				if (  (_hx_switch_0==HX_("'",27,00,00,00)) ){
HXLINE( 472)					Int _hx_tmp3 = quote;
HXDLIN( 472)					switch((int)(_hx_tmp3)){
            						case (int)0: {
HXLINE( 479)							quote = (int)1;
            						}
            						break;
            						case (int)1: {
HXLINE( 482)							quote = (int)0;
            						}
            						break;
            						case (int)2: {
HXLINE( 485)							hx::AddEq(buf,_g);
            						}
            						break;
            						default:{
HXLINE( 499)							hx::AddEq(buf,_g);
            						}
            					}
HXLINE( 472)					goto _hx_goto_8;
            				}
            				if (  (_hx_switch_0==HX_("0",30,00,00,00)) ){
HXLINE( 472)					switch((int)(quote)){
            						case (int)0: {
HXLINE( 488)							::String _hx_tmp4;
HXDLIN( 488)							Bool _hx_tmp5 = (p->length == (int)0);
HXDLIN( 488)							if (_hx_tmp5) {
HXLINE( 488)								_hx_tmp4 = HX_("0",30,00,00,00);
            							}
            							else {
HXLINE( 488)								_hx_tmp4 = ( (::String)(p->shift()) );
            							}
HXDLIN( 488)							hx::AddEq(buf,_hx_tmp4);
            						}
            						break;
            						case (int)1: case (int)2: {
HXLINE( 485)							hx::AddEq(buf,_g);
            						}
            						break;
            						default:{
HXLINE( 499)							hx::AddEq(buf,_g);
            						}
            					}
HXLINE( 472)					goto _hx_goto_8;
            				}
            				if (  (_hx_switch_0==HX_("\\",5c,00,00,00)) ){
HXLINE( 474)					++i;
HXLINE( 475)					::String _hx_tmp6 = pattern.substring(i,(i + (int)1));
HXDLIN( 475)					hx::AddEq(buf,_hx_tmp6);
HXLINE( 473)					goto _hx_goto_8;
            				}
            				if (  (_hx_switch_0==HX_("\xe2""\x80""\xb0""",92,ed,ab,00)) ){
HXLINE( 472)					switch((int)(quote)){
            						case (int)0: {
HXLINE( 497)							hx::AddEq(buf,nf->symbolPermille);
            						}
            						break;
            						case (int)1: case (int)2: {
HXLINE( 485)							hx::AddEq(buf,_g);
            						}
            						break;
            						default:{
HXLINE( 499)							hx::AddEq(buf,_g);
            						}
            					}
HXLINE( 472)					goto _hx_goto_8;
            				}
            				/* default */{
HXLINE( 472)					switch((int)(quote)){
            						case (int)1: case (int)2: {
HXLINE( 485)							hx::AddEq(buf,_g);
            						}
            						break;
            						default:{
HXLINE( 499)							hx::AddEq(buf,_g);
            						}
            					}
            				}
            				_hx_goto_8:;
            			}
HXLINE( 501)			++i;
            		}
HXLINE( 503)		return buf;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(NumberFormat_obj,customFormatDecimalFraction,return )

::String NumberFormat_obj::customFormatF(Float f,::String pattern, ::thx::culture::NumberFormatInfo nf,Bool isCurrency,Bool isPercent){
            	HX_STACK_FRAME("thx.format.NumberFormat","customFormatF",0x5edbc2fd,"thx.format.NumberFormat.customFormatF","thx/format/NumberFormat.hx",507,0x078ed511)
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(pattern,"pattern")
            	HX_STACK_ARG(nf,"nf")
            	HX_STACK_ARG(isCurrency,"isCurrency")
            	HX_STACK_ARG(isPercent,"isPercent")
HXLINE( 508)		if (isPercent) {
HXLINE( 509)			Int _hx_tmp;
HXDLIN( 509)			Bool _hx_tmp1 = ::thx::format::NumberFormat_obj::hasSymbols(pattern,HX_("\xe2""\x80""\xb0""",92,ed,ab,00));
HXDLIN( 509)			if (_hx_tmp1) {
HXLINE( 509)				_hx_tmp = (int)1000;
            			}
            			else {
HXLINE( 509)				_hx_tmp = (int)100;
            			}
HXDLIN( 509)			hx::MultEq(f,_hx_tmp);
            		}
HXLINE( 511)		HX_VARI( ::Array< ::String >,exp) = ::thx::format::NumberFormat_obj::splitPattern(pattern,HX_("eE",40,58,00,00));
HXLINE( 512)		Bool _hx_tmp2 = (exp->length > (int)1);
HXDLIN( 512)		if (_hx_tmp2) {
HXLINE( 513)			HX_VARI(  ::Dynamic,info) = ::thx::format::NumberFormat_obj::exponentialInfo(f);
HXLINE( 514)			Int _hx_tmp3 = exp->__get((int)0).length;
HXDLIN( 514)			Int _hx_tmp4 = (exp->__get((int)0).length + (int)1);
HXLINE( 513)			HX_VARI( ::String,symbol) = pattern.substring(_hx_tmp3,_hx_tmp4);
HXDLIN( 513)			HX_VARI( Bool,forceSign) = ::StringTools_obj::startsWith(exp->__get((int)1),HX_("+",2b,00,00,00));
HXLINE( 516)			Bool _hx_tmp5;
HXDLIN( 516)			if (!(forceSign)) {
HXLINE( 516)				_hx_tmp5 = ::StringTools_obj::startsWith(exp->__get((int)1),HX_("-",2d,00,00,00));
            			}
            			else {
HXLINE( 516)				_hx_tmp5 = true;
            			}
HXDLIN( 516)			if (_hx_tmp5) {
HXLINE( 517)				::String _hx_tmp6 = exp->__get((int)1).substring((int)1,null());
HXDLIN( 517)				exp[(int)1] = _hx_tmp6;
            			}
HXLINE( 518)			Float _hx_tmp7 = ( (Float)(info->__Field(HX_("f",66,00,00,00),hx::paccDynamic)) );
HXDLIN( 518)			::String _hx_tmp8 = ::thx::format::NumberFormat_obj::customIntegerAndFraction(_hx_tmp7,exp->__get((int)0),nf,isCurrency,isPercent);
HXDLIN( 518)			::String _hx_tmp9 = (_hx_tmp8 + symbol);
HXLINE( 520)			::String _hx_tmp10;
HXDLIN( 520)			if (hx::IsLess( info->__Field(HX_("e",65,00,00,00),hx::paccDynamic),(int)0 )) {
HXLINE( 520)				_hx_tmp10 = nf->signNegative;
            			}
            			else {
HXLINE( 520)				if (forceSign) {
HXLINE( 520)					_hx_tmp10 = nf->signPositive;
            				}
            				else {
HXLINE( 520)					_hx_tmp10 = HX_("",00,00,00,00);
            				}
            			}
HXLINE( 518)			::String _hx_tmp11 = (_hx_tmp9 + _hx_tmp10);
HXLINE( 521)			Float _hx_tmp12 = ::Math_obj::abs( ::Dynamic(info->__Field(HX_("e",65,00,00,00),hx::paccDynamic)));
HXDLIN( 521)			::String _hx_tmp13 = ::thx::format::NumberFormat_obj::customFormatInteger((HX_("",00,00,00,00) + _hx_tmp12),exp->__get((int)1),nf,isCurrency,isPercent);
HXLINE( 518)			return (_hx_tmp11 + _hx_tmp13);
            		}
            		else {
HXLINE( 523)			return ::thx::format::NumberFormat_obj::customIntegerAndFraction(f,pattern,nf,isCurrency,isPercent);
            		}
HXLINE( 512)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(NumberFormat_obj,customFormatF,return )

::String NumberFormat_obj::customFormatInteger(::String v,::String pattern, ::thx::culture::NumberFormatInfo nf,Bool isCurrency,Bool isPercent){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< ::String >,p) HXARGC(1)
            		::String _hx_run(::hx::EnumBase _){
            			HX_STACK_FRAME("thx.format.NumberFormat","customFormatInteger",0x575e0b95,"thx.format.NumberFormat.customFormatInteger","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            			HX_STACK_ARG(_,"_")
HXLINE( 608)			Int _hx_tmp23 = ( ( ::hx::EnumBase)(_) )->_hx_getIndex();
HXDLIN( 608)			switch((int)(_hx_tmp23)){
            				case (int)0: {
HXLINE(  86)					return _->_hx_getString(0);
            				}
            				break;
            				case (int)1: {
HXLINE( 610)					HX_VARI_NAME( Bool,first1,"first") = _->_hx_getBool(0);
HXDLIN( 610)					Bool _hx_tmp24 = (p->length == (int)0);
HXDLIN( 610)					if (_hx_tmp24) {
HXLINE(  86)						return HX_("",00,00,00,00);
            					}
            					else {
HXLINE( 610)						if (first1) {
HXLINE(  86)							return p->join(HX_("",00,00,00,00));
            						}
            						else {
HXLINE(  86)							return ( (::String)(p->pop()) );
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 611)					if (_->_hx_getBool(0)) {
HXLINE(  86)						return p->join(HX_("",00,00,00,00));
            					}
            					else {
HXLINE(  86)						return ( (::String)(p->pop()) );
            					}
            				}
            				break;
            			}
HXLINE( 608)			return null();
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.format.NumberFormat","customFormatInteger",0x575e0b95,"thx.format.NumberFormat.customFormatInteger","thx/format/NumberFormat.hx",527,0x078ed511)
            	HX_STACK_ARG(v,"v")
            	HX_STACK_ARG(pattern,"pattern")
            	HX_STACK_ARG(nf,"nf")
            	HX_STACK_ARG(isCurrency,"isCurrency")
            	HX_STACK_ARG(isPercent,"isPercent")
HXLINE( 528)		HX_VARI( ::Array< ::Dynamic>,buf) = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 528)		HX_VARI( Int,i) = (int)0;
HXDLIN( 528)		HX_VARI( Int,quote) = (int)0;
HXDLIN( 528)		HX_VARI( ::Array< ::String >,p) = v.split(HX_("",00,00,00,00));
HXDLIN( 528)		HX_VARI( ::String,lbuf) = HX_("",00,00,00,00);
HXDLIN( 528)		HX_VARI( Bool,first) = true;
HXDLIN( 528)		HX_VARI( Bool,useGroups) = false;
HXDLIN( 528)		HX_VARI( Int,zeroes) = (int)0;
HXLINE( 537)		while((i < pattern.length)){
HXLINE( 538)			{
HXLINE( 538)				HX_VARI( ::String,_g) = pattern.substring(i,(i + (int)1));
HXDLIN( 538)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("\"",22,00,00,00)) ){
HXLINE( 538)					switch((int)(quote)){
            						case (int)0: {
HXLINE( 543)							quote = (int)2;
            						}
            						break;
            						case (int)1: {
HXLINE( 553)							hx::AddEq(lbuf,_g);
            						}
            						break;
            						case (int)2: {
HXLINE( 548)							quote = (int)0;
HXLINE( 549)							::hx::EnumBase _hx_tmp = ::thx::format::_NumberFormat::CustomFormat_obj::Literal(lbuf);
HXDLIN( 549)							buf->push(_hx_tmp);
HXLINE( 550)							lbuf = HX_("",00,00,00,00);
            						}
            						break;
            						default:{
HXLINE( 570)							::hx::EnumBase _hx_tmp1 = ::thx::format::_NumberFormat::CustomFormat_obj::Literal(_g);
HXDLIN( 570)							buf->push(_hx_tmp1);
            						}
            					}
HXLINE( 538)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==HX_("#",23,00,00,00)) ){
HXLINE( 538)					switch((int)(quote)){
            						case (int)0: {
HXLINE( 561)							::hx::EnumBase _hx_tmp2 = ::thx::format::_NumberFormat::CustomFormat_obj::Hash(first);
HXDLIN( 561)							buf->push(_hx_tmp2);
HXLINE( 562)							first = false;
            						}
            						break;
            						case (int)1: case (int)2: {
HXLINE( 553)							hx::AddEq(lbuf,_g);
            						}
            						break;
            						default:{
HXLINE( 570)							::hx::EnumBase _hx_tmp3 = ::thx::format::_NumberFormat::CustomFormat_obj::Literal(_g);
HXDLIN( 570)							buf->push(_hx_tmp3);
            						}
            					}
HXLINE( 538)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==HX_("$",24,00,00,00)) ){
HXLINE( 538)					switch((int)(quote)){
            						case (int)0: {
HXLINE( 564)							::hx::EnumBase _hx_tmp4 = ::thx::format::_NumberFormat::CustomFormat_obj::Literal(nf->symbolCurrency);
HXDLIN( 564)							buf->push(_hx_tmp4);
            						}
            						break;
            						case (int)1: case (int)2: {
HXLINE( 553)							hx::AddEq(lbuf,_g);
            						}
            						break;
            						default:{
HXLINE( 570)							::hx::EnumBase _hx_tmp5 = ::thx::format::_NumberFormat::CustomFormat_obj::Literal(_g);
HXDLIN( 570)							buf->push(_hx_tmp5);
            						}
            					}
HXLINE( 538)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==HX_("%",25,00,00,00)) ){
HXLINE( 538)					switch((int)(quote)){
            						case (int)0: {
HXLINE( 566)							::hx::EnumBase _hx_tmp6 = ::thx::format::_NumberFormat::CustomFormat_obj::Literal(nf->symbolPercent);
HXDLIN( 566)							buf->push(_hx_tmp6);
            						}
            						break;
            						case (int)1: case (int)2: {
HXLINE( 553)							hx::AddEq(lbuf,_g);
            						}
            						break;
            						default:{
HXLINE( 570)							::hx::EnumBase _hx_tmp7 = ::thx::format::_NumberFormat::CustomFormat_obj::Literal(_g);
HXDLIN( 570)							buf->push(_hx_tmp7);
            						}
            					}
HXLINE( 538)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==HX_("'",27,00,00,00)) ){
HXLINE( 538)					switch((int)(quote)){
            						case (int)0: {
HXLINE( 545)							quote = (int)1;
            						}
            						break;
            						case (int)1: {
HXLINE( 548)							quote = (int)0;
HXLINE( 549)							::hx::EnumBase _hx_tmp8 = ::thx::format::_NumberFormat::CustomFormat_obj::Literal(lbuf);
HXDLIN( 549)							buf->push(_hx_tmp8);
HXLINE( 550)							lbuf = HX_("",00,00,00,00);
            						}
            						break;
            						case (int)2: {
HXLINE( 553)							hx::AddEq(lbuf,_g);
            						}
            						break;
            						default:{
HXLINE( 570)							::hx::EnumBase _hx_tmp9 = ::thx::format::_NumberFormat::CustomFormat_obj::Literal(_g);
HXDLIN( 570)							buf->push(_hx_tmp9);
            						}
            					}
HXLINE( 538)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==HX_(",",2c,00,00,00)) ){
HXLINE( 538)					switch((int)(quote)){
            						case (int)0: {
HXLINE( 555)							useGroups = true;
            						}
            						break;
            						case (int)1: case (int)2: {
HXLINE( 553)							hx::AddEq(lbuf,_g);
            						}
            						break;
            						default:{
HXLINE( 570)							::hx::EnumBase _hx_tmp10 = ::thx::format::_NumberFormat::CustomFormat_obj::Literal(_g);
HXDLIN( 570)							buf->push(_hx_tmp10);
            						}
            					}
HXLINE( 538)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==HX_("0",30,00,00,00)) ){
HXLINE( 538)					switch((int)(quote)){
            						case (int)0: {
HXLINE( 557)							::hx::EnumBase _hx_tmp11 = ::thx::format::_NumberFormat::CustomFormat_obj::Zero(first);
HXDLIN( 557)							buf->push(_hx_tmp11);
HXLINE( 558)							first = false;
HXLINE( 559)							++zeroes;
            						}
            						break;
            						case (int)1: case (int)2: {
HXLINE( 553)							hx::AddEq(lbuf,_g);
            						}
            						break;
            						default:{
HXLINE( 570)							::hx::EnumBase _hx_tmp12 = ::thx::format::_NumberFormat::CustomFormat_obj::Literal(_g);
HXDLIN( 570)							buf->push(_hx_tmp12);
            						}
            					}
HXLINE( 538)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==HX_("\\",5c,00,00,00)) ){
HXLINE( 540)					++i;
HXLINE( 541)					::String _hx_tmp13 = pattern.substring(i,(i + (int)1));
HXDLIN( 541)					::hx::EnumBase _hx_tmp14 = ::thx::format::_NumberFormat::CustomFormat_obj::Literal(_hx_tmp13);
HXDLIN( 541)					buf->push(_hx_tmp14);
HXLINE( 539)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==HX_("\xe2""\x80""\xb0""",92,ed,ab,00)) ){
HXLINE( 538)					switch((int)(quote)){
            						case (int)0: {
HXLINE( 568)							::hx::EnumBase _hx_tmp15 = ::thx::format::_NumberFormat::CustomFormat_obj::Literal(nf->symbolPermille);
HXDLIN( 568)							buf->push(_hx_tmp15);
            						}
            						break;
            						case (int)1: case (int)2: {
HXLINE( 553)							hx::AddEq(lbuf,_g);
            						}
            						break;
            						default:{
HXLINE( 570)							::hx::EnumBase _hx_tmp16 = ::thx::format::_NumberFormat::CustomFormat_obj::Literal(_g);
HXDLIN( 570)							buf->push(_hx_tmp16);
            						}
            					}
HXLINE( 538)					goto _hx_goto_10;
            				}
            				/* default */{
HXLINE( 538)					switch((int)(quote)){
            						case (int)1: case (int)2: {
HXLINE( 553)							hx::AddEq(lbuf,_g);
            						}
            						break;
            						default:{
HXLINE( 570)							::hx::EnumBase _hx_tmp17 = ::thx::format::_NumberFormat::CustomFormat_obj::Literal(_g);
HXDLIN( 570)							buf->push(_hx_tmp17);
            						}
            					}
            				}
            				_hx_goto_10:;
            			}
HXLINE( 572)			++i;
            		}
HXLINE( 574)		Bool _hx_tmp18 = (lbuf.length > (int)0);
HXDLIN( 574)		if (_hx_tmp18) {
HXLINE( 575)			::hx::EnumBase _hx_tmp19 = ::thx::format::_NumberFormat::CustomFormat_obj::Literal(lbuf);
HXDLIN( 575)			buf->push(_hx_tmp19);
            		}
HXLINE( 577)		{
HXLINE( 577)			HX_VARI( Int,_g1) = p->length;
HXDLIN( 577)			HX_VARI_NAME( Int,_g2,"_g") = zeroes;
HXDLIN( 577)			while((_g1 < _g2)){
HXLINE( 577)				++_g1;
HXLINE( 578)				p->unshift(HX_("0",30,00,00,00));
            			}
            		}
HXLINE( 580)		if (useGroups) {
HXLINE( 581)			i = (p->length - (int)1);
HXLINE( 582)			HX_VAR( ::Array< Int >,groups);
HXDLIN( 582)			if (isCurrency) {
HXLINE( 582)				groups = nf->groupSizesCurrency->copy();
            			}
            			else {
HXLINE( 584)				if (isPercent) {
HXLINE( 582)					groups = nf->groupSizesPercent->copy();
            				}
            				else {
HXLINE( 582)					groups = nf->groupSizesNumber->copy();
            				}
            			}
HXDLIN( 582)			HX_VARI(  ::Dynamic,group) = groups->shift();
HXDLIN( 582)			HX_VARI( Int,pos) = (int)0;
HXLINE( 589)			while((i >= (int)0)){
HXLINE( 590)				if (hx::IsEq( group,(int)0 )) {
HXLINE( 590)					goto _hx_goto_12;
            				}
HXLINE( 591)				if (hx::IsEq( pos,group )) {
HXLINE( 592)					::String _hx_tmp20 = p->__get(i);
HXDLIN( 592)					::String _hx_tmp21;
HXDLIN( 592)					if (isCurrency) {
HXLINE( 592)						_hx_tmp21 = nf->separatorGroupCurrency;
            					}
            					else {
HXLINE( 594)						if (isPercent) {
HXLINE( 592)							_hx_tmp21 = nf->separatorGroupPercent;
            						}
            						else {
HXLINE( 592)							_hx_tmp21 = nf->separatorGroupNumber;
            						}
            					}
HXDLIN( 592)					p[i] = (_hx_tmp20 + _hx_tmp21);
HXLINE( 597)					pos = (int)0;
HXLINE( 598)					Bool _hx_tmp22 = (groups->length > (int)0);
HXDLIN( 598)					if (_hx_tmp22) {
HXLINE( 599)						group = groups->shift();
            					}
            				}
            				else {
HXLINE( 601)					++pos;
HXLINE( 602)					--i;
            				}
            			}
            			_hx_goto_12:;
            		}
HXLINE( 607)		buf->reverse();
HXLINE( 608)		HX_VARI( ::Array< ::String >,r) = buf->map( ::Dynamic(new _hx_Closure_0(p)));
HXLINE( 613)		r->reverse();
HXLINE( 614)		return r->join(HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(NumberFormat_obj,customFormatInteger,return )

::String NumberFormat_obj::customIntegerAndFraction(Float f,::String pattern, ::thx::culture::NumberFormatInfo nf,Bool isCurrency,Bool isPercent){
            	HX_STACK_FRAME("thx.format.NumberFormat","customIntegerAndFraction",0x9317a7cd,"thx.format.NumberFormat.customIntegerAndFraction","thx/format/NumberFormat.hx",617,0x078ed511)
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(pattern,"pattern")
            	HX_STACK_ARG(nf,"nf")
            	HX_STACK_ARG(isCurrency,"isCurrency")
            	HX_STACK_ARG(isPercent,"isPercent")
HXLINE( 618)		HX_VARI( ::Array< ::String >,p) = ::thx::format::NumberFormat_obj::splitPattern(pattern,HX_(".",2e,00,00,00));
HXLINE( 619)		Int _hx_tmp = p->__get((int)0).length;
HXLINE( 618)		HX_VARI( Int,power) = (_hx_tmp - (p[(int)0] = ::thx::Strings_obj::trimCharsRight(p->__get((int)0),HX_(",",2c,00,00,00))).length);
HXLINE( 620)		Float _hx_tmp1 = ::Math_obj::pow((int)1000,power);
HXDLIN( 620)		hx::DivEq(f,_hx_tmp1);
HXLINE( 621)		Bool _hx_tmp2 = (p->length == (int)1);
HXDLIN( 621)		if (_hx_tmp2) {
HXLINE( 622)			Int _hx_tmp3 = ::Math_obj::round(f);
HXDLIN( 622)			return ::thx::format::NumberFormat_obj::customFormatInteger((HX_("",00,00,00,00) + _hx_tmp3),p->__get((int)0),nf,isCurrency,isPercent);
            		}
            		else {
HXLINE( 624)			Int _hx_tmp4 = ::thx::format::NumberFormat_obj::countSymbols(p->__get((int)1),HX_("#0",ad,1e,00,00));
HXDLIN( 624)			f = ::thx::Floats_obj::roundTo(f,_hx_tmp4);
HXLINE( 625)			HX_VARI( ::Array< ::String >,np) = ::thx::format::NumberFormat_obj::splitOnDecimalSeparator(f);
HXLINE( 626)			::String _hx_tmp5 = ::thx::format::NumberFormat_obj::customFormatInteger(np->__get((int)0),p->__get((int)0),nf,isCurrency,isPercent);
HXLINE( 627)			::String _hx_tmp6;
HXDLIN( 627)			if (isCurrency) {
HXLINE( 627)				_hx_tmp6 = nf->separatorDecimalCurrency;
            			}
            			else {
HXLINE( 629)				if (isPercent) {
HXLINE( 627)					_hx_tmp6 = nf->separatorDecimalPercent;
            				}
            				else {
HXLINE( 627)					_hx_tmp6 = nf->separatorDecimalNumber;
            				}
            			}
HXLINE( 626)			::String _hx_tmp7 = (_hx_tmp5 + _hx_tmp6);
HXLINE( 632)			::String _hx_tmp8;
HXDLIN( 632)			if (hx::IsNull( np )) {
HXLINE( 632)				_hx_tmp8 = null();
            			}
            			else {
HXLINE( 632)				HX_VARI( ::String,_1) = np->__get((int)1);
HXDLIN( 632)				if (hx::IsNull( _1 )) {
HXLINE( 632)					_hx_tmp8 = null();
            				}
            				else {
HXLINE( 632)					_hx_tmp8 = _1;
            				}
            			}
HXLINE( 139)			HX_VARI( ::String,t) = _hx_tmp8;
HXDLIN( 139)			::String _hx_tmp9;
HXDLIN( 139)			if (hx::IsNotNull( t )) {
HXLINE( 139)				_hx_tmp9 = t;
            			}
            			else {
HXLINE( 139)				_hx_tmp9 = HX_("0",30,00,00,00);
            			}
HXLINE( 632)			::String _hx_tmp10 = ::thx::format::NumberFormat_obj::customFormatDecimalFraction(_hx_tmp9,p->__get((int)1),nf);
HXLINE( 626)			return (_hx_tmp7 + _hx_tmp10);
            		}
HXLINE( 621)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(NumberFormat_obj,customIntegerAndFraction,return )

 ::Dynamic NumberFormat_obj::exponentialInfo(Float f){
            	HX_STACK_FRAME("thx.format.NumberFormat","exponentialInfo",0x7ea4b8d2,"thx.format.NumberFormat.exponentialInfo","thx/format/NumberFormat.hx",636,0x078ed511)
            	HX_STACK_ARG(f,"f")
HXLINE( 637)		Float _hx_tmp = ::Math_obj::abs(f);
HXDLIN( 637)		HX_VARI( ::String,s) = (HX_("",00,00,00,00) + _hx_tmp).toLowerCase();
HXDLIN( 637)		HX_VARI( Int,pose) = s.indexOf(HX_("e",65,00,00,00),null());
HXDLIN( 637)		HX_VAR( ::Array< ::String >,p);
HXDLIN( 637)		HX_VAR(  ::Dynamic,e);
HXLINE( 641)		if ((pose > (int)0)) {
HXLINE( 642)			p = s.substring((int)0,pose).split(HX_(".",2e,00,00,00));
HXLINE( 643)			::String _hx_tmp1 = s.substring((pose + (int)1),null());
HXDLIN( 643)			e = ::thx::Ints_obj::parse(_hx_tmp1,null());
            		}
            		else {
HXLINE( 645)			p = s.split(HX_(".",2e,00,00,00))->concat(::Array_obj< ::String >::__new(1)->init(0,HX_("",00,00,00,00)));
HXLINE( 646)			e = (int)0;
HXLINE( 647)			Bool _hx_tmp2 = (p->__get((int)0).length > (int)1);
HXDLIN( 647)			if (_hx_tmp2) {
HXLINE( 648)				e = (p->__get((int)0).length - (int)1);
HXLINE( 649)				::String _hx_tmp3 = p->__get((int)0).substring((int)1,null());
HXDLIN( 649)				p[(int)1] = (_hx_tmp3 + p->__get((int)1));
HXLINE( 650)				::String _hx_tmp4 = p->__get((int)0).substring((int)0,(int)1);
HXDLIN( 650)				p[(int)0] = _hx_tmp4;
            			}
            			else {
HXLINE( 651)				if ((p->__get((int)0) == HX_("0",30,00,00,00))) {
HXLINE( 652)					Int _hx_tmp5 = ((int)1 + p->__get((int)1).length);
HXDLIN( 652)					e = -((_hx_tmp5 - ::thx::Strings_obj::trimCharsLeft(p->__get((int)1),HX_("0",30,00,00,00)).length));
HXLINE( 653)					::String _hx_tmp6 = p->__get((int)1).substring((-(e) - (int)1),null());
HXDLIN( 653)					p[(int)1] = _hx_tmp6;
HXLINE( 654)					::String _hx_tmp7 = p->__get((int)1).substring((int)0,(int)1);
HXDLIN( 654)					p[(int)0] = _hx_tmp7;
HXLINE( 655)					::String _hx_tmp8 = p->__get((int)1).substring((int)1,null());
HXDLIN( 655)					p[(int)1] = _hx_tmp8;
            				}
            			}
            		}
HXLINE( 660)		Int _hx_tmp9;
HXDLIN( 660)		if ((f < (int)0)) {
HXLINE( 660)			_hx_tmp9 = (int)-1;
            		}
            		else {
HXLINE( 660)			_hx_tmp9 = (int)1;
            		}
HXDLIN( 660)		::String _hx_tmp10 = p->slice((int)0,(int)2)->join(HX_(".",2e,00,00,00));
HXDLIN( 660)		Float _hx_tmp11 = ::Std_obj::parseFloat(_hx_tmp10);
HXLINE( 658)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("e",65,00,00,00),e)
            			->setFixed(1,HX_("f",66,00,00,00),(_hx_tmp9 * _hx_tmp11)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NumberFormat_obj,exponentialInfo,return )

Bool NumberFormat_obj::hasSymbols(::String pattern,::String symbols){
            	HX_STACK_FRAME("thx.format.NumberFormat","hasSymbols",0x71e1b702,"thx.format.NumberFormat.hasSymbols","thx/format/NumberFormat.hx",664,0x078ed511)
            	HX_STACK_ARG(pattern,"pattern")
            	HX_STACK_ARG(symbols,"symbols")
HXLINE( 665)		HX_VARI( Int,i) = (int)0;
HXDLIN( 665)		HX_VARI( Int,quote) = (int)0;
HXLINE( 667)		while((i < pattern.length)){
HXLINE( 668)			{
HXLINE( 668)				HX_VARI( ::String,_g) = pattern.substring(i,(i + (int)1));
HXDLIN( 668)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("\"",22,00,00,00)) ){
HXLINE( 668)					Int _hx_tmp = quote;
HXDLIN( 668)					switch((int)(_hx_tmp)){
            						case (int)0: {
HXLINE( 673)							quote = (int)2;
            						}
            						break;
            						case (int)2: {
HXLINE( 671)							quote = (int)0;
            						}
            						break;
            						default:{
            						}
            					}
HXLINE( 668)					goto _hx_goto_14;
            				}
            				if (  (_hx_switch_0==HX_("'",27,00,00,00)) ){
HXLINE( 668)					Int _hx_tmp1 = quote;
HXDLIN( 668)					switch((int)(_hx_tmp1)){
            						case (int)0: {
HXLINE( 672)							quote = (int)1;
            						}
            						break;
            						case (int)1: {
HXLINE( 671)							quote = (int)0;
            						}
            						break;
            						default:{
            						}
            					}
HXLINE( 668)					goto _hx_goto_14;
            				}
            				if (  (_hx_switch_0==HX_("\\",5c,00,00,00)) ){
HXLINE( 669)					++i;
HXDLIN( 669)					goto _hx_goto_14;
            				}
            				/* default */{
HXLINE( 668)					if ((quote == (int)0)) {
HXLINE( 674)						Int _hx_tmp2 = symbols.indexOf(_g,null());
HXDLIN( 674)						if ((_hx_tmp2 >= (int)0)) {
HXLINE( 674)							return true;
            						}
            					}
            				}
            				_hx_goto_14:;
            			}
HXLINE( 677)			++i;
            		}
HXLINE( 679)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NumberFormat_obj,hasSymbols,return )

::String NumberFormat_obj::intPart(::String s,::Array< Int > groupSizes,::String groupSeparator){
            	HX_STACK_FRAME("thx.format.NumberFormat","intPart",0x880420c1,"thx.format.NumberFormat.intPart","thx/format/NumberFormat.hx",682,0x078ed511)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(groupSizes,"groupSizes")
            	HX_STACK_ARG(groupSeparator,"groupSeparator")
HXLINE( 683)		HX_VARI( ::Array< ::String >,buf) = ::Array_obj< ::String >::__new(0);
HXDLIN( 683)		HX_VARI( ::Array< Int >,sizes) = groupSizes->copy();
HXDLIN( 683)		HX_VARI(  ::Dynamic,size) = sizes->shift();
HXLINE( 688)		while((s.length > (int)0)){
HXLINE( 689)			if (hx::IsEq( size,(int)0 )) {
HXLINE( 690)				buf->unshift(s);
HXLINE( 691)				s = HX_("",00,00,00,00);
            			}
            			else {
HXLINE( 692)				Bool _hx_tmp = hx::IsGreater( s.length,size );
HXDLIN( 692)				if (_hx_tmp) {
HXLINE( 693)					Int _hx_tmp1 = (s.length - size);
HXDLIN( 693)					::String _hx_tmp2 = s.substring(_hx_tmp1,null());
HXDLIN( 693)					buf->unshift(_hx_tmp2);
HXLINE( 694)					Int _hx_tmp3 = (s.length - size);
HXDLIN( 694)					s = s.substring((int)0,_hx_tmp3);
HXLINE( 695)					Bool _hx_tmp4 = (sizes->length > (int)0);
HXDLIN( 695)					if (_hx_tmp4) {
HXLINE( 696)						size = sizes->shift();
            					}
            				}
            				else {
HXLINE( 698)					buf->unshift(s);
HXLINE( 699)					s = HX_("",00,00,00,00);
            				}
            			}
            		}
HXLINE( 702)		return buf->join(groupSeparator);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(NumberFormat_obj,intPart,return )

 ::thx::culture::NumberFormatInfo NumberFormat_obj::numberFormat( ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.NumberFormat","numberFormat",0x9731a241,"thx.format.NumberFormat.numberFormat","thx/format/NumberFormat.hx",706,0x078ed511)
            	HX_STACK_ARG(culture,"culture")
HXLINE( 706)		Bool _hx_tmp;
HXDLIN( 706)		if (hx::IsNotNull( culture )) {
HXLINE( 706)			_hx_tmp = hx::IsNotNull( culture->number );
            		}
            		else {
HXLINE( 706)			_hx_tmp = false;
            		}
HXDLIN( 706)		if (_hx_tmp) {
HXLINE( 706)			return culture->number;
            		}
            		else {
HXLINE( 706)			return ::thx::format::Format_obj::get_defaultCulture()->number;
            		}
HXDLIN( 706)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NumberFormat_obj,numberFormat,return )

::String NumberFormat_obj::pad(::String s,Int len,Bool round){
            	HX_STACK_FRAME("thx.format.NumberFormat","pad",0x6640e612,"thx.format.NumberFormat.pad","thx/format/NumberFormat.hx",708,0x078ed511)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(len,"len")
            	HX_STACK_ARG(round,"round")
HXLINE( 709)		HX_VARI( ::String,_0) = s;
HXDLIN( 709)		::String _hx_tmp;
HXDLIN( 709)		if (hx::IsNull( _0 )) {
HXLINE( 709)			_hx_tmp = null();
            		}
            		else {
HXLINE( 709)			_hx_tmp = _0;
            		}
HXLINE( 139)		HX_VARI( ::String,t) = _hx_tmp;
HXDLIN( 139)		if (hx::IsNotNull( t )) {
HXLINE( 139)			s = t;
            		}
            		else {
HXLINE( 709)			s = HX_("",00,00,00,00);
            		}
HXLINE( 710)		Bool _hx_tmp1;
HXDLIN( 710)		if ((len > (int)0)) {
HXLINE( 710)			_hx_tmp1 = (s.length > len);
            		}
            		else {
HXLINE( 710)			_hx_tmp1 = false;
            		}
HXDLIN( 710)		if (_hx_tmp1) {
HXLINE( 711)			if (round) {
HXLINE( 712)				::String _hx_tmp2 = s.substring((int)0,(len - (int)1));
HXDLIN( 712)				::String _hx_tmp3 = s.substring((len - (int)1),len);
HXDLIN( 712)				 ::Dynamic _hx_tmp4 = ::Std_obj::parseInt(_hx_tmp3);
HXDLIN( 712)				Int _hx_tmp5;
HXDLIN( 712)				::String _hx_tmp6 = s.substring(len,(len + (int)1));
HXDLIN( 712)				 ::Dynamic _hx_tmp7 = ::Std_obj::parseInt(_hx_tmp6);
HXDLIN( 712)				if (hx::IsGreaterEq( _hx_tmp7,(int)5 )) {
HXLINE( 712)					_hx_tmp5 = (int)1;
            				}
            				else {
HXLINE( 712)					_hx_tmp5 = (int)0;
            				}
HXDLIN( 712)				return (_hx_tmp2 + (_hx_tmp4 + _hx_tmp5));
            			}
            			else {
HXLINE( 714)				return s.substring((int)0,len);
            			}
            		}
            		else {
HXLINE( 717)			return ::StringTools_obj::rpad(s,HX_("0",30,00,00,00),len);
            		}
HXLINE( 710)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(NumberFormat_obj,pad,return )

 ::Dynamic NumberFormat_obj::paramOrNull(::String param){
            	HX_STACK_FRAME("thx.format.NumberFormat","paramOrNull",0xb74c4176,"thx.format.NumberFormat.paramOrNull","thx/format/NumberFormat.hx",722,0x078ed511)
            	HX_STACK_ARG(param,"param")
HXLINE( 722)		Bool _hx_tmp = (param.length == (int)0);
HXDLIN( 722)		if (_hx_tmp) {
HXLINE( 722)			return null();
            		}
            		else {
HXLINE( 722)			return ::Std_obj::parseInt(param);
            		}
HXDLIN( 722)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NumberFormat_obj,paramOrNull,return )

::Array< ::String > NumberFormat_obj::splitOnDecimalSeparator(Float f){
            	HX_STACK_FRAME("thx.format.NumberFormat","splitOnDecimalSeparator",0x264f788c,"thx.format.NumberFormat.splitOnDecimalSeparator","thx/format/NumberFormat.hx",724,0x078ed511)
            	HX_STACK_ARG(f,"f")
HXLINE( 725)		HX_VARI( ::Array< ::String >,p) = (HX_("",00,00,00,00) + f).split(HX_(".",2e,00,00,00));
HXDLIN( 725)		HX_VARI( ::String,i) = p->__get((int)0);
HXLINE( 727)		HX_VARI( ::Array< ::String >,_0) = p;
HXDLIN( 727)		::String _hx_tmp;
HXDLIN( 727)		if (hx::IsNull( _0 )) {
HXLINE( 727)			_hx_tmp = null();
            		}
            		else {
HXLINE( 727)			HX_VARI( ::String,_1) = _0->__get((int)1);
HXDLIN( 727)			if (hx::IsNull( _1 )) {
HXLINE( 727)				_hx_tmp = null();
            			}
            			else {
HXLINE( 727)				_hx_tmp = _1;
            			}
            		}
HXLINE( 139)		HX_VARI( ::String,t) = _hx_tmp;
HXDLIN( 139)		::String _hx_tmp1;
HXDLIN( 139)		if (hx::IsNotNull( t )) {
HXLINE( 139)			_hx_tmp1 = t;
            		}
            		else {
HXLINE( 139)			_hx_tmp1 = HX_("",00,00,00,00);
            		}
HXLINE( 725)		HX_VARI( ::String,d) = _hx_tmp1.toLowerCase();
HXLINE( 729)		Int _hx_tmp2 = d.indexOf(HX_("e",65,00,00,00),null());
HXDLIN( 729)		if ((_hx_tmp2 >= (int)0)) {
HXLINE( 730)			p = d.split(HX_("e",65,00,00,00));
HXLINE( 731)			d = p->__get((int)0);
HXLINE( 732)			HX_VARI(  ::Dynamic,e) = ::thx::Ints_obj::parse(p->__get((int)1),null());
HXLINE( 733)			if (hx::IsLess( e,(int)0 )) {
HXLINE( 734)				d = ((::StringTools_obj::rpad(HX_("",00,00,00,00),HX_("0",30,00,00,00),(-(e) - (int)1)) + i) + d);
HXLINE( 735)				i = HX_("0",30,00,00,00);
            			}
            			else {
HXLINE( 737)				HX_VARI( ::String,s) = (i + d);
HXLINE( 738)				d = s.substring((e + (int)1),null());
HXLINE( 739)				i = ::thx::format::NumberFormat_obj::pad(s,(e + (int)1),false);
            			}
            		}
HXLINE( 743)		if ((d.length > (int)0)) {
HXLINE( 744)			return ::Array_obj< ::String >::__new(2)->init(0,i)->init(1,d);
            		}
            		else {
HXLINE( 746)			return ::Array_obj< ::String >::__new(1)->init(0,i);
            		}
HXLINE( 743)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NumberFormat_obj,splitOnDecimalSeparator,return )

::Array< ::String > NumberFormat_obj::splitPattern(::String pattern,::String separator){
            	HX_STACK_FRAME("thx.format.NumberFormat","splitPattern",0xe1f10df7,"thx.format.NumberFormat.splitPattern","thx/format/NumberFormat.hx",749,0x078ed511)
            	HX_STACK_ARG(pattern,"pattern")
            	HX_STACK_ARG(separator,"separator")
HXLINE( 750)		HX_VARI( ::Array< Int >,pos) = ::Array_obj< Int >::__new(0);
HXDLIN( 750)		HX_VARI( Int,i) = (int)0;
HXDLIN( 750)		HX_VARI( Int,quote) = (int)0;
HXLINE( 753)		while((i < pattern.length)){
HXLINE( 754)			{
HXLINE( 754)				HX_VARI( ::String,_g) = pattern.substring(i,(i + (int)1));
HXDLIN( 754)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("\"",22,00,00,00)) ){
HXLINE( 754)					Int _hx_tmp = quote;
HXDLIN( 754)					switch((int)(_hx_tmp)){
            						case (int)0: {
HXLINE( 759)							quote = (int)2;
            						}
            						break;
            						case (int)2: {
HXLINE( 757)							quote = (int)0;
            						}
            						break;
            						default:{
            						}
            					}
HXLINE( 754)					goto _hx_goto_17;
            				}
            				if (  (_hx_switch_0==HX_("'",27,00,00,00)) ){
HXLINE( 754)					Int _hx_tmp1 = quote;
HXDLIN( 754)					switch((int)(_hx_tmp1)){
            						case (int)0: {
HXLINE( 758)							quote = (int)1;
            						}
            						break;
            						case (int)1: {
HXLINE( 757)							quote = (int)0;
            						}
            						break;
            						default:{
            						}
            					}
HXLINE( 754)					goto _hx_goto_17;
            				}
            				if (  (_hx_switch_0==HX_("\\",5c,00,00,00)) ){
HXLINE( 755)					++i;
HXDLIN( 755)					goto _hx_goto_17;
            				}
            				/* default */{
HXLINE( 754)					if ((quote == (int)0)) {
HXLINE( 760)						Int _hx_tmp2 = separator.indexOf(_g,null());
HXDLIN( 760)						if ((_hx_tmp2 >= (int)0)) {
HXLINE( 761)							pos->push(i);
            						}
            					}
            				}
            				_hx_goto_17:;
            			}
HXLINE( 764)			++i;
            		}
HXLINE( 766)		HX_VARI( ::Array< ::String >,buf) = ::Array_obj< ::String >::__new(0);
HXDLIN( 766)		HX_VARI( Int,prev) = (int)0;
HXLINE( 768)		{
HXLINE( 768)			HX_VARI_NAME( Int,_g1,"_g") = (int)0;
HXDLIN( 768)			while((_g1 < pos->length)){
HXLINE( 768)				HX_VARI( Int,p) = pos->__get(_g1);
HXDLIN( 768)				++_g1;
HXLINE( 769)				::String _hx_tmp3 = pattern.substring(prev,p);
HXDLIN( 769)				buf->push(_hx_tmp3);
HXLINE( 770)				prev = (p + (int)1);
            			}
            		}
HXLINE( 772)		::String _hx_tmp4 = pattern.substring(prev,null());
HXDLIN( 772)		buf->push(_hx_tmp4);
HXLINE( 773)		return buf;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NumberFormat_obj,splitPattern,return )

::String NumberFormat_obj::value(Float f,Int precision,::Array< Int > groupSizes,::String groupSeparator,::String decimalSeparator){
            	HX_STACK_FRAME("thx.format.NumberFormat","value",0x994201f0,"thx.format.NumberFormat.value","thx/format/NumberFormat.hx",776,0x078ed511)
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(precision,"precision")
            	HX_STACK_ARG(groupSizes,"groupSizes")
            	HX_STACK_ARG(groupSeparator,"groupSeparator")
            	HX_STACK_ARG(decimalSeparator,"decimalSeparator")
HXLINE( 777)		Float _hx_tmp = ::thx::Floats_obj::roundTo(f,precision);
HXDLIN( 777)		f = ::Math_obj::abs(_hx_tmp);
HXLINE( 778)		HX_VARI( ::Array< ::String >,p) = ::thx::format::NumberFormat_obj::splitOnDecimalSeparator(f);
HXDLIN( 778)		HX_VARI( ::Array< ::String >,buf) = ::Array_obj< ::String >::__new(0);
HXLINE( 780)		::String _hx_tmp1 = ::thx::format::NumberFormat_obj::intPart(p->__get((int)0),groupSizes,groupSeparator);
HXDLIN( 780)		buf->push(_hx_tmp1);
HXLINE( 782)		if ((precision > (int)0)) {
HXLINE( 783)			::String _hx_tmp2 = ::thx::format::NumberFormat_obj::pad(p->__get((int)1),precision,true);
HXDLIN( 783)			buf->push(_hx_tmp2);
            		}
HXLINE( 785)		return buf->join(decimalSeparator);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(NumberFormat_obj,value,return )


NumberFormat_obj::NumberFormat_obj()
{
}

bool NumberFormat_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"hex") ) { outValue = hex_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pad") ) { outValue = pad_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"unit") ) { outValue = unit_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"BASE") ) { outValue = BASE; return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"fixed") ) { outValue = fixed_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"octal") ) { outValue = octal_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"value") ) { outValue = value_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"binary") ) { outValue = binary_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"format") ) { outValue = format_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"number") ) { outValue = number_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"printf") ) { outValue = printf_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toBase") ) { outValue = toBase_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"decimal") ) { outValue = decimal_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"general") ) { outValue = general_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"integer") ) { outValue = integer_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"percent") ) { outValue = percent_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"intPart") ) { outValue = intPart_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"currency") ) { outValue = currency_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"permille") ) { outValue = permille_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"hasSymbols") ) { outValue = hasSymbols_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"exponential") ) { outValue = exponential_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"paramOrNull") ) { outValue = paramOrNull_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"customFormat") ) { outValue = customFormat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"countSymbols") ) { outValue = countSymbols_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"numberFormat") ) { outValue = numberFormat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"splitPattern") ) { outValue = splitPattern_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"customFormatF") ) { outValue = customFormatF_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"exponentialInfo") ) { outValue = exponentialInfo_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"customFormatInteger") ) { outValue = customFormatInteger_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"splitOnDecimalSeparator") ) { outValue = splitOnDecimalSeparator_dyn(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"customIntegerAndFraction") ) { outValue = customIntegerAndFraction_dyn(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"customFormatDecimalFraction") ) { outValue = customFormatDecimalFraction_dyn(); return true; }
	}
	return false;
}

bool NumberFormat_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"BASE") ) { BASE=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *NumberFormat_obj_sMemberStorageInfo = 0;
static hx::StaticInfo NumberFormat_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &NumberFormat_obj::BASE,HX_HCSTRING("BASE","\x11","\xb0","\xd1","\x2b")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void NumberFormat_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NumberFormat_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(NumberFormat_obj::BASE,"BASE");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NumberFormat_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NumberFormat_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(NumberFormat_obj::BASE,"BASE");
};

#endif

hx::Class NumberFormat_obj::__mClass;

static ::String NumberFormat_obj_sStaticFields[] = {
	HX_HCSTRING("binary","\x01","\xbc","\x0b","\xed"),
	HX_HCSTRING("currency","\x51","\x07","\x45","\x9b"),
	HX_HCSTRING("customFormat","\xc8","\xe5","\x2b","\xfd"),
	HX_HCSTRING("decimal","\x91","\xb4","\xd3","\xe6"),
	HX_HCSTRING("exponential","\x85","\xf6","\x7a","\xf4"),
	HX_HCSTRING("fixed","\x74","\xf9","\xa1","\x00"),
	HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd"),
	HX_HCSTRING("general","\x28","\x6b","\x5b","\xb6"),
	HX_HCSTRING("hex","\xdb","\x42","\x4f","\x00"),
	HX_HCSTRING("integer","\xbe","\xbd","\x1b","\x17"),
	HX_HCSTRING("number","\xc9","\x86","\x7a","\xa1"),
	HX_HCSTRING("octal","\xcb","\xdd","\x42","\x2b"),
	HX_HCSTRING("percent","\xc5","\xaa","\xda","\x78"),
	HX_HCSTRING("permille","\x0c","\xde","\x1f","\x0b"),
	HX_HCSTRING("printf","\x99","\xcf","\x61","\xb1"),
	HX_HCSTRING("toBase","\x2c","\x53","\xca","\x76"),
	HX_HCSTRING("unit","\x84","\xca","\xa9","\x4d"),
	HX_HCSTRING("BASE","\x11","\xb0","\xd1","\x2b"),
	HX_HCSTRING("countSymbols","\x0c","\x69","\x84","\x9e"),
	HX_HCSTRING("customFormatDecimalFraction","\xcb","\x62","\x2e","\x87"),
	HX_HCSTRING("customFormatF","\x7e","\x29","\x3d","\x89"),
	HX_HCSTRING("customFormatInteger","\xd6","\xc8","\x20","\x82"),
	HX_HCSTRING("customIntegerAndFraction","\xec","\x3e","\x7a","\x99"),
	HX_HCSTRING("exponentialInfo","\x93","\x81","\x0d","\x11"),
	HX_HCSTRING("hasSymbols","\xe1","\xa5","\xcf","\x9d"),
	HX_HCSTRING("intPart","\x82","\xc0","\x35","\x09"),
	HX_HCSTRING("numberFormat","\xe0","\x46","\xa0","\x0d"),
	HX_HCSTRING("pad","\x53","\x51","\x55","\x00"),
	HX_HCSTRING("paramOrNull","\xb7","\x55","\x8f","\xfb"),
	HX_HCSTRING("splitOnDecimalSeparator","\x4d","\x6a","\xc0","\x02"),
	HX_HCSTRING("splitPattern","\x96","\xb2","\x5f","\x58"),
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	::String(null())
};

void NumberFormat_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.format.NumberFormat","\xad","\xe9","\x08","\xaa");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &NumberFormat_obj::__GetStatic;
	__mClass->mSetStaticField = &NumberFormat_obj::__SetStatic;
	__mClass->mMarkFunc = NumberFormat_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(NumberFormat_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< NumberFormat_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NumberFormat_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NumberFormat_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NumberFormat_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void NumberFormat_obj::__boot()
{
{
            	HX_STACK_FRAME("thx.format.NumberFormat","boot",0x09521693,"thx.format.NumberFormat.boot","thx/format/NumberFormat.hx",444,0x078ed511)
HXLINE( 444)		BASE = HX_("0123456789abcdefghijklmnopqrstuvwxyz",b2,43,15,83);
            	}
}

} // end namespace thx
} // end namespace format
