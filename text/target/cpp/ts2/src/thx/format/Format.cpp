// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_culture_Culture
#include <thx/culture/Culture.h>
#endif
#ifndef INCLUDED_thx_format_Format
#include <thx/format/Format.h>
#endif

namespace thx{
namespace format{

void Format_obj::__construct() { }

Dynamic Format_obj::__CreateEmpty() { return new Format_obj; }

hx::ObjectPtr< Format_obj > Format_obj::__new()
{
	hx::ObjectPtr< Format_obj > _hx_result = new Format_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Format_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Format_obj > _hx_result = new Format_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::thx::culture::Culture Format_obj::defaultCulture;

 ::thx::culture::Culture Format_obj::get_defaultCulture(){
            	HX_STACK_FRAME("thx.format.Format","get_defaultCulture",0x0cfaa3e0,"thx.format.Format.get_defaultCulture","thx/format/Format.hx",12,0xcdf864da)
HXLINE(  12)		if (hx::IsNotNull( ::thx::format::Format_obj::defaultCulture )) {
HXLINE(  12)			return ::thx::format::Format_obj::defaultCulture;
            		}
            		else {
HXLINE(  12)			return ::thx::culture::Culture_obj::invariant;
            		}
HXDLIN(  12)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Format_obj,get_defaultCulture,return )

 ::thx::culture::Culture Format_obj::set_defaultCulture( ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.Format","set_defaultCulture",0xe9a9d654,"thx.format.Format.set_defaultCulture","thx/format/Format.hx",14,0xcdf864da)
            	HX_STACK_ARG(culture,"culture")
HXLINE(  15)		::thx::format::Format_obj::defaultCulture = culture;
HXLINE(  16)		return ::thx::format::Format_obj::get_defaultCulture();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Format_obj,set_defaultCulture,return )


Format_obj::Format_obj()
{
}

bool Format_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"defaultCulture") ) { outValue = inCallProp == hx::paccAlways ? get_defaultCulture() : defaultCulture; return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"get_defaultCulture") ) { outValue = get_defaultCulture_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_defaultCulture") ) { outValue = set_defaultCulture_dyn(); return true; }
	}
	return false;
}

bool Format_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"defaultCulture") ) { if (inCallProp == hx::paccAlways)  ioValue = set_defaultCulture(ioValue); else defaultCulture=ioValue.Cast<  ::thx::culture::Culture >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Format_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Format_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::thx::culture::Culture*/ ,(void *) &Format_obj::defaultCulture,HX_HCSTRING("defaultCulture","\x2d","\x0f","\x1b","\x88")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Format_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Format_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Format_obj::defaultCulture,"defaultCulture");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Format_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Format_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Format_obj::defaultCulture,"defaultCulture");
};

#endif

hx::Class Format_obj::__mClass;

static ::String Format_obj_sStaticFields[] = {
	HX_HCSTRING("defaultCulture","\x2d","\x0f","\x1b","\x88"),
	HX_HCSTRING("get_defaultCulture","\xf6","\xef","\xb4","\x23"),
	HX_HCSTRING("set_defaultCulture","\x6a","\x22","\x64","\x00"),
	::String(null())
};

void Format_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.format.Format","\x44","\xea","\xe9","\x25");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Format_obj::__GetStatic;
	__mClass->mSetStaticField = &Format_obj::__SetStatic;
	__mClass->mMarkFunc = Format_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Format_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Format_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Format_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Format_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Format_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace format
