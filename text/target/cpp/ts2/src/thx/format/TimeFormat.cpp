// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "cpp/Int64.h"
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_thx_Int64s
#include <thx/Int64s.h>
#endif
#ifndef INCLUDED_thx_Ints
#include <thx/Ints.h>
#endif
#ifndef INCLUDED_thx_Strings
#include <thx/Strings.h>
#endif
#ifndef INCLUDED_thx__DateTimeUtc_DateTimeUtc_Impl_
#include <thx/_DateTimeUtc/DateTimeUtc_Impl_.h>
#endif
#ifndef INCLUDED_thx__Time_Time_Impl_
#include <thx/_Time/Time_Impl_.h>
#endif
#ifndef INCLUDED_thx_culture_Culture
#include <thx/culture/Culture.h>
#endif
#ifndef INCLUDED_thx_culture_DateFormatInfo
#include <thx/culture/DateFormatInfo.h>
#endif
#ifndef INCLUDED_thx_culture_NumberFormatInfo
#include <thx/culture/NumberFormatInfo.h>
#endif
#ifndef INCLUDED_thx_format_DateFormat
#include <thx/format/DateFormat.h>
#endif
#ifndef INCLUDED_thx_format_Format
#include <thx/format/Format.h>
#endif
#ifndef INCLUDED_thx_format_TimeFormat
#include <thx/format/TimeFormat.h>
#endif

namespace thx{
namespace format{

void TimeFormat_obj::__construct() { }

Dynamic TimeFormat_obj::__CreateEmpty() { return new TimeFormat_obj; }

hx::ObjectPtr< TimeFormat_obj > TimeFormat_obj::__new()
{
	hx::ObjectPtr< TimeFormat_obj > _hx_result = new TimeFormat_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TimeFormat_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TimeFormat_obj > _hx_result = new TimeFormat_obj();
	_hx_result->__construct();
	return _hx_result;
}

::String TimeFormat_obj::customFormat( ::cpp::Int64Struct t,::String pattern, ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.TimeFormat","customFormat",0x87b15ba5,"thx.format.TimeFormat.customFormat","thx/format/TimeFormat.hx",18,0x3d56048d)
            	HX_STACK_ARG(t,"t")
            	HX_STACK_ARG(pattern,"pattern")
            	HX_STACK_ARG(culture,"culture")
HXLINE(  19)		HX_VARI(  ::thx::culture::Culture,_0) = culture;
HXLINE( 139)		HX_VAR_NAME(  ::thx::culture::Culture,t1,"t");
HXLINE(  19)		if (hx::IsNull( _0 )) {
HXLINE( 139)			t1 = null();
            		}
            		else {
HXLINE( 139)			t1 = _0;
            		}
HXDLIN( 139)		if (hx::IsNotNull( t1 )) {
HXLINE( 139)			culture = t1;
            		}
            		else {
HXLINE(  19)			culture = ::thx::format::Format_obj::get_defaultCulture();
            		}
HXLINE(  20)		HX_VARI(  ::EReg,ereg) =  ::EReg_obj::__new(HX_("(d|H){1,8}|(f|F){1,7}|(h|m|s){1,2}|[:.]|'[^']*'|\"[^\"]*\"",e8,c7,a5,8f),HX_("",00,00,00,00));
HXDLIN(  20)		HX_VARI( Bool,escape) = false;
HXDLIN(  20)		HX_VARI( ::Array< ::String >,buf) = ::Array_obj< ::String >::__new(0);
HXLINE(  23)		while((pattern.length > (int)0)){
HXLINE(  24)			if (escape) {
HXLINE(  25)				escape = false;
HXLINE(  26)				::String _hx_tmp = pattern.substring((int)0,(int)1);
HXDLIN(  26)				buf->push(_hx_tmp);
HXLINE(  27)				pattern = pattern.substring((int)1,null());
            			}
            			else {
HXLINE(  28)				Bool _hx_tmp1 = ereg->match(pattern);
HXDLIN(  28)				if (_hx_tmp1) {
HXLINE(  29)					HX_VARI( ::String,left) = ereg->matchedLeft();
HXLINE(  30)					::String _hx_tmp2 = left.substring((int)-1,null());
HXDLIN(  30)					if ((_hx_tmp2 == HX_("\\",5c,00,00,00))) {
HXLINE(  31)						escape = true;
HXLINE(  32)						pattern = pattern.substring(left.length,null());
HXLINE(  33)						Int _hx_tmp3 = (left.length - (int)1);
HXDLIN(  33)						::String _hx_tmp4 = left.substring((int)0,_hx_tmp3);
HXDLIN(  33)						buf->push(_hx_tmp4);
HXLINE(  34)						continue;
            					}
HXLINE(  36)					buf->push(left);
HXLINE(  37)					HX_VARI( ::String,term) = ereg->matched((int)0);
HXDLIN(  37)					HX_VARI( ::String,right) = ereg->matchedRight();
HXLINE(  39)					pattern = right;
HXLINE(  40)					Bool _hx_tmp5;
HXDLIN(  40)					if ((term == HX_(".",2e,00,00,00))) {
HXLINE(  40)						::String _hx_tmp6 = right.substring((int)0,(int)1).toLowerCase();
HXDLIN(  40)						_hx_tmp5 = (_hx_tmp6 == HX_("f",66,00,00,00));
            					}
            					else {
HXLINE(  40)						_hx_tmp5 = false;
            					}
HXDLIN(  40)					if (_hx_tmp5) {
HXLINE(  41)						HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN(  41)						Bool _hx_tmp7 = _hx_int64_is_zero(t);
HXDLIN(  41)						if (_hx_tmp7) {
HXLINE(  41)							HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            						}
HXDLIN(  41)						HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_mod(t,b);
HXDLIN(  41)						Int _hx_tmp8 = _hx_int64_high(x);
HXDLIN(  41)						Int _hx_tmp9 = _hx_int64_low(x);
HXDLIN(  41)						if ((_hx_tmp8 != ((int)_hx_tmp9 >> (int)(int)31))) {
HXLINE(  41)							HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            						}
HXDLIN(  41)						Int _hx_tmp10 = _hx_int64_low(x);
HXDLIN(  41)						HX_VARI(  ::cpp::Int64Struct,a) = ( ::cpp::Int64Struct(_hx_tmp10));
HXDLIN(  41)						HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ::thx::Int64s_obj::zero;
HXDLIN(  41)						Bool _hx_tmp11 = _hx_int64_eq(a,b1);
HXDLIN(  41)						if (_hx_tmp11) {
HXLINE(  42)							ereg->match(right);
HXLINE(  43)							pattern = ereg->matchedRight();
HXLINE(  44)							continue;
            						}
            					}
HXLINE(  47)					::String _hx_tmp12 = ::thx::format::TimeFormat_obj::formatTerm(t,term,culture);
HXDLIN(  47)					buf->push(_hx_tmp12);
            				}
            				else {
HXLINE(  49)					buf->push(pattern);
HXLINE(  50)					pattern = HX_("",00,00,00,00);
            				}
            			}
            		}
HXLINE(  53)		if (escape) {
HXLINE(  54)			buf->push(HX_("\\",5c,00,00,00));
            		}
HXLINE(  55)		return buf->join(HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(TimeFormat_obj,customFormat,return )

::String TimeFormat_obj::format( ::cpp::Int64Struct t,::String pattern, ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.TimeFormat","format",0x9f181154,"thx.format.TimeFormat.format","thx/format/TimeFormat.hx",71,0x3d56048d)
            	HX_STACK_ARG(t,"t")
            	HX_STACK_ARG(pattern,"pattern")
            	HX_STACK_ARG(culture,"culture")
HXLINE(  71)		::String _hx_switch_0 = pattern;
            		if (  (_hx_switch_0==HX_("G",47,00,00,00)) ||  (_hx_switch_0==HX_("T",54,00,00,00)) ){
HXLINE(  71)			return ::thx::format::TimeFormat_obj::timeLong(t,culture);
HXDLIN(  71)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("c",63,00,00,00)) ){
HXLINE(  71)			return ::thx::format::TimeFormat_obj::invariantTimeLong(t);
HXDLIN(  71)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("g",67,00,00,00)) ||  (_hx_switch_0==HX_("t",74,00,00,00)) ){
HXLINE(  71)			return ::thx::format::TimeFormat_obj::timeShort(t,culture);
HXDLIN(  71)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE(  71)			return ::thx::format::TimeFormat_obj::customFormat(t,pattern,culture);
            		}
            		_hx_goto_1:;
HXDLIN(  71)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(TimeFormat_obj,format,return )

::String TimeFormat_obj::formatTerm( ::cpp::Int64Struct t,::String pattern, ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.TimeFormat","formatTerm",0x70703ee0,"thx.format.TimeFormat.formatTerm","thx/format/TimeFormat.hx",111,0x3d56048d)
            	HX_STACK_ARG(t,"t")
            	HX_STACK_ARG(pattern,"pattern")
            	HX_STACK_ARG(culture,"culture")
HXLINE( 111)		::String _hx_switch_0 = pattern;
            		if (  (_hx_switch_0==HX_(".",2e,00,00,00)) ){
HXLINE( 111)			return culture->number->separatorDecimalNumber;
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_(":",3a,00,00,00)) ){
HXLINE( 111)			return ::thx::format::DateFormat_obj::dateTime(culture)->separatorTime;
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("F",46,00,00,00)) ){
HXLINE( 141)			HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 141)			Bool _hx_tmp = _hx_int64_is_zero(t);
HXDLIN( 141)			if (_hx_tmp) {
HXLINE( 141)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 141)			HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_mod(t,b);
HXDLIN( 141)			Int _hx_tmp1 = _hx_int64_high(x);
HXDLIN( 141)			Int _hx_tmp2 = _hx_int64_low(x);
HXDLIN( 141)			if ((_hx_tmp1 != ((int)_hx_tmp2 >> (int)(int)31))) {
HXLINE( 141)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN( 141)			Int _hx_tmp3 = _hx_int64_low(x);
HXLINE( 111)			return ::thx::format::DateFormat_obj::getDecimalsUpTo(_hx_tmp3,(int)1);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("FF",40,3d,00,00)) ){
HXLINE( 142)			HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 142)			Bool _hx_tmp4 = _hx_int64_is_zero(t);
HXDLIN( 142)			if (_hx_tmp4) {
HXLINE( 142)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 142)			HX_VARI_NAME(  ::cpp::Int64Struct,x1,"x") = _hx_int64_mod(t,b1);
HXDLIN( 142)			Int _hx_tmp5 = _hx_int64_high(x1);
HXDLIN( 142)			Int _hx_tmp6 = _hx_int64_low(x1);
HXDLIN( 142)			if ((_hx_tmp5 != ((int)_hx_tmp6 >> (int)(int)31))) {
HXLINE( 142)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN( 142)			Int _hx_tmp7 = _hx_int64_low(x1);
HXLINE( 111)			return ::thx::format::DateFormat_obj::getDecimalsUpTo(_hx_tmp7,(int)2);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("FFF",06,5b,35,00)) ){
HXLINE( 143)			HX_VARI_NAME(  ::cpp::Int64Struct,b2,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 143)			Bool _hx_tmp8 = _hx_int64_is_zero(t);
HXDLIN( 143)			if (_hx_tmp8) {
HXLINE( 143)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 143)			HX_VARI_NAME(  ::cpp::Int64Struct,x2,"x") = _hx_int64_mod(t,b2);
HXDLIN( 143)			Int _hx_tmp9 = _hx_int64_high(x2);
HXDLIN( 143)			Int _hx_tmp10 = _hx_int64_low(x2);
HXDLIN( 143)			if ((_hx_tmp9 != ((int)_hx_tmp10 >> (int)(int)31))) {
HXLINE( 143)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN( 143)			Int _hx_tmp11 = _hx_int64_low(x2);
HXLINE( 111)			return ::thx::format::DateFormat_obj::getDecimalsUpTo(_hx_tmp11,(int)3);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("FFFF",80,4a,7a,2e)) ){
HXLINE( 144)			HX_VARI_NAME(  ::cpp::Int64Struct,b3,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 144)			Bool _hx_tmp12 = _hx_int64_is_zero(t);
HXDLIN( 144)			if (_hx_tmp12) {
HXLINE( 144)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 144)			HX_VARI_NAME(  ::cpp::Int64Struct,x3,"x") = _hx_int64_mod(t,b3);
HXDLIN( 144)			Int _hx_tmp13 = _hx_int64_high(x3);
HXDLIN( 144)			Int _hx_tmp14 = _hx_int64_low(x3);
HXDLIN( 144)			if ((_hx_tmp13 != ((int)_hx_tmp14 >> (int)(int)31))) {
HXLINE( 144)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN( 144)			Int _hx_tmp15 = _hx_int64_low(x3);
HXLINE( 111)			return ::thx::format::DateFormat_obj::getDecimalsUpTo(_hx_tmp15,(int)4);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("FFFFF",c6,e5,86,7c)) ){
HXLINE( 145)			HX_VARI_NAME(  ::cpp::Int64Struct,b4,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 145)			Bool _hx_tmp16 = _hx_int64_is_zero(t);
HXDLIN( 145)			if (_hx_tmp16) {
HXLINE( 145)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 145)			HX_VARI_NAME(  ::cpp::Int64Struct,x4,"x") = _hx_int64_mod(t,b4);
HXDLIN( 145)			Int _hx_tmp17 = _hx_int64_high(x4);
HXDLIN( 145)			Int _hx_tmp18 = _hx_int64_low(x4);
HXDLIN( 145)			if ((_hx_tmp17 != ((int)_hx_tmp18 >> (int)(int)31))) {
HXLINE( 145)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN( 145)			Int _hx_tmp19 = _hx_int64_low(x4);
HXLINE( 111)			return ::thx::format::DateFormat_obj::getDecimalsUpTo(_hx_tmp19,(int)5);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("FFFFFF",c0,27,82,79)) ){
HXLINE( 146)			HX_VARI_NAME(  ::cpp::Int64Struct,b5,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 146)			Bool _hx_tmp20 = _hx_int64_is_zero(t);
HXDLIN( 146)			if (_hx_tmp20) {
HXLINE( 146)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 146)			HX_VARI_NAME(  ::cpp::Int64Struct,x5,"x") = _hx_int64_mod(t,b5);
HXDLIN( 146)			Int _hx_tmp21 = _hx_int64_high(x5);
HXDLIN( 146)			Int _hx_tmp22 = _hx_int64_low(x5);
HXDLIN( 146)			if ((_hx_tmp21 != ((int)_hx_tmp22 >> (int)(int)31))) {
HXLINE( 146)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN( 146)			Int _hx_tmp23 = _hx_int64_low(x5);
HXLINE( 111)			return ::thx::format::DateFormat_obj::getDecimalsUpTo(_hx_tmp23,(int)6);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("FFFFFFF",86,a0,60,d8)) ){
HXLINE( 147)			HX_VARI_NAME(  ::cpp::Int64Struct,b6,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 147)			Bool _hx_tmp24 = _hx_int64_is_zero(t);
HXDLIN( 147)			if (_hx_tmp24) {
HXLINE( 147)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 147)			HX_VARI_NAME(  ::cpp::Int64Struct,x6,"x") = _hx_int64_mod(t,b6);
HXDLIN( 147)			Int _hx_tmp25 = _hx_int64_high(x6);
HXDLIN( 147)			Int _hx_tmp26 = _hx_int64_low(x6);
HXDLIN( 147)			if ((_hx_tmp25 != ((int)_hx_tmp26 >> (int)(int)31))) {
HXLINE( 147)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN( 147)			Int _hx_tmp27 = _hx_int64_low(x6);
HXLINE( 111)			return ::thx::format::DateFormat_obj::getDecimalsString(_hx_tmp27);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("H",48,00,00,00)) ){
HXLINE( 122)			HX_VARI_NAME(  ::cpp::Int64Struct,b7,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN( 122)			Bool _hx_tmp28 = _hx_int64_is_zero(t);
HXDLIN( 122)			if (_hx_tmp28) {
HXLINE( 122)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 122)			 ::cpp::Int64Struct _hx_tmp29 = _hx_int64_div(t,b7);
HXDLIN( 122)			::String _hx_tmp30 = _hx_int64_to_string(_hx_tmp29);
HXLINE( 111)			return (HX_("",00,00,00,00) + _hx_tmp30);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("HH",00,3f,00,00)) ){
HXLINE( 123)			HX_VARI_NAME(  ::cpp::Int64Struct,b8,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN( 123)			Bool _hx_tmp31 = _hx_int64_is_zero(t);
HXDLIN( 123)			if (_hx_tmp31) {
HXLINE( 123)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 123)			 ::cpp::Int64Struct _hx_tmp32 = _hx_int64_div(t,b8);
HXDLIN( 123)			::String _hx_tmp33 = _hx_int64_to_string(_hx_tmp32);
HXLINE( 111)			return ::thx::Strings_obj::lpad((HX_("",00,00,00,00) + _hx_tmp33),HX_("0",30,00,00,00),(int)2);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("HHH",48,e1,36,00)) ){
HXLINE( 124)			HX_VARI_NAME(  ::cpp::Int64Struct,b9,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN( 124)			Bool _hx_tmp34 = _hx_int64_is_zero(t);
HXDLIN( 124)			if (_hx_tmp34) {
HXLINE( 124)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 124)			 ::cpp::Int64Struct _hx_tmp35 = _hx_int64_div(t,b9);
HXDLIN( 124)			::String _hx_tmp36 = _hx_int64_to_string(_hx_tmp35);
HXLINE( 111)			return ::thx::Strings_obj::lpad((HX_("",00,00,00,00) + _hx_tmp36),HX_("0",30,00,00,00),(int)3);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("HHHH",00,3e,ce,2f)) ){
HXLINE( 125)			HX_VARI_NAME(  ::cpp::Int64Struct,b10,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN( 125)			Bool _hx_tmp37 = _hx_int64_is_zero(t);
HXDLIN( 125)			if (_hx_tmp37) {
HXLINE( 125)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 125)			 ::cpp::Int64Struct _hx_tmp38 = _hx_int64_div(t,b10);
HXDLIN( 125)			::String _hx_tmp39 = _hx_int64_to_string(_hx_tmp38);
HXLINE( 111)			return ::thx::Strings_obj::lpad((HX_("",00,00,00,00) + _hx_tmp39),HX_("0",30,00,00,00),(int)4);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("HHHHH",48,02,a8,a4)) ){
HXLINE( 126)			HX_VARI_NAME(  ::cpp::Int64Struct,b11,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN( 126)			Bool _hx_tmp40 = _hx_int64_is_zero(t);
HXDLIN( 126)			if (_hx_tmp40) {
HXLINE( 126)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 126)			 ::cpp::Int64Struct _hx_tmp41 = _hx_int64_div(t,b11);
HXDLIN( 126)			::String _hx_tmp42 = _hx_int64_to_string(_hx_tmp41);
HXLINE( 111)			return ::thx::Strings_obj::lpad((HX_("",00,00,00,00) + _hx_tmp42),HX_("0",30,00,00,00),(int)5);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("HHHHHH",00,fd,59,6e)) ){
HXLINE( 127)			HX_VARI_NAME(  ::cpp::Int64Struct,b12,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN( 127)			Bool _hx_tmp43 = _hx_int64_is_zero(t);
HXDLIN( 127)			if (_hx_tmp43) {
HXLINE( 127)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 127)			 ::cpp::Int64Struct _hx_tmp44 = _hx_int64_div(t,b12);
HXDLIN( 127)			::String _hx_tmp45 = _hx_int64_to_string(_hx_tmp44);
HXLINE( 111)			return ::thx::Strings_obj::lpad((HX_("",00,00,00,00) + _hx_tmp45),HX_("0",30,00,00,00),(int)6);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("HHHHHHH",48,63,63,20)) ){
HXLINE( 128)			HX_VARI_NAME(  ::cpp::Int64Struct,b13,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN( 128)			Bool _hx_tmp46 = _hx_int64_is_zero(t);
HXDLIN( 128)			if (_hx_tmp46) {
HXLINE( 128)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 128)			 ::cpp::Int64Struct _hx_tmp47 = _hx_int64_div(t,b13);
HXDLIN( 128)			::String _hx_tmp48 = _hx_int64_to_string(_hx_tmp47);
HXLINE( 111)			return ::thx::Strings_obj::lpad((HX_("",00,00,00,00) + _hx_tmp48),HX_("0",30,00,00,00),(int)7);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("HHHHHHHH",00,7c,93,36)) ){
HXLINE( 129)			HX_VARI_NAME(  ::cpp::Int64Struct,b14,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN( 129)			Bool _hx_tmp49 = _hx_int64_is_zero(t);
HXDLIN( 129)			if (_hx_tmp49) {
HXLINE( 129)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 129)			 ::cpp::Int64Struct _hx_tmp50 = _hx_int64_div(t,b14);
HXDLIN( 129)			::String _hx_tmp51 = _hx_int64_to_string(_hx_tmp50);
HXLINE( 111)			return ::thx::Strings_obj::lpad((HX_("",00,00,00,00) + _hx_tmp51),HX_("0",30,00,00,00),(int)8);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("d",64,00,00,00)) ){
HXLINE( 112)			HX_VARI_NAME(  ::cpp::Int64Struct,b15,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerDayI64;
HXDLIN( 112)			Bool _hx_tmp52 = _hx_int64_is_zero(t);
HXDLIN( 112)			if (_hx_tmp52) {
HXLINE( 112)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 112)			HX_VARI_NAME(  ::cpp::Int64Struct,x7,"x") = _hx_int64_div(t,b15);
HXDLIN( 112)			Int _hx_tmp53 = _hx_int64_high(x7);
HXDLIN( 112)			Int _hx_tmp54 = _hx_int64_low(x7);
HXDLIN( 112)			if ((_hx_tmp53 != ((int)_hx_tmp54 >> (int)(int)31))) {
HXLINE( 112)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN( 112)			Int _hx_tmp55 = _hx_int64_low(x7);
HXLINE( 111)			return (HX_("",00,00,00,00) + _hx_tmp55);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("dd",80,57,00,00)) ){
HXLINE( 113)			HX_VARI_NAME(  ::cpp::Int64Struct,b16,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerDayI64;
HXDLIN( 113)			Bool _hx_tmp56 = _hx_int64_is_zero(t);
HXDLIN( 113)			if (_hx_tmp56) {
HXLINE( 113)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 113)			HX_VARI_NAME(  ::cpp::Int64Struct,x8,"x") = _hx_int64_div(t,b16);
HXDLIN( 113)			Int _hx_tmp57 = _hx_int64_high(x8);
HXDLIN( 113)			Int _hx_tmp58 = _hx_int64_low(x8);
HXDLIN( 113)			if ((_hx_tmp57 != ((int)_hx_tmp58 >> (int)(int)31))) {
HXLINE( 113)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN( 113)			Int _hx_tmp59 = _hx_int64_low(x8);
HXLINE( 111)			return ::thx::Strings_obj::lpad((HX_("",00,00,00,00) + _hx_tmp59),HX_("0",30,00,00,00),(int)2);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("ddd",e4,38,4c,00)) ){
HXLINE( 114)			HX_VARI_NAME(  ::cpp::Int64Struct,b17,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerDayI64;
HXDLIN( 114)			Bool _hx_tmp60 = _hx_int64_is_zero(t);
HXDLIN( 114)			if (_hx_tmp60) {
HXLINE( 114)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 114)			HX_VARI_NAME(  ::cpp::Int64Struct,x9,"x") = _hx_int64_div(t,b17);
HXDLIN( 114)			Int _hx_tmp61 = _hx_int64_high(x9);
HXDLIN( 114)			Int _hx_tmp62 = _hx_int64_low(x9);
HXDLIN( 114)			if ((_hx_tmp61 != ((int)_hx_tmp62 >> (int)(int)31))) {
HXLINE( 114)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN( 114)			Int _hx_tmp63 = _hx_int64_low(x9);
HXLINE( 111)			return ::thx::Strings_obj::lpad((HX_("",00,00,00,00) + _hx_tmp63),HX_("0",30,00,00,00),(int)3);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("dddd",00,8f,65,42)) ){
HXLINE( 115)			HX_VARI_NAME(  ::cpp::Int64Struct,b18,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerDayI64;
HXDLIN( 115)			Bool _hx_tmp64 = _hx_int64_is_zero(t);
HXDLIN( 115)			if (_hx_tmp64) {
HXLINE( 115)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 115)			HX_VARI_NAME(  ::cpp::Int64Struct,x10,"x") = _hx_int64_div(t,b18);
HXDLIN( 115)			Int _hx_tmp65 = _hx_int64_high(x10);
HXDLIN( 115)			Int _hx_tmp66 = _hx_int64_low(x10);
HXDLIN( 115)			if ((_hx_tmp65 != ((int)_hx_tmp66 >> (int)(int)31))) {
HXLINE( 115)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN( 115)			Int _hx_tmp67 = _hx_int64_low(x10);
HXLINE( 111)			return ::thx::Strings_obj::lpad((HX_("",00,00,00,00) + _hx_tmp67),HX_("0",30,00,00,00),(int)4);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("ddddd",64,91,77,d6)) ){
HXLINE( 116)			HX_VARI_NAME(  ::cpp::Int64Struct,b19,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerDayI64;
HXDLIN( 116)			Bool _hx_tmp68 = _hx_int64_is_zero(t);
HXDLIN( 116)			if (_hx_tmp68) {
HXLINE( 116)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 116)			HX_VARI_NAME(  ::cpp::Int64Struct,x11,"x") = _hx_int64_div(t,b19);
HXDLIN( 116)			Int _hx_tmp69 = _hx_int64_high(x11);
HXDLIN( 116)			Int _hx_tmp70 = _hx_int64_low(x11);
HXDLIN( 116)			if ((_hx_tmp69 != ((int)_hx_tmp70 >> (int)(int)31))) {
HXLINE( 116)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN( 116)			Int _hx_tmp71 = _hx_int64_low(x11);
HXLINE( 111)			return ::thx::Strings_obj::lpad((HX_("",00,00,00,00) + _hx_tmp71),HX_("0",30,00,00,00),(int)5);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("dddddd",80,a6,27,d2)) ){
HXLINE( 117)			HX_VARI_NAME(  ::cpp::Int64Struct,b20,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerDayI64;
HXDLIN( 117)			Bool _hx_tmp72 = _hx_int64_is_zero(t);
HXDLIN( 117)			if (_hx_tmp72) {
HXLINE( 117)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 117)			HX_VARI_NAME(  ::cpp::Int64Struct,x12,"x") = _hx_int64_div(t,b20);
HXDLIN( 117)			Int _hx_tmp73 = _hx_int64_high(x12);
HXDLIN( 117)			Int _hx_tmp74 = _hx_int64_low(x12);
HXDLIN( 117)			if ((_hx_tmp73 != ((int)_hx_tmp74 >> (int)(int)31))) {
HXLINE( 117)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN( 117)			Int _hx_tmp75 = _hx_int64_low(x12);
HXLINE( 111)			return ::thx::Strings_obj::lpad((HX_("",00,00,00,00) + _hx_tmp75),HX_("0",30,00,00,00),(int)6);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("ddddddd",e4,09,8a,10)) ){
HXLINE( 118)			HX_VARI_NAME(  ::cpp::Int64Struct,b21,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerDayI64;
HXDLIN( 118)			Bool _hx_tmp76 = _hx_int64_is_zero(t);
HXDLIN( 118)			if (_hx_tmp76) {
HXLINE( 118)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 118)			HX_VARI_NAME(  ::cpp::Int64Struct,x13,"x") = _hx_int64_div(t,b21);
HXDLIN( 118)			Int _hx_tmp77 = _hx_int64_high(x13);
HXDLIN( 118)			Int _hx_tmp78 = _hx_int64_low(x13);
HXDLIN( 118)			if ((_hx_tmp77 != ((int)_hx_tmp78 >> (int)(int)31))) {
HXLINE( 118)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN( 118)			Int _hx_tmp79 = _hx_int64_low(x13);
HXLINE( 111)			return ::thx::Strings_obj::lpad((HX_("",00,00,00,00) + _hx_tmp79),HX_("0",30,00,00,00),(int)7);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("dddddddd",00,9e,3e,68)) ){
HXLINE( 119)			HX_VARI_NAME(  ::cpp::Int64Struct,b22,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerDayI64;
HXDLIN( 119)			Bool _hx_tmp80 = _hx_int64_is_zero(t);
HXDLIN( 119)			if (_hx_tmp80) {
HXLINE( 119)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 119)			HX_VARI_NAME(  ::cpp::Int64Struct,x14,"x") = _hx_int64_div(t,b22);
HXDLIN( 119)			Int _hx_tmp81 = _hx_int64_high(x14);
HXDLIN( 119)			Int _hx_tmp82 = _hx_int64_low(x14);
HXDLIN( 119)			if ((_hx_tmp81 != ((int)_hx_tmp82 >> (int)(int)31))) {
HXLINE( 119)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN( 119)			Int _hx_tmp83 = _hx_int64_low(x14);
HXLINE( 111)			return ::thx::Strings_obj::lpad((HX_("",00,00,00,00) + _hx_tmp83),HX_("0",30,00,00,00),(int)8);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("f",66,00,00,00)) ){
HXLINE( 134)			HX_VARI_NAME(  ::cpp::Int64Struct,b23,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 134)			Bool _hx_tmp84 = _hx_int64_is_zero(t);
HXDLIN( 134)			if (_hx_tmp84) {
HXLINE( 134)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 134)			HX_VARI_NAME(  ::cpp::Int64Struct,x15,"x") = _hx_int64_mod(t,b23);
HXDLIN( 134)			Int _hx_tmp85 = _hx_int64_high(x15);
HXDLIN( 134)			Int _hx_tmp86 = _hx_int64_low(x15);
HXDLIN( 134)			if ((_hx_tmp85 != ((int)_hx_tmp86 >> (int)(int)31))) {
HXLINE( 134)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN( 134)			Int _hx_tmp87 = _hx_int64_low(x15);
HXLINE( 111)			return ::thx::format::DateFormat_obj::getDecimalsPaddedUpTo(_hx_tmp87,(int)1);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("ff",40,59,00,00)) ){
HXLINE( 135)			HX_VARI_NAME(  ::cpp::Int64Struct,b24,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 135)			Bool _hx_tmp88 = _hx_int64_is_zero(t);
HXDLIN( 135)			if (_hx_tmp88) {
HXLINE( 135)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 135)			HX_VARI_NAME(  ::cpp::Int64Struct,x16,"x") = _hx_int64_mod(t,b24);
HXDLIN( 135)			Int _hx_tmp89 = _hx_int64_high(x16);
HXDLIN( 135)			Int _hx_tmp90 = _hx_int64_low(x16);
HXDLIN( 135)			if ((_hx_tmp89 != ((int)_hx_tmp90 >> (int)(int)31))) {
HXLINE( 135)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN( 135)			Int _hx_tmp91 = _hx_int64_low(x16);
HXLINE( 111)			return ::thx::format::DateFormat_obj::getDecimalsPaddedUpTo(_hx_tmp91,(int)2);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("fff",26,bf,4d,00)) ){
HXLINE( 136)			HX_VARI_NAME(  ::cpp::Int64Struct,b25,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 136)			Bool _hx_tmp92 = _hx_int64_is_zero(t);
HXDLIN( 136)			if (_hx_tmp92) {
HXLINE( 136)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 136)			HX_VARI_NAME(  ::cpp::Int64Struct,x17,"x") = _hx_int64_mod(t,b25);
HXDLIN( 136)			Int _hx_tmp93 = _hx_int64_high(x17);
HXDLIN( 136)			Int _hx_tmp94 = _hx_int64_low(x17);
HXDLIN( 136)			if ((_hx_tmp93 != ((int)_hx_tmp94 >> (int)(int)31))) {
HXLINE( 136)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN( 136)			Int _hx_tmp95 = _hx_int64_low(x17);
HXLINE( 111)			return ::thx::format::DateFormat_obj::getDecimalsPaddedUpTo(_hx_tmp95,(int)3);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("ffff",80,82,b9,43)) ){
HXLINE( 137)			HX_VARI_NAME(  ::cpp::Int64Struct,b26,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 137)			Bool _hx_tmp96 = _hx_int64_is_zero(t);
HXDLIN( 137)			if (_hx_tmp96) {
HXLINE( 137)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 137)			HX_VARI_NAME(  ::cpp::Int64Struct,x18,"x") = _hx_int64_mod(t,b26);
HXDLIN( 137)			Int _hx_tmp97 = _hx_int64_high(x18);
HXDLIN( 137)			Int _hx_tmp98 = _hx_int64_low(x18);
HXDLIN( 137)			if ((_hx_tmp97 != ((int)_hx_tmp98 >> (int)(int)31))) {
HXLINE( 137)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN( 137)			Int _hx_tmp99 = _hx_int64_low(x18);
HXLINE( 111)			return ::thx::format::DateFormat_obj::getDecimalsPaddedUpTo(_hx_tmp99,(int)4);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("fffff",e6,ad,98,fe)) ){
HXLINE( 138)			HX_VARI_NAME(  ::cpp::Int64Struct,b27,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 138)			Bool _hx_tmp100 = _hx_int64_is_zero(t);
HXDLIN( 138)			if (_hx_tmp100) {
HXLINE( 138)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 138)			HX_VARI_NAME(  ::cpp::Int64Struct,x19,"x") = _hx_int64_mod(t,b27);
HXDLIN( 138)			Int _hx_tmp101 = _hx_int64_high(x19);
HXDLIN( 138)			Int _hx_tmp102 = _hx_int64_low(x19);
HXDLIN( 138)			if ((_hx_tmp101 != ((int)_hx_tmp102 >> (int)(int)31))) {
HXLINE( 138)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN( 138)			Int _hx_tmp103 = _hx_int64_low(x19);
HXLINE( 111)			return ::thx::format::DateFormat_obj::getDecimalsPaddedUpTo(_hx_tmp103,(int)5);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("ffffff",c0,7b,ff,c6)) ){
HXLINE( 139)			HX_VARI_NAME(  ::cpp::Int64Struct,b28,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 139)			Bool _hx_tmp104 = _hx_int64_is_zero(t);
HXDLIN( 139)			if (_hx_tmp104) {
HXLINE( 139)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 139)			HX_VARI_NAME(  ::cpp::Int64Struct,x20,"x") = _hx_int64_mod(t,b28);
HXDLIN( 139)			Int _hx_tmp105 = _hx_int64_high(x20);
HXDLIN( 139)			Int _hx_tmp106 = _hx_int64_low(x20);
HXDLIN( 139)			if ((_hx_tmp105 != ((int)_hx_tmp106 >> (int)(int)31))) {
HXLINE( 139)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN( 139)			Int _hx_tmp107 = _hx_int64_low(x20);
HXLINE( 111)			return ::thx::format::DateFormat_obj::getDecimalsPaddedUpTo(_hx_tmp107,(int)6);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("fffffff",a6,cc,8c,58)) ){
HXLINE( 140)			HX_VARI_NAME(  ::cpp::Int64Struct,b29,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 140)			Bool _hx_tmp108 = _hx_int64_is_zero(t);
HXDLIN( 140)			if (_hx_tmp108) {
HXLINE( 140)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 140)			HX_VARI_NAME(  ::cpp::Int64Struct,x21,"x") = _hx_int64_mod(t,b29);
HXDLIN( 140)			Int _hx_tmp109 = _hx_int64_high(x21);
HXDLIN( 140)			Int _hx_tmp110 = _hx_int64_low(x21);
HXDLIN( 140)			if ((_hx_tmp109 != ((int)_hx_tmp110 >> (int)(int)31))) {
HXLINE( 140)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN( 140)			Int _hx_tmp111 = _hx_int64_low(x21);
HXLINE( 111)			return ::thx::format::DateFormat_obj::getDecimalsPadded(_hx_tmp111);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("h",68,00,00,00)) ){
HXLINE( 120)			HX_VARI_NAME(  ::cpp::Int64Struct,b30,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN( 120)			Bool _hx_tmp112 = _hx_int64_is_zero(t);
HXDLIN( 120)			if (_hx_tmp112) {
HXLINE( 120)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 120)			HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_div(t,b30);
HXDLIN( 120)			HX_VARI_NAME(  ::cpp::Int64Struct,b31,"b") = ( ::cpp::Int64Struct((int)24));
HXDLIN( 120)			Bool _hx_tmp113 = _hx_int64_is_zero(a);
HXDLIN( 120)			if (_hx_tmp113) {
HXLINE( 120)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 120)			HX_VARI_NAME(  ::cpp::Int64Struct,x22,"x") = _hx_int64_mod(a,b31);
HXDLIN( 120)			Int _hx_tmp114 = _hx_int64_high(x22);
HXDLIN( 120)			Int _hx_tmp115 = _hx_int64_low(x22);
HXDLIN( 120)			if ((_hx_tmp114 != ((int)_hx_tmp115 >> (int)(int)31))) {
HXLINE( 120)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN( 120)			Int _hx_tmp116 = _hx_int64_low(x22);
HXLINE( 111)			return (HX_("",00,00,00,00) + _hx_tmp116);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("hh",00,5b,00,00)) ){
HXLINE( 121)			HX_VARI_NAME(  ::cpp::Int64Struct,b32,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN( 121)			Bool _hx_tmp117 = _hx_int64_is_zero(t);
HXDLIN( 121)			if (_hx_tmp117) {
HXLINE( 121)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 121)			HX_VARI_NAME(  ::cpp::Int64Struct,a1,"a") = _hx_int64_div(t,b32);
HXDLIN( 121)			HX_VARI_NAME(  ::cpp::Int64Struct,b33,"b") = ( ::cpp::Int64Struct((int)24));
HXDLIN( 121)			Bool _hx_tmp118 = _hx_int64_is_zero(a1);
HXDLIN( 121)			if (_hx_tmp118) {
HXLINE( 121)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 121)			HX_VARI_NAME(  ::cpp::Int64Struct,x23,"x") = _hx_int64_mod(a1,b33);
HXDLIN( 121)			Int _hx_tmp119 = _hx_int64_high(x23);
HXDLIN( 121)			Int _hx_tmp120 = _hx_int64_low(x23);
HXDLIN( 121)			if ((_hx_tmp119 != ((int)_hx_tmp120 >> (int)(int)31))) {
HXLINE( 121)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN( 121)			Int _hx_tmp121 = _hx_int64_low(x23);
HXLINE( 111)			return ::thx::Ints_obj::lpad(_hx_tmp121,HX_("0",30,00,00,00),(int)2);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("m",6d,00,00,00)) ){
HXLINE( 130)			HX_VARI_NAME(  ::cpp::Int64Struct,b34,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMinuteI64;
HXDLIN( 130)			Bool _hx_tmp122 = _hx_int64_is_zero(t);
HXDLIN( 130)			if (_hx_tmp122) {
HXLINE( 130)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 130)			HX_VARI_NAME(  ::cpp::Int64Struct,a2,"a") = _hx_int64_div(t,b34);
HXDLIN( 130)			HX_VARI_NAME(  ::cpp::Int64Struct,b35,"b") = ( ::cpp::Int64Struct((int)60));
HXDLIN( 130)			Bool _hx_tmp123 = _hx_int64_is_zero(a2);
HXDLIN( 130)			if (_hx_tmp123) {
HXLINE( 130)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 130)			HX_VARI_NAME(  ::cpp::Int64Struct,x24,"x") = _hx_int64_mod(a2,b35);
HXDLIN( 130)			Int _hx_tmp124 = _hx_int64_high(x24);
HXDLIN( 130)			Int _hx_tmp125 = _hx_int64_low(x24);
HXDLIN( 130)			if ((_hx_tmp124 != ((int)_hx_tmp125 >> (int)(int)31))) {
HXLINE( 130)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN( 130)			Int _hx_tmp126 = _hx_int64_low(x24);
HXLINE( 111)			return (HX_("",00,00,00,00) + _hx_tmp126);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("mm",60,5f,00,00)) ){
HXLINE( 131)			HX_VARI_NAME(  ::cpp::Int64Struct,b36,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMinuteI64;
HXDLIN( 131)			Bool _hx_tmp127 = _hx_int64_is_zero(t);
HXDLIN( 131)			if (_hx_tmp127) {
HXLINE( 131)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 131)			HX_VARI_NAME(  ::cpp::Int64Struct,a3,"a") = _hx_int64_div(t,b36);
HXDLIN( 131)			HX_VARI_NAME(  ::cpp::Int64Struct,b37,"b") = ( ::cpp::Int64Struct((int)60));
HXDLIN( 131)			Bool _hx_tmp128 = _hx_int64_is_zero(a3);
HXDLIN( 131)			if (_hx_tmp128) {
HXLINE( 131)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 131)			HX_VARI_NAME(  ::cpp::Int64Struct,x25,"x") = _hx_int64_mod(a3,b37);
HXDLIN( 131)			Int _hx_tmp129 = _hx_int64_high(x25);
HXDLIN( 131)			Int _hx_tmp130 = _hx_int64_low(x25);
HXDLIN( 131)			if ((_hx_tmp129 != ((int)_hx_tmp130 >> (int)(int)31))) {
HXLINE( 131)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN( 131)			Int _hx_tmp131 = _hx_int64_low(x25);
HXLINE( 111)			return ::thx::Strings_obj::lpad((HX_("",00,00,00,00) + _hx_tmp131),HX_("0",30,00,00,00),(int)2);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("s",73,00,00,00)) ){
HXLINE( 132)			HX_VARI_NAME(  ::cpp::Int64Struct,b38,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 132)			Bool _hx_tmp132 = _hx_int64_is_zero(t);
HXDLIN( 132)			if (_hx_tmp132) {
HXLINE( 132)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 132)			HX_VARI_NAME(  ::cpp::Int64Struct,a4,"a") = _hx_int64_div(t,b38);
HXDLIN( 132)			HX_VARI_NAME(  ::cpp::Int64Struct,b39,"b") = ( ::cpp::Int64Struct((int)60));
HXDLIN( 132)			Bool _hx_tmp133 = _hx_int64_is_zero(a4);
HXDLIN( 132)			if (_hx_tmp133) {
HXLINE( 132)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 132)			HX_VARI_NAME(  ::cpp::Int64Struct,x26,"x") = _hx_int64_mod(a4,b39);
HXDLIN( 132)			Int _hx_tmp134 = _hx_int64_high(x26);
HXDLIN( 132)			Int _hx_tmp135 = _hx_int64_low(x26);
HXDLIN( 132)			if ((_hx_tmp134 != ((int)_hx_tmp135 >> (int)(int)31))) {
HXLINE( 132)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN( 132)			Int _hx_tmp136 = _hx_int64_low(x26);
HXLINE( 111)			return (HX_("",00,00,00,00) + _hx_tmp136);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("ss",a0,64,00,00)) ){
HXLINE( 133)			HX_VARI_NAME(  ::cpp::Int64Struct,b40,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 133)			Bool _hx_tmp137 = _hx_int64_is_zero(t);
HXDLIN( 133)			if (_hx_tmp137) {
HXLINE( 133)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 133)			HX_VARI_NAME(  ::cpp::Int64Struct,a5,"a") = _hx_int64_div(t,b40);
HXDLIN( 133)			HX_VARI_NAME(  ::cpp::Int64Struct,b41,"b") = ( ::cpp::Int64Struct((int)60));
HXDLIN( 133)			Bool _hx_tmp138 = _hx_int64_is_zero(a5);
HXDLIN( 133)			if (_hx_tmp138) {
HXLINE( 133)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 133)			HX_VARI_NAME(  ::cpp::Int64Struct,x27,"x") = _hx_int64_mod(a5,b41);
HXDLIN( 133)			Int _hx_tmp139 = _hx_int64_high(x27);
HXDLIN( 133)			Int _hx_tmp140 = _hx_int64_low(x27);
HXDLIN( 133)			if ((_hx_tmp139 != ((int)_hx_tmp140 >> (int)(int)31))) {
HXLINE( 133)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN( 133)			Int _hx_tmp141 = _hx_int64_low(x27);
HXLINE( 111)			return ::thx::Strings_obj::lpad((HX_("",00,00,00,00) + _hx_tmp141),HX_("0",30,00,00,00),(int)2);
HXDLIN( 111)			goto _hx_goto_2;
            		}
            		/* default */{
HXLINE( 150)			Bool _hx_tmp142;
HXDLIN( 150)			Bool _hx_tmp143;
HXDLIN( 150)			Bool _hx_tmp144;
HXDLIN( 150)			if (hx::IsNotNull( pattern )) {
HXLINE( 150)				_hx_tmp144 = (pattern.length > (int)1);
            			}
            			else {
HXLINE( 150)				_hx_tmp144 = false;
            			}
HXDLIN( 150)			if (_hx_tmp144) {
HXLINE( 151)				::String _hx_tmp145 = pattern.substring((int)0,(int)1);
HXDLIN( 151)				if ((_hx_tmp145 == HX_("'",27,00,00,00))) {
HXLINE( 151)					Int _hx_tmp146 = (pattern.length - (int)1);
HXDLIN( 151)					::String _hx_tmp147 = pattern.substring(_hx_tmp146,null());
HXLINE( 150)					_hx_tmp143 = (_hx_tmp147 == HX_("'",27,00,00,00));
            				}
            				else {
HXLINE( 150)					_hx_tmp143 = false;
            				}
            			}
            			else {
HXLINE( 150)				_hx_tmp143 = false;
            			}
HXDLIN( 150)			if (!(_hx_tmp143)) {
HXLINE( 152)				::String _hx_tmp148 = pattern.substring((int)0,(int)1);
HXDLIN( 152)				if ((_hx_tmp148 == HX_("\"",22,00,00,00))) {
HXLINE( 152)					Int _hx_tmp149 = (pattern.length - (int)1);
HXDLIN( 152)					::String _hx_tmp150 = pattern.substring(_hx_tmp149,null());
HXLINE( 150)					_hx_tmp142 = (_hx_tmp150 == HX_("\"",22,00,00,00));
            				}
            				else {
HXLINE( 150)					_hx_tmp142 = false;
            				}
            			}
            			else {
HXLINE( 150)				_hx_tmp142 = true;
            			}
HXDLIN( 150)			if (_hx_tmp142) {
HXLINE( 153)				Int _hx_tmp151 = (pattern.length - (int)1);
HXLINE( 111)				return pattern.substring((int)1,_hx_tmp151);
            			}
            			else {
HXLINE( 111)				return pattern;
            			}
            		}
            		_hx_goto_2:;
HXDLIN( 111)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(TimeFormat_obj,formatTerm,return )

::String TimeFormat_obj::timeLong( ::cpp::Int64Struct time, ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.TimeFormat","timeLong",0x209d2b86,"thx.format.TimeFormat.timeLong","thx/format/TimeFormat.hx",160,0x3d56048d)
            	HX_STACK_ARG(time,"time")
            	HX_STACK_ARG(culture,"culture")
HXLINE( 161)		HX_VARI(  ::cpp::Int64Struct,abs) = ::thx::_Time::Time_Impl__obj::abs(time);
HXDLIN( 161)		HX_VARI(  ::thx::culture::DateFormatInfo,dt) = ::thx::format::DateFormat_obj::dateTime(culture);
HXLINE( 163)		 ::thx::culture::Culture _hx_tmp;
HXDLIN( 163)		if (hx::IsNull( culture )) {
HXLINE( 163)			_hx_tmp = ::thx::format::Format_obj::get_defaultCulture();
            		}
            		else {
HXLINE( 163)			_hx_tmp = culture;
            		}
HXLINE( 161)		HX_VARI(  ::thx::culture::NumberFormatInfo,n) = _hx_tmp->number;
HXLINE( 164)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerDayI64;
HXDLIN( 164)		Bool _hx_tmp1 = _hx_int64_is_zero(abs);
HXDLIN( 164)		if (_hx_tmp1) {
HXLINE( 164)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 164)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_div(abs,b);
HXDLIN( 164)		Int _hx_tmp2 = _hx_int64_high(x);
HXDLIN( 164)		Int _hx_tmp3 = _hx_int64_low(x);
HXDLIN( 164)		if ((_hx_tmp2 != ((int)_hx_tmp3 >> (int)(int)31))) {
HXLINE( 164)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 164)		Int _hx_tmp4 = _hx_int64_low(x);
HXLINE( 161)		HX_VARI( Int,days) = _hx_tmp4;
HXLINE( 165)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN( 165)		Bool _hx_tmp5 = _hx_int64_is_zero(abs);
HXDLIN( 165)		if (_hx_tmp5) {
HXLINE( 165)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 165)		HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_div(abs,b1);
HXDLIN( 165)		HX_VARI_NAME(  ::cpp::Int64Struct,b2,"b") = ( ::cpp::Int64Struct((int)24));
HXDLIN( 165)		Bool _hx_tmp6 = _hx_int64_is_zero(a);
HXDLIN( 165)		if (_hx_tmp6) {
HXLINE( 165)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 165)		HX_VARI_NAME(  ::cpp::Int64Struct,x1,"x") = _hx_int64_mod(a,b2);
HXDLIN( 165)		Int _hx_tmp7 = _hx_int64_high(x1);
HXDLIN( 165)		Int _hx_tmp8 = _hx_int64_low(x1);
HXDLIN( 165)		if ((_hx_tmp7 != ((int)_hx_tmp8 >> (int)(int)31))) {
HXLINE( 165)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 165)		Int _hx_tmp9 = _hx_int64_low(x1);
HXLINE( 161)		HX_VARI( Int,hours) = _hx_tmp9;
HXLINE( 166)		HX_VARI_NAME(  ::cpp::Int64Struct,b3,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMinuteI64;
HXDLIN( 166)		Bool _hx_tmp10 = _hx_int64_is_zero(abs);
HXDLIN( 166)		if (_hx_tmp10) {
HXLINE( 166)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 166)		HX_VARI_NAME(  ::cpp::Int64Struct,a1,"a") = _hx_int64_div(abs,b3);
HXDLIN( 166)		HX_VARI_NAME(  ::cpp::Int64Struct,b4,"b") = ( ::cpp::Int64Struct((int)60));
HXDLIN( 166)		Bool _hx_tmp11 = _hx_int64_is_zero(a1);
HXDLIN( 166)		if (_hx_tmp11) {
HXLINE( 166)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 166)		HX_VARI_NAME(  ::cpp::Int64Struct,x2,"x") = _hx_int64_mod(a1,b4);
HXDLIN( 166)		Int _hx_tmp12 = _hx_int64_high(x2);
HXDLIN( 166)		Int _hx_tmp13 = _hx_int64_low(x2);
HXDLIN( 166)		if ((_hx_tmp12 != ((int)_hx_tmp13 >> (int)(int)31))) {
HXLINE( 166)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 166)		Int _hx_tmp14 = _hx_int64_low(x2);
HXLINE( 161)		HX_VARI( Int,minutes) = _hx_tmp14;
HXLINE( 167)		HX_VARI_NAME(  ::cpp::Int64Struct,b5,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 167)		Bool _hx_tmp15 = _hx_int64_is_zero(abs);
HXDLIN( 167)		if (_hx_tmp15) {
HXLINE( 167)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 167)		HX_VARI_NAME(  ::cpp::Int64Struct,a2,"a") = _hx_int64_div(abs,b5);
HXDLIN( 167)		HX_VARI_NAME(  ::cpp::Int64Struct,b6,"b") = ( ::cpp::Int64Struct((int)60));
HXDLIN( 167)		Bool _hx_tmp16 = _hx_int64_is_zero(a2);
HXDLIN( 167)		if (_hx_tmp16) {
HXLINE( 167)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 167)		HX_VARI_NAME(  ::cpp::Int64Struct,x3,"x") = _hx_int64_mod(a2,b6);
HXDLIN( 167)		Int _hx_tmp17 = _hx_int64_high(x3);
HXDLIN( 167)		Int _hx_tmp18 = _hx_int64_low(x3);
HXDLIN( 167)		if ((_hx_tmp17 != ((int)_hx_tmp18 >> (int)(int)31))) {
HXLINE( 167)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 167)		Int _hx_tmp19 = _hx_int64_low(x3);
HXLINE( 161)		HX_VARI( Int,seconds) = _hx_tmp19;
HXDLIN( 161)		HX_VARI( ::String,buf) = HX_("",00,00,00,00);
HXLINE( 169)		HX_VARI_NAME(  ::cpp::Int64Struct,b7,"b") = ( ::cpp::Int64Struct((int)0));
HXDLIN( 169)		Int _hx_tmp20 = _hx_int64_compare(time,b7);
HXDLIN( 169)		if ((_hx_tmp20 < (int)0)) {
HXLINE( 170)			buf = (HX_("",00,00,00,00) + n->signNegative);
            		}
HXLINE( 171)		if ((days != (int)0)) {
HXLINE( 172)			hx::AddEq(buf,(days + n->separatorDecimalNumber));
            		}
HXLINE( 173)		hx::AddEq(buf,::thx::Ints_obj::lpad(hours,HX_("0",30,00,00,00),(int)2));
HXLINE( 174)		hx::AddEq(buf,dt->separatorTime);
HXLINE( 175)		hx::AddEq(buf,::thx::Ints_obj::lpad(minutes,HX_("0",30,00,00,00),(int)2));
HXLINE( 176)		hx::AddEq(buf,dt->separatorTime);
HXLINE( 177)		hx::AddEq(buf,::thx::Ints_obj::lpad(seconds,HX_("0",30,00,00,00),(int)2));
HXLINE( 178)		HX_VARI_NAME(  ::cpp::Int64Struct,b8,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 178)		Bool _hx_tmp21 = _hx_int64_is_zero(abs);
HXDLIN( 178)		if (_hx_tmp21) {
HXLINE( 178)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 178)		HX_VARI_NAME(  ::cpp::Int64Struct,x4,"x") = _hx_int64_mod(abs,b8);
HXDLIN( 178)		Int _hx_tmp22 = _hx_int64_high(x4);
HXDLIN( 178)		Int _hx_tmp23 = _hx_int64_low(x4);
HXDLIN( 178)		if ((_hx_tmp22 != ((int)_hx_tmp23 >> (int)(int)31))) {
HXLINE( 178)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 178)		Int _hx_tmp24 = _hx_int64_low(x4);
HXDLIN( 178)		HX_VARI( Int,t) = _hx_tmp24;
HXLINE( 179)		if ((t != (int)0)) {
HXLINE( 180)			hx::AddEq(buf,(n->separatorDecimalNumber + ::thx::format::DateFormat_obj::getDecimalsPadded(t)));
            		}
HXLINE( 181)		return buf;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(TimeFormat_obj,timeLong,return )

::String TimeFormat_obj::timeShort( ::cpp::Int64Struct time, ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.TimeFormat","timeShort",0x6c174732,"thx.format.TimeFormat.timeShort","thx/format/TimeFormat.hx",187,0x3d56048d)
            	HX_STACK_ARG(time,"time")
            	HX_STACK_ARG(culture,"culture")
HXLINE( 188)		HX_VARI(  ::cpp::Int64Struct,abs) = ::thx::_Time::Time_Impl__obj::abs(time);
HXDLIN( 188)		HX_VARI(  ::thx::culture::DateFormatInfo,dt) = ::thx::format::DateFormat_obj::dateTime(culture);
HXLINE( 190)		 ::thx::culture::Culture _hx_tmp;
HXDLIN( 190)		if (hx::IsNull( culture )) {
HXLINE( 190)			_hx_tmp = ::thx::format::Format_obj::get_defaultCulture();
            		}
            		else {
HXLINE( 190)			_hx_tmp = culture;
            		}
HXLINE( 188)		HX_VARI(  ::thx::culture::NumberFormatInfo,n) = _hx_tmp->number;
HXLINE( 191)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerDayI64;
HXDLIN( 191)		Bool _hx_tmp1 = _hx_int64_is_zero(abs);
HXDLIN( 191)		if (_hx_tmp1) {
HXLINE( 191)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 191)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_div(abs,b);
HXDLIN( 191)		Int _hx_tmp2 = _hx_int64_high(x);
HXDLIN( 191)		Int _hx_tmp3 = _hx_int64_low(x);
HXDLIN( 191)		if ((_hx_tmp2 != ((int)_hx_tmp3 >> (int)(int)31))) {
HXLINE( 191)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 191)		Int _hx_tmp4 = _hx_int64_low(x);
HXLINE( 188)		HX_VARI( Int,days) = _hx_tmp4;
HXLINE( 192)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN( 192)		Bool _hx_tmp5 = _hx_int64_is_zero(abs);
HXDLIN( 192)		if (_hx_tmp5) {
HXLINE( 192)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 192)		HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_div(abs,b1);
HXDLIN( 192)		HX_VARI_NAME(  ::cpp::Int64Struct,b2,"b") = ( ::cpp::Int64Struct((int)24));
HXDLIN( 192)		Bool _hx_tmp6 = _hx_int64_is_zero(a);
HXDLIN( 192)		if (_hx_tmp6) {
HXLINE( 192)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 192)		HX_VARI_NAME(  ::cpp::Int64Struct,x1,"x") = _hx_int64_mod(a,b2);
HXDLIN( 192)		Int _hx_tmp7 = _hx_int64_high(x1);
HXDLIN( 192)		Int _hx_tmp8 = _hx_int64_low(x1);
HXDLIN( 192)		if ((_hx_tmp7 != ((int)_hx_tmp8 >> (int)(int)31))) {
HXLINE( 192)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 192)		Int _hx_tmp9 = _hx_int64_low(x1);
HXLINE( 188)		HX_VARI( Int,hours) = _hx_tmp9;
HXLINE( 193)		HX_VARI_NAME(  ::cpp::Int64Struct,b3,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMinuteI64;
HXDLIN( 193)		Bool _hx_tmp10 = _hx_int64_is_zero(abs);
HXDLIN( 193)		if (_hx_tmp10) {
HXLINE( 193)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 193)		HX_VARI_NAME(  ::cpp::Int64Struct,a1,"a") = _hx_int64_div(abs,b3);
HXDLIN( 193)		HX_VARI_NAME(  ::cpp::Int64Struct,b4,"b") = ( ::cpp::Int64Struct((int)60));
HXDLIN( 193)		Bool _hx_tmp11 = _hx_int64_is_zero(a1);
HXDLIN( 193)		if (_hx_tmp11) {
HXLINE( 193)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 193)		HX_VARI_NAME(  ::cpp::Int64Struct,x2,"x") = _hx_int64_mod(a1,b4);
HXDLIN( 193)		Int _hx_tmp12 = _hx_int64_high(x2);
HXDLIN( 193)		Int _hx_tmp13 = _hx_int64_low(x2);
HXDLIN( 193)		if ((_hx_tmp12 != ((int)_hx_tmp13 >> (int)(int)31))) {
HXLINE( 193)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 193)		Int _hx_tmp14 = _hx_int64_low(x2);
HXLINE( 188)		HX_VARI( Int,minutes) = _hx_tmp14;
HXLINE( 194)		HX_VARI_NAME(  ::cpp::Int64Struct,b5,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 194)		Bool _hx_tmp15 = _hx_int64_is_zero(abs);
HXDLIN( 194)		if (_hx_tmp15) {
HXLINE( 194)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 194)		HX_VARI_NAME(  ::cpp::Int64Struct,a2,"a") = _hx_int64_div(abs,b5);
HXDLIN( 194)		HX_VARI_NAME(  ::cpp::Int64Struct,b6,"b") = ( ::cpp::Int64Struct((int)60));
HXDLIN( 194)		Bool _hx_tmp16 = _hx_int64_is_zero(a2);
HXDLIN( 194)		if (_hx_tmp16) {
HXLINE( 194)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 194)		HX_VARI_NAME(  ::cpp::Int64Struct,x3,"x") = _hx_int64_mod(a2,b6);
HXDLIN( 194)		Int _hx_tmp17 = _hx_int64_high(x3);
HXDLIN( 194)		Int _hx_tmp18 = _hx_int64_low(x3);
HXDLIN( 194)		if ((_hx_tmp17 != ((int)_hx_tmp18 >> (int)(int)31))) {
HXLINE( 194)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 194)		Int _hx_tmp19 = _hx_int64_low(x3);
HXLINE( 188)		HX_VARI( Int,seconds) = _hx_tmp19;
HXDLIN( 188)		HX_VARI( ::String,buf) = HX_("",00,00,00,00);
HXLINE( 196)		HX_VARI_NAME(  ::cpp::Int64Struct,b7,"b") = ( ::cpp::Int64Struct((int)0));
HXDLIN( 196)		Int _hx_tmp20 = _hx_int64_compare(time,b7);
HXDLIN( 196)		if ((_hx_tmp20 < (int)0)) {
HXLINE( 197)			buf = (HX_("",00,00,00,00) + n->signNegative);
            		}
HXLINE( 198)		if ((days != (int)0)) {
HXLINE( 199)			hx::AddEq(buf,(days + dt->separatorTime));
            		}
HXLINE( 200)		hx::AddEq(buf,::thx::Ints_obj::lpad(hours,HX_("0",30,00,00,00),(int)2));
HXLINE( 201)		hx::AddEq(buf,dt->separatorTime);
HXLINE( 202)		hx::AddEq(buf,::thx::Ints_obj::lpad(minutes,HX_("0",30,00,00,00),(int)2));
HXLINE( 203)		hx::AddEq(buf,dt->separatorTime);
HXLINE( 204)		hx::AddEq(buf,::thx::Ints_obj::lpad(seconds,HX_("0",30,00,00,00),(int)2));
HXLINE( 205)		HX_VARI_NAME(  ::cpp::Int64Struct,b8,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 205)		Bool _hx_tmp21 = _hx_int64_is_zero(abs);
HXDLIN( 205)		if (_hx_tmp21) {
HXLINE( 205)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 205)		HX_VARI_NAME(  ::cpp::Int64Struct,x4,"x") = _hx_int64_mod(abs,b8);
HXDLIN( 205)		Int _hx_tmp22 = _hx_int64_high(x4);
HXDLIN( 205)		Int _hx_tmp23 = _hx_int64_low(x4);
HXDLIN( 205)		if ((_hx_tmp22 != ((int)_hx_tmp23 >> (int)(int)31))) {
HXLINE( 205)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 205)		Int _hx_tmp24 = _hx_int64_low(x4);
HXDLIN( 205)		HX_VARI( Int,t) = _hx_tmp24;
HXLINE( 206)		if ((t != (int)0)) {
HXLINE( 207)			::String _hx_tmp25 = ::thx::format::DateFormat_obj::getDecimalsString(t);
HXDLIN( 207)			hx::AddEq(buf,(n->separatorDecimalNumber + _hx_tmp25));
            		}
HXLINE( 209)		return buf;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(TimeFormat_obj,timeShort,return )

::String TimeFormat_obj::invariantTimeLong( ::cpp::Int64Struct time){
            	HX_STACK_FRAME("thx.format.TimeFormat","invariantTimeLong",0xe07ca88c,"thx.format.TimeFormat.invariantTimeLong","thx/format/TimeFormat.hx",213,0x3d56048d)
            	HX_STACK_ARG(time,"time")
HXLINE( 213)		return ::thx::format::TimeFormat_obj::timeLong(time,::thx::culture::Culture_obj::invariant);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TimeFormat_obj,invariantTimeLong,return )

::String TimeFormat_obj::offsetHoursShort( ::cpp::Int64Struct offset, ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.TimeFormat","offsetHoursShort",0x0706d0fd,"thx.format.TimeFormat.offsetHoursShort","thx/format/TimeFormat.hx",215,0x3d56048d)
            	HX_STACK_ARG(offset,"offset")
            	HX_STACK_ARG(culture,"culture")
HXLINE( 216)		 ::thx::culture::Culture _hx_tmp;
HXDLIN( 216)		if (hx::IsNull( culture )) {
HXLINE( 216)			_hx_tmp = ::thx::format::Format_obj::get_defaultCulture();
            		}
            		else {
HXLINE( 216)			_hx_tmp = culture;
            		}
HXDLIN( 216)		HX_VARI(  ::thx::culture::NumberFormatInfo,n) = _hx_tmp->number;
HXDLIN( 216)		HX_VARI(  ::cpp::Int64Struct,abs) = ::thx::_Time::Time_Impl__obj::abs(offset);
HXLINE( 218)		::String _hx_tmp1;
HXDLIN( 218)		HX_VARI(  ::cpp::Int64Struct,b) = ( ::cpp::Int64Struct((int)0));
HXDLIN( 218)		Int _hx_tmp2 = _hx_int64_compare(offset,b);
HXDLIN( 218)		if ((_hx_tmp2 < (int)0)) {
HXLINE( 218)			_hx_tmp1 = n->signNegative;
            		}
            		else {
HXLINE( 218)			_hx_tmp1 = n->signPositive;
            		}
HXLINE( 219)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN( 219)		Bool _hx_tmp3 = _hx_int64_is_zero(abs);
HXDLIN( 219)		if (_hx_tmp3) {
HXLINE( 219)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 219)		 ::cpp::Int64Struct _hx_tmp4 = _hx_int64_div(abs,b1);
HXDLIN( 219)		::String _hx_tmp5 = _hx_int64_to_string(_hx_tmp4);
HXLINE( 218)		return (_hx_tmp1 + _hx_tmp5);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(TimeFormat_obj,offsetHoursShort,return )

::String TimeFormat_obj::offsetHoursLong( ::cpp::Int64Struct offset, ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.TimeFormat","offsetHoursLong",0x9667241b,"thx.format.TimeFormat.offsetHoursLong","thx/format/TimeFormat.hx",222,0x3d56048d)
            	HX_STACK_ARG(offset,"offset")
            	HX_STACK_ARG(culture,"culture")
HXLINE( 223)		 ::thx::culture::Culture _hx_tmp;
HXDLIN( 223)		if (hx::IsNull( culture )) {
HXLINE( 223)			_hx_tmp = ::thx::format::Format_obj::get_defaultCulture();
            		}
            		else {
HXLINE( 223)			_hx_tmp = culture;
            		}
HXDLIN( 223)		HX_VARI(  ::thx::culture::NumberFormatInfo,n) = _hx_tmp->number;
HXDLIN( 223)		HX_VARI(  ::cpp::Int64Struct,abs) = ::thx::_Time::Time_Impl__obj::abs(offset);
HXLINE( 225)		::String _hx_tmp1;
HXDLIN( 225)		HX_VARI(  ::cpp::Int64Struct,b) = ( ::cpp::Int64Struct((int)0));
HXDLIN( 225)		Int _hx_tmp2 = _hx_int64_compare(offset,b);
HXDLIN( 225)		if ((_hx_tmp2 < (int)0)) {
HXLINE( 225)			_hx_tmp1 = n->signNegative;
            		}
            		else {
HXLINE( 225)			_hx_tmp1 = n->signPositive;
            		}
HXLINE( 226)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN( 226)		Bool _hx_tmp3 = _hx_int64_is_zero(abs);
HXDLIN( 226)		if (_hx_tmp3) {
HXLINE( 226)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 226)		 ::cpp::Int64Struct _hx_tmp4 = _hx_int64_div(abs,b1);
HXDLIN( 226)		::String _hx_tmp5 = _hx_int64_to_string(_hx_tmp4);
HXDLIN( 226)		::String _hx_tmp6 = ::thx::Strings_obj::lpad(_hx_tmp5,HX_("0",30,00,00,00),(int)2);
HXLINE( 225)		return (_hx_tmp1 + _hx_tmp6);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(TimeFormat_obj,offsetHoursLong,return )

::String TimeFormat_obj::offsetLong( ::cpp::Int64Struct offset, ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.TimeFormat","offsetLong",0xa7e0834c,"thx.format.TimeFormat.offsetLong","thx/format/TimeFormat.hx",229,0x3d56048d)
            	HX_STACK_ARG(offset,"offset")
            	HX_STACK_ARG(culture,"culture")
HXLINE( 230)		HX_VARI(  ::thx::culture::DateFormatInfo,dt) = ::thx::format::DateFormat_obj::dateTime(culture);
HXLINE( 231)		 ::thx::culture::Culture _hx_tmp;
HXDLIN( 231)		if (hx::IsNull( culture )) {
HXLINE( 231)			_hx_tmp = ::thx::format::Format_obj::get_defaultCulture();
            		}
            		else {
HXLINE( 231)			_hx_tmp = culture;
            		}
HXLINE( 230)		HX_VARI(  ::thx::culture::NumberFormatInfo,n) = _hx_tmp->number;
HXDLIN( 230)		HX_VARI(  ::cpp::Int64Struct,abs) = ::thx::_Time::Time_Impl__obj::abs(offset);
HXLINE( 233)		::String _hx_tmp1;
HXDLIN( 233)		HX_VARI(  ::cpp::Int64Struct,b) = ( ::cpp::Int64Struct((int)0));
HXDLIN( 233)		Int _hx_tmp2 = _hx_int64_compare(offset,b);
HXDLIN( 233)		if ((_hx_tmp2 < (int)0)) {
HXLINE( 233)			_hx_tmp1 = n->signNegative;
            		}
            		else {
HXLINE( 233)			_hx_tmp1 = n->signPositive;
            		}
HXLINE( 234)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN( 234)		Bool _hx_tmp3 = _hx_int64_is_zero(abs);
HXDLIN( 234)		if (_hx_tmp3) {
HXLINE( 234)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 234)		 ::cpp::Int64Struct _hx_tmp4 = _hx_int64_div(abs,b1);
HXDLIN( 234)		::String _hx_tmp5 = _hx_int64_to_string(_hx_tmp4);
HXDLIN( 234)		::String _hx_tmp6 = ::thx::Strings_obj::lpad(_hx_tmp5,HX_("0",30,00,00,00),(int)2);
HXLINE( 233)		::String _hx_tmp7 = ((_hx_tmp1 + _hx_tmp6) + dt->separatorTime);
HXLINE( 236)		HX_VARI_NAME(  ::cpp::Int64Struct,b2,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMinuteI64;
HXDLIN( 236)		Bool _hx_tmp8 = _hx_int64_is_zero(abs);
HXDLIN( 236)		if (_hx_tmp8) {
HXLINE( 236)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 236)		HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_div(abs,b2);
HXDLIN( 236)		HX_VARI_NAME(  ::cpp::Int64Struct,b3,"b") = ( ::cpp::Int64Struct((int)60));
HXDLIN( 236)		Bool _hx_tmp9 = _hx_int64_is_zero(a);
HXDLIN( 236)		if (_hx_tmp9) {
HXLINE( 236)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 236)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_mod(a,b3);
HXDLIN( 236)		Int _hx_tmp10 = _hx_int64_high(x);
HXDLIN( 236)		Int _hx_tmp11 = _hx_int64_low(x);
HXDLIN( 236)		if ((_hx_tmp10 != ((int)_hx_tmp11 >> (int)(int)31))) {
HXLINE( 236)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 236)		Int _hx_tmp12 = _hx_int64_low(x);
HXLINE( 233)		return (_hx_tmp7 + ::thx::Ints_obj::lpad(_hx_tmp12,HX_("0",30,00,00,00),(int)2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(TimeFormat_obj,offsetLong,return )

::String TimeFormat_obj::iso8601OffsetShort( ::cpp::Int64Struct offset){
            	HX_STACK_FRAME("thx.format.TimeFormat","iso8601OffsetShort",0xf82989a2,"thx.format.TimeFormat.iso8601OffsetShort","thx/format/TimeFormat.hx",239,0x3d56048d)
            	HX_STACK_ARG(offset,"offset")
HXLINE( 240)		HX_VARI(  ::cpp::Int64Struct,abs) = ::thx::_Time::Time_Impl__obj::abs(offset);
HXLINE( 241)		::String _hx_tmp;
HXDLIN( 241)		HX_VARI(  ::cpp::Int64Struct,b) = ( ::cpp::Int64Struct((int)0));
HXDLIN( 241)		Int _hx_tmp1 = _hx_int64_compare(offset,b);
HXDLIN( 241)		if ((_hx_tmp1 < (int)0)) {
HXLINE( 241)			_hx_tmp = HX_("-",2d,00,00,00);
            		}
            		else {
HXLINE( 241)			_hx_tmp = HX_("+",2b,00,00,00);
            		}
HXLINE( 242)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN( 242)		Bool _hx_tmp2 = _hx_int64_is_zero(abs);
HXDLIN( 242)		if (_hx_tmp2) {
HXLINE( 242)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 242)		 ::cpp::Int64Struct _hx_tmp3 = _hx_int64_div(abs,b1);
HXDLIN( 242)		::String _hx_tmp4 = _hx_int64_to_string(_hx_tmp3);
HXDLIN( 242)		::String _hx_tmp5 = ::thx::Strings_obj::lpad(_hx_tmp4,HX_("0",30,00,00,00),(int)2);
HXLINE( 241)		::String _hx_tmp6 = (_hx_tmp + _hx_tmp5);
HXLINE( 243)		HX_VARI_NAME(  ::cpp::Int64Struct,b2,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMinuteI64;
HXDLIN( 243)		Bool _hx_tmp7 = _hx_int64_is_zero(abs);
HXDLIN( 243)		if (_hx_tmp7) {
HXLINE( 243)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 243)		HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_div(abs,b2);
HXDLIN( 243)		HX_VARI_NAME(  ::cpp::Int64Struct,b3,"b") = ( ::cpp::Int64Struct((int)60));
HXDLIN( 243)		Bool _hx_tmp8 = _hx_int64_is_zero(a);
HXDLIN( 243)		if (_hx_tmp8) {
HXLINE( 243)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 243)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_mod(a,b3);
HXDLIN( 243)		Int _hx_tmp9 = _hx_int64_high(x);
HXDLIN( 243)		Int _hx_tmp10 = _hx_int64_low(x);
HXDLIN( 243)		if ((_hx_tmp9 != ((int)_hx_tmp10 >> (int)(int)31))) {
HXLINE( 243)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 243)		Int _hx_tmp11 = _hx_int64_low(x);
HXLINE( 241)		return (_hx_tmp6 + ::thx::Ints_obj::lpad(_hx_tmp11,HX_("0",30,00,00,00),(int)2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TimeFormat_obj,iso8601OffsetShort,return )

 ::EReg TimeFormat_obj::getPattern(){
            	HX_STACK_FRAME("thx.format.TimeFormat","getPattern",0xc4e9e0f7,"thx.format.TimeFormat.getPattern","thx/format/TimeFormat.hx",246,0x3d56048d)
HXLINE( 246)		return  ::EReg_obj::__new(HX_("(d|H){1,8}|(f|F){1,7}|(h|m|s){1,2}|[:.]|'[^']*'|\"[^\"]*\"",e8,c7,a5,8f),HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(TimeFormat_obj,getPattern,return )


TimeFormat_obj::TimeFormat_obj()
{
}

bool TimeFormat_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"format") ) { outValue = format_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"timeLong") ) { outValue = timeLong_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"timeShort") ) { outValue = timeShort_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"formatTerm") ) { outValue = formatTerm_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"offsetLong") ) { outValue = offsetLong_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPattern") ) { outValue = getPattern_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"customFormat") ) { outValue = customFormat_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"offsetHoursLong") ) { outValue = offsetHoursLong_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"offsetHoursShort") ) { outValue = offsetHoursShort_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"invariantTimeLong") ) { outValue = invariantTimeLong_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"iso8601OffsetShort") ) { outValue = iso8601OffsetShort_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TimeFormat_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TimeFormat_obj_sStaticStorageInfo = 0;
#endif

static void TimeFormat_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TimeFormat_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TimeFormat_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TimeFormat_obj::__mClass,"__mClass");
};

#endif

hx::Class TimeFormat_obj::__mClass;

static ::String TimeFormat_obj_sStaticFields[] = {
	HX_HCSTRING("customFormat","\xc8","\xe5","\x2b","\xfd"),
	HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd"),
	HX_HCSTRING("formatTerm","\x43","\xea","\x5e","\x0c"),
	HX_HCSTRING("timeLong","\x29","\x28","\x19","\xe8"),
	HX_HCSTRING("timeShort","\x2f","\x59","\x18","\x31"),
	HX_HCSTRING("invariantTimeLong","\x89","\x7f","\x0b","\x8f"),
	HX_HCSTRING("offsetHoursShort","\xa0","\xa8","\x94","\x34"),
	HX_HCSTRING("offsetHoursLong","\xd8","\x51","\xc1","\x97"),
	HX_HCSTRING("offsetLong","\xaf","\x2e","\xcf","\x43"),
	HX_HCSTRING("iso8601OffsetShort","\x05","\xd0","\x96","\x06"),
	HX_HCSTRING("getPattern","\x5a","\x8c","\xd8","\x60"),
	::String(null())
};

void TimeFormat_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.format.TimeFormat","\xb1","\x3c","\x32","\x80");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TimeFormat_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TimeFormat_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TimeFormat_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< TimeFormat_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TimeFormat_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TimeFormat_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TimeFormat_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace format
