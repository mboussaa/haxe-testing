// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_culture_DateFormatInfo
#include <thx/culture/DateFormatInfo.h>
#endif

namespace thx{
namespace culture{

void DateFormatInfo_obj::__construct(Int calendarWeekRuleIndex,::String calendarWeekRuleName,::String designatorAm,::String designatorPm,Int firstDayOfWeekIndex,::String firstDayOfWeekName,::String nameCalendar,::String nameCalendarNative,::Array< ::String > nameDays,::Array< ::String > nameDaysAbbreviated,::Array< ::String > nameDaysShortest,::Array< ::String > nameMonths,::Array< ::String > nameMonthsAbbreviated,::Array< ::String > nameMonthGenitives,::Array< ::String > nameMonthGenitivesAbbreviated,::String patternDateLong,::String patternDateShort,::String patternDateTimeFull,::String patternDateTimeSortable,::String patternMonthDay,::String patternRfc1123,::String patternTimeLong,::String patternTimeShort,::String patternUniversalSortable,::String patternYearMonth,::String separatorDate,::String separatorTime){
            	HX_STACK_FRAME("thx.culture.DateFormatInfo","new",0x267bbfcf,"thx.culture.DateFormatInfo.new","thx/culture/DateFormatInfo.hx",90,0x5979c33f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(calendarWeekRuleIndex,"calendarWeekRuleIndex")
            	HX_STACK_ARG(calendarWeekRuleName,"calendarWeekRuleName")
            	HX_STACK_ARG(designatorAm,"designatorAm")
            	HX_STACK_ARG(designatorPm,"designatorPm")
            	HX_STACK_ARG(firstDayOfWeekIndex,"firstDayOfWeekIndex")
            	HX_STACK_ARG(firstDayOfWeekName,"firstDayOfWeekName")
            	HX_STACK_ARG(nameCalendar,"nameCalendar")
            	HX_STACK_ARG(nameCalendarNative,"nameCalendarNative")
            	HX_STACK_ARG(nameDays,"nameDays")
            	HX_STACK_ARG(nameDaysAbbreviated,"nameDaysAbbreviated")
            	HX_STACK_ARG(nameDaysShortest,"nameDaysShortest")
            	HX_STACK_ARG(nameMonths,"nameMonths")
            	HX_STACK_ARG(nameMonthsAbbreviated,"nameMonthsAbbreviated")
            	HX_STACK_ARG(nameMonthGenitives,"nameMonthGenitives")
            	HX_STACK_ARG(nameMonthGenitivesAbbreviated,"nameMonthGenitivesAbbreviated")
            	HX_STACK_ARG(patternDateLong,"patternDateLong")
            	HX_STACK_ARG(patternDateShort,"patternDateShort")
            	HX_STACK_ARG(patternDateTimeFull,"patternDateTimeFull")
            	HX_STACK_ARG(patternDateTimeSortable,"patternDateTimeSortable")
            	HX_STACK_ARG(patternMonthDay,"patternMonthDay")
            	HX_STACK_ARG(patternRfc1123,"patternRfc1123")
            	HX_STACK_ARG(patternTimeLong,"patternTimeLong")
            	HX_STACK_ARG(patternTimeShort,"patternTimeShort")
            	HX_STACK_ARG(patternUniversalSortable,"patternUniversalSortable")
            	HX_STACK_ARG(patternYearMonth,"patternYearMonth")
            	HX_STACK_ARG(separatorDate,"separatorDate")
            	HX_STACK_ARG(separatorTime,"separatorTime")
HXLINE(  91)		this->calendarWeekRuleIndex = calendarWeekRuleIndex;
HXLINE(  92)		this->calendarWeekRuleName = calendarWeekRuleName;
HXLINE(  93)		this->designatorAm = designatorAm;
HXLINE(  94)		this->designatorPm = designatorPm;
HXLINE(  95)		this->firstDayOfWeekIndex = firstDayOfWeekIndex;
HXLINE(  96)		this->firstDayOfWeekName = firstDayOfWeekName;
HXLINE(  97)		this->nameCalendar = nameCalendar;
HXLINE(  98)		this->nameCalendarNative = nameCalendarNative;
HXLINE(  99)		this->nameDays = nameDays;
HXLINE( 100)		this->nameDaysAbbreviated = nameDaysAbbreviated;
HXLINE( 101)		this->nameDaysShortest = nameDaysShortest;
HXLINE( 102)		this->nameMonths = nameMonths;
HXLINE( 103)		this->nameMonthsAbbreviated = nameMonthsAbbreviated;
HXLINE( 104)		this->nameMonthGenitives = nameMonthGenitives;
HXLINE( 105)		this->nameMonthGenitivesAbbreviated = nameMonthGenitivesAbbreviated;
HXLINE( 106)		this->patternDateLong = patternDateLong;
HXLINE( 107)		this->patternDateShort = patternDateShort;
HXLINE( 108)		this->patternDateTimeFull = patternDateTimeFull;
HXLINE( 109)		this->patternDateTimeSortable = patternDateTimeSortable;
HXLINE( 110)		this->patternMonthDay = patternMonthDay;
HXLINE( 111)		this->patternRfc1123 = patternRfc1123;
HXLINE( 112)		this->patternTimeLong = patternTimeLong;
HXLINE( 113)		this->patternTimeShort = patternTimeShort;
HXLINE( 114)		this->patternUniversalSortable = patternUniversalSortable;
HXLINE( 115)		this->patternYearMonth = patternYearMonth;
HXLINE( 116)		this->separatorDate = separatorDate;
HXLINE( 117)		this->separatorTime = separatorTime;
            	}

Dynamic DateFormatInfo_obj::__CreateEmpty() { return new DateFormatInfo_obj; }

hx::ObjectPtr< DateFormatInfo_obj > DateFormatInfo_obj::__new(Int calendarWeekRuleIndex,::String calendarWeekRuleName,::String designatorAm,::String designatorPm,Int firstDayOfWeekIndex,::String firstDayOfWeekName,::String nameCalendar,::String nameCalendarNative,::Array< ::String > nameDays,::Array< ::String > nameDaysAbbreviated,::Array< ::String > nameDaysShortest,::Array< ::String > nameMonths,::Array< ::String > nameMonthsAbbreviated,::Array< ::String > nameMonthGenitives,::Array< ::String > nameMonthGenitivesAbbreviated,::String patternDateLong,::String patternDateShort,::String patternDateTimeFull,::String patternDateTimeSortable,::String patternMonthDay,::String patternRfc1123,::String patternTimeLong,::String patternTimeShort,::String patternUniversalSortable,::String patternYearMonth,::String separatorDate,::String separatorTime)
{
	hx::ObjectPtr< DateFormatInfo_obj > _hx_result = new DateFormatInfo_obj();
	_hx_result->__construct(calendarWeekRuleIndex,calendarWeekRuleName,designatorAm,designatorPm,firstDayOfWeekIndex,firstDayOfWeekName,nameCalendar,nameCalendarNative,nameDays,nameDaysAbbreviated,nameDaysShortest,nameMonths,nameMonthsAbbreviated,nameMonthGenitives,nameMonthGenitivesAbbreviated,patternDateLong,patternDateShort,patternDateTimeFull,patternDateTimeSortable,patternMonthDay,patternRfc1123,patternTimeLong,patternTimeShort,patternUniversalSortable,patternYearMonth,separatorDate,separatorTime);
	return _hx_result;
}

Dynamic DateFormatInfo_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DateFormatInfo_obj > _hx_result = new DateFormatInfo_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11],inArgs[12],inArgs[13],inArgs[14],inArgs[15],inArgs[16],inArgs[17],inArgs[18],inArgs[19],inArgs[20],inArgs[21],inArgs[22],inArgs[23],inArgs[24],inArgs[25],inArgs[26]);
	return _hx_result;
}

 ::Dynamic DateFormatInfo_obj::toObject(){
            	HX_STACK_FRAME("thx.culture.DateFormatInfo","toObject",0x15d0e4cb,"thx.culture.DateFormatInfo.toObject","thx/culture/DateFormatInfo.hx",121,0x5979c33f)
            	HX_STACK_THIS(this)
HXLINE( 121)		return  ::Dynamic(hx::Anon_obj::Create(27)
            			->setFixed(0,HX_("nameCalendar",29,50,56,86),this->nameCalendar)
            			->setFixed(1,HX_("patternUniversalSortable",33,cc,22,95),this->patternUniversalSortable)
            			->setFixed(2,HX_("patternDateTimeFull",fa,e6,03,9b),this->patternDateTimeFull)
            			->setFixed(3,HX_("nameCalendarNative",a0,92,93,9f),this->nameCalendarNative)
            			->setFixed(4,HX_("calendarWeekRuleName",59,45,06,a1),this->calendarWeekRuleName)
            			->setFixed(5,HX_("firstDayOfWeekName",c2,53,ad,a7),this->firstDayOfWeekName)
            			->setFixed(6,HX_("nameMonthGenitives",e1,47,c7,a7),this->nameMonthGenitives)
            			->setFixed(7,HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),this->nameMonthGenitivesAbbreviated)
            			->setFixed(8,HX_("patternMonthDay",6c,c1,07,bb),this->patternMonthDay)
            			->setFixed(9,HX_("patternDateLong",3a,69,d5,22),this->patternDateLong)
            			->setFixed(10,HX_("patternDateTimeSortable",e3,2a,ec,23),this->patternDateTimeSortable)
            			->setFixed(11,HX_("nameDaysShortest",ec,01,e4,25),this->nameDaysShortest)
            			->setFixed(12,HX_("separatorDate",33,79,64,29),this->separatorDate)
            			->setFixed(13,HX_("designatorAm",20,b2,52,2b),this->designatorAm)
            			->setFixed(14,HX_("designatorPm",31,bf,52,2b),this->designatorPm)
            			->setFixed(15,HX_("nameDaysAbbreviated",b7,fa,42,2c),this->nameDaysAbbreviated)
            			->setFixed(16,HX_("patternTimeShort",bf,e8,a8,30),this->patternTimeShort)
            			->setFixed(17,HX_("separatorTime",12,ef,fd,33),this->separatorTime)
            			->setFixed(18,HX_("patternTimeLong",99,ba,28,36),this->patternTimeLong)
            			->setFixed(19,HX_("firstDayOfWeekIndex",bb,01,8c,37),this->firstDayOfWeekIndex)
            			->setFixed(20,HX_("patternYearMonth",d3,8f,70,3a),this->patternYearMonth)
            			->setFixed(21,HX_("nameDays",82,7a,ea,3e),this->nameDays)
            			->setFixed(22,HX_("nameMonthsAbbreviated",db,78,52,40),this->nameMonthsAbbreviated)
            			->setFixed(23,HX_("nameMonths",de,c1,ed,4b),this->nameMonths)
            			->setFixed(24,HX_("patternDateShort",fe,06,15,5b),this->patternDateShort)
            			->setFixed(25,HX_("patternRfc1123",e0,77,54,65),this->patternRfc1123)
            			->setFixed(26,HX_("calendarWeekRuleIndex",44,74,06,6c),this->calendarWeekRuleIndex));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DateFormatInfo_obj,toObject,return )

 ::thx::culture::DateFormatInfo DateFormatInfo_obj::invariant;

 ::thx::culture::DateFormatInfo DateFormatInfo_obj::fromObject( ::Dynamic o){
            	HX_STACK_FRAME("thx.culture.DateFormatInfo","fromObject",0x3aa6f03a,"thx.culture.DateFormatInfo.fromObject","thx/culture/DateFormatInfo.hx",152,0x5979c33f)
            	HX_STACK_ARG(o,"o")
HXLINE( 152)		return  ::thx::culture::DateFormatInfo_obj::__new( ::Dynamic(o->__Field(HX_("calendarWeekRuleIndex",44,74,06,6c),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("calendarWeekRuleName",59,45,06,a1),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("designatorAm",20,b2,52,2b),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("designatorPm",31,bf,52,2b),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("firstDayOfWeekIndex",bb,01,8c,37),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("firstDayOfWeekName",c2,53,ad,a7),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("nameCalendarNative",a0,92,93,9f),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("nameDays",82,7a,ea,3e),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("nameDaysAbbreviated",b7,fa,42,2c),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("nameDaysShortest",ec,01,e4,25),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("nameMonths",de,c1,ed,4b),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("nameMonthsAbbreviated",db,78,52,40),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("nameMonthGenitives",e1,47,c7,a7),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("patternDateLong",3a,69,d5,22),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("patternDateShort",fe,06,15,5b),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("patternDateTimeFull",fa,e6,03,9b),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("patternDateTimeSortable",e3,2a,ec,23),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("patternMonthDay",6c,c1,07,bb),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("patternRfc1123",e0,77,54,65),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("patternTimeLong",99,ba,28,36),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("patternTimeShort",bf,e8,a8,30),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("patternUniversalSortable",33,cc,22,95),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("patternYearMonth",d3,8f,70,3a),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("separatorDate",33,79,64,29),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("separatorTime",12,ef,fd,33),hx::paccDynamic)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateFormatInfo_obj,fromObject,return )


DateFormatInfo_obj::DateFormatInfo_obj()
{
}

void DateFormatInfo_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DateFormatInfo);
	HX_MARK_MEMBER_NAME(calendarWeekRuleIndex,"calendarWeekRuleIndex");
	HX_MARK_MEMBER_NAME(calendarWeekRuleName,"calendarWeekRuleName");
	HX_MARK_MEMBER_NAME(designatorAm,"designatorAm");
	HX_MARK_MEMBER_NAME(designatorPm,"designatorPm");
	HX_MARK_MEMBER_NAME(firstDayOfWeekIndex,"firstDayOfWeekIndex");
	HX_MARK_MEMBER_NAME(firstDayOfWeekName,"firstDayOfWeekName");
	HX_MARK_MEMBER_NAME(nameCalendar,"nameCalendar");
	HX_MARK_MEMBER_NAME(nameCalendarNative,"nameCalendarNative");
	HX_MARK_MEMBER_NAME(nameDays,"nameDays");
	HX_MARK_MEMBER_NAME(nameDaysAbbreviated,"nameDaysAbbreviated");
	HX_MARK_MEMBER_NAME(nameDaysShortest,"nameDaysShortest");
	HX_MARK_MEMBER_NAME(nameMonths,"nameMonths");
	HX_MARK_MEMBER_NAME(nameMonthsAbbreviated,"nameMonthsAbbreviated");
	HX_MARK_MEMBER_NAME(nameMonthGenitives,"nameMonthGenitives");
	HX_MARK_MEMBER_NAME(nameMonthGenitivesAbbreviated,"nameMonthGenitivesAbbreviated");
	HX_MARK_MEMBER_NAME(patternDateLong,"patternDateLong");
	HX_MARK_MEMBER_NAME(patternDateShort,"patternDateShort");
	HX_MARK_MEMBER_NAME(patternDateTimeFull,"patternDateTimeFull");
	HX_MARK_MEMBER_NAME(patternDateTimeSortable,"patternDateTimeSortable");
	HX_MARK_MEMBER_NAME(patternMonthDay,"patternMonthDay");
	HX_MARK_MEMBER_NAME(patternRfc1123,"patternRfc1123");
	HX_MARK_MEMBER_NAME(patternTimeLong,"patternTimeLong");
	HX_MARK_MEMBER_NAME(patternTimeShort,"patternTimeShort");
	HX_MARK_MEMBER_NAME(patternUniversalSortable,"patternUniversalSortable");
	HX_MARK_MEMBER_NAME(patternYearMonth,"patternYearMonth");
	HX_MARK_MEMBER_NAME(separatorDate,"separatorDate");
	HX_MARK_MEMBER_NAME(separatorTime,"separatorTime");
	HX_MARK_END_CLASS();
}

void DateFormatInfo_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(calendarWeekRuleIndex,"calendarWeekRuleIndex");
	HX_VISIT_MEMBER_NAME(calendarWeekRuleName,"calendarWeekRuleName");
	HX_VISIT_MEMBER_NAME(designatorAm,"designatorAm");
	HX_VISIT_MEMBER_NAME(designatorPm,"designatorPm");
	HX_VISIT_MEMBER_NAME(firstDayOfWeekIndex,"firstDayOfWeekIndex");
	HX_VISIT_MEMBER_NAME(firstDayOfWeekName,"firstDayOfWeekName");
	HX_VISIT_MEMBER_NAME(nameCalendar,"nameCalendar");
	HX_VISIT_MEMBER_NAME(nameCalendarNative,"nameCalendarNative");
	HX_VISIT_MEMBER_NAME(nameDays,"nameDays");
	HX_VISIT_MEMBER_NAME(nameDaysAbbreviated,"nameDaysAbbreviated");
	HX_VISIT_MEMBER_NAME(nameDaysShortest,"nameDaysShortest");
	HX_VISIT_MEMBER_NAME(nameMonths,"nameMonths");
	HX_VISIT_MEMBER_NAME(nameMonthsAbbreviated,"nameMonthsAbbreviated");
	HX_VISIT_MEMBER_NAME(nameMonthGenitives,"nameMonthGenitives");
	HX_VISIT_MEMBER_NAME(nameMonthGenitivesAbbreviated,"nameMonthGenitivesAbbreviated");
	HX_VISIT_MEMBER_NAME(patternDateLong,"patternDateLong");
	HX_VISIT_MEMBER_NAME(patternDateShort,"patternDateShort");
	HX_VISIT_MEMBER_NAME(patternDateTimeFull,"patternDateTimeFull");
	HX_VISIT_MEMBER_NAME(patternDateTimeSortable,"patternDateTimeSortable");
	HX_VISIT_MEMBER_NAME(patternMonthDay,"patternMonthDay");
	HX_VISIT_MEMBER_NAME(patternRfc1123,"patternRfc1123");
	HX_VISIT_MEMBER_NAME(patternTimeLong,"patternTimeLong");
	HX_VISIT_MEMBER_NAME(patternTimeShort,"patternTimeShort");
	HX_VISIT_MEMBER_NAME(patternUniversalSortable,"patternUniversalSortable");
	HX_VISIT_MEMBER_NAME(patternYearMonth,"patternYearMonth");
	HX_VISIT_MEMBER_NAME(separatorDate,"separatorDate");
	HX_VISIT_MEMBER_NAME(separatorTime,"separatorTime");
}

hx::Val DateFormatInfo_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"nameDays") ) { return hx::Val( nameDays); }
		if (HX_FIELD_EQ(inName,"toObject") ) { return hx::Val( toObject_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"nameMonths") ) { return hx::Val( nameMonths); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"designatorAm") ) { return hx::Val( designatorAm); }
		if (HX_FIELD_EQ(inName,"designatorPm") ) { return hx::Val( designatorPm); }
		if (HX_FIELD_EQ(inName,"nameCalendar") ) { return hx::Val( nameCalendar); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"separatorDate") ) { return hx::Val( separatorDate); }
		if (HX_FIELD_EQ(inName,"separatorTime") ) { return hx::Val( separatorTime); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"patternRfc1123") ) { return hx::Val( patternRfc1123); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"patternDateLong") ) { return hx::Val( patternDateLong); }
		if (HX_FIELD_EQ(inName,"patternMonthDay") ) { return hx::Val( patternMonthDay); }
		if (HX_FIELD_EQ(inName,"patternTimeLong") ) { return hx::Val( patternTimeLong); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"nameDaysShortest") ) { return hx::Val( nameDaysShortest); }
		if (HX_FIELD_EQ(inName,"patternDateShort") ) { return hx::Val( patternDateShort); }
		if (HX_FIELD_EQ(inName,"patternTimeShort") ) { return hx::Val( patternTimeShort); }
		if (HX_FIELD_EQ(inName,"patternYearMonth") ) { return hx::Val( patternYearMonth); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"firstDayOfWeekName") ) { return hx::Val( firstDayOfWeekName); }
		if (HX_FIELD_EQ(inName,"nameCalendarNative") ) { return hx::Val( nameCalendarNative); }
		if (HX_FIELD_EQ(inName,"nameMonthGenitives") ) { return hx::Val( nameMonthGenitives); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"firstDayOfWeekIndex") ) { return hx::Val( firstDayOfWeekIndex); }
		if (HX_FIELD_EQ(inName,"nameDaysAbbreviated") ) { return hx::Val( nameDaysAbbreviated); }
		if (HX_FIELD_EQ(inName,"patternDateTimeFull") ) { return hx::Val( patternDateTimeFull); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"calendarWeekRuleName") ) { return hx::Val( calendarWeekRuleName); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"calendarWeekRuleIndex") ) { return hx::Val( calendarWeekRuleIndex); }
		if (HX_FIELD_EQ(inName,"nameMonthsAbbreviated") ) { return hx::Val( nameMonthsAbbreviated); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"patternDateTimeSortable") ) { return hx::Val( patternDateTimeSortable); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"patternUniversalSortable") ) { return hx::Val( patternUniversalSortable); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"nameMonthGenitivesAbbreviated") ) { return hx::Val( nameMonthGenitivesAbbreviated); }
	}
	return super::__Field(inName,inCallProp);
}

bool DateFormatInfo_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"invariant") ) { outValue = invariant; return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromObject") ) { outValue = fromObject_dyn(); return true; }
	}
	return false;
}

hx::Val DateFormatInfo_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"nameDays") ) { nameDays=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"nameMonths") ) { nameMonths=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"designatorAm") ) { designatorAm=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"designatorPm") ) { designatorPm=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nameCalendar") ) { nameCalendar=inValue.Cast< ::String >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"separatorDate") ) { separatorDate=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"separatorTime") ) { separatorTime=inValue.Cast< ::String >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"patternRfc1123") ) { patternRfc1123=inValue.Cast< ::String >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"patternDateLong") ) { patternDateLong=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"patternMonthDay") ) { patternMonthDay=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"patternTimeLong") ) { patternTimeLong=inValue.Cast< ::String >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"nameDaysShortest") ) { nameDaysShortest=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"patternDateShort") ) { patternDateShort=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"patternTimeShort") ) { patternTimeShort=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"patternYearMonth") ) { patternYearMonth=inValue.Cast< ::String >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"firstDayOfWeekName") ) { firstDayOfWeekName=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nameCalendarNative") ) { nameCalendarNative=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nameMonthGenitives") ) { nameMonthGenitives=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"firstDayOfWeekIndex") ) { firstDayOfWeekIndex=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nameDaysAbbreviated") ) { nameDaysAbbreviated=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"patternDateTimeFull") ) { patternDateTimeFull=inValue.Cast< ::String >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"calendarWeekRuleName") ) { calendarWeekRuleName=inValue.Cast< ::String >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"calendarWeekRuleIndex") ) { calendarWeekRuleIndex=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nameMonthsAbbreviated") ) { nameMonthsAbbreviated=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"patternDateTimeSortable") ) { patternDateTimeSortable=inValue.Cast< ::String >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"patternUniversalSortable") ) { patternUniversalSortable=inValue.Cast< ::String >(); return inValue; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"nameMonthGenitivesAbbreviated") ) { nameMonthGenitivesAbbreviated=inValue.Cast< ::Array< ::String > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool DateFormatInfo_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"invariant") ) { invariant=ioValue.Cast<  ::thx::culture::DateFormatInfo >(); return true; }
	}
	return false;
}

void DateFormatInfo_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("calendarWeekRuleIndex","\x44","\x74","\x06","\x6c"));
	outFields->push(HX_HCSTRING("calendarWeekRuleName","\x59","\x45","\x06","\xa1"));
	outFields->push(HX_HCSTRING("designatorAm","\x20","\xb2","\x52","\x2b"));
	outFields->push(HX_HCSTRING("designatorPm","\x31","\xbf","\x52","\x2b"));
	outFields->push(HX_HCSTRING("firstDayOfWeekIndex","\xbb","\x01","\x8c","\x37"));
	outFields->push(HX_HCSTRING("firstDayOfWeekName","\xc2","\x53","\xad","\xa7"));
	outFields->push(HX_HCSTRING("nameCalendar","\x29","\x50","\x56","\x86"));
	outFields->push(HX_HCSTRING("nameCalendarNative","\xa0","\x92","\x93","\x9f"));
	outFields->push(HX_HCSTRING("nameDays","\x82","\x7a","\xea","\x3e"));
	outFields->push(HX_HCSTRING("nameDaysAbbreviated","\xb7","\xfa","\x42","\x2c"));
	outFields->push(HX_HCSTRING("nameDaysShortest","\xec","\x01","\xe4","\x25"));
	outFields->push(HX_HCSTRING("nameMonths","\xde","\xc1","\xed","\x4b"));
	outFields->push(HX_HCSTRING("nameMonthsAbbreviated","\xdb","\x78","\x52","\x40"));
	outFields->push(HX_HCSTRING("nameMonthGenitives","\xe1","\x47","\xc7","\xa7"));
	outFields->push(HX_HCSTRING("nameMonthGenitivesAbbreviated","\xb8","\xfb","\xb8","\xa9"));
	outFields->push(HX_HCSTRING("patternDateLong","\x3a","\x69","\xd5","\x22"));
	outFields->push(HX_HCSTRING("patternDateShort","\xfe","\x06","\x15","\x5b"));
	outFields->push(HX_HCSTRING("patternDateTimeFull","\xfa","\xe6","\x03","\x9b"));
	outFields->push(HX_HCSTRING("patternDateTimeSortable","\xe3","\x2a","\xec","\x23"));
	outFields->push(HX_HCSTRING("patternMonthDay","\x6c","\xc1","\x07","\xbb"));
	outFields->push(HX_HCSTRING("patternRfc1123","\xe0","\x77","\x54","\x65"));
	outFields->push(HX_HCSTRING("patternTimeLong","\x99","\xba","\x28","\x36"));
	outFields->push(HX_HCSTRING("patternTimeShort","\xbf","\xe8","\xa8","\x30"));
	outFields->push(HX_HCSTRING("patternUniversalSortable","\x33","\xcc","\x22","\x95"));
	outFields->push(HX_HCSTRING("patternYearMonth","\xd3","\x8f","\x70","\x3a"));
	outFields->push(HX_HCSTRING("separatorDate","\x33","\x79","\x64","\x29"));
	outFields->push(HX_HCSTRING("separatorTime","\x12","\xef","\xfd","\x33"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DateFormatInfo_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(DateFormatInfo_obj,calendarWeekRuleIndex),HX_HCSTRING("calendarWeekRuleIndex","\x44","\x74","\x06","\x6c")},
	{hx::fsString,(int)offsetof(DateFormatInfo_obj,calendarWeekRuleName),HX_HCSTRING("calendarWeekRuleName","\x59","\x45","\x06","\xa1")},
	{hx::fsString,(int)offsetof(DateFormatInfo_obj,designatorAm),HX_HCSTRING("designatorAm","\x20","\xb2","\x52","\x2b")},
	{hx::fsString,(int)offsetof(DateFormatInfo_obj,designatorPm),HX_HCSTRING("designatorPm","\x31","\xbf","\x52","\x2b")},
	{hx::fsInt,(int)offsetof(DateFormatInfo_obj,firstDayOfWeekIndex),HX_HCSTRING("firstDayOfWeekIndex","\xbb","\x01","\x8c","\x37")},
	{hx::fsString,(int)offsetof(DateFormatInfo_obj,firstDayOfWeekName),HX_HCSTRING("firstDayOfWeekName","\xc2","\x53","\xad","\xa7")},
	{hx::fsString,(int)offsetof(DateFormatInfo_obj,nameCalendar),HX_HCSTRING("nameCalendar","\x29","\x50","\x56","\x86")},
	{hx::fsString,(int)offsetof(DateFormatInfo_obj,nameCalendarNative),HX_HCSTRING("nameCalendarNative","\xa0","\x92","\x93","\x9f")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(DateFormatInfo_obj,nameDays),HX_HCSTRING("nameDays","\x82","\x7a","\xea","\x3e")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(DateFormatInfo_obj,nameDaysAbbreviated),HX_HCSTRING("nameDaysAbbreviated","\xb7","\xfa","\x42","\x2c")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(DateFormatInfo_obj,nameDaysShortest),HX_HCSTRING("nameDaysShortest","\xec","\x01","\xe4","\x25")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(DateFormatInfo_obj,nameMonths),HX_HCSTRING("nameMonths","\xde","\xc1","\xed","\x4b")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(DateFormatInfo_obj,nameMonthsAbbreviated),HX_HCSTRING("nameMonthsAbbreviated","\xdb","\x78","\x52","\x40")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(DateFormatInfo_obj,nameMonthGenitives),HX_HCSTRING("nameMonthGenitives","\xe1","\x47","\xc7","\xa7")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(DateFormatInfo_obj,nameMonthGenitivesAbbreviated),HX_HCSTRING("nameMonthGenitivesAbbreviated","\xb8","\xfb","\xb8","\xa9")},
	{hx::fsString,(int)offsetof(DateFormatInfo_obj,patternDateLong),HX_HCSTRING("patternDateLong","\x3a","\x69","\xd5","\x22")},
	{hx::fsString,(int)offsetof(DateFormatInfo_obj,patternDateShort),HX_HCSTRING("patternDateShort","\xfe","\x06","\x15","\x5b")},
	{hx::fsString,(int)offsetof(DateFormatInfo_obj,patternDateTimeFull),HX_HCSTRING("patternDateTimeFull","\xfa","\xe6","\x03","\x9b")},
	{hx::fsString,(int)offsetof(DateFormatInfo_obj,patternDateTimeSortable),HX_HCSTRING("patternDateTimeSortable","\xe3","\x2a","\xec","\x23")},
	{hx::fsString,(int)offsetof(DateFormatInfo_obj,patternMonthDay),HX_HCSTRING("patternMonthDay","\x6c","\xc1","\x07","\xbb")},
	{hx::fsString,(int)offsetof(DateFormatInfo_obj,patternRfc1123),HX_HCSTRING("patternRfc1123","\xe0","\x77","\x54","\x65")},
	{hx::fsString,(int)offsetof(DateFormatInfo_obj,patternTimeLong),HX_HCSTRING("patternTimeLong","\x99","\xba","\x28","\x36")},
	{hx::fsString,(int)offsetof(DateFormatInfo_obj,patternTimeShort),HX_HCSTRING("patternTimeShort","\xbf","\xe8","\xa8","\x30")},
	{hx::fsString,(int)offsetof(DateFormatInfo_obj,patternUniversalSortable),HX_HCSTRING("patternUniversalSortable","\x33","\xcc","\x22","\x95")},
	{hx::fsString,(int)offsetof(DateFormatInfo_obj,patternYearMonth),HX_HCSTRING("patternYearMonth","\xd3","\x8f","\x70","\x3a")},
	{hx::fsString,(int)offsetof(DateFormatInfo_obj,separatorDate),HX_HCSTRING("separatorDate","\x33","\x79","\x64","\x29")},
	{hx::fsString,(int)offsetof(DateFormatInfo_obj,separatorTime),HX_HCSTRING("separatorTime","\x12","\xef","\xfd","\x33")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo DateFormatInfo_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::thx::culture::DateFormatInfo*/ ,(void *) &DateFormatInfo_obj::invariant,HX_HCSTRING("invariant","\x40","\x5b","\x93","\xf5")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String DateFormatInfo_obj_sMemberFields[] = {
	HX_HCSTRING("calendarWeekRuleIndex","\x44","\x74","\x06","\x6c"),
	HX_HCSTRING("calendarWeekRuleName","\x59","\x45","\x06","\xa1"),
	HX_HCSTRING("designatorAm","\x20","\xb2","\x52","\x2b"),
	HX_HCSTRING("designatorPm","\x31","\xbf","\x52","\x2b"),
	HX_HCSTRING("firstDayOfWeekIndex","\xbb","\x01","\x8c","\x37"),
	HX_HCSTRING("firstDayOfWeekName","\xc2","\x53","\xad","\xa7"),
	HX_HCSTRING("nameCalendar","\x29","\x50","\x56","\x86"),
	HX_HCSTRING("nameCalendarNative","\xa0","\x92","\x93","\x9f"),
	HX_HCSTRING("nameDays","\x82","\x7a","\xea","\x3e"),
	HX_HCSTRING("nameDaysAbbreviated","\xb7","\xfa","\x42","\x2c"),
	HX_HCSTRING("nameDaysShortest","\xec","\x01","\xe4","\x25"),
	HX_HCSTRING("nameMonths","\xde","\xc1","\xed","\x4b"),
	HX_HCSTRING("nameMonthsAbbreviated","\xdb","\x78","\x52","\x40"),
	HX_HCSTRING("nameMonthGenitives","\xe1","\x47","\xc7","\xa7"),
	HX_HCSTRING("nameMonthGenitivesAbbreviated","\xb8","\xfb","\xb8","\xa9"),
	HX_HCSTRING("patternDateLong","\x3a","\x69","\xd5","\x22"),
	HX_HCSTRING("patternDateShort","\xfe","\x06","\x15","\x5b"),
	HX_HCSTRING("patternDateTimeFull","\xfa","\xe6","\x03","\x9b"),
	HX_HCSTRING("patternDateTimeSortable","\xe3","\x2a","\xec","\x23"),
	HX_HCSTRING("patternMonthDay","\x6c","\xc1","\x07","\xbb"),
	HX_HCSTRING("patternRfc1123","\xe0","\x77","\x54","\x65"),
	HX_HCSTRING("patternTimeLong","\x99","\xba","\x28","\x36"),
	HX_HCSTRING("patternTimeShort","\xbf","\xe8","\xa8","\x30"),
	HX_HCSTRING("patternUniversalSortable","\x33","\xcc","\x22","\x95"),
	HX_HCSTRING("patternYearMonth","\xd3","\x8f","\x70","\x3a"),
	HX_HCSTRING("separatorDate","\x33","\x79","\x64","\x29"),
	HX_HCSTRING("separatorTime","\x12","\xef","\xfd","\x33"),
	HX_HCSTRING("toObject","\x9a","\x26","\x7e","\x3c"),
	::String(null()) };

static void DateFormatInfo_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DateFormatInfo_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(DateFormatInfo_obj::invariant,"invariant");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DateFormatInfo_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DateFormatInfo_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(DateFormatInfo_obj::invariant,"invariant");
};

#endif

hx::Class DateFormatInfo_obj::__mClass;

static ::String DateFormatInfo_obj_sStaticFields[] = {
	HX_HCSTRING("invariant","\x40","\x5b","\x93","\xf5"),
	HX_HCSTRING("fromObject","\xc9","\x83","\x83","\x58"),
	::String(null())
};

void DateFormatInfo_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.culture.DateFormatInfo","\x5d","\x2c","\xf6","\x26");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DateFormatInfo_obj::__GetStatic;
	__mClass->mSetStaticField = &DateFormatInfo_obj::__SetStatic;
	__mClass->mMarkFunc = DateFormatInfo_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(DateFormatInfo_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DateFormatInfo_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DateFormatInfo_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DateFormatInfo_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DateFormatInfo_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DateFormatInfo_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void DateFormatInfo_obj::__boot()
{
{
            	HX_STACK_FRAME("thx.culture.DateFormatInfo","boot",0x7de515e3,"thx.culture.DateFormatInfo.boot","thx/culture/DateFormatInfo.hx",4,0x5979c33f)
HXLINE(   4)		invariant =  ::thx::culture::DateFormatInfo_obj::__new((int)0,HX_("FirstDay",2c,70,bd,ca),HX_("AM",ec,38,00,00),HX_("PM",fd,45,00,00),(int)0,HX_("Sunday",70,80,82,d6),HX_("Gregorian",c6,ad,49,c5),null(),::Array_obj< ::String >::__new(7)->init(0,HX_("Sunday",70,80,82,d6))->init(1,HX_("Monday",30,db,f6,fb))->init(2,HX_("Tuesday",6d,85,94,e0))->init(3,HX_("Wednesday",76,20,5e,ee))->init(4,HX_("Thursday",3a,c9,04,61))->init(5,HX_("Friday",ff,00,5d,e6))->init(6,HX_("Saturday",59,42,eb,57)),::Array_obj< ::String >::__new(7)->init(0,HX_("Sun",6c,61,3f,00))->init(1,HX_("Mon",ac,ce,3a,00))->init(2,HX_("Tue",a4,23,40,00))->init(3,HX_("Wed",76,5c,42,00))->init(4,HX_("Thu",61,18,40,00))->init(5,HX_("Fri",7d,81,35,00))->init(6,HX_("Sat",06,50,3f,00)),::Array_obj< ::String >::__new(7)->init(0,HX_("Su",c2,48,00,00))->init(1,HX_("Mo",82,43,00,00))->init(2,HX_("Tu",a1,49,00,00))->init(3,HX_("We",2e,4c,00,00))->init(4,HX_("Th",94,49,00,00))->init(5,HX_("Fr",6c,3d,00,00))->init(6,HX_("Sa",ae,48,00,00)),::Array_obj< ::String >::__new(13)->init(0,HX_("January",4a,18,86,71))->init(1,HX_("February",82,81,0a,2c))->init(2,HX_("March",a3,34,4f,96))->init(3,HX_("April",26,77,6a,b7))->init(4,HX_("May",85,c2,3a,00))->init(5,HX_("June",e2,f1,42,31))->init(6,HX_("July",38,f0,42,31))->init(7,HX_("August",63,79,82,9f))->init(8,HX_("September",f1,6e,c5,f7))->init(9,HX_("October",00,0d,99,7e))->init(10,HX_("November",d2,64,19,13))->init(11,HX_("December",05,71,82,9e))->init(12,HX_("",00,00,00,00)),::Array_obj< ::String >::__new(13)->init(0,HX_("Jan",b7,7b,38,00))->init(1,HX_("Feb",23,76,35,00))->init(2,HX_("Mar",7e,c2,3a,00))->init(3,HX_("Apr",83,b4,31,00))->init(4,HX_("May",85,c2,3a,00))->init(5,HX_("Jun",23,8d,38,00))->init(6,HX_("Jul",21,8d,38,00))->init(7,HX_("Aug",d3,b8,31,00))->init(8,HX_("Sep",7e,53,3f,00))->init(9,HX_("Oct",c0,48,3c,00))->init(10,HX_("Nov",f5,90,3b,00))->init(11,HX_("Dec",a2,f1,33,00))->init(12,HX_("",00,00,00,00)),::Array_obj< ::String >::__new(13)->init(0,HX_("January",4a,18,86,71))->init(1,HX_("February",82,81,0a,2c))->init(2,HX_("March",a3,34,4f,96))->init(3,HX_("April",26,77,6a,b7))->init(4,HX_("May",85,c2,3a,00))->init(5,HX_("June",e2,f1,42,31))->init(6,HX_("July",38,f0,42,31))->init(7,HX_("August",63,79,82,9f))->init(8,HX_("September",f1,6e,c5,f7))->init(9,HX_("October",00,0d,99,7e))->init(10,HX_("November",d2,64,19,13))->init(11,HX_("December",05,71,82,9e))->init(12,HX_("",00,00,00,00)),::Array_obj< ::String >::__new(13)->init(0,HX_("Jan",b7,7b,38,00))->init(1,HX_("Feb",23,76,35,00))->init(2,HX_("Mar",7e,c2,3a,00))->init(3,HX_("Apr",83,b4,31,00))->init(4,HX_("May",85,c2,3a,00))->init(5,HX_("Jun",23,8d,38,00))->init(6,HX_("Jul",21,8d,38,00))->init(7,HX_("Aug",d3,b8,31,00))->init(8,HX_("Sep",7e,53,3f,00))->init(9,HX_("Oct",c0,48,3c,00))->init(10,HX_("Nov",f5,90,3b,00))->init(11,HX_("Dec",a2,f1,33,00))->init(12,HX_("",00,00,00,00)),HX_("dddd, dd MMMM yyyy",f4,8b,95,43),HX_("MM/dd/yyyy",00,5f,84,63),HX_("dddd, dd MMMM yyyy HH:mm:ss",2c,c6,da,39),HX_("yyyy'-'MM'-'dd'T'HH':'mm':'ss",ba,67,48,1c),HX_("MMMM dd",e0,38,48,d4),HX_("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",25,56,2d,9d),HX_("HH:mm:ss",80,50,d2,03),HX_("HH:mm",1a,83,9d,a4),HX_("yyyy'-'MM'-'dd HH':'mm':'ss'Z'",d4,92,25,cb),HX_("yyyy MMMM",20,0b,b9,65),HX_("/",2f,00,00,00),HX_(":",3a,00,00,00));
            	}
}

} // end namespace thx
} // end namespace culture
