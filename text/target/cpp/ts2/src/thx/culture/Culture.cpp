// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_thx_culture_Culture
#include <thx/culture/Culture.h>
#endif
#ifndef INCLUDED_thx_culture_DateFormatInfo
#include <thx/culture/DateFormatInfo.h>
#endif
#ifndef INCLUDED_thx_culture_NumberFormatInfo
#include <thx/culture/NumberFormatInfo.h>
#endif

namespace thx{
namespace culture{

void Culture_obj::__construct(::String code, ::thx::culture::DateFormatInfo dateTime,::String ietf,Bool isNeutral,::String iso2,::String iso3,Bool isRightToLeft,Int lcid,::String nameCalendar,::String nameEnglish,::String nameNative,::String nameRegionEnglish,::String nameRegionNative, ::thx::culture::NumberFormatInfo number,::String separatorList,::String win3){
            	HX_STACK_FRAME("thx.culture.Culture","new",0xe054e256,"thx.culture.Culture.new","thx/culture/Culture.hx",42,0x938db95c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(code,"code")
            	HX_STACK_ARG(dateTime,"dateTime")
            	HX_STACK_ARG(ietf,"ietf")
            	HX_STACK_ARG(isNeutral,"isNeutral")
            	HX_STACK_ARG(iso2,"iso2")
            	HX_STACK_ARG(iso3,"iso3")
            	HX_STACK_ARG(isRightToLeft,"isRightToLeft")
            	HX_STACK_ARG(lcid,"lcid")
            	HX_STACK_ARG(nameCalendar,"nameCalendar")
            	HX_STACK_ARG(nameEnglish,"nameEnglish")
            	HX_STACK_ARG(nameNative,"nameNative")
            	HX_STACK_ARG(nameRegionEnglish,"nameRegionEnglish")
            	HX_STACK_ARG(nameRegionNative,"nameRegionNative")
            	HX_STACK_ARG(number,"number")
            	HX_STACK_ARG(separatorList,"separatorList")
            	HX_STACK_ARG(win3,"win3")
HXLINE(  43)		this->code = code;
HXLINE(  44)		this->dateTime = dateTime;
HXLINE(  45)		this->ietf = ietf;
HXLINE(  46)		this->isNeutral = isNeutral;
HXLINE(  47)		this->iso2 = iso2;
HXLINE(  48)		this->iso3 = iso3;
HXLINE(  49)		this->isRightToLeft = isRightToLeft;
HXLINE(  50)		this->lcid = lcid;
HXLINE(  51)		this->nameCalendar = nameCalendar;
HXLINE(  52)		this->nameEnglish = nameEnglish;
HXLINE(  53)		this->nameNative = nameNative;
HXLINE(  54)		this->nameRegionEnglish = nameRegionEnglish;
HXLINE(  55)		this->nameRegionNative = nameRegionNative;
HXLINE(  56)		this->number = number;
HXLINE(  57)		this->separatorList = separatorList;
HXLINE(  58)		this->win3 = win3;
            	}

Dynamic Culture_obj::__CreateEmpty() { return new Culture_obj; }

hx::ObjectPtr< Culture_obj > Culture_obj::__new(::String code, ::thx::culture::DateFormatInfo dateTime,::String ietf,Bool isNeutral,::String iso2,::String iso3,Bool isRightToLeft,Int lcid,::String nameCalendar,::String nameEnglish,::String nameNative,::String nameRegionEnglish,::String nameRegionNative, ::thx::culture::NumberFormatInfo number,::String separatorList,::String win3)
{
	hx::ObjectPtr< Culture_obj > _hx_result = new Culture_obj();
	_hx_result->__construct(code,dateTime,ietf,isNeutral,iso2,iso3,isRightToLeft,lcid,nameCalendar,nameEnglish,nameNative,nameRegionEnglish,nameRegionNative,number,separatorList,win3);
	return _hx_result;
}

Dynamic Culture_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Culture_obj > _hx_result = new Culture_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11],inArgs[12],inArgs[13],inArgs[14],inArgs[15]);
	return _hx_result;
}

void Culture_obj::__init__(){
            	HX_STACK_FRAME("::thx::culture::Culture_obj","__init__",0xb13d5022,"::thx::culture::Culture_obj.__init__","thx/culture/Culture.hx",140,0x938db95c)
HXLINE( 141)		::thx::culture::Culture_obj::cultures =  ::haxe::ds::StringMap_obj::__new();
HXLINE( 142)		::thx::culture::Culture_obj::list = ::Array_obj< ::Dynamic>::__new(0);
            	}


 ::Dynamic Culture_obj::toObject(){
            	HX_STACK_FRAME("thx.culture.Culture","toObject",0x25ca38e4,"thx.culture.Culture.toObject","thx/culture/Culture.hx",62,0x938db95c)
            	HX_STACK_THIS(this)
HXLINE(  64)		 ::Dynamic _hx_tmp;
HXDLIN(  64)		if (hx::IsNull( this->dateTime )) {
HXLINE(  64)			_hx_tmp = null();
            		}
            		else {
HXLINE(  64)			_hx_tmp = this->dateTime->toObject();
            		}
HXLINE(  76)		 ::Dynamic _hx_tmp1;
HXDLIN(  76)		if (hx::IsNull( this->number )) {
HXLINE(  76)			_hx_tmp1 = null();
            		}
            		else {
HXLINE(  76)			_hx_tmp1 = this->number->toObject();
            		}
HXLINE(  62)		return  ::Dynamic(hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("nameCalendar",29,50,56,86),this->nameCalendar)
            			->setFixed(1,HX_("number",c9,86,7a,a1),_hx_tmp1)
            			->setFixed(2,HX_("nameNative",42,fa,9b,a6),this->nameNative)
            			->setFixed(3,HX_("nameRegionEnglish",51,9f,9c,cc),this->nameRegionEnglish)
            			->setFixed(4,HX_("dateTime",5b,fd,0a,da),_hx_tmp)
            			->setFixed(5,HX_("isNeutral",7d,6a,28,ef),this->isNeutral)
            			->setFixed(6,HX_("isRightToLeft",54,90,12,f0),this->isRightToLeft)
            			->setFixed(7,HX_("separatorList",63,3f,b4,2e),this->separatorList)
            			->setFixed(8,HX_("nameRegionNative",96,b0,9c,3e),this->nameRegionNative)
            			->setFixed(9,HX_("code",2d,b1,c4,41),this->code)
            			->setFixed(10,HX_("ietf",4e,70,b4,45),this->ietf)
            			->setFixed(11,HX_("iso2",4d,0b,bf,45),this->iso2)
            			->setFixed(12,HX_("iso3",4e,0b,bf,45),this->iso3)
            			->setFixed(13,HX_("lcid",12,86,ae,47),this->lcid)
            			->setFixed(14,HX_("win3",97,70,f8,4e),this->win3)
            			->setFixed(15,HX_("nameEnglish",25,cc,fd,63),this->nameEnglish));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Culture_obj,toObject,return )

::String Culture_obj::get_nameDisplayEnglish(){
            	HX_STACK_FRAME("thx.culture.Culture","get_nameDisplayEnglish",0x667c9dcc,"thx.culture.Culture.get_nameDisplayEnglish","thx/culture/Culture.hx",102,0x938db95c)
            	HX_STACK_THIS(this)
HXLINE( 102)		::String _hx_tmp;
HXDLIN( 102)		if (hx::IsNull( this->nameRegionEnglish )) {
HXLINE( 102)			_hx_tmp = HX_("",00,00,00,00);
            		}
            		else {
HXLINE( 102)			_hx_tmp = ((HX_(" (",08,1c,00,00) + this->nameRegionEnglish) + HX_(")",29,00,00,00));
            		}
HXDLIN( 102)		return (this->nameEnglish + _hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Culture_obj,get_nameDisplayEnglish,return )

::String Culture_obj::get_nameDisplayNative(){
            	HX_STACK_FRAME("thx.culture.Culture","get_nameDisplayNative",0x52d15a7b,"thx.culture.Culture.get_nameDisplayNative","thx/culture/Culture.hx",105,0x938db95c)
            	HX_STACK_THIS(this)
HXLINE( 105)		::String _hx_tmp;
HXDLIN( 105)		if (hx::IsNull( this->nameRegionNative )) {
HXLINE( 105)			_hx_tmp = HX_("",00,00,00,00);
            		}
            		else {
HXLINE( 105)			_hx_tmp = ((HX_(" (",08,1c,00,00) + this->nameRegionNative) + HX_(")",29,00,00,00));
            		}
HXDLIN( 105)		return (this->nameNative + _hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Culture_obj,get_nameDisplayNative,return )

::String Culture_obj::toString(){
            	HX_STACK_FRAME("thx.culture.Culture","toString",0x21bae2f6,"thx.culture.Culture.toString","thx/culture/Culture.hx",108,0x938db95c)
            	HX_STACK_THIS(this)
HXLINE( 108)		::String _hx_tmp;
HXDLIN( 108)		if (hx::IsNull( this->nameRegionEnglish )) {
HXLINE( 108)			_hx_tmp = HX_("",00,00,00,00);
            		}
            		else {
HXLINE( 108)			_hx_tmp = ((HX_(" (",08,1c,00,00) + this->nameRegionEnglish) + HX_(")",29,00,00,00));
            		}
HXDLIN( 108)		return (this->nameEnglish + _hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Culture_obj,toString,return )

 ::thx::culture::Culture Culture_obj::invariant;

 ::thx::culture::Culture Culture_obj::fromObject( ::Dynamic o){
            	HX_STACK_FRAME("thx.culture.Culture","fromObject",0x3ab03c93,"thx.culture.Culture.fromObject","thx/culture/Culture.hx",82,0x938db95c)
            	HX_STACK_ARG(o,"o")
HXLINE(  83)		 ::Dynamic _hx_tmp =  ::Dynamic(o->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic));
HXLINE(  84)		 ::thx::culture::DateFormatInfo _hx_tmp1;
HXDLIN(  84)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic)) )) {
HXLINE(  84)			_hx_tmp1 = null();
            		}
            		else {
HXLINE(  84)			HX_VARI_NAME(  ::Dynamic,o1,"o") =  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic));
HXDLIN(  84)			_hx_tmp1 =  ::thx::culture::DateFormatInfo_obj::__new( ::Dynamic(o1->__Field(HX_("calendarWeekRuleIndex",44,74,06,6c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("calendarWeekRuleName",59,45,06,a1),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorAm",20,b2,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorPm",31,bf,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekIndex",bb,01,8c,37),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekName",c2,53,ad,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendarNative",a0,92,93,9f),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDays",82,7a,ea,3e),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysAbbreviated",b7,fa,42,2c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysShortest",ec,01,e4,25),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonths",de,c1,ed,4b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthsAbbreviated",db,78,52,40),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitives",e1,47,c7,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateLong",3a,69,d5,22),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateShort",fe,06,15,5b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeFull",fa,e6,03,9b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeSortable",e3,2a,ec,23),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternMonthDay",6c,c1,07,bb),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternRfc1123",e0,77,54,65),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeLong",99,ba,28,36),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeShort",bf,e8,a8,30),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternUniversalSortable",33,cc,22,95),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternYearMonth",d3,8f,70,3a),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorDate",33,79,64,29),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorTime",12,ef,fd,33),hx::paccDynamic)));
            		}
HXLINE(  85)		 ::Dynamic _hx_tmp2 =  ::Dynamic(o->__Field(HX_("ietf",4e,70,b4,45),hx::paccDynamic));
HXLINE(  86)		 ::Dynamic _hx_tmp3 =  ::Dynamic(o->__Field(HX_("isNeutral",7d,6a,28,ef),hx::paccDynamic));
HXLINE(  87)		 ::Dynamic _hx_tmp4 =  ::Dynamic(o->__Field(HX_("iso2",4d,0b,bf,45),hx::paccDynamic));
HXLINE(  88)		 ::Dynamic _hx_tmp5 =  ::Dynamic(o->__Field(HX_("iso3",4e,0b,bf,45),hx::paccDynamic));
HXLINE(  89)		 ::Dynamic _hx_tmp6 =  ::Dynamic(o->__Field(HX_("isRightToLeft",54,90,12,f0),hx::paccDynamic));
HXLINE(  90)		 ::Dynamic _hx_tmp7 =  ::Dynamic(o->__Field(HX_("lcid",12,86,ae,47),hx::paccDynamic));
HXLINE(  91)		 ::Dynamic _hx_tmp8 =  ::Dynamic(o->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic));
HXLINE(  92)		 ::Dynamic _hx_tmp9 =  ::Dynamic(o->__Field(HX_("nameEnglish",25,cc,fd,63),hx::paccDynamic));
HXLINE(  93)		 ::Dynamic _hx_tmp10 =  ::Dynamic(o->__Field(HX_("nameNative",42,fa,9b,a6),hx::paccDynamic));
HXLINE(  94)		 ::Dynamic _hx_tmp11 =  ::Dynamic(o->__Field(HX_("nameRegionEnglish",51,9f,9c,cc),hx::paccDynamic));
HXLINE(  95)		 ::Dynamic _hx_tmp12 =  ::Dynamic(o->__Field(HX_("nameRegionNative",96,b0,9c,3e),hx::paccDynamic));
HXLINE(  96)		 ::thx::culture::NumberFormatInfo _hx_tmp13;
HXDLIN(  96)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic)) )) {
HXLINE(  96)			_hx_tmp13 = null();
            		}
            		else {
HXLINE(  96)			HX_VARI_NAME(  ::Dynamic,o2,"o") =  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic));
HXDLIN(  96)			_hx_tmp13 =  ::thx::culture::NumberFormatInfo_obj::__new( ::Dynamic(o2->__Field(HX_("decimalDigitsCurrency",08,28,50,5b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsNumber",c0,3b,b5,d5),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsPercent",ee,4d,fe,f7),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesCurrency",44,ef,34,6b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesNumber",fc,7b,1c,cd),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesPercent",32,42,ef,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeCurrency",56,69,b3,82),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeNumber",8e,ed,2d,e8),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativePercent",60,30,21,0f),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositiveCurrency",9a,cd,0b,31),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositivePercent",9c,00,df,26),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalCurrency",1d,d2,b3,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalNumber",95,c6,00,63),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalPercent",79,3d,cc,0c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupCurrency",0b,22,76,79),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupNumber",03,9f,89,8b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupPercent",4b,c5,00,5c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signNegative",d2,77,dd,90),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signPositive",16,f8,95,0a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolCurrency",c9,8a,97,92),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNaN",43,fc,ff,df),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNegativeInfinity",f5,b1,7e,58),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPercent",4d,3e,49,c2),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPermille",84,61,72,02),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPositiveInfinity",39,16,d7,06),hx::paccDynamic)));
            		}
HXLINE(  82)		return  ::thx::culture::Culture_obj::__new(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10,_hx_tmp11,_hx_tmp12,_hx_tmp13, ::Dynamic(o->__Field(HX_("separatorList",63,3f,b4,2e),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("win3",97,70,f8,4e),hx::paccDynamic)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Culture_obj,fromObject,return )

 ::haxe::ds::StringMap Culture_obj::cultures;

::Array< ::Dynamic> Culture_obj::list;

 ::thx::culture::Culture Culture_obj::_hx_register( ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.culture.Culture","register",0xb9ebb8ad,"thx.culture.Culture.register","thx/culture/Culture.hx",112,0x938db95c)
            	HX_STACK_ARG(culture,"culture")
HXLINE( 113)		::String _hx_tmp = culture->code.toLowerCase();
HXDLIN( 113)		HX_VARI( ::String,code) = (HX_("C:",97,3a,00,00) + _hx_tmp);
HXLINE( 114)		Bool _hx_tmp1 = ::thx::culture::Culture_obj::cultures->exists(code);
HXDLIN( 114)		if (_hx_tmp1) {
HXLINE( 115)			return ::thx::culture::Culture_obj::cultures->get(code).StaticCast<  ::thx::culture::Culture >();
            		}
HXLINE( 117)		::thx::culture::Culture_obj::list->push(culture);
HXLINE( 118)		::thx::culture::Culture_obj::cultures->set(code,culture);
HXLINE( 119)		{
HXLINE( 119)			::String _hx_tmp2 = culture->iso2.toLowerCase();
HXDLIN( 119)			::thx::culture::Culture_obj::cultures->set((HX_("I2:",51,90,37,00) + _hx_tmp2),culture);
            		}
HXLINE( 120)		{
HXLINE( 120)			::String _hx_tmp3 = culture->iso3.toLowerCase();
HXDLIN( 120)			::thx::culture::Culture_obj::cultures->set((HX_("I3:",30,91,37,00) + _hx_tmp3),culture);
            		}
HXLINE( 121)		return culture;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Culture_obj,_hx_register,return )

 ::thx::culture::Culture Culture_obj::getByCode(::String code){
            	HX_STACK_FRAME("thx.culture.Culture","getByCode",0xbcade250,"thx.culture.Culture.getByCode","thx/culture/Culture.hx",125,0x938db95c)
            	HX_STACK_ARG(code,"code")
HXLINE( 125)		::String _hx_tmp = code.toLowerCase();
HXDLIN( 125)		return ::thx::culture::Culture_obj::cultures->get((HX_("C:",97,3a,00,00) + _hx_tmp)).StaticCast<  ::thx::culture::Culture >();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Culture_obj,getByCode,return )

 ::thx::culture::Culture Culture_obj::getByIso2(::String iso2){
            	HX_STACK_FRAME("thx.culture.Culture","getByIso2",0xc0a83c70,"thx.culture.Culture.getByIso2","thx/culture/Culture.hx",127,0x938db95c)
            	HX_STACK_ARG(iso2,"iso2")
HXLINE( 127)		::String _hx_tmp = iso2.toLowerCase();
HXDLIN( 127)		return ::thx::culture::Culture_obj::cultures->get((HX_("I2:",51,90,37,00) + _hx_tmp)).StaticCast<  ::thx::culture::Culture >();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Culture_obj,getByIso2,return )

 ::thx::culture::Culture Culture_obj::getByIso3(::String iso3){
            	HX_STACK_FRAME("thx.culture.Culture","getByIso3",0xc0a83c71,"thx.culture.Culture.getByIso3","thx/culture/Culture.hx",129,0x938db95c)
            	HX_STACK_ARG(iso3,"iso3")
HXLINE( 129)		::String _hx_tmp = iso3.toLowerCase();
HXDLIN( 129)		return ::thx::culture::Culture_obj::cultures->get((HX_("I3:",30,91,37,00) + _hx_tmp)).StaticCast<  ::thx::culture::Culture >();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Culture_obj,getByIso3,return )

 ::Dynamic Culture_obj::iterator(){
            	HX_STACK_FRAME("thx.culture.Culture","iterator",0x7ce65c38,"thx.culture.Culture.iterator","thx/culture/Culture.hx",131,0x938db95c)
HXLINE( 131)		return ::thx::culture::Culture_obj::list->iterator();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Culture_obj,iterator,return )

::String Culture_obj::getCodeKey(::String key){
            	HX_STACK_FRAME("thx.culture.Culture","getCodeKey",0x7f060946,"thx.culture.Culture.getCodeKey","thx/culture/Culture.hx",134,0x938db95c)
            	HX_STACK_ARG(key,"key")
HXLINE( 134)		::String _hx_tmp = key.toLowerCase();
HXDLIN( 134)		return (HX_("C:",97,3a,00,00) + _hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Culture_obj,getCodeKey,return )

::String Culture_obj::getIso2Key(::String key){
            	HX_STACK_FRAME("thx.culture.Culture","getIso2Key",0x45a6c326,"thx.culture.Culture.getIso2Key","thx/culture/Culture.hx",136,0x938db95c)
            	HX_STACK_ARG(key,"key")
HXLINE( 136)		::String _hx_tmp = key.toLowerCase();
HXDLIN( 136)		return (HX_("I2:",51,90,37,00) + _hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Culture_obj,getIso2Key,return )

::String Culture_obj::getIso3Key(::String key){
            	HX_STACK_FRAME("thx.culture.Culture","getIso3Key",0x464ff9c5,"thx.culture.Culture.getIso3Key","thx/culture/Culture.hx",138,0x938db95c)
            	HX_STACK_ARG(key,"key")
HXLINE( 138)		::String _hx_tmp = key.toLowerCase();
HXDLIN( 138)		return (HX_("I3:",30,91,37,00) + _hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Culture_obj,getIso3Key,return )


Culture_obj::Culture_obj()
{
}

void Culture_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Culture);
	HX_MARK_MEMBER_NAME(code,"code");
	HX_MARK_MEMBER_NAME(dateTime,"dateTime");
	HX_MARK_MEMBER_NAME(ietf,"ietf");
	HX_MARK_MEMBER_NAME(isNeutral,"isNeutral");
	HX_MARK_MEMBER_NAME(iso2,"iso2");
	HX_MARK_MEMBER_NAME(iso3,"iso3");
	HX_MARK_MEMBER_NAME(isRightToLeft,"isRightToLeft");
	HX_MARK_MEMBER_NAME(lcid,"lcid");
	HX_MARK_MEMBER_NAME(nameCalendar,"nameCalendar");
	HX_MARK_MEMBER_NAME(nameDisplayEnglish,"nameDisplayEnglish");
	HX_MARK_MEMBER_NAME(nameDisplayNative,"nameDisplayNative");
	HX_MARK_MEMBER_NAME(nameEnglish,"nameEnglish");
	HX_MARK_MEMBER_NAME(nameNative,"nameNative");
	HX_MARK_MEMBER_NAME(nameRegionEnglish,"nameRegionEnglish");
	HX_MARK_MEMBER_NAME(nameRegionNative,"nameRegionNative");
	HX_MARK_MEMBER_NAME(number,"number");
	HX_MARK_MEMBER_NAME(separatorList,"separatorList");
	HX_MARK_MEMBER_NAME(win3,"win3");
	HX_MARK_END_CLASS();
}

void Culture_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(code,"code");
	HX_VISIT_MEMBER_NAME(dateTime,"dateTime");
	HX_VISIT_MEMBER_NAME(ietf,"ietf");
	HX_VISIT_MEMBER_NAME(isNeutral,"isNeutral");
	HX_VISIT_MEMBER_NAME(iso2,"iso2");
	HX_VISIT_MEMBER_NAME(iso3,"iso3");
	HX_VISIT_MEMBER_NAME(isRightToLeft,"isRightToLeft");
	HX_VISIT_MEMBER_NAME(lcid,"lcid");
	HX_VISIT_MEMBER_NAME(nameCalendar,"nameCalendar");
	HX_VISIT_MEMBER_NAME(nameDisplayEnglish,"nameDisplayEnglish");
	HX_VISIT_MEMBER_NAME(nameDisplayNative,"nameDisplayNative");
	HX_VISIT_MEMBER_NAME(nameEnglish,"nameEnglish");
	HX_VISIT_MEMBER_NAME(nameNative,"nameNative");
	HX_VISIT_MEMBER_NAME(nameRegionEnglish,"nameRegionEnglish");
	HX_VISIT_MEMBER_NAME(nameRegionNative,"nameRegionNative");
	HX_VISIT_MEMBER_NAME(number,"number");
	HX_VISIT_MEMBER_NAME(separatorList,"separatorList");
	HX_VISIT_MEMBER_NAME(win3,"win3");
}

hx::Val Culture_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"code") ) { return hx::Val( code); }
		if (HX_FIELD_EQ(inName,"ietf") ) { return hx::Val( ietf); }
		if (HX_FIELD_EQ(inName,"iso2") ) { return hx::Val( iso2); }
		if (HX_FIELD_EQ(inName,"iso3") ) { return hx::Val( iso3); }
		if (HX_FIELD_EQ(inName,"lcid") ) { return hx::Val( lcid); }
		if (HX_FIELD_EQ(inName,"win3") ) { return hx::Val( win3); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"number") ) { return hx::Val( number); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dateTime") ) { return hx::Val( dateTime); }
		if (HX_FIELD_EQ(inName,"toObject") ) { return hx::Val( toObject_dyn()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isNeutral") ) { return hx::Val( isNeutral); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"nameNative") ) { return hx::Val( nameNative); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"nameEnglish") ) { return hx::Val( nameEnglish); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"nameCalendar") ) { return hx::Val( nameCalendar); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"isRightToLeft") ) { return hx::Val( isRightToLeft); }
		if (HX_FIELD_EQ(inName,"separatorList") ) { return hx::Val( separatorList); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"nameRegionNative") ) { return hx::Val( nameRegionNative); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"nameDisplayNative") ) { return hx::Val( inCallProp == hx::paccAlways ? get_nameDisplayNative() : nameDisplayNative); }
		if (HX_FIELD_EQ(inName,"nameRegionEnglish") ) { return hx::Val( nameRegionEnglish); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"nameDisplayEnglish") ) { return hx::Val( inCallProp == hx::paccAlways ? get_nameDisplayEnglish() : nameDisplayEnglish); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_nameDisplayNative") ) { return hx::Val( get_nameDisplayNative_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"get_nameDisplayEnglish") ) { return hx::Val( get_nameDisplayEnglish_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Culture_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { outValue = list; return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"cultures") ) { outValue = cultures; return true; }
		if (HX_FIELD_EQ(inName,"register") ) { outValue = _hx_register_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"iterator") ) { outValue = iterator_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"invariant") ) { outValue = invariant; return true; }
		if (HX_FIELD_EQ(inName,"getByCode") ) { outValue = getByCode_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getByIso2") ) { outValue = getByIso2_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getByIso3") ) { outValue = getByIso3_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromObject") ) { outValue = fromObject_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getCodeKey") ) { outValue = getCodeKey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getIso2Key") ) { outValue = getIso2Key_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getIso3Key") ) { outValue = getIso3Key_dyn(); return true; }
	}
	return false;
}

hx::Val Culture_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"code") ) { code=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ietf") ) { ietf=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iso2") ) { iso2=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iso3") ) { iso3=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lcid") ) { lcid=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"win3") ) { win3=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"number") ) { number=inValue.Cast<  ::thx::culture::NumberFormatInfo >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dateTime") ) { dateTime=inValue.Cast<  ::thx::culture::DateFormatInfo >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isNeutral") ) { isNeutral=inValue.Cast< Bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"nameNative") ) { nameNative=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"nameEnglish") ) { nameEnglish=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"nameCalendar") ) { nameCalendar=inValue.Cast< ::String >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"isRightToLeft") ) { isRightToLeft=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"separatorList") ) { separatorList=inValue.Cast< ::String >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"nameRegionNative") ) { nameRegionNative=inValue.Cast< ::String >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"nameDisplayNative") ) { nameDisplayNative=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nameRegionEnglish") ) { nameRegionEnglish=inValue.Cast< ::String >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"nameDisplayEnglish") ) { nameDisplayEnglish=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Culture_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { list=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"cultures") ) { cultures=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"invariant") ) { invariant=ioValue.Cast<  ::thx::culture::Culture >(); return true; }
	}
	return false;
}

void Culture_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("code","\x2d","\xb1","\xc4","\x41"));
	outFields->push(HX_HCSTRING("dateTime","\x5b","\xfd","\x0a","\xda"));
	outFields->push(HX_HCSTRING("ietf","\x4e","\x70","\xb4","\x45"));
	outFields->push(HX_HCSTRING("isNeutral","\x7d","\x6a","\x28","\xef"));
	outFields->push(HX_HCSTRING("iso2","\x4d","\x0b","\xbf","\x45"));
	outFields->push(HX_HCSTRING("iso3","\x4e","\x0b","\xbf","\x45"));
	outFields->push(HX_HCSTRING("isRightToLeft","\x54","\x90","\x12","\xf0"));
	outFields->push(HX_HCSTRING("lcid","\x12","\x86","\xae","\x47"));
	outFields->push(HX_HCSTRING("nameCalendar","\x29","\x50","\x56","\x86"));
	outFields->push(HX_HCSTRING("nameDisplayEnglish","\xb9","\x64","\xa4","\x34"));
	outFields->push(HX_HCSTRING("nameDisplayNative","\x2e","\x90","\xf8","\x26"));
	outFields->push(HX_HCSTRING("nameEnglish","\x25","\xcc","\xfd","\x63"));
	outFields->push(HX_HCSTRING("nameNative","\x42","\xfa","\x9b","\xa6"));
	outFields->push(HX_HCSTRING("nameRegionEnglish","\x51","\x9f","\x9c","\xcc"));
	outFields->push(HX_HCSTRING("nameRegionNative","\x96","\xb0","\x9c","\x3e"));
	outFields->push(HX_HCSTRING("number","\xc9","\x86","\x7a","\xa1"));
	outFields->push(HX_HCSTRING("separatorList","\x63","\x3f","\xb4","\x2e"));
	outFields->push(HX_HCSTRING("win3","\x97","\x70","\xf8","\x4e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Culture_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Culture_obj,code),HX_HCSTRING("code","\x2d","\xb1","\xc4","\x41")},
	{hx::fsObject /*::thx::culture::DateFormatInfo*/ ,(int)offsetof(Culture_obj,dateTime),HX_HCSTRING("dateTime","\x5b","\xfd","\x0a","\xda")},
	{hx::fsString,(int)offsetof(Culture_obj,ietf),HX_HCSTRING("ietf","\x4e","\x70","\xb4","\x45")},
	{hx::fsBool,(int)offsetof(Culture_obj,isNeutral),HX_HCSTRING("isNeutral","\x7d","\x6a","\x28","\xef")},
	{hx::fsString,(int)offsetof(Culture_obj,iso2),HX_HCSTRING("iso2","\x4d","\x0b","\xbf","\x45")},
	{hx::fsString,(int)offsetof(Culture_obj,iso3),HX_HCSTRING("iso3","\x4e","\x0b","\xbf","\x45")},
	{hx::fsBool,(int)offsetof(Culture_obj,isRightToLeft),HX_HCSTRING("isRightToLeft","\x54","\x90","\x12","\xf0")},
	{hx::fsInt,(int)offsetof(Culture_obj,lcid),HX_HCSTRING("lcid","\x12","\x86","\xae","\x47")},
	{hx::fsString,(int)offsetof(Culture_obj,nameCalendar),HX_HCSTRING("nameCalendar","\x29","\x50","\x56","\x86")},
	{hx::fsString,(int)offsetof(Culture_obj,nameDisplayEnglish),HX_HCSTRING("nameDisplayEnglish","\xb9","\x64","\xa4","\x34")},
	{hx::fsString,(int)offsetof(Culture_obj,nameDisplayNative),HX_HCSTRING("nameDisplayNative","\x2e","\x90","\xf8","\x26")},
	{hx::fsString,(int)offsetof(Culture_obj,nameEnglish),HX_HCSTRING("nameEnglish","\x25","\xcc","\xfd","\x63")},
	{hx::fsString,(int)offsetof(Culture_obj,nameNative),HX_HCSTRING("nameNative","\x42","\xfa","\x9b","\xa6")},
	{hx::fsString,(int)offsetof(Culture_obj,nameRegionEnglish),HX_HCSTRING("nameRegionEnglish","\x51","\x9f","\x9c","\xcc")},
	{hx::fsString,(int)offsetof(Culture_obj,nameRegionNative),HX_HCSTRING("nameRegionNative","\x96","\xb0","\x9c","\x3e")},
	{hx::fsObject /*::thx::culture::NumberFormatInfo*/ ,(int)offsetof(Culture_obj,number),HX_HCSTRING("number","\xc9","\x86","\x7a","\xa1")},
	{hx::fsString,(int)offsetof(Culture_obj,separatorList),HX_HCSTRING("separatorList","\x63","\x3f","\xb4","\x2e")},
	{hx::fsString,(int)offsetof(Culture_obj,win3),HX_HCSTRING("win3","\x97","\x70","\xf8","\x4e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Culture_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::thx::culture::Culture*/ ,(void *) &Culture_obj::invariant,HX_HCSTRING("invariant","\x40","\x5b","\x93","\xf5")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Culture_obj::cultures,HX_HCSTRING("cultures","\xc5","\x7a","\x84","\x66")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Culture_obj::list,HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Culture_obj_sMemberFields[] = {
	HX_HCSTRING("code","\x2d","\xb1","\xc4","\x41"),
	HX_HCSTRING("dateTime","\x5b","\xfd","\x0a","\xda"),
	HX_HCSTRING("ietf","\x4e","\x70","\xb4","\x45"),
	HX_HCSTRING("isNeutral","\x7d","\x6a","\x28","\xef"),
	HX_HCSTRING("iso2","\x4d","\x0b","\xbf","\x45"),
	HX_HCSTRING("iso3","\x4e","\x0b","\xbf","\x45"),
	HX_HCSTRING("isRightToLeft","\x54","\x90","\x12","\xf0"),
	HX_HCSTRING("lcid","\x12","\x86","\xae","\x47"),
	HX_HCSTRING("nameCalendar","\x29","\x50","\x56","\x86"),
	HX_HCSTRING("nameDisplayEnglish","\xb9","\x64","\xa4","\x34"),
	HX_HCSTRING("nameDisplayNative","\x2e","\x90","\xf8","\x26"),
	HX_HCSTRING("nameEnglish","\x25","\xcc","\xfd","\x63"),
	HX_HCSTRING("nameNative","\x42","\xfa","\x9b","\xa6"),
	HX_HCSTRING("nameRegionEnglish","\x51","\x9f","\x9c","\xcc"),
	HX_HCSTRING("nameRegionNative","\x96","\xb0","\x9c","\x3e"),
	HX_HCSTRING("number","\xc9","\x86","\x7a","\xa1"),
	HX_HCSTRING("separatorList","\x63","\x3f","\xb4","\x2e"),
	HX_HCSTRING("win3","\x97","\x70","\xf8","\x4e"),
	HX_HCSTRING("toObject","\x9a","\x26","\x7e","\x3c"),
	HX_HCSTRING("get_nameDisplayEnglish","\x02","\xde","\x38","\x8e"),
	HX_HCSTRING("get_nameDisplayNative","\x05","\x93","\xa6","\xa5"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void Culture_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Culture_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Culture_obj::invariant,"invariant");
	HX_MARK_MEMBER_NAME(Culture_obj::cultures,"cultures");
	HX_MARK_MEMBER_NAME(Culture_obj::list,"list");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Culture_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Culture_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Culture_obj::invariant,"invariant");
	HX_VISIT_MEMBER_NAME(Culture_obj::cultures,"cultures");
	HX_VISIT_MEMBER_NAME(Culture_obj::list,"list");
};

#endif

hx::Class Culture_obj::__mClass;

static ::String Culture_obj_sStaticFields[] = {
	HX_HCSTRING("invariant","\x40","\x5b","\x93","\xf5"),
	HX_HCSTRING("fromObject","\xc9","\x83","\x83","\x58"),
	HX_HCSTRING("cultures","\xc5","\x7a","\x84","\x66"),
	HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47"),
	HX_HCSTRING("register","\x63","\xa6","\x9f","\xd0"),
	HX_HCSTRING("getByCode","\xda","\xf3","\x69","\x83"),
	HX_HCSTRING("getByIso2","\xfa","\x4d","\x64","\x87"),
	HX_HCSTRING("getByIso3","\xfb","\x4d","\x64","\x87"),
	HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"),
	HX_HCSTRING("getCodeKey","\x7c","\x50","\xd9","\x9c"),
	HX_HCSTRING("getIso2Key","\x5c","\x0a","\x7a","\x63"),
	HX_HCSTRING("getIso3Key","\xfb","\x40","\x23","\x64"),
	::String(null())
};

void Culture_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.culture.Culture","\x64","\xbf","\x3b","\xeb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Culture_obj::__GetStatic;
	__mClass->mSetStaticField = &Culture_obj::__SetStatic;
	__mClass->mMarkFunc = Culture_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Culture_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Culture_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Culture_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Culture_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Culture_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Culture_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Culture_obj::__boot()
{
{
            	HX_STACK_FRAME("thx.culture.Culture","boot",0x620a297c,"thx.culture.Culture.boot","thx/culture/Culture.hx",4,0x938db95c)
HXLINE(   4)		invariant =  ::thx::culture::Culture_obj::__new(HX_("",00,00,00,00),::thx::culture::DateFormatInfo_obj::invariant,HX_("",00,00,00,00),false,HX_("iv",ed,5b,00,00),HX_("IVL",bf,af,37,00),false,(int)127,HX_("Gregorian",c6,ad,49,c5),HX_("Invariant Language",78,bd,b9,30),HX_("Invariant Language",78,bd,b9,30),HX_("Invariant Country",36,81,bf,7f),HX_("Invariant Country",36,81,bf,7f),::thx::culture::NumberFormatInfo_obj::invariant,HX_(",",2c,00,00,00),HX_("IVL",bf,af,37,00));
            	}
}

} // end namespace thx
} // end namespace culture
