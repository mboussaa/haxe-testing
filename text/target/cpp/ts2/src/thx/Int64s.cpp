// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "cpp/Int64.h"
#include "hxMath.h"
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_thx_Error
#include <thx/Error.h>
#endif
#ifndef INCLUDED_thx_Int64s
#include <thx/Int64s.h>
#endif

namespace thx{

void Int64s_obj::__construct() { }

Dynamic Int64s_obj::__CreateEmpty() { return new Int64s_obj; }

hx::ObjectPtr< Int64s_obj > Int64s_obj::__new()
{
	hx::ObjectPtr< Int64s_obj > _hx_result = new Int64s_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Int64s_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Int64s_obj > _hx_result = new Int64s_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::cpp::Int64Struct Int64s_obj::one;

 ::cpp::Int64Struct Int64s_obj::two;

 ::cpp::Int64Struct Int64s_obj::zero;

 ::cpp::Int64Struct Int64s_obj::ten;

 ::cpp::Int64Struct Int64s_obj::maxValue;

 ::cpp::Int64Struct Int64s_obj::minValue;

 ::cpp::Int64Struct Int64s_obj::abs( ::cpp::Int64Struct value){
            	HX_STACK_FRAME("thx.Int64s","abs",0xd01eb5b4,"thx.Int64s.abs","thx/Int64s.hx",47,0x6d6bebed)
            	HX_STACK_ARG(value,"value")
HXLINE(  47)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::Int64s_obj::zero;
HXDLIN(  47)		Int _hx_tmp = _hx_int64_compare(value,b);
HXDLIN(  47)		if ((_hx_tmp < (int)0)) {
HXLINE(  47)			return _hx_int64_neg(value);
            		}
            		else {
HXLINE(  47)			return value;
            		}
HXDLIN(  47)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64s_obj,abs,return )

Int Int64s_obj::compare( ::cpp::Int64Struct a, ::cpp::Int64Struct b){
            	HX_STACK_FRAME("thx.Int64s","compare",0xbdf6a6e7,"thx.Int64s.compare","thx/Int64s.hx",50,0x6d6bebed)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(  50)		Int _hx_tmp = _hx_int64_compare(a,b);
HXDLIN(  50)		if ((_hx_tmp > (int)0)) {
HXLINE(  51)			return (int)1;
            		}
            		else {
HXLINE(  52)			Int _hx_tmp1 = _hx_int64_compare(a,b);
HXDLIN(  52)			if ((_hx_tmp1 < (int)0)) {
HXLINE(  53)				return (int)-1;
            			}
            			else {
HXLINE(  55)				return (int)0;
            			}
            		}
HXLINE(  50)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64s_obj,compare,return )

 ::cpp::Int64Struct Int64s_obj::parse(::String s){
            	HX_STACK_FRAME("thx.Int64s","parse",0xbfd7a9f5,"thx.Int64s.parse","thx/Int64s.hx",57,0x6d6bebed)
            	HX_STACK_ARG(s,"s")
HXLINE(  58)		HX_VARI( Bool,sIsNegative) = false;
HXDLIN(  58)		HX_VARI(  ::cpp::Int64Struct,multiplier) = ( ::cpp::Int64Struct((int)1));
HXDLIN(  58)		HX_VARI(  ::cpp::Int64Struct,current) = ( ::cpp::Int64Struct((int)0));
HXLINE(  61)		::String _hx_tmp = s.charAt((int)0);
HXDLIN(  61)		if ((_hx_tmp == HX_("-",2d,00,00,00))) {
HXLINE(  62)			sIsNegative = true;
HXLINE(  63)			s = s.substring((int)1,s.length);
            		}
HXLINE(  65)		HX_VARI( Int,len) = s.length;
HXLINE(  67)		{
HXLINE(  67)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  67)			while((_g1 < len)){
HXLINE(  67)				HX_VARI( Int,i) = _g1++;
HXLINE(  68)				 ::Dynamic _hx_tmp1 = s.charCodeAt(((len - (int)1) - i));
HXDLIN(  68)				HX_VARI( Int,digitInt) = (_hx_tmp1 - (int)48);
HXLINE(  70)				Bool _hx_tmp2;
HXDLIN(  70)				if ((digitInt >= (int)0)) {
HXLINE(  70)					_hx_tmp2 = (digitInt > (int)9);
            				}
            				else {
HXLINE(  70)					_hx_tmp2 = true;
            				}
HXDLIN(  70)				if (_hx_tmp2) {
HXLINE(  71)					HX_STACK_DO_THROW( ::thx::Error_obj::__new(HX_("String should only contain digits (and an optional - sign)",d3,97,92,e0),null(),hx::SourceInfo(HX_("Int64s.hx",78,3c,80,66),71,HX_("thx.Int64s",b0,dc,48,ef),HX_("parse",33,90,55,bd))));
            				}
HXLINE(  73)				HX_VARI(  ::cpp::Int64Struct,digit) = ( ::cpp::Int64Struct(digitInt));
HXLINE(  74)				if (sIsNegative) {
HXLINE(  75)					HX_VARI(  ::cpp::Int64Struct,b) = _hx_int64_mul(multiplier,digit);
HXDLIN(  75)					current = _hx_int64_sub(current,b);
HXLINE(  76)					Bool _hx_tmp3 = !(_hx_int64_is_neg(current));
HXDLIN(  76)					if (_hx_tmp3) {
HXLINE(  77)						HX_STACK_DO_THROW( ::thx::Error_obj::__new(HX_("Int64 parsing error: Underflow",5b,23,aa,8c),null(),hx::SourceInfo(HX_("Int64s.hx",78,3c,80,66),77,HX_("thx.Int64s",b0,dc,48,ef),HX_("parse",33,90,55,bd))));
            					}
            				}
            				else {
HXLINE(  79)					HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = _hx_int64_mul(multiplier,digit);
HXDLIN(  79)					current = _hx_int64_add(current,b1);
HXLINE(  80)					Bool _hx_tmp4 = _hx_int64_is_neg(current);
HXDLIN(  80)					if (_hx_tmp4) {
HXLINE(  81)						HX_STACK_DO_THROW( ::thx::Error_obj::__new(HX_("Int64 parsing error: Overflow",8d,b6,e6,4d),null(),hx::SourceInfo(HX_("Int64s.hx",78,3c,80,66),81,HX_("thx.Int64s",b0,dc,48,ef),HX_("parse",33,90,55,bd))));
            					}
            				}
HXLINE(  83)				HX_VARI_NAME(  ::cpp::Int64Struct,b2,"b") = ::thx::Int64s_obj::ten;
HXDLIN(  83)				multiplier = _hx_int64_mul(multiplier,b2);
            			}
            		}
HXLINE(  85)		return current;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64s_obj,parse,return )

 ::cpp::Int64Struct Int64s_obj::toInt64(::String s){
            	HX_STACK_FRAME("thx.Int64s","toInt64",0xc53270b4,"thx.Int64s.toInt64","thx/Int64s.hx",92,0x6d6bebed)
            	HX_STACK_ARG(s,"s")
HXLINE(  92)		return ::thx::Int64s_obj::parse(s);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64s_obj,toInt64,return )

 ::cpp::Int64Struct Int64s_obj::divRound( ::cpp::Int64Struct num, ::cpp::Int64Struct div){
            	HX_STACK_FRAME("thx.Int64s","divRound",0x160130bb,"thx.Int64s.divRound","thx/Int64s.hx",94,0x6d6bebed)
            	HX_STACK_ARG(num,"num")
            	HX_STACK_ARG(div,"div")
HXLINE(  95)		Bool _hx_tmp = _hx_int64_is_zero(num);
HXDLIN(  95)		if (_hx_tmp) {
HXLINE(  96)			return ::thx::Int64s_obj::zero;
            		}
HXLINE(  97)		Bool _hx_tmp1 = _hx_int64_is_zero(div);
HXDLIN(  97)		if (_hx_tmp1) {
HXLINE(  98)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(HX_("Int64s.divRound division by zero",f9,65,63,10),null(),hx::SourceInfo(HX_("Int64s.hx",78,3c,80,66),98,HX_("thx.Int64s",b0,dc,48,ef),HX_("divRound",3d,45,b2,14))));
            		}
HXLINE(  99)		Bool _hx_tmp2 = _hx_int64_is_neg(num);
HXDLIN(  99)		Bool _hx_tmp3 = _hx_int64_is_neg(div);
HXDLIN(  99)		if ((_hx_tmp2 == _hx_tmp3)) {
HXLINE( 100)			HX_VARI(  ::cpp::Int64Struct,b) = ::thx::Int64s_obj::two;
HXDLIN( 100)			Bool _hx_tmp4 = _hx_int64_is_zero(div);
HXDLIN( 100)			if (_hx_tmp4) {
HXLINE( 100)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 100)			HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = _hx_int64_div(div,b);
HXDLIN( 100)			HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_add(num,b1);
HXDLIN( 100)			Bool _hx_tmp5 = _hx_int64_is_zero(a);
HXDLIN( 100)			if (_hx_tmp5) {
HXLINE( 100)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN( 100)			return _hx_int64_div(a,div);
            		}
            		else {
HXLINE( 101)			Bool _hx_tmp6 = _hx_int64_is_neg(div);
HXDLIN( 101)			if (_hx_tmp6) {
HXLINE( 102)				HX_VARI_NAME(  ::cpp::Int64Struct,a1,"a") = _hx_int64_neg(num);
HXDLIN( 102)				HX_VARI_NAME(  ::cpp::Int64Struct,b2,"b") = ::thx::Int64s_obj::one;
HXDLIN( 102)				HX_VARI_NAME(  ::cpp::Int64Struct,a2,"a") = _hx_int64_add(a1,b2);
HXDLIN( 102)				HX_VARI_NAME(  ::cpp::Int64Struct,b3,"b") = ::thx::Int64s_obj::two;
HXDLIN( 102)				Bool _hx_tmp7 = _hx_int64_is_zero(div);
HXDLIN( 102)				if (_hx_tmp7) {
HXLINE( 102)					HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            				}
HXDLIN( 102)				HX_VARI_NAME(  ::cpp::Int64Struct,b4,"b") = _hx_int64_div(div,b3);
HXDLIN( 102)				HX_VARI_NAME(  ::cpp::Int64Struct,a3,"a") = _hx_int64_add(a2,b4);
HXDLIN( 102)				HX_VARI_NAME(  ::cpp::Int64Struct,b5,"b") = _hx_int64_neg(div);
HXDLIN( 102)				Bool _hx_tmp8 = _hx_int64_is_zero(a3);
HXDLIN( 102)				if (_hx_tmp8) {
HXLINE( 102)					HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            				}
HXDLIN( 102)				return _hx_int64_div(a3,b5);
            			}
            			else {
HXLINE( 104)				HX_VARI_NAME(  ::cpp::Int64Struct,b6,"b") = ::thx::Int64s_obj::one;
HXDLIN( 104)				HX_VARI_NAME(  ::cpp::Int64Struct,a4,"a") = _hx_int64_add(num,b6);
HXDLIN( 104)				HX_VARI_NAME(  ::cpp::Int64Struct,b7,"b") = ::thx::Int64s_obj::two;
HXDLIN( 104)				Bool _hx_tmp9 = _hx_int64_is_zero(div);
HXDLIN( 104)				if (_hx_tmp9) {
HXLINE( 104)					HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            				}
HXDLIN( 104)				HX_VARI_NAME(  ::cpp::Int64Struct,b8,"b") = _hx_int64_div(div,b7);
HXDLIN( 104)				HX_VARI_NAME(  ::cpp::Int64Struct,a5,"a") = _hx_int64_sub(a4,b8);
HXDLIN( 104)				Bool _hx_tmp10 = _hx_int64_is_zero(a5);
HXDLIN( 104)				if (_hx_tmp10) {
HXLINE( 104)					HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            				}
HXDLIN( 104)				return _hx_int64_div(a5,div);
            			}
            		}
HXLINE(  99)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64s_obj,divRound,return )

 ::cpp::Int64Struct Int64s_obj::divFloor( ::cpp::Int64Struct num, ::cpp::Int64Struct div){
            	HX_STACK_FRAME("thx.Int64s","divFloor",0x2b320a39,"thx.Int64s.divFloor","thx/Int64s.hx",108,0x6d6bebed)
            	HX_STACK_ARG(num,"num")
            	HX_STACK_ARG(div,"div")
HXLINE( 109)		Bool _hx_tmp = _hx_int64_is_zero(num);
HXDLIN( 109)		if (_hx_tmp) {
HXLINE( 110)			return ::thx::Int64s_obj::zero;
            		}
HXLINE( 111)		Bool _hx_tmp1 = _hx_int64_is_zero(div);
HXDLIN( 111)		if (_hx_tmp1) {
HXLINE( 112)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(HX_("Int64s.divFloor division by zero",bb,fe,dd,e7),null(),hx::SourceInfo(HX_("Int64s.hx",78,3c,80,66),112,HX_("thx.Int64s",b0,dc,48,ef),HX_("divFloor",bb,1e,e3,29))));
            		}
HXLINE( 113)		Bool _hx_tmp2 = _hx_int64_is_zero(num);
HXDLIN( 113)		if (_hx_tmp2) {
HXLINE( 113)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 113)		 ::cpp::Int64Struct _hx_tmp3 = _hx_int64_div(num,div);
HXDLIN( 113)		HX_VARI(  ::cpp::Int64Struct,a) = _hx_tmp3;
HXDLIN( 113)		HX_VAR( Int,x);
HXDLIN( 113)		Bool _hx_tmp4 = _hx_int64_is_neg(num);
HXDLIN( 113)		Bool _hx_tmp5 = _hx_int64_is_neg(div);
HXDLIN( 113)		if ((_hx_tmp4 != _hx_tmp5)) {
HXLINE( 113)			x = (int)1;
            		}
            		else {
HXLINE( 113)			x = (int)0;
            		}
HXDLIN( 113)		HX_VARI(  ::cpp::Int64Struct,b) = ( ::cpp::Int64Struct(x));
HXDLIN( 113)		return _hx_int64_sub(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64s_obj,divFloor,return )

 ::cpp::Int64Struct Int64s_obj::divCeil( ::cpp::Int64Struct num, ::cpp::Int64Struct div){
            	HX_STACK_FRAME("thx.Int64s","divCeil",0x92479338,"thx.Int64s.divCeil","thx/Int64s.hx",116,0x6d6bebed)
            	HX_STACK_ARG(num,"num")
            	HX_STACK_ARG(div,"div")
HXLINE( 117)		Bool _hx_tmp = _hx_int64_is_zero(num);
HXDLIN( 117)		if (_hx_tmp) {
HXLINE( 118)			return ::thx::Int64s_obj::zero;
            		}
HXLINE( 119)		Bool _hx_tmp1 = _hx_int64_is_zero(div);
HXDLIN( 119)		if (_hx_tmp1) {
HXLINE( 120)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(HX_("Int64s.divCeil division by zero",f0,49,a7,00),null(),hx::SourceInfo(HX_("Int64s.hx",78,3c,80,66),120,HX_("thx.Int64s",b0,dc,48,ef),HX_("divCeil",f6,04,ba,57))));
            		}
HXLINE( 122)		Bool _hx_tmp2 = _hx_int64_is_zero(num);
HXDLIN( 122)		if (_hx_tmp2) {
HXLINE( 122)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 122)		 ::cpp::Int64Struct _hx_tmp3 = _hx_int64_div(num,div);
HXDLIN( 122)		HX_VARI(  ::cpp::Int64Struct,q) = _hx_tmp3;
HXLINE( 123)		Bool _hx_tmp4 = _hx_int64_is_zero(num);
HXDLIN( 123)		if (_hx_tmp4) {
HXLINE( 123)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 123)		 ::cpp::Int64Struct _hx_tmp5 = _hx_int64_mod(num,div);
HXLINE( 122)		HX_VARI(  ::cpp::Int64Struct,m) = _hx_tmp5;
HXLINE( 129)		Bool _hx_tmp6;
HXDLIN( 129)		Bool _hx_tmp7 = _hx_int64_is_neg(num);
HXDLIN( 129)		Bool _hx_tmp8 = _hx_int64_is_neg(div);
HXDLIN( 129)		if ((_hx_tmp7 == _hx_tmp8)) {
HXLINE( 129)			_hx_tmp6 = !(_hx_int64_is_zero(m));
            		}
            		else {
HXLINE( 129)			_hx_tmp6 = false;
            		}
HXDLIN( 129)		if (_hx_tmp6) {
HXLINE( 130)			HX_VARI(  ::cpp::Int64Struct,b) = ::thx::Int64s_obj::one;
HXDLIN( 130)			return _hx_int64_add(q,b);
            		}
            		else {
HXLINE( 132)			return q;
            		}
HXLINE( 129)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64s_obj,divCeil,return )

 ::cpp::Int64Struct Int64s_obj::min;

Float Int64s_obj::toFloat( ::cpp::Int64Struct i){
            	HX_STACK_FRAME("thx.Int64s","toFloat",0x09a8a063,"thx.Int64s.toFloat","thx/Int64s.hx",142,0x6d6bebed)
            	HX_STACK_ARG(i,"i")
HXLINE( 143)		HX_VARI( Bool,isNegative) = false;
HXLINE( 144)		HX_VARI(  ::cpp::Int64Struct,b) = ( ::cpp::Int64Struct((int)0));
HXDLIN( 144)		Int _hx_tmp = _hx_int64_compare(i,b);
HXDLIN( 144)		if ((_hx_tmp < (int)0)) {
HXLINE( 145)			HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ::thx::Int64s_obj::min;
HXDLIN( 145)			Int _hx_tmp1 = _hx_int64_compare(i,b1);
HXDLIN( 145)			if ((_hx_tmp1 < (int)0)) {
HXLINE( 146)				return ((Float)-9223372036854775808.0);
            			}
HXLINE( 147)			isNegative = true;
HXLINE( 148)			i = _hx_int64_neg(i);
            		}
HXLINE( 150)		HX_VARI( Float,multiplier) = ((Float)1.0);
HXDLIN( 150)		HX_VARI( Float,ret) = ((Float)0.0);
HXLINE( 152)		{
HXLINE( 152)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 152)			while((_g < (int)64)){
HXLINE( 152)				++_g;
HXLINE( 153)				HX_VARI_NAME(  ::cpp::Int64Struct,b2,"b") = ::thx::Int64s_obj::one;
HXDLIN( 153)				HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_and(i,b2);
HXDLIN( 153)				HX_VARI_NAME(  ::cpp::Int64Struct,b3,"b") = ::thx::Int64s_obj::zero;
HXDLIN( 153)				Bool _hx_tmp2 = _hx_int64_neq(a,b3);
HXDLIN( 153)				if (_hx_tmp2) {
HXLINE( 154)					hx::AddEq(ret,multiplier);
            				}
HXLINE( 155)				hx::MultEq(multiplier,((Float)2.0));
HXLINE( 156)				i = _hx_int64_shr(i,(int)1);
            			}
            		}
HXLINE( 158)		Int _hx_tmp3;
HXDLIN( 158)		if (isNegative) {
HXLINE( 158)			_hx_tmp3 = (int)-1;
            		}
            		else {
HXLINE( 158)			_hx_tmp3 = (int)1;
            		}
HXDLIN( 158)		return (_hx_tmp3 * ret);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64s_obj,toFloat,return )

 ::cpp::Int64Struct Int64s_obj::fromFloat(Float f){
            	HX_STACK_FRAME("thx.Int64s","fromFloat",0xdaded294,"thx.Int64s.fromFloat","thx/Int64s.hx",161,0x6d6bebed)
            	HX_STACK_ARG(f,"f")
HXLINE( 162)		Bool _hx_tmp;
HXDLIN( 162)		Bool _hx_tmp1 = !(::Math_obj::isNaN(f));
HXDLIN( 162)		if (_hx_tmp1) {
HXLINE( 162)			_hx_tmp = !(::Math_obj::isFinite(f));
            		}
            		else {
HXLINE( 162)			_hx_tmp = true;
            		}
HXDLIN( 162)		if (_hx_tmp) {
HXLINE( 163)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(HX_("Conversion to Int64 failed. Number is NaN or Infinite",10,82,6e,3d),null(),hx::SourceInfo(HX_("Int64s.hx",78,3c,80,66),163,HX_("thx.Int64s",b0,dc,48,ef),HX_("fromFloat",d2,af,1f,b7))));
            		}
HXLINE( 165)		HX_VARI( Float,noFractions) = (f - hx::Mod(f,(int)1));
HXLINE( 168)		if ((noFractions > ((Float)9007199254740991.0))) {
HXLINE( 169)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(HX_("Conversion to Int64 failed. Conversion overflow",0f,5a,53,fe),null(),hx::SourceInfo(HX_("Int64s.hx",78,3c,80,66),169,HX_("thx.Int64s",b0,dc,48,ef),HX_("fromFloat",d2,af,1f,b7))));
            		}
HXLINE( 170)		if ((noFractions < ((Float)-9007199254740991.0))) {
HXLINE( 171)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(HX_("Conversion to Int64 failed. Conversion underflow",99,91,4c,3b),null(),hx::SourceInfo(HX_("Int64s.hx",78,3c,80,66),171,HX_("thx.Int64s",b0,dc,48,ef),HX_("fromFloat",d2,af,1f,b7))));
            		}
HXLINE( 173)		HX_VARI(  ::cpp::Int64Struct,result) = ::thx::Int64s_obj::zero;
HXDLIN( 173)		HX_VARI( Bool,neg) = (noFractions < ((Float)0.0));
HXDLIN( 173)		HX_VAR( Float,rest);
HXLINE( 175)		if (neg) {
HXLINE( 173)			rest = -(noFractions);
            		}
            		else {
HXLINE( 173)			rest = noFractions;
            		}
HXLINE( 177)		HX_VARI( Int,i) = (int)0;
HXDLIN( 177)		HX_VAR( Float,curr);
HXLINE( 178)		while((rest >= (int)1)){
HXLINE( 179)			curr = hx::Mod(rest,(int)2);
HXLINE( 180)			hx::DivEq(rest,(int)2);
HXLINE( 181)			if ((curr >= (int)1)) {
HXLINE( 182)				HX_VARI(  ::cpp::Int64Struct,a) = ( ::cpp::Int64Struct((int)1));
HXDLIN( 182)				HX_VARI(  ::cpp::Int64Struct,b) = _hx_int64_shl(a,i);
HXDLIN( 182)				result = _hx_int64_add(result,b);
            			}
HXLINE( 183)			++i;
            		}
HXLINE( 186)		if (neg) {
HXLINE( 187)			return _hx_int64_neg(result);
            		}
            		else {
HXLINE( 189)			return result;
            		}
HXLINE( 186)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64s_obj,fromFloat,return )


Int64s_obj::Int64s_obj()
{
}

bool Int64s_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"one") ) { outValue = one; return true; }
		if (HX_FIELD_EQ(inName,"two") ) { outValue = two; return true; }
		if (HX_FIELD_EQ(inName,"ten") ) { outValue = ten; return true; }
		if (HX_FIELD_EQ(inName,"abs") ) { outValue = abs_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"min") ) { outValue = min; return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"zero") ) { outValue = zero; return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"parse") ) { outValue = parse_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"compare") ) { outValue = compare_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toInt64") ) { outValue = toInt64_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"divCeil") ) { outValue = divCeil_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toFloat") ) { outValue = toFloat_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"maxValue") ) { outValue = maxValue; return true; }
		if (HX_FIELD_EQ(inName,"minValue") ) { outValue = minValue; return true; }
		if (HX_FIELD_EQ(inName,"divRound") ) { outValue = divRound_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"divFloor") ) { outValue = divFloor_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromFloat") ) { outValue = fromFloat_dyn(); return true; }
	}
	return false;
}

bool Int64s_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"one") ) { one=ioValue.Cast<  ::cpp::Int64Struct >(); return true; }
		if (HX_FIELD_EQ(inName,"two") ) { two=ioValue.Cast<  ::cpp::Int64Struct >(); return true; }
		if (HX_FIELD_EQ(inName,"ten") ) { ten=ioValue.Cast<  ::cpp::Int64Struct >(); return true; }
		if (HX_FIELD_EQ(inName,"min") ) { min=ioValue.Cast<  ::cpp::Int64Struct >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"zero") ) { zero=ioValue.Cast<  ::cpp::Int64Struct >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"maxValue") ) { maxValue=ioValue.Cast<  ::cpp::Int64Struct >(); return true; }
		if (HX_FIELD_EQ(inName,"minValue") ) { minValue=ioValue.Cast<  ::cpp::Int64Struct >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Int64s_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Int64s_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*cpp::Int64Struct*/ ,(void *) &Int64s_obj::one,HX_HCSTRING("one","\x66","\x9a","\x54","\x00")},
	{hx::fsObject /*cpp::Int64Struct*/ ,(void *) &Int64s_obj::two,HX_HCSTRING("two","\x8c","\x6d","\x58","\x00")},
	{hx::fsObject /*cpp::Int64Struct*/ ,(void *) &Int64s_obj::zero,HX_HCSTRING("zero","\x28","\x0f","\xf1","\x50")},
	{hx::fsObject /*cpp::Int64Struct*/ ,(void *) &Int64s_obj::ten,HX_HCSTRING("ten","\xdd","\x5d","\x58","\x00")},
	{hx::fsObject /*cpp::Int64Struct*/ ,(void *) &Int64s_obj::maxValue,HX_HCSTRING("maxValue","\x2d","\xd2","\xd5","\xdb")},
	{hx::fsObject /*cpp::Int64Struct*/ ,(void *) &Int64s_obj::minValue,HX_HCSTRING("minValue","\x7f","\xec","\xef","\x28")},
	{hx::fsObject /*cpp::Int64Struct*/ ,(void *) &Int64s_obj::min,HX_HCSTRING("min","\x92","\x11","\x53","\x00")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Int64s_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Int64s_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Int64s_obj::one,"one");
	HX_MARK_MEMBER_NAME(Int64s_obj::two,"two");
	HX_MARK_MEMBER_NAME(Int64s_obj::zero,"zero");
	HX_MARK_MEMBER_NAME(Int64s_obj::ten,"ten");
	HX_MARK_MEMBER_NAME(Int64s_obj::maxValue,"maxValue");
	HX_MARK_MEMBER_NAME(Int64s_obj::minValue,"minValue");
	HX_MARK_MEMBER_NAME(Int64s_obj::min,"min");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Int64s_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Int64s_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Int64s_obj::one,"one");
	HX_VISIT_MEMBER_NAME(Int64s_obj::two,"two");
	HX_VISIT_MEMBER_NAME(Int64s_obj::zero,"zero");
	HX_VISIT_MEMBER_NAME(Int64s_obj::ten,"ten");
	HX_VISIT_MEMBER_NAME(Int64s_obj::maxValue,"maxValue");
	HX_VISIT_MEMBER_NAME(Int64s_obj::minValue,"minValue");
	HX_VISIT_MEMBER_NAME(Int64s_obj::min,"min");
};

#endif

hx::Class Int64s_obj::__mClass;

static ::String Int64s_obj_sStaticFields[] = {
	HX_HCSTRING("one","\x66","\x9a","\x54","\x00"),
	HX_HCSTRING("two","\x8c","\x6d","\x58","\x00"),
	HX_HCSTRING("zero","\x28","\x0f","\xf1","\x50"),
	HX_HCSTRING("ten","\xdd","\x5d","\x58","\x00"),
	HX_HCSTRING("maxValue","\x2d","\xd2","\xd5","\xdb"),
	HX_HCSTRING("minValue","\x7f","\xec","\xef","\x28"),
	HX_HCSTRING("abs","\x72","\xf0","\x49","\x00"),
	HX_HCSTRING("compare","\xa5","\x18","\x69","\x83"),
	HX_HCSTRING("parse","\x33","\x90","\x55","\xbd"),
	HX_HCSTRING("toInt64","\x72","\xe2","\xa4","\x8a"),
	HX_HCSTRING("divRound","\x3d","\x45","\xb2","\x14"),
	HX_HCSTRING("divFloor","\xbb","\x1e","\xe3","\x29"),
	HX_HCSTRING("divCeil","\xf6","\x04","\xba","\x57"),
	HX_HCSTRING("min","\x92","\x11","\x53","\x00"),
	HX_HCSTRING("toFloat","\x21","\x12","\x1b","\xcf"),
	HX_HCSTRING("fromFloat","\xd2","\xaf","\x1f","\xb7"),
	::String(null())
};

void Int64s_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.Int64s","\xb0","\xdc","\x48","\xef");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Int64s_obj::__GetStatic;
	__mClass->mSetStaticField = &Int64s_obj::__SetStatic;
	__mClass->mMarkFunc = Int64s_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Int64s_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Int64s_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Int64s_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Int64s_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Int64s_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Int64s_obj::__boot()
{
{
            	HX_STACK_FRAME("thx.Int64s","boot",0x4b7358b0,"thx.Int64s.boot","thx/Int64s.hx",38,0x6d6bebed)
HXLINE(  38)		one = _hx_int64_make((int)0,(int)1);
            	}
{
            	HX_STACK_FRAME("thx.Int64s","boot",0x4b7358b0,"thx.Int64s.boot","thx/Int64s.hx",39,0x6d6bebed)
HXLINE(  39)		two = ( ::cpp::Int64Struct((int)2));
            	}
{
            	HX_STACK_FRAME("thx.Int64s","boot",0x4b7358b0,"thx.Int64s.boot","thx/Int64s.hx",40,0x6d6bebed)
HXLINE(  40)		zero = _hx_int64_make((int)0,(int)0);
            	}
{
            	HX_STACK_FRAME("thx.Int64s","boot",0x4b7358b0,"thx.Int64s.boot","thx/Int64s.hx",41,0x6d6bebed)
HXLINE(  41)		ten = ( ::cpp::Int64Struct((int)10));
            	}
{
            	HX_STACK_FRAME("thx.Int64s","boot",0x4b7358b0,"thx.Int64s.boot","thx/Int64s.hx",43,0x6d6bebed)
HXLINE(  43)		maxValue = _hx_int64_make((int)2147483647,(int)-1);
            	}
{
            	HX_STACK_FRAME("thx.Int64s","boot",0x4b7358b0,"thx.Int64s.boot","thx/Int64s.hx",44,0x6d6bebed)
HXLINE(  44)		minValue = _hx_int64_make((int)-2147483648,(int)1);
            	}
{
            	HX_STACK_FRAME("thx.Int64s","boot",0x4b7358b0,"thx.Int64s.boot","thx/Int64s.hx",135,0x6d6bebed)
HXLINE( 135)		min = _hx_int64_make((int)-2147483648,(int)0);
            	}
}

} // end namespace thx
