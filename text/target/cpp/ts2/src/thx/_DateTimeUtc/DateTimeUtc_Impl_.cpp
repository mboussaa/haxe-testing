// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "cpp/Int64.h"
#include "hxMath.h"
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_thx_Error
#include <thx/Error.h>
#endif
#ifndef INCLUDED_thx_Int64s
#include <thx/Int64s.h>
#endif
#ifndef INCLUDED_thx_Ints
#include <thx/Ints.h>
#endif
#ifndef INCLUDED_thx_Strings
#include <thx/Strings.h>
#endif
#ifndef INCLUDED_thx_TimePeriod
#include <thx/TimePeriod.h>
#endif
#ifndef INCLUDED_thx__DateTime_DateTime_Impl_
#include <thx/_DateTime/DateTime_Impl_.h>
#endif
#ifndef INCLUDED_thx__DateTimeUtc_DateTimeUtc_Impl_
#include <thx/_DateTimeUtc/DateTimeUtc_Impl_.h>
#endif
#ifndef INCLUDED_thx__Time_Time_Impl_
#include <thx/_Time/Time_Impl_.h>
#endif

namespace thx{
namespace _DateTimeUtc{

void DateTimeUtc_Impl__obj::__construct() { }

Dynamic DateTimeUtc_Impl__obj::__CreateEmpty() { return new DateTimeUtc_Impl__obj; }

hx::ObjectPtr< DateTimeUtc_Impl__obj > DateTimeUtc_Impl__obj::__new()
{
	hx::ObjectPtr< DateTimeUtc_Impl__obj > _hx_result = new DateTimeUtc_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic DateTimeUtc_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DateTimeUtc_Impl__obj > _hx_result = new DateTimeUtc_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Int DateTimeUtc_Impl__obj::millisPerSecond;

Int DateTimeUtc_Impl__obj::millisPerMinute;

Int DateTimeUtc_Impl__obj::millisPerHour;

Int DateTimeUtc_Impl__obj::millisPerDay;

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::tenI64;

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::hundredI64;

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::thousandI64;

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::tenThousandI64;

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::millionI64;

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::ticksPerMicrosecondI64;

Int DateTimeUtc_Impl__obj::ticksPerMillisecond;

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::ticksPerMillisecondI64;

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::ticksPerSecondI64;

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::ticksPerMinuteI64;

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::ticksPerHourI64;

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::ticksPerDayI64;

Int DateTimeUtc_Impl__obj::daysPerYear;

Int DateTimeUtc_Impl__obj::daysPer4Years;

Int DateTimeUtc_Impl__obj::daysPer100Years;

Int DateTimeUtc_Impl__obj::daysPer400Years;

Int DateTimeUtc_Impl__obj::daysTo1970;

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::unixEpochTicks;

Int DateTimeUtc_Impl__obj::DATE_PART_YEAR;

Int DateTimeUtc_Impl__obj::DATE_PART_DAY_OF_YEAR;

Int DateTimeUtc_Impl__obj::DATE_PART_MONTH;

Int DateTimeUtc_Impl__obj::DATE_PART_DAY;

::Array< Int > DateTimeUtc_Impl__obj::daysToMonth365;

::Array< Int > DateTimeUtc_Impl__obj::daysToMonth366;

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::now(){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","now",0x8dc20c97,"thx._DateTimeUtc.DateTimeUtc_Impl_.now","thx/DateTimeUtc.hx",60,0x6fdd0860)
HXLINE(  60)		 ::Date _hx_tmp = ::Date_obj::now();
HXDLIN(  60)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromDate(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(DateTimeUtc_Impl__obj,now,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::fromInt64( ::cpp::Int64Struct ticks){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","fromInt64",0x8190ca64,"thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64","thx/DateTimeUtc.hx",68,0x6fdd0860)
            	HX_STACK_ARG(ticks,"ticks")
HXLINE(  68)		return ticks;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,fromInt64,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::fromDate( ::Date date){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","fromDate",0x6b719d97,"thx._DateTimeUtc.DateTimeUtc_Impl_.fromDate","thx/DateTimeUtc.hx",77,0x6fdd0860)
            	HX_STACK_ARG(date,"date")
HXLINE(  77)		Float _hx_tmp = date->getTime();
HXDLIN(  77)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromTime(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,fromDate,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::fromTime(Float timestamp){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","fromTime",0x760b1376,"thx._DateTimeUtc.DateTimeUtc_Impl_.fromTime","thx/DateTimeUtc.hx",84,0x6fdd0860)
            	HX_STACK_ARG(timestamp,"timestamp")
HXLINE(  84)		HX_VARI(  ::cpp::Int64Struct,a) = ::thx::Int64s_obj::fromFloat(timestamp);
HXDLIN(  84)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMillisecondI64;
HXDLIN(  84)		HX_VARI_NAME(  ::cpp::Int64Struct,a1,"a") = _hx_int64_mul(a,b);
HXDLIN(  84)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::unixEpochTicks;
HXDLIN(  84)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(a1,b1);
HXDLIN(  84)		return ticks;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,fromTime,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::fromString(::String s){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","fromString",0x4feddc7a,"thx._DateTimeUtc.DateTimeUtc_Impl_.fromString","thx/DateTimeUtc.hx",91,0x6fdd0860)
            	HX_STACK_ARG(s,"s")
HXLINE(  91)		HX_VARI_NAME( ::Array< ::Dynamic>,this1,"this") = ::thx::_DateTime::DateTime_Impl__obj::fromString(s);
HXDLIN(  91)		return this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,fromString,return )

Int DateTimeUtc_Impl__obj::compare( ::cpp::Int64Struct a, ::cpp::Int64Struct b){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","compare",0x161da0a6,"thx._DateTimeUtc.DateTimeUtc_Impl_.compare","thx/DateTimeUtc.hx",94,0x6fdd0860)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(  94)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::compareTo(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,compare,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::create(Int year,Int month,Int day, ::Dynamic __o_hour, ::Dynamic __o_minute, ::Dynamic __o_second, ::Dynamic __o_millisecond){
 ::Dynamic hour = __o_hour.Default(0);
 ::Dynamic minute = __o_minute.Default(0);
 ::Dynamic second = __o_second.Default(0);
 ::Dynamic millisecond = __o_millisecond.Default(0);
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","create",0x92879a1b,"thx._DateTimeUtc.DateTimeUtc_Impl_.create","thx/DateTimeUtc.hx",102,0x6fdd0860)
            	HX_STACK_ARG(year,"year")
            	HX_STACK_ARG(month,"month")
            	HX_STACK_ARG(day,"day")
            	HX_STACK_ARG(hour,"hour")
            	HX_STACK_ARG(minute,"minute")
            	HX_STACK_ARG(second,"second")
            	HX_STACK_ARG(millisecond,"millisecond")
HXLINE( 103)		Int _hx_tmp = ::Math_obj::floor(((Float)millisecond / (Float)(int)1000));
HXDLIN( 103)		hx::AddEq(second,_hx_tmp);
HXLINE( 104)		hx::ModEq(millisecond,(int)1000);
HXLINE( 105)		Bool _hx_tmp1 = hx::IsLess( millisecond,(int)0 );
HXDLIN( 105)		if (_hx_tmp1) {
HXLINE( 106)			hx::AddEq(millisecond,(int)1000);
            		}
HXLINE( 108)		HX_VARI(  ::cpp::Int64Struct,a) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::dateToTicks(year,month,day);
HXDLIN( 108)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_Time::Time_Impl__obj::timeToTicks(hour,minute,second);
HXDLIN( 108)		HX_VARI_NAME(  ::cpp::Int64Struct,a1,"a") = _hx_int64_add(a,b);
HXLINE( 110)		HX_VARI_NAME(  ::cpp::Int64Struct,a2,"a") = ( ::cpp::Int64Struct(millisecond));
HXDLIN( 110)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMillisecondI64;
HXLINE( 108)		HX_VARI_NAME(  ::cpp::Int64Struct,b2,"b") = _hx_int64_mul(a2,b1);
HXDLIN( 108)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(a1,b2);
HXLINE( 112)		return ticks;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(DateTimeUtc_Impl__obj,create,return )

Bool DateTimeUtc_Impl__obj::isLeapYear(Int year){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","isLeapYear",0x8008ae2e,"thx._DateTimeUtc.DateTimeUtc_Impl_.isLeapYear","thx/DateTimeUtc.hx",116,0x6fdd0860)
            	HX_STACK_ARG(year,"year")
HXLINE( 116)		if ((hx::Mod(year,(int)4) == (int)0)) {
HXLINE( 116)			if ((hx::Mod(year,(int)100) == (int)0)) {
HXLINE( 116)				return (hx::Mod(year,(int)400) == (int)0);
            			}
            			else {
HXLINE( 116)				return true;
            			}
            		}
            		else {
HXLINE( 116)			return false;
            		}
HXDLIN( 116)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,isLeapYear,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::dateToTicks(Int year,Int month,Int day){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::Array< Int >,month1,::Array< Int >,year1) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","dateToTicks",0x1266aaee,"thx._DateTimeUtc.DateTimeUtc_Impl_.dateToTicks","thx/DateTimeUtc.hx",120,0x6fdd0860)
HXLINE( 120)			if ((month1->__get((int)0) == (int)0)) {
HXLINE( 121)				year1[(int)0]--;
HXLINE( 122)				month1[(int)0] = (int)12;
            			}
            			else {
HXLINE( 123)				if ((month1->__get((int)0) < (int)0)) {
HXLINE( 124)					month1[(int)0] = -(month1->__get((int)0));
HXLINE( 125)					HX_VARI( Int,years) = ::Math_obj::ceil(((Float)month1->__get((int)0) / (Float)(int)12));
HXLINE( 126)					hx::SubEq(year1[(int)0],years);
HXLINE( 127)					month1[(int)0] = ((years * (int)12) - month1->__get((int)0));
            				}
            				else {
HXLINE( 128)					if ((month1->__get((int)0) > (int)12)) {
HXLINE( 129)						HX_VARI_NAME( Int,years1,"years") = ::Math_obj::floor(((Float)month1->__get((int)0) / (Float)(int)12));
HXLINE( 130)						hx::AddEq(year1[(int)0],years1);
HXLINE( 131)						month1[(int)0] = (month1->__get((int)0) - (years1 * (int)12));
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","dateToTicks",0x1266aaee,"thx._DateTimeUtc.DateTimeUtc_Impl_.dateToTicks","thx/DateTimeUtc.hx",118,0x6fdd0860)
            	HX_STACK_ARG(year,"year")
            	HX_STACK_ARG(month,"month")
            	HX_STACK_ARG(day,"day")
HXLINE( 118)		HX_VARI_NAME( ::Array< Int >,month1,"month") = ::Array_obj< Int >::__new(1)->init(0,month);
HXDLIN( 118)		HX_VARI_NAME( ::Array< Int >,year1,"year") = ::Array_obj< Int >::__new(1)->init(0,year);
HXLINE( 119)		HX_VARI(  ::Dynamic,fixMonthYear) =  ::Dynamic(new _hx_Closure_0(month1,year1));
HXLINE( 135)		while((day < (int)0)){
HXLINE( 136)			month1[(int)0]--;
HXLINE( 137)			fixMonthYear();
HXLINE( 138)			hx::AddEq(day,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysInMonth(year1->__get((int)0),month1->__get((int)0)));
            		}
HXLINE( 141)		fixMonthYear();
HXLINE( 142)		HX_VAR( Int,days);
HXLINE( 143)		while(true){
HXLINE( 143)			days = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysInMonth(year1->__get((int)0),month1->__get((int)0));
HXDLIN( 143)			if (!((day > days))) {
HXLINE( 143)				goto _hx_goto_1;
            			}
HXLINE( 144)			month1[(int)0]++;
HXLINE( 145)			fixMonthYear();
HXLINE( 146)			hx::SubEq(day,days);
            		}
            		_hx_goto_1:;
HXLINE( 149)		if ((day == (int)0)) {
HXLINE( 150)			hx::SubEq(month1[(int)0],(int)1);
HXLINE( 151)			fixMonthYear();
HXLINE( 152)			day = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysInMonth(year1->__get((int)0),month1->__get((int)0));
            		}
HXLINE( 155)		fixMonthYear();
HXLINE( 157)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::rawDateToTicks(year1->__get((int)0),month1->__get((int)0),day);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(DateTimeUtc_Impl__obj,dateToTicks,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::rawDateToTicks(Int year,Int month,Int day){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","rawDateToTicks",0x8853b384,"thx._DateTimeUtc.DateTimeUtc_Impl_.rawDateToTicks","thx/DateTimeUtc.hx",160,0x6fdd0860)
            	HX_STACK_ARG(year,"year")
            	HX_STACK_ARG(month,"month")
            	HX_STACK_ARG(day,"day")
HXLINE( 161)		HX_VAR( ::Array< Int >,days);
HXDLIN( 161)		if (::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::isLeapYear(year)) {
HXLINE( 161)			days = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysToMonth366;
            		}
            		else {
HXLINE( 161)			days = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysToMonth365;
            		}
HXLINE( 162)		Bool _hx_tmp;
HXDLIN( 162)		if ((day >= (int)1)) {
HXLINE( 162)			_hx_tmp = (day <= (days->__get(month) - days->__get((month - (int)1))));
            		}
            		else {
HXLINE( 162)			_hx_tmp = false;
            		}
HXDLIN( 162)		if (_hx_tmp) {
HXLINE( 163)			HX_VARI( Int,y) = (year - (int)1);
HXLINE( 164)			Int _hx_tmp1 = (y * (int)365);
HXDLIN( 164)			Int _hx_tmp2 = ::Std_obj::_hx_int(((Float)y / (Float)(int)4));
HXDLIN( 164)			Int _hx_tmp3 = (_hx_tmp1 + _hx_tmp2);
HXDLIN( 164)			Int _hx_tmp4 = ::Std_obj::_hx_int(((Float)y / (Float)(int)100));
HXDLIN( 164)			Int _hx_tmp5 = (_hx_tmp3 - _hx_tmp4);
HXDLIN( 164)			Int _hx_tmp6 = ::Std_obj::_hx_int(((Float)y / (Float)(int)400));
HXLINE( 165)			HX_VARI(  ::cpp::Int64Struct,a) = ( ::cpp::Int64Struct(((((_hx_tmp5 + _hx_tmp6) + days->__get((month - (int)1))) + day) - (int)1)));
HXDLIN( 165)			HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerDayI64;
HXDLIN( 165)			return _hx_int64_mul(a,b);
            		}
HXLINE( 167)		HX_STACK_DO_THROW( ::thx::Error_obj::__new((((((HX_("bad year/month/day ",aa,74,95,34) + year) + HX_("/",2f,00,00,00)) + month) + HX_("/",2f,00,00,00)) + day),null(),hx::SourceInfo(HX_("DateTimeUtc.hx",f5,df,c1,2e),167,HX_("thx._DateTimeUtc.DateTimeUtc_Impl_",6f,7f,e0,31),HX_("rawDateToTicks",65,c9,b4,96))));
HXDLIN( 167)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(DateTimeUtc_Impl__obj,rawDateToTicks,return )

Int DateTimeUtc_Impl__obj::daysInMonth(Int year,Int month){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","daysInMonth",0x1e4a17c5,"thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth","thx/DateTimeUtc.hx",170,0x6fdd0860)
            	HX_STACK_ARG(year,"year")
            	HX_STACK_ARG(month,"month")
HXLINE( 171)		HX_VAR( ::Array< Int >,days);
HXDLIN( 171)		if (::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::isLeapYear(year)) {
HXLINE( 171)			days = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysToMonth366;
            		}
            		else {
HXLINE( 171)			days = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysToMonth365;
            		}
HXLINE( 172)		return (days->__get(month) - days->__get((month - (int)1)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,daysInMonth,return )

::Array< ::Dynamic> DateTimeUtc_Impl__obj::daysRange( ::cpp::Int64Struct start, ::cpp::Int64Struct end){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","daysRange",0x3b4e41e7,"thx._DateTimeUtc.DateTimeUtc_Impl_.daysRange","thx/DateTimeUtc.hx",180,0x6fdd0860)
            	HX_STACK_ARG(start,"start")
            	HX_STACK_ARG(end,"end")
HXLINE( 181)		Int _hx_tmp = _hx_int64_compare(end,start);
HXDLIN( 181)		if ((_hx_tmp < (int)0)) {
HXLINE( 181)			return ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE( 182)		HX_VARI( ::Array< ::Dynamic>,days) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 183)		while(true){
HXLINE( 183)			Bool _hx_tmp1 = !(!(::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::sameDay(start,end)));
HXDLIN( 183)			if (_hx_tmp1) {
HXLINE( 183)				goto _hx_goto_2;
            			}
HXLINE( 184)			days->push(start);
HXLINE( 185)			start = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::jump(start,::thx::TimePeriod_obj::Day_dyn(),(int)1);
            		}
            		_hx_goto_2:;
HXLINE( 187)		days->push(end);
HXLINE( 188)		return days;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,daysRange,return )

Int DateTimeUtc_Impl__obj::getDatePart( ::cpp::Int64Struct this1,Int part){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","getDatePart",0x0c52f478,"thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart","thx/DateTimeUtc.hx",191,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(part,"part")
HXLINE( 192)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerDayI64;
HXDLIN( 192)		Bool _hx_tmp = _hx_int64_is_zero(this1);
HXDLIN( 192)		if (_hx_tmp) {
HXLINE( 192)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 192)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_div(this1,b);
HXDLIN( 192)		Int _hx_tmp1 = _hx_int64_high(x);
HXDLIN( 192)		Int _hx_tmp2 = _hx_int64_low(x);
HXDLIN( 192)		if ((_hx_tmp1 != ((int)_hx_tmp2 >> (int)(int)31))) {
HXLINE( 192)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 192)		HX_VARI( Int,n) = _hx_int64_low(x);
HXLINE( 193)		Float _hx_tmp3 = ((Float)n / (Float)::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysPer400Years);
HXDLIN( 193)		HX_VARI( Int,y400) = ::Std_obj::_hx_int(_hx_tmp3);
HXLINE( 194)		hx::SubEq(n,(y400 * ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysPer400Years));
HXLINE( 195)		Float _hx_tmp4 = ((Float)n / (Float)::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysPer100Years);
HXDLIN( 195)		HX_VARI( Int,y100) = ::Std_obj::_hx_int(_hx_tmp4);
HXLINE( 196)		Bool _hx_tmp5 = (y100 == (int)4);
HXDLIN( 196)		if (_hx_tmp5) {
HXLINE( 197)			y100 = (int)3;
            		}
HXLINE( 198)		hx::SubEq(n,(y100 * ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysPer100Years));
HXLINE( 199)		Float _hx_tmp6 = ((Float)n / (Float)::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysPer4Years);
HXDLIN( 199)		HX_VARI( Int,y4) = ::Std_obj::_hx_int(_hx_tmp6);
HXLINE( 200)		hx::SubEq(n,(y4 * ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysPer4Years));
HXLINE( 201)		Float _hx_tmp7 = ((Float)n / (Float)::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysPerYear);
HXDLIN( 201)		HX_VARI( Int,y1) = ::Std_obj::_hx_int(_hx_tmp7);
HXLINE( 202)		Bool _hx_tmp8 = (y1 == (int)4);
HXDLIN( 202)		if (_hx_tmp8) {
HXLINE( 203)			y1 = (int)3;
            		}
HXLINE( 204)		if ((part == ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR)) {
HXLINE( 205)			return (((((y400 * (int)400) + (y100 * (int)100)) + (y4 * (int)4)) + y1) + (int)1);
            		}
HXLINE( 207)		hx::SubEq(n,(y1 * ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysPerYear));
HXLINE( 208)		if ((part == ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY_OF_YEAR)) {
HXLINE( 209)			return (n + (int)1);
            		}
HXLINE( 210)		HX_VAR( Bool,leapYear);
HXDLIN( 210)		if ((y1 == (int)3)) {
HXLINE( 210)			if ((y4 == (int)24)) {
HXLINE( 210)				leapYear = (y100 == (int)3);
            			}
            			else {
HXLINE( 210)				leapYear = true;
            			}
            		}
            		else {
HXLINE( 210)			leapYear = false;
            		}
HXDLIN( 210)		HX_VAR( ::Array< Int >,days);
HXLINE( 211)		if (leapYear) {
HXLINE( 210)			days = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysToMonth366;
            		}
            		else {
HXLINE( 210)			days = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysToMonth365;
            		}
HXDLIN( 210)		HX_VARI( Int,m) = ((int)n >> (int)(int)6);
HXLINE( 213)		while((n >= days->__get(m))){
HXLINE( 214)			++m;
            		}
HXLINE( 215)		if ((part == ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH)) {
HXLINE( 216)			return m;
            		}
HXLINE( 217)		return ((n - days->__get((m - (int)1))) + (int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,getDatePart,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::_new( ::cpp::Int64Struct ticks){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","_new",0x721df2c0,"thx._DateTimeUtc.DateTimeUtc_Impl_._new","thx/DateTimeUtc.hx",220,0x6fdd0860)
            	HX_STACK_ARG(ticks,"ticks")
HXLINE( 220)		return ticks;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,_new,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::min( ::cpp::Int64Struct this1, ::cpp::Int64Struct other){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","min",0x8dc14513,"thx._DateTimeUtc.DateTimeUtc_Impl_.min","thx/DateTimeUtc.hx",243,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 243)		Int _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::compareTo(this1,other);
HXDLIN( 243)		if ((_hx_tmp <= (int)0)) {
HXLINE( 243)			return this1;
            		}
            		else {
HXLINE( 243)			return other;
            		}
HXDLIN( 243)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,min,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::max( ::cpp::Int64Struct this1, ::cpp::Int64Struct other){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","max",0x8dc13e25,"thx._DateTimeUtc.DateTimeUtc_Impl_.max","thx/DateTimeUtc.hx",246,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 246)		Int _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::compareTo(this1,other);
HXDLIN( 246)		if ((_hx_tmp >= (int)0)) {
HXLINE( 246)			return this1;
            		}
            		else {
HXLINE( 246)			return other;
            		}
HXDLIN( 246)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,max,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::jump( ::cpp::Int64Struct this1,::hx::EnumBase period,Int amount){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","jump",0x7968a24d,"thx._DateTimeUtc.DateTimeUtc_Impl_.jump","thx/DateTimeUtc.hx",256,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(period,"period")
            	HX_STACK_ARG(amount,"amount")
HXLINE( 257)		HX_VARI( Int,sec) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_second(this1);
HXDLIN( 257)		HX_VARI( Int,min) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_minute(this1);
HXDLIN( 257)		HX_VARI( Int,hr) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_hour(this1);
HXDLIN( 257)		HX_VARI( Int,day) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN( 257)		HX_VARI( Int,mon) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 257)		HX_VARI( Int,yr) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXLINE( 264)		Int _hx_tmp = ( ( ::hx::EnumBase)(period) )->_hx_getIndex();
HXDLIN( 264)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE( 265)				hx::AddEq(sec,amount);
            			}
            			break;
            			case (int)1: {
HXLINE( 266)				hx::AddEq(min,amount);
            			}
            			break;
            			case (int)2: {
HXLINE( 267)				hx::AddEq(hr,amount);
            			}
            			break;
            			case (int)3: {
HXLINE( 268)				hx::AddEq(day,amount);
            			}
            			break;
            			case (int)4: {
HXLINE( 269)				hx::AddEq(day,(amount * (int)7));
            			}
            			break;
            			case (int)5: {
HXLINE( 270)				hx::AddEq(mon,amount);
            			}
            			break;
            			case (int)6: {
HXLINE( 271)				hx::AddEq(yr,amount);
            			}
            			break;
            		}
HXLINE( 274)		Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_millisecond(this1);
HXDLIN( 274)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(yr,mon,day,hr,min,sec,_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(DateTimeUtc_Impl__obj,jump,return )

Int DateTimeUtc_Impl__obj::daysInThisMonth( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","daysInThisMonth",0x6c64d307,"thx._DateTimeUtc.DateTimeUtc_Impl_.daysInThisMonth","thx/DateTimeUtc.hx",283,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 283)		Int _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 283)		Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 283)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysInMonth(_hx_tmp,_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,daysInThisMonth,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::prevYear( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","prevYear",0xe458232f,"thx._DateTimeUtc.DateTimeUtc_Impl_.prevYear","thx/DateTimeUtc.hx",289,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 289)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::jump(this1,::thx::TimePeriod_obj::Year_dyn(),(int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,prevYear,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::nextYear( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","nextYear",0xc756e92f,"thx._DateTimeUtc.DateTimeUtc_Impl_.nextYear","thx/DateTimeUtc.hx",295,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 295)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::jump(this1,::thx::TimePeriod_obj::Year_dyn(),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,nextYear,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::prevMonth( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","prevMonth",0x069db18e,"thx._DateTimeUtc.DateTimeUtc_Impl_.prevMonth","thx/DateTimeUtc.hx",301,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 301)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::jump(this1,::thx::TimePeriod_obj::Month_dyn(),(int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,prevMonth,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::nextMonth( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","nextMonth",0xc28c2b8e,"thx._DateTimeUtc.DateTimeUtc_Impl_.nextMonth","thx/DateTimeUtc.hx",307,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 307)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::jump(this1,::thx::TimePeriod_obj::Month_dyn(),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,nextMonth,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::prevWeek( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","prevWeek",0xe305b966,"thx._DateTimeUtc.DateTimeUtc_Impl_.prevWeek","thx/DateTimeUtc.hx",313,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 313)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::jump(this1,::thx::TimePeriod_obj::Week_dyn(),(int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,prevWeek,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::nextWeek( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","nextWeek",0xc6047f66,"thx._DateTimeUtc.DateTimeUtc_Impl_.nextWeek","thx/DateTimeUtc.hx",319,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 319)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::jump(this1,::thx::TimePeriod_obj::Week_dyn(),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,nextWeek,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::prevDay( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","prevDay",0xce73512a,"thx._DateTimeUtc.DateTimeUtc_Impl_.prevDay","thx/DateTimeUtc.hx",325,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 325)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::jump(this1,::thx::TimePeriod_obj::Day_dyn(),(int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,prevDay,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::nextDay( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","nextDay",0x37ef4b2a,"thx._DateTimeUtc.DateTimeUtc_Impl_.nextDay","thx/DateTimeUtc.hx",331,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 331)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::jump(this1,::thx::TimePeriod_obj::Day_dyn(),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,nextDay,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::prevHour( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","prevHour",0xd9232a96,"thx._DateTimeUtc.DateTimeUtc_Impl_.prevHour","thx/DateTimeUtc.hx",337,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 337)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::jump(this1,::thx::TimePeriod_obj::Hour_dyn(),(int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,prevHour,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::nextHour( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","nextHour",0xbc21f096,"thx._DateTimeUtc.DateTimeUtc_Impl_.nextHour","thx/DateTimeUtc.hx",343,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 343)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::jump(this1,::thx::TimePeriod_obj::Hour_dyn(),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,nextHour,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::prevMinute( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","prevMinute",0x4ef6fcc6,"thx._DateTimeUtc.DateTimeUtc_Impl_.prevMinute","thx/DateTimeUtc.hx",349,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 349)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::jump(this1,::thx::TimePeriod_obj::Minute_dyn(),(int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,prevMinute,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::nextMinute( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","nextMinute",0x03b342c6,"thx._DateTimeUtc.DateTimeUtc_Impl_.nextMinute","thx/DateTimeUtc.hx",355,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 355)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::jump(this1,::thx::TimePeriod_obj::Minute_dyn(),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,nextMinute,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::prevSecond( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","prevSecond",0x6036e966,"thx._DateTimeUtc.DateTimeUtc_Impl_.prevSecond","thx/DateTimeUtc.hx",361,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 361)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::jump(this1,::thx::TimePeriod_obj::Second_dyn(),(int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,prevSecond,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::nextSecond( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","nextSecond",0x14f32f66,"thx._DateTimeUtc.DateTimeUtc_Impl_.nextSecond","thx/DateTimeUtc.hx",367,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 367)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::jump(this1,::thx::TimePeriod_obj::Second_dyn(),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,nextSecond,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::snapToWeekDay( ::cpp::Int64Struct this1,Int weekday, ::Dynamic __o_firstDayOfWk){
 ::Dynamic firstDayOfWk = __o_firstDayOfWk.Default(0);
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","snapToWeekDay",0xa347a5a4,"thx._DateTimeUtc.DateTimeUtc_Impl_.snapToWeekDay","thx/DateTimeUtc.hx",377,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(weekday,"weekday")
            	HX_STACK_ARG(firstDayOfWk,"firstDayOfWk")
HXLINE( 378)		HX_VARI( Int,d) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_dayOfWeek(this1);
HXDLIN( 378)		HX_VARI( Int,s) = weekday;
HXLINE( 382)		Bool _hx_tmp = hx::IsLess( s,firstDayOfWk );
HXDLIN( 382)		if (_hx_tmp) {
HXLINE( 382)			hx::AddEq(s,(int)7);
            		}
HXLINE( 383)		Bool _hx_tmp1 = hx::IsLess( d,firstDayOfWk );
HXDLIN( 383)		if (_hx_tmp1) {
HXLINE( 383)			hx::AddEq(d,(int)7);
            		}
HXLINE( 384)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::jump(this1,::thx::TimePeriod_obj::Day_dyn(),(s - d));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(DateTimeUtc_Impl__obj,snapToWeekDay,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::snapNextWeekDay( ::cpp::Int64Struct this1,Int weekday){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","snapNextWeekDay",0x1e0818ec,"thx._DateTimeUtc.DateTimeUtc_Impl_.snapNextWeekDay","thx/DateTimeUtc.hx",394,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(weekday,"weekday")
HXLINE( 395)		HX_VARI( Int,d) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_dayOfWeek(this1);
HXDLIN( 395)		HX_VARI( Int,s) = weekday;
HXLINE( 399)		Bool _hx_tmp = (s < d);
HXDLIN( 399)		if (_hx_tmp) {
HXLINE( 399)			hx::AddEq(s,(int)7);
            		}
HXLINE( 400)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::jump(this1,::thx::TimePeriod_obj::Day_dyn(),(s - d));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,snapNextWeekDay,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::snapPrevWeekDay( ::cpp::Int64Struct this1,Int weekday){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","snapPrevWeekDay",0xae071eec,"thx._DateTimeUtc.DateTimeUtc_Impl_.snapPrevWeekDay","thx/DateTimeUtc.hx",410,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(weekday,"weekday")
HXLINE( 411)		HX_VARI( Int,d) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_dayOfWeek(this1);
HXDLIN( 411)		HX_VARI( Int,s) = weekday;
HXLINE( 415)		Bool _hx_tmp = (s > d);
HXDLIN( 415)		if (_hx_tmp) {
HXLINE( 415)			hx::SubEq(s,(int)7);
            		}
HXLINE( 416)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::jump(this1,::thx::TimePeriod_obj::Day_dyn(),(s - d));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,snapPrevWeekDay,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::snapNext( ::cpp::Int64Struct this1,::hx::EnumBase period){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","snapNext",0xd47f6d3c,"thx._DateTimeUtc.DateTimeUtc_Impl_.snapNext","thx/DateTimeUtc.hx",425,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(period,"period")
HXLINE( 425)		Int _hx_tmp = ( ( ::hx::EnumBase)(period) )->_hx_getIndex();
HXDLIN( 425)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE( 427)				HX_VARI(  ::cpp::Int64Struct,a) = ::thx::Int64s_obj::divCeil(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64);
HXDLIN( 427)				HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 427)				HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_mul(a,b);
HXLINE( 425)				return ticks;
            			}
            			break;
            			case (int)1: {
HXLINE( 429)				HX_VARI_NAME(  ::cpp::Int64Struct,a1,"a") = ::thx::Int64s_obj::divCeil(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMinuteI64);
HXDLIN( 429)				HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMinuteI64;
HXDLIN( 429)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks1,"ticks") = _hx_int64_mul(a1,b1);
HXLINE( 425)				return ticks1;
            			}
            			break;
            			case (int)2: {
HXLINE( 431)				HX_VARI_NAME(  ::cpp::Int64Struct,a2,"a") = ::thx::Int64s_obj::divCeil(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64);
HXDLIN( 431)				HX_VARI_NAME(  ::cpp::Int64Struct,b2,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN( 431)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks2,"ticks") = _hx_int64_mul(a2,b2);
HXLINE( 425)				return ticks2;
            			}
            			break;
            			case (int)3: {
HXLINE( 433)				Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 433)				Int _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 433)				Int _hx_tmp3 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXLINE( 425)				return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(_hx_tmp1,_hx_tmp2,(_hx_tmp3 + (int)1),(int)0,(int)0,(int)0,null());
            			}
            			break;
            			case (int)4: {
HXLINE( 435)				HX_VARI( Int,wd) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_dayOfWeek(this1);
HXLINE( 436)				Int _hx_tmp4 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 436)				Int _hx_tmp5 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 436)				Int _hx_tmp6 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXLINE( 425)				return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(_hx_tmp4,_hx_tmp5,((_hx_tmp6 + (int)7) - wd),(int)0,(int)0,(int)0,null());
            			}
            			break;
            			case (int)5: {
HXLINE( 438)				Int _hx_tmp7 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 438)				Int _hx_tmp8 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXLINE( 425)				return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(_hx_tmp7,(_hx_tmp8 + (int)1),(int)1,(int)0,(int)0,(int)0,null());
            			}
            			break;
            			case (int)6: {
HXLINE( 440)				Int _hx_tmp9 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXLINE( 425)				return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create((_hx_tmp9 + (int)1),(int)1,(int)1,(int)0,(int)0,(int)0,null());
            			}
            			break;
            		}
HXDLIN( 425)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,snapNext,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::snapPrev( ::cpp::Int64Struct this1,::hx::EnumBase period){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","snapPrev",0xd5dba73c,"thx._DateTimeUtc.DateTimeUtc_Impl_.snapPrev","thx/DateTimeUtc.hx",449,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(period,"period")
HXLINE( 449)		Int _hx_tmp = ( ( ::hx::EnumBase)(period) )->_hx_getIndex();
HXDLIN( 449)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE( 451)				HX_VARI(  ::cpp::Int64Struct,a) = ::thx::Int64s_obj::divFloor(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64);
HXDLIN( 451)				HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 451)				HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_mul(a,b);
HXLINE( 449)				return ticks;
            			}
            			break;
            			case (int)1: {
HXLINE( 453)				HX_VARI_NAME(  ::cpp::Int64Struct,a1,"a") = ::thx::Int64s_obj::divFloor(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMinuteI64);
HXDLIN( 453)				HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMinuteI64;
HXDLIN( 453)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks1,"ticks") = _hx_int64_mul(a1,b1);
HXLINE( 449)				return ticks1;
            			}
            			break;
            			case (int)2: {
HXLINE( 455)				HX_VARI_NAME(  ::cpp::Int64Struct,a2,"a") = ::thx::Int64s_obj::divFloor(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64);
HXDLIN( 455)				HX_VARI_NAME(  ::cpp::Int64Struct,b2,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN( 455)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks2,"ticks") = _hx_int64_mul(a2,b2);
HXLINE( 449)				return ticks2;
            			}
            			break;
            			case (int)3: {
HXLINE( 457)				Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 457)				Int _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 457)				Int _hx_tmp3 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXLINE( 449)				return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(_hx_tmp1,_hx_tmp2,_hx_tmp3,(int)0,(int)0,(int)0,null());
            			}
            			break;
            			case (int)4: {
HXLINE( 459)				HX_VARI( Int,wd) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_dayOfWeek(this1);
HXLINE( 460)				Int _hx_tmp4 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 460)				Int _hx_tmp5 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 460)				Int _hx_tmp6 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXLINE( 449)				return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(_hx_tmp4,_hx_tmp5,(_hx_tmp6 - wd),(int)0,(int)0,(int)0,null());
            			}
            			break;
            			case (int)5: {
HXLINE( 462)				Int _hx_tmp7 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 462)				Int _hx_tmp8 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXLINE( 449)				return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(_hx_tmp7,_hx_tmp8,(int)1,(int)0,(int)0,(int)0,null());
            			}
            			break;
            			case (int)6: {
HXLINE( 464)				Int _hx_tmp9 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXLINE( 449)				return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(_hx_tmp9,(int)1,(int)1,(int)0,(int)0,(int)0,null());
            			}
            			break;
            		}
HXDLIN( 449)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,snapPrev,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::snapTo( ::cpp::Int64Struct this1,::hx::EnumBase period){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","snapTo",0xa8097984,"thx._DateTimeUtc.DateTimeUtc_Impl_.snapTo","thx/DateTimeUtc.hx",473,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(period,"period")
HXLINE( 473)		Int _hx_tmp = ( ( ::hx::EnumBase)(period) )->_hx_getIndex();
HXDLIN( 473)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE( 475)				HX_VARI(  ::cpp::Int64Struct,a) = ::thx::Int64s_obj::divRound(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64);
HXDLIN( 475)				HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 475)				HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_mul(a,b);
HXLINE( 473)				return ticks;
            			}
            			break;
            			case (int)1: {
HXLINE( 477)				HX_VARI_NAME(  ::cpp::Int64Struct,a1,"a") = ::thx::Int64s_obj::divRound(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMinuteI64);
HXDLIN( 477)				HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMinuteI64;
HXDLIN( 477)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks1,"ticks") = _hx_int64_mul(a1,b1);
HXLINE( 473)				return ticks1;
            			}
            			break;
            			case (int)2: {
HXLINE( 479)				HX_VARI_NAME(  ::cpp::Int64Struct,a2,"a") = ::thx::Int64s_obj::divRound(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64);
HXDLIN( 479)				HX_VARI_NAME(  ::cpp::Int64Struct,b2,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN( 479)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks2,"ticks") = _hx_int64_mul(a2,b2);
HXLINE( 473)				return ticks2;
            			}
            			break;
            			case (int)3: {
HXLINE( 481)				HX_VAR( Int,mod);
HXDLIN( 481)				Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_hour(this1);
HXDLIN( 481)				if ((_hx_tmp1 >= (int)12)) {
HXLINE( 481)					mod = (int)1;
            				}
            				else {
HXLINE( 481)					mod = (int)0;
            				}
HXLINE( 482)				Int _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 482)				Int _hx_tmp3 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 482)				Int _hx_tmp4 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXLINE( 473)				return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(_hx_tmp2,_hx_tmp3,(_hx_tmp4 + mod),(int)0,(int)0,(int)0,null());
            			}
            			break;
            			case (int)4: {
HXLINE( 484)				HX_VARI( Int,wd) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_dayOfWeek(this1);
HXDLIN( 484)				HX_VAR_NAME( Int,mod1,"mod");
HXLINE( 485)				if ((wd < (int)3)) {
HXLINE( 484)					mod1 = -(wd);
            				}
            				else {
HXLINE( 485)					if ((wd > (int)3)) {
HXLINE( 484)						mod1 = ((int)7 - wd);
            					}
            					else {
HXLINE( 485)						Int _hx_tmp5 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_hour(this1);
HXDLIN( 485)						if ((_hx_tmp5 < (int)12)) {
HXLINE( 484)							mod1 = -(wd);
            						}
            						else {
HXLINE( 484)							mod1 = ((int)7 - wd);
            						}
            					}
            				}
HXLINE( 486)				Int _hx_tmp6 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 486)				Int _hx_tmp7 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 486)				Int _hx_tmp8 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXLINE( 473)				return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(_hx_tmp6,_hx_tmp7,(_hx_tmp8 + mod1),(int)0,(int)0,(int)0,null());
            			}
            			break;
            			case (int)5: {
HXLINE( 488)				HX_VAR_NAME( Int,mod2,"mod");
HXDLIN( 488)				Int _hx_tmp9 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN( 488)				Int _hx_tmp10 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 488)				Int _hx_tmp11 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 488)				Int _hx_tmp12 = ::Math_obj::round(((Float)::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysInMonth(_hx_tmp10,_hx_tmp11) / (Float)(int)2));
HXDLIN( 488)				if ((_hx_tmp9 > _hx_tmp12)) {
HXLINE( 488)					mod2 = (int)1;
            				}
            				else {
HXLINE( 488)					mod2 = (int)0;
            				}
HXLINE( 489)				Int _hx_tmp13 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 489)				Int _hx_tmp14 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXLINE( 473)				return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(_hx_tmp13,(_hx_tmp14 + mod2),(int)1,(int)0,(int)0,(int)0,null());
            			}
            			break;
            			case (int)6: {
HXLINE( 491)				HX_VAR_NAME( Int,mod3,"mod");
HXDLIN( 491)				Int _hx_tmp15 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 491)				HX_VARI(  ::cpp::Int64Struct,that) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(_hx_tmp15,(int)6,(int)2,(int)0,(int)0,(int)0,null());
HXDLIN( 491)				Int _hx_tmp16 = _hx_int64_compare(this1,that);
HXDLIN( 491)				if ((_hx_tmp16 > (int)0)) {
HXLINE( 491)					mod3 = (int)1;
            				}
            				else {
HXLINE( 491)					mod3 = (int)0;
            				}
HXLINE( 492)				Int _hx_tmp17 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXLINE( 473)				return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create((_hx_tmp17 + mod3),(int)1,(int)1,(int)0,(int)0,(int)0,null());
            			}
            			break;
            		}
HXDLIN( 473)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,snapTo,return )

Bool DateTimeUtc_Impl__obj::sameYear( ::cpp::Int64Struct this1, ::cpp::Int64Struct other){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","sameYear",0x360d9d22,"thx._DateTimeUtc.DateTimeUtc_Impl_.sameYear","thx/DateTimeUtc.hx",499,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 499)		Int _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 499)		Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(other,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 499)		return (_hx_tmp == _hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,sameYear,return )

Bool DateTimeUtc_Impl__obj::sameMonth( ::cpp::Int64Struct this1, ::cpp::Int64Struct other){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","sameMonth",0x33b2ec3b,"thx._DateTimeUtc.DateTimeUtc_Impl_.sameMonth","thx/DateTimeUtc.hx",505,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 505)		Bool _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::sameYear(this1,other);
HXDLIN( 505)		if (_hx_tmp) {
HXLINE( 505)			Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 505)			Int _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(other,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 505)			return (_hx_tmp1 == _hx_tmp2);
            		}
            		else {
HXLINE( 505)			return false;
            		}
HXDLIN( 505)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,sameMonth,return )

Bool DateTimeUtc_Impl__obj::sameDay( ::cpp::Int64Struct this1, ::cpp::Int64Struct other){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","sameDay",0x0f1a9697,"thx._DateTimeUtc.DateTimeUtc_Impl_.sameDay","thx/DateTimeUtc.hx",511,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 511)		Bool _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::sameMonth(this1,other);
HXDLIN( 511)		if (_hx_tmp) {
HXLINE( 511)			Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN( 511)			Int _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(other,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN( 511)			return (_hx_tmp1 == _hx_tmp2);
            		}
            		else {
HXLINE( 511)			return false;
            		}
HXDLIN( 511)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,sameDay,return )

Bool DateTimeUtc_Impl__obj::sameHour( ::cpp::Int64Struct this1, ::cpp::Int64Struct other){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","sameHour",0x2ad8a489,"thx._DateTimeUtc.DateTimeUtc_Impl_.sameHour","thx/DateTimeUtc.hx",517,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 517)		Bool _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::sameDay(this1,other);
HXDLIN( 517)		if (_hx_tmp) {
HXLINE( 517)			Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_hour(this1);
HXDLIN( 517)			Int _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_hour(other);
HXDLIN( 517)			return (_hx_tmp1 == _hx_tmp2);
            		}
            		else {
HXLINE( 517)			return false;
            		}
HXDLIN( 517)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,sameHour,return )

Bool DateTimeUtc_Impl__obj::sameMinute( ::cpp::Int64Struct this1, ::cpp::Int64Struct other){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","sameMinute",0x94751979,"thx._DateTimeUtc.DateTimeUtc_Impl_.sameMinute","thx/DateTimeUtc.hx",523,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 523)		Bool _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::sameHour(this1,other);
HXDLIN( 523)		if (_hx_tmp) {
HXLINE( 523)			Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_minute(this1);
HXDLIN( 523)			Int _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_minute(other);
HXDLIN( 523)			return (_hx_tmp1 == _hx_tmp2);
            		}
            		else {
HXLINE( 523)			return false;
            		}
HXDLIN( 523)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,sameMinute,return )

Bool DateTimeUtc_Impl__obj::sameSecond( ::cpp::Int64Struct this1, ::cpp::Int64Struct other){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","sameSecond",0xa5b50619,"thx._DateTimeUtc.DateTimeUtc_Impl_.sameSecond","thx/DateTimeUtc.hx",529,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 529)		Bool _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::sameMinute(this1,other);
HXDLIN( 529)		if (_hx_tmp) {
HXLINE( 529)			Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_second(this1);
HXDLIN( 529)			Int _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_second(other);
HXDLIN( 529)			return (_hx_tmp1 == _hx_tmp2);
            		}
            		else {
HXLINE( 529)			return false;
            		}
HXDLIN( 529)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,sameSecond,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::withYear( ::cpp::Int64Struct this1,Int year){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","withYear",0xee365fc2,"thx._DateTimeUtc.DateTimeUtc_Impl_.withYear","thx/DateTimeUtc.hx",532,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(year,"year")
HXLINE( 532)		Int _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 532)		Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN( 532)		Int _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_hour(this1);
HXDLIN( 532)		Int _hx_tmp3 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_minute(this1);
HXDLIN( 532)		Int _hx_tmp4 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_second(this1);
HXDLIN( 532)		Int _hx_tmp5 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_millisecond(this1);
HXDLIN( 532)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(year,_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,withYear,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::withMonth( ::cpp::Int64Struct this1,Int month){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","withMonth",0x9f34759b,"thx._DateTimeUtc.DateTimeUtc_Impl_.withMonth","thx/DateTimeUtc.hx",535,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(month,"month")
HXLINE( 535)		Int _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 535)		Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN( 535)		Int _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_hour(this1);
HXDLIN( 535)		Int _hx_tmp3 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_minute(this1);
HXDLIN( 535)		Int _hx_tmp4 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_second(this1);
HXDLIN( 535)		Int _hx_tmp5 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_millisecond(this1);
HXDLIN( 535)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(_hx_tmp,month,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,withMonth,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::withDay( ::cpp::Int64Struct this1,Int day){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","withDay",0xf21507f7,"thx._DateTimeUtc.DateTimeUtc_Impl_.withDay","thx/DateTimeUtc.hx",538,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(day,"day")
HXLINE( 538)		Int _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 538)		Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 538)		Int _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_hour(this1);
HXDLIN( 538)		Int _hx_tmp3 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_minute(this1);
HXDLIN( 538)		Int _hx_tmp4 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_second(this1);
HXDLIN( 538)		Int _hx_tmp5 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_millisecond(this1);
HXDLIN( 538)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(_hx_tmp,_hx_tmp1,day,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,withDay,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::withHour( ::cpp::Int64Struct this1,Int hour){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","withHour",0xe3016729,"thx._DateTimeUtc.DateTimeUtc_Impl_.withHour","thx/DateTimeUtc.hx",541,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(hour,"hour")
HXLINE( 541)		Int _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 541)		Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 541)		Int _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN( 541)		Int _hx_tmp3 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_minute(this1);
HXDLIN( 541)		Int _hx_tmp4 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_second(this1);
HXDLIN( 541)		Int _hx_tmp5 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_millisecond(this1);
HXDLIN( 541)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(_hx_tmp,_hx_tmp1,_hx_tmp2,hour,_hx_tmp3,_hx_tmp4,_hx_tmp5);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,withHour,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::withMinute( ::cpp::Int64Struct this1,Int minute){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","withMinute",0x3a4bc419,"thx._DateTimeUtc.DateTimeUtc_Impl_.withMinute","thx/DateTimeUtc.hx",544,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(minute,"minute")
HXLINE( 544)		Int _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 544)		Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 544)		Int _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN( 544)		Int _hx_tmp3 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_hour(this1);
HXDLIN( 544)		Int _hx_tmp4 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_second(this1);
HXDLIN( 544)		Int _hx_tmp5 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_millisecond(this1);
HXDLIN( 544)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,minute,_hx_tmp4,_hx_tmp5);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,withMinute,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::withSecond( ::cpp::Int64Struct this1,Int second){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","withSecond",0x4b8bb0b9,"thx._DateTimeUtc.DateTimeUtc_Impl_.withSecond","thx/DateTimeUtc.hx",547,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(second,"second")
HXLINE( 547)		Int _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 547)		Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 547)		Int _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN( 547)		Int _hx_tmp3 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_hour(this1);
HXDLIN( 547)		Int _hx_tmp4 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_minute(this1);
HXDLIN( 547)		Int _hx_tmp5 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_millisecond(this1);
HXDLIN( 547)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,second,_hx_tmp5);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,withSecond,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::withMillisecond( ::cpp::Int64Struct this1,Int millisecond){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","withMillisecond",0x17a12fdc,"thx._DateTimeUtc.DateTimeUtc_Impl_.withMillisecond","thx/DateTimeUtc.hx",550,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(millisecond,"millisecond")
HXLINE( 550)		Int _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 550)		Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 550)		Int _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN( 550)		Int _hx_tmp3 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_hour(this1);
HXDLIN( 550)		Int _hx_tmp4 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_minute(this1);
HXDLIN( 550)		Int _hx_tmp5 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_second(this1);
HXDLIN( 550)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,millisecond);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,withMillisecond,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::add( ::cpp::Int64Struct this1, ::cpp::Int64Struct time){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","add",0x8db825a2,"thx._DateTimeUtc.DateTimeUtc_Impl_.add","thx/DateTimeUtc.hx",553,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(time,"time")
HXLINE( 553)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1,time);
HXDLIN( 553)		return ticks;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,add,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::addTicks( ::cpp::Int64Struct this1, ::cpp::Int64Struct tickstoadd){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","addTicks",0x54cdcd74,"thx._DateTimeUtc.DateTimeUtc_Impl_.addTicks","thx/DateTimeUtc.hx",556,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(tickstoadd,"tickstoadd")
HXLINE( 556)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1,tickstoadd);
HXDLIN( 556)		return ticks;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,addTicks,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::subtract( ::cpp::Int64Struct this1, ::cpp::Int64Struct time){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","subtract",0xc353edf3,"thx._DateTimeUtc.DateTimeUtc_Impl_.subtract","thx/DateTimeUtc.hx",559,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(time,"time")
HXLINE( 559)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_sub(this1,time);
HXDLIN( 559)		return ticks;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,subtract,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::subtractDate( ::cpp::Int64Struct this1, ::cpp::Int64Struct date){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","subtractDate",0x77e9e5c1,"thx._DateTimeUtc.DateTimeUtc_Impl_.subtractDate","thx/DateTimeUtc.hx",562,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(date,"date")
HXLINE( 562)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_sub(this1,date);
HXDLIN( 562)		return ticks;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,subtractDate,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::addScaled( ::cpp::Int64Struct this1,Float value,Int scale){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","addScaled",0x033169dc,"thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled","thx/DateTimeUtc.hx",564,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(scale,"scale")
HXLINE( 565)		Float _hx_tmp = (value * scale);
HXDLIN( 565)		Float _hx_tmp1;
HXDLIN( 565)		if ((value >= (int)0)) {
HXLINE( 565)			_hx_tmp1 = ((Float)0.5);
            		}
            		else {
HXLINE( 565)			_hx_tmp1 = ((Float)-0.5);
            		}
HXDLIN( 565)		HX_VARI( Int,x) = ::Std_obj::_hx_int((_hx_tmp + _hx_tmp1));
HXDLIN( 565)		HX_VARI(  ::cpp::Int64Struct,millis) = ( ::cpp::Int64Struct(x));
HXLINE( 566)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMillisecondI64;
HXDLIN( 566)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = _hx_int64_mul(millis,b);
HXDLIN( 566)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1,b1);
HXDLIN( 566)		return ticks;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(DateTimeUtc_Impl__obj,addScaled,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::addDays( ::cpp::Int64Struct this1,Float days){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","addDays",0x11552559,"thx._DateTimeUtc.DateTimeUtc_Impl_.addDays","thx/DateTimeUtc.hx",570,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(days,"days")
HXLINE( 570)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::addScaled(this1,days,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::millisPerDay);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,addDays,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::addHours( ::cpp::Int64Struct this1,Float hours){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","addHours",0x7003cdcd,"thx._DateTimeUtc.DateTimeUtc_Impl_.addHours","thx/DateTimeUtc.hx",573,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(hours,"hours")
HXLINE( 573)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::addScaled(this1,hours,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::millisPerHour);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,addHours,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::addMilliseconds( ::cpp::Int64Struct this1,Int milliseconds){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","addMilliseconds",0xc6fa6ad4,"thx._DateTimeUtc.DateTimeUtc_Impl_.addMilliseconds","thx/DateTimeUtc.hx",576,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(milliseconds,"milliseconds")
HXLINE( 576)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::addScaled(this1,milliseconds,(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,addMilliseconds,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::addMinutes( ::cpp::Int64Struct this1,Float minutes){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","addMinutes",0xb6e2719d,"thx._DateTimeUtc.DateTimeUtc_Impl_.addMinutes","thx/DateTimeUtc.hx",579,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(minutes,"minutes")
HXLINE( 579)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::addScaled(this1,minutes,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::millisPerMinute);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,addMinutes,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::addMonths( ::cpp::Int64Struct this1,Int months){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","addMonths",0x8e7a1075,"thx._DateTimeUtc.DateTimeUtc_Impl_.addMonths","thx/DateTimeUtc.hx",581,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(months,"months")
HXLINE( 582)		HX_VARI( Int,y) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 582)		HX_VARI( Int,m) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 582)		HX_VARI( Int,d) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN( 582)		HX_VARI( Int,i) = ((m - (int)1) + months);
HXLINE( 586)		if ((i >= (int)0)) {
HXLINE( 587)			m = ::Std_obj::_hx_int((hx::Mod(i,(int)12) + (int)1));
HXLINE( 588)			y = ::Std_obj::_hx_int((y + ((Float)i / (Float)(int)12)));
            		}
            		else {
HXLINE( 590)			m = ::Std_obj::_hx_int(((int)12 + hx::Mod((i + (int)1),(int)12)));
HXLINE( 591)			y = ::Std_obj::_hx_int((y + ((Float)(i - (int)11) / (Float)(int)12)));
            		}
HXLINE( 593)		HX_VARI( Int,days) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysInMonth(y,m);
HXLINE( 594)		Bool _hx_tmp = (d > days);
HXDLIN( 594)		if (_hx_tmp) {
HXLINE( 595)			d = days;
            		}
HXLINE( 596)		HX_VARI(  ::cpp::Int64Struct,a) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::dateToTicks(y,m,d);
HXDLIN( 596)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerDayI64;
HXDLIN( 596)		Bool _hx_tmp1 = _hx_int64_is_zero(this1);
HXDLIN( 596)		if (_hx_tmp1) {
HXLINE( 596)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 596)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = _hx_int64_mod(this1,b);
HXDLIN( 596)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(a,b1);
HXDLIN( 596)		return ticks;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,addMonths,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::addSeconds( ::cpp::Int64Struct this1,Float seconds){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","addSeconds",0xbd9190fd,"thx._DateTimeUtc.DateTimeUtc_Impl_.addSeconds","thx/DateTimeUtc.hx",600,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(seconds,"seconds")
HXLINE( 600)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::addScaled(this1,seconds,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::millisPerSecond);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,addSeconds,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::addYears( ::cpp::Int64Struct this1,Int years){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","addYears",0x33285b14,"thx._DateTimeUtc.DateTimeUtc_Impl_.addYears","thx/DateTimeUtc.hx",603,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(years,"years")
HXLINE( 603)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::addMonths(this1,(years * (int)12));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,addYears,return )

Int DateTimeUtc_Impl__obj::compareTo( ::cpp::Int64Struct this1, ::cpp::Int64Struct other){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","compareTo",0x1143dfc1,"thx._DateTimeUtc.DateTimeUtc_Impl_.compareTo","thx/DateTimeUtc.hx",611,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 611)		return ::thx::Int64s_obj::compare(this1,other);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,compareTo,return )

Bool DateTimeUtc_Impl__obj::equalsTo( ::cpp::Int64Struct this1, ::cpp::Int64Struct that){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","equalsTo",0xa07cfe79,"thx._DateTimeUtc.DateTimeUtc_Impl_.equalsTo","thx/DateTimeUtc.hx",615,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 615)		return _hx_int64_eq(this1,that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,equalsTo,return )

Bool DateTimeUtc_Impl__obj::equals( ::cpp::Int64Struct self, ::cpp::Int64Struct that){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","equals",0xd66b215e,"thx._DateTimeUtc.DateTimeUtc_Impl_.equals","thx/DateTimeUtc.hx",619,0x6fdd0860)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 619)		return _hx_int64_eq(self,that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,equals,return )

Bool DateTimeUtc_Impl__obj::notEqualsTo( ::cpp::Int64Struct this1, ::cpp::Int64Struct that){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","notEqualsTo",0x132b024e,"thx._DateTimeUtc.DateTimeUtc_Impl_.notEqualsTo","thx/DateTimeUtc.hx",622,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 622)		return _hx_int64_neq(this1,that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,notEqualsTo,return )

Bool DateTimeUtc_Impl__obj::notEquals( ::cpp::Int64Struct self, ::cpp::Int64Struct that){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","notEquals",0x4bc315f3,"thx._DateTimeUtc.DateTimeUtc_Impl_.notEquals","thx/DateTimeUtc.hx",626,0x6fdd0860)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 626)		return _hx_int64_neq(self,that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,notEquals,return )

Bool DateTimeUtc_Impl__obj::nearEqualsTo( ::cpp::Int64Struct this1, ::cpp::Int64Struct other, ::cpp::Int64Struct span){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","nearEqualsTo",0xa2dfaf01,"thx._DateTimeUtc.DateTimeUtc_Impl_.nearEqualsTo","thx/DateTimeUtc.hx",628,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(span,"span")
HXLINE( 629)		HX_VARI(  ::cpp::Int64Struct,ticks) = ::thx::Int64s_obj::abs(_hx_int64_sub(other,this1));
HXLINE( 630)		HX_VARI_NAME(  ::cpp::Int64Struct,this2,"this") = ::thx::_Time::Time_Impl__obj::abs(span);
HXDLIN( 630)		Int _hx_tmp = _hx_int64_compare(ticks,this2);
HXDLIN( 630)		return (_hx_tmp <= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(DateTimeUtc_Impl__obj,nearEqualsTo,return )

Bool DateTimeUtc_Impl__obj::greaterThan( ::cpp::Int64Struct this1, ::cpp::Int64Struct that){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","greaterThan",0x8449ddfc,"thx._DateTimeUtc.DateTimeUtc_Impl_.greaterThan","thx/DateTimeUtc.hx",634,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 634)		Int _hx_tmp = _hx_int64_compare(this1,that);
HXDLIN( 634)		return (_hx_tmp > (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,greaterThan,return )

Bool DateTimeUtc_Impl__obj::greater( ::cpp::Int64Struct self, ::cpp::Int64Struct that){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","greater",0x4a7518fb,"thx._DateTimeUtc.DateTimeUtc_Impl_.greater","thx/DateTimeUtc.hx",638,0x6fdd0860)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 638)		Int _hx_tmp = _hx_int64_compare(self,that);
HXDLIN( 638)		return (_hx_tmp > (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,greater,return )

Bool DateTimeUtc_Impl__obj::greaterEqualsTo( ::cpp::Int64Struct this1, ::cpp::Int64Struct that){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","greaterEqualsTo",0x6aeb4db5,"thx._DateTimeUtc.DateTimeUtc_Impl_.greaterEqualsTo","thx/DateTimeUtc.hx",641,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 641)		Int _hx_tmp = _hx_int64_compare(this1,that);
HXDLIN( 641)		return (_hx_tmp >= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,greaterEqualsTo,return )

Bool DateTimeUtc_Impl__obj::greaterEquals( ::cpp::Int64Struct self, ::cpp::Int64Struct that){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","greaterEquals",0xcd69e99a,"thx._DateTimeUtc.DateTimeUtc_Impl_.greaterEquals","thx/DateTimeUtc.hx",645,0x6fdd0860)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 645)		Int _hx_tmp = _hx_int64_compare(self,that);
HXDLIN( 645)		return (_hx_tmp >= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,greaterEquals,return )

Bool DateTimeUtc_Impl__obj::lessThan( ::cpp::Int64Struct this1, ::cpp::Int64Struct that){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","lessThan",0xbe76d839,"thx._DateTimeUtc.DateTimeUtc_Impl_.lessThan","thx/DateTimeUtc.hx",648,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 648)		Int _hx_tmp = _hx_int64_compare(this1,that);
HXDLIN( 648)		return (_hx_tmp < (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,lessThan,return )

Bool DateTimeUtc_Impl__obj::less( ::cpp::Int64Struct self, ::cpp::Int64Struct that){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","less",0x7aaef0b8,"thx._DateTimeUtc.DateTimeUtc_Impl_.less","thx/DateTimeUtc.hx",652,0x6fdd0860)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 652)		Int _hx_tmp = _hx_int64_compare(self,that);
HXDLIN( 652)		return (_hx_tmp < (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,less,return )

Bool DateTimeUtc_Impl__obj::lessEqualsTo( ::cpp::Int64Struct this1, ::cpp::Int64Struct that){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","lessEqualsTo",0x778eaa72,"thx._DateTimeUtc.DateTimeUtc_Impl_.lessEqualsTo","thx/DateTimeUtc.hx",655,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 655)		Int _hx_tmp = _hx_int64_compare(this1,that);
HXDLIN( 655)		return (_hx_tmp <= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,lessEqualsTo,return )

Bool DateTimeUtc_Impl__obj::lessEquals( ::cpp::Int64Struct self, ::cpp::Int64Struct that){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","lessEquals",0xa877ad17,"thx._DateTimeUtc.DateTimeUtc_Impl_.lessEquals","thx/DateTimeUtc.hx",659,0x6fdd0860)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 659)		Int _hx_tmp = _hx_int64_compare(self,that);
HXDLIN( 659)		return (_hx_tmp <= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,lessEquals,return )

Float DateTimeUtc_Impl__obj::toTime( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","toTime",0x992e6a47,"thx._DateTimeUtc.DateTimeUtc_Impl_.toTime","thx/DateTimeUtc.hx",662,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 662)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::unixEpochTicks;
HXDLIN( 662)		HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_sub(this1,b);
HXDLIN( 662)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMillisecondI64;
HXDLIN( 662)		Bool _hx_tmp = _hx_int64_is_zero(a);
HXDLIN( 662)		if (_hx_tmp) {
HXLINE( 662)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 662)		 ::cpp::Int64Struct _hx_tmp1 = _hx_int64_div(a,b1);
HXDLIN( 662)		return ::thx::Int64s_obj::toFloat(_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,toTime,return )

 ::Date DateTimeUtc_Impl__obj::toDate( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","toDate",0x8e94f468,"thx._DateTimeUtc.DateTimeUtc_Impl_.toDate","thx/DateTimeUtc.hx",668,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 668)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::unixEpochTicks;
HXDLIN( 668)		HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_sub(this1,b);
HXDLIN( 668)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMillisecondI64;
HXDLIN( 668)		Bool _hx_tmp = _hx_int64_is_zero(a);
HXDLIN( 668)		if (_hx_tmp) {
HXLINE( 668)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 668)		 ::cpp::Int64Struct _hx_tmp1 = _hx_int64_div(a,b1);
HXDLIN( 668)		Float _hx_tmp2 = ::thx::Int64s_obj::toFloat(_hx_tmp1);
HXDLIN( 668)		return ::Date_obj::fromTime(_hx_tmp2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,toDate,return )

::Array< ::Dynamic> DateTimeUtc_Impl__obj::toDateTime( ::cpp::Int64Struct this1, ::Dynamic offset){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","toDateTime",0x47a14095,"thx._DateTimeUtc.DateTimeUtc_Impl_.toDateTime","thx/DateTimeUtc.hx",672,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(offset,"offset")
HXLINE( 672)		HX_VAR_NAME( ::Array< ::Dynamic>,this2,"this");
HXDLIN( 672)		 ::cpp::Int64Struct _hx_tmp;
HXDLIN( 672)		if (hx::IsNull( offset )) {
HXLINE( 672)			_hx_tmp = ::thx::_Time::Time_Impl__obj::zero;
            		}
            		else {
HXLINE( 672)			_hx_tmp = offset;
            		}
HXDLIN( 672)		this2 = ::Array_obj< ::Dynamic>::__new(2)->init(0,this1)->init(1,_hx_tmp);
HXDLIN( 672)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTimeUtc_Impl__obj,toDateTime,return )

::Array< ::Dynamic> DateTimeUtc_Impl__obj::toLocalDateTime( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","toLocalDateTime",0xff8f306c,"thx._DateTimeUtc.DateTimeUtc_Impl_.toLocalDateTime","thx/DateTimeUtc.hx",675,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 675)		HX_VARI(  ::cpp::Int64Struct,offset) = ::thx::_DateTime::DateTime_Impl__obj::localOffset();
HXDLIN( 675)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,this1)->init(1,offset);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,toLocalDateTime,return )

::String DateTimeUtc_Impl__obj::toString( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","toString",0x03b1498b,"thx._DateTimeUtc.DateTimeUtc_Impl_.toString","thx/DateTimeUtc.hx",678,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 683)		 ::cpp::Int64Struct _hx_tmp = ::thx::Int64s_obj::abs(this1);
HXDLIN( 683)		HX_VARI(  ::cpp::Int64Struct,abs) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp);
HXLINE( 684)		HX_VAR( ::String,decimals);
HXDLIN( 684)		Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_tickInSecond(abs);
HXDLIN( 684)		if ((_hx_tmp1 != (int)0)) {
HXLINE( 684)			Int _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_tickInSecond(abs);
HXDLIN( 684)			::String _hx_tmp3 = ::thx::Strings_obj::trimCharsRight(::thx::Ints_obj::lpad(_hx_tmp2,HX_("0",30,00,00,00),(int)7),HX_(")",29,00,00,00));
HXDLIN( 684)			decimals = (HX_(".",2e,00,00,00) + _hx_tmp3);
            		}
            		else {
HXLINE( 684)			decimals = HX_("",00,00,00,00);
            		}
HXLINE( 685)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::Int64s_obj::zero;
HXDLIN( 685)		Int _hx_tmp4 = _hx_int64_compare(this1,b);
HXDLIN( 685)		HX_VARI( Bool,isneg) = (_hx_tmp4 < (int)0);
HXLINE( 686)		::String _hx_tmp5;
HXDLIN( 686)		if (isneg) {
HXLINE( 686)			_hx_tmp5 = HX_("-",2d,00,00,00);
            		}
            		else {
HXLINE( 686)			_hx_tmp5 = HX_("",00,00,00,00);
            		}
HXDLIN( 686)		Int _hx_tmp6 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(abs,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 686)		::String _hx_tmp7 = ((HX_("",00,00,00,00) + _hx_tmp6) + HX_("-",2d,00,00,00));
HXDLIN( 686)		Int _hx_tmp8 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(abs,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 686)		::String _hx_tmp9 = ((_hx_tmp7 + ::thx::Ints_obj::lpad(_hx_tmp8,HX_("0",30,00,00,00),(int)2)) + HX_("-",2d,00,00,00));
HXDLIN( 686)		Int _hx_tmp10 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(abs,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN( 686)		::String _hx_tmp11 = ((_hx_tmp9 + ::thx::Ints_obj::lpad(_hx_tmp10,HX_("0",30,00,00,00),(int)2)) + HX_("T",54,00,00,00));
HXDLIN( 686)		Int _hx_tmp12 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_hour(abs);
HXDLIN( 686)		::String _hx_tmp13 = ((_hx_tmp11 + ::thx::Ints_obj::lpad(_hx_tmp12,HX_("0",30,00,00,00),(int)2)) + HX_(":",3a,00,00,00));
HXDLIN( 686)		Int _hx_tmp14 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_minute(abs);
HXDLIN( 686)		::String _hx_tmp15 = ((_hx_tmp13 + ::thx::Ints_obj::lpad(_hx_tmp14,HX_("0",30,00,00,00),(int)2)) + HX_(":",3a,00,00,00));
HXDLIN( 686)		Int _hx_tmp16 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_second(abs);
HXDLIN( 686)		return (_hx_tmp5 + (((_hx_tmp15 + ::thx::Ints_obj::lpad(_hx_tmp16,HX_("0",30,00,00,00),(int)2)) + decimals) + HX_("Z",5a,00,00,00)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,toString,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::get_ticks( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","get_ticks",0x62bed50e,"thx._DateTimeUtc.DateTimeUtc_Impl_.get_ticks","thx/DateTimeUtc.hx",690,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 690)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,get_ticks,return )

Int DateTimeUtc_Impl__obj::get_year( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","get_year",0x9b44fe25,"thx._DateTimeUtc.DateTimeUtc_Impl_.get_year","thx/DateTimeUtc.hx",693,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 693)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,get_year,return )

Int DateTimeUtc_Impl__obj::get_month( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","get_month",0x5ef06dd8,"thx._DateTimeUtc.DateTimeUtc_Impl_.get_month","thx/DateTimeUtc.hx",696,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 696)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,get_month,return )

Int DateTimeUtc_Impl__obj::get_day( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","get_day",0xb97586f4,"thx._DateTimeUtc.DateTimeUtc_Impl_.get_day","thx/DateTimeUtc.hx",699,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 699)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,get_day,return )

Int DateTimeUtc_Impl__obj::get_hour( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","get_hour",0x9010058c,"thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour","thx/DateTimeUtc.hx",702,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 702)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN( 702)		Bool _hx_tmp = _hx_int64_is_zero(this1);
HXDLIN( 702)		if (_hx_tmp) {
HXLINE( 702)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 702)		HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_div(this1,b);
HXDLIN( 702)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ( ::cpp::Int64Struct((int)24));
HXDLIN( 702)		Bool _hx_tmp1 = _hx_int64_is_zero(a);
HXDLIN( 702)		if (_hx_tmp1) {
HXLINE( 702)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 702)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_mod(a,b1);
HXDLIN( 702)		Int _hx_tmp2 = _hx_int64_high(x);
HXDLIN( 702)		Int _hx_tmp3 = _hx_int64_low(x);
HXDLIN( 702)		if ((_hx_tmp2 != ((int)_hx_tmp3 >> (int)(int)31))) {
HXLINE( 702)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 702)		return _hx_int64_low(x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,get_hour,return )

Int DateTimeUtc_Impl__obj::get_minute( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","get_minute",0x3f09013c,"thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute","thx/DateTimeUtc.hx",705,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 705)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMinuteI64;
HXDLIN( 705)		Bool _hx_tmp = _hx_int64_is_zero(this1);
HXDLIN( 705)		if (_hx_tmp) {
HXLINE( 705)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 705)		HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_div(this1,b);
HXDLIN( 705)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ( ::cpp::Int64Struct((int)60));
HXDLIN( 705)		Bool _hx_tmp1 = _hx_int64_is_zero(a);
HXDLIN( 705)		if (_hx_tmp1) {
HXLINE( 705)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 705)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_mod(a,b1);
HXDLIN( 705)		Int _hx_tmp2 = _hx_int64_high(x);
HXDLIN( 705)		Int _hx_tmp3 = _hx_int64_low(x);
HXDLIN( 705)		if ((_hx_tmp2 != ((int)_hx_tmp3 >> (int)(int)31))) {
HXLINE( 705)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 705)		return _hx_int64_low(x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,get_minute,return )

Int DateTimeUtc_Impl__obj::get_dayOfWeek( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","get_dayOfWeek",0x28b26ebf,"thx._DateTimeUtc.DateTimeUtc_Impl_.get_dayOfWeek","thx/DateTimeUtc.hx",708,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 708)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerDayI64;
HXDLIN( 708)		Bool _hx_tmp = _hx_int64_is_zero(this1);
HXDLIN( 708)		if (_hx_tmp) {
HXLINE( 708)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 708)		HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_div(this1,b);
HXDLIN( 708)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ( ::cpp::Int64Struct((int)1));
HXDLIN( 708)		HX_VARI_NAME(  ::cpp::Int64Struct,a1,"a") = _hx_int64_add(a,b1);
HXDLIN( 708)		HX_VARI_NAME(  ::cpp::Int64Struct,b2,"b") = ( ::cpp::Int64Struct((int)7));
HXDLIN( 708)		Bool _hx_tmp1 = _hx_int64_is_zero(a1);
HXDLIN( 708)		if (_hx_tmp1) {
HXLINE( 708)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 708)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_mod(a1,b2);
HXDLIN( 708)		Int _hx_tmp2 = _hx_int64_high(x);
HXDLIN( 708)		Int _hx_tmp3 = _hx_int64_low(x);
HXDLIN( 708)		if ((_hx_tmp2 != ((int)_hx_tmp3 >> (int)(int)31))) {
HXLINE( 708)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 708)		return _hx_int64_low(x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,get_dayOfWeek,return )

Int DateTimeUtc_Impl__obj::get_dayOfYear( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","get_dayOfYear",0x2a04d888,"thx._DateTimeUtc.DateTimeUtc_Impl_.get_dayOfYear","thx/DateTimeUtc.hx",711,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 711)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY_OF_YEAR);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,get_dayOfYear,return )

Int DateTimeUtc_Impl__obj::get_millisecond( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","get_millisecond",0x894473d9,"thx._DateTimeUtc.DateTimeUtc_Impl_.get_millisecond","thx/DateTimeUtc.hx",714,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 714)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMillisecondI64;
HXDLIN( 714)		Bool _hx_tmp = _hx_int64_is_zero(this1);
HXDLIN( 714)		if (_hx_tmp) {
HXLINE( 714)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 714)		HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_div(this1,b);
HXDLIN( 714)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::thousandI64;
HXDLIN( 714)		Bool _hx_tmp1 = _hx_int64_is_zero(a);
HXDLIN( 714)		if (_hx_tmp1) {
HXLINE( 714)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 714)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_mod(a,b1);
HXDLIN( 714)		Int _hx_tmp2 = _hx_int64_high(x);
HXDLIN( 714)		Int _hx_tmp3 = _hx_int64_low(x);
HXDLIN( 714)		if ((_hx_tmp2 != ((int)_hx_tmp3 >> (int)(int)31))) {
HXLINE( 714)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 714)		return _hx_int64_low(x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,get_millisecond,return )

Int DateTimeUtc_Impl__obj::get_microsecond( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","get_microsecond",0x6f773810,"thx._DateTimeUtc.DateTimeUtc_Impl_.get_microsecond","thx/DateTimeUtc.hx",717,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 717)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMicrosecondI64;
HXDLIN( 717)		Bool _hx_tmp = _hx_int64_is_zero(this1);
HXDLIN( 717)		if (_hx_tmp) {
HXLINE( 717)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 717)		HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_div(this1,b);
HXDLIN( 717)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::millionI64;
HXDLIN( 717)		Bool _hx_tmp1 = _hx_int64_is_zero(a);
HXDLIN( 717)		if (_hx_tmp1) {
HXLINE( 717)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 717)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_mod(a,b1);
HXDLIN( 717)		Int _hx_tmp2 = _hx_int64_high(x);
HXDLIN( 717)		Int _hx_tmp3 = _hx_int64_low(x);
HXDLIN( 717)		if ((_hx_tmp2 != ((int)_hx_tmp3 >> (int)(int)31))) {
HXLINE( 717)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 717)		return _hx_int64_low(x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,get_microsecond,return )

Int DateTimeUtc_Impl__obj::get_tickInSecond( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","get_tickInSecond",0xbf869a1e,"thx._DateTimeUtc.DateTimeUtc_Impl_.get_tickInSecond","thx/DateTimeUtc.hx",720,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 720)		HX_VARI(  ::cpp::Int64Struct,b) = ( ::cpp::Int64Struct((int)10000000));
HXDLIN( 720)		Bool _hx_tmp = _hx_int64_is_zero(this1);
HXDLIN( 720)		if (_hx_tmp) {
HXLINE( 720)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 720)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_mod(this1,b);
HXDLIN( 720)		Int _hx_tmp1 = _hx_int64_high(x);
HXDLIN( 720)		Int _hx_tmp2 = _hx_int64_low(x);
HXDLIN( 720)		if ((_hx_tmp1 != ((int)_hx_tmp2 >> (int)(int)31))) {
HXLINE( 720)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 720)		return _hx_int64_low(x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,get_tickInSecond,return )

Int DateTimeUtc_Impl__obj::get_second( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","get_second",0x5048eddc,"thx._DateTimeUtc.DateTimeUtc_Impl_.get_second","thx/DateTimeUtc.hx",723,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 723)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 723)		Bool _hx_tmp = _hx_int64_is_zero(this1);
HXDLIN( 723)		if (_hx_tmp) {
HXLINE( 723)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 723)		HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_div(this1,b);
HXDLIN( 723)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ( ::cpp::Int64Struct((int)60));
HXDLIN( 723)		Bool _hx_tmp1 = _hx_int64_is_zero(a);
HXDLIN( 723)		if (_hx_tmp1) {
HXLINE( 723)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 723)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_mod(a,b1);
HXDLIN( 723)		Int _hx_tmp2 = _hx_int64_high(x);
HXDLIN( 723)		Int _hx_tmp3 = _hx_int64_low(x);
HXDLIN( 723)		if ((_hx_tmp2 != ((int)_hx_tmp3 >> (int)(int)31))) {
HXLINE( 723)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 723)		return _hx_int64_low(x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,get_second,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::get_timeOfDay( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","get_timeOfDay",0xc5cebcd0,"thx._DateTimeUtc.DateTimeUtc_Impl_.get_timeOfDay","thx/DateTimeUtc.hx",726,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 726)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerDayI64;
HXDLIN( 726)		Bool _hx_tmp = _hx_int64_is_zero(this1);
HXDLIN( 726)		if (_hx_tmp) {
HXLINE( 726)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 726)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_mod(this1,b);
HXDLIN( 726)		return ticks;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,get_timeOfDay,return )

Bool DateTimeUtc_Impl__obj::get_isInLeapYear( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","get_isInLeapYear",0x035af77c,"thx._DateTimeUtc.DateTimeUtc_Impl_.get_isInLeapYear","thx/DateTimeUtc.hx",729,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 729)		Int _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 729)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::isLeapYear(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,get_isInLeapYear,return )

Int DateTimeUtc_Impl__obj::get_monthDays( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","get_monthDays",0xcff4c08f,"thx._DateTimeUtc.DateTimeUtc_Impl_.get_monthDays","thx/DateTimeUtc.hx",732,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 732)		Int _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 732)		Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 732)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysInMonth(_hx_tmp,_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,get_monthDays,return )

 ::cpp::Int64Struct DateTimeUtc_Impl__obj::self( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","self",0x7f4f68eb,"thx._DateTimeUtc.DateTimeUtc_Impl_.self","thx/DateTimeUtc.hx",735,0x6fdd0860)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 735)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTimeUtc_Impl__obj,self,return )


DateTimeUtc_Impl__obj::DateTimeUtc_Impl__obj()
{
}

bool DateTimeUtc_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"now") ) { outValue = now_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"min") ) { outValue = min_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"max") ) { outValue = max_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"jump") ) { outValue = jump_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"less") ) { outValue = less_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"self") ) { outValue = self_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"snapTo") ) { outValue = snapTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toTime") ) { outValue = toTime_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toDate") ) { outValue = toDate_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"compare") ) { outValue = compare_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prevDay") ) { outValue = prevDay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nextDay") ) { outValue = nextDay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sameDay") ) { outValue = sameDay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withDay") ) { outValue = withDay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addDays") ) { outValue = addDays_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"greater") ) { outValue = greater_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_day") ) { outValue = get_day_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fromDate") ) { outValue = fromDate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromTime") ) { outValue = fromTime_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prevYear") ) { outValue = prevYear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nextYear") ) { outValue = nextYear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prevWeek") ) { outValue = prevWeek_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nextWeek") ) { outValue = nextWeek_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prevHour") ) { outValue = prevHour_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nextHour") ) { outValue = nextHour_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"snapNext") ) { outValue = snapNext_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"snapPrev") ) { outValue = snapPrev_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sameYear") ) { outValue = sameYear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sameHour") ) { outValue = sameHour_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withYear") ) { outValue = withYear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withHour") ) { outValue = withHour_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addTicks") ) { outValue = addTicks_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subtract") ) { outValue = subtract_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addHours") ) { outValue = addHours_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addYears") ) { outValue = addYears_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equalsTo") ) { outValue = equalsTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lessThan") ) { outValue = lessThan_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_year") ) { outValue = get_year_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_hour") ) { outValue = get_hour_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromInt64") ) { outValue = fromInt64_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"daysRange") ) { outValue = daysRange_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prevMonth") ) { outValue = prevMonth_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nextMonth") ) { outValue = nextMonth_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sameMonth") ) { outValue = sameMonth_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withMonth") ) { outValue = withMonth_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addScaled") ) { outValue = addScaled_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addMonths") ) { outValue = addMonths_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"compareTo") ) { outValue = compareTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"notEquals") ) { outValue = notEquals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_ticks") ) { outValue = get_ticks_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_month") ) { outValue = get_month_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isLeapYear") ) { outValue = isLeapYear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prevMinute") ) { outValue = prevMinute_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nextMinute") ) { outValue = nextMinute_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prevSecond") ) { outValue = prevSecond_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nextSecond") ) { outValue = nextSecond_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sameMinute") ) { outValue = sameMinute_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sameSecond") ) { outValue = sameSecond_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withMinute") ) { outValue = withMinute_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withSecond") ) { outValue = withSecond_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addMinutes") ) { outValue = addMinutes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addSeconds") ) { outValue = addSeconds_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lessEquals") ) { outValue = lessEquals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toDateTime") ) { outValue = toDateTime_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_minute") ) { outValue = get_minute_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_second") ) { outValue = get_second_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"dateToTicks") ) { outValue = dateToTicks_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"daysInMonth") ) { outValue = daysInMonth_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getDatePart") ) { outValue = getDatePart_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"notEqualsTo") ) { outValue = notEqualsTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"greaterThan") ) { outValue = greaterThan_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"subtractDate") ) { outValue = subtractDate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nearEqualsTo") ) { outValue = nearEqualsTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lessEqualsTo") ) { outValue = lessEqualsTo_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"snapToWeekDay") ) { outValue = snapToWeekDay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"greaterEquals") ) { outValue = greaterEquals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_dayOfWeek") ) { outValue = get_dayOfWeek_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_dayOfYear") ) { outValue = get_dayOfYear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_timeOfDay") ) { outValue = get_timeOfDay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_monthDays") ) { outValue = get_monthDays_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"rawDateToTicks") ) { outValue = rawDateToTicks_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"daysInThisMonth") ) { outValue = daysInThisMonth_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"snapNextWeekDay") ) { outValue = snapNextWeekDay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"snapPrevWeekDay") ) { outValue = snapPrevWeekDay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withMillisecond") ) { outValue = withMillisecond_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addMilliseconds") ) { outValue = addMilliseconds_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"greaterEqualsTo") ) { outValue = greaterEqualsTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLocalDateTime") ) { outValue = toLocalDateTime_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_millisecond") ) { outValue = get_millisecond_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_microsecond") ) { outValue = get_microsecond_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_tickInSecond") ) { outValue = get_tickInSecond_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_isInLeapYear") ) { outValue = get_isInLeapYear_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *DateTimeUtc_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo DateTimeUtc_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &DateTimeUtc_Impl__obj::millisPerSecond,HX_HCSTRING("millisPerSecond","\x8b","\x3b","\xa2","\x48")},
	{hx::fsInt,(void *) &DateTimeUtc_Impl__obj::millisPerMinute,HX_HCSTRING("millisPerMinute","\xeb","\x4e","\x62","\x37")},
	{hx::fsInt,(void *) &DateTimeUtc_Impl__obj::millisPerHour,HX_HCSTRING("millisPerHour","\x7b","\x39","\xc1","\x92")},
	{hx::fsInt,(void *) &DateTimeUtc_Impl__obj::millisPerDay,HX_HCSTRING("millisPerDay","\xe5","\x65","\x67","\x8a")},
	{hx::fsObject /*cpp::Int64Struct*/ ,(void *) &DateTimeUtc_Impl__obj::tenI64,HX_HCSTRING("tenI64","\x0a","\x7e","\xcb","\xd1")},
	{hx::fsObject /*cpp::Int64Struct*/ ,(void *) &DateTimeUtc_Impl__obj::hundredI64,HX_HCSTRING("hundredI64","\xd9","\xbf","\x1d","\x57")},
	{hx::fsObject /*cpp::Int64Struct*/ ,(void *) &DateTimeUtc_Impl__obj::thousandI64,HX_HCSTRING("thousandI64","\xa9","\x0d","\xeb","\x2c")},
	{hx::fsObject /*cpp::Int64Struct*/ ,(void *) &DateTimeUtc_Impl__obj::tenThousandI64,HX_HCSTRING("tenThousandI64","\xcc","\x0a","\xda","\x0c")},
	{hx::fsObject /*cpp::Int64Struct*/ ,(void *) &DateTimeUtc_Impl__obj::millionI64,HX_HCSTRING("millionI64","\xdb","\xac","\xef","\x3e")},
	{hx::fsObject /*cpp::Int64Struct*/ ,(void *) &DateTimeUtc_Impl__obj::ticksPerMicrosecondI64,HX_HCSTRING("ticksPerMicrosecondI64","\xb6","\xbd","\xe7","\xe1")},
	{hx::fsInt,(void *) &DateTimeUtc_Impl__obj::ticksPerMillisecond,HX_HCSTRING("ticksPerMillisecond","\x7a","\x16","\xe0","\x7c")},
	{hx::fsObject /*cpp::Int64Struct*/ ,(void *) &DateTimeUtc_Impl__obj::ticksPerMillisecondI64,HX_HCSTRING("ticksPerMillisecondI64","\x8d","\x45","\xad","\xaa")},
	{hx::fsObject /*cpp::Int64Struct*/ ,(void *) &DateTimeUtc_Impl__obj::ticksPerSecondI64,HX_HCSTRING("ticksPerSecondI64","\xcc","\xbf","\x2b","\x63")},
	{hx::fsObject /*cpp::Int64Struct*/ ,(void *) &DateTimeUtc_Impl__obj::ticksPerMinuteI64,HX_HCSTRING("ticksPerMinuteI64","\x6c","\x08","\xee","\xfa")},
	{hx::fsObject /*cpp::Int64Struct*/ ,(void *) &DateTimeUtc_Impl__obj::ticksPerHourI64,HX_HCSTRING("ticksPerHourI64","\xdc","\x0b","\x8e","\x39")},
	{hx::fsObject /*cpp::Int64Struct*/ ,(void *) &DateTimeUtc_Impl__obj::ticksPerDayI64,HX_HCSTRING("ticksPerDayI64","\x52","\x3e","\x2b","\xd9")},
	{hx::fsInt,(void *) &DateTimeUtc_Impl__obj::daysPerYear,HX_HCSTRING("daysPerYear","\x63","\xdb","\x6c","\xd8")},
	{hx::fsInt,(void *) &DateTimeUtc_Impl__obj::daysPer4Years,HX_HCSTRING("daysPer4Years","\x48","\xc2","\x79","\xc0")},
	{hx::fsInt,(void *) &DateTimeUtc_Impl__obj::daysPer100Years,HX_HCSTRING("daysPer100Years","\x6b","\xba","\xd9","\xfa")},
	{hx::fsInt,(void *) &DateTimeUtc_Impl__obj::daysPer400Years,HX_HCSTRING("daysPer400Years","\xc8","\x10","\x71","\xa6")},
	{hx::fsInt,(void *) &DateTimeUtc_Impl__obj::daysTo1970,HX_HCSTRING("daysTo1970","\xf3","\x7d","\x8f","\x61")},
	{hx::fsObject /*cpp::Int64Struct*/ ,(void *) &DateTimeUtc_Impl__obj::unixEpochTicks,HX_HCSTRING("unixEpochTicks","\x15","\x11","\x89","\x89")},
	{hx::fsInt,(void *) &DateTimeUtc_Impl__obj::DATE_PART_YEAR,HX_HCSTRING("DATE_PART_YEAR","\x38","\x30","\x83","\x5d")},
	{hx::fsInt,(void *) &DateTimeUtc_Impl__obj::DATE_PART_DAY_OF_YEAR,HX_HCSTRING("DATE_PART_DAY_OF_YEAR","\xc7","\x53","\x49","\x7c")},
	{hx::fsInt,(void *) &DateTimeUtc_Impl__obj::DATE_PART_MONTH,HX_HCSTRING("DATE_PART_MONTH","\x45","\x0c","\x1e","\x93")},
	{hx::fsInt,(void *) &DateTimeUtc_Impl__obj::DATE_PART_DAY,HX_HCSTRING("DATE_PART_DAY","\x21","\xdc","\x01","\x72")},
	{hx::fsObject /*Array< int >*/ ,(void *) &DateTimeUtc_Impl__obj::daysToMonth365,HX_HCSTRING("daysToMonth365","\x04","\xd9","\xc1","\x46")},
	{hx::fsObject /*Array< int >*/ ,(void *) &DateTimeUtc_Impl__obj::daysToMonth366,HX_HCSTRING("daysToMonth366","\x05","\xd9","\xc1","\x46")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void DateTimeUtc_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DateTimeUtc_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(DateTimeUtc_Impl__obj::millisPerSecond,"millisPerSecond");
	HX_MARK_MEMBER_NAME(DateTimeUtc_Impl__obj::millisPerMinute,"millisPerMinute");
	HX_MARK_MEMBER_NAME(DateTimeUtc_Impl__obj::millisPerHour,"millisPerHour");
	HX_MARK_MEMBER_NAME(DateTimeUtc_Impl__obj::millisPerDay,"millisPerDay");
	HX_MARK_MEMBER_NAME(DateTimeUtc_Impl__obj::tenI64,"tenI64");
	HX_MARK_MEMBER_NAME(DateTimeUtc_Impl__obj::hundredI64,"hundredI64");
	HX_MARK_MEMBER_NAME(DateTimeUtc_Impl__obj::thousandI64,"thousandI64");
	HX_MARK_MEMBER_NAME(DateTimeUtc_Impl__obj::tenThousandI64,"tenThousandI64");
	HX_MARK_MEMBER_NAME(DateTimeUtc_Impl__obj::millionI64,"millionI64");
	HX_MARK_MEMBER_NAME(DateTimeUtc_Impl__obj::ticksPerMicrosecondI64,"ticksPerMicrosecondI64");
	HX_MARK_MEMBER_NAME(DateTimeUtc_Impl__obj::ticksPerMillisecond,"ticksPerMillisecond");
	HX_MARK_MEMBER_NAME(DateTimeUtc_Impl__obj::ticksPerMillisecondI64,"ticksPerMillisecondI64");
	HX_MARK_MEMBER_NAME(DateTimeUtc_Impl__obj::ticksPerSecondI64,"ticksPerSecondI64");
	HX_MARK_MEMBER_NAME(DateTimeUtc_Impl__obj::ticksPerMinuteI64,"ticksPerMinuteI64");
	HX_MARK_MEMBER_NAME(DateTimeUtc_Impl__obj::ticksPerHourI64,"ticksPerHourI64");
	HX_MARK_MEMBER_NAME(DateTimeUtc_Impl__obj::ticksPerDayI64,"ticksPerDayI64");
	HX_MARK_MEMBER_NAME(DateTimeUtc_Impl__obj::daysPerYear,"daysPerYear");
	HX_MARK_MEMBER_NAME(DateTimeUtc_Impl__obj::daysPer4Years,"daysPer4Years");
	HX_MARK_MEMBER_NAME(DateTimeUtc_Impl__obj::daysPer100Years,"daysPer100Years");
	HX_MARK_MEMBER_NAME(DateTimeUtc_Impl__obj::daysPer400Years,"daysPer400Years");
	HX_MARK_MEMBER_NAME(DateTimeUtc_Impl__obj::daysTo1970,"daysTo1970");
	HX_MARK_MEMBER_NAME(DateTimeUtc_Impl__obj::unixEpochTicks,"unixEpochTicks");
	HX_MARK_MEMBER_NAME(DateTimeUtc_Impl__obj::DATE_PART_YEAR,"DATE_PART_YEAR");
	HX_MARK_MEMBER_NAME(DateTimeUtc_Impl__obj::DATE_PART_DAY_OF_YEAR,"DATE_PART_DAY_OF_YEAR");
	HX_MARK_MEMBER_NAME(DateTimeUtc_Impl__obj::DATE_PART_MONTH,"DATE_PART_MONTH");
	HX_MARK_MEMBER_NAME(DateTimeUtc_Impl__obj::DATE_PART_DAY,"DATE_PART_DAY");
	HX_MARK_MEMBER_NAME(DateTimeUtc_Impl__obj::daysToMonth365,"daysToMonth365");
	HX_MARK_MEMBER_NAME(DateTimeUtc_Impl__obj::daysToMonth366,"daysToMonth366");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DateTimeUtc_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DateTimeUtc_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(DateTimeUtc_Impl__obj::millisPerSecond,"millisPerSecond");
	HX_VISIT_MEMBER_NAME(DateTimeUtc_Impl__obj::millisPerMinute,"millisPerMinute");
	HX_VISIT_MEMBER_NAME(DateTimeUtc_Impl__obj::millisPerHour,"millisPerHour");
	HX_VISIT_MEMBER_NAME(DateTimeUtc_Impl__obj::millisPerDay,"millisPerDay");
	HX_VISIT_MEMBER_NAME(DateTimeUtc_Impl__obj::tenI64,"tenI64");
	HX_VISIT_MEMBER_NAME(DateTimeUtc_Impl__obj::hundredI64,"hundredI64");
	HX_VISIT_MEMBER_NAME(DateTimeUtc_Impl__obj::thousandI64,"thousandI64");
	HX_VISIT_MEMBER_NAME(DateTimeUtc_Impl__obj::tenThousandI64,"tenThousandI64");
	HX_VISIT_MEMBER_NAME(DateTimeUtc_Impl__obj::millionI64,"millionI64");
	HX_VISIT_MEMBER_NAME(DateTimeUtc_Impl__obj::ticksPerMicrosecondI64,"ticksPerMicrosecondI64");
	HX_VISIT_MEMBER_NAME(DateTimeUtc_Impl__obj::ticksPerMillisecond,"ticksPerMillisecond");
	HX_VISIT_MEMBER_NAME(DateTimeUtc_Impl__obj::ticksPerMillisecondI64,"ticksPerMillisecondI64");
	HX_VISIT_MEMBER_NAME(DateTimeUtc_Impl__obj::ticksPerSecondI64,"ticksPerSecondI64");
	HX_VISIT_MEMBER_NAME(DateTimeUtc_Impl__obj::ticksPerMinuteI64,"ticksPerMinuteI64");
	HX_VISIT_MEMBER_NAME(DateTimeUtc_Impl__obj::ticksPerHourI64,"ticksPerHourI64");
	HX_VISIT_MEMBER_NAME(DateTimeUtc_Impl__obj::ticksPerDayI64,"ticksPerDayI64");
	HX_VISIT_MEMBER_NAME(DateTimeUtc_Impl__obj::daysPerYear,"daysPerYear");
	HX_VISIT_MEMBER_NAME(DateTimeUtc_Impl__obj::daysPer4Years,"daysPer4Years");
	HX_VISIT_MEMBER_NAME(DateTimeUtc_Impl__obj::daysPer100Years,"daysPer100Years");
	HX_VISIT_MEMBER_NAME(DateTimeUtc_Impl__obj::daysPer400Years,"daysPer400Years");
	HX_VISIT_MEMBER_NAME(DateTimeUtc_Impl__obj::daysTo1970,"daysTo1970");
	HX_VISIT_MEMBER_NAME(DateTimeUtc_Impl__obj::unixEpochTicks,"unixEpochTicks");
	HX_VISIT_MEMBER_NAME(DateTimeUtc_Impl__obj::DATE_PART_YEAR,"DATE_PART_YEAR");
	HX_VISIT_MEMBER_NAME(DateTimeUtc_Impl__obj::DATE_PART_DAY_OF_YEAR,"DATE_PART_DAY_OF_YEAR");
	HX_VISIT_MEMBER_NAME(DateTimeUtc_Impl__obj::DATE_PART_MONTH,"DATE_PART_MONTH");
	HX_VISIT_MEMBER_NAME(DateTimeUtc_Impl__obj::DATE_PART_DAY,"DATE_PART_DAY");
	HX_VISIT_MEMBER_NAME(DateTimeUtc_Impl__obj::daysToMonth365,"daysToMonth365");
	HX_VISIT_MEMBER_NAME(DateTimeUtc_Impl__obj::daysToMonth366,"daysToMonth366");
};

#endif

hx::Class DateTimeUtc_Impl__obj::__mClass;

static ::String DateTimeUtc_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("millisPerSecond","\x8b","\x3b","\xa2","\x48"),
	HX_HCSTRING("millisPerMinute","\xeb","\x4e","\x62","\x37"),
	HX_HCSTRING("millisPerHour","\x7b","\x39","\xc1","\x92"),
	HX_HCSTRING("millisPerDay","\xe5","\x65","\x67","\x8a"),
	HX_HCSTRING("tenI64","\x0a","\x7e","\xcb","\xd1"),
	HX_HCSTRING("hundredI64","\xd9","\xbf","\x1d","\x57"),
	HX_HCSTRING("thousandI64","\xa9","\x0d","\xeb","\x2c"),
	HX_HCSTRING("tenThousandI64","\xcc","\x0a","\xda","\x0c"),
	HX_HCSTRING("millionI64","\xdb","\xac","\xef","\x3e"),
	HX_HCSTRING("ticksPerMicrosecondI64","\xb6","\xbd","\xe7","\xe1"),
	HX_HCSTRING("ticksPerMillisecond","\x7a","\x16","\xe0","\x7c"),
	HX_HCSTRING("ticksPerMillisecondI64","\x8d","\x45","\xad","\xaa"),
	HX_HCSTRING("ticksPerSecondI64","\xcc","\xbf","\x2b","\x63"),
	HX_HCSTRING("ticksPerMinuteI64","\x6c","\x08","\xee","\xfa"),
	HX_HCSTRING("ticksPerHourI64","\xdc","\x0b","\x8e","\x39"),
	HX_HCSTRING("ticksPerDayI64","\x52","\x3e","\x2b","\xd9"),
	HX_HCSTRING("daysPerYear","\x63","\xdb","\x6c","\xd8"),
	HX_HCSTRING("daysPer4Years","\x48","\xc2","\x79","\xc0"),
	HX_HCSTRING("daysPer100Years","\x6b","\xba","\xd9","\xfa"),
	HX_HCSTRING("daysPer400Years","\xc8","\x10","\x71","\xa6"),
	HX_HCSTRING("daysTo1970","\xf3","\x7d","\x8f","\x61"),
	HX_HCSTRING("unixEpochTicks","\x15","\x11","\x89","\x89"),
	HX_HCSTRING("DATE_PART_YEAR","\x38","\x30","\x83","\x5d"),
	HX_HCSTRING("DATE_PART_DAY_OF_YEAR","\xc7","\x53","\x49","\x7c"),
	HX_HCSTRING("DATE_PART_MONTH","\x45","\x0c","\x1e","\x93"),
	HX_HCSTRING("DATE_PART_DAY","\x21","\xdc","\x01","\x72"),
	HX_HCSTRING("daysToMonth365","\x04","\xd9","\xc1","\x46"),
	HX_HCSTRING("daysToMonth366","\x05","\xd9","\xc1","\x46"),
	HX_HCSTRING("now","\x16","\xd9","\x53","\x00"),
	HX_HCSTRING("fromInt64","\x23","\x80","\xa9","\x72"),
	HX_HCSTRING("fromDate","\xb8","\x24","\x2f","\xa0"),
	HX_HCSTRING("fromTime","\x97","\x9a","\xc8","\xaa"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	HX_HCSTRING("compare","\xa5","\x18","\x69","\x83"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("isLeapYear","\x8f","\xff","\x8e","\x84"),
	HX_HCSTRING("dateToTicks","\x6d","\x8e","\x67","\x03"),
	HX_HCSTRING("rawDateToTicks","\x65","\xc9","\xb4","\x96"),
	HX_HCSTRING("daysInMonth","\x44","\xfb","\x4a","\x0f"),
	HX_HCSTRING("daysRange","\xa6","\xf7","\x66","\x2c"),
	HX_HCSTRING("getDatePart","\xf7","\xd7","\x53","\xfd"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("min","\x92","\x11","\x53","\x00"),
	HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"),
	HX_HCSTRING("jump","\xee","\xc4","\x69","\x46"),
	HX_HCSTRING("daysInThisMonth","\x06","\xe2","\xf6","\xf2"),
	HX_HCSTRING("prevYear","\x50","\xaa","\x15","\x19"),
	HX_HCSTRING("nextYear","\x50","\x70","\x14","\xfc"),
	HX_HCSTRING("prevMonth","\x4d","\x67","\xb6","\xf7"),
	HX_HCSTRING("nextMonth","\x4d","\xe1","\xa4","\xb3"),
	HX_HCSTRING("prevWeek","\x87","\x40","\xc3","\x17"),
	HX_HCSTRING("nextWeek","\x87","\x06","\xc2","\xfa"),
	HX_HCSTRING("prevDay","\x29","\xc9","\xbe","\x3b"),
	HX_HCSTRING("nextDay","\x29","\xc3","\x3a","\xa5"),
	HX_HCSTRING("prevHour","\xb7","\xb1","\xe0","\x0d"),
	HX_HCSTRING("nextHour","\xb7","\x77","\xdf","\xf0"),
	HX_HCSTRING("prevMinute","\x27","\x4e","\x7d","\x53"),
	HX_HCSTRING("nextMinute","\x27","\x94","\x39","\x08"),
	HX_HCSTRING("prevSecond","\xc7","\x3a","\xbd","\x64"),
	HX_HCSTRING("nextSecond","\xc7","\x80","\x79","\x19"),
	HX_HCSTRING("snapToWeekDay","\xe3","\xa6","\xe7","\x80"),
	HX_HCSTRING("snapNextWeekDay","\xeb","\x27","\x9a","\xa4"),
	HX_HCSTRING("snapPrevWeekDay","\xeb","\x2d","\x99","\x34"),
	HX_HCSTRING("snapNext","\x5d","\xf4","\x3c","\x09"),
	HX_HCSTRING("snapPrev","\x5d","\x2e","\x99","\x0a"),
	HX_HCSTRING("snapTo","\x65","\x46","\x91","\x91"),
	HX_HCSTRING("sameYear","\x43","\x24","\xcb","\x6a"),
	HX_HCSTRING("sameMonth","\xfa","\xa1","\xcb","\x24"),
	HX_HCSTRING("sameDay","\x96","\x0e","\x66","\x7c"),
	HX_HCSTRING("sameHour","\xaa","\x2b","\x96","\x5f"),
	HX_HCSTRING("sameMinute","\xda","\x6a","\xfb","\x98"),
	HX_HCSTRING("sameSecond","\x7a","\x57","\x3b","\xaa"),
	HX_HCSTRING("withYear","\xe3","\xe6","\xf3","\x22"),
	HX_HCSTRING("withMonth","\x5a","\x2b","\x4d","\x90"),
	HX_HCSTRING("withDay","\xf6","\x7f","\x60","\x5f"),
	HX_HCSTRING("withHour","\x4a","\xee","\xbe","\x17"),
	HX_HCSTRING("withMinute","\x7a","\x15","\xd2","\x3e"),
	HX_HCSTRING("withSecond","\x1a","\x02","\x12","\x50"),
	HX_HCSTRING("withMillisecond","\xdb","\x3e","\x33","\x9e"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("addTicks","\x95","\x54","\x8b","\x89"),
	HX_HCSTRING("subtract","\x14","\x75","\x11","\xf8"),
	HX_HCSTRING("subtractDate","\x62","\x11","\xb0","\x67"),
	HX_HCSTRING("addScaled","\x9b","\x1f","\x4a","\xf4"),
	HX_HCSTRING("addDays","\x58","\x9d","\xa0","\x7e"),
	HX_HCSTRING("addHours","\xee","\x54","\xc1","\xa4"),
	HX_HCSTRING("addMilliseconds","\xd3","\x79","\x8c","\x4d"),
	HX_HCSTRING("addMinutes","\xfe","\xc2","\x68","\xbb"),
	HX_HCSTRING("addMonths","\x34","\xc6","\x92","\x7f"),
	HX_HCSTRING("addSeconds","\x5e","\xe2","\x17","\xc2"),
	HX_HCSTRING("addYears","\x35","\xe2","\xe5","\x67"),
	HX_HCSTRING("compareTo","\x80","\x95","\x5c","\x02"),
	HX_HCSTRING("equalsTo","\x9a","\x85","\x3a","\xd5"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("notEqualsTo","\xcd","\xe5","\x2b","\x04"),
	HX_HCSTRING("notEquals","\xb2","\xcb","\xdb","\x3c"),
	HX_HCSTRING("nearEqualsTo","\xa2","\xda","\xa5","\x92"),
	HX_HCSTRING("greaterThan","\x7b","\xc1","\x4a","\x75"),
	HX_HCSTRING("greater","\xfa","\x90","\xc0","\xb7"),
	HX_HCSTRING("greaterEqualsTo","\xb4","\x5c","\x7d","\xf1"),
	HX_HCSTRING("greaterEquals","\xd9","\xea","\x09","\xab"),
	HX_HCSTRING("lessThan","\x5a","\x5f","\x34","\xf3"),
	HX_HCSTRING("less","\x59","\x13","\xb0","\x47"),
	HX_HCSTRING("lessEqualsTo","\x13","\xd6","\x54","\x67"),
	HX_HCSTRING("lessEquals","\x78","\xfe","\xfd","\xac"),
	HX_HCSTRING("toTime","\x28","\x37","\xb6","\x82"),
	HX_HCSTRING("toDate","\x49","\xc1","\x1c","\x78"),
	HX_HCSTRING("toDateTime","\xf6","\x91","\x27","\x4c"),
	HX_HCSTRING("toLocalDateTime","\x6b","\x3f","\x21","\x86"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("get_ticks","\xcd","\x8a","\xd7","\x53"),
	HX_HCSTRING("get_year","\x46","\x85","\x02","\xd0"),
	HX_HCSTRING("get_month","\x97","\x23","\x09","\x50"),
	HX_HCSTRING("get_day","\xf3","\xfe","\xc0","\x26"),
	HX_HCSTRING("get_hour","\xad","\x8c","\xcd","\xc4"),
	HX_HCSTRING("get_minute","\x9d","\x52","\x8f","\x43"),
	HX_HCSTRING("get_dayOfWeek","\xfe","\x6f","\x52","\x06"),
	HX_HCSTRING("get_dayOfYear","\xc7","\xd9","\xa4","\x07"),
	HX_HCSTRING("get_millisecond","\xd8","\x82","\xd6","\x0f"),
	HX_HCSTRING("get_microsecond","\x0f","\x47","\x09","\xf6"),
	HX_HCSTRING("get_tickInSecond","\x3f","\xaa","\xc1","\xf8"),
	HX_HCSTRING("get_second","\x3d","\x3f","\xcf","\x54"),
	HX_HCSTRING("get_timeOfDay","\x0f","\xbe","\x6e","\xa3"),
	HX_HCSTRING("get_isInLeapYear","\x9d","\x07","\x96","\x3c"),
	HX_HCSTRING("get_monthDays","\xce","\xc1","\x94","\xad"),
	HX_HCSTRING("self","\x8c","\x8b","\x50","\x4c"),
	::String(null())
};

void DateTimeUtc_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx._DateTimeUtc.DateTimeUtc_Impl_","\x6f","\x7f","\xe0","\x31");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DateTimeUtc_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = DateTimeUtc_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(DateTimeUtc_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< DateTimeUtc_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DateTimeUtc_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DateTimeUtc_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DateTimeUtc_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void DateTimeUtc_Impl__obj::__boot()
{
{
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","boot",0x741a6191,"thx._DateTimeUtc.DateTimeUtc_Impl_.boot","thx/DateTimeUtc.hx",18,0x6fdd0860)
HXLINE(  18)		millisPerSecond = (int)1000;
            	}
{
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","boot",0x741a6191,"thx._DateTimeUtc.DateTimeUtc_Impl_.boot","thx/DateTimeUtc.hx",19,0x6fdd0860)
HXLINE(  19)		millisPerMinute = (::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::millisPerSecond * (int)60);
            	}
{
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","boot",0x741a6191,"thx._DateTimeUtc.DateTimeUtc_Impl_.boot","thx/DateTimeUtc.hx",20,0x6fdd0860)
HXLINE(  20)		millisPerHour = (::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::millisPerMinute * (int)60);
            	}
{
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","boot",0x741a6191,"thx._DateTimeUtc.DateTimeUtc_Impl_.boot","thx/DateTimeUtc.hx",21,0x6fdd0860)
HXLINE(  21)		millisPerDay = (::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::millisPerHour * (int)24);
            	}
{
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","boot",0x741a6191,"thx._DateTimeUtc.DateTimeUtc_Impl_.boot","thx/DateTimeUtc.hx",23,0x6fdd0860)
HXLINE(  23)		tenI64 = ( ::cpp::Int64Struct((int)10));
            	}
{
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","boot",0x741a6191,"thx._DateTimeUtc.DateTimeUtc_Impl_.boot","thx/DateTimeUtc.hx",24,0x6fdd0860)
HXLINE(  24)		hundredI64 = ( ::cpp::Int64Struct((int)100));
            	}
{
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","boot",0x741a6191,"thx._DateTimeUtc.DateTimeUtc_Impl_.boot","thx/DateTimeUtc.hx",25,0x6fdd0860)
HXLINE(  25)		thousandI64 = ( ::cpp::Int64Struct((int)1000));
            	}
{
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","boot",0x741a6191,"thx._DateTimeUtc.DateTimeUtc_Impl_.boot","thx/DateTimeUtc.hx",26,0x6fdd0860)
HXLINE(  26)		tenThousandI64 = ( ::cpp::Int64Struct((int)10000));
            	}
{
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","boot",0x741a6191,"thx._DateTimeUtc.DateTimeUtc_Impl_.boot","thx/DateTimeUtc.hx",27,0x6fdd0860)
HXLINE(  27)		millionI64 = ( ::cpp::Int64Struct((int)1000000));
            	}
{
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","boot",0x741a6191,"thx._DateTimeUtc.DateTimeUtc_Impl_.boot","thx/DateTimeUtc.hx",28,0x6fdd0860)
HXLINE(  28)		ticksPerMicrosecondI64 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::tenI64;
            	}
{
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","boot",0x741a6191,"thx._DateTimeUtc.DateTimeUtc_Impl_.boot","thx/DateTimeUtc.hx",29,0x6fdd0860)
HXLINE(  29)		ticksPerMillisecond = (int)10000;
            	}
{
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","boot",0x741a6191,"thx._DateTimeUtc.DateTimeUtc_Impl_.boot","thx/DateTimeUtc.hx",30,0x6fdd0860)
HXLINE(  30)		HX_VARI( Int,x) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMillisecond;
HXDLIN(  30)		ticksPerMillisecondI64 = ( ::cpp::Int64Struct(x));
            	}
{
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","boot",0x741a6191,"thx._DateTimeUtc.DateTimeUtc_Impl_.boot","thx/DateTimeUtc.hx",31,0x6fdd0860)
HXLINE(  31)		HX_VARI(  ::cpp::Int64Struct,a) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMillisecondI64;
HXDLIN(  31)		HX_VARI(  ::cpp::Int64Struct,b) = ( ::cpp::Int64Struct((int)1000));
HXDLIN(  31)		ticksPerSecondI64 = _hx_int64_mul(a,b);
            	}
{
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","boot",0x741a6191,"thx._DateTimeUtc.DateTimeUtc_Impl_.boot","thx/DateTimeUtc.hx",32,0x6fdd0860)
HXLINE(  32)		HX_VARI(  ::cpp::Int64Struct,a) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN(  32)		HX_VARI(  ::cpp::Int64Struct,b) = ( ::cpp::Int64Struct((int)60));
HXDLIN(  32)		ticksPerMinuteI64 = _hx_int64_mul(a,b);
            	}
{
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","boot",0x741a6191,"thx._DateTimeUtc.DateTimeUtc_Impl_.boot","thx/DateTimeUtc.hx",33,0x6fdd0860)
HXLINE(  33)		HX_VARI(  ::cpp::Int64Struct,a) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMinuteI64;
HXDLIN(  33)		HX_VARI(  ::cpp::Int64Struct,b) = ( ::cpp::Int64Struct((int)60));
HXDLIN(  33)		ticksPerHourI64 = _hx_int64_mul(a,b);
            	}
{
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","boot",0x741a6191,"thx._DateTimeUtc.DateTimeUtc_Impl_.boot","thx/DateTimeUtc.hx",34,0x6fdd0860)
HXLINE(  34)		HX_VARI(  ::cpp::Int64Struct,a) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN(  34)		HX_VARI(  ::cpp::Int64Struct,b) = ( ::cpp::Int64Struct((int)24));
HXDLIN(  34)		ticksPerDayI64 = _hx_int64_mul(a,b);
            	}
{
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","boot",0x741a6191,"thx._DateTimeUtc.DateTimeUtc_Impl_.boot","thx/DateTimeUtc.hx",36,0x6fdd0860)
HXLINE(  36)		daysPerYear = (int)365;
            	}
{
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","boot",0x741a6191,"thx._DateTimeUtc.DateTimeUtc_Impl_.boot","thx/DateTimeUtc.hx",37,0x6fdd0860)
HXLINE(  37)		daysPer4Years = ((::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysPerYear * (int)4) + (int)1);
            	}
{
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","boot",0x741a6191,"thx._DateTimeUtc.DateTimeUtc_Impl_.boot","thx/DateTimeUtc.hx",38,0x6fdd0860)
HXLINE(  38)		daysPer100Years = ((::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysPer4Years * (int)25) - (int)1);
            	}
{
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","boot",0x741a6191,"thx._DateTimeUtc.DateTimeUtc_Impl_.boot","thx/DateTimeUtc.hx",39,0x6fdd0860)
HXLINE(  39)		daysPer400Years = ((::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysPer100Years * (int)4) + (int)1);
            	}
{
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","boot",0x741a6191,"thx._DateTimeUtc.DateTimeUtc_Impl_.boot","thx/DateTimeUtc.hx",41,0x6fdd0860)
HXLINE(  41)		daysTo1970 = ((((::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysPer400Years * (int)4) + (::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysPer100Years * (int)3)) + (::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysPer4Years * (int)17)) + ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysPerYear);
            	}
{
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","boot",0x741a6191,"thx._DateTimeUtc.DateTimeUtc_Impl_.boot","thx/DateTimeUtc.hx",42,0x6fdd0860)
HXLINE(  42)		HX_VARI(  ::cpp::Int64Struct,a) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerDayI64;
HXDLIN(  42)		HX_VARI( Int,x) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysTo1970;
HXDLIN(  42)		HX_VARI(  ::cpp::Int64Struct,b) = ( ::cpp::Int64Struct(x));
HXDLIN(  42)		unixEpochTicks = _hx_int64_mul(a,b);
            	}
{
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","boot",0x741a6191,"thx._DateTimeUtc.DateTimeUtc_Impl_.boot","thx/DateTimeUtc.hx",44,0x6fdd0860)
HXLINE(  44)		DATE_PART_YEAR = (int)0;
            	}
{
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","boot",0x741a6191,"thx._DateTimeUtc.DateTimeUtc_Impl_.boot","thx/DateTimeUtc.hx",45,0x6fdd0860)
HXLINE(  45)		DATE_PART_DAY_OF_YEAR = (int)1;
            	}
{
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","boot",0x741a6191,"thx._DateTimeUtc.DateTimeUtc_Impl_.boot","thx/DateTimeUtc.hx",46,0x6fdd0860)
HXLINE(  46)		DATE_PART_MONTH = (int)2;
            	}
{
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","boot",0x741a6191,"thx._DateTimeUtc.DateTimeUtc_Impl_.boot","thx/DateTimeUtc.hx",47,0x6fdd0860)
HXLINE(  47)		DATE_PART_DAY = (int)3;
            	}
{
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","boot",0x741a6191,"thx._DateTimeUtc.DateTimeUtc_Impl_.boot","thx/DateTimeUtc.hx",49,0x6fdd0860)
HXLINE(  49)		daysToMonth365 = ::Array_obj< Int >::__new(13)->init(0,(int)0)->init(1,(int)31)->init(2,(int)59)->init(3,(int)90)->init(4,(int)120)->init(5,(int)151)->init(6,(int)181)->init(7,(int)212)->init(8,(int)243)->init(9,(int)273)->init(10,(int)304)->init(11,(int)334)->init(12,(int)365);
            	}
{
            	HX_STACK_FRAME("thx._DateTimeUtc.DateTimeUtc_Impl_","boot",0x741a6191,"thx._DateTimeUtc.DateTimeUtc_Impl_.boot","thx/DateTimeUtc.hx",50,0x6fdd0860)
HXLINE(  50)		daysToMonth366 = ::Array_obj< Int >::__new(13)->init(0,(int)0)->init(1,(int)31)->init(2,(int)60)->init(3,(int)91)->init(4,(int)121)->init(5,(int)152)->init(6,(int)182)->init(7,(int)213)->init(8,(int)244)->init(9,(int)274)->init(10,(int)305)->init(11,(int)335)->init(12,(int)366);
            	}
}

} // end namespace thx
} // end namespace _DateTimeUtc
