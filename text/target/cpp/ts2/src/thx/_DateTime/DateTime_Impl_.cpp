// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "cpp/Int64.h"
#include "hxMath.h"
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_thx_Error
#include <thx/Error.h>
#endif
#ifndef INCLUDED_thx_Int64s
#include <thx/Int64s.h>
#endif
#ifndef INCLUDED_thx_Ints
#include <thx/Ints.h>
#endif
#ifndef INCLUDED_thx_OrderingImpl
#include <thx/OrderingImpl.h>
#endif
#ifndef INCLUDED_thx_Strings
#include <thx/Strings.h>
#endif
#ifndef INCLUDED_thx_TimePeriod
#include <thx/TimePeriod.h>
#endif
#ifndef INCLUDED_thx__DateTime_DateTime_Impl_
#include <thx/_DateTime/DateTime_Impl_.h>
#endif
#ifndef INCLUDED_thx__DateTimeUtc_DateTimeUtc_Impl_
#include <thx/_DateTimeUtc/DateTimeUtc_Impl_.h>
#endif
#ifndef INCLUDED_thx__Ord_Ord_Impl_
#include <thx/_Ord/Ord_Impl_.h>
#endif
#ifndef INCLUDED_thx__Time_Time_Impl_
#include <thx/_Time/Time_Impl_.h>
#endif

namespace thx{
namespace _DateTime{

void DateTime_Impl__obj::__construct() { }

Dynamic DateTime_Impl__obj::__CreateEmpty() { return new DateTime_Impl__obj; }

hx::ObjectPtr< DateTime_Impl__obj > DateTime_Impl__obj::__new()
{
	hx::ObjectPtr< DateTime_Impl__obj > _hx_result = new DateTime_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic DateTime_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DateTime_Impl__obj > _hx_result = new DateTime_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::cpp::Int64Struct DateTime_Impl__obj::localOffset(){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","localOffset",0x9d687a09,"thx._DateTime.DateTime_Impl_.localOffset","thx/DateTime.hx",23,0x407b9ed8)
HXLINE(  29)		HX_VARI(  ::cpp::Int64Struct,now) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::now();
HXLINE(  30)		Int _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(now,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN(  30)		Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(now,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN(  30)		Int _hx_tmp2 = (_hx_tmp1 - (int)1);
HXDLIN(  30)		Int _hx_tmp3 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(now,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN(  30)		Int _hx_tmp4 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_hour(now);
HXDLIN(  30)		Int _hx_tmp5 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_minute(now);
HXDLIN(  30)		Int _hx_tmp6 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_second(now);
HXLINE(  29)		HX_VARI(  ::Date,local) =  ::Date_obj::__new(_hx_tmp,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6);
HXLINE(  31)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::unixEpochTicks;
HXDLIN(  31)		HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_sub(now,b);
HXDLIN(  31)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMillisecondI64;
HXDLIN(  31)		Bool _hx_tmp7 = _hx_int64_is_zero(a);
HXDLIN(  31)		if (_hx_tmp7) {
HXLINE(  31)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  31)		 ::cpp::Int64Struct _hx_tmp8 = _hx_int64_div(a,b1);
HXDLIN(  31)		Float _hx_tmp9 = ::thx::Int64s_obj::toFloat(_hx_tmp8);
HXDLIN(  31)		Float _hx_tmp10 = ::Math_obj::ffloor(((Float)_hx_tmp9 / (Float)(int)1000));
HXDLIN(  31)		Float _hx_tmp11 = (_hx_tmp10 * (int)1000);
HXDLIN(  31)		Float _hx_tmp12 = local->getTime();
HXLINE(  32)		HX_VARI_NAME(  ::cpp::Int64Struct,a1,"a") = ::thx::Int64s_obj::fromFloat((_hx_tmp11 - _hx_tmp12));
HXDLIN(  32)		HX_VARI_NAME(  ::cpp::Int64Struct,b2,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMillisecondI64;
HXDLIN(  32)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_mul(a1,b2);
HXDLIN(  32)		return ticks;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(DateTime_Impl__obj,localOffset,return )

::Array< ::Dynamic> DateTime_Impl__obj::now(){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","now",0x7749f8c1,"thx._DateTime.DateTime_Impl_.now","thx/DateTime.hx",44,0x407b9ed8)
HXLINE(  44)		HX_VARI(  ::cpp::Int64Struct,dateTime) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::now();
HXDLIN(  44)		HX_VARI(  ::cpp::Int64Struct,offset) = ::thx::_DateTime::DateTime_Impl__obj::localOffset();
HXDLIN(  44)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime)->init(1,offset);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(DateTime_Impl__obj,now,return )

::Array< ::Dynamic> DateTime_Impl__obj::nowUtc(){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","nowUtc",0xe9141ae3,"thx._DateTime.DateTime_Impl_.nowUtc","thx/DateTime.hx",51,0x407b9ed8)
HXLINE(  51)		HX_VARI(  ::cpp::Int64Struct,dateTime) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::now();
HXDLIN(  51)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime)->init(1,::thx::_Time::Time_Impl__obj::zero);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(DateTime_Impl__obj,nowUtc,return )

::Array< ::Dynamic> DateTime_Impl__obj::fromDate( ::Date date){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","fromDate",0x9caf592d,"thx._DateTime.DateTime_Impl_.fromDate","thx/DateTime.hx",59,0x407b9ed8)
            	HX_STACK_ARG(date,"date")
HXLINE(  59)		Float _hx_tmp = date->getTime();
HXDLIN(  59)		HX_VARI(  ::cpp::Int64Struct,dateTime) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromTime(_hx_tmp);
HXDLIN(  59)		HX_VARI(  ::cpp::Int64Struct,offset) = ::thx::_DateTime::DateTime_Impl__obj::localOffset();
HXDLIN(  59)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime)->init(1,offset);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,fromDate,return )

::Array< ::Dynamic> DateTime_Impl__obj::fromDateWithOffset( ::Date date, ::cpp::Int64Struct offset){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","fromDateWithOffset",0x2a8c41c6,"thx._DateTime.DateTime_Impl_.fromDateWithOffset","thx/DateTime.hx",65,0x407b9ed8)
            	HX_STACK_ARG(date,"date")
            	HX_STACK_ARG(offset,"offset")
HXLINE(  65)		Float _hx_tmp = date->getTime();
HXDLIN(  65)		HX_VARI(  ::cpp::Int64Struct,dateTime) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromTime(_hx_tmp);
HXDLIN(  65)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime)->init(1,offset);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,fromDateWithOffset,return )

::Array< ::Dynamic> DateTime_Impl__obj::fromTime(Float timestamp){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","fromTime",0xa748cf0c,"thx._DateTime.DateTime_Impl_.fromTime","thx/DateTime.hx",72,0x407b9ed8)
            	HX_STACK_ARG(timestamp,"timestamp")
HXLINE(  72)		HX_VARI(  ::cpp::Int64Struct,dateTime) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromTime(timestamp);
HXDLIN(  72)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime)->init(1,::thx::_Time::Time_Impl__obj::zero);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,fromTime,return )

::Array< ::Dynamic> DateTime_Impl__obj::fromString(::String s){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","fromString",0x98c22990,"thx._DateTime.DateTime_Impl_.fromString","thx/DateTime.hx",91,0x407b9ed8)
            	HX_STACK_ARG(s,"s")
HXLINE(  92)		if (hx::IsNull( s )) {
HXLINE(  93)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(HX_("null String cannot be parsed to DateTime",c7,3c,aa,2e),null(),hx::SourceInfo(HX_("DateTime.hx",23,68,ad,e3),93,HX_("thx._DateTime.DateTime_Impl_",99,8e,e0,e9),HX_("fromString",db,2d,74,54))));
            		}
HXLINE(  94)		HX_VARI(  ::EReg,pattern) =  ::EReg_obj::__new(HX_("^([-])?(\\d+)[-](\\d{2})[-](\\d{2})(?:[T ](\\d{2})[:](\\d{2})[:](\\d{2})(?:\\.(\\d+))?(Z|([+-]\\d{2})[:](\\d{2}))?)?$",20,ab,4f,2a),HX_("",00,00,00,00));
HXLINE(  95)		Bool _hx_tmp = !(pattern->match(s));
HXDLIN(  95)		if (_hx_tmp) {
HXLINE(  96)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(((HX_("unable to parse DateTime string: \"",8b,bb,7d,4b) + s) + HX_("\"",22,00,00,00)),null(),hx::SourceInfo(HX_("DateTime.hx",23,68,ad,e3),96,HX_("thx._DateTime.DateTime_Impl_",99,8e,e0,e9),HX_("fromString",db,2d,74,54))));
            		}
HXLINE(  98)		HX_VARI( ::String,smticks) = pattern->matched((int)8);
HXDLIN(  98)		HX_VARI( Int,mticks) = (int)0;
HXLINE( 100)		if (hx::IsNotNull( smticks )) {
HXLINE( 101)			::String _hx_tmp1 = ::thx::Strings_obj::rpad(smticks,HX_("0",30,00,00,00),(int)7).substring((int)0,(int)7);
HXDLIN( 101)			smticks = (HX_("1",31,00,00,00) + _hx_tmp1);
HXLINE( 102)			 ::Dynamic _hx_tmp2 = ::Std_obj::parseInt(smticks);
HXDLIN( 102)			mticks = (_hx_tmp2 - (int)10000000);
            		}
HXLINE( 105)		HX_VARI(  ::cpp::Int64Struct,time) = ::thx::_Time::Time_Impl__obj::zero;
HXDLIN( 105)		HX_VARI( ::String,timepart) = pattern->matched((int)9);
HXLINE( 107)		Bool _hx_tmp3;
HXDLIN( 107)		if (hx::IsNotNull( timepart )) {
HXLINE( 107)			_hx_tmp3 = (HX_("Z",5a,00,00,00) != timepart);
            		}
            		else {
HXLINE( 107)			_hx_tmp3 = false;
            		}
HXDLIN( 107)		if (_hx_tmp3) {
HXLINE( 108)			HX_VARI( ::String,hours) = pattern->matched((int)10);
HXLINE( 109)			::String _hx_tmp4 = hours.substring((int)0,(int)1);
HXDLIN( 109)			if ((_hx_tmp4 == HX_("+",2b,00,00,00))) {
HXLINE( 110)				hours = hours.substring((int)1,null());
            			}
HXLINE( 112)			 ::Dynamic _hx_tmp5 = ::Std_obj::parseInt(hours);
HXLINE( 113)			::String _hx_tmp6 = pattern->matched((int)11);
HXDLIN( 113)			 ::Dynamic _hx_tmp7 = ::Std_obj::parseInt(_hx_tmp6);
HXLINE( 111)			time = ::thx::_Time::Time_Impl__obj::create(_hx_tmp5,_hx_tmp7,(int)0,null());
            		}
HXLINE( 119)		::String _hx_tmp8 = pattern->matched((int)2);
HXLINE( 118)		HX_VARI( Int,year) = ::Std_obj::parseInt(_hx_tmp8);
HXLINE( 120)		::String _hx_tmp9 = pattern->matched((int)3);
HXLINE( 118)		HX_VARI( Int,month) = ::Std_obj::parseInt(_hx_tmp9);
HXLINE( 121)		::String _hx_tmp10 = pattern->matched((int)4);
HXLINE( 118)		HX_VARI( Int,day) = ::Std_obj::parseInt(_hx_tmp10);
HXLINE( 122)		::String _hx_tmp11 = pattern->matched((int)5);
HXLINE( 118)		HX_VARI(  ::Dynamic,hour) = ::Std_obj::parseInt(_hx_tmp11);
HXLINE( 123)		::String _hx_tmp12 = pattern->matched((int)6);
HXLINE( 118)		HX_VARI(  ::Dynamic,minute) = ::Std_obj::parseInt(_hx_tmp12);
HXLINE( 124)		::String _hx_tmp13 = pattern->matched((int)7);
HXLINE( 118)		HX_VARI(  ::Dynamic,second) = ::Std_obj::parseInt(_hx_tmp13);
HXDLIN( 118)		HX_VARI(  ::cpp::Int64Struct,dateTime) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(year,month,day,hour,minute,second,(int)0);
HXDLIN( 118)		HX_VARI_NAME( ::Array< ::Dynamic>,this1,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime)->init(1,time);
HXDLIN( 118)		 ::cpp::Int64Struct _hx_tmp14 = _hx_int64_sub(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),time);
HXDLIN( 118)		HX_VARI_NAME( ::Array< ::Dynamic>,this2,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp14))->init(1,this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 118)		HX_VARI(  ::cpp::Int64Struct,ticks) = ( ::cpp::Int64Struct(mticks));
HXDLIN( 118)		 ::cpp::Int64Struct _hx_tmp15 = _hx_int64_add(this2->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),ticks);
HXDLIN( 118)		HX_VARI( ::Array< ::Dynamic>,date) = ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp15))->init(1,this2->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXLINE( 128)		::String _hx_tmp16 = pattern->matched((int)1);
HXDLIN( 128)		if ((_hx_tmp16 == HX_("-",2d,00,00,00))) {
HXLINE( 129)			 ::cpp::Int64Struct _hx_tmp17 = _hx_int64_neg(date->__get((int)0).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 129)			return ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp17))->init(1,time);
            		}
HXLINE( 130)		return date;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,fromString,return )

::Array< ::Dynamic> DateTime_Impl__obj::daysRange(::Array< ::Dynamic> start,::Array< ::Dynamic> end){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","daysRange",0x2014a991,"thx._DateTime.DateTime_Impl_.daysRange","thx/DateTime.hx",138,0x407b9ed8)
            	HX_STACK_ARG(start,"start")
            	HX_STACK_ARG(end,"end")
HXLINE( 139)		Int _hx_tmp = ::thx::_DateTime::DateTime_Impl__obj::compareTo(end,start);
HXDLIN( 139)		if ((_hx_tmp < (int)0)) {
HXLINE( 139)			return ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE( 140)		HX_VARI( ::Array< ::Dynamic>,days) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 141)		while(true){
HXLINE( 141)			Bool _hx_tmp1 = !(!(::thx::_DateTime::DateTime_Impl__obj::sameDay(start,end)));
HXDLIN( 141)			if (_hx_tmp1) {
HXLINE( 141)				goto _hx_goto_0;
            			}
HXLINE( 142)			days->push(start);
HXLINE( 143)			start = ::thx::_DateTime::DateTime_Impl__obj::jump(start,::thx::TimePeriod_obj::Day_dyn(),(int)1);
            		}
            		_hx_goto_0:;
HXLINE( 145)		days->push(end);
HXLINE( 146)		return days;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,daysRange,return )

Int DateTime_Impl__obj::compare(::Array< ::Dynamic> a,::Array< ::Dynamic> b){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","compare",0x8edfe9d0,"thx._DateTime.DateTime_Impl_.compare","thx/DateTime.hx",150,0x407b9ed8)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 150)		return ::thx::_DateTime::DateTime_Impl__obj::compareTo(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,compare,return )

 ::Dynamic DateTime_Impl__obj::ord(){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","ord",0x774abd8c,"thx._DateTime.DateTime_Impl_.ord","thx/DateTime.hx",153,0x407b9ed8)
HXLINE( 153)		return ::thx::_Ord::Ord_Impl__obj::fromIntComparison(::thx::_DateTime::DateTime_Impl__obj::compare_dyn());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(DateTime_Impl__obj,ord,return )

::Array< ::Dynamic> DateTime_Impl__obj::create(Int year,Int month,Int day, ::Dynamic __o_hour, ::Dynamic __o_minute, ::Dynamic __o_second, ::Dynamic __o_millisecond, ::cpp::Int64Struct offset){
 ::Dynamic hour = __o_hour.Default(0);
 ::Dynamic minute = __o_minute.Default(0);
 ::Dynamic second = __o_second.Default(0);
 ::Dynamic millisecond = __o_millisecond.Default(0);
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","create",0x317e2431,"thx._DateTime.DateTime_Impl_.create","thx/DateTime.hx",162,0x407b9ed8)
            	HX_STACK_ARG(year,"year")
            	HX_STACK_ARG(month,"month")
            	HX_STACK_ARG(day,"day")
            	HX_STACK_ARG(hour,"hour")
            	HX_STACK_ARG(minute,"minute")
            	HX_STACK_ARG(second,"second")
            	HX_STACK_ARG(millisecond,"millisecond")
            	HX_STACK_ARG(offset,"offset")
HXLINE( 162)		HX_VARI(  ::cpp::Int64Struct,dateTime) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(year,month,day,hour,minute,second,millisecond);
HXDLIN( 162)		HX_VARI_NAME( ::Array< ::Dynamic>,this1,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime)->init(1,offset);
HXDLIN( 162)		 ::cpp::Int64Struct _hx_tmp = _hx_int64_sub(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),offset);
HXDLIN( 162)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp))->init(1,this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(DateTime_Impl__obj,create,return )

::Array< ::Dynamic> DateTime_Impl__obj::_new( ::cpp::Int64Struct dateTime, ::cpp::Int64Struct offset){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","_new",0xdf84ab56,"thx._DateTime.DateTime_Impl_._new","thx/DateTime.hx",170,0x407b9ed8)
            	HX_STACK_ARG(dateTime,"dateTime")
            	HX_STACK_ARG(offset,"offset")
HXLINE( 170)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime)->init(1,offset);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,_new,return )

::Array< ::Dynamic> DateTime_Impl__obj::min(::Array< ::Dynamic> this1,::Array< ::Dynamic> other){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","min",0x7749313d,"thx._DateTime.DateTime_Impl_.min","thx/DateTime.hx",194,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 194)		Int _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::compareTo(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),other->__get((int)0).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 194)		if ((_hx_tmp <= (int)0)) {
HXLINE( 194)			return this1;
            		}
            		else {
HXLINE( 194)			return other;
            		}
HXDLIN( 194)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,min,return )

::Array< ::Dynamic> DateTime_Impl__obj::max(::Array< ::Dynamic> this1,::Array< ::Dynamic> other){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","max",0x77492a4f,"thx._DateTime.DateTime_Impl_.max","thx/DateTime.hx",197,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 197)		Int _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::compareTo(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),other->__get((int)0).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 197)		if ((_hx_tmp >= (int)0)) {
HXLINE( 197)			return this1;
            		}
            		else {
HXLINE( 197)			return other;
            		}
HXDLIN( 197)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,max,return )

::Array< ::Dynamic> DateTime_Impl__obj::jump(::Array< ::Dynamic> this1,::hx::EnumBase period,Int amount){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","jump",0xe6cf5ae3,"thx._DateTime.DateTime_Impl_.jump","thx/DateTime.hx",207,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(period,"period")
            	HX_STACK_ARG(amount,"amount")
HXLINE( 208)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 208)		HX_VARI( Int,sec) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_second(ticks);
HXLINE( 209)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks1,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXLINE( 208)		HX_VARI( Int,min) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_minute(ticks1);
HXLINE( 210)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks2,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXLINE( 208)		HX_VARI( Int,hr) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_hour(ticks2);
HXLINE( 211)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks3,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXLINE( 208)		HX_VARI( Int,day) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks3,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXLINE( 212)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks4,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXLINE( 208)		HX_VARI( Int,mon) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks4,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXLINE( 213)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks5,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXLINE( 208)		HX_VARI( Int,yr) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks5,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXLINE( 215)		Int _hx_tmp = ( ( ::hx::EnumBase)(period) )->_hx_getIndex();
HXDLIN( 215)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE( 216)				hx::AddEq(sec,amount);
            			}
            			break;
            			case (int)1: {
HXLINE( 217)				hx::AddEq(min,amount);
            			}
            			break;
            			case (int)2: {
HXLINE( 218)				hx::AddEq(hr,amount);
            			}
            			break;
            			case (int)3: {
HXLINE( 219)				hx::AddEq(day,amount);
            			}
            			break;
            			case (int)4: {
HXLINE( 220)				hx::AddEq(day,(amount * (int)7));
            			}
            			break;
            			case (int)5: {
HXLINE( 221)				hx::AddEq(mon,amount);
            			}
            			break;
            			case (int)6: {
HXLINE( 222)				hx::AddEq(yr,amount);
            			}
            			break;
            		}
HXLINE( 225)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks6,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 225)		HX_VARI(  ::Dynamic,millisecond) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_millisecond(ticks6);
HXDLIN( 225)		HX_VARI(  ::cpp::Int64Struct,offset) = this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >();
HXDLIN( 225)		HX_VARI(  ::cpp::Int64Struct,dateTime) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(yr,mon,day,hr,min,sec,millisecond);
HXDLIN( 225)		HX_VARI_NAME( ::Array< ::Dynamic>,this2,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime)->init(1,offset);
HXDLIN( 225)		 ::cpp::Int64Struct _hx_tmp1 = _hx_int64_sub(this2->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),offset);
HXDLIN( 225)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp1))->init(1,this2->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(DateTime_Impl__obj,jump,return )

Int DateTime_Impl__obj::daysInThisMonth(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","daysInThisMonth",0xe9b35631,"thx._DateTime.DateTime_Impl_.daysInThisMonth","thx/DateTime.hx",234,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 234)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 234)		Int _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 234)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks1,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 234)		Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 234)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysInMonth(_hx_tmp,_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,daysInThisMonth,return )

::Array< ::Dynamic> DateTime_Impl__obj::prevYear(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","prevYear",0x1595dec5,"thx._DateTime.DateTime_Impl_.prevYear","thx/DateTime.hx",240,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 240)		return ::thx::_DateTime::DateTime_Impl__obj::jump(this1,::thx::TimePeriod_obj::Year_dyn(),(int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,prevYear,return )

::Array< ::Dynamic> DateTime_Impl__obj::nextYear(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","nextYear",0xf894a4c5,"thx._DateTime.DateTime_Impl_.nextYear","thx/DateTime.hx",246,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 246)		return ::thx::_DateTime::DateTime_Impl__obj::jump(this1,::thx::TimePeriod_obj::Year_dyn(),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,nextYear,return )

::Array< ::Dynamic> DateTime_Impl__obj::prevMonth(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","prevMonth",0xeb641938,"thx._DateTime.DateTime_Impl_.prevMonth","thx/DateTime.hx",252,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 252)		return ::thx::_DateTime::DateTime_Impl__obj::jump(this1,::thx::TimePeriod_obj::Month_dyn(),(int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,prevMonth,return )

::Array< ::Dynamic> DateTime_Impl__obj::nextMonth(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","nextMonth",0xa7529338,"thx._DateTime.DateTime_Impl_.nextMonth","thx/DateTime.hx",258,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 258)		return ::thx::_DateTime::DateTime_Impl__obj::jump(this1,::thx::TimePeriod_obj::Month_dyn(),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,nextMonth,return )

::Array< ::Dynamic> DateTime_Impl__obj::prevWeek(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","prevWeek",0x144374fc,"thx._DateTime.DateTime_Impl_.prevWeek","thx/DateTime.hx",264,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 264)		return ::thx::_DateTime::DateTime_Impl__obj::jump(this1,::thx::TimePeriod_obj::Week_dyn(),(int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,prevWeek,return )

::Array< ::Dynamic> DateTime_Impl__obj::nextWeek(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","nextWeek",0xf7423afc,"thx._DateTime.DateTime_Impl_.nextWeek","thx/DateTime.hx",270,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 270)		return ::thx::_DateTime::DateTime_Impl__obj::jump(this1,::thx::TimePeriod_obj::Week_dyn(),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,nextWeek,return )

::Array< ::Dynamic> DateTime_Impl__obj::prevDay(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","prevDay",0x47359a54,"thx._DateTime.DateTime_Impl_.prevDay","thx/DateTime.hx",276,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 276)		return ::thx::_DateTime::DateTime_Impl__obj::jump(this1,::thx::TimePeriod_obj::Day_dyn(),(int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,prevDay,return )

::Array< ::Dynamic> DateTime_Impl__obj::nextDay(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","nextDay",0xb0b19454,"thx._DateTime.DateTime_Impl_.nextDay","thx/DateTime.hx",282,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 282)		return ::thx::_DateTime::DateTime_Impl__obj::jump(this1,::thx::TimePeriod_obj::Day_dyn(),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,nextDay,return )

::Array< ::Dynamic> DateTime_Impl__obj::prevHour(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","prevHour",0x0a60e62c,"thx._DateTime.DateTime_Impl_.prevHour","thx/DateTime.hx",288,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 288)		return ::thx::_DateTime::DateTime_Impl__obj::jump(this1,::thx::TimePeriod_obj::Hour_dyn(),(int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,prevHour,return )

::Array< ::Dynamic> DateTime_Impl__obj::nextHour(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","nextHour",0xed5fac2c,"thx._DateTime.DateTime_Impl_.nextHour","thx/DateTime.hx",294,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 294)		return ::thx::_DateTime::DateTime_Impl__obj::jump(this1,::thx::TimePeriod_obj::Hour_dyn(),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,nextHour,return )

::Array< ::Dynamic> DateTime_Impl__obj::prevMinute(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","prevMinute",0x97cb49dc,"thx._DateTime.DateTime_Impl_.prevMinute","thx/DateTime.hx",300,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 300)		return ::thx::_DateTime::DateTime_Impl__obj::jump(this1,::thx::TimePeriod_obj::Minute_dyn(),(int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,prevMinute,return )

::Array< ::Dynamic> DateTime_Impl__obj::nextMinute(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","nextMinute",0x4c878fdc,"thx._DateTime.DateTime_Impl_.nextMinute","thx/DateTime.hx",306,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 306)		return ::thx::_DateTime::DateTime_Impl__obj::jump(this1,::thx::TimePeriod_obj::Minute_dyn(),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,nextMinute,return )

::Array< ::Dynamic> DateTime_Impl__obj::prevSecond(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","prevSecond",0xa90b367c,"thx._DateTime.DateTime_Impl_.prevSecond","thx/DateTime.hx",312,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 312)		return ::thx::_DateTime::DateTime_Impl__obj::jump(this1,::thx::TimePeriod_obj::Second_dyn(),(int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,prevSecond,return )

::Array< ::Dynamic> DateTime_Impl__obj::nextSecond(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","nextSecond",0x5dc77c7c,"thx._DateTime.DateTime_Impl_.nextSecond","thx/DateTime.hx",318,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 318)		return ::thx::_DateTime::DateTime_Impl__obj::jump(this1,::thx::TimePeriod_obj::Second_dyn(),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,nextSecond,return )

::Array< ::Dynamic> DateTime_Impl__obj::snapToWeekDay(::Array< ::Dynamic> this1,Int weekday, ::Dynamic __o_firstDayOfWk){
 ::Dynamic firstDayOfWk = __o_firstDayOfWk.Default(0);
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","snapToWeekDay",0x8aec2a4e,"thx._DateTime.DateTime_Impl_.snapToWeekDay","thx/DateTime.hx",328,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(weekday,"weekday")
            	HX_STACK_ARG(firstDayOfWk,"firstDayOfWk")
HXLINE( 329)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 329)		HX_VARI( Int,d) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_dayOfWeek(ticks);
HXDLIN( 329)		HX_VARI( Int,s) = weekday;
HXLINE( 333)		Bool _hx_tmp = hx::IsLess( s,firstDayOfWk );
HXDLIN( 333)		if (_hx_tmp) {
HXLINE( 333)			hx::AddEq(s,(int)7);
            		}
HXLINE( 334)		Bool _hx_tmp1 = hx::IsLess( d,firstDayOfWk );
HXDLIN( 334)		if (_hx_tmp1) {
HXLINE( 334)			hx::AddEq(d,(int)7);
            		}
HXLINE( 335)		return ::thx::_DateTime::DateTime_Impl__obj::jump(this1,::thx::TimePeriod_obj::Day_dyn(),(s - d));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(DateTime_Impl__obj,snapToWeekDay,return )

::Array< ::Dynamic> DateTime_Impl__obj::snapNextWeekDay(::Array< ::Dynamic> this1,Int weekday){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","snapNextWeekDay",0x9b569c16,"thx._DateTime.DateTime_Impl_.snapNextWeekDay","thx/DateTime.hx",345,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(weekday,"weekday")
HXLINE( 346)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 346)		HX_VARI( Int,d) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_dayOfWeek(ticks);
HXDLIN( 346)		HX_VARI( Int,s) = weekday;
HXLINE( 350)		Bool _hx_tmp = (s < d);
HXDLIN( 350)		if (_hx_tmp) {
HXLINE( 350)			hx::AddEq(s,(int)7);
            		}
HXLINE( 351)		return ::thx::_DateTime::DateTime_Impl__obj::jump(this1,::thx::TimePeriod_obj::Day_dyn(),(s - d));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,snapNextWeekDay,return )

::Array< ::Dynamic> DateTime_Impl__obj::snapPrevWeekDay(::Array< ::Dynamic> this1,Int weekday){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","snapPrevWeekDay",0x2b55a216,"thx._DateTime.DateTime_Impl_.snapPrevWeekDay","thx/DateTime.hx",361,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(weekday,"weekday")
HXLINE( 362)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 362)		HX_VARI( Int,d) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_dayOfWeek(ticks);
HXDLIN( 362)		HX_VARI( Int,s) = weekday;
HXLINE( 366)		Bool _hx_tmp = (s > d);
HXDLIN( 366)		if (_hx_tmp) {
HXLINE( 366)			hx::SubEq(s,(int)7);
            		}
HXLINE( 367)		return ::thx::_DateTime::DateTime_Impl__obj::jump(this1,::thx::TimePeriod_obj::Day_dyn(),(s - d));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,snapPrevWeekDay,return )

::Array< ::Dynamic> DateTime_Impl__obj::snapNext(::Array< ::Dynamic> this1,::hx::EnumBase period){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","snapNext",0x05bd28d2,"thx._DateTime.DateTime_Impl_.snapNext","thx/DateTime.hx",376,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(period,"period")
HXLINE( 376)		Int _hx_tmp = ( ( ::hx::EnumBase)(period) )->_hx_getIndex();
HXDLIN( 376)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE( 378)				HX_VARI(  ::cpp::Int64Struct,a) = ::thx::Int64s_obj::divCeil(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64);
HXDLIN( 378)				HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 378)				HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_mul(a,b);
HXLINE( 376)				return ::Array_obj< ::Dynamic>::__new(2)->init(0,ticks)->init(1,this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            			}
            			break;
            			case (int)1: {
HXLINE( 380)				HX_VARI_NAME(  ::cpp::Int64Struct,a1,"a") = ::thx::Int64s_obj::divCeil(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMinuteI64);
HXDLIN( 380)				HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMinuteI64;
HXDLIN( 380)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks1,"ticks") = _hx_int64_mul(a1,b1);
HXLINE( 376)				return ::Array_obj< ::Dynamic>::__new(2)->init(0,ticks1)->init(1,this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            			}
            			break;
            			case (int)2: {
HXLINE( 382)				HX_VARI_NAME(  ::cpp::Int64Struct,a2,"a") = ::thx::Int64s_obj::divCeil(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64);
HXDLIN( 382)				HX_VARI_NAME(  ::cpp::Int64Struct,b2,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN( 382)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks2,"ticks") = _hx_int64_mul(a2,b2);
HXLINE( 376)				return ::Array_obj< ::Dynamic>::__new(2)->init(0,ticks2)->init(1,this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            			}
            			break;
            			case (int)3: {
HXLINE( 384)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks3,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 384)				HX_VARI( Int,year) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks3,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 384)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks4,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 384)				HX_VARI( Int,month) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks4,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 384)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks5,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 384)				Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks5,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN( 384)				HX_VARI( Int,day) = (_hx_tmp1 + (int)1);
HXDLIN( 384)				HX_VARI(  ::cpp::Int64Struct,offset) = this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >();
HXDLIN( 384)				HX_VARI(  ::cpp::Int64Struct,dateTime) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(year,month,day,(int)0,(int)0,(int)0,(int)0);
HXDLIN( 384)				HX_VARI_NAME( ::Array< ::Dynamic>,this2,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime)->init(1,offset);
HXDLIN( 384)				 ::cpp::Int64Struct _hx_tmp2 = _hx_int64_sub(this2->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),offset);
HXLINE( 376)				return ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp2))->init(1,this2->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            			}
            			break;
            			case (int)4: {
HXLINE( 386)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks6,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 386)				HX_VARI( Int,wd) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_dayOfWeek(ticks6);
HXLINE( 387)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks7,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 387)				HX_VARI_NAME( Int,year1,"year") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks7,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 387)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks8,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 387)				HX_VARI_NAME( Int,month1,"month") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks8,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 387)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks9,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 387)				Int _hx_tmp3 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks9,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN( 387)				HX_VARI_NAME( Int,day1,"day") = ((_hx_tmp3 + (int)7) - wd);
HXDLIN( 387)				HX_VARI_NAME(  ::cpp::Int64Struct,offset1,"offset") = this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >();
HXDLIN( 387)				HX_VARI_NAME(  ::cpp::Int64Struct,dateTime1,"dateTime") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(year1,month1,day1,(int)0,(int)0,(int)0,(int)0);
HXDLIN( 387)				HX_VARI_NAME( ::Array< ::Dynamic>,this3,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime1)->init(1,offset1);
HXDLIN( 387)				 ::cpp::Int64Struct _hx_tmp4 = _hx_int64_sub(this3->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),offset1);
HXLINE( 376)				return ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp4))->init(1,this3->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            			}
            			break;
            			case (int)5: {
HXLINE( 389)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks10,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 389)				HX_VARI_NAME( Int,year2,"year") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks10,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 389)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks11,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 389)				Int _hx_tmp5 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks11,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 389)				HX_VARI_NAME( Int,month2,"month") = (_hx_tmp5 + (int)1);
HXDLIN( 389)				HX_VARI_NAME(  ::cpp::Int64Struct,offset2,"offset") = this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >();
HXDLIN( 389)				HX_VARI_NAME(  ::cpp::Int64Struct,dateTime2,"dateTime") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(year2,month2,(int)1,(int)0,(int)0,(int)0,(int)0);
HXDLIN( 389)				HX_VARI_NAME( ::Array< ::Dynamic>,this4,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime2)->init(1,offset2);
HXDLIN( 389)				 ::cpp::Int64Struct _hx_tmp6 = _hx_int64_sub(this4->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),offset2);
HXLINE( 376)				return ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp6))->init(1,this4->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            			}
            			break;
            			case (int)6: {
HXLINE( 391)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks12,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 391)				Int _hx_tmp7 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks12,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 391)				HX_VARI_NAME( Int,year3,"year") = (_hx_tmp7 + (int)1);
HXDLIN( 391)				HX_VARI_NAME(  ::cpp::Int64Struct,offset3,"offset") = this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >();
HXDLIN( 391)				HX_VARI_NAME(  ::cpp::Int64Struct,dateTime3,"dateTime") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(year3,(int)1,(int)1,(int)0,(int)0,(int)0,(int)0);
HXDLIN( 391)				HX_VARI_NAME( ::Array< ::Dynamic>,this5,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime3)->init(1,offset3);
HXDLIN( 391)				 ::cpp::Int64Struct _hx_tmp8 = _hx_int64_sub(this5->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),offset3);
HXLINE( 376)				return ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp8))->init(1,this5->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            			}
            			break;
            		}
HXDLIN( 376)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,snapNext,return )

::Array< ::Dynamic> DateTime_Impl__obj::snapPrev(::Array< ::Dynamic> this1,::hx::EnumBase period){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","snapPrev",0x071962d2,"thx._DateTime.DateTime_Impl_.snapPrev","thx/DateTime.hx",400,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(period,"period")
HXLINE( 400)		Int _hx_tmp = ( ( ::hx::EnumBase)(period) )->_hx_getIndex();
HXDLIN( 400)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE( 402)				HX_VARI(  ::cpp::Int64Struct,a) = ::thx::Int64s_obj::divFloor(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64);
HXDLIN( 402)				HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 402)				HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_mul(a,b);
HXLINE( 400)				return ::Array_obj< ::Dynamic>::__new(2)->init(0,ticks)->init(1,this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            			}
            			break;
            			case (int)1: {
HXLINE( 404)				HX_VARI_NAME(  ::cpp::Int64Struct,a1,"a") = ::thx::Int64s_obj::divFloor(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMinuteI64);
HXDLIN( 404)				HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMinuteI64;
HXDLIN( 404)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks1,"ticks") = _hx_int64_mul(a1,b1);
HXLINE( 400)				return ::Array_obj< ::Dynamic>::__new(2)->init(0,ticks1)->init(1,this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            			}
            			break;
            			case (int)2: {
HXLINE( 406)				HX_VARI_NAME(  ::cpp::Int64Struct,a2,"a") = ::thx::Int64s_obj::divFloor(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64);
HXDLIN( 406)				HX_VARI_NAME(  ::cpp::Int64Struct,b2,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN( 406)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks2,"ticks") = _hx_int64_mul(a2,b2);
HXLINE( 400)				return ::Array_obj< ::Dynamic>::__new(2)->init(0,ticks2)->init(1,this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            			}
            			break;
            			case (int)3: {
HXLINE( 408)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks3,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 408)				HX_VARI( Int,year) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks3,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 408)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks4,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 408)				HX_VARI( Int,month) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks4,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 408)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks5,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 408)				HX_VARI( Int,day) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks5,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN( 408)				HX_VARI(  ::cpp::Int64Struct,offset) = this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >();
HXDLIN( 408)				HX_VARI(  ::cpp::Int64Struct,dateTime) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(year,month,day,(int)0,(int)0,(int)0,(int)0);
HXDLIN( 408)				HX_VARI_NAME( ::Array< ::Dynamic>,this2,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime)->init(1,offset);
HXDLIN( 408)				 ::cpp::Int64Struct _hx_tmp1 = _hx_int64_sub(this2->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),offset);
HXLINE( 400)				return ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp1))->init(1,this2->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            			}
            			break;
            			case (int)4: {
HXLINE( 410)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks6,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 410)				HX_VARI( Int,wd) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_dayOfWeek(ticks6);
HXLINE( 411)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks7,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 411)				HX_VARI_NAME( Int,year1,"year") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks7,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 411)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks8,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 411)				HX_VARI_NAME( Int,month1,"month") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks8,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 411)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks9,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 411)				Int _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks9,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN( 411)				HX_VARI_NAME( Int,day1,"day") = (_hx_tmp2 - wd);
HXDLIN( 411)				HX_VARI_NAME(  ::cpp::Int64Struct,offset1,"offset") = this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >();
HXDLIN( 411)				HX_VARI_NAME(  ::cpp::Int64Struct,dateTime1,"dateTime") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(year1,month1,day1,(int)0,(int)0,(int)0,(int)0);
HXDLIN( 411)				HX_VARI_NAME( ::Array< ::Dynamic>,this3,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime1)->init(1,offset1);
HXDLIN( 411)				 ::cpp::Int64Struct _hx_tmp3 = _hx_int64_sub(this3->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),offset1);
HXLINE( 400)				return ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp3))->init(1,this3->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            			}
            			break;
            			case (int)5: {
HXLINE( 413)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks10,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 413)				HX_VARI_NAME( Int,year2,"year") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks10,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 413)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks11,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 413)				HX_VARI_NAME( Int,month2,"month") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks11,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 413)				HX_VARI_NAME(  ::cpp::Int64Struct,offset2,"offset") = this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >();
HXDLIN( 413)				HX_VARI_NAME(  ::cpp::Int64Struct,dateTime2,"dateTime") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(year2,month2,(int)1,(int)0,(int)0,(int)0,(int)0);
HXDLIN( 413)				HX_VARI_NAME( ::Array< ::Dynamic>,this4,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime2)->init(1,offset2);
HXDLIN( 413)				 ::cpp::Int64Struct _hx_tmp4 = _hx_int64_sub(this4->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),offset2);
HXLINE( 400)				return ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp4))->init(1,this4->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            			}
            			break;
            			case (int)6: {
HXLINE( 415)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks12,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 415)				HX_VARI_NAME( Int,year3,"year") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks12,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 415)				HX_VARI_NAME(  ::cpp::Int64Struct,offset3,"offset") = this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >();
HXDLIN( 415)				HX_VARI_NAME(  ::cpp::Int64Struct,dateTime3,"dateTime") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(year3,(int)1,(int)1,(int)0,(int)0,(int)0,(int)0);
HXDLIN( 415)				HX_VARI_NAME( ::Array< ::Dynamic>,this5,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime3)->init(1,offset3);
HXDLIN( 415)				 ::cpp::Int64Struct _hx_tmp5 = _hx_int64_sub(this5->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),offset3);
HXLINE( 400)				return ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp5))->init(1,this5->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            			}
            			break;
            		}
HXDLIN( 400)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,snapPrev,return )

::Array< ::Dynamic> DateTime_Impl__obj::snapTo(::Array< ::Dynamic> this1,::hx::EnumBase period){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","snapTo",0x4700039a,"thx._DateTime.DateTime_Impl_.snapTo","thx/DateTime.hx",424,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(period,"period")
HXLINE( 424)		Int _hx_tmp = ( ( ::hx::EnumBase)(period) )->_hx_getIndex();
HXDLIN( 424)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE( 426)				HX_VARI(  ::cpp::Int64Struct,a) = ::thx::Int64s_obj::divRound(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64);
HXDLIN( 426)				HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 426)				HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_mul(a,b);
HXLINE( 424)				return ::Array_obj< ::Dynamic>::__new(2)->init(0,ticks)->init(1,this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            			}
            			break;
            			case (int)1: {
HXLINE( 428)				HX_VARI_NAME(  ::cpp::Int64Struct,a1,"a") = ::thx::Int64s_obj::divRound(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMinuteI64);
HXDLIN( 428)				HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMinuteI64;
HXDLIN( 428)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks1,"ticks") = _hx_int64_mul(a1,b1);
HXLINE( 424)				return ::Array_obj< ::Dynamic>::__new(2)->init(0,ticks1)->init(1,this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            			}
            			break;
            			case (int)2: {
HXLINE( 430)				HX_VARI_NAME(  ::cpp::Int64Struct,a2,"a") = ::thx::Int64s_obj::divRound(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64);
HXDLIN( 430)				HX_VARI_NAME(  ::cpp::Int64Struct,b2,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN( 430)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks2,"ticks") = _hx_int64_mul(a2,b2);
HXLINE( 424)				return ::Array_obj< ::Dynamic>::__new(2)->init(0,ticks2)->init(1,this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            			}
            			break;
            			case (int)3: {
HXLINE( 432)				HX_VAR( Int,mod);
HXDLIN( 432)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks3,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 432)				Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_hour(ticks3);
HXDLIN( 432)				if ((_hx_tmp1 >= (int)12)) {
HXLINE( 432)					mod = (int)1;
            				}
            				else {
HXLINE( 432)					mod = (int)0;
            				}
HXLINE( 433)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks4,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 433)				HX_VARI( Int,year) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks4,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 433)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks5,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 433)				HX_VARI( Int,month) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks5,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 433)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks6,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 433)				Int _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks6,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN( 433)				HX_VARI( Int,day) = (_hx_tmp2 + mod);
HXDLIN( 433)				HX_VARI(  ::cpp::Int64Struct,offset) = this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >();
HXDLIN( 433)				HX_VARI(  ::cpp::Int64Struct,dateTime) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(year,month,day,(int)0,(int)0,(int)0,(int)0);
HXDLIN( 433)				HX_VARI_NAME( ::Array< ::Dynamic>,this2,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime)->init(1,offset);
HXDLIN( 433)				 ::cpp::Int64Struct _hx_tmp3 = _hx_int64_sub(this2->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),offset);
HXLINE( 424)				return ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp3))->init(1,this2->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            			}
            			break;
            			case (int)4: {
HXLINE( 435)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks7,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 435)				HX_VARI( Int,wd) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_dayOfWeek(ticks7);
HXDLIN( 435)				HX_VAR_NAME( Int,mod1,"mod");
HXLINE( 436)				if ((wd < (int)3)) {
HXLINE( 435)					mod1 = -(wd);
            				}
            				else {
HXLINE( 436)					if ((wd > (int)3)) {
HXLINE( 435)						mod1 = ((int)7 - wd);
            					}
            					else {
HXLINE( 436)						HX_VARI_NAME(  ::cpp::Int64Struct,ticks8,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 436)						Int _hx_tmp4 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_hour(ticks8);
HXDLIN( 436)						if ((_hx_tmp4 < (int)12)) {
HXLINE( 435)							mod1 = -(wd);
            						}
            						else {
HXLINE( 435)							mod1 = ((int)7 - wd);
            						}
            					}
            				}
HXLINE( 437)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks9,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 437)				HX_VARI_NAME( Int,year1,"year") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks9,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 437)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks10,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 437)				HX_VARI_NAME( Int,month1,"month") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks10,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 437)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks11,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 437)				Int _hx_tmp5 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks11,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN( 437)				HX_VARI_NAME( Int,day1,"day") = (_hx_tmp5 + mod1);
HXDLIN( 437)				HX_VARI_NAME(  ::cpp::Int64Struct,offset1,"offset") = this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >();
HXDLIN( 437)				HX_VARI_NAME(  ::cpp::Int64Struct,dateTime1,"dateTime") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(year1,month1,day1,(int)0,(int)0,(int)0,(int)0);
HXDLIN( 437)				HX_VARI_NAME( ::Array< ::Dynamic>,this3,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime1)->init(1,offset1);
HXDLIN( 437)				 ::cpp::Int64Struct _hx_tmp6 = _hx_int64_sub(this3->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),offset1);
HXLINE( 424)				return ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp6))->init(1,this3->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            			}
            			break;
            			case (int)5: {
HXLINE( 439)				HX_VAR_NAME( Int,mod2,"mod");
HXDLIN( 439)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks12,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 439)				Int _hx_tmp7 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks12,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN( 439)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks13,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 439)				Int _hx_tmp8 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks13,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 439)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks14,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 439)				Int _hx_tmp9 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks14,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 439)				Int _hx_tmp10 = ::Math_obj::round(((Float)::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysInMonth(_hx_tmp8,_hx_tmp9) / (Float)(int)2));
HXDLIN( 439)				if ((_hx_tmp7 > _hx_tmp10)) {
HXLINE( 439)					mod2 = (int)1;
            				}
            				else {
HXLINE( 439)					mod2 = (int)0;
            				}
HXLINE( 440)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks15,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 440)				HX_VARI_NAME( Int,year2,"year") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks15,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 440)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks16,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 440)				Int _hx_tmp11 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks16,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 440)				HX_VARI_NAME( Int,month2,"month") = (_hx_tmp11 + mod2);
HXDLIN( 440)				HX_VARI_NAME(  ::cpp::Int64Struct,offset2,"offset") = this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >();
HXDLIN( 440)				HX_VARI_NAME(  ::cpp::Int64Struct,dateTime2,"dateTime") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(year2,month2,(int)1,(int)0,(int)0,(int)0,(int)0);
HXDLIN( 440)				HX_VARI_NAME( ::Array< ::Dynamic>,this4,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime2)->init(1,offset2);
HXDLIN( 440)				 ::cpp::Int64Struct _hx_tmp12 = _hx_int64_sub(this4->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),offset2);
HXLINE( 424)				return ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp12))->init(1,this4->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            			}
            			break;
            			case (int)6: {
HXLINE( 442)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks17,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 442)				HX_VARI_NAME( Int,year3,"year") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks17,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 442)				HX_VARI_NAME(  ::cpp::Int64Struct,offset3,"offset") = this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >();
HXDLIN( 442)				HX_VARI_NAME(  ::cpp::Int64Struct,dateTime3,"dateTime") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(year3,(int)6,(int)2,(int)0,(int)0,(int)0,(int)0);
HXDLIN( 442)				HX_VARI_NAME( ::Array< ::Dynamic>,this5,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime3)->init(1,offset3);
HXDLIN( 442)				 ::cpp::Int64Struct _hx_tmp13 = _hx_int64_sub(this5->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),offset3);
HXDLIN( 442)				HX_VARI( ::Array< ::Dynamic>,other) = ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp13))->init(1,this5->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 442)				HX_VAR_NAME( Int,mod3,"mod");
HXLINE( 443)				Int _hx_tmp14 = ::thx::_DateTime::DateTime_Impl__obj::compareTo(this1,other);
HXDLIN( 443)				if ((_hx_tmp14 > (int)0)) {
HXLINE( 442)					mod3 = (int)1;
            				}
            				else {
HXLINE( 442)					mod3 = (int)0;
            				}
HXLINE( 444)				HX_VARI_NAME(  ::cpp::Int64Struct,ticks18,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 444)				Int _hx_tmp15 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks18,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 444)				HX_VARI_NAME( Int,year4,"year") = (_hx_tmp15 + mod3);
HXDLIN( 444)				HX_VARI_NAME(  ::cpp::Int64Struct,offset4,"offset") = this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >();
HXDLIN( 444)				HX_VARI_NAME(  ::cpp::Int64Struct,dateTime4,"dateTime") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(year4,(int)1,(int)1,(int)0,(int)0,(int)0,(int)0);
HXDLIN( 444)				HX_VARI_NAME( ::Array< ::Dynamic>,this6,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime4)->init(1,offset4);
HXDLIN( 444)				 ::cpp::Int64Struct _hx_tmp16 = _hx_int64_sub(this6->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),offset4);
HXLINE( 424)				return ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp16))->init(1,this6->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            			}
            			break;
            		}
HXDLIN( 424)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,snapTo,return )

Bool DateTime_Impl__obj::sameYear(::Array< ::Dynamic> this1,::Array< ::Dynamic> other){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","sameYear",0x674b58b8,"thx._DateTime.DateTime_Impl_.sameYear","thx/DateTime.hx",451,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 451)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 451)		Int _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 451)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks1,"ticks") = _hx_int64_add(other->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),other->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 451)		Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 451)		return (_hx_tmp == _hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,sameYear,return )

Bool DateTime_Impl__obj::sameMonth(::Array< ::Dynamic> this1,::Array< ::Dynamic> other){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","sameMonth",0x187953e5,"thx._DateTime.DateTime_Impl_.sameMonth","thx/DateTime.hx",457,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 457)		Bool _hx_tmp = ::thx::_DateTime::DateTime_Impl__obj::sameYear(this1,other);
HXDLIN( 457)		if (_hx_tmp) {
HXLINE( 457)			HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 457)			Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 457)			HX_VARI_NAME(  ::cpp::Int64Struct,ticks1,"ticks") = _hx_int64_add(other->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),other->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 457)			Int _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 457)			return (_hx_tmp1 == _hx_tmp2);
            		}
            		else {
HXLINE( 457)			return false;
            		}
HXDLIN( 457)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,sameMonth,return )

Bool DateTime_Impl__obj::sameDay(::Array< ::Dynamic> this1,::Array< ::Dynamic> other){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","sameDay",0x87dcdfc1,"thx._DateTime.DateTime_Impl_.sameDay","thx/DateTime.hx",463,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 463)		Bool _hx_tmp = ::thx::_DateTime::DateTime_Impl__obj::sameMonth(this1,other);
HXDLIN( 463)		if (_hx_tmp) {
HXLINE( 463)			HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 463)			Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN( 463)			HX_VARI_NAME(  ::cpp::Int64Struct,ticks1,"ticks") = _hx_int64_add(other->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),other->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 463)			Int _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN( 463)			return (_hx_tmp1 == _hx_tmp2);
            		}
            		else {
HXLINE( 463)			return false;
            		}
HXDLIN( 463)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,sameDay,return )

Bool DateTime_Impl__obj::sameHour(::Array< ::Dynamic> this1,::Array< ::Dynamic> other){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","sameHour",0x5c16601f,"thx._DateTime.DateTime_Impl_.sameHour","thx/DateTime.hx",469,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 469)		Bool _hx_tmp = ::thx::_DateTime::DateTime_Impl__obj::sameDay(this1,other);
HXDLIN( 469)		if (_hx_tmp) {
HXLINE( 469)			HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 469)			Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_hour(ticks);
HXDLIN( 469)			HX_VARI_NAME(  ::cpp::Int64Struct,ticks1,"ticks") = _hx_int64_add(other->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),other->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 469)			Int _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_hour(ticks1);
HXDLIN( 469)			return (_hx_tmp1 == _hx_tmp2);
            		}
            		else {
HXLINE( 469)			return false;
            		}
HXDLIN( 469)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,sameHour,return )

Bool DateTime_Impl__obj::sameMinute(::Array< ::Dynamic> this1,::Array< ::Dynamic> other){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","sameMinute",0xdd49668f,"thx._DateTime.DateTime_Impl_.sameMinute","thx/DateTime.hx",475,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 475)		Bool _hx_tmp = ::thx::_DateTime::DateTime_Impl__obj::sameHour(this1,other);
HXDLIN( 475)		if (_hx_tmp) {
HXLINE( 475)			HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 475)			Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_minute(ticks);
HXDLIN( 475)			HX_VARI_NAME(  ::cpp::Int64Struct,ticks1,"ticks") = _hx_int64_add(other->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),other->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 475)			Int _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_minute(ticks1);
HXDLIN( 475)			return (_hx_tmp1 == _hx_tmp2);
            		}
            		else {
HXLINE( 475)			return false;
            		}
HXDLIN( 475)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,sameMinute,return )

Bool DateTime_Impl__obj::sameSecond(::Array< ::Dynamic> this1,::Array< ::Dynamic> other){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","sameSecond",0xee89532f,"thx._DateTime.DateTime_Impl_.sameSecond","thx/DateTime.hx",481,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 481)		Bool _hx_tmp = ::thx::_DateTime::DateTime_Impl__obj::sameMinute(this1,other);
HXDLIN( 481)		if (_hx_tmp) {
HXLINE( 481)			HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 481)			Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_second(ticks);
HXDLIN( 481)			HX_VARI_NAME(  ::cpp::Int64Struct,ticks1,"ticks") = _hx_int64_add(other->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),other->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 481)			Int _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_second(ticks1);
HXDLIN( 481)			return (_hx_tmp1 == _hx_tmp2);
            		}
            		else {
HXLINE( 481)			return false;
            		}
HXDLIN( 481)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,sameSecond,return )

::Array< ::Dynamic> DateTime_Impl__obj::withYear(::Array< ::Dynamic> this1,Int year){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","withYear",0x1f741b58,"thx._DateTime.DateTime_Impl_.withYear","thx/DateTime.hx",484,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(year,"year")
HXLINE( 484)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 484)		HX_VARI( Int,month) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 484)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks1,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 484)		HX_VARI( Int,day) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN( 484)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks2,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 484)		HX_VARI(  ::Dynamic,hour) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_hour(ticks2);
HXDLIN( 484)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks3,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 484)		HX_VARI(  ::Dynamic,minute) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_minute(ticks3);
HXDLIN( 484)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks4,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 484)		HX_VARI(  ::Dynamic,second) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_second(ticks4);
HXDLIN( 484)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks5,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 484)		HX_VARI(  ::Dynamic,millisecond) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_millisecond(ticks5);
HXDLIN( 484)		HX_VARI(  ::cpp::Int64Struct,offset) = this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >();
HXDLIN( 484)		HX_VARI(  ::cpp::Int64Struct,dateTime) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(year,month,day,hour,minute,second,millisecond);
HXDLIN( 484)		HX_VARI_NAME( ::Array< ::Dynamic>,this2,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime)->init(1,offset);
HXDLIN( 484)		 ::cpp::Int64Struct _hx_tmp = _hx_int64_sub(this2->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),offset);
HXDLIN( 484)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp))->init(1,this2->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,withYear,return )

::Array< ::Dynamic> DateTime_Impl__obj::withMonth(::Array< ::Dynamic> this1,Int month){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","withMonth",0x83fadd45,"thx._DateTime.DateTime_Impl_.withMonth","thx/DateTime.hx",487,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(month,"month")
HXLINE( 487)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 487)		HX_VARI( Int,year) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 487)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks1,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 487)		HX_VARI( Int,day) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN( 487)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks2,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 487)		HX_VARI(  ::Dynamic,hour) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_hour(ticks2);
HXDLIN( 487)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks3,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 487)		HX_VARI(  ::Dynamic,minute) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_minute(ticks3);
HXDLIN( 487)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks4,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 487)		HX_VARI(  ::Dynamic,second) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_second(ticks4);
HXDLIN( 487)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks5,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 487)		HX_VARI(  ::Dynamic,millisecond) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_millisecond(ticks5);
HXDLIN( 487)		HX_VARI(  ::cpp::Int64Struct,offset) = this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >();
HXDLIN( 487)		HX_VARI(  ::cpp::Int64Struct,dateTime) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(year,month,day,hour,minute,second,millisecond);
HXDLIN( 487)		HX_VARI_NAME( ::Array< ::Dynamic>,this2,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime)->init(1,offset);
HXDLIN( 487)		 ::cpp::Int64Struct _hx_tmp = _hx_int64_sub(this2->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),offset);
HXDLIN( 487)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp))->init(1,this2->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,withMonth,return )

::Array< ::Dynamic> DateTime_Impl__obj::withDay(::Array< ::Dynamic> this1,Int day){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","withDay",0x6ad75121,"thx._DateTime.DateTime_Impl_.withDay","thx/DateTime.hx",490,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(day,"day")
HXLINE( 490)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 490)		HX_VARI( Int,year) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 490)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks1,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 490)		HX_VARI( Int,month) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 490)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks2,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 490)		HX_VARI(  ::Dynamic,hour) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_hour(ticks2);
HXDLIN( 490)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks3,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 490)		HX_VARI(  ::Dynamic,minute) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_minute(ticks3);
HXDLIN( 490)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks4,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 490)		HX_VARI(  ::Dynamic,second) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_second(ticks4);
HXDLIN( 490)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks5,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 490)		HX_VARI(  ::Dynamic,millisecond) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_millisecond(ticks5);
HXDLIN( 490)		HX_VARI(  ::cpp::Int64Struct,offset) = this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >();
HXDLIN( 490)		HX_VARI(  ::cpp::Int64Struct,dateTime) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(year,month,day,hour,minute,second,millisecond);
HXDLIN( 490)		HX_VARI_NAME( ::Array< ::Dynamic>,this2,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime)->init(1,offset);
HXDLIN( 490)		 ::cpp::Int64Struct _hx_tmp = _hx_int64_sub(this2->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),offset);
HXDLIN( 490)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp))->init(1,this2->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,withDay,return )

::Array< ::Dynamic> DateTime_Impl__obj::withHour(::Array< ::Dynamic> this1,Int hour){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","withHour",0x143f22bf,"thx._DateTime.DateTime_Impl_.withHour","thx/DateTime.hx",493,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(hour,"hour")
HXLINE( 493)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 493)		HX_VARI( Int,year) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 493)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks1,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 493)		HX_VARI( Int,month) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 493)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks2,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 493)		HX_VARI( Int,day) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks2,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN( 493)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks3,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 493)		HX_VARI(  ::Dynamic,minute) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_minute(ticks3);
HXDLIN( 493)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks4,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 493)		HX_VARI(  ::Dynamic,second) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_second(ticks4);
HXDLIN( 493)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks5,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 493)		HX_VARI(  ::Dynamic,millisecond) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_millisecond(ticks5);
HXDLIN( 493)		HX_VARI(  ::cpp::Int64Struct,offset) = this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >();
HXDLIN( 493)		HX_VARI(  ::cpp::Int64Struct,dateTime) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(year,month,day,hour,minute,second,millisecond);
HXDLIN( 493)		HX_VARI_NAME( ::Array< ::Dynamic>,this2,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime)->init(1,offset);
HXDLIN( 493)		 ::cpp::Int64Struct _hx_tmp = _hx_int64_sub(this2->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),offset);
HXDLIN( 493)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp))->init(1,this2->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,withHour,return )

::Array< ::Dynamic> DateTime_Impl__obj::withMinute(::Array< ::Dynamic> this1,Int minute){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","withMinute",0x8320112f,"thx._DateTime.DateTime_Impl_.withMinute","thx/DateTime.hx",496,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(minute,"minute")
HXLINE( 496)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 496)		HX_VARI( Int,year) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 496)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks1,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 496)		HX_VARI( Int,month) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 496)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks2,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 496)		HX_VARI( Int,day) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks2,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN( 496)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks3,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 496)		HX_VARI(  ::Dynamic,hour) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_hour(ticks3);
HXDLIN( 496)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks4,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 496)		HX_VARI(  ::Dynamic,second) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_second(ticks4);
HXDLIN( 496)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks5,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 496)		HX_VARI(  ::Dynamic,millisecond) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_millisecond(ticks5);
HXDLIN( 496)		HX_VARI(  ::cpp::Int64Struct,offset) = this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >();
HXDLIN( 496)		HX_VARI(  ::cpp::Int64Struct,dateTime) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(year,month,day,hour,minute,second,millisecond);
HXDLIN( 496)		HX_VARI_NAME( ::Array< ::Dynamic>,this2,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime)->init(1,offset);
HXDLIN( 496)		 ::cpp::Int64Struct _hx_tmp = _hx_int64_sub(this2->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),offset);
HXDLIN( 496)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp))->init(1,this2->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,withMinute,return )

::Array< ::Dynamic> DateTime_Impl__obj::withSecond(::Array< ::Dynamic> this1,Int second){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","withSecond",0x945ffdcf,"thx._DateTime.DateTime_Impl_.withSecond","thx/DateTime.hx",499,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(second,"second")
HXLINE( 499)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 499)		HX_VARI( Int,year) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 499)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks1,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 499)		HX_VARI( Int,month) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 499)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks2,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 499)		HX_VARI( Int,day) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks2,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN( 499)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks3,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 499)		HX_VARI(  ::Dynamic,hour) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_hour(ticks3);
HXDLIN( 499)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks4,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 499)		HX_VARI(  ::Dynamic,minute) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_minute(ticks4);
HXDLIN( 499)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks5,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 499)		HX_VARI(  ::Dynamic,millisecond) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_millisecond(ticks5);
HXDLIN( 499)		HX_VARI(  ::cpp::Int64Struct,offset) = this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >();
HXDLIN( 499)		HX_VARI(  ::cpp::Int64Struct,dateTime) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(year,month,day,hour,minute,second,millisecond);
HXDLIN( 499)		HX_VARI_NAME( ::Array< ::Dynamic>,this2,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime)->init(1,offset);
HXDLIN( 499)		 ::cpp::Int64Struct _hx_tmp = _hx_int64_sub(this2->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),offset);
HXDLIN( 499)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp))->init(1,this2->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,withSecond,return )

::Array< ::Dynamic> DateTime_Impl__obj::withMillisecond(::Array< ::Dynamic> this1,Int millisecond){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","withMillisecond",0x94efb306,"thx._DateTime.DateTime_Impl_.withMillisecond","thx/DateTime.hx",502,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(millisecond,"millisecond")
HXLINE( 502)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 502)		HX_VARI( Int,year) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 502)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks1,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 502)		HX_VARI( Int,month) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 502)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks2,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 502)		HX_VARI( Int,day) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks2,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN( 502)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks3,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 502)		HX_VARI(  ::Dynamic,hour) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_hour(ticks3);
HXDLIN( 502)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks4,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 502)		HX_VARI(  ::Dynamic,minute) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_minute(ticks4);
HXDLIN( 502)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks5,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 502)		HX_VARI(  ::Dynamic,second) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_second(ticks5);
HXDLIN( 502)		HX_VARI(  ::cpp::Int64Struct,offset) = this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >();
HXDLIN( 502)		HX_VARI(  ::cpp::Int64Struct,dateTime) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create(year,month,day,hour,minute,second,millisecond);
HXDLIN( 502)		HX_VARI_NAME( ::Array< ::Dynamic>,this2,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime)->init(1,offset);
HXDLIN( 502)		 ::cpp::Int64Struct _hx_tmp = _hx_int64_sub(this2->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),offset);
HXDLIN( 502)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp))->init(1,this2->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,withMillisecond,return )

::Array< ::Dynamic> DateTime_Impl__obj::withOffset(::Array< ::Dynamic> this1, ::cpp::Int64Struct offset){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","withOffset",0x9057c5ee,"thx._DateTime.DateTime_Impl_.withOffset","thx/DateTime.hx",505,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(offset,"offset")
HXLINE( 505)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >())->init(1,offset);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,withOffset,return )

::Array< ::Dynamic> DateTime_Impl__obj::add(::Array< ::Dynamic> this1, ::cpp::Int64Struct time){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","add",0x774011cc,"thx._DateTime.DateTime_Impl_.add","thx/DateTime.hx",508,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(time,"time")
HXLINE( 508)		 ::cpp::Int64Struct _hx_tmp = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),time);
HXDLIN( 508)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp))->init(1,this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,add,return )

::Array< ::Dynamic> DateTime_Impl__obj::addTicks(::Array< ::Dynamic> this1, ::cpp::Int64Struct ticks){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","addTicks",0x860b890a,"thx._DateTime.DateTime_Impl_.addTicks","thx/DateTime.hx",511,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(ticks,"ticks")
HXLINE( 511)		 ::cpp::Int64Struct _hx_tmp = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),ticks);
HXDLIN( 511)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp))->init(1,this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,addTicks,return )

::Array< ::Dynamic> DateTime_Impl__obj::subtract(::Array< ::Dynamic> this1, ::cpp::Int64Struct time){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","subtract",0xf491a989,"thx._DateTime.DateTime_Impl_.subtract","thx/DateTime.hx",514,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(time,"time")
HXLINE( 514)		 ::cpp::Int64Struct _hx_tmp = _hx_int64_sub(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),time);
HXDLIN( 514)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp))->init(1,this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,subtract,return )

 ::cpp::Int64Struct DateTime_Impl__obj::subtractDate(::Array< ::Dynamic> this1,::Array< ::Dynamic> date){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","subtractDate",0xd83c2457,"thx._DateTime.DateTime_Impl_.subtractDate","thx/DateTime.hx",516,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(date,"date")
HXLINE( 517)		 ::cpp::Int64Struct _hx_tmp = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),date->__get((int)0).StaticCast<  ::cpp::Int64Struct >());
HXLINE( 519)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp))->init(1,this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >())->__get((int)0).StaticCast<  ::cpp::Int64Struct >();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,subtractDate,return )

::Array< ::Dynamic> DateTime_Impl__obj::addDays(::Array< ::Dynamic> this1,Float days){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","addDays",0x8a176e83,"thx._DateTime.DateTime_Impl_.addDays","thx/DateTime.hx",523,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(days,"days")
HXLINE( 523)		HX_VARI(  ::cpp::Int64Struct,dateTime) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::addScaled(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),days,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::millisPerDay);
HXDLIN( 523)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime)->init(1,this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,addDays,return )

::Array< ::Dynamic> DateTime_Impl__obj::addHours(::Array< ::Dynamic> this1,Float hours){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","addHours",0xa1418963,"thx._DateTime.DateTime_Impl_.addHours","thx/DateTime.hx",526,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(hours,"hours")
HXLINE( 526)		HX_VARI(  ::cpp::Int64Struct,dateTime) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::addScaled(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),hours,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::millisPerHour);
HXDLIN( 526)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime)->init(1,this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,addHours,return )

::Array< ::Dynamic> DateTime_Impl__obj::addMilliseconds(::Array< ::Dynamic> this1,Int milliseconds){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","addMilliseconds",0x4448edfe,"thx._DateTime.DateTime_Impl_.addMilliseconds","thx/DateTime.hx",529,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(milliseconds,"milliseconds")
HXLINE( 529)		HX_VARI(  ::cpp::Int64Struct,dateTime) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::addScaled(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),milliseconds,(int)1);
HXDLIN( 529)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime)->init(1,this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,addMilliseconds,return )

::Array< ::Dynamic> DateTime_Impl__obj::addMinutes(::Array< ::Dynamic> this1,Float minutes){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","addMinutes",0xffb6beb3,"thx._DateTime.DateTime_Impl_.addMinutes","thx/DateTime.hx",532,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(minutes,"minutes")
HXLINE( 532)		HX_VARI(  ::cpp::Int64Struct,dateTime) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::addScaled(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),minutes,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::millisPerMinute);
HXDLIN( 532)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime)->init(1,this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,addMinutes,return )

::Array< ::Dynamic> DateTime_Impl__obj::addMonths(::Array< ::Dynamic> this1,Int months){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","addMonths",0x7340781f,"thx._DateTime.DateTime_Impl_.addMonths","thx/DateTime.hx",535,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(months,"months")
HXLINE( 535)		HX_VARI(  ::cpp::Int64Struct,dateTime) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::addMonths(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),months);
HXDLIN( 535)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime)->init(1,this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,addMonths,return )

::Array< ::Dynamic> DateTime_Impl__obj::addSeconds(::Array< ::Dynamic> this1,Float seconds){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","addSeconds",0x0665de13,"thx._DateTime.DateTime_Impl_.addSeconds","thx/DateTime.hx",538,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(seconds,"seconds")
HXLINE( 538)		HX_VARI(  ::cpp::Int64Struct,dateTime) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::addScaled(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),seconds,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::millisPerSecond);
HXDLIN( 538)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime)->init(1,this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,addSeconds,return )

::Array< ::Dynamic> DateTime_Impl__obj::addYears(::Array< ::Dynamic> this1,Int years){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","addYears",0x646616aa,"thx._DateTime.DateTime_Impl_.addYears","thx/DateTime.hx",541,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(years,"years")
HXLINE( 541)		HX_VARI(  ::cpp::Int64Struct,dateTime) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::addMonths(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),(years * (int)12));
HXDLIN( 541)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime)->init(1,this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,addYears,return )

Int DateTime_Impl__obj::compareTo(::Array< ::Dynamic> this1,::Array< ::Dynamic> other){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","compareTo",0xf60a476b,"thx._DateTime.DateTime_Impl_.compareTo","thx/DateTime.hx",544,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 545)		Bool _hx_tmp;
HXDLIN( 545)		if (hx::IsNull( other )) {
HXLINE( 545)			_hx_tmp = hx::IsNull( this1 );
            		}
            		else {
HXLINE( 545)			_hx_tmp = false;
            		}
HXDLIN( 545)		if (_hx_tmp) {
HXLINE( 545)			return (int)0;
            		}
HXLINE( 546)		if (hx::IsNull( this1 )) {
HXLINE( 546)			return (int)-1;
            		}
            		else {
HXLINE( 547)			if (hx::IsNull( other )) {
HXLINE( 547)				return (int)1;
            			}
            		}
HXLINE( 548)		return ::thx::Int64s_obj::compare(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),other->__get((int)0).StaticCast<  ::cpp::Int64Struct >());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,compareTo,return )

Bool DateTime_Impl__obj::equalsTo(::Array< ::Dynamic> this1,::Array< ::Dynamic> that){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","equalsTo",0xd1baba0f,"thx._DateTime.DateTime_Impl_.equalsTo","thx/DateTime.hx",552,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 552)		return _hx_int64_eq(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),that->__get((int)0).StaticCast<  ::cpp::Int64Struct >());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,equalsTo,return )

Bool DateTime_Impl__obj::equals(::Array< ::Dynamic> self,::Array< ::Dynamic> that){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","equals",0x7561ab74,"thx._DateTime.DateTime_Impl_.equals","thx/DateTime.hx",556,0x407b9ed8)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 556)		return _hx_int64_eq(self->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),that->__get((int)0).StaticCast<  ::cpp::Int64Struct >());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,equals,return )

Bool DateTime_Impl__obj::notEqualsTo(::Array< ::Dynamic> this1,::Array< ::Dynamic> that){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","notEqualsTo",0x841a2878,"thx._DateTime.DateTime_Impl_.notEqualsTo","thx/DateTime.hx",560,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 560)		return _hx_int64_neq(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),that->__get((int)0).StaticCast<  ::cpp::Int64Struct >());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,notEqualsTo,return )

Bool DateTime_Impl__obj::notEquals(::Array< ::Dynamic> self,::Array< ::Dynamic> that){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","notEquals",0x30897d9d,"thx._DateTime.DateTime_Impl_.notEquals","thx/DateTime.hx",564,0x407b9ed8)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 564)		return _hx_int64_neq(self->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),that->__get((int)0).StaticCast<  ::cpp::Int64Struct >());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,notEquals,return )

Bool DateTime_Impl__obj::nearEqualsTo(::Array< ::Dynamic> this1,::Array< ::Dynamic> other, ::cpp::Int64Struct span){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","nearEqualsTo",0x0331ed97,"thx._DateTime.DateTime_Impl_.nearEqualsTo","thx/DateTime.hx",567,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(span,"span")
HXLINE( 568)		 ::cpp::Int64Struct _hx_tmp = _hx_int64_sub(other->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 568)		HX_VARI(  ::cpp::Int64Struct,ticks) = ::thx::Int64s_obj::abs(_hx_tmp);
HXLINE( 569)		HX_VARI_NAME(  ::cpp::Int64Struct,this2,"this") = ::thx::_Time::Time_Impl__obj::abs(span);
HXDLIN( 569)		Int _hx_tmp1 = _hx_int64_compare(ticks,this2);
HXDLIN( 569)		return (_hx_tmp1 <= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(DateTime_Impl__obj,nearEqualsTo,return )

Bool DateTime_Impl__obj::greaterThan(::Array< ::Dynamic> this1,::Array< ::Dynamic> that){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","greaterThan",0xf5390426,"thx._DateTime.DateTime_Impl_.greaterThan","thx/DateTime.hx",573,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 573)		Int _hx_tmp = ::thx::_DateTime::DateTime_Impl__obj::compareTo(this1,that);
HXDLIN( 573)		return (_hx_tmp > (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,greaterThan,return )

Bool DateTime_Impl__obj::greater(::Array< ::Dynamic> self,::Array< ::Dynamic> that){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","greater",0xc3376225,"thx._DateTime.DateTime_Impl_.greater","thx/DateTime.hx",577,0x407b9ed8)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 577)		Int _hx_tmp = ::thx::_DateTime::DateTime_Impl__obj::compareTo(self,that);
HXDLIN( 577)		return (_hx_tmp > (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,greater,return )

Bool DateTime_Impl__obj::greaterEqualsTo(::Array< ::Dynamic> this1,::Array< ::Dynamic> that){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","greaterEqualsTo",0xe839d0df,"thx._DateTime.DateTime_Impl_.greaterEqualsTo","thx/DateTime.hx",580,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 580)		Int _hx_tmp = ::thx::_DateTime::DateTime_Impl__obj::compareTo(this1,that);
HXDLIN( 580)		return (_hx_tmp >= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,greaterEqualsTo,return )

Bool DateTime_Impl__obj::greaterEquals(::Array< ::Dynamic> self,::Array< ::Dynamic> that){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","greaterEquals",0xb50e6e44,"thx._DateTime.DateTime_Impl_.greaterEquals","thx/DateTime.hx",584,0x407b9ed8)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 584)		Int _hx_tmp = ::thx::_DateTime::DateTime_Impl__obj::compareTo(self,that);
HXDLIN( 584)		return (_hx_tmp >= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,greaterEquals,return )

Bool DateTime_Impl__obj::lessTo(::Array< ::Dynamic> this1,::Array< ::Dynamic> that){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","lessTo",0x57cd6269,"thx._DateTime.DateTime_Impl_.lessTo","thx/DateTime.hx",587,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 587)		Int _hx_tmp = ::thx::_DateTime::DateTime_Impl__obj::compareTo(this1,that);
HXDLIN( 587)		return (_hx_tmp < (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,lessTo,return )

Bool DateTime_Impl__obj::less(::Array< ::Dynamic> self,::Array< ::Dynamic> that){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","less",0xe815a94e,"thx._DateTime.DateTime_Impl_.less","thx/DateTime.hx",591,0x407b9ed8)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 591)		Int _hx_tmp = ::thx::_DateTime::DateTime_Impl__obj::compareTo(self,that);
HXDLIN( 591)		return (_hx_tmp < (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,less,return )

Bool DateTime_Impl__obj::lessEqualsTo(::Array< ::Dynamic> this1,::Array< ::Dynamic> that){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","lessEqualsTo",0xd7e0e908,"thx._DateTime.DateTime_Impl_.lessEqualsTo","thx/DateTime.hx",594,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 594)		Int _hx_tmp = ::thx::_DateTime::DateTime_Impl__obj::compareTo(this1,that);
HXDLIN( 594)		return (_hx_tmp <= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,lessEqualsTo,return )

Bool DateTime_Impl__obj::lessEquals(::Array< ::Dynamic> self,::Array< ::Dynamic> that){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","lessEquals",0xf14bfa2d,"thx._DateTime.DateTime_Impl_.lessEquals","thx/DateTime.hx",598,0x407b9ed8)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 598)		Int _hx_tmp = ::thx::_DateTime::DateTime_Impl__obj::compareTo(self,that);
HXDLIN( 598)		return (_hx_tmp <= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,lessEquals,return )

::Array< ::Dynamic> DateTime_Impl__obj::changeOffset(::Array< ::Dynamic> this1, ::cpp::Int64Struct newoffset){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","changeOffset",0xb7f96418,"thx._DateTime.DateTime_Impl_.changeOffset","thx/DateTime.hx",601,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newoffset,"newoffset")
HXLINE( 601)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 601)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks1,"ticks") = _hx_int64_sub(ticks,newoffset);
HXDLIN( 601)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,ticks1)->init(1,newoffset);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DateTime_Impl__obj,changeOffset,return )

 ::cpp::Int64Struct DateTime_Impl__obj::toUtc(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","toUtc",0xcc987ed4,"thx._DateTime.DateTime_Impl_.toUtc","thx/DateTime.hx",604,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 604)		return this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,toUtc,return )

 ::cpp::Int64Struct DateTime_Impl__obj::clockDateTime(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","clockDateTime",0xdc17c4b4,"thx._DateTime.DateTime_Impl_.clockDateTime","thx/DateTime.hx",607,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 607)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 607)		return ticks;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,clockDateTime,return )

::String DateTime_Impl__obj::toString(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","toString",0x34ef0521,"thx._DateTime.DateTime_Impl_.toString","thx/DateTime.hx",610,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 611)		if (hx::IsNull( this1 )) {
HXLINE( 612)			return HX_("",00,00,00,00);
            		}
HXLINE( 613)		HX_VARI(  ::cpp::Int64Struct,ticks) = ::thx::Int64s_obj::abs(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 613)		HX_VARI( ::Array< ::Dynamic>,abs) = ::Array_obj< ::Dynamic>::__new(2)->init(0,ticks)->init(1,this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXLINE( 614)		HX_VAR( ::String,decimals);
HXDLIN( 614)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks1,"ticks") = _hx_int64_add(abs->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),abs->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 614)		Int _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_tickInSecond(ticks1);
HXDLIN( 614)		if ((_hx_tmp != (int)0)) {
HXLINE( 614)			HX_VARI_NAME(  ::cpp::Int64Struct,ticks2,"ticks") = _hx_int64_add(abs->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),abs->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 614)			Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_tickInSecond(ticks2);
HXDLIN( 614)			::String _hx_tmp2 = ::thx::Strings_obj::trimCharsRight(::thx::Ints_obj::lpad(_hx_tmp1,HX_("0",30,00,00,00),(int)7),HX_(")",29,00,00,00));
HXDLIN( 614)			decimals = (HX_(".",2e,00,00,00) + _hx_tmp2);
            		}
            		else {
HXLINE( 614)			decimals = HX_("",00,00,00,00);
            		}
HXLINE( 615)		HX_VARI_NAME(  ::cpp::Int64Struct,this2,"this") = this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >();
HXDLIN( 615)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::Int64s_obj::zero;
HXDLIN( 615)		Int _hx_tmp3 = _hx_int64_compare(this2,b);
HXDLIN( 615)		HX_VARI( Bool,isneg) = (_hx_tmp3 < (int)0);
HXLINE( 616)		::String _hx_tmp4;
HXDLIN( 616)		if (isneg) {
HXLINE( 616)			_hx_tmp4 = HX_("-",2d,00,00,00);
            		}
            		else {
HXLINE( 616)			_hx_tmp4 = HX_("",00,00,00,00);
            		}
HXDLIN( 616)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks3,"ticks") = _hx_int64_add(abs->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),abs->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 616)		Int _hx_tmp5 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks3,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 616)		::String _hx_tmp6 = ((HX_("",00,00,00,00) + _hx_tmp5) + HX_("-",2d,00,00,00));
HXDLIN( 616)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks4,"ticks") = _hx_int64_add(abs->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),abs->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 616)		Int _hx_tmp7 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks4,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 616)		::String _hx_tmp8 = ((_hx_tmp6 + ::thx::Ints_obj::lpad(_hx_tmp7,HX_("0",30,00,00,00),(int)2)) + HX_("-",2d,00,00,00));
HXDLIN( 616)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks5,"ticks") = _hx_int64_add(abs->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),abs->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 616)		Int _hx_tmp9 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks5,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN( 616)		::String _hx_tmp10 = ((_hx_tmp8 + ::thx::Ints_obj::lpad(_hx_tmp9,HX_("0",30,00,00,00),(int)2)) + HX_("T",54,00,00,00));
HXDLIN( 616)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks6,"ticks") = _hx_int64_add(abs->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),abs->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 616)		Int _hx_tmp11 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_hour(ticks6);
HXDLIN( 616)		::String _hx_tmp12 = ((_hx_tmp10 + ::thx::Ints_obj::lpad(_hx_tmp11,HX_("0",30,00,00,00),(int)2)) + HX_(":",3a,00,00,00));
HXDLIN( 616)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks7,"ticks") = _hx_int64_add(abs->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),abs->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 616)		Int _hx_tmp13 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_minute(ticks7);
HXDLIN( 616)		::String _hx_tmp14 = ((_hx_tmp12 + ::thx::Ints_obj::lpad(_hx_tmp13,HX_("0",30,00,00,00),(int)2)) + HX_(":",3a,00,00,00));
HXDLIN( 616)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks8,"ticks") = _hx_int64_add(abs->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),abs->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 616)		Int _hx_tmp15 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_second(ticks8);
HXDLIN( 616)		::String _hx_tmp16 = ((_hx_tmp14 + ::thx::Ints_obj::lpad(_hx_tmp15,HX_("0",30,00,00,00),(int)2)) + decimals);
HXDLIN( 616)		::String _hx_tmp17 = ::thx::_Time::Time_Impl__obj::toGmtString(this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 616)		return (_hx_tmp4 + (_hx_tmp16 + _hx_tmp17));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,toString,return )

 ::cpp::Int64Struct DateTime_Impl__obj::get_utc(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","get_utc",0x3244c6e6,"thx._DateTime.DateTime_Impl_.get_utc","thx/DateTime.hx",620,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 620)		return this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,get_utc,return )

 ::cpp::Int64Struct DateTime_Impl__obj::get_offset(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","get_offset",0x95150311,"thx._DateTime.DateTime_Impl_.get_offset","thx/DateTime.hx",623,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 623)		return this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,get_offset,return )

Int DateTime_Impl__obj::get_year(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","get_year",0xcc82b9bb,"thx._DateTime.DateTime_Impl_.get_year","thx/DateTime.hx",626,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 626)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 626)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,get_year,return )

Int DateTime_Impl__obj::get_month(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","get_month",0x43b6d582,"thx._DateTime.DateTime_Impl_.get_month","thx/DateTime.hx",629,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 629)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 629)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,get_month,return )

Int DateTime_Impl__obj::get_day(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","get_day",0x3237d01e,"thx._DateTime.DateTime_Impl_.get_day","thx/DateTime.hx",632,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 632)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 632)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,get_day,return )

Int DateTime_Impl__obj::get_hour(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","get_hour",0xc14dc122,"thx._DateTime.DateTime_Impl_.get_hour","thx/DateTime.hx",635,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 635)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 635)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_hour(ticks);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,get_hour,return )

Int DateTime_Impl__obj::get_minute(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","get_minute",0x87dd4e52,"thx._DateTime.DateTime_Impl_.get_minute","thx/DateTime.hx",638,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 638)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 638)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_minute(ticks);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,get_minute,return )

Int DateTime_Impl__obj::get_dayOfWeek(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","get_dayOfWeek",0x1056f369,"thx._DateTime.DateTime_Impl_.get_dayOfWeek","thx/DateTime.hx",641,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 641)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 641)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_dayOfWeek(ticks);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,get_dayOfWeek,return )

Int DateTime_Impl__obj::get_dayOfYear(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","get_dayOfYear",0x11a95d32,"thx._DateTime.DateTime_Impl_.get_dayOfYear","thx/DateTime.hx",644,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 644)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 644)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY_OF_YEAR);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,get_dayOfYear,return )

Int DateTime_Impl__obj::get_millisecond(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","get_millisecond",0x0692f703,"thx._DateTime.DateTime_Impl_.get_millisecond","thx/DateTime.hx",647,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 647)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 647)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_millisecond(ticks);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,get_millisecond,return )

Int DateTime_Impl__obj::get_microsecond(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","get_microsecond",0xecc5bb3a,"thx._DateTime.DateTime_Impl_.get_microsecond","thx/DateTime.hx",650,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 650)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 650)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_microsecond(ticks);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,get_microsecond,return )

Int DateTime_Impl__obj::get_tickInSecond(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","get_tickInSecond",0xe6eadbb4,"thx._DateTime.DateTime_Impl_.get_tickInSecond","thx/DateTime.hx",653,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 653)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 653)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_tickInSecond(ticks);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,get_tickInSecond,return )

Int DateTime_Impl__obj::get_second(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","get_second",0x991d3af2,"thx._DateTime.DateTime_Impl_.get_second","thx/DateTime.hx",656,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 656)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 656)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_second(ticks);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,get_second,return )

 ::cpp::Int64Struct DateTime_Impl__obj::get_timeOfDay(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","get_timeOfDay",0xad73417a,"thx._DateTime.DateTime_Impl_.get_timeOfDay","thx/DateTime.hx",659,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 659)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 659)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerDayI64;
HXDLIN( 659)		Bool _hx_tmp = _hx_int64_is_zero(ticks);
HXDLIN( 659)		if (_hx_tmp) {
HXLINE( 659)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 659)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks1,"ticks") = _hx_int64_mod(ticks,b);
HXDLIN( 659)		return ticks1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,get_timeOfDay,return )

Bool DateTime_Impl__obj::get_isInLeapYear(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","get_isInLeapYear",0x2abf3912,"thx._DateTime.DateTime_Impl_.get_isInLeapYear","thx/DateTime.hx",662,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 662)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 662)		Int _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 662)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::isLeapYear(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,get_isInLeapYear,return )

Int DateTime_Impl__obj::get_monthDays(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","get_monthDays",0xb7994539,"thx._DateTime.DateTime_Impl_.get_monthDays","thx/DateTime.hx",665,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 665)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 665)		Int _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN( 665)		HX_VARI_NAME(  ::cpp::Int64Struct,ticks1,"ticks") = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN( 665)		Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN( 665)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysInMonth(_hx_tmp,_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,get_monthDays,return )

::Array< ::Dynamic> DateTime_Impl__obj::self(::Array< ::Dynamic> this1){
            	HX_STACK_FRAME("thx._DateTime.DateTime_Impl_","self",0xecb62181,"thx._DateTime.DateTime_Impl_.self","thx/DateTime.hx",668,0x407b9ed8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 668)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTime_Impl__obj,self,return )


DateTime_Impl__obj::DateTime_Impl__obj()
{
}

bool DateTime_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"now") ) { outValue = now_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ord") ) { outValue = ord_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"min") ) { outValue = min_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"max") ) { outValue = max_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"jump") ) { outValue = jump_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"less") ) { outValue = less_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"self") ) { outValue = self_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"toUtc") ) { outValue = toUtc_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"nowUtc") ) { outValue = nowUtc_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"snapTo") ) { outValue = snapTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lessTo") ) { outValue = lessTo_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"compare") ) { outValue = compare_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prevDay") ) { outValue = prevDay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nextDay") ) { outValue = nextDay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sameDay") ) { outValue = sameDay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withDay") ) { outValue = withDay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addDays") ) { outValue = addDays_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"greater") ) { outValue = greater_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_utc") ) { outValue = get_utc_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_day") ) { outValue = get_day_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fromDate") ) { outValue = fromDate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromTime") ) { outValue = fromTime_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prevYear") ) { outValue = prevYear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nextYear") ) { outValue = nextYear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prevWeek") ) { outValue = prevWeek_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nextWeek") ) { outValue = nextWeek_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prevHour") ) { outValue = prevHour_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nextHour") ) { outValue = nextHour_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"snapNext") ) { outValue = snapNext_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"snapPrev") ) { outValue = snapPrev_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sameYear") ) { outValue = sameYear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sameHour") ) { outValue = sameHour_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withYear") ) { outValue = withYear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withHour") ) { outValue = withHour_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addTicks") ) { outValue = addTicks_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subtract") ) { outValue = subtract_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addHours") ) { outValue = addHours_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addYears") ) { outValue = addYears_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equalsTo") ) { outValue = equalsTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_year") ) { outValue = get_year_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_hour") ) { outValue = get_hour_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"daysRange") ) { outValue = daysRange_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prevMonth") ) { outValue = prevMonth_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nextMonth") ) { outValue = nextMonth_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sameMonth") ) { outValue = sameMonth_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withMonth") ) { outValue = withMonth_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addMonths") ) { outValue = addMonths_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"compareTo") ) { outValue = compareTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"notEquals") ) { outValue = notEquals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_month") ) { outValue = get_month_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prevMinute") ) { outValue = prevMinute_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nextMinute") ) { outValue = nextMinute_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prevSecond") ) { outValue = prevSecond_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nextSecond") ) { outValue = nextSecond_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sameMinute") ) { outValue = sameMinute_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sameSecond") ) { outValue = sameSecond_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withMinute") ) { outValue = withMinute_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withSecond") ) { outValue = withSecond_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withOffset") ) { outValue = withOffset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addMinutes") ) { outValue = addMinutes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addSeconds") ) { outValue = addSeconds_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lessEquals") ) { outValue = lessEquals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_offset") ) { outValue = get_offset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_minute") ) { outValue = get_minute_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_second") ) { outValue = get_second_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"localOffset") ) { outValue = localOffset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"notEqualsTo") ) { outValue = notEqualsTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"greaterThan") ) { outValue = greaterThan_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"subtractDate") ) { outValue = subtractDate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nearEqualsTo") ) { outValue = nearEqualsTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lessEqualsTo") ) { outValue = lessEqualsTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"changeOffset") ) { outValue = changeOffset_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"snapToWeekDay") ) { outValue = snapToWeekDay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"greaterEquals") ) { outValue = greaterEquals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clockDateTime") ) { outValue = clockDateTime_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_dayOfWeek") ) { outValue = get_dayOfWeek_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_dayOfYear") ) { outValue = get_dayOfYear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_timeOfDay") ) { outValue = get_timeOfDay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_monthDays") ) { outValue = get_monthDays_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"daysInThisMonth") ) { outValue = daysInThisMonth_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"snapNextWeekDay") ) { outValue = snapNextWeekDay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"snapPrevWeekDay") ) { outValue = snapPrevWeekDay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withMillisecond") ) { outValue = withMillisecond_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addMilliseconds") ) { outValue = addMilliseconds_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"greaterEqualsTo") ) { outValue = greaterEqualsTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_millisecond") ) { outValue = get_millisecond_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_microsecond") ) { outValue = get_microsecond_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_tickInSecond") ) { outValue = get_tickInSecond_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_isInLeapYear") ) { outValue = get_isInLeapYear_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"fromDateWithOffset") ) { outValue = fromDateWithOffset_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *DateTime_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *DateTime_Impl__obj_sStaticStorageInfo = 0;
#endif

static void DateTime_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DateTime_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DateTime_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DateTime_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class DateTime_Impl__obj::__mClass;

static ::String DateTime_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("localOffset","\x5e","\x37","\x7a","\x1d"),
	HX_HCSTRING("now","\x16","\xd9","\x53","\x00"),
	HX_HCSTRING("nowUtc","\xae","\x5d","\xa5","\x33"),
	HX_HCSTRING("fromDate","\xb8","\x24","\x2f","\xa0"),
	HX_HCSTRING("fromDateWithOffset","\x11","\x09","\x9c","\x7a"),
	HX_HCSTRING("fromTime","\x97","\x9a","\xc8","\xaa"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	HX_HCSTRING("daysRange","\xa6","\xf7","\x66","\x2c"),
	HX_HCSTRING("compare","\xa5","\x18","\x69","\x83"),
	HX_HCSTRING("ord","\xe1","\x9d","\x54","\x00"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("min","\x92","\x11","\x53","\x00"),
	HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"),
	HX_HCSTRING("jump","\xee","\xc4","\x69","\x46"),
	HX_HCSTRING("daysInThisMonth","\x06","\xe2","\xf6","\xf2"),
	HX_HCSTRING("prevYear","\x50","\xaa","\x15","\x19"),
	HX_HCSTRING("nextYear","\x50","\x70","\x14","\xfc"),
	HX_HCSTRING("prevMonth","\x4d","\x67","\xb6","\xf7"),
	HX_HCSTRING("nextMonth","\x4d","\xe1","\xa4","\xb3"),
	HX_HCSTRING("prevWeek","\x87","\x40","\xc3","\x17"),
	HX_HCSTRING("nextWeek","\x87","\x06","\xc2","\xfa"),
	HX_HCSTRING("prevDay","\x29","\xc9","\xbe","\x3b"),
	HX_HCSTRING("nextDay","\x29","\xc3","\x3a","\xa5"),
	HX_HCSTRING("prevHour","\xb7","\xb1","\xe0","\x0d"),
	HX_HCSTRING("nextHour","\xb7","\x77","\xdf","\xf0"),
	HX_HCSTRING("prevMinute","\x27","\x4e","\x7d","\x53"),
	HX_HCSTRING("nextMinute","\x27","\x94","\x39","\x08"),
	HX_HCSTRING("prevSecond","\xc7","\x3a","\xbd","\x64"),
	HX_HCSTRING("nextSecond","\xc7","\x80","\x79","\x19"),
	HX_HCSTRING("snapToWeekDay","\xe3","\xa6","\xe7","\x80"),
	HX_HCSTRING("snapNextWeekDay","\xeb","\x27","\x9a","\xa4"),
	HX_HCSTRING("snapPrevWeekDay","\xeb","\x2d","\x99","\x34"),
	HX_HCSTRING("snapNext","\x5d","\xf4","\x3c","\x09"),
	HX_HCSTRING("snapPrev","\x5d","\x2e","\x99","\x0a"),
	HX_HCSTRING("snapTo","\x65","\x46","\x91","\x91"),
	HX_HCSTRING("sameYear","\x43","\x24","\xcb","\x6a"),
	HX_HCSTRING("sameMonth","\xfa","\xa1","\xcb","\x24"),
	HX_HCSTRING("sameDay","\x96","\x0e","\x66","\x7c"),
	HX_HCSTRING("sameHour","\xaa","\x2b","\x96","\x5f"),
	HX_HCSTRING("sameMinute","\xda","\x6a","\xfb","\x98"),
	HX_HCSTRING("sameSecond","\x7a","\x57","\x3b","\xaa"),
	HX_HCSTRING("withYear","\xe3","\xe6","\xf3","\x22"),
	HX_HCSTRING("withMonth","\x5a","\x2b","\x4d","\x90"),
	HX_HCSTRING("withDay","\xf6","\x7f","\x60","\x5f"),
	HX_HCSTRING("withHour","\x4a","\xee","\xbe","\x17"),
	HX_HCSTRING("withMinute","\x7a","\x15","\xd2","\x3e"),
	HX_HCSTRING("withSecond","\x1a","\x02","\x12","\x50"),
	HX_HCSTRING("withMillisecond","\xdb","\x3e","\x33","\x9e"),
	HX_HCSTRING("withOffset","\x39","\xca","\x09","\x4c"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("addTicks","\x95","\x54","\x8b","\x89"),
	HX_HCSTRING("subtract","\x14","\x75","\x11","\xf8"),
	HX_HCSTRING("subtractDate","\x62","\x11","\xb0","\x67"),
	HX_HCSTRING("addDays","\x58","\x9d","\xa0","\x7e"),
	HX_HCSTRING("addHours","\xee","\x54","\xc1","\xa4"),
	HX_HCSTRING("addMilliseconds","\xd3","\x79","\x8c","\x4d"),
	HX_HCSTRING("addMinutes","\xfe","\xc2","\x68","\xbb"),
	HX_HCSTRING("addMonths","\x34","\xc6","\x92","\x7f"),
	HX_HCSTRING("addSeconds","\x5e","\xe2","\x17","\xc2"),
	HX_HCSTRING("addYears","\x35","\xe2","\xe5","\x67"),
	HX_HCSTRING("compareTo","\x80","\x95","\x5c","\x02"),
	HX_HCSTRING("equalsTo","\x9a","\x85","\x3a","\xd5"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("notEqualsTo","\xcd","\xe5","\x2b","\x04"),
	HX_HCSTRING("notEquals","\xb2","\xcb","\xdb","\x3c"),
	HX_HCSTRING("nearEqualsTo","\xa2","\xda","\xa5","\x92"),
	HX_HCSTRING("greaterThan","\x7b","\xc1","\x4a","\x75"),
	HX_HCSTRING("greater","\xfa","\x90","\xc0","\xb7"),
	HX_HCSTRING("greaterEqualsTo","\xb4","\x5c","\x7d","\xf1"),
	HX_HCSTRING("greaterEquals","\xd9","\xea","\x09","\xab"),
	HX_HCSTRING("lessTo","\x34","\xa5","\x5e","\xa2"),
	HX_HCSTRING("less","\x59","\x13","\xb0","\x47"),
	HX_HCSTRING("lessEqualsTo","\x13","\xd6","\x54","\x67"),
	HX_HCSTRING("lessEquals","\x78","\xfe","\xfd","\xac"),
	HX_HCSTRING("changeOffset","\x23","\x51","\x6d","\x47"),
	HX_HCSTRING("toUtc","\x69","\xde","\x1a","\x14"),
	HX_HCSTRING("clockDateTime","\x49","\x41","\x13","\xd2"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("get_utc","\xbb","\xf5","\xcd","\x26"),
	HX_HCSTRING("get_offset","\x5c","\x07","\xc7","\x50"),
	HX_HCSTRING("get_year","\x46","\x85","\x02","\xd0"),
	HX_HCSTRING("get_month","\x97","\x23","\x09","\x50"),
	HX_HCSTRING("get_day","\xf3","\xfe","\xc0","\x26"),
	HX_HCSTRING("get_hour","\xad","\x8c","\xcd","\xc4"),
	HX_HCSTRING("get_minute","\x9d","\x52","\x8f","\x43"),
	HX_HCSTRING("get_dayOfWeek","\xfe","\x6f","\x52","\x06"),
	HX_HCSTRING("get_dayOfYear","\xc7","\xd9","\xa4","\x07"),
	HX_HCSTRING("get_millisecond","\xd8","\x82","\xd6","\x0f"),
	HX_HCSTRING("get_microsecond","\x0f","\x47","\x09","\xf6"),
	HX_HCSTRING("get_tickInSecond","\x3f","\xaa","\xc1","\xf8"),
	HX_HCSTRING("get_second","\x3d","\x3f","\xcf","\x54"),
	HX_HCSTRING("get_timeOfDay","\x0f","\xbe","\x6e","\xa3"),
	HX_HCSTRING("get_isInLeapYear","\x9d","\x07","\x96","\x3c"),
	HX_HCSTRING("get_monthDays","\xce","\xc1","\x94","\xad"),
	HX_HCSTRING("self","\x8c","\x8b","\x50","\x4c"),
	::String(null())
};

void DateTime_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx._DateTime.DateTime_Impl_","\x99","\x8e","\xe0","\xe9");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DateTime_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = DateTime_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(DateTime_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< DateTime_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DateTime_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DateTime_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DateTime_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace _DateTime
