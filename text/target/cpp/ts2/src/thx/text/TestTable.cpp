// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_text_Table
#include <thx/text/Table.h>
#endif
#ifndef INCLUDED_thx_text_TestTable
#include <thx/text/TestTable.h>
#endif
#ifndef INCLUDED_thx_text_table_Canvas
#include <thx/text/table/Canvas.h>
#endif
#ifndef INCLUDED_thx_text_table_Cell
#include <thx/text/table/Cell.h>
#endif
#ifndef INCLUDED_thx_text_table_CellSet
#include <thx/text/table/CellSet.h>
#endif
#ifndef INCLUDED_thx_text_table_CellType
#include <thx/text/table/CellType.h>
#endif
#ifndef INCLUDED_thx_text_table_CellValueImpl
#include <thx/text/table/CellValueImpl.h>
#endif
#ifndef INCLUDED_thx_text_table_Col
#include <thx/text/table/Col.h>
#endif
#ifndef INCLUDED_thx_text_table_CompositeStyle
#include <thx/text/table/CompositeStyle.h>
#endif
#ifndef INCLUDED_thx_text_table_DefaultStyle
#include <thx/text/table/DefaultStyle.h>
#endif
#ifndef INCLUDED_thx_text_table_IStyle
#include <thx/text/table/IStyle.h>
#endif
#ifndef INCLUDED_thx_text_table_Row
#include <thx/text/table/Row.h>
#endif
#ifndef INCLUDED_thx_text_table_Span
#include <thx/text/table/Span.h>
#endif
#ifndef INCLUDED_thx_text_table_StringBlock
#include <thx/text/table/StringBlock.h>
#endif
#ifndef INCLUDED_thx_text_table_Style
#include <thx/text/table/Style.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace text{

void TestTable_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.text.TestTable","new",0x007b2757,"thx.text.TestTable.new","thx/text/TestTable.hx",13,0x2913bc59)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(  13)		this->x = i;
            	}

Dynamic TestTable_obj::__CreateEmpty() { return new TestTable_obj; }

hx::ObjectPtr< TestTable_obj > TestTable_obj::__new(Int i)
{
	hx::ObjectPtr< TestTable_obj > _hx_result = new TestTable_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestTable_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestTable_obj > _hx_result = new TestTable_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestTable_obj::setup(){
            	HX_STACK_FRAME("thx.text.TestTable","setup",0x5413f134,"thx.text.TestTable.setup","thx/text/TestTable.hx",18,0x2913bc59)
            	HX_STACK_THIS(this)
HXLINE(  18)		this->table =  ::thx::text::Table_obj::__new();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTable_obj,setup,(void))

void TestTable_obj::testPaintBorder(){
            	HX_STACK_FRAME("thx.text.TestTable","testPaintBorder",0x30f85d6f,"thx.text.TestTable.testPaintBorder","thx/text/TestTable.hx",22,0x2913bc59)
            	HX_STACK_THIS(this)
HXLINE(  22)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  22)		HX_VARI( Int,_g) = this->x;
HXDLIN(  22)		while((_g1 < _g)){
HXLINE(  22)			++_g1;
HXLINE(  23)			HX_VARI(  ::thx::text::table::Canvas,canvas) =  ::thx::text::table::Canvas_obj::__new((int)3,(int)3);
HXLINE(  24)			canvas->paintBorder(::thx::text::table::CellType_obj::Body_dyn(),(int)0,(int)0,(int)3,(int)3);
HXLINE(  25)			::String _hx_tmp = canvas->toString();
HXDLIN(  25)			::utest::Assert_obj::equals(HX_("\xe2""\x94""\x8c""\xe2""\x94""\x80""\xe2""\x94""\x90""\n\xe2""\x94""\x82"" \xe2""\x94""\x82""\n\xe2""\x94""\x94""\xe2""\x94""\x80""\xe2""\x94""\x98""",d0,cb,4b,bc),_hx_tmp,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),25,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testPaintBorder",f8,ef,6e,1b)));
HXLINE(  27)			canvas =  ::thx::text::table::Canvas_obj::__new((int)4,(int)4);
HXLINE(  28)			canvas->paintBorder(::thx::text::table::CellType_obj::Body_dyn(),(int)1,(int)0,(int)3,(int)3);
HXLINE(  29)			::String _hx_tmp1 = canvas->toString();
HXDLIN(  29)			::utest::Assert_obj::equals(HX_(" \xe2""\x94""\x8c""\xe2""\x94""\x80""\xe2""\x94""\x90""\n \xe2""\x94""\x82"" \xe2""\x94""\x82""\n \xe2""\x94""\x94""\xe2""\x94""\x80""\xe2""\x94""\x98""\n    ",06,74,53,03),_hx_tmp1,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),29,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testPaintBorder",f8,ef,6e,1b)));
HXLINE(  31)			canvas =  ::thx::text::table::Canvas_obj::__new((int)4,(int)4);
HXLINE(  32)			canvas->paintBorder(::thx::text::table::CellType_obj::Body_dyn(),(int)1,(int)1,(int)3,(int)3);
HXLINE(  33)			::String _hx_tmp2 = canvas->toString();
HXDLIN(  33)			::utest::Assert_obj::equals(HX_("    \n \xe2""\x94""\x8c""\xe2""\x94""\x80""\xe2""\x94""\x90""\n \xe2""\x94""\x82"" \xe2""\x94""\x82""\n \xe2""\x94""\x94""\xe2""\x94""\x80""\xe2""\x94""\x98""",0e,2c,79,a1),_hx_tmp2,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),33,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testPaintBorder",f8,ef,6e,1b)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTable_obj,testPaintBorder,(void))

void TestTable_obj::oneCell(::hx::EnumBase value,Int width){
            	HX_STACK_FRAME("thx.text.TestTable","oneCell",0xa4a2b19f,"thx.text.TestTable.oneCell","thx/text/TestTable.hx",37,0x2913bc59)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(width,"width")
HXLINE(  38)		this->table =  ::thx::text::Table_obj::__new();
HXLINE(  39)		::thx::text::table::IStyle_obj::set_type(this->table->style,::thx::text::table::CellType_obj::Body_dyn());
HXLINE(  40)		::thx::text::table::IStyle_obj::set_minWidth(this->table->style,width);
HXLINE(  41)		this->table->set(value,(int)0,(int)0,null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(TestTable_obj,oneCell,(void))

void TestTable_obj::testSequence(){
            	HX_STACK_FRAME("thx.text.TestTable","testSequence",0x2b0bd6dc,"thx.text.TestTable.testSequence","thx/text/TestTable.hx",45,0x2913bc59)
            	HX_STACK_THIS(this)
HXLINE(  45)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  45)		HX_VARI( Int,_g) = this->x;
HXDLIN(  45)		while((_g1 < _g)){
HXLINE(  45)			++_g1;
HXLINE(  46)			HX_VARI(  ::thx::text::table::Cell,last) = this->table->set(::thx::text::table::CellValueImpl_obj::BoolCell(true),(int)0,(int)1,null());
HXLINE(  47)			HX_VARI(  ::thx::text::table::Cell,first) = this->table->set(::thx::text::table::CellValueImpl_obj::BoolCell(false),(int)0,(int)0,null());
HXLINE(  48)			::utest::Assert_obj::equals((int)1,last->col->index,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),48,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testSequence",b3,44,f4,5b)));
HXLINE(  49)			::utest::Assert_obj::equals((int)0,first->col->index,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),49,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testSequence",b3,44,f4,5b)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTable_obj,testSequence,(void))

void TestTable_obj::testStyle(){
            	HX_STACK_FRAME("thx.text.TestTable","testStyle",0xb9a14db6,"thx.text.TestTable.testStyle","thx/text/TestTable.hx",53,0x2913bc59)
            	HX_STACK_THIS(this)
HXLINE(  53)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  53)		HX_VARI( Int,_g) = this->x;
HXDLIN(  53)		while((_g1 < _g)){
HXLINE(  53)			++_g1;
HXLINE(  54)			HX_VARI(  ::thx::text::table::Style,style) =  ::thx::text::table::Style_obj::__new();
HXLINE(  55)			 ::Dynamic _hx_tmp = style->get_formatter();
HXDLIN(  55)			::utest::Assert_obj::isNull(_hx_tmp,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),55,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testStyle",7f,e3,1f,4d)));
HXLINE(  56)			HX_VARI(  ::thx::text::table::DefaultStyle,dstyle) =  ::thx::text::table::DefaultStyle_obj::__new();
HXLINE(  57)			 ::Dynamic _hx_tmp1 = dstyle->get_formatter();
HXDLIN(  57)			::utest::Assert_obj::notNull(_hx_tmp1,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),57,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testStyle",7f,e3,1f,4d)));
HXLINE(  58)			HX_VARI(  ::thx::text::table::CompositeStyle,cstyle) =  ::thx::text::table::CompositeStyle_obj::__new(::Array_obj< ::Dynamic>::__new(1)->init(0,style));
HXLINE(  59)			 ::Dynamic _hx_tmp2 = cstyle->get_formatter();
HXDLIN(  59)			::utest::Assert_obj::isNull(_hx_tmp2,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),59,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testStyle",7f,e3,1f,4d)));
HXLINE(  60)			cstyle =  ::thx::text::table::CompositeStyle_obj::__new(::Array_obj< ::Dynamic>::__new(2)->init(0,style)->init(1,dstyle));
HXLINE(  61)			 ::Dynamic _hx_tmp3 = cstyle->get_formatter();
HXDLIN(  61)			::utest::Assert_obj::notNull(_hx_tmp3,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),61,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testStyle",7f,e3,1f,4d)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTable_obj,testStyle,(void))

void TestTable_obj::testCanvas(){
            	HX_STACK_FRAME("thx.text.TestTable","testCanvas",0x55f220b3,"thx.text.TestTable.testCanvas","thx/text/TestTable.hx",65,0x2913bc59)
            	HX_STACK_THIS(this)
HXLINE(  65)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  65)		HX_VARI( Int,_g) = this->x;
HXDLIN(  65)		while((_g1 < _g)){
HXLINE(  65)			++_g1;
HXLINE(  66)			HX_VARI(  ::thx::text::table::Canvas,canvas) =  ::thx::text::table::Canvas_obj::__new((int)3,(int)2);
HXLINE(  67)			::String _hx_tmp = canvas->toString();
HXDLIN(  67)			::utest::Assert_obj::equals(HX_("   \n   ",76,7a,a1,71),_hx_tmp,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),67,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testCanvas",ca,9a,36,d1)));
HXLINE(  68)			canvas->expand((int)4,(int)3);
HXLINE(  69)			::String _hx_tmp1 = canvas->toString();
HXDLIN(  69)			::utest::Assert_obj::equals(HX_("    \n    \n    ",c0,b3,34,3e),_hx_tmp1,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),69,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testCanvas",ca,9a,36,d1)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTable_obj,testCanvas,(void))

void TestTable_obj::testTableSize(){
            	HX_STACK_FRAME("thx.text.TestTable","testTableSize",0x52ab72f4,"thx.text.TestTable.testTableSize","thx/text/TestTable.hx",73,0x2913bc59)
            	HX_STACK_THIS(this)
HXLINE(  73)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  73)		HX_VARI( Int,_g) = this->x;
HXDLIN(  73)		while((_g1 < _g)){
HXLINE(  73)			++_g1;
HXLINE(  74)			Int _hx_tmp = this->table->get_rows();
HXDLIN(  74)			::utest::Assert_obj::equals((int)0,_hx_tmp,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),74,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testTableSize",3d,21,23,ed)));
HXLINE(  75)			Int _hx_tmp1 = this->table->get_cols();
HXDLIN(  75)			::utest::Assert_obj::equals((int)0,_hx_tmp1,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),75,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testTableSize",3d,21,23,ed)));
HXLINE(  76)			this->table->getCol((int)2);
HXLINE(  77)			Int _hx_tmp2 = this->table->get_cols();
HXDLIN(  77)			::utest::Assert_obj::equals((int)0,_hx_tmp2,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),77,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testTableSize",3d,21,23,ed)));
HXLINE(  78)			this->table->ensureCol((int)3);
HXLINE(  79)			Int _hx_tmp3 = this->table->get_cols();
HXDLIN(  79)			::utest::Assert_obj::equals((int)4,_hx_tmp3,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),79,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testTableSize",3d,21,23,ed)));
HXLINE(  80)			Int _hx_tmp4 = this->table->get_rows();
HXDLIN(  80)			::utest::Assert_obj::equals((int)0,_hx_tmp4,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),80,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testTableSize",3d,21,23,ed)));
HXLINE(  81)			this->table->ensureRow((int)1);
HXLINE(  82)			Int _hx_tmp5 = this->table->get_rows();
HXDLIN(  82)			::utest::Assert_obj::equals((int)2,_hx_tmp5,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),82,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testTableSize",3d,21,23,ed)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTable_obj,testTableSize,(void))

void TestTable_obj::testCellResizeTable(){
            	HX_STACK_FRAME("thx.text.TestTable","testCellResizeTable",0x04f50fbd,"thx.text.TestTable.testCellResizeTable","thx/text/TestTable.hx",86,0x2913bc59)
            	HX_STACK_THIS(this)
HXLINE(  86)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  86)		HX_VARI( Int,_g) = this->x;
HXDLIN(  86)		while((_g1 < _g)){
HXLINE(  86)			++_g1;
HXLINE(  87)			this->table->set(::thx::text::table::CellValueImpl_obj::IntCell((int)1),(int)3,(int)2,null());
HXLINE(  88)			Int _hx_tmp = this->table->get_cols();
HXDLIN(  88)			::utest::Assert_obj::equals((int)3,_hx_tmp,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),88,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testCellResizeTable",c6,1a,02,c5)));
HXLINE(  89)			Int _hx_tmp1 = this->table->get_rows();
HXDLIN(  89)			::utest::Assert_obj::equals((int)4,_hx_tmp1,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),89,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testCellResizeTable",c6,1a,02,c5)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTable_obj,testCellResizeTable,(void))

void TestTable_obj::testIdentityOfCellsCreatedFromTable(){
            	HX_STACK_FRAME("thx.text.TestTable","testIdentityOfCellsCreatedFromTable",0xb1dc4c7d,"thx.text.TestTable.testIdentityOfCellsCreatedFromTable","thx/text/TestTable.hx",93,0x2913bc59)
            	HX_STACK_THIS(this)
HXLINE(  93)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  93)		HX_VARI( Int,_g) = this->x;
HXDLIN(  93)		while((_g1 < _g)){
HXLINE(  93)			++_g1;
HXLINE(  94)			HX_VARI(  ::thx::text::table::Cell,cell) = this->table->set(::thx::text::table::CellValueImpl_obj::IntCell((int)1),(int)3,(int)2,null());
HXLINE(  95)			 ::thx::text::table::Cell _hx_tmp = this->table->get((int)3,(int)2);
HXDLIN(  95)			::utest::Assert_obj::isTrue(hx::IsEq( cell,_hx_tmp ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),95,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromTable",86,b9,81,30)));
HXLINE(  97)			 ::thx::text::table::Cell _hx_tmp1 = this->table->getRow((int)3)->get((int)2);
HXDLIN(  97)			::utest::Assert_obj::isTrue(hx::IsEq( cell,_hx_tmp1 ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),97,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromTable",86,b9,81,30)));
HXLINE(  98)			 ::thx::text::table::Cell _hx_tmp2 = this->table->getCol((int)2)->get((int)3);
HXDLIN(  98)			::utest::Assert_obj::isTrue(hx::IsEq( cell,_hx_tmp2 ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),98,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromTable",86,b9,81,30)));
HXLINE( 100)			 ::thx::text::table::Row _hx_tmp3 = this->table->getRow((int)3);
HXDLIN( 100)			::utest::Assert_obj::isTrue(hx::IsEq( cell->row,_hx_tmp3 ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),100,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromTable",86,b9,81,30)));
HXLINE( 101)			 ::thx::text::table::Col _hx_tmp4 = this->table->getCol((int)2);
HXDLIN( 101)			::utest::Assert_obj::isTrue(hx::IsEq( cell->col,_hx_tmp4 ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),101,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromTable",86,b9,81,30)));
HXLINE( 103)			::utest::Assert_obj::isTrue(hx::IsEq( cell->table,this->table ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),103,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromTable",86,b9,81,30)));
HXLINE( 104)			::utest::Assert_obj::isTrue(hx::IsEq( cell->row->table,this->table ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),104,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromTable",86,b9,81,30)));
HXLINE( 105)			::utest::Assert_obj::isTrue(hx::IsEq( cell->col->table,this->table ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),105,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromTable",86,b9,81,30)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTable_obj,testIdentityOfCellsCreatedFromTable,(void))

void TestTable_obj::testIdentityOfCellsCreatedFromRow(){
            	HX_STACK_FRAME("thx.text.TestTable","testIdentityOfCellsCreatedFromRow",0x51642cc9,"thx.text.TestTable.testIdentityOfCellsCreatedFromRow","thx/text/TestTable.hx",109,0x2913bc59)
            	HX_STACK_THIS(this)
HXLINE( 109)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 109)		HX_VARI( Int,_g) = this->x;
HXDLIN( 109)		while((_g1 < _g)){
HXLINE( 109)			++_g1;
HXLINE( 110)			HX_VARI(  ::thx::text::table::Row,row) = this->table->ensureRow((int)3);
HXDLIN( 110)			HX_VARI(  ::thx::text::table::Cell,cell) = row->set(::thx::text::table::CellValueImpl_obj::IntCell((int)1),(int)2,null());
HXLINE( 112)			 ::thx::text::table::Cell _hx_tmp = this->table->get((int)3,(int)2);
HXDLIN( 112)			::utest::Assert_obj::isTrue(hx::IsEq( cell,_hx_tmp ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),112,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromRow",92,15,e7,3a)));
HXLINE( 114)			 ::thx::text::table::Cell _hx_tmp1 = this->table->getRow((int)3)->get((int)2);
HXDLIN( 114)			::utest::Assert_obj::isTrue(hx::IsEq( cell,_hx_tmp1 ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),114,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromRow",92,15,e7,3a)));
HXLINE( 115)			 ::thx::text::table::Cell _hx_tmp2 = this->table->getCol((int)2)->get((int)3);
HXDLIN( 115)			::utest::Assert_obj::isTrue(hx::IsEq( cell,_hx_tmp2 ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),115,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromRow",92,15,e7,3a)));
HXLINE( 117)			 ::thx::text::table::Row _hx_tmp3 = this->table->getRow((int)3);
HXDLIN( 117)			::utest::Assert_obj::isTrue(hx::IsEq( cell->row,_hx_tmp3 ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),117,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromRow",92,15,e7,3a)));
HXLINE( 118)			 ::thx::text::table::Col _hx_tmp4 = this->table->getCol((int)2);
HXDLIN( 118)			::utest::Assert_obj::isTrue(hx::IsEq( cell->col,_hx_tmp4 ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),118,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromRow",92,15,e7,3a)));
HXLINE( 120)			::utest::Assert_obj::isTrue(hx::IsEq( cell->table,this->table ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),120,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromRow",92,15,e7,3a)));
HXLINE( 121)			::utest::Assert_obj::isTrue(hx::IsEq( cell->row->table,this->table ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),121,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromRow",92,15,e7,3a)));
HXLINE( 122)			::utest::Assert_obj::isTrue(hx::IsEq( cell->col->table,this->table ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),122,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromRow",92,15,e7,3a)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTable_obj,testIdentityOfCellsCreatedFromRow,(void))

void TestTable_obj::testIdentityOfCellsCreatedFromCol(){
            	HX_STACK_FRAME("thx.text.TestTable","testIdentityOfCellsCreatedFromCol",0x5158caef,"thx.text.TestTable.testIdentityOfCellsCreatedFromCol","thx/text/TestTable.hx",126,0x2913bc59)
            	HX_STACK_THIS(this)
HXLINE( 126)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 126)		HX_VARI( Int,_g) = this->x;
HXDLIN( 126)		while((_g1 < _g)){
HXLINE( 126)			++_g1;
HXLINE( 127)			HX_VARI(  ::thx::text::table::Col,col) = this->table->ensureCol((int)2);
HXDLIN( 127)			HX_VARI(  ::thx::text::table::Cell,cell) = col->set(::thx::text::table::CellValueImpl_obj::IntCell((int)1),(int)3,null());
HXLINE( 129)			 ::thx::text::table::Cell _hx_tmp = this->table->get((int)3,(int)2);
HXDLIN( 129)			::utest::Assert_obj::isTrue(hx::IsEq( cell,_hx_tmp ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),129,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromCol",b8,b3,db,3a)));
HXLINE( 131)			 ::thx::text::table::Cell _hx_tmp1 = this->table->getRow((int)3)->get((int)2);
HXDLIN( 131)			::utest::Assert_obj::isTrue(hx::IsEq( cell,_hx_tmp1 ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),131,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromCol",b8,b3,db,3a)));
HXLINE( 132)			 ::thx::text::table::Cell _hx_tmp2 = this->table->getCol((int)2)->get((int)3);
HXDLIN( 132)			::utest::Assert_obj::isTrue(hx::IsEq( cell,_hx_tmp2 ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),132,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromCol",b8,b3,db,3a)));
HXLINE( 134)			 ::thx::text::table::Row _hx_tmp3 = this->table->getRow((int)3);
HXDLIN( 134)			::utest::Assert_obj::isTrue(hx::IsEq( cell->row,_hx_tmp3 ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),134,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromCol",b8,b3,db,3a)));
HXLINE( 135)			 ::thx::text::table::Col _hx_tmp4 = this->table->getCol((int)2);
HXDLIN( 135)			::utest::Assert_obj::isTrue(hx::IsEq( cell->col,_hx_tmp4 ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),135,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromCol",b8,b3,db,3a)));
HXLINE( 137)			::utest::Assert_obj::isTrue(hx::IsEq( cell->table,this->table ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),137,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromCol",b8,b3,db,3a)));
HXLINE( 138)			::utest::Assert_obj::isTrue(hx::IsEq( cell->row->table,this->table ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),138,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromCol",b8,b3,db,3a)));
HXLINE( 139)			::utest::Assert_obj::isTrue(hx::IsEq( cell->col->table,this->table ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),139,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromCol",b8,b3,db,3a)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTable_obj,testIdentityOfCellsCreatedFromCol,(void))


TestTable_obj::TestTable_obj()
{
}

void TestTable_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TestTable);
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(table,"table");
	HX_MARK_END_CLASS();
}

void TestTable_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(table,"table");
}

hx::Val TestTable_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"table") ) { return hx::Val( table); }
		if (HX_FIELD_EQ(inName,"setup") ) { return hx::Val( setup_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"oneCell") ) { return hx::Val( oneCell_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"testStyle") ) { return hx::Val( testStyle_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testCanvas") ) { return hx::Val( testCanvas_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testSequence") ) { return hx::Val( testSequence_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"testTableSize") ) { return hx::Val( testTableSize_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"testPaintBorder") ) { return hx::Val( testPaintBorder_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"testCellResizeTable") ) { return hx::Val( testCellResizeTable_dyn()); }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"testIdentityOfCellsCreatedFromRow") ) { return hx::Val( testIdentityOfCellsCreatedFromRow_dyn()); }
		if (HX_FIELD_EQ(inName,"testIdentityOfCellsCreatedFromCol") ) { return hx::Val( testIdentityOfCellsCreatedFromCol_dyn()); }
		break;
	case 35:
		if (HX_FIELD_EQ(inName,"testIdentityOfCellsCreatedFromTable") ) { return hx::Val( testIdentityOfCellsCreatedFromTable_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestTable_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"table") ) { table=inValue.Cast<  ::thx::text::Table >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestTable_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("table","\x0e","\xb8","\xe3","\x0a"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestTable_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestTable_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsObject /*::thx::text::Table*/ ,(int)offsetof(TestTable_obj,table),HX_HCSTRING("table","\x0e","\xb8","\xe3","\x0a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestTable_obj_sStaticStorageInfo = 0;
#endif

static ::String TestTable_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("table","\x0e","\xb8","\xe3","\x0a"),
	HX_HCSTRING("setup","\x7d","\xae","\x2f","\x7a"),
	HX_HCSTRING("testPaintBorder","\xf8","\xef","\x6e","\x1b"),
	HX_HCSTRING("oneCell","\x28","\x13","\x1f","\x57"),
	HX_HCSTRING("testSequence","\xb3","\x44","\xf4","\x5b"),
	HX_HCSTRING("testStyle","\x7f","\xe3","\x1f","\x4d"),
	HX_HCSTRING("testCanvas","\xca","\x9a","\x36","\xd1"),
	HX_HCSTRING("testTableSize","\x3d","\x21","\x23","\xed"),
	HX_HCSTRING("testCellResizeTable","\xc6","\x1a","\x02","\xc5"),
	HX_HCSTRING("testIdentityOfCellsCreatedFromTable","\x86","\xb9","\x81","\x30"),
	HX_HCSTRING("testIdentityOfCellsCreatedFromRow","\x92","\x15","\xe7","\x3a"),
	HX_HCSTRING("testIdentityOfCellsCreatedFromCol","\xb8","\xb3","\xdb","\x3a"),
	::String(null()) };

static void TestTable_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestTable_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestTable_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestTable_obj::__mClass,"__mClass");
};

#endif

hx::Class TestTable_obj::__mClass;

void TestTable_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.text.TestTable","\xe5","\x2f","\x39","\xa1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestTable_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestTable_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestTable_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestTable_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestTable_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestTable_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace text
