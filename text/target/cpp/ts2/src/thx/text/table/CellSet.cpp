// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_thx_text_Table
#include <thx/text/Table.h>
#endif
#ifndef INCLUDED_thx_text_table_Cell
#include <thx/text/table/Cell.h>
#endif
#ifndef INCLUDED_thx_text_table_CellSet
#include <thx/text/table/CellSet.h>
#endif
#ifndef INCLUDED_thx_text_table_IStyle
#include <thx/text/table/IStyle.h>
#endif
#ifndef INCLUDED_thx_text_table_Style
#include <thx/text/table/Style.h>
#endif

namespace thx{
namespace text{
namespace table{

void CellSet_obj::__construct( ::thx::text::Table table,Int index){
            	HX_STACK_FRAME("thx.text.table.CellSet","new",0xa6539e3b,"thx.text.table.CellSet.new","thx/text/table/CellSet.hx",13,0x76cac936)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(table,"table")
            	HX_STACK_ARG(index,"index")
HXLINE(  14)		this->index = index;
HXLINE(  15)		this->table = table;
HXLINE(  16)		this->values =  ::haxe::ds::IntMap_obj::__new();
HXLINE(  17)		this->size = (int)0;
HXLINE(  18)		this->style =  ::thx::text::table::Style_obj::__new();
            	}

Dynamic CellSet_obj::__CreateEmpty() { return new CellSet_obj; }

hx::ObjectPtr< CellSet_obj > CellSet_obj::__new( ::thx::text::Table table,Int index)
{
	hx::ObjectPtr< CellSet_obj > _hx_result = new CellSet_obj();
	_hx_result->__construct(table,index);
	return _hx_result;
}

Dynamic CellSet_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CellSet_obj > _hx_result = new CellSet_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

 ::thx::text::table::Cell CellSet_obj::get(Int index){
            	HX_STACK_FRAME("thx.text.table.CellSet","get",0xa64e4e71,"thx.text.table.CellSet.get","thx/text/table/CellSet.hx",22,0x76cac936)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE(  22)		return this->values->get(index).StaticCast<  ::thx::text::table::Cell >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(CellSet_obj,get,return )

 ::Dynamic CellSet_obj::iterator(){
            	HX_STACK_FRAME("thx.text.table.CellSet","iterator",0x8a5b6233,"thx.text.table.CellSet.iterator","thx/text/table/CellSet.hx",25,0x76cac936)
            	HX_STACK_THIS(this)
HXLINE(  25)		return this->values->iterator();
            	}


HX_DEFINE_DYNAMIC_FUNC0(CellSet_obj,iterator,return )

void CellSet_obj::_set(Int index, ::thx::text::table::Cell cell){
            	HX_STACK_FRAME("thx.text.table.CellSet","_set",0xd8f73268,"thx.text.table.CellSet._set","thx/text/table/CellSet.hx",27,0x76cac936)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(cell,"cell")
HXLINE(  28)		HX_VARI( Int,b) = this->size;
HXDLIN(  28)		Int _hx_tmp;
HXDLIN(  28)		if ((index > b)) {
HXLINE(  28)			_hx_tmp = index;
            		}
            		else {
HXLINE(  28)			_hx_tmp = b;
            		}
HXDLIN(  28)		this->size = _hx_tmp;
HXLINE(  29)		this->values->set(index,cell);
            	}


HX_DEFINE_DYNAMIC_FUNC2(CellSet_obj,_set,(void))


CellSet_obj::CellSet_obj()
{
}

void CellSet_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CellSet);
	HX_MARK_MEMBER_NAME(values,"values");
	HX_MARK_MEMBER_NAME(size,"size");
	HX_MARK_MEMBER_NAME(table,"table");
	HX_MARK_MEMBER_NAME(index,"index");
	HX_MARK_MEMBER_NAME(style,"style");
	HX_MARK_END_CLASS();
}

void CellSet_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(values,"values");
	HX_VISIT_MEMBER_NAME(size,"size");
	HX_VISIT_MEMBER_NAME(table,"table");
	HX_VISIT_MEMBER_NAME(index,"index");
	HX_VISIT_MEMBER_NAME(style,"style");
}

hx::Val CellSet_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size); }
		if (HX_FIELD_EQ(inName,"_set") ) { return hx::Val( _set_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"table") ) { return hx::Val( table); }
		if (HX_FIELD_EQ(inName,"index") ) { return hx::Val( index); }
		if (HX_FIELD_EQ(inName,"style") ) { return hx::Val( style); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"values") ) { return hx::Val( values); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"iterator") ) { return hx::Val( iterator_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val CellSet_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { size=inValue.Cast< Int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"table") ) { table=inValue.Cast<  ::thx::text::Table >(); return inValue; }
		if (HX_FIELD_EQ(inName,"index") ) { index=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"style") ) { style=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"values") ) { values=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CellSet_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f"));
	outFields->push(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));
	outFields->push(HX_HCSTRING("table","\x0e","\xb8","\xe3","\x0a"));
	outFields->push(HX_HCSTRING("index","\x12","\x9b","\x14","\xbe"));
	outFields->push(HX_HCSTRING("style","\x31","\xa5","\x1d","\x84"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo CellSet_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(CellSet_obj,values),HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f")},
	{hx::fsInt,(int)offsetof(CellSet_obj,size),HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c")},
	{hx::fsObject /*::thx::text::Table*/ ,(int)offsetof(CellSet_obj,table),HX_HCSTRING("table","\x0e","\xb8","\xe3","\x0a")},
	{hx::fsInt,(int)offsetof(CellSet_obj,index),HX_HCSTRING("index","\x12","\x9b","\x14","\xbe")},
	{hx::fsObject /*::thx::text::table::IStyle*/ ,(int)offsetof(CellSet_obj,style),HX_HCSTRING("style","\x31","\xa5","\x1d","\x84")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *CellSet_obj_sStaticStorageInfo = 0;
#endif

static ::String CellSet_obj_sMemberFields[] = {
	HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("table","\x0e","\xb8","\xe3","\x0a"),
	HX_HCSTRING("index","\x12","\x9b","\x14","\xbe"),
	HX_HCSTRING("style","\x31","\xa5","\x1d","\x84"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"),
	HX_HCSTRING("_set","\xa3","\xe0","\x22","\x3f"),
	::String(null()) };

static void CellSet_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CellSet_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CellSet_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CellSet_obj::__mClass,"__mClass");
};

#endif

hx::Class CellSet_obj::__mClass;

void CellSet_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.text.table.CellSet","\xc9","\x64","\x8b","\x18");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CellSet_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CellSet_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CellSet_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CellSet_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CellSet_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CellSet_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace text
} // end namespace table
