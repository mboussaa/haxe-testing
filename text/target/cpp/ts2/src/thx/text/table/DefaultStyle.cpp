// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "cpp/Int64.h"
#ifndef INCLUDED_thx_Strings
#include <thx/Strings.h>
#endif
#ifndef INCLUDED_thx_culture_Culture
#include <thx/culture/Culture.h>
#endif
#ifndef INCLUDED_thx_culture_DateFormatInfo
#include <thx/culture/DateFormatInfo.h>
#endif
#ifndef INCLUDED_thx_culture_NumberFormatInfo
#include <thx/culture/NumberFormatInfo.h>
#endif
#ifndef INCLUDED_thx_format_DateFormat
#include <thx/format/DateFormat.h>
#endif
#ifndef INCLUDED_thx_format_NumberFormat
#include <thx/format/NumberFormat.h>
#endif
#ifndef INCLUDED_thx_format_TimeFormat
#include <thx/format/TimeFormat.h>
#endif
#ifndef INCLUDED_thx_text_table_CellType
#include <thx/text/table/CellType.h>
#endif
#ifndef INCLUDED_thx_text_table_CellValueImpl
#include <thx/text/table/CellValueImpl.h>
#endif
#ifndef INCLUDED_thx_text_table_DefaultStyle
#include <thx/text/table/DefaultStyle.h>
#endif
#ifndef INCLUDED_thx_text_table_HAlign
#include <thx/text/table/HAlign.h>
#endif
#ifndef INCLUDED_thx_text_table_IStyle
#include <thx/text/table/IStyle.h>
#endif
#ifndef INCLUDED_thx_text_table_StringBlock
#include <thx/text/table/StringBlock.h>
#endif

namespace thx{
namespace text{
namespace table{

void DefaultStyle_obj::__construct(){
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","new",0xf4419ad9,"thx.text.table.DefaultStyle.new","thx/text/table/Style.hx",191,0x710751c5)
            	HX_STACK_THIS(this)
            	}

Dynamic DefaultStyle_obj::__CreateEmpty() { return new DefaultStyle_obj; }

hx::ObjectPtr< DefaultStyle_obj > DefaultStyle_obj::__new()
{
	hx::ObjectPtr< DefaultStyle_obj > _hx_result = new DefaultStyle_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic DefaultStyle_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DefaultStyle_obj > _hx_result = new DefaultStyle_obj();
	_hx_result->__construct();
	return _hx_result;
}

static ::thx::text::table::IStyle_obj _hx_thx_text_table_DefaultStyle__hx_thx_text_table_IStyle= {
	( ::hx::EnumBase (hx::Object::*)())&::thx::text::table::DefaultStyle_obj::get_type,
	( ::hx::EnumBase (hx::Object::*)(::hx::EnumBase))&::thx::text::table::DefaultStyle_obj::set_type,
	( Int (hx::Object::*)())&::thx::text::table::DefaultStyle_obj::get_minWidth,
	( Int (hx::Object::*)(Int))&::thx::text::table::DefaultStyle_obj::set_minWidth,
	(  ::Dynamic (hx::Object::*)())&::thx::text::table::DefaultStyle_obj::get_maxWidth,
	(  ::Dynamic (hx::Object::*)( ::Dynamic))&::thx::text::table::DefaultStyle_obj::set_maxWidth,
	( Int (hx::Object::*)())&::thx::text::table::DefaultStyle_obj::get_minHeight,
	( Int (hx::Object::*)(Int))&::thx::text::table::DefaultStyle_obj::set_minHeight,
	(  ::Dynamic (hx::Object::*)())&::thx::text::table::DefaultStyle_obj::get_maxHeight,
	(  ::Dynamic (hx::Object::*)( ::Dynamic))&::thx::text::table::DefaultStyle_obj::set_maxHeight,
	(  ::Dynamic (hx::Object::*)())&::thx::text::table::DefaultStyle_obj::get_formatter,
	(  ::Dynamic (hx::Object::*)( ::Dynamic))&::thx::text::table::DefaultStyle_obj::set_formatter,
	(  ::Dynamic (hx::Object::*)())&::thx::text::table::DefaultStyle_obj::get_aligner,
	(  ::Dynamic (hx::Object::*)( ::Dynamic))&::thx::text::table::DefaultStyle_obj::set_aligner,
	( void (hx::Object::*)(::hx::EnumBase))&::thx::text::table::DefaultStyle_obj::setAlign,
};

void *DefaultStyle_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x7f7db665: return &_hx_thx_text_table_DefaultStyle__hx_thx_text_table_IStyle;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void DefaultStyle_obj::setAlign(::hx::EnumBase align){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::hx::EnumBase,align) HXARGC(2)
            		::hx::EnumBase _hx_run(::hx::EnumBase _,::hx::EnumBase _1){
            			HX_STACK_FRAME("thx.text.table.DefaultStyle","setAlign",0x58ca5eaa,"thx.text.table.DefaultStyle.setAlign","thx/text/table/Style.hx",194,0x710751c5)
            			HX_STACK_ARG(_,"_")
            			HX_STACK_ARG(_1,"_1")
HXLINE( 194)			return align;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.text.table.DefaultStyle","setAlign",0x58ca5eaa,"thx.text.table.DefaultStyle.setAlign","thx/text/table/Style.hx",194,0x710751c5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(align,"align")
HXLINE( 194)		this->set_aligner( ::Dynamic(new _hx_Closure_0(align)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(DefaultStyle_obj,setAlign,(void))

::hx::EnumBase DefaultStyle_obj::get_type(){
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","get_type",0xf5c84d2a,"thx.text.table.DefaultStyle.get_type","thx/text/table/Style.hx",197,0x710751c5)
            	HX_STACK_THIS(this)
HXLINE( 197)		return ::thx::text::table::DefaultStyle_obj::defaultType;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DefaultStyle_obj,get_type,return )

::hx::EnumBase DefaultStyle_obj::set_type(::hx::EnumBase value){
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","set_type",0xa425a69e,"thx.text.table.DefaultStyle.set_type","thx/text/table/Style.hx",200,0x710751c5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 200)		return (::thx::text::table::DefaultStyle_obj::defaultType = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DefaultStyle_obj,set_type,return )

 ::Dynamic DefaultStyle_obj::get_maxHeight(){
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","get_maxHeight",0x5b29e93b,"thx.text.table.DefaultStyle.get_maxHeight","thx/text/table/Style.hx",203,0x710751c5)
            	HX_STACK_THIS(this)
HXLINE( 203)		return ::thx::text::table::DefaultStyle_obj::defaultMaxHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DefaultStyle_obj,get_maxHeight,return )

 ::Dynamic DefaultStyle_obj::set_maxHeight( ::Dynamic value){
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","set_maxHeight",0xa02fcb47,"thx.text.table.DefaultStyle.set_maxHeight","thx/text/table/Style.hx",206,0x710751c5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 206)		return (::thx::text::table::DefaultStyle_obj::defaultMaxHeight = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DefaultStyle_obj,set_maxHeight,return )

Int DefaultStyle_obj::get_minHeight(){
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","get_minHeight",0x84e6d6a9,"thx.text.table.DefaultStyle.get_minHeight","thx/text/table/Style.hx",209,0x710751c5)
            	HX_STACK_THIS(this)
HXLINE( 209)		return ::thx::text::table::DefaultStyle_obj::defaultMinHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DefaultStyle_obj,get_minHeight,return )

Int DefaultStyle_obj::set_minHeight(Int value){
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","set_minHeight",0xc9ecb8b5,"thx.text.table.DefaultStyle.set_minHeight","thx/text/table/Style.hx",212,0x710751c5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 212)		return (::thx::text::table::DefaultStyle_obj::defaultMinHeight = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DefaultStyle_obj,set_minHeight,return )

 ::Dynamic DefaultStyle_obj::get_maxWidth(){
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","get_maxWidth",0x75d55b32,"thx.text.table.DefaultStyle.get_maxWidth","thx/text/table/Style.hx",215,0x710751c5)
            	HX_STACK_THIS(this)
HXLINE( 215)		return ::thx::text::table::DefaultStyle_obj::defaultMaxWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DefaultStyle_obj,get_maxWidth,return )

 ::Dynamic DefaultStyle_obj::set_maxWidth( ::Dynamic value){
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","set_maxWidth",0x8ace7ea6,"thx.text.table.DefaultStyle.set_maxWidth","thx/text/table/Style.hx",218,0x710751c5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 218)		return (::thx::text::table::DefaultStyle_obj::defaultMaxWidth = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DefaultStyle_obj,set_maxWidth,return )

Int DefaultStyle_obj::get_minWidth(){
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","get_minWidth",0xc2ef7584,"thx.text.table.DefaultStyle.get_minWidth","thx/text/table/Style.hx",221,0x710751c5)
            	HX_STACK_THIS(this)
HXLINE( 221)		return ::thx::text::table::DefaultStyle_obj::defaultMinWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DefaultStyle_obj,get_minWidth,return )

Int DefaultStyle_obj::set_minWidth(Int value){
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","set_minWidth",0xd7e898f8,"thx.text.table.DefaultStyle.set_minWidth","thx/text/table/Style.hx",224,0x710751c5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 224)		return (::thx::text::table::DefaultStyle_obj::defaultMinWidth = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DefaultStyle_obj,set_minWidth,return )

 ::Dynamic DefaultStyle_obj::get_formatter(){
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","get_formatter",0x42baba9a,"thx.text.table.DefaultStyle.get_formatter","thx/text/table/Style.hx",227,0x710751c5)
            	HX_STACK_THIS(this)
HXLINE( 227)		return ::thx::text::table::DefaultStyle_obj::defaultFormatter;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DefaultStyle_obj,get_formatter,return )

 ::Dynamic DefaultStyle_obj::set_formatter( ::Dynamic value){
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","set_formatter",0x87c09ca6,"thx.text.table.DefaultStyle.set_formatter","thx/text/table/Style.hx",230,0x710751c5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 230)		return (::thx::text::table::DefaultStyle_obj::defaultFormatter = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DefaultStyle_obj,set_formatter,return )

 ::Dynamic DefaultStyle_obj::get_aligner(){
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","get_aligner",0x89857602,"thx.text.table.DefaultStyle.get_aligner","thx/text/table/Style.hx",233,0x710751c5)
            	HX_STACK_THIS(this)
HXLINE( 233)		return ::thx::text::table::DefaultStyle_obj::defaultAligner;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DefaultStyle_obj,get_aligner,return )

 ::Dynamic DefaultStyle_obj::set_aligner( ::Dynamic value){
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","set_aligner",0x93f27d0e,"thx.text.table.DefaultStyle.set_aligner","thx/text/table/Style.hx",236,0x710751c5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 236)		return (::thx::text::table::DefaultStyle_obj::defaultAligner = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DefaultStyle_obj,set_aligner,return )

 ::thx::text::table::DefaultStyle DefaultStyle_obj::instance;

::hx::EnumBase DefaultStyle_obj::defaultType;

 ::Dynamic DefaultStyle_obj::defaultMaxHeight;

Int DefaultStyle_obj::defaultMinHeight;

 ::Dynamic DefaultStyle_obj::defaultMaxWidth;

Int DefaultStyle_obj::defaultMinWidth;

 ::thx::culture::Culture DefaultStyle_obj::defaultCulture;

HX_BEGIN_DEFAULT_FUNC(__default_defaultIntFormatter,DefaultStyle_obj)
::String _hx_run(Int v){
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","__default_defaultIntFormatter",0x8710df57,"thx.text.table.DefaultStyle.__default_defaultIntFormatter","thx/text/table/Style.hx",138,0x710751c5)
            	HX_STACK_ARG(v,"v")
HXLINE( 138)		return ::thx::format::NumberFormat_obj::integer(v,::thx::text::table::DefaultStyle_obj::defaultCulture);
            	}
HX_END_LOCAL_FUNC1(return )
HX_END_DEFAULT_FUNC

::Dynamic DefaultStyle_obj::defaultIntFormatter;

HX_BEGIN_DEFAULT_FUNC(__default_defaultFloatFormatter,DefaultStyle_obj)
::String _hx_run(Float v){
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","__default_defaultFloatFormatter",0x91cf700a,"thx.text.table.DefaultStyle.__default_defaultFloatFormatter","thx/text/table/Style.hx",139,0x710751c5)
            	HX_STACK_ARG(v,"v")
HXLINE( 139)		return ::thx::format::NumberFormat_obj::format(v,HX_("#,#.#####",cf,40,ca,fd),::thx::text::table::DefaultStyle_obj::defaultCulture);
            	}
HX_END_LOCAL_FUNC1(return )
HX_END_DEFAULT_FUNC

::Dynamic DefaultStyle_obj::defaultFloatFormatter;

HX_BEGIN_DEFAULT_FUNC(__default_defaultStringFormatter,DefaultStyle_obj)
::String _hx_run(::String v){
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","__default_defaultStringFormatter",0x84e4f63d,"thx.text.table.DefaultStyle.__default_defaultStringFormatter","thx/text/table/Style.hx",140,0x710751c5)
            	HX_STACK_ARG(v,"v")
HXLINE( 140)		return v;
            	}
HX_END_LOCAL_FUNC1(return )
HX_END_DEFAULT_FUNC

::Dynamic DefaultStyle_obj::defaultStringFormatter;

HX_BEGIN_DEFAULT_FUNC(__default_defaultBoolFormatter,DefaultStyle_obj)
::String _hx_run(Bool v){
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","__default_defaultBoolFormatter",0x3f450ec4,"thx.text.table.DefaultStyle.__default_defaultBoolFormatter","thx/text/table/Style.hx",141,0x710751c5)
            	HX_STACK_ARG(v,"v")
HXLINE( 141)		if (v) {
HXLINE( 141)			return HX_("\xe2""\x9c""\x93""",d9,05,ac,00);
            		}
            		else {
HXLINE( 141)			return HX_("\xe2""\x9c""\x95""",db,05,ac,00);
            		}
HXDLIN( 141)		return null();
            	}
HX_END_LOCAL_FUNC1(return )
HX_END_DEFAULT_FUNC

::Dynamic DefaultStyle_obj::defaultBoolFormatter;

HX_BEGIN_DEFAULT_FUNC(__default_defaultDateTimeFormatter,DefaultStyle_obj)
::String _hx_run(::Array< ::Dynamic> v){
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","__default_defaultDateTimeFormatter",0xb8b15973,"thx.text.table.DefaultStyle.__default_defaultDateTimeFormatter","thx/text/table/Style.hx",142,0x710751c5)
            	HX_STACK_ARG(v,"v")
HXLINE( 142)		return ::thx::format::DateFormat_obj::dateShort(v,::thx::text::table::DefaultStyle_obj::defaultCulture);
            	}
HX_END_LOCAL_FUNC1(return )
HX_END_DEFAULT_FUNC

::Dynamic DefaultStyle_obj::defaultDateTimeFormatter;

HX_BEGIN_DEFAULT_FUNC(__default_defaultTimeFormatter,DefaultStyle_obj)
::String _hx_run( ::cpp::Int64Struct v){
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","__default_defaultTimeFormatter",0x588b3281,"thx.text.table.DefaultStyle.__default_defaultTimeFormatter","thx/text/table/Style.hx",143,0x710751c5)
            	HX_STACK_ARG(v,"v")
HXLINE( 143)		return ::thx::format::TimeFormat_obj::timeLong(v,::thx::text::table::DefaultStyle_obj::defaultCulture);
            	}
HX_END_LOCAL_FUNC1(return )
HX_END_DEFAULT_FUNC

::Dynamic DefaultStyle_obj::defaultTimeFormatter;

HX_BEGIN_DEFAULT_FUNC(__default_defaultNAFormatter,DefaultStyle_obj)
::String _hx_run(){
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","__default_defaultNAFormatter",0x847754bb,"thx.text.table.DefaultStyle.__default_defaultNAFormatter","thx/text/table/Style.hx",144,0x710751c5)
HXLINE( 144)		return HX_("NA",33,44,00,00);
            	}
HX_END_LOCAL_FUNC0(return )
HX_END_DEFAULT_FUNC

::Dynamic DefaultStyle_obj::defaultNAFormatter;

HX_BEGIN_DEFAULT_FUNC(__default_defaultEmptyFormatter,DefaultStyle_obj)
::String _hx_run(){
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","__default_defaultEmptyFormatter",0xa89854f9,"thx.text.table.DefaultStyle.__default_defaultEmptyFormatter","thx/text/table/Style.hx",145,0x710751c5)
HXLINE( 145)		return HX_("",00,00,00,00);
            	}
HX_END_LOCAL_FUNC0(return )
HX_END_DEFAULT_FUNC

::Dynamic DefaultStyle_obj::defaultEmptyFormatter;

HX_BEGIN_DEFAULT_FUNC(__default_defaultFormatter,DefaultStyle_obj)
 ::thx::text::table::StringBlock _hx_run(::hx::EnumBase value, ::Dynamic maxWidth){
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","__default_defaultFormatter",0x70f5964e,"thx.text.table.DefaultStyle.__default_defaultFormatter","thx/text/table/Style.hx",146,0x710751c5)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(maxWidth,"maxWidth")
HXLINE( 147)		Int _hx_tmp = ( ( ::hx::EnumBase)(value) )->_hx_getIndex();
HXDLIN( 147)		if ((_hx_tmp == (int)2)) {
HXLINE( 148)			HX_VARI( ::String,v) = value->_hx_getString(0);
HXLINE( 149)			Bool _hx_tmp1;
HXDLIN( 149)			if (hx::IsNotNull( maxWidth )) {
HXLINE( 149)				_hx_tmp1 = hx::IsGreater( maxWidth,(int)0 );
            			}
            			else {
HXLINE( 149)				_hx_tmp1 = false;
            			}
HXDLIN( 149)			if (_hx_tmp1) {
HXLINE( 150)				v = ::thx::Strings_obj::wrapColumns(v,maxWidth,null(),null());
            			}
HXLINE( 151)			return ::thx::text::table::StringBlock_obj::fromString(v);
            		}
HXLINE( 154)		HX_VAR( ::String,s);
HXDLIN( 154)		Int _hx_tmp2 = ( ( ::hx::EnumBase)(value) )->_hx_getIndex();
HXDLIN( 154)		switch((int)(_hx_tmp2)){
            			case (int)0: {
HXLINE( 154)				s = ( (::String)(::thx::text::table::DefaultStyle_obj::defaultIntFormatter(value->_hx_getInt(0))) );
            			}
            			break;
            			case (int)1: {
HXLINE( 154)				s = ( (::String)(::thx::text::table::DefaultStyle_obj::defaultFloatFormatter(value->_hx_getFloat(0))) );
            			}
            			break;
            			case (int)2: {
HXLINE( 154)				s = ( (::String)(::thx::text::table::DefaultStyle_obj::defaultStringFormatter(value->_hx_getString(0))) );
            			}
            			break;
            			case (int)3: {
HXLINE( 154)				s = ( (::String)(::thx::text::table::DefaultStyle_obj::defaultBoolFormatter(value->_hx_getBool(0))) );
            			}
            			break;
            			case (int)4: {
HXLINE( 154)				s = ( (::String)(::thx::text::table::DefaultStyle_obj::defaultDateTimeFormatter(value->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >())) );
            			}
            			break;
            			case (int)5: {
HXLINE( 154)				s = ( (::String)(::thx::text::table::DefaultStyle_obj::defaultTimeFormatter(value->_hx_getObject(0).StaticCast<  ::cpp::Int64Struct >())) );
            			}
            			break;
            			case (int)6: {
HXLINE( 154)				s = ( (::String)(::thx::text::table::DefaultStyle_obj::defaultEmptyFormatter()) );
            			}
            			break;
            			case (int)7: {
HXLINE( 154)				s = ( (::String)(::thx::text::table::DefaultStyle_obj::defaultNAFormatter()) );
            			}
            			break;
            		}
HXLINE( 164)		Bool _hx_tmp3;
HXDLIN( 164)		if (hx::IsNotNull( maxWidth )) {
HXLINE( 164)			_hx_tmp3 = hx::IsGreater( maxWidth,(int)0 );
            		}
            		else {
HXLINE( 164)			_hx_tmp3 = false;
            		}
HXDLIN( 164)		if (_hx_tmp3) {
HXLINE( 165)			s = ::thx::Strings_obj::ellipsisMiddle(s,null(),null());
            		}
HXLINE( 166)		return  ::thx::text::table::StringBlock_obj::__new(::Array_obj< ::String >::__new(1)->init(0,s));
            	}
HX_END_LOCAL_FUNC2(return )
HX_END_DEFAULT_FUNC

::Dynamic DefaultStyle_obj::defaultFormatter;

HX_BEGIN_DEFAULT_FUNC(__default_defaultAligner,DefaultStyle_obj)
::hx::EnumBase _hx_run(::hx::EnumBase value,::hx::EnumBase type){
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","__default_defaultAligner",0x9bfa3cb6,"thx.text.table.DefaultStyle.__default_defaultAligner","thx/text/table/Style.hx",170,0x710751c5)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(type,"type")
HXLINE( 170)		Int _hx_tmp = ( ( ::hx::EnumBase)(type) )->_hx_getIndex();
HXDLIN( 170)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE( 170)				Int _hx_tmp1 = ( ( ::hx::EnumBase)(value) )->_hx_getIndex();
HXDLIN( 170)				switch((int)(_hx_tmp1)){
            					case (int)0: case (int)1: case (int)2: case (int)4: case (int)5: case (int)6: case (int)7: {
HXLINE( 170)						return ::thx::text::table::HAlign_obj::Left_dyn();
            					}
            					break;
            					case (int)3: {
HXLINE( 170)						return ::thx::text::table::HAlign_obj::Center_dyn();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 170)				return ::thx::text::table::HAlign_obj::Center_dyn();
            			}
            			break;
            			default:{
HXLINE( 170)				Int _hx_tmp2 = ( ( ::hx::EnumBase)(value) )->_hx_getIndex();
HXDLIN( 170)				switch((int)(_hx_tmp2)){
            					case (int)0: case (int)1: {
HXLINE( 170)						return ::thx::text::table::HAlign_obj::OnSymbol(::thx::text::table::DefaultStyle_obj::defaultCulture->number->separatorDecimalNumber);
            					}
            					break;
            					case (int)2: case (int)6: {
HXLINE( 170)						return ::thx::text::table::HAlign_obj::Left_dyn();
            					}
            					break;
            					case (int)3: {
HXLINE( 170)						return ::thx::text::table::HAlign_obj::Center_dyn();
            					}
            					break;
            					case (int)4: case (int)5: case (int)7: {
HXLINE( 170)						return ::thx::text::table::HAlign_obj::Right_dyn();
            					}
            					break;
            				}
            			}
            		}
HXDLIN( 170)		return null();
            	}
HX_END_LOCAL_FUNC2(return )
HX_END_DEFAULT_FUNC

::Dynamic DefaultStyle_obj::defaultAligner;


DefaultStyle_obj::DefaultStyle_obj()
{
}

hx::Val DefaultStyle_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_type()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"aligner") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_aligner()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"maxWidth") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_maxWidth()); }
		if (HX_FIELD_EQ(inName,"minWidth") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_minWidth()); }
		if (HX_FIELD_EQ(inName,"setAlign") ) { return hx::Val( setAlign_dyn()); }
		if (HX_FIELD_EQ(inName,"get_type") ) { return hx::Val( get_type_dyn()); }
		if (HX_FIELD_EQ(inName,"set_type") ) { return hx::Val( set_type_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"maxHeight") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_maxHeight()); }
		if (HX_FIELD_EQ(inName,"minHeight") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_minHeight()); }
		if (HX_FIELD_EQ(inName,"formatter") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_formatter()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_aligner") ) { return hx::Val( get_aligner_dyn()); }
		if (HX_FIELD_EQ(inName,"set_aligner") ) { return hx::Val( set_aligner_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_maxWidth") ) { return hx::Val( get_maxWidth_dyn()); }
		if (HX_FIELD_EQ(inName,"set_maxWidth") ) { return hx::Val( set_maxWidth_dyn()); }
		if (HX_FIELD_EQ(inName,"get_minWidth") ) { return hx::Val( get_minWidth_dyn()); }
		if (HX_FIELD_EQ(inName,"set_minWidth") ) { return hx::Val( set_minWidth_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_maxHeight") ) { return hx::Val( get_maxHeight_dyn()); }
		if (HX_FIELD_EQ(inName,"set_maxHeight") ) { return hx::Val( set_maxHeight_dyn()); }
		if (HX_FIELD_EQ(inName,"get_minHeight") ) { return hx::Val( get_minHeight_dyn()); }
		if (HX_FIELD_EQ(inName,"set_minHeight") ) { return hx::Val( set_minHeight_dyn()); }
		if (HX_FIELD_EQ(inName,"get_formatter") ) { return hx::Val( get_formatter_dyn()); }
		if (HX_FIELD_EQ(inName,"set_formatter") ) { return hx::Val( set_formatter_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool DefaultStyle_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = instance; return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"defaultType") ) { outValue = defaultType; return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"defaultCulture") ) { outValue = defaultCulture; return true; }
		if (HX_FIELD_EQ(inName,"defaultAligner") ) { outValue = defaultAligner; return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"defaultMaxWidth") ) { outValue = defaultMaxWidth; return true; }
		if (HX_FIELD_EQ(inName,"defaultMinWidth") ) { outValue = defaultMinWidth; return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"defaultMaxHeight") ) { outValue = defaultMaxHeight; return true; }
		if (HX_FIELD_EQ(inName,"defaultMinHeight") ) { outValue = defaultMinHeight; return true; }
		if (HX_FIELD_EQ(inName,"defaultFormatter") ) { outValue = defaultFormatter; return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"defaultNAFormatter") ) { outValue = defaultNAFormatter; return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"defaultIntFormatter") ) { outValue = defaultIntFormatter; return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"defaultBoolFormatter") ) { outValue = defaultBoolFormatter; return true; }
		if (HX_FIELD_EQ(inName,"defaultTimeFormatter") ) { outValue = defaultTimeFormatter; return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"defaultFloatFormatter") ) { outValue = defaultFloatFormatter; return true; }
		if (HX_FIELD_EQ(inName,"defaultEmptyFormatter") ) { outValue = defaultEmptyFormatter; return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"defaultStringFormatter") ) { outValue = defaultStringFormatter; return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"defaultDateTimeFormatter") ) { outValue = defaultDateTimeFormatter; return true; }
	}
	return false;
}

hx::Val DefaultStyle_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_type(inValue) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"aligner") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_aligner(inValue) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"maxWidth") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_maxWidth(inValue) ); }
		if (HX_FIELD_EQ(inName,"minWidth") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_minWidth(inValue) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"maxHeight") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_maxHeight(inValue) ); }
		if (HX_FIELD_EQ(inName,"minHeight") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_minHeight(inValue) ); }
		if (HX_FIELD_EQ(inName,"formatter") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_formatter(inValue) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool DefaultStyle_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::thx::text::table::DefaultStyle >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"defaultType") ) { defaultType=ioValue.Cast< ::hx::EnumBase >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"defaultCulture") ) { defaultCulture=ioValue.Cast<  ::thx::culture::Culture >(); return true; }
		if (HX_FIELD_EQ(inName,"defaultAligner") ) { defaultAligner=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"defaultMaxWidth") ) { defaultMaxWidth=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"defaultMinWidth") ) { defaultMinWidth=ioValue.Cast< Int >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"defaultMaxHeight") ) { defaultMaxHeight=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"defaultMinHeight") ) { defaultMinHeight=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"defaultFormatter") ) { defaultFormatter=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"defaultNAFormatter") ) { defaultNAFormatter=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"defaultIntFormatter") ) { defaultIntFormatter=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"defaultBoolFormatter") ) { defaultBoolFormatter=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"defaultTimeFormatter") ) { defaultTimeFormatter=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"defaultFloatFormatter") ) { defaultFloatFormatter=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"defaultEmptyFormatter") ) { defaultEmptyFormatter=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"defaultStringFormatter") ) { defaultStringFormatter=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"defaultDateTimeFormatter") ) { defaultDateTimeFormatter=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

void DefaultStyle_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("maxHeight","\xab","\x19","\xd7","\x31"));
	outFields->push(HX_HCSTRING("minHeight","\x19","\x07","\x94","\x5b"));
	outFields->push(HX_HCSTRING("maxWidth","\xc2","\x08","\x80","\x74"));
	outFields->push(HX_HCSTRING("minWidth","\x14","\x23","\x9a","\xc1"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *DefaultStyle_obj_sMemberStorageInfo = 0;
static hx::StaticInfo DefaultStyle_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::thx::text::table::DefaultStyle*/ ,(void *) &DefaultStyle_obj::instance,HX_HCSTRING("instance","\x95","\x1f","\xe1","\x59")},
	{hx::fsObject /*::thx::text::table::CellType*/ ,(void *) &DefaultStyle_obj::defaultType,HX_HCSTRING("defaultType","\x1b","\xec","\xc7","\x1e")},
	{hx::fsObject /*Dynamic*/ ,(void *) &DefaultStyle_obj::defaultMaxHeight,HX_HCSTRING("defaultMaxHeight","\xaa","\x80","\xcf","\xf4")},
	{hx::fsInt,(void *) &DefaultStyle_obj::defaultMinHeight,HX_HCSTRING("defaultMinHeight","\x18","\x6e","\x8c","\x1e")},
	{hx::fsObject /*Dynamic*/ ,(void *) &DefaultStyle_obj::defaultMaxWidth,HX_HCSTRING("defaultMaxWidth","\xa3","\xc6","\x8d","\x9d")},
	{hx::fsInt,(void *) &DefaultStyle_obj::defaultMinWidth,HX_HCSTRING("defaultMinWidth","\xf5","\xe0","\xa7","\xea")},
	{hx::fsObject /*::thx::culture::Culture*/ ,(void *) &DefaultStyle_obj::defaultCulture,HX_HCSTRING("defaultCulture","\x2d","\x0f","\x1b","\x88")},
	{hx::fsObject /*Dynamic*/ ,(void *) &DefaultStyle_obj::defaultIntFormatter,HX_HCSTRING("defaultIntFormatter","\x7c","\xea","\x67","\xb0")},
	{hx::fsObject /*Dynamic*/ ,(void *) &DefaultStyle_obj::defaultFloatFormatter,HX_HCSTRING("defaultFloatFormatter","\x6f","\x4e","\x5b","\x07")},
	{hx::fsObject /*Dynamic*/ ,(void *) &DefaultStyle_obj::defaultStringFormatter,HX_HCSTRING("defaultStringFormatter","\x38","\xb0","\xbb","\xe9")},
	{hx::fsObject /*Dynamic*/ ,(void *) &DefaultStyle_obj::defaultBoolFormatter,HX_HCSTRING("defaultBoolFormatter","\xff","\xc3","\x17","\x42")},
	{hx::fsObject /*Dynamic*/ ,(void *) &DefaultStyle_obj::defaultDateTimeFormatter,HX_HCSTRING("defaultDateTimeFormatter","\x2e","\xc8","\x26","\x0c")},
	{hx::fsObject /*Dynamic*/ ,(void *) &DefaultStyle_obj::defaultTimeFormatter,HX_HCSTRING("defaultTimeFormatter","\xbc","\xe7","\x5d","\x5b")},
	{hx::fsObject /*Dynamic*/ ,(void *) &DefaultStyle_obj::defaultNAFormatter,HX_HCSTRING("defaultNAFormatter","\x36","\xb5","\xd4","\xac")},
	{hx::fsObject /*Dynamic*/ ,(void *) &DefaultStyle_obj::defaultEmptyFormatter,HX_HCSTRING("defaultEmptyFormatter","\x5e","\x33","\x24","\x1e")},
	{hx::fsObject /*Dynamic*/ ,(void *) &DefaultStyle_obj::defaultFormatter,HX_HCSTRING("defaultFormatter","\x09","\x52","\x60","\xdc")},
	{hx::fsObject /*Dynamic*/ ,(void *) &DefaultStyle_obj::defaultAligner,HX_HCSTRING("defaultAligner","\xb1","\x03","\xe9","\xd8")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String DefaultStyle_obj_sMemberFields[] = {
	HX_HCSTRING("setAlign","\xc3","\xbf","\xc5","\x2f"),
	HX_HCSTRING("get_type","\x43","\xae","\xc3","\xcc"),
	HX_HCSTRING("set_type","\xb7","\x07","\x21","\x7b"),
	HX_HCSTRING("get_maxHeight","\x82","\xed","\x3a","\xf3"),
	HX_HCSTRING("set_maxHeight","\x8e","\xcf","\x40","\x38"),
	HX_HCSTRING("get_minHeight","\xf0","\xda","\xf7","\x1c"),
	HX_HCSTRING("set_minHeight","\xfc","\xbc","\xfd","\x61"),
	HX_HCSTRING("get_maxWidth","\xcb","\xbc","\x99","\x29"),
	HX_HCSTRING("set_maxWidth","\x3f","\xe0","\x92","\x3e"),
	HX_HCSTRING("get_minWidth","\x1d","\xd7","\xb3","\x76"),
	HX_HCSTRING("set_minWidth","\x91","\xfa","\xac","\x8b"),
	HX_HCSTRING("get_formatter","\xe1","\xbe","\xcb","\xda"),
	HX_HCSTRING("set_formatter","\xed","\xa0","\xd1","\x1f"),
	HX_HCSTRING("get_aligner","\x89","\x0a","\xa3","\x2f"),
	HX_HCSTRING("set_aligner","\x95","\x11","\x10","\x3a"),
	::String(null()) };

static void DefaultStyle_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DefaultStyle_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(DefaultStyle_obj::instance,"instance");
	HX_MARK_MEMBER_NAME(DefaultStyle_obj::defaultType,"defaultType");
	HX_MARK_MEMBER_NAME(DefaultStyle_obj::defaultMaxHeight,"defaultMaxHeight");
	HX_MARK_MEMBER_NAME(DefaultStyle_obj::defaultMinHeight,"defaultMinHeight");
	HX_MARK_MEMBER_NAME(DefaultStyle_obj::defaultMaxWidth,"defaultMaxWidth");
	HX_MARK_MEMBER_NAME(DefaultStyle_obj::defaultMinWidth,"defaultMinWidth");
	HX_MARK_MEMBER_NAME(DefaultStyle_obj::defaultCulture,"defaultCulture");
	HX_MARK_MEMBER_NAME(DefaultStyle_obj::defaultIntFormatter,"defaultIntFormatter");
	HX_MARK_MEMBER_NAME(DefaultStyle_obj::defaultFloatFormatter,"defaultFloatFormatter");
	HX_MARK_MEMBER_NAME(DefaultStyle_obj::defaultStringFormatter,"defaultStringFormatter");
	HX_MARK_MEMBER_NAME(DefaultStyle_obj::defaultBoolFormatter,"defaultBoolFormatter");
	HX_MARK_MEMBER_NAME(DefaultStyle_obj::defaultDateTimeFormatter,"defaultDateTimeFormatter");
	HX_MARK_MEMBER_NAME(DefaultStyle_obj::defaultTimeFormatter,"defaultTimeFormatter");
	HX_MARK_MEMBER_NAME(DefaultStyle_obj::defaultNAFormatter,"defaultNAFormatter");
	HX_MARK_MEMBER_NAME(DefaultStyle_obj::defaultEmptyFormatter,"defaultEmptyFormatter");
	HX_MARK_MEMBER_NAME(DefaultStyle_obj::defaultFormatter,"defaultFormatter");
	HX_MARK_MEMBER_NAME(DefaultStyle_obj::defaultAligner,"defaultAligner");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DefaultStyle_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DefaultStyle_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(DefaultStyle_obj::instance,"instance");
	HX_VISIT_MEMBER_NAME(DefaultStyle_obj::defaultType,"defaultType");
	HX_VISIT_MEMBER_NAME(DefaultStyle_obj::defaultMaxHeight,"defaultMaxHeight");
	HX_VISIT_MEMBER_NAME(DefaultStyle_obj::defaultMinHeight,"defaultMinHeight");
	HX_VISIT_MEMBER_NAME(DefaultStyle_obj::defaultMaxWidth,"defaultMaxWidth");
	HX_VISIT_MEMBER_NAME(DefaultStyle_obj::defaultMinWidth,"defaultMinWidth");
	HX_VISIT_MEMBER_NAME(DefaultStyle_obj::defaultCulture,"defaultCulture");
	HX_VISIT_MEMBER_NAME(DefaultStyle_obj::defaultIntFormatter,"defaultIntFormatter");
	HX_VISIT_MEMBER_NAME(DefaultStyle_obj::defaultFloatFormatter,"defaultFloatFormatter");
	HX_VISIT_MEMBER_NAME(DefaultStyle_obj::defaultStringFormatter,"defaultStringFormatter");
	HX_VISIT_MEMBER_NAME(DefaultStyle_obj::defaultBoolFormatter,"defaultBoolFormatter");
	HX_VISIT_MEMBER_NAME(DefaultStyle_obj::defaultDateTimeFormatter,"defaultDateTimeFormatter");
	HX_VISIT_MEMBER_NAME(DefaultStyle_obj::defaultTimeFormatter,"defaultTimeFormatter");
	HX_VISIT_MEMBER_NAME(DefaultStyle_obj::defaultNAFormatter,"defaultNAFormatter");
	HX_VISIT_MEMBER_NAME(DefaultStyle_obj::defaultEmptyFormatter,"defaultEmptyFormatter");
	HX_VISIT_MEMBER_NAME(DefaultStyle_obj::defaultFormatter,"defaultFormatter");
	HX_VISIT_MEMBER_NAME(DefaultStyle_obj::defaultAligner,"defaultAligner");
};

#endif

hx::Class DefaultStyle_obj::__mClass;

static ::String DefaultStyle_obj_sStaticFields[] = {
	HX_HCSTRING("instance","\x95","\x1f","\xe1","\x59"),
	HX_HCSTRING("defaultType","\x1b","\xec","\xc7","\x1e"),
	HX_HCSTRING("defaultMaxHeight","\xaa","\x80","\xcf","\xf4"),
	HX_HCSTRING("defaultMinHeight","\x18","\x6e","\x8c","\x1e"),
	HX_HCSTRING("defaultMaxWidth","\xa3","\xc6","\x8d","\x9d"),
	HX_HCSTRING("defaultMinWidth","\xf5","\xe0","\xa7","\xea"),
	HX_HCSTRING("defaultCulture","\x2d","\x0f","\x1b","\x88"),
	HX_HCSTRING("defaultIntFormatter","\x7c","\xea","\x67","\xb0"),
	HX_HCSTRING("defaultFloatFormatter","\x6f","\x4e","\x5b","\x07"),
	HX_HCSTRING("defaultStringFormatter","\x38","\xb0","\xbb","\xe9"),
	HX_HCSTRING("defaultBoolFormatter","\xff","\xc3","\x17","\x42"),
	HX_HCSTRING("defaultDateTimeFormatter","\x2e","\xc8","\x26","\x0c"),
	HX_HCSTRING("defaultTimeFormatter","\xbc","\xe7","\x5d","\x5b"),
	HX_HCSTRING("defaultNAFormatter","\x36","\xb5","\xd4","\xac"),
	HX_HCSTRING("defaultEmptyFormatter","\x5e","\x33","\x24","\x1e"),
	HX_HCSTRING("defaultFormatter","\x09","\x52","\x60","\xdc"),
	HX_HCSTRING("defaultAligner","\xb1","\x03","\xe9","\xd8"),
	::String(null())
};

void DefaultStyle_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.text.table.DefaultStyle","\x67","\x3a","\x1b","\xa0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DefaultStyle_obj::__GetStatic;
	__mClass->mSetStaticField = &DefaultStyle_obj::__SetStatic;
	__mClass->mMarkFunc = DefaultStyle_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(DefaultStyle_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DefaultStyle_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DefaultStyle_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DefaultStyle_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DefaultStyle_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DefaultStyle_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void DefaultStyle_obj::__boot()
{
{
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","boot",0xbd3ee399,"thx.text.table.DefaultStyle.boot","thx/text/table/Style.hx",131,0x710751c5)
HXLINE( 131)		instance =  ::thx::text::table::DefaultStyle_obj::__new();
            	}
{
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","boot",0xbd3ee399,"thx.text.table.DefaultStyle.boot","thx/text/table/Style.hx",132,0x710751c5)
HXLINE( 132)		defaultType = ::thx::text::table::CellType_obj::BodyCompact_dyn();
            	}
{
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","boot",0xbd3ee399,"thx.text.table.DefaultStyle.boot","thx/text/table/Style.hx",133,0x710751c5)
HXLINE( 133)		defaultMaxHeight = null();
            	}
{
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","boot",0xbd3ee399,"thx.text.table.DefaultStyle.boot","thx/text/table/Style.hx",134,0x710751c5)
HXLINE( 134)		defaultMinHeight = (int)1;
            	}
{
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","boot",0xbd3ee399,"thx.text.table.DefaultStyle.boot","thx/text/table/Style.hx",135,0x710751c5)
HXLINE( 135)		defaultMaxWidth = null();
            	}
{
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","boot",0xbd3ee399,"thx.text.table.DefaultStyle.boot","thx/text/table/Style.hx",136,0x710751c5)
HXLINE( 136)		defaultMinWidth = (int)1;
            	}
{
            	HX_STACK_FRAME("thx.text.table.DefaultStyle","boot",0xbd3ee399,"thx.text.table.DefaultStyle.boot","thx/culture/Embed.hx",36,0xb6a59b51)
HXLINE(  36)		HX_VARI(  ::Dynamic,o) =  ::Dynamic(hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            			->setFixed(1,HX_("number",c9,86,7a,a1), ::Dynamic(hx::Anon_obj::Create(25)
            				->setFixed(0,HX_("patternNegativeCurrency",56,69,b3,82),(int)0)
            				->setFixed(1,HX_("separatorGroupNumber",03,9f,89,8b),HX_(",",2c,00,00,00))
            				->setFixed(2,HX_("signNegative",d2,77,dd,90),HX_("-",2d,00,00,00))
            				->setFixed(3,HX_("symbolCurrency",c9,8a,97,92),HX_("$",24,00,00,00))
            				->setFixed(4,HX_("symbolPercent",4d,3e,49,c2),HX_("%",25,00,00,00))
            				->setFixed(5,HX_("groupSizesNumber",fc,7b,1c,cd),::Array_obj< Int >::__new(1)->init(0,(int)3))
            				->setFixed(6,HX_("decimalDigitsNumber",c0,3b,b5,d5),(int)2)
            				->setFixed(7,HX_("symbolNaN",43,fc,ff,df),HX_("NaN",9b,84,3b,00))
            				->setFixed(8,HX_("patternNegativeNumber",8e,ed,2d,e8),(int)1)
            				->setFixed(9,HX_("decimalDigitsPercent",ee,4d,fe,f7),(int)2)
            				->setFixed(10,HX_("symbolPermille",84,61,72,02),HX_("\xe2""\x80""\xb0""",92,ed,ab,00))
            				->setFixed(11,HX_("symbolPositiveInfinity",39,16,d7,06),HX_("Infinity",08,d3,1a,b4))
            				->setFixed(12,HX_("signPositive",16,f8,95,0a),HX_("+",2b,00,00,00))
            				->setFixed(13,HX_("separatorDecimalPercent",79,3d,cc,0c),HX_(".",2e,00,00,00))
            				->setFixed(14,HX_("patternNegativePercent",60,30,21,0f),(int)0)
            				->setFixed(15,HX_("patternPositivePercent",9c,00,df,26),(int)0)
            				->setFixed(16,HX_("patternPositiveCurrency",9a,cd,0b,31),(int)0)
            				->setFixed(17,HX_("symbolNegativeInfinity",f5,b1,7e,58),HX_("-Infinity",35,48,8a,c8))
            				->setFixed(18,HX_("decimalDigitsCurrency",08,28,50,5b),(int)2)
            				->setFixed(19,HX_("separatorGroupPercent",4b,c5,00,5c),HX_(",",2c,00,00,00))
            				->setFixed(20,HX_("separatorDecimalNumber",95,c6,00,63),HX_(".",2e,00,00,00))
            				->setFixed(21,HX_("groupSizesCurrency",44,ef,34,6b),::Array_obj< Int >::__new(1)->init(0,(int)3))
            				->setFixed(22,HX_("separatorGroupCurrency",0b,22,76,79),HX_(",",2c,00,00,00))
            				->setFixed(23,HX_("separatorDecimalCurrency",1d,d2,b3,7a),HX_(".",2e,00,00,00))
            				->setFixed(24,HX_("groupSizesPercent",32,42,ef,7a),::Array_obj< Int >::__new(1)->init(0,(int)3))))
            			->setFixed(2,HX_("nameNative",42,fa,9b,a6),HX_("English",10,8f,83,c6))
            			->setFixed(3,HX_("nameRegionEnglish",51,9f,9c,cc),HX_("United States",df,3b,55,64))
            			->setFixed(4,HX_("dateTime",5b,fd,0a,da), ::Dynamic(hx::Anon_obj::Create(27)
            				->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            				->setFixed(1,HX_("patternUniversalSortable",33,cc,22,95),HX_("yyyy'-'MM'-'dd HH':'mm':'ss'Z'",d4,92,25,cb))
            				->setFixed(2,HX_("patternDateTimeFull",fa,e6,03,9b),HX_("dddd, MMMM dd, yyyy h:mm:ss tt",b8,2b,cf,ac))
            				->setFixed(3,HX_("nameCalendarNative",a0,92,93,9f),HX_("Gregorian Calendar",78,a4,39,8d))
            				->setFixed(4,HX_("calendarWeekRuleName",59,45,06,a1),HX_("FirstDay",2c,70,bd,ca))
            				->setFixed(5,HX_("firstDayOfWeekName",c2,53,ad,a7),HX_("Sunday",70,80,82,d6))
            				->setFixed(6,HX_("nameMonthGenitives",e1,47,c7,a7),::Array_obj< ::String >::__new(13)->init(0,HX_("January",4a,18,86,71))->init(1,HX_("February",82,81,0a,2c))->init(2,HX_("March",a3,34,4f,96))->init(3,HX_("April",26,77,6a,b7))->init(4,HX_("May",85,c2,3a,00))->init(5,HX_("June",e2,f1,42,31))->init(6,HX_("July",38,f0,42,31))->init(7,HX_("August",63,79,82,9f))->init(8,HX_("September",f1,6e,c5,f7))->init(9,HX_("October",00,0d,99,7e))->init(10,HX_("November",d2,64,19,13))->init(11,HX_("December",05,71,82,9e))->init(12,HX_("",00,00,00,00)))
            				->setFixed(7,HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),::Array_obj< ::String >::__new(13)->init(0,HX_("Jan",b7,7b,38,00))->init(1,HX_("Feb",23,76,35,00))->init(2,HX_("Mar",7e,c2,3a,00))->init(3,HX_("Apr",83,b4,31,00))->init(4,HX_("May",85,c2,3a,00))->init(5,HX_("Jun",23,8d,38,00))->init(6,HX_("Jul",21,8d,38,00))->init(7,HX_("Aug",d3,b8,31,00))->init(8,HX_("Sep",7e,53,3f,00))->init(9,HX_("Oct",c0,48,3c,00))->init(10,HX_("Nov",f5,90,3b,00))->init(11,HX_("Dec",a2,f1,33,00))->init(12,HX_("",00,00,00,00)))
            				->setFixed(8,HX_("patternMonthDay",6c,c1,07,bb),HX_("MMMM dd",e0,38,48,d4))
            				->setFixed(9,HX_("patternDateLong",3a,69,d5,22),HX_("dddd, MMMM dd, yyyy",20,cf,04,b3))
            				->setFixed(10,HX_("patternDateTimeSortable",e3,2a,ec,23),HX_("yyyy'-'MM'-'dd'T'HH':'mm':'ss",ba,67,48,1c))
            				->setFixed(11,HX_("nameDaysShortest",ec,01,e4,25),::Array_obj< ::String >::__new(7)->init(0,HX_("Su",c2,48,00,00))->init(1,HX_("Mo",82,43,00,00))->init(2,HX_("Tu",a1,49,00,00))->init(3,HX_("We",2e,4c,00,00))->init(4,HX_("Th",94,49,00,00))->init(5,HX_("Fr",6c,3d,00,00))->init(6,HX_("Sa",ae,48,00,00)))
            				->setFixed(12,HX_("separatorDate",33,79,64,29),HX_("/",2f,00,00,00))
            				->setFixed(13,HX_("designatorAm",20,b2,52,2b),HX_("AM",ec,38,00,00))
            				->setFixed(14,HX_("designatorPm",31,bf,52,2b),HX_("PM",fd,45,00,00))
            				->setFixed(15,HX_("nameDaysAbbreviated",b7,fa,42,2c),::Array_obj< ::String >::__new(7)->init(0,HX_("Sun",6c,61,3f,00))->init(1,HX_("Mon",ac,ce,3a,00))->init(2,HX_("Tue",a4,23,40,00))->init(3,HX_("Wed",76,5c,42,00))->init(4,HX_("Thu",61,18,40,00))->init(5,HX_("Fri",7d,81,35,00))->init(6,HX_("Sat",06,50,3f,00)))
            				->setFixed(16,HX_("patternTimeShort",bf,e8,a8,30),HX_("h:mm tt",2e,56,3d,20))
            				->setFixed(17,HX_("separatorTime",12,ef,fd,33),HX_(":",3a,00,00,00))
            				->setFixed(18,HX_("patternTimeLong",99,ba,28,36),HX_("h:mm:ss tt",b8,7e,f4,ab))
            				->setFixed(19,HX_("firstDayOfWeekIndex",bb,01,8c,37),(int)0)
            				->setFixed(20,HX_("patternYearMonth",d3,8f,70,3a),HX_("MMMM, yyyy",f4,2a,01,54))
            				->setFixed(21,HX_("nameDays",82,7a,ea,3e),::Array_obj< ::String >::__new(7)->init(0,HX_("Sunday",70,80,82,d6))->init(1,HX_("Monday",30,db,f6,fb))->init(2,HX_("Tuesday",6d,85,94,e0))->init(3,HX_("Wednesday",76,20,5e,ee))->init(4,HX_("Thursday",3a,c9,04,61))->init(5,HX_("Friday",ff,00,5d,e6))->init(6,HX_("Saturday",59,42,eb,57)))
            				->setFixed(22,HX_("nameMonthsAbbreviated",db,78,52,40),::Array_obj< ::String >::__new(13)->init(0,HX_("Jan",b7,7b,38,00))->init(1,HX_("Feb",23,76,35,00))->init(2,HX_("Mar",7e,c2,3a,00))->init(3,HX_("Apr",83,b4,31,00))->init(4,HX_("May",85,c2,3a,00))->init(5,HX_("Jun",23,8d,38,00))->init(6,HX_("Jul",21,8d,38,00))->init(7,HX_("Aug",d3,b8,31,00))->init(8,HX_("Sep",7e,53,3f,00))->init(9,HX_("Oct",c0,48,3c,00))->init(10,HX_("Nov",f5,90,3b,00))->init(11,HX_("Dec",a2,f1,33,00))->init(12,HX_("",00,00,00,00)))
            				->setFixed(23,HX_("nameMonths",de,c1,ed,4b),::Array_obj< ::String >::__new(13)->init(0,HX_("January",4a,18,86,71))->init(1,HX_("February",82,81,0a,2c))->init(2,HX_("March",a3,34,4f,96))->init(3,HX_("April",26,77,6a,b7))->init(4,HX_("May",85,c2,3a,00))->init(5,HX_("June",e2,f1,42,31))->init(6,HX_("July",38,f0,42,31))->init(7,HX_("August",63,79,82,9f))->init(8,HX_("September",f1,6e,c5,f7))->init(9,HX_("October",00,0d,99,7e))->init(10,HX_("November",d2,64,19,13))->init(11,HX_("December",05,71,82,9e))->init(12,HX_("",00,00,00,00)))
            				->setFixed(24,HX_("patternDateShort",fe,06,15,5b),HX_("M/d/yyyy",4d,85,79,32))
            				->setFixed(25,HX_("patternRfc1123",e0,77,54,65),HX_("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",25,56,2d,9d))
            				->setFixed(26,HX_("calendarWeekRuleIndex",44,74,06,6c),(int)0)))
            			->setFixed(5,HX_("isNeutral",7d,6a,28,ef),false)
            			->setFixed(6,HX_("isRightToLeft",54,90,12,f0),false)
            			->setFixed(7,HX_("separatorList",63,3f,b4,2e),HX_(",",2c,00,00,00))
            			->setFixed(8,HX_("nameRegionNative",96,b0,9c,3e),HX_("United States",df,3b,55,64))
            			->setFixed(9,HX_("code",2d,b1,c4,41),HX_("en-US",02,7f,50,70))
            			->setFixed(10,HX_("ietf",4e,70,b4,45),HX_("en-US",02,7f,50,70))
            			->setFixed(11,HX_("iso2",4d,0b,bf,45),HX_("en",69,58,00,00))
            			->setFixed(12,HX_("iso3",4e,0b,bf,45),HX_("eng",de,03,4d,00))
            			->setFixed(13,HX_("lcid",12,86,ae,47),(int)1033)
            			->setFixed(14,HX_("win3",97,70,f8,4e),HX_("ENU",cc,9f,34,00))
            			->setFixed(15,HX_("nameEnglish",25,cc,fd,63),HX_("English",10,8f,83,c6)));
HXDLIN(  36)		 ::Dynamic _hx_tmp =  ::Dynamic(o->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::DateFormatInfo _hx_tmp1;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp1 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o1,"o") =  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp1 =  ::thx::culture::DateFormatInfo_obj::__new( ::Dynamic(o1->__Field(HX_("calendarWeekRuleIndex",44,74,06,6c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("calendarWeekRuleName",59,45,06,a1),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorAm",20,b2,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorPm",31,bf,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekIndex",bb,01,8c,37),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekName",c2,53,ad,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendarNative",a0,92,93,9f),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDays",82,7a,ea,3e),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysAbbreviated",b7,fa,42,2c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysShortest",ec,01,e4,25),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonths",de,c1,ed,4b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthsAbbreviated",db,78,52,40),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitives",e1,47,c7,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateLong",3a,69,d5,22),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateShort",fe,06,15,5b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeFull",fa,e6,03,9b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeSortable",e3,2a,ec,23),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternMonthDay",6c,c1,07,bb),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternRfc1123",e0,77,54,65),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeLong",99,ba,28,36),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeShort",bf,e8,a8,30),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternUniversalSortable",33,cc,22,95),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternYearMonth",d3,8f,70,3a),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorDate",33,79,64,29),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorTime",12,ef,fd,33),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::Dynamic _hx_tmp2 =  ::Dynamic(o->__Field(HX_("ietf",4e,70,b4,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp3 =  ::Dynamic(o->__Field(HX_("isNeutral",7d,6a,28,ef),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp4 =  ::Dynamic(o->__Field(HX_("iso2",4d,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp5 =  ::Dynamic(o->__Field(HX_("iso3",4e,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp6 =  ::Dynamic(o->__Field(HX_("isRightToLeft",54,90,12,f0),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp7 =  ::Dynamic(o->__Field(HX_("lcid",12,86,ae,47),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp8 =  ::Dynamic(o->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp9 =  ::Dynamic(o->__Field(HX_("nameEnglish",25,cc,fd,63),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp10 =  ::Dynamic(o->__Field(HX_("nameNative",42,fa,9b,a6),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp11 =  ::Dynamic(o->__Field(HX_("nameRegionEnglish",51,9f,9c,cc),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp12 =  ::Dynamic(o->__Field(HX_("nameRegionNative",96,b0,9c,3e),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::NumberFormatInfo _hx_tmp13;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp13 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o2,"o") =  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp13 =  ::thx::culture::NumberFormatInfo_obj::__new( ::Dynamic(o2->__Field(HX_("decimalDigitsCurrency",08,28,50,5b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsNumber",c0,3b,b5,d5),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsPercent",ee,4d,fe,f7),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesCurrency",44,ef,34,6b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesNumber",fc,7b,1c,cd),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesPercent",32,42,ef,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeCurrency",56,69,b3,82),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeNumber",8e,ed,2d,e8),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativePercent",60,30,21,0f),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositiveCurrency",9a,cd,0b,31),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositivePercent",9c,00,df,26),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalCurrency",1d,d2,b3,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalNumber",95,c6,00,63),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalPercent",79,3d,cc,0c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupCurrency",0b,22,76,79),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupNumber",03,9f,89,8b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupPercent",4b,c5,00,5c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signNegative",d2,77,dd,90),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signPositive",16,f8,95,0a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolCurrency",c9,8a,97,92),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNaN",43,fc,ff,df),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNegativeInfinity",f5,b1,7e,58),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPercent",4d,3e,49,c2),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPermille",84,61,72,02),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPositiveInfinity",39,16,d7,06),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::thx::culture::Culture _hx_tmp14 =  ::thx::culture::Culture_obj::__new(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10,_hx_tmp11,_hx_tmp12,_hx_tmp13, ::Dynamic(o->__Field(HX_("separatorList",63,3f,b4,2e),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("win3",97,70,f8,4e),hx::paccDynamic)));
HXDLIN(  36)		defaultCulture = ::thx::culture::Culture_obj::_hx_register(_hx_tmp14);
            	}
	defaultIntFormatter = new __default_defaultIntFormatter;

	defaultFloatFormatter = new __default_defaultFloatFormatter;

	defaultStringFormatter = new __default_defaultStringFormatter;

	defaultBoolFormatter = new __default_defaultBoolFormatter;

	defaultDateTimeFormatter = new __default_defaultDateTimeFormatter;

	defaultTimeFormatter = new __default_defaultTimeFormatter;

	defaultNAFormatter = new __default_defaultNAFormatter;

	defaultEmptyFormatter = new __default_defaultEmptyFormatter;

	defaultFormatter = new __default_defaultFormatter;

	defaultAligner = new __default_defaultAligner;

}

} // end namespace thx
} // end namespace text
} // end namespace table
