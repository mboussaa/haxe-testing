// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_text_table_Border
#include <thx/text/table/Border.h>
#endif
#ifndef INCLUDED_thx_text_table_BorderStyle
#include <thx/text/table/BorderStyle.h>
#endif
namespace thx{
namespace text{
namespace table{

::thx::text::table::Border Border_obj::Cross(::hx::EnumBase top,::hx::EnumBase right,::hx::EnumBase bottom,::hx::EnumBase left)
{
	return hx::CreateEnum< Border_obj >(HX_("Cross",60,cf,87,df),2,4)->_hx_init(0,top)->_hx_init(1,right)->_hx_init(2,bottom)->_hx_init(3,left);
}

::thx::text::table::Border Border_obj::Removable;

::thx::text::table::Border Border_obj::RemovableCross(::hx::EnumBase top,::hx::EnumBase right,::hx::EnumBase bottom,::hx::EnumBase left)
{
	return hx::CreateEnum< Border_obj >(HX_("RemovableCross",85,7a,25,01),1,4)->_hx_init(0,top)->_hx_init(1,right)->_hx_init(2,bottom)->_hx_init(3,left);
}

bool Border_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	if (inName==HX_("Cross",60,cf,87,df)) { outValue = Border_obj::Cross_dyn(); return true; }
	if (inName==HX_("Removable",fb,26,2c,6a)) { outValue = Border_obj::Removable; return true; }
	if (inName==HX_("RemovableCross",85,7a,25,01)) { outValue = Border_obj::RemovableCross_dyn(); return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(Border_obj)

int Border_obj::__FindIndex(::String inName)
{
	if (inName==HX_("Cross",60,cf,87,df)) return 2;
	if (inName==HX_("Removable",fb,26,2c,6a)) return 0;
	if (inName==HX_("RemovableCross",85,7a,25,01)) return 1;
	return super::__FindIndex(inName);
}

STATIC_HX_DEFINE_DYNAMIC_FUNC4(Border_obj,Cross,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC4(Border_obj,RemovableCross,return)

int Border_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("Cross",60,cf,87,df)) return 4;
	if (inName==HX_("Removable",fb,26,2c,6a)) return 0;
	if (inName==HX_("RemovableCross",85,7a,25,01)) return 4;
	return super::__FindArgCount(inName);
}

hx::Val Border_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	if (inName==HX_("Cross",60,cf,87,df)) return Cross_dyn();
	if (inName==HX_("Removable",fb,26,2c,6a)) return Removable;
	if (inName==HX_("RemovableCross",85,7a,25,01)) return RemovableCross_dyn();
	return super::__Field(inName,inCallProp);
}

static ::String Border_obj_sStaticFields[] = {
	HX_("Removable",fb,26,2c,6a),
	HX_("RemovableCross",85,7a,25,01),
	HX_("Cross",60,cf,87,df),
	::String(null())
};

static void Border_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Border_obj::Removable,"Removable");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Border_obj_sVisitStatic(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Border_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Border_obj::Removable,"Removable");
};
#endif

hx::Class Border_obj::__mClass;

Dynamic __Create_Border_obj() { return new Border_obj; }

void Border_obj::__register()
{

hx::Static(__mClass) = hx::_hx_RegisterClass(HX_HCSTRING("thx.text.table.Border","\x63","\xf3","\x01","\x24"), hx::TCanCast< Border_obj >,Border_obj_sStaticFields,0,
	&__Create_Border_obj, &__Create,
	&super::__SGetClass(), &CreateBorder_obj, Border_obj_sMarkStatics
#ifdef HXCPP_VISIT_ALLOCS
    , Border_obj_sVisitStatic
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &Border_obj::__GetStatic;
}

void Border_obj::__boot()
{
Removable = hx::CreateEnum< Border_obj >(HX_HCSTRING("Removable","\xfb","\x26","\x2c","\x6a"),0,0);
}


} // end namespace thx
} // end namespace text
} // end namespace table
