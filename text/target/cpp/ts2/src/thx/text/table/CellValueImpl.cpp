// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "cpp/Int64.h"
#ifndef INCLUDED_thx_text_table_CellValueImpl
#include <thx/text/table/CellValueImpl.h>
#endif
namespace thx{
namespace text{
namespace table{

::thx::text::table::CellValueImpl CellValueImpl_obj::BoolCell(Bool v)
{
	return hx::CreateEnum< CellValueImpl_obj >(HX_("BoolCell",0c,eb,49,84),3,1)->_hx_init(0,v);
}

::thx::text::table::CellValueImpl CellValueImpl_obj::DateTimeCell(::Array< ::Dynamic> v)
{
	return hx::CreateEnum< CellValueImpl_obj >(HX_("DateTimeCell",bd,e0,ec,61),4,1)->_hx_init(0,v);
}

::thx::text::table::CellValueImpl CellValueImpl_obj::Empty;

::thx::text::table::CellValueImpl CellValueImpl_obj::FloatCell(Float v)
{
	return hx::CreateEnum< CellValueImpl_obj >(HX_("FloatCell",3e,f1,c8,96),1,1)->_hx_init(0,v);
}

::thx::text::table::CellValueImpl CellValueImpl_obj::IntCell(Int v)
{
	return hx::CreateEnum< CellValueImpl_obj >(HX_("IntCell",11,26,f2,cd),0,1)->_hx_init(0,v);
}

::thx::text::table::CellValueImpl CellValueImpl_obj::NA;

::thx::text::table::CellValueImpl CellValueImpl_obj::StringCell(::String v)
{
	return hx::CreateEnum< CellValueImpl_obj >(HX_("StringCell",33,b7,6a,ea),2,1)->_hx_init(0,v);
}

::thx::text::table::CellValueImpl CellValueImpl_obj::TimeCell( ::cpp::Int64Struct v)
{
	return hx::CreateEnum< CellValueImpl_obj >(HX_("TimeCell",6f,60,d0,bb),5,1)->_hx_init(0,v);
}

bool CellValueImpl_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	if (inName==HX_("BoolCell",0c,eb,49,84)) { outValue = CellValueImpl_obj::BoolCell_dyn(); return true; }
	if (inName==HX_("DateTimeCell",bd,e0,ec,61)) { outValue = CellValueImpl_obj::DateTimeCell_dyn(); return true; }
	if (inName==HX_("Empty",6d,aa,07,03)) { outValue = CellValueImpl_obj::Empty; return true; }
	if (inName==HX_("FloatCell",3e,f1,c8,96)) { outValue = CellValueImpl_obj::FloatCell_dyn(); return true; }
	if (inName==HX_("IntCell",11,26,f2,cd)) { outValue = CellValueImpl_obj::IntCell_dyn(); return true; }
	if (inName==HX_("NA",33,44,00,00)) { outValue = CellValueImpl_obj::NA; return true; }
	if (inName==HX_("StringCell",33,b7,6a,ea)) { outValue = CellValueImpl_obj::StringCell_dyn(); return true; }
	if (inName==HX_("TimeCell",6f,60,d0,bb)) { outValue = CellValueImpl_obj::TimeCell_dyn(); return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(CellValueImpl_obj)

int CellValueImpl_obj::__FindIndex(::String inName)
{
	if (inName==HX_("BoolCell",0c,eb,49,84)) return 3;
	if (inName==HX_("DateTimeCell",bd,e0,ec,61)) return 4;
	if (inName==HX_("Empty",6d,aa,07,03)) return 6;
	if (inName==HX_("FloatCell",3e,f1,c8,96)) return 1;
	if (inName==HX_("IntCell",11,26,f2,cd)) return 0;
	if (inName==HX_("NA",33,44,00,00)) return 7;
	if (inName==HX_("StringCell",33,b7,6a,ea)) return 2;
	if (inName==HX_("TimeCell",6f,60,d0,bb)) return 5;
	return super::__FindIndex(inName);
}

STATIC_HX_DEFINE_DYNAMIC_FUNC1(CellValueImpl_obj,BoolCell,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(CellValueImpl_obj,DateTimeCell,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(CellValueImpl_obj,FloatCell,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(CellValueImpl_obj,IntCell,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(CellValueImpl_obj,StringCell,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(CellValueImpl_obj,TimeCell,return)

int CellValueImpl_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("BoolCell",0c,eb,49,84)) return 1;
	if (inName==HX_("DateTimeCell",bd,e0,ec,61)) return 1;
	if (inName==HX_("Empty",6d,aa,07,03)) return 0;
	if (inName==HX_("FloatCell",3e,f1,c8,96)) return 1;
	if (inName==HX_("IntCell",11,26,f2,cd)) return 1;
	if (inName==HX_("NA",33,44,00,00)) return 0;
	if (inName==HX_("StringCell",33,b7,6a,ea)) return 1;
	if (inName==HX_("TimeCell",6f,60,d0,bb)) return 1;
	return super::__FindArgCount(inName);
}

hx::Val CellValueImpl_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	if (inName==HX_("BoolCell",0c,eb,49,84)) return BoolCell_dyn();
	if (inName==HX_("DateTimeCell",bd,e0,ec,61)) return DateTimeCell_dyn();
	if (inName==HX_("Empty",6d,aa,07,03)) return Empty;
	if (inName==HX_("FloatCell",3e,f1,c8,96)) return FloatCell_dyn();
	if (inName==HX_("IntCell",11,26,f2,cd)) return IntCell_dyn();
	if (inName==HX_("NA",33,44,00,00)) return NA;
	if (inName==HX_("StringCell",33,b7,6a,ea)) return StringCell_dyn();
	if (inName==HX_("TimeCell",6f,60,d0,bb)) return TimeCell_dyn();
	return super::__Field(inName,inCallProp);
}

static ::String CellValueImpl_obj_sStaticFields[] = {
	HX_("IntCell",11,26,f2,cd),
	HX_("FloatCell",3e,f1,c8,96),
	HX_("StringCell",33,b7,6a,ea),
	HX_("BoolCell",0c,eb,49,84),
	HX_("DateTimeCell",bd,e0,ec,61),
	HX_("TimeCell",6f,60,d0,bb),
	HX_("Empty",6d,aa,07,03),
	HX_("NA",33,44,00,00),
	::String(null())
};

static void CellValueImpl_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CellValueImpl_obj::Empty,"Empty");
	HX_MARK_MEMBER_NAME(CellValueImpl_obj::NA,"NA");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CellValueImpl_obj_sVisitStatic(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CellValueImpl_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(CellValueImpl_obj::Empty,"Empty");
	HX_VISIT_MEMBER_NAME(CellValueImpl_obj::NA,"NA");
};
#endif

hx::Class CellValueImpl_obj::__mClass;

Dynamic __Create_CellValueImpl_obj() { return new CellValueImpl_obj; }

void CellValueImpl_obj::__register()
{

hx::Static(__mClass) = hx::_hx_RegisterClass(HX_HCSTRING("thx.text.table.CellValueImpl","\x58","\xd7","\xb4","\x02"), hx::TCanCast< CellValueImpl_obj >,CellValueImpl_obj_sStaticFields,0,
	&__Create_CellValueImpl_obj, &__Create,
	&super::__SGetClass(), &CreateCellValueImpl_obj, CellValueImpl_obj_sMarkStatics
#ifdef HXCPP_VISIT_ALLOCS
    , CellValueImpl_obj_sVisitStatic
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &CellValueImpl_obj::__GetStatic;
}

void CellValueImpl_obj::__boot()
{
Empty = hx::CreateEnum< CellValueImpl_obj >(HX_HCSTRING("Empty","\x6d","\xaa","\x07","\x03"),6,0);
NA = hx::CreateEnum< CellValueImpl_obj >(HX_HCSTRING("NA","\x33","\x44","\x00","\x00"),7,0);
}


} // end namespace thx
} // end namespace text
} // end namespace table
