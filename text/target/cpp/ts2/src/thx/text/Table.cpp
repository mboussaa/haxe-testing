// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_thx_Strings
#include <thx/Strings.h>
#endif
#ifndef INCLUDED_thx_text_Table
#include <thx/text/Table.h>
#endif
#ifndef INCLUDED_thx_text_table_Cell
#include <thx/text/table/Cell.h>
#endif
#ifndef INCLUDED_thx_text_table_CellSet
#include <thx/text/table/CellSet.h>
#endif
#ifndef INCLUDED_thx_text_table_CellType
#include <thx/text/table/CellType.h>
#endif
#ifndef INCLUDED_thx_text_table_CellValueImpl
#include <thx/text/table/CellValueImpl.h>
#endif
#ifndef INCLUDED_thx_text_table_Col
#include <thx/text/table/Col.h>
#endif
#ifndef INCLUDED_thx_text_table_HAlign
#include <thx/text/table/HAlign.h>
#endif
#ifndef INCLUDED_thx_text_table_IStyle
#include <thx/text/table/IStyle.h>
#endif
#ifndef INCLUDED_thx_text_table_Renderer
#include <thx/text/table/Renderer.h>
#endif
#ifndef INCLUDED_thx_text_table_Row
#include <thx/text/table/Row.h>
#endif
#ifndef INCLUDED_thx_text_table_Span
#include <thx/text/table/Span.h>
#endif
#ifndef INCLUDED_thx_text_table_Style
#include <thx/text/table/Style.h>
#endif
#ifndef INCLUDED_thx_text_table__CellValue_CellValue_Impl_
#include <thx/text/table/_CellValue/CellValue_Impl_.h>
#endif

namespace thx{
namespace text{

void Table_obj::__construct(){
            	HX_STACK_FRAME("thx.text.Table","new",0x6ecab189,"thx.text.Table.new","thx/text/Table.hx",74,0xcd384e67)
            	HX_STACK_THIS(this)
HXLINE(  75)		this->_rows = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  76)		this->_cols = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  77)		this->style =  ::thx::text::table::Style_obj::__new();
            	}

Dynamic Table_obj::__CreateEmpty() { return new Table_obj; }

hx::ObjectPtr< Table_obj > Table_obj::__new()
{
	hx::ObjectPtr< Table_obj > _hx_result = new Table_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Table_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Table_obj > _hx_result = new Table_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::thx::text::table::Cell Table_obj::set(::hx::EnumBase value,Int row,Int col,::hx::EnumBase span){
            	HX_STACK_FRAME("thx.text.Table","set",0x6ece7ccb,"thx.text.Table.set","thx/text/Table.hx",81,0xcd384e67)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(row,"row")
            	HX_STACK_ARG(col,"col")
            	HX_STACK_ARG(span,"span")
HXLINE(  82)		Bool _hx_tmp = hx::IsNull( span );
HXDLIN(  82)		if (_hx_tmp) {
HXLINE(  83)			span = ::thx::text::table::Span_obj::NoSpan_dyn();
            		}
HXLINE(  84)		HX_VARI(  ::thx::text::table::Row,r) = this->ensureRow(row);
HXDLIN(  84)		HX_VARI(  ::thx::text::table::Col,c) = this->ensureCol(col);
HXDLIN(  84)		HX_VARI(  ::thx::text::table::Cell,cell) =  ::thx::text::table::Cell_obj::__new(value,r,c,span);
HXLINE(  87)		c->setCell(row,cell);
HXLINE(  88)		return cell;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Table_obj,set,return )

 ::thx::text::table::Cell Table_obj::get(Int row,Int col){
            	HX_STACK_FRAME("thx.text.Table","get",0x6ec561bf,"thx.text.Table.get","thx/text/Table.hx",91,0xcd384e67)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(row,"row")
            	HX_STACK_ARG(col,"col")
HXLINE(  92)		HX_VARI_NAME(  ::thx::text::table::Col,col1,"col") = this->getCol(col);
HXLINE(  93)		if (hx::IsNull( col1 )) {
HXLINE(  93)			return null();
            		}
HXLINE(  94)		return col1->get(row);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Table_obj,get,return )

 ::thx::text::table::Col Table_obj::ensureCol(Int index){
            	HX_STACK_FRAME("thx.text.Table","ensureCol",0xdaba930b,"thx.text.Table.ensureCol","thx/text/Table.hx",97,0xcd384e67)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE(  98)		{
HXLINE(  98)			HX_VARI( Int,_g1) = this->_cols->length;
HXDLIN(  98)			HX_VARI( Int,_g) = (index + (int)1);
HXDLIN(  98)			while((_g1 < _g)){
HXLINE(  98)				HX_VARI( Int,i) = _g1++;
HXLINE(  99)				this->_cols[i] =  ::thx::text::table::Col_obj::__new(hx::ObjectPtr<OBJ_>(this),i);
            			}
            		}
HXLINE( 100)		return this->_cols->__get(index).StaticCast<  ::thx::text::table::Col >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Table_obj,ensureCol,return )

 ::thx::text::table::Row Table_obj::ensureRow(Int index){
            	HX_STACK_FRAME("thx.text.Table","ensureRow",0xdac5f4e5,"thx.text.Table.ensureRow","thx/text/Table.hx",103,0xcd384e67)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE( 104)		{
HXLINE( 104)			HX_VARI( Int,_g1) = this->_rows->length;
HXDLIN( 104)			HX_VARI( Int,_g) = (index + (int)1);
HXDLIN( 104)			while((_g1 < _g)){
HXLINE( 104)				HX_VARI( Int,i) = _g1++;
HXLINE( 105)				this->_rows[i] =  ::thx::text::table::Row_obj::__new(hx::ObjectPtr<OBJ_>(this),i);
            			}
            		}
HXLINE( 106)		return this->_rows->__get(index).StaticCast<  ::thx::text::table::Row >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Table_obj,ensureRow,return )

 ::thx::text::table::Col Table_obj::getCol(Int index){
            	HX_STACK_FRAME("thx.text.Table","getCol",0xf68037c1,"thx.text.Table.getCol","thx/text/Table.hx",110,0xcd384e67)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE( 110)		return this->_cols->__get(index).StaticCast<  ::thx::text::table::Col >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Table_obj,getCol,return )

 ::thx::text::table::Row Table_obj::getRow(Int index){
            	HX_STACK_FRAME("thx.text.Table","getRow",0xf68b999b,"thx.text.Table.getRow","thx/text/Table.hx",113,0xcd384e67)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE( 113)		return this->_rows->__get(index).StaticCast<  ::thx::text::table::Row >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Table_obj,getRow,return )

::Array< ::Dynamic> Table_obj::toArray(){
            	HX_STACK_FRAME("thx.text.Table","toArray",0x977ce3c7,"thx.text.Table.toArray","thx/text/Table.hx",115,0xcd384e67)
            	HX_STACK_THIS(this)
HXLINE( 116)		HX_VARI( ::Array< ::Dynamic>,collector) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 117)		{
HXLINE( 117)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 117)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_rows;
HXDLIN( 117)			while((_g < _g1->length)){
HXLINE( 117)				HX_VARI(  ::thx::text::table::Row,row) = _g1->__get(_g).StaticCast<  ::thx::text::table::Row >();
HXDLIN( 117)				++_g;
HXLINE( 118)				{
HXLINE( 118)					HX_VARI(  ::Dynamic,tmp) = row->iterator();
HXDLIN( 118)					while(true){
HXLINE( 118)						Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 118)						if (_hx_tmp) {
HXLINE( 118)							goto _hx_goto_3;
            						}
HXDLIN( 118)						HX_VARI(  ::thx::text::table::Cell,cell) = ( ( ::thx::text::table::Cell)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE( 119)						collector->push(cell);
            					}
            					_hx_goto_3:;
            				}
            			}
            		}
HXLINE( 120)		return collector;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Table_obj,toArray,return )

::String Table_obj::toString(){
            	HX_STACK_FRAME("thx.text.Table","toString",0x4f0a1ae3,"thx.text.Table.toString","thx/text/Table.hx",125,0xcd384e67)
            	HX_STACK_THIS(this)
HXLINE( 125)		return  ::thx::text::table::Renderer_obj::__new(null())->render(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Table_obj,toString,return )

Int Table_obj::get_rows(){
            	HX_STACK_FRAME("thx.text.Table","get_rows",0xe204fad9,"thx.text.Table.get_rows","thx/text/Table.hx",129,0xcd384e67)
            	HX_STACK_THIS(this)
HXLINE( 129)		return this->_rows->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Table_obj,get_rows,return )

Int Table_obj::get_cols(){
            	HX_STACK_FRAME("thx.text.Table","get_cols",0xd81abdf3,"thx.text.Table.get_cols","thx/text/Table.hx",132,0xcd384e67)
            	HX_STACK_THIS(this)
HXLINE( 132)		return this->_cols->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Table_obj,get_cols,return )

Int Table_obj::set_rows(Int value){
            	HX_STACK_FRAME("thx.text.Table","set_rows",0x9062544d,"thx.text.Table.set_rows","thx/text/Table.hx",134,0xcd384e67)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 135)		this->ensureRow((value + (int)1));
HXLINE( 136)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Table_obj,set_rows,return )

Int Table_obj::set_cols(Int value){
            	HX_STACK_FRAME("thx.text.Table","set_cols",0x86781767,"thx.text.Table.set_cols","thx/text/Table.hx",139,0xcd384e67)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 140)		this->ensureCol((value + (int)1));
HXLINE( 141)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Table_obj,set_cols,return )

 ::thx::text::Table Table_obj::fromData(::Array< ::Dynamic> data, ::Dynamic __o_hasHeader,::String title){
 ::Dynamic hasHeader = __o_hasHeader.Default(true);
            	HX_STACK_FRAME("thx.text.Table","fromData",0xb6ca6eeb,"thx.text.Table.fromData","thx/text/Table.hx",21,0xcd384e67)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(hasHeader,"hasHeader")
            	HX_STACK_ARG(title,"title")
HXLINE(  22)		HX_VAR( Int,offset);
HXDLIN(  22)		if (hx::IsNull( title )) {
HXLINE(  22)			offset = (int)0;
            		}
            		else {
HXLINE(  22)			offset = (int)1;
            		}
HXDLIN(  22)		HX_VARI(  ::thx::text::Table,table) =  ::thx::text::Table_obj::__new();
HXLINE(  24)		if (hasHeader) {
HXLINE(  25)			::thx::text::table::IStyle_obj::set_type(table->ensureRow(offset)->style,::thx::text::table::CellType_obj::Header_dyn());
            		}
HXLINE(  27)		if (hx::IsNotNull( title )) {
HXLINE(  28)			::thx::text::table::IStyle_obj::set_type(table->ensureRow((int)0)->style,::thx::text::table::CellType_obj::Header_dyn());
HXLINE(  29)			::thx::text::table::IStyle_obj::setAlign(table->ensureRow((int)0)->style,::thx::text::table::HAlign_obj::Center_dyn());
HXLINE(  30)			table->set(::thx::text::table::CellValueImpl_obj::StringCell(title),(int)0,(int)0,::thx::text::table::Span_obj::FillRight_dyn());
            		}
HXLINE(  32)		{
HXLINE(  32)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  32)			HX_VARI( Int,_g) = data->length;
HXDLIN(  32)			while((_g1 < _g)){
HXLINE(  32)				HX_VARI( Int,r) = _g1++;
HXLINE(  33)				HX_VARI( ::cpp::VirtualArray,row) = ::cpp::VirtualArray( data->__get(r));
HXLINE(  34)				{
HXLINE(  34)					HX_VARI( Int,_g3) = (int)0;
HXDLIN(  34)					HX_VARI( Int,_g2) = row->get_length();
HXDLIN(  34)					while((_g3 < _g2)){
HXLINE(  34)						HX_VARI( Int,c) = _g3++;
HXLINE(  35)						::hx::EnumBase _hx_tmp = ::thx::text::table::_CellValue::CellValue_Impl__obj::fromDynamic(row->__get(c));
HXDLIN(  35)						table->set(_hx_tmp,(r + offset),c,null());
            					}
            				}
            			}
            		}
HXLINE(  38)		return table;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Table_obj,fromData,return )

 ::thx::text::Table Table_obj::fromObjects(::Array< ::Dynamic> data,::String title){
            	HX_STACK_FRAME("thx.text.Table","fromObjects",0xe4f97eb3,"thx.text.Table.fromObjects","thx/text/Table.hx",41,0xcd384e67)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(title,"title")
HXLINE(  42)		HX_VAR( Int,offset);
HXDLIN(  42)		if (hx::IsNull( title )) {
HXLINE(  42)			offset = (int)0;
            		}
            		else {
HXLINE(  42)			offset = (int)1;
            		}
HXDLIN(  42)		HX_VARI(  ::thx::text::Table,table) =  ::thx::text::Table_obj::__new();
HXDLIN(  42)		HX_VARI(  ::haxe::ds::StringMap,headers) =  ::haxe::ds::StringMap_obj::__new();
HXDLIN(  42)		HX_VARI( Int,cols) = (int)0;
HXLINE(  46)		if (hx::IsNotNull( title )) {
HXLINE(  47)			::thx::text::table::IStyle_obj::set_type(table->ensureRow((int)0)->style,::thx::text::table::CellType_obj::Header_dyn());
HXLINE(  48)			::thx::text::table::IStyle_obj::setAlign(table->ensureRow((int)0)->style,::thx::text::table::HAlign_obj::Center_dyn());
HXLINE(  49)			table->set(::thx::text::table::CellValueImpl_obj::StringCell(title),(int)0,(int)0,::thx::text::table::Span_obj::FillRight_dyn());
            		}
HXLINE(  51)		::thx::text::table::IStyle_obj::set_type(table->ensureRow(offset)->style,::thx::text::table::CellType_obj::Header_dyn());
HXLINE(  52)		{
HXLINE(  52)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  52)			HX_VARI( Int,_g) = data->length;
HXDLIN(  52)			while((_g1 < _g)){
HXLINE(  52)				HX_VARI( Int,r) = _g1++;
HXLINE(  53)				HX_VARI( ::Array< ::String >,fields) = ::Reflect_obj::fields(data->__get(r));
HXLINE(  54)				{
HXLINE(  54)					HX_VARI( Int,_g2) = (int)0;
HXDLIN(  54)					while((_g2 < fields->length)){
HXLINE(  54)						HX_VARI( ::String,field) = fields->__get(_g2);
HXDLIN(  54)						++_g2;
HXLINE(  55)						HX_VARI(  ::Dynamic,col) = headers->get(field);
HXLINE(  56)						if (hx::IsNull( col )) {
HXLINE(  57)							col = cols++;
HXLINE(  58)							headers->set(field,col);
HXLINE(  59)							HX_VARI( ::String,v) = ::thx::Strings_obj::humanize(field);
HXDLIN(  59)							::hx::EnumBase _hx_tmp = ::thx::text::table::CellValueImpl_obj::StringCell(v);
HXDLIN(  59)							table->set(_hx_tmp,offset,col,null());
            						}
HXLINE(  61)						 ::Dynamic _hx_tmp1 = ::Reflect_obj::field(data->__get(r),field);
HXDLIN(  61)						::hx::EnumBase _hx_tmp2 = ::thx::text::table::_CellValue::CellValue_Impl__obj::fromDynamic(_hx_tmp1);
HXDLIN(  61)						table->set(_hx_tmp2,((r + offset) + (int)1),col,null());
            					}
            				}
            			}
            		}
HXLINE(  64)		return table;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Table_obj,fromObjects,return )


Table_obj::Table_obj()
{
}

void Table_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Table);
	HX_MARK_MEMBER_NAME(style,"style");
	HX_MARK_MEMBER_NAME(_rows,"_rows");
	HX_MARK_MEMBER_NAME(_cols,"_cols");
	HX_MARK_END_CLASS();
}

void Table_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(style,"style");
	HX_VISIT_MEMBER_NAME(_rows,"_rows");
	HX_VISIT_MEMBER_NAME(_cols,"_cols");
}

hx::Val Table_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn()); }
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"rows") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_rows()); }
		if (HX_FIELD_EQ(inName,"cols") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_cols()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"style") ) { return hx::Val( style); }
		if (HX_FIELD_EQ(inName,"_rows") ) { return hx::Val( _rows); }
		if (HX_FIELD_EQ(inName,"_cols") ) { return hx::Val( _cols); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"getCol") ) { return hx::Val( getCol_dyn()); }
		if (HX_FIELD_EQ(inName,"getRow") ) { return hx::Val( getRow_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"toArray") ) { return hx::Val( toArray_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		if (HX_FIELD_EQ(inName,"get_rows") ) { return hx::Val( get_rows_dyn()); }
		if (HX_FIELD_EQ(inName,"get_cols") ) { return hx::Val( get_cols_dyn()); }
		if (HX_FIELD_EQ(inName,"set_rows") ) { return hx::Val( set_rows_dyn()); }
		if (HX_FIELD_EQ(inName,"set_cols") ) { return hx::Val( set_cols_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"ensureCol") ) { return hx::Val( ensureCol_dyn()); }
		if (HX_FIELD_EQ(inName,"ensureRow") ) { return hx::Val( ensureRow_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Table_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fromData") ) { outValue = fromData_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fromObjects") ) { outValue = fromObjects_dyn(); return true; }
	}
	return false;
}

hx::Val Table_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rows") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_rows(inValue) ); }
		if (HX_FIELD_EQ(inName,"cols") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_cols(inValue) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"style") ) { style=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_rows") ) { _rows=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_cols") ) { _cols=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Table_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("rows","\x19","\xf5","\xae","\x4b"));
	outFields->push(HX_HCSTRING("cols","\x33","\xb8","\xc4","\x41"));
	outFields->push(HX_HCSTRING("style","\x31","\xa5","\x1d","\x84"));
	outFields->push(HX_HCSTRING("_rows","\xf8","\x10","\xc0","\xfe"));
	outFields->push(HX_HCSTRING("_cols","\x12","\xd4","\xd5","\xf4"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Table_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::thx::text::table::IStyle*/ ,(int)offsetof(Table_obj,style),HX_HCSTRING("style","\x31","\xa5","\x1d","\x84")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Table_obj,_rows),HX_HCSTRING("_rows","\xf8","\x10","\xc0","\xfe")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Table_obj,_cols),HX_HCSTRING("_cols","\x12","\xd4","\xd5","\xf4")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Table_obj_sStaticStorageInfo = 0;
#endif

static ::String Table_obj_sMemberFields[] = {
	HX_HCSTRING("style","\x31","\xa5","\x1d","\x84"),
	HX_HCSTRING("_rows","\xf8","\x10","\xc0","\xfe"),
	HX_HCSTRING("_cols","\x12","\xd4","\xd5","\xf4"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("ensureCol","\x22","\xed","\x74","\x29"),
	HX_HCSTRING("ensureRow","\xfc","\x4e","\x80","\x29"),
	HX_HCSTRING("getCol","\x4a","\xb9","\x1a","\xa3"),
	HX_HCSTRING("getRow","\x24","\x1b","\x26","\xa3"),
	HX_HCSTRING("toArray","\x1e","\xba","\x13","\xf2"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("get_rows","\xa2","\xb0","\x69","\xcb"),
	HX_HCSTRING("get_cols","\xbc","\x73","\x7f","\xc1"),
	HX_HCSTRING("set_rows","\x16","\x0a","\xc7","\x79"),
	HX_HCSTRING("set_cols","\x30","\xcd","\xdc","\x6f"),
	::String(null()) };

static void Table_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Table_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Table_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Table_obj::__mClass,"__mClass");
};

#endif

hx::Class Table_obj::__mClass;

static ::String Table_obj_sStaticFields[] = {
	HX_HCSTRING("fromData","\xb4","\x24","\x2f","\xa0"),
	HX_HCSTRING("fromObjects","\x8a","\xcc","\x8f","\x1a"),
	::String(null())
};

void Table_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.text.Table","\x17","\x39","\x47","\x8b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Table_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Table_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Table_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Table_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Table_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Table_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Table_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Table_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace text
