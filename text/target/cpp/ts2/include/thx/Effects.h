// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_Effects
#define INCLUDED_thx_Effects

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(thx,Effects)

namespace thx{


class HXCPP_CLASS_ATTRIBUTES Effects_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Effects_obj OBJ_;
		Effects_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.Effects")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.Effects"); }
		static hx::ObjectPtr< Effects_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Effects_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Effects","\xa2","\x0c","\x9d","\xfb"); }

		static void __boot();
		static  ::Dynamic logger;
		static  ::Dynamic &logger_dyn() { return logger;}
		static  ::Dynamic tap( ::Dynamic input, ::Dynamic f);
		static ::Dynamic tap_dyn();

		static  ::Dynamic traced( ::Dynamic input, ::Dynamic f);
		static ::Dynamic traced_dyn();

		static  ::Dynamic log( ::Dynamic input, ::Dynamic pos);
		static ::Dynamic log_dyn();

};

} // end namespace thx

#endif /* INCLUDED_thx_Effects */ 
