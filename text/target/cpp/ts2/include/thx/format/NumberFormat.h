// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_format_NumberFormat
#define INCLUDED_thx_format_NumberFormat

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(thx,culture,Culture)
HX_DECLARE_CLASS2(thx,culture,NumberFormatInfo)
HX_DECLARE_CLASS2(thx,format,NumberFormat)

namespace thx{
namespace format{


class HXCPP_CLASS_ATTRIBUTES NumberFormat_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef NumberFormat_obj OBJ_;
		NumberFormat_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.format.NumberFormat")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.format.NumberFormat"); }
		static hx::ObjectPtr< NumberFormat_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~NumberFormat_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("NumberFormat","\x00","\x93","\xb2","\xd5"); }

		static void __boot();
		static ::String binary(Float f, ::Dynamic significantDigits, ::thx::culture::Culture culture);
		static ::Dynamic binary_dyn();

		static ::String currency(Float f, ::Dynamic precision,::String symbol, ::thx::culture::Culture culture);
		static ::Dynamic currency_dyn();

		static ::String customFormat(Float f,::String pattern, ::thx::culture::Culture culture);
		static ::Dynamic customFormat_dyn();

		static ::String decimal(Float f, ::Dynamic significantDigits, ::thx::culture::Culture culture);
		static ::Dynamic decimal_dyn();

		static ::String exponential(Float f, ::Dynamic precision, ::Dynamic digits,::String symbol, ::thx::culture::Culture culture);
		static ::Dynamic exponential_dyn();

		static ::String fixed(Float f, ::Dynamic precision, ::thx::culture::Culture culture);
		static ::Dynamic fixed_dyn();

		static ::String format(Float f,::String pattern, ::thx::culture::Culture culture);
		static ::Dynamic format_dyn();

		static ::String general(Float f, ::Dynamic significantDigits, ::thx::culture::Culture culture);
		static ::Dynamic general_dyn();

		static ::String hex(Float f, ::Dynamic significantDigits, ::thx::culture::Culture culture);
		static ::Dynamic hex_dyn();

		static ::String integer(Float f, ::thx::culture::Culture culture);
		static ::Dynamic integer_dyn();

		static ::String number(Float f, ::Dynamic precision, ::thx::culture::Culture culture);
		static ::Dynamic number_dyn();

		static ::String octal(Float f, ::Dynamic significantDigits, ::thx::culture::Culture culture);
		static ::Dynamic octal_dyn();

		static ::String percent(Float f, ::Dynamic decimals, ::thx::culture::Culture culture);
		static ::Dynamic percent_dyn();

		static ::String permille(Float f, ::Dynamic decimals, ::thx::culture::Culture culture);
		static ::Dynamic permille_dyn();

		static ::String printf(Float f,::String pattern, ::thx::culture::Culture culture);
		static ::Dynamic printf_dyn();

		static ::String toBase(Int value,Int base, ::thx::culture::Culture culture);
		static ::Dynamic toBase_dyn();

		static ::String unit(Float f,Int decimals,::String unitSymbol, ::thx::culture::Culture culture);
		static ::Dynamic unit_dyn();

		static ::String BASE;
		static Int countSymbols(::String pattern,::String symbols);
		static ::Dynamic countSymbols_dyn();

		static ::String customFormatDecimalFraction(::String d,::String pattern, ::thx::culture::NumberFormatInfo nf);
		static ::Dynamic customFormatDecimalFraction_dyn();

		static ::String customFormatF(Float f,::String pattern, ::thx::culture::NumberFormatInfo nf,Bool isCurrency,Bool isPercent);
		static ::Dynamic customFormatF_dyn();

		static ::String customFormatInteger(::String v,::String pattern, ::thx::culture::NumberFormatInfo nf,Bool isCurrency,Bool isPercent);
		static ::Dynamic customFormatInteger_dyn();

		static ::String customIntegerAndFraction(Float f,::String pattern, ::thx::culture::NumberFormatInfo nf,Bool isCurrency,Bool isPercent);
		static ::Dynamic customIntegerAndFraction_dyn();

		static  ::Dynamic exponentialInfo(Float f);
		static ::Dynamic exponentialInfo_dyn();

		static Bool hasSymbols(::String pattern,::String symbols);
		static ::Dynamic hasSymbols_dyn();

		static ::String intPart(::String s,::Array< Int > groupSizes,::String groupSeparator);
		static ::Dynamic intPart_dyn();

		static  ::thx::culture::NumberFormatInfo numberFormat( ::thx::culture::Culture culture);
		static ::Dynamic numberFormat_dyn();

		static ::String pad(::String s,Int len,Bool round);
		static ::Dynamic pad_dyn();

		static  ::Dynamic paramOrNull(::String param);
		static ::Dynamic paramOrNull_dyn();

		static ::Array< ::String > splitOnDecimalSeparator(Float f);
		static ::Dynamic splitOnDecimalSeparator_dyn();

		static ::Array< ::String > splitPattern(::String pattern,::String separator);
		static ::Dynamic splitPattern_dyn();

		static ::String value(Float f,Int precision,::Array< Int > groupSizes,::String groupSeparator,::String decimalSeparator);
		static ::Dynamic value_dyn();

};

} // end namespace thx
} // end namespace format

#endif /* INCLUDED_thx_format_NumberFormat */ 
