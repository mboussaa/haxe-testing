// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx__DateTime_DateTime_Impl_
#define INCLUDED_thx__DateTime_DateTime_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#include <cpp/Int64.h>
HX_DECLARE_CLASS0(Date)
HX_DECLARE_CLASS1(thx,OrderingImpl)
HX_DECLARE_CLASS1(thx,TimePeriod)
HX_DECLARE_CLASS2(thx,_DateTime,DateTime_Impl_)

namespace thx{
namespace _DateTime{


class HXCPP_CLASS_ATTRIBUTES DateTime_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef DateTime_Impl__obj OBJ_;
		DateTime_Impl__obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx._DateTime.DateTime_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx._DateTime.DateTime_Impl_"); }
		static hx::ObjectPtr< DateTime_Impl__obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~DateTime_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("DateTime_Impl_","\x5b","\xc4","\xe6","\x72"); }

		static  ::cpp::Int64Struct localOffset();
		static ::Dynamic localOffset_dyn();

		static ::Array< ::Dynamic> now();
		static ::Dynamic now_dyn();

		static ::Array< ::Dynamic> nowUtc();
		static ::Dynamic nowUtc_dyn();

		static ::Array< ::Dynamic> fromDate( ::Date date);
		static ::Dynamic fromDate_dyn();

		static ::Array< ::Dynamic> fromDateWithOffset( ::Date date, ::cpp::Int64Struct offset);
		static ::Dynamic fromDateWithOffset_dyn();

		static ::Array< ::Dynamic> fromTime(Float timestamp);
		static ::Dynamic fromTime_dyn();

		static ::Array< ::Dynamic> fromString(::String s);
		static ::Dynamic fromString_dyn();

		static ::Array< ::Dynamic> daysRange(::Array< ::Dynamic> start,::Array< ::Dynamic> end);
		static ::Dynamic daysRange_dyn();

		static Int compare(::Array< ::Dynamic> a,::Array< ::Dynamic> b);
		static ::Dynamic compare_dyn();

		static  ::Dynamic ord();
		static ::Dynamic ord_dyn();

		static ::Array< ::Dynamic> create(Int year,Int month,Int day, ::Dynamic hour, ::Dynamic minute, ::Dynamic second, ::Dynamic millisecond, ::cpp::Int64Struct offset);
		static ::Dynamic create_dyn();

		static ::Array< ::Dynamic> _new( ::cpp::Int64Struct dateTime, ::cpp::Int64Struct offset);
		static ::Dynamic _new_dyn();

		static ::Array< ::Dynamic> min(::Array< ::Dynamic> this1,::Array< ::Dynamic> other);
		static ::Dynamic min_dyn();

		static ::Array< ::Dynamic> max(::Array< ::Dynamic> this1,::Array< ::Dynamic> other);
		static ::Dynamic max_dyn();

		static ::Array< ::Dynamic> jump(::Array< ::Dynamic> this1,::hx::EnumBase period,Int amount);
		static ::Dynamic jump_dyn();

		static Int daysInThisMonth(::Array< ::Dynamic> this1);
		static ::Dynamic daysInThisMonth_dyn();

		static ::Array< ::Dynamic> prevYear(::Array< ::Dynamic> this1);
		static ::Dynamic prevYear_dyn();

		static ::Array< ::Dynamic> nextYear(::Array< ::Dynamic> this1);
		static ::Dynamic nextYear_dyn();

		static ::Array< ::Dynamic> prevMonth(::Array< ::Dynamic> this1);
		static ::Dynamic prevMonth_dyn();

		static ::Array< ::Dynamic> nextMonth(::Array< ::Dynamic> this1);
		static ::Dynamic nextMonth_dyn();

		static ::Array< ::Dynamic> prevWeek(::Array< ::Dynamic> this1);
		static ::Dynamic prevWeek_dyn();

		static ::Array< ::Dynamic> nextWeek(::Array< ::Dynamic> this1);
		static ::Dynamic nextWeek_dyn();

		static ::Array< ::Dynamic> prevDay(::Array< ::Dynamic> this1);
		static ::Dynamic prevDay_dyn();

		static ::Array< ::Dynamic> nextDay(::Array< ::Dynamic> this1);
		static ::Dynamic nextDay_dyn();

		static ::Array< ::Dynamic> prevHour(::Array< ::Dynamic> this1);
		static ::Dynamic prevHour_dyn();

		static ::Array< ::Dynamic> nextHour(::Array< ::Dynamic> this1);
		static ::Dynamic nextHour_dyn();

		static ::Array< ::Dynamic> prevMinute(::Array< ::Dynamic> this1);
		static ::Dynamic prevMinute_dyn();

		static ::Array< ::Dynamic> nextMinute(::Array< ::Dynamic> this1);
		static ::Dynamic nextMinute_dyn();

		static ::Array< ::Dynamic> prevSecond(::Array< ::Dynamic> this1);
		static ::Dynamic prevSecond_dyn();

		static ::Array< ::Dynamic> nextSecond(::Array< ::Dynamic> this1);
		static ::Dynamic nextSecond_dyn();

		static ::Array< ::Dynamic> snapToWeekDay(::Array< ::Dynamic> this1,Int weekday, ::Dynamic firstDayOfWk);
		static ::Dynamic snapToWeekDay_dyn();

		static ::Array< ::Dynamic> snapNextWeekDay(::Array< ::Dynamic> this1,Int weekday);
		static ::Dynamic snapNextWeekDay_dyn();

		static ::Array< ::Dynamic> snapPrevWeekDay(::Array< ::Dynamic> this1,Int weekday);
		static ::Dynamic snapPrevWeekDay_dyn();

		static ::Array< ::Dynamic> snapNext(::Array< ::Dynamic> this1,::hx::EnumBase period);
		static ::Dynamic snapNext_dyn();

		static ::Array< ::Dynamic> snapPrev(::Array< ::Dynamic> this1,::hx::EnumBase period);
		static ::Dynamic snapPrev_dyn();

		static ::Array< ::Dynamic> snapTo(::Array< ::Dynamic> this1,::hx::EnumBase period);
		static ::Dynamic snapTo_dyn();

		static Bool sameYear(::Array< ::Dynamic> this1,::Array< ::Dynamic> other);
		static ::Dynamic sameYear_dyn();

		static Bool sameMonth(::Array< ::Dynamic> this1,::Array< ::Dynamic> other);
		static ::Dynamic sameMonth_dyn();

		static Bool sameDay(::Array< ::Dynamic> this1,::Array< ::Dynamic> other);
		static ::Dynamic sameDay_dyn();

		static Bool sameHour(::Array< ::Dynamic> this1,::Array< ::Dynamic> other);
		static ::Dynamic sameHour_dyn();

		static Bool sameMinute(::Array< ::Dynamic> this1,::Array< ::Dynamic> other);
		static ::Dynamic sameMinute_dyn();

		static Bool sameSecond(::Array< ::Dynamic> this1,::Array< ::Dynamic> other);
		static ::Dynamic sameSecond_dyn();

		static ::Array< ::Dynamic> withYear(::Array< ::Dynamic> this1,Int year);
		static ::Dynamic withYear_dyn();

		static ::Array< ::Dynamic> withMonth(::Array< ::Dynamic> this1,Int month);
		static ::Dynamic withMonth_dyn();

		static ::Array< ::Dynamic> withDay(::Array< ::Dynamic> this1,Int day);
		static ::Dynamic withDay_dyn();

		static ::Array< ::Dynamic> withHour(::Array< ::Dynamic> this1,Int hour);
		static ::Dynamic withHour_dyn();

		static ::Array< ::Dynamic> withMinute(::Array< ::Dynamic> this1,Int minute);
		static ::Dynamic withMinute_dyn();

		static ::Array< ::Dynamic> withSecond(::Array< ::Dynamic> this1,Int second);
		static ::Dynamic withSecond_dyn();

		static ::Array< ::Dynamic> withMillisecond(::Array< ::Dynamic> this1,Int millisecond);
		static ::Dynamic withMillisecond_dyn();

		static ::Array< ::Dynamic> withOffset(::Array< ::Dynamic> this1, ::cpp::Int64Struct offset);
		static ::Dynamic withOffset_dyn();

		static ::Array< ::Dynamic> add(::Array< ::Dynamic> this1, ::cpp::Int64Struct time);
		static ::Dynamic add_dyn();

		static ::Array< ::Dynamic> addTicks(::Array< ::Dynamic> this1, ::cpp::Int64Struct ticks);
		static ::Dynamic addTicks_dyn();

		static ::Array< ::Dynamic> subtract(::Array< ::Dynamic> this1, ::cpp::Int64Struct time);
		static ::Dynamic subtract_dyn();

		static  ::cpp::Int64Struct subtractDate(::Array< ::Dynamic> this1,::Array< ::Dynamic> date);
		static ::Dynamic subtractDate_dyn();

		static ::Array< ::Dynamic> addDays(::Array< ::Dynamic> this1,Float days);
		static ::Dynamic addDays_dyn();

		static ::Array< ::Dynamic> addHours(::Array< ::Dynamic> this1,Float hours);
		static ::Dynamic addHours_dyn();

		static ::Array< ::Dynamic> addMilliseconds(::Array< ::Dynamic> this1,Int milliseconds);
		static ::Dynamic addMilliseconds_dyn();

		static ::Array< ::Dynamic> addMinutes(::Array< ::Dynamic> this1,Float minutes);
		static ::Dynamic addMinutes_dyn();

		static ::Array< ::Dynamic> addMonths(::Array< ::Dynamic> this1,Int months);
		static ::Dynamic addMonths_dyn();

		static ::Array< ::Dynamic> addSeconds(::Array< ::Dynamic> this1,Float seconds);
		static ::Dynamic addSeconds_dyn();

		static ::Array< ::Dynamic> addYears(::Array< ::Dynamic> this1,Int years);
		static ::Dynamic addYears_dyn();

		static Int compareTo(::Array< ::Dynamic> this1,::Array< ::Dynamic> other);
		static ::Dynamic compareTo_dyn();

		static Bool equalsTo(::Array< ::Dynamic> this1,::Array< ::Dynamic> that);
		static ::Dynamic equalsTo_dyn();

		static Bool equals(::Array< ::Dynamic> self,::Array< ::Dynamic> that);
		static ::Dynamic equals_dyn();

		static Bool notEqualsTo(::Array< ::Dynamic> this1,::Array< ::Dynamic> that);
		static ::Dynamic notEqualsTo_dyn();

		static Bool notEquals(::Array< ::Dynamic> self,::Array< ::Dynamic> that);
		static ::Dynamic notEquals_dyn();

		static Bool nearEqualsTo(::Array< ::Dynamic> this1,::Array< ::Dynamic> other, ::cpp::Int64Struct span);
		static ::Dynamic nearEqualsTo_dyn();

		static Bool greaterThan(::Array< ::Dynamic> this1,::Array< ::Dynamic> that);
		static ::Dynamic greaterThan_dyn();

		static Bool greater(::Array< ::Dynamic> self,::Array< ::Dynamic> that);
		static ::Dynamic greater_dyn();

		static Bool greaterEqualsTo(::Array< ::Dynamic> this1,::Array< ::Dynamic> that);
		static ::Dynamic greaterEqualsTo_dyn();

		static Bool greaterEquals(::Array< ::Dynamic> self,::Array< ::Dynamic> that);
		static ::Dynamic greaterEquals_dyn();

		static Bool lessTo(::Array< ::Dynamic> this1,::Array< ::Dynamic> that);
		static ::Dynamic lessTo_dyn();

		static Bool less(::Array< ::Dynamic> self,::Array< ::Dynamic> that);
		static ::Dynamic less_dyn();

		static Bool lessEqualsTo(::Array< ::Dynamic> this1,::Array< ::Dynamic> that);
		static ::Dynamic lessEqualsTo_dyn();

		static Bool lessEquals(::Array< ::Dynamic> self,::Array< ::Dynamic> that);
		static ::Dynamic lessEquals_dyn();

		static ::Array< ::Dynamic> changeOffset(::Array< ::Dynamic> this1, ::cpp::Int64Struct newoffset);
		static ::Dynamic changeOffset_dyn();

		static  ::cpp::Int64Struct toUtc(::Array< ::Dynamic> this1);
		static ::Dynamic toUtc_dyn();

		static  ::cpp::Int64Struct clockDateTime(::Array< ::Dynamic> this1);
		static ::Dynamic clockDateTime_dyn();

		static ::String toString(::Array< ::Dynamic> this1);
		static ::Dynamic toString_dyn();

		static  ::cpp::Int64Struct get_utc(::Array< ::Dynamic> this1);
		static ::Dynamic get_utc_dyn();

		static  ::cpp::Int64Struct get_offset(::Array< ::Dynamic> this1);
		static ::Dynamic get_offset_dyn();

		static Int get_year(::Array< ::Dynamic> this1);
		static ::Dynamic get_year_dyn();

		static Int get_month(::Array< ::Dynamic> this1);
		static ::Dynamic get_month_dyn();

		static Int get_day(::Array< ::Dynamic> this1);
		static ::Dynamic get_day_dyn();

		static Int get_hour(::Array< ::Dynamic> this1);
		static ::Dynamic get_hour_dyn();

		static Int get_minute(::Array< ::Dynamic> this1);
		static ::Dynamic get_minute_dyn();

		static Int get_dayOfWeek(::Array< ::Dynamic> this1);
		static ::Dynamic get_dayOfWeek_dyn();

		static Int get_dayOfYear(::Array< ::Dynamic> this1);
		static ::Dynamic get_dayOfYear_dyn();

		static Int get_millisecond(::Array< ::Dynamic> this1);
		static ::Dynamic get_millisecond_dyn();

		static Int get_microsecond(::Array< ::Dynamic> this1);
		static ::Dynamic get_microsecond_dyn();

		static Int get_tickInSecond(::Array< ::Dynamic> this1);
		static ::Dynamic get_tickInSecond_dyn();

		static Int get_second(::Array< ::Dynamic> this1);
		static ::Dynamic get_second_dyn();

		static  ::cpp::Int64Struct get_timeOfDay(::Array< ::Dynamic> this1);
		static ::Dynamic get_timeOfDay_dyn();

		static Bool get_isInLeapYear(::Array< ::Dynamic> this1);
		static ::Dynamic get_isInLeapYear_dyn();

		static Int get_monthDays(::Array< ::Dynamic> this1);
		static ::Dynamic get_monthDays_dyn();

		static ::Array< ::Dynamic> self(::Array< ::Dynamic> this1);
		static ::Dynamic self_dyn();

};

} // end namespace thx
} // end namespace _DateTime

#endif /* INCLUDED_thx__DateTime_DateTime_Impl_ */ 
