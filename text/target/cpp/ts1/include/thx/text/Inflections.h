// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_text_Inflections
#define INCLUDED_thx_text_Inflections

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(thx,text,Inflections)

namespace thx{
namespace text{


class HXCPP_CLASS_ATTRIBUTES Inflections_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Inflections_obj OBJ_;
		Inflections_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.text.Inflections")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.text.Inflections"); }
		static hx::ObjectPtr< Inflections_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Inflections_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Inflections","\xd6","\xf1","\x67","\x9a"); }

		static void __boot();
		static ::String pluralize(::String singular);
		static ::Dynamic pluralize_dyn();

		static ::String singularize(::String plural);
		static ::Dynamic singularize_dyn();

		static ::String process(::String word,::Array< ::Dynamic> rules);
		static ::Dynamic process_dyn();

		static ::Array< ::String > uncountable_words;
		static ::Array< ::Dynamic> plural_rules;
		static ::Array< ::Dynamic> singular_rules;
};

} // end namespace thx
} // end namespace text

#endif /* INCLUDED_thx_text_Inflections */ 
