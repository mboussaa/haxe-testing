// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_text_Inflections
#include <thx/text/Inflections.h>
#endif
#ifndef INCLUDED_thx_text_TestInflections
#include <thx/text/TestInflections.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace text{

void TestInflections_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.text.TestInflections","new",0x32e0787f,"thx.text.TestInflections.new","thx/text/TestInflections.hx",9,0x143e5031)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(   9)		this->x = i;
            	}

Dynamic TestInflections_obj::__CreateEmpty() { return new TestInflections_obj; }

hx::ObjectPtr< TestInflections_obj > TestInflections_obj::__new(Int i)
{
	hx::ObjectPtr< TestInflections_obj > _hx_result = new TestInflections_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestInflections_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestInflections_obj > _hx_result = new TestInflections_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestInflections_obj::testUncountable(){
            	HX_STACK_FRAME("thx.text.TestInflections","testUncountable",0xdb5d13dd,"thx.text.TestInflections.testUncountable","thx/text/TestInflections.hx",13,0x143e5031)
            	HX_STACK_THIS(this)
HXLINE(  13)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  13)		HX_VARI( Int,_g) = this->x;
HXDLIN(  13)		while((_g1 < _g)){
HXLINE(  13)			++_g1;
HXLINE(  14)			::String _hx_tmp = ::thx::text::Inflections_obj::pluralize(HX_("information",6c,1a,99,94));
HXDLIN(  14)			::utest::Assert_obj::equals(HX_("information",6c,1a,99,94),_hx_tmp,null(),hx::SourceInfo(HX_("TestInflections.hx",9a,b2,9e,29),14,HX_("thx.text.TestInflections",0d,cd,04,a1),HX_("testUncountable",3e,39,25,42)));
HXLINE(  15)			::String _hx_tmp1 = ::thx::text::Inflections_obj::pluralize(HX_("news",13,84,02,49));
HXDLIN(  15)			::utest::Assert_obj::equals(HX_("news",13,84,02,49),_hx_tmp1,null(),hx::SourceInfo(HX_("TestInflections.hx",9a,b2,9e,29),15,HX_("thx.text.TestInflections",0d,cd,04,a1),HX_("testUncountable",3e,39,25,42)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestInflections_obj,testUncountable,(void))

void TestInflections_obj::testPluralize(){
            	HX_STACK_FRAME("thx.text.TestInflections","testPluralize",0x408e077d,"thx.text.TestInflections.testPluralize","thx/text/TestInflections.hx",19,0x143e5031)
            	HX_STACK_THIS(this)
HXLINE(  19)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  19)		HX_VARI( Int,_g) = this->x;
HXDLIN(  19)		while((_g1 < _g)){
HXLINE(  19)			++_g1;
HXLINE(  20)			::String _hx_tmp = ::thx::text::Inflections_obj::pluralize(HX_("day",5c,36,4c,00));
HXDLIN(  20)			::utest::Assert_obj::equals(HX_("days",97,5a,63,42),_hx_tmp,null(),hx::SourceInfo(HX_("TestInflections.hx",9a,b2,9e,29),20,HX_("thx.text.TestInflections",0d,cd,04,a1),HX_("testPluralize",9e,62,b0,55)));
HXLINE(  21)			::String _hx_tmp1 = ::thx::text::Inflections_obj::pluralize(HX_("woman",82,c1,60,ce));
HXDLIN(  21)			::utest::Assert_obj::equals(HX_("women",fe,c4,60,ce),_hx_tmp1,null(),hx::SourceInfo(HX_("TestInflections.hx",9a,b2,9e,29),21,HX_("thx.text.TestInflections",0d,cd,04,a1),HX_("testPluralize",9e,62,b0,55)));
HXLINE(  22)			::String _hx_tmp2 = ::thx::text::Inflections_obj::pluralize(HX_("autobus",31,f3,87,9d));
HXDLIN(  22)			::utest::Assert_obj::equals(HX_("autobuses",df,39,d0,05),_hx_tmp2,null(),hx::SourceInfo(HX_("TestInflections.hx",9a,b2,9e,29),22,HX_("thx.text.TestInflections",0d,cd,04,a1),HX_("testPluralize",9e,62,b0,55)));
HXLINE(  23)			::String _hx_tmp3 = ::thx::text::Inflections_obj::pluralize(HX_("quiz",d5,3f,0a,4b));
HXDLIN(  23)			::utest::Assert_obj::equals(HX_("quizzes",b3,7e,ce,e8),_hx_tmp3,null(),hx::SourceInfo(HX_("TestInflections.hx",9a,b2,9e,29),23,HX_("thx.text.TestInflections",0d,cd,04,a1),HX_("testPluralize",9e,62,b0,55)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestInflections_obj,testPluralize,(void))

void TestInflections_obj::testSingularize(){
            	HX_STACK_FRAME("thx.text.TestInflections","testSingularize",0xace6164a,"thx.text.TestInflections.testSingularize","thx/text/TestInflections.hx",27,0x143e5031)
            	HX_STACK_THIS(this)
HXLINE(  27)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  27)		HX_VARI( Int,_g) = this->x;
HXDLIN(  27)		while((_g1 < _g)){
HXLINE(  27)			++_g1;
HXLINE(  28)			::String _hx_tmp = ::thx::text::Inflections_obj::singularize(HX_("days",97,5a,63,42));
HXDLIN(  28)			::utest::Assert_obj::equals(HX_("day",5c,36,4c,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestInflections.hx",9a,b2,9e,29),28,HX_("thx.text.TestInflections",0d,cd,04,a1),HX_("testSingularize",ab,3b,ae,13)));
HXLINE(  29)			::String _hx_tmp1 = ::thx::text::Inflections_obj::singularize(HX_("women",fe,c4,60,ce));
HXDLIN(  29)			::utest::Assert_obj::equals(HX_("woman",82,c1,60,ce),_hx_tmp1,null(),hx::SourceInfo(HX_("TestInflections.hx",9a,b2,9e,29),29,HX_("thx.text.TestInflections",0d,cd,04,a1),HX_("testSingularize",ab,3b,ae,13)));
HXLINE(  30)			::String _hx_tmp2 = ::thx::text::Inflections_obj::singularize(HX_("autobuses",df,39,d0,05));
HXDLIN(  30)			::utest::Assert_obj::equals(HX_("autobus",31,f3,87,9d),_hx_tmp2,null(),hx::SourceInfo(HX_("TestInflections.hx",9a,b2,9e,29),30,HX_("thx.text.TestInflections",0d,cd,04,a1),HX_("testSingularize",ab,3b,ae,13)));
HXLINE(  31)			::String _hx_tmp3 = ::thx::text::Inflections_obj::singularize(HX_("quizzes",b3,7e,ce,e8));
HXDLIN(  31)			::utest::Assert_obj::equals(HX_("quiz",d5,3f,0a,4b),_hx_tmp3,null(),hx::SourceInfo(HX_("TestInflections.hx",9a,b2,9e,29),31,HX_("thx.text.TestInflections",0d,cd,04,a1),HX_("testSingularize",ab,3b,ae,13)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestInflections_obj,testSingularize,(void))


TestInflections_obj::TestInflections_obj()
{
}

hx::Val TestInflections_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"testPluralize") ) { return hx::Val( testPluralize_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"testUncountable") ) { return hx::Val( testUncountable_dyn()); }
		if (HX_FIELD_EQ(inName,"testSingularize") ) { return hx::Val( testSingularize_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestInflections_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestInflections_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestInflections_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestInflections_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestInflections_obj_sStaticStorageInfo = 0;
#endif

static ::String TestInflections_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testUncountable","\x3e","\x39","\x25","\x42"),
	HX_HCSTRING("testPluralize","\x9e","\x62","\xb0","\x55"),
	HX_HCSTRING("testSingularize","\xab","\x3b","\xae","\x13"),
	::String(null()) };

static void TestInflections_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestInflections_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestInflections_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestInflections_obj::__mClass,"__mClass");
};

#endif

hx::Class TestInflections_obj::__mClass;

void TestInflections_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.text.TestInflections","\x0d","\xcd","\x04","\xa1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestInflections_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestInflections_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestInflections_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestInflections_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestInflections_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestInflections_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace text
