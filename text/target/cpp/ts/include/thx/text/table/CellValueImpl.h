// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_text_table_CellValueImpl
#define INCLUDED_thx_text_table_CellValueImpl

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#include <cpp/Int64.h>
HX_DECLARE_CLASS3(thx,text,table,CellValueImpl)
namespace thx{
namespace text{
namespace table{


class CellValueImpl_obj : public hx::EnumBase_obj
{
	typedef hx::EnumBase_obj super;
		typedef CellValueImpl_obj OBJ_;

	public:
		CellValueImpl_obj() {};
		HX_DO_ENUM_RTTI;
		static void __boot();
		static void __register();
		static bool __GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp);
		::String GetEnumName( ) const { return HX_HCSTRING("thx.text.table.CellValueImpl","\x58","\xd7","\xb4","\x02"); }
		::String __ToString() const { return HX_HCSTRING("CellValueImpl.","\x7f","\xb4","\xa7","\xee") + _hx_tag; }

		static ::thx::text::table::CellValueImpl BoolCell(Bool v);
		static ::Dynamic BoolCell_dyn();
		static ::thx::text::table::CellValueImpl DateTimeCell(::Array< ::Dynamic> v);
		static ::Dynamic DateTimeCell_dyn();
		static ::thx::text::table::CellValueImpl Empty;
		static inline ::thx::text::table::CellValueImpl Empty_dyn() { return Empty; }
		static ::thx::text::table::CellValueImpl FloatCell(Float v);
		static ::Dynamic FloatCell_dyn();
		static ::thx::text::table::CellValueImpl IntCell(Int v);
		static ::Dynamic IntCell_dyn();
		static ::thx::text::table::CellValueImpl NA;
		static inline ::thx::text::table::CellValueImpl NA_dyn() { return NA; }
		static ::thx::text::table::CellValueImpl StringCell(::String v);
		static ::Dynamic StringCell_dyn();
		static ::thx::text::table::CellValueImpl TimeCell( ::cpp::Int64Struct v);
		static ::Dynamic TimeCell_dyn();
};

} // end namespace thx
} // end namespace text
} // end namespace table

#endif /* INCLUDED_thx_text_table_CellValueImpl */ 
