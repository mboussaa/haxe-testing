// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_text_TestInflections
#define INCLUDED_thx_text_TestInflections

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(thx,text,TestInflections)

namespace thx{
namespace text{


class HXCPP_CLASS_ATTRIBUTES TestInflections_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TestInflections_obj OBJ_;
		TestInflections_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.text.TestInflections")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.text.TestInflections"); }
		static hx::ObjectPtr< TestInflections_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestInflections_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("TestInflections","\xa4","\x4e","\x90","\x6b"); }

		void testUncountable();
		::Dynamic testUncountable_dyn();

		void testPluralize();
		::Dynamic testPluralize_dyn();

		void testSingularize();
		::Dynamic testSingularize_dyn();

};

} // end namespace thx
} // end namespace text

#endif /* INCLUDED_thx_text_TestInflections */ 
