// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_text_Table
#include <thx/text/Table.h>
#endif
#ifndef INCLUDED_thx_text_table_Cell
#include <thx/text/table/Cell.h>
#endif
#ifndef INCLUDED_thx_text_table_CellSet
#include <thx/text/table/CellSet.h>
#endif
#ifndef INCLUDED_thx_text_table_CellValueImpl
#include <thx/text/table/CellValueImpl.h>
#endif
#ifndef INCLUDED_thx_text_table_Col
#include <thx/text/table/Col.h>
#endif
#ifndef INCLUDED_thx_text_table_CompositeStyle
#include <thx/text/table/CompositeStyle.h>
#endif
#ifndef INCLUDED_thx_text_table_DefaultStyle
#include <thx/text/table/DefaultStyle.h>
#endif
#ifndef INCLUDED_thx_text_table_IStyle
#include <thx/text/table/IStyle.h>
#endif
#ifndef INCLUDED_thx_text_table_Row
#include <thx/text/table/Row.h>
#endif
#ifndef INCLUDED_thx_text_table_Span
#include <thx/text/table/Span.h>
#endif
#ifndef INCLUDED_thx_text_table_StringBlock
#include <thx/text/table/StringBlock.h>
#endif
#ifndef INCLUDED_thx_text_table_Style
#include <thx/text/table/Style.h>
#endif

namespace thx{
namespace text{
namespace table{

void Cell_obj::__construct(::hx::EnumBase value, ::thx::text::table::Row row, ::thx::text::table::Col col,::hx::EnumBase span){
            	HX_STACK_FRAME("thx.text.table.Cell","new",0x48feadcb,"thx.text.table.Cell.new","thx/text/table/Cell.hx",14,0x195c2dc4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(row,"row")
            	HX_STACK_ARG(col,"col")
            	HX_STACK_ARG(span,"span")
HXLINE(  15)		this->value = value;
HXLINE(  16)		this->row = row;
HXLINE(  17)		this->col = col;
HXLINE(  18)		this->span = span;
HXLINE(  19)		this->table = col->table;
HXLINE(  20)		this->style =  ::thx::text::table::CompositeStyle_obj::__new(::Array_obj< ::Dynamic>::__new(4)->init(0,col->style)->init(1,row->style)->init(2,this->table->style)->init(3,::thx::text::table::DefaultStyle_obj::instance));
            	}

Dynamic Cell_obj::__CreateEmpty() { return new Cell_obj; }

hx::ObjectPtr< Cell_obj > Cell_obj::__new(::hx::EnumBase value, ::thx::text::table::Row row, ::thx::text::table::Col col,::hx::EnumBase span)
{
	hx::ObjectPtr< Cell_obj > _hx_result = new Cell_obj();
	_hx_result->__construct(value,row,col,span);
	return _hx_result;
}

Dynamic Cell_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Cell_obj > _hx_result = new Cell_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

::String Cell_obj::toString(){
            	HX_STACK_FRAME("thx.text.table.Cell","toString",0xee726f61,"thx.text.table.Cell.toString","thx/text/table/Cell.hx",23,0x195c2dc4)
            	HX_STACK_THIS(this)
HXLINE(  24)		HX_VARI(  ::Dynamic,maxWidth) = ::thx::text::table::IStyle_obj::get_maxWidth(this->style);
HXLINE(  25)		 ::Dynamic _hx_tmp = ::thx::text::table::IStyle_obj::get_formatter(this->style);
HXDLIN(  25)		return ( ( ::thx::text::table::StringBlock)(_hx_tmp(this->value,maxWidth)) )->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Cell_obj,toString,return )

Int Cell_obj::get_rowIndex(){
            	HX_STACK_FRAME("thx.text.table.Cell","get_rowIndex",0x15ca9bd6,"thx.text.table.Cell.get_rowIndex","thx/text/table/Cell.hx",29,0x195c2dc4)
            	HX_STACK_THIS(this)
HXLINE(  29)		return this->row->index;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Cell_obj,get_rowIndex,return )

Int Cell_obj::get_colIndex(){
            	HX_STACK_FRAME("thx.text.table.Cell","get_colIndex",0x55e8f3f0,"thx.text.table.Cell.get_colIndex","thx/text/table/Cell.hx",32,0x195c2dc4)
            	HX_STACK_THIS(this)
HXLINE(  32)		return this->col->index;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Cell_obj,get_colIndex,return )


Cell_obj::Cell_obj()
{
}

void Cell_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Cell);
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_MEMBER_NAME(row,"row");
	HX_MARK_MEMBER_NAME(col,"col");
	HX_MARK_MEMBER_NAME(rowIndex,"rowIndex");
	HX_MARK_MEMBER_NAME(colIndex,"colIndex");
	HX_MARK_MEMBER_NAME(span,"span");
	HX_MARK_MEMBER_NAME(table,"table");
	HX_MARK_MEMBER_NAME(style,"style");
	HX_MARK_END_CLASS();
}

void Cell_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(value,"value");
	HX_VISIT_MEMBER_NAME(row,"row");
	HX_VISIT_MEMBER_NAME(col,"col");
	HX_VISIT_MEMBER_NAME(rowIndex,"rowIndex");
	HX_VISIT_MEMBER_NAME(colIndex,"colIndex");
	HX_VISIT_MEMBER_NAME(span,"span");
	HX_VISIT_MEMBER_NAME(table,"table");
	HX_VISIT_MEMBER_NAME(style,"style");
}

hx::Val Cell_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"row") ) { return hx::Val( row); }
		if (HX_FIELD_EQ(inName,"col") ) { return hx::Val( col); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"span") ) { return hx::Val( span); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value); }
		if (HX_FIELD_EQ(inName,"table") ) { return hx::Val( table); }
		if (HX_FIELD_EQ(inName,"style") ) { return hx::Val( style); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rowIndex") ) { return hx::Val( inCallProp == hx::paccAlways ? get_rowIndex() : rowIndex); }
		if (HX_FIELD_EQ(inName,"colIndex") ) { return hx::Val( inCallProp == hx::paccAlways ? get_colIndex() : colIndex); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_rowIndex") ) { return hx::Val( get_rowIndex_dyn()); }
		if (HX_FIELD_EQ(inName,"get_colIndex") ) { return hx::Val( get_colIndex_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Cell_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"row") ) { row=inValue.Cast<  ::thx::text::table::Row >(); return inValue; }
		if (HX_FIELD_EQ(inName,"col") ) { col=inValue.Cast<  ::thx::text::table::Col >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"span") ) { span=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		if (HX_FIELD_EQ(inName,"table") ) { table=inValue.Cast<  ::thx::text::Table >(); return inValue; }
		if (HX_FIELD_EQ(inName,"style") ) { style=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rowIndex") ) { rowIndex=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"colIndex") ) { colIndex=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Cell_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	outFields->push(HX_HCSTRING("row","\x1a","\xe2","\x56","\x00"));
	outFields->push(HX_HCSTRING("col","\x40","\x80","\x4b","\x00"));
	outFields->push(HX_HCSTRING("rowIndex","\x98","\x4a","\xff","\x65"));
	outFields->push(HX_HCSTRING("colIndex","\xb2","\xa2","\x1d","\xa6"));
	outFields->push(HX_HCSTRING("span","\xca","\xda","\x58","\x4c"));
	outFields->push(HX_HCSTRING("table","\x0e","\xb8","\xe3","\x0a"));
	outFields->push(HX_HCSTRING("style","\x31","\xa5","\x1d","\x84"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Cell_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::thx::text::table::CellValueImpl*/ ,(int)offsetof(Cell_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{hx::fsObject /*::thx::text::table::Row*/ ,(int)offsetof(Cell_obj,row),HX_HCSTRING("row","\x1a","\xe2","\x56","\x00")},
	{hx::fsObject /*::thx::text::table::Col*/ ,(int)offsetof(Cell_obj,col),HX_HCSTRING("col","\x40","\x80","\x4b","\x00")},
	{hx::fsInt,(int)offsetof(Cell_obj,rowIndex),HX_HCSTRING("rowIndex","\x98","\x4a","\xff","\x65")},
	{hx::fsInt,(int)offsetof(Cell_obj,colIndex),HX_HCSTRING("colIndex","\xb2","\xa2","\x1d","\xa6")},
	{hx::fsObject /*::thx::text::table::Span*/ ,(int)offsetof(Cell_obj,span),HX_HCSTRING("span","\xca","\xda","\x58","\x4c")},
	{hx::fsObject /*::thx::text::Table*/ ,(int)offsetof(Cell_obj,table),HX_HCSTRING("table","\x0e","\xb8","\xe3","\x0a")},
	{hx::fsObject /*::thx::text::table::IStyle*/ ,(int)offsetof(Cell_obj,style),HX_HCSTRING("style","\x31","\xa5","\x1d","\x84")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Cell_obj_sStaticStorageInfo = 0;
#endif

static ::String Cell_obj_sMemberFields[] = {
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("row","\x1a","\xe2","\x56","\x00"),
	HX_HCSTRING("col","\x40","\x80","\x4b","\x00"),
	HX_HCSTRING("rowIndex","\x98","\x4a","\xff","\x65"),
	HX_HCSTRING("colIndex","\xb2","\xa2","\x1d","\xa6"),
	HX_HCSTRING("span","\xca","\xda","\x58","\x4c"),
	HX_HCSTRING("table","\x0e","\xb8","\xe3","\x0a"),
	HX_HCSTRING("style","\x31","\xa5","\x1d","\x84"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("get_rowIndex","\xa1","\xfe","\x18","\x1b"),
	HX_HCSTRING("get_colIndex","\xbb","\x56","\x37","\x5b"),
	::String(null()) };

static void Cell_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Cell_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Cell_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Cell_obj::__mClass,"__mClass");
};

#endif

hx::Class Cell_obj::__mClass;

void Cell_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.text.table.Cell","\x59","\x6c","\x73","\x6f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Cell_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Cell_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Cell_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Cell_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Cell_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Cell_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace text
} // end namespace table
