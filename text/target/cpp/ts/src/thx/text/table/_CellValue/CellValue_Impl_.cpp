// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "cpp/Int64.h"
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_ValueType
#include <ValueType.h>
#endif
#ifndef INCLUDED_thx_Floats
#include <thx/Floats.h>
#endif
#ifndef INCLUDED_thx_Ints
#include <thx/Ints.h>
#endif
#ifndef INCLUDED_thx_Types
#include <thx/Types.h>
#endif
#ifndef INCLUDED_thx__DateTime_DateTime_Impl_
#include <thx/_DateTime/DateTime_Impl_.h>
#endif
#ifndef INCLUDED_thx__Time_Time_Impl_
#include <thx/_Time/Time_Impl_.h>
#endif
#ifndef INCLUDED_thx_text_table_CellValueImpl
#include <thx/text/table/CellValueImpl.h>
#endif
#ifndef INCLUDED_thx_text_table__CellValue_CellValue_Impl_
#include <thx/text/table/_CellValue/CellValue_Impl_.h>
#endif

namespace thx{
namespace text{
namespace table{
namespace _CellValue{

void CellValue_Impl__obj::__construct() { }

Dynamic CellValue_Impl__obj::__CreateEmpty() { return new CellValue_Impl__obj; }

hx::ObjectPtr< CellValue_Impl__obj > CellValue_Impl__obj::__new()
{
	hx::ObjectPtr< CellValue_Impl__obj > _hx_result = new CellValue_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic CellValue_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CellValue_Impl__obj > _hx_result = new CellValue_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

::hx::EnumBase CellValue_Impl__obj::fromInt(Int v){
            	HX_STACK_FRAME("thx.text.table._CellValue.CellValue_Impl_","fromInt",0xe747b4df,"thx.text.table._CellValue.CellValue_Impl_.fromInt","thx/text/table/CellValue.hx",12,0x879e5b47)
            	HX_STACK_ARG(v,"v")
HXLINE(  12)		return ::thx::text::table::CellValueImpl_obj::IntCell(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CellValue_Impl__obj,fromInt,return )

::hx::EnumBase CellValue_Impl__obj::fromFloat(Float v){
            	HX_STACK_FRAME("thx.text.table._CellValue.CellValue_Impl_","fromFloat",0x54bc498c,"thx.text.table._CellValue.CellValue_Impl_.fromFloat","thx/text/table/CellValue.hx",15,0x879e5b47)
            	HX_STACK_ARG(v,"v")
HXLINE(  15)		return ::thx::text::table::CellValueImpl_obj::FloatCell(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CellValue_Impl__obj,fromFloat,return )

::hx::EnumBase CellValue_Impl__obj::fromString(::String v){
            	HX_STACK_FRAME("thx.text.table._CellValue.CellValue_Impl_","fromString",0x9fde16e1,"thx.text.table._CellValue.CellValue_Impl_.fromString","thx/text/table/CellValue.hx",18,0x879e5b47)
            	HX_STACK_ARG(v,"v")
HXLINE(  18)		return ::thx::text::table::CellValueImpl_obj::StringCell(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CellValue_Impl__obj,fromString,return )

::hx::EnumBase CellValue_Impl__obj::fromBool(Bool v){
            	HX_STACK_FRAME("thx.text.table._CellValue.CellValue_Impl_","fromBool",0x72d6ce3a,"thx.text.table._CellValue.CellValue_Impl_.fromBool","thx/text/table/CellValue.hx",21,0x879e5b47)
            	HX_STACK_ARG(v,"v")
HXLINE(  21)		return ::thx::text::table::CellValueImpl_obj::BoolCell(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CellValue_Impl__obj,fromBool,return )

::hx::EnumBase CellValue_Impl__obj::fromDate( ::Date v){
            	HX_STACK_FRAME("thx.text.table._CellValue.CellValue_Impl_","fromDate",0x741ea03e,"thx.text.table._CellValue.CellValue_Impl_.fromDate","thx/text/table/CellValue.hx",24,0x879e5b47)
            	HX_STACK_ARG(v,"v")
HXLINE(  24)		return ::thx::text::table::CellValueImpl_obj::DateTimeCell(::thx::_DateTime::DateTime_Impl__obj::fromDate(v));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CellValue_Impl__obj,fromDate,return )

::hx::EnumBase CellValue_Impl__obj::fromDateTime(::Array< ::Dynamic> v){
            	HX_STACK_FRAME("thx.text.table._CellValue.CellValue_Impl_","fromDateTime",0xe29c8f6b,"thx.text.table._CellValue.CellValue_Impl_.fromDateTime","thx/text/table/CellValue.hx",27,0x879e5b47)
            	HX_STACK_ARG(v,"v")
HXLINE(  27)		return ::thx::text::table::CellValueImpl_obj::DateTimeCell(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CellValue_Impl__obj,fromDateTime,return )

::hx::EnumBase CellValue_Impl__obj::fromTime( ::cpp::Int64Struct v){
            	HX_STACK_FRAME("thx.text.table._CellValue.CellValue_Impl_","fromTime",0x7eb8161d,"thx.text.table._CellValue.CellValue_Impl_.fromTime","thx/text/table/CellValue.hx",30,0x879e5b47)
            	HX_STACK_ARG(v,"v")
HXLINE(  30)		return ::thx::text::table::CellValueImpl_obj::TimeCell(v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CellValue_Impl__obj,fromTime,return )

::hx::EnumBase CellValue_Impl__obj::fromDynamic( ::Dynamic value){
            	HX_STACK_FRAME("thx.text.table._CellValue.CellValue_Impl_","fromDynamic",0x7f97ff6f,"thx.text.table._CellValue.CellValue_Impl_.fromDynamic","thx/text/table/CellValue.hx",32,0x879e5b47)
            	HX_STACK_ARG(value,"value")
HXLINE(  33)		if (hx::IsNull( value )) {
HXLINE(  34)			return ::thx::text::table::CellValueImpl_obj::Empty_dyn();
            		}
HXLINE(  35)		::hx::EnumBase _hx_tmp = ::Type_obj::_hx_typeof(value);
HXDLIN(  35)		HX_VARI( ::String,_g) = ::thx::Types_obj::toString(_hx_tmp);
HXDLIN(  35)		::String _hx_switch_0 = _g;
            		if (  (_hx_switch_0==HX_("Bool",4a,b0,f4,2b)) ){
HXLINE(  35)			return ::thx::text::table::CellValueImpl_obj::BoolCell(value);
HXDLIN(  35)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("Date",4e,82,3c,2d)) ){
HXLINE(  35)			return ::thx::text::table::CellValueImpl_obj::DateTimeCell(::thx::_DateTime::DateTime_Impl__obj::fromDate(( ( ::Date)(value) )));
HXDLIN(  35)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("Float",7c,35,c4,95)) ){
HXLINE(  35)			return ::thx::text::table::CellValueImpl_obj::FloatCell(value);
HXDLIN(  35)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("Int",cf,c4,37,00)) ){
HXLINE(  35)			return ::thx::text::table::CellValueImpl_obj::IntCell(value);
HXDLIN(  35)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("String",f1,9c,c4,45)) ){
HXLINE(  35)			return ::thx::text::table::_CellValue::CellValue_Impl__obj::parseString(value);
HXDLIN(  35)			goto _hx_goto_0;
            		}
            		/* default */{
HXLINE(  41)			::String _hx_tmp1 = ::Std_obj::string(value);
HXLINE(  35)			return ::thx::text::table::CellValueImpl_obj::StringCell(_hx_tmp1);
            		}
            		_hx_goto_0:;
HXDLIN(  35)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CellValue_Impl__obj,fromDynamic,return )

::hx::EnumBase CellValue_Impl__obj::parseString(::String value){
            	HX_STACK_FRAME("thx.text.table._CellValue.CellValue_Impl_","parseString",0x3daed19e,"thx.text.table._CellValue.CellValue_Impl_.parseString","thx/text/table/CellValue.hx",45,0x879e5b47)
            	HX_STACK_ARG(value,"value")
HXLINE(  46)		if (hx::IsNull( value )) {
HXLINE(  47)			return ::thx::text::table::CellValueImpl_obj::Empty_dyn();
            		}
HXLINE(  48)		HX_VARI( ::String,_g) = value.toLowerCase();
HXDLIN(  48)		::String _hx_switch_0 = _g;
            		if (  (_hx_switch_0==HX_("on",1f,61,00,00)) ||  (_hx_switch_0==HX_("t",74,00,00,00)) ||  (_hx_switch_0==HX_("true",4e,a7,03,4d)) ||  (_hx_switch_0==HX_("\xe2""\x9c""\x93""",d9,05,ac,00)) ||  (_hx_switch_0==HX_("\xe2""\x9c""\x94""",da,05,ac,00)) ){
HXLINE(  48)			return ::thx::text::table::CellValueImpl_obj::BoolCell(true);
HXDLIN(  48)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("f",66,00,00,00)) ||  (_hx_switch_0==HX_("false",a3,35,4f,fb)) ||  (_hx_switch_0==HX_("off",6f,93,54,00)) ||  (_hx_switch_0==HX_("\xe2""\x9c""\x95""",db,05,ac,00)) ||  (_hx_switch_0==HX_("\xe2""\x9c""\x97""",dd,05,ac,00)) ){
HXLINE(  48)			return ::thx::text::table::CellValueImpl_obj::BoolCell(false);
HXDLIN(  48)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE(  53)			Bool _hx_tmp = ::thx::Ints_obj::canParse(_g);
HXDLIN(  53)			if (_hx_tmp) {
HXLINE(  54)				 ::Dynamic _hx_tmp1 = ::thx::Ints_obj::parse(_g,null());
HXLINE(  48)				return ::thx::text::table::CellValueImpl_obj::IntCell(_hx_tmp1);
            			}
            			else {
HXLINE(  55)				Bool _hx_tmp2 = ::thx::Floats_obj::canParse(_g);
HXDLIN(  55)				if (_hx_tmp2) {
HXLINE(  56)					 ::Dynamic _hx_tmp3 = ::thx::Ints_obj::parse(_g,null());
HXLINE(  48)					return ::thx::text::table::CellValueImpl_obj::FloatCell(_hx_tmp3);
            				}
            				else {
HXLINE(  58)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  58)						::Array< ::Dynamic> _hx_tmp4 = ::thx::_DateTime::DateTime_Impl__obj::fromString(value);
HXLINE(  48)						return ::thx::text::table::CellValueImpl_obj::DateTimeCell(_hx_tmp4);
            					}
            					catch( ::Dynamic _hx_e){
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic _ = _hx_e;
HXLINE(  59)							try {
            								HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  59)								 ::cpp::Int64Struct _hx_tmp5 = ::thx::_Time::Time_Impl__obj::fromString(value);
HXLINE(  48)								return ::thx::text::table::CellValueImpl_obj::TimeCell(_hx_tmp5);
            							}
            							catch( ::Dynamic _hx_e){
            								if (_hx_e.IsClass<  ::Dynamic >() ){
            									HX_STACK_BEGIN_CATCH
            									 ::Dynamic _1 = _hx_e;
HXLINE(  48)									return ::thx::text::table::CellValueImpl_obj::StringCell(value);
            								}
            								else {
            									HX_STACK_DO_THROW(_hx_e);
            								}
            							}
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            			}
            		}
            		_hx_goto_1:;
HXDLIN(  48)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CellValue_Impl__obj,parseString,return )

::hx::EnumBase CellValue_Impl__obj::empty(){
            	HX_STACK_FRAME("thx.text.table._CellValue.CellValue_Impl_","empty",0xb784ef47,"thx.text.table._CellValue.CellValue_Impl_.empty","thx/text/table/CellValue.hx",65,0x879e5b47)
HXLINE(  65)		return ::thx::text::table::CellValueImpl_obj::Empty_dyn();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(CellValue_Impl__obj,empty,return )

::hx::EnumBase CellValue_Impl__obj::na(){
            	HX_STACK_FRAME("thx.text.table._CellValue.CellValue_Impl_","na",0x6196d339,"thx.text.table._CellValue.CellValue_Impl_.na","thx/text/table/CellValue.hx",68,0x879e5b47)
HXLINE(  68)		return ::thx::text::table::CellValueImpl_obj::NA_dyn();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(CellValue_Impl__obj,na,return )


CellValue_Impl__obj::CellValue_Impl__obj()
{
}

bool CellValue_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"na") ) { outValue = na_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"empty") ) { outValue = empty_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fromInt") ) { outValue = fromInt_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fromBool") ) { outValue = fromBool_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromDate") ) { outValue = fromDate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromTime") ) { outValue = fromTime_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromFloat") ) { outValue = fromFloat_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fromDynamic") ) { outValue = fromDynamic_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"parseString") ) { outValue = parseString_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fromDateTime") ) { outValue = fromDateTime_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *CellValue_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *CellValue_Impl__obj_sStaticStorageInfo = 0;
#endif

static void CellValue_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CellValue_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CellValue_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CellValue_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class CellValue_Impl__obj::__mClass;

static ::String CellValue_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("fromInt","\xa5","\xdd","\xfa","\x57"),
	HX_HCSTRING("fromFloat","\xd2","\xaf","\x1f","\xb7"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	HX_HCSTRING("fromBool","\xb4","\x52","\xe7","\x9e"),
	HX_HCSTRING("fromDate","\xb8","\x24","\x2f","\xa0"),
	HX_HCSTRING("fromDateTime","\xe5","\xd8","\x21","\x7a"),
	HX_HCSTRING("fromTime","\x97","\x9a","\xc8","\xaa"),
	HX_HCSTRING("fromDynamic","\x35","\x03","\x56","\xce"),
	HX_HCSTRING("parseString","\x64","\xd5","\x6c","\x8c"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("na","\x33","\x60","\x00","\x00"),
	::String(null())
};

void CellValue_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.text.table._CellValue.CellValue_Impl_","\xa8","\x6d","\x1a","\x66");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CellValue_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CellValue_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CellValue_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< CellValue_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CellValue_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CellValue_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CellValue_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace text
} // end namespace table
} // end namespace _CellValue
