// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_ArrayInts
#include <thx/ArrayInts.h>
#endif
#ifndef INCLUDED_thx_Arrays
#include <thx/Arrays.h>
#endif
#ifndef INCLUDED_thx_Enums
#include <thx/Enums.h>
#endif
#ifndef INCLUDED_thx_text_Table
#include <thx/text/Table.h>
#endif
#ifndef INCLUDED_thx_text_table_Canvas
#include <thx/text/table/Canvas.h>
#endif
#ifndef INCLUDED_thx_text_table_Cell
#include <thx/text/table/Cell.h>
#endif
#ifndef INCLUDED_thx_text_table_CellSet
#include <thx/text/table/CellSet.h>
#endif
#ifndef INCLUDED_thx_text_table_CellType
#include <thx/text/table/CellType.h>
#endif
#ifndef INCLUDED_thx_text_table_CellValueImpl
#include <thx/text/table/CellValueImpl.h>
#endif
#ifndef INCLUDED_thx_text_table_Col
#include <thx/text/table/Col.h>
#endif
#ifndef INCLUDED_thx_text_table_HAlign
#include <thx/text/table/HAlign.h>
#endif
#ifndef INCLUDED_thx_text_table_IStyle
#include <thx/text/table/IStyle.h>
#endif
#ifndef INCLUDED_thx_text_table_Renderer
#include <thx/text/table/Renderer.h>
#endif
#ifndef INCLUDED_thx_text_table_Row
#include <thx/text/table/Row.h>
#endif
#ifndef INCLUDED_thx_text_table_Span
#include <thx/text/table/Span.h>
#endif
#ifndef INCLUDED_thx_text_table_StringBlock
#include <thx/text/table/StringBlock.h>
#endif

namespace thx{
namespace text{
namespace table{

void Renderer_obj::__construct( ::Dynamic __o_padding){
 ::Dynamic padding = __o_padding.Default(1);
            	HX_STACK_FRAME("thx.text.table.Renderer","new",0xc5d91d6c,"thx.text.table.Renderer.new","thx/text/table/Renderer.hx",17,0x8ce698c3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(padding,"padding")
HXLINE(  17)		this->padding = padding;
            	}

Dynamic Renderer_obj::__CreateEmpty() { return new Renderer_obj; }

hx::ObjectPtr< Renderer_obj > Renderer_obj::__new( ::Dynamic __o_padding)
{
	hx::ObjectPtr< Renderer_obj > _hx_result = new Renderer_obj();
	_hx_result->__construct(__o_padding);
	return _hx_result;
}

Dynamic Renderer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Renderer_obj > _hx_result = new Renderer_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

::String Renderer_obj::render( ::thx::text::Table table){
            	HX_STACK_FRAME("thx.text.table.Renderer","render",0xae20cdca,"thx.text.table.Renderer.render","thx/text/table/Renderer.hx",20,0x8ce698c3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(table,"table")
HXLINE(  21)		this->table = table;
HXLINE(  22)		this->canvas =  ::thx::text::table::Canvas_obj::__new((int)0,(int)0);
HXLINE(  23)		this->processContents();
HXLINE(  24)		::String _hx_tmp = this->canvas->toString();
HXDLIN(  24)		return (HX_("\n",0a,00,00,00) + _hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Renderer_obj,render,return )

void Renderer_obj::processContents(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		Int _hx_run( ::thx::text::table::Cell a, ::thx::text::table::Cell b){
            			HX_STACK_FRAME("thx.text.table.Renderer","processContents",0x330999b5,"thx.text.table.Renderer.processContents","thx/text/table/Renderer.hx",33,0x8ce698c3)
            			HX_STACK_ARG(a,"a")
            			HX_STACK_ARG(b,"b")
HXLINE(  33)			return ::thx::Enums_obj::compare(b->span,a->span);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::thx::text::table::Renderer,_gthis) HXARGC(1)
            		 ::Dynamic _hx_run( ::thx::text::table::Cell cell){
            			HX_STACK_FRAME("thx.text.table.Renderer","processContents",0x330999b5,"thx.text.table.Renderer.processContents","thx/text/table/Renderer.hx",34,0x8ce698c3)
            			HX_STACK_ARG(cell,"cell")
HXLINE(  35)			HX_VARI(  ::Dynamic,maxWidth) = ::thx::text::table::IStyle_obj::get_maxWidth(cell->style);
HXDLIN(  35)			HX_VARI(  ::Dynamic,maxHeight) = ::thx::text::table::IStyle_obj::get_maxHeight(cell->style);
HXDLIN(  35)			HX_VARI( Int,minWidth) = ::thx::text::table::IStyle_obj::get_minWidth(cell->style);
HXDLIN(  35)			HX_VARI( Int,minHeight) = ::thx::text::table::IStyle_obj::get_minHeight(cell->style);
HXDLIN(  35)			HX_VARI( Int,spanRight) = (int)1;
HXDLIN(  35)			HX_VARI( Int,spanDown) = (int)1;
HXLINE(  42)			{
HXLINE(  42)				HX_VARI_NAME( ::hx::EnumBase,_g32,"_g3") = cell->span;
HXDLIN(  42)				Int _hx_tmp1 = ( ( ::hx::EnumBase)(_g32) )->_hx_getIndex();
HXDLIN(  42)				switch((int)(_hx_tmp1)){
            					case (int)1: {
HXLINE(  43)						HX_VARI( Int,c) = _g32->_hx_getInt(1);
HXDLIN(  43)						if ((c > (int)1)) {
HXLINE(  44)							spanRight = c;
            						}
            					}
            					break;
            					case (int)2: {
HXLINE(  43)						HX_VARI_NAME( Int,c1,"c") = _g32->_hx_getInt(0);
HXDLIN(  43)						if ((c1 > (int)1)) {
HXLINE(  44)							spanRight = c1;
            						}
            					}
            					break;
            					case (int)4: case (int)6: {
HXLINE(  46)						Int _hx_tmp2 = cell->table->get_cols();
HXDLIN(  46)						spanRight = (_hx_tmp2 - cell->col->index);
            					}
            					break;
            					default:{
            					}
            				}
            			}
HXLINE(  50)			{
HXLINE(  50)				HX_VARI_NAME( ::hx::EnumBase,_g41,"_g4") = cell->span;
HXDLIN(  50)				Int _hx_tmp3 = ( ( ::hx::EnumBase)(_g41) )->_hx_getIndex();
HXDLIN(  50)				switch((int)(_hx_tmp3)){
            					case (int)1: {
HXLINE(  51)						HX_VARI( Int,r) = _g41->_hx_getInt(0);
HXDLIN(  51)						if ((r > (int)1)) {
HXLINE(  52)							spanDown = r;
            						}
            					}
            					break;
            					case (int)3: {
HXLINE(  51)						HX_VARI_NAME( Int,r1,"r") = _g41->_hx_getInt(0);
HXDLIN(  51)						if ((r1 > (int)1)) {
HXLINE(  52)							spanDown = r1;
            						}
            					}
            					break;
            					case (int)5: case (int)6: {
HXLINE(  54)						Int _hx_tmp4 = cell->table->get_rows();
HXDLIN(  54)						spanDown = (_hx_tmp4 - cell->row->index);
            					}
            					break;
            					default:{
            					}
            				}
            			}
HXLINE(  58)			 ::Dynamic _hx_tmp5 = ::thx::text::table::IStyle_obj::get_formatter(cell->style);
HXDLIN(  58)			HX_VARI(  ::thx::text::table::StringBlock,block) = ( ( ::thx::text::table::StringBlock)(_hx_tmp5(cell->value,maxWidth)) );
HXLINE(  59)			 ::Dynamic _hx_tmp6 = ::thx::text::table::IStyle_obj::get_aligner(cell->style);
HXDLIN(  59)			::hx::EnumBase _hx_tmp7 = ::thx::text::table::IStyle_obj::get_type(cell->style);
HXLINE(  58)			HX_VARI( ::hx::EnumBase,halign) = _hx_tmp6(cell->value,_hx_tmp7);
HXLINE(  60)			HX_VAR_NAME( Int,a1,"a");
HXDLIN(  60)			if (hx::IsNull( maxWidth )) {
HXLINE(  60)				a1 = block->width;
            			}
            			else {
HXLINE(  60)				HX_VARI_NAME( Int,a2,"a") = maxWidth;
HXDLIN(  60)				HX_VARI_NAME( Int,b1,"b") = block->width;
HXDLIN(  60)				if ((a2 < b1)) {
HXLINE(  60)					a1 = a2;
            				}
            				else {
HXLINE(  60)					a1 = b1;
            				}
            			}
HXLINE(  58)			HX_VAR( Int,width);
HXLINE(  60)			if ((a1 > minWidth)) {
HXLINE(  58)				width = a1;
            			}
            			else {
HXLINE(  58)				width = minWidth;
            			}
HXLINE(  61)			HX_VAR_NAME( Int,a3,"a");
HXDLIN(  61)			if (hx::IsNull( maxHeight )) {
HXLINE(  61)				a3 = block->height;
            			}
            			else {
HXLINE(  61)				HX_VARI_NAME( Int,a4,"a") = maxHeight;
HXDLIN(  61)				HX_VARI_NAME( Int,b2,"b") = block->height;
HXDLIN(  61)				if ((a4 < b2)) {
HXLINE(  61)					a3 = a4;
            				}
            				else {
HXLINE(  61)					a3 = b2;
            				}
            			}
HXLINE(  58)			HX_VAR( Int,height);
HXLINE(  61)			if ((a3 > minHeight)) {
HXLINE(  58)				height = a3;
            			}
            			else {
HXLINE(  58)				height = minHeight;
            			}
HXLINE(  64)			Int _hx_tmp8 = ( ( ::hx::EnumBase)(halign) )->_hx_getIndex();
HXDLIN(  64)			if ((_hx_tmp8 == (int)3)) {
HXLINE(  66)				HX_VARI( Int,pos) = block->symbolPos(halign->_hx_getString(0));
HXLINE(  67)				HX_VARI_NAME( Int,a5,"a") = _gthis->symbolPos->__get(cell->col->index);
HXDLIN(  67)				Int _hx_tmp9;
HXDLIN(  67)				if ((a5 > pos)) {
HXLINE(  67)					_hx_tmp9 = a5;
            				}
            				else {
HXLINE(  67)					_hx_tmp9 = pos;
            				}
HXDLIN(  67)				_gthis->symbolPos[cell->col->index] = _hx_tmp9;
HXLINE(  68)				HX_VARI( Int,extra) = (_gthis->symbolPos->__get(cell->col->index) - pos);
HXLINE(  69)				if ((spanRight == (int)1)) {
HXLINE(  70)					HX_VARI_NAME( Int,a6,"a") = _gthis->colWidths->__get(cell->col->index);
HXDLIN(  70)					HX_VARI_NAME( Int,b3,"b") = (width + extra);
HXDLIN(  70)					Int _hx_tmp10;
HXDLIN(  70)					if ((a6 > b3)) {
HXLINE(  70)						_hx_tmp10 = a6;
            					}
            					else {
HXLINE(  70)						_hx_tmp10 = b3;
            					}
HXDLIN(  70)					_gthis->colWidths[cell->col->index] = _hx_tmp10;
            				}
            			}
            			else {
HXLINE(  72)				if ((spanRight == (int)1)) {
HXLINE(  73)					HX_VARI_NAME( Int,a7,"a") = _gthis->colWidths->__get(cell->col->index);
HXDLIN(  73)					Int _hx_tmp11;
HXDLIN(  73)					if ((a7 > width)) {
HXLINE(  73)						_hx_tmp11 = a7;
            					}
            					else {
HXLINE(  73)						_hx_tmp11 = width;
            					}
HXDLIN(  73)					_gthis->colWidths[cell->col->index] = _hx_tmp11;
            				}
            			}
HXLINE(  75)			HX_VARI_NAME( Int,a8,"a") = _gthis->rowHeights->__get(cell->row->index);
HXDLIN(  75)			Int _hx_tmp12;
HXDLIN(  75)			if ((a8 > height)) {
HXLINE(  75)				_hx_tmp12 = a8;
            			}
            			else {
HXLINE(  75)				_hx_tmp12 = height;
            			}
HXDLIN(  75)			_gthis->rowHeights[cell->row->index] = _hx_tmp12;
HXLINE(  77)			return  ::Dynamic(hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("block",4d,75,fc,b4),block)
            				->setFixed(1,HX_("halign",5d,dd,ae,b6),halign)
            				->setFixed(2,HX_("spanRight",b2,44,f9,01),spanRight)
            				->setFixed(3,HX_("spanDown",4c,2c,06,2f),spanDown)
            				->setFixed(4,HX_("cell",a2,21,bd,41),cell));
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2, ::thx::text::table::Renderer,_gthis) HXARGC(1)
            		void _hx_run( ::Dynamic item){
            			HX_STACK_FRAME("thx.text.table.Renderer","processContents",0x330999b5,"thx.text.table.Renderer.processContents","thx/text/table/Renderer.hx",91,0x8ce698c3)
            			HX_STACK_ARG(item,"item")
HXLINE(  93)			::Array< Int > _hx_tmp13 = _gthis->colWidths->slice((int)0,( ( ::thx::text::table::Cell)(item->__Field(HX_("cell",a2,21,bd,41),hx::paccDynamic)) )->col->index);
HXDLIN(  93)			HX_VARI( Int,x) = ( (Int)(::thx::Arrays_obj::reduce(_hx_tmp13,_gthis->reduceWidth_dyn(),(int)0)) );
HXLINE(  94)			::Array< Int > _hx_tmp14 = _gthis->rowHeights->slice((int)0,( ( ::thx::text::table::Cell)(item->__Field(HX_("cell",a2,21,bd,41),hx::paccDynamic)) )->row->index);
HXLINE(  93)			HX_VARI( Int,y) = ( (Int)(::thx::Arrays_obj::reduce(_hx_tmp14,_gthis->reduceHeight_dyn(),(int)0)) );
HXLINE(  95)			HX_VARI_NAME( ::Array< Int >,_g33,"_g3") = ::Array_obj< Int >::__new(0);
HXDLIN(  95)			{
HXLINE(  95)				HX_VARI( Int,_g5) = (int)0;
HXDLIN(  95)				HX_VARI_NAME( Int,_g42,"_g4") = ( (Int)(item->__Field(HX_("spanRight",b2,44,f9,01),hx::paccDynamic)) );
HXDLIN(  95)				while((_g5 < _g42)){
HXLINE(  95)					HX_VARI( Int,i) = _g5++;
HXDLIN(  95)					Int _hx_tmp15 = _gthis->colWidths->__get((( ( ::thx::text::table::Cell)(item->__Field(HX_("cell",a2,21,bd,41),hx::paccDynamic)) )->col->index + i));
HXDLIN(  95)					Int _hx_tmp16;
HXDLIN(  95)					if ((i > (int)0)) {
HXLINE(  95)						_hx_tmp16 = (((int)2 * _gthis->padding) + (int)1);
            					}
            					else {
HXLINE(  95)						_hx_tmp16 = (int)0;
            					}
HXDLIN(  95)					_g33->push((_hx_tmp15 + _hx_tmp16));
            				}
            			}
HXLINE(  93)			HX_VARI_NAME(  ::Dynamic,width2,"width") = ::thx::ArrayInts_obj::sum(_g33);
HXLINE(  96)			HX_VARI_NAME( ::Array< Int >,_g43,"_g4") = ::Array_obj< Int >::__new(0);
HXDLIN(  96)			{
HXLINE(  96)				HX_VARI( Int,_g6) = (int)0;
HXDLIN(  96)				HX_VARI_NAME( Int,_g51,"_g5") = ( (Int)(item->__Field(HX_("spanDown",4c,2c,06,2f),hx::paccDynamic)) );
HXDLIN(  96)				while((_g6 < _g51)){
HXLINE(  96)					HX_VARI_NAME( Int,i1,"i") = _g6++;
HXDLIN(  96)					Int _hx_tmp17 = _gthis->rowHeights->__get((( ( ::thx::text::table::Cell)(item->__Field(HX_("cell",a2,21,bd,41),hx::paccDynamic)) )->row->index + i1));
HXDLIN(  96)					Int _hx_tmp18;
HXDLIN(  96)					if ((i1 > (int)0)) {
HXLINE(  96)						_hx_tmp18 = (int)1;
            					}
            					else {
HXLINE(  96)						_hx_tmp18 = (int)0;
            					}
HXDLIN(  96)					_g43->push((_hx_tmp17 + _hx_tmp18));
            				}
            			}
HXLINE(  93)			HX_VARI_NAME(  ::Dynamic,height2,"height") = ::thx::ArrayInts_obj::sum(_g43);
HXLINE(  99)			Int _hx_tmp19 = ((x + (int)1) + _gthis->padding);
HXDLIN(  99)			Int _hx_tmp20 = (y + (int)1);
HXDLIN(  99)			Int _hx_tmp21 = _gthis->symbolPos->__get(( ( ::thx::text::table::Cell)(item->__Field(HX_("cell",a2,21,bd,41),hx::paccDynamic)) )->col->index);
HXDLIN(  99)			_gthis->canvas->paintBlock( ::Dynamic(item->__Field(HX_("block",4d,75,fc,b4),hx::paccDynamic)),_hx_tmp19,_hx_tmp20,width2,(int)1, ::Dynamic(item->__Field(HX_("halign",5d,dd,ae,b6),hx::paccDynamic)),_hx_tmp21);
HXLINE( 102)			HX_VARI( Int,w) = (width2 + (((int)1 + _gthis->padding) * (int)2));
HXDLIN( 102)			HX_VARI( Int,h) = (height2 + (int)2);
HXLINE( 104)			::hx::EnumBase _hx_tmp22 = ::thx::text::table::IStyle_obj::get_type(( ( ::thx::text::table::Cell)(item->__Field(HX_("cell",a2,21,bd,41),hx::paccDynamic)) )->style);
HXDLIN( 104)			_gthis->canvas->paintBorder(_hx_tmp22,x,y,w,h);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.text.table.Renderer","processContents",0x330999b5,"thx.text.table.Renderer.processContents","thx/text/table/Renderer.hx",27,0x8ce698c3)
            	HX_STACK_THIS(this)
HXLINE(  27)		HX_VARI(  ::thx::text::table::Renderer,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(  28)		HX_VARI( ::Array< Int >,_g) = ::Array_obj< Int >::__new(0);
HXDLIN(  28)		{
HXLINE(  28)			HX_VARI( Int,_g2) = (int)0;
HXDLIN(  28)			HX_VARI( Int,_g1) = this->table->get_cols();
HXDLIN(  28)			while((_g2 < _g1)){
HXLINE(  28)				++_g2;
HXDLIN(  28)				_g->push((int)0);
            			}
            		}
HXDLIN(  28)		this->colWidths = _g;
HXLINE(  29)		HX_VARI_NAME( ::Array< Int >,_g11,"_g1") = ::Array_obj< Int >::__new(0);
HXDLIN(  29)		{
HXLINE(  29)			HX_VARI( Int,_g3) = (int)0;
HXDLIN(  29)			HX_VARI_NAME( Int,_g21,"_g2") = this->table->get_cols();
HXDLIN(  29)			while((_g3 < _g21)){
HXLINE(  29)				++_g3;
HXDLIN(  29)				_g11->push((int)0);
            			}
            		}
HXDLIN(  29)		this->symbolPos = _g11;
HXLINE(  30)		HX_VARI_NAME( ::Array< Int >,_g22,"_g2") = ::Array_obj< Int >::__new(0);
HXDLIN(  30)		{
HXLINE(  30)			HX_VARI( Int,_g4) = (int)0;
HXDLIN(  30)			HX_VARI_NAME( Int,_g31,"_g3") = this->table->get_rows();
HXDLIN(  30)			while((_g4 < _g31)){
HXLINE(  30)				++_g4;
HXDLIN(  30)				_g22->push((int)0);
            			}
            		}
HXDLIN(  30)		this->rowHeights = _g22;
HXLINE(  32)		::Array< ::Dynamic> _hx_tmp = this->table->toArray();
HXDLIN(  32)		HX_VARI( ::Array< ::Dynamic>,cells) = ::thx::Arrays_obj::order(_hx_tmp, ::Dynamic(new _hx_Closure_0()));
HXDLIN(  32)		HX_VARI( ::Array< ::Dynamic>,blocks) = cells->map( ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE(  86)		HX_VARI_NAME( Int,width1,"width") = ( (Int)(::thx::Arrays_obj::reduce(this->colWidths,this->reduceWidth_dyn(),(int)1)) );
HXDLIN(  86)		HX_VARI_NAME( Int,height1,"height") = ( (Int)(::thx::Arrays_obj::reduce(this->rowHeights,this->reduceHeight_dyn(),(int)1)) );
HXLINE(  89)		this->canvas->expand(width1,height1);
HXLINE(  91)		::thx::Arrays_obj::each(blocks, ::Dynamic(new _hx_Closure_2(_gthis)));
HXLINE( 107)		this->canvas->paintBottomLine(::thx::text::table::CellType_obj::Body_dyn(),(int)0,(height1 - (int)1),width1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Renderer_obj,processContents,(void))

Int Renderer_obj::reduceWidth(Int acc,Int width){
            	HX_STACK_FRAME("thx.text.table.Renderer","reduceWidth",0x719bf78c,"thx.text.table.Renderer.reduceWidth","thx/text/table/Renderer.hx",111,0x8ce698c3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(acc,"acc")
            	HX_STACK_ARG(width,"width")
HXLINE( 111)		return (((acc + width) + (this->padding * (int)2)) + (int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Renderer_obj,reduceWidth,return )

Int Renderer_obj::reduceHeight(Int acc,Int height){
            	HX_STACK_FRAME("thx.text.table.Renderer","reduceHeight",0xad2c1ba1,"thx.text.table.Renderer.reduceHeight","thx/text/table/Renderer.hx",115,0x8ce698c3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(acc,"acc")
            	HX_STACK_ARG(height,"height")
HXLINE( 115)		return ((acc + height) + (int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Renderer_obj,reduceHeight,return )


Renderer_obj::Renderer_obj()
{
}

void Renderer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Renderer);
	HX_MARK_MEMBER_NAME(padding,"padding");
	HX_MARK_MEMBER_NAME(canvas,"canvas");
	HX_MARK_MEMBER_NAME(colWidths,"colWidths");
	HX_MARK_MEMBER_NAME(rowHeights,"rowHeights");
	HX_MARK_MEMBER_NAME(symbolPos,"symbolPos");
	HX_MARK_MEMBER_NAME(table,"table");
	HX_MARK_END_CLASS();
}

void Renderer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(padding,"padding");
	HX_VISIT_MEMBER_NAME(canvas,"canvas");
	HX_VISIT_MEMBER_NAME(colWidths,"colWidths");
	HX_VISIT_MEMBER_NAME(rowHeights,"rowHeights");
	HX_VISIT_MEMBER_NAME(symbolPos,"symbolPos");
	HX_VISIT_MEMBER_NAME(table,"table");
}

hx::Val Renderer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"table") ) { return hx::Val( table); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"canvas") ) { return hx::Val( canvas); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"padding") ) { return hx::Val( padding); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"colWidths") ) { return hx::Val( colWidths); }
		if (HX_FIELD_EQ(inName,"symbolPos") ) { return hx::Val( symbolPos); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rowHeights") ) { return hx::Val( rowHeights); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"reduceWidth") ) { return hx::Val( reduceWidth_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"reduceHeight") ) { return hx::Val( reduceHeight_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"processContents") ) { return hx::Val( processContents_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Renderer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"table") ) { table=inValue.Cast<  ::thx::text::Table >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"canvas") ) { canvas=inValue.Cast<  ::thx::text::table::Canvas >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"padding") ) { padding=inValue.Cast< Int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"colWidths") ) { colWidths=inValue.Cast< ::Array< Int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"symbolPos") ) { symbolPos=inValue.Cast< ::Array< Int > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rowHeights") ) { rowHeights=inValue.Cast< ::Array< Int > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Renderer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("padding","\xd1","\x59","\x7d","\xd0"));
	outFields->push(HX_HCSTRING("canvas","\xd8","\x54","\x42","\xb8"));
	outFields->push(HX_HCSTRING("colWidths","\x0d","\x34","\xda","\x6b"));
	outFields->push(HX_HCSTRING("rowHeights","\xb2","\xff","\xd4","\x7b"));
	outFields->push(HX_HCSTRING("symbolPos","\x1c","\x8d","\x01","\xe0"));
	outFields->push(HX_HCSTRING("table","\x0e","\xb8","\xe3","\x0a"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Renderer_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Renderer_obj,padding),HX_HCSTRING("padding","\xd1","\x59","\x7d","\xd0")},
	{hx::fsObject /*::thx::text::table::Canvas*/ ,(int)offsetof(Renderer_obj,canvas),HX_HCSTRING("canvas","\xd8","\x54","\x42","\xb8")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(Renderer_obj,colWidths),HX_HCSTRING("colWidths","\x0d","\x34","\xda","\x6b")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(Renderer_obj,rowHeights),HX_HCSTRING("rowHeights","\xb2","\xff","\xd4","\x7b")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(Renderer_obj,symbolPos),HX_HCSTRING("symbolPos","\x1c","\x8d","\x01","\xe0")},
	{hx::fsObject /*::thx::text::Table*/ ,(int)offsetof(Renderer_obj,table),HX_HCSTRING("table","\x0e","\xb8","\xe3","\x0a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Renderer_obj_sStaticStorageInfo = 0;
#endif

static ::String Renderer_obj_sMemberFields[] = {
	HX_HCSTRING("padding","\xd1","\x59","\x7d","\xd0"),
	HX_HCSTRING("canvas","\xd8","\x54","\x42","\xb8"),
	HX_HCSTRING("colWidths","\x0d","\x34","\xda","\x6b"),
	HX_HCSTRING("rowHeights","\xb2","\xff","\xd4","\x7b"),
	HX_HCSTRING("symbolPos","\x1c","\x8d","\x01","\xe0"),
	HX_HCSTRING("table","\x0e","\xb8","\xe3","\x0a"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("processContents","\xa9","\xea","\x3e","\x8f"),
	HX_HCSTRING("reduceWidth","\x80","\xbe","\x30","\x9f"),
	HX_HCSTRING("reduceHeight","\x2d","\x6a","\xc5","\x61"),
	::String(null()) };

static void Renderer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Renderer_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Renderer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Renderer_obj::__mClass,"__mClass");
};

#endif

hx::Class Renderer_obj::__mClass;

void Renderer_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.text.table.Renderer","\x7a","\x37","\xd3","\xf8");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Renderer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Renderer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Renderer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Renderer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Renderer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Renderer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace text
} // end namespace table
