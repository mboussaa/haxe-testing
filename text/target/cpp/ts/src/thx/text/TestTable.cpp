// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "cpp/Int64.h"
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_thx__DateTime_DateTime_Impl_
#include <thx/_DateTime/DateTime_Impl_.h>
#endif
#ifndef INCLUDED_thx_text_Table
#include <thx/text/Table.h>
#endif
#ifndef INCLUDED_thx_text_TestTable
#include <thx/text/TestTable.h>
#endif
#ifndef INCLUDED_thx_text_table_Canvas
#include <thx/text/table/Canvas.h>
#endif
#ifndef INCLUDED_thx_text_table_Cell
#include <thx/text/table/Cell.h>
#endif
#ifndef INCLUDED_thx_text_table_CellSet
#include <thx/text/table/CellSet.h>
#endif
#ifndef INCLUDED_thx_text_table_CellType
#include <thx/text/table/CellType.h>
#endif
#ifndef INCLUDED_thx_text_table_CellValueImpl
#include <thx/text/table/CellValueImpl.h>
#endif
#ifndef INCLUDED_thx_text_table_Col
#include <thx/text/table/Col.h>
#endif
#ifndef INCLUDED_thx_text_table_CompositeStyle
#include <thx/text/table/CompositeStyle.h>
#endif
#ifndef INCLUDED_thx_text_table_DefaultStyle
#include <thx/text/table/DefaultStyle.h>
#endif
#ifndef INCLUDED_thx_text_table_HAlign
#include <thx/text/table/HAlign.h>
#endif
#ifndef INCLUDED_thx_text_table_IStyle
#include <thx/text/table/IStyle.h>
#endif
#ifndef INCLUDED_thx_text_table_Renderer
#include <thx/text/table/Renderer.h>
#endif
#ifndef INCLUDED_thx_text_table_Row
#include <thx/text/table/Row.h>
#endif
#ifndef INCLUDED_thx_text_table_Span
#include <thx/text/table/Span.h>
#endif
#ifndef INCLUDED_thx_text_table_StringBlock
#include <thx/text/table/StringBlock.h>
#endif
#ifndef INCLUDED_thx_text_table_Style
#include <thx/text/table/Style.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace text{

void TestTable_obj::__construct(){
            	HX_STACK_FRAME("thx.text.TestTable","new",0x007b2757,"thx.text.TestTable.new","thx/text/TestTable.hx",11,0x2913bc59)
            	HX_STACK_THIS(this)
            	}

Dynamic TestTable_obj::__CreateEmpty() { return new TestTable_obj; }

hx::ObjectPtr< TestTable_obj > TestTable_obj::__new()
{
	hx::ObjectPtr< TestTable_obj > _hx_result = new TestTable_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestTable_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestTable_obj > _hx_result = new TestTable_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestTable_obj::setup(){
            	HX_STACK_FRAME("thx.text.TestTable","setup",0x5413f134,"thx.text.TestTable.setup","thx/text/TestTable.hx",15,0x2913bc59)
            	HX_STACK_THIS(this)
HXLINE(  15)		this->table =  ::thx::text::Table_obj::__new();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTable_obj,setup,(void))

void TestTable_obj::testSpanRight(){
            	HX_STACK_FRAME("thx.text.TestTable","testSpanRight",0x9abc13b7,"thx.text.TestTable.testSpanRight","thx/text/TestTable.hx",18,0x2913bc59)
            	HX_STACK_THIS(this)
HXLINE(  19)		::thx::text::table::IStyle_obj::set_type(this->table->style,::thx::text::table::CellType_obj::Body_dyn());
HXLINE(  20)		::thx::text::table::IStyle_obj::setAlign(this->table->style,::thx::text::table::HAlign_obj::Center_dyn());
HXLINE(  21)		::hx::EnumBase _hx_tmp = ::thx::text::table::CellValueImpl_obj::IntCell((int)1);
HXDLIN(  21)		::hx::EnumBase _hx_tmp1 = ::thx::text::table::Span_obj::SpanRight((int)2);
HXDLIN(  21)		this->table->set(_hx_tmp,(int)0,(int)0,_hx_tmp1);
HXLINE(  22)		this->table->set(::thx::text::table::CellValueImpl_obj::IntCell((int)2),(int)1,(int)0,null());
HXLINE(  23)		this->table->set(::thx::text::table::CellValueImpl_obj::IntCell((int)3),(int)1,(int)1,null());
HXLINE(  29)		::String _hx_tmp2 = this->table->toString();
HXLINE(  24)		::utest::Assert_obj::equals(HX_("\n\xe2""\x94""\x8c""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x90""\n\xe2""\x94""\x82""   1   \xe2""\x94""\x82""\n\xe2""\x94""\x9c""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\xac""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\xa4""\n\xe2""\x94""\x82"" 2 \xe2""\x94""\x82"" 3 \xe2""\x94""\x82""\n\xe2""\x94""\x94""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\xb4""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x98""",06,f8,8c,48),_hx_tmp2,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),24,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testSpanRight",00,c2,33,35)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTable_obj,testSpanRight,(void))

void TestTable_obj::testSpanDown(){
            	HX_STACK_FRAME("thx.text.TestTable","testSpanDown",0x7124e4e7,"thx.text.TestTable.testSpanDown","thx/text/TestTable.hx",32,0x2913bc59)
            	HX_STACK_THIS(this)
HXLINE(  33)		::thx::text::table::IStyle_obj::set_type(this->table->style,::thx::text::table::CellType_obj::Body_dyn());
HXLINE(  34)		::thx::text::table::IStyle_obj::setAlign(this->table->style,::thx::text::table::HAlign_obj::Center_dyn());
HXLINE(  35)		::hx::EnumBase _hx_tmp = ::thx::text::table::CellValueImpl_obj::IntCell((int)1);
HXDLIN(  35)		::hx::EnumBase _hx_tmp1 = ::thx::text::table::Span_obj::SpanDown((int)2);
HXDLIN(  35)		this->table->set(_hx_tmp,(int)0,(int)0,_hx_tmp1);
HXLINE(  36)		this->table->set(::thx::text::table::CellValueImpl_obj::IntCell((int)2),(int)0,(int)1,null());
HXLINE(  37)		this->table->set(::thx::text::table::CellValueImpl_obj::IntCell((int)3),(int)1,(int)1,null());
HXLINE(  43)		::String _hx_tmp2 = this->table->toString();
HXLINE(  38)		::utest::Assert_obj::equals(HX_("\n\xe2""\x94""\x8c""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\xac""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x90""\n\xe2""\x94""\x82"" 1 \xe2""\x94""\x82"" 2 \xe2""\x94""\x82""\n\xe2""\x94""\x82""   \xe2""\x94""\x9c""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\xa4""\n\xe2""\x94""\x82""   \xe2""\x94""\x82"" 3 \xe2""\x94""\x82""\n\xe2""\x94""\x94""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\xb4""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x98""",26,68,7f,81),_hx_tmp2,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),38,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testSpanDown",be,52,0d,a2)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTable_obj,testSpanDown,(void))

void TestTable_obj::testSpanning(){
            	HX_STACK_FRAME("thx.text.TestTable","testSpanning",0x8ce34599,"thx.text.TestTable.testSpanning","thx/text/TestTable.hx",46,0x2913bc59)
            	HX_STACK_THIS(this)
HXLINE(  47)		::thx::text::table::IStyle_obj::set_type(this->table->style,::thx::text::table::CellType_obj::Body_dyn());
HXLINE(  48)		::thx::text::table::IStyle_obj::setAlign(this->table->style,::thx::text::table::HAlign_obj::Center_dyn());
HXLINE(  49)		this->table->set(::thx::text::table::CellValueImpl_obj::StringCell(HX_("0/0",51,95,24,00)),(int)0,(int)0,null());
HXLINE(  50)		::hx::EnumBase _hx_tmp = ::thx::text::table::CellValueImpl_obj::StringCell(HX_("0/1",52,95,24,00));
HXDLIN(  50)		::hx::EnumBase _hx_tmp1 = ::thx::text::table::Span_obj::SpanBoth((int)2,(int)2);
HXDLIN(  50)		this->table->set(_hx_tmp,(int)0,(int)1,_hx_tmp1);
HXLINE(  51)		::hx::EnumBase _hx_tmp2 = ::thx::text::table::CellValueImpl_obj::StringCell(HX_("0/3",54,95,24,00));
HXDLIN(  51)		::hx::EnumBase _hx_tmp3 = ::thx::text::table::Span_obj::SpanDown((int)2);
HXDLIN(  51)		this->table->set(_hx_tmp2,(int)0,(int)3,_hx_tmp3);
HXLINE(  52)		this->table->set(::thx::text::table::CellValueImpl_obj::StringCell(HX_("1/0",92,57,25,00)),(int)1,(int)0,null());
HXLINE(  53)		::hx::EnumBase _hx_tmp4 = ::thx::text::table::CellValueImpl_obj::StringCell(HX_("2/0",d3,19,26,00));
HXDLIN(  53)		::hx::EnumBase _hx_tmp5 = ::thx::text::table::Span_obj::SpanRight((int)2);
HXDLIN(  53)		this->table->set(_hx_tmp4,(int)2,(int)0,_hx_tmp5);
HXLINE(  54)		::hx::EnumBase _hx_tmp6 = ::thx::text::table::CellValueImpl_obj::StringCell(HX_("2/2",d5,19,26,00));
HXDLIN(  54)		::hx::EnumBase _hx_tmp7 = ::thx::text::table::Span_obj::SpanRight((int)2);
HXDLIN(  54)		this->table->set(_hx_tmp6,(int)2,(int)2,_hx_tmp7);
HXLINE(  63)		::String _hx_tmp8 = this->table->toString();
HXLINE(  56)		::utest::Assert_obj::equals(HX_("\n\xe2""\x94""\x8c""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\xac""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\xac""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x90""\n\xe2""\x94""\x82"" 0/0 \xe2""\x94""\x82"" 0/1 \xe2""\x94""\x82"" 0/3 \xe2""\x94""\x82""\n\xe2""\x94""\x9c""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\xa4""     \xe2""\x94""\x82""     \xe2""\x94""\x82""\n\xe2""\x94""\x82"" 1/0 \xe2""\x94""\x82""     \xe2""\x94""\x82""     \xe2""\x94""\x82""\n\xe2""\x94""\x9c""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\xb4""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\xac""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\xb4""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\xa4""\n\xe2""\x94""\x82""  2/0   \xe2""\x94""\x82""  2/2   \xe2""\x94""\x82""\n\xe2""\x94""\x94""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\xb4""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x98""",b5,7f,b5,7c),_hx_tmp8,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),56,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testSpanning",70,b3,cb,bd)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTable_obj,testSpanning,(void))

void TestTable_obj::testFromData(){
            	HX_STACK_FRAME("thx.text.TestTable","testFromData",0xe24ddd4f,"thx.text.TestTable.testFromData","thx/text/TestTable.hx",66,0x2913bc59)
            	HX_STACK_THIS(this)
HXLINE(  80)		HX_VARI(  ::thx::text::Table,table) = ::thx::text::Table_obj::fromData(::Array_obj< ::Dynamic>::__new(11)->init(0,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("rank",ac,4d,a4,4b))->init(1,HX_("country",56,ba,59,1d))->init(2,HX_("US $",e2,39,6e,38)))->init(1,::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,HX_("Luxembourg",86,f4,f0,01))->init(2,(int)113533))->init(2,::cpp::VirtualArray_obj::__new(3)->init(0,(int)2)->init(1,HX_("Qatar",75,09,eb,e3))->init(2,(int)98329))->init(3,::cpp::VirtualArray_obj::__new(3)->init(0,(int)3)->init(1,HX_("Norway",de,7c,05,65))->init(2,(int)97255))->init(4,::cpp::VirtualArray_obj::__new(3)->init(0,(int)4)->init(1,HX_("Switzerland",03,77,3b,b9))->init(2,(int)81161))->init(5,::cpp::VirtualArray_obj::__new(3)->init(0,(int)5)->init(1,HX_("United Arab  Emirates",41,5d,00,20))->init(2,(int)67008))->init(6,::cpp::VirtualArray_obj::__new(3)->init(0,(int)6)->init(1,HX_("Australia",20,28,02,a7))->init(2,(int)65477))->init(7,::cpp::VirtualArray_obj::__new(3)->init(0,(int)7)->init(1,HX_("Denmark",3a,0c,29,0c))->init(2,(int)59928))->init(8,::cpp::VirtualArray_obj::__new(3)->init(0,(int)8)->init(1,HX_("Sweden",4c,c1,5c,f7))->init(2,(int)56956))->init(9,::cpp::VirtualArray_obj::__new(3)->init(0,(int)9)->init(1,HX_("Canada",2e,dc,c6,ec))->init(2,(int)50436))->init(10,::cpp::VirtualArray_obj::__new(3)->init(0,(int)10)->init(1,HX_("Netherlands",70,0e,67,5f))->init(2,(int)50355)),null(),HX_("average earnings",8c,4b,f0,84));
HXLINE(  97)		::String _hx_tmp = table->toString();
HXLINE(  81)		::utest::Assert_obj::equals(HX_("\n\xe2""\x94""\x8f""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x93""\n\xe2""\x94""\x83""            average earnings            \xe2""\x94""\x83""\n\xe2""\x94""\xa3""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\xb3""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\xb3""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\xab""\n\xe2""\x94""\x83"" rank \xe2""\x94""\x83"" country               \xe2""\x94""\x83"" US $    \xe2""\x94""\x83""\n\xe2""\x94""\xa1""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x95""\x87""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x95""\x87""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\xa9""\n\xe2""\x94""\x82""    1 \xe2""\x94""\x82"" Luxembourg            \xe2""\x94""\x82"" 113,533 \xe2""\x94""\x82""\n\xe2""\x94""\x82""    2 \xe2""\x94""\x82"" Qatar                 \xe2""\x94""\x82""  98,329 \xe2""\x94""\x82""\n\xe2""\x94""\x82""    3 \xe2""\x94""\x82"" Norway                \xe2""\x94""\x82""  97,255 \xe2""\x94""\x82""\n\xe2""\x94""\x82""    4 \xe2""\x94""\x82"" Switzerland           \xe2""\x94""\x82""  81,161 \xe2""\x94""\x82""\n\xe2""\x94""\x82""    5 \xe2""\x94""\x82"" United Arab  Emirates \xe2""\x94""\x82""  67,008 \xe2""\x94""\x82""\n\xe2""\x94""\x82""    6 \xe2""\x94""\x82"" Australia             \xe2""\x94""\x82""  65,477 \xe2""\x94""\x82""\n\xe2""\x94""\x82""    7 \xe2""\x94""\x82"" Denmark               \xe2""\x94""\x82""  59,928 \xe2""\x94""\x82""\n\xe2""\x94""\x82""    8 \xe2""\x94""\x82"" Sweden                \xe2""\x94""\x82""  56,956 \xe2""\x94""\x82""\n\xe2""\x94""\x82""    9 \xe2""\x94""\x82"" Canada                \xe2""\x94""\x82""  50,436 \xe2""\x94""\x82""\n\xe2""\x94""\x82""   10 \xe2""\x94""\x82"" Netherlands           \xe2""\x94""\x82""  50,355 \xe2""\x94""\x82""\n\xe2""\x94""\x94""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\xb4""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\xb4""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x98""",2f,8e,5a,ec),_hx_tmp,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),81,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testFromData",26,4b,36,13)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTable_obj,testFromData,(void))

void TestTable_obj::testFromObjects(){
            	HX_STACK_FRAME("thx.text.TestTable","testFromObjects",0x84e826cf,"thx.text.TestTable.testFromObjects","thx/text/TestTable.hx",100,0x2913bc59)
            	HX_STACK_THIS(this)
HXLINE( 117)		HX_VARI(  ::thx::text::Table,table) = ::thx::text::Table_obj::fromObjects(::Array_obj< ::Dynamic>::__new(3)->init(0, ::Dynamic(hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("longitude",2f,c1,cb,99),((Float)1.6))
            			->setFixed(1,HX_("latitude",6c,c7,68,06),((Float)42.5))
            			->setFixed(2,HX_("code",2d,b1,c4,41),HX_("AD",e3,38,00,00))
            			->setFixed(3,HX_("name",4b,72,ff,48),HX_("Andorra",c9,6d,fc,67))))->init(1, ::Dynamic(hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("longitude",2f,c1,cb,99),((Float)53.8))
            			->setFixed(1,HX_("latitude",6c,c7,68,06),((Float)23.4))
            			->setFixed(2,HX_("code",2d,b1,c4,41),HX_("AE",e4,38,00,00))
            			->setFixed(3,HX_("name",4b,72,ff,48),HX_("United Arab Emirates",e3,47,64,f5))))->init(2, ::Dynamic(hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("longitude",2f,c1,cb,99),((Float)67.7))
            			->setFixed(1,HX_("latitude",6c,c7,68,06),((Float)33.9))
            			->setFixed(2,HX_("code",2d,b1,c4,41),HX_("AF",e5,38,00,00))
            			->setFixed(3,HX_("name",4b,72,ff,48),HX_("Afghanistan",04,17,17,f0)))),HX_("countries",34,b0,f1,72));
HXLINE( 127)		::String _hx_tmp = table->toString();
HXLINE( 118)		::utest::Assert_obj::equals(HX_("\n\xe2""\x94""\x8f""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x93""\n\xe2""\x94""\x83""                     countries                      \xe2""\x94""\x83""\n\xe2""\x94""\xa3""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\xb3""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\xb3""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\xb3""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\xab""\n\xe2""\x94""\x83"" code \xe2""\x94""\x83"" latitude \xe2""\x94""\x83"" longitude \xe2""\x94""\x83"" name                 \xe2""\x94""\x83""\n\xe2""\x94""\xa1""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x95""\x87""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x95""\x87""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x95""\x87""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\xa9""\n\xe2""\x94""\x82"" AD   \xe2""\x94""\x82""     42.5 \xe2""\x94""\x82""       1.6 \xe2""\x94""\x82"" Andorra              \xe2""\x94""\x82""\n\xe2""\x94""\x82"" AE   \xe2""\x94""\x82""     23.4 \xe2""\x94""\x82""      53.8 \xe2""\x94""\x82"" United Arab Emirates \xe2""\x94""\x82""\n\xe2""\x94""\x82"" AF   \xe2""\x94""\x82""     33.9 \xe2""\x94""\x82""      67.7 \xe2""\x94""\x82"" Afghanistan          \xe2""\x94""\x82""\n\xe2""\x94""\x94""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\xb4""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\xb4""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\xb4""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x98""",9f,fa,e9,03),_hx_tmp,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),118,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testFromObjects",58,b9,5e,6f)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTable_obj,testFromObjects,(void))

void TestTable_obj::testPaintBorder(){
            	HX_STACK_FRAME("thx.text.TestTable","testPaintBorder",0x30f85d6f,"thx.text.TestTable.testPaintBorder","thx/text/TestTable.hx",130,0x2913bc59)
            	HX_STACK_THIS(this)
HXLINE( 131)		HX_VARI(  ::thx::text::table::Canvas,canvas) =  ::thx::text::table::Canvas_obj::__new((int)3,(int)3);
HXLINE( 132)		canvas->paintBorder(::thx::text::table::CellType_obj::Body_dyn(),(int)0,(int)0,(int)3,(int)3);
HXLINE( 133)		::String _hx_tmp = canvas->toString();
HXDLIN( 133)		::utest::Assert_obj::equals(HX_("\xe2""\x94""\x8c""\xe2""\x94""\x80""\xe2""\x94""\x90""\n\xe2""\x94""\x82"" \xe2""\x94""\x82""\n\xe2""\x94""\x94""\xe2""\x94""\x80""\xe2""\x94""\x98""",d0,cb,4b,bc),_hx_tmp,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),133,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testPaintBorder",f8,ef,6e,1b)));
HXLINE( 135)		canvas =  ::thx::text::table::Canvas_obj::__new((int)4,(int)4);
HXLINE( 136)		canvas->paintBorder(::thx::text::table::CellType_obj::Body_dyn(),(int)1,(int)0,(int)3,(int)3);
HXLINE( 137)		::String _hx_tmp1 = canvas->toString();
HXDLIN( 137)		::utest::Assert_obj::equals(HX_(" \xe2""\x94""\x8c""\xe2""\x94""\x80""\xe2""\x94""\x90""\n \xe2""\x94""\x82"" \xe2""\x94""\x82""\n \xe2""\x94""\x94""\xe2""\x94""\x80""\xe2""\x94""\x98""\n    ",06,74,53,03),_hx_tmp1,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),137,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testPaintBorder",f8,ef,6e,1b)));
HXLINE( 139)		canvas =  ::thx::text::table::Canvas_obj::__new((int)4,(int)4);
HXLINE( 140)		canvas->paintBorder(::thx::text::table::CellType_obj::Body_dyn(),(int)1,(int)1,(int)3,(int)3);
HXLINE( 141)		::String _hx_tmp2 = canvas->toString();
HXDLIN( 141)		::utest::Assert_obj::equals(HX_("    \n \xe2""\x94""\x8c""\xe2""\x94""\x80""\xe2""\x94""\x90""\n \xe2""\x94""\x82"" \xe2""\x94""\x82""\n \xe2""\x94""\x94""\xe2""\x94""\x80""\xe2""\x94""\x98""",0e,2c,79,a1),_hx_tmp2,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),141,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testPaintBorder",f8,ef,6e,1b)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTable_obj,testPaintBorder,(void))

void TestTable_obj::testRender(){
            	HX_STACK_FRAME("thx.text.TestTable","testRender",0xa2d93731,"thx.text.TestTable.testRender","thx/text/TestTable.hx",144,0x2913bc59)
            	HX_STACK_THIS(this)
HXLINE( 145)		HX_VARI(  ::thx::text::table::Renderer,renderer) =  ::thx::text::table::Renderer_obj::__new(null());
HXLINE( 146)		this->table->set(::thx::text::table::CellValueImpl_obj::BoolCell(true),(int)0,(int)1,null());
HXLINE( 147)		this->table->set(::thx::text::table::CellValueImpl_obj::StringCell(HX_("Franco",45,e4,1a,e1)),(int)0,(int)0,null());
HXLINE( 148)		this->table->set(::thx::text::table::CellValueImpl_obj::BoolCell(false),(int)0,(int)2,null());
HXLINE( 149)		HX_VARI(  ::Date,v) = ::Date_obj::fromString(HX_("2015-11-19",ca,f5,9f,ff));
HXDLIN( 149)		::hx::EnumBase _hx_tmp = ::thx::text::table::CellValueImpl_obj::DateTimeCell(::thx::_DateTime::DateTime_Impl__obj::fromDate(v));
HXDLIN( 149)		this->table->set(_hx_tmp,(int)1,(int)0,null());
HXLINE( 150)		this->table->set(::thx::text::table::CellValueImpl_obj::IntCell((int)200),(int)1,(int)2,null());
HXLINE( 151)		::thx::text::table::IStyle_obj::set_type(this->table->style,::thx::text::table::CellType_obj::Body_dyn());
HXLINE( 152)		::thx::text::table::IStyle_obj::set_type(this->table->getRow((int)0)->style,::thx::text::table::CellType_obj::Header_dyn());
HXLINE( 153)		HX_VARI( ::String,s) = renderer->render(this->table);
HXLINE( 154)		::utest::Assert_obj::equals(HX_("\n\xe2""\x94""\x8f""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\xb3""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\xb3""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x93""\n\xe2""\x94""\x83"" Franco     \xe2""\x94""\x83"" \xe2""\x9c""\x93"" \xe2""\x94""\x83""  \xe2""\x9c""\x95""  \xe2""\x94""\x83""\n\xe2""\x94""\xa1""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x95""\x87""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x95""\x87""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\x81""\xe2""\x94""\xa9""\n\xe2""\x94""\x82"" 11/19/2015 \xe2""\x94""\x82""   \xe2""\x94""\x82"" 200 \xe2""\x94""\x82""\n\xe2""\x94""\x94""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\xb4""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\xb4""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x98""",ff,87,ca,b4),s,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),154,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testRender",48,b1,1d,1e)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTable_obj,testRender,(void))

void TestTable_obj::oneCell(::hx::EnumBase value,Int width){
            	HX_STACK_FRAME("thx.text.TestTable","oneCell",0xa4a2b19f,"thx.text.TestTable.oneCell","thx/text/TestTable.hx",162,0x2913bc59)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(width,"width")
HXLINE( 163)		this->table =  ::thx::text::Table_obj::__new();
HXLINE( 164)		::thx::text::table::IStyle_obj::set_type(this->table->style,::thx::text::table::CellType_obj::Body_dyn());
HXLINE( 165)		::thx::text::table::IStyle_obj::set_minWidth(this->table->style,width);
HXLINE( 166)		this->table->set(value,(int)0,(int)0,null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(TestTable_obj,oneCell,(void))

void TestTable_obj::testAlign(){
            	HX_STACK_FRAME("thx.text.TestTable","testAlign",0x5714ff4a,"thx.text.TestTable.testAlign","thx/text/TestTable.hx",169,0x2913bc59)
            	HX_STACK_THIS(this)
HXLINE( 170)		this->oneCell(::thx::text::table::CellValueImpl_obj::IntCell((int)0),(int)8);
HXLINE( 174)		::String _hx_tmp = this->table->toString();
HXLINE( 171)		::utest::Assert_obj::equals(HX_("\n\xe2""\x94""\x8c""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x90""\n\xe2""\x94""\x82""        0 \xe2""\x94""\x82""\n\xe2""\x94""\x94""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x98""",42,dd,66,0d),_hx_tmp,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),171,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testAlign",13,95,93,ea)));
HXLINE( 175)		this->oneCell(::thx::text::table::CellValueImpl_obj::StringCell(HX_("0",30,00,00,00)),(int)8);
HXLINE( 179)		::String _hx_tmp1 = this->table->toString();
HXLINE( 176)		::utest::Assert_obj::equals(HX_("\n\xe2""\x94""\x8c""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x90""\n\xe2""\x94""\x82"" 0        \xe2""\x94""\x82""\n\xe2""\x94""\x94""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x98""",62,ff,38,0f),_hx_tmp1,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),176,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testAlign",13,95,93,ea)));
HXLINE( 180)		this->oneCell(::thx::text::table::CellValueImpl_obj::BoolCell(true),(int)8);
HXLINE( 184)		::String _hx_tmp2 = this->table->toString();
HXLINE( 181)		::utest::Assert_obj::equals(HX_("\n\xe2""\x94""\x8c""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x90""\n\xe2""\x94""\x82""    \xe2""\x9c""\x93""     \xe2""\x94""\x82""\n\xe2""\x94""\x94""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x98""",f9,22,3f,a8),_hx_tmp2,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),181,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testAlign",13,95,93,ea)));
HXLINE( 185)		this->oneCell(::thx::text::table::CellValueImpl_obj::FloatCell(((Float)0.5)),(int)8);
HXLINE( 189)		::String _hx_tmp3 = this->table->toString();
HXLINE( 186)		::utest::Assert_obj::equals(HX_("\n\xe2""\x94""\x8c""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x90""\n\xe2""\x94""\x82""      0.5 \xe2""\x94""\x82""\n\xe2""\x94""\x94""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x98""",1b,f0,f1,a0),_hx_tmp3,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),186,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testAlign",13,95,93,ea)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTable_obj,testAlign,(void))

void TestTable_obj::testAlignOnSymbol(){
            	HX_STACK_FRAME("thx.text.TestTable","testAlignOnSymbol",0xa4b0bb41,"thx.text.TestTable.testAlignOnSymbol","thx/text/TestTable.hx",192,0x2913bc59)
            	HX_STACK_THIS(this)
HXLINE( 193)		this->table->set(::thx::text::table::CellValueImpl_obj::FloatCell(((Float)0.001)),(int)0,(int)0,null());
HXLINE( 194)		this->table->set(::thx::text::table::CellValueImpl_obj::FloatCell(((Float)2.0)),(int)0,(int)1,null());
HXLINE( 195)		this->table->set(::thx::text::table::CellValueImpl_obj::IntCell((int)3333),(int)0,(int)2,null());
HXLINE( 196)		this->table->set(::thx::text::table::CellValueImpl_obj::FloatCell(((Float)12.5)),(int)0,(int)3,null());
HXLINE( 197)		::thx::text::table::IStyle_obj::set_type(this->table->style,::thx::text::table::CellType_obj::Body_dyn());
HXLINE( 201)		::String _hx_tmp = this->table->toString();
HXLINE( 198)		::utest::Assert_obj::equals(HX_("\n\xe2""\x94""\x8c""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\xac""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\xac""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\xac""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x90""\n\xe2""\x94""\x82"" 0.001 \xe2""\x94""\x82"" 2.0 \xe2""\x94""\x82"" 3,333 \xe2""\x94""\x82"" 12.5 \xe2""\x94""\x82""\n\xe2""\x94""\x94""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\xb4""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\xb4""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\xb4""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x98""",3b,8e,cd,4a),_hx_tmp,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),198,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testAlignOnSymbol",0a,c2,d7,07)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTable_obj,testAlignOnSymbol,(void))

void TestTable_obj::testAlignOnSymbolVertical(){
            	HX_STACK_FRAME("thx.text.TestTable","testAlignOnSymbolVertical",0xff76dcd7,"thx.text.TestTable.testAlignOnSymbolVertical","thx/text/TestTable.hx",204,0x2913bc59)
            	HX_STACK_THIS(this)
HXLINE( 205)		this->table->set(::thx::text::table::CellValueImpl_obj::FloatCell(((Float)0.001)),(int)0,(int)0,null());
HXLINE( 206)		this->table->set(::thx::text::table::CellValueImpl_obj::FloatCell(((Float)2.0)),(int)1,(int)0,null());
HXLINE( 207)		this->table->set(::thx::text::table::CellValueImpl_obj::IntCell((int)3333),(int)2,(int)0,null());
HXLINE( 208)		this->table->set(::thx::text::table::CellValueImpl_obj::FloatCell(((Float)12.5)),(int)3,(int)0,null());
HXLINE( 209)		::thx::text::table::IStyle_obj::set_type(this->table->style,::thx::text::table::CellType_obj::Body_dyn());
HXLINE( 219)		::String _hx_tmp = this->table->toString();
HXLINE( 210)		::utest::Assert_obj::equals(HX_("\n\xe2""\x94""\x8c""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x90""\n\xe2""\x94""\x82""     0.001 \xe2""\x94""\x82""\n\xe2""\x94""\x9c""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\xa4""\n\xe2""\x94""\x82""     2.0   \xe2""\x94""\x82""\n\xe2""\x94""\x9c""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\xa4""\n\xe2""\x94""\x82"" 3,333     \xe2""\x94""\x82""\n\xe2""\x94""\x9c""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\xa4""\n\xe2""\x94""\x82""    12.5   \xe2""\x94""\x82""\n\xe2""\x94""\x94""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x80""\xe2""\x94""\x98""",3d,c9,99,ab),_hx_tmp,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),210,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testAlignOnSymbolVertical",a0,54,9f,a9)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTable_obj,testAlignOnSymbolVertical,(void))

void TestTable_obj::testSequence(){
            	HX_STACK_FRAME("thx.text.TestTable","testSequence",0x2b0bd6dc,"thx.text.TestTable.testSequence","thx/text/TestTable.hx",222,0x2913bc59)
            	HX_STACK_THIS(this)
HXLINE( 223)		HX_VARI(  ::thx::text::table::Cell,last) = this->table->set(::thx::text::table::CellValueImpl_obj::BoolCell(true),(int)0,(int)1,null());
HXLINE( 224)		HX_VARI(  ::thx::text::table::Cell,first) = this->table->set(::thx::text::table::CellValueImpl_obj::BoolCell(false),(int)0,(int)0,null());
HXLINE( 225)		::utest::Assert_obj::equals((int)1,last->col->index,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),225,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testSequence",b3,44,f4,5b)));
HXLINE( 226)		::utest::Assert_obj::equals((int)0,first->col->index,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),226,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testSequence",b3,44,f4,5b)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTable_obj,testSequence,(void))

void TestTable_obj::testStyle(){
            	HX_STACK_FRAME("thx.text.TestTable","testStyle",0xb9a14db6,"thx.text.TestTable.testStyle","thx/text/TestTable.hx",229,0x2913bc59)
            	HX_STACK_THIS(this)
HXLINE( 230)		HX_VARI(  ::thx::text::table::Style,style) =  ::thx::text::table::Style_obj::__new();
HXLINE( 231)		 ::Dynamic _hx_tmp = style->get_formatter();
HXDLIN( 231)		::utest::Assert_obj::isNull(_hx_tmp,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),231,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testStyle",7f,e3,1f,4d)));
HXLINE( 232)		HX_VARI(  ::thx::text::table::DefaultStyle,dstyle) =  ::thx::text::table::DefaultStyle_obj::__new();
HXLINE( 233)		 ::Dynamic _hx_tmp1 = dstyle->get_formatter();
HXDLIN( 233)		::utest::Assert_obj::notNull(_hx_tmp1,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),233,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testStyle",7f,e3,1f,4d)));
HXLINE( 234)		HX_VARI(  ::thx::text::table::CompositeStyle,cstyle) =  ::thx::text::table::CompositeStyle_obj::__new(::Array_obj< ::Dynamic>::__new(1)->init(0,style));
HXLINE( 235)		 ::Dynamic _hx_tmp2 = cstyle->get_formatter();
HXDLIN( 235)		::utest::Assert_obj::isNull(_hx_tmp2,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),235,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testStyle",7f,e3,1f,4d)));
HXLINE( 236)		cstyle =  ::thx::text::table::CompositeStyle_obj::__new(::Array_obj< ::Dynamic>::__new(2)->init(0,style)->init(1,dstyle));
HXLINE( 237)		 ::Dynamic _hx_tmp3 = cstyle->get_formatter();
HXDLIN( 237)		::utest::Assert_obj::notNull(_hx_tmp3,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),237,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testStyle",7f,e3,1f,4d)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTable_obj,testStyle,(void))

void TestTable_obj::testCanvas(){
            	HX_STACK_FRAME("thx.text.TestTable","testCanvas",0x55f220b3,"thx.text.TestTable.testCanvas","thx/text/TestTable.hx",240,0x2913bc59)
            	HX_STACK_THIS(this)
HXLINE( 241)		HX_VARI(  ::thx::text::table::Canvas,canvas) =  ::thx::text::table::Canvas_obj::__new((int)3,(int)2);
HXLINE( 242)		::String _hx_tmp = canvas->toString();
HXDLIN( 242)		::utest::Assert_obj::equals(HX_("   \n   ",76,7a,a1,71),_hx_tmp,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),242,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testCanvas",ca,9a,36,d1)));
HXLINE( 243)		canvas->expand((int)4,(int)3);
HXLINE( 244)		::String _hx_tmp1 = canvas->toString();
HXDLIN( 244)		::utest::Assert_obj::equals(HX_("    \n    \n    ",c0,b3,34,3e),_hx_tmp1,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),244,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testCanvas",ca,9a,36,d1)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTable_obj,testCanvas,(void))

void TestTable_obj::testTableSize(){
            	HX_STACK_FRAME("thx.text.TestTable","testTableSize",0x52ab72f4,"thx.text.TestTable.testTableSize","thx/text/TestTable.hx",247,0x2913bc59)
            	HX_STACK_THIS(this)
HXLINE( 248)		Int _hx_tmp = this->table->get_rows();
HXDLIN( 248)		::utest::Assert_obj::equals((int)0,_hx_tmp,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),248,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testTableSize",3d,21,23,ed)));
HXLINE( 249)		Int _hx_tmp1 = this->table->get_cols();
HXDLIN( 249)		::utest::Assert_obj::equals((int)0,_hx_tmp1,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),249,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testTableSize",3d,21,23,ed)));
HXLINE( 250)		this->table->getCol((int)2);
HXLINE( 251)		Int _hx_tmp2 = this->table->get_cols();
HXDLIN( 251)		::utest::Assert_obj::equals((int)0,_hx_tmp2,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),251,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testTableSize",3d,21,23,ed)));
HXLINE( 252)		this->table->ensureCol((int)3);
HXLINE( 253)		Int _hx_tmp3 = this->table->get_cols();
HXDLIN( 253)		::utest::Assert_obj::equals((int)4,_hx_tmp3,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),253,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testTableSize",3d,21,23,ed)));
HXLINE( 254)		Int _hx_tmp4 = this->table->get_rows();
HXDLIN( 254)		::utest::Assert_obj::equals((int)0,_hx_tmp4,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),254,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testTableSize",3d,21,23,ed)));
HXLINE( 255)		this->table->ensureRow((int)1);
HXLINE( 256)		Int _hx_tmp5 = this->table->get_rows();
HXDLIN( 256)		::utest::Assert_obj::equals((int)2,_hx_tmp5,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),256,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testTableSize",3d,21,23,ed)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTable_obj,testTableSize,(void))

void TestTable_obj::testCellResizeTable(){
            	HX_STACK_FRAME("thx.text.TestTable","testCellResizeTable",0x04f50fbd,"thx.text.TestTable.testCellResizeTable","thx/text/TestTable.hx",259,0x2913bc59)
            	HX_STACK_THIS(this)
HXLINE( 260)		this->table->set(::thx::text::table::CellValueImpl_obj::IntCell((int)1),(int)3,(int)2,null());
HXLINE( 261)		Int _hx_tmp = this->table->get_cols();
HXDLIN( 261)		::utest::Assert_obj::equals((int)3,_hx_tmp,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),261,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testCellResizeTable",c6,1a,02,c5)));
HXLINE( 262)		Int _hx_tmp1 = this->table->get_rows();
HXDLIN( 262)		::utest::Assert_obj::equals((int)4,_hx_tmp1,null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),262,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testCellResizeTable",c6,1a,02,c5)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTable_obj,testCellResizeTable,(void))

void TestTable_obj::testIdentityOfCellsCreatedFromTable(){
            	HX_STACK_FRAME("thx.text.TestTable","testIdentityOfCellsCreatedFromTable",0xb1dc4c7d,"thx.text.TestTable.testIdentityOfCellsCreatedFromTable","thx/text/TestTable.hx",265,0x2913bc59)
            	HX_STACK_THIS(this)
HXLINE( 266)		HX_VARI(  ::thx::text::table::Cell,cell) = this->table->set(::thx::text::table::CellValueImpl_obj::IntCell((int)1),(int)3,(int)2,null());
HXLINE( 267)		 ::thx::text::table::Cell _hx_tmp = this->table->get((int)3,(int)2);
HXDLIN( 267)		::utest::Assert_obj::isTrue(hx::IsEq( cell,_hx_tmp ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),267,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromTable",86,b9,81,30)));
HXLINE( 269)		 ::thx::text::table::Cell _hx_tmp1 = this->table->getRow((int)3)->get((int)2);
HXDLIN( 269)		::utest::Assert_obj::isTrue(hx::IsEq( cell,_hx_tmp1 ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),269,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromTable",86,b9,81,30)));
HXLINE( 270)		 ::thx::text::table::Cell _hx_tmp2 = this->table->getCol((int)2)->get((int)3);
HXDLIN( 270)		::utest::Assert_obj::isTrue(hx::IsEq( cell,_hx_tmp2 ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),270,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromTable",86,b9,81,30)));
HXLINE( 272)		 ::thx::text::table::Row _hx_tmp3 = this->table->getRow((int)3);
HXDLIN( 272)		::utest::Assert_obj::isTrue(hx::IsEq( cell->row,_hx_tmp3 ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),272,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromTable",86,b9,81,30)));
HXLINE( 273)		 ::thx::text::table::Col _hx_tmp4 = this->table->getCol((int)2);
HXDLIN( 273)		::utest::Assert_obj::isTrue(hx::IsEq( cell->col,_hx_tmp4 ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),273,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromTable",86,b9,81,30)));
HXLINE( 275)		::utest::Assert_obj::isTrue(hx::IsEq( cell->table,this->table ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),275,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromTable",86,b9,81,30)));
HXLINE( 276)		::utest::Assert_obj::isTrue(hx::IsEq( cell->row->table,this->table ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),276,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromTable",86,b9,81,30)));
HXLINE( 277)		::utest::Assert_obj::isTrue(hx::IsEq( cell->col->table,this->table ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),277,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromTable",86,b9,81,30)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTable_obj,testIdentityOfCellsCreatedFromTable,(void))

void TestTable_obj::testIdentityOfCellsCreatedFromRow(){
            	HX_STACK_FRAME("thx.text.TestTable","testIdentityOfCellsCreatedFromRow",0x51642cc9,"thx.text.TestTable.testIdentityOfCellsCreatedFromRow","thx/text/TestTable.hx",280,0x2913bc59)
            	HX_STACK_THIS(this)
HXLINE( 281)		HX_VARI(  ::thx::text::table::Row,row) = this->table->ensureRow((int)3);
HXDLIN( 281)		HX_VARI(  ::thx::text::table::Cell,cell) = row->set(::thx::text::table::CellValueImpl_obj::IntCell((int)1),(int)2,null());
HXLINE( 283)		 ::thx::text::table::Cell _hx_tmp = this->table->get((int)3,(int)2);
HXDLIN( 283)		::utest::Assert_obj::isTrue(hx::IsEq( cell,_hx_tmp ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),283,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromRow",92,15,e7,3a)));
HXLINE( 285)		 ::thx::text::table::Cell _hx_tmp1 = this->table->getRow((int)3)->get((int)2);
HXDLIN( 285)		::utest::Assert_obj::isTrue(hx::IsEq( cell,_hx_tmp1 ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),285,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromRow",92,15,e7,3a)));
HXLINE( 286)		 ::thx::text::table::Cell _hx_tmp2 = this->table->getCol((int)2)->get((int)3);
HXDLIN( 286)		::utest::Assert_obj::isTrue(hx::IsEq( cell,_hx_tmp2 ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),286,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromRow",92,15,e7,3a)));
HXLINE( 288)		 ::thx::text::table::Row _hx_tmp3 = this->table->getRow((int)3);
HXDLIN( 288)		::utest::Assert_obj::isTrue(hx::IsEq( cell->row,_hx_tmp3 ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),288,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromRow",92,15,e7,3a)));
HXLINE( 289)		 ::thx::text::table::Col _hx_tmp4 = this->table->getCol((int)2);
HXDLIN( 289)		::utest::Assert_obj::isTrue(hx::IsEq( cell->col,_hx_tmp4 ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),289,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromRow",92,15,e7,3a)));
HXLINE( 291)		::utest::Assert_obj::isTrue(hx::IsEq( cell->table,this->table ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),291,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromRow",92,15,e7,3a)));
HXLINE( 292)		::utest::Assert_obj::isTrue(hx::IsEq( cell->row->table,this->table ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),292,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromRow",92,15,e7,3a)));
HXLINE( 293)		::utest::Assert_obj::isTrue(hx::IsEq( cell->col->table,this->table ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),293,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromRow",92,15,e7,3a)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTable_obj,testIdentityOfCellsCreatedFromRow,(void))

void TestTable_obj::testIdentityOfCellsCreatedFromCol(){
            	HX_STACK_FRAME("thx.text.TestTable","testIdentityOfCellsCreatedFromCol",0x5158caef,"thx.text.TestTable.testIdentityOfCellsCreatedFromCol","thx/text/TestTable.hx",296,0x2913bc59)
            	HX_STACK_THIS(this)
HXLINE( 297)		HX_VARI(  ::thx::text::table::Col,col) = this->table->ensureCol((int)2);
HXDLIN( 297)		HX_VARI(  ::thx::text::table::Cell,cell) = col->set(::thx::text::table::CellValueImpl_obj::IntCell((int)1),(int)3,null());
HXLINE( 299)		 ::thx::text::table::Cell _hx_tmp = this->table->get((int)3,(int)2);
HXDLIN( 299)		::utest::Assert_obj::isTrue(hx::IsEq( cell,_hx_tmp ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),299,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromCol",b8,b3,db,3a)));
HXLINE( 301)		 ::thx::text::table::Cell _hx_tmp1 = this->table->getRow((int)3)->get((int)2);
HXDLIN( 301)		::utest::Assert_obj::isTrue(hx::IsEq( cell,_hx_tmp1 ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),301,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromCol",b8,b3,db,3a)));
HXLINE( 302)		 ::thx::text::table::Cell _hx_tmp2 = this->table->getCol((int)2)->get((int)3);
HXDLIN( 302)		::utest::Assert_obj::isTrue(hx::IsEq( cell,_hx_tmp2 ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),302,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromCol",b8,b3,db,3a)));
HXLINE( 304)		 ::thx::text::table::Row _hx_tmp3 = this->table->getRow((int)3);
HXDLIN( 304)		::utest::Assert_obj::isTrue(hx::IsEq( cell->row,_hx_tmp3 ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),304,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromCol",b8,b3,db,3a)));
HXLINE( 305)		 ::thx::text::table::Col _hx_tmp4 = this->table->getCol((int)2);
HXDLIN( 305)		::utest::Assert_obj::isTrue(hx::IsEq( cell->col,_hx_tmp4 ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),305,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromCol",b8,b3,db,3a)));
HXLINE( 307)		::utest::Assert_obj::isTrue(hx::IsEq( cell->table,this->table ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),307,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromCol",b8,b3,db,3a)));
HXLINE( 308)		::utest::Assert_obj::isTrue(hx::IsEq( cell->row->table,this->table ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),308,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromCol",b8,b3,db,3a)));
HXLINE( 309)		::utest::Assert_obj::isTrue(hx::IsEq( cell->col->table,this->table ),null(),hx::SourceInfo(HX_("TestTable.hx",02,fa,bc,88),309,HX_("thx.text.TestTable",e5,2f,39,a1),HX_("testIdentityOfCellsCreatedFromCol",b8,b3,db,3a)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTable_obj,testIdentityOfCellsCreatedFromCol,(void))


TestTable_obj::TestTable_obj()
{
}

void TestTable_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TestTable);
	HX_MARK_MEMBER_NAME(table,"table");
	HX_MARK_END_CLASS();
}

void TestTable_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(table,"table");
}

hx::Val TestTable_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"table") ) { return hx::Val( table); }
		if (HX_FIELD_EQ(inName,"setup") ) { return hx::Val( setup_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"oneCell") ) { return hx::Val( oneCell_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"testAlign") ) { return hx::Val( testAlign_dyn()); }
		if (HX_FIELD_EQ(inName,"testStyle") ) { return hx::Val( testStyle_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testRender") ) { return hx::Val( testRender_dyn()); }
		if (HX_FIELD_EQ(inName,"testCanvas") ) { return hx::Val( testCanvas_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testSpanDown") ) { return hx::Val( testSpanDown_dyn()); }
		if (HX_FIELD_EQ(inName,"testSpanning") ) { return hx::Val( testSpanning_dyn()); }
		if (HX_FIELD_EQ(inName,"testFromData") ) { return hx::Val( testFromData_dyn()); }
		if (HX_FIELD_EQ(inName,"testSequence") ) { return hx::Val( testSequence_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"testSpanRight") ) { return hx::Val( testSpanRight_dyn()); }
		if (HX_FIELD_EQ(inName,"testTableSize") ) { return hx::Val( testTableSize_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"testFromObjects") ) { return hx::Val( testFromObjects_dyn()); }
		if (HX_FIELD_EQ(inName,"testPaintBorder") ) { return hx::Val( testPaintBorder_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"testAlignOnSymbol") ) { return hx::Val( testAlignOnSymbol_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"testCellResizeTable") ) { return hx::Val( testCellResizeTable_dyn()); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"testAlignOnSymbolVertical") ) { return hx::Val( testAlignOnSymbolVertical_dyn()); }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"testIdentityOfCellsCreatedFromRow") ) { return hx::Val( testIdentityOfCellsCreatedFromRow_dyn()); }
		if (HX_FIELD_EQ(inName,"testIdentityOfCellsCreatedFromCol") ) { return hx::Val( testIdentityOfCellsCreatedFromCol_dyn()); }
		break;
	case 35:
		if (HX_FIELD_EQ(inName,"testIdentityOfCellsCreatedFromTable") ) { return hx::Val( testIdentityOfCellsCreatedFromTable_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestTable_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"table") ) { table=inValue.Cast<  ::thx::text::Table >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestTable_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("table","\x0e","\xb8","\xe3","\x0a"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestTable_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::thx::text::Table*/ ,(int)offsetof(TestTable_obj,table),HX_HCSTRING("table","\x0e","\xb8","\xe3","\x0a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestTable_obj_sStaticStorageInfo = 0;
#endif

static ::String TestTable_obj_sMemberFields[] = {
	HX_HCSTRING("table","\x0e","\xb8","\xe3","\x0a"),
	HX_HCSTRING("setup","\x7d","\xae","\x2f","\x7a"),
	HX_HCSTRING("testSpanRight","\x00","\xc2","\x33","\x35"),
	HX_HCSTRING("testSpanDown","\xbe","\x52","\x0d","\xa2"),
	HX_HCSTRING("testSpanning","\x70","\xb3","\xcb","\xbd"),
	HX_HCSTRING("testFromData","\x26","\x4b","\x36","\x13"),
	HX_HCSTRING("testFromObjects","\x58","\xb9","\x5e","\x6f"),
	HX_HCSTRING("testPaintBorder","\xf8","\xef","\x6e","\x1b"),
	HX_HCSTRING("testRender","\x48","\xb1","\x1d","\x1e"),
	HX_HCSTRING("oneCell","\x28","\x13","\x1f","\x57"),
	HX_HCSTRING("testAlign","\x13","\x95","\x93","\xea"),
	HX_HCSTRING("testAlignOnSymbol","\x0a","\xc2","\xd7","\x07"),
	HX_HCSTRING("testAlignOnSymbolVertical","\xa0","\x54","\x9f","\xa9"),
	HX_HCSTRING("testSequence","\xb3","\x44","\xf4","\x5b"),
	HX_HCSTRING("testStyle","\x7f","\xe3","\x1f","\x4d"),
	HX_HCSTRING("testCanvas","\xca","\x9a","\x36","\xd1"),
	HX_HCSTRING("testTableSize","\x3d","\x21","\x23","\xed"),
	HX_HCSTRING("testCellResizeTable","\xc6","\x1a","\x02","\xc5"),
	HX_HCSTRING("testIdentityOfCellsCreatedFromTable","\x86","\xb9","\x81","\x30"),
	HX_HCSTRING("testIdentityOfCellsCreatedFromRow","\x92","\x15","\xe7","\x3a"),
	HX_HCSTRING("testIdentityOfCellsCreatedFromCol","\xb8","\xb3","\xdb","\x3a"),
	::String(null()) };

static void TestTable_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestTable_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestTable_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestTable_obj::__mClass,"__mClass");
};

#endif

hx::Class TestTable_obj::__mClass;

void TestTable_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.text.TestTable","\xe5","\x2f","\x39","\xa1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestTable_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestTable_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestTable_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestTable_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestTable_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestTable_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace text
