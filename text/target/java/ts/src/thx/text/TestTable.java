// Generated by Haxe 3.3.0
package thx.text;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestTable extends haxe.lang.HxObject
{
	public TestTable(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestTable()
	{
		//line 11 "/shared/text/test/thx/text/TestTable.hx"
		thx.text.TestTable.__hx_ctor_thx_text_TestTable(this);
	}
	
	
	public static void __hx_ctor_thx_text_TestTable(thx.text.TestTable __temp_me153)
	{
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 10 "/shared/text/test/thx/text/TestTable.hx"
		return new thx.text.TestTable(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 10 "/shared/text/test/thx/text/TestTable.hx"
		return new thx.text.TestTable();
	}
	
	
	public thx.text.Table table;
	
	public void setup()
	{
		//line 15 "/shared/text/test/thx/text/TestTable.hx"
		this.table = new thx.text.Table();
	}
	
	
	public void testSpanRight()
	{
		//line 19 "/shared/text/test/thx/text/TestTable.hx"
		this.table.style.set_type(thx.text.table.CellType.Body);
		//line 20 "/shared/text/test/thx/text/TestTable.hx"
		this.table.style.setAlign(thx.text.table.HAlign.Center);
		//line 21 "/shared/text/test/thx/text/TestTable.hx"
		this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.IntCell(1)) ), 0, 0, thx.text.table.Span.SpanRight(2));
		//line 22 "/shared/text/test/thx/text/TestTable.hx"
		this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.IntCell(2)) ), 1, 0, null);
		//line 23 "/shared/text/test/thx/text/TestTable.hx"
		this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.IntCell(3)) ), 1, 1, null);
		//line 24 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.equals("\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   1   \u2502\n\u251c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2524\n\u2502 2 \u2502 3 \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518", this.table.toString(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testSpanRight"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (24) )) )}));
	}
	
	
	public void testSpanDown()
	{
		//line 33 "/shared/text/test/thx/text/TestTable.hx"
		this.table.style.set_type(thx.text.table.CellType.Body);
		//line 34 "/shared/text/test/thx/text/TestTable.hx"
		this.table.style.setAlign(thx.text.table.HAlign.Center);
		//line 35 "/shared/text/test/thx/text/TestTable.hx"
		this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.IntCell(1)) ), 0, 0, thx.text.table.Span.SpanDown(2));
		//line 36 "/shared/text/test/thx/text/TestTable.hx"
		this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.IntCell(2)) ), 0, 1, null);
		//line 37 "/shared/text/test/thx/text/TestTable.hx"
		this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.IntCell(3)) ), 1, 1, null);
		//line 38 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.equals("\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u2502 1 \u2502 2 \u2502\n\u2502   \u251c\u2500\u2500\u2500\u2524\n\u2502   \u2502 3 \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518", this.table.toString(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testSpanDown"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (38) )) )}));
	}
	
	
	public void testSpanning()
	{
		//line 47 "/shared/text/test/thx/text/TestTable.hx"
		this.table.style.set_type(thx.text.table.CellType.Body);
		//line 48 "/shared/text/test/thx/text/TestTable.hx"
		this.table.style.setAlign(thx.text.table.HAlign.Center);
		//line 49 "/shared/text/test/thx/text/TestTable.hx"
		this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.StringCell("0/0")) ), 0, 0, null);
		//line 50 "/shared/text/test/thx/text/TestTable.hx"
		this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.StringCell("0/1")) ), 0, 1, thx.text.table.Span.SpanBoth(2, 2));
		//line 51 "/shared/text/test/thx/text/TestTable.hx"
		this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.StringCell("0/3")) ), 0, 3, thx.text.table.Span.SpanDown(2));
		//line 52 "/shared/text/test/thx/text/TestTable.hx"
		this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.StringCell("1/0")) ), 1, 0, null);
		//line 53 "/shared/text/test/thx/text/TestTable.hx"
		this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.StringCell("2/0")) ), 2, 0, thx.text.table.Span.SpanRight(2));
		//line 54 "/shared/text/test/thx/text/TestTable.hx"
		this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.StringCell("2/2")) ), 2, 2, thx.text.table.Span.SpanRight(2));
		//line 56 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.equals("\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 0/0 \u2502 0/1 \u2502 0/3 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2524     \u2502     \u2502\n\u2502 1/0 \u2502     \u2502     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u252c\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  2/0   \u2502  2/2   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", this.table.toString(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testSpanning"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (56) )) )}));
	}
	
	
	public void testFromData()
	{
		//line 67 "/shared/text/test/thx/text/TestTable.hx"
		haxe.root.Array<haxe.root.Array> data = new haxe.root.Array<haxe.root.Array>(new haxe.root.Array[]{new haxe.root.Array(new java.lang.Object[]{"rank", "country", "US $"}), new haxe.root.Array(new java.lang.Object[]{1, "Luxembourg", 113533}), new haxe.root.Array(new java.lang.Object[]{2, "Qatar", 98329}), new haxe.root.Array(new java.lang.Object[]{3, "Norway", 97255}), new haxe.root.Array(new java.lang.Object[]{4, "Switzerland", 81161}), new haxe.root.Array(new java.lang.Object[]{5, "United Arab  Emirates", 67008}), new haxe.root.Array(new java.lang.Object[]{6, "Australia", 65477}), new haxe.root.Array(new java.lang.Object[]{7, "Denmark", 59928}), new haxe.root.Array(new java.lang.Object[]{8, "Sweden", 56956}), new haxe.root.Array(new java.lang.Object[]{9, "Canada", 50436}), new haxe.root.Array(new java.lang.Object[]{10, "Netherlands", 50355})});
		//line 80 "/shared/text/test/thx/text/TestTable.hx"
		thx.text.Table table = thx.text.Table.fromData(data, null, "average earnings");
		//line 81 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.equals("\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503            average earnings            \u2503\n\u2523\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252b\n\u2503 rank \u2503 country               \u2503 US $    \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502    1 \u2502 Luxembourg            \u2502 113,533 \u2502\n\u2502    2 \u2502 Qatar                 \u2502  98,329 \u2502\n\u2502    3 \u2502 Norway                \u2502  97,255 \u2502\n\u2502    4 \u2502 Switzerland           \u2502  81,161 \u2502\n\u2502    5 \u2502 United Arab  Emirates \u2502  67,008 \u2502\n\u2502    6 \u2502 Australia             \u2502  65,477 \u2502\n\u2502    7 \u2502 Denmark               \u2502  59,928 \u2502\n\u2502    8 \u2502 Sweden                \u2502  56,956 \u2502\n\u2502    9 \u2502 Canada                \u2502  50,436 \u2502\n\u2502   10 \u2502 Netherlands           \u2502  50,355 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", table.toString(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testFromData"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (81) )) )}));
	}
	
	
	public void testFromObjects()
	{
		//line 101 "/shared/text/test/thx/text/TestTable.hx"
		haxe.root.Array<java.lang.Object> data = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{new haxe.lang.DynamicObject(new java.lang.String[]{"code", "name"}, new java.lang.Object[]{"AD", "Andorra"}, new java.lang.String[]{"latitude", "longitude"}, new double[]{((double) (42.5) ), ((double) (1.6) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"code", "name"}, new java.lang.Object[]{"AE", "United Arab Emirates"}, new java.lang.String[]{"latitude", "longitude"}, new double[]{((double) (23.4) ), ((double) (53.8) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"code", "name"}, new java.lang.Object[]{"AF", "Afghanistan"}, new java.lang.String[]{"latitude", "longitude"}, new double[]{((double) (33.9) ), ((double) (67.7) )})});
		//line 117 "/shared/text/test/thx/text/TestTable.hx"
		thx.text.Table table = thx.text.Table.fromObjects(data, "countries");
		//line 118 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.equals("\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503                     countries                      \u2503\n\u2523\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252b\n\u2503 code \u2503 latitude \u2503 longitude \u2503 name                 \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 AD   \u2502     42.5 \u2502       1.6 \u2502 Andorra              \u2502\n\u2502 AE   \u2502     23.4 \u2502      53.8 \u2502 United Arab Emirates \u2502\n\u2502 AF   \u2502     33.9 \u2502      67.7 \u2502 Afghanistan          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", table.toString(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testFromObjects"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (118) )) )}));
	}
	
	
	public void testPaintBorder()
	{
		//line 131 "/shared/text/test/thx/text/TestTable.hx"
		thx.text.table.Canvas canvas = new thx.text.table.Canvas(3, 3);
		//line 132 "/shared/text/test/thx/text/TestTable.hx"
		canvas.paintBorder(thx.text.table.CellType.Body, 0, 0, 3, 3);
		//line 133 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.equals("\u250c\u2500\u2510\n\u2502 \u2502\n\u2514\u2500\u2518", canvas.toString(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testPaintBorder"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (133) )) )}));
		//line 135 "/shared/text/test/thx/text/TestTable.hx"
		canvas = new thx.text.table.Canvas(4, 4);
		//line 136 "/shared/text/test/thx/text/TestTable.hx"
		canvas.paintBorder(thx.text.table.CellType.Body, 1, 0, 3, 3);
		//line 137 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.equals(" \u250c\u2500\u2510\n \u2502 \u2502\n \u2514\u2500\u2518\n    ", canvas.toString(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testPaintBorder"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (137) )) )}));
		//line 139 "/shared/text/test/thx/text/TestTable.hx"
		canvas = new thx.text.table.Canvas(4, 4);
		//line 140 "/shared/text/test/thx/text/TestTable.hx"
		canvas.paintBorder(thx.text.table.CellType.Body, 1, 1, 3, 3);
		//line 141 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.equals("    \n \u250c\u2500\u2510\n \u2502 \u2502\n \u2514\u2500\u2518", canvas.toString(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testPaintBorder"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (141) )) )}));
	}
	
	
	public void testRender()
	{
		//line 145 "/shared/text/test/thx/text/TestTable.hx"
		thx.text.table.Renderer renderer = new thx.text.table.Renderer(((java.lang.Object) (null) ));
		//line 146 "/shared/text/test/thx/text/TestTable.hx"
		this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.BoolCell(true)) ), 0, 1, null);
		//line 147 "/shared/text/test/thx/text/TestTable.hx"
		this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.StringCell("Franco")) ), 0, 0, null);
		//line 148 "/shared/text/test/thx/text/TestTable.hx"
		this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.BoolCell(false)) ), 0, 2, null);
		//line 149 "/shared/text/test/thx/text/TestTable.hx"
		this.table.set(thx.text.table.CellValueImpl.DateTimeCell(thx._DateTime.DateTime_Impl_.fromDate(haxe.root.Date.fromString("2015-11-19"))), 1, 0, null);
		//line 150 "/shared/text/test/thx/text/TestTable.hx"
		this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.IntCell(200)) ), 1, 2, null);
		//line 151 "/shared/text/test/thx/text/TestTable.hx"
		this.table.style.set_type(thx.text.table.CellType.Body);
		//line 152 "/shared/text/test/thx/text/TestTable.hx"
		this.table.getRow(0).style.set_type(thx.text.table.CellType.Header);
		//line 153 "/shared/text/test/thx/text/TestTable.hx"
		java.lang.String s = renderer.render(this.table);
		//line 154 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.equals("\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Franco     \u2503 \u2713 \u2503  \u2715  \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 11/19/2015 \u2502   \u2502 200 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518", s, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testRender"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (154) )) )}));
	}
	
	
	public void oneCell(thx.text.table.CellValueImpl value, int width)
	{
		//line 163 "/shared/text/test/thx/text/TestTable.hx"
		this.table = new thx.text.Table();
		//line 164 "/shared/text/test/thx/text/TestTable.hx"
		this.table.style.set_type(thx.text.table.CellType.Body);
		//line 165 "/shared/text/test/thx/text/TestTable.hx"
		this.table.style.set_minWidth(width);
		//line 166 "/shared/text/test/thx/text/TestTable.hx"
		this.table.set(value, 0, 0, null);
	}
	
	
	public void testAlign()
	{
		//line 170 "/shared/text/test/thx/text/TestTable.hx"
		this.oneCell(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.IntCell(0)) ), 8);
		//line 171 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.equals("\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", this.table.toString(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testAlign"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (171) )) )}));
		//line 175 "/shared/text/test/thx/text/TestTable.hx"
		this.oneCell(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.StringCell("0")) ), 8);
		//line 176 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.equals("\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 0        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", this.table.toString(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testAlign"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (176) )) )}));
		//line 180 "/shared/text/test/thx/text/TestTable.hx"
		this.oneCell(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.BoolCell(true)) ), 8);
		//line 181 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.equals("\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    \u2713     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", this.table.toString(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testAlign"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (181) )) )}));
		//line 185 "/shared/text/test/thx/text/TestTable.hx"
		this.oneCell(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.FloatCell(0.5)) ), 8);
		//line 186 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.equals("\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      0.5 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", this.table.toString(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testAlign"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (186) )) )}));
	}
	
	
	public void testAlignOnSymbol()
	{
		//line 193 "/shared/text/test/thx/text/TestTable.hx"
		this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.FloatCell(0.001)) ), 0, 0, null);
		//line 194 "/shared/text/test/thx/text/TestTable.hx"
		this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.FloatCell(2.0)) ), 0, 1, null);
		//line 195 "/shared/text/test/thx/text/TestTable.hx"
		this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.IntCell(3333)) ), 0, 2, null);
		//line 196 "/shared/text/test/thx/text/TestTable.hx"
		this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.FloatCell(12.5)) ), 0, 3, null);
		//line 197 "/shared/text/test/thx/text/TestTable.hx"
		this.table.style.set_type(thx.text.table.CellType.Body);
		//line 198 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.equals("\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 0.001 \u2502 2.0 \u2502 3,333 \u2502 12.5 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518", this.table.toString(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testAlignOnSymbol"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (198) )) )}));
	}
	
	
	public void testAlignOnSymbolVertical()
	{
		//line 205 "/shared/text/test/thx/text/TestTable.hx"
		this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.FloatCell(0.001)) ), 0, 0, null);
		//line 206 "/shared/text/test/thx/text/TestTable.hx"
		this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.FloatCell(2.0)) ), 1, 0, null);
		//line 207 "/shared/text/test/thx/text/TestTable.hx"
		this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.IntCell(3333)) ), 2, 0, null);
		//line 208 "/shared/text/test/thx/text/TestTable.hx"
		this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.FloatCell(12.5)) ), 3, 0, null);
		//line 209 "/shared/text/test/thx/text/TestTable.hx"
		this.table.style.set_type(thx.text.table.CellType.Body);
		//line 210 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.equals("\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502     0.001 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502     2.0   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 3,333     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502    12.5   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", this.table.toString(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testAlignOnSymbolVertical"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (210) )) )}));
	}
	
	
	public void testSequence()
	{
		//line 223 "/shared/text/test/thx/text/TestTable.hx"
		thx.text.table.Cell last = this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.BoolCell(true)) ), 0, 1, null);
		//line 224 "/shared/text/test/thx/text/TestTable.hx"
		thx.text.table.Cell first = this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.BoolCell(false)) ), 0, 0, null);
		//line 225 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.equals(1, last.col.index, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testSequence"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (225) )) )}));
		//line 226 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.equals(0, first.col.index, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testSequence"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (226) )) )}));
	}
	
	
	public void testStyle()
	{
		//line 230 "/shared/text/test/thx/text/TestTable.hx"
		thx.text.table.Style style = new thx.text.table.Style();
		//line 231 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.isNull(style.get_formatter(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testStyle"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (231) )) )}));
		//line 232 "/shared/text/test/thx/text/TestTable.hx"
		thx.text.table.DefaultStyle dstyle = new thx.text.table.DefaultStyle();
		//line 233 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.notNull(dstyle.get_formatter(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testStyle"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (233) )) )}));
		//line 234 "/shared/text/test/thx/text/TestTable.hx"
		thx.text.table.CompositeStyle cstyle = new thx.text.table.CompositeStyle(((haxe.root.Array<thx.text.table.IStyle>) (new haxe.root.Array<thx.text.table.IStyle>(new thx.text.table.IStyle[]{style})) ));
		//line 235 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.isNull(cstyle.get_formatter(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testStyle"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (235) )) )}));
		//line 236 "/shared/text/test/thx/text/TestTable.hx"
		cstyle = new thx.text.table.CompositeStyle(((haxe.root.Array<thx.text.table.IStyle>) (new haxe.root.Array<thx.text.table.IStyle>(new thx.text.table.IStyle[]{style, dstyle})) ));
		//line 237 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.notNull(cstyle.get_formatter(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testStyle"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (237) )) )}));
	}
	
	
	public void testCanvas()
	{
		//line 241 "/shared/text/test/thx/text/TestTable.hx"
		thx.text.table.Canvas canvas = new thx.text.table.Canvas(3, 2);
		//line 242 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.equals("   \n   ", canvas.toString(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testCanvas"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (242) )) )}));
		//line 243 "/shared/text/test/thx/text/TestTable.hx"
		canvas.expand(4, 3);
		//line 244 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.equals("    \n    \n    ", canvas.toString(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testCanvas"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (244) )) )}));
	}
	
	
	public void testTableSize()
	{
		//line 248 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.equals(0, this.table.get_rows(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testTableSize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (248) )) )}));
		//line 249 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.equals(0, this.table.get_cols(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testTableSize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (249) )) )}));
		//line 250 "/shared/text/test/thx/text/TestTable.hx"
		this.table.getCol(2);
		//line 251 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.equals(0, this.table.get_cols(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testTableSize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (251) )) )}));
		//line 252 "/shared/text/test/thx/text/TestTable.hx"
		this.table.ensureCol(3);
		//line 253 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.equals(4, this.table.get_cols(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testTableSize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (253) )) )}));
		//line 254 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.equals(0, this.table.get_rows(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testTableSize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (254) )) )}));
		//line 255 "/shared/text/test/thx/text/TestTable.hx"
		this.table.ensureRow(1);
		//line 256 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.equals(2, this.table.get_rows(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testTableSize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (256) )) )}));
	}
	
	
	public void testCellResizeTable()
	{
		//line 260 "/shared/text/test/thx/text/TestTable.hx"
		this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.IntCell(1)) ), 3, 2, null);
		//line 261 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.equals(3, this.table.get_cols(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testCellResizeTable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (261) )) )}));
		//line 262 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.equals(4, this.table.get_rows(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testCellResizeTable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (262) )) )}));
	}
	
	
	public void testIdentityOfCellsCreatedFromTable()
	{
		//line 266 "/shared/text/test/thx/text/TestTable.hx"
		thx.text.table.Cell cell = this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.IntCell(1)) ), 3, 2, null);
		//line 267 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.isTrue(( cell == this.table.get(3, 2) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromTable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (267) )) )}));
		//line 269 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.isTrue(( cell == this.table.getRow(3).get(2) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromTable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (269) )) )}));
		//line 270 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.isTrue(( cell == this.table.getCol(2).get(3) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromTable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (270) )) )}));
		//line 272 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.isTrue(( cell.row == this.table.getRow(3) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromTable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (272) )) )}));
		//line 273 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.isTrue(( cell.col == this.table.getCol(2) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromTable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (273) )) )}));
		//line 275 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.isTrue(( cell.table == this.table ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromTable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (275) )) )}));
		//line 276 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.isTrue(( cell.row.table == this.table ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromTable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (276) )) )}));
		//line 277 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.isTrue(( cell.col.table == this.table ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromTable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (277) )) )}));
	}
	
	
	public void testIdentityOfCellsCreatedFromRow()
	{
		//line 281 "/shared/text/test/thx/text/TestTable.hx"
		thx.text.table.Row row = this.table.ensureRow(3);
		//line 281 "/shared/text/test/thx/text/TestTable.hx"
		thx.text.table.Cell cell = row.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.IntCell(1)) ), 2, null);
		//line 283 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.isTrue(( cell == this.table.get(3, 2) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromRow"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (283) )) )}));
		//line 285 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.isTrue(( cell == this.table.getRow(3).get(2) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromRow"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (285) )) )}));
		//line 286 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.isTrue(( cell == this.table.getCol(2).get(3) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromRow"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (286) )) )}));
		//line 288 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.isTrue(( cell.row == this.table.getRow(3) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromRow"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (288) )) )}));
		//line 289 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.isTrue(( cell.col == this.table.getCol(2) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromRow"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (289) )) )}));
		//line 291 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.isTrue(( cell.table == this.table ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromRow"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (291) )) )}));
		//line 292 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.isTrue(( cell.row.table == this.table ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromRow"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (292) )) )}));
		//line 293 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.isTrue(( cell.col.table == this.table ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromRow"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (293) )) )}));
	}
	
	
	public void testIdentityOfCellsCreatedFromCol()
	{
		//line 297 "/shared/text/test/thx/text/TestTable.hx"
		thx.text.table.Col col = this.table.ensureCol(2);
		//line 297 "/shared/text/test/thx/text/TestTable.hx"
		thx.text.table.Cell cell = col.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.IntCell(1)) ), 3, null);
		//line 299 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.isTrue(( cell == this.table.get(3, 2) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromCol"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (299) )) )}));
		//line 301 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.isTrue(( cell == this.table.getRow(3).get(2) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromCol"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (301) )) )}));
		//line 302 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.isTrue(( cell == this.table.getCol(2).get(3) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromCol"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (302) )) )}));
		//line 304 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.isTrue(( cell.row == this.table.getRow(3) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromCol"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (304) )) )}));
		//line 305 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.isTrue(( cell.col == this.table.getCol(2) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromCol"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (305) )) )}));
		//line 307 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.isTrue(( cell.table == this.table ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromCol"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (307) )) )}));
		//line 308 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.isTrue(( cell.row.table == this.table ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromCol"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (308) )) )}));
		//line 309 "/shared/text/test/thx/text/TestTable.hx"
		utest.Assert.isTrue(( cell.col.table == this.table ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromCol"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (309) )) )}));
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 10 "/shared/text/test/thx/text/TestTable.hx"
		{
			//line 10 "/shared/text/test/thx/text/TestTable.hx"
			boolean __temp_executeDef1 = true;
			//line 10 "/shared/text/test/thx/text/TestTable.hx"
			switch (field.hashCode())
			{
				case 110115790:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("table")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.table = ((thx.text.Table) (value) );
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return value;
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
			}
			
			//line 10 "/shared/text/test/thx/text/TestTable.hx"
			if (__temp_executeDef1) 
			{
				//line 10 "/shared/text/test/thx/text/TestTable.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 10 "/shared/text/test/thx/text/TestTable.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 10 "/shared/text/test/thx/text/TestTable.hx"
		{
			//line 10 "/shared/text/test/thx/text/TestTable.hx"
			boolean __temp_executeDef1 = true;
			//line 10 "/shared/text/test/thx/text/TestTable.hx"
			switch (field.hashCode())
			{
				case 341786168:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testIdentityOfCellsCreatedFromCol")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testIdentityOfCellsCreatedFromCol")) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 110115790:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("table")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return this.table;
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 341800594:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testIdentityOfCellsCreatedFromRow")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testIdentityOfCellsCreatedFromRow")) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 109329021:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("setup")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "setup")) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 2054269574:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testIdentityOfCellsCreatedFromTable")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testIdentityOfCellsCreatedFromTable")) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 13809792:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testSpanRight")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSpanRight")) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case -545076794:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testCellResizeTable")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCellResizeTable")) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case -1523985986:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testSpanDown")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSpanDown")) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case -1318856579:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testTableSize")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testTableSize")) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case -1522740816:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testSpanning")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSpanning")) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 1252028554:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testCanvas")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCanvas")) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case -530805466:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testFromData")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFromData")) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case -1191185345:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testStyle")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testStyle")) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 2036164120:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testFromObjects")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFromObjects")) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 2063887987:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testSequence")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSequence")) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 1856654904:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testPaintBorder")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testPaintBorder")) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 481164448:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testAlignOnSymbolVertical")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testAlignOnSymbolVertical")) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 1685142728:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testRender")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testRender")) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 2121653002:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testAlignOnSymbol")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testAlignOnSymbol")) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case -1321727768:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("oneCell")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "oneCell")) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case -1208062573:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testAlign")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testAlign")) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
			}
			
			//line 10 "/shared/text/test/thx/text/TestTable.hx"
			if (__temp_executeDef1) 
			{
				//line 10 "/shared/text/test/thx/text/TestTable.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 10 "/shared/text/test/thx/text/TestTable.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 10 "/shared/text/test/thx/text/TestTable.hx"
		{
			//line 10 "/shared/text/test/thx/text/TestTable.hx"
			boolean __temp_executeDef1 = true;
			//line 10 "/shared/text/test/thx/text/TestTable.hx"
			switch (field.hashCode())
			{
				case 341786168:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testIdentityOfCellsCreatedFromCol")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.testIdentityOfCellsCreatedFromCol();
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 109329021:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("setup")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.setup();
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 341800594:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testIdentityOfCellsCreatedFromRow")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.testIdentityOfCellsCreatedFromRow();
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 13809792:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testSpanRight")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.testSpanRight();
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 2054269574:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testIdentityOfCellsCreatedFromTable")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.testIdentityOfCellsCreatedFromTable();
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case -1523985986:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testSpanDown")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.testSpanDown();
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case -545076794:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testCellResizeTable")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.testCellResizeTable();
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case -1522740816:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testSpanning")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.testSpanning();
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case -1318856579:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testTableSize")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.testTableSize();
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case -530805466:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testFromData")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.testFromData();
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 1252028554:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testCanvas")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.testCanvas();
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 2036164120:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testFromObjects")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.testFromObjects();
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case -1191185345:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testStyle")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.testStyle();
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 1856654904:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testPaintBorder")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.testPaintBorder();
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 2063887987:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testSequence")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.testSequence();
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 1685142728:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testRender")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.testRender();
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 481164448:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testAlignOnSymbolVertical")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.testAlignOnSymbolVertical();
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case -1321727768:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("oneCell")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.oneCell(((thx.text.table.CellValueImpl) (dynargs.__get(0)) ), ((int) (haxe.lang.Runtime.toInt(dynargs.__get(1))) ));
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 2121653002:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testAlignOnSymbol")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.testAlignOnSymbol();
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case -1208062573:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testAlign")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.testAlign();
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
			}
			
			//line 10 "/shared/text/test/thx/text/TestTable.hx"
			if (__temp_executeDef1) 
			{
				//line 10 "/shared/text/test/thx/text/TestTable.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 10 "/shared/text/test/thx/text/TestTable.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 10 "/shared/text/test/thx/text/TestTable.hx"
		baseArr.push("table");
		//line 10 "/shared/text/test/thx/text/TestTable.hx"
		{
			//line 10 "/shared/text/test/thx/text/TestTable.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


