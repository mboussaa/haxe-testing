// Generated by Haxe 3.3.0
package thx.text;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestTable extends haxe.lang.HxObject
{
	public TestTable(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestTable(int i)
	{
		//line 12 "/shared/text/test/thx/text/TestTable.hx"
		thx.text.TestTable.__hx_ctor_thx_text_TestTable(this, i);
	}
	
	
	public static void __hx_ctor_thx_text_TestTable(thx.text.TestTable __temp_me151, int i)
	{
		//line 13 "/shared/text/test/thx/text/TestTable.hx"
		__temp_me151.x = i;
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 10 "/shared/text/test/thx/text/TestTable.hx"
		return new thx.text.TestTable(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 10 "/shared/text/test/thx/text/TestTable.hx"
		return new thx.text.TestTable(((int) (haxe.lang.Runtime.toInt(arr.__get(0))) ));
	}
	
	
	public int x;
	
	public thx.text.Table table;
	
	public void setup()
	{
		//line 18 "/shared/text/test/thx/text/TestTable.hx"
		this.table = new thx.text.Table();
	}
	
	
	public void testPaintBorder()
	{
		//line 22 "/shared/text/test/thx/text/TestTable.hx"
		int _g1 = 0;
		//line 22 "/shared/text/test/thx/text/TestTable.hx"
		int _g = this.x;
		//line 22 "/shared/text/test/thx/text/TestTable.hx"
		while (( _g1 < _g ))
		{
			//line 22 "/shared/text/test/thx/text/TestTable.hx"
			 ++ _g1;
			//line 23 "/shared/text/test/thx/text/TestTable.hx"
			thx.text.table.Canvas canvas = new thx.text.table.Canvas(3, 3);
			//line 24 "/shared/text/test/thx/text/TestTable.hx"
			canvas.paintBorder(thx.text.table.CellType.Body, 0, 0, 3, 3);
			//line 25 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.equals("\u250c\u2500\u2510\n\u2502 \u2502\n\u2514\u2500\u2518", canvas.toString(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testPaintBorder"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (25) )) )}));
			//line 27 "/shared/text/test/thx/text/TestTable.hx"
			canvas = new thx.text.table.Canvas(4, 4);
			//line 28 "/shared/text/test/thx/text/TestTable.hx"
			canvas.paintBorder(thx.text.table.CellType.Body, 1, 0, 3, 3);
			//line 29 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.equals(" \u250c\u2500\u2510\n \u2502 \u2502\n \u2514\u2500\u2518\n    ", canvas.toString(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testPaintBorder"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (29) )) )}));
			//line 31 "/shared/text/test/thx/text/TestTable.hx"
			canvas = new thx.text.table.Canvas(4, 4);
			//line 32 "/shared/text/test/thx/text/TestTable.hx"
			canvas.paintBorder(thx.text.table.CellType.Body, 1, 1, 3, 3);
			//line 33 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.equals("    \n \u250c\u2500\u2510\n \u2502 \u2502\n \u2514\u2500\u2518", canvas.toString(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testPaintBorder"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (33) )) )}));
		}
		
	}
	
	
	public void oneCell(thx.text.table.CellValueImpl value, int width)
	{
		//line 38 "/shared/text/test/thx/text/TestTable.hx"
		this.table = new thx.text.Table();
		//line 39 "/shared/text/test/thx/text/TestTable.hx"
		this.table.style.set_type(thx.text.table.CellType.Body);
		//line 40 "/shared/text/test/thx/text/TestTable.hx"
		this.table.style.set_minWidth(width);
		//line 41 "/shared/text/test/thx/text/TestTable.hx"
		this.table.set(value, 0, 0, null);
	}
	
	
	public void testSequence()
	{
		//line 45 "/shared/text/test/thx/text/TestTable.hx"
		int _g1 = 0;
		//line 45 "/shared/text/test/thx/text/TestTable.hx"
		int _g = this.x;
		//line 45 "/shared/text/test/thx/text/TestTable.hx"
		while (( _g1 < _g ))
		{
			//line 45 "/shared/text/test/thx/text/TestTable.hx"
			 ++ _g1;
			//line 46 "/shared/text/test/thx/text/TestTable.hx"
			thx.text.table.Cell last = this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.BoolCell(true)) ), 0, 1, null);
			//line 47 "/shared/text/test/thx/text/TestTable.hx"
			thx.text.table.Cell first = this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.BoolCell(false)) ), 0, 0, null);
			//line 48 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.equals(1, last.col.index, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testSequence"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (48) )) )}));
			//line 49 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.equals(0, first.col.index, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testSequence"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (49) )) )}));
		}
		
	}
	
	
	public void testStyle()
	{
		//line 53 "/shared/text/test/thx/text/TestTable.hx"
		int _g1 = 0;
		//line 53 "/shared/text/test/thx/text/TestTable.hx"
		int _g = this.x;
		//line 53 "/shared/text/test/thx/text/TestTable.hx"
		while (( _g1 < _g ))
		{
			//line 53 "/shared/text/test/thx/text/TestTable.hx"
			 ++ _g1;
			//line 54 "/shared/text/test/thx/text/TestTable.hx"
			thx.text.table.Style style = new thx.text.table.Style();
			//line 55 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.isNull(style.get_formatter(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testStyle"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (55) )) )}));
			//line 56 "/shared/text/test/thx/text/TestTable.hx"
			thx.text.table.DefaultStyle dstyle = new thx.text.table.DefaultStyle();
			//line 57 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.notNull(dstyle.get_formatter(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testStyle"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (57) )) )}));
			//line 58 "/shared/text/test/thx/text/TestTable.hx"
			thx.text.table.CompositeStyle cstyle = new thx.text.table.CompositeStyle(((haxe.root.Array<thx.text.table.IStyle>) (new haxe.root.Array<thx.text.table.IStyle>(new thx.text.table.IStyle[]{style})) ));
			//line 59 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.isNull(cstyle.get_formatter(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testStyle"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (59) )) )}));
			//line 60 "/shared/text/test/thx/text/TestTable.hx"
			cstyle = new thx.text.table.CompositeStyle(((haxe.root.Array<thx.text.table.IStyle>) (new haxe.root.Array<thx.text.table.IStyle>(new thx.text.table.IStyle[]{style, dstyle})) ));
			//line 61 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.notNull(cstyle.get_formatter(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testStyle"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (61) )) )}));
		}
		
	}
	
	
	public void testCanvas()
	{
		//line 65 "/shared/text/test/thx/text/TestTable.hx"
		int _g1 = 0;
		//line 65 "/shared/text/test/thx/text/TestTable.hx"
		int _g = this.x;
		//line 65 "/shared/text/test/thx/text/TestTable.hx"
		while (( _g1 < _g ))
		{
			//line 65 "/shared/text/test/thx/text/TestTable.hx"
			 ++ _g1;
			//line 66 "/shared/text/test/thx/text/TestTable.hx"
			thx.text.table.Canvas canvas = new thx.text.table.Canvas(3, 2);
			//line 67 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.equals("   \n   ", canvas.toString(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testCanvas"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (67) )) )}));
			//line 68 "/shared/text/test/thx/text/TestTable.hx"
			canvas.expand(4, 3);
			//line 69 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.equals("    \n    \n    ", canvas.toString(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testCanvas"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (69) )) )}));
		}
		
	}
	
	
	public void testTableSize()
	{
		//line 73 "/shared/text/test/thx/text/TestTable.hx"
		int _g1 = 0;
		//line 73 "/shared/text/test/thx/text/TestTable.hx"
		int _g = this.x;
		//line 73 "/shared/text/test/thx/text/TestTable.hx"
		while (( _g1 < _g ))
		{
			//line 73 "/shared/text/test/thx/text/TestTable.hx"
			 ++ _g1;
			//line 74 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.equals(0, this.table.get_rows(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testTableSize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (74) )) )}));
			//line 75 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.equals(0, this.table.get_cols(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testTableSize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (75) )) )}));
			//line 76 "/shared/text/test/thx/text/TestTable.hx"
			this.table.getCol(2);
			//line 77 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.equals(0, this.table.get_cols(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testTableSize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (77) )) )}));
			//line 78 "/shared/text/test/thx/text/TestTable.hx"
			this.table.ensureCol(3);
			//line 79 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.equals(4, this.table.get_cols(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testTableSize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (79) )) )}));
			//line 80 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.equals(0, this.table.get_rows(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testTableSize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (80) )) )}));
			//line 81 "/shared/text/test/thx/text/TestTable.hx"
			this.table.ensureRow(1);
			//line 82 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.equals(2, this.table.get_rows(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testTableSize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (82) )) )}));
		}
		
	}
	
	
	public void testCellResizeTable()
	{
		//line 86 "/shared/text/test/thx/text/TestTable.hx"
		int _g1 = 0;
		//line 86 "/shared/text/test/thx/text/TestTable.hx"
		int _g = this.x;
		//line 86 "/shared/text/test/thx/text/TestTable.hx"
		while (( _g1 < _g ))
		{
			//line 86 "/shared/text/test/thx/text/TestTable.hx"
			 ++ _g1;
			//line 87 "/shared/text/test/thx/text/TestTable.hx"
			this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.IntCell(1)) ), 3, 2, null);
			//line 88 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.equals(3, this.table.get_cols(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testCellResizeTable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (88) )) )}));
			//line 89 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.equals(4, this.table.get_rows(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testCellResizeTable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (89) )) )}));
		}
		
	}
	
	
	public void testIdentityOfCellsCreatedFromTable()
	{
		//line 93 "/shared/text/test/thx/text/TestTable.hx"
		int _g1 = 0;
		//line 93 "/shared/text/test/thx/text/TestTable.hx"
		int _g = this.x;
		//line 93 "/shared/text/test/thx/text/TestTable.hx"
		while (( _g1 < _g ))
		{
			//line 93 "/shared/text/test/thx/text/TestTable.hx"
			 ++ _g1;
			//line 94 "/shared/text/test/thx/text/TestTable.hx"
			thx.text.table.Cell cell = this.table.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.IntCell(1)) ), 3, 2, null);
			//line 95 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.isTrue(( cell == this.table.get(3, 2) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromTable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (95) )) )}));
			//line 97 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.isTrue(( cell == this.table.getRow(3).get(2) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromTable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (97) )) )}));
			//line 98 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.isTrue(( cell == this.table.getCol(2).get(3) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromTable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (98) )) )}));
			//line 100 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.isTrue(( cell.row == this.table.getRow(3) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromTable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (100) )) )}));
			//line 101 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.isTrue(( cell.col == this.table.getCol(2) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromTable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (101) )) )}));
			//line 103 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.isTrue(( cell.table == this.table ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromTable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (103) )) )}));
			//line 104 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.isTrue(( cell.row.table == this.table ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromTable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (104) )) )}));
			//line 105 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.isTrue(( cell.col.table == this.table ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromTable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (105) )) )}));
		}
		
	}
	
	
	public void testIdentityOfCellsCreatedFromRow()
	{
		//line 109 "/shared/text/test/thx/text/TestTable.hx"
		int _g1 = 0;
		//line 109 "/shared/text/test/thx/text/TestTable.hx"
		int _g = this.x;
		//line 109 "/shared/text/test/thx/text/TestTable.hx"
		while (( _g1 < _g ))
		{
			//line 109 "/shared/text/test/thx/text/TestTable.hx"
			 ++ _g1;
			//line 110 "/shared/text/test/thx/text/TestTable.hx"
			thx.text.table.Row row = this.table.ensureRow(3);
			//line 110 "/shared/text/test/thx/text/TestTable.hx"
			thx.text.table.Cell cell = row.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.IntCell(1)) ), 2, null);
			//line 112 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.isTrue(( cell == this.table.get(3, 2) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromRow"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (112) )) )}));
			//line 114 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.isTrue(( cell == this.table.getRow(3).get(2) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromRow"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (114) )) )}));
			//line 115 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.isTrue(( cell == this.table.getCol(2).get(3) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromRow"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (115) )) )}));
			//line 117 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.isTrue(( cell.row == this.table.getRow(3) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromRow"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (117) )) )}));
			//line 118 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.isTrue(( cell.col == this.table.getCol(2) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromRow"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (118) )) )}));
			//line 120 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.isTrue(( cell.table == this.table ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromRow"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (120) )) )}));
			//line 121 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.isTrue(( cell.row.table == this.table ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromRow"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (121) )) )}));
			//line 122 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.isTrue(( cell.col.table == this.table ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromRow"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (122) )) )}));
		}
		
	}
	
	
	public void testIdentityOfCellsCreatedFromCol()
	{
		//line 126 "/shared/text/test/thx/text/TestTable.hx"
		int _g1 = 0;
		//line 126 "/shared/text/test/thx/text/TestTable.hx"
		int _g = this.x;
		//line 126 "/shared/text/test/thx/text/TestTable.hx"
		while (( _g1 < _g ))
		{
			//line 126 "/shared/text/test/thx/text/TestTable.hx"
			 ++ _g1;
			//line 127 "/shared/text/test/thx/text/TestTable.hx"
			thx.text.table.Col col = this.table.ensureCol(2);
			//line 127 "/shared/text/test/thx/text/TestTable.hx"
			thx.text.table.Cell cell = col.set(((thx.text.table.CellValueImpl) (thx.text.table.CellValueImpl.IntCell(1)) ), 3, null);
			//line 129 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.isTrue(( cell == this.table.get(3, 2) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromCol"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (129) )) )}));
			//line 131 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.isTrue(( cell == this.table.getRow(3).get(2) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromCol"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (131) )) )}));
			//line 132 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.isTrue(( cell == this.table.getCol(2).get(3) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromCol"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (132) )) )}));
			//line 134 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.isTrue(( cell.row == this.table.getRow(3) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromCol"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (134) )) )}));
			//line 135 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.isTrue(( cell.col == this.table.getCol(2) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromCol"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (135) )) )}));
			//line 137 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.isTrue(( cell.table == this.table ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromCol"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (137) )) )}));
			//line 138 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.isTrue(( cell.row.table == this.table ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromCol"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (138) )) )}));
			//line 139 "/shared/text/test/thx/text/TestTable.hx"
			utest.Assert.isTrue(( cell.col.table == this.table ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.text.TestTable", "TestTable.hx", "testIdentityOfCellsCreatedFromCol"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (139) )) )}));
		}
		
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 10 "/shared/text/test/thx/text/TestTable.hx"
		{
			//line 10 "/shared/text/test/thx/text/TestTable.hx"
			boolean __temp_executeDef1 = true;
			//line 10 "/shared/text/test/thx/text/TestTable.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("x")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.x = ((int) (value) );
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return value;
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
			}
			
			//line 10 "/shared/text/test/thx/text/TestTable.hx"
			if (__temp_executeDef1) 
			{
				//line 10 "/shared/text/test/thx/text/TestTable.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 10 "/shared/text/test/thx/text/TestTable.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 10 "/shared/text/test/thx/text/TestTable.hx"
		{
			//line 10 "/shared/text/test/thx/text/TestTable.hx"
			boolean __temp_executeDef1 = true;
			//line 10 "/shared/text/test/thx/text/TestTable.hx"
			switch (field.hashCode())
			{
				case 110115790:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("table")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.table = ((thx.text.Table) (value) );
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return value;
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 120:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("x")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.x = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return value;
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
			}
			
			//line 10 "/shared/text/test/thx/text/TestTable.hx"
			if (__temp_executeDef1) 
			{
				//line 10 "/shared/text/test/thx/text/TestTable.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 10 "/shared/text/test/thx/text/TestTable.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 10 "/shared/text/test/thx/text/TestTable.hx"
		{
			//line 10 "/shared/text/test/thx/text/TestTable.hx"
			boolean __temp_executeDef1 = true;
			//line 10 "/shared/text/test/thx/text/TestTable.hx"
			switch (field.hashCode())
			{
				case 341786168:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testIdentityOfCellsCreatedFromCol")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testIdentityOfCellsCreatedFromCol")) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 120:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("x")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return this.x;
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 341800594:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testIdentityOfCellsCreatedFromRow")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testIdentityOfCellsCreatedFromRow")) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 110115790:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("table")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return this.table;
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 2054269574:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testIdentityOfCellsCreatedFromTable")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testIdentityOfCellsCreatedFromTable")) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 109329021:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("setup")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "setup")) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case -545076794:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testCellResizeTable")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCellResizeTable")) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 1856654904:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testPaintBorder")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testPaintBorder")) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case -1318856579:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testTableSize")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testTableSize")) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case -1321727768:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("oneCell")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "oneCell")) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 1252028554:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testCanvas")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCanvas")) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 2063887987:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testSequence")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSequence")) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case -1191185345:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testStyle")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testStyle")) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
			}
			
			//line 10 "/shared/text/test/thx/text/TestTable.hx"
			if (__temp_executeDef1) 
			{
				//line 10 "/shared/text/test/thx/text/TestTable.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 10 "/shared/text/test/thx/text/TestTable.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 10 "/shared/text/test/thx/text/TestTable.hx"
		{
			//line 10 "/shared/text/test/thx/text/TestTable.hx"
			boolean __temp_executeDef1 = true;
			//line 10 "/shared/text/test/thx/text/TestTable.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("x")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						return ((double) (this.x) );
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
			}
			
			//line 10 "/shared/text/test/thx/text/TestTable.hx"
			if (__temp_executeDef1) 
			{
				//line 10 "/shared/text/test/thx/text/TestTable.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 10 "/shared/text/test/thx/text/TestTable.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 10 "/shared/text/test/thx/text/TestTable.hx"
		{
			//line 10 "/shared/text/test/thx/text/TestTable.hx"
			boolean __temp_executeDef1 = true;
			//line 10 "/shared/text/test/thx/text/TestTable.hx"
			switch (field.hashCode())
			{
				case 341786168:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testIdentityOfCellsCreatedFromCol")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.testIdentityOfCellsCreatedFromCol();
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 109329021:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("setup")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.setup();
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 341800594:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testIdentityOfCellsCreatedFromRow")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.testIdentityOfCellsCreatedFromRow();
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 1856654904:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testPaintBorder")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.testPaintBorder();
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 2054269574:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testIdentityOfCellsCreatedFromTable")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.testIdentityOfCellsCreatedFromTable();
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case -1321727768:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("oneCell")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.oneCell(((thx.text.table.CellValueImpl) (dynargs.__get(0)) ), ((int) (haxe.lang.Runtime.toInt(dynargs.__get(1))) ));
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case -545076794:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testCellResizeTable")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.testCellResizeTable();
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 2063887987:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testSequence")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.testSequence();
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case -1318856579:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testTableSize")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.testTableSize();
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case -1191185345:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testStyle")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.testStyle();
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
				case 1252028554:
				{
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					if (field.equals("testCanvas")) 
					{
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/text/test/thx/text/TestTable.hx"
						this.testCanvas();
					}
					
					//line 10 "/shared/text/test/thx/text/TestTable.hx"
					break;
				}
				
				
			}
			
			//line 10 "/shared/text/test/thx/text/TestTable.hx"
			if (__temp_executeDef1) 
			{
				//line 10 "/shared/text/test/thx/text/TestTable.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 10 "/shared/text/test/thx/text/TestTable.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 10 "/shared/text/test/thx/text/TestTable.hx"
		baseArr.push("table");
		//line 10 "/shared/text/test/thx/text/TestTable.hx"
		baseArr.push("x");
		//line 10 "/shared/text/test/thx/text/TestTable.hx"
		{
			//line 10 "/shared/text/test/thx/text/TestTable.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


