// Generated by Haxe 3.3.0
package thx.text.table;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Renderer_processContents_34__Fun extends haxe.lang.Function
{
	public Renderer_processContents_34__Fun(thx.text.table.Renderer _gthis)
	{
		//line 34 "/shared/text/src/thx/text/table/Renderer.hx"
		super(1, 0);
		//line 34 "/shared/text/src/thx/text/table/Renderer.hx"
		this._gthis = _gthis;
	}
	
	
	@Override public java.lang.Object __hx_invoke1_o(double __fn_float1, java.lang.Object __fn_dyn1)
	{
		//line 34 "/shared/text/src/thx/text/table/Renderer.hx"
		thx.text.table.Cell cell = ( (( __fn_dyn1 == haxe.lang.Runtime.undefined )) ? (((thx.text.table.Cell) (((java.lang.Object) (__fn_float1) )) )) : (((thx.text.table.Cell) (__fn_dyn1) )) );
		//line 35 "/shared/text/src/thx/text/table/Renderer.hx"
		java.lang.Object maxWidth = cell.style.get_maxWidth();
		//line 35 "/shared/text/src/thx/text/table/Renderer.hx"
		java.lang.Object maxHeight = cell.style.get_maxHeight();
		//line 35 "/shared/text/src/thx/text/table/Renderer.hx"
		int minWidth = cell.style.get_minWidth();
		//line 35 "/shared/text/src/thx/text/table/Renderer.hx"
		int minHeight = cell.style.get_minHeight();
		//line 35 "/shared/text/src/thx/text/table/Renderer.hx"
		int spanRight = 1;
		//line 35 "/shared/text/src/thx/text/table/Renderer.hx"
		int spanDown = 1;
		//line 42 "/shared/text/src/thx/text/table/Renderer.hx"
		{
			//line 42 "/shared/text/src/thx/text/table/Renderer.hx"
			thx.text.table.Span _g32 = cell.span;
			//line 42 "/shared/text/src/thx/text/table/Renderer.hx"
			switch (_g32.index)
			{
				case 1:
				{
					//line 43 "/shared/text/src/thx/text/table/Renderer.hx"
					int c = ((int) (haxe.lang.Runtime.toInt(_g32.params[1])) );
					//line 43 "/shared/text/src/thx/text/table/Renderer.hx"
					if (( c > 1 )) 
					{
						//line 44 "/shared/text/src/thx/text/table/Renderer.hx"
						spanRight = c;
					}
					
					//line 43 "/shared/text/src/thx/text/table/Renderer.hx"
					break;
				}
				
				
				case 2:
				{
					//line 43 "/shared/text/src/thx/text/table/Renderer.hx"
					int c1 = ((int) (haxe.lang.Runtime.toInt(_g32.params[0])) );
					//line 43 "/shared/text/src/thx/text/table/Renderer.hx"
					if (( c1 > 1 )) 
					{
						//line 44 "/shared/text/src/thx/text/table/Renderer.hx"
						spanRight = c1;
					}
					
					//line 43 "/shared/text/src/thx/text/table/Renderer.hx"
					break;
				}
				
				
				case 4:
				case 6:
				{
					//line 46 "/shared/text/src/thx/text/table/Renderer.hx"
					spanRight = ( cell.table.get_cols() - cell.col.index );
					//line 46 "/shared/text/src/thx/text/table/Renderer.hx"
					break;
				}
				
				
				default:
				{
					//line 47 "/shared/text/src/thx/text/table/Renderer.hx"
					break;
				}
				
			}
			
		}
		
		//line 50 "/shared/text/src/thx/text/table/Renderer.hx"
		{
			//line 50 "/shared/text/src/thx/text/table/Renderer.hx"
			thx.text.table.Span _g41 = cell.span;
			//line 50 "/shared/text/src/thx/text/table/Renderer.hx"
			switch (_g41.index)
			{
				case 1:
				{
					//line 51 "/shared/text/src/thx/text/table/Renderer.hx"
					int r = ((int) (haxe.lang.Runtime.toInt(_g41.params[0])) );
					//line 51 "/shared/text/src/thx/text/table/Renderer.hx"
					if (( r > 1 )) 
					{
						//line 52 "/shared/text/src/thx/text/table/Renderer.hx"
						spanDown = r;
					}
					
					//line 51 "/shared/text/src/thx/text/table/Renderer.hx"
					break;
				}
				
				
				case 3:
				{
					//line 51 "/shared/text/src/thx/text/table/Renderer.hx"
					int r1 = ((int) (haxe.lang.Runtime.toInt(_g41.params[0])) );
					//line 51 "/shared/text/src/thx/text/table/Renderer.hx"
					if (( r1 > 1 )) 
					{
						//line 52 "/shared/text/src/thx/text/table/Renderer.hx"
						spanDown = r1;
					}
					
					//line 51 "/shared/text/src/thx/text/table/Renderer.hx"
					break;
				}
				
				
				case 5:
				case 6:
				{
					//line 54 "/shared/text/src/thx/text/table/Renderer.hx"
					spanDown = ( cell.table.get_rows() - cell.row.index );
					//line 54 "/shared/text/src/thx/text/table/Renderer.hx"
					break;
				}
				
				
				default:
				{
					//line 55 "/shared/text/src/thx/text/table/Renderer.hx"
					break;
				}
				
			}
			
		}
		
		//line 58 "/shared/text/src/thx/text/table/Renderer.hx"
		thx.text.table.StringBlock block = ((thx.text.table.StringBlock) (cell.style.get_formatter().__hx_invoke2_o(0.0, cell.value, 0.0, maxWidth)) );
		//line 58 "/shared/text/src/thx/text/table/Renderer.hx"
		thx.text.table.HAlign halign = ((thx.text.table.HAlign) (cell.style.get_aligner().__hx_invoke2_o(0.0, cell.value, 0.0, cell.style.get_type())) );
		//line 60 "/shared/text/src/thx/text/table/Renderer.hx"
		int a1 = 0;
		//line 60 "/shared/text/src/thx/text/table/Renderer.hx"
		if (haxe.lang.Runtime.eq(maxWidth, null)) 
		{
			//line 60 "/shared/text/src/thx/text/table/Renderer.hx"
			a1 = block.width;
		}
		else
		{
			//line 60 "/shared/text/src/thx/text/table/Renderer.hx"
			int a2 = ((int) (haxe.lang.Runtime.toInt(maxWidth)) );
			//line 60 "/shared/text/src/thx/text/table/Renderer.hx"
			int b1 = block.width;
			//line 60 "/shared/text/src/thx/text/table/Renderer.hx"
			if (( a2 < b1 )) 
			{
				//line 60 "/shared/text/src/thx/text/table/Renderer.hx"
				a1 = a2;
			}
			else
			{
				//line 60 "/shared/text/src/thx/text/table/Renderer.hx"
				a1 = b1;
			}
			
		}
		
		//line 58 "/shared/text/src/thx/text/table/Renderer.hx"
		int width = ( (( a1 > minWidth )) ? (a1) : (minWidth) );
		//line 61 "/shared/text/src/thx/text/table/Renderer.hx"
		int a3 = 0;
		//line 61 "/shared/text/src/thx/text/table/Renderer.hx"
		if (haxe.lang.Runtime.eq(maxHeight, null)) 
		{
			//line 61 "/shared/text/src/thx/text/table/Renderer.hx"
			a3 = block.height;
		}
		else
		{
			//line 61 "/shared/text/src/thx/text/table/Renderer.hx"
			int a4 = ((int) (haxe.lang.Runtime.toInt(maxHeight)) );
			//line 61 "/shared/text/src/thx/text/table/Renderer.hx"
			int b2 = block.height;
			//line 61 "/shared/text/src/thx/text/table/Renderer.hx"
			if (( a4 < b2 )) 
			{
				//line 61 "/shared/text/src/thx/text/table/Renderer.hx"
				a3 = a4;
			}
			else
			{
				//line 61 "/shared/text/src/thx/text/table/Renderer.hx"
				a3 = b2;
			}
			
		}
		
		//line 58 "/shared/text/src/thx/text/table/Renderer.hx"
		int height = ( (( a3 > minHeight )) ? (a3) : (minHeight) );
		//line 64 "/shared/text/src/thx/text/table/Renderer.hx"
		switch (halign.index)
		{
			case 3:
			{
				//line 65 "/shared/text/src/thx/text/table/Renderer.hx"
				java.lang.String s = haxe.lang.Runtime.toString(halign.params[0]);
				//line 65 "/shared/text/src/thx/text/table/Renderer.hx"
				{
					//line 66 "/shared/text/src/thx/text/table/Renderer.hx"
					int pos = block.symbolPos(s);
					//line 67 "/shared/text/src/thx/text/table/Renderer.hx"
					int a5 = ((int) (haxe.lang.Runtime.toInt(this._gthis.symbolPos.__get(cell.col.index))) );
					//line 67 "/shared/text/src/thx/text/table/Renderer.hx"
					this._gthis.symbolPos.__set(cell.col.index, ( (( a5 > pos )) ? (a5) : (pos) ));
					//line 68 "/shared/text/src/thx/text/table/Renderer.hx"
					int extra = ( ((int) (haxe.lang.Runtime.toInt(this._gthis.symbolPos.__get(cell.col.index))) ) - pos );
					//line 69 "/shared/text/src/thx/text/table/Renderer.hx"
					if (( spanRight == 1 )) 
					{
						//line 70 "/shared/text/src/thx/text/table/Renderer.hx"
						int a6 = ((int) (haxe.lang.Runtime.toInt(this._gthis.colWidths.__get(cell.col.index))) );
						//line 70 "/shared/text/src/thx/text/table/Renderer.hx"
						int b3 = ( width + extra );
						//line 70 "/shared/text/src/thx/text/table/Renderer.hx"
						this._gthis.colWidths.__set(cell.col.index, ( (( a6 > b3 )) ? (a6) : (b3) ));
					}
					
				}
				
				//line 65 "/shared/text/src/thx/text/table/Renderer.hx"
				break;
			}
			
			
			default:
			{
				//line 72 "/shared/text/src/thx/text/table/Renderer.hx"
				if (( spanRight == 1 )) 
				{
					//line 73 "/shared/text/src/thx/text/table/Renderer.hx"
					int a7 = ((int) (haxe.lang.Runtime.toInt(this._gthis.colWidths.__get(cell.col.index))) );
					//line 73 "/shared/text/src/thx/text/table/Renderer.hx"
					this._gthis.colWidths.__set(cell.col.index, ( (( a7 > width )) ? (a7) : (width) ));
				}
				
				//line 72 "/shared/text/src/thx/text/table/Renderer.hx"
				break;
			}
			
		}
		
		//line 75 "/shared/text/src/thx/text/table/Renderer.hx"
		int a8 = ((int) (haxe.lang.Runtime.toInt(this._gthis.rowHeights.__get(cell.row.index))) );
		//line 75 "/shared/text/src/thx/text/table/Renderer.hx"
		this._gthis.rowHeights.__set(cell.row.index, ( (( a8 > height )) ? (a8) : (height) ));
		//line 77 "/shared/text/src/thx/text/table/Renderer.hx"
		return new haxe.lang.DynamicObject(new java.lang.String[]{"block", "cell", "halign"}, new java.lang.Object[]{block, cell, halign}, new java.lang.String[]{"spanDown", "spanRight"}, new double[]{((double) (((double) (spanDown) )) ), ((double) (((double) (spanRight) )) )});
	}
	
	
	public thx.text.table.Renderer _gthis;
	
}


