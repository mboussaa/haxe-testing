// Generated by Haxe 3.3.0
package thx.format;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class NumberFormat extends haxe.lang.HxObject
{
	static
	{
		//line 444 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		thx.format.NumberFormat.BASE = "0123456789abcdefghijklmnopqrstuvwxyz";
	}
	
	public NumberFormat(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public NumberFormat()
	{
		//line 14 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		thx.format.NumberFormat.__hx_ctor_thx_format_NumberFormat(this);
	}
	
	
	public static void __hx_ctor_thx_format_NumberFormat(thx.format.NumberFormat __temp_me147)
	{
	}
	
	
	public static java.lang.String binary(double f, java.lang.Object significantDigits, thx.culture.Culture culture)
	{
		//line 18 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.Object __temp_significantDigits141 = ( (haxe.lang.Runtime.eq(significantDigits, null)) ? (((java.lang.Object) (1) )) : (significantDigits) );
		//line 19 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		thx.culture.NumberFormatInfo nf = thx.format.NumberFormat.numberFormat(culture);
		//line 20 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (java.lang.Double.isNaN(f)) 
		{
			//line 21 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return nf.symbolNaN;
		}
		
		//line 22 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if ( ! (haxe.lang.Runtime.isFinite(f)) ) 
		{
			//line 23 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			if (( f < 0 )) 
			{
				//line 23 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return nf.symbolNegativeInfinity;
			}
			else
			{
				//line 23 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return nf.symbolPositiveInfinity;
			}
			
		}
		
		//line 24 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (( haxe.lang.Runtime.eq(__temp_significantDigits141, 0) && ( f == 0 ) )) 
		{
			//line 24 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return "";
		}
		else
		{
			//line 24 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return haxe.root.StringTools.lpad(thx.format.NumberFormat.toBase(((int) (f) ), 2, culture), "0", ((int) (haxe.lang.Runtime.toInt(__temp_significantDigits141)) ));
		}
		
	}
	
	
	public static java.lang.String currency(double f, java.lang.Object precision, java.lang.String symbol, thx.culture.Culture culture)
	{
		//line 32 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		thx.culture.NumberFormatInfo nf = thx.format.NumberFormat.numberFormat(culture);
		//line 33 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (java.lang.Double.isNaN(f)) 
		{
			//line 34 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return nf.symbolNaN;
		}
		
		//line 35 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if ( ! (haxe.lang.Runtime.isFinite(f)) ) 
		{
			//line 36 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			if (( f < 0 )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return nf.symbolNegativeInfinity;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return nf.symbolPositiveInfinity;
			}
			
		}
		
		//line 37 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.String pattern = ( (( f < 0 )) ? (thx.culture.Pattern.currencyNegatives.__get(nf.patternNegativeCurrency)) : (thx.culture.Pattern.currencyPositives.__get(nf.patternPositiveCurrency)) );
		//line 139 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Nulls.hx"
		java.lang.Object t = ( (( null == precision )) ? (null) : (precision) );
		//line 37 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.String formatted = thx.format.NumberFormat.value(f, ( (( ! (haxe.lang.Runtime.eq(t, null)) )) ? (((int) (haxe.lang.Runtime.toInt(t)) )) : (nf.decimalDigitsCurrency) ), nf.groupSizesCurrency, nf.separatorGroupCurrency, nf.separatorDecimalCurrency);
		//line 39 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.String tmp = haxe.root.StringTools.replace(pattern, "n", formatted);
		//line 139 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Nulls.hx"
		java.lang.String t1 = ( (( null == symbol )) ? (null) : (symbol) );
		//line 39 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		return haxe.root.StringTools.replace(tmp, "$", ( (( t1 != null )) ? (t1) : (nf.symbolCurrency) ));
	}
	
	
	public static java.lang.String customFormat(double f, java.lang.String pattern, thx.culture.Culture culture)
	{
		//line 60 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		thx.culture.NumberFormatInfo nf = thx.format.NumberFormat.numberFormat(culture);
		//line 61 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (java.lang.Double.isNaN(f)) 
		{
			//line 62 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return nf.symbolNaN;
		}
		
		//line 63 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if ( ! (haxe.lang.Runtime.isFinite(f)) ) 
		{
			//line 64 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			if (( f < 0 )) 
			{
				//line 64 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return nf.symbolNegativeInfinity;
			}
			else
			{
				//line 64 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return nf.symbolPositiveInfinity;
			}
			
		}
		
		//line 67 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		boolean isCurrency = thx.format.NumberFormat.hasSymbols(pattern, "$");
		//line 67 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		boolean isPercent = (  ! (isCurrency)  && thx.format.NumberFormat.hasSymbols(pattern, "%\u2030") );
		//line 67 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		haxe.root.Array<java.lang.String> groups = thx.format.NumberFormat.splitPattern(pattern, ";");
		//line 70 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (( groups.length > 3 )) 
		{
			//line 70 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			throw haxe.lang.HaxeException.wrap(( ( "invalid number of sections in \"" + pattern ) + "\"" ));
		}
		
		//line 71 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (( f < 0 )) 
		{
			//line 72 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			if (( null != groups.__get(1) )) 
			{
				//line 71 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return thx.format.NumberFormat.customFormatF( - (f) , groups.__get(1), nf, isCurrency, isPercent);
			}
			else
			{
				//line 71 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return thx.format.NumberFormat.customFormatF( - (f) , ( "-" + groups.__get(0) ), nf, isCurrency, isPercent);
			}
			
		}
		else
		{
			//line 77 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			if (( f > 0 )) 
			{
				//line 71 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return thx.format.NumberFormat.customFormatF(f, groups.__get(0), nf, isCurrency, isPercent);
			}
			else
			{
				//line 80 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				java.lang.String tmp = null;
				//line 80 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				if (( null == groups )) 
				{
					//line 80 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					tmp = null;
				}
				else
				{
					//line 80 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					java.lang.String _1 = groups.__get(2);
					//line 80 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (( null == _1 )) 
					{
						//line 80 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						tmp = null;
					}
					else
					{
						//line 80 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						tmp = _1;
					}
					
				}
				
				//line 139 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Nulls.hx"
				java.lang.String t = haxe.lang.Runtime.toString(tmp);
				//line 71 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return thx.format.NumberFormat.customFormatF(((double) (0) ), ( (( t != null )) ? (t) : (groups.__get(0)) ), nf, isCurrency, isPercent);
			}
			
		}
		
	}
	
	
	public static java.lang.String decimal(double f, java.lang.Object significantDigits, thx.culture.Culture culture)
	{
		//line 87 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.Object __temp_significantDigits142 = ( (haxe.lang.Runtime.eq(significantDigits, null)) ? (((java.lang.Object) (1) )) : (significantDigits) );
		//line 88 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		thx.culture.NumberFormatInfo nf = thx.format.NumberFormat.numberFormat(culture);
		//line 89 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (java.lang.Double.isNaN(f)) 
		{
			//line 90 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return nf.symbolNaN;
		}
		
		//line 91 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if ( ! (haxe.lang.Runtime.isFinite(f)) ) 
		{
			//line 92 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			if (( f < 0 )) 
			{
				//line 92 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return nf.symbolNegativeInfinity;
			}
			else
			{
				//line 92 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return nf.symbolPositiveInfinity;
			}
			
		}
		
		//line 93 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.String formatted = thx.format.NumberFormat.value(f, 0, new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0}), "", "");
		//line 94 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		return ( (( (( f < 0 )) ? (nf.signNegative) : ("") )) + haxe.root.StringTools.lpad(formatted, "0", ((int) (haxe.lang.Runtime.toInt(__temp_significantDigits142)) )) );
	}
	
	
	public static java.lang.String exponential(double f, java.lang.Object precision, java.lang.Object digits, java.lang.String symbol, thx.culture.Culture culture)
	{
		//line 100 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (( symbol == null )) 
		{
			//line 100 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			symbol = "e";
		}
		
		//line 100 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.Object __temp_digits144 = ( (haxe.lang.Runtime.eq(digits, null)) ? (((java.lang.Object) (3) )) : (digits) );
		//line 100 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.Object __temp_precision143 = ( (haxe.lang.Runtime.eq(precision, null)) ? (((java.lang.Object) (6) )) : (precision) );
		//line 101 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		thx.culture.NumberFormatInfo nf = thx.format.NumberFormat.numberFormat(culture);
		//line 102 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (java.lang.Double.isNaN(f)) 
		{
			//line 103 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return nf.symbolNaN;
		}
		
		//line 104 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if ( ! (haxe.lang.Runtime.isFinite(f)) ) 
		{
			//line 105 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			if (( f < 0 )) 
			{
				//line 105 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return nf.symbolNegativeInfinity;
			}
			else
			{
				//line 105 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return nf.symbolPositiveInfinity;
			}
			
		}
		
		//line 106 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.Object info = thx.format.NumberFormat.exponentialInfo(f);
		//line 107 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.String tmp = ( ( thx.format.NumberFormat.number(haxe.lang.Runtime.getField_f(info, "f", true), __temp_precision143, culture) + symbol ) + (( (( haxe.lang.Runtime.compare(haxe.lang.Runtime.getField(info, "e", true), 0) < 0 )) ? (nf.signNegative) : (nf.signPositive) )) );
		//line 110 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		int v = ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(info, "e", true))) );
		//line 107 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		return ( tmp + haxe.root.StringTools.lpad(( "" + (( (( v < 0 )) ? ( - (v) ) : (v) )) ), "0", ((int) (haxe.lang.Runtime.toInt(__temp_digits144)) )) );
	}
	
	
	public static java.lang.String fixed(double f, java.lang.Object precision, thx.culture.Culture culture)
	{
		//line 117 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		thx.culture.NumberFormatInfo nf = thx.format.NumberFormat.numberFormat(culture);
		//line 118 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (java.lang.Double.isNaN(f)) 
		{
			//line 119 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return nf.symbolNaN;
		}
		
		//line 120 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if ( ! (haxe.lang.Runtime.isFinite(f)) ) 
		{
			//line 121 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			if (( f < 0 )) 
			{
				//line 121 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return nf.symbolNegativeInfinity;
			}
			else
			{
				//line 121 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return nf.symbolPositiveInfinity;
			}
			
		}
		
		//line 122 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.String pattern = ( (( f < 0 )) ? (thx.culture.Pattern.numberNegatives.__get(nf.patternNegativeNumber)) : ("n") );
		//line 139 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Nulls.hx"
		java.lang.Object t = ( (( null == precision )) ? (null) : (precision) );
		//line 122 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.String formatted = thx.format.NumberFormat.value(f, ( (( ! (haxe.lang.Runtime.eq(t, null)) )) ? (((int) (haxe.lang.Runtime.toInt(t)) )) : (nf.decimalDigitsNumber) ), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0}), "", nf.separatorDecimalNumber);
		//line 124 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		return haxe.root.StringTools.replace(pattern, "n", formatted);
	}
	
	
	public static java.lang.String format(double f, java.lang.String pattern, thx.culture.Culture culture)
	{
		//line 154 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.String specifier = haxe.lang.StringExt.substring(pattern, 0, 1);
		//line 154 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.Object param = thx.format.NumberFormat.paramOrNull(haxe.lang.StringExt.substring(pattern, 1, null));
		//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		{
			//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			java.lang.String __temp_svar1 = (specifier);
			//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			int __temp_hash3 = __temp_svar1.hashCode();
			//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			boolean __temp_executeDef2 = true;
			//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			switch (__temp_hash3)
			{
				case 37:
				{
					//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (__temp_svar1.equals("%")) 
					{
						//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						__temp_executeDef2 = false;
						//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						return thx.format.NumberFormat.printf(f, pattern, culture);
					}
					
					//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					break;
				}
				
				
				case 120:
				{
					//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (__temp_svar1.equals("x")) 
					{
						//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						__temp_executeDef2 = false;
						//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						return thx.format.NumberFormat.hex(f, param, culture);
					}
					
					//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					break;
				}
				
				
				case 99:
				case 67:
				{
					//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (( (( ( __temp_hash3 == 99 ) && __temp_svar1.equals("c") )) || __temp_svar1.equals("C") )) 
					{
						//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						__temp_executeDef2 = false;
						//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						return thx.format.NumberFormat.currency(f, param, null, culture);
					}
					
					//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					break;
				}
				
				
				case 114:
				case 82:
				{
					//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (( (( ( __temp_hash3 == 114 ) && __temp_svar1.equals("r") )) || __temp_svar1.equals("R") )) 
					{
						//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						__temp_executeDef2 = false;
						//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						return ( "" + haxe.lang.Runtime.toString(f) );
					}
					
					//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					break;
				}
				
				
				case 69:
				{
					//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (__temp_svar1.equals("E")) 
					{
						//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						__temp_executeDef2 = false;
						//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						return thx.format.NumberFormat.exponential(f, param, null, null, culture);
					}
					
					//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					break;
				}
				
				
				case 110:
				case 78:
				{
					//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (( (( ( __temp_hash3 == 110 ) && __temp_svar1.equals("n") )) || __temp_svar1.equals("N") )) 
					{
						//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						__temp_executeDef2 = false;
						//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						return thx.format.NumberFormat.number(f, param, culture);
					}
					
					//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					break;
				}
				
				
				case 71:
				{
					//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (__temp_svar1.equals("G")) 
					{
						//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						__temp_executeDef2 = false;
						//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						return thx.format.NumberFormat.general(f, param, culture);
					}
					
					//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					break;
				}
				
				
				case 103:
				{
					//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (__temp_svar1.equals("g")) 
					{
						//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						__temp_executeDef2 = false;
						//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						return thx.format.NumberFormat.general(f, param, culture).toLowerCase();
					}
					
					//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					break;
				}
				
				
				case 112:
				case 80:
				{
					//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (( (( ( __temp_hash3 == 112 ) && __temp_svar1.equals("p") )) || __temp_svar1.equals("P") )) 
					{
						//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						__temp_executeDef2 = false;
						//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						return thx.format.NumberFormat.percent(f, param, culture);
					}
					
					//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					break;
				}
				
				
				case 102:
				case 70:
				{
					//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (( (( ( __temp_hash3 == 102 ) && __temp_svar1.equals("f") )) || __temp_svar1.equals("F") )) 
					{
						//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						__temp_executeDef2 = false;
						//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						return thx.format.NumberFormat.fixed(f, param, culture);
					}
					
					//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					break;
				}
				
				
				case 88:
				{
					//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (__temp_svar1.equals("X")) 
					{
						//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						__temp_executeDef2 = false;
						//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						return thx.format.NumberFormat.hex(f, param, culture).toUpperCase();
					}
					
					//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					break;
				}
				
				
				case 101:
				{
					//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (__temp_svar1.equals("e")) 
					{
						//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						__temp_executeDef2 = false;
						//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						return thx.format.NumberFormat.exponential(f, param, null, null, culture).toLowerCase();
					}
					
					//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					break;
				}
				
				
				case 100:
				case 68:
				{
					//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (( (( ( __temp_hash3 == 100 ) && __temp_svar1.equals("d") )) || __temp_svar1.equals("D") )) 
					{
						//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						__temp_executeDef2 = false;
						//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						return thx.format.NumberFormat.decimal(f, param, culture);
					}
					
					//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					break;
				}
				
				
			}
			
			//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			if (__temp_executeDef2) 
			{
				//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return thx.format.NumberFormat.customFormat(f, pattern, culture);
			}
			else
			{
				//line 156 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				throw null;
			}
			
		}
		
	}
	
	
	public static java.lang.String general(double f, java.lang.Object significantDigits, thx.culture.Culture culture)
	{
		//line 192 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.String e = thx.format.NumberFormat.exponential(f, significantDigits, null, null, culture);
		//line 192 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.String f1 = thx.format.NumberFormat.fixed(f, significantDigits, culture);
		//line 194 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (( e.length() < f1.length() )) 
		{
			//line 194 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return e;
		}
		else
		{
			//line 194 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return f1;
		}
		
	}
	
	
	public static java.lang.String hex(double f, java.lang.Object significantDigits, thx.culture.Culture culture)
	{
		//line 200 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.Object __temp_significantDigits145 = ( (haxe.lang.Runtime.eq(significantDigits, null)) ? (((java.lang.Object) (1) )) : (significantDigits) );
		//line 201 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		thx.culture.NumberFormatInfo nf = thx.format.NumberFormat.numberFormat(culture);
		//line 202 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (java.lang.Double.isNaN(f)) 
		{
			//line 203 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return nf.symbolNaN;
		}
		
		//line 204 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if ( ! (haxe.lang.Runtime.isFinite(f)) ) 
		{
			//line 205 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			if (( f < 0 )) 
			{
				//line 205 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return nf.symbolNegativeInfinity;
			}
			else
			{
				//line 205 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return nf.symbolPositiveInfinity;
			}
			
		}
		
		//line 206 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (( haxe.lang.Runtime.eq(__temp_significantDigits145, 0) && ( f == 0 ) )) 
		{
			//line 206 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return "";
		}
		else
		{
			//line 206 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return haxe.root.StringTools.lpad(thx.format.NumberFormat.toBase(((int) (f) ), 16, culture), "0", ((int) (haxe.lang.Runtime.toInt(__temp_significantDigits145)) ));
		}
		
	}
	
	
	public static java.lang.String integer(double f, thx.culture.Culture culture)
	{
		//line 213 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		thx.culture.NumberFormatInfo nf = thx.format.NumberFormat.numberFormat(culture);
		//line 214 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (java.lang.Double.isNaN(f)) 
		{
			//line 215 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return nf.symbolNaN;
		}
		
		//line 216 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if ( ! (haxe.lang.Runtime.isFinite(f)) ) 
		{
			//line 217 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			if (( f < 0 )) 
			{
				//line 217 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return nf.symbolNegativeInfinity;
			}
			else
			{
				//line 217 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return nf.symbolPositiveInfinity;
			}
			
		}
		
		//line 218 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		return thx.format.NumberFormat.number(f, 0, culture);
	}
	
	
	public static java.lang.String number(double f, java.lang.Object precision, thx.culture.Culture culture)
	{
		//line 225 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		thx.culture.NumberFormatInfo nf = thx.format.NumberFormat.numberFormat(culture);
		//line 226 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (java.lang.Double.isNaN(f)) 
		{
			//line 227 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return nf.symbolNaN;
		}
		
		//line 228 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if ( ! (haxe.lang.Runtime.isFinite(f)) ) 
		{
			//line 229 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			if (( f < 0 )) 
			{
				//line 229 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return nf.symbolNegativeInfinity;
			}
			else
			{
				//line 229 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return nf.symbolPositiveInfinity;
			}
			
		}
		
		//line 230 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.String pattern = ( (( f < 0 )) ? (thx.culture.Pattern.numberNegatives.__get(nf.patternNegativeNumber)) : ("n") );
		//line 139 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Nulls.hx"
		java.lang.Object t = ( (( null == precision )) ? (null) : (precision) );
		//line 230 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.String formatted = thx.format.NumberFormat.value(f, ( (( ! (haxe.lang.Runtime.eq(t, null)) )) ? (((int) (haxe.lang.Runtime.toInt(t)) )) : (nf.decimalDigitsNumber) ), nf.groupSizesNumber, nf.separatorGroupNumber, nf.separatorDecimalNumber);
		//line 232 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		return haxe.root.StringTools.replace(pattern, "n", formatted);
	}
	
	
	public static java.lang.String octal(double f, java.lang.Object significantDigits, thx.culture.Culture culture)
	{
		//line 238 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.Object __temp_significantDigits146 = ( (haxe.lang.Runtime.eq(significantDigits, null)) ? (((java.lang.Object) (1) )) : (significantDigits) );
		//line 239 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		thx.culture.NumberFormatInfo nf = thx.format.NumberFormat.numberFormat(culture);
		//line 240 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (java.lang.Double.isNaN(f)) 
		{
			//line 241 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return nf.symbolNaN;
		}
		
		//line 242 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if ( ! (haxe.lang.Runtime.isFinite(f)) ) 
		{
			//line 243 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			if (( f < 0 )) 
			{
				//line 243 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return nf.symbolNegativeInfinity;
			}
			else
			{
				//line 243 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return nf.symbolPositiveInfinity;
			}
			
		}
		
		//line 244 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (( haxe.lang.Runtime.eq(__temp_significantDigits146, 0) && ( f == 0 ) )) 
		{
			//line 244 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return "";
		}
		else
		{
			//line 244 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return haxe.root.StringTools.lpad(thx.format.NumberFormat.toBase(((int) (f) ), 8, culture), "0", ((int) (haxe.lang.Runtime.toInt(__temp_significantDigits146)) ));
		}
		
	}
	
	
	public static java.lang.String percent(double f, java.lang.Object decimals, thx.culture.Culture culture)
	{
		//line 251 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		thx.culture.NumberFormatInfo nf = thx.format.NumberFormat.numberFormat(culture);
		//line 252 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (java.lang.Double.isNaN(f)) 
		{
			//line 253 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return nf.symbolNaN;
		}
		
		//line 254 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if ( ! (haxe.lang.Runtime.isFinite(f)) ) 
		{
			//line 255 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			if (( f < 0 )) 
			{
				//line 255 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return nf.symbolNegativeInfinity;
			}
			else
			{
				//line 255 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return nf.symbolPositiveInfinity;
			}
			
		}
		
		//line 256 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		double tmp = ( f * 100 );
		//line 139 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Nulls.hx"
		java.lang.Object t = ( (( null == decimals )) ? (null) : (decimals) );
		//line 256 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		return thx.format.NumberFormat.unit(tmp, ( (( ! (haxe.lang.Runtime.eq(t, null)) )) ? (((int) (haxe.lang.Runtime.toInt(t)) )) : (nf.decimalDigitsPercent) ), nf.symbolPercent, culture);
	}
	
	
	public static java.lang.String permille(double f, java.lang.Object decimals, thx.culture.Culture culture)
	{
		//line 263 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		thx.culture.NumberFormatInfo nf = thx.format.NumberFormat.numberFormat(culture);
		//line 264 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (java.lang.Double.isNaN(f)) 
		{
			//line 265 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return nf.symbolNaN;
		}
		
		//line 266 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if ( ! (haxe.lang.Runtime.isFinite(f)) ) 
		{
			//line 267 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			if (( f < 0 )) 
			{
				//line 267 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return nf.symbolNegativeInfinity;
			}
			else
			{
				//line 267 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return nf.symbolPositiveInfinity;
			}
			
		}
		
		//line 268 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		double tmp = ( f * 1000 );
		//line 139 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Nulls.hx"
		java.lang.Object t = ( (( null == decimals )) ? (null) : (decimals) );
		//line 268 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		return thx.format.NumberFormat.unit(tmp, ( (( ! (haxe.lang.Runtime.eq(t, null)) )) ? (((int) (haxe.lang.Runtime.toInt(t)) )) : (nf.decimalDigitsPercent) ), nf.symbolPermille, culture);
	}
	
	
	public static java.lang.String printf(double f, java.lang.String pattern, thx.culture.Culture culture)
	{
		//line 326 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if ( ! (pattern.startsWith("%")) ) 
		{
			//line 327 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			throw haxe.lang.HaxeException.wrap(( ( "invalid printf term \"" + pattern ) + "\"" ));
		}
		
		//line 328 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.String specifier = haxe.lang.StringExt.substring(pattern, ( pattern.length() - 1 ), null);
		//line 328 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		haxe.root.Array<java.lang.String> p = haxe.lang.StringExt.split(haxe.lang.StringExt.substring(pattern, 1, ( pattern.length() - 1 )), ".");
		//line 328 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.Object precision = ( (( ( null == p.__get(1) ) || haxe.lang.Runtime.valEq("", p.__get(1)) )) ? (null) : (haxe.root.Std.parseInt(p.__get(1))) );
		//line 328 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		boolean justifyRight = true;
		//line 328 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		boolean negativeSignOnly = true;
		//line 328 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		boolean emptySpaceForSign = false;
		//line 328 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		boolean prefix = false;
		//line 328 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.String padding = " ";
		//line 328 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		int width = 0;
		//line 328 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.String flags = p.__get(0);
		//line 339 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		while (( flags.length() > 0 ))
		{
			//line 340 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			{
				//line 340 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				java.lang.String _g = haxe.lang.StringExt.substring(flags, 0, 1);
				//line 340 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				{
					//line 340 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					java.lang.String __temp_svar1 = (_g);
					//line 340 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					boolean __temp_executeDef2 = true;
					//line 340 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					switch (__temp_svar1.hashCode())
					{
						case 32:
						{
							//line 340 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							if (__temp_svar1.equals(" ")) 
							{
								//line 340 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								__temp_executeDef2 = false;
								//line 346 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								emptySpaceForSign = true;
							}
							
							//line 340 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							break;
						}
						
						
						case 48:
						{
							//line 340 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							if (__temp_svar1.equals("0")) 
							{
								//line 340 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								__temp_executeDef2 = false;
								//line 350 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								padding = "0";
							}
							
							//line 340 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							break;
						}
						
						
						case 35:
						{
							//line 340 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							if (__temp_svar1.equals("#")) 
							{
								//line 340 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								__temp_executeDef2 = false;
								//line 348 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								prefix = true;
							}
							
							//line 340 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							break;
						}
						
						
						case 45:
						{
							//line 340 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							if (__temp_svar1.equals("-")) 
							{
								//line 340 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								__temp_executeDef2 = false;
								//line 342 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								justifyRight = false;
							}
							
							//line 340 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							break;
						}
						
						
						case 43:
						{
							//line 340 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							if (__temp_svar1.equals("+")) 
							{
								//line 340 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								__temp_executeDef2 = false;
								//line 344 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								negativeSignOnly = false;
							}
							
							//line 340 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							break;
						}
						
						
					}
					
					//line 351 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (__temp_executeDef2) 
					{
						//line 351 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						if (thx.Ints.canParse(_g)) 
						{
							//line 352 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							width = ((int) (haxe.lang.Runtime.toInt(thx.Ints.parse(flags, null))) );
							//line 353 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							flags = "";
							//line 354 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							continue;
						}
						else
						{
							//line 356 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							throw haxe.lang.HaxeException.wrap(( "invalid flags " + flags ));
						}
						
					}
					
				}
				
			}
			
			//line 358 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			flags = haxe.lang.StringExt.substring(flags, 1, null);
		}
		
		//line 361 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		haxe.lang.Function decorate = new thx.format.NumberFormat_printf_361__Fun(width, prefix, padding, negativeSignOnly, justifyRight, emptySpaceForSign);
		//line 377 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		thx.culture.NumberFormatInfo nf = thx.format.NumberFormat.numberFormat(culture);
		//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		{
			//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			java.lang.String __temp_svar3 = (specifier);
			//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			int __temp_hash5 = __temp_svar3.hashCode();
			//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			boolean __temp_executeDef4 = true;
			//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			switch (__temp_hash5)
			{
				case 37:
				{
					//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (__temp_svar3.equals("%")) 
					{
						//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						__temp_executeDef4 = false;
						//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						return haxe.lang.Runtime.toString(decorate.__hx_invoke5_o(0.0, "%", ((double) (1) ), haxe.lang.Runtime.undefined, 0.0, "", 0.0, "", 0.0, ""));
					}
					
					//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					break;
				}
				
				
				case 120:
				{
					//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (__temp_svar3.equals("x")) 
					{
						//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						__temp_executeDef4 = false;
						//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						return haxe.lang.Runtime.toString(decorate.__hx_invoke5_o(0.0, thx.format.NumberFormat.hex(java.lang.Math.abs(f), precision, culture), f, haxe.lang.Runtime.undefined, 0.0, "0x", 0.0, nf.signNegative, 0.0, nf.signPositive));
					}
					
					//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					break;
				}
				
				
				case 66:
				{
					//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (__temp_svar3.equals("B")) 
					{
						//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						__temp_executeDef4 = false;
						//line 380 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						int v = ((int) (f) );
						//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						return haxe.lang.Runtime.toString(decorate.__hx_invoke5_o(0.0, thx.Ints.toString(( (( v < 0 )) ? ( - (v) ) : (v) ), 2), ((double) (1) ), haxe.lang.Runtime.undefined, 0.0, "B", 0.0, "", 0.0, ""));
					}
					
					//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					break;
				}
				
				
				case 117:
				{
					//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (__temp_svar3.equals("u")) 
					{
						//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						__temp_executeDef4 = false;
						//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						return thx.format.NumberFormat.printf(java.lang.Math.abs(f), "d", culture);
					}
					
					//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					break;
				}
				
				
				case 69:
				{
					//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (__temp_svar3.equals("E")) 
					{
						//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						__temp_executeDef4 = false;
						//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						return haxe.lang.Runtime.toString(decorate.__hx_invoke5_o(0.0, thx.format.NumberFormat.exponential(java.lang.Math.abs(f), precision, 0, "E", culture), f, haxe.lang.Runtime.undefined, 0.0, "", 0.0, nf.signNegative, 0.0, nf.signPositive));
					}
					
					//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					break;
				}
				
				
				case 111:
				{
					//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (__temp_svar3.equals("o")) 
					{
						//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						__temp_executeDef4 = false;
						//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						return haxe.lang.Runtime.toString(decorate.__hx_invoke5_o(0.0, thx.format.NumberFormat.octal(java.lang.Math.abs(f), precision, culture), f, haxe.lang.Runtime.undefined, 0.0, "0", 0.0, nf.signNegative, 0.0, nf.signPositive));
					}
					
					//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					break;
				}
				
				
				case 71:
				{
					//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (__temp_svar3.equals("G")) 
					{
						//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						__temp_executeDef4 = false;
						//line 392 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						java.lang.String e = thx.format.NumberFormat.printf(f, "E", culture);
						//line 392 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						java.lang.String f2 = thx.format.NumberFormat.printf(f, "f", culture);
						//line 394 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						if (( e.length() < f2.length() )) 
						{
							//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							return e;
						}
						else
						{
							//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							return f2;
						}
						
					}
					
					//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					break;
				}
				
				
				case 103:
				{
					//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (__temp_svar3.equals("g")) 
					{
						//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						__temp_executeDef4 = false;
						//line 388 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						java.lang.String e1 = thx.format.NumberFormat.printf(f, "e", culture);
						//line 388 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						java.lang.String f3 = thx.format.NumberFormat.printf(f, "f", culture);
						//line 390 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						if (( e1.length() < f3.length() )) 
						{
							//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							return e1;
						}
						else
						{
							//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							return f3;
						}
						
					}
					
					//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					break;
				}
				
				
				case 88:
				{
					//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (__temp_svar3.equals("X")) 
					{
						//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						__temp_executeDef4 = false;
						//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						return haxe.lang.Runtime.toString(decorate.__hx_invoke5_o(0.0, thx.format.NumberFormat.hex(java.lang.Math.abs(f), precision, culture), f, haxe.lang.Runtime.undefined, 0.0, "0X", 0.0, nf.signNegative, 0.0, nf.signPositive));
					}
					
					//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					break;
				}
				
				
				case 102:
				{
					//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (__temp_svar3.equals("f")) 
					{
						//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						__temp_executeDef4 = false;
						//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						return haxe.lang.Runtime.toString(decorate.__hx_invoke5_o(0.0, thx.format.NumberFormat.fixed(java.lang.Math.abs(f), precision, culture), f, haxe.lang.Runtime.undefined, 0.0, "", 0.0, nf.signNegative, 0.0, nf.signPositive));
					}
					
					//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					break;
				}
				
				
				case 98:
				{
					//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (__temp_svar3.equals("b")) 
					{
						//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						__temp_executeDef4 = false;
						//line 379 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						int v1 = ((int) (f) );
						//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						return haxe.lang.Runtime.toString(decorate.__hx_invoke5_o(0.0, thx.Ints.toString(( (( v1 < 0 )) ? ( - (v1) ) : (v1) ), 2), ((double) (1) ), haxe.lang.Runtime.undefined, 0.0, "b", 0.0, "", 0.0, ""));
					}
					
					//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					break;
				}
				
				
				case 101:
				{
					//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (__temp_svar3.equals("e")) 
					{
						//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						__temp_executeDef4 = false;
						//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						return haxe.lang.Runtime.toString(decorate.__hx_invoke5_o(0.0, thx.format.NumberFormat.exponential(java.lang.Math.abs(f), precision, 0, "e", culture), f, haxe.lang.Runtime.undefined, 0.0, "", 0.0, nf.signNegative, 0.0, nf.signPositive));
					}
					
					//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					break;
				}
				
				
				case 99:
				{
					//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (__temp_svar3.equals("c")) 
					{
						//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						__temp_executeDef4 = false;
						//line 381 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						int v2 = ((int) (f) );
						//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						return haxe.lang.Runtime.toString(decorate.__hx_invoke5_o(0.0, Character.toString((char) ( (( v2 < 0 )) ? ( - (v2) ) : (v2) )), ((double) (1) ), haxe.lang.Runtime.undefined, 0.0, "", 0.0, "", 0.0, ""));
					}
					
					//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					break;
				}
				
				
				case 105:
				case 100:
				{
					//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (( (( ( __temp_hash5 == 105 ) && __temp_svar3.equals("i") )) || __temp_svar3.equals("d") )) 
					{
						//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						__temp_executeDef4 = false;
						//line 383 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						java.lang.String tmp = ( "" + ((int) (java.lang.Math.round(f)) ) );
						//line 383 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						java.lang.Object _0 = precision;
						//line 139 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Nulls.hx"
						java.lang.Object t = ( (( null == _0 )) ? (null) : (_0) );
						//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						return haxe.lang.Runtime.toString(decorate.__hx_invoke5_o(0.0, haxe.root.StringTools.lpad(tmp, "0", ( (( ! (haxe.lang.Runtime.eq(t, null)) )) ? (((int) (haxe.lang.Runtime.toInt(t)) )) : (0) )), f, haxe.lang.Runtime.undefined, 0.0, "", 0.0, nf.signNegative, 0.0, nf.signPositive));
					}
					
					//line 378 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					break;
				}
				
				
			}
			
			//line 400 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			if (__temp_executeDef4) 
			{
				//line 400 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				throw haxe.lang.HaxeException.wrap(( ( "invalid pattern \"" + pattern ) + "\"" ));
			}
			else
			{
				//line 400 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				throw null;
			}
			
		}
		
	}
	
	
	public static java.lang.String toBase(int value, int base, thx.culture.Culture culture)
	{
		//line 408 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		thx.culture.NumberFormatInfo nf = thx.format.NumberFormat.numberFormat(culture);
		//line 413 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (( ( base < 2 ) || ( base > thx.format.NumberFormat.BASE.length() ) )) 
		{
			//line 414 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			throw haxe.lang.HaxeException.wrap(( ( ( "invalid base " + base ) + ", it must be between 2 and " ) + thx.format.NumberFormat.BASE.length() ));
		}
		
		//line 415 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (( ( base == 10 ) || ( value == 0 ) )) 
		{
			//line 416 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return ( "" + value );
		}
		
		//line 418 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.String buf = "";
		//line 418 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		int abs = ( (( value < 0 )) ? ( - (value) ) : (value) );
		//line 420 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		while (( abs > 0 ))
		{
			//line 421 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			buf = ( haxe.lang.StringExt.charAt(thx.format.NumberFormat.BASE, ( abs % base )) + buf );
			//line 422 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			abs = ((int) (( abs / base )) );
		}
		
		//line 425 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		return ( (( (( value < 0 )) ? (nf.signNegative) : ("") )) + buf );
	}
	
	
	public static java.lang.String unit(double f, int decimals, java.lang.String unitSymbol, thx.culture.Culture culture)
	{
		//line 433 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		thx.culture.NumberFormatInfo nf = thx.format.NumberFormat.numberFormat(culture);
		//line 434 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (java.lang.Double.isNaN(f)) 
		{
			//line 435 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return nf.symbolNaN;
		}
		
		//line 436 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if ( ! (haxe.lang.Runtime.isFinite(f)) ) 
		{
			//line 437 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			if (( f < 0 )) 
			{
				//line 437 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return nf.symbolNegativeInfinity;
			}
			else
			{
				//line 437 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return nf.symbolPositiveInfinity;
			}
			
		}
		
		//line 438 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.String pattern = ( (( f < 0 )) ? (thx.culture.Pattern.percentNegatives.__get(nf.patternNegativePercent)) : (thx.culture.Pattern.percentPositives.__get(nf.patternPositivePercent)) );
		//line 438 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.String formatted = thx.format.NumberFormat.value(f, decimals, nf.groupSizesPercent, nf.separatorGroupPercent, nf.separatorDecimalPercent);
		//line 440 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		return haxe.root.StringTools.replace(haxe.root.StringTools.replace(pattern, "n", formatted), "%", unitSymbol);
	}
	
	
	public static java.lang.String BASE;
	
	public static int countSymbols(java.lang.String pattern, java.lang.String symbols)
	{
		//line 447 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		int i = 0;
		//line 447 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		int quote = 0;
		//line 447 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		int count = 0;
		//line 450 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		while (( i < pattern.length() ))
		{
			//line 451 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			{
				//line 451 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				java.lang.String _g = haxe.lang.StringExt.substring(pattern, i, ( i + 1 ));
				//line 451 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				{
					//line 451 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					java.lang.String __temp_svar1 = (_g);
					//line 451 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					boolean __temp_executeDef2 = true;
					//line 451 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					switch (__temp_svar1.hashCode())
					{
						case 34:
						{
							//line 451 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							if (__temp_svar1.equals("\"")) 
							{
								//line 451 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								__temp_executeDef2 = false;
								//line 451 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								switch (quote)
								{
									case 0:
									{
										//line 456 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										quote = 2;
										//line 456 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									case 2:
									{
										//line 454 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										quote = 0;
										//line 454 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									default:
									{
										//line 458 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
								}
								
							}
							
							//line 451 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							break;
						}
						
						
						case 92:
						{
							//line 451 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							if (__temp_svar1.equals("\\")) 
							{
								//line 451 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								__temp_executeDef2 = false;
								//line 452 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								 ++ i;
							}
							
							//line 451 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							break;
						}
						
						
						case 39:
						{
							//line 451 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							if (__temp_svar1.equals("\'")) 
							{
								//line 451 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								__temp_executeDef2 = false;
								//line 451 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								switch (quote)
								{
									case 0:
									{
										//line 455 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										quote = 1;
										//line 455 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									case 1:
									{
										//line 454 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										quote = 0;
										//line 454 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									default:
									{
										//line 458 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
								}
								
							}
							
							//line 451 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							break;
						}
						
						
					}
					
					//line 451 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (__temp_executeDef2) 
					{
						//line 451 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						switch (quote)
						{
							case 0:
							{
								//line 457 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								if (( haxe.lang.StringExt.indexOf(symbols, _g, null) >= 0 )) 
								{
									//line 457 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
									 ++ count;
								}
								
								//line 457 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								break;
							}
							
							
							default:
							{
								//line 458 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								break;
							}
							
						}
						
					}
					
				}
				
			}
			
			//line 460 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			 ++ i;
		}
		
		//line 462 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		return count;
	}
	
	
	public static java.lang.String customFormatDecimalFraction(java.lang.String d, java.lang.String pattern, thx.culture.NumberFormatInfo nf)
	{
		//line 466 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.String buf = "";
		//line 466 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		int i = 0;
		//line 466 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		int quote = 0;
		//line 466 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		haxe.root.Array<java.lang.String> p = haxe.lang.StringExt.split(d, "");
		//line 471 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		while (( i < pattern.length() ))
		{
			//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			{
				//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				java.lang.String _g = haxe.lang.StringExt.substring(pattern, i, ( i + 1 ));
				//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				{
					//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					java.lang.String __temp_svar1 = (_g);
					//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					boolean __temp_executeDef2 = true;
					//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					switch (__temp_svar1.hashCode())
					{
						case 34:
						{
							//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							if (__temp_svar1.equals("\"")) 
							{
								//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								__temp_executeDef2 = false;
								//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								switch (quote)
								{
									case 0:
									{
										//line 477 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										quote = 2;
										//line 477 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									case 1:
									{
										//line 485 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf += _g;
										//line 485 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									case 2:
									{
										//line 482 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										quote = 0;
										//line 482 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									default:
									{
										//line 499 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf += _g;
										//line 499 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
								}
								
							}
							
							//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							break;
						}
						
						
						case 8240:
						{
							//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							if (__temp_svar1.equals("\u2030")) 
							{
								//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								__temp_executeDef2 = false;
								//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								switch (quote)
								{
									case 0:
									{
										//line 497 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf += nf.symbolPermille;
										//line 497 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									case 1:
									case 2:
									{
										//line 485 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf += _g;
										//line 485 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									default:
									{
										//line 499 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf += _g;
										//line 499 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
								}
								
							}
							
							//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							break;
						}
						
						
						case 35:
						{
							//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							if (__temp_svar1.equals("#")) 
							{
								//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								__temp_executeDef2 = false;
								//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								switch (quote)
								{
									case 0:
									{
										//line 491 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf += ( (( p.length == 0 )) ? ("") : (haxe.lang.Runtime.toString(p.shift())) );
										//line 491 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									case 1:
									case 2:
									{
										//line 485 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf += _g;
										//line 485 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									default:
									{
										//line 499 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf += _g;
										//line 499 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
								}
								
							}
							
							//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							break;
						}
						
						
						case 92:
						{
							//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							if (__temp_svar1.equals("\\")) 
							{
								//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								__temp_executeDef2 = false;
								//line 474 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								 ++ i;
								//line 475 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								buf += haxe.lang.StringExt.substring(pattern, i, ( i + 1 ));
							}
							
							//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							break;
						}
						
						
						case 36:
						{
							//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							if (__temp_svar1.equals("$")) 
							{
								//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								__temp_executeDef2 = false;
								//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								switch (quote)
								{
									case 0:
									{
										//line 493 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf += nf.symbolCurrency;
										//line 493 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									case 1:
									case 2:
									{
										//line 485 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf += _g;
										//line 485 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									default:
									{
										//line 499 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf += _g;
										//line 499 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
								}
								
							}
							
							//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							break;
						}
						
						
						case 48:
						{
							//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							if (__temp_svar1.equals("0")) 
							{
								//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								__temp_executeDef2 = false;
								//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								switch (quote)
								{
									case 0:
									{
										//line 488 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf += ( (( p.length == 0 )) ? ("0") : (haxe.lang.Runtime.toString(p.shift())) );
										//line 488 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									case 1:
									case 2:
									{
										//line 485 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf += _g;
										//line 485 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									default:
									{
										//line 499 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf += _g;
										//line 499 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
								}
								
							}
							
							//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							break;
						}
						
						
						case 37:
						{
							//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							if (__temp_svar1.equals("%")) 
							{
								//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								__temp_executeDef2 = false;
								//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								switch (quote)
								{
									case 0:
									{
										//line 495 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf += nf.symbolPercent;
										//line 495 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									case 1:
									case 2:
									{
										//line 485 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf += _g;
										//line 485 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									default:
									{
										//line 499 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf += _g;
										//line 499 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
								}
								
							}
							
							//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							break;
						}
						
						
						case 39:
						{
							//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							if (__temp_svar1.equals("\'")) 
							{
								//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								__temp_executeDef2 = false;
								//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								switch (quote)
								{
									case 0:
									{
										//line 479 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										quote = 1;
										//line 479 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									case 1:
									{
										//line 482 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										quote = 0;
										//line 482 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									case 2:
									{
										//line 485 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf += _g;
										//line 485 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									default:
									{
										//line 499 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf += _g;
										//line 499 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
								}
								
							}
							
							//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							break;
						}
						
						
					}
					
					//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (__temp_executeDef2) 
					{
						//line 472 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						switch (quote)
						{
							case 1:
							case 2:
							{
								//line 485 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								buf += _g;
								//line 485 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								break;
							}
							
							
							default:
							{
								//line 499 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								buf += _g;
								//line 499 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								break;
							}
							
						}
						
					}
					
				}
				
			}
			
			//line 501 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			 ++ i;
		}
		
		//line 503 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		return buf;
	}
	
	
	public static java.lang.String customFormatF(double f, java.lang.String pattern, thx.culture.NumberFormatInfo nf, boolean isCurrency, boolean isPercent)
	{
		//line 508 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (isPercent) 
		{
			//line 509 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			f *= ((double) (( (thx.format.NumberFormat.hasSymbols(pattern, "\u2030")) ? (1000) : (100) )) );
		}
		
		//line 511 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		haxe.root.Array<java.lang.String> exp = thx.format.NumberFormat.splitPattern(pattern, "eE");
		//line 512 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (( exp.length > 1 )) 
		{
			//line 513 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			java.lang.Object info = thx.format.NumberFormat.exponentialInfo(f);
			//line 513 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			java.lang.String symbol = haxe.lang.StringExt.substring(pattern, exp.__get(0).length(), ( exp.__get(0).length() + 1 ));
			//line 513 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			boolean forceSign = exp.__get(1).startsWith("+");
			//line 516 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			if (( forceSign || exp.__get(1).startsWith("-") )) 
			{
				//line 517 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				exp.__set(1, haxe.lang.StringExt.substring(exp.__get(1), 1, null));
			}
			
			//line 518 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return ( ( ( thx.format.NumberFormat.customIntegerAndFraction(haxe.lang.Runtime.getField_f(info, "f", true), exp.__get(0), nf, isCurrency, isPercent) + symbol ) + (( (( haxe.lang.Runtime.compare(haxe.lang.Runtime.getField(info, "e", true), 0) < 0 )) ? (nf.signNegative) : (( (forceSign) ? (nf.signPositive) : ("") )) )) ) + thx.format.NumberFormat.customFormatInteger(( "" + haxe.lang.Runtime.toString(java.lang.Math.abs(((double) (haxe.lang.Runtime.toDouble(haxe.lang.Runtime.getField(info, "e", true))) ))) ), exp.__get(1), nf, isCurrency, isPercent) );
		}
		else
		{
			//line 523 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return thx.format.NumberFormat.customIntegerAndFraction(f, pattern, nf, isCurrency, isPercent);
		}
		
	}
	
	
	public static java.lang.String customFormatInteger(java.lang.String v, java.lang.String pattern, thx.culture.NumberFormatInfo nf, boolean isCurrency, boolean isPercent)
	{
		//line 528 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		haxe.root.Array<thx.format._NumberFormat.CustomFormat> buf = new haxe.root.Array<thx.format._NumberFormat.CustomFormat>(new thx.format._NumberFormat.CustomFormat[]{});
		//line 528 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		int i = 0;
		//line 528 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		int quote = 0;
		//line 528 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		haxe.root.Array<java.lang.String> p = haxe.lang.StringExt.split(v, "");
		//line 528 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.String lbuf = "";
		//line 528 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		boolean first = true;
		//line 528 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		boolean useGroups = false;
		//line 528 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		int zeroes = 0;
		//line 537 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		while (( i < pattern.length() ))
		{
			//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			{
				//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				java.lang.String _g = haxe.lang.StringExt.substring(pattern, i, ( i + 1 ));
				//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				{
					//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					java.lang.String __temp_svar1 = (_g);
					//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					boolean __temp_executeDef2 = true;
					//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					switch (__temp_svar1.hashCode())
					{
						case 34:
						{
							//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							if (__temp_svar1.equals("\"")) 
							{
								//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								__temp_executeDef2 = false;
								//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								switch (quote)
								{
									case 0:
									{
										//line 543 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										quote = 2;
										//line 543 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									case 1:
									{
										//line 553 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										lbuf += _g;
										//line 553 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									case 2:
									{
										//line 548 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										quote = 0;
										//line 549 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf.push(thx.format._NumberFormat.CustomFormat.Literal(lbuf));
										//line 550 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										lbuf = "";
										//line 546 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									default:
									{
										//line 570 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf.push(thx.format._NumberFormat.CustomFormat.Literal(_g));
										//line 570 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
								}
								
							}
							
							//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							break;
						}
						
						
						case 8240:
						{
							//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							if (__temp_svar1.equals("\u2030")) 
							{
								//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								__temp_executeDef2 = false;
								//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								switch (quote)
								{
									case 0:
									{
										//line 568 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf.push(thx.format._NumberFormat.CustomFormat.Literal(nf.symbolPermille));
										//line 568 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									case 1:
									case 2:
									{
										//line 553 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										lbuf += _g;
										//line 553 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									default:
									{
										//line 570 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf.push(thx.format._NumberFormat.CustomFormat.Literal(_g));
										//line 570 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
								}
								
							}
							
							//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							break;
						}
						
						
						case 35:
						{
							//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							if (__temp_svar1.equals("#")) 
							{
								//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								__temp_executeDef2 = false;
								//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								switch (quote)
								{
									case 0:
									{
										//line 561 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf.push(thx.format._NumberFormat.CustomFormat.Hash(first));
										//line 562 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										first = false;
										//line 560 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									case 1:
									case 2:
									{
										//line 553 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										lbuf += _g;
										//line 553 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									default:
									{
										//line 570 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf.push(thx.format._NumberFormat.CustomFormat.Literal(_g));
										//line 570 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
								}
								
							}
							
							//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							break;
						}
						
						
						case 92:
						{
							//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							if (__temp_svar1.equals("\\")) 
							{
								//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								__temp_executeDef2 = false;
								//line 540 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								 ++ i;
								//line 541 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								buf.push(thx.format._NumberFormat.CustomFormat.Literal(haxe.lang.StringExt.substring(pattern, i, ( i + 1 ))));
							}
							
							//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							break;
						}
						
						
						case 36:
						{
							//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							if (__temp_svar1.equals("$")) 
							{
								//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								__temp_executeDef2 = false;
								//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								switch (quote)
								{
									case 0:
									{
										//line 564 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf.push(thx.format._NumberFormat.CustomFormat.Literal(nf.symbolCurrency));
										//line 564 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									case 1:
									case 2:
									{
										//line 553 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										lbuf += _g;
										//line 553 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									default:
									{
										//line 570 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf.push(thx.format._NumberFormat.CustomFormat.Literal(_g));
										//line 570 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
								}
								
							}
							
							//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							break;
						}
						
						
						case 48:
						{
							//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							if (__temp_svar1.equals("0")) 
							{
								//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								__temp_executeDef2 = false;
								//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								switch (quote)
								{
									case 0:
									{
										//line 557 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf.push(thx.format._NumberFormat.CustomFormat.Zero(first));
										//line 558 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										first = false;
										//line 559 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										 ++ zeroes;
										//line 556 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									case 1:
									case 2:
									{
										//line 553 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										lbuf += _g;
										//line 553 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									default:
									{
										//line 570 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf.push(thx.format._NumberFormat.CustomFormat.Literal(_g));
										//line 570 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
								}
								
							}
							
							//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							break;
						}
						
						
						case 37:
						{
							//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							if (__temp_svar1.equals("%")) 
							{
								//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								__temp_executeDef2 = false;
								//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								switch (quote)
								{
									case 0:
									{
										//line 566 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf.push(thx.format._NumberFormat.CustomFormat.Literal(nf.symbolPercent));
										//line 566 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									case 1:
									case 2:
									{
										//line 553 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										lbuf += _g;
										//line 553 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									default:
									{
										//line 570 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf.push(thx.format._NumberFormat.CustomFormat.Literal(_g));
										//line 570 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
								}
								
							}
							
							//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							break;
						}
						
						
						case 44:
						{
							//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							if (__temp_svar1.equals(",")) 
							{
								//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								__temp_executeDef2 = false;
								//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								switch (quote)
								{
									case 0:
									{
										//line 555 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										useGroups = true;
										//line 555 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									case 1:
									case 2:
									{
										//line 553 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										lbuf += _g;
										//line 553 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									default:
									{
										//line 570 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf.push(thx.format._NumberFormat.CustomFormat.Literal(_g));
										//line 570 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
								}
								
							}
							
							//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							break;
						}
						
						
						case 39:
						{
							//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							if (__temp_svar1.equals("\'")) 
							{
								//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								__temp_executeDef2 = false;
								//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								switch (quote)
								{
									case 0:
									{
										//line 545 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										quote = 1;
										//line 545 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									case 1:
									{
										//line 548 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										quote = 0;
										//line 549 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf.push(thx.format._NumberFormat.CustomFormat.Literal(lbuf));
										//line 550 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										lbuf = "";
										//line 546 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									case 2:
									{
										//line 553 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										lbuf += _g;
										//line 553 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									default:
									{
										//line 570 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										buf.push(thx.format._NumberFormat.CustomFormat.Literal(_g));
										//line 570 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
								}
								
							}
							
							//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							break;
						}
						
						
					}
					
					//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (__temp_executeDef2) 
					{
						//line 538 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						switch (quote)
						{
							case 1:
							case 2:
							{
								//line 553 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								lbuf += _g;
								//line 553 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								break;
							}
							
							
							default:
							{
								//line 570 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								buf.push(thx.format._NumberFormat.CustomFormat.Literal(_g));
								//line 570 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								break;
							}
							
						}
						
					}
					
				}
				
			}
			
			//line 572 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			 ++ i;
		}
		
		//line 574 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (( lbuf.length() > 0 )) 
		{
			//line 575 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			buf.push(thx.format._NumberFormat.CustomFormat.Literal(lbuf));
		}
		
		//line 577 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		{
			//line 577 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			int _g1 = p.length;
			//line 577 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			int _g2 = zeroes;
			//line 577 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			while (( _g1 < _g2 ))
			{
				//line 577 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				 ++ _g1;
				//line 578 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				p.unshift("0");
			}
			
		}
		
		//line 580 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (useGroups) 
		{
			//line 581 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			i = ( p.length - 1 );
			//line 582 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			haxe.root.Array<java.lang.Object> groups = ( (isCurrency) ? (((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (nf.groupSizesCurrency.copy()) )) )) : (( (isPercent) ? (((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (nf.groupSizesPercent.copy()) )) )) : (((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (nf.groupSizesNumber.copy()) )) )) )) );
			//line 582 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			java.lang.Object group = groups.shift();
			//line 582 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			int pos = 0;
			//line 589 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			while (( i >= 0 ))
			{
				//line 590 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				if (haxe.lang.Runtime.eq(group, 0)) 
				{
					//line 590 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					break;
				}
				
				//line 591 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				if (haxe.lang.Runtime.eq(pos, group)) 
				{
					//line 592 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					p.__set(i, ( p.__get(i) + (( (isCurrency) ? (nf.separatorGroupCurrency) : (( (isPercent) ? (nf.separatorGroupPercent) : (nf.separatorGroupNumber) )) )) ));
					//line 597 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					pos = 0;
					//line 598 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (( groups.length > 0 )) 
					{
						//line 599 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						group = groups.shift();
					}
					
				}
				else
				{
					//line 601 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					 ++ pos;
					//line 602 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					 -- i;
				}
				
			}
			
		}
		
		//line 607 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		buf.reverse();
		//line 608 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		haxe.root.Array<java.lang.String> r = ((haxe.root.Array<java.lang.String>) (((haxe.root.Array) (buf.map(((haxe.lang.Function) (new thx.format.NumberFormat_customFormatInteger_608__Fun(p)) ))) )) );
		//line 613 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		r.reverse();
		//line 614 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		return r.join("");
	}
	
	
	public static java.lang.String customIntegerAndFraction(double f, java.lang.String pattern, thx.culture.NumberFormatInfo nf, boolean isCurrency, boolean isPercent)
	{
		//line 618 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		haxe.root.Array<java.lang.String> p = thx.format.NumberFormat.splitPattern(pattern, ".");
		//line 618 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		int power = ( p.__get(0).length() - (p.__set(0, thx.Strings.trimCharsRight(p.__get(0), ","))).length() );
		//line 620 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		f /= java.lang.Math.pow(((double) (1000) ), ((double) (power) ));
		//line 621 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (( p.length == 1 )) 
		{
			//line 622 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return thx.format.NumberFormat.customFormatInteger(( "" + ((int) (java.lang.Math.round(f)) ) ), p.__get(0), nf, isCurrency, isPercent);
		}
		else
		{
			//line 624 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			f = thx.Floats.roundTo(f, thx.format.NumberFormat.countSymbols(p.__get(1), "#0"));
			//line 625 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			haxe.root.Array<java.lang.String> np = thx.format.NumberFormat.splitOnDecimalSeparator(f);
			//line 626 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			java.lang.String tmp = ( thx.format.NumberFormat.customFormatInteger(np.__get(0), p.__get(0), nf, isCurrency, isPercent) + (( (isCurrency) ? (nf.separatorDecimalCurrency) : (( (isPercent) ? (nf.separatorDecimalPercent) : (nf.separatorDecimalNumber) )) )) );
			//line 632 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			java.lang.String tmp1 = null;
			//line 632 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			if (( null == np )) 
			{
				//line 632 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				tmp1 = null;
			}
			else
			{
				//line 632 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				java.lang.String _1 = np.__get(1);
				//line 632 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				if (( null == _1 )) 
				{
					//line 632 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					tmp1 = null;
				}
				else
				{
					//line 632 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					tmp1 = _1;
				}
				
			}
			
			//line 139 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Nulls.hx"
			java.lang.String t = haxe.lang.Runtime.toString(tmp1);
			//line 626 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return ( tmp + thx.format.NumberFormat.customFormatDecimalFraction(( (( t != null )) ? (t) : ("0") ), p.__get(1), nf) );
		}
		
	}
	
	
	public static java.lang.Object exponentialInfo(double f)
	{
		//line 637 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.String s = (( "" + haxe.lang.Runtime.toString(java.lang.Math.abs(f)) )).toLowerCase();
		//line 637 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		int pose = haxe.lang.StringExt.indexOf(s, "e", null);
		//line 637 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		haxe.root.Array<java.lang.String> p = null;
		//line 637 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.Object e = null;
		//line 641 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (( pose > 0 )) 
		{
			//line 642 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			p = haxe.lang.StringExt.split(haxe.lang.StringExt.substring(s, 0, pose), ".");
			//line 643 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			e = thx.Ints.parse(haxe.lang.StringExt.substring(s, ( pose + 1 ), null), null);
		}
		else
		{
			//line 645 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			p = haxe.lang.StringExt.split(s, ".").concat(new haxe.root.Array<java.lang.String>(new java.lang.String[]{""}));
			//line 646 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			e = 0;
			//line 647 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			if (( p.__get(0).length() > 1 )) 
			{
				//line 648 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				e = ( p.__get(0).length() - 1 );
				//line 649 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				p.__set(1, ( haxe.lang.StringExt.substring(p.__get(0), 1, null) + p.__get(1) ));
				//line 650 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				p.__set(0, haxe.lang.StringExt.substring(p.__get(0), 0, 1));
			}
			else
			{
				//line 651 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				if (haxe.lang.Runtime.valEq(p.__get(0), "0")) 
				{
					//line 652 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					e =  - ((( ( 1 + p.__get(1).length() ) - thx.Strings.trimCharsLeft(p.__get(1), "0").length() ))) ;
					//line 653 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					p.__set(1, haxe.lang.StringExt.substring(p.__get(1), ( ( - (((int) (haxe.lang.Runtime.toInt(e)) )) ) - 1 ), null));
					//line 654 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					p.__set(0, haxe.lang.StringExt.substring(p.__get(1), 0, 1));
					//line 655 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					p.__set(1, haxe.lang.StringExt.substring(p.__get(1), 1, null));
				}
				
			}
			
		}
		
		//line 658 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		{
			//line 660 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			double __temp_odecl1 = ( (( (( f < 0 )) ? (-1) : (1) )) * haxe.root.Std.parseFloat(p.slice(0, 2).join(".")) );
			//line 658 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return new haxe.lang.DynamicObject(new java.lang.String[]{"e"}, new java.lang.Object[]{e}, new java.lang.String[]{"f"}, new double[]{((double) (__temp_odecl1) )});
		}
		
	}
	
	
	public static boolean hasSymbols(java.lang.String pattern, java.lang.String symbols)
	{
		//line 665 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		int i = 0;
		//line 665 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		int quote = 0;
		//line 667 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		while (( i < pattern.length() ))
		{
			//line 668 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			{
				//line 668 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				java.lang.String _g = haxe.lang.StringExt.substring(pattern, i, ( i + 1 ));
				//line 668 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				{
					//line 668 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					java.lang.String __temp_svar1 = (_g);
					//line 668 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					boolean __temp_executeDef2 = true;
					//line 668 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					switch (__temp_svar1.hashCode())
					{
						case 34:
						{
							//line 668 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							if (__temp_svar1.equals("\"")) 
							{
								//line 668 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								__temp_executeDef2 = false;
								//line 668 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								switch (quote)
								{
									case 0:
									{
										//line 673 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										quote = 2;
										//line 673 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									case 2:
									{
										//line 671 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										quote = 0;
										//line 671 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									default:
									{
										//line 675 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
								}
								
							}
							
							//line 668 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							break;
						}
						
						
						case 92:
						{
							//line 668 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							if (__temp_svar1.equals("\\")) 
							{
								//line 668 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								__temp_executeDef2 = false;
								//line 669 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								 ++ i;
							}
							
							//line 668 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							break;
						}
						
						
						case 39:
						{
							//line 668 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							if (__temp_svar1.equals("\'")) 
							{
								//line 668 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								__temp_executeDef2 = false;
								//line 668 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								switch (quote)
								{
									case 0:
									{
										//line 672 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										quote = 1;
										//line 672 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									case 1:
									{
										//line 671 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										quote = 0;
										//line 671 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									default:
									{
										//line 675 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
								}
								
							}
							
							//line 668 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							break;
						}
						
						
					}
					
					//line 668 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (__temp_executeDef2) 
					{
						//line 668 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						switch (quote)
						{
							case 0:
							{
								//line 674 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								if (( haxe.lang.StringExt.indexOf(symbols, _g, null) >= 0 )) 
								{
									//line 674 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
									return true;
								}
								
								//line 674 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								break;
							}
							
							
							default:
							{
								//line 675 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								break;
							}
							
						}
						
					}
					
				}
				
			}
			
			//line 677 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			 ++ i;
		}
		
		//line 679 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		return false;
	}
	
	
	public static java.lang.String intPart(java.lang.String s, haxe.root.Array<java.lang.Object> groupSizes, java.lang.String groupSeparator)
	{
		//line 683 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		haxe.root.Array<java.lang.String> buf = new haxe.root.Array<java.lang.String>(new java.lang.String[]{});
		//line 683 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		haxe.root.Array<java.lang.Object> sizes = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (groupSizes.copy()) )) );
		//line 683 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.Object size = sizes.shift();
		//line 688 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		while (( s.length() > 0 ))
		{
			//line 689 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			if (haxe.lang.Runtime.eq(size, 0)) 
			{
				//line 690 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				buf.unshift(s);
				//line 691 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				s = "";
			}
			else
			{
				//line 692 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				if (( haxe.lang.Runtime.compare(s.length(), size) > 0 )) 
				{
					//line 693 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					buf.unshift(haxe.lang.StringExt.substring(s, ( ((int) (s.length()) ) - ((int) (haxe.lang.Runtime.toInt(size)) ) ), null));
					//line 694 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					s = haxe.lang.StringExt.substring(s, 0, ( ((int) (s.length()) ) - ((int) (haxe.lang.Runtime.toInt(size)) ) ));
					//line 695 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (( sizes.length > 0 )) 
					{
						//line 696 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						size = sizes.shift();
					}
					
				}
				else
				{
					//line 698 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					buf.unshift(s);
					//line 699 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					s = "";
				}
				
			}
			
		}
		
		//line 702 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		return buf.join(groupSeparator);
	}
	
	
	public static thx.culture.NumberFormatInfo numberFormat(thx.culture.Culture culture)
	{
		//line 706 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (( ( null != culture ) && ( null != culture.number ) )) 
		{
			//line 706 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return culture.number;
		}
		else
		{
			//line 706 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return thx.format.Format.get_defaultCulture().number;
		}
		
	}
	
	
	public static java.lang.String pad(java.lang.String s, int len, boolean round)
	{
		//line 709 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.String _0 = s;
		//line 139 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Nulls.hx"
		java.lang.String t = haxe.lang.Runtime.toString(( (( null == _0 )) ? (null) : (_0) ));
		//line 139 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Nulls.hx"
		if (( t != null )) 
		{
			//line 139 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Nulls.hx"
			s = t;
		}
		else
		{
			//line 709 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			s = "";
		}
		
		//line 710 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (( ( len > 0 ) && ( s.length() > len ) )) 
		{
			//line 711 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			if (round) 
			{
				//line 712 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return ( haxe.lang.StringExt.substring(s, 0, ( len - 1 )) + (((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.plus(haxe.root.Std.parseInt(haxe.lang.StringExt.substring(s, ( len - 1 ), len)), (( (( haxe.lang.Runtime.compare(haxe.root.Std.parseInt(haxe.lang.StringExt.substring(s, len, ( len + 1 ))), 5) >= 0 )) ? (1) : (0) ))))) )) );
			}
			else
			{
				//line 714 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				return haxe.lang.StringExt.substring(s, 0, len);
			}
			
		}
		else
		{
			//line 717 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return haxe.root.StringTools.rpad(s, "0", len);
		}
		
	}
	
	
	public static java.lang.Object paramOrNull(java.lang.String param)
	{
		//line 722 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (( param.length() == 0 )) 
		{
			//line 722 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return null;
		}
		else
		{
			//line 722 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return haxe.root.Std.parseInt(param);
		}
		
	}
	
	
	public static haxe.root.Array<java.lang.String> splitOnDecimalSeparator(double f)
	{
		//line 725 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		haxe.root.Array<java.lang.String> p = haxe.lang.StringExt.split((( "" + haxe.lang.Runtime.toString(f) )), ".");
		//line 725 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.String i = p.__get(0);
		//line 727 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		haxe.root.Array<java.lang.String> _0 = p;
		//line 727 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.String tmp = null;
		//line 727 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (( null == _0 )) 
		{
			//line 727 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			tmp = null;
		}
		else
		{
			//line 727 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			java.lang.String _1 = _0.__get(1);
			//line 727 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			if (( null == _1 )) 
			{
				//line 727 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				tmp = null;
			}
			else
			{
				//line 727 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				tmp = _1;
			}
			
		}
		
		//line 139 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Nulls.hx"
		java.lang.String t = haxe.lang.Runtime.toString(tmp);
		//line 725 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		java.lang.String d = (( (( t != null )) ? (t) : ("") )).toLowerCase();
		//line 729 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (( haxe.lang.StringExt.indexOf(d, "e", null) >= 0 )) 
		{
			//line 730 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			p = haxe.lang.StringExt.split(d, "e");
			//line 731 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			d = p.__get(0);
			//line 732 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			java.lang.Object e = thx.Ints.parse(p.__get(1), null);
			//line 733 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			if (( haxe.lang.Runtime.compare(e, 0) < 0 )) 
			{
				//line 734 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				d = ( ( haxe.root.StringTools.rpad("", "0", ( ( - (((int) (haxe.lang.Runtime.toInt(e)) )) ) - 1 )) + i ) + d );
				//line 735 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				i = "0";
			}
			else
			{
				//line 737 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				java.lang.String s = ( i + d );
				//line 738 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				d = haxe.lang.StringExt.substring(s, ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.plus(e, 1))) ), null);
				//line 739 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				i = thx.format.NumberFormat.pad(s, ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.plus(e, 1))) ), false);
			}
			
		}
		
		//line 743 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (( d.length() > 0 )) 
		{
			//line 744 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return new haxe.root.Array<java.lang.String>(new java.lang.String[]{i, d});
		}
		else
		{
			//line 746 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			return new haxe.root.Array<java.lang.String>(new java.lang.String[]{i});
		}
		
	}
	
	
	public static haxe.root.Array<java.lang.String> splitPattern(java.lang.String pattern, java.lang.String separator)
	{
		//line 750 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		haxe.root.Array<java.lang.Object> pos = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		//line 750 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		int i = 0;
		//line 750 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		int quote = 0;
		//line 753 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		while (( i < pattern.length() ))
		{
			//line 754 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			{
				//line 754 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				java.lang.String _g = haxe.lang.StringExt.substring(pattern, i, ( i + 1 ));
				//line 754 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				{
					//line 754 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					java.lang.String __temp_svar1 = (_g);
					//line 754 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					boolean __temp_executeDef2 = true;
					//line 754 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					switch (__temp_svar1.hashCode())
					{
						case 34:
						{
							//line 754 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							if (__temp_svar1.equals("\"")) 
							{
								//line 754 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								__temp_executeDef2 = false;
								//line 754 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								switch (quote)
								{
									case 0:
									{
										//line 759 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										quote = 2;
										//line 759 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									case 2:
									{
										//line 757 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										quote = 0;
										//line 757 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									default:
									{
										//line 762 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
								}
								
							}
							
							//line 754 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							break;
						}
						
						
						case 92:
						{
							//line 754 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							if (__temp_svar1.equals("\\")) 
							{
								//line 754 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								__temp_executeDef2 = false;
								//line 755 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								 ++ i;
							}
							
							//line 754 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							break;
						}
						
						
						case 39:
						{
							//line 754 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							if (__temp_svar1.equals("\'")) 
							{
								//line 754 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								__temp_executeDef2 = false;
								//line 754 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								switch (quote)
								{
									case 0:
									{
										//line 758 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										quote = 1;
										//line 758 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									case 1:
									{
										//line 757 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										quote = 0;
										//line 757 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
									
									default:
									{
										//line 762 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
										break;
									}
									
								}
								
							}
							
							//line 754 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
							break;
						}
						
						
					}
					
					//line 754 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
					if (__temp_executeDef2) 
					{
						//line 754 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
						switch (quote)
						{
							case 0:
							{
								//line 760 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								if (( haxe.lang.StringExt.indexOf(separator, _g, null) >= 0 )) 
								{
									//line 761 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
									pos.push(i);
								}
								
								//line 760 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								break;
							}
							
							
							default:
							{
								//line 762 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
								break;
							}
							
						}
						
					}
					
				}
				
			}
			
			//line 764 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			 ++ i;
		}
		
		//line 766 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		haxe.root.Array<java.lang.String> buf = new haxe.root.Array<java.lang.String>(new java.lang.String[]{});
		//line 766 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		int prev = 0;
		//line 768 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		{
			//line 768 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			int _g1 = 0;
			//line 768 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			while (( _g1 < pos.length ))
			{
				//line 768 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				int p = ((int) (haxe.lang.Runtime.toInt(pos.__get(_g1))) );
				//line 768 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				 ++ _g1;
				//line 769 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				buf.push(haxe.lang.StringExt.substring(pattern, prev, p));
				//line 770 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
				prev = ( p + 1 );
			}
			
		}
		
		//line 772 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		buf.push(haxe.lang.StringExt.substring(pattern, prev, null));
		//line 773 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		return buf;
	}
	
	
	public static java.lang.String value(double f, int precision, haxe.root.Array<java.lang.Object> groupSizes, java.lang.String groupSeparator, java.lang.String decimalSeparator)
	{
		//line 777 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		f = java.lang.Math.abs(thx.Floats.roundTo(f, precision));
		//line 778 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		haxe.root.Array<java.lang.String> p = thx.format.NumberFormat.splitOnDecimalSeparator(f);
		//line 778 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		haxe.root.Array<java.lang.String> buf = new haxe.root.Array<java.lang.String>(new java.lang.String[]{});
		//line 780 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		buf.push(thx.format.NumberFormat.intPart(p.__get(0), groupSizes, groupSeparator));
		//line 782 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		if (( precision > 0 )) 
		{
			//line 783 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
			buf.push(thx.format.NumberFormat.pad(p.__get(1), precision, true));
		}
		
		//line 785 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		return buf.join(decimalSeparator);
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 14 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		return new thx.format.NumberFormat(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 14 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/NumberFormat.hx"
		return new thx.format.NumberFormat();
	}
	
	
}


