<?php

// Generated by Haxe 3.3.0
class thx_text_Inflections {
	public function __construct(){}
	static function pluralize($singular) {
		return thx_text_Inflections::process($singular, thx_text_Inflections::$plural_rules);
	}
	static function singularize($plural) {
		return thx_text_Inflections::process($plural, thx_text_Inflections::$singular_rules);
	}
	static function process($word, $rules) {
		$tmp = Lambda::has(thx_text_Inflections::$uncountable_words, $word);
		if($tmp) {
			return $word;
		}
		{
			$_g = 0;
			while($_g < $rules->length) {
				$rule = $rules[$_g];
				++$_g;
				$tmp1 = $rule->pattern->match($word);
				if($tmp1) {
					return $rule->pattern->replace($word, $rule->replace);
				}
				unset($tmp1,$rule);
			}
		}
		return $word;
	}
	static $uncountable_words;
	static $plural_rules;
	static $singular_rules;
	function __toString() { return 'thx.text.Inflections'; }
}
thx_text_Inflections::$uncountable_words = (new _hx_array(array("equipment", "information", "rice", "money", "species", "series", "fish", "sheep", "moose", "deer", "news")));
thx_text_Inflections::$plural_rules = thx_text_Inflections_0();
thx_text_Inflections::$singular_rules = thx_text_Inflections_1();
function thx_text_Inflections_0() {
	{
		$tmp = _hx_anonymous(array("pattern" => new EReg("(m)an\$", "gi"), "replace" => "\$1en"));
		$tmp1 = _hx_anonymous(array("pattern" => new EReg("(pe)rson\$", "gi"), "replace" => "\$1ople"));
		$tmp2 = _hx_anonymous(array("pattern" => new EReg("(child)\$", "gi"), "replace" => "\$1ren"));
		$tmp3 = _hx_anonymous(array("pattern" => new EReg("(ax|test)is\$", "gi"), "replace" => "\$1es"));
		$tmp4 = _hx_anonymous(array("pattern" => new EReg("(octop|vir)us\$", "gi"), "replace" => "\$1i"));
		$tmp5 = _hx_anonymous(array("pattern" => new EReg("(alias|status)\$", "gi"), "replace" => "\$1es"));
		$tmp6 = _hx_anonymous(array("pattern" => new EReg("(bu)s\$", "gi"), "replace" => "\$1ses"));
		$tmp7 = _hx_anonymous(array("pattern" => new EReg("(buffal|tomat)o\$", "gi"), "replace" => "\$1oes"));
		$tmp8 = _hx_anonymous(array("pattern" => new EReg("([ti])um\$", "gi"), "replace" => "\$1a"));
		$tmp9 = _hx_anonymous(array("pattern" => new EReg("sis\$", "gi"), "replace" => "ses"));
		$tmp10 = _hx_anonymous(array("pattern" => new EReg("(?:([^f])fe|([lr])f)\$", "gi"), "replace" => "\$1\$2ves"));
		$tmp11 = _hx_anonymous(array("pattern" => new EReg("(hive)\$", "gi"), "replace" => "\$1s"));
		$tmp12 = _hx_anonymous(array("pattern" => new EReg("([^aeiouy]|qu)y\$", "gi"), "replace" => "\$1ies"));
		$tmp13 = _hx_anonymous(array("pattern" => new EReg("(x|ch|ss|sh)\$", "gi"), "replace" => "\$1es"));
		$tmp14 = _hx_anonymous(array("pattern" => new EReg("(matr|vert|ind)ix|ex\$", "gi"), "replace" => "\$1ices"));
		$tmp15 = _hx_anonymous(array("pattern" => new EReg("([m|l])ouse\$", "gi"), "replace" => "\$1ice"));
		$tmp16 = _hx_anonymous(array("pattern" => new EReg("^(ox)\$", "gi"), "replace" => "\$1en"));
		$tmp17 = _hx_anonymous(array("pattern" => new EReg("(quiz)\$", "gi"), "replace" => "\$1zes"));
		$tmp18 = _hx_anonymous(array("pattern" => new EReg("s\$", "gi"), "replace" => "s"));
		return (new _hx_array(array($tmp, $tmp1, $tmp2, $tmp3, $tmp4, $tmp5, $tmp6, $tmp7, $tmp8, $tmp9, $tmp10, $tmp11, $tmp12, $tmp13, $tmp14, $tmp15, $tmp16, $tmp17, $tmp18, _hx_anonymous(array("pattern" => new EReg("\$", "gi"), "replace" => "s")))));
	}
}
function thx_text_Inflections_1() {
	{
		$tmp = _hx_anonymous(array("pattern" => new EReg("(m)en\$", "gi"), "replace" => "\$1an"));
		$tmp1 = _hx_anonymous(array("pattern" => new EReg("(pe)ople\$", "gi"), "replace" => "\$1rson"));
		$tmp2 = _hx_anonymous(array("pattern" => new EReg("(child)ren\$", "gi"), "replace" => "\$1"));
		$tmp3 = _hx_anonymous(array("pattern" => new EReg("([ti])a\$", "gi"), "replace" => "\$1um"));
		$tmp4 = _hx_anonymous(array("pattern" => new EReg("((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses\$", "gi"), "replace" => "\$1\$2sis"));
		$tmp5 = _hx_anonymous(array("pattern" => new EReg("(hive)s\$", "gi"), "replace" => "\$1"));
		$tmp6 = _hx_anonymous(array("pattern" => new EReg("(tive)s\$", "gi"), "replace" => "\$1"));
		$tmp7 = _hx_anonymous(array("pattern" => new EReg("([lr])ves\$", "gi"), "replace" => "\$1f"));
		$tmp8 = _hx_anonymous(array("pattern" => new EReg("([^fo])ves\$", "gi"), "replace" => "\$1fe"));
		$tmp9 = _hx_anonymous(array("pattern" => new EReg("([^aeiouy]|qu)ies\$", "gi"), "replace" => "\$1y"));
		$tmp10 = _hx_anonymous(array("pattern" => new EReg("(s)eries\$", "gi"), "replace" => "\$1eries"));
		$tmp11 = _hx_anonymous(array("pattern" => new EReg("(m)ovies\$", "gi"), "replace" => "\$1ovie"));
		$tmp12 = _hx_anonymous(array("pattern" => new EReg("(x|ch|ss|sh)es\$", "gi"), "replace" => "\$1"));
		$tmp13 = _hx_anonymous(array("pattern" => new EReg("([m|l])ice\$", "gi"), "replace" => "\$1ouse"));
		$tmp14 = _hx_anonymous(array("pattern" => new EReg("(bus)es\$", "gi"), "replace" => "\$1"));
		$tmp15 = _hx_anonymous(array("pattern" => new EReg("(o)es\$", "gi"), "replace" => "\$1"));
		$tmp16 = _hx_anonymous(array("pattern" => new EReg("(shoe)s\$", "gi"), "replace" => "\$1"));
		$tmp17 = _hx_anonymous(array("pattern" => new EReg("(cris|ax|test)es\$", "gi"), "replace" => "\$1is"));
		$tmp18 = _hx_anonymous(array("pattern" => new EReg("(octop|vir)i\$", "gi"), "replace" => "\$1us"));
		$tmp19 = _hx_anonymous(array("pattern" => new EReg("(alias|status)es\$", "gi"), "replace" => "\$1"));
		$tmp20 = _hx_anonymous(array("pattern" => new EReg("^(ox)en", "gi"), "replace" => "\$1"));
		$tmp21 = _hx_anonymous(array("pattern" => new EReg("(vert|ind)ices\$", "gi"), "replace" => "\$1ex"));
		$tmp22 = _hx_anonymous(array("pattern" => new EReg("(matr)ices\$", "gi"), "replace" => "\$1ix"));
		$tmp23 = _hx_anonymous(array("pattern" => new EReg("(quiz)zes\$", "gi"), "replace" => "\$1"));
		return (new _hx_array(array($tmp, $tmp1, $tmp2, $tmp3, $tmp4, $tmp5, $tmp6, $tmp7, $tmp8, $tmp9, $tmp10, $tmp11, $tmp12, $tmp13, $tmp14, $tmp15, $tmp16, $tmp17, $tmp18, $tmp19, $tmp20, $tmp21, $tmp22, $tmp23, _hx_anonymous(array("pattern" => new EReg("s\$", "gi"), "replace" => "")))));
	}
}
