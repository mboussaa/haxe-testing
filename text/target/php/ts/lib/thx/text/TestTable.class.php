<?php

// Generated by Haxe 3.3.0
class thx_text_TestTable {
	public function __construct() {}
	public $table;
	public function setup() {
		$this->table = new thx_text_Table();
	}
	public function testSpanRight() {
		$this->table->style->set_type(thx_text_table_CellType::$Body);
		$this->table->style->setAlign(thx_text_table_HAlign::$Center);
		$tmp = thx_text_table_CellValueImpl::IntCell(1);
		$tmp1 = thx_text_table_Span::SpanRight(2);
		$this->table->set($tmp, 0, 0, $tmp1);
		$this->table->set(thx_text_table_CellValueImpl::IntCell(2), 1, 0, null);
		$this->table->set(thx_text_table_CellValueImpl::IntCell(3), 1, 1, null);
		$tmp2 = $this->table->toString();
		utest_Assert::equals("\x0A┌───────┐\x0A│   1   │\x0A├───┬───┤\x0A│ 2 │ 3 │\x0A└───┴───┘", $tmp2, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 24, "className" => "thx.text.TestTable", "methodName" => "testSpanRight")));
	}
	public function testSpanDown() {
		$this->table->style->set_type(thx_text_table_CellType::$Body);
		$this->table->style->setAlign(thx_text_table_HAlign::$Center);
		$tmp = thx_text_table_CellValueImpl::IntCell(1);
		$tmp1 = thx_text_table_Span::SpanDown(2);
		$this->table->set($tmp, 0, 0, $tmp1);
		$this->table->set(thx_text_table_CellValueImpl::IntCell(2), 0, 1, null);
		$this->table->set(thx_text_table_CellValueImpl::IntCell(3), 1, 1, null);
		$tmp2 = $this->table->toString();
		utest_Assert::equals("\x0A┌───┬───┐\x0A│ 1 │ 2 │\x0A│   ├───┤\x0A│   │ 3 │\x0A└───┴───┘", $tmp2, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 38, "className" => "thx.text.TestTable", "methodName" => "testSpanDown")));
	}
	public function testSpanning() {
		$this->table->style->set_type(thx_text_table_CellType::$Body);
		$this->table->style->setAlign(thx_text_table_HAlign::$Center);
		$this->table->set(thx_text_table_CellValueImpl::StringCell("0/0"), 0, 0, null);
		$tmp = thx_text_table_CellValueImpl::StringCell("0/1");
		$tmp1 = thx_text_table_Span::SpanBoth(2, 2);
		$this->table->set($tmp, 0, 1, $tmp1);
		$tmp2 = thx_text_table_CellValueImpl::StringCell("0/3");
		$tmp3 = thx_text_table_Span::SpanDown(2);
		$this->table->set($tmp2, 0, 3, $tmp3);
		$this->table->set(thx_text_table_CellValueImpl::StringCell("1/0"), 1, 0, null);
		$tmp4 = thx_text_table_CellValueImpl::StringCell("2/0");
		$tmp5 = thx_text_table_Span::SpanRight(2);
		$this->table->set($tmp4, 2, 0, $tmp5);
		$tmp6 = thx_text_table_CellValueImpl::StringCell("2/2");
		$tmp7 = thx_text_table_Span::SpanRight(2);
		$this->table->set($tmp6, 2, 2, $tmp7);
		$tmp8 = $this->table->toString();
		utest_Assert::equals("\x0A┌─────┬─────┬─────┐\x0A│ 0/0 │ 0/1 │ 0/3 │\x0A├─────┤     │     │\x0A│ 1/0 │     │     │\x0A├─────┴──┬──┴─────┤\x0A│  2/0   │  2/2   │\x0A└────────┴────────┘", $tmp8, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 56, "className" => "thx.text.TestTable", "methodName" => "testSpanning")));
	}
	public function testFromData() {
		$table = thx_text_Table::fromData((new _hx_array(array((new _hx_array(array("rank", "country", "US \$"))), (new _hx_array(array(1, "Luxembourg", 113533))), (new _hx_array(array(2, "Qatar", 98329))), (new _hx_array(array(3, "Norway", 97255))), (new _hx_array(array(4, "Switzerland", 81161))), (new _hx_array(array(5, "United Arab  Emirates", 67008))), (new _hx_array(array(6, "Australia", 65477))), (new _hx_array(array(7, "Denmark", 59928))), (new _hx_array(array(8, "Sweden", 56956))), (new _hx_array(array(9, "Canada", 50436))), (new _hx_array(array(10, "Netherlands", 50355)))))), null, "average earnings");
		$tmp = $table->toString();
		utest_Assert::equals("\x0A┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\x0A┃            average earnings            ┃\x0A┣━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━┫\x0A┃ rank ┃ country               ┃ US \$    ┃\x0A┡━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━┩\x0A│    1 │ Luxembourg            │ 113,533 │\x0A│    2 │ Qatar                 │  98,329 │\x0A│    3 │ Norway                │  97,255 │\x0A│    4 │ Switzerland           │  81,161 │\x0A│    5 │ United Arab  Emirates │  67,008 │\x0A│    6 │ Australia             │  65,477 │\x0A│    7 │ Denmark               │  59,928 │\x0A│    8 │ Sweden                │  56,956 │\x0A│    9 │ Canada                │  50,436 │\x0A│   10 │ Netherlands           │  50,355 │\x0A└──────┴───────────────────────┴─────────┘", $tmp, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 81, "className" => "thx.text.TestTable", "methodName" => "testFromData")));
	}
	public function testFromObjects() {
		$table = thx_text_Table::fromObjects((new _hx_array(array(_hx_anonymous(array("code" => "AD", "latitude" => 42.5, "longitude" => 1.6, "name" => "Andorra")), _hx_anonymous(array("code" => "AE", "latitude" => 23.4, "longitude" => 53.8, "name" => "United Arab Emirates")), _hx_anonymous(array("code" => "AF", "latitude" => 33.9, "longitude" => 67.7, "name" => "Afghanistan"))))), "countries");
		$tmp = $table->toString();
		utest_Assert::equals("\x0A┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\x0A┃                     countries                      ┃\x0A┣━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━┫\x0A┃ code ┃ latitude ┃ longitude ┃ name                 ┃\x0A┡━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━┩\x0A│ AD   │     42.5 │       1.6 │ Andorra              │\x0A│ AE   │     23.4 │      53.8 │ United Arab Emirates │\x0A│ AF   │     33.9 │      67.7 │ Afghanistan          │\x0A└──────┴──────────┴───────────┴──────────────────────┘", $tmp, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 118, "className" => "thx.text.TestTable", "methodName" => "testFromObjects")));
	}
	public function testPaintBorder() {
		$canvas = new thx_text_table_Canvas(3, 3);
		$canvas->paintBorder(thx_text_table_CellType::$Body, 0, 0, 3, 3);
		$tmp = $canvas->toString();
		utest_Assert::equals("┌─┐\x0A│ │\x0A└─┘", $tmp, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 133, "className" => "thx.text.TestTable", "methodName" => "testPaintBorder")));
		$canvas = new thx_text_table_Canvas(4, 4);
		$canvas->paintBorder(thx_text_table_CellType::$Body, 1, 0, 3, 3);
		$tmp1 = $canvas->toString();
		utest_Assert::equals(" ┌─┐\x0A │ │\x0A └─┘\x0A    ", $tmp1, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 137, "className" => "thx.text.TestTable", "methodName" => "testPaintBorder")));
		$canvas = new thx_text_table_Canvas(4, 4);
		$canvas->paintBorder(thx_text_table_CellType::$Body, 1, 1, 3, 3);
		$tmp2 = $canvas->toString();
		utest_Assert::equals("    \x0A ┌─┐\x0A │ │\x0A └─┘", $tmp2, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 141, "className" => "thx.text.TestTable", "methodName" => "testPaintBorder")));
	}
	public function testRender() {
		$renderer = new thx_text_table_Renderer(null);
		$this->table->set(thx_text_table_CellValueImpl::BoolCell(true), 0, 1, null);
		$this->table->set(thx_text_table_CellValueImpl::StringCell("Franco"), 0, 0, null);
		$this->table->set(thx_text_table_CellValueImpl::BoolCell(false), 0, 2, null);
		$v = Date::fromString("2015-11-19");
		$tmp = thx_text_table_CellValueImpl::DateTimeCell(thx__DateTime_DateTime_Impl_::fromDate($v));
		$this->table->set($tmp, 1, 0, null);
		$this->table->set(thx_text_table_CellValueImpl::IntCell(200), 1, 2, null);
		$this->table->style->set_type(thx_text_table_CellType::$Body);
		$this->table->getRow(0)->style->set_type(thx_text_table_CellType::$Header);
		$s = $renderer->render($this->table);
		utest_Assert::equals("\x0A┏━━━━━━━━━━━━┳━━━┳━━━━━┓\x0A┃ Franco     ┃ ✓ ┃  ✕  ┃\x0A┡━━━━━━━━━━━━╇━━━╇━━━━━┩\x0A│ 11/19/2015 │   │ 200 │\x0A└────────────┴───┴─────┘", $s, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 154, "className" => "thx.text.TestTable", "methodName" => "testRender")));
	}
	public function oneCell($value, $width) {
		$this->table = new thx_text_Table();
		$this->table->style->set_type(thx_text_table_CellType::$Body);
		$this->table->style->set_minWidth($width);
		$this->table->set($value, 0, 0, null);
	}
	public function testAlign() {
		$this->oneCell(thx_text_table_CellValueImpl::IntCell(0), 8);
		$tmp = $this->table->toString();
		utest_Assert::equals("\x0A┌──────────┐\x0A│        0 │\x0A└──────────┘", $tmp, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 171, "className" => "thx.text.TestTable", "methodName" => "testAlign")));
		$this->oneCell(thx_text_table_CellValueImpl::StringCell("0"), 8);
		$tmp1 = $this->table->toString();
		utest_Assert::equals("\x0A┌──────────┐\x0A│ 0        │\x0A└──────────┘", $tmp1, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 176, "className" => "thx.text.TestTable", "methodName" => "testAlign")));
		$this->oneCell(thx_text_table_CellValueImpl::BoolCell(true), 8);
		$tmp2 = $this->table->toString();
		utest_Assert::equals("\x0A┌──────────┐\x0A│    ✓     │\x0A└──────────┘", $tmp2, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 181, "className" => "thx.text.TestTable", "methodName" => "testAlign")));
		$this->oneCell(thx_text_table_CellValueImpl::FloatCell(0.5), 8);
		$tmp3 = $this->table->toString();
		utest_Assert::equals("\x0A┌──────────┐\x0A│      0.5 │\x0A└──────────┘", $tmp3, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 186, "className" => "thx.text.TestTable", "methodName" => "testAlign")));
	}
	public function testAlignOnSymbol() {
		$this->table->set(thx_text_table_CellValueImpl::FloatCell(0.001), 0, 0, null);
		$this->table->set(thx_text_table_CellValueImpl::FloatCell(2.0), 0, 1, null);
		$this->table->set(thx_text_table_CellValueImpl::IntCell(3333), 0, 2, null);
		$this->table->set(thx_text_table_CellValueImpl::FloatCell(12.5), 0, 3, null);
		$this->table->style->set_type(thx_text_table_CellType::$Body);
		$tmp = $this->table->toString();
		utest_Assert::equals("\x0A┌───────┬─────┬───────┬──────┐\x0A│ 0.001 │ 2.0 │ 3,333 │ 12.5 │\x0A└───────┴─────┴───────┴──────┘", $tmp, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 198, "className" => "thx.text.TestTable", "methodName" => "testAlignOnSymbol")));
	}
	public function testAlignOnSymbolVertical() {
		$this->table->set(thx_text_table_CellValueImpl::FloatCell(0.001), 0, 0, null);
		$this->table->set(thx_text_table_CellValueImpl::FloatCell(2.0), 1, 0, null);
		$this->table->set(thx_text_table_CellValueImpl::IntCell(3333), 2, 0, null);
		$this->table->set(thx_text_table_CellValueImpl::FloatCell(12.5), 3, 0, null);
		$this->table->style->set_type(thx_text_table_CellType::$Body);
		$tmp = $this->table->toString();
		utest_Assert::equals("\x0A┌───────────┐\x0A│     0.001 │\x0A├───────────┤\x0A│     2.0   │\x0A├───────────┤\x0A│ 3,333     │\x0A├───────────┤\x0A│    12.5   │\x0A└───────────┘", $tmp, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 210, "className" => "thx.text.TestTable", "methodName" => "testAlignOnSymbolVertical")));
	}
	public function testSequence() {
		$last = $this->table->set(thx_text_table_CellValueImpl::BoolCell(true), 0, 1, null);
		$first = $this->table->set(thx_text_table_CellValueImpl::BoolCell(false), 0, 0, null);
		utest_Assert::equals(1, $last->col->index, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 225, "className" => "thx.text.TestTable", "methodName" => "testSequence")));
		utest_Assert::equals(0, $first->col->index, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 226, "className" => "thx.text.TestTable", "methodName" => "testSequence")));
	}
	public function testStyle() {
		$style = new thx_text_table_Style();
		$tmp = $style->get_formatter();
		utest_Assert::isNull($tmp, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 231, "className" => "thx.text.TestTable", "methodName" => "testStyle")));
		$dstyle = new thx_text_table_DefaultStyle();
		$tmp1 = $dstyle->get_formatter();
		utest_Assert::notNull($tmp1, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 233, "className" => "thx.text.TestTable", "methodName" => "testStyle")));
		$cstyle = new thx_text_table_CompositeStyle((new _hx_array(array($style))));
		$tmp2 = $cstyle->get_formatter();
		utest_Assert::isNull($tmp2, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 235, "className" => "thx.text.TestTable", "methodName" => "testStyle")));
		$cstyle = new thx_text_table_CompositeStyle((new _hx_array(array($style, $dstyle))));
		$tmp3 = $cstyle->get_formatter();
		utest_Assert::notNull($tmp3, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 237, "className" => "thx.text.TestTable", "methodName" => "testStyle")));
	}
	public function testCanvas() {
		$canvas = new thx_text_table_Canvas(3, 2);
		$tmp = $canvas->toString();
		utest_Assert::equals("   \x0A   ", $tmp, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 242, "className" => "thx.text.TestTable", "methodName" => "testCanvas")));
		$canvas->expand(4, 3);
		$tmp1 = $canvas->toString();
		utest_Assert::equals("    \x0A    \x0A    ", $tmp1, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 244, "className" => "thx.text.TestTable", "methodName" => "testCanvas")));
	}
	public function testTableSize() {
		$tmp = $this->table->get_rows();
		utest_Assert::equals(0, $tmp, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 248, "className" => "thx.text.TestTable", "methodName" => "testTableSize")));
		$tmp1 = $this->table->get_cols();
		utest_Assert::equals(0, $tmp1, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 249, "className" => "thx.text.TestTable", "methodName" => "testTableSize")));
		$this->table->getCol(2);
		$tmp2 = $this->table->get_cols();
		utest_Assert::equals(0, $tmp2, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 251, "className" => "thx.text.TestTable", "methodName" => "testTableSize")));
		$this->table->ensureCol(3);
		$tmp3 = $this->table->get_cols();
		utest_Assert::equals(4, $tmp3, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 253, "className" => "thx.text.TestTable", "methodName" => "testTableSize")));
		$tmp4 = $this->table->get_rows();
		utest_Assert::equals(0, $tmp4, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 254, "className" => "thx.text.TestTable", "methodName" => "testTableSize")));
		$this->table->ensureRow(1);
		$tmp5 = $this->table->get_rows();
		utest_Assert::equals(2, $tmp5, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 256, "className" => "thx.text.TestTable", "methodName" => "testTableSize")));
	}
	public function testCellResizeTable() {
		$this->table->set(thx_text_table_CellValueImpl::IntCell(1), 3, 2, null);
		$tmp = $this->table->get_cols();
		utest_Assert::equals(3, $tmp, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 261, "className" => "thx.text.TestTable", "methodName" => "testCellResizeTable")));
		$tmp1 = $this->table->get_rows();
		utest_Assert::equals(4, $tmp1, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 262, "className" => "thx.text.TestTable", "methodName" => "testCellResizeTable")));
	}
	public function testIdentityOfCellsCreatedFromTable() {
		$cell = $this->table->set(thx_text_table_CellValueImpl::IntCell(1), 3, 2, null);
		$tmp = $this->table->get(3, 2);
		utest_Assert::isTrue($cell === $tmp, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 267, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromTable")));
		$tmp1 = $this->table->getRow(3)->get(2);
		utest_Assert::isTrue($cell === $tmp1, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 269, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromTable")));
		$tmp2 = $this->table->getCol(2)->get(3);
		utest_Assert::isTrue($cell === $tmp2, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 270, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromTable")));
		$tmp3 = $this->table->getRow(3);
		utest_Assert::isTrue($cell->row === $tmp3, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 272, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromTable")));
		$tmp4 = $this->table->getCol(2);
		utest_Assert::isTrue($cell->col === $tmp4, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 273, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromTable")));
		utest_Assert::isTrue((is_object($_t = $cell->table) && ($_t instanceof Enum) ? $_t == $this->table : _hx_equal($_t, $this->table)), null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 275, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromTable")));
		utest_Assert::isTrue((is_object($_t2 = $cell->row->table) && ($_t2 instanceof Enum) ? $_t2 == $this->table : _hx_equal($_t2, $this->table)), null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 276, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromTable")));
		utest_Assert::isTrue((is_object($_t3 = $cell->col->table) && ($_t3 instanceof Enum) ? $_t3 == $this->table : _hx_equal($_t3, $this->table)), null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 277, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromTable")));
	}
	public function testIdentityOfCellsCreatedFromRow() {
		$row = $this->table->ensureRow(3);
		$cell = $row->set(thx_text_table_CellValueImpl::IntCell(1), 2, null);
		$tmp = $this->table->get(3, 2);
		utest_Assert::isTrue($cell === $tmp, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 283, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromRow")));
		$tmp1 = $this->table->getRow(3)->get(2);
		utest_Assert::isTrue($cell === $tmp1, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 285, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromRow")));
		$tmp2 = $this->table->getCol(2)->get(3);
		utest_Assert::isTrue($cell === $tmp2, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 286, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromRow")));
		$tmp3 = $this->table->getRow(3);
		utest_Assert::isTrue($cell->row === $tmp3, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 288, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromRow")));
		$tmp4 = $this->table->getCol(2);
		utest_Assert::isTrue($cell->col === $tmp4, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 289, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromRow")));
		utest_Assert::isTrue((is_object($_t = $cell->table) && ($_t instanceof Enum) ? $_t == $this->table : _hx_equal($_t, $this->table)), null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 291, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromRow")));
		utest_Assert::isTrue((is_object($_t2 = $cell->row->table) && ($_t2 instanceof Enum) ? $_t2 == $this->table : _hx_equal($_t2, $this->table)), null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 292, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromRow")));
		utest_Assert::isTrue((is_object($_t3 = $cell->col->table) && ($_t3 instanceof Enum) ? $_t3 == $this->table : _hx_equal($_t3, $this->table)), null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 293, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromRow")));
	}
	public function testIdentityOfCellsCreatedFromCol() {
		$col = $this->table->ensureCol(2);
		$cell = $col->set(thx_text_table_CellValueImpl::IntCell(1), 3, null);
		$tmp = $this->table->get(3, 2);
		utest_Assert::isTrue($cell === $tmp, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 299, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromCol")));
		$tmp1 = $this->table->getRow(3)->get(2);
		utest_Assert::isTrue($cell === $tmp1, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 301, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromCol")));
		$tmp2 = $this->table->getCol(2)->get(3);
		utest_Assert::isTrue($cell === $tmp2, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 302, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromCol")));
		$tmp3 = $this->table->getRow(3);
		utest_Assert::isTrue($cell->row === $tmp3, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 304, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromCol")));
		$tmp4 = $this->table->getCol(2);
		utest_Assert::isTrue($cell->col === $tmp4, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 305, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromCol")));
		utest_Assert::isTrue((is_object($_t = $cell->table) && ($_t instanceof Enum) ? $_t == $this->table : _hx_equal($_t, $this->table)), null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 307, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromCol")));
		utest_Assert::isTrue((is_object($_t2 = $cell->row->table) && ($_t2 instanceof Enum) ? $_t2 == $this->table : _hx_equal($_t2, $this->table)), null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 308, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromCol")));
		utest_Assert::isTrue((is_object($_t3 = $cell->col->table) && ($_t3 instanceof Enum) ? $_t3 == $this->table : _hx_equal($_t3, $this->table)), null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 309, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromCol")));
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.text.TestTable'; }
}
