<?php

// Generated by Haxe 3.3.0
class thx_text_Table {
	public function __construct() {
		if(!php_Boot::$skip_constructor) {
		$this->_rows = (new _hx_array(array()));
		$this->_cols = (new _hx_array(array()));
		$this->style = new thx_text_table_Style();
	}}
	public $style;
	public $_rows;
	public $_cols;
	public function set($value, $row, $col, $span = null) {
		$tmp = null === $span;
		if($tmp) {
			$span = thx_text_table_Span::$NoSpan;
		}
		$r = $this->ensureRow($row);
		$c = $this->ensureCol($col);
		$cell = new thx_text_table_Cell($value, $r, $c, $span);
		$c->setCell($row, $cell);
		return $cell;
	}
	public function get($row, $col) {
		$col1 = $this->getCol($col);
		if(null === $col1) {
			return null;
		}
		return $col1->get($row);
	}
	public function ensureCol($index) {
		{
			$_g1 = $this->_cols->length;
			$_g = $index + 1;
			while($_g1 < $_g) {
				$i = $_g1++;
				$this->_cols[$i] = new thx_text_table_Col($this, $i);
				unset($i);
			}
		}
		return $this->_cols[$index];
	}
	public function ensureRow($index) {
		{
			$_g1 = $this->_rows->length;
			$_g = $index + 1;
			while($_g1 < $_g) {
				$i = $_g1++;
				$this->_rows[$i] = new thx_text_table_Row($this, $i);
				unset($i);
			}
		}
		return $this->_rows[$index];
	}
	public function getCol($index) {
		return $this->_cols[$index];
	}
	public function getRow($index) {
		return $this->_rows[$index];
	}
	public function toArray() {
		$collector = (new _hx_array(array()));
		{
			$_g = 0;
			$_g1 = $this->_rows;
			while($_g < $_g1->length) {
				$row = $_g1[$_g];
				++$_g;
				{
					$tmp = $row->iterator();
					while(true) {
						$tmp1 = !$tmp->hasNext();
						if($tmp1) {
							break;
						}
						$cell = $tmp->next();
						$collector->push($cell);
						unset($tmp1,$cell);
					}
					unset($tmp);
				}
				unset($row);
			}
		}
		return $collector;
	}
	public function toString() {
		$renderer = new thx_text_table_Renderer(null);
		return $renderer->render($this);
	}
	public function get_rows() {
		return $this->_rows->length;
	}
	public function get_cols() {
		return $this->_cols->length;
	}
	public function set_rows($value) {
		$this->ensureRow($value + 1);
		return $value;
	}
	public function set_cols($value) {
		$this->ensureCol($value + 1);
		return $value;
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static function fromData($data, $hasHeader = null, $title = null) {
		if($hasHeader === null) {
			$hasHeader = true;
		}
		$offset = null;
		if($title === null) {
			$offset = 0;
		} else {
			$offset = 1;
		}
		$table = new thx_text_Table();
		if($hasHeader) {
			$table->ensureRow($offset)->style->set_type(thx_text_table_CellType::$Header);
		}
		if(null !== $title) {
			$table->ensureRow(0)->style->set_type(thx_text_table_CellType::$Header);
			$table->ensureRow(0)->style->setAlign(thx_text_table_HAlign::$Center);
			$table->set(thx_text_table_CellValueImpl::StringCell($title), 0, 0, thx_text_table_Span::$FillRight);
		}
		{
			$_g1 = 0;
			$_g = $data->length;
			while($_g1 < $_g) {
				$r = $_g1++;
				$row = $data[$r];
				{
					$_g3 = 0;
					$_g2 = $row->length;
					while($_g3 < $_g2) {
						$c = $_g3++;
						$tmp = thx_text_table__CellValue_CellValue_Impl_::fromDynamic($row[$c]);
						$table->set($tmp, $r + $offset, $c, null);
						unset($tmp,$c);
					}
					unset($_g3,$_g2);
				}
				unset($row,$r);
			}
		}
		return $table;
	}
	static function fromObjects($data, $title = null) {
		$offset = null;
		if($title === null) {
			$offset = 0;
		} else {
			$offset = 1;
		}
		$table = new thx_text_Table();
		$headers = new haxe_ds_StringMap();
		$cols = 0;
		if(null !== $title) {
			$table->ensureRow(0)->style->set_type(thx_text_table_CellType::$Header);
			$table->ensureRow(0)->style->setAlign(thx_text_table_HAlign::$Center);
			$table->set(thx_text_table_CellValueImpl::StringCell($title), 0, 0, thx_text_table_Span::$FillRight);
		}
		$table->ensureRow($offset)->style->set_type(thx_text_table_CellType::$Header);
		{
			$_g1 = 0;
			$_g = $data->length;
			while($_g1 < $_g) {
				$r = $_g1++;
				$fields = Reflect::fields($data[$r]);
				{
					$_g2 = 0;
					while($_g2 < $fields->length) {
						$field = $fields[$_g2];
						++$_g2;
						$col = $headers->get($field);
						if(null === $col) {
							$col = $cols++;
							$headers->set($field, $col);
							$v = thx_Strings::humanize($field);
							$tmp = thx_text_table_CellValueImpl::StringCell($v);
							$table->set($tmp, $offset, $col, null);
							unset($v,$tmp);
						}
						$tmp1 = Reflect::field($data[$r], $field);
						$tmp2 = thx_text_table__CellValue_CellValue_Impl_::fromDynamic($tmp1);
						$table->set($tmp2, $r + $offset + 1, $col, null);
						unset($tmp2,$tmp1,$field,$col);
					}
					unset($_g2);
				}
				unset($r,$fields);
			}
		}
		return $table;
	}
	static $__properties__ = array("set_cols" => "set_cols","get_cols" => "get_cols","set_rows" => "set_rows","get_rows" => "get_rows");
	function __toString() { return $this->toString(); }
}
