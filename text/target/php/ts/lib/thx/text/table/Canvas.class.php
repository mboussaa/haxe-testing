<?php

// Generated by Haxe 3.3.0
class thx_text_table_Canvas {
	public function __construct($width, $height) {
		if(!php_Boot::$skip_constructor) {
		$this->values = (new _hx_array(array()));
		$this->expand($width, $height);
	}}
	public $width;
	public $height;
	public $values;
	public function expand($width, $height) {
		{
			$_g1 = $this->height;
			while($_g1 < $height) {
				++$_g1;
				$_g2 = (new _hx_array(array()));
				{
					$_g4 = 0;
					while($_g4 < $width) {
						++$_g4;
						$_g2->push(thx_text_table_SymbolImpl::$hEmpty);
					}
					unset($_g4);
				}
				$this->values->push($_g2);
				unset($_g2);
			}
		}
		$tmp = $width > $this->width;
		if($tmp) {
			$_g11 = 0;
			$_g = $this->height;
			while($_g11 < $_g) {
				$i = $_g11++;
				$row = $this->values[$i];
				{
					$_g3 = $this->width;
					while($_g3 < $width) {
						++$_g3;
						$row->push(thx_text_table_SymbolImpl::$hEmpty);
					}
					unset($_g3);
				}
				unset($row,$i);
			}
		}
		$a = $this->width;
		$tmp1 = null;
		if($a > $width) {
			$tmp1 = $a;
		} else {
			$tmp1 = $width;
		}
		$this->width = $tmp1;
		$a1 = $this->height;
		$tmp2 = null;
		if($a1 > $height) {
			$tmp2 = $a1;
		} else {
			$tmp2 = $height;
		}
		$this->height = $tmp2;
	}
	public function get($x, $y) {
		$row = $this->values[$y];
		if(null === $row) {
			return null;
		}
		return $row[$x];
	}
	public function set($x, $y, $symbol) {
		$this->values[$y][$x] = $symbol;
	}
	public function setChar($x, $y, $char) {
		$tmp = thx_text_table_SymbolImpl::Char($char);
		$this->set($x, $y, $tmp);
	}
	public function combine($x, $y, $symbol) {
		$tmp = $this->values[$y];
		$tmp1 = thx_text_table__Canvas_Symbol_Impl_::combine($this->values[$y][$x], $symbol);
		$tmp[$x] = $tmp1;
	}
	public function combineChar($x, $y, $char) {
		$tmp = thx_text_table_SymbolImpl::Char($char);
		$this->combine($x, $y, $tmp);
	}
	public function paintBlock($block, $x, $y, $width, $height, $halign, $symbolPos) {
		$_g1 = 0;
		$_g = $block->height;
		while($_g1 < $_g) {
			$i = $_g1++;
			$line = $block->getLine($i);
			$len = $line->length;
			$hoffset = null;
			$tmp = $halign->index;
			switch($tmp) {
			case 0:{
				$hoffset = 0;
			}break;
			case 1:{
				$hoffset = $width - $len;
			}break;
			case 2:{
				$hoffset = Math::floor(($width - $len) / 2);
			}break;
			case 3:{
				$pos = $line->lastIndexOf(_hx_deref($halign)->params[0], null);
				if($pos < 0) {
					$hoffset = $width - ($len + $symbolPos);
				} else {
					if($len - $pos < $symbolPos) {
						$hoffset = $width - $len - ($symbolPos - ($len - $pos));
					} else {
						$hoffset = $width - $len;
					}
				}
			}break;
			}
			{
				$_g3 = 0;
				while($_g3 < $len) {
					$j = $_g3++;
					$this->setChar($x + $hoffset + $j, $y + $i, $line[$j]);
					unset($j);
				}
				unset($_g3);
			}
			unset($tmp,$line,$len,$i,$hoffset);
		}
	}
	public function paintBorder($type, $x, $y, $w, $h) {
		$tmp = $this->pickTopLeft($type);
		$this->combine($x, $y, $tmp);
		$tmp1 = $x + $w - 1;
		$tmp2 = $this->pickTopRight($type);
		$this->combine($tmp1, $y, $tmp2);
		$tmp3 = $y + $h - 1;
		$tmp4 = $this->pickBottomLeft($type);
		$this->combine($x, $tmp3, $tmp4);
		$tmp5 = $x + $w - 1;
		$tmp6 = $y + $h - 1;
		$tmp7 = $this->pickBottomRight($type);
		$this->combine($tmp5, $tmp6, $tmp7);
		{
			$_g1 = 1;
			$_g = $w - 1;
			while($_g1 < $_g) {
				$i = $_g1++;
				$tmp8 = $x + $i;
				$tmp9 = $this->pickTop($type);
				$this->combine($tmp8, $y, $tmp9);
				$tmp10 = $x + $i;
				$tmp11 = $y + $h - 1;
				$tmp12 = $this->pickBottom($type);
				$this->combine($tmp10, $tmp11, $tmp12);
				unset($tmp9,$tmp8,$tmp12,$tmp11,$tmp10,$i);
			}
		}
		{
			$_g11 = 1;
			$_g2 = $h - 1;
			while($_g11 < $_g2) {
				$i1 = $_g11++;
				$tmp13 = $y + $i1;
				$tmp14 = $this->pickLeft($type);
				$this->combine($x, $tmp13, $tmp14);
				$tmp15 = $x + $w - 1;
				$tmp16 = $y + $i1;
				$tmp17 = $this->pickRight($type);
				$this->combine($tmp15, $tmp16, $tmp17);
				unset($tmp17,$tmp16,$tmp15,$tmp14,$tmp13,$i1);
			}
		}
	}
	public function paintBottomLine($type, $x, $y, $w) {
		$tmp = $this->pickBottomLeft($type);
		$this->combine($x, $y, $tmp);
		$tmp1 = $x + $w - 1;
		$tmp2 = $this->pickBottomRight($type);
		$this->combine($tmp1, $y, $tmp2);
		{
			$_g1 = 1;
			$_g = $w - 1;
			while($_g1 < $_g) {
				$i = $_g1++;
				$tmp3 = $x + $i;
				$tmp4 = $this->pickBottom($type);
				$this->combine($tmp3, $y, $tmp4);
				unset($tmp4,$tmp3,$i);
			}
		}
	}
	public function typeToBorder($type) {
		switch($type->index) {
		case 0:case 1:{
			return thx_text_table_BorderStyle::$Double;
		}break;
		default:{
			return thx_text_table_BorderStyle::$Normal;
		}break;
		}
	}
	public function pickTopLeft($type) {
		$tmp = null;
		$tmp1 = $type->index;
		switch($tmp1) {
		case 1:{
			$tmp = thx_text_table_Border::$Removable;
		}break;
		case 0:case 2:{
			$tmp2 = $this->typeToBorder($type);
			$tmp3 = $this->typeToBorder($type);
			$tmp = thx_text_table_Border::Cross(thx_text_table_BorderStyle::$None, $tmp2, $tmp3, thx_text_table_BorderStyle::$None);
		}break;
		case 3:{
			$tmp4 = $this->typeToBorder($type);
			$tmp = thx_text_table_Border::RemovableCross(thx_text_table_BorderStyle::$None, thx_text_table_BorderStyle::$None, $tmp4, thx_text_table_BorderStyle::$None);
		}break;
		}
		return thx_text_table_SymbolImpl::Border($tmp);
	}
	public function pickTopRight($type) {
		$tmp = null;
		$tmp1 = $type->index;
		switch($tmp1) {
		case 1:{
			$tmp = thx_text_table_Border::$Removable;
		}break;
		case 0:case 2:{
			$tmp2 = $this->typeToBorder($type);
			$tmp3 = $this->typeToBorder($type);
			$tmp = thx_text_table_Border::Cross(thx_text_table_BorderStyle::$None, thx_text_table_BorderStyle::$None, $tmp2, $tmp3);
		}break;
		case 3:{
			$tmp4 = $this->typeToBorder($type);
			$tmp = thx_text_table_Border::RemovableCross(thx_text_table_BorderStyle::$None, thx_text_table_BorderStyle::$None, $tmp4, thx_text_table_BorderStyle::$None);
		}break;
		}
		return thx_text_table_SymbolImpl::Border($tmp);
	}
	public function pickBottomLeft($type) {
		$tmp = null;
		$tmp1 = $type->index;
		switch($tmp1) {
		case 1:{
			$tmp2 = $this->typeToBorder($type);
			$tmp = thx_text_table_Border::Cross(thx_text_table_BorderStyle::$None, $tmp2, thx_text_table_BorderStyle::$None, thx_text_table_BorderStyle::$None);
		}break;
		case 0:case 2:{
			$tmp3 = $this->typeToBorder($type);
			$tmp4 = $this->typeToBorder($type);
			$tmp = thx_text_table_Border::Cross($tmp3, $tmp4, thx_text_table_BorderStyle::$None, thx_text_table_BorderStyle::$None);
		}break;
		case 3:{
			$tmp5 = $this->typeToBorder($type);
			$tmp = thx_text_table_Border::RemovableCross($tmp5, thx_text_table_BorderStyle::$None, thx_text_table_BorderStyle::$None, thx_text_table_BorderStyle::$None);
		}break;
		}
		return thx_text_table_SymbolImpl::Border($tmp);
	}
	public function pickBottomRight($type) {
		$tmp = null;
		$tmp1 = $type->index;
		switch($tmp1) {
		case 1:{
			$tmp2 = $this->typeToBorder($type);
			$tmp = thx_text_table_Border::Cross(thx_text_table_BorderStyle::$None, thx_text_table_BorderStyle::$None, thx_text_table_BorderStyle::$None, $tmp2);
		}break;
		case 0:case 2:{
			$tmp3 = $this->typeToBorder($type);
			$tmp4 = $this->typeToBorder($type);
			$tmp = thx_text_table_Border::Cross($tmp3, thx_text_table_BorderStyle::$None, thx_text_table_BorderStyle::$None, $tmp4);
		}break;
		case 3:{
			$tmp5 = $this->typeToBorder($type);
			$tmp = thx_text_table_Border::RemovableCross($tmp5, thx_text_table_BorderStyle::$None, thx_text_table_BorderStyle::$None, thx_text_table_BorderStyle::$None);
		}break;
		}
		return thx_text_table_SymbolImpl::Border($tmp);
	}
	public function pickTop($type) {
		$tmp = null;
		$tmp1 = $type->index;
		switch($tmp1) {
		case 1:case 3:{
			$tmp = thx_text_table_Border::$Removable;
		}break;
		case 0:case 2:{
			$tmp2 = $this->typeToBorder($type);
			$tmp3 = $this->typeToBorder($type);
			$tmp = thx_text_table_Border::Cross(thx_text_table_BorderStyle::$None, $tmp2, thx_text_table_BorderStyle::$None, $tmp3);
		}break;
		}
		return thx_text_table_SymbolImpl::Border($tmp);
	}
	public function pickBottom($type) {
		$tmp = null;
		$tmp1 = $type->index;
		switch($tmp1) {
		case 0:case 1:case 2:{
			$tmp2 = $this->typeToBorder($type);
			$tmp3 = $this->typeToBorder($type);
			$tmp = thx_text_table_Border::Cross(thx_text_table_BorderStyle::$None, $tmp2, thx_text_table_BorderStyle::$None, $tmp3);
		}break;
		case 3:{
			$tmp = thx_text_table_Border::$Removable;
		}break;
		}
		return thx_text_table_SymbolImpl::Border($tmp);
	}
	public function pickLeft($type) {
		$tmp = null;
		$tmp1 = $type->index;
		switch($tmp1) {
		case 1:{
			$tmp = thx_text_table_Border::$Removable;
		}break;
		case 0:case 2:case 3:{
			$tmp2 = $this->typeToBorder($type);
			$tmp3 = $this->typeToBorder($type);
			$tmp = thx_text_table_Border::Cross($tmp2, thx_text_table_BorderStyle::$None, $tmp3, thx_text_table_BorderStyle::$None);
		}break;
		}
		return thx_text_table_SymbolImpl::Border($tmp);
	}
	public function pickRight($type) {
		$tmp = null;
		$tmp1 = $type->index;
		switch($tmp1) {
		case 1:{
			$tmp = thx_text_table_Border::$Removable;
		}break;
		case 0:case 2:case 3:{
			$tmp2 = $this->typeToBorder($type);
			$tmp3 = $this->typeToBorder($type);
			$tmp = thx_text_table_Border::Cross($tmp2, thx_text_table_BorderStyle::$None, $tmp3, thx_text_table_BorderStyle::$None);
		}break;
		}
		return thx_text_table_SymbolImpl::Border($tmp);
	}
	public function render($symbol) {
		switch($symbol->index) {
		case 0:{
			return " ";
		}break;
		case 1:{
			return _hx_deref($symbol)->params[0];
		}break;
		case 2:{
			switch(_hx_deref($symbol)->params[0]->index) {
			case 0:{
				return " ";
			}break;
			case 1:{
				switch(_hx_deref(_hx_deref($symbol)->params[0])->params[0]->index) {
				case 0:{
					switch(_hx_deref(_hx_deref($symbol)->params[0])->params[1]->index) {
					case 0:{
						switch(_hx_deref(_hx_deref($symbol)->params[0])->params[2]->index) {
						case 0:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return " ";
							}break;
							case 1:{
								return "╴";
							}break;
							case 2:{
								return "╸";
							}break;
							}
						}break;
						case 1:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "╷";
							}break;
							case 1:{
								return "┐";
							}break;
							case 2:{
								return "┑";
							}break;
							}
						}break;
						case 2:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "╻";
							}break;
							case 1:{
								return "┒";
							}break;
							case 2:{
								return "┓";
							}break;
							}
						}break;
						}
					}break;
					case 1:{
						switch(_hx_deref(_hx_deref($symbol)->params[0])->params[2]->index) {
						case 0:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "╶";
							}break;
							case 1:{
								return "─";
							}break;
							case 2:{
								return "╾";
							}break;
							}
						}break;
						case 1:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "┌";
							}break;
							case 1:{
								return "┬";
							}break;
							case 2:{
								return "┭";
							}break;
							}
						}break;
						case 2:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "┎";
							}break;
							case 1:{
								return "┰";
							}break;
							case 2:{
								return "┱";
							}break;
							}
						}break;
						}
					}break;
					case 2:{
						switch(_hx_deref(_hx_deref($symbol)->params[0])->params[2]->index) {
						case 0:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "╺";
							}break;
							case 1:{
								return "╼";
							}break;
							case 2:{
								return "━";
							}break;
							}
						}break;
						case 1:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "┍";
							}break;
							case 1:{
								return "┮";
							}break;
							case 2:{
								return "┯";
							}break;
							}
						}break;
						case 2:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "┏";
							}break;
							case 1:{
								return "┲";
							}break;
							case 2:{
								return "┳";
							}break;
							}
						}break;
						}
					}break;
					}
				}break;
				case 1:{
					switch(_hx_deref(_hx_deref($symbol)->params[0])->params[1]->index) {
					case 0:{
						switch(_hx_deref(_hx_deref($symbol)->params[0])->params[2]->index) {
						case 0:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "╵";
							}break;
							case 1:{
								return "┘";
							}break;
							case 2:{
								return "┙";
							}break;
							}
						}break;
						case 1:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "│";
							}break;
							case 1:{
								return "┤";
							}break;
							case 2:{
								return "┥";
							}break;
							}
						}break;
						case 2:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "╽";
							}break;
							case 1:{
								return "┧";
							}break;
							case 2:{
								return "┪";
							}break;
							}
						}break;
						}
					}break;
					case 1:{
						switch(_hx_deref(_hx_deref($symbol)->params[0])->params[2]->index) {
						case 0:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "└";
							}break;
							case 1:{
								return "┴";
							}break;
							case 2:{
								return "┵";
							}break;
							}
						}break;
						case 1:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "├";
							}break;
							case 1:{
								return "┼";
							}break;
							case 2:{
								return "┽";
							}break;
							}
						}break;
						case 2:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "┟";
							}break;
							case 1:{
								return "╁";
							}break;
							case 2:{
								return "╅";
							}break;
							}
						}break;
						}
					}break;
					case 2:{
						switch(_hx_deref(_hx_deref($symbol)->params[0])->params[2]->index) {
						case 0:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "┕";
							}break;
							case 1:{
								return "┶";
							}break;
							case 2:{
								return "┷";
							}break;
							}
						}break;
						case 1:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "┝";
							}break;
							case 1:{
								return "┾";
							}break;
							case 2:{
								return "┿";
							}break;
							}
						}break;
						case 2:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "┢";
							}break;
							case 1:{
								return "╆";
							}break;
							case 2:{
								return "╈";
							}break;
							}
						}break;
						}
					}break;
					}
				}break;
				case 2:{
					switch(_hx_deref(_hx_deref($symbol)->params[0])->params[1]->index) {
					case 0:{
						switch(_hx_deref(_hx_deref($symbol)->params[0])->params[2]->index) {
						case 0:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "╹";
							}break;
							case 1:{
								return "┚";
							}break;
							case 2:{
								return "┛";
							}break;
							}
						}break;
						case 1:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "╿";
							}break;
							case 1:{
								return "┦";
							}break;
							case 2:{
								return "┩";
							}break;
							}
						}break;
						case 2:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "┃";
							}break;
							case 1:{
								return "┨";
							}break;
							case 2:{
								return "┫";
							}break;
							}
						}break;
						}
					}break;
					case 1:{
						switch(_hx_deref(_hx_deref($symbol)->params[0])->params[2]->index) {
						case 0:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "┖";
							}break;
							case 1:{
								return "┸";
							}break;
							case 2:{
								return "┹";
							}break;
							}
						}break;
						case 1:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "┞";
							}break;
							case 1:{
								return "╀";
							}break;
							case 2:{
								return "╃";
							}break;
							}
						}break;
						case 2:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "┠";
							}break;
							case 1:{
								return "╂";
							}break;
							case 2:{
								return "╉";
							}break;
							}
						}break;
						}
					}break;
					case 2:{
						switch(_hx_deref(_hx_deref($symbol)->params[0])->params[2]->index) {
						case 0:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "┗";
							}break;
							case 1:{
								return "┺";
							}break;
							case 2:{
								return "┻";
							}break;
							}
						}break;
						case 1:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "┡";
							}break;
							case 1:{
								return "╄";
							}break;
							case 2:{
								return "╇";
							}break;
							}
						}break;
						case 2:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "┣";
							}break;
							case 1:{
								return "╊";
							}break;
							case 2:{
								return "╋";
							}break;
							}
						}break;
						}
					}break;
					}
				}break;
				}
			}break;
			case 2:{
				switch(_hx_deref(_hx_deref($symbol)->params[0])->params[0]->index) {
				case 0:{
					switch(_hx_deref(_hx_deref($symbol)->params[0])->params[1]->index) {
					case 0:{
						switch(_hx_deref(_hx_deref($symbol)->params[0])->params[2]->index) {
						case 0:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return " ";
							}break;
							case 1:{
								return "╴";
							}break;
							case 2:{
								return "╸";
							}break;
							}
						}break;
						case 1:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "╷";
							}break;
							case 1:{
								return "┐";
							}break;
							case 2:{
								return "┑";
							}break;
							}
						}break;
						case 2:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "╻";
							}break;
							case 1:{
								return "┒";
							}break;
							case 2:{
								return "┓";
							}break;
							}
						}break;
						}
					}break;
					case 1:{
						switch(_hx_deref(_hx_deref($symbol)->params[0])->params[2]->index) {
						case 0:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "╶";
							}break;
							case 1:{
								return "─";
							}break;
							case 2:{
								return "╾";
							}break;
							}
						}break;
						case 1:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "┌";
							}break;
							case 1:{
								return "┬";
							}break;
							case 2:{
								return "┭";
							}break;
							}
						}break;
						case 2:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "┎";
							}break;
							case 1:{
								return "┰";
							}break;
							case 2:{
								return "┱";
							}break;
							}
						}break;
						}
					}break;
					case 2:{
						switch(_hx_deref(_hx_deref($symbol)->params[0])->params[2]->index) {
						case 0:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "╺";
							}break;
							case 1:{
								return "╼";
							}break;
							case 2:{
								return "━";
							}break;
							}
						}break;
						case 1:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "┍";
							}break;
							case 1:{
								return "┮";
							}break;
							case 2:{
								return "┯";
							}break;
							}
						}break;
						case 2:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "┏";
							}break;
							case 1:{
								return "┲";
							}break;
							case 2:{
								return "┳";
							}break;
							}
						}break;
						}
					}break;
					}
				}break;
				case 1:{
					switch(_hx_deref(_hx_deref($symbol)->params[0])->params[1]->index) {
					case 0:{
						switch(_hx_deref(_hx_deref($symbol)->params[0])->params[2]->index) {
						case 0:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "╵";
							}break;
							case 1:{
								return "┘";
							}break;
							case 2:{
								return "┙";
							}break;
							}
						}break;
						case 1:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "│";
							}break;
							case 1:{
								return "┤";
							}break;
							case 2:{
								return "┥";
							}break;
							}
						}break;
						case 2:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "╽";
							}break;
							case 1:{
								return "┧";
							}break;
							case 2:{
								return "┪";
							}break;
							}
						}break;
						}
					}break;
					case 1:{
						switch(_hx_deref(_hx_deref($symbol)->params[0])->params[2]->index) {
						case 0:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "└";
							}break;
							case 1:{
								return "┴";
							}break;
							case 2:{
								return "┵";
							}break;
							}
						}break;
						case 1:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "├";
							}break;
							case 1:{
								return "┼";
							}break;
							case 2:{
								return "┽";
							}break;
							}
						}break;
						case 2:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "┟";
							}break;
							case 1:{
								return "╁";
							}break;
							case 2:{
								return "╅";
							}break;
							}
						}break;
						}
					}break;
					case 2:{
						switch(_hx_deref(_hx_deref($symbol)->params[0])->params[2]->index) {
						case 0:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "┕";
							}break;
							case 1:{
								return "┶";
							}break;
							case 2:{
								return "┷";
							}break;
							}
						}break;
						case 1:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "┝";
							}break;
							case 1:{
								return "┾";
							}break;
							case 2:{
								return "┿";
							}break;
							}
						}break;
						case 2:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "┢";
							}break;
							case 1:{
								return "╆";
							}break;
							case 2:{
								return "╈";
							}break;
							}
						}break;
						}
					}break;
					}
				}break;
				case 2:{
					switch(_hx_deref(_hx_deref($symbol)->params[0])->params[1]->index) {
					case 0:{
						switch(_hx_deref(_hx_deref($symbol)->params[0])->params[2]->index) {
						case 0:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "╹";
							}break;
							case 1:{
								return "┚";
							}break;
							case 2:{
								return "┛";
							}break;
							}
						}break;
						case 1:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "╿";
							}break;
							case 1:{
								return "┦";
							}break;
							case 2:{
								return "┩";
							}break;
							}
						}break;
						case 2:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "┃";
							}break;
							case 1:{
								return "┨";
							}break;
							case 2:{
								return "┫";
							}break;
							}
						}break;
						}
					}break;
					case 1:{
						switch(_hx_deref(_hx_deref($symbol)->params[0])->params[2]->index) {
						case 0:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "┖";
							}break;
							case 1:{
								return "┸";
							}break;
							case 2:{
								return "┹";
							}break;
							}
						}break;
						case 1:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "┞";
							}break;
							case 1:{
								return "╀";
							}break;
							case 2:{
								return "╃";
							}break;
							}
						}break;
						case 2:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "┠";
							}break;
							case 1:{
								return "╂";
							}break;
							case 2:{
								return "╉";
							}break;
							}
						}break;
						}
					}break;
					case 2:{
						switch(_hx_deref(_hx_deref($symbol)->params[0])->params[2]->index) {
						case 0:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "┗";
							}break;
							case 1:{
								return "┺";
							}break;
							case 2:{
								return "┻";
							}break;
							}
						}break;
						case 1:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "┡";
							}break;
							case 1:{
								return "╄";
							}break;
							case 2:{
								return "╇";
							}break;
							}
						}break;
						case 2:{
							switch(_hx_deref(_hx_deref($symbol)->params[0])->params[3]->index) {
							case 0:{
								return "┣";
							}break;
							case 1:{
								return "╊";
							}break;
							case 2:{
								return "╋";
							}break;
							}
						}break;
						}
					}break;
					}
				}break;
				}
			}break;
			}
		}break;
		}
	}
	public function toString() {
		$_gthis = $this;
		return $this->values->filter(array(new _hx_lambda(array(), "thx_text_table_Canvas_0"), 'execute'))->map(array(new _hx_lambda(array(&$_gthis), "thx_text_table_Canvas_1"), 'execute'))->join("\x0A");
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return $this->toString(); }
}
function thx_text_table_Canvas_0($row) {
	{
		return !thx_Arrays::all($row, array(new _hx_lambda(array(), "thx_text_table_Canvas_2"), 'execute'));
	}
}
function thx_text_table_Canvas_1(&$_gthis, $row1) {
	{
		return thx_Arrays::reduce($row1, array(new _hx_lambda(array(&$_gthis), "thx_text_table_Canvas_3"), 'execute'), "");
	}
}
function thx_text_table_Canvas_2($symbol) {
	{
		if($symbol->index === 2) {
			switch(_hx_deref($symbol)->params[0]->index) {
			case 0:case 1:{
				return true;
			}break;
			default:{
				return false;
			}break;
			}
		} else {
			return false;
		}
	}
}
function thx_text_table_Canvas_3(&$_gthis, $buff, $symbol1) {
	{
		$tmp = $_gthis->render($symbol1);
		return _hx_string_or_null($buff) . _hx_string_or_null($tmp);
	}
}
