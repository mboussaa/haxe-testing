<?php

// Generated by Haxe 3.3.0
class thx_text_table__CellValue_CellValue_Impl_ {
	public function __construct(){}
	static function fromInt($v) {
		return thx_text_table_CellValueImpl::IntCell($v);
	}
	static function fromFloat($v) {
		return thx_text_table_CellValueImpl::FloatCell($v);
	}
	static function fromString($v) {
		return thx_text_table_CellValueImpl::StringCell($v);
	}
	static function fromBool($v) {
		return thx_text_table_CellValueImpl::BoolCell($v);
	}
	static function fromDate($v) {
		return thx_text_table_CellValueImpl::DateTimeCell(thx__DateTime_DateTime_Impl_::fromDate($v));
	}
	static function fromDateTime($v) {
		return thx_text_table_CellValueImpl::DateTimeCell($v);
	}
	static function fromTime($v) {
		return thx_text_table_CellValueImpl::TimeCell($v);
	}
	static function fromDynamic($value) {
		if(null === $value) {
			return thx_text_table_CellValueImpl::$hEmpty;
		}
		$tmp = Type::typeof($value);
		$_g = thx_Types::toString($tmp);
		switch($_g) {
		case "Bool":{
			return thx_text_table_CellValueImpl::BoolCell($value);
		}break;
		case "Date":{
			return thx_text_table_CellValueImpl::DateTimeCell(thx__DateTime_DateTime_Impl_::fromDate($value));
		}break;
		case "Float":{
			return thx_text_table_CellValueImpl::FloatCell($value);
		}break;
		case "Int":{
			return thx_text_table_CellValueImpl::IntCell($value);
		}break;
		case "String":{
			return thx_text_table__CellValue_CellValue_Impl_::parseString($value);
		}break;
		default:{
			$tmp1 = Std::string($value);
			return thx_text_table_CellValueImpl::StringCell($tmp1);
		}break;
		}
	}
	static function parseString($value) {
		if(null === $value) {
			return thx_text_table_CellValueImpl::$hEmpty;
		}
		$_g = strtolower($value);
		switch($_g) {
		case "on":case "t":case "true":case "✓":case "✔":{
			return thx_text_table_CellValueImpl::BoolCell(true);
		}break;
		case "f":case "false":case "off":case "✕":case "✗":{
			return thx_text_table_CellValueImpl::BoolCell(false);
		}break;
		default:{
			$tmp = thx_Ints::canParse($_g);
			if($tmp) {
				$tmp1 = thx_Ints::parse($_g, null);
				return thx_text_table_CellValueImpl::IntCell($tmp1);
			} else {
				$tmp2 = thx_Floats::canParse($_g);
				if($tmp2) {
					$tmp3 = thx_Ints::parse($_g, null);
					return thx_text_table_CellValueImpl::FloatCell($tmp3);
				} else {
					try {
						$tmp4 = thx__DateTime_DateTime_Impl_::fromString($value);
						return thx_text_table_CellValueImpl::DateTimeCell($tmp4);
					}catch(Exception $__hx__e) {
						$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
						$_ = $_ex_;
						{
							try {
								$tmp5 = thx__Time_Time_Impl_::fromString($value);
								return thx_text_table_CellValueImpl::TimeCell($tmp5);
							}catch(Exception $__hx__e) {
								$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
								$_1 = $_ex_;
								{
									return thx_text_table_CellValueImpl::StringCell($value);
								}
							}
						}
					}
				}
			}
		}break;
		}
	}
	static function hempty() {
		return thx_text_table_CellValueImpl::$hEmpty;
	}
	static function na() {
		return thx_text_table_CellValueImpl::$NA;
	}
	function __toString() { return 'thx.text.table._CellValue.CellValue_Impl_'; }
}
