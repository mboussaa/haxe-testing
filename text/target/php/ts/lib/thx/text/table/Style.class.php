<?php

// Generated by Haxe 3.3.0
class thx_text_table_Style implements thx_text_table_IStyle{
	public function __construct() {}
	public $type;
	public $maxHeight;
	public $minHeight;
	public $maxWidth;
	public $minWidth;
	public $formatter;
	public $aligner;
	public function setAlign($align) {
		$this->set_aligner(array(new _hx_lambda(array(&$align), "thx_text_table_Style_0"), 'execute'));
	}
	public function get_type() {
		return $this->type;
	}
	public function set_type($value) {
		return $this->type = $value;
	}
	public function get_maxHeight() {
		return $this->maxHeight;
	}
	public function set_maxHeight($value) {
		return $this->maxHeight = $value;
	}
	public function get_minHeight() {
		return $this->minHeight;
	}
	public function set_minHeight($value) {
		return $this->minHeight = $value;
	}
	public function get_maxWidth() {
		return $this->maxWidth;
	}
	public function set_maxWidth($value) {
		return $this->maxWidth = $value;
	}
	public function get_minWidth() {
		return $this->minWidth;
	}
	public function set_minWidth($value) {
		return $this->minWidth = $value;
	}
	public function get_formatter() {
		return (isset($this->formatter) ? $this->formatter: array($this, "formatter"));
	}
	public function set_formatter($value) {
		return $this->formatter = $value;
	}
	public function get_aligner() {
		return (isset($this->aligner) ? $this->aligner: array($this, "aligner"));
	}
	public function set_aligner($value) {
		return $this->aligner = $value;
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $__properties__ = array("set_aligner" => "set_aligner","get_aligner" => "get_aligner","set_formatter" => "set_formatter","get_formatter" => "get_formatter","set_minWidth" => "set_minWidth","get_minWidth" => "get_minWidth","set_maxWidth" => "set_maxWidth","get_maxWidth" => "get_maxWidth","set_minHeight" => "set_minHeight","get_minHeight" => "get_minHeight","set_maxHeight" => "set_maxHeight","get_maxHeight" => "get_maxHeight","set_type" => "set_type","get_type" => "get_type");
	function __toString() { return 'thx.text.table.Style'; }
}
function thx_text_table_Style_0(&$align, $_, $_1) {
	{
		return $align;
	}
}
