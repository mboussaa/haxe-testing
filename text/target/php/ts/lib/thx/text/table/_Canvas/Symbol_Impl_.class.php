<?php

// Generated by Haxe 3.3.0
class thx_text_table__Canvas_Symbol_Impl_ {
	public function __construct(){}
	static function combine($this1, $that) {
		if(null === $this1) {
			return $that;
		}
		if(null === $that) {
			return $this1;
		}
		$tmp = $this1->index;
		switch($tmp) {
		case 0:{
			return $that;
		}break;
		case 2:{
			$tmp1 = $that->index;
			switch($tmp1) {
			case 0:{
				return $this1;
			}break;
			case 2:{
				$tmp2 = thx_text_table__Canvas_Symbol_Impl_::mergeBorders(_hx_deref($this1)->params[0], _hx_deref($that)->params[0]);
				return thx_text_table_SymbolImpl::Border($tmp2);
			}break;
			default:{
				return $that;
			}break;
			}
		}break;
		default:{
			if($that->index === 0) {
				return $this1;
			} else {
				return $that;
			}
		}break;
		}
	}
	static function mergeBorders($b1, $b2) {
		$tmp = $b1->index;
		switch($tmp) {
		case 0:{
			switch($b2->index) {
			case 0:{
				return $b1;
			}break;
			case 1:{
				return $b2;
			}break;
			case 2:{
				return $b2;
			}break;
			}
		}break;
		case 1:{
			$tmp1 = $b2->index;
			switch($tmp1) {
			case 0:{
				return $b1;
			}break;
			case 1:{
				$t1 = _hx_deref($b1)->params[0];
				$r1 = _hx_deref($b1)->params[1];
				$b11 = _hx_deref($b1)->params[2];
				$l1 = _hx_deref($b1)->params[3];
				$l2 = _hx_deref($b2)->params[3];
				$b21 = _hx_deref($b2)->params[2];
				$r2 = _hx_deref($b2)->params[1];
				$tmp2 = thx_Enums::max($t1, _hx_deref($b2)->params[0]);
				$tmp3 = thx_Enums::max($r1, $r2);
				$tmp4 = thx_Enums::max($b11, $b21);
				$tmp5 = thx_Enums::max($l1, $l2);
				return thx_text_table_Border::RemovableCross($tmp2, $tmp3, $tmp4, $tmp5);
			}break;
			case 2:{
				$t11 = _hx_deref($b1)->params[0];
				$r11 = _hx_deref($b1)->params[1];
				$b12 = _hx_deref($b1)->params[2];
				$l11 = _hx_deref($b1)->params[3];
				$l21 = _hx_deref($b2)->params[3];
				$b22 = _hx_deref($b2)->params[2];
				$r21 = _hx_deref($b2)->params[1];
				$tmp6 = thx_Enums::max($t11, _hx_deref($b2)->params[0]);
				$tmp7 = thx_Enums::max($r11, $r21);
				$tmp8 = thx_Enums::max($b12, $b22);
				$tmp9 = thx_Enums::max($l11, $l21);
				return thx_text_table_Border::Cross($tmp6, $tmp7, $tmp8, $tmp9);
			}break;
			}
		}break;
		case 2:{
			$tmp10 = $b2->index;
			switch($tmp10) {
			case 0:{
				return $b1;
			}break;
			case 1:{
				$t12 = _hx_deref($b1)->params[0];
				$r12 = _hx_deref($b1)->params[1];
				$b13 = _hx_deref($b1)->params[2];
				$l12 = _hx_deref($b1)->params[3];
				$l22 = _hx_deref($b2)->params[3];
				$b23 = _hx_deref($b2)->params[2];
				$r22 = _hx_deref($b2)->params[1];
				$tmp11 = thx_Enums::max($t12, _hx_deref($b2)->params[0]);
				$tmp12 = thx_Enums::max($r12, $r22);
				$tmp13 = thx_Enums::max($b13, $b23);
				$tmp14 = thx_Enums::max($l12, $l22);
				return thx_text_table_Border::Cross($tmp11, $tmp12, $tmp13, $tmp14);
			}break;
			case 2:{
				$t13 = _hx_deref($b1)->params[0];
				$r13 = _hx_deref($b1)->params[1];
				$b14 = _hx_deref($b1)->params[2];
				$l13 = _hx_deref($b1)->params[3];
				$l23 = _hx_deref($b2)->params[3];
				$b24 = _hx_deref($b2)->params[2];
				$r23 = _hx_deref($b2)->params[1];
				$tmp15 = thx_Enums::max($t13, _hx_deref($b2)->params[0]);
				$tmp16 = thx_Enums::max($r13, $r23);
				$tmp17 = thx_Enums::max($b14, $b24);
				$tmp18 = thx_Enums::max($l13, $l23);
				return thx_text_table_Border::Cross($tmp15, $tmp16, $tmp17, $tmp18);
			}break;
			}
		}break;
		}
	}
	function __toString() { return 'thx.text.table._Canvas.Symbol_Impl_'; }
}
