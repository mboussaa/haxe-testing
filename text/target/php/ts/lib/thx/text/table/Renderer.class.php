<?php

// Generated by Haxe 3.3.0
class thx_text_table_Renderer {
	public function __construct($padding = null) {
		if(!php_Boot::$skip_constructor) {
		if($padding === null) {
			$padding = 1;
		}
		$this->padding = $padding;
	}}
	public $padding;
	public $canvas;
	public $colWidths;
	public $rowHeights;
	public $symbolPos;
	public $table;
	public function render($table) {
		$this->table = $table;
		$this->canvas = new thx_text_table_Canvas(0, 0);
		$this->processContents();
		$tmp = $this->canvas->toString();
		return "\x0A" . _hx_string_or_null($tmp);
	}
	public function processContents() {
		$_gthis = $this;
		$_g = (new _hx_array(array()));
		{
			$_g2 = 0;
			$_g1 = $this->table->get_cols();
			while($_g2 < $_g1) {
				++$_g2;
				$_g->push(0);
			}
		}
		$this->colWidths = $_g;
		$_g11 = (new _hx_array(array()));
		{
			$_g3 = 0;
			$_g21 = $this->table->get_cols();
			while($_g3 < $_g21) {
				++$_g3;
				$_g11->push(0);
			}
		}
		$this->symbolPos = $_g11;
		$_g22 = (new _hx_array(array()));
		{
			$_g4 = 0;
			$_g31 = $this->table->get_rows();
			while($_g4 < $_g31) {
				++$_g4;
				$_g22->push(0);
			}
		}
		$this->rowHeights = $_g22;
		$tmp = $this->table->toArray();
		$cells = thx_Arrays::order($tmp, array(new _hx_lambda(array(), "thx_text_table_Renderer_0"), 'execute'));
		$blocks = $cells->map(array(new _hx_lambda(array(&$_gthis), "thx_text_table_Renderer_1"), 'execute'));
		$width1 = thx_Arrays::reduce($this->colWidths, (isset($this->reduceWidth) ? $this->reduceWidth: array($this, "reduceWidth")), 1);
		$height1 = thx_Arrays::reduce($this->rowHeights, (isset($this->reduceHeight) ? $this->reduceHeight: array($this, "reduceHeight")), 1);
		$this->canvas->expand($width1, $height1);
		thx_Arrays::each($blocks, array(new _hx_lambda(array(&$_gthis), "thx_text_table_Renderer_2"), 'execute'));
		$this->canvas->paintBottomLine(thx_text_table_CellType::$Body, 0, $height1 - 1, $width1);
	}
	public function reduceWidth($acc, $width) {
		return $acc + $width + $this->padding * 2 + 1;
	}
	public function reduceHeight($acc, $height) {
		return $acc + $height + 1;
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.text.table.Renderer'; }
}
function thx_text_table_Renderer_0($a, $b) {
	{
		return thx_Enums::compare($b->span, $a->span);
	}
}
function thx_text_table_Renderer_1(&$_gthis, $cell) {
	{
		$maxWidth = $cell->style->get_maxWidth();
		$maxHeight = $cell->style->get_maxHeight();
		$minWidth = $cell->style->get_minWidth();
		$minHeight = $cell->style->get_minHeight();
		$spanRight = 1;
		$spanDown = 1;
		{
			$_g32 = $cell->span;
			$tmp1 = $_g32->index;
			switch($tmp1) {
			case 1:{
				$c = _hx_deref($_g32)->params[1];
				if($c > 1) {
					$spanRight = $c;
				}
			}break;
			case 2:{
				$c1 = _hx_deref($_g32)->params[0];
				if($c1 > 1) {
					$spanRight = $c1;
				}
			}break;
			case 4:case 6:{
				$tmp2 = $cell->table->get_cols();
				$spanRight = $tmp2 - $cell->col->index;
			}break;
			default:{}break;
			}
		}
		{
			$_g41 = $cell->span;
			$tmp3 = $_g41->index;
			switch($tmp3) {
			case 1:{
				$r = _hx_deref($_g41)->params[0];
				if($r > 1) {
					$spanDown = $r;
				}
			}break;
			case 3:{
				$r1 = _hx_deref($_g41)->params[0];
				if($r1 > 1) {
					$spanDown = $r1;
				}
			}break;
			case 5:case 6:{
				$tmp4 = $cell->table->get_rows();
				$spanDown = $tmp4 - $cell->row->index;
			}break;
			default:{}break;
			}
		}
		$tmp5 = $cell->style->get_formatter();
		$block = call_user_func_array($tmp5, array($cell->value, $maxWidth));
		$tmp6 = $cell->style->get_aligner();
		$tmp7 = $cell->style->get_type();
		$halign = call_user_func_array($tmp6, array($cell->value, $tmp7));
		$a1 = null;
		if($maxWidth === null) {
			$a1 = $block->width;
		} else {
			$b1 = $block->width;
			if($maxWidth < $b1) {
				$a1 = $maxWidth;
			} else {
				$a1 = $b1;
			}
		}
		$width = null;
		if($a1 > $minWidth) {
			$width = $a1;
		} else {
			$width = $minWidth;
		}
		$a2 = null;
		if($maxHeight === null) {
			$a2 = $block->height;
		} else {
			$b2 = $block->height;
			if($maxHeight < $b2) {
				$a2 = $maxHeight;
			} else {
				$a2 = $b2;
			}
		}
		$height = null;
		if($a2 > $minHeight) {
			$height = $a2;
		} else {
			$height = $minHeight;
		}
		$tmp8 = $halign->index === 3;
		if($tmp8) {
			$pos = $block->symbolPos(_hx_deref($halign)->params[0]);
			$a3 = $_gthis->symbolPos[$cell->col->index];
			$tmp9 = null;
			if($a3 > $pos) {
				$tmp9 = $a3;
			} else {
				$tmp9 = $pos;
			}
			$_gthis->symbolPos[$cell->col->index] = $tmp9;
			$extra = $_gthis->symbolPos->a[$cell->col->index] - $pos;
			if($spanRight === 1) {
				$a4 = $_gthis->colWidths[$cell->col->index];
				$b3 = $width + $extra;
				$tmp10 = null;
				if($a4 > $b3) {
					$tmp10 = $a4;
				} else {
					$tmp10 = $b3;
				}
				$_gthis->colWidths[$cell->col->index] = $tmp10;
			}
		} else {
			if($spanRight === 1) {
				$a5 = $_gthis->colWidths[$cell->col->index];
				$tmp11 = null;
				if($a5 > $width) {
					$tmp11 = $a5;
				} else {
					$tmp11 = $width;
				}
				$_gthis->colWidths[$cell->col->index] = $tmp11;
			}
		}
		$a6 = $_gthis->rowHeights[$cell->row->index];
		$tmp12 = null;
		if($a6 > $height) {
			$tmp12 = $a6;
		} else {
			$tmp12 = $height;
		}
		$_gthis->rowHeights[$cell->row->index] = $tmp12;
		return _hx_anonymous(array("block" => $block, "cell" => $cell, "halign" => $halign, "spanRight" => $spanRight, "spanDown" => $spanDown));
	}
}
function thx_text_table_Renderer_2(&$_gthis, $item) {
	{
		$tmp13 = $_gthis->colWidths->slice(0, $item->cell->col->index);
		$x = thx_Arrays::reduce($tmp13, (isset($_gthis->reduceWidth) ? $_gthis->reduceWidth: array($_gthis, "reduceWidth")), 0);
		$tmp14 = $_gthis->rowHeights->slice(0, $item->cell->row->index);
		$y = thx_Arrays::reduce($tmp14, (isset($_gthis->reduceHeight) ? $_gthis->reduceHeight: array($_gthis, "reduceHeight")), 0);
		$_g33 = (new _hx_array(array()));
		{
			$_g5 = 0;
			$_g42 = $item->spanRight;
			while($_g5 < $_g42) {
				$i = $_g5++;
				$tmp15 = $_gthis->colWidths[$item->cell->col->index + $i];
				$tmp16 = null;
				if($i > 0) {
					$tmp16 = 2 * $_gthis->padding + 1;
				} else {
					$tmp16 = 0;
				}
				$_g33->push($tmp15 + $tmp16);
				unset($tmp16,$tmp15,$i);
			}
		}
		$width2 = thx_ArrayInts::sum($_g33);
		$_g43 = (new _hx_array(array()));
		{
			$_g6 = 0;
			$_g51 = $item->spanDown;
			while($_g6 < $_g51) {
				$i1 = $_g6++;
				$tmp17 = $_gthis->rowHeights[$item->cell->row->index + $i1];
				$tmp18 = null;
				if($i1 > 0) {
					$tmp18 = 1;
				} else {
					$tmp18 = 0;
				}
				$_g43->push($tmp17 + $tmp18);
				unset($tmp18,$tmp17,$i1);
			}
		}
		$height2 = thx_ArrayInts::sum($_g43);
		$tmp19 = $x + 1 + $_gthis->padding;
		$tmp20 = $y + 1;
		$tmp21 = $_gthis->symbolPos[$item->cell->col->index];
		$_gthis->canvas->paintBlock($item->block, $tmp19, $tmp20, $width2, 1, $item->halign, $tmp21);
		$w = $width2 + (1 + $_gthis->padding) * 2;
		$h = $height2 + 2;
		$tmp22 = $item->cell->style->get_type();
		$_gthis->canvas->paintBorder($tmp22, $x, $y, $w, $h);
	}
}
