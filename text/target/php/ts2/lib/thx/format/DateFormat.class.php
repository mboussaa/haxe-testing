<?php

// Generated by Haxe 3.3.0
class thx_format_DateFormat {
	public function __construct(){}
	static function customFormat($d, $pattern, $culture = null) {
		$_0 = $culture;
		$t = null;
		if(null === $_0) {
			$t = null;
		} else {
			$t = $_0;
		}
		if($t !== null) {
			$culture = $t;
		} else {
			$culture = thx_format_Format::get_defaultCulture();
		}
		$ereg = new EReg("(d|M){1,4}|(z){1,3}|(y){1,5}|(f|F){1,7}|(h|H|m|s|t){1,2}|K|[:]|[/]|'[^']*'|\"[^\"]*\"|[%][daAIHMmbhBSpycCeDfiklnPqrRstTuYxXw%]", "");
		$escape = false;
		$buf = (new _hx_array(array()));
		while(strlen($pattern) > 0) {
			if($escape) {
				$escape = false;
				$tmp = _hx_substring($pattern, 0, 1);
				$buf->push($tmp);
				$pattern = _hx_substring($pattern, 1, null);
				unset($tmp);
			} else {
				$tmp1 = $ereg->match($pattern);
				if($tmp1) {
					$left = $ereg->matchedLeft();
					$tmp2 = _hx_substring($left, -1, null);
					if($tmp2 === "\\") {
						$escape = true;
						$pattern = _hx_substring($pattern, strlen($left), null);
						$tmp3 = strlen($left) - 1;
						$tmp4 = _hx_substring($left, 0, $tmp3);
						$buf->push($tmp4);
						continue;
						unset($tmp4,$tmp3);
					}
					$buf->push($left);
					$term = $ereg->matched(0);
					$right = $ereg->matchedRight();
					$pattern = $right;
					$tmp5 = null;
					if($term === ".") {
						$tmp6 = strtolower(_hx_substring($right, 0, 1));
						$tmp5 = $tmp6 === "f";
						unset($tmp6);
					} else {
						$tmp5 = false;
					}
					if($tmp5) {
						$this1 = $d[0];
						$this2 = $d[1];
						$high = $this1->high + $this2->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
						$low = $this1->low + $this2->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
						if(haxe__Int32_Int32_Impl_::ucompare($low, $this1->low) < 0) {
							++$high;
							$tmp7 = $high << haxe__Int32_Int32_Impl_::$extraBits;
							$high = $tmp7 >> haxe__Int32_Int32_Impl_::$extraBits;
							unset($tmp7);
						}
						$x = new haxe__Int64____Int64($high, $low);
						$x1 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_tickInSecond($x);
						$x2 = new haxe__Int64____Int64($x1 >> 31, $x1);
						$a = $x2;
						$b = thx_Int64s::$zero;
						$tmp8 = null;
						if($a->high === $b->high) {
							$tmp8 = $a->low === $b->low;
						} else {
							$tmp8 = false;
						}
						if($tmp8) {
							$ereg->match($right);
							$pattern = $ereg->matchedRight();
							continue;
						}
						unset($x2,$x1,$x,$tmp8,$this2,$this1,$low,$high,$b,$a);
					}
					$tmp9 = thx_format_DateFormat::formatTerm($d, $term, $culture);
					$buf->push($tmp9);
					unset($tmp9,$tmp5,$tmp2,$term,$right,$left);
				} else {
					$buf->push($pattern);
					$pattern = "";
				}
				unset($tmp1);
			}
		}
		if($escape) {
			$buf->push("\\");
		}
		return $buf->join("");
	}
	static function format($d, $pattern, $culture = null) {
		switch($pattern) {
		case "D":{
			return thx_format_DateFormat::dateLong($d, $culture);
		}break;
		case "F":{
			$tmp = thx_format_DateFormat::dateLong($d, $culture);
			$tmp1 = _hx_string_or_null($tmp) . " ";
			$tmp2 = thx_format_DateFormat::timeLong($d, $culture);
			return _hx_string_or_null($tmp1) . _hx_string_or_null($tmp2);
		}break;
		case "G":{
			$tmp3 = thx_format_DateFormat::dateShort($d, $culture);
			$tmp4 = _hx_string_or_null($tmp3) . " ";
			$tmp5 = thx_format_DateFormat::timeLong($d, $culture);
			return _hx_string_or_null($tmp4) . _hx_string_or_null($tmp5);
		}break;
		case "M":case "m":{
			return thx_format_DateFormat::monthDay($d, $culture);
		}break;
		case "T":{
			return thx_format_DateFormat::timeLong($d, $culture);
		}break;
		case "U":{
			return thx_format_DateFormat::dateTimeFull($d, $culture);
		}break;
		case "d":{
			return thx_format_DateFormat::dateShort($d, $culture);
		}break;
		case "f":{
			$tmp6 = thx_format_DateFormat::dateLong($d, $culture);
			$tmp7 = _hx_string_or_null($tmp6) . " ";
			$tmp8 = thx_format_DateFormat::timeShort($d, $culture);
			return _hx_string_or_null($tmp7) . _hx_string_or_null($tmp8);
		}break;
		case "g":{
			$tmp9 = thx_format_DateFormat::dateShort($d, $culture);
			$tmp10 = _hx_string_or_null($tmp9) . " ";
			$tmp11 = thx_format_DateFormat::timeShort($d, $culture);
			return _hx_string_or_null($tmp10) . _hx_string_or_null($tmp11);
		}break;
		case "O":case "o":{
			return thx_format_DateFormat::iso8601($d, $culture);
		}break;
		case "R":case "r":{
			return thx_format_DateFormat::rfc1123($d, $culture);
		}break;
		case "s":{
			return thx_format_DateFormat::dateTimeSortable($d, $culture);
		}break;
		case "t":{
			return thx_format_DateFormat::timeShort($d, $culture);
		}break;
		case "u":{
			return thx_format_DateFormat::universalSortable($d, $culture);
		}break;
		case "Y":case "y":{
			return thx_format_DateFormat::yearMonth($d, $culture);
		}break;
		default:{
			return thx_format_DateFormat::customFormat($d, $pattern, $culture);
		}break;
		}
	}
	static function formatTerm($d, $pattern, $culture = null) {
		switch($pattern) {
		case ".":{
			return $culture->number->separatorDecimalNumber;
		}break;
		case "/":{
			return thx_format_DateFormat::dateTime($culture)->separatorDate;
		}break;
		case ":":{
			return thx_format_DateFormat::dateTime($culture)->separatorTime;
		}break;
		case "F":{
			$a = $d[0];
			$b = $d[1];
			$high = $a->high + $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low = $a->low + $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low, $a->low) < 0) {
				$ret = $high++;
				$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
				$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x = new haxe__Int64____Int64($high, $low);
			$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_tickInSecond($x);
			return thx_format_DateFormat::getDecimalsUpTo($tmp1, 1);
		}break;
		case "FF":{
			$a1 = $d[0];
			$b1 = $d[1];
			$high1 = $a1->high + $b1->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low1 = $a1->low + $b1->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low1, $a1->low) < 0) {
				$ret1 = $high1++;
				$tmp2 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
				$high1 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x1 = new haxe__Int64____Int64($high1, $low1);
			$tmp3 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_tickInSecond($x1);
			return thx_format_DateFormat::getDecimalsUpTo($tmp3, 2);
		}break;
		case "FFF":{
			$a2 = $d[0];
			$b2 = $d[1];
			$high2 = $a2->high + $b2->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low2 = $a2->low + $b2->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low2, $a2->low) < 0) {
				$ret2 = $high2++;
				$tmp4 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
				$high2 = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x2 = new haxe__Int64____Int64($high2, $low2);
			$tmp5 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_tickInSecond($x2);
			return thx_format_DateFormat::getDecimalsUpTo($tmp5, 3);
		}break;
		case "FFFF":{
			$a3 = $d[0];
			$b3 = $d[1];
			$high3 = $a3->high + $b3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low3 = $a3->low + $b3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low3, $a3->low) < 0) {
				$ret3 = $high3++;
				$tmp6 = $high3 << haxe__Int32_Int32_Impl_::$extraBits;
				$high3 = $tmp6 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x3 = new haxe__Int64____Int64($high3, $low3);
			$tmp7 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_tickInSecond($x3);
			return thx_format_DateFormat::getDecimalsUpTo($tmp7, 4);
		}break;
		case "FFFFF":{
			$a4 = $d[0];
			$b4 = $d[1];
			$high4 = $a4->high + $b4->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low4 = $a4->low + $b4->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low4, $a4->low) < 0) {
				$ret4 = $high4++;
				$tmp8 = $high4 << haxe__Int32_Int32_Impl_::$extraBits;
				$high4 = $tmp8 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x4 = new haxe__Int64____Int64($high4, $low4);
			$tmp9 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_tickInSecond($x4);
			return thx_format_DateFormat::getDecimalsUpTo($tmp9, 5);
		}break;
		case "FFFFFF":{
			$a5 = $d[0];
			$b5 = $d[1];
			$high5 = $a5->high + $b5->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low5 = $a5->low + $b5->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low5, $a5->low) < 0) {
				$ret5 = $high5++;
				$tmp10 = $high5 << haxe__Int32_Int32_Impl_::$extraBits;
				$high5 = $tmp10 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x5 = new haxe__Int64____Int64($high5, $low5);
			$tmp11 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_tickInSecond($x5);
			return thx_format_DateFormat::getDecimalsUpTo($tmp11, 6);
		}break;
		case "FFFFFFF":{
			$a6 = $d[0];
			$b6 = $d[1];
			$high6 = $a6->high + $b6->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low6 = $a6->low + $b6->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low6, $a6->low) < 0) {
				$ret6 = $high6++;
				$tmp12 = $high6 << haxe__Int32_Int32_Impl_::$extraBits;
				$high6 = $tmp12 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x6 = new haxe__Int64____Int64($high6, $low6);
			$tmp13 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_tickInSecond($x6);
			return thx_format_DateFormat::getDecimalsString($tmp13);
		}break;
		case "H":{
			$a7 = $d[0];
			$b7 = $d[1];
			$high7 = $a7->high + $b7->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low7 = $a7->low + $b7->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low7, $a7->low) < 0) {
				$ret7 = $high7++;
				$tmp14 = $high7 << haxe__Int32_Int32_Impl_::$extraBits;
				$high7 = $tmp14 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x7 = new haxe__Int64____Int64($high7, $low7);
			$tmp15 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($x7);
			return "" . _hx_string_rec($tmp15, "");
		}break;
		case "HH":{
			$a8 = $d[0];
			$b8 = $d[1];
			$high8 = $a8->high + $b8->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low8 = $a8->low + $b8->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low8, $a8->low) < 0) {
				$ret8 = $high8++;
				$tmp16 = $high8 << haxe__Int32_Int32_Impl_::$extraBits;
				$high8 = $tmp16 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x8 = new haxe__Int64____Int64($high8, $low8);
			$tmp17 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($x8);
			$s = "" . _hx_string_rec($tmp17, "");
			$tmp18 = null;
			if(strlen("0") !== 0) {
				$tmp18 = strlen($s) >= 2;
			} else {
				$tmp18 = true;
			}
			if($tmp18) {
				return $s;
			} else {
				return str_pad($s, Math::ceil((2 - strlen($s)) / strlen("0")) * strlen("0") + strlen($s), "0", STR_PAD_LEFT);
			}
		}break;
		case "K":case "zzz":{
			return thx_format_TimeFormat::offsetLong($d[1], $culture);
		}break;
		case "M":{
			$a9 = $d[0];
			$b9 = $d[1];
			$high9 = $a9->high + $b9->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low9 = $a9->low + $b9->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low9, $a9->low) < 0) {
				$ret9 = $high9++;
				$tmp19 = $high9 << haxe__Int32_Int32_Impl_::$extraBits;
				$high9 = $tmp19 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x9 = new haxe__Int64____Int64($high9, $low9);
			$tmp20 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x9, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
			return "" . _hx_string_rec($tmp20, "");
		}break;
		case "MM":{
			$a10 = $d[0];
			$b10 = $d[1];
			$high10 = $a10->high + $b10->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low10 = $a10->low + $b10->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low10, $a10->low) < 0) {
				$ret10 = $high10++;
				$tmp21 = $high10 << haxe__Int32_Int32_Impl_::$extraBits;
				$high10 = $tmp21 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x10 = new haxe__Int64____Int64($high10, $low10);
			$tmp22 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x10, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
			$s1 = "" . _hx_string_rec($tmp22, "");
			$tmp23 = null;
			if(strlen("0") !== 0) {
				$tmp23 = strlen($s1) >= 2;
			} else {
				$tmp23 = true;
			}
			if($tmp23) {
				return $s1;
			} else {
				return str_pad($s1, Math::ceil((2 - strlen($s1)) / strlen("0")) * strlen("0") + strlen($s1), "0", STR_PAD_LEFT);
			}
		}break;
		case "MMM":{
			$dt = thx_format_DateFormat::dateTime($culture);
			$a11 = $d[0];
			$b11 = $d[1];
			$high11 = $a11->high + $b11->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low11 = $a11->low + $b11->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low11, $a11->low) < 0) {
				$ret11 = $high11++;
				$tmp24 = $high11 << haxe__Int32_Int32_Impl_::$extraBits;
				$high11 = $tmp24 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x11 = new haxe__Int64____Int64($high11, $low11);
			$tmp25 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x11, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
			return $dt->nameMonthsAbbreviated[$tmp25 - 1];
		}break;
		case "MMMM":{
			$dt1 = thx_format_DateFormat::dateTime($culture);
			$a12 = $d[0];
			$b12 = $d[1];
			$high12 = $a12->high + $b12->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low12 = $a12->low + $b12->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low12, $a12->low) < 0) {
				$ret12 = $high12++;
				$tmp26 = $high12 << haxe__Int32_Int32_Impl_::$extraBits;
				$high12 = $tmp26 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x12 = new haxe__Int64____Int64($high12, $low12);
			$tmp27 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x12, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
			return $dt1->nameMonths[$tmp27 - 1];
		}break;
		case "d":{
			$a13 = $d[0];
			$b13 = $d[1];
			$high13 = $a13->high + $b13->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low13 = $a13->low + $b13->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low13, $a13->low) < 0) {
				$ret13 = $high13++;
				$tmp28 = $high13 << haxe__Int32_Int32_Impl_::$extraBits;
				$high13 = $tmp28 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x13 = new haxe__Int64____Int64($high13, $low13);
			$tmp29 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x13, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
			return "" . _hx_string_rec($tmp29, "");
		}break;
		case "dd":{
			$a14 = $d[0];
			$b14 = $d[1];
			$high14 = $a14->high + $b14->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low14 = $a14->low + $b14->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low14, $a14->low) < 0) {
				$ret14 = $high14++;
				$tmp30 = $high14 << haxe__Int32_Int32_Impl_::$extraBits;
				$high14 = $tmp30 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x14 = new haxe__Int64____Int64($high14, $low14);
			$tmp31 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x14, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
			$s2 = "" . _hx_string_rec($tmp31, "");
			$tmp32 = null;
			if(strlen("0") !== 0) {
				$tmp32 = strlen($s2) >= 2;
			} else {
				$tmp32 = true;
			}
			if($tmp32) {
				return $s2;
			} else {
				return str_pad($s2, Math::ceil((2 - strlen($s2)) / strlen("0")) * strlen("0") + strlen($s2), "0", STR_PAD_LEFT);
			}
		}break;
		case "ddd":{
			$dt2 = thx_format_DateFormat::dateTime($culture);
			$a15 = $d[0];
			$b15 = $d[1];
			$high15 = $a15->high + $b15->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low15 = $a15->low + $b15->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low15, $a15->low) < 0) {
				$ret15 = $high15++;
				$tmp33 = $high15 << haxe__Int32_Int32_Impl_::$extraBits;
				$high15 = $tmp33 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x15 = new haxe__Int64____Int64($high15, $low15);
			$tmp34 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_dayOfWeek($x15);
			return $dt2->nameDaysAbbreviated[$tmp34];
		}break;
		case "dddd":{
			$dt3 = thx_format_DateFormat::dateTime($culture);
			$a16 = $d[0];
			$b16 = $d[1];
			$high16 = $a16->high + $b16->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low16 = $a16->low + $b16->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low16, $a16->low) < 0) {
				$ret16 = $high16++;
				$tmp35 = $high16 << haxe__Int32_Int32_Impl_::$extraBits;
				$high16 = $tmp35 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x16 = new haxe__Int64____Int64($high16, $low16);
			$tmp36 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_dayOfWeek($x16);
			return $dt3->nameDays[$tmp36];
		}break;
		case "f":{
			$a17 = $d[0];
			$b17 = $d[1];
			$high17 = $a17->high + $b17->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low17 = $a17->low + $b17->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low17, $a17->low) < 0) {
				$ret17 = $high17++;
				$tmp37 = $high17 << haxe__Int32_Int32_Impl_::$extraBits;
				$high17 = $tmp37 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x17 = new haxe__Int64____Int64($high17, $low17);
			$tmp38 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_tickInSecond($x17);
			return thx_format_DateFormat::getDecimalsPaddedUpTo($tmp38, 1);
		}break;
		case "ff":{
			$a18 = $d[0];
			$b18 = $d[1];
			$high18 = $a18->high + $b18->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low18 = $a18->low + $b18->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low18, $a18->low) < 0) {
				$ret18 = $high18++;
				$tmp39 = $high18 << haxe__Int32_Int32_Impl_::$extraBits;
				$high18 = $tmp39 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x18 = new haxe__Int64____Int64($high18, $low18);
			$tmp40 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_tickInSecond($x18);
			return thx_format_DateFormat::getDecimalsPaddedUpTo($tmp40, 2);
		}break;
		case "fff":{
			$a19 = $d[0];
			$b19 = $d[1];
			$high19 = $a19->high + $b19->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low19 = $a19->low + $b19->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low19, $a19->low) < 0) {
				$ret19 = $high19++;
				$tmp41 = $high19 << haxe__Int32_Int32_Impl_::$extraBits;
				$high19 = $tmp41 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x19 = new haxe__Int64____Int64($high19, $low19);
			$tmp42 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_tickInSecond($x19);
			return thx_format_DateFormat::getDecimalsPaddedUpTo($tmp42, 3);
		}break;
		case "ffff":{
			$a20 = $d[0];
			$b20 = $d[1];
			$high20 = $a20->high + $b20->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low20 = $a20->low + $b20->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low20, $a20->low) < 0) {
				$ret20 = $high20++;
				$tmp43 = $high20 << haxe__Int32_Int32_Impl_::$extraBits;
				$high20 = $tmp43 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x20 = new haxe__Int64____Int64($high20, $low20);
			$tmp44 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_tickInSecond($x20);
			return thx_format_DateFormat::getDecimalsPaddedUpTo($tmp44, 4);
		}break;
		case "fffff":{
			$a21 = $d[0];
			$b21 = $d[1];
			$high21 = $a21->high + $b21->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low21 = $a21->low + $b21->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low21, $a21->low) < 0) {
				$ret21 = $high21++;
				$tmp45 = $high21 << haxe__Int32_Int32_Impl_::$extraBits;
				$high21 = $tmp45 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x21 = new haxe__Int64____Int64($high21, $low21);
			$tmp46 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_tickInSecond($x21);
			return thx_format_DateFormat::getDecimalsPaddedUpTo($tmp46, 5);
		}break;
		case "ffffff":{
			$a22 = $d[0];
			$b22 = $d[1];
			$high22 = $a22->high + $b22->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low22 = $a22->low + $b22->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low22, $a22->low) < 0) {
				$ret22 = $high22++;
				$tmp47 = $high22 << haxe__Int32_Int32_Impl_::$extraBits;
				$high22 = $tmp47 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x22 = new haxe__Int64____Int64($high22, $low22);
			$tmp48 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_tickInSecond($x22);
			return thx_format_DateFormat::getDecimalsPaddedUpTo($tmp48, 6);
		}break;
		case "fffffff":{
			$a23 = $d[0];
			$b23 = $d[1];
			$high23 = $a23->high + $b23->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low23 = $a23->low + $b23->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low23, $a23->low) < 0) {
				$ret23 = $high23++;
				$tmp49 = $high23 << haxe__Int32_Int32_Impl_::$extraBits;
				$high23 = $tmp49 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x23 = new haxe__Int64____Int64($high23, $low23);
			$tmp50 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_tickInSecond($x23);
			return thx_format_DateFormat::getDecimalsPadded($tmp50);
		}break;
		case "h":{
			$a24 = $d[0];
			$b24 = $d[1];
			$high24 = $a24->high + $b24->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low24 = $a24->low + $b24->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low24, $a24->low) < 0) {
				$ret24 = $high24++;
				$tmp51 = $high24 << haxe__Int32_Int32_Impl_::$extraBits;
				$high24 = $tmp51 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x24 = new haxe__Int64____Int64($high24, $low24);
			$_g = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($x24);
			if($_g === 0) {
				return "12";
			} else {
				$d1 = $_g;
				if($d1 <= 12) {
					return "" . _hx_string_rec($d1, "");
				} else {
					return "" . _hx_string_rec(($_g - 12), "");
				}
			}
		}break;
		case "hh":{
			$s3 = thx_format_DateFormat::formatTerm($d, "h", $culture);
			$tmp52 = null;
			if(strlen("0") !== 0) {
				$tmp52 = strlen($s3) >= 2;
			} else {
				$tmp52 = true;
			}
			if($tmp52) {
				return $s3;
			} else {
				return str_pad($s3, Math::ceil((2 - strlen($s3)) / strlen("0")) * strlen("0") + strlen($s3), "0", STR_PAD_LEFT);
			}
		}break;
		case "m":{
			$a25 = $d[0];
			$b25 = $d[1];
			$high25 = $a25->high + $b25->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low25 = $a25->low + $b25->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low25, $a25->low) < 0) {
				$ret25 = $high25++;
				$tmp53 = $high25 << haxe__Int32_Int32_Impl_::$extraBits;
				$high25 = $tmp53 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x25 = new haxe__Int64____Int64($high25, $low25);
			$tmp54 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_minute($x25);
			return "" . _hx_string_rec($tmp54, "");
		}break;
		case "mm":{
			$a26 = $d[0];
			$b26 = $d[1];
			$high26 = $a26->high + $b26->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low26 = $a26->low + $b26->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low26, $a26->low) < 0) {
				$ret26 = $high26++;
				$tmp55 = $high26 << haxe__Int32_Int32_Impl_::$extraBits;
				$high26 = $tmp55 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x26 = new haxe__Int64____Int64($high26, $low26);
			$tmp56 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_minute($x26);
			$s4 = "" . _hx_string_rec($tmp56, "");
			$tmp57 = null;
			if(strlen("0") !== 0) {
				$tmp57 = strlen($s4) >= 2;
			} else {
				$tmp57 = true;
			}
			if($tmp57) {
				return $s4;
			} else {
				return str_pad($s4, Math::ceil((2 - strlen($s4)) / strlen("0")) * strlen("0") + strlen($s4), "0", STR_PAD_LEFT);
			}
		}break;
		case "s":{
			$a27 = $d[0];
			$b27 = $d[1];
			$high27 = $a27->high + $b27->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low27 = $a27->low + $b27->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low27, $a27->low) < 0) {
				$ret27 = $high27++;
				$tmp58 = $high27 << haxe__Int32_Int32_Impl_::$extraBits;
				$high27 = $tmp58 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x27 = new haxe__Int64____Int64($high27, $low27);
			$tmp59 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_second($x27);
			return "" . _hx_string_rec($tmp59, "");
		}break;
		case "ss":{
			$a28 = $d[0];
			$b28 = $d[1];
			$high28 = $a28->high + $b28->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low28 = $a28->low + $b28->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low28, $a28->low) < 0) {
				$ret28 = $high28++;
				$tmp60 = $high28 << haxe__Int32_Int32_Impl_::$extraBits;
				$high28 = $tmp60 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x28 = new haxe__Int64____Int64($high28, $low28);
			$tmp61 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_second($x28);
			$s5 = "" . _hx_string_rec($tmp61, "");
			$tmp62 = null;
			if(strlen("0") !== 0) {
				$tmp62 = strlen($s5) >= 2;
			} else {
				$tmp62 = true;
			}
			if($tmp62) {
				return $s5;
			} else {
				return str_pad($s5, Math::ceil((2 - strlen($s5)) / strlen("0")) * strlen("0") + strlen($s5), "0", STR_PAD_LEFT);
			}
		}break;
		case "t":{
			$dt4 = thx_format_DateFormat::dateTime($culture);
			$tmp63 = null;
			$a29 = $d[0];
			$b29 = $d[1];
			$high29 = $a29->high + $b29->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low29 = $a29->low + $b29->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low29, $a29->low) < 0) {
				$ret29 = $high29++;
				$tmp64 = $high29 << haxe__Int32_Int32_Impl_::$extraBits;
				$high29 = $tmp64 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x29 = new haxe__Int64____Int64($high29, $low29);
			$tmp65 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($x29);
			if($tmp65 < 12) {
				$tmp63 = $dt4->designatorAm;
			} else {
				$tmp63 = $dt4->designatorPm;
			}
			return haxe_Utf8::sub($tmp63, 0, 1);
		}break;
		case "tt":{
			$dt5 = thx_format_DateFormat::dateTime($culture);
			$a30 = $d[0];
			$b30 = $d[1];
			$high30 = $a30->high + $b30->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low30 = $a30->low + $b30->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low30, $a30->low) < 0) {
				$ret30 = $high30++;
				$tmp66 = $high30 << haxe__Int32_Int32_Impl_::$extraBits;
				$high30 = $tmp66 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x30 = new haxe__Int64____Int64($high30, $low30);
			$tmp67 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($x30);
			if($tmp67 < 12) {
				return $dt5->designatorAm;
			} else {
				return $dt5->designatorPm;
			}
		}break;
		case "y":{
			$a31 = $d[0];
			$b31 = $d[1];
			$high31 = $a31->high + $b31->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low31 = $a31->low + $b31->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low31, $a31->low) < 0) {
				$ret31 = $high31++;
				$tmp68 = $high31 << haxe__Int32_Int32_Impl_::$extraBits;
				$high31 = $tmp68 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x31 = new haxe__Int64____Int64($high31, $low31);
			$tmp69 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x31, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			return "" . _hx_string_rec(_hx_mod($tmp69, 100), "");
		}break;
		case "yy":{
			$a32 = $d[0];
			$b32 = $d[1];
			$high32 = $a32->high + $b32->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low32 = $a32->low + $b32->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low32, $a32->low) < 0) {
				$ret32 = $high32++;
				$tmp70 = $high32 << haxe__Int32_Int32_Impl_::$extraBits;
				$high32 = $tmp70 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x32 = new haxe__Int64____Int64($high32, $low32);
			$tmp71 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x32, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			return thx_Ints::lpad(_hx_mod($tmp71, 100), "0", 2);
		}break;
		case "yyy":{
			$a33 = $d[0];
			$b33 = $d[1];
			$high33 = $a33->high + $b33->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low33 = $a33->low + $b33->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low33, $a33->low) < 0) {
				$ret33 = $high33++;
				$tmp72 = $high33 << haxe__Int32_Int32_Impl_::$extraBits;
				$high33 = $tmp72 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x33 = new haxe__Int64____Int64($high33, $low33);
			$tmp73 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x33, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			return thx_Ints::lpad($tmp73, "0", 3);
		}break;
		case "yyyy":{
			$a34 = $d[0];
			$b34 = $d[1];
			$high34 = $a34->high + $b34->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low34 = $a34->low + $b34->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low34, $a34->low) < 0) {
				$ret34 = $high34++;
				$tmp74 = $high34 << haxe__Int32_Int32_Impl_::$extraBits;
				$high34 = $tmp74 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x34 = new haxe__Int64____Int64($high34, $low34);
			$tmp75 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x34, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			return thx_Ints::lpad($tmp75, "0", 4);
		}break;
		case "yyyyy":{
			$a35 = $d[0];
			$b35 = $d[1];
			$high35 = $a35->high + $b35->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low35 = $a35->low + $b35->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low35, $a35->low) < 0) {
				$ret35 = $high35++;
				$tmp76 = $high35 << haxe__Int32_Int32_Impl_::$extraBits;
				$high35 = $tmp76 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x35 = new haxe__Int64____Int64($high35, $low35);
			$tmp77 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x35, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			return thx_Ints::lpad($tmp77, "0", 5);
		}break;
		case "z":{
			return thx_format_TimeFormat::offsetHoursShort($d[1], $culture);
		}break;
		case "zz":{
			return thx_format_TimeFormat::offsetHoursLong($d[1], $culture);
		}break;
		default:{
			$tmp78 = _hx_substring($pattern, 0, 1);
			if($tmp78 === "%") {
				return thx_format_DateFormat::strftime($d, $pattern, $culture);
			} else {
				$q = $pattern;
				$tmp79 = null;
				$tmp80 = null;
				$tmp81 = null;
				if($q !== null) {
					$tmp81 = strlen($q) > 1;
				} else {
					$tmp81 = false;
				}
				if($tmp81) {
					$tmp82 = _hx_substring($q, 0, 1);
					if($tmp82 === "'") {
						$tmp83 = strlen($q) - 1;
						$tmp84 = _hx_substring($q, $tmp83, null);
						$tmp80 = $tmp84 === "'";
					} else {
						$tmp80 = false;
					}
				} else {
					$tmp80 = false;
				}
				if(!$tmp80) {
					$tmp85 = _hx_substring($q, 0, 1);
					if($tmp85 === "\"") {
						$tmp86 = strlen($q) - 1;
						$tmp87 = _hx_substring($q, $tmp86, null);
						$tmp79 = $tmp87 === "\"";
					} else {
						$tmp79 = false;
					}
				} else {
					$tmp79 = true;
				}
				if($tmp79) {
					$tmp88 = strlen($q) - 1;
					return _hx_substring($q, 1, $tmp88);
				} else {
					return $pattern;
				}
			}
		}break;
		}
	}
	static function strftime($d, $pattern, $culture = null) {
		switch($pattern) {
		case "%%":{
			return "%";
		}break;
		case "%A":{
			return thx_format_DateFormat::formatTerm($d, "dddd", $culture);
		}break;
		case "%B":{
			return thx_format_DateFormat::formatTerm($d, "MMMM", $culture);
		}break;
		case "%C":{
			$a = $d[0];
			$b = $d[1];
			$high = $a->high + $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low = $a->low + $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low, $a->low) < 0) {
				$ret = $high++;
				$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
				$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x = new haxe__Int64____Int64($high, $low);
			$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			$tmp2 = Math::floor($tmp1 / 100);
			return "" . _hx_string_rec($tmp2, "");
		}break;
		case "%D":{
			return thx_format_DateFormat::format($d, "%m/%d/%y", $culture);
		}break;
		case "%H":{
			return thx_format_DateFormat::formatTerm($d, "HH", $culture);
		}break;
		case "%I":{
			return thx_format_DateFormat::formatTerm($d, "hh", $culture);
		}break;
		case "%M":{
			return thx_format_DateFormat::formatTerm($d, "mm", $culture);
		}break;
		case "%P":{
			$dt = thx_format_DateFormat::dateTime($culture);
			$tmp3 = null;
			$a1 = $d[0];
			$b1 = $d[1];
			$high1 = $a1->high + $b1->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low1 = $a1->low + $b1->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low1, $a1->low) < 0) {
				$ret1 = $high1++;
				$tmp4 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
				$high1 = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x1 = new haxe__Int64____Int64($high1, $low1);
			$tmp5 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($x1);
			if($tmp5 < 12) {
				$tmp3 = $dt->designatorAm;
			} else {
				$tmp3 = $dt->designatorPm;
			}
			return strtolower($tmp3);
		}break;
		case "%R":{
			return thx_format_DateFormat::format($d, "%H:%M", $culture);
		}break;
		case "%S":{
			return thx_format_DateFormat::formatTerm($d, "ss", $culture);
		}break;
		case "%T":{
			return thx_format_DateFormat::format($d, "%H:%M:%S", $culture);
		}break;
		case "%X":{
			return thx_format_DateFormat::timeLong($d, $culture);
		}break;
		case "%Y":{
			$a2 = $d[0];
			$b2 = $d[1];
			$high2 = $a2->high + $b2->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low2 = $a2->low + $b2->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low2, $a2->low) < 0) {
				$ret2 = $high2++;
				$tmp6 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
				$high2 = $tmp6 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x2 = new haxe__Int64____Int64($high2, $low2);
			$tmp7 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x2, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			return "" . _hx_string_rec($tmp7, "");
		}break;
		case "%a":{
			return thx_format_DateFormat::formatTerm($d, "ddd", $culture);
		}break;
		case "%c":{
			return thx_format_DateFormat::dateTimeFull($d, $culture);
		}break;
		case "%d":{
			return thx_format_DateFormat::formatTerm($d, "dd", $culture);
		}break;
		case "%e":{
			$a3 = $d[0];
			$b3 = $d[1];
			$high3 = $a3->high + $b3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low3 = $a3->low + $b3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low3, $a3->low) < 0) {
				$ret3 = $high3++;
				$tmp8 = $high3 << haxe__Int32_Int32_Impl_::$extraBits;
				$high3 = $tmp8 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x3 = new haxe__Int64____Int64($high3, $low3);
			$tmp9 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x3, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
			$s = "" . _hx_string_rec($tmp9, "");
			$tmp10 = null;
			if(strlen(" ") !== 0) {
				$tmp10 = strlen($s) >= 2;
			} else {
				$tmp10 = true;
			}
			if($tmp10) {
				return $s;
			} else {
				return str_pad($s, Math::ceil((2 - strlen($s)) / strlen(" ")) * strlen(" ") + strlen($s), " ", STR_PAD_LEFT);
			}
		}break;
		case "%f":{
			$a4 = $d[0];
			$b4 = $d[1];
			$high4 = $a4->high + $b4->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low4 = $a4->low + $b4->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low4, $a4->low) < 0) {
				$ret4 = $high4++;
				$tmp11 = $high4 << haxe__Int32_Int32_Impl_::$extraBits;
				$high4 = $tmp11 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x4 = new haxe__Int64____Int64($high4, $low4);
			$tmp12 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x4, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
			$s1 = "" . _hx_string_rec($tmp12, "");
			$tmp13 = null;
			if(strlen(" ") !== 0) {
				$tmp13 = strlen($s1) >= 2;
			} else {
				$tmp13 = true;
			}
			if($tmp13) {
				return $s1;
			} else {
				return str_pad($s1, Math::ceil((2 - strlen($s1)) / strlen(" ")) * strlen(" ") + strlen($s1), " ", STR_PAD_LEFT);
			}
		}break;
		case "%b":case "%h":{
			return thx_format_DateFormat::formatTerm($d, "MMM", $culture);
		}break;
		case "%i":{
			$a5 = $d[0];
			$b5 = $d[1];
			$high5 = $a5->high + $b5->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low5 = $a5->low + $b5->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low5, $a5->low) < 0) {
				$ret5 = $high5++;
				$tmp14 = $high5 << haxe__Int32_Int32_Impl_::$extraBits;
				$high5 = $tmp14 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x5 = new haxe__Int64____Int64($high5, $low5);
			$tmp15 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_minute($x5);
			$s2 = "" . _hx_string_rec($tmp15, "");
			$tmp16 = null;
			if(strlen(" ") !== 0) {
				$tmp16 = strlen($s2) >= 2;
			} else {
				$tmp16 = true;
			}
			if($tmp16) {
				return $s2;
			} else {
				return str_pad($s2, Math::ceil((2 - strlen($s2)) / strlen(" ")) * strlen(" ") + strlen($s2), " ", STR_PAD_LEFT);
			}
		}break;
		case "%k":{
			$a6 = $d[0];
			$b6 = $d[1];
			$high6 = $a6->high + $b6->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low6 = $a6->low + $b6->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low6, $a6->low) < 0) {
				$ret6 = $high6++;
				$tmp17 = $high6 << haxe__Int32_Int32_Impl_::$extraBits;
				$high6 = $tmp17 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x6 = new haxe__Int64____Int64($high6, $low6);
			$tmp18 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($x6);
			$s3 = "" . _hx_string_rec($tmp18, "");
			$tmp19 = null;
			if(strlen(" ") !== 0) {
				$tmp19 = strlen($s3) >= 2;
			} else {
				$tmp19 = true;
			}
			if($tmp19) {
				return $s3;
			} else {
				return str_pad($s3, Math::ceil((2 - strlen($s3)) / strlen(" ")) * strlen(" ") + strlen($s3), " ", STR_PAD_LEFT);
			}
		}break;
		case "%l":{
			$s4 = thx_format_DateFormat::formatTerm($d, "h", $culture);
			$tmp20 = null;
			if(strlen(" ") !== 0) {
				$tmp20 = strlen($s4) >= 2;
			} else {
				$tmp20 = true;
			}
			if($tmp20) {
				return $s4;
			} else {
				return str_pad($s4, Math::ceil((2 - strlen($s4)) / strlen(" ")) * strlen(" ") + strlen($s4), " ", STR_PAD_LEFT);
			}
		}break;
		case "%m":{
			return thx_format_DateFormat::formatTerm($d, "MM", $culture);
		}break;
		case "%n":{
			return "\x0A";
		}break;
		case "%p":{
			return thx_format_DateFormat::formatTerm($d, "tt", $culture);
		}break;
		case "%q":{
			$a7 = $d[0];
			$b7 = $d[1];
			$high7 = $a7->high + $b7->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low7 = $a7->low + $b7->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low7, $a7->low) < 0) {
				$ret7 = $high7++;
				$tmp21 = $high7 << haxe__Int32_Int32_Impl_::$extraBits;
				$high7 = $tmp21 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x7 = new haxe__Int64____Int64($high7, $low7);
			$tmp22 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_second($x7);
			$s5 = "" . _hx_string_rec($tmp22, "");
			$tmp23 = null;
			if(strlen(" ") !== 0) {
				$tmp23 = strlen($s5) >= 2;
			} else {
				$tmp23 = true;
			}
			if($tmp23) {
				return $s5;
			} else {
				return str_pad($s5, Math::ceil((2 - strlen($s5)) / strlen(" ")) * strlen(" ") + strlen($s5), " ", STR_PAD_LEFT);
			}
		}break;
		case "%r":{
			return thx_format_DateFormat::format($d, "%I:%M:%S %p", $culture);
		}break;
		case "%s":{
			$a8 = $d[0];
			$b8 = thx__DateTimeUtc_DateTimeUtc_Impl_::$unixEpochTicks;
			$high8 = $a8->high - $b8->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low8 = $a8->low - $b8->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($a8->low, $b8->low) < 0) {
				$ret8 = $high8--;
				$tmp24 = $high8 << haxe__Int32_Int32_Impl_::$extraBits;
				$high8 = $tmp24 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x8 = new haxe__Int64____Int64($high8, $low8);
			$a9 = $x8;
			$b9 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMillisecondI64;
			$tmp25 = haxe__Int64_Int64_Impl_::divMod($a9, $b9)->quotient;
			$tmp26 = Std::int(thx_Int64s::toFloat($tmp25) / 1000);
			return "" . _hx_string_rec($tmp26, "");
		}break;
		case "%t":{
			return "\x09";
		}break;
		case "%u":{
			$a10 = $d[0];
			$b10 = $d[1];
			$high9 = $a10->high + $b10->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low9 = $a10->low + $b10->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low9, $a10->low) < 0) {
				$ret9 = $high9++;
				$tmp27 = $high9 << haxe__Int32_Int32_Impl_::$extraBits;
				$high9 = $tmp27 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x9 = new haxe__Int64____Int64($high9, $low9);
			$day = thx__DateTimeUtc_DateTimeUtc_Impl_::get_dayOfWeek($x9);
			if($day === 0) {
				return "7";
			} else {
				return "" . _hx_string_rec($day, "");
			}
		}break;
		case "%w":{
			$a11 = $d[0];
			$b11 = $d[1];
			$high10 = $a11->high + $b11->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low10 = $a11->low + $b11->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low10, $a11->low) < 0) {
				$ret10 = $high10++;
				$tmp28 = $high10 << haxe__Int32_Int32_Impl_::$extraBits;
				$high10 = $tmp28 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x10 = new haxe__Int64____Int64($high10, $low10);
			$tmp29 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_dayOfWeek($x10);
			return "" . _hx_string_rec($tmp29, "");
		}break;
		case "%x":{
			return thx_format_DateFormat::dateLong($d, $culture);
		}break;
		case "%y":{
			return thx_format_DateFormat::formatTerm($d, "y", $culture);
		}break;
		case "%z":{
			return thx_format_TimeFormat::iso8601OffsetShort($d[1]);
		}break;
		default:{
			return $pattern;
		}break;
		}
	}
	static function dateLong($d, $culture = null) {
		return thx_format_DateFormat::customFormat($d, thx_format_DateFormat::dateTime($culture)->patternDateLong, $culture);
	}
	static function dateShort($d, $culture = null) {
		return thx_format_DateFormat::customFormat($d, thx_format_DateFormat::dateTime($culture)->patternDateShort, $culture);
	}
	static function dateTimeFull($d, $culture = null) {
		return thx_format_DateFormat::customFormat($d, thx_format_DateFormat::dateTime($culture)->patternDateTimeFull, $culture);
	}
	static function dateTimeSortable($d, $culture = null) {
		return thx_format_DateFormat::customFormat($d, thx_format_DateFormat::dateTime($culture)->patternDateTimeSortable, $culture);
	}
	static function monthDay($d, $culture = null) {
		return thx_format_DateFormat::customFormat($d, thx_format_DateFormat::dateTime($culture)->patternMonthDay, $culture);
	}
	static function rfc1123($d, $culture = null) {
		return thx_format_DateFormat::customFormat((new _hx_array(array($d[0], thx__Time_Time_Impl_::$zero))), thx_format_DateFormat::dateTime($culture)->patternRfc1123, $culture);
	}
	static function timeLong($d, $culture = null) {
		return thx_format_DateFormat::customFormat($d, thx_format_DateFormat::dateTime($culture)->patternTimeLong, $culture);
	}
	static function timeShort($d, $culture = null) {
		return thx_format_DateFormat::customFormat($d, thx_format_DateFormat::dateTime($culture)->patternTimeShort, $culture);
	}
	static function universalSortable($d, $culture = null) {
		return thx_format_DateFormat::customFormat((new _hx_array(array($d[0], thx__Time_Time_Impl_::$zero))), thx_format_DateFormat::dateTime($culture)->patternUniversalSortable, $culture);
	}
	static function iso8601($d, $culture = null) {
		return thx_format_DateFormat::customFormat($d, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK", $culture);
	}
	static function yearMonth($d, $culture = null) {
		return thx_format_DateFormat::customFormat($d, thx_format_DateFormat::dateTime($culture)->patternYearMonth, $culture);
	}
	static function getDecimalsPadded($decimals) {
		return thx_Ints::lpad($decimals, "0", 7);
	}
	static function getDecimalsString($decimals) {
		$tmp = thx_format_DateFormat::getDecimalsPadded($decimals);
		return thx_Strings::trimCharsRight($tmp, "0");
	}
	static function getDecimalsUpTo($decimals, $to) {
		return _hx_substring(thx_format_DateFormat::getDecimalsString($decimals), 0, $to);
	}
	static function getDecimalsPaddedUpTo($decimals, $to) {
		return _hx_substring(thx_format_DateFormat::getDecimalsPadded($decimals), 0, $to);
	}
	static function dateTime($culture = null) {
		$tmp = null;
		if(null !== $culture) {
			$tmp = null !== $culture->dateTime;
		} else {
			$tmp = false;
		}
		if($tmp) {
			return $culture->dateTime;
		} else {
			return thx_format_Format::get_defaultCulture()->dateTime;
		}
	}
	static function getPattern() {
		return new EReg("(d|M){1,4}|(z){1,3}|(y){1,5}|(f|F){1,7}|(h|H|m|s|t){1,2}|K|[:]|[/]|'[^']*'|\"[^\"]*\"|[%][daAIHMmbhBSpycCeDfiklnPqrRstTuYxXw%]", "");
	}
	function __toString() { return 'thx.format.DateFormat'; }
}
