<?php

// Generated by Haxe 3.3.0
class thx_text_table_StringBlock {
	public function __construct($lines) {
		if(!php_Boot::$skip_constructor) {
		$this->lines = $lines;
		$this->width = thx_Arrays::reduce($lines, array(new _hx_lambda(array(), "thx_text_table_StringBlock_0"), 'execute'), 0);
		$this->height = $lines->length;
	}}
	public $lines;
	public $width;
	public $height;
	public function getLine($index) {
		if($index >= $this->height) {
			return (new _hx_array(array()));
		}
		return thx_Strings::toArray($this->lines[$index]);
	}
	public function symbolPos($s) {
		$max = 0;
		$pos = null;
		{
			$_g = 0;
			$_g1 = $this->lines;
			while($_g < $_g1->length) {
				$line = $_g1[$_g];
				++$_g;
				$pos = _hx_last_index_of($line, $s, null);
				if($pos <= 0) {
					continue;
				}
				$b = strlen($line) - $pos;
				$tmp = $max > $b;
				if($tmp) {
					$max = $max;
				} else {
					$max = $b;
				}
				unset($tmp,$line,$b);
			}
		}
		return $max;
	}
	public function toString() {
		return $this->lines->join("\x0A");
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static function fromString($s) {
		$lines = _hx_deref(new EReg("(\x0D\x0A|\x0A\x0D|\x0A|\x0D)", "g"))->split($s);
		return new thx_text_table_StringBlock($lines);
	}
	static function hempty() {
		return new thx_text_table_StringBlock((new _hx_array(array())));
	}
	function __toString() { return $this->toString(); }
}
function thx_text_table_StringBlock_0($width, $line) {
	{
		$b = haxe_Utf8::length($line);
		if($width > $b) {
			return $width;
		} else {
			return $b;
		}
	}
}
