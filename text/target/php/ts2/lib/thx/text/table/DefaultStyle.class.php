<?php

// Generated by Haxe 3.3.0
class thx_text_table_DefaultStyle implements thx_text_table_IStyle{
	public function __construct() {}
	public function setAlign($align) {
		$this->set_aligner(array(new _hx_lambda(array(&$align), "thx_text_table_DefaultStyle_0"), 'execute'));
	}
	public function get_type() {
		return thx_text_table_DefaultStyle::$defaultType;
	}
	public function set_type($value) {
		return thx_text_table_DefaultStyle::$defaultType = $value;
	}
	public function get_maxHeight() {
		return thx_text_table_DefaultStyle::$defaultMaxHeight;
	}
	public function set_maxHeight($value) {
		return thx_text_table_DefaultStyle::$defaultMaxHeight = $value;
	}
	public function get_minHeight() {
		return thx_text_table_DefaultStyle::$defaultMinHeight;
	}
	public function set_minHeight($value) {
		return thx_text_table_DefaultStyle::$defaultMinHeight = $value;
	}
	public function get_maxWidth() {
		return thx_text_table_DefaultStyle::$defaultMaxWidth;
	}
	public function set_maxWidth($value) {
		return thx_text_table_DefaultStyle::$defaultMaxWidth = $value;
	}
	public function get_minWidth() {
		return thx_text_table_DefaultStyle::$defaultMinWidth;
	}
	public function set_minWidth($value) {
		return thx_text_table_DefaultStyle::$defaultMinWidth = $value;
	}
	public function get_formatter() {
		return (isset(thx_text_table_DefaultStyle::$defaultFormatter) ? thx_text_table_DefaultStyle::$defaultFormatter: array("thx_text_table_DefaultStyle", "defaultFormatter"));
	}
	public function set_formatter($value) {
		return thx_text_table_DefaultStyle::$defaultFormatter = $value;
	}
	public function get_aligner() {
		return (isset(thx_text_table_DefaultStyle::$defaultAligner) ? thx_text_table_DefaultStyle::$defaultAligner: array("thx_text_table_DefaultStyle", "defaultAligner"));
	}
	public function set_aligner($value) {
		return thx_text_table_DefaultStyle::$defaultAligner = $value;
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $instance;
	static $defaultType;
	static $defaultMaxHeight = null;
	static $defaultMinHeight = 1;
	static $defaultMaxWidth = null;
	static $defaultMinWidth = 1;
	static $defaultCulture;
	static function defaultIntFormatter($v) { return call_user_func_array(self::$defaultIntFormatter, array($v)); }
	public static $defaultIntFormatter = null;
	static function defaultFloatFormatter($v) { return call_user_func_array(self::$defaultFloatFormatter, array($v)); }
	public static $defaultFloatFormatter = null;
	static function defaultStringFormatter($v) { return call_user_func_array(self::$defaultStringFormatter, array($v)); }
	public static $defaultStringFormatter = null;
	static function defaultBoolFormatter($v) { return call_user_func_array(self::$defaultBoolFormatter, array($v)); }
	public static $defaultBoolFormatter = null;
	static function defaultDateTimeFormatter($v) { return call_user_func_array(self::$defaultDateTimeFormatter, array($v)); }
	public static $defaultDateTimeFormatter = null;
	static function defaultTimeFormatter($v) { return call_user_func_array(self::$defaultTimeFormatter, array($v)); }
	public static $defaultTimeFormatter = null;
	static function defaultNAFormatter() { return call_user_func(self::$defaultNAFormatter); }
	public static $defaultNAFormatter = null;
	static function defaultEmptyFormatter() { return call_user_func(self::$defaultEmptyFormatter); }
	public static $defaultEmptyFormatter = null;
	static function defaultFormatter($value, $maxWidth) { return call_user_func_array(self::$defaultFormatter, array($value, $maxWidth)); }
	public static $defaultFormatter = null;
	static function defaultAligner($value, $type) { return call_user_func_array(self::$defaultAligner, array($value, $type)); }
	public static $defaultAligner = null;
	static $__properties__ = array("set_aligner" => "set_aligner","get_aligner" => "get_aligner","set_formatter" => "set_formatter","get_formatter" => "get_formatter","set_minWidth" => "set_minWidth","get_minWidth" => "get_minWidth","set_maxWidth" => "set_maxWidth","get_maxWidth" => "get_maxWidth","set_minHeight" => "set_minHeight","get_minHeight" => "get_minHeight","set_maxHeight" => "set_maxHeight","get_maxHeight" => "get_maxHeight","set_type" => "set_type","get_type" => "get_type");
	function __toString() { return 'thx.text.table.DefaultStyle'; }
}
thx_text_table_DefaultStyle::$instance = new thx_text_table_DefaultStyle();
thx_text_table_DefaultStyle::$defaultType = thx_text_table_CellType::$BodyCompact;
thx_text_table_DefaultStyle::$defaultCulture = thx_text_table_DefaultStyle_1();
thx_text_table_DefaultStyle::$defaultIntFormatter = array(new _hx_lambda(array(), "thx_text_table_DefaultStyle_2"), 'execute');
thx_text_table_DefaultStyle::$defaultFloatFormatter = array(new _hx_lambda(array(), "thx_text_table_DefaultStyle_3"), 'execute');
thx_text_table_DefaultStyle::$defaultStringFormatter = array(new _hx_lambda(array(), "thx_text_table_DefaultStyle_4"), 'execute');
thx_text_table_DefaultStyle::$defaultBoolFormatter = array(new _hx_lambda(array(), "thx_text_table_DefaultStyle_5"), 'execute');
thx_text_table_DefaultStyle::$defaultDateTimeFormatter = array(new _hx_lambda(array(), "thx_text_table_DefaultStyle_6"), 'execute');
thx_text_table_DefaultStyle::$defaultTimeFormatter = array(new _hx_lambda(array(), "thx_text_table_DefaultStyle_7"), 'execute');
thx_text_table_DefaultStyle::$defaultNAFormatter = array(new _hx_lambda(array(), "thx_text_table_DefaultStyle_8"), 'execute');
thx_text_table_DefaultStyle::$defaultEmptyFormatter = array(new _hx_lambda(array(), "thx_text_table_DefaultStyle_9"), 'execute');
thx_text_table_DefaultStyle::$defaultFormatter = array(new _hx_lambda(array(), "thx_text_table_DefaultStyle_10"), 'execute');
thx_text_table_DefaultStyle::$defaultAligner = array(new _hx_lambda(array(), "thx_text_table_DefaultStyle_11"), 'execute');
function thx_text_table_DefaultStyle_0(&$align, $_, $_1) {
	{
		return $align;
	}
}
function thx_text_table_DefaultStyle_1() {
	{
		$o = _hx_anonymous(array("nameRegionNative" => "United States", "separatorList" => ",", "nameNative" => "English", "number" => _hx_anonymous(array("patternPositiveCurrency" => 0, "patternPositivePercent" => 0, "symbolCurrency" => "\$", "signNegative" => "-", "patternNegativePercent" => 0, "separatorDecimalPercent" => ".", "separatorGroupNumber" => ",", "signPositive" => "+", "symbolPositiveInfinity" => "Infinity", "patternNegativeCurrency" => 0, "symbolPermille" => "â€°", "groupSizesPercent" => (new _hx_array(array(3))), "separatorDecimalCurrency" => ".", "separatorGroupCurrency" => ",", "decimalDigitsPercent" => 2, "groupSizesCurrency" => (new _hx_array(array(3))), "patternNegativeNumber" => 1, "separatorDecimalNumber" => ".", "symbolNaN" => "NaN", "separatorGroupPercent" => ",", "decimalDigitsCurrency" => 2, "symbolNegativeInfinity" => "-Infinity", "decimalDigitsNumber" => 2, "groupSizesNumber" => (new _hx_array(array(3))), "symbolPercent" => "%")), "nameCalendar" => "Gregorian", "isRightToLeft" => false, "isNeutral" => false, "nameEnglish" => "English", "dateTime" => _hx_anonymous(array("nameDays" => (new _hx_array(array("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))), "patternMonthDay" => "MMMM dd", "patternYearMonth" => "MMMM, yyyy", "firstDayOfWeekIndex" => 0, "patternTimeLong" => "h:mm:ss tt", "separatorTime" => ":", "patternTimeShort" => "h:mm tt", "nameDaysAbbreviated" => (new _hx_array(array("Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"))), "designatorPm" => "PM", "designatorAm" => "AM", "nameMonthGenitivesAbbreviated" => (new _hx_array(array("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""))), "separatorDate" => "/", "nameMonthGenitives" => (new _hx_array(array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""))), "firstDayOfWeekName" => "Sunday", "nameDaysShortest" => (new _hx_array(array("Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"))), "patternDateTimeSortable" => "yyyy'-'MM'-'dd'T'HH':'mm':'ss", "patternDateLong" => "dddd, MMMM dd, yyyy", "calendarWeekRuleName" => "FirstDay", "nameCalendarNative" => "Gregorian Calendar", "patternDateTimeFull" => "dddd, MMMM dd, yyyy h:mm:ss tt", "patternUniversalSortable" => "yyyy'-'MM'-'dd HH':'mm':'ss'Z'", "nameCalendar" => "Gregorian", "calendarWeekRuleIndex" => 0, "patternRfc1123" => "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", "patternDateShort" => "M/d/yyyy", "nameMonths" => (new _hx_array(array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""))), "nameMonthsAbbreviated" => (new _hx_array(array("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""))))), "win3" => "ENU", "nameRegionEnglish" => "United States", "lcid" => 1033, "iso3" => "eng", "iso2" => "en", "ietf" => "en-US", "code" => "en-US"));
		$tmp = $o->code;
		$tmp1 = null;
		if(null === _hx_field($o, "dateTime")) {
			$tmp1 = null;
		} else {
			$o1 = $o->dateTime;
			$tmp1 = new thx_culture_DateFormatInfo($o1->calendarWeekRuleIndex, $o1->calendarWeekRuleName, $o1->designatorAm, $o1->designatorPm, $o1->firstDayOfWeekIndex, $o1->firstDayOfWeekName, $o1->nameCalendar, $o1->nameCalendarNative, $o1->nameDays, $o1->nameDaysAbbreviated, $o1->nameDaysShortest, $o1->nameMonths, $o1->nameMonthsAbbreviated, $o1->nameMonthGenitives, $o1->nameMonthGenitivesAbbreviated, $o1->patternDateLong, $o1->patternDateShort, $o1->patternDateTimeFull, $o1->patternDateTimeSortable, $o1->patternMonthDay, $o1->patternRfc1123, $o1->patternTimeLong, $o1->patternTimeShort, $o1->patternUniversalSortable, $o1->patternYearMonth, $o1->separatorDate, $o1->separatorTime);
		}
		$tmp2 = $o->ietf;
		$tmp3 = $o->isNeutral;
		$tmp4 = $o->iso2;
		$tmp5 = $o->iso3;
		$tmp6 = $o->isRightToLeft;
		$tmp7 = $o->lcid;
		$tmp8 = $o->nameCalendar;
		$tmp9 = $o->nameEnglish;
		$tmp10 = $o->nameNative;
		$tmp11 = $o->nameRegionEnglish;
		$tmp12 = $o->nameRegionNative;
		$tmp13 = null;
		if(null === _hx_field($o, "number")) {
			$tmp13 = null;
		} else {
			$o2 = $o->number;
			$tmp13 = new thx_culture_NumberFormatInfo($o2->decimalDigitsCurrency, $o2->decimalDigitsNumber, $o2->decimalDigitsPercent, $o2->groupSizesCurrency, $o2->groupSizesNumber, $o2->groupSizesPercent, $o2->patternNegativeCurrency, $o2->patternNegativeNumber, $o2->patternNegativePercent, $o2->patternPositiveCurrency, $o2->patternPositivePercent, $o2->separatorDecimalCurrency, $o2->separatorDecimalNumber, $o2->separatorDecimalPercent, $o2->separatorGroupCurrency, $o2->separatorGroupNumber, $o2->separatorGroupPercent, $o2->signNegative, $o2->signPositive, $o2->symbolCurrency, $o2->symbolNaN, $o2->symbolNegativeInfinity, $o2->symbolPercent, $o2->symbolPermille, $o2->symbolPositiveInfinity);
		}
		$tmp14 = new thx_culture_Culture($tmp, $tmp1, $tmp2, $tmp3, $tmp4, $tmp5, $tmp6, $tmp7, $tmp8, $tmp9, $tmp10, $tmp11, $tmp12, $tmp13, $o->separatorList, $o->win3);
		return thx_culture_Culture::register($tmp14);
	}
}
function thx_text_table_DefaultStyle_2($v) {
	{
		return thx_format_NumberFormat::integer($v, thx_text_table_DefaultStyle::$defaultCulture);
	}
}
function thx_text_table_DefaultStyle_3($v) {
	{
		return thx_format_NumberFormat::format($v, "#,#.#####", thx_text_table_DefaultStyle::$defaultCulture);
	}
}
function thx_text_table_DefaultStyle_4($v) {
	{
		return $v;
	}
}
function thx_text_table_DefaultStyle_5($v) {
	{
		if($v) {
			return "âœ“";
		} else {
			return "âœ•";
		}
	}
}
function thx_text_table_DefaultStyle_6($v) {
	{
		return thx_format_DateFormat::dateShort($v, thx_text_table_DefaultStyle::$defaultCulture);
	}
}
function thx_text_table_DefaultStyle_7($v) {
	{
		return thx_format_TimeFormat::timeLong($v, thx_text_table_DefaultStyle::$defaultCulture);
	}
}
function thx_text_table_DefaultStyle_8() {
	{
		return "NA";
	}
}
function thx_text_table_DefaultStyle_9() {
	{
		return "";
	}
}
function thx_text_table_DefaultStyle_10($value, $maxWidth) {
	{
		$tmp = $value->index === 2;
		if($tmp) {
			$v = _hx_deref($value)->params[0];
			$tmp1 = null;
			if(null !== $maxWidth) {
				$tmp1 = $maxWidth > 0;
			} else {
				$tmp1 = false;
			}
			if($tmp1) {
				$v = thx_Strings::wrapColumns($v, $maxWidth, null, null);
			}
			return thx_text_table_StringBlock::fromString($v);
		}
		$s = null;
		$tmp2 = $value->index;
		switch($tmp2) {
		case 0:{
			$s = thx_text_table_DefaultStyle::defaultIntFormatter(_hx_deref($value)->params[0]);
		}break;
		case 1:{
			$s = thx_text_table_DefaultStyle::defaultFloatFormatter(_hx_deref($value)->params[0]);
		}break;
		case 2:{
			$s = thx_text_table_DefaultStyle::defaultStringFormatter(_hx_deref($value)->params[0]);
		}break;
		case 3:{
			$s = thx_text_table_DefaultStyle::defaultBoolFormatter(_hx_deref($value)->params[0]);
		}break;
		case 4:{
			$s = thx_text_table_DefaultStyle::defaultDateTimeFormatter(_hx_deref($value)->params[0]);
		}break;
		case 5:{
			$s = thx_text_table_DefaultStyle::defaultTimeFormatter(_hx_deref($value)->params[0]);
		}break;
		case 6:{
			$s = thx_text_table_DefaultStyle::defaultEmptyFormatter();
		}break;
		case 7:{
			$s = thx_text_table_DefaultStyle::defaultNAFormatter();
		}break;
		}
		$tmp3 = null;
		if(null !== $maxWidth) {
			$tmp3 = $maxWidth > 0;
		} else {
			$tmp3 = false;
		}
		if($tmp3) {
			$s = thx_Strings::ellipsisMiddle($s, null, null);
		}
		return new thx_text_table_StringBlock((new _hx_array(array($s))));
	}
}
function thx_text_table_DefaultStyle_11($value, $type) {
	{
		$tmp = $type->index;
		switch($tmp) {
		case 0:{
			switch($value->index) {
			case 0:case 1:case 2:case 4:case 5:case 6:case 7:{
				return thx_text_table_HAlign::$Left;
			}break;
			case 3:{
				return thx_text_table_HAlign::$Center;
			}break;
			}
		}break;
		case 1:{
			return thx_text_table_HAlign::$Center;
		}break;
		default:{
			$tmp1 = $value->index;
			switch($tmp1) {
			case 0:case 1:{
				return thx_text_table_HAlign::OnSymbol(thx_text_table_DefaultStyle::$defaultCulture->number->separatorDecimalNumber);
			}break;
			case 2:case 6:{
				return thx_text_table_HAlign::$Left;
			}break;
			case 3:{
				return thx_text_table_HAlign::$Center;
			}break;
			case 4:case 5:case 7:{
				return thx_text_table_HAlign::$Right;
			}break;
			}
		}break;
		}
	}
}
