<?php

// Generated by Haxe 3.3.0
class thx_text_TestTable {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public $table;
	public function setup() {
		$this->table = new thx_text_Table();
	}
	public function testPaintBorder() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$canvas = new thx_text_table_Canvas(3, 3);
			$canvas->paintBorder(thx_text_table_CellType::$Body, 0, 0, 3, 3);
			$tmp = $canvas->toString();
			utest_Assert::equals("┌─┐\x0A│ │\x0A└─┘", $tmp, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 25, "className" => "thx.text.TestTable", "methodName" => "testPaintBorder")));
			$canvas = new thx_text_table_Canvas(4, 4);
			$canvas->paintBorder(thx_text_table_CellType::$Body, 1, 0, 3, 3);
			$tmp1 = $canvas->toString();
			utest_Assert::equals(" ┌─┐\x0A │ │\x0A └─┘\x0A    ", $tmp1, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 29, "className" => "thx.text.TestTable", "methodName" => "testPaintBorder")));
			$canvas = new thx_text_table_Canvas(4, 4);
			$canvas->paintBorder(thx_text_table_CellType::$Body, 1, 1, 3, 3);
			$tmp2 = $canvas->toString();
			utest_Assert::equals("    \x0A ┌─┐\x0A │ │\x0A └─┘", $tmp2, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 33, "className" => "thx.text.TestTable", "methodName" => "testPaintBorder")));
			unset($tmp2,$tmp1,$tmp,$canvas);
		}
	}
	public function oneCell($value, $width) {
		$this->table = new thx_text_Table();
		$this->table->style->set_type(thx_text_table_CellType::$Body);
		$this->table->style->set_minWidth($width);
		$this->table->set($value, 0, 0, null);
	}
	public function testSequence() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$last = $this->table->set(thx_text_table_CellValueImpl::BoolCell(true), 0, 1, null);
			$first = $this->table->set(thx_text_table_CellValueImpl::BoolCell(false), 0, 0, null);
			utest_Assert::equals(1, $last->col->index, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 48, "className" => "thx.text.TestTable", "methodName" => "testSequence")));
			utest_Assert::equals(0, $first->col->index, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 49, "className" => "thx.text.TestTable", "methodName" => "testSequence")));
			unset($last,$first);
		}
	}
	public function testStyle() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$style = new thx_text_table_Style();
			$tmp = $style->get_formatter();
			utest_Assert::isNull($tmp, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 55, "className" => "thx.text.TestTable", "methodName" => "testStyle")));
			$dstyle = new thx_text_table_DefaultStyle();
			$tmp1 = $dstyle->get_formatter();
			utest_Assert::notNull($tmp1, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 57, "className" => "thx.text.TestTable", "methodName" => "testStyle")));
			$cstyle = new thx_text_table_CompositeStyle((new _hx_array(array($style))));
			$tmp2 = $cstyle->get_formatter();
			utest_Assert::isNull($tmp2, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 59, "className" => "thx.text.TestTable", "methodName" => "testStyle")));
			$cstyle = new thx_text_table_CompositeStyle((new _hx_array(array($style, $dstyle))));
			$tmp3 = $cstyle->get_formatter();
			utest_Assert::notNull($tmp3, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 61, "className" => "thx.text.TestTable", "methodName" => "testStyle")));
			unset($tmp3,$tmp2,$tmp1,$tmp,$style,$dstyle,$cstyle);
		}
	}
	public function testCanvas() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$canvas = new thx_text_table_Canvas(3, 2);
			$tmp = $canvas->toString();
			utest_Assert::equals("   \x0A   ", $tmp, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 67, "className" => "thx.text.TestTable", "methodName" => "testCanvas")));
			$canvas->expand(4, 3);
			$tmp1 = $canvas->toString();
			utest_Assert::equals("    \x0A    \x0A    ", $tmp1, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 69, "className" => "thx.text.TestTable", "methodName" => "testCanvas")));
			unset($tmp1,$tmp,$canvas);
		}
	}
	public function testTableSize() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = $this->table->get_rows();
			utest_Assert::equals(0, $tmp, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 74, "className" => "thx.text.TestTable", "methodName" => "testTableSize")));
			$tmp1 = $this->table->get_cols();
			utest_Assert::equals(0, $tmp1, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 75, "className" => "thx.text.TestTable", "methodName" => "testTableSize")));
			$this->table->getCol(2);
			$tmp2 = $this->table->get_cols();
			utest_Assert::equals(0, $tmp2, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 77, "className" => "thx.text.TestTable", "methodName" => "testTableSize")));
			$this->table->ensureCol(3);
			$tmp3 = $this->table->get_cols();
			utest_Assert::equals(4, $tmp3, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 79, "className" => "thx.text.TestTable", "methodName" => "testTableSize")));
			$tmp4 = $this->table->get_rows();
			utest_Assert::equals(0, $tmp4, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 80, "className" => "thx.text.TestTable", "methodName" => "testTableSize")));
			$this->table->ensureRow(1);
			$tmp5 = $this->table->get_rows();
			utest_Assert::equals(2, $tmp5, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 82, "className" => "thx.text.TestTable", "methodName" => "testTableSize")));
			unset($tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testCellResizeTable() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this->table->set(thx_text_table_CellValueImpl::IntCell(1), 3, 2, null);
			$tmp = $this->table->get_cols();
			utest_Assert::equals(3, $tmp, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 88, "className" => "thx.text.TestTable", "methodName" => "testCellResizeTable")));
			$tmp1 = $this->table->get_rows();
			utest_Assert::equals(4, $tmp1, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 89, "className" => "thx.text.TestTable", "methodName" => "testCellResizeTable")));
			unset($tmp1,$tmp);
		}
	}
	public function testIdentityOfCellsCreatedFromTable() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$cell = $this->table->set(thx_text_table_CellValueImpl::IntCell(1), 3, 2, null);
			$tmp = $this->table->get(3, 2);
			utest_Assert::isTrue($cell === $tmp, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 95, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromTable")));
			$tmp1 = $this->table->getRow(3)->get(2);
			utest_Assert::isTrue($cell === $tmp1, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 97, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromTable")));
			$tmp2 = $this->table->getCol(2)->get(3);
			utest_Assert::isTrue($cell === $tmp2, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 98, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromTable")));
			$tmp3 = $this->table->getRow(3);
			utest_Assert::isTrue($cell->row === $tmp3, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 100, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromTable")));
			$tmp4 = $this->table->getCol(2);
			utest_Assert::isTrue($cell->col === $tmp4, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 101, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromTable")));
			utest_Assert::isTrue((is_object($_t = $cell->table) && ($_t instanceof Enum) ? $_t == $this->table : _hx_equal($_t, $this->table)), null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 103, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromTable")));
			utest_Assert::isTrue((is_object($_t2 = $cell->row->table) && ($_t2 instanceof Enum) ? $_t2 == $this->table : _hx_equal($_t2, $this->table)), null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 104, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromTable")));
			utest_Assert::isTrue((is_object($_t3 = $cell->col->table) && ($_t3 instanceof Enum) ? $_t3 == $this->table : _hx_equal($_t3, $this->table)), null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 105, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromTable")));
			unset($tmp4,$tmp3,$tmp2,$tmp1,$tmp,$cell,$_t3,$_t2,$_t);
		}
	}
	public function testIdentityOfCellsCreatedFromRow() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$row = $this->table->ensureRow(3);
			$cell = $row->set(thx_text_table_CellValueImpl::IntCell(1), 2, null);
			$tmp = $this->table->get(3, 2);
			utest_Assert::isTrue($cell === $tmp, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 112, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromRow")));
			$tmp1 = $this->table->getRow(3)->get(2);
			utest_Assert::isTrue($cell === $tmp1, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 114, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromRow")));
			$tmp2 = $this->table->getCol(2)->get(3);
			utest_Assert::isTrue($cell === $tmp2, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 115, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromRow")));
			$tmp3 = $this->table->getRow(3);
			utest_Assert::isTrue($cell->row === $tmp3, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 117, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromRow")));
			$tmp4 = $this->table->getCol(2);
			utest_Assert::isTrue($cell->col === $tmp4, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 118, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromRow")));
			utest_Assert::isTrue((is_object($_t = $cell->table) && ($_t instanceof Enum) ? $_t == $this->table : _hx_equal($_t, $this->table)), null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 120, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromRow")));
			utest_Assert::isTrue((is_object($_t2 = $cell->row->table) && ($_t2 instanceof Enum) ? $_t2 == $this->table : _hx_equal($_t2, $this->table)), null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 121, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromRow")));
			utest_Assert::isTrue((is_object($_t3 = $cell->col->table) && ($_t3 instanceof Enum) ? $_t3 == $this->table : _hx_equal($_t3, $this->table)), null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 122, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromRow")));
			unset($tmp4,$tmp3,$tmp2,$tmp1,$tmp,$row,$cell,$_t3,$_t2,$_t);
		}
	}
	public function testIdentityOfCellsCreatedFromCol() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$col = $this->table->ensureCol(2);
			$cell = $col->set(thx_text_table_CellValueImpl::IntCell(1), 3, null);
			$tmp = $this->table->get(3, 2);
			utest_Assert::isTrue($cell === $tmp, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 129, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromCol")));
			$tmp1 = $this->table->getRow(3)->get(2);
			utest_Assert::isTrue($cell === $tmp1, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 131, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromCol")));
			$tmp2 = $this->table->getCol(2)->get(3);
			utest_Assert::isTrue($cell === $tmp2, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 132, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromCol")));
			$tmp3 = $this->table->getRow(3);
			utest_Assert::isTrue($cell->row === $tmp3, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 134, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromCol")));
			$tmp4 = $this->table->getCol(2);
			utest_Assert::isTrue($cell->col === $tmp4, null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 135, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromCol")));
			utest_Assert::isTrue((is_object($_t = $cell->table) && ($_t instanceof Enum) ? $_t == $this->table : _hx_equal($_t, $this->table)), null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 137, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromCol")));
			utest_Assert::isTrue((is_object($_t2 = $cell->row->table) && ($_t2 instanceof Enum) ? $_t2 == $this->table : _hx_equal($_t2, $this->table)), null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 138, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromCol")));
			utest_Assert::isTrue((is_object($_t3 = $cell->col->table) && ($_t3 instanceof Enum) ? $_t3 == $this->table : _hx_equal($_t3, $this->table)), null, _hx_anonymous(array("fileName" => "TestTable.hx", "lineNumber" => 139, "className" => "thx.text.TestTable", "methodName" => "testIdentityOfCellsCreatedFromCol")));
			unset($tmp4,$tmp3,$tmp2,$tmp1,$tmp,$col,$cell,$_t3,$_t2,$_t);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.text.TestTable'; }
}
