<?php

// Generated by Haxe 3.3.0
class thx_culture_Culture {
	public function __construct($code, $dateTime, $ietf, $isNeutral, $iso2, $iso3, $isRightToLeft, $lcid, $nameCalendar, $nameEnglish, $nameNative, $nameRegionEnglish, $nameRegionNative, $number, $separatorList, $win3) {
		if(!php_Boot::$skip_constructor) {
		$this->code = $code;
		$this->dateTime = $dateTime;
		$this->ietf = $ietf;
		$this->isNeutral = $isNeutral;
		$this->iso2 = $iso2;
		$this->iso3 = $iso3;
		$this->isRightToLeft = $isRightToLeft;
		$this->lcid = $lcid;
		$this->nameCalendar = $nameCalendar;
		$this->nameEnglish = $nameEnglish;
		$this->nameNative = $nameNative;
		$this->nameRegionEnglish = $nameRegionEnglish;
		$this->nameRegionNative = $nameRegionNative;
		$this->number = $number;
		$this->separatorList = $separatorList;
		$this->win3 = $win3;
	}}
	public $code;
	public $dateTime;
	public $ietf;
	public $isNeutral;
	public $iso2;
	public $iso3;
	public $isRightToLeft;
	public $lcid;
	public $nameCalendar;
	public $nameDisplayEnglish;
	public $nameDisplayNative;
	public $nameEnglish;
	public $nameNative;
	public $nameRegionEnglish;
	public $nameRegionNative;
	public $number;
	public $separatorList;
	public $win3;
	public function toObject() {
		$tmp = null;
		if(null === $this->dateTime) {
			$tmp = null;
		} else {
			$tmp = $this->dateTime->toObject();
		}
		$tmp1 = null;
		if(null === $this->number) {
			$tmp1 = null;
		} else {
			$tmp1 = $this->number->toObject();
		}
		return _hx_anonymous(array("code" => $this->code, "dateTime" => $tmp, "ietf" => $this->ietf, "isNeutral" => $this->isNeutral, "iso2" => $this->iso2, "iso3" => $this->iso3, "isRightToLeft" => $this->isRightToLeft, "lcid" => $this->lcid, "nameCalendar" => $this->nameCalendar, "nameEnglish" => $this->nameEnglish, "nameNative" => $this->nameNative, "nameRegionEnglish" => $this->nameRegionEnglish, "nameRegionNative" => $this->nameRegionNative, "number" => $tmp1, "separatorList" => $this->separatorList, "win3" => $this->win3));
	}
	public function get_nameDisplayEnglish() {
		$tmp = null;
		if(null === $this->nameRegionEnglish) {
			$tmp = "";
		} else {
			$tmp = " (" . _hx_string_or_null($this->nameRegionEnglish) . ")";
		}
		return _hx_string_or_null($this->nameEnglish) . _hx_string_or_null($tmp);
	}
	public function get_nameDisplayNative() {
		$tmp = null;
		if(null === $this->nameRegionNative) {
			$tmp = "";
		} else {
			$tmp = " (" . _hx_string_or_null($this->nameRegionNative) . ")";
		}
		return _hx_string_or_null($this->nameNative) . _hx_string_or_null($tmp);
	}
	public function toString() {
		$tmp = null;
		if(null === $this->nameRegionEnglish) {
			$tmp = "";
		} else {
			$tmp = " (" . _hx_string_or_null($this->nameRegionEnglish) . ")";
		}
		return _hx_string_or_null($this->nameEnglish) . _hx_string_or_null($tmp);
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $invariant;
	static function fromObject($o) {
		$tmp = $o->code;
		$tmp1 = null;
		if(null === _hx_field($o, "dateTime")) {
			$tmp1 = null;
		} else {
			$o1 = $o->dateTime;
			$tmp1 = new thx_culture_DateFormatInfo($o1->calendarWeekRuleIndex, $o1->calendarWeekRuleName, $o1->designatorAm, $o1->designatorPm, $o1->firstDayOfWeekIndex, $o1->firstDayOfWeekName, $o1->nameCalendar, $o1->nameCalendarNative, $o1->nameDays, $o1->nameDaysAbbreviated, $o1->nameDaysShortest, $o1->nameMonths, $o1->nameMonthsAbbreviated, $o1->nameMonthGenitives, $o1->nameMonthGenitivesAbbreviated, $o1->patternDateLong, $o1->patternDateShort, $o1->patternDateTimeFull, $o1->patternDateTimeSortable, $o1->patternMonthDay, $o1->patternRfc1123, $o1->patternTimeLong, $o1->patternTimeShort, $o1->patternUniversalSortable, $o1->patternYearMonth, $o1->separatorDate, $o1->separatorTime);
		}
		$tmp2 = $o->ietf;
		$tmp3 = $o->isNeutral;
		$tmp4 = $o->iso2;
		$tmp5 = $o->iso3;
		$tmp6 = $o->isRightToLeft;
		$tmp7 = $o->lcid;
		$tmp8 = $o->nameCalendar;
		$tmp9 = $o->nameEnglish;
		$tmp10 = $o->nameNative;
		$tmp11 = $o->nameRegionEnglish;
		$tmp12 = $o->nameRegionNative;
		$tmp13 = null;
		if(null === _hx_field($o, "number")) {
			$tmp13 = null;
		} else {
			$o2 = $o->number;
			$tmp13 = new thx_culture_NumberFormatInfo($o2->decimalDigitsCurrency, $o2->decimalDigitsNumber, $o2->decimalDigitsPercent, $o2->groupSizesCurrency, $o2->groupSizesNumber, $o2->groupSizesPercent, $o2->patternNegativeCurrency, $o2->patternNegativeNumber, $o2->patternNegativePercent, $o2->patternPositiveCurrency, $o2->patternPositivePercent, $o2->separatorDecimalCurrency, $o2->separatorDecimalNumber, $o2->separatorDecimalPercent, $o2->separatorGroupCurrency, $o2->separatorGroupNumber, $o2->separatorGroupPercent, $o2->signNegative, $o2->signPositive, $o2->symbolCurrency, $o2->symbolNaN, $o2->symbolNegativeInfinity, $o2->symbolPercent, $o2->symbolPermille, $o2->symbolPositiveInfinity);
		}
		return new thx_culture_Culture($tmp, $tmp1, $tmp2, $tmp3, $tmp4, $tmp5, $tmp6, $tmp7, $tmp8, $tmp9, $tmp10, $tmp11, $tmp12, $tmp13, $o->separatorList, $o->win3);
	}
	static $cultures;
	static $hlist;
	static function register($culture) {
		$tmp = strtolower($culture->code);
		$code = "C:" . _hx_string_or_null($tmp);
		$tmp1 = thx_culture_Culture::$cultures->exists($code);
		if($tmp1) {
			return thx_culture_Culture::$cultures->get($code);
		}
		thx_culture_Culture::$hlist->push($culture);
		thx_culture_Culture::$cultures->set($code, $culture);
		{
			$tmp2 = strtolower($culture->iso2);
			thx_culture_Culture::$cultures->set("I2:" . _hx_string_or_null($tmp2), $culture);
		}
		{
			$tmp3 = strtolower($culture->iso3);
			thx_culture_Culture::$cultures->set("I3:" . _hx_string_or_null($tmp3), $culture);
		}
		return $culture;
	}
	static function getByCode($code) {
		$tmp = strtolower($code);
		return thx_culture_Culture::$cultures->get("C:" . _hx_string_or_null($tmp));
	}
	static function getByIso2($iso2) {
		$tmp = strtolower($iso2);
		return thx_culture_Culture::$cultures->get("I2:" . _hx_string_or_null($tmp));
	}
	static function getByIso3($iso3) {
		$tmp = strtolower($iso3);
		return thx_culture_Culture::$cultures->get("I3:" . _hx_string_or_null($tmp));
	}
	static function iterator() {
		return thx_culture_Culture::$hlist->iterator();
	}
	static function getCodeKey($key) {
		$tmp = strtolower($key);
		return "C:" . _hx_string_or_null($tmp);
	}
	static function getIso2Key($key) {
		$tmp = strtolower($key);
		return "I2:" . _hx_string_or_null($tmp);
	}
	static function getIso3Key($key) {
		$tmp = strtolower($key);
		return "I3:" . _hx_string_or_null($tmp);
	}
	static $__properties__ = array("get_nameDisplayNative" => "get_nameDisplayNative","get_nameDisplayEnglish" => "get_nameDisplayEnglish");
	function __toString() { return $this->toString(); }
}
{
	thx_culture_Culture::$cultures = new haxe_ds_StringMap();
	thx_culture_Culture::$hlist = (new _hx_array(array()));
}
thx_culture_Culture::$invariant = new thx_culture_Culture("", thx_culture_DateFormatInfo::$invariant, "", false, "iv", "IVL", false, 127, "Gregorian", "Invariant Language", "Invariant Language", "Invariant Country", "Invariant Country", thx_culture_NumberFormatInfo::$invariant, ",", "IVL");
