<?php

// Generated by Haxe 3.3.0
class thx__Time_Time_Impl_ {
	public function __construct(){}
	static $zero;
	static $oneDay;
	static function fromDays($days) {
		return thx__Time_Time_Impl_::create(24 * $days, 0, 0, 0);
	}
	static function fromHours($hours) {
		return thx__Time_Time_Impl_::create($hours, 0, 0, 0);
	}
	static function fromMinutes($minutes) {
		return thx__Time_Time_Impl_::create(0, $minutes, 0, 0);
	}
	static function fromSeconds($seconds) {
		return thx__Time_Time_Impl_::create(0, 0, $seconds, 0);
	}
	static function fromMilliseconds($milliseconds) {
		return thx__Time_Time_Impl_::create(0, 0, 0, $milliseconds);
	}
	static function timeToTicks($hours, $minutes, $seconds) {
		$x = $hours * 3600;
		$x1 = new haxe__Int64____Int64($x >> 31, $x);
		$a = $x1;
		$x2 = $minutes * 60;
		$x3 = new haxe__Int64____Int64($x2 >> 31, $x2);
		$b = $x3;
		$high = $a->high + $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $a->low + $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $a->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x4 = new haxe__Int64____Int64($high, $low);
		$a1 = $x4;
		$x5 = new haxe__Int64____Int64($seconds >> 31, $seconds);
		$b1 = $x5;
		$high1 = $a1->high + $b1->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low1 = $a1->low + $b1->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low1, $a1->low) < 0) {
			++$high1;
			$tmp1 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x6 = new haxe__Int64____Int64($high1, $low1);
		$totalSeconds = $x6;
		$b2 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerSecondI64;
		$al = $totalSeconds->low & 65535;
		$ah = _hx_shift_right($totalSeconds->low, 16);
		$bl = $b2->low & 65535;
		$bh = _hx_shift_right($b2->low, 16);
		$p00 = haxe__Int32_Int32_Impl_::mul($al, $bl);
		$p10 = haxe__Int32_Int32_Impl_::mul($ah, $bl);
		$p01 = haxe__Int32_Int32_Impl_::mul($al, $bh);
		$p11 = haxe__Int32_Int32_Impl_::mul($ah, $bh);
		$low2 = $p00;
		$high2 = ($p11 + (_hx_shift_right($p01, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p10, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp2 = $p01 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p01 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
		$low2 = $p00 + $p01 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low2, $p01) < 0) {
			++$high2;
			$tmp3 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
			$high2 = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp4 = $p10 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p10 = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp5 = $low2 + $p10 << haxe__Int32_Int32_Impl_::$extraBits;
		$low2 = $tmp5 >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low2, $p10) < 0) {
			++$high2;
			$tmp6 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
			$high2 = $tmp6 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp7 = $high2 + (haxe__Int32_Int32_Impl_::mul($totalSeconds->low, $b2->high) + haxe__Int32_Int32_Impl_::mul($totalSeconds->high, $b2->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
		$high2 = $tmp7 >> haxe__Int32_Int32_Impl_::$extraBits;
		$x7 = new haxe__Int64____Int64($high2, $low2);
		return $x7;
	}
	static function fromString($s) {
		$pattern = new EReg("^([-+])?(?:(\\d+)[.](\\d{1,2})|(\\d+))[:](\\d{2})(?:[:](\\d{2})(?:\\.(\\d+))?)?\$", "");
		$tmp = !$pattern->match($s);
		if($tmp) {
			throw new HException(new thx_Error("unable to parse Time string: \"" . _hx_string_or_null($s) . "\"", null, _hx_anonymous(array("fileName" => "Time.hx", "lineNumber" => 32, "className" => "thx._Time.Time_Impl_", "methodName" => "fromString"))));
		}
		$smticks = $pattern->matched(7);
		$mticks = 0;
		if(null !== $smticks) {
			$tmp1 = _hx_substring(thx_Strings::rpad($smticks, "0", 7), 0, 7);
			$smticks = "1" . _hx_string_or_null($tmp1);
			$tmp2 = Std::parseInt($smticks);
			$mticks = $tmp2 - 10000000;
		}
		$days = 0;
		$hours = 0;
		$tmp3 = $pattern->matched(5);
		$minutes = Std::parseInt($tmp3);
		$tmp4 = $pattern->matched(6);
		$seconds = Std::parseInt($tmp4);
		$tmp5 = $pattern->matched(2);
		if(null !== $tmp5) {
			$tmp6 = $pattern->matched(2);
			$days = Std::parseInt($tmp6);
			$tmp7 = $pattern->matched(3);
			$hours = Std::parseInt($tmp7);
		} else {
			$tmp8 = $pattern->matched(4);
			$hours = Std::parseInt($tmp8);
		}
		$this1 = thx__Time_Time_Impl_::create($days * 24 + $hours, $minutes, $seconds, null);
		$x = new haxe__Int64____Int64($mticks >> 31, $mticks);
		$that = $x;
		$high = $this1->high + $that->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this1->low + $that->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this1->low) < 0) {
			++$high;
			$tmp9 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp9 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x1 = new haxe__Int64____Int64($high, $low);
		$time = $x1;
		$tmp10 = $pattern->matched(1);
		if($tmp10 === "-") {
			$x2 = $time;
			$high1 = ~$x2->high;
			$low1 = -$x2->low;
			if($low1 === 0) {
				++$high1;
				$tmp11 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
				$high1 = $tmp11 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x3 = new haxe__Int64____Int64($high1, $low1);
			return $x3;
		} else {
			return $time;
		}
	}
	static function compare($a, $b) {
		return thx_Int64s::compare($a, $b);
	}
	static function create($hours, $minutes = null, $seconds = null, $milliseconds = null) {
		if($milliseconds === null) {
			$milliseconds = 0;
		}
		if($seconds === null) {
			$seconds = 0;
		}
		if($minutes === null) {
			$minutes = 0;
		}
		$a = thx__Time_Time_Impl_::timeToTicks($hours, $minutes, $seconds);
		$x = new haxe__Int64____Int64($milliseconds >> 31, $milliseconds);
		$a1 = $x;
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMillisecondI64;
		$al = $a1->low & 65535;
		$ah = _hx_shift_right($a1->low, 16);
		$bl = $b->low & 65535;
		$bh = _hx_shift_right($b->low, 16);
		$p00 = haxe__Int32_Int32_Impl_::mul($al, $bl);
		$p10 = haxe__Int32_Int32_Impl_::mul($ah, $bl);
		$p01 = haxe__Int32_Int32_Impl_::mul($al, $bh);
		$p11 = haxe__Int32_Int32_Impl_::mul($ah, $bh);
		$low = $p00;
		$high = ($p11 + (_hx_shift_right($p01, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p10, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $p01 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p01 = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $p00 + $p01 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $p01) < 0) {
			++$high;
			$tmp1 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp2 = $p10 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p10 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp3 = $low + $p10 << haxe__Int32_Int32_Impl_::$extraBits;
		$low = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $p10) < 0) {
			++$high;
			$tmp4 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp5 = $high + (haxe__Int32_Int32_Impl_::mul($a1->low, $b->high) + haxe__Int32_Int32_Impl_::mul($a1->high, $b->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
		$high = $tmp5 >> haxe__Int32_Int32_Impl_::$extraBits;
		$x1 = new haxe__Int64____Int64($high, $low);
		$b1 = $x1;
		$high1 = $a->high + $b1->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low1 = $a->low + $b1->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low1, $a->low) < 0) {
			++$high1;
			$tmp6 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp6 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x2 = new haxe__Int64____Int64($high1, $low1);
		return $x2;
	}
	static function createDays($days, $hours = null, $minutes = null, $seconds = null, $milliseconds = null) {
		if($milliseconds === null) {
			$milliseconds = 0;
		}
		if($seconds === null) {
			$seconds = 0;
		}
		if($minutes === null) {
			$minutes = 0;
		}
		if($hours === null) {
			$hours = 0;
		}
		return thx__Time_Time_Impl_::create($days * 24 + $hours, $minutes, $seconds, $milliseconds);
	}
	static function _new($ticks) {
		return $ticks;
	}
	static function abs($this1) {
		$x = new haxe__Int64____Int64(0, 0);
		$b = $x;
		$v = $this1->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $v !== 0;
		if($tmp) {
			$v = $v;
		} else {
			$v = haxe__Int32_Int32_Impl_::ucompare($this1->low, $b->low);
		}
		$tmp1 = null;
		if($this1->high < 0) {
			if($b->high < 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = -1;
			}
		} else {
			if($b->high >= 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = 1;
			}
		}
		if($tmp1 < 0) {
			$high = ~$this1->high;
			$low = -$this1->low;
			if($low === 0) {
				++$high;
				$tmp2 = $high << haxe__Int32_Int32_Impl_::$extraBits;
				$high = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x1 = new haxe__Int64____Int64($high, $low);
			return $x1;
		} else {
			return $this1;
		}
	}
	static function withHours($this1, $hours) {
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMinuteI64;
		$a = haxe__Int64_Int64_Impl_::divMod($this1, $b)->quotient;
		$x = new haxe__Int64____Int64(0, 60);
		$x1 = haxe__Int64_Int64_Impl_::divMod($a, $x)->modulus;
		if($x1->high !== $x1->low >> 31) {
			throw new HException("Overflow");
		}
		$tmp = $x1->low;
		$b1 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerSecondI64;
		$a1 = haxe__Int64_Int64_Impl_::divMod($this1, $b1)->quotient;
		$x2 = new haxe__Int64____Int64(0, 60);
		$x3 = haxe__Int64_Int64_Impl_::divMod($a1, $x2)->modulus;
		if($x3->high !== $x3->low >> 31) {
			throw new HException("Overflow");
		}
		$tmp1 = $x3->low;
		$b2 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMillisecondI64;
		$a2 = haxe__Int64_Int64_Impl_::divMod($this1, $b2)->quotient;
		$b3 = thx__DateTimeUtc_DateTimeUtc_Impl_::$thousandI64;
		$x4 = haxe__Int64_Int64_Impl_::divMod($a2, $b3)->modulus;
		if($x4->high !== $x4->low >> 31) {
			throw new HException("Overflow");
		}
		return thx__Time_Time_Impl_::create($hours, $tmp, $tmp1, $x4->low);
	}
	static function withMinutes($this1, $minutes) {
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerHourI64;
		$a = haxe__Int64_Int64_Impl_::divMod($this1, $b)->quotient;
		$x = new haxe__Int64____Int64(0, 24);
		$x1 = haxe__Int64_Int64_Impl_::divMod($a, $x)->modulus;
		if($x1->high !== $x1->low >> 31) {
			throw new HException("Overflow");
		}
		$tmp = $x1->low;
		$b1 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerSecondI64;
		$a1 = haxe__Int64_Int64_Impl_::divMod($this1, $b1)->quotient;
		$x2 = new haxe__Int64____Int64(0, 60);
		$x3 = haxe__Int64_Int64_Impl_::divMod($a1, $x2)->modulus;
		if($x3->high !== $x3->low >> 31) {
			throw new HException("Overflow");
		}
		$tmp1 = $x3->low;
		$b2 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMillisecondI64;
		$a2 = haxe__Int64_Int64_Impl_::divMod($this1, $b2)->quotient;
		$b3 = thx__DateTimeUtc_DateTimeUtc_Impl_::$thousandI64;
		$x4 = haxe__Int64_Int64_Impl_::divMod($a2, $b3)->modulus;
		if($x4->high !== $x4->low >> 31) {
			throw new HException("Overflow");
		}
		return thx__Time_Time_Impl_::create($tmp, $minutes, $tmp1, $x4->low);
	}
	static function withSeconds($this1, $seconds) {
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerHourI64;
		$a = haxe__Int64_Int64_Impl_::divMod($this1, $b)->quotient;
		$x = new haxe__Int64____Int64(0, 24);
		$x1 = haxe__Int64_Int64_Impl_::divMod($a, $x)->modulus;
		if($x1->high !== $x1->low >> 31) {
			throw new HException("Overflow");
		}
		$tmp = $x1->low;
		$b1 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMinuteI64;
		$a1 = haxe__Int64_Int64_Impl_::divMod($this1, $b1)->quotient;
		$x2 = new haxe__Int64____Int64(0, 60);
		$x3 = haxe__Int64_Int64_Impl_::divMod($a1, $x2)->modulus;
		if($x3->high !== $x3->low >> 31) {
			throw new HException("Overflow");
		}
		$tmp1 = $x3->low;
		$b2 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMillisecondI64;
		$a2 = haxe__Int64_Int64_Impl_::divMod($this1, $b2)->quotient;
		$b3 = thx__DateTimeUtc_DateTimeUtc_Impl_::$thousandI64;
		$x4 = haxe__Int64_Int64_Impl_::divMod($a2, $b3)->modulus;
		if($x4->high !== $x4->low >> 31) {
			throw new HException("Overflow");
		}
		return thx__Time_Time_Impl_::create($tmp, $tmp1, $seconds, $x4->low);
	}
	static function withMilliseconds($this1, $milliseconds) {
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerHourI64;
		$a = haxe__Int64_Int64_Impl_::divMod($this1, $b)->quotient;
		$x = new haxe__Int64____Int64(0, 24);
		$x1 = haxe__Int64_Int64_Impl_::divMod($a, $x)->modulus;
		if($x1->high !== $x1->low >> 31) {
			throw new HException("Overflow");
		}
		$tmp = $x1->low;
		$b1 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMinuteI64;
		$a1 = haxe__Int64_Int64_Impl_::divMod($this1, $b1)->quotient;
		$x2 = new haxe__Int64____Int64(0, 60);
		$x3 = haxe__Int64_Int64_Impl_::divMod($a1, $x2)->modulus;
		if($x3->high !== $x3->low >> 31) {
			throw new HException("Overflow");
		}
		$tmp1 = $x3->low;
		$b2 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerSecondI64;
		$a2 = haxe__Int64_Int64_Impl_::divMod($this1, $b2)->quotient;
		$x4 = new haxe__Int64____Int64(0, 60);
		$x5 = haxe__Int64_Int64_Impl_::divMod($a2, $x4)->modulus;
		if($x5->high !== $x5->low >> 31) {
			throw new HException("Overflow");
		}
		return thx__Time_Time_Impl_::create($tmp, $tmp1, $x5->low, $milliseconds);
	}
	static function negate($this1) {
		$high = ~$this1->high;
		$low = -$this1->low;
		if($low === 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		return $x;
	}
	static function add($this1, $that) {
		$b = $that;
		$high = $this1->high + $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this1->low + $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this1->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		return $x;
	}
	static function addTicks($this1, $that) {
		$high = $this1->high + $that->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this1->low + $that->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this1->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		return $x;
	}
	static function subtract($this1, $that) {
		$b = $that;
		$high = $this1->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this1->low - $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($this1->low, $b->low) < 0) {
			--$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		return $x;
	}
	static function compareTo($this1, $that) {
		return thx_Int64s::compare($this1, $that);
	}
	static function equalsTo($this1, $that) {
		$b = $that;
		if($this1->high === $b->high) {
			return $this1->low === $b->low;
		} else {
			return false;
		}
	}
	static function equals($self, $that) {
		$a = $self;
		$b = $that;
		if($a->high === $b->high) {
			return $a->low === $b->low;
		} else {
			return false;
		}
	}
	static function notEqualsTo($self, $that) {
		$a = $self;
		$b = $that;
		if(!($a->high !== $b->high)) {
			return $a->low !== $b->low;
		} else {
			return true;
		}
	}
	static function notEquals($this1, $that) {
		$b = $that;
		if(!($this1->high !== $b->high)) {
			return $this1->low !== $b->low;
		} else {
			return true;
		}
	}
	static function greaterThan($self, $that) {
		$a = $self;
		$b = $that;
		$v = $a->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $v !== 0;
		if($tmp) {
			$v = $v;
		} else {
			$v = haxe__Int32_Int32_Impl_::ucompare($a->low, $b->low);
		}
		$tmp1 = null;
		if($a->high < 0) {
			if($b->high < 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = -1;
			}
		} else {
			if($b->high >= 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = 1;
			}
		}
		return $tmp1 > 0;
	}
	static function greater($this1, $that) {
		$b = $that;
		$v = $this1->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $v !== 0;
		if($tmp) {
			$v = $v;
		} else {
			$v = haxe__Int32_Int32_Impl_::ucompare($this1->low, $b->low);
		}
		$tmp1 = null;
		if($this1->high < 0) {
			if($b->high < 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = -1;
			}
		} else {
			if($b->high >= 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = 1;
			}
		}
		return $tmp1 > 0;
	}
	static function greaterEqualsTo($self, $that) {
		$a = $self;
		$b = $that;
		$v = $a->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $v !== 0;
		if($tmp) {
			$v = $v;
		} else {
			$v = haxe__Int32_Int32_Impl_::ucompare($a->low, $b->low);
		}
		$tmp1 = null;
		if($a->high < 0) {
			if($b->high < 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = -1;
			}
		} else {
			if($b->high >= 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = 1;
			}
		}
		return $tmp1 >= 0;
	}
	static function greaterEquals($this1, $that) {
		$b = $that;
		$v = $this1->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $v !== 0;
		if($tmp) {
			$v = $v;
		} else {
			$v = haxe__Int32_Int32_Impl_::ucompare($this1->low, $b->low);
		}
		$tmp1 = null;
		if($this1->high < 0) {
			if($b->high < 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = -1;
			}
		} else {
			if($b->high >= 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = 1;
			}
		}
		return $tmp1 >= 0;
	}
	static function lessThan($self, $that) {
		$a = $self;
		$b = $that;
		$v = $a->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $v !== 0;
		if($tmp) {
			$v = $v;
		} else {
			$v = haxe__Int32_Int32_Impl_::ucompare($a->low, $b->low);
		}
		$tmp1 = null;
		if($a->high < 0) {
			if($b->high < 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = -1;
			}
		} else {
			if($b->high >= 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = 1;
			}
		}
		return $tmp1 < 0;
	}
	static function less($this1, $that) {
		$b = $that;
		$v = $this1->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $v !== 0;
		if($tmp) {
			$v = $v;
		} else {
			$v = haxe__Int32_Int32_Impl_::ucompare($this1->low, $b->low);
		}
		$tmp1 = null;
		if($this1->high < 0) {
			if($b->high < 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = -1;
			}
		} else {
			if($b->high >= 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = 1;
			}
		}
		return $tmp1 < 0;
	}
	static function lessEqualsTo($self, $that) {
		$a = $self;
		$b = $that;
		$v = $a->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $v !== 0;
		if($tmp) {
			$v = $v;
		} else {
			$v = haxe__Int32_Int32_Impl_::ucompare($a->low, $b->low);
		}
		$tmp1 = null;
		if($a->high < 0) {
			if($b->high < 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = -1;
			}
		} else {
			if($b->high >= 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = 1;
			}
		}
		return $tmp1 <= 0;
	}
	static function lessEquals($this1, $that) {
		$b = $that;
		$v = $this1->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $v !== 0;
		if($tmp) {
			$v = $v;
		} else {
			$v = haxe__Int32_Int32_Impl_::ucompare($this1->low, $b->low);
		}
		$tmp1 = null;
		if($this1->high < 0) {
			if($b->high < 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = -1;
			}
		} else {
			if($b->high >= 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = 1;
			}
		}
		return $tmp1 <= 0;
	}
	static function toDateTimeUtc($this1) {
		return $this1;
	}
	static function toString($this1) {
		$timeAbs = thx__Time_Time_Impl_::abs($this1);
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerSecondI64;
		$x = haxe__Int64_Int64_Impl_::divMod($timeAbs, $b)->modulus;
		if($x->high !== $x->low >> 31) {
			throw new HException("Overflow");
		}
		$ticksInSecondAbs = $x->low;
		$decimals = null;
		if($ticksInSecondAbs !== 0) {
			$tmp = thx_Ints::lpad($ticksInSecondAbs, "0", 7);
			$tmp1 = thx_Strings::trimCharsRight($tmp, "0");
			$decimals = "." . _hx_string_or_null($tmp1);
		} else {
			$decimals = "";
		}
		$tmp2 = null;
		$x1 = new haxe__Int64____Int64(0, 0);
		$b1 = $x1;
		$v = $this1->high - $b1->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp3 = $v !== 0;
		if($tmp3) {
			$v = $v;
		} else {
			$v = haxe__Int32_Int32_Impl_::ucompare($this1->low, $b1->low);
		}
		$tmp4 = null;
		if($this1->high < 0) {
			if($b1->high < 0) {
				$tmp4 = $v;
			} else {
				$tmp4 = -1;
			}
		} else {
			if($b1->high >= 0) {
				$tmp4 = $v;
			} else {
				$tmp4 = 1;
			}
		}
		if($tmp4 < 0) {
			$tmp2 = "-";
		} else {
			$tmp2 = "";
		}
		$b2 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerHourI64;
		$tmp5 = haxe__Int64_Int64_Impl_::divMod($timeAbs, $b2)->quotient;
		$tmp6 = haxe__Int64_Int64_Impl_::toString($tmp5);
		$tmp7 = "" . _hx_string_or_null($tmp6) . ":";
		$b3 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMinuteI64;
		$a = haxe__Int64_Int64_Impl_::divMod($timeAbs, $b3)->quotient;
		$x2 = new haxe__Int64____Int64(0, 60);
		$x3 = haxe__Int64_Int64_Impl_::divMod($a, $x2)->modulus;
		if($x3->high !== $x3->low >> 31) {
			throw new HException("Overflow");
		}
		$tmp8 = $x3->low;
		$tmp9 = thx_Ints::lpad($tmp8, "0", 2);
		$tmp10 = _hx_string_or_null($tmp7) . _hx_string_or_null($tmp9) . ":";
		$b4 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerSecondI64;
		$a1 = haxe__Int64_Int64_Impl_::divMod($timeAbs, $b4)->quotient;
		$x4 = new haxe__Int64____Int64(0, 60);
		$x5 = haxe__Int64_Int64_Impl_::divMod($a1, $x4)->modulus;
		if($x5->high !== $x5->low >> 31) {
			throw new HException("Overflow");
		}
		$tmp11 = $x5->low;
		$tmp12 = thx_Ints::lpad($tmp11, "0", 2);
		return _hx_string_or_null($tmp2) . _hx_string_or_null((_hx_string_or_null($tmp10) . _hx_string_or_null($tmp12))) . _hx_string_or_null($decimals);
	}
	static function toGmtString($this1) {
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerHourI64;
		$x = haxe__Int64_Int64_Impl_::divMod($this1, $b)->quotient;
		if($x->high !== $x->low >> 31) {
			throw new HException("Overflow");
		}
		$tmp = $x->low;
		$h = thx_Ints::lpad($tmp, "0", 2);
		$x1 = new haxe__Int64____Int64(0, 0);
		$b1 = $x1;
		$v = $this1->high - $b1->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp1 = $v !== 0;
		if($tmp1) {
			$v = $v;
		} else {
			$v = haxe__Int32_Int32_Impl_::ucompare($this1->low, $b1->low);
		}
		$tmp2 = null;
		if($this1->high < 0) {
			if($b1->high < 0) {
				$tmp2 = $v;
			} else {
				$tmp2 = -1;
			}
		} else {
			if($b1->high >= 0) {
				$tmp2 = $v;
			} else {
				$tmp2 = 1;
			}
		}
		if($tmp2 >= 0) {
			$h = "+" . _hx_string_or_null($h);
		}
		$tmp3 = "" . _hx_string_or_null($h) . ":";
		$b2 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMinuteI64;
		$a = haxe__Int64_Int64_Impl_::divMod($this1, $b2)->quotient;
		$x2 = new haxe__Int64____Int64(0, 60);
		$x3 = haxe__Int64_Int64_Impl_::divMod($a, $x2)->modulus;
		if($x3->high !== $x3->low >> 31) {
			throw new HException("Overflow");
		}
		$tmp4 = $x3->low;
		$tmp5 = thx_Ints::lpad($tmp4, "0", 2);
		return _hx_string_or_null($tmp3) . _hx_string_or_null($tmp5);
	}
	static function get_ticks($this1) {
		return $this1;
	}
	static function get_days($this1) {
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerDayI64;
		$x = haxe__Int64_Int64_Impl_::divMod($this1, $b)->quotient;
		if($x->high !== $x->low >> 31) {
			throw new HException("Overflow");
		}
		return $x->low;
	}
	static function get_hours($this1) {
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerHourI64;
		$a = haxe__Int64_Int64_Impl_::divMod($this1, $b)->quotient;
		$x = new haxe__Int64____Int64(0, 24);
		$x1 = haxe__Int64_Int64_Impl_::divMod($a, $x)->modulus;
		if($x1->high !== $x1->low >> 31) {
			throw new HException("Overflow");
		}
		return $x1->low;
	}
	static function get_minutes($this1) {
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMinuteI64;
		$a = haxe__Int64_Int64_Impl_::divMod($this1, $b)->quotient;
		$x = new haxe__Int64____Int64(0, 60);
		$x1 = haxe__Int64_Int64_Impl_::divMod($a, $x)->modulus;
		if($x1->high !== $x1->low >> 31) {
			throw new HException("Overflow");
		}
		return $x1->low;
	}
	static function get_seconds($this1) {
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerSecondI64;
		$a = haxe__Int64_Int64_Impl_::divMod($this1, $b)->quotient;
		$x = new haxe__Int64____Int64(0, 60);
		$x1 = haxe__Int64_Int64_Impl_::divMod($a, $x)->modulus;
		if($x1->high !== $x1->low >> 31) {
			throw new HException("Overflow");
		}
		return $x1->low;
	}
	static function get_milliseconds($this1) {
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMillisecondI64;
		$a = haxe__Int64_Int64_Impl_::divMod($this1, $b)->quotient;
		$b1 = thx__DateTimeUtc_DateTimeUtc_Impl_::$thousandI64;
		$x = haxe__Int64_Int64_Impl_::divMod($a, $b1)->modulus;
		if($x->high !== $x->low >> 31) {
			throw new HException("Overflow");
		}
		return $x->low;
	}
	static function get_microseconds($this1) {
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMicrosecondI64;
		$a = haxe__Int64_Int64_Impl_::divMod($this1, $b)->quotient;
		$b1 = thx__DateTimeUtc_DateTimeUtc_Impl_::$tenThousandI64;
		$x = haxe__Int64_Int64_Impl_::divMod($a, $b1)->modulus;
		if($x->high !== $x->low >> 31) {
			throw new HException("Overflow");
		}
		return $x->low;
	}
	static function get_ticksInSecond($this1) {
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerSecondI64;
		$x = haxe__Int64_Int64_Impl_::divMod($this1, $b)->modulus;
		if($x->high !== $x->low >> 31) {
			throw new HException("Overflow");
		}
		return $x->low;
	}
	static function get_totalDays($this1) {
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerDayI64;
		return haxe__Int64_Int64_Impl_::divMod($this1, $b)->quotient;
	}
	static function get_totalHours($this1) {
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerHourI64;
		return haxe__Int64_Int64_Impl_::divMod($this1, $b)->quotient;
	}
	static function get_totalMinutes($this1) {
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMinuteI64;
		return haxe__Int64_Int64_Impl_::divMod($this1, $b)->quotient;
	}
	static function get_totalSeconds($this1) {
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerSecondI64;
		return haxe__Int64_Int64_Impl_::divMod($this1, $b)->quotient;
	}
	static function get_totalMilliseconds($this1) {
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMillisecondI64;
		return haxe__Int64_Int64_Impl_::divMod($this1, $b)->quotient;
	}
	static function get_totalMicroseconds($this1) {
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMicrosecondI64;
		return haxe__Int64_Int64_Impl_::divMod($this1, $b)->quotient;
	}
	static function get_isNegative($this1) {
		$x = new haxe__Int64____Int64(0, 0);
		$b = $x;
		$v = $this1->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $v !== 0;
		if($tmp) {
			$v = $v;
		} else {
			$v = haxe__Int32_Int32_Impl_::ucompare($this1->low, $b->low);
		}
		$tmp1 = null;
		if($this1->high < 0) {
			if($b->high < 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = -1;
			}
		} else {
			if($b->high >= 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = 1;
			}
		}
		return $tmp1 < 0;
	}
	static $__properties__ = array("get_isNegative" => "get_isNegative","get_totalMicroseconds" => "get_totalMicroseconds","get_totalMilliseconds" => "get_totalMilliseconds","get_totalSeconds" => "get_totalSeconds","get_totalMinutes" => "get_totalMinutes","get_totalHours" => "get_totalHours","get_totalDays" => "get_totalDays","get_ticksInSecond" => "get_ticksInSecond","get_microseconds" => "get_microseconds","get_milliseconds" => "get_milliseconds","get_seconds" => "get_seconds","get_minutes" => "get_minutes","get_hours" => "get_hours","get_days" => "get_days","get_ticks" => "get_ticks");
	function __toString() { return 'thx._Time.Time_Impl_'; }
}
thx__Time_Time_Impl_::$zero = thx__Time_Time_Impl__0();
thx__Time_Time_Impl_::$oneDay = thx__Time_Time_Impl__1();
function thx__Time_Time_Impl__0() {
	{
		$x = new haxe__Int64____Int64(0, 0);
		return $x;
	}
}
function thx__Time_Time_Impl__1() {
	{
		$x = new haxe__Int64____Int64(0, 24);
		return $x;
	}
}
