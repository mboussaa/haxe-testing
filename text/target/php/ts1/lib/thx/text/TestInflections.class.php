<?php

// Generated by Haxe 3.3.0
class thx_text_TestInflections {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testUncountable() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_text_Inflections::pluralize("information");
			utest_Assert::equals("information", $tmp, null, _hx_anonymous(array("fileName" => "TestInflections.hx", "lineNumber" => 14, "className" => "thx.text.TestInflections", "methodName" => "testUncountable")));
			$tmp1 = thx_text_Inflections::pluralize("news");
			utest_Assert::equals("news", $tmp1, null, _hx_anonymous(array("fileName" => "TestInflections.hx", "lineNumber" => 15, "className" => "thx.text.TestInflections", "methodName" => "testUncountable")));
			unset($tmp1,$tmp);
		}
	}
	public function testPluralize() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_text_Inflections::pluralize("day");
			utest_Assert::equals("days", $tmp, null, _hx_anonymous(array("fileName" => "TestInflections.hx", "lineNumber" => 20, "className" => "thx.text.TestInflections", "methodName" => "testPluralize")));
			$tmp1 = thx_text_Inflections::pluralize("woman");
			utest_Assert::equals("women", $tmp1, null, _hx_anonymous(array("fileName" => "TestInflections.hx", "lineNumber" => 21, "className" => "thx.text.TestInflections", "methodName" => "testPluralize")));
			$tmp2 = thx_text_Inflections::pluralize("autobus");
			utest_Assert::equals("autobuses", $tmp2, null, _hx_anonymous(array("fileName" => "TestInflections.hx", "lineNumber" => 22, "className" => "thx.text.TestInflections", "methodName" => "testPluralize")));
			$tmp3 = thx_text_Inflections::pluralize("quiz");
			utest_Assert::equals("quizzes", $tmp3, null, _hx_anonymous(array("fileName" => "TestInflections.hx", "lineNumber" => 23, "className" => "thx.text.TestInflections", "methodName" => "testPluralize")));
			unset($tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testSingularize() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_text_Inflections::singularize("days");
			utest_Assert::equals("day", $tmp, null, _hx_anonymous(array("fileName" => "TestInflections.hx", "lineNumber" => 28, "className" => "thx.text.TestInflections", "methodName" => "testSingularize")));
			$tmp1 = thx_text_Inflections::singularize("women");
			utest_Assert::equals("woman", $tmp1, null, _hx_anonymous(array("fileName" => "TestInflections.hx", "lineNumber" => 29, "className" => "thx.text.TestInflections", "methodName" => "testSingularize")));
			$tmp2 = thx_text_Inflections::singularize("autobuses");
			utest_Assert::equals("autobus", $tmp2, null, _hx_anonymous(array("fileName" => "TestInflections.hx", "lineNumber" => 30, "className" => "thx.text.TestInflections", "methodName" => "testSingularize")));
			$tmp3 = thx_text_Inflections::singularize("quizzes");
			utest_Assert::equals("quiz", $tmp3, null, _hx_anonymous(array("fileName" => "TestInflections.hx", "lineNumber" => 31, "className" => "thx.text.TestInflections", "methodName" => "testSingularize")));
			unset($tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.text.TestInflections'; }
}
