// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.text.table {
	public class Renderer : global::haxe.lang.HxObject {
		
		public Renderer(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Renderer(global::haxe.lang.Null<int> padding) {
			global::thx.text.table.Renderer.__hx_ctor_thx_text_table_Renderer(this, padding);
		}
		
		
		public static void __hx_ctor_thx_text_table_Renderer(global::thx.text.table.Renderer __temp_me177, global::haxe.lang.Null<int> padding) {
			unchecked {
				global::haxe.lang.Null<int> __temp_padding176 = ( ( ! (padding.hasValue) ) ? (new global::haxe.lang.Null<int>(1, true)) : (padding) );
				__temp_me177.padding = (__temp_padding176).@value;
			}
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.text.table.Renderer(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.text.table.Renderer(global::haxe.lang.Null<object>.ofDynamic<int>(arr[0]));
		}
		
		
		public int padding;
		
		public global::thx.text.table.Canvas canvas;
		
		public global::Array<int> colWidths;
		
		public global::Array<int> rowHeights;
		
		public global::Array<int> symbolPos;
		
		public global::thx.text.Table table;
		
		public virtual string render(global::thx.text.Table table) {
			this.table = table;
			this.canvas = new global::thx.text.table.Canvas(0, 0);
			this.processContents();
			return global::haxe.lang.Runtime.concat("\n", this.canvas.toString());
		}
		
		
		public virtual void processContents() {
			unchecked {
				global::thx.text.table.Renderer _gthis = this;
				global::Array<int> _g = new global::Array<int>(new int[]{});
				{
					int _g2 = 0;
					int _g1 = this.table.get_cols();
					while (( _g2 < _g1 )) {
						 ++ _g2;
						_g.push(0);
					}
					
				}
				
				this.colWidths = _g;
				global::Array<int> _g11 = new global::Array<int>(new int[]{});
				{
					int _g3 = 0;
					int _g21 = this.table.get_cols();
					while (( _g3 < _g21 )) {
						 ++ _g3;
						_g11.push(0);
					}
					
				}
				
				this.symbolPos = _g11;
				global::Array<int> _g22 = new global::Array<int>(new int[]{});
				{
					int _g4 = 0;
					int _g31 = this.table.get_rows();
					while (( _g4 < _g31 )) {
						 ++ _g4;
						_g22.push(0);
					}
					
				}
				
				this.rowHeights = _g22;
				global::Array<object> blocks = global::thx.Arrays.order<object>(((global::Array<object>) (this.table.toArray()) ), ((global::haxe.lang.Function) (( (( global::thx.text.table.Renderer_processContents_33__Fun.__hx_current != null )) ? (global::thx.text.table.Renderer_processContents_33__Fun.__hx_current) : (global::thx.text.table.Renderer_processContents_33__Fun.__hx_current = ((global::thx.text.table.Renderer_processContents_33__Fun) (new global::thx.text.table.Renderer_processContents_33__Fun()) )) )) )).map<object>(((global::haxe.lang.Function) (new global::thx.text.table.Renderer_processContents_34__Fun(_gthis)) ));
				int width1 = ((int) (global::haxe.lang.Runtime.toInt(global::thx.Arrays.reduce<int, object>(((global::Array<int>) (this.colWidths) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "reduceWidth", 523288192)) ), ((object) (1) )))) );
				int height1 = ((int) (global::haxe.lang.Runtime.toInt(global::thx.Arrays.reduce<int, object>(((global::Array<int>) (this.rowHeights) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "reduceHeight", 1640327725)) ), ((object) (1) )))) );
				this.canvas.expand(width1, height1);
				global::thx.Arrays.each<object>(((global::Array<object>) (blocks) ), ((global::haxe.lang.Function) (new global::thx.text.table.Renderer_processContents_91__Fun(_gthis)) ));
				this.canvas.paintBottomLine(global::thx.text.table.CellType.Body, 0, ( height1 - 1 ), width1);
			}
		}
		
		
		public virtual int reduceWidth(int acc, int width) {
			unchecked {
				return ( ( ( acc + width ) + ( this.padding * 2 ) ) + 1 );
			}
		}
		
		
		public virtual int reduceHeight(int acc, int height) {
			unchecked {
				return ( ( acc + height ) + 1 );
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1350392273:
					{
						this.padding = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 182695950:
					{
						this.table = ((global::thx.text.Table) (@value) );
						return @value;
					}
					
					
					case 1610714396:
					{
						this.symbolPos = ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (@value) ))) );
						return @value;
					}
					
					
					case 2077556658:
					{
						this.rowHeights = ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (@value) ))) );
						return @value;
					}
					
					
					case 1809462285:
					{
						this.colWidths = ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (@value) ))) );
						return @value;
					}
					
					
					case 943871192:
					{
						this.canvas = ((global::thx.text.table.Canvas) (@value) );
						return @value;
					}
					
					
					case 1350392273:
					{
						this.padding = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1640327725:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "reduceHeight", 1640327725)) );
					}
					
					
					case 523288192:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "reduceWidth", 523288192)) );
					}
					
					
					case 255781545:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "processContents", 255781545)) );
					}
					
					
					case 86600534:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "render", 86600534)) );
					}
					
					
					case 182695950:
					{
						return this.table;
					}
					
					
					case 1610714396:
					{
						return this.symbolPos;
					}
					
					
					case 2077556658:
					{
						return this.rowHeights;
					}
					
					
					case 1809462285:
					{
						return this.colWidths;
					}
					
					
					case 943871192:
					{
						return this.canvas;
					}
					
					
					case 1350392273:
					{
						return this.padding;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1350392273:
					{
						return ((double) (this.padding) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1640327725:
					{
						return this.reduceHeight(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ));
					}
					
					
					case 523288192:
					{
						return this.reduceWidth(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ));
					}
					
					
					case 255781545:
					{
						this.processContents();
						break;
					}
					
					
					case 86600534:
					{
						return this.render(((global::thx.text.Table) (dynargs[0]) ));
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("table");
			baseArr.push("symbolPos");
			baseArr.push("rowHeights");
			baseArr.push("colWidths");
			baseArr.push("canvas");
			baseArr.push("padding");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.text.table {
	public class Renderer_processContents_34__Fun : global::haxe.lang.Function {
		
		public Renderer_processContents_34__Fun(global::thx.text.table.Renderer _gthis) : base(1, 0) {
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx.text.table.Cell cell = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.text.table.Cell) (((object) (__fn_float1) )) )) : (((global::thx.text.table.Cell) (__fn_dyn1) )) );
				global::haxe.lang.Null<int> maxWidth = cell.style.get_maxWidth();
				global::haxe.lang.Null<int> maxHeight = cell.style.get_maxHeight();
				int minWidth = cell.style.get_minWidth();
				int minHeight = cell.style.get_minHeight();
				int spanRight = 1;
				int spanDown = 1;
				{
					global::thx.text.table.Span _g32 = cell.span;
					switch (_g32.index) {
						case 1:
						{
							int c = ((int) (global::haxe.lang.Runtime.toInt(_g32.@params[1])) );
							if (( c > 1 )) {
								spanRight = c;
							}
							
							break;
						}
						
						
						case 2:
						{
							int c1 = ((int) (global::haxe.lang.Runtime.toInt(_g32.@params[0])) );
							if (( c1 > 1 )) {
								spanRight = c1;
							}
							
							break;
						}
						
						
						case 4:
						case 6:
						{
							spanRight = ( cell.table.get_cols() - cell.col.index );
							break;
						}
						
						
						default:
						{
							break;
						}
						
					}
					
				}
				
				{
					global::thx.text.table.Span _g41 = cell.span;
					switch (_g41.index) {
						case 1:
						{
							int r = ((int) (global::haxe.lang.Runtime.toInt(_g41.@params[0])) );
							if (( r > 1 )) {
								spanDown = r;
							}
							
							break;
						}
						
						
						case 3:
						{
							int r1 = ((int) (global::haxe.lang.Runtime.toInt(_g41.@params[0])) );
							if (( r1 > 1 )) {
								spanDown = r1;
							}
							
							break;
						}
						
						
						case 5:
						case 6:
						{
							spanDown = ( cell.table.get_rows() - cell.row.index );
							break;
						}
						
						
						default:
						{
							break;
						}
						
					}
					
				}
				
				global::thx.text.table.StringBlock block = ((global::thx.text.table.StringBlock) (cell.style.get_formatter().__hx_invoke2_o(default(double), cell.@value, default(double), (maxWidth).toDynamic())) );
				global::thx.text.table.HAlign halign = ((global::thx.text.table.HAlign) (cell.style.get_aligner().__hx_invoke2_o(default(double), cell.@value, default(double), cell.style.get_type())) );
				int a1 = default(int);
				if ( ! (maxWidth.hasValue) ) {
					a1 = block.width;
				}
				else {
					int a2 = (maxWidth).@value;
					int b1 = block.width;
					if (( a2 < b1 )) {
						a1 = a2;
					}
					else {
						a1 = b1;
					}
					
				}
				
				int width = ( (( a1 > minWidth )) ? (a1) : (minWidth) );
				int a3 = default(int);
				if ( ! (maxHeight.hasValue) ) {
					a3 = block.height;
				}
				else {
					int a4 = (maxHeight).@value;
					int b2 = block.height;
					if (( a4 < b2 )) {
						a3 = a4;
					}
					else {
						a3 = b2;
					}
					
				}
				
				int height = ( (( a3 > minHeight )) ? (a3) : (minHeight) );
				if (( halign.index == 3 )) {
					int pos = block.symbolPos(global::haxe.lang.Runtime.toString(halign.@params[0]));
					int a5 = this._gthis.symbolPos[cell.col.index];
					this._gthis.symbolPos[cell.col.index] = ( (( a5 > pos )) ? (a5) : (pos) );
					int extra = ( this._gthis.symbolPos[cell.col.index] - pos );
					if (( spanRight == 1 )) {
						int a6 = this._gthis.colWidths[cell.col.index];
						int b3 = ( width + extra );
						this._gthis.colWidths[cell.col.index] = ( (( a6 > b3 )) ? (a6) : (b3) );
					}
					
				}
				else if (( spanRight == 1 )) {
					int a7 = this._gthis.colWidths[cell.col.index];
					this._gthis.colWidths[cell.col.index] = ( (( a7 > width )) ? (a7) : (width) );
				}
				
				int a8 = this._gthis.rowHeights[cell.row.index];
				this._gthis.rowHeights[cell.row.index] = ( (( a8 > height )) ? (a8) : (height) );
				return new global::haxe.lang.DynamicObject(new int[]{888960333, 917429597, 1102913954}, new object[]{block, halign, cell}, new int[]{33113266, 788933708}, new double[]{((double) (spanRight) ), ((double) (spanDown) )});
			}
		}
		
		
		public global::thx.text.table.Renderer _gthis;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.text.table {
	public class Renderer_processContents_33__Fun : global::haxe.lang.Function {
		
		public Renderer_processContents_33__Fun() : base(2, 1) {
		}
		
		
		public static global::thx.text.table.Renderer_processContents_33__Fun __hx_current;
		
		public override double __hx_invoke2_f(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::thx.text.table.Cell b = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.text.table.Cell) (((object) (__fn_float2) )) )) : (((global::thx.text.table.Cell) (__fn_dyn2) )) );
			global::thx.text.table.Cell a = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.text.table.Cell) (((object) (__fn_float1) )) )) : (((global::thx.text.table.Cell) (__fn_dyn1) )) );
			return ((double) (global::thx.Enums.compare<object>(((object) (b.span) ), ((object) (a.span) ))) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.text.table {
	public class Renderer_processContents_91__Fun : global::haxe.lang.Function {
		
		public Renderer_processContents_91__Fun(global::thx.text.table.Renderer _gthis) : base(1, 0) {
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				object item = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
				int x = ((int) (global::haxe.lang.Runtime.toInt(global::thx.Arrays.reduce<int, object>(((global::Array<int>) (this._gthis.colWidths.slice(0, new global::haxe.lang.Null<int>(((global::thx.text.table.Cell) (global::haxe.lang.Runtime.getField(item, "cell", 1102913954, true)) ).col.index, true))) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this._gthis, "reduceWidth", 523288192)) ), ((object) (0) )))) );
				int y = ((int) (global::haxe.lang.Runtime.toInt(global::thx.Arrays.reduce<int, object>(((global::Array<int>) (this._gthis.rowHeights.slice(0, new global::haxe.lang.Null<int>(((global::thx.text.table.Cell) (global::haxe.lang.Runtime.getField(item, "cell", 1102913954, true)) ).row.index, true))) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this._gthis, "reduceHeight", 1640327725)) ), ((object) (0) )))) );
				global::Array<int> _g33 = new global::Array<int>(new int[]{});
				{
					int _g5 = 0;
					int _g42 = ((int) (global::haxe.lang.Runtime.getField_f(item, "spanRight", 33113266, true)) );
					while (( _g5 < _g42 )) {
						int i = _g5++;
						_g33.push(( this._gthis.colWidths[( ((global::thx.text.table.Cell) (global::haxe.lang.Runtime.getField(item, "cell", 1102913954, true)) ).col.index + i )] + (( (( i > 0 )) ? (( ( 2 * this._gthis.padding ) + 1 )) : (0) )) ));
					}
					
				}
				
				global::haxe.lang.Null<int> width2 = global::thx.ArrayInts.sum(_g33);
				global::Array<int> _g43 = new global::Array<int>(new int[]{});
				{
					int _g6 = 0;
					int _g51 = ((int) (global::haxe.lang.Runtime.getField_f(item, "spanDown", 788933708, true)) );
					while (( _g6 < _g51 )) {
						int i1 = _g6++;
						_g43.push(( this._gthis.rowHeights[( ((global::thx.text.table.Cell) (global::haxe.lang.Runtime.getField(item, "cell", 1102913954, true)) ).row.index + i1 )] + (( (( i1 > 0 )) ? (1) : (0) )) ));
					}
					
				}
				
				global::haxe.lang.Null<int> height2 = global::thx.ArrayInts.sum(_g43);
				this._gthis.canvas.paintBlock(((global::thx.text.table.StringBlock) (global::haxe.lang.Runtime.getField(item, "block", 888960333, true)) ), ( ( x + 1 ) + this._gthis.padding ), ( y + 1 ), (width2).@value, 1, ((global::thx.text.table.HAlign) (global::haxe.lang.Runtime.getField(item, "halign", 917429597, true)) ), this._gthis.symbolPos[((global::thx.text.table.Cell) (global::haxe.lang.Runtime.getField(item, "cell", 1102913954, true)) ).col.index]);
				int w = ( (width2).@value + ( (( 1 + this._gthis.padding )) * 2 ) );
				this._gthis.canvas.paintBorder(((global::thx.text.table.Cell) (global::haxe.lang.Runtime.getField(item, "cell", 1102913954, true)) ).style.get_type(), x, y, w, ( (height2).@value + 2 ));
				return null;
			}
		}
		
		
		public global::thx.text.table.Renderer _gthis;
		
	}
}


