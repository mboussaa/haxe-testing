// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.text {
	public class TestTable : global::haxe.lang.HxObject {
		
		public TestTable(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestTable(int i) {
			global::thx.text.TestTable.__hx_ctor_thx_text_TestTable(this, i);
		}
		
		
		public static void __hx_ctor_thx_text_TestTable(global::thx.text.TestTable __temp_me171, int i) {
			__temp_me171.x = i;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.text.TestTable(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.text.TestTable(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ));
		}
		
		
		public int x;
		
		public global::thx.text.Table table;
		
		public virtual void setup() {
			this.table = new global::thx.text.Table();
		}
		
		
		public virtual void testPaintBorder() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.text.table.Canvas canvas = new global::thx.text.table.Canvas(3, 3);
					canvas.paintBorder(global::thx.text.table.CellType.Body, 0, 0, 3, 3);
					global::utest.Assert.@equals("\u250c\u2500\u2510\n\u2502 \u2502\n\u2514\u2500\u2518", canvas.toString(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPaintBorder", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (25) )}));
					canvas = new global::thx.text.table.Canvas(4, 4);
					canvas.paintBorder(global::thx.text.table.CellType.Body, 1, 0, 3, 3);
					global::utest.Assert.@equals(" \u250c\u2500\u2510\n \u2502 \u2502\n \u2514\u2500\u2518\n    ", canvas.toString(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPaintBorder", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (29) )}));
					canvas = new global::thx.text.table.Canvas(4, 4);
					canvas.paintBorder(global::thx.text.table.CellType.Body, 1, 1, 3, 3);
					global::utest.Assert.@equals("    \n \u250c\u2500\u2510\n \u2502 \u2502\n \u2514\u2500\u2518", canvas.toString(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPaintBorder", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (33) )}));
				}
				
			}
		}
		
		
		public virtual void oneCell(global::thx.text.table.CellValueImpl @value, int width) {
			this.table = new global::thx.text.Table();
			this.table.style.set_type(global::thx.text.table.CellType.Body);
			this.table.style.set_minWidth(width);
			this.table.@set(@value, 0, 0, null);
		}
		
		
		public virtual void testSequence() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.text.table.Cell last = this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.BoolCell(true)) ), 0, 1, null);
					global::thx.text.table.Cell first = this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.BoolCell(false)) ), 0, 0, null);
					global::utest.Assert.@equals(1, last.col.index, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSequence", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (48) )}));
					global::utest.Assert.@equals(0, first.col.index, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSequence", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (49) )}));
				}
				
			}
		}
		
		
		public virtual void testStyle() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.text.table.Style style = new global::thx.text.table.Style();
					global::utest.Assert.isNull(style.get_formatter(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testStyle", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (55) )}));
					global::thx.text.table.DefaultStyle dstyle = new global::thx.text.table.DefaultStyle();
					global::utest.Assert.notNull(dstyle.get_formatter(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testStyle", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (57) )}));
					global::thx.text.table.CompositeStyle cstyle = new global::thx.text.table.CompositeStyle(((global::Array<object>) (new global::Array<object>(new object[]{style})) ));
					global::utest.Assert.isNull(cstyle.get_formatter(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testStyle", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (59) )}));
					cstyle = new global::thx.text.table.CompositeStyle(((global::Array<object>) (new global::Array<object>(new object[]{style, dstyle})) ));
					global::utest.Assert.notNull(cstyle.get_formatter(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testStyle", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (61) )}));
				}
				
			}
		}
		
		
		public virtual void testCanvas() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.text.table.Canvas canvas = new global::thx.text.table.Canvas(3, 2);
					global::utest.Assert.@equals("   \n   ", canvas.toString(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCanvas", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (67) )}));
					canvas.expand(4, 3);
					global::utest.Assert.@equals("    \n    \n    ", canvas.toString(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCanvas", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (69) )}));
				}
				
			}
		}
		
		
		public virtual void testTableSize() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals(0, this.table.get_rows(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTableSize", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (74) )}));
					global::utest.Assert.@equals(0, this.table.get_cols(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTableSize", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (75) )}));
					this.table.getCol(2);
					global::utest.Assert.@equals(0, this.table.get_cols(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTableSize", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (77) )}));
					this.table.ensureCol(3);
					global::utest.Assert.@equals(4, this.table.get_cols(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTableSize", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (79) )}));
					global::utest.Assert.@equals(0, this.table.get_rows(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTableSize", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (80) )}));
					this.table.ensureRow(1);
					global::utest.Assert.@equals(2, this.table.get_rows(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTableSize", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (82) )}));
				}
				
			}
		}
		
		
		public virtual void testCellResizeTable() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.IntCell(1)) ), 3, 2, null);
					global::utest.Assert.@equals(3, this.table.get_cols(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCellResizeTable", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (88) )}));
					global::utest.Assert.@equals(4, this.table.get_rows(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCellResizeTable", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (89) )}));
				}
				
			}
		}
		
		
		public virtual void testIdentityOfCellsCreatedFromTable() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.text.table.Cell cell = this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.IntCell(1)) ), 3, 2, null);
					global::utest.Assert.isTrue(( cell == this.table.@get(3, 2) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromTable", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (95) )}));
					global::utest.Assert.isTrue(( cell == this.table.getRow(3).@get(2) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromTable", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (97) )}));
					global::utest.Assert.isTrue(( cell == this.table.getCol(2).@get(3) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromTable", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (98) )}));
					global::utest.Assert.isTrue(( cell.row == this.table.getRow(3) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromTable", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (100) )}));
					global::utest.Assert.isTrue(( cell.col == this.table.getCol(2) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromTable", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (101) )}));
					global::utest.Assert.isTrue(( cell.table == this.table ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromTable", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (103) )}));
					global::utest.Assert.isTrue(( cell.row.table == this.table ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromTable", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (104) )}));
					global::utest.Assert.isTrue(( cell.col.table == this.table ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromTable", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (105) )}));
				}
				
			}
		}
		
		
		public virtual void testIdentityOfCellsCreatedFromRow() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.text.table.Cell cell = this.table.ensureRow(3).@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.IntCell(1)) ), 2, null);
					global::utest.Assert.isTrue(( cell == this.table.@get(3, 2) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromRow", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (112) )}));
					global::utest.Assert.isTrue(( cell == this.table.getRow(3).@get(2) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromRow", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (114) )}));
					global::utest.Assert.isTrue(( cell == this.table.getCol(2).@get(3) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromRow", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (115) )}));
					global::utest.Assert.isTrue(( cell.row == this.table.getRow(3) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromRow", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (117) )}));
					global::utest.Assert.isTrue(( cell.col == this.table.getCol(2) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromRow", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (118) )}));
					global::utest.Assert.isTrue(( cell.table == this.table ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromRow", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (120) )}));
					global::utest.Assert.isTrue(( cell.row.table == this.table ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromRow", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (121) )}));
					global::utest.Assert.isTrue(( cell.col.table == this.table ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromRow", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (122) )}));
				}
				
			}
		}
		
		
		public virtual void testIdentityOfCellsCreatedFromCol() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.text.table.Cell cell = this.table.ensureCol(2).@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.IntCell(1)) ), 3, null);
					global::utest.Assert.isTrue(( cell == this.table.@get(3, 2) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromCol", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (129) )}));
					global::utest.Assert.isTrue(( cell == this.table.getRow(3).@get(2) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromCol", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (131) )}));
					global::utest.Assert.isTrue(( cell == this.table.getCol(2).@get(3) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromCol", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (132) )}));
					global::utest.Assert.isTrue(( cell.row == this.table.getRow(3) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromCol", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (134) )}));
					global::utest.Assert.isTrue(( cell.col == this.table.getCol(2) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromCol", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (135) )}));
					global::utest.Assert.isTrue(( cell.table == this.table ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromCol", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (137) )}));
					global::utest.Assert.isTrue(( cell.row.table == this.table ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromCol", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (138) )}));
					global::utest.Assert.isTrue(( cell.col.table == this.table ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromCol", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (139) )}));
				}
				
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 182695950:
					{
						this.table = ((global::thx.text.Table) (@value) );
						return @value;
					}
					
					
					case 120:
					{
						this.x = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 987476920:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testIdentityOfCellsCreatedFromCol", 987476920)) );
					}
					
					
					case 988222866:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testIdentityOfCellsCreatedFromRow", 988222866)) );
					}
					
					
					case 813808006:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testIdentityOfCellsCreatedFromTable", 813808006)) );
					}
					
					
					case 1157765830:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCellResizeTable", 1157765830)) );
					}
					
					
					case 1831018813:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTableSize", 1831018813)) );
					}
					
					
					case 1362533066:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCanvas", 1362533066)) );
					}
					
					
					case 1293935487:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testStyle", 1293935487)) );
					}
					
					
					case 1542735027:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSequence", 1542735027)) );
					}
					
					
					case 1461654312:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "oneCell", 1461654312)) );
					}
					
					
					case 460255224:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testPaintBorder", 460255224)) );
					}
					
					
					case 2049945213:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "setup", 2049945213)) );
					}
					
					
					case 182695950:
					{
						return this.table;
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						return ((double) (this.x) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 987476920:
					{
						this.testIdentityOfCellsCreatedFromCol();
						break;
					}
					
					
					case 988222866:
					{
						this.testIdentityOfCellsCreatedFromRow();
						break;
					}
					
					
					case 813808006:
					{
						this.testIdentityOfCellsCreatedFromTable();
						break;
					}
					
					
					case 1157765830:
					{
						this.testCellResizeTable();
						break;
					}
					
					
					case 1831018813:
					{
						this.testTableSize();
						break;
					}
					
					
					case 1362533066:
					{
						this.testCanvas();
						break;
					}
					
					
					case 1293935487:
					{
						this.testStyle();
						break;
					}
					
					
					case 1542735027:
					{
						this.testSequence();
						break;
					}
					
					
					case 1461654312:
					{
						this.oneCell(((global::thx.text.table.CellValueImpl) (dynargs[0]) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ));
						break;
					}
					
					
					case 460255224:
					{
						this.testPaintBorder();
						break;
					}
					
					
					case 2049945213:
					{
						this.setup();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("table");
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}


