// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.text {
	public class Table : global::haxe.lang.HxObject {
		
		public Table(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Table() {
			global::thx.text.Table.__hx_ctor_thx_text_Table(this);
		}
		
		
		public static void __hx_ctor_thx_text_Table(global::thx.text.Table __temp_me171) {
			__temp_me171._rows = new global::Array<object>(new object[]{});
			__temp_me171._cols = new global::Array<object>(new object[]{});
			__temp_me171.style = new global::thx.text.table.Style();
		}
		
		
		public static global::thx.text.Table fromData(global::Array<object> data, global::haxe.lang.Null<bool> hasHeader, string title) {
			unchecked {
				global::haxe.lang.Null<bool> __temp_hasHeader170 = ( ( ! (hasHeader.hasValue) ) ? (new global::haxe.lang.Null<bool>(true, true)) : (hasHeader) );
				int offset = ( (string.Equals(title, null)) ? (0) : (1) );
				global::thx.text.Table table = new global::thx.text.Table();
				if (((__temp_hasHeader170)).@value) {
					table.ensureRow(offset).style.set_type(global::thx.text.table.CellType.Header);
				}
				
				if ( ! (string.Equals(null, title)) ) {
					table.ensureRow(0).style.set_type(global::thx.text.table.CellType.Header);
					table.ensureRow(0).style.setAlign(global::thx.text.table.HAlign.Center);
					table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.StringCell(title)) ), 0, 0, global::thx.text.table.Span.FillRight);
				}
				
				{
					int _g1 = 0;
					int _g = data.length;
					while (( _g1 < _g )) {
						int r = _g1++;
						global::Array row = ((global::Array) (data[r]) );
						{
							int _g3 = 0;
							int _g2 = ((int) (global::haxe.lang.Runtime.getField_f(row, "length", 520590566, true)) );
							while (( _g3 < _g2 )) {
								int c = _g3++;
								table.@set(global::thx.text.table._CellValue.CellValue_Impl_.fromDynamic(row[c]), ( r + offset ), c, null);
							}
							
						}
						
					}
					
				}
				
				return table;
			}
		}
		
		
		public static global::thx.text.Table fromObjects(global::Array<object> data, string title) {
			unchecked {
				int offset = ( (string.Equals(title, null)) ? (0) : (1) );
				global::thx.text.Table table = new global::thx.text.Table();
				global::haxe.ds.StringMap<int> headers = new global::haxe.ds.StringMap<int>();
				int cols = 0;
				if ( ! (string.Equals(null, title)) ) {
					table.ensureRow(0).style.set_type(global::thx.text.table.CellType.Header);
					table.ensureRow(0).style.setAlign(global::thx.text.table.HAlign.Center);
					table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.StringCell(title)) ), 0, 0, global::thx.text.table.Span.FillRight);
				}
				
				table.ensureRow(offset).style.set_type(global::thx.text.table.CellType.Header);
				{
					int _g1 = 0;
					int _g = data.length;
					while (( _g1 < _g )) {
						int r = _g1++;
						global::Array<object> fields = global::Reflect.fields(data[r]);
						{
							int _g2 = 0;
							while (( _g2 < fields.length )) {
								string field = global::haxe.lang.Runtime.toString(fields[_g2]);
								 ++ _g2;
								global::haxe.lang.Null<int> col = ((global::haxe.lang.Null<int>) (headers.@get(((string) (field) ))) );
								if ( ! (col.hasValue) ) {
									col = new global::haxe.lang.Null<int>(cols++, true);
									headers.@set(((string) (field) ), (col).@value);
									table.@set(global::thx.text.table.CellValueImpl.StringCell(global::thx.Strings.humanize(field)), offset, (col).@value, null);
								}
								
								table.@set(global::thx.text.table._CellValue.CellValue_Impl_.fromDynamic(global::Reflect.field(data[r], field)), ( ( r + offset ) + 1 ), (col).@value, null);
							}
							
						}
						
					}
					
				}
				
				return table;
			}
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.text.Table(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.text.Table();
		}
		
		
		
		
		
		
		public global::thx.text.table.IStyle style;
		
		public global::Array<object> _rows;
		
		public global::Array<object> _cols;
		
		public virtual global::thx.text.table.Cell @set(global::thx.text.table.CellValueImpl @value, int row, int col, global::thx.text.table.Span span) {
			if (( null == span )) {
				span = global::thx.text.table.Span.NoSpan;
			}
			
			global::thx.text.table.Row r = this.ensureRow(row);
			global::thx.text.table.Col c = this.ensureCol(col);
			global::thx.text.table.Cell cell = new global::thx.text.table.Cell(@value, r, c, span);
			c.setCell(row, cell);
			return cell;
		}
		
		
		public virtual global::thx.text.table.Cell @get(int row, int col) {
			global::thx.text.table.Col col1 = this.getCol(col);
			if (( null == col1 )) {
				return null;
			}
			
			return col1.@get(row);
		}
		
		
		public virtual global::thx.text.table.Col ensureCol(int index) {
			unchecked {
				{
					int _g1 = this._cols.length;
					int _g = ( index + 1 );
					while (( _g1 < _g )) {
						int i = _g1++;
						this._cols[i] = new global::thx.text.table.Col(this, i);
					}
					
				}
				
				return ((global::thx.text.table.Col) (this._cols[index]) );
			}
		}
		
		
		public virtual global::thx.text.table.Row ensureRow(int index) {
			unchecked {
				{
					int _g1 = this._rows.length;
					int _g = ( index + 1 );
					while (( _g1 < _g )) {
						int i = _g1++;
						this._rows[i] = new global::thx.text.table.Row(this, i);
					}
					
				}
				
				return ((global::thx.text.table.Row) (this._rows[index]) );
			}
		}
		
		
		public virtual global::thx.text.table.Col getCol(int index) {
			return ((global::thx.text.table.Col) (this._cols[index]) );
		}
		
		
		public virtual global::thx.text.table.Row getRow(int index) {
			return ((global::thx.text.table.Row) (this._rows[index]) );
		}
		
		
		public virtual global::Array<object> toArray() {
			global::Array<object> collector = new global::Array<object>(new object[]{});
			{
				int _g = 0;
				global::Array<object> _g1 = this._rows;
				while (( _g < _g1.length )) {
					global::thx.text.table.Row row = ((global::thx.text.table.Row) (_g1[_g]) );
					 ++ _g;
					{
						object tmp = row.iterator();
						while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp, "hasNext", 407283053, null))) {
							collector.push(((global::thx.text.table.Cell) (global::haxe.lang.Runtime.callField(tmp, "next", 1224901875, null)) ));
						}
						
					}
					
				}
				
			}
			
			return collector;
		}
		
		
		public virtual string toString() {
			return new global::thx.text.table.Renderer(((global::haxe.lang.Null<int>) (default(global::haxe.lang.Null<int>)) )).render(this);
		}
		
		
		public virtual int get_rows() {
			return this._rows.length;
		}
		
		
		public virtual int get_cols() {
			return this._cols.length;
		}
		
		
		public virtual int set_rows(int @value) {
			unchecked {
				this.ensureRow(( @value + 1 ));
				return @value;
			}
		}
		
		
		public virtual int set_cols(int @value) {
			unchecked {
				this.ensureCol(( @value + 1 ));
				return @value;
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1103411251:
					{
						this.set_cols(((int) (@value) ));
						return @value;
					}
					
					
					case 1269757209:
					{
						this.set_rows(((int) (@value) ));
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1960170514:
					{
						this._cols = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (@value) ))) );
						return @value;
					}
					
					
					case 2126516472:
					{
						this._rows = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (@value) ))) );
						return @value;
					}
					
					
					case 69051697:
					{
						this.style = ((global::thx.text.table.IStyle) (@value) );
						return @value;
					}
					
					
					case 1103411251:
					{
						this.set_cols(((int) (global::haxe.lang.Runtime.toInt(@value)) ));
						return @value;
					}
					
					
					case 1269757209:
					{
						this.set_rows(((int) (global::haxe.lang.Runtime.toInt(@value)) ));
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1876741424:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_cols", 1876741424)) );
					}
					
					
					case 2043087382:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_rows", 2043087382)) );
					}
					
					
					case 1098871740:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_cols", 1098871740)) );
					}
					
					
					case 1265217698:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_rows", 1265217698)) );
					}
					
					
					case 946786476:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
					}
					
					
					case 1913895454:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toArray", 1913895454)) );
					}
					
					
					case 589699876:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getRow", 589699876)) );
					}
					
					
					case 588953930:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getCol", 588953930)) );
					}
					
					
					case 696274684:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "ensureRow", 696274684)) );
					}
					
					
					case 695528738:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "ensureCol", 695528738)) );
					}
					
					
					case 5144726:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get", 5144726)) );
					}
					
					
					case 5741474:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set", 5741474)) );
					}
					
					
					case 1960170514:
					{
						return this._cols;
					}
					
					
					case 2126516472:
					{
						return this._rows;
					}
					
					
					case 69051697:
					{
						return this.style;
					}
					
					
					case 1103411251:
					{
						return this.get_cols();
					}
					
					
					case 1269757209:
					{
						return this.get_rows();
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1103411251:
					{
						return ((double) (this.get_cols()) );
					}
					
					
					case 1269757209:
					{
						return ((double) (this.get_rows()) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1876741424:
					{
						return this.set_cols(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
					}
					
					
					case 2043087382:
					{
						return this.set_rows(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
					}
					
					
					case 1098871740:
					{
						return this.get_cols();
					}
					
					
					case 1265217698:
					{
						return this.get_rows();
					}
					
					
					case 946786476:
					{
						return this.toString();
					}
					
					
					case 1913895454:
					{
						return this.toArray();
					}
					
					
					case 589699876:
					{
						return this.getRow(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
					}
					
					
					case 588953930:
					{
						return this.getCol(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
					}
					
					
					case 696274684:
					{
						return this.ensureRow(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
					}
					
					
					case 695528738:
					{
						return this.ensureCol(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
					}
					
					
					case 5144726:
					{
						return this.@get(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ));
					}
					
					
					case 5741474:
					{
						return this.@set(((global::thx.text.table.CellValueImpl) (dynargs[0]) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[2])) ), ((global::thx.text.table.Span) (dynargs[3]) ));
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("_cols");
			baseArr.push("_rows");
			baseArr.push("style");
			baseArr.push("cols");
			baseArr.push("rows");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
		public override string ToString(){
			return this.toString();
		}
		
		
	}
}


