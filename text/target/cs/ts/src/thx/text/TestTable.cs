// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.text {
	public class TestTable : global::haxe.lang.HxObject {
		
		public TestTable(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestTable() {
			global::thx.text.TestTable.__hx_ctor_thx_text_TestTable(this);
		}
		
		
		public static void __hx_ctor_thx_text_TestTable(global::thx.text.TestTable __temp_me173) {
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.text.TestTable(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.text.TestTable();
		}
		
		
		public global::thx.text.Table table;
		
		public virtual void setup() {
			this.table = new global::thx.text.Table();
		}
		
		
		public virtual void testSpanRight() {
			unchecked {
				this.table.style.set_type(global::thx.text.table.CellType.Body);
				this.table.style.setAlign(global::thx.text.table.HAlign.Center);
				this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.IntCell(1)) ), 0, 0, global::thx.text.table.Span.SpanRight(2));
				this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.IntCell(2)) ), 1, 0, null);
				this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.IntCell(3)) ), 1, 1, null);
				global::utest.Assert.@equals("\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   1   \u2502\n\u251c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2524\n\u2502 2 \u2502 3 \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518", this.table.toString(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSpanRight", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (24) )}));
			}
		}
		
		
		public virtual void testSpanDown() {
			unchecked {
				this.table.style.set_type(global::thx.text.table.CellType.Body);
				this.table.style.setAlign(global::thx.text.table.HAlign.Center);
				this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.IntCell(1)) ), 0, 0, global::thx.text.table.Span.SpanDown(2));
				this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.IntCell(2)) ), 0, 1, null);
				this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.IntCell(3)) ), 1, 1, null);
				global::utest.Assert.@equals("\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u2502 1 \u2502 2 \u2502\n\u2502   \u251c\u2500\u2500\u2500\u2524\n\u2502   \u2502 3 \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518", this.table.toString(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSpanDown", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (38) )}));
			}
		}
		
		
		public virtual void testSpanning() {
			unchecked {
				this.table.style.set_type(global::thx.text.table.CellType.Body);
				this.table.style.setAlign(global::thx.text.table.HAlign.Center);
				this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.StringCell("0/0")) ), 0, 0, null);
				this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.StringCell("0/1")) ), 0, 1, global::thx.text.table.Span.SpanBoth(2, 2));
				this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.StringCell("0/3")) ), 0, 3, global::thx.text.table.Span.SpanDown(2));
				this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.StringCell("1/0")) ), 1, 0, null);
				this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.StringCell("2/0")) ), 2, 0, global::thx.text.table.Span.SpanRight(2));
				this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.StringCell("2/2")) ), 2, 2, global::thx.text.table.Span.SpanRight(2));
				global::utest.Assert.@equals("\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 0/0 \u2502 0/1 \u2502 0/3 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2524     \u2502     \u2502\n\u2502 1/0 \u2502     \u2502     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u252c\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  2/0   \u2502  2/2   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", this.table.toString(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSpanning", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (56) )}));
			}
		}
		
		
		public virtual void testFromData() {
			unchecked {
				global::utest.Assert.@equals("\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503            average earnings            \u2503\n\u2523\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252b\n\u2503 rank \u2503 country               \u2503 US $    \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502    1 \u2502 Luxembourg            \u2502 113,533 \u2502\n\u2502    2 \u2502 Qatar                 \u2502  98,329 \u2502\n\u2502    3 \u2502 Norway                \u2502  97,255 \u2502\n\u2502    4 \u2502 Switzerland           \u2502  81,161 \u2502\n\u2502    5 \u2502 United Arab  Emirates \u2502  67,008 \u2502\n\u2502    6 \u2502 Australia             \u2502  65,477 \u2502\n\u2502    7 \u2502 Denmark               \u2502  59,928 \u2502\n\u2502    8 \u2502 Sweden                \u2502  56,956 \u2502\n\u2502    9 \u2502 Canada                \u2502  50,436 \u2502\n\u2502   10 \u2502 Netherlands           \u2502  50,355 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", global::thx.text.Table.fromData(new global::Array<object>(new object[]{new global::Array<object>(new object[]{"rank", "country", "US $"}), new global::Array<object>(new object[]{1, "Luxembourg", 113533}), new global::Array<object>(new object[]{2, "Qatar", 98329}), new global::Array<object>(new object[]{3, "Norway", 97255}), new global::Array<object>(new object[]{4, "Switzerland", 81161}), new global::Array<object>(new object[]{5, "United Arab  Emirates", 67008}), new global::Array<object>(new object[]{6, "Australia", 65477}), new global::Array<object>(new object[]{7, "Denmark", 59928}), new global::Array<object>(new object[]{8, "Sweden", 56956}), new global::Array<object>(new object[]{9, "Canada", 50436}), new global::Array<object>(new object[]{10, "Netherlands", 50355})}), default(global::haxe.lang.Null<bool>), "average earnings").toString(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromData", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (81) )}));
			}
		}
		
		
		public virtual void testFromObjects() {
			unchecked {
				global::utest.Assert.@equals("\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503                     countries                      \u2503\n\u2523\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252b\n\u2503 code \u2503 latitude \u2503 longitude \u2503 name                 \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 AD   \u2502     42.5 \u2502       1.6 \u2502 Andorra              \u2502\n\u2502 AE   \u2502     23.4 \u2502      53.8 \u2502 United Arab Emirates \u2502\n\u2502 AF   \u2502     33.9 \u2502      67.7 \u2502 Afghanistan          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", global::thx.text.Table.fromObjects(new global::Array<object>(new object[]{new global::haxe.lang.DynamicObject(new int[]{1103409453, 1224700491}, new object[]{"AD", "Andorra"}, new int[]{107530092, 432783663}, new double[]{42.5, 1.6}), new global::haxe.lang.DynamicObject(new int[]{1103409453, 1224700491}, new object[]{"AE", "United Arab Emirates"}, new int[]{107530092, 432783663}, new double[]{23.4, 53.8}), new global::haxe.lang.DynamicObject(new int[]{1103409453, 1224700491}, new object[]{"AF", "Afghanistan"}, new int[]{107530092, 432783663}, new double[]{33.9, 67.7})}), "countries").toString(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromObjects", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (118) )}));
			}
		}
		
		
		public virtual void testPaintBorder() {
			unchecked {
				global::thx.text.table.Canvas canvas = new global::thx.text.table.Canvas(3, 3);
				canvas.paintBorder(global::thx.text.table.CellType.Body, 0, 0, 3, 3);
				global::utest.Assert.@equals("\u250c\u2500\u2510\n\u2502 \u2502\n\u2514\u2500\u2518", canvas.toString(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPaintBorder", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (133) )}));
				canvas = new global::thx.text.table.Canvas(4, 4);
				canvas.paintBorder(global::thx.text.table.CellType.Body, 1, 0, 3, 3);
				global::utest.Assert.@equals(" \u250c\u2500\u2510\n \u2502 \u2502\n \u2514\u2500\u2518\n    ", canvas.toString(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPaintBorder", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (137) )}));
				canvas = new global::thx.text.table.Canvas(4, 4);
				canvas.paintBorder(global::thx.text.table.CellType.Body, 1, 1, 3, 3);
				global::utest.Assert.@equals("    \n \u250c\u2500\u2510\n \u2502 \u2502\n \u2514\u2500\u2518", canvas.toString(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPaintBorder", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (141) )}));
			}
		}
		
		
		public virtual void testRender() {
			unchecked {
				global::thx.text.table.Renderer renderer = new global::thx.text.table.Renderer(((global::haxe.lang.Null<int>) (default(global::haxe.lang.Null<int>)) ));
				this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.BoolCell(true)) ), 0, 1, null);
				this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.StringCell("Franco")) ), 0, 0, null);
				this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.BoolCell(false)) ), 0, 2, null);
				this.table.@set(global::thx.text.table.CellValueImpl.DateTimeCell(global::thx._DateTime.DateTime_Impl_.fromDate(global::Date.fromString("2015-11-19"))), 1, 0, null);
				this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.IntCell(200)) ), 1, 2, null);
				this.table.style.set_type(global::thx.text.table.CellType.Body);
				this.table.getRow(0).style.set_type(global::thx.text.table.CellType.Header);
				global::utest.Assert.@equals("\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Franco     \u2503 \u2713 \u2503  \u2715  \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 11/19/2015 \u2502   \u2502 200 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518", renderer.render(this.table), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRender", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (154) )}));
			}
		}
		
		
		public virtual void oneCell(global::thx.text.table.CellValueImpl @value, int width) {
			this.table = new global::thx.text.Table();
			this.table.style.set_type(global::thx.text.table.CellType.Body);
			this.table.style.set_minWidth(width);
			this.table.@set(@value, 0, 0, null);
		}
		
		
		public virtual void testAlign() {
			unchecked {
				this.oneCell(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.IntCell(0)) ), 8);
				global::utest.Assert.@equals("\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", this.table.toString(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAlign", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (171) )}));
				this.oneCell(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.StringCell("0")) ), 8);
				global::utest.Assert.@equals("\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 0        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", this.table.toString(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAlign", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (176) )}));
				this.oneCell(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.BoolCell(true)) ), 8);
				global::utest.Assert.@equals("\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    \u2713     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", this.table.toString(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAlign", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (181) )}));
				this.oneCell(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.FloatCell(0.5)) ), 8);
				global::utest.Assert.@equals("\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      0.5 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", this.table.toString(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAlign", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (186) )}));
			}
		}
		
		
		public virtual void testAlignOnSymbol() {
			unchecked {
				this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.FloatCell(0.001)) ), 0, 0, null);
				this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.FloatCell(2.0)) ), 0, 1, null);
				this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.IntCell(3333)) ), 0, 2, null);
				this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.FloatCell(12.5)) ), 0, 3, null);
				this.table.style.set_type(global::thx.text.table.CellType.Body);
				global::utest.Assert.@equals("\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 0.001 \u2502 2.0 \u2502 3,333 \u2502 12.5 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518", this.table.toString(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAlignOnSymbol", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (198) )}));
			}
		}
		
		
		public virtual void testAlignOnSymbolVertical() {
			unchecked {
				this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.FloatCell(0.001)) ), 0, 0, null);
				this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.FloatCell(2.0)) ), 1, 0, null);
				this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.IntCell(3333)) ), 2, 0, null);
				this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.FloatCell(12.5)) ), 3, 0, null);
				this.table.style.set_type(global::thx.text.table.CellType.Body);
				global::utest.Assert.@equals("\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502     0.001 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502     2.0   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 3,333     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502    12.5   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", this.table.toString(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAlignOnSymbolVertical", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (210) )}));
			}
		}
		
		
		public virtual void testSequence() {
			unchecked {
				global::thx.text.table.Cell last = this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.BoolCell(true)) ), 0, 1, null);
				global::thx.text.table.Cell first = this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.BoolCell(false)) ), 0, 0, null);
				global::utest.Assert.@equals(1, last.col.index, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSequence", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (225) )}));
				global::utest.Assert.@equals(0, first.col.index, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSequence", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (226) )}));
			}
		}
		
		
		public virtual void testStyle() {
			unchecked {
				global::thx.text.table.Style style = new global::thx.text.table.Style();
				global::utest.Assert.isNull(style.get_formatter(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testStyle", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (231) )}));
				global::thx.text.table.DefaultStyle dstyle = new global::thx.text.table.DefaultStyle();
				global::utest.Assert.notNull(dstyle.get_formatter(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testStyle", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (233) )}));
				global::thx.text.table.CompositeStyle cstyle = new global::thx.text.table.CompositeStyle(((global::Array<object>) (new global::Array<object>(new object[]{style})) ));
				global::utest.Assert.isNull(cstyle.get_formatter(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testStyle", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (235) )}));
				cstyle = new global::thx.text.table.CompositeStyle(((global::Array<object>) (new global::Array<object>(new object[]{style, dstyle})) ));
				global::utest.Assert.notNull(cstyle.get_formatter(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testStyle", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (237) )}));
			}
		}
		
		
		public virtual void testCanvas() {
			unchecked {
				global::thx.text.table.Canvas canvas = new global::thx.text.table.Canvas(3, 2);
				global::utest.Assert.@equals("   \n   ", canvas.toString(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCanvas", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (242) )}));
				canvas.expand(4, 3);
				global::utest.Assert.@equals("    \n    \n    ", canvas.toString(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCanvas", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (244) )}));
			}
		}
		
		
		public virtual void testTableSize() {
			unchecked {
				global::utest.Assert.@equals(0, this.table.get_rows(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTableSize", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (248) )}));
				global::utest.Assert.@equals(0, this.table.get_cols(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTableSize", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (249) )}));
				this.table.getCol(2);
				global::utest.Assert.@equals(0, this.table.get_cols(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTableSize", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (251) )}));
				this.table.ensureCol(3);
				global::utest.Assert.@equals(4, this.table.get_cols(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTableSize", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (253) )}));
				global::utest.Assert.@equals(0, this.table.get_rows(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTableSize", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (254) )}));
				this.table.ensureRow(1);
				global::utest.Assert.@equals(2, this.table.get_rows(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTableSize", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (256) )}));
			}
		}
		
		
		public virtual void testCellResizeTable() {
			unchecked {
				this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.IntCell(1)) ), 3, 2, null);
				global::utest.Assert.@equals(3, this.table.get_cols(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCellResizeTable", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (261) )}));
				global::utest.Assert.@equals(4, this.table.get_rows(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCellResizeTable", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (262) )}));
			}
		}
		
		
		public virtual void testIdentityOfCellsCreatedFromTable() {
			unchecked {
				global::thx.text.table.Cell cell = this.table.@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.IntCell(1)) ), 3, 2, null);
				global::utest.Assert.isTrue(( cell == this.table.@get(3, 2) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromTable", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (267) )}));
				global::utest.Assert.isTrue(( cell == this.table.getRow(3).@get(2) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromTable", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (269) )}));
				global::utest.Assert.isTrue(( cell == this.table.getCol(2).@get(3) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromTable", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (270) )}));
				global::utest.Assert.isTrue(( cell.row == this.table.getRow(3) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromTable", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (272) )}));
				global::utest.Assert.isTrue(( cell.col == this.table.getCol(2) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromTable", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (273) )}));
				global::utest.Assert.isTrue(( cell.table == this.table ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromTable", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (275) )}));
				global::utest.Assert.isTrue(( cell.row.table == this.table ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromTable", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (276) )}));
				global::utest.Assert.isTrue(( cell.col.table == this.table ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromTable", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (277) )}));
			}
		}
		
		
		public virtual void testIdentityOfCellsCreatedFromRow() {
			unchecked {
				global::thx.text.table.Cell cell = this.table.ensureRow(3).@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.IntCell(1)) ), 2, null);
				global::utest.Assert.isTrue(( cell == this.table.@get(3, 2) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromRow", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (283) )}));
				global::utest.Assert.isTrue(( cell == this.table.getRow(3).@get(2) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromRow", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (285) )}));
				global::utest.Assert.isTrue(( cell == this.table.getCol(2).@get(3) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromRow", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (286) )}));
				global::utest.Assert.isTrue(( cell.row == this.table.getRow(3) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromRow", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (288) )}));
				global::utest.Assert.isTrue(( cell.col == this.table.getCol(2) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromRow", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (289) )}));
				global::utest.Assert.isTrue(( cell.table == this.table ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromRow", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (291) )}));
				global::utest.Assert.isTrue(( cell.row.table == this.table ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromRow", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (292) )}));
				global::utest.Assert.isTrue(( cell.col.table == this.table ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromRow", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (293) )}));
			}
		}
		
		
		public virtual void testIdentityOfCellsCreatedFromCol() {
			unchecked {
				global::thx.text.table.Cell cell = this.table.ensureCol(2).@set(((global::thx.text.table.CellValueImpl) (global::thx.text.table.CellValueImpl.IntCell(1)) ), 3, null);
				global::utest.Assert.isTrue(( cell == this.table.@get(3, 2) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromCol", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (299) )}));
				global::utest.Assert.isTrue(( cell == this.table.getRow(3).@get(2) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromCol", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (301) )}));
				global::utest.Assert.isTrue(( cell == this.table.getCol(2).@get(3) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromCol", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (302) )}));
				global::utest.Assert.isTrue(( cell.row == this.table.getRow(3) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromCol", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (304) )}));
				global::utest.Assert.isTrue(( cell.col == this.table.getCol(2) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromCol", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (305) )}));
				global::utest.Assert.isTrue(( cell.table == this.table ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromCol", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (307) )}));
				global::utest.Assert.isTrue(( cell.row.table == this.table ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromCol", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (308) )}));
				global::utest.Assert.isTrue(( cell.col.table == this.table ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIdentityOfCellsCreatedFromCol", "thx.text.TestTable", "TestTable.hx"}, new int[]{1981972957}, new double[]{((double) (309) )}));
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 182695950:
					{
						this.table = ((global::thx.text.Table) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 987476920:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testIdentityOfCellsCreatedFromCol", 987476920)) );
					}
					
					
					case 988222866:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testIdentityOfCellsCreatedFromRow", 988222866)) );
					}
					
					
					case 813808006:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testIdentityOfCellsCreatedFromTable", 813808006)) );
					}
					
					
					case 1157765830:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCellResizeTable", 1157765830)) );
					}
					
					
					case 1831018813:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTableSize", 1831018813)) );
					}
					
					
					case 1362533066:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCanvas", 1362533066)) );
					}
					
					
					case 1293935487:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testStyle", 1293935487)) );
					}
					
					
					case 1542735027:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSequence", 1542735027)) );
					}
					
					
					case 698307744:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testAlignOnSymbolVertical", 698307744)) );
					}
					
					
					case 131580426:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testAlignOnSymbol", 131580426)) );
					}
					
					
					case 1788056851:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testAlign", 1788056851)) );
					}
					
					
					case 1461654312:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "oneCell", 1461654312)) );
					}
					
					
					case 505262408:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testRender", 505262408)) );
					}
					
					
					case 460255224:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testPaintBorder", 460255224)) );
					}
					
					
					case 1868478808:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFromObjects", 1868478808)) );
					}
					
					
					case 322325286:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFromData", 322325286)) );
					}
					
					
					case 1036759920:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSpanning", 1036759920)) );
					}
					
					
					case 571298494:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSpanDown", 571298494)) );
					}
					
					
					case 892584448:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSpanRight", 892584448)) );
					}
					
					
					case 2049945213:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "setup", 2049945213)) );
					}
					
					
					case 182695950:
					{
						return this.table;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 987476920:
					{
						this.testIdentityOfCellsCreatedFromCol();
						break;
					}
					
					
					case 988222866:
					{
						this.testIdentityOfCellsCreatedFromRow();
						break;
					}
					
					
					case 813808006:
					{
						this.testIdentityOfCellsCreatedFromTable();
						break;
					}
					
					
					case 1157765830:
					{
						this.testCellResizeTable();
						break;
					}
					
					
					case 1831018813:
					{
						this.testTableSize();
						break;
					}
					
					
					case 1362533066:
					{
						this.testCanvas();
						break;
					}
					
					
					case 1293935487:
					{
						this.testStyle();
						break;
					}
					
					
					case 1542735027:
					{
						this.testSequence();
						break;
					}
					
					
					case 698307744:
					{
						this.testAlignOnSymbolVertical();
						break;
					}
					
					
					case 131580426:
					{
						this.testAlignOnSymbol();
						break;
					}
					
					
					case 1788056851:
					{
						this.testAlign();
						break;
					}
					
					
					case 1461654312:
					{
						this.oneCell(((global::thx.text.table.CellValueImpl) (dynargs[0]) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ));
						break;
					}
					
					
					case 505262408:
					{
						this.testRender();
						break;
					}
					
					
					case 460255224:
					{
						this.testPaintBorder();
						break;
					}
					
					
					case 1868478808:
					{
						this.testFromObjects();
						break;
					}
					
					
					case 322325286:
					{
						this.testFromData();
						break;
					}
					
					
					case 1036759920:
					{
						this.testSpanning();
						break;
					}
					
					
					case 571298494:
					{
						this.testSpanDown();
						break;
					}
					
					
					case 892584448:
					{
						this.testSpanRight();
						break;
					}
					
					
					case 2049945213:
					{
						this.setup();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("table");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}


