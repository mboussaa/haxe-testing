// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.text.table._CellValue {
	public sealed class CellValue_Impl_ {
		
		public static global::thx.text.table.CellValueImpl fromInt(int v) {
			return global::thx.text.table.CellValueImpl.IntCell(v);
		}
		
		
		public static global::thx.text.table.CellValueImpl fromFloat(double v) {
			return global::thx.text.table.CellValueImpl.FloatCell(v);
		}
		
		
		public static global::thx.text.table.CellValueImpl fromString(string v) {
			return global::thx.text.table.CellValueImpl.StringCell(v);
		}
		
		
		public static global::thx.text.table.CellValueImpl fromBool(bool v) {
			return global::thx.text.table.CellValueImpl.BoolCell(v);
		}
		
		
		public static global::thx.text.table.CellValueImpl fromDate(global::Date v) {
			return global::thx.text.table.CellValueImpl.DateTimeCell(global::thx._DateTime.DateTime_Impl_.fromDate(v));
		}
		
		
		public static global::thx.text.table.CellValueImpl fromDateTime(global::Array<long> v) {
			return global::thx.text.table.CellValueImpl.DateTimeCell(v);
		}
		
		
		public static global::thx.text.table.CellValueImpl fromTime(long v) {
			return global::thx.text.table.CellValueImpl.TimeCell(v);
		}
		
		
		public static global::thx.text.table.CellValueImpl fromDynamic(object @value) {
			if (( null == @value )) {
				return global::thx.text.table.CellValueImpl.Empty;
			}
			
			switch (global::thx.Types.toString(global::Type.@typeof(((object) (@value) )))) {
				case "Bool":
				{
					return global::thx.text.table.CellValueImpl.BoolCell(global::haxe.lang.Runtime.toBool(@value));
				}
				
				
				case "Date":
				{
					return global::thx.text.table.CellValueImpl.DateTimeCell(global::thx._DateTime.DateTime_Impl_.fromDate(((global::Date) (@value) )));
				}
				
				
				case "Float":
				{
					return global::thx.text.table.CellValueImpl.FloatCell(((double) (global::haxe.lang.Runtime.toDouble(@value)) ));
				}
				
				
				case "Int":
				{
					return global::thx.text.table.CellValueImpl.IntCell(((int) (global::haxe.lang.Runtime.toInt(@value)) ));
				}
				
				
				case "String":
				{
					return global::thx.text.table._CellValue.CellValue_Impl_.parseString(global::haxe.lang.Runtime.toString(@value));
				}
				
				
				default:
				{
					return global::thx.text.table.CellValueImpl.StringCell(global::Std.@string(@value));
				}
				
			}
			
		}
		
		
		public static global::thx.text.table.CellValueImpl parseString(string @value) {
			if (string.Equals(null, @value)) {
				return global::thx.text.table.CellValueImpl.Empty;
			}
			
			string _g = @value.ToLowerInvariant();
			switch (_g) {
				case "on":
				case "t":
				case "true":
				case "\u2713":
				case "\u2714":
				{
					return global::thx.text.table.CellValueImpl.BoolCell(true);
				}
				
				
				case "f":
				case "false":
				case "off":
				case "\u2715":
				case "\u2717":
				{
					return global::thx.text.table.CellValueImpl.BoolCell(false);
				}
				
				
				default:
				{
					if (global::thx.Ints.canParse(_g)) {
						return global::thx.text.table.CellValueImpl.IntCell((global::thx.Ints.parse(_g, default(global::haxe.lang.Null<int>))).@value);
					}
					else if (global::thx.Floats.canParse(_g)) {
						return global::thx.text.table.CellValueImpl.FloatCell(((double) ((global::thx.Ints.parse(_g, default(global::haxe.lang.Null<int>))).@value) ));
					}
					else {
						try {
							return global::thx.text.table.CellValueImpl.DateTimeCell(global::thx._DateTime.DateTime_Impl_.fromString(@value));
						}
						catch (global::System.Exception __temp_catchallException3){
							global::haxe.lang.Exceptions.exception = __temp_catchallException3;
							object __temp_catchall4 = __temp_catchallException3;
							if (( __temp_catchall4 is global::haxe.lang.HaxeException )) {
								__temp_catchall4 = ((global::haxe.lang.HaxeException) (__temp_catchallException3) ).obj;
							}
							
							{
								object _ = __temp_catchall4;
								try {
									return global::thx.text.table.CellValueImpl.TimeCell(global::thx._Time.Time_Impl_.fromString(@value));
								}
								catch (global::System.Exception __temp_catchallException1){
									global::haxe.lang.Exceptions.exception = __temp_catchallException1;
									object __temp_catchall2 = __temp_catchallException1;
									if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
										__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
									}
									
									{
										object _1 = __temp_catchall2;
										return global::thx.text.table.CellValueImpl.StringCell(@value);
									}
									
								}
								
								
							}
							
						}
						
						
					}
					
				}
				
			}
			
		}
		
		
		public static global::thx.text.table.CellValueImpl empty() {
			return global::thx.text.table.CellValueImpl.Empty;
		}
		
		
		public static global::thx.text.table.CellValueImpl na() {
			return global::thx.text.table.CellValueImpl.NA;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.text.table {
	public class CellValueImpl : global::haxe.lang.ParamEnum {
		
		public CellValueImpl(int index, object[] @params) : base(index, @params) {
		}
		
		
		public static readonly string[] __hx_constructs = new string[]{"IntCell", "FloatCell", "StringCell", "BoolCell", "DateTimeCell", "TimeCell", "Empty", "NA"};
		
		public static global::thx.text.table.CellValueImpl IntCell(int v) {
			return new global::thx.text.table.CellValueImpl(0, new object[]{v});
		}
		
		
		public static global::thx.text.table.CellValueImpl FloatCell(double v) {
			unchecked {
				return new global::thx.text.table.CellValueImpl(1, new object[]{v});
			}
		}
		
		
		public static global::thx.text.table.CellValueImpl StringCell(string v) {
			unchecked {
				return new global::thx.text.table.CellValueImpl(2, new object[]{v});
			}
		}
		
		
		public static global::thx.text.table.CellValueImpl BoolCell(bool v) {
			unchecked {
				return new global::thx.text.table.CellValueImpl(3, new object[]{v});
			}
		}
		
		
		public static global::thx.text.table.CellValueImpl DateTimeCell(global::Array<long> v) {
			unchecked {
				return new global::thx.text.table.CellValueImpl(4, new object[]{v});
			}
		}
		
		
		public static global::thx.text.table.CellValueImpl TimeCell(long v) {
			unchecked {
				return new global::thx.text.table.CellValueImpl(5, new object[]{v});
			}
		}
		
		
		public static readonly global::thx.text.table.CellValueImpl Empty = new global::thx.text.table.CellValueImpl(6, null);
		
		public static readonly global::thx.text.table.CellValueImpl NA = new global::thx.text.table.CellValueImpl(7, null);
		
		public override string getTag() {
			return global::thx.text.table.CellValueImpl.__hx_constructs[this.index];
		}
		
		
	}
}


