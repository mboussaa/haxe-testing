// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.format {
	public class TimeFormat : global::haxe.lang.HxObject {
		
		public TimeFormat(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TimeFormat() {
			global::thx.format.TimeFormat.__hx_ctor_thx_format_TimeFormat(this);
		}
		
		
		public static void __hx_ctor_thx_format_TimeFormat(global::thx.format.TimeFormat __temp_me168) {
		}
		
		
		public static string customFormat(long t, string pattern, global::thx.culture.Culture culture) {
			unchecked {
				global::thx.culture.Culture _0 = culture;
				global::thx.culture.Culture t1 = ( (( null == _0 )) ? (null) : (_0) );
				if (( t1 != null )) {
					culture = t1;
				}
				else {
					culture = global::thx.format.Format.get_defaultCulture();
				}
				
				global::EReg ereg = new global::EReg("(d|H){1,8}|(f|F){1,7}|(h|m|s){1,2}|[:.]|\'[^\']*\'|\"[^\"]*\"", "");
				bool escape = false;
				global::Array<object> buf = new global::Array<object>(new object[]{});
				while (( pattern.Length > 0 )) {
					if (escape) {
						escape = false;
						buf.push(global::haxe.lang.StringExt.substring(pattern, 0, new global::haxe.lang.Null<int>(1, true)));
						pattern = global::haxe.lang.StringExt.substring(pattern, 1, default(global::haxe.lang.Null<int>));
					}
					else if (ereg.match(pattern)) {
						string left = ereg.matchedLeft();
						if (string.Equals(global::haxe.lang.StringExt.substring(left, -1, default(global::haxe.lang.Null<int>)), "\\")) {
							escape = true;
							pattern = global::haxe.lang.StringExt.substring(pattern, left.Length, default(global::haxe.lang.Null<int>));
							buf.push(global::haxe.lang.StringExt.substring(left, 0, new global::haxe.lang.Null<int>(( left.Length - 1 ), true)));
							continue;
						}
						
						buf.push(left);
						string term = ereg.matched(0);
						string right = ereg.matchedRight();
						pattern = right;
						if (( string.Equals(term, ".") && string.Equals(global::haxe.lang.StringExt.substring(right, 0, new global::haxe.lang.Null<int>(1, true)).ToLowerInvariant(), "f") )) {
							long x = ((long) (( ((long) (t) ) % ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
							if (( ((bool) (( ((long) (x) ) < -2147483648 )) ) || ((bool) (( ((long) (x) ) > 2147483647 )) ) )) {
								throw global::haxe.lang.HaxeException.wrap("Overflow");
							}
							
							if (( ((long) (((int) (((long) (x) )) )) ) == ((long) (global::thx.Int64s.zero) ) )) {
								ereg.match(right);
								pattern = ereg.matchedRight();
								continue;
							}
							
						}
						
						buf.push(global::thx.format.TimeFormat.formatTerm(t, term, culture));
					}
					else {
						buf.push(pattern);
						pattern = "";
					}
					
				}
				
				if (escape) {
					buf.push("\\");
				}
				
				return buf.@join("");
			}
		}
		
		
		public static string format(long t, string pattern, global::thx.culture.Culture culture) {
			switch (pattern) {
				case "G":
				case "T":
				{
					return global::thx.format.TimeFormat.timeLong(t, culture);
				}
				
				
				case "c":
				{
					return global::thx.format.TimeFormat.invariantTimeLong(t);
				}
				
				
				case "g":
				case "t":
				{
					return global::thx.format.TimeFormat.timeShort(t, culture);
				}
				
				
				default:
				{
					return global::thx.format.TimeFormat.customFormat(t, pattern, culture);
				}
				
			}
			
		}
		
		
		public static string formatTerm(long t, string pattern, global::thx.culture.Culture culture) {
			unchecked {
				switch (pattern) {
					case ".":
					{
						return culture.number.separatorDecimalNumber;
					}
					
					
					case ":":
					{
						return global::thx.format.DateFormat.dateTime(culture).separatorTime;
					}
					
					
					case "F":
					{
						long x = ((long) (( ((long) (t) ) % ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
						if (( ((bool) (( ((long) (x) ) < -2147483648 )) ) || ((bool) (( ((long) (x) ) > 2147483647 )) ) )) {
							throw global::haxe.lang.HaxeException.wrap("Overflow");
						}
						
						return global::thx.format.DateFormat.getDecimalsUpTo(((int) (((long) (x) )) ), 1);
					}
					
					
					case "FF":
					{
						long x1 = ((long) (( ((long) (t) ) % ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
						if (( ((bool) (( ((long) (x1) ) < -2147483648 )) ) || ((bool) (( ((long) (x1) ) > 2147483647 )) ) )) {
							throw global::haxe.lang.HaxeException.wrap("Overflow");
						}
						
						return global::thx.format.DateFormat.getDecimalsUpTo(((int) (((long) (x1) )) ), 2);
					}
					
					
					case "FFF":
					{
						long x2 = ((long) (( ((long) (t) ) % ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
						if (( ((bool) (( ((long) (x2) ) < -2147483648 )) ) || ((bool) (( ((long) (x2) ) > 2147483647 )) ) )) {
							throw global::haxe.lang.HaxeException.wrap("Overflow");
						}
						
						return global::thx.format.DateFormat.getDecimalsUpTo(((int) (((long) (x2) )) ), 3);
					}
					
					
					case "FFFF":
					{
						long x3 = ((long) (( ((long) (t) ) % ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
						if (( ((bool) (( ((long) (x3) ) < -2147483648 )) ) || ((bool) (( ((long) (x3) ) > 2147483647 )) ) )) {
							throw global::haxe.lang.HaxeException.wrap("Overflow");
						}
						
						return global::thx.format.DateFormat.getDecimalsUpTo(((int) (((long) (x3) )) ), 4);
					}
					
					
					case "FFFFF":
					{
						long x4 = ((long) (( ((long) (t) ) % ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
						if (( ((bool) (( ((long) (x4) ) < -2147483648 )) ) || ((bool) (( ((long) (x4) ) > 2147483647 )) ) )) {
							throw global::haxe.lang.HaxeException.wrap("Overflow");
						}
						
						return global::thx.format.DateFormat.getDecimalsUpTo(((int) (((long) (x4) )) ), 5);
					}
					
					
					case "FFFFFF":
					{
						long x5 = ((long) (( ((long) (t) ) % ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
						if (( ((bool) (( ((long) (x5) ) < -2147483648 )) ) || ((bool) (( ((long) (x5) ) > 2147483647 )) ) )) {
							throw global::haxe.lang.HaxeException.wrap("Overflow");
						}
						
						return global::thx.format.DateFormat.getDecimalsUpTo(((int) (((long) (x5) )) ), 6);
					}
					
					
					case "FFFFFFF":
					{
						long x6 = ((long) (( ((long) (t) ) % ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
						if (( ((bool) (( ((long) (x6) ) < -2147483648 )) ) || ((bool) (( ((long) (x6) ) > 2147483647 )) ) )) {
							throw global::haxe.lang.HaxeException.wrap("Overflow");
						}
						
						return global::thx.format.DateFormat.getDecimalsString(((int) (((long) (x6) )) ));
					}
					
					
					case "H":
					{
						return global::haxe.lang.Runtime.concat("", (global::haxe.lang.Runtime.concat("", global::Std.@string(((long) (( ((long) (t) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) )))));
					}
					
					
					case "HH":
					{
						return global::thx.Strings.lpad(global::haxe.lang.Runtime.concat("", (global::haxe.lang.Runtime.concat("", global::Std.@string(((long) (( ((long) (t) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ))))), "0", 2);
					}
					
					
					case "HHH":
					{
						return global::thx.Strings.lpad(global::haxe.lang.Runtime.concat("", (global::haxe.lang.Runtime.concat("", global::Std.@string(((long) (( ((long) (t) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ))))), "0", 3);
					}
					
					
					case "HHHH":
					{
						return global::thx.Strings.lpad(global::haxe.lang.Runtime.concat("", (global::haxe.lang.Runtime.concat("", global::Std.@string(((long) (( ((long) (t) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ))))), "0", 4);
					}
					
					
					case "HHHHH":
					{
						return global::thx.Strings.lpad(global::haxe.lang.Runtime.concat("", (global::haxe.lang.Runtime.concat("", global::Std.@string(((long) (( ((long) (t) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ))))), "0", 5);
					}
					
					
					case "HHHHHH":
					{
						return global::thx.Strings.lpad(global::haxe.lang.Runtime.concat("", (global::haxe.lang.Runtime.concat("", global::Std.@string(((long) (( ((long) (t) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ))))), "0", 6);
					}
					
					
					case "HHHHHHH":
					{
						return global::thx.Strings.lpad(global::haxe.lang.Runtime.concat("", (global::haxe.lang.Runtime.concat("", global::Std.@string(((long) (( ((long) (t) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ))))), "0", 7);
					}
					
					
					case "HHHHHHHH":
					{
						return global::thx.Strings.lpad(global::haxe.lang.Runtime.concat("", (global::haxe.lang.Runtime.concat("", global::Std.@string(((long) (( ((long) (t) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ))))), "0", 8);
					}
					
					
					case "d":
					{
						long x7 = ((long) (( ((long) (t) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
						if (( ((bool) (( ((long) (x7) ) < -2147483648 )) ) || ((bool) (( ((long) (x7) ) > 2147483647 )) ) )) {
							throw global::haxe.lang.HaxeException.wrap("Overflow");
						}
						
						return global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(((int) (((long) (x7) )) )));
					}
					
					
					case "dd":
					{
						long x8 = ((long) (( ((long) (t) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
						if (( ((bool) (( ((long) (x8) ) < -2147483648 )) ) || ((bool) (( ((long) (x8) ) > 2147483647 )) ) )) {
							throw global::haxe.lang.HaxeException.wrap("Overflow");
						}
						
						return global::thx.Strings.lpad(global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(((int) (((long) (x8) )) ))), "0", 2);
					}
					
					
					case "ddd":
					{
						long x9 = ((long) (( ((long) (t) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
						if (( ((bool) (( ((long) (x9) ) < -2147483648 )) ) || ((bool) (( ((long) (x9) ) > 2147483647 )) ) )) {
							throw global::haxe.lang.HaxeException.wrap("Overflow");
						}
						
						return global::thx.Strings.lpad(global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(((int) (((long) (x9) )) ))), "0", 3);
					}
					
					
					case "dddd":
					{
						long x10 = ((long) (( ((long) (t) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
						if (( ((bool) (( ((long) (x10) ) < -2147483648 )) ) || ((bool) (( ((long) (x10) ) > 2147483647 )) ) )) {
							throw global::haxe.lang.HaxeException.wrap("Overflow");
						}
						
						return global::thx.Strings.lpad(global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(((int) (((long) (x10) )) ))), "0", 4);
					}
					
					
					case "ddddd":
					{
						long x11 = ((long) (( ((long) (t) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
						if (( ((bool) (( ((long) (x11) ) < -2147483648 )) ) || ((bool) (( ((long) (x11) ) > 2147483647 )) ) )) {
							throw global::haxe.lang.HaxeException.wrap("Overflow");
						}
						
						return global::thx.Strings.lpad(global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(((int) (((long) (x11) )) ))), "0", 5);
					}
					
					
					case "dddddd":
					{
						long x12 = ((long) (( ((long) (t) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
						if (( ((bool) (( ((long) (x12) ) < -2147483648 )) ) || ((bool) (( ((long) (x12) ) > 2147483647 )) ) )) {
							throw global::haxe.lang.HaxeException.wrap("Overflow");
						}
						
						return global::thx.Strings.lpad(global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(((int) (((long) (x12) )) ))), "0", 6);
					}
					
					
					case "ddddddd":
					{
						long x13 = ((long) (( ((long) (t) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
						if (( ((bool) (( ((long) (x13) ) < -2147483648 )) ) || ((bool) (( ((long) (x13) ) > 2147483647 )) ) )) {
							throw global::haxe.lang.HaxeException.wrap("Overflow");
						}
						
						return global::thx.Strings.lpad(global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(((int) (((long) (x13) )) ))), "0", 7);
					}
					
					
					case "dddddddd":
					{
						long x14 = ((long) (( ((long) (t) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
						if (( ((bool) (( ((long) (x14) ) < -2147483648 )) ) || ((bool) (( ((long) (x14) ) > 2147483647 )) ) )) {
							throw global::haxe.lang.HaxeException.wrap("Overflow");
						}
						
						return global::thx.Strings.lpad(global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(((int) (((long) (x14) )) ))), "0", 8);
					}
					
					
					case "f":
					{
						long x15 = ((long) (( ((long) (t) ) % ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
						if (( ((bool) (( ((long) (x15) ) < -2147483648 )) ) || ((bool) (( ((long) (x15) ) > 2147483647 )) ) )) {
							throw global::haxe.lang.HaxeException.wrap("Overflow");
						}
						
						return global::thx.format.DateFormat.getDecimalsPaddedUpTo(((int) (((long) (x15) )) ), 1);
					}
					
					
					case "ff":
					{
						long x16 = ((long) (( ((long) (t) ) % ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
						if (( ((bool) (( ((long) (x16) ) < -2147483648 )) ) || ((bool) (( ((long) (x16) ) > 2147483647 )) ) )) {
							throw global::haxe.lang.HaxeException.wrap("Overflow");
						}
						
						return global::thx.format.DateFormat.getDecimalsPaddedUpTo(((int) (((long) (x16) )) ), 2);
					}
					
					
					case "fff":
					{
						long x17 = ((long) (( ((long) (t) ) % ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
						if (( ((bool) (( ((long) (x17) ) < -2147483648 )) ) || ((bool) (( ((long) (x17) ) > 2147483647 )) ) )) {
							throw global::haxe.lang.HaxeException.wrap("Overflow");
						}
						
						return global::thx.format.DateFormat.getDecimalsPaddedUpTo(((int) (((long) (x17) )) ), 3);
					}
					
					
					case "ffff":
					{
						long x18 = ((long) (( ((long) (t) ) % ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
						if (( ((bool) (( ((long) (x18) ) < -2147483648 )) ) || ((bool) (( ((long) (x18) ) > 2147483647 )) ) )) {
							throw global::haxe.lang.HaxeException.wrap("Overflow");
						}
						
						return global::thx.format.DateFormat.getDecimalsPaddedUpTo(((int) (((long) (x18) )) ), 4);
					}
					
					
					case "fffff":
					{
						long x19 = ((long) (( ((long) (t) ) % ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
						if (( ((bool) (( ((long) (x19) ) < -2147483648 )) ) || ((bool) (( ((long) (x19) ) > 2147483647 )) ) )) {
							throw global::haxe.lang.HaxeException.wrap("Overflow");
						}
						
						return global::thx.format.DateFormat.getDecimalsPaddedUpTo(((int) (((long) (x19) )) ), 5);
					}
					
					
					case "ffffff":
					{
						long x20 = ((long) (( ((long) (t) ) % ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
						if (( ((bool) (( ((long) (x20) ) < -2147483648 )) ) || ((bool) (( ((long) (x20) ) > 2147483647 )) ) )) {
							throw global::haxe.lang.HaxeException.wrap("Overflow");
						}
						
						return global::thx.format.DateFormat.getDecimalsPaddedUpTo(((int) (((long) (x20) )) ), 6);
					}
					
					
					case "fffffff":
					{
						long x21 = ((long) (( ((long) (t) ) % ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
						if (( ((bool) (( ((long) (x21) ) < -2147483648 )) ) || ((bool) (( ((long) (x21) ) > 2147483647 )) ) )) {
							throw global::haxe.lang.HaxeException.wrap("Overflow");
						}
						
						return global::thx.format.DateFormat.getDecimalsPadded(((int) (((long) (x21) )) ));
					}
					
					
					case "h":
					{
						long x22 = ((long) (( ((long) (( ((long) (t) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ) % ((long) (24) ) )) );
						if (( ((bool) (( ((long) (x22) ) < -2147483648 )) ) || ((bool) (( ((long) (x22) ) > 2147483647 )) ) )) {
							throw global::haxe.lang.HaxeException.wrap("Overflow");
						}
						
						return global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(((int) (((long) (x22) )) )));
					}
					
					
					case "hh":
					{
						long x23 = ((long) (( ((long) (( ((long) (t) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ) % ((long) (24) ) )) );
						if (( ((bool) (( ((long) (x23) ) < -2147483648 )) ) || ((bool) (( ((long) (x23) ) > 2147483647 )) ) )) {
							throw global::haxe.lang.HaxeException.wrap("Overflow");
						}
						
						return global::thx.Ints.lpad(((int) (((long) (x23) )) ), "0", 2);
					}
					
					
					case "m":
					{
						long x24 = ((long) (( ((long) (( ((long) (t) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) ) % ((long) (60) ) )) );
						if (( ((bool) (( ((long) (x24) ) < -2147483648 )) ) || ((bool) (( ((long) (x24) ) > 2147483647 )) ) )) {
							throw global::haxe.lang.HaxeException.wrap("Overflow");
						}
						
						return global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(((int) (((long) (x24) )) )));
					}
					
					
					case "mm":
					{
						long x25 = ((long) (( ((long) (( ((long) (t) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) ) % ((long) (60) ) )) );
						if (( ((bool) (( ((long) (x25) ) < -2147483648 )) ) || ((bool) (( ((long) (x25) ) > 2147483647 )) ) )) {
							throw global::haxe.lang.HaxeException.wrap("Overflow");
						}
						
						return global::thx.Strings.lpad(global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(((int) (((long) (x25) )) ))), "0", 2);
					}
					
					
					case "s":
					{
						long x26 = ((long) (( ((long) (( ((long) (t) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) ) % ((long) (60) ) )) );
						if (( ((bool) (( ((long) (x26) ) < -2147483648 )) ) || ((bool) (( ((long) (x26) ) > 2147483647 )) ) )) {
							throw global::haxe.lang.HaxeException.wrap("Overflow");
						}
						
						return global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(((int) (((long) (x26) )) )));
					}
					
					
					case "ss":
					{
						long x27 = ((long) (( ((long) (( ((long) (t) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) ) % ((long) (60) ) )) );
						if (( ((bool) (( ((long) (x27) ) < -2147483648 )) ) || ((bool) (( ((long) (x27) ) > 2147483647 )) ) )) {
							throw global::haxe.lang.HaxeException.wrap("Overflow");
						}
						
						return global::thx.Strings.lpad(global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(((int) (((long) (x27) )) ))), "0", 2);
					}
					
					
					default:
					{
						if (( ( (  ! (string.Equals(pattern, null))  && ( pattern.Length > 1 ) ) && (( string.Equals(global::haxe.lang.StringExt.substring(pattern, 0, new global::haxe.lang.Null<int>(1, true)), "\'") && string.Equals(global::haxe.lang.StringExt.substring(pattern, ( pattern.Length - 1 ), default(global::haxe.lang.Null<int>)), "\'") )) ) || ( string.Equals(global::haxe.lang.StringExt.substring(pattern, 0, new global::haxe.lang.Null<int>(1, true)), "\"") && string.Equals(global::haxe.lang.StringExt.substring(pattern, ( pattern.Length - 1 ), default(global::haxe.lang.Null<int>)), "\"") ) )) {
							return global::haxe.lang.StringExt.substring(pattern, 1, new global::haxe.lang.Null<int>(( pattern.Length - 1 ), true));
						}
						else {
							return pattern;
						}
						
					}
					
				}
				
			}
		}
		
		
		public static string timeLong(long time, global::thx.culture.Culture culture) {
			unchecked {
				long abs = global::thx._Time.Time_Impl_.abs(time);
				global::thx.culture.DateFormatInfo dt = global::thx.format.DateFormat.dateTime(culture);
				global::thx.culture.NumberFormatInfo n = (( (( null == culture )) ? (global::thx.format.Format.get_defaultCulture()) : (culture) )).number;
				long x = ((long) (( ((long) (abs) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
				if (( ((bool) (( ((long) (x) ) < -2147483648 )) ) || ((bool) (( ((long) (x) ) > 2147483647 )) ) )) {
					throw global::haxe.lang.HaxeException.wrap("Overflow");
				}
				
				int days = ((int) (((long) (x) )) );
				long x1 = ((long) (( ((long) (( ((long) (abs) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ) % ((long) (24) ) )) );
				if (( ((bool) (( ((long) (x1) ) < -2147483648 )) ) || ((bool) (( ((long) (x1) ) > 2147483647 )) ) )) {
					throw global::haxe.lang.HaxeException.wrap("Overflow");
				}
				
				int hours = ((int) (((long) (x1) )) );
				long x2 = ((long) (( ((long) (( ((long) (abs) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) ) % ((long) (60) ) )) );
				if (( ((bool) (( ((long) (x2) ) < -2147483648 )) ) || ((bool) (( ((long) (x2) ) > 2147483647 )) ) )) {
					throw global::haxe.lang.HaxeException.wrap("Overflow");
				}
				
				int minutes = ((int) (((long) (x2) )) );
				long x3 = ((long) (( ((long) (( ((long) (abs) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) ) % ((long) (60) ) )) );
				if (( ((bool) (( ((long) (x3) ) < -2147483648 )) ) || ((bool) (( ((long) (x3) ) > 2147483647 )) ) )) {
					throw global::haxe.lang.HaxeException.wrap("Overflow");
				}
				
				int seconds = ((int) (((long) (x3) )) );
				string buf = "";
				if (((bool) (( ((long) (time) ) < ((long) (0) ) )) )) {
					buf = global::haxe.lang.Runtime.concat("", n.signNegative);
				}
				
				if (( days != 0 )) {
					buf = global::haxe.lang.Runtime.concat(buf, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.toString(days), n.separatorDecimalNumber));
				}
				
				buf = global::haxe.lang.Runtime.concat(buf, global::thx.Ints.lpad(hours, "0", 2));
				buf = global::haxe.lang.Runtime.concat(buf, dt.separatorTime);
				buf = global::haxe.lang.Runtime.concat(buf, global::thx.Ints.lpad(minutes, "0", 2));
				buf = global::haxe.lang.Runtime.concat(buf, dt.separatorTime);
				buf = global::haxe.lang.Runtime.concat(buf, global::thx.Ints.lpad(seconds, "0", 2));
				long x4 = ((long) (( ((long) (abs) ) % ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
				if (( ((bool) (( ((long) (x4) ) < -2147483648 )) ) || ((bool) (( ((long) (x4) ) > 2147483647 )) ) )) {
					throw global::haxe.lang.HaxeException.wrap("Overflow");
				}
				
				int t = ((int) (((long) (x4) )) );
				if (( t != 0 )) {
					buf = global::haxe.lang.Runtime.concat(buf, global::haxe.lang.Runtime.concat(n.separatorDecimalNumber, global::thx.format.DateFormat.getDecimalsPadded(t)));
				}
				
				return buf;
			}
		}
		
		
		public static string timeShort(long time, global::thx.culture.Culture culture) {
			unchecked {
				long abs = global::thx._Time.Time_Impl_.abs(time);
				global::thx.culture.DateFormatInfo dt = global::thx.format.DateFormat.dateTime(culture);
				global::thx.culture.NumberFormatInfo n = (( (( null == culture )) ? (global::thx.format.Format.get_defaultCulture()) : (culture) )).number;
				long x = ((long) (( ((long) (abs) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
				if (( ((bool) (( ((long) (x) ) < -2147483648 )) ) || ((bool) (( ((long) (x) ) > 2147483647 )) ) )) {
					throw global::haxe.lang.HaxeException.wrap("Overflow");
				}
				
				int days = ((int) (((long) (x) )) );
				long x1 = ((long) (( ((long) (( ((long) (abs) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ) % ((long) (24) ) )) );
				if (( ((bool) (( ((long) (x1) ) < -2147483648 )) ) || ((bool) (( ((long) (x1) ) > 2147483647 )) ) )) {
					throw global::haxe.lang.HaxeException.wrap("Overflow");
				}
				
				int hours = ((int) (((long) (x1) )) );
				long x2 = ((long) (( ((long) (( ((long) (abs) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) ) % ((long) (60) ) )) );
				if (( ((bool) (( ((long) (x2) ) < -2147483648 )) ) || ((bool) (( ((long) (x2) ) > 2147483647 )) ) )) {
					throw global::haxe.lang.HaxeException.wrap("Overflow");
				}
				
				int minutes = ((int) (((long) (x2) )) );
				long x3 = ((long) (( ((long) (( ((long) (abs) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) ) % ((long) (60) ) )) );
				if (( ((bool) (( ((long) (x3) ) < -2147483648 )) ) || ((bool) (( ((long) (x3) ) > 2147483647 )) ) )) {
					throw global::haxe.lang.HaxeException.wrap("Overflow");
				}
				
				int seconds = ((int) (((long) (x3) )) );
				string buf = "";
				if (((bool) (( ((long) (time) ) < ((long) (0) ) )) )) {
					buf = global::haxe.lang.Runtime.concat("", n.signNegative);
				}
				
				if (( days != 0 )) {
					buf = global::haxe.lang.Runtime.concat(buf, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.toString(days), dt.separatorTime));
				}
				
				buf = global::haxe.lang.Runtime.concat(buf, global::thx.Ints.lpad(hours, "0", 2));
				buf = global::haxe.lang.Runtime.concat(buf, dt.separatorTime);
				buf = global::haxe.lang.Runtime.concat(buf, global::thx.Ints.lpad(minutes, "0", 2));
				buf = global::haxe.lang.Runtime.concat(buf, dt.separatorTime);
				buf = global::haxe.lang.Runtime.concat(buf, global::thx.Ints.lpad(seconds, "0", 2));
				long x4 = ((long) (( ((long) (abs) ) % ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
				if (( ((bool) (( ((long) (x4) ) < -2147483648 )) ) || ((bool) (( ((long) (x4) ) > 2147483647 )) ) )) {
					throw global::haxe.lang.HaxeException.wrap("Overflow");
				}
				
				int t = ((int) (((long) (x4) )) );
				if (( t != 0 )) {
					buf = global::haxe.lang.Runtime.concat(buf, global::haxe.lang.Runtime.concat(n.separatorDecimalNumber, global::thx.format.DateFormat.getDecimalsString(t)));
				}
				
				return buf;
			}
		}
		
		
		public static string invariantTimeLong(long time) {
			return global::thx.format.TimeFormat.timeLong(time, global::thx.culture.Culture.invariant);
		}
		
		
		public static string offsetHoursShort(long offset, global::thx.culture.Culture culture) {
			global::thx.culture.NumberFormatInfo n = (( (( null == culture )) ? (global::thx.format.Format.get_defaultCulture()) : (culture) )).number;
			return global::haxe.lang.Runtime.concat((( (((bool) (( ((long) (offset) ) < ((long) (0) ) )) )) ? (n.signNegative) : (n.signPositive) )), (global::haxe.lang.Runtime.concat("", global::Std.@string(((long) (( ((long) (global::thx._Time.Time_Impl_.abs(offset)) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) )))));
		}
		
		
		public static string offsetHoursLong(long offset, global::thx.culture.Culture culture) {
			unchecked {
				global::thx.culture.NumberFormatInfo n = (( (( null == culture )) ? (global::thx.format.Format.get_defaultCulture()) : (culture) )).number;
				return global::haxe.lang.Runtime.concat((( (((bool) (( ((long) (offset) ) < ((long) (0) ) )) )) ? (n.signNegative) : (n.signPositive) )), global::thx.Strings.lpad(global::haxe.lang.Runtime.concat("", global::Std.@string(((long) (( ((long) (global::thx._Time.Time_Impl_.abs(offset)) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ))), "0", 2));
			}
		}
		
		
		public static string offsetLong(long offset, global::thx.culture.Culture culture) {
			unchecked {
				global::thx.culture.DateFormatInfo dt = global::thx.format.DateFormat.dateTime(culture);
				global::thx.culture.NumberFormatInfo n = (( (( null == culture )) ? (global::thx.format.Format.get_defaultCulture()) : (culture) )).number;
				long abs = global::thx._Time.Time_Impl_.abs(offset);
				string tmp = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat((( (((bool) (( ((long) (offset) ) < ((long) (0) ) )) )) ? (n.signNegative) : (n.signPositive) )), global::thx.Strings.lpad(global::haxe.lang.Runtime.concat("", global::Std.@string(((long) (( ((long) (abs) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ))), "0", 2)), dt.separatorTime);
				long x = ((long) (( ((long) (( ((long) (abs) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) ) % ((long) (60) ) )) );
				if (( ((bool) (( ((long) (x) ) < -2147483648 )) ) || ((bool) (( ((long) (x) ) > 2147483647 )) ) )) {
					throw global::haxe.lang.HaxeException.wrap("Overflow");
				}
				
				return global::haxe.lang.Runtime.concat(tmp, global::thx.Ints.lpad(((int) (((long) (x) )) ), "0", 2));
			}
		}
		
		
		public static string iso8601OffsetShort(long offset) {
			unchecked {
				long abs = global::thx._Time.Time_Impl_.abs(offset);
				string tmp = global::haxe.lang.Runtime.concat((( (((bool) (( ((long) (offset) ) < ((long) (0) ) )) )) ? ("-") : ("+") )), global::thx.Strings.lpad(global::haxe.lang.Runtime.concat("", global::Std.@string(((long) (( ((long) (abs) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ))), "0", 2));
				long x = ((long) (( ((long) (( ((long) (abs) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) ) % ((long) (60) ) )) );
				if (( ((bool) (( ((long) (x) ) < -2147483648 )) ) || ((bool) (( ((long) (x) ) > 2147483647 )) ) )) {
					throw global::haxe.lang.HaxeException.wrap("Overflow");
				}
				
				return global::haxe.lang.Runtime.concat(tmp, global::thx.Ints.lpad(((int) (((long) (x) )) ), "0", 2));
			}
		}
		
		
		public static global::EReg getPattern() {
			return new global::EReg("(d|H){1,8}|(f|F){1,7}|(h|m|s){1,2}|[:.]|\'[^\']*\'|\"[^\"]*\"", "");
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.format.TimeFormat(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.format.TimeFormat();
		}
		
		
	}
}


