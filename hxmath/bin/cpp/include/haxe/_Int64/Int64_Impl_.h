// Generated by Haxe 3.3.0
#ifndef INCLUDED_haxe__Int64_Int64_Impl_
#define INCLUDED_haxe__Int64_Int64_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#include <cpp/Int64.h>
HX_DECLARE_CLASS2(haxe,_Int64,Int64_Impl_)

namespace haxe{
namespace _Int64{


class HXCPP_CLASS_ATTRIBUTES Int64_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Int64_Impl__obj OBJ_;
		Int64_Impl__obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="haxe._Int64.Int64_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"haxe._Int64.Int64_Impl_"); }
		static hx::ObjectPtr< Int64_Impl__obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Int64_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Int64_Impl_","\x2d","\x1a","\x59","\xc4"); }

		static  ::cpp::Int64Struct copy( ::cpp::Int64Struct this1);
		static ::Dynamic copy_dyn();

		static  ::cpp::Int64Struct make(Int high,Int low);
		static ::Dynamic make_dyn();

		static  ::cpp::Int64Struct ofInt(Int x);
		static ::Dynamic ofInt_dyn();

		static Int toInt( ::cpp::Int64Struct x);
		static ::Dynamic toInt_dyn();

		static Bool is( ::Dynamic val);
		static ::Dynamic is_dyn();

		static Int getHigh( ::cpp::Int64Struct x);
		static ::Dynamic getHigh_dyn();

		static Int getLow( ::cpp::Int64Struct x);
		static ::Dynamic getLow_dyn();

		static Bool isNeg( ::cpp::Int64Struct x);
		static ::Dynamic isNeg_dyn();

		static Bool isZero( ::cpp::Int64Struct x);
		static ::Dynamic isZero_dyn();

		static Int compare( ::cpp::Int64Struct a, ::cpp::Int64Struct b);
		static ::Dynamic compare_dyn();

		static Int ucompare( ::cpp::Int64Struct a, ::cpp::Int64Struct b);
		static ::Dynamic ucompare_dyn();

		static ::String toStr( ::cpp::Int64Struct x);
		static ::Dynamic toStr_dyn();

		static ::String toString( ::cpp::Int64Struct this1);
		static ::Dynamic toString_dyn();

		static  ::cpp::Int64Struct parseString(::String sParam);
		static ::Dynamic parseString_dyn();

		static  ::cpp::Int64Struct fromFloat(Float f);
		static ::Dynamic fromFloat_dyn();

		static  ::Dynamic divMod( ::cpp::Int64Struct dividend, ::cpp::Int64Struct divisor);
		static ::Dynamic divMod_dyn();

		static  ::cpp::Int64Struct neg( ::cpp::Int64Struct x);
		static ::Dynamic neg_dyn();

		static  ::cpp::Int64Struct preIncrement( ::cpp::Int64Struct this1);
		static ::Dynamic preIncrement_dyn();

		static  ::cpp::Int64Struct postIncrement( ::cpp::Int64Struct this1);
		static ::Dynamic postIncrement_dyn();

		static  ::cpp::Int64Struct preDecrement( ::cpp::Int64Struct this1);
		static ::Dynamic preDecrement_dyn();

		static  ::cpp::Int64Struct postDecrement( ::cpp::Int64Struct this1);
		static ::Dynamic postDecrement_dyn();

		static  ::cpp::Int64Struct add( ::cpp::Int64Struct a, ::cpp::Int64Struct b);
		static ::Dynamic add_dyn();

		static  ::cpp::Int64Struct addInt( ::cpp::Int64Struct a,Int b);
		static ::Dynamic addInt_dyn();

		static  ::cpp::Int64Struct sub( ::cpp::Int64Struct a, ::cpp::Int64Struct b);
		static ::Dynamic sub_dyn();

		static  ::cpp::Int64Struct subInt( ::cpp::Int64Struct a,Int b);
		static ::Dynamic subInt_dyn();

		static  ::cpp::Int64Struct intSub(Int a, ::cpp::Int64Struct b);
		static ::Dynamic intSub_dyn();

		static  ::cpp::Int64Struct mul( ::cpp::Int64Struct a, ::cpp::Int64Struct b);
		static ::Dynamic mul_dyn();

		static  ::cpp::Int64Struct mulInt( ::cpp::Int64Struct a,Int b);
		static ::Dynamic mulInt_dyn();

		static  ::cpp::Int64Struct div( ::cpp::Int64Struct a, ::cpp::Int64Struct b);
		static ::Dynamic div_dyn();

		static  ::cpp::Int64Struct divInt( ::cpp::Int64Struct a,Int b);
		static ::Dynamic divInt_dyn();

		static  ::cpp::Int64Struct intDiv(Int a, ::cpp::Int64Struct b);
		static ::Dynamic intDiv_dyn();

		static  ::cpp::Int64Struct mod( ::cpp::Int64Struct a, ::cpp::Int64Struct b);
		static ::Dynamic mod_dyn();

		static  ::cpp::Int64Struct modInt( ::cpp::Int64Struct a,Int b);
		static ::Dynamic modInt_dyn();

		static  ::cpp::Int64Struct intMod(Int a, ::cpp::Int64Struct b);
		static ::Dynamic intMod_dyn();

		static Bool eq( ::cpp::Int64Struct a, ::cpp::Int64Struct b);
		static ::Dynamic eq_dyn();

		static Bool eqInt( ::cpp::Int64Struct a,Int b);
		static ::Dynamic eqInt_dyn();

		static Bool neq( ::cpp::Int64Struct a, ::cpp::Int64Struct b);
		static ::Dynamic neq_dyn();

		static Bool neqInt( ::cpp::Int64Struct a,Int b);
		static ::Dynamic neqInt_dyn();

		static Bool lt( ::cpp::Int64Struct a, ::cpp::Int64Struct b);
		static ::Dynamic lt_dyn();

		static Bool ltInt( ::cpp::Int64Struct a,Int b);
		static ::Dynamic ltInt_dyn();

		static Bool intLt(Int a, ::cpp::Int64Struct b);
		static ::Dynamic intLt_dyn();

		static Bool lte( ::cpp::Int64Struct a, ::cpp::Int64Struct b);
		static ::Dynamic lte_dyn();

		static Bool lteInt( ::cpp::Int64Struct a,Int b);
		static ::Dynamic lteInt_dyn();

		static Bool intLte(Int a, ::cpp::Int64Struct b);
		static ::Dynamic intLte_dyn();

		static Bool gt( ::cpp::Int64Struct a, ::cpp::Int64Struct b);
		static ::Dynamic gt_dyn();

		static Bool gtInt( ::cpp::Int64Struct a,Int b);
		static ::Dynamic gtInt_dyn();

		static Bool intGt(Int a, ::cpp::Int64Struct b);
		static ::Dynamic intGt_dyn();

		static Bool gte( ::cpp::Int64Struct a, ::cpp::Int64Struct b);
		static ::Dynamic gte_dyn();

		static Bool gteInt( ::cpp::Int64Struct a,Int b);
		static ::Dynamic gteInt_dyn();

		static Bool intGte(Int a, ::cpp::Int64Struct b);
		static ::Dynamic intGte_dyn();

		static  ::cpp::Int64Struct complement( ::cpp::Int64Struct a);
		static ::Dynamic complement_dyn();

		static  ::cpp::Int64Struct _hx_and( ::cpp::Int64Struct a, ::cpp::Int64Struct b);
		static ::Dynamic _hx_and_dyn();

		static  ::cpp::Int64Struct _hx_or( ::cpp::Int64Struct a, ::cpp::Int64Struct b);
		static ::Dynamic _hx_or_dyn();

		static  ::cpp::Int64Struct _hx_xor( ::cpp::Int64Struct a, ::cpp::Int64Struct b);
		static ::Dynamic _hx_xor_dyn();

		static  ::cpp::Int64Struct shl( ::cpp::Int64Struct a,Int b);
		static ::Dynamic shl_dyn();

		static  ::cpp::Int64Struct shr( ::cpp::Int64Struct a,Int b);
		static ::Dynamic shr_dyn();

		static  ::cpp::Int64Struct ushr( ::cpp::Int64Struct a,Int b);
		static ::Dynamic ushr_dyn();

		static Int get_high( ::cpp::Int64Struct this1);
		static ::Dynamic get_high_dyn();

		static Int get_low( ::cpp::Int64Struct this1);
		static ::Dynamic get_low_dyn();

};

} // end namespace haxe
} // end namespace _Int64

#endif /* INCLUDED_haxe__Int64_Int64_Impl_ */ 
