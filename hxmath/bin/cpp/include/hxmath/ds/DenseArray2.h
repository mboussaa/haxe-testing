// Generated by Haxe 3.3.0
#ifndef INCLUDED_hxmath_ds_DenseArray2
#define INCLUDED_hxmath_ds_DenseArray2

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_hxmath_ds_IArray2
#include <hxmath/ds/IArray2.h>
#endif
HX_DECLARE_CLASS2(hxmath,ds,DenseArray2)
HX_DECLARE_CLASS2(hxmath,ds,IArray2)
HX_DECLARE_CLASS2(hxmath,ds,SparseArray2)

namespace hxmath{
namespace ds{


class HXCPP_CLASS_ATTRIBUTES DenseArray2_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef DenseArray2_obj OBJ_;
		DenseArray2_obj();

	public:
		void __construct(Int width,Int height, ::Dynamic defaultValue);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="hxmath.ds.DenseArray2")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"hxmath.ds.DenseArray2"); }
		static hx::ObjectPtr< DenseArray2_obj > __new(Int width,Int height, ::Dynamic defaultValue);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~DenseArray2_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_HCSTRING("DenseArray2","\x58","\xf1","\x56","\xc2"); }

		static  ::hxmath::ds::DenseArray2 fromNestedArray(::Array< ::Dynamic> source, ::Dynamic defaultValue);
		static ::Dynamic fromNestedArray_dyn();

		Int width;
		Int height;
		::cpp::VirtualArray array;
		 ::Dynamic defaultValue;
		 ::Dynamic iterator();
		::Dynamic iterator_dyn();

		Bool inBounds(Int x,Int y);
		::Dynamic inBounds_dyn();

		 ::Dynamic get(Int x,Int y);
		::Dynamic get_dyn();

		 ::Dynamic getByKey(Int key);
		::Dynamic getByKey_dyn();

		void set(Int x,Int y, ::Dynamic item);
		::Dynamic set_dyn();

		void fill( ::Dynamic item);
		::Dynamic fill_dyn();

		void resize(Int newWidth,Int newHeight, ::Dynamic defaultValue);
		::Dynamic resize_dyn();

		Int clippedBlit(Int targetX,Int targetY, ::hxmath::ds::DenseArray2 source,Int sourceX,Int sourceY,Int copyWidth,Int copyHeight);
		::Dynamic clippedBlit_dyn();

		Int blit(Int targetX,Int targetY, ::hxmath::ds::DenseArray2 source,Int sourceX,Int sourceY,Int copyWidth,Int copyHeight);
		::Dynamic blit_dyn();

		 ::hxmath::ds::DenseArray2 clone();
		::Dynamic clone_dyn();

		 ::hxmath::ds::SparseArray2 toSparseArray();
		::Dynamic toSparseArray_dyn();

		void checkBounds(Int x,Int y);
		::Dynamic checkBounds_dyn();

		 ::Dynamic get_keys();
		::Dynamic get_keys_dyn();

};

} // end namespace hxmath
} // end namespace ds

#endif /* INCLUDED_hxmath_ds_DenseArray2 */ 
