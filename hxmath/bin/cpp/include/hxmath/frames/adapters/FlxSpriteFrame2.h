// Generated by Haxe 3.3.0
#ifndef INCLUDED_hxmath_frames_adapters_FlxSpriteFrame2
#define INCLUDED_hxmath_frames_adapters_FlxSpriteFrame2

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_hxmath_frames_IFrame2
#include <hxmath/frames/IFrame2.h>
#endif
HX_DECLARE_CLASS2(hxmath,frames,IFrame2)
HX_DECLARE_CLASS3(hxmath,frames,adapters,FlxSpriteFrame2)
HX_DECLARE_CLASS2(hxmath,math,Matrix3x2Default)
HX_DECLARE_CLASS2(hxmath,math,Vector2Default)

namespace hxmath{
namespace frames{
namespace adapters{


class HXCPP_CLASS_ATTRIBUTES FlxSpriteFrame2_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef FlxSpriteFrame2_obj OBJ_;
		FlxSpriteFrame2_obj();

	public:
		void __construct( ::Dynamic owner);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="hxmath.frames.adapters.FlxSpriteFrame2")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"hxmath.frames.adapters.FlxSpriteFrame2"); }
		static hx::ObjectPtr< FlxSpriteFrame2_obj > __new( ::Dynamic owner);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FlxSpriteFrame2_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_HCSTRING("FlxSpriteFrame2","\xbc","\x4c","\xa2","\x9c"); }

		 ::Dynamic owner;
		 ::hxmath::math::Matrix3x2Default internalMatrix;
		 ::hxmath::math::Matrix3x2Default get_matrix();
		::Dynamic get_matrix_dyn();

		 ::hxmath::math::Vector2Default get_offset();
		::Dynamic get_offset_dyn();

		 ::hxmath::math::Vector2Default set_offset( ::hxmath::math::Vector2Default offset);
		::Dynamic set_offset_dyn();

		Float get_angleDegrees();
		::Dynamic get_angleDegrees_dyn();

		Float set_angleDegrees(Float angleDegrees);
		::Dynamic set_angleDegrees_dyn();

};

} // end namespace hxmath
} // end namespace frames
} // end namespace adapters

#endif /* INCLUDED_hxmath_frames_adapters_FlxSpriteFrame2 */ 
