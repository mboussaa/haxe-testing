// Generated by Haxe 3.3.0
#ifndef INCLUDED_nanotest_NanoTestAssertResult
#define INCLUDED_nanotest_NanoTestAssertResult

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(nanotest,NanoTestAssertResult)

namespace nanotest{


class HXCPP_CLASS_ATTRIBUTES NanoTestAssertResult_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef NanoTestAssertResult_obj OBJ_;
		NanoTestAssertResult_obj();

	public:
		void __construct( ::Dynamic _result,Int position);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nanotest.NanoTestAssertResult")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"nanotest.NanoTestAssertResult"); }
		static hx::ObjectPtr< NanoTestAssertResult_obj > __new( ::Dynamic _result,Int position);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~NanoTestAssertResult_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("NanoTestAssertResult","\x29","\x27","\xf1","\xba"); }

		 ::Dynamic result;
		Int position;
		 ::nanotest::NanoTestAssertResult label( ::Dynamic d);
		::Dynamic label_dyn();

};

} // end namespace nanotest

#endif /* INCLUDED_nanotest_NanoTestAssertResult */ 
