// Generated by Haxe 3.3.0
#ifndef INCLUDED_Lambda
#define INCLUDED_Lambda

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Lambda)
HX_DECLARE_CLASS0(List)



class HXCPP_CLASS_ATTRIBUTES Lambda_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Lambda_obj OBJ_;
		Lambda_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="Lambda")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"Lambda"); }
		static hx::ObjectPtr< Lambda_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Lambda_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Lambda","\x27","\xa7","\x54","\x85"); }

		static ::cpp::VirtualArray array( ::Dynamic it);
		static ::Dynamic array_dyn();

		static  ::List list( ::Dynamic it);
		static ::Dynamic list_dyn();

		static  ::List map( ::Dynamic it, ::Dynamic f);
		static ::Dynamic map_dyn();

		static  ::List mapi( ::Dynamic it, ::Dynamic f);
		static ::Dynamic mapi_dyn();

		static  ::List flatten( ::Dynamic it);
		static ::Dynamic flatten_dyn();

		static  ::List flatMap( ::Dynamic it, ::Dynamic f);
		static ::Dynamic flatMap_dyn();

		static Bool has( ::Dynamic it, ::Dynamic elt);
		static ::Dynamic has_dyn();

		static Bool exists( ::Dynamic it, ::Dynamic f);
		static ::Dynamic exists_dyn();

		static Bool foreach( ::Dynamic it, ::Dynamic f);
		static ::Dynamic foreach_dyn();

		static void iter( ::Dynamic it, ::Dynamic f);
		static ::Dynamic iter_dyn();

		static  ::List filter( ::Dynamic it, ::Dynamic f);
		static ::Dynamic filter_dyn();

		static  ::Dynamic fold( ::Dynamic it, ::Dynamic f, ::Dynamic first);
		static ::Dynamic fold_dyn();

		static Int count( ::Dynamic it, ::Dynamic pred);
		static ::Dynamic count_dyn();

		static Bool empty( ::Dynamic it);
		static ::Dynamic empty_dyn();

		static Int indexOf( ::Dynamic it, ::Dynamic v);
		static ::Dynamic indexOf_dyn();

		static  ::Dynamic find( ::Dynamic it, ::Dynamic f);
		static ::Dynamic find_dyn();

		static  ::List concat( ::Dynamic a, ::Dynamic b);
		static ::Dynamic concat_dyn();

};


#endif /* INCLUDED_Lambda */ 
