// Generated by Haxe 3.3.0
#ifndef INCLUDED_test_Test2D
#define INCLUDED_test_Test2D

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_test_MathTestCase
#include <test/MathTestCase.h>
#endif
HX_DECLARE_CLASS1(nanotest,NanoTestCase)
HX_DECLARE_CLASS1(test,MathTestCase)
HX_DECLARE_CLASS1(test,Test2D)

namespace test{


class HXCPP_CLASS_ATTRIBUTES Test2D_obj : public  ::test::MathTestCase_obj
{
	public:
		typedef  ::test::MathTestCase_obj super;
		typedef Test2D_obj OBJ_;
		Test2D_obj();

	public:
		void __construct( ::Dynamic posInfos);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="test.Test2D")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"test.Test2D"); }
		static hx::ObjectPtr< Test2D_obj > __new( ::Dynamic posInfos);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Test2D_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Test2D","\xc4","\xa0","\xce","\x09"); }

		void testVector2BasicOps();
		::Dynamic testVector2BasicOps_dyn();

		void testDeterminant();
		::Dynamic testDeterminant_dyn();

		void testHomogenousTranslation();
		::Dynamic testHomogenousTranslation_dyn();

		void testTranspose();
		::Dynamic testTranspose_dyn();

		void testRotation();
		::Dynamic testRotation_dyn();

		void testVectorRotate();
		::Dynamic testVectorRotate_dyn();

		void testPolarConversion();
		::Dynamic testPolarConversion_dyn();

		void testNorms();
		::Dynamic testNorms_dyn();

		void testAngles();
		::Dynamic testAngles_dyn();

		void testOrbit();
		::Dynamic testOrbit_dyn();

		void testLinearSubMatrix();
		::Dynamic testLinearSubMatrix_dyn();

		void testMatrixFrameInverse();
		::Dynamic testMatrixFrameInverse_dyn();

		void testOrthoNormalize();
		::Dynamic testOrthoNormalize_dyn();

		void testReflect();
		::Dynamic testReflect_dyn();

};

} // end namespace test

#endif /* INCLUDED_test_Test2D */ 
