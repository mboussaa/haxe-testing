// Generated by Haxe 3.3.0
#ifndef INCLUDED_test_TestGeom
#define INCLUDED_test_TestGeom

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_test_MathTestCase
#include <test/MathTestCase.h>
#endif
HX_DECLARE_CLASS2(hxmath,geom,Rect)
HX_DECLARE_CLASS1(nanotest,NanoTestCase)
HX_DECLARE_CLASS1(test,MathTestCase)
HX_DECLARE_CLASS1(test,TestGeom)

namespace test{


class HXCPP_CLASS_ATTRIBUTES TestGeom_obj : public  ::test::MathTestCase_obj
{
	public:
		typedef  ::test::MathTestCase_obj super;
		typedef TestGeom_obj OBJ_;
		TestGeom_obj();

	public:
		void __construct( ::Dynamic posInfos);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="test.TestGeom")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"test.TestGeom"); }
		static hx::ObjectPtr< TestGeom_obj > __new( ::Dynamic posInfos);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestGeom_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("TestGeom","\x4e","\x40","\x46","\x21"); }

		void testRectIntersect();
		::Dynamic testRectIntersect_dyn();

		void testRectMatrixConversion();
		::Dynamic testRectMatrixConversion_dyn();

		void testRectTwoPointConstruction();
		::Dynamic testRectTwoPointConstruction_dyn();

		void testRectContainsPoint();
		::Dynamic testRectContainsPoint_dyn();

		void testRectIntersectOverlapping();
		::Dynamic testRectIntersectOverlapping_dyn();

		void testRectIntersectContaining();
		::Dynamic testRectIntersectContaining_dyn();

		void testRectToPointDistance();
		::Dynamic testRectToPointDistance_dyn();

		void testRectAddVector();
		::Dynamic testRectAddVector_dyn();

		void testRectDistanceAgainstRangeAlgorithm();
		::Dynamic testRectDistanceAgainstRangeAlgorithm_dyn();

		void testRay2Cast();
		::Dynamic testRay2Cast_dyn();

		Float rangeRectDistance( ::hxmath::geom::Rect a, ::hxmath::geom::Rect b);
		::Dynamic rangeRectDistance_dyn();

};

} // end namespace test

#endif /* INCLUDED_test_TestGeom */ 
