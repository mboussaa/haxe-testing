// Generated by Haxe 3.3.0
#ifndef INCLUDED_test_TestDataStructures
#define INCLUDED_test_TestDataStructures

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_test_MathTestCase
#include <test/MathTestCase.h>
#endif
HX_DECLARE_CLASS2(hxmath,ds,IArray2)
HX_DECLARE_CLASS1(nanotest,NanoTestCase)
HX_DECLARE_CLASS1(test,MathTestCase)
HX_DECLARE_CLASS1(test,TestDataStructures)

namespace test{


class HXCPP_CLASS_ATTRIBUTES TestDataStructures_obj : public  ::test::MathTestCase_obj
{
	public:
		typedef  ::test::MathTestCase_obj super;
		typedef TestDataStructures_obj OBJ_;
		TestDataStructures_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="test.TestDataStructures")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"test.TestDataStructures"); }
		static hx::ObjectPtr< TestDataStructures_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestDataStructures_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("TestDataStructures","\xbc","\x77","\x6c","\x87"); }

		void testArray2InterfaceCast();
		::Dynamic testArray2InterfaceCast_dyn();

		void testDenseArray2Resize();
		::Dynamic testDenseArray2Resize_dyn();

		void testArray2Iterate();
		::Dynamic testArray2Iterate_dyn();

		void testSparseArray2KeysIterate();
		::Dynamic testSparseArray2KeysIterate_dyn();

		void testSparseArray2OrderedKeysIterate();
		::Dynamic testSparseArray2OrderedKeysIterate_dyn();

		void testBlit();
		::Dynamic testBlit_dyn();

		void testSparseArray2IndexBounds();
		::Dynamic testSparseArray2IndexBounds_dyn();

		void testDenseArray2FromNestedRectangularArray();
		::Dynamic testDenseArray2FromNestedRectangularArray_dyn();

		void testGetByKey();
		::Dynamic testGetByKey_dyn();

		void testDenseKeysIterator();
		::Dynamic testDenseKeysIterator_dyn();

		void testCloneAndConvert();
		::Dynamic testCloneAndConvert_dyn();

		void setPrimesSquare(::Dynamic array);
		::Dynamic setPrimesSquare_dyn();

		Int sum(::Dynamic array);
		::Dynamic sum_dyn();

};

} // end namespace test

#endif /* INCLUDED_test_TestDataStructures */ 
