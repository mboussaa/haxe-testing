// Generated by Haxe 3.3.0
#ifndef INCLUDED_test_TestIntMath
#define INCLUDED_test_TestIntMath

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_test_MathTestCase
#include <test/MathTestCase.h>
#endif
HX_DECLARE_CLASS1(nanotest,NanoTestCase)
HX_DECLARE_CLASS1(test,MathTestCase)
HX_DECLARE_CLASS1(test,TestIntMath)

namespace test{


class HXCPP_CLASS_ATTRIBUTES TestIntMath_obj : public  ::test::MathTestCase_obj
{
	public:
		typedef  ::test::MathTestCase_obj super;
		typedef TestIntMath_obj OBJ_;
		TestIntMath_obj();

	public:
		void __construct( ::Dynamic posInfos);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="test.TestIntMath")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"test.TestIntMath"); }
		static hx::ObjectPtr< TestIntMath_obj > __new( ::Dynamic posInfos);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestIntMath_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("TestIntMath","\x05","\xa4","\x35","\xa8"); }

		void testIntVector2Conversion();
		::Dynamic testIntVector2Conversion_dyn();

};

} // end namespace test

#endif /* INCLUDED_test_TestIntMath */ 
