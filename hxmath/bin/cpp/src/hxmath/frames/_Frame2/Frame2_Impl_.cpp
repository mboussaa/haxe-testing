// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_hxmath_frames_Frame2Default
#include <hxmath/frames/Frame2Default.h>
#endif
#ifndef INCLUDED_hxmath_frames_IFrame2
#include <hxmath/frames/IFrame2.h>
#endif
#ifndef INCLUDED_hxmath_frames__Frame2_Frame2_Impl_
#include <hxmath/frames/_Frame2/Frame2_Impl_.h>
#endif
#ifndef INCLUDED_hxmath_math_Matrix2x2Default
#include <hxmath/math/Matrix2x2Default.h>
#endif
#ifndef INCLUDED_hxmath_math_Matrix3x2Default
#include <hxmath/math/Matrix3x2Default.h>
#endif
#ifndef INCLUDED_hxmath_math_Vector2Default
#include <hxmath/math/Vector2Default.h>
#endif

namespace hxmath{
namespace frames{
namespace _Frame2{

void Frame2_Impl__obj::__construct() { }

Dynamic Frame2_Impl__obj::__CreateEmpty() { return new Frame2_Impl__obj; }

hx::ObjectPtr< Frame2_Impl__obj > Frame2_Impl__obj::__new()
{
	hx::ObjectPtr< Frame2_Impl__obj > _hx_result = new Frame2_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Frame2_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Frame2_Impl__obj > _hx_result = new Frame2_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

::Dynamic Frame2_Impl__obj::_new( ::hxmath::math::Vector2Default offset,Float angleDegrees){
            	HX_STACK_FRAME("hxmath.frames._Frame2.Frame2_Impl_","_new",0x1863144e,"hxmath.frames._Frame2.Frame2_Impl_._new","hxmath/frames/Frame2.hx",24,0xec6193c7)
            	HX_STACK_ARG(offset,"offset")
            	HX_STACK_ARG(angleDegrees,"angleDegrees")
HXLINE(  24)		HX_VARI_NAME( ::Dynamic,this1,"this") =  ::hxmath::frames::Frame2Default_obj::__new(offset,angleDegrees,null());
HXDLIN(  24)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Frame2_Impl__obj,_new,return )

 ::hxmath::math::Matrix3x2Default Frame2_Impl__obj::calculateMatrix( ::hxmath::math::Matrix3x2Default matrix, ::hxmath::math::Vector2Default offset,Float angleDegrees){
            	HX_STACK_FRAME("hxmath.frames._Frame2.Frame2_Impl_","calculateMatrix",0xb58b8e7a,"hxmath.frames._Frame2.Frame2_Impl_.calculateMatrix","hxmath/frames/Frame2.hx",38,0xec6193c7)
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(offset,"offset")
            	HX_STACK_ARG(angleDegrees,"angleDegrees")
HXLINE(  40)		{
HXLINE(  40)			HX_VARI( Float,angle) = (((Float)::Math_obj::PI / (Float)(int)180) * angleDegrees);
HXDLIN(  40)			HX_VARI( Float,s) = ::Math_obj::sin(angle);
HXDLIN(  40)			HX_VARI( Float,c) = ::Math_obj::cos(angle);
HXDLIN(  40)			matrix->a = c;
HXDLIN(  40)			matrix->b = -(s);
HXDLIN(  40)			matrix->c = s;
HXDLIN(  40)			matrix->d = c;
            		}
HXLINE(  41)		{
HXLINE(  41)			HX_VARI( Float,x) = offset->x;
HXDLIN(  41)			HX_VARI( Float,y) = offset->y;
HXDLIN(  41)			matrix->tx = x;
HXDLIN(  41)			matrix->ty = y;
            		}
HXLINE(  42)		return matrix;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Frame2_Impl__obj,calculateMatrix,return )

::Dynamic Frame2_Impl__obj::lerp(::Dynamic frameA,::Dynamic frameB,Float t){
            	HX_STACK_FRAME("hxmath.frames._Frame2.Frame2_Impl_","lerp",0x20f41164,"hxmath.frames._Frame2.Frame2_Impl_.lerp","hxmath/frames/Frame2.hx",55,0xec6193c7)
            	HX_STACK_ARG(frameA,"frameA")
            	HX_STACK_ARG(frameB,"frameB")
            	HX_STACK_ARG(t,"t")
HXLINE(  56)		HX_VARI(  ::hxmath::math::Vector2Default,a) = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(frameA->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN(  56)		HX_VARI(  ::hxmath::math::Vector2Default,b) = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(frameB->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN(  56)		 ::hxmath::math::Vector2Default _hx_tmp =  ::hxmath::math::Vector2Default_obj::__new((((((Float)1.0) - t) * a->x) + (t * b->x)),(((((Float)1.0) - t) * a->y) + (t * b->y)));
HXLINE(  57)		HX_VARI_NAME( Float,a1,"a") = ( (Float)( ::Dynamic(frameA->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN(  57)		HX_VARI_NAME( Float,b1,"b") = ( (Float)( ::Dynamic(frameB->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN(  57)		Float _hx_tmp1 = ::Math_obj::abs((a1 - b1));
HXDLIN(  57)		if ((_hx_tmp1 > ((Float)180.))) {
HXLINE(  57)			Bool _hx_tmp2 = (a1 < b1);
HXDLIN(  57)			if (_hx_tmp2) {
HXLINE(  57)				hx::AddEq(a1,(int)360);
            			}
            			else {
HXLINE(  57)				hx::AddEq(b1,(int)360);
            			}
            		}
HXDLIN(  57)		HX_VARI( Float,x) = (((((Float)1.0) - t) * a1) + (t * b1));
HXDLIN(  57)		Float _hx_tmp3;
HXDLIN(  57)		if ((x < (int)0)) {
HXLINE(  57)			_hx_tmp3 = ((int)360 - hx::Mod(-(x),(int)360));
            		}
            		else {
HXLINE(  57)			_hx_tmp3 = hx::Mod(x,(int)360);
            		}
HXLINE(  55)		return ::hxmath::frames::_Frame2::Frame2_Impl__obj::_new(_hx_tmp,_hx_tmp3);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Frame2_Impl__obj,lerp,return )

::Dynamic Frame2_Impl__obj::concat(::Dynamic this1,::Dynamic other){
            	HX_STACK_FRAME("hxmath.frames._Frame2.Frame2_Impl_","concat",0x79435d41,"hxmath.frames._Frame2.Frame2_Impl_.concat","hxmath/frames/Frame2.hx",69,0xec6193c7)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE(  70)		HX_VARI( ::Dynamic,self) = this1;
HXLINE(  71)		 ::hxmath::math::Vector2Default _hx_tmp = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(self->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN(  71)		Float _hx_tmp1 = ( (Float)( ::Dynamic(self->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN(  71)		HX_VARI_NAME( ::Dynamic,self1,"self") = ::hxmath::frames::_Frame2::Frame2_Impl__obj::_new(_hx_tmp,_hx_tmp1);
HXDLIN(  71)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,this2,"this") = ( ( ::hxmath::math::Matrix3x2Default)( ::Dynamic(self1->__Field(HX_("get_matrix",0a,a6,4f,ac),hx::paccDynamic))()) );
HXDLIN(  71)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,self2,"self") = this2;
HXDLIN(  71)		HX_VARI(  ::hxmath::math::Matrix2x2Default,m) =  ::hxmath::math::Matrix2x2Default_obj::__new(self2->a,self2->b,self2->c,self2->d);
HXDLIN(  71)		HX_VARI(  ::hxmath::math::Vector2Default,v) = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(other->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN(  71)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,this3,"this") =  ::hxmath::math::Vector2Default_obj::__new(((m->a * v->x) + (m->b * v->y)),((m->c * v->x) + (m->d * v->y)));
HXDLIN(  71)		HX_VARI(  ::hxmath::math::Vector2Default,a) = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(self1->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN(  71)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self3,"self") = this3;
HXDLIN(  71)		hx::AddEq(self3->x,a->x);
HXDLIN(  71)		hx::AddEq(self3->y,a->y);
HXDLIN(  71)		Float _hx_tmp2 = ( (Float)( ::Dynamic(self1->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN(  71)		Float _hx_tmp3 = ( (Float)( ::Dynamic(other->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN(  71)		HX_VARI( Float,x) = (_hx_tmp2 + _hx_tmp3);
HXDLIN(  71)		Float _hx_tmp4;
HXDLIN(  71)		if ((x < (int)0)) {
HXLINE(  71)			_hx_tmp4 = ((int)360 - hx::Mod(-(x),(int)360));
            		}
            		else {
HXLINE(  71)			_hx_tmp4 = hx::Mod(x,(int)360);
            		}
HXDLIN(  71)		 ::Dynamic(self1->__Field(HX_("set_angleDegrees",11,12,5d,98),hx::paccDynamic))(_hx_tmp4);
HXDLIN(  71)		 ::Dynamic(self1->__Field(HX_("set_offset",d0,a5,44,54),hx::paccDynamic))(self3);
HXDLIN(  71)		return self1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Frame2_Impl__obj,concat,return )

::Dynamic Frame2_Impl__obj::concatWith(::Dynamic this1,::Dynamic other){
            	HX_STACK_FRAME("hxmath.frames._Frame2.Frame2_Impl_","concatWith",0xc19333e7,"hxmath.frames._Frame2.Frame2_Impl_.concatWith","hxmath/frames/Frame2.hx",84,0xec6193c7)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE(  85)		HX_VARI( ::Dynamic,self) = this1;
HXLINE(  86)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,this2,"this") = ( ( ::hxmath::math::Matrix3x2Default)( ::Dynamic(self->__Field(HX_("get_matrix",0a,a6,4f,ac),hx::paccDynamic))()) );
HXDLIN(  86)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,self1,"self") = this2;
HXDLIN(  86)		HX_VARI(  ::hxmath::math::Matrix2x2Default,m) =  ::hxmath::math::Matrix2x2Default_obj::__new(self1->a,self1->b,self1->c,self1->d);
HXDLIN(  86)		HX_VARI(  ::hxmath::math::Vector2Default,v) = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(other->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN(  86)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,this3,"this") =  ::hxmath::math::Vector2Default_obj::__new(((m->a * v->x) + (m->b * v->y)),((m->c * v->x) + (m->d * v->y)));
HXDLIN(  86)		HX_VARI(  ::hxmath::math::Vector2Default,a) = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(self->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN(  86)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self2,"self") = this3;
HXDLIN(  86)		hx::AddEq(self2->x,a->x);
HXDLIN(  86)		hx::AddEq(self2->y,a->y);
HXLINE(  87)		Float _hx_tmp = ( (Float)( ::Dynamic(self->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN(  87)		Float _hx_tmp1 = ( (Float)( ::Dynamic(other->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN(  87)		HX_VARI( Float,x) = (_hx_tmp + _hx_tmp1);
HXDLIN(  87)		Float _hx_tmp2;
HXDLIN(  87)		if ((x < (int)0)) {
HXLINE(  87)			_hx_tmp2 = ((int)360 - hx::Mod(-(x),(int)360));
            		}
            		else {
HXLINE(  87)			_hx_tmp2 = hx::Mod(x,(int)360);
            		}
HXDLIN(  87)		 ::Dynamic(self->__Field(HX_("set_angleDegrees",11,12,5d,98),hx::paccDynamic))(_hx_tmp2);
HXLINE(  88)		 ::Dynamic(self->__Field(HX_("set_offset",d0,a5,44,54),hx::paccDynamic))(self2);
HXLINE(  89)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Frame2_Impl__obj,concatWith,return )

 ::hxmath::math::Vector2Default Frame2_Impl__obj::transformFrom(::Dynamic this1, ::hxmath::math::Vector2Default p){
            	HX_STACK_FRAME("hxmath.frames._Frame2.Frame2_Impl_","transformFrom",0xbf4d6069,"hxmath.frames._Frame2.Frame2_Impl_.transformFrom","hxmath/frames/Frame2.hx",99,0xec6193c7)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(p,"p")
HXLINE( 100)		HX_VARI( ::Dynamic,self) = this1;
HXLINE( 101)		HX_VARI(  ::hxmath::math::Matrix3x2Default,m) = ( ( ::hxmath::math::Matrix3x2Default)( ::Dynamic(self->__Field(HX_("get_matrix",0a,a6,4f,ac),hx::paccDynamic))()) );
HXDLIN( 101)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,m1,"m") =  ::hxmath::math::Matrix2x2Default_obj::__new(m->a,m->b,m->c,m->d);
HXDLIN( 101)		HX_VARI(  ::hxmath::math::Vector2Default,a) =  ::hxmath::math::Vector2Default_obj::__new(((m1->a * p->x) + (m1->b * p->y)),((m1->c * p->x) + (m1->d * p->y)));
HXDLIN( 101)		HX_VARI(  ::hxmath::math::Vector2Default,b) =  ::hxmath::math::Vector2Default_obj::__new(m->tx,m->ty);
HXDLIN( 101)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self1,"self") =  ::hxmath::math::Vector2Default_obj::__new(a->x,a->y);
HXDLIN( 101)		hx::AddEq(self1->x,b->x);
HXDLIN( 101)		hx::AddEq(self1->y,b->y);
HXDLIN( 101)		return self1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Frame2_Impl__obj,transformFrom,return )

 ::hxmath::math::Vector2Default Frame2_Impl__obj::transformTo(::Dynamic this1, ::hxmath::math::Vector2Default p){
            	HX_STACK_FRAME("hxmath.frames._Frame2.Frame2_Impl_","transformTo",0x58d612ba,"hxmath.frames._Frame2.Frame2_Impl_.transformTo","hxmath/frames/Frame2.hx",111,0xec6193c7)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(p,"p")
HXLINE( 112)		HX_VARI( ::Dynamic,self) = this1;
HXLINE( 113)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,this2,"this") = ( ( ::hxmath::math::Matrix3x2Default)( ::Dynamic(self->__Field(HX_("get_matrix",0a,a6,4f,ac),hx::paccDynamic))()) );
HXDLIN( 113)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,self1,"self") = this2;
HXDLIN( 113)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,this3,"this") =  ::hxmath::math::Matrix2x2Default_obj::__new(self1->a,self1->b,self1->c,self1->d);
HXDLIN( 113)		HX_VARI(  ::hxmath::math::Vector2Default,b) = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(self->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 113)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self2,"self") =  ::hxmath::math::Vector2Default_obj::__new(p->x,p->y);
HXDLIN( 113)		hx::SubEq(self2->x,b->x);
HXDLIN( 113)		hx::SubEq(self2->y,b->y);
HXDLIN( 113)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,self3,"self") = this3;
HXDLIN( 113)		return  ::hxmath::math::Vector2Default_obj::__new(((self3->a * self2->x) + (self3->c * self2->y)),((self3->b * self2->x) + (self3->d * self2->y)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Frame2_Impl__obj,transformTo,return )

 ::hxmath::math::Vector2Default Frame2_Impl__obj::linearTransformFrom(::Dynamic this1, ::hxmath::math::Vector2Default v){
            	HX_STACK_FRAME("hxmath.frames._Frame2.Frame2_Impl_","linearTransformFrom",0x9f4ceb84,"hxmath.frames._Frame2.Frame2_Impl_.linearTransformFrom","hxmath/frames/Frame2.hx",123,0xec6193c7)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(v,"v")
HXLINE( 124)		HX_VARI( ::Dynamic,self) = this1;
HXLINE( 125)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,this2,"this") = ( ( ::hxmath::math::Matrix3x2Default)( ::Dynamic(self->__Field(HX_("get_matrix",0a,a6,4f,ac),hx::paccDynamic))()) );
HXDLIN( 125)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,self1,"self") = this2;
HXDLIN( 125)		HX_VARI(  ::hxmath::math::Matrix2x2Default,m) =  ::hxmath::math::Matrix2x2Default_obj::__new(self1->a,self1->b,self1->c,self1->d);
HXDLIN( 125)		return  ::hxmath::math::Vector2Default_obj::__new(((m->a * v->x) + (m->b * v->y)),((m->c * v->x) + (m->d * v->y)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Frame2_Impl__obj,linearTransformFrom,return )

 ::hxmath::math::Vector2Default Frame2_Impl__obj::linearTransformTo(::Dynamic this1, ::hxmath::math::Vector2Default v){
            	HX_STACK_FRAME("hxmath.frames._Frame2.Frame2_Impl_","linearTransformTo",0x1c551115,"hxmath.frames._Frame2.Frame2_Impl_.linearTransformTo","hxmath/frames/Frame2.hx",135,0xec6193c7)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(v,"v")
HXLINE( 136)		HX_VARI( ::Dynamic,self) = this1;
HXLINE( 137)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,this2,"this") = ( ( ::hxmath::math::Matrix3x2Default)( ::Dynamic(self->__Field(HX_("get_matrix",0a,a6,4f,ac),hx::paccDynamic))()) );
HXDLIN( 137)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,self1,"self") = this2;
HXDLIN( 137)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,self2,"self") =  ::hxmath::math::Matrix2x2Default_obj::__new(self1->a,self1->b,self1->c,self1->d);
HXDLIN( 137)		return  ::hxmath::math::Vector2Default_obj::__new(((self2->a * v->x) + (self2->c * v->y)),((self2->b * v->x) + (self2->d * v->y)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Frame2_Impl__obj,linearTransformTo,return )

::Dynamic Frame2_Impl__obj::inverse(::Dynamic this1){
            	HX_STACK_FRAME("hxmath.frames._Frame2.Frame2_Impl_","inverse",0xd1679ee3,"hxmath.frames._Frame2.Frame2_Impl_.inverse","hxmath/frames/Frame2.hx",146,0xec6193c7)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 147)		HX_VARI( ::Dynamic,self) = this1;
HXLINE( 149)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,this2,"this") = ( ( ::hxmath::math::Matrix3x2Default)( ::Dynamic(self->__Field(HX_("get_matrix",0a,a6,4f,ac),hx::paccDynamic))()) );
HXDLIN( 149)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,self1,"self") = this2;
HXDLIN( 149)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,this3,"this") =  ::hxmath::math::Matrix2x2Default_obj::__new(self1->a,self1->b,self1->c,self1->d);
HXDLIN( 149)		HX_VARI(  ::hxmath::math::Vector2Default,v) = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(self->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 149)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,self2,"self") = this3;
HXDLIN( 149)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self3,"self") =  ::hxmath::math::Vector2Default_obj::__new(((self2->a * v->x) + (self2->c * v->y)),((self2->b * v->x) + (self2->d * v->y)));
HXDLIN( 149)		self3->x = -(self3->x);
HXDLIN( 149)		self3->y = -(self3->y);
HXLINE( 148)		return ::hxmath::frames::_Frame2::Frame2_Impl__obj::_new(self3,-(( (Float)( ::Dynamic(self->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) )));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Frame2_Impl__obj,inverse,return )

::Dynamic Frame2_Impl__obj::clone(::Dynamic this1){
            	HX_STACK_FRAME("hxmath.frames._Frame2.Frame2_Impl_","clone",0x8a9e23d0,"hxmath.frames._Frame2.Frame2_Impl_.clone","hxmath/frames/Frame2.hx",159,0xec6193c7)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 160)		HX_VARI( ::Dynamic,self) = this1;
HXLINE( 161)		 ::hxmath::math::Vector2Default _hx_tmp = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(self->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 161)		Float _hx_tmp1 = ( (Float)( ::Dynamic(self->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 161)		return ::hxmath::frames::_Frame2::Frame2_Impl__obj::_new(_hx_tmp,_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Frame2_Impl__obj,clone,return )

 ::hxmath::math::Matrix2x2Default Frame2_Impl__obj::get_linearMatrix(::Dynamic this1){
            	HX_STACK_FRAME("hxmath.frames._Frame2.Frame2_Impl_","get_linearMatrix",0x585f10fc,"hxmath.frames._Frame2.Frame2_Impl_.get_linearMatrix","hxmath/frames/Frame2.hx",165,0xec6193c7)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 166)		HX_VARI( ::Dynamic,self) = this1;
HXLINE( 167)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,this2,"this") = ( ( ::hxmath::math::Matrix3x2Default)( ::Dynamic(self->__Field(HX_("get_matrix",0a,a6,4f,ac),hx::paccDynamic))()) );
HXDLIN( 167)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,self1,"self") = this2;
HXDLIN( 167)		return  ::hxmath::math::Matrix2x2Default_obj::__new(self1->a,self1->b,self1->c,self1->d);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Frame2_Impl__obj,get_linearMatrix,return )


Frame2_Impl__obj::Frame2_Impl__obj()
{
}

bool Frame2_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lerp") ) { outValue = lerp_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { outValue = clone_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"concat") ) { outValue = concat_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"inverse") ) { outValue = inverse_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"concatWith") ) { outValue = concatWith_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transformTo") ) { outValue = transformTo_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"transformFrom") ) { outValue = transformFrom_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"calculateMatrix") ) { outValue = calculateMatrix_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_linearMatrix") ) { outValue = get_linearMatrix_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"linearTransformTo") ) { outValue = linearTransformTo_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"linearTransformFrom") ) { outValue = linearTransformFrom_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Frame2_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Frame2_Impl__obj_sStaticStorageInfo = 0;
#endif

static void Frame2_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Frame2_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Frame2_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Frame2_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class Frame2_Impl__obj::__mClass;

static ::String Frame2_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("calculateMatrix","\x47","\x50","\xf2","\x70"),
	HX_HCSTRING("lerp","\x77","\x12","\xb0","\x47"),
	HX_HCSTRING("concat","\x14","\x09","\xd0","\xc7"),
	HX_HCSTRING("concatWith","\x3a","\xc5","\xdd","\x48"),
	HX_HCSTRING("transformFrom","\xf6","\x24","\x10","\x71"),
	HX_HCSTRING("transformTo","\x07","\xaa","\xca","\x32"),
	HX_HCSTRING("linearTransformFrom","\xd1","\x17","\xcd","\x64"),
	HX_HCSTRING("linearTransformTo","\x22","\xa0","\x49","\x90"),
	HX_HCSTRING("inverse","\xb0","\x4b","\xf1","\x3d"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("get_linearMatrix","\x8f","\xe2","\xe1","\x96"),
	::String(null())
};

void Frame2_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hxmath.frames._Frame2.Frame2_Impl_","\xa1","\xc8","\x8a","\x6e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Frame2_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Frame2_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Frame2_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Frame2_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Frame2_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Frame2_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Frame2_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxmath
} // end namespace frames
} // end namespace _Frame2
