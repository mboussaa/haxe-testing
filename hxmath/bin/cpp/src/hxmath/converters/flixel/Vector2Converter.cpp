// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_hxmath_converters_flixel_Vector2Converter
#include <hxmath/converters/flixel/Vector2Converter.h>
#endif
#ifndef INCLUDED_hxmath_math_Vector2Default
#include <hxmath/math/Vector2Default.h>
#endif

namespace hxmath{
namespace converters{
namespace flixel{

void Vector2Converter_obj::__construct() { }

Dynamic Vector2Converter_obj::__CreateEmpty() { return new Vector2Converter_obj; }

hx::ObjectPtr< Vector2Converter_obj > Vector2Converter_obj::__new()
{
	hx::ObjectPtr< Vector2Converter_obj > _hx_result = new Vector2Converter_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Vector2Converter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Vector2Converter_obj > _hx_result = new Vector2Converter_obj();
	_hx_result->__construct();
	return _hx_result;
}

void Vector2Converter_obj::copyToFlxPoint( ::hxmath::math::Vector2Default v, ::Dynamic p){
            	HX_STACK_FRAME("hxmath.converters.flixel.Vector2Converter","copyToFlxPoint",0x22cb465e,"hxmath.converters.flixel.Vector2Converter.copyToFlxPoint","hxmath/converters/flixel/Vector2Converter.hx",23,0xec0e487f)
            	HX_STACK_ARG(v,"v")
            	HX_STACK_ARG(p,"p")
HXLINE(  24)		 ::Dynamic(p->__Field(HX_("set_x",5b,9b,2f,7a),hx::paccDynamic))(v->x);
HXLINE(  25)		 ::Dynamic(p->__Field(HX_("set_y",5c,9b,2f,7a),hx::paccDynamic))(v->y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2Converter_obj,copyToFlxPoint,(void))

void Vector2Converter_obj::copyFromFlxPoint( ::hxmath::math::Vector2Default v, ::Dynamic p){
            	HX_STACK_FRAME("hxmath.converters.flixel.Vector2Converter","copyFromFlxPoint",0xff43a88d,"hxmath.converters.flixel.Vector2Converter.copyFromFlxPoint","hxmath/converters/flixel/Vector2Converter.hx",35,0xec0e487f)
            	HX_STACK_ARG(v,"v")
            	HX_STACK_ARG(p,"p")
HXLINE(  36)		v->x = ( (Float)(p->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXLINE(  37)		v->y = ( (Float)(p->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2Converter_obj,copyFromFlxPoint,(void))


Vector2Converter_obj::Vector2Converter_obj()
{
}

bool Vector2Converter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"copyToFlxPoint") ) { outValue = copyToFlxPoint_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"copyFromFlxPoint") ) { outValue = copyFromFlxPoint_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Vector2Converter_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Vector2Converter_obj_sStaticStorageInfo = 0;
#endif

static void Vector2Converter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Vector2Converter_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Vector2Converter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Vector2Converter_obj::__mClass,"__mClass");
};

#endif

hx::Class Vector2Converter_obj::__mClass;

static ::String Vector2Converter_obj_sStaticFields[] = {
	HX_HCSTRING("copyToFlxPoint","\x2e","\xeb","\xe3","\x46"),
	HX_HCSTRING("copyFromFlxPoint","\x5d","\x21","\x6b","\xd6"),
	::String(null())
};

void Vector2Converter_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hxmath.converters.flixel.Vector2Converter","\x3e","\x2f","\x46","\xdd");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Vector2Converter_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Vector2Converter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Vector2Converter_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Vector2Converter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Vector2Converter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Vector2Converter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Vector2Converter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxmath
} // end namespace converters
} // end namespace flixel
