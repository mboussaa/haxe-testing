// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_hxmath_math_IntVector2Default
#include <hxmath/math/IntVector2Default.h>
#endif
#ifndef INCLUDED_hxmath_math_Vector2Default
#include <hxmath/math/Vector2Default.h>
#endif
#ifndef INCLUDED_hxmath_math__IntVector2_IntVector2_Impl_
#include <hxmath/math/_IntVector2/IntVector2_Impl_.h>
#endif
#ifndef INCLUDED_hxmath_math__Vector2_Vector2_Impl_
#include <hxmath/math/_Vector2/Vector2_Impl_.h>
#endif

namespace hxmath{
namespace math{
namespace _Vector2{

void Vector2_Impl__obj::__construct() { }

Dynamic Vector2_Impl__obj::__CreateEmpty() { return new Vector2_Impl__obj; }

hx::ObjectPtr< Vector2_Impl__obj > Vector2_Impl__obj::__new()
{
	hx::ObjectPtr< Vector2_Impl__obj > _hx_result = new Vector2_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Vector2_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Vector2_Impl__obj > _hx_result = new Vector2_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Int Vector2_Impl__obj::elementCount;

 ::hxmath::math::Vector2Default Vector2_Impl__obj::_new(Float x,Float y){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","_new",0x48ceed4e,"hxmath.math._Vector2.Vector2_Impl_._new","hxmath/math/Vector2.hx",77,0xc0be95df)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE(  77)		return  ::hxmath::math::Vector2Default_obj::__new(x,y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2_Impl__obj,_new,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::fromArray(::Array< Float > rawData){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","fromArray",0xd331a4c2,"hxmath.math._Vector2.Vector2_Impl_.fromArray","hxmath/math/Vector2.hx",93,0xc0be95df)
            	HX_STACK_ARG(rawData,"rawData")
HXLINE(  94)		if ((rawData->length != (int)2)) {
HXLINE(  96)			HX_STACK_DO_THROW(HX_("Invalid rawData.",25,ca,34,44));
            		}
HXLINE(  99)		return  ::hxmath::math::Vector2Default_obj::__new(rawData->__get((int)0),rawData->__get((int)1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector2_Impl__obj,fromArray,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::fromPolar(Float angle,Float radius){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","fromPolar",0x743426e7,"hxmath.math._Vector2.Vector2_Impl_.fromPolar","hxmath/math/Vector2.hx",116,0xc0be95df)
            	HX_STACK_ARG(angle,"angle")
            	HX_STACK_ARG(radius,"radius")
HXLINE( 116)		Float _hx_tmp = ::Math_obj::cos(angle);
HXDLIN( 116)		HX_VARI( Float,x) = (radius * _hx_tmp);
HXDLIN( 116)		Float _hx_tmp1 = ::Math_obj::sin(angle);
HXDLIN( 116)		return  ::hxmath::math::Vector2Default_obj::__new(x,(radius * _hx_tmp1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2_Impl__obj,fromPolar,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::fromVector2Shape( ::Dynamic other){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","fromVector2Shape",0xa0f47289,"hxmath.math._Vector2.Vector2_Impl_.fromVector2Shape","hxmath/math/Vector2.hx",128,0xc0be95df)
            	HX_STACK_ARG(other,"other")
HXLINE( 128)		return  ::hxmath::math::Vector2Default_obj::__new( ::Dynamic(other->__Field(HX_("x",78,00,00,00),hx::paccDynamic)), ::Dynamic(other->__Field(HX_("y",79,00,00,00),hx::paccDynamic)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector2_Impl__obj,fromVector2Shape,return )

 ::hxmath::math::IntVector2Default Vector2_Impl__obj::toIntVector2( ::hxmath::math::Vector2Default this1, ::Dynamic func){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","toIntVector2",0x904c5f28,"hxmath.math._Vector2.Vector2_Impl_.toIntVector2","hxmath/math/Vector2.hx",138,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(func,"func")
HXLINE( 139)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 141)		Bool _hx_tmp = hx::IsNull( func );
HXDLIN( 141)		if (_hx_tmp) {
HXLINE( 143)			func = ::Std_obj::_hx_int_dyn();
            		}
HXLINE( 146)		Int _hx_tmp1 = ( (Int)(func(self->x)) );
HXDLIN( 146)		Int _hx_tmp2 = ( (Int)(func(self->y)) );
HXDLIN( 146)		return ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new(_hx_tmp1,_hx_tmp2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2_Impl__obj,toIntVector2,return )

Float Vector2_Impl__obj::dot( ::hxmath::math::Vector2Default a, ::hxmath::math::Vector2Default b){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","dot",0xe158873c,"hxmath.math._Vector2.Vector2_Impl_.dot","hxmath/math/Vector2.hx",159,0xc0be95df)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 159)		return ((a->x * b->x) + (a->y * b->y));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2_Impl__obj,dot,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::multiply( ::hxmath::math::Vector2Default a,Float s){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","multiply",0x446bb491,"hxmath.math._Vector2.Vector2_Impl_.multiply","hxmath/math/Vector2.hx",175,0xc0be95df)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(s,"s")
HXLINE( 175)		HX_VARI(  ::hxmath::math::Vector2Default,self) =  ::hxmath::math::Vector2Default_obj::__new(a->x,a->y);
HXDLIN( 175)		hx::MultEq(self->x,s);
HXDLIN( 175)		hx::MultEq(self->y,s);
HXDLIN( 175)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2_Impl__obj,multiply,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::divide( ::hxmath::math::Vector2Default a,Float s){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","divide",0x76599ca6,"hxmath.math._Vector2.Vector2_Impl_.divide","hxmath/math/Vector2.hx",189,0xc0be95df)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(s,"s")
HXLINE( 189)		HX_VARI(  ::hxmath::math::Vector2Default,self) =  ::hxmath::math::Vector2Default_obj::__new(a->x,a->y);
HXDLIN( 189)		hx::DivEq(self->x,s);
HXDLIN( 189)		hx::DivEq(self->y,s);
HXDLIN( 189)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2_Impl__obj,divide,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::add( ::hxmath::math::Vector2Default a, ::hxmath::math::Vector2Default b){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","add",0xe15636d4,"hxmath.math._Vector2.Vector2_Impl_.add","hxmath/math/Vector2.hx",203,0xc0be95df)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 203)		HX_VARI(  ::hxmath::math::Vector2Default,self) =  ::hxmath::math::Vector2Default_obj::__new(a->x,a->y);
HXDLIN( 203)		hx::AddEq(self->x,b->x);
HXDLIN( 203)		hx::AddEq(self->y,b->y);
HXDLIN( 203)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2_Impl__obj,add,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::subtract( ::hxmath::math::Vector2Default a, ::hxmath::math::Vector2Default b){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","subtract",0xa1f04781,"hxmath.math._Vector2.Vector2_Impl_.subtract","hxmath/math/Vector2.hx",217,0xc0be95df)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 217)		HX_VARI(  ::hxmath::math::Vector2Default,self) =  ::hxmath::math::Vector2Default_obj::__new(a->x,a->y);
HXDLIN( 217)		hx::SubEq(self->x,b->x);
HXDLIN( 217)		hx::SubEq(self->y,b->y);
HXDLIN( 217)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2_Impl__obj,subtract,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::negate( ::hxmath::math::Vector2Default a){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","negate",0x1e60aeef,"hxmath.math._Vector2.Vector2_Impl_.negate","hxmath/math/Vector2.hx",230,0xc0be95df)
            	HX_STACK_ARG(a,"a")
HXLINE( 230)		return  ::hxmath::math::Vector2Default_obj::__new(-(a->x),-(a->y));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector2_Impl__obj,negate,return )

Bool Vector2_Impl__obj::equals( ::hxmath::math::Vector2Default a, ::hxmath::math::Vector2Default b){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","equals",0x773a5b6c,"hxmath.math._Vector2.Vector2_Impl_.equals","hxmath/math/Vector2.hx",246,0xc0be95df)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 246)		Bool _hx_tmp;
HXDLIN( 246)		if (hx::IsNull( a )) {
HXLINE( 246)			_hx_tmp = hx::IsNull( b );
            		}
            		else {
HXLINE( 246)			_hx_tmp = false;
            		}
HXDLIN( 246)		if (!(_hx_tmp)) {
HXLINE( 247)			Bool _hx_tmp1;
HXDLIN( 247)			Bool _hx_tmp2;
HXDLIN( 247)			if (hx::IsNotNull( a )) {
HXLINE( 247)				_hx_tmp2 = hx::IsNotNull( b );
            			}
            			else {
HXLINE( 247)				_hx_tmp2 = false;
            			}
HXDLIN( 247)			if (_hx_tmp2) {
HXLINE( 247)				_hx_tmp1 = (a->x == b->x);
            			}
            			else {
HXLINE( 247)				_hx_tmp1 = false;
            			}
HXDLIN( 247)			if (_hx_tmp1) {
HXLINE( 246)				return (a->y == b->y);
            			}
            			else {
HXLINE( 246)				return false;
            			}
            		}
            		else {
HXLINE( 246)			return true;
            		}
HXDLIN( 246)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2_Impl__obj,equals,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::lerp( ::hxmath::math::Vector2Default a, ::hxmath::math::Vector2Default b,Float t){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","lerp",0x515fea64,"hxmath.math._Vector2.Vector2_Impl_.lerp","hxmath/math/Vector2.hx",263,0xc0be95df)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(t,"t")
HXLINE( 263)		return  ::hxmath::math::Vector2Default_obj::__new((((((Float)1.0) - t) * a->x) + (t * b->x)),(((((Float)1.0) - t) * a->y) + (t * b->y)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Vector2_Impl__obj,lerp,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::max( ::hxmath::math::Vector2Default a, ::hxmath::math::Vector2Default b){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","max",0xe15f4f57,"hxmath.math._Vector2.Vector2_Impl_.max","hxmath/math/Vector2.hx",277,0xc0be95df)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 277)		HX_VARI(  ::hxmath::math::Vector2Default,self) =  ::hxmath::math::Vector2Default_obj::__new(a->x,a->y);
HXDLIN( 277)		self->x = ::Math_obj::max(self->x,b->x);
HXDLIN( 277)		self->y = ::Math_obj::max(self->y,b->y);
HXDLIN( 277)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2_Impl__obj,max,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::min( ::hxmath::math::Vector2Default a, ::hxmath::math::Vector2Default b){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","min",0xe15f5645,"hxmath.math._Vector2.Vector2_Impl_.min","hxmath/math/Vector2.hx",290,0xc0be95df)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 290)		HX_VARI(  ::hxmath::math::Vector2Default,self) =  ::hxmath::math::Vector2Default_obj::__new(a->x,a->y);
HXDLIN( 290)		self->x = ::Math_obj::min(self->x,b->x);
HXDLIN( 290)		self->y = ::Math_obj::min(self->y,b->y);
HXDLIN( 290)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2_Impl__obj,min,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::project( ::hxmath::math::Vector2Default a, ::hxmath::math::Vector2Default b){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","project",0x9d232d0c,"hxmath.math._Vector2.Vector2_Impl_.project","hxmath/math/Vector2.hx",303,0xc0be95df)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 303)		HX_VARI(  ::hxmath::math::Vector2Default,self) =  ::hxmath::math::Vector2Default_obj::__new(a->x,a->y);
HXDLIN( 303)		HX_VARI( Float,s) = ((Float)((self->x * b->x) + (self->y * b->y)) / (Float)((b->x * b->x) + (b->y * b->y)));
HXDLIN( 303)		{
HXLINE( 303)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 303)			while((_g < (int)2)){
HXLINE( 303)				HX_VARI( Int,i) = _g++;
HXDLIN( 303)				{
HXLINE( 303)					 ::Dynamic _hx_tmp;
HXDLIN( 303)					switch((int)(i)){
            						case (int)0: {
HXLINE( 303)							_hx_tmp = b->x;
            						}
            						break;
            						case (int)1: {
HXLINE( 303)							_hx_tmp = b->y;
            						}
            						break;
            						default:{
HXLINE( 303)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 303)					HX_VARI( Float,value) = ( (Float)(_hx_tmp) );
HXDLIN( 303)					switch((int)(i)){
            						case (int)0: {
HXLINE( 303)							self->x = value;
            						}
            						break;
            						case (int)1: {
HXLINE( 303)							self->y = value;
            						}
            						break;
            						default:{
HXLINE( 303)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXDLIN( 303)		{
HXLINE( 303)			hx::MultEq(self->x,s);
HXDLIN( 303)			hx::MultEq(self->y,s);
            		}
HXDLIN( 303)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2_Impl__obj,project,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::reflect( ::hxmath::math::Vector2Default v, ::hxmath::math::Vector2Default normal){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","reflect",0x90619e70,"hxmath.math._Vector2.Vector2_Impl_.reflect","hxmath/math/Vector2.hx",316,0xc0be95df)
            	HX_STACK_ARG(v,"v")
            	HX_STACK_ARG(normal,"normal")
HXLINE( 316)		HX_VARI(  ::hxmath::math::Vector2Default,self) =  ::hxmath::math::Vector2Default_obj::__new(v->x,v->y);
HXDLIN( 316)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self1,"self") =  ::hxmath::math::Vector2Default_obj::__new(self->x,self->y);
HXDLIN( 316)		HX_VARI( Float,s) = ((Float)((self1->x * normal->x) + (self1->y * normal->y)) / (Float)((normal->x * normal->x) + (normal->y * normal->y)));
HXDLIN( 316)		{
HXLINE( 316)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 316)			while((_g < (int)2)){
HXLINE( 316)				HX_VARI( Int,i) = _g++;
HXDLIN( 316)				{
HXLINE( 316)					 ::Dynamic _hx_tmp;
HXDLIN( 316)					switch((int)(i)){
            						case (int)0: {
HXLINE( 316)							_hx_tmp = normal->x;
            						}
            						break;
            						case (int)1: {
HXLINE( 316)							_hx_tmp = normal->y;
            						}
            						break;
            						default:{
HXLINE( 316)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 316)					HX_VARI( Float,value) = ( (Float)(_hx_tmp) );
HXDLIN( 316)					switch((int)(i)){
            						case (int)0: {
HXLINE( 316)							self1->x = value;
            						}
            						break;
            						case (int)1: {
HXLINE( 316)							self1->y = value;
            						}
            						break;
            						default:{
HXLINE( 316)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXDLIN( 316)		{
HXLINE( 316)			hx::MultEq(self1->x,s);
HXDLIN( 316)			hx::MultEq(self1->y,s);
            		}
HXDLIN( 316)		{
HXLINE( 316)			hx::MultEq(self1->x,((Float)2.0));
HXDLIN( 316)			hx::MultEq(self1->y,((Float)2.0));
            		}
HXDLIN( 316)		{
HXLINE( 316)			hx::SubEq(self->x,self1->x);
HXDLIN( 316)			hx::SubEq(self->y,self1->y);
            		}
HXDLIN( 316)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2_Impl__obj,reflect,return )

void Vector2_Impl__obj::orthoNormalize( ::hxmath::math::Vector2Default u, ::hxmath::math::Vector2Default v){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","orthoNormalize",0x00223b62,"hxmath.math._Vector2.Vector2_Impl_.orthoNormalize","hxmath/math/Vector2.hx",327,0xc0be95df)
            	HX_STACK_ARG(u,"u")
            	HX_STACK_ARG(v,"v")
HXLINE( 328)		{
HXLINE( 328)			Float _hx_tmp = ((u->x * u->x) + (u->y * u->y));
HXDLIN( 328)			HX_VARI( Float,length) = ::Math_obj::sqrt(_hx_tmp);
HXDLIN( 328)			if ((length > ((Float)0.0))) {
HXLINE( 328)				hx::DivEq(u->x,length);
HXDLIN( 328)				hx::DivEq(u->y,length);
            			}
            		}
HXLINE( 330)		{
HXLINE( 330)			HX_VARI(  ::hxmath::math::Vector2Default,self) =  ::hxmath::math::Vector2Default_obj::__new(v->x,v->y);
HXDLIN( 330)			HX_VARI( Float,s) = ((Float)((self->x * u->x) + (self->y * u->y)) / (Float)((u->x * u->x) + (u->y * u->y)));
HXDLIN( 330)			{
HXLINE( 330)				HX_VARI( Int,_g) = (int)0;
HXDLIN( 330)				while((_g < (int)2)){
HXLINE( 330)					HX_VARI( Int,i) = _g++;
HXDLIN( 330)					{
HXLINE( 330)						 ::Dynamic _hx_tmp1;
HXDLIN( 330)						switch((int)(i)){
            							case (int)0: {
HXLINE( 330)								_hx_tmp1 = u->x;
            							}
            							break;
            							case (int)1: {
HXLINE( 330)								_hx_tmp1 = u->y;
            							}
            							break;
            							default:{
HXLINE( 330)								HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            							}
            						}
HXDLIN( 330)						HX_VARI( Float,value) = ( (Float)(_hx_tmp1) );
HXDLIN( 330)						switch((int)(i)){
            							case (int)0: {
HXLINE( 330)								self->x = value;
            							}
            							break;
            							case (int)1: {
HXLINE( 330)								self->y = value;
            							}
            							break;
            							default:{
HXLINE( 330)								HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            							}
            						}
            					}
            				}
            			}
HXDLIN( 330)			{
HXLINE( 330)				hx::MultEq(self->x,s);
HXDLIN( 330)				hx::MultEq(self->y,s);
            			}
HXDLIN( 330)			hx::SubEq(v->x,self->x);
HXDLIN( 330)			hx::SubEq(v->y,self->y);
            		}
HXLINE( 331)		{
HXLINE( 331)			Float _hx_tmp2 = ((v->x * v->x) + (v->y * v->y));
HXDLIN( 331)			HX_VARI_NAME( Float,length1,"length") = ::Math_obj::sqrt(_hx_tmp2);
HXDLIN( 331)			if ((length1 > ((Float)0.0))) {
HXLINE( 331)				hx::DivEq(v->x,length1);
HXDLIN( 331)				hx::DivEq(v->y,length1);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2_Impl__obj,orthoNormalize,(void))

 ::hxmath::math::Vector2Default Vector2_Impl__obj::set( ::hxmath::math::Vector2Default this1,Float x,Float y){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","set",0xe163e055,"hxmath.math._Vector2.Vector2_Impl_.set","hxmath/math/Vector2.hx",342,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 343)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 345)		self->x = x;
HXLINE( 346)		self->y = y;
HXLINE( 348)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Vector2_Impl__obj,set,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::multiplyWith( ::hxmath::math::Vector2Default this1,Float s){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","multiplyWith",0x2d417337,"hxmath.math._Vector2.Vector2_Impl_.multiplyWith","hxmath/math/Vector2.hx",359,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(s,"s")
HXLINE( 360)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 362)		hx::MultEq(self->x,s);
HXLINE( 363)		hx::MultEq(self->y,s);
HXLINE( 365)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2_Impl__obj,multiplyWith,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::divideWith( ::hxmath::math::Vector2Default this1,Float s){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","divideWith",0x67ad89cc,"hxmath.math._Vector2.Vector2_Impl_.divideWith","hxmath/math/Vector2.hx",376,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(s,"s")
HXLINE( 377)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 379)		hx::DivEq(self->x,s);
HXLINE( 380)		hx::DivEq(self->y,s);
HXLINE( 382)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2_Impl__obj,divideWith,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::addWith( ::hxmath::math::Vector2Default this1, ::hxmath::math::Vector2Default a){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","addWith",0x326dd2fa,"hxmath.math._Vector2.Vector2_Impl_.addWith","hxmath/math/Vector2.hx",393,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(a,"a")
HXLINE( 394)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 396)		hx::AddEq(self->x,a->x);
HXLINE( 397)		hx::AddEq(self->y,a->y);
HXLINE( 399)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2_Impl__obj,addWith,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::subtractWith( ::hxmath::math::Vector2Default this1, ::hxmath::math::Vector2Default a){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","subtractWith",0x4da23e27,"hxmath.math._Vector2.Vector2_Impl_.subtractWith","hxmath/math/Vector2.hx",410,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(a,"a")
HXLINE( 411)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 413)		hx::SubEq(self->x,a->x);
HXLINE( 414)		hx::SubEq(self->y,a->y);
HXLINE( 416)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2_Impl__obj,subtractWith,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::maxWith( ::hxmath::math::Vector2Default this1, ::hxmath::math::Vector2Default a){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","maxWith",0x7660e8fd,"hxmath.math._Vector2.Vector2_Impl_.maxWith","hxmath/math/Vector2.hx",427,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(a,"a")
HXLINE( 428)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 430)		self->x = ::Math_obj::max(self->x,a->x);
HXLINE( 431)		self->y = ::Math_obj::max(self->y,a->y);
HXLINE( 433)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2_Impl__obj,maxWith,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::minWith( ::hxmath::math::Vector2Default this1, ::hxmath::math::Vector2Default a){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","minWith",0xe739feeb,"hxmath.math._Vector2.Vector2_Impl_.minWith","hxmath/math/Vector2.hx",444,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(a,"a")
HXLINE( 445)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 447)		self->x = ::Math_obj::min(self->x,a->x);
HXLINE( 448)		self->y = ::Math_obj::min(self->y,a->y);
HXLINE( 450)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2_Impl__obj,minWith,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::projectOnto( ::hxmath::math::Vector2Default this1, ::hxmath::math::Vector2Default a){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","projectOnto",0x90185b86,"hxmath.math._Vector2.Vector2_Impl_.projectOnto","hxmath/math/Vector2.hx",460,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(a,"a")
HXLINE( 461)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 463)		HX_VARI( Float,s) = ((Float)((self->x * a->x) + (self->y * a->y)) / (Float)((a->x * a->x) + (a->y * a->y)));
HXLINE( 466)		{
HXLINE( 466)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 466)			while((_g < (int)2)){
HXLINE( 466)				HX_VARI( Int,i) = _g++;
HXDLIN( 466)				{
HXLINE( 466)					 ::Dynamic _hx_tmp;
HXDLIN( 466)					switch((int)(i)){
            						case (int)0: {
HXLINE( 466)							_hx_tmp = a->x;
            						}
            						break;
            						case (int)1: {
HXLINE( 466)							_hx_tmp = a->y;
            						}
            						break;
            						default:{
HXLINE( 466)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 466)					HX_VARI( Float,value) = ( (Float)(_hx_tmp) );
HXDLIN( 466)					switch((int)(i)){
            						case (int)0: {
HXLINE( 466)							self->x = value;
            						}
            						break;
            						case (int)1: {
HXLINE( 466)							self->y = value;
            						}
            						break;
            						default:{
HXLINE( 466)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXLINE( 467)		{
HXLINE( 467)			hx::MultEq(self->x,s);
HXDLIN( 467)			hx::MultEq(self->y,s);
            		}
HXLINE( 469)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2_Impl__obj,projectOnto,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::reflectBy( ::hxmath::math::Vector2Default this1, ::hxmath::math::Vector2Default normal){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","reflectBy",0xa2da5467,"hxmath.math._Vector2.Vector2_Impl_.reflectBy","hxmath/math/Vector2.hx",479,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(normal,"normal")
HXLINE( 480)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 482)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self1,"self") =  ::hxmath::math::Vector2Default_obj::__new(self->x,self->y);
HXDLIN( 482)		HX_VARI( Float,s) = ((Float)((self1->x * normal->x) + (self1->y * normal->y)) / (Float)((normal->x * normal->x) + (normal->y * normal->y)));
HXDLIN( 482)		{
HXLINE( 482)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 482)			while((_g < (int)2)){
HXLINE( 482)				HX_VARI( Int,i) = _g++;
HXDLIN( 482)				{
HXLINE( 482)					 ::Dynamic _hx_tmp;
HXDLIN( 482)					switch((int)(i)){
            						case (int)0: {
HXLINE( 482)							_hx_tmp = normal->x;
            						}
            						break;
            						case (int)1: {
HXLINE( 482)							_hx_tmp = normal->y;
            						}
            						break;
            						default:{
HXLINE( 482)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 482)					HX_VARI( Float,value) = ( (Float)(_hx_tmp) );
HXDLIN( 482)					switch((int)(i)){
            						case (int)0: {
HXLINE( 482)							self1->x = value;
            						}
            						break;
            						case (int)1: {
HXLINE( 482)							self1->y = value;
            						}
            						break;
            						default:{
HXLINE( 482)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXDLIN( 482)		{
HXLINE( 482)			hx::MultEq(self1->x,s);
HXDLIN( 482)			hx::MultEq(self1->y,s);
            		}
HXLINE( 483)		{
HXLINE( 483)			hx::MultEq(self1->x,((Float)2.0));
HXDLIN( 483)			hx::MultEq(self1->y,((Float)2.0));
            		}
HXLINE( 485)		{
HXLINE( 485)			hx::SubEq(self->x,self1->x);
HXDLIN( 485)			hx::SubEq(self->y,self1->y);
            		}
HXLINE( 487)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2_Impl__obj,reflectBy,return )

void Vector2_Impl__obj::copyTo( ::hxmath::math::Vector2Default this1, ::hxmath::math::Vector2Default target){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","copyTo",0x807a89bd,"hxmath.math._Vector2.Vector2_Impl_.copyTo","hxmath/math/Vector2.hx",497,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(target,"target")
HXLINE( 498)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 500)		{
HXLINE( 500)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 500)			while((_g < (int)2)){
HXLINE( 500)				HX_VARI( Int,i) = _g++;
HXLINE( 502)				{
HXLINE( 502)					 ::Dynamic _hx_tmp;
HXDLIN( 502)					switch((int)(i)){
            						case (int)0: {
HXLINE( 502)							_hx_tmp = self->x;
            						}
            						break;
            						case (int)1: {
HXLINE( 502)							_hx_tmp = self->y;
            						}
            						break;
            						default:{
HXLINE( 502)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 502)					HX_VARI( Float,value) = ( (Float)(_hx_tmp) );
HXDLIN( 502)					switch((int)(i)){
            						case (int)0: {
HXLINE( 502)							target->x = value;
            						}
            						break;
            						case (int)1: {
HXLINE( 502)							target->y = value;
            						}
            						break;
            						default:{
HXLINE( 502)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2_Impl__obj,copyTo,(void))

void Vector2_Impl__obj::copyToShape( ::hxmath::math::Vector2Default this1, ::Dynamic target){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","copyToShape",0x0a725c24,"hxmath.math._Vector2.Vector2_Impl_.copyToShape","hxmath/math/Vector2.hx",512,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(target,"target")
HXLINE( 513)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 515)		target->__SetField(HX_("x",78,00,00,00),self->x,hx::paccDynamic);
HXLINE( 516)		target->__SetField(HX_("y",79,00,00,00),self->y,hx::paccDynamic);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2_Impl__obj,copyToShape,(void))

void Vector2_Impl__obj::copyFromShape( ::hxmath::math::Vector2Default this1, ::Dynamic source){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","copyFromShape",0xea799555,"hxmath.math._Vector2.Vector2_Impl_.copyFromShape","hxmath/math/Vector2.hx",525,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(source,"source")
HXLINE( 526)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 528)		self->x = ( (Float)(source->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXLINE( 529)		self->y = ( (Float)(source->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2_Impl__obj,copyFromShape,(void))

 ::hxmath::math::Vector2Default Vector2_Impl__obj::clone( ::hxmath::math::Vector2Default this1){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","clone",0xb8902ad0,"hxmath.math._Vector2.Vector2_Impl_.clone","hxmath/math/Vector2.hx",538,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 539)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 540)		return  ::hxmath::math::Vector2Default_obj::__new(self->x,self->y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector2_Impl__obj,clone,return )

Float Vector2_Impl__obj::getArrayElement( ::hxmath::math::Vector2Default this1,Int i){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","getArrayElement",0x0498990c,"hxmath.math._Vector2.Vector2_Impl_.getArrayElement","hxmath/math/Vector2.hx",551,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(i,"i")
HXLINE( 552)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 553)		switch((int)(i)){
            			case (int)0: {
HXLINE( 556)				return self->x;
            			}
            			break;
            			case (int)1: {
HXLINE( 558)				return self->y;
            			}
            			break;
            			default:{
HXLINE( 560)				HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            			}
            		}
HXLINE( 553)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2_Impl__obj,getArrayElement,return )

Float Vector2_Impl__obj::setArrayElement( ::hxmath::math::Vector2Default this1,Int i,Float value){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","setArrayElement",0x00641618,"hxmath.math._Vector2.Vector2_Impl_.setArrayElement","hxmath/math/Vector2.hx",573,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(i,"i")
            	HX_STACK_ARG(value,"value")
HXLINE( 574)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 575)		switch((int)(i)){
            			case (int)0: {
HXLINE( 578)				return (self->x = value);
            			}
            			break;
            			case (int)1: {
HXLINE( 580)				return (self->y = value);
            			}
            			break;
            			default:{
HXLINE( 582)				HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            			}
            		}
HXLINE( 575)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Vector2_Impl__obj,setArrayElement,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::applyNegate( ::hxmath::math::Vector2Default this1){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","applyNegate",0x0ed0b183,"hxmath.math._Vector2.Vector2_Impl_.applyNegate","hxmath/math/Vector2.hx",592,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 593)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 595)		self->x = -(self->x);
HXLINE( 596)		self->y = -(self->y);
HXLINE( 598)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector2_Impl__obj,applyNegate,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::applyScalarFunc( ::hxmath::math::Vector2Default this1, ::Dynamic func){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","applyScalarFunc",0xb0d5e8d1,"hxmath.math._Vector2.Vector2_Impl_.applyScalarFunc","hxmath/math/Vector2.hx",608,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(func,"func")
HXLINE( 609)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 611)		{
HXLINE( 611)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 611)			while((_g < (int)2)){
HXLINE( 611)				HX_VARI( Int,i) = _g++;
HXLINE( 613)				{
HXLINE( 613)					 ::Dynamic _hx_tmp;
HXDLIN( 613)					switch((int)(i)){
            						case (int)0: {
HXLINE( 613)							_hx_tmp = self->x;
            						}
            						break;
            						case (int)1: {
HXLINE( 613)							_hx_tmp = self->y;
            						}
            						break;
            						default:{
HXLINE( 613)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 613)					HX_VARI( Float,value) = ( (Float)(func(_hx_tmp)) );
HXDLIN( 613)					switch((int)(i)){
            						case (int)0: {
HXLINE( 613)							self->x = value;
            						}
            						break;
            						case (int)1: {
HXLINE( 613)							self->y = value;
            						}
            						break;
            						default:{
HXLINE( 613)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXLINE( 616)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2_Impl__obj,applyScalarFunc,return )

Float Vector2_Impl__obj::angleWith( ::hxmath::math::Vector2Default this1, ::hxmath::math::Vector2Default b){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","angleWith",0xc537186c,"hxmath.math._Vector2.Vector2_Impl_.angleWith","hxmath/math/Vector2.hx",626,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(b,"b")
HXLINE( 627)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 628)		Float _hx_tmp = ((self->x * b->x) + (self->y * b->y));
HXDLIN( 628)		Float _hx_tmp1 = ((self->x * self->x) + (self->y * self->y));
HXDLIN( 628)		Float _hx_tmp2 = ::Math_obj::sqrt(_hx_tmp1);
HXDLIN( 628)		Float _hx_tmp3 = ((b->x * b->x) + (b->y * b->y));
HXDLIN( 628)		Float _hx_tmp4 = ::Math_obj::sqrt(_hx_tmp3);
HXDLIN( 628)		return ::Math_obj::acos(((Float)_hx_tmp / (Float)(_hx_tmp2 * _hx_tmp4)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2_Impl__obj,angleWith,return )

Float Vector2_Impl__obj::signedAngleWith( ::hxmath::math::Vector2Default this1, ::hxmath::math::Vector2Default b){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","signedAngleWith",0xa3956330,"hxmath.math._Vector2.Vector2_Impl_.signedAngleWith","hxmath/math/Vector2.hx",644,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(b,"b")
HXLINE( 645)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 651)		HX_VARI( Float,x) = ((self->x * b->y) - (b->x * self->y));
HXDLIN( 651)		HX_VARI( Float,w) = (int)0;
HXDLIN( 651)		Int _hx_tmp;
HXDLIN( 651)		Float _hx_tmp1 = ::Math_obj::abs(x);
HXDLIN( 651)		if ((_hx_tmp1 < w)) {
HXLINE( 651)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE( 651)			if ((x <= -(w))) {
HXLINE( 651)				_hx_tmp = (int)-1;
            			}
            			else {
HXLINE( 651)				_hx_tmp = (int)1;
            			}
            		}
HXDLIN( 651)		Float _hx_tmp2 = ((self->x * b->x) + (self->y * b->y));
HXDLIN( 651)		Float _hx_tmp3 = ((self->x * self->x) + (self->y * self->y));
HXDLIN( 651)		Float _hx_tmp4 = ::Math_obj::sqrt(_hx_tmp3);
HXDLIN( 651)		Float _hx_tmp5 = ((b->x * b->x) + (b->y * b->y));
HXDLIN( 651)		Float _hx_tmp6 = ::Math_obj::sqrt(_hx_tmp5);
HXDLIN( 651)		Float _hx_tmp7 = ::Math_obj::acos(((Float)_hx_tmp2 / (Float)(_hx_tmp4 * _hx_tmp6)));
HXDLIN( 651)		return (_hx_tmp * _hx_tmp7);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2_Impl__obj,signedAngleWith,return )

Float Vector2_Impl__obj::distanceTo( ::hxmath::math::Vector2Default this1, ::hxmath::math::Vector2Default b){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","distanceTo",0x88f6dbbd,"hxmath.math._Vector2.Vector2_Impl_.distanceTo","hxmath/math/Vector2.hx",661,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(b,"b")
HXLINE( 662)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 664)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self1,"self") =  ::hxmath::math::Vector2Default_obj::__new(self->x,self->y);
HXDLIN( 664)		hx::SubEq(self1->x,b->x);
HXDLIN( 664)		hx::SubEq(self1->y,b->y);
HXDLIN( 664)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self2,"self") = self1;
HXDLIN( 664)		Float _hx_tmp = ((self2->x * self2->x) + (self2->y * self2->y));
HXDLIN( 664)		return ::Math_obj::sqrt(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2_Impl__obj,distanceTo,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::normalize( ::hxmath::math::Vector2Default this1){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","normalize",0xa4ba8480,"hxmath.math._Vector2.Vector2_Impl_.normalize","hxmath/math/Vector2.hx",673,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 674)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 676)		Float _hx_tmp = ((self->x * self->x) + (self->y * self->y));
HXDLIN( 676)		HX_VARI( Float,length) = ::Math_obj::sqrt(_hx_tmp);
HXLINE( 678)		if ((length > ((Float)0.0))) {
HXLINE( 680)			hx::DivEq(self->x,length);
HXDLIN( 680)			hx::DivEq(self->y,length);
            		}
HXLINE( 683)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector2_Impl__obj,normalize,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::normalizeTo( ::hxmath::math::Vector2Default this1,Float newLength){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","normalizeTo",0x2bc4ee1b,"hxmath.math._Vector2.Vector2_Impl_.normalizeTo","hxmath/math/Vector2.hx",693,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newLength,"newLength")
HXLINE( 694)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 696)		{
HXLINE( 696)			Float _hx_tmp = ((self->x * self->x) + (self->y * self->y));
HXDLIN( 696)			HX_VARI( Float,length) = ::Math_obj::sqrt(_hx_tmp);
HXDLIN( 696)			if ((length > ((Float)0.0))) {
HXLINE( 696)				hx::DivEq(self->x,length);
HXDLIN( 696)				hx::DivEq(self->y,length);
            			}
            		}
HXLINE( 697)		{
HXLINE( 697)			hx::MultEq(self->x,newLength);
HXDLIN( 697)			hx::MultEq(self->y,newLength);
            		}
HXLINE( 699)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector2_Impl__obj,normalizeTo,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::clamp( ::hxmath::math::Vector2Default this1,Float min,Float max){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","clamp",0xb8858a6e,"hxmath.math._Vector2.Vector2_Impl_.clamp","hxmath/math/Vector2.hx",710,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(min,"min")
            	HX_STACK_ARG(max,"max")
HXLINE( 711)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 713)		Float _hx_tmp = ((self->x * self->x) + (self->y * self->y));
HXDLIN( 713)		HX_VARI( Float,length) = ::Math_obj::sqrt(_hx_tmp);
HXLINE( 715)		if ((length < min)) {
HXLINE( 717)			{
HXLINE( 717)				Float _hx_tmp1 = ((self->x * self->x) + (self->y * self->y));
HXDLIN( 717)				HX_VARI_NAME( Float,length1,"length") = ::Math_obj::sqrt(_hx_tmp1);
HXDLIN( 717)				if ((length1 > ((Float)0.0))) {
HXLINE( 717)					hx::DivEq(self->x,length1);
HXDLIN( 717)					hx::DivEq(self->y,length1);
            				}
            			}
HXDLIN( 717)			{
HXLINE( 717)				hx::MultEq(self->x,min);
HXDLIN( 717)				hx::MultEq(self->y,min);
            			}
            		}
            		else {
HXLINE( 719)			if ((length > max)) {
HXLINE( 721)				{
HXLINE( 721)					Float _hx_tmp2 = ((self->x * self->x) + (self->y * self->y));
HXDLIN( 721)					HX_VARI_NAME( Float,length2,"length") = ::Math_obj::sqrt(_hx_tmp2);
HXDLIN( 721)					if ((length2 > ((Float)0.0))) {
HXLINE( 721)						hx::DivEq(self->x,length2);
HXDLIN( 721)						hx::DivEq(self->y,length2);
            					}
            				}
HXDLIN( 721)				{
HXLINE( 721)					hx::MultEq(self->x,max);
HXDLIN( 721)					hx::MultEq(self->y,max);
            				}
            			}
            		}
HXLINE( 724)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Vector2_Impl__obj,clamp,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::rotate( ::hxmath::math::Vector2Default this1,Float angle, ::hxmath::math::Vector2Default pivot){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","rotate",0x8267b388,"hxmath.math._Vector2.Vector2_Impl_.rotate","hxmath/math/Vector2.hx",735,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(angle,"angle")
            	HX_STACK_ARG(pivot,"pivot")
HXLINE( 736)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 738)		::Math_obj::cos(angle);
HXLINE( 739)		::Math_obj::sin(angle);
HXLINE( 740)		HX_VARI( Float,dx) = (self->x - pivot->x);
HXLINE( 741)		HX_VARI( Float,dy) = (self->y - pivot->y);
HXLINE( 743)		Float _hx_tmp = ::Math_obj::cos(angle);
HXDLIN( 743)		Float _hx_tmp1 = (dx * _hx_tmp);
HXDLIN( 743)		Float _hx_tmp2 = ::Math_obj::sin(angle);
HXDLIN( 743)		self->x = (_hx_tmp1 - (dy * _hx_tmp2));
HXLINE( 744)		Float _hx_tmp3 = ::Math_obj::sin(angle);
HXDLIN( 744)		Float _hx_tmp4 = (dx * _hx_tmp3);
HXDLIN( 744)		Float _hx_tmp5 = ::Math_obj::cos(angle);
HXDLIN( 744)		self->y = (_hx_tmp4 + (dy * _hx_tmp5));
HXLINE( 746)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Vector2_Impl__obj,rotate,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::rotateLeft( ::hxmath::math::Vector2Default this1){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","rotateLeft",0x7cc54baf,"hxmath.math._Vector2.Vector2_Impl_.rotateLeft","hxmath/math/Vector2.hx",755,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 756)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 758)		HX_VARI( Float,newX) = -(self->y);
HXLINE( 759)		self->y = self->x;
HXLINE( 760)		self->x = newX;
HXLINE( 762)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector2_Impl__obj,rotateLeft,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::rotateRight( ::hxmath::math::Vector2Default this1){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","rotateRight",0x26e9fb34,"hxmath.math._Vector2.Vector2_Impl_.rotateRight","hxmath/math/Vector2.hx",771,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 772)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 774)		HX_VARI( Float,newX) = self->y;
HXLINE( 775)		self->y = -(self->x);
HXLINE( 776)		self->x = newX;
HXLINE( 778)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector2_Impl__obj,rotateRight,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::get_zero(){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","get_zero",0x7a8a9d1e,"hxmath.math._Vector2.Vector2_Impl_.get_zero","hxmath/math/Vector2.hx",783,0xc0be95df)
HXLINE( 783)		return  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)0.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vector2_Impl__obj,get_zero,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::get_xAxis(){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","get_xAxis",0x802a8e83,"hxmath.math._Vector2.Vector2_Impl_.get_xAxis","hxmath/math/Vector2.hx",788,0xc0be95df)
HXLINE( 788)		return  ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)0.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vector2_Impl__obj,get_xAxis,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::get_yAxis(){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","get_yAxis",0x13912304,"hxmath.math._Vector2.Vector2_Impl_.get_yAxis","hxmath/math/Vector2.hx",793,0xc0be95df)
HXLINE( 793)		return  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)1.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vector2_Impl__obj,get_yAxis,return )

Float Vector2_Impl__obj::get_length( ::hxmath::math::Vector2Default this1){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","get_length",0x8c990c5c,"hxmath.math._Vector2.Vector2_Impl_.get_length","hxmath/math/Vector2.hx",797,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 798)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 800)		Float _hx_tmp = ((self->x * self->x) + (self->y * self->y));
HXLINE( 799)		return ::Math_obj::sqrt(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector2_Impl__obj,get_length,return )

Float Vector2_Impl__obj::get_lengthSq( ::hxmath::math::Vector2Default this1){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","get_lengthSq",0xae3a241a,"hxmath.math._Vector2.Vector2_Impl_.get_lengthSq","hxmath/math/Vector2.hx",805,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 806)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 807)		return ((self->x * self->x) + (self->y * self->y));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector2_Impl__obj,get_lengthSq,return )

Float Vector2_Impl__obj::get_angle( ::hxmath::math::Vector2Default this1){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","get_angle",0x5fa4ed1d,"hxmath.math._Vector2.Vector2_Impl_.get_angle","hxmath/math/Vector2.hx",813,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 814)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 815)		return ::Math_obj::atan2(self->y,self->x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector2_Impl__obj,get_angle,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::get_normal( ::hxmath::math::Vector2Default this1){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","get_normal",0x1dfae99d,"hxmath.math._Vector2.Vector2_Impl_.get_normal","hxmath/math/Vector2.hx",819,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 820)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 822)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self1,"self") =  ::hxmath::math::Vector2Default_obj::__new(self->x,self->y);
HXDLIN( 822)		Float _hx_tmp = ((self1->x * self1->x) + (self1->y * self1->y));
HXDLIN( 822)		HX_VARI( Float,length) = ::Math_obj::sqrt(_hx_tmp);
HXDLIN( 822)		if ((length > ((Float)0.0))) {
HXLINE( 822)			hx::DivEq(self1->x,length);
HXDLIN( 822)			hx::DivEq(self1->y,length);
            		}
HXDLIN( 822)		return self1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector2_Impl__obj,get_normal,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::get_rotatedLeft( ::hxmath::math::Vector2Default this1){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","get_rotatedLeft",0xf012c31a,"hxmath.math._Vector2.Vector2_Impl_.get_rotatedLeft","hxmath/math/Vector2.hx",827,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 828)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 829)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self1,"self") =  ::hxmath::math::Vector2Default_obj::__new(self->x,self->y);
HXDLIN( 829)		HX_VARI( Float,newX) = -(self1->y);
HXDLIN( 829)		self1->y = self1->x;
HXDLIN( 829)		self1->x = newX;
HXDLIN( 829)		return self1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector2_Impl__obj,get_rotatedLeft,return )

 ::hxmath::math::Vector2Default Vector2_Impl__obj::get_rotatedRight( ::hxmath::math::Vector2Default this1){
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","get_rotatedRight",0x97650169,"hxmath.math._Vector2.Vector2_Impl_.get_rotatedRight","hxmath/math/Vector2.hx",834,0xc0be95df)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 835)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXLINE( 836)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self1,"self") =  ::hxmath::math::Vector2Default_obj::__new(self->x,self->y);
HXDLIN( 836)		HX_VARI( Float,newX) = self1->y;
HXDLIN( 836)		self1->y = -(self1->x);
HXDLIN( 836)		self1->x = newX;
HXDLIN( 836)		return self1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector2_Impl__obj,get_rotatedRight,return )


Vector2_Impl__obj::Vector2_Impl__obj()
{
}

bool Vector2_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"dot") ) { outValue = dot_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"max") ) { outValue = max_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"min") ) { outValue = min_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lerp") ) { outValue = lerp_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { outValue = clone_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clamp") ) { outValue = clamp_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"divide") ) { outValue = divide_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"negate") ) { outValue = negate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyTo") ) { outValue = copyTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rotate") ) { outValue = rotate_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"project") ) { outValue = project_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"reflect") ) { outValue = reflect_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addWith") ) { outValue = addWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"maxWith") ) { outValue = maxWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"minWith") ) { outValue = minWith_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"multiply") ) { outValue = multiply_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subtract") ) { outValue = subtract_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_zero") ) { outValue = get_zero_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromArray") ) { outValue = fromArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromPolar") ) { outValue = fromPolar_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"reflectBy") ) { outValue = reflectBy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"angleWith") ) { outValue = angleWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"normalize") ) { outValue = normalize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_xAxis") ) { outValue = get_xAxis_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_yAxis") ) { outValue = get_yAxis_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_angle") ) { outValue = get_angle_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"divideWith") ) { outValue = divideWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"distanceTo") ) { outValue = distanceTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rotateLeft") ) { outValue = rotateLeft_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_length") ) { outValue = get_length_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_normal") ) { outValue = get_normal_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"projectOnto") ) { outValue = projectOnto_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyToShape") ) { outValue = copyToShape_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"applyNegate") ) { outValue = applyNegate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"normalizeTo") ) { outValue = normalizeTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rotateRight") ) { outValue = rotateRight_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"toIntVector2") ) { outValue = toIntVector2_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"multiplyWith") ) { outValue = multiplyWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subtractWith") ) { outValue = subtractWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_lengthSq") ) { outValue = get_lengthSq_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"copyFromShape") ) { outValue = copyFromShape_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"orthoNormalize") ) { outValue = orthoNormalize_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getArrayElement") ) { outValue = getArrayElement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setArrayElement") ) { outValue = setArrayElement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"applyScalarFunc") ) { outValue = applyScalarFunc_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"signedAngleWith") ) { outValue = signedAngleWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_rotatedLeft") ) { outValue = get_rotatedLeft_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"fromVector2Shape") ) { outValue = fromVector2Shape_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_rotatedRight") ) { outValue = get_rotatedRight_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Vector2_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo Vector2_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Vector2_Impl__obj::elementCount,HX_HCSTRING("elementCount","\x73","\x1c","\x9d","\xaa")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Vector2_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Vector2_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Vector2_Impl__obj::elementCount,"elementCount");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Vector2_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Vector2_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Vector2_Impl__obj::elementCount,"elementCount");
};

#endif

hx::Class Vector2_Impl__obj::__mClass;

static ::String Vector2_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("elementCount","\x73","\x1c","\x9d","\xaa"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("fromArray","\xcf","\x57","\x18","\xda"),
	HX_HCSTRING("fromPolar","\xf4","\xd9","\x1a","\x7b"),
	HX_HCSTRING("fromVector2Shape","\x1c","\xeb","\x29","\x10"),
	HX_HCSTRING("toIntVector2","\x3b","\x52","\xef","\xb6"),
	HX_HCSTRING("dot","\x89","\x42","\x4c","\x00"),
	HX_HCSTRING("multiply","\x24","\xe2","\x8c","\x9a"),
	HX_HCSTRING("divide","\x79","\x2f","\x12","\xbf"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("subtract","\x14","\x75","\x11","\xf8"),
	HX_HCSTRING("negate","\xc2","\x41","\x19","\x67"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("lerp","\x77","\x12","\xb0","\x47"),
	HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"),
	HX_HCSTRING("min","\x92","\x11","\x53","\x00"),
	HX_HCSTRING("project","\xd9","\x12","\xeb","\xf5"),
	HX_HCSTRING("reflect","\x3d","\x84","\x29","\xe9"),
	HX_HCSTRING("orthoNormalize","\x35","\x59","\xb6","\x4b"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("multiplyWith","\x4a","\x66","\xe4","\x53"),
	HX_HCSTRING("divideWith","\x1f","\x82","\xa3","\x6a"),
	HX_HCSTRING("addWith","\xc7","\xb8","\x35","\x8b"),
	HX_HCSTRING("subtractWith","\x3a","\x31","\x45","\x74"),
	HX_HCSTRING("maxWith","\xca","\xce","\x28","\xcf"),
	HX_HCSTRING("minWith","\xb8","\xe4","\x01","\x40"),
	HX_HCSTRING("projectOnto","\xd3","\xab","\x5b","\x24"),
	HX_HCSTRING("reflectBy","\x74","\x07","\xc1","\xa9"),
	HX_HCSTRING("copyTo","\x90","\x1c","\x33","\xc9"),
	HX_HCSTRING("copyToShape","\x71","\xac","\xb5","\x9e"),
	HX_HCSTRING("copyFromShape","\xe2","\x52","\x6b","\x92"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("getArrayElement","\xd9","\x93","\x9e","\xda"),
	HX_HCSTRING("setArrayElement","\xe5","\x10","\x6a","\xd6"),
	HX_HCSTRING("applyNegate","\xd0","\x01","\x14","\xa3"),
	HX_HCSTRING("applyScalarFunc","\x9e","\xe3","\xdb","\x86"),
	HX_HCSTRING("angleWith","\x79","\xcb","\x1d","\xcc"),
	HX_HCSTRING("signedAngleWith","\xfd","\x5d","\x9b","\x79"),
	HX_HCSTRING("distanceTo","\x10","\xd4","\xec","\x8b"),
	HX_HCSTRING("normalize","\x8d","\x37","\xa1","\xab"),
	HX_HCSTRING("normalizeTo","\x68","\x3e","\x08","\xc0"),
	HX_HCSTRING("clamp","\xfb","\x72","\x58","\x48"),
	HX_HCSTRING("rotate","\x5b","\x46","\x20","\xcb"),
	HX_HCSTRING("rotateLeft","\x02","\x44","\xbb","\x7f"),
	HX_HCSTRING("rotateRight","\x81","\x4b","\x2d","\xbb"),
	HX_HCSTRING("get_zero","\xb1","\xca","\xab","\xd0"),
	HX_HCSTRING("get_xAxis","\x90","\x41","\x11","\x87"),
	HX_HCSTRING("get_yAxis","\x11","\xd6","\x77","\x1a"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("get_lengthSq","\x2d","\x17","\xdd","\xd4"),
	HX_HCSTRING("get_angle","\x2a","\xa0","\x8b","\x66"),
	HX_HCSTRING("get_normal","\xf0","\xe1","\xf0","\x20"),
	HX_HCSTRING("get_rotatedLeft","\xe7","\xbd","\x18","\xc6"),
	HX_HCSTRING("get_rotatedRight","\xfc","\x79","\x9a","\x06"),
	::String(null())
};

void Vector2_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hxmath.math._Vector2.Vector2_Impl_","\xa1","\x8f","\xad","\xe7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Vector2_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Vector2_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Vector2_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Vector2_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Vector2_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Vector2_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Vector2_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Vector2_Impl__obj::__boot()
{
{
            	HX_STACK_FRAME("hxmath.math._Vector2.Vector2_Impl_","boot",0x4acb5c1f,"hxmath.math._Vector2.Vector2_Impl_.boot","hxmath/math/Vector2.hx",42,0xc0be95df)
HXLINE(  42)		elementCount = (int)2;
            	}
}

} // end namespace hxmath
} // end namespace math
} // end namespace _Vector2
