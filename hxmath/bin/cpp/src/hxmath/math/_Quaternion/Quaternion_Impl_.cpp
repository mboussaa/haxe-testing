// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_hxmath_math_Matrix3x3Default
#include <hxmath/math/Matrix3x3Default.h>
#endif
#ifndef INCLUDED_hxmath_math_QuaternionDefault
#include <hxmath/math/QuaternionDefault.h>
#endif
#ifndef INCLUDED_hxmath_math_Vector3Default
#include <hxmath/math/Vector3Default.h>
#endif
#ifndef INCLUDED_hxmath_math__Quaternion_Quaternion_Impl_
#include <hxmath/math/_Quaternion/Quaternion_Impl_.h>
#endif

namespace hxmath{
namespace math{
namespace _Quaternion{

void Quaternion_Impl__obj::__construct() { }

Dynamic Quaternion_Impl__obj::__CreateEmpty() { return new Quaternion_Impl__obj; }

hx::ObjectPtr< Quaternion_Impl__obj > Quaternion_Impl__obj::__new()
{
	hx::ObjectPtr< Quaternion_Impl__obj > _hx_result = new Quaternion_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Quaternion_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Quaternion_Impl__obj > _hx_result = new Quaternion_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Int Quaternion_Impl__obj::elementCount;

 ::hxmath::math::QuaternionDefault Quaternion_Impl__obj::_new(Float s,Float x,Float y,Float z){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","_new",0x1cc57150,"hxmath.math._Quaternion.Quaternion_Impl_._new","hxmath/math/Quaternion.hx",72,0xb1a7e490)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
HXLINE(  72)		return  ::hxmath::math::QuaternionDefault_obj::__new(s,x,y,z);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Quaternion_Impl__obj,_new,return )

 ::hxmath::math::QuaternionDefault Quaternion_Impl__obj::fromArray(::Array< Float > rawData){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","fromArray",0xcbd35980,"hxmath.math._Quaternion.Quaternion_Impl_.fromArray","hxmath/math/Quaternion.hx",84,0xb1a7e490)
            	HX_STACK_ARG(rawData,"rawData")
HXLINE(  85)		if ((rawData->length != (int)4)) {
HXLINE(  87)			HX_STACK_DO_THROW(HX_("Invalid rawData.",25,ca,34,44));
            		}
HXLINE(  90)		return  ::hxmath::math::QuaternionDefault_obj::__new(rawData->__get((int)0),rawData->__get((int)1),rawData->__get((int)2),rawData->__get((int)3));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Quaternion_Impl__obj,fromArray,return )

 ::hxmath::math::QuaternionDefault Quaternion_Impl__obj::fromAxisAngle(Float angleDegrees, ::hxmath::math::Vector3Default axis){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","fromAxisAngle",0x2c2b9ad9,"hxmath.math._Quaternion.Quaternion_Impl_.fromAxisAngle","hxmath/math/Quaternion.hx",101,0xb1a7e490)
            	HX_STACK_ARG(angleDegrees,"angleDegrees")
            	HX_STACK_ARG(axis,"axis")
HXLINE( 102)		HX_VARI( Float,angleRadians) = (((Float)::Math_obj::PI / (Float)(int)180) * angleDegrees);
HXLINE( 103)		HX_VARI( Float,cosHalfAngle) = ::Math_obj::cos(((Float)angleRadians / (Float)((Float)2.0)));
HXLINE( 104)		HX_VARI( Float,sinHalfAngle) = ::Math_obj::sin(((Float)angleRadians / (Float)((Float)2.0)));
HXLINE( 106)		return  ::hxmath::math::QuaternionDefault_obj::__new(cosHalfAngle,(sinHalfAngle * axis->x),(sinHalfAngle * axis->y),(sinHalfAngle * axis->z));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Quaternion_Impl__obj,fromAxisAngle,return )

 ::hxmath::math::QuaternionDefault Quaternion_Impl__obj::multiplyScalar( ::hxmath::math::QuaternionDefault a,Float s){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","multiplyScalar",0x510dad1f,"hxmath.math._Quaternion.Quaternion_Impl_.multiplyScalar","hxmath/math/Quaternion.hx",124,0xb1a7e490)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(s,"s")
HXLINE( 124)		HX_VARI(  ::hxmath::math::QuaternionDefault,self) =  ::hxmath::math::QuaternionDefault_obj::__new(a->s,a->x,a->y,a->z);
HXDLIN( 124)		hx::MultEq(self->s,s);
HXDLIN( 124)		hx::MultEq(self->x,s);
HXDLIN( 124)		hx::MultEq(self->y,s);
HXDLIN( 124)		hx::MultEq(self->z,s);
HXDLIN( 124)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Quaternion_Impl__obj,multiplyScalar,return )

 ::hxmath::math::QuaternionDefault Quaternion_Impl__obj::multiply( ::hxmath::math::QuaternionDefault a, ::hxmath::math::QuaternionDefault b){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","multiply",0x56c16193,"hxmath.math._Quaternion.Quaternion_Impl_.multiply","hxmath/math/Quaternion.hx",138,0xb1a7e490)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 138)		return  ::hxmath::math::QuaternionDefault_obj::__new(((((a->s * b->s) - (a->x * b->x)) - (a->y * b->y)) - (a->z * b->z)),((((a->s * b->x) + (b->s * a->x)) + (a->y * b->z)) - (a->z * b->y)),((((a->s * b->y) + (b->s * a->y)) + (a->z * b->x)) - (a->x * b->z)),((((a->s * b->z) + (b->s * a->z)) + (a->x * b->y)) - (a->y * b->x)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Quaternion_Impl__obj,multiply,return )

 ::hxmath::math::QuaternionDefault Quaternion_Impl__obj::add( ::hxmath::math::QuaternionDefault a, ::hxmath::math::QuaternionDefault b){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","add",0xe123a912,"hxmath.math._Quaternion.Quaternion_Impl_.add","hxmath/math/Quaternion.hx",155,0xb1a7e490)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 155)		HX_VARI(  ::hxmath::math::QuaternionDefault,self) =  ::hxmath::math::QuaternionDefault_obj::__new(a->s,a->x,a->y,a->z);
HXDLIN( 155)		hx::AddEq(self->s,b->s);
HXDLIN( 155)		hx::AddEq(self->x,b->x);
HXDLIN( 155)		hx::AddEq(self->y,b->y);
HXDLIN( 155)		hx::AddEq(self->z,b->z);
HXDLIN( 155)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Quaternion_Impl__obj,add,return )

 ::hxmath::math::QuaternionDefault Quaternion_Impl__obj::subtract( ::hxmath::math::QuaternionDefault a, ::hxmath::math::QuaternionDefault b){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","subtract",0xb445f483,"hxmath.math._Quaternion.Quaternion_Impl_.subtract","hxmath/math/Quaternion.hx",169,0xb1a7e490)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 169)		HX_VARI(  ::hxmath::math::QuaternionDefault,self) =  ::hxmath::math::QuaternionDefault_obj::__new(a->s,a->x,a->y,a->z);
HXDLIN( 169)		hx::SubEq(self->s,b->s);
HXDLIN( 169)		hx::SubEq(self->x,b->x);
HXDLIN( 169)		hx::SubEq(self->y,b->y);
HXDLIN( 169)		hx::SubEq(self->z,b->z);
HXDLIN( 169)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Quaternion_Impl__obj,subtract,return )

 ::hxmath::math::QuaternionDefault Quaternion_Impl__obj::conjugate( ::hxmath::math::QuaternionDefault a){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","conjugate",0x344437c9,"hxmath.math._Quaternion.Quaternion_Impl_.conjugate","hxmath/math/Quaternion.hx",182,0xb1a7e490)
            	HX_STACK_ARG(a,"a")
HXLINE( 182)		return  ::hxmath::math::QuaternionDefault_obj::__new(a->s,-(a->x),-(a->y),-(a->z));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Quaternion_Impl__obj,conjugate,return )

 ::hxmath::math::QuaternionDefault Quaternion_Impl__obj::negate( ::hxmath::math::QuaternionDefault a){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","negate",0xc001b771,"hxmath.math._Quaternion.Quaternion_Impl_.negate","hxmath/math/Quaternion.hx",194,0xb1a7e490)
            	HX_STACK_ARG(a,"a")
HXLINE( 194)		return  ::hxmath::math::QuaternionDefault_obj::__new(-(a->s),-(a->x),-(a->y),-(a->z));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Quaternion_Impl__obj,negate,return )

Bool Quaternion_Impl__obj::equals( ::hxmath::math::QuaternionDefault a, ::hxmath::math::QuaternionDefault b){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","equals",0x18db63ee,"hxmath.math._Quaternion.Quaternion_Impl_.equals","hxmath/math/Quaternion.hx",208,0xb1a7e490)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 208)		Bool _hx_tmp;
HXDLIN( 208)		if (hx::IsNull( a )) {
HXLINE( 208)			_hx_tmp = hx::IsNull( b );
            		}
            		else {
HXLINE( 208)			_hx_tmp = false;
            		}
HXDLIN( 208)		if (!(_hx_tmp)) {
HXLINE( 209)			Bool _hx_tmp1;
HXDLIN( 209)			Bool _hx_tmp2;
HXDLIN( 209)			Bool _hx_tmp3;
HXDLIN( 209)			Bool _hx_tmp4;
HXDLIN( 209)			if (hx::IsNotNull( a )) {
HXLINE( 209)				_hx_tmp4 = hx::IsNotNull( b );
            			}
            			else {
HXLINE( 209)				_hx_tmp4 = false;
            			}
HXDLIN( 209)			if (_hx_tmp4) {
HXLINE( 209)				_hx_tmp3 = (a->s == b->s);
            			}
            			else {
HXLINE( 209)				_hx_tmp3 = false;
            			}
HXDLIN( 209)			if (_hx_tmp3) {
HXLINE( 209)				_hx_tmp2 = (a->x == b->x);
            			}
            			else {
HXLINE( 209)				_hx_tmp2 = false;
            			}
HXDLIN( 209)			if (_hx_tmp2) {
HXLINE( 209)				_hx_tmp1 = (a->y == b->y);
            			}
            			else {
HXLINE( 209)				_hx_tmp1 = false;
            			}
HXDLIN( 209)			if (_hx_tmp1) {
HXLINE( 208)				return (a->z == b->z);
            			}
            			else {
HXLINE( 208)				return false;
            			}
            		}
            		else {
HXLINE( 208)			return true;
            		}
HXDLIN( 208)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Quaternion_Impl__obj,equals,return )

 ::hxmath::math::QuaternionDefault Quaternion_Impl__obj::lerp( ::hxmath::math::QuaternionDefault a, ::hxmath::math::QuaternionDefault b,Float t){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","lerp",0x25566e66,"hxmath.math._Quaternion.Quaternion_Impl_.lerp","hxmath/math/Quaternion.hx",227,0xb1a7e490)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(t,"t")
HXLINE( 227)		HX_VARI( Float,s) = (((Float)1.0) - t);
HXDLIN( 227)		HX_VARI(  ::hxmath::math::QuaternionDefault,self) =  ::hxmath::math::QuaternionDefault_obj::__new(a->s,a->x,a->y,a->z);
HXDLIN( 227)		hx::MultEq(self->s,s);
HXDLIN( 227)		hx::MultEq(self->x,s);
HXDLIN( 227)		hx::MultEq(self->y,s);
HXDLIN( 227)		hx::MultEq(self->z,s);
HXDLIN( 227)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,self1,"self") =  ::hxmath::math::QuaternionDefault_obj::__new(b->s,b->x,b->y,b->z);
HXDLIN( 227)		hx::MultEq(self1->s,t);
HXDLIN( 227)		hx::MultEq(self1->x,t);
HXDLIN( 227)		hx::MultEq(self1->y,t);
HXDLIN( 227)		hx::MultEq(self1->z,t);
HXDLIN( 227)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,self2,"self") =  ::hxmath::math::QuaternionDefault_obj::__new(self->s,self->x,self->y,self->z);
HXDLIN( 227)		hx::AddEq(self2->s,self1->s);
HXDLIN( 227)		hx::AddEq(self2->x,self1->x);
HXDLIN( 227)		hx::AddEq(self2->y,self1->y);
HXDLIN( 227)		hx::AddEq(self2->z,self1->z);
HXDLIN( 227)		return self2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Quaternion_Impl__obj,lerp,return )

 ::hxmath::math::QuaternionDefault Quaternion_Impl__obj::slerp( ::hxmath::math::QuaternionDefault a, ::hxmath::math::QuaternionDefault b,Float t){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","slerp",0x92aedd9b,"hxmath.math._Quaternion.Quaternion_Impl_.slerp","hxmath/math/Quaternion.hx",231,0xb1a7e490)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(t,"t")
HXLINE( 232)		HX_VARI( Float,cosHalfTheta) = ((((a->s * b->s) + (a->x * b->x)) + (a->y * b->y)) + (a->z * b->z));
HXLINE( 235)		Float _hx_tmp = ::Math_obj::abs(cosHalfTheta);
HXDLIN( 235)		if ((_hx_tmp >= ((Float)1.0))) {
HXLINE( 237)			return a;
            		}
HXLINE( 240)		HX_VARI( Float,halfTheta) = ::Math_obj::acos(cosHalfTheta);
HXLINE( 241)		HX_VARI( Float,sinHalfTheta) = ::Math_obj::sqrt((((Float)1.0) - (cosHalfTheta * cosHalfTheta)));
HXLINE( 244)		Float _hx_tmp1 = ::Math_obj::abs(sinHalfTheta);
HXDLIN( 244)		if ((_hx_tmp1 < ((Float)1e-3))) {
HXLINE( 246)			HX_VARI( Float,s) = (((Float)1.0) - t);
HXDLIN( 246)			HX_VARI(  ::hxmath::math::QuaternionDefault,self) =  ::hxmath::math::QuaternionDefault_obj::__new(a->s,a->x,a->y,a->z);
HXDLIN( 246)			hx::MultEq(self->s,s);
HXDLIN( 246)			hx::MultEq(self->x,s);
HXDLIN( 246)			hx::MultEq(self->y,s);
HXDLIN( 246)			hx::MultEq(self->z,s);
HXDLIN( 246)			HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,self1,"self") =  ::hxmath::math::QuaternionDefault_obj::__new(b->s,b->x,b->y,b->z);
HXDLIN( 246)			hx::MultEq(self1->s,t);
HXDLIN( 246)			hx::MultEq(self1->x,t);
HXDLIN( 246)			hx::MultEq(self1->y,t);
HXDLIN( 246)			hx::MultEq(self1->z,t);
HXDLIN( 246)			HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,self2,"self") =  ::hxmath::math::QuaternionDefault_obj::__new(self->s,self->x,self->y,self->z);
HXDLIN( 246)			hx::AddEq(self2->s,self1->s);
HXDLIN( 246)			hx::AddEq(self2->x,self1->x);
HXDLIN( 246)			hx::AddEq(self2->y,self1->y);
HXDLIN( 246)			hx::AddEq(self2->z,self1->z);
HXDLIN( 246)			HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,self3,"self") = self2;
HXDLIN( 246)			Float _hx_tmp2 = ((((self3->s * self3->s) + (self3->x * self3->x)) + (self3->y * self3->y)) + (self3->z * self3->z));
HXDLIN( 246)			HX_VARI( Float,length) = ::Math_obj::sqrt(_hx_tmp2);
HXDLIN( 246)			if ((length > ((Float)0.0))) {
HXLINE( 246)				HX_VARI( Float,k) = ((Float)((Float)1.0) / (Float)length);
HXDLIN( 246)				{
HXLINE( 246)					hx::MultEq(self3->s,k);
HXDLIN( 246)					hx::MultEq(self3->x,k);
HXDLIN( 246)					hx::MultEq(self3->y,k);
HXDLIN( 246)					hx::MultEq(self3->z,k);
            				}
            			}
HXDLIN( 246)			return self3;
            		}
HXLINE( 250)		Float _hx_tmp3 = ::Math_obj::sin((((int)1 - t) * halfTheta));
HXDLIN( 250)		HX_VARI( Float,ta) = ((Float)_hx_tmp3 / (Float)sinHalfTheta);
HXLINE( 251)		Float _hx_tmp4 = ::Math_obj::sin((t * halfTheta));
HXDLIN( 251)		HX_VARI( Float,tb) = ((Float)_hx_tmp4 / (Float)sinHalfTheta);
HXLINE( 253)		HX_VARI(  ::hxmath::math::QuaternionDefault,result) =  ::hxmath::math::QuaternionDefault_obj::__new((int)0,(int)0,(int)0,(int)0);
HXLINE( 255)		Float _hx_tmp5 = (a->x * ta);
HXDLIN( 255)		Float _hx_tmp6 = (b->x * tb);
HXDLIN( 255)		result->x = (_hx_tmp5 + _hx_tmp6);
HXLINE( 256)		Float _hx_tmp7 = (a->y * ta);
HXDLIN( 256)		Float _hx_tmp8 = (b->y * tb);
HXDLIN( 256)		result->y = (_hx_tmp7 + _hx_tmp8);
HXLINE( 257)		Float _hx_tmp9 = (a->z * ta);
HXDLIN( 257)		Float _hx_tmp10 = (b->z * tb);
HXDLIN( 257)		result->z = (_hx_tmp9 + _hx_tmp10);
HXLINE( 258)		Float _hx_tmp11 = (a->s * ta);
HXDLIN( 258)		Float _hx_tmp12 = (b->s * tb);
HXDLIN( 258)		result->s = (_hx_tmp11 + _hx_tmp12);
HXLINE( 260)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Quaternion_Impl__obj,slerp,return )

Float Quaternion_Impl__obj::dot( ::hxmath::math::QuaternionDefault a, ::hxmath::math::QuaternionDefault b){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","dot",0xe125f97a,"hxmath.math._Quaternion.Quaternion_Impl_.dot","hxmath/math/Quaternion.hx",271,0xb1a7e490)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 271)		return ((((a->s * b->s) + (a->x * b->x)) + (a->y * b->y)) + (a->z * b->z));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Quaternion_Impl__obj,dot,return )

 ::hxmath::math::QuaternionDefault Quaternion_Impl__obj::set( ::hxmath::math::QuaternionDefault this1,Float s,Float x,Float y,Float z){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","set",0xe1315293,"hxmath.math._Quaternion.Quaternion_Impl_.set","hxmath/math/Quaternion.hx",287,0xb1a7e490)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
HXLINE( 288)		HX_VARI(  ::hxmath::math::QuaternionDefault,self) = this1;
HXLINE( 290)		self->s = s;
HXLINE( 291)		self->x = x;
HXLINE( 292)		self->y = y;
HXLINE( 293)		self->z = z;
HXLINE( 295)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Quaternion_Impl__obj,set,return )

 ::hxmath::math::QuaternionDefault Quaternion_Impl__obj::invert( ::hxmath::math::QuaternionDefault this1){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","invert",0xf8c15cc5,"hxmath.math._Quaternion.Quaternion_Impl_.invert","hxmath/math/Quaternion.hx",304,0xb1a7e490)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 305)		HX_VARI(  ::hxmath::math::QuaternionDefault,self) = this1;
HXLINE( 307)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,self1,"self") =  ::hxmath::math::QuaternionDefault_obj::__new(self->s,self->x,self->y,self->z);
HXDLIN( 307)		self1->x = -(self1->x);
HXDLIN( 307)		self1->y = -(self1->y);
HXDLIN( 307)		self1->z = -(self1->z);
HXDLIN( 307)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,self2,"self") = self1;
HXDLIN( 307)		Float _hx_tmp = ((((self2->s * self2->s) + (self2->x * self2->x)) + (self2->y * self2->y)) + (self2->z * self2->z));
HXDLIN( 307)		HX_VARI( Float,length) = ::Math_obj::sqrt(_hx_tmp);
HXDLIN( 307)		if ((length > ((Float)0.0))) {
HXLINE( 307)			HX_VARI( Float,k) = ((Float)((Float)1.0) / (Float)length);
HXDLIN( 307)			{
HXLINE( 307)				hx::MultEq(self2->s,k);
HXDLIN( 307)				hx::MultEq(self2->x,k);
HXDLIN( 307)				hx::MultEq(self2->y,k);
HXDLIN( 307)				hx::MultEq(self2->z,k);
            			}
            		}
HXDLIN( 307)		return self2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Quaternion_Impl__obj,invert,return )

 ::hxmath::math::QuaternionDefault Quaternion_Impl__obj::multiplyWithScalar( ::hxmath::math::QuaternionDefault this1,Float s){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","multiplyWithScalar",0x16fd5545,"hxmath.math._Quaternion.Quaternion_Impl_.multiplyWithScalar","hxmath/math/Quaternion.hx",319,0xb1a7e490)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(s,"s")
HXLINE( 320)		HX_VARI(  ::hxmath::math::QuaternionDefault,self) = this1;
HXLINE( 322)		hx::MultEq(self->s,s);
HXLINE( 323)		hx::MultEq(self->x,s);
HXLINE( 324)		hx::MultEq(self->y,s);
HXLINE( 325)		hx::MultEq(self->z,s);
HXLINE( 327)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Quaternion_Impl__obj,multiplyWithScalar,return )

 ::hxmath::math::QuaternionDefault Quaternion_Impl__obj::addWith( ::hxmath::math::QuaternionDefault this1, ::hxmath::math::QuaternionDefault a){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","addWith",0xfdb43c38,"hxmath.math._Quaternion.Quaternion_Impl_.addWith","hxmath/math/Quaternion.hx",338,0xb1a7e490)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(a,"a")
HXLINE( 339)		HX_VARI(  ::hxmath::math::QuaternionDefault,self) = this1;
HXLINE( 341)		hx::AddEq(self->s,a->s);
HXLINE( 342)		hx::AddEq(self->x,a->x);
HXLINE( 343)		hx::AddEq(self->y,a->y);
HXLINE( 344)		hx::AddEq(self->z,a->z);
HXLINE( 346)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Quaternion_Impl__obj,addWith,return )

 ::hxmath::math::QuaternionDefault Quaternion_Impl__obj::subtractWith( ::hxmath::math::QuaternionDefault this1, ::hxmath::math::QuaternionDefault a){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","subtractWith",0x279f9429,"hxmath.math._Quaternion.Quaternion_Impl_.subtractWith","hxmath/math/Quaternion.hx",357,0xb1a7e490)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(a,"a")
HXLINE( 358)		HX_VARI(  ::hxmath::math::QuaternionDefault,self) = this1;
HXLINE( 360)		hx::SubEq(self->s,a->s);
HXLINE( 361)		hx::SubEq(self->x,a->x);
HXLINE( 362)		hx::SubEq(self->y,a->y);
HXLINE( 363)		hx::SubEq(self->z,a->z);
HXLINE( 365)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Quaternion_Impl__obj,subtractWith,return )

void Quaternion_Impl__obj::copyTo( ::hxmath::math::QuaternionDefault this1, ::hxmath::math::QuaternionDefault target){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","copyTo",0x221b923f,"hxmath.math._Quaternion.Quaternion_Impl_.copyTo","hxmath/math/Quaternion.hx",375,0xb1a7e490)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(target,"target")
HXLINE( 376)		HX_VARI(  ::hxmath::math::QuaternionDefault,self) = this1;
HXLINE( 378)		{
HXLINE( 378)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 378)			while((_g < (int)4)){
HXLINE( 378)				HX_VARI( Int,i) = _g++;
HXLINE( 380)				{
HXLINE( 380)					 ::Dynamic _hx_tmp;
HXDLIN( 380)					switch((int)(i)){
            						case (int)0: {
HXLINE( 380)							_hx_tmp = self->s;
            						}
            						break;
            						case (int)1: {
HXLINE( 380)							_hx_tmp = self->x;
            						}
            						break;
            						case (int)2: {
HXLINE( 380)							_hx_tmp = self->y;
            						}
            						break;
            						case (int)3: {
HXLINE( 380)							_hx_tmp = self->z;
            						}
            						break;
            						default:{
HXLINE( 380)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 380)					HX_VARI( Float,value) = ( (Float)(_hx_tmp) );
HXDLIN( 380)					switch((int)(i)){
            						case (int)0: {
HXLINE( 380)							target->s = value;
            						}
            						break;
            						case (int)1: {
HXLINE( 380)							target->x = value;
            						}
            						break;
            						case (int)2: {
HXLINE( 380)							target->y = value;
            						}
            						break;
            						case (int)3: {
HXLINE( 380)							target->z = value;
            						}
            						break;
            						default:{
HXLINE( 380)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Quaternion_Impl__obj,copyTo,(void))

void Quaternion_Impl__obj::copyToShape( ::hxmath::math::QuaternionDefault this1, ::Dynamic target){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","copyToShape",0xb6793c62,"hxmath.math._Quaternion.Quaternion_Impl_.copyToShape","hxmath/math/Quaternion.hx",390,0xb1a7e490)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(target,"target")
HXLINE( 391)		HX_VARI(  ::hxmath::math::QuaternionDefault,self) = this1;
HXLINE( 393)		target->__SetField(HX_("s",73,00,00,00),self->s,hx::paccDynamic);
HXLINE( 394)		target->__SetField(HX_("x",78,00,00,00),self->x,hx::paccDynamic);
HXLINE( 395)		target->__SetField(HX_("y",79,00,00,00),self->y,hx::paccDynamic);
HXLINE( 396)		target->__SetField(HX_("z",7a,00,00,00),self->z,hx::paccDynamic);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Quaternion_Impl__obj,copyToShape,(void))

void Quaternion_Impl__obj::copyFromShape( ::hxmath::math::QuaternionDefault this1, ::Dynamic source){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","copyFromShape",0xce278113,"hxmath.math._Quaternion.Quaternion_Impl_.copyFromShape","hxmath/math/Quaternion.hx",405,0xb1a7e490)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(source,"source")
HXLINE( 406)		HX_VARI(  ::hxmath::math::QuaternionDefault,self) = this1;
HXLINE( 408)		self->s = ( (Float)(source->__Field(HX_("s",73,00,00,00),hx::paccDynamic)) );
HXLINE( 409)		self->x = ( (Float)(source->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXLINE( 410)		self->y = ( (Float)(source->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXLINE( 411)		self->z = ( (Float)(source->__Field(HX_("z",7a,00,00,00),hx::paccDynamic)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Quaternion_Impl__obj,copyFromShape,(void))

 ::hxmath::math::QuaternionDefault Quaternion_Impl__obj::clone( ::hxmath::math::QuaternionDefault this1){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","clone",0x5c4d288e,"hxmath.math._Quaternion.Quaternion_Impl_.clone","hxmath/math/Quaternion.hx",420,0xb1a7e490)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 421)		HX_VARI(  ::hxmath::math::QuaternionDefault,self) = this1;
HXLINE( 422)		return  ::hxmath::math::QuaternionDefault_obj::__new(self->s,self->x,self->y,self->z);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Quaternion_Impl__obj,clone,return )

Float Quaternion_Impl__obj::getArrayElement( ::hxmath::math::QuaternionDefault this1,Int i){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","getArrayElement",0xa067704a,"hxmath.math._Quaternion.Quaternion_Impl_.getArrayElement","hxmath/math/Quaternion.hx",433,0xb1a7e490)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(i,"i")
HXLINE( 434)		HX_VARI(  ::hxmath::math::QuaternionDefault,self) = this1;
HXLINE( 435)		switch((int)(i)){
            			case (int)0: {
HXLINE( 438)				return self->s;
            			}
            			break;
            			case (int)1: {
HXLINE( 440)				return self->x;
            			}
            			break;
            			case (int)2: {
HXLINE( 442)				return self->y;
            			}
            			break;
            			case (int)3: {
HXLINE( 444)				return self->z;
            			}
            			break;
            			default:{
HXLINE( 446)				HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            			}
            		}
HXLINE( 435)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Quaternion_Impl__obj,getArrayElement,return )

Float Quaternion_Impl__obj::setArrayElement( ::hxmath::math::QuaternionDefault this1,Int i,Float value){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","setArrayElement",0x9c32ed56,"hxmath.math._Quaternion.Quaternion_Impl_.setArrayElement","hxmath/math/Quaternion.hx",459,0xb1a7e490)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(i,"i")
            	HX_STACK_ARG(value,"value")
HXLINE( 460)		HX_VARI(  ::hxmath::math::QuaternionDefault,self) = this1;
HXLINE( 461)		switch((int)(i)){
            			case (int)0: {
HXLINE( 464)				return (self->s = value);
            			}
            			break;
            			case (int)1: {
HXLINE( 466)				return (self->x = value);
            			}
            			break;
            			case (int)2: {
HXLINE( 468)				return (self->y = value);
            			}
            			break;
            			case (int)3: {
HXLINE( 470)				return (self->z = value);
            			}
            			break;
            			default:{
HXLINE( 472)				HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            			}
            		}
HXLINE( 461)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Quaternion_Impl__obj,setArrayElement,return )

 ::hxmath::math::QuaternionDefault Quaternion_Impl__obj::applyScalarFunc( ::hxmath::math::QuaternionDefault this1, ::Dynamic func){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","applyScalarFunc",0x4ca4c00f,"hxmath.math._Quaternion.Quaternion_Impl_.applyScalarFunc","hxmath/math/Quaternion.hx",483,0xb1a7e490)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(func,"func")
HXLINE( 484)		HX_VARI(  ::hxmath::math::QuaternionDefault,self) = this1;
HXLINE( 486)		{
HXLINE( 486)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 486)			while((_g < (int)4)){
HXLINE( 486)				HX_VARI( Int,i) = _g++;
HXLINE( 488)				{
HXLINE( 488)					 ::Dynamic _hx_tmp;
HXDLIN( 488)					switch((int)(i)){
            						case (int)0: {
HXLINE( 488)							_hx_tmp = self->s;
            						}
            						break;
            						case (int)1: {
HXLINE( 488)							_hx_tmp = self->x;
            						}
            						break;
            						case (int)2: {
HXLINE( 488)							_hx_tmp = self->y;
            						}
            						break;
            						case (int)3: {
HXLINE( 488)							_hx_tmp = self->z;
            						}
            						break;
            						default:{
HXLINE( 488)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 488)					HX_VARI( Float,value) = ( (Float)(func(_hx_tmp)) );
HXDLIN( 488)					switch((int)(i)){
            						case (int)0: {
HXLINE( 488)							self->s = value;
            						}
            						break;
            						case (int)1: {
HXLINE( 488)							self->x = value;
            						}
            						break;
            						case (int)2: {
HXLINE( 488)							self->y = value;
            						}
            						break;
            						case (int)3: {
HXLINE( 488)							self->z = value;
            						}
            						break;
            						default:{
HXLINE( 488)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXLINE( 491)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Quaternion_Impl__obj,applyScalarFunc,return )

 ::hxmath::math::QuaternionDefault Quaternion_Impl__obj::log( ::hxmath::math::QuaternionDefault this1){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","log",0xe12c0b75,"hxmath.math._Quaternion.Quaternion_Impl_.log","hxmath/math/Quaternion.hx",500,0xb1a7e490)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 501)		HX_VARI(  ::hxmath::math::QuaternionDefault,self) = this1;
HXLINE( 502)		HX_VARI( Float,theta) = ::Math_obj::acos(self->s);
HXLINE( 503)		HX_VARI( Float,sinTheta) = ::Math_obj::sin(theta);
HXLINE( 506)		if ((sinTheta > ((Float)0.0))) {
HXLINE( 508)			HX_VARI( Float,k) = ((Float)theta / (Float)sinTheta);
HXLINE( 509)			return  ::hxmath::math::QuaternionDefault_obj::__new(((Float)0.0),(k * self->x),(k * self->y),(k * self->z));
            		}
            		else {
HXLINE( 513)			return  ::hxmath::math::QuaternionDefault_obj::__new((int)0,(int)0,(int)0,(int)0);
            		}
HXLINE( 506)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Quaternion_Impl__obj,log,return )

 ::hxmath::math::QuaternionDefault Quaternion_Impl__obj::exp( ::hxmath::math::QuaternionDefault this1){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","exp",0xe126c38e,"hxmath.math._Quaternion.Quaternion_Impl_.exp","hxmath/math/Quaternion.hx",523,0xb1a7e490)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 524)		HX_VARI(  ::hxmath::math::QuaternionDefault,self) = this1;
HXLINE( 525)		Float _hx_tmp = (((self->x * self->x) + (self->y * self->y)) + (self->z * self->z));
HXDLIN( 525)		HX_VARI( Float,theta) = ::Math_obj::sqrt(_hx_tmp);
HXLINE( 526)		HX_VARI( Float,sinTheta) = ::Math_obj::sin(theta);
HXLINE( 527)		HX_VARI( Float,cosTheta) = ::Math_obj::cos(theta);
HXLINE( 530)		if ((theta > ((Float)0.0))) {
HXLINE( 532)			return  ::hxmath::math::QuaternionDefault_obj::__new(cosTheta,(sinTheta * self->x),(sinTheta * self->y),(sinTheta * self->z));
            		}
            		else {
HXLINE( 536)			return  ::hxmath::math::QuaternionDefault_obj::__new(cosTheta,(int)0,(int)0,(int)0);
            		}
HXLINE( 530)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Quaternion_Impl__obj,exp,return )

 ::hxmath::math::Vector3Default Quaternion_Impl__obj::rotate( ::hxmath::math::QuaternionDefault this1, ::hxmath::math::Vector3Default u){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","rotate",0x2408bc0a,"hxmath.math._Quaternion.Quaternion_Impl_.rotate","hxmath/math/Quaternion.hx",547,0xb1a7e490)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(u,"u")
HXLINE( 549)		HX_VARI(  ::hxmath::math::QuaternionDefault,self) = this1;
HXLINE( 551)		HX_VARI( Float,a) = (((Float)2.0) * (((self->x * u->x) + (self->y * u->y)) + (self->z * u->z)));
HXLINE( 552)		HX_VARI( Float,b) = ((((self->s * self->s) - (self->x * self->x)) - (self->y * self->y)) - (self->z * self->z));
HXLINE( 553)		HX_VARI( Float,c) = (((Float)2.0) * self->s);
HXLINE( 555)		return  ::hxmath::math::Vector3Default_obj::__new((((a * self->x) + (b * u->x)) + (c * ((self->y * u->z) - (self->z * u->y)))),(((a * self->y) + (b * u->y)) + (c * ((self->z * u->x) - (self->x * u->z)))),(((a * self->z) + (b * u->z)) + (c * ((self->x * u->y) - (self->y * u->x)))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Quaternion_Impl__obj,rotate,return )

Float Quaternion_Impl__obj::angleWith( ::hxmath::math::QuaternionDefault this1, ::hxmath::math::QuaternionDefault b){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","angleWith",0xbdd8cd2a,"hxmath.math._Quaternion.Quaternion_Impl_.angleWith","hxmath/math/Quaternion.hx",568,0xb1a7e490)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(b,"b")
HXLINE( 569)		HX_VARI(  ::hxmath::math::QuaternionDefault,self) = this1;
HXLINE( 570)		Float _hx_tmp = ((((self->s * b->s) + (self->x * b->x)) + (self->y * b->y)) + (self->z * b->z));
HXDLIN( 570)		Float _hx_tmp1 = ((((self->s * self->s) + (self->x * self->x)) + (self->y * self->y)) + (self->z * self->z));
HXDLIN( 570)		Float _hx_tmp2 = ::Math_obj::sqrt(_hx_tmp1);
HXDLIN( 570)		Float _hx_tmp3 = ((((b->s * b->s) + (b->x * b->x)) + (b->y * b->y)) + (b->z * b->z));
HXDLIN( 570)		Float _hx_tmp4 = ::Math_obj::sqrt(_hx_tmp3);
HXDLIN( 570)		Float _hx_tmp5 = ::Math_obj::acos(((Float)_hx_tmp / (Float)(_hx_tmp2 * _hx_tmp4)));
HXDLIN( 570)		return (((Float)2.0) * _hx_tmp5);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Quaternion_Impl__obj,angleWith,return )

 ::hxmath::math::QuaternionDefault Quaternion_Impl__obj::normalize( ::hxmath::math::QuaternionDefault this1){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","normalize",0x9d5c393e,"hxmath.math._Quaternion.Quaternion_Impl_.normalize","hxmath/math/Quaternion.hx",579,0xb1a7e490)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 580)		HX_VARI(  ::hxmath::math::QuaternionDefault,self) = this1;
HXLINE( 581)		Float _hx_tmp = ((((self->s * self->s) + (self->x * self->x)) + (self->y * self->y)) + (self->z * self->z));
HXDLIN( 581)		HX_VARI( Float,length) = ::Math_obj::sqrt(_hx_tmp);
HXLINE( 583)		if ((length > ((Float)0.0))) {
HXLINE( 585)			HX_VARI( Float,k) = ((Float)((Float)1.0) / (Float)length);
HXLINE( 586)			{
HXLINE( 586)				hx::MultEq(self->s,k);
HXDLIN( 586)				hx::MultEq(self->x,k);
HXDLIN( 586)				hx::MultEq(self->y,k);
HXDLIN( 586)				hx::MultEq(self->z,k);
            			}
            		}
HXLINE( 589)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Quaternion_Impl__obj,normalize,return )

 ::hxmath::math::QuaternionDefault Quaternion_Impl__obj::applyConjugate( ::hxmath::math::QuaternionDefault this1){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","applyConjugate",0x39f3af79,"hxmath.math._Quaternion.Quaternion_Impl_.applyConjugate","hxmath/math/Quaternion.hx",598,0xb1a7e490)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 599)		HX_VARI(  ::hxmath::math::QuaternionDefault,self) = this1;
HXLINE( 601)		self->x = -(self->x);
HXLINE( 602)		self->y = -(self->y);
HXLINE( 603)		self->z = -(self->z);
HXLINE( 605)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Quaternion_Impl__obj,applyConjugate,return )

 ::hxmath::math::QuaternionDefault Quaternion_Impl__obj::applyInvert( ::hxmath::math::QuaternionDefault this1){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","applyInvert",0xf3973715,"hxmath.math._Quaternion.Quaternion_Impl_.applyInvert","hxmath/math/Quaternion.hx",614,0xb1a7e490)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 615)		HX_VARI(  ::hxmath::math::QuaternionDefault,self) = this1;
HXLINE( 617)		self->x = -(self->x);
HXDLIN( 617)		self->y = -(self->y);
HXDLIN( 617)		self->z = -(self->z);
HXDLIN( 617)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,self1,"self") = self;
HXDLIN( 617)		Float _hx_tmp = ((((self1->s * self1->s) + (self1->x * self1->x)) + (self1->y * self1->y)) + (self1->z * self1->z));
HXDLIN( 617)		HX_VARI( Float,length) = ::Math_obj::sqrt(_hx_tmp);
HXDLIN( 617)		if ((length > ((Float)0.0))) {
HXLINE( 617)			HX_VARI( Float,k) = ((Float)((Float)1.0) / (Float)length);
HXDLIN( 617)			{
HXLINE( 617)				hx::MultEq(self1->s,k);
HXDLIN( 617)				hx::MultEq(self1->x,k);
HXDLIN( 617)				hx::MultEq(self1->y,k);
HXDLIN( 617)				hx::MultEq(self1->z,k);
            			}
            		}
HXDLIN( 617)		return self1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Quaternion_Impl__obj,applyInvert,return )

 ::hxmath::math::QuaternionDefault Quaternion_Impl__obj::get_zero(){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","get_zero",0x8ce04a20,"hxmath.math._Quaternion.Quaternion_Impl_.get_zero","hxmath/math/Quaternion.hx",623,0xb1a7e490)
HXLINE( 623)		return  ::hxmath::math::QuaternionDefault_obj::__new((int)0,(int)0,(int)0,(int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Quaternion_Impl__obj,get_zero,return )

 ::hxmath::math::QuaternionDefault Quaternion_Impl__obj::get_identity(){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","get_identity",0x21a35c36,"hxmath.math._Quaternion.Quaternion_Impl_.get_identity","hxmath/math/Quaternion.hx",628,0xb1a7e490)
HXLINE( 628)		return  ::hxmath::math::QuaternionDefault_obj::__new((int)1,(int)0,(int)0,(int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Quaternion_Impl__obj,get_identity,return )

Float Quaternion_Impl__obj::get_length( ::hxmath::math::QuaternionDefault this1){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","get_length",0x21757dde,"hxmath.math._Quaternion.Quaternion_Impl_.get_length","hxmath/math/Quaternion.hx",632,0xb1a7e490)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 633)		HX_VARI(  ::hxmath::math::QuaternionDefault,self) = this1;
HXLINE( 634)		Float _hx_tmp = ((((self->s * self->s) + (self->x * self->x)) + (self->y * self->y)) + (self->z * self->z));
HXDLIN( 634)		return ::Math_obj::sqrt(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Quaternion_Impl__obj,get_length,return )

Float Quaternion_Impl__obj::get_lengthSq( ::hxmath::math::QuaternionDefault this1){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","get_lengthSq",0x88377a1c,"hxmath.math._Quaternion.Quaternion_Impl_.get_lengthSq","hxmath/math/Quaternion.hx",638,0xb1a7e490)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 639)		HX_VARI(  ::hxmath::math::QuaternionDefault,self) = this1;
HXLINE( 640)		return ((((self->s * self->s) + (self->x * self->x)) + (self->y * self->y)) + (self->z * self->z));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Quaternion_Impl__obj,get_lengthSq,return )

 ::hxmath::math::Matrix3x3Default Quaternion_Impl__obj::get_matrix( ::hxmath::math::QuaternionDefault this1){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","get_matrix",0x3e361f39,"hxmath.math._Quaternion.Quaternion_Impl_.get_matrix","hxmath/math/Quaternion.hx",644,0xb1a7e490)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 645)		HX_VARI(  ::hxmath::math::QuaternionDefault,self) = this1;
HXLINE( 647)		HX_VARI( Float,s) = self->s;
HXLINE( 648)		HX_VARI( Float,x) = self->x;
HXLINE( 649)		HX_VARI( Float,y) = self->y;
HXLINE( 650)		HX_VARI( Float,z) = self->z;
HXLINE( 657)		return  ::hxmath::math::Matrix3x3Default_obj::__new(((int)1 - ((int)2 * ((y * y) + (z * z)))),((int)2 * ((x * y) - (s * z))),((int)2 * ((s * y) + (x * z))),((int)2 * ((x * y) + (s * z))),((int)1 - ((int)2 * ((x * x) + (z * z)))),((int)2 * ((y * z) - (s * x))),((int)2 * ((x * z) - (s * y))),((int)2 * ((y * z) + (s * x))),((int)1 - ((int)2 * ((x * x) + (y * y)))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Quaternion_Impl__obj,get_matrix,return )

 ::hxmath::math::QuaternionDefault Quaternion_Impl__obj::get_normal( ::hxmath::math::QuaternionDefault this1){
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","get_normal",0xb2d75b1f,"hxmath.math._Quaternion.Quaternion_Impl_.get_normal","hxmath/math/Quaternion.hx",661,0xb1a7e490)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 662)		HX_VARI(  ::hxmath::math::QuaternionDefault,self) = this1;
HXLINE( 663)		Float _hx_tmp = ((((self->s * self->s) + (self->x * self->x)) + (self->y * self->y)) + (self->z * self->z));
HXDLIN( 663)		Float _hx_tmp1 = ::Math_obj::sqrt(_hx_tmp);
HXDLIN( 663)		HX_VARI( Float,_g) = ((Float)((Float)1.0) / (Float)_hx_tmp1);
HXDLIN( 663)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,self1,"self") =  ::hxmath::math::QuaternionDefault_obj::__new(self->s,self->x,self->y,self->z);
HXDLIN( 663)		hx::MultEq(self1->s,_g);
HXDLIN( 663)		hx::MultEq(self1->x,_g);
HXDLIN( 663)		hx::MultEq(self1->y,_g);
HXDLIN( 663)		hx::MultEq(self1->z,_g);
HXDLIN( 663)		return self1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Quaternion_Impl__obj,get_normal,return )


Quaternion_Impl__obj::Quaternion_Impl__obj()
{
}

bool Quaternion_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"dot") ) { outValue = dot_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"log") ) { outValue = log_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"exp") ) { outValue = exp_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lerp") ) { outValue = lerp_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"slerp") ) { outValue = slerp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clone") ) { outValue = clone_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"negate") ) { outValue = negate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"invert") ) { outValue = invert_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyTo") ) { outValue = copyTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rotate") ) { outValue = rotate_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addWith") ) { outValue = addWith_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"multiply") ) { outValue = multiply_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subtract") ) { outValue = subtract_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_zero") ) { outValue = get_zero_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromArray") ) { outValue = fromArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"conjugate") ) { outValue = conjugate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"angleWith") ) { outValue = angleWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"normalize") ) { outValue = normalize_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { outValue = get_length_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_matrix") ) { outValue = get_matrix_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_normal") ) { outValue = get_normal_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"copyToShape") ) { outValue = copyToShape_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"applyInvert") ) { outValue = applyInvert_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"subtractWith") ) { outValue = subtractWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_identity") ) { outValue = get_identity_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_lengthSq") ) { outValue = get_lengthSq_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fromAxisAngle") ) { outValue = fromAxisAngle_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyFromShape") ) { outValue = copyFromShape_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"multiplyScalar") ) { outValue = multiplyScalar_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"applyConjugate") ) { outValue = applyConjugate_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getArrayElement") ) { outValue = getArrayElement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setArrayElement") ) { outValue = setArrayElement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"applyScalarFunc") ) { outValue = applyScalarFunc_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"multiplyWithScalar") ) { outValue = multiplyWithScalar_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Quaternion_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo Quaternion_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Quaternion_Impl__obj::elementCount,HX_HCSTRING("elementCount","\x73","\x1c","\x9d","\xaa")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Quaternion_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Quaternion_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Quaternion_Impl__obj::elementCount,"elementCount");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Quaternion_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Quaternion_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Quaternion_Impl__obj::elementCount,"elementCount");
};

#endif

hx::Class Quaternion_Impl__obj::__mClass;

static ::String Quaternion_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("elementCount","\x73","\x1c","\x9d","\xaa"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("fromArray","\xcf","\x57","\x18","\xda"),
	HX_HCSTRING("fromAxisAngle","\xa8","\x6c","\x6f","\xf0"),
	HX_HCSTRING("multiplyScalar","\x70","\x70","\x21","\x48"),
	HX_HCSTRING("multiply","\x24","\xe2","\x8c","\x9a"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("subtract","\x14","\x75","\x11","\xf8"),
	HX_HCSTRING("conjugate","\x18","\x36","\x89","\x42"),
	HX_HCSTRING("negate","\xc2","\x41","\x19","\x67"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("lerp","\x77","\x12","\xb0","\x47"),
	HX_HCSTRING("slerp","\x6a","\xc8","\xc4","\x7e"),
	HX_HCSTRING("dot","\x89","\x42","\x4c","\x00"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("invert","\x16","\xe7","\xd8","\x9f"),
	HX_HCSTRING("multiplyWithScalar","\x16","\x95","\x23","\x5a"),
	HX_HCSTRING("addWith","\xc7","\xb8","\x35","\x8b"),
	HX_HCSTRING("subtractWith","\x3a","\x31","\x45","\x74"),
	HX_HCSTRING("copyTo","\x90","\x1c","\x33","\xc9"),
	HX_HCSTRING("copyToShape","\x71","\xac","\xb5","\x9e"),
	HX_HCSTRING("copyFromShape","\xe2","\x52","\x6b","\x92"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("getArrayElement","\xd9","\x93","\x9e","\xda"),
	HX_HCSTRING("setArrayElement","\xe5","\x10","\x6a","\xd6"),
	HX_HCSTRING("applyScalarFunc","\x9e","\xe3","\xdb","\x86"),
	HX_HCSTRING("log","\x84","\x54","\x52","\x00"),
	HX_HCSTRING("exp","\x9d","\x0c","\x4d","\x00"),
	HX_HCSTRING("rotate","\x5b","\x46","\x20","\xcb"),
	HX_HCSTRING("angleWith","\x79","\xcb","\x1d","\xcc"),
	HX_HCSTRING("normalize","\x8d","\x37","\xa1","\xab"),
	HX_HCSTRING("applyConjugate","\xca","\x72","\x07","\x31"),
	HX_HCSTRING("applyInvert","\x24","\xa7","\xd3","\xdb"),
	HX_HCSTRING("get_zero","\xb1","\xca","\xab","\xd0"),
	HX_HCSTRING("get_identity","\x47","\xf9","\x48","\x6e"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("get_lengthSq","\x2d","\x17","\xdd","\xd4"),
	HX_HCSTRING("get_matrix","\x0a","\xa6","\x4f","\xac"),
	HX_HCSTRING("get_normal","\xf0","\xe1","\xf0","\x20"),
	::String(null())
};

void Quaternion_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hxmath.math._Quaternion.Quaternion_Impl_","\xdf","\x8a","\x89","\x17");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Quaternion_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Quaternion_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Quaternion_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Quaternion_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Quaternion_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Quaternion_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Quaternion_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Quaternion_Impl__obj::__boot()
{
{
            	HX_STACK_FRAME("hxmath.math._Quaternion.Quaternion_Impl_","boot",0x1ec1e021,"hxmath.math._Quaternion.Quaternion_Impl_.boot","hxmath/math/Quaternion.hx",44,0xb1a7e490)
HXLINE(  44)		elementCount = (int)4;
            	}
}

} // end namespace hxmath
} // end namespace math
} // end namespace _Quaternion
