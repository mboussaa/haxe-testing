// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_hxmath_math_Matrix2x2Default
#include <hxmath/math/Matrix2x2Default.h>
#endif
#ifndef INCLUDED_hxmath_math_Vector2Default
#include <hxmath/math/Vector2Default.h>
#endif
#ifndef INCLUDED_hxmath_math__Matrix2x2_Matrix2x2_Impl_
#include <hxmath/math/_Matrix2x2/Matrix2x2_Impl_.h>
#endif

namespace hxmath{
namespace math{
namespace _Matrix2x2{

void Matrix2x2_Impl__obj::__construct() { }

Dynamic Matrix2x2_Impl__obj::__CreateEmpty() { return new Matrix2x2_Impl__obj; }

hx::ObjectPtr< Matrix2x2_Impl__obj > Matrix2x2_Impl__obj::__new()
{
	hx::ObjectPtr< Matrix2x2_Impl__obj > _hx_result = new Matrix2x2_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Matrix2x2_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Matrix2x2_Impl__obj > _hx_result = new Matrix2x2_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Int Matrix2x2_Impl__obj::elementCount;

 ::hxmath::math::Matrix2x2Default Matrix2x2_Impl__obj::_new(Float a,Float b,Float c,Float d){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","_new",0x743ae716,"hxmath.math._Matrix2x2.Matrix2x2_Impl_._new","hxmath/math/Matrix2x2.hx",78,0x43e15fa3)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(c,"c")
            	HX_STACK_ARG(d,"d")
HXLINE(  78)		return  ::hxmath::math::Matrix2x2Default_obj::__new(a,b,c,d);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix2x2_Impl__obj,_new,return )

 ::hxmath::math::Matrix2x2Default Matrix2x2_Impl__obj::fromArray(::Array< Float > rawData){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","fromArray",0x381f35fa,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.fromArray","hxmath/math/Matrix2x2.hx",90,0x43e15fa3)
            	HX_STACK_ARG(rawData,"rawData")
HXLINE(  91)		if ((rawData->length != (int)4)) {
HXLINE(  93)			HX_STACK_DO_THROW(HX_("Invalid rawData.",25,ca,34,44));
            		}
HXLINE(  96)		return  ::hxmath::math::Matrix2x2Default_obj::__new(rawData->__get((int)0),rawData->__get((int)1),rawData->__get((int)2),rawData->__get((int)3));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix2x2_Impl__obj,fromArray,return )

 ::hxmath::math::Matrix2x2Default Matrix2x2_Impl__obj::fromMatrix2x2Shape( ::hxmath::math::Matrix2x2Default other){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","fromMatrix2x2Shape",0xa3b4d4d5,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.fromMatrix2x2Shape","hxmath/math/Matrix2x2.hx",108,0x43e15fa3)
            	HX_STACK_ARG(other,"other")
HXLINE( 108)		return  ::hxmath::math::Matrix2x2Default_obj::__new(other->a,other->b,other->c,other->d);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix2x2_Impl__obj,fromMatrix2x2Shape,return )

 ::hxmath::math::Matrix2x2Default Matrix2x2_Impl__obj::multiplyScalar(Float s, ::hxmath::math::Matrix2x2Default m){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","multiplyScalar",0xbfce5665,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.multiplyScalar","hxmath/math/Matrix2x2.hx",121,0x43e15fa3)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(m,"m")
HXLINE( 121)		return  ::hxmath::math::Matrix2x2Default_obj::__new((s * m->a),(s * m->b),(s * m->c),(s * m->d));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2x2_Impl__obj,multiplyScalar,return )

 ::hxmath::math::Vector2Default Matrix2x2_Impl__obj::multiplyVector( ::hxmath::math::Matrix2x2Default m, ::hxmath::math::Vector2Default v){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","multiplyVector",0x1b061ffc,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.multiplyVector","hxmath/math/Matrix2x2.hx",136,0x43e15fa3)
            	HX_STACK_ARG(m,"m")
            	HX_STACK_ARG(v,"v")
HXLINE( 136)		return  ::hxmath::math::Vector2Default_obj::__new(((m->a * v->x) + (m->b * v->y)),((m->c * v->x) + (m->d * v->y)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2x2_Impl__obj,multiplyVector,return )

 ::hxmath::math::Matrix2x2Default Matrix2x2_Impl__obj::multiply( ::hxmath::math::Matrix2x2Default m, ::hxmath::math::Matrix2x2Default n){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","multiply",0xefec3259,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.multiply","hxmath/math/Matrix2x2.hx",151,0x43e15fa3)
            	HX_STACK_ARG(m,"m")
            	HX_STACK_ARG(n,"n")
HXLINE( 151)		return  ::hxmath::math::Matrix2x2Default_obj::__new(((m->a * n->a) + (m->b * n->c)),((m->a * n->b) + (m->b * n->d)),((m->c * n->a) + (m->d * n->c)),((m->c * n->b) + (m->d * n->d)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2x2_Impl__obj,multiply,return )

 ::hxmath::math::Matrix2x2Default Matrix2x2_Impl__obj::add( ::hxmath::math::Matrix2x2Default m, ::hxmath::math::Matrix2x2Default n){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","add",0x7a368e0c,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.add","hxmath/math/Matrix2x2.hx",168,0x43e15fa3)
            	HX_STACK_ARG(m,"m")
            	HX_STACK_ARG(n,"n")
HXLINE( 168)		HX_VARI(  ::hxmath::math::Matrix2x2Default,self) =  ::hxmath::math::Matrix2x2Default_obj::__new(m->a,m->b,m->c,m->d);
HXDLIN( 168)		hx::AddEq(self->a,n->a);
HXDLIN( 168)		hx::AddEq(self->b,n->b);
HXDLIN( 168)		hx::AddEq(self->c,n->c);
HXDLIN( 168)		hx::AddEq(self->d,n->d);
HXDLIN( 168)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2x2_Impl__obj,add,return )

 ::hxmath::math::Matrix2x2Default Matrix2x2_Impl__obj::subtract( ::hxmath::math::Matrix2x2Default m, ::hxmath::math::Matrix2x2Default n){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","subtract",0x4d70c549,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.subtract","hxmath/math/Matrix2x2.hx",182,0x43e15fa3)
            	HX_STACK_ARG(m,"m")
            	HX_STACK_ARG(n,"n")
HXLINE( 182)		HX_VARI(  ::hxmath::math::Matrix2x2Default,self) =  ::hxmath::math::Matrix2x2Default_obj::__new(m->a,m->b,m->c,m->d);
HXDLIN( 182)		hx::SubEq(self->a,n->a);
HXDLIN( 182)		hx::SubEq(self->b,n->b);
HXDLIN( 182)		hx::SubEq(self->c,n->c);
HXDLIN( 182)		hx::SubEq(self->d,n->d);
HXDLIN( 182)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2x2_Impl__obj,subtract,return )

 ::hxmath::math::Matrix2x2Default Matrix2x2_Impl__obj::negate( ::hxmath::math::Matrix2x2Default m){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","negate",0xf814aab7,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.negate","hxmath/math/Matrix2x2.hx",195,0x43e15fa3)
            	HX_STACK_ARG(m,"m")
HXLINE( 195)		return  ::hxmath::math::Matrix2x2Default_obj::__new(-(m->a),-(m->b),-(m->c),-(m->d));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix2x2_Impl__obj,negate,return )

Bool Matrix2x2_Impl__obj::equals( ::hxmath::math::Matrix2x2Default m, ::hxmath::math::Matrix2x2Default n){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","equals",0x50ee5734,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.equals","hxmath/math/Matrix2x2.hx",211,0x43e15fa3)
            	HX_STACK_ARG(m,"m")
            	HX_STACK_ARG(n,"n")
HXLINE( 211)		Bool _hx_tmp;
HXDLIN( 211)		if (hx::IsNull( m )) {
HXLINE( 211)			_hx_tmp = hx::IsNull( n );
            		}
            		else {
HXLINE( 211)			_hx_tmp = false;
            		}
HXDLIN( 211)		if (!(_hx_tmp)) {
HXLINE( 212)			Bool _hx_tmp1;
HXDLIN( 212)			Bool _hx_tmp2;
HXDLIN( 212)			Bool _hx_tmp3;
HXDLIN( 212)			Bool _hx_tmp4;
HXDLIN( 212)			if (hx::IsNotNull( m )) {
HXLINE( 212)				_hx_tmp4 = hx::IsNotNull( n );
            			}
            			else {
HXLINE( 212)				_hx_tmp4 = false;
            			}
HXDLIN( 212)			if (_hx_tmp4) {
HXLINE( 212)				_hx_tmp3 = (m->a == n->a);
            			}
            			else {
HXLINE( 212)				_hx_tmp3 = false;
            			}
HXDLIN( 212)			if (_hx_tmp3) {
HXLINE( 212)				_hx_tmp2 = (m->b == n->b);
            			}
            			else {
HXLINE( 212)				_hx_tmp2 = false;
            			}
HXDLIN( 212)			if (_hx_tmp2) {
HXLINE( 212)				_hx_tmp1 = (m->c == n->c);
            			}
            			else {
HXLINE( 212)				_hx_tmp1 = false;
            			}
HXDLIN( 212)			if (_hx_tmp1) {
HXLINE( 211)				return (m->d == n->d);
            			}
            			else {
HXLINE( 211)				return false;
            			}
            		}
            		else {
HXLINE( 211)			return true;
            		}
HXDLIN( 211)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2x2_Impl__obj,equals,return )

 ::hxmath::math::Matrix2x2Default Matrix2x2_Impl__obj::rotate(Float angle){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","rotate",0x5c1baf50,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.rotate","hxmath/math/Matrix2x2.hx",229,0x43e15fa3)
            	HX_STACK_ARG(angle,"angle")
HXLINE( 229)		HX_VARI(  ::hxmath::math::Matrix2x2Default,self) =  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 229)		HX_VARI( Float,s) = ::Math_obj::sin(angle);
HXDLIN( 229)		HX_VARI( Float,c) = ::Math_obj::cos(angle);
HXDLIN( 229)		self->a = c;
HXDLIN( 229)		self->b = -(s);
HXDLIN( 229)		self->c = s;
HXDLIN( 229)		self->d = c;
HXDLIN( 229)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix2x2_Impl__obj,rotate,return )

 ::hxmath::math::Matrix2x2Default Matrix2x2_Impl__obj::scale(Float sx,Float sy){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","scale",0xbc0a7b35,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.scale","hxmath/math/Matrix2x2.hx",242,0x43e15fa3)
            	HX_STACK_ARG(sx,"sx")
            	HX_STACK_ARG(sy,"sy")
HXLINE( 242)		return  ::hxmath::math::Matrix2x2Default_obj::__new(sx,((Float)0.0),((Float)0.0),sy);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2x2_Impl__obj,scale,return )

 ::hxmath::math::Matrix2x2Default Matrix2x2_Impl__obj::setRotate( ::hxmath::math::Matrix2x2Default this1,Float angle){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","setRotate",0x88ce99c8,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.setRotate","hxmath/math/Matrix2x2.hx",254,0x43e15fa3)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(angle,"angle")
HXLINE( 255)		HX_VARI(  ::hxmath::math::Matrix2x2Default,self) = this1;
HXLINE( 257)		HX_VARI( Float,s) = ::Math_obj::sin(angle);
HXLINE( 258)		HX_VARI( Float,c) = ::Math_obj::cos(angle);
HXLINE( 260)		self->a = c;
HXLINE( 261)		self->b = -(s);
HXLINE( 262)		self->c = s;
HXLINE( 263)		self->d = c;
HXLINE( 265)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2x2_Impl__obj,setRotate,return )

 ::hxmath::math::Matrix2x2Default Matrix2x2_Impl__obj::set( ::hxmath::math::Matrix2x2Default this1,Float a,Float b,Float c,Float d){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","set",0x7a44378d,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.set","hxmath/math/Matrix2x2.hx",278,0x43e15fa3)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(c,"c")
            	HX_STACK_ARG(d,"d")
HXLINE( 279)		HX_VARI(  ::hxmath::math::Matrix2x2Default,self) = this1;
HXLINE( 281)		self->a = a;
HXLINE( 282)		self->b = b;
HXLINE( 283)		self->c = c;
HXLINE( 284)		self->d = d;
HXLINE( 286)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Matrix2x2_Impl__obj,set,return )

 ::hxmath::math::Matrix2x2Default Matrix2x2_Impl__obj::addWith( ::hxmath::math::Matrix2x2Default this1, ::hxmath::math::Matrix2x2Default m){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","addWith",0xd6362632,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.addWith","hxmath/math/Matrix2x2.hx",297,0x43e15fa3)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(m,"m")
HXLINE( 298)		HX_VARI(  ::hxmath::math::Matrix2x2Default,self) = this1;
HXLINE( 300)		hx::AddEq(self->a,m->a);
HXLINE( 301)		hx::AddEq(self->b,m->b);
HXLINE( 302)		hx::AddEq(self->c,m->c);
HXLINE( 303)		hx::AddEq(self->d,m->d);
HXLINE( 305)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2x2_Impl__obj,addWith,return )

 ::hxmath::math::Matrix2x2Default Matrix2x2_Impl__obj::subtractWith( ::hxmath::math::Matrix2x2Default this1, ::hxmath::math::Matrix2x2Default m){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","subtractWith",0xf7c93fef,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.subtractWith","hxmath/math/Matrix2x2.hx",316,0x43e15fa3)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(m,"m")
HXLINE( 317)		HX_VARI(  ::hxmath::math::Matrix2x2Default,self) = this1;
HXLINE( 319)		hx::SubEq(self->a,m->a);
HXLINE( 320)		hx::SubEq(self->b,m->b);
HXLINE( 321)		hx::SubEq(self->c,m->c);
HXLINE( 322)		hx::SubEq(self->d,m->d);
HXLINE( 324)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2x2_Impl__obj,subtractWith,return )

void Matrix2x2_Impl__obj::copyTo( ::hxmath::math::Matrix2x2Default this1, ::hxmath::math::Matrix2x2Default target){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","copyTo",0x5a2e8585,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.copyTo","hxmath/math/Matrix2x2.hx",334,0x43e15fa3)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(target,"target")
HXLINE( 335)		HX_VARI(  ::hxmath::math::Matrix2x2Default,self) = this1;
HXLINE( 337)		{
HXLINE( 337)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 337)			while((_g < (int)4)){
HXLINE( 337)				HX_VARI( Int,i) = _g++;
HXLINE( 339)				{
HXLINE( 339)					 ::Dynamic _hx_tmp;
HXDLIN( 339)					switch((int)(i)){
            						case (int)0: {
HXLINE( 339)							_hx_tmp = self->a;
            						}
            						break;
            						case (int)1: {
HXLINE( 339)							_hx_tmp = self->b;
            						}
            						break;
            						case (int)2: {
HXLINE( 339)							_hx_tmp = self->c;
            						}
            						break;
            						case (int)3: {
HXLINE( 339)							_hx_tmp = self->d;
            						}
            						break;
            						default:{
HXLINE( 339)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 339)					HX_VARI( Float,value) = ( (Float)(_hx_tmp) );
HXDLIN( 339)					switch((int)(i)){
            						case (int)0: {
HXLINE( 339)							target->a = value;
            						}
            						break;
            						case (int)1: {
HXLINE( 339)							target->b = value;
            						}
            						break;
            						case (int)2: {
HXLINE( 339)							target->c = value;
            						}
            						break;
            						case (int)3: {
HXLINE( 339)							target->d = value;
            						}
            						break;
            						default:{
HXLINE( 339)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2x2_Impl__obj,copyTo,(void))

void Matrix2x2_Impl__obj::copyToShape( ::hxmath::math::Matrix2x2Default this1, ::Dynamic target){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","copyToShape",0xb2d0ab5c,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.copyToShape","hxmath/math/Matrix2x2.hx",349,0x43e15fa3)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(target,"target")
HXLINE( 350)		HX_VARI(  ::hxmath::math::Matrix2x2Default,self) = this1;
HXLINE( 352)		target->__SetField(HX_("a",61,00,00,00),self->a,hx::paccDynamic);
HXLINE( 353)		target->__SetField(HX_("b",62,00,00,00),self->b,hx::paccDynamic);
HXLINE( 354)		target->__SetField(HX_("c",63,00,00,00),self->c,hx::paccDynamic);
HXLINE( 355)		target->__SetField(HX_("d",64,00,00,00),self->d,hx::paccDynamic);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2x2_Impl__obj,copyToShape,(void))

void Matrix2x2_Impl__obj::copyFromShape( ::hxmath::math::Matrix2x2Default this1, ::Dynamic source){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","copyFromShape",0x2274228d,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.copyFromShape","hxmath/math/Matrix2x2.hx",364,0x43e15fa3)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(source,"source")
HXLINE( 365)		HX_VARI(  ::hxmath::math::Matrix2x2Default,self) = this1;
HXLINE( 367)		self->a = ( (Float)(source->__Field(HX_("a",61,00,00,00),hx::paccDynamic)) );
HXLINE( 368)		self->b = ( (Float)(source->__Field(HX_("b",62,00,00,00),hx::paccDynamic)) );
HXLINE( 369)		self->c = ( (Float)(source->__Field(HX_("c",63,00,00,00),hx::paccDynamic)) );
HXLINE( 370)		self->d = ( (Float)(source->__Field(HX_("d",64,00,00,00),hx::paccDynamic)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2x2_Impl__obj,copyFromShape,(void))

 ::hxmath::math::Matrix2x2Default Matrix2x2_Impl__obj::clone( ::hxmath::math::Matrix2x2Default this1){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","clone",0x8b9ec008,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.clone","hxmath/math/Matrix2x2.hx",379,0x43e15fa3)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 380)		HX_VARI(  ::hxmath::math::Matrix2x2Default,self) = this1;
HXLINE( 381)		return  ::hxmath::math::Matrix2x2Default_obj::__new(self->a,self->b,self->c,self->d);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix2x2_Impl__obj,clone,return )

Float Matrix2x2_Impl__obj::getArrayElement( ::hxmath::math::Matrix2x2Default this1,Int i){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","getArrayElement",0x1a3ae444,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.getArrayElement","hxmath/math/Matrix2x2.hx",396,0x43e15fa3)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(i,"i")
HXLINE( 397)		HX_VARI(  ::hxmath::math::Matrix2x2Default,self) = this1;
HXLINE( 399)		switch((int)(i)){
            			case (int)0: {
HXLINE( 402)				return self->a;
            			}
            			break;
            			case (int)1: {
HXLINE( 404)				return self->b;
            			}
            			break;
            			case (int)2: {
HXLINE( 406)				return self->c;
            			}
            			break;
            			case (int)3: {
HXLINE( 408)				return self->d;
            			}
            			break;
            			default:{
HXLINE( 410)				HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            			}
            		}
HXLINE( 399)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2x2_Impl__obj,getArrayElement,return )

Float Matrix2x2_Impl__obj::setArrayElement( ::hxmath::math::Matrix2x2Default this1,Int i,Float value){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","setArrayElement",0x16066150,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.setArrayElement","hxmath/math/Matrix2x2.hx",424,0x43e15fa3)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(i,"i")
            	HX_STACK_ARG(value,"value")
HXLINE( 425)		HX_VARI(  ::hxmath::math::Matrix2x2Default,self) = this1;
HXLINE( 427)		switch((int)(i)){
            			case (int)0: {
HXLINE( 430)				return (self->a = value);
            			}
            			break;
            			case (int)1: {
HXLINE( 432)				return (self->b = value);
            			}
            			break;
            			case (int)2: {
HXLINE( 434)				return (self->c = value);
            			}
            			break;
            			case (int)3: {
HXLINE( 436)				return (self->d = value);
            			}
            			break;
            			default:{
HXLINE( 438)				HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            			}
            		}
HXLINE( 427)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix2x2_Impl__obj,setArrayElement,return )

Float Matrix2x2_Impl__obj::getElement( ::hxmath::math::Matrix2x2Default this1,Int column,Int row){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","getElement",0x3db1bc3b,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.getElement","hxmath/math/Matrix2x2.hx",451,0x43e15fa3)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(column,"column")
            	HX_STACK_ARG(row,"row")
HXLINE( 452)		HX_VARI(  ::hxmath::math::Matrix2x2Default,self) = this1;
HXLINE( 453)		 ::Dynamic _hx_tmp;
HXDLIN( 453)		switch((int)(((row * (int)2) + column))){
            			case (int)0: {
HXLINE( 453)				_hx_tmp = self->a;
            			}
            			break;
            			case (int)1: {
HXLINE( 453)				_hx_tmp = self->b;
            			}
            			break;
            			case (int)2: {
HXLINE( 453)				_hx_tmp = self->c;
            			}
            			break;
            			case (int)3: {
HXLINE( 453)				_hx_tmp = self->d;
            			}
            			break;
            			default:{
HXLINE( 453)				HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            			}
            		}
HXDLIN( 453)		return ( (Float)(_hx_tmp) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix2x2_Impl__obj,getElement,return )

Float Matrix2x2_Impl__obj::setElement( ::hxmath::math::Matrix2x2Default this1,Int column,Int row,Float value){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","setElement",0x412f5aaf,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.setElement","hxmath/math/Matrix2x2.hx",466,0x43e15fa3)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(column,"column")
            	HX_STACK_ARG(row,"row")
            	HX_STACK_ARG(value,"value")
HXLINE( 467)		HX_VARI(  ::hxmath::math::Matrix2x2Default,self) = this1;
HXLINE( 468)		 ::Dynamic _hx_tmp;
HXDLIN( 468)		switch((int)(((row * (int)2) + column))){
            			case (int)0: {
HXLINE( 468)				_hx_tmp = (self->a = value);
            			}
            			break;
            			case (int)1: {
HXLINE( 468)				_hx_tmp = (self->b = value);
            			}
            			break;
            			case (int)2: {
HXLINE( 468)				_hx_tmp = (self->c = value);
            			}
            			break;
            			case (int)3: {
HXLINE( 468)				_hx_tmp = (self->d = value);
            			}
            			break;
            			default:{
HXLINE( 468)				HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            			}
            		}
HXDLIN( 468)		return ( (Float)(_hx_tmp) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix2x2_Impl__obj,setElement,return )

 ::hxmath::math::Vector2Default Matrix2x2_Impl__obj::col( ::hxmath::math::Matrix2x2Default this1,Int index){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","col",0x7a381c2b,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.col","hxmath/math/Matrix2x2.hx",478,0x43e15fa3)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(index,"index")
HXLINE( 479)		HX_VARI(  ::hxmath::math::Matrix2x2Default,self) = this1;
HXLINE( 481)		switch((int)(index)){
            			case (int)0: {
HXLINE( 484)				return  ::hxmath::math::Vector2Default_obj::__new(self->a,self->c);
            			}
            			break;
            			case (int)1: {
HXLINE( 486)				return  ::hxmath::math::Vector2Default_obj::__new(self->b,self->d);
            			}
            			break;
            			default:{
HXLINE( 488)				HX_STACK_DO_THROW(HX_("Invalid column",ff,3c,03,94));
            			}
            		}
HXLINE( 481)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2x2_Impl__obj,col,return )

 ::hxmath::math::Vector2Default Matrix2x2_Impl__obj::row( ::hxmath::math::Matrix2x2Default this1,Int index){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","row",0x7a437e05,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.row","hxmath/math/Matrix2x2.hx",499,0x43e15fa3)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(index,"index")
HXLINE( 500)		HX_VARI(  ::hxmath::math::Matrix2x2Default,self) = this1;
HXLINE( 502)		switch((int)(index)){
            			case (int)0: {
HXLINE( 505)				return  ::hxmath::math::Vector2Default_obj::__new(self->a,self->b);
            			}
            			break;
            			case (int)1: {
HXLINE( 507)				return  ::hxmath::math::Vector2Default_obj::__new(self->c,self->d);
            			}
            			break;
            			default:{
HXLINE( 509)				HX_STACK_DO_THROW(HX_("Invalid row",51,70,e6,76));
            			}
            		}
HXLINE( 502)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2x2_Impl__obj,row,return )

 ::hxmath::math::Vector2Default Matrix2x2_Impl__obj::transposeMultiplyVector( ::hxmath::math::Matrix2x2Default this1, ::hxmath::math::Vector2Default v){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","transposeMultiplyVector",0xd24bd3cb,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.transposeMultiplyVector","hxmath/math/Matrix2x2.hx",520,0x43e15fa3)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(v,"v")
HXLINE( 521)		HX_VARI(  ::hxmath::math::Matrix2x2Default,self) = this1;
HXLINE( 523)		return  ::hxmath::math::Vector2Default_obj::__new(((self->a * v->x) + (self->c * v->y)),((self->b * v->x) + (self->d * v->y)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2x2_Impl__obj,transposeMultiplyVector,return )

 ::hxmath::math::Matrix2x2Default Matrix2x2_Impl__obj::applyScalarFunc( ::hxmath::math::Matrix2x2Default this1, ::Dynamic func){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","applyScalarFunc",0xc6783409,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.applyScalarFunc","hxmath/math/Matrix2x2.hx",535,0x43e15fa3)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(func,"func")
HXLINE( 536)		HX_VARI(  ::hxmath::math::Matrix2x2Default,self) = this1;
HXLINE( 538)		{
HXLINE( 538)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 538)			while((_g < (int)4)){
HXLINE( 538)				HX_VARI( Int,i) = _g++;
HXLINE( 540)				{
HXLINE( 540)					 ::Dynamic _hx_tmp;
HXDLIN( 540)					switch((int)(i)){
            						case (int)0: {
HXLINE( 540)							_hx_tmp = self->a;
            						}
            						break;
            						case (int)1: {
HXLINE( 540)							_hx_tmp = self->b;
            						}
            						break;
            						case (int)2: {
HXLINE( 540)							_hx_tmp = self->c;
            						}
            						break;
            						case (int)3: {
HXLINE( 540)							_hx_tmp = self->d;
            						}
            						break;
            						default:{
HXLINE( 540)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 540)					HX_VARI( Float,value) = ( (Float)(func(_hx_tmp)) );
HXDLIN( 540)					switch((int)(i)){
            						case (int)0: {
HXLINE( 540)							self->a = value;
            						}
            						break;
            						case (int)1: {
HXLINE( 540)							self->b = value;
            						}
            						break;
            						case (int)2: {
HXLINE( 540)							self->c = value;
            						}
            						break;
            						case (int)3: {
HXLINE( 540)							self->d = value;
            						}
            						break;
            						default:{
HXLINE( 540)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXLINE( 543)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix2x2_Impl__obj,applyScalarFunc,return )

 ::hxmath::math::Matrix2x2Default Matrix2x2_Impl__obj::get_zero(){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","get_zero",0x260b1ae6,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.get_zero","hxmath/math/Matrix2x2.hx",548,0x43e15fa3)
HXLINE( 548)		return  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Matrix2x2_Impl__obj,get_zero,return )

 ::hxmath::math::Matrix2x2Default Matrix2x2_Impl__obj::get_identity(){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","get_identity",0xf1cd07fc,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.get_identity","hxmath/math/Matrix2x2.hx",555,0x43e15fa3)
HXLINE( 555)		return  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Matrix2x2_Impl__obj,get_identity,return )

Float Matrix2x2_Impl__obj::get_det( ::hxmath::math::Matrix2x2Default this1){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","get_det",0x71c16fd5,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.get_det","hxmath/math/Matrix2x2.hx",561,0x43e15fa3)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 562)		HX_VARI(  ::hxmath::math::Matrix2x2Default,self) = this1;
HXLINE( 563)		return ((self->a * self->d) - (self->b * self->c));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix2x2_Impl__obj,get_det,return )

 ::hxmath::math::Matrix2x2Default Matrix2x2_Impl__obj::get_transpose( ::hxmath::math::Matrix2x2Default this1){
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","get_transpose",0x9d9bf3fb,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.get_transpose","hxmath/math/Matrix2x2.hx",569,0x43e15fa3)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 570)		HX_VARI(  ::hxmath::math::Matrix2x2Default,self) = this1;
HXLINE( 571)		return  ::hxmath::math::Matrix2x2Default_obj::__new(self->a,self->c,self->b,self->d);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix2x2_Impl__obj,get_transpose,return )


Matrix2x2_Impl__obj::Matrix2x2_Impl__obj()
{
}

bool Matrix2x2_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"col") ) { outValue = col_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"row") ) { outValue = row_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { outValue = scale_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clone") ) { outValue = clone_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"negate") ) { outValue = negate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rotate") ) { outValue = rotate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyTo") ) { outValue = copyTo_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addWith") ) { outValue = addWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_det") ) { outValue = get_det_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"multiply") ) { outValue = multiply_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subtract") ) { outValue = subtract_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_zero") ) { outValue = get_zero_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromArray") ) { outValue = fromArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setRotate") ) { outValue = setRotate_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getElement") ) { outValue = getElement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setElement") ) { outValue = setElement_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"copyToShape") ) { outValue = copyToShape_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"subtractWith") ) { outValue = subtractWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_identity") ) { outValue = get_identity_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"copyFromShape") ) { outValue = copyFromShape_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_transpose") ) { outValue = get_transpose_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"multiplyScalar") ) { outValue = multiplyScalar_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"multiplyVector") ) { outValue = multiplyVector_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getArrayElement") ) { outValue = getArrayElement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setArrayElement") ) { outValue = setArrayElement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"applyScalarFunc") ) { outValue = applyScalarFunc_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"fromMatrix2x2Shape") ) { outValue = fromMatrix2x2Shape_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"transposeMultiplyVector") ) { outValue = transposeMultiplyVector_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Matrix2x2_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo Matrix2x2_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Matrix2x2_Impl__obj::elementCount,HX_HCSTRING("elementCount","\x73","\x1c","\x9d","\xaa")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Matrix2x2_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Matrix2x2_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Matrix2x2_Impl__obj::elementCount,"elementCount");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Matrix2x2_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Matrix2x2_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Matrix2x2_Impl__obj::elementCount,"elementCount");
};

#endif

hx::Class Matrix2x2_Impl__obj::__mClass;

static ::String Matrix2x2_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("elementCount","\x73","\x1c","\x9d","\xaa"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("fromArray","\xcf","\x57","\x18","\xda"),
	HX_HCSTRING("fromMatrix2x2Shape","\x60","\x50","\x05","\x12"),
	HX_HCSTRING("multiplyScalar","\x70","\x70","\x21","\x48"),
	HX_HCSTRING("multiplyVector","\x07","\x3a","\x59","\xa3"),
	HX_HCSTRING("multiply","\x24","\xe2","\x8c","\x9a"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("subtract","\x14","\x75","\x11","\xf8"),
	HX_HCSTRING("negate","\xc2","\x41","\x19","\x67"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("rotate","\x5b","\x46","\x20","\xcb"),
	HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"),
	HX_HCSTRING("setRotate","\x9d","\xbb","\xc7","\x2a"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("addWith","\xc7","\xb8","\x35","\x8b"),
	HX_HCSTRING("subtractWith","\x3a","\x31","\x45","\x74"),
	HX_HCSTRING("copyTo","\x90","\x1c","\x33","\xc9"),
	HX_HCSTRING("copyToShape","\x71","\xac","\xb5","\x9e"),
	HX_HCSTRING("copyFromShape","\xe2","\x52","\x6b","\x92"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("getArrayElement","\xd9","\x93","\x9e","\xda"),
	HX_HCSTRING("setArrayElement","\xe5","\x10","\x6a","\xd6"),
	HX_HCSTRING("getElement","\xc6","\x34","\xb6","\x55"),
	HX_HCSTRING("setElement","\x3a","\xd3","\x33","\x59"),
	HX_HCSTRING("col","\x40","\x80","\x4b","\x00"),
	HX_HCSTRING("row","\x1a","\xe2","\x56","\x00"),
	HX_HCSTRING("transposeMultiplyVector","\x60","\xa0","\xf8","\xfa"),
	HX_HCSTRING("applyScalarFunc","\x9e","\xe3","\xdb","\x86"),
	HX_HCSTRING("get_zero","\xb1","\xca","\xab","\xd0"),
	HX_HCSTRING("get_identity","\x47","\xf9","\x48","\x6e"),
	HX_HCSTRING("get_det","\x6a","\x02","\xc1","\x26"),
	HX_HCSTRING("get_transpose","\x50","\x24","\x93","\x0d"),
	::String(null())
};

void Matrix2x2_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hxmath.math._Matrix2x2.Matrix2x2_Impl_","\xd9","\xea","\x53","\x80");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Matrix2x2_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Matrix2x2_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Matrix2x2_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Matrix2x2_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Matrix2x2_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Matrix2x2_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Matrix2x2_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Matrix2x2_Impl__obj::__boot()
{
{
            	HX_STACK_FRAME("hxmath.math._Matrix2x2.Matrix2x2_Impl_","boot",0x763755e7,"hxmath.math._Matrix2x2.Matrix2x2_Impl_.boot","hxmath/math/Matrix2x2.hx",54,0x43e15fa3)
HXLINE(  54)		elementCount = (int)4;
            	}
}

} // end namespace hxmath
} // end namespace math
} // end namespace _Matrix2x2
