// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_hxmath_math_QuaternionDefault
#include <hxmath/math/QuaternionDefault.h>
#endif

namespace hxmath{
namespace math{

void QuaternionDefault_obj::__construct(Float s,Float x,Float y,Float z){
            	HX_STACK_FRAME("hxmath.math.QuaternionDefault","new",0x928ec245,"hxmath.math.QuaternionDefault.new","hxmath/math/Quaternion.hx",22,0xb1a7e490)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
HXLINE(  23)		this->s = s;
HXLINE(  24)		this->x = x;
HXLINE(  25)		this->y = y;
HXLINE(  26)		this->z = z;
            	}

Dynamic QuaternionDefault_obj::__CreateEmpty() { return new QuaternionDefault_obj; }

hx::ObjectPtr< QuaternionDefault_obj > QuaternionDefault_obj::__new(Float s,Float x,Float y,Float z)
{
	hx::ObjectPtr< QuaternionDefault_obj > _hx_result = new QuaternionDefault_obj();
	_hx_result->__construct(s,x,y,z);
	return _hx_result;
}

Dynamic QuaternionDefault_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< QuaternionDefault_obj > _hx_result = new QuaternionDefault_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

::String QuaternionDefault_obj::toString(){
            	HX_STACK_FRAME("hxmath.math.QuaternionDefault","toString",0xe5a3e0a7,"hxmath.math.QuaternionDefault.toString","hxmath/math/Quaternion.hx",31,0xb1a7e490)
            	HX_STACK_THIS(this)
HXLINE(  31)		return ((((((((HX_("[",5b,00,00,00) + this->s) + HX_(", (",34,7f,21,00)) + this->x) + HX_(", ",74,26,00,00)) + this->y) + HX_(", ",74,26,00,00)) + this->z) + HX_(")]",14,24,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(QuaternionDefault_obj,toString,return )


QuaternionDefault_obj::QuaternionDefault_obj()
{
}

hx::Val QuaternionDefault_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"s") ) { return hx::Val( s); }
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
		if (HX_FIELD_EQ(inName,"z") ) { return hx::Val( z); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val QuaternionDefault_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"s") ) { s=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"z") ) { z=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void QuaternionDefault_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("s","\x73","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("z","\x7a","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo QuaternionDefault_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(QuaternionDefault_obj,s),HX_HCSTRING("s","\x73","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(QuaternionDefault_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(QuaternionDefault_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(QuaternionDefault_obj,z),HX_HCSTRING("z","\x7a","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *QuaternionDefault_obj_sStaticStorageInfo = 0;
#endif

static ::String QuaternionDefault_obj_sMemberFields[] = {
	HX_HCSTRING("s","\x73","\x00","\x00","\x00"),
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("z","\x7a","\x00","\x00","\x00"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void QuaternionDefault_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(QuaternionDefault_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void QuaternionDefault_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(QuaternionDefault_obj::__mClass,"__mClass");
};

#endif

hx::Class QuaternionDefault_obj::__mClass;

void QuaternionDefault_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hxmath.math.QuaternionDefault","\xd3","\x3b","\x8d","\x07");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = QuaternionDefault_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(QuaternionDefault_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< QuaternionDefault_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = QuaternionDefault_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = QuaternionDefault_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = QuaternionDefault_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxmath
} // end namespace math
