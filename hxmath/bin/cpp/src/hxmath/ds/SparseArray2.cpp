// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_hxmath_ds_DenseArray2
#include <hxmath/ds/DenseArray2.h>
#endif
#ifndef INCLUDED_hxmath_ds_IArray2
#include <hxmath/ds/IArray2.h>
#endif
#ifndef INCLUDED_hxmath_ds_SparseArray2
#include <hxmath/ds/SparseArray2.h>
#endif
#ifndef INCLUDED_hxmath_ds__SparseArray2_SparseArray2OrderedKeysIterator
#include <hxmath/ds/_SparseArray2/SparseArray2OrderedKeysIterator.h>
#endif
#ifndef INCLUDED_hxmath_math__ShortVector2_ShortVector2_Impl_
#include <hxmath/math/_ShortVector2/ShortVector2_Impl_.h>
#endif

namespace hxmath{
namespace ds{

void SparseArray2_obj::__construct(){
            	HX_STACK_FRAME("hxmath.ds.SparseArray2","new",0x93e2fa34,"hxmath.ds.SparseArray2.new","hxmath/ds/SparseArray2.hx",73,0x8c9d851c)
            	HX_STACK_THIS(this)
HXLINE(  73)		this->hash =  ::haxe::ds::IntMap_obj::__new();
            	}

Dynamic SparseArray2_obj::__CreateEmpty() { return new SparseArray2_obj; }

hx::ObjectPtr< SparseArray2_obj > SparseArray2_obj::__new()
{
	hx::ObjectPtr< SparseArray2_obj > _hx_result = new SparseArray2_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic SparseArray2_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SparseArray2_obj > _hx_result = new SparseArray2_obj();
	_hx_result->__construct();
	return _hx_result;
}

static ::hxmath::ds::IArray2_obj _hx_hxmath_ds_SparseArray2__hx_hxmath_ds_IArray2= {
	(  ::Dynamic (hx::Object::*)())&::hxmath::ds::SparseArray2_obj::get_keys,
	(  ::Dynamic (hx::Object::*)())&::hxmath::ds::SparseArray2_obj::iterator,
	( Bool (hx::Object::*)(Int,Int))&::hxmath::ds::SparseArray2_obj::inBounds,
	(  ::Dynamic (hx::Object::*)(Int,Int))&::hxmath::ds::SparseArray2_obj::get,
	(  ::Dynamic (hx::Object::*)(Int))&::hxmath::ds::SparseArray2_obj::getByKey,
	( void (hx::Object::*)(Int,Int, ::Dynamic))&::hxmath::ds::SparseArray2_obj::set,
};

void *SparseArray2_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x733ae6db: return &_hx_hxmath_ds_SparseArray2__hx_hxmath_ds_IArray2;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::Dynamic SparseArray2_obj::iterator(){
            	HX_STACK_FRAME("hxmath.ds.SparseArray2","iterator",0x1f1eff9a,"hxmath.ds.SparseArray2.iterator","hxmath/ds/SparseArray2.hx",83,0x8c9d851c)
            	HX_STACK_THIS(this)
HXLINE(  83)		return this->hash->iterator();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SparseArray2_obj,iterator,return )

Bool SparseArray2_obj::inBounds(Int x,Int y){
            	HX_STACK_FRAME("hxmath.ds.SparseArray2","inBounds",0x7a2085e6,"hxmath.ds.SparseArray2.inBounds","hxmath/ds/SparseArray2.hx",95,0x8c9d851c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE(  95)		Bool _hx_tmp;
HXDLIN(  95)		Bool _hx_tmp1;
HXDLIN(  95)		if ((x >= (int)0)) {
HXLINE(  95)			_hx_tmp1 = (y >= (int)0);
            		}
            		else {
HXLINE(  95)			_hx_tmp1 = false;
            		}
HXDLIN(  95)		if (_hx_tmp1) {
HXLINE(  95)			_hx_tmp = (x <= (int)65535);
            		}
            		else {
HXLINE(  95)			_hx_tmp = false;
            		}
HXDLIN(  95)		if (_hx_tmp) {
HXLINE(  95)			return (y <= (int)65535);
            		}
            		else {
HXLINE(  95)			return false;
            		}
HXDLIN(  95)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(SparseArray2_obj,inBounds,return )

 ::Dynamic SparseArray2_obj::get(Int x,Int y){
            	HX_STACK_FRAME("hxmath.ds.SparseArray2","get",0x93ddaa6a,"hxmath.ds.SparseArray2.get","hxmath/ds/SparseArray2.hx",107,0x8c9d851c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 107)		HX_VARI( Int,key) = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new(x,y);
HXDLIN( 107)		return this->hash->get(key);
            	}


HX_DEFINE_DYNAMIC_FUNC2(SparseArray2_obj,get,return )

 ::Dynamic SparseArray2_obj::getByKey(Int key){
            	HX_STACK_FRAME("hxmath.ds.SparseArray2","getByKey",0xa8d4b13e,"hxmath.ds.SparseArray2.getByKey","hxmath/ds/SparseArray2.hx",118,0x8c9d851c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(key,"key")
HXLINE( 118)		return this->hash->get(key);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SparseArray2_obj,getByKey,return )

void SparseArray2_obj::set(Int x,Int y, ::Dynamic item){
            	HX_STACK_FRAME("hxmath.ds.SparseArray2","set",0x93e6c576,"hxmath.ds.SparseArray2.set","hxmath/ds/SparseArray2.hx",130,0x8c9d851c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(item,"item")
HXLINE( 130)		HX_VARI( Int,key) = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new(x,y);
HXDLIN( 130)		this->hash->set(key,item);
            	}


HX_DEFINE_DYNAMIC_FUNC3(SparseArray2_obj,set,(void))

Bool SparseArray2_obj::exists(Int x,Int y){
            	HX_STACK_FRAME("hxmath.ds.SparseArray2","exists",0x3591d088,"hxmath.ds.SparseArray2.exists","hxmath/ds/SparseArray2.hx",142,0x8c9d851c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 142)		HX_VARI( Int,key) = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new(x,y);
HXDLIN( 142)		return this->hash->exists(key);
            	}


HX_DEFINE_DYNAMIC_FUNC2(SparseArray2_obj,exists,return )

Bool SparseArray2_obj::remove(Int x,Int y){
            	HX_STACK_FRAME("hxmath.ds.SparseArray2","remove",0x7a3a4ef0,"hxmath.ds.SparseArray2.remove","hxmath/ds/SparseArray2.hx",153,0x8c9d851c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 153)		HX_VARI( Int,key) = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new(x,y);
HXDLIN( 153)		return this->hash->remove(key);
            	}


HX_DEFINE_DYNAMIC_FUNC2(SparseArray2_obj,remove,return )

 ::hxmath::ds::SparseArray2 SparseArray2_obj::clone(){
            	HX_STACK_FRAME("hxmath.ds.SparseArray2","clone",0x3d6f5a31,"hxmath.ds.SparseArray2.clone","hxmath/ds/SparseArray2.hx",162,0x8c9d851c)
            	HX_STACK_THIS(this)
HXLINE( 163)		HX_VARI(  ::hxmath::ds::SparseArray2,copy) =  ::hxmath::ds::SparseArray2_obj::__new();
HXLINE( 165)		{
HXLINE( 165)			HX_VARI(  ::Dynamic,tmp) = this->hash->keys();
HXDLIN( 165)			while(true){
HXLINE( 165)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 165)				if (_hx_tmp) {
HXLINE( 165)					goto _hx_goto_0;
            				}
HXDLIN( 165)				HX_VARI( Int,key) = ( (Int)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE( 167)				HX_VARI(  ::Dynamic,value) = this->hash->get(key);
HXDLIN( 167)				copy->hash->set(key,value);
            			}
            			_hx_goto_0:;
            		}
HXLINE( 170)		return copy;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SparseArray2_obj,clone,return )

 ::hxmath::ds::DenseArray2 SparseArray2_obj::toDenseArray(){
            	HX_STACK_FRAME("hxmath.ds.SparseArray2","toDenseArray",0x823d1e81,"hxmath.ds.SparseArray2.toDenseArray","hxmath/ds/SparseArray2.hx",179,0x8c9d851c)
            	HX_STACK_THIS(this)
HXLINE( 181)		HX_VARI( Int,maxX) = (int)-1;
HXLINE( 182)		HX_VARI( Int,maxY) = (int)-1;
HXLINE( 185)		{
HXLINE( 185)			HX_VARI(  ::Dynamic,tmp) = this->hash->keys();
HXDLIN( 185)			while(true){
HXLINE( 185)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 185)				if (_hx_tmp) {
HXLINE( 185)					goto _hx_goto_1;
            				}
HXDLIN( 185)				HX_VARI( Int,key) = ( (Int)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE( 187)				HX_VARI( Int,x) = ((int)key & (int)(int)65535);
HXLINE( 188)				HX_VARI( Int,y) = ((int)((int)key >> (int)(int)16) & (int)(int)65535);
HXLINE( 190)				Bool _hx_tmp1 = (x > maxX);
HXDLIN( 190)				if (_hx_tmp1) {
HXLINE( 192)					maxX = x;
            				}
HXLINE( 195)				Bool _hx_tmp2 = (y > maxY);
HXDLIN( 195)				if (_hx_tmp2) {
HXLINE( 197)					maxY = y;
            				}
            			}
            			_hx_goto_1:;
            		}
HXLINE( 202)		HX_VARI(  ::hxmath::ds::DenseArray2,denseCopy) =  ::hxmath::ds::DenseArray2_obj::__new((maxX + (int)1),(maxY + (int)1),null());
HXLINE( 204)		{
HXLINE( 204)			HX_VARI_NAME(  ::Dynamic,tmp1,"tmp") = this->hash->keys();
HXDLIN( 204)			while(true){
HXLINE( 204)				Bool _hx_tmp3 = !(( (Bool)( ::Dynamic(tmp1->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 204)				if (_hx_tmp3) {
HXLINE( 204)					goto _hx_goto_2;
            				}
HXDLIN( 204)				HX_VARI_NAME( Int,key1,"key") = ( (Int)( ::Dynamic(tmp1->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE( 206)				HX_VARI_NAME( Int,x1,"x") = ((int)key1 & (int)(int)65535);
HXDLIN( 206)				HX_VARI_NAME( Int,y1,"y") = ((int)((int)key1 >> (int)(int)16) & (int)(int)65535);
HXDLIN( 206)				HX_VARI(  ::Dynamic,item) = this->hash->get(key1);
HXDLIN( 206)				Bool _hx_tmp4;
HXDLIN( 206)				Bool _hx_tmp5;
HXDLIN( 206)				Bool _hx_tmp6;
HXDLIN( 206)				if ((x1 >= (int)0)) {
HXLINE( 206)					_hx_tmp6 = (x1 < denseCopy->width);
            				}
            				else {
HXLINE( 206)					_hx_tmp6 = false;
            				}
HXDLIN( 206)				if (_hx_tmp6) {
HXLINE( 206)					_hx_tmp5 = (y1 >= (int)0);
            				}
            				else {
HXLINE( 206)					_hx_tmp5 = false;
            				}
HXDLIN( 206)				if (_hx_tmp5) {
HXLINE( 206)					_hx_tmp4 = (y1 < denseCopy->height);
            				}
            				else {
HXLINE( 206)					_hx_tmp4 = false;
            				}
HXDLIN( 206)				if (!(_hx_tmp4)) {
HXLINE( 206)					HX_STACK_DO_THROW(((((((((HX_("Specified (x=",dd,9b,83,fe) + x1) + HX_(", y=",18,15,2e,1d)) + y1) + HX_(") fields not in the ranges x: [0, ",0a,c6,50,e7)) + denseCopy->width) + HX_(") y: [0, ",11,b1,6d,70)) + denseCopy->height) + HX_(")",29,00,00,00)));
            				}
HXDLIN( 206)				Int _hx_tmp7 = (x1 + (y1 * denseCopy->width));
HXDLIN( 206)				denseCopy->array->set(_hx_tmp7,item);
            			}
            			_hx_goto_2:;
            		}
HXLINE( 209)		return denseCopy;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SparseArray2_obj,toDenseArray,return )

 ::Dynamic SparseArray2_obj::get_keys(){
            	HX_STACK_FRAME("hxmath.ds.SparseArray2","get_keys",0x52465329,"hxmath.ds.SparseArray2.get_keys","hxmath/ds/SparseArray2.hx",214,0x8c9d851c)
            	HX_STACK_THIS(this)
HXLINE( 214)		return this->hash->keys();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SparseArray2_obj,get_keys,return )

 ::Dynamic SparseArray2_obj::get_orderedKeys(){
            	HX_STACK_FRAME("hxmath.ds.SparseArray2","get_orderedKeys",0xabcca06c,"hxmath.ds.SparseArray2.get_orderedKeys","hxmath/ds/SparseArray2.hx",219,0x8c9d851c)
            	HX_STACK_THIS(this)
HXLINE( 219)		return  ::hxmath::ds::_SparseArray2::SparseArray2OrderedKeysIterator_obj::__new(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(SparseArray2_obj,get_orderedKeys,return )


SparseArray2_obj::SparseArray2_obj()
{
}

void SparseArray2_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SparseArray2);
	HX_MARK_MEMBER_NAME(hash,"hash");
	HX_MARK_END_CLASS();
}

void SparseArray2_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(hash,"hash");
}

hx::Val SparseArray2_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn()); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"keys") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_keys()); }
		if (HX_FIELD_EQ(inName,"hash") ) { return hx::Val( hash); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { return hx::Val( exists_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"iterator") ) { return hx::Val( iterator_dyn()); }
		if (HX_FIELD_EQ(inName,"inBounds") ) { return hx::Val( inBounds_dyn()); }
		if (HX_FIELD_EQ(inName,"getByKey") ) { return hx::Val( getByKey_dyn()); }
		if (HX_FIELD_EQ(inName,"get_keys") ) { return hx::Val( get_keys_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"orderedKeys") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_orderedKeys()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"toDenseArray") ) { return hx::Val( toDenseArray_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_orderedKeys") ) { return hx::Val( get_orderedKeys_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SparseArray2_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"hash") ) { hash=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SparseArray2_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("keys","\xf4","\xe1","\x06","\x47"));
	outFields->push(HX_HCSTRING("orderedKeys","\x01","\x51","\x5a","\x25"));
	outFields->push(HX_HCSTRING("hash","\xce","\x2f","\x08","\x45"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SparseArray2_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(SparseArray2_obj,hash),HX_HCSTRING("hash","\xce","\x2f","\x08","\x45")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SparseArray2_obj_sStaticStorageInfo = 0;
#endif

static ::String SparseArray2_obj_sMemberFields[] = {
	HX_HCSTRING("hash","\xce","\x2f","\x08","\x45"),
	HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"),
	HX_HCSTRING("inBounds","\x3a","\xd0","\x9b","\xee"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("getByKey","\x92","\xfb","\x4f","\x1d"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("toDenseArray","\xd5","\x22","\xce","\x54"),
	HX_HCSTRING("get_keys","\x7d","\x9d","\xc1","\xc6"),
	HX_HCSTRING("get_orderedKeys","\x98","\x08","\x3c","\xe6"),
	::String(null()) };

static void SparseArray2_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SparseArray2_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SparseArray2_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SparseArray2_obj::__mClass,"__mClass");
};

#endif

hx::Class SparseArray2_obj::__mClass;

void SparseArray2_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hxmath.ds.SparseArray2","\x42","\x10","\xed","\x90");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SparseArray2_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SparseArray2_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SparseArray2_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SparseArray2_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SparseArray2_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SparseArray2_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxmath
} // end namespace ds
