// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_hxmath_ds_IArray2
#include <hxmath/ds/IArray2.h>
#endif
#ifndef INCLUDED_hxmath_ds_SparseArray2
#include <hxmath/ds/SparseArray2.h>
#endif
#ifndef INCLUDED_hxmath_ds__SparseArray2_SparseArray2OrderedKeysIterator
#include <hxmath/ds/_SparseArray2/SparseArray2OrderedKeysIterator.h>
#endif

namespace hxmath{
namespace ds{
namespace _SparseArray2{

void SparseArray2OrderedKeysIterator_obj::__construct( ::hxmath::ds::SparseArray2 array){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		Int _hx_run(Int a,Int b){
            			HX_STACK_FRAME("hxmath.ds._SparseArray2.SparseArray2OrderedKeysIterator","new",0xe5920da9,"hxmath.ds._SparseArray2.SparseArray2OrderedKeysIterator.new","hxmath/ds/SparseArray2.hx",29,0x8c9d851c)
            			HX_STACK_ARG(a,"a")
            			HX_STACK_ARG(b,"b")
HXLINE(  30)			if ((a < b)) {
HXLINE(  32)				return (int)-1;
            			}
            			else {
HXLINE(  34)				if ((a > b)) {
HXLINE(  36)					return (int)1;
            				}
            			}
HXLINE(  39)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("hxmath.ds._SparseArray2.SparseArray2OrderedKeysIterator","new",0xe5920da9,"hxmath.ds._SparseArray2.SparseArray2OrderedKeysIterator.new","hxmath/ds/SparseArray2.hx",9,0x8c9d851c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(array,"array")
HXLINE(  13)		this->currentIndex = (int)0;
HXLINE(  17)		this->array = array;
HXLINE(  19)		this->keys = ::Array_obj< Int >::__new();
HXLINE(  22)		{
HXLINE(  22)			HX_VARI(  ::Dynamic,tmp) = array->hash->keys();
HXDLIN(  22)			while(true){
HXLINE(  22)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  22)				if (_hx_tmp) {
HXLINE(  22)					goto _hx_goto_0;
            				}
HXDLIN(  22)				HX_VARI( Int,key) = ( (Int)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE(  24)				this->keys->push(key);
            			}
            			_hx_goto_0:;
            		}
HXLINE(  27)		this->keys->sort( ::Dynamic(new _hx_Closure_0()));
            	}

Dynamic SparseArray2OrderedKeysIterator_obj::__CreateEmpty() { return new SparseArray2OrderedKeysIterator_obj; }

hx::ObjectPtr< SparseArray2OrderedKeysIterator_obj > SparseArray2OrderedKeysIterator_obj::__new( ::hxmath::ds::SparseArray2 array)
{
	hx::ObjectPtr< SparseArray2OrderedKeysIterator_obj > _hx_result = new SparseArray2OrderedKeysIterator_obj();
	_hx_result->__construct(array);
	return _hx_result;
}

Dynamic SparseArray2OrderedKeysIterator_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SparseArray2OrderedKeysIterator_obj > _hx_result = new SparseArray2OrderedKeysIterator_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

Bool SparseArray2OrderedKeysIterator_obj::hasNext(){
            	HX_STACK_FRAME("hxmath.ds._SparseArray2.SparseArray2OrderedKeysIterator","hasNext",0xee27bb36,"hxmath.ds._SparseArray2.SparseArray2OrderedKeysIterator.hasNext","hxmath/ds/SparseArray2.hx",45,0x8c9d851c)
            	HX_STACK_THIS(this)
HXLINE(  45)		return (this->currentIndex < this->keys->length);
            	}


HX_DEFINE_DYNAMIC_FUNC0(SparseArray2OrderedKeysIterator_obj,hasNext,return )

Int SparseArray2OrderedKeysIterator_obj::next(){
            	HX_STACK_FRAME("hxmath.ds._SparseArray2.SparseArray2OrderedKeysIterator","next",0xfa39e78a,"hxmath.ds._SparseArray2.SparseArray2OrderedKeysIterator.next","hxmath/ds/SparseArray2.hx",50,0x8c9d851c)
            	HX_STACK_THIS(this)
HXLINE(  50)		return this->keys->__get(this->currentIndex++);
            	}


HX_DEFINE_DYNAMIC_FUNC0(SparseArray2OrderedKeysIterator_obj,next,return )


SparseArray2OrderedKeysIterator_obj::SparseArray2OrderedKeysIterator_obj()
{
}

void SparseArray2OrderedKeysIterator_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SparseArray2OrderedKeysIterator);
	HX_MARK_MEMBER_NAME(array,"array");
	HX_MARK_MEMBER_NAME(keys,"keys");
	HX_MARK_MEMBER_NAME(currentIndex,"currentIndex");
	HX_MARK_END_CLASS();
}

void SparseArray2OrderedKeysIterator_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(array,"array");
	HX_VISIT_MEMBER_NAME(keys,"keys");
	HX_VISIT_MEMBER_NAME(currentIndex,"currentIndex");
}

hx::Val SparseArray2OrderedKeysIterator_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"keys") ) { return hx::Val( keys); }
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"array") ) { return hx::Val( array); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hasNext") ) { return hx::Val( hasNext_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentIndex") ) { return hx::Val( currentIndex); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SparseArray2OrderedKeysIterator_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"keys") ) { keys=inValue.Cast< ::Array< Int > >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"array") ) { array=inValue.Cast<  ::hxmath::ds::SparseArray2 >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentIndex") ) { currentIndex=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SparseArray2OrderedKeysIterator_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("array","\x99","\x6d","\x8f","\x25"));
	outFields->push(HX_HCSTRING("keys","\xf4","\xe1","\x06","\x47"));
	outFields->push(HX_HCSTRING("currentIndex","\x19","\x80","\x20","\x05"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SparseArray2OrderedKeysIterator_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::hxmath::ds::SparseArray2*/ ,(int)offsetof(SparseArray2OrderedKeysIterator_obj,array),HX_HCSTRING("array","\x99","\x6d","\x8f","\x25")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(SparseArray2OrderedKeysIterator_obj,keys),HX_HCSTRING("keys","\xf4","\xe1","\x06","\x47")},
	{hx::fsInt,(int)offsetof(SparseArray2OrderedKeysIterator_obj,currentIndex),HX_HCSTRING("currentIndex","\x19","\x80","\x20","\x05")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SparseArray2OrderedKeysIterator_obj_sStaticStorageInfo = 0;
#endif

static ::String SparseArray2OrderedKeysIterator_obj_sMemberFields[] = {
	HX_HCSTRING("array","\x99","\x6d","\x8f","\x25"),
	HX_HCSTRING("keys","\xf4","\xe1","\x06","\x47"),
	HX_HCSTRING("currentIndex","\x19","\x80","\x20","\x05"),
	HX_HCSTRING("hasNext","\x6d","\xa5","\x46","\x18"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	::String(null()) };

static void SparseArray2OrderedKeysIterator_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SparseArray2OrderedKeysIterator_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SparseArray2OrderedKeysIterator_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SparseArray2OrderedKeysIterator_obj::__mClass,"__mClass");
};

#endif

hx::Class SparseArray2OrderedKeysIterator_obj::__mClass;

void SparseArray2OrderedKeysIterator_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hxmath.ds._SparseArray2.SparseArray2OrderedKeysIterator","\x37","\x05","\xe6","\x2f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SparseArray2OrderedKeysIterator_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SparseArray2OrderedKeysIterator_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SparseArray2OrderedKeysIterator_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SparseArray2OrderedKeysIterator_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SparseArray2OrderedKeysIterator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SparseArray2OrderedKeysIterator_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxmath
} // end namespace ds
} // end namespace _SparseArray2
