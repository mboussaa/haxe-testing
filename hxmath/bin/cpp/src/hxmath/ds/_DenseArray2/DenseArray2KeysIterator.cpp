// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_hxmath_ds_DenseArray2
#include <hxmath/ds/DenseArray2.h>
#endif
#ifndef INCLUDED_hxmath_ds_IArray2
#include <hxmath/ds/IArray2.h>
#endif
#ifndef INCLUDED_hxmath_ds__DenseArray2_DenseArray2KeysIterator
#include <hxmath/ds/_DenseArray2/DenseArray2KeysIterator.h>
#endif
#ifndef INCLUDED_hxmath_math__ShortVector2_ShortVector2_Impl_
#include <hxmath/math/_ShortVector2/ShortVector2_Impl_.h>
#endif

namespace hxmath{
namespace ds{
namespace _DenseArray2{

void DenseArray2KeysIterator_obj::__construct( ::hxmath::ds::DenseArray2 array){
            	HX_STACK_FRAME("hxmath.ds._DenseArray2.DenseArray2KeysIterator","new",0x1e94d900,"hxmath.ds._DenseArray2.DenseArray2KeysIterator.new","hxmath/ds/DenseArray2.hx",8,0x254ae3ef)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(array,"array")
HXLINE(  12)		this->currentY = (int)0;
HXLINE(  11)		this->currentX = (int)0;
HXLINE(  16)		this->array = array;
            	}

Dynamic DenseArray2KeysIterator_obj::__CreateEmpty() { return new DenseArray2KeysIterator_obj; }

hx::ObjectPtr< DenseArray2KeysIterator_obj > DenseArray2KeysIterator_obj::__new( ::hxmath::ds::DenseArray2 array)
{
	hx::ObjectPtr< DenseArray2KeysIterator_obj > _hx_result = new DenseArray2KeysIterator_obj();
	_hx_result->__construct(array);
	return _hx_result;
}

Dynamic DenseArray2KeysIterator_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DenseArray2KeysIterator_obj > _hx_result = new DenseArray2KeysIterator_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

Bool DenseArray2KeysIterator_obj::hasNext(){
            	HX_STACK_FRAME("hxmath.ds._DenseArray2.DenseArray2KeysIterator","hasNext",0x3fc87e0d,"hxmath.ds._DenseArray2.DenseArray2KeysIterator.hasNext","hxmath/ds/DenseArray2.hx",21,0x254ae3ef)
            	HX_STACK_THIS(this)
HXLINE(  21)		if ((this->currentX < this->array->width)) {
HXLINE(  21)			return (this->currentY < this->array->height);
            		}
            		else {
HXLINE(  21)			return false;
            		}
HXDLIN(  21)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DenseArray2KeysIterator_obj,hasNext,return )

Int DenseArray2KeysIterator_obj::next(){
            	HX_STACK_FRAME("hxmath.ds._DenseArray2.DenseArray2KeysIterator","next",0xa3a90853,"hxmath.ds._DenseArray2.DenseArray2KeysIterator.next","hxmath/ds/DenseArray2.hx",26,0x254ae3ef)
            	HX_STACK_THIS(this)
HXLINE(  27)		HX_VARI( Int,currentKey) = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new(this->currentX,this->currentY);
HXLINE(  30)		Bool _hx_tmp = ((this->currentX + (int)1) < this->array->width);
HXDLIN(  30)		if (_hx_tmp) {
HXLINE(  32)			this->currentX++;
            		}
            		else {
HXLINE(  36)			Bool _hx_tmp1 = ((this->currentY + (int)1) < this->array->height);
HXDLIN(  36)			if (_hx_tmp1) {
HXLINE(  38)				this->currentX = (int)0;
HXLINE(  39)				this->currentY++;
            			}
            			else {
HXLINE(  45)				this->currentX = this->array->width;
HXLINE(  46)				this->currentY = this->array->height;
            			}
            		}
HXLINE(  49)		return currentKey;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DenseArray2KeysIterator_obj,next,return )


DenseArray2KeysIterator_obj::DenseArray2KeysIterator_obj()
{
}

void DenseArray2KeysIterator_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DenseArray2KeysIterator);
	HX_MARK_MEMBER_NAME(array,"array");
	HX_MARK_MEMBER_NAME(currentX,"currentX");
	HX_MARK_MEMBER_NAME(currentY,"currentY");
	HX_MARK_END_CLASS();
}

void DenseArray2KeysIterator_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(array,"array");
	HX_VISIT_MEMBER_NAME(currentX,"currentX");
	HX_VISIT_MEMBER_NAME(currentY,"currentY");
}

hx::Val DenseArray2KeysIterator_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"array") ) { return hx::Val( array); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hasNext") ) { return hx::Val( hasNext_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"currentX") ) { return hx::Val( currentX); }
		if (HX_FIELD_EQ(inName,"currentY") ) { return hx::Val( currentY); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val DenseArray2KeysIterator_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"array") ) { array=inValue.Cast<  ::hxmath::ds::DenseArray2 >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"currentX") ) { currentX=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentY") ) { currentY=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DenseArray2KeysIterator_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("array","\x99","\x6d","\x8f","\x25"));
	outFields->push(HX_HCSTRING("currentX","\xff","\x15","\x45","\x9b"));
	outFields->push(HX_HCSTRING("currentY","\x00","\x16","\x45","\x9b"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DenseArray2KeysIterator_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::hxmath::ds::DenseArray2*/ ,(int)offsetof(DenseArray2KeysIterator_obj,array),HX_HCSTRING("array","\x99","\x6d","\x8f","\x25")},
	{hx::fsInt,(int)offsetof(DenseArray2KeysIterator_obj,currentX),HX_HCSTRING("currentX","\xff","\x15","\x45","\x9b")},
	{hx::fsInt,(int)offsetof(DenseArray2KeysIterator_obj,currentY),HX_HCSTRING("currentY","\x00","\x16","\x45","\x9b")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *DenseArray2KeysIterator_obj_sStaticStorageInfo = 0;
#endif

static ::String DenseArray2KeysIterator_obj_sMemberFields[] = {
	HX_HCSTRING("array","\x99","\x6d","\x8f","\x25"),
	HX_HCSTRING("currentX","\xff","\x15","\x45","\x9b"),
	HX_HCSTRING("currentY","\x00","\x16","\x45","\x9b"),
	HX_HCSTRING("hasNext","\x6d","\xa5","\x46","\x18"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	::String(null()) };

static void DenseArray2KeysIterator_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DenseArray2KeysIterator_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DenseArray2KeysIterator_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DenseArray2KeysIterator_obj::__mClass,"__mClass");
};

#endif

hx::Class DenseArray2KeysIterator_obj::__mClass;

void DenseArray2KeysIterator_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hxmath.ds._DenseArray2.DenseArray2KeysIterator","\x0e","\x99","\x7c","\x33");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = DenseArray2KeysIterator_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DenseArray2KeysIterator_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DenseArray2KeysIterator_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DenseArray2KeysIterator_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DenseArray2KeysIterator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DenseArray2KeysIterator_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxmath
} // end namespace ds
} // end namespace _DenseArray2
