// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_hxmath_ds_DenseArray2
#include <hxmath/ds/DenseArray2.h>
#endif
#ifndef INCLUDED_hxmath_ds_IArray2
#include <hxmath/ds/IArray2.h>
#endif
#ifndef INCLUDED_hxmath_ds_SparseArray2
#include <hxmath/ds/SparseArray2.h>
#endif
#ifndef INCLUDED_hxmath_ds__DenseArray2_DenseArray2KeysIterator
#include <hxmath/ds/_DenseArray2/DenseArray2KeysIterator.h>
#endif
#ifndef INCLUDED_hxmath_math__ShortVector2_ShortVector2_Impl_
#include <hxmath/math/_ShortVector2/ShortVector2_Impl_.h>
#endif

namespace hxmath{
namespace ds{

void DenseArray2_obj::__construct(Int width,Int height, ::Dynamic defaultValue){
            	HX_STACK_FRAME("hxmath.ds.DenseArray2","new",0xb003cd41,"hxmath.ds.DenseArray2.new","hxmath/ds/DenseArray2.hx",80,0x254ae3ef)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(defaultValue,"defaultValue")
HXLINE(  81)		this->array = ::cpp::VirtualArray_obj::__new();
HXLINE(  82)		this->width = width;
HXLINE(  83)		this->height = height;
HXLINE(  84)		this->defaultValue = defaultValue;
HXLINE(  86)		{
HXLINE(  86)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  86)			HX_VARI( Int,_g) = (width * height);
HXDLIN(  86)			while((_g1 < _g)){
HXLINE(  86)				HX_VARI( Int,i) = _g1++;
HXLINE(  88)				this->array->set(i,defaultValue);
            			}
            		}
            	}

Dynamic DenseArray2_obj::__CreateEmpty() { return new DenseArray2_obj; }

hx::ObjectPtr< DenseArray2_obj > DenseArray2_obj::__new(Int width,Int height, ::Dynamic defaultValue)
{
	hx::ObjectPtr< DenseArray2_obj > _hx_result = new DenseArray2_obj();
	_hx_result->__construct(width,height,defaultValue);
	return _hx_result;
}

Dynamic DenseArray2_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DenseArray2_obj > _hx_result = new DenseArray2_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

static ::hxmath::ds::IArray2_obj _hx_hxmath_ds_DenseArray2__hx_hxmath_ds_IArray2= {
	(  ::Dynamic (hx::Object::*)())&::hxmath::ds::DenseArray2_obj::get_keys,
	(  ::Dynamic (hx::Object::*)())&::hxmath::ds::DenseArray2_obj::iterator,
	( Bool (hx::Object::*)(Int,Int))&::hxmath::ds::DenseArray2_obj::inBounds,
	(  ::Dynamic (hx::Object::*)(Int,Int))&::hxmath::ds::DenseArray2_obj::get,
	(  ::Dynamic (hx::Object::*)(Int))&::hxmath::ds::DenseArray2_obj::getByKey,
	( void (hx::Object::*)(Int,Int, ::Dynamic))&::hxmath::ds::DenseArray2_obj::set,
};

void *DenseArray2_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x733ae6db: return &_hx_hxmath_ds_DenseArray2__hx_hxmath_ds_IArray2;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::Dynamic DenseArray2_obj::iterator(){
            	HX_STACK_FRAME("hxmath.ds.DenseArray2","iterator",0x8ec4fd6d,"hxmath.ds.DenseArray2.iterator","hxmath/ds/DenseArray2.hx",132,0x254ae3ef)
            	HX_STACK_THIS(this)
HXLINE( 132)		return this->array->iterator();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DenseArray2_obj,iterator,return )

Bool DenseArray2_obj::inBounds(Int x,Int y){
            	HX_STACK_FRAME("hxmath.ds.DenseArray2","inBounds",0xe9c683b9,"hxmath.ds.DenseArray2.inBounds","hxmath/ds/DenseArray2.hx",144,0x254ae3ef)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 144)		Bool _hx_tmp;
HXDLIN( 144)		Bool _hx_tmp1;
HXDLIN( 144)		if ((x >= (int)0)) {
HXLINE( 144)			_hx_tmp1 = (x < this->width);
            		}
            		else {
HXLINE( 144)			_hx_tmp1 = false;
            		}
HXDLIN( 144)		if (_hx_tmp1) {
HXLINE( 144)			_hx_tmp = (y >= (int)0);
            		}
            		else {
HXLINE( 144)			_hx_tmp = false;
            		}
HXDLIN( 144)		if (_hx_tmp) {
HXLINE( 144)			return (y < this->height);
            		}
            		else {
HXLINE( 144)			return false;
            		}
HXDLIN( 144)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(DenseArray2_obj,inBounds,return )

 ::Dynamic DenseArray2_obj::get(Int x,Int y){
            	HX_STACK_FRAME("hxmath.ds.DenseArray2","get",0xaffe7d77,"hxmath.ds.DenseArray2.get","hxmath/ds/DenseArray2.hx",155,0x254ae3ef)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 156)		Bool _hx_tmp;
HXDLIN( 156)		Bool _hx_tmp1;
HXDLIN( 156)		Bool _hx_tmp2;
HXDLIN( 156)		if ((x >= (int)0)) {
HXLINE( 156)			_hx_tmp2 = (x < this->width);
            		}
            		else {
HXLINE( 156)			_hx_tmp2 = false;
            		}
HXDLIN( 156)		if (_hx_tmp2) {
HXLINE( 156)			_hx_tmp1 = (y >= (int)0);
            		}
            		else {
HXLINE( 156)			_hx_tmp1 = false;
            		}
HXDLIN( 156)		if (_hx_tmp1) {
HXLINE( 156)			_hx_tmp = (y < this->height);
            		}
            		else {
HXLINE( 156)			_hx_tmp = false;
            		}
HXDLIN( 156)		if (!(_hx_tmp)) {
HXLINE( 156)			HX_STACK_DO_THROW(((((((((HX_("Specified (x=",dd,9b,83,fe) + x) + HX_(", y=",18,15,2e,1d)) + y) + HX_(") fields not in the ranges x: [0, ",0a,c6,50,e7)) + this->width) + HX_(") y: [0, ",11,b1,6d,70)) + this->height) + HX_(")",29,00,00,00)));
            		}
HXLINE( 157)		return this->array->__get((x + (y * this->width)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(DenseArray2_obj,get,return )

 ::Dynamic DenseArray2_obj::getByKey(Int key){
            	HX_STACK_FRAME("hxmath.ds.DenseArray2","getByKey",0x187aaf11,"hxmath.ds.DenseArray2.getByKey","hxmath/ds/DenseArray2.hx",168,0x254ae3ef)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(key,"key")
HXLINE( 168)		return this->array->__get((((int)key & (int)(int)65535) + (((int)((int)key >> (int)(int)16) & (int)(int)65535) * this->width)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(DenseArray2_obj,getByKey,return )

void DenseArray2_obj::set(Int x,Int y, ::Dynamic item){
            	HX_STACK_FRAME("hxmath.ds.DenseArray2","set",0xb0079883,"hxmath.ds.DenseArray2.set","hxmath/ds/DenseArray2.hx",179,0x254ae3ef)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(item,"item")
HXLINE( 180)		Bool _hx_tmp;
HXDLIN( 180)		Bool _hx_tmp1;
HXDLIN( 180)		Bool _hx_tmp2;
HXDLIN( 180)		if ((x >= (int)0)) {
HXLINE( 180)			_hx_tmp2 = (x < this->width);
            		}
            		else {
HXLINE( 180)			_hx_tmp2 = false;
            		}
HXDLIN( 180)		if (_hx_tmp2) {
HXLINE( 180)			_hx_tmp1 = (y >= (int)0);
            		}
            		else {
HXLINE( 180)			_hx_tmp1 = false;
            		}
HXDLIN( 180)		if (_hx_tmp1) {
HXLINE( 180)			_hx_tmp = (y < this->height);
            		}
            		else {
HXLINE( 180)			_hx_tmp = false;
            		}
HXDLIN( 180)		if (!(_hx_tmp)) {
HXLINE( 180)			HX_STACK_DO_THROW(((((((((HX_("Specified (x=",dd,9b,83,fe) + x) + HX_(", y=",18,15,2e,1d)) + y) + HX_(") fields not in the ranges x: [0, ",0a,c6,50,e7)) + this->width) + HX_(") y: [0, ",11,b1,6d,70)) + this->height) + HX_(")",29,00,00,00)));
            		}
HXLINE( 181)		Int _hx_tmp3 = (x + (y * this->width));
HXDLIN( 181)		this->array->set(_hx_tmp3,item);
            	}


HX_DEFINE_DYNAMIC_FUNC3(DenseArray2_obj,set,(void))

void DenseArray2_obj::fill( ::Dynamic item){
            	HX_STACK_FRAME("hxmath.ds.DenseArray2","fill",0x4e091682,"hxmath.ds.DenseArray2.fill","hxmath/ds/DenseArray2.hx",191,0x254ae3ef)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(item,"item")
HXLINE( 191)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 191)		HX_VARI( Int,_g) = this->height;
HXDLIN( 191)		while((_g1 < _g)){
HXLINE( 191)			HX_VARI( Int,y) = _g1++;
HXLINE( 193)			{
HXLINE( 193)				HX_VARI( Int,_g3) = (int)0;
HXDLIN( 193)				HX_VARI( Int,_g2) = this->width;
HXDLIN( 193)				while((_g3 < _g2)){
HXLINE( 193)					HX_VARI( Int,x) = _g3++;
HXLINE( 195)					Int _hx_tmp = (x + (y * this->width));
HXDLIN( 195)					this->array->set(_hx_tmp,item);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DenseArray2_obj,fill,(void))

void DenseArray2_obj::resize(Int newWidth,Int newHeight, ::Dynamic defaultValue){
            	HX_STACK_FRAME("hxmath.ds.DenseArray2","resize",0x36a9dfb3,"hxmath.ds.DenseArray2.resize","hxmath/ds/DenseArray2.hx",208,0x254ae3ef)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(newWidth,"newWidth")
            	HX_STACK_ARG(newHeight,"newHeight")
            	HX_STACK_ARG(defaultValue,"defaultValue")
HXLINE( 209)		HX_VARI( ::cpp::VirtualArray,newArray) = ::cpp::VirtualArray_obj::__new();
HXLINE( 212)		HX_VAR( Int,strideY);
HXDLIN( 212)		if ((this->height > newHeight)) {
HXLINE( 212)			strideY = this->height;
            		}
            		else {
HXLINE( 212)			strideY = newHeight;
            		}
HXLINE( 213)		HX_VAR( Int,strideX);
HXDLIN( 213)		if ((this->width > newWidth)) {
HXLINE( 213)			strideX = this->width;
            		}
            		else {
HXLINE( 213)			strideX = newWidth;
            		}
HXLINE( 216)		{
HXLINE( 216)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 216)			HX_VARI( Int,_g) = strideY;
HXDLIN( 216)			while((_g1 < _g)){
HXLINE( 216)				HX_VARI( Int,reverseY) = _g1++;
HXLINE( 218)				HX_VARI( Int,y) = ((strideY - (int)1) - reverseY);
HXLINE( 219)				{
HXLINE( 219)					HX_VARI( Int,_g3) = (int)0;
HXDLIN( 219)					HX_VARI( Int,_g2) = strideX;
HXDLIN( 219)					while((_g3 < _g2)){
HXLINE( 219)						HX_VARI( Int,reverseX) = _g3++;
HXLINE( 221)						HX_VARI( Int,x) = ((strideX - (int)1) - reverseX);
HXLINE( 224)						HX_VAR( Bool,copyOld);
HXDLIN( 224)						Bool _hx_tmp;
HXDLIN( 224)						Bool _hx_tmp1;
HXDLIN( 224)						if ((x < this->width)) {
HXLINE( 224)							_hx_tmp1 = (x < newWidth);
            						}
            						else {
HXLINE( 224)							_hx_tmp1 = false;
            						}
HXDLIN( 224)						if (_hx_tmp1) {
HXLINE( 224)							_hx_tmp = (y < this->height);
            						}
            						else {
HXLINE( 224)							_hx_tmp = false;
            						}
HXDLIN( 224)						if (_hx_tmp) {
HXLINE( 224)							copyOld = (y < newHeight);
            						}
            						else {
HXLINE( 224)							copyOld = false;
            						}
HXLINE( 225)						Int _hx_tmp2 = (x + (y * newWidth));
HXDLIN( 225)						 ::Dynamic _hx_tmp3;
HXDLIN( 225)						if (copyOld) {
HXLINE( 225)							_hx_tmp3 = this->array->__get((x + (y * this->width)));
            						}
            						else {
HXLINE( 225)							_hx_tmp3 = defaultValue;
            						}
HXDLIN( 225)						newArray->set(_hx_tmp2,_hx_tmp3);
            					}
            				}
            			}
            		}
HXLINE( 231)		this->array = newArray;
HXLINE( 232)		this->width = newWidth;
HXLINE( 233)		this->height = newHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC3(DenseArray2_obj,resize,(void))

Int DenseArray2_obj::clippedBlit(Int targetX,Int targetY, ::hxmath::ds::DenseArray2 source,Int sourceX,Int sourceY,Int copyWidth,Int copyHeight){
            	HX_STACK_FRAME("hxmath.ds.DenseArray2","clippedBlit",0x54311db5,"hxmath.ds.DenseArray2.clippedBlit","hxmath/ds/DenseArray2.hx",249,0x254ae3ef)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(targetX,"targetX")
            	HX_STACK_ARG(targetY,"targetY")
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(sourceX,"sourceX")
            	HX_STACK_ARG(sourceY,"sourceY")
            	HX_STACK_ARG(copyWidth,"copyWidth")
            	HX_STACK_ARG(copyHeight,"copyHeight")
HXLINE( 251)		Bool _hx_tmp = (targetX < (int)0);
HXDLIN( 251)		if (_hx_tmp) {
HXLINE( 253)			hx::AddEq(sourceX,-(targetX));
HXLINE( 254)			targetX = (int)0;
            		}
HXLINE( 257)		Bool _hx_tmp1 = (targetY < (int)0);
HXDLIN( 257)		if (_hx_tmp1) {
HXLINE( 259)			hx::AddEq(sourceY,-(targetY));
HXLINE( 260)			targetY = (int)0;
            		}
HXLINE( 264)		Bool _hx_tmp2 = ((targetX + copyWidth) > this->width);
HXDLIN( 264)		if (_hx_tmp2) {
HXLINE( 266)			copyWidth = (this->width - targetX);
            		}
HXLINE( 269)		Bool _hx_tmp3 = ((targetY + copyHeight) > this->height);
HXDLIN( 269)		if (_hx_tmp3) {
HXLINE( 271)			copyHeight = (this->height - targetY);
            		}
HXLINE( 275)		Bool _hx_tmp4 = ((sourceX + copyWidth) > source->width);
HXDLIN( 275)		if (_hx_tmp4) {
HXLINE( 277)			copyWidth = (source->width - sourceX);
            		}
HXLINE( 280)		Bool _hx_tmp5 = ((sourceY + copyHeight) > source->height);
HXDLIN( 280)		if (_hx_tmp5) {
HXLINE( 282)			copyHeight = (source->height - sourceY);
            		}
HXLINE( 285)		Bool _hx_tmp6;
HXDLIN( 285)		Bool _hx_tmp7;
HXDLIN( 285)		Bool _hx_tmp8;
HXDLIN( 285)		if ((copyWidth != (int)0)) {
HXLINE( 285)			_hx_tmp8 = (copyHeight == (int)0);
            		}
            		else {
HXLINE( 285)			_hx_tmp8 = true;
            		}
HXDLIN( 285)		if (!(_hx_tmp8)) {
HXLINE( 285)			_hx_tmp7 = (targetX >= this->width);
            		}
            		else {
HXLINE( 285)			_hx_tmp7 = true;
            		}
HXDLIN( 285)		if (!(_hx_tmp7)) {
HXLINE( 285)			_hx_tmp6 = (targetY >= this->height);
            		}
            		else {
HXLINE( 285)			_hx_tmp6 = true;
            		}
HXDLIN( 285)		if (_hx_tmp6) {
HXLINE( 290)			return (int)0;
            		}
HXLINE( 293)		return this->blit(targetX,targetY,source,sourceX,sourceY,copyWidth,copyHeight);
            	}


HX_DEFINE_DYNAMIC_FUNC7(DenseArray2_obj,clippedBlit,return )

Int DenseArray2_obj::blit(Int targetX,Int targetY, ::hxmath::ds::DenseArray2 source,Int sourceX,Int sourceY,Int copyWidth,Int copyHeight){
            	HX_STACK_FRAME("hxmath.ds.DenseArray2","blit",0x4b668034,"hxmath.ds.DenseArray2.blit","hxmath/ds/DenseArray2.hx",309,0x254ae3ef)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(targetX,"targetX")
            	HX_STACK_ARG(targetY,"targetY")
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(sourceX,"sourceX")
            	HX_STACK_ARG(sourceY,"sourceY")
            	HX_STACK_ARG(copyWidth,"copyWidth")
            	HX_STACK_ARG(copyHeight,"copyHeight")
HXLINE( 310)		Bool _hx_tmp;
HXDLIN( 310)		Bool _hx_tmp1;
HXDLIN( 310)		Bool _hx_tmp2;
HXDLIN( 310)		Bool _hx_tmp3;
HXDLIN( 310)		Bool _hx_tmp4;
HXDLIN( 310)		if ((targetX >= (int)0)) {
HXLINE( 310)			_hx_tmp4 = (targetY < (int)0);
            		}
            		else {
HXLINE( 310)			_hx_tmp4 = true;
            		}
HXDLIN( 310)		if (!(_hx_tmp4)) {
HXLINE( 310)			_hx_tmp3 = (sourceX < (int)0);
            		}
            		else {
HXLINE( 310)			_hx_tmp3 = true;
            		}
HXDLIN( 310)		if (!(_hx_tmp3)) {
HXLINE( 310)			_hx_tmp2 = (sourceY < (int)0);
            		}
            		else {
HXLINE( 310)			_hx_tmp2 = true;
            		}
HXDLIN( 310)		if (!(_hx_tmp2)) {
HXLINE( 310)			_hx_tmp1 = (copyWidth <= (int)0);
            		}
            		else {
HXLINE( 310)			_hx_tmp1 = true;
            		}
HXDLIN( 310)		if (!(_hx_tmp1)) {
HXLINE( 310)			_hx_tmp = (copyHeight <= (int)0);
            		}
            		else {
HXLINE( 310)			_hx_tmp = true;
            		}
HXDLIN( 310)		if (_hx_tmp) {
HXLINE( 317)			HX_STACK_DO_THROW(((((((((((((HX_("Invalid parameters Target(",ca,df,3c,80) + targetX) + HX_(", ",74,26,00,00)) + targetY) + HX_(") Source(",d6,4b,92,75)) + sourceX) + HX_(", ",74,26,00,00)) + sourceY) + HX_(") CopyWidthHeight(",47,62,cd,1e)) + copyWidth) + HX_(", ",74,26,00,00)) + copyHeight) + HX_(")",29,00,00,00)));
            		}
HXLINE( 320)		Bool _hx_tmp5;
HXDLIN( 320)		if (((targetX + copyWidth) <= this->width)) {
HXLINE( 320)			_hx_tmp5 = ((targetY + copyHeight) > this->height);
            		}
            		else {
HXLINE( 320)			_hx_tmp5 = true;
            		}
HXDLIN( 320)		if (_hx_tmp5) {
HXLINE( 322)			HX_STACK_DO_THROW(((((((((((((((((HX_("Overlapping rect Target(",c2,5f,19,12) + targetX) + HX_(", ",74,26,00,00)) + targetY) + HX_(") Source(",d6,4b,92,75)) + sourceX) + HX_(", ",74,26,00,00)) + sourceY) + HX_(") CopyWidthHeight(",47,62,cd,1e)) + copyWidth) + HX_(", ",74,26,00,00)) + copyHeight) + HX_(") CurrentRect(",02,6e,ac,db)) + this->width) + HX_(", ",74,26,00,00)) + this->height) + HX_(")",29,00,00,00)));
            		}
HXLINE( 325)		HX_VARI( Int,blitCount) = (int)0;
HXLINE( 327)		{
HXLINE( 327)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 327)			while((_g1 < copyHeight)){
HXLINE( 327)				HX_VARI( Int,y) = _g1++;
HXLINE( 329)				{
HXLINE( 329)					HX_VARI( Int,_g3) = (int)0;
HXDLIN( 329)					while((_g3 < copyWidth)){
HXLINE( 329)						HX_VARI( Int,x) = _g3++;
HXLINE( 331)						HX_VARI_NAME( Int,x1,"x") = (x + sourceX);
HXDLIN( 331)						HX_VARI_NAME( Int,y1,"y") = (y + sourceY);
HXDLIN( 331)						Bool _hx_tmp6;
HXDLIN( 331)						Bool _hx_tmp7;
HXDLIN( 331)						Bool _hx_tmp8;
HXDLIN( 331)						if ((x1 >= (int)0)) {
HXLINE( 331)							_hx_tmp8 = (x1 < source->width);
            						}
            						else {
HXLINE( 331)							_hx_tmp8 = false;
            						}
HXDLIN( 331)						if (_hx_tmp8) {
HXLINE( 331)							_hx_tmp7 = (y1 >= (int)0);
            						}
            						else {
HXLINE( 331)							_hx_tmp7 = false;
            						}
HXDLIN( 331)						if (_hx_tmp7) {
HXLINE( 331)							_hx_tmp6 = (y1 < source->height);
            						}
            						else {
HXLINE( 331)							_hx_tmp6 = false;
            						}
HXDLIN( 331)						if (!(_hx_tmp6)) {
HXLINE( 331)							HX_STACK_DO_THROW(((((((((HX_("Specified (x=",dd,9b,83,fe) + x1) + HX_(", y=",18,15,2e,1d)) + y1) + HX_(") fields not in the ranges x: [0, ",0a,c6,50,e7)) + source->width) + HX_(") y: [0, ",11,b1,6d,70)) + source->height) + HX_(")",29,00,00,00)));
            						}
HXDLIN( 331)						Int _hx_tmp9 = (x1 + (y1 * source->width));
HXLINE( 332)						{
HXLINE( 332)							HX_VARI_NAME( Int,x2,"x") = (x + targetX);
HXDLIN( 332)							HX_VARI_NAME( Int,y2,"y") = (y + targetY);
HXDLIN( 332)							Bool _hx_tmp10;
HXDLIN( 332)							Bool _hx_tmp11;
HXDLIN( 332)							Bool _hx_tmp12;
HXDLIN( 332)							if ((x2 >= (int)0)) {
HXLINE( 332)								_hx_tmp12 = (x2 < this->width);
            							}
            							else {
HXLINE( 332)								_hx_tmp12 = false;
            							}
HXDLIN( 332)							if (_hx_tmp12) {
HXLINE( 332)								_hx_tmp11 = (y2 >= (int)0);
            							}
            							else {
HXLINE( 332)								_hx_tmp11 = false;
            							}
HXDLIN( 332)							if (_hx_tmp11) {
HXLINE( 332)								_hx_tmp10 = (y2 < this->height);
            							}
            							else {
HXLINE( 332)								_hx_tmp10 = false;
            							}
HXDLIN( 332)							if (!(_hx_tmp10)) {
HXLINE( 332)								HX_STACK_DO_THROW(((((((((HX_("Specified (x=",dd,9b,83,fe) + x2) + HX_(", y=",18,15,2e,1d)) + y2) + HX_(") fields not in the ranges x: [0, ",0a,c6,50,e7)) + this->width) + HX_(") y: [0, ",11,b1,6d,70)) + this->height) + HX_(")",29,00,00,00)));
            							}
HXDLIN( 332)							Int _hx_tmp13 = (x2 + (y2 * this->width));
HXDLIN( 332)							this->array->set(_hx_tmp13,source->array->__get(_hx_tmp9));
            						}
HXLINE( 333)						++blitCount;
            					}
            				}
            			}
            		}
HXLINE( 337)		return blitCount;
            	}


HX_DEFINE_DYNAMIC_FUNC7(DenseArray2_obj,blit,return )

 ::hxmath::ds::DenseArray2 DenseArray2_obj::clone(){
            	HX_STACK_FRAME("hxmath.ds.DenseArray2","clone",0x41b4ca7e,"hxmath.ds.DenseArray2.clone","hxmath/ds/DenseArray2.hx",346,0x254ae3ef)
            	HX_STACK_THIS(this)
HXLINE( 347)		HX_VARI(  ::hxmath::ds::DenseArray2,copy) =  ::hxmath::ds::DenseArray2_obj::__new(this->width,this->height,this->defaultValue);
HXLINE( 349)		{
HXLINE( 349)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 349)			HX_VARI( Int,_g) = this->height;
HXDLIN( 349)			while((_g1 < _g)){
HXLINE( 349)				HX_VARI( Int,y) = _g1++;
HXLINE( 351)				{
HXLINE( 351)					HX_VARI( Int,_g3) = (int)0;
HXDLIN( 351)					HX_VARI( Int,_g2) = this->width;
HXDLIN( 351)					while((_g3 < _g2)){
HXLINE( 351)						HX_VARI( Int,x) = _g3++;
HXLINE( 353)						{
HXLINE( 353)							Bool _hx_tmp;
HXDLIN( 353)							Bool _hx_tmp1;
HXDLIN( 353)							Bool _hx_tmp2;
HXDLIN( 353)							if ((x >= (int)0)) {
HXLINE( 353)								_hx_tmp2 = (x < this->width);
            							}
            							else {
HXLINE( 353)								_hx_tmp2 = false;
            							}
HXDLIN( 353)							if (_hx_tmp2) {
HXLINE( 353)								_hx_tmp1 = (y >= (int)0);
            							}
            							else {
HXLINE( 353)								_hx_tmp1 = false;
            							}
HXDLIN( 353)							if (_hx_tmp1) {
HXLINE( 353)								_hx_tmp = (y < this->height);
            							}
            							else {
HXLINE( 353)								_hx_tmp = false;
            							}
HXDLIN( 353)							if (!(_hx_tmp)) {
HXLINE( 353)								HX_STACK_DO_THROW(((((((((HX_("Specified (x=",dd,9b,83,fe) + x) + HX_(", y=",18,15,2e,1d)) + y) + HX_(") fields not in the ranges x: [0, ",0a,c6,50,e7)) + this->width) + HX_(") y: [0, ",11,b1,6d,70)) + this->height) + HX_(")",29,00,00,00)));
            							}
HXDLIN( 353)							 ::Dynamic _hx_tmp3 = this->array->__get((x + (y * this->width)));
HXDLIN( 353)							Bool _hx_tmp4;
HXDLIN( 353)							Bool _hx_tmp5;
HXDLIN( 353)							Bool _hx_tmp6;
HXDLIN( 353)							if ((x >= (int)0)) {
HXLINE( 353)								_hx_tmp6 = (x < copy->width);
            							}
            							else {
HXLINE( 353)								_hx_tmp6 = false;
            							}
HXDLIN( 353)							if (_hx_tmp6) {
HXLINE( 353)								_hx_tmp5 = (y >= (int)0);
            							}
            							else {
HXLINE( 353)								_hx_tmp5 = false;
            							}
HXDLIN( 353)							if (_hx_tmp5) {
HXLINE( 353)								_hx_tmp4 = (y < copy->height);
            							}
            							else {
HXLINE( 353)								_hx_tmp4 = false;
            							}
HXDLIN( 353)							if (!(_hx_tmp4)) {
HXLINE( 353)								HX_STACK_DO_THROW(((((((((HX_("Specified (x=",dd,9b,83,fe) + x) + HX_(", y=",18,15,2e,1d)) + y) + HX_(") fields not in the ranges x: [0, ",0a,c6,50,e7)) + copy->width) + HX_(") y: [0, ",11,b1,6d,70)) + copy->height) + HX_(")",29,00,00,00)));
            							}
HXDLIN( 353)							Int _hx_tmp7 = (x + (y * copy->width));
HXDLIN( 353)							copy->array->set(_hx_tmp7,_hx_tmp3);
            						}
            					}
            				}
            			}
            		}
HXLINE( 357)		return copy;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DenseArray2_obj,clone,return )

 ::hxmath::ds::SparseArray2 DenseArray2_obj::toSparseArray(){
            	HX_STACK_FRAME("hxmath.ds.DenseArray2","toSparseArray",0x2a4620ff,"hxmath.ds.DenseArray2.toSparseArray","hxmath/ds/DenseArray2.hx",367,0x254ae3ef)
            	HX_STACK_THIS(this)
HXLINE( 368)		HX_VARI(  ::hxmath::ds::SparseArray2,sparseCopy) =  ::hxmath::ds::SparseArray2_obj::__new();
HXLINE( 370)		{
HXLINE( 370)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 370)			HX_VARI( Int,_g) = this->height;
HXDLIN( 370)			while((_g1 < _g)){
HXLINE( 370)				HX_VARI( Int,y) = _g1++;
HXLINE( 372)				{
HXLINE( 372)					HX_VARI( Int,_g3) = (int)0;
HXDLIN( 372)					HX_VARI( Int,_g2) = this->width;
HXDLIN( 372)					while((_g3 < _g2)){
HXLINE( 372)						HX_VARI( Int,x) = _g3++;
HXLINE( 374)						{
HXLINE( 374)							Bool _hx_tmp;
HXDLIN( 374)							Bool _hx_tmp1;
HXDLIN( 374)							Bool _hx_tmp2;
HXDLIN( 374)							if ((x >= (int)0)) {
HXLINE( 374)								_hx_tmp2 = (x < this->width);
            							}
            							else {
HXLINE( 374)								_hx_tmp2 = false;
            							}
HXDLIN( 374)							if (_hx_tmp2) {
HXLINE( 374)								_hx_tmp1 = (y >= (int)0);
            							}
            							else {
HXLINE( 374)								_hx_tmp1 = false;
            							}
HXDLIN( 374)							if (_hx_tmp1) {
HXLINE( 374)								_hx_tmp = (y < this->height);
            							}
            							else {
HXLINE( 374)								_hx_tmp = false;
            							}
HXDLIN( 374)							if (!(_hx_tmp)) {
HXLINE( 374)								HX_STACK_DO_THROW(((((((((HX_("Specified (x=",dd,9b,83,fe) + x) + HX_(", y=",18,15,2e,1d)) + y) + HX_(") fields not in the ranges x: [0, ",0a,c6,50,e7)) + this->width) + HX_(") y: [0, ",11,b1,6d,70)) + this->height) + HX_(")",29,00,00,00)));
            							}
HXDLIN( 374)							 ::Dynamic _hx_tmp3 = this->array->__get((x + (y * this->width)));
HXDLIN( 374)							{
HXLINE( 374)								HX_VARI( Int,key) = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new(x,y);
HXDLIN( 374)								sparseCopy->hash->set(key,_hx_tmp3);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 378)		return sparseCopy;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DenseArray2_obj,toSparseArray,return )

void DenseArray2_obj::checkBounds(Int x,Int y){
            	HX_STACK_FRAME("hxmath.ds.DenseArray2","checkBounds",0xc8689f3e,"hxmath.ds.DenseArray2.checkBounds","hxmath/ds/DenseArray2.hx",383,0x254ae3ef)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 383)		Bool _hx_tmp;
HXDLIN( 383)		Bool _hx_tmp1;
HXDLIN( 383)		Bool _hx_tmp2;
HXDLIN( 383)		if ((x >= (int)0)) {
HXLINE( 383)			_hx_tmp2 = (x < this->width);
            		}
            		else {
HXLINE( 383)			_hx_tmp2 = false;
            		}
HXDLIN( 383)		if (_hx_tmp2) {
HXLINE( 383)			_hx_tmp1 = (y >= (int)0);
            		}
            		else {
HXLINE( 383)			_hx_tmp1 = false;
            		}
HXDLIN( 383)		if (_hx_tmp1) {
HXLINE( 383)			_hx_tmp = (y < this->height);
            		}
            		else {
HXLINE( 383)			_hx_tmp = false;
            		}
HXDLIN( 383)		if (!(_hx_tmp)) {
HXLINE( 385)			HX_STACK_DO_THROW(((((((((HX_("Specified (x=",dd,9b,83,fe) + x) + HX_(", y=",18,15,2e,1d)) + y) + HX_(") fields not in the ranges x: [0, ",0a,c6,50,e7)) + this->width) + HX_(") y: [0, ",11,b1,6d,70)) + this->height) + HX_(")",29,00,00,00)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DenseArray2_obj,checkBounds,(void))

 ::Dynamic DenseArray2_obj::get_keys(){
            	HX_STACK_FRAME("hxmath.ds.DenseArray2","get_keys",0xc1ec50fc,"hxmath.ds.DenseArray2.get_keys","hxmath/ds/DenseArray2.hx",391,0x254ae3ef)
            	HX_STACK_THIS(this)
HXLINE( 391)		return  ::hxmath::ds::_DenseArray2::DenseArray2KeysIterator_obj::__new(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DenseArray2_obj,get_keys,return )

 ::hxmath::ds::DenseArray2 DenseArray2_obj::fromNestedArray(::Array< ::Dynamic> source, ::Dynamic defaultValue){
            	HX_STACK_FRAME("hxmath.ds.DenseArray2","fromNestedArray",0xf929d039,"hxmath.ds.DenseArray2.fromNestedArray","hxmath/ds/DenseArray2.hx",100,0x254ae3ef)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(defaultValue,"defaultValue")
HXLINE( 101)		HX_VARI( Int,longestRowLength) = (int)0;
HXLINE( 103)		{
HXLINE( 103)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 103)			while((_g < source->length)){
HXLINE( 103)				HX_VARI( ::cpp::VirtualArray,row) = ::cpp::VirtualArray( source->__get(_g));
HXDLIN( 103)				++_g;
HXLINE( 105)				HX_VARI( Int,b) = row->get_length();
HXDLIN( 105)				Bool _hx_tmp = (b > longestRowLength);
HXDLIN( 105)				if (_hx_tmp) {
HXLINE( 105)					longestRowLength = b;
            				}
            				else {
HXLINE( 105)					longestRowLength = longestRowLength;
            				}
            			}
            		}
HXLINE( 108)		HX_VARI(  ::hxmath::ds::DenseArray2,target) =  ::hxmath::ds::DenseArray2_obj::__new(longestRowLength,source->length,defaultValue);
HXLINE( 110)		{
HXLINE( 110)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 110)			HX_VARI_NAME( Int,_g2,"_g") = target->height;
HXDLIN( 110)			while((_g1 < _g2)){
HXLINE( 110)				HX_VARI( Int,y) = _g1++;
HXLINE( 112)				{
HXLINE( 112)					HX_VARI( Int,_g3) = (int)0;
HXDLIN( 112)					HX_VARI_NAME( Int,_g21,"_g2") = target->width;
HXDLIN( 112)					while((_g3 < _g21)){
HXLINE( 112)						HX_VARI( Int,x) = _g3++;
HXLINE( 115)						Bool _hx_tmp1 = (x < ::cpp::VirtualArray( source->__get(y))->get_length());
HXDLIN( 115)						if (_hx_tmp1) {
HXLINE( 117)							Bool _hx_tmp2;
HXDLIN( 117)							Bool _hx_tmp3;
HXDLIN( 117)							Bool _hx_tmp4;
HXDLIN( 117)							if ((x >= (int)0)) {
HXLINE( 117)								_hx_tmp4 = (x < target->width);
            							}
            							else {
HXLINE( 117)								_hx_tmp4 = false;
            							}
HXDLIN( 117)							if (_hx_tmp4) {
HXLINE( 117)								_hx_tmp3 = (y >= (int)0);
            							}
            							else {
HXLINE( 117)								_hx_tmp3 = false;
            							}
HXDLIN( 117)							if (_hx_tmp3) {
HXLINE( 117)								_hx_tmp2 = (y < target->height);
            							}
            							else {
HXLINE( 117)								_hx_tmp2 = false;
            							}
HXDLIN( 117)							if (!(_hx_tmp2)) {
HXLINE( 117)								HX_STACK_DO_THROW(((((((((HX_("Specified (x=",dd,9b,83,fe) + x) + HX_(", y=",18,15,2e,1d)) + y) + HX_(") fields not in the ranges x: [0, ",0a,c6,50,e7)) + target->width) + HX_(") y: [0, ",11,b1,6d,70)) + target->height) + HX_(")",29,00,00,00)));
            							}
HXDLIN( 117)							Int _hx_tmp5 = (x + (y * target->width));
HXDLIN( 117)							target->array->set(_hx_tmp5,::cpp::VirtualArray( source->__get(y))->__get(x));
            						}
            					}
            				}
            			}
            		}
HXLINE( 122)		return target;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DenseArray2_obj,fromNestedArray,return )


DenseArray2_obj::DenseArray2_obj()
{
}

void DenseArray2_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DenseArray2);
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(array,"array");
	HX_MARK_MEMBER_NAME(defaultValue,"defaultValue");
	HX_MARK_END_CLASS();
}

void DenseArray2_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(array,"array");
	HX_VISIT_MEMBER_NAME(defaultValue,"defaultValue");
}

hx::Val DenseArray2_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn()); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"keys") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_keys()); }
		if (HX_FIELD_EQ(inName,"fill") ) { return hx::Val( fill_dyn()); }
		if (HX_FIELD_EQ(inName,"blit") ) { return hx::Val( blit_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width); }
		if (HX_FIELD_EQ(inName,"array") ) { return hx::Val( array); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height); }
		if (HX_FIELD_EQ(inName,"resize") ) { return hx::Val( resize_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"iterator") ) { return hx::Val( iterator_dyn()); }
		if (HX_FIELD_EQ(inName,"inBounds") ) { return hx::Val( inBounds_dyn()); }
		if (HX_FIELD_EQ(inName,"getByKey") ) { return hx::Val( getByKey_dyn()); }
		if (HX_FIELD_EQ(inName,"get_keys") ) { return hx::Val( get_keys_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"clippedBlit") ) { return hx::Val( clippedBlit_dyn()); }
		if (HX_FIELD_EQ(inName,"checkBounds") ) { return hx::Val( checkBounds_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"defaultValue") ) { return hx::Val( defaultValue); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"toSparseArray") ) { return hx::Val( toSparseArray_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool DenseArray2_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"fromNestedArray") ) { outValue = fromNestedArray_dyn(); return true; }
	}
	return false;
}

hx::Val DenseArray2_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"array") ) { array=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"defaultValue") ) { defaultValue=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DenseArray2_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("keys","\xf4","\xe1","\x06","\x47"));
	outFields->push(HX_HCSTRING("array","\x99","\x6d","\x8f","\x25"));
	outFields->push(HX_HCSTRING("defaultValue","\xf0","\xba","\x13","\xe7"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DenseArray2_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(DenseArray2_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsInt,(int)offsetof(DenseArray2_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(DenseArray2_obj,array),HX_HCSTRING("array","\x99","\x6d","\x8f","\x25")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(DenseArray2_obj,defaultValue),HX_HCSTRING("defaultValue","\xf0","\xba","\x13","\xe7")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *DenseArray2_obj_sStaticStorageInfo = 0;
#endif

static ::String DenseArray2_obj_sMemberFields[] = {
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("array","\x99","\x6d","\x8f","\x25"),
	HX_HCSTRING("defaultValue","\xf0","\xba","\x13","\xe7"),
	HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"),
	HX_HCSTRING("inBounds","\x3a","\xd0","\x9b","\xee"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("getByKey","\x92","\xfb","\x4f","\x1d"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("fill","\x83","\xce","\xbb","\x43"),
	HX_HCSTRING("resize","\xf4","\x59","\x7b","\x08"),
	HX_HCSTRING("clippedBlit","\xd4","\xd7","\xf7","\xd3"),
	HX_HCSTRING("blit","\x35","\x38","\x19","\x41"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("toSparseArray","\xde","\xe0","\xc6","\x34"),
	HX_HCSTRING("checkBounds","\x5d","\x59","\x2f","\x48"),
	HX_HCSTRING("get_keys","\x7d","\x9d","\xc1","\xc6"),
	::String(null()) };

static void DenseArray2_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DenseArray2_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DenseArray2_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DenseArray2_obj::__mClass,"__mClass");
};

#endif

hx::Class DenseArray2_obj::__mClass;

static ::String DenseArray2_obj_sStaticFields[] = {
	HX_HCSTRING("fromNestedArray","\xd8","\x85","\x41","\x35"),
	::String(null())
};

void DenseArray2_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hxmath.ds.DenseArray2","\xcf","\x18","\x6a","\x46");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DenseArray2_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = DenseArray2_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(DenseArray2_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DenseArray2_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DenseArray2_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DenseArray2_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DenseArray2_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DenseArray2_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxmath
} // end namespace ds
