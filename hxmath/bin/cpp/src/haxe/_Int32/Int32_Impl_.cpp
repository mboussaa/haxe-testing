// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe__Int32_Int32_Impl_
#include <haxe/_Int32/Int32_Impl_.h>
#endif

namespace haxe{
namespace _Int32{

void Int32_Impl__obj::__construct() { }

Dynamic Int32_Impl__obj::__CreateEmpty() { return new Int32_Impl__obj; }

hx::ObjectPtr< Int32_Impl__obj > Int32_Impl__obj::__new()
{
	hx::ObjectPtr< Int32_Impl__obj > _hx_result = new Int32_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Int32_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Int32_Impl__obj > _hx_result = new Int32_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Int Int32_Impl__obj::preIncrement(Int this1){
            	HX_STACK_FRAME("haxe._Int32.Int32_Impl_","preIncrement",0x5b883743,"haxe._Int32.Int32_Impl_.preIncrement","/usr/lib/haxe/std/haxe/Int32.hx",32,0xece267d8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  32)		HX_VARI( Int,x) = ++this1;
HXDLIN(  32)		this1 = x;
HXDLIN(  32)		return x;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int32_Impl__obj,preIncrement,return )

Int Int32_Impl__obj::postIncrement(Int this1){
            	HX_STACK_FRAME("haxe._Int32.Int32_Impl_","postIncrement",0x744c8818,"haxe._Int32.Int32_Impl_.postIncrement","/usr/lib/haxe/std/haxe/Int32.hx",34,0xece267d8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  35)		HX_VARI( Int,ret) = this1++;
HXLINE(  36)		this1 = this1;
HXLINE(  37)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int32_Impl__obj,postIncrement,return )

Int Int32_Impl__obj::preDecrement(Int this1){
            	HX_STACK_FRAME("haxe._Int32.Int32_Impl_","preDecrement",0x3a0b2727,"haxe._Int32.Int32_Impl_.preDecrement","/usr/lib/haxe/std/haxe/Int32.hx",41,0xece267d8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  41)		HX_VARI( Int,x) = --this1;
HXDLIN(  41)		this1 = x;
HXDLIN(  41)		return x;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int32_Impl__obj,preDecrement,return )

Int Int32_Impl__obj::postDecrement(Int this1){
            	HX_STACK_FRAME("haxe._Int32.Int32_Impl_","postDecrement",0x52cf77fc,"haxe._Int32.Int32_Impl_.postDecrement","/usr/lib/haxe/std/haxe/Int32.hx",43,0xece267d8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  44)		HX_VARI( Int,ret) = this1--;
HXLINE(  45)		this1 = this1;
HXLINE(  46)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int32_Impl__obj,postDecrement,return )

Int Int32_Impl__obj::add(Int a,Int b){
            	HX_STACK_FRAME("haxe._Int32.Int32_Impl_","add",0x389d374a,"haxe._Int32.Int32_Impl_.add","/usr/lib/haxe/std/haxe/Int32.hx",50,0xece267d8)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(  50)		return (a + b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int32_Impl__obj,add,return )

Int Int32_Impl__obj::addInt(Int a,Int b){
            	HX_STACK_FRAME("haxe._Int32.Int32_Impl_","addInt",0xd360b7c5,"haxe._Int32.Int32_Impl_.addInt","/usr/lib/haxe/std/haxe/Int32.hx",53,0xece267d8)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(  53)		return (a + b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int32_Impl__obj,addInt,return )

Int Int32_Impl__obj::sub(Int a,Int b){
            	HX_STACK_FRAME("haxe._Int32.Int32_Impl_","sub",0x38aaeea9,"haxe._Int32.Int32_Impl_.sub","/usr/lib/haxe/std/haxe/Int32.hx",58,0xece267d8)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(  58)		return (a - b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int32_Impl__obj,sub,return )

Int Int32_Impl__obj::subInt(Int a,Int b){
            	HX_STACK_FRAME("haxe._Int32.Int32_Impl_","subInt",0xce4aa5c6,"haxe._Int32.Int32_Impl_.subInt","/usr/lib/haxe/std/haxe/Int32.hx",61,0xece267d8)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(  61)		return (a - b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int32_Impl__obj,subInt,return )

Int Int32_Impl__obj::intSub(Int a,Int b){
            	HX_STACK_FRAME("haxe._Int32.Int32_Impl_","intSub",0xd2d86e48,"haxe._Int32.Int32_Impl_.intSub","/usr/lib/haxe/std/haxe/Int32.hx",64,0xece267d8)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(  64)		return (a - b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int32_Impl__obj,intSub,return )

Float Int32_Impl__obj::toFloat(Int this1){
            	HX_STACK_FRAME("haxe._Int32.Int32_Impl_","toFloat",0x6e629fca,"haxe._Int32.Int32_Impl_.toFloat","/usr/lib/haxe/std/haxe/Int32.hx",201,0xece267d8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 201)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int32_Impl__obj,toFloat,return )

Int Int32_Impl__obj::ucompare(Int a,Int b){
            	HX_STACK_FRAME("haxe._Int32.Int32_Impl_","ucompare",0x66cba707,"haxe._Int32.Int32_Impl_.ucompare","/usr/lib/haxe/std/haxe/Int32.hx",206,0xece267d8)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 207)		if ((a < (int)0)) {
HXLINE( 208)			if ((b < (int)0)) {
HXLINE( 208)				return (~(b) - ~(a));
            			}
            			else {
HXLINE( 208)				return (int)1;
            			}
            		}
HXLINE( 209)		if ((b < (int)0)) {
HXLINE( 209)			return (int)-1;
            		}
            		else {
HXLINE( 209)			return (a - b);
            		}
HXDLIN( 209)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int32_Impl__obj,ucompare,return )

Int Int32_Impl__obj::clamp(Int x){
            	HX_STACK_FRAME("haxe._Int32.Int32_Impl_","clamp",0xafe61464,"haxe._Int32.Int32_Impl_.clamp","/usr/lib/haxe/std/haxe/Int32.hx",229,0xece267d8)
            	HX_STACK_ARG(x,"x")
HXLINE( 229)		return x;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int32_Impl__obj,clamp,return )


Int32_Impl__obj::Int32_Impl__obj()
{
}

bool Int32_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sub") ) { outValue = sub_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clamp") ) { outValue = clamp_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"addInt") ) { outValue = addInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subInt") ) { outValue = subInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"intSub") ) { outValue = intSub_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"toFloat") ) { outValue = toFloat_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"ucompare") ) { outValue = ucompare_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"preIncrement") ) { outValue = preIncrement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"preDecrement") ) { outValue = preDecrement_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"postIncrement") ) { outValue = postIncrement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"postDecrement") ) { outValue = postDecrement_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Int32_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Int32_Impl__obj_sStaticStorageInfo = 0;
#endif

static void Int32_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Int32_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Int32_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Int32_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class Int32_Impl__obj::__mClass;

static ::String Int32_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("preIncrement","\x8c","\xe9","\xfe","\xd7"),
	HX_HCSTRING("postIncrement","\xaf","\xd5","\xb1","\xdf"),
	HX_HCSTRING("preDecrement","\x70","\xd9","\x81","\xb6"),
	HX_HCSTRING("postDecrement","\x93","\xc5","\x34","\xbe"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("addInt","\x4e","\x1d","\x01","\x9f"),
	HX_HCSTRING("sub","\x80","\xa9","\x57","\x00"),
	HX_HCSTRING("subInt","\x4f","\x0b","\xeb","\x99"),
	HX_HCSTRING("intSub","\xd1","\xd3","\x78","\x9e"),
	HX_HCSTRING("toFloat","\x21","\x12","\x1b","\xcf"),
	HX_HCSTRING("ucompare","\xd0","\x40","\x77","\xa7"),
	HX_HCSTRING("clamp","\xfb","\x72","\x58","\x48"),
	::String(null())
};

void Int32_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxe._Int32.Int32_Impl_","\x17","\x9d","\x21","\xce");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Int32_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Int32_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Int32_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Int32_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Int32_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Int32_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Int32_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace _Int32
