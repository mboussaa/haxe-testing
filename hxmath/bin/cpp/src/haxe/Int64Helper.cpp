// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "cpp/Int64.h"
#include "hxMath.h"
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_Int64Helper
#include <haxe/Int64Helper.h>
#endif

namespace haxe{

void Int64Helper_obj::__construct() { }

Dynamic Int64Helper_obj::__CreateEmpty() { return new Int64Helper_obj; }

hx::ObjectPtr< Int64Helper_obj > Int64Helper_obj::__new()
{
	hx::ObjectPtr< Int64Helper_obj > _hx_result = new Int64Helper_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Int64Helper_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Int64Helper_obj > _hx_result = new Int64Helper_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::cpp::Int64Struct Int64Helper_obj::parseString(::String sParam){
            	HX_STACK_FRAME("haxe.Int64Helper","parseString",0x30544f49,"haxe.Int64Helper.parseString","/usr/lib/haxe/std/haxe/Int64Helper.hx",35,0x0750640b)
            	HX_STACK_ARG(sParam,"sParam")
HXLINE(  36)		HX_VARI(  ::cpp::Int64Struct,base) = ( ::cpp::Int64Struct((int)10));
HXLINE(  37)		HX_VARI(  ::cpp::Int64Struct,current) = ( ::cpp::Int64Struct((int)0));
HXLINE(  38)		HX_VARI(  ::cpp::Int64Struct,multiplier) = ( ::cpp::Int64Struct((int)1));
HXLINE(  39)		HX_VARI( Bool,sIsNegative) = false;
HXLINE(  41)		HX_VARI( ::String,s) = ::StringTools_obj::trim(sParam);
HXLINE(  42)		::String _hx_tmp = s.charAt((int)0);
HXDLIN(  42)		if ((_hx_tmp == HX_("-",2d,00,00,00))) {
HXLINE(  43)			sIsNegative = true;
HXLINE(  44)			s = s.substring((int)1,s.length);
            		}
HXLINE(  46)		HX_VARI( Int,len) = s.length;
HXLINE(  48)		{
HXLINE(  48)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  48)			while((_g1 < len)){
HXLINE(  48)				HX_VARI( Int,i) = _g1++;
HXLINE(  49)				 ::Dynamic _hx_tmp1 = s.charCodeAt(((len - (int)1) - i));
HXDLIN(  49)				HX_VARI( Int,digitInt) = (_hx_tmp1 - (int)48);
HXLINE(  51)				Bool _hx_tmp2;
HXDLIN(  51)				if ((digitInt >= (int)0)) {
HXLINE(  51)					_hx_tmp2 = (digitInt > (int)9);
            				}
            				else {
HXLINE(  51)					_hx_tmp2 = true;
            				}
HXDLIN(  51)				if (_hx_tmp2) {
HXLINE(  52)					HX_STACK_DO_THROW(HX_("NumberFormatError",a8,c8,6f,c1));
            				}
HXLINE(  55)				HX_VARI(  ::cpp::Int64Struct,digit) = ( ::cpp::Int64Struct(digitInt));
HXLINE(  56)				if (sIsNegative) {
HXLINE(  57)					HX_VARI(  ::cpp::Int64Struct,b) = _hx_int64_mul(multiplier,digit);
HXDLIN(  57)					current = _hx_int64_sub(current,b);
HXLINE(  58)					Bool _hx_tmp3 = !(_hx_int64_is_neg(current));
HXDLIN(  58)					if (_hx_tmp3) {
HXLINE(  59)						HX_STACK_DO_THROW(HX_("NumberFormatError: Underflow",d8,65,97,7b));
            					}
            				}
            				else {
HXLINE(  62)					HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = _hx_int64_mul(multiplier,digit);
HXDLIN(  62)					current = _hx_int64_add(current,b1);
HXLINE(  63)					Bool _hx_tmp4 = _hx_int64_is_neg(current);
HXDLIN(  63)					if (_hx_tmp4) {
HXLINE(  64)						HX_STACK_DO_THROW(HX_("NumberFormatError: Overflow",b0,12,ea,e1));
            					}
            				}
HXLINE(  67)				multiplier = _hx_int64_mul(multiplier,base);
            			}
            		}
HXLINE(  69)		return current;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64Helper_obj,parseString,return )

 ::cpp::Int64Struct Int64Helper_obj::fromFloat(Float f){
            	HX_STACK_FRAME("haxe.Int64Helper","fromFloat",0xe14c7677,"haxe.Int64Helper.fromFloat","/usr/lib/haxe/std/haxe/Int64Helper.hx",75,0x0750640b)
            	HX_STACK_ARG(f,"f")
HXLINE(  76)		Bool _hx_tmp;
HXDLIN(  76)		Bool _hx_tmp1 = !(::Math_obj::isNaN(f));
HXDLIN(  76)		if (_hx_tmp1) {
HXLINE(  76)			_hx_tmp = !(::Math_obj::isFinite(f));
            		}
            		else {
HXLINE(  76)			_hx_tmp = true;
            		}
HXDLIN(  76)		if (_hx_tmp) {
HXLINE(  77)			HX_STACK_DO_THROW(HX_("Number is NaN or Infinite",2d,21,08,80));
            		}
HXLINE(  80)		HX_VARI( Float,noFractions) = (f - hx::Mod(f,(int)1));
HXLINE(  83)		if ((noFractions > ((Float)9007199254740991))) {
HXLINE(  84)			HX_STACK_DO_THROW(HX_("Conversion overflow",6c,95,02,46));
            		}
HXLINE(  86)		if ((noFractions < ((Float)-9007199254740991))) {
HXLINE(  87)			HX_STACK_DO_THROW(HX_("Conversion underflow",9c,47,f1,ac));
            		}
HXLINE(  90)		HX_VARI(  ::cpp::Int64Struct,result) = ( ::cpp::Int64Struct((int)0));
HXLINE(  91)		HX_VARI( Bool,neg) = (noFractions < (int)0);
HXLINE(  92)		HX_VAR( Float,rest);
HXDLIN(  92)		if (neg) {
HXLINE(  92)			rest = -(noFractions);
            		}
            		else {
HXLINE(  92)			rest = noFractions;
            		}
HXLINE(  94)		HX_VARI( Int,i) = (int)0;
HXLINE(  95)		while((rest >= (int)1)){
HXLINE(  96)			HX_VARI( Float,curr) = hx::Mod(rest,(int)2);
HXLINE(  97)			hx::DivEq(rest,(int)2);
HXLINE(  98)			if ((curr >= (int)1)) {
HXLINE(  99)				HX_VARI(  ::cpp::Int64Struct,a) = ( ::cpp::Int64Struct((int)1));
HXDLIN(  99)				HX_VARI(  ::cpp::Int64Struct,b) = _hx_int64_shl(a,i);
HXDLIN(  99)				result = _hx_int64_add(result,b);
            			}
HXLINE( 101)			++i;
            		}
HXLINE( 104)		if (neg) {
HXLINE( 105)			result = _hx_int64_neg(result);
            		}
HXLINE( 107)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64Helper_obj,fromFloat,return )


Int64Helper_obj::Int64Helper_obj()
{
}

bool Int64Helper_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"fromFloat") ) { outValue = fromFloat_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"parseString") ) { outValue = parseString_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Int64Helper_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Int64Helper_obj_sStaticStorageInfo = 0;
#endif

static void Int64Helper_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Int64Helper_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Int64Helper_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Int64Helper_obj::__mClass,"__mClass");
};

#endif

hx::Class Int64Helper_obj::__mClass;

static ::String Int64Helper_obj_sStaticFields[] = {
	HX_HCSTRING("parseString","\x64","\xd5","\x6c","\x8c"),
	HX_HCSTRING("fromFloat","\xd2","\xaf","\x1f","\xb7"),
	::String(null())
};

void Int64Helper_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxe.Int64Helper","\xd3","\x56","\x31","\xa6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Int64Helper_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Int64Helper_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Int64Helper_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Int64Helper_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Int64Helper_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Int64Helper_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Int64Helper_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
