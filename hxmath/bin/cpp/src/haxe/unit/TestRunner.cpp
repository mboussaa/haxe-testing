// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED__List_ListNode
#include <_List/ListNode.h>
#endif
#ifndef INCLUDED_cpp_Lib
#include <cpp/Lib.h>
#endif
#ifndef INCLUDED_haxe_CallStack
#include <haxe/CallStack.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_haxe_unit_TestCase
#include <haxe/unit/TestCase.h>
#endif
#ifndef INCLUDED_haxe_unit_TestResult
#include <haxe/unit/TestResult.h>
#endif
#ifndef INCLUDED_haxe_unit_TestRunner
#include <haxe/unit/TestRunner.h>
#endif
#ifndef INCLUDED_haxe_unit_TestStatus
#include <haxe/unit/TestStatus.h>
#endif

namespace haxe{
namespace unit{

void TestRunner_obj::__construct(){
            	HX_STACK_FRAME("haxe.unit.TestRunner","new",0x6c78bc56,"haxe.unit.TestRunner.new","/usr/lib/haxe/std/haxe/unit/TestRunner.hx",81,0x2eb7c579)
            	HX_STACK_THIS(this)
HXLINE(  82)		this->result =  ::haxe::unit::TestResult_obj::__new();
HXLINE(  83)		this->cases =  ::List_obj::__new();
            	}

Dynamic TestRunner_obj::__CreateEmpty() { return new TestRunner_obj; }

hx::ObjectPtr< TestRunner_obj > TestRunner_obj::__new()
{
	hx::ObjectPtr< TestRunner_obj > _hx_result = new TestRunner_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestRunner_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestRunner_obj > _hx_result = new TestRunner_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestRunner_obj::add( ::haxe::unit::TestCase c){
            	HX_STACK_FRAME("haxe.unit.TestRunner","add",0x6c6ede17,"haxe.unit.TestRunner.add","/usr/lib/haxe/std/haxe/unit/TestRunner.hx",87,0x2eb7c579)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(c,"c")
HXLINE(  87)		this->cases->add(c);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestRunner_obj,add,(void))

Bool TestRunner_obj::run(){
            	HX_STACK_FRAME("haxe.unit.TestRunner","run",0x6c7bd341,"haxe.unit.TestRunner.run","/usr/lib/haxe/std/haxe/unit/TestRunner.hx",90,0x2eb7c579)
            	HX_STACK_THIS(this)
HXLINE(  91)		this->result =  ::haxe::unit::TestResult_obj::__new();
HXLINE(  92)		{
HXLINE(  92)			HX_VARI(  ::_List::ListNode,_g_head) = this->cases->h;
HXDLIN(  92)			while(hx::IsNotNull( _g_head )){
HXLINE(  92)				HX_VARI(  ::haxe::unit::TestCase,val) = ( ( ::haxe::unit::TestCase)(_g_head->item) );
HXLINE(  90)				_g_head = _g_head->next;
HXLINE(  93)				this->runCase(val);
            			}
            		}
HXLINE(  95)		::String _hx_tmp = this->result->toString();
HXDLIN(  95)		::haxe::unit::TestRunner_obj::print(_hx_tmp);
HXLINE(  96)		return this->result->success;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestRunner_obj,run,return )

void TestRunner_obj::runCase( ::haxe::unit::TestCase t){
            	HX_STACK_FRAME("haxe.unit.TestRunner","runCase",0xec005291,"haxe.unit.TestRunner.runCase","/usr/lib/haxe/std/haxe/unit/TestRunner.hx",99,0x2eb7c579)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(t,"t")
HXLINE( 100)		HX_VARI(  ::Dynamic,old) = ::haxe::Log_obj::trace;
HXLINE( 101)		::haxe::Log_obj::trace = ::haxe::unit::TestRunner_obj::customTrace_dyn();
HXLINE( 103)		HX_VARI( hx::Class,cl) = ::Type_obj::getClass(t);
HXLINE( 104)		HX_VARI( ::Array< ::String >,fields) = ::Type_obj::getInstanceFields(cl);
HXLINE( 106)		::haxe::unit::TestRunner_obj::print(((HX_("Class: ",be,50,e2,36) + ::Type_obj::getClassName(cl)) + HX_(" ",20,00,00,00)));
HXLINE( 107)		{
HXLINE( 107)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 107)			while((_g < fields->length)){
HXLINE( 107)				HX_VARI( ::String,f) = fields->__get(_g);
HXDLIN( 107)				++_g;
HXLINE( 109)				HX_VARI(  ::Dynamic,field) = ::Reflect_obj::field(t,f);
HXLINE( 110)				Bool _hx_tmp;
HXDLIN( 110)				Bool _hx_tmp1 = ::StringTools_obj::startsWith(f,HX_("test",52,c8,f9,4c));
HXDLIN( 110)				if (_hx_tmp1) {
HXLINE( 110)					_hx_tmp = ::Reflect_obj::isFunction(field);
            				}
            				else {
HXLINE( 110)					_hx_tmp = false;
            				}
HXDLIN( 110)				if (_hx_tmp) {
HXLINE( 111)					t->currentTest =  ::haxe::unit::TestStatus_obj::__new();
HXLINE( 112)					t->currentTest->classname = ::Type_obj::getClassName(cl);
HXLINE( 113)					t->currentTest->method = f;
HXLINE( 114)					t->setup();
HXLINE( 116)					try {
            						HX_STACK_CATCHABLE( ::haxe::unit::TestStatus, 0);
            						HX_STACK_CATCHABLE( ::Dynamic, 1);
HXLINE( 117)						::Reflect_obj::callMethod(t,field,::cpp::VirtualArray_obj::__new());
HXLINE( 119)						Bool _hx_tmp2 = t->currentTest->done;
HXDLIN( 119)						if (_hx_tmp2) {
HXLINE( 120)							t->currentTest->success = true;
HXLINE( 121)							::haxe::unit::TestRunner_obj::print(HX_(".",2e,00,00,00));
            						}
            						else {
HXLINE( 123)							t->currentTest->success = false;
HXLINE( 124)							t->currentTest->error = HX_("(warning) no assert",5a,d7,7f,8e);
HXLINE( 125)							::haxe::unit::TestRunner_obj::print(HX_("W",57,00,00,00));
            						}
            					}
            					catch( ::Dynamic _hx_e){
            						if (_hx_e.IsClass<  ::haxe::unit::TestStatus >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::haxe::unit::TestStatus e = _hx_e;
HXLINE( 128)							::haxe::unit::TestRunner_obj::print(HX_("F",46,00,00,00));
HXLINE( 129)							::Array< ::Dynamic> _hx_tmp3 = ::haxe::CallStack_obj::exceptionStack();
HXDLIN( 129)							t->currentTest->backtrace = ::haxe::CallStack_obj::toString(_hx_tmp3);
            						}
            						else if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic e1 = _hx_e;
HXLINE( 131)							::haxe::unit::TestRunner_obj::print(HX_("E",45,00,00,00));
HXLINE( 139)							::String _hx_tmp4 = ::Std_obj::string(e1);
HXDLIN( 139)							t->currentTest->error = (HX_("exception thrown : ",2d,00,4b,48) + _hx_tmp4);
HXLINE( 141)							::Array< ::Dynamic> _hx_tmp5 = ::haxe::CallStack_obj::exceptionStack();
HXDLIN( 141)							t->currentTest->backtrace = ::haxe::CallStack_obj::toString(_hx_tmp5);
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
HXLINE( 143)					this->result->add(t->currentTest);
HXLINE( 144)					t->tearDown();
            				}
            			}
            		}
HXLINE( 148)		::haxe::unit::TestRunner_obj::print(HX_("\n",0a,00,00,00));
HXLINE( 149)		::haxe::Log_obj::trace = old;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestRunner_obj,runCase,(void))

HX_BEGIN_DEFAULT_FUNC(__default_print,TestRunner_obj)
void _hx_run( ::Dynamic v){
            	HX_STACK_FRAME("haxe.unit.TestRunner","__default_print",0xde5b3cc5,"haxe.unit.TestRunner.__default_print","/usr/lib/haxe/std/haxe/unit/TestRunner.hx",48,0x2eb7c579)
            	HX_STACK_ARG(v,"v")
HXLINE(  48)		::cpp::Lib_obj::print(v);
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

::Dynamic TestRunner_obj::print;

void TestRunner_obj::customTrace( ::Dynamic v, ::Dynamic p){
            	HX_STACK_FRAME("haxe.unit.TestRunner","customTrace",0x2adec70a,"haxe.unit.TestRunner.customTrace","/usr/lib/haxe/std/haxe/unit/TestRunner.hx",78,0x2eb7c579)
            	HX_STACK_ARG(v,"v")
            	HX_STACK_ARG(p,"p")
HXLINE(  78)		::String _hx_tmp = (((( (::String)(p->__Field(HX_("fileName",e7,5a,43,62),hx::paccDynamic)) ) + HX_(":",3a,00,00,00)) + ( (Int)(p->__Field(HX_("lineNumber",dd,81,22,76),hx::paccDynamic)) )) + HX_(": ",a6,32,00,00));
HXDLIN(  78)		::String _hx_tmp1 = ::Std_obj::string(v);
HXDLIN(  78)		::haxe::unit::TestRunner_obj::print(((_hx_tmp + _hx_tmp1) + HX_("\n",0a,00,00,00)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(TestRunner_obj,customTrace,(void))


TestRunner_obj::TestRunner_obj()
{
}

void TestRunner_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TestRunner);
	HX_MARK_MEMBER_NAME(result,"result");
	HX_MARK_MEMBER_NAME(cases,"cases");
	HX_MARK_END_CLASS();
}

void TestRunner_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(result,"result");
	HX_VISIT_MEMBER_NAME(cases,"cases");
}

hx::Val TestRunner_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"cases") ) { return hx::Val( cases); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"result") ) { return hx::Val( result); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"runCase") ) { return hx::Val( runCase_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool TestRunner_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"print") ) { outValue = print; return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"customTrace") ) { outValue = customTrace_dyn(); return true; }
	}
	return false;
}

hx::Val TestRunner_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"cases") ) { cases=inValue.Cast<  ::List >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"result") ) { result=inValue.Cast<  ::haxe::unit::TestResult >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TestRunner_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"print") ) { print=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

void TestRunner_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("result","\xdd","\x68","\x84","\x08"));
	outFields->push(HX_HCSTRING("cases","\xc3","\xbb","\x20","\x41"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestRunner_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::unit::TestResult*/ ,(int)offsetof(TestRunner_obj,result),HX_HCSTRING("result","\xdd","\x68","\x84","\x08")},
	{hx::fsObject /*::List*/ ,(int)offsetof(TestRunner_obj,cases),HX_HCSTRING("cases","\xc3","\xbb","\x20","\x41")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TestRunner_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(void *) &TestRunner_obj::print,HX_HCSTRING("print","\x2d","\x58","\x8b","\xc8")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TestRunner_obj_sMemberFields[] = {
	HX_HCSTRING("result","\xdd","\x68","\x84","\x08"),
	HX_HCSTRING("cases","\xc3","\xbb","\x20","\x41"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("runCase","\x9b","\x33","\xf7","\xce"),
	::String(null()) };

static void TestRunner_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestRunner_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TestRunner_obj::print,"print");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestRunner_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestRunner_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TestRunner_obj::print,"print");
};

#endif

hx::Class TestRunner_obj::__mClass;

static ::String TestRunner_obj_sStaticFields[] = {
	HX_HCSTRING("print","\x2d","\x58","\x8b","\xc8"),
	HX_HCSTRING("customTrace","\x14","\xf5","\x5b","\xab"),
	::String(null())
};

void TestRunner_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxe.unit.TestRunner","\x64","\x99","\xea","\x2d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TestRunner_obj::__GetStatic;
	__mClass->mSetStaticField = &TestRunner_obj::__SetStatic;
	__mClass->mMarkFunc = TestRunner_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TestRunner_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestRunner_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestRunner_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestRunner_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestRunner_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestRunner_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TestRunner_obj::__boot()
{
	print = new __default_print;

}

} // end namespace haxe
} // end namespace unit
