// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED__List_ListNode
#include <_List/ListNode.h>
#endif
#ifndef INCLUDED_haxe_unit_TestResult
#include <haxe/unit/TestResult.h>
#endif
#ifndef INCLUDED_haxe_unit_TestStatus
#include <haxe/unit/TestStatus.h>
#endif

namespace haxe{
namespace unit{

void TestResult_obj::__construct(){
            	HX_STACK_FRAME("haxe.unit.TestResult","new",0x71c155c3,"haxe.unit.TestResult.new","/usr/lib/haxe/std/haxe/unit/TestResult.hx",29,0x411bf8ac)
            	HX_STACK_THIS(this)
HXLINE(  30)		this->m_tests =  ::List_obj::__new();
HXLINE(  31)		this->success = true;
            	}

Dynamic TestResult_obj::__CreateEmpty() { return new TestResult_obj; }

hx::ObjectPtr< TestResult_obj > TestResult_obj::__new()
{
	hx::ObjectPtr< TestResult_obj > _hx_result = new TestResult_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestResult_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestResult_obj > _hx_result = new TestResult_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestResult_obj::add( ::haxe::unit::TestStatus t){
            	HX_STACK_FRAME("haxe.unit.TestResult","add",0x71b77784,"haxe.unit.TestResult.add","/usr/lib/haxe/std/haxe/unit/TestResult.hx",34,0x411bf8ac)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(t,"t")
HXLINE(  35)		this->m_tests->add(t);
HXLINE(  36)		Bool _hx_tmp = !(t->success);
HXDLIN(  36)		if (_hx_tmp) {
HXLINE(  37)			this->success = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestResult_obj,add,(void))

::String TestResult_obj::toString(){
            	HX_STACK_FRAME("haxe.unit.TestResult","toString",0x8833e469,"haxe.unit.TestResult.toString","/usr/lib/haxe/std/haxe/unit/TestResult.hx",40,0x411bf8ac)
            	HX_STACK_THIS(this)
HXLINE(  41)		HX_VARI(  ::StringBuf,buf) =  ::StringBuf_obj::__new();
HXLINE(  42)		HX_VARI( Int,failures) = (int)0;
HXLINE(  43)		{
HXLINE(  43)			HX_VARI(  ::_List::ListNode,_g_head) = this->m_tests->h;
HXDLIN(  43)			while(hx::IsNotNull( _g_head )){
HXLINE(  43)				HX_VARI(  ::haxe::unit::TestStatus,val) = ( ( ::haxe::unit::TestStatus)(_g_head->item) );
HXLINE(  40)				_g_head = _g_head->next;
HXLINE(  44)				Bool _hx_tmp = (val->success == false);
HXDLIN(  44)				if (_hx_tmp) {
HXLINE(  45)					buf->add(HX_("* ",b6,24,00,00));
HXLINE(  46)					buf->add(val->classname);
HXLINE(  47)					buf->add(HX_("::",c0,32,00,00));
HXLINE(  48)					buf->add(val->method);
HXLINE(  49)					buf->add(HX_("()",01,23,00,00));
HXLINE(  50)					buf->add(HX_("\n",0a,00,00,00));
HXLINE(  52)					buf->add(HX_("ERR: ",2b,f1,17,f1));
HXLINE(  53)					if (hx::IsNotNull( val->posInfos )) {
HXLINE(  54)						buf->add( ::Dynamic(val->posInfos->__Field(HX_("fileName",e7,5a,43,62),hx::paccDynamic)));
HXLINE(  55)						buf->add(HX_(":",3a,00,00,00));
HXLINE(  56)						buf->add( ::Dynamic(val->posInfos->__Field(HX_("lineNumber",dd,81,22,76),hx::paccDynamic)));
HXLINE(  57)						buf->add(HX_("(",28,00,00,00));
HXLINE(  58)						buf->add( ::Dynamic(val->posInfos->__Field(HX_("className",a3,92,3d,dc),hx::paccDynamic)));
HXLINE(  59)						buf->add(HX_(".",2e,00,00,00));
HXLINE(  60)						buf->add( ::Dynamic(val->posInfos->__Field(HX_("methodName",cc,19,0f,12),hx::paccDynamic)));
HXLINE(  61)						buf->add(HX_(") - ",ea,2e,32,1b));
            					}
HXLINE(  63)					buf->add(val->error);
HXLINE(  64)					buf->add(HX_("\n",0a,00,00,00));
HXLINE(  66)					if (hx::IsNotNull( val->backtrace )) {
HXLINE(  67)						buf->add(val->backtrace);
HXLINE(  68)						buf->add(HX_("\n",0a,00,00,00));
            					}
HXLINE(  71)					buf->add(HX_("\n",0a,00,00,00));
HXLINE(  72)					++failures;
            				}
            			}
            		}
HXLINE(  75)		buf->add(HX_("\n",0a,00,00,00));
HXLINE(  76)		if ((failures == (int)0)) {
HXLINE(  77)			buf->add(HX_("OK ",84,33,3c,00));
            		}
            		else {
HXLINE(  79)			buf->add(HX_("FAILED ",c3,13,c2,96));
            		}
HXLINE(  81)		buf->add(this->m_tests->length);
HXLINE(  82)		buf->add(HX_(" tests, ",75,64,2c,e4));
HXLINE(  83)		buf->add(failures);
HXLINE(  84)		buf->add(HX_(" failed, ",91,b5,b6,57));
HXLINE(  85)		Int _hx_tmp1 = (this->m_tests->length - failures);
HXDLIN(  85)		buf->add(_hx_tmp1);
HXLINE(  86)		buf->add(HX_(" success",a3,69,9c,de));
HXLINE(  87)		buf->add(HX_("\n",0a,00,00,00));
HXLINE(  88)		return buf->b->join(HX_("",00,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestResult_obj,toString,return )


TestResult_obj::TestResult_obj()
{
}

void TestResult_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TestResult);
	HX_MARK_MEMBER_NAME(m_tests,"m_tests");
	HX_MARK_MEMBER_NAME(success,"success");
	HX_MARK_END_CLASS();
}

void TestResult_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(m_tests,"m_tests");
	HX_VISIT_MEMBER_NAME(success,"success");
}

hx::Val TestResult_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"m_tests") ) { return hx::Val( m_tests); }
		if (HX_FIELD_EQ(inName,"success") ) { return hx::Val( success); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestResult_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"m_tests") ) { m_tests=inValue.Cast<  ::List >(); return inValue; }
		if (HX_FIELD_EQ(inName,"success") ) { success=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestResult_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("m_tests","\x4f","\x57","\x20","\xbe"));
	outFields->push(HX_HCSTRING("success","\xc3","\x25","\x4e","\xb8"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestResult_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::List*/ ,(int)offsetof(TestResult_obj,m_tests),HX_HCSTRING("m_tests","\x4f","\x57","\x20","\xbe")},
	{hx::fsBool,(int)offsetof(TestResult_obj,success),HX_HCSTRING("success","\xc3","\x25","\x4e","\xb8")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestResult_obj_sStaticStorageInfo = 0;
#endif

static ::String TestResult_obj_sMemberFields[] = {
	HX_HCSTRING("m_tests","\x4f","\x57","\x20","\xbe"),
	HX_HCSTRING("success","\xc3","\x25","\x4e","\xb8"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void TestResult_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestResult_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestResult_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestResult_obj::__mClass,"__mClass");
};

#endif

hx::Class TestResult_obj::__mClass;

void TestResult_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxe.unit.TestResult","\x51","\xb8","\xd4","\xfa");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestResult_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestResult_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestResult_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestResult_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestResult_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestResult_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace unit
