// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "cpp/Int64.h"
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <haxe/io/Error.h>
#endif

namespace haxe{
namespace io{

void Bytes_obj::__construct(Int length,::Array< unsigned char > b){
            	HX_STACK_FRAME("haxe.io.Bytes","new",0x3938d57d,"haxe.io.Bytes.new","/usr/lib/haxe/std/haxe/io/Bytes.hx",33,0x9329f754)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(length,"length")
            	HX_STACK_ARG(b,"b")
HXLINE(  34)		this->length = length;
HXLINE(  35)		this->b = b;
            	}

Dynamic Bytes_obj::__CreateEmpty() { return new Bytes_obj; }

hx::ObjectPtr< Bytes_obj > Bytes_obj::__new(Int length,::Array< unsigned char > b)
{
	hx::ObjectPtr< Bytes_obj > _hx_result = new Bytes_obj();
	_hx_result->__construct(length,b);
	return _hx_result;
}

Dynamic Bytes_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Bytes_obj > _hx_result = new Bytes_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

Int Bytes_obj::get(Int pos){
            	HX_STACK_FRAME("haxe.io.Bytes","get",0x393385b3,"haxe.io.Bytes.get","/usr/lib/haxe/std/haxe/io/Bytes.hx",49,0x9329f754)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
HXLINE(  49)		return this->b->__get(pos);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Bytes_obj,get,return )

void Bytes_obj::set(Int pos,Int v){
            	HX_STACK_FRAME("haxe.io.Bytes","set",0x393ca0bf,"haxe.io.Bytes.set","/usr/lib/haxe/std/haxe/io/Bytes.hx",67,0x9329f754)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(v,"v")
HXLINE(  67)		this->b[pos] = v;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Bytes_obj,set,(void))

void Bytes_obj::blit(Int pos, ::haxe::io::Bytes src,Int srcpos,Int len){
            	HX_STACK_FRAME("haxe.io.Bytes","blit",0xd098ac78,"haxe.io.Bytes.blit","/usr/lib/haxe/std/haxe/io/Bytes.hx",79,0x9329f754)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(src,"src")
            	HX_STACK_ARG(srcpos,"srcpos")
            	HX_STACK_ARG(len,"len")
HXLINE(  81)		Bool _hx_tmp;
HXDLIN(  81)		Bool _hx_tmp1;
HXDLIN(  81)		Bool _hx_tmp2;
HXDLIN(  81)		Bool _hx_tmp3;
HXDLIN(  81)		if ((pos >= (int)0)) {
HXLINE(  81)			_hx_tmp3 = (srcpos < (int)0);
            		}
            		else {
HXLINE(  81)			_hx_tmp3 = true;
            		}
HXDLIN(  81)		if (!(_hx_tmp3)) {
HXLINE(  81)			_hx_tmp2 = (len < (int)0);
            		}
            		else {
HXLINE(  81)			_hx_tmp2 = true;
            		}
HXDLIN(  81)		if (!(_hx_tmp2)) {
HXLINE(  81)			_hx_tmp1 = ((pos + len) > this->length);
            		}
            		else {
HXLINE(  81)			_hx_tmp1 = true;
            		}
HXDLIN(  81)		if (!(_hx_tmp1)) {
HXLINE(  81)			_hx_tmp = ((srcpos + len) > src->length);
            		}
            		else {
HXLINE(  81)			_hx_tmp = true;
            		}
HXDLIN(  81)		if (_hx_tmp) {
HXLINE(  81)			HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            		}
HXLINE(  97)		this->b->blit(pos,src->b,srcpos,len);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Bytes_obj,blit,(void))

void Bytes_obj::fill(Int pos,Int len,Int value){
            	HX_STACK_FRAME("haxe.io.Bytes","fill",0xd33b42c6,"haxe.io.Bytes.fill","/usr/lib/haxe/std/haxe/io/Bytes.hx",126,0x9329f754)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(len,"len")
            	HX_STACK_ARG(value,"value")
HXLINE( 126)		::__hxcpp_memory_memset(this->b,pos,len,value);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Bytes_obj,fill,(void))

 ::haxe::io::Bytes Bytes_obj::sub(Int pos,Int len){
            	HX_STACK_FRAME("haxe.io.Bytes","sub",0x393cae9d,"haxe.io.Bytes.sub","/usr/lib/haxe/std/haxe/io/Bytes.hx",133,0x9329f754)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(len,"len")
HXLINE( 135)		Bool _hx_tmp;
HXDLIN( 135)		Bool _hx_tmp1;
HXDLIN( 135)		if ((pos >= (int)0)) {
HXLINE( 135)			_hx_tmp1 = (len < (int)0);
            		}
            		else {
HXLINE( 135)			_hx_tmp1 = true;
            		}
HXDLIN( 135)		if (!(_hx_tmp1)) {
HXLINE( 135)			_hx_tmp = ((pos + len) > this->length);
            		}
            		else {
HXLINE( 135)			_hx_tmp = true;
            		}
HXDLIN( 135)		if (_hx_tmp) {
HXLINE( 135)			HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            		}
HXLINE( 157)		::Array< unsigned char > _hx_tmp2 = this->b->slice(pos,(pos + len));
HXDLIN( 157)		return  ::haxe::io::Bytes_obj::__new(len,_hx_tmp2);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Bytes_obj,sub,return )

Int Bytes_obj::compare( ::haxe::io::Bytes other){
            	HX_STACK_FRAME("haxe.io.Bytes","compare",0x46537042,"haxe.io.Bytes.compare","/usr/lib/haxe/std/haxe/io/Bytes.hx",195,0x9329f754)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(other,"other")
HXLINE( 195)		return ( (Int)(this->b->memcmp(other->b)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Bytes_obj,compare,return )

Float Bytes_obj::getDouble(Int pos){
            	HX_STACK_FRAME("haxe.io.Bytes","getDouble",0xc306ed24,"haxe.io.Bytes.getDouble","/usr/lib/haxe/std/haxe/io/Bytes.hx",213,0x9329f754)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
HXLINE( 220)		Bool _hx_tmp;
HXDLIN( 220)		if ((pos >= (int)0)) {
HXLINE( 220)			_hx_tmp = ((pos + (int)8) > this->length);
            		}
            		else {
HXLINE( 220)			_hx_tmp = true;
            		}
HXDLIN( 220)		if (_hx_tmp) {
HXLINE( 220)			HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            		}
HXLINE( 221)		return ::__hxcpp_memory_get_double(this->b,pos);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Bytes_obj,getDouble,return )

Float Bytes_obj::getFloat(Int pos){
            	HX_STACK_FRAME("haxe.io.Bytes","getFloat",0x2c9026e9,"haxe.io.Bytes.getFloat","/usr/lib/haxe/std/haxe/io/Bytes.hx",232,0x9329f754)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
HXLINE( 239)		Bool _hx_tmp;
HXDLIN( 239)		if ((pos >= (int)0)) {
HXLINE( 239)			_hx_tmp = ((pos + (int)4) > this->length);
            		}
            		else {
HXLINE( 239)			_hx_tmp = true;
            		}
HXDLIN( 239)		if (_hx_tmp) {
HXLINE( 239)			HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            		}
HXLINE( 240)		return ::__hxcpp_memory_get_float(this->b,pos);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Bytes_obj,getFloat,return )

void Bytes_obj::setDouble(Int pos,Float v){
            	HX_STACK_FRAME("haxe.io.Bytes","setDouble",0xa657d930,"haxe.io.Bytes.setDouble","/usr/lib/haxe/std/haxe/io/Bytes.hx",252,0x9329f754)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(v,"v")
HXLINE( 261)		Bool _hx_tmp;
HXDLIN( 261)		if ((pos >= (int)0)) {
HXLINE( 261)			_hx_tmp = ((pos + (int)8) > this->length);
            		}
            		else {
HXLINE( 261)			_hx_tmp = true;
            		}
HXDLIN( 261)		if (_hx_tmp) {
HXLINE( 261)			HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            		}
HXLINE( 262)		::__hxcpp_memory_set_double(this->b,pos,v);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Bytes_obj,setDouble,(void))

void Bytes_obj::setFloat(Int pos,Float v){
            	HX_STACK_FRAME("haxe.io.Bytes","setFloat",0xdaed805d,"haxe.io.Bytes.setFloat","/usr/lib/haxe/std/haxe/io/Bytes.hx",275,0x9329f754)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(v,"v")
HXLINE( 284)		Bool _hx_tmp;
HXDLIN( 284)		if ((pos >= (int)0)) {
HXLINE( 284)			_hx_tmp = ((pos + (int)4) > this->length);
            		}
            		else {
HXLINE( 284)			_hx_tmp = true;
            		}
HXDLIN( 284)		if (_hx_tmp) {
HXLINE( 284)			HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            		}
HXLINE( 285)		::__hxcpp_memory_set_float(this->b,pos,v);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Bytes_obj,setFloat,(void))

Int Bytes_obj::getUInt16(Int pos){
            	HX_STACK_FRAME("haxe.io.Bytes","getUInt16",0xa94afaf2,"haxe.io.Bytes.getUInt16","/usr/lib/haxe/std/haxe/io/Bytes.hx",298,0x9329f754)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
HXLINE( 298)		return ((int)this->b->__get(pos) | (int)((int)this->b->__get((pos + (int)1)) << (int)(int)8));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Bytes_obj,getUInt16,return )

void Bytes_obj::setUInt16(Int pos,Int v){
            	HX_STACK_FRAME("haxe.io.Bytes","setUInt16",0x8c9be6fe,"haxe.io.Bytes.setUInt16","/usr/lib/haxe/std/haxe/io/Bytes.hx",305,0x9329f754)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(v,"v")
HXLINE( 309)		this->b[pos] = v;
HXLINE( 310)		this->b[(pos + (int)1)] = ((int)v >> (int)(int)8);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Bytes_obj,setUInt16,(void))

Int Bytes_obj::getInt32(Int pos){
            	HX_STACK_FRAME("haxe.io.Bytes","getInt32",0xe819f49b,"haxe.io.Bytes.getInt32","/usr/lib/haxe/std/haxe/io/Bytes.hx",327,0x9329f754)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
HXLINE( 327)		return ((int)((int)((int)this->b->__get(pos) | (int)((int)this->b->__get((pos + (int)1)) << (int)(int)8)) | (int)((int)this->b->__get((pos + (int)2)) << (int)(int)16)) | (int)((int)this->b->__get((pos + (int)3)) << (int)(int)24));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Bytes_obj,getInt32,return )

 ::cpp::Int64Struct Bytes_obj::getInt64(Int pos){
            	HX_STACK_FRAME("haxe.io.Bytes","getInt64",0xe819f73a,"haxe.io.Bytes.getInt64","/usr/lib/haxe/std/haxe/io/Bytes.hx",335,0x9329f754)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
HXLINE( 335)		HX_VARI_NAME( Int,pos1,"pos") = (pos + (int)4);
HXDLIN( 335)		return _hx_int64_make(((int)((int)((int)this->b->__get(pos1) | (int)((int)this->b->__get((pos1 + (int)1)) << (int)(int)8)) | (int)((int)this->b->__get((pos1 + (int)2)) << (int)(int)16)) | (int)((int)this->b->__get((pos1 + (int)3)) << (int)(int)24)),((int)((int)((int)this->b->__get(pos) | (int)((int)this->b->__get((pos + (int)1)) << (int)(int)8)) | (int)((int)this->b->__get((pos + (int)2)) << (int)(int)16)) | (int)((int)this->b->__get((pos + (int)3)) << (int)(int)24)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Bytes_obj,getInt64,return )

void Bytes_obj::setInt32(Int pos,Int v){
            	HX_STACK_FRAME("haxe.io.Bytes","setInt32",0x96774e0f,"haxe.io.Bytes.setInt32","/usr/lib/haxe/std/haxe/io/Bytes.hx",341,0x9329f754)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(v,"v")
HXLINE( 345)		this->b[pos] = v;
HXLINE( 346)		this->b[(pos + (int)1)] = ((int)v >> (int)(int)8);
HXLINE( 347)		this->b[(pos + (int)2)] = ((int)v >> (int)(int)16);
HXLINE( 348)		this->b[(pos + (int)3)] = hx::UShr(v,(int)24);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Bytes_obj,setInt32,(void))

void Bytes_obj::setInt64(Int pos, ::cpp::Int64Struct v){
            	HX_STACK_FRAME("haxe.io.Bytes","setInt64",0x967750ae,"haxe.io.Bytes.setInt64","/usr/lib/haxe/std/haxe/io/Bytes.hx",355,0x9329f754)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(v,"v")
HXLINE( 356)		{
HXLINE( 356)			HX_VARI_NAME( Int,v1,"v") = _hx_int64_low(v);
HXDLIN( 356)			this->b[pos] = v1;
HXDLIN( 356)			this->b[(pos + (int)1)] = ((int)v1 >> (int)(int)8);
HXDLIN( 356)			this->b[(pos + (int)2)] = ((int)v1 >> (int)(int)16);
HXDLIN( 356)			this->b[(pos + (int)3)] = hx::UShr(v1,(int)24);
            		}
HXLINE( 357)		{
HXLINE( 357)			HX_VARI_NAME( Int,pos1,"pos") = (pos + (int)4);
HXDLIN( 357)			HX_VARI_NAME( Int,v2,"v") = _hx_int64_high(v);
HXDLIN( 357)			this->b[pos1] = v2;
HXDLIN( 357)			this->b[(pos1 + (int)1)] = ((int)v2 >> (int)(int)8);
HXDLIN( 357)			this->b[(pos1 + (int)2)] = ((int)v2 >> (int)(int)16);
HXDLIN( 357)			this->b[(pos1 + (int)3)] = hx::UShr(v2,(int)24);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Bytes_obj,setInt64,(void))

::String Bytes_obj::getString(Int pos,Int len){
            	HX_STACK_FRAME("haxe.io.Bytes","getString",0xa16beae4,"haxe.io.Bytes.getString","/usr/lib/haxe/std/haxe/io/Bytes.hx",360,0x9329f754)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(len,"len")
HXLINE( 362)		Bool _hx_tmp;
HXDLIN( 362)		Bool _hx_tmp1;
HXDLIN( 362)		if ((pos >= (int)0)) {
HXLINE( 362)			_hx_tmp1 = (len < (int)0);
            		}
            		else {
HXLINE( 362)			_hx_tmp1 = true;
            		}
HXDLIN( 362)		if (!(_hx_tmp1)) {
HXLINE( 362)			_hx_tmp = ((pos + len) > this->length);
            		}
            		else {
HXLINE( 362)			_hx_tmp = true;
            		}
HXDLIN( 362)		if (_hx_tmp) {
HXLINE( 362)			HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            		}
HXLINE( 372)		HX_VARI( ::String,result) = HX_("",00,00,00,00);
HXLINE( 373)		::__hxcpp_string_of_bytes(this->b,result,pos,len);
HXLINE( 374)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Bytes_obj,getString,return )

::String Bytes_obj::readString(Int pos,Int len){
            	HX_STACK_FRAME("haxe.io.Bytes","readString",0x5f58954a,"haxe.io.Bytes.readString","/usr/lib/haxe/std/haxe/io/Bytes.hx",420,0x9329f754)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(len,"len")
HXLINE( 420)		return this->getString(pos,len);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Bytes_obj,readString,return )

::String Bytes_obj::toString(){
            	HX_STACK_FRAME("haxe.io.Bytes","toString",0x0291226f,"haxe.io.Bytes.toString","/usr/lib/haxe/std/haxe/io/Bytes.hx",440,0x9329f754)
            	HX_STACK_THIS(this)
HXLINE( 440)		return this->getString((int)0,this->length);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Bytes_obj,toString,return )

::String Bytes_obj::toHex(){
            	HX_STACK_FRAME("haxe.io.Bytes","toHex",0x14173a7d,"haxe.io.Bytes.toHex","/usr/lib/haxe/std/haxe/io/Bytes.hx",444,0x9329f754)
            	HX_STACK_THIS(this)
HXLINE( 445)		HX_VARI(  ::StringBuf,s) =  ::StringBuf_obj::__new();
HXLINE( 446)		HX_VARI( ::Array< ::Dynamic>,chars) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 448)		{
HXLINE( 448)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 448)			HX_VARI( Int,_g) = HX_("0123456789abcdef",68,7e,d5,ef).length;
HXDLIN( 448)			while((_g1 < _g)){
HXLINE( 448)				HX_VARI( Int,i) = _g1++;
HXLINE( 449)				 ::Dynamic _hx_tmp = HX_("0123456789abcdef",68,7e,d5,ef).charCodeAt(i);
HXDLIN( 449)				chars->push(_hx_tmp);
            			}
            		}
HXLINE( 450)		{
HXLINE( 450)			HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 450)			HX_VARI_NAME( Int,_g2,"_g") = this->length;
HXDLIN( 450)			while((_g11 < _g2)){
HXLINE( 450)				HX_VARI_NAME( Int,i1,"i") = _g11++;
HXLINE( 451)				HX_VARI( Int,c) = this->b->__get(i1);
HXLINE( 452)				s->b->push(::String::fromCharCode(chars->__get(((int)c >> (int)(int)4))));
HXLINE( 453)				s->b->push(::String::fromCharCode(chars->__get(((int)c & (int)(int)15))));
            			}
            		}
HXLINE( 455)		return s->b->join(HX_("",00,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Bytes_obj,toHex,return )

::Array< unsigned char > Bytes_obj::getData(){
            	HX_STACK_FRAME("haxe.io.Bytes","getData",0xd7d05d7d,"haxe.io.Bytes.getData","/usr/lib/haxe/std/haxe/io/Bytes.hx",459,0x9329f754)
            	HX_STACK_THIS(this)
HXLINE( 459)		return this->b;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Bytes_obj,getData,return )

 ::haxe::io::Bytes Bytes_obj::alloc(Int length){
            	HX_STACK_FRAME("haxe.io.Bytes","alloc",0x2199ead2,"haxe.io.Bytes.alloc","/usr/lib/haxe/std/haxe/io/Bytes.hx",462,0x9329f754)
            	HX_STACK_ARG(length,"length")
HXLINE( 472)		HX_VARI( ::Array< unsigned char >,a) = ::Array_obj< unsigned char >::__new();
HXLINE( 473)		if ((length > (int)0)) {
HXLINE( 473)			_hx_array_set_size_exact(a,length);
            		}
HXLINE( 474)		return  ::haxe::io::Bytes_obj::__new(length,a);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Bytes_obj,alloc,return )

 ::haxe::io::Bytes Bytes_obj::ofString(::String s){
            	HX_STACK_FRAME("haxe.io.Bytes","ofString",0x6e53bb0b,"haxe.io.Bytes.ofString","/usr/lib/haxe/std/haxe/io/Bytes.hx",490,0x9329f754)
            	HX_STACK_ARG(s,"s")
HXLINE( 501)		HX_VARI( ::Array< unsigned char >,a) = ::Array_obj< unsigned char >::__new();
HXLINE( 502)		::__hxcpp_bytes_of_string(a,s);
HXLINE( 503)		return  ::haxe::io::Bytes_obj::__new(a->length,a);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Bytes_obj,ofString,return )

 ::haxe::io::Bytes Bytes_obj::ofData(::Array< unsigned char > b){
            	HX_STACK_FRAME("haxe.io.Bytes","ofData",0x4f3005e4,"haxe.io.Bytes.ofData","/usr/lib/haxe/std/haxe/io/Bytes.hx",561,0x9329f754)
            	HX_STACK_ARG(b,"b")
HXLINE( 561)		return  ::haxe::io::Bytes_obj::__new(b->length,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Bytes_obj,ofData,return )

Int Bytes_obj::fastGet(::Array< unsigned char > b,Int pos){
            	HX_STACK_FRAME("haxe.io.Bytes","fastGet",0xa10d56f7,"haxe.io.Bytes.fastGet","/usr/lib/haxe/std/haxe/io/Bytes.hx",577,0x9329f754)
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 577)		return ( (Int)(_hx_array_unsafe_get(b,pos)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Bytes_obj,fastGet,return )


Bytes_obj::Bytes_obj()
{
}

void Bytes_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Bytes);
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(b,"b");
	HX_MARK_END_CLASS();
}

void Bytes_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(b,"b");
}

hx::Val Bytes_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"b") ) { return hx::Val( b); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn()); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn()); }
		if (HX_FIELD_EQ(inName,"sub") ) { return hx::Val( sub_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"blit") ) { return hx::Val( blit_dyn()); }
		if (HX_FIELD_EQ(inName,"fill") ) { return hx::Val( fill_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"toHex") ) { return hx::Val( toHex_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"compare") ) { return hx::Val( compare_dyn()); }
		if (HX_FIELD_EQ(inName,"getData") ) { return hx::Val( getData_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getFloat") ) { return hx::Val( getFloat_dyn()); }
		if (HX_FIELD_EQ(inName,"setFloat") ) { return hx::Val( setFloat_dyn()); }
		if (HX_FIELD_EQ(inName,"getInt32") ) { return hx::Val( getInt32_dyn()); }
		if (HX_FIELD_EQ(inName,"getInt64") ) { return hx::Val( getInt64_dyn()); }
		if (HX_FIELD_EQ(inName,"setInt32") ) { return hx::Val( setInt32_dyn()); }
		if (HX_FIELD_EQ(inName,"setInt64") ) { return hx::Val( setInt64_dyn()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getDouble") ) { return hx::Val( getDouble_dyn()); }
		if (HX_FIELD_EQ(inName,"setDouble") ) { return hx::Val( setDouble_dyn()); }
		if (HX_FIELD_EQ(inName,"getUInt16") ) { return hx::Val( getUInt16_dyn()); }
		if (HX_FIELD_EQ(inName,"setUInt16") ) { return hx::Val( setUInt16_dyn()); }
		if (HX_FIELD_EQ(inName,"getString") ) { return hx::Val( getString_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"readString") ) { return hx::Val( readString_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Bytes_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"alloc") ) { outValue = alloc_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"ofData") ) { outValue = ofData_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fastGet") ) { outValue = fastGet_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"ofString") ) { outValue = ofString_dyn(); return true; }
	}
	return false;
}

hx::Val Bytes_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"b") ) { b=inValue.Cast< ::Array< unsigned char > >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Bytes_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("b","\x62","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Bytes_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Bytes_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{hx::fsObject /*Array< unsigned char >*/ ,(int)offsetof(Bytes_obj,b),HX_HCSTRING("b","\x62","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Bytes_obj_sStaticStorageInfo = 0;
#endif

static ::String Bytes_obj_sMemberFields[] = {
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("b","\x62","\x00","\x00","\x00"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("blit","\x35","\x38","\x19","\x41"),
	HX_HCSTRING("fill","\x83","\xce","\xbb","\x43"),
	HX_HCSTRING("sub","\x80","\xa9","\x57","\x00"),
	HX_HCSTRING("compare","\xa5","\x18","\x69","\x83"),
	HX_HCSTRING("getDouble","\x47","\xb4","\x21","\xaf"),
	HX_HCSTRING("getFloat","\x26","\xd5","\x6d","\x62"),
	HX_HCSTRING("setDouble","\x53","\xa0","\x72","\x92"),
	HX_HCSTRING("setFloat","\x9a","\x2e","\xcb","\x10"),
	HX_HCSTRING("getUInt16","\x15","\xc2","\x65","\x95"),
	HX_HCSTRING("setUInt16","\x21","\xae","\xb6","\x78"),
	HX_HCSTRING("getInt32","\xd8","\xa2","\xf7","\x1d"),
	HX_HCSTRING("getInt64","\x77","\xa5","\xf7","\x1d"),
	HX_HCSTRING("setInt32","\x4c","\xfc","\x54","\xcc"),
	HX_HCSTRING("setInt64","\xeb","\xfe","\x54","\xcc"),
	HX_HCSTRING("getString","\x07","\xb2","\x86","\x8d"),
	HX_HCSTRING("readString","\xc7","\x0c","\xac","\x0a"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("toHex","\x20","\xf4","\x10","\x14"),
	HX_HCSTRING("getData","\xe0","\x05","\xe6","\x14"),
	::String(null()) };

static void Bytes_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Bytes_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Bytes_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Bytes_obj::__mClass,"__mClass");
};

#endif

hx::Class Bytes_obj::__mClass;

static ::String Bytes_obj_sStaticFields[] = {
	HX_HCSTRING("alloc","\x75","\xa4","\x93","\x21"),
	HX_HCSTRING("ofString","\x48","\x69","\x31","\xa4"),
	HX_HCSTRING("ofData","\xe1","\xba","\xb8","\x49"),
	HX_HCSTRING("fastGet","\x5a","\xff","\x22","\xde"),
	::String(null())
};

void Bytes_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxe.io.Bytes","\x0b","\x53","\x6f","\x9f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Bytes_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Bytes_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Bytes_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Bytes_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Bytes_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Bytes_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Bytes_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Bytes_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace io
