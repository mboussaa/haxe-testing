// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesBuffer
#include <haxe/io/BytesBuffer.h>
#endif
#ifndef INCLUDED_haxe_io_Eof
#include <haxe/io/Eof.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <haxe/io/Error.h>
#endif
#ifndef INCLUDED_haxe_io_FPHelper
#include <haxe/io/FPHelper.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif

namespace haxe{
namespace io{

void Input_obj::__construct() { }

Dynamic Input_obj::__CreateEmpty() { return new Input_obj; }

hx::ObjectPtr< Input_obj > Input_obj::__new()
{
	hx::ObjectPtr< Input_obj > _hx_result = new Input_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Input_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Input_obj > _hx_result = new Input_obj();
	_hx_result->__construct();
	return _hx_result;
}

Int Input_obj::readByte(){
            	HX_STACK_FRAME("haxe.io.Input","readByte",0x4de8a3c2,"haxe.io.Input.readByte","/usr/lib/haxe/std/haxe/io/Input.hx",48,0xf7c40915)
            	HX_STACK_THIS(this)
HXLINE(  48)		HX_STACK_DO_THROW(HX_("Not implemented",15,1e,32,34));
HXDLIN(  48)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Input_obj,readByte,return )

Int Input_obj::readBytes(::haxe::io::Bytes s,Int pos,Int len){
            	HX_STACK_FRAME("haxe.io.Input","readBytes",0xdda6a671,"haxe.io.Input.readBytes","/usr/lib/haxe/std/haxe/io/Input.hx",61,0xf7c40915)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(len,"len")
HXLINE(  62)		Int k = len;
HX_STACK_VAR		(k,"k");
HXLINE(  63)		::Array< unsigned char > b = s->b;
HX_STACK_VAR		(b,"b");
HXLINE(  64)		Bool _hx_tmp;
HX_STACK_VAR		(_hx_tmp,"_hx_tmp");
HXDLIN(  64)		Bool _hx_tmp1;
HX_STACK_VAR		(_hx_tmp1,"_hx_tmp");
HXDLIN(  64)		if ((pos >= (int)0)) {
HXLINE(  64)			_hx_tmp1 = (len < (int)0);
            		}
            		else {
HXLINE(  64)			_hx_tmp1 = true;
            		}
HXDLIN(  64)		if (!(_hx_tmp1)) {
HXLINE(  64)			_hx_tmp = ((pos + len) > s->length);
            		}
            		else {
HXLINE(  64)			_hx_tmp = true;
            		}
HXDLIN(  64)		if (_hx_tmp) {
HXLINE(  65)			HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            		}
HXLINE(  66)		while((k > (int)0)){
HXLINE(  72)			unsigned char _hx_tmp2 = this->readByte();
HX_STACK_VAR			(_hx_tmp2,"_hx_tmp");
HXDLIN(  72)			b[pos] = _hx_tmp2;
HXLINE(  76)			++pos;
HXLINE(  77)			--k;
            		}
HXLINE(  79)		return len;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Input_obj,readBytes,return )

void Input_obj::close(){
            	HX_STACK_FRAME("haxe.io.Input","close",0xfc421af4,"haxe.io.Input.close","/usr/lib/haxe/std/haxe/io/Input.hx",87,0xf7c40915)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Input_obj,close,(void))

Bool Input_obj::set_bigEndian(Bool b){
            	HX_STACK_FRAME("haxe.io.Input","set_bigEndian",0x96732a9a,"haxe.io.Input.set_bigEndian","/usr/lib/haxe/std/haxe/io/Input.hx",90,0xf7c40915)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(b,"b")
HXLINE(  91)		this->bigEndian = b;
HXLINE(  92)		return b;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,set_bigEndian,return )

::haxe::io::Bytes Input_obj::readAll( ::Dynamic bufsize){
            	HX_STACK_FRAME("haxe.io.Input","readAll",0xaed6e9a7,"haxe.io.Input.readAll","/usr/lib/haxe/std/haxe/io/Input.hx",103,0xf7c40915)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bufsize,"bufsize")
HXLINE( 104)		Bool _hx_tmp = hx::IsNull( bufsize );
HX_STACK_VAR		(_hx_tmp,"_hx_tmp");
HXDLIN( 104)		if (_hx_tmp) {
HXLINE( 108)			bufsize = (int)16384;
            		}
HXLINE( 111)		::haxe::io::Bytes buf = ::haxe::io::Bytes_obj::alloc(bufsize);
HX_STACK_VAR		(buf,"buf");
HXLINE( 112)		::haxe::io::BytesBuffer total = ::haxe::io::BytesBuffer_obj::__new();
HX_STACK_VAR		(total,"total");
HXLINE( 114)		try {
            			HX_STACK_CATCHABLE(::haxe::io::Eof, 0);
HXLINE( 114)			while(true){
HXLINE( 115)				Int len = this->readBytes(buf,(int)0,bufsize);
HX_STACK_VAR				(len,"len");
HXLINE( 116)				if ((len == (int)0)) {
HXLINE( 117)					HX_STACK_DO_THROW(::haxe::io::Error_obj::Blocked_dyn());
            				}
HXLINE( 118)				{
HXLINE( 118)					Bool _hx_tmp1;
HX_STACK_VAR					(_hx_tmp1,"_hx_tmp");
HXDLIN( 118)					if ((len >= (int)0)) {
HXLINE( 118)						_hx_tmp1 = (len > buf->length);
            					}
            					else {
HXLINE( 118)						_hx_tmp1 = true;
            					}
HXDLIN( 118)					if (_hx_tmp1) {
HXLINE( 118)						HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            					}
HXDLIN( 118)					::Array< unsigned char > b2 = buf->b;
HX_STACK_VAR					(b2,"b2");
HXDLIN( 118)					{
HXLINE( 118)						Int _g1 = (int)0;
HX_STACK_VAR						(_g1,"_g1");
HXDLIN( 118)						while((_g1 < len)){
HXLINE( 118)							Int i = _g1++;
HX_STACK_VAR							(i,"i");
HXDLIN( 118)							total->b->push(b2->__get(i));
            						}
            					}
            				}
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass< ::haxe::io::Eof >() ){
            				HX_STACK_BEGIN_CATCH
            				::haxe::io::Eof e = _hx_e;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 122)		return total->getBytes();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,readAll,return )

void Input_obj::readFullBytes(::haxe::io::Bytes s,Int pos,Int len){
            	HX_STACK_FRAME("haxe.io.Input","readFullBytes",0x3db9a162,"haxe.io.Input.readFullBytes","/usr/lib/haxe/std/haxe/io/Input.hx",131,0xf7c40915)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(len,"len")
HXLINE( 131)		while((len > (int)0)){
HXLINE( 132)			Int k = this->readBytes(s,pos,len);
HX_STACK_VAR			(k,"k");
HXLINE( 133)			hx::AddEq(pos,k);
HXLINE( 134)			hx::SubEq(len,k);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Input_obj,readFullBytes,(void))

::haxe::io::Bytes Input_obj::read(Int nbytes){
            	HX_STACK_FRAME("haxe.io.Input","read",0x27b9839a,"haxe.io.Input.read","/usr/lib/haxe/std/haxe/io/Input.hx",141,0xf7c40915)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(nbytes,"nbytes")
HXLINE( 142)		::haxe::io::Bytes s = ::haxe::io::Bytes_obj::alloc(nbytes);
HX_STACK_VAR		(s,"s");
HXLINE( 143)		Int p = (int)0;
HX_STACK_VAR		(p,"p");
HXLINE( 144)		while((nbytes > (int)0)){
HXLINE( 145)			Int k = this->readBytes(s,p,nbytes);
HX_STACK_VAR			(k,"k");
HXLINE( 146)			if ((k == (int)0)) {
HXLINE( 146)				HX_STACK_DO_THROW(::haxe::io::Error_obj::Blocked_dyn());
            			}
HXLINE( 147)			hx::AddEq(p,k);
HXLINE( 148)			hx::SubEq(nbytes,k);
            		}
HXLINE( 150)		return s;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,read,return )

::String Input_obj::readUntil(Int end){
            	HX_STACK_FRAME("haxe.io.Input","readUntil",0xc6fe56a4,"haxe.io.Input.readUntil","/usr/lib/haxe/std/haxe/io/Input.hx",158,0xf7c40915)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(end,"end")
HXLINE( 159)		::StringBuf buf = ::StringBuf_obj::__new();
HX_STACK_VAR		(buf,"buf");
HXLINE( 160)		Int last;
HX_STACK_VAR		(last,"last");
HXLINE( 161)		while(true){
HXLINE( 161)			last = this->readByte();
HXDLIN( 161)			if (!((last != end))) {
HXLINE( 161)				break;
            			}
HXLINE( 162)			buf->b->push(::String::fromCharCode(last));
            		}
HXLINE( 163)		return buf->b->join(HX_("",00,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,readUntil,return )

::String Input_obj::readLine(){
            	HX_STACK_FRAME("haxe.io.Input","readLine",0x54789cae,"haxe.io.Input.readLine","/usr/lib/haxe/std/haxe/io/Input.hx",171,0xf7c40915)
            	HX_STACK_THIS(this)
HXLINE( 172)		::StringBuf buf = ::StringBuf_obj::__new();
HX_STACK_VAR		(buf,"buf");
HXLINE( 173)		Int last;
HX_STACK_VAR		(last,"last");
HXLINE( 174)		::String s;
HX_STACK_VAR		(s,"s");
HXLINE( 175)		try {
            			HX_STACK_CATCHABLE(::haxe::io::Eof, 0);
HXLINE( 176)			while(true){
HXLINE( 176)				last = this->readByte();
HXDLIN( 176)				if (!((last != (int)10))) {
HXLINE( 176)					break;
            				}
HXLINE( 177)				buf->b->push(::String::fromCharCode(last));
            			}
HXLINE( 178)			s = buf->b->join(HX_("",00,00,00,00));
HXLINE( 179)			Int _hx_tmp = (s.length - (int)1);
HX_STACK_VAR			(_hx_tmp,"_hx_tmp");
HXDLIN( 179)			 ::Dynamic _hx_tmp1 = s.charCodeAt(_hx_tmp);
HX_STACK_VAR			(_hx_tmp1,"_hx_tmp");
HXDLIN( 179)			if (hx::IsEq( _hx_tmp1,(int)13 )) {
HXLINE( 179)				s = s.substr((int)0,(int)-1);
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass< ::haxe::io::Eof >() ){
            				HX_STACK_BEGIN_CATCH
            				::haxe::io::Eof e = _hx_e;
HXLINE( 181)				s = buf->b->join(HX_("",00,00,00,00));
HXLINE( 182)				if ((s.length == (int)0)) {
HXLINE( 183)					HX_STACK_DO_THROW(e);
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 185)		return s;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Input_obj,readLine,return )

Float Input_obj::readFloat(){
            	HX_STACK_FRAME("haxe.io.Input","readFloat",0x22a563a2,"haxe.io.Input.readFloat","/usr/lib/haxe/std/haxe/io/Input.hx",194,0xf7c40915)
            	HX_STACK_THIS(this)
HXLINE( 194)		Int _hx_tmp = this->readInt32();
HX_STACK_VAR		(_hx_tmp,"_hx_tmp");
HXDLIN( 194)		return ::haxe::io::FPHelper_obj::i32ToFloat(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Input_obj,readFloat,return )

Float Input_obj::readDouble(){
            	HX_STACK_FRAME("haxe.io.Input","readDouble",0x1f86d24b,"haxe.io.Input.readDouble","/usr/lib/haxe/std/haxe/io/Input.hx",202,0xf7c40915)
            	HX_STACK_THIS(this)
HXLINE( 203)		Int i1 = this->readInt32();
HX_STACK_VAR		(i1,"i1");
HXLINE( 204)		Int i2 = this->readInt32();
HX_STACK_VAR		(i2,"i2");
HXLINE( 205)		Bool _hx_tmp = this->bigEndian;
HX_STACK_VAR		(_hx_tmp,"_hx_tmp");
HXDLIN( 205)		if (_hx_tmp) {
HXLINE( 205)			return ::haxe::io::FPHelper_obj::i64ToDouble(i2,i1);
            		}
            		else {
HXLINE( 205)			return ::haxe::io::FPHelper_obj::i64ToDouble(i1,i2);
            		}
HXDLIN( 205)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Input_obj,readDouble,return )

Int Input_obj::readInt8(){
            	HX_STACK_FRAME("haxe.io.Input","readInt8",0x5280c923,"haxe.io.Input.readInt8","/usr/lib/haxe/std/haxe/io/Input.hx",211,0xf7c40915)
            	HX_STACK_THIS(this)
HXLINE( 212)		Int n = this->readByte();
HX_STACK_VAR		(n,"n");
HXLINE( 213)		if ((n >= (int)128)) {
HXLINE( 214)			return (n - (int)256);
            		}
HXLINE( 215)		return n;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Input_obj,readInt8,return )

Int Input_obj::readInt16(){
            	HX_STACK_FRAME("haxe.io.Input","readInt16",0xde2f2f9a,"haxe.io.Input.readInt16","/usr/lib/haxe/std/haxe/io/Input.hx",223,0xf7c40915)
            	HX_STACK_THIS(this)
HXLINE( 224)		Int ch1 = this->readByte();
HX_STACK_VAR		(ch1,"ch1");
HXLINE( 225)		Int ch2 = this->readByte();
HX_STACK_VAR		(ch2,"ch2");
HXLINE( 226)		Int n;
HX_STACK_VAR		(n,"n");
HXDLIN( 226)		if (this->bigEndian) {
HXLINE( 226)			n = ((int)ch2 | (int)((int)ch1 << (int)(int)8));
            		}
            		else {
HXLINE( 226)			n = ((int)ch1 | (int)((int)ch2 << (int)(int)8));
            		}
HXLINE( 227)		if ((((int)n & (int)(int)32768) != (int)0)) {
HXLINE( 228)			return (n - (int)65536);
            		}
HXLINE( 229)		return n;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Input_obj,readInt16,return )

Int Input_obj::readUInt16(){
            	HX_STACK_FRAME("haxe.io.Input","readUInt16",0x05cae019,"haxe.io.Input.readUInt16","/usr/lib/haxe/std/haxe/io/Input.hx",237,0xf7c40915)
            	HX_STACK_THIS(this)
HXLINE( 238)		Int ch1 = this->readByte();
HX_STACK_VAR		(ch1,"ch1");
HXLINE( 239)		Int ch2 = this->readByte();
HX_STACK_VAR		(ch2,"ch2");
HXLINE( 240)		if (this->bigEndian) {
HXLINE( 240)			return ((int)ch2 | (int)((int)ch1 << (int)(int)8));
            		}
            		else {
HXLINE( 240)			return ((int)ch1 | (int)((int)ch2 << (int)(int)8));
            		}
HXDLIN( 240)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Input_obj,readUInt16,return )

Int Input_obj::readInt24(){
            	HX_STACK_FRAME("haxe.io.Input","readInt24",0xde2f3077,"haxe.io.Input.readInt24","/usr/lib/haxe/std/haxe/io/Input.hx",248,0xf7c40915)
            	HX_STACK_THIS(this)
HXLINE( 249)		Int ch1 = this->readByte();
HX_STACK_VAR		(ch1,"ch1");
HXLINE( 250)		Int ch2 = this->readByte();
HX_STACK_VAR		(ch2,"ch2");
HXLINE( 251)		Int ch3 = this->readByte();
HX_STACK_VAR		(ch3,"ch3");
HXLINE( 252)		Int n;
HX_STACK_VAR		(n,"n");
HXDLIN( 252)		if (this->bigEndian) {
HXLINE( 252)			n = ((int)((int)ch3 | (int)((int)ch2 << (int)(int)8)) | (int)((int)ch1 << (int)(int)16));
            		}
            		else {
HXLINE( 252)			n = ((int)((int)ch1 | (int)((int)ch2 << (int)(int)8)) | (int)((int)ch3 << (int)(int)16));
            		}
HXLINE( 253)		if ((((int)n & (int)(int)8388608) != (int)0)) {
HXLINE( 254)			return (n - (int)16777216);
            		}
HXLINE( 255)		return n;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Input_obj,readInt24,return )

Int Input_obj::readUInt24(){
            	HX_STACK_FRAME("haxe.io.Input","readUInt24",0x05cae0f6,"haxe.io.Input.readUInt24","/usr/lib/haxe/std/haxe/io/Input.hx",263,0xf7c40915)
            	HX_STACK_THIS(this)
HXLINE( 264)		Int ch1 = this->readByte();
HX_STACK_VAR		(ch1,"ch1");
HXLINE( 265)		Int ch2 = this->readByte();
HX_STACK_VAR		(ch2,"ch2");
HXLINE( 266)		Int ch3 = this->readByte();
HX_STACK_VAR		(ch3,"ch3");
HXLINE( 267)		if (this->bigEndian) {
HXLINE( 267)			return ((int)((int)ch3 | (int)((int)ch2 << (int)(int)8)) | (int)((int)ch1 << (int)(int)16));
            		}
            		else {
HXLINE( 267)			return ((int)((int)ch1 | (int)((int)ch2 << (int)(int)8)) | (int)((int)ch3 << (int)(int)16));
            		}
HXDLIN( 267)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Input_obj,readUInt24,return )

Int Input_obj::readInt32(){
            	HX_STACK_FRAME("haxe.io.Input","readInt32",0xde2f3154,"haxe.io.Input.readInt32","/usr/lib/haxe/std/haxe/io/Input.hx",275,0xf7c40915)
            	HX_STACK_THIS(this)
HXLINE( 276)		Int ch1 = this->readByte();
HX_STACK_VAR		(ch1,"ch1");
HXLINE( 277)		Int ch2 = this->readByte();
HX_STACK_VAR		(ch2,"ch2");
HXLINE( 278)		Int ch3 = this->readByte();
HX_STACK_VAR		(ch3,"ch3");
HXLINE( 279)		Int ch4 = this->readByte();
HX_STACK_VAR		(ch4,"ch4");
HXLINE( 292)		if (this->bigEndian) {
HXLINE( 292)			return ((int)((int)((int)ch4 | (int)((int)ch3 << (int)(int)8)) | (int)((int)ch2 << (int)(int)16)) | (int)((int)ch1 << (int)(int)24));
            		}
            		else {
HXLINE( 292)			return ((int)((int)((int)ch1 | (int)((int)ch2 << (int)(int)8)) | (int)((int)ch3 << (int)(int)16)) | (int)((int)ch4 << (int)(int)24));
            		}
HXDLIN( 292)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Input_obj,readInt32,return )

::String Input_obj::readString(Int len){
            	HX_STACK_FRAME("haxe.io.Input","readString",0xfdebd00b,"haxe.io.Input.readString","/usr/lib/haxe/std/haxe/io/Input.hx",299,0xf7c40915)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(len,"len")
HXLINE( 300)		::haxe::io::Bytes b = ::haxe::io::Bytes_obj::alloc(len);
HX_STACK_VAR		(b,"b");
HXLINE( 301)		this->readFullBytes(b,(int)0,len);
HXLINE( 305)		return b->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,readString,return )


Input_obj::Input_obj()
{
}

hx::Val Input_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"read") ) { return hx::Val( read_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"close") ) { return hx::Val( close_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"readAll") ) { return hx::Val( readAll_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"readByte") ) { return hx::Val( readByte_dyn()); }
		if (HX_FIELD_EQ(inName,"readLine") ) { return hx::Val( readLine_dyn()); }
		if (HX_FIELD_EQ(inName,"readInt8") ) { return hx::Val( readInt8_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"bigEndian") ) { return hx::Val( bigEndian); }
		if (HX_FIELD_EQ(inName,"readBytes") ) { return hx::Val( readBytes_dyn()); }
		if (HX_FIELD_EQ(inName,"readUntil") ) { return hx::Val( readUntil_dyn()); }
		if (HX_FIELD_EQ(inName,"readFloat") ) { return hx::Val( readFloat_dyn()); }
		if (HX_FIELD_EQ(inName,"readInt16") ) { return hx::Val( readInt16_dyn()); }
		if (HX_FIELD_EQ(inName,"readInt24") ) { return hx::Val( readInt24_dyn()); }
		if (HX_FIELD_EQ(inName,"readInt32") ) { return hx::Val( readInt32_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"readDouble") ) { return hx::Val( readDouble_dyn()); }
		if (HX_FIELD_EQ(inName,"readUInt16") ) { return hx::Val( readUInt16_dyn()); }
		if (HX_FIELD_EQ(inName,"readUInt24") ) { return hx::Val( readUInt24_dyn()); }
		if (HX_FIELD_EQ(inName,"readString") ) { return hx::Val( readString_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"set_bigEndian") ) { return hx::Val( set_bigEndian_dyn()); }
		if (HX_FIELD_EQ(inName,"readFullBytes") ) { return hx::Val( readFullBytes_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Input_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"bigEndian") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_bigEndian(inValue) );bigEndian=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Input_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("bigEndian","\x7b","\xd5","\x5a","\x20"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Input_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(Input_obj,bigEndian),HX_HCSTRING("bigEndian","\x7b","\xd5","\x5a","\x20")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Input_obj_sStaticStorageInfo = 0;
#endif

static ::String Input_obj_sMemberFields[] = {
	HX_HCSTRING("bigEndian","\x7b","\xd5","\x5a","\x20"),
	HX_HCSTRING("readByte","\x7e","\xf9","\x1a","\x69"),
	HX_HCSTRING("readBytes","\x35","\x55","\x7f","\x8e"),
	HX_HCSTRING("close","\xb8","\x17","\x63","\x48"),
	HX_HCSTRING("set_bigEndian","\x5e","\x8b","\xc4","\x26"),
	HX_HCSTRING("readAll","\x6b","\x9f","\xc3","\x02"),
	HX_HCSTRING("readFullBytes","\x26","\x02","\x0b","\xce"),
	HX_HCSTRING("read","\x56","\x4b","\xa7","\x4b"),
	HX_HCSTRING("readUntil","\x68","\x05","\xd7","\x77"),
	HX_HCSTRING("readLine","\x6a","\xf2","\xaa","\x6f"),
	HX_HCSTRING("readFloat","\x66","\x12","\x7e","\xd3"),
	HX_HCSTRING("readDouble","\x07","\x0f","\x47","\x2c"),
	HX_HCSTRING("readInt8","\xdf","\x1e","\xb3","\x6d"),
	HX_HCSTRING("readInt16","\x5e","\xde","\x07","\x8f"),
	HX_HCSTRING("readUInt16","\xd5","\x1c","\x8b","\x12"),
	HX_HCSTRING("readInt24","\x3b","\xdf","\x07","\x8f"),
	HX_HCSTRING("readUInt24","\xb2","\x1d","\x8b","\x12"),
	HX_HCSTRING("readInt32","\x18","\xe0","\x07","\x8f"),
	HX_HCSTRING("readString","\xc7","\x0c","\xac","\x0a"),
	::String(null()) };

static void Input_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Input_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Input_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Input_obj::__mClass,"__mClass");
};

#endif

hx::Class Input_obj::__mClass;

void Input_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxe.io.Input","\xaa","\x0e","\xf5","\x9f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Input_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Input_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Input_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Input_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Input_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Input_obj_sStaticStorageInfo;
#endif
	hx::RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace io
