// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "cpp/Int64.h"
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Eof
#include <haxe/io/Eof.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <haxe/io/Error.h>
#endif
#ifndef INCLUDED_haxe_io_FPHelper
#include <haxe/io/FPHelper.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif

namespace haxe{
namespace io{

void Output_obj::__construct() { }

Dynamic Output_obj::__CreateEmpty() { return new Output_obj; }

hx::ObjectPtr< Output_obj > Output_obj::__new()
{
	hx::ObjectPtr< Output_obj > _hx_result = new Output_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Output_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Output_obj > _hx_result = new Output_obj();
	_hx_result->__construct();
	return _hx_result;
}

void Output_obj::writeByte(Int c){
            	HX_STACK_FRAME("haxe.io.Output","writeByte",0xb4fe513a,"haxe.io.Output.writeByte","/usr/lib/haxe/std/haxe/io/Output.hx",47,0xbdd9ff1c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(c,"c")
HXLINE(  47)		HX_STACK_DO_THROW(HX_("Not implemented",15,1e,32,34));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Output_obj,writeByte,(void))

Int Output_obj::writeBytes(::haxe::io::Bytes s,Int pos,Int len){
            	HX_STACK_FRAME("haxe.io.Output","writeBytes",0xa988c1f9,"haxe.io.Output.writeBytes","/usr/lib/haxe/std/haxe/io/Output.hx",57,0xbdd9ff1c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(len,"len")
HXLINE(  59)		Bool _hx_tmp;
HX_STACK_VAR		(_hx_tmp,"_hx_tmp");
HXDLIN(  59)		Bool _hx_tmp1;
HX_STACK_VAR		(_hx_tmp1,"_hx_tmp");
HXDLIN(  59)		if ((pos >= (int)0)) {
HXLINE(  59)			_hx_tmp1 = (len < (int)0);
            		}
            		else {
HXLINE(  59)			_hx_tmp1 = true;
            		}
HXDLIN(  59)		if (!(_hx_tmp1)) {
HXLINE(  59)			_hx_tmp = ((pos + len) > s->length);
            		}
            		else {
HXLINE(  59)			_hx_tmp = true;
            		}
HXDLIN(  59)		if (_hx_tmp) {
HXLINE(  60)			HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            		}
HXLINE(  62)		::Array< unsigned char > b = s->b;
HX_STACK_VAR		(b,"b");
HXLINE(  63)		Int k = len;
HX_STACK_VAR		(k,"k");
HXLINE(  64)		while((k > (int)0)){
HXLINE(  70)			this->writeByte(b->__get(pos));
HXLINE(  76)			++pos;
HXLINE(  77)			--k;
            		}
HXLINE(  79)		return len;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Output_obj,writeBytes,return )

void Output_obj::flush(){
            	HX_STACK_FRAME("haxe.io.Output","flush",0xa15f0af7,"haxe.io.Output.flush","/usr/lib/haxe/std/haxe/io/Output.hx",85,0xbdd9ff1c)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Output_obj,flush,(void))

void Output_obj::close(){
            	HX_STACK_FRAME("haxe.io.Output","close",0xe726bfeb,"haxe.io.Output.close","/usr/lib/haxe/std/haxe/io/Output.hx",93,0xbdd9ff1c)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Output_obj,close,(void))

Bool Output_obj::set_bigEndian(Bool b){
            	HX_STACK_FRAME("haxe.io.Output","set_bigEndian",0x33881e91,"haxe.io.Output.set_bigEndian","/usr/lib/haxe/std/haxe/io/Output.hx",96,0xbdd9ff1c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(b,"b")
HXLINE(  97)		this->bigEndian = b;
HXLINE(  98)		return b;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Output_obj,set_bigEndian,return )

void Output_obj::write(::haxe::io::Bytes s){
            	HX_STACK_FRAME("haxe.io.Output","write",0x6f1d1512,"haxe.io.Output.write","/usr/lib/haxe/std/haxe/io/Output.hx",106,0xbdd9ff1c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s,"s")
HXLINE( 107)		Int l = s->length;
HX_STACK_VAR		(l,"l");
HXLINE( 108)		Int p = (int)0;
HX_STACK_VAR		(p,"p");
HXLINE( 109)		while((l > (int)0)){
HXLINE( 110)			Int k = this->writeBytes(s,p,l);
HX_STACK_VAR			(k,"k");
HXLINE( 111)			if ((k == (int)0)) {
HXLINE( 111)				HX_STACK_DO_THROW(::haxe::io::Error_obj::Blocked_dyn());
            			}
HXLINE( 112)			hx::AddEq(p,k);
HXLINE( 113)			hx::SubEq(l,k);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Output_obj,write,(void))

void Output_obj::writeFullBytes(::haxe::io::Bytes s,Int pos,Int len){
            	HX_STACK_FRAME("haxe.io.Output","writeFullBytes",0xc2c420ea,"haxe.io.Output.writeFullBytes","/usr/lib/haxe/std/haxe/io/Output.hx",123,0xbdd9ff1c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(len,"len")
HXLINE( 123)		while((len > (int)0)){
HXLINE( 124)			Int k = this->writeBytes(s,pos,len);
HX_STACK_VAR			(k,"k");
HXLINE( 125)			hx::AddEq(pos,k);
HXLINE( 126)			hx::SubEq(len,k);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Output_obj,writeFullBytes,(void))

void Output_obj::writeFloat(Float x){
            	HX_STACK_FRAME("haxe.io.Output","writeFloat",0xee877f2a,"haxe.io.Output.writeFloat","/usr/lib/haxe/std/haxe/io/Output.hx",136,0xbdd9ff1c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 136)		Int _hx_tmp = ::haxe::io::FPHelper_obj::floatToI32(x);
HX_STACK_VAR		(_hx_tmp,"_hx_tmp");
HXDLIN( 136)		this->writeInt32(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Output_obj,writeFloat,(void))

void Output_obj::writeDouble(Float x){
            	HX_STACK_FRAME("haxe.io.Output","writeDouble",0xb97ccdc3,"haxe.io.Output.writeDouble","/usr/lib/haxe/std/haxe/io/Output.hx",144,0xbdd9ff1c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 145)		::cpp::Int64Struct i64 = ::haxe::io::FPHelper_obj::doubleToI64(x);
HX_STACK_VAR		(i64,"i64");
HXLINE( 146)		Bool _hx_tmp = this->bigEndian;
HX_STACK_VAR		(_hx_tmp,"_hx_tmp");
HXDLIN( 146)		if (_hx_tmp) {
HXLINE( 147)			Int _hx_tmp1 = _hx_int64_high(i64);
HX_STACK_VAR			(_hx_tmp1,"_hx_tmp");
HXDLIN( 147)			this->writeInt32(_hx_tmp1);
HXLINE( 148)			Int _hx_tmp2 = _hx_int64_low(i64);
HX_STACK_VAR			(_hx_tmp2,"_hx_tmp");
HXDLIN( 148)			this->writeInt32(_hx_tmp2);
            		}
            		else {
HXLINE( 150)			Int _hx_tmp3 = _hx_int64_low(i64);
HX_STACK_VAR			(_hx_tmp3,"_hx_tmp");
HXDLIN( 150)			this->writeInt32(_hx_tmp3);
HXLINE( 151)			Int _hx_tmp4 = _hx_int64_high(i64);
HX_STACK_VAR			(_hx_tmp4,"_hx_tmp");
HXDLIN( 151)			this->writeInt32(_hx_tmp4);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Output_obj,writeDouble,(void))

void Output_obj::writeInt8(Int x){
            	HX_STACK_FRAME("haxe.io.Output","writeInt8",0xb996769b,"haxe.io.Output.writeInt8","/usr/lib/haxe/std/haxe/io/Output.hx",158,0xbdd9ff1c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 159)		Bool _hx_tmp;
HX_STACK_VAR		(_hx_tmp,"_hx_tmp");
HXDLIN( 159)		if ((x >= (int)-128)) {
HXLINE( 159)			_hx_tmp = (x >= (int)128);
            		}
            		else {
HXLINE( 159)			_hx_tmp = true;
            		}
HXDLIN( 159)		if (_hx_tmp) {
HXLINE( 160)			HX_STACK_DO_THROW(::haxe::io::Error_obj::Overflow_dyn());
            		}
HXLINE( 161)		this->writeByte(((int)x & (int)(int)255));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Output_obj,writeInt8,(void))

void Output_obj::writeInt16(Int x){
            	HX_STACK_FRAME("haxe.io.Output","writeInt16",0xaa114b22,"haxe.io.Output.writeInt16","/usr/lib/haxe/std/haxe/io/Output.hx",169,0xbdd9ff1c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 170)		Bool _hx_tmp;
HX_STACK_VAR		(_hx_tmp,"_hx_tmp");
HXDLIN( 170)		if ((x >= (int)-32768)) {
HXLINE( 170)			_hx_tmp = (x >= (int)32768);
            		}
            		else {
HXLINE( 170)			_hx_tmp = true;
            		}
HXDLIN( 170)		if (_hx_tmp) {
HXLINE( 170)			HX_STACK_DO_THROW(::haxe::io::Error_obj::Overflow_dyn());
            		}
HXLINE( 171)		this->writeUInt16(((int)x & (int)(int)65535));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Output_obj,writeInt16,(void))

void Output_obj::writeUInt16(Int x){
            	HX_STACK_FRAME("haxe.io.Output","writeUInt16",0x9fc0db91,"haxe.io.Output.writeUInt16","/usr/lib/haxe/std/haxe/io/Output.hx",179,0xbdd9ff1c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 180)		Bool _hx_tmp;
HX_STACK_VAR		(_hx_tmp,"_hx_tmp");
HXDLIN( 180)		if ((x >= (int)0)) {
HXLINE( 180)			_hx_tmp = (x >= (int)65536);
            		}
            		else {
HXLINE( 180)			_hx_tmp = true;
            		}
HXDLIN( 180)		if (_hx_tmp) {
HXLINE( 180)			HX_STACK_DO_THROW(::haxe::io::Error_obj::Overflow_dyn());
            		}
HXLINE( 181)		Bool _hx_tmp1 = this->bigEndian;
HX_STACK_VAR		(_hx_tmp1,"_hx_tmp");
HXDLIN( 181)		if (_hx_tmp1) {
HXLINE( 182)			this->writeByte(((int)x >> (int)(int)8));
HXLINE( 183)			this->writeByte(((int)x & (int)(int)255));
            		}
            		else {
HXLINE( 185)			this->writeByte(((int)x & (int)(int)255));
HXLINE( 186)			this->writeByte(((int)x >> (int)(int)8));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Output_obj,writeUInt16,(void))

void Output_obj::writeInt24(Int x){
            	HX_STACK_FRAME("haxe.io.Output","writeInt24",0xaa114bff,"haxe.io.Output.writeInt24","/usr/lib/haxe/std/haxe/io/Output.hx",195,0xbdd9ff1c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 196)		Bool _hx_tmp;
HX_STACK_VAR		(_hx_tmp,"_hx_tmp");
HXDLIN( 196)		if ((x >= (int)-8388608)) {
HXLINE( 196)			_hx_tmp = (x >= (int)8388608);
            		}
            		else {
HXLINE( 196)			_hx_tmp = true;
            		}
HXDLIN( 196)		if (_hx_tmp) {
HXLINE( 196)			HX_STACK_DO_THROW(::haxe::io::Error_obj::Overflow_dyn());
            		}
HXLINE( 197)		this->writeUInt24(((int)x & (int)(int)16777215));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Output_obj,writeInt24,(void))

void Output_obj::writeUInt24(Int x){
            	HX_STACK_FRAME("haxe.io.Output","writeUInt24",0x9fc0dc6e,"haxe.io.Output.writeUInt24","/usr/lib/haxe/std/haxe/io/Output.hx",205,0xbdd9ff1c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 206)		Bool _hx_tmp;
HX_STACK_VAR		(_hx_tmp,"_hx_tmp");
HXDLIN( 206)		if ((x >= (int)0)) {
HXLINE( 206)			_hx_tmp = (x >= (int)16777216);
            		}
            		else {
HXLINE( 206)			_hx_tmp = true;
            		}
HXDLIN( 206)		if (_hx_tmp) {
HXLINE( 206)			HX_STACK_DO_THROW(::haxe::io::Error_obj::Overflow_dyn());
            		}
HXLINE( 207)		Bool _hx_tmp1 = this->bigEndian;
HX_STACK_VAR		(_hx_tmp1,"_hx_tmp");
HXDLIN( 207)		if (_hx_tmp1) {
HXLINE( 208)			this->writeByte(((int)x >> (int)(int)16));
HXLINE( 209)			this->writeByte(((int)((int)x >> (int)(int)8) & (int)(int)255));
HXLINE( 210)			this->writeByte(((int)x & (int)(int)255));
            		}
            		else {
HXLINE( 212)			this->writeByte(((int)x & (int)(int)255));
HXLINE( 213)			this->writeByte(((int)((int)x >> (int)(int)8) & (int)(int)255));
HXLINE( 214)			this->writeByte(((int)x >> (int)(int)16));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Output_obj,writeUInt24,(void))

void Output_obj::writeInt32(Int x){
            	HX_STACK_FRAME("haxe.io.Output","writeInt32",0xaa114cdc,"haxe.io.Output.writeInt32","/usr/lib/haxe/std/haxe/io/Output.hx",224,0xbdd9ff1c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 224)		Bool _hx_tmp = this->bigEndian;
HX_STACK_VAR		(_hx_tmp,"_hx_tmp");
HXDLIN( 224)		if (_hx_tmp) {
HXLINE( 225)			this->writeByte(hx::UShr(x,(int)24));
HXLINE( 226)			this->writeByte(((int)((int)x >> (int)(int)16) & (int)(int)255));
HXLINE( 227)			this->writeByte(((int)((int)x >> (int)(int)8) & (int)(int)255));
HXLINE( 228)			this->writeByte(((int)x & (int)(int)255));
            		}
            		else {
HXLINE( 230)			this->writeByte(((int)x & (int)(int)255));
HXLINE( 231)			this->writeByte(((int)((int)x >> (int)(int)8) & (int)(int)255));
HXLINE( 232)			this->writeByte(((int)((int)x >> (int)(int)16) & (int)(int)255));
HXLINE( 233)			this->writeByte(hx::UShr(x,(int)24));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Output_obj,writeInt32,(void))

void Output_obj::prepare(Int nbytes){
            	HX_STACK_FRAME("haxe.io.Output","prepare",0xcd01ec7a,"haxe.io.Output.prepare","/usr/lib/haxe/std/haxe/io/Output.hx",244,0xbdd9ff1c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(nbytes,"nbytes")
            	}


HX_DEFINE_DYNAMIC_FUNC1(Output_obj,prepare,(void))

void Output_obj::writeInput(::haxe::io::Input i, ::Dynamic bufsize){
            	HX_STACK_FRAME("haxe.io.Output","writeInput",0xaa0e7d98,"haxe.io.Output.writeInput","/usr/lib/haxe/std/haxe/io/Output.hx",253,0xbdd9ff1c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
            	HX_STACK_ARG(bufsize,"bufsize")
HXLINE( 254)		Bool _hx_tmp = hx::IsNull( bufsize );
HX_STACK_VAR		(_hx_tmp,"_hx_tmp");
HXDLIN( 254)		if (_hx_tmp) {
HXLINE( 255)			bufsize = (int)4096;
            		}
HXLINE( 256)		::haxe::io::Bytes buf = ::haxe::io::Bytes_obj::alloc(bufsize);
HX_STACK_VAR		(buf,"buf");
HXLINE( 258)		try {
            			HX_STACK_CATCHABLE(::haxe::io::Eof, 0);
HXLINE( 258)			while(true){
HXLINE( 259)				Int len = i->readBytes(buf,(int)0,bufsize);
HX_STACK_VAR				(len,"len");
HXLINE( 260)				if ((len == (int)0)) {
HXLINE( 261)					HX_STACK_DO_THROW(::haxe::io::Error_obj::Blocked_dyn());
            				}
HXLINE( 262)				Int p = (int)0;
HX_STACK_VAR				(p,"p");
HXLINE( 263)				while((len > (int)0)){
HXLINE( 264)					Int k = this->writeBytes(buf,p,len);
HX_STACK_VAR					(k,"k");
HXLINE( 265)					if ((k == (int)0)) {
HXLINE( 266)						HX_STACK_DO_THROW(::haxe::io::Error_obj::Blocked_dyn());
            					}
HXLINE( 267)					hx::AddEq(p,k);
HXLINE( 268)					hx::SubEq(len,k);
            				}
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass< ::haxe::io::Eof >() ){
            				HX_STACK_BEGIN_CATCH
            				::haxe::io::Eof e = _hx_e;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Output_obj,writeInput,(void))

void Output_obj::writeString(::String s){
            	HX_STACK_FRAME("haxe.io.Output","writeString",0x97e1cb83,"haxe.io.Output.writeString","/usr/lib/haxe/std/haxe/io/Output.hx",278,0xbdd9ff1c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s,"s")
HXLINE( 282)		::haxe::io::Bytes b = ::haxe::io::Bytes_obj::ofString(s);
HX_STACK_VAR		(b,"b");
HXLINE( 284)		this->writeFullBytes(b,(int)0,b->length);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Output_obj,writeString,(void))


Output_obj::Output_obj()
{
}

hx::Val Output_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"flush") ) { return hx::Val( flush_dyn()); }
		if (HX_FIELD_EQ(inName,"close") ) { return hx::Val( close_dyn()); }
		if (HX_FIELD_EQ(inName,"write") ) { return hx::Val( write_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"prepare") ) { return hx::Val( prepare_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"bigEndian") ) { return hx::Val( bigEndian); }
		if (HX_FIELD_EQ(inName,"writeByte") ) { return hx::Val( writeByte_dyn()); }
		if (HX_FIELD_EQ(inName,"writeInt8") ) { return hx::Val( writeInt8_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"writeBytes") ) { return hx::Val( writeBytes_dyn()); }
		if (HX_FIELD_EQ(inName,"writeFloat") ) { return hx::Val( writeFloat_dyn()); }
		if (HX_FIELD_EQ(inName,"writeInt16") ) { return hx::Val( writeInt16_dyn()); }
		if (HX_FIELD_EQ(inName,"writeInt24") ) { return hx::Val( writeInt24_dyn()); }
		if (HX_FIELD_EQ(inName,"writeInt32") ) { return hx::Val( writeInt32_dyn()); }
		if (HX_FIELD_EQ(inName,"writeInput") ) { return hx::Val( writeInput_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"writeDouble") ) { return hx::Val( writeDouble_dyn()); }
		if (HX_FIELD_EQ(inName,"writeUInt16") ) { return hx::Val( writeUInt16_dyn()); }
		if (HX_FIELD_EQ(inName,"writeUInt24") ) { return hx::Val( writeUInt24_dyn()); }
		if (HX_FIELD_EQ(inName,"writeString") ) { return hx::Val( writeString_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"set_bigEndian") ) { return hx::Val( set_bigEndian_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"writeFullBytes") ) { return hx::Val( writeFullBytes_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Output_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"bigEndian") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_bigEndian(inValue) );bigEndian=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Output_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("bigEndian","\x7b","\xd5","\x5a","\x20"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Output_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(Output_obj,bigEndian),HX_HCSTRING("bigEndian","\x7b","\xd5","\x5a","\x20")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Output_obj_sStaticStorageInfo = 0;
#endif

static ::String Output_obj_sMemberFields[] = {
	HX_HCSTRING("bigEndian","\x7b","\xd5","\x5a","\x20"),
	HX_HCSTRING("writeByte","\x87","\x13","\xd7","\x49"),
	HX_HCSTRING("writeBytes","\x0c","\x03","\x5a","\x52"),
	HX_HCSTRING("flush","\xc4","\x62","\x9b","\x02"),
	HX_HCSTRING("close","\xb8","\x17","\x63","\x48"),
	HX_HCSTRING("set_bigEndian","\x5e","\x8b","\xc4","\x26"),
	HX_HCSTRING("write","\xdf","\x6c","\x59","\xd0"),
	HX_HCSTRING("writeFullBytes","\x7d","\xe7","\x66","\xa4"),
	HX_HCSTRING("writeFloat","\x3d","\xc0","\x58","\x97"),
	HX_HCSTRING("writeDouble","\x50","\x7d","\xc4","\xc7"),
	HX_HCSTRING("writeInt8","\xe8","\x38","\x6f","\x4e"),
	HX_HCSTRING("writeInt16","\x35","\x8c","\xe2","\x52"),
	HX_HCSTRING("writeUInt16","\x1e","\x8b","\x08","\xae"),
	HX_HCSTRING("writeInt24","\x12","\x8d","\xe2","\x52"),
	HX_HCSTRING("writeUInt24","\xfb","\x8b","\x08","\xae"),
	HX_HCSTRING("writeInt32","\xef","\x8d","\xe2","\x52"),
	HX_HCSTRING("prepare","\x87","\x91","\xdd","\x37"),
	HX_HCSTRING("writeInput","\xab","\xbe","\xdf","\x52"),
	HX_HCSTRING("writeString","\x10","\x7b","\x29","\xa6"),
	::String(null()) };

static void Output_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Output_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Output_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Output_obj::__mClass,"__mClass");
};

#endif

hx::Class Output_obj::__mClass;

void Output_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxe.io.Output","\x61","\x10","\x0b","\xc7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Output_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Output_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Output_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Output_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Output_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Output_obj_sStaticStorageInfo;
#endif
	hx::RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace io
