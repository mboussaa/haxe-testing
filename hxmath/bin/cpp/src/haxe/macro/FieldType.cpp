// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_macro_ComplexType
#include <haxe/macro/ComplexType.h>
#endif
#ifndef INCLUDED_haxe_macro_FieldType
#include <haxe/macro/FieldType.h>
#endif
namespace haxe{
namespace macro{

::haxe::macro::FieldType FieldType_obj::FFun( ::Dynamic f)
{
	return hx::CreateEnum< FieldType_obj >(HX_("FFun",99,73,7a,2e),1,1)->_hx_init(0,f);
}

::haxe::macro::FieldType FieldType_obj::FProp(::String get,::String set,::hx::EnumBase t, ::Dynamic e)
{
	return hx::CreateEnum< FieldType_obj >(HX_("FProp",09,8f,44,83),2,4)->_hx_init(0,get)->_hx_init(1,set)->_hx_init(2,t)->_hx_init(3,e);
}

::haxe::macro::FieldType FieldType_obj::FVar(::hx::EnumBase t, ::Dynamic e)
{
	return hx::CreateEnum< FieldType_obj >(HX_("FVar",41,86,86,2e),0,2)->_hx_init(0,t)->_hx_init(1,e);
}

bool FieldType_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	if (inName==HX_("FFun",99,73,7a,2e)) { outValue = FieldType_obj::FFun_dyn(); return true; }
	if (inName==HX_("FProp",09,8f,44,83)) { outValue = FieldType_obj::FProp_dyn(); return true; }
	if (inName==HX_("FVar",41,86,86,2e)) { outValue = FieldType_obj::FVar_dyn(); return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(FieldType_obj)

int FieldType_obj::__FindIndex(::String inName)
{
	if (inName==HX_("FFun",99,73,7a,2e)) return 1;
	if (inName==HX_("FProp",09,8f,44,83)) return 2;
	if (inName==HX_("FVar",41,86,86,2e)) return 0;
	return super::__FindIndex(inName);
}

STATIC_HX_DEFINE_DYNAMIC_FUNC1(FieldType_obj,FFun,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC4(FieldType_obj,FProp,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC2(FieldType_obj,FVar,return)

int FieldType_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("FFun",99,73,7a,2e)) return 1;
	if (inName==HX_("FProp",09,8f,44,83)) return 4;
	if (inName==HX_("FVar",41,86,86,2e)) return 2;
	return super::__FindArgCount(inName);
}

hx::Val FieldType_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	if (inName==HX_("FFun",99,73,7a,2e)) return FFun_dyn();
	if (inName==HX_("FProp",09,8f,44,83)) return FProp_dyn();
	if (inName==HX_("FVar",41,86,86,2e)) return FVar_dyn();
	return super::__Field(inName,inCallProp);
}

static ::String FieldType_obj_sStaticFields[] = {
	HX_("FVar",41,86,86,2e),
	HX_("FFun",99,73,7a,2e),
	HX_("FProp",09,8f,44,83),
	::String(null())
};

static void FieldType_obj_sMarkStatics(HX_MARK_PARAMS) {
};

#ifdef HXCPP_VISIT_ALLOCS
static void FieldType_obj_sVisitStatic(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FieldType_obj::__mClass,"__mClass");
};
#endif

hx::Class FieldType_obj::__mClass;

Dynamic __Create_FieldType_obj() { return new FieldType_obj; }

void FieldType_obj::__register()
{

hx::Static(__mClass) = hx::_hx_RegisterClass(HX_HCSTRING("haxe.macro.FieldType","\x4a","\x3d","\x04","\xfe"), hx::TCanCast< FieldType_obj >,FieldType_obj_sStaticFields,0,
	&__Create_FieldType_obj, &__Create,
	&super::__SGetClass(), &CreateFieldType_obj, FieldType_obj_sMarkStatics
#ifdef HXCPP_VISIT_ALLOCS
    , FieldType_obj_sVisitStatic
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &FieldType_obj::__GetStatic;
}

void FieldType_obj::__boot()
{
}


} // end namespace haxe
} // end namespace macro
