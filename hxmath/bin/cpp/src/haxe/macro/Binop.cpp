// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_macro_Binop
#include <haxe/macro/Binop.h>
#endif
namespace haxe{
namespace macro{

::haxe::macro::Binop Binop_obj::OpAdd;

::haxe::macro::Binop Binop_obj::OpAnd;

::haxe::macro::Binop Binop_obj::OpArrow;

::haxe::macro::Binop Binop_obj::OpAssign;

::haxe::macro::Binop Binop_obj::OpAssignOp(::hx::EnumBase op)
{
	return hx::CreateEnum< Binop_obj >(HX_("OpAssignOp",91,5f,12,89),20,1)->_hx_init(0,op);
}

::haxe::macro::Binop Binop_obj::OpBoolAnd;

::haxe::macro::Binop Binop_obj::OpBoolOr;

::haxe::macro::Binop Binop_obj::OpDiv;

::haxe::macro::Binop Binop_obj::OpEq;

::haxe::macro::Binop Binop_obj::OpGt;

::haxe::macro::Binop Binop_obj::OpGte;

::haxe::macro::Binop Binop_obj::OpInterval;

::haxe::macro::Binop Binop_obj::OpLt;

::haxe::macro::Binop Binop_obj::OpLte;

::haxe::macro::Binop Binop_obj::OpMod;

::haxe::macro::Binop Binop_obj::OpMult;

::haxe::macro::Binop Binop_obj::OpNotEq;

::haxe::macro::Binop Binop_obj::OpOr;

::haxe::macro::Binop Binop_obj::OpShl;

::haxe::macro::Binop Binop_obj::OpShr;

::haxe::macro::Binop Binop_obj::OpSub;

::haxe::macro::Binop Binop_obj::OpUShr;

::haxe::macro::Binop Binop_obj::OpXor;

bool Binop_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	if (inName==HX_("OpAdd",60,63,e1,c6)) { outValue = Binop_obj::OpAdd; return true; }
	if (inName==HX_("OpAnd",16,6c,e1,c6)) { outValue = Binop_obj::OpAnd; return true; }
	if (inName==HX_("OpArrow",c8,f8,d4,55)) { outValue = Binop_obj::OpArrow; return true; }
	if (inName==HX_("OpAssign",50,e6,8f,58)) { outValue = Binop_obj::OpAssign; return true; }
	if (inName==HX_("OpAssignOp",91,5f,12,89)) { outValue = Binop_obj::OpAssignOp_dyn(); return true; }
	if (inName==HX_("OpBoolAnd",8c,21,c6,69)) { outValue = Binop_obj::OpBoolAnd; return true; }
	if (inName==HX_("OpBoolOr",0e,48,ae,6e)) { outValue = Binop_obj::OpBoolOr; return true; }
	if (inName==HX_("OpDiv",90,ae,e3,c6)) { outValue = Binop_obj::OpDiv; return true; }
	if (inName==HX_("OpEq",0d,14,8d,34)) { outValue = Binop_obj::OpEq; return true; }
	if (inName==HX_("OpGt",ce,15,8d,34)) { outValue = Binop_obj::OpGt; return true; }
	if (inName==HX_("OpGte",d7,fe,e5,c6)) { outValue = Binop_obj::OpGte; return true; }
	if (inName==HX_("OpInterval",a6,23,c7,a2)) { outValue = Binop_obj::OpInterval; return true; }
	if (inName==HX_("OpLt",29,1a,8d,34)) { outValue = Binop_obj::OpLt; return true; }
	if (inName==HX_("OpLte",1c,ca,e9,c6)) { outValue = Binop_obj::OpLte; return true; }
	if (inName==HX_("OpMod",01,88,ea,c6)) { outValue = Binop_obj::OpMod; return true; }
	if (inName==HX_("OpMult",d1,0d,51,46)) { outValue = Binop_obj::OpMult; return true; }
	if (inName==HX_("OpNotEq",5e,3f,10,d0)) { outValue = Binop_obj::OpNotEq; return true; }
	if (inName==HX_("OpOr",c4,1c,8d,34)) { outValue = Binop_obj::OpOr; return true; }
	if (inName==HX_("OpShl",76,0f,ef,c6)) { outValue = Binop_obj::OpShl; return true; }
	if (inName==HX_("OpShr",7c,0f,ef,c6)) { outValue = Binop_obj::OpShr; return true; }
	if (inName==HX_("OpSub",bf,1a,ef,c6)) { outValue = Binop_obj::OpSub; return true; }
	if (inName==HX_("OpUShr",a9,f2,80,4b)) { outValue = Binop_obj::OpUShr; return true; }
	if (inName==HX_("OpXor",da,e0,f2,c6)) { outValue = Binop_obj::OpXor; return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(Binop_obj)

int Binop_obj::__FindIndex(::String inName)
{
	if (inName==HX_("OpAdd",60,63,e1,c6)) return 0;
	if (inName==HX_("OpAnd",16,6c,e1,c6)) return 11;
	if (inName==HX_("OpArrow",c8,f8,d4,55)) return 22;
	if (inName==HX_("OpAssign",50,e6,8f,58)) return 4;
	if (inName==HX_("OpAssignOp",91,5f,12,89)) return 20;
	if (inName==HX_("OpBoolAnd",8c,21,c6,69)) return 14;
	if (inName==HX_("OpBoolOr",0e,48,ae,6e)) return 15;
	if (inName==HX_("OpDiv",90,ae,e3,c6)) return 2;
	if (inName==HX_("OpEq",0d,14,8d,34)) return 5;
	if (inName==HX_("OpGt",ce,15,8d,34)) return 7;
	if (inName==HX_("OpGte",d7,fe,e5,c6)) return 8;
	if (inName==HX_("OpInterval",a6,23,c7,a2)) return 21;
	if (inName==HX_("OpLt",29,1a,8d,34)) return 9;
	if (inName==HX_("OpLte",1c,ca,e9,c6)) return 10;
	if (inName==HX_("OpMod",01,88,ea,c6)) return 19;
	if (inName==HX_("OpMult",d1,0d,51,46)) return 1;
	if (inName==HX_("OpNotEq",5e,3f,10,d0)) return 6;
	if (inName==HX_("OpOr",c4,1c,8d,34)) return 12;
	if (inName==HX_("OpShl",76,0f,ef,c6)) return 16;
	if (inName==HX_("OpShr",7c,0f,ef,c6)) return 17;
	if (inName==HX_("OpSub",bf,1a,ef,c6)) return 3;
	if (inName==HX_("OpUShr",a9,f2,80,4b)) return 18;
	if (inName==HX_("OpXor",da,e0,f2,c6)) return 13;
	return super::__FindIndex(inName);
}

STATIC_HX_DEFINE_DYNAMIC_FUNC1(Binop_obj,OpAssignOp,return)

int Binop_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("OpAdd",60,63,e1,c6)) return 0;
	if (inName==HX_("OpAnd",16,6c,e1,c6)) return 0;
	if (inName==HX_("OpArrow",c8,f8,d4,55)) return 0;
	if (inName==HX_("OpAssign",50,e6,8f,58)) return 0;
	if (inName==HX_("OpAssignOp",91,5f,12,89)) return 1;
	if (inName==HX_("OpBoolAnd",8c,21,c6,69)) return 0;
	if (inName==HX_("OpBoolOr",0e,48,ae,6e)) return 0;
	if (inName==HX_("OpDiv",90,ae,e3,c6)) return 0;
	if (inName==HX_("OpEq",0d,14,8d,34)) return 0;
	if (inName==HX_("OpGt",ce,15,8d,34)) return 0;
	if (inName==HX_("OpGte",d7,fe,e5,c6)) return 0;
	if (inName==HX_("OpInterval",a6,23,c7,a2)) return 0;
	if (inName==HX_("OpLt",29,1a,8d,34)) return 0;
	if (inName==HX_("OpLte",1c,ca,e9,c6)) return 0;
	if (inName==HX_("OpMod",01,88,ea,c6)) return 0;
	if (inName==HX_("OpMult",d1,0d,51,46)) return 0;
	if (inName==HX_("OpNotEq",5e,3f,10,d0)) return 0;
	if (inName==HX_("OpOr",c4,1c,8d,34)) return 0;
	if (inName==HX_("OpShl",76,0f,ef,c6)) return 0;
	if (inName==HX_("OpShr",7c,0f,ef,c6)) return 0;
	if (inName==HX_("OpSub",bf,1a,ef,c6)) return 0;
	if (inName==HX_("OpUShr",a9,f2,80,4b)) return 0;
	if (inName==HX_("OpXor",da,e0,f2,c6)) return 0;
	return super::__FindArgCount(inName);
}

hx::Val Binop_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	if (inName==HX_("OpAdd",60,63,e1,c6)) return OpAdd;
	if (inName==HX_("OpAnd",16,6c,e1,c6)) return OpAnd;
	if (inName==HX_("OpArrow",c8,f8,d4,55)) return OpArrow;
	if (inName==HX_("OpAssign",50,e6,8f,58)) return OpAssign;
	if (inName==HX_("OpAssignOp",91,5f,12,89)) return OpAssignOp_dyn();
	if (inName==HX_("OpBoolAnd",8c,21,c6,69)) return OpBoolAnd;
	if (inName==HX_("OpBoolOr",0e,48,ae,6e)) return OpBoolOr;
	if (inName==HX_("OpDiv",90,ae,e3,c6)) return OpDiv;
	if (inName==HX_("OpEq",0d,14,8d,34)) return OpEq;
	if (inName==HX_("OpGt",ce,15,8d,34)) return OpGt;
	if (inName==HX_("OpGte",d7,fe,e5,c6)) return OpGte;
	if (inName==HX_("OpInterval",a6,23,c7,a2)) return OpInterval;
	if (inName==HX_("OpLt",29,1a,8d,34)) return OpLt;
	if (inName==HX_("OpLte",1c,ca,e9,c6)) return OpLte;
	if (inName==HX_("OpMod",01,88,ea,c6)) return OpMod;
	if (inName==HX_("OpMult",d1,0d,51,46)) return OpMult;
	if (inName==HX_("OpNotEq",5e,3f,10,d0)) return OpNotEq;
	if (inName==HX_("OpOr",c4,1c,8d,34)) return OpOr;
	if (inName==HX_("OpShl",76,0f,ef,c6)) return OpShl;
	if (inName==HX_("OpShr",7c,0f,ef,c6)) return OpShr;
	if (inName==HX_("OpSub",bf,1a,ef,c6)) return OpSub;
	if (inName==HX_("OpUShr",a9,f2,80,4b)) return OpUShr;
	if (inName==HX_("OpXor",da,e0,f2,c6)) return OpXor;
	return super::__Field(inName,inCallProp);
}

static ::String Binop_obj_sStaticFields[] = {
	HX_("OpAdd",60,63,e1,c6),
	HX_("OpMult",d1,0d,51,46),
	HX_("OpDiv",90,ae,e3,c6),
	HX_("OpSub",bf,1a,ef,c6),
	HX_("OpAssign",50,e6,8f,58),
	HX_("OpEq",0d,14,8d,34),
	HX_("OpNotEq",5e,3f,10,d0),
	HX_("OpGt",ce,15,8d,34),
	HX_("OpGte",d7,fe,e5,c6),
	HX_("OpLt",29,1a,8d,34),
	HX_("OpLte",1c,ca,e9,c6),
	HX_("OpAnd",16,6c,e1,c6),
	HX_("OpOr",c4,1c,8d,34),
	HX_("OpXor",da,e0,f2,c6),
	HX_("OpBoolAnd",8c,21,c6,69),
	HX_("OpBoolOr",0e,48,ae,6e),
	HX_("OpShl",76,0f,ef,c6),
	HX_("OpShr",7c,0f,ef,c6),
	HX_("OpUShr",a9,f2,80,4b),
	HX_("OpMod",01,88,ea,c6),
	HX_("OpAssignOp",91,5f,12,89),
	HX_("OpInterval",a6,23,c7,a2),
	HX_("OpArrow",c8,f8,d4,55),
	::String(null())
};

static void Binop_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Binop_obj::OpAdd,"OpAdd");
	HX_MARK_MEMBER_NAME(Binop_obj::OpAnd,"OpAnd");
	HX_MARK_MEMBER_NAME(Binop_obj::OpArrow,"OpArrow");
	HX_MARK_MEMBER_NAME(Binop_obj::OpAssign,"OpAssign");
	HX_MARK_MEMBER_NAME(Binop_obj::OpBoolAnd,"OpBoolAnd");
	HX_MARK_MEMBER_NAME(Binop_obj::OpBoolOr,"OpBoolOr");
	HX_MARK_MEMBER_NAME(Binop_obj::OpDiv,"OpDiv");
	HX_MARK_MEMBER_NAME(Binop_obj::OpEq,"OpEq");
	HX_MARK_MEMBER_NAME(Binop_obj::OpGt,"OpGt");
	HX_MARK_MEMBER_NAME(Binop_obj::OpGte,"OpGte");
	HX_MARK_MEMBER_NAME(Binop_obj::OpInterval,"OpInterval");
	HX_MARK_MEMBER_NAME(Binop_obj::OpLt,"OpLt");
	HX_MARK_MEMBER_NAME(Binop_obj::OpLte,"OpLte");
	HX_MARK_MEMBER_NAME(Binop_obj::OpMod,"OpMod");
	HX_MARK_MEMBER_NAME(Binop_obj::OpMult,"OpMult");
	HX_MARK_MEMBER_NAME(Binop_obj::OpNotEq,"OpNotEq");
	HX_MARK_MEMBER_NAME(Binop_obj::OpOr,"OpOr");
	HX_MARK_MEMBER_NAME(Binop_obj::OpShl,"OpShl");
	HX_MARK_MEMBER_NAME(Binop_obj::OpShr,"OpShr");
	HX_MARK_MEMBER_NAME(Binop_obj::OpSub,"OpSub");
	HX_MARK_MEMBER_NAME(Binop_obj::OpUShr,"OpUShr");
	HX_MARK_MEMBER_NAME(Binop_obj::OpXor,"OpXor");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Binop_obj_sVisitStatic(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Binop_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Binop_obj::OpAdd,"OpAdd");
	HX_VISIT_MEMBER_NAME(Binop_obj::OpAnd,"OpAnd");
	HX_VISIT_MEMBER_NAME(Binop_obj::OpArrow,"OpArrow");
	HX_VISIT_MEMBER_NAME(Binop_obj::OpAssign,"OpAssign");
	HX_VISIT_MEMBER_NAME(Binop_obj::OpBoolAnd,"OpBoolAnd");
	HX_VISIT_MEMBER_NAME(Binop_obj::OpBoolOr,"OpBoolOr");
	HX_VISIT_MEMBER_NAME(Binop_obj::OpDiv,"OpDiv");
	HX_VISIT_MEMBER_NAME(Binop_obj::OpEq,"OpEq");
	HX_VISIT_MEMBER_NAME(Binop_obj::OpGt,"OpGt");
	HX_VISIT_MEMBER_NAME(Binop_obj::OpGte,"OpGte");
	HX_VISIT_MEMBER_NAME(Binop_obj::OpInterval,"OpInterval");
	HX_VISIT_MEMBER_NAME(Binop_obj::OpLt,"OpLt");
	HX_VISIT_MEMBER_NAME(Binop_obj::OpLte,"OpLte");
	HX_VISIT_MEMBER_NAME(Binop_obj::OpMod,"OpMod");
	HX_VISIT_MEMBER_NAME(Binop_obj::OpMult,"OpMult");
	HX_VISIT_MEMBER_NAME(Binop_obj::OpNotEq,"OpNotEq");
	HX_VISIT_MEMBER_NAME(Binop_obj::OpOr,"OpOr");
	HX_VISIT_MEMBER_NAME(Binop_obj::OpShl,"OpShl");
	HX_VISIT_MEMBER_NAME(Binop_obj::OpShr,"OpShr");
	HX_VISIT_MEMBER_NAME(Binop_obj::OpSub,"OpSub");
	HX_VISIT_MEMBER_NAME(Binop_obj::OpUShr,"OpUShr");
	HX_VISIT_MEMBER_NAME(Binop_obj::OpXor,"OpXor");
};
#endif

hx::Class Binop_obj::__mClass;

Dynamic __Create_Binop_obj() { return new Binop_obj; }

void Binop_obj::__register()
{

hx::Static(__mClass) = hx::_hx_RegisterClass(HX_HCSTRING("haxe.macro.Binop","\x5e","\xab","\xa2","\x6e"), hx::TCanCast< Binop_obj >,Binop_obj_sStaticFields,0,
	&__Create_Binop_obj, &__Create,
	&super::__SGetClass(), &CreateBinop_obj, Binop_obj_sMarkStatics
#ifdef HXCPP_VISIT_ALLOCS
    , Binop_obj_sVisitStatic
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &Binop_obj::__GetStatic;
}

void Binop_obj::__boot()
{
OpAdd = hx::CreateEnum< Binop_obj >(HX_HCSTRING("OpAdd","\x60","\x63","\xe1","\xc6"),0,0);
OpAnd = hx::CreateEnum< Binop_obj >(HX_HCSTRING("OpAnd","\x16","\x6c","\xe1","\xc6"),11,0);
OpArrow = hx::CreateEnum< Binop_obj >(HX_HCSTRING("OpArrow","\xc8","\xf8","\xd4","\x55"),22,0);
OpAssign = hx::CreateEnum< Binop_obj >(HX_HCSTRING("OpAssign","\x50","\xe6","\x8f","\x58"),4,0);
OpBoolAnd = hx::CreateEnum< Binop_obj >(HX_HCSTRING("OpBoolAnd","\x8c","\x21","\xc6","\x69"),14,0);
OpBoolOr = hx::CreateEnum< Binop_obj >(HX_HCSTRING("OpBoolOr","\x0e","\x48","\xae","\x6e"),15,0);
OpDiv = hx::CreateEnum< Binop_obj >(HX_HCSTRING("OpDiv","\x90","\xae","\xe3","\xc6"),2,0);
OpEq = hx::CreateEnum< Binop_obj >(HX_HCSTRING("OpEq","\x0d","\x14","\x8d","\x34"),5,0);
OpGt = hx::CreateEnum< Binop_obj >(HX_HCSTRING("OpGt","\xce","\x15","\x8d","\x34"),7,0);
OpGte = hx::CreateEnum< Binop_obj >(HX_HCSTRING("OpGte","\xd7","\xfe","\xe5","\xc6"),8,0);
OpInterval = hx::CreateEnum< Binop_obj >(HX_HCSTRING("OpInterval","\xa6","\x23","\xc7","\xa2"),21,0);
OpLt = hx::CreateEnum< Binop_obj >(HX_HCSTRING("OpLt","\x29","\x1a","\x8d","\x34"),9,0);
OpLte = hx::CreateEnum< Binop_obj >(HX_HCSTRING("OpLte","\x1c","\xca","\xe9","\xc6"),10,0);
OpMod = hx::CreateEnum< Binop_obj >(HX_HCSTRING("OpMod","\x01","\x88","\xea","\xc6"),19,0);
OpMult = hx::CreateEnum< Binop_obj >(HX_HCSTRING("OpMult","\xd1","\x0d","\x51","\x46"),1,0);
OpNotEq = hx::CreateEnum< Binop_obj >(HX_HCSTRING("OpNotEq","\x5e","\x3f","\x10","\xd0"),6,0);
OpOr = hx::CreateEnum< Binop_obj >(HX_HCSTRING("OpOr","\xc4","\x1c","\x8d","\x34"),12,0);
OpShl = hx::CreateEnum< Binop_obj >(HX_HCSTRING("OpShl","\x76","\x0f","\xef","\xc6"),16,0);
OpShr = hx::CreateEnum< Binop_obj >(HX_HCSTRING("OpShr","\x7c","\x0f","\xef","\xc6"),17,0);
OpSub = hx::CreateEnum< Binop_obj >(HX_HCSTRING("OpSub","\xbf","\x1a","\xef","\xc6"),3,0);
OpUShr = hx::CreateEnum< Binop_obj >(HX_HCSTRING("OpUShr","\xa9","\xf2","\x80","\x4b"),18,0);
OpXor = hx::CreateEnum< Binop_obj >(HX_HCSTRING("OpXor","\xda","\xe0","\xf2","\xc6"),13,0);
}


} // end namespace haxe
} // end namespace macro
