// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_macro_Unop
#include <haxe/macro/Unop.h>
#endif
namespace haxe{
namespace macro{

::haxe::macro::Unop Unop_obj::OpDecrement;

::haxe::macro::Unop Unop_obj::OpIncrement;

::haxe::macro::Unop Unop_obj::OpNeg;

::haxe::macro::Unop Unop_obj::OpNegBits;

::haxe::macro::Unop Unop_obj::OpNot;

bool Unop_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	if (inName==HX_("OpDecrement",92,60,8c,97)) { outValue = Unop_obj::OpDecrement; return true; }
	if (inName==HX_("OpIncrement",ae,70,09,b9)) { outValue = Unop_obj::OpIncrement; return true; }
	if (inName==HX_("OpNeg",8f,41,eb,c6)) { outValue = Unop_obj::OpNeg; return true; }
	if (inName==HX_("OpNegBits",35,dc,5c,a6)) { outValue = Unop_obj::OpNegBits; return true; }
	if (inName==HX_("OpNot",52,4a,eb,c6)) { outValue = Unop_obj::OpNot; return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(Unop_obj)

int Unop_obj::__FindIndex(::String inName)
{
	if (inName==HX_("OpDecrement",92,60,8c,97)) return 1;
	if (inName==HX_("OpIncrement",ae,70,09,b9)) return 0;
	if (inName==HX_("OpNeg",8f,41,eb,c6)) return 3;
	if (inName==HX_("OpNegBits",35,dc,5c,a6)) return 4;
	if (inName==HX_("OpNot",52,4a,eb,c6)) return 2;
	return super::__FindIndex(inName);
}

int Unop_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("OpDecrement",92,60,8c,97)) return 0;
	if (inName==HX_("OpIncrement",ae,70,09,b9)) return 0;
	if (inName==HX_("OpNeg",8f,41,eb,c6)) return 0;
	if (inName==HX_("OpNegBits",35,dc,5c,a6)) return 0;
	if (inName==HX_("OpNot",52,4a,eb,c6)) return 0;
	return super::__FindArgCount(inName);
}

hx::Val Unop_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	if (inName==HX_("OpDecrement",92,60,8c,97)) return OpDecrement;
	if (inName==HX_("OpIncrement",ae,70,09,b9)) return OpIncrement;
	if (inName==HX_("OpNeg",8f,41,eb,c6)) return OpNeg;
	if (inName==HX_("OpNegBits",35,dc,5c,a6)) return OpNegBits;
	if (inName==HX_("OpNot",52,4a,eb,c6)) return OpNot;
	return super::__Field(inName,inCallProp);
}

static ::String Unop_obj_sStaticFields[] = {
	HX_("OpIncrement",ae,70,09,b9),
	HX_("OpDecrement",92,60,8c,97),
	HX_("OpNot",52,4a,eb,c6),
	HX_("OpNeg",8f,41,eb,c6),
	HX_("OpNegBits",35,dc,5c,a6),
	::String(null())
};

static void Unop_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Unop_obj::OpDecrement,"OpDecrement");
	HX_MARK_MEMBER_NAME(Unop_obj::OpIncrement,"OpIncrement");
	HX_MARK_MEMBER_NAME(Unop_obj::OpNeg,"OpNeg");
	HX_MARK_MEMBER_NAME(Unop_obj::OpNegBits,"OpNegBits");
	HX_MARK_MEMBER_NAME(Unop_obj::OpNot,"OpNot");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Unop_obj_sVisitStatic(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Unop_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Unop_obj::OpDecrement,"OpDecrement");
	HX_VISIT_MEMBER_NAME(Unop_obj::OpIncrement,"OpIncrement");
	HX_VISIT_MEMBER_NAME(Unop_obj::OpNeg,"OpNeg");
	HX_VISIT_MEMBER_NAME(Unop_obj::OpNegBits,"OpNegBits");
	HX_VISIT_MEMBER_NAME(Unop_obj::OpNot,"OpNot");
};
#endif

hx::Class Unop_obj::__mClass;

Dynamic __Create_Unop_obj() { return new Unop_obj; }

void Unop_obj::__register()
{

hx::Static(__mClass) = hx::_hx_RegisterClass(HX_HCSTRING("haxe.macro.Unop","\xc4","\x66","\x6b","\x9b"), hx::TCanCast< Unop_obj >,Unop_obj_sStaticFields,0,
	&__Create_Unop_obj, &__Create,
	&super::__SGetClass(), &CreateUnop_obj, Unop_obj_sMarkStatics
#ifdef HXCPP_VISIT_ALLOCS
    , Unop_obj_sVisitStatic
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &Unop_obj::__GetStatic;
}

void Unop_obj::__boot()
{
OpDecrement = hx::CreateEnum< Unop_obj >(HX_HCSTRING("OpDecrement","\x92","\x60","\x8c","\x97"),1,0);
OpIncrement = hx::CreateEnum< Unop_obj >(HX_HCSTRING("OpIncrement","\xae","\x70","\x09","\xb9"),0,0);
OpNeg = hx::CreateEnum< Unop_obj >(HX_HCSTRING("OpNeg","\x8f","\x41","\xeb","\xc6"),3,0);
OpNegBits = hx::CreateEnum< Unop_obj >(HX_HCSTRING("OpNegBits","\x35","\xdc","\x5c","\xa6"),4,0);
OpNot = hx::CreateEnum< Unop_obj >(HX_HCSTRING("OpNot","\x52","\x4a","\xeb","\xc6"),2,0);
}


} // end namespace haxe
} // end namespace macro
