// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds__HashMap_HashMapData
#include <haxe/ds/_HashMap/HashMapData.h>
#endif
#ifndef INCLUDED_haxe_ds__HashMap_HashMap_Impl_
#include <haxe/ds/_HashMap/HashMap_Impl_.h>
#endif

namespace haxe{
namespace ds{
namespace _HashMap{

void HashMap_Impl__obj::__construct() { }

Dynamic HashMap_Impl__obj::__CreateEmpty() { return new HashMap_Impl__obj; }

hx::ObjectPtr< HashMap_Impl__obj > HashMap_Impl__obj::__new()
{
	hx::ObjectPtr< HashMap_Impl__obj > _hx_result = new HashMap_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic HashMap_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< HashMap_Impl__obj > _hx_result = new HashMap_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::haxe::ds::_HashMap::HashMapData HashMap_Impl__obj::_new(){
            	HX_STACK_FRAME("haxe.ds._HashMap.HashMap_Impl_","_new",0x2a77b589,"haxe.ds._HashMap.HashMap_Impl_._new","/usr/lib/haxe/std/haxe/ds/HashMap.hx",35,0x04ed6968)
HXLINE(  35)		return  ::haxe::ds::_HashMap::HashMapData_obj::__new();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(HashMap_Impl__obj,_new,return )

void HashMap_Impl__obj::set( ::haxe::ds::_HashMap::HashMapData this1, ::Dynamic k, ::Dynamic v){
            	HX_STACK_FRAME("haxe.ds._HashMap.HashMap_Impl_","set",0x5f88387a,"haxe.ds._HashMap.HashMap_Impl_.set","/usr/lib/haxe/std/haxe/ds/HashMap.hx",42,0x04ed6968)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(k,"k")
            	HX_STACK_ARG(v,"v")
HXLINE(  43)		Int _hx_tmp = ( (Int)( ::Dynamic(k->__Field(HX_("hashCode",1b,0c,75,07),hx::paccDynamic))()) );
HXDLIN(  43)		this1->keys->set(_hx_tmp,k);
HXLINE(  44)		Int _hx_tmp1 = ( (Int)( ::Dynamic(k->__Field(HX_("hashCode",1b,0c,75,07),hx::paccDynamic))()) );
HXDLIN(  44)		this1->values->set(_hx_tmp1,v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(HashMap_Impl__obj,set,(void))

 ::Dynamic HashMap_Impl__obj::get( ::haxe::ds::_HashMap::HashMapData this1, ::Dynamic k){
            	HX_STACK_FRAME("haxe.ds._HashMap.HashMap_Impl_","get",0x5f7f1d6e,"haxe.ds._HashMap.HashMap_Impl_.get","/usr/lib/haxe/std/haxe/ds/HashMap.hx",51,0x04ed6968)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(k,"k")
HXLINE(  51)		Int _hx_tmp = ( (Int)( ::Dynamic(k->__Field(HX_("hashCode",1b,0c,75,07),hx::paccDynamic))()) );
HXDLIN(  51)		return this1->values->get(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(HashMap_Impl__obj,get,return )

Bool HashMap_Impl__obj::exists( ::haxe::ds::_HashMap::HashMapData this1, ::Dynamic k){
            	HX_STACK_FRAME("haxe.ds._HashMap.HashMap_Impl_","exists",0xaabf1804,"haxe.ds._HashMap.HashMap_Impl_.exists","/usr/lib/haxe/std/haxe/ds/HashMap.hx",58,0x04ed6968)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(k,"k")
HXLINE(  58)		Int _hx_tmp = ( (Int)( ::Dynamic(k->__Field(HX_("hashCode",1b,0c,75,07),hx::paccDynamic))()) );
HXDLIN(  58)		return this1->values->exists(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(HashMap_Impl__obj,exists,return )

Bool HashMap_Impl__obj::remove( ::haxe::ds::_HashMap::HashMapData this1, ::Dynamic k){
            	HX_STACK_FRAME("haxe.ds._HashMap.HashMap_Impl_","remove",0xef67966c,"haxe.ds._HashMap.HashMap_Impl_.remove","/usr/lib/haxe/std/haxe/ds/HashMap.hx",64,0x04ed6968)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(k,"k")
HXLINE(  65)		Int _hx_tmp = ( (Int)( ::Dynamic(k->__Field(HX_("hashCode",1b,0c,75,07),hx::paccDynamic))()) );
HXDLIN(  65)		this1->values->remove(_hx_tmp);
HXLINE(  66)		Int _hx_tmp1 = ( (Int)( ::Dynamic(k->__Field(HX_("hashCode",1b,0c,75,07),hx::paccDynamic))()) );
HXDLIN(  66)		return this1->keys->remove(_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(HashMap_Impl__obj,remove,return )

 ::Dynamic HashMap_Impl__obj::keys( ::haxe::ds::_HashMap::HashMapData this1){
            	HX_STACK_FRAME("haxe.ds._HashMap.HashMap_Impl_","keys",0x325f821c,"haxe.ds._HashMap.HashMap_Impl_.keys","/usr/lib/haxe/std/haxe/ds/HashMap.hx",73,0x04ed6968)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  73)		return this1->keys->iterator();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HashMap_Impl__obj,keys,return )

 ::Dynamic HashMap_Impl__obj::iterator( ::haxe::ds::_HashMap::HashMapData this1){
            	HX_STACK_FRAME("haxe.ds._HashMap.HashMap_Impl_","iterator",0x2fca1e16,"haxe.ds._HashMap.HashMap_Impl_.iterator","/usr/lib/haxe/std/haxe/ds/HashMap.hx",80,0x04ed6968)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  80)		return this1->values->iterator();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HashMap_Impl__obj,iterator,return )


HashMap_Impl__obj::HashMap_Impl__obj()
{
}

bool HashMap_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"keys") ) { outValue = keys_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { outValue = exists_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"remove") ) { outValue = remove_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"iterator") ) { outValue = iterator_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *HashMap_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *HashMap_Impl__obj_sStaticStorageInfo = 0;
#endif

static void HashMap_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(HashMap_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void HashMap_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(HashMap_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class HashMap_Impl__obj::__mClass;

static ::String HashMap_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("keys","\xf4","\xe1","\x06","\x47"),
	HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"),
	::String(null())
};

void HashMap_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxe.ds._HashMap.HashMap_Impl_","\x46","\xb1","\x8f","\x12");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &HashMap_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = HashMap_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(HashMap_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< HashMap_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = HashMap_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HashMap_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HashMap_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ds
} // end namespace _HashMap
