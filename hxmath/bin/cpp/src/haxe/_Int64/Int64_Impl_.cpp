// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "cpp/Int64.h"
#ifndef INCLUDED_haxe_Int64Helper
#include <haxe/Int64Helper.h>
#endif
#ifndef INCLUDED_haxe__Int64_Int64_Impl_
#include <haxe/_Int64/Int64_Impl_.h>
#endif

namespace haxe{
namespace _Int64{

void Int64_Impl__obj::__construct() { }

Dynamic Int64_Impl__obj::__CreateEmpty() { return new Int64_Impl__obj; }

hx::ObjectPtr< Int64_Impl__obj > Int64_Impl__obj::__new()
{
	hx::ObjectPtr< Int64_Impl__obj > _hx_result = new Int64_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Int64_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Int64_Impl__obj > _hx_result = new Int64_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::cpp::Int64Struct Int64_Impl__obj::copy( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","copy",0xdafd68ae,"haxe._Int64.Int64_Impl_.copy","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",146,0x468f6bfc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 146)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,copy,return )

 ::cpp::Int64Struct Int64_Impl__obj::make(Int high,Int low){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","make",0xe18ee6e7,"haxe._Int64.Int64_Impl_.make","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",150,0x468f6bfc)
            	HX_STACK_ARG(high,"high")
            	HX_STACK_ARG(low,"low")
HXLINE( 150)		return _hx_int64_make(high,low);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,make,return )

 ::cpp::Int64Struct Int64_Impl__obj::ofInt(Int x){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","ofInt",0xa57c98ff,"haxe._Int64.Int64_Impl_.ofInt","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",154,0x468f6bfc)
            	HX_STACK_ARG(x,"x")
HXLINE( 154)		return ( ::cpp::Int64Struct(x));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,ofInt,return )

Int Int64_Impl__obj::toInt( ::cpp::Int64Struct x){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","toInt",0x8c706b1b,"haxe._Int64.Int64_Impl_.toInt","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",162,0x468f6bfc)
            	HX_STACK_ARG(x,"x")
HXLINE( 163)		Int _hx_tmp = _hx_int64_high(x);
HXDLIN( 163)		Int _hx_tmp1 = _hx_int64_low(x);
HXDLIN( 163)		if ((_hx_tmp != ((int)_hx_tmp1 >> (int)(int)31))) {
HXLINE( 164)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXLINE( 166)		return _hx_int64_low(x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,toInt,return )

Bool Int64_Impl__obj::is( ::Dynamic val){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","is",0xecc1a8a3,"haxe._Int64.Int64_Impl_.is","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",173,0x468f6bfc)
            	HX_STACK_ARG(val,"val")
HXLINE( 173)		return (cpp::Int64Struct::is(val));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,is,return )

Int Int64_Impl__obj::getHigh( ::cpp::Int64Struct x){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","getHigh",0x66a1dbbf,"haxe._Int64.Int64_Impl_.getHigh","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",180,0x468f6bfc)
            	HX_STACK_ARG(x,"x")
HXLINE( 180)		return _hx_int64_high(x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,getHigh,return )

Int Int64_Impl__obj::getLow( ::cpp::Int64Struct x){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","getLow",0x7d9a2ad7,"haxe._Int64.Int64_Impl_.getLow","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",187,0x468f6bfc)
            	HX_STACK_ARG(x,"x")
HXLINE( 187)		return _hx_int64_low(x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,getLow,return )

Bool Int64_Impl__obj::isNeg( ::cpp::Int64Struct x){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","isNeg",0x39b0a76d,"haxe._Int64.Int64_Impl_.isNeg","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",193,0x468f6bfc)
            	HX_STACK_ARG(x,"x")
HXLINE( 193)		return _hx_int64_is_neg(x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,isNeg,return )

Bool Int64_Impl__obj::isZero( ::cpp::Int64Struct x){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","isZero",0x48d0716b,"haxe._Int64.Int64_Impl_.isZero","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",199,0x468f6bfc)
            	HX_STACK_ARG(x,"x")
HXLINE( 199)		return _hx_int64_is_zero(x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,isZero,return )

Int Int64_Impl__obj::compare( ::cpp::Int64Struct a, ::cpp::Int64Struct b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","compare",0xd27a0d4c,"haxe._Int64.Int64_Impl_.compare","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",207,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 207)		return _hx_int64_compare(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,compare,return )

Int Int64_Impl__obj::ucompare( ::cpp::Int64Struct a, ::cpp::Int64Struct b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","ucompare",0x873c5e49,"haxe._Int64.Int64_Impl_.ucompare","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",215,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 215)		return _hx_int64_ucompare(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,ucompare,return )

::String Int64_Impl__obj::toStr( ::cpp::Int64Struct x){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","toStr",0x8c7806dd,"haxe._Int64.Int64_Impl_.toStr","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",221,0x468f6bfc)
            	HX_STACK_ARG(x,"x")
HXLINE( 221)		return _hx_int64_to_string(x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,toStr,return )

::String Int64_Impl__obj::toString( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","toString",0x1833ee25,"haxe._Int64.Int64_Impl_.toString","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",224,0x468f6bfc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 224)		return _hx_int64_to_string(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,toString,return )

 ::cpp::Int64Struct Int64_Impl__obj::parseString(::String sParam){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","parseString",0x90f2a98b,"haxe._Int64.Int64_Impl_.parseString","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",227,0x468f6bfc)
            	HX_STACK_ARG(sParam,"sParam")
HXLINE( 227)		return ::haxe::Int64Helper_obj::parseString(sParam);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,parseString,return )

 ::cpp::Int64Struct Int64_Impl__obj::fromFloat(Float f){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","fromFloat",0xa3d45c39,"haxe._Int64.Int64_Impl_.fromFloat","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",231,0x468f6bfc)
            	HX_STACK_ARG(f,"f")
HXLINE( 231)		return ::haxe::Int64Helper_obj::fromFloat(f);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,fromFloat,return )

 ::Dynamic Int64_Impl__obj::divMod( ::cpp::Int64Struct dividend, ::cpp::Int64Struct divisor){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","divMod",0x9975972a,"haxe._Int64.Int64_Impl_.divMod","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",239,0x468f6bfc)
            	HX_STACK_ARG(dividend,"dividend")
            	HX_STACK_ARG(divisor,"divisor")
HXLINE( 240)		Bool _hx_tmp = _hx_int64_is_zero(dividend);
HXDLIN( 240)		if (_hx_tmp) {
HXLINE( 240)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 240)		 ::cpp::Int64Struct _hx_tmp1 = _hx_int64_div(dividend,divisor);
HXDLIN( 240)		HX_VARI(  ::cpp::Int64Struct,q) = _hx_tmp1;
HXLINE( 242)		Bool _hx_tmp2 = _hx_int64_is_zero(divisor);
HXDLIN( 242)		if (_hx_tmp2) {
HXLINE( 243)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXLINE( 245)		HX_VARI(  ::cpp::Int64Struct,b) = _hx_int64_mul(q,divisor);
HXDLIN( 245)		HX_VARI(  ::cpp::Int64Struct,m) = _hx_int64_sub(dividend,b);
HXLINE( 247)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("quotient",ab,68,60,b2),q)
            			->setFixed(1,HX_("modulus",37,f0,fa,f7),m));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,divMod,return )

 ::cpp::Int64Struct Int64_Impl__obj::neg( ::cpp::Int64Struct x){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","neg",0x3cb5a577,"haxe._Int64.Int64_Impl_.neg","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",254,0x468f6bfc)
            	HX_STACK_ARG(x,"x")
HXLINE( 254)		return _hx_int64_neg(x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,neg,return )

 ::cpp::Int64Struct Int64_Impl__obj::preIncrement( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","preIncrement",0xc892b785,"haxe._Int64.Int64_Impl_.preIncrement","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",261,0x468f6bfc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 261)		return _hx_int64_pre_increment(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,preIncrement,return )

 ::cpp::Int64Struct Int64_Impl__obj::postIncrement( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","postIncrement",0x70724196,"haxe._Int64.Int64_Impl_.postIncrement","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",271,0x468f6bfc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 271)		return _hx_int64_post_increment(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,postIncrement,return )

 ::cpp::Int64Struct Int64_Impl__obj::preDecrement( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","preDecrement",0xa715a769,"haxe._Int64.Int64_Impl_.preDecrement","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",280,0x468f6bfc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 280)		return _hx_int64_pre_decrement(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,preDecrement,return )

 ::cpp::Int64Struct Int64_Impl__obj::postDecrement( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","postDecrement",0x4ef5317a,"haxe._Int64.Int64_Impl_.postDecrement","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",290,0x468f6bfc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 290)		return _hx_int64_post_decrement(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,postDecrement,return )

 ::cpp::Int64Struct Int64_Impl__obj::add( ::cpp::Int64Struct a, ::cpp::Int64Struct b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","add",0x3cabc748,"haxe._Int64.Int64_Impl_.add","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",298,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 298)		return _hx_int64_add(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,add,return )

 ::cpp::Int64Struct Int64_Impl__obj::addInt( ::cpp::Int64Struct a,Int b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","addInt",0x7979ba87,"haxe._Int64.Int64_Impl_.addInt","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",301,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 301)		return _hx_int64_add(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,addInt,return )

 ::cpp::Int64Struct Int64_Impl__obj::sub( ::cpp::Int64Struct a, ::cpp::Int64Struct b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","sub",0x3cb97ea7,"haxe._Int64.Int64_Impl_.sub","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",307,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 307)		return _hx_int64_sub(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,sub,return )

 ::cpp::Int64Struct Int64_Impl__obj::subInt( ::cpp::Int64Struct a,Int b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","subInt",0x7463a888,"haxe._Int64.Int64_Impl_.subInt","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",311,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 311)		return _hx_int64_sub(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,subInt,return )

 ::cpp::Int64Struct Int64_Impl__obj::intSub(Int a, ::cpp::Int64Struct b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","intSub",0x78f1710a,"haxe._Int64.Int64_Impl_.intSub","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",314,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 314)		return _hx_int64_sub(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,intSub,return )

 ::cpp::Int64Struct Int64_Impl__obj::mul( ::cpp::Int64Struct a, ::cpp::Int64Struct b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","mul",0x3cb4f12b,"haxe._Int64.Int64_Impl_.mul","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",320,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 320)		return _hx_int64_mul(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,mul,return )

 ::cpp::Int64Struct Int64_Impl__obj::mulInt( ::cpp::Int64Struct a,Int b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","mulInt",0x14dba084,"haxe._Int64.Int64_Impl_.mulInt","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",323,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 323)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ( ::cpp::Int64Struct(b));
HXDLIN( 323)		return _hx_int64_mul(a,b1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,mulInt,return )

 ::cpp::Int64Struct Int64_Impl__obj::div( ::cpp::Int64Struct a, ::cpp::Int64Struct b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","div",0x3cae1278,"haxe._Int64.Int64_Impl_.div","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",328,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 329)		Bool _hx_tmp = _hx_int64_is_zero(a);
HXDLIN( 329)		if (_hx_tmp) {
HXLINE( 330)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXLINE( 331)		return _hx_int64_div(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,div,return )

 ::cpp::Int64Struct Int64_Impl__obj::divInt( ::cpp::Int64Struct a,Int b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","divInt",0x99728d57,"haxe._Int64.Int64_Impl_.divInt","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",336,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 336)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ( ::cpp::Int64Struct(b));
HXDLIN( 336)		Bool _hx_tmp = _hx_int64_is_zero(a);
HXDLIN( 336)		if (_hx_tmp) {
HXLINE( 336)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 336)		return _hx_int64_div(a,b1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,divInt,return )

 ::cpp::Int64Struct Int64_Impl__obj::intDiv(Int a, ::cpp::Int64Struct b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","intDiv",0x78e604db,"haxe._Int64.Int64_Impl_.intDiv","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",339,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 339)		HX_VARI_NAME(  ::cpp::Int64Struct,a1,"a") = ( ::cpp::Int64Struct(a));
HXDLIN( 339)		Bool _hx_tmp = _hx_int64_is_zero(a1);
HXDLIN( 339)		if (_hx_tmp) {
HXLINE( 339)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 339)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_div(a1,b);
HXDLIN( 339)		Int _hx_tmp1 = _hx_int64_high(x);
HXDLIN( 339)		Int _hx_tmp2 = _hx_int64_low(x);
HXDLIN( 339)		if ((_hx_tmp1 != ((int)_hx_tmp2 >> (int)(int)31))) {
HXLINE( 339)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 339)		HX_VARI_NAME( Int,x1,"x") = _hx_int64_low(x);
HXDLIN( 339)		return ( ::cpp::Int64Struct(x1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,intDiv,return )

 ::cpp::Int64Struct Int64_Impl__obj::mod( ::cpp::Int64Struct a, ::cpp::Int64Struct b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","mod",0x3cb4ebe9,"haxe._Int64.Int64_Impl_.mod","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",345,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 346)		Bool _hx_tmp = _hx_int64_is_zero(a);
HXDLIN( 346)		if (_hx_tmp) {
HXLINE( 347)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXLINE( 348)		return _hx_int64_mod(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,mod,return )

 ::cpp::Int64Struct Int64_Impl__obj::modInt( ::cpp::Int64Struct a,Int b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","modInt",0x9b2a7086,"haxe._Int64.Int64_Impl_.modInt","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",352,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 352)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ( ::cpp::Int64Struct(b));
HXDLIN( 352)		Bool _hx_tmp = _hx_int64_is_zero(a);
HXDLIN( 352)		if (_hx_tmp) {
HXLINE( 352)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 352)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_mod(a,b1);
HXDLIN( 352)		Int _hx_tmp1 = _hx_int64_high(x);
HXDLIN( 352)		Int _hx_tmp2 = _hx_int64_low(x);
HXDLIN( 352)		if ((_hx_tmp1 != ((int)_hx_tmp2 >> (int)(int)31))) {
HXLINE( 352)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 352)		HX_VARI_NAME( Int,x1,"x") = _hx_int64_low(x);
HXDLIN( 352)		return ( ::cpp::Int64Struct(x1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,modInt,return )

 ::cpp::Int64Struct Int64_Impl__obj::intMod(Int a, ::cpp::Int64Struct b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","intMod",0x78ecde4c,"haxe._Int64.Int64_Impl_.intMod","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",355,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 355)		HX_VARI_NAME(  ::cpp::Int64Struct,a1,"a") = ( ::cpp::Int64Struct(a));
HXDLIN( 355)		Bool _hx_tmp = _hx_int64_is_zero(a1);
HXDLIN( 355)		if (_hx_tmp) {
HXLINE( 355)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 355)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_mod(a1,b);
HXDLIN( 355)		Int _hx_tmp1 = _hx_int64_high(x);
HXDLIN( 355)		Int _hx_tmp2 = _hx_int64_low(x);
HXDLIN( 355)		if ((_hx_tmp1 != ((int)_hx_tmp2 >> (int)(int)31))) {
HXLINE( 355)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 355)		HX_VARI_NAME( Int,x1,"x") = _hx_int64_low(x);
HXDLIN( 355)		return ( ::cpp::Int64Struct(x1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,intMod,return )

Bool Int64_Impl__obj::eq( ::cpp::Int64Struct a, ::cpp::Int64Struct b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","eq",0xecc1a525,"haxe._Int64.Int64_Impl_.eq","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",361,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 361)		return _hx_int64_eq(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,eq,return )

Bool Int64_Impl__obj::eqInt( ::cpp::Int64Struct a,Int b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","eqInt",0xeac024ca,"haxe._Int64.Int64_Impl_.eqInt","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",364,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 364)		return _hx_int64_eq(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,eqInt,return )

Bool Int64_Impl__obj::neq( ::cpp::Int64Struct a, ::cpp::Int64Struct b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","neq",0x3cb5a581,"haxe._Int64.Int64_Impl_.neq","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",370,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 370)		return _hx_int64_neq(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,neq,return )

Bool Int64_Impl__obj::neqInt( ::cpp::Int64Struct a,Int b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","neqInt",0x481bc5ee,"haxe._Int64.Int64_Impl_.neqInt","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",373,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 373)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ( ::cpp::Int64Struct(b));
HXDLIN( 373)		return _hx_int64_neq(a,b1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,neqInt,return )

Bool Int64_Impl__obj::lt( ::cpp::Int64Struct a, ::cpp::Int64Struct b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","lt",0xecc1ab41,"haxe._Int64.Int64_Impl_.lt","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",376,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 376)		Int _hx_tmp = _hx_int64_compare(a,b);
HXDLIN( 376)		return (_hx_tmp < (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,lt,return )

Bool Int64_Impl__obj::ltInt( ::cpp::Int64Struct a,Int b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","ltInt",0xf489d82e,"haxe._Int64.Int64_Impl_.ltInt","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",379,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 379)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ( ::cpp::Int64Struct(b));
HXDLIN( 379)		Int _hx_tmp = _hx_int64_compare(a,b1);
HXDLIN( 379)		return (_hx_tmp < (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,ltInt,return )

Bool Int64_Impl__obj::intLt(Int a, ::cpp::Int64Struct b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","intLt",0x367f563e,"haxe._Int64.Int64_Impl_.intLt","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",382,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 382)		HX_VARI_NAME(  ::cpp::Int64Struct,a1,"a") = ( ::cpp::Int64Struct(a));
HXDLIN( 382)		Int _hx_tmp = _hx_int64_compare(a1,b);
HXDLIN( 382)		return (_hx_tmp < (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,intLt,return )

Bool Int64_Impl__obj::lte( ::cpp::Int64Struct a, ::cpp::Int64Struct b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","lte",0x3cb42e04,"haxe._Int64.Int64_Impl_.lte","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",385,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 385)		Int _hx_tmp = _hx_int64_compare(a,b);
HXDLIN( 385)		return (_hx_tmp <= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,lte,return )

Bool Int64_Impl__obj::lteInt( ::cpp::Int64Struct a,Int b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","lteInt",0x1679314b,"haxe._Int64.Int64_Impl_.lteInt","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",388,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 388)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ( ::cpp::Int64Struct(b));
HXDLIN( 388)		Int _hx_tmp = _hx_int64_compare(a,b1);
HXDLIN( 388)		return (_hx_tmp <= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,lteInt,return )

Bool Int64_Impl__obj::intLte(Int a, ::cpp::Int64Struct b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","intLte",0x78ec2067,"haxe._Int64.Int64_Impl_.intLte","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",391,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 391)		HX_VARI_NAME(  ::cpp::Int64Struct,a1,"a") = ( ::cpp::Int64Struct(a));
HXDLIN( 391)		Int _hx_tmp = _hx_int64_compare(a1,b);
HXDLIN( 391)		return (_hx_tmp <= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,intLte,return )

Bool Int64_Impl__obj::gt( ::cpp::Int64Struct a, ::cpp::Int64Struct b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","gt",0xecc1a6e6,"haxe._Int64.Int64_Impl_.gt","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",394,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 394)		Int _hx_tmp = _hx_int64_compare(a,b);
HXDLIN( 394)		return (_hx_tmp > (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,gt,return )

Bool Int64_Impl__obj::gtInt( ::cpp::Int64Struct a,Int b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","gtInt",0x1388f1a9,"haxe._Int64.Int64_Impl_.gtInt","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",397,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 397)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ( ::cpp::Int64Struct(b));
HXDLIN( 397)		Int _hx_tmp = _hx_int64_compare(a,b1);
HXDLIN( 397)		return (_hx_tmp > (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,gtInt,return )

Bool Int64_Impl__obj::intGt(Int a, ::cpp::Int64Struct b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","intGt",0x367f51e3,"haxe._Int64.Int64_Impl_.intGt","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",400,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 400)		HX_VARI_NAME(  ::cpp::Int64Struct,a1,"a") = ( ::cpp::Int64Struct(a));
HXDLIN( 400)		Int _hx_tmp = _hx_int64_compare(a1,b);
HXDLIN( 400)		return (_hx_tmp > (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,intGt,return )

Bool Int64_Impl__obj::gte( ::cpp::Int64Struct a, ::cpp::Int64Struct b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","gte",0x3cb062bf,"haxe._Int64.Int64_Impl_.gte","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",403,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 403)		Int _hx_tmp = _hx_int64_compare(a,b);
HXDLIN( 403)		return (_hx_tmp >= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,gte,return )

Bool Int64_Impl__obj::gteInt( ::cpp::Int64Struct a,Int b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","gteInt",0x16b06370,"haxe._Int64.Int64_Impl_.gteInt","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",406,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 406)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ( ::cpp::Int64Struct(b));
HXDLIN( 406)		Int _hx_tmp = _hx_int64_compare(a,b1);
HXDLIN( 406)		return (_hx_tmp >= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,gteInt,return )

Bool Int64_Impl__obj::intGte(Int a, ::cpp::Int64Struct b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","intGte",0x78e85522,"haxe._Int64.Int64_Impl_.intGte","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",409,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 409)		HX_VARI_NAME(  ::cpp::Int64Struct,a1,"a") = ( ::cpp::Int64Struct(a));
HXDLIN( 409)		Int _hx_tmp = _hx_int64_compare(a1,b);
HXDLIN( 409)		return (_hx_tmp >= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,intGte,return )

 ::cpp::Int64Struct Int64_Impl__obj::complement( ::cpp::Int64Struct a){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","complement",0x2f16709f,"haxe._Int64.Int64_Impl_.complement","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",415,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
HXLINE( 415)		return _hx_int64_complement(a);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,complement,return )

 ::cpp::Int64Struct Int64_Impl__obj::_hx_and( ::cpp::Int64Struct a, ::cpp::Int64Struct b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","and",0x3cabcffe,"haxe._Int64.Int64_Impl_.and","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",421,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 421)		return _hx_int64_and(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,_hx_and,return )

 ::cpp::Int64Struct Int64_Impl__obj::_hx_or( ::cpp::Int64Struct a, ::cpp::Int64Struct b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","or",0xecc1addc,"haxe._Int64.Int64_Impl_.or","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",427,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 427)		return _hx_int64_or(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,_hx_or,return )

 ::cpp::Int64Struct Int64_Impl__obj::_hx_xor( ::cpp::Int64Struct a, ::cpp::Int64Struct b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","xor",0x3cbd44c2,"haxe._Int64.Int64_Impl_.xor","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",433,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 433)		return _hx_int64_xor(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,_hx_xor,return )

 ::cpp::Int64Struct Int64_Impl__obj::shl( ::cpp::Int64Struct a,Int b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","shl",0x3cb9735e,"haxe._Int64.Int64_Impl_.shl","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",439,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 439)		return _hx_int64_shl(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,shl,return )

 ::cpp::Int64Struct Int64_Impl__obj::shr( ::cpp::Int64Struct a,Int b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","shr",0x3cb97364,"haxe._Int64.Int64_Impl_.shr","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",446,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 446)		return _hx_int64_shr(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,shr,return )

 ::cpp::Int64Struct Int64_Impl__obj::ushr( ::cpp::Int64Struct a,Int b){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","ushr",0xe6e641e1,"haxe._Int64.Int64_Impl_.ushr","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",453,0x468f6bfc)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 453)		return _hx_int64_ushr(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int64_Impl__obj,ushr,return )

Int Int64_Impl__obj::get_high( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","get_high",0xa48e1064,"haxe._Int64.Int64_Impl_.get_high","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",457,0x468f6bfc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 457)		return _hx_int64_high(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,get_high,return )

Int Int64_Impl__obj::get_low( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("haxe._Int64.Int64_Impl_","get_low",0x75d811d2,"haxe._Int64.Int64_Impl_.get_low","/usr/lib/haxe/std/cpp/_std/haxe/Int64.hx",461,0x468f6bfc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 461)		return _hx_int64_low(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int64_Impl__obj,get_low,return )


Int64_Impl__obj::Int64_Impl__obj()
{
}

bool Int64_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"is") ) { outValue = is_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"eq") ) { outValue = eq_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lt") ) { outValue = lt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gt") ) { outValue = gt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"or") ) { outValue = _hx_or_dyn(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"neg") ) { outValue = neg_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sub") ) { outValue = sub_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mul") ) { outValue = mul_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"div") ) { outValue = div_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mod") ) { outValue = mod_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"neq") ) { outValue = neq_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lte") ) { outValue = lte_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gte") ) { outValue = gte_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"and") ) { outValue = _hx_and_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"xor") ) { outValue = _hx_xor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"shl") ) { outValue = shl_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"shr") ) { outValue = shr_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { outValue = copy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"make") ) { outValue = make_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ushr") ) { outValue = ushr_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"ofInt") ) { outValue = ofInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toInt") ) { outValue = toInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isNeg") ) { outValue = isNeg_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toStr") ) { outValue = toStr_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"eqInt") ) { outValue = eqInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ltInt") ) { outValue = ltInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"intLt") ) { outValue = intLt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gtInt") ) { outValue = gtInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"intGt") ) { outValue = intGt_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"getLow") ) { outValue = getLow_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isZero") ) { outValue = isZero_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"divMod") ) { outValue = divMod_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addInt") ) { outValue = addInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subInt") ) { outValue = subInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"intSub") ) { outValue = intSub_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mulInt") ) { outValue = mulInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"divInt") ) { outValue = divInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"intDiv") ) { outValue = intDiv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"modInt") ) { outValue = modInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"intMod") ) { outValue = intMod_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"neqInt") ) { outValue = neqInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lteInt") ) { outValue = lteInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"intLte") ) { outValue = intLte_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gteInt") ) { outValue = gteInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"intGte") ) { outValue = intGte_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getHigh") ) { outValue = getHigh_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"compare") ) { outValue = compare_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_low") ) { outValue = get_low_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"ucompare") ) { outValue = ucompare_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_high") ) { outValue = get_high_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromFloat") ) { outValue = fromFloat_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"complement") ) { outValue = complement_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"parseString") ) { outValue = parseString_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"preIncrement") ) { outValue = preIncrement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"preDecrement") ) { outValue = preDecrement_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"postIncrement") ) { outValue = postIncrement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"postDecrement") ) { outValue = postDecrement_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Int64_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Int64_Impl__obj_sStaticStorageInfo = 0;
#endif

static void Int64_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Int64_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Int64_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Int64_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class Int64_Impl__obj::__mClass;

static ::String Int64_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("make","\xee","\x39","\x56","\x48"),
	HX_HCSTRING("ofInt","\x18","\xec","\x1d","\x2d"),
	HX_HCSTRING("toInt","\x34","\xbe","\x11","\x14"),
	HX_HCSTRING("is","\xea","\x5b","\x00","\x00"),
	HX_HCSTRING("getHigh","\x18","\xe7","\x90","\x17"),
	HX_HCSTRING("getLow","\x9e","\x8d","\x21","\xa3"),
	HX_HCSTRING("isNeg","\x86","\xfa","\x51","\xc1"),
	HX_HCSTRING("isZero","\x32","\xd4","\x57","\x6e"),
	HX_HCSTRING("compare","\xa5","\x18","\x69","\x83"),
	HX_HCSTRING("ucompare","\xd0","\x40","\x77","\xa7"),
	HX_HCSTRING("toStr","\xf6","\x59","\x19","\x14"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("parseString","\x64","\xd5","\x6c","\x8c"),
	HX_HCSTRING("fromFloat","\xd2","\xaf","\x1f","\xb7"),
	HX_HCSTRING("divMod","\xf1","\xf9","\xfc","\xbe"),
	HX_HCSTRING("neg","\x50","\xd0","\x53","\x00"),
	HX_HCSTRING("preIncrement","\x8c","\xe9","\xfe","\xd7"),
	HX_HCSTRING("postIncrement","\xaf","\xd5","\xb1","\xdf"),
	HX_HCSTRING("preDecrement","\x70","\xd9","\x81","\xb6"),
	HX_HCSTRING("postDecrement","\x93","\xc5","\x34","\xbe"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("addInt","\x4e","\x1d","\x01","\x9f"),
	HX_HCSTRING("sub","\x80","\xa9","\x57","\x00"),
	HX_HCSTRING("subInt","\x4f","\x0b","\xeb","\x99"),
	HX_HCSTRING("intSub","\xd1","\xd3","\x78","\x9e"),
	HX_HCSTRING("mul","\x04","\x1c","\x53","\x00"),
	HX_HCSTRING("mulInt","\x4b","\x03","\x63","\x3a"),
	HX_HCSTRING("div","\x51","\x3d","\x4c","\x00"),
	HX_HCSTRING("divInt","\x1e","\xf0","\xf9","\xbe"),
	HX_HCSTRING("intDiv","\xa2","\x67","\x6d","\x9e"),
	HX_HCSTRING("mod","\xc2","\x16","\x53","\x00"),
	HX_HCSTRING("modInt","\x4d","\xd3","\xb1","\xc0"),
	HX_HCSTRING("intMod","\x13","\x41","\x74","\x9e"),
	HX_HCSTRING("eq","\x6c","\x58","\x00","\x00"),
	HX_HCSTRING("eqInt","\xe3","\x77","\x61","\x72"),
	HX_HCSTRING("neq","\x5a","\xd0","\x53","\x00"),
	HX_HCSTRING("neqInt","\xb5","\x28","\xa3","\x6d"),
	HX_HCSTRING("lt","\x88","\x5e","\x00","\x00"),
	HX_HCSTRING("ltInt","\x47","\x2b","\x2b","\x7c"),
	HX_HCSTRING("intLt","\x57","\xa9","\x20","\xbe"),
	HX_HCSTRING("lte","\xdd","\x58","\x52","\x00"),
	HX_HCSTRING("lteInt","\x12","\x94","\x00","\x3c"),
	HX_HCSTRING("intLte","\x2e","\x83","\x73","\x9e"),
	HX_HCSTRING("gt","\x2d","\x5a","\x00","\x00"),
	HX_HCSTRING("gtInt","\xc2","\x44","\x2a","\x9b"),
	HX_HCSTRING("intGt","\xfc","\xa4","\x20","\xbe"),
	HX_HCSTRING("gte","\x98","\x8d","\x4e","\x00"),
	HX_HCSTRING("gteInt","\x37","\xc6","\x37","\x3c"),
	HX_HCSTRING("intGte","\xe9","\xb7","\x6f","\x9e"),
	HX_HCSTRING("complement","\xe6","\x42","\xb4","\xfd"),
	HX_HCSTRING("and","\xd7","\xfa","\x49","\x00"),
	HX_HCSTRING("or","\x23","\x61","\x00","\x00"),
	HX_HCSTRING("xor","\x9b","\x6f","\x5b","\x00"),
	HX_HCSTRING("shl","\x37","\x9e","\x57","\x00"),
	HX_HCSTRING("shr","\x3d","\x9e","\x57","\x00"),
	HX_HCSTRING("ushr","\xe8","\x94","\xad","\x4d"),
	HX_HCSTRING("get_high","\xeb","\xf2","\xc8","\xc4"),
	HX_HCSTRING("get_low","\x2b","\x1d","\xc7","\x26"),
	::String(null())
};

void Int64_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxe._Int64.Int64_Impl_","\x15","\xd6","\x6c","\xa0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Int64_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Int64_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Int64_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Int64_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Int64_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Int64_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Int64_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace _Int64
