// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_hxmath_math_Vector2Default
#include <hxmath/math/Vector2Default.h>
#endif
#ifndef INCLUDED_nanotest_NanoTestAssertResult
#include <nanotest/NanoTestAssertResult.h>
#endif
#ifndef INCLUDED_nanotest_NanoTestCase
#include <nanotest/NanoTestCase.h>
#endif
#ifndef INCLUDED_test_MathTestCase
#include <test/MathTestCase.h>
#endif
#ifndef INCLUDED_test_TestMathUtil
#include <test/TestMathUtil.h>
#endif

namespace test{

void TestMathUtil_obj::__construct( ::Dynamic posInfos){
            	HX_STACK_FRAME("test.TestMathUtil","new",0xc920c30a,"test.TestMathUtil.new","test/TestMathUtil.hx",5,0xbdc214c5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(posInfos,"posInfos")
HXLINE(   5)		super::__construct(posInfos);
            	}

Dynamic TestMathUtil_obj::__CreateEmpty() { return new TestMathUtil_obj; }

hx::ObjectPtr< TestMathUtil_obj > TestMathUtil_obj::__new( ::Dynamic posInfos)
{
	hx::ObjectPtr< TestMathUtil_obj > _hx_result = new TestMathUtil_obj();
	_hx_result->__construct(posInfos);
	return _hx_result;
}

Dynamic TestMathUtil_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestMathUtil_obj > _hx_result = new TestMathUtil_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestMathUtil_obj::testOrient2D(){
            	HX_STACK_FRAME("test.TestMathUtil","testOrient2D",0x04ed0f5f,"test.TestMathUtil.testOrient2D","test/TestMathUtil.hx",8,0xbdc214c5)
            	HX_STACK_THIS(this)
HXLINE(  16)		HX_VARI(  ::hxmath::math::Vector2Default,a) =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)0.0));
HXLINE(  17)		HX_VARI(  ::hxmath::math::Vector2Default,b) =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)1.0));
HXLINE(  18)		HX_VARI(  ::hxmath::math::Vector2Default,c) =  ::hxmath::math::Vector2Default_obj::__new(((Float)-0.5),((Float)0.5));
HXLINE(  19)		HX_VARI(  ::hxmath::math::Vector2Default,d) =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.5),((Float)0.5));
HXLINE(  20)		HX_VARI(  ::hxmath::math::Vector2Default,e) =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)-1.0));
HXLINE(  22)		HX_VARI( Float,result) = (((a->x - c->x) * (b->y - c->y)) - ((a->y - c->y) * (b->x - c->x)));
HXDLIN(  22)		Int _hx_tmp;
HXDLIN(  22)		if ((result > (int)0)) {
HXLINE(  22)			_hx_tmp = (int)1;
            		}
            		else {
HXLINE(  22)			if ((result < (int)0)) {
HXLINE(  22)				_hx_tmp = (int)-1;
            			}
            			else {
HXLINE(  22)				_hx_tmp = (int)0;
            			}
            		}
HXDLIN(  22)		this->assertEquals(_hx_tmp,(int)1,hx::SourceInfo(HX_("TestMathUtil.hx",c2,7b,c7,2e),22,HX_("test.TestMathUtil",18,36,74,6b),HX_("testOrient2D",49,a7,74,30)));
HXLINE(  23)		HX_VARI_NAME( Float,result1,"result") = (((a->x - d->x) * (b->y - d->y)) - ((a->y - d->y) * (b->x - d->x)));
HXDLIN(  23)		Int _hx_tmp1;
HXDLIN(  23)		if ((result1 > (int)0)) {
HXLINE(  23)			_hx_tmp1 = (int)1;
            		}
            		else {
HXLINE(  23)			if ((result1 < (int)0)) {
HXLINE(  23)				_hx_tmp1 = (int)-1;
            			}
            			else {
HXLINE(  23)				_hx_tmp1 = (int)0;
            			}
            		}
HXDLIN(  23)		this->assertEquals(_hx_tmp1,(int)-1,hx::SourceInfo(HX_("TestMathUtil.hx",c2,7b,c7,2e),23,HX_("test.TestMathUtil",18,36,74,6b),HX_("testOrient2D",49,a7,74,30)));
HXLINE(  24)		HX_VARI_NAME( Float,result2,"result") = (((a->x - e->x) * (b->y - e->y)) - ((a->y - e->y) * (b->x - e->x)));
HXDLIN(  24)		Int _hx_tmp2;
HXDLIN(  24)		if ((result2 > (int)0)) {
HXLINE(  24)			_hx_tmp2 = (int)1;
            		}
            		else {
HXLINE(  24)			if ((result2 < (int)0)) {
HXLINE(  24)				_hx_tmp2 = (int)-1;
            			}
            			else {
HXLINE(  24)				_hx_tmp2 = (int)0;
            			}
            		}
HXDLIN(  24)		this->assertEquals(_hx_tmp2,(int)0,hx::SourceInfo(HX_("TestMathUtil.hx",c2,7b,c7,2e),24,HX_("test.TestMathUtil",18,36,74,6b),HX_("testOrient2D",49,a7,74,30)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestMathUtil_obj,testOrient2D,(void))

void TestMathUtil_obj::testWrapAngle(){
            	HX_STACK_FRAME("test.TestMathUtil","testWrapAngle",0x0e75e621,"test.TestMathUtil.testWrapAngle","test/TestMathUtil.hx",28,0xbdc214c5)
            	HX_STACK_THIS(this)
HXLINE(  29)		this->assertEquals(((Float)0.0),hx::Mod(((Float)0.0),((Float)360.0)),hx::SourceInfo(HX_("TestMathUtil.hx",c2,7b,c7,2e),29,HX_("test.TestMathUtil",18,36,74,6b),HX_("testWrapAngle",f7,3a,93,f9)));
HXLINE(  30)		this->assertEquals(((Float)0.0),hx::Mod(((Float)360.0),((Float)360.0)),hx::SourceInfo(HX_("TestMathUtil.hx",c2,7b,c7,2e),30,HX_("test.TestMathUtil",18,36,74,6b),HX_("testWrapAngle",f7,3a,93,f9)));
HXLINE(  31)		this->assertEquals(((Float)359.999999),hx::Mod(((Float)359.999999),(int)360),hx::SourceInfo(HX_("TestMathUtil.hx",c2,7b,c7,2e),31,HX_("test.TestMathUtil",18,36,74,6b),HX_("testWrapAngle",f7,3a,93,f9)));
HXLINE(  34)		this->assertEquals(((Float)189.0),(((Float)360.0) - hx::Mod(((Float)531.),((Float)360.0))),hx::SourceInfo(HX_("TestMathUtil.hx",c2,7b,c7,2e),34,HX_("test.TestMathUtil",18,36,74,6b),HX_("testWrapAngle",f7,3a,93,f9)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestMathUtil_obj,testWrapAngle,(void))


TestMathUtil_obj::TestMathUtil_obj()
{
}

hx::Val TestMathUtil_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"testOrient2D") ) { return hx::Val( testOrient2D_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"testWrapAngle") ) { return hx::Val( testWrapAngle_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestMathUtil_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestMathUtil_obj_sStaticStorageInfo = 0;
#endif

static ::String TestMathUtil_obj_sMemberFields[] = {
	HX_HCSTRING("testOrient2D","\x49","\xa7","\x74","\x30"),
	HX_HCSTRING("testWrapAngle","\xf7","\x3a","\x93","\xf9"),
	::String(null()) };

static void TestMathUtil_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestMathUtil_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestMathUtil_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestMathUtil_obj::__mClass,"__mClass");
};

#endif

hx::Class TestMathUtil_obj::__mClass;

void TestMathUtil_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("test.TestMathUtil","\x18","\x36","\x74","\x6b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestMathUtil_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestMathUtil_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestMathUtil_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestMathUtil_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestMathUtil_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestMathUtil_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace test
