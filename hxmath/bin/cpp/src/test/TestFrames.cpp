// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_hxmath_frames_IFrame2
#include <hxmath/frames/IFrame2.h>
#endif
#ifndef INCLUDED_hxmath_frames_IFrame3
#include <hxmath/frames/IFrame3.h>
#endif
#ifndef INCLUDED_hxmath_frames__Frame2_Frame2_Impl_
#include <hxmath/frames/_Frame2/Frame2_Impl_.h>
#endif
#ifndef INCLUDED_hxmath_frames__Frame3_Frame3_Impl_
#include <hxmath/frames/_Frame3/Frame3_Impl_.h>
#endif
#ifndef INCLUDED_hxmath_frames_adapters_FlxSpriteFrame2
#include <hxmath/frames/adapters/FlxSpriteFrame2.h>
#endif
#ifndef INCLUDED_hxmath_math_Matrix2x2Default
#include <hxmath/math/Matrix2x2Default.h>
#endif
#ifndef INCLUDED_hxmath_math_Matrix3x2Default
#include <hxmath/math/Matrix3x2Default.h>
#endif
#ifndef INCLUDED_hxmath_math_QuaternionDefault
#include <hxmath/math/QuaternionDefault.h>
#endif
#ifndef INCLUDED_hxmath_math_Vector2Default
#include <hxmath/math/Vector2Default.h>
#endif
#ifndef INCLUDED_hxmath_math_Vector3Default
#include <hxmath/math/Vector3Default.h>
#endif
#ifndef INCLUDED_nanotest_NanoTestAssertResult
#include <nanotest/NanoTestAssertResult.h>
#endif
#ifndef INCLUDED_nanotest_NanoTestCase
#include <nanotest/NanoTestCase.h>
#endif
#ifndef INCLUDED_test_FlxObjectMock
#include <test/FlxObjectMock.h>
#endif
#ifndef INCLUDED_test_MathTestCase
#include <test/MathTestCase.h>
#endif
#ifndef INCLUDED_test_TestFrames
#include <test/TestFrames.h>
#endif

namespace test{

void TestFrames_obj::__construct( ::Dynamic posInfos){
            	HX_STACK_FRAME("test.TestFrames","new",0x55fcef46,"test.TestFrames.new","test/TestFrames.hx",37,0x83ec6e49)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(posInfos,"posInfos")
HXLINE(  37)		super::__construct(posInfos);
            	}

Dynamic TestFrames_obj::__CreateEmpty() { return new TestFrames_obj; }

hx::ObjectPtr< TestFrames_obj > TestFrames_obj::__new( ::Dynamic posInfos)
{
	hx::ObjectPtr< TestFrames_obj > _hx_result = new TestFrames_obj();
	_hx_result->__construct(posInfos);
	return _hx_result;
}

Dynamic TestFrames_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestFrames_obj > _hx_result = new TestFrames_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestFrames_obj::testFrame2Concat(){
            	HX_STACK_FRAME("test.TestFrames","testFrame2Concat",0x9b449725,"test.TestFrames.testFrame2Concat","test/TestFrames.hx",40,0x83ec6e49)
            	HX_STACK_THIS(this)
HXLINE(  41)		HX_VARI(  ::hxmath::math::Vector2Default,originA) =  ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)1.0));
HXLINE(  42)		HX_VARI( ::Dynamic,a) = ::hxmath::frames::_Frame2::Frame2_Impl__obj::_new(originA,((Float)90.0));
HXLINE(  43)		HX_VARI( ::Dynamic,b) = ::hxmath::frames::_Frame2::Frame2_Impl__obj::_new( ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)0.0)),((Float)90.0));
HXLINE(  44)		 ::hxmath::math::Vector2Default _hx_tmp = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(a->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN(  44)		Float _hx_tmp1 = ( (Float)( ::Dynamic(a->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN(  44)		HX_VARI( ::Dynamic,self) = ::hxmath::frames::_Frame2::Frame2_Impl__obj::_new(_hx_tmp,_hx_tmp1);
HXDLIN(  44)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,this1,"this") = ( ( ::hxmath::math::Matrix3x2Default)( ::Dynamic(self->__Field(HX_("get_matrix",0a,a6,4f,ac),hx::paccDynamic))()) );
HXDLIN(  44)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,self1,"self") = this1;
HXDLIN(  44)		HX_VARI(  ::hxmath::math::Matrix2x2Default,m) =  ::hxmath::math::Matrix2x2Default_obj::__new(self1->a,self1->b,self1->c,self1->d);
HXDLIN(  44)		HX_VARI(  ::hxmath::math::Vector2Default,v) = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(b->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN(  44)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,this2,"this") =  ::hxmath::math::Vector2Default_obj::__new(((m->a * v->x) + (m->b * v->y)),((m->c * v->x) + (m->d * v->y)));
HXDLIN(  44)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,a1,"a") = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(self->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN(  44)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self2,"self") = this2;
HXDLIN(  44)		hx::AddEq(self2->x,a1->x);
HXDLIN(  44)		hx::AddEq(self2->y,a1->y);
HXDLIN(  44)		Float _hx_tmp2 = ( (Float)( ::Dynamic(self->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN(  44)		Float _hx_tmp3 = ( (Float)( ::Dynamic(b->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN(  44)		HX_VARI( Float,x) = (_hx_tmp2 + _hx_tmp3);
HXDLIN(  44)		Float _hx_tmp4;
HXDLIN(  44)		if ((x < (int)0)) {
HXLINE(  44)			_hx_tmp4 = ((int)360 - hx::Mod(-(x),(int)360));
            		}
            		else {
HXLINE(  44)			_hx_tmp4 = hx::Mod(x,(int)360);
            		}
HXDLIN(  44)		 ::Dynamic(self->__Field(HX_("set_angleDegrees",11,12,5d,98),hx::paccDynamic))(_hx_tmp4);
HXDLIN(  44)		 ::Dynamic(self->__Field(HX_("set_offset",d0,a5,44,54),hx::paccDynamic))(self2);
HXLINE(  46)		HX_VARI(  ::hxmath::math::Vector2Default,p) = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(b->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN(  46)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,m1,"m") = ( ( ::hxmath::math::Matrix3x2Default)( ::Dynamic(a->__Field(HX_("get_matrix",0a,a6,4f,ac),hx::paccDynamic))()) );
HXDLIN(  46)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,m2,"m") =  ::hxmath::math::Matrix2x2Default_obj::__new(m1->a,m1->b,m1->c,m1->d);
HXDLIN(  46)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,a2,"a") =  ::hxmath::math::Vector2Default_obj::__new(((m2->a * p->x) + (m2->b * p->y)),((m2->c * p->x) + (m2->d * p->y)));
HXDLIN(  46)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b1,"b") =  ::hxmath::math::Vector2Default_obj::__new(m1->tx,m1->ty);
HXDLIN(  46)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self3,"self") =  ::hxmath::math::Vector2Default_obj::__new(a2->x,a2->y);
HXDLIN(  46)		hx::AddEq(self3->x,b1->x);
HXDLIN(  46)		hx::AddEq(self3->y,b1->y);
HXDLIN(  46)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,a3,"a") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)1.0));
HXDLIN(  46)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self4,"self") =  ::hxmath::math::Vector2Default_obj::__new(a3->x,a3->y);
HXDLIN(  46)		hx::AddEq(self4->x,originA->x);
HXDLIN(  46)		hx::AddEq(self4->y,originA->y);
HXDLIN(  46)		Bool _hx_tmp5;
HXDLIN(  46)		Bool _hx_tmp6;
HXDLIN(  46)		if (hx::IsNull( self3 )) {
HXLINE(  46)			_hx_tmp6 = hx::IsNull( self4 );
            		}
            		else {
HXLINE(  46)			_hx_tmp6 = false;
            		}
HXDLIN(  46)		if (!(_hx_tmp6)) {
HXLINE(  46)			Bool _hx_tmp7;
HXDLIN(  46)			Bool _hx_tmp8;
HXDLIN(  46)			if (hx::IsNotNull( self3 )) {
HXLINE(  46)				_hx_tmp8 = hx::IsNotNull( self4 );
            			}
            			else {
HXLINE(  46)				_hx_tmp8 = false;
            			}
HXDLIN(  46)			if (_hx_tmp8) {
HXLINE(  46)				_hx_tmp7 = (self3->x == self4->x);
            			}
            			else {
HXLINE(  46)				_hx_tmp7 = false;
            			}
HXDLIN(  46)			if (_hx_tmp7) {
HXLINE(  46)				_hx_tmp5 = (self3->y == self4->y);
            			}
            			else {
HXLINE(  46)				_hx_tmp5 = false;
            			}
            		}
            		else {
HXLINE(  46)			_hx_tmp5 = true;
            		}
HXDLIN(  46)		this->assertTrue(_hx_tmp5,hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),46,HX_("test.TestFrames",54,94,be,54),HX_("testFrame2Concat",cb,8d,0f,cf)));
HXLINE(  49)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,a4,"a") = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(self->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN(  49)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,a5,"a") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)1.0));
HXDLIN(  49)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self5,"self") =  ::hxmath::math::Vector2Default_obj::__new(a5->x,a5->y);
HXDLIN(  49)		hx::AddEq(self5->x,originA->x);
HXDLIN(  49)		hx::AddEq(self5->y,originA->y);
HXDLIN(  49)		Bool _hx_tmp9;
HXDLIN(  49)		Bool _hx_tmp10;
HXDLIN(  49)		if (hx::IsNull( a4 )) {
HXLINE(  49)			_hx_tmp10 = hx::IsNull( self5 );
            		}
            		else {
HXLINE(  49)			_hx_tmp10 = false;
            		}
HXDLIN(  49)		if (!(_hx_tmp10)) {
HXLINE(  49)			Bool _hx_tmp11;
HXDLIN(  49)			Bool _hx_tmp12;
HXDLIN(  49)			if (hx::IsNotNull( a4 )) {
HXLINE(  49)				_hx_tmp12 = hx::IsNotNull( self5 );
            			}
            			else {
HXLINE(  49)				_hx_tmp12 = false;
            			}
HXDLIN(  49)			if (_hx_tmp12) {
HXLINE(  49)				_hx_tmp11 = (a4->x == self5->x);
            			}
            			else {
HXLINE(  49)				_hx_tmp11 = false;
            			}
HXDLIN(  49)			if (_hx_tmp11) {
HXLINE(  49)				_hx_tmp9 = (a4->y == self5->y);
            			}
            			else {
HXLINE(  49)				_hx_tmp9 = false;
            			}
            		}
            		else {
HXLINE(  49)			_hx_tmp9 = true;
            		}
HXDLIN(  49)		this->assertTrue(_hx_tmp9,hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),49,HX_("test.TestFrames",54,94,be,54),HX_("testFrame2Concat",cb,8d,0f,cf)));
HXLINE(  50)		Float _hx_tmp13 = ( (Float)( ::Dynamic(self->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN(  50)		this->assertEquals(_hx_tmp13,((Float)180.0),hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),50,HX_("test.TestFrames",54,94,be,54),HX_("testFrame2Concat",cb,8d,0f,cf)));
HXLINE(  53)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,m3,"m") = ( ( ::hxmath::math::Matrix3x2Default)( ::Dynamic(self->__Field(HX_("get_matrix",0a,a6,4f,ac),hx::paccDynamic))()) );
HXDLIN(  53)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,v1,"v") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)0.0));
HXDLIN(  53)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,m4,"m") =  ::hxmath::math::Matrix2x2Default_obj::__new(m3->a,m3->b,m3->c,m3->d);
HXDLIN(  53)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,a6,"a") =  ::hxmath::math::Vector2Default_obj::__new(((m4->a * v1->x) + (m4->b * v1->y)),((m4->c * v1->x) + (m4->d * v1->y)));
HXDLIN(  53)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b2,"b") =  ::hxmath::math::Vector2Default_obj::__new(m3->tx,m3->ty);
HXDLIN(  53)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self6,"self") =  ::hxmath::math::Vector2Default_obj::__new(a6->x,a6->y);
HXDLIN(  53)		hx::AddEq(self6->x,b2->x);
HXDLIN(  53)		hx::AddEq(self6->y,b2->y);
HXDLIN(  53)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,a7,"a") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)1.0));
HXDLIN(  53)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self7,"self") =  ::hxmath::math::Vector2Default_obj::__new(a7->x,a7->y);
HXDLIN(  53)		hx::AddEq(self7->x,originA->x);
HXDLIN(  53)		hx::AddEq(self7->y,originA->y);
HXDLIN(  53)		Bool _hx_tmp14;
HXDLIN(  53)		Bool _hx_tmp15;
HXDLIN(  53)		if (hx::IsNull( self6 )) {
HXLINE(  53)			_hx_tmp15 = hx::IsNull( self7 );
            		}
            		else {
HXLINE(  53)			_hx_tmp15 = false;
            		}
HXDLIN(  53)		if (!(_hx_tmp15)) {
HXLINE(  53)			Bool _hx_tmp16;
HXDLIN(  53)			Bool _hx_tmp17;
HXDLIN(  53)			if (hx::IsNotNull( self6 )) {
HXLINE(  53)				_hx_tmp17 = hx::IsNotNull( self7 );
            			}
            			else {
HXLINE(  53)				_hx_tmp17 = false;
            			}
HXDLIN(  53)			if (_hx_tmp17) {
HXLINE(  53)				_hx_tmp16 = (self6->x == self7->x);
            			}
            			else {
HXLINE(  53)				_hx_tmp16 = false;
            			}
HXDLIN(  53)			if (_hx_tmp16) {
HXLINE(  53)				_hx_tmp14 = (self6->y == self7->y);
            			}
            			else {
HXLINE(  53)				_hx_tmp14 = false;
            			}
            		}
            		else {
HXLINE(  53)			_hx_tmp14 = true;
            		}
HXDLIN(  53)		this->assertTrue(_hx_tmp14,hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),53,HX_("test.TestFrames",54,94,be,54),HX_("testFrame2Concat",cb,8d,0f,cf)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestFrames_obj,testFrame2Concat,(void))

void TestFrames_obj::testFrame3Concat(){
            	HX_STACK_FRAME("test.TestFrames","testFrame3Concat",0xc4da0de6,"test.TestFrames.testFrame3Concat","test/TestFrames.hx",57,0x83ec6e49)
            	HX_STACK_THIS(this)
HXLINE(  58)		HX_VARI(  ::hxmath::math::Vector3Default,originA) =  ::hxmath::math::Vector3Default_obj::__new(((Float)1.0),((Float)1.0),((Float)0.0));
HXLINE(  59)		HX_VARI(  ::hxmath::math::Vector3Default,axis) =  ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  59)		HX_VARI( Float,angleRadians) = (((Float)::Math_obj::PI / (Float)(int)180) * ((Float)90.0));
HXDLIN(  59)		HX_VARI( Float,cosHalfAngle) = ::Math_obj::cos(((Float)angleRadians / (Float)((Float)2.0)));
HXDLIN(  59)		HX_VARI( Float,sinHalfAngle) = ::Math_obj::sin(((Float)angleRadians / (Float)((Float)2.0)));
HXDLIN(  59)		HX_VARI( ::Dynamic,a) = ::hxmath::frames::_Frame3::Frame3_Impl__obj::_new(originA, ::hxmath::math::QuaternionDefault_obj::__new(cosHalfAngle,(sinHalfAngle * axis->x),(sinHalfAngle * axis->y),(sinHalfAngle * axis->z)));
HXLINE(  60)		 ::hxmath::math::Vector3Default _hx_tmp =  ::hxmath::math::Vector3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0));
HXDLIN(  60)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,axis1,"axis") =  ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  60)		HX_VARI_NAME( Float,angleRadians1,"angleRadians") = (((Float)::Math_obj::PI / (Float)(int)180) * ((Float)90.0));
HXDLIN(  60)		HX_VARI_NAME( Float,cosHalfAngle1,"cosHalfAngle") = ::Math_obj::cos(((Float)angleRadians1 / (Float)((Float)2.0)));
HXDLIN(  60)		HX_VARI_NAME( Float,sinHalfAngle1,"sinHalfAngle") = ::Math_obj::sin(((Float)angleRadians1 / (Float)((Float)2.0)));
HXDLIN(  60)		HX_VARI( ::Dynamic,b) = ::hxmath::frames::_Frame3::Frame3_Impl__obj::_new(_hx_tmp, ::hxmath::math::QuaternionDefault_obj::__new(cosHalfAngle1,(sinHalfAngle1 * axis1->x),(sinHalfAngle1 * axis1->y),(sinHalfAngle1 * axis1->z)));
HXLINE(  61)		 ::hxmath::math::Vector3Default _hx_tmp1 = ( ( ::hxmath::math::Vector3Default)( ::Dynamic(a->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN(  61)		 ::hxmath::math::QuaternionDefault _hx_tmp2 = ( ( ::hxmath::math::QuaternionDefault)( ::Dynamic(a->__Field(HX_("get_orientation",67,a6,e0,be),hx::paccDynamic))()) );
HXDLIN(  61)		HX_VARI( ::Dynamic,self) = ::hxmath::frames::_Frame3::Frame3_Impl__obj::_new(_hx_tmp1,_hx_tmp2);
HXDLIN(  61)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,this1,"this") = ( ( ::hxmath::math::QuaternionDefault)( ::Dynamic(self->__Field(HX_("get_orientation",67,a6,e0,be),hx::paccDynamic))()) );
HXDLIN(  61)		HX_VARI(  ::hxmath::math::Vector3Default,u) = ( ( ::hxmath::math::Vector3Default)( ::Dynamic(b->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN(  61)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,self1,"self") = this1;
HXDLIN(  61)		HX_VARI_NAME( Float,a1,"a") = (((Float)2.0) * (((self1->x * u->x) + (self1->y * u->y)) + (self1->z * u->z)));
HXDLIN(  61)		HX_VARI_NAME( Float,b1,"b") = ((((self1->s * self1->s) - (self1->x * self1->x)) - (self1->y * self1->y)) - (self1->z * self1->z));
HXDLIN(  61)		HX_VARI( Float,c) = (((Float)2.0) * self1->s);
HXDLIN(  61)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,this2,"this") =  ::hxmath::math::Vector3Default_obj::__new((((a1 * self1->x) + (b1 * u->x)) + (c * ((self1->y * u->z) - (self1->z * u->y)))),(((a1 * self1->y) + (b1 * u->y)) + (c * ((self1->z * u->x) - (self1->x * u->z)))),(((a1 * self1->z) + (b1 * u->z)) + (c * ((self1->x * u->y) - (self1->y * u->x)))));
HXDLIN(  61)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,a2,"a") = ( ( ::hxmath::math::Vector3Default)( ::Dynamic(self->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN(  61)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self2,"self") = this2;
HXDLIN(  61)		hx::AddEq(self2->x,a2->x);
HXDLIN(  61)		hx::AddEq(self2->y,a2->y);
HXDLIN(  61)		hx::AddEq(self2->z,a2->z);
HXDLIN(  61)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,a3,"a") = ( ( ::hxmath::math::QuaternionDefault)( ::Dynamic(self->__Field(HX_("get_orientation",67,a6,e0,be),hx::paccDynamic))()) );
HXDLIN(  61)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,b2,"b") = ( ( ::hxmath::math::QuaternionDefault)( ::Dynamic(b->__Field(HX_("get_orientation",67,a6,e0,be),hx::paccDynamic))()) );
HXDLIN(  61)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,self3,"self") =  ::hxmath::math::QuaternionDefault_obj::__new(((((a3->s * b2->s) - (a3->x * b2->x)) - (a3->y * b2->y)) - (a3->z * b2->z)),((((a3->s * b2->x) + (b2->s * a3->x)) + (a3->y * b2->z)) - (a3->z * b2->y)),((((a3->s * b2->y) + (b2->s * a3->y)) + (a3->z * b2->x)) - (a3->x * b2->z)),((((a3->s * b2->z) + (b2->s * a3->z)) + (a3->x * b2->y)) - (a3->y * b2->x)));
HXDLIN(  61)		Float _hx_tmp3 = ((((self3->s * self3->s) + (self3->x * self3->x)) + (self3->y * self3->y)) + (self3->z * self3->z));
HXDLIN(  61)		Float _hx_tmp4 = ::Math_obj::sqrt(_hx_tmp3);
HXDLIN(  61)		HX_VARI( Float,_g) = ((Float)((Float)1.0) / (Float)_hx_tmp4);
HXDLIN(  61)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,self4,"self") =  ::hxmath::math::QuaternionDefault_obj::__new(self3->s,self3->x,self3->y,self3->z);
HXDLIN(  61)		hx::MultEq(self4->s,_g);
HXDLIN(  61)		hx::MultEq(self4->x,_g);
HXDLIN(  61)		hx::MultEq(self4->y,_g);
HXDLIN(  61)		hx::MultEq(self4->z,_g);
HXDLIN(  61)		 ::Dynamic(self->__Field(HX_("set_orientation",73,23,ac,ba),hx::paccDynamic))(self4);
HXDLIN(  61)		 ::Dynamic(self->__Field(HX_("set_offset",d0,a5,44,54),hx::paccDynamic))(self2);
HXLINE(  63)		HX_VARI(  ::hxmath::math::Vector3Default,p) = ( ( ::hxmath::math::Vector3Default)( ::Dynamic(b->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN(  63)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,this3,"this") = ( ( ::hxmath::math::QuaternionDefault)( ::Dynamic(a->__Field(HX_("get_orientation",67,a6,e0,be),hx::paccDynamic))()) );
HXDLIN(  63)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,self5,"self") = this3;
HXDLIN(  63)		HX_VARI_NAME( Float,a4,"a") = (((Float)2.0) * (((self5->x * p->x) + (self5->y * p->y)) + (self5->z * p->z)));
HXDLIN(  63)		HX_VARI_NAME( Float,b3,"b") = ((((self5->s * self5->s) - (self5->x * self5->x)) - (self5->y * self5->y)) - (self5->z * self5->z));
HXDLIN(  63)		HX_VARI_NAME( Float,c1,"c") = (((Float)2.0) * self5->s);
HXDLIN(  63)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,this4,"this") =  ::hxmath::math::Vector3Default_obj::__new((((a4 * self5->x) + (b3 * p->x)) + (c1 * ((self5->y * p->z) - (self5->z * p->y)))),(((a4 * self5->y) + (b3 * p->y)) + (c1 * ((self5->z * p->x) - (self5->x * p->z)))),(((a4 * self5->z) + (b3 * p->z)) + (c1 * ((self5->x * p->y) - (self5->y * p->x)))));
HXDLIN(  63)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,a5,"a") = ( ( ::hxmath::math::Vector3Default)( ::Dynamic(a->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN(  63)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self6,"self") = this4;
HXDLIN(  63)		hx::AddEq(self6->x,a5->x);
HXDLIN(  63)		hx::AddEq(self6->y,a5->y);
HXDLIN(  63)		hx::AddEq(self6->z,a5->z);
HXDLIN(  63)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,a6,"a") =  ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)1.0),((Float)0.0));
HXDLIN(  63)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self7,"self") =  ::hxmath::math::Vector3Default_obj::__new(a6->x,a6->y,a6->z);
HXDLIN(  63)		hx::AddEq(self7->x,originA->x);
HXDLIN(  63)		hx::AddEq(self7->y,originA->y);
HXDLIN(  63)		hx::AddEq(self7->z,originA->z);
HXDLIN(  63)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self8,"self") =  ::hxmath::math::Vector3Default_obj::__new(self6->x,self6->y,self6->z);
HXDLIN(  63)		hx::SubEq(self8->x,self7->x);
HXDLIN(  63)		hx::SubEq(self8->y,self7->y);
HXDLIN(  63)		hx::SubEq(self8->z,self7->z);
HXDLIN(  63)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self9,"self") = self8;
HXDLIN(  63)		Float _hx_tmp5 = (((self9->x * self9->x) + (self9->y * self9->y)) + (self9->z * self9->z));
HXDLIN(  63)		Float _hx_tmp6 = ::Math_obj::sqrt(_hx_tmp5);
HXDLIN(  63)		this->assertApproxEquals(((Float)0.0),_hx_tmp6,null(),hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),63,HX_("test.TestFrames",54,94,be,54),HX_("testFrame3Concat",8c,04,a5,f8)));
HXLINE(  66)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,a7,"a") = ( ( ::hxmath::math::Vector3Default)( ::Dynamic(self->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN(  66)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,a8,"a") =  ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)1.0),((Float)0.0));
HXDLIN(  66)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self10,"self") =  ::hxmath::math::Vector3Default_obj::__new(a8->x,a8->y,a8->z);
HXDLIN(  66)		hx::AddEq(self10->x,originA->x);
HXDLIN(  66)		hx::AddEq(self10->y,originA->y);
HXDLIN(  66)		hx::AddEq(self10->z,originA->z);
HXDLIN(  66)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self11,"self") =  ::hxmath::math::Vector3Default_obj::__new(a7->x,a7->y,a7->z);
HXDLIN(  66)		hx::SubEq(self11->x,self10->x);
HXDLIN(  66)		hx::SubEq(self11->y,self10->y);
HXDLIN(  66)		hx::SubEq(self11->z,self10->z);
HXDLIN(  66)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self12,"self") = self11;
HXDLIN(  66)		Float _hx_tmp7 = (((self12->x * self12->x) + (self12->y * self12->y)) + (self12->z * self12->z));
HXDLIN(  66)		Float _hx_tmp8 = ::Math_obj::sqrt(_hx_tmp7);
HXDLIN(  66)		this->assertApproxEquals(((Float)0.0),_hx_tmp8,null(),hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),66,HX_("test.TestFrames",54,94,be,54),HX_("testFrame3Concat",8c,04,a5,f8)));
HXLINE(  69)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,a9,"a") = ( ( ::hxmath::math::QuaternionDefault)( ::Dynamic(self->__Field(HX_("get_orientation",67,a6,e0,be),hx::paccDynamic))()) );
HXDLIN(  69)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,b4,"b") =  ::hxmath::math::QuaternionDefault_obj::__new((int)1,(int)0,(int)0,(int)0);
HXDLIN(  69)		Float _hx_tmp9 = ((((a9->s * b4->s) + (a9->x * b4->x)) + (a9->y * b4->y)) + (a9->z * b4->z));
HXDLIN(  69)		this->assertApproxEquals(((Float)0.0),_hx_tmp9,null(),hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),69,HX_("test.TestFrames",54,94,be,54),HX_("testFrame3Concat",8c,04,a5,f8)));
HXLINE(  72)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,p1,"p") =  ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN(  72)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,this5,"this") = ( ( ::hxmath::math::QuaternionDefault)( ::Dynamic(self->__Field(HX_("get_orientation",67,a6,e0,be),hx::paccDynamic))()) );
HXDLIN(  72)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,self13,"self") = this5;
HXDLIN(  72)		HX_VARI_NAME( Float,a10,"a") = (((Float)2.0) * (((self13->x * p1->x) + (self13->y * p1->y)) + (self13->z * p1->z)));
HXDLIN(  72)		HX_VARI_NAME( Float,b5,"b") = ((((self13->s * self13->s) - (self13->x * self13->x)) - (self13->y * self13->y)) - (self13->z * self13->z));
HXDLIN(  72)		HX_VARI_NAME( Float,c2,"c") = (((Float)2.0) * self13->s);
HXDLIN(  72)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,this6,"this") =  ::hxmath::math::Vector3Default_obj::__new((((a10 * self13->x) + (b5 * p1->x)) + (c2 * ((self13->y * p1->z) - (self13->z * p1->y)))),(((a10 * self13->y) + (b5 * p1->y)) + (c2 * ((self13->z * p1->x) - (self13->x * p1->z)))),(((a10 * self13->z) + (b5 * p1->z)) + (c2 * ((self13->x * p1->y) - (self13->y * p1->x)))));
HXDLIN(  72)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,a11,"a") = ( ( ::hxmath::math::Vector3Default)( ::Dynamic(self->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN(  72)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self14,"self") = this6;
HXDLIN(  72)		hx::AddEq(self14->x,a11->x);
HXDLIN(  72)		hx::AddEq(self14->y,a11->y);
HXDLIN(  72)		hx::AddEq(self14->z,a11->z);
HXDLIN(  72)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,a12,"a") =  ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)1.0),((Float)0.0));
HXDLIN(  72)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self15,"self") =  ::hxmath::math::Vector3Default_obj::__new(a12->x,a12->y,a12->z);
HXDLIN(  72)		hx::AddEq(self15->x,originA->x);
HXDLIN(  72)		hx::AddEq(self15->y,originA->y);
HXDLIN(  72)		hx::AddEq(self15->z,originA->z);
HXDLIN(  72)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self16,"self") =  ::hxmath::math::Vector3Default_obj::__new(self14->x,self14->y,self14->z);
HXDLIN(  72)		hx::SubEq(self16->x,self15->x);
HXDLIN(  72)		hx::SubEq(self16->y,self15->y);
HXDLIN(  72)		hx::SubEq(self16->z,self15->z);
HXDLIN(  72)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self17,"self") = self16;
HXDLIN(  72)		Float _hx_tmp10 = (((self17->x * self17->x) + (self17->y * self17->y)) + (self17->z * self17->z));
HXDLIN(  72)		Float _hx_tmp11 = ::Math_obj::sqrt(_hx_tmp10);
HXDLIN(  72)		this->assertApproxEquals(((Float)0.0),_hx_tmp11,null(),hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),72,HX_("test.TestFrames",54,94,be,54),HX_("testFrame3Concat",8c,04,a5,f8)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestFrames_obj,testFrame3Concat,(void))

void TestFrames_obj::testFrame2LinearAffineTransform(){
            	HX_STACK_FRAME("test.TestFrames","testFrame2LinearAffineTransform",0x1e07b277,"test.TestFrames.testFrame2LinearAffineTransform","test/TestFrames.hx",76,0x83ec6e49)
            	HX_STACK_THIS(this)
HXLINE(  87)		HX_VARI(  ::hxmath::math::Vector2Default,originA) =  ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)1.0));
HXLINE(  88)		HX_VARI( ::Dynamic,a) = ::hxmath::frames::_Frame2::Frame2_Impl__obj::_new(originA,((Float)90.0));
HXLINE(  90)		HX_VARI(  ::hxmath::math::Vector2Default,testInA) =  ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)1.0));
HXLINE(  93)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,this1,"this") = ( ( ::hxmath::math::Matrix3x2Default)( ::Dynamic(a->__Field(HX_("get_matrix",0a,a6,4f,ac),hx::paccDynamic))()) );
HXDLIN(  93)		HX_VARI(  ::hxmath::math::Matrix3x2Default,self) = this1;
HXDLIN(  93)		HX_VARI(  ::hxmath::math::Matrix2x2Default,m) =  ::hxmath::math::Matrix2x2Default_obj::__new(self->a,self->b,self->c,self->d);
HXDLIN(  93)		HX_VARI(  ::hxmath::math::Vector2Default,testLinearInOuter) =  ::hxmath::math::Vector2Default_obj::__new(((m->a * testInA->x) + (m->b * testInA->y)),((m->c * testInA->x) + (m->d * testInA->y)));
HXLINE(  94)		HX_VARI(  ::hxmath::math::Vector2Default,expectedLinearResult) =  ::hxmath::math::Vector2Default_obj::__new(((Float)-1.0),((Float)1.0));
HXLINE(  95)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self1,"self") =  ::hxmath::math::Vector2Default_obj::__new(testLinearInOuter->x,testLinearInOuter->y);
HXDLIN(  95)		hx::SubEq(self1->x,expectedLinearResult->x);
HXDLIN(  95)		hx::SubEq(self1->y,expectedLinearResult->y);
HXDLIN(  95)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self2,"self") = self1;
HXDLIN(  95)		Float _hx_tmp = ((self2->x * self2->x) + (self2->y * self2->y));
HXDLIN(  95)		Float _hx_tmp1 = ::Math_obj::sqrt(_hx_tmp);
HXDLIN(  95)		this->assertApproxEquals(_hx_tmp1,((Float)0.0),null(),hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),95,HX_("test.TestFrames",54,94,be,54),HX_("testFrame2LinearAffineTransform",91,26,3c,2e)));
HXLINE(  98)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,m1,"m") = ( ( ::hxmath::math::Matrix3x2Default)( ::Dynamic(a->__Field(HX_("get_matrix",0a,a6,4f,ac),hx::paccDynamic))()) );
HXDLIN(  98)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,m2,"m") =  ::hxmath::math::Matrix2x2Default_obj::__new(m1->a,m1->b,m1->c,m1->d);
HXDLIN(  98)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,a1,"a") =  ::hxmath::math::Vector2Default_obj::__new(((m2->a * testInA->x) + (m2->b * testInA->y)),((m2->c * testInA->x) + (m2->d * testInA->y)));
HXDLIN(  98)		HX_VARI(  ::hxmath::math::Vector2Default,b) =  ::hxmath::math::Vector2Default_obj::__new(m1->tx,m1->ty);
HXDLIN(  98)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self3,"self") =  ::hxmath::math::Vector2Default_obj::__new(a1->x,a1->y);
HXDLIN(  98)		hx::AddEq(self3->x,b->x);
HXDLIN(  98)		hx::AddEq(self3->y,b->y);
HXLINE(  99)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self4,"self") =  ::hxmath::math::Vector2Default_obj::__new(expectedLinearResult->x,expectedLinearResult->y);
HXDLIN(  99)		hx::AddEq(self4->x,originA->x);
HXDLIN(  99)		hx::AddEq(self4->y,originA->y);
HXLINE( 100)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self5,"self") =  ::hxmath::math::Vector2Default_obj::__new(self3->x,self3->y);
HXDLIN( 100)		hx::SubEq(self5->x,self4->x);
HXDLIN( 100)		hx::SubEq(self5->y,self4->y);
HXDLIN( 100)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self6,"self") = self5;
HXDLIN( 100)		Float _hx_tmp2 = ((self6->x * self6->x) + (self6->y * self6->y));
HXDLIN( 100)		Float _hx_tmp3 = ::Math_obj::sqrt(_hx_tmp2);
HXDLIN( 100)		this->assertApproxEquals(_hx_tmp3,((Float)0.0),null(),hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),100,HX_("test.TestFrames",54,94,be,54),HX_("testFrame2LinearAffineTransform",91,26,3c,2e)));
HXLINE( 103)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,this2,"this") = ( ( ::hxmath::math::Matrix3x2Default)( ::Dynamic(a->__Field(HX_("get_matrix",0a,a6,4f,ac),hx::paccDynamic))()) );
HXDLIN( 103)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,self7,"self") = this2;
HXDLIN( 103)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,self8,"self") =  ::hxmath::math::Matrix2x2Default_obj::__new(self7->a,self7->b,self7->c,self7->d);
HXDLIN( 103)		HX_VARI(  ::hxmath::math::Vector2Default,testLinearBackToInner) =  ::hxmath::math::Vector2Default_obj::__new(((self8->a * testLinearInOuter->x) + (self8->c * testLinearInOuter->y)),((self8->b * testLinearInOuter->x) + (self8->d * testLinearInOuter->y)));
HXLINE( 104)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self9,"self") =  ::hxmath::math::Vector2Default_obj::__new(testLinearBackToInner->x,testLinearBackToInner->y);
HXDLIN( 104)		hx::SubEq(self9->x,testInA->x);
HXDLIN( 104)		hx::SubEq(self9->y,testInA->y);
HXDLIN( 104)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self10,"self") = self9;
HXDLIN( 104)		Float _hx_tmp4 = ((self10->x * self10->x) + (self10->y * self10->y));
HXDLIN( 104)		Float _hx_tmp5 = ::Math_obj::sqrt(_hx_tmp4);
HXDLIN( 104)		this->assertApproxEquals(_hx_tmp5,((Float)0.0),null(),hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),104,HX_("test.TestFrames",54,94,be,54),HX_("testFrame2LinearAffineTransform",91,26,3c,2e)));
HXLINE( 107)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,this3,"this") = ( ( ::hxmath::math::Matrix3x2Default)( ::Dynamic(a->__Field(HX_("get_matrix",0a,a6,4f,ac),hx::paccDynamic))()) );
HXDLIN( 107)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,self11,"self") = this3;
HXDLIN( 107)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,this4,"this") =  ::hxmath::math::Matrix2x2Default_obj::__new(self11->a,self11->b,self11->c,self11->d);
HXDLIN( 107)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b1,"b") = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(a->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 107)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self12,"self") =  ::hxmath::math::Vector2Default_obj::__new(self3->x,self3->y);
HXDLIN( 107)		hx::SubEq(self12->x,b1->x);
HXDLIN( 107)		hx::SubEq(self12->y,b1->y);
HXDLIN( 107)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,self13,"self") = this4;
HXDLIN( 107)		HX_VARI(  ::hxmath::math::Vector2Default,testAffineBackToInner) =  ::hxmath::math::Vector2Default_obj::__new(((self13->a * self12->x) + (self13->c * self12->y)),((self13->b * self12->x) + (self13->d * self12->y)));
HXLINE( 108)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self14,"self") =  ::hxmath::math::Vector2Default_obj::__new(testAffineBackToInner->x,testAffineBackToInner->y);
HXDLIN( 108)		hx::SubEq(self14->x,testInA->x);
HXDLIN( 108)		hx::SubEq(self14->y,testInA->y);
HXDLIN( 108)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self15,"self") = self14;
HXDLIN( 108)		Float _hx_tmp6 = ((self15->x * self15->x) + (self15->y * self15->y));
HXDLIN( 108)		Float _hx_tmp7 = ::Math_obj::sqrt(_hx_tmp6);
HXDLIN( 108)		this->assertApproxEquals(_hx_tmp7,((Float)0.0),null(),hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),108,HX_("test.TestFrames",54,94,be,54),HX_("testFrame2LinearAffineTransform",91,26,3c,2e)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestFrames_obj,testFrame2LinearAffineTransform,(void))

void TestFrames_obj::testFrame2Inverse(){
            	HX_STACK_FRAME("test.TestFrames","testFrame2Inverse",0x70790c7f,"test.TestFrames.testFrame2Inverse","test/TestFrames.hx",112,0x83ec6e49)
            	HX_STACK_THIS(this)
HXLINE( 114)		HX_VARI( ::Dynamic,a) = ::hxmath::frames::_Frame2::Frame2_Impl__obj::_new( ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)1.0)),((Float)90.0));
HXLINE( 116)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,this1,"this") = ( ( ::hxmath::math::Matrix3x2Default)( ::Dynamic(a->__Field(HX_("get_matrix",0a,a6,4f,ac),hx::paccDynamic))()) );
HXDLIN( 116)		HX_VARI(  ::hxmath::math::Matrix3x2Default,self) = this1;
HXDLIN( 116)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,this2,"this") =  ::hxmath::math::Matrix2x2Default_obj::__new(self->a,self->b,self->c,self->d);
HXDLIN( 116)		HX_VARI(  ::hxmath::math::Vector2Default,v) = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(a->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 116)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,self1,"self") = this2;
HXDLIN( 116)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self2,"self") =  ::hxmath::math::Vector2Default_obj::__new(((self1->a * v->x) + (self1->c * v->y)),((self1->b * v->x) + (self1->d * v->y)));
HXDLIN( 116)		self2->x = -(self2->x);
HXDLIN( 116)		self2->y = -(self2->y);
HXDLIN( 116)		HX_VARI( ::Dynamic,aInv) = ::hxmath::frames::_Frame2::Frame2_Impl__obj::_new(self2,-(( (Float)( ::Dynamic(a->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) )));
HXLINE( 121)		 ::hxmath::math::Vector2Default _hx_tmp = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(a->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 121)		Float _hx_tmp1 = ( (Float)( ::Dynamic(a->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 121)		HX_VARI_NAME( ::Dynamic,self3,"self") = ::hxmath::frames::_Frame2::Frame2_Impl__obj::_new(_hx_tmp,_hx_tmp1);
HXDLIN( 121)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,this3,"this") = ( ( ::hxmath::math::Matrix3x2Default)( ::Dynamic(self3->__Field(HX_("get_matrix",0a,a6,4f,ac),hx::paccDynamic))()) );
HXDLIN( 121)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,self4,"self") = this3;
HXDLIN( 121)		HX_VARI(  ::hxmath::math::Matrix2x2Default,m) =  ::hxmath::math::Matrix2x2Default_obj::__new(self4->a,self4->b,self4->c,self4->d);
HXDLIN( 121)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,v1,"v") = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(aInv->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 121)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,this4,"this") =  ::hxmath::math::Vector2Default_obj::__new(((m->a * v1->x) + (m->b * v1->y)),((m->c * v1->x) + (m->d * v1->y)));
HXDLIN( 121)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,a1,"a") = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(self3->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 121)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self5,"self") = this4;
HXDLIN( 121)		hx::AddEq(self5->x,a1->x);
HXDLIN( 121)		hx::AddEq(self5->y,a1->y);
HXDLIN( 121)		Float _hx_tmp2 = ( (Float)( ::Dynamic(self3->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 121)		Float _hx_tmp3 = ( (Float)( ::Dynamic(aInv->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 121)		HX_VARI( Float,x) = (_hx_tmp2 + _hx_tmp3);
HXDLIN( 121)		Float _hx_tmp4;
HXDLIN( 121)		if ((x < (int)0)) {
HXLINE( 121)			_hx_tmp4 = ((int)360 - hx::Mod(-(x),(int)360));
            		}
            		else {
HXLINE( 121)			_hx_tmp4 = hx::Mod(x,(int)360);
            		}
HXDLIN( 121)		 ::Dynamic(self3->__Field(HX_("set_angleDegrees",11,12,5d,98),hx::paccDynamic))(_hx_tmp4);
HXDLIN( 121)		 ::Dynamic(self3->__Field(HX_("set_offset",d0,a5,44,54),hx::paccDynamic))(self5);
HXDLIN( 121)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,a2,"a") = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(self3->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 121)		HX_VARI(  ::hxmath::math::Vector2Default,b) =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)0.0));
HXDLIN( 121)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self6,"self") =  ::hxmath::math::Vector2Default_obj::__new(a2->x,a2->y);
HXDLIN( 121)		hx::SubEq(self6->x,b->x);
HXDLIN( 121)		hx::SubEq(self6->y,b->y);
HXDLIN( 121)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self7,"self") = self6;
HXDLIN( 121)		Float _hx_tmp5 = ((self7->x * self7->x) + (self7->y * self7->y));
HXDLIN( 121)		Float _hx_tmp6 = ::Math_obj::sqrt(_hx_tmp5);
HXDLIN( 121)		this->assertApproxEquals(_hx_tmp6,((Float)0.0),null(),hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),121,HX_("test.TestFrames",54,94,be,54),HX_("testFrame2Inverse",19,e7,45,8e)));
HXLINE( 122)		 ::hxmath::math::Vector2Default _hx_tmp7 = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(aInv->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 122)		Float _hx_tmp8 = ( (Float)( ::Dynamic(aInv->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 122)		HX_VARI_NAME( ::Dynamic,self8,"self") = ::hxmath::frames::_Frame2::Frame2_Impl__obj::_new(_hx_tmp7,_hx_tmp8);
HXDLIN( 122)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,this5,"this") = ( ( ::hxmath::math::Matrix3x2Default)( ::Dynamic(self8->__Field(HX_("get_matrix",0a,a6,4f,ac),hx::paccDynamic))()) );
HXDLIN( 122)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,self9,"self") = this5;
HXDLIN( 122)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,m1,"m") =  ::hxmath::math::Matrix2x2Default_obj::__new(self9->a,self9->b,self9->c,self9->d);
HXDLIN( 122)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,v2,"v") = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(a->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 122)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,this6,"this") =  ::hxmath::math::Vector2Default_obj::__new(((m1->a * v2->x) + (m1->b * v2->y)),((m1->c * v2->x) + (m1->d * v2->y)));
HXDLIN( 122)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,a3,"a") = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(self8->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 122)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self10,"self") = this6;
HXDLIN( 122)		hx::AddEq(self10->x,a3->x);
HXDLIN( 122)		hx::AddEq(self10->y,a3->y);
HXDLIN( 122)		Float _hx_tmp9 = ( (Float)( ::Dynamic(self8->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 122)		Float _hx_tmp10 = ( (Float)( ::Dynamic(a->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 122)		HX_VARI_NAME( Float,x1,"x") = (_hx_tmp9 + _hx_tmp10);
HXDLIN( 122)		Float _hx_tmp11;
HXDLIN( 122)		if ((x1 < (int)0)) {
HXLINE( 122)			_hx_tmp11 = ((int)360 - hx::Mod(-(x1),(int)360));
            		}
            		else {
HXLINE( 122)			_hx_tmp11 = hx::Mod(x1,(int)360);
            		}
HXDLIN( 122)		 ::Dynamic(self8->__Field(HX_("set_angleDegrees",11,12,5d,98),hx::paccDynamic))(_hx_tmp11);
HXDLIN( 122)		 ::Dynamic(self8->__Field(HX_("set_offset",d0,a5,44,54),hx::paccDynamic))(self10);
HXDLIN( 122)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,a4,"a") = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(self8->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 122)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b1,"b") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)0.0));
HXDLIN( 122)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self11,"self") =  ::hxmath::math::Vector2Default_obj::__new(a4->x,a4->y);
HXDLIN( 122)		hx::SubEq(self11->x,b1->x);
HXDLIN( 122)		hx::SubEq(self11->y,b1->y);
HXDLIN( 122)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self12,"self") = self11;
HXDLIN( 122)		Float _hx_tmp12 = ((self12->x * self12->x) + (self12->y * self12->y));
HXDLIN( 122)		Float _hx_tmp13 = ::Math_obj::sqrt(_hx_tmp12);
HXDLIN( 122)		this->assertApproxEquals(_hx_tmp13,((Float)0.0),null(),hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),122,HX_("test.TestFrames",54,94,be,54),HX_("testFrame2Inverse",19,e7,45,8e)));
HXLINE( 123)		 ::hxmath::math::Vector2Default _hx_tmp14 = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(a->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 123)		Float _hx_tmp15 = ( (Float)( ::Dynamic(a->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 123)		HX_VARI_NAME( ::Dynamic,self13,"self") = ::hxmath::frames::_Frame2::Frame2_Impl__obj::_new(_hx_tmp14,_hx_tmp15);
HXDLIN( 123)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,this7,"this") = ( ( ::hxmath::math::Matrix3x2Default)( ::Dynamic(self13->__Field(HX_("get_matrix",0a,a6,4f,ac),hx::paccDynamic))()) );
HXDLIN( 123)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,self14,"self") = this7;
HXDLIN( 123)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,m2,"m") =  ::hxmath::math::Matrix2x2Default_obj::__new(self14->a,self14->b,self14->c,self14->d);
HXDLIN( 123)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,v3,"v") = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(aInv->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 123)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,this8,"this") =  ::hxmath::math::Vector2Default_obj::__new(((m2->a * v3->x) + (m2->b * v3->y)),((m2->c * v3->x) + (m2->d * v3->y)));
HXDLIN( 123)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,a5,"a") = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(self13->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 123)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self15,"self") = this8;
HXDLIN( 123)		hx::AddEq(self15->x,a5->x);
HXDLIN( 123)		hx::AddEq(self15->y,a5->y);
HXDLIN( 123)		Float _hx_tmp16 = ( (Float)( ::Dynamic(self13->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 123)		Float _hx_tmp17 = ( (Float)( ::Dynamic(aInv->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 123)		HX_VARI_NAME( Float,x2,"x") = (_hx_tmp16 + _hx_tmp17);
HXDLIN( 123)		Float _hx_tmp18;
HXDLIN( 123)		if ((x2 < (int)0)) {
HXLINE( 123)			_hx_tmp18 = ((int)360 - hx::Mod(-(x2),(int)360));
            		}
            		else {
HXLINE( 123)			_hx_tmp18 = hx::Mod(x2,(int)360);
            		}
HXDLIN( 123)		 ::Dynamic(self13->__Field(HX_("set_angleDegrees",11,12,5d,98),hx::paccDynamic))(_hx_tmp18);
HXDLIN( 123)		 ::Dynamic(self13->__Field(HX_("set_offset",d0,a5,44,54),hx::paccDynamic))(self15);
HXDLIN( 123)		Float _hx_tmp19 = ( (Float)( ::Dynamic(self13->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 123)		this->assertApproxEquals(_hx_tmp19,((Float)0.0),null(),hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),123,HX_("test.TestFrames",54,94,be,54),HX_("testFrame2Inverse",19,e7,45,8e)));
HXLINE( 124)		 ::hxmath::math::Vector2Default _hx_tmp20 = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(aInv->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 124)		Float _hx_tmp21 = ( (Float)( ::Dynamic(aInv->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 124)		HX_VARI_NAME( ::Dynamic,self16,"self") = ::hxmath::frames::_Frame2::Frame2_Impl__obj::_new(_hx_tmp20,_hx_tmp21);
HXDLIN( 124)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,this9,"this") = ( ( ::hxmath::math::Matrix3x2Default)( ::Dynamic(self16->__Field(HX_("get_matrix",0a,a6,4f,ac),hx::paccDynamic))()) );
HXDLIN( 124)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,self17,"self") = this9;
HXDLIN( 124)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,m3,"m") =  ::hxmath::math::Matrix2x2Default_obj::__new(self17->a,self17->b,self17->c,self17->d);
HXDLIN( 124)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,v4,"v") = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(a->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 124)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,this10,"this") =  ::hxmath::math::Vector2Default_obj::__new(((m3->a * v4->x) + (m3->b * v4->y)),((m3->c * v4->x) + (m3->d * v4->y)));
HXDLIN( 124)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,a6,"a") = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(self16->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 124)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self18,"self") = this10;
HXDLIN( 124)		hx::AddEq(self18->x,a6->x);
HXDLIN( 124)		hx::AddEq(self18->y,a6->y);
HXDLIN( 124)		Float _hx_tmp22 = ( (Float)( ::Dynamic(self16->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 124)		Float _hx_tmp23 = ( (Float)( ::Dynamic(a->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 124)		HX_VARI_NAME( Float,x3,"x") = (_hx_tmp22 + _hx_tmp23);
HXDLIN( 124)		Float _hx_tmp24;
HXDLIN( 124)		if ((x3 < (int)0)) {
HXLINE( 124)			_hx_tmp24 = ((int)360 - hx::Mod(-(x3),(int)360));
            		}
            		else {
HXLINE( 124)			_hx_tmp24 = hx::Mod(x3,(int)360);
            		}
HXDLIN( 124)		 ::Dynamic(self16->__Field(HX_("set_angleDegrees",11,12,5d,98),hx::paccDynamic))(_hx_tmp24);
HXDLIN( 124)		 ::Dynamic(self16->__Field(HX_("set_offset",d0,a5,44,54),hx::paccDynamic))(self18);
HXDLIN( 124)		Float _hx_tmp25 = ( (Float)( ::Dynamic(self16->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 124)		this->assertApproxEquals(_hx_tmp25,((Float)0.0),null(),hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),124,HX_("test.TestFrames",54,94,be,54),HX_("testFrame2Inverse",19,e7,45,8e)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestFrames_obj,testFrame2Inverse,(void))

void TestFrames_obj::testFlxSpriteFrame2(){
            	HX_STACK_FRAME("test.TestFrames","testFlxSpriteFrame2",0x6eaa7b90,"test.TestFrames.testFlxSpriteFrame2","test/TestFrames.hx",128,0x83ec6e49)
            	HX_STACK_THIS(this)
HXLINE( 129)		HX_VARI(  ::test::FlxObjectMock,dummySprite) =  ::test::FlxObjectMock_obj::__new();
HXLINE( 130)		HX_VARI( ::Dynamic,frame) =  ::hxmath::frames::adapters::FlxSpriteFrame2_obj::__new(dummySprite);
HXLINE( 131)		 ::Dynamic(frame->__Field(HX_("set_offset",d0,a5,44,54),hx::paccDynamic))( ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)0.0)));
HXLINE( 132)		 ::Dynamic(frame->__Field(HX_("set_angleDegrees",11,12,5d,98),hx::paccDynamic))((int)90);
HXLINE( 134)		this->assertEquals(( ( ::hxmath::math::Vector2Default)( ::Dynamic(frame->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) )->x,dummySprite->x,hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),134,HX_("test.TestFrames",54,94,be,54),HX_("testFlxSpriteFrame2",aa,b0,56,3d)));
HXLINE( 135)		this->assertEquals(( ( ::hxmath::math::Vector2Default)( ::Dynamic(frame->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) )->y,dummySprite->y,hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),135,HX_("test.TestFrames",54,94,be,54),HX_("testFlxSpriteFrame2",aa,b0,56,3d)));
HXLINE( 136)		Float _hx_tmp = ( (Float)( ::Dynamic(frame->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 136)		this->assertEquals(_hx_tmp,dummySprite->angle,hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),136,HX_("test.TestFrames",54,94,be,54),HX_("testFlxSpriteFrame2",aa,b0,56,3d)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestFrames_obj,testFlxSpriteFrame2,(void))

void TestFrames_obj::testLerpFrame2(){
            	HX_STACK_FRAME("test.TestFrames","testLerpFrame2",0x2d5d2f08,"test.TestFrames.testLerpFrame2","test/TestFrames.hx",140,0x83ec6e49)
            	HX_STACK_THIS(this)
HXLINE( 141)		HX_VARI( ::Dynamic,frameA) = ::hxmath::frames::_Frame2::Frame2_Impl__obj::_new( ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)0.0)),((Float)330.0));
HXLINE( 142)		HX_VARI( ::Dynamic,frameB) = ::hxmath::frames::_Frame2::Frame2_Impl__obj::_new( ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)1.0)),((Float)60.0));
HXLINE( 145)		HX_VARI(  ::hxmath::math::Vector2Default,a) = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(frameA->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 145)		HX_VARI(  ::hxmath::math::Vector2Default,b) = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(frameB->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 145)		 ::hxmath::math::Vector2Default _hx_tmp =  ::hxmath::math::Vector2Default_obj::__new(((((Float)0.5) * a->x) + (((Float)0.5) * b->x)),((((Float)0.5) * a->y) + (((Float)0.5) * b->y)));
HXDLIN( 145)		HX_VARI_NAME( Float,a1,"a") = ( (Float)( ::Dynamic(frameA->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 145)		HX_VARI_NAME( Float,b1,"b") = ( (Float)( ::Dynamic(frameB->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 145)		Float _hx_tmp1 = ::Math_obj::abs((a1 - b1));
HXDLIN( 145)		if ((_hx_tmp1 > ((Float)180.))) {
HXLINE( 145)			Bool _hx_tmp2 = (a1 < b1);
HXDLIN( 145)			if (_hx_tmp2) {
HXLINE( 145)				hx::AddEq(a1,(int)360);
            			}
            			else {
HXLINE( 145)				hx::AddEq(b1,(int)360);
            			}
            		}
HXDLIN( 145)		HX_VARI( Float,x) = ((((Float)0.5) * a1) + (((Float)0.5) * b1));
HXDLIN( 145)		Float _hx_tmp3;
HXDLIN( 145)		if ((x < (int)0)) {
HXLINE( 145)			_hx_tmp3 = ((int)360 - hx::Mod(-(x),(int)360));
            		}
            		else {
HXLINE( 145)			_hx_tmp3 = hx::Mod(x,(int)360);
            		}
HXDLIN( 145)		HX_VARI( ::Dynamic,frameC) = ::hxmath::frames::_Frame2::Frame2_Impl__obj::_new(_hx_tmp,_hx_tmp3);
HXLINE( 146)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,a2,"a") = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(frameB->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 146)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b2,"b") = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(frameA->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 146)		 ::hxmath::math::Vector2Default _hx_tmp4 =  ::hxmath::math::Vector2Default_obj::__new(((((Float)0.5) * a2->x) + (((Float)0.5) * b2->x)),((((Float)0.5) * a2->y) + (((Float)0.5) * b2->y)));
HXDLIN( 146)		HX_VARI_NAME( Float,a3,"a") = ( (Float)( ::Dynamic(frameB->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 146)		HX_VARI_NAME( Float,b3,"b") = ( (Float)( ::Dynamic(frameA->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 146)		Float _hx_tmp5 = ::Math_obj::abs((a3 - b3));
HXDLIN( 146)		if ((_hx_tmp5 > ((Float)180.))) {
HXLINE( 146)			Bool _hx_tmp6 = (a3 < b3);
HXDLIN( 146)			if (_hx_tmp6) {
HXLINE( 146)				hx::AddEq(a3,(int)360);
            			}
            			else {
HXLINE( 146)				hx::AddEq(b3,(int)360);
            			}
            		}
HXDLIN( 146)		HX_VARI_NAME( Float,x1,"x") = ((((Float)0.5) * a3) + (((Float)0.5) * b3));
HXDLIN( 146)		Float _hx_tmp7;
HXDLIN( 146)		if ((x1 < (int)0)) {
HXLINE( 146)			_hx_tmp7 = ((int)360 - hx::Mod(-(x1),(int)360));
            		}
            		else {
HXLINE( 146)			_hx_tmp7 = hx::Mod(x1,(int)360);
            		}
HXDLIN( 146)		HX_VARI( ::Dynamic,frameC2) = ::hxmath::frames::_Frame2::Frame2_Impl__obj::_new(_hx_tmp4,_hx_tmp7);
HXLINE( 147)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,a4,"a") = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(frameC->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 147)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b4,"b") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.5),((Float)0.5));
HXDLIN( 147)		HX_VARI(  ::hxmath::math::Vector2Default,self) =  ::hxmath::math::Vector2Default_obj::__new(a4->x,a4->y);
HXDLIN( 147)		hx::SubEq(self->x,b4->x);
HXDLIN( 147)		hx::SubEq(self->y,b4->y);
HXDLIN( 147)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self1,"self") = self;
HXDLIN( 147)		Float _hx_tmp8 = ((self1->x * self1->x) + (self1->y * self1->y));
HXDLIN( 147)		Float _hx_tmp9 = ::Math_obj::sqrt(_hx_tmp8);
HXDLIN( 147)		this->assertApproxEquals(_hx_tmp9,((Float)0.0),null(),hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),147,HX_("test.TestFrames",54,94,be,54),HX_("testLerpFrame2",2e,10,91,83)));
HXLINE( 148)		Float _hx_tmp10 = ( (Float)( ::Dynamic(frameC->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 148)		this->assertApproxEquals(_hx_tmp10,((Float)15.0),null(),hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),148,HX_("test.TestFrames",54,94,be,54),HX_("testLerpFrame2",2e,10,91,83)));
HXLINE( 149)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,a5,"a") = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(frameC2->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 149)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b5,"b") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.5),((Float)0.5));
HXDLIN( 149)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self2,"self") =  ::hxmath::math::Vector2Default_obj::__new(a5->x,a5->y);
HXDLIN( 149)		hx::SubEq(self2->x,b5->x);
HXDLIN( 149)		hx::SubEq(self2->y,b5->y);
HXDLIN( 149)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self3,"self") = self2;
HXDLIN( 149)		Float _hx_tmp11 = ((self3->x * self3->x) + (self3->y * self3->y));
HXDLIN( 149)		Float _hx_tmp12 = ::Math_obj::sqrt(_hx_tmp11);
HXDLIN( 149)		this->assertApproxEquals(_hx_tmp12,((Float)0.0),null(),hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),149,HX_("test.TestFrames",54,94,be,54),HX_("testLerpFrame2",2e,10,91,83)));
HXLINE( 150)		Float _hx_tmp13 = ( (Float)( ::Dynamic(frameC2->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 150)		this->assertApproxEquals(_hx_tmp13,((Float)15.0),null(),hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),150,HX_("test.TestFrames",54,94,be,54),HX_("testLerpFrame2",2e,10,91,83)));
HXLINE( 152)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,a6,"a") = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(frameA->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 152)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b6,"b") = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(frameB->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 152)		 ::hxmath::math::Vector2Default _hx_tmp14 =  ::hxmath::math::Vector2Default_obj::__new(((((Float)0.666666666666666741) * a6->x) + (((Float)0.333333333333333315) * b6->x)),((((Float)0.666666666666666741) * a6->y) + (((Float)0.333333333333333315) * b6->y)));
HXDLIN( 152)		HX_VARI_NAME( Float,a7,"a") = ( (Float)( ::Dynamic(frameA->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 152)		HX_VARI_NAME( Float,b7,"b") = ( (Float)( ::Dynamic(frameB->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 152)		Float _hx_tmp15 = ::Math_obj::abs((a7 - b7));
HXDLIN( 152)		if ((_hx_tmp15 > ((Float)180.))) {
HXLINE( 152)			Bool _hx_tmp16 = (a7 < b7);
HXDLIN( 152)			if (_hx_tmp16) {
HXLINE( 152)				hx::AddEq(a7,(int)360);
            			}
            			else {
HXLINE( 152)				hx::AddEq(b7,(int)360);
            			}
            		}
HXDLIN( 152)		HX_VARI_NAME( Float,x2,"x") = ((((Float)0.666666666666666741) * a7) + (((Float)0.333333333333333315) * b7));
HXDLIN( 152)		Float _hx_tmp17;
HXDLIN( 152)		if ((x2 < (int)0)) {
HXLINE( 152)			_hx_tmp17 = ((int)360 - hx::Mod(-(x2),(int)360));
            		}
            		else {
HXLINE( 152)			_hx_tmp17 = hx::Mod(x2,(int)360);
            		}
HXDLIN( 152)		HX_VARI( ::Dynamic,frameD) = ::hxmath::frames::_Frame2::Frame2_Impl__obj::_new(_hx_tmp14,_hx_tmp17);
HXLINE( 153)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,a8,"a") = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(frameB->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 153)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b8,"b") = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(frameA->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 153)		 ::hxmath::math::Vector2Default _hx_tmp18 =  ::hxmath::math::Vector2Default_obj::__new(((((Float)0.33333333333333337) * a8->x) + (((Float)0.66666666666666663) * b8->x)),((((Float)0.33333333333333337) * a8->y) + (((Float)0.66666666666666663) * b8->y)));
HXDLIN( 153)		HX_VARI_NAME( Float,a9,"a") = ( (Float)( ::Dynamic(frameB->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 153)		HX_VARI_NAME( Float,b9,"b") = ( (Float)( ::Dynamic(frameA->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 153)		Float _hx_tmp19 = ::Math_obj::abs((a9 - b9));
HXDLIN( 153)		if ((_hx_tmp19 > ((Float)180.))) {
HXLINE( 153)			Bool _hx_tmp20 = (a9 < b9);
HXDLIN( 153)			if (_hx_tmp20) {
HXLINE( 153)				hx::AddEq(a9,(int)360);
            			}
            			else {
HXLINE( 153)				hx::AddEq(b9,(int)360);
            			}
            		}
HXDLIN( 153)		HX_VARI_NAME( Float,x3,"x") = ((((Float)0.33333333333333337) * a9) + (((Float)0.66666666666666663) * b9));
HXDLIN( 153)		Float _hx_tmp21;
HXDLIN( 153)		if ((x3 < (int)0)) {
HXLINE( 153)			_hx_tmp21 = ((int)360 - hx::Mod(-(x3),(int)360));
            		}
            		else {
HXLINE( 153)			_hx_tmp21 = hx::Mod(x3,(int)360);
            		}
HXDLIN( 153)		HX_VARI( ::Dynamic,frameD2) = ::hxmath::frames::_Frame2::Frame2_Impl__obj::_new(_hx_tmp18,_hx_tmp21);
HXLINE( 154)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,a10,"a") = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(frameD->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 154)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b10,"b") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.66666666666666663),((Float)0.333333333333333315));
HXDLIN( 154)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self4,"self") =  ::hxmath::math::Vector2Default_obj::__new(a10->x,a10->y);
HXDLIN( 154)		hx::SubEq(self4->x,b10->x);
HXDLIN( 154)		hx::SubEq(self4->y,b10->y);
HXDLIN( 154)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self5,"self") = self4;
HXDLIN( 154)		Float _hx_tmp22 = ((self5->x * self5->x) + (self5->y * self5->y));
HXDLIN( 154)		Float _hx_tmp23 = ::Math_obj::sqrt(_hx_tmp22);
HXDLIN( 154)		this->assertApproxEquals(_hx_tmp23,((Float)0.0),null(),hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),154,HX_("test.TestFrames",54,94,be,54),HX_("testLerpFrame2",2e,10,91,83)));
HXLINE( 155)		Float _hx_tmp24 = ( (Float)( ::Dynamic(frameD->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 155)		this->assertApproxEquals(_hx_tmp24,((Float)0.0),null(),hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),155,HX_("test.TestFrames",54,94,be,54),HX_("testLerpFrame2",2e,10,91,83)));
HXLINE( 156)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,a11,"a") = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(frameD2->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 156)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b11,"b") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.66666666666666663),((Float)0.333333333333333315));
HXDLIN( 156)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self6,"self") =  ::hxmath::math::Vector2Default_obj::__new(a11->x,a11->y);
HXDLIN( 156)		hx::SubEq(self6->x,b11->x);
HXDLIN( 156)		hx::SubEq(self6->y,b11->y);
HXDLIN( 156)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self7,"self") = self6;
HXDLIN( 156)		Float _hx_tmp25 = ((self7->x * self7->x) + (self7->y * self7->y));
HXDLIN( 156)		Float _hx_tmp26 = ::Math_obj::sqrt(_hx_tmp25);
HXDLIN( 156)		this->assertApproxEquals(_hx_tmp26,((Float)0.0),null(),hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),156,HX_("test.TestFrames",54,94,be,54),HX_("testLerpFrame2",2e,10,91,83)));
HXLINE( 157)		Float _hx_tmp27 = ( (Float)( ::Dynamic(frameD2->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 157)		this->assertApproxEquals(_hx_tmp27,((Float)0.0),null(),hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),157,HX_("test.TestFrames",54,94,be,54),HX_("testLerpFrame2",2e,10,91,83)));
HXLINE( 159)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,a12,"a") = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(frameA->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 159)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b12,"b") = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(frameB->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 159)		 ::hxmath::math::Vector2Default _hx_tmp28 =  ::hxmath::math::Vector2Default_obj::__new(((((Float)0.33333333333333337) * a12->x) + (((Float)0.66666666666666663) * b12->x)),((((Float)0.33333333333333337) * a12->y) + (((Float)0.66666666666666663) * b12->y)));
HXDLIN( 159)		HX_VARI_NAME( Float,a13,"a") = ( (Float)( ::Dynamic(frameA->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 159)		HX_VARI_NAME( Float,b13,"b") = ( (Float)( ::Dynamic(frameB->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 159)		Float _hx_tmp29 = ::Math_obj::abs((a13 - b13));
HXDLIN( 159)		if ((_hx_tmp29 > ((Float)180.))) {
HXLINE( 159)			Bool _hx_tmp30 = (a13 < b13);
HXDLIN( 159)			if (_hx_tmp30) {
HXLINE( 159)				hx::AddEq(a13,(int)360);
            			}
            			else {
HXLINE( 159)				hx::AddEq(b13,(int)360);
            			}
            		}
HXDLIN( 159)		HX_VARI_NAME( Float,x4,"x") = ((((Float)0.33333333333333337) * a13) + (((Float)0.66666666666666663) * b13));
HXDLIN( 159)		Float _hx_tmp31;
HXDLIN( 159)		if ((x4 < (int)0)) {
HXLINE( 159)			_hx_tmp31 = ((int)360 - hx::Mod(-(x4),(int)360));
            		}
            		else {
HXLINE( 159)			_hx_tmp31 = hx::Mod(x4,(int)360);
            		}
HXDLIN( 159)		HX_VARI( ::Dynamic,frameE) = ::hxmath::frames::_Frame2::Frame2_Impl__obj::_new(_hx_tmp28,_hx_tmp31);
HXLINE( 160)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,a14,"a") = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(frameB->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 160)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b14,"b") = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(frameA->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 160)		 ::hxmath::math::Vector2Default _hx_tmp32 =  ::hxmath::math::Vector2Default_obj::__new(((((Float)0.666666666666666741) * a14->x) + (((Float)0.333333333333333315) * b14->x)),((((Float)0.666666666666666741) * a14->y) + (((Float)0.333333333333333315) * b14->y)));
HXDLIN( 160)		HX_VARI_NAME( Float,a15,"a") = ( (Float)( ::Dynamic(frameB->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 160)		HX_VARI_NAME( Float,b15,"b") = ( (Float)( ::Dynamic(frameA->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 160)		Float _hx_tmp33 = ::Math_obj::abs((a15 - b15));
HXDLIN( 160)		if ((_hx_tmp33 > ((Float)180.))) {
HXLINE( 160)			Bool _hx_tmp34 = (a15 < b15);
HXDLIN( 160)			if (_hx_tmp34) {
HXLINE( 160)				hx::AddEq(a15,(int)360);
            			}
            			else {
HXLINE( 160)				hx::AddEq(b15,(int)360);
            			}
            		}
HXDLIN( 160)		HX_VARI_NAME( Float,x5,"x") = ((((Float)0.666666666666666741) * a15) + (((Float)0.333333333333333315) * b15));
HXDLIN( 160)		Float _hx_tmp35;
HXDLIN( 160)		if ((x5 < (int)0)) {
HXLINE( 160)			_hx_tmp35 = ((int)360 - hx::Mod(-(x5),(int)360));
            		}
            		else {
HXLINE( 160)			_hx_tmp35 = hx::Mod(x5,(int)360);
            		}
HXDLIN( 160)		HX_VARI( ::Dynamic,frameE2) = ::hxmath::frames::_Frame2::Frame2_Impl__obj::_new(_hx_tmp32,_hx_tmp35);
HXLINE( 161)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,a16,"a") = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(frameE->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 161)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b16,"b") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.333333333333333315),((Float)0.66666666666666663));
HXDLIN( 161)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self8,"self") =  ::hxmath::math::Vector2Default_obj::__new(a16->x,a16->y);
HXDLIN( 161)		hx::SubEq(self8->x,b16->x);
HXDLIN( 161)		hx::SubEq(self8->y,b16->y);
HXDLIN( 161)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self9,"self") = self8;
HXDLIN( 161)		Float _hx_tmp36 = ((self9->x * self9->x) + (self9->y * self9->y));
HXDLIN( 161)		Float _hx_tmp37 = ::Math_obj::sqrt(_hx_tmp36);
HXDLIN( 161)		this->assertApproxEquals(_hx_tmp37,((Float)0.0),null(),hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),161,HX_("test.TestFrames",54,94,be,54),HX_("testLerpFrame2",2e,10,91,83)));
HXLINE( 162)		Float _hx_tmp38 = ( (Float)( ::Dynamic(frameE->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 162)		this->assertApproxEquals(_hx_tmp38,((Float)30.0),null(),hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),162,HX_("test.TestFrames",54,94,be,54),HX_("testLerpFrame2",2e,10,91,83)));
HXLINE( 163)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,a17,"a") = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(frameE2->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 163)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b17,"b") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.333333333333333315),((Float)0.66666666666666663));
HXDLIN( 163)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self10,"self") =  ::hxmath::math::Vector2Default_obj::__new(a17->x,a17->y);
HXDLIN( 163)		hx::SubEq(self10->x,b17->x);
HXDLIN( 163)		hx::SubEq(self10->y,b17->y);
HXDLIN( 163)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self11,"self") = self10;
HXDLIN( 163)		Float _hx_tmp39 = ((self11->x * self11->x) + (self11->y * self11->y));
HXDLIN( 163)		Float _hx_tmp40 = ::Math_obj::sqrt(_hx_tmp39);
HXDLIN( 163)		this->assertApproxEquals(_hx_tmp40,((Float)0.0),null(),hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),163,HX_("test.TestFrames",54,94,be,54),HX_("testLerpFrame2",2e,10,91,83)));
HXLINE( 164)		Float _hx_tmp41 = ( (Float)( ::Dynamic(frameE2->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) );
HXDLIN( 164)		this->assertApproxEquals(_hx_tmp41,((Float)30.0),null(),hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),164,HX_("test.TestFrames",54,94,be,54),HX_("testLerpFrame2",2e,10,91,83)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestFrames_obj,testLerpFrame2,(void))

void TestFrames_obj::testFramesHaveToString(){
            	HX_STACK_FRAME("test.TestFrames","testFramesHaveToString",0xbadd35c6,"test.TestFrames.testFramesHaveToString","test/TestFrames.hx",168,0x83ec6e49)
            	HX_STACK_THIS(this)
HXLINE( 169)		HX_VARI( ::Dynamic,frame2) = ::hxmath::frames::_Frame2::Frame2_Impl__obj::_new( ::hxmath::math::Vector2Default_obj::__new(((Float)23.0),((Float)0.0)),((Float)42.0));
HXLINE( 170)		::String _hx_tmp = ::Std_obj::string(frame2);
HXDLIN( 170)		Int _hx_tmp1 = (HX_("",00,00,00,00) + _hx_tmp).indexOf(HX_("23",c1,2b,00,00),null());
HXDLIN( 170)		this->assertTrue((_hx_tmp1 != (int)-1),hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),170,HX_("test.TestFrames",54,94,be,54),HX_("testFramesHaveToString",ec,ac,2f,79)));
HXLINE( 171)		::String _hx_tmp2 = ::Std_obj::string(frame2);
HXDLIN( 171)		Int _hx_tmp3 = (HX_("",00,00,00,00) + _hx_tmp2).indexOf(HX_("42",7e,2d,00,00),null());
HXDLIN( 171)		this->assertTrue((_hx_tmp3 != (int)-1),hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),171,HX_("test.TestFrames",54,94,be,54),HX_("testFramesHaveToString",ec,ac,2f,79)));
HXLINE( 173)		HX_VARI( ::Dynamic,frame3) = ::hxmath::frames::_Frame3::Frame3_Impl__obj::_new( ::hxmath::math::Vector3Default_obj::__new(((Float)23.0),((Float)0.0),((Float)0.0)), ::hxmath::math::QuaternionDefault_obj::__new(((Float)42.0),((Float)0.0),((Float)0.0),((Float)0.0)));
HXLINE( 174)		::String _hx_tmp4 = ::Std_obj::string(frame3);
HXDLIN( 174)		Int _hx_tmp5 = (HX_("",00,00,00,00) + _hx_tmp4).indexOf(HX_("23",c1,2b,00,00),null());
HXDLIN( 174)		this->assertTrue((_hx_tmp5 != (int)-1),hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),174,HX_("test.TestFrames",54,94,be,54),HX_("testFramesHaveToString",ec,ac,2f,79)));
HXLINE( 175)		::String _hx_tmp6 = ::Std_obj::string(frame3);
HXDLIN( 175)		Int _hx_tmp7 = (HX_("",00,00,00,00) + _hx_tmp6).indexOf(HX_("42",7e,2d,00,00),null());
HXDLIN( 175)		this->assertTrue((_hx_tmp7 != (int)-1),hx::SourceInfo(HX_("TestFrames.hx",06,2c,f9,c9),175,HX_("test.TestFrames",54,94,be,54),HX_("testFramesHaveToString",ec,ac,2f,79)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestFrames_obj,testFramesHaveToString,(void))


TestFrames_obj::TestFrames_obj()
{
}

hx::Val TestFrames_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"testLerpFrame2") ) { return hx::Val( testLerpFrame2_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"testFrame2Concat") ) { return hx::Val( testFrame2Concat_dyn()); }
		if (HX_FIELD_EQ(inName,"testFrame3Concat") ) { return hx::Val( testFrame3Concat_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"testFrame2Inverse") ) { return hx::Val( testFrame2Inverse_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"testFlxSpriteFrame2") ) { return hx::Val( testFlxSpriteFrame2_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"testFramesHaveToString") ) { return hx::Val( testFramesHaveToString_dyn()); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"testFrame2LinearAffineTransform") ) { return hx::Val( testFrame2LinearAffineTransform_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestFrames_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestFrames_obj_sStaticStorageInfo = 0;
#endif

static ::String TestFrames_obj_sMemberFields[] = {
	HX_HCSTRING("testFrame2Concat","\xcb","\x8d","\x0f","\xcf"),
	HX_HCSTRING("testFrame3Concat","\x8c","\x04","\xa5","\xf8"),
	HX_HCSTRING("testFrame2LinearAffineTransform","\x91","\x26","\x3c","\x2e"),
	HX_HCSTRING("testFrame2Inverse","\x19","\xe7","\x45","\x8e"),
	HX_HCSTRING("testFlxSpriteFrame2","\xaa","\xb0","\x56","\x3d"),
	HX_HCSTRING("testLerpFrame2","\x2e","\x10","\x91","\x83"),
	HX_HCSTRING("testFramesHaveToString","\xec","\xac","\x2f","\x79"),
	::String(null()) };

static void TestFrames_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestFrames_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestFrames_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestFrames_obj::__mClass,"__mClass");
};

#endif

hx::Class TestFrames_obj::__mClass;

void TestFrames_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("test.TestFrames","\x54","\x94","\xbe","\x54");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestFrames_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestFrames_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestFrames_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestFrames_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestFrames_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestFrames_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace test
