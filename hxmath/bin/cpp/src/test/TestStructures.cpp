// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED__List_ListNode
#include <_List/ListNode.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_hxmath_math_IntVector2Default
#include <hxmath/math/IntVector2Default.h>
#endif
#ifndef INCLUDED_hxmath_math_Matrix2x2Default
#include <hxmath/math/Matrix2x2Default.h>
#endif
#ifndef INCLUDED_hxmath_math_Matrix3x2Default
#include <hxmath/math/Matrix3x2Default.h>
#endif
#ifndef INCLUDED_hxmath_math_Matrix3x3Default
#include <hxmath/math/Matrix3x3Default.h>
#endif
#ifndef INCLUDED_hxmath_math_Matrix4x4Default
#include <hxmath/math/Matrix4x4Default.h>
#endif
#ifndef INCLUDED_hxmath_math_QuaternionDefault
#include <hxmath/math/QuaternionDefault.h>
#endif
#ifndef INCLUDED_hxmath_math_Vector2Default
#include <hxmath/math/Vector2Default.h>
#endif
#ifndef INCLUDED_hxmath_math_Vector3Default
#include <hxmath/math/Vector3Default.h>
#endif
#ifndef INCLUDED_hxmath_math_Vector4Default
#include <hxmath/math/Vector4Default.h>
#endif
#ifndef INCLUDED_hxmath_math__IntVector2_IntVector2_Impl_
#include <hxmath/math/_IntVector2/IntVector2_Impl_.h>
#endif
#ifndef INCLUDED_hxmath_math__Matrix2x2_Matrix2x2_Impl_
#include <hxmath/math/_Matrix2x2/Matrix2x2_Impl_.h>
#endif
#ifndef INCLUDED_hxmath_math__Matrix3x2_Matrix3x2_Impl_
#include <hxmath/math/_Matrix3x2/Matrix3x2_Impl_.h>
#endif
#ifndef INCLUDED_hxmath_math__Matrix3x3_Matrix3x3_Impl_
#include <hxmath/math/_Matrix3x3/Matrix3x3_Impl_.h>
#endif
#ifndef INCLUDED_hxmath_math__Matrix4x4_Matrix4x4_Impl_
#include <hxmath/math/_Matrix4x4/Matrix4x4_Impl_.h>
#endif
#ifndef INCLUDED_hxmath_math__Quaternion_Quaternion_Impl_
#include <hxmath/math/_Quaternion/Quaternion_Impl_.h>
#endif
#ifndef INCLUDED_hxmath_math__ShortVector2_ShortVector2_Impl_
#include <hxmath/math/_ShortVector2/ShortVector2_Impl_.h>
#endif
#ifndef INCLUDED_hxmath_math__Vector2_Vector2_Impl_
#include <hxmath/math/_Vector2/Vector2_Impl_.h>
#endif
#ifndef INCLUDED_hxmath_math__Vector3_Vector3_Impl_
#include <hxmath/math/_Vector3/Vector3_Impl_.h>
#endif
#ifndef INCLUDED_hxmath_math__Vector4_Vector4_Impl_
#include <hxmath/math/_Vector4/Vector4_Impl_.h>
#endif
#ifndef INCLUDED_nanotest_NanoTestAssertResult
#include <nanotest/NanoTestAssertResult.h>
#endif
#ifndef INCLUDED_nanotest_NanoTestCase
#include <nanotest/NanoTestCase.h>
#endif
#ifndef INCLUDED_test_MathTestCase
#include <test/MathTestCase.h>
#endif
#ifndef INCLUDED_test_TestStructures
#include <test/TestStructures.h>
#endif

namespace test{

void TestStructures_obj::__construct( ::Dynamic posInfos){
            	HX_STACK_FRAME("test.TestStructures","new",0x90762c80,"test.TestStructures.new","test/TestStructures.hx",18,0x1c38d1cf)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(posInfos,"posInfos")
HXLINE(  18)		super::__construct(posInfos);
            	}

Dynamic TestStructures_obj::__CreateEmpty() { return new TestStructures_obj; }

hx::ObjectPtr< TestStructures_obj > TestStructures_obj::__new( ::Dynamic posInfos)
{
	hx::ObjectPtr< TestStructures_obj > _hx_result = new TestStructures_obj();
	_hx_result->__construct(posInfos);
	return _hx_result;
}

Dynamic TestStructures_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestStructures_obj > _hx_result = new TestStructures_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestStructures_obj::testEquals(){
            	HX_STACK_FRAME("test.TestStructures","testEquals",0xb8569c11,"test.TestStructures.testEquals","test/TestStructures.hx",21,0x1c38d1cf)
            	HX_STACK_THIS(this)
HXLINE(  22)		HX_VARI(  ::hxmath::math::Matrix2x2Default,m) =  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  22)		HX_VARI(  ::hxmath::math::Matrix2x2Default,n) =  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  22)		Bool _hx_tmp;
HXDLIN(  22)		Bool _hx_tmp1;
HXDLIN(  22)		if (hx::IsNull( m )) {
HXLINE(  22)			_hx_tmp1 = hx::IsNull( n );
            		}
            		else {
HXLINE(  22)			_hx_tmp1 = false;
            		}
HXDLIN(  22)		if (!(_hx_tmp1)) {
HXLINE(  22)			Bool _hx_tmp2;
HXDLIN(  22)			Bool _hx_tmp3;
HXDLIN(  22)			Bool _hx_tmp4;
HXDLIN(  22)			Bool _hx_tmp5;
HXDLIN(  22)			if (hx::IsNotNull( m )) {
HXLINE(  22)				_hx_tmp5 = hx::IsNotNull( n );
            			}
            			else {
HXLINE(  22)				_hx_tmp5 = false;
            			}
HXDLIN(  22)			if (_hx_tmp5) {
HXLINE(  22)				_hx_tmp4 = (m->a == n->a);
            			}
            			else {
HXLINE(  22)				_hx_tmp4 = false;
            			}
HXDLIN(  22)			if (_hx_tmp4) {
HXLINE(  22)				_hx_tmp3 = (m->b == n->b);
            			}
            			else {
HXLINE(  22)				_hx_tmp3 = false;
            			}
HXDLIN(  22)			if (_hx_tmp3) {
HXLINE(  22)				_hx_tmp2 = (m->c == n->c);
            			}
            			else {
HXLINE(  22)				_hx_tmp2 = false;
            			}
HXDLIN(  22)			if (_hx_tmp2) {
HXLINE(  22)				_hx_tmp = (m->d == n->d);
            			}
            			else {
HXLINE(  22)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(  22)			_hx_tmp = true;
            		}
HXDLIN(  22)		this->assertTrue(_hx_tmp,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),22,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testEquals",31,34,e7,d8)));
HXLINE(  23)		this->assertTrue(hx::IsNotEq(  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0)), ::hxmath::math::Matrix2x2Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0)) ),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),23,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testEquals",31,34,e7,d8)));
HXLINE(  24)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,m1,"m") =  ::hxmath::math::Matrix3x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0));
HXDLIN(  24)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,n1,"n") =  ::hxmath::math::Matrix3x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0));
HXDLIN(  24)		Bool _hx_tmp6;
HXDLIN(  24)		Bool _hx_tmp7;
HXDLIN(  24)		if (hx::IsNull( m1 )) {
HXLINE(  24)			_hx_tmp7 = hx::IsNull( n1 );
            		}
            		else {
HXLINE(  24)			_hx_tmp7 = false;
            		}
HXDLIN(  24)		if (!(_hx_tmp7)) {
HXLINE(  24)			Bool _hx_tmp8;
HXDLIN(  24)			Bool _hx_tmp9;
HXDLIN(  24)			Bool _hx_tmp10;
HXDLIN(  24)			Bool _hx_tmp11;
HXDLIN(  24)			Bool _hx_tmp12;
HXDLIN(  24)			Bool _hx_tmp13;
HXDLIN(  24)			if (hx::IsNotNull( m1 )) {
HXLINE(  24)				_hx_tmp13 = hx::IsNotNull( n1 );
            			}
            			else {
HXLINE(  24)				_hx_tmp13 = false;
            			}
HXDLIN(  24)			if (_hx_tmp13) {
HXLINE(  24)				_hx_tmp12 = (m1->a == n1->a);
            			}
            			else {
HXLINE(  24)				_hx_tmp12 = false;
            			}
HXDLIN(  24)			if (_hx_tmp12) {
HXLINE(  24)				_hx_tmp11 = (m1->b == n1->b);
            			}
            			else {
HXLINE(  24)				_hx_tmp11 = false;
            			}
HXDLIN(  24)			if (_hx_tmp11) {
HXLINE(  24)				_hx_tmp10 = (m1->c == n1->c);
            			}
            			else {
HXLINE(  24)				_hx_tmp10 = false;
            			}
HXDLIN(  24)			if (_hx_tmp10) {
HXLINE(  24)				_hx_tmp9 = (m1->d == n1->d);
            			}
            			else {
HXLINE(  24)				_hx_tmp9 = false;
            			}
HXDLIN(  24)			if (_hx_tmp9) {
HXLINE(  24)				_hx_tmp8 = (m1->tx == n1->tx);
            			}
            			else {
HXLINE(  24)				_hx_tmp8 = false;
            			}
HXDLIN(  24)			if (_hx_tmp8) {
HXLINE(  24)				_hx_tmp6 = (m1->ty == n1->ty);
            			}
            			else {
HXLINE(  24)				_hx_tmp6 = false;
            			}
            		}
            		else {
HXLINE(  24)			_hx_tmp6 = true;
            		}
HXDLIN(  24)		this->assertTrue(_hx_tmp6,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),24,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testEquals",31,34,e7,d8)));
HXLINE(  25)		this->assertTrue(hx::IsNotEq(  ::hxmath::math::Matrix3x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0)), ::hxmath::math::Matrix3x2Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0)) ),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),25,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testEquals",31,34,e7,d8)));
HXLINE(  26)		HX_VARI(  ::hxmath::math::Matrix3x3Default,a) =  ::hxmath::math::Matrix3x3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  26)		HX_VARI(  ::hxmath::math::Matrix3x3Default,b) =  ::hxmath::math::Matrix3x3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  26)		Bool _hx_tmp14;
HXDLIN(  26)		Bool _hx_tmp15;
HXDLIN(  26)		if (hx::IsNull( a )) {
HXLINE(  26)			_hx_tmp15 = hx::IsNull( b );
            		}
            		else {
HXLINE(  26)			_hx_tmp15 = false;
            		}
HXDLIN(  26)		if (!(_hx_tmp15)) {
HXLINE(  26)			Bool _hx_tmp16;
HXDLIN(  26)			Bool _hx_tmp17;
HXDLIN(  26)			Bool _hx_tmp18;
HXDLIN(  26)			Bool _hx_tmp19;
HXDLIN(  26)			Bool _hx_tmp20;
HXDLIN(  26)			Bool _hx_tmp21;
HXDLIN(  26)			Bool _hx_tmp22;
HXDLIN(  26)			Bool _hx_tmp23;
HXDLIN(  26)			Bool _hx_tmp24;
HXDLIN(  26)			if (hx::IsNotNull( a )) {
HXLINE(  26)				_hx_tmp24 = hx::IsNotNull( b );
            			}
            			else {
HXLINE(  26)				_hx_tmp24 = false;
            			}
HXDLIN(  26)			if (_hx_tmp24) {
HXLINE(  26)				_hx_tmp23 = (a->m00 == b->m00);
            			}
            			else {
HXLINE(  26)				_hx_tmp23 = false;
            			}
HXDLIN(  26)			if (_hx_tmp23) {
HXLINE(  26)				_hx_tmp22 = (a->m10 == b->m10);
            			}
            			else {
HXLINE(  26)				_hx_tmp22 = false;
            			}
HXDLIN(  26)			if (_hx_tmp22) {
HXLINE(  26)				_hx_tmp21 = (a->m20 == b->m20);
            			}
            			else {
HXLINE(  26)				_hx_tmp21 = false;
            			}
HXDLIN(  26)			if (_hx_tmp21) {
HXLINE(  26)				_hx_tmp20 = (a->m01 == b->m01);
            			}
            			else {
HXLINE(  26)				_hx_tmp20 = false;
            			}
HXDLIN(  26)			if (_hx_tmp20) {
HXLINE(  26)				_hx_tmp19 = (a->m11 == b->m11);
            			}
            			else {
HXLINE(  26)				_hx_tmp19 = false;
            			}
HXDLIN(  26)			if (_hx_tmp19) {
HXLINE(  26)				_hx_tmp18 = (a->m21 == b->m21);
            			}
            			else {
HXLINE(  26)				_hx_tmp18 = false;
            			}
HXDLIN(  26)			if (_hx_tmp18) {
HXLINE(  26)				_hx_tmp17 = (a->m02 == b->m02);
            			}
            			else {
HXLINE(  26)				_hx_tmp17 = false;
            			}
HXDLIN(  26)			if (_hx_tmp17) {
HXLINE(  26)				_hx_tmp16 = (a->m12 == b->m12);
            			}
            			else {
HXLINE(  26)				_hx_tmp16 = false;
            			}
HXDLIN(  26)			if (_hx_tmp16) {
HXLINE(  26)				_hx_tmp14 = (a->m22 == b->m22);
            			}
            			else {
HXLINE(  26)				_hx_tmp14 = false;
            			}
            		}
            		else {
HXLINE(  26)			_hx_tmp14 = true;
            		}
HXDLIN(  26)		this->assertTrue(_hx_tmp14,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),26,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testEquals",31,34,e7,d8)));
HXLINE(  27)		this->assertTrue(hx::IsNotEq(  ::hxmath::math::Matrix3x3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0)), ::hxmath::math::Matrix3x3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0)) ),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),27,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testEquals",31,34,e7,d8)));
HXLINE(  28)		HX_VARI_NAME(  ::hxmath::math::Matrix4x4Default,a1,"a") =  ::hxmath::math::Matrix4x4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  28)		HX_VARI_NAME(  ::hxmath::math::Matrix4x4Default,b1,"b") =  ::hxmath::math::Matrix4x4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  28)		Bool _hx_tmp25;
HXDLIN(  28)		Bool _hx_tmp26;
HXDLIN(  28)		if (hx::IsNull( a1 )) {
HXLINE(  28)			_hx_tmp26 = hx::IsNull( b1 );
            		}
            		else {
HXLINE(  28)			_hx_tmp26 = false;
            		}
HXDLIN(  28)		if (!(_hx_tmp26)) {
HXLINE(  28)			Bool _hx_tmp27;
HXDLIN(  28)			Bool _hx_tmp28;
HXDLIN(  28)			Bool _hx_tmp29;
HXDLIN(  28)			Bool _hx_tmp30;
HXDLIN(  28)			Bool _hx_tmp31;
HXDLIN(  28)			Bool _hx_tmp32;
HXDLIN(  28)			Bool _hx_tmp33;
HXDLIN(  28)			Bool _hx_tmp34;
HXDLIN(  28)			Bool _hx_tmp35;
HXDLIN(  28)			Bool _hx_tmp36;
HXDLIN(  28)			Bool _hx_tmp37;
HXDLIN(  28)			Bool _hx_tmp38;
HXDLIN(  28)			Bool _hx_tmp39;
HXDLIN(  28)			Bool _hx_tmp40;
HXDLIN(  28)			Bool _hx_tmp41;
HXDLIN(  28)			Bool _hx_tmp42;
HXDLIN(  28)			if (hx::IsNotNull( a1 )) {
HXLINE(  28)				_hx_tmp42 = hx::IsNotNull( b1 );
            			}
            			else {
HXLINE(  28)				_hx_tmp42 = false;
            			}
HXDLIN(  28)			if (_hx_tmp42) {
HXLINE(  28)				_hx_tmp41 = (a1->m00 == b1->m00);
            			}
            			else {
HXLINE(  28)				_hx_tmp41 = false;
            			}
HXDLIN(  28)			if (_hx_tmp41) {
HXLINE(  28)				_hx_tmp40 = (a1->m10 == b1->m10);
            			}
            			else {
HXLINE(  28)				_hx_tmp40 = false;
            			}
HXDLIN(  28)			if (_hx_tmp40) {
HXLINE(  28)				_hx_tmp39 = (a1->m20 == b1->m20);
            			}
            			else {
HXLINE(  28)				_hx_tmp39 = false;
            			}
HXDLIN(  28)			if (_hx_tmp39) {
HXLINE(  28)				_hx_tmp38 = (a1->m30 == b1->m30);
            			}
            			else {
HXLINE(  28)				_hx_tmp38 = false;
            			}
HXDLIN(  28)			if (_hx_tmp38) {
HXLINE(  28)				_hx_tmp37 = (a1->m01 == b1->m01);
            			}
            			else {
HXLINE(  28)				_hx_tmp37 = false;
            			}
HXDLIN(  28)			if (_hx_tmp37) {
HXLINE(  28)				_hx_tmp36 = (a1->m11 == b1->m11);
            			}
            			else {
HXLINE(  28)				_hx_tmp36 = false;
            			}
HXDLIN(  28)			if (_hx_tmp36) {
HXLINE(  28)				_hx_tmp35 = (a1->m21 == b1->m21);
            			}
            			else {
HXLINE(  28)				_hx_tmp35 = false;
            			}
HXDLIN(  28)			if (_hx_tmp35) {
HXLINE(  28)				_hx_tmp34 = (a1->m31 == b1->m31);
            			}
            			else {
HXLINE(  28)				_hx_tmp34 = false;
            			}
HXDLIN(  28)			if (_hx_tmp34) {
HXLINE(  28)				_hx_tmp33 = (a1->m02 == b1->m02);
            			}
            			else {
HXLINE(  28)				_hx_tmp33 = false;
            			}
HXDLIN(  28)			if (_hx_tmp33) {
HXLINE(  28)				_hx_tmp32 = (a1->m12 == b1->m12);
            			}
            			else {
HXLINE(  28)				_hx_tmp32 = false;
            			}
HXDLIN(  28)			if (_hx_tmp32) {
HXLINE(  28)				_hx_tmp31 = (a1->m22 == b1->m22);
            			}
            			else {
HXLINE(  28)				_hx_tmp31 = false;
            			}
HXDLIN(  28)			if (_hx_tmp31) {
HXLINE(  28)				_hx_tmp30 = (a1->m32 == b1->m32);
            			}
            			else {
HXLINE(  28)				_hx_tmp30 = false;
            			}
HXDLIN(  28)			if (_hx_tmp30) {
HXLINE(  28)				_hx_tmp29 = (a1->m03 == b1->m03);
            			}
            			else {
HXLINE(  28)				_hx_tmp29 = false;
            			}
HXDLIN(  28)			if (_hx_tmp29) {
HXLINE(  28)				_hx_tmp28 = (a1->m13 == b1->m13);
            			}
            			else {
HXLINE(  28)				_hx_tmp28 = false;
            			}
HXDLIN(  28)			if (_hx_tmp28) {
HXLINE(  28)				_hx_tmp27 = (a1->m23 == b1->m23);
            			}
            			else {
HXLINE(  28)				_hx_tmp27 = false;
            			}
HXDLIN(  28)			if (_hx_tmp27) {
HXLINE(  28)				_hx_tmp25 = (a1->m33 == b1->m33);
            			}
            			else {
HXLINE(  28)				_hx_tmp25 = false;
            			}
            		}
            		else {
HXLINE(  28)			_hx_tmp25 = true;
            		}
HXDLIN(  28)		this->assertTrue(_hx_tmp25,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),28,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testEquals",31,34,e7,d8)));
HXLINE(  29)		this->assertTrue(hx::IsNotEq(  ::hxmath::math::Matrix4x4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0)), ::hxmath::math::Matrix4x4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0)) ),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),29,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testEquals",31,34,e7,d8)));
HXLINE(  31)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,a2,"a") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)1.0));
HXDLIN(  31)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b2,"b") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)1.0));
HXDLIN(  31)		Bool _hx_tmp43;
HXDLIN(  31)		Bool _hx_tmp44;
HXDLIN(  31)		if (hx::IsNull( a2 )) {
HXLINE(  31)			_hx_tmp44 = hx::IsNull( b2 );
            		}
            		else {
HXLINE(  31)			_hx_tmp44 = false;
            		}
HXDLIN(  31)		if (!(_hx_tmp44)) {
HXLINE(  31)			Bool _hx_tmp45;
HXDLIN(  31)			Bool _hx_tmp46;
HXDLIN(  31)			if (hx::IsNotNull( a2 )) {
HXLINE(  31)				_hx_tmp46 = hx::IsNotNull( b2 );
            			}
            			else {
HXLINE(  31)				_hx_tmp46 = false;
            			}
HXDLIN(  31)			if (_hx_tmp46) {
HXLINE(  31)				_hx_tmp45 = (a2->x == b2->x);
            			}
            			else {
HXLINE(  31)				_hx_tmp45 = false;
            			}
HXDLIN(  31)			if (_hx_tmp45) {
HXLINE(  31)				_hx_tmp43 = (a2->y == b2->y);
            			}
            			else {
HXLINE(  31)				_hx_tmp43 = false;
            			}
            		}
            		else {
HXLINE(  31)			_hx_tmp43 = true;
            		}
HXDLIN(  31)		this->assertTrue(_hx_tmp43,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),31,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testEquals",31,34,e7,d8)));
HXLINE(  32)		this->assertTrue(hx::IsNotEq(  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)1.0)), ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)0.0)) ),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),32,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testEquals",31,34,e7,d8)));
HXLINE(  33)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,a3,"a") =  ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  33)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,b3,"b") =  ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  33)		Bool _hx_tmp47;
HXDLIN(  33)		Bool _hx_tmp48;
HXDLIN(  33)		if (hx::IsNull( a3 )) {
HXLINE(  33)			_hx_tmp48 = hx::IsNull( b3 );
            		}
            		else {
HXLINE(  33)			_hx_tmp48 = false;
            		}
HXDLIN(  33)		if (!(_hx_tmp48)) {
HXLINE(  33)			Bool _hx_tmp49;
HXDLIN(  33)			Bool _hx_tmp50;
HXDLIN(  33)			Bool _hx_tmp51;
HXDLIN(  33)			if (hx::IsNotNull( a3 )) {
HXLINE(  33)				_hx_tmp51 = hx::IsNotNull( b3 );
            			}
            			else {
HXLINE(  33)				_hx_tmp51 = false;
            			}
HXDLIN(  33)			if (_hx_tmp51) {
HXLINE(  33)				_hx_tmp50 = (a3->x == b3->x);
            			}
            			else {
HXLINE(  33)				_hx_tmp50 = false;
            			}
HXDLIN(  33)			if (_hx_tmp50) {
HXLINE(  33)				_hx_tmp49 = (a3->y == b3->y);
            			}
            			else {
HXLINE(  33)				_hx_tmp49 = false;
            			}
HXDLIN(  33)			if (_hx_tmp49) {
HXLINE(  33)				_hx_tmp47 = (a3->z == b3->z);
            			}
            			else {
HXLINE(  33)				_hx_tmp47 = false;
            			}
            		}
            		else {
HXLINE(  33)			_hx_tmp47 = true;
            		}
HXDLIN(  33)		this->assertTrue(_hx_tmp47,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),33,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testEquals",31,34,e7,d8)));
HXLINE(  34)		this->assertTrue(hx::IsNotEq(  ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)1.0)), ::hxmath::math::Vector3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0)) ),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),34,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testEquals",31,34,e7,d8)));
HXLINE(  35)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,a4,"a") =  ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0));
HXDLIN(  35)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,b4,"b") =  ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0));
HXDLIN(  35)		Bool _hx_tmp52;
HXDLIN(  35)		Bool _hx_tmp53;
HXDLIN(  35)		if (hx::IsNull( a4 )) {
HXLINE(  35)			_hx_tmp53 = hx::IsNull( b4 );
            		}
            		else {
HXLINE(  35)			_hx_tmp53 = false;
            		}
HXDLIN(  35)		if (!(_hx_tmp53)) {
HXLINE(  35)			Bool _hx_tmp54;
HXDLIN(  35)			Bool _hx_tmp55;
HXDLIN(  35)			Bool _hx_tmp56;
HXDLIN(  35)			Bool _hx_tmp57;
HXDLIN(  35)			if (hx::IsNotNull( a4 )) {
HXLINE(  35)				_hx_tmp57 = hx::IsNotNull( b4 );
            			}
            			else {
HXLINE(  35)				_hx_tmp57 = false;
            			}
HXDLIN(  35)			if (_hx_tmp57) {
HXLINE(  35)				_hx_tmp56 = (a4->x == b4->x);
            			}
            			else {
HXLINE(  35)				_hx_tmp56 = false;
            			}
HXDLIN(  35)			if (_hx_tmp56) {
HXLINE(  35)				_hx_tmp55 = (a4->y == b4->y);
            			}
            			else {
HXLINE(  35)				_hx_tmp55 = false;
            			}
HXDLIN(  35)			if (_hx_tmp55) {
HXLINE(  35)				_hx_tmp54 = (a4->z == b4->z);
            			}
            			else {
HXLINE(  35)				_hx_tmp54 = false;
            			}
HXDLIN(  35)			if (_hx_tmp54) {
HXLINE(  35)				_hx_tmp52 = (a4->w == b4->w);
            			}
            			else {
HXLINE(  35)				_hx_tmp52 = false;
            			}
            		}
            		else {
HXLINE(  35)			_hx_tmp52 = true;
            		}
HXDLIN(  35)		this->assertTrue(_hx_tmp52,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),35,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testEquals",31,34,e7,d8)));
HXLINE(  36)		this->assertTrue(hx::IsNotEq(  ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0)), ::hxmath::math::Vector4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0)) ),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),36,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testEquals",31,34,e7,d8)));
HXLINE(  38)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,a5,"a") =  ::hxmath::math::QuaternionDefault_obj::__new((int)1,(int)0,(int)0,(int)0);
HXDLIN(  38)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,b5,"b") =  ::hxmath::math::QuaternionDefault_obj::__new((int)1,(int)0,(int)0,(int)0);
HXDLIN(  38)		Bool _hx_tmp58;
HXDLIN(  38)		Bool _hx_tmp59;
HXDLIN(  38)		if (hx::IsNull( a5 )) {
HXLINE(  38)			_hx_tmp59 = hx::IsNull( b5 );
            		}
            		else {
HXLINE(  38)			_hx_tmp59 = false;
            		}
HXDLIN(  38)		if (!(_hx_tmp59)) {
HXLINE(  38)			Bool _hx_tmp60;
HXDLIN(  38)			Bool _hx_tmp61;
HXDLIN(  38)			Bool _hx_tmp62;
HXDLIN(  38)			Bool _hx_tmp63;
HXDLIN(  38)			if (hx::IsNotNull( a5 )) {
HXLINE(  38)				_hx_tmp63 = hx::IsNotNull( b5 );
            			}
            			else {
HXLINE(  38)				_hx_tmp63 = false;
            			}
HXDLIN(  38)			if (_hx_tmp63) {
HXLINE(  38)				_hx_tmp62 = (a5->s == b5->s);
            			}
            			else {
HXLINE(  38)				_hx_tmp62 = false;
            			}
HXDLIN(  38)			if (_hx_tmp62) {
HXLINE(  38)				_hx_tmp61 = (a5->x == b5->x);
            			}
            			else {
HXLINE(  38)				_hx_tmp61 = false;
            			}
HXDLIN(  38)			if (_hx_tmp61) {
HXLINE(  38)				_hx_tmp60 = (a5->y == b5->y);
            			}
            			else {
HXLINE(  38)				_hx_tmp60 = false;
            			}
HXDLIN(  38)			if (_hx_tmp60) {
HXLINE(  38)				_hx_tmp58 = (a5->z == b5->z);
            			}
            			else {
HXLINE(  38)				_hx_tmp58 = false;
            			}
            		}
            		else {
HXLINE(  38)			_hx_tmp58 = true;
            		}
HXDLIN(  38)		this->assertTrue(_hx_tmp58,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),38,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testEquals",31,34,e7,d8)));
HXLINE(  39)		this->assertTrue(hx::IsNotEq(  ::hxmath::math::QuaternionDefault_obj::__new((int)1,(int)0,(int)0,(int)0), ::hxmath::math::QuaternionDefault_obj::__new((int)0,(int)0,(int)0,(int)0) ),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),39,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testEquals",31,34,e7,d8)));
HXLINE(  41)		HX_VARI_NAME(  ::hxmath::math::IntVector2Default,a6,"a") = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)0,(int)1);
HXDLIN(  41)		HX_VARI_NAME(  ::hxmath::math::IntVector2Default,b6,"b") = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)0,(int)1);
HXDLIN(  41)		Bool _hx_tmp64;
HXDLIN(  41)		Bool _hx_tmp65;
HXDLIN(  41)		if (hx::IsNull( a6 )) {
HXLINE(  41)			_hx_tmp65 = hx::IsNull( b6 );
            		}
            		else {
HXLINE(  41)			_hx_tmp65 = false;
            		}
HXDLIN(  41)		if (!(_hx_tmp65)) {
HXLINE(  41)			Bool _hx_tmp66;
HXDLIN(  41)			Bool _hx_tmp67;
HXDLIN(  41)			if (hx::IsNotNull( a6 )) {
HXLINE(  41)				_hx_tmp67 = hx::IsNotNull( b6 );
            			}
            			else {
HXLINE(  41)				_hx_tmp67 = false;
            			}
HXDLIN(  41)			if (_hx_tmp67) {
HXLINE(  41)				_hx_tmp66 = (a6->x == b6->x);
            			}
            			else {
HXLINE(  41)				_hx_tmp66 = false;
            			}
HXDLIN(  41)			if (_hx_tmp66) {
HXLINE(  41)				_hx_tmp64 = (a6->y == b6->y);
            			}
            			else {
HXLINE(  41)				_hx_tmp64 = false;
            			}
            		}
            		else {
HXLINE(  41)			_hx_tmp64 = true;
            		}
HXDLIN(  41)		this->assertTrue(_hx_tmp64,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),41,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testEquals",31,34,e7,d8)));
HXLINE(  42)		this->assertTrue(hx::IsNotEq( ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)0,(int)1),::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)1,(int)0) ),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),42,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testEquals",31,34,e7,d8)));
HXLINE(  44)		Int _hx_tmp68 = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((int)0,(int)1);
HXDLIN(  44)		Int _hx_tmp69 = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((int)0,(int)1);
HXDLIN(  44)		this->assertTrue((_hx_tmp68 == _hx_tmp69),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),44,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testEquals",31,34,e7,d8)));
HXLINE(  45)		Int _hx_tmp70 = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((int)0,(int)1);
HXDLIN(  45)		Int _hx_tmp71 = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((int)1,(int)0);
HXDLIN(  45)		this->assertTrue((_hx_tmp70 != _hx_tmp71),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),45,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testEquals",31,34,e7,d8)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStructures_obj,testEquals,(void))

void TestStructures_obj::testClone(){
            	HX_STACK_FRAME("test.TestStructures","testClone",0x506385cb,"test.TestStructures.testClone","test/TestStructures.hx",49,0x1c38d1cf)
            	HX_STACK_THIS(this)
HXLINE(  50)		HX_VARI(  ::hxmath::math::Matrix2x2Default,self) =  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  50)		HX_VARI(  ::hxmath::math::Matrix2x2Default,m) =  ::hxmath::math::Matrix2x2Default_obj::__new(self->a,self->b,self->c,self->d);
HXDLIN(  50)		HX_VARI(  ::hxmath::math::Matrix2x2Default,n) =  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  50)		Bool _hx_tmp;
HXDLIN(  50)		Bool _hx_tmp1;
HXDLIN(  50)		if (hx::IsNull( m )) {
HXLINE(  50)			_hx_tmp1 = hx::IsNull( n );
            		}
            		else {
HXLINE(  50)			_hx_tmp1 = false;
            		}
HXDLIN(  50)		if (!(_hx_tmp1)) {
HXLINE(  50)			Bool _hx_tmp2;
HXDLIN(  50)			Bool _hx_tmp3;
HXDLIN(  50)			Bool _hx_tmp4;
HXDLIN(  50)			Bool _hx_tmp5;
HXDLIN(  50)			if (hx::IsNotNull( m )) {
HXLINE(  50)				_hx_tmp5 = hx::IsNotNull( n );
            			}
            			else {
HXLINE(  50)				_hx_tmp5 = false;
            			}
HXDLIN(  50)			if (_hx_tmp5) {
HXLINE(  50)				_hx_tmp4 = (m->a == n->a);
            			}
            			else {
HXLINE(  50)				_hx_tmp4 = false;
            			}
HXDLIN(  50)			if (_hx_tmp4) {
HXLINE(  50)				_hx_tmp3 = (m->b == n->b);
            			}
            			else {
HXLINE(  50)				_hx_tmp3 = false;
            			}
HXDLIN(  50)			if (_hx_tmp3) {
HXLINE(  50)				_hx_tmp2 = (m->c == n->c);
            			}
            			else {
HXLINE(  50)				_hx_tmp2 = false;
            			}
HXDLIN(  50)			if (_hx_tmp2) {
HXLINE(  50)				_hx_tmp = (m->d == n->d);
            			}
            			else {
HXLINE(  50)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(  50)			_hx_tmp = true;
            		}
HXDLIN(  50)		this->assertTrue(_hx_tmp,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),50,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testClone",ab,51,65,11)));
HXLINE(  51)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,self1,"self") =  ::hxmath::math::Matrix3x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0));
HXDLIN(  51)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,m1,"m") =  ::hxmath::math::Matrix3x2Default_obj::__new(self1->a,self1->b,self1->c,self1->d,self1->tx,self1->ty);
HXDLIN(  51)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,n1,"n") =  ::hxmath::math::Matrix3x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0));
HXDLIN(  51)		Bool _hx_tmp6;
HXDLIN(  51)		Bool _hx_tmp7;
HXDLIN(  51)		if (hx::IsNull( m1 )) {
HXLINE(  51)			_hx_tmp7 = hx::IsNull( n1 );
            		}
            		else {
HXLINE(  51)			_hx_tmp7 = false;
            		}
HXDLIN(  51)		if (!(_hx_tmp7)) {
HXLINE(  51)			Bool _hx_tmp8;
HXDLIN(  51)			Bool _hx_tmp9;
HXDLIN(  51)			Bool _hx_tmp10;
HXDLIN(  51)			Bool _hx_tmp11;
HXDLIN(  51)			Bool _hx_tmp12;
HXDLIN(  51)			Bool _hx_tmp13;
HXDLIN(  51)			if (hx::IsNotNull( m1 )) {
HXLINE(  51)				_hx_tmp13 = hx::IsNotNull( n1 );
            			}
            			else {
HXLINE(  51)				_hx_tmp13 = false;
            			}
HXDLIN(  51)			if (_hx_tmp13) {
HXLINE(  51)				_hx_tmp12 = (m1->a == n1->a);
            			}
            			else {
HXLINE(  51)				_hx_tmp12 = false;
            			}
HXDLIN(  51)			if (_hx_tmp12) {
HXLINE(  51)				_hx_tmp11 = (m1->b == n1->b);
            			}
            			else {
HXLINE(  51)				_hx_tmp11 = false;
            			}
HXDLIN(  51)			if (_hx_tmp11) {
HXLINE(  51)				_hx_tmp10 = (m1->c == n1->c);
            			}
            			else {
HXLINE(  51)				_hx_tmp10 = false;
            			}
HXDLIN(  51)			if (_hx_tmp10) {
HXLINE(  51)				_hx_tmp9 = (m1->d == n1->d);
            			}
            			else {
HXLINE(  51)				_hx_tmp9 = false;
            			}
HXDLIN(  51)			if (_hx_tmp9) {
HXLINE(  51)				_hx_tmp8 = (m1->tx == n1->tx);
            			}
            			else {
HXLINE(  51)				_hx_tmp8 = false;
            			}
HXDLIN(  51)			if (_hx_tmp8) {
HXLINE(  51)				_hx_tmp6 = (m1->ty == n1->ty);
            			}
            			else {
HXLINE(  51)				_hx_tmp6 = false;
            			}
            		}
            		else {
HXLINE(  51)			_hx_tmp6 = true;
            		}
HXDLIN(  51)		this->assertTrue(_hx_tmp6,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),51,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testClone",ab,51,65,11)));
HXLINE(  52)		HX_VARI_NAME(  ::hxmath::math::Matrix3x3Default,self2,"self") =  ::hxmath::math::Matrix3x3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  52)		HX_VARI(  ::hxmath::math::Matrix3x3Default,a) =  ::hxmath::math::Matrix3x3Default_obj::__new(self2->m00,self2->m10,self2->m20,self2->m01,self2->m11,self2->m21,self2->m02,self2->m12,self2->m22);
HXDLIN(  52)		HX_VARI(  ::hxmath::math::Matrix3x3Default,b) =  ::hxmath::math::Matrix3x3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  52)		Bool _hx_tmp14;
HXDLIN(  52)		Bool _hx_tmp15;
HXDLIN(  52)		if (hx::IsNull( a )) {
HXLINE(  52)			_hx_tmp15 = hx::IsNull( b );
            		}
            		else {
HXLINE(  52)			_hx_tmp15 = false;
            		}
HXDLIN(  52)		if (!(_hx_tmp15)) {
HXLINE(  52)			Bool _hx_tmp16;
HXDLIN(  52)			Bool _hx_tmp17;
HXDLIN(  52)			Bool _hx_tmp18;
HXDLIN(  52)			Bool _hx_tmp19;
HXDLIN(  52)			Bool _hx_tmp20;
HXDLIN(  52)			Bool _hx_tmp21;
HXDLIN(  52)			Bool _hx_tmp22;
HXDLIN(  52)			Bool _hx_tmp23;
HXDLIN(  52)			Bool _hx_tmp24;
HXDLIN(  52)			if (hx::IsNotNull( a )) {
HXLINE(  52)				_hx_tmp24 = hx::IsNotNull( b );
            			}
            			else {
HXLINE(  52)				_hx_tmp24 = false;
            			}
HXDLIN(  52)			if (_hx_tmp24) {
HXLINE(  52)				_hx_tmp23 = (a->m00 == b->m00);
            			}
            			else {
HXLINE(  52)				_hx_tmp23 = false;
            			}
HXDLIN(  52)			if (_hx_tmp23) {
HXLINE(  52)				_hx_tmp22 = (a->m10 == b->m10);
            			}
            			else {
HXLINE(  52)				_hx_tmp22 = false;
            			}
HXDLIN(  52)			if (_hx_tmp22) {
HXLINE(  52)				_hx_tmp21 = (a->m20 == b->m20);
            			}
            			else {
HXLINE(  52)				_hx_tmp21 = false;
            			}
HXDLIN(  52)			if (_hx_tmp21) {
HXLINE(  52)				_hx_tmp20 = (a->m01 == b->m01);
            			}
            			else {
HXLINE(  52)				_hx_tmp20 = false;
            			}
HXDLIN(  52)			if (_hx_tmp20) {
HXLINE(  52)				_hx_tmp19 = (a->m11 == b->m11);
            			}
            			else {
HXLINE(  52)				_hx_tmp19 = false;
            			}
HXDLIN(  52)			if (_hx_tmp19) {
HXLINE(  52)				_hx_tmp18 = (a->m21 == b->m21);
            			}
            			else {
HXLINE(  52)				_hx_tmp18 = false;
            			}
HXDLIN(  52)			if (_hx_tmp18) {
HXLINE(  52)				_hx_tmp17 = (a->m02 == b->m02);
            			}
            			else {
HXLINE(  52)				_hx_tmp17 = false;
            			}
HXDLIN(  52)			if (_hx_tmp17) {
HXLINE(  52)				_hx_tmp16 = (a->m12 == b->m12);
            			}
            			else {
HXLINE(  52)				_hx_tmp16 = false;
            			}
HXDLIN(  52)			if (_hx_tmp16) {
HXLINE(  52)				_hx_tmp14 = (a->m22 == b->m22);
            			}
            			else {
HXLINE(  52)				_hx_tmp14 = false;
            			}
            		}
            		else {
HXLINE(  52)			_hx_tmp14 = true;
            		}
HXDLIN(  52)		this->assertTrue(_hx_tmp14,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),52,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testClone",ab,51,65,11)));
HXLINE(  53)		HX_VARI_NAME(  ::hxmath::math::Matrix4x4Default,self3,"self") =  ::hxmath::math::Matrix4x4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  53)		HX_VARI_NAME(  ::hxmath::math::Matrix4x4Default,a1,"a") =  ::hxmath::math::Matrix4x4Default_obj::__new(self3->m00,self3->m10,self3->m20,self3->m30,self3->m01,self3->m11,self3->m21,self3->m31,self3->m02,self3->m12,self3->m22,self3->m32,self3->m03,self3->m13,self3->m23,self3->m33);
HXDLIN(  53)		HX_VARI_NAME(  ::hxmath::math::Matrix4x4Default,b1,"b") =  ::hxmath::math::Matrix4x4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  53)		Bool _hx_tmp25;
HXDLIN(  53)		Bool _hx_tmp26;
HXDLIN(  53)		if (hx::IsNull( a1 )) {
HXLINE(  53)			_hx_tmp26 = hx::IsNull( b1 );
            		}
            		else {
HXLINE(  53)			_hx_tmp26 = false;
            		}
HXDLIN(  53)		if (!(_hx_tmp26)) {
HXLINE(  53)			Bool _hx_tmp27;
HXDLIN(  53)			Bool _hx_tmp28;
HXDLIN(  53)			Bool _hx_tmp29;
HXDLIN(  53)			Bool _hx_tmp30;
HXDLIN(  53)			Bool _hx_tmp31;
HXDLIN(  53)			Bool _hx_tmp32;
HXDLIN(  53)			Bool _hx_tmp33;
HXDLIN(  53)			Bool _hx_tmp34;
HXDLIN(  53)			Bool _hx_tmp35;
HXDLIN(  53)			Bool _hx_tmp36;
HXDLIN(  53)			Bool _hx_tmp37;
HXDLIN(  53)			Bool _hx_tmp38;
HXDLIN(  53)			Bool _hx_tmp39;
HXDLIN(  53)			Bool _hx_tmp40;
HXDLIN(  53)			Bool _hx_tmp41;
HXDLIN(  53)			Bool _hx_tmp42;
HXDLIN(  53)			if (hx::IsNotNull( a1 )) {
HXLINE(  53)				_hx_tmp42 = hx::IsNotNull( b1 );
            			}
            			else {
HXLINE(  53)				_hx_tmp42 = false;
            			}
HXDLIN(  53)			if (_hx_tmp42) {
HXLINE(  53)				_hx_tmp41 = (a1->m00 == b1->m00);
            			}
            			else {
HXLINE(  53)				_hx_tmp41 = false;
            			}
HXDLIN(  53)			if (_hx_tmp41) {
HXLINE(  53)				_hx_tmp40 = (a1->m10 == b1->m10);
            			}
            			else {
HXLINE(  53)				_hx_tmp40 = false;
            			}
HXDLIN(  53)			if (_hx_tmp40) {
HXLINE(  53)				_hx_tmp39 = (a1->m20 == b1->m20);
            			}
            			else {
HXLINE(  53)				_hx_tmp39 = false;
            			}
HXDLIN(  53)			if (_hx_tmp39) {
HXLINE(  53)				_hx_tmp38 = (a1->m30 == b1->m30);
            			}
            			else {
HXLINE(  53)				_hx_tmp38 = false;
            			}
HXDLIN(  53)			if (_hx_tmp38) {
HXLINE(  53)				_hx_tmp37 = (a1->m01 == b1->m01);
            			}
            			else {
HXLINE(  53)				_hx_tmp37 = false;
            			}
HXDLIN(  53)			if (_hx_tmp37) {
HXLINE(  53)				_hx_tmp36 = (a1->m11 == b1->m11);
            			}
            			else {
HXLINE(  53)				_hx_tmp36 = false;
            			}
HXDLIN(  53)			if (_hx_tmp36) {
HXLINE(  53)				_hx_tmp35 = (a1->m21 == b1->m21);
            			}
            			else {
HXLINE(  53)				_hx_tmp35 = false;
            			}
HXDLIN(  53)			if (_hx_tmp35) {
HXLINE(  53)				_hx_tmp34 = (a1->m31 == b1->m31);
            			}
            			else {
HXLINE(  53)				_hx_tmp34 = false;
            			}
HXDLIN(  53)			if (_hx_tmp34) {
HXLINE(  53)				_hx_tmp33 = (a1->m02 == b1->m02);
            			}
            			else {
HXLINE(  53)				_hx_tmp33 = false;
            			}
HXDLIN(  53)			if (_hx_tmp33) {
HXLINE(  53)				_hx_tmp32 = (a1->m12 == b1->m12);
            			}
            			else {
HXLINE(  53)				_hx_tmp32 = false;
            			}
HXDLIN(  53)			if (_hx_tmp32) {
HXLINE(  53)				_hx_tmp31 = (a1->m22 == b1->m22);
            			}
            			else {
HXLINE(  53)				_hx_tmp31 = false;
            			}
HXDLIN(  53)			if (_hx_tmp31) {
HXLINE(  53)				_hx_tmp30 = (a1->m32 == b1->m32);
            			}
            			else {
HXLINE(  53)				_hx_tmp30 = false;
            			}
HXDLIN(  53)			if (_hx_tmp30) {
HXLINE(  53)				_hx_tmp29 = (a1->m03 == b1->m03);
            			}
            			else {
HXLINE(  53)				_hx_tmp29 = false;
            			}
HXDLIN(  53)			if (_hx_tmp29) {
HXLINE(  53)				_hx_tmp28 = (a1->m13 == b1->m13);
            			}
            			else {
HXLINE(  53)				_hx_tmp28 = false;
            			}
HXDLIN(  53)			if (_hx_tmp28) {
HXLINE(  53)				_hx_tmp27 = (a1->m23 == b1->m23);
            			}
            			else {
HXLINE(  53)				_hx_tmp27 = false;
            			}
HXDLIN(  53)			if (_hx_tmp27) {
HXLINE(  53)				_hx_tmp25 = (a1->m33 == b1->m33);
            			}
            			else {
HXLINE(  53)				_hx_tmp25 = false;
            			}
            		}
            		else {
HXLINE(  53)			_hx_tmp25 = true;
            		}
HXDLIN(  53)		this->assertTrue(_hx_tmp25,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),53,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testClone",ab,51,65,11)));
HXLINE(  55)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self4,"self") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)0.0));
HXDLIN(  55)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,a2,"a") =  ::hxmath::math::Vector2Default_obj::__new(self4->x,self4->y);
HXDLIN(  55)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b2,"b") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)0.0));
HXDLIN(  55)		Bool _hx_tmp43;
HXDLIN(  55)		Bool _hx_tmp44;
HXDLIN(  55)		if (hx::IsNull( a2 )) {
HXLINE(  55)			_hx_tmp44 = hx::IsNull( b2 );
            		}
            		else {
HXLINE(  55)			_hx_tmp44 = false;
            		}
HXDLIN(  55)		if (!(_hx_tmp44)) {
HXLINE(  55)			Bool _hx_tmp45;
HXDLIN(  55)			Bool _hx_tmp46;
HXDLIN(  55)			if (hx::IsNotNull( a2 )) {
HXLINE(  55)				_hx_tmp46 = hx::IsNotNull( b2 );
            			}
            			else {
HXLINE(  55)				_hx_tmp46 = false;
            			}
HXDLIN(  55)			if (_hx_tmp46) {
HXLINE(  55)				_hx_tmp45 = (a2->x == b2->x);
            			}
            			else {
HXLINE(  55)				_hx_tmp45 = false;
            			}
HXDLIN(  55)			if (_hx_tmp45) {
HXLINE(  55)				_hx_tmp43 = (a2->y == b2->y);
            			}
            			else {
HXLINE(  55)				_hx_tmp43 = false;
            			}
            		}
            		else {
HXLINE(  55)			_hx_tmp43 = true;
            		}
HXDLIN(  55)		this->assertTrue(_hx_tmp43,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),55,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testClone",ab,51,65,11)));
HXLINE(  56)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self5,"self") =  ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN(  56)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,a3,"a") =  ::hxmath::math::Vector3Default_obj::__new(self5->x,self5->y,self5->z);
HXDLIN(  56)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,b3,"b") =  ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN(  56)		Bool _hx_tmp47;
HXDLIN(  56)		Bool _hx_tmp48;
HXDLIN(  56)		if (hx::IsNull( a3 )) {
HXLINE(  56)			_hx_tmp48 = hx::IsNull( b3 );
            		}
            		else {
HXLINE(  56)			_hx_tmp48 = false;
            		}
HXDLIN(  56)		if (!(_hx_tmp48)) {
HXLINE(  56)			Bool _hx_tmp49;
HXDLIN(  56)			Bool _hx_tmp50;
HXDLIN(  56)			Bool _hx_tmp51;
HXDLIN(  56)			if (hx::IsNotNull( a3 )) {
HXLINE(  56)				_hx_tmp51 = hx::IsNotNull( b3 );
            			}
            			else {
HXLINE(  56)				_hx_tmp51 = false;
            			}
HXDLIN(  56)			if (_hx_tmp51) {
HXLINE(  56)				_hx_tmp50 = (a3->x == b3->x);
            			}
            			else {
HXLINE(  56)				_hx_tmp50 = false;
            			}
HXDLIN(  56)			if (_hx_tmp50) {
HXLINE(  56)				_hx_tmp49 = (a3->y == b3->y);
            			}
            			else {
HXLINE(  56)				_hx_tmp49 = false;
            			}
HXDLIN(  56)			if (_hx_tmp49) {
HXLINE(  56)				_hx_tmp47 = (a3->z == b3->z);
            			}
            			else {
HXLINE(  56)				_hx_tmp47 = false;
            			}
            		}
            		else {
HXLINE(  56)			_hx_tmp47 = true;
            		}
HXDLIN(  56)		this->assertTrue(_hx_tmp47,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),56,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testClone",ab,51,65,11)));
HXLINE(  57)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,self6,"self") =  ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN(  57)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,a4,"a") =  ::hxmath::math::Vector4Default_obj::__new(self6->x,self6->y,self6->z,self6->w);
HXDLIN(  57)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,b4,"b") =  ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN(  57)		Bool _hx_tmp52;
HXDLIN(  57)		Bool _hx_tmp53;
HXDLIN(  57)		if (hx::IsNull( a4 )) {
HXLINE(  57)			_hx_tmp53 = hx::IsNull( b4 );
            		}
            		else {
HXLINE(  57)			_hx_tmp53 = false;
            		}
HXDLIN(  57)		if (!(_hx_tmp53)) {
HXLINE(  57)			Bool _hx_tmp54;
HXDLIN(  57)			Bool _hx_tmp55;
HXDLIN(  57)			Bool _hx_tmp56;
HXDLIN(  57)			Bool _hx_tmp57;
HXDLIN(  57)			if (hx::IsNotNull( a4 )) {
HXLINE(  57)				_hx_tmp57 = hx::IsNotNull( b4 );
            			}
            			else {
HXLINE(  57)				_hx_tmp57 = false;
            			}
HXDLIN(  57)			if (_hx_tmp57) {
HXLINE(  57)				_hx_tmp56 = (a4->x == b4->x);
            			}
            			else {
HXLINE(  57)				_hx_tmp56 = false;
            			}
HXDLIN(  57)			if (_hx_tmp56) {
HXLINE(  57)				_hx_tmp55 = (a4->y == b4->y);
            			}
            			else {
HXLINE(  57)				_hx_tmp55 = false;
            			}
HXDLIN(  57)			if (_hx_tmp55) {
HXLINE(  57)				_hx_tmp54 = (a4->z == b4->z);
            			}
            			else {
HXLINE(  57)				_hx_tmp54 = false;
            			}
HXDLIN(  57)			if (_hx_tmp54) {
HXLINE(  57)				_hx_tmp52 = (a4->w == b4->w);
            			}
            			else {
HXLINE(  57)				_hx_tmp52 = false;
            			}
            		}
            		else {
HXLINE(  57)			_hx_tmp52 = true;
            		}
HXDLIN(  57)		this->assertTrue(_hx_tmp52,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),57,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testClone",ab,51,65,11)));
HXLINE(  59)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,self7,"self") =  ::hxmath::math::QuaternionDefault_obj::__new((int)1,(int)0,(int)0,(int)0);
HXDLIN(  59)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,a5,"a") =  ::hxmath::math::QuaternionDefault_obj::__new(self7->s,self7->x,self7->y,self7->z);
HXDLIN(  59)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,b5,"b") =  ::hxmath::math::QuaternionDefault_obj::__new((int)1,(int)0,(int)0,(int)0);
HXDLIN(  59)		Bool _hx_tmp58;
HXDLIN(  59)		Bool _hx_tmp59;
HXDLIN(  59)		if (hx::IsNull( a5 )) {
HXLINE(  59)			_hx_tmp59 = hx::IsNull( b5 );
            		}
            		else {
HXLINE(  59)			_hx_tmp59 = false;
            		}
HXDLIN(  59)		if (!(_hx_tmp59)) {
HXLINE(  59)			Bool _hx_tmp60;
HXDLIN(  59)			Bool _hx_tmp61;
HXDLIN(  59)			Bool _hx_tmp62;
HXDLIN(  59)			Bool _hx_tmp63;
HXDLIN(  59)			if (hx::IsNotNull( a5 )) {
HXLINE(  59)				_hx_tmp63 = hx::IsNotNull( b5 );
            			}
            			else {
HXLINE(  59)				_hx_tmp63 = false;
            			}
HXDLIN(  59)			if (_hx_tmp63) {
HXLINE(  59)				_hx_tmp62 = (a5->s == b5->s);
            			}
            			else {
HXLINE(  59)				_hx_tmp62 = false;
            			}
HXDLIN(  59)			if (_hx_tmp62) {
HXLINE(  59)				_hx_tmp61 = (a5->x == b5->x);
            			}
            			else {
HXLINE(  59)				_hx_tmp61 = false;
            			}
HXDLIN(  59)			if (_hx_tmp61) {
HXLINE(  59)				_hx_tmp60 = (a5->y == b5->y);
            			}
            			else {
HXLINE(  59)				_hx_tmp60 = false;
            			}
HXDLIN(  59)			if (_hx_tmp60) {
HXLINE(  59)				_hx_tmp58 = (a5->z == b5->z);
            			}
            			else {
HXLINE(  59)				_hx_tmp58 = false;
            			}
            		}
            		else {
HXLINE(  59)			_hx_tmp58 = true;
            		}
HXDLIN(  59)		this->assertTrue(_hx_tmp58,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),59,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testClone",ab,51,65,11)));
HXLINE(  61)		HX_VARI_NAME(  ::hxmath::math::IntVector2Default,self8,"self") = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)0,(int)0);
HXDLIN(  61)		HX_VARI_NAME(  ::hxmath::math::IntVector2Default,a6,"a") = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new(self8->x,self8->y);
HXDLIN(  61)		HX_VARI_NAME(  ::hxmath::math::IntVector2Default,b6,"b") = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)0,(int)0);
HXDLIN(  61)		Bool _hx_tmp64;
HXDLIN(  61)		Bool _hx_tmp65;
HXDLIN(  61)		if (hx::IsNull( a6 )) {
HXLINE(  61)			_hx_tmp65 = hx::IsNull( b6 );
            		}
            		else {
HXLINE(  61)			_hx_tmp65 = false;
            		}
HXDLIN(  61)		if (!(_hx_tmp65)) {
HXLINE(  61)			Bool _hx_tmp66;
HXDLIN(  61)			Bool _hx_tmp67;
HXDLIN(  61)			if (hx::IsNotNull( a6 )) {
HXLINE(  61)				_hx_tmp67 = hx::IsNotNull( b6 );
            			}
            			else {
HXLINE(  61)				_hx_tmp67 = false;
            			}
HXDLIN(  61)			if (_hx_tmp67) {
HXLINE(  61)				_hx_tmp66 = (a6->x == b6->x);
            			}
            			else {
HXLINE(  61)				_hx_tmp66 = false;
            			}
HXDLIN(  61)			if (_hx_tmp66) {
HXLINE(  61)				_hx_tmp64 = (a6->y == b6->y);
            			}
            			else {
HXLINE(  61)				_hx_tmp64 = false;
            			}
            		}
            		else {
HXLINE(  61)			_hx_tmp64 = true;
            		}
HXDLIN(  61)		this->assertTrue(_hx_tmp64,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),61,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testClone",ab,51,65,11)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStructures_obj,testClone,(void))

void TestStructures_obj::testAddSub(){
            	HX_STACK_FRAME("test.TestStructures","testAddSub",0x976c67b1,"test.TestStructures.testAddSub","test/TestStructures.hx",65,0x1c38d1cf)
            	HX_STACK_THIS(this)
HXLINE(  66)		HX_VARI(  ::hxmath::math::Matrix2x2Default,mat22) =  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXLINE(  67)		HX_VARI(  ::hxmath::math::Matrix2x2Default,n) =  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  67)		HX_VARI(  ::hxmath::math::Matrix2x2Default,self) = mat22;
HXDLIN(  67)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,self1,"self") =  ::hxmath::math::Matrix2x2Default_obj::__new(self->a,self->b,self->c,self->d);
HXDLIN(  67)		hx::AddEq(self1->a,n->a);
HXDLIN(  67)		hx::AddEq(self1->b,n->b);
HXDLIN(  67)		hx::AddEq(self1->c,n->c);
HXDLIN(  67)		hx::AddEq(self1->d,n->d);
HXDLIN(  67)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,n1,"n") =  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  67)		Bool _hx_tmp;
HXDLIN(  67)		Bool _hx_tmp1;
HXDLIN(  67)		if (hx::IsNull( self1 )) {
HXLINE(  67)			_hx_tmp1 = hx::IsNull( n1 );
            		}
            		else {
HXLINE(  67)			_hx_tmp1 = false;
            		}
HXDLIN(  67)		if (!(_hx_tmp1)) {
HXLINE(  67)			Bool _hx_tmp2;
HXDLIN(  67)			Bool _hx_tmp3;
HXDLIN(  67)			Bool _hx_tmp4;
HXDLIN(  67)			Bool _hx_tmp5;
HXDLIN(  67)			if (hx::IsNotNull( self1 )) {
HXLINE(  67)				_hx_tmp5 = hx::IsNotNull( n1 );
            			}
            			else {
HXLINE(  67)				_hx_tmp5 = false;
            			}
HXDLIN(  67)			if (_hx_tmp5) {
HXLINE(  67)				_hx_tmp4 = (self1->a == n1->a);
            			}
            			else {
HXLINE(  67)				_hx_tmp4 = false;
            			}
HXDLIN(  67)			if (_hx_tmp4) {
HXLINE(  67)				_hx_tmp3 = (self1->b == n1->b);
            			}
            			else {
HXLINE(  67)				_hx_tmp3 = false;
            			}
HXDLIN(  67)			if (_hx_tmp3) {
HXLINE(  67)				_hx_tmp2 = (self1->c == n1->c);
            			}
            			else {
HXLINE(  67)				_hx_tmp2 = false;
            			}
HXDLIN(  67)			if (_hx_tmp2) {
HXLINE(  67)				_hx_tmp = (self1->d == n1->d);
            			}
            			else {
HXLINE(  67)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(  67)			_hx_tmp = true;
            		}
HXDLIN(  67)		this->assertTrue(_hx_tmp,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),67,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE(  68)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,n2,"n") =  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  68)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,self2,"self") = mat22;
HXDLIN(  68)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,self3,"self") =  ::hxmath::math::Matrix2x2Default_obj::__new(self2->a,self2->b,self2->c,self2->d);
HXDLIN(  68)		hx::AddEq(self3->a,n2->a);
HXDLIN(  68)		hx::AddEq(self3->b,n2->b);
HXDLIN(  68)		hx::AddEq(self3->c,n2->c);
HXDLIN(  68)		hx::AddEq(self3->d,n2->d);
HXDLIN(  68)		mat22 = self3;
HXLINE(  69)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,n3,"n") =  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  69)		Bool _hx_tmp6;
HXDLIN(  69)		Bool _hx_tmp7;
HXDLIN(  69)		if (hx::IsNull( self3 )) {
HXLINE(  69)			_hx_tmp7 = hx::IsNull( n3 );
            		}
            		else {
HXLINE(  69)			_hx_tmp7 = false;
            		}
HXDLIN(  69)		if (!(_hx_tmp7)) {
HXLINE(  69)			Bool _hx_tmp8;
HXDLIN(  69)			Bool _hx_tmp9;
HXDLIN(  69)			Bool _hx_tmp10;
HXDLIN(  69)			Bool _hx_tmp11;
HXDLIN(  69)			if (hx::IsNotNull( self3 )) {
HXLINE(  69)				_hx_tmp11 = hx::IsNotNull( n3 );
            			}
            			else {
HXLINE(  69)				_hx_tmp11 = false;
            			}
HXDLIN(  69)			if (_hx_tmp11) {
HXLINE(  69)				_hx_tmp10 = (self3->a == n3->a);
            			}
            			else {
HXLINE(  69)				_hx_tmp10 = false;
            			}
HXDLIN(  69)			if (_hx_tmp10) {
HXLINE(  69)				_hx_tmp9 = (self3->b == n3->b);
            			}
            			else {
HXLINE(  69)				_hx_tmp9 = false;
            			}
HXDLIN(  69)			if (_hx_tmp9) {
HXLINE(  69)				_hx_tmp8 = (self3->c == n3->c);
            			}
            			else {
HXLINE(  69)				_hx_tmp8 = false;
            			}
HXDLIN(  69)			if (_hx_tmp8) {
HXLINE(  69)				_hx_tmp6 = (self3->d == n3->d);
            			}
            			else {
HXLINE(  69)				_hx_tmp6 = false;
            			}
            		}
            		else {
HXLINE(  69)			_hx_tmp6 = true;
            		}
HXDLIN(  69)		this->assertTrue(_hx_tmp6,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),69,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE(  70)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,n4,"n") =  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  70)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,self4,"self") = self3;
HXDLIN(  70)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,self5,"self") =  ::hxmath::math::Matrix2x2Default_obj::__new(self4->a,self4->b,self4->c,self4->d);
HXDLIN(  70)		hx::SubEq(self5->a,n4->a);
HXDLIN(  70)		hx::SubEq(self5->b,n4->b);
HXDLIN(  70)		hx::SubEq(self5->c,n4->c);
HXDLIN(  70)		hx::SubEq(self5->d,n4->d);
HXDLIN(  70)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,n5,"n") =  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN(  70)		Bool _hx_tmp12;
HXDLIN(  70)		Bool _hx_tmp13;
HXDLIN(  70)		if (hx::IsNull( self5 )) {
HXLINE(  70)			_hx_tmp13 = hx::IsNull( n5 );
            		}
            		else {
HXLINE(  70)			_hx_tmp13 = false;
            		}
HXDLIN(  70)		if (!(_hx_tmp13)) {
HXLINE(  70)			Bool _hx_tmp14;
HXDLIN(  70)			Bool _hx_tmp15;
HXDLIN(  70)			Bool _hx_tmp16;
HXDLIN(  70)			Bool _hx_tmp17;
HXDLIN(  70)			if (hx::IsNotNull( self5 )) {
HXLINE(  70)				_hx_tmp17 = hx::IsNotNull( n5 );
            			}
            			else {
HXLINE(  70)				_hx_tmp17 = false;
            			}
HXDLIN(  70)			if (_hx_tmp17) {
HXLINE(  70)				_hx_tmp16 = (self5->a == n5->a);
            			}
            			else {
HXLINE(  70)				_hx_tmp16 = false;
            			}
HXDLIN(  70)			if (_hx_tmp16) {
HXLINE(  70)				_hx_tmp15 = (self5->b == n5->b);
            			}
            			else {
HXLINE(  70)				_hx_tmp15 = false;
            			}
HXDLIN(  70)			if (_hx_tmp15) {
HXLINE(  70)				_hx_tmp14 = (self5->c == n5->c);
            			}
            			else {
HXLINE(  70)				_hx_tmp14 = false;
            			}
HXDLIN(  70)			if (_hx_tmp14) {
HXLINE(  70)				_hx_tmp12 = (self5->d == n5->d);
            			}
            			else {
HXLINE(  70)				_hx_tmp12 = false;
            			}
            		}
            		else {
HXLINE(  70)			_hx_tmp12 = true;
            		}
HXDLIN(  70)		this->assertTrue(_hx_tmp12,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),70,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE(  71)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,n6,"n") =  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  71)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,self6,"self") = self3;
HXDLIN(  71)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,self7,"self") =  ::hxmath::math::Matrix2x2Default_obj::__new(self6->a,self6->b,self6->c,self6->d);
HXDLIN(  71)		hx::SubEq(self7->a,n6->a);
HXDLIN(  71)		hx::SubEq(self7->b,n6->b);
HXDLIN(  71)		hx::SubEq(self7->c,n6->c);
HXDLIN(  71)		hx::SubEq(self7->d,n6->d);
HXDLIN(  71)		mat22 = self7;
HXLINE(  72)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,n7,"n") =  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN(  72)		Bool _hx_tmp18;
HXDLIN(  72)		Bool _hx_tmp19;
HXDLIN(  72)		if (hx::IsNull( self7 )) {
HXLINE(  72)			_hx_tmp19 = hx::IsNull( n7 );
            		}
            		else {
HXLINE(  72)			_hx_tmp19 = false;
            		}
HXDLIN(  72)		if (!(_hx_tmp19)) {
HXLINE(  72)			Bool _hx_tmp20;
HXDLIN(  72)			Bool _hx_tmp21;
HXDLIN(  72)			Bool _hx_tmp22;
HXDLIN(  72)			Bool _hx_tmp23;
HXDLIN(  72)			if (hx::IsNotNull( self7 )) {
HXLINE(  72)				_hx_tmp23 = hx::IsNotNull( n7 );
            			}
            			else {
HXLINE(  72)				_hx_tmp23 = false;
            			}
HXDLIN(  72)			if (_hx_tmp23) {
HXLINE(  72)				_hx_tmp22 = (self7->a == n7->a);
            			}
            			else {
HXLINE(  72)				_hx_tmp22 = false;
            			}
HXDLIN(  72)			if (_hx_tmp22) {
HXLINE(  72)				_hx_tmp21 = (self7->b == n7->b);
            			}
            			else {
HXLINE(  72)				_hx_tmp21 = false;
            			}
HXDLIN(  72)			if (_hx_tmp21) {
HXLINE(  72)				_hx_tmp20 = (self7->c == n7->c);
            			}
            			else {
HXLINE(  72)				_hx_tmp20 = false;
            			}
HXDLIN(  72)			if (_hx_tmp20) {
HXLINE(  72)				_hx_tmp18 = (self7->d == n7->d);
            			}
            			else {
HXLINE(  72)				_hx_tmp18 = false;
            			}
            		}
            		else {
HXLINE(  72)			_hx_tmp18 = true;
            		}
HXDLIN(  72)		this->assertTrue(_hx_tmp18,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),72,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE(  74)		HX_VARI(  ::hxmath::math::Matrix3x2Default,mat32) =  ::hxmath::math::Matrix3x2Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXLINE(  75)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,n8,"n") =  ::hxmath::math::Matrix3x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0));
HXDLIN(  75)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,self8,"self") = mat32;
HXDLIN(  75)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,self9,"self") =  ::hxmath::math::Matrix3x2Default_obj::__new(self8->a,self8->b,self8->c,self8->d,self8->tx,self8->ty);
HXDLIN(  75)		hx::AddEq(self9->a,n8->a);
HXDLIN(  75)		hx::AddEq(self9->b,n8->b);
HXDLIN(  75)		hx::AddEq(self9->c,n8->c);
HXDLIN(  75)		hx::AddEq(self9->d,n8->d);
HXDLIN(  75)		hx::AddEq(self9->tx,n8->tx);
HXDLIN(  75)		hx::AddEq(self9->ty,n8->ty);
HXDLIN(  75)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,n9,"n") =  ::hxmath::math::Matrix3x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0));
HXDLIN(  75)		Bool _hx_tmp24;
HXDLIN(  75)		Bool _hx_tmp25;
HXDLIN(  75)		if (hx::IsNull( self9 )) {
HXLINE(  75)			_hx_tmp25 = hx::IsNull( n9 );
            		}
            		else {
HXLINE(  75)			_hx_tmp25 = false;
            		}
HXDLIN(  75)		if (!(_hx_tmp25)) {
HXLINE(  75)			Bool _hx_tmp26;
HXDLIN(  75)			Bool _hx_tmp27;
HXDLIN(  75)			Bool _hx_tmp28;
HXDLIN(  75)			Bool _hx_tmp29;
HXDLIN(  75)			Bool _hx_tmp30;
HXDLIN(  75)			Bool _hx_tmp31;
HXDLIN(  75)			if (hx::IsNotNull( self9 )) {
HXLINE(  75)				_hx_tmp31 = hx::IsNotNull( n9 );
            			}
            			else {
HXLINE(  75)				_hx_tmp31 = false;
            			}
HXDLIN(  75)			if (_hx_tmp31) {
HXLINE(  75)				_hx_tmp30 = (self9->a == n9->a);
            			}
            			else {
HXLINE(  75)				_hx_tmp30 = false;
            			}
HXDLIN(  75)			if (_hx_tmp30) {
HXLINE(  75)				_hx_tmp29 = (self9->b == n9->b);
            			}
            			else {
HXLINE(  75)				_hx_tmp29 = false;
            			}
HXDLIN(  75)			if (_hx_tmp29) {
HXLINE(  75)				_hx_tmp28 = (self9->c == n9->c);
            			}
            			else {
HXLINE(  75)				_hx_tmp28 = false;
            			}
HXDLIN(  75)			if (_hx_tmp28) {
HXLINE(  75)				_hx_tmp27 = (self9->d == n9->d);
            			}
            			else {
HXLINE(  75)				_hx_tmp27 = false;
            			}
HXDLIN(  75)			if (_hx_tmp27) {
HXLINE(  75)				_hx_tmp26 = (self9->tx == n9->tx);
            			}
            			else {
HXLINE(  75)				_hx_tmp26 = false;
            			}
HXDLIN(  75)			if (_hx_tmp26) {
HXLINE(  75)				_hx_tmp24 = (self9->ty == n9->ty);
            			}
            			else {
HXLINE(  75)				_hx_tmp24 = false;
            			}
            		}
            		else {
HXLINE(  75)			_hx_tmp24 = true;
            		}
HXDLIN(  75)		this->assertTrue(_hx_tmp24,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),75,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE(  76)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,n10,"n") =  ::hxmath::math::Matrix3x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0));
HXDLIN(  76)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,self10,"self") = mat32;
HXDLIN(  76)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,self11,"self") =  ::hxmath::math::Matrix3x2Default_obj::__new(self10->a,self10->b,self10->c,self10->d,self10->tx,self10->ty);
HXDLIN(  76)		hx::AddEq(self11->a,n10->a);
HXDLIN(  76)		hx::AddEq(self11->b,n10->b);
HXDLIN(  76)		hx::AddEq(self11->c,n10->c);
HXDLIN(  76)		hx::AddEq(self11->d,n10->d);
HXDLIN(  76)		hx::AddEq(self11->tx,n10->tx);
HXDLIN(  76)		hx::AddEq(self11->ty,n10->ty);
HXDLIN(  76)		mat32 = self11;
HXLINE(  77)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,n11,"n") =  ::hxmath::math::Matrix3x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0));
HXDLIN(  77)		Bool _hx_tmp32;
HXDLIN(  77)		Bool _hx_tmp33;
HXDLIN(  77)		if (hx::IsNull( self11 )) {
HXLINE(  77)			_hx_tmp33 = hx::IsNull( n11 );
            		}
            		else {
HXLINE(  77)			_hx_tmp33 = false;
            		}
HXDLIN(  77)		if (!(_hx_tmp33)) {
HXLINE(  77)			Bool _hx_tmp34;
HXDLIN(  77)			Bool _hx_tmp35;
HXDLIN(  77)			Bool _hx_tmp36;
HXDLIN(  77)			Bool _hx_tmp37;
HXDLIN(  77)			Bool _hx_tmp38;
HXDLIN(  77)			Bool _hx_tmp39;
HXDLIN(  77)			if (hx::IsNotNull( self11 )) {
HXLINE(  77)				_hx_tmp39 = hx::IsNotNull( n11 );
            			}
            			else {
HXLINE(  77)				_hx_tmp39 = false;
            			}
HXDLIN(  77)			if (_hx_tmp39) {
HXLINE(  77)				_hx_tmp38 = (self11->a == n11->a);
            			}
            			else {
HXLINE(  77)				_hx_tmp38 = false;
            			}
HXDLIN(  77)			if (_hx_tmp38) {
HXLINE(  77)				_hx_tmp37 = (self11->b == n11->b);
            			}
            			else {
HXLINE(  77)				_hx_tmp37 = false;
            			}
HXDLIN(  77)			if (_hx_tmp37) {
HXLINE(  77)				_hx_tmp36 = (self11->c == n11->c);
            			}
            			else {
HXLINE(  77)				_hx_tmp36 = false;
            			}
HXDLIN(  77)			if (_hx_tmp36) {
HXLINE(  77)				_hx_tmp35 = (self11->d == n11->d);
            			}
            			else {
HXLINE(  77)				_hx_tmp35 = false;
            			}
HXDLIN(  77)			if (_hx_tmp35) {
HXLINE(  77)				_hx_tmp34 = (self11->tx == n11->tx);
            			}
            			else {
HXLINE(  77)				_hx_tmp34 = false;
            			}
HXDLIN(  77)			if (_hx_tmp34) {
HXLINE(  77)				_hx_tmp32 = (self11->ty == n11->ty);
            			}
            			else {
HXLINE(  77)				_hx_tmp32 = false;
            			}
            		}
            		else {
HXLINE(  77)			_hx_tmp32 = true;
            		}
HXDLIN(  77)		this->assertTrue(_hx_tmp32,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),77,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE(  78)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,n12,"n") =  ::hxmath::math::Matrix3x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0));
HXDLIN(  78)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,self12,"self") = self11;
HXDLIN(  78)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,self13,"self") =  ::hxmath::math::Matrix3x2Default_obj::__new(self12->a,self12->b,self12->c,self12->d,self12->tx,self12->ty);
HXDLIN(  78)		hx::SubEq(self13->a,n12->a);
HXDLIN(  78)		hx::SubEq(self13->b,n12->b);
HXDLIN(  78)		hx::SubEq(self13->c,n12->c);
HXDLIN(  78)		hx::SubEq(self13->d,n12->d);
HXDLIN(  78)		hx::SubEq(self13->tx,n12->tx);
HXDLIN(  78)		hx::SubEq(self13->ty,n12->ty);
HXDLIN(  78)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,n13,"n") =  ::hxmath::math::Matrix3x2Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN(  78)		Bool _hx_tmp40;
HXDLIN(  78)		Bool _hx_tmp41;
HXDLIN(  78)		if (hx::IsNull( self13 )) {
HXLINE(  78)			_hx_tmp41 = hx::IsNull( n13 );
            		}
            		else {
HXLINE(  78)			_hx_tmp41 = false;
            		}
HXDLIN(  78)		if (!(_hx_tmp41)) {
HXLINE(  78)			Bool _hx_tmp42;
HXDLIN(  78)			Bool _hx_tmp43;
HXDLIN(  78)			Bool _hx_tmp44;
HXDLIN(  78)			Bool _hx_tmp45;
HXDLIN(  78)			Bool _hx_tmp46;
HXDLIN(  78)			Bool _hx_tmp47;
HXDLIN(  78)			if (hx::IsNotNull( self13 )) {
HXLINE(  78)				_hx_tmp47 = hx::IsNotNull( n13 );
            			}
            			else {
HXLINE(  78)				_hx_tmp47 = false;
            			}
HXDLIN(  78)			if (_hx_tmp47) {
HXLINE(  78)				_hx_tmp46 = (self13->a == n13->a);
            			}
            			else {
HXLINE(  78)				_hx_tmp46 = false;
            			}
HXDLIN(  78)			if (_hx_tmp46) {
HXLINE(  78)				_hx_tmp45 = (self13->b == n13->b);
            			}
            			else {
HXLINE(  78)				_hx_tmp45 = false;
            			}
HXDLIN(  78)			if (_hx_tmp45) {
HXLINE(  78)				_hx_tmp44 = (self13->c == n13->c);
            			}
            			else {
HXLINE(  78)				_hx_tmp44 = false;
            			}
HXDLIN(  78)			if (_hx_tmp44) {
HXLINE(  78)				_hx_tmp43 = (self13->d == n13->d);
            			}
            			else {
HXLINE(  78)				_hx_tmp43 = false;
            			}
HXDLIN(  78)			if (_hx_tmp43) {
HXLINE(  78)				_hx_tmp42 = (self13->tx == n13->tx);
            			}
            			else {
HXLINE(  78)				_hx_tmp42 = false;
            			}
HXDLIN(  78)			if (_hx_tmp42) {
HXLINE(  78)				_hx_tmp40 = (self13->ty == n13->ty);
            			}
            			else {
HXLINE(  78)				_hx_tmp40 = false;
            			}
            		}
            		else {
HXLINE(  78)			_hx_tmp40 = true;
            		}
HXDLIN(  78)		this->assertTrue(_hx_tmp40,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),78,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE(  79)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,n14,"n") =  ::hxmath::math::Matrix3x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0));
HXDLIN(  79)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,self14,"self") = self11;
HXDLIN(  79)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,self15,"self") =  ::hxmath::math::Matrix3x2Default_obj::__new(self14->a,self14->b,self14->c,self14->d,self14->tx,self14->ty);
HXDLIN(  79)		hx::SubEq(self15->a,n14->a);
HXDLIN(  79)		hx::SubEq(self15->b,n14->b);
HXDLIN(  79)		hx::SubEq(self15->c,n14->c);
HXDLIN(  79)		hx::SubEq(self15->d,n14->d);
HXDLIN(  79)		hx::SubEq(self15->tx,n14->tx);
HXDLIN(  79)		hx::SubEq(self15->ty,n14->ty);
HXDLIN(  79)		mat32 = self15;
HXLINE(  80)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,n15,"n") =  ::hxmath::math::Matrix3x2Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN(  80)		Bool _hx_tmp48;
HXDLIN(  80)		Bool _hx_tmp49;
HXDLIN(  80)		if (hx::IsNull( self15 )) {
HXLINE(  80)			_hx_tmp49 = hx::IsNull( n15 );
            		}
            		else {
HXLINE(  80)			_hx_tmp49 = false;
            		}
HXDLIN(  80)		if (!(_hx_tmp49)) {
HXLINE(  80)			Bool _hx_tmp50;
HXDLIN(  80)			Bool _hx_tmp51;
HXDLIN(  80)			Bool _hx_tmp52;
HXDLIN(  80)			Bool _hx_tmp53;
HXDLIN(  80)			Bool _hx_tmp54;
HXDLIN(  80)			Bool _hx_tmp55;
HXDLIN(  80)			if (hx::IsNotNull( self15 )) {
HXLINE(  80)				_hx_tmp55 = hx::IsNotNull( n15 );
            			}
            			else {
HXLINE(  80)				_hx_tmp55 = false;
            			}
HXDLIN(  80)			if (_hx_tmp55) {
HXLINE(  80)				_hx_tmp54 = (self15->a == n15->a);
            			}
            			else {
HXLINE(  80)				_hx_tmp54 = false;
            			}
HXDLIN(  80)			if (_hx_tmp54) {
HXLINE(  80)				_hx_tmp53 = (self15->b == n15->b);
            			}
            			else {
HXLINE(  80)				_hx_tmp53 = false;
            			}
HXDLIN(  80)			if (_hx_tmp53) {
HXLINE(  80)				_hx_tmp52 = (self15->c == n15->c);
            			}
            			else {
HXLINE(  80)				_hx_tmp52 = false;
            			}
HXDLIN(  80)			if (_hx_tmp52) {
HXLINE(  80)				_hx_tmp51 = (self15->d == n15->d);
            			}
            			else {
HXLINE(  80)				_hx_tmp51 = false;
            			}
HXDLIN(  80)			if (_hx_tmp51) {
HXLINE(  80)				_hx_tmp50 = (self15->tx == n15->tx);
            			}
            			else {
HXLINE(  80)				_hx_tmp50 = false;
            			}
HXDLIN(  80)			if (_hx_tmp50) {
HXLINE(  80)				_hx_tmp48 = (self15->ty == n15->ty);
            			}
            			else {
HXLINE(  80)				_hx_tmp48 = false;
            			}
            		}
            		else {
HXLINE(  80)			_hx_tmp48 = true;
            		}
HXDLIN(  80)		this->assertTrue(_hx_tmp48,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),80,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE(  82)		HX_VARI(  ::hxmath::math::Matrix3x3Default,mat33) =  ::hxmath::math::Matrix3x3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXLINE(  83)		HX_VARI(  ::hxmath::math::Matrix3x3Default,b) =  ::hxmath::math::Matrix3x3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  83)		HX_VARI_NAME(  ::hxmath::math::Matrix3x3Default,self16,"self") = mat33;
HXDLIN(  83)		HX_VARI_NAME(  ::hxmath::math::Matrix3x3Default,self17,"self") =  ::hxmath::math::Matrix3x3Default_obj::__new(self16->m00,self16->m10,self16->m20,self16->m01,self16->m11,self16->m21,self16->m02,self16->m12,self16->m22);
HXDLIN(  83)		hx::AddEq(self17->m00,b->m00);
HXDLIN(  83)		hx::AddEq(self17->m10,b->m10);
HXDLIN(  83)		hx::AddEq(self17->m20,b->m20);
HXDLIN(  83)		hx::AddEq(self17->m01,b->m01);
HXDLIN(  83)		hx::AddEq(self17->m11,b->m11);
HXDLIN(  83)		hx::AddEq(self17->m21,b->m21);
HXDLIN(  83)		hx::AddEq(self17->m02,b->m02);
HXDLIN(  83)		hx::AddEq(self17->m12,b->m12);
HXDLIN(  83)		hx::AddEq(self17->m22,b->m22);
HXDLIN(  83)		HX_VARI_NAME(  ::hxmath::math::Matrix3x3Default,b1,"b") =  ::hxmath::math::Matrix3x3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  83)		Bool _hx_tmp56;
HXDLIN(  83)		Bool _hx_tmp57;
HXDLIN(  83)		if (hx::IsNull( self17 )) {
HXLINE(  83)			_hx_tmp57 = hx::IsNull( b1 );
            		}
            		else {
HXLINE(  83)			_hx_tmp57 = false;
            		}
HXDLIN(  83)		if (!(_hx_tmp57)) {
HXLINE(  83)			Bool _hx_tmp58;
HXDLIN(  83)			Bool _hx_tmp59;
HXDLIN(  83)			Bool _hx_tmp60;
HXDLIN(  83)			Bool _hx_tmp61;
HXDLIN(  83)			Bool _hx_tmp62;
HXDLIN(  83)			Bool _hx_tmp63;
HXDLIN(  83)			Bool _hx_tmp64;
HXDLIN(  83)			Bool _hx_tmp65;
HXDLIN(  83)			Bool _hx_tmp66;
HXDLIN(  83)			if (hx::IsNotNull( self17 )) {
HXLINE(  83)				_hx_tmp66 = hx::IsNotNull( b1 );
            			}
            			else {
HXLINE(  83)				_hx_tmp66 = false;
            			}
HXDLIN(  83)			if (_hx_tmp66) {
HXLINE(  83)				_hx_tmp65 = (self17->m00 == b1->m00);
            			}
            			else {
HXLINE(  83)				_hx_tmp65 = false;
            			}
HXDLIN(  83)			if (_hx_tmp65) {
HXLINE(  83)				_hx_tmp64 = (self17->m10 == b1->m10);
            			}
            			else {
HXLINE(  83)				_hx_tmp64 = false;
            			}
HXDLIN(  83)			if (_hx_tmp64) {
HXLINE(  83)				_hx_tmp63 = (self17->m20 == b1->m20);
            			}
            			else {
HXLINE(  83)				_hx_tmp63 = false;
            			}
HXDLIN(  83)			if (_hx_tmp63) {
HXLINE(  83)				_hx_tmp62 = (self17->m01 == b1->m01);
            			}
            			else {
HXLINE(  83)				_hx_tmp62 = false;
            			}
HXDLIN(  83)			if (_hx_tmp62) {
HXLINE(  83)				_hx_tmp61 = (self17->m11 == b1->m11);
            			}
            			else {
HXLINE(  83)				_hx_tmp61 = false;
            			}
HXDLIN(  83)			if (_hx_tmp61) {
HXLINE(  83)				_hx_tmp60 = (self17->m21 == b1->m21);
            			}
            			else {
HXLINE(  83)				_hx_tmp60 = false;
            			}
HXDLIN(  83)			if (_hx_tmp60) {
HXLINE(  83)				_hx_tmp59 = (self17->m02 == b1->m02);
            			}
            			else {
HXLINE(  83)				_hx_tmp59 = false;
            			}
HXDLIN(  83)			if (_hx_tmp59) {
HXLINE(  83)				_hx_tmp58 = (self17->m12 == b1->m12);
            			}
            			else {
HXLINE(  83)				_hx_tmp58 = false;
            			}
HXDLIN(  83)			if (_hx_tmp58) {
HXLINE(  83)				_hx_tmp56 = (self17->m22 == b1->m22);
            			}
            			else {
HXLINE(  83)				_hx_tmp56 = false;
            			}
            		}
            		else {
HXLINE(  83)			_hx_tmp56 = true;
            		}
HXDLIN(  83)		this->assertTrue(_hx_tmp56,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),83,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE(  84)		HX_VARI_NAME(  ::hxmath::math::Matrix3x3Default,b2,"b") =  ::hxmath::math::Matrix3x3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  84)		HX_VARI_NAME(  ::hxmath::math::Matrix3x3Default,self18,"self") = mat33;
HXDLIN(  84)		HX_VARI_NAME(  ::hxmath::math::Matrix3x3Default,self19,"self") =  ::hxmath::math::Matrix3x3Default_obj::__new(self18->m00,self18->m10,self18->m20,self18->m01,self18->m11,self18->m21,self18->m02,self18->m12,self18->m22);
HXDLIN(  84)		hx::AddEq(self19->m00,b2->m00);
HXDLIN(  84)		hx::AddEq(self19->m10,b2->m10);
HXDLIN(  84)		hx::AddEq(self19->m20,b2->m20);
HXDLIN(  84)		hx::AddEq(self19->m01,b2->m01);
HXDLIN(  84)		hx::AddEq(self19->m11,b2->m11);
HXDLIN(  84)		hx::AddEq(self19->m21,b2->m21);
HXDLIN(  84)		hx::AddEq(self19->m02,b2->m02);
HXDLIN(  84)		hx::AddEq(self19->m12,b2->m12);
HXDLIN(  84)		hx::AddEq(self19->m22,b2->m22);
HXDLIN(  84)		mat33 = self19;
HXLINE(  85)		HX_VARI_NAME(  ::hxmath::math::Matrix3x3Default,b3,"b") =  ::hxmath::math::Matrix3x3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  85)		Bool _hx_tmp67;
HXDLIN(  85)		Bool _hx_tmp68;
HXDLIN(  85)		if (hx::IsNull( self19 )) {
HXLINE(  85)			_hx_tmp68 = hx::IsNull( b3 );
            		}
            		else {
HXLINE(  85)			_hx_tmp68 = false;
            		}
HXDLIN(  85)		if (!(_hx_tmp68)) {
HXLINE(  85)			Bool _hx_tmp69;
HXDLIN(  85)			Bool _hx_tmp70;
HXDLIN(  85)			Bool _hx_tmp71;
HXDLIN(  85)			Bool _hx_tmp72;
HXDLIN(  85)			Bool _hx_tmp73;
HXDLIN(  85)			Bool _hx_tmp74;
HXDLIN(  85)			Bool _hx_tmp75;
HXDLIN(  85)			Bool _hx_tmp76;
HXDLIN(  85)			Bool _hx_tmp77;
HXDLIN(  85)			if (hx::IsNotNull( self19 )) {
HXLINE(  85)				_hx_tmp77 = hx::IsNotNull( b3 );
            			}
            			else {
HXLINE(  85)				_hx_tmp77 = false;
            			}
HXDLIN(  85)			if (_hx_tmp77) {
HXLINE(  85)				_hx_tmp76 = (self19->m00 == b3->m00);
            			}
            			else {
HXLINE(  85)				_hx_tmp76 = false;
            			}
HXDLIN(  85)			if (_hx_tmp76) {
HXLINE(  85)				_hx_tmp75 = (self19->m10 == b3->m10);
            			}
            			else {
HXLINE(  85)				_hx_tmp75 = false;
            			}
HXDLIN(  85)			if (_hx_tmp75) {
HXLINE(  85)				_hx_tmp74 = (self19->m20 == b3->m20);
            			}
            			else {
HXLINE(  85)				_hx_tmp74 = false;
            			}
HXDLIN(  85)			if (_hx_tmp74) {
HXLINE(  85)				_hx_tmp73 = (self19->m01 == b3->m01);
            			}
            			else {
HXLINE(  85)				_hx_tmp73 = false;
            			}
HXDLIN(  85)			if (_hx_tmp73) {
HXLINE(  85)				_hx_tmp72 = (self19->m11 == b3->m11);
            			}
            			else {
HXLINE(  85)				_hx_tmp72 = false;
            			}
HXDLIN(  85)			if (_hx_tmp72) {
HXLINE(  85)				_hx_tmp71 = (self19->m21 == b3->m21);
            			}
            			else {
HXLINE(  85)				_hx_tmp71 = false;
            			}
HXDLIN(  85)			if (_hx_tmp71) {
HXLINE(  85)				_hx_tmp70 = (self19->m02 == b3->m02);
            			}
            			else {
HXLINE(  85)				_hx_tmp70 = false;
            			}
HXDLIN(  85)			if (_hx_tmp70) {
HXLINE(  85)				_hx_tmp69 = (self19->m12 == b3->m12);
            			}
            			else {
HXLINE(  85)				_hx_tmp69 = false;
            			}
HXDLIN(  85)			if (_hx_tmp69) {
HXLINE(  85)				_hx_tmp67 = (self19->m22 == b3->m22);
            			}
            			else {
HXLINE(  85)				_hx_tmp67 = false;
            			}
            		}
            		else {
HXLINE(  85)			_hx_tmp67 = true;
            		}
HXDLIN(  85)		this->assertTrue(_hx_tmp67,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),85,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE(  86)		HX_VARI_NAME(  ::hxmath::math::Matrix3x3Default,b4,"b") =  ::hxmath::math::Matrix3x3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  86)		HX_VARI_NAME(  ::hxmath::math::Matrix3x3Default,self20,"self") = self19;
HXDLIN(  86)		HX_VARI_NAME(  ::hxmath::math::Matrix3x3Default,self21,"self") =  ::hxmath::math::Matrix3x3Default_obj::__new(self20->m00,self20->m10,self20->m20,self20->m01,self20->m11,self20->m21,self20->m02,self20->m12,self20->m22);
HXDLIN(  86)		hx::SubEq(self21->m00,b4->m00);
HXDLIN(  86)		hx::SubEq(self21->m10,b4->m10);
HXDLIN(  86)		hx::SubEq(self21->m20,b4->m20);
HXDLIN(  86)		hx::SubEq(self21->m01,b4->m01);
HXDLIN(  86)		hx::SubEq(self21->m11,b4->m11);
HXDLIN(  86)		hx::SubEq(self21->m21,b4->m21);
HXDLIN(  86)		hx::SubEq(self21->m02,b4->m02);
HXDLIN(  86)		hx::SubEq(self21->m12,b4->m12);
HXDLIN(  86)		hx::SubEq(self21->m22,b4->m22);
HXDLIN(  86)		HX_VARI_NAME(  ::hxmath::math::Matrix3x3Default,b5,"b") =  ::hxmath::math::Matrix3x3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN(  86)		Bool _hx_tmp78;
HXDLIN(  86)		Bool _hx_tmp79;
HXDLIN(  86)		if (hx::IsNull( self21 )) {
HXLINE(  86)			_hx_tmp79 = hx::IsNull( b5 );
            		}
            		else {
HXLINE(  86)			_hx_tmp79 = false;
            		}
HXDLIN(  86)		if (!(_hx_tmp79)) {
HXLINE(  86)			Bool _hx_tmp80;
HXDLIN(  86)			Bool _hx_tmp81;
HXDLIN(  86)			Bool _hx_tmp82;
HXDLIN(  86)			Bool _hx_tmp83;
HXDLIN(  86)			Bool _hx_tmp84;
HXDLIN(  86)			Bool _hx_tmp85;
HXDLIN(  86)			Bool _hx_tmp86;
HXDLIN(  86)			Bool _hx_tmp87;
HXDLIN(  86)			Bool _hx_tmp88;
HXDLIN(  86)			if (hx::IsNotNull( self21 )) {
HXLINE(  86)				_hx_tmp88 = hx::IsNotNull( b5 );
            			}
            			else {
HXLINE(  86)				_hx_tmp88 = false;
            			}
HXDLIN(  86)			if (_hx_tmp88) {
HXLINE(  86)				_hx_tmp87 = (self21->m00 == b5->m00);
            			}
            			else {
HXLINE(  86)				_hx_tmp87 = false;
            			}
HXDLIN(  86)			if (_hx_tmp87) {
HXLINE(  86)				_hx_tmp86 = (self21->m10 == b5->m10);
            			}
            			else {
HXLINE(  86)				_hx_tmp86 = false;
            			}
HXDLIN(  86)			if (_hx_tmp86) {
HXLINE(  86)				_hx_tmp85 = (self21->m20 == b5->m20);
            			}
            			else {
HXLINE(  86)				_hx_tmp85 = false;
            			}
HXDLIN(  86)			if (_hx_tmp85) {
HXLINE(  86)				_hx_tmp84 = (self21->m01 == b5->m01);
            			}
            			else {
HXLINE(  86)				_hx_tmp84 = false;
            			}
HXDLIN(  86)			if (_hx_tmp84) {
HXLINE(  86)				_hx_tmp83 = (self21->m11 == b5->m11);
            			}
            			else {
HXLINE(  86)				_hx_tmp83 = false;
            			}
HXDLIN(  86)			if (_hx_tmp83) {
HXLINE(  86)				_hx_tmp82 = (self21->m21 == b5->m21);
            			}
            			else {
HXLINE(  86)				_hx_tmp82 = false;
            			}
HXDLIN(  86)			if (_hx_tmp82) {
HXLINE(  86)				_hx_tmp81 = (self21->m02 == b5->m02);
            			}
            			else {
HXLINE(  86)				_hx_tmp81 = false;
            			}
HXDLIN(  86)			if (_hx_tmp81) {
HXLINE(  86)				_hx_tmp80 = (self21->m12 == b5->m12);
            			}
            			else {
HXLINE(  86)				_hx_tmp80 = false;
            			}
HXDLIN(  86)			if (_hx_tmp80) {
HXLINE(  86)				_hx_tmp78 = (self21->m22 == b5->m22);
            			}
            			else {
HXLINE(  86)				_hx_tmp78 = false;
            			}
            		}
            		else {
HXLINE(  86)			_hx_tmp78 = true;
            		}
HXDLIN(  86)		this->assertTrue(_hx_tmp78,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),86,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE(  87)		HX_VARI_NAME(  ::hxmath::math::Matrix3x3Default,b6,"b") =  ::hxmath::math::Matrix3x3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  87)		HX_VARI_NAME(  ::hxmath::math::Matrix3x3Default,self22,"self") = self19;
HXDLIN(  87)		HX_VARI_NAME(  ::hxmath::math::Matrix3x3Default,self23,"self") =  ::hxmath::math::Matrix3x3Default_obj::__new(self22->m00,self22->m10,self22->m20,self22->m01,self22->m11,self22->m21,self22->m02,self22->m12,self22->m22);
HXDLIN(  87)		hx::SubEq(self23->m00,b6->m00);
HXDLIN(  87)		hx::SubEq(self23->m10,b6->m10);
HXDLIN(  87)		hx::SubEq(self23->m20,b6->m20);
HXDLIN(  87)		hx::SubEq(self23->m01,b6->m01);
HXDLIN(  87)		hx::SubEq(self23->m11,b6->m11);
HXDLIN(  87)		hx::SubEq(self23->m21,b6->m21);
HXDLIN(  87)		hx::SubEq(self23->m02,b6->m02);
HXDLIN(  87)		hx::SubEq(self23->m12,b6->m12);
HXDLIN(  87)		hx::SubEq(self23->m22,b6->m22);
HXDLIN(  87)		mat33 = self23;
HXLINE(  88)		HX_VARI_NAME(  ::hxmath::math::Matrix3x3Default,b7,"b") =  ::hxmath::math::Matrix3x3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN(  88)		Bool _hx_tmp89;
HXDLIN(  88)		Bool _hx_tmp90;
HXDLIN(  88)		if (hx::IsNull( self23 )) {
HXLINE(  88)			_hx_tmp90 = hx::IsNull( b7 );
            		}
            		else {
HXLINE(  88)			_hx_tmp90 = false;
            		}
HXDLIN(  88)		if (!(_hx_tmp90)) {
HXLINE(  88)			Bool _hx_tmp91;
HXDLIN(  88)			Bool _hx_tmp92;
HXDLIN(  88)			Bool _hx_tmp93;
HXDLIN(  88)			Bool _hx_tmp94;
HXDLIN(  88)			Bool _hx_tmp95;
HXDLIN(  88)			Bool _hx_tmp96;
HXDLIN(  88)			Bool _hx_tmp97;
HXDLIN(  88)			Bool _hx_tmp98;
HXDLIN(  88)			Bool _hx_tmp99;
HXDLIN(  88)			if (hx::IsNotNull( self23 )) {
HXLINE(  88)				_hx_tmp99 = hx::IsNotNull( b7 );
            			}
            			else {
HXLINE(  88)				_hx_tmp99 = false;
            			}
HXDLIN(  88)			if (_hx_tmp99) {
HXLINE(  88)				_hx_tmp98 = (self23->m00 == b7->m00);
            			}
            			else {
HXLINE(  88)				_hx_tmp98 = false;
            			}
HXDLIN(  88)			if (_hx_tmp98) {
HXLINE(  88)				_hx_tmp97 = (self23->m10 == b7->m10);
            			}
            			else {
HXLINE(  88)				_hx_tmp97 = false;
            			}
HXDLIN(  88)			if (_hx_tmp97) {
HXLINE(  88)				_hx_tmp96 = (self23->m20 == b7->m20);
            			}
            			else {
HXLINE(  88)				_hx_tmp96 = false;
            			}
HXDLIN(  88)			if (_hx_tmp96) {
HXLINE(  88)				_hx_tmp95 = (self23->m01 == b7->m01);
            			}
            			else {
HXLINE(  88)				_hx_tmp95 = false;
            			}
HXDLIN(  88)			if (_hx_tmp95) {
HXLINE(  88)				_hx_tmp94 = (self23->m11 == b7->m11);
            			}
            			else {
HXLINE(  88)				_hx_tmp94 = false;
            			}
HXDLIN(  88)			if (_hx_tmp94) {
HXLINE(  88)				_hx_tmp93 = (self23->m21 == b7->m21);
            			}
            			else {
HXLINE(  88)				_hx_tmp93 = false;
            			}
HXDLIN(  88)			if (_hx_tmp93) {
HXLINE(  88)				_hx_tmp92 = (self23->m02 == b7->m02);
            			}
            			else {
HXLINE(  88)				_hx_tmp92 = false;
            			}
HXDLIN(  88)			if (_hx_tmp92) {
HXLINE(  88)				_hx_tmp91 = (self23->m12 == b7->m12);
            			}
            			else {
HXLINE(  88)				_hx_tmp91 = false;
            			}
HXDLIN(  88)			if (_hx_tmp91) {
HXLINE(  88)				_hx_tmp89 = (self23->m22 == b7->m22);
            			}
            			else {
HXLINE(  88)				_hx_tmp89 = false;
            			}
            		}
            		else {
HXLINE(  88)			_hx_tmp89 = true;
            		}
HXDLIN(  88)		this->assertTrue(_hx_tmp89,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),88,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE(  90)		HX_VARI(  ::hxmath::math::Matrix4x4Default,mat44) =  ::hxmath::math::Matrix4x4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXLINE(  91)		HX_VARI_NAME(  ::hxmath::math::Matrix4x4Default,b8,"b") =  ::hxmath::math::Matrix4x4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  91)		HX_VARI_NAME(  ::hxmath::math::Matrix4x4Default,self24,"self") = mat44;
HXDLIN(  91)		HX_VARI_NAME(  ::hxmath::math::Matrix4x4Default,self25,"self") =  ::hxmath::math::Matrix4x4Default_obj::__new(self24->m00,self24->m10,self24->m20,self24->m30,self24->m01,self24->m11,self24->m21,self24->m31,self24->m02,self24->m12,self24->m22,self24->m32,self24->m03,self24->m13,self24->m23,self24->m33);
HXDLIN(  91)		hx::AddEq(self25->m00,b8->m00);
HXDLIN(  91)		hx::AddEq(self25->m10,b8->m10);
HXDLIN(  91)		hx::AddEq(self25->m20,b8->m20);
HXDLIN(  91)		hx::AddEq(self25->m30,b8->m30);
HXDLIN(  91)		hx::AddEq(self25->m01,b8->m01);
HXDLIN(  91)		hx::AddEq(self25->m11,b8->m11);
HXDLIN(  91)		hx::AddEq(self25->m21,b8->m21);
HXDLIN(  91)		hx::AddEq(self25->m31,b8->m31);
HXDLIN(  91)		hx::AddEq(self25->m02,b8->m02);
HXDLIN(  91)		hx::AddEq(self25->m12,b8->m12);
HXDLIN(  91)		hx::AddEq(self25->m22,b8->m22);
HXDLIN(  91)		hx::AddEq(self25->m32,b8->m32);
HXDLIN(  91)		hx::AddEq(self25->m03,b8->m03);
HXDLIN(  91)		hx::AddEq(self25->m13,b8->m13);
HXDLIN(  91)		hx::AddEq(self25->m23,b8->m23);
HXDLIN(  91)		hx::AddEq(self25->m33,b8->m33);
HXDLIN(  91)		HX_VARI_NAME(  ::hxmath::math::Matrix4x4Default,b9,"b") =  ::hxmath::math::Matrix4x4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  91)		Bool _hx_tmp100;
HXDLIN(  91)		Bool _hx_tmp101;
HXDLIN(  91)		if (hx::IsNull( self25 )) {
HXLINE(  91)			_hx_tmp101 = hx::IsNull( b9 );
            		}
            		else {
HXLINE(  91)			_hx_tmp101 = false;
            		}
HXDLIN(  91)		if (!(_hx_tmp101)) {
HXLINE(  91)			Bool _hx_tmp102;
HXDLIN(  91)			Bool _hx_tmp103;
HXDLIN(  91)			Bool _hx_tmp104;
HXDLIN(  91)			Bool _hx_tmp105;
HXDLIN(  91)			Bool _hx_tmp106;
HXDLIN(  91)			Bool _hx_tmp107;
HXDLIN(  91)			Bool _hx_tmp108;
HXDLIN(  91)			Bool _hx_tmp109;
HXDLIN(  91)			Bool _hx_tmp110;
HXDLIN(  91)			Bool _hx_tmp111;
HXDLIN(  91)			Bool _hx_tmp112;
HXDLIN(  91)			Bool _hx_tmp113;
HXDLIN(  91)			Bool _hx_tmp114;
HXDLIN(  91)			Bool _hx_tmp115;
HXDLIN(  91)			Bool _hx_tmp116;
HXDLIN(  91)			Bool _hx_tmp117;
HXDLIN(  91)			if (hx::IsNotNull( self25 )) {
HXLINE(  91)				_hx_tmp117 = hx::IsNotNull( b9 );
            			}
            			else {
HXLINE(  91)				_hx_tmp117 = false;
            			}
HXDLIN(  91)			if (_hx_tmp117) {
HXLINE(  91)				_hx_tmp116 = (self25->m00 == b9->m00);
            			}
            			else {
HXLINE(  91)				_hx_tmp116 = false;
            			}
HXDLIN(  91)			if (_hx_tmp116) {
HXLINE(  91)				_hx_tmp115 = (self25->m10 == b9->m10);
            			}
            			else {
HXLINE(  91)				_hx_tmp115 = false;
            			}
HXDLIN(  91)			if (_hx_tmp115) {
HXLINE(  91)				_hx_tmp114 = (self25->m20 == b9->m20);
            			}
            			else {
HXLINE(  91)				_hx_tmp114 = false;
            			}
HXDLIN(  91)			if (_hx_tmp114) {
HXLINE(  91)				_hx_tmp113 = (self25->m30 == b9->m30);
            			}
            			else {
HXLINE(  91)				_hx_tmp113 = false;
            			}
HXDLIN(  91)			if (_hx_tmp113) {
HXLINE(  91)				_hx_tmp112 = (self25->m01 == b9->m01);
            			}
            			else {
HXLINE(  91)				_hx_tmp112 = false;
            			}
HXDLIN(  91)			if (_hx_tmp112) {
HXLINE(  91)				_hx_tmp111 = (self25->m11 == b9->m11);
            			}
            			else {
HXLINE(  91)				_hx_tmp111 = false;
            			}
HXDLIN(  91)			if (_hx_tmp111) {
HXLINE(  91)				_hx_tmp110 = (self25->m21 == b9->m21);
            			}
            			else {
HXLINE(  91)				_hx_tmp110 = false;
            			}
HXDLIN(  91)			if (_hx_tmp110) {
HXLINE(  91)				_hx_tmp109 = (self25->m31 == b9->m31);
            			}
            			else {
HXLINE(  91)				_hx_tmp109 = false;
            			}
HXDLIN(  91)			if (_hx_tmp109) {
HXLINE(  91)				_hx_tmp108 = (self25->m02 == b9->m02);
            			}
            			else {
HXLINE(  91)				_hx_tmp108 = false;
            			}
HXDLIN(  91)			if (_hx_tmp108) {
HXLINE(  91)				_hx_tmp107 = (self25->m12 == b9->m12);
            			}
            			else {
HXLINE(  91)				_hx_tmp107 = false;
            			}
HXDLIN(  91)			if (_hx_tmp107) {
HXLINE(  91)				_hx_tmp106 = (self25->m22 == b9->m22);
            			}
            			else {
HXLINE(  91)				_hx_tmp106 = false;
            			}
HXDLIN(  91)			if (_hx_tmp106) {
HXLINE(  91)				_hx_tmp105 = (self25->m32 == b9->m32);
            			}
            			else {
HXLINE(  91)				_hx_tmp105 = false;
            			}
HXDLIN(  91)			if (_hx_tmp105) {
HXLINE(  91)				_hx_tmp104 = (self25->m03 == b9->m03);
            			}
            			else {
HXLINE(  91)				_hx_tmp104 = false;
            			}
HXDLIN(  91)			if (_hx_tmp104) {
HXLINE(  91)				_hx_tmp103 = (self25->m13 == b9->m13);
            			}
            			else {
HXLINE(  91)				_hx_tmp103 = false;
            			}
HXDLIN(  91)			if (_hx_tmp103) {
HXLINE(  91)				_hx_tmp102 = (self25->m23 == b9->m23);
            			}
            			else {
HXLINE(  91)				_hx_tmp102 = false;
            			}
HXDLIN(  91)			if (_hx_tmp102) {
HXLINE(  91)				_hx_tmp100 = (self25->m33 == b9->m33);
            			}
            			else {
HXLINE(  91)				_hx_tmp100 = false;
            			}
            		}
            		else {
HXLINE(  91)			_hx_tmp100 = true;
            		}
HXDLIN(  91)		this->assertTrue(_hx_tmp100,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),91,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE(  92)		HX_VARI_NAME(  ::hxmath::math::Matrix4x4Default,b10,"b") =  ::hxmath::math::Matrix4x4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  92)		HX_VARI_NAME(  ::hxmath::math::Matrix4x4Default,self26,"self") = mat44;
HXDLIN(  92)		HX_VARI_NAME(  ::hxmath::math::Matrix4x4Default,self27,"self") =  ::hxmath::math::Matrix4x4Default_obj::__new(self26->m00,self26->m10,self26->m20,self26->m30,self26->m01,self26->m11,self26->m21,self26->m31,self26->m02,self26->m12,self26->m22,self26->m32,self26->m03,self26->m13,self26->m23,self26->m33);
HXDLIN(  92)		hx::AddEq(self27->m00,b10->m00);
HXDLIN(  92)		hx::AddEq(self27->m10,b10->m10);
HXDLIN(  92)		hx::AddEq(self27->m20,b10->m20);
HXDLIN(  92)		hx::AddEq(self27->m30,b10->m30);
HXDLIN(  92)		hx::AddEq(self27->m01,b10->m01);
HXDLIN(  92)		hx::AddEq(self27->m11,b10->m11);
HXDLIN(  92)		hx::AddEq(self27->m21,b10->m21);
HXDLIN(  92)		hx::AddEq(self27->m31,b10->m31);
HXDLIN(  92)		hx::AddEq(self27->m02,b10->m02);
HXDLIN(  92)		hx::AddEq(self27->m12,b10->m12);
HXDLIN(  92)		hx::AddEq(self27->m22,b10->m22);
HXDLIN(  92)		hx::AddEq(self27->m32,b10->m32);
HXDLIN(  92)		hx::AddEq(self27->m03,b10->m03);
HXDLIN(  92)		hx::AddEq(self27->m13,b10->m13);
HXDLIN(  92)		hx::AddEq(self27->m23,b10->m23);
HXDLIN(  92)		hx::AddEq(self27->m33,b10->m33);
HXDLIN(  92)		mat44 = self27;
HXLINE(  93)		HX_VARI_NAME(  ::hxmath::math::Matrix4x4Default,b11,"b") =  ::hxmath::math::Matrix4x4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  93)		Bool _hx_tmp118;
HXDLIN(  93)		Bool _hx_tmp119;
HXDLIN(  93)		if (hx::IsNull( self27 )) {
HXLINE(  93)			_hx_tmp119 = hx::IsNull( b11 );
            		}
            		else {
HXLINE(  93)			_hx_tmp119 = false;
            		}
HXDLIN(  93)		if (!(_hx_tmp119)) {
HXLINE(  93)			Bool _hx_tmp120;
HXDLIN(  93)			Bool _hx_tmp121;
HXDLIN(  93)			Bool _hx_tmp122;
HXDLIN(  93)			Bool _hx_tmp123;
HXDLIN(  93)			Bool _hx_tmp124;
HXDLIN(  93)			Bool _hx_tmp125;
HXDLIN(  93)			Bool _hx_tmp126;
HXDLIN(  93)			Bool _hx_tmp127;
HXDLIN(  93)			Bool _hx_tmp128;
HXDLIN(  93)			Bool _hx_tmp129;
HXDLIN(  93)			Bool _hx_tmp130;
HXDLIN(  93)			Bool _hx_tmp131;
HXDLIN(  93)			Bool _hx_tmp132;
HXDLIN(  93)			Bool _hx_tmp133;
HXDLIN(  93)			Bool _hx_tmp134;
HXDLIN(  93)			Bool _hx_tmp135;
HXDLIN(  93)			if (hx::IsNotNull( self27 )) {
HXLINE(  93)				_hx_tmp135 = hx::IsNotNull( b11 );
            			}
            			else {
HXLINE(  93)				_hx_tmp135 = false;
            			}
HXDLIN(  93)			if (_hx_tmp135) {
HXLINE(  93)				_hx_tmp134 = (self27->m00 == b11->m00);
            			}
            			else {
HXLINE(  93)				_hx_tmp134 = false;
            			}
HXDLIN(  93)			if (_hx_tmp134) {
HXLINE(  93)				_hx_tmp133 = (self27->m10 == b11->m10);
            			}
            			else {
HXLINE(  93)				_hx_tmp133 = false;
            			}
HXDLIN(  93)			if (_hx_tmp133) {
HXLINE(  93)				_hx_tmp132 = (self27->m20 == b11->m20);
            			}
            			else {
HXLINE(  93)				_hx_tmp132 = false;
            			}
HXDLIN(  93)			if (_hx_tmp132) {
HXLINE(  93)				_hx_tmp131 = (self27->m30 == b11->m30);
            			}
            			else {
HXLINE(  93)				_hx_tmp131 = false;
            			}
HXDLIN(  93)			if (_hx_tmp131) {
HXLINE(  93)				_hx_tmp130 = (self27->m01 == b11->m01);
            			}
            			else {
HXLINE(  93)				_hx_tmp130 = false;
            			}
HXDLIN(  93)			if (_hx_tmp130) {
HXLINE(  93)				_hx_tmp129 = (self27->m11 == b11->m11);
            			}
            			else {
HXLINE(  93)				_hx_tmp129 = false;
            			}
HXDLIN(  93)			if (_hx_tmp129) {
HXLINE(  93)				_hx_tmp128 = (self27->m21 == b11->m21);
            			}
            			else {
HXLINE(  93)				_hx_tmp128 = false;
            			}
HXDLIN(  93)			if (_hx_tmp128) {
HXLINE(  93)				_hx_tmp127 = (self27->m31 == b11->m31);
            			}
            			else {
HXLINE(  93)				_hx_tmp127 = false;
            			}
HXDLIN(  93)			if (_hx_tmp127) {
HXLINE(  93)				_hx_tmp126 = (self27->m02 == b11->m02);
            			}
            			else {
HXLINE(  93)				_hx_tmp126 = false;
            			}
HXDLIN(  93)			if (_hx_tmp126) {
HXLINE(  93)				_hx_tmp125 = (self27->m12 == b11->m12);
            			}
            			else {
HXLINE(  93)				_hx_tmp125 = false;
            			}
HXDLIN(  93)			if (_hx_tmp125) {
HXLINE(  93)				_hx_tmp124 = (self27->m22 == b11->m22);
            			}
            			else {
HXLINE(  93)				_hx_tmp124 = false;
            			}
HXDLIN(  93)			if (_hx_tmp124) {
HXLINE(  93)				_hx_tmp123 = (self27->m32 == b11->m32);
            			}
            			else {
HXLINE(  93)				_hx_tmp123 = false;
            			}
HXDLIN(  93)			if (_hx_tmp123) {
HXLINE(  93)				_hx_tmp122 = (self27->m03 == b11->m03);
            			}
            			else {
HXLINE(  93)				_hx_tmp122 = false;
            			}
HXDLIN(  93)			if (_hx_tmp122) {
HXLINE(  93)				_hx_tmp121 = (self27->m13 == b11->m13);
            			}
            			else {
HXLINE(  93)				_hx_tmp121 = false;
            			}
HXDLIN(  93)			if (_hx_tmp121) {
HXLINE(  93)				_hx_tmp120 = (self27->m23 == b11->m23);
            			}
            			else {
HXLINE(  93)				_hx_tmp120 = false;
            			}
HXDLIN(  93)			if (_hx_tmp120) {
HXLINE(  93)				_hx_tmp118 = (self27->m33 == b11->m33);
            			}
            			else {
HXLINE(  93)				_hx_tmp118 = false;
            			}
            		}
            		else {
HXLINE(  93)			_hx_tmp118 = true;
            		}
HXDLIN(  93)		this->assertTrue(_hx_tmp118,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),93,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE(  94)		HX_VARI_NAME(  ::hxmath::math::Matrix4x4Default,b12,"b") =  ::hxmath::math::Matrix4x4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  94)		HX_VARI_NAME(  ::hxmath::math::Matrix4x4Default,self28,"self") = self27;
HXDLIN(  94)		HX_VARI_NAME(  ::hxmath::math::Matrix4x4Default,self29,"self") =  ::hxmath::math::Matrix4x4Default_obj::__new(self28->m00,self28->m10,self28->m20,self28->m30,self28->m01,self28->m11,self28->m21,self28->m31,self28->m02,self28->m12,self28->m22,self28->m32,self28->m03,self28->m13,self28->m23,self28->m33);
HXDLIN(  94)		hx::SubEq(self29->m00,b12->m00);
HXDLIN(  94)		hx::SubEq(self29->m10,b12->m10);
HXDLIN(  94)		hx::SubEq(self29->m20,b12->m20);
HXDLIN(  94)		hx::SubEq(self29->m30,b12->m30);
HXDLIN(  94)		hx::SubEq(self29->m01,b12->m01);
HXDLIN(  94)		hx::SubEq(self29->m11,b12->m11);
HXDLIN(  94)		hx::SubEq(self29->m21,b12->m21);
HXDLIN(  94)		hx::SubEq(self29->m31,b12->m31);
HXDLIN(  94)		hx::SubEq(self29->m02,b12->m02);
HXDLIN(  94)		hx::SubEq(self29->m12,b12->m12);
HXDLIN(  94)		hx::SubEq(self29->m22,b12->m22);
HXDLIN(  94)		hx::SubEq(self29->m32,b12->m32);
HXDLIN(  94)		hx::SubEq(self29->m03,b12->m03);
HXDLIN(  94)		hx::SubEq(self29->m13,b12->m13);
HXDLIN(  94)		hx::SubEq(self29->m23,b12->m23);
HXDLIN(  94)		hx::SubEq(self29->m33,b12->m33);
HXDLIN(  94)		HX_VARI_NAME(  ::hxmath::math::Matrix4x4Default,b13,"b") =  ::hxmath::math::Matrix4x4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN(  94)		Bool _hx_tmp136;
HXDLIN(  94)		Bool _hx_tmp137;
HXDLIN(  94)		if (hx::IsNull( self29 )) {
HXLINE(  94)			_hx_tmp137 = hx::IsNull( b13 );
            		}
            		else {
HXLINE(  94)			_hx_tmp137 = false;
            		}
HXDLIN(  94)		if (!(_hx_tmp137)) {
HXLINE(  94)			Bool _hx_tmp138;
HXDLIN(  94)			Bool _hx_tmp139;
HXDLIN(  94)			Bool _hx_tmp140;
HXDLIN(  94)			Bool _hx_tmp141;
HXDLIN(  94)			Bool _hx_tmp142;
HXDLIN(  94)			Bool _hx_tmp143;
HXDLIN(  94)			Bool _hx_tmp144;
HXDLIN(  94)			Bool _hx_tmp145;
HXDLIN(  94)			Bool _hx_tmp146;
HXDLIN(  94)			Bool _hx_tmp147;
HXDLIN(  94)			Bool _hx_tmp148;
HXDLIN(  94)			Bool _hx_tmp149;
HXDLIN(  94)			Bool _hx_tmp150;
HXDLIN(  94)			Bool _hx_tmp151;
HXDLIN(  94)			Bool _hx_tmp152;
HXDLIN(  94)			Bool _hx_tmp153;
HXDLIN(  94)			if (hx::IsNotNull( self29 )) {
HXLINE(  94)				_hx_tmp153 = hx::IsNotNull( b13 );
            			}
            			else {
HXLINE(  94)				_hx_tmp153 = false;
            			}
HXDLIN(  94)			if (_hx_tmp153) {
HXLINE(  94)				_hx_tmp152 = (self29->m00 == b13->m00);
            			}
            			else {
HXLINE(  94)				_hx_tmp152 = false;
            			}
HXDLIN(  94)			if (_hx_tmp152) {
HXLINE(  94)				_hx_tmp151 = (self29->m10 == b13->m10);
            			}
            			else {
HXLINE(  94)				_hx_tmp151 = false;
            			}
HXDLIN(  94)			if (_hx_tmp151) {
HXLINE(  94)				_hx_tmp150 = (self29->m20 == b13->m20);
            			}
            			else {
HXLINE(  94)				_hx_tmp150 = false;
            			}
HXDLIN(  94)			if (_hx_tmp150) {
HXLINE(  94)				_hx_tmp149 = (self29->m30 == b13->m30);
            			}
            			else {
HXLINE(  94)				_hx_tmp149 = false;
            			}
HXDLIN(  94)			if (_hx_tmp149) {
HXLINE(  94)				_hx_tmp148 = (self29->m01 == b13->m01);
            			}
            			else {
HXLINE(  94)				_hx_tmp148 = false;
            			}
HXDLIN(  94)			if (_hx_tmp148) {
HXLINE(  94)				_hx_tmp147 = (self29->m11 == b13->m11);
            			}
            			else {
HXLINE(  94)				_hx_tmp147 = false;
            			}
HXDLIN(  94)			if (_hx_tmp147) {
HXLINE(  94)				_hx_tmp146 = (self29->m21 == b13->m21);
            			}
            			else {
HXLINE(  94)				_hx_tmp146 = false;
            			}
HXDLIN(  94)			if (_hx_tmp146) {
HXLINE(  94)				_hx_tmp145 = (self29->m31 == b13->m31);
            			}
            			else {
HXLINE(  94)				_hx_tmp145 = false;
            			}
HXDLIN(  94)			if (_hx_tmp145) {
HXLINE(  94)				_hx_tmp144 = (self29->m02 == b13->m02);
            			}
            			else {
HXLINE(  94)				_hx_tmp144 = false;
            			}
HXDLIN(  94)			if (_hx_tmp144) {
HXLINE(  94)				_hx_tmp143 = (self29->m12 == b13->m12);
            			}
            			else {
HXLINE(  94)				_hx_tmp143 = false;
            			}
HXDLIN(  94)			if (_hx_tmp143) {
HXLINE(  94)				_hx_tmp142 = (self29->m22 == b13->m22);
            			}
            			else {
HXLINE(  94)				_hx_tmp142 = false;
            			}
HXDLIN(  94)			if (_hx_tmp142) {
HXLINE(  94)				_hx_tmp141 = (self29->m32 == b13->m32);
            			}
            			else {
HXLINE(  94)				_hx_tmp141 = false;
            			}
HXDLIN(  94)			if (_hx_tmp141) {
HXLINE(  94)				_hx_tmp140 = (self29->m03 == b13->m03);
            			}
            			else {
HXLINE(  94)				_hx_tmp140 = false;
            			}
HXDLIN(  94)			if (_hx_tmp140) {
HXLINE(  94)				_hx_tmp139 = (self29->m13 == b13->m13);
            			}
            			else {
HXLINE(  94)				_hx_tmp139 = false;
            			}
HXDLIN(  94)			if (_hx_tmp139) {
HXLINE(  94)				_hx_tmp138 = (self29->m23 == b13->m23);
            			}
            			else {
HXLINE(  94)				_hx_tmp138 = false;
            			}
HXDLIN(  94)			if (_hx_tmp138) {
HXLINE(  94)				_hx_tmp136 = (self29->m33 == b13->m33);
            			}
            			else {
HXLINE(  94)				_hx_tmp136 = false;
            			}
            		}
            		else {
HXLINE(  94)			_hx_tmp136 = true;
            		}
HXDLIN(  94)		this->assertTrue(_hx_tmp136,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),94,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE(  95)		HX_VARI_NAME(  ::hxmath::math::Matrix4x4Default,b14,"b") =  ::hxmath::math::Matrix4x4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  95)		HX_VARI_NAME(  ::hxmath::math::Matrix4x4Default,self30,"self") = self27;
HXDLIN(  95)		HX_VARI_NAME(  ::hxmath::math::Matrix4x4Default,self31,"self") =  ::hxmath::math::Matrix4x4Default_obj::__new(self30->m00,self30->m10,self30->m20,self30->m30,self30->m01,self30->m11,self30->m21,self30->m31,self30->m02,self30->m12,self30->m22,self30->m32,self30->m03,self30->m13,self30->m23,self30->m33);
HXDLIN(  95)		hx::SubEq(self31->m00,b14->m00);
HXDLIN(  95)		hx::SubEq(self31->m10,b14->m10);
HXDLIN(  95)		hx::SubEq(self31->m20,b14->m20);
HXDLIN(  95)		hx::SubEq(self31->m30,b14->m30);
HXDLIN(  95)		hx::SubEq(self31->m01,b14->m01);
HXDLIN(  95)		hx::SubEq(self31->m11,b14->m11);
HXDLIN(  95)		hx::SubEq(self31->m21,b14->m21);
HXDLIN(  95)		hx::SubEq(self31->m31,b14->m31);
HXDLIN(  95)		hx::SubEq(self31->m02,b14->m02);
HXDLIN(  95)		hx::SubEq(self31->m12,b14->m12);
HXDLIN(  95)		hx::SubEq(self31->m22,b14->m22);
HXDLIN(  95)		hx::SubEq(self31->m32,b14->m32);
HXDLIN(  95)		hx::SubEq(self31->m03,b14->m03);
HXDLIN(  95)		hx::SubEq(self31->m13,b14->m13);
HXDLIN(  95)		hx::SubEq(self31->m23,b14->m23);
HXDLIN(  95)		hx::SubEq(self31->m33,b14->m33);
HXDLIN(  95)		mat44 = self31;
HXLINE(  96)		HX_VARI_NAME(  ::hxmath::math::Matrix4x4Default,b15,"b") =  ::hxmath::math::Matrix4x4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN(  96)		Bool _hx_tmp154;
HXDLIN(  96)		Bool _hx_tmp155;
HXDLIN(  96)		if (hx::IsNull( self31 )) {
HXLINE(  96)			_hx_tmp155 = hx::IsNull( b15 );
            		}
            		else {
HXLINE(  96)			_hx_tmp155 = false;
            		}
HXDLIN(  96)		if (!(_hx_tmp155)) {
HXLINE(  96)			Bool _hx_tmp156;
HXDLIN(  96)			Bool _hx_tmp157;
HXDLIN(  96)			Bool _hx_tmp158;
HXDLIN(  96)			Bool _hx_tmp159;
HXDLIN(  96)			Bool _hx_tmp160;
HXDLIN(  96)			Bool _hx_tmp161;
HXDLIN(  96)			Bool _hx_tmp162;
HXDLIN(  96)			Bool _hx_tmp163;
HXDLIN(  96)			Bool _hx_tmp164;
HXDLIN(  96)			Bool _hx_tmp165;
HXDLIN(  96)			Bool _hx_tmp166;
HXDLIN(  96)			Bool _hx_tmp167;
HXDLIN(  96)			Bool _hx_tmp168;
HXDLIN(  96)			Bool _hx_tmp169;
HXDLIN(  96)			Bool _hx_tmp170;
HXDLIN(  96)			Bool _hx_tmp171;
HXDLIN(  96)			if (hx::IsNotNull( self31 )) {
HXLINE(  96)				_hx_tmp171 = hx::IsNotNull( b15 );
            			}
            			else {
HXLINE(  96)				_hx_tmp171 = false;
            			}
HXDLIN(  96)			if (_hx_tmp171) {
HXLINE(  96)				_hx_tmp170 = (self31->m00 == b15->m00);
            			}
            			else {
HXLINE(  96)				_hx_tmp170 = false;
            			}
HXDLIN(  96)			if (_hx_tmp170) {
HXLINE(  96)				_hx_tmp169 = (self31->m10 == b15->m10);
            			}
            			else {
HXLINE(  96)				_hx_tmp169 = false;
            			}
HXDLIN(  96)			if (_hx_tmp169) {
HXLINE(  96)				_hx_tmp168 = (self31->m20 == b15->m20);
            			}
            			else {
HXLINE(  96)				_hx_tmp168 = false;
            			}
HXDLIN(  96)			if (_hx_tmp168) {
HXLINE(  96)				_hx_tmp167 = (self31->m30 == b15->m30);
            			}
            			else {
HXLINE(  96)				_hx_tmp167 = false;
            			}
HXDLIN(  96)			if (_hx_tmp167) {
HXLINE(  96)				_hx_tmp166 = (self31->m01 == b15->m01);
            			}
            			else {
HXLINE(  96)				_hx_tmp166 = false;
            			}
HXDLIN(  96)			if (_hx_tmp166) {
HXLINE(  96)				_hx_tmp165 = (self31->m11 == b15->m11);
            			}
            			else {
HXLINE(  96)				_hx_tmp165 = false;
            			}
HXDLIN(  96)			if (_hx_tmp165) {
HXLINE(  96)				_hx_tmp164 = (self31->m21 == b15->m21);
            			}
            			else {
HXLINE(  96)				_hx_tmp164 = false;
            			}
HXDLIN(  96)			if (_hx_tmp164) {
HXLINE(  96)				_hx_tmp163 = (self31->m31 == b15->m31);
            			}
            			else {
HXLINE(  96)				_hx_tmp163 = false;
            			}
HXDLIN(  96)			if (_hx_tmp163) {
HXLINE(  96)				_hx_tmp162 = (self31->m02 == b15->m02);
            			}
            			else {
HXLINE(  96)				_hx_tmp162 = false;
            			}
HXDLIN(  96)			if (_hx_tmp162) {
HXLINE(  96)				_hx_tmp161 = (self31->m12 == b15->m12);
            			}
            			else {
HXLINE(  96)				_hx_tmp161 = false;
            			}
HXDLIN(  96)			if (_hx_tmp161) {
HXLINE(  96)				_hx_tmp160 = (self31->m22 == b15->m22);
            			}
            			else {
HXLINE(  96)				_hx_tmp160 = false;
            			}
HXDLIN(  96)			if (_hx_tmp160) {
HXLINE(  96)				_hx_tmp159 = (self31->m32 == b15->m32);
            			}
            			else {
HXLINE(  96)				_hx_tmp159 = false;
            			}
HXDLIN(  96)			if (_hx_tmp159) {
HXLINE(  96)				_hx_tmp158 = (self31->m03 == b15->m03);
            			}
            			else {
HXLINE(  96)				_hx_tmp158 = false;
            			}
HXDLIN(  96)			if (_hx_tmp158) {
HXLINE(  96)				_hx_tmp157 = (self31->m13 == b15->m13);
            			}
            			else {
HXLINE(  96)				_hx_tmp157 = false;
            			}
HXDLIN(  96)			if (_hx_tmp157) {
HXLINE(  96)				_hx_tmp156 = (self31->m23 == b15->m23);
            			}
            			else {
HXLINE(  96)				_hx_tmp156 = false;
            			}
HXDLIN(  96)			if (_hx_tmp156) {
HXLINE(  96)				_hx_tmp154 = (self31->m33 == b15->m33);
            			}
            			else {
HXLINE(  96)				_hx_tmp154 = false;
            			}
            		}
            		else {
HXLINE(  96)			_hx_tmp154 = true;
            		}
HXDLIN(  96)		this->assertTrue(_hx_tmp154,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),96,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE(  98)		HX_VARI(  ::hxmath::math::Vector2Default,vec2) =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)0.0));
HXLINE(  99)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b16,"b") =  ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)0.0));
HXDLIN(  99)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self32,"self") = vec2;
HXDLIN(  99)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self33,"self") =  ::hxmath::math::Vector2Default_obj::__new(self32->x,self32->y);
HXDLIN(  99)		hx::AddEq(self33->x,b16->x);
HXDLIN(  99)		hx::AddEq(self33->y,b16->y);
HXDLIN(  99)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b17,"b") =  ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)0.0));
HXDLIN(  99)		Bool _hx_tmp172;
HXDLIN(  99)		Bool _hx_tmp173;
HXDLIN(  99)		if (hx::IsNull( self33 )) {
HXLINE(  99)			_hx_tmp173 = hx::IsNull( b17 );
            		}
            		else {
HXLINE(  99)			_hx_tmp173 = false;
            		}
HXDLIN(  99)		if (!(_hx_tmp173)) {
HXLINE(  99)			Bool _hx_tmp174;
HXDLIN(  99)			Bool _hx_tmp175;
HXDLIN(  99)			if (hx::IsNotNull( self33 )) {
HXLINE(  99)				_hx_tmp175 = hx::IsNotNull( b17 );
            			}
            			else {
HXLINE(  99)				_hx_tmp175 = false;
            			}
HXDLIN(  99)			if (_hx_tmp175) {
HXLINE(  99)				_hx_tmp174 = (self33->x == b17->x);
            			}
            			else {
HXLINE(  99)				_hx_tmp174 = false;
            			}
HXDLIN(  99)			if (_hx_tmp174) {
HXLINE(  99)				_hx_tmp172 = (self33->y == b17->y);
            			}
            			else {
HXLINE(  99)				_hx_tmp172 = false;
            			}
            		}
            		else {
HXLINE(  99)			_hx_tmp172 = true;
            		}
HXDLIN(  99)		this->assertTrue(_hx_tmp172,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),99,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE( 100)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b18,"b") =  ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)0.0));
HXDLIN( 100)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self34,"self") = vec2;
HXDLIN( 100)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self35,"self") =  ::hxmath::math::Vector2Default_obj::__new(self34->x,self34->y);
HXDLIN( 100)		hx::AddEq(self35->x,b18->x);
HXDLIN( 100)		hx::AddEq(self35->y,b18->y);
HXDLIN( 100)		vec2 = self35;
HXLINE( 101)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b19,"b") =  ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)0.0));
HXDLIN( 101)		Bool _hx_tmp176;
HXDLIN( 101)		Bool _hx_tmp177;
HXDLIN( 101)		if (hx::IsNull( self35 )) {
HXLINE( 101)			_hx_tmp177 = hx::IsNull( b19 );
            		}
            		else {
HXLINE( 101)			_hx_tmp177 = false;
            		}
HXDLIN( 101)		if (!(_hx_tmp177)) {
HXLINE( 101)			Bool _hx_tmp178;
HXDLIN( 101)			Bool _hx_tmp179;
HXDLIN( 101)			if (hx::IsNotNull( self35 )) {
HXLINE( 101)				_hx_tmp179 = hx::IsNotNull( b19 );
            			}
            			else {
HXLINE( 101)				_hx_tmp179 = false;
            			}
HXDLIN( 101)			if (_hx_tmp179) {
HXLINE( 101)				_hx_tmp178 = (self35->x == b19->x);
            			}
            			else {
HXLINE( 101)				_hx_tmp178 = false;
            			}
HXDLIN( 101)			if (_hx_tmp178) {
HXLINE( 101)				_hx_tmp176 = (self35->y == b19->y);
            			}
            			else {
HXLINE( 101)				_hx_tmp176 = false;
            			}
            		}
            		else {
HXLINE( 101)			_hx_tmp176 = true;
            		}
HXDLIN( 101)		this->assertTrue(_hx_tmp176,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),101,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE( 102)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b20,"b") =  ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)0.0));
HXDLIN( 102)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self36,"self") = self35;
HXDLIN( 102)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self37,"self") =  ::hxmath::math::Vector2Default_obj::__new(self36->x,self36->y);
HXDLIN( 102)		hx::SubEq(self37->x,b20->x);
HXDLIN( 102)		hx::SubEq(self37->y,b20->y);
HXDLIN( 102)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b21,"b") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)0.0));
HXDLIN( 102)		Bool _hx_tmp180;
HXDLIN( 102)		Bool _hx_tmp181;
HXDLIN( 102)		if (hx::IsNull( self37 )) {
HXLINE( 102)			_hx_tmp181 = hx::IsNull( b21 );
            		}
            		else {
HXLINE( 102)			_hx_tmp181 = false;
            		}
HXDLIN( 102)		if (!(_hx_tmp181)) {
HXLINE( 102)			Bool _hx_tmp182;
HXDLIN( 102)			Bool _hx_tmp183;
HXDLIN( 102)			if (hx::IsNotNull( self37 )) {
HXLINE( 102)				_hx_tmp183 = hx::IsNotNull( b21 );
            			}
            			else {
HXLINE( 102)				_hx_tmp183 = false;
            			}
HXDLIN( 102)			if (_hx_tmp183) {
HXLINE( 102)				_hx_tmp182 = (self37->x == b21->x);
            			}
            			else {
HXLINE( 102)				_hx_tmp182 = false;
            			}
HXDLIN( 102)			if (_hx_tmp182) {
HXLINE( 102)				_hx_tmp180 = (self37->y == b21->y);
            			}
            			else {
HXLINE( 102)				_hx_tmp180 = false;
            			}
            		}
            		else {
HXLINE( 102)			_hx_tmp180 = true;
            		}
HXDLIN( 102)		this->assertTrue(_hx_tmp180,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),102,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE( 103)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b22,"b") =  ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)0.0));
HXDLIN( 103)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self38,"self") = self35;
HXDLIN( 103)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self39,"self") =  ::hxmath::math::Vector2Default_obj::__new(self38->x,self38->y);
HXDLIN( 103)		hx::SubEq(self39->x,b22->x);
HXDLIN( 103)		hx::SubEq(self39->y,b22->y);
HXDLIN( 103)		vec2 = self39;
HXLINE( 104)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b23,"b") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)0.0));
HXDLIN( 104)		Bool _hx_tmp184;
HXDLIN( 104)		Bool _hx_tmp185;
HXDLIN( 104)		if (hx::IsNull( self39 )) {
HXLINE( 104)			_hx_tmp185 = hx::IsNull( b23 );
            		}
            		else {
HXLINE( 104)			_hx_tmp185 = false;
            		}
HXDLIN( 104)		if (!(_hx_tmp185)) {
HXLINE( 104)			Bool _hx_tmp186;
HXDLIN( 104)			Bool _hx_tmp187;
HXDLIN( 104)			if (hx::IsNotNull( self39 )) {
HXLINE( 104)				_hx_tmp187 = hx::IsNotNull( b23 );
            			}
            			else {
HXLINE( 104)				_hx_tmp187 = false;
            			}
HXDLIN( 104)			if (_hx_tmp187) {
HXLINE( 104)				_hx_tmp186 = (self39->x == b23->x);
            			}
            			else {
HXLINE( 104)				_hx_tmp186 = false;
            			}
HXDLIN( 104)			if (_hx_tmp186) {
HXLINE( 104)				_hx_tmp184 = (self39->y == b23->y);
            			}
            			else {
HXLINE( 104)				_hx_tmp184 = false;
            			}
            		}
            		else {
HXLINE( 104)			_hx_tmp184 = true;
            		}
HXDLIN( 104)		this->assertTrue(_hx_tmp184,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),104,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE( 106)		HX_VARI(  ::hxmath::math::Vector3Default,vec3) =  ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0));
HXLINE( 107)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,b24,"b") =  ::hxmath::math::Vector3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0));
HXDLIN( 107)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self40,"self") = vec3;
HXDLIN( 107)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self41,"self") =  ::hxmath::math::Vector3Default_obj::__new(self40->x,self40->y,self40->z);
HXDLIN( 107)		hx::AddEq(self41->x,b24->x);
HXDLIN( 107)		hx::AddEq(self41->y,b24->y);
HXDLIN( 107)		hx::AddEq(self41->z,b24->z);
HXDLIN( 107)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,b25,"b") =  ::hxmath::math::Vector3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0));
HXDLIN( 107)		Bool _hx_tmp188;
HXDLIN( 107)		Bool _hx_tmp189;
HXDLIN( 107)		if (hx::IsNull( self41 )) {
HXLINE( 107)			_hx_tmp189 = hx::IsNull( b25 );
            		}
            		else {
HXLINE( 107)			_hx_tmp189 = false;
            		}
HXDLIN( 107)		if (!(_hx_tmp189)) {
HXLINE( 107)			Bool _hx_tmp190;
HXDLIN( 107)			Bool _hx_tmp191;
HXDLIN( 107)			Bool _hx_tmp192;
HXDLIN( 107)			if (hx::IsNotNull( self41 )) {
HXLINE( 107)				_hx_tmp192 = hx::IsNotNull( b25 );
            			}
            			else {
HXLINE( 107)				_hx_tmp192 = false;
            			}
HXDLIN( 107)			if (_hx_tmp192) {
HXLINE( 107)				_hx_tmp191 = (self41->x == b25->x);
            			}
            			else {
HXLINE( 107)				_hx_tmp191 = false;
            			}
HXDLIN( 107)			if (_hx_tmp191) {
HXLINE( 107)				_hx_tmp190 = (self41->y == b25->y);
            			}
            			else {
HXLINE( 107)				_hx_tmp190 = false;
            			}
HXDLIN( 107)			if (_hx_tmp190) {
HXLINE( 107)				_hx_tmp188 = (self41->z == b25->z);
            			}
            			else {
HXLINE( 107)				_hx_tmp188 = false;
            			}
            		}
            		else {
HXLINE( 107)			_hx_tmp188 = true;
            		}
HXDLIN( 107)		this->assertTrue(_hx_tmp188,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),107,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE( 108)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,b26,"b") =  ::hxmath::math::Vector3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0));
HXDLIN( 108)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self42,"self") = vec3;
HXDLIN( 108)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self43,"self") =  ::hxmath::math::Vector3Default_obj::__new(self42->x,self42->y,self42->z);
HXDLIN( 108)		hx::AddEq(self43->x,b26->x);
HXDLIN( 108)		hx::AddEq(self43->y,b26->y);
HXDLIN( 108)		hx::AddEq(self43->z,b26->z);
HXDLIN( 108)		vec3 = self43;
HXLINE( 109)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,b27,"b") =  ::hxmath::math::Vector3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0));
HXDLIN( 109)		Bool _hx_tmp193;
HXDLIN( 109)		Bool _hx_tmp194;
HXDLIN( 109)		if (hx::IsNull( self43 )) {
HXLINE( 109)			_hx_tmp194 = hx::IsNull( b27 );
            		}
            		else {
HXLINE( 109)			_hx_tmp194 = false;
            		}
HXDLIN( 109)		if (!(_hx_tmp194)) {
HXLINE( 109)			Bool _hx_tmp195;
HXDLIN( 109)			Bool _hx_tmp196;
HXDLIN( 109)			Bool _hx_tmp197;
HXDLIN( 109)			if (hx::IsNotNull( self43 )) {
HXLINE( 109)				_hx_tmp197 = hx::IsNotNull( b27 );
            			}
            			else {
HXLINE( 109)				_hx_tmp197 = false;
            			}
HXDLIN( 109)			if (_hx_tmp197) {
HXLINE( 109)				_hx_tmp196 = (self43->x == b27->x);
            			}
            			else {
HXLINE( 109)				_hx_tmp196 = false;
            			}
HXDLIN( 109)			if (_hx_tmp196) {
HXLINE( 109)				_hx_tmp195 = (self43->y == b27->y);
            			}
            			else {
HXLINE( 109)				_hx_tmp195 = false;
            			}
HXDLIN( 109)			if (_hx_tmp195) {
HXLINE( 109)				_hx_tmp193 = (self43->z == b27->z);
            			}
            			else {
HXLINE( 109)				_hx_tmp193 = false;
            			}
            		}
            		else {
HXLINE( 109)			_hx_tmp193 = true;
            		}
HXDLIN( 109)		this->assertTrue(_hx_tmp193,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),109,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE( 110)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,b28,"b") =  ::hxmath::math::Vector3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0));
HXDLIN( 110)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self44,"self") = self43;
HXDLIN( 110)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self45,"self") =  ::hxmath::math::Vector3Default_obj::__new(self44->x,self44->y,self44->z);
HXDLIN( 110)		hx::SubEq(self45->x,b28->x);
HXDLIN( 110)		hx::SubEq(self45->y,b28->y);
HXDLIN( 110)		hx::SubEq(self45->z,b28->z);
HXDLIN( 110)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,b29,"b") =  ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 110)		Bool _hx_tmp198;
HXDLIN( 110)		Bool _hx_tmp199;
HXDLIN( 110)		if (hx::IsNull( self45 )) {
HXLINE( 110)			_hx_tmp199 = hx::IsNull( b29 );
            		}
            		else {
HXLINE( 110)			_hx_tmp199 = false;
            		}
HXDLIN( 110)		if (!(_hx_tmp199)) {
HXLINE( 110)			Bool _hx_tmp200;
HXDLIN( 110)			Bool _hx_tmp201;
HXDLIN( 110)			Bool _hx_tmp202;
HXDLIN( 110)			if (hx::IsNotNull( self45 )) {
HXLINE( 110)				_hx_tmp202 = hx::IsNotNull( b29 );
            			}
            			else {
HXLINE( 110)				_hx_tmp202 = false;
            			}
HXDLIN( 110)			if (_hx_tmp202) {
HXLINE( 110)				_hx_tmp201 = (self45->x == b29->x);
            			}
            			else {
HXLINE( 110)				_hx_tmp201 = false;
            			}
HXDLIN( 110)			if (_hx_tmp201) {
HXLINE( 110)				_hx_tmp200 = (self45->y == b29->y);
            			}
            			else {
HXLINE( 110)				_hx_tmp200 = false;
            			}
HXDLIN( 110)			if (_hx_tmp200) {
HXLINE( 110)				_hx_tmp198 = (self45->z == b29->z);
            			}
            			else {
HXLINE( 110)				_hx_tmp198 = false;
            			}
            		}
            		else {
HXLINE( 110)			_hx_tmp198 = true;
            		}
HXDLIN( 110)		this->assertTrue(_hx_tmp198,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),110,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE( 111)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,b30,"b") =  ::hxmath::math::Vector3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0));
HXDLIN( 111)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self46,"self") = self43;
HXDLIN( 111)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self47,"self") =  ::hxmath::math::Vector3Default_obj::__new(self46->x,self46->y,self46->z);
HXDLIN( 111)		hx::SubEq(self47->x,b30->x);
HXDLIN( 111)		hx::SubEq(self47->y,b30->y);
HXDLIN( 111)		hx::SubEq(self47->z,b30->z);
HXDLIN( 111)		vec3 = self47;
HXLINE( 112)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,b31,"b") =  ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 112)		Bool _hx_tmp203;
HXDLIN( 112)		Bool _hx_tmp204;
HXDLIN( 112)		if (hx::IsNull( self47 )) {
HXLINE( 112)			_hx_tmp204 = hx::IsNull( b31 );
            		}
            		else {
HXLINE( 112)			_hx_tmp204 = false;
            		}
HXDLIN( 112)		if (!(_hx_tmp204)) {
HXLINE( 112)			Bool _hx_tmp205;
HXDLIN( 112)			Bool _hx_tmp206;
HXDLIN( 112)			Bool _hx_tmp207;
HXDLIN( 112)			if (hx::IsNotNull( self47 )) {
HXLINE( 112)				_hx_tmp207 = hx::IsNotNull( b31 );
            			}
            			else {
HXLINE( 112)				_hx_tmp207 = false;
            			}
HXDLIN( 112)			if (_hx_tmp207) {
HXLINE( 112)				_hx_tmp206 = (self47->x == b31->x);
            			}
            			else {
HXLINE( 112)				_hx_tmp206 = false;
            			}
HXDLIN( 112)			if (_hx_tmp206) {
HXLINE( 112)				_hx_tmp205 = (self47->y == b31->y);
            			}
            			else {
HXLINE( 112)				_hx_tmp205 = false;
            			}
HXDLIN( 112)			if (_hx_tmp205) {
HXLINE( 112)				_hx_tmp203 = (self47->z == b31->z);
            			}
            			else {
HXLINE( 112)				_hx_tmp203 = false;
            			}
            		}
            		else {
HXLINE( 112)			_hx_tmp203 = true;
            		}
HXDLIN( 112)		this->assertTrue(_hx_tmp203,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),112,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE( 114)		HX_VARI(  ::hxmath::math::Vector4Default,vec4) =  ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXLINE( 115)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,b32,"b") =  ::hxmath::math::Vector4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 115)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,self48,"self") = vec4;
HXDLIN( 115)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,self49,"self") =  ::hxmath::math::Vector4Default_obj::__new(self48->x,self48->y,self48->z,self48->w);
HXDLIN( 115)		hx::AddEq(self49->x,b32->x);
HXDLIN( 115)		hx::AddEq(self49->y,b32->y);
HXDLIN( 115)		hx::AddEq(self49->z,b32->z);
HXDLIN( 115)		hx::AddEq(self49->w,b32->w);
HXDLIN( 115)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,b33,"b") =  ::hxmath::math::Vector4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 115)		Bool _hx_tmp208;
HXDLIN( 115)		Bool _hx_tmp209;
HXDLIN( 115)		if (hx::IsNull( self49 )) {
HXLINE( 115)			_hx_tmp209 = hx::IsNull( b33 );
            		}
            		else {
HXLINE( 115)			_hx_tmp209 = false;
            		}
HXDLIN( 115)		if (!(_hx_tmp209)) {
HXLINE( 115)			Bool _hx_tmp210;
HXDLIN( 115)			Bool _hx_tmp211;
HXDLIN( 115)			Bool _hx_tmp212;
HXDLIN( 115)			Bool _hx_tmp213;
HXDLIN( 115)			if (hx::IsNotNull( self49 )) {
HXLINE( 115)				_hx_tmp213 = hx::IsNotNull( b33 );
            			}
            			else {
HXLINE( 115)				_hx_tmp213 = false;
            			}
HXDLIN( 115)			if (_hx_tmp213) {
HXLINE( 115)				_hx_tmp212 = (self49->x == b33->x);
            			}
            			else {
HXLINE( 115)				_hx_tmp212 = false;
            			}
HXDLIN( 115)			if (_hx_tmp212) {
HXLINE( 115)				_hx_tmp211 = (self49->y == b33->y);
            			}
            			else {
HXLINE( 115)				_hx_tmp211 = false;
            			}
HXDLIN( 115)			if (_hx_tmp211) {
HXLINE( 115)				_hx_tmp210 = (self49->z == b33->z);
            			}
            			else {
HXLINE( 115)				_hx_tmp210 = false;
            			}
HXDLIN( 115)			if (_hx_tmp210) {
HXLINE( 115)				_hx_tmp208 = (self49->w == b33->w);
            			}
            			else {
HXLINE( 115)				_hx_tmp208 = false;
            			}
            		}
            		else {
HXLINE( 115)			_hx_tmp208 = true;
            		}
HXDLIN( 115)		this->assertTrue(_hx_tmp208,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),115,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE( 116)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,b34,"b") =  ::hxmath::math::Vector4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 116)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,self50,"self") = vec4;
HXDLIN( 116)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,self51,"self") =  ::hxmath::math::Vector4Default_obj::__new(self50->x,self50->y,self50->z,self50->w);
HXDLIN( 116)		hx::AddEq(self51->x,b34->x);
HXDLIN( 116)		hx::AddEq(self51->y,b34->y);
HXDLIN( 116)		hx::AddEq(self51->z,b34->z);
HXDLIN( 116)		hx::AddEq(self51->w,b34->w);
HXDLIN( 116)		vec4 = self51;
HXLINE( 117)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,b35,"b") =  ::hxmath::math::Vector4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 117)		Bool _hx_tmp214;
HXDLIN( 117)		Bool _hx_tmp215;
HXDLIN( 117)		if (hx::IsNull( self51 )) {
HXLINE( 117)			_hx_tmp215 = hx::IsNull( b35 );
            		}
            		else {
HXLINE( 117)			_hx_tmp215 = false;
            		}
HXDLIN( 117)		if (!(_hx_tmp215)) {
HXLINE( 117)			Bool _hx_tmp216;
HXDLIN( 117)			Bool _hx_tmp217;
HXDLIN( 117)			Bool _hx_tmp218;
HXDLIN( 117)			Bool _hx_tmp219;
HXDLIN( 117)			if (hx::IsNotNull( self51 )) {
HXLINE( 117)				_hx_tmp219 = hx::IsNotNull( b35 );
            			}
            			else {
HXLINE( 117)				_hx_tmp219 = false;
            			}
HXDLIN( 117)			if (_hx_tmp219) {
HXLINE( 117)				_hx_tmp218 = (self51->x == b35->x);
            			}
            			else {
HXLINE( 117)				_hx_tmp218 = false;
            			}
HXDLIN( 117)			if (_hx_tmp218) {
HXLINE( 117)				_hx_tmp217 = (self51->y == b35->y);
            			}
            			else {
HXLINE( 117)				_hx_tmp217 = false;
            			}
HXDLIN( 117)			if (_hx_tmp217) {
HXLINE( 117)				_hx_tmp216 = (self51->z == b35->z);
            			}
            			else {
HXLINE( 117)				_hx_tmp216 = false;
            			}
HXDLIN( 117)			if (_hx_tmp216) {
HXLINE( 117)				_hx_tmp214 = (self51->w == b35->w);
            			}
            			else {
HXLINE( 117)				_hx_tmp214 = false;
            			}
            		}
            		else {
HXLINE( 117)			_hx_tmp214 = true;
            		}
HXDLIN( 117)		this->assertTrue(_hx_tmp214,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),117,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE( 118)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,b36,"b") =  ::hxmath::math::Vector4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 118)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,self52,"self") = self51;
HXDLIN( 118)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,self53,"self") =  ::hxmath::math::Vector4Default_obj::__new(self52->x,self52->y,self52->z,self52->w);
HXDLIN( 118)		hx::SubEq(self53->x,b36->x);
HXDLIN( 118)		hx::SubEq(self53->y,b36->y);
HXDLIN( 118)		hx::SubEq(self53->z,b36->z);
HXDLIN( 118)		hx::SubEq(self53->w,b36->w);
HXDLIN( 118)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,b37,"b") =  ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 118)		Bool _hx_tmp220;
HXDLIN( 118)		Bool _hx_tmp221;
HXDLIN( 118)		if (hx::IsNull( self53 )) {
HXLINE( 118)			_hx_tmp221 = hx::IsNull( b37 );
            		}
            		else {
HXLINE( 118)			_hx_tmp221 = false;
            		}
HXDLIN( 118)		if (!(_hx_tmp221)) {
HXLINE( 118)			Bool _hx_tmp222;
HXDLIN( 118)			Bool _hx_tmp223;
HXDLIN( 118)			Bool _hx_tmp224;
HXDLIN( 118)			Bool _hx_tmp225;
HXDLIN( 118)			if (hx::IsNotNull( self53 )) {
HXLINE( 118)				_hx_tmp225 = hx::IsNotNull( b37 );
            			}
            			else {
HXLINE( 118)				_hx_tmp225 = false;
            			}
HXDLIN( 118)			if (_hx_tmp225) {
HXLINE( 118)				_hx_tmp224 = (self53->x == b37->x);
            			}
            			else {
HXLINE( 118)				_hx_tmp224 = false;
            			}
HXDLIN( 118)			if (_hx_tmp224) {
HXLINE( 118)				_hx_tmp223 = (self53->y == b37->y);
            			}
            			else {
HXLINE( 118)				_hx_tmp223 = false;
            			}
HXDLIN( 118)			if (_hx_tmp223) {
HXLINE( 118)				_hx_tmp222 = (self53->z == b37->z);
            			}
            			else {
HXLINE( 118)				_hx_tmp222 = false;
            			}
HXDLIN( 118)			if (_hx_tmp222) {
HXLINE( 118)				_hx_tmp220 = (self53->w == b37->w);
            			}
            			else {
HXLINE( 118)				_hx_tmp220 = false;
            			}
            		}
            		else {
HXLINE( 118)			_hx_tmp220 = true;
            		}
HXDLIN( 118)		this->assertTrue(_hx_tmp220,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),118,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE( 119)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,b38,"b") =  ::hxmath::math::Vector4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 119)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,self54,"self") = self51;
HXDLIN( 119)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,self55,"self") =  ::hxmath::math::Vector4Default_obj::__new(self54->x,self54->y,self54->z,self54->w);
HXDLIN( 119)		hx::SubEq(self55->x,b38->x);
HXDLIN( 119)		hx::SubEq(self55->y,b38->y);
HXDLIN( 119)		hx::SubEq(self55->z,b38->z);
HXDLIN( 119)		hx::SubEq(self55->w,b38->w);
HXDLIN( 119)		vec4 = self55;
HXLINE( 120)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,b39,"b") =  ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 120)		Bool _hx_tmp226;
HXDLIN( 120)		Bool _hx_tmp227;
HXDLIN( 120)		if (hx::IsNull( self55 )) {
HXLINE( 120)			_hx_tmp227 = hx::IsNull( b39 );
            		}
            		else {
HXLINE( 120)			_hx_tmp227 = false;
            		}
HXDLIN( 120)		if (!(_hx_tmp227)) {
HXLINE( 120)			Bool _hx_tmp228;
HXDLIN( 120)			Bool _hx_tmp229;
HXDLIN( 120)			Bool _hx_tmp230;
HXDLIN( 120)			Bool _hx_tmp231;
HXDLIN( 120)			if (hx::IsNotNull( self55 )) {
HXLINE( 120)				_hx_tmp231 = hx::IsNotNull( b39 );
            			}
            			else {
HXLINE( 120)				_hx_tmp231 = false;
            			}
HXDLIN( 120)			if (_hx_tmp231) {
HXLINE( 120)				_hx_tmp230 = (self55->x == b39->x);
            			}
            			else {
HXLINE( 120)				_hx_tmp230 = false;
            			}
HXDLIN( 120)			if (_hx_tmp230) {
HXLINE( 120)				_hx_tmp229 = (self55->y == b39->y);
            			}
            			else {
HXLINE( 120)				_hx_tmp229 = false;
            			}
HXDLIN( 120)			if (_hx_tmp229) {
HXLINE( 120)				_hx_tmp228 = (self55->z == b39->z);
            			}
            			else {
HXLINE( 120)				_hx_tmp228 = false;
            			}
HXDLIN( 120)			if (_hx_tmp228) {
HXLINE( 120)				_hx_tmp226 = (self55->w == b39->w);
            			}
            			else {
HXLINE( 120)				_hx_tmp226 = false;
            			}
            		}
            		else {
HXLINE( 120)			_hx_tmp226 = true;
            		}
HXDLIN( 120)		this->assertTrue(_hx_tmp226,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),120,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE( 122)		HX_VARI(  ::hxmath::math::QuaternionDefault,q) =  ::hxmath::math::QuaternionDefault_obj::__new((int)0,(int)0,(int)0,(int)0);
HXLINE( 123)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,b40,"b") =  ::hxmath::math::QuaternionDefault_obj::__new((int)1,(int)0,(int)0,(int)0);
HXDLIN( 123)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,self56,"self") = q;
HXDLIN( 123)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,self57,"self") =  ::hxmath::math::QuaternionDefault_obj::__new(self56->s,self56->x,self56->y,self56->z);
HXDLIN( 123)		hx::AddEq(self57->s,b40->s);
HXDLIN( 123)		hx::AddEq(self57->x,b40->x);
HXDLIN( 123)		hx::AddEq(self57->y,b40->y);
HXDLIN( 123)		hx::AddEq(self57->z,b40->z);
HXDLIN( 123)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,b41,"b") =  ::hxmath::math::QuaternionDefault_obj::__new((int)1,(int)0,(int)0,(int)0);
HXDLIN( 123)		Bool _hx_tmp232;
HXDLIN( 123)		Bool _hx_tmp233;
HXDLIN( 123)		if (hx::IsNull( self57 )) {
HXLINE( 123)			_hx_tmp233 = hx::IsNull( b41 );
            		}
            		else {
HXLINE( 123)			_hx_tmp233 = false;
            		}
HXDLIN( 123)		if (!(_hx_tmp233)) {
HXLINE( 123)			Bool _hx_tmp234;
HXDLIN( 123)			Bool _hx_tmp235;
HXDLIN( 123)			Bool _hx_tmp236;
HXDLIN( 123)			Bool _hx_tmp237;
HXDLIN( 123)			if (hx::IsNotNull( self57 )) {
HXLINE( 123)				_hx_tmp237 = hx::IsNotNull( b41 );
            			}
            			else {
HXLINE( 123)				_hx_tmp237 = false;
            			}
HXDLIN( 123)			if (_hx_tmp237) {
HXLINE( 123)				_hx_tmp236 = (self57->s == b41->s);
            			}
            			else {
HXLINE( 123)				_hx_tmp236 = false;
            			}
HXDLIN( 123)			if (_hx_tmp236) {
HXLINE( 123)				_hx_tmp235 = (self57->x == b41->x);
            			}
            			else {
HXLINE( 123)				_hx_tmp235 = false;
            			}
HXDLIN( 123)			if (_hx_tmp235) {
HXLINE( 123)				_hx_tmp234 = (self57->y == b41->y);
            			}
            			else {
HXLINE( 123)				_hx_tmp234 = false;
            			}
HXDLIN( 123)			if (_hx_tmp234) {
HXLINE( 123)				_hx_tmp232 = (self57->z == b41->z);
            			}
            			else {
HXLINE( 123)				_hx_tmp232 = false;
            			}
            		}
            		else {
HXLINE( 123)			_hx_tmp232 = true;
            		}
HXDLIN( 123)		this->assertTrue(_hx_tmp232,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),123,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE( 124)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,b42,"b") =  ::hxmath::math::QuaternionDefault_obj::__new((int)1,(int)0,(int)0,(int)0);
HXDLIN( 124)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,self58,"self") = q;
HXDLIN( 124)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,self59,"self") =  ::hxmath::math::QuaternionDefault_obj::__new(self58->s,self58->x,self58->y,self58->z);
HXDLIN( 124)		hx::AddEq(self59->s,b42->s);
HXDLIN( 124)		hx::AddEq(self59->x,b42->x);
HXDLIN( 124)		hx::AddEq(self59->y,b42->y);
HXDLIN( 124)		hx::AddEq(self59->z,b42->z);
HXDLIN( 124)		q = self59;
HXLINE( 125)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,b43,"b") =  ::hxmath::math::QuaternionDefault_obj::__new((int)1,(int)0,(int)0,(int)0);
HXDLIN( 125)		Bool _hx_tmp238;
HXDLIN( 125)		Bool _hx_tmp239;
HXDLIN( 125)		if (hx::IsNull( self59 )) {
HXLINE( 125)			_hx_tmp239 = hx::IsNull( b43 );
            		}
            		else {
HXLINE( 125)			_hx_tmp239 = false;
            		}
HXDLIN( 125)		if (!(_hx_tmp239)) {
HXLINE( 125)			Bool _hx_tmp240;
HXDLIN( 125)			Bool _hx_tmp241;
HXDLIN( 125)			Bool _hx_tmp242;
HXDLIN( 125)			Bool _hx_tmp243;
HXDLIN( 125)			if (hx::IsNotNull( self59 )) {
HXLINE( 125)				_hx_tmp243 = hx::IsNotNull( b43 );
            			}
            			else {
HXLINE( 125)				_hx_tmp243 = false;
            			}
HXDLIN( 125)			if (_hx_tmp243) {
HXLINE( 125)				_hx_tmp242 = (self59->s == b43->s);
            			}
            			else {
HXLINE( 125)				_hx_tmp242 = false;
            			}
HXDLIN( 125)			if (_hx_tmp242) {
HXLINE( 125)				_hx_tmp241 = (self59->x == b43->x);
            			}
            			else {
HXLINE( 125)				_hx_tmp241 = false;
            			}
HXDLIN( 125)			if (_hx_tmp241) {
HXLINE( 125)				_hx_tmp240 = (self59->y == b43->y);
            			}
            			else {
HXLINE( 125)				_hx_tmp240 = false;
            			}
HXDLIN( 125)			if (_hx_tmp240) {
HXLINE( 125)				_hx_tmp238 = (self59->z == b43->z);
            			}
            			else {
HXLINE( 125)				_hx_tmp238 = false;
            			}
            		}
            		else {
HXLINE( 125)			_hx_tmp238 = true;
            		}
HXDLIN( 125)		this->assertTrue(_hx_tmp238,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),125,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE( 126)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,b44,"b") =  ::hxmath::math::QuaternionDefault_obj::__new((int)1,(int)0,(int)0,(int)0);
HXDLIN( 126)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,self60,"self") = self59;
HXDLIN( 126)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,self61,"self") =  ::hxmath::math::QuaternionDefault_obj::__new(self60->s,self60->x,self60->y,self60->z);
HXDLIN( 126)		hx::SubEq(self61->s,b44->s);
HXDLIN( 126)		hx::SubEq(self61->x,b44->x);
HXDLIN( 126)		hx::SubEq(self61->y,b44->y);
HXDLIN( 126)		hx::SubEq(self61->z,b44->z);
HXDLIN( 126)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,b45,"b") =  ::hxmath::math::QuaternionDefault_obj::__new((int)0,(int)0,(int)0,(int)0);
HXDLIN( 126)		Bool _hx_tmp244;
HXDLIN( 126)		Bool _hx_tmp245;
HXDLIN( 126)		if (hx::IsNull( self61 )) {
HXLINE( 126)			_hx_tmp245 = hx::IsNull( b45 );
            		}
            		else {
HXLINE( 126)			_hx_tmp245 = false;
            		}
HXDLIN( 126)		if (!(_hx_tmp245)) {
HXLINE( 126)			Bool _hx_tmp246;
HXDLIN( 126)			Bool _hx_tmp247;
HXDLIN( 126)			Bool _hx_tmp248;
HXDLIN( 126)			Bool _hx_tmp249;
HXDLIN( 126)			if (hx::IsNotNull( self61 )) {
HXLINE( 126)				_hx_tmp249 = hx::IsNotNull( b45 );
            			}
            			else {
HXLINE( 126)				_hx_tmp249 = false;
            			}
HXDLIN( 126)			if (_hx_tmp249) {
HXLINE( 126)				_hx_tmp248 = (self61->s == b45->s);
            			}
            			else {
HXLINE( 126)				_hx_tmp248 = false;
            			}
HXDLIN( 126)			if (_hx_tmp248) {
HXLINE( 126)				_hx_tmp247 = (self61->x == b45->x);
            			}
            			else {
HXLINE( 126)				_hx_tmp247 = false;
            			}
HXDLIN( 126)			if (_hx_tmp247) {
HXLINE( 126)				_hx_tmp246 = (self61->y == b45->y);
            			}
            			else {
HXLINE( 126)				_hx_tmp246 = false;
            			}
HXDLIN( 126)			if (_hx_tmp246) {
HXLINE( 126)				_hx_tmp244 = (self61->z == b45->z);
            			}
            			else {
HXLINE( 126)				_hx_tmp244 = false;
            			}
            		}
            		else {
HXLINE( 126)			_hx_tmp244 = true;
            		}
HXDLIN( 126)		this->assertTrue(_hx_tmp244,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),126,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE( 127)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,b46,"b") =  ::hxmath::math::QuaternionDefault_obj::__new((int)1,(int)0,(int)0,(int)0);
HXDLIN( 127)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,self62,"self") = self59;
HXDLIN( 127)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,self63,"self") =  ::hxmath::math::QuaternionDefault_obj::__new(self62->s,self62->x,self62->y,self62->z);
HXDLIN( 127)		hx::SubEq(self63->s,b46->s);
HXDLIN( 127)		hx::SubEq(self63->x,b46->x);
HXDLIN( 127)		hx::SubEq(self63->y,b46->y);
HXDLIN( 127)		hx::SubEq(self63->z,b46->z);
HXDLIN( 127)		q = self63;
HXLINE( 128)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,b47,"b") =  ::hxmath::math::QuaternionDefault_obj::__new((int)0,(int)0,(int)0,(int)0);
HXDLIN( 128)		Bool _hx_tmp250;
HXDLIN( 128)		Bool _hx_tmp251;
HXDLIN( 128)		if (hx::IsNull( self63 )) {
HXLINE( 128)			_hx_tmp251 = hx::IsNull( b47 );
            		}
            		else {
HXLINE( 128)			_hx_tmp251 = false;
            		}
HXDLIN( 128)		if (!(_hx_tmp251)) {
HXLINE( 128)			Bool _hx_tmp252;
HXDLIN( 128)			Bool _hx_tmp253;
HXDLIN( 128)			Bool _hx_tmp254;
HXDLIN( 128)			Bool _hx_tmp255;
HXDLIN( 128)			if (hx::IsNotNull( self63 )) {
HXLINE( 128)				_hx_tmp255 = hx::IsNotNull( b47 );
            			}
            			else {
HXLINE( 128)				_hx_tmp255 = false;
            			}
HXDLIN( 128)			if (_hx_tmp255) {
HXLINE( 128)				_hx_tmp254 = (self63->s == b47->s);
            			}
            			else {
HXLINE( 128)				_hx_tmp254 = false;
            			}
HXDLIN( 128)			if (_hx_tmp254) {
HXLINE( 128)				_hx_tmp253 = (self63->x == b47->x);
            			}
            			else {
HXLINE( 128)				_hx_tmp253 = false;
            			}
HXDLIN( 128)			if (_hx_tmp253) {
HXLINE( 128)				_hx_tmp252 = (self63->y == b47->y);
            			}
            			else {
HXLINE( 128)				_hx_tmp252 = false;
            			}
HXDLIN( 128)			if (_hx_tmp252) {
HXLINE( 128)				_hx_tmp250 = (self63->z == b47->z);
            			}
            			else {
HXLINE( 128)				_hx_tmp250 = false;
            			}
            		}
            		else {
HXLINE( 128)			_hx_tmp250 = true;
            		}
HXDLIN( 128)		this->assertTrue(_hx_tmp250,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),128,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE( 130)		HX_VARI(  ::hxmath::math::IntVector2Default,intVec2) = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)0,(int)0);
HXLINE( 131)		HX_VARI_NAME(  ::hxmath::math::IntVector2Default,b48,"b") = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)1,(int)0);
HXDLIN( 131)		HX_VARI_NAME(  ::hxmath::math::IntVector2Default,self64,"self") = intVec2;
HXDLIN( 131)		HX_VARI_NAME(  ::hxmath::math::IntVector2Default,self65,"self") = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new(self64->x,self64->y);
HXDLIN( 131)		hx::AddEq(self65->x,b48->x);
HXDLIN( 131)		hx::AddEq(self65->y,b48->y);
HXDLIN( 131)		HX_VARI_NAME(  ::hxmath::math::IntVector2Default,b49,"b") = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)1,(int)0);
HXDLIN( 131)		Bool _hx_tmp256;
HXDLIN( 131)		Bool _hx_tmp257;
HXDLIN( 131)		if (hx::IsNull( self65 )) {
HXLINE( 131)			_hx_tmp257 = hx::IsNull( b49 );
            		}
            		else {
HXLINE( 131)			_hx_tmp257 = false;
            		}
HXDLIN( 131)		if (!(_hx_tmp257)) {
HXLINE( 131)			Bool _hx_tmp258;
HXDLIN( 131)			Bool _hx_tmp259;
HXDLIN( 131)			if (hx::IsNotNull( self65 )) {
HXLINE( 131)				_hx_tmp259 = hx::IsNotNull( b49 );
            			}
            			else {
HXLINE( 131)				_hx_tmp259 = false;
            			}
HXDLIN( 131)			if (_hx_tmp259) {
HXLINE( 131)				_hx_tmp258 = (self65->x == b49->x);
            			}
            			else {
HXLINE( 131)				_hx_tmp258 = false;
            			}
HXDLIN( 131)			if (_hx_tmp258) {
HXLINE( 131)				_hx_tmp256 = (self65->y == b49->y);
            			}
            			else {
HXLINE( 131)				_hx_tmp256 = false;
            			}
            		}
            		else {
HXLINE( 131)			_hx_tmp256 = true;
            		}
HXDLIN( 131)		this->assertTrue(_hx_tmp256,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),131,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE( 132)		HX_VARI_NAME(  ::hxmath::math::IntVector2Default,b50,"b") = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)1,(int)0);
HXDLIN( 132)		HX_VARI_NAME(  ::hxmath::math::IntVector2Default,self66,"self") = intVec2;
HXDLIN( 132)		HX_VARI_NAME(  ::hxmath::math::IntVector2Default,self67,"self") = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new(self66->x,self66->y);
HXDLIN( 132)		hx::AddEq(self67->x,b50->x);
HXDLIN( 132)		hx::AddEq(self67->y,b50->y);
HXDLIN( 132)		intVec2 = self67;
HXLINE( 133)		HX_VARI_NAME(  ::hxmath::math::IntVector2Default,b51,"b") = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)1,(int)0);
HXDLIN( 133)		Bool _hx_tmp260;
HXDLIN( 133)		Bool _hx_tmp261;
HXDLIN( 133)		if (hx::IsNull( self67 )) {
HXLINE( 133)			_hx_tmp261 = hx::IsNull( b51 );
            		}
            		else {
HXLINE( 133)			_hx_tmp261 = false;
            		}
HXDLIN( 133)		if (!(_hx_tmp261)) {
HXLINE( 133)			Bool _hx_tmp262;
HXDLIN( 133)			Bool _hx_tmp263;
HXDLIN( 133)			if (hx::IsNotNull( self67 )) {
HXLINE( 133)				_hx_tmp263 = hx::IsNotNull( b51 );
            			}
            			else {
HXLINE( 133)				_hx_tmp263 = false;
            			}
HXDLIN( 133)			if (_hx_tmp263) {
HXLINE( 133)				_hx_tmp262 = (self67->x == b51->x);
            			}
            			else {
HXLINE( 133)				_hx_tmp262 = false;
            			}
HXDLIN( 133)			if (_hx_tmp262) {
HXLINE( 133)				_hx_tmp260 = (self67->y == b51->y);
            			}
            			else {
HXLINE( 133)				_hx_tmp260 = false;
            			}
            		}
            		else {
HXLINE( 133)			_hx_tmp260 = true;
            		}
HXDLIN( 133)		this->assertTrue(_hx_tmp260,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),133,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE( 134)		HX_VARI_NAME(  ::hxmath::math::IntVector2Default,b52,"b") = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)1,(int)0);
HXDLIN( 134)		HX_VARI_NAME(  ::hxmath::math::IntVector2Default,self68,"self") = self67;
HXDLIN( 134)		HX_VARI_NAME(  ::hxmath::math::IntVector2Default,self69,"self") = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new(self68->x,self68->y);
HXDLIN( 134)		hx::SubEq(self69->x,b52->x);
HXDLIN( 134)		hx::SubEq(self69->y,b52->y);
HXDLIN( 134)		HX_VARI_NAME(  ::hxmath::math::IntVector2Default,b53,"b") = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)0,(int)0);
HXDLIN( 134)		Bool _hx_tmp264;
HXDLIN( 134)		Bool _hx_tmp265;
HXDLIN( 134)		if (hx::IsNull( self69 )) {
HXLINE( 134)			_hx_tmp265 = hx::IsNull( b53 );
            		}
            		else {
HXLINE( 134)			_hx_tmp265 = false;
            		}
HXDLIN( 134)		if (!(_hx_tmp265)) {
HXLINE( 134)			Bool _hx_tmp266;
HXDLIN( 134)			Bool _hx_tmp267;
HXDLIN( 134)			if (hx::IsNotNull( self69 )) {
HXLINE( 134)				_hx_tmp267 = hx::IsNotNull( b53 );
            			}
            			else {
HXLINE( 134)				_hx_tmp267 = false;
            			}
HXDLIN( 134)			if (_hx_tmp267) {
HXLINE( 134)				_hx_tmp266 = (self69->x == b53->x);
            			}
            			else {
HXLINE( 134)				_hx_tmp266 = false;
            			}
HXDLIN( 134)			if (_hx_tmp266) {
HXLINE( 134)				_hx_tmp264 = (self69->y == b53->y);
            			}
            			else {
HXLINE( 134)				_hx_tmp264 = false;
            			}
            		}
            		else {
HXLINE( 134)			_hx_tmp264 = true;
            		}
HXDLIN( 134)		this->assertTrue(_hx_tmp264,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),134,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE( 135)		HX_VARI_NAME(  ::hxmath::math::IntVector2Default,b54,"b") = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)1,(int)0);
HXDLIN( 135)		HX_VARI_NAME(  ::hxmath::math::IntVector2Default,self70,"self") = self67;
HXDLIN( 135)		HX_VARI_NAME(  ::hxmath::math::IntVector2Default,self71,"self") = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new(self70->x,self70->y);
HXDLIN( 135)		hx::SubEq(self71->x,b54->x);
HXDLIN( 135)		hx::SubEq(self71->y,b54->y);
HXDLIN( 135)		intVec2 = self71;
HXLINE( 136)		HX_VARI_NAME(  ::hxmath::math::IntVector2Default,b55,"b") = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)0,(int)0);
HXDLIN( 136)		Bool _hx_tmp268;
HXDLIN( 136)		Bool _hx_tmp269;
HXDLIN( 136)		if (hx::IsNull( self71 )) {
HXLINE( 136)			_hx_tmp269 = hx::IsNull( b55 );
            		}
            		else {
HXLINE( 136)			_hx_tmp269 = false;
            		}
HXDLIN( 136)		if (!(_hx_tmp269)) {
HXLINE( 136)			Bool _hx_tmp270;
HXDLIN( 136)			Bool _hx_tmp271;
HXDLIN( 136)			if (hx::IsNotNull( self71 )) {
HXLINE( 136)				_hx_tmp271 = hx::IsNotNull( b55 );
            			}
            			else {
HXLINE( 136)				_hx_tmp271 = false;
            			}
HXDLIN( 136)			if (_hx_tmp271) {
HXLINE( 136)				_hx_tmp270 = (self71->x == b55->x);
            			}
            			else {
HXLINE( 136)				_hx_tmp270 = false;
            			}
HXDLIN( 136)			if (_hx_tmp270) {
HXLINE( 136)				_hx_tmp268 = (self71->y == b55->y);
            			}
            			else {
HXLINE( 136)				_hx_tmp268 = false;
            			}
            		}
            		else {
HXLINE( 136)			_hx_tmp268 = true;
            		}
HXDLIN( 136)		this->assertTrue(_hx_tmp268,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),136,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE( 138)		HX_VARI( Int,shortVec2) = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((int)0,(int)0);
HXLINE( 139)		HX_VARI_NAME( Int,b56,"b") = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((int)1,(int)0);
HXDLIN( 139)		Int _hx_tmp272 = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((((int)shortVec2 & (int)(int)65535) + ((int)b56 & (int)(int)65535)),(((int)((int)shortVec2 >> (int)(int)16) & (int)(int)65535) + ((int)((int)b56 >> (int)(int)16) & (int)(int)65535)));
HXDLIN( 139)		Int _hx_tmp273 = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((int)1,(int)0);
HXDLIN( 139)		this->assertTrue((_hx_tmp272 == _hx_tmp273),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),139,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE( 140)		HX_VARI_NAME( Int,b57,"b") = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((int)1,(int)0);
HXDLIN( 140)		shortVec2 = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((((int)shortVec2 & (int)(int)65535) + ((int)b57 & (int)(int)65535)),(((int)((int)shortVec2 >> (int)(int)16) & (int)(int)65535) + ((int)((int)b57 >> (int)(int)16) & (int)(int)65535)));
HXLINE( 141)		Int _hx_tmp274 = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((int)1,(int)0);
HXDLIN( 141)		this->assertTrue((shortVec2 == _hx_tmp274),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),141,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE( 142)		HX_VARI_NAME( Int,b58,"b") = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((int)1,(int)0);
HXDLIN( 142)		Int _hx_tmp275 = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((((int)shortVec2 & (int)(int)65535) - ((int)b58 & (int)(int)65535)),(((int)((int)shortVec2 >> (int)(int)16) & (int)(int)65535) - ((int)((int)b58 >> (int)(int)16) & (int)(int)65535)));
HXDLIN( 142)		Int _hx_tmp276 = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((int)0,(int)0);
HXDLIN( 142)		this->assertTrue((_hx_tmp275 == _hx_tmp276),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),142,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
HXLINE( 143)		HX_VARI_NAME( Int,b59,"b") = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((int)1,(int)0);
HXDLIN( 143)		shortVec2 = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((((int)shortVec2 & (int)(int)65535) - ((int)b59 & (int)(int)65535)),(((int)((int)shortVec2 >> (int)(int)16) & (int)(int)65535) - ((int)((int)b59 >> (int)(int)16) & (int)(int)65535)));
HXLINE( 144)		Int _hx_tmp277 = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((int)0,(int)0);
HXDLIN( 144)		this->assertTrue((shortVec2 == _hx_tmp277),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),144,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testAddSub",d1,ff,fc,b7)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStructures_obj,testAddSub,(void))

void TestStructures_obj::testDeterminant(){
            	HX_STACK_FRAME("test.TestStructures","testDeterminant",0xa7305683,"test.TestStructures.testDeterminant","test/TestStructures.hx",148,0x1c38d1cf)
            	HX_STACK_THIS(this)
HXLINE( 149)		HX_VARI(  ::hxmath::math::Matrix2x2Default,self) =  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 149)		Float _hx_tmp = ((self->a * self->d) - (self->b * self->c));
HXDLIN( 149)		this->assertEquals(_hx_tmp,((Float)0.0),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),149,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testDeterminant",63,4a,e4,86)));
HXLINE( 150)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,self1,"self") =  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN( 150)		Float _hx_tmp1 = ((self1->a * self1->d) - (self1->b * self1->c));
HXDLIN( 150)		this->assertEquals(_hx_tmp1,((Float)1.0),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),150,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testDeterminant",63,4a,e4,86)));
HXLINE( 152)		{
HXLINE( 152)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 152)			while((_g < (int)10)){
HXLINE( 152)				++_g;
HXLINE( 154)				HX_VARI(  ::hxmath::math::Matrix2x2Default,a) = this->randomMatrix2x2(null());
HXLINE( 155)				HX_VARI(  ::hxmath::math::Matrix2x2Default,b) = this->randomMatrix2x2(null());
HXLINE( 156)				HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,self2,"self") =  ::hxmath::math::Matrix2x2Default_obj::__new(((a->a * b->a) + (a->b * b->c)),((a->a * b->b) + (a->b * b->d)),((a->c * b->a) + (a->d * b->c)),((a->c * b->b) + (a->d * b->d)));
HXDLIN( 156)				Float _hx_tmp2 = ((self2->a * self2->d) - (self2->b * self2->c));
HXDLIN( 156)				Float _hx_tmp3 = ((a->a * a->d) - (a->b * a->c));
HXDLIN( 156)				Float _hx_tmp4 = ((b->a * b->d) - (b->b * b->c));
HXDLIN( 156)				this->assertApproxEquals(_hx_tmp2,(_hx_tmp3 * _hx_tmp4),null(),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),156,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testDeterminant",63,4a,e4,86)));
            			}
            		}
HXLINE( 159)		HX_VARI_NAME(  ::hxmath::math::Matrix3x3Default,self3,"self") =  ::hxmath::math::Matrix3x3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 159)		HX_VARI( Float,m00) = self3->m00;
HXDLIN( 159)		HX_VARI( Float,m10) = self3->m10;
HXDLIN( 159)		HX_VARI( Float,m20) = self3->m20;
HXDLIN( 159)		HX_VARI( Float,m01) = self3->m01;
HXDLIN( 159)		HX_VARI( Float,m11) = self3->m11;
HXDLIN( 159)		HX_VARI( Float,m21) = self3->m21;
HXDLIN( 159)		HX_VARI( Float,m02) = self3->m02;
HXDLIN( 159)		HX_VARI( Float,m12) = self3->m12;
HXDLIN( 159)		HX_VARI( Float,m22) = self3->m22;
HXDLIN( 159)		this->assertEquals((((m00 * ((m11 * m22) - (m21 * m12))) - (m10 * ((m01 * m22) - (m21 * m02)))) + (m20 * ((m01 * m12) - (m11 * m02)))),((Float)0.0),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),159,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testDeterminant",63,4a,e4,86)));
HXLINE( 160)		HX_VARI_NAME(  ::hxmath::math::Matrix3x3Default,self4,"self") =  ::hxmath::math::Matrix3x3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN( 160)		HX_VARI_NAME( Float,m001,"m00") = self4->m00;
HXDLIN( 160)		HX_VARI_NAME( Float,m101,"m10") = self4->m10;
HXDLIN( 160)		HX_VARI_NAME( Float,m201,"m20") = self4->m20;
HXDLIN( 160)		HX_VARI_NAME( Float,m011,"m01") = self4->m01;
HXDLIN( 160)		HX_VARI_NAME( Float,m111,"m11") = self4->m11;
HXDLIN( 160)		HX_VARI_NAME( Float,m211,"m21") = self4->m21;
HXDLIN( 160)		HX_VARI_NAME( Float,m021,"m02") = self4->m02;
HXDLIN( 160)		HX_VARI_NAME( Float,m121,"m12") = self4->m12;
HXDLIN( 160)		HX_VARI_NAME( Float,m221,"m22") = self4->m22;
HXDLIN( 160)		this->assertEquals((((m001 * ((m111 * m221) - (m211 * m121))) - (m101 * ((m011 * m221) - (m211 * m021)))) + (m201 * ((m011 * m121) - (m111 * m021)))),((Float)1.0),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),160,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testDeterminant",63,4a,e4,86)));
HXLINE( 162)		{
HXLINE( 162)			HX_VARI_NAME( Int,_g1,"_g") = (int)0;
HXDLIN( 162)			while((_g1 < (int)10)){
HXLINE( 162)				++_g1;
HXLINE( 164)				HX_VARI_NAME(  ::hxmath::math::Matrix3x3Default,a1,"a") = this->randomMatrix3x3(null());
HXLINE( 165)				HX_VARI_NAME(  ::hxmath::math::Matrix3x3Default,b1,"b") = this->randomMatrix3x3(null());
HXLINE( 166)				HX_VARI_NAME(  ::hxmath::math::Matrix3x3Default,self5,"self") =  ::hxmath::math::Matrix3x3Default_obj::__new((((a1->m00 * b1->m00) + (a1->m10 * b1->m01)) + (a1->m20 * b1->m02)),(((a1->m00 * b1->m10) + (a1->m10 * b1->m11)) + (a1->m20 * b1->m12)),(((a1->m00 * b1->m20) + (a1->m10 * b1->m21)) + (a1->m20 * b1->m22)),(((a1->m01 * b1->m00) + (a1->m11 * b1->m01)) + (a1->m21 * b1->m02)),(((a1->m01 * b1->m10) + (a1->m11 * b1->m11)) + (a1->m21 * b1->m12)),(((a1->m01 * b1->m20) + (a1->m11 * b1->m21)) + (a1->m21 * b1->m22)),(((a1->m02 * b1->m00) + (a1->m12 * b1->m01)) + (a1->m22 * b1->m02)),(((a1->m02 * b1->m10) + (a1->m12 * b1->m11)) + (a1->m22 * b1->m12)),(((a1->m02 * b1->m20) + (a1->m12 * b1->m21)) + (a1->m22 * b1->m22)));
HXDLIN( 166)				HX_VARI_NAME( Float,m002,"m00") = self5->m00;
HXDLIN( 166)				HX_VARI_NAME( Float,m102,"m10") = self5->m10;
HXDLIN( 166)				HX_VARI_NAME( Float,m202,"m20") = self5->m20;
HXDLIN( 166)				HX_VARI_NAME( Float,m012,"m01") = self5->m01;
HXDLIN( 166)				HX_VARI_NAME( Float,m112,"m11") = self5->m11;
HXDLIN( 166)				HX_VARI_NAME( Float,m212,"m21") = self5->m21;
HXDLIN( 166)				HX_VARI_NAME( Float,m022,"m02") = self5->m02;
HXDLIN( 166)				HX_VARI_NAME( Float,m122,"m12") = self5->m12;
HXDLIN( 166)				HX_VARI_NAME( Float,m222,"m22") = self5->m22;
HXDLIN( 166)				Float _hx_tmp5 = (((m002 * ((m112 * m222) - (m212 * m122))) - (m102 * ((m012 * m222) - (m212 * m022)))) + (m202 * ((m012 * m122) - (m112 * m022))));
HXDLIN( 166)				HX_VARI_NAME( Float,m003,"m00") = a1->m00;
HXDLIN( 166)				HX_VARI_NAME( Float,m103,"m10") = a1->m10;
HXDLIN( 166)				HX_VARI_NAME( Float,m203,"m20") = a1->m20;
HXDLIN( 166)				HX_VARI_NAME( Float,m013,"m01") = a1->m01;
HXDLIN( 166)				HX_VARI_NAME( Float,m113,"m11") = a1->m11;
HXDLIN( 166)				HX_VARI_NAME( Float,m213,"m21") = a1->m21;
HXDLIN( 166)				HX_VARI_NAME( Float,m023,"m02") = a1->m02;
HXDLIN( 166)				HX_VARI_NAME( Float,m123,"m12") = a1->m12;
HXDLIN( 166)				HX_VARI_NAME( Float,m223,"m22") = a1->m22;
HXDLIN( 166)				Float _hx_tmp6 = (((m003 * ((m113 * m223) - (m213 * m123))) - (m103 * ((m013 * m223) - (m213 * m023)))) + (m203 * ((m013 * m123) - (m113 * m023))));
HXDLIN( 166)				HX_VARI_NAME( Float,m004,"m00") = b1->m00;
HXDLIN( 166)				HX_VARI_NAME( Float,m104,"m10") = b1->m10;
HXDLIN( 166)				HX_VARI_NAME( Float,m204,"m20") = b1->m20;
HXDLIN( 166)				HX_VARI_NAME( Float,m014,"m01") = b1->m01;
HXDLIN( 166)				HX_VARI_NAME( Float,m114,"m11") = b1->m11;
HXDLIN( 166)				HX_VARI_NAME( Float,m214,"m21") = b1->m21;
HXDLIN( 166)				HX_VARI_NAME( Float,m024,"m02") = b1->m02;
HXDLIN( 166)				HX_VARI_NAME( Float,m124,"m12") = b1->m12;
HXDLIN( 166)				HX_VARI_NAME( Float,m224,"m22") = b1->m22;
HXDLIN( 166)				this->assertApproxEquals(_hx_tmp5,(_hx_tmp6 * (((m004 * ((m114 * m224) - (m214 * m124))) - (m104 * ((m014 * m224) - (m214 * m024)))) + (m204 * ((m014 * m124) - (m114 * m024))))),null(),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),166,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testDeterminant",63,4a,e4,86)));
            			}
            		}
HXLINE( 169)		HX_VARI_NAME(  ::hxmath::math::Matrix4x4Default,self6,"self") =  ::hxmath::math::Matrix4x4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 169)		HX_VARI_NAME( Float,m005,"m00") = self6->m00;
HXDLIN( 169)		HX_VARI_NAME( Float,m105,"m10") = self6->m10;
HXDLIN( 169)		HX_VARI_NAME( Float,m205,"m20") = self6->m20;
HXDLIN( 169)		HX_VARI( Float,m30) = self6->m30;
HXDLIN( 169)		HX_VARI_NAME( Float,m015,"m01") = self6->m01;
HXDLIN( 169)		HX_VARI_NAME( Float,m115,"m11") = self6->m11;
HXDLIN( 169)		HX_VARI_NAME( Float,m215,"m21") = self6->m21;
HXDLIN( 169)		HX_VARI( Float,m31) = self6->m31;
HXDLIN( 169)		HX_VARI_NAME( Float,m025,"m02") = self6->m02;
HXDLIN( 169)		HX_VARI_NAME( Float,m125,"m12") = self6->m12;
HXDLIN( 169)		HX_VARI_NAME( Float,m225,"m22") = self6->m22;
HXDLIN( 169)		HX_VARI( Float,m32) = self6->m32;
HXDLIN( 169)		HX_VARI( Float,m03) = self6->m03;
HXDLIN( 169)		HX_VARI( Float,m13) = self6->m13;
HXDLIN( 169)		HX_VARI( Float,m23) = self6->m23;
HXDLIN( 169)		HX_VARI( Float,m33) = self6->m33;
HXDLIN( 169)		this->assertEquals(((((m005 * (((m115 * ((m225 * m33) - (m32 * m23))) - (m215 * ((m125 * m33) - (m32 * m13)))) + (m31 * ((m125 * m23) - (m225 * m13))))) - (m105 * (((m015 * ((m225 * m33) - (m32 * m23))) - (m215 * ((m025 * m33) - (m32 * m03)))) + (m31 * ((m025 * m23) - (m225 * m03)))))) + (m205 * (((m015 * ((m125 * m33) - (m32 * m13))) - (m115 * ((m025 * m33) - (m32 * m03)))) + (m31 * ((m025 * m13) - (m125 * m03)))))) - (m30 * (((m015 * ((m125 * m23) - (m225 * m13))) - (m115 * ((m025 * m23) - (m225 * m03)))) + (m215 * ((m025 * m13) - (m125 * m03)))))),((Float)0.0),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),169,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testDeterminant",63,4a,e4,86)));
HXLINE( 170)		HX_VARI_NAME(  ::hxmath::math::Matrix4x4Default,self7,"self") =  ::hxmath::math::Matrix4x4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN( 170)		HX_VARI_NAME( Float,m006,"m00") = self7->m00;
HXDLIN( 170)		HX_VARI_NAME( Float,m106,"m10") = self7->m10;
HXDLIN( 170)		HX_VARI_NAME( Float,m206,"m20") = self7->m20;
HXDLIN( 170)		HX_VARI_NAME( Float,m301,"m30") = self7->m30;
HXDLIN( 170)		HX_VARI_NAME( Float,m016,"m01") = self7->m01;
HXDLIN( 170)		HX_VARI_NAME( Float,m116,"m11") = self7->m11;
HXDLIN( 170)		HX_VARI_NAME( Float,m216,"m21") = self7->m21;
HXDLIN( 170)		HX_VARI_NAME( Float,m311,"m31") = self7->m31;
HXDLIN( 170)		HX_VARI_NAME( Float,m026,"m02") = self7->m02;
HXDLIN( 170)		HX_VARI_NAME( Float,m126,"m12") = self7->m12;
HXDLIN( 170)		HX_VARI_NAME( Float,m226,"m22") = self7->m22;
HXDLIN( 170)		HX_VARI_NAME( Float,m321,"m32") = self7->m32;
HXDLIN( 170)		HX_VARI_NAME( Float,m031,"m03") = self7->m03;
HXDLIN( 170)		HX_VARI_NAME( Float,m131,"m13") = self7->m13;
HXDLIN( 170)		HX_VARI_NAME( Float,m231,"m23") = self7->m23;
HXDLIN( 170)		HX_VARI_NAME( Float,m331,"m33") = self7->m33;
HXDLIN( 170)		this->assertEquals(((((m006 * (((m116 * ((m226 * m331) - (m321 * m231))) - (m216 * ((m126 * m331) - (m321 * m131)))) + (m311 * ((m126 * m231) - (m226 * m131))))) - (m106 * (((m016 * ((m226 * m331) - (m321 * m231))) - (m216 * ((m026 * m331) - (m321 * m031)))) + (m311 * ((m026 * m231) - (m226 * m031)))))) + (m206 * (((m016 * ((m126 * m331) - (m321 * m131))) - (m116 * ((m026 * m331) - (m321 * m031)))) + (m311 * ((m026 * m131) - (m126 * m031)))))) - (m301 * (((m016 * ((m126 * m231) - (m226 * m131))) - (m116 * ((m026 * m231) - (m226 * m031)))) + (m216 * ((m026 * m131) - (m126 * m031)))))),((Float)1.0),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),170,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testDeterminant",63,4a,e4,86)));
HXLINE( 172)		{
HXLINE( 172)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 172)			while((_g2 < (int)1)){
HXLINE( 172)				++_g2;
HXLINE( 174)				HX_VARI_NAME(  ::hxmath::math::Matrix4x4Default,a2,"a") = this->randomMatrix4x4(null());
HXLINE( 175)				HX_VARI_NAME(  ::hxmath::math::Matrix4x4Default,b2,"b") = this->randomMatrix4x4(null());
HXLINE( 176)				HX_VARI_NAME(  ::hxmath::math::Matrix4x4Default,self8,"self") =  ::hxmath::math::Matrix4x4Default_obj::__new(((((a2->m00 * b2->m00) + (a2->m10 * b2->m01)) + (a2->m20 * b2->m02)) + (a2->m30 * b2->m03)),((((a2->m00 * b2->m10) + (a2->m10 * b2->m11)) + (a2->m20 * b2->m12)) + (a2->m30 * b2->m13)),((((a2->m00 * b2->m20) + (a2->m10 * b2->m21)) + (a2->m20 * b2->m22)) + (a2->m30 * b2->m23)),((((a2->m00 * b2->m30) + (a2->m10 * b2->m31)) + (a2->m20 * b2->m32)) + (a2->m30 * b2->m33)),((((a2->m01 * b2->m00) + (a2->m11 * b2->m01)) + (a2->m21 * b2->m02)) + (a2->m31 * b2->m03)),((((a2->m01 * b2->m10) + (a2->m11 * b2->m11)) + (a2->m21 * b2->m12)) + (a2->m31 * b2->m13)),((((a2->m01 * b2->m20) + (a2->m11 * b2->m21)) + (a2->m21 * b2->m22)) + (a2->m31 * b2->m23)),((((a2->m01 * b2->m30) + (a2->m11 * b2->m31)) + (a2->m21 * b2->m32)) + (a2->m31 * b2->m33)),((((a2->m02 * b2->m00) + (a2->m12 * b2->m01)) + (a2->m22 * b2->m02)) + (a2->m32 * b2->m03)),((((a2->m02 * b2->m10) + (a2->m12 * b2->m11)) + (a2->m22 * b2->m12)) + (a2->m32 * b2->m13)),((((a2->m02 * b2->m20) + (a2->m12 * b2->m21)) + (a2->m22 * b2->m22)) + (a2->m32 * b2->m23)),((((a2->m02 * b2->m30) + (a2->m12 * b2->m31)) + (a2->m22 * b2->m32)) + (a2->m32 * b2->m33)),((((a2->m03 * b2->m00) + (a2->m13 * b2->m01)) + (a2->m23 * b2->m02)) + (a2->m33 * b2->m03)),((((a2->m03 * b2->m10) + (a2->m13 * b2->m11)) + (a2->m23 * b2->m12)) + (a2->m33 * b2->m13)),((((a2->m03 * b2->m20) + (a2->m13 * b2->m21)) + (a2->m23 * b2->m22)) + (a2->m33 * b2->m23)),((((a2->m03 * b2->m30) + (a2->m13 * b2->m31)) + (a2->m23 * b2->m32)) + (a2->m33 * b2->m33)));
HXDLIN( 176)				HX_VARI_NAME( Float,m007,"m00") = self8->m00;
HXDLIN( 176)				HX_VARI_NAME( Float,m107,"m10") = self8->m10;
HXDLIN( 176)				HX_VARI_NAME( Float,m207,"m20") = self8->m20;
HXDLIN( 176)				HX_VARI_NAME( Float,m302,"m30") = self8->m30;
HXDLIN( 176)				HX_VARI_NAME( Float,m017,"m01") = self8->m01;
HXDLIN( 176)				HX_VARI_NAME( Float,m117,"m11") = self8->m11;
HXDLIN( 176)				HX_VARI_NAME( Float,m217,"m21") = self8->m21;
HXDLIN( 176)				HX_VARI_NAME( Float,m312,"m31") = self8->m31;
HXDLIN( 176)				HX_VARI_NAME( Float,m027,"m02") = self8->m02;
HXDLIN( 176)				HX_VARI_NAME( Float,m127,"m12") = self8->m12;
HXDLIN( 176)				HX_VARI_NAME( Float,m227,"m22") = self8->m22;
HXDLIN( 176)				HX_VARI_NAME( Float,m322,"m32") = self8->m32;
HXDLIN( 176)				HX_VARI_NAME( Float,m032,"m03") = self8->m03;
HXDLIN( 176)				HX_VARI_NAME( Float,m132,"m13") = self8->m13;
HXDLIN( 176)				HX_VARI_NAME( Float,m232,"m23") = self8->m23;
HXDLIN( 176)				HX_VARI_NAME( Float,m332,"m33") = self8->m33;
HXDLIN( 176)				Float _hx_tmp7 = ((((m007 * (((m117 * ((m227 * m332) - (m322 * m232))) - (m217 * ((m127 * m332) - (m322 * m132)))) + (m312 * ((m127 * m232) - (m227 * m132))))) - (m107 * (((m017 * ((m227 * m332) - (m322 * m232))) - (m217 * ((m027 * m332) - (m322 * m032)))) + (m312 * ((m027 * m232) - (m227 * m032)))))) + (m207 * (((m017 * ((m127 * m332) - (m322 * m132))) - (m117 * ((m027 * m332) - (m322 * m032)))) + (m312 * ((m027 * m132) - (m127 * m032)))))) - (m302 * (((m017 * ((m127 * m232) - (m227 * m132))) - (m117 * ((m027 * m232) - (m227 * m032)))) + (m217 * ((m027 * m132) - (m127 * m032))))));
HXDLIN( 176)				HX_VARI_NAME( Float,m008,"m00") = a2->m00;
HXDLIN( 176)				HX_VARI_NAME( Float,m108,"m10") = a2->m10;
HXDLIN( 176)				HX_VARI_NAME( Float,m208,"m20") = a2->m20;
HXDLIN( 176)				HX_VARI_NAME( Float,m303,"m30") = a2->m30;
HXDLIN( 176)				HX_VARI_NAME( Float,m018,"m01") = a2->m01;
HXDLIN( 176)				HX_VARI_NAME( Float,m118,"m11") = a2->m11;
HXDLIN( 176)				HX_VARI_NAME( Float,m218,"m21") = a2->m21;
HXDLIN( 176)				HX_VARI_NAME( Float,m313,"m31") = a2->m31;
HXDLIN( 176)				HX_VARI_NAME( Float,m028,"m02") = a2->m02;
HXDLIN( 176)				HX_VARI_NAME( Float,m128,"m12") = a2->m12;
HXDLIN( 176)				HX_VARI_NAME( Float,m228,"m22") = a2->m22;
HXDLIN( 176)				HX_VARI_NAME( Float,m323,"m32") = a2->m32;
HXDLIN( 176)				HX_VARI_NAME( Float,m033,"m03") = a2->m03;
HXDLIN( 176)				HX_VARI_NAME( Float,m133,"m13") = a2->m13;
HXDLIN( 176)				HX_VARI_NAME( Float,m233,"m23") = a2->m23;
HXDLIN( 176)				HX_VARI_NAME( Float,m333,"m33") = a2->m33;
HXDLIN( 176)				Float _hx_tmp8 = ((((m008 * (((m118 * ((m228 * m333) - (m323 * m233))) - (m218 * ((m128 * m333) - (m323 * m133)))) + (m313 * ((m128 * m233) - (m228 * m133))))) - (m108 * (((m018 * ((m228 * m333) - (m323 * m233))) - (m218 * ((m028 * m333) - (m323 * m033)))) + (m313 * ((m028 * m233) - (m228 * m033)))))) + (m208 * (((m018 * ((m128 * m333) - (m323 * m133))) - (m118 * ((m028 * m333) - (m323 * m033)))) + (m313 * ((m028 * m133) - (m128 * m033)))))) - (m303 * (((m018 * ((m128 * m233) - (m228 * m133))) - (m118 * ((m028 * m233) - (m228 * m033)))) + (m218 * ((m028 * m133) - (m128 * m033))))));
HXDLIN( 176)				HX_VARI_NAME( Float,m009,"m00") = b2->m00;
HXDLIN( 176)				HX_VARI_NAME( Float,m109,"m10") = b2->m10;
HXDLIN( 176)				HX_VARI_NAME( Float,m209,"m20") = b2->m20;
HXDLIN( 176)				HX_VARI_NAME( Float,m304,"m30") = b2->m30;
HXDLIN( 176)				HX_VARI_NAME( Float,m019,"m01") = b2->m01;
HXDLIN( 176)				HX_VARI_NAME( Float,m119,"m11") = b2->m11;
HXDLIN( 176)				HX_VARI_NAME( Float,m219,"m21") = b2->m21;
HXDLIN( 176)				HX_VARI_NAME( Float,m314,"m31") = b2->m31;
HXDLIN( 176)				HX_VARI_NAME( Float,m029,"m02") = b2->m02;
HXDLIN( 176)				HX_VARI_NAME( Float,m129,"m12") = b2->m12;
HXDLIN( 176)				HX_VARI_NAME( Float,m229,"m22") = b2->m22;
HXDLIN( 176)				HX_VARI_NAME( Float,m324,"m32") = b2->m32;
HXDLIN( 176)				HX_VARI_NAME( Float,m034,"m03") = b2->m03;
HXDLIN( 176)				HX_VARI_NAME( Float,m134,"m13") = b2->m13;
HXDLIN( 176)				HX_VARI_NAME( Float,m234,"m23") = b2->m23;
HXDLIN( 176)				HX_VARI_NAME( Float,m334,"m33") = b2->m33;
HXDLIN( 176)				this->assertApproxEquals(_hx_tmp7,(_hx_tmp8 * ((((m009 * (((m119 * ((m229 * m334) - (m324 * m234))) - (m219 * ((m129 * m334) - (m324 * m134)))) + (m314 * ((m129 * m234) - (m229 * m134))))) - (m109 * (((m019 * ((m229 * m334) - (m324 * m234))) - (m219 * ((m029 * m334) - (m324 * m034)))) + (m314 * ((m029 * m234) - (m229 * m034)))))) + (m209 * (((m019 * ((m129 * m334) - (m324 * m134))) - (m119 * ((m029 * m334) - (m324 * m034)))) + (m314 * ((m029 * m134) - (m129 * m034)))))) - (m304 * (((m019 * ((m129 * m234) - (m229 * m134))) - (m119 * ((m029 * m234) - (m229 * m034)))) + (m219 * ((m029 * m134) - (m129 * m034))))))),null(),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),176,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testDeterminant",63,4a,e4,86)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStructures_obj,testDeterminant,(void))

void TestStructures_obj::testArrayAccess(){
            	HX_STACK_FRAME("test.TestStructures","testArrayAccess",0x6d69290b,"test.TestStructures.testArrayAccess","test/TestStructures.hx",181,0x1c38d1cf)
            	HX_STACK_THIS(this)
HXLINE( 182)		HX_VARI(  ::hxmath::math::Vector2Default,vec2) =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)0.0));
HXLINE( 183)		vec2->y = ((Float)1.0);
HXLINE( 184)		this->assertEquals(((Float)1.0),vec2->y,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),184,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testArrayAccess",eb,1c,1d,4d)));
HXLINE( 185)		 ::Dynamic _hx_tmp = vec2->y;
HXDLIN( 185)		this->assertEquals(((Float)1.0),_hx_tmp,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),185,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testArrayAccess",eb,1c,1d,4d)));
HXLINE( 187)		HX_VARI(  ::hxmath::math::Vector3Default,vec3) =  ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0));
HXLINE( 188)		vec3->y = ((Float)1.0);
HXLINE( 189)		this->assertEquals(((Float)1.0),vec3->y,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),189,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testArrayAccess",eb,1c,1d,4d)));
HXLINE( 190)		 ::Dynamic _hx_tmp1 = vec3->y;
HXDLIN( 190)		this->assertEquals(((Float)1.0),_hx_tmp1,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),190,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testArrayAccess",eb,1c,1d,4d)));
HXLINE( 192)		HX_VARI(  ::hxmath::math::Vector4Default,vec4) =  ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXLINE( 193)		vec4->y = ((Float)1.0);
HXLINE( 194)		this->assertEquals(((Float)1.0),vec4->y,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),194,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testArrayAccess",eb,1c,1d,4d)));
HXLINE( 195)		 ::Dynamic _hx_tmp2 = vec4->y;
HXDLIN( 195)		this->assertEquals(((Float)1.0),_hx_tmp2,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),195,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testArrayAccess",eb,1c,1d,4d)));
HXLINE( 197)		HX_VARI(  ::hxmath::math::Matrix2x2Default,mat2x2) =  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXLINE( 198)		mat2x2->c = ((Float)1.0);
HXLINE( 199)		this->assertEquals(((Float)1.0),mat2x2->c,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),199,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testArrayAccess",eb,1c,1d,4d)));
HXLINE( 200)		 ::Dynamic _hx_tmp3 = mat2x2->c;
HXDLIN( 200)		this->assertEquals(((Float)1.0),_hx_tmp3,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),200,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testArrayAccess",eb,1c,1d,4d)));
HXLINE( 201)		Float _hx_tmp4 = mat2x2->c;
HXDLIN( 201)		this->assertEquals(((Float)1.0),_hx_tmp4,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),201,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testArrayAccess",eb,1c,1d,4d)));
HXLINE( 203)		HX_VARI(  ::hxmath::math::Matrix3x2Default,mat3x2) =  ::hxmath::math::Matrix3x2Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXLINE( 204)		mat3x2->c = ((Float)1.0);
HXLINE( 205)		this->assertEquals(((Float)1.0),mat3x2->c,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),205,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testArrayAccess",eb,1c,1d,4d)));
HXLINE( 206)		 ::Dynamic _hx_tmp5 = mat3x2->c;
HXDLIN( 206)		this->assertEquals(((Float)1.0),_hx_tmp5,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),206,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testArrayAccess",eb,1c,1d,4d)));
HXLINE( 207)		Float _hx_tmp6 = mat3x2->c;
HXDLIN( 207)		this->assertEquals(((Float)1.0),_hx_tmp6,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),207,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testArrayAccess",eb,1c,1d,4d)));
HXLINE( 209)		HX_VARI(  ::hxmath::math::Matrix3x3Default,mat3x3) =  ::hxmath::math::Matrix3x3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXLINE( 210)		mat3x3->m21 = ((Float)1.0);
HXLINE( 211)		this->assertEquals(((Float)1.0),mat3x3->m21,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),211,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testArrayAccess",eb,1c,1d,4d)));
HXLINE( 212)		 ::Dynamic _hx_tmp7 = mat3x3->m21;
HXDLIN( 212)		this->assertEquals(((Float)1.0),_hx_tmp7,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),212,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testArrayAccess",eb,1c,1d,4d)));
HXLINE( 213)		Float _hx_tmp8 = mat3x3->m21;
HXDLIN( 213)		this->assertEquals(((Float)1.0),_hx_tmp8,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),213,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testArrayAccess",eb,1c,1d,4d)));
HXLINE( 215)		HX_VARI(  ::hxmath::math::Matrix4x4Default,mat4x4) =  ::hxmath::math::Matrix4x4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXLINE( 216)		mat4x4->m11 = ((Float)1.0);
HXLINE( 217)		this->assertEquals(((Float)1.0),mat4x4->m11,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),217,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testArrayAccess",eb,1c,1d,4d)));
HXLINE( 218)		 ::Dynamic _hx_tmp9 = mat4x4->m11;
HXDLIN( 218)		this->assertEquals(((Float)1.0),_hx_tmp9,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),218,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testArrayAccess",eb,1c,1d,4d)));
HXLINE( 219)		Float _hx_tmp10 = mat4x4->m11;
HXDLIN( 219)		this->assertEquals(((Float)1.0),_hx_tmp10,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),219,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testArrayAccess",eb,1c,1d,4d)));
HXLINE( 221)		HX_VARI(  ::hxmath::math::QuaternionDefault,quat) =  ::hxmath::math::QuaternionDefault_obj::__new((int)0,(int)0,(int)0,(int)0);
HXLINE( 222)		quat->y = ((Float)1.0);
HXLINE( 223)		this->assertEquals(((Float)1.0),quat->y,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),223,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testArrayAccess",eb,1c,1d,4d)));
HXLINE( 224)		 ::Dynamic _hx_tmp11 = quat->y;
HXDLIN( 224)		this->assertEquals(((Float)1.0),_hx_tmp11,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),224,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testArrayAccess",eb,1c,1d,4d)));
HXLINE( 226)		HX_VARI(  ::hxmath::math::IntVector2Default,intVec2) = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)0,(int)0);
HXLINE( 227)		intVec2->y = (int)1;
HXLINE( 228)		this->assertEquals((int)1,intVec2->y,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),228,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testArrayAccess",eb,1c,1d,4d)));
HXLINE( 229)		 ::Dynamic _hx_tmp12 = intVec2->y;
HXDLIN( 229)		this->assertEquals((int)1,_hx_tmp12,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),229,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testArrayAccess",eb,1c,1d,4d)));
HXLINE( 232)		HX_VARI( Int,shortVec2) = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((int)0,(int)1);
HXLINE( 233)		this->assertEquals((int)1,((int)((int)shortVec2 >> (int)(int)16) & (int)(int)65535),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),233,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testArrayAccess",eb,1c,1d,4d)));
HXLINE( 234)		this->assertEquals((int)1,((int)((int)shortVec2 >> (int)(int)16) & (int)(int)65535),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),234,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testArrayAccess",eb,1c,1d,4d)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStructures_obj,testArrayAccess,(void))

void TestStructures_obj::testApplyScalarFunc(){
            	HX_STACK_FRAME("test.TestStructures","testApplyScalarFunc",0xfa30eb8c,"test.TestStructures.testApplyScalarFunc","test/TestStructures.hx",238,0x1c38d1cf)
            	HX_STACK_THIS(this)
HXLINE( 239)		HX_VARI( ::cpp::VirtualArray,testData) = ::cpp::VirtualArray_obj::__new(8)->init(0, ::Dynamic(hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("f",66,00,00,00),::hxmath::math::_Vector2::Vector2_Impl__obj::applyScalarFunc_dyn())
            			->setFixed(1,HX_("get",96,80,4e,00),::hxmath::math::_Vector2::Vector2_Impl__obj::getArrayElement_dyn())
            			->setFixed(2,HX_("set",a2,9b,57,00),::hxmath::math::_Vector2::Vector2_Impl__obj::setArrayElement_dyn())
            			->setFixed(3,HX_("count",cf,44,63,4a),(int)2)
            			->setFixed(4,HX_("zero",28,0f,f1,50), ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)0.0)))))->init(1, ::Dynamic(hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("f",66,00,00,00),::hxmath::math::_Vector3::Vector3_Impl__obj::applyScalarFunc_dyn())
            			->setFixed(1,HX_("get",96,80,4e,00),::hxmath::math::_Vector3::Vector3_Impl__obj::getArrayElement_dyn())
            			->setFixed(2,HX_("set",a2,9b,57,00),::hxmath::math::_Vector3::Vector3_Impl__obj::setArrayElement_dyn())
            			->setFixed(3,HX_("count",cf,44,63,4a),(int)3)
            			->setFixed(4,HX_("zero",28,0f,f1,50), ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0)))))->init(2, ::Dynamic(hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("f",66,00,00,00),::hxmath::math::_Vector4::Vector4_Impl__obj::applyScalarFunc_dyn())
            			->setFixed(1,HX_("get",96,80,4e,00),::hxmath::math::_Vector4::Vector4_Impl__obj::getArrayElement_dyn())
            			->setFixed(2,HX_("set",a2,9b,57,00),::hxmath::math::_Vector4::Vector4_Impl__obj::setArrayElement_dyn())
            			->setFixed(3,HX_("count",cf,44,63,4a),(int)4)
            			->setFixed(4,HX_("zero",28,0f,f1,50), ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0)))))->init(3, ::Dynamic(hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("f",66,00,00,00),::hxmath::math::_Matrix2x2::Matrix2x2_Impl__obj::applyScalarFunc_dyn())
            			->setFixed(1,HX_("get",96,80,4e,00),::hxmath::math::_Matrix2x2::Matrix2x2_Impl__obj::getArrayElement_dyn())
            			->setFixed(2,HX_("set",a2,9b,57,00),::hxmath::math::_Matrix2x2::Matrix2x2_Impl__obj::setArrayElement_dyn())
            			->setFixed(3,HX_("count",cf,44,63,4a),(int)4)
            			->setFixed(4,HX_("zero",28,0f,f1,50), ::hxmath::math::Matrix2x2Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0)))))->init(4, ::Dynamic(hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("f",66,00,00,00),::hxmath::math::_Matrix3x2::Matrix3x2_Impl__obj::applyScalarFunc_dyn())
            			->setFixed(1,HX_("get",96,80,4e,00),::hxmath::math::_Matrix3x2::Matrix3x2_Impl__obj::getArrayElement_dyn())
            			->setFixed(2,HX_("set",a2,9b,57,00),::hxmath::math::_Matrix3x2::Matrix3x2_Impl__obj::setArrayElement_dyn())
            			->setFixed(3,HX_("count",cf,44,63,4a),(int)6)
            			->setFixed(4,HX_("zero",28,0f,f1,50), ::hxmath::math::Matrix3x2Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0)))))->init(5, ::Dynamic(hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("f",66,00,00,00),::hxmath::math::_Matrix3x3::Matrix3x3_Impl__obj::applyScalarFunc_dyn())
            			->setFixed(1,HX_("get",96,80,4e,00),::hxmath::math::_Matrix3x3::Matrix3x3_Impl__obj::getArrayElement_dyn())
            			->setFixed(2,HX_("set",a2,9b,57,00),::hxmath::math::_Matrix3x3::Matrix3x3_Impl__obj::setArrayElement_dyn())
            			->setFixed(3,HX_("count",cf,44,63,4a),(int)9)
            			->setFixed(4,HX_("zero",28,0f,f1,50), ::hxmath::math::Matrix3x3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0)))))->init(6, ::Dynamic(hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("f",66,00,00,00),::hxmath::math::_Matrix4x4::Matrix4x4_Impl__obj::applyScalarFunc_dyn())
            			->setFixed(1,HX_("get",96,80,4e,00),::hxmath::math::_Matrix4x4::Matrix4x4_Impl__obj::getArrayElement_dyn())
            			->setFixed(2,HX_("set",a2,9b,57,00),::hxmath::math::_Matrix4x4::Matrix4x4_Impl__obj::setArrayElement_dyn())
            			->setFixed(3,HX_("count",cf,44,63,4a),(int)16)
            			->setFixed(4,HX_("zero",28,0f,f1,50), ::hxmath::math::Matrix4x4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0)))))->init(7, ::Dynamic(hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("f",66,00,00,00),::hxmath::math::_Quaternion::Quaternion_Impl__obj::applyScalarFunc_dyn())
            			->setFixed(1,HX_("get",96,80,4e,00),::hxmath::math::_Quaternion::Quaternion_Impl__obj::getArrayElement_dyn())
            			->setFixed(2,HX_("set",a2,9b,57,00),::hxmath::math::_Quaternion::Quaternion_Impl__obj::setArrayElement_dyn())
            			->setFixed(3,HX_("count",cf,44,63,4a),(int)4)
            			->setFixed(4,HX_("zero",28,0f,f1,50), ::hxmath::math::QuaternionDefault_obj::__new((int)0,(int)0,(int)0,(int)0))));
HXLINE( 297)		{
HXLINE( 297)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 297)			while((_g < testData->get_length())){
HXLINE( 297)				HX_VARI(  ::Dynamic,data) = testData->__get(_g);
HXDLIN( 297)				++_g;
HXLINE( 299)				HX_VARI(  ::Dynamic,v) =  ::Dynamic(data->__Field(HX_("zero",28,0f,f1,50),hx::paccDynamic));
HXLINE( 300)				 ::Dynamic(data->__Field(HX_("set",a2,9b,57,00),hx::paccDynamic))(v,(int)1,((Float)0.1));
HXLINE( 301)				 ::Dynamic(data->__Field(HX_("f",66,00,00,00),hx::paccDynamic))(v,::Math_obj::ceil_dyn());
HXLINE( 303)				HX_VARI( Float,sum) = ((Float)0.0);
HXLINE( 304)				{
HXLINE( 304)					HX_VARI( Int,_g2) = (int)0;
HXDLIN( 304)					HX_VARI( Int,_g1) = ( (Int)(data->__Field(HX_("count",cf,44,63,4a),hx::paccDynamic)) );
HXDLIN( 304)					while((_g2 < _g1)){
HXLINE( 304)						HX_VARI( Int,i) = _g2++;
HXLINE( 306)						 ::Dynamic _hx_tmp =  ::Dynamic(data->__Field(HX_("get",96,80,4e,00),hx::paccDynamic))(v,i);
HXDLIN( 306)						hx::AddEq(sum,_hx_tmp);
            					}
            				}
HXLINE( 309)				this->assertEquals(((Float)1.0),sum,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),309,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testApplyScalarFunc",6c,4f,1c,88)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStructures_obj,testApplyScalarFunc,(void))

void TestStructures_obj::testIntApplyScalarFunc(){
            	HX_STACK_FRAME("test.TestStructures","testIntApplyScalarFunc",0xc695e441,"test.TestStructures.testIntApplyScalarFunc","test/TestStructures.hx",314,0x1c38d1cf)
            	HX_STACK_THIS(this)
HXLINE( 315)		HX_VARI( ::cpp::VirtualArray,testData) = ::cpp::VirtualArray_obj::__new(1)->init(0, ::Dynamic(hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("f",66,00,00,00),::hxmath::math::_IntVector2::IntVector2_Impl__obj::applyScalarFunc_dyn())
            			->setFixed(1,HX_("get",96,80,4e,00),::hxmath::math::_IntVector2::IntVector2_Impl__obj::getArrayElement_dyn())
            			->setFixed(2,HX_("set",a2,9b,57,00),::hxmath::math::_IntVector2::IntVector2_Impl__obj::setArrayElement_dyn())
            			->setFixed(3,HX_("count",cf,44,63,4a),(int)2)
            			->setFixed(4,HX_("zero",28,0f,f1,50),::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)0,(int)0))));
HXLINE( 324)		{
HXLINE( 324)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 324)			while((_g < testData->get_length())){
            				HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            				Int _hx_run(Int x){
            					HX_STACK_FRAME("test.TestStructures","testIntApplyScalarFunc",0xc695e441,"test.TestStructures.testIntApplyScalarFunc","test/TestStructures.hx",328,0x1c38d1cf)
            					HX_STACK_ARG(x,"x")
HXLINE( 328)					return ((int)2 * x);
            				}
            				HX_END_LOCAL_FUNC1(return)

HXLINE( 324)				HX_VARI(  ::Dynamic,data) = testData->__get(_g);
HXDLIN( 324)				++_g;
HXLINE( 326)				HX_VARI(  ::Dynamic,v) =  ::Dynamic(data->__Field(HX_("zero",28,0f,f1,50),hx::paccDynamic));
HXLINE( 327)				 ::Dynamic(data->__Field(HX_("set",a2,9b,57,00),hx::paccDynamic))(v,(int)1,(int)1);
HXLINE( 328)				 ::Dynamic(data->__Field(HX_("f",66,00,00,00),hx::paccDynamic))(v, ::Dynamic(new _hx_Closure_0()));
HXLINE( 330)				HX_VARI( Int,sum) = (int)0;
HXLINE( 331)				{
HXLINE( 331)					HX_VARI( Int,_g2) = (int)0;
HXDLIN( 331)					HX_VARI( Int,_g1) = ( (Int)(data->__Field(HX_("count",cf,44,63,4a),hx::paccDynamic)) );
HXDLIN( 331)					while((_g2 < _g1)){
HXLINE( 331)						HX_VARI( Int,i) = _g2++;
HXLINE( 333)						 ::Dynamic _hx_tmp =  ::Dynamic(data->__Field(HX_("get",96,80,4e,00),hx::paccDynamic))(v,i);
HXDLIN( 333)						hx::AddEq(sum,_hx_tmp);
            					}
            				}
HXLINE( 336)				this->assertEquals((int)2,sum,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),336,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testIntApplyScalarFunc",61,2c,ba,81)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStructures_obj,testIntApplyScalarFunc,(void))

void TestStructures_obj::testCopyToFrom(){
            	HX_STACK_FRAME("test.TestStructures","testCopyToFrom",0xd1a474ec,"test.TestStructures.testCopyToFrom","test/TestStructures.hx",341,0x1c38d1cf)
            	HX_STACK_THIS(this)
HXLINE( 342)		HX_VARI(  ::hxmath::math::Vector2Default,vec2a) = this->randomVector2(null());
HXLINE( 343)		HX_VARI(  ::hxmath::math::Vector2Default,vec2b) =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)0.0));
HXLINE( 344)		{
HXLINE( 344)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 344)			while((_g < (int)2)){
HXLINE( 344)				HX_VARI( Int,i) = _g++;
HXDLIN( 344)				{
HXLINE( 344)					 ::Dynamic _hx_tmp;
HXDLIN( 344)					switch((int)(i)){
            						case (int)0: {
HXLINE( 344)							_hx_tmp = vec2a->x;
            						}
            						break;
            						case (int)1: {
HXLINE( 344)							_hx_tmp = vec2a->y;
            						}
            						break;
            						default:{
HXLINE( 344)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 344)					HX_VARI( Float,value) = ( (Float)(_hx_tmp) );
HXDLIN( 344)					switch((int)(i)){
            						case (int)0: {
HXLINE( 344)							vec2b->x = value;
            						}
            						break;
            						case (int)1: {
HXLINE( 344)							vec2b->y = value;
            						}
            						break;
            						default:{
HXLINE( 344)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXLINE( 345)		Bool _hx_tmp1;
HXDLIN( 345)		Bool _hx_tmp2;
HXDLIN( 345)		if (hx::IsNull( vec2a )) {
HXLINE( 345)			_hx_tmp2 = hx::IsNull( vec2b );
            		}
            		else {
HXLINE( 345)			_hx_tmp2 = false;
            		}
HXDLIN( 345)		if (!(_hx_tmp2)) {
HXLINE( 345)			Bool _hx_tmp3;
HXDLIN( 345)			Bool _hx_tmp4;
HXDLIN( 345)			if (hx::IsNotNull( vec2a )) {
HXLINE( 345)				_hx_tmp4 = hx::IsNotNull( vec2b );
            			}
            			else {
HXLINE( 345)				_hx_tmp4 = false;
            			}
HXDLIN( 345)			if (_hx_tmp4) {
HXLINE( 345)				_hx_tmp3 = (vec2a->x == vec2b->x);
            			}
            			else {
HXLINE( 345)				_hx_tmp3 = false;
            			}
HXDLIN( 345)			if (_hx_tmp3) {
HXLINE( 345)				_hx_tmp1 = (vec2a->y == vec2b->y);
            			}
            			else {
HXLINE( 345)				_hx_tmp1 = false;
            			}
            		}
            		else {
HXLINE( 345)			_hx_tmp1 = true;
            		}
HXDLIN( 345)		this->assertTrue(_hx_tmp1,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),345,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testCopyToFrom",0c,9d,33,cf)));
HXLINE( 347)		HX_VARI(  ::hxmath::math::Vector3Default,vec3a) = this->randomVector3(null());
HXLINE( 348)		HX_VARI(  ::hxmath::math::Vector3Default,vec3b) =  ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0));
HXLINE( 349)		{
HXLINE( 349)			HX_VARI_NAME( Int,_g1,"_g") = (int)0;
HXDLIN( 349)			while((_g1 < (int)3)){
HXLINE( 349)				HX_VARI_NAME( Int,i1,"i") = _g1++;
HXDLIN( 349)				{
HXLINE( 349)					 ::Dynamic _hx_tmp5;
HXDLIN( 349)					switch((int)(i1)){
            						case (int)0: {
HXLINE( 349)							_hx_tmp5 = vec3a->x;
            						}
            						break;
            						case (int)1: {
HXLINE( 349)							_hx_tmp5 = vec3a->y;
            						}
            						break;
            						case (int)2: {
HXLINE( 349)							_hx_tmp5 = vec3a->z;
            						}
            						break;
            						default:{
HXLINE( 349)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 349)					HX_VARI_NAME( Float,value1,"value") = ( (Float)(_hx_tmp5) );
HXDLIN( 349)					switch((int)(i1)){
            						case (int)0: {
HXLINE( 349)							vec3b->x = value1;
            						}
            						break;
            						case (int)1: {
HXLINE( 349)							vec3b->y = value1;
            						}
            						break;
            						case (int)2: {
HXLINE( 349)							vec3b->z = value1;
            						}
            						break;
            						default:{
HXLINE( 349)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXLINE( 350)		Bool _hx_tmp6;
HXDLIN( 350)		Bool _hx_tmp7;
HXDLIN( 350)		if (hx::IsNull( vec3a )) {
HXLINE( 350)			_hx_tmp7 = hx::IsNull( vec3b );
            		}
            		else {
HXLINE( 350)			_hx_tmp7 = false;
            		}
HXDLIN( 350)		if (!(_hx_tmp7)) {
HXLINE( 350)			Bool _hx_tmp8;
HXDLIN( 350)			Bool _hx_tmp9;
HXDLIN( 350)			Bool _hx_tmp10;
HXDLIN( 350)			if (hx::IsNotNull( vec3a )) {
HXLINE( 350)				_hx_tmp10 = hx::IsNotNull( vec3b );
            			}
            			else {
HXLINE( 350)				_hx_tmp10 = false;
            			}
HXDLIN( 350)			if (_hx_tmp10) {
HXLINE( 350)				_hx_tmp9 = (vec3a->x == vec3b->x);
            			}
            			else {
HXLINE( 350)				_hx_tmp9 = false;
            			}
HXDLIN( 350)			if (_hx_tmp9) {
HXLINE( 350)				_hx_tmp8 = (vec3a->y == vec3b->y);
            			}
            			else {
HXLINE( 350)				_hx_tmp8 = false;
            			}
HXDLIN( 350)			if (_hx_tmp8) {
HXLINE( 350)				_hx_tmp6 = (vec3a->z == vec3b->z);
            			}
            			else {
HXLINE( 350)				_hx_tmp6 = false;
            			}
            		}
            		else {
HXLINE( 350)			_hx_tmp6 = true;
            		}
HXDLIN( 350)		this->assertTrue(_hx_tmp6,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),350,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testCopyToFrom",0c,9d,33,cf)));
HXLINE( 352)		HX_VARI(  ::hxmath::math::Vector4Default,vec4a) = this->randomVector4(null());
HXLINE( 353)		HX_VARI(  ::hxmath::math::Vector4Default,vec4b) =  ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXLINE( 354)		{
HXLINE( 354)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 354)			while((_g2 < (int)4)){
HXLINE( 354)				HX_VARI_NAME( Int,i2,"i") = _g2++;
HXDLIN( 354)				{
HXLINE( 354)					 ::Dynamic _hx_tmp11;
HXDLIN( 354)					switch((int)(i2)){
            						case (int)0: {
HXLINE( 354)							_hx_tmp11 = vec4a->x;
            						}
            						break;
            						case (int)1: {
HXLINE( 354)							_hx_tmp11 = vec4a->y;
            						}
            						break;
            						case (int)2: {
HXLINE( 354)							_hx_tmp11 = vec4a->z;
            						}
            						break;
            						case (int)3: {
HXLINE( 354)							_hx_tmp11 = vec4a->w;
            						}
            						break;
            						default:{
HXLINE( 354)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 354)					HX_VARI_NAME( Float,value2,"value") = ( (Float)(_hx_tmp11) );
HXDLIN( 354)					switch((int)(i2)){
            						case (int)0: {
HXLINE( 354)							vec4b->x = value2;
            						}
            						break;
            						case (int)1: {
HXLINE( 354)							vec4b->y = value2;
            						}
            						break;
            						case (int)2: {
HXLINE( 354)							vec4b->z = value2;
            						}
            						break;
            						case (int)3: {
HXLINE( 354)							vec4b->w = value2;
            						}
            						break;
            						default:{
HXLINE( 354)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXLINE( 355)		Bool _hx_tmp12;
HXDLIN( 355)		Bool _hx_tmp13;
HXDLIN( 355)		if (hx::IsNull( vec4a )) {
HXLINE( 355)			_hx_tmp13 = hx::IsNull( vec4b );
            		}
            		else {
HXLINE( 355)			_hx_tmp13 = false;
            		}
HXDLIN( 355)		if (!(_hx_tmp13)) {
HXLINE( 355)			Bool _hx_tmp14;
HXDLIN( 355)			Bool _hx_tmp15;
HXDLIN( 355)			Bool _hx_tmp16;
HXDLIN( 355)			Bool _hx_tmp17;
HXDLIN( 355)			if (hx::IsNotNull( vec4a )) {
HXLINE( 355)				_hx_tmp17 = hx::IsNotNull( vec4b );
            			}
            			else {
HXLINE( 355)				_hx_tmp17 = false;
            			}
HXDLIN( 355)			if (_hx_tmp17) {
HXLINE( 355)				_hx_tmp16 = (vec4a->x == vec4b->x);
            			}
            			else {
HXLINE( 355)				_hx_tmp16 = false;
            			}
HXDLIN( 355)			if (_hx_tmp16) {
HXLINE( 355)				_hx_tmp15 = (vec4a->y == vec4b->y);
            			}
            			else {
HXLINE( 355)				_hx_tmp15 = false;
            			}
HXDLIN( 355)			if (_hx_tmp15) {
HXLINE( 355)				_hx_tmp14 = (vec4a->z == vec4b->z);
            			}
            			else {
HXLINE( 355)				_hx_tmp14 = false;
            			}
HXDLIN( 355)			if (_hx_tmp14) {
HXLINE( 355)				_hx_tmp12 = (vec4a->w == vec4b->w);
            			}
            			else {
HXLINE( 355)				_hx_tmp12 = false;
            			}
            		}
            		else {
HXLINE( 355)			_hx_tmp12 = true;
            		}
HXDLIN( 355)		this->assertTrue(_hx_tmp12,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),355,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testCopyToFrom",0c,9d,33,cf)));
HXLINE( 357)		HX_VARI(  ::hxmath::math::Matrix2x2Default,mat2x2a) = this->randomMatrix2x2(null());
HXLINE( 358)		HX_VARI(  ::hxmath::math::Matrix2x2Default,mat2x2b) =  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXLINE( 359)		{
HXLINE( 359)			HX_VARI_NAME( Int,_g3,"_g") = (int)0;
HXDLIN( 359)			while((_g3 < (int)4)){
HXLINE( 359)				HX_VARI_NAME( Int,i3,"i") = _g3++;
HXDLIN( 359)				{
HXLINE( 359)					 ::Dynamic _hx_tmp18;
HXDLIN( 359)					switch((int)(i3)){
            						case (int)0: {
HXLINE( 359)							_hx_tmp18 = mat2x2a->a;
            						}
            						break;
            						case (int)1: {
HXLINE( 359)							_hx_tmp18 = mat2x2a->b;
            						}
            						break;
            						case (int)2: {
HXLINE( 359)							_hx_tmp18 = mat2x2a->c;
            						}
            						break;
            						case (int)3: {
HXLINE( 359)							_hx_tmp18 = mat2x2a->d;
            						}
            						break;
            						default:{
HXLINE( 359)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 359)					HX_VARI_NAME( Float,value3,"value") = ( (Float)(_hx_tmp18) );
HXDLIN( 359)					switch((int)(i3)){
            						case (int)0: {
HXLINE( 359)							mat2x2b->a = value3;
            						}
            						break;
            						case (int)1: {
HXLINE( 359)							mat2x2b->b = value3;
            						}
            						break;
            						case (int)2: {
HXLINE( 359)							mat2x2b->c = value3;
            						}
            						break;
            						case (int)3: {
HXLINE( 359)							mat2x2b->d = value3;
            						}
            						break;
            						default:{
HXLINE( 359)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXLINE( 360)		Bool _hx_tmp19;
HXDLIN( 360)		Bool _hx_tmp20;
HXDLIN( 360)		if (hx::IsNull( mat2x2a )) {
HXLINE( 360)			_hx_tmp20 = hx::IsNull( mat2x2b );
            		}
            		else {
HXLINE( 360)			_hx_tmp20 = false;
            		}
HXDLIN( 360)		if (!(_hx_tmp20)) {
HXLINE( 360)			Bool _hx_tmp21;
HXDLIN( 360)			Bool _hx_tmp22;
HXDLIN( 360)			Bool _hx_tmp23;
HXDLIN( 360)			Bool _hx_tmp24;
HXDLIN( 360)			if (hx::IsNotNull( mat2x2a )) {
HXLINE( 360)				_hx_tmp24 = hx::IsNotNull( mat2x2b );
            			}
            			else {
HXLINE( 360)				_hx_tmp24 = false;
            			}
HXDLIN( 360)			if (_hx_tmp24) {
HXLINE( 360)				_hx_tmp23 = (mat2x2a->a == mat2x2b->a);
            			}
            			else {
HXLINE( 360)				_hx_tmp23 = false;
            			}
HXDLIN( 360)			if (_hx_tmp23) {
HXLINE( 360)				_hx_tmp22 = (mat2x2a->b == mat2x2b->b);
            			}
            			else {
HXLINE( 360)				_hx_tmp22 = false;
            			}
HXDLIN( 360)			if (_hx_tmp22) {
HXLINE( 360)				_hx_tmp21 = (mat2x2a->c == mat2x2b->c);
            			}
            			else {
HXLINE( 360)				_hx_tmp21 = false;
            			}
HXDLIN( 360)			if (_hx_tmp21) {
HXLINE( 360)				_hx_tmp19 = (mat2x2a->d == mat2x2b->d);
            			}
            			else {
HXLINE( 360)				_hx_tmp19 = false;
            			}
            		}
            		else {
HXLINE( 360)			_hx_tmp19 = true;
            		}
HXDLIN( 360)		this->assertTrue(_hx_tmp19,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),360,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testCopyToFrom",0c,9d,33,cf)));
HXLINE( 362)		HX_VARI(  ::hxmath::math::Matrix3x2Default,mat3x2a) = this->randomMatrix3x2(null());
HXLINE( 363)		HX_VARI(  ::hxmath::math::Matrix3x2Default,mat3x2b) =  ::hxmath::math::Matrix3x2Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXLINE( 364)		{
HXLINE( 364)			HX_VARI_NAME( Int,_g4,"_g") = (int)0;
HXDLIN( 364)			while((_g4 < (int)6)){
HXLINE( 364)				HX_VARI_NAME( Int,i4,"i") = _g4++;
HXDLIN( 364)				{
HXLINE( 364)					 ::Dynamic _hx_tmp25;
HXDLIN( 364)					switch((int)(i4)){
            						case (int)0: {
HXLINE( 364)							_hx_tmp25 = mat3x2a->a;
            						}
            						break;
            						case (int)1: {
HXLINE( 364)							_hx_tmp25 = mat3x2a->b;
            						}
            						break;
            						case (int)2: {
HXLINE( 364)							_hx_tmp25 = mat3x2a->tx;
            						}
            						break;
            						case (int)3: {
HXLINE( 364)							_hx_tmp25 = mat3x2a->c;
            						}
            						break;
            						case (int)4: {
HXLINE( 364)							_hx_tmp25 = mat3x2a->d;
            						}
            						break;
            						case (int)5: {
HXLINE( 364)							_hx_tmp25 = mat3x2a->ty;
            						}
            						break;
            						default:{
HXLINE( 364)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 364)					HX_VARI_NAME( Float,value4,"value") = ( (Float)(_hx_tmp25) );
HXDLIN( 364)					switch((int)(i4)){
            						case (int)0: {
HXLINE( 364)							mat3x2b->a = value4;
            						}
            						break;
            						case (int)1: {
HXLINE( 364)							mat3x2b->b = value4;
            						}
            						break;
            						case (int)2: {
HXLINE( 364)							mat3x2b->tx = value4;
            						}
            						break;
            						case (int)3: {
HXLINE( 364)							mat3x2b->c = value4;
            						}
            						break;
            						case (int)4: {
HXLINE( 364)							mat3x2b->d = value4;
            						}
            						break;
            						case (int)5: {
HXLINE( 364)							mat3x2b->ty = value4;
            						}
            						break;
            						default:{
HXLINE( 364)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXLINE( 365)		Bool _hx_tmp26;
HXDLIN( 365)		Bool _hx_tmp27;
HXDLIN( 365)		if (hx::IsNull( mat3x2a )) {
HXLINE( 365)			_hx_tmp27 = hx::IsNull( mat3x2b );
            		}
            		else {
HXLINE( 365)			_hx_tmp27 = false;
            		}
HXDLIN( 365)		if (!(_hx_tmp27)) {
HXLINE( 365)			Bool _hx_tmp28;
HXDLIN( 365)			Bool _hx_tmp29;
HXDLIN( 365)			Bool _hx_tmp30;
HXDLIN( 365)			Bool _hx_tmp31;
HXDLIN( 365)			Bool _hx_tmp32;
HXDLIN( 365)			Bool _hx_tmp33;
HXDLIN( 365)			if (hx::IsNotNull( mat3x2a )) {
HXLINE( 365)				_hx_tmp33 = hx::IsNotNull( mat3x2b );
            			}
            			else {
HXLINE( 365)				_hx_tmp33 = false;
            			}
HXDLIN( 365)			if (_hx_tmp33) {
HXLINE( 365)				_hx_tmp32 = (mat3x2a->a == mat3x2b->a);
            			}
            			else {
HXLINE( 365)				_hx_tmp32 = false;
            			}
HXDLIN( 365)			if (_hx_tmp32) {
HXLINE( 365)				_hx_tmp31 = (mat3x2a->b == mat3x2b->b);
            			}
            			else {
HXLINE( 365)				_hx_tmp31 = false;
            			}
HXDLIN( 365)			if (_hx_tmp31) {
HXLINE( 365)				_hx_tmp30 = (mat3x2a->c == mat3x2b->c);
            			}
            			else {
HXLINE( 365)				_hx_tmp30 = false;
            			}
HXDLIN( 365)			if (_hx_tmp30) {
HXLINE( 365)				_hx_tmp29 = (mat3x2a->d == mat3x2b->d);
            			}
            			else {
HXLINE( 365)				_hx_tmp29 = false;
            			}
HXDLIN( 365)			if (_hx_tmp29) {
HXLINE( 365)				_hx_tmp28 = (mat3x2a->tx == mat3x2b->tx);
            			}
            			else {
HXLINE( 365)				_hx_tmp28 = false;
            			}
HXDLIN( 365)			if (_hx_tmp28) {
HXLINE( 365)				_hx_tmp26 = (mat3x2a->ty == mat3x2b->ty);
            			}
            			else {
HXLINE( 365)				_hx_tmp26 = false;
            			}
            		}
            		else {
HXLINE( 365)			_hx_tmp26 = true;
            		}
HXDLIN( 365)		this->assertTrue(_hx_tmp26,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),365,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testCopyToFrom",0c,9d,33,cf)));
HXLINE( 367)		HX_VARI(  ::hxmath::math::Matrix3x3Default,mat3x3a) = this->randomMatrix3x3(null());
HXLINE( 368)		HX_VARI(  ::hxmath::math::Matrix3x3Default,mat3x3b) =  ::hxmath::math::Matrix3x3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXLINE( 369)		{
HXLINE( 369)			HX_VARI_NAME( Int,_g5,"_g") = (int)0;
HXDLIN( 369)			while((_g5 < (int)9)){
HXLINE( 369)				HX_VARI_NAME( Int,i5,"i") = _g5++;
HXDLIN( 369)				{
HXLINE( 369)					 ::Dynamic _hx_tmp34;
HXDLIN( 369)					switch((int)(i5)){
            						case (int)0: {
HXLINE( 369)							_hx_tmp34 = mat3x3a->m00;
            						}
            						break;
            						case (int)1: {
HXLINE( 369)							_hx_tmp34 = mat3x3a->m10;
            						}
            						break;
            						case (int)2: {
HXLINE( 369)							_hx_tmp34 = mat3x3a->m20;
            						}
            						break;
            						case (int)3: {
HXLINE( 369)							_hx_tmp34 = mat3x3a->m01;
            						}
            						break;
            						case (int)4: {
HXLINE( 369)							_hx_tmp34 = mat3x3a->m11;
            						}
            						break;
            						case (int)5: {
HXLINE( 369)							_hx_tmp34 = mat3x3a->m21;
            						}
            						break;
            						case (int)6: {
HXLINE( 369)							_hx_tmp34 = mat3x3a->m02;
            						}
            						break;
            						case (int)7: {
HXLINE( 369)							_hx_tmp34 = mat3x3a->m12;
            						}
            						break;
            						case (int)8: {
HXLINE( 369)							_hx_tmp34 = mat3x3a->m22;
            						}
            						break;
            						default:{
HXLINE( 369)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 369)					HX_VARI_NAME( Float,value5,"value") = ( (Float)(_hx_tmp34) );
HXDLIN( 369)					switch((int)(i5)){
            						case (int)0: {
HXLINE( 369)							mat3x3b->m00 = value5;
            						}
            						break;
            						case (int)1: {
HXLINE( 369)							mat3x3b->m10 = value5;
            						}
            						break;
            						case (int)2: {
HXLINE( 369)							mat3x3b->m20 = value5;
            						}
            						break;
            						case (int)3: {
HXLINE( 369)							mat3x3b->m01 = value5;
            						}
            						break;
            						case (int)4: {
HXLINE( 369)							mat3x3b->m11 = value5;
            						}
            						break;
            						case (int)5: {
HXLINE( 369)							mat3x3b->m21 = value5;
            						}
            						break;
            						case (int)6: {
HXLINE( 369)							mat3x3b->m02 = value5;
            						}
            						break;
            						case (int)7: {
HXLINE( 369)							mat3x3b->m12 = value5;
            						}
            						break;
            						case (int)8: {
HXLINE( 369)							mat3x3b->m22 = value5;
            						}
            						break;
            						default:{
HXLINE( 369)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXLINE( 370)		Bool _hx_tmp35;
HXDLIN( 370)		Bool _hx_tmp36;
HXDLIN( 370)		if (hx::IsNull( mat3x3a )) {
HXLINE( 370)			_hx_tmp36 = hx::IsNull( mat3x3b );
            		}
            		else {
HXLINE( 370)			_hx_tmp36 = false;
            		}
HXDLIN( 370)		if (!(_hx_tmp36)) {
HXLINE( 370)			Bool _hx_tmp37;
HXDLIN( 370)			Bool _hx_tmp38;
HXDLIN( 370)			Bool _hx_tmp39;
HXDLIN( 370)			Bool _hx_tmp40;
HXDLIN( 370)			Bool _hx_tmp41;
HXDLIN( 370)			Bool _hx_tmp42;
HXDLIN( 370)			Bool _hx_tmp43;
HXDLIN( 370)			Bool _hx_tmp44;
HXDLIN( 370)			Bool _hx_tmp45;
HXDLIN( 370)			if (hx::IsNotNull( mat3x3a )) {
HXLINE( 370)				_hx_tmp45 = hx::IsNotNull( mat3x3b );
            			}
            			else {
HXLINE( 370)				_hx_tmp45 = false;
            			}
HXDLIN( 370)			if (_hx_tmp45) {
HXLINE( 370)				_hx_tmp44 = (mat3x3a->m00 == mat3x3b->m00);
            			}
            			else {
HXLINE( 370)				_hx_tmp44 = false;
            			}
HXDLIN( 370)			if (_hx_tmp44) {
HXLINE( 370)				_hx_tmp43 = (mat3x3a->m10 == mat3x3b->m10);
            			}
            			else {
HXLINE( 370)				_hx_tmp43 = false;
            			}
HXDLIN( 370)			if (_hx_tmp43) {
HXLINE( 370)				_hx_tmp42 = (mat3x3a->m20 == mat3x3b->m20);
            			}
            			else {
HXLINE( 370)				_hx_tmp42 = false;
            			}
HXDLIN( 370)			if (_hx_tmp42) {
HXLINE( 370)				_hx_tmp41 = (mat3x3a->m01 == mat3x3b->m01);
            			}
            			else {
HXLINE( 370)				_hx_tmp41 = false;
            			}
HXDLIN( 370)			if (_hx_tmp41) {
HXLINE( 370)				_hx_tmp40 = (mat3x3a->m11 == mat3x3b->m11);
            			}
            			else {
HXLINE( 370)				_hx_tmp40 = false;
            			}
HXDLIN( 370)			if (_hx_tmp40) {
HXLINE( 370)				_hx_tmp39 = (mat3x3a->m21 == mat3x3b->m21);
            			}
            			else {
HXLINE( 370)				_hx_tmp39 = false;
            			}
HXDLIN( 370)			if (_hx_tmp39) {
HXLINE( 370)				_hx_tmp38 = (mat3x3a->m02 == mat3x3b->m02);
            			}
            			else {
HXLINE( 370)				_hx_tmp38 = false;
            			}
HXDLIN( 370)			if (_hx_tmp38) {
HXLINE( 370)				_hx_tmp37 = (mat3x3a->m12 == mat3x3b->m12);
            			}
            			else {
HXLINE( 370)				_hx_tmp37 = false;
            			}
HXDLIN( 370)			if (_hx_tmp37) {
HXLINE( 370)				_hx_tmp35 = (mat3x3a->m22 == mat3x3b->m22);
            			}
            			else {
HXLINE( 370)				_hx_tmp35 = false;
            			}
            		}
            		else {
HXLINE( 370)			_hx_tmp35 = true;
            		}
HXDLIN( 370)		this->assertTrue(_hx_tmp35,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),370,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testCopyToFrom",0c,9d,33,cf)));
HXLINE( 372)		HX_VARI(  ::hxmath::math::Matrix4x4Default,mat4x4a) = this->randomMatrix4x4(null());
HXLINE( 373)		HX_VARI(  ::hxmath::math::Matrix4x4Default,mat4x4b) =  ::hxmath::math::Matrix4x4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXLINE( 374)		{
HXLINE( 374)			HX_VARI_NAME( Int,_g6,"_g") = (int)0;
HXDLIN( 374)			while((_g6 < (int)16)){
HXLINE( 374)				HX_VARI_NAME( Int,i6,"i") = _g6++;
HXDLIN( 374)				{
HXLINE( 374)					 ::Dynamic _hx_tmp46;
HXDLIN( 374)					switch((int)(i6)){
            						case (int)0: {
HXLINE( 374)							_hx_tmp46 = mat4x4a->m00;
            						}
            						break;
            						case (int)1: {
HXLINE( 374)							_hx_tmp46 = mat4x4a->m10;
            						}
            						break;
            						case (int)2: {
HXLINE( 374)							_hx_tmp46 = mat4x4a->m20;
            						}
            						break;
            						case (int)3: {
HXLINE( 374)							_hx_tmp46 = mat4x4a->m30;
            						}
            						break;
            						case (int)4: {
HXLINE( 374)							_hx_tmp46 = mat4x4a->m01;
            						}
            						break;
            						case (int)5: {
HXLINE( 374)							_hx_tmp46 = mat4x4a->m11;
            						}
            						break;
            						case (int)6: {
HXLINE( 374)							_hx_tmp46 = mat4x4a->m21;
            						}
            						break;
            						case (int)7: {
HXLINE( 374)							_hx_tmp46 = mat4x4a->m31;
            						}
            						break;
            						case (int)8: {
HXLINE( 374)							_hx_tmp46 = mat4x4a->m02;
            						}
            						break;
            						case (int)9: {
HXLINE( 374)							_hx_tmp46 = mat4x4a->m12;
            						}
            						break;
            						case (int)10: {
HXLINE( 374)							_hx_tmp46 = mat4x4a->m22;
            						}
            						break;
            						case (int)11: {
HXLINE( 374)							_hx_tmp46 = mat4x4a->m32;
            						}
            						break;
            						case (int)12: {
HXLINE( 374)							_hx_tmp46 = mat4x4a->m03;
            						}
            						break;
            						case (int)13: {
HXLINE( 374)							_hx_tmp46 = mat4x4a->m13;
            						}
            						break;
            						case (int)14: {
HXLINE( 374)							_hx_tmp46 = mat4x4a->m23;
            						}
            						break;
            						case (int)15: {
HXLINE( 374)							_hx_tmp46 = mat4x4a->m33;
            						}
            						break;
            						default:{
HXLINE( 374)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 374)					HX_VARI_NAME( Float,value6,"value") = ( (Float)(_hx_tmp46) );
HXDLIN( 374)					switch((int)(i6)){
            						case (int)0: {
HXLINE( 374)							mat4x4b->m00 = value6;
            						}
            						break;
            						case (int)1: {
HXLINE( 374)							mat4x4b->m10 = value6;
            						}
            						break;
            						case (int)2: {
HXLINE( 374)							mat4x4b->m20 = value6;
            						}
            						break;
            						case (int)3: {
HXLINE( 374)							mat4x4b->m30 = value6;
            						}
            						break;
            						case (int)4: {
HXLINE( 374)							mat4x4b->m01 = value6;
            						}
            						break;
            						case (int)5: {
HXLINE( 374)							mat4x4b->m11 = value6;
            						}
            						break;
            						case (int)6: {
HXLINE( 374)							mat4x4b->m21 = value6;
            						}
            						break;
            						case (int)7: {
HXLINE( 374)							mat4x4b->m31 = value6;
            						}
            						break;
            						case (int)8: {
HXLINE( 374)							mat4x4b->m02 = value6;
            						}
            						break;
            						case (int)9: {
HXLINE( 374)							mat4x4b->m12 = value6;
            						}
            						break;
            						case (int)10: {
HXLINE( 374)							mat4x4b->m22 = value6;
            						}
            						break;
            						case (int)11: {
HXLINE( 374)							mat4x4b->m32 = value6;
            						}
            						break;
            						case (int)12: {
HXLINE( 374)							mat4x4b->m03 = value6;
            						}
            						break;
            						case (int)13: {
HXLINE( 374)							mat4x4b->m13 = value6;
            						}
            						break;
            						case (int)14: {
HXLINE( 374)							mat4x4b->m23 = value6;
            						}
            						break;
            						case (int)15: {
HXLINE( 374)							mat4x4b->m33 = value6;
            						}
            						break;
            						default:{
HXLINE( 374)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXLINE( 375)		Bool _hx_tmp47;
HXDLIN( 375)		Bool _hx_tmp48;
HXDLIN( 375)		if (hx::IsNull( mat4x4a )) {
HXLINE( 375)			_hx_tmp48 = hx::IsNull( mat4x4b );
            		}
            		else {
HXLINE( 375)			_hx_tmp48 = false;
            		}
HXDLIN( 375)		if (!(_hx_tmp48)) {
HXLINE( 375)			Bool _hx_tmp49;
HXDLIN( 375)			Bool _hx_tmp50;
HXDLIN( 375)			Bool _hx_tmp51;
HXDLIN( 375)			Bool _hx_tmp52;
HXDLIN( 375)			Bool _hx_tmp53;
HXDLIN( 375)			Bool _hx_tmp54;
HXDLIN( 375)			Bool _hx_tmp55;
HXDLIN( 375)			Bool _hx_tmp56;
HXDLIN( 375)			Bool _hx_tmp57;
HXDLIN( 375)			Bool _hx_tmp58;
HXDLIN( 375)			Bool _hx_tmp59;
HXDLIN( 375)			Bool _hx_tmp60;
HXDLIN( 375)			Bool _hx_tmp61;
HXDLIN( 375)			Bool _hx_tmp62;
HXDLIN( 375)			Bool _hx_tmp63;
HXDLIN( 375)			Bool _hx_tmp64;
HXDLIN( 375)			if (hx::IsNotNull( mat4x4a )) {
HXLINE( 375)				_hx_tmp64 = hx::IsNotNull( mat4x4b );
            			}
            			else {
HXLINE( 375)				_hx_tmp64 = false;
            			}
HXDLIN( 375)			if (_hx_tmp64) {
HXLINE( 375)				_hx_tmp63 = (mat4x4a->m00 == mat4x4b->m00);
            			}
            			else {
HXLINE( 375)				_hx_tmp63 = false;
            			}
HXDLIN( 375)			if (_hx_tmp63) {
HXLINE( 375)				_hx_tmp62 = (mat4x4a->m10 == mat4x4b->m10);
            			}
            			else {
HXLINE( 375)				_hx_tmp62 = false;
            			}
HXDLIN( 375)			if (_hx_tmp62) {
HXLINE( 375)				_hx_tmp61 = (mat4x4a->m20 == mat4x4b->m20);
            			}
            			else {
HXLINE( 375)				_hx_tmp61 = false;
            			}
HXDLIN( 375)			if (_hx_tmp61) {
HXLINE( 375)				_hx_tmp60 = (mat4x4a->m30 == mat4x4b->m30);
            			}
            			else {
HXLINE( 375)				_hx_tmp60 = false;
            			}
HXDLIN( 375)			if (_hx_tmp60) {
HXLINE( 375)				_hx_tmp59 = (mat4x4a->m01 == mat4x4b->m01);
            			}
            			else {
HXLINE( 375)				_hx_tmp59 = false;
            			}
HXDLIN( 375)			if (_hx_tmp59) {
HXLINE( 375)				_hx_tmp58 = (mat4x4a->m11 == mat4x4b->m11);
            			}
            			else {
HXLINE( 375)				_hx_tmp58 = false;
            			}
HXDLIN( 375)			if (_hx_tmp58) {
HXLINE( 375)				_hx_tmp57 = (mat4x4a->m21 == mat4x4b->m21);
            			}
            			else {
HXLINE( 375)				_hx_tmp57 = false;
            			}
HXDLIN( 375)			if (_hx_tmp57) {
HXLINE( 375)				_hx_tmp56 = (mat4x4a->m31 == mat4x4b->m31);
            			}
            			else {
HXLINE( 375)				_hx_tmp56 = false;
            			}
HXDLIN( 375)			if (_hx_tmp56) {
HXLINE( 375)				_hx_tmp55 = (mat4x4a->m02 == mat4x4b->m02);
            			}
            			else {
HXLINE( 375)				_hx_tmp55 = false;
            			}
HXDLIN( 375)			if (_hx_tmp55) {
HXLINE( 375)				_hx_tmp54 = (mat4x4a->m12 == mat4x4b->m12);
            			}
            			else {
HXLINE( 375)				_hx_tmp54 = false;
            			}
HXDLIN( 375)			if (_hx_tmp54) {
HXLINE( 375)				_hx_tmp53 = (mat4x4a->m22 == mat4x4b->m22);
            			}
            			else {
HXLINE( 375)				_hx_tmp53 = false;
            			}
HXDLIN( 375)			if (_hx_tmp53) {
HXLINE( 375)				_hx_tmp52 = (mat4x4a->m32 == mat4x4b->m32);
            			}
            			else {
HXLINE( 375)				_hx_tmp52 = false;
            			}
HXDLIN( 375)			if (_hx_tmp52) {
HXLINE( 375)				_hx_tmp51 = (mat4x4a->m03 == mat4x4b->m03);
            			}
            			else {
HXLINE( 375)				_hx_tmp51 = false;
            			}
HXDLIN( 375)			if (_hx_tmp51) {
HXLINE( 375)				_hx_tmp50 = (mat4x4a->m13 == mat4x4b->m13);
            			}
            			else {
HXLINE( 375)				_hx_tmp50 = false;
            			}
HXDLIN( 375)			if (_hx_tmp50) {
HXLINE( 375)				_hx_tmp49 = (mat4x4a->m23 == mat4x4b->m23);
            			}
            			else {
HXLINE( 375)				_hx_tmp49 = false;
            			}
HXDLIN( 375)			if (_hx_tmp49) {
HXLINE( 375)				_hx_tmp47 = (mat4x4a->m33 == mat4x4b->m33);
            			}
            			else {
HXLINE( 375)				_hx_tmp47 = false;
            			}
            		}
            		else {
HXLINE( 375)			_hx_tmp47 = true;
            		}
HXDLIN( 375)		this->assertTrue(_hx_tmp47,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),375,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testCopyToFrom",0c,9d,33,cf)));
HXLINE( 377)		HX_VARI(  ::hxmath::math::QuaternionDefault,quatA) = this->randomQuaternion(null());
HXLINE( 378)		HX_VARI(  ::hxmath::math::QuaternionDefault,quatB) =  ::hxmath::math::QuaternionDefault_obj::__new((int)0,(int)0,(int)0,(int)0);
HXLINE( 379)		{
HXLINE( 379)			HX_VARI_NAME( Int,_g7,"_g") = (int)0;
HXDLIN( 379)			while((_g7 < (int)4)){
HXLINE( 379)				HX_VARI_NAME( Int,i7,"i") = _g7++;
HXDLIN( 379)				{
HXLINE( 379)					 ::Dynamic _hx_tmp65;
HXDLIN( 379)					switch((int)(i7)){
            						case (int)0: {
HXLINE( 379)							_hx_tmp65 = quatA->s;
            						}
            						break;
            						case (int)1: {
HXLINE( 379)							_hx_tmp65 = quatA->x;
            						}
            						break;
            						case (int)2: {
HXLINE( 379)							_hx_tmp65 = quatA->y;
            						}
            						break;
            						case (int)3: {
HXLINE( 379)							_hx_tmp65 = quatA->z;
            						}
            						break;
            						default:{
HXLINE( 379)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 379)					HX_VARI_NAME( Float,value7,"value") = ( (Float)(_hx_tmp65) );
HXDLIN( 379)					switch((int)(i7)){
            						case (int)0: {
HXLINE( 379)							quatB->s = value7;
            						}
            						break;
            						case (int)1: {
HXLINE( 379)							quatB->x = value7;
            						}
            						break;
            						case (int)2: {
HXLINE( 379)							quatB->y = value7;
            						}
            						break;
            						case (int)3: {
HXLINE( 379)							quatB->z = value7;
            						}
            						break;
            						default:{
HXLINE( 379)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXLINE( 380)		Bool _hx_tmp66;
HXDLIN( 380)		Bool _hx_tmp67;
HXDLIN( 380)		if (hx::IsNull( quatA )) {
HXLINE( 380)			_hx_tmp67 = hx::IsNull( quatB );
            		}
            		else {
HXLINE( 380)			_hx_tmp67 = false;
            		}
HXDLIN( 380)		if (!(_hx_tmp67)) {
HXLINE( 380)			Bool _hx_tmp68;
HXDLIN( 380)			Bool _hx_tmp69;
HXDLIN( 380)			Bool _hx_tmp70;
HXDLIN( 380)			Bool _hx_tmp71;
HXDLIN( 380)			if (hx::IsNotNull( quatA )) {
HXLINE( 380)				_hx_tmp71 = hx::IsNotNull( quatB );
            			}
            			else {
HXLINE( 380)				_hx_tmp71 = false;
            			}
HXDLIN( 380)			if (_hx_tmp71) {
HXLINE( 380)				_hx_tmp70 = (quatA->s == quatB->s);
            			}
            			else {
HXLINE( 380)				_hx_tmp70 = false;
            			}
HXDLIN( 380)			if (_hx_tmp70) {
HXLINE( 380)				_hx_tmp69 = (quatA->x == quatB->x);
            			}
            			else {
HXLINE( 380)				_hx_tmp69 = false;
            			}
HXDLIN( 380)			if (_hx_tmp69) {
HXLINE( 380)				_hx_tmp68 = (quatA->y == quatB->y);
            			}
            			else {
HXLINE( 380)				_hx_tmp68 = false;
            			}
HXDLIN( 380)			if (_hx_tmp68) {
HXLINE( 380)				_hx_tmp66 = (quatA->z == quatB->z);
            			}
            			else {
HXLINE( 380)				_hx_tmp66 = false;
            			}
            		}
            		else {
HXLINE( 380)			_hx_tmp66 = true;
            		}
HXDLIN( 380)		this->assertTrue(_hx_tmp66,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),380,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testCopyToFrom",0c,9d,33,cf)));
HXLINE( 382)		HX_VARI(  ::hxmath::math::IntVector2Default,intVec2a) = this->randomIntVector2();
HXLINE( 383)		HX_VARI(  ::hxmath::math::IntVector2Default,intVec2b) = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)0,(int)0);
HXLINE( 384)		{
HXLINE( 384)			HX_VARI_NAME( Int,_g8,"_g") = (int)0;
HXDLIN( 384)			while((_g8 < (int)2)){
HXLINE( 384)				HX_VARI_NAME( Int,i8,"i") = _g8++;
HXDLIN( 384)				{
HXLINE( 384)					 ::Dynamic _hx_tmp72;
HXDLIN( 384)					switch((int)(i8)){
            						case (int)0: {
HXLINE( 384)							_hx_tmp72 = intVec2a->x;
            						}
            						break;
            						case (int)1: {
HXLINE( 384)							_hx_tmp72 = intVec2a->y;
            						}
            						break;
            						default:{
HXLINE( 384)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 384)					HX_VARI_NAME( Int,value8,"value") = ( (Int)(_hx_tmp72) );
HXDLIN( 384)					switch((int)(i8)){
            						case (int)0: {
HXLINE( 384)							intVec2b->x = value8;
            						}
            						break;
            						case (int)1: {
HXLINE( 384)							intVec2b->y = value8;
            						}
            						break;
            						default:{
HXLINE( 384)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXLINE( 385)		Bool _hx_tmp73;
HXDLIN( 385)		Bool _hx_tmp74;
HXDLIN( 385)		if (hx::IsNull( intVec2a )) {
HXLINE( 385)			_hx_tmp74 = hx::IsNull( intVec2b );
            		}
            		else {
HXLINE( 385)			_hx_tmp74 = false;
            		}
HXDLIN( 385)		if (!(_hx_tmp74)) {
HXLINE( 385)			Bool _hx_tmp75;
HXDLIN( 385)			Bool _hx_tmp76;
HXDLIN( 385)			if (hx::IsNotNull( intVec2a )) {
HXLINE( 385)				_hx_tmp76 = hx::IsNotNull( intVec2b );
            			}
            			else {
HXLINE( 385)				_hx_tmp76 = false;
            			}
HXDLIN( 385)			if (_hx_tmp76) {
HXLINE( 385)				_hx_tmp75 = (intVec2a->x == intVec2b->x);
            			}
            			else {
HXLINE( 385)				_hx_tmp75 = false;
            			}
HXDLIN( 385)			if (_hx_tmp75) {
HXLINE( 385)				_hx_tmp73 = (intVec2a->y == intVec2b->y);
            			}
            			else {
HXLINE( 385)				_hx_tmp73 = false;
            			}
            		}
            		else {
HXLINE( 385)			_hx_tmp73 = true;
            		}
HXDLIN( 385)		this->assertTrue(_hx_tmp73,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),385,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testCopyToFrom",0c,9d,33,cf)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStructures_obj,testCopyToFrom,(void))

void TestStructures_obj::testRowColAccessors(){
            	HX_STACK_FRAME("test.TestStructures","testRowColAccessors",0x7e0b7394,"test.TestStructures.testRowColAccessors","test/TestStructures.hx",389,0x1c38d1cf)
            	HX_STACK_THIS(this)
HXLINE( 390)		HX_VARI( ::Array< ::Dynamic>,basis2) = ::Array_obj< ::Dynamic>::__new(2)->init(0, ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)0.0)))->init(1, ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)1.0)));
HXLINE( 392)		{
HXLINE( 392)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 392)			while((_g < (int)2)){
HXLINE( 392)				HX_VARI( Int,i) = _g++;
HXLINE( 394)				HX_VARI(  ::hxmath::math::Matrix2x2Default,self) =  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN( 394)				HX_VAR(  ::hxmath::math::Vector2Default,a);
HXDLIN( 394)				switch((int)(i)){
            					case (int)0: {
HXLINE( 394)						a =  ::hxmath::math::Vector2Default_obj::__new(self->a,self->c);
            					}
            					break;
            					case (int)1: {
HXLINE( 394)						a =  ::hxmath::math::Vector2Default_obj::__new(self->b,self->d);
            					}
            					break;
            					default:{
HXLINE( 394)						HX_STACK_DO_THROW(HX_("Invalid column",ff,3c,03,94));
            					}
            				}
HXDLIN( 394)				HX_VARI(  ::hxmath::math::Vector2Default,b) = basis2->__get(i).StaticCast<  ::hxmath::math::Vector2Default >();
HXDLIN( 394)				Bool _hx_tmp;
HXDLIN( 394)				Bool _hx_tmp1;
HXDLIN( 394)				if (hx::IsNull( a )) {
HXLINE( 394)					_hx_tmp1 = hx::IsNull( b );
            				}
            				else {
HXLINE( 394)					_hx_tmp1 = false;
            				}
HXDLIN( 394)				if (!(_hx_tmp1)) {
HXLINE( 394)					Bool _hx_tmp2;
HXDLIN( 394)					Bool _hx_tmp3;
HXDLIN( 394)					if (hx::IsNotNull( a )) {
HXLINE( 394)						_hx_tmp3 = hx::IsNotNull( b );
            					}
            					else {
HXLINE( 394)						_hx_tmp3 = false;
            					}
HXDLIN( 394)					if (_hx_tmp3) {
HXLINE( 394)						_hx_tmp2 = (a->x == b->x);
            					}
            					else {
HXLINE( 394)						_hx_tmp2 = false;
            					}
HXDLIN( 394)					if (_hx_tmp2) {
HXLINE( 394)						_hx_tmp = (a->y == b->y);
            					}
            					else {
HXLINE( 394)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 394)					_hx_tmp = true;
            				}
HXDLIN( 394)				this->assertTrue(_hx_tmp,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),394,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testRowColAccessors",74,d7,f6,0b)));
HXLINE( 395)				HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,self1,"self") =  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN( 395)				HX_VAR_NAME(  ::hxmath::math::Vector2Default,a1,"a");
HXDLIN( 395)				switch((int)(i)){
            					case (int)0: {
HXLINE( 395)						a1 =  ::hxmath::math::Vector2Default_obj::__new(self1->a,self1->b);
            					}
            					break;
            					case (int)1: {
HXLINE( 395)						a1 =  ::hxmath::math::Vector2Default_obj::__new(self1->c,self1->d);
            					}
            					break;
            					default:{
HXLINE( 395)						HX_STACK_DO_THROW(HX_("Invalid row",51,70,e6,76));
            					}
            				}
HXDLIN( 395)				HX_VARI_NAME(  ::hxmath::math::Vector2Default,b1,"b") = basis2->__get(i).StaticCast<  ::hxmath::math::Vector2Default >();
HXDLIN( 395)				Bool _hx_tmp4;
HXDLIN( 395)				Bool _hx_tmp5;
HXDLIN( 395)				if (hx::IsNull( a1 )) {
HXLINE( 395)					_hx_tmp5 = hx::IsNull( b1 );
            				}
            				else {
HXLINE( 395)					_hx_tmp5 = false;
            				}
HXDLIN( 395)				if (!(_hx_tmp5)) {
HXLINE( 395)					Bool _hx_tmp6;
HXDLIN( 395)					Bool _hx_tmp7;
HXDLIN( 395)					if (hx::IsNotNull( a1 )) {
HXLINE( 395)						_hx_tmp7 = hx::IsNotNull( b1 );
            					}
            					else {
HXLINE( 395)						_hx_tmp7 = false;
            					}
HXDLIN( 395)					if (_hx_tmp7) {
HXLINE( 395)						_hx_tmp6 = (a1->x == b1->x);
            					}
            					else {
HXLINE( 395)						_hx_tmp6 = false;
            					}
HXDLIN( 395)					if (_hx_tmp6) {
HXLINE( 395)						_hx_tmp4 = (a1->y == b1->y);
            					}
            					else {
HXLINE( 395)						_hx_tmp4 = false;
            					}
            				}
            				else {
HXLINE( 395)					_hx_tmp4 = true;
            				}
HXDLIN( 395)				this->assertTrue(_hx_tmp4,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),395,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testRowColAccessors",74,d7,f6,0b)));
            			}
            		}
HXLINE( 398)		HX_VARI( ::Array< ::Dynamic>,basis32Rows) = ::Array_obj< ::Dynamic>::__new(2)->init(0, ::hxmath::math::Vector3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0)))->init(1, ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)1.0),((Float)0.0)));
HXLINE( 399)		HX_VARI( ::Array< ::Dynamic>,basis32Cols) = ::Array_obj< ::Dynamic>::__new(3)->init(0, ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)0.0)))->init(1, ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)1.0)))->init(2, ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)0.0)));
HXLINE( 401)		{
HXLINE( 401)			HX_VARI_NAME( Int,_g1,"_g") = (int)0;
HXDLIN( 401)			while((_g1 < (int)2)){
HXLINE( 401)				HX_VARI_NAME( Int,i1,"i") = _g1++;
HXLINE( 403)				HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,self2,"self") =  ::hxmath::math::Matrix3x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0));
HXDLIN( 403)				HX_VAR_NAME(  ::hxmath::math::Vector3Default,a2,"a");
HXDLIN( 403)				switch((int)(i1)){
            					case (int)0: {
HXLINE( 403)						a2 =  ::hxmath::math::Vector3Default_obj::__new(self2->a,self2->b,self2->tx);
            					}
            					break;
            					case (int)1: {
HXLINE( 403)						a2 =  ::hxmath::math::Vector3Default_obj::__new(self2->c,self2->d,self2->ty);
            					}
            					break;
            					default:{
HXLINE( 403)						HX_STACK_DO_THROW(HX_("Invalid row",51,70,e6,76));
            					}
            				}
HXDLIN( 403)				HX_VARI_NAME(  ::hxmath::math::Vector3Default,b2,"b") = basis32Rows->__get(i1).StaticCast<  ::hxmath::math::Vector3Default >();
HXDLIN( 403)				Bool _hx_tmp8;
HXDLIN( 403)				Bool _hx_tmp9;
HXDLIN( 403)				if (hx::IsNull( a2 )) {
HXLINE( 403)					_hx_tmp9 = hx::IsNull( b2 );
            				}
            				else {
HXLINE( 403)					_hx_tmp9 = false;
            				}
HXDLIN( 403)				if (!(_hx_tmp9)) {
HXLINE( 403)					Bool _hx_tmp10;
HXDLIN( 403)					Bool _hx_tmp11;
HXDLIN( 403)					Bool _hx_tmp12;
HXDLIN( 403)					if (hx::IsNotNull( a2 )) {
HXLINE( 403)						_hx_tmp12 = hx::IsNotNull( b2 );
            					}
            					else {
HXLINE( 403)						_hx_tmp12 = false;
            					}
HXDLIN( 403)					if (_hx_tmp12) {
HXLINE( 403)						_hx_tmp11 = (a2->x == b2->x);
            					}
            					else {
HXLINE( 403)						_hx_tmp11 = false;
            					}
HXDLIN( 403)					if (_hx_tmp11) {
HXLINE( 403)						_hx_tmp10 = (a2->y == b2->y);
            					}
            					else {
HXLINE( 403)						_hx_tmp10 = false;
            					}
HXDLIN( 403)					if (_hx_tmp10) {
HXLINE( 403)						_hx_tmp8 = (a2->z == b2->z);
            					}
            					else {
HXLINE( 403)						_hx_tmp8 = false;
            					}
            				}
            				else {
HXLINE( 403)					_hx_tmp8 = true;
            				}
HXDLIN( 403)				this->assertTrue(_hx_tmp8,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),403,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testRowColAccessors",74,d7,f6,0b)));
            			}
            		}
HXLINE( 406)		{
HXLINE( 406)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 406)			while((_g2 < (int)3)){
HXLINE( 406)				HX_VARI_NAME( Int,i2,"i") = _g2++;
HXLINE( 408)				HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,self3,"self") =  ::hxmath::math::Matrix3x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0));
HXDLIN( 408)				HX_VAR_NAME(  ::hxmath::math::Vector2Default,a3,"a");
HXDLIN( 408)				switch((int)(i2)){
            					case (int)0: {
HXLINE( 408)						a3 =  ::hxmath::math::Vector2Default_obj::__new(self3->a,self3->c);
            					}
            					break;
            					case (int)1: {
HXLINE( 408)						a3 =  ::hxmath::math::Vector2Default_obj::__new(self3->b,self3->d);
            					}
            					break;
            					case (int)2: {
HXLINE( 408)						a3 =  ::hxmath::math::Vector2Default_obj::__new(self3->tx,self3->ty);
            					}
            					break;
            					default:{
HXLINE( 408)						HX_STACK_DO_THROW(HX_("Invalid column",ff,3c,03,94));
            					}
            				}
HXDLIN( 408)				HX_VARI_NAME(  ::hxmath::math::Vector2Default,b3,"b") = basis32Cols->__get(i2).StaticCast<  ::hxmath::math::Vector2Default >();
HXDLIN( 408)				Bool _hx_tmp13;
HXDLIN( 408)				Bool _hx_tmp14;
HXDLIN( 408)				if (hx::IsNull( a3 )) {
HXLINE( 408)					_hx_tmp14 = hx::IsNull( b3 );
            				}
            				else {
HXLINE( 408)					_hx_tmp14 = false;
            				}
HXDLIN( 408)				if (!(_hx_tmp14)) {
HXLINE( 408)					Bool _hx_tmp15;
HXDLIN( 408)					Bool _hx_tmp16;
HXDLIN( 408)					if (hx::IsNotNull( a3 )) {
HXLINE( 408)						_hx_tmp16 = hx::IsNotNull( b3 );
            					}
            					else {
HXLINE( 408)						_hx_tmp16 = false;
            					}
HXDLIN( 408)					if (_hx_tmp16) {
HXLINE( 408)						_hx_tmp15 = (a3->x == b3->x);
            					}
            					else {
HXLINE( 408)						_hx_tmp15 = false;
            					}
HXDLIN( 408)					if (_hx_tmp15) {
HXLINE( 408)						_hx_tmp13 = (a3->y == b3->y);
            					}
            					else {
HXLINE( 408)						_hx_tmp13 = false;
            					}
            				}
            				else {
HXLINE( 408)					_hx_tmp13 = true;
            				}
HXDLIN( 408)				this->assertTrue(_hx_tmp13,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),408,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testRowColAccessors",74,d7,f6,0b)));
            			}
            		}
HXLINE( 411)		HX_VARI( ::Array< ::Dynamic>,basis3) = ::Array_obj< ::Dynamic>::__new(3)->init(0, ::hxmath::math::Vector3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0)))->init(1, ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)1.0),((Float)0.0)))->init(2, ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)1.0)));
HXLINE( 413)		{
HXLINE( 413)			HX_VARI_NAME( Int,_g3,"_g") = (int)0;
HXDLIN( 413)			while((_g3 < (int)3)){
HXLINE( 413)				HX_VARI_NAME( Int,i3,"i") = _g3++;
HXLINE( 415)				HX_VARI_NAME(  ::hxmath::math::Matrix3x3Default,self4,"self") =  ::hxmath::math::Matrix3x3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN( 415)				HX_VAR_NAME(  ::hxmath::math::Vector3Default,a4,"a");
HXDLIN( 415)				switch((int)(i3)){
            					case (int)0: {
HXLINE( 415)						a4 =  ::hxmath::math::Vector3Default_obj::__new(self4->m00,self4->m01,self4->m02);
            					}
            					break;
            					case (int)1: {
HXLINE( 415)						a4 =  ::hxmath::math::Vector3Default_obj::__new(self4->m10,self4->m11,self4->m12);
            					}
            					break;
            					case (int)2: {
HXLINE( 415)						a4 =  ::hxmath::math::Vector3Default_obj::__new(self4->m20,self4->m21,self4->m22);
            					}
            					break;
            					default:{
HXLINE( 415)						HX_STACK_DO_THROW(HX_("Invalid column",ff,3c,03,94));
            					}
            				}
HXDLIN( 415)				HX_VARI_NAME(  ::hxmath::math::Vector3Default,b4,"b") = basis3->__get(i3).StaticCast<  ::hxmath::math::Vector3Default >();
HXDLIN( 415)				Bool _hx_tmp17;
HXDLIN( 415)				Bool _hx_tmp18;
HXDLIN( 415)				if (hx::IsNull( a4 )) {
HXLINE( 415)					_hx_tmp18 = hx::IsNull( b4 );
            				}
            				else {
HXLINE( 415)					_hx_tmp18 = false;
            				}
HXDLIN( 415)				if (!(_hx_tmp18)) {
HXLINE( 415)					Bool _hx_tmp19;
HXDLIN( 415)					Bool _hx_tmp20;
HXDLIN( 415)					Bool _hx_tmp21;
HXDLIN( 415)					if (hx::IsNotNull( a4 )) {
HXLINE( 415)						_hx_tmp21 = hx::IsNotNull( b4 );
            					}
            					else {
HXLINE( 415)						_hx_tmp21 = false;
            					}
HXDLIN( 415)					if (_hx_tmp21) {
HXLINE( 415)						_hx_tmp20 = (a4->x == b4->x);
            					}
            					else {
HXLINE( 415)						_hx_tmp20 = false;
            					}
HXDLIN( 415)					if (_hx_tmp20) {
HXLINE( 415)						_hx_tmp19 = (a4->y == b4->y);
            					}
            					else {
HXLINE( 415)						_hx_tmp19 = false;
            					}
HXDLIN( 415)					if (_hx_tmp19) {
HXLINE( 415)						_hx_tmp17 = (a4->z == b4->z);
            					}
            					else {
HXLINE( 415)						_hx_tmp17 = false;
            					}
            				}
            				else {
HXLINE( 415)					_hx_tmp17 = true;
            				}
HXDLIN( 415)				this->assertTrue(_hx_tmp17,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),415,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testRowColAccessors",74,d7,f6,0b)));
HXLINE( 416)				HX_VARI_NAME(  ::hxmath::math::Matrix3x3Default,self5,"self") =  ::hxmath::math::Matrix3x3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN( 416)				HX_VAR_NAME(  ::hxmath::math::Vector3Default,a5,"a");
HXDLIN( 416)				switch((int)(i3)){
            					case (int)0: {
HXLINE( 416)						a5 =  ::hxmath::math::Vector3Default_obj::__new(self5->m00,self5->m10,self5->m20);
            					}
            					break;
            					case (int)1: {
HXLINE( 416)						a5 =  ::hxmath::math::Vector3Default_obj::__new(self5->m01,self5->m11,self5->m21);
            					}
            					break;
            					case (int)2: {
HXLINE( 416)						a5 =  ::hxmath::math::Vector3Default_obj::__new(self5->m02,self5->m12,self5->m22);
            					}
            					break;
            					default:{
HXLINE( 416)						HX_STACK_DO_THROW(HX_("Invalid row",51,70,e6,76));
            					}
            				}
HXDLIN( 416)				HX_VARI_NAME(  ::hxmath::math::Vector3Default,b5,"b") = basis3->__get(i3).StaticCast<  ::hxmath::math::Vector3Default >();
HXDLIN( 416)				Bool _hx_tmp22;
HXDLIN( 416)				Bool _hx_tmp23;
HXDLIN( 416)				if (hx::IsNull( a5 )) {
HXLINE( 416)					_hx_tmp23 = hx::IsNull( b5 );
            				}
            				else {
HXLINE( 416)					_hx_tmp23 = false;
            				}
HXDLIN( 416)				if (!(_hx_tmp23)) {
HXLINE( 416)					Bool _hx_tmp24;
HXDLIN( 416)					Bool _hx_tmp25;
HXDLIN( 416)					Bool _hx_tmp26;
HXDLIN( 416)					if (hx::IsNotNull( a5 )) {
HXLINE( 416)						_hx_tmp26 = hx::IsNotNull( b5 );
            					}
            					else {
HXLINE( 416)						_hx_tmp26 = false;
            					}
HXDLIN( 416)					if (_hx_tmp26) {
HXLINE( 416)						_hx_tmp25 = (a5->x == b5->x);
            					}
            					else {
HXLINE( 416)						_hx_tmp25 = false;
            					}
HXDLIN( 416)					if (_hx_tmp25) {
HXLINE( 416)						_hx_tmp24 = (a5->y == b5->y);
            					}
            					else {
HXLINE( 416)						_hx_tmp24 = false;
            					}
HXDLIN( 416)					if (_hx_tmp24) {
HXLINE( 416)						_hx_tmp22 = (a5->z == b5->z);
            					}
            					else {
HXLINE( 416)						_hx_tmp22 = false;
            					}
            				}
            				else {
HXLINE( 416)					_hx_tmp22 = true;
            				}
HXDLIN( 416)				this->assertTrue(_hx_tmp22,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),416,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testRowColAccessors",74,d7,f6,0b)));
            			}
            		}
HXLINE( 419)		HX_VARI( ::Array< ::Dynamic>,basis4) = ::Array_obj< ::Dynamic>::__new(4)->init(0, ::hxmath::math::Vector4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0)))->init(1, ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0)))->init(2, ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0)))->init(3, ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0)));
HXLINE( 421)		{
HXLINE( 421)			HX_VARI_NAME( Int,_g4,"_g") = (int)0;
HXDLIN( 421)			while((_g4 < (int)4)){
HXLINE( 421)				HX_VARI_NAME( Int,i4,"i") = _g4++;
HXLINE( 423)				HX_VARI_NAME(  ::hxmath::math::Matrix4x4Default,self6,"self") =  ::hxmath::math::Matrix4x4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN( 423)				HX_VAR_NAME(  ::hxmath::math::Vector4Default,a6,"a");
HXDLIN( 423)				switch((int)(i4)){
            					case (int)0: {
HXLINE( 423)						a6 =  ::hxmath::math::Vector4Default_obj::__new(self6->m00,self6->m01,self6->m02,self6->m03);
            					}
            					break;
            					case (int)1: {
HXLINE( 423)						a6 =  ::hxmath::math::Vector4Default_obj::__new(self6->m10,self6->m11,self6->m12,self6->m13);
            					}
            					break;
            					case (int)2: {
HXLINE( 423)						a6 =  ::hxmath::math::Vector4Default_obj::__new(self6->m20,self6->m21,self6->m22,self6->m23);
            					}
            					break;
            					case (int)3: {
HXLINE( 423)						a6 =  ::hxmath::math::Vector4Default_obj::__new(self6->m30,self6->m31,self6->m32,self6->m33);
            					}
            					break;
            					default:{
HXLINE( 423)						HX_STACK_DO_THROW(HX_("Invalid column",ff,3c,03,94));
            					}
            				}
HXDLIN( 423)				HX_VARI_NAME(  ::hxmath::math::Vector4Default,b6,"b") = basis4->__get(i4).StaticCast<  ::hxmath::math::Vector4Default >();
HXDLIN( 423)				Bool _hx_tmp27;
HXDLIN( 423)				Bool _hx_tmp28;
HXDLIN( 423)				if (hx::IsNull( a6 )) {
HXLINE( 423)					_hx_tmp28 = hx::IsNull( b6 );
            				}
            				else {
HXLINE( 423)					_hx_tmp28 = false;
            				}
HXDLIN( 423)				if (!(_hx_tmp28)) {
HXLINE( 423)					Bool _hx_tmp29;
HXDLIN( 423)					Bool _hx_tmp30;
HXDLIN( 423)					Bool _hx_tmp31;
HXDLIN( 423)					Bool _hx_tmp32;
HXDLIN( 423)					if (hx::IsNotNull( a6 )) {
HXLINE( 423)						_hx_tmp32 = hx::IsNotNull( b6 );
            					}
            					else {
HXLINE( 423)						_hx_tmp32 = false;
            					}
HXDLIN( 423)					if (_hx_tmp32) {
HXLINE( 423)						_hx_tmp31 = (a6->x == b6->x);
            					}
            					else {
HXLINE( 423)						_hx_tmp31 = false;
            					}
HXDLIN( 423)					if (_hx_tmp31) {
HXLINE( 423)						_hx_tmp30 = (a6->y == b6->y);
            					}
            					else {
HXLINE( 423)						_hx_tmp30 = false;
            					}
HXDLIN( 423)					if (_hx_tmp30) {
HXLINE( 423)						_hx_tmp29 = (a6->z == b6->z);
            					}
            					else {
HXLINE( 423)						_hx_tmp29 = false;
            					}
HXDLIN( 423)					if (_hx_tmp29) {
HXLINE( 423)						_hx_tmp27 = (a6->w == b6->w);
            					}
            					else {
HXLINE( 423)						_hx_tmp27 = false;
            					}
            				}
            				else {
HXLINE( 423)					_hx_tmp27 = true;
            				}
HXDLIN( 423)				this->assertTrue(_hx_tmp27,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),423,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testRowColAccessors",74,d7,f6,0b)));
HXLINE( 424)				HX_VARI_NAME(  ::hxmath::math::Matrix4x4Default,self7,"self") =  ::hxmath::math::Matrix4x4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN( 424)				HX_VAR_NAME(  ::hxmath::math::Vector4Default,a7,"a");
HXDLIN( 424)				switch((int)(i4)){
            					case (int)0: {
HXLINE( 424)						a7 =  ::hxmath::math::Vector4Default_obj::__new(self7->m00,self7->m10,self7->m20,self7->m30);
            					}
            					break;
            					case (int)1: {
HXLINE( 424)						a7 =  ::hxmath::math::Vector4Default_obj::__new(self7->m01,self7->m11,self7->m21,self7->m31);
            					}
            					break;
            					case (int)2: {
HXLINE( 424)						a7 =  ::hxmath::math::Vector4Default_obj::__new(self7->m02,self7->m12,self7->m22,self7->m32);
            					}
            					break;
            					case (int)3: {
HXLINE( 424)						a7 =  ::hxmath::math::Vector4Default_obj::__new(self7->m03,self7->m13,self7->m23,self7->m33);
            					}
            					break;
            					default:{
HXLINE( 424)						HX_STACK_DO_THROW(HX_("Invalid row",51,70,e6,76));
            					}
            				}
HXDLIN( 424)				HX_VARI_NAME(  ::hxmath::math::Vector4Default,b7,"b") = basis4->__get(i4).StaticCast<  ::hxmath::math::Vector4Default >();
HXDLIN( 424)				Bool _hx_tmp33;
HXDLIN( 424)				Bool _hx_tmp34;
HXDLIN( 424)				if (hx::IsNull( a7 )) {
HXLINE( 424)					_hx_tmp34 = hx::IsNull( b7 );
            				}
            				else {
HXLINE( 424)					_hx_tmp34 = false;
            				}
HXDLIN( 424)				if (!(_hx_tmp34)) {
HXLINE( 424)					Bool _hx_tmp35;
HXDLIN( 424)					Bool _hx_tmp36;
HXDLIN( 424)					Bool _hx_tmp37;
HXDLIN( 424)					Bool _hx_tmp38;
HXDLIN( 424)					if (hx::IsNotNull( a7 )) {
HXLINE( 424)						_hx_tmp38 = hx::IsNotNull( b7 );
            					}
            					else {
HXLINE( 424)						_hx_tmp38 = false;
            					}
HXDLIN( 424)					if (_hx_tmp38) {
HXLINE( 424)						_hx_tmp37 = (a7->x == b7->x);
            					}
            					else {
HXLINE( 424)						_hx_tmp37 = false;
            					}
HXDLIN( 424)					if (_hx_tmp37) {
HXLINE( 424)						_hx_tmp36 = (a7->y == b7->y);
            					}
            					else {
HXLINE( 424)						_hx_tmp36 = false;
            					}
HXDLIN( 424)					if (_hx_tmp36) {
HXLINE( 424)						_hx_tmp35 = (a7->z == b7->z);
            					}
            					else {
HXLINE( 424)						_hx_tmp35 = false;
            					}
HXDLIN( 424)					if (_hx_tmp35) {
HXLINE( 424)						_hx_tmp33 = (a7->w == b7->w);
            					}
            					else {
HXLINE( 424)						_hx_tmp33 = false;
            					}
            				}
            				else {
HXLINE( 424)					_hx_tmp33 = true;
            				}
HXDLIN( 424)				this->assertTrue(_hx_tmp33,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),424,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testRowColAccessors",74,d7,f6,0b)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStructures_obj,testRowColAccessors,(void))

void TestStructures_obj::testEqualsNullShouldNotThrow(){
            	HX_STACK_FRAME("test.TestStructures","testEqualsNullShouldNotThrow",0x057b87be,"test.TestStructures.testEqualsNullShouldNotThrow","test/TestStructures.hx",432,0x1c38d1cf)
            	HX_STACK_THIS(this)
HXLINE( 433)		this->assertTrue(hx::IsNotNull(  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)0.0)) ),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),433,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testEqualsNullShouldNotThrow",de,a7,b4,ef)));
HXLINE( 434)		this->assertTrue(hx::IsNotNull(  ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0)) ),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),434,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testEqualsNullShouldNotThrow",de,a7,b4,ef)));
HXLINE( 435)		this->assertTrue(hx::IsNotNull(  ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0)) ),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),435,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testEqualsNullShouldNotThrow",de,a7,b4,ef)));
HXLINE( 436)		this->assertTrue(hx::IsNotNull(  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0)) ),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),436,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testEqualsNullShouldNotThrow",de,a7,b4,ef)));
HXLINE( 437)		this->assertTrue(hx::IsNotNull(  ::hxmath::math::Matrix3x2Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0)) ),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),437,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testEqualsNullShouldNotThrow",de,a7,b4,ef)));
HXLINE( 438)		this->assertTrue(hx::IsNotNull(  ::hxmath::math::Matrix3x3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0)) ),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),438,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testEqualsNullShouldNotThrow",de,a7,b4,ef)));
HXLINE( 439)		this->assertTrue(hx::IsNotNull(  ::hxmath::math::Matrix4x4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0)) ),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),439,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testEqualsNullShouldNotThrow",de,a7,b4,ef)));
HXLINE( 440)		this->assertTrue(hx::IsNotNull(  ::hxmath::math::QuaternionDefault_obj::__new((int)0,(int)0,(int)0,(int)0) ),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),440,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testEqualsNullShouldNotThrow",de,a7,b4,ef)));
HXLINE( 441)		this->assertTrue(hx::IsNotNull( ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)0,(int)0) ),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),441,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testEqualsNullShouldNotThrow",de,a7,b4,ef)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStructures_obj,testEqualsNullShouldNotThrow,(void))

void TestStructures_obj::testHasToString(){
            	HX_STACK_FRAME("test.TestStructures","testHasToString",0x8040af14,"test.TestStructures.testHasToString","test/TestStructures.hx",445,0x1c38d1cf)
            	HX_STACK_THIS(this)
HXLINE( 446)		HX_VARI( ::cpp::VirtualArray,structures) = ::cpp::VirtualArray_obj::__new(9)->init(0, ::hxmath::math::Vector2Default_obj::__new((int)0,(int)23))->init(1, ::hxmath::math::Vector3Default_obj::__new((int)0,(int)23,(int)0))->init(2, ::hxmath::math::Vector4Default_obj::__new((int)0,(int)23,(int)0,(int)0))->init(3, ::hxmath::math::Matrix2x2Default_obj::__new((int)0,(int)0,(int)23,(int)0))->init(4, ::hxmath::math::Matrix3x2Default_obj::__new((int)0,(int)0,(int)23,(int)0,(int)0,(int)0))->init(5, ::hxmath::math::Matrix3x3Default_obj::__new((int)0,(int)0,(int)23,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0))->init(6, ::hxmath::math::Matrix4x4Default_obj::__new((int)0,(int)0,(int)23,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0))->init(7, ::hxmath::math::QuaternionDefault_obj::__new((int)1,(int)0,(int)23,(int)0))->init(8,::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)0,(int)23));
HXLINE( 457)		{
HXLINE( 457)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 457)			while((_g < structures->get_length())){
HXLINE( 457)				HX_VARI(  ::Dynamic,x) = structures->__get(_g);
HXDLIN( 457)				++_g;
HXLINE( 459)				::String _hx_tmp = ::Std_obj::string(x);
HXDLIN( 459)				Int _hx_tmp1 = (HX_("",00,00,00,00) + _hx_tmp).indexOf(HX_("23",c1,2b,00,00),null());
HXDLIN( 459)				if ((_hx_tmp1 == (int)-1)) {
HXLINE( 461)					::haxe::Log_obj::trace(x,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),461,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testHasToString",f4,a2,f4,5f)));
HXLINE( 462)					this->assertTrue(false,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),462,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testHasToString",f4,a2,f4,5f)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStructures_obj,testHasToString,(void))

void TestStructures_obj::testVectorMinMax(){
            	HX_STACK_FRAME("test.TestStructures","testVectorMinMax",0xf397e8a7,"test.TestStructures.testVectorMinMax","test/TestStructures.hx",468,0x1c38d1cf)
            	HX_STACK_THIS(this)
HXLINE( 469)		HX_VARI( ::Array< ::Dynamic>,v2Axes) = ::Array_obj< ::Dynamic>::__new(2)->init(0, ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)0.0)))->init(1, ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)1.0)));
HXLINE( 470)		HX_VARI(  ::hxmath::math::Vector2Default,v2AxesMax) = ( ( ::hxmath::math::Vector2Default)(::Lambda_obj::fold(v2Axes,::hxmath::math::_Vector2::Vector2_Impl__obj::max_dyn(), ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)0.0)))) );
HXLINE( 471)		HX_VARI(  ::hxmath::math::Vector2Default,v2AxesMin) = ( ( ::hxmath::math::Vector2Default)(::Lambda_obj::fold(v2Axes,::hxmath::math::_Vector2::Vector2_Impl__obj::min_dyn(), ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)0.0)))) );
HXLINE( 472)		HX_VARI(  ::hxmath::math::Vector2Default,v2AxesSum) = ( ( ::hxmath::math::Vector2Default)(::Lambda_obj::fold(v2Axes,::hxmath::math::_Vector2::Vector2_Impl__obj::add_dyn(), ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)0.0)))) );
HXLINE( 474)		Bool _hx_tmp;
HXDLIN( 474)		Bool _hx_tmp1;
HXDLIN( 474)		if (hx::IsNull( v2AxesMax )) {
HXLINE( 474)			_hx_tmp1 = hx::IsNull( v2AxesSum );
            		}
            		else {
HXLINE( 474)			_hx_tmp1 = false;
            		}
HXDLIN( 474)		if (!(_hx_tmp1)) {
HXLINE( 474)			Bool _hx_tmp2;
HXDLIN( 474)			Bool _hx_tmp3;
HXDLIN( 474)			if (hx::IsNotNull( v2AxesMax )) {
HXLINE( 474)				_hx_tmp3 = hx::IsNotNull( v2AxesSum );
            			}
            			else {
HXLINE( 474)				_hx_tmp3 = false;
            			}
HXDLIN( 474)			if (_hx_tmp3) {
HXLINE( 474)				_hx_tmp2 = (v2AxesMax->x == v2AxesSum->x);
            			}
            			else {
HXLINE( 474)				_hx_tmp2 = false;
            			}
HXDLIN( 474)			if (_hx_tmp2) {
HXLINE( 474)				_hx_tmp = (v2AxesMax->y == v2AxesSum->y);
            			}
            			else {
HXLINE( 474)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 474)			_hx_tmp = true;
            		}
HXDLIN( 474)		this->assertTrue(_hx_tmp,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),474,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testVectorMinMax",c7,58,59,d1)));
HXLINE( 475)		HX_VARI(  ::hxmath::math::Vector2Default,b) =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)0.0));
HXDLIN( 475)		Bool _hx_tmp4;
HXDLIN( 475)		Bool _hx_tmp5;
HXDLIN( 475)		if (hx::IsNull( v2AxesMin )) {
HXLINE( 475)			_hx_tmp5 = hx::IsNull( b );
            		}
            		else {
HXLINE( 475)			_hx_tmp5 = false;
            		}
HXDLIN( 475)		if (!(_hx_tmp5)) {
HXLINE( 475)			Bool _hx_tmp6;
HXDLIN( 475)			Bool _hx_tmp7;
HXDLIN( 475)			if (hx::IsNotNull( v2AxesMin )) {
HXLINE( 475)				_hx_tmp7 = hx::IsNotNull( b );
            			}
            			else {
HXLINE( 475)				_hx_tmp7 = false;
            			}
HXDLIN( 475)			if (_hx_tmp7) {
HXLINE( 475)				_hx_tmp6 = (v2AxesMin->x == b->x);
            			}
            			else {
HXLINE( 475)				_hx_tmp6 = false;
            			}
HXDLIN( 475)			if (_hx_tmp6) {
HXLINE( 475)				_hx_tmp4 = (v2AxesMin->y == b->y);
            			}
            			else {
HXLINE( 475)				_hx_tmp4 = false;
            			}
            		}
            		else {
HXLINE( 475)			_hx_tmp4 = true;
            		}
HXDLIN( 475)		this->assertTrue(_hx_tmp4,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),475,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testVectorMinMax",c7,58,59,d1)));
HXLINE( 477)		HX_VARI( ::Array< ::Dynamic>,v3Axes) = ::Array_obj< ::Dynamic>::__new(3)->init(0, ::hxmath::math::Vector3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0)))->init(1, ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)1.0),((Float)0.0)))->init(2, ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)1.0)));
HXLINE( 478)		HX_VARI(  ::hxmath::math::Vector3Default,v3AxesMax) = ( ( ::hxmath::math::Vector3Default)(::Lambda_obj::fold(v3Axes,::hxmath::math::_Vector3::Vector3_Impl__obj::max_dyn(), ::hxmath::math::Vector3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0)))) );
HXLINE( 479)		HX_VARI(  ::hxmath::math::Vector3Default,v3AxesMin) = ( ( ::hxmath::math::Vector3Default)(::Lambda_obj::fold(v3Axes,::hxmath::math::_Vector3::Vector3_Impl__obj::min_dyn(), ::hxmath::math::Vector3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0)))) );
HXLINE( 480)		HX_VARI(  ::hxmath::math::Vector3Default,v3AxesSum) = ( ( ::hxmath::math::Vector3Default)(::Lambda_obj::fold(v3Axes,::hxmath::math::_Vector3::Vector3_Impl__obj::add_dyn(), ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0)))) );
HXLINE( 482)		Bool _hx_tmp8;
HXDLIN( 482)		Bool _hx_tmp9;
HXDLIN( 482)		if (hx::IsNull( v3AxesMax )) {
HXLINE( 482)			_hx_tmp9 = hx::IsNull( v3AxesSum );
            		}
            		else {
HXLINE( 482)			_hx_tmp9 = false;
            		}
HXDLIN( 482)		if (!(_hx_tmp9)) {
HXLINE( 482)			Bool _hx_tmp10;
HXDLIN( 482)			Bool _hx_tmp11;
HXDLIN( 482)			Bool _hx_tmp12;
HXDLIN( 482)			if (hx::IsNotNull( v3AxesMax )) {
HXLINE( 482)				_hx_tmp12 = hx::IsNotNull( v3AxesSum );
            			}
            			else {
HXLINE( 482)				_hx_tmp12 = false;
            			}
HXDLIN( 482)			if (_hx_tmp12) {
HXLINE( 482)				_hx_tmp11 = (v3AxesMax->x == v3AxesSum->x);
            			}
            			else {
HXLINE( 482)				_hx_tmp11 = false;
            			}
HXDLIN( 482)			if (_hx_tmp11) {
HXLINE( 482)				_hx_tmp10 = (v3AxesMax->y == v3AxesSum->y);
            			}
            			else {
HXLINE( 482)				_hx_tmp10 = false;
            			}
HXDLIN( 482)			if (_hx_tmp10) {
HXLINE( 482)				_hx_tmp8 = (v3AxesMax->z == v3AxesSum->z);
            			}
            			else {
HXLINE( 482)				_hx_tmp8 = false;
            			}
            		}
            		else {
HXLINE( 482)			_hx_tmp8 = true;
            		}
HXDLIN( 482)		this->assertTrue(_hx_tmp8,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),482,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testVectorMinMax",c7,58,59,d1)));
HXLINE( 483)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,b1,"b") =  ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 483)		Bool _hx_tmp13;
HXDLIN( 483)		Bool _hx_tmp14;
HXDLIN( 483)		if (hx::IsNull( v3AxesMin )) {
HXLINE( 483)			_hx_tmp14 = hx::IsNull( b1 );
            		}
            		else {
HXLINE( 483)			_hx_tmp14 = false;
            		}
HXDLIN( 483)		if (!(_hx_tmp14)) {
HXLINE( 483)			Bool _hx_tmp15;
HXDLIN( 483)			Bool _hx_tmp16;
HXDLIN( 483)			Bool _hx_tmp17;
HXDLIN( 483)			if (hx::IsNotNull( v3AxesMin )) {
HXLINE( 483)				_hx_tmp17 = hx::IsNotNull( b1 );
            			}
            			else {
HXLINE( 483)				_hx_tmp17 = false;
            			}
HXDLIN( 483)			if (_hx_tmp17) {
HXLINE( 483)				_hx_tmp16 = (v3AxesMin->x == b1->x);
            			}
            			else {
HXLINE( 483)				_hx_tmp16 = false;
            			}
HXDLIN( 483)			if (_hx_tmp16) {
HXLINE( 483)				_hx_tmp15 = (v3AxesMin->y == b1->y);
            			}
            			else {
HXLINE( 483)				_hx_tmp15 = false;
            			}
HXDLIN( 483)			if (_hx_tmp15) {
HXLINE( 483)				_hx_tmp13 = (v3AxesMin->z == b1->z);
            			}
            			else {
HXLINE( 483)				_hx_tmp13 = false;
            			}
            		}
            		else {
HXLINE( 483)			_hx_tmp13 = true;
            		}
HXDLIN( 483)		this->assertTrue(_hx_tmp13,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),483,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testVectorMinMax",c7,58,59,d1)));
HXLINE( 485)		HX_VARI( ::Array< ::Dynamic>,v4Axes) = ::Array_obj< ::Dynamic>::__new(4)->init(0, ::hxmath::math::Vector4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0)))->init(1, ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0)))->init(2, ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0)))->init(3, ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0)));
HXLINE( 486)		HX_VARI(  ::hxmath::math::Vector4Default,v4AxesMax) = ( ( ::hxmath::math::Vector4Default)(::Lambda_obj::fold(v4Axes,::hxmath::math::_Vector4::Vector4_Impl__obj::max_dyn(), ::hxmath::math::Vector4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0)))) );
HXLINE( 487)		HX_VARI(  ::hxmath::math::Vector4Default,v4AxesMin) = ( ( ::hxmath::math::Vector4Default)(::Lambda_obj::fold(v4Axes,::hxmath::math::_Vector4::Vector4_Impl__obj::min_dyn(), ::hxmath::math::Vector4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0)))) );
HXLINE( 488)		HX_VARI(  ::hxmath::math::Vector4Default,v4AxesSum) = ( ( ::hxmath::math::Vector4Default)(::Lambda_obj::fold(v4Axes,::hxmath::math::_Vector4::Vector4_Impl__obj::add_dyn(), ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0)))) );
HXLINE( 490)		Bool _hx_tmp18;
HXDLIN( 490)		Bool _hx_tmp19;
HXDLIN( 490)		if (hx::IsNull( v4AxesMax )) {
HXLINE( 490)			_hx_tmp19 = hx::IsNull( v4AxesSum );
            		}
            		else {
HXLINE( 490)			_hx_tmp19 = false;
            		}
HXDLIN( 490)		if (!(_hx_tmp19)) {
HXLINE( 490)			Bool _hx_tmp20;
HXDLIN( 490)			Bool _hx_tmp21;
HXDLIN( 490)			Bool _hx_tmp22;
HXDLIN( 490)			Bool _hx_tmp23;
HXDLIN( 490)			if (hx::IsNotNull( v4AxesMax )) {
HXLINE( 490)				_hx_tmp23 = hx::IsNotNull( v4AxesSum );
            			}
            			else {
HXLINE( 490)				_hx_tmp23 = false;
            			}
HXDLIN( 490)			if (_hx_tmp23) {
HXLINE( 490)				_hx_tmp22 = (v4AxesMax->x == v4AxesSum->x);
            			}
            			else {
HXLINE( 490)				_hx_tmp22 = false;
            			}
HXDLIN( 490)			if (_hx_tmp22) {
HXLINE( 490)				_hx_tmp21 = (v4AxesMax->y == v4AxesSum->y);
            			}
            			else {
HXLINE( 490)				_hx_tmp21 = false;
            			}
HXDLIN( 490)			if (_hx_tmp21) {
HXLINE( 490)				_hx_tmp20 = (v4AxesMax->z == v4AxesSum->z);
            			}
            			else {
HXLINE( 490)				_hx_tmp20 = false;
            			}
HXDLIN( 490)			if (_hx_tmp20) {
HXLINE( 490)				_hx_tmp18 = (v4AxesMax->w == v4AxesSum->w);
            			}
            			else {
HXLINE( 490)				_hx_tmp18 = false;
            			}
            		}
            		else {
HXLINE( 490)			_hx_tmp18 = true;
            		}
HXDLIN( 490)		this->assertTrue(_hx_tmp18,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),490,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testVectorMinMax",c7,58,59,d1)));
HXLINE( 491)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,b2,"b") =  ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 491)		Bool _hx_tmp24;
HXDLIN( 491)		Bool _hx_tmp25;
HXDLIN( 491)		if (hx::IsNull( v4AxesMin )) {
HXLINE( 491)			_hx_tmp25 = hx::IsNull( b2 );
            		}
            		else {
HXLINE( 491)			_hx_tmp25 = false;
            		}
HXDLIN( 491)		if (!(_hx_tmp25)) {
HXLINE( 491)			Bool _hx_tmp26;
HXDLIN( 491)			Bool _hx_tmp27;
HXDLIN( 491)			Bool _hx_tmp28;
HXDLIN( 491)			Bool _hx_tmp29;
HXDLIN( 491)			if (hx::IsNotNull( v4AxesMin )) {
HXLINE( 491)				_hx_tmp29 = hx::IsNotNull( b2 );
            			}
            			else {
HXLINE( 491)				_hx_tmp29 = false;
            			}
HXDLIN( 491)			if (_hx_tmp29) {
HXLINE( 491)				_hx_tmp28 = (v4AxesMin->x == b2->x);
            			}
            			else {
HXLINE( 491)				_hx_tmp28 = false;
            			}
HXDLIN( 491)			if (_hx_tmp28) {
HXLINE( 491)				_hx_tmp27 = (v4AxesMin->y == b2->y);
            			}
            			else {
HXLINE( 491)				_hx_tmp27 = false;
            			}
HXDLIN( 491)			if (_hx_tmp27) {
HXLINE( 491)				_hx_tmp26 = (v4AxesMin->z == b2->z);
            			}
            			else {
HXLINE( 491)				_hx_tmp26 = false;
            			}
HXDLIN( 491)			if (_hx_tmp26) {
HXLINE( 491)				_hx_tmp24 = (v4AxesMin->w == b2->w);
            			}
            			else {
HXLINE( 491)				_hx_tmp24 = false;
            			}
            		}
            		else {
HXLINE( 491)			_hx_tmp24 = true;
            		}
HXDLIN( 491)		this->assertTrue(_hx_tmp24,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),491,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testVectorMinMax",c7,58,59,d1)));
HXLINE( 493)		HX_VARI( ::Array< ::Dynamic>,v2iAxes) = ::Array_obj< ::Dynamic>::__new(2)->init(0,::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)1,(int)0))->init(1,::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)0,(int)1));
HXLINE( 494)		HX_VARI(  ::hxmath::math::IntVector2Default,v2iAxesMax) = ( ( ::hxmath::math::IntVector2Default)(::Lambda_obj::fold(v2iAxes,::hxmath::math::_IntVector2::IntVector2_Impl__obj::max_dyn(),::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)1,(int)0))) );
HXLINE( 495)		HX_VARI(  ::hxmath::math::IntVector2Default,v2iAxesMin) = ( ( ::hxmath::math::IntVector2Default)(::Lambda_obj::fold(v2iAxes,::hxmath::math::_IntVector2::IntVector2_Impl__obj::min_dyn(),::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)1,(int)0))) );
HXLINE( 496)		HX_VARI(  ::hxmath::math::IntVector2Default,v2iAxesSum) = ( ( ::hxmath::math::IntVector2Default)(::Lambda_obj::fold(v2iAxes,::hxmath::math::_IntVector2::IntVector2_Impl__obj::add_dyn(),::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)0,(int)0))) );
HXLINE( 498)		Bool _hx_tmp30;
HXDLIN( 498)		Bool _hx_tmp31;
HXDLIN( 498)		if (hx::IsNull( v2iAxesMax )) {
HXLINE( 498)			_hx_tmp31 = hx::IsNull( v2iAxesSum );
            		}
            		else {
HXLINE( 498)			_hx_tmp31 = false;
            		}
HXDLIN( 498)		if (!(_hx_tmp31)) {
HXLINE( 498)			Bool _hx_tmp32;
HXDLIN( 498)			Bool _hx_tmp33;
HXDLIN( 498)			if (hx::IsNotNull( v2iAxesMax )) {
HXLINE( 498)				_hx_tmp33 = hx::IsNotNull( v2iAxesSum );
            			}
            			else {
HXLINE( 498)				_hx_tmp33 = false;
            			}
HXDLIN( 498)			if (_hx_tmp33) {
HXLINE( 498)				_hx_tmp32 = (v2iAxesMax->x == v2iAxesSum->x);
            			}
            			else {
HXLINE( 498)				_hx_tmp32 = false;
            			}
HXDLIN( 498)			if (_hx_tmp32) {
HXLINE( 498)				_hx_tmp30 = (v2iAxesMax->y == v2iAxesSum->y);
            			}
            			else {
HXLINE( 498)				_hx_tmp30 = false;
            			}
            		}
            		else {
HXLINE( 498)			_hx_tmp30 = true;
            		}
HXDLIN( 498)		this->assertTrue(_hx_tmp30,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),498,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testVectorMinMax",c7,58,59,d1)));
HXLINE( 499)		HX_VARI_NAME(  ::hxmath::math::IntVector2Default,b3,"b") = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)0,(int)0);
HXDLIN( 499)		Bool _hx_tmp34;
HXDLIN( 499)		Bool _hx_tmp35;
HXDLIN( 499)		if (hx::IsNull( v2iAxesMin )) {
HXLINE( 499)			_hx_tmp35 = hx::IsNull( b3 );
            		}
            		else {
HXLINE( 499)			_hx_tmp35 = false;
            		}
HXDLIN( 499)		if (!(_hx_tmp35)) {
HXLINE( 499)			Bool _hx_tmp36;
HXDLIN( 499)			Bool _hx_tmp37;
HXDLIN( 499)			if (hx::IsNotNull( v2iAxesMin )) {
HXLINE( 499)				_hx_tmp37 = hx::IsNotNull( b3 );
            			}
            			else {
HXLINE( 499)				_hx_tmp37 = false;
            			}
HXDLIN( 499)			if (_hx_tmp37) {
HXLINE( 499)				_hx_tmp36 = (v2iAxesMin->x == b3->x);
            			}
            			else {
HXLINE( 499)				_hx_tmp36 = false;
            			}
HXDLIN( 499)			if (_hx_tmp36) {
HXLINE( 499)				_hx_tmp34 = (v2iAxesMin->y == b3->y);
            			}
            			else {
HXLINE( 499)				_hx_tmp34 = false;
            			}
            		}
            		else {
HXLINE( 499)			_hx_tmp34 = true;
            		}
HXDLIN( 499)		this->assertTrue(_hx_tmp34,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),499,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testVectorMinMax",c7,58,59,d1)));
HXLINE( 501)		Int _hx_tmp38 = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((int)1,(int)0);
HXDLIN( 501)		Int _hx_tmp39 = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((int)0,(int)1);
HXDLIN( 501)		HX_VARI( ::Array< Int >,v2sAxes) = ::Array_obj< Int >::__new(2)->init(0,_hx_tmp38)->init(1,_hx_tmp39);
HXLINE( 502)		Int _hx_tmp40 = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((int)1,(int)0);
HXDLIN( 502)		HX_VARI( Int,v2sAxesMax) = ( (Int)(::Lambda_obj::fold(v2sAxes,::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::max_dyn(),_hx_tmp40)) );
HXLINE( 503)		Int _hx_tmp41 = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((int)1,(int)0);
HXDLIN( 503)		HX_VARI( Int,v2sAxesMin) = ( (Int)(::Lambda_obj::fold(v2sAxes,::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::min_dyn(),_hx_tmp41)) );
HXLINE( 504)		Int _hx_tmp42 = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((int)0,(int)0);
HXDLIN( 504)		HX_VARI( Int,v2sAxesSum) = ( (Int)(::Lambda_obj::fold(v2sAxes,::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::add_dyn(),_hx_tmp42)) );
HXLINE( 506)		this->assertTrue((v2sAxesMax == v2sAxesSum),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),506,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testVectorMinMax",c7,58,59,d1)));
HXLINE( 507)		Int _hx_tmp43 = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((int)0,(int)0);
HXDLIN( 507)		this->assertTrue((v2sAxesMin == _hx_tmp43),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),507,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testVectorMinMax",c7,58,59,d1)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStructures_obj,testVectorMinMax,(void))

void TestStructures_obj::testVectorProj(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::hxmath::math::Vector2Default,v2Mid) HXARGC(1)
            		 ::hxmath::math::Vector2Default _hx_run( ::hxmath::math::Vector2Default a1){
            			HX_STACK_FRAME("test.TestStructures","testVectorProj",0xaeb4c0d2,"test.TestStructures.testVectorProj","test/TestStructures.hx",518,0x1c38d1cf)
            			HX_STACK_ARG(a1,"a1")
HXLINE( 518)			HX_VARI_NAME(  ::hxmath::math::Vector2Default,self1,"self") = v2Mid;
HXDLIN( 518)			HX_VARI_NAME(  ::hxmath::math::Vector2Default,self2,"self") =  ::hxmath::math::Vector2Default_obj::__new(self1->x,self1->y);
HXDLIN( 518)			HX_VARI_NAME( Float,s1,"s") = ((Float)((self2->x * a1->x) + (self2->y * a1->y)) / (Float)((a1->x * a1->x) + (a1->y * a1->y)));
HXDLIN( 518)			{
HXLINE( 518)				HX_VARI_NAME( Int,_g1,"_g") = (int)0;
HXDLIN( 518)				while((_g1 < (int)2)){
HXLINE( 518)					HX_VARI_NAME( Int,i1,"i") = _g1++;
HXDLIN( 518)					{
HXLINE( 518)						 ::Dynamic _hx_tmp5;
HXDLIN( 518)						switch((int)(i1)){
            							case (int)0: {
HXLINE( 518)								_hx_tmp5 = a1->x;
            							}
            							break;
            							case (int)1: {
HXLINE( 518)								_hx_tmp5 = a1->y;
            							}
            							break;
            							default:{
HXLINE( 518)								HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            							}
            						}
HXDLIN( 518)						HX_VARI_NAME( Float,value1,"value") = ( (Float)(_hx_tmp5) );
HXDLIN( 518)						switch((int)(i1)){
            							case (int)0: {
HXLINE( 518)								self2->x = value1;
            							}
            							break;
            							case (int)1: {
HXLINE( 518)								self2->y = value1;
            							}
            							break;
            							default:{
HXLINE( 518)								HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            							}
            						}
            					}
            				}
            			}
HXDLIN( 518)			{
HXLINE( 518)				hx::MultEq(self2->x,s1);
HXDLIN( 518)				hx::MultEq(self2->y,s1);
            			}
HXDLIN( 518)			return self2;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::hxmath::math::Vector3Default,v3Mid) HXARGC(1)
            		 ::hxmath::math::Vector3Default _hx_run( ::hxmath::math::Vector3Default a5){
            			HX_STACK_FRAME("test.TestStructures","testVectorProj",0xaeb4c0d2,"test.TestStructures.testVectorProj","test/TestStructures.hx",538,0x1c38d1cf)
            			HX_STACK_ARG(a5,"a5")
HXLINE( 538)			HX_VARI_NAME(  ::hxmath::math::Vector3Default,self6,"self") = v3Mid;
HXDLIN( 538)			HX_VARI_NAME(  ::hxmath::math::Vector3Default,self7,"self") =  ::hxmath::math::Vector3Default_obj::__new(self6->x,self6->y,self6->z);
HXDLIN( 538)			HX_VARI_NAME( Float,s5,"s") = ((Float)(((self7->x * a5->x) + (self7->y * a5->y)) + (self7->z * a5->z)) / (Float)(((a5->x * a5->x) + (a5->y * a5->y)) + (a5->z * a5->z)));
HXDLIN( 538)			{
HXLINE( 538)				HX_VARI_NAME( Int,_g6,"_g") = (int)0;
HXDLIN( 538)				while((_g6 < (int)3)){
HXLINE( 538)					HX_VARI_NAME( Int,i5,"i") = _g6++;
HXDLIN( 538)					{
HXLINE( 538)						 ::Dynamic _hx_tmp16;
HXDLIN( 538)						switch((int)(i5)){
            							case (int)0: {
HXLINE( 538)								_hx_tmp16 = a5->x;
            							}
            							break;
            							case (int)1: {
HXLINE( 538)								_hx_tmp16 = a5->y;
            							}
            							break;
            							case (int)2: {
HXLINE( 538)								_hx_tmp16 = a5->z;
            							}
            							break;
            							default:{
HXLINE( 538)								HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            							}
            						}
HXDLIN( 538)						HX_VARI_NAME( Float,value5,"value") = ( (Float)(_hx_tmp16) );
HXDLIN( 538)						switch((int)(i5)){
            							case (int)0: {
HXLINE( 538)								self7->x = value5;
            							}
            							break;
            							case (int)1: {
HXLINE( 538)								self7->y = value5;
            							}
            							break;
            							case (int)2: {
HXLINE( 538)								self7->z = value5;
            							}
            							break;
            							default:{
HXLINE( 538)								HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            							}
            						}
            					}
            				}
            			}
HXDLIN( 538)			{
HXLINE( 538)				hx::MultEq(self7->x,s5);
HXDLIN( 538)				hx::MultEq(self7->y,s5);
HXDLIN( 538)				hx::MultEq(self7->z,s5);
            			}
HXDLIN( 538)			return self7;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2, ::hxmath::math::Vector4Default,v4Mid) HXARGC(1)
            		 ::hxmath::math::Vector4Default _hx_run( ::hxmath::math::Vector4Default a12){
            			HX_STACK_FRAME("test.TestStructures","testVectorProj",0xaeb4c0d2,"test.TestStructures.testVectorProj","test/TestStructures.hx",561,0x1c38d1cf)
            			HX_STACK_ARG(a12,"a12")
HXLINE( 561)			HX_VARI_NAME(  ::hxmath::math::Vector4Default,self14,"self") = v4Mid;
HXDLIN( 561)			HX_VARI_NAME(  ::hxmath::math::Vector4Default,self15,"self") =  ::hxmath::math::Vector4Default_obj::__new(self14->x,self14->y,self14->z,self14->w);
HXDLIN( 561)			HX_VARI_NAME( Float,s12,"s") = ((Float)((((self15->x * a12->x) + (self15->y * a12->y)) + (self15->z * a12->z)) + (self15->w * a12->w)) / (Float)((((a12->x * a12->x) + (a12->y * a12->y)) + (a12->z * a12->z)) + (a12->w * a12->w)));
HXDLIN( 561)			{
HXLINE( 561)				HX_VARI_NAME( Int,_g14,"_g") = (int)0;
HXDLIN( 561)				while((_g14 < (int)4)){
HXLINE( 561)					HX_VARI_NAME( Int,i12,"i") = _g14++;
HXDLIN( 561)					{
HXLINE( 561)						 ::Dynamic _hx_tmp31;
HXDLIN( 561)						switch((int)(i12)){
            							case (int)0: {
HXLINE( 561)								_hx_tmp31 = a12->x;
            							}
            							break;
            							case (int)1: {
HXLINE( 561)								_hx_tmp31 = a12->y;
            							}
            							break;
            							case (int)2: {
HXLINE( 561)								_hx_tmp31 = a12->z;
            							}
            							break;
            							case (int)3: {
HXLINE( 561)								_hx_tmp31 = a12->w;
            							}
            							break;
            							default:{
HXLINE( 561)								HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            							}
            						}
HXDLIN( 561)						HX_VARI_NAME( Float,value12,"value") = ( (Float)(_hx_tmp31) );
HXDLIN( 561)						switch((int)(i12)){
            							case (int)0: {
HXLINE( 561)								self15->x = value12;
            							}
            							break;
            							case (int)1: {
HXLINE( 561)								self15->y = value12;
            							}
            							break;
            							case (int)2: {
HXLINE( 561)								self15->z = value12;
            							}
            							break;
            							case (int)3: {
HXLINE( 561)								self15->w = value12;
            							}
            							break;
            							default:{
HXLINE( 561)								HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            							}
            						}
            					}
            				}
            			}
HXDLIN( 561)			{
HXLINE( 561)				hx::MultEq(self15->x,s12);
HXDLIN( 561)				hx::MultEq(self15->y,s12);
HXDLIN( 561)				hx::MultEq(self15->z,s12);
HXDLIN( 561)				hx::MultEq(self15->w,s12);
            			}
HXDLIN( 561)			return self15;
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("test.TestStructures","testVectorProj",0xaeb4c0d2,"test.TestStructures.testVectorProj","test/TestStructures.hx",511,0x1c38d1cf)
            	HX_STACK_THIS(this)
HXLINE( 512)		HX_VARI(  ::hxmath::math::Vector2Default,a) =  ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)0.0));
HXDLIN( 512)		HX_VARI(  ::hxmath::math::Vector2Default,b) =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)1.0));
HXDLIN( 512)		HX_VARI(  ::hxmath::math::Vector2Default,self) =  ::hxmath::math::Vector2Default_obj::__new(a->x,a->y);
HXDLIN( 512)		HX_VARI( Float,s) = ((Float)((self->x * b->x) + (self->y * b->y)) / (Float)((b->x * b->x) + (b->y * b->y)));
HXDLIN( 512)		{
HXLINE( 512)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 512)			while((_g < (int)2)){
HXLINE( 512)				HX_VARI( Int,i) = _g++;
HXDLIN( 512)				{
HXLINE( 512)					 ::Dynamic _hx_tmp;
HXDLIN( 512)					switch((int)(i)){
            						case (int)0: {
HXLINE( 512)							_hx_tmp = b->x;
            						}
            						break;
            						case (int)1: {
HXLINE( 512)							_hx_tmp = b->y;
            						}
            						break;
            						default:{
HXLINE( 512)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 512)					HX_VARI( Float,value) = ( (Float)(_hx_tmp) );
HXDLIN( 512)					switch((int)(i)){
            						case (int)0: {
HXLINE( 512)							self->x = value;
            						}
            						break;
            						case (int)1: {
HXLINE( 512)							self->y = value;
            						}
            						break;
            						default:{
HXLINE( 512)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXDLIN( 512)		{
HXLINE( 512)			hx::MultEq(self->x,s);
HXDLIN( 512)			hx::MultEq(self->y,s);
            		}
HXLINE( 514)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b1,"b") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)0.0));
HXDLIN( 514)		Bool _hx_tmp1;
HXDLIN( 514)		Bool _hx_tmp2;
HXDLIN( 514)		if (hx::IsNull( self )) {
HXLINE( 514)			_hx_tmp2 = hx::IsNull( b1 );
            		}
            		else {
HXLINE( 514)			_hx_tmp2 = false;
            		}
HXDLIN( 514)		if (!(_hx_tmp2)) {
HXLINE( 514)			Bool _hx_tmp3;
HXDLIN( 514)			Bool _hx_tmp4;
HXDLIN( 514)			if (hx::IsNotNull( self )) {
HXLINE( 514)				_hx_tmp4 = hx::IsNotNull( b1 );
            			}
            			else {
HXLINE( 514)				_hx_tmp4 = false;
            			}
HXDLIN( 514)			if (_hx_tmp4) {
HXLINE( 514)				_hx_tmp3 = (self->x == b1->x);
            			}
            			else {
HXLINE( 514)				_hx_tmp3 = false;
            			}
HXDLIN( 514)			if (_hx_tmp3) {
HXLINE( 514)				_hx_tmp1 = (self->y == b1->y);
            			}
            			else {
HXLINE( 514)				_hx_tmp1 = false;
            			}
            		}
            		else {
HXLINE( 514)			_hx_tmp1 = true;
            		}
HXDLIN( 514)		this->assertTrue(_hx_tmp1,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),514,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testVectorProj",f2,e8,43,ac)));
HXLINE( 516)		HX_VARI(  ::hxmath::math::Vector2Default,v2Mid) =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.5),((Float)0.5));
HXLINE( 518)		HX_VARI(  ::List,v2MidProjOntoAxes) = ::Lambda_obj::map(::Array_obj< ::Dynamic>::__new(2)->init(0, ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)0.0)))->init(1, ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)1.0))), ::Dynamic(new _hx_Closure_0(v2Mid)));
HXLINE( 520)		{
HXLINE( 520)			HX_VARI(  ::_List::ListNode,_g_head) = v2MidProjOntoAxes->h;
HXDLIN( 520)			while(hx::IsNotNull( _g_head )){
HXLINE( 520)				HX_VARI(  ::hxmath::math::Vector2Default,val) = ( ( ::hxmath::math::Vector2Default)(_g_head->item) );
HXLINE( 510)				_g_head = _g_head->next;
HXLINE( 522)				Float _hx_tmp6 = ((val->x * val->x) + (val->y * val->y));
HXDLIN( 522)				Float _hx_tmp7 = ::Math_obj::sqrt(_hx_tmp6);
HXDLIN( 522)				this->assertApproxEquals(((Float)0.5),_hx_tmp7,null(),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),522,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testVectorProj",f2,e8,43,ac)));
            			}
            		}
HXLINE( 526)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,a2,"a") =  ::hxmath::math::Vector3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0));
HXDLIN( 526)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,b2,"b") =  ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)1.0),((Float)0.0));
HXDLIN( 526)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self3,"self") =  ::hxmath::math::Vector3Default_obj::__new(a2->x,a2->y,a2->z);
HXDLIN( 526)		HX_VARI_NAME( Float,s2,"s") = ((Float)(((self3->x * b2->x) + (self3->y * b2->y)) + (self3->z * b2->z)) / (Float)(((b2->x * b2->x) + (b2->y * b2->y)) + (b2->z * b2->z)));
HXDLIN( 526)		{
HXLINE( 526)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 526)			while((_g2 < (int)3)){
HXLINE( 526)				HX_VARI_NAME( Int,i2,"i") = _g2++;
HXDLIN( 526)				{
HXLINE( 526)					 ::Dynamic _hx_tmp8;
HXDLIN( 526)					switch((int)(i2)){
            						case (int)0: {
HXLINE( 526)							_hx_tmp8 = b2->x;
            						}
            						break;
            						case (int)1: {
HXLINE( 526)							_hx_tmp8 = b2->y;
            						}
            						break;
            						case (int)2: {
HXLINE( 526)							_hx_tmp8 = b2->z;
            						}
            						break;
            						default:{
HXLINE( 526)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 526)					HX_VARI_NAME( Float,value2,"value") = ( (Float)(_hx_tmp8) );
HXDLIN( 526)					switch((int)(i2)){
            						case (int)0: {
HXLINE( 526)							self3->x = value2;
            						}
            						break;
            						case (int)1: {
HXLINE( 526)							self3->y = value2;
            						}
            						break;
            						case (int)2: {
HXLINE( 526)							self3->z = value2;
            						}
            						break;
            						default:{
HXLINE( 526)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXDLIN( 526)		{
HXLINE( 526)			hx::MultEq(self3->x,s2);
HXDLIN( 526)			hx::MultEq(self3->y,s2);
HXDLIN( 526)			hx::MultEq(self3->z,s2);
            		}
HXLINE( 527)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,a3,"a") =  ::hxmath::math::Vector3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0));
HXDLIN( 527)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,b3,"b") =  ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN( 527)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self4,"self") =  ::hxmath::math::Vector3Default_obj::__new(a3->x,a3->y,a3->z);
HXDLIN( 527)		HX_VARI_NAME( Float,s3,"s") = ((Float)(((self4->x * b3->x) + (self4->y * b3->y)) + (self4->z * b3->z)) / (Float)(((b3->x * b3->x) + (b3->y * b3->y)) + (b3->z * b3->z)));
HXDLIN( 527)		{
HXLINE( 527)			HX_VARI_NAME( Int,_g3,"_g") = (int)0;
HXDLIN( 527)			while((_g3 < (int)3)){
HXLINE( 527)				HX_VARI_NAME( Int,i3,"i") = _g3++;
HXDLIN( 527)				{
HXLINE( 527)					 ::Dynamic _hx_tmp9;
HXDLIN( 527)					switch((int)(i3)){
            						case (int)0: {
HXLINE( 527)							_hx_tmp9 = b3->x;
            						}
            						break;
            						case (int)1: {
HXLINE( 527)							_hx_tmp9 = b3->y;
            						}
            						break;
            						case (int)2: {
HXLINE( 527)							_hx_tmp9 = b3->z;
            						}
            						break;
            						default:{
HXLINE( 527)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 527)					HX_VARI_NAME( Float,value3,"value") = ( (Float)(_hx_tmp9) );
HXDLIN( 527)					switch((int)(i3)){
            						case (int)0: {
HXLINE( 527)							self4->x = value3;
            						}
            						break;
            						case (int)1: {
HXLINE( 527)							self4->y = value3;
            						}
            						break;
            						case (int)2: {
HXLINE( 527)							self4->z = value3;
            						}
            						break;
            						default:{
HXLINE( 527)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXDLIN( 527)		{
HXLINE( 527)			hx::MultEq(self4->x,s3);
HXDLIN( 527)			hx::MultEq(self4->y,s3);
HXDLIN( 527)			hx::MultEq(self4->z,s3);
            		}
HXLINE( 528)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,a4,"a") =  ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)1.0),((Float)0.0));
HXDLIN( 528)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,b4,"b") =  ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN( 528)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self5,"self") =  ::hxmath::math::Vector3Default_obj::__new(a4->x,a4->y,a4->z);
HXDLIN( 528)		HX_VARI_NAME( Float,s4,"s") = ((Float)(((self5->x * b4->x) + (self5->y * b4->y)) + (self5->z * b4->z)) / (Float)(((b4->x * b4->x) + (b4->y * b4->y)) + (b4->z * b4->z)));
HXDLIN( 528)		{
HXLINE( 528)			HX_VARI_NAME( Int,_g4,"_g") = (int)0;
HXDLIN( 528)			while((_g4 < (int)3)){
HXLINE( 528)				HX_VARI_NAME( Int,i4,"i") = _g4++;
HXDLIN( 528)				{
HXLINE( 528)					 ::Dynamic _hx_tmp10;
HXDLIN( 528)					switch((int)(i4)){
            						case (int)0: {
HXLINE( 528)							_hx_tmp10 = b4->x;
            						}
            						break;
            						case (int)1: {
HXLINE( 528)							_hx_tmp10 = b4->y;
            						}
            						break;
            						case (int)2: {
HXLINE( 528)							_hx_tmp10 = b4->z;
            						}
            						break;
            						default:{
HXLINE( 528)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 528)					HX_VARI_NAME( Float,value4,"value") = ( (Float)(_hx_tmp10) );
HXDLIN( 528)					switch((int)(i4)){
            						case (int)0: {
HXLINE( 528)							self5->x = value4;
            						}
            						break;
            						case (int)1: {
HXLINE( 528)							self5->y = value4;
            						}
            						break;
            						case (int)2: {
HXLINE( 528)							self5->z = value4;
            						}
            						break;
            						default:{
HXLINE( 528)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXDLIN( 528)		{
HXLINE( 528)			hx::MultEq(self5->x,s4);
HXDLIN( 528)			hx::MultEq(self5->y,s4);
HXDLIN( 528)			hx::MultEq(self5->z,s4);
            		}
HXLINE( 525)		HX_VARI( ::Array< ::Dynamic>,v3AxesProj) = ::Array_obj< ::Dynamic>::__new(3)->init(0,self3)->init(1,self4)->init(2,self5);
HXLINE( 531)		{
HXLINE( 531)			HX_VARI_NAME( Int,_g5,"_g") = (int)0;
HXDLIN( 531)			while((_g5 < v3AxesProj->length)){
HXLINE( 531)				HX_VARI(  ::hxmath::math::Vector3Default,v) = v3AxesProj->__get(_g5).StaticCast<  ::hxmath::math::Vector3Default >();
HXDLIN( 531)				++_g5;
HXLINE( 533)				HX_VARI_NAME(  ::hxmath::math::Vector3Default,b5,"b") =  ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 533)				Bool _hx_tmp11;
HXDLIN( 533)				Bool _hx_tmp12;
HXDLIN( 533)				if (hx::IsNull( v )) {
HXLINE( 533)					_hx_tmp12 = hx::IsNull( b5 );
            				}
            				else {
HXLINE( 533)					_hx_tmp12 = false;
            				}
HXDLIN( 533)				if (!(_hx_tmp12)) {
HXLINE( 533)					Bool _hx_tmp13;
HXDLIN( 533)					Bool _hx_tmp14;
HXDLIN( 533)					Bool _hx_tmp15;
HXDLIN( 533)					if (hx::IsNotNull( v )) {
HXLINE( 533)						_hx_tmp15 = hx::IsNotNull( b5 );
            					}
            					else {
HXLINE( 533)						_hx_tmp15 = false;
            					}
HXDLIN( 533)					if (_hx_tmp15) {
HXLINE( 533)						_hx_tmp14 = (v->x == b5->x);
            					}
            					else {
HXLINE( 533)						_hx_tmp14 = false;
            					}
HXDLIN( 533)					if (_hx_tmp14) {
HXLINE( 533)						_hx_tmp13 = (v->y == b5->y);
            					}
            					else {
HXLINE( 533)						_hx_tmp13 = false;
            					}
HXDLIN( 533)					if (_hx_tmp13) {
HXLINE( 533)						_hx_tmp11 = (v->z == b5->z);
            					}
            					else {
HXLINE( 533)						_hx_tmp11 = false;
            					}
            				}
            				else {
HXLINE( 533)					_hx_tmp11 = true;
            				}
HXDLIN( 533)				this->assertTrue(_hx_tmp11,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),533,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testVectorProj",f2,e8,43,ac)));
            			}
            		}
HXLINE( 536)		HX_VARI(  ::hxmath::math::Vector3Default,v3Mid) =  ::hxmath::math::Vector3Default_obj::__new(((Float)0.5),((Float)0.5),((Float)0.5));
HXLINE( 538)		HX_VARI(  ::List,v3MidProjOntoAxes) = ::Lambda_obj::map(::Array_obj< ::Dynamic>::__new(3)->init(0, ::hxmath::math::Vector3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0)))->init(1, ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)1.0),((Float)0.0)))->init(2, ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)1.0))), ::Dynamic(new _hx_Closure_1(v3Mid)));
HXLINE( 540)		{
HXLINE( 540)			HX_VARI_NAME(  ::_List::ListNode,_g_head1,"_g_head") = v3MidProjOntoAxes->h;
HXDLIN( 540)			while(hx::IsNotNull( _g_head1 )){
HXLINE( 540)				HX_VARI_NAME(  ::hxmath::math::Vector3Default,val1,"val") = ( ( ::hxmath::math::Vector3Default)(_g_head1->item) );
HXLINE( 510)				_g_head1 = _g_head1->next;
HXLINE( 542)				Float _hx_tmp17 = (((val1->x * val1->x) + (val1->y * val1->y)) + (val1->z * val1->z));
HXDLIN( 542)				Float _hx_tmp18 = ::Math_obj::sqrt(_hx_tmp17);
HXDLIN( 542)				this->assertApproxEquals(((Float)0.5),_hx_tmp18,null(),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),542,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testVectorProj",f2,e8,43,ac)));
            			}
            		}
HXLINE( 546)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,a6,"a") =  ::hxmath::math::Vector4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 546)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,b6,"b") =  ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0));
HXDLIN( 546)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,self8,"self") =  ::hxmath::math::Vector4Default_obj::__new(a6->x,a6->y,a6->z,a6->w);
HXDLIN( 546)		HX_VARI_NAME( Float,s6,"s") = ((Float)((((self8->x * b6->x) + (self8->y * b6->y)) + (self8->z * b6->z)) + (self8->w * b6->w)) / (Float)((((b6->x * b6->x) + (b6->y * b6->y)) + (b6->z * b6->z)) + (b6->w * b6->w)));
HXDLIN( 546)		{
HXLINE( 546)			HX_VARI_NAME( Int,_g7,"_g") = (int)0;
HXDLIN( 546)			while((_g7 < (int)4)){
HXLINE( 546)				HX_VARI_NAME( Int,i6,"i") = _g7++;
HXDLIN( 546)				{
HXLINE( 546)					 ::Dynamic _hx_tmp19;
HXDLIN( 546)					switch((int)(i6)){
            						case (int)0: {
HXLINE( 546)							_hx_tmp19 = b6->x;
            						}
            						break;
            						case (int)1: {
HXLINE( 546)							_hx_tmp19 = b6->y;
            						}
            						break;
            						case (int)2: {
HXLINE( 546)							_hx_tmp19 = b6->z;
            						}
            						break;
            						case (int)3: {
HXLINE( 546)							_hx_tmp19 = b6->w;
            						}
            						break;
            						default:{
HXLINE( 546)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 546)					HX_VARI_NAME( Float,value6,"value") = ( (Float)(_hx_tmp19) );
HXDLIN( 546)					switch((int)(i6)){
            						case (int)0: {
HXLINE( 546)							self8->x = value6;
            						}
            						break;
            						case (int)1: {
HXLINE( 546)							self8->y = value6;
            						}
            						break;
            						case (int)2: {
HXLINE( 546)							self8->z = value6;
            						}
            						break;
            						case (int)3: {
HXLINE( 546)							self8->w = value6;
            						}
            						break;
            						default:{
HXLINE( 546)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXDLIN( 546)		{
HXLINE( 546)			hx::MultEq(self8->x,s6);
HXDLIN( 546)			hx::MultEq(self8->y,s6);
HXDLIN( 546)			hx::MultEq(self8->z,s6);
HXDLIN( 546)			hx::MultEq(self8->w,s6);
            		}
HXLINE( 547)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,a7,"a") =  ::hxmath::math::Vector4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 547)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,b7,"b") =  ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0));
HXDLIN( 547)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,self9,"self") =  ::hxmath::math::Vector4Default_obj::__new(a7->x,a7->y,a7->z,a7->w);
HXDLIN( 547)		HX_VARI_NAME( Float,s7,"s") = ((Float)((((self9->x * b7->x) + (self9->y * b7->y)) + (self9->z * b7->z)) + (self9->w * b7->w)) / (Float)((((b7->x * b7->x) + (b7->y * b7->y)) + (b7->z * b7->z)) + (b7->w * b7->w)));
HXDLIN( 547)		{
HXLINE( 547)			HX_VARI_NAME( Int,_g8,"_g") = (int)0;
HXDLIN( 547)			while((_g8 < (int)4)){
HXLINE( 547)				HX_VARI_NAME( Int,i7,"i") = _g8++;
HXDLIN( 547)				{
HXLINE( 547)					 ::Dynamic _hx_tmp20;
HXDLIN( 547)					switch((int)(i7)){
            						case (int)0: {
HXLINE( 547)							_hx_tmp20 = b7->x;
            						}
            						break;
            						case (int)1: {
HXLINE( 547)							_hx_tmp20 = b7->y;
            						}
            						break;
            						case (int)2: {
HXLINE( 547)							_hx_tmp20 = b7->z;
            						}
            						break;
            						case (int)3: {
HXLINE( 547)							_hx_tmp20 = b7->w;
            						}
            						break;
            						default:{
HXLINE( 547)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 547)					HX_VARI_NAME( Float,value7,"value") = ( (Float)(_hx_tmp20) );
HXDLIN( 547)					switch((int)(i7)){
            						case (int)0: {
HXLINE( 547)							self9->x = value7;
            						}
            						break;
            						case (int)1: {
HXLINE( 547)							self9->y = value7;
            						}
            						break;
            						case (int)2: {
HXLINE( 547)							self9->z = value7;
            						}
            						break;
            						case (int)3: {
HXLINE( 547)							self9->w = value7;
            						}
            						break;
            						default:{
HXLINE( 547)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXDLIN( 547)		{
HXLINE( 547)			hx::MultEq(self9->x,s7);
HXDLIN( 547)			hx::MultEq(self9->y,s7);
HXDLIN( 547)			hx::MultEq(self9->z,s7);
HXDLIN( 547)			hx::MultEq(self9->w,s7);
            		}
HXLINE( 548)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,a8,"a") =  ::hxmath::math::Vector4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 548)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,b8,"b") =  ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN( 548)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,self10,"self") =  ::hxmath::math::Vector4Default_obj::__new(a8->x,a8->y,a8->z,a8->w);
HXDLIN( 548)		HX_VARI_NAME( Float,s8,"s") = ((Float)((((self10->x * b8->x) + (self10->y * b8->y)) + (self10->z * b8->z)) + (self10->w * b8->w)) / (Float)((((b8->x * b8->x) + (b8->y * b8->y)) + (b8->z * b8->z)) + (b8->w * b8->w)));
HXDLIN( 548)		{
HXLINE( 548)			HX_VARI_NAME( Int,_g9,"_g") = (int)0;
HXDLIN( 548)			while((_g9 < (int)4)){
HXLINE( 548)				HX_VARI_NAME( Int,i8,"i") = _g9++;
HXDLIN( 548)				{
HXLINE( 548)					 ::Dynamic _hx_tmp21;
HXDLIN( 548)					switch((int)(i8)){
            						case (int)0: {
HXLINE( 548)							_hx_tmp21 = b8->x;
            						}
            						break;
            						case (int)1: {
HXLINE( 548)							_hx_tmp21 = b8->y;
            						}
            						break;
            						case (int)2: {
HXLINE( 548)							_hx_tmp21 = b8->z;
            						}
            						break;
            						case (int)3: {
HXLINE( 548)							_hx_tmp21 = b8->w;
            						}
            						break;
            						default:{
HXLINE( 548)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 548)					HX_VARI_NAME( Float,value8,"value") = ( (Float)(_hx_tmp21) );
HXDLIN( 548)					switch((int)(i8)){
            						case (int)0: {
HXLINE( 548)							self10->x = value8;
            						}
            						break;
            						case (int)1: {
HXLINE( 548)							self10->y = value8;
            						}
            						break;
            						case (int)2: {
HXLINE( 548)							self10->z = value8;
            						}
            						break;
            						case (int)3: {
HXLINE( 548)							self10->w = value8;
            						}
            						break;
            						default:{
HXLINE( 548)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXDLIN( 548)		{
HXLINE( 548)			hx::MultEq(self10->x,s8);
HXDLIN( 548)			hx::MultEq(self10->y,s8);
HXDLIN( 548)			hx::MultEq(self10->z,s8);
HXDLIN( 548)			hx::MultEq(self10->w,s8);
            		}
HXLINE( 549)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,a9,"a") =  ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0));
HXDLIN( 549)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,b9,"b") =  ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0));
HXDLIN( 549)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,self11,"self") =  ::hxmath::math::Vector4Default_obj::__new(a9->x,a9->y,a9->z,a9->w);
HXDLIN( 549)		HX_VARI_NAME( Float,s9,"s") = ((Float)((((self11->x * b9->x) + (self11->y * b9->y)) + (self11->z * b9->z)) + (self11->w * b9->w)) / (Float)((((b9->x * b9->x) + (b9->y * b9->y)) + (b9->z * b9->z)) + (b9->w * b9->w)));
HXDLIN( 549)		{
HXLINE( 549)			HX_VARI_NAME( Int,_g10,"_g") = (int)0;
HXDLIN( 549)			while((_g10 < (int)4)){
HXLINE( 549)				HX_VARI_NAME( Int,i9,"i") = _g10++;
HXDLIN( 549)				{
HXLINE( 549)					 ::Dynamic _hx_tmp22;
HXDLIN( 549)					switch((int)(i9)){
            						case (int)0: {
HXLINE( 549)							_hx_tmp22 = b9->x;
            						}
            						break;
            						case (int)1: {
HXLINE( 549)							_hx_tmp22 = b9->y;
            						}
            						break;
            						case (int)2: {
HXLINE( 549)							_hx_tmp22 = b9->z;
            						}
            						break;
            						case (int)3: {
HXLINE( 549)							_hx_tmp22 = b9->w;
            						}
            						break;
            						default:{
HXLINE( 549)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 549)					HX_VARI_NAME( Float,value9,"value") = ( (Float)(_hx_tmp22) );
HXDLIN( 549)					switch((int)(i9)){
            						case (int)0: {
HXLINE( 549)							self11->x = value9;
            						}
            						break;
            						case (int)1: {
HXLINE( 549)							self11->y = value9;
            						}
            						break;
            						case (int)2: {
HXLINE( 549)							self11->z = value9;
            						}
            						break;
            						case (int)3: {
HXLINE( 549)							self11->w = value9;
            						}
            						break;
            						default:{
HXLINE( 549)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXDLIN( 549)		{
HXLINE( 549)			hx::MultEq(self11->x,s9);
HXDLIN( 549)			hx::MultEq(self11->y,s9);
HXDLIN( 549)			hx::MultEq(self11->z,s9);
HXDLIN( 549)			hx::MultEq(self11->w,s9);
            		}
HXLINE( 550)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,a10,"a") =  ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0));
HXDLIN( 550)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,b10,"b") =  ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN( 550)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,self12,"self") =  ::hxmath::math::Vector4Default_obj::__new(a10->x,a10->y,a10->z,a10->w);
HXDLIN( 550)		HX_VARI_NAME( Float,s10,"s") = ((Float)((((self12->x * b10->x) + (self12->y * b10->y)) + (self12->z * b10->z)) + (self12->w * b10->w)) / (Float)((((b10->x * b10->x) + (b10->y * b10->y)) + (b10->z * b10->z)) + (b10->w * b10->w)));
HXDLIN( 550)		{
HXLINE( 550)			HX_VARI_NAME( Int,_g11,"_g") = (int)0;
HXDLIN( 550)			while((_g11 < (int)4)){
HXLINE( 550)				HX_VARI_NAME( Int,i10,"i") = _g11++;
HXDLIN( 550)				{
HXLINE( 550)					 ::Dynamic _hx_tmp23;
HXDLIN( 550)					switch((int)(i10)){
            						case (int)0: {
HXLINE( 550)							_hx_tmp23 = b10->x;
            						}
            						break;
            						case (int)1: {
HXLINE( 550)							_hx_tmp23 = b10->y;
            						}
            						break;
            						case (int)2: {
HXLINE( 550)							_hx_tmp23 = b10->z;
            						}
            						break;
            						case (int)3: {
HXLINE( 550)							_hx_tmp23 = b10->w;
            						}
            						break;
            						default:{
HXLINE( 550)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 550)					HX_VARI_NAME( Float,value10,"value") = ( (Float)(_hx_tmp23) );
HXDLIN( 550)					switch((int)(i10)){
            						case (int)0: {
HXLINE( 550)							self12->x = value10;
            						}
            						break;
            						case (int)1: {
HXLINE( 550)							self12->y = value10;
            						}
            						break;
            						case (int)2: {
HXLINE( 550)							self12->z = value10;
            						}
            						break;
            						case (int)3: {
HXLINE( 550)							self12->w = value10;
            						}
            						break;
            						default:{
HXLINE( 550)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXDLIN( 550)		{
HXLINE( 550)			hx::MultEq(self12->x,s10);
HXDLIN( 550)			hx::MultEq(self12->y,s10);
HXDLIN( 550)			hx::MultEq(self12->z,s10);
HXDLIN( 550)			hx::MultEq(self12->w,s10);
            		}
HXLINE( 551)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,a11,"a") =  ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0));
HXDLIN( 551)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,b11,"b") =  ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN( 551)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,self13,"self") =  ::hxmath::math::Vector4Default_obj::__new(a11->x,a11->y,a11->z,a11->w);
HXDLIN( 551)		HX_VARI_NAME( Float,s11,"s") = ((Float)((((self13->x * b11->x) + (self13->y * b11->y)) + (self13->z * b11->z)) + (self13->w * b11->w)) / (Float)((((b11->x * b11->x) + (b11->y * b11->y)) + (b11->z * b11->z)) + (b11->w * b11->w)));
HXDLIN( 551)		{
HXLINE( 551)			HX_VARI_NAME( Int,_g12,"_g") = (int)0;
HXDLIN( 551)			while((_g12 < (int)4)){
HXLINE( 551)				HX_VARI_NAME( Int,i11,"i") = _g12++;
HXDLIN( 551)				{
HXLINE( 551)					 ::Dynamic _hx_tmp24;
HXDLIN( 551)					switch((int)(i11)){
            						case (int)0: {
HXLINE( 551)							_hx_tmp24 = b11->x;
            						}
            						break;
            						case (int)1: {
HXLINE( 551)							_hx_tmp24 = b11->y;
            						}
            						break;
            						case (int)2: {
HXLINE( 551)							_hx_tmp24 = b11->z;
            						}
            						break;
            						case (int)3: {
HXLINE( 551)							_hx_tmp24 = b11->w;
            						}
            						break;
            						default:{
HXLINE( 551)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 551)					HX_VARI_NAME( Float,value11,"value") = ( (Float)(_hx_tmp24) );
HXDLIN( 551)					switch((int)(i11)){
            						case (int)0: {
HXLINE( 551)							self13->x = value11;
            						}
            						break;
            						case (int)1: {
HXLINE( 551)							self13->y = value11;
            						}
            						break;
            						case (int)2: {
HXLINE( 551)							self13->z = value11;
            						}
            						break;
            						case (int)3: {
HXLINE( 551)							self13->w = value11;
            						}
            						break;
            						default:{
HXLINE( 551)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXDLIN( 551)		{
HXLINE( 551)			hx::MultEq(self13->x,s11);
HXDLIN( 551)			hx::MultEq(self13->y,s11);
HXDLIN( 551)			hx::MultEq(self13->z,s11);
HXDLIN( 551)			hx::MultEq(self13->w,s11);
            		}
HXLINE( 545)		HX_VARI( ::Array< ::Dynamic>,v4AxesProj) = ::Array_obj< ::Dynamic>::__new(6)->init(0,self8)->init(1,self9)->init(2,self10)->init(3,self11)->init(4,self12)->init(5,self13);
HXLINE( 554)		{
HXLINE( 554)			HX_VARI_NAME( Int,_g13,"_g") = (int)0;
HXDLIN( 554)			while((_g13 < v4AxesProj->length)){
HXLINE( 554)				HX_VARI_NAME(  ::hxmath::math::Vector4Default,v1,"v") = v4AxesProj->__get(_g13).StaticCast<  ::hxmath::math::Vector4Default >();
HXDLIN( 554)				++_g13;
HXLINE( 556)				HX_VARI_NAME(  ::hxmath::math::Vector4Default,b12,"b") =  ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 556)				Bool _hx_tmp25;
HXDLIN( 556)				Bool _hx_tmp26;
HXDLIN( 556)				if (hx::IsNull( v1 )) {
HXLINE( 556)					_hx_tmp26 = hx::IsNull( b12 );
            				}
            				else {
HXLINE( 556)					_hx_tmp26 = false;
            				}
HXDLIN( 556)				if (!(_hx_tmp26)) {
HXLINE( 556)					Bool _hx_tmp27;
HXDLIN( 556)					Bool _hx_tmp28;
HXDLIN( 556)					Bool _hx_tmp29;
HXDLIN( 556)					Bool _hx_tmp30;
HXDLIN( 556)					if (hx::IsNotNull( v1 )) {
HXLINE( 556)						_hx_tmp30 = hx::IsNotNull( b12 );
            					}
            					else {
HXLINE( 556)						_hx_tmp30 = false;
            					}
HXDLIN( 556)					if (_hx_tmp30) {
HXLINE( 556)						_hx_tmp29 = (v1->x == b12->x);
            					}
            					else {
HXLINE( 556)						_hx_tmp29 = false;
            					}
HXDLIN( 556)					if (_hx_tmp29) {
HXLINE( 556)						_hx_tmp28 = (v1->y == b12->y);
            					}
            					else {
HXLINE( 556)						_hx_tmp28 = false;
            					}
HXDLIN( 556)					if (_hx_tmp28) {
HXLINE( 556)						_hx_tmp27 = (v1->z == b12->z);
            					}
            					else {
HXLINE( 556)						_hx_tmp27 = false;
            					}
HXDLIN( 556)					if (_hx_tmp27) {
HXLINE( 556)						_hx_tmp25 = (v1->w == b12->w);
            					}
            					else {
HXLINE( 556)						_hx_tmp25 = false;
            					}
            				}
            				else {
HXLINE( 556)					_hx_tmp25 = true;
            				}
HXDLIN( 556)				this->assertTrue(_hx_tmp25,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),556,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testVectorProj",f2,e8,43,ac)));
            			}
            		}
HXLINE( 559)		HX_VARI(  ::hxmath::math::Vector4Default,v4Mid) =  ::hxmath::math::Vector4Default_obj::__new(((Float)0.5),((Float)0.5),((Float)0.5),((Float)0.5));
HXLINE( 561)		HX_VARI(  ::List,v4MidProjOntoAxes) = ::Lambda_obj::map(::Array_obj< ::Dynamic>::__new(4)->init(0, ::hxmath::math::Vector4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0)))->init(1, ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0)))->init(2, ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0)))->init(3, ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0))), ::Dynamic(new _hx_Closure_2(v4Mid)));
HXLINE( 563)		{
HXLINE( 563)			HX_VARI_NAME(  ::_List::ListNode,_g_head2,"_g_head") = v4MidProjOntoAxes->h;
HXDLIN( 563)			while(hx::IsNotNull( _g_head2 )){
HXLINE( 563)				HX_VARI_NAME(  ::hxmath::math::Vector4Default,val2,"val") = ( ( ::hxmath::math::Vector4Default)(_g_head2->item) );
HXLINE( 510)				_g_head2 = _g_head2->next;
HXLINE( 565)				Float _hx_tmp32 = ((((val2->x * val2->x) + (val2->y * val2->y)) + (val2->z * val2->z)) + (val2->w * val2->w));
HXDLIN( 565)				Float _hx_tmp33 = ::Math_obj::sqrt(_hx_tmp32);
HXDLIN( 565)				this->assertApproxEquals(((Float)0.5),_hx_tmp33,null(),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),565,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testVectorProj",f2,e8,43,ac)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStructures_obj,testVectorProj,(void))

void TestStructures_obj::testNormalizeTo(){
            	HX_STACK_FRAME("test.TestStructures","testNormalizeTo",0x35233756,"test.TestStructures.testNormalizeTo","test/TestStructures.hx",570,0x1c38d1cf)
            	HX_STACK_THIS(this)
HXLINE( 571)		{
HXLINE( 571)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 571)			while((_g < (int)30)){
HXLINE( 571)				++_g;
HXLINE( 573)				HX_VARI(  ::hxmath::math::Vector2Default,v) = this->randomVector2(null());
HXLINE( 574)				Float _hx_tmp = this->randomFloat(null(),null(),null());
HXDLIN( 574)				HX_VARI( Float,newLength) = ::Math_obj::abs(_hx_tmp);
HXLINE( 575)				{
HXLINE( 575)					Float _hx_tmp1 = ((v->x * v->x) + (v->y * v->y));
HXDLIN( 575)					HX_VARI( Float,length) = ::Math_obj::sqrt(_hx_tmp1);
HXDLIN( 575)					if ((length > ((Float)0.0))) {
HXLINE( 575)						hx::DivEq(v->x,length);
HXDLIN( 575)						hx::DivEq(v->y,length);
            					}
            				}
HXDLIN( 575)				{
HXLINE( 575)					hx::MultEq(v->x,newLength);
HXDLIN( 575)					hx::MultEq(v->y,newLength);
            				}
HXDLIN( 575)				HX_VARI(  ::hxmath::math::Vector2Default,self) = v;
HXDLIN( 575)				Float _hx_tmp2 = ((self->x * self->x) + (self->y * self->y));
HXDLIN( 575)				Float _hx_tmp3 = ::Math_obj::sqrt(_hx_tmp2);
HXDLIN( 575)				this->assertApproxEquals(newLength,_hx_tmp3,null(),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),575,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testNormalizeTo",36,2b,d7,14)));
            			}
            		}
HXLINE( 578)		{
HXLINE( 578)			HX_VARI_NAME( Int,_g1,"_g") = (int)0;
HXDLIN( 578)			while((_g1 < (int)30)){
HXLINE( 578)				++_g1;
HXLINE( 580)				HX_VARI_NAME(  ::hxmath::math::Vector3Default,v1,"v") = this->randomVector3(null());
HXLINE( 581)				Float _hx_tmp4 = this->randomFloat(null(),null(),null());
HXDLIN( 581)				HX_VARI_NAME( Float,newLength1,"newLength") = ::Math_obj::abs(_hx_tmp4);
HXLINE( 582)				{
HXLINE( 582)					Float _hx_tmp5 = (((v1->x * v1->x) + (v1->y * v1->y)) + (v1->z * v1->z));
HXDLIN( 582)					HX_VARI_NAME( Float,length1,"length") = ::Math_obj::sqrt(_hx_tmp5);
HXDLIN( 582)					if ((length1 > ((Float)0.0))) {
HXLINE( 582)						hx::DivEq(v1->x,length1);
HXDLIN( 582)						hx::DivEq(v1->y,length1);
HXDLIN( 582)						hx::DivEq(v1->z,length1);
            					}
            				}
HXDLIN( 582)				{
HXLINE( 582)					hx::MultEq(v1->x,newLength1);
HXDLIN( 582)					hx::MultEq(v1->y,newLength1);
HXDLIN( 582)					hx::MultEq(v1->z,newLength1);
            				}
HXDLIN( 582)				HX_VARI_NAME(  ::hxmath::math::Vector3Default,self1,"self") = v1;
HXDLIN( 582)				Float _hx_tmp6 = (((self1->x * self1->x) + (self1->y * self1->y)) + (self1->z * self1->z));
HXDLIN( 582)				Float _hx_tmp7 = ::Math_obj::sqrt(_hx_tmp6);
HXDLIN( 582)				this->assertApproxEquals(newLength1,_hx_tmp7,null(),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),582,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testNormalizeTo",36,2b,d7,14)));
            			}
            		}
HXLINE( 585)		{
HXLINE( 585)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 585)			while((_g2 < (int)30)){
HXLINE( 585)				++_g2;
HXLINE( 587)				HX_VARI_NAME(  ::hxmath::math::Vector4Default,v2,"v") = this->randomVector4(null());
HXLINE( 588)				Float _hx_tmp8 = this->randomFloat(null(),null(),null());
HXDLIN( 588)				HX_VARI_NAME( Float,newLength2,"newLength") = ::Math_obj::abs(_hx_tmp8);
HXLINE( 589)				{
HXLINE( 589)					Float _hx_tmp9 = ((((v2->x * v2->x) + (v2->y * v2->y)) + (v2->z * v2->z)) + (v2->w * v2->w));
HXDLIN( 589)					HX_VARI_NAME( Float,length2,"length") = ::Math_obj::sqrt(_hx_tmp9);
HXDLIN( 589)					if ((length2 > ((Float)0.0))) {
HXLINE( 589)						hx::DivEq(v2->x,length2);
HXDLIN( 589)						hx::DivEq(v2->y,length2);
HXDLIN( 589)						hx::DivEq(v2->z,length2);
HXDLIN( 589)						hx::DivEq(v2->w,length2);
            					}
            				}
HXDLIN( 589)				{
HXLINE( 589)					hx::MultEq(v2->x,newLength2);
HXDLIN( 589)					hx::MultEq(v2->y,newLength2);
HXDLIN( 589)					hx::MultEq(v2->z,newLength2);
HXDLIN( 589)					hx::MultEq(v2->w,newLength2);
            				}
HXDLIN( 589)				HX_VARI_NAME(  ::hxmath::math::Vector4Default,self2,"self") = v2;
HXDLIN( 589)				Float _hx_tmp10 = ((((self2->x * self2->x) + (self2->y * self2->y)) + (self2->z * self2->z)) + (self2->w * self2->w));
HXDLIN( 589)				Float _hx_tmp11 = ::Math_obj::sqrt(_hx_tmp10);
HXDLIN( 589)				this->assertApproxEquals(newLength2,_hx_tmp11,null(),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),589,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testNormalizeTo",36,2b,d7,14)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStructures_obj,testNormalizeTo,(void))

void TestStructures_obj::testClamp(){
            	HX_STACK_FRAME("test.TestStructures","testClamp",0x5058e569,"test.TestStructures.testClamp","test/TestStructures.hx",594,0x1c38d1cf)
            	HX_STACK_THIS(this)
HXLINE( 595)		{
HXLINE( 595)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 595)			while((_g < (int)30)){
HXLINE( 595)				++_g;
HXLINE( 597)				HX_VARI(  ::hxmath::math::Vector2Default,_g2) = this->randomVector2(null());
HXDLIN( 597)				HX_VARI(  ::hxmath::math::Vector2Default,self) =  ::hxmath::math::Vector2Default_obj::__new(_g2->x,_g2->y);
HXDLIN( 597)				hx::MultEq(self->x,((Float)10.0));
HXDLIN( 597)				hx::MultEq(self->y,((Float)10.0));
HXLINE( 602)				Float _hx_tmp = ((self->x * self->x) + (self->y * self->y));
HXDLIN( 602)				HX_VARI( Float,length) = ::Math_obj::sqrt(_hx_tmp);
HXDLIN( 602)				if ((length < ((Float)3.0))) {
HXLINE( 602)					{
HXLINE( 602)						Float _hx_tmp1 = ((self->x * self->x) + (self->y * self->y));
HXDLIN( 602)						HX_VARI_NAME( Float,length1,"length") = ::Math_obj::sqrt(_hx_tmp1);
HXDLIN( 602)						if ((length1 > ((Float)0.0))) {
HXLINE( 602)							hx::DivEq(self->x,length1);
HXDLIN( 602)							hx::DivEq(self->y,length1);
            						}
            					}
HXDLIN( 602)					{
HXLINE( 602)						hx::MultEq(self->x,((Float)3.0));
HXDLIN( 602)						hx::MultEq(self->y,((Float)3.0));
            					}
            				}
            				else {
HXLINE( 602)					if ((length > ((Float)7.0))) {
HXLINE( 602)						{
HXLINE( 602)							Float _hx_tmp2 = ((self->x * self->x) + (self->y * self->y));
HXDLIN( 602)							HX_VARI_NAME( Float,length2,"length") = ::Math_obj::sqrt(_hx_tmp2);
HXDLIN( 602)							if ((length2 > ((Float)0.0))) {
HXLINE( 602)								hx::DivEq(self->x,length2);
HXDLIN( 602)								hx::DivEq(self->y,length2);
            							}
            						}
HXDLIN( 602)						{
HXLINE( 602)							hx::MultEq(self->x,((Float)7.0));
HXDLIN( 602)							hx::MultEq(self->y,((Float)7.0));
            						}
            					}
            				}
HXLINE( 604)				Float _hx_tmp3 = ((self->x * self->x) + (self->y * self->y));
HXDLIN( 604)				Float _hx_tmp4 = ::Math_obj::sqrt(_hx_tmp3);
HXDLIN( 604)				this->assertTrue((_hx_tmp4 >= ((Float)2.999999)),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),604,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testClamp",49,b1,5a,11)));
HXLINE( 605)				Float _hx_tmp5 = ((self->x * self->x) + (self->y * self->y));
HXDLIN( 605)				Float _hx_tmp6 = ::Math_obj::sqrt(_hx_tmp5);
HXDLIN( 605)				this->assertTrue((_hx_tmp6 <= ((Float)7.000001)),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),605,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testClamp",49,b1,5a,11)));
            			}
            		}
HXLINE( 608)		{
HXLINE( 608)			HX_VARI_NAME( Int,_g1,"_g") = (int)0;
HXDLIN( 608)			while((_g1 < (int)30)){
HXLINE( 608)				++_g1;
HXLINE( 610)				HX_VARI_NAME(  ::hxmath::math::Vector3Default,_g21,"_g2") = this->randomVector3(null());
HXDLIN( 610)				HX_VARI_NAME(  ::hxmath::math::Vector3Default,self1,"self") =  ::hxmath::math::Vector3Default_obj::__new(_g21->x,_g21->y,_g21->z);
HXDLIN( 610)				hx::MultEq(self1->x,((Float)10.0));
HXDLIN( 610)				hx::MultEq(self1->y,((Float)10.0));
HXDLIN( 610)				hx::MultEq(self1->z,((Float)10.0));
HXLINE( 615)				Float _hx_tmp7 = (((self1->x * self1->x) + (self1->y * self1->y)) + (self1->z * self1->z));
HXDLIN( 615)				HX_VARI_NAME( Float,length3,"length") = ::Math_obj::sqrt(_hx_tmp7);
HXDLIN( 615)				if ((length3 < ((Float)3.0))) {
HXLINE( 615)					{
HXLINE( 615)						Float _hx_tmp8 = (((self1->x * self1->x) + (self1->y * self1->y)) + (self1->z * self1->z));
HXDLIN( 615)						HX_VARI_NAME( Float,length4,"length") = ::Math_obj::sqrt(_hx_tmp8);
HXDLIN( 615)						if ((length4 > ((Float)0.0))) {
HXLINE( 615)							hx::DivEq(self1->x,length4);
HXDLIN( 615)							hx::DivEq(self1->y,length4);
HXDLIN( 615)							hx::DivEq(self1->z,length4);
            						}
            					}
HXDLIN( 615)					{
HXLINE( 615)						hx::MultEq(self1->x,((Float)3.0));
HXDLIN( 615)						hx::MultEq(self1->y,((Float)3.0));
HXDLIN( 615)						hx::MultEq(self1->z,((Float)3.0));
            					}
            				}
            				else {
HXLINE( 615)					if ((length3 > ((Float)7.0))) {
HXLINE( 615)						{
HXLINE( 615)							Float _hx_tmp9 = (((self1->x * self1->x) + (self1->y * self1->y)) + (self1->z * self1->z));
HXDLIN( 615)							HX_VARI_NAME( Float,length5,"length") = ::Math_obj::sqrt(_hx_tmp9);
HXDLIN( 615)							if ((length5 > ((Float)0.0))) {
HXLINE( 615)								hx::DivEq(self1->x,length5);
HXDLIN( 615)								hx::DivEq(self1->y,length5);
HXDLIN( 615)								hx::DivEq(self1->z,length5);
            							}
            						}
HXDLIN( 615)						{
HXLINE( 615)							hx::MultEq(self1->x,((Float)7.0));
HXDLIN( 615)							hx::MultEq(self1->y,((Float)7.0));
HXDLIN( 615)							hx::MultEq(self1->z,((Float)7.0));
            						}
            					}
            				}
HXLINE( 617)				Float _hx_tmp10 = (((self1->x * self1->x) + (self1->y * self1->y)) + (self1->z * self1->z));
HXDLIN( 617)				Float _hx_tmp11 = ::Math_obj::sqrt(_hx_tmp10);
HXDLIN( 617)				this->assertTrue((_hx_tmp11 >= ((Float)2.999999)),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),617,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testClamp",49,b1,5a,11)));
HXLINE( 618)				Float _hx_tmp12 = (((self1->x * self1->x) + (self1->y * self1->y)) + (self1->z * self1->z));
HXDLIN( 618)				Float _hx_tmp13 = ::Math_obj::sqrt(_hx_tmp12);
HXDLIN( 618)				this->assertTrue((_hx_tmp13 <= ((Float)7.000001)),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),618,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testClamp",49,b1,5a,11)));
            			}
            		}
HXLINE( 621)		{
HXLINE( 621)			HX_VARI_NAME( Int,_g3,"_g") = (int)0;
HXDLIN( 621)			while((_g3 < (int)30)){
HXLINE( 621)				++_g3;
HXLINE( 623)				HX_VARI_NAME(  ::hxmath::math::Vector4Default,_g22,"_g2") = this->randomVector4(null());
HXDLIN( 623)				HX_VARI_NAME(  ::hxmath::math::Vector4Default,self2,"self") =  ::hxmath::math::Vector4Default_obj::__new(_g22->x,_g22->y,_g22->z,_g22->w);
HXDLIN( 623)				hx::MultEq(self2->x,((Float)10.0));
HXDLIN( 623)				hx::MultEq(self2->y,((Float)10.0));
HXDLIN( 623)				hx::MultEq(self2->z,((Float)10.0));
HXDLIN( 623)				hx::MultEq(self2->w,((Float)10.0));
HXLINE( 628)				Float _hx_tmp14 = ((((self2->x * self2->x) + (self2->y * self2->y)) + (self2->z * self2->z)) + (self2->w * self2->w));
HXDLIN( 628)				HX_VARI_NAME( Float,length6,"length") = ::Math_obj::sqrt(_hx_tmp14);
HXDLIN( 628)				if ((length6 < ((Float)3.0))) {
HXLINE( 628)					{
HXLINE( 628)						Float _hx_tmp15 = ((((self2->x * self2->x) + (self2->y * self2->y)) + (self2->z * self2->z)) + (self2->w * self2->w));
HXDLIN( 628)						HX_VARI_NAME( Float,length7,"length") = ::Math_obj::sqrt(_hx_tmp15);
HXDLIN( 628)						if ((length7 > ((Float)0.0))) {
HXLINE( 628)							hx::DivEq(self2->x,length7);
HXDLIN( 628)							hx::DivEq(self2->y,length7);
HXDLIN( 628)							hx::DivEq(self2->z,length7);
HXDLIN( 628)							hx::DivEq(self2->w,length7);
            						}
            					}
HXDLIN( 628)					{
HXLINE( 628)						hx::MultEq(self2->x,((Float)3.0));
HXDLIN( 628)						hx::MultEq(self2->y,((Float)3.0));
HXDLIN( 628)						hx::MultEq(self2->z,((Float)3.0));
HXDLIN( 628)						hx::MultEq(self2->w,((Float)3.0));
            					}
            				}
            				else {
HXLINE( 628)					if ((length6 > ((Float)7.0))) {
HXLINE( 628)						{
HXLINE( 628)							Float _hx_tmp16 = ((((self2->x * self2->x) + (self2->y * self2->y)) + (self2->z * self2->z)) + (self2->w * self2->w));
HXDLIN( 628)							HX_VARI_NAME( Float,length8,"length") = ::Math_obj::sqrt(_hx_tmp16);
HXDLIN( 628)							if ((length8 > ((Float)0.0))) {
HXLINE( 628)								hx::DivEq(self2->x,length8);
HXDLIN( 628)								hx::DivEq(self2->y,length8);
HXDLIN( 628)								hx::DivEq(self2->z,length8);
HXDLIN( 628)								hx::DivEq(self2->w,length8);
            							}
            						}
HXDLIN( 628)						{
HXLINE( 628)							hx::MultEq(self2->x,((Float)7.0));
HXDLIN( 628)							hx::MultEq(self2->y,((Float)7.0));
HXDLIN( 628)							hx::MultEq(self2->z,((Float)7.0));
HXDLIN( 628)							hx::MultEq(self2->w,((Float)7.0));
            						}
            					}
            				}
HXLINE( 630)				Float _hx_tmp17 = ((((self2->x * self2->x) + (self2->y * self2->y)) + (self2->z * self2->z)) + (self2->w * self2->w));
HXDLIN( 630)				Float _hx_tmp18 = ::Math_obj::sqrt(_hx_tmp17);
HXDLIN( 630)				this->assertTrue((_hx_tmp18 >= ((Float)2.999999)),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),630,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testClamp",49,b1,5a,11)));
HXLINE( 631)				Float _hx_tmp19 = ((((self2->x * self2->x) + (self2->y * self2->y)) + (self2->z * self2->z)) + (self2->w * self2->w));
HXDLIN( 631)				Float _hx_tmp20 = ::Math_obj::sqrt(_hx_tmp19);
HXDLIN( 631)				this->assertTrue((_hx_tmp20 <= ((Float)7.000001)),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),631,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testClamp",49,b1,5a,11)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStructures_obj,testClamp,(void))

void TestStructures_obj::testDistanceTo(){
            	HX_STACK_FRAME("test.TestStructures","testDistanceTo",0x2e50d2e2,"test.TestStructures.testDistanceTo","test/TestStructures.hx",636,0x1c38d1cf)
            	HX_STACK_THIS(this)
HXLINE( 637)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,this1,"this") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)0.0));
HXDLIN( 637)		HX_VARI(  ::hxmath::math::Vector2Default,b) =  ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)0.0));
HXDLIN( 637)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXDLIN( 637)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self1,"self") =  ::hxmath::math::Vector2Default_obj::__new(self->x,self->y);
HXDLIN( 637)		hx::SubEq(self1->x,b->x);
HXDLIN( 637)		hx::SubEq(self1->y,b->y);
HXDLIN( 637)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self2,"self") = self1;
HXDLIN( 637)		Float _hx_tmp = ((self2->x * self2->x) + (self2->y * self2->y));
HXDLIN( 637)		Float _hx_tmp1 = ::Math_obj::sqrt(_hx_tmp);
HXDLIN( 637)		this->assertApproxEquals(((Float)1.0),_hx_tmp1,null(),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),637,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testDistanceTo",02,fb,df,2b)));
HXLINE( 638)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,this2,"this") =  ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 638)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,b1,"b") =  ::hxmath::math::Vector3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0));
HXDLIN( 638)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self3,"self") = this2;
HXDLIN( 638)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self4,"self") =  ::hxmath::math::Vector3Default_obj::__new(self3->x,self3->y,self3->z);
HXDLIN( 638)		hx::SubEq(self4->x,b1->x);
HXDLIN( 638)		hx::SubEq(self4->y,b1->y);
HXDLIN( 638)		hx::SubEq(self4->z,b1->z);
HXDLIN( 638)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self5,"self") = self4;
HXDLIN( 638)		Float _hx_tmp2 = (((self5->x * self5->x) + (self5->y * self5->y)) + (self5->z * self5->z));
HXDLIN( 638)		Float _hx_tmp3 = ::Math_obj::sqrt(_hx_tmp2);
HXDLIN( 638)		this->assertApproxEquals(((Float)1.0),_hx_tmp3,null(),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),638,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testDistanceTo",02,fb,df,2b)));
HXLINE( 639)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,this3,"this") =  ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 639)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,b2,"b") =  ::hxmath::math::Vector4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 639)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,self6,"self") = this3;
HXDLIN( 639)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,self7,"self") =  ::hxmath::math::Vector4Default_obj::__new(self6->x,self6->y,self6->z,self6->w);
HXDLIN( 639)		hx::SubEq(self7->x,b2->x);
HXDLIN( 639)		hx::SubEq(self7->y,b2->y);
HXDLIN( 639)		hx::SubEq(self7->z,b2->z);
HXDLIN( 639)		hx::SubEq(self7->w,b2->w);
HXDLIN( 639)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,self8,"self") = self7;
HXDLIN( 639)		Float _hx_tmp4 = ((((self8->x * self8->x) + (self8->y * self8->y)) + (self8->z * self8->z)) + (self8->w * self8->w));
HXDLIN( 639)		Float _hx_tmp5 = ::Math_obj::sqrt(_hx_tmp4);
HXDLIN( 639)		this->assertApproxEquals(((Float)1.0),_hx_tmp5,null(),hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),639,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testDistanceTo",02,fb,df,2b)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStructures_obj,testDistanceTo,(void))

void TestStructures_obj::testSetAllFields(){
            	HX_STACK_FRAME("test.TestStructures","testSetAllFields",0x75c0a1ca,"test.TestStructures.testSetAllFields","test/TestStructures.hx",643,0x1c38d1cf)
            	HX_STACK_THIS(this)
HXLINE( 644)		HX_VARI(  ::hxmath::math::Vector2Default,self) =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)0.0));
HXDLIN( 644)		self->x = (int)23;
HXDLIN( 644)		self->y = (int)0;
HXLINE( 645)		this->assertEquals(((Float)23.0),self->x,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),645,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testSetAllFields",ea,11,82,53)));
HXLINE( 647)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self1,"self") =  ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 647)		self1->x = (int)23;
HXDLIN( 647)		self1->y = (int)0;
HXDLIN( 647)		self1->z = (int)0;
HXLINE( 648)		this->assertEquals(((Float)23.0),self1->x,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),648,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testSetAllFields",ea,11,82,53)));
HXLINE( 650)		HX_VARI_NAME(  ::hxmath::math::Vector4Default,self2,"self") =  ::hxmath::math::Vector4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 650)		self2->x = (int)23;
HXDLIN( 650)		self2->y = (int)0;
HXDLIN( 650)		self2->z = (int)0;
HXDLIN( 650)		self2->w = (int)0;
HXLINE( 651)		this->assertEquals(((Float)23.0),self2->x,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),651,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testSetAllFields",ea,11,82,53)));
HXLINE( 653)		HX_VARI_NAME(  ::hxmath::math::IntVector2Default,self3,"self") = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)0,(int)0);
HXDLIN( 653)		self3->x = (int)23;
HXDLIN( 653)		self3->y = (int)0;
HXLINE( 654)		this->assertEquals((int)23,self3->x,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),654,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testSetAllFields",ea,11,82,53)));
HXLINE( 656)		HX_VARI_NAME(  ::hxmath::math::QuaternionDefault,self4,"self") =  ::hxmath::math::QuaternionDefault_obj::__new((int)0,(int)0,(int)0,(int)0);
HXDLIN( 656)		self4->s = (int)23;
HXDLIN( 656)		self4->x = (int)0;
HXDLIN( 656)		self4->y = (int)0;
HXDLIN( 656)		self4->z = (int)0;
HXLINE( 657)		this->assertEquals(((Float)23.0),self4->s,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),657,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testSetAllFields",ea,11,82,53)));
HXLINE( 659)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,this1,"this") =  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 659)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,self5,"self") = this1;
HXDLIN( 659)		self5->a = (int)23;
HXDLIN( 659)		self5->b = (int)0;
HXDLIN( 659)		self5->c = (int)0;
HXDLIN( 659)		self5->d = (int)0;
HXDLIN( 659)		HX_VARI(  ::hxmath::math::Matrix2x2Default,m22) = this1;
HXLINE( 660)		this->assertEquals(((Float)23.0),m22->a,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),660,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testSetAllFields",ea,11,82,53)));
HXLINE( 662)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,self6,"self") =  ::hxmath::math::Matrix3x2Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 662)		self6->a = (int)23;
HXDLIN( 662)		self6->b = (int)0;
HXDLIN( 662)		self6->c = (int)0;
HXDLIN( 662)		self6->d = (int)0;
HXDLIN( 662)		self6->tx = (int)0;
HXDLIN( 662)		self6->ty = (int)0;
HXLINE( 663)		this->assertEquals(((Float)23.0),self6->a,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),663,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testSetAllFields",ea,11,82,53)));
HXLINE( 665)		HX_VARI_NAME(  ::hxmath::math::Matrix3x3Default,self7,"self") =  ::hxmath::math::Matrix3x3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 665)		self7->m00 = (int)23;
HXDLIN( 665)		self7->m10 = (int)0;
HXDLIN( 665)		self7->m20 = (int)0;
HXDLIN( 665)		self7->m01 = (int)0;
HXDLIN( 665)		self7->m11 = (int)0;
HXDLIN( 665)		self7->m21 = (int)0;
HXDLIN( 665)		self7->m02 = (int)0;
HXDLIN( 665)		self7->m12 = (int)0;
HXDLIN( 665)		self7->m22 = (int)0;
HXLINE( 666)		this->assertEquals(((Float)23.0),self7->m00,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),666,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testSetAllFields",ea,11,82,53)));
HXLINE( 668)		HX_VARI_NAME(  ::hxmath::math::Matrix4x4Default,self8,"self") =  ::hxmath::math::Matrix4x4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 668)		self8->m00 = (int)23;
HXDLIN( 668)		self8->m10 = (int)0;
HXDLIN( 668)		self8->m20 = (int)0;
HXDLIN( 668)		self8->m30 = (int)0;
HXDLIN( 668)		self8->m01 = (int)0;
HXDLIN( 668)		self8->m11 = (int)0;
HXDLIN( 668)		self8->m21 = (int)0;
HXDLIN( 668)		self8->m31 = (int)0;
HXDLIN( 668)		self8->m02 = (int)0;
HXDLIN( 668)		self8->m12 = (int)0;
HXDLIN( 668)		self8->m22 = (int)0;
HXDLIN( 668)		self8->m32 = (int)0;
HXDLIN( 668)		self8->m03 = (int)0;
HXDLIN( 668)		self8->m13 = (int)0;
HXDLIN( 668)		self8->m23 = (int)0;
HXDLIN( 668)		self8->m33 = (int)0;
HXLINE( 669)		this->assertEquals(((Float)23.0),self8->m00,hx::SourceInfo(HX_("TestStructures.hx",0c,b2,a3,e6),669,HX_("test.TestStructures",8e,2c,4e,ce),HX_("testSetAllFields",ea,11,82,53)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStructures_obj,testSetAllFields,(void))


TestStructures_obj::TestStructures_obj()
{
}

hx::Val TestStructures_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"testClone") ) { return hx::Val( testClone_dyn()); }
		if (HX_FIELD_EQ(inName,"testClamp") ) { return hx::Val( testClamp_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testEquals") ) { return hx::Val( testEquals_dyn()); }
		if (HX_FIELD_EQ(inName,"testAddSub") ) { return hx::Val( testAddSub_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testCopyToFrom") ) { return hx::Val( testCopyToFrom_dyn()); }
		if (HX_FIELD_EQ(inName,"testVectorProj") ) { return hx::Val( testVectorProj_dyn()); }
		if (HX_FIELD_EQ(inName,"testDistanceTo") ) { return hx::Val( testDistanceTo_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"testDeterminant") ) { return hx::Val( testDeterminant_dyn()); }
		if (HX_FIELD_EQ(inName,"testArrayAccess") ) { return hx::Val( testArrayAccess_dyn()); }
		if (HX_FIELD_EQ(inName,"testHasToString") ) { return hx::Val( testHasToString_dyn()); }
		if (HX_FIELD_EQ(inName,"testNormalizeTo") ) { return hx::Val( testNormalizeTo_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"testVectorMinMax") ) { return hx::Val( testVectorMinMax_dyn()); }
		if (HX_FIELD_EQ(inName,"testSetAllFields") ) { return hx::Val( testSetAllFields_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"testApplyScalarFunc") ) { return hx::Val( testApplyScalarFunc_dyn()); }
		if (HX_FIELD_EQ(inName,"testRowColAccessors") ) { return hx::Val( testRowColAccessors_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"testIntApplyScalarFunc") ) { return hx::Val( testIntApplyScalarFunc_dyn()); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"testEqualsNullShouldNotThrow") ) { return hx::Val( testEqualsNullShouldNotThrow_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestStructures_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestStructures_obj_sStaticStorageInfo = 0;
#endif

static ::String TestStructures_obj_sMemberFields[] = {
	HX_HCSTRING("testEquals","\x31","\x34","\xe7","\xd8"),
	HX_HCSTRING("testClone","\xab","\x51","\x65","\x11"),
	HX_HCSTRING("testAddSub","\xd1","\xff","\xfc","\xb7"),
	HX_HCSTRING("testDeterminant","\x63","\x4a","\xe4","\x86"),
	HX_HCSTRING("testArrayAccess","\xeb","\x1c","\x1d","\x4d"),
	HX_HCSTRING("testApplyScalarFunc","\x6c","\x4f","\x1c","\x88"),
	HX_HCSTRING("testIntApplyScalarFunc","\x61","\x2c","\xba","\x81"),
	HX_HCSTRING("testCopyToFrom","\x0c","\x9d","\x33","\xcf"),
	HX_HCSTRING("testRowColAccessors","\x74","\xd7","\xf6","\x0b"),
	HX_HCSTRING("testEqualsNullShouldNotThrow","\xde","\xa7","\xb4","\xef"),
	HX_HCSTRING("testHasToString","\xf4","\xa2","\xf4","\x5f"),
	HX_HCSTRING("testVectorMinMax","\xc7","\x58","\x59","\xd1"),
	HX_HCSTRING("testVectorProj","\xf2","\xe8","\x43","\xac"),
	HX_HCSTRING("testNormalizeTo","\x36","\x2b","\xd7","\x14"),
	HX_HCSTRING("testClamp","\x49","\xb1","\x5a","\x11"),
	HX_HCSTRING("testDistanceTo","\x02","\xfb","\xdf","\x2b"),
	HX_HCSTRING("testSetAllFields","\xea","\x11","\x82","\x53"),
	::String(null()) };

static void TestStructures_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestStructures_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestStructures_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestStructures_obj::__mClass,"__mClass");
};

#endif

hx::Class TestStructures_obj::__mClass;

void TestStructures_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("test.TestStructures","\x8e","\x2c","\x4e","\xce");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestStructures_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestStructures_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestStructures_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestStructures_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestStructures_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestStructures_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace test
