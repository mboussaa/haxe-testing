// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_hxmath_ds_DenseArray2
#include <hxmath/ds/DenseArray2.h>
#endif
#ifndef INCLUDED_hxmath_ds_IArray2
#include <hxmath/ds/IArray2.h>
#endif
#ifndef INCLUDED_hxmath_ds_SparseArray2
#include <hxmath/ds/SparseArray2.h>
#endif
#ifndef INCLUDED_hxmath_ds__DenseArray2_DenseArray2KeysIterator
#include <hxmath/ds/_DenseArray2/DenseArray2KeysIterator.h>
#endif
#ifndef INCLUDED_hxmath_ds__SparseArray2_SparseArray2OrderedKeysIterator
#include <hxmath/ds/_SparseArray2/SparseArray2OrderedKeysIterator.h>
#endif
#ifndef INCLUDED_hxmath_math_IntVector2Default
#include <hxmath/math/IntVector2Default.h>
#endif
#ifndef INCLUDED_hxmath_math__IntVector2_IntVector2_Impl_
#include <hxmath/math/_IntVector2/IntVector2_Impl_.h>
#endif
#ifndef INCLUDED_hxmath_math__ShortVector2_ShortVector2_Impl_
#include <hxmath/math/_ShortVector2/ShortVector2_Impl_.h>
#endif
#ifndef INCLUDED_nanotest_NanoTestAssertResult
#include <nanotest/NanoTestAssertResult.h>
#endif
#ifndef INCLUDED_nanotest_NanoTestCase
#include <nanotest/NanoTestCase.h>
#endif
#ifndef INCLUDED_test_MathTestCase
#include <test/MathTestCase.h>
#endif
#ifndef INCLUDED_test_TestDataStructures
#include <test/TestDataStructures.h>
#endif

namespace test{

void TestDataStructures_obj::__construct(){
            	HX_STACK_FRAME("test.TestDataStructures","new",0xb063bb4a,"test.TestDataStructures.new","test/TestDataStructures.hx",16,0xe01305c5)
            	HX_STACK_THIS(this)
HXLINE(  16)		super::__construct(hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),16,HX_("test.TestDataStructures",58,0e,46,2f),HX_("new",60,d0,53,00)));
            	}

Dynamic TestDataStructures_obj::__CreateEmpty() { return new TestDataStructures_obj; }

hx::ObjectPtr< TestDataStructures_obj > TestDataStructures_obj::__new()
{
	hx::ObjectPtr< TestDataStructures_obj > _hx_result = new TestDataStructures_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestDataStructures_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestDataStructures_obj > _hx_result = new TestDataStructures_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestDataStructures_obj::testArray2InterfaceCast(){
            	HX_STACK_FRAME("test.TestDataStructures","testArray2InterfaceCast",0x01c69397,"test.TestDataStructures.testArray2InterfaceCast","test/TestDataStructures.hx",20,0xe01305c5)
            	HX_STACK_THIS(this)
HXLINE(  21)		 ::hxmath::ds::DenseArray2_obj::__new((int)100,(int)100,null());
HXLINE(  22)		 ::hxmath::ds::SparseArray2_obj::__new();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDataStructures_obj,testArray2InterfaceCast,(void))

void TestDataStructures_obj::testDenseArray2Resize(){
            	HX_STACK_FRAME("test.TestDataStructures","testDenseArray2Resize",0x57e0fa44,"test.TestDataStructures.testDenseArray2Resize","test/TestDataStructures.hx",26,0xe01305c5)
            	HX_STACK_THIS(this)
HXLINE(  27)		HX_VARI(  ::hxmath::ds::DenseArray2,dense) =  ::hxmath::ds::DenseArray2_obj::__new((int)2,(int)2,null());
HXLINE(  28)		this->setPrimesSquare(dense);
HXLINE(  31)		dense->resize((int)4,(int)2,(int)-1);
HXLINE(  33)		this->assertEquals((int)4,dense->width,hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),33,HX_("test.TestDataStructures",58,0e,46,2f),HX_("testDenseArray2Resize",da,0c,9a,e5)));
HXLINE(  34)		this->assertEquals((int)2,dense->height,hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),34,HX_("test.TestDataStructures",58,0e,46,2f),HX_("testDenseArray2Resize",da,0c,9a,e5)));
HXLINE(  36)		Bool _hx_tmp;
HXDLIN(  36)		if (((int)0 < dense->width)) {
HXLINE(  36)			_hx_tmp = ((int)0 < dense->height);
            		}
            		else {
HXLINE(  36)			_hx_tmp = false;
            		}
HXDLIN(  36)		if (!(_hx_tmp)) {
HXLINE(  36)			HX_STACK_DO_THROW(((((((((HX_("Specified (x=",dd,9b,83,fe) + (int)0) + HX_(", y=",18,15,2e,1d)) + (int)0) + HX_(") fields not in the ranges x: [0, ",0a,c6,50,e7)) + dense->width) + HX_(") y: [0, ",11,b1,6d,70)) + dense->height) + HX_(")",29,00,00,00)));
            		}
HXDLIN(  36)		Int _hx_tmp1 = ( (Int)(dense->array->__get(((int)0 * dense->width))) );
HXDLIN(  36)		this->assertEquals((int)3,_hx_tmp1,hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),36,HX_("test.TestDataStructures",58,0e,46,2f),HX_("testDenseArray2Resize",da,0c,9a,e5)));
HXLINE(  37)		Bool _hx_tmp2;
HXDLIN(  37)		if (((int)1 < dense->width)) {
HXLINE(  37)			_hx_tmp2 = ((int)0 < dense->height);
            		}
            		else {
HXLINE(  37)			_hx_tmp2 = false;
            		}
HXDLIN(  37)		if (!(_hx_tmp2)) {
HXLINE(  37)			HX_STACK_DO_THROW(((((((((HX_("Specified (x=",dd,9b,83,fe) + (int)1) + HX_(", y=",18,15,2e,1d)) + (int)0) + HX_(") fields not in the ranges x: [0, ",0a,c6,50,e7)) + dense->width) + HX_(") y: [0, ",11,b1,6d,70)) + dense->height) + HX_(")",29,00,00,00)));
            		}
HXDLIN(  37)		Int _hx_tmp3 = ((int)1 + ((int)0 * dense->width));
HXDLIN(  37)		this->assertEquals((int)5,dense->array->__get(_hx_tmp3),hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),37,HX_("test.TestDataStructures",58,0e,46,2f),HX_("testDenseArray2Resize",da,0c,9a,e5)));
HXLINE(  38)		Bool _hx_tmp4;
HXDLIN(  38)		if (((int)0 < dense->width)) {
HXLINE(  38)			_hx_tmp4 = ((int)1 < dense->height);
            		}
            		else {
HXLINE(  38)			_hx_tmp4 = false;
            		}
HXDLIN(  38)		if (!(_hx_tmp4)) {
HXLINE(  38)			HX_STACK_DO_THROW(((((((((HX_("Specified (x=",dd,9b,83,fe) + (int)0) + HX_(", y=",18,15,2e,1d)) + (int)1) + HX_(") fields not in the ranges x: [0, ",0a,c6,50,e7)) + dense->width) + HX_(") y: [0, ",11,b1,6d,70)) + dense->height) + HX_(")",29,00,00,00)));
            		}
HXDLIN(  38)		Int _hx_tmp5 = ( (Int)(dense->array->__get(dense->width)) );
HXDLIN(  38)		this->assertEquals((int)7,_hx_tmp5,hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),38,HX_("test.TestDataStructures",58,0e,46,2f),HX_("testDenseArray2Resize",da,0c,9a,e5)));
HXLINE(  39)		Bool _hx_tmp6;
HXDLIN(  39)		if (((int)1 < dense->width)) {
HXLINE(  39)			_hx_tmp6 = ((int)1 < dense->height);
            		}
            		else {
HXLINE(  39)			_hx_tmp6 = false;
            		}
HXDLIN(  39)		if (!(_hx_tmp6)) {
HXLINE(  39)			HX_STACK_DO_THROW(((((((((HX_("Specified (x=",dd,9b,83,fe) + (int)1) + HX_(", y=",18,15,2e,1d)) + (int)1) + HX_(") fields not in the ranges x: [0, ",0a,c6,50,e7)) + dense->width) + HX_(") y: [0, ",11,b1,6d,70)) + dense->height) + HX_(")",29,00,00,00)));
            		}
HXDLIN(  39)		Int _hx_tmp7 = ( (Int)(dense->array->__get(((int)1 + dense->width))) );
HXDLIN(  39)		this->assertEquals((int)11,_hx_tmp7,hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),39,HX_("test.TestDataStructures",58,0e,46,2f),HX_("testDenseArray2Resize",da,0c,9a,e5)));
HXLINE(  42)		Bool _hx_tmp8;
HXDLIN(  42)		if (((int)3 < dense->width)) {
HXLINE(  42)			_hx_tmp8 = ((int)1 < dense->height);
            		}
            		else {
HXLINE(  42)			_hx_tmp8 = false;
            		}
HXDLIN(  42)		if (!(_hx_tmp8)) {
HXLINE(  42)			HX_STACK_DO_THROW(((((((((HX_("Specified (x=",dd,9b,83,fe) + (int)3) + HX_(", y=",18,15,2e,1d)) + (int)1) + HX_(") fields not in the ranges x: [0, ",0a,c6,50,e7)) + dense->width) + HX_(") y: [0, ",11,b1,6d,70)) + dense->height) + HX_(")",29,00,00,00)));
            		}
HXDLIN(  42)		Int _hx_tmp9 = ( (Int)(dense->array->__get(((int)3 + dense->width))) );
HXDLIN(  42)		this->assertEquals((int)-1,_hx_tmp9,hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),42,HX_("test.TestDataStructures",58,0e,46,2f),HX_("testDenseArray2Resize",da,0c,9a,e5)));
HXLINE(  44)		dense->resize((int)2,(int)3,(int)-1);
HXLINE(  46)		this->assertEquals((int)2,dense->width,hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),46,HX_("test.TestDataStructures",58,0e,46,2f),HX_("testDenseArray2Resize",da,0c,9a,e5)));
HXLINE(  47)		this->assertEquals((int)3,dense->height,hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),47,HX_("test.TestDataStructures",58,0e,46,2f),HX_("testDenseArray2Resize",da,0c,9a,e5)));
HXLINE(  49)		Bool _hx_tmp10;
HXDLIN(  49)		if (((int)0 < dense->width)) {
HXLINE(  49)			_hx_tmp10 = ((int)0 < dense->height);
            		}
            		else {
HXLINE(  49)			_hx_tmp10 = false;
            		}
HXDLIN(  49)		if (!(_hx_tmp10)) {
HXLINE(  49)			HX_STACK_DO_THROW(((((((((HX_("Specified (x=",dd,9b,83,fe) + (int)0) + HX_(", y=",18,15,2e,1d)) + (int)0) + HX_(") fields not in the ranges x: [0, ",0a,c6,50,e7)) + dense->width) + HX_(") y: [0, ",11,b1,6d,70)) + dense->height) + HX_(")",29,00,00,00)));
            		}
HXDLIN(  49)		Int _hx_tmp11 = ( (Int)(dense->array->__get(((int)0 * dense->width))) );
HXDLIN(  49)		this->assertEquals((int)3,_hx_tmp11,hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),49,HX_("test.TestDataStructures",58,0e,46,2f),HX_("testDenseArray2Resize",da,0c,9a,e5)));
HXLINE(  50)		Bool _hx_tmp12;
HXDLIN(  50)		if (((int)1 < dense->width)) {
HXLINE(  50)			_hx_tmp12 = ((int)0 < dense->height);
            		}
            		else {
HXLINE(  50)			_hx_tmp12 = false;
            		}
HXDLIN(  50)		if (!(_hx_tmp12)) {
HXLINE(  50)			HX_STACK_DO_THROW(((((((((HX_("Specified (x=",dd,9b,83,fe) + (int)1) + HX_(", y=",18,15,2e,1d)) + (int)0) + HX_(") fields not in the ranges x: [0, ",0a,c6,50,e7)) + dense->width) + HX_(") y: [0, ",11,b1,6d,70)) + dense->height) + HX_(")",29,00,00,00)));
            		}
HXDLIN(  50)		Int _hx_tmp13 = ((int)1 + ((int)0 * dense->width));
HXDLIN(  50)		this->assertEquals((int)5,dense->array->__get(_hx_tmp13),hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),50,HX_("test.TestDataStructures",58,0e,46,2f),HX_("testDenseArray2Resize",da,0c,9a,e5)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDataStructures_obj,testDenseArray2Resize,(void))

void TestDataStructures_obj::testArray2Iterate(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		Int _hx_run(Int a,Int b){
            			HX_STACK_FRAME("test.TestDataStructures","testArray2Iterate",0x16dbc739,"test.TestDataStructures.testArray2Iterate","test/TestDataStructures.hx",62,0xe01305c5)
            			HX_STACK_ARG(a,"a")
            			HX_STACK_ARG(b,"b")
HXLINE(  62)			return (a + b);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(2)
            		Int _hx_run(Int a1,Int b1){
            			HX_STACK_FRAME("test.TestDataStructures","testArray2Iterate",0x16dbc739,"test.TestDataStructures.testArray2Iterate","test/TestDataStructures.hx",63,0xe01305c5)
            			HX_STACK_ARG(a1,"a1")
            			HX_STACK_ARG(b1,"b1")
HXLINE(  63)			return (a1 + b1);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("test.TestDataStructures","testArray2Iterate",0x16dbc739,"test.TestDataStructures.testArray2Iterate","test/TestDataStructures.hx",54,0xe01305c5)
            	HX_STACK_THIS(this)
HXLINE(  55)		HX_VARI(  ::hxmath::ds::SparseArray2,sparse) =  ::hxmath::ds::SparseArray2_obj::__new();
HXLINE(  56)		this->setPrimesSquare(sparse);
HXLINE(  57)		HX_VARI(  ::hxmath::ds::DenseArray2,dense) = sparse->toDenseArray();
HXLINE(  59)		this->assertEquals((int)2,dense->width,hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),59,HX_("test.TestDataStructures",58,0e,46,2f),HX_("testArray2Iterate",cf,56,86,dc)));
HXLINE(  60)		this->assertEquals((int)2,dense->height,hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),60,HX_("test.TestDataStructures",58,0e,46,2f),HX_("testArray2Iterate",cf,56,86,dc)));
HXLINE(  62)		HX_VARI( Int,sparseSum) = ( (Int)(::Lambda_obj::fold(sparse, ::Dynamic(new _hx_Closure_0()),(int)0)) );
HXLINE(  63)		HX_VARI( Int,denseSum) = ( (Int)(::Lambda_obj::fold(dense, ::Dynamic(new _hx_Closure_1()),(int)0)) );
HXLINE(  65)		this->assertEquals(sparseSum,denseSum,hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),65,HX_("test.TestDataStructures",58,0e,46,2f),HX_("testArray2Iterate",cf,56,86,dc)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDataStructures_obj,testArray2Iterate,(void))

void TestDataStructures_obj::testSparseArray2KeysIterate(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		Int _hx_run(Int a,Int b){
            			HX_STACK_FRAME("test.TestDataStructures","testSparseArray2KeysIterate",0xe5044e25,"test.TestDataStructures.testSparseArray2KeysIterate","test/TestDataStructures.hx",75,0xe01305c5)
            			HX_STACK_ARG(a,"a")
            			HX_STACK_ARG(b,"b")
HXLINE(  75)			return (a + b);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::hxmath::ds::SparseArray2,sparse) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_STACK_FRAME("test.TestDataStructures","testSparseArray2KeysIterate",0xe5044e25,"test.TestDataStructures.testSparseArray2KeysIterate","test/TestDataStructures.hx",78,0xe01305c5)
HXLINE(  78)			return sparse->hash->keys();
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2, ::hxmath::ds::SparseArray2,sparse) HXARGC(2)
            		Int _hx_run(Int a1,Int b1){
            			HX_STACK_FRAME("test.TestDataStructures","testSparseArray2KeysIterate",0xe5044e25,"test.TestDataStructures.testSparseArray2KeysIterate","test/TestDataStructures.hx",82,0xe01305c5)
            			HX_STACK_ARG(a1,"a1")
            			HX_STACK_ARG(b1,"b1")
HXLINE(  82)			HX_VARI( Int,key) = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new(((int)a1 & (int)(int)65535),((int)((int)a1 >> (int)(int)16) & (int)(int)65535));
HXDLIN(  82)			Int _hx_tmp = ( (Int)(sparse->hash->get(key)) );
HXDLIN(  82)			return (_hx_tmp + b1);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("test.TestDataStructures","testSparseArray2KeysIterate",0xe5044e25,"test.TestDataStructures.testSparseArray2KeysIterate","test/TestDataStructures.hx",69,0xe01305c5)
            	HX_STACK_THIS(this)
HXLINE(  70)		HX_VARI(  ::hxmath::ds::SparseArray2,sparse) =  ::hxmath::ds::SparseArray2_obj::__new();
HXLINE(  71)		this->setPrimesSquare(sparse);
HXLINE(  73)		HX_VARI( Int,sparseSum1) = ( (Int)(::Lambda_obj::fold(sparse, ::Dynamic(new _hx_Closure_0()),(int)0)) );
HXLINE(  78)		HX_VARI(  ::Dynamic,packedKeysIterable) =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("iterator",ee,49,9a,93), ::Dynamic(new _hx_Closure_1(sparse))));
HXLINE(  80)		HX_VARI( Int,sparseSum2) = ( (Int)(::Lambda_obj::fold(packedKeysIterable, ::Dynamic(new _hx_Closure_2(sparse)),(int)0)) );
HXLINE(  85)		this->assertEquals(sparseSum1,sparseSum2,hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),85,HX_("test.TestDataStructures",58,0e,46,2f),HX_("testSparseArray2KeysIterate",3b,75,6a,e3)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDataStructures_obj,testSparseArray2KeysIterate,(void))

void TestDataStructures_obj::testSparseArray2OrderedKeysIterate(){
            	HX_STACK_FRAME("test.TestDataStructures","testSparseArray2OrderedKeysIterate",0xbe65411a,"test.TestDataStructures.testSparseArray2OrderedKeysIterate","test/TestDataStructures.hx",89,0xe01305c5)
            	HX_STACK_THIS(this)
HXLINE(  91)		HX_VARI(  ::hxmath::ds::SparseArray2,sparse) =  ::hxmath::ds::SparseArray2_obj::__new();
HXLINE(  92)		{
HXLINE(  92)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  92)			while((_g < (int)100)){
HXLINE(  92)				HX_VARI( Int,y) = _g++;
HXLINE(  94)				{
HXLINE(  94)					HX_VARI( Int,_g1) = (int)0;
HXDLIN(  94)					while((_g1 < (int)100)){
HXLINE(  94)						HX_VARI( Int,x) = _g1++;
HXLINE(  96)						{
HXLINE(  96)							HX_VARI( Int,key) = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new(x,y);
HXDLIN(  96)							sparse->hash->set(key,(int)-1);
            						}
            					}
            				}
            			}
            		}
HXLINE( 100)		HX_VARI( Int,lastX) = (int)-1;
HXLINE( 101)		HX_VARI( Int,lastY) = (int)-1;
HXLINE( 104)		{
HXLINE( 104)			HX_VARI(  ::Dynamic,tmp) =  ::hxmath::ds::_SparseArray2::SparseArray2OrderedKeysIterator_obj::__new(sparse);
HXDLIN( 104)			while(true){
HXLINE( 104)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 104)				if (_hx_tmp) {
HXLINE( 104)					goto _hx_goto_2;
            				}
HXDLIN( 104)				HX_VARI_NAME( Int,key1,"key") = ( (Int)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE( 106)				Bool _hx_tmp1;
HXDLIN( 106)				if ((((int)key1 & (int)(int)65535) <= lastX)) {
HXLINE( 106)					_hx_tmp1 = (((int)((int)key1 >> (int)(int)16) & (int)(int)65535) > lastY);
            				}
            				else {
HXLINE( 106)					_hx_tmp1 = true;
            				}
HXDLIN( 106)				this->assertTrue(_hx_tmp1,hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),106,HX_("test.TestDataStructures",58,0e,46,2f),HX_("testSparseArray2OrderedKeysIterate",c4,c8,77,92)));
HXLINE( 107)				lastX = ((int)key1 & (int)(int)65535);
HXLINE( 108)				lastY = ((int)((int)key1 >> (int)(int)16) & (int)(int)65535);
            			}
            			_hx_goto_2:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDataStructures_obj,testSparseArray2OrderedKeysIterate,(void))

void TestDataStructures_obj::testBlit(){
            	HX_STACK_FRAME("test.TestDataStructures","testBlit",0x0fce027d,"test.TestDataStructures.testBlit","test/TestDataStructures.hx",113,0xe01305c5)
            	HX_STACK_THIS(this)
HXLINE( 116)		HX_VARI(  ::hxmath::ds::DenseArray2,source) =  ::hxmath::ds::DenseArray2_obj::__new((int)3,(int)3,null());
HXLINE( 117)		{
HXLINE( 117)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 117)			HX_VARI( Int,_g) = source->height;
HXDLIN( 117)			while((_g1 < _g)){
HXLINE( 117)				HX_VARI( Int,y) = _g1++;
HXDLIN( 117)				{
HXLINE( 117)					HX_VARI( Int,_g3) = (int)0;
HXDLIN( 117)					HX_VARI( Int,_g2) = source->width;
HXDLIN( 117)					while((_g3 < _g2)){
HXLINE( 117)						HX_VARI( Int,x) = _g3++;
HXDLIN( 117)						Int _hx_tmp = (x + (y * source->width));
HXDLIN( 117)						source->array->set(_hx_tmp,(int)1);
            					}
            				}
            			}
            		}
HXLINE( 132)		HX_VARI_NAME(  ::haxe::ds::StringMap,_g4,"_g") =  ::haxe::ds::StringMap_obj::__new();
HXDLIN( 132)		_g4->set(HX_("Center",f5,99,6f,3a), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("overlap",87,43,10,a9),(int)9)
            			->setFixed(1,HX_("pos",94,5d,55,00),::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)1,(int)1))));
HXDLIN( 132)		_g4->set(HX_("A",41,00,00,00), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("overlap",87,43,10,a9),(int)4)
            			->setFixed(1,HX_("pos",94,5d,55,00),::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)-1,(int)-1))));
HXDLIN( 132)		_g4->set(HX_("B",42,00,00,00), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("overlap",87,43,10,a9),(int)4)
            			->setFixed(1,HX_("pos",94,5d,55,00),::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)3,(int)-1))));
HXDLIN( 132)		_g4->set(HX_("C",43,00,00,00), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("overlap",87,43,10,a9),(int)4)
            			->setFixed(1,HX_("pos",94,5d,55,00),::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)-1,(int)3))));
HXDLIN( 132)		_g4->set(HX_("D",44,00,00,00), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("overlap",87,43,10,a9),(int)4)
            			->setFixed(1,HX_("pos",94,5d,55,00),::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)3,(int)3))));
HXDLIN( 132)		_g4->set(HX_("AB",e1,38,00,00), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("overlap",87,43,10,a9),(int)6)
            			->setFixed(1,HX_("pos",94,5d,55,00),::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)1,(int)-1))));
HXDLIN( 132)		_g4->set(HX_("BD",c2,39,00,00), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("overlap",87,43,10,a9),(int)6)
            			->setFixed(1,HX_("pos",94,5d,55,00),::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)3,(int)1))));
HXDLIN( 132)		_g4->set(HX_("AC",e2,38,00,00), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("overlap",87,43,10,a9),(int)6)
            			->setFixed(1,HX_("pos",94,5d,55,00),::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)-1,(int)1))));
HXDLIN( 132)		_g4->set(HX_("CD",a1,3a,00,00), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("overlap",87,43,10,a9),(int)6)
            			->setFixed(1,HX_("pos",94,5d,55,00),::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)1,(int)3))));
HXLINE( 144)		{
HXLINE( 144)			HX_VARI(  ::Dynamic,tmp) = _g4->keys();
HXDLIN( 144)			while(true){
HXLINE( 144)				Bool _hx_tmp1 = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 144)				if (_hx_tmp1) {
HXLINE( 144)					goto _hx_goto_5;
            				}
HXDLIN( 144)				HX_VARI( ::String,key) = ( (::String)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE( 146)				HX_VARI(  ::Dynamic,blitCase) = _g4->get(key);
HXLINE( 148)				HX_VARI(  ::hxmath::ds::DenseArray2,target) =  ::hxmath::ds::DenseArray2_obj::__new((int)5,(int)5,null());
HXLINE( 149)				{
HXLINE( 149)					HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 149)					HX_VARI_NAME( Int,_g5,"_g") = target->height;
HXDLIN( 149)					while((_g11 < _g5)){
HXLINE( 149)						HX_VARI_NAME( Int,y1,"y") = _g11++;
HXDLIN( 149)						{
HXLINE( 149)							HX_VARI_NAME( Int,_g31,"_g3") = (int)0;
HXDLIN( 149)							HX_VARI_NAME( Int,_g21,"_g2") = target->width;
HXDLIN( 149)							while((_g31 < _g21)){
HXLINE( 149)								HX_VARI_NAME( Int,x1,"x") = _g31++;
HXDLIN( 149)								Int _hx_tmp2 = (x1 + (y1 * target->width));
HXDLIN( 149)								target->array->set(_hx_tmp2,(int)0);
            							}
            						}
            					}
            				}
HXLINE( 150)				target->clippedBlit( ::Dynamic( ::Dynamic(blitCase->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic))->__Field(HX_("x",78,00,00,00),hx::paccDynamic)), ::Dynamic( ::Dynamic(blitCase->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic))->__Field(HX_("y",79,00,00,00),hx::paccDynamic)),source,(int)0,(int)0,(int)3,(int)3);
HXLINE( 152)				HX_VARI( Int,actualOverlap) = this->sum(target);
HXLINE( 154)				Bool _hx_tmp3 = hx::IsNotEq( actualOverlap, ::Dynamic(blitCase->__Field(HX_("overlap",87,43,10,a9),hx::paccDynamic)) );
HXDLIN( 154)				if (_hx_tmp3) {
HXLINE( 156)					::String _hx_tmp4 = ((HX_("Broken on case ",ba,48,19,61) + key) + HX_(": expected overlap = ",fe,11,05,b2));
HXDLIN( 156)					::String _hx_tmp5 = ::Std_obj::string( ::Dynamic(blitCase->__Field(HX_("overlap",87,43,10,a9),hx::paccDynamic)));
HXDLIN( 156)					::haxe::Log_obj::trace((((_hx_tmp4 + _hx_tmp5) + HX_(", actual overlap = ",9a,6b,0a,96)) + actualOverlap),hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),156,HX_("test.TestDataStructures",58,0e,46,2f),HX_("testBlit",a7,bd,4b,44)));
HXLINE( 157)					this->assertFalse(true,hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),157,HX_("test.TestDataStructures",58,0e,46,2f),HX_("testBlit",a7,bd,4b,44)));
            				}
            			}
            			_hx_goto_5:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDataStructures_obj,testBlit,(void))

void TestDataStructures_obj::testSparseArray2IndexBounds(){
            	HX_STACK_FRAME("test.TestDataStructures","testSparseArray2IndexBounds",0x9ff5d6e6,"test.TestDataStructures.testSparseArray2IndexBounds","test/TestDataStructures.hx",163,0xe01305c5)
            	HX_STACK_THIS(this)
HXLINE( 164)		HX_VARI( Int,min) = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((int)0,(int)0);
HXLINE( 165)		this->assertEquals((int)0,((int)min & (int)(int)65535),hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),165,HX_("test.TestDataStructures",58,0e,46,2f),HX_("testSparseArray2IndexBounds",fc,fd,5b,9e)));
HXLINE( 166)		this->assertEquals((int)0,((int)((int)min >> (int)(int)16) & (int)(int)65535),hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),166,HX_("test.TestDataStructures",58,0e,46,2f),HX_("testSparseArray2IndexBounds",fc,fd,5b,9e)));
HXLINE( 168)		HX_VARI( Int,max) = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((int)65535,(int)65535);
HXLINE( 169)		this->assertEquals((int)65535,((int)max & (int)(int)65535),hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),169,HX_("test.TestDataStructures",58,0e,46,2f),HX_("testSparseArray2IndexBounds",fc,fd,5b,9e)));
HXLINE( 170)		this->assertEquals((int)65535,((int)((int)max >> (int)(int)16) & (int)(int)65535),hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),170,HX_("test.TestDataStructures",58,0e,46,2f),HX_("testSparseArray2IndexBounds",fc,fd,5b,9e)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDataStructures_obj,testSparseArray2IndexBounds,(void))

void TestDataStructures_obj::testDenseArray2FromNestedRectangularArray(){
            	HX_STACK_FRAME("test.TestDataStructures","testDenseArray2FromNestedRectangularArray",0x2e2af8ec,"test.TestDataStructures.testDenseArray2FromNestedRectangularArray","test/TestDataStructures.hx",174,0xe01305c5)
            	HX_STACK_THIS(this)
HXLINE( 175)		HX_VARI( ::Array< ::Dynamic>,rectangularArray) = ::Array_obj< ::Dynamic>::__new(2)->init(0,::Array_obj< Int >::__new(3)->init(0,(int)0)->init(1,(int)1)->init(2,(int)2))->init(1,::Array_obj< Int >::__new(3)->init(0,(int)3)->init(1,(int)4)->init(2,(int)5));
HXLINE( 180)		HX_VARI( Int,longestRowLength) = (int)0;
HXDLIN( 180)		{
HXLINE( 180)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 180)			while((_g < rectangularArray->length)){
HXLINE( 180)				HX_VARI( ::Array< Int >,row) = rectangularArray->__get(_g).StaticCast< ::Array< Int > >();
HXDLIN( 180)				++_g;
HXDLIN( 180)				HX_VARI( Int,b) = row->length;
HXDLIN( 180)				Bool _hx_tmp = (b > longestRowLength);
HXDLIN( 180)				if (_hx_tmp) {
HXLINE( 180)					longestRowLength = b;
            				}
            				else {
HXLINE( 180)					longestRowLength = longestRowLength;
            				}
            			}
            		}
HXDLIN( 180)		HX_VARI(  ::hxmath::ds::DenseArray2,target) =  ::hxmath::ds::DenseArray2_obj::__new(longestRowLength,rectangularArray->length,null());
HXDLIN( 180)		{
HXLINE( 180)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 180)			HX_VARI_NAME( Int,_g2,"_g") = target->height;
HXDLIN( 180)			while((_g1 < _g2)){
HXLINE( 180)				HX_VARI( Int,y) = _g1++;
HXDLIN( 180)				{
HXLINE( 180)					HX_VARI( Int,_g3) = (int)0;
HXDLIN( 180)					HX_VARI_NAME( Int,_g21,"_g2") = target->width;
HXDLIN( 180)					while((_g3 < _g21)){
HXLINE( 180)						HX_VARI( Int,x) = _g3++;
HXDLIN( 180)						Bool _hx_tmp1 = (x < rectangularArray->__get(y).StaticCast< ::Array< Int > >()->length);
HXDLIN( 180)						if (_hx_tmp1) {
HXLINE( 180)							Bool _hx_tmp2;
HXDLIN( 180)							Bool _hx_tmp3;
HXDLIN( 180)							Bool _hx_tmp4;
HXDLIN( 180)							if ((x >= (int)0)) {
HXLINE( 180)								_hx_tmp4 = (x < target->width);
            							}
            							else {
HXLINE( 180)								_hx_tmp4 = false;
            							}
HXDLIN( 180)							if (_hx_tmp4) {
HXLINE( 180)								_hx_tmp3 = (y >= (int)0);
            							}
            							else {
HXLINE( 180)								_hx_tmp3 = false;
            							}
HXDLIN( 180)							if (_hx_tmp3) {
HXLINE( 180)								_hx_tmp2 = (y < target->height);
            							}
            							else {
HXLINE( 180)								_hx_tmp2 = false;
            							}
HXDLIN( 180)							if (!(_hx_tmp2)) {
HXLINE( 180)								HX_STACK_DO_THROW(((((((((HX_("Specified (x=",dd,9b,83,fe) + x) + HX_(", y=",18,15,2e,1d)) + y) + HX_(") fields not in the ranges x: [0, ",0a,c6,50,e7)) + target->width) + HX_(") y: [0, ",11,b1,6d,70)) + target->height) + HX_(")",29,00,00,00)));
            							}
HXDLIN( 180)							Int _hx_tmp5 = (x + (y * target->width));
HXDLIN( 180)							target->array->set(_hx_tmp5,rectangularArray->__get(y).StaticCast< ::Array< Int > >()->__get(x));
            						}
            					}
            				}
            			}
            		}
HXLINE( 181)		this->assertEquals((int)3,target->width,hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),181,HX_("test.TestDataStructures",58,0e,46,2f),HX_("testDenseArray2FromNestedRectangularArray",82,1a,07,76)));
HXLINE( 182)		this->assertEquals((int)2,target->height,hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),182,HX_("test.TestDataStructures",58,0e,46,2f),HX_("testDenseArray2FromNestedRectangularArray",82,1a,07,76)));
HXLINE( 183)		Bool _hx_tmp6;
HXDLIN( 183)		if (((int)2 < target->width)) {
HXLINE( 183)			_hx_tmp6 = ((int)1 < target->height);
            		}
            		else {
HXLINE( 183)			_hx_tmp6 = false;
            		}
HXDLIN( 183)		if (!(_hx_tmp6)) {
HXLINE( 183)			HX_STACK_DO_THROW(((((((((HX_("Specified (x=",dd,9b,83,fe) + (int)2) + HX_(", y=",18,15,2e,1d)) + (int)1) + HX_(") fields not in the ranges x: [0, ",0a,c6,50,e7)) + target->width) + HX_(") y: [0, ",11,b1,6d,70)) + target->height) + HX_(")",29,00,00,00)));
            		}
HXDLIN( 183)		Int _hx_tmp7 = ( (Int)(target->array->__get(((int)2 + target->width))) );
HXDLIN( 183)		this->assertEquals((int)5,_hx_tmp7,hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),183,HX_("test.TestDataStructures",58,0e,46,2f),HX_("testDenseArray2FromNestedRectangularArray",82,1a,07,76)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDataStructures_obj,testDenseArray2FromNestedRectangularArray,(void))

void TestDataStructures_obj::testGetByKey(){
            	HX_STACK_FRAME("test.TestDataStructures","testGetByKey",0xbc0b89da,"test.TestDataStructures.testGetByKey","test/TestDataStructures.hx",187,0xe01305c5)
            	HX_STACK_THIS(this)
HXLINE( 188)		HX_VARI(  ::hxmath::ds::DenseArray2,denseArray) =  ::hxmath::ds::DenseArray2_obj::__new((int)3,(int)3,null());
HXLINE( 189)		{
HXLINE( 189)			Bool _hx_tmp;
HXDLIN( 189)			if (((int)1 < denseArray->width)) {
HXLINE( 189)				_hx_tmp = ((int)2 < denseArray->height);
            			}
            			else {
HXLINE( 189)				_hx_tmp = false;
            			}
HXDLIN( 189)			if (!(_hx_tmp)) {
HXLINE( 189)				HX_STACK_DO_THROW(((((((((HX_("Specified (x=",dd,9b,83,fe) + (int)1) + HX_(", y=",18,15,2e,1d)) + (int)2) + HX_(") fields not in the ranges x: [0, ",0a,c6,50,e7)) + denseArray->width) + HX_(") y: [0, ",11,b1,6d,70)) + denseArray->height) + HX_(")",29,00,00,00)));
            			}
HXDLIN( 189)			Int _hx_tmp1 = ((int)1 + ((int)2 * denseArray->width));
HXDLIN( 189)			denseArray->array->set(_hx_tmp1,(int)3);
            		}
HXLINE( 190)		HX_VARI( Int,key) = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((int)1,(int)2);
HXDLIN( 190)		Int _hx_tmp2 = (((int)key & (int)(int)65535) + (((int)((int)key >> (int)(int)16) & (int)(int)65535) * denseArray->width));
HXDLIN( 190)		this->assertEquals((int)3,denseArray->array->__get(_hx_tmp2),hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),190,HX_("test.TestDataStructures",58,0e,46,2f),HX_("testGetByKey",04,22,57,90)));
HXLINE( 192)		HX_VARI(  ::hxmath::ds::SparseArray2,sparseArray) =  ::hxmath::ds::SparseArray2_obj::__new();
HXLINE( 193)		{
HXLINE( 193)			HX_VARI_NAME( Int,key1,"key") = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((int)1,(int)2);
HXDLIN( 193)			sparseArray->hash->set(key1,(int)3);
            		}
HXLINE( 194)		HX_VARI_NAME( Int,key2,"key") = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((int)1,(int)2);
HXDLIN( 194)		Int _hx_tmp3 = ( (Int)(sparseArray->hash->get(key2)) );
HXDLIN( 194)		this->assertEquals((int)3,_hx_tmp3,hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),194,HX_("test.TestDataStructures",58,0e,46,2f),HX_("testGetByKey",04,22,57,90)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDataStructures_obj,testGetByKey,(void))

void TestDataStructures_obj::testDenseKeysIterator(){
            	HX_STACK_FRAME("test.TestDataStructures","testDenseKeysIterator",0x7d458ef9,"test.TestDataStructures.testDenseKeysIterator","test/TestDataStructures.hx",198,0xe01305c5)
            	HX_STACK_THIS(this)
HXLINE( 199)		HX_VARI( ::Array< ::Dynamic>,initialArray) = ::Array_obj< ::Dynamic>::__new(2)->init(0,::Array_obj< Int >::__new(3)->init(0,(int)0)->init(1,(int)1)->init(2,(int)2))->init(1,::Array_obj< Int >::__new(3)->init(0,(int)3)->init(1,(int)4)->init(2,(int)5));
HXLINE( 204)		HX_VARI( Int,longestRowLength) = (int)0;
HXDLIN( 204)		{
HXLINE( 204)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 204)			while((_g < initialArray->length)){
HXLINE( 204)				HX_VARI( ::Array< Int >,row) = initialArray->__get(_g).StaticCast< ::Array< Int > >();
HXDLIN( 204)				++_g;
HXDLIN( 204)				HX_VARI( Int,b) = row->length;
HXDLIN( 204)				Bool _hx_tmp = (b > longestRowLength);
HXDLIN( 204)				if (_hx_tmp) {
HXLINE( 204)					longestRowLength = b;
            				}
            				else {
HXLINE( 204)					longestRowLength = longestRowLength;
            				}
            			}
            		}
HXDLIN( 204)		HX_VARI(  ::hxmath::ds::DenseArray2,target) =  ::hxmath::ds::DenseArray2_obj::__new(longestRowLength,initialArray->length,(int)-1);
HXDLIN( 204)		{
HXLINE( 204)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 204)			HX_VARI_NAME( Int,_g2,"_g") = target->height;
HXDLIN( 204)			while((_g1 < _g2)){
HXLINE( 204)				HX_VARI( Int,y) = _g1++;
HXDLIN( 204)				{
HXLINE( 204)					HX_VARI( Int,_g3) = (int)0;
HXDLIN( 204)					HX_VARI_NAME( Int,_g21,"_g2") = target->width;
HXDLIN( 204)					while((_g3 < _g21)){
HXLINE( 204)						HX_VARI( Int,x) = _g3++;
HXDLIN( 204)						Bool _hx_tmp1 = (x < initialArray->__get(y).StaticCast< ::Array< Int > >()->length);
HXDLIN( 204)						if (_hx_tmp1) {
HXLINE( 204)							Bool _hx_tmp2;
HXDLIN( 204)							Bool _hx_tmp3;
HXDLIN( 204)							Bool _hx_tmp4;
HXDLIN( 204)							if ((x >= (int)0)) {
HXLINE( 204)								_hx_tmp4 = (x < target->width);
            							}
            							else {
HXLINE( 204)								_hx_tmp4 = false;
            							}
HXDLIN( 204)							if (_hx_tmp4) {
HXLINE( 204)								_hx_tmp3 = (y >= (int)0);
            							}
            							else {
HXLINE( 204)								_hx_tmp3 = false;
            							}
HXDLIN( 204)							if (_hx_tmp3) {
HXLINE( 204)								_hx_tmp2 = (y < target->height);
            							}
            							else {
HXLINE( 204)								_hx_tmp2 = false;
            							}
HXDLIN( 204)							if (!(_hx_tmp2)) {
HXLINE( 204)								HX_STACK_DO_THROW(((((((((HX_("Specified (x=",dd,9b,83,fe) + x) + HX_(", y=",18,15,2e,1d)) + y) + HX_(") fields not in the ranges x: [0, ",0a,c6,50,e7)) + target->width) + HX_(") y: [0, ",11,b1,6d,70)) + target->height) + HX_(")",29,00,00,00)));
            							}
HXDLIN( 204)							Int _hx_tmp5 = (x + (y * target->width));
HXDLIN( 204)							target->array->set(_hx_tmp5,initialArray->__get(y).StaticCast< ::Array< Int > >()->__get(x));
            						}
            					}
            				}
            			}
            		}
HXLINE( 206)		{
HXLINE( 206)			HX_VARI(  ::Dynamic,tmp) =  ::hxmath::ds::_DenseArray2::DenseArray2KeysIterator_obj::__new(target);
HXDLIN( 206)			while(true){
HXLINE( 206)				Bool _hx_tmp6 = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 206)				if (_hx_tmp6) {
HXLINE( 206)					goto _hx_goto_14;
            				}
HXDLIN( 206)				HX_VARI( Int,key) = ( (Int)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE( 208)				HX_VARI( Int,sourceElement) = initialArray->__get(((int)((int)key >> (int)(int)16) & (int)(int)65535)).StaticCast< ::Array< Int > >()->__get(((int)key & (int)(int)65535));
HXLINE( 209)				Int _hx_tmp7 = (((int)key & (int)(int)65535) + (((int)((int)key >> (int)(int)16) & (int)(int)65535) * target->width));
HXLINE( 210)				this->assertEquals(sourceElement,target->array->__get(_hx_tmp7),hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),210,HX_("test.TestDataStructures",58,0e,46,2f),HX_("testDenseKeysIterator",8f,a1,fe,0a)));
            			}
            			_hx_goto_14:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDataStructures_obj,testDenseKeysIterator,(void))

void TestDataStructures_obj::testCloneAndConvert(){
            	HX_STACK_FRAME("test.TestDataStructures","testCloneAndConvert",0x5b7b5c51,"test.TestDataStructures.testCloneAndConvert","test/TestDataStructures.hx",229,0xe01305c5)
            	HX_STACK_THIS(this)
HXLINE( 230)		HX_VARI( ::Array< ::Dynamic>,initialArray) = ::Array_obj< ::Dynamic>::__new(2)->init(0,::Array_obj< Int >::__new(3)->init(0,(int)0)->init(1,(int)1)->init(2,(int)2))->init(1,::Array_obj< Int >::__new(3)->init(0,(int)3)->init(1,(int)4)->init(2,(int)5));
HXLINE( 236)		HX_VARI( Int,longestRowLength) = (int)0;
HXDLIN( 236)		{
HXLINE( 236)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 236)			while((_g < initialArray->length)){
HXLINE( 236)				HX_VARI( ::Array< Int >,row) = initialArray->__get(_g).StaticCast< ::Array< Int > >();
HXDLIN( 236)				++_g;
HXDLIN( 236)				HX_VARI( Int,b) = row->length;
HXDLIN( 236)				Bool _hx_tmp = (b > longestRowLength);
HXDLIN( 236)				if (_hx_tmp) {
HXLINE( 236)					longestRowLength = b;
            				}
            				else {
HXLINE( 236)					longestRowLength = longestRowLength;
            				}
            			}
            		}
HXDLIN( 236)		HX_VARI(  ::hxmath::ds::DenseArray2,target) =  ::hxmath::ds::DenseArray2_obj::__new(longestRowLength,initialArray->length,null());
HXDLIN( 236)		{
HXLINE( 236)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 236)			HX_VARI_NAME( Int,_g2,"_g") = target->height;
HXDLIN( 236)			while((_g1 < _g2)){
HXLINE( 236)				HX_VARI( Int,y) = _g1++;
HXDLIN( 236)				{
HXLINE( 236)					HX_VARI( Int,_g3) = (int)0;
HXDLIN( 236)					HX_VARI_NAME( Int,_g21,"_g2") = target->width;
HXDLIN( 236)					while((_g3 < _g21)){
HXLINE( 236)						HX_VARI( Int,x) = _g3++;
HXDLIN( 236)						Bool _hx_tmp1 = (x < initialArray->__get(y).StaticCast< ::Array< Int > >()->length);
HXDLIN( 236)						if (_hx_tmp1) {
HXLINE( 236)							Bool _hx_tmp2;
HXDLIN( 236)							Bool _hx_tmp3;
HXDLIN( 236)							Bool _hx_tmp4;
HXDLIN( 236)							if ((x >= (int)0)) {
HXLINE( 236)								_hx_tmp4 = (x < target->width);
            							}
            							else {
HXLINE( 236)								_hx_tmp4 = false;
            							}
HXDLIN( 236)							if (_hx_tmp4) {
HXLINE( 236)								_hx_tmp3 = (y >= (int)0);
            							}
            							else {
HXLINE( 236)								_hx_tmp3 = false;
            							}
HXDLIN( 236)							if (_hx_tmp3) {
HXLINE( 236)								_hx_tmp2 = (y < target->height);
            							}
            							else {
HXLINE( 236)								_hx_tmp2 = false;
            							}
HXDLIN( 236)							if (!(_hx_tmp2)) {
HXLINE( 236)								HX_STACK_DO_THROW(((((((((HX_("Specified (x=",dd,9b,83,fe) + x) + HX_(", y=",18,15,2e,1d)) + y) + HX_(") fields not in the ranges x: [0, ",0a,c6,50,e7)) + target->width) + HX_(") y: [0, ",11,b1,6d,70)) + target->height) + HX_(")",29,00,00,00)));
            							}
HXDLIN( 236)							Int _hx_tmp5 = (x + (y * target->width));
HXDLIN( 236)							target->array->set(_hx_tmp5,initialArray->__get(y).StaticCast< ::Array< Int > >()->__get(x));
            						}
            					}
            				}
            			}
            		}
HXLINE( 237)		HX_VARI(  ::hxmath::ds::SparseArray2,sparseB) = target->toSparseArray();
HXLINE( 242)		{
HXLINE( 242)			HX_VARI(  ::Dynamic,tmp) =  ::hxmath::ds::_DenseArray2::DenseArray2KeysIterator_obj::__new(target);
HXDLIN( 242)			while(true){
HXLINE( 242)				Bool _hx_tmp6 = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 242)				if (_hx_tmp6) {
HXLINE( 242)					goto _hx_goto_18;
            				}
HXDLIN( 242)				HX_VARI( Int,key) = ( (Int)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE( 244)				Int _hx_tmp7 = (((int)key & (int)(int)65535) + (((int)((int)key >> (int)(int)16) & (int)(int)65535) * target->width));
HXDLIN( 244)				this->assertEquals(target->array->__get(_hx_tmp7),sparseB->hash->get(key),hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),244,HX_("test.TestDataStructures",58,0e,46,2f),HX_("testCloneAndConvert",67,7d,99,cc)));
            			}
            			_hx_goto_18:;
            		}
HXLINE( 248)		{
HXLINE( 248)			HX_VARI_NAME(  ::Dynamic,tmp1,"tmp") = sparseB->hash->keys();
HXDLIN( 248)			while(true){
HXLINE( 248)				Bool _hx_tmp8 = !(( (Bool)( ::Dynamic(tmp1->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 248)				if (_hx_tmp8) {
HXLINE( 248)					goto _hx_goto_19;
            				}
HXDLIN( 248)				HX_VARI_NAME( Int,key1,"key") = ( (Int)( ::Dynamic(tmp1->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE( 250)				Int _hx_tmp9 = (((int)key1 & (int)(int)65535) + (((int)((int)key1 >> (int)(int)16) & (int)(int)65535) * target->width));
HXDLIN( 250)				this->assertEquals(sparseB->hash->get(key1),target->array->__get(_hx_tmp9),hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),250,HX_("test.TestDataStructures",58,0e,46,2f),HX_("testCloneAndConvert",67,7d,99,cc)));
            			}
            			_hx_goto_19:;
            		}
HXLINE( 257)		HX_VARI(  ::hxmath::ds::SparseArray2,sparseC) =  ::hxmath::ds::SparseArray2_obj::__new();
HXLINE( 258)		{
HXLINE( 258)			HX_VARI_NAME( Int,key2,"key") = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((int)0,(int)0);
HXDLIN( 258)			sparseC->hash->set(key2,(int)2);
            		}
HXLINE( 259)		{
HXLINE( 259)			HX_VARI_NAME( Int,key3,"key") = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((int)1,(int)0);
HXDLIN( 259)			sparseC->hash->set(key3,(int)5);
            		}
HXLINE( 260)		{
HXLINE( 260)			HX_VARI_NAME( Int,key4,"key") = ::hxmath::math::_ShortVector2::ShortVector2_Impl__obj::_new((int)1,(int)1);
HXDLIN( 260)			sparseC->hash->set(key4,(int)3);
            		}
HXLINE( 262)		HX_VARI(  ::hxmath::ds::DenseArray2,denseD) = sparseC->toDenseArray();
HXLINE( 265)		{
HXLINE( 265)			HX_VARI_NAME(  ::Dynamic,tmp2,"tmp") = sparseC->hash->keys();
HXDLIN( 265)			while(true){
HXLINE( 265)				Bool _hx_tmp10 = !(( (Bool)( ::Dynamic(tmp2->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 265)				if (_hx_tmp10) {
HXLINE( 265)					goto _hx_goto_20;
            				}
HXDLIN( 265)				HX_VARI_NAME( Int,key5,"key") = ( (Int)( ::Dynamic(tmp2->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE( 267)				Int _hx_tmp11 = (((int)key5 & (int)(int)65535) + (((int)((int)key5 >> (int)(int)16) & (int)(int)65535) * denseD->width));
HXDLIN( 267)				this->assertEquals(sparseC->hash->get(key5),denseD->array->__get(_hx_tmp11),hx::SourceInfo(HX_("TestDataStructures.hx",82,48,df,08),267,HX_("test.TestDataStructures",58,0e,46,2f),HX_("testCloneAndConvert",67,7d,99,cc)));
            			}
            			_hx_goto_20:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDataStructures_obj,testCloneAndConvert,(void))

void TestDataStructures_obj::setPrimesSquare(::Dynamic array){
            	HX_STACK_FRAME("test.TestDataStructures","setPrimesSquare",0x80a1e0bd,"test.TestDataStructures.setPrimesSquare","test/TestDataStructures.hx",272,0xe01305c5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(array,"array")
HXLINE( 273)		::hxmath::ds::IArray2_obj::set(array,(int)0,(int)0,(int)3);
HXLINE( 274)		::hxmath::ds::IArray2_obj::set(array,(int)1,(int)0,(int)5);
HXLINE( 275)		::hxmath::ds::IArray2_obj::set(array,(int)0,(int)1,(int)7);
HXLINE( 276)		::hxmath::ds::IArray2_obj::set(array,(int)1,(int)1,(int)11);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestDataStructures_obj,setPrimesSquare,(void))

Int TestDataStructures_obj::sum(::Dynamic array){
            	HX_STACK_FRAME("test.TestDataStructures","sum",0xb0679475,"test.TestDataStructures.sum","test/TestDataStructures.hx",280,0xe01305c5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(array,"array")
HXLINE( 281)		HX_VARI( Int,sum) = (int)0;
HXLINE( 282)		{
HXLINE( 282)			HX_VARI(  ::Dynamic,tmp) = ::hxmath::ds::IArray2_obj::iterator(array);
HXDLIN( 282)			while(true){
HXLINE( 282)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 282)				if (_hx_tmp) {
HXLINE( 282)					goto _hx_goto_21;
            				}
HXDLIN( 282)				HX_VARI( Int,value) = ( (Int)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE( 284)				hx::AddEq(sum,value);
            			}
            			_hx_goto_21:;
            		}
HXLINE( 287)		return sum;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestDataStructures_obj,sum,return )


TestDataStructures_obj::TestDataStructures_obj()
{
}

hx::Val TestDataStructures_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"sum") ) { return hx::Val( sum_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"testBlit") ) { return hx::Val( testBlit_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testGetByKey") ) { return hx::Val( testGetByKey_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"setPrimesSquare") ) { return hx::Val( setPrimesSquare_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"testArray2Iterate") ) { return hx::Val( testArray2Iterate_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"testCloneAndConvert") ) { return hx::Val( testCloneAndConvert_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"testDenseArray2Resize") ) { return hx::Val( testDenseArray2Resize_dyn()); }
		if (HX_FIELD_EQ(inName,"testDenseKeysIterator") ) { return hx::Val( testDenseKeysIterator_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"testArray2InterfaceCast") ) { return hx::Val( testArray2InterfaceCast_dyn()); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"testSparseArray2KeysIterate") ) { return hx::Val( testSparseArray2KeysIterate_dyn()); }
		if (HX_FIELD_EQ(inName,"testSparseArray2IndexBounds") ) { return hx::Val( testSparseArray2IndexBounds_dyn()); }
		break;
	case 34:
		if (HX_FIELD_EQ(inName,"testSparseArray2OrderedKeysIterate") ) { return hx::Val( testSparseArray2OrderedKeysIterate_dyn()); }
		break;
	case 41:
		if (HX_FIELD_EQ(inName,"testDenseArray2FromNestedRectangularArray") ) { return hx::Val( testDenseArray2FromNestedRectangularArray_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestDataStructures_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestDataStructures_obj_sStaticStorageInfo = 0;
#endif

static ::String TestDataStructures_obj_sMemberFields[] = {
	HX_HCSTRING("testArray2InterfaceCast","\xad","\xf7","\xd9","\x3d"),
	HX_HCSTRING("testDenseArray2Resize","\xda","\x0c","\x9a","\xe5"),
	HX_HCSTRING("testArray2Iterate","\xcf","\x56","\x86","\xdc"),
	HX_HCSTRING("testSparseArray2KeysIterate","\x3b","\x75","\x6a","\xe3"),
	HX_HCSTRING("testSparseArray2OrderedKeysIterate","\xc4","\xc8","\x77","\x92"),
	HX_HCSTRING("testBlit","\xa7","\xbd","\x4b","\x44"),
	HX_HCSTRING("testSparseArray2IndexBounds","\xfc","\xfd","\x5b","\x9e"),
	HX_HCSTRING("testDenseArray2FromNestedRectangularArray","\x82","\x1a","\x07","\x76"),
	HX_HCSTRING("testGetByKey","\x04","\x22","\x57","\x90"),
	HX_HCSTRING("testDenseKeysIterator","\x8f","\xa1","\xfe","\x0a"),
	HX_HCSTRING("testCloneAndConvert","\x67","\x7d","\x99","\xcc"),
	HX_HCSTRING("setPrimesSquare","\xd3","\x3e","\x68","\xc1"),
	HX_HCSTRING("sum","\x8b","\xa9","\x57","\x00"),
	::String(null()) };

static void TestDataStructures_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestDataStructures_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestDataStructures_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestDataStructures_obj::__mClass,"__mClass");
};

#endif

hx::Class TestDataStructures_obj::__mClass;

void TestDataStructures_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("test.TestDataStructures","\x58","\x0e","\x46","\x2f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestDataStructures_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestDataStructures_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestDataStructures_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestDataStructures_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestDataStructures_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestDataStructures_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace test
