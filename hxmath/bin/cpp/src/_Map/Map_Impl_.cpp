// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED__Map_Map_Impl_
#include <_Map/Map_Impl_.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

namespace _Map{

void Map_Impl__obj::__construct() { }

Dynamic Map_Impl__obj::__CreateEmpty() { return new Map_Impl__obj; }

hx::ObjectPtr< Map_Impl__obj > Map_Impl__obj::__new()
{
	hx::ObjectPtr< Map_Impl__obj > _hx_result = new Map_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Map_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Map_Impl__obj > _hx_result = new Map_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

void Map_Impl__obj::set(::Dynamic this1, ::Dynamic key, ::Dynamic value){
            	HX_STACK_FRAME("_Map.Map_Impl_","set",0x2d56f19f,"_Map.Map_Impl_.set","/usr/lib/haxe/std/Map.hx",73,0xa408eaa3)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(key,"key")
            	HX_STACK_ARG(value,"value")
HXLINE(  73)		::haxe::IMap_obj::set(this1,key,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Map_Impl__obj,set,(void))

 ::Dynamic Map_Impl__obj::get(::Dynamic this1, ::Dynamic key){
            	HX_STACK_FRAME("_Map.Map_Impl_","get",0x2d4dd693,"_Map.Map_Impl_.get","/usr/lib/haxe/std/Map.hx",90,0xa408eaa3)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(key,"key")
HXLINE(  90)		return ::haxe::IMap_obj::get(this1,key);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Map_Impl__obj,get,return )

Bool Map_Impl__obj::exists(::Dynamic this1, ::Dynamic key){
            	HX_STACK_FRAME("_Map.Map_Impl_","exists",0x529ee3ff,"_Map.Map_Impl_.exists","/usr/lib/haxe/std/Map.hx",97,0xa408eaa3)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(key,"key")
HXLINE(  97)		return ::haxe::IMap_obj::exists(this1,key);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Map_Impl__obj,exists,return )

Bool Map_Impl__obj::remove(::Dynamic this1, ::Dynamic key){
            	HX_STACK_FRAME("_Map.Map_Impl_","remove",0x97476267,"_Map.Map_Impl_.remove","/usr/lib/haxe/std/Map.hx",105,0xa408eaa3)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(key,"key")
HXLINE( 105)		return ::haxe::IMap_obj::remove(this1,key);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Map_Impl__obj,remove,return )

 ::Dynamic Map_Impl__obj::keys(::Dynamic this1){
            	HX_STACK_FRAME("_Map.Map_Impl_","keys",0x7972c957,"_Map.Map_Impl_.keys","/usr/lib/haxe/std/Map.hx",113,0xa408eaa3)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 113)		return ::haxe::IMap_obj::keys(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Map_Impl__obj,keys,return )

 ::Dynamic Map_Impl__obj::iterator(::Dynamic this1){
            	HX_STACK_FRAME("_Map.Map_Impl_","iterator",0x68311ed1,"_Map.Map_Impl_.iterator","/usr/lib/haxe/std/Map.hx",122,0xa408eaa3)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 122)		return ::haxe::IMap_obj::iterator(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Map_Impl__obj,iterator,return )

::String Map_Impl__obj::toString(::Dynamic this1){
            	HX_STACK_FRAME("_Map.Map_Impl_","toString",0x0d05a58f,"_Map.Map_Impl_.toString","/usr/lib/haxe/std/Map.hx",131,0xa408eaa3)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 131)		return ::haxe::IMap_obj::toString(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Map_Impl__obj,toString,return )

 ::Dynamic Map_Impl__obj::arrayWrite(::Dynamic this1, ::Dynamic k, ::Dynamic v){
            	HX_STACK_FRAME("_Map.Map_Impl_","arrayWrite",0x12269829,"_Map.Map_Impl_.arrayWrite","/usr/lib/haxe/std/Map.hx",134,0xa408eaa3)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(k,"k")
            	HX_STACK_ARG(v,"v")
HXLINE( 135)		::haxe::IMap_obj::set(this1,k,v);
HXLINE( 136)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Map_Impl__obj,arrayWrite,return )

 ::haxe::ds::StringMap Map_Impl__obj::toStringMap(::Dynamic t){
            	HX_STACK_FRAME("_Map.Map_Impl_","toStringMap",0x930fc04d,"_Map.Map_Impl_.toStringMap","/usr/lib/haxe/std/Map.hx",140,0xa408eaa3)
            	HX_STACK_ARG(t,"t")
HXLINE( 140)		return  ::haxe::ds::StringMap_obj::__new();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Map_Impl__obj,toStringMap,return )

 ::haxe::ds::IntMap Map_Impl__obj::toIntMap(::Dynamic t){
            	HX_STACK_FRAME("_Map.Map_Impl_","toIntMap",0x9a49b1ab,"_Map.Map_Impl_.toIntMap","/usr/lib/haxe/std/Map.hx",144,0xa408eaa3)
            	HX_STACK_ARG(t,"t")
HXLINE( 144)		return  ::haxe::ds::IntMap_obj::__new();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Map_Impl__obj,toIntMap,return )

 ::haxe::ds::EnumValueMap Map_Impl__obj::toEnumValueMapMap(::Dynamic t){
            	HX_STACK_FRAME("_Map.Map_Impl_","toEnumValueMapMap",0x168455b2,"_Map.Map_Impl_.toEnumValueMapMap","/usr/lib/haxe/std/Map.hx",148,0xa408eaa3)
            	HX_STACK_ARG(t,"t")
HXLINE( 148)		return  ::haxe::ds::EnumValueMap_obj::__new();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Map_Impl__obj,toEnumValueMapMap,return )

 ::haxe::ds::ObjectMap Map_Impl__obj::toObjectMap(::Dynamic t){
            	HX_STACK_FRAME("_Map.Map_Impl_","toObjectMap",0x0ed4531f,"_Map.Map_Impl_.toObjectMap","/usr/lib/haxe/std/Map.hx",152,0xa408eaa3)
            	HX_STACK_ARG(t,"t")
HXLINE( 152)		return  ::haxe::ds::ObjectMap_obj::__new();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Map_Impl__obj,toObjectMap,return )

 ::haxe::ds::StringMap Map_Impl__obj::fromStringMap( ::haxe::ds::StringMap map){
            	HX_STACK_FRAME("_Map.Map_Impl_","fromStringMap",0x72ce03be,"_Map.Map_Impl_.fromStringMap","/usr/lib/haxe/std/Map.hx",156,0xa408eaa3)
            	HX_STACK_ARG(map,"map")
HXLINE( 156)		return map;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Map_Impl__obj,fromStringMap,return )

 ::haxe::ds::IntMap Map_Impl__obj::fromIntMap( ::haxe::ds::IntMap map){
            	HX_STACK_FRAME("_Map.Map_Impl_","fromIntMap",0x29584d9a,"_Map.Map_Impl_.fromIntMap","/usr/lib/haxe/std/Map.hx",160,0xa408eaa3)
            	HX_STACK_ARG(map,"map")
HXLINE( 160)		return map;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Map_Impl__obj,fromIntMap,return )

 ::haxe::ds::ObjectMap Map_Impl__obj::fromObjectMap( ::haxe::ds::ObjectMap map){
            	HX_STACK_FRAME("_Map.Map_Impl_","fromObjectMap",0xee929690,"_Map.Map_Impl_.fromObjectMap","/usr/lib/haxe/std/Map.hx",164,0xa408eaa3)
            	HX_STACK_ARG(map,"map")
HXLINE( 164)		return map;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Map_Impl__obj,fromObjectMap,return )


Map_Impl__obj::Map_Impl__obj()
{
}

bool Map_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"keys") ) { outValue = keys_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { outValue = exists_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"remove") ) { outValue = remove_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"iterator") ) { outValue = iterator_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toIntMap") ) { outValue = toIntMap_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"arrayWrite") ) { outValue = arrayWrite_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromIntMap") ) { outValue = fromIntMap_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"toStringMap") ) { outValue = toStringMap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toObjectMap") ) { outValue = toObjectMap_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fromStringMap") ) { outValue = fromStringMap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromObjectMap") ) { outValue = fromObjectMap_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"toEnumValueMapMap") ) { outValue = toEnumValueMapMap_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Map_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Map_Impl__obj_sStaticStorageInfo = 0;
#endif

static void Map_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Map_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Map_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Map_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class Map_Impl__obj::__mClass;

static ::String Map_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("keys","\xf4","\xe1","\x06","\x47"),
	HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("arrayWrite","\x86","\x84","\x86","\xca"),
	HX_HCSTRING("toStringMap","\x50","\xa5","\x9e","\x2e"),
	HX_HCSTRING("toIntMap","\xc8","\xdc","\xb2","\xc5"),
	HX_HCSTRING("toEnumValueMapMap","\xf5","\x5e","\x8d","\x00"),
	HX_HCSTRING("toObjectMap","\x22","\x38","\x63","\xaa"),
	HX_HCSTRING("fromStringMap","\x81","\x6f","\xa2","\x3b"),
	HX_HCSTRING("fromIntMap","\xf7","\x39","\xb8","\xe1"),
	HX_HCSTRING("fromObjectMap","\x53","\x02","\x67","\xb7"),
	::String(null())
};

void Map_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("_Map.Map_Impl_","\xeb","\xb3","\x17","\xae");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Map_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Map_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Map_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Map_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Map_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Map_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Map_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace _Map
