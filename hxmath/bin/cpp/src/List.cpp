// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED__List_ListIterator
#include <_List/ListIterator.h>
#endif
#ifndef INCLUDED__List_ListNode
#include <_List/ListNode.h>
#endif


void List_obj::__construct(){
            	HX_STACK_FRAME("List","new",0xed890070,"List.new","/usr/lib/haxe/std/List.hx",44,0xd5566cff)
            	HX_STACK_THIS(this)
HXLINE(  44)		this->length = (int)0;
            	}

Dynamic List_obj::__CreateEmpty() { return new List_obj; }

hx::ObjectPtr< List_obj > List_obj::__new()
{
	hx::ObjectPtr< List_obj > _hx_result = new List_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic List_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< List_obj > _hx_result = new List_obj();
	_hx_result->__construct();
	return _hx_result;
}

void List_obj::add( ::Dynamic item){
            	HX_STACK_FRAME("List","add",0xed7f2231,"List.add","/usr/lib/haxe/std/List.hx",52,0xd5566cff)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(item,"item")
HXLINE(  53)		HX_VARI(  ::_List::ListNode,x) =  ::_List::ListNode_obj::__new(item,null());
HXLINE(  54)		if (hx::IsNull( this->h )) {
HXLINE(  55)			this->h = x;
            		}
            		else {
HXLINE(  57)			this->q->next = x;
            		}
HXLINE(  58)		this->q = x;
HXLINE(  59)		this->length++;
            	}


HX_DEFINE_DYNAMIC_FUNC1(List_obj,add,(void))

void List_obj::push( ::Dynamic item){
            	HX_STACK_FRAME("List","push",0xebb5efca,"List.push","/usr/lib/haxe/std/List.hx",67,0xd5566cff)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(item,"item")
HXLINE(  68)		HX_VARI(  ::_List::ListNode,x) =  ::_List::ListNode_obj::__new(item,this->h);
HXLINE(  69)		this->h = x;
HXLINE(  70)		if (hx::IsNull( this->q )) {
HXLINE(  71)			this->q = x;
            		}
HXLINE(  72)		this->length++;
            	}


HX_DEFINE_DYNAMIC_FUNC1(List_obj,push,(void))

 ::Dynamic List_obj::first(){
            	HX_STACK_FRAME("List","first",0x898acc40,"List.first","/usr/lib/haxe/std/List.hx",81,0xd5566cff)
            	HX_STACK_THIS(this)
HXLINE(  81)		if (hx::IsNull( this->h )) {
HXLINE(  81)			return null();
            		}
            		else {
HXLINE(  81)			return this->h->item;
            		}
HXDLIN(  81)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(List_obj,first,return )

 ::Dynamic List_obj::last(){
            	HX_STACK_FRAME("List","last",0xe901e846,"List.last","/usr/lib/haxe/std/List.hx",90,0xd5566cff)
            	HX_STACK_THIS(this)
HXLINE(  90)		if (hx::IsNull( this->q )) {
HXLINE(  90)			return null();
            		}
            		else {
HXLINE(  90)			return this->q->item;
            		}
HXDLIN(  90)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(List_obj,last,return )

 ::Dynamic List_obj::pop(){
            	HX_STACK_FRAME("List","pop",0xed8a8da1,"List.pop","/usr/lib/haxe/std/List.hx",99,0xd5566cff)
            	HX_STACK_THIS(this)
HXLINE( 100)		if (hx::IsNull( this->h )) {
HXLINE( 101)			return null();
            		}
HXLINE( 102)		HX_VARI(  ::Dynamic,x) = this->h->item;
HXLINE( 103)		this->h = this->h->next;
HXLINE( 104)		if (hx::IsNull( this->h )) {
HXLINE( 105)			this->q = null();
            		}
HXLINE( 106)		this->length--;
HXLINE( 107)		return x;
            	}


HX_DEFINE_DYNAMIC_FUNC0(List_obj,pop,return )

Bool List_obj::isEmpty(){
            	HX_STACK_FRAME("List","isEmpty",0xaa565653,"List.isEmpty","/usr/lib/haxe/std/List.hx",114,0xd5566cff)
            	HX_STACK_THIS(this)
HXLINE( 114)		return hx::IsNull( this->h );
            	}


HX_DEFINE_DYNAMIC_FUNC0(List_obj,isEmpty,return )

void List_obj::clear(){
            	HX_STACK_FRAME("List","clear",0xd148c59d,"List.clear","/usr/lib/haxe/std/List.hx",123,0xd5566cff)
            	HX_STACK_THIS(this)
HXLINE( 124)		this->h = null();
HXLINE( 125)		this->q = null();
HXLINE( 126)		this->length = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(List_obj,clear,(void))

Bool List_obj::remove( ::Dynamic v){
            	HX_STACK_FRAME("List","remove",0x4b44d634,"List.remove","/usr/lib/haxe/std/List.hx",137,0xd5566cff)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(v,"v")
HXLINE( 138)		HX_VARI(  ::_List::ListNode,prev) = null();
HXLINE( 139)		HX_VARI(  ::_List::ListNode,l) = this->h;
HXLINE( 140)		while(hx::IsNotNull( l )){
HXLINE( 141)			if (hx::IsEq( l->item,v )) {
HXLINE( 142)				if (hx::IsNull( prev )) {
HXLINE( 143)					this->h = l->next;
            				}
            				else {
HXLINE( 145)					prev->next = l->next;
            				}
HXLINE( 146)				if (hx::IsEq( this->q,l )) {
HXLINE( 147)					this->q = prev;
            				}
HXLINE( 148)				this->length--;
HXLINE( 149)				return true;
            			}
HXLINE( 151)			prev = l;
HXLINE( 152)			l = l->next;
            		}
HXLINE( 154)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(List_obj,remove,return )

 ::_List::ListIterator List_obj::iterator(){
            	HX_STACK_FRAME("List","iterator",0x2d4cdfde,"List.iterator","/usr/lib/haxe/std/List.hx",161,0xd5566cff)
            	HX_STACK_THIS(this)
HXLINE( 161)		return  ::_List::ListIterator_obj::__new(this->h);
            	}


HX_DEFINE_DYNAMIC_FUNC0(List_obj,iterator,return )

::String List_obj::toString(){
            	HX_STACK_FRAME("List","toString",0xd221669c,"List.toString","/usr/lib/haxe/std/List.hx",170,0xd5566cff)
            	HX_STACK_THIS(this)
HXLINE( 171)		HX_VARI(  ::StringBuf,s) =  ::StringBuf_obj::__new();
HXLINE( 172)		HX_VARI( Bool,first) = true;
HXLINE( 173)		HX_VARI(  ::_List::ListNode,l) = this->h;
HXLINE( 174)		s->add(HX_("{",7b,00,00,00));
HXLINE( 175)		while(hx::IsNotNull( l )){
HXLINE( 176)			if (first) {
HXLINE( 177)				first = false;
            			}
            			else {
HXLINE( 179)				s->add(HX_(", ",74,26,00,00));
            			}
HXLINE( 180)			::String _hx_tmp = ::Std_obj::string(l->item);
HXDLIN( 180)			s->add(_hx_tmp);
HXLINE( 181)			l = l->next;
            		}
HXLINE( 183)		s->add(HX_("}",7d,00,00,00));
HXLINE( 184)		return s->b->join(HX_("",00,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(List_obj,toString,return )

::String List_obj::join(::String sep){
            	HX_STACK_FRAME("List","join",0xe7ba11da,"List.join","/usr/lib/haxe/std/List.hx",191,0xd5566cff)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sep,"sep")
HXLINE( 192)		HX_VARI(  ::StringBuf,s) =  ::StringBuf_obj::__new();
HXLINE( 193)		HX_VARI( Bool,first) = true;
HXLINE( 194)		HX_VARI(  ::_List::ListNode,l) = this->h;
HXLINE( 195)		while(hx::IsNotNull( l )){
HXLINE( 196)			if (first) {
HXLINE( 197)				first = false;
            			}
            			else {
HXLINE( 199)				s->add(sep);
            			}
HXLINE( 200)			s->add(l->item);
HXLINE( 201)			l = l->next;
            		}
HXLINE( 203)		return s->b->join(HX_("",00,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC1(List_obj,join,return )

 ::List List_obj::filter( ::Dynamic f){
            	HX_STACK_FRAME("List","filter",0xcbf159a8,"List.filter","/usr/lib/haxe/std/List.hx",210,0xd5566cff)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(f,"f")
HXLINE( 211)		HX_VARI(  ::List,l2) =  ::List_obj::__new();
HXLINE( 212)		HX_VARI(  ::_List::ListNode,l) = this->h;
HXLINE( 213)		while(hx::IsNotNull( l )){
HXLINE( 214)			HX_VARI(  ::Dynamic,v) = l->item;
HXLINE( 215)			l = l->next;
HXLINE( 216)			Bool _hx_tmp = ( (Bool)(f(v)) );
HXDLIN( 216)			if (_hx_tmp) {
HXLINE( 217)				l2->add(v);
            			}
            		}
HXLINE( 219)		return l2;
            	}


HX_DEFINE_DYNAMIC_FUNC1(List_obj,filter,return )

 ::List List_obj::map( ::Dynamic f){
            	HX_STACK_FRAME("List","map",0xed883aac,"List.map","/usr/lib/haxe/std/List.hx",226,0xd5566cff)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(f,"f")
HXLINE( 227)		HX_VARI(  ::List,b) =  ::List_obj::__new();
HXLINE( 228)		HX_VARI(  ::_List::ListNode,l) = this->h;
HXLINE( 229)		while(hx::IsNotNull( l )){
HXLINE( 230)			HX_VARI(  ::Dynamic,v) = l->item;
HXLINE( 231)			l = l->next;
HXLINE( 232)			 ::Dynamic _hx_tmp = f(v);
HXDLIN( 232)			b->add(_hx_tmp);
            		}
HXLINE( 234)		return b;
            	}


HX_DEFINE_DYNAMIC_FUNC1(List_obj,map,return )


List_obj::List_obj()
{
}

void List_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(List);
	HX_MARK_MEMBER_NAME(h,"h");
	HX_MARK_MEMBER_NAME(q,"q");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void List_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(h,"h");
	HX_VISIT_MEMBER_NAME(q,"q");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val List_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"h") ) { return hx::Val( h); }
		if (HX_FIELD_EQ(inName,"q") ) { return hx::Val( q); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn()); }
		if (HX_FIELD_EQ(inName,"map") ) { return hx::Val( map_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"push") ) { return hx::Val( push_dyn()); }
		if (HX_FIELD_EQ(inName,"last") ) { return hx::Val( last_dyn()); }
		if (HX_FIELD_EQ(inName,"join") ) { return hx::Val( join_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"first") ) { return hx::Val( first_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"filter") ) { return hx::Val( filter_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isEmpty") ) { return hx::Val( isEmpty_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"iterator") ) { return hx::Val( iterator_dyn()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val List_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"h") ) { h=inValue.Cast<  ::_List::ListNode >(); return inValue; }
		if (HX_FIELD_EQ(inName,"q") ) { q=inValue.Cast<  ::_List::ListNode >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void List_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("h","\x68","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("q","\x71","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo List_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::_List::ListNode*/ ,(int)offsetof(List_obj,h),HX_HCSTRING("h","\x68","\x00","\x00","\x00")},
	{hx::fsObject /*::_List::ListNode*/ ,(int)offsetof(List_obj,q),HX_HCSTRING("q","\x71","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(List_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *List_obj_sStaticStorageInfo = 0;
#endif

static ::String List_obj_sMemberFields[] = {
	HX_HCSTRING("h","\x68","\x00","\x00","\x00"),
	HX_HCSTRING("q","\x71","\x00","\x00","\x00"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("push","\xda","\x11","\x61","\x4a"),
	HX_HCSTRING("first","\x30","\x78","\x9d","\x00"),
	HX_HCSTRING("last","\x56","\x0a","\xad","\x47"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	HX_HCSTRING("isEmpty","\x43","\xde","\x5f","\x0c"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("join","\xea","\x33","\x65","\x46"),
	HX_HCSTRING("filter","\xb8","\x1f","\x35","\x85"),
	HX_HCSTRING("map","\x9c","\x0a","\x53","\x00"),
	::String(null()) };

static void List_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(List_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void List_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(List_obj::__mClass,"__mClass");
};

#endif

hx::Class List_obj::__mClass;

void List_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("List","\x7e","\x48","\x8c","\x32");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = List_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(List_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< List_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = List_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = List_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = List_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

