// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_List
#include <List.h>
#endif


void Lambda_obj::__construct() { }

Dynamic Lambda_obj::__CreateEmpty() { return new Lambda_obj; }

hx::ObjectPtr< Lambda_obj > Lambda_obj::__new()
{
	hx::ObjectPtr< Lambda_obj > _hx_result = new Lambda_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Lambda_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Lambda_obj > _hx_result = new Lambda_obj();
	_hx_result->__construct();
	return _hx_result;
}

::cpp::VirtualArray Lambda_obj::array( ::Dynamic it){
            	HX_STACK_FRAME("Lambda","array",0x9c8b0512,"Lambda.array","/usr/lib/haxe/std/Lambda.hx",44,0xc6d51bb6)
            	HX_STACK_ARG(it,"it")
HXLINE(  45)		HX_VARI( ::cpp::VirtualArray,a) = ::cpp::VirtualArray_obj::__new();
HXLINE(  46)		{
HXLINE(  46)			HX_VARI(  ::Dynamic,tmp) =  ::Dynamic(it->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))();
HXDLIN(  46)			while(true){
HXLINE(  46)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  46)				if (_hx_tmp) {
HXLINE(  46)					goto _hx_goto_0;
            				}
HXDLIN(  46)				HX_VARI(  ::Dynamic,i) =  ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE(  47)				a->push(i);
            			}
            			_hx_goto_0:;
            		}
HXLINE(  48)		return a;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lambda_obj,array,return )

 ::List Lambda_obj::list( ::Dynamic it){
            	HX_STACK_FRAME("Lambda","list",0x9f7ad705,"Lambda.list","/usr/lib/haxe/std/Lambda.hx",56,0xc6d51bb6)
            	HX_STACK_ARG(it,"it")
HXLINE(  57)		HX_VARI(  ::List,l) =  ::List_obj::__new();
HXLINE(  58)		{
HXLINE(  58)			HX_VARI(  ::Dynamic,tmp) =  ::Dynamic(it->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))();
HXDLIN(  58)			while(true){
HXLINE(  58)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  58)				if (_hx_tmp) {
HXLINE(  58)					goto _hx_goto_1;
            				}
HXDLIN(  58)				HX_VARI(  ::Dynamic,i) =  ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE(  59)				l->add(i);
            			}
            			_hx_goto_1:;
            		}
HXLINE(  60)		return l;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lambda_obj,list,return )

 ::List Lambda_obj::map( ::Dynamic it, ::Dynamic f){
            	HX_STACK_FRAME("Lambda","map",0x3d8fa1d5,"Lambda.map","/usr/lib/haxe/std/Lambda.hx",70,0xc6d51bb6)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(f,"f")
HXLINE(  71)		HX_VARI(  ::List,l) =  ::List_obj::__new();
HXLINE(  72)		{
HXLINE(  72)			HX_VARI(  ::Dynamic,tmp) =  ::Dynamic(it->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))();
HXDLIN(  72)			while(true){
HXLINE(  72)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  72)				if (_hx_tmp) {
HXLINE(  72)					goto _hx_goto_2;
            				}
HXDLIN(  72)				HX_VARI(  ::Dynamic,x) =  ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE(  73)				 ::Dynamic _hx_tmp1 = f(x);
HXDLIN(  73)				l->add(_hx_tmp1);
            			}
            			_hx_goto_2:;
            		}
HXLINE(  74)		return l;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lambda_obj,map,return )

 ::List Lambda_obj::mapi( ::Dynamic it, ::Dynamic f){
            	HX_STACK_FRAME("Lambda","mapi",0xa01df8f4,"Lambda.mapi","/usr/lib/haxe/std/Lambda.hx",84,0xc6d51bb6)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(f,"f")
HXLINE(  85)		HX_VARI(  ::List,l) =  ::List_obj::__new();
HXLINE(  86)		HX_VARI( Int,i) = (int)0;
HXLINE(  87)		{
HXLINE(  87)			HX_VARI(  ::Dynamic,tmp) =  ::Dynamic(it->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))();
HXDLIN(  87)			while(true){
HXLINE(  87)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  87)				if (_hx_tmp) {
HXLINE(  87)					goto _hx_goto_3;
            				}
HXDLIN(  87)				HX_VARI(  ::Dynamic,x) =  ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE(  88)				Int _hx_tmp1 = i++;
HXDLIN(  88)				 ::Dynamic _hx_tmp2 = f(_hx_tmp1,x);
HXDLIN(  88)				l->add(_hx_tmp2);
            			}
            			_hx_goto_3:;
            		}
HXLINE(  89)		return l;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lambda_obj,mapi,return )

 ::List Lambda_obj::flatten( ::Dynamic it){
            	HX_STACK_FRAME("Lambda","flatten",0xc5a6d37d,"Lambda.flatten","/usr/lib/haxe/std/Lambda.hx",97,0xc6d51bb6)
            	HX_STACK_ARG(it,"it")
HXLINE(  98)		HX_VARI(  ::List,l) =  ::List_obj::__new();
HXLINE(  99)		{
HXLINE(  99)			HX_VARI(  ::Dynamic,tmp) =  ::Dynamic(it->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))();
HXDLIN(  99)			while(true){
HXLINE(  99)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  99)				if (_hx_tmp) {
HXLINE(  99)					goto _hx_goto_4;
            				}
HXDLIN(  99)				HX_VARI(  ::Dynamic,e) =  ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE( 100)				{
HXLINE( 100)					HX_VARI_NAME(  ::Dynamic,tmp1,"tmp") =  ::Dynamic(e->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))();
HXDLIN( 100)					while(true){
HXLINE( 100)						Bool _hx_tmp1 = !(( (Bool)( ::Dynamic(tmp1->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 100)						if (_hx_tmp1) {
HXLINE( 100)							goto _hx_goto_5;
            						}
HXDLIN( 100)						HX_VARI(  ::Dynamic,x) =  ::Dynamic(tmp1->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE( 101)						l->add(x);
            					}
            					_hx_goto_5:;
            				}
            			}
            			_hx_goto_4:;
            		}
HXLINE( 102)		return l;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lambda_obj,flatten,return )

 ::List Lambda_obj::flatMap( ::Dynamic it, ::Dynamic f){
            	HX_STACK_FRAME("Lambda","flatMap",0xc589381c,"Lambda.flatMap","/usr/lib/haxe/std/Lambda.hx",113,0xc6d51bb6)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(f,"f")
HXLINE( 113)		 ::List _hx_tmp = ::Lambda_obj::map(it,f);
HXDLIN( 113)		return ::Lambda_obj::flatten(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lambda_obj,flatMap,return )

Bool Lambda_obj::has( ::Dynamic it, ::Dynamic elt){
            	HX_STACK_FRAME("Lambda","has",0x3d8bd693,"Lambda.has","/usr/lib/haxe/std/Lambda.hx",124,0xc6d51bb6)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(elt,"elt")
HXLINE( 125)		{
HXLINE( 125)			HX_VARI(  ::Dynamic,tmp) =  ::Dynamic(it->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))();
HXDLIN( 125)			while(true){
HXLINE( 125)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 125)				if (_hx_tmp) {
HXLINE( 125)					goto _hx_goto_6;
            				}
HXDLIN( 125)				HX_VARI(  ::Dynamic,x) =  ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE( 126)				if (hx::IsEq( x,elt )) {
HXLINE( 127)					return true;
            				}
            			}
            			_hx_goto_6:;
            		}
HXLINE( 128)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lambda_obj,has,return )

Bool Lambda_obj::exists( ::Dynamic it, ::Dynamic f){
            	HX_STACK_FRAME("Lambda","exists",0x65091043,"Lambda.exists","/usr/lib/haxe/std/Lambda.hx",141,0xc6d51bb6)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(f,"f")
HXLINE( 142)		{
HXLINE( 142)			HX_VARI(  ::Dynamic,tmp) =  ::Dynamic(it->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))();
HXDLIN( 142)			while(true){
HXLINE( 142)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 142)				if (_hx_tmp) {
HXLINE( 142)					goto _hx_goto_7;
            				}
HXDLIN( 142)				HX_VARI(  ::Dynamic,x) =  ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE( 143)				Bool _hx_tmp1 = ( (Bool)(f(x)) );
HXDLIN( 143)				if (_hx_tmp1) {
HXLINE( 144)					return true;
            				}
            			}
            			_hx_goto_7:;
            		}
HXLINE( 145)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lambda_obj,exists,return )

Bool Lambda_obj::foreach( ::Dynamic it, ::Dynamic f){
            	HX_STACK_FRAME("Lambda","foreach",0xb8902543,"Lambda.foreach","/usr/lib/haxe/std/Lambda.hx",160,0xc6d51bb6)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(f,"f")
HXLINE( 161)		{
HXLINE( 161)			HX_VARI(  ::Dynamic,tmp) =  ::Dynamic(it->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))();
HXDLIN( 161)			while(true){
HXLINE( 161)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 161)				if (_hx_tmp) {
HXLINE( 161)					goto _hx_goto_8;
            				}
HXDLIN( 161)				HX_VARI(  ::Dynamic,x) =  ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE( 162)				Bool _hx_tmp1 = !(( (Bool)(f(x)) ));
HXDLIN( 162)				if (_hx_tmp1) {
HXLINE( 163)					return false;
            				}
            			}
            			_hx_goto_8:;
            		}
HXLINE( 164)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lambda_obj,foreach,return )

void Lambda_obj::iter( ::Dynamic it, ::Dynamic f){
            	HX_STACK_FRAME("Lambda","iter",0x9d877fbf,"Lambda.iter","/usr/lib/haxe/std/Lambda.hx",173,0xc6d51bb6)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(f,"f")
HXLINE( 173)		HX_VARI(  ::Dynamic,tmp) =  ::Dynamic(it->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))();
HXDLIN( 173)		while(true){
HXLINE( 173)			Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 173)			if (_hx_tmp) {
HXLINE( 173)				goto _hx_goto_9;
            			}
HXDLIN( 173)			HX_VARI(  ::Dynamic,x) =  ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE( 174)			f(x);
            		}
            		_hx_goto_9:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lambda_obj,iter,(void))

 ::List Lambda_obj::filter( ::Dynamic it, ::Dynamic f){
            	HX_STACK_FRAME("Lambda","filter",0x2a5e121f,"Lambda.filter","/usr/lib/haxe/std/Lambda.hx",185,0xc6d51bb6)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(f,"f")
HXLINE( 186)		HX_VARI(  ::List,l) =  ::List_obj::__new();
HXLINE( 187)		{
HXLINE( 187)			HX_VARI(  ::Dynamic,tmp) =  ::Dynamic(it->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))();
HXDLIN( 187)			while(true){
HXLINE( 187)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 187)				if (_hx_tmp) {
HXLINE( 187)					goto _hx_goto_10;
            				}
HXDLIN( 187)				HX_VARI(  ::Dynamic,x) =  ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE( 188)				Bool _hx_tmp1 = ( (Bool)(f(x)) );
HXDLIN( 188)				if (_hx_tmp1) {
HXLINE( 189)					l->add(x);
            				}
            			}
            			_hx_goto_10:;
            		}
HXLINE( 190)		return l;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lambda_obj,filter,return )

 ::Dynamic Lambda_obj::fold( ::Dynamic it, ::Dynamic f, ::Dynamic first){
            	HX_STACK_FRAME("Lambda","fold",0x9b8816a8,"Lambda.fold","/usr/lib/haxe/std/Lambda.hx",205,0xc6d51bb6)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(first,"first")
HXLINE( 206)		{
HXLINE( 206)			HX_VARI(  ::Dynamic,tmp) =  ::Dynamic(it->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))();
HXDLIN( 206)			while(true){
HXLINE( 206)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 206)				if (_hx_tmp) {
HXLINE( 206)					goto _hx_goto_11;
            				}
HXDLIN( 206)				HX_VARI(  ::Dynamic,x) =  ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE( 207)				first = f(x,first);
            			}
            			_hx_goto_11:;
            		}
HXLINE( 208)		return first;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Lambda_obj,fold,return )

Int Lambda_obj::count( ::Dynamic it, ::Dynamic pred){
            	HX_STACK_FRAME("Lambda","count",0xc15edc48,"Lambda.count","/usr/lib/haxe/std/Lambda.hx",217,0xc6d51bb6)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(pred,"pred")
HXLINE( 218)		HX_VARI( Int,n) = (int)0;
HXLINE( 219)		if (hx::IsNull( pred )) {
HXLINE( 220)			HX_VARI(  ::Dynamic,tmp) =  ::Dynamic(it->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))();
HXDLIN( 220)			while(true){
HXLINE( 220)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 220)				if (_hx_tmp) {
HXLINE( 220)					goto _hx_goto_12;
            				}
HXDLIN( 220)				 ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE( 221)				++n;
            			}
            			_hx_goto_12:;
            		}
            		else {
HXLINE( 223)			HX_VARI_NAME(  ::Dynamic,tmp1,"tmp") =  ::Dynamic(it->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))();
HXDLIN( 223)			while(true){
HXLINE( 223)				Bool _hx_tmp1 = !(( (Bool)( ::Dynamic(tmp1->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 223)				if (_hx_tmp1) {
HXLINE( 223)					goto _hx_goto_13;
            				}
HXDLIN( 223)				HX_VARI(  ::Dynamic,x) =  ::Dynamic(tmp1->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE( 224)				Bool _hx_tmp2 = ( (Bool)(pred(x)) );
HXDLIN( 224)				if (_hx_tmp2) {
HXLINE( 225)					++n;
            				}
            			}
            			_hx_goto_13:;
            		}
HXLINE( 226)		return n;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lambda_obj,count,return )

Bool Lambda_obj::empty( ::Dynamic it){
            	HX_STACK_FRAME("Lambda","empty",0xe6d5d206,"Lambda.empty","/usr/lib/haxe/std/Lambda.hx",233,0xc6d51bb6)
            	HX_STACK_ARG(it,"it")
HXLINE( 233)		return !(( (Bool)( ::Dynamic( ::Dynamic(it->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))()->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lambda_obj,empty,return )

Int Lambda_obj::indexOf( ::Dynamic it, ::Dynamic v){
            	HX_STACK_FRAME("Lambda","indexOf",0xbf6a7082,"Lambda.indexOf","/usr/lib/haxe/std/Lambda.hx",243,0xc6d51bb6)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(v,"v")
HXLINE( 244)		HX_VARI( Int,i) = (int)0;
HXLINE( 245)		{
HXLINE( 245)			HX_VARI(  ::Dynamic,tmp) =  ::Dynamic(it->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))();
HXDLIN( 245)			while(true){
HXLINE( 245)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 245)				if (_hx_tmp) {
HXLINE( 245)					goto _hx_goto_14;
            				}
HXDLIN( 245)				HX_VARI(  ::Dynamic,v2) =  ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE( 246)				if (hx::IsEq( v,v2 )) {
HXLINE( 247)					return i;
            				}
HXLINE( 248)				++i;
            			}
            			_hx_goto_14:;
            		}
HXLINE( 250)		return (int)-1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lambda_obj,indexOf,return )

 ::Dynamic Lambda_obj::find( ::Dynamic it, ::Dynamic f){
            	HX_STACK_FRAME("Lambda","find",0x9b838ae0,"Lambda.find","/usr/lib/haxe/std/Lambda.hx",263,0xc6d51bb6)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(f,"f")
HXLINE( 264)		{
HXLINE( 264)			HX_VARI(  ::Dynamic,tmp) =  ::Dynamic(it->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))();
HXDLIN( 264)			while(true){
HXLINE( 264)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 264)				if (_hx_tmp) {
HXLINE( 264)					goto _hx_goto_15;
            				}
HXDLIN( 264)				HX_VARI(  ::Dynamic,v) =  ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE( 265)				Bool _hx_tmp1 = ( (Bool)(f(v)) );
HXDLIN( 265)				if (_hx_tmp1) {
HXLINE( 265)					return v;
            				}
            			}
            			_hx_goto_15:;
            		}
HXLINE( 267)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lambda_obj,find,return )

 ::List Lambda_obj::concat( ::Dynamic a, ::Dynamic b){
            	HX_STACK_FRAME("Lambda","concat",0x6cf8fb7b,"Lambda.concat","/usr/lib/haxe/std/Lambda.hx",276,0xc6d51bb6)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 277)		HX_VARI(  ::List,l) =  ::List_obj::__new();
HXLINE( 278)		{
HXLINE( 278)			HX_VARI(  ::Dynamic,tmp) =  ::Dynamic(a->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))();
HXDLIN( 278)			while(true){
HXLINE( 278)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 278)				if (_hx_tmp) {
HXLINE( 278)					goto _hx_goto_16;
            				}
HXDLIN( 278)				HX_VARI(  ::Dynamic,x) =  ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE( 279)				l->add(x);
            			}
            			_hx_goto_16:;
            		}
HXLINE( 280)		{
HXLINE( 280)			HX_VARI_NAME(  ::Dynamic,tmp1,"tmp") =  ::Dynamic(b->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))();
HXDLIN( 280)			while(true){
HXLINE( 280)				Bool _hx_tmp1 = !(( (Bool)( ::Dynamic(tmp1->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 280)				if (_hx_tmp1) {
HXLINE( 280)					goto _hx_goto_17;
            				}
HXDLIN( 280)				HX_VARI_NAME(  ::Dynamic,x1,"x") =  ::Dynamic(tmp1->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE( 281)				l->add(x1);
            			}
            			_hx_goto_17:;
            		}
HXLINE( 282)		return l;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lambda_obj,concat,return )


Lambda_obj::Lambda_obj()
{
}

bool Lambda_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { outValue = map_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"has") ) { outValue = has_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { outValue = list_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mapi") ) { outValue = mapi_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"iter") ) { outValue = iter_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fold") ) { outValue = fold_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"find") ) { outValue = find_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"array") ) { outValue = array_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"count") ) { outValue = count_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"empty") ) { outValue = empty_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { outValue = exists_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"filter") ) { outValue = filter_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"concat") ) { outValue = concat_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"flatten") ) { outValue = flatten_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"flatMap") ) { outValue = flatMap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"foreach") ) { outValue = foreach_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"indexOf") ) { outValue = indexOf_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Lambda_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Lambda_obj_sStaticStorageInfo = 0;
#endif

static void Lambda_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Lambda_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Lambda_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Lambda_obj::__mClass,"__mClass");
};

#endif

hx::Class Lambda_obj::__mClass;

static ::String Lambda_obj_sStaticFields[] = {
	HX_HCSTRING("array","\x99","\x6d","\x8f","\x25"),
	HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47"),
	HX_HCSTRING("map","\x9c","\x0a","\x53","\x00"),
	HX_HCSTRING("mapi","\x4d","\x3e","\x56","\x48"),
	HX_HCSTRING("flatten","\xc4","\xab","\xfb","\xe6"),
	HX_HCSTRING("flatMap","\x63","\x10","\xde","\xe6"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf"),
	HX_HCSTRING("foreach","\x8a","\xfd","\xe4","\xd9"),
	HX_HCSTRING("iter","\x18","\xc5","\xbf","\x45"),
	HX_HCSTRING("filter","\xb8","\x1f","\x35","\x85"),
	HX_HCSTRING("fold","\x01","\x5c","\xc0","\x43"),
	HX_HCSTRING("count","\xcf","\x44","\x63","\x4a"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("indexOf","\xc9","\x48","\xbf","\xe0"),
	HX_HCSTRING("find","\x39","\xd0","\xbb","\x43"),
	HX_HCSTRING("concat","\x14","\x09","\xd0","\xc7"),
	::String(null())
};

void Lambda_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Lambda","\x27","\xa7","\x54","\x85");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Lambda_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Lambda_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Lambda_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Lambda_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Lambda_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Lambda_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Lambda_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

