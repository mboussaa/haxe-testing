// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <haxe/io/Error.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_sys_io_FileOutput
#include <sys/io/FileOutput.h>
#endif
#ifndef INCLUDED_sys_io_FileSeek
#include <sys/io/FileSeek.h>
#endif

namespace sys{
namespace io{

void FileOutput_obj::__construct( ::Dynamic f){
            	HX_STACK_FRAME("sys.io.FileOutput","new",0x19e22a16,"sys.io.FileOutput.new","/usr/lib/haxe/std/cpp/_std/sys/io/FileOutput.hx",32,0xecdfd518)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(f,"f")
HXLINE(  32)		this->_hx___f = f;
            	}

Dynamic FileOutput_obj::__CreateEmpty() { return new FileOutput_obj; }

hx::ObjectPtr< FileOutput_obj > FileOutput_obj::__new( ::Dynamic f)
{
	hx::ObjectPtr< FileOutput_obj > _hx_result = new FileOutput_obj();
	_hx_result->__construct(f);
	return _hx_result;
}

Dynamic FileOutput_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FileOutput_obj > _hx_result = new FileOutput_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void FileOutput_obj::writeByte(Int c){
            	HX_STACK_FRAME("sys.io.FileOutput","writeByte",0x887099bd,"sys.io.FileOutput.writeByte","/usr/lib/haxe/std/cpp/_std/sys/io/FileOutput.hx",36,0xecdfd518)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(c,"c")
HXLINE(  36)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  36)			_hx_std_file_write_char(this->_hx___f,c);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE(  36)				HX_STACK_DO_THROW(::haxe::io::Error_obj::Custom(e));
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


Int FileOutput_obj::writeBytes(::haxe::io::Bytes s,Int p,Int l){
            	HX_STACK_FRAME("sys.io.FileOutput","writeBytes",0xda15ec16,"sys.io.FileOutput.writeBytes","/usr/lib/haxe/std/cpp/_std/sys/io/FileOutput.hx",40,0xecdfd518)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(p,"p")
            	HX_STACK_ARG(l,"l")
HXLINE(  40)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  40)			return _hx_std_file_write(this->_hx___f,s->b,p,l);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE(  40)				HX_STACK_DO_THROW(::haxe::io::Error_obj::Custom(e));
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN(  40)		return (int)0;
            	}


void FileOutput_obj::flush(){
            	HX_STACK_FRAME("sys.io.FileOutput","flush",0x5fbc15fa,"sys.io.FileOutput.flush","/usr/lib/haxe/std/cpp/_std/sys/io/FileOutput.hx",44,0xecdfd518)
            	HX_STACK_THIS(this)
HXLINE(  44)		_hx_std_file_flush(this->_hx___f);
            	}


void FileOutput_obj::close(){
            	HX_STACK_FRAME("sys.io.FileOutput","close",0xa583caee,"sys.io.FileOutput.close","/usr/lib/haxe/std/cpp/_std/sys/io/FileOutput.hx",47,0xecdfd518)
            	HX_STACK_THIS(this)
HXLINE(  48)		this->super::close();
HXLINE(  49)		_hx_std_file_close(this->_hx___f);
            	}


void FileOutput_obj::seek(Int p,::hx::EnumBase pos){
            	HX_STACK_FRAME("sys.io.FileOutput","seek",0x8f50ab02,"sys.io.FileOutput.seek","/usr/lib/haxe/std/cpp/_std/sys/io/FileOutput.hx",53,0xecdfd518)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(p,"p")
            	HX_STACK_ARG(pos,"pos")
HXLINE(  53)		Int _hx_tmp;
HX_STACK_VAR		(_hx_tmp,"_hx_tmp");
HXDLIN(  53)		if (hx::IsEq( pos,::sys::io::FileSeek_obj::SeekBegin_dyn() )) {
HXLINE(  53)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE(  53)			if (hx::IsEq( pos,::sys::io::FileSeek_obj::SeekCur_dyn() )) {
HXLINE(  53)				_hx_tmp = (int)1;
            			}
            			else {
HXLINE(  53)				_hx_tmp = (int)2;
            			}
            		}
HXDLIN(  53)		_hx_std_file_seek(this->_hx___f,p,_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FileOutput_obj,seek,(void))

Int FileOutput_obj::tell(){
            	HX_STACK_FRAME("sys.io.FileOutput","tell",0x8ff9e7bb,"sys.io.FileOutput.tell","/usr/lib/haxe/std/cpp/_std/sys/io/FileOutput.hx",57,0xecdfd518)
            	HX_STACK_THIS(this)
HXLINE(  57)		return _hx_std_file_tell(this->_hx___f);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FileOutput_obj,tell,return )


FileOutput_obj::FileOutput_obj()
{
}

void FileOutput_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FileOutput);
	HX_MARK_MEMBER_NAME(_hx___f,"__f");
	HX_MARK_END_CLASS();
}

void FileOutput_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___f,"__f");
}

hx::Val FileOutput_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"__f") ) { return hx::Val( _hx___f); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"seek") ) { return hx::Val( seek_dyn()); }
		if (HX_FIELD_EQ(inName,"tell") ) { return hx::Val( tell_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"flush") ) { return hx::Val( flush_dyn()); }
		if (HX_FIELD_EQ(inName,"close") ) { return hx::Val( close_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"writeByte") ) { return hx::Val( writeByte_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"writeBytes") ) { return hx::Val( writeBytes_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FileOutput_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"__f") ) { _hx___f=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FileOutput_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__f","\x46","\x69","\x48","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FileOutput_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FileOutput_obj,_hx___f),HX_HCSTRING("__f","\x46","\x69","\x48","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FileOutput_obj_sStaticStorageInfo = 0;
#endif

static ::String FileOutput_obj_sMemberFields[] = {
	HX_HCSTRING("__f","\x46","\x69","\x48","\x00"),
	HX_HCSTRING("writeByte","\x87","\x13","\xd7","\x49"),
	HX_HCSTRING("writeBytes","\x0c","\x03","\x5a","\x52"),
	HX_HCSTRING("flush","\xc4","\x62","\x9b","\x02"),
	HX_HCSTRING("close","\xb8","\x17","\x63","\x48"),
	HX_HCSTRING("seek","\x78","\x85","\x50","\x4c"),
	HX_HCSTRING("tell","\x31","\xc2","\xf9","\x4c"),
	::String(null()) };

static void FileOutput_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FileOutput_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FileOutput_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FileOutput_obj::__mClass,"__mClass");
};

#endif

hx::Class FileOutput_obj::__mClass;

void FileOutput_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("sys.io.FileOutput","\x24","\x27","\x1a","\x0b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FileOutput_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FileOutput_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FileOutput_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FileOutput_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FileOutput_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FileOutput_obj_sStaticStorageInfo;
#endif
	hx::RegisterClass(__mClass->mName, __mClass);
}

} // end namespace sys
} // end namespace io
