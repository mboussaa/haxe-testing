digraph graphname {
n4531 [shape=box,label="<function-end>
(4531)"];
n4530 [shape=box,label="<function-begin>
(4530)\nScopes: 0\nvar quarterRot = 90.0\nvar _hx_tmp = Math.PI / 180\nvar angleRadians = _hx_tmp * quarterRot\nvar s = Math.sin(angleRadians)\nvar c = Math.cos(angleRadians)\nvar this\nthis = new hxmath.math.Matrix3x3Default(1,0,0,0,c,- s,0,s,c)\nvar a = cast this\nvar this\nthis = new hxmath.math.Vector3Default(0.0,1.0,0.0)\nvar v = cast this\nvar _hx_tmp = a.m00 * v.x\nvar _hx_tmp = a.m10 * v.y\nvar _hx_tmp = _hx_tmp + _hx_tmp\nvar _hx_tmp = a.m20 * v.z\nvar x = _hx_tmp + _hx_tmp\nvar _hx_tmp = a.m01 * v.x\nvar _hx_tmp = a.m11 * v.y\nvar _hx_tmp = _hx_tmp + _hx_tmp\nvar _hx_tmp = a.m21 * v.z\nvar y = _hx_tmp + _hx_tmp\nvar _hx_tmp = a.m02 * v.x\nvar _hx_tmp = a.m12 * v.y\nvar _hx_tmp = _hx_tmp + _hx_tmp\nvar _hx_tmp = a.m22 * v.z\nvar z = _hx_tmp + _hx_tmp\nvar this\nthis = new hxmath.math.Vector3Default(x,y,z)\nvar a = cast this\nvar this\nthis = new hxmath.math.Vector3Default(0.0,0.0,1.0)\nvar b = cast this\nvar self = cast a\nvar x = self.x\nvar y = self.y\nvar z = self.z\nvar this\nthis = new hxmath.math.Vector3Default(x,y,z)\nvar this = cast this\nvar self = cast this\nself.x -= b.x\nself.y -= b.y\nself.z -= b.z\nvar this = self\nvar self = cast this\nvar _hx_tmp = self.x * self.x\nvar _hx_tmp = self.y * self.y\nvar _hx_tmp = _hx_tmp + _hx_tmp\nvar _hx_tmp = self.z * self.z\nvar _hx_tmp = _hx_tmp + _hx_tmp\nvar _hx_tmp = Math.sqrt(_hx_tmp)\nthis.assertApproxEquals(_hx_tmp,0.0,null,{fileName : \"Test3D.hx\",lineNumber : 53,className : \"test.Test3D\",methodName : \"testAxialRotation\"})\nvar _hx_tmp = Math.PI / 180\nvar angleRadians = _hx_tmp * quarterRot\nvar s = Math.sin(angleRadians)\nvar c = Math.cos(angleRadians)\nvar this\nthis = new hxmath.math.Matrix3x3Default(1,0,0,0,c,- s,0,s,c)\nvar a = cast this\nvar this\nthis = new hxmath.math.Vector3Default(0.0,0.0,1.0)\nvar v = cast this\nvar _hx_tmp = a.m00 * v.x\nvar _hx_tmp = a.m10 * v.y\nvar _hx_tmp = _hx_tmp + _hx_tmp\nvar _hx_tmp = a.m20 * v.z\nvar x = _hx_tmp + _hx_tmp\nvar _hx_tmp = a.m01 * v.x\nvar _hx_tmp = a.m11 * v.y\nvar _hx_tmp = _hx_tmp + _hx_tmp\nvar _hx_tmp = a.m21 * v.z\nvar y = _hx_tmp + _hx_tmp\nvar _hx_tmp = a.m02 * v.x\nvar _hx_tmp = a.m12 * v.y\nvar _hx_tmp = _hx_tmp + _hx_tmp\nvar _hx_tmp = a.m22 * v.z\nvar z = _hx_tmp + _hx_tmp\nvar this\nthis = new hxmath.math.Vector3Default(x,y,z)\nvar a = cast this\nvar this\nthis = new hxmath.math.Vector3Default(0.0,1.0,0.0)\nvar b = cast this\nvar self = cast a\nvar x = self.x\nvar y = self.y\nvar z = self.z\nvar this\nthis = new hxmath.math.Vector3Default(x,y,z)\nvar this = cast this\nvar self = cast this\nself.x += b.x\nself.y += b.y\nself.z += b.z\nvar this = self\nvar self = cast this\nvar _hx_tmp = self.x * self.x\nvar _hx_tmp = self.y * self.y\nvar _hx_tmp = _hx_tmp + _hx_tmp\nvar _hx_tmp = self.z * self.z\nvar _hx_tmp = _hx_tmp + _hx_tmp\nvar _hx_tmp = Math.sqrt(_hx_tmp)\nthis.assertApproxEquals(_hx_tmp,0.0,null,{fileName : \"Test3D.hx\",lineNumber : 54,className : \"test.Test3D\",methodName : \"testAxialRotation\"})\nvar _hx_tmp = Math.PI / 180\nvar angleRadians = _hx_tmp * quarterRot\nvar s = Math.sin(angleRadians)\nvar c = Math.cos(angleRadians)\nvar this\nthis = new hxmath.math.Matrix3x3Default(c,0,s,0,1,0,- s,0,c)\nvar a = cast this\nvar this\nthis = new hxmath.math.Vector3Default(0.0,0.0,1.0)\nvar v = cast this\nvar _hx_tmp = a.m00 * v.x\nvar _hx_tmp = a.m10 * v.y\nvar _hx_tmp = _hx_tmp + _hx_tmp\nvar _hx_tmp = a.m20 * v.z\nvar x = _hx_tmp + _hx_tmp\nvar _hx_tmp = a.m01 * v.x\nvar _hx_tmp = a.m11 * v.y\nvar _hx_tmp = _hx_tmp + _hx_tmp\nvar _hx_tmp = a.m21 * v.z\nvar y = _hx_tmp + _hx_tmp\nvar _hx_tmp = a.m02 * v.x\nvar _hx_tmp = a.m12 * v.y\nvar _hx_tmp = _hx_tmp + _hx_tmp\nvar _hx_tmp = a.m22 * v.z\nvar z = _hx_tmp + _hx_tmp\nvar this\nthis = new hxmath.math.Vector3Default(x,y,z)\nvar a = cast this\nvar this\nthis = new hxmath.math.Vector3Default(1.0,0.0,0.0)\nvar b = cast this\nvar self = cast a\nvar x = self.x\nvar y = self.y\nvar z = self.z\nvar this\nthis = new hxmath.math.Vector3Default(x,y,z)\nvar this = cast this\nvar self = cast this\nself.x -= b.x\nself.y -= b.y\nself.z -= b.z\nvar this = self\nvar self = cast this\nvar _hx_tmp = self.x * self.x\nvar _hx_tmp = self.y * self.y\nvar _hx_tmp = _hx_tmp + _hx_tmp\nvar _hx_tmp = self.z * self.z\nvar _hx_tmp = _hx_tmp + _hx_tmp\nvar _hx_tmp = Math.sqrt(_hx_tmp)\nthis.assertApproxEquals(_hx_tmp,0.0,null,{fileName : \"Test3D.hx\",lineNumber : 59,className : \"test.Test3D\",methodName : \"testAxialRotation\"})\nvar _hx_tmp = Math.PI / 180\nvar angleRadians = _hx_tmp * quarterRot\nvar s = Math.sin(angleRadians)\nvar c = Math.cos(angleRadians)\nvar this\nthis = new hxmath.math.Matrix3x3Default(c,0,s,0,1,0,- s,0,c)\nvar a = cast this\nvar this\nthis = new hxmath.math.Vector3Default(1.0,0.0,0.0)\nvar v = cast this\nvar _hx_tmp = a.m00 * v.x\nvar _hx_tmp = a.m10 * v.y\nvar _hx_tmp = _hx_tmp + _hx_tmp\nvar _hx_tmp = a.m20 * v.z\nvar x = _hx_tmp + _hx_tmp\nvar _hx_tmp = a.m01 * v.x\nvar _hx_tmp = a.m11 * v.y\nvar _hx_tmp = _hx_tmp + _hx_tmp\nvar _hx_tmp = a.m21 * v.z\nvar y = _hx_tmp + _hx_tmp\nvar _hx_tmp = a.m02 * v.x\nvar _hx_tmp = a.m12 * v.y\nvar _hx_tmp = _hx_tmp + _hx_tmp\nvar _hx_tmp = a.m22 * v.z\nvar z = _hx_tmp + _hx_tmp\nvar this\nthis = new hxmath.math.Vector3Default(x,y,z)\nvar a = cast this\nvar this\nthis = new hxmath.math.Vector3Default(0.0,0.0,1.0)\nvar b = cast this\nvar self = cast a\nvar x = self.x\nvar y = self.y\nvar z = self.z\nvar this\nthis = new hxmath.math.Vector3Default(x,y,z)\nvar this = cast this\nvar self = cast this\nself.x += b.x\nself.y += b.y\nself.z += b.z\nvar this = self\nvar self = cast this\nvar _hx_tmp = self.x * self.x\nvar _hx_tmp = self.y * self.y\nvar _hx_tmp = _hx_tmp + _hx_tmp\nvar _hx_tmp = self.z * self.z\nvar _hx_tmp = _hx_tmp + _hx_tmp\nvar _hx_tmp = Math.sqrt(_hx_tmp)\nthis.assertApproxEquals(_hx_tmp,0.0,null,{fileName : \"Test3D.hx\",lineNumber : 60,className : \"test.Test3D\",methodName : \"testAxialRotation\"})\nvar _hx_tmp = Math.PI / 180\nvar angleRadians = _hx_tmp * quarterRot\nvar s = Math.sin(angleRadians)\nvar c = Math.cos(angleRadians)\nvar this\nthis = new hxmath.math.Matrix3x3Default(c,- s,0,s,c,0,0,0,1)\nvar a = cast this\nvar this\nthis = new hxmath.math.Vector3Default(1.0,0.0,0.0)\nvar v = cast this\nvar _hx_tmp = a.m00 * v.x\nvar _hx_tmp = a.m10 * v.y\nvar _hx_tmp = _hx_tmp + _hx_tmp\nvar _hx_tmp = a.m20 * v.z\nvar x = _hx_tmp + _hx_tmp\nvar _hx_tmp = a.m01 * v.x\nvar _hx_tmp = a.m11 * v.y\nvar _hx_tmp = _hx_tmp + _hx_tmp\nvar _hx_tmp = a.m21 * v.z\nvar y = _hx_tmp + _hx_tmp\nvar _hx_tmp = a.m02 * v.x\nvar _hx_tmp = a.m12 * v.y\nvar _hx_tmp = _hx_tmp + _hx_tmp\nvar _hx_tmp = a.m22 * v.z\nvar z = _hx_tmp + _hx_tmp\nvar this\nthis = new hxmath.math.Vector3Default(x,y,z)\nvar a = cast this\nvar this\nthis = new hxmath.math.Vector3Default(0.0,1.0,0.0)\nvar b = cast this\nvar self = cast a\nvar x = self.x\nvar y = self.y\nvar z = self.z\nvar this\nthis = new hxmath.math.Vector3Default(x,y,z)\nvar this = cast this\nvar self = cast this\nself.x -= b.x\nself.y -= b.y\nself.z -= b.z\nvar this = self\nvar self = cast this\nvar _hx_tmp = self.x * self.x\nvar _hx_tmp = self.y * self.y\nvar _hx_tmp = _hx_tmp + _hx_tmp\nvar _hx_tmp = self.z * self.z\nvar _hx_tmp = _hx_tmp + _hx_tmp\nvar _hx_tmp = Math.sqrt(_hx_tmp)\nthis.assertApproxEquals(_hx_tmp,0.0,null,{fileName : \"Test3D.hx\",lineNumber : 65,className : \"test.Test3D\",methodName : \"testAxialRotation\"})\nvar _hx_tmp = Math.PI / 180\nvar angleRadians = _hx_tmp * quarterRot\nvar s = Math.sin(angleRadians)\nvar c = Math.cos(angleRadians)\nvar this\nthis = new hxmath.math.Matrix3x3Default(c,- s,0,s,c,0,0,0,1)\nvar a = cast this\nvar this\nthis = new hxmath.math.Vector3Default(0.0,1.0,0.0)\nvar v = cast this\nvar _hx_tmp = a.m00 * v.x\nvar _hx_tmp = a.m10 * v.y\nvar _hx_tmp = _hx_tmp + _hx_tmp\nvar _hx_tmp = a.m20 * v.z\nvar x = _hx_tmp + _hx_tmp\nvar _hx_tmp = a.m01 * v.x\nvar _hx_tmp = a.m11 * v.y\nvar _hx_tmp = _hx_tmp + _hx_tmp\nvar _hx_tmp = a.m21 * v.z\nvar y = _hx_tmp + _hx_tmp\nvar _hx_tmp = a.m02 * v.x\nvar _hx_tmp = a.m12 * v.y\nvar _hx_tmp = _hx_tmp + _hx_tmp\nvar _hx_tmp = a.m22 * v.z\nvar z = _hx_tmp + _hx_tmp\nvar this\nthis = new hxmath.math.Vector3Default(x,y,z)\nvar a = cast this\nvar this\nthis = new hxmath.math.Vector3Default(1.0,0.0,0.0)\nvar b = cast this\nvar self = cast a\nvar x = self.x\nvar y = self.y\nvar z = self.z\nvar this\nthis = new hxmath.math.Vector3Default(x,y,z)\nvar this = cast this\nvar self = cast this\nself.x += b.x\nself.y += b.y\nself.z += b.z\nvar this = self\nvar self = cast this\nvar _hx_tmp = self.x * self.x\nvar _hx_tmp = self.y * self.y\nvar _hx_tmp = _hx_tmp + _hx_tmp\nvar _hx_tmp = self.z * self.z\nvar _hx_tmp = _hx_tmp + _hx_tmp\nvar _hx_tmp = Math.sqrt(_hx_tmp)\nthis.assertApproxEquals(_hx_tmp,0.0,null,{fileName : \"Test3D.hx\",lineNumber : 66,className : \"test.Test3D\",methodName : \"testAxialRotation\"})"];
n1 [shape=box,label="<root>
(1)"];
n1 -> n4530[label="function [exe]"];
n4530 -> n4531[label="goto [exe]"];
}
