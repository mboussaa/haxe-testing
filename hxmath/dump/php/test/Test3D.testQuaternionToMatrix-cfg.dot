digraph graphname {
n4274 [shape=box,label="(4274)\nScopes: 0"];
n4273 [shape=box,label="(4273)\nScopes: 1, 0"];
n4272 [shape=box,label="(4272)\nLoops: 0\nScopes: 2, 1, 0"];
n4271 [shape=box,label="(4271)\nLoops: 0\nScopes: 4, 2, 1, 0"];
n4270 [shape=box,label="(4270)\nLoops: 1, 0\nScopes: 5, 4, 2, 1, 0\nthis.assertApproxEquals(totalLength,0.0,null,{fileName : \"Test3D.hx\",lineNumber : 98,className : \"test.Test3D\",methodName : \"testQuaternionToMatrix\"})"];
n4269 [shape=box,label="(4269)\nLoops: 1, 0\nScopes: 7, 5, 4, 2, 1, 0"];
n4268 [shape=box,label="(4268)\nLoops: 2, 1, 0\nScopes: 8, 7, 5, 4, 2, 1, 0\ntmp = \"phi\"(tmp,tmp,tmp)\nvar b = cast tmp\nnull\nvar x = a.x\nvar y = a.y\nvar z = a.z\nvar this\nthis = new hxmath.math.Vector3Default(x,y,z)\nnull\nvar self = cast this\nself.x -= b.x\nself.y -= b.y\nself.z -= b.z\nvar this = self\nvar self = cast this\nvar tmp = self.x * self.x\nvar tmp = self.y * self.y\nvar tmp = tmp + tmp\nvar tmp = self.z * self.z\nvar tmp = tmp + tmp\nvar tmp = Math.sqrt(tmp)\ntotalLength = totalLength + tmp"];
n4267 [shape=box,label="(4267)\nLoops: 2, 1, 0\nScopes: 17, 8, 7, 5, 4, 2, 1, 0\nthrow \"Invalid column\""];
n4266 [shape=box,label="(4266)\nLoops: 2, 1, 0\nScopes: 16, 8, 7, 5, 4, 2, 1, 0\nvar x = self.m20\nvar y = self.m21\nvar z = self.m22\nvar this\nthis = new hxmath.math.Vector3Default(x,y,z)\ntmp = cast this"];
n4265 [shape=box,label="(4265)\nLoops: 2, 1, 0\nScopes: 15, 8, 7, 5, 4, 2, 1, 0\nvar x = self.m10\nvar y = self.m11\nvar z = self.m12\nvar this\nthis = new hxmath.math.Vector3Default(x,y,z)\ntmp = cast this"];
n4264 [shape=box,label="(4264)\nLoops: 2, 1, 0\nScopes: 14, 8, 7, 5, 4, 2, 1, 0\nvar x = self.m00\nvar y = self.m01\nvar z = self.m02\nvar this\nthis = new hxmath.math.Vector3Default(x,y,z)\ntmp = cast this"];
n4263 [shape=box,label="(4263)\nLoops: 2, 1, 0\nScopes: 8, 7, 5, 4, 2, 1, 0\ntmp = \"phi\"(tmp,tmp,tmp)\nvar a = cast tmp\nvar self = cast pair.m\nvar tmp\nnull\n@:cond-branch c"];
n4262 [shape=box,label="(4262)\nLoops: 2, 1, 0\nScopes: 13, 8, 7, 5, 4, 2, 1, 0\nthrow \"Invalid column\""];
n4261 [shape=box,label="(4261)\nLoops: 2, 1, 0\nScopes: 12, 8, 7, 5, 4, 2, 1, 0\nvar x = self.m20\nvar y = self.m21\nvar z = self.m22\nvar this\nthis = new hxmath.math.Vector3Default(x,y,z)\ntmp = cast this"];
n4260 [shape=box,label="(4260)\nLoops: 2, 1, 0\nScopes: 11, 8, 7, 5, 4, 2, 1, 0\nvar x = self.m10\nvar y = self.m11\nvar z = self.m12\nvar this\nthis = new hxmath.math.Vector3Default(x,y,z)\ntmp = cast this"];
n4259 [shape=box,label="(4259)\nLoops: 2, 1, 0\nScopes: 10, 8, 7, 5, 4, 2, 1, 0\nvar x = self.m00\nvar y = self.m01\nvar z = self.m02\nvar this\nthis = new hxmath.math.Vector3Default(x,y,z)\ntmp = cast this"];
n4258 [shape=box,label="(4258)\nLoops: 2, 1, 0\nScopes: 8, 7, 5, 4, 2, 1, 0\n`2 = `2 + 1\nvar c = `2 - 1\nvar pair = createMatrixPair(unitAngle,axis)\nvar self = cast pair.n\nvar tmp\nnull\n@:cond-branch c"];
n4257 [shape=box,label="(4257)\nLoops: 2, 1, 0\nScopes: 9, 8, 7, 5, 4, 2, 1, 0\nbreak"];
n4256 [shape=box,label="(4256)\nLoops: 2, 1, 0\nScopes: 8, 7, 5, 4, 2, 1, 0\nvar tmp = ! ((`2 < 3))\n@:cond-branch tmp"];
n4255 [shape=box,label="<loop-head>
(4255)\nLoops: 2, 1, 0\nScopes: 8, 7, 5, 4, 2, 1, 0\ntotalLength = \"phi\"(totalLength,totalLength)\n`2 = \"phi\"(`2,`2)\ntmp = \"phi\"(tmp,tmp)\nc = \"phi\"(c,c)\npair = \"phi\"(pair,pair)\nself = \"phi\"(self,self)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\na = \"phi\"(a,a)\nself = \"phi\"(self,self)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\nb = \"phi\"(b,b)\nself = \"phi\"(self,self)\nx = \"phi\"(x,x)\ny = \"phi\"(y,y)\nz = \"phi\"(z,z)\nthis = \"phi\"(this,this)\nthis = \"phi\"(this,this)\nself = \"phi\"(self,self)\nthis = \"phi\"(this,this)\nself = \"phi\"(self,self)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)"];
n4254 [shape=box,label="(4254)\nLoops: 1, 0\nScopes: 7, 5, 4, 2, 1, 0\nwhile ((true)) @:block 4256"];
n4253 [shape=box,label="(4253)\nLoops: 1, 0\nScopes: 7, 5, 4, 2, 1, 0\nvar `2 = 0"];
n4252 [shape=box,label="(4252)\nLoops: 1, 0\nScopes: 5, 4, 2, 1, 0\n`1 = `1 + 1\nnull\nunitAngle = unitAngle + 0.01\nvar totalLength = 0.0"];
n4251 [shape=box,label="(4251)\nLoops: 1, 0\nScopes: 6, 5, 4, 2, 1, 0\nbreak"];
n4250 [shape=box,label="(4250)\nLoops: 1, 0\nScopes: 5, 4, 2, 1, 0\nvar tmp = ! ((`1 < 10))\n@:cond-branch tmp"];
n4249 [shape=box,label="<loop-head>
(4249)\nLoops: 1, 0\nScopes: 5, 4, 2, 1, 0\nunitAngle = \"phi\"(unitAngle,unitAngle)\n`1 = \"phi\"(`1,`1)\ntmp = \"phi\"(tmp,tmp)\ni = \"phi\"(i,i)\ntotalLength = \"phi\"(totalLength,totalLength)"];
n4248 [shape=box,label="(4248)\nLoops: 0\nScopes: 4, 2, 1, 0\nwhile ((true)) @:block 4250"];
n4247 [shape=box,label="(4247)\nLoops: 0\nScopes: 4, 2, 1, 0\nvar `1 = 0"];
n4246 [shape=box,label="(4246)\nLoops: 0\nScopes: 2, 1, 0\n` = ` + 1\nvar axis = ` - 1\nvar unitAngle = 0.0"];
n4245 [shape=box,label="(4245)\nLoops: 0\nScopes: 3, 2, 1, 0\nbreak"];
n4244 [shape=box,label="(4244)\nLoops: 0\nScopes: 2, 1, 0\nvar tmp = ! ((` < 3))\n@:cond-branch tmp"];
n4243 [shape=box,label="<loop-head>
(4243)\nLoops: 0\nScopes: 2, 1, 0\n` = \"phi\"(`,`)\ntmp = \"phi\"(tmp,tmp)\naxis = \"phi\"(axis,axis)\nunitAngle = \"phi\"(unitAngle,unitAngle)"];
n4242 [shape=box,label="(4242)\nScopes: 1, 0\nwhile ((true)) @:block 4244"];
n4241 [shape=box,label="(4241)\nScopes: 1, 0\nvar ` = 0"];
n4240 [shape=box,label="(4240)\nScopes: 0\nunitAngle = \"phi\"(unitAngle,unitAngle)\naxis = \"phi\"(axis,axis)\nthis = \"phi\"(this,this)\ntmp = \"phi\"(tmp,tmp)\nthis = \"phi\"(this,this)\ntmp = \"phi\"(tmp,tmp)\nthis = \"phi\"(this,this)\ntmp = \"phi\"(tmp,tmp)\naxes = \"phi\"(axes,axes)\nconst = \"phi\"(const,const)\nangle = \"phi\"(angle,angle)\naxis = \"phi\"(axis,axis)\ntmp = \"phi\"(tmp,tmp)\nangleRadians = \"phi\"(angleRadians,angleRadians)\ntmp = \"phi\"(tmp,tmp)\ncosHalfAngle = \"phi\"(cosHalfAngle,cosHalfAngle)\ntmp = \"phi\"(tmp,tmp)\nsinHalfAngle = \"phi\"(sinHalfAngle,sinHalfAngle)\nx = \"phi\"(x,x)\ny = \"phi\"(y,y)\nz = \"phi\"(z,z)\nthis = \"phi\"(this,this)\nq = \"phi\"(q,q)\nself = \"phi\"(self,self)\ns = \"phi\"(s,s)\nx = \"phi\"(x,x)\ny = \"phi\"(y,y)\nz = \"phi\"(z,z)\nthis = \"phi\"(this,this)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\ntmp = \"phi\"(tmp,tmp)\nm = \"phi\"(m,m)\nn = \"phi\"(n,n)\ntmp = \"phi\"(tmp,tmp)\nm = \"phi\"(m,m)\nvar createMatrixPair = \"fun\"(4238)"];
n4239 [shape=box,label="<function-end>
(4239)"];
n4238 [shape=box,label="<function-begin>
(4238)\nScopes: 0\nvar this\nthis = new hxmath.math.Vector3Default(1.0,0.0,0.0)\nvar tmp = cast this\nvar this\nthis = new hxmath.math.Vector3Default(0.0,1.0,0.0)\nvar tmp = cast this\nvar this\nthis = new hxmath.math.Vector3Default(0.0,0.0,1.0)\nvar tmp = cast this\nvar axes = [tmp,tmp,tmp]\nvar const = [hxmath.math._Matrix3x3.Matrix3x3_Impl_.rotationX,hxmath.math._Matrix3x3.Matrix3x3_Impl_.rotationY,hxmath.math._Matrix3x3.Matrix3x3_Impl_.rotationZ]\nvar angle = unitAngle * 360.0\nvar axis = axes[axis]\nvar tmp = Math.PI / 180\nvar angleRadians = tmp * angle\nvar tmp = angleRadians / 2.0\nvar cosHalfAngle = Math.cos(tmp)\nvar tmp = angleRadians / 2.0\nvar sinHalfAngle = Math.sin(tmp)\nvar x = sinHalfAngle * axis.x\nvar y = sinHalfAngle * axis.y\nvar z = sinHalfAngle * axis.z\nvar this\nthis = new hxmath.math.QuaternionDefault(cosHalfAngle,x,y,z)\nvar q = cast this\nnull\nvar s = q.s\nvar x = q.x\nvar y = q.y\nvar z = q.z\nvar this\nvar tmp = y * y\nvar tmp = z * z\nvar tmp = tmp + tmp\nvar tmp = 2 * tmp\nvar tmp = 1 - tmp\nvar tmp = x * y\nvar tmp = s * z\nvar tmp = tmp - tmp\nvar tmp = 2 * tmp\nvar tmp = s * y\nvar tmp = x * z\nvar tmp = tmp + tmp\nvar tmp = 2 * tmp\nvar tmp = x * y\nvar tmp = s * z\nvar tmp = tmp + tmp\nvar tmp = 2 * tmp\nvar tmp = x * x\nvar tmp = z * z\nvar tmp = tmp + tmp\nvar tmp = 2 * tmp\nvar tmp = 1 - tmp\nvar tmp = y * z\nvar tmp = s * x\nvar tmp = tmp - tmp\nvar tmp = 2 * tmp\nvar tmp = x * z\nvar tmp = s * y\nvar tmp = tmp - tmp\nvar tmp = 2 * tmp\nvar tmp = y * z\nvar tmp = s * x\nvar tmp = tmp + tmp\nvar tmp = 2 * tmp\nvar tmp = x * x\nvar tmp = y * y\nvar tmp = tmp + tmp\nvar tmp = 2 * tmp\nvar tmp = 1 - tmp\nthis = new hxmath.math.Matrix3x3Default(tmp,tmp,tmp,tmp,tmp,tmp,tmp,tmp,tmp)\nvar m = cast this\nnull\nvar tmp = const[axis]\nvar m = tmp(angle)\nreturn {m : m,n : m}"];
n4237 [shape=box,label="<function-end>
(4237)"];
n4236 [shape=box,label="<function-begin>
(4236)\nScopes: 0"];
n1 [shape=box,label="<root>
(1)"];
n1 -> n4236[label="function [dce, copy, exe]"];
n4236 -> n4240[label="goto [dce, copy, exe]"];
n4236 -> n4238[label="function [dce, copy, exe]"];
n4238 -> n4239[label="goto [dce, copy, exe]"];
n4239 -> n4240[label="goto [dce, copy, exe]"];
n4240 -> n4241[label="goto [dce, copy, exe]"];
n4241 -> n4242[label="goto [dce, copy, exe]"];
n4242 -> n4243[label="goto [dce, copy, exe]"];
n4243 -> n4244[label="goto [dce, copy, exe]"];
n4244 -> n4246[label="else [dce, copy, exe]"];
n4244 -> n4245[label="branch [dce, copy, exe]"];
n4245 -> n4273[label="goto [dce, copy, exe]"];
n4273 -> n4274[label="goto [dce, copy, exe]"];
n4274 -> n4237[label="goto [dce, copy, exe]"];
n4246 -> n4247[label="goto [dce, copy, exe]"];
n4247 -> n4248[label="goto [dce, copy, exe]"];
n4248 -> n4249[label="goto [dce, copy, exe]"];
n4249 -> n4250[label="goto [dce, copy, exe]"];
n4250 -> n4252[label="else [dce, copy, exe]"];
n4250 -> n4251[label="branch [dce, copy, exe]"];
n4251 -> n4271[label="goto [dce, copy, exe]"];
n4271 -> n4272[label="goto [dce, copy, exe]"];
n4272 -> n4243[label="goto [dce, copy, exe]"];
n4252 -> n4253[label="goto [dce, copy, exe]"];
n4253 -> n4254[label="goto [dce, copy, exe]"];
n4254 -> n4255[label="goto [dce, copy, exe]"];
n4255 -> n4256[label="goto [dce, copy, exe]"];
n4256 -> n4258[label="else [dce, copy, exe]"];
n4256 -> n4257[label="branch [dce, copy, exe]"];
n4257 -> n4269[label="goto [dce, copy, exe]"];
n4269 -> n4270[label="goto [dce, copy, exe]"];
n4270 -> n4249[label="goto [dce, copy, exe]"];
n4258 -> n4262[label="else [dce, copy, exe]"];
n4258 -> n4261[label="branch [dce, copy, exe]"];
n4258 -> n4260[label="branch [dce, copy, exe]"];
n4258 -> n4259[label="branch [dce, copy, exe]"];
n4259 -> n4263[label="goto [dce, copy, exe]"];
n4260 -> n4263[label="goto [dce, copy, exe]"];
n4263 -> n4267[label="else [dce, copy, exe]"];
n4263 -> n4266[label="branch [dce, copy, exe]"];
n4263 -> n4265[label="branch [dce, copy, exe]"];
n4263 -> n4264[label="branch [dce, copy, exe]"];
n4264 -> n4268[label="goto [dce, copy, exe]"];
n4265 -> n4268[label="goto [dce, copy, exe]"];
n4268 -> n4255[label="goto [dce, copy, exe]"];
n4266 -> n4268[label="goto [dce, copy, exe]"];
n4267 -> n4237[label="goto [dce, copy, exe]"];
n4261 -> n4263[label="goto [dce, copy, exe]"];
n4262 -> n4237[label="goto [dce, copy, exe]"];
}
