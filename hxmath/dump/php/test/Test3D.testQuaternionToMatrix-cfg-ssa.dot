digraph graphname {
	node [shape=plaintext];
n4274[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4274) BKNormal</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4273[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4273) BKNormal</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4272[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4272) BKNormal</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4271[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4271) BKNormal</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4270[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4270) BKNormal</td></tr>
	<tr><td port="e0" align="left">this.assertApproxEquals(totalLength,0.0,null,{fileName : \"Test3D.hx\",lineNumber : 98,className : \"test.Test3D\",methodName : \"testQuaternionToMatrix\"})</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4269[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4269) BKNormal</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4268[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4268) BKNormal</td></tr>
	<tr><td port="ep0" align="left">tmp = \"phi\"(tmp,tmp,tmp)</td></tr>
	<tr><td port="e0" align="left">var b = cast tmp</td></tr>
	<tr><td port="e1" align="left">null</td></tr>
	<tr><td port="e2" align="left">var x = a.x</td></tr>
	<tr><td port="e3" align="left">var y = a.y</td></tr>
	<tr><td port="e4" align="left">var z = a.z</td></tr>
	<tr><td port="e5" align="left">var this</td></tr>
	<tr><td port="e6" align="left">this = new hxmath.math.Vector3Default(x,y,z)</td></tr>
	<tr><td port="e7" align="left">null</td></tr>
	<tr><td port="e8" align="left">var self = cast this</td></tr>
	<tr><td port="e9" align="left">self.x -= b.x</td></tr>
	<tr><td port="e10" align="left">self.y -= b.y</td></tr>
	<tr><td port="e11" align="left">self.z -= b.z</td></tr>
	<tr><td port="e12" align="left">var this = self</td></tr>
	<tr><td port="e13" align="left">var self = cast this</td></tr>
	<tr><td port="e14" align="left">var tmp = self.x * self.x</td></tr>
	<tr><td port="e15" align="left">var tmp = self.y * self.y</td></tr>
	<tr><td port="e16" align="left">var tmp = tmp + tmp</td></tr>
	<tr><td port="e17" align="left">var tmp = self.z * self.z</td></tr>
	<tr><td port="e18" align="left">var tmp = tmp + tmp</td></tr>
	<tr><td port="e19" align="left">var tmp = Math.sqrt(tmp)</td></tr>
	<tr><td port="e20" align="left">totalLength = totalLength + tmp</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4267[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4267) BKConditional</td></tr>
	<tr><td port="e0" align="left">throw \"Invalid column\"</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4266[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4266) BKConditional</td></tr>
	<tr><td port="e0" align="left">var x = self.m20</td></tr>
	<tr><td port="e1" align="left">var y = self.m21</td></tr>
	<tr><td port="e2" align="left">var z = self.m22</td></tr>
	<tr><td port="e3" align="left">var this</td></tr>
	<tr><td port="e4" align="left">this = new hxmath.math.Vector3Default(x,y,z)</td></tr>
	<tr><td port="e5" align="left">tmp = cast this</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4265[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4265) BKConditional</td></tr>
	<tr><td port="e0" align="left">var x = self.m10</td></tr>
	<tr><td port="e1" align="left">var y = self.m11</td></tr>
	<tr><td port="e2" align="left">var z = self.m12</td></tr>
	<tr><td port="e3" align="left">var this</td></tr>
	<tr><td port="e4" align="left">this = new hxmath.math.Vector3Default(x,y,z)</td></tr>
	<tr><td port="e5" align="left">tmp = cast this</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4264[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4264) BKConditional</td></tr>
	<tr><td port="e0" align="left">var x = self.m00</td></tr>
	<tr><td port="e1" align="left">var y = self.m01</td></tr>
	<tr><td port="e2" align="left">var z = self.m02</td></tr>
	<tr><td port="e3" align="left">var this</td></tr>
	<tr><td port="e4" align="left">this = new hxmath.math.Vector3Default(x,y,z)</td></tr>
	<tr><td port="e5" align="left">tmp = cast this</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4263[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4263) BKNormal</td></tr>
	<tr><td port="ep0" align="left">tmp = \"phi\"(tmp,tmp,tmp)</td></tr>
	<tr><td port="e0" align="left">var a = cast tmp</td></tr>
	<tr><td port="e1" align="left">var self = cast pair.m</td></tr>
	<tr><td port="e2" align="left">var tmp</td></tr>
	<tr><td port="e3" align="left">null</td></tr>
	<tr><td port="e4" align="left">@:cond-branch c</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4262[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4262) BKConditional</td></tr>
	<tr><td port="e0" align="left">throw \"Invalid column\"</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4261[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4261) BKConditional</td></tr>
	<tr><td port="e0" align="left">var x = self.m20</td></tr>
	<tr><td port="e1" align="left">var y = self.m21</td></tr>
	<tr><td port="e2" align="left">var z = self.m22</td></tr>
	<tr><td port="e3" align="left">var this</td></tr>
	<tr><td port="e4" align="left">this = new hxmath.math.Vector3Default(x,y,z)</td></tr>
	<tr><td port="e5" align="left">tmp = cast this</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4260[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4260) BKConditional</td></tr>
	<tr><td port="e0" align="left">var x = self.m10</td></tr>
	<tr><td port="e1" align="left">var y = self.m11</td></tr>
	<tr><td port="e2" align="left">var z = self.m12</td></tr>
	<tr><td port="e3" align="left">var this</td></tr>
	<tr><td port="e4" align="left">this = new hxmath.math.Vector3Default(x,y,z)</td></tr>
	<tr><td port="e5" align="left">tmp = cast this</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4259[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4259) BKConditional</td></tr>
	<tr><td port="e0" align="left">var x = self.m00</td></tr>
	<tr><td port="e1" align="left">var y = self.m01</td></tr>
	<tr><td port="e2" align="left">var z = self.m02</td></tr>
	<tr><td port="e3" align="left">var this</td></tr>
	<tr><td port="e4" align="left">this = new hxmath.math.Vector3Default(x,y,z)</td></tr>
	<tr><td port="e5" align="left">tmp = cast this</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4258[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4258) BKNormal</td></tr>
	<tr><td port="e0" align="left">`2 = `2 + 1</td></tr>
	<tr><td port="e1" align="left">var c = `2 - 1</td></tr>
	<tr><td port="e2" align="left">var pair = createMatrixPair(unitAngle,axis)</td></tr>
	<tr><td port="e3" align="left">var self = cast pair.n</td></tr>
	<tr><td port="e4" align="left">var tmp</td></tr>
	<tr><td port="e5" align="left">null</td></tr>
	<tr><td port="e6" align="left">@:cond-branch c</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4257[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4257) BKConditional</td></tr>
	<tr><td port="e0" align="left">break</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4256[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4256) BKNormal</td></tr>
	<tr><td port="e0" align="left">var tmp = ! ((`2 &lt; 3))</td></tr>
	<tr><td port="e1" align="left">@:cond-branch tmp</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4255[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4255) BKLoopHead</td></tr>
	<tr><td port="ep0" align="left">totalLength = \"phi\"(totalLength,totalLength)</td></tr>
	<tr><td port="ep1" align="left">`2 = \"phi\"(`2,`2)</td></tr>
	<tr><td port="ep2" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep3" align="left">c = \"phi\"(c,c)</td></tr>
	<tr><td port="ep4" align="left">pair = \"phi\"(pair,pair)</td></tr>
	<tr><td port="ep5" align="left">self = \"phi\"(self,self)</td></tr>
	<tr><td port="ep6" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep7" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep8" align="left">a = \"phi\"(a,a)</td></tr>
	<tr><td port="ep9" align="left">self = \"phi\"(self,self)</td></tr>
	<tr><td port="ep10" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep11" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep12" align="left">b = \"phi\"(b,b)</td></tr>
	<tr><td port="ep13" align="left">self = \"phi\"(self,self)</td></tr>
	<tr><td port="ep14" align="left">x = \"phi\"(x,x)</td></tr>
	<tr><td port="ep15" align="left">y = \"phi\"(y,y)</td></tr>
	<tr><td port="ep16" align="left">z = \"phi\"(z,z)</td></tr>
	<tr><td port="ep17" align="left">this = \"phi\"(this,this)</td></tr>
	<tr><td port="ep18" align="left">this = \"phi\"(this,this)</td></tr>
	<tr><td port="ep19" align="left">self = \"phi\"(self,self)</td></tr>
	<tr><td port="ep20" align="left">this = \"phi\"(this,this)</td></tr>
	<tr><td port="ep21" align="left">self = \"phi\"(self,self)</td></tr>
	<tr><td port="ep22" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep23" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep24" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep25" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep26" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep27" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4254[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4254) BKNormal</td></tr>
	<tr><td port="e0" align="left">while ((true)) @:block 4256</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4253[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4253) BKSub</td></tr>
	<tr><td port="e0" align="left">var `2 = 0</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4252[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4252) BKNormal</td></tr>
	<tr><td port="e0" align="left">`1 = `1 + 1</td></tr>
	<tr><td port="e1" align="left">null</td></tr>
	<tr><td port="e2" align="left">unitAngle = unitAngle + 0.01</td></tr>
	<tr><td port="e3" align="left">var totalLength = 0.0</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4251[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4251) BKConditional</td></tr>
	<tr><td port="e0" align="left">break</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4250[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4250) BKNormal</td></tr>
	<tr><td port="e0" align="left">var tmp = ! ((`1 &lt; 10))</td></tr>
	<tr><td port="e1" align="left">@:cond-branch tmp</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4249[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4249) BKLoopHead</td></tr>
	<tr><td port="ep0" align="left">unitAngle = \"phi\"(unitAngle,unitAngle)</td></tr>
	<tr><td port="ep1" align="left">`1 = \"phi\"(`1,`1)</td></tr>
	<tr><td port="ep2" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep3" align="left">i = \"phi\"(i,i)</td></tr>
	<tr><td port="ep4" align="left">totalLength = \"phi\"(totalLength,totalLength)</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4248[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4248) BKNormal</td></tr>
	<tr><td port="e0" align="left">while ((true)) @:block 4250</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4247[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4247) BKSub</td></tr>
	<tr><td port="e0" align="left">var `1 = 0</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4246[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4246) BKNormal</td></tr>
	<tr><td port="e0" align="left">` = ` + 1</td></tr>
	<tr><td port="e1" align="left">var axis = ` - 1</td></tr>
	<tr><td port="e2" align="left">var unitAngle = 0.0</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4245[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4245) BKConditional</td></tr>
	<tr><td port="e0" align="left">break</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4244[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4244) BKNormal</td></tr>
	<tr><td port="e0" align="left">var tmp = ! ((` &lt; 3))</td></tr>
	<tr><td port="e1" align="left">@:cond-branch tmp</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4243[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4243) BKLoopHead</td></tr>
	<tr><td port="ep0" align="left">` = \"phi\"(`,`)</td></tr>
	<tr><td port="ep1" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep2" align="left">axis = \"phi\"(axis,axis)</td></tr>
	<tr><td port="ep3" align="left">unitAngle = \"phi\"(unitAngle,unitAngle)</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4242[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4242) BKNormal</td></tr>
	<tr><td port="e0" align="left">while ((true)) @:block 4244</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4241[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4241) BKSub</td></tr>
	<tr><td port="e0" align="left">var ` = 0</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4240[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4240) BKNormal</td></tr>
	<tr><td port="ep0" align="left">unitAngle = \"phi\"(unitAngle,unitAngle)</td></tr>
	<tr><td port="ep1" align="left">axis = \"phi\"(axis,axis)</td></tr>
	<tr><td port="ep2" align="left">this = \"phi\"(this,this)</td></tr>
	<tr><td port="ep3" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep4" align="left">this = \"phi\"(this,this)</td></tr>
	<tr><td port="ep5" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep6" align="left">this = \"phi\"(this,this)</td></tr>
	<tr><td port="ep7" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep8" align="left">axes = \"phi\"(axes,axes)</td></tr>
	<tr><td port="ep9" align="left">const = \"phi\"(const,const)</td></tr>
	<tr><td port="ep10" align="left">angle = \"phi\"(angle,angle)</td></tr>
	<tr><td port="ep11" align="left">axis = \"phi\"(axis,axis)</td></tr>
	<tr><td port="ep12" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep13" align="left">angleRadians = \"phi\"(angleRadians,angleRadians)</td></tr>
	<tr><td port="ep14" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep15" align="left">cosHalfAngle = \"phi\"(cosHalfAngle,cosHalfAngle)</td></tr>
	<tr><td port="ep16" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep17" align="left">sinHalfAngle = \"phi\"(sinHalfAngle,sinHalfAngle)</td></tr>
	<tr><td port="ep18" align="left">x = \"phi\"(x,x)</td></tr>
	<tr><td port="ep19" align="left">y = \"phi\"(y,y)</td></tr>
	<tr><td port="ep20" align="left">z = \"phi\"(z,z)</td></tr>
	<tr><td port="ep21" align="left">this = \"phi\"(this,this)</td></tr>
	<tr><td port="ep22" align="left">q = \"phi\"(q,q)</td></tr>
	<tr><td port="ep23" align="left">self = \"phi\"(self,self)</td></tr>
	<tr><td port="ep24" align="left">s = \"phi\"(s,s)</td></tr>
	<tr><td port="ep25" align="left">x = \"phi\"(x,x)</td></tr>
	<tr><td port="ep26" align="left">y = \"phi\"(y,y)</td></tr>
	<tr><td port="ep27" align="left">z = \"phi\"(z,z)</td></tr>
	<tr><td port="ep28" align="left">this = \"phi\"(this,this)</td></tr>
	<tr><td port="ep29" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep30" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep31" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep32" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep33" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep34" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep35" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep36" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep37" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep38" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep39" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep40" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep41" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep42" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep43" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep44" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep45" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep46" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep47" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep48" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep49" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep50" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep51" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep52" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep53" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep54" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep55" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep56" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep57" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep58" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep59" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep60" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep61" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep62" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep63" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep64" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep65" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep66" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep67" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep68" align="left">m = \"phi\"(m,m)</td></tr>
	<tr><td port="ep69" align="left">n = \"phi\"(n,n)</td></tr>
	<tr><td port="ep70" align="left">tmp = \"phi\"(tmp,tmp)</td></tr>
	<tr><td port="ep71" align="left">m = \"phi\"(m,m)</td></tr>
	<tr><td port="e0" align="left">var createMatrixPair = \"fun\"(4238)</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4239[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4239) BKFunctionEnd</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4238[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4238) BKFunctionBegin</td></tr>
	<tr><td port="e0" align="left">var this</td></tr>
	<tr><td port="e1" align="left">this = new hxmath.math.Vector3Default(1.0,0.0,0.0)</td></tr>
	<tr><td port="e2" align="left">var tmp = cast this</td></tr>
	<tr><td port="e3" align="left">var this</td></tr>
	<tr><td port="e4" align="left">this = new hxmath.math.Vector3Default(0.0,1.0,0.0)</td></tr>
	<tr><td port="e5" align="left">var tmp = cast this</td></tr>
	<tr><td port="e6" align="left">var this</td></tr>
	<tr><td port="e7" align="left">this = new hxmath.math.Vector3Default(0.0,0.0,1.0)</td></tr>
	<tr><td port="e8" align="left">var tmp = cast this</td></tr>
	<tr><td port="e9" align="left">var axes = [tmp,tmp,tmp]</td></tr>
	<tr><td port="e10" align="left">var const = [hxmath.math._Matrix3x3.Matrix3x3_Impl_.rotationX,hxmath.math._Matrix3x3.Matrix3x3_Impl_.rotationY,hxmath.math._Matrix3x3.Matrix3x3_Impl_.rotationZ]</td></tr>
	<tr><td port="e11" align="left">var angle = unitAngle * 360.0</td></tr>
	<tr><td port="e12" align="left">var axis = axes[axis]</td></tr>
	<tr><td port="e13" align="left">var tmp = Math.PI / 180</td></tr>
	<tr><td port="e14" align="left">var angleRadians = tmp * angle</td></tr>
	<tr><td port="e15" align="left">var tmp = angleRadians / 2.0</td></tr>
	<tr><td port="e16" align="left">var cosHalfAngle = Math.cos(tmp)</td></tr>
	<tr><td port="e17" align="left">var tmp = angleRadians / 2.0</td></tr>
	<tr><td port="e18" align="left">var sinHalfAngle = Math.sin(tmp)</td></tr>
	<tr><td port="e19" align="left">var x = sinHalfAngle * axis.x</td></tr>
	<tr><td port="e20" align="left">var y = sinHalfAngle * axis.y</td></tr>
	<tr><td port="e21" align="left">var z = sinHalfAngle * axis.z</td></tr>
	<tr><td port="e22" align="left">var this</td></tr>
	<tr><td port="e23" align="left">this = new hxmath.math.QuaternionDefault(cosHalfAngle,x,y,z)</td></tr>
	<tr><td port="e24" align="left">var q = cast this</td></tr>
	<tr><td port="e25" align="left">null</td></tr>
	<tr><td port="e26" align="left">var s = q.s</td></tr>
	<tr><td port="e27" align="left">var x = q.x</td></tr>
	<tr><td port="e28" align="left">var y = q.y</td></tr>
	<tr><td port="e29" align="left">var z = q.z</td></tr>
	<tr><td port="e30" align="left">var this</td></tr>
	<tr><td port="e31" align="left">var tmp = y * y</td></tr>
	<tr><td port="e32" align="left">var tmp = z * z</td></tr>
	<tr><td port="e33" align="left">var tmp = tmp + tmp</td></tr>
	<tr><td port="e34" align="left">var tmp = 2 * tmp</td></tr>
	<tr><td port="e35" align="left">var tmp = 1 - tmp</td></tr>
	<tr><td port="e36" align="left">var tmp = x * y</td></tr>
	<tr><td port="e37" align="left">var tmp = s * z</td></tr>
	<tr><td port="e38" align="left">var tmp = tmp - tmp</td></tr>
	<tr><td port="e39" align="left">var tmp = 2 * tmp</td></tr>
	<tr><td port="e40" align="left">var tmp = s * y</td></tr>
	<tr><td port="e41" align="left">var tmp = x * z</td></tr>
	<tr><td port="e42" align="left">var tmp = tmp + tmp</td></tr>
	<tr><td port="e43" align="left">var tmp = 2 * tmp</td></tr>
	<tr><td port="e44" align="left">var tmp = x * y</td></tr>
	<tr><td port="e45" align="left">var tmp = s * z</td></tr>
	<tr><td port="e46" align="left">var tmp = tmp + tmp</td></tr>
	<tr><td port="e47" align="left">var tmp = 2 * tmp</td></tr>
	<tr><td port="e48" align="left">var tmp = x * x</td></tr>
	<tr><td port="e49" align="left">var tmp = z * z</td></tr>
	<tr><td port="e50" align="left">var tmp = tmp + tmp</td></tr>
	<tr><td port="e51" align="left">var tmp = 2 * tmp</td></tr>
	<tr><td port="e52" align="left">var tmp = 1 - tmp</td></tr>
	<tr><td port="e53" align="left">var tmp = y * z</td></tr>
	<tr><td port="e54" align="left">var tmp = s * x</td></tr>
	<tr><td port="e55" align="left">var tmp = tmp - tmp</td></tr>
	<tr><td port="e56" align="left">var tmp = 2 * tmp</td></tr>
	<tr><td port="e57" align="left">var tmp = x * z</td></tr>
	<tr><td port="e58" align="left">var tmp = s * y</td></tr>
	<tr><td port="e59" align="left">var tmp = tmp - tmp</td></tr>
	<tr><td port="e60" align="left">var tmp = 2 * tmp</td></tr>
	<tr><td port="e61" align="left">var tmp = y * z</td></tr>
	<tr><td port="e62" align="left">var tmp = s * x</td></tr>
	<tr><td port="e63" align="left">var tmp = tmp + tmp</td></tr>
	<tr><td port="e64" align="left">var tmp = 2 * tmp</td></tr>
	<tr><td port="e65" align="left">var tmp = x * x</td></tr>
	<tr><td port="e66" align="left">var tmp = y * y</td></tr>
	<tr><td port="e67" align="left">var tmp = tmp + tmp</td></tr>
	<tr><td port="e68" align="left">var tmp = 2 * tmp</td></tr>
	<tr><td port="e69" align="left">var tmp = 1 - tmp</td></tr>
	<tr><td port="e70" align="left">this = new hxmath.math.Matrix3x3Default(tmp,tmp,tmp,tmp,tmp,tmp,tmp,tmp,tmp)</td></tr>
	<tr><td port="e71" align="left">var m = cast this</td></tr>
	<tr><td port="e72" align="left">null</td></tr>
	<tr><td port="e73" align="left">var tmp = const[axis]</td></tr>
	<tr><td port="e74" align="left">var m = tmp(angle)</td></tr>
	<tr><td port="e75" align="left">return {m : m,n : m}</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4237[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4237) BKFunctionEnd</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n4236[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(4236) BKFunctionBegin</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n1[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(1) BKRoot</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n1:out -> n4236:in[label="CFGFunction"];
n4236:out -> n4240:in[label="CFGGoto"];
n4236:out -> n4238:in[label="CFGFunction"];
n4238:out -> n4239:in[label="CFGGoto"];
n4239:out -> n4240:in[label="CFGGoto"];
n4240:out -> n4241:in[label="CFGGoto"];
n4241:out -> n4242:in[label="CFGGoto"];
n4242:out -> n4243:in[label="CFGGoto"];
n4243:out -> n4244:in[label="CFGGoto"];
n4244:out -> n4246:in[label="CFGCondElse"];
n4244:out -> n4245:in[label="CFGCondBranch true"];
n4245:out -> n4273:in[label="CFGGoto"];
n4273:out -> n4274:in[label="CFGGoto"];
n4274:out -> n4237:in[label="CFGGoto"];
n4246:out -> n4247:in[label="CFGGoto"];
n4247:out -> n4248:in[label="CFGGoto"];
n4248:out -> n4249:in[label="CFGGoto"];
n4249:out -> n4250:in[label="CFGGoto"];
n4250:out -> n4252:in[label="CFGCondElse"];
n4250:out -> n4251:in[label="CFGCondBranch true"];
n4251:out -> n4271:in[label="CFGGoto"];
n4271:out -> n4272:in[label="CFGGoto"];
n4272:out -> n4243:in[label="CFGGoto"];
n4252:out -> n4253:in[label="CFGGoto"];
n4253:out -> n4254:in[label="CFGGoto"];
n4254:out -> n4255:in[label="CFGGoto"];
n4255:out -> n4256:in[label="CFGGoto"];
n4256:out -> n4258:in[label="CFGCondElse"];
n4256:out -> n4257:in[label="CFGCondBranch true"];
n4257:out -> n4269:in[label="CFGGoto"];
n4269:out -> n4270:in[label="CFGGoto"];
n4270:out -> n4249:in[label="CFGGoto"];
n4258:out -> n4262:in[label="CFGCondElse"];
n4258:out -> n4261:in[label="CFGCondBranch 2"];
n4258:out -> n4260:in[label="CFGCondBranch 1"];
n4258:out -> n4259:in[label="CFGCondBranch 0"];
n4259:out -> n4263:in[label="CFGGoto"];
n4260:out -> n4263:in[label="CFGGoto"];
n4263:out -> n4267:in[label="CFGCondElse"];
n4263:out -> n4266:in[label="CFGCondBranch 2"];
n4263:out -> n4265:in[label="CFGCondBranch 1"];
n4263:out -> n4264:in[label="CFGCondBranch 0"];
n4264:out -> n4268:in[label="CFGGoto"];
n4265:out -> n4268:in[label="CFGGoto"];
n4268:out -> n4255:in[label="CFGGoto"];
n4266:out -> n4268:in[label="CFGGoto"];
n4267:out -> n4237:in[label="CFGGoto"];
n4261:out -> n4263:in[label="CFGGoto"];
n4262:out -> n4237:in[label="CFGGoto"];
n4240:ep0 -> n4238:e11[color=lightblue,constraint=false];
n4240:ep1 -> n4238:e73[color=lightblue,constraint=false];
n4240:ep1 -> n4238:e12[color=lightblue,constraint=false];
n4249:ep0 -> n4243:ep3[color=lightblue,constraint=false];
n4255:ep0 -> n4249:ep4[color=lightblue,constraint=false];
n4263:ep0 -> n4255:ep6[color=lightblue,constraint=false];
n4268:ep0 -> n4255:ep10[color=lightblue,constraint=false];
n4238:e1 -> n4240:ep2[color=lightblue,constraint=false];
n4238:e2 -> n4240:ep3[color=lightblue,constraint=false];
n4238:e4 -> n4240:ep4[color=lightblue,constraint=false];
n4238:e5 -> n4240:ep5[color=lightblue,constraint=false];
n4238:e7 -> n4240:ep6[color=lightblue,constraint=false];
n4238:e8 -> n4240:ep7[color=lightblue,constraint=false];
n4238:e9 -> n4240:ep8[color=lightblue,constraint=false];
n4238:e10 -> n4240:ep9[color=lightblue,constraint=false];
n4238:e11 -> n4240:ep10[color=lightblue,constraint=false];
n4238:e12 -> n4240:ep11[color=lightblue,constraint=false];
n4238:e13 -> n4240:ep12[color=lightblue,constraint=false];
n4238:e14 -> n4240:ep13[color=lightblue,constraint=false];
n4238:e15 -> n4240:ep14[color=lightblue,constraint=false];
n4238:e16 -> n4240:ep15[color=lightblue,constraint=false];
n4238:e17 -> n4240:ep16[color=lightblue,constraint=false];
n4238:e18 -> n4240:ep17[color=lightblue,constraint=false];
n4238:e19 -> n4240:ep18[color=lightblue,constraint=false];
n4238:e20 -> n4240:ep19[color=lightblue,constraint=false];
n4238:e21 -> n4240:ep20[color=lightblue,constraint=false];
n4238:e23 -> n4240:ep21[color=lightblue,constraint=false];
n4238:e24 -> n4240:ep22[color=lightblue,constraint=false];
n4238:e25 -> n4240:ep23[color=lightblue,constraint=false];
n4238:e26 -> n4240:ep24[color=lightblue,constraint=false];
n4238:e27 -> n4240:ep25[color=lightblue,constraint=false];
n4238:e28 -> n4240:ep26[color=lightblue,constraint=false];
n4238:e29 -> n4240:ep27[color=lightblue,constraint=false];
n4238:e31 -> n4240:ep29[color=lightblue,constraint=false];
n4238:e32 -> n4240:ep30[color=lightblue,constraint=false];
n4238:e33 -> n4240:ep31[color=lightblue,constraint=false];
n4238:e34 -> n4240:ep32[color=lightblue,constraint=false];
n4238:e35 -> n4240:ep33[color=lightblue,constraint=false];
n4238:e36 -> n4240:ep34[color=lightblue,constraint=false];
n4238:e37 -> n4240:ep35[color=lightblue,constraint=false];
n4238:e38 -> n4240:ep36[color=lightblue,constraint=false];
n4238:e39 -> n4240:ep37[color=lightblue,constraint=false];
n4238:e40 -> n4240:ep38[color=lightblue,constraint=false];
n4238:e41 -> n4240:ep39[color=lightblue,constraint=false];
n4238:e42 -> n4240:ep40[color=lightblue,constraint=false];
n4238:e43 -> n4240:ep41[color=lightblue,constraint=false];
n4238:e44 -> n4240:ep42[color=lightblue,constraint=false];
n4238:e45 -> n4240:ep43[color=lightblue,constraint=false];
n4238:e46 -> n4240:ep44[color=lightblue,constraint=false];
n4238:e47 -> n4240:ep45[color=lightblue,constraint=false];
n4238:e48 -> n4240:ep46[color=lightblue,constraint=false];
n4238:e49 -> n4240:ep47[color=lightblue,constraint=false];
n4238:e50 -> n4240:ep48[color=lightblue,constraint=false];
n4238:e51 -> n4240:ep49[color=lightblue,constraint=false];
n4238:e52 -> n4240:ep50[color=lightblue,constraint=false];
n4238:e53 -> n4240:ep51[color=lightblue,constraint=false];
n4238:e54 -> n4240:ep52[color=lightblue,constraint=false];
n4238:e55 -> n4240:ep53[color=lightblue,constraint=false];
n4238:e56 -> n4240:ep54[color=lightblue,constraint=false];
n4238:e57 -> n4240:ep55[color=lightblue,constraint=false];
n4238:e58 -> n4240:ep56[color=lightblue,constraint=false];
n4238:e59 -> n4240:ep57[color=lightblue,constraint=false];
n4238:e60 -> n4240:ep58[color=lightblue,constraint=false];
n4238:e61 -> n4240:ep59[color=lightblue,constraint=false];
n4238:e62 -> n4240:ep60[color=lightblue,constraint=false];
n4238:e63 -> n4240:ep61[color=lightblue,constraint=false];
n4238:e64 -> n4240:ep62[color=lightblue,constraint=false];
n4238:e65 -> n4240:ep63[color=lightblue,constraint=false];
n4238:e66 -> n4240:ep64[color=lightblue,constraint=false];
n4238:e67 -> n4240:ep65[color=lightblue,constraint=false];
n4238:e68 -> n4240:ep66[color=lightblue,constraint=false];
n4238:e69 -> n4240:ep67[color=lightblue,constraint=false];
n4238:e70 -> n4240:ep28[color=lightblue,constraint=false];
n4238:e71 -> n4240:ep68[color=lightblue,constraint=false];
n4238:e72 -> n4240:ep69[color=lightblue,constraint=false];
n4238:e73 -> n4240:ep70[color=lightblue,constraint=false];
n4238:e74 -> n4240:ep71[color=lightblue,constraint=false];
n4240:e0 -> n4258:e2[color=lightblue,constraint=false];
n4241:e0 -> n4243:ep0[color=lightblue,constraint=false];
n4243:ep0 -> n4246:e0[color=lightblue,constraint=false];
n4243:ep0 -> n4244:e0[color=lightblue,constraint=false];
n4244:e0 -> n4243:ep1[color=lightblue,constraint=false];
n4246:e0 -> n4243:ep0[color=lightblue,constraint=false];
n4246:e1 -> n4258:e2[color=lightblue,constraint=false];
n4246:e1 -> n4243:ep2[color=lightblue,constraint=false];
n4246:e2 -> n4249:ep0[color=lightblue,constraint=false];
n4247:e0 -> n4249:ep1[color=lightblue,constraint=false];
n4249:ep0 -> n4252:e2[color=lightblue,constraint=false];
n4249:ep0 -> n4243:ep3[color=lightblue,constraint=false];
n4249:ep1 -> n4252:e0[color=lightblue,constraint=false];
n4249:ep1 -> n4250:e0[color=lightblue,constraint=false];
n4250:e0 -> n4249:ep2[color=lightblue,constraint=false];
n4252:e0 -> n4249:ep1[color=lightblue,constraint=false];
n4252:e1 -> n4249:ep3[color=lightblue,constraint=false];
n4252:e2 -> n4258:e2[color=lightblue,constraint=false];
n4252:e2 -> n4249:ep0[color=lightblue,constraint=false];
n4252:e3 -> n4255:ep0[color=lightblue,constraint=false];
n4253:e0 -> n4255:ep1[color=lightblue,constraint=false];
n4255:ep0 -> n4268:e20[color=lightblue,constraint=false];
n4255:ep0 -> n4249:ep4[color=lightblue,constraint=false];
n4255:ep0 -> n4270:e0[color=lightblue,constraint=false];
n4255:ep1 -> n4258:e0[color=lightblue,constraint=false];
n4255:ep1 -> n4256:e0[color=lightblue,constraint=false];
n4256:e0 -> n4255:ep2[color=lightblue,constraint=false];
n4258:e0 -> n4255:ep1[color=lightblue,constraint=false];
n4258:e1 -> n4255:ep3[color=lightblue,constraint=false];
n4258:e1 -> n4263:e3[color=lightblue,constraint=false];
n4258:e2 -> n4255:ep4[color=lightblue,constraint=false];
n4258:e2 -> n4263:e1[color=lightblue,constraint=false];
n4258:e3 -> n4261:e2[color=lightblue,constraint=false];
n4258:e3 -> n4261:e1[color=lightblue,constraint=false];
n4258:e3 -> n4261:e0[color=lightblue,constraint=false];
n4258:e3 -> n4255:ep5[color=lightblue,constraint=false];
n4258:e3 -> n4260:e2[color=lightblue,constraint=false];
n4258:e3 -> n4260:e1[color=lightblue,constraint=false];
n4258:e3 -> n4260:e0[color=lightblue,constraint=false];
n4258:e3 -> n4259:e2[color=lightblue,constraint=false];
n4258:e3 -> n4259:e1[color=lightblue,constraint=false];
n4258:e3 -> n4259:e0[color=lightblue,constraint=false];
n4258:e5 -> n4255:ep7[color=lightblue,constraint=false];
n4259:e5 -> n4263:ep0[color=lightblue,constraint=false];
n4260:e5 -> n4263:ep0[color=lightblue,constraint=false];
n4263:ep0 -> n4255:ep6[color=lightblue,constraint=false];
n4263:e0 -> n4255:ep8[color=lightblue,constraint=false];
n4263:e0 -> n4268:e1[color=lightblue,constraint=false];
n4263:e1 -> n4266:e2[color=lightblue,constraint=false];
n4263:e1 -> n4266:e1[color=lightblue,constraint=false];
n4263:e1 -> n4266:e0[color=lightblue,constraint=false];
n4263:e1 -> n4255:ep9[color=lightblue,constraint=false];
n4263:e1 -> n4265:e2[color=lightblue,constraint=false];
n4263:e1 -> n4265:e1[color=lightblue,constraint=false];
n4263:e1 -> n4265:e0[color=lightblue,constraint=false];
n4263:e1 -> n4264:e2[color=lightblue,constraint=false];
n4263:e1 -> n4264:e1[color=lightblue,constraint=false];
n4263:e1 -> n4264:e0[color=lightblue,constraint=false];
n4263:e3 -> n4255:ep11[color=lightblue,constraint=false];
n4264:e5 -> n4268:ep0[color=lightblue,constraint=false];
n4265:e5 -> n4268:ep0[color=lightblue,constraint=false];
n4268:ep0 -> n4255:ep10[color=lightblue,constraint=false];
n4268:e0 -> n4255:ep12[color=lightblue,constraint=false];
n4268:e1 -> n4255:ep13[color=lightblue,constraint=false];
n4268:e2 -> n4255:ep14[color=lightblue,constraint=false];
n4268:e3 -> n4255:ep15[color=lightblue,constraint=false];
n4268:e4 -> n4255:ep16[color=lightblue,constraint=false];
n4268:e6 -> n4255:ep17[color=lightblue,constraint=false];
n4268:e7 -> n4255:ep18[color=lightblue,constraint=false];
n4268:e8 -> n4255:ep19[color=lightblue,constraint=false];
n4268:e12 -> n4255:ep20[color=lightblue,constraint=false];
n4268:e13 -> n4255:ep21[color=lightblue,constraint=false];
n4268:e14 -> n4255:ep22[color=lightblue,constraint=false];
n4268:e15 -> n4255:ep23[color=lightblue,constraint=false];
n4268:e16 -> n4255:ep24[color=lightblue,constraint=false];
n4268:e17 -> n4255:ep25[color=lightblue,constraint=false];
n4268:e18 -> n4255:ep26[color=lightblue,constraint=false];
n4268:e19 -> n4255:ep27[color=lightblue,constraint=false];
n4268:e20 -> n4255:ep0[color=lightblue,constraint=false];
n4266:e5 -> n4268:ep0[color=lightblue,constraint=false];
n4261:e5 -> n4263:ep0[color=lightblue,constraint=false];
}
