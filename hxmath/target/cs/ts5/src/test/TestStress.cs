// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace test {
	public class TestStress : global::test.MathTestCase {
		
		public TestStress(global::haxe.lang.EmptyObject empty) : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
		}
		
		
		public TestStress(object posInfos) : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
			global::test.TestStress.__hx_ctor_test_TestStress(this, posInfos);
		}
		
		
		public static void __hx_ctor_test_TestStress(global::test.TestStress __temp_me61, object posInfos) {
			unchecked {
				__temp_me61.a = 5;
				global::test.MathTestCase.__hx_ctor_test_MathTestCase(__temp_me61, posInfos);
			}
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::test.TestStress(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::test.TestStress(((object) (arr[0]) ));
		}
		
		
		public int a;
		
		public virtual void testDotProduct() {
			unchecked {
				global::haxe.Log.trace.__hx_invoke2_o(default(double), "--Vector2 dot product--", default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDotProduct", "test.TestStress", "TestStress.hx"}, new int[]{1981972957}, new double[]{((double) (12) )}));
				int time1Start = this.a;
				double sum1 = 0.0;
				{
					int _g1 = 0;
					while (( _g1 < 100000 )) {
						int i = _g1++;
						global::hxmath.math.Vector2Default a = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( i * 1.2 ), ( i * 4.3 ))) );
						global::hxmath.math.Vector2Default b = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( i * 1.1 ), ( i * 0.8 ))) );
						sum1 += ( ( a.x * b.x ) + ( a.y * b.y ) );
					}
					
				}
				
				int time1End = this.a;
				int time2Start = this.a;
				double sum2 = 0.0;
				{
					int _g11 = 0;
					while (( _g11 < 100000 )) {
						int i1 = _g11++;
						global::hxmath.math.Vector2Default a1 = new global::hxmath.math.Vector2Default(( i1 * 1.2 ), ( i1 * 4.3 ));
						global::hxmath.math.Vector2Default b1 = new global::hxmath.math.Vector2Default(( i1 * 1.1 ), ( i1 * 0.8 ));
						sum2 += ( ( a1.x * b1.x ) + ( a1.y * b1.y ) );
					}
					
				}
				
				int time2End = this.a;
				this.assertEquals<double>(((double) (sum1) ), ((double) (sum2) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDotProduct", "test.TestStress", "TestStress.hx"}, new int[]{1981972957}, new double[]{((double) (43) )})) ));
				int time1 = ( time1End - time1Start );
				int time2 = ( time2End - time2Start );
				global::haxe.Log.trace.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.concat("abstracts = ", global::haxe.lang.Runtime.toString(time1)), default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDotProduct", "test.TestStress", "TestStress.hx"}, new int[]{1981972957}, new double[]{((double) (48) )}));
				global::haxe.Log.trace.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.concat("direct = ", global::haxe.lang.Runtime.toString(time2)), default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDotProduct", "test.TestStress", "TestStress.hx"}, new int[]{1981972957}, new double[]{((double) (49) )}));
				global::haxe.Log.trace.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.concat("abstracts / direct = ", global::haxe.lang.Runtime.toString(( ((double) (time1) ) / time2 ))), default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDotProduct", "test.TestStress", "TestStress.hx"}, new int[]{1981972957}, new double[]{((double) (50) )}));
			}
		}
		
		
		public virtual void testMatrixProduct() {
			unchecked {
				global::haxe.Log.trace.__hx_invoke2_o(default(double), "--Matrix3x3 matrix product--", default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMatrixProduct", "test.TestStress", "TestStress.hx"}, new int[]{1981972957}, new double[]{((double) (55) )}));
				int time1Start = this.a;
				double sum1 = 0.0;
				{
					int _g1 = 0;
					while (( _g1 < 100000 )) {
						int i = _g1++;
						global::hxmath.math.Matrix3x3Default a = new global::hxmath.math.Matrix3x3Default(( i * 1.2 ), ( i * 4.3 ), ( i * 1.2 ), ( i * 4.3 ), ( i * 1.2 ), ( i * 4.3 ), ( i * 1.2 ), ( i * 4.3 ), ( i * 1.2 ));
						global::hxmath.math.Matrix3x3Default b = new global::hxmath.math.Matrix3x3Default(( i * 1.1 ), ( i * 0.8 ), ( i * 1.1 ), ( i * 0.8 ), ( i * 1.1 ), ( i * 0.8 ), ( i * 1.1 ), ( i * 0.8 ), ( i * 1.1 ));
						global::hxmath.math.Matrix3x3Default c = ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(( ( ( a.m00 * b.m00 ) + ( a.m10 * b.m01 ) ) + ( a.m20 * b.m02 ) ), ( ( ( a.m00 * b.m10 ) + ( a.m10 * b.m11 ) ) + ( a.m20 * b.m12 ) ), ( ( ( a.m00 * b.m20 ) + ( a.m10 * b.m21 ) ) + ( a.m20 * b.m22 ) ), ( ( ( a.m01 * b.m00 ) + ( a.m11 * b.m01 ) ) + ( a.m21 * b.m02 ) ), ( ( ( a.m01 * b.m10 ) + ( a.m11 * b.m11 ) ) + ( a.m21 * b.m12 ) ), ( ( ( a.m01 * b.m20 ) + ( a.m11 * b.m21 ) ) + ( a.m21 * b.m22 ) ), ( ( ( a.m02 * b.m00 ) + ( a.m12 * b.m01 ) ) + ( a.m22 * b.m02 ) ), ( ( ( a.m02 * b.m10 ) + ( a.m12 * b.m11 ) ) + ( a.m22 * b.m12 ) ), ( ( ( a.m02 * b.m20 ) + ( a.m12 * b.m21 ) ) + ( a.m22 * b.m22 ) ))) );
						sum1 += ( ( ( ( ( ( ( ( c.m00 + c.m10 ) + c.m20 ) + c.m01 ) + c.m11 ) + c.m21 ) + c.m02 ) + c.m12 ) + c.m22 );
					}
					
				}
				
				int time1End = this.a;
				int time2Start = this.a;
				double sum2 = 0.0;
				{
					int _g11 = 0;
					while (( _g11 < 100000 )) {
						int i1 = _g11++;
						global::hxmath.math.Matrix3x3Default a1 = new global::hxmath.math.Matrix3x3Default(( i1 * 1.2 ), ( i1 * 4.3 ), ( i1 * 1.2 ), ( i1 * 4.3 ), ( i1 * 1.2 ), ( i1 * 4.3 ), ( i1 * 1.2 ), ( i1 * 4.3 ), ( i1 * 1.2 ));
						global::hxmath.math.Matrix3x3Default b1 = new global::hxmath.math.Matrix3x3Default(( i1 * 1.1 ), ( i1 * 0.8 ), ( i1 * 1.1 ), ( i1 * 0.8 ), ( i1 * 1.1 ), ( i1 * 0.8 ), ( i1 * 1.1 ), ( i1 * 0.8 ), ( i1 * 1.1 ));
						global::hxmath.math.Matrix3x3Default c1 = new global::hxmath.math.Matrix3x3Default(( ( ( a1.m00 * b1.m00 ) + ( a1.m10 * b1.m01 ) ) + ( a1.m20 * b1.m02 ) ), ( ( ( a1.m00 * b1.m10 ) + ( a1.m10 * b1.m11 ) ) + ( a1.m20 * b1.m12 ) ), ( ( ( a1.m00 * b1.m20 ) + ( a1.m10 * b1.m21 ) ) + ( a1.m20 * b1.m22 ) ), ( ( ( a1.m01 * b1.m00 ) + ( a1.m11 * b1.m01 ) ) + ( a1.m21 * b1.m02 ) ), ( ( ( a1.m01 * b1.m10 ) + ( a1.m11 * b1.m11 ) ) + ( a1.m21 * b1.m12 ) ), ( ( ( a1.m01 * b1.m20 ) + ( a1.m11 * b1.m21 ) ) + ( a1.m21 * b1.m22 ) ), ( ( ( a1.m02 * b1.m00 ) + ( a1.m12 * b1.m01 ) ) + ( a1.m22 * b1.m02 ) ), ( ( ( a1.m02 * b1.m10 ) + ( a1.m12 * b1.m11 ) ) + ( a1.m22 * b1.m12 ) ), ( ( ( a1.m02 * b1.m20 ) + ( a1.m12 * b1.m21 ) ) + ( a1.m22 * b1.m22 ) ));
						sum2 += ( ( ( ( ( ( ( ( c1.m00 + c1.m10 ) + c1.m20 ) + c1.m01 ) + c1.m11 ) + c1.m21 ) + c1.m02 ) + c1.m12 ) + c1.m22 );
					}
					
				}
				
				int time2End = this.a;
				this.assertEquals<double>(((double) (sum1) ), ((double) (sum2) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMatrixProduct", "test.TestStress", "TestStress.hx"}, new int[]{1981972957}, new double[]{((double) (116) )})) ));
				int time1 = ( time1End - time1Start );
				int time2 = ( time2End - time2Start );
				global::haxe.Log.trace.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.concat("abstracts = ", global::haxe.lang.Runtime.toString(time1)), default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMatrixProduct", "test.TestStress", "TestStress.hx"}, new int[]{1981972957}, new double[]{((double) (121) )}));
				global::haxe.Log.trace.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.concat("direct = ", global::haxe.lang.Runtime.toString(time2)), default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMatrixProduct", "test.TestStress", "TestStress.hx"}, new int[]{1981972957}, new double[]{((double) (122) )}));
				global::haxe.Log.trace.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.concat("abstracts / direct = ", global::haxe.lang.Runtime.toString(( ((double) (time1) ) / time2 ))), default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMatrixProduct", "test.TestStress", "TestStress.hx"}, new int[]{1981972957}, new double[]{((double) (123) )}));
			}
		}
		
		
		public virtual void testMatrix3x2Constructor() {
			unchecked {
				global::haxe.Log.trace.__hx_invoke2_o(default(double), "--Matrix3x2 constructor--", default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMatrix3x2Constructor", "test.TestStress", "TestStress.hx"}, new int[]{1981972957}, new double[]{((double) (128) )}));
				int abstractTimeStart = this.a;
				double sum1 = 0.0;
				{
					int _g1 = 0;
					while (( _g1 < 100000 )) {
						int i = _g1++;
						global::hxmath.math.Matrix3x2Default m = ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(( i * 1.2 ), ( i * 4.3 ), ( i * 1.2 ), ( i * 4.3 ), ( i * 1.2 ), ( i * 4.3 ))) );
						sum1 += ( ( ( ( ( m.a + m.b ) + m.c ) + m.d ) + m.tx ) + m.ty );
					}
					
				}
				
				int abstractTimeEnd = this.a;
				int classTimeStart = this.a;
				double sum2 = 0.0;
				{
					int _g11 = 0;
					while (( _g11 < 100000 )) {
						int i1 = _g11++;
						global::hxmath.math.Matrix3x2Default m1 = new global::hxmath.math.Matrix3x2Default(( i1 * 1.2 ), ( i1 * 4.3 ), ( i1 * 1.2 ), ( i1 * 4.3 ), ( i1 * 1.2 ), ( i1 * 4.3 ));
						sum2 += ( ( ( ( ( m1.a + m1.b ) + m1.c ) + m1.d ) + m1.tx ) + m1.ty );
					}
					
				}
				
				int classTimeEnd = this.a;
				this.assertEquals<double>(((double) (sum1) ), ((double) (sum2) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMatrix3x2Constructor", "test.TestStress", "TestStress.hx"}, new int[]{1981972957}, new double[]{((double) (160) )})) ));
				int abstractTime = ( abstractTimeEnd - abstractTimeStart );
				int classTime = ( classTimeEnd - classTimeStart );
				global::haxe.Log.trace.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.concat("abstracts = ", global::haxe.lang.Runtime.toString(abstractTime)), default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMatrix3x2Constructor", "test.TestStress", "TestStress.hx"}, new int[]{1981972957}, new double[]{((double) (165) )}));
				global::haxe.Log.trace.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.concat("direct = ", global::haxe.lang.Runtime.toString(classTime)), default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMatrix3x2Constructor", "test.TestStress", "TestStress.hx"}, new int[]{1981972957}, new double[]{((double) (166) )}));
				global::haxe.Log.trace.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.concat("abstracts / direct = ", global::haxe.lang.Runtime.toString(( ((double) (abstractTime) ) / classTime ))), default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMatrix3x2Constructor", "test.TestStress", "TestStress.hx"}, new int[]{1981972957}, new double[]{((double) (167) )}));
			}
		}
		
		
		public virtual void testMatrix4x4Constructor() {
			unchecked {
				global::haxe.Log.trace.__hx_invoke2_o(default(double), "--Matrix4x4 constructor--", default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMatrix4x4Constructor", "test.TestStress", "TestStress.hx"}, new int[]{1981972957}, new double[]{((double) (172) )}));
				int abstractTimeStart = this.a;
				double sum1 = 0.0;
				{
					int _g1 = 0;
					while (( _g1 < 100000 )) {
						int i = _g1++;
						global::hxmath.math.Matrix4x4Default a = ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(( i * 1.2 ), ( i * 4.3 ), ( i * 1.2 ), ( i * 4.3 ), ( i * 1.2 ), ( i * 4.3 ), ( i * 1.2 ), ( i * 4.3 ), ( i * 1.2 ), ( i * 4.3 ), ( i * 1.2 ), ( i * 4.3 ), ( i * 1.2 ), ( i * 4.3 ), ( i * 1.2 ), ( i * 4.3 ))) );
						sum1 += ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( a.m00 + a.m10 ) + a.m20 ) + a.m30 ) + a.m01 ) + a.m11 ) + a.m21 ) + a.m31 ) + a.m02 ) + a.m12 ) + a.m22 ) + a.m32 ) + a.m03 ) + a.m13 ) + a.m23 ) + a.m33 );
					}
					
				}
				
				int abstractTimeEnd = this.a;
				int classTimeStart = this.a;
				double sum2 = 0.0;
				{
					int _g11 = 0;
					while (( _g11 < 100000 )) {
						int i1 = _g11++;
						global::hxmath.math.Matrix4x4Default a1 = new global::hxmath.math.Matrix4x4Default(( i1 * 1.2 ), ( i1 * 4.3 ), ( i1 * 1.2 ), ( i1 * 4.3 ), ( i1 * 1.2 ), ( i1 * 4.3 ), ( i1 * 1.2 ), ( i1 * 4.3 ), ( i1 * 1.2 ), ( i1 * 4.3 ), ( i1 * 1.2 ), ( i1 * 4.3 ), ( i1 * 1.2 ), ( i1 * 4.3 ), ( i1 * 1.2 ), ( i1 * 4.3 ));
						sum2 += ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( a1.m00 + a1.m10 ) + a1.m20 ) + a1.m30 ) + a1.m01 ) + a1.m11 ) + a1.m21 ) + a1.m31 ) + a1.m02 ) + a1.m12 ) + a1.m22 ) + a1.m32 ) + a1.m03 ) + a1.m13 ) + a1.m23 ) + a1.m33 );
					}
					
				}
				
				int classTimeEnd = this.a;
				this.assertEquals<double>(((double) (sum1) ), ((double) (sum2) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMatrix4x4Constructor", "test.TestStress", "TestStress.hx"}, new int[]{1981972957}, new double[]{((double) (216) )})) ));
				int abstractTime = ( abstractTimeEnd - abstractTimeStart );
				int classTime = ( classTimeEnd - classTimeStart );
				global::haxe.Log.trace.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.concat("abstracts = ", global::haxe.lang.Runtime.toString(abstractTime)), default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMatrix4x4Constructor", "test.TestStress", "TestStress.hx"}, new int[]{1981972957}, new double[]{((double) (221) )}));
				global::haxe.Log.trace.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.concat("direct = ", global::haxe.lang.Runtime.toString(classTime)), default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMatrix4x4Constructor", "test.TestStress", "TestStress.hx"}, new int[]{1981972957}, new double[]{((double) (222) )}));
				global::haxe.Log.trace.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.concat("abstracts / direct = ", global::haxe.lang.Runtime.toString(( ((double) (abstractTime) ) / classTime ))), default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMatrix4x4Constructor", "test.TestStress", "TestStress.hx"}, new int[]{1981972957}, new double[]{((double) (223) )}));
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 97:
					{
						this.a = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 97:
					{
						this.a = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1233656925:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testMatrix4x4Constructor", 1233656925)) );
					}
					
					
					case 56356288:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testMatrix3x2Constructor", 56356288)) );
					}
					
					
					case 241751868:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testMatrixProduct", 241751868)) );
					}
					
					
					case 1575177880:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testDotProduct", 1575177880)) );
					}
					
					
					case 97:
					{
						return this.a;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 97:
					{
						return ((double) (this.a) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1233656925:
					{
						this.testMatrix4x4Constructor();
						break;
					}
					
					
					case 56356288:
					{
						this.testMatrix3x2Constructor();
						break;
					}
					
					
					case 241751868:
					{
						this.testMatrixProduct();
						break;
					}
					
					
					case 1575177880:
					{
						this.testDotProduct();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("a");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}


