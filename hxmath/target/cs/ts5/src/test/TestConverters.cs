// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace test {
	public class FlxPointMock : global::haxe.lang.HxObject {
		
		public FlxPointMock(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public FlxPointMock(global::haxe.lang.Null<double> X, global::haxe.lang.Null<double> Y) {
			global::test.FlxPointMock.__hx_ctor_test_FlxPointMock(this, X, Y);
		}
		
		
		public static void __hx_ctor_test_FlxPointMock(global::test.FlxPointMock __temp_me59, global::haxe.lang.Null<double> X, global::haxe.lang.Null<double> Y) {
			__temp_me59.y = 0.0;
			__temp_me59.x = 0.0;
			double __temp_Y58 = ( ( ! (Y.hasValue) ) ? (0.0) : ((Y).@value) );
			double __temp_X57 = ( ( ! (X.hasValue) ) ? (0.0) : ((X).@value) );
			__temp_me59.set_x(__temp_X57);
			__temp_me59.set_y(__temp_Y58);
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::test.FlxPointMock(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			unchecked {
				return new global::test.FlxPointMock(global::haxe.lang.Null<object>.ofDynamic<double>(arr[0]), global::haxe.lang.Null<object>.ofDynamic<double>(arr[1]));
			}
		}
		
		
		public double x;
		
		public double y;
		
		public virtual double set_x(double @value) {
			return this.x = @value;
		}
		
		
		public virtual double set_y(double @value) {
			return this.y = @value;
		}
		
		
		public virtual string toString() {
			return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(this.x)), ", "), global::haxe.lang.Runtime.toString(this.y));
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 121:
					{
						if (handleProperties) {
							this.set_y(@value);
							return @value;
						}
						else {
							this.y = ((double) (@value) );
							return @value;
						}
						
					}
					
					
					case 120:
					{
						if (handleProperties) {
							this.set_x(@value);
							return @value;
						}
						else {
							this.x = ((double) (@value) );
							return @value;
						}
						
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 121:
					{
						if (handleProperties) {
							this.set_y(((double) (global::haxe.lang.Runtime.toDouble(@value)) ));
							return @value;
						}
						else {
							this.y = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
							return @value;
						}
						
					}
					
					
					case 120:
					{
						if (handleProperties) {
							this.set_x(((double) (global::haxe.lang.Runtime.toDouble(@value)) ));
							return @value;
						}
						else {
							this.x = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
							return @value;
						}
						
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
					}
					
					
					case 2049940316:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_y", 2049940316)) );
					}
					
					
					case 2049940315:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_x", 2049940315)) );
					}
					
					
					case 121:
					{
						return this.y;
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 121:
					{
						return this.y;
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return this.toString();
					}
					
					
					case 2049940316:
					{
						return this.set_y(((double) (global::haxe.lang.Runtime.toDouble(dynargs[0])) ));
					}
					
					
					case 2049940315:
					{
						return this.set_x(((double) (global::haxe.lang.Runtime.toDouble(dynargs[0])) ));
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("y");
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
		public override string ToString(){
			return this.toString();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace test {
	public class TestConverters : global::test.MathTestCase {
		
		public TestConverters(global::haxe.lang.EmptyObject empty) : base(global::haxe.lang.EmptyObject.EMPTY) {
		}
		
		
		public TestConverters() : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
			global::test.TestConverters.__hx_ctor_test_TestConverters(this);
		}
		
		
		public static void __hx_ctor_test_TestConverters(global::test.TestConverters __temp_me60) {
			unchecked {
				global::test.MathTestCase.__hx_ctor_test_MathTestCase(__temp_me60, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"new", "test.TestConverters", "TestConverters.hx"}, new int[]{1981972957}, new double[]{((double) (44) )}));
			}
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::test.TestConverters(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::test.TestConverters();
		}
		
		
		public virtual void testShapeSimilarConversion() {
			unchecked {
				global::hxmath.math.Vector2Default v2a = this.randomVector2(default(global::haxe.lang.Null<double>));
				double v2b_y = default(double);
				double v2b_x = 0.0;
				v2b_y = 0.0;
				global::hxmath.math.Vector2Default v2c = this.randomVector2(default(global::haxe.lang.Null<double>));
				{
					v2b_x = v2a.x;
					v2b_y = v2a.y;
				}
				
				{
					v2c.x = v2b_x;
					v2c.y = v2b_y;
				}
				
				this.assertTrue(( ( ( v2a == null ) && ( v2c == null ) ) || ( ( ( ( v2a != null ) && ( v2c != null ) ) && ( v2a.x == v2c.x ) ) && ( v2a.y == v2c.y ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testShapeSimilarConversion", "test.TestConverters", "TestConverters.hx"}, new int[]{1981972957}, new double[]{((double) (54) )}));
				global::hxmath.math.Vector3Default v3a = this.randomVector3(default(global::haxe.lang.Null<double>));
				double v3b_z = default(double);
				double v3b_y = default(double);
				double v3b_x = 0.0;
				v3b_y = 0.0;
				v3b_z = 0.0;
				global::hxmath.math.Vector3Default v3c = this.randomVector3(default(global::haxe.lang.Null<double>));
				{
					v3b_x = v3a.x;
					v3b_y = v3a.y;
					v3b_z = v3a.z;
				}
				
				{
					v3c.x = v3b_x;
					v3c.y = v3b_y;
					v3c.z = v3b_z;
				}
				
				this.assertTrue(( ( ( v3a == null ) && ( v3c == null ) ) || ( ( ( ( ( v3a != null ) && ( v3c != null ) ) && ( v3a.x == v3c.x ) ) && ( v3a.y == v3c.y ) ) && ( v3a.z == v3c.z ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testShapeSimilarConversion", "test.TestConverters", "TestConverters.hx"}, new int[]{1981972957}, new double[]{((double) (61) )}));
				global::hxmath.math.Vector4Default v4a = this.randomVector4(default(global::haxe.lang.Null<double>));
				double v4b_z = default(double);
				double v4b_y = default(double);
				double v4b_x = default(double);
				double v4b_w = default(double);
				v4b_x = 0.0;
				v4b_y = 0.0;
				v4b_z = 0.0;
				v4b_w = 0.0;
				global::hxmath.math.Vector4Default v4c = this.randomVector4(default(global::haxe.lang.Null<double>));
				{
					v4b_x = v4a.x;
					v4b_y = v4a.y;
					v4b_z = v4a.z;
					v4b_w = v4a.w;
				}
				
				{
					v4c.x = v4b_x;
					v4c.y = v4b_y;
					v4c.z = v4b_z;
					v4c.w = v4b_w;
				}
				
				this.assertTrue(( ( ( v4a == null ) && ( v4c == null ) ) || ( ( ( ( ( ( v4a != null ) && ( v4c != null ) ) && ( v4a.x == v4c.x ) ) && ( v4a.y == v4c.y ) ) && ( v4a.z == v4c.z ) ) && ( v4a.w == v4c.w ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testShapeSimilarConversion", "test.TestConverters", "TestConverters.hx"}, new int[]{1981972957}, new double[]{((double) (68) )}));
				global::hxmath.math.Matrix2x2Default m22a = this.randomMatrix2x2(default(global::haxe.lang.Null<double>));
				double m22b_d = default(double);
				double m22b_c = default(double);
				double m22b_b = default(double);
				double m22b_a = 0.0;
				m22b_b = 0.0;
				m22b_c = 0.0;
				m22b_d = 0.0;
				global::hxmath.math.Matrix2x2Default m22c = this.randomMatrix2x2(default(global::haxe.lang.Null<double>));
				{
					m22b_a = m22a.a;
					m22b_b = m22a.b;
					m22b_c = m22a.c;
					m22b_d = m22a.d;
				}
				
				{
					m22c.a = m22b_a;
					m22c.b = m22b_b;
					m22c.c = m22b_c;
					m22c.d = m22b_d;
				}
				
				this.assertTrue(( ( ( m22a == null ) && ( m22c == null ) ) || ( ( ( ( ( ( m22a != null ) && ( m22c != null ) ) && ( m22a.a == m22c.a ) ) && ( m22a.b == m22c.b ) ) && ( m22a.c == m22c.c ) ) && ( m22a.d == m22c.d ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testShapeSimilarConversion", "test.TestConverters", "TestConverters.hx"}, new int[]{1981972957}, new double[]{((double) (78) )}));
				global::hxmath.math.Matrix3x2Default m32a = this.randomMatrix3x2(default(global::haxe.lang.Null<double>));
				double m32b_ty = default(double);
				double m32b_tx = default(double);
				double m32b_d = default(double);
				double m32b_c = default(double);
				double m32b_b = default(double);
				double m32b_a = 0.0;
				m32b_b = 0.0;
				m32b_c = 0.0;
				m32b_d = 0.0;
				m32b_tx = 0.0;
				m32b_ty = 0.0;
				global::hxmath.math.Matrix3x2Default m32c = this.randomMatrix3x2(default(global::haxe.lang.Null<double>));
				{
					m32b_a = m32a.a;
					m32b_b = m32a.b;
					m32b_c = m32a.c;
					m32b_d = m32a.d;
					m32b_tx = m32a.tx;
					m32b_ty = m32a.ty;
				}
				
				{
					m32c.a = m32b_a;
					m32c.b = m32b_b;
					m32c.c = m32b_c;
					m32c.d = m32b_d;
					m32c.tx = m32b_tx;
					m32c.ty = m32b_ty;
				}
				
				this.assertTrue(( ( ( m32a == null ) && ( m32c == null ) ) || ( ( ( ( ( ( ( ( m32a != null ) && ( m32c != null ) ) && ( m32a.a == m32c.a ) ) && ( m32a.b == m32c.b ) ) && ( m32a.c == m32c.c ) ) && ( m32a.d == m32c.d ) ) && ( m32a.tx == m32c.tx ) ) && ( m32a.ty == m32c.ty ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testShapeSimilarConversion", "test.TestConverters", "TestConverters.hx"}, new int[]{1981972957}, new double[]{((double) (89) )}));
				global::hxmath.math.Matrix3x3Default m33a = this.randomMatrix3x3(default(global::haxe.lang.Null<double>));
				double m33b_m22 = default(double);
				double m33b_m21 = default(double);
				double m33b_m20 = default(double);
				double m33b_m12 = default(double);
				double m33b_m11 = default(double);
				double m33b_m10 = default(double);
				double m33b_m02 = default(double);
				double m33b_m01 = default(double);
				double m33b_m00 = 0.0;
				m33b_m01 = 0.0;
				m33b_m02 = 0.0;
				m33b_m10 = 0.0;
				m33b_m11 = 0.0;
				m33b_m12 = 0.0;
				m33b_m20 = 0.0;
				m33b_m21 = 0.0;
				m33b_m22 = 0.0;
				global::hxmath.math.Matrix3x3Default m33c = this.randomMatrix3x3(default(global::haxe.lang.Null<double>));
				{
					m33b_m00 = m33a.m00;
					m33b_m01 = m33a.m01;
					m33b_m02 = m33a.m02;
					m33b_m10 = m33a.m10;
					m33b_m11 = m33a.m11;
					m33b_m12 = m33a.m12;
					m33b_m20 = m33a.m20;
					m33b_m21 = m33a.m21;
					m33b_m22 = m33a.m22;
				}
				
				{
					m33c.m00 = m33b_m00;
					m33c.m01 = m33b_m01;
					m33c.m02 = m33b_m02;
					m33c.m10 = m33b_m10;
					m33c.m11 = m33b_m11;
					m33c.m12 = m33b_m12;
					m33c.m20 = m33b_m20;
					m33c.m21 = m33b_m21;
					m33c.m22 = m33b_m22;
				}
				
				this.assertTrue(( ( ( m33a == null ) && ( m33c == null ) ) || ( ( ( ( ( ( ( ( ( ( ( m33a != null ) && ( m33c != null ) ) && ( m33a.m00 == m33c.m00 ) ) && ( m33a.m10 == m33c.m10 ) ) && ( m33a.m20 == m33c.m20 ) ) && ( m33a.m01 == m33c.m01 ) ) && ( m33a.m11 == m33c.m11 ) ) && ( m33a.m21 == m33c.m21 ) ) && ( m33a.m02 == m33c.m02 ) ) && ( m33a.m12 == m33c.m12 ) ) && ( m33a.m22 == m33c.m22 ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testShapeSimilarConversion", "test.TestConverters", "TestConverters.hx"}, new int[]{1981972957}, new double[]{((double) (100) )}));
				global::hxmath.math.Matrix4x4Default m44a = this.randomMatrix4x4(default(global::haxe.lang.Null<double>));
				double m44b_m33 = default(double);
				double m44b_m32 = default(double);
				double m44b_m31 = default(double);
				double m44b_m30 = default(double);
				double m44b_m23 = default(double);
				double m44b_m22 = default(double);
				double m44b_m21 = default(double);
				double m44b_m20 = default(double);
				double m44b_m13 = default(double);
				double m44b_m12 = default(double);
				double m44b_m11 = default(double);
				double m44b_m10 = default(double);
				double m44b_m03 = default(double);
				double m44b_m02 = default(double);
				double m44b_m01 = default(double);
				double m44b_m00 = 0.0;
				m44b_m01 = 0.0;
				m44b_m02 = 0.0;
				m44b_m03 = 0.0;
				m44b_m10 = 0.0;
				m44b_m11 = 0.0;
				m44b_m12 = 0.0;
				m44b_m13 = 0.0;
				m44b_m20 = 0.0;
				m44b_m21 = 0.0;
				m44b_m22 = 0.0;
				m44b_m23 = 0.0;
				m44b_m30 = 0.0;
				m44b_m31 = 0.0;
				m44b_m32 = 0.0;
				m44b_m33 = 0.0;
				global::hxmath.math.Matrix4x4Default m44c = this.randomMatrix4x4(default(global::haxe.lang.Null<double>));
				{
					m44b_m00 = m44a.m00;
					m44b_m01 = m44a.m01;
					m44b_m02 = m44a.m02;
					m44b_m03 = m44a.m03;
					m44b_m10 = m44a.m10;
					m44b_m11 = m44a.m11;
					m44b_m12 = m44a.m12;
					m44b_m13 = m44a.m13;
					m44b_m20 = m44a.m20;
					m44b_m21 = m44a.m21;
					m44b_m22 = m44a.m22;
					m44b_m23 = m44a.m23;
					m44b_m30 = m44a.m30;
					m44b_m31 = m44a.m31;
					m44b_m32 = m44a.m32;
					m44b_m33 = m44a.m33;
				}
				
				{
					m44c.m00 = m44b_m00;
					m44c.m01 = m44b_m01;
					m44c.m02 = m44b_m02;
					m44c.m03 = m44b_m03;
					m44c.m10 = m44b_m10;
					m44c.m11 = m44b_m11;
					m44c.m12 = m44b_m12;
					m44c.m13 = m44b_m13;
					m44c.m20 = m44b_m20;
					m44c.m21 = m44b_m21;
					m44c.m22 = m44b_m22;
					m44c.m23 = m44b_m23;
					m44c.m30 = m44b_m30;
					m44c.m31 = m44b_m31;
					m44c.m32 = m44b_m32;
					m44c.m33 = m44b_m33;
				}
				
				this.assertTrue(( ( ( m44a == null ) && ( m44c == null ) ) || ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( m44a != null ) && ( m44c != null ) ) && ( m44a.m00 == m44c.m00 ) ) && ( m44a.m10 == m44c.m10 ) ) && ( m44a.m20 == m44c.m20 ) ) && ( m44a.m30 == m44c.m30 ) ) && ( m44a.m01 == m44c.m01 ) ) && ( m44a.m11 == m44c.m11 ) ) && ( m44a.m21 == m44c.m21 ) ) && ( m44a.m31 == m44c.m31 ) ) && ( m44a.m02 == m44c.m02 ) ) && ( m44a.m12 == m44c.m12 ) ) && ( m44a.m22 == m44c.m22 ) ) && ( m44a.m32 == m44c.m32 ) ) && ( m44a.m03 == m44c.m03 ) ) && ( m44a.m13 == m44c.m13 ) ) && ( m44a.m23 == m44c.m23 ) ) && ( m44a.m33 == m44c.m33 ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testShapeSimilarConversion", "test.TestConverters", "TestConverters.hx"}, new int[]{1981972957}, new double[]{((double) (112) )}));
				global::hxmath.math.QuaternionDefault qa = this.randomQuaternion(default(global::haxe.lang.Null<double>));
				double qb_z = default(double);
				double qb_y = default(double);
				double qb_x = default(double);
				double qb_s = 0.0;
				qb_x = 0.0;
				qb_y = 0.0;
				qb_z = 0.0;
				global::hxmath.math.QuaternionDefault qc = this.randomQuaternion(default(global::haxe.lang.Null<double>));
				{
					qb_s = qa.s;
					qb_x = qa.x;
					qb_y = qa.y;
					qb_z = qa.z;
				}
				
				{
					qc.s = qb_s;
					qc.x = qb_x;
					qc.y = qb_y;
					qc.z = qb_z;
				}
				
				this.assertTrue(( ( ( qa == null ) && ( qc == null ) ) || ( ( ( ( ( ( qa != null ) && ( qc != null ) ) && ( qa.s == qc.s ) ) && ( qa.x == qc.x ) ) && ( qa.y == qc.y ) ) && ( qa.z == qc.z ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testShapeSimilarConversion", "test.TestConverters", "TestConverters.hx"}, new int[]{1981972957}, new double[]{((double) (119) )}));
			}
		}
		
		
		public virtual void testFlxPointConversion() {
			unchecked {
				global::hxmath.math.Vector2Default v = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(3.0, 1.0)) );
				global::test.FlxPointMock q = new global::test.FlxPointMock(default(global::haxe.lang.Null<double>), default(global::haxe.lang.Null<double>));
				{
					q.set_x(v.x);
					q.set_y(v.y);
				}
				
				this.assertEquals<double>(((double) (v.x) ), ((double) (q.x) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFlxPointConversion", "test.TestConverters", "TestConverters.hx"}, new int[]{1981972957}, new double[]{((double) (128) )})) ));
				this.assertEquals<double>(((double) (v.y) ), ((double) (q.y) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFlxPointConversion", "test.TestConverters", "TestConverters.hx"}, new int[]{1981972957}, new double[]{((double) (129) )})) ));
				global::hxmath.math.Vector2Default u = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 0.0)) );
				{
					u.x = q.x;
					u.y = q.y;
				}
				
				this.assertEquals<double>(((double) (u.x) ), ((double) (q.x) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFlxPointConversion", "test.TestConverters", "TestConverters.hx"}, new int[]{1981972957}, new double[]{((double) (133) )})) ));
				this.assertEquals<double>(((double) (u.y) ), ((double) (q.y) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFlxPointConversion", "test.TestConverters", "TestConverters.hx"}, new int[]{1981972957}, new double[]{((double) (134) )})) ));
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 227445798:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFlxPointConversion", 227445798)) );
					}
					
					
					case 1740280498:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testShapeSimilarConversion", 1740280498)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 227445798:
					{
						this.testFlxPointConversion();
						break;
					}
					
					
					case 1740280498:
					{
						this.testShapeSimilarConversion();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
	}
}


