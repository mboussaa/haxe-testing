// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hxmath.math {
	public class Vector2Default : global::haxe.lang.HxObject {
		
		public Vector2Default(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Vector2Default(double x, double y) {
			global::hxmath.math.Vector2Default.__hx_ctor_hxmath_math_Vector2Default(this, x, y);
		}
		
		
		public static void __hx_ctor_hxmath_math_Vector2Default(global::hxmath.math.Vector2Default __temp_me34, double x, double y) {
			__temp_me34.x = x;
			__temp_me34.y = y;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::hxmath.math.Vector2Default(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			unchecked {
				return new global::hxmath.math.Vector2Default(((double) (global::haxe.lang.Runtime.toDouble(arr[0])) ), ((double) (global::haxe.lang.Runtime.toDouble(arr[1])) ));
			}
		}
		
		
		public double x;
		
		public double y;
		
		public virtual string toString() {
			return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("(", global::haxe.lang.Runtime.toString(this.x)), ", "), global::haxe.lang.Runtime.toString(this.y)), ")");
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 121:
					{
						this.y = ((double) (@value) );
						return @value;
					}
					
					
					case 120:
					{
						this.x = ((double) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 121:
					{
						this.y = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 120:
					{
						this.x = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
					}
					
					
					case 121:
					{
						return this.y;
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 121:
					{
						return this.y;
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return this.toString();
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("y");
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
		public override string ToString(){
			return this.toString();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hxmath.math._Vector2 {
	public sealed class Vector2_Impl_ {
		
		static Vector2_Impl_() {
			unchecked {
				global::hxmath.math._Vector2.Vector2_Impl_.elementCount = 2;
			}
		}
		
		
		public static int elementCount;
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		public static global::hxmath.math.Vector2Default _new(double x, double y) {
			return ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(x, y)) );
		}
		
		
		public static global::hxmath.math.Vector2Default fromArray(global::Array<double> rawData) {
			unchecked {
				if (( rawData.length != 2 )) {
					throw global::haxe.lang.HaxeException.wrap("Invalid rawData.");
				}
				
				return ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(rawData[0], rawData[1])) );
			}
		}
		
		
		public static global::hxmath.math.Vector2Default fromPolar(double angle, double radius) {
			return ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( radius * global::System.Math.Cos(((double) (angle) )) ), ( radius * global::System.Math.Sin(((double) (angle) )) ))) );
		}
		
		
		public static global::hxmath.math.Vector2Default fromVector2Shape(object other) {
			return ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(global::haxe.lang.Runtime.getField_f(other, "x", 120, true), global::haxe.lang.Runtime.getField_f(other, "y", 121, true))) );
		}
		
		
		public static global::hxmath.math.IntVector2Default toIntVector2(global::hxmath.math.Vector2Default this1, global::haxe.lang.Function func) {
			global::hxmath.math.Vector2Default self = this1;
			if (( func == null )) {
				func = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::Std), "int", 5246191)) );
			}
			
			return global::hxmath.math._IntVector2.IntVector2_Impl_._new(((int) (func.__hx_invoke1_f(self.x, global::haxe.lang.Runtime.undefined)) ), ((int) (func.__hx_invoke1_f(self.y, global::haxe.lang.Runtime.undefined)) ));
		}
		
		
		public static double dot(global::hxmath.math.Vector2Default a, global::hxmath.math.Vector2Default b) {
			return ( ( a.x * b.x ) + ( a.y * b.y ) );
		}
		
		
		public static global::hxmath.math.Vector2Default multiply(global::hxmath.math.Vector2Default a, double s) {
			global::hxmath.math.Vector2Default self = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a.x, a.y)) );
			self.x *= s;
			self.y *= s;
			return self;
		}
		
		
		public static global::hxmath.math.Vector2Default divide(global::hxmath.math.Vector2Default a, double s) {
			global::hxmath.math.Vector2Default self = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a.x, a.y)) );
			self.x /= s;
			self.y /= s;
			return self;
		}
		
		
		public static global::hxmath.math.Vector2Default @add(global::hxmath.math.Vector2Default a, global::hxmath.math.Vector2Default b) {
			global::hxmath.math.Vector2Default self = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a.x, a.y)) );
			self.x += b.x;
			self.y += b.y;
			return self;
		}
		
		
		public static global::hxmath.math.Vector2Default subtract(global::hxmath.math.Vector2Default a, global::hxmath.math.Vector2Default b) {
			global::hxmath.math.Vector2Default self = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a.x, a.y)) );
			self.x -= b.x;
			self.y -= b.y;
			return self;
		}
		
		
		public static global::hxmath.math.Vector2Default negate(global::hxmath.math.Vector2Default a) {
			return ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default( - (a.x) ,  - (a.y) )) );
		}
		
		
		public static bool @equals(global::hxmath.math.Vector2Default a, global::hxmath.math.Vector2Default b) {
			if ( ! ((( ( a == null ) && ( b == null ) ))) ) {
				if (( ( ( a != null ) && ( b != null ) ) && ( a.x == b.x ) )) {
					return ( a.y == b.y );
				}
				else {
					return false;
				}
				
			}
			else {
				return true;
			}
			
		}
		
		
		public static global::hxmath.math.Vector2Default lerp(global::hxmath.math.Vector2Default a, global::hxmath.math.Vector2Default b, double t) {
			return ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( (( 1.0 - t )) * a.x ) + ( t * b.x ) ), ( ( (( 1.0 - t )) * a.y ) + ( t * b.y ) ))) );
		}
		
		
		public static global::hxmath.math.Vector2Default max(global::hxmath.math.Vector2Default a, global::hxmath.math.Vector2Default b) {
			global::hxmath.math.Vector2Default self = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a.x, a.y)) );
			self.x = global::System.Math.Max(((double) (self.x) ), ((double) (b.x) ));
			self.y = global::System.Math.Max(((double) (self.y) ), ((double) (b.y) ));
			return self;
		}
		
		
		public static global::hxmath.math.Vector2Default min(global::hxmath.math.Vector2Default a, global::hxmath.math.Vector2Default b) {
			global::hxmath.math.Vector2Default self = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a.x, a.y)) );
			self.x = global::System.Math.Min(((double) (self.x) ), ((double) (b.x) ));
			self.y = global::System.Math.Min(((double) (self.y) ), ((double) (b.y) ));
			return self;
		}
		
		
		public static global::hxmath.math.Vector2Default project(global::hxmath.math.Vector2Default a, global::hxmath.math.Vector2Default b) {
			unchecked {
				global::hxmath.math.Vector2Default self = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a.x, a.y)) );
				double s = ( (( ( self.x * b.x ) + ( self.y * b.y ) )) / (( ( b.x * b.x ) + ( b.y * b.y ) )) );
				{
					int _g = 0;
					while (( _g < 2 )) {
						int i = _g++;
						{
							object tmp = null;
							switch (i) {
								case 0:
								{
									tmp = b.x;
									break;
								}
								
								
								case 1:
								{
									tmp = b.y;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double @value = ((double) (global::haxe.lang.Runtime.toDouble(tmp)) );
							switch (i) {
								case 0:
								{
									self.x = @value;
									break;
								}
								
								
								case 1:
								{
									self.y = @value;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				{
					self.x *= s;
					self.y *= s;
				}
				
				return self;
			}
		}
		
		
		public static global::hxmath.math.Vector2Default reflect(global::hxmath.math.Vector2Default v, global::hxmath.math.Vector2Default normal) {
			unchecked {
				global::hxmath.math.Vector2Default self = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(v.x, v.y)) );
				global::hxmath.math.Vector2Default self1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self.x, self.y)) );
				double s = ( (( ( self1.x * normal.x ) + ( self1.y * normal.y ) )) / (( ( normal.x * normal.x ) + ( normal.y * normal.y ) )) );
				{
					int _g = 0;
					while (( _g < 2 )) {
						int i = _g++;
						{
							object tmp = null;
							switch (i) {
								case 0:
								{
									tmp = normal.x;
									break;
								}
								
								
								case 1:
								{
									tmp = normal.y;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double @value = ((double) (global::haxe.lang.Runtime.toDouble(tmp)) );
							switch (i) {
								case 0:
								{
									self1.x = @value;
									break;
								}
								
								
								case 1:
								{
									self1.y = @value;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				{
					self1.x *= s;
					self1.y *= s;
				}
				
				{
					self1.x *= 2.0;
					self1.y *= 2.0;
				}
				
				{
					self.x -= self1.x;
					self.y -= self1.y;
				}
				
				return self;
			}
		}
		
		
		public static void orthoNormalize(global::hxmath.math.Vector2Default u, global::hxmath.math.Vector2Default v) {
			unchecked {
				{
					double length = global::System.Math.Sqrt(((double) (( ( u.x * u.x ) + ( u.y * u.y ) )) ));
					if (( length > 0.0 )) {
						u.x /= length;
						u.y /= length;
					}
					
				}
				
				{
					global::hxmath.math.Vector2Default self = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(v.x, v.y)) );
					double s = ( (( ( self.x * u.x ) + ( self.y * u.y ) )) / (( ( u.x * u.x ) + ( u.y * u.y ) )) );
					{
						int _g = 0;
						while (( _g < 2 )) {
							int i = _g++;
							{
								object tmp = null;
								switch (i) {
									case 0:
									{
										tmp = u.x;
										break;
									}
									
									
									case 1:
									{
										tmp = u.y;
										break;
									}
									
									
									default:
									{
										throw global::haxe.lang.HaxeException.wrap("Invalid element");
									}
									
								}
								
								double @value = ((double) (global::haxe.lang.Runtime.toDouble(tmp)) );
								switch (i) {
									case 0:
									{
										self.x = @value;
										break;
									}
									
									
									case 1:
									{
										self.y = @value;
										break;
									}
									
									
									default:
									{
										throw global::haxe.lang.HaxeException.wrap("Invalid element");
									}
									
								}
								
							}
							
						}
						
					}
					
					{
						self.x *= s;
						self.y *= s;
					}
					
					v.x -= self.x;
					v.y -= self.y;
				}
				
				{
					double length1 = global::System.Math.Sqrt(((double) (( ( v.x * v.x ) + ( v.y * v.y ) )) ));
					if (( length1 > 0.0 )) {
						v.x /= length1;
						v.y /= length1;
					}
					
				}
				
			}
		}
		
		
		public static global::hxmath.math.Vector2Default @set(global::hxmath.math.Vector2Default this1, double x, double y) {
			global::hxmath.math.Vector2Default self = this1;
			self.x = x;
			self.y = y;
			return self;
		}
		
		
		public static global::hxmath.math.Vector2Default multiplyWith(global::hxmath.math.Vector2Default this1, double s) {
			global::hxmath.math.Vector2Default self = this1;
			self.x *= s;
			self.y *= s;
			return self;
		}
		
		
		public static global::hxmath.math.Vector2Default divideWith(global::hxmath.math.Vector2Default this1, double s) {
			global::hxmath.math.Vector2Default self = this1;
			self.x /= s;
			self.y /= s;
			return self;
		}
		
		
		public static global::hxmath.math.Vector2Default addWith(global::hxmath.math.Vector2Default this1, global::hxmath.math.Vector2Default a) {
			global::hxmath.math.Vector2Default self = this1;
			self.x += a.x;
			self.y += a.y;
			return self;
		}
		
		
		public static global::hxmath.math.Vector2Default subtractWith(global::hxmath.math.Vector2Default this1, global::hxmath.math.Vector2Default a) {
			global::hxmath.math.Vector2Default self = this1;
			self.x -= a.x;
			self.y -= a.y;
			return self;
		}
		
		
		public static global::hxmath.math.Vector2Default maxWith(global::hxmath.math.Vector2Default this1, global::hxmath.math.Vector2Default a) {
			global::hxmath.math.Vector2Default self = this1;
			self.x = global::System.Math.Max(((double) (self.x) ), ((double) (a.x) ));
			self.y = global::System.Math.Max(((double) (self.y) ), ((double) (a.y) ));
			return self;
		}
		
		
		public static global::hxmath.math.Vector2Default minWith(global::hxmath.math.Vector2Default this1, global::hxmath.math.Vector2Default a) {
			global::hxmath.math.Vector2Default self = this1;
			self.x = global::System.Math.Min(((double) (self.x) ), ((double) (a.x) ));
			self.y = global::System.Math.Min(((double) (self.y) ), ((double) (a.y) ));
			return self;
		}
		
		
		public static global::hxmath.math.Vector2Default projectOnto(global::hxmath.math.Vector2Default this1, global::hxmath.math.Vector2Default a) {
			unchecked {
				global::hxmath.math.Vector2Default self = this1;
				double s = ( (( ( self.x * a.x ) + ( self.y * a.y ) )) / (( ( a.x * a.x ) + ( a.y * a.y ) )) );
				{
					int _g = 0;
					while (( _g < 2 )) {
						int i = _g++;
						{
							object tmp = null;
							switch (i) {
								case 0:
								{
									tmp = a.x;
									break;
								}
								
								
								case 1:
								{
									tmp = a.y;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double @value = ((double) (global::haxe.lang.Runtime.toDouble(tmp)) );
							switch (i) {
								case 0:
								{
									self.x = @value;
									break;
								}
								
								
								case 1:
								{
									self.y = @value;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				{
					self.x *= s;
					self.y *= s;
				}
				
				return self;
			}
		}
		
		
		public static global::hxmath.math.Vector2Default reflectBy(global::hxmath.math.Vector2Default this1, global::hxmath.math.Vector2Default normal) {
			unchecked {
				global::hxmath.math.Vector2Default self = this1;
				global::hxmath.math.Vector2Default self1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self.x, self.y)) );
				double s = ( (( ( self1.x * normal.x ) + ( self1.y * normal.y ) )) / (( ( normal.x * normal.x ) + ( normal.y * normal.y ) )) );
				{
					int _g = 0;
					while (( _g < 2 )) {
						int i = _g++;
						{
							object tmp = null;
							switch (i) {
								case 0:
								{
									tmp = normal.x;
									break;
								}
								
								
								case 1:
								{
									tmp = normal.y;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double @value = ((double) (global::haxe.lang.Runtime.toDouble(tmp)) );
							switch (i) {
								case 0:
								{
									self1.x = @value;
									break;
								}
								
								
								case 1:
								{
									self1.y = @value;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				{
					self1.x *= s;
					self1.y *= s;
				}
				
				{
					self1.x *= 2.0;
					self1.y *= 2.0;
				}
				
				{
					self.x -= self1.x;
					self.y -= self1.y;
				}
				
				return self;
			}
		}
		
		
		public static void copyTo(global::hxmath.math.Vector2Default this1, global::hxmath.math.Vector2Default target) {
			unchecked {
				global::hxmath.math.Vector2Default self = this1;
				{
					int _g = 0;
					while (( _g < 2 )) {
						int i = _g++;
						{
							object tmp = null;
							switch (i) {
								case 0:
								{
									tmp = self.x;
									break;
								}
								
								
								case 1:
								{
									tmp = self.y;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double @value = ((double) (global::haxe.lang.Runtime.toDouble(tmp)) );
							switch (i) {
								case 0:
								{
									target.x = @value;
									break;
								}
								
								
								case 1:
								{
									target.y = @value;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
			}
		}
		
		
		public static void copyToShape(global::hxmath.math.Vector2Default this1, object target) {
			global::hxmath.math.Vector2Default self = this1;
			global::haxe.lang.Runtime.setField_f(target, "x", 120, self.x);
			global::haxe.lang.Runtime.setField_f(target, "y", 121, self.y);
		}
		
		
		public static void copyFromShape(global::hxmath.math.Vector2Default this1, object source) {
			global::hxmath.math.Vector2Default self = this1;
			self.x = global::haxe.lang.Runtime.getField_f(source, "x", 120, true);
			self.y = global::haxe.lang.Runtime.getField_f(source, "y", 121, true);
		}
		
		
		public static global::hxmath.math.Vector2Default clone(global::hxmath.math.Vector2Default this1) {
			global::hxmath.math.Vector2Default self = this1;
			return ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self.x, self.y)) );
		}
		
		
		public static double getArrayElement(global::hxmath.math.Vector2Default this1, int i) {
			unchecked {
				global::hxmath.math.Vector2Default self = this1;
				switch (i) {
					case 0:
					{
						return self.x;
					}
					
					
					case 1:
					{
						return self.y;
					}
					
					
					default:
					{
						throw global::haxe.lang.HaxeException.wrap("Invalid element");
					}
					
				}
				
			}
		}
		
		
		public static double setArrayElement(global::hxmath.math.Vector2Default this1, int i, double @value) {
			unchecked {
				global::hxmath.math.Vector2Default self = this1;
				switch (i) {
					case 0:
					{
						return self.x = @value;
					}
					
					
					case 1:
					{
						return self.y = @value;
					}
					
					
					default:
					{
						throw global::haxe.lang.HaxeException.wrap("Invalid element");
					}
					
				}
				
			}
		}
		
		
		public static global::hxmath.math.Vector2Default applyNegate(global::hxmath.math.Vector2Default this1) {
			global::hxmath.math.Vector2Default self = this1;
			self.x =  - (self.x) ;
			self.y =  - (self.y) ;
			return self;
		}
		
		
		public static global::hxmath.math.Vector2Default applyScalarFunc(global::hxmath.math.Vector2Default this1, global::haxe.lang.Function func) {
			unchecked {
				global::hxmath.math.Vector2Default self = this1;
				{
					int _g = 0;
					while (( _g < 2 )) {
						int i = _g++;
						{
							object tmp = null;
							switch (i) {
								case 0:
								{
									tmp = self.x;
									break;
								}
								
								
								case 1:
								{
									tmp = self.y;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double @value = ((double) (func.__hx_invoke1_f(((double) (global::haxe.lang.Runtime.toDouble(tmp)) ), global::haxe.lang.Runtime.undefined)) );
							switch (i) {
								case 0:
								{
									self.x = @value;
									break;
								}
								
								
								case 1:
								{
									self.y = @value;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				return self;
			}
		}
		
		
		public static double angleWith(global::hxmath.math.Vector2Default this1, global::hxmath.math.Vector2Default b) {
			global::hxmath.math.Vector2Default self = this1;
			return global::System.Math.Acos(((double) (( (( ( self.x * b.x ) + ( self.y * b.y ) )) / (( global::System.Math.Sqrt(((double) (( ( self.x * self.x ) + ( self.y * self.y ) )) )) * global::System.Math.Sqrt(((double) (( ( b.x * b.x ) + ( b.y * b.y ) )) )) )) )) ));
		}
		
		
		public static double signedAngleWith(global::hxmath.math.Vector2Default this1, global::hxmath.math.Vector2Default b) {
			unchecked {
				global::hxmath.math.Vector2Default self = this1;
				double x = ( ( self.x * b.y ) - ( b.x * self.y ) );
				double w = ((double) (0) );
				return ( (( (( global::System.Math.Abs(((double) (x) )) < w )) ? (0) : (( (( x <=  - (w)  )) ? (-1) : (1) )) )) * global::System.Math.Acos(((double) (( (( ( self.x * b.x ) + ( self.y * b.y ) )) / (( global::System.Math.Sqrt(((double) (( ( self.x * self.x ) + ( self.y * self.y ) )) )) * global::System.Math.Sqrt(((double) (( ( b.x * b.x ) + ( b.y * b.y ) )) )) )) )) )) );
			}
		}
		
		
		public static double distanceTo(global::hxmath.math.Vector2Default this1, global::hxmath.math.Vector2Default b) {
			global::hxmath.math.Vector2Default self = this1;
			global::hxmath.math.Vector2Default self1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self.x, self.y)) );
			self1.x -= b.x;
			self1.y -= b.y;
			global::hxmath.math.Vector2Default self2 = ((global::hxmath.math.Vector2Default) (self1) );
			return global::System.Math.Sqrt(((double) (( ( self2.x * self2.x ) + ( self2.y * self2.y ) )) ));
		}
		
		
		public static global::hxmath.math.Vector2Default normalize(global::hxmath.math.Vector2Default this1) {
			global::hxmath.math.Vector2Default self = this1;
			double length = global::System.Math.Sqrt(((double) (( ( self.x * self.x ) + ( self.y * self.y ) )) ));
			if (( length > 0.0 )) {
				self.x /= length;
				self.y /= length;
			}
			
			return self;
		}
		
		
		public static global::hxmath.math.Vector2Default normalizeTo(global::hxmath.math.Vector2Default this1, double newLength) {
			global::hxmath.math.Vector2Default self = this1;
			{
				double length = global::System.Math.Sqrt(((double) (( ( self.x * self.x ) + ( self.y * self.y ) )) ));
				if (( length > 0.0 )) {
					self.x /= length;
					self.y /= length;
				}
				
			}
			
			{
				self.x *= newLength;
				self.y *= newLength;
			}
			
			return self;
		}
		
		
		public static global::hxmath.math.Vector2Default clamp(global::hxmath.math.Vector2Default this1, double min, double max) {
			global::hxmath.math.Vector2Default self = this1;
			double length = global::System.Math.Sqrt(((double) (( ( self.x * self.x ) + ( self.y * self.y ) )) ));
			if (( length < min )) {
				{
					double length1 = global::System.Math.Sqrt(((double) (( ( self.x * self.x ) + ( self.y * self.y ) )) ));
					if (( length1 > 0.0 )) {
						self.x /= length1;
						self.y /= length1;
					}
					
				}
				
				{
					self.x *= min;
					self.y *= min;
				}
				
			}
			else if (( length > max )) {
				{
					double length2 = global::System.Math.Sqrt(((double) (( ( self.x * self.x ) + ( self.y * self.y ) )) ));
					if (( length2 > 0.0 )) {
						self.x /= length2;
						self.y /= length2;
					}
					
				}
				
				{
					self.x *= max;
					self.y *= max;
				}
				
			}
			
			return self;
		}
		
		
		public static global::hxmath.math.Vector2Default rotate(global::hxmath.math.Vector2Default this1, double angle, global::hxmath.math.Vector2Default pivot) {
			global::hxmath.math.Vector2Default self = this1;
			global::System.Math.Cos(((double) (angle) ));
			global::System.Math.Sin(((double) (angle) ));
			double dx = ( self.x - pivot.x );
			double dy = ( self.y - pivot.y );
			self.x = ( ( dx * global::System.Math.Cos(((double) (angle) )) ) - ( dy * global::System.Math.Sin(((double) (angle) )) ) );
			self.y = ( ( dx * global::System.Math.Sin(((double) (angle) )) ) + ( dy * global::System.Math.Cos(((double) (angle) )) ) );
			return self;
		}
		
		
		public static global::hxmath.math.Vector2Default rotateLeft(global::hxmath.math.Vector2Default this1) {
			global::hxmath.math.Vector2Default self = this1;
			double newX =  - (self.y) ;
			self.y = self.x;
			self.x = newX;
			return self;
		}
		
		
		public static global::hxmath.math.Vector2Default rotateRight(global::hxmath.math.Vector2Default this1) {
			global::hxmath.math.Vector2Default self = this1;
			double newX = self.y;
			self.y =  - (self.x) ;
			self.x = newX;
			return self;
		}
		
		
		public static global::hxmath.math.Vector2Default get_zero() {
			return ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 0.0)) );
		}
		
		
		public static global::hxmath.math.Vector2Default get_xAxis() {
			return ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 0.0)) );
		}
		
		
		public static global::hxmath.math.Vector2Default get_yAxis() {
			return ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 1.0)) );
		}
		
		
		public static double get_length(global::hxmath.math.Vector2Default this1) {
			global::hxmath.math.Vector2Default self = this1;
			return global::System.Math.Sqrt(((double) (( ( self.x * self.x ) + ( self.y * self.y ) )) ));
		}
		
		
		public static double get_lengthSq(global::hxmath.math.Vector2Default this1) {
			global::hxmath.math.Vector2Default self = this1;
			return ( ( self.x * self.x ) + ( self.y * self.y ) );
		}
		
		
		public static double get_angle(global::hxmath.math.Vector2Default this1) {
			global::hxmath.math.Vector2Default self = this1;
			return global::System.Math.Atan2(((double) (self.y) ), ((double) (self.x) ));
		}
		
		
		public static global::hxmath.math.Vector2Default get_normal(global::hxmath.math.Vector2Default this1) {
			global::hxmath.math.Vector2Default self = this1;
			global::hxmath.math.Vector2Default self1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self.x, self.y)) );
			double length = global::System.Math.Sqrt(((double) (( ( self1.x * self1.x ) + ( self1.y * self1.y ) )) ));
			if (( length > 0.0 )) {
				self1.x /= length;
				self1.y /= length;
			}
			
			return self1;
		}
		
		
		public static global::hxmath.math.Vector2Default get_rotatedLeft(global::hxmath.math.Vector2Default this1) {
			global::hxmath.math.Vector2Default self = this1;
			global::hxmath.math.Vector2Default self1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self.x, self.y)) );
			double newX =  - (self1.y) ;
			self1.y = self1.x;
			self1.x = newX;
			return self1;
		}
		
		
		public static global::hxmath.math.Vector2Default get_rotatedRight(global::hxmath.math.Vector2Default this1) {
			global::hxmath.math.Vector2Default self = this1;
			global::hxmath.math.Vector2Default self1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self.x, self.y)) );
			double newX = self1.y;
			self1.y =  - (self1.x) ;
			self1.x = newX;
			return self1;
		}
		
		
	}
}


