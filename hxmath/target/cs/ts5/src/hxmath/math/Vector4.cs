// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hxmath.math {
	public class Vector4Default : global::haxe.lang.HxObject {
		
		public Vector4Default(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Vector4Default(double x, double y, double z, double w) {
			global::hxmath.math.Vector4Default.__hx_ctor_hxmath_math_Vector4Default(this, x, y, z, w);
		}
		
		
		public static void __hx_ctor_hxmath_math_Vector4Default(global::hxmath.math.Vector4Default __temp_me38, double x, double y, double z, double w) {
			__temp_me38.x = x;
			__temp_me38.y = y;
			__temp_me38.z = z;
			__temp_me38.w = w;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::hxmath.math.Vector4Default(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			unchecked {
				return new global::hxmath.math.Vector4Default(((double) (global::haxe.lang.Runtime.toDouble(arr[0])) ), ((double) (global::haxe.lang.Runtime.toDouble(arr[1])) ), ((double) (global::haxe.lang.Runtime.toDouble(arr[2])) ), ((double) (global::haxe.lang.Runtime.toDouble(arr[3])) ));
			}
		}
		
		
		public double x;
		
		public double y;
		
		public double z;
		
		public double w;
		
		public virtual string toString() {
			return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("(", global::haxe.lang.Runtime.toString(this.x)), ", "), global::haxe.lang.Runtime.toString(this.y)), ", "), global::haxe.lang.Runtime.toString(this.z)), ", "), global::haxe.lang.Runtime.toString(this.w)), ")");
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 119:
					{
						this.w = ((double) (@value) );
						return @value;
					}
					
					
					case 122:
					{
						this.z = ((double) (@value) );
						return @value;
					}
					
					
					case 121:
					{
						this.y = ((double) (@value) );
						return @value;
					}
					
					
					case 120:
					{
						this.x = ((double) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 119:
					{
						this.w = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 122:
					{
						this.z = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 121:
					{
						this.y = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 120:
					{
						this.x = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
					}
					
					
					case 119:
					{
						return this.w;
					}
					
					
					case 122:
					{
						return this.z;
					}
					
					
					case 121:
					{
						return this.y;
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 119:
					{
						return this.w;
					}
					
					
					case 122:
					{
						return this.z;
					}
					
					
					case 121:
					{
						return this.y;
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return this.toString();
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("w");
			baseArr.push("z");
			baseArr.push("y");
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
		public override string ToString(){
			return this.toString();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hxmath.math._Vector4 {
	public sealed class Vector4_Impl_ {
		
		static Vector4_Impl_() {
			unchecked {
				global::hxmath.math._Vector4.Vector4_Impl_.elementCount = 4;
			}
		}
		
		
		public static int elementCount;
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		public static global::hxmath.math.Vector4Default _new(double x, double y, double z, double w) {
			return ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(x, y, z, w)) );
		}
		
		
		public static global::hxmath.math.Vector4Default fromArray(global::Array<double> rawData) {
			unchecked {
				if (( rawData.length != 4 )) {
					throw global::haxe.lang.HaxeException.wrap("Invalid rawData.");
				}
				
				return ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(rawData[0], rawData[1], rawData[2], rawData[3])) );
			}
		}
		
		
		public static global::hxmath.math.Vector4Default fromVector4Shape(object other) {
			return ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(global::haxe.lang.Runtime.getField_f(other, "x", 120, true), global::haxe.lang.Runtime.getField_f(other, "y", 121, true), global::haxe.lang.Runtime.getField_f(other, "z", 122, true), global::haxe.lang.Runtime.getField_f(other, "w", 119, true))) );
		}
		
		
		public static double dot(global::hxmath.math.Vector4Default a, global::hxmath.math.Vector4Default b) {
			return ( ( ( ( a.x * b.x ) + ( a.y * b.y ) ) + ( a.z * b.z ) ) + ( a.w * b.w ) );
		}
		
		
		public static global::hxmath.math.Vector4Default multiply(global::hxmath.math.Vector4Default a, double s) {
			global::hxmath.math.Vector4Default self = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(a.x, a.y, a.z, a.w)) );
			self.x *= s;
			self.y *= s;
			self.z *= s;
			self.w *= s;
			return self;
		}
		
		
		public static global::hxmath.math.Vector4Default divide(global::hxmath.math.Vector4Default a, double s) {
			global::hxmath.math.Vector4Default self = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(a.x, a.y, a.z, a.w)) );
			self.x /= s;
			self.y /= s;
			self.z /= s;
			self.w /= s;
			return self;
		}
		
		
		public static global::hxmath.math.Vector4Default @add(global::hxmath.math.Vector4Default a, global::hxmath.math.Vector4Default b) {
			global::hxmath.math.Vector4Default self = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(a.x, a.y, a.z, a.w)) );
			self.x += b.x;
			self.y += b.y;
			self.z += b.z;
			self.w += b.w;
			return self;
		}
		
		
		public static global::hxmath.math.Vector4Default subtract(global::hxmath.math.Vector4Default a, global::hxmath.math.Vector4Default b) {
			global::hxmath.math.Vector4Default self = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(a.x, a.y, a.z, a.w)) );
			self.x -= b.x;
			self.y -= b.y;
			self.z -= b.z;
			self.w -= b.w;
			return self;
		}
		
		
		public static global::hxmath.math.Vector4Default negate(global::hxmath.math.Vector4Default a) {
			return ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default( - (a.x) ,  - (a.y) ,  - (a.z) ,  - (a.w) )) );
		}
		
		
		public static bool @equals(global::hxmath.math.Vector4Default a, global::hxmath.math.Vector4Default b) {
			if ( ! ((( ( a == null ) && ( b == null ) ))) ) {
				if (( ( ( ( ( a != null ) && ( b != null ) ) && ( a.x == b.x ) ) && ( a.y == b.y ) ) && ( a.z == b.z ) )) {
					return ( a.w == b.w );
				}
				else {
					return false;
				}
				
			}
			else {
				return true;
			}
			
		}
		
		
		public static global::hxmath.math.Vector4Default lerp(global::hxmath.math.Vector4Default a, global::hxmath.math.Vector4Default b, double t) {
			return ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(( ( (( 1.0 - t )) * a.x ) + ( t * b.x ) ), ( ( (( 1.0 - t )) * a.y ) + ( t * b.y ) ), ( ( (( 1.0 - t )) * a.z ) + ( t * b.z ) ), ( ( (( 1.0 - t )) * a.w ) + ( t * b.w ) ))) );
		}
		
		
		public static global::hxmath.math.Vector4Default max(global::hxmath.math.Vector4Default a, global::hxmath.math.Vector4Default b) {
			global::hxmath.math.Vector4Default self = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(a.x, a.y, a.z, a.w)) );
			self.x = global::System.Math.Max(((double) (self.x) ), ((double) (b.x) ));
			self.y = global::System.Math.Max(((double) (self.y) ), ((double) (b.y) ));
			self.z = global::System.Math.Max(((double) (self.z) ), ((double) (b.z) ));
			self.w = global::System.Math.Max(((double) (self.w) ), ((double) (b.w) ));
			return self;
		}
		
		
		public static global::hxmath.math.Vector4Default min(global::hxmath.math.Vector4Default a, global::hxmath.math.Vector4Default b) {
			global::hxmath.math.Vector4Default self = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(a.x, a.y, a.z, a.w)) );
			self.x = global::System.Math.Min(((double) (self.x) ), ((double) (b.x) ));
			self.y = global::System.Math.Min(((double) (self.y) ), ((double) (b.y) ));
			self.z = global::System.Math.Min(((double) (self.z) ), ((double) (b.z) ));
			self.w = global::System.Math.Min(((double) (self.w) ), ((double) (b.w) ));
			return self;
		}
		
		
		public static global::hxmath.math.Vector4Default project(global::hxmath.math.Vector4Default a, global::hxmath.math.Vector4Default b) {
			unchecked {
				global::hxmath.math.Vector4Default self = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(a.x, a.y, a.z, a.w)) );
				double s = ( (( ( ( ( self.x * b.x ) + ( self.y * b.y ) ) + ( self.z * b.z ) ) + ( self.w * b.w ) )) / (( ( ( ( b.x * b.x ) + ( b.y * b.y ) ) + ( b.z * b.z ) ) + ( b.w * b.w ) )) );
				{
					int _g = 0;
					while (( _g < 4 )) {
						int i = _g++;
						{
							object tmp = null;
							switch (i) {
								case 0:
								{
									tmp = b.x;
									break;
								}
								
								
								case 1:
								{
									tmp = b.y;
									break;
								}
								
								
								case 2:
								{
									tmp = b.z;
									break;
								}
								
								
								case 3:
								{
									tmp = b.w;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double @value = ((double) (global::haxe.lang.Runtime.toDouble(tmp)) );
							switch (i) {
								case 0:
								{
									self.x = @value;
									break;
								}
								
								
								case 1:
								{
									self.y = @value;
									break;
								}
								
								
								case 2:
								{
									self.z = @value;
									break;
								}
								
								
								case 3:
								{
									self.w = @value;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				{
					self.x *= s;
					self.y *= s;
					self.z *= s;
					self.w *= s;
				}
				
				return self;
			}
		}
		
		
		public static global::hxmath.math.Vector4Default @set(global::hxmath.math.Vector4Default this1, double x, double y, double z, double w) {
			global::hxmath.math.Vector4Default self = this1;
			self.x = x;
			self.y = y;
			self.z = z;
			self.w = w;
			return self;
		}
		
		
		public static global::hxmath.math.Vector4Default multiplyWith(global::hxmath.math.Vector4Default this1, double s) {
			global::hxmath.math.Vector4Default self = this1;
			self.x *= s;
			self.y *= s;
			self.z *= s;
			self.w *= s;
			return self;
		}
		
		
		public static global::hxmath.math.Vector4Default divideWith(global::hxmath.math.Vector4Default this1, double s) {
			global::hxmath.math.Vector4Default self = this1;
			self.x /= s;
			self.y /= s;
			self.z /= s;
			self.w /= s;
			return self;
		}
		
		
		public static global::hxmath.math.Vector4Default addWith(global::hxmath.math.Vector4Default this1, global::hxmath.math.Vector4Default a) {
			global::hxmath.math.Vector4Default self = this1;
			self.x += a.x;
			self.y += a.y;
			self.z += a.z;
			self.w += a.w;
			return self;
		}
		
		
		public static global::hxmath.math.Vector4Default subtractWith(global::hxmath.math.Vector4Default this1, global::hxmath.math.Vector4Default a) {
			global::hxmath.math.Vector4Default self = this1;
			self.x -= a.x;
			self.y -= a.y;
			self.z -= a.z;
			self.w -= a.w;
			return self;
		}
		
		
		public static global::hxmath.math.Vector4Default maxWith(global::hxmath.math.Vector4Default this1, global::hxmath.math.Vector4Default a) {
			global::hxmath.math.Vector4Default self = this1;
			self.x = global::System.Math.Max(((double) (self.x) ), ((double) (a.x) ));
			self.y = global::System.Math.Max(((double) (self.y) ), ((double) (a.y) ));
			self.z = global::System.Math.Max(((double) (self.z) ), ((double) (a.z) ));
			self.w = global::System.Math.Max(((double) (self.w) ), ((double) (a.w) ));
			return self;
		}
		
		
		public static global::hxmath.math.Vector4Default minWith(global::hxmath.math.Vector4Default this1, global::hxmath.math.Vector4Default a) {
			global::hxmath.math.Vector4Default self = this1;
			self.x = global::System.Math.Min(((double) (self.x) ), ((double) (a.x) ));
			self.y = global::System.Math.Min(((double) (self.y) ), ((double) (a.y) ));
			self.z = global::System.Math.Min(((double) (self.z) ), ((double) (a.z) ));
			self.w = global::System.Math.Min(((double) (self.w) ), ((double) (a.w) ));
			return self;
		}
		
		
		public static global::hxmath.math.Vector4Default projectOnto(global::hxmath.math.Vector4Default this1, global::hxmath.math.Vector4Default a) {
			unchecked {
				global::hxmath.math.Vector4Default self = this1;
				double s = ( (( ( ( ( self.x * a.x ) + ( self.y * a.y ) ) + ( self.z * a.z ) ) + ( self.w * a.w ) )) / (( ( ( ( a.x * a.x ) + ( a.y * a.y ) ) + ( a.z * a.z ) ) + ( a.w * a.w ) )) );
				{
					int _g = 0;
					while (( _g < 4 )) {
						int i = _g++;
						{
							object tmp = null;
							switch (i) {
								case 0:
								{
									tmp = a.x;
									break;
								}
								
								
								case 1:
								{
									tmp = a.y;
									break;
								}
								
								
								case 2:
								{
									tmp = a.z;
									break;
								}
								
								
								case 3:
								{
									tmp = a.w;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double @value = ((double) (global::haxe.lang.Runtime.toDouble(tmp)) );
							switch (i) {
								case 0:
								{
									self.x = @value;
									break;
								}
								
								
								case 1:
								{
									self.y = @value;
									break;
								}
								
								
								case 2:
								{
									self.z = @value;
									break;
								}
								
								
								case 3:
								{
									self.w = @value;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				{
					self.x *= s;
					self.y *= s;
					self.z *= s;
					self.w *= s;
				}
				
				return self;
			}
		}
		
		
		public static void copyTo(global::hxmath.math.Vector4Default this1, global::hxmath.math.Vector4Default target) {
			unchecked {
				global::hxmath.math.Vector4Default self = this1;
				{
					int _g = 0;
					while (( _g < 4 )) {
						int i = _g++;
						{
							object tmp = null;
							switch (i) {
								case 0:
								{
									tmp = self.x;
									break;
								}
								
								
								case 1:
								{
									tmp = self.y;
									break;
								}
								
								
								case 2:
								{
									tmp = self.z;
									break;
								}
								
								
								case 3:
								{
									tmp = self.w;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double @value = ((double) (global::haxe.lang.Runtime.toDouble(tmp)) );
							switch (i) {
								case 0:
								{
									target.x = @value;
									break;
								}
								
								
								case 1:
								{
									target.y = @value;
									break;
								}
								
								
								case 2:
								{
									target.z = @value;
									break;
								}
								
								
								case 3:
								{
									target.w = @value;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
			}
		}
		
		
		public static void copyToShape(global::hxmath.math.Vector4Default this1, object target) {
			global::hxmath.math.Vector4Default self = this1;
			global::haxe.lang.Runtime.setField_f(target, "x", 120, self.x);
			global::haxe.lang.Runtime.setField_f(target, "y", 121, self.y);
			global::haxe.lang.Runtime.setField_f(target, "z", 122, self.z);
			global::haxe.lang.Runtime.setField_f(target, "w", 119, self.w);
		}
		
		
		public static void copyFromShape(global::hxmath.math.Vector4Default this1, object source) {
			global::hxmath.math.Vector4Default self = this1;
			self.x = global::haxe.lang.Runtime.getField_f(source, "x", 120, true);
			self.y = global::haxe.lang.Runtime.getField_f(source, "y", 121, true);
			self.z = global::haxe.lang.Runtime.getField_f(source, "z", 122, true);
			self.w = global::haxe.lang.Runtime.getField_f(source, "w", 119, true);
		}
		
		
		public static global::hxmath.math.Vector4Default clone(global::hxmath.math.Vector4Default this1) {
			global::hxmath.math.Vector4Default self = this1;
			return ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(self.x, self.y, self.z, self.w)) );
		}
		
		
		public static double getArrayElement(global::hxmath.math.Vector4Default this1, int i) {
			unchecked {
				global::hxmath.math.Vector4Default self = this1;
				switch (i) {
					case 0:
					{
						return self.x;
					}
					
					
					case 1:
					{
						return self.y;
					}
					
					
					case 2:
					{
						return self.z;
					}
					
					
					case 3:
					{
						return self.w;
					}
					
					
					default:
					{
						throw global::haxe.lang.HaxeException.wrap("Invalid element");
					}
					
				}
				
			}
		}
		
		
		public static double setArrayElement(global::hxmath.math.Vector4Default this1, int i, double @value) {
			unchecked {
				global::hxmath.math.Vector4Default self = this1;
				switch (i) {
					case 0:
					{
						return self.x = @value;
					}
					
					
					case 1:
					{
						return self.y = @value;
					}
					
					
					case 2:
					{
						return self.z = @value;
					}
					
					
					case 3:
					{
						return self.w = @value;
					}
					
					
					default:
					{
						throw global::haxe.lang.HaxeException.wrap("Invalid element");
					}
					
				}
				
			}
		}
		
		
		public static global::hxmath.math.Vector4Default applyScalarFunc(global::hxmath.math.Vector4Default this1, global::haxe.lang.Function func) {
			unchecked {
				global::hxmath.math.Vector4Default self = this1;
				{
					int _g = 0;
					while (( _g < 4 )) {
						int i = _g++;
						{
							object tmp = null;
							switch (i) {
								case 0:
								{
									tmp = self.x;
									break;
								}
								
								
								case 1:
								{
									tmp = self.y;
									break;
								}
								
								
								case 2:
								{
									tmp = self.z;
									break;
								}
								
								
								case 3:
								{
									tmp = self.w;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double @value = ((double) (func.__hx_invoke1_f(((double) (global::haxe.lang.Runtime.toDouble(tmp)) ), global::haxe.lang.Runtime.undefined)) );
							switch (i) {
								case 0:
								{
									self.x = @value;
									break;
								}
								
								
								case 1:
								{
									self.y = @value;
									break;
								}
								
								
								case 2:
								{
									self.z = @value;
									break;
								}
								
								
								case 3:
								{
									self.w = @value;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				return self;
			}
		}
		
		
		public static double distanceTo(global::hxmath.math.Vector4Default this1, global::hxmath.math.Vector4Default b) {
			global::hxmath.math.Vector4Default self = this1;
			global::hxmath.math.Vector4Default self1 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(self.x, self.y, self.z, self.w)) );
			self1.x -= b.x;
			self1.y -= b.y;
			self1.z -= b.z;
			self1.w -= b.w;
			global::hxmath.math.Vector4Default self2 = ((global::hxmath.math.Vector4Default) (self1) );
			return global::System.Math.Sqrt(((double) (( ( ( ( self2.x * self2.x ) + ( self2.y * self2.y ) ) + ( self2.z * self2.z ) ) + ( self2.w * self2.w ) )) ));
		}
		
		
		public static global::hxmath.math.Vector4Default normalize(global::hxmath.math.Vector4Default this1) {
			global::hxmath.math.Vector4Default self = this1;
			double length = global::System.Math.Sqrt(((double) (( ( ( ( self.x * self.x ) + ( self.y * self.y ) ) + ( self.z * self.z ) ) + ( self.w * self.w ) )) ));
			if (( length > 0.0 )) {
				self.x /= length;
				self.y /= length;
				self.z /= length;
				self.w /= length;
			}
			
			return self;
		}
		
		
		public static global::hxmath.math.Vector4Default normalizeTo(global::hxmath.math.Vector4Default this1, double newLength) {
			global::hxmath.math.Vector4Default self = this1;
			{
				double length = global::System.Math.Sqrt(((double) (( ( ( ( self.x * self.x ) + ( self.y * self.y ) ) + ( self.z * self.z ) ) + ( self.w * self.w ) )) ));
				if (( length > 0.0 )) {
					self.x /= length;
					self.y /= length;
					self.z /= length;
					self.w /= length;
				}
				
			}
			
			{
				self.x *= newLength;
				self.y *= newLength;
				self.z *= newLength;
				self.w *= newLength;
			}
			
			return self;
		}
		
		
		public static global::hxmath.math.Vector4Default clamp(global::hxmath.math.Vector4Default this1, double min, double max) {
			global::hxmath.math.Vector4Default self = this1;
			double length = global::System.Math.Sqrt(((double) (( ( ( ( self.x * self.x ) + ( self.y * self.y ) ) + ( self.z * self.z ) ) + ( self.w * self.w ) )) ));
			if (( length < min )) {
				{
					double length1 = global::System.Math.Sqrt(((double) (( ( ( ( self.x * self.x ) + ( self.y * self.y ) ) + ( self.z * self.z ) ) + ( self.w * self.w ) )) ));
					if (( length1 > 0.0 )) {
						self.x /= length1;
						self.y /= length1;
						self.z /= length1;
						self.w /= length1;
					}
					
				}
				
				{
					self.x *= min;
					self.y *= min;
					self.z *= min;
					self.w *= min;
				}
				
			}
			else if (( length > max )) {
				{
					double length2 = global::System.Math.Sqrt(((double) (( ( ( ( self.x * self.x ) + ( self.y * self.y ) ) + ( self.z * self.z ) ) + ( self.w * self.w ) )) ));
					if (( length2 > 0.0 )) {
						self.x /= length2;
						self.y /= length2;
						self.z /= length2;
						self.w /= length2;
					}
					
				}
				
				{
					self.x *= max;
					self.y *= max;
					self.z *= max;
					self.w *= max;
				}
				
			}
			
			return self;
		}
		
		
		public static double get_length(global::hxmath.math.Vector4Default this1) {
			global::hxmath.math.Vector4Default self = this1;
			return global::System.Math.Sqrt(((double) (( ( ( ( self.x * self.x ) + ( self.y * self.y ) ) + ( self.z * self.z ) ) + ( self.w * self.w ) )) ));
		}
		
		
		public static double get_lengthSq(global::hxmath.math.Vector4Default this1) {
			global::hxmath.math.Vector4Default self = this1;
			return ( ( ( ( self.x * self.x ) + ( self.y * self.y ) ) + ( self.z * self.z ) ) + ( self.w * self.w ) );
		}
		
		
		public static global::hxmath.math.Vector4Default get_zero() {
			return ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 0.0, 0.0, 0.0)) );
		}
		
		
		public static global::hxmath.math.Vector4Default get_xAxis() {
			return ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(1.0, 0.0, 0.0, 0.0)) );
		}
		
		
		public static global::hxmath.math.Vector4Default get_yAxis() {
			return ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 1.0, 0.0, 0.0)) );
		}
		
		
		public static global::hxmath.math.Vector4Default get_zAxis() {
			return ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 0.0, 1.0, 0.0)) );
		}
		
		
		public static global::hxmath.math.Vector4Default get_wAxis() {
			return ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 0.0, 0.0, 1.0)) );
		}
		
		
	}
}


