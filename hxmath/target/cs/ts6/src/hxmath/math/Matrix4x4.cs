// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hxmath.math {
	public class Matrix4x4Default : global::haxe.lang.HxObject {
		
		public Matrix4x4Default(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Matrix4x4Default(double m00, double m10, double m20, double m30, double m01, double m11, double m21, double m31, double m02, double m12, double m22, double m32, double m03, double m13, double m23, double m33) {
			global::hxmath.math.Matrix4x4Default.__hx_ctor_hxmath_math_Matrix4x4Default(this, m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33);
		}
		
		
		public static void __hx_ctor_hxmath_math_Matrix4x4Default(global::hxmath.math.Matrix4x4Default __temp_me32, double m00, double m10, double m20, double m30, double m01, double m11, double m21, double m31, double m02, double m12, double m22, double m32, double m03, double m13, double m23, double m33) {
			__temp_me32.m00 = m00;
			__temp_me32.m10 = m10;
			__temp_me32.m20 = m20;
			__temp_me32.m30 = m30;
			__temp_me32.m01 = m01;
			__temp_me32.m11 = m11;
			__temp_me32.m21 = m21;
			__temp_me32.m31 = m31;
			__temp_me32.m02 = m02;
			__temp_me32.m12 = m12;
			__temp_me32.m22 = m22;
			__temp_me32.m32 = m32;
			__temp_me32.m03 = m03;
			__temp_me32.m13 = m13;
			__temp_me32.m23 = m23;
			__temp_me32.m33 = m33;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::hxmath.math.Matrix4x4Default(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			unchecked {
				return new global::hxmath.math.Matrix4x4Default(((double) (global::haxe.lang.Runtime.toDouble(arr[0])) ), ((double) (global::haxe.lang.Runtime.toDouble(arr[1])) ), ((double) (global::haxe.lang.Runtime.toDouble(arr[2])) ), ((double) (global::haxe.lang.Runtime.toDouble(arr[3])) ), ((double) (global::haxe.lang.Runtime.toDouble(arr[4])) ), ((double) (global::haxe.lang.Runtime.toDouble(arr[5])) ), ((double) (global::haxe.lang.Runtime.toDouble(arr[6])) ), ((double) (global::haxe.lang.Runtime.toDouble(arr[7])) ), ((double) (global::haxe.lang.Runtime.toDouble(arr[8])) ), ((double) (global::haxe.lang.Runtime.toDouble(arr[9])) ), ((double) (global::haxe.lang.Runtime.toDouble(arr[10])) ), ((double) (global::haxe.lang.Runtime.toDouble(arr[11])) ), ((double) (global::haxe.lang.Runtime.toDouble(arr[12])) ), ((double) (global::haxe.lang.Runtime.toDouble(arr[13])) ), ((double) (global::haxe.lang.Runtime.toDouble(arr[14])) ), ((double) (global::haxe.lang.Runtime.toDouble(arr[15])) ));
			}
		}
		
		
		public double m00;
		
		public double m01;
		
		public double m02;
		
		public double m03;
		
		public double m10;
		
		public double m11;
		
		public double m12;
		
		public double m13;
		
		public double m20;
		
		public double m21;
		
		public double m22;
		
		public double m23;
		
		public double m30;
		
		public double m31;
		
		public double m32;
		
		public double m33;
		
		public virtual string toString() {
			return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("[[", global::haxe.lang.Runtime.toString(this.m00)), ", "), global::haxe.lang.Runtime.toString(this.m10)), ", "), global::haxe.lang.Runtime.toString(this.m20)), ", "), global::haxe.lang.Runtime.toString(this.m30)), "], ["), global::haxe.lang.Runtime.toString(this.m01)), ", "), global::haxe.lang.Runtime.toString(this.m11)), ", "), global::haxe.lang.Runtime.toString(this.m21)), ", "), global::haxe.lang.Runtime.toString(this.m31)), "], ["), global::haxe.lang.Runtime.toString(this.m02)), ", "), global::haxe.lang.Runtime.toString(this.m12)), ", "), global::haxe.lang.Runtime.toString(this.m22)), ", "), global::haxe.lang.Runtime.toString(this.m32)), "], ["), global::haxe.lang.Runtime.toString(this.m03)), ", "), global::haxe.lang.Runtime.toString(this.m13)), ", "), global::haxe.lang.Runtime.toString(this.m23)), ", "), global::haxe.lang.Runtime.toString(this.m33)), "]]");
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 5431885:
					{
						this.m33 = ((double) (@value) );
						return @value;
					}
					
					
					case 5431884:
					{
						this.m32 = ((double) (@value) );
						return @value;
					}
					
					
					case 5431883:
					{
						this.m31 = ((double) (@value) );
						return @value;
					}
					
					
					case 5431882:
					{
						this.m30 = ((double) (@value) );
						return @value;
					}
					
					
					case 5431662:
					{
						this.m23 = ((double) (@value) );
						return @value;
					}
					
					
					case 5431661:
					{
						this.m22 = ((double) (@value) );
						return @value;
					}
					
					
					case 5431660:
					{
						this.m21 = ((double) (@value) );
						return @value;
					}
					
					
					case 5431659:
					{
						this.m20 = ((double) (@value) );
						return @value;
					}
					
					
					case 5431439:
					{
						this.m13 = ((double) (@value) );
						return @value;
					}
					
					
					case 5431438:
					{
						this.m12 = ((double) (@value) );
						return @value;
					}
					
					
					case 5431437:
					{
						this.m11 = ((double) (@value) );
						return @value;
					}
					
					
					case 5431436:
					{
						this.m10 = ((double) (@value) );
						return @value;
					}
					
					
					case 5431216:
					{
						this.m03 = ((double) (@value) );
						return @value;
					}
					
					
					case 5431215:
					{
						this.m02 = ((double) (@value) );
						return @value;
					}
					
					
					case 5431214:
					{
						this.m01 = ((double) (@value) );
						return @value;
					}
					
					
					case 5431213:
					{
						this.m00 = ((double) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 5431885:
					{
						this.m33 = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 5431884:
					{
						this.m32 = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 5431883:
					{
						this.m31 = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 5431882:
					{
						this.m30 = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 5431662:
					{
						this.m23 = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 5431661:
					{
						this.m22 = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 5431660:
					{
						this.m21 = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 5431659:
					{
						this.m20 = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 5431439:
					{
						this.m13 = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 5431438:
					{
						this.m12 = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 5431437:
					{
						this.m11 = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 5431436:
					{
						this.m10 = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 5431216:
					{
						this.m03 = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 5431215:
					{
						this.m02 = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 5431214:
					{
						this.m01 = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 5431213:
					{
						this.m00 = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
					}
					
					
					case 5431885:
					{
						return this.m33;
					}
					
					
					case 5431884:
					{
						return this.m32;
					}
					
					
					case 5431883:
					{
						return this.m31;
					}
					
					
					case 5431882:
					{
						return this.m30;
					}
					
					
					case 5431662:
					{
						return this.m23;
					}
					
					
					case 5431661:
					{
						return this.m22;
					}
					
					
					case 5431660:
					{
						return this.m21;
					}
					
					
					case 5431659:
					{
						return this.m20;
					}
					
					
					case 5431439:
					{
						return this.m13;
					}
					
					
					case 5431438:
					{
						return this.m12;
					}
					
					
					case 5431437:
					{
						return this.m11;
					}
					
					
					case 5431436:
					{
						return this.m10;
					}
					
					
					case 5431216:
					{
						return this.m03;
					}
					
					
					case 5431215:
					{
						return this.m02;
					}
					
					
					case 5431214:
					{
						return this.m01;
					}
					
					
					case 5431213:
					{
						return this.m00;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 5431885:
					{
						return this.m33;
					}
					
					
					case 5431884:
					{
						return this.m32;
					}
					
					
					case 5431883:
					{
						return this.m31;
					}
					
					
					case 5431882:
					{
						return this.m30;
					}
					
					
					case 5431662:
					{
						return this.m23;
					}
					
					
					case 5431661:
					{
						return this.m22;
					}
					
					
					case 5431660:
					{
						return this.m21;
					}
					
					
					case 5431659:
					{
						return this.m20;
					}
					
					
					case 5431439:
					{
						return this.m13;
					}
					
					
					case 5431438:
					{
						return this.m12;
					}
					
					
					case 5431437:
					{
						return this.m11;
					}
					
					
					case 5431436:
					{
						return this.m10;
					}
					
					
					case 5431216:
					{
						return this.m03;
					}
					
					
					case 5431215:
					{
						return this.m02;
					}
					
					
					case 5431214:
					{
						return this.m01;
					}
					
					
					case 5431213:
					{
						return this.m00;
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return this.toString();
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("m33");
			baseArr.push("m32");
			baseArr.push("m31");
			baseArr.push("m30");
			baseArr.push("m23");
			baseArr.push("m22");
			baseArr.push("m21");
			baseArr.push("m20");
			baseArr.push("m13");
			baseArr.push("m12");
			baseArr.push("m11");
			baseArr.push("m10");
			baseArr.push("m03");
			baseArr.push("m02");
			baseArr.push("m01");
			baseArr.push("m00");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
		public override string ToString(){
			return this.toString();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hxmath.math._Matrix4x4 {
	public sealed class Matrix4x4_Impl_ {
		
		static Matrix4x4_Impl_() {
			unchecked {
				global::hxmath.math._Matrix4x4.Matrix4x4_Impl_.elementCount = 16;
			}
		}
		
		
		public static int elementCount;
		
		
		
		
		
		
		
		
		
		
		
		
		
		public static global::hxmath.math.Matrix4x4Default _new(double m00, double m10, double m20, double m30, double m01, double m11, double m21, double m31, double m02, double m12, double m22, double m32, double m03, double m13, double m23, double m33) {
			return ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33)) );
		}
		
		
		public static global::hxmath.math.Matrix4x4Default fromArray(global::Array<double> rawData) {
			unchecked {
				if (( rawData.length != 16 )) {
					throw global::haxe.lang.HaxeException.wrap("Invalid rawData.");
				}
				
				return ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(rawData[0], rawData[1], rawData[2], rawData[3], rawData[4], rawData[5], rawData[6], rawData[7], rawData[8], rawData[9], rawData[10], rawData[11], rawData[12], rawData[13], rawData[14], rawData[15])) );
			}
		}
		
		
		public static global::hxmath.math.Matrix4x4Default fromMatrix4x4Shape(global::hxmath.math.Matrix4x4Default other) {
			return ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(other.m00, other.m10, other.m20, other.m30, other.m01, other.m11, other.m21, other.m31, other.m02, other.m12, other.m22, other.m32, other.m03, other.m13, other.m23, other.m33)) );
		}
		
		
		public static global::hxmath.math.Vector4Default multiplyVector(global::hxmath.math.Matrix4x4Default a, global::hxmath.math.Vector4Default v) {
			return ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(( ( ( ( a.m00 * v.x ) + ( a.m10 * v.y ) ) + ( a.m20 * v.z ) ) + ( a.m30 * v.w ) ), ( ( ( ( a.m01 * v.x ) + ( a.m11 * v.y ) ) + ( a.m21 * v.z ) ) + ( a.m31 * v.w ) ), ( ( ( ( a.m02 * v.x ) + ( a.m12 * v.y ) ) + ( a.m22 * v.z ) ) + ( a.m32 * v.w ) ), ( ( ( ( a.m03 * v.x ) + ( a.m13 * v.y ) ) + ( a.m23 * v.z ) ) + ( a.m33 * v.w ) ))) );
		}
		
		
		public static global::hxmath.math.Matrix4x4Default multiply(global::hxmath.math.Matrix4x4Default a, global::hxmath.math.Matrix4x4Default b) {
			return ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(( ( ( ( a.m00 * b.m00 ) + ( a.m10 * b.m01 ) ) + ( a.m20 * b.m02 ) ) + ( a.m30 * b.m03 ) ), ( ( ( ( a.m00 * b.m10 ) + ( a.m10 * b.m11 ) ) + ( a.m20 * b.m12 ) ) + ( a.m30 * b.m13 ) ), ( ( ( ( a.m00 * b.m20 ) + ( a.m10 * b.m21 ) ) + ( a.m20 * b.m22 ) ) + ( a.m30 * b.m23 ) ), ( ( ( ( a.m00 * b.m30 ) + ( a.m10 * b.m31 ) ) + ( a.m20 * b.m32 ) ) + ( a.m30 * b.m33 ) ), ( ( ( ( a.m01 * b.m00 ) + ( a.m11 * b.m01 ) ) + ( a.m21 * b.m02 ) ) + ( a.m31 * b.m03 ) ), ( ( ( ( a.m01 * b.m10 ) + ( a.m11 * b.m11 ) ) + ( a.m21 * b.m12 ) ) + ( a.m31 * b.m13 ) ), ( ( ( ( a.m01 * b.m20 ) + ( a.m11 * b.m21 ) ) + ( a.m21 * b.m22 ) ) + ( a.m31 * b.m23 ) ), ( ( ( ( a.m01 * b.m30 ) + ( a.m11 * b.m31 ) ) + ( a.m21 * b.m32 ) ) + ( a.m31 * b.m33 ) ), ( ( ( ( a.m02 * b.m00 ) + ( a.m12 * b.m01 ) ) + ( a.m22 * b.m02 ) ) + ( a.m32 * b.m03 ) ), ( ( ( ( a.m02 * b.m10 ) + ( a.m12 * b.m11 ) ) + ( a.m22 * b.m12 ) ) + ( a.m32 * b.m13 ) ), ( ( ( ( a.m02 * b.m20 ) + ( a.m12 * b.m21 ) ) + ( a.m22 * b.m22 ) ) + ( a.m32 * b.m23 ) ), ( ( ( ( a.m02 * b.m30 ) + ( a.m12 * b.m31 ) ) + ( a.m22 * b.m32 ) ) + ( a.m32 * b.m33 ) ), ( ( ( ( a.m03 * b.m00 ) + ( a.m13 * b.m01 ) ) + ( a.m23 * b.m02 ) ) + ( a.m33 * b.m03 ) ), ( ( ( ( a.m03 * b.m10 ) + ( a.m13 * b.m11 ) ) + ( a.m23 * b.m12 ) ) + ( a.m33 * b.m13 ) ), ( ( ( ( a.m03 * b.m20 ) + ( a.m13 * b.m21 ) ) + ( a.m23 * b.m22 ) ) + ( a.m33 * b.m23 ) ), ( ( ( ( a.m03 * b.m30 ) + ( a.m13 * b.m31 ) ) + ( a.m23 * b.m32 ) ) + ( a.m33 * b.m33 ) ))) );
		}
		
		
		public static global::hxmath.math.Matrix4x4Default @add(global::hxmath.math.Matrix4x4Default a, global::hxmath.math.Matrix4x4Default b) {
			global::hxmath.math.Matrix4x4Default self = ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(a.m00, a.m10, a.m20, a.m30, a.m01, a.m11, a.m21, a.m31, a.m02, a.m12, a.m22, a.m32, a.m03, a.m13, a.m23, a.m33)) );
			self.m00 += b.m00;
			self.m10 += b.m10;
			self.m20 += b.m20;
			self.m30 += b.m30;
			self.m01 += b.m01;
			self.m11 += b.m11;
			self.m21 += b.m21;
			self.m31 += b.m31;
			self.m02 += b.m02;
			self.m12 += b.m12;
			self.m22 += b.m22;
			self.m32 += b.m32;
			self.m03 += b.m03;
			self.m13 += b.m13;
			self.m23 += b.m23;
			self.m33 += b.m33;
			return self;
		}
		
		
		public static global::hxmath.math.Matrix4x4Default subtract(global::hxmath.math.Matrix4x4Default a, global::hxmath.math.Matrix4x4Default b) {
			global::hxmath.math.Matrix4x4Default self = ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(a.m00, a.m10, a.m20, a.m30, a.m01, a.m11, a.m21, a.m31, a.m02, a.m12, a.m22, a.m32, a.m03, a.m13, a.m23, a.m33)) );
			self.m00 -= b.m00;
			self.m10 -= b.m10;
			self.m20 -= b.m20;
			self.m30 -= b.m30;
			self.m01 -= b.m01;
			self.m11 -= b.m11;
			self.m21 -= b.m21;
			self.m31 -= b.m31;
			self.m02 -= b.m02;
			self.m12 -= b.m12;
			self.m22 -= b.m22;
			self.m32 -= b.m32;
			self.m03 -= b.m03;
			self.m13 -= b.m13;
			self.m23 -= b.m23;
			self.m33 -= b.m33;
			return self;
		}
		
		
		public static global::hxmath.math.Matrix4x4Default negate(global::hxmath.math.Matrix4x4Default a) {
			return ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default( - (a.m00) ,  - (a.m10) ,  - (a.m20) ,  - (a.m30) ,  - (a.m01) ,  - (a.m11) ,  - (a.m21) ,  - (a.m31) ,  - (a.m02) ,  - (a.m12) ,  - (a.m22) ,  - (a.m32) ,  - (a.m03) ,  - (a.m13) ,  - (a.m23) ,  - (a.m33) )) );
		}
		
		
		public static bool @equals(global::hxmath.math.Matrix4x4Default a, global::hxmath.math.Matrix4x4Default b) {
			if ( ! ((( ( a == null ) && ( b == null ) ))) ) {
				if (( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( a != null ) && ( b != null ) ) && ( a.m00 == b.m00 ) ) && ( a.m10 == b.m10 ) ) && ( a.m20 == b.m20 ) ) && ( a.m30 == b.m30 ) ) && ( a.m01 == b.m01 ) ) && ( a.m11 == b.m11 ) ) && ( a.m21 == b.m21 ) ) && ( a.m31 == b.m31 ) ) && ( a.m02 == b.m02 ) ) && ( a.m12 == b.m12 ) ) && ( a.m22 == b.m22 ) ) && ( a.m32 == b.m32 ) ) && ( a.m03 == b.m03 ) ) && ( a.m13 == b.m13 ) ) && ( a.m23 == b.m23 ) )) {
					return ( a.m33 == b.m33 );
				}
				else {
					return false;
				}
				
			}
			else {
				return true;
			}
			
		}
		
		
		public static global::hxmath.math.Matrix4x4Default @set(global::hxmath.math.Matrix4x4Default this1, double m00, double m10, double m20, double m30, double m01, double m11, double m21, double m31, double m02, double m12, double m22, double m32, double m03, double m13, double m23, double m33) {
			global::hxmath.math.Matrix4x4Default self = this1;
			self.m00 = m00;
			self.m10 = m10;
			self.m20 = m20;
			self.m30 = m30;
			self.m01 = m01;
			self.m11 = m11;
			self.m21 = m21;
			self.m31 = m31;
			self.m02 = m02;
			self.m12 = m12;
			self.m22 = m22;
			self.m32 = m32;
			self.m03 = m03;
			self.m13 = m13;
			self.m23 = m23;
			self.m33 = m33;
			return self;
		}
		
		
		public static global::hxmath.math.Matrix4x4Default addWith(global::hxmath.math.Matrix4x4Default this1, global::hxmath.math.Matrix4x4Default a) {
			global::hxmath.math.Matrix4x4Default self = this1;
			self.m00 += a.m00;
			self.m10 += a.m10;
			self.m20 += a.m20;
			self.m30 += a.m30;
			self.m01 += a.m01;
			self.m11 += a.m11;
			self.m21 += a.m21;
			self.m31 += a.m31;
			self.m02 += a.m02;
			self.m12 += a.m12;
			self.m22 += a.m22;
			self.m32 += a.m32;
			self.m03 += a.m03;
			self.m13 += a.m13;
			self.m23 += a.m23;
			self.m33 += a.m33;
			return self;
		}
		
		
		public static global::hxmath.math.Matrix4x4Default subtractWith(global::hxmath.math.Matrix4x4Default this1, global::hxmath.math.Matrix4x4Default a) {
			global::hxmath.math.Matrix4x4Default self = this1;
			self.m00 -= a.m00;
			self.m10 -= a.m10;
			self.m20 -= a.m20;
			self.m30 -= a.m30;
			self.m01 -= a.m01;
			self.m11 -= a.m11;
			self.m21 -= a.m21;
			self.m31 -= a.m31;
			self.m02 -= a.m02;
			self.m12 -= a.m12;
			self.m22 -= a.m22;
			self.m32 -= a.m32;
			self.m03 -= a.m03;
			self.m13 -= a.m13;
			self.m23 -= a.m23;
			self.m33 -= a.m33;
			return self;
		}
		
		
		public static void copyTo(global::hxmath.math.Matrix4x4Default this1, global::hxmath.math.Matrix4x4Default target) {
			unchecked {
				global::hxmath.math.Matrix4x4Default self = this1;
				{
					int _g = 0;
					while (( _g < 16 )) {
						int i = _g++;
						{
							object tmp = null;
							switch (i) {
								case 0:
								{
									tmp = self.m00;
									break;
								}
								
								
								case 1:
								{
									tmp = self.m10;
									break;
								}
								
								
								case 2:
								{
									tmp = self.m20;
									break;
								}
								
								
								case 3:
								{
									tmp = self.m30;
									break;
								}
								
								
								case 4:
								{
									tmp = self.m01;
									break;
								}
								
								
								case 5:
								{
									tmp = self.m11;
									break;
								}
								
								
								case 6:
								{
									tmp = self.m21;
									break;
								}
								
								
								case 7:
								{
									tmp = self.m31;
									break;
								}
								
								
								case 8:
								{
									tmp = self.m02;
									break;
								}
								
								
								case 9:
								{
									tmp = self.m12;
									break;
								}
								
								
								case 10:
								{
									tmp = self.m22;
									break;
								}
								
								
								case 11:
								{
									tmp = self.m32;
									break;
								}
								
								
								case 12:
								{
									tmp = self.m03;
									break;
								}
								
								
								case 13:
								{
									tmp = self.m13;
									break;
								}
								
								
								case 14:
								{
									tmp = self.m23;
									break;
								}
								
								
								case 15:
								{
									tmp = self.m33;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double @value = ((double) (global::haxe.lang.Runtime.toDouble(tmp)) );
							switch (i) {
								case 0:
								{
									target.m00 = @value;
									break;
								}
								
								
								case 1:
								{
									target.m10 = @value;
									break;
								}
								
								
								case 2:
								{
									target.m20 = @value;
									break;
								}
								
								
								case 3:
								{
									target.m30 = @value;
									break;
								}
								
								
								case 4:
								{
									target.m01 = @value;
									break;
								}
								
								
								case 5:
								{
									target.m11 = @value;
									break;
								}
								
								
								case 6:
								{
									target.m21 = @value;
									break;
								}
								
								
								case 7:
								{
									target.m31 = @value;
									break;
								}
								
								
								case 8:
								{
									target.m02 = @value;
									break;
								}
								
								
								case 9:
								{
									target.m12 = @value;
									break;
								}
								
								
								case 10:
								{
									target.m22 = @value;
									break;
								}
								
								
								case 11:
								{
									target.m32 = @value;
									break;
								}
								
								
								case 12:
								{
									target.m03 = @value;
									break;
								}
								
								
								case 13:
								{
									target.m13 = @value;
									break;
								}
								
								
								case 14:
								{
									target.m23 = @value;
									break;
								}
								
								
								case 15:
								{
									target.m33 = @value;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
			}
		}
		
		
		public static void copyToShape(global::hxmath.math.Matrix4x4Default this1, object target) {
			global::hxmath.math.Matrix4x4Default self = this1;
			global::haxe.lang.Runtime.setField_f(target, "m00", 5431213, self.m00);
			global::haxe.lang.Runtime.setField_f(target, "m01", 5431214, self.m01);
			global::haxe.lang.Runtime.setField_f(target, "m02", 5431215, self.m02);
			global::haxe.lang.Runtime.setField_f(target, "m03", 5431216, self.m03);
			global::haxe.lang.Runtime.setField_f(target, "m10", 5431436, self.m10);
			global::haxe.lang.Runtime.setField_f(target, "m11", 5431437, self.m11);
			global::haxe.lang.Runtime.setField_f(target, "m12", 5431438, self.m12);
			global::haxe.lang.Runtime.setField_f(target, "m13", 5431439, self.m13);
			global::haxe.lang.Runtime.setField_f(target, "m20", 5431659, self.m20);
			global::haxe.lang.Runtime.setField_f(target, "m21", 5431660, self.m21);
			global::haxe.lang.Runtime.setField_f(target, "m22", 5431661, self.m22);
			global::haxe.lang.Runtime.setField_f(target, "m23", 5431662, self.m23);
			global::haxe.lang.Runtime.setField_f(target, "m30", 5431882, self.m30);
			global::haxe.lang.Runtime.setField_f(target, "m31", 5431883, self.m31);
			global::haxe.lang.Runtime.setField_f(target, "m32", 5431884, self.m32);
			global::haxe.lang.Runtime.setField_f(target, "m33", 5431885, self.m33);
		}
		
		
		public static void copyFromShape(global::hxmath.math.Matrix4x4Default this1, object source) {
			global::hxmath.math.Matrix4x4Default self = this1;
			self.m00 = global::haxe.lang.Runtime.getField_f(source, "m00", 5431213, true);
			self.m01 = global::haxe.lang.Runtime.getField_f(source, "m01", 5431214, true);
			self.m02 = global::haxe.lang.Runtime.getField_f(source, "m02", 5431215, true);
			self.m03 = global::haxe.lang.Runtime.getField_f(source, "m03", 5431216, true);
			self.m10 = global::haxe.lang.Runtime.getField_f(source, "m10", 5431436, true);
			self.m11 = global::haxe.lang.Runtime.getField_f(source, "m11", 5431437, true);
			self.m12 = global::haxe.lang.Runtime.getField_f(source, "m12", 5431438, true);
			self.m13 = global::haxe.lang.Runtime.getField_f(source, "m13", 5431439, true);
			self.m20 = global::haxe.lang.Runtime.getField_f(source, "m20", 5431659, true);
			self.m21 = global::haxe.lang.Runtime.getField_f(source, "m21", 5431660, true);
			self.m22 = global::haxe.lang.Runtime.getField_f(source, "m22", 5431661, true);
			self.m23 = global::haxe.lang.Runtime.getField_f(source, "m23", 5431662, true);
			self.m30 = global::haxe.lang.Runtime.getField_f(source, "m30", 5431882, true);
			self.m31 = global::haxe.lang.Runtime.getField_f(source, "m31", 5431883, true);
			self.m32 = global::haxe.lang.Runtime.getField_f(source, "m32", 5431884, true);
			self.m33 = global::haxe.lang.Runtime.getField_f(source, "m33", 5431885, true);
		}
		
		
		public static global::hxmath.math.Matrix4x4Default setRotateFromQuaternion(global::hxmath.math.Matrix4x4Default this1, global::hxmath.math.QuaternionDefault q) {
			unchecked {
				global::hxmath.math.Matrix4x4Default self = this1;
				double s = q.s;
				double x = q.x;
				double y = q.y;
				double z = q.z;
				self.m00 = ( 1 - ( 2 * (( ( y * y ) + ( z * z ) )) ) );
				self.m10 = ( 2 * (( ( x * y ) - ( s * z ) )) );
				self.m20 = ( 2 * (( ( s * y ) + ( x * z ) )) );
				self.m01 = ( 2 * (( ( x * y ) + ( s * z ) )) );
				self.m11 = ( 1 - ( 2 * (( ( x * x ) + ( z * z ) )) ) );
				self.m21 = ( 2 * (( ( y * z ) - ( s * x ) )) );
				self.m02 = ( 2 * (( ( x * z ) - ( s * y ) )) );
				self.m12 = ( 2 * (( ( y * z ) + ( s * x ) )) );
				self.m22 = ( 1 - ( 2 * (( ( x * x ) + ( y * y ) )) ) );
				return self;
			}
		}
		
		
		public static global::hxmath.math.Matrix4x4Default setTranslate(global::hxmath.math.Matrix4x4Default this1, double x, double y, double z) {
			global::hxmath.math.Matrix4x4Default self = this1;
			self.m30 = x;
			self.m31 = y;
			self.m32 = z;
			self.m33 = 1.0;
			return self;
		}
		
		
		public static global::hxmath.math.Matrix4x4Default clone(global::hxmath.math.Matrix4x4Default this1) {
			global::hxmath.math.Matrix4x4Default self = this1;
			return ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(self.m00, self.m10, self.m20, self.m30, self.m01, self.m11, self.m21, self.m31, self.m02, self.m12, self.m22, self.m32, self.m03, self.m13, self.m23, self.m33)) );
		}
		
		
		public static double getArrayElement(global::hxmath.math.Matrix4x4Default this1, int i) {
			unchecked {
				global::hxmath.math.Matrix4x4Default self = this1;
				switch (i) {
					case 0:
					{
						return self.m00;
					}
					
					
					case 1:
					{
						return self.m10;
					}
					
					
					case 2:
					{
						return self.m20;
					}
					
					
					case 3:
					{
						return self.m30;
					}
					
					
					case 4:
					{
						return self.m01;
					}
					
					
					case 5:
					{
						return self.m11;
					}
					
					
					case 6:
					{
						return self.m21;
					}
					
					
					case 7:
					{
						return self.m31;
					}
					
					
					case 8:
					{
						return self.m02;
					}
					
					
					case 9:
					{
						return self.m12;
					}
					
					
					case 10:
					{
						return self.m22;
					}
					
					
					case 11:
					{
						return self.m32;
					}
					
					
					case 12:
					{
						return self.m03;
					}
					
					
					case 13:
					{
						return self.m13;
					}
					
					
					case 14:
					{
						return self.m23;
					}
					
					
					case 15:
					{
						return self.m33;
					}
					
					
					default:
					{
						throw global::haxe.lang.HaxeException.wrap("Invalid element");
					}
					
				}
				
			}
		}
		
		
		public static double setArrayElement(global::hxmath.math.Matrix4x4Default this1, int i, double @value) {
			unchecked {
				global::hxmath.math.Matrix4x4Default self = this1;
				switch (i) {
					case 0:
					{
						return self.m00 = @value;
					}
					
					
					case 1:
					{
						return self.m10 = @value;
					}
					
					
					case 2:
					{
						return self.m20 = @value;
					}
					
					
					case 3:
					{
						return self.m30 = @value;
					}
					
					
					case 4:
					{
						return self.m01 = @value;
					}
					
					
					case 5:
					{
						return self.m11 = @value;
					}
					
					
					case 6:
					{
						return self.m21 = @value;
					}
					
					
					case 7:
					{
						return self.m31 = @value;
					}
					
					
					case 8:
					{
						return self.m02 = @value;
					}
					
					
					case 9:
					{
						return self.m12 = @value;
					}
					
					
					case 10:
					{
						return self.m22 = @value;
					}
					
					
					case 11:
					{
						return self.m32 = @value;
					}
					
					
					case 12:
					{
						return self.m03 = @value;
					}
					
					
					case 13:
					{
						return self.m13 = @value;
					}
					
					
					case 14:
					{
						return self.m23 = @value;
					}
					
					
					case 15:
					{
						return self.m33 = @value;
					}
					
					
					default:
					{
						throw global::haxe.lang.HaxeException.wrap("Invalid element");
					}
					
				}
				
			}
		}
		
		
		public static double getElement(global::hxmath.math.Matrix4x4Default this1, int column, int row) {
			unchecked {
				global::hxmath.math.Matrix4x4Default self = this1;
				object tmp = null;
				switch (( ( row * 4 ) + column )) {
					case 0:
					{
						tmp = self.m00;
						break;
					}
					
					
					case 1:
					{
						tmp = self.m10;
						break;
					}
					
					
					case 2:
					{
						tmp = self.m20;
						break;
					}
					
					
					case 3:
					{
						tmp = self.m30;
						break;
					}
					
					
					case 4:
					{
						tmp = self.m01;
						break;
					}
					
					
					case 5:
					{
						tmp = self.m11;
						break;
					}
					
					
					case 6:
					{
						tmp = self.m21;
						break;
					}
					
					
					case 7:
					{
						tmp = self.m31;
						break;
					}
					
					
					case 8:
					{
						tmp = self.m02;
						break;
					}
					
					
					case 9:
					{
						tmp = self.m12;
						break;
					}
					
					
					case 10:
					{
						tmp = self.m22;
						break;
					}
					
					
					case 11:
					{
						tmp = self.m32;
						break;
					}
					
					
					case 12:
					{
						tmp = self.m03;
						break;
					}
					
					
					case 13:
					{
						tmp = self.m13;
						break;
					}
					
					
					case 14:
					{
						tmp = self.m23;
						break;
					}
					
					
					case 15:
					{
						tmp = self.m33;
						break;
					}
					
					
					default:
					{
						throw global::haxe.lang.HaxeException.wrap("Invalid element");
					}
					
				}
				
				return ((double) (global::haxe.lang.Runtime.toDouble(tmp)) );
			}
		}
		
		
		public static double setElement(global::hxmath.math.Matrix4x4Default this1, int column, int row, double @value) {
			unchecked {
				global::hxmath.math.Matrix4x4Default self = this1;
				object tmp = null;
				switch (( ( row * 4 ) + column )) {
					case 0:
					{
						tmp = self.m00 = @value;
						break;
					}
					
					
					case 1:
					{
						tmp = self.m10 = @value;
						break;
					}
					
					
					case 2:
					{
						tmp = self.m20 = @value;
						break;
					}
					
					
					case 3:
					{
						tmp = self.m30 = @value;
						break;
					}
					
					
					case 4:
					{
						tmp = self.m01 = @value;
						break;
					}
					
					
					case 5:
					{
						tmp = self.m11 = @value;
						break;
					}
					
					
					case 6:
					{
						tmp = self.m21 = @value;
						break;
					}
					
					
					case 7:
					{
						tmp = self.m31 = @value;
						break;
					}
					
					
					case 8:
					{
						tmp = self.m02 = @value;
						break;
					}
					
					
					case 9:
					{
						tmp = self.m12 = @value;
						break;
					}
					
					
					case 10:
					{
						tmp = self.m22 = @value;
						break;
					}
					
					
					case 11:
					{
						tmp = self.m32 = @value;
						break;
					}
					
					
					case 12:
					{
						tmp = self.m03 = @value;
						break;
					}
					
					
					case 13:
					{
						tmp = self.m13 = @value;
						break;
					}
					
					
					case 14:
					{
						tmp = self.m23 = @value;
						break;
					}
					
					
					case 15:
					{
						tmp = self.m33 = @value;
						break;
					}
					
					
					default:
					{
						throw global::haxe.lang.HaxeException.wrap("Invalid element");
					}
					
				}
				
				return ((double) (global::haxe.lang.Runtime.toDouble(tmp)) );
			}
		}
		
		
		public static global::hxmath.math.Vector4Default col(global::hxmath.math.Matrix4x4Default this1, int index) {
			unchecked {
				global::hxmath.math.Matrix4x4Default self = this1;
				switch (index) {
					case 0:
					{
						return ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(self.m00, self.m01, self.m02, self.m03)) );
					}
					
					
					case 1:
					{
						return ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(self.m10, self.m11, self.m12, self.m13)) );
					}
					
					
					case 2:
					{
						return ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(self.m20, self.m21, self.m22, self.m23)) );
					}
					
					
					case 3:
					{
						return ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(self.m30, self.m31, self.m32, self.m33)) );
					}
					
					
					default:
					{
						throw global::haxe.lang.HaxeException.wrap("Invalid column");
					}
					
				}
				
			}
		}
		
		
		public static global::hxmath.math.Vector4Default row(global::hxmath.math.Matrix4x4Default this1, int index) {
			unchecked {
				global::hxmath.math.Matrix4x4Default self = this1;
				switch (index) {
					case 0:
					{
						return ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(self.m00, self.m10, self.m20, self.m30)) );
					}
					
					
					case 1:
					{
						return ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(self.m01, self.m11, self.m21, self.m31)) );
					}
					
					
					case 2:
					{
						return ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(self.m02, self.m12, self.m22, self.m32)) );
					}
					
					
					case 3:
					{
						return ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(self.m03, self.m13, self.m23, self.m33)) );
					}
					
					
					default:
					{
						throw global::haxe.lang.HaxeException.wrap("Invalid row");
					}
					
				}
				
			}
		}
		
		
		public static global::hxmath.math.Matrix4x4Default applyScalarFunc(global::hxmath.math.Matrix4x4Default this1, global::haxe.lang.Function func) {
			unchecked {
				global::hxmath.math.Matrix4x4Default self = this1;
				{
					int _g = 0;
					while (( _g < 16 )) {
						int i = _g++;
						{
							object tmp = null;
							switch (i) {
								case 0:
								{
									tmp = self.m00;
									break;
								}
								
								
								case 1:
								{
									tmp = self.m10;
									break;
								}
								
								
								case 2:
								{
									tmp = self.m20;
									break;
								}
								
								
								case 3:
								{
									tmp = self.m30;
									break;
								}
								
								
								case 4:
								{
									tmp = self.m01;
									break;
								}
								
								
								case 5:
								{
									tmp = self.m11;
									break;
								}
								
								
								case 6:
								{
									tmp = self.m21;
									break;
								}
								
								
								case 7:
								{
									tmp = self.m31;
									break;
								}
								
								
								case 8:
								{
									tmp = self.m02;
									break;
								}
								
								
								case 9:
								{
									tmp = self.m12;
									break;
								}
								
								
								case 10:
								{
									tmp = self.m22;
									break;
								}
								
								
								case 11:
								{
									tmp = self.m32;
									break;
								}
								
								
								case 12:
								{
									tmp = self.m03;
									break;
								}
								
								
								case 13:
								{
									tmp = self.m13;
									break;
								}
								
								
								case 14:
								{
									tmp = self.m23;
									break;
								}
								
								
								case 15:
								{
									tmp = self.m33;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double @value = ((double) (func.__hx_invoke1_f(((double) (global::haxe.lang.Runtime.toDouble(tmp)) ), global::haxe.lang.Runtime.undefined)) );
							switch (i) {
								case 0:
								{
									self.m00 = @value;
									break;
								}
								
								
								case 1:
								{
									self.m10 = @value;
									break;
								}
								
								
								case 2:
								{
									self.m20 = @value;
									break;
								}
								
								
								case 3:
								{
									self.m30 = @value;
									break;
								}
								
								
								case 4:
								{
									self.m01 = @value;
									break;
								}
								
								
								case 5:
								{
									self.m11 = @value;
									break;
								}
								
								
								case 6:
								{
									self.m21 = @value;
									break;
								}
								
								
								case 7:
								{
									self.m31 = @value;
									break;
								}
								
								
								case 8:
								{
									self.m02 = @value;
									break;
								}
								
								
								case 9:
								{
									self.m12 = @value;
									break;
								}
								
								
								case 10:
								{
									self.m22 = @value;
									break;
								}
								
								
								case 11:
								{
									self.m32 = @value;
									break;
								}
								
								
								case 12:
								{
									self.m03 = @value;
									break;
								}
								
								
								case 13:
								{
									self.m13 = @value;
									break;
								}
								
								
								case 14:
								{
									self.m23 = @value;
									break;
								}
								
								
								case 15:
								{
									self.m33 = @value;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				return self;
			}
		}
		
		
		public static global::hxmath.math.Matrix4x4Default applySubMatrixTranspose(global::hxmath.math.Matrix4x4Default this1) {
			global::hxmath.math.Matrix4x4Default self = this1;
			double temp = self.m01;
			self.m01 = self.m10;
			self.m10 = temp;
			temp = self.m02;
			self.m02 = self.m20;
			self.m20 = temp;
			temp = self.m12;
			self.m12 = self.m21;
			self.m21 = temp;
			return self;
		}
		
		
		public static global::hxmath.math.Matrix4x4Default applyInvertFrame(global::hxmath.math.Matrix4x4Default this1) {
			global::hxmath.math.Matrix4x4Default self = this1;
			{
				double temp = self.m01;
				self.m01 = self.m10;
				self.m10 = temp;
				temp = self.m02;
				self.m02 = self.m20;
				self.m20 = temp;
				temp = self.m12;
				self.m12 = self.m21;
				self.m21 = temp;
			}
			
			double tx =  - ((( ( ( self.m00 * self.m30 ) + ( self.m10 * self.m31 ) ) + ( self.m20 * self.m32 ) ))) ;
			double ty =  - ((( ( ( self.m01 * self.m30 ) + ( self.m11 * self.m31 ) ) + ( self.m21 * self.m32 ) ))) ;
			double tz =  - ((( ( ( self.m02 * self.m30 ) + ( self.m12 * self.m31 ) ) + ( self.m22 * self.m32 ) ))) ;
			self.m30 = tx;
			self.m31 = ty;
			self.m32 = tz;
			return self;
		}
		
		
		public static global::hxmath.math.Matrix4x4Default get_zero() {
			return ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) );
		}
		
		
		public static global::hxmath.math.Matrix4x4Default get_identity() {
			return ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) );
		}
		
		
		public static global::hxmath.math.Vector3Default get_t(global::hxmath.math.Matrix4x4Default this1) {
			global::hxmath.math.Matrix4x4Default self = this1;
			return ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(self.m30, self.m31, self.m32)) );
		}
		
		
		public static global::hxmath.math.Vector3Default set_t(global::hxmath.math.Matrix4x4Default this1, global::hxmath.math.Vector3Default t) {
			global::hxmath.math.Matrix4x4Default self = this1;
			self.m30 = t.x;
			self.m31 = t.y;
			self.m32 = t.z;
			return t;
		}
		
		
		public static global::hxmath.math.Matrix4x4Default get_transpose(global::hxmath.math.Matrix4x4Default this1) {
			global::hxmath.math.Matrix4x4Default self = this1;
			return ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(self.m00, self.m01, self.m02, self.m03, self.m10, self.m11, self.m12, self.m13, self.m20, self.m21, self.m22, self.m23, self.m30, self.m31, self.m32, self.m33)) );
		}
		
		
		public static double get_det(global::hxmath.math.Matrix4x4Default this1) {
			global::hxmath.math.Matrix4x4Default self = this1;
			double m00 = self.m00;
			double m10 = self.m10;
			double m20 = self.m20;
			double m30 = self.m30;
			double m01 = self.m01;
			double m11 = self.m11;
			double m21 = self.m21;
			double m31 = self.m31;
			double m02 = self.m02;
			double m12 = self.m12;
			double m22 = self.m22;
			double m32 = self.m32;
			double m03 = self.m03;
			double m13 = self.m13;
			double m23 = self.m23;
			double m33 = self.m33;
			return ( ( ( ( m00 * (( ( ( m11 * (( ( m22 * m33 ) - ( m32 * m23 ) )) ) - ( m21 * (( ( m12 * m33 ) - ( m32 * m13 ) )) ) ) + ( m31 * (( ( m12 * m23 ) - ( m22 * m13 ) )) ) )) ) - ( m10 * (( ( ( m01 * (( ( m22 * m33 ) - ( m32 * m23 ) )) ) - ( m21 * (( ( m02 * m33 ) - ( m32 * m03 ) )) ) ) + ( m31 * (( ( m02 * m23 ) - ( m22 * m03 ) )) ) )) ) ) + ( m20 * (( ( ( m01 * (( ( m12 * m33 ) - ( m32 * m13 ) )) ) - ( m11 * (( ( m02 * m33 ) - ( m32 * m03 ) )) ) ) + ( m31 * (( ( m02 * m13 ) - ( m12 * m03 ) )) ) )) ) ) - ( m30 * (( ( ( m01 * (( ( m12 * m23 ) - ( m22 * m13 ) )) ) - ( m11 * (( ( m02 * m23 ) - ( m22 * m03 ) )) ) ) + ( m21 * (( ( m02 * m13 ) - ( m12 * m03 ) )) ) )) ) );
		}
		
		
		public static global::hxmath.math.Matrix3x3Default get_subMatrix(global::hxmath.math.Matrix4x4Default this1) {
			global::hxmath.math.Matrix4x4Default self = this1;
			return ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(self.m00, self.m10, self.m20, self.m01, self.m11, self.m21, self.m02, self.m12, self.m22)) );
		}
		
		
	}
}


