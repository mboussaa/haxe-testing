// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hxmath.frames._Frame3 {
	public sealed class Frame3_Impl_ {
		
		
		
		public static global::hxmath.frames.IFrame3 _new(global::hxmath.math.Vector3Default offset, global::hxmath.math.QuaternionDefault orientation) {
			global::hxmath.frames.IFrame3 this1 = new global::hxmath.frames.Frame3Default(offset, orientation, default(global::haxe.lang.Null<bool>));
			return ((global::hxmath.frames.IFrame3) (this1) );
		}
		
		
		public static global::hxmath.math.Matrix4x4Default calculateMatrix(global::hxmath.math.Matrix4x4Default matrix, global::hxmath.math.Vector3Default offset, global::hxmath.math.QuaternionDefault orientation) {
			unchecked {
				{
					double s = orientation.s;
					double x = orientation.x;
					double y = orientation.y;
					double z = orientation.z;
					matrix.m00 = ( 1 - ( 2 * (( ( y * y ) + ( z * z ) )) ) );
					matrix.m10 = ( 2 * (( ( x * y ) - ( s * z ) )) );
					matrix.m20 = ( 2 * (( ( s * y ) + ( x * z ) )) );
					matrix.m01 = ( 2 * (( ( x * y ) + ( s * z ) )) );
					matrix.m11 = ( 1 - ( 2 * (( ( x * x ) + ( z * z ) )) ) );
					matrix.m21 = ( 2 * (( ( y * z ) - ( s * x ) )) );
					matrix.m02 = ( 2 * (( ( x * z ) - ( s * y ) )) );
					matrix.m12 = ( 2 * (( ( y * z ) + ( s * x ) )) );
					matrix.m22 = ( 1 - ( 2 * (( ( x * x ) + ( y * y ) )) ) );
				}
				
				{
					double x1 = offset.x;
					double y1 = offset.y;
					double z1 = offset.z;
					matrix.m30 = x1;
					matrix.m31 = y1;
					matrix.m32 = z1;
					matrix.m33 = 1.0;
				}
				
				return matrix;
			}
		}
		
		
		public static global::hxmath.frames.IFrame3 lerp(global::hxmath.frames.IFrame3 frameA, global::hxmath.frames.IFrame3 frameB, double t) {
			global::hxmath.math.Vector3Default a = frameA.get_offset();
			global::hxmath.math.Vector3Default b = frameB.get_offset();
			global::hxmath.math.Vector3Default tmp = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(( ( (( 1.0 - t )) * a.x ) + ( t * b.x ) ), ( ( (( 1.0 - t )) * a.y ) + ( t * b.y ) ), ( ( (( 1.0 - t )) * a.z ) + ( t * b.z ) ))) );
			global::hxmath.math.QuaternionDefault a1 = frameA.get_orientation();
			global::hxmath.math.QuaternionDefault b1 = frameB.get_orientation();
			double s = ( 1.0 - t );
			global::hxmath.math.QuaternionDefault self = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(a1.s, a1.x, a1.y, a1.z)) );
			self.s *= s;
			self.x *= s;
			self.y *= s;
			self.z *= s;
			global::hxmath.math.QuaternionDefault self1 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(b1.s, b1.x, b1.y, b1.z)) );
			self1.s *= t;
			self1.x *= t;
			self1.y *= t;
			self1.z *= t;
			global::hxmath.math.QuaternionDefault self2 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(self.s, self.x, self.y, self.z)) );
			self2.s += self1.s;
			self2.x += self1.x;
			self2.y += self1.y;
			self2.z += self1.z;
			return global::hxmath.frames._Frame3.Frame3_Impl_._new(tmp, self2);
		}
		
		
		public static global::hxmath.frames.IFrame3 concat(global::hxmath.frames.IFrame3 this1, global::hxmath.frames.IFrame3 other) {
			global::hxmath.frames.IFrame3 self = this1;
			global::hxmath.frames.IFrame3 self1 = ((global::hxmath.frames.IFrame3) (global::hxmath.frames._Frame3.Frame3_Impl_._new(self.get_offset(), self.get_orientation())) );
			global::hxmath.math.QuaternionDefault this2 = self1.get_orientation();
			global::hxmath.math.Vector3Default u = other.get_offset();
			global::hxmath.math.QuaternionDefault self2 = ((global::hxmath.math.QuaternionDefault) (this2) );
			double a = ( 2.0 * (( ( ( self2.x * u.x ) + ( self2.y * u.y ) ) + ( self2.z * u.z ) )) );
			double b = ( ( ( ( self2.s * self2.s ) - ( self2.x * self2.x ) ) - ( self2.y * self2.y ) ) - ( self2.z * self2.z ) );
			double c = ( 2.0 * self2.s );
			global::hxmath.math.Vector3Default this3 = new global::hxmath.math.Vector3Default(( ( ( a * self2.x ) + ( b * u.x ) ) + ( c * (( ( self2.y * u.z ) - ( self2.z * u.y ) )) ) ), ( ( ( a * self2.y ) + ( b * u.y ) ) + ( c * (( ( self2.z * u.x ) - ( self2.x * u.z ) )) ) ), ( ( ( a * self2.z ) + ( b * u.z ) ) + ( c * (( ( self2.x * u.y ) - ( self2.y * u.x ) )) ) ));
			global::hxmath.math.Vector3Default a1 = self1.get_offset();
			global::hxmath.math.Vector3Default self3 = ((global::hxmath.math.Vector3Default) (this3) );
			self3.x += a1.x;
			self3.y += a1.y;
			self3.z += a1.z;
			global::hxmath.math.QuaternionDefault a2 = self1.get_orientation();
			global::hxmath.math.QuaternionDefault b1 = other.get_orientation();
			global::hxmath.math.QuaternionDefault self4 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(( ( ( ( a2.s * b1.s ) - ( a2.x * b1.x ) ) - ( a2.y * b1.y ) ) - ( a2.z * b1.z ) ), ( ( ( ( a2.s * b1.x ) + ( b1.s * a2.x ) ) + ( a2.y * b1.z ) ) - ( a2.z * b1.y ) ), ( ( ( ( a2.s * b1.y ) + ( b1.s * a2.y ) ) + ( a2.z * b1.x ) ) - ( a2.x * b1.z ) ), ( ( ( ( a2.s * b1.z ) + ( b1.s * a2.z ) ) + ( a2.x * b1.y ) ) - ( a2.y * b1.x ) ))) );
			double _g = ( 1.0 / global::System.Math.Sqrt(((double) (( ( ( ( self4.s * self4.s ) + ( self4.x * self4.x ) ) + ( self4.y * self4.y ) ) + ( self4.z * self4.z ) )) )) );
			global::hxmath.math.QuaternionDefault self5 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(self4.s, self4.x, self4.y, self4.z)) );
			self5.s *= _g;
			self5.x *= _g;
			self5.y *= _g;
			self5.z *= _g;
			self1.set_orientation(self5);
			self1.set_offset(self3);
			return self1;
		}
		
		
		public static global::hxmath.frames.IFrame3 concatWith(global::hxmath.frames.IFrame3 this1, global::hxmath.frames.IFrame3 other) {
			global::hxmath.frames.IFrame3 self = this1;
			global::hxmath.math.QuaternionDefault this2 = self.get_orientation();
			global::hxmath.math.Vector3Default u = other.get_offset();
			global::hxmath.math.QuaternionDefault self1 = ((global::hxmath.math.QuaternionDefault) (this2) );
			double a = ( 2.0 * (( ( ( self1.x * u.x ) + ( self1.y * u.y ) ) + ( self1.z * u.z ) )) );
			double b = ( ( ( ( self1.s * self1.s ) - ( self1.x * self1.x ) ) - ( self1.y * self1.y ) ) - ( self1.z * self1.z ) );
			double c = ( 2.0 * self1.s );
			global::hxmath.math.Vector3Default this3 = new global::hxmath.math.Vector3Default(( ( ( a * self1.x ) + ( b * u.x ) ) + ( c * (( ( self1.y * u.z ) - ( self1.z * u.y ) )) ) ), ( ( ( a * self1.y ) + ( b * u.y ) ) + ( c * (( ( self1.z * u.x ) - ( self1.x * u.z ) )) ) ), ( ( ( a * self1.z ) + ( b * u.z ) ) + ( c * (( ( self1.x * u.y ) - ( self1.y * u.x ) )) ) ));
			global::hxmath.math.Vector3Default a1 = self.get_offset();
			global::hxmath.math.Vector3Default self2 = ((global::hxmath.math.Vector3Default) (this3) );
			self2.x += a1.x;
			self2.y += a1.y;
			self2.z += a1.z;
			global::hxmath.math.QuaternionDefault a2 = self.get_orientation();
			global::hxmath.math.QuaternionDefault b1 = other.get_orientation();
			global::hxmath.math.QuaternionDefault self3 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(( ( ( ( a2.s * b1.s ) - ( a2.x * b1.x ) ) - ( a2.y * b1.y ) ) - ( a2.z * b1.z ) ), ( ( ( ( a2.s * b1.x ) + ( b1.s * a2.x ) ) + ( a2.y * b1.z ) ) - ( a2.z * b1.y ) ), ( ( ( ( a2.s * b1.y ) + ( b1.s * a2.y ) ) + ( a2.z * b1.x ) ) - ( a2.x * b1.z ) ), ( ( ( ( a2.s * b1.z ) + ( b1.s * a2.z ) ) + ( a2.x * b1.y ) ) - ( a2.y * b1.x ) ))) );
			double _g = ( 1.0 / global::System.Math.Sqrt(((double) (( ( ( ( self3.s * self3.s ) + ( self3.x * self3.x ) ) + ( self3.y * self3.y ) ) + ( self3.z * self3.z ) )) )) );
			global::hxmath.math.QuaternionDefault self4 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(self3.s, self3.x, self3.y, self3.z)) );
			self4.s *= _g;
			self4.x *= _g;
			self4.y *= _g;
			self4.z *= _g;
			self.set_orientation(self4);
			self.set_offset(self2);
			return self;
		}
		
		
		public static global::hxmath.math.Vector3Default transformFrom(global::hxmath.frames.IFrame3 this1, global::hxmath.math.Vector3Default p) {
			global::hxmath.frames.IFrame3 self = this1;
			global::hxmath.math.QuaternionDefault self1 = ((global::hxmath.math.QuaternionDefault) (self.get_orientation()) );
			double a = ( 2.0 * (( ( ( self1.x * p.x ) + ( self1.y * p.y ) ) + ( self1.z * p.z ) )) );
			double b = ( ( ( ( self1.s * self1.s ) - ( self1.x * self1.x ) ) - ( self1.y * self1.y ) ) - ( self1.z * self1.z ) );
			double c = ( 2.0 * self1.s );
			global::hxmath.math.Vector3Default this2 = new global::hxmath.math.Vector3Default(( ( ( a * self1.x ) + ( b * p.x ) ) + ( c * (( ( self1.y * p.z ) - ( self1.z * p.y ) )) ) ), ( ( ( a * self1.y ) + ( b * p.y ) ) + ( c * (( ( self1.z * p.x ) - ( self1.x * p.z ) )) ) ), ( ( ( a * self1.z ) + ( b * p.z ) ) + ( c * (( ( self1.x * p.y ) - ( self1.y * p.x ) )) ) ));
			global::hxmath.math.Vector3Default a1 = self.get_offset();
			global::hxmath.math.Vector3Default self2 = ((global::hxmath.math.Vector3Default) (this2) );
			self2.x += a1.x;
			self2.y += a1.y;
			self2.z += a1.z;
			return self2;
		}
		
		
		public static global::hxmath.math.Vector3Default transformTo(global::hxmath.frames.IFrame3 this1, global::hxmath.math.Vector3Default p) {
			global::hxmath.frames.IFrame3 self = this1;
			global::hxmath.math.QuaternionDefault self1 = ((global::hxmath.math.QuaternionDefault) (self.get_orientation()) );
			global::hxmath.math.QuaternionDefault self2 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(self1.s, self1.x, self1.y, self1.z)) );
			self2.x =  - (self2.x) ;
			self2.y =  - (self2.y) ;
			self2.z =  - (self2.z) ;
			global::hxmath.math.QuaternionDefault self3 = ((global::hxmath.math.QuaternionDefault) (self2) );
			double length = global::System.Math.Sqrt(((double) (( ( ( ( self3.s * self3.s ) + ( self3.x * self3.x ) ) + ( self3.y * self3.y ) ) + ( self3.z * self3.z ) )) ));
			if (( length > 0.0 )) {
				double k = ( 1.0 / length );
				{
					self3.s *= k;
					self3.x *= k;
					self3.y *= k;
					self3.z *= k;
				}
				
			}
			
			global::hxmath.math.QuaternionDefault this2 = self3;
			global::hxmath.math.Vector3Default b = self.get_offset();
			global::hxmath.math.Vector3Default self4 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(p.x, p.y, p.z)) );
			self4.x -= b.x;
			self4.y -= b.y;
			self4.z -= b.z;
			global::hxmath.math.QuaternionDefault self5 = ((global::hxmath.math.QuaternionDefault) (this2) );
			double a = ( 2.0 * (( ( ( self5.x * self4.x ) + ( self5.y * self4.y ) ) + ( self5.z * self4.z ) )) );
			double b1 = ( ( ( ( self5.s * self5.s ) - ( self5.x * self5.x ) ) - ( self5.y * self5.y ) ) - ( self5.z * self5.z ) );
			double c = ( 2.0 * self5.s );
			return ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(( ( ( a * self5.x ) + ( b1 * self4.x ) ) + ( c * (( ( self5.y * self4.z ) - ( self5.z * self4.y ) )) ) ), ( ( ( a * self5.y ) + ( b1 * self4.y ) ) + ( c * (( ( self5.z * self4.x ) - ( self5.x * self4.z ) )) ) ), ( ( ( a * self5.z ) + ( b1 * self4.z ) ) + ( c * (( ( self5.x * self4.y ) - ( self5.y * self4.x ) )) ) ))) );
		}
		
		
		public static global::hxmath.math.Vector3Default linearTransformFrom(global::hxmath.frames.IFrame3 this1, global::hxmath.math.Vector3Default v) {
			global::hxmath.frames.IFrame3 self = this1;
			global::hxmath.math.QuaternionDefault self1 = ((global::hxmath.math.QuaternionDefault) (self.get_orientation()) );
			double a = ( 2.0 * (( ( ( self1.x * v.x ) + ( self1.y * v.y ) ) + ( self1.z * v.z ) )) );
			double b = ( ( ( ( self1.s * self1.s ) - ( self1.x * self1.x ) ) - ( self1.y * self1.y ) ) - ( self1.z * self1.z ) );
			double c = ( 2.0 * self1.s );
			return ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(( ( ( a * self1.x ) + ( b * v.x ) ) + ( c * (( ( self1.y * v.z ) - ( self1.z * v.y ) )) ) ), ( ( ( a * self1.y ) + ( b * v.y ) ) + ( c * (( ( self1.z * v.x ) - ( self1.x * v.z ) )) ) ), ( ( ( a * self1.z ) + ( b * v.z ) ) + ( c * (( ( self1.x * v.y ) - ( self1.y * v.x ) )) ) ))) );
		}
		
		
		public static global::hxmath.math.Vector3Default linearTransformTo(global::hxmath.frames.IFrame3 this1, global::hxmath.math.Vector3Default v) {
			global::hxmath.frames.IFrame3 self = this1;
			global::hxmath.math.QuaternionDefault self1 = ((global::hxmath.math.QuaternionDefault) (self.get_orientation()) );
			global::hxmath.math.QuaternionDefault self2 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(self1.s, self1.x, self1.y, self1.z)) );
			self2.x =  - (self2.x) ;
			self2.y =  - (self2.y) ;
			self2.z =  - (self2.z) ;
			global::hxmath.math.QuaternionDefault self3 = ((global::hxmath.math.QuaternionDefault) (self2) );
			double length = global::System.Math.Sqrt(((double) (( ( ( ( self3.s * self3.s ) + ( self3.x * self3.x ) ) + ( self3.y * self3.y ) ) + ( self3.z * self3.z ) )) ));
			if (( length > 0.0 )) {
				double k = ( 1.0 / length );
				{
					self3.s *= k;
					self3.x *= k;
					self3.y *= k;
					self3.z *= k;
				}
				
			}
			
			global::hxmath.math.QuaternionDefault self4 = ((global::hxmath.math.QuaternionDefault) (self3) );
			double a = ( 2.0 * (( ( ( self4.x * v.x ) + ( self4.y * v.y ) ) + ( self4.z * v.z ) )) );
			double b = ( ( ( ( self4.s * self4.s ) - ( self4.x * self4.x ) ) - ( self4.y * self4.y ) ) - ( self4.z * self4.z ) );
			double c = ( 2.0 * self4.s );
			return ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(( ( ( a * self4.x ) + ( b * v.x ) ) + ( c * (( ( self4.y * v.z ) - ( self4.z * v.y ) )) ) ), ( ( ( a * self4.y ) + ( b * v.y ) ) + ( c * (( ( self4.z * v.x ) - ( self4.x * v.z ) )) ) ), ( ( ( a * self4.z ) + ( b * v.z ) ) + ( c * (( ( self4.x * v.y ) - ( self4.y * v.x ) )) ) ))) );
		}
		
		
		public static global::hxmath.frames.IFrame3 inverse(global::hxmath.frames.IFrame3 this1) {
			global::hxmath.frames.IFrame3 self = this1;
			global::hxmath.math.QuaternionDefault self1 = ((global::hxmath.math.QuaternionDefault) (self.get_orientation()) );
			global::hxmath.math.QuaternionDefault self2 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(self1.s, self1.x, self1.y, self1.z)) );
			self2.x =  - (self2.x) ;
			self2.y =  - (self2.y) ;
			self2.z =  - (self2.z) ;
			global::hxmath.math.QuaternionDefault self3 = ((global::hxmath.math.QuaternionDefault) (self2) );
			double length = global::System.Math.Sqrt(((double) (( ( ( ( self3.s * self3.s ) + ( self3.x * self3.x ) ) + ( self3.y * self3.y ) ) + ( self3.z * self3.z ) )) ));
			if (( length > 0.0 )) {
				double k = ( 1.0 / length );
				{
					self3.s *= k;
					self3.x *= k;
					self3.y *= k;
					self3.z *= k;
				}
				
			}
			
			global::hxmath.math.Vector3Default u = self.get_offset();
			double a = ( 2.0 * (( ( ( self3.x * u.x ) + ( self3.y * u.y ) ) + ( self3.z * u.z ) )) );
			double b = ( ( ( ( self3.s * self3.s ) - ( self3.x * self3.x ) ) - ( self3.y * self3.y ) ) - ( self3.z * self3.z ) );
			double c = ( 2.0 * self3.s );
			global::hxmath.math.Vector3Default self4 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(( ( ( a * self3.x ) + ( b * u.x ) ) + ( c * (( ( self3.y * u.z ) - ( self3.z * u.y ) )) ) ), ( ( ( a * self3.y ) + ( b * u.y ) ) + ( c * (( ( self3.z * u.x ) - ( self3.x * u.z ) )) ) ), ( ( ( a * self3.z ) + ( b * u.z ) ) + ( c * (( ( self3.x * u.y ) - ( self3.y * u.x ) )) ) ))) );
			self4.x =  - (self4.x) ;
			self4.y =  - (self4.y) ;
			self4.z =  - (self4.z) ;
			return global::hxmath.frames._Frame3.Frame3_Impl_._new(self4, self3);
		}
		
		
		public static global::hxmath.frames.IFrame3 clone(global::hxmath.frames.IFrame3 this1) {
			global::hxmath.frames.IFrame3 self = this1;
			return global::hxmath.frames._Frame3.Frame3_Impl_._new(self.get_offset(), self.get_orientation());
		}
		
		
		public static global::hxmath.math.Matrix3x3Default get_linearMatrix(global::hxmath.frames.IFrame3 this1) {
			global::hxmath.frames.IFrame3 self = this1;
			global::hxmath.math.Matrix4x4Default self1 = ((global::hxmath.math.Matrix4x4Default) (self.get_matrix()) );
			return ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(self1.m00, self1.m10, self1.m20, self1.m01, self1.m11, self1.m21, self1.m02, self1.m12, self1.m22)) );
		}
		
		
	}
}


