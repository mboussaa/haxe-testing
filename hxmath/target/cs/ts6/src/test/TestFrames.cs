// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace test {
	public class FlxObjectMock : global::haxe.lang.HxObject {
		
		public FlxObjectMock(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public FlxObjectMock() {
			global::test.FlxObjectMock.__hx_ctor_test_FlxObjectMock(this);
		}
		
		
		public static void __hx_ctor_test_FlxObjectMock(global::test.FlxObjectMock __temp_me59) {
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::test.FlxObjectMock(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::test.FlxObjectMock();
		}
		
		
		public double x;
		
		public double y;
		
		public double angle;
		
		public virtual double set_x(double x) {
			return this.x = x;
		}
		
		
		public virtual double set_y(double y) {
			return this.y = y;
		}
		
		
		public virtual double set_angle(double angle) {
			return this.angle = angle;
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 585253843:
					{
						if (handleProperties) {
							this.set_angle(@value);
							return @value;
						}
						else {
							this.angle = ((double) (@value) );
							return @value;
						}
						
					}
					
					
					case 121:
					{
						if (handleProperties) {
							this.set_y(@value);
							return @value;
						}
						else {
							this.y = ((double) (@value) );
							return @value;
						}
						
					}
					
					
					case 120:
					{
						if (handleProperties) {
							this.set_x(@value);
							return @value;
						}
						else {
							this.x = ((double) (@value) );
							return @value;
						}
						
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 585253843:
					{
						if (handleProperties) {
							this.set_angle(((double) (global::haxe.lang.Runtime.toDouble(@value)) ));
							return @value;
						}
						else {
							this.angle = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
							return @value;
						}
						
					}
					
					
					case 121:
					{
						if (handleProperties) {
							this.set_y(((double) (global::haxe.lang.Runtime.toDouble(@value)) ));
							return @value;
						}
						else {
							this.y = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
							return @value;
						}
						
					}
					
					
					case 120:
					{
						if (handleProperties) {
							this.set_x(((double) (global::haxe.lang.Runtime.toDouble(@value)) ));
							return @value;
						}
						else {
							this.x = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
							return @value;
						}
						
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1239190582:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_angle", 1239190582)) );
					}
					
					
					case 2049940316:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_y", 2049940316)) );
					}
					
					
					case 2049940315:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_x", 2049940315)) );
					}
					
					
					case 585253843:
					{
						return this.angle;
					}
					
					
					case 121:
					{
						return this.y;
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 585253843:
					{
						return this.angle;
					}
					
					
					case 121:
					{
						return this.y;
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1239190582:
					{
						return this.set_angle(((double) (global::haxe.lang.Runtime.toDouble(dynargs[0])) ));
					}
					
					
					case 2049940316:
					{
						return this.set_y(((double) (global::haxe.lang.Runtime.toDouble(dynargs[0])) ));
					}
					
					
					case 2049940315:
					{
						return this.set_x(((double) (global::haxe.lang.Runtime.toDouble(dynargs[0])) ));
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("angle");
			baseArr.push("y");
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace test {
	public class TestFrames : global::test.MathTestCase {
		
		public TestFrames(global::haxe.lang.EmptyObject empty) : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
		}
		
		
		public TestFrames(object posInfos) : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
			global::test.TestFrames.__hx_ctor_test_TestFrames(this, posInfos);
		}
		
		
		public static void __hx_ctor_test_TestFrames(global::test.TestFrames __temp_me60, object posInfos) {
			global::test.MathTestCase.__hx_ctor_test_MathTestCase(__temp_me60, posInfos);
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::test.TestFrames(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::test.TestFrames(((object) (arr[0]) ));
		}
		
		
		public virtual void testFrame2Concat() {
			unchecked {
				global::hxmath.math.Vector2Default originA = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 1.0)) );
				global::hxmath.frames.IFrame2 a = global::hxmath.frames._Frame2.Frame2_Impl_._new(originA, 90.0);
				global::hxmath.frames.IFrame2 b = global::hxmath.frames._Frame2.Frame2_Impl_._new(((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 0.0)) ), 90.0);
				global::hxmath.frames.IFrame2 self = ((global::hxmath.frames.IFrame2) (global::hxmath.frames._Frame2.Frame2_Impl_._new(a.get_offset(), a.get_angleDegrees())) );
				global::hxmath.math.Matrix3x2Default self1 = ((global::hxmath.math.Matrix3x2Default) (self.get_matrix()) );
				global::hxmath.math.Matrix2x2Default m = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(self1.a, self1.b, self1.c, self1.d)) );
				global::hxmath.math.Vector2Default v = b.get_offset();
				global::hxmath.math.Vector2Default this1 = new global::hxmath.math.Vector2Default(( ( m.a * v.x ) + ( m.b * v.y ) ), ( ( m.c * v.x ) + ( m.d * v.y ) ));
				global::hxmath.math.Vector2Default a1 = self.get_offset();
				global::hxmath.math.Vector2Default self2 = ((global::hxmath.math.Vector2Default) (this1) );
				self2.x += a1.x;
				self2.y += a1.y;
				double x = ( self.get_angleDegrees() + b.get_angleDegrees() );
				self.set_angleDegrees(( (( x < 0 )) ? (( 360 - (  - (x)  % 360 ) )) : (( x % 360 )) ));
				self.set_offset(self2);
				global::hxmath.math.Vector2Default p = b.get_offset();
				global::hxmath.math.Matrix3x2Default m1 = a.get_matrix();
				global::hxmath.math.Matrix2x2Default m2 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(m1.a, m1.b, m1.c, m1.d)) );
				global::hxmath.math.Vector2Default a2 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( m2.a * p.x ) + ( m2.b * p.y ) ), ( ( m2.c * p.x ) + ( m2.d * p.y ) ))) );
				global::hxmath.math.Vector2Default b1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(m1.tx, m1.ty)) );
				global::hxmath.math.Vector2Default self3 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a2.x, a2.y)) );
				self3.x += b1.x;
				self3.y += b1.y;
				global::hxmath.math.Vector2Default a3 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 1.0)) );
				global::hxmath.math.Vector2Default self4 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a3.x, a3.y)) );
				self4.x += originA.x;
				self4.y += originA.y;
				this.assertTrue(( ( ( self3 == null ) && ( self4 == null ) ) || ( ( ( ( self3 != null ) && ( self4 != null ) ) && ( self3.x == self4.x ) ) && ( self3.y == self4.y ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFrame2Concat", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (46) )}));
				global::hxmath.math.Vector2Default a4 = self.get_offset();
				global::hxmath.math.Vector2Default a5 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 1.0)) );
				global::hxmath.math.Vector2Default self5 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a5.x, a5.y)) );
				self5.x += originA.x;
				self5.y += originA.y;
				this.assertTrue(( ( ( a4 == null ) && ( self5 == null ) ) || ( ( ( ( a4 != null ) && ( self5 != null ) ) && ( a4.x == self5.x ) ) && ( a4.y == self5.y ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFrame2Concat", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (49) )}));
				this.assertEquals<double>(((double) (self.get_angleDegrees()) ), ((double) (180.0) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFrame2Concat", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (50) )})) ));
				global::hxmath.math.Matrix3x2Default m3 = self.get_matrix();
				global::hxmath.math.Vector2Default v1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 0.0)) );
				global::hxmath.math.Matrix2x2Default m4 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(m3.a, m3.b, m3.c, m3.d)) );
				global::hxmath.math.Vector2Default a6 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( m4.a * v1.x ) + ( m4.b * v1.y ) ), ( ( m4.c * v1.x ) + ( m4.d * v1.y ) ))) );
				global::hxmath.math.Vector2Default b2 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(m3.tx, m3.ty)) );
				global::hxmath.math.Vector2Default self6 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a6.x, a6.y)) );
				self6.x += b2.x;
				self6.y += b2.y;
				global::hxmath.math.Vector2Default a7 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 1.0)) );
				global::hxmath.math.Vector2Default self7 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a7.x, a7.y)) );
				self7.x += originA.x;
				self7.y += originA.y;
				this.assertTrue(( ( ( self6 == null ) && ( self7 == null ) ) || ( ( ( ( self6 != null ) && ( self7 != null ) ) && ( self6.x == self7.x ) ) && ( self6.y == self7.y ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFrame2Concat", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (53) )}));
			}
		}
		
		
		public virtual void testFrame3Concat() {
			unchecked {
				global::hxmath.math.Vector3Default originA = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(1.0, 1.0, 0.0)) );
				global::hxmath.math.Vector3Default axis = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 0.0, 1.0)) );
				double angleRadians = ( ( global::Math.PI / 180 ) * 90.0 );
				double cosHalfAngle = global::System.Math.Cos(((double) (( angleRadians / 2.0 )) ));
				double sinHalfAngle = global::System.Math.Sin(((double) (( angleRadians / 2.0 )) ));
				global::hxmath.frames.IFrame3 a = global::hxmath.frames._Frame3.Frame3_Impl_._new(originA, ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(cosHalfAngle, ( sinHalfAngle * axis.x ), ( sinHalfAngle * axis.y ), ( sinHalfAngle * axis.z ))) ));
				global::hxmath.math.Vector3Default tmp = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(1.0, 0.0, 0.0)) );
				global::hxmath.math.Vector3Default axis1 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 0.0, 1.0)) );
				double angleRadians1 = ( ( global::Math.PI / 180 ) * 90.0 );
				double cosHalfAngle1 = global::System.Math.Cos(((double) (( angleRadians1 / 2.0 )) ));
				double sinHalfAngle1 = global::System.Math.Sin(((double) (( angleRadians1 / 2.0 )) ));
				global::hxmath.frames.IFrame3 b = global::hxmath.frames._Frame3.Frame3_Impl_._new(tmp, ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(cosHalfAngle1, ( sinHalfAngle1 * axis1.x ), ( sinHalfAngle1 * axis1.y ), ( sinHalfAngle1 * axis1.z ))) ));
				global::hxmath.frames.IFrame3 self = ((global::hxmath.frames.IFrame3) (global::hxmath.frames._Frame3.Frame3_Impl_._new(a.get_offset(), a.get_orientation())) );
				global::hxmath.math.QuaternionDefault this1 = self.get_orientation();
				global::hxmath.math.Vector3Default u = b.get_offset();
				global::hxmath.math.QuaternionDefault self1 = ((global::hxmath.math.QuaternionDefault) (this1) );
				double a1 = ( 2.0 * (( ( ( self1.x * u.x ) + ( self1.y * u.y ) ) + ( self1.z * u.z ) )) );
				double b1 = ( ( ( ( self1.s * self1.s ) - ( self1.x * self1.x ) ) - ( self1.y * self1.y ) ) - ( self1.z * self1.z ) );
				double c = ( 2.0 * self1.s );
				global::hxmath.math.Vector3Default this2 = new global::hxmath.math.Vector3Default(( ( ( a1 * self1.x ) + ( b1 * u.x ) ) + ( c * (( ( self1.y * u.z ) - ( self1.z * u.y ) )) ) ), ( ( ( a1 * self1.y ) + ( b1 * u.y ) ) + ( c * (( ( self1.z * u.x ) - ( self1.x * u.z ) )) ) ), ( ( ( a1 * self1.z ) + ( b1 * u.z ) ) + ( c * (( ( self1.x * u.y ) - ( self1.y * u.x ) )) ) ));
				global::hxmath.math.Vector3Default a2 = self.get_offset();
				global::hxmath.math.Vector3Default self2 = ((global::hxmath.math.Vector3Default) (this2) );
				self2.x += a2.x;
				self2.y += a2.y;
				self2.z += a2.z;
				global::hxmath.math.QuaternionDefault a3 = self.get_orientation();
				global::hxmath.math.QuaternionDefault b2 = b.get_orientation();
				global::hxmath.math.QuaternionDefault self3 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(( ( ( ( a3.s * b2.s ) - ( a3.x * b2.x ) ) - ( a3.y * b2.y ) ) - ( a3.z * b2.z ) ), ( ( ( ( a3.s * b2.x ) + ( b2.s * a3.x ) ) + ( a3.y * b2.z ) ) - ( a3.z * b2.y ) ), ( ( ( ( a3.s * b2.y ) + ( b2.s * a3.y ) ) + ( a3.z * b2.x ) ) - ( a3.x * b2.z ) ), ( ( ( ( a3.s * b2.z ) + ( b2.s * a3.z ) ) + ( a3.x * b2.y ) ) - ( a3.y * b2.x ) ))) );
				double _g = ( 1.0 / global::System.Math.Sqrt(((double) (( ( ( ( self3.s * self3.s ) + ( self3.x * self3.x ) ) + ( self3.y * self3.y ) ) + ( self3.z * self3.z ) )) )) );
				global::hxmath.math.QuaternionDefault self4 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(self3.s, self3.x, self3.y, self3.z)) );
				self4.s *= _g;
				self4.x *= _g;
				self4.y *= _g;
				self4.z *= _g;
				self.set_orientation(self4);
				self.set_offset(self2);
				global::hxmath.math.Vector3Default p = b.get_offset();
				global::hxmath.math.QuaternionDefault self5 = ((global::hxmath.math.QuaternionDefault) (a.get_orientation()) );
				double a4 = ( 2.0 * (( ( ( self5.x * p.x ) + ( self5.y * p.y ) ) + ( self5.z * p.z ) )) );
				double b3 = ( ( ( ( self5.s * self5.s ) - ( self5.x * self5.x ) ) - ( self5.y * self5.y ) ) - ( self5.z * self5.z ) );
				double c1 = ( 2.0 * self5.s );
				global::hxmath.math.Vector3Default this3 = new global::hxmath.math.Vector3Default(( ( ( a4 * self5.x ) + ( b3 * p.x ) ) + ( c1 * (( ( self5.y * p.z ) - ( self5.z * p.y ) )) ) ), ( ( ( a4 * self5.y ) + ( b3 * p.y ) ) + ( c1 * (( ( self5.z * p.x ) - ( self5.x * p.z ) )) ) ), ( ( ( a4 * self5.z ) + ( b3 * p.z ) ) + ( c1 * (( ( self5.x * p.y ) - ( self5.y * p.x ) )) ) ));
				global::hxmath.math.Vector3Default a5 = a.get_offset();
				global::hxmath.math.Vector3Default self6 = ((global::hxmath.math.Vector3Default) (this3) );
				self6.x += a5.x;
				self6.y += a5.y;
				self6.z += a5.z;
				global::hxmath.math.Vector3Default a6 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 1.0, 0.0)) );
				global::hxmath.math.Vector3Default self7 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(a6.x, a6.y, a6.z)) );
				self7.x += originA.x;
				self7.y += originA.y;
				self7.z += originA.z;
				global::hxmath.math.Vector3Default self8 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(self6.x, self6.y, self6.z)) );
				self8.x -= self7.x;
				self8.y -= self7.y;
				self8.z -= self7.z;
				global::hxmath.math.Vector3Default self9 = ((global::hxmath.math.Vector3Default) (self8) );
				this.assertApproxEquals(0.0, global::System.Math.Sqrt(((double) (( ( ( self9.x * self9.x ) + ( self9.y * self9.y ) ) + ( self9.z * self9.z ) )) )), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFrame3Concat", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (63) )}));
				global::hxmath.math.Vector3Default a7 = self.get_offset();
				global::hxmath.math.Vector3Default a8 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 1.0, 0.0)) );
				global::hxmath.math.Vector3Default self10 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(a8.x, a8.y, a8.z)) );
				self10.x += originA.x;
				self10.y += originA.y;
				self10.z += originA.z;
				global::hxmath.math.Vector3Default self11 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(a7.x, a7.y, a7.z)) );
				self11.x -= self10.x;
				self11.y -= self10.y;
				self11.z -= self10.z;
				global::hxmath.math.Vector3Default self12 = ((global::hxmath.math.Vector3Default) (self11) );
				this.assertApproxEquals(0.0, global::System.Math.Sqrt(((double) (( ( ( self12.x * self12.x ) + ( self12.y * self12.y ) ) + ( self12.z * self12.z ) )) )), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFrame3Concat", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (66) )}));
				global::hxmath.math.QuaternionDefault a9 = self.get_orientation();
				global::hxmath.math.QuaternionDefault b4 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(((double) (1) ), ((double) (0) ), ((double) (0) ), ((double) (0) ))) );
				this.assertApproxEquals(0.0, ( ( ( ( a9.s * b4.s ) + ( a9.x * b4.x ) ) + ( a9.y * b4.y ) ) + ( a9.z * b4.z ) ), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFrame3Concat", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (69) )}));
				global::hxmath.math.Vector3Default p1 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 0.0, 0.0)) );
				global::hxmath.math.QuaternionDefault self13 = ((global::hxmath.math.QuaternionDefault) (self.get_orientation()) );
				double a10 = ( 2.0 * (( ( ( self13.x * p1.x ) + ( self13.y * p1.y ) ) + ( self13.z * p1.z ) )) );
				double b5 = ( ( ( ( self13.s * self13.s ) - ( self13.x * self13.x ) ) - ( self13.y * self13.y ) ) - ( self13.z * self13.z ) );
				double c2 = ( 2.0 * self13.s );
				global::hxmath.math.Vector3Default this4 = new global::hxmath.math.Vector3Default(( ( ( a10 * self13.x ) + ( b5 * p1.x ) ) + ( c2 * (( ( self13.y * p1.z ) - ( self13.z * p1.y ) )) ) ), ( ( ( a10 * self13.y ) + ( b5 * p1.y ) ) + ( c2 * (( ( self13.z * p1.x ) - ( self13.x * p1.z ) )) ) ), ( ( ( a10 * self13.z ) + ( b5 * p1.z ) ) + ( c2 * (( ( self13.x * p1.y ) - ( self13.y * p1.x ) )) ) ));
				global::hxmath.math.Vector3Default a11 = self.get_offset();
				global::hxmath.math.Vector3Default self14 = ((global::hxmath.math.Vector3Default) (this4) );
				self14.x += a11.x;
				self14.y += a11.y;
				self14.z += a11.z;
				global::hxmath.math.Vector3Default a12 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 1.0, 0.0)) );
				global::hxmath.math.Vector3Default self15 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(a12.x, a12.y, a12.z)) );
				self15.x += originA.x;
				self15.y += originA.y;
				self15.z += originA.z;
				global::hxmath.math.Vector3Default self16 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(self14.x, self14.y, self14.z)) );
				self16.x -= self15.x;
				self16.y -= self15.y;
				self16.z -= self15.z;
				global::hxmath.math.Vector3Default self17 = ((global::hxmath.math.Vector3Default) (self16) );
				this.assertApproxEquals(0.0, global::System.Math.Sqrt(((double) (( ( ( self17.x * self17.x ) + ( self17.y * self17.y ) ) + ( self17.z * self17.z ) )) )), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFrame3Concat", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (72) )}));
			}
		}
		
		
		public virtual void testFrame2LinearAffineTransform() {
			unchecked {
				global::hxmath.math.Vector2Default originA = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 1.0)) );
				global::hxmath.frames.IFrame2 a = global::hxmath.frames._Frame2.Frame2_Impl_._new(originA, 90.0);
				global::hxmath.math.Vector2Default testInA = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 1.0)) );
				global::hxmath.math.Matrix3x2Default self = ((global::hxmath.math.Matrix3x2Default) (a.get_matrix()) );
				global::hxmath.math.Matrix2x2Default m = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(self.a, self.b, self.c, self.d)) );
				global::hxmath.math.Vector2Default testLinearInOuter = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( m.a * testInA.x ) + ( m.b * testInA.y ) ), ( ( m.c * testInA.x ) + ( m.d * testInA.y ) ))) );
				global::hxmath.math.Vector2Default expectedLinearResult = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(-1.0, 1.0)) );
				global::hxmath.math.Vector2Default self1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(testLinearInOuter.x, testLinearInOuter.y)) );
				self1.x -= expectedLinearResult.x;
				self1.y -= expectedLinearResult.y;
				global::hxmath.math.Vector2Default self2 = ((global::hxmath.math.Vector2Default) (self1) );
				this.assertApproxEquals(global::System.Math.Sqrt(((double) (( ( self2.x * self2.x ) + ( self2.y * self2.y ) )) )), 0.0, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFrame2LinearAffineTransform", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (95) )}));
				global::hxmath.math.Matrix3x2Default m1 = a.get_matrix();
				global::hxmath.math.Matrix2x2Default m2 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(m1.a, m1.b, m1.c, m1.d)) );
				global::hxmath.math.Vector2Default a1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( m2.a * testInA.x ) + ( m2.b * testInA.y ) ), ( ( m2.c * testInA.x ) + ( m2.d * testInA.y ) ))) );
				global::hxmath.math.Vector2Default b = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(m1.tx, m1.ty)) );
				global::hxmath.math.Vector2Default self3 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a1.x, a1.y)) );
				self3.x += b.x;
				self3.y += b.y;
				global::hxmath.math.Vector2Default self4 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(expectedLinearResult.x, expectedLinearResult.y)) );
				self4.x += originA.x;
				self4.y += originA.y;
				global::hxmath.math.Vector2Default self5 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self3.x, self3.y)) );
				self5.x -= self4.x;
				self5.y -= self4.y;
				global::hxmath.math.Vector2Default self6 = ((global::hxmath.math.Vector2Default) (self5) );
				this.assertApproxEquals(global::System.Math.Sqrt(((double) (( ( self6.x * self6.x ) + ( self6.y * self6.y ) )) )), 0.0, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFrame2LinearAffineTransform", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (100) )}));
				global::hxmath.math.Matrix3x2Default self7 = ((global::hxmath.math.Matrix3x2Default) (a.get_matrix()) );
				global::hxmath.math.Matrix2x2Default self8 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(self7.a, self7.b, self7.c, self7.d)) );
				global::hxmath.math.Vector2Default testLinearBackToInner = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( self8.a * testLinearInOuter.x ) + ( self8.c * testLinearInOuter.y ) ), ( ( self8.b * testLinearInOuter.x ) + ( self8.d * testLinearInOuter.y ) ))) );
				global::hxmath.math.Vector2Default self9 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(testLinearBackToInner.x, testLinearBackToInner.y)) );
				self9.x -= testInA.x;
				self9.y -= testInA.y;
				global::hxmath.math.Vector2Default self10 = ((global::hxmath.math.Vector2Default) (self9) );
				this.assertApproxEquals(global::System.Math.Sqrt(((double) (( ( self10.x * self10.x ) + ( self10.y * self10.y ) )) )), 0.0, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFrame2LinearAffineTransform", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (104) )}));
				global::hxmath.math.Matrix3x2Default self11 = ((global::hxmath.math.Matrix3x2Default) (a.get_matrix()) );
				global::hxmath.math.Matrix2x2Default this1 = new global::hxmath.math.Matrix2x2Default(self11.a, self11.b, self11.c, self11.d);
				global::hxmath.math.Vector2Default b1 = a.get_offset();
				global::hxmath.math.Vector2Default self12 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self3.x, self3.y)) );
				self12.x -= b1.x;
				self12.y -= b1.y;
				global::hxmath.math.Matrix2x2Default self13 = ((global::hxmath.math.Matrix2x2Default) (this1) );
				global::hxmath.math.Vector2Default testAffineBackToInner = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( self13.a * self12.x ) + ( self13.c * self12.y ) ), ( ( self13.b * self12.x ) + ( self13.d * self12.y ) ))) );
				global::hxmath.math.Vector2Default self14 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(testAffineBackToInner.x, testAffineBackToInner.y)) );
				self14.x -= testInA.x;
				self14.y -= testInA.y;
				global::hxmath.math.Vector2Default self15 = ((global::hxmath.math.Vector2Default) (self14) );
				this.assertApproxEquals(global::System.Math.Sqrt(((double) (( ( self15.x * self15.x ) + ( self15.y * self15.y ) )) )), 0.0, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFrame2LinearAffineTransform", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (108) )}));
			}
		}
		
		
		public virtual void testFrame2Inverse() {
			unchecked {
				global::hxmath.frames.IFrame2 a = global::hxmath.frames._Frame2.Frame2_Impl_._new(((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 1.0)) ), 90.0);
				global::hxmath.math.Matrix3x2Default self = ((global::hxmath.math.Matrix3x2Default) (a.get_matrix()) );
				global::hxmath.math.Matrix2x2Default this1 = new global::hxmath.math.Matrix2x2Default(self.a, self.b, self.c, self.d);
				global::hxmath.math.Vector2Default v = a.get_offset();
				global::hxmath.math.Matrix2x2Default self1 = ((global::hxmath.math.Matrix2x2Default) (this1) );
				global::hxmath.math.Vector2Default self2 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( self1.a * v.x ) + ( self1.c * v.y ) ), ( ( self1.b * v.x ) + ( self1.d * v.y ) ))) );
				self2.x =  - (self2.x) ;
				self2.y =  - (self2.y) ;
				global::hxmath.frames.IFrame2 aInv = global::hxmath.frames._Frame2.Frame2_Impl_._new(self2,  - (a.get_angleDegrees()) );
				global::hxmath.frames.IFrame2 self3 = ((global::hxmath.frames.IFrame2) (global::hxmath.frames._Frame2.Frame2_Impl_._new(a.get_offset(), a.get_angleDegrees())) );
				global::hxmath.math.Matrix3x2Default self4 = ((global::hxmath.math.Matrix3x2Default) (self3.get_matrix()) );
				global::hxmath.math.Matrix2x2Default m = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(self4.a, self4.b, self4.c, self4.d)) );
				global::hxmath.math.Vector2Default v1 = aInv.get_offset();
				global::hxmath.math.Vector2Default this2 = new global::hxmath.math.Vector2Default(( ( m.a * v1.x ) + ( m.b * v1.y ) ), ( ( m.c * v1.x ) + ( m.d * v1.y ) ));
				global::hxmath.math.Vector2Default a1 = self3.get_offset();
				global::hxmath.math.Vector2Default self5 = ((global::hxmath.math.Vector2Default) (this2) );
				self5.x += a1.x;
				self5.y += a1.y;
				double x = ( self3.get_angleDegrees() + aInv.get_angleDegrees() );
				self3.set_angleDegrees(( (( x < 0 )) ? (( 360 - (  - (x)  % 360 ) )) : (( x % 360 )) ));
				self3.set_offset(self5);
				global::hxmath.math.Vector2Default a2 = self3.get_offset();
				global::hxmath.math.Vector2Default b = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 0.0)) );
				global::hxmath.math.Vector2Default self6 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a2.x, a2.y)) );
				self6.x -= b.x;
				self6.y -= b.y;
				global::hxmath.math.Vector2Default self7 = ((global::hxmath.math.Vector2Default) (self6) );
				this.assertApproxEquals(global::System.Math.Sqrt(((double) (( ( self7.x * self7.x ) + ( self7.y * self7.y ) )) )), 0.0, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFrame2Inverse", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (121) )}));
				global::hxmath.frames.IFrame2 self8 = ((global::hxmath.frames.IFrame2) (global::hxmath.frames._Frame2.Frame2_Impl_._new(aInv.get_offset(), aInv.get_angleDegrees())) );
				global::hxmath.math.Matrix3x2Default self9 = ((global::hxmath.math.Matrix3x2Default) (self8.get_matrix()) );
				global::hxmath.math.Matrix2x2Default m1 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(self9.a, self9.b, self9.c, self9.d)) );
				global::hxmath.math.Vector2Default v2 = a.get_offset();
				global::hxmath.math.Vector2Default this3 = new global::hxmath.math.Vector2Default(( ( m1.a * v2.x ) + ( m1.b * v2.y ) ), ( ( m1.c * v2.x ) + ( m1.d * v2.y ) ));
				global::hxmath.math.Vector2Default a3 = self8.get_offset();
				global::hxmath.math.Vector2Default self10 = ((global::hxmath.math.Vector2Default) (this3) );
				self10.x += a3.x;
				self10.y += a3.y;
				double x1 = ( self8.get_angleDegrees() + a.get_angleDegrees() );
				self8.set_angleDegrees(( (( x1 < 0 )) ? (( 360 - (  - (x1)  % 360 ) )) : (( x1 % 360 )) ));
				self8.set_offset(self10);
				global::hxmath.math.Vector2Default a4 = self8.get_offset();
				global::hxmath.math.Vector2Default b1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 0.0)) );
				global::hxmath.math.Vector2Default self11 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a4.x, a4.y)) );
				self11.x -= b1.x;
				self11.y -= b1.y;
				global::hxmath.math.Vector2Default self12 = ((global::hxmath.math.Vector2Default) (self11) );
				this.assertApproxEquals(global::System.Math.Sqrt(((double) (( ( self12.x * self12.x ) + ( self12.y * self12.y ) )) )), 0.0, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFrame2Inverse", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (122) )}));
				global::hxmath.frames.IFrame2 self13 = ((global::hxmath.frames.IFrame2) (global::hxmath.frames._Frame2.Frame2_Impl_._new(a.get_offset(), a.get_angleDegrees())) );
				global::hxmath.math.Matrix3x2Default self14 = ((global::hxmath.math.Matrix3x2Default) (self13.get_matrix()) );
				global::hxmath.math.Matrix2x2Default m2 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(self14.a, self14.b, self14.c, self14.d)) );
				global::hxmath.math.Vector2Default v3 = aInv.get_offset();
				global::hxmath.math.Vector2Default this4 = new global::hxmath.math.Vector2Default(( ( m2.a * v3.x ) + ( m2.b * v3.y ) ), ( ( m2.c * v3.x ) + ( m2.d * v3.y ) ));
				global::hxmath.math.Vector2Default a5 = self13.get_offset();
				global::hxmath.math.Vector2Default self15 = ((global::hxmath.math.Vector2Default) (this4) );
				self15.x += a5.x;
				self15.y += a5.y;
				double x2 = ( self13.get_angleDegrees() + aInv.get_angleDegrees() );
				self13.set_angleDegrees(( (( x2 < 0 )) ? (( 360 - (  - (x2)  % 360 ) )) : (( x2 % 360 )) ));
				self13.set_offset(self15);
				this.assertApproxEquals(self13.get_angleDegrees(), 0.0, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFrame2Inverse", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (123) )}));
				global::hxmath.frames.IFrame2 self16 = ((global::hxmath.frames.IFrame2) (global::hxmath.frames._Frame2.Frame2_Impl_._new(aInv.get_offset(), aInv.get_angleDegrees())) );
				global::hxmath.math.Matrix3x2Default self17 = ((global::hxmath.math.Matrix3x2Default) (self16.get_matrix()) );
				global::hxmath.math.Matrix2x2Default m3 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(self17.a, self17.b, self17.c, self17.d)) );
				global::hxmath.math.Vector2Default v4 = a.get_offset();
				global::hxmath.math.Vector2Default this5 = new global::hxmath.math.Vector2Default(( ( m3.a * v4.x ) + ( m3.b * v4.y ) ), ( ( m3.c * v4.x ) + ( m3.d * v4.y ) ));
				global::hxmath.math.Vector2Default a6 = self16.get_offset();
				global::hxmath.math.Vector2Default self18 = ((global::hxmath.math.Vector2Default) (this5) );
				self18.x += a6.x;
				self18.y += a6.y;
				double x3 = ( self16.get_angleDegrees() + a.get_angleDegrees() );
				self16.set_angleDegrees(( (( x3 < 0 )) ? (( 360 - (  - (x3)  % 360 ) )) : (( x3 % 360 )) ));
				self16.set_offset(self18);
				this.assertApproxEquals(self16.get_angleDegrees(), 0.0, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFrame2Inverse", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (124) )}));
			}
		}
		
		
		public virtual void testFlxSpriteFrame2() {
			unchecked {
				global::test.FlxObjectMock dummySprite = new global::test.FlxObjectMock();
				global::hxmath.frames.IFrame2 frame = new global::hxmath.frames.adapters.FlxSpriteFrame2(((object) (dummySprite) ));
				frame.set_offset(((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 0.0)) ));
				frame.set_angleDegrees(((double) (90) ));
				this.assertEquals<double>(((double) (frame.get_offset().x) ), ((double) (dummySprite.x) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFlxSpriteFrame2", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (134) )})) ));
				this.assertEquals<double>(((double) (frame.get_offset().y) ), ((double) (dummySprite.y) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFlxSpriteFrame2", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (135) )})) ));
				this.assertEquals<double>(((double) (frame.get_angleDegrees()) ), ((double) (dummySprite.angle) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFlxSpriteFrame2", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (136) )})) ));
			}
		}
		
		
		public virtual void testLerpFrame2() {
			unchecked {
				global::hxmath.frames.IFrame2 frameA = global::hxmath.frames._Frame2.Frame2_Impl_._new(((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 0.0)) ), 330.0);
				global::hxmath.frames.IFrame2 frameB = global::hxmath.frames._Frame2.Frame2_Impl_._new(((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 1.0)) ), 60.0);
				global::hxmath.math.Vector2Default a = frameA.get_offset();
				global::hxmath.math.Vector2Default b = frameB.get_offset();
				global::hxmath.math.Vector2Default tmp = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( 0.5 * a.x ) + ( 0.5 * b.x ) ), ( ( 0.5 * a.y ) + ( 0.5 * b.y ) ))) );
				double a1 = frameA.get_angleDegrees();
				double b1 = frameB.get_angleDegrees();
				if (( global::System.Math.Abs(((double) (( a1 - b1 )) )) > 180.0 )) {
					if (( a1 < b1 )) {
						a1 += ((double) (360) );
					}
					else {
						b1 += ((double) (360) );
					}
					
				}
				
				double x = ( ( 0.5 * a1 ) + ( 0.5 * b1 ) );
				global::hxmath.frames.IFrame2 frameC = global::hxmath.frames._Frame2.Frame2_Impl_._new(tmp, ( (( x < 0 )) ? (( 360 - (  - (x)  % 360 ) )) : (( x % 360 )) ));
				global::hxmath.math.Vector2Default a2 = frameB.get_offset();
				global::hxmath.math.Vector2Default b2 = frameA.get_offset();
				global::hxmath.math.Vector2Default tmp1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( 0.5 * a2.x ) + ( 0.5 * b2.x ) ), ( ( 0.5 * a2.y ) + ( 0.5 * b2.y ) ))) );
				double a3 = frameB.get_angleDegrees();
				double b3 = frameA.get_angleDegrees();
				if (( global::System.Math.Abs(((double) (( a3 - b3 )) )) > 180.0 )) {
					if (( a3 < b3 )) {
						a3 += ((double) (360) );
					}
					else {
						b3 += ((double) (360) );
					}
					
				}
				
				double x1 = ( ( 0.5 * a3 ) + ( 0.5 * b3 ) );
				global::hxmath.frames.IFrame2 frameC2 = global::hxmath.frames._Frame2.Frame2_Impl_._new(tmp1, ( (( x1 < 0 )) ? (( 360 - (  - (x1)  % 360 ) )) : (( x1 % 360 )) ));
				global::hxmath.math.Vector2Default a4 = frameC.get_offset();
				global::hxmath.math.Vector2Default b4 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.5, 0.5)) );
				global::hxmath.math.Vector2Default self = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a4.x, a4.y)) );
				self.x -= b4.x;
				self.y -= b4.y;
				global::hxmath.math.Vector2Default self1 = ((global::hxmath.math.Vector2Default) (self) );
				this.assertApproxEquals(global::System.Math.Sqrt(((double) (( ( self1.x * self1.x ) + ( self1.y * self1.y ) )) )), 0.0, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLerpFrame2", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (147) )}));
				this.assertApproxEquals(frameC.get_angleDegrees(), 15.0, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLerpFrame2", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (148) )}));
				global::hxmath.math.Vector2Default a5 = frameC2.get_offset();
				global::hxmath.math.Vector2Default b5 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.5, 0.5)) );
				global::hxmath.math.Vector2Default self2 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a5.x, a5.y)) );
				self2.x -= b5.x;
				self2.y -= b5.y;
				global::hxmath.math.Vector2Default self3 = ((global::hxmath.math.Vector2Default) (self2) );
				this.assertApproxEquals(global::System.Math.Sqrt(((double) (( ( self3.x * self3.x ) + ( self3.y * self3.y ) )) )), 0.0, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLerpFrame2", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (149) )}));
				this.assertApproxEquals(frameC2.get_angleDegrees(), 15.0, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLerpFrame2", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (150) )}));
				global::hxmath.math.Vector2Default a6 = frameA.get_offset();
				global::hxmath.math.Vector2Default b6 = frameB.get_offset();
				global::hxmath.math.Vector2Default tmp2 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( 0.666666666666666741 * a6.x ) + ( 0.333333333333333315 * b6.x ) ), ( ( 0.666666666666666741 * a6.y ) + ( 0.333333333333333315 * b6.y ) ))) );
				double a7 = frameA.get_angleDegrees();
				double b7 = frameB.get_angleDegrees();
				if (( global::System.Math.Abs(((double) (( a7 - b7 )) )) > 180.0 )) {
					if (( a7 < b7 )) {
						a7 += ((double) (360) );
					}
					else {
						b7 += ((double) (360) );
					}
					
				}
				
				double x2 = ( ( 0.666666666666666741 * a7 ) + ( 0.333333333333333315 * b7 ) );
				global::hxmath.frames.IFrame2 frameD = global::hxmath.frames._Frame2.Frame2_Impl_._new(tmp2, ( (( x2 < 0 )) ? (( 360 - (  - (x2)  % 360 ) )) : (( x2 % 360 )) ));
				global::hxmath.math.Vector2Default a8 = frameB.get_offset();
				global::hxmath.math.Vector2Default b8 = frameA.get_offset();
				global::hxmath.math.Vector2Default tmp3 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( 0.33333333333333337 * a8.x ) + ( 0.66666666666666663 * b8.x ) ), ( ( 0.33333333333333337 * a8.y ) + ( 0.66666666666666663 * b8.y ) ))) );
				double a9 = frameB.get_angleDegrees();
				double b9 = frameA.get_angleDegrees();
				if (( global::System.Math.Abs(((double) (( a9 - b9 )) )) > 180.0 )) {
					if (( a9 < b9 )) {
						a9 += ((double) (360) );
					}
					else {
						b9 += ((double) (360) );
					}
					
				}
				
				double x3 = ( ( 0.33333333333333337 * a9 ) + ( 0.66666666666666663 * b9 ) );
				global::hxmath.frames.IFrame2 frameD2 = global::hxmath.frames._Frame2.Frame2_Impl_._new(tmp3, ( (( x3 < 0 )) ? (( 360 - (  - (x3)  % 360 ) )) : (( x3 % 360 )) ));
				global::hxmath.math.Vector2Default a10 = frameD.get_offset();
				global::hxmath.math.Vector2Default b10 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.66666666666666663, 0.333333333333333315)) );
				global::hxmath.math.Vector2Default self4 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a10.x, a10.y)) );
				self4.x -= b10.x;
				self4.y -= b10.y;
				global::hxmath.math.Vector2Default self5 = ((global::hxmath.math.Vector2Default) (self4) );
				this.assertApproxEquals(global::System.Math.Sqrt(((double) (( ( self5.x * self5.x ) + ( self5.y * self5.y ) )) )), 0.0, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLerpFrame2", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (154) )}));
				this.assertApproxEquals(frameD.get_angleDegrees(), 0.0, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLerpFrame2", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (155) )}));
				global::hxmath.math.Vector2Default a11 = frameD2.get_offset();
				global::hxmath.math.Vector2Default b11 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.66666666666666663, 0.333333333333333315)) );
				global::hxmath.math.Vector2Default self6 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a11.x, a11.y)) );
				self6.x -= b11.x;
				self6.y -= b11.y;
				global::hxmath.math.Vector2Default self7 = ((global::hxmath.math.Vector2Default) (self6) );
				this.assertApproxEquals(global::System.Math.Sqrt(((double) (( ( self7.x * self7.x ) + ( self7.y * self7.y ) )) )), 0.0, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLerpFrame2", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (156) )}));
				this.assertApproxEquals(frameD2.get_angleDegrees(), 0.0, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLerpFrame2", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (157) )}));
				global::hxmath.math.Vector2Default a12 = frameA.get_offset();
				global::hxmath.math.Vector2Default b12 = frameB.get_offset();
				global::hxmath.math.Vector2Default tmp4 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( 0.33333333333333337 * a12.x ) + ( 0.66666666666666663 * b12.x ) ), ( ( 0.33333333333333337 * a12.y ) + ( 0.66666666666666663 * b12.y ) ))) );
				double a13 = frameA.get_angleDegrees();
				double b13 = frameB.get_angleDegrees();
				if (( global::System.Math.Abs(((double) (( a13 - b13 )) )) > 180.0 )) {
					if (( a13 < b13 )) {
						a13 += ((double) (360) );
					}
					else {
						b13 += ((double) (360) );
					}
					
				}
				
				double x4 = ( ( 0.33333333333333337 * a13 ) + ( 0.66666666666666663 * b13 ) );
				global::hxmath.frames.IFrame2 frameE = global::hxmath.frames._Frame2.Frame2_Impl_._new(tmp4, ( (( x4 < 0 )) ? (( 360 - (  - (x4)  % 360 ) )) : (( x4 % 360 )) ));
				global::hxmath.math.Vector2Default a14 = frameB.get_offset();
				global::hxmath.math.Vector2Default b14 = frameA.get_offset();
				global::hxmath.math.Vector2Default tmp5 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( 0.666666666666666741 * a14.x ) + ( 0.333333333333333315 * b14.x ) ), ( ( 0.666666666666666741 * a14.y ) + ( 0.333333333333333315 * b14.y ) ))) );
				double a15 = frameB.get_angleDegrees();
				double b15 = frameA.get_angleDegrees();
				if (( global::System.Math.Abs(((double) (( a15 - b15 )) )) > 180.0 )) {
					if (( a15 < b15 )) {
						a15 += ((double) (360) );
					}
					else {
						b15 += ((double) (360) );
					}
					
				}
				
				double x5 = ( ( 0.666666666666666741 * a15 ) + ( 0.333333333333333315 * b15 ) );
				global::hxmath.frames.IFrame2 frameE2 = global::hxmath.frames._Frame2.Frame2_Impl_._new(tmp5, ( (( x5 < 0 )) ? (( 360 - (  - (x5)  % 360 ) )) : (( x5 % 360 )) ));
				global::hxmath.math.Vector2Default a16 = frameE.get_offset();
				global::hxmath.math.Vector2Default b16 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.333333333333333315, 0.66666666666666663)) );
				global::hxmath.math.Vector2Default self8 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a16.x, a16.y)) );
				self8.x -= b16.x;
				self8.y -= b16.y;
				global::hxmath.math.Vector2Default self9 = ((global::hxmath.math.Vector2Default) (self8) );
				this.assertApproxEquals(global::System.Math.Sqrt(((double) (( ( self9.x * self9.x ) + ( self9.y * self9.y ) )) )), 0.0, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLerpFrame2", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (161) )}));
				this.assertApproxEquals(frameE.get_angleDegrees(), 30.0, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLerpFrame2", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (162) )}));
				global::hxmath.math.Vector2Default a17 = frameE2.get_offset();
				global::hxmath.math.Vector2Default b17 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.333333333333333315, 0.66666666666666663)) );
				global::hxmath.math.Vector2Default self10 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a17.x, a17.y)) );
				self10.x -= b17.x;
				self10.y -= b17.y;
				global::hxmath.math.Vector2Default self11 = ((global::hxmath.math.Vector2Default) (self10) );
				this.assertApproxEquals(global::System.Math.Sqrt(((double) (( ( self11.x * self11.x ) + ( self11.y * self11.y ) )) )), 0.0, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLerpFrame2", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (163) )}));
				this.assertApproxEquals(frameE2.get_angleDegrees(), 30.0, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLerpFrame2", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (164) )}));
			}
		}
		
		
		public virtual void testFramesHaveToString() {
			unchecked {
				global::hxmath.frames.IFrame2 frame2 = global::hxmath.frames._Frame2.Frame2_Impl_._new(((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(23.0, 0.0)) ), 42.0);
				this.assertTrue(( global::haxe.lang.StringExt.indexOf((global::haxe.lang.Runtime.concat("", global::Std.@string(frame2))), "23", default(global::haxe.lang.Null<int>)) != -1 ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFramesHaveToString", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (170) )}));
				this.assertTrue(( global::haxe.lang.StringExt.indexOf((global::haxe.lang.Runtime.concat("", global::Std.@string(frame2))), "42", default(global::haxe.lang.Null<int>)) != -1 ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFramesHaveToString", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (171) )}));
				global::hxmath.frames.IFrame3 frame3 = global::hxmath.frames._Frame3.Frame3_Impl_._new(((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(23.0, 0.0, 0.0)) ), ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(42.0, 0.0, 0.0, 0.0)) ));
				this.assertTrue(( global::haxe.lang.StringExt.indexOf((global::haxe.lang.Runtime.concat("", global::Std.@string(frame3))), "23", default(global::haxe.lang.Null<int>)) != -1 ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFramesHaveToString", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (174) )}));
				this.assertTrue(( global::haxe.lang.StringExt.indexOf((global::haxe.lang.Runtime.concat("", global::Std.@string(frame3))), "42", default(global::haxe.lang.Null<int>)) != -1 ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFramesHaveToString", "test.TestFrames", "TestFrames.hx"}, new int[]{1981972957}, new double[]{((double) (175) )}));
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 2033167596:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFramesHaveToString", 2033167596)) );
					}
					
					
					case 59838510:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testLerpFrame2", 59838510)) );
					}
					
					
					case 1029091498:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFlxSpriteFrame2", 1029091498)) );
					}
					
					
					case 239462169:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFrame2Inverse", 239462169)) );
					}
					
					
					case 775693969:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFrame2LinearAffineTransform", 775693969)) );
					}
					
					
					case 2024080524:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFrame3Concat", 2024080524)) );
					}
					
					
					case 1326419403:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFrame2Concat", 1326419403)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 2033167596:
					{
						this.testFramesHaveToString();
						break;
					}
					
					
					case 59838510:
					{
						this.testLerpFrame2();
						break;
					}
					
					
					case 1029091498:
					{
						this.testFlxSpriteFrame2();
						break;
					}
					
					
					case 239462169:
					{
						this.testFrame2Inverse();
						break;
					}
					
					
					case 775693969:
					{
						this.testFrame2LinearAffineTransform();
						break;
					}
					
					
					case 2024080524:
					{
						this.testFrame3Concat();
						break;
					}
					
					
					case 1326419403:
					{
						this.testFrame2Concat();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
	}
}


