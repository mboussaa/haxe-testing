// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace test {
	public class TestGeom : global::test.MathTestCase {
		
		public TestGeom(global::haxe.lang.EmptyObject empty) : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
		}
		
		
		public TestGeom(object posInfos) : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
			global::test.TestGeom.__hx_ctor_test_TestGeom(this, posInfos);
		}
		
		
		public static void __hx_ctor_test_TestGeom(global::test.TestGeom __temp_me60, object posInfos) {
			global::test.MathTestCase.__hx_ctor_test_MathTestCase(__temp_me60, posInfos);
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::test.TestGeom(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::test.TestGeom(((object) (arr[0]) ));
		}
		
		
		public virtual void testRectIntersect() {
			unchecked {
				global::hxmath.geom.Rect a = new global::hxmath.geom.Rect(0.0, 0.0, 1.0, 1.0);
				global::hxmath.geom.Rect b = new global::hxmath.geom.Rect(1.0, 0.0, 1.0, 1.0);
				global::hxmath.geom.Rect c = new global::hxmath.geom.Rect(0.0, 1.0, 1.0, 1.0);
				global::hxmath.geom.Rect d = new global::hxmath.geom.Rect(1.0, 1.0, 1.0, 1.0);
				bool tmp = default(bool);
				double aStart = a.x;
				double aWidth = a.width;
				double bStart = b.x;
				if ( ! ((( ( aStart >= ( bStart + b.width ) ) || ( bStart >= ( aStart + aWidth ) ) ))) ) {
					double aStart1 = a.y;
					double aWidth1 = a.height;
					double bStart1 = b.y;
					tmp =  ! ((( ( aStart1 >= ( bStart1 + b.height ) ) || ( bStart1 >= ( aStart1 + aWidth1 ) ) ))) ;
				}
				else {
					tmp = false;
				}
				
				this.assertFalse(tmp, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRectIntersect", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (29) )}));
				bool tmp1 = default(bool);
				double aStart2 = a.x;
				double aWidth2 = a.width;
				double bStart2 = c.x;
				if ( ! ((( ( aStart2 >= ( bStart2 + c.width ) ) || ( bStart2 >= ( aStart2 + aWidth2 ) ) ))) ) {
					double aStart3 = a.y;
					double aWidth3 = a.height;
					double bStart3 = c.y;
					tmp1 =  ! ((( ( aStart3 >= ( bStart3 + c.height ) ) || ( bStart3 >= ( aStart3 + aWidth3 ) ) ))) ;
				}
				else {
					tmp1 = false;
				}
				
				this.assertFalse(tmp1, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRectIntersect", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (30) )}));
				bool tmp2 = default(bool);
				double aStart4 = a.x;
				double aWidth4 = a.width;
				double bStart4 = d.x;
				if ( ! ((( ( aStart4 >= ( bStart4 + d.width ) ) || ( bStart4 >= ( aStart4 + aWidth4 ) ) ))) ) {
					double aStart5 = a.y;
					double aWidth5 = a.height;
					double bStart5 = d.y;
					tmp2 =  ! ((( ( aStart5 >= ( bStart5 + d.height ) ) || ( bStart5 >= ( aStart5 + aWidth5 ) ) ))) ;
				}
				else {
					tmp2 = false;
				}
				
				this.assertFalse(tmp2, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRectIntersect", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (31) )}));
				global::hxmath.geom.Rect e = new global::hxmath.geom.Rect(0.5, 0.5, 1.0, 1.0);
				bool tmp3 = default(bool);
				double aStart6 = a.x;
				double aWidth6 = a.width;
				double bStart6 = e.x;
				if ( ! ((( ( aStart6 >= ( bStart6 + e.width ) ) || ( bStart6 >= ( aStart6 + aWidth6 ) ) ))) ) {
					double aStart7 = a.y;
					double aWidth7 = a.height;
					double bStart7 = e.y;
					tmp3 =  ! ((( ( aStart7 >= ( bStart7 + e.height ) ) || ( bStart7 >= ( aStart7 + aWidth7 ) ) ))) ;
				}
				else {
					tmp3 = false;
				}
				
				this.assertTrue(tmp3, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRectIntersect", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (35) )}));
				bool tmp4 = default(bool);
				double aStart8 = b.x;
				double aWidth8 = b.width;
				double bStart8 = e.x;
				if ( ! ((( ( aStart8 >= ( bStart8 + e.width ) ) || ( bStart8 >= ( aStart8 + aWidth8 ) ) ))) ) {
					double aStart9 = b.y;
					double aWidth9 = b.height;
					double bStart9 = e.y;
					tmp4 =  ! ((( ( aStart9 >= ( bStart9 + e.height ) ) || ( bStart9 >= ( aStart9 + aWidth9 ) ) ))) ;
				}
				else {
					tmp4 = false;
				}
				
				this.assertTrue(tmp4, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRectIntersect", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (36) )}));
				bool tmp5 = default(bool);
				double aStart10 = c.x;
				double aWidth10 = c.width;
				double bStart10 = e.x;
				if ( ! ((( ( aStart10 >= ( bStart10 + e.width ) ) || ( bStart10 >= ( aStart10 + aWidth10 ) ) ))) ) {
					double aStart11 = c.y;
					double aWidth11 = c.height;
					double bStart11 = e.y;
					tmp5 =  ! ((( ( aStart11 >= ( bStart11 + e.height ) ) || ( bStart11 >= ( aStart11 + aWidth11 ) ) ))) ;
				}
				else {
					tmp5 = false;
				}
				
				this.assertTrue(tmp5, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRectIntersect", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (37) )}));
				bool tmp6 = default(bool);
				double aStart12 = d.x;
				double aWidth12 = d.width;
				double bStart12 = e.x;
				if ( ! ((( ( aStart12 >= ( bStart12 + e.width ) ) || ( bStart12 >= ( aStart12 + aWidth12 ) ) ))) ) {
					double aStart13 = d.y;
					double aWidth13 = d.height;
					double bStart13 = e.y;
					tmp6 =  ! ((( ( aStart13 >= ( bStart13 + e.height ) ) || ( bStart13 >= ( aStart13 + aWidth13 ) ) ))) ;
				}
				else {
					tmp6 = false;
				}
				
				this.assertTrue(tmp6, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRectIntersect", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (38) )}));
				global::hxmath.geom.Rect contained = new global::hxmath.geom.Rect(0.25, 0.25, 0.5, 0.5);
				bool tmp7 = default(bool);
				double aStart14 = a.x;
				double aWidth14 = a.width;
				double bStart14 = contained.x;
				if ( ! ((( ( aStart14 >= ( bStart14 + contained.width ) ) || ( bStart14 >= ( aStart14 + aWidth14 ) ) ))) ) {
					double aStart15 = a.y;
					double aWidth15 = a.height;
					double bStart15 = contained.y;
					tmp7 =  ! ((( ( aStart15 >= ( bStart15 + contained.height ) ) || ( bStart15 >= ( aStart15 + aWidth15 ) ) ))) ;
				}
				else {
					tmp7 = false;
				}
				
				this.assertTrue(tmp7, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRectIntersect", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (42) )}));
				bool tmp8 = default(bool);
				double aStart16 = contained.x;
				double aWidth16 = contained.width;
				double bStart16 = a.x;
				if ( ! ((( ( aStart16 >= ( bStart16 + a.width ) ) || ( bStart16 >= ( aStart16 + aWidth16 ) ) ))) ) {
					double aStart17 = contained.y;
					double aWidth17 = contained.height;
					double bStart17 = a.y;
					tmp8 =  ! ((( ( aStart17 >= ( bStart17 + a.height ) ) || ( bStart17 >= ( aStart17 + aWidth17 ) ) ))) ;
				}
				else {
					tmp8 = false;
				}
				
				this.assertTrue(tmp8, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRectIntersect", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (43) )}));
				global::hxmath.geom.Rect straddling = new global::hxmath.geom.Rect(0.25, 0.25, 1.0, 0.5);
				bool tmp9 = default(bool);
				double aStart18 = a.x;
				double aWidth18 = a.width;
				double bStart18 = straddling.x;
				if ( ! ((( ( aStart18 >= ( bStart18 + straddling.width ) ) || ( bStart18 >= ( aStart18 + aWidth18 ) ) ))) ) {
					double aStart19 = a.y;
					double aWidth19 = a.height;
					double bStart19 = straddling.y;
					tmp9 =  ! ((( ( aStart19 >= ( bStart19 + straddling.height ) ) || ( bStart19 >= ( aStart19 + aWidth19 ) ) ))) ;
				}
				else {
					tmp9 = false;
				}
				
				this.assertTrue(tmp9, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRectIntersect", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (47) )}));
				bool tmp10 = default(bool);
				double aStart20 = straddling.x;
				double aWidth20 = straddling.width;
				double bStart20 = a.x;
				if ( ! ((( ( aStart20 >= ( bStart20 + a.width ) ) || ( bStart20 >= ( aStart20 + aWidth20 ) ) ))) ) {
					double aStart21 = straddling.y;
					double aWidth21 = straddling.height;
					double bStart21 = a.y;
					tmp10 =  ! ((( ( aStart21 >= ( bStart21 + a.height ) ) || ( bStart21 >= ( aStart21 + aWidth21 ) ) ))) ;
				}
				else {
					tmp10 = false;
				}
				
				this.assertTrue(tmp10, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRectIntersect", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (48) )}));
			}
		}
		
		
		public virtual void testRectMatrixConversion() {
			unchecked {
				global::hxmath.math.Matrix3x2Default m = this.randomMatrix3x2(default(global::haxe.lang.Null<double>));
				m.a = global::System.Math.Abs(((double) (m.a) ));
				m.b = 0.0;
				m.c = 0.0;
				m.d = global::System.Math.Abs(((double) (m.d) ));
				if (( m.a < 1e-6 )) {
					m.a += 1.0;
				}
				
				if (( m.d < 1e-6 )) {
					m.d += 1.0;
				}
				
				global::hxmath.math.Matrix2x2Default self = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(m.a, m.b, m.c, m.d)) );
				double matrixArea = ( ( self.a * self.d ) - ( self.b * self.c ) );
				global::hxmath.geom.Rect rect = new global::hxmath.geom.Rect(m.tx, m.ty, m.a, m.d);
				this.assertEquals<double>(((double) (matrixArea) ), ((double) (( rect.width * rect.height )) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRectMatrixConversion", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (76) )})) ));
				global::hxmath.math.Matrix3x2Default m1 = ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(rect.width, 0.0, 0.0, rect.height, rect.x, rect.y)) );
				this.assertTrue(( ( ( m1 == null ) && ( m == null ) ) || ( ( ( ( ( ( ( ( m1 != null ) && ( m != null ) ) && ( m1.a == m.a ) ) && ( m1.b == m.b ) ) && ( m1.c == m.c ) ) && ( m1.d == m.d ) ) && ( m1.tx == m.tx ) ) && ( m1.ty == m.ty ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRectMatrixConversion", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (77) )}));
			}
		}
		
		
		public virtual void testRectTwoPointConstruction() {
			unchecked {
				global::hxmath.math.Vector2Default zero = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 0.0)) );
				global::hxmath.math.Vector2Default one = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 1.0)) );
				global::hxmath.geom.Rect _this = new global::hxmath.geom.Rect(global::System.Math.Min(((double) (zero.x) ), ((double) (one.x) )), global::System.Math.Min(((double) (zero.y) ), ((double) (one.y) )), global::System.Math.Abs(((double) (( one.x - zero.x )) )), global::System.Math.Abs(((double) (( one.y - zero.y )) )));
				this.assertEquals<double>(((double) (1.0) ), ((double) (( _this.width * _this.height )) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRectTwoPointConstruction", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (85) )})) ));
			}
		}
		
		
		public virtual void testRectContainsPoint() {
			unchecked {
				global::hxmath.geom.Rect rect = new global::hxmath.geom.Rect(0.5, 0.5, 1.0, 1.0);
				{
					int _g = 0;
					while (( _g < 4 )) {
						int i = _g++;
						global::hxmath.math.Vector2Default v = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(rect.x, rect.y)) );
						switch (i) {
							case 0:
							{
								break;
							}
							
							
							case 1:
							{
								v.x += rect.width;
								break;
							}
							
							
							case 2:
							{
								v.x += rect.width;
								v.y += rect.height;
								break;
							}
							
							
							case 3:
							{
								v.y += rect.height;
								break;
							}
							
							
							default:
							{
								throw global::haxe.lang.HaxeException.wrap("Invalid vertex index.");
							}
							
						}
						
						bool tmp = default(bool);
						double aStart = rect.x;
						double aWidth = rect.width;
						double x = v.x;
						if (( ( x >= aStart ) && ( x <= ( aStart + aWidth ) ) )) {
							double aStart1 = rect.y;
							double aWidth1 = rect.height;
							double x1 = v.y;
							if (( x1 >= aStart1 )) {
								tmp = ( x1 <= ( aStart1 + aWidth1 ) );
							}
							else {
								tmp = false;
							}
							
						}
						else {
							tmp = false;
						}
						
						this.assertTrue(tmp, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRectContainsPoint", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (96) )}));
						global::hxmath.math.Vector2Default b = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( rect.x + ( 0.5 * rect.width ) ), ( rect.y + ( 0.5 * rect.height ) ))) );
						global::hxmath.math.Vector2Default self = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(v.x, v.y)) );
						self.x -= b.x;
						self.y -= b.y;
						global::hxmath.math.Vector2Default self1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self.x, self.y)) );
						self1.x *= 1.1;
						self1.y *= 1.1;
						global::hxmath.math.Vector2Default b1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( rect.x + ( 0.5 * rect.width ) ), ( rect.y + ( 0.5 * rect.height ) ))) );
						global::hxmath.math.Vector2Default self2 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self1.x, self1.y)) );
						self2.x += b1.x;
						self2.y += b1.y;
						bool tmp1 = default(bool);
						double aStart2 = rect.x;
						double aWidth2 = rect.width;
						double x2 = self2.x;
						if (( ( x2 >= aStart2 ) && ( x2 <= ( aStart2 + aWidth2 ) ) )) {
							double aStart3 = rect.y;
							double aWidth3 = rect.height;
							double x3 = self2.y;
							if (( x3 >= aStart3 )) {
								tmp1 = ( x3 <= ( aStart3 + aWidth3 ) );
							}
							else {
								tmp1 = false;
							}
							
						}
						else {
							tmp1 = false;
						}
						
						this.assertFalse(tmp1, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRectContainsPoint", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (100) )}));
					}
					
				}
				
			}
		}
		
		
		public virtual void testRectIntersectOverlapping() {
			return;
		}
		
		
		public virtual void testRectIntersectContaining() {
			unchecked {
				global::hxmath.geom.Rect outer = new global::hxmath.geom.Rect(0.0, 0.0, 1.0, 1.0);
				global::hxmath.geom.Rect inner = new global::hxmath.geom.Rect(0.25, 0.25, 0.5, 0.5);
				global::hxmath.geom.Rect innerLeft = new global::hxmath.geom.Rect(0.0, 0.25, 0.25, 0.5);
				global::hxmath.geom.Rect innerRight = new global::hxmath.geom.Rect(0.75, 0.25, 0.25, 0.5);
				global::hxmath.geom.Rect left = new global::hxmath.geom.Rect(-0.25, 0.25, 0.5, 0.5);
				global::hxmath.geom.Rect right = new global::hxmath.geom.Rect(0.75, 0.25, 0.5, 0.5);
				global::hxmath.geom.Rect _this = new global::hxmath.geom.Rect(outer.x, outer.y, outer.width, outer.height);
				if (( _this.x < inner.x )) {
					_this.width -= ( inner.x - _this.x );
					_this.x = inner.x;
				}
				
				if (( _this.y < inner.y )) {
					_this.height -= ( inner.y - _this.y );
					_this.y = inner.y;
				}
				
				if (( ( _this.x + _this.width ) > ( inner.x + inner.width ) )) {
					_this.width -= ( ( _this.x + _this.width ) - (( inner.x + inner.width )) );
				}
				
				if (( ( _this.y + _this.height ) > ( inner.y + inner.height ) )) {
					_this.height -= ( ( _this.y + _this.height ) - (( inner.y + inner.height )) );
				}
				
				this.assertTrue(( ( ( ( ( inner != null ) && ( _this.x == inner.x ) ) && ( _this.y == inner.y ) ) && ( _this.width == inner.width ) ) && ( _this.height == inner.height ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRectIntersectContaining", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (150) )}));
				global::hxmath.geom.Rect _this1 = new global::hxmath.geom.Rect(inner.x, inner.y, inner.width, inner.height);
				if (( _this1.x < outer.x )) {
					_this1.width -= ( outer.x - _this1.x );
					_this1.x = outer.x;
				}
				
				if (( _this1.y < outer.y )) {
					_this1.height -= ( outer.y - _this1.y );
					_this1.y = outer.y;
				}
				
				if (( ( _this1.x + _this1.width ) > ( outer.x + outer.width ) )) {
					_this1.width -= ( ( _this1.x + _this1.width ) - (( outer.x + outer.width )) );
				}
				
				if (( ( _this1.y + _this1.height ) > ( outer.y + outer.height ) )) {
					_this1.height -= ( ( _this1.y + _this1.height ) - (( outer.y + outer.height )) );
				}
				
				this.assertTrue(( ( ( ( ( inner != null ) && ( _this1.x == inner.x ) ) && ( _this1.y == inner.y ) ) && ( _this1.width == inner.width ) ) && ( _this1.height == inner.height ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRectIntersectContaining", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (152) )}));
				global::hxmath.geom.Rect _this2 = new global::hxmath.geom.Rect(outer.x, outer.y, outer.width, outer.height);
				if (( _this2.x < left.x )) {
					_this2.width -= ( left.x - _this2.x );
					_this2.x = left.x;
				}
				
				if (( _this2.y < left.y )) {
					_this2.height -= ( left.y - _this2.y );
					_this2.y = left.y;
				}
				
				if (( ( _this2.x + _this2.width ) > ( left.x + left.width ) )) {
					_this2.width -= ( ( _this2.x + _this2.width ) - (( left.x + left.width )) );
				}
				
				if (( ( _this2.y + _this2.height ) > ( left.y + left.height ) )) {
					_this2.height -= ( ( _this2.y + _this2.height ) - (( left.y + left.height )) );
				}
				
				this.assertTrue(( ( ( ( ( innerLeft != null ) && ( _this2.x == innerLeft.x ) ) && ( _this2.y == innerLeft.y ) ) && ( _this2.width == innerLeft.width ) ) && ( _this2.height == innerLeft.height ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRectIntersectContaining", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (156) )}));
				global::hxmath.geom.Rect _this3 = new global::hxmath.geom.Rect(left.x, left.y, left.width, left.height);
				if (( _this3.x < outer.x )) {
					_this3.width -= ( outer.x - _this3.x );
					_this3.x = outer.x;
				}
				
				if (( _this3.y < outer.y )) {
					_this3.height -= ( outer.y - _this3.y );
					_this3.y = outer.y;
				}
				
				if (( ( _this3.x + _this3.width ) > ( outer.x + outer.width ) )) {
					_this3.width -= ( ( _this3.x + _this3.width ) - (( outer.x + outer.width )) );
				}
				
				if (( ( _this3.y + _this3.height ) > ( outer.y + outer.height ) )) {
					_this3.height -= ( ( _this3.y + _this3.height ) - (( outer.y + outer.height )) );
				}
				
				this.assertTrue(( ( ( ( ( innerLeft != null ) && ( _this3.x == innerLeft.x ) ) && ( _this3.y == innerLeft.y ) ) && ( _this3.width == innerLeft.width ) ) && ( _this3.height == innerLeft.height ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRectIntersectContaining", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (158) )}));
				global::hxmath.geom.Rect _this4 = new global::hxmath.geom.Rect(outer.x, outer.y, outer.width, outer.height);
				if (( _this4.x < right.x )) {
					_this4.width -= ( right.x - _this4.x );
					_this4.x = right.x;
				}
				
				if (( _this4.y < right.y )) {
					_this4.height -= ( right.y - _this4.y );
					_this4.y = right.y;
				}
				
				if (( ( _this4.x + _this4.width ) > ( right.x + right.width ) )) {
					_this4.width -= ( ( _this4.x + _this4.width ) - (( right.x + right.width )) );
				}
				
				if (( ( _this4.y + _this4.height ) > ( right.y + right.height ) )) {
					_this4.height -= ( ( _this4.y + _this4.height ) - (( right.y + right.height )) );
				}
				
				this.assertTrue(( ( ( ( ( innerRight != null ) && ( _this4.x == innerRight.x ) ) && ( _this4.y == innerRight.y ) ) && ( _this4.width == innerRight.width ) ) && ( _this4.height == innerRight.height ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRectIntersectContaining", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (160) )}));
				global::hxmath.geom.Rect _this5 = new global::hxmath.geom.Rect(right.x, right.y, right.width, right.height);
				if (( _this5.x < outer.x )) {
					_this5.width -= ( outer.x - _this5.x );
					_this5.x = outer.x;
				}
				
				if (( _this5.y < outer.y )) {
					_this5.height -= ( outer.y - _this5.y );
					_this5.y = outer.y;
				}
				
				if (( ( _this5.x + _this5.width ) > ( outer.x + outer.width ) )) {
					_this5.width -= ( ( _this5.x + _this5.width ) - (( outer.x + outer.width )) );
				}
				
				if (( ( _this5.y + _this5.height ) > ( outer.y + outer.height ) )) {
					_this5.height -= ( ( _this5.y + _this5.height ) - (( outer.y + outer.height )) );
				}
				
				this.assertTrue(( ( ( ( ( innerRight != null ) && ( _this5.x == innerRight.x ) ) && ( _this5.y == innerRight.y ) ) && ( _this5.width == innerRight.width ) ) && ( _this5.height == innerRight.height ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRectIntersectContaining", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (162) )}));
			}
		}
		
		
		public virtual void testRectToPointDistance() {
			unchecked {
				global::hxmath.geom.Rect unit = new global::hxmath.geom.Rect(0.0, 0.0, 1.0, 1.0);
				global::Array<object> distanceOfTwo = new global::Array<object>(new object[]{((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(-2.0, 0.5)) ), ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(3.0, 0.5)) ), ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.5, -2.0)) ), ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.5, 3.0)) )});
				{
					int _g = 0;
					while (( _g < distanceOfTwo.length )) {
						global::hxmath.math.Vector2Default point = ((global::hxmath.math.Vector2Default) (distanceOfTwo[_g]) );
						 ++ _g;
						double dx = global::System.Math.Max(((double) (( global::System.Math.Abs(((double) (( point.x - (( unit.x + ( 0.5 * unit.width ) )) )) )) - ( 0.5 * unit.width ) )) ), ((double) (0) ));
						double dy = global::System.Math.Max(((double) (( global::System.Math.Abs(((double) (( point.y - (( unit.y + ( 0.5 * unit.height ) )) )) )) - ( 0.5 * unit.height ) )) ), ((double) (0) ));
						this.assertApproxEquals(2.0, global::System.Math.Sqrt(((double) (( ( dx * dx ) + ( dy * dy ) )) )), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRectToPointDistance", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (176) )}));
					}
					
				}
				
				global::hxmath.math.Vector2Default inside = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.75, 0.2)) );
				double dx1 = global::System.Math.Max(((double) (( global::System.Math.Abs(((double) (( inside.x - (( unit.x + ( 0.5 * unit.width ) )) )) )) - ( 0.5 * unit.width ) )) ), ((double) (0) ));
				double dy1 = global::System.Math.Max(((double) (( global::System.Math.Abs(((double) (( inside.y - (( unit.y + ( 0.5 * unit.height ) )) )) )) - ( 0.5 * unit.height ) )) ), ((double) (0) ));
				this.assertEquals<double>(((double) (0.0) ), ((double) (global::System.Math.Sqrt(((double) (( ( dx1 * dx1 ) + ( dy1 * dy1 ) )) ))) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRectToPointDistance", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (180) )})) ));
				global::hxmath.math.Vector2Default diagonal = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(-0.5, -0.5)) );
				double tmp = global::System.Math.Sqrt(((double) (( ( diagonal.x * diagonal.x ) + ( diagonal.y * diagonal.y ) )) ));
				double dx2 = global::System.Math.Max(((double) (( global::System.Math.Abs(((double) (( diagonal.x - (( unit.x + ( 0.5 * unit.width ) )) )) )) - ( 0.5 * unit.width ) )) ), ((double) (0) ));
				double dy2 = global::System.Math.Max(((double) (( global::System.Math.Abs(((double) (( diagonal.y - (( unit.y + ( 0.5 * unit.height ) )) )) )) - ( 0.5 * unit.height ) )) ), ((double) (0) ));
				this.assertApproxEquals(tmp, global::System.Math.Sqrt(((double) (( ( dx2 * dx2 ) + ( dy2 * dy2 ) )) )), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRectToPointDistance", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (183) )}));
				global::hxmath.math.Vector2Default corner = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 1.0)) );
				double dx3 = global::System.Math.Max(((double) (( global::System.Math.Abs(((double) (( corner.x - (( unit.x + ( 0.5 * unit.width ) )) )) )) - ( 0.5 * unit.width ) )) ), ((double) (0) ));
				double dy3 = global::System.Math.Max(((double) (( global::System.Math.Abs(((double) (( corner.y - (( unit.y + ( 0.5 * unit.height ) )) )) )) - ( 0.5 * unit.height ) )) ), ((double) (0) ));
				this.assertEquals<double>(((double) (0.0) ), ((double) (global::System.Math.Sqrt(((double) (( ( dx3 * dx3 ) + ( dy3 * dy3 ) )) ))) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRectToPointDistance", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (186) )})) ));
			}
		}
		
		
		public virtual void testRectAddVector() {
			unchecked {
				global::hxmath.geom.Rect unit = new global::hxmath.geom.Rect(0.0, 0.0, 1.0, 1.0);
				global::hxmath.math.Vector2Default two = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(2.0, 2.0)) );
				double expectedArea = ( (( unit.width + two.x )) * (( unit.height + two.y )) );
				global::hxmath.geom.Rect _this = new global::hxmath.geom.Rect(unit.x, unit.y, unit.width, unit.height);
				if (( two.x < 0.0 )) {
					_this.x += two.x;
					_this.width -= two.x;
				}
				else {
					_this.width += two.x;
				}
				
				if (( two.y < 0.0 )) {
					_this.y += two.y;
					_this.height -= two.y;
				}
				else {
					_this.height += two.y;
				}
				
				this.assertApproxEquals(expectedArea, ( _this.width * _this.height ), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRectAddVector", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (199) )}));
				global::hxmath.math.Vector2Default a = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(_this.x, _this.y)) );
				global::hxmath.math.Vector2Default b = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(unit.x, unit.y)) );
				global::hxmath.math.Vector2Default self = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a.x, a.y)) );
				self.x -= b.x;
				self.y -= b.y;
				global::hxmath.math.Vector2Default self1 = ((global::hxmath.math.Vector2Default) (self) );
				this.assertApproxEquals(0.0, global::System.Math.Sqrt(((double) (( ( self1.x * self1.x ) + ( self1.y * self1.y ) )) )), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRectAddVector", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (200) )}));
				global::hxmath.geom.Rect _this1 = new global::hxmath.geom.Rect(unit.x, unit.y, unit.width, unit.height);
				global::hxmath.math.Vector2Default v = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default( - (two.x) ,  - (two.y) )) );
				if (( v.x < 0.0 )) {
					_this1.x += v.x;
					_this1.width -= v.x;
				}
				else {
					_this1.width += v.x;
				}
				
				if (( v.y < 0.0 )) {
					_this1.y += v.y;
					_this1.height -= v.y;
				}
				else {
					_this1.height += v.y;
				}
				
				this.assertApproxEquals(expectedArea, ( _this1.width * _this1.height ), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRectAddVector", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (206) )}));
				global::hxmath.math.Vector2Default a1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(_this1.x, _this1.y)) );
				global::hxmath.math.Vector2Default self2 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a1.x, a1.y)) );
				self2.x += two.x;
				self2.y += two.y;
				global::hxmath.math.Vector2Default self3 = ((global::hxmath.math.Vector2Default) (self2) );
				this.assertApproxEquals(0.0, global::System.Math.Sqrt(((double) (( ( self3.x * self3.x ) + ( self3.y * self3.y ) )) )), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRectAddVector", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (207) )}));
			}
		}
		
		
		public virtual void testRectDistanceAgainstRangeAlgorithm() {
			unchecked {
				int _g = 0;
				while (( _g < 100 )) {
					 ++ _g;
					global::hxmath.geom.Rect a = new global::hxmath.geom.Rect(( global::Math.rand.NextDouble() - 0.5 ), ( global::Math.rand.NextDouble() - 0.5 ), global::Math.rand.NextDouble(), global::Math.rand.NextDouble());
					global::hxmath.geom.Rect b = new global::hxmath.geom.Rect(( global::Math.rand.NextDouble() - 0.5 ), ( global::Math.rand.NextDouble() - 0.5 ), global::Math.rand.NextDouble(), global::Math.rand.NextDouble());
					double dx = global::System.Math.Max(((double) (( global::System.Math.Abs(((double) (( ( b.x + ( 0.5 * b.width ) ) - (( a.x + ( 0.5 * a.width ) )) )) )) - ( 0.5 * (( a.width + b.width )) ) )) ), ((double) (0) ));
					double dy = global::System.Math.Max(((double) (( global::System.Math.Abs(((double) (( ( b.y + ( 0.5 * b.height ) ) - (( a.y + ( 0.5 * a.height ) )) )) )) - ( 0.5 * (( a.height + b.height )) ) )) ), ((double) (0) ));
					double regularDist = global::System.Math.Sqrt(((double) (( ( dx * dx ) + ( dy * dy ) )) ));
					double dx1 = global::System.Math.Max(((double) (( global::System.Math.Abs(((double) (( ( b.x + ( 0.5 * b.width ) ) - (( a.x + ( 0.5 * a.width ) )) )) )) - ( 0.5 * (( a.width + b.width )) ) )) ), ((double) (0) ));
					double dy1 = global::System.Math.Max(((double) (( global::System.Math.Abs(((double) (( ( b.y + ( 0.5 * b.height ) ) - (( a.y + ( 0.5 * a.height ) )) )) )) - ( 0.5 * (( a.height + b.height )) ) )) ), ((double) (0) ));
					this.assertApproxEquals(global::System.Math.Sqrt(((double) (( ( dx1 * dx1 ) + ( dy1 * dy1 ) )) )), regularDist, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRectDistanceAgainstRangeAlgorithm", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (219) )}));
				}
				
			}
		}
		
		
		public virtual void testRay2Cast() {
			unchecked {
				global::hxmath.math.Vector2Default self = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 1.0)) );
				global::hxmath.math.Vector2Default self1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self.x, self.y)) );
				double length = global::System.Math.Sqrt(((double) (( ( self1.x * self1.x ) + ( self1.y * self1.y ) )) ));
				if (( length > 0.0 )) {
					self1.x /= length;
					self1.y /= length;
				}
				
				global::hxmath.math.Vector2Default tmp = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 0.0)) );
				global::hxmath.math.Vector2Default self2 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 1.0)) );
				global::hxmath.math.Vector2Default self3 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self2.x, self2.y)) );
				double length1 = global::System.Math.Sqrt(((double) (( ( self3.x * self3.x ) + ( self3.y * self3.y ) )) ));
				if (( length1 > 0.0 )) {
					self3.x /= length1;
					self3.y /= length1;
				}
				
				this.assertApproxEquals(1.0, new global::hxmath.geom.Ray2(tmp, self3).intersectPoint(self1, default(global::haxe.lang.Null<double>)), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRay2Cast", "test.TestGeom", "TestGeom.hx"}, new int[]{1981972957}, new double[]{((double) (229) )}));
			}
		}
		
		
		public virtual double rangeRectDistance(global::hxmath.geom.Rect a, global::hxmath.geom.Rect b) {
			double aStart = a.x;
			double aWidth = a.width;
			double bStart = b.x;
			double bWidth = b.width;
			double minX = ( (( ( aStart + aWidth ) < bStart )) ? (( bStart - (( aStart + aWidth )) )) : (( (( ( bStart + bWidth ) < aStart )) ? (( aStart - (( bStart + bWidth )) )) : (((double) (0) )) )) );
			double aStart1 = a.y;
			double aWidth1 = a.height;
			double bStart1 = b.y;
			double bWidth1 = b.height;
			double minY = ( (( ( aStart1 + aWidth1 ) < bStart1 )) ? (( bStart1 - (( aStart1 + aWidth1 )) )) : (( (( ( bStart1 + bWidth1 ) < aStart1 )) ? (( aStart1 - (( bStart1 + bWidth1 )) )) : (((double) (0) )) )) );
			return global::System.Math.Sqrt(((double) (( ( minX * minX ) + ( minY * minY ) )) ));
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1166834134:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "rangeRectDistance", 1166834134)) );
					}
					
					
					case 82504793:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testRay2Cast", 82504793)) );
					}
					
					
					case 968727272:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testRectDistanceAgainstRangeAlgorithm", 968727272)) );
					}
					
					
					case 1095954510:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testRectAddVector", 1095954510)) );
					}
					
					
					case 1969371956:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testRectToPointDistance", 1969371956)) );
					}
					
					
					case 769848919:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testRectIntersectContaining", 769848919)) );
					}
					
					
					case 709126288:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testRectIntersectOverlapping", 709126288)) );
					}
					
					
					case 945148219:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testRectContainsPoint", 945148219)) );
					}
					
					
					case 1964407051:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testRectTwoPointConstruction", 1964407051)) );
					}
					
					
					case 1805615981:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testRectMatrixConversion", 1805615981)) );
					}
					
					
					case 877005673:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testRectIntersect", 877005673)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1166834134:
					{
						return this.rangeRectDistance(((global::hxmath.geom.Rect) (dynargs[0]) ), ((global::hxmath.geom.Rect) (dynargs[1]) ));
					}
					
					
					case 82504793:
					{
						this.testRay2Cast();
						break;
					}
					
					
					case 968727272:
					{
						this.testRectDistanceAgainstRangeAlgorithm();
						break;
					}
					
					
					case 1095954510:
					{
						this.testRectAddVector();
						break;
					}
					
					
					case 1969371956:
					{
						this.testRectToPointDistance();
						break;
					}
					
					
					case 769848919:
					{
						this.testRectIntersectContaining();
						break;
					}
					
					
					case 709126288:
					{
						this.testRectIntersectOverlapping();
						break;
					}
					
					
					case 945148219:
					{
						this.testRectContainsPoint();
						break;
					}
					
					
					case 1964407051:
					{
						this.testRectTwoPointConstruction();
						break;
					}
					
					
					case 1805615981:
					{
						this.testRectMatrixConversion();
						break;
					}
					
					
					case 877005673:
					{
						this.testRectIntersect();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
	}
}


