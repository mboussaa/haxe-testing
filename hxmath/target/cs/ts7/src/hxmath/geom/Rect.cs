// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hxmath.geom {
	public class Rect : global::haxe.lang.HxObject {
		
		public Rect(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Rect(double x, double y, double width, double height) {
			global::hxmath.geom.Rect.__hx_ctor_hxmath_geom_Rect(this, x, y, width, height);
		}
		
		
		public static void __hx_ctor_hxmath_geom_Rect(global::hxmath.geom.Rect __temp_me30, double x, double y, double width, double height) {
			__temp_me30.x = x;
			__temp_me30.y = y;
			__temp_me30.width = width;
			__temp_me30.height = height;
		}
		
		
		public static global::hxmath.geom.Rect fromTwoPoints(global::hxmath.math.Vector2Default pointA, global::hxmath.math.Vector2Default pointB) {
			return new global::hxmath.geom.Rect(global::System.Math.Min(((double) (pointA.x) ), ((double) (pointB.x) )), global::System.Math.Min(((double) (pointA.y) ), ((double) (pointB.y) )), global::System.Math.Abs(((double) (( pointB.x - pointA.x )) )), global::System.Math.Abs(((double) (( pointB.y - pointA.y )) )));
		}
		
		
		public static global::hxmath.geom.Rect fromRectShape(object r) {
			return new global::hxmath.geom.Rect(global::haxe.lang.Runtime.getField_f(r, "x", 120, true), global::haxe.lang.Runtime.getField_f(r, "y", 121, true), global::haxe.lang.Runtime.getField_f(r, "width", 1247983110, true), global::haxe.lang.Runtime.getField_f(r, "height", 38537191, true));
		}
		
		
		public static global::hxmath.geom.Rect fromMatrix(global::hxmath.math.Matrix3x2Default m) {
			return new global::hxmath.geom.Rect(m.tx, m.ty, m.a, m.d);
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::hxmath.geom.Rect(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			unchecked {
				return new global::hxmath.geom.Rect(((double) (global::haxe.lang.Runtime.toDouble(arr[0])) ), ((double) (global::haxe.lang.Runtime.toDouble(arr[1])) ), ((double) (global::haxe.lang.Runtime.toDouble(arr[2])) ), ((double) (global::haxe.lang.Runtime.toDouble(arr[3])) ));
			}
		}
		
		
		public double x;
		
		public double y;
		
		public double width;
		
		public double height;
		
		
		
		
		
		
		
		
		
		public bool @equals(global::hxmath.geom.Rect r) {
			if (( ( ( ( r != null ) && ( this.x == r.x ) ) && ( this.y == r.y ) ) && ( this.width == r.width ) )) {
				return ( this.height == r.height );
			}
			else {
				return false;
			}
			
		}
		
		
		public global::hxmath.geom.Rect clone() {
			return new global::hxmath.geom.Rect(this.x, this.y, this.width, this.height);
		}
		
		
		public void copyTo(object r) {
			global::haxe.lang.Runtime.setField_f(r, "x", 120, this.x);
			global::haxe.lang.Runtime.setField_f(r, "y", 121, this.y);
			global::haxe.lang.Runtime.setField_f(r, "width", 1247983110, this.width);
			global::haxe.lang.Runtime.setField_f(r, "height", 38537191, this.height);
		}
		
		
		public bool overlaps(global::hxmath.geom.Rect r) {
			double aStart = this.x;
			double aWidth = this.width;
			double bStart = r.x;
			if ( ! ((( ( aStart >= ( bStart + r.width ) ) || ( bStart >= ( aStart + aWidth ) ) ))) ) {
				double aStart1 = this.y;
				double aWidth1 = this.height;
				double bStart1 = r.y;
				return  ! ((( ( aStart1 >= ( bStart1 + r.height ) ) || ( bStart1 >= ( aStart1 + aWidth1 ) ) ))) ;
			}
			else {
				return false;
			}
			
		}
		
		
		public global::hxmath.geom.Rect intersect(global::hxmath.geom.Rect r) {
			global::hxmath.geom.Rect _this = new global::hxmath.geom.Rect(this.x, this.y, this.width, this.height);
			if (( _this.x < r.x )) {
				_this.width -= ( r.x - _this.x );
				_this.x = r.x;
			}
			
			if (( _this.y < r.y )) {
				_this.height -= ( r.y - _this.y );
				_this.y = r.y;
			}
			
			if (( ( _this.x + _this.width ) > ( r.x + r.width ) )) {
				_this.width -= ( ( _this.x + _this.width ) - (( r.x + r.width )) );
			}
			
			if (( ( _this.y + _this.height ) > ( r.y + r.height ) )) {
				_this.height -= ( ( _this.y + _this.height ) - (( r.y + r.height )) );
			}
			
			return _this;
		}
		
		
		public global::hxmath.geom.Rect intersectWith(global::hxmath.geom.Rect r) {
			if (( this.x < r.x )) {
				this.width -= ( r.x - this.x );
				this.x = r.x;
			}
			
			if (( this.y < r.y )) {
				this.height -= ( r.y - this.y );
				this.y = r.y;
			}
			
			if (( ( this.x + this.width ) > ( r.x + r.width ) )) {
				this.width -= ( ( this.x + this.width ) - (( r.x + r.width )) );
			}
			
			if (( ( this.y + this.height ) > ( r.y + r.height ) )) {
				this.height -= ( ( this.y + this.height ) - (( r.y + r.height )) );
			}
			
			return this;
		}
		
		
		public bool containsPoint(global::hxmath.math.Vector2Default p) {
			double aStart = this.x;
			double aWidth = this.width;
			double x = p.x;
			if (( ( x >= aStart ) && ( x <= ( aStart + aWidth ) ) )) {
				double aStart1 = this.y;
				double aWidth1 = this.height;
				double x1 = p.y;
				if (( x1 >= aStart1 )) {
					return ( x1 <= ( aStart1 + aWidth1 ) );
				}
				else {
					return false;
				}
				
			}
			else {
				return false;
			}
			
		}
		
		
		public double distanceToPoint(global::hxmath.math.Vector2Default p) {
			double dx = global::System.Math.Max(((double) (( global::System.Math.Abs(((double) (( p.x - (( this.x + ( 0.5 * this.width ) )) )) )) - ( 0.5 * this.width ) )) ), ((double) (0) ));
			double dy = global::System.Math.Max(((double) (( global::System.Math.Abs(((double) (( p.y - (( this.y + ( 0.5 * this.height ) )) )) )) - ( 0.5 * this.height ) )) ), ((double) (0) ));
			return global::System.Math.Sqrt(((double) (( ( dx * dx ) + ( dy * dy ) )) ));
		}
		
		
		public double distanceToRect(global::hxmath.geom.Rect r) {
			double dx = global::System.Math.Max(((double) (( global::System.Math.Abs(((double) (( ( r.x + ( 0.5 * r.width ) ) - (( this.x + ( 0.5 * this.width ) )) )) )) - ( 0.5 * (( this.width + r.width )) ) )) ), ((double) (0) ));
			double dy = global::System.Math.Max(((double) (( global::System.Math.Abs(((double) (( ( r.y + ( 0.5 * r.height ) ) - (( this.y + ( 0.5 * this.height ) )) )) )) - ( 0.5 * (( this.height + r.height )) ) )) ), ((double) (0) ));
			return global::System.Math.Sqrt(((double) (( ( dx * dx ) + ( dy * dy ) )) ));
		}
		
		
		public global::hxmath.geom.Rect addWith(global::hxmath.math.Vector2Default v) {
			if (( v.x < 0.0 )) {
				this.x += v.x;
				this.width -= v.x;
			}
			else {
				this.width += v.x;
			}
			
			if (( v.y < 0.0 )) {
				this.y += v.y;
				this.height -= v.y;
			}
			else {
				this.height += v.y;
			}
			
			return this;
		}
		
		
		public global::hxmath.math.Vector2Default getVertex(int index) {
			unchecked {
				global::hxmath.math.Vector2Default v = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(this.x, this.y)) );
				switch (index) {
					case 0:
					{
						break;
					}
					
					
					case 1:
					{
						v.x += this.width;
						break;
					}
					
					
					case 2:
					{
						v.x += this.width;
						v.y += this.height;
						break;
					}
					
					
					case 3:
					{
						v.y += this.height;
						break;
					}
					
					
					default:
					{
						throw global::haxe.lang.HaxeException.wrap("Invalid vertex index.");
					}
					
				}
				
				return v;
			}
		}
		
		
		public global::hxmath.math.Vector2Default get_center() {
			return ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( this.x + ( 0.5 * this.width ) ), ( this.y + ( 0.5 * this.height ) ))) );
		}
		
		
		public global::hxmath.math.Matrix3x2Default get_matrix() {
			return ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(this.width, 0.0, 0.0, this.height, this.x, this.y)) );
		}
		
		
		public double get_area() {
			return ( this.width * this.height );
		}
		
		
		public bool get_isEmpty() {
			if ( ! ((( this.width <= 0.0 ))) ) {
				return ( this.height <= 0.0 );
			}
			else {
				return true;
			}
			
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 38537191:
					{
						this.height = ((double) (@value) );
						return @value;
					}
					
					
					case 1247983110:
					{
						this.width = ((double) (@value) );
						return @value;
					}
					
					
					case 121:
					{
						this.y = ((double) (@value) );
						return @value;
					}
					
					
					case 120:
					{
						this.x = ((double) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 38537191:
					{
						this.height = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 1247983110:
					{
						this.width = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 121:
					{
						this.y = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 120:
					{
						this.x = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 307904090:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_isEmpty", 307904090)) );
					}
					
					
					case 1076840214:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_area", 1076840214)) );
					}
					
					
					case 743417354:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_matrix", 743417354)) );
					}
					
					
					case 1986172318:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_center", 1986172318)) );
					}
					
					
					case 496919706:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getVertex", 496919706)) );
					}
					
					
					case 188070087:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "addWith", 188070087)) );
					}
					
					
					case 1372624212:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "distanceToRect", 1372624212)) );
					}
					
					
					case 612734496:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "distanceToPoint", 612734496)) );
					}
					
					
					case 317438385:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "containsPoint", 317438385)) );
					}
					
					
					case 1092746885:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "intersectWith", 1092746885)) );
					}
					
					
					case 1114964191:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "intersect", 1114964191)) );
					}
					
					
					case 1160434444:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "overlaps", 1160434444)) );
					}
					
					
					case 1228086416:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "copyTo", 1228086416)) );
					}
					
					
					case 1214452573:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "clone", 1214452573)) );
					}
					
					
					case 1072885311:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "equals", 1072885311)) );
					}
					
					
					case 207609411:
					{
						return this.get_isEmpty();
					}
					
					
					case 1081379725:
					{
						return this.get_area();
					}
					
					
					case 1002976833:
					{
						return this.get_matrix();
					}
					
					
					case 98248149:
					{
						return this.get_center();
					}
					
					
					case 38537191:
					{
						return this.height;
					}
					
					
					case 1247983110:
					{
						return this.width;
					}
					
					
					case 121:
					{
						return this.y;
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1081379725:
					{
						return this.get_area();
					}
					
					
					case 38537191:
					{
						return this.height;
					}
					
					
					case 1247983110:
					{
						return this.width;
					}
					
					
					case 121:
					{
						return this.y;
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 307904090:
					{
						return this.get_isEmpty();
					}
					
					
					case 1076840214:
					{
						return this.get_area();
					}
					
					
					case 743417354:
					{
						return this.get_matrix();
					}
					
					
					case 1986172318:
					{
						return this.get_center();
					}
					
					
					case 496919706:
					{
						return this.getVertex(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
					}
					
					
					case 188070087:
					{
						return this.addWith(((global::hxmath.math.Vector2Default) (dynargs[0]) ));
					}
					
					
					case 1372624212:
					{
						return this.distanceToRect(((global::hxmath.geom.Rect) (dynargs[0]) ));
					}
					
					
					case 612734496:
					{
						return this.distanceToPoint(((global::hxmath.math.Vector2Default) (dynargs[0]) ));
					}
					
					
					case 317438385:
					{
						return this.containsPoint(((global::hxmath.math.Vector2Default) (dynargs[0]) ));
					}
					
					
					case 1092746885:
					{
						return this.intersectWith(((global::hxmath.geom.Rect) (dynargs[0]) ));
					}
					
					
					case 1114964191:
					{
						return this.intersect(((global::hxmath.geom.Rect) (dynargs[0]) ));
					}
					
					
					case 1160434444:
					{
						return this.overlaps(((global::hxmath.geom.Rect) (dynargs[0]) ));
					}
					
					
					case 1228086416:
					{
						this.copyTo(dynargs[0]);
						break;
					}
					
					
					case 1214452573:
					{
						return this.clone();
					}
					
					
					case 1072885311:
					{
						return this.@equals(((global::hxmath.geom.Rect) (dynargs[0]) ));
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("isEmpty");
			baseArr.push("area");
			baseArr.push("matrix");
			baseArr.push("center");
			baseArr.push("height");
			baseArr.push("width");
			baseArr.push("y");
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}


