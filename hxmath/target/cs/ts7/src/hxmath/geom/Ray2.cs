// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hxmath.geom {
	public class Ray2 : global::haxe.lang.HxObject {
		
		public Ray2(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Ray2(global::hxmath.math.Vector2Default origin, global::hxmath.math.Vector2Default normal) {
			global::hxmath.geom.Ray2.__hx_ctor_hxmath_geom_Ray2(this, origin, normal);
		}
		
		
		public static void __hx_ctor_hxmath_geom_Ray2(global::hxmath.geom.Ray2 __temp_me27, global::hxmath.math.Vector2Default origin, global::hxmath.math.Vector2Default normal) {
			__temp_me27.origin = origin;
			__temp_me27.normal = normal;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::hxmath.geom.Ray2(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			unchecked {
				return new global::hxmath.geom.Ray2(((global::hxmath.math.Vector2Default) (arr[0]) ), ((global::hxmath.math.Vector2Default) (arr[1]) ));
			}
		}
		
		
		public global::hxmath.math.Vector2Default origin;
		
		public global::hxmath.math.Vector2Default normal;
		
		public global::hxmath.math.Vector2Default eval(double t) {
			global::hxmath.math.Vector2Default self = ((global::hxmath.math.Vector2Default) (this.normal) );
			global::hxmath.math.Vector2Default self1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self.x, self.y)) );
			self1.x *= t;
			self1.y *= t;
			global::hxmath.math.Vector2Default b = this.origin;
			global::hxmath.math.Vector2Default self2 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self1.x, self1.y)) );
			self2.x += b.x;
			self2.y += b.y;
			return self2;
		}
		
		
		public virtual double intersectPoint(global::hxmath.math.Vector2Default point, global::haxe.lang.Null<double> tolerance) {
			double __temp_tolerance25 = ( ( ! (tolerance.hasValue) ) ? (1e-6) : ((tolerance).@value) );
			global::hxmath.math.Vector2Default self = ((global::hxmath.math.Vector2Default) (this.normal) );
			global::hxmath.math.Vector2Default self1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self.x, self.y)) );
			double newX =  - (self1.y) ;
			self1.y = self1.x;
			self1.x = newX;
			global::hxmath.math.Vector2Default b = this.origin;
			global::hxmath.math.Vector2Default self2 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(point.x, point.y)) );
			self2.x -= b.x;
			self2.y -= b.y;
			if (( ( ( self2.x * self1.x ) + ( self2.y * self1.y ) ) < __temp_tolerance25 )) {
				global::hxmath.math.Vector2Default b1 = this.origin;
				global::hxmath.math.Vector2Default self3 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(point.x, point.y)) );
				self3.x -= b1.x;
				self3.y -= b1.y;
				global::hxmath.math.Vector2Default b2 = this.normal;
				double t = ( ( self3.x * b2.x ) + ( self3.y * b2.y ) );
				if (( t >= 0.0 )) {
					return t;
				}
				
			}
			
			return global::Math.NEGATIVE_INFINITY;
		}
		
		
		public int getClosestPoint(global::Array<object> points, global::haxe.lang.Null<double> tolerance) {
			unchecked {
				double __temp_tolerance26 = ( ( ! (tolerance.hasValue) ) ? (1e-6) : ((tolerance).@value) );
				double closestHit = global::Math.NEGATIVE_INFINITY;
				int hitIndex = -1;
				global::hxmath.math.Vector2Default self = ((global::hxmath.math.Vector2Default) (this.normal) );
				global::hxmath.math.Vector2Default self1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self.x, self.y)) );
				double newX =  - (self1.y) ;
				self1.y = self1.x;
				self1.x = newX;
				{
					int _g1 = 0;
					int _g = points.length;
					while (( _g1 < _g )) {
						int i = _g1++;
						double t = this.intersectPoint(((global::hxmath.math.Vector2Default) (points[i]) ), new global::haxe.lang.Null<double>(__temp_tolerance26, true));
						if (( ( t > 0.0 ) && (( ( hitIndex == -1 ) || ( ( t < closestHit ) && ( t >= 0.0 ) ) )) )) {
							hitIndex = i;
							closestHit = t;
						}
						
					}
					
				}
				
				return hitIndex;
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 812216871:
					{
						this.normal = ((global::hxmath.math.Vector2Default) (@value) );
						return @value;
					}
					
					
					case 1258363366:
					{
						this.origin = ((global::hxmath.math.Vector2Default) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 179404013:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getClosestPoint", 179404013)) );
					}
					
					
					case 951950065:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "intersectPoint", 951950065)) );
					}
					
					
					case 1125936028:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "eval", 1125936028)) );
					}
					
					
					case 812216871:
					{
						return this.normal;
					}
					
					
					case 1258363366:
					{
						return this.origin;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 179404013:
					{
						return this.getClosestPoint(((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (dynargs[0]) ))) ), global::haxe.lang.Null<object>.ofDynamic<double>(dynargs[1]));
					}
					
					
					case 951950065:
					{
						return this.intersectPoint(((global::hxmath.math.Vector2Default) (dynargs[0]) ), global::haxe.lang.Null<object>.ofDynamic<double>(dynargs[1]));
					}
					
					
					case 1125936028:
					{
						return this.eval(((double) (global::haxe.lang.Runtime.toDouble(dynargs[0])) ));
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("normal");
			baseArr.push("origin");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}


