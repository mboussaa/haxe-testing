// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace test {
	public class Test2D : global::test.MathTestCase {
		
		public Test2D(global::haxe.lang.EmptyObject empty) : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
		}
		
		
		public Test2D(object posInfos) : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
			global::test.Test2D.__hx_ctor_test_Test2D(this, posInfos);
		}
		
		
		public static void __hx_ctor_test_Test2D(global::test.Test2D __temp_me56, object posInfos) {
			global::test.MathTestCase.__hx_ctor_test_MathTestCase(__temp_me56, posInfos);
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::test.Test2D(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::test.Test2D(((object) (arr[0]) ));
		}
		
		
		public virtual void testVector2BasicOps() {
			unchecked {
				global::hxmath.math.Vector2Default a = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 0.0)) );
				global::hxmath.math.Vector2Default b = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 1.0)) );
				this.assertTrue(( ( ( a.x * b.x ) + ( a.y * b.y ) ) == 0.0 ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testVector2BasicOps", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (14) )}));
				global::hxmath.math.Vector2Default _g1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 0.0)) );
				global::hxmath.math.Vector2Default self = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(_g1.x, _g1.y)) );
				self.x *= 0.0;
				self.y *= 0.0;
				global::hxmath.math.Vector2Default b1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 0.0)) );
				this.assertTrue(( ( ( self == null ) && ( b1 == null ) ) || ( ( ( ( self != null ) && ( b1 != null ) ) && ( self.x == b1.x ) ) && ( self.y == b1.y ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testVector2BasicOps", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (15) )}));
				global::hxmath.math.IntVector2Default a1 = global::hxmath.math._IntVector2.IntVector2_Impl_._new(1, 0);
				global::hxmath.math.IntVector2Default b2 = global::hxmath.math._IntVector2.IntVector2_Impl_._new(0, 1);
				this.assertTrue(( ( ( a1.x * b2.x ) + ( a1.y * b2.y ) ) == 0 ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testVector2BasicOps", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (17) )}));
				global::hxmath.math.IntVector2Default _g3 = global::hxmath.math._IntVector2.IntVector2_Impl_._new(1, 0);
				global::hxmath.math.IntVector2Default self1 = ((global::hxmath.math.IntVector2Default) (global::hxmath.math._IntVector2.IntVector2_Impl_._new(_g3.x, _g3.y)) );
				self1.x *= 0;
				self1.y *= 0;
				global::hxmath.math.IntVector2Default b3 = global::hxmath.math._IntVector2.IntVector2_Impl_._new(0, 0);
				this.assertTrue(( ( ( self1 == null ) && ( b3 == null ) ) || ( ( ( ( self1 != null ) && ( b3 != null ) ) && ( self1.x == b3.x ) ) && ( self1.y == b3.y ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testVector2BasicOps", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (18) )}));
			}
		}
		
		
		public virtual void testDeterminant() {
			unchecked {
				global::hxmath.math.Matrix2x2Default self = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(1.0, 0.0, 0.0, 1.0)) );
				this.assertTrue(( ( ( self.a * self.d ) - ( self.b * self.c ) ) == 1.0 ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDeterminant", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (23) )}));
			}
		}
		
		
		public virtual void testHomogenousTranslation() {
			unchecked {
				global::hxmath.math.Matrix3x2Default m = ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)) );
				{
					global::hxmath.math.Vector2Default t = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(((double) (3) ), ((double) (-1) ))) );
					m.tx = t.x;
					m.ty = t.y;
				}
				
				global::hxmath.math.Vector2Default v = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 0.0)) );
				global::hxmath.math.Matrix2x2Default m1 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(m.a, m.b, m.c, m.d)) );
				global::hxmath.math.Vector2Default a = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( m1.a * v.x ) + ( m1.b * v.y ) ), ( ( m1.c * v.x ) + ( m1.d * v.y ) ))) );
				global::hxmath.math.Vector2Default b = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(m.tx, m.ty)) );
				global::hxmath.math.Vector2Default self = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a.x, a.y)) );
				self.x += b.x;
				self.y += b.y;
				global::hxmath.math.Vector2Default b1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(m.tx, m.ty)) );
				this.assertTrue(( ( ( self == null ) && ( b1 == null ) ) || ( ( ( ( self != null ) && ( b1 != null ) ) && ( self.x == b1.x ) ) && ( self.y == b1.y ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testHomogenousTranslation", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (30) )}));
			}
		}
		
		
		public virtual void testTranspose() {
			unchecked {
				global::hxmath.math.Matrix2x2Default m = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(global::Math.rand.NextDouble(), global::Math.rand.NextDouble(), global::Math.rand.NextDouble(), global::Math.rand.NextDouble())) );
				global::hxmath.math.Matrix2x2Default self = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(m.a, m.c, m.b, m.d)) );
				global::hxmath.math.Matrix2x2Default n = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(self.a, self.c, self.b, self.d)) );
				global::hxmath.math.Matrix2x2Default self1 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(m.a, m.b, m.c, m.d)) );
				self1.a -= n.a;
				self1.b -= n.b;
				self1.c -= n.c;
				self1.d -= n.d;
				this.assertTrue(( ( ( ( ( self1.a * self1.a ) + ( self1.b * self1.b ) ) + ( self1.c * self1.c ) ) + ( self1.d * self1.d ) ) < 1e-6 ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTranspose", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (44) )}));
			}
		}
		
		
		public virtual void testRotation() {
			unchecked {
				double angle = ( global::Math.PI / 2.0 );
				global::hxmath.math.Matrix2x2Default self = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(0.0, 0.0, 0.0, 0.0)) );
				double s = global::System.Math.Sin(((double) (angle) ));
				double c = global::System.Math.Cos(((double) (angle) ));
				self.a = c;
				self.b =  - (s) ;
				self.c = s;
				self.d = c;
				global::hxmath.math.Vector2Default v = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 0.0)) );
				global::hxmath.math.Vector2Default a = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( self.a * v.x ) + ( self.b * v.y ) ), ( ( self.c * v.x ) + ( self.d * v.y ) ))) );
				global::hxmath.math.Vector2Default b = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 1.0)) );
				global::hxmath.math.Vector2Default self1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a.x, a.y)) );
				self1.x -= b.x;
				self1.y -= b.y;
				global::hxmath.math.Vector2Default self2 = ((global::hxmath.math.Vector2Default) (self1) );
				this.assertApproxEquals(0.0, global::System.Math.Sqrt(((double) (( ( self2.x * self2.x ) + ( self2.y * self2.y ) )) )), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRotation", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (52) )}));
				double angle1 = ( global::Math.PI / 2.0 );
				global::hxmath.math.Matrix2x2Default self3 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(0.0, 0.0, 0.0, 0.0)) );
				double s1 = global::System.Math.Sin(((double) (angle1) ));
				double c1 = global::System.Math.Cos(((double) (angle1) ));
				self3.a = c1;
				self3.b =  - (s1) ;
				self3.c = s1;
				self3.d = c1;
				global::hxmath.math.Vector2Default v1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 1.0)) );
				global::hxmath.math.Vector2Default a1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( self3.a * v1.x ) + ( self3.b * v1.y ) ), ( ( self3.c * v1.x ) + ( self3.d * v1.y ) ))) );
				global::hxmath.math.Vector2Default b1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 0.0)) );
				global::hxmath.math.Vector2Default self4 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a1.x, a1.y)) );
				self4.x += b1.x;
				self4.y += b1.y;
				global::hxmath.math.Vector2Default self5 = ((global::hxmath.math.Vector2Default) (self4) );
				this.assertApproxEquals(0.0, global::System.Math.Sqrt(((double) (( ( self5.x * self5.x ) + ( self5.y * self5.y ) )) )), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRotation", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (53) )}));
			}
		}
		
		
		public virtual void testVectorRotate() {
			unchecked {
				global::hxmath.math.Vector2Default this1 = new global::hxmath.math.Vector2Default(1.0, 0.0);
				double angle = ( global::Math.PI / 2.0 );
				global::hxmath.math.Vector2Default pivot = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 0.0)) );
				global::hxmath.math.Vector2Default self = ((global::hxmath.math.Vector2Default) (this1) );
				global::System.Math.Cos(((double) (angle) ));
				global::System.Math.Sin(((double) (angle) ));
				double dx = ( self.x - pivot.x );
				double dy = ( self.y - pivot.y );
				self.x = ( ( dx * global::System.Math.Cos(((double) (angle) )) ) - ( dy * global::System.Math.Sin(((double) (angle) )) ) );
				self.y = ( ( dx * global::System.Math.Sin(((double) (angle) )) ) + ( dy * global::System.Math.Cos(((double) (angle) )) ) );
				global::hxmath.math.Vector2Default b = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 1.0)) );
				global::hxmath.math.Vector2Default self1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self.x, self.y)) );
				self1.x -= b.x;
				self1.y -= b.y;
				global::hxmath.math.Vector2Default self2 = ((global::hxmath.math.Vector2Default) (self1) );
				this.assertApproxEquals(0.0, global::System.Math.Sqrt(((double) (( ( self2.x * self2.x ) + ( self2.y * self2.y ) )) )), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testVectorRotate", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (61) )}));
				global::hxmath.math.Vector2Default this2 = new global::hxmath.math.Vector2Default(0.0, 1.0);
				double angle1 = ( global::Math.PI / 2.0 );
				global::hxmath.math.Vector2Default pivot1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 0.0)) );
				global::hxmath.math.Vector2Default self3 = ((global::hxmath.math.Vector2Default) (this2) );
				global::System.Math.Cos(((double) (angle1) ));
				global::System.Math.Sin(((double) (angle1) ));
				double dx1 = ( self3.x - pivot1.x );
				double dy1 = ( self3.y - pivot1.y );
				self3.x = ( ( dx1 * global::System.Math.Cos(((double) (angle1) )) ) - ( dy1 * global::System.Math.Sin(((double) (angle1) )) ) );
				self3.y = ( ( dx1 * global::System.Math.Sin(((double) (angle1) )) ) + ( dy1 * global::System.Math.Cos(((double) (angle1) )) ) );
				global::hxmath.math.Vector2Default b1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 0.0)) );
				global::hxmath.math.Vector2Default self4 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self3.x, self3.y)) );
				self4.x += b1.x;
				self4.y += b1.y;
				global::hxmath.math.Vector2Default self5 = ((global::hxmath.math.Vector2Default) (self4) );
				this.assertApproxEquals(0.0, global::System.Math.Sqrt(((double) (( ( self5.x * self5.x ) + ( self5.y * self5.y ) )) )), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testVectorRotate", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (62) )}));
			}
		}
		
		
		public virtual void testPolarConversion() {
			unchecked {
				double angle = global::Math.PI;
				global::hxmath.math.Vector2Default a = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(global::System.Math.Cos(((double) (angle) )), global::System.Math.Sin(((double) (angle) )))) );
				global::hxmath.math.Vector2Default b = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 0.0)) );
				global::hxmath.math.Vector2Default self = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a.x, a.y)) );
				self.x += b.x;
				self.y += b.y;
				global::hxmath.math.Vector2Default self1 = ((global::hxmath.math.Vector2Default) (self) );
				this.assertApproxEquals(0.0, global::System.Math.Sqrt(((double) (( ( self1.x * self1.x ) + ( self1.y * self1.y ) )) )), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPolarConversion", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (67) )}));
				double tmp = global::Math.PI;
				global::hxmath.math.Vector2Default a1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 0.0)) );
				global::hxmath.math.Vector2Default self2 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default( - (a1.x) ,  - (a1.y) )) );
				this.assertApproxEquals(tmp, global::System.Math.Abs(((double) (global::System.Math.Atan2(((double) (self2.y) ), ((double) (self2.x) ))) )), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPolarConversion", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (70) )}));
			}
		}
		
		
		public virtual void testNorms() {
			unchecked {
				global::hxmath.math.Vector2Default self = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 1.0)) );
				global::hxmath.math.Vector2Default self1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self.x, self.y)) );
				double length = global::System.Math.Sqrt(((double) (( ( self1.x * self1.x ) + ( self1.y * self1.y ) )) ));
				if (( length > 0.0 )) {
					self1.x /= length;
					self1.y /= length;
				}
				
				global::hxmath.math.Vector2Default self2 = ((global::hxmath.math.Vector2Default) (self1) );
				global::hxmath.math.Vector2Default self3 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self2.x, self2.y)) );
				double newX =  - (self3.y) ;
				self3.y = self3.x;
				self3.x = newX;
				global::hxmath.math.Vector2Default b = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(((double) (-1) ), ((double) (0) ))) );
				this.assertTrue(( ( ( self3.x * b.x ) + ( self3.y * b.y ) ) > 0.0 ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNorms", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (75) )}));
				global::hxmath.math.Vector2Default self4 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 1.0)) );
				global::hxmath.math.Vector2Default self5 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self4.x, self4.y)) );
				double length1 = global::System.Math.Sqrt(((double) (( ( self5.x * self5.x ) + ( self5.y * self5.y ) )) ));
				if (( length1 > 0.0 )) {
					self5.x /= length1;
					self5.y /= length1;
				}
				
				global::hxmath.math.Vector2Default self6 = ((global::hxmath.math.Vector2Default) (self5) );
				global::hxmath.math.Vector2Default self7 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self6.x, self6.y)) );
				double newX1 = self7.y;
				self7.y =  - (self7.x) ;
				self7.x = newX1;
				global::hxmath.math.Vector2Default b1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(((double) (-1) ), ((double) (0) ))) );
				this.assertTrue(( ( ( self7.x * b1.x ) + ( self7.y * b1.y ) ) < 0.0 ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNorms", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (76) )}));
			}
		}
		
		
		public virtual void testAngles() {
			unchecked {
				global::hxmath.math.Vector2Default this1 = new global::hxmath.math.Vector2Default(0.0, 1.0);
				global::hxmath.math.Vector2Default b = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(((double) (-1) ), ((double) (1) ))) );
				global::hxmath.math.Vector2Default self = ((global::hxmath.math.Vector2Default) (this1) );
				double x = ( ( self.x * b.y ) - ( b.x * self.y ) );
				double w = ((double) (0) );
				this.assertApproxEquals(( (( (( global::System.Math.Abs(((double) (x) )) < w )) ? (0) : (( (( x <=  - (w)  )) ? (-1) : (1) )) )) * global::System.Math.Acos(((double) (( (( ( self.x * b.x ) + ( self.y * b.y ) )) / (( global::System.Math.Sqrt(((double) (( ( self.x * self.x ) + ( self.y * self.y ) )) )) * global::System.Math.Sqrt(((double) (( ( b.x * b.x ) + ( b.y * b.y ) )) )) )) )) )) ), ( global::Math.PI / 4.0 ), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAngles", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (81) )}));
				global::hxmath.math.Vector2Default this2 = new global::hxmath.math.Vector2Default(0.0, 1.0);
				global::hxmath.math.Vector2Default b1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(((double) (1) ), ((double) (1) ))) );
				global::hxmath.math.Vector2Default self1 = ((global::hxmath.math.Vector2Default) (this2) );
				double x1 = ( ( self1.x * b1.y ) - ( b1.x * self1.y ) );
				double w1 = ((double) (0) );
				this.assertApproxEquals(( (( (( global::System.Math.Abs(((double) (x1) )) < w1 )) ? (0) : (( (( x1 <=  - (w1)  )) ? (-1) : (1) )) )) * global::System.Math.Acos(((double) (( (( ( self1.x * b1.x ) + ( self1.y * b1.y ) )) / (( global::System.Math.Sqrt(((double) (( ( self1.x * self1.x ) + ( self1.y * self1.y ) )) )) * global::System.Math.Sqrt(((double) (( ( b1.x * b1.x ) + ( b1.y * b1.y ) )) )) )) )) )) ), (  - (global::Math.PI)  / 4.0 ), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAngles", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (82) )}));
				global::hxmath.math.Vector2Default this3 = new global::hxmath.math.Vector2Default(0.0, 1.0);
				global::hxmath.math.Vector2Default b2 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(((double) (-1) ), ((double) (-1) ))) );
				global::hxmath.math.Vector2Default self2 = ((global::hxmath.math.Vector2Default) (this3) );
				double x2 = ( ( self2.x * b2.y ) - ( b2.x * self2.y ) );
				double w2 = ((double) (0) );
				this.assertApproxEquals(( (( (( global::System.Math.Abs(((double) (x2) )) < w2 )) ? (0) : (( (( x2 <=  - (w2)  )) ? (-1) : (1) )) )) * global::System.Math.Acos(((double) (( (( ( self2.x * b2.x ) + ( self2.y * b2.y ) )) / (( global::System.Math.Sqrt(((double) (( ( self2.x * self2.x ) + ( self2.y * self2.y ) )) )) * global::System.Math.Sqrt(((double) (( ( b2.x * b2.x ) + ( b2.y * b2.y ) )) )) )) )) )) ), ( ( 3.0 * global::Math.PI ) / 4.0 ), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAngles", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (83) )}));
				global::hxmath.math.Vector2Default this4 = new global::hxmath.math.Vector2Default(0.0, 1.0);
				global::hxmath.math.Vector2Default b3 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(((double) (1) ), ((double) (-1) ))) );
				global::hxmath.math.Vector2Default self3 = ((global::hxmath.math.Vector2Default) (this4) );
				double x3 = ( ( self3.x * b3.y ) - ( b3.x * self3.y ) );
				double w3 = ((double) (0) );
				this.assertApproxEquals(( (( (( global::System.Math.Abs(((double) (x3) )) < w3 )) ? (0) : (( (( x3 <=  - (w3)  )) ? (-1) : (1) )) )) * global::System.Math.Acos(((double) (( (( ( self3.x * b3.x ) + ( self3.y * b3.y ) )) / (( global::System.Math.Sqrt(((double) (( ( self3.x * self3.x ) + ( self3.y * self3.y ) )) )) * global::System.Math.Sqrt(((double) (( ( b3.x * b3.x ) + ( b3.y * b3.y ) )) )) )) )) )) ), ( ( -3.0 * global::Math.PI ) / 4.0 ), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAngles", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (84) )}));
				global::hxmath.math.Vector2Default this5 = new global::hxmath.math.Vector2Default(0.0, 1.0);
				global::hxmath.math.Vector2Default b4 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 0.0)) );
				global::hxmath.math.Vector2Default self4 = ((global::hxmath.math.Vector2Default) (this5) );
				double x4 = ( ( self4.x * b4.y ) - ( b4.x * self4.y ) );
				double w4 = ((double) (0) );
				this.assertApproxEquals(( (( (( global::System.Math.Abs(((double) (x4) )) < w4 )) ? (0) : (( (( x4 <=  - (w4)  )) ? (-1) : (1) )) )) * global::System.Math.Acos(((double) (( (( ( self4.x * b4.x ) + ( self4.y * b4.y ) )) / (( global::System.Math.Sqrt(((double) (( ( self4.x * self4.x ) + ( self4.y * self4.y ) )) )) * global::System.Math.Sqrt(((double) (( ( b4.x * b4.x ) + ( b4.y * b4.y ) )) )) )) )) )) ), (  - (global::Math.PI)  / 2.0 ), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAngles", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (86) )}));
				global::hxmath.math.Vector2Default this6 = new global::hxmath.math.Vector2Default(1.0, 0.0);
				global::hxmath.math.Vector2Default b5 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 1.0)) );
				global::hxmath.math.Vector2Default self5 = ((global::hxmath.math.Vector2Default) (this6) );
				double x5 = ( ( self5.x * b5.y ) - ( b5.x * self5.y ) );
				double w5 = ((double) (0) );
				this.assertApproxEquals(( (( (( global::System.Math.Abs(((double) (x5) )) < w5 )) ? (0) : (( (( x5 <=  - (w5)  )) ? (-1) : (1) )) )) * global::System.Math.Acos(((double) (( (( ( self5.x * b5.x ) + ( self5.y * b5.y ) )) / (( global::System.Math.Sqrt(((double) (( ( self5.x * self5.x ) + ( self5.y * self5.y ) )) )) * global::System.Math.Sqrt(((double) (( ( b5.x * b5.x ) + ( b5.y * b5.y ) )) )) )) )) )) ), ( global::Math.PI / 2.0 ), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAngles", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (87) )}));
				global::hxmath.math.Vector2Default this7 = new global::hxmath.math.Vector2Default(0.0, 1.0);
				global::hxmath.math.Vector2Default b6 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 0.0)) );
				global::hxmath.math.Vector2Default self6 = ((global::hxmath.math.Vector2Default) (this7) );
				this.assertApproxEquals(global::System.Math.Acos(((double) (( (( ( self6.x * b6.x ) + ( self6.y * b6.y ) )) / (( global::System.Math.Sqrt(((double) (( ( self6.x * self6.x ) + ( self6.y * self6.y ) )) )) * global::System.Math.Sqrt(((double) (( ( b6.x * b6.x ) + ( b6.y * b6.y ) )) )) )) )) )), ( global::Math.PI / 2.0 ), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAngles", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (89) )}));
				global::hxmath.math.Vector2Default this8 = new global::hxmath.math.Vector2Default(1.0, 0.0);
				global::hxmath.math.Vector2Default b7 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 1.0)) );
				global::hxmath.math.Vector2Default self7 = ((global::hxmath.math.Vector2Default) (this8) );
				this.assertApproxEquals(global::System.Math.Acos(((double) (( (( ( self7.x * b7.x ) + ( self7.y * b7.y ) )) / (( global::System.Math.Sqrt(((double) (( ( self7.x * self7.x ) + ( self7.y * self7.y ) )) )) * global::System.Math.Sqrt(((double) (( ( b7.x * b7.x ) + ( b7.y * b7.y ) )) )) )) )) )), ( global::Math.PI / 2.0 ), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAngles", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (90) )}));
			}
		}
		
		
		public virtual void testOrbit() {
			unchecked {
				int _g = 0;
				while (( _g < 5 )) {
					 ++ _g;
					global::hxmath.math.Vector2Default a = this.randomVector2(default(global::haxe.lang.Null<double>));
					global::hxmath.math.Vector2Default b = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(((double) (1) ), ((double) (1) ))) );
					global::hxmath.math.Vector2Default self = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a.x, a.y)) );
					self.x += b.x;
					self.y += b.y;
					double angle = ( global::Math.PI / 2 );
					global::hxmath.math.Matrix3x2Default m = ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)) );
					{
						global::hxmath.math.Matrix2x2Default self1 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(0.0, 0.0, 0.0, 0.0)) );
						double s = global::System.Math.Sin(((double) (angle) ));
						double c = global::System.Math.Cos(((double) (angle) ));
						self1.a = c;
						self1.b =  - (s) ;
						self1.c = s;
						self1.d = c;
						m.a = self1.a;
						m.b = self1.b;
						m.c = self1.c;
						m.d = self1.d;
					}
					
					{
						global::hxmath.math.Matrix2x2Default m1 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(m.a, m.b, m.c, m.d)) );
						global::hxmath.math.Vector2Default b1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( m1.a * self.x ) + ( m1.b * self.y ) ), ( ( m1.c * self.x ) + ( m1.d * self.y ) ))) );
						global::hxmath.math.Vector2Default self2 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self.x, self.y)) );
						self2.x -= b1.x;
						self2.y -= b1.y;
						m.tx = self2.x;
						m.ty = self2.y;
					}
					
					{
						int _g1 = 0;
						while (( _g1 < 5 )) {
							 ++ _g1;
							global::hxmath.math.Vector2Default point = this.randomVector2(default(global::haxe.lang.Null<double>));
							global::hxmath.math.Matrix2x2Default m2 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(m.a, m.b, m.c, m.d)) );
							global::hxmath.math.Vector2Default a1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( m2.a * point.x ) + ( m2.b * point.y ) ), ( ( m2.c * point.x ) + ( m2.d * point.y ) ))) );
							global::hxmath.math.Vector2Default b2 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(m.tx, m.ty)) );
							global::hxmath.math.Vector2Default self3 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a1.x, a1.y)) );
							self3.x += b2.x;
							self3.y += b2.y;
							global::hxmath.math.Vector2Default self4 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(point.x, point.y)) );
							self4.x -= self.x;
							self4.y -= self.y;
							global::hxmath.math.Vector2Default self5 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self3.x, self3.y)) );
							self5.x -= self.x;
							self5.y -= self.y;
							this.assertApproxEquals(0.0, ( ( self4.x * self5.x ) + ( self4.y * self5.y ) ), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOrbit", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (104) )}));
						}
						
					}
					
				}
				
			}
		}
		
		
		public virtual void testLinearSubMatrix() {
			unchecked {
				global::hxmath.math.Matrix3x2Default m = ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)) );
				{
					global::hxmath.math.Matrix2x2Default @value = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(1.0, 2.0, 3.0, 4.0)) );
					m.a = @value.a;
					m.b = @value.b;
					m.c = @value.c;
					m.d = @value.d;
				}
				
				global::hxmath.math.Matrix2x2Default m1 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(m.a, m.b, m.c, m.d)) );
				global::hxmath.math.Matrix2x2Default n = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(1.0, 2.0, 3.0, 4.0)) );
				this.assertTrue(( ( ( m1 == null ) && ( n == null ) ) || ( ( ( ( ( ( m1 != null ) && ( n != null ) ) && ( m1.a == n.a ) ) && ( m1.b == n.b ) ) && ( m1.c == n.c ) ) && ( m1.d == n.d ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLinearSubMatrix", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (113) )}));
			}
		}
		
		
		public virtual void testMatrixFrameInverse() {
			unchecked {
				int _g = 0;
				while (( _g < 10 )) {
					 ++ _g;
					global::hxmath.frames.IFrame2 frame = this.randomFrame2(default(global::haxe.lang.Null<double>));
					global::hxmath.math.Matrix3x2Default self = ((global::hxmath.math.Matrix3x2Default) (frame.get_matrix()) );
					global::hxmath.math.Matrix2x2Default this1 = new global::hxmath.math.Matrix2x2Default(self.a, self.b, self.c, self.d);
					global::hxmath.math.Vector2Default v = frame.get_offset();
					global::hxmath.math.Matrix2x2Default self1 = ((global::hxmath.math.Matrix2x2Default) (this1) );
					global::hxmath.math.Vector2Default self2 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( self1.a * v.x ) + ( self1.c * v.y ) ), ( ( self1.b * v.x ) + ( self1.d * v.y ) ))) );
					self2.x =  - (self2.x) ;
					self2.y =  - (self2.y) ;
					global::hxmath.frames.IFrame2 invFrame = global::hxmath.frames._Frame2.Frame2_Impl_._new(self2,  - (frame.get_angleDegrees()) );
					frame.get_matrix();
					global::hxmath.math.Matrix3x2Default invFrameMatrix = invFrame.get_matrix();
					global::hxmath.math.Matrix3x2Default self3 = ((global::hxmath.math.Matrix3x2Default) (frame.get_matrix()) );
					{
						double temp = self3.c;
						self3.c = self3.b;
						self3.b = temp;
					}
					
					double tx =  - ((( ( self3.a * self3.tx ) + ( self3.b * self3.ty ) ))) ;
					double ty =  - ((( ( self3.c * self3.tx ) + ( self3.d * self3.ty ) ))) ;
					self3.tx = tx;
					self3.ty = ty;
					global::hxmath.math.Vector2Default homogenous0 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 0.0)) );
					global::hxmath.math.Vector2Default homogenousX = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 0.0)) );
					global::hxmath.math.Vector2Default homogenousY = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 1.0)) );
					global::hxmath.math.Matrix2x2Default m = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(invFrameMatrix.a, invFrameMatrix.b, invFrameMatrix.c, invFrameMatrix.d)) );
					global::hxmath.math.Vector2Default a = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( m.a * homogenous0.x ) + ( m.b * homogenous0.y ) ), ( ( m.c * homogenous0.x ) + ( m.d * homogenous0.y ) ))) );
					global::hxmath.math.Vector2Default b = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(invFrameMatrix.tx, invFrameMatrix.ty)) );
					global::hxmath.math.Vector2Default self4 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a.x, a.y)) );
					self4.x += b.x;
					self4.y += b.y;
					global::hxmath.math.Matrix2x2Default m1 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(self3.a, self3.b, self3.c, self3.d)) );
					global::hxmath.math.Vector2Default a1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( m1.a * homogenous0.x ) + ( m1.b * homogenous0.y ) ), ( ( m1.c * homogenous0.x ) + ( m1.d * homogenous0.y ) ))) );
					global::hxmath.math.Vector2Default b1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self3.tx, self3.ty)) );
					global::hxmath.math.Vector2Default self5 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a1.x, a1.y)) );
					self5.x += b1.x;
					self5.y += b1.y;
					global::hxmath.math.Vector2Default self6 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self4.x, self4.y)) );
					self6.x -= self5.x;
					self6.y -= self5.y;
					global::hxmath.math.Vector2Default self7 = ((global::hxmath.math.Vector2Default) (self6) );
					this.assertApproxEquals(0.0, ( ( self7.x * self7.x ) + ( self7.y * self7.y ) ), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMatrixFrameInverse", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (138) )}));
					global::hxmath.math.Matrix2x2Default m2 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(invFrameMatrix.a, invFrameMatrix.b, invFrameMatrix.c, invFrameMatrix.d)) );
					global::hxmath.math.Vector2Default a2 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( m2.a * homogenousX.x ) + ( m2.b * homogenousX.y ) ), ( ( m2.c * homogenousX.x ) + ( m2.d * homogenousX.y ) ))) );
					global::hxmath.math.Vector2Default b2 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(invFrameMatrix.tx, invFrameMatrix.ty)) );
					global::hxmath.math.Vector2Default self8 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a2.x, a2.y)) );
					self8.x += b2.x;
					self8.y += b2.y;
					global::hxmath.math.Matrix2x2Default m3 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(self3.a, self3.b, self3.c, self3.d)) );
					global::hxmath.math.Vector2Default a3 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( m3.a * homogenousX.x ) + ( m3.b * homogenousX.y ) ), ( ( m3.c * homogenousX.x ) + ( m3.d * homogenousX.y ) ))) );
					global::hxmath.math.Vector2Default b3 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self3.tx, self3.ty)) );
					global::hxmath.math.Vector2Default self9 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a3.x, a3.y)) );
					self9.x += b3.x;
					self9.y += b3.y;
					global::hxmath.math.Vector2Default self10 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self8.x, self8.y)) );
					self10.x -= self9.x;
					self10.y -= self9.y;
					global::hxmath.math.Vector2Default self11 = ((global::hxmath.math.Vector2Default) (self10) );
					this.assertApproxEquals(0.0, ( ( self11.x * self11.x ) + ( self11.y * self11.y ) ), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMatrixFrameInverse", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (139) )}));
					global::hxmath.math.Matrix2x2Default m4 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(invFrameMatrix.a, invFrameMatrix.b, invFrameMatrix.c, invFrameMatrix.d)) );
					global::hxmath.math.Vector2Default a4 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( m4.a * homogenousY.x ) + ( m4.b * homogenousY.y ) ), ( ( m4.c * homogenousY.x ) + ( m4.d * homogenousY.y ) ))) );
					global::hxmath.math.Vector2Default b4 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(invFrameMatrix.tx, invFrameMatrix.ty)) );
					global::hxmath.math.Vector2Default self12 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a4.x, a4.y)) );
					self12.x += b4.x;
					self12.y += b4.y;
					global::hxmath.math.Matrix2x2Default m5 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(self3.a, self3.b, self3.c, self3.d)) );
					global::hxmath.math.Vector2Default a5 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( m5.a * homogenousY.x ) + ( m5.b * homogenousY.y ) ), ( ( m5.c * homogenousY.x ) + ( m5.d * homogenousY.y ) ))) );
					global::hxmath.math.Vector2Default b5 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self3.tx, self3.ty)) );
					global::hxmath.math.Vector2Default self13 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a5.x, a5.y)) );
					self13.x += b5.x;
					self13.y += b5.y;
					global::hxmath.math.Vector2Default self14 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self12.x, self12.y)) );
					self14.x -= self13.x;
					self14.y -= self13.y;
					global::hxmath.math.Vector2Default self15 = ((global::hxmath.math.Vector2Default) (self14) );
					this.assertApproxEquals(0.0, ( ( self15.x * self15.x ) + ( self15.y * self15.y ) ), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMatrixFrameInverse", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (140) )}));
				}
				
			}
		}
		
		
		public virtual void testOrthoNormalize() {
			unchecked {
				int _g = 0;
				while (( _g < 10 )) {
					 ++ _g;
					global::hxmath.math.Vector2Default u = this.randomVector2(default(global::haxe.lang.Null<double>));
					global::hxmath.math.Vector2Default v = this.randomVector2(default(global::haxe.lang.Null<double>));
					{
						{
							double length = global::System.Math.Sqrt(((double) (( ( u.x * u.x ) + ( u.y * u.y ) )) ));
							if (( length > 0.0 )) {
								u.x /= length;
								u.y /= length;
							}
							
						}
						
						{
							global::hxmath.math.Vector2Default self = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(v.x, v.y)) );
							double s = ( (( ( self.x * u.x ) + ( self.y * u.y ) )) / (( ( u.x * u.x ) + ( u.y * u.y ) )) );
							{
								int _g1 = 0;
								while (( _g1 < 2 )) {
									int i = _g1++;
									{
										object tmp = null;
										switch (i) {
											case 0:
											{
												tmp = u.x;
												break;
											}
											
											
											case 1:
											{
												tmp = u.y;
												break;
											}
											
											
											default:
											{
												throw global::haxe.lang.HaxeException.wrap("Invalid element");
											}
											
										}
										
										double @value = ((double) (global::haxe.lang.Runtime.toDouble(tmp)) );
										switch (i) {
											case 0:
											{
												self.x = @value;
												break;
											}
											
											
											case 1:
											{
												self.y = @value;
												break;
											}
											
											
											default:
											{
												throw global::haxe.lang.HaxeException.wrap("Invalid element");
											}
											
										}
										
									}
									
								}
								
							}
							
							{
								self.x *= s;
								self.y *= s;
							}
							
							v.x -= self.x;
							v.y -= self.y;
						}
						
						{
							double length1 = global::System.Math.Sqrt(((double) (( ( v.x * v.x ) + ( v.y * v.y ) )) ));
							if (( length1 > 0.0 )) {
								v.x /= length1;
								v.y /= length1;
							}
							
						}
						
					}
					
					this.assertApproxEquals(1.0, global::System.Math.Sqrt(((double) (( ( u.x * u.x ) + ( u.y * u.y ) )) )), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOrthoNormalize", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (153) )}));
					this.assertApproxEquals(1.0, global::System.Math.Sqrt(((double) (( ( v.x * v.x ) + ( v.y * v.y ) )) )), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOrthoNormalize", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (154) )}));
					this.assertApproxEquals(0.0, ( ( u.x * v.x ) + ( u.y * v.y ) ), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOrthoNormalize", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (155) )}));
				}
				
			}
		}
		
		
		public virtual void testReflect() {
			unchecked {
				int _g = 0;
				while (( _g < 10 )) {
					 ++ _g;
					global::hxmath.math.Vector2Default u = this.randomVector2(default(global::haxe.lang.Null<double>));
					global::hxmath.math.Vector2Default normal = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 1.0)) );
					global::hxmath.math.Vector2Default self = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(u.x, u.y)) );
					global::hxmath.math.Vector2Default self1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self.x, self.y)) );
					double s = ( (( ( self1.x * normal.x ) + ( self1.y * normal.y ) )) / (( ( normal.x * normal.x ) + ( normal.y * normal.y ) )) );
					{
						int _g1 = 0;
						while (( _g1 < 2 )) {
							int i = _g1++;
							{
								object tmp = null;
								switch (i) {
									case 0:
									{
										tmp = normal.x;
										break;
									}
									
									
									case 1:
									{
										tmp = normal.y;
										break;
									}
									
									
									default:
									{
										throw global::haxe.lang.HaxeException.wrap("Invalid element");
									}
									
								}
								
								double @value = ((double) (global::haxe.lang.Runtime.toDouble(tmp)) );
								switch (i) {
									case 0:
									{
										self1.x = @value;
										break;
									}
									
									
									case 1:
									{
										self1.y = @value;
										break;
									}
									
									
									default:
									{
										throw global::haxe.lang.HaxeException.wrap("Invalid element");
									}
									
								}
								
							}
							
						}
						
					}
					
					{
						self1.x *= s;
						self1.y *= s;
					}
					
					{
						self1.x *= 2.0;
						self1.y *= 2.0;
					}
					
					{
						self.x -= self1.x;
						self.y -= self1.y;
					}
					
					this.assertEquals<double>(((double) (u.x) ), ((double) (self.x) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testReflect", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (166) )})) ));
					this.assertEquals<double>(((double) ( - (u.y) ) ), ((double) (self.y) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testReflect", "test.Test2D", "Test2D.hx"}, new int[]{1981972957}, new double[]{((double) (167) )})) ));
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 636645899:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testReflect", 636645899)) );
					}
					
					
					case 1915543847:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testOrthoNormalize", 1915543847)) );
					}
					
					
					case 1198379990:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testMatrixFrameInverse", 1198379990)) );
					}
					
					
					case 1997703434:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testLinearSubMatrix", 1997703434)) );
					}
					
					
					case 2116136408:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testOrbit", 2116136408)) );
					}
					
					
					case 2081250098:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testAngles", 2081250098)) );
					}
					
					
					case 1758174469:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testNorms", 1758174469)) );
					}
					
					
					case 755993666:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testPolarConversion", 755993666)) );
					}
					
					
					case 1234183920:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testVectorRotate", 1234183920)) );
					}
					
					
					case 2072863664:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testRotation", 2072863664)) );
					}
					
					
					case 2137640391:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTranspose", 2137640391)) );
					}
					
					
					case 528439289:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testHomogenousTranslation", 528439289)) );
					}
					
					
					case 115624547:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testDeterminant", 115624547)) );
					}
					
					
					case 653906721:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testVector2BasicOps", 653906721)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 636645899:
					{
						this.testReflect();
						break;
					}
					
					
					case 1915543847:
					{
						this.testOrthoNormalize();
						break;
					}
					
					
					case 1198379990:
					{
						this.testMatrixFrameInverse();
						break;
					}
					
					
					case 1997703434:
					{
						this.testLinearSubMatrix();
						break;
					}
					
					
					case 2116136408:
					{
						this.testOrbit();
						break;
					}
					
					
					case 2081250098:
					{
						this.testAngles();
						break;
					}
					
					
					case 1758174469:
					{
						this.testNorms();
						break;
					}
					
					
					case 755993666:
					{
						this.testPolarConversion();
						break;
					}
					
					
					case 1234183920:
					{
						this.testVectorRotate();
						break;
					}
					
					
					case 2072863664:
					{
						this.testRotation();
						break;
					}
					
					
					case 2137640391:
					{
						this.testTranspose();
						break;
					}
					
					
					case 528439289:
					{
						this.testHomogenousTranslation();
						break;
					}
					
					
					case 115624547:
					{
						this.testDeterminant();
						break;
					}
					
					
					case 653906721:
					{
						this.testVector2BasicOps();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
	}
}


