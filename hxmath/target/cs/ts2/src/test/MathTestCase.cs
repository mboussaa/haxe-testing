// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace test {
	public class MathTestCase : global::nanotest.NanoTestCase {
		
		public MathTestCase(global::haxe.lang.EmptyObject empty) : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
		}
		
		
		public MathTestCase(object posInfos) : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
			global::test.MathTestCase.__hx_ctor_test_MathTestCase(this, posInfos);
		}
		
		
		public static void __hx_ctor_test_MathTestCase(global::test.MathTestCase __temp_me54, object posInfos) {
			global::nanotest.NanoTestCase.__hx_ctor_nanotest_NanoTestCase(__temp_me54, posInfos);
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::test.MathTestCase(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::test.MathTestCase(((object) (arr[0]) ));
		}
		
		
		public virtual double randomFloat(global::haxe.lang.Null<double> center, global::haxe.lang.Null<double> width, global::haxe.lang.Null<double> precision) {
			double __temp_precision42 = ( ( ! (precision.hasValue) ) ? (1e-4) : ((precision).@value) );
			double __temp_width41 = ( ( ! (width.hasValue) ) ? (1.0) : ((width).@value) );
			double __temp_center40 = ( ( ! (center.hasValue) ) ? (0.0) : ((center).@value) );
			return ( ((int) (global::System.Math.Floor(((double) (( (( ( (( global::Math.rand.NextDouble() - 0.5 )) * __temp_width41 ) + __temp_center40 )) / __temp_precision42 )) ))) ) * __temp_precision42 );
		}
		
		
		public virtual int randomInt() {
			unchecked {
				return ((int) (global::System.Math.Floor(((double) (( global::Math.rand.NextDouble() * 10 )) ))) );
			}
		}
		
		
		public virtual global::Array<double> randomArray(int size, global::test.Distribution distribution) {
			global::Array<double> data = new global::Array<double>();
			global::test.Distribution distribution1 = ( (( distribution == null )) ? (new global::test.Distribution()) : (distribution) );
			{
				int _g1 = 0;
				while (( _g1 < size )) {
					 ++ _g1;
					data.push(this.randomFloat(new global::haxe.lang.Null<double>(distribution1.center, true), new global::haxe.lang.Null<double>(distribution1.width, true), new global::haxe.lang.Null<double>(distribution1.precision, true)));
				}
				
			}
			
			return data;
		}
		
		
		public virtual void assertApproxEquals(double expected, double actual, global::haxe.lang.Null<double> tolerance, object p) {
			double __temp_tolerance43 = ( ( ! (tolerance.hasValue) ) ? (1e-6) : ((tolerance).@value) );
			if (( global::System.Math.Abs(((double) (( expected - actual )) )) < __temp_tolerance43 )) {
				this.success(p);
			}
			else {
				this.fail(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::haxe.lang.Runtime.toString(expected)), " +-"), global::haxe.lang.Runtime.toString(__temp_tolerance43)), " but was "), global::haxe.lang.Runtime.toString(actual)), p);
			}
			
		}
		
		
		public virtual global::hxmath.math.Vector2Default randomVector2(global::haxe.lang.Null<double> precision) {
			unchecked {
				double __temp_precision44 = ( ( ! (precision.hasValue) ) ? (1e-4) : ((precision).@value) );
				global::test.Distribution distribution = new global::test.Distribution();
				distribution.precision = __temp_precision44;
				global::Array<double> rawData = this.randomArray(2, distribution);
				if (( rawData.length != 2 )) {
					throw global::haxe.lang.HaxeException.wrap("Invalid rawData.");
				}
				
				return ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(rawData[0], rawData[1])) );
			}
		}
		
		
		public virtual global::hxmath.math.Vector3Default randomVector3(global::haxe.lang.Null<double> precision) {
			unchecked {
				double __temp_precision45 = ( ( ! (precision.hasValue) ) ? (1e-4) : ((precision).@value) );
				global::test.Distribution distribution = new global::test.Distribution();
				distribution.precision = __temp_precision45;
				global::Array<double> rawData = this.randomArray(3, distribution);
				if (( rawData.length != 3 )) {
					throw global::haxe.lang.HaxeException.wrap("Invalid rawData.");
				}
				
				return ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(rawData[0], rawData[1], rawData[2])) );
			}
		}
		
		
		public virtual global::hxmath.math.Vector4Default randomVector4(global::haxe.lang.Null<double> precision) {
			unchecked {
				double __temp_precision46 = ( ( ! (precision.hasValue) ) ? (1e-4) : ((precision).@value) );
				global::test.Distribution distribution = new global::test.Distribution();
				distribution.precision = __temp_precision46;
				global::Array<double> rawData = this.randomArray(4, distribution);
				if (( rawData.length != 4 )) {
					throw global::haxe.lang.HaxeException.wrap("Invalid rawData.");
				}
				
				return ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(rawData[0], rawData[1], rawData[2], rawData[3])) );
			}
		}
		
		
		public virtual global::hxmath.math.Matrix2x2Default randomMatrix2x2(global::haxe.lang.Null<double> precision) {
			unchecked {
				double __temp_precision47 = ( ( ! (precision.hasValue) ) ? (1e-4) : ((precision).@value) );
				global::test.Distribution distribution = new global::test.Distribution();
				distribution.precision = __temp_precision47;
				global::Array<double> rawData = this.randomArray(4, distribution);
				if (( rawData.length != 4 )) {
					throw global::haxe.lang.HaxeException.wrap("Invalid rawData.");
				}
				
				return ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(rawData[0], rawData[1], rawData[2], rawData[3])) );
			}
		}
		
		
		public virtual global::hxmath.math.Matrix3x2Default randomMatrix3x2(global::haxe.lang.Null<double> precision) {
			unchecked {
				double __temp_precision48 = ( ( ! (precision.hasValue) ) ? (1e-4) : ((precision).@value) );
				global::test.Distribution distribution = new global::test.Distribution();
				distribution.precision = __temp_precision48;
				global::Array<double> rawData = this.randomArray(6, distribution);
				if (( rawData.length != 6 )) {
					throw global::haxe.lang.HaxeException.wrap("Invalid rawData.");
				}
				
				return ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(rawData[0], rawData[1], rawData[2], rawData[3], rawData[4], rawData[5])) );
			}
		}
		
		
		public virtual global::hxmath.math.Matrix3x3Default randomMatrix3x3(global::haxe.lang.Null<double> precision) {
			unchecked {
				double __temp_precision49 = ( ( ! (precision.hasValue) ) ? (1e-4) : ((precision).@value) );
				global::test.Distribution distribution = new global::test.Distribution();
				distribution.precision = __temp_precision49;
				global::Array<double> rawData = this.randomArray(9, distribution);
				if (( rawData.length != 9 )) {
					throw global::haxe.lang.HaxeException.wrap("Invalid rawData.");
				}
				
				return ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(rawData[0], rawData[1], rawData[2], rawData[3], rawData[4], rawData[5], rawData[6], rawData[7], rawData[8])) );
			}
		}
		
		
		public virtual global::hxmath.math.Matrix4x4Default randomMatrix4x4(global::haxe.lang.Null<double> precision) {
			unchecked {
				double __temp_precision50 = ( ( ! (precision.hasValue) ) ? (1e-4) : ((precision).@value) );
				global::test.Distribution distribution = new global::test.Distribution();
				distribution.precision = __temp_precision50;
				global::Array<double> rawData = this.randomArray(16, distribution);
				if (( rawData.length != 16 )) {
					throw global::haxe.lang.HaxeException.wrap("Invalid rawData.");
				}
				
				return ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(rawData[0], rawData[1], rawData[2], rawData[3], rawData[4], rawData[5], rawData[6], rawData[7], rawData[8], rawData[9], rawData[10], rawData[11], rawData[12], rawData[13], rawData[14], rawData[15])) );
			}
		}
		
		
		public virtual global::hxmath.math.QuaternionDefault randomQuaternion(global::haxe.lang.Null<double> precision) {
			unchecked {
				double __temp_precision51 = ( ( ! (precision.hasValue) ) ? (1e-4) : ((precision).@value) );
				global::test.Distribution distribution = new global::test.Distribution();
				distribution.precision = __temp_precision51;
				global::Array<double> rawData = this.randomArray(4, distribution);
				if (( rawData.length != 4 )) {
					throw global::haxe.lang.HaxeException.wrap("Invalid rawData.");
				}
				
				return ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(rawData[0], rawData[1], rawData[2], rawData[3])) );
			}
		}
		
		
		public virtual global::hxmath.math.IntVector2Default randomIntVector2() {
			return global::hxmath.math._IntVector2.IntVector2_Impl_._new(this.randomInt(), this.randomInt());
		}
		
		
		public virtual int randomShortVector2() {
			return global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(this.randomInt(), this.randomInt());
		}
		
		
		public virtual global::hxmath.frames.IFrame2 randomFrame2(global::haxe.lang.Null<double> precision) {
			double __temp_precision52 = ( ( ! (precision.hasValue) ) ? (1e-4) : ((precision).@value) );
			return global::hxmath.frames._Frame2.Frame2_Impl_._new(this.randomVector2(new global::haxe.lang.Null<double>(__temp_precision52, true)), ( this.randomFloat(new global::haxe.lang.Null<double>(0.0, true), new global::haxe.lang.Null<double>(1.0, true), new global::haxe.lang.Null<double>(__temp_precision52, true)) * global::Math.PI ));
		}
		
		
		public virtual global::hxmath.frames.IFrame3 randomFrame3(global::haxe.lang.Null<double> precision) {
			double __temp_precision53 = ( ( ! (precision.hasValue) ) ? (1e-4) : ((precision).@value) );
			global::hxmath.math.Vector3Default tmp = this.randomVector3(new global::haxe.lang.Null<double>(__temp_precision53, true));
			global::hxmath.math.QuaternionDefault self = ((global::hxmath.math.QuaternionDefault) (this.randomQuaternion(new global::haxe.lang.Null<double>(__temp_precision53, true))) );
			double _g = ( 1.0 / global::System.Math.Sqrt(((double) (( ( ( ( self.s * self.s ) + ( self.x * self.x ) ) + ( self.y * self.y ) ) + ( self.z * self.z ) )) )) );
			global::hxmath.math.QuaternionDefault self1 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(self.s, self.x, self.y, self.z)) );
			self1.s *= _g;
			self1.x *= _g;
			self1.y *= _g;
			self1.z *= _g;
			return global::hxmath.frames._Frame3.Frame3_Impl_._new(tmp, self1);
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 74394057:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "randomFrame3", 74394057)) );
					}
					
					
					case 74394056:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "randomFrame2", 74394056)) );
					}
					
					
					case 1107053462:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "randomShortVector2", 1107053462)) );
					}
					
					
					case 2028603587:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "randomIntVector2", 2028603587)) );
					}
					
					
					case 2141451521:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "randomQuaternion", 2141451521)) );
					}
					
					
					case 1393241036:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "randomMatrix4x4", 1393241036)) );
					}
					
					
					case 1393191306:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "randomMatrix3x3", 1393191306)) );
					}
					
					
					case 1393191305:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "randomMatrix3x2", 1393191305)) );
					}
					
					
					case 1393141576:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "randomMatrix2x2", 1393141576)) );
					}
					
					
					case 1862178382:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "randomVector4", 1862178382)) );
					}
					
					
					case 1862178381:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "randomVector3", 1862178381)) );
					}
					
					
					case 1862178380:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "randomVector2", 1862178380)) );
					}
					
					
					case 1009440223:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "assertApproxEquals", 1009440223)) );
					}
					
					
					case 270831766:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "randomArray", 270831766)) );
					}
					
					
					case 658867884:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "randomInt", 658867884)) );
					}
					
					
					case 1831594137:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "randomFloat", 1831594137)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 74394057:
					{
						return this.randomFrame3(global::haxe.lang.Null<object>.ofDynamic<double>(dynargs[0]));
					}
					
					
					case 74394056:
					{
						return this.randomFrame2(global::haxe.lang.Null<object>.ofDynamic<double>(dynargs[0]));
					}
					
					
					case 1107053462:
					{
						return this.randomShortVector2();
					}
					
					
					case 2028603587:
					{
						return this.randomIntVector2();
					}
					
					
					case 2141451521:
					{
						return this.randomQuaternion(global::haxe.lang.Null<object>.ofDynamic<double>(dynargs[0]));
					}
					
					
					case 1393241036:
					{
						return this.randomMatrix4x4(global::haxe.lang.Null<object>.ofDynamic<double>(dynargs[0]));
					}
					
					
					case 1393191306:
					{
						return this.randomMatrix3x3(global::haxe.lang.Null<object>.ofDynamic<double>(dynargs[0]));
					}
					
					
					case 1393191305:
					{
						return this.randomMatrix3x2(global::haxe.lang.Null<object>.ofDynamic<double>(dynargs[0]));
					}
					
					
					case 1393141576:
					{
						return this.randomMatrix2x2(global::haxe.lang.Null<object>.ofDynamic<double>(dynargs[0]));
					}
					
					
					case 1862178382:
					{
						return this.randomVector4(global::haxe.lang.Null<object>.ofDynamic<double>(dynargs[0]));
					}
					
					
					case 1862178381:
					{
						return this.randomVector3(global::haxe.lang.Null<object>.ofDynamic<double>(dynargs[0]));
					}
					
					
					case 1862178380:
					{
						return this.randomVector2(global::haxe.lang.Null<object>.ofDynamic<double>(dynargs[0]));
					}
					
					
					case 1009440223:
					{
						this.assertApproxEquals(((double) (global::haxe.lang.Runtime.toDouble(dynargs[0])) ), ((double) (global::haxe.lang.Runtime.toDouble(dynargs[1])) ), global::haxe.lang.Null<object>.ofDynamic<double>(dynargs[2]), dynargs[3]);
						break;
					}
					
					
					case 270831766:
					{
						return this.randomArray(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ), ((global::test.Distribution) (dynargs[1]) ));
					}
					
					
					case 658867884:
					{
						return this.randomInt();
					}
					
					
					case 1831594137:
					{
						return this.randomFloat(global::haxe.lang.Null<object>.ofDynamic<double>(dynargs[0]), global::haxe.lang.Null<object>.ofDynamic<double>(dynargs[1]), global::haxe.lang.Null<object>.ofDynamic<double>(dynargs[2]));
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
	}
}


