// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hxmath.frames._Frame2 {
	public sealed class Frame2_Impl_ {
		
		
		
		public static global::hxmath.frames.IFrame2 _new(global::hxmath.math.Vector2Default offset, double angleDegrees) {
			global::hxmath.frames.IFrame2 this1 = new global::hxmath.frames.Frame2Default(offset, new global::haxe.lang.Null<double>(angleDegrees, true), default(global::haxe.lang.Null<bool>));
			return ((global::hxmath.frames.IFrame2) (this1) );
		}
		
		
		public static global::hxmath.math.Matrix3x2Default calculateMatrix(global::hxmath.math.Matrix3x2Default matrix, global::hxmath.math.Vector2Default offset, double angleDegrees) {
			unchecked {
				{
					double angle = ( ( global::Math.PI / 180 ) * angleDegrees );
					double s = global::System.Math.Sin(((double) (angle) ));
					double c = global::System.Math.Cos(((double) (angle) ));
					matrix.a = c;
					matrix.b =  - (s) ;
					matrix.c = s;
					matrix.d = c;
				}
				
				{
					double x = offset.x;
					double y = offset.y;
					matrix.tx = x;
					matrix.ty = y;
				}
				
				return matrix;
			}
		}
		
		
		public static global::hxmath.frames.IFrame2 lerp(global::hxmath.frames.IFrame2 frameA, global::hxmath.frames.IFrame2 frameB, double t) {
			unchecked {
				global::hxmath.math.Vector2Default a = frameA.get_offset();
				global::hxmath.math.Vector2Default b = frameB.get_offset();
				global::hxmath.math.Vector2Default tmp = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( (( 1.0 - t )) * a.x ) + ( t * b.x ) ), ( ( (( 1.0 - t )) * a.y ) + ( t * b.y ) ))) );
				double a1 = frameA.get_angleDegrees();
				double b1 = frameB.get_angleDegrees();
				if (( global::System.Math.Abs(((double) (( a1 - b1 )) )) > 180.0 )) {
					if (( a1 < b1 )) {
						a1 += ((double) (360) );
					}
					else {
						b1 += ((double) (360) );
					}
					
				}
				
				double x = ( ( (( 1.0 - t )) * a1 ) + ( t * b1 ) );
				return global::hxmath.frames._Frame2.Frame2_Impl_._new(tmp, ( (( x < 0 )) ? (( 360 - (  - (x)  % 360 ) )) : (( x % 360 )) ));
			}
		}
		
		
		public static global::hxmath.frames.IFrame2 concat(global::hxmath.frames.IFrame2 this1, global::hxmath.frames.IFrame2 other) {
			unchecked {
				global::hxmath.frames.IFrame2 self = this1;
				global::hxmath.frames.IFrame2 self1 = ((global::hxmath.frames.IFrame2) (global::hxmath.frames._Frame2.Frame2_Impl_._new(self.get_offset(), self.get_angleDegrees())) );
				global::hxmath.math.Matrix3x2Default self2 = ((global::hxmath.math.Matrix3x2Default) (self1.get_matrix()) );
				global::hxmath.math.Matrix2x2Default m = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(self2.a, self2.b, self2.c, self2.d)) );
				global::hxmath.math.Vector2Default v = other.get_offset();
				global::hxmath.math.Vector2Default this2 = new global::hxmath.math.Vector2Default(( ( m.a * v.x ) + ( m.b * v.y ) ), ( ( m.c * v.x ) + ( m.d * v.y ) ));
				global::hxmath.math.Vector2Default a = self1.get_offset();
				global::hxmath.math.Vector2Default self3 = ((global::hxmath.math.Vector2Default) (this2) );
				self3.x += a.x;
				self3.y += a.y;
				double x = ( self1.get_angleDegrees() + other.get_angleDegrees() );
				self1.set_angleDegrees(( (( x < 0 )) ? (( 360 - (  - (x)  % 360 ) )) : (( x % 360 )) ));
				self1.set_offset(self3);
				return self1;
			}
		}
		
		
		public static global::hxmath.frames.IFrame2 concatWith(global::hxmath.frames.IFrame2 this1, global::hxmath.frames.IFrame2 other) {
			unchecked {
				global::hxmath.frames.IFrame2 self = this1;
				global::hxmath.math.Matrix3x2Default self1 = ((global::hxmath.math.Matrix3x2Default) (self.get_matrix()) );
				global::hxmath.math.Matrix2x2Default m = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(self1.a, self1.b, self1.c, self1.d)) );
				global::hxmath.math.Vector2Default v = other.get_offset();
				global::hxmath.math.Vector2Default this2 = new global::hxmath.math.Vector2Default(( ( m.a * v.x ) + ( m.b * v.y ) ), ( ( m.c * v.x ) + ( m.d * v.y ) ));
				global::hxmath.math.Vector2Default a = self.get_offset();
				global::hxmath.math.Vector2Default self2 = ((global::hxmath.math.Vector2Default) (this2) );
				self2.x += a.x;
				self2.y += a.y;
				double x = ( self.get_angleDegrees() + other.get_angleDegrees() );
				self.set_angleDegrees(( (( x < 0 )) ? (( 360 - (  - (x)  % 360 ) )) : (( x % 360 )) ));
				self.set_offset(self2);
				return self;
			}
		}
		
		
		public static global::hxmath.math.Vector2Default transformFrom(global::hxmath.frames.IFrame2 this1, global::hxmath.math.Vector2Default p) {
			global::hxmath.frames.IFrame2 self = this1;
			global::hxmath.math.Matrix3x2Default m = self.get_matrix();
			global::hxmath.math.Matrix2x2Default m1 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(m.a, m.b, m.c, m.d)) );
			global::hxmath.math.Vector2Default a = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( m1.a * p.x ) + ( m1.b * p.y ) ), ( ( m1.c * p.x ) + ( m1.d * p.y ) ))) );
			global::hxmath.math.Vector2Default b = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(m.tx, m.ty)) );
			global::hxmath.math.Vector2Default self1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a.x, a.y)) );
			self1.x += b.x;
			self1.y += b.y;
			return self1;
		}
		
		
		public static global::hxmath.math.Vector2Default transformTo(global::hxmath.frames.IFrame2 this1, global::hxmath.math.Vector2Default p) {
			global::hxmath.frames.IFrame2 self = this1;
			global::hxmath.math.Matrix3x2Default self1 = ((global::hxmath.math.Matrix3x2Default) (self.get_matrix()) );
			global::hxmath.math.Matrix2x2Default this2 = new global::hxmath.math.Matrix2x2Default(self1.a, self1.b, self1.c, self1.d);
			global::hxmath.math.Vector2Default b = self.get_offset();
			global::hxmath.math.Vector2Default self2 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(p.x, p.y)) );
			self2.x -= b.x;
			self2.y -= b.y;
			global::hxmath.math.Matrix2x2Default self3 = ((global::hxmath.math.Matrix2x2Default) (this2) );
			return ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( self3.a * self2.x ) + ( self3.c * self2.y ) ), ( ( self3.b * self2.x ) + ( self3.d * self2.y ) ))) );
		}
		
		
		public static global::hxmath.math.Vector2Default linearTransformFrom(global::hxmath.frames.IFrame2 this1, global::hxmath.math.Vector2Default v) {
			global::hxmath.frames.IFrame2 self = this1;
			global::hxmath.math.Matrix3x2Default self1 = ((global::hxmath.math.Matrix3x2Default) (self.get_matrix()) );
			global::hxmath.math.Matrix2x2Default m = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(self1.a, self1.b, self1.c, self1.d)) );
			return ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( m.a * v.x ) + ( m.b * v.y ) ), ( ( m.c * v.x ) + ( m.d * v.y ) ))) );
		}
		
		
		public static global::hxmath.math.Vector2Default linearTransformTo(global::hxmath.frames.IFrame2 this1, global::hxmath.math.Vector2Default v) {
			global::hxmath.frames.IFrame2 self = this1;
			global::hxmath.math.Matrix3x2Default self1 = ((global::hxmath.math.Matrix3x2Default) (self.get_matrix()) );
			global::hxmath.math.Matrix2x2Default self2 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(self1.a, self1.b, self1.c, self1.d)) );
			return ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( self2.a * v.x ) + ( self2.c * v.y ) ), ( ( self2.b * v.x ) + ( self2.d * v.y ) ))) );
		}
		
		
		public static global::hxmath.frames.IFrame2 inverse(global::hxmath.frames.IFrame2 this1) {
			global::hxmath.frames.IFrame2 self = this1;
			global::hxmath.math.Matrix3x2Default self1 = ((global::hxmath.math.Matrix3x2Default) (self.get_matrix()) );
			global::hxmath.math.Matrix2x2Default this2 = new global::hxmath.math.Matrix2x2Default(self1.a, self1.b, self1.c, self1.d);
			global::hxmath.math.Vector2Default v = self.get_offset();
			global::hxmath.math.Matrix2x2Default self2 = ((global::hxmath.math.Matrix2x2Default) (this2) );
			global::hxmath.math.Vector2Default self3 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( self2.a * v.x ) + ( self2.c * v.y ) ), ( ( self2.b * v.x ) + ( self2.d * v.y ) ))) );
			self3.x =  - (self3.x) ;
			self3.y =  - (self3.y) ;
			return global::hxmath.frames._Frame2.Frame2_Impl_._new(self3,  - (self.get_angleDegrees()) );
		}
		
		
		public static global::hxmath.frames.IFrame2 clone(global::hxmath.frames.IFrame2 this1) {
			global::hxmath.frames.IFrame2 self = this1;
			return global::hxmath.frames._Frame2.Frame2_Impl_._new(self.get_offset(), self.get_angleDegrees());
		}
		
		
		public static global::hxmath.math.Matrix2x2Default get_linearMatrix(global::hxmath.frames.IFrame2 this1) {
			global::hxmath.frames.IFrame2 self = this1;
			global::hxmath.math.Matrix3x2Default self1 = ((global::hxmath.math.Matrix3x2Default) (self.get_matrix()) );
			return ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(self1.a, self1.b, self1.c, self1.d)) );
		}
		
		
	}
}


