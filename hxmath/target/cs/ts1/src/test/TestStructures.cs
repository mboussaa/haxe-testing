// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace test {
	public class TestStructures : global::test.MathTestCase {
		
		public TestStructures(global::haxe.lang.EmptyObject empty) : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
		}
		
		
		public TestStructures(object posInfos) : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
			global::test.TestStructures.__hx_ctor_test_TestStructures(this, posInfos);
		}
		
		
		public static void __hx_ctor_test_TestStructures(global::test.TestStructures __temp_me62, object posInfos) {
			global::test.MathTestCase.__hx_ctor_test_MathTestCase(__temp_me62, posInfos);
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::test.TestStructures(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::test.TestStructures(((object) (arr[0]) ));
		}
		
		
		public virtual void testEquals() {
			unchecked {
				global::hxmath.math.Matrix2x2Default m = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(1.0, 0.0, 0.0, 1.0)) );
				global::hxmath.math.Matrix2x2Default n = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(1.0, 0.0, 0.0, 1.0)) );
				this.assertTrue(( ( ( m == null ) && ( n == null ) ) || ( ( ( ( ( ( m != null ) && ( n != null ) ) && ( m.a == n.a ) ) && ( m.b == n.b ) ) && ( m.c == n.c ) ) && ( m.d == n.d ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (22) )}));
				this.assertTrue(( ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(1.0, 0.0, 0.0, 1.0)) ) != ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(0.0, 0.0, 0.0, 0.0)) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (23) )}));
				global::hxmath.math.Matrix3x2Default m1 = ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)) );
				global::hxmath.math.Matrix3x2Default n1 = ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)) );
				this.assertTrue(( ( ( m1 == null ) && ( n1 == null ) ) || ( ( ( ( ( ( ( ( m1 != null ) && ( n1 != null ) ) && ( m1.a == n1.a ) ) && ( m1.b == n1.b ) ) && ( m1.c == n1.c ) ) && ( m1.d == n1.d ) ) && ( m1.tx == n1.tx ) ) && ( m1.ty == n1.ty ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (24) )}));
				this.assertTrue(( ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)) ) != ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (25) )}));
				global::hxmath.math.Matrix3x3Default a = ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) );
				global::hxmath.math.Matrix3x3Default b = ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) );
				this.assertTrue(( ( ( a == null ) && ( b == null ) ) || ( ( ( ( ( ( ( ( ( ( ( a != null ) && ( b != null ) ) && ( a.m00 == b.m00 ) ) && ( a.m10 == b.m10 ) ) && ( a.m20 == b.m20 ) ) && ( a.m01 == b.m01 ) ) && ( a.m11 == b.m11 ) ) && ( a.m21 == b.m21 ) ) && ( a.m02 == b.m02 ) ) && ( a.m12 == b.m12 ) ) && ( a.m22 == b.m22 ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (26) )}));
				this.assertTrue(( ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) ) != ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (27) )}));
				global::hxmath.math.Matrix4x4Default a1 = ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) );
				global::hxmath.math.Matrix4x4Default b1 = ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) );
				this.assertTrue(( ( ( a1 == null ) && ( b1 == null ) ) || ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( a1 != null ) && ( b1 != null ) ) && ( a1.m00 == b1.m00 ) ) && ( a1.m10 == b1.m10 ) ) && ( a1.m20 == b1.m20 ) ) && ( a1.m30 == b1.m30 ) ) && ( a1.m01 == b1.m01 ) ) && ( a1.m11 == b1.m11 ) ) && ( a1.m21 == b1.m21 ) ) && ( a1.m31 == b1.m31 ) ) && ( a1.m02 == b1.m02 ) ) && ( a1.m12 == b1.m12 ) ) && ( a1.m22 == b1.m22 ) ) && ( a1.m32 == b1.m32 ) ) && ( a1.m03 == b1.m03 ) ) && ( a1.m13 == b1.m13 ) ) && ( a1.m23 == b1.m23 ) ) && ( a1.m33 == b1.m33 ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (28) )}));
				this.assertTrue(( ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) ) != ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (29) )}));
				global::hxmath.math.Vector2Default a2 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 1.0)) );
				global::hxmath.math.Vector2Default b2 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 1.0)) );
				this.assertTrue(( ( ( a2 == null ) && ( b2 == null ) ) || ( ( ( ( a2 != null ) && ( b2 != null ) ) && ( a2.x == b2.x ) ) && ( a2.y == b2.y ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (31) )}));
				this.assertTrue(( ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 1.0)) ) != ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 0.0)) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (32) )}));
				global::hxmath.math.Vector3Default a3 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 0.0, 1.0)) );
				global::hxmath.math.Vector3Default b3 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 0.0, 1.0)) );
				this.assertTrue(( ( ( a3 == null ) && ( b3 == null ) ) || ( ( ( ( ( a3 != null ) && ( b3 != null ) ) && ( a3.x == b3.x ) ) && ( a3.y == b3.y ) ) && ( a3.z == b3.z ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (33) )}));
				this.assertTrue(( ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 0.0, 1.0)) ) != ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(1.0, 0.0, 0.0)) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (34) )}));
				global::hxmath.math.Vector4Default a4 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 0.0, 1.0, 0.0)) );
				global::hxmath.math.Vector4Default b4 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 0.0, 1.0, 0.0)) );
				this.assertTrue(( ( ( a4 == null ) && ( b4 == null ) ) || ( ( ( ( ( ( a4 != null ) && ( b4 != null ) ) && ( a4.x == b4.x ) ) && ( a4.y == b4.y ) ) && ( a4.z == b4.z ) ) && ( a4.w == b4.w ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (35) )}));
				this.assertTrue(( ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 0.0, 1.0, 0.0)) ) != ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(1.0, 0.0, 0.0, 0.0)) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (36) )}));
				global::hxmath.math.QuaternionDefault a5 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(((double) (1) ), ((double) (0) ), ((double) (0) ), ((double) (0) ))) );
				global::hxmath.math.QuaternionDefault b5 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(((double) (1) ), ((double) (0) ), ((double) (0) ), ((double) (0) ))) );
				this.assertTrue(( ( ( a5 == null ) && ( b5 == null ) ) || ( ( ( ( ( ( a5 != null ) && ( b5 != null ) ) && ( a5.s == b5.s ) ) && ( a5.x == b5.x ) ) && ( a5.y == b5.y ) ) && ( a5.z == b5.z ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (38) )}));
				this.assertTrue(( ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(((double) (1) ), ((double) (0) ), ((double) (0) ), ((double) (0) ))) ) != ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (0) ))) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (39) )}));
				global::hxmath.math.IntVector2Default a6 = global::hxmath.math._IntVector2.IntVector2_Impl_._new(0, 1);
				global::hxmath.math.IntVector2Default b6 = global::hxmath.math._IntVector2.IntVector2_Impl_._new(0, 1);
				this.assertTrue(( ( ( a6 == null ) && ( b6 == null ) ) || ( ( ( ( a6 != null ) && ( b6 != null ) ) && ( a6.x == b6.x ) ) && ( a6.y == b6.y ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (41) )}));
				this.assertTrue(( global::hxmath.math._IntVector2.IntVector2_Impl_._new(0, 1) != global::hxmath.math._IntVector2.IntVector2_Impl_._new(1, 0) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (42) )}));
				this.assertTrue(( global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(0, 1) == global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(0, 1) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (44) )}));
				this.assertTrue(( global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(0, 1) != global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(1, 0) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (45) )}));
			}
		}
		
		
		public virtual void testClone() {
			unchecked {
				global::hxmath.math.Matrix2x2Default self = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(1.0, 0.0, 0.0, 1.0)) );
				global::hxmath.math.Matrix2x2Default m = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(self.a, self.b, self.c, self.d)) );
				global::hxmath.math.Matrix2x2Default n = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(1.0, 0.0, 0.0, 1.0)) );
				this.assertTrue(( ( ( m == null ) && ( n == null ) ) || ( ( ( ( ( ( m != null ) && ( n != null ) ) && ( m.a == n.a ) ) && ( m.b == n.b ) ) && ( m.c == n.c ) ) && ( m.d == n.d ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testClone", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (50) )}));
				global::hxmath.math.Matrix3x2Default self1 = ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)) );
				global::hxmath.math.Matrix3x2Default m1 = ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(self1.a, self1.b, self1.c, self1.d, self1.tx, self1.ty)) );
				global::hxmath.math.Matrix3x2Default n1 = ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)) );
				this.assertTrue(( ( ( m1 == null ) && ( n1 == null ) ) || ( ( ( ( ( ( ( ( m1 != null ) && ( n1 != null ) ) && ( m1.a == n1.a ) ) && ( m1.b == n1.b ) ) && ( m1.c == n1.c ) ) && ( m1.d == n1.d ) ) && ( m1.tx == n1.tx ) ) && ( m1.ty == n1.ty ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testClone", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (51) )}));
				global::hxmath.math.Matrix3x3Default self2 = ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) );
				global::hxmath.math.Matrix3x3Default a = ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(self2.m00, self2.m10, self2.m20, self2.m01, self2.m11, self2.m21, self2.m02, self2.m12, self2.m22)) );
				global::hxmath.math.Matrix3x3Default b = ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) );
				this.assertTrue(( ( ( a == null ) && ( b == null ) ) || ( ( ( ( ( ( ( ( ( ( ( a != null ) && ( b != null ) ) && ( a.m00 == b.m00 ) ) && ( a.m10 == b.m10 ) ) && ( a.m20 == b.m20 ) ) && ( a.m01 == b.m01 ) ) && ( a.m11 == b.m11 ) ) && ( a.m21 == b.m21 ) ) && ( a.m02 == b.m02 ) ) && ( a.m12 == b.m12 ) ) && ( a.m22 == b.m22 ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testClone", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (52) )}));
				global::hxmath.math.Matrix4x4Default self3 = ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) );
				global::hxmath.math.Matrix4x4Default a1 = ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(self3.m00, self3.m10, self3.m20, self3.m30, self3.m01, self3.m11, self3.m21, self3.m31, self3.m02, self3.m12, self3.m22, self3.m32, self3.m03, self3.m13, self3.m23, self3.m33)) );
				global::hxmath.math.Matrix4x4Default b1 = ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) );
				this.assertTrue(( ( ( a1 == null ) && ( b1 == null ) ) || ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( a1 != null ) && ( b1 != null ) ) && ( a1.m00 == b1.m00 ) ) && ( a1.m10 == b1.m10 ) ) && ( a1.m20 == b1.m20 ) ) && ( a1.m30 == b1.m30 ) ) && ( a1.m01 == b1.m01 ) ) && ( a1.m11 == b1.m11 ) ) && ( a1.m21 == b1.m21 ) ) && ( a1.m31 == b1.m31 ) ) && ( a1.m02 == b1.m02 ) ) && ( a1.m12 == b1.m12 ) ) && ( a1.m22 == b1.m22 ) ) && ( a1.m32 == b1.m32 ) ) && ( a1.m03 == b1.m03 ) ) && ( a1.m13 == b1.m13 ) ) && ( a1.m23 == b1.m23 ) ) && ( a1.m33 == b1.m33 ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testClone", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (53) )}));
				global::hxmath.math.Vector2Default self4 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 0.0)) );
				global::hxmath.math.Vector2Default a2 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self4.x, self4.y)) );
				global::hxmath.math.Vector2Default b2 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 0.0)) );
				this.assertTrue(( ( ( a2 == null ) && ( b2 == null ) ) || ( ( ( ( a2 != null ) && ( b2 != null ) ) && ( a2.x == b2.x ) ) && ( a2.y == b2.y ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testClone", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (55) )}));
				global::hxmath.math.Vector3Default self5 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 0.0, 0.0)) );
				global::hxmath.math.Vector3Default a3 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(self5.x, self5.y, self5.z)) );
				global::hxmath.math.Vector3Default b3 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 0.0, 0.0)) );
				this.assertTrue(( ( ( a3 == null ) && ( b3 == null ) ) || ( ( ( ( ( a3 != null ) && ( b3 != null ) ) && ( a3.x == b3.x ) ) && ( a3.y == b3.y ) ) && ( a3.z == b3.z ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testClone", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (56) )}));
				global::hxmath.math.Vector4Default self6 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 0.0, 0.0, 0.0)) );
				global::hxmath.math.Vector4Default a4 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(self6.x, self6.y, self6.z, self6.w)) );
				global::hxmath.math.Vector4Default b4 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 0.0, 0.0, 0.0)) );
				this.assertTrue(( ( ( a4 == null ) && ( b4 == null ) ) || ( ( ( ( ( ( a4 != null ) && ( b4 != null ) ) && ( a4.x == b4.x ) ) && ( a4.y == b4.y ) ) && ( a4.z == b4.z ) ) && ( a4.w == b4.w ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testClone", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (57) )}));
				global::hxmath.math.QuaternionDefault self7 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(((double) (1) ), ((double) (0) ), ((double) (0) ), ((double) (0) ))) );
				global::hxmath.math.QuaternionDefault a5 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(self7.s, self7.x, self7.y, self7.z)) );
				global::hxmath.math.QuaternionDefault b5 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(((double) (1) ), ((double) (0) ), ((double) (0) ), ((double) (0) ))) );
				this.assertTrue(( ( ( a5 == null ) && ( b5 == null ) ) || ( ( ( ( ( ( a5 != null ) && ( b5 != null ) ) && ( a5.s == b5.s ) ) && ( a5.x == b5.x ) ) && ( a5.y == b5.y ) ) && ( a5.z == b5.z ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testClone", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (59) )}));
				global::hxmath.math.IntVector2Default self8 = ((global::hxmath.math.IntVector2Default) (global::hxmath.math._IntVector2.IntVector2_Impl_._new(0, 0)) );
				global::hxmath.math.IntVector2Default a6 = global::hxmath.math._IntVector2.IntVector2_Impl_._new(self8.x, self8.y);
				global::hxmath.math.IntVector2Default b6 = global::hxmath.math._IntVector2.IntVector2_Impl_._new(0, 0);
				this.assertTrue(( ( ( a6 == null ) && ( b6 == null ) ) || ( ( ( ( a6 != null ) && ( b6 != null ) ) && ( a6.x == b6.x ) ) && ( a6.y == b6.y ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testClone", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (61) )}));
			}
		}
		
		
		public virtual void testAddSub() {
			unchecked {
				global::hxmath.math.Matrix2x2Default mat22 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(0.0, 0.0, 0.0, 0.0)) );
				global::hxmath.math.Matrix2x2Default n = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(1.0, 0.0, 0.0, 1.0)) );
				global::hxmath.math.Matrix2x2Default self = ((global::hxmath.math.Matrix2x2Default) (mat22) );
				global::hxmath.math.Matrix2x2Default self1 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(self.a, self.b, self.c, self.d)) );
				self1.a += n.a;
				self1.b += n.b;
				self1.c += n.c;
				self1.d += n.d;
				global::hxmath.math.Matrix2x2Default n1 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(1.0, 0.0, 0.0, 1.0)) );
				this.assertTrue(( ( ( self1 == null ) && ( n1 == null ) ) || ( ( ( ( ( ( self1 != null ) && ( n1 != null ) ) && ( self1.a == n1.a ) ) && ( self1.b == n1.b ) ) && ( self1.c == n1.c ) ) && ( self1.d == n1.d ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (67) )}));
				global::hxmath.math.Matrix2x2Default n2 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(1.0, 0.0, 0.0, 1.0)) );
				global::hxmath.math.Matrix2x2Default self2 = ((global::hxmath.math.Matrix2x2Default) (mat22) );
				global::hxmath.math.Matrix2x2Default self3 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(self2.a, self2.b, self2.c, self2.d)) );
				self3.a += n2.a;
				self3.b += n2.b;
				self3.c += n2.c;
				self3.d += n2.d;
				mat22 = self3;
				global::hxmath.math.Matrix2x2Default n3 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(1.0, 0.0, 0.0, 1.0)) );
				this.assertTrue(( ( ( self3 == null ) && ( n3 == null ) ) || ( ( ( ( ( ( self3 != null ) && ( n3 != null ) ) && ( self3.a == n3.a ) ) && ( self3.b == n3.b ) ) && ( self3.c == n3.c ) ) && ( self3.d == n3.d ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (69) )}));
				global::hxmath.math.Matrix2x2Default n4 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(1.0, 0.0, 0.0, 1.0)) );
				global::hxmath.math.Matrix2x2Default self4 = ((global::hxmath.math.Matrix2x2Default) (self3) );
				global::hxmath.math.Matrix2x2Default self5 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(self4.a, self4.b, self4.c, self4.d)) );
				self5.a -= n4.a;
				self5.b -= n4.b;
				self5.c -= n4.c;
				self5.d -= n4.d;
				global::hxmath.math.Matrix2x2Default n5 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(0.0, 0.0, 0.0, 0.0)) );
				this.assertTrue(( ( ( self5 == null ) && ( n5 == null ) ) || ( ( ( ( ( ( self5 != null ) && ( n5 != null ) ) && ( self5.a == n5.a ) ) && ( self5.b == n5.b ) ) && ( self5.c == n5.c ) ) && ( self5.d == n5.d ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (70) )}));
				global::hxmath.math.Matrix2x2Default n6 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(1.0, 0.0, 0.0, 1.0)) );
				global::hxmath.math.Matrix2x2Default self6 = ((global::hxmath.math.Matrix2x2Default) (self3) );
				global::hxmath.math.Matrix2x2Default self7 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(self6.a, self6.b, self6.c, self6.d)) );
				self7.a -= n6.a;
				self7.b -= n6.b;
				self7.c -= n6.c;
				self7.d -= n6.d;
				mat22 = self7;
				global::hxmath.math.Matrix2x2Default n7 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(0.0, 0.0, 0.0, 0.0)) );
				this.assertTrue(( ( ( self7 == null ) && ( n7 == null ) ) || ( ( ( ( ( ( self7 != null ) && ( n7 != null ) ) && ( self7.a == n7.a ) ) && ( self7.b == n7.b ) ) && ( self7.c == n7.c ) ) && ( self7.d == n7.d ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (72) )}));
				global::hxmath.math.Matrix3x2Default mat32 = ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) );
				global::hxmath.math.Matrix3x2Default n8 = ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)) );
				global::hxmath.math.Matrix3x2Default self8 = ((global::hxmath.math.Matrix3x2Default) (mat32) );
				global::hxmath.math.Matrix3x2Default self9 = ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(self8.a, self8.b, self8.c, self8.d, self8.tx, self8.ty)) );
				self9.a += n8.a;
				self9.b += n8.b;
				self9.c += n8.c;
				self9.d += n8.d;
				self9.tx += n8.tx;
				self9.ty += n8.ty;
				global::hxmath.math.Matrix3x2Default n9 = ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)) );
				this.assertTrue(( ( ( self9 == null ) && ( n9 == null ) ) || ( ( ( ( ( ( ( ( self9 != null ) && ( n9 != null ) ) && ( self9.a == n9.a ) ) && ( self9.b == n9.b ) ) && ( self9.c == n9.c ) ) && ( self9.d == n9.d ) ) && ( self9.tx == n9.tx ) ) && ( self9.ty == n9.ty ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (75) )}));
				global::hxmath.math.Matrix3x2Default n10 = ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)) );
				global::hxmath.math.Matrix3x2Default self10 = ((global::hxmath.math.Matrix3x2Default) (mat32) );
				global::hxmath.math.Matrix3x2Default self11 = ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(self10.a, self10.b, self10.c, self10.d, self10.tx, self10.ty)) );
				self11.a += n10.a;
				self11.b += n10.b;
				self11.c += n10.c;
				self11.d += n10.d;
				self11.tx += n10.tx;
				self11.ty += n10.ty;
				mat32 = self11;
				global::hxmath.math.Matrix3x2Default n11 = ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)) );
				this.assertTrue(( ( ( self11 == null ) && ( n11 == null ) ) || ( ( ( ( ( ( ( ( self11 != null ) && ( n11 != null ) ) && ( self11.a == n11.a ) ) && ( self11.b == n11.b ) ) && ( self11.c == n11.c ) ) && ( self11.d == n11.d ) ) && ( self11.tx == n11.tx ) ) && ( self11.ty == n11.ty ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (77) )}));
				global::hxmath.math.Matrix3x2Default n12 = ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)) );
				global::hxmath.math.Matrix3x2Default self12 = ((global::hxmath.math.Matrix3x2Default) (self11) );
				global::hxmath.math.Matrix3x2Default self13 = ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(self12.a, self12.b, self12.c, self12.d, self12.tx, self12.ty)) );
				self13.a -= n12.a;
				self13.b -= n12.b;
				self13.c -= n12.c;
				self13.d -= n12.d;
				self13.tx -= n12.tx;
				self13.ty -= n12.ty;
				global::hxmath.math.Matrix3x2Default n13 = ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) );
				this.assertTrue(( ( ( self13 == null ) && ( n13 == null ) ) || ( ( ( ( ( ( ( ( self13 != null ) && ( n13 != null ) ) && ( self13.a == n13.a ) ) && ( self13.b == n13.b ) ) && ( self13.c == n13.c ) ) && ( self13.d == n13.d ) ) && ( self13.tx == n13.tx ) ) && ( self13.ty == n13.ty ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (78) )}));
				global::hxmath.math.Matrix3x2Default n14 = ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)) );
				global::hxmath.math.Matrix3x2Default self14 = ((global::hxmath.math.Matrix3x2Default) (self11) );
				global::hxmath.math.Matrix3x2Default self15 = ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(self14.a, self14.b, self14.c, self14.d, self14.tx, self14.ty)) );
				self15.a -= n14.a;
				self15.b -= n14.b;
				self15.c -= n14.c;
				self15.d -= n14.d;
				self15.tx -= n14.tx;
				self15.ty -= n14.ty;
				mat32 = self15;
				global::hxmath.math.Matrix3x2Default n15 = ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) );
				this.assertTrue(( ( ( self15 == null ) && ( n15 == null ) ) || ( ( ( ( ( ( ( ( self15 != null ) && ( n15 != null ) ) && ( self15.a == n15.a ) ) && ( self15.b == n15.b ) ) && ( self15.c == n15.c ) ) && ( self15.d == n15.d ) ) && ( self15.tx == n15.tx ) ) && ( self15.ty == n15.ty ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (80) )}));
				global::hxmath.math.Matrix3x3Default mat33 = ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) );
				global::hxmath.math.Matrix3x3Default b = ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) );
				global::hxmath.math.Matrix3x3Default self16 = ((global::hxmath.math.Matrix3x3Default) (mat33) );
				global::hxmath.math.Matrix3x3Default self17 = ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(self16.m00, self16.m10, self16.m20, self16.m01, self16.m11, self16.m21, self16.m02, self16.m12, self16.m22)) );
				self17.m00 += b.m00;
				self17.m10 += b.m10;
				self17.m20 += b.m20;
				self17.m01 += b.m01;
				self17.m11 += b.m11;
				self17.m21 += b.m21;
				self17.m02 += b.m02;
				self17.m12 += b.m12;
				self17.m22 += b.m22;
				global::hxmath.math.Matrix3x3Default b1 = ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) );
				this.assertTrue(( ( ( self17 == null ) && ( b1 == null ) ) || ( ( ( ( ( ( ( ( ( ( ( self17 != null ) && ( b1 != null ) ) && ( self17.m00 == b1.m00 ) ) && ( self17.m10 == b1.m10 ) ) && ( self17.m20 == b1.m20 ) ) && ( self17.m01 == b1.m01 ) ) && ( self17.m11 == b1.m11 ) ) && ( self17.m21 == b1.m21 ) ) && ( self17.m02 == b1.m02 ) ) && ( self17.m12 == b1.m12 ) ) && ( self17.m22 == b1.m22 ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (83) )}));
				global::hxmath.math.Matrix3x3Default b2 = ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) );
				global::hxmath.math.Matrix3x3Default self18 = ((global::hxmath.math.Matrix3x3Default) (mat33) );
				global::hxmath.math.Matrix3x3Default self19 = ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(self18.m00, self18.m10, self18.m20, self18.m01, self18.m11, self18.m21, self18.m02, self18.m12, self18.m22)) );
				self19.m00 += b2.m00;
				self19.m10 += b2.m10;
				self19.m20 += b2.m20;
				self19.m01 += b2.m01;
				self19.m11 += b2.m11;
				self19.m21 += b2.m21;
				self19.m02 += b2.m02;
				self19.m12 += b2.m12;
				self19.m22 += b2.m22;
				mat33 = self19;
				global::hxmath.math.Matrix3x3Default b3 = ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) );
				this.assertTrue(( ( ( self19 == null ) && ( b3 == null ) ) || ( ( ( ( ( ( ( ( ( ( ( self19 != null ) && ( b3 != null ) ) && ( self19.m00 == b3.m00 ) ) && ( self19.m10 == b3.m10 ) ) && ( self19.m20 == b3.m20 ) ) && ( self19.m01 == b3.m01 ) ) && ( self19.m11 == b3.m11 ) ) && ( self19.m21 == b3.m21 ) ) && ( self19.m02 == b3.m02 ) ) && ( self19.m12 == b3.m12 ) ) && ( self19.m22 == b3.m22 ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (85) )}));
				global::hxmath.math.Matrix3x3Default b4 = ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) );
				global::hxmath.math.Matrix3x3Default self20 = ((global::hxmath.math.Matrix3x3Default) (self19) );
				global::hxmath.math.Matrix3x3Default self21 = ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(self20.m00, self20.m10, self20.m20, self20.m01, self20.m11, self20.m21, self20.m02, self20.m12, self20.m22)) );
				self21.m00 -= b4.m00;
				self21.m10 -= b4.m10;
				self21.m20 -= b4.m20;
				self21.m01 -= b4.m01;
				self21.m11 -= b4.m11;
				self21.m21 -= b4.m21;
				self21.m02 -= b4.m02;
				self21.m12 -= b4.m12;
				self21.m22 -= b4.m22;
				global::hxmath.math.Matrix3x3Default b5 = ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) );
				this.assertTrue(( ( ( self21 == null ) && ( b5 == null ) ) || ( ( ( ( ( ( ( ( ( ( ( self21 != null ) && ( b5 != null ) ) && ( self21.m00 == b5.m00 ) ) && ( self21.m10 == b5.m10 ) ) && ( self21.m20 == b5.m20 ) ) && ( self21.m01 == b5.m01 ) ) && ( self21.m11 == b5.m11 ) ) && ( self21.m21 == b5.m21 ) ) && ( self21.m02 == b5.m02 ) ) && ( self21.m12 == b5.m12 ) ) && ( self21.m22 == b5.m22 ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (86) )}));
				global::hxmath.math.Matrix3x3Default b6 = ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) );
				global::hxmath.math.Matrix3x3Default self22 = ((global::hxmath.math.Matrix3x3Default) (self19) );
				global::hxmath.math.Matrix3x3Default self23 = ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(self22.m00, self22.m10, self22.m20, self22.m01, self22.m11, self22.m21, self22.m02, self22.m12, self22.m22)) );
				self23.m00 -= b6.m00;
				self23.m10 -= b6.m10;
				self23.m20 -= b6.m20;
				self23.m01 -= b6.m01;
				self23.m11 -= b6.m11;
				self23.m21 -= b6.m21;
				self23.m02 -= b6.m02;
				self23.m12 -= b6.m12;
				self23.m22 -= b6.m22;
				mat33 = self23;
				global::hxmath.math.Matrix3x3Default b7 = ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) );
				this.assertTrue(( ( ( self23 == null ) && ( b7 == null ) ) || ( ( ( ( ( ( ( ( ( ( ( self23 != null ) && ( b7 != null ) ) && ( self23.m00 == b7.m00 ) ) && ( self23.m10 == b7.m10 ) ) && ( self23.m20 == b7.m20 ) ) && ( self23.m01 == b7.m01 ) ) && ( self23.m11 == b7.m11 ) ) && ( self23.m21 == b7.m21 ) ) && ( self23.m02 == b7.m02 ) ) && ( self23.m12 == b7.m12 ) ) && ( self23.m22 == b7.m22 ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (88) )}));
				global::hxmath.math.Matrix4x4Default mat44 = ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) );
				global::hxmath.math.Matrix4x4Default b8 = ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) );
				global::hxmath.math.Matrix4x4Default self24 = ((global::hxmath.math.Matrix4x4Default) (mat44) );
				global::hxmath.math.Matrix4x4Default self25 = ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(self24.m00, self24.m10, self24.m20, self24.m30, self24.m01, self24.m11, self24.m21, self24.m31, self24.m02, self24.m12, self24.m22, self24.m32, self24.m03, self24.m13, self24.m23, self24.m33)) );
				self25.m00 += b8.m00;
				self25.m10 += b8.m10;
				self25.m20 += b8.m20;
				self25.m30 += b8.m30;
				self25.m01 += b8.m01;
				self25.m11 += b8.m11;
				self25.m21 += b8.m21;
				self25.m31 += b8.m31;
				self25.m02 += b8.m02;
				self25.m12 += b8.m12;
				self25.m22 += b8.m22;
				self25.m32 += b8.m32;
				self25.m03 += b8.m03;
				self25.m13 += b8.m13;
				self25.m23 += b8.m23;
				self25.m33 += b8.m33;
				global::hxmath.math.Matrix4x4Default b9 = ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) );
				this.assertTrue(( ( ( self25 == null ) && ( b9 == null ) ) || ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( self25 != null ) && ( b9 != null ) ) && ( self25.m00 == b9.m00 ) ) && ( self25.m10 == b9.m10 ) ) && ( self25.m20 == b9.m20 ) ) && ( self25.m30 == b9.m30 ) ) && ( self25.m01 == b9.m01 ) ) && ( self25.m11 == b9.m11 ) ) && ( self25.m21 == b9.m21 ) ) && ( self25.m31 == b9.m31 ) ) && ( self25.m02 == b9.m02 ) ) && ( self25.m12 == b9.m12 ) ) && ( self25.m22 == b9.m22 ) ) && ( self25.m32 == b9.m32 ) ) && ( self25.m03 == b9.m03 ) ) && ( self25.m13 == b9.m13 ) ) && ( self25.m23 == b9.m23 ) ) && ( self25.m33 == b9.m33 ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (91) )}));
				global::hxmath.math.Matrix4x4Default b10 = ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) );
				global::hxmath.math.Matrix4x4Default self26 = ((global::hxmath.math.Matrix4x4Default) (mat44) );
				global::hxmath.math.Matrix4x4Default self27 = ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(self26.m00, self26.m10, self26.m20, self26.m30, self26.m01, self26.m11, self26.m21, self26.m31, self26.m02, self26.m12, self26.m22, self26.m32, self26.m03, self26.m13, self26.m23, self26.m33)) );
				self27.m00 += b10.m00;
				self27.m10 += b10.m10;
				self27.m20 += b10.m20;
				self27.m30 += b10.m30;
				self27.m01 += b10.m01;
				self27.m11 += b10.m11;
				self27.m21 += b10.m21;
				self27.m31 += b10.m31;
				self27.m02 += b10.m02;
				self27.m12 += b10.m12;
				self27.m22 += b10.m22;
				self27.m32 += b10.m32;
				self27.m03 += b10.m03;
				self27.m13 += b10.m13;
				self27.m23 += b10.m23;
				self27.m33 += b10.m33;
				mat44 = self27;
				global::hxmath.math.Matrix4x4Default b11 = ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) );
				this.assertTrue(( ( ( self27 == null ) && ( b11 == null ) ) || ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( self27 != null ) && ( b11 != null ) ) && ( self27.m00 == b11.m00 ) ) && ( self27.m10 == b11.m10 ) ) && ( self27.m20 == b11.m20 ) ) && ( self27.m30 == b11.m30 ) ) && ( self27.m01 == b11.m01 ) ) && ( self27.m11 == b11.m11 ) ) && ( self27.m21 == b11.m21 ) ) && ( self27.m31 == b11.m31 ) ) && ( self27.m02 == b11.m02 ) ) && ( self27.m12 == b11.m12 ) ) && ( self27.m22 == b11.m22 ) ) && ( self27.m32 == b11.m32 ) ) && ( self27.m03 == b11.m03 ) ) && ( self27.m13 == b11.m13 ) ) && ( self27.m23 == b11.m23 ) ) && ( self27.m33 == b11.m33 ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (93) )}));
				global::hxmath.math.Matrix4x4Default b12 = ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) );
				global::hxmath.math.Matrix4x4Default self28 = ((global::hxmath.math.Matrix4x4Default) (self27) );
				global::hxmath.math.Matrix4x4Default self29 = ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(self28.m00, self28.m10, self28.m20, self28.m30, self28.m01, self28.m11, self28.m21, self28.m31, self28.m02, self28.m12, self28.m22, self28.m32, self28.m03, self28.m13, self28.m23, self28.m33)) );
				self29.m00 -= b12.m00;
				self29.m10 -= b12.m10;
				self29.m20 -= b12.m20;
				self29.m30 -= b12.m30;
				self29.m01 -= b12.m01;
				self29.m11 -= b12.m11;
				self29.m21 -= b12.m21;
				self29.m31 -= b12.m31;
				self29.m02 -= b12.m02;
				self29.m12 -= b12.m12;
				self29.m22 -= b12.m22;
				self29.m32 -= b12.m32;
				self29.m03 -= b12.m03;
				self29.m13 -= b12.m13;
				self29.m23 -= b12.m23;
				self29.m33 -= b12.m33;
				global::hxmath.math.Matrix4x4Default b13 = ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) );
				this.assertTrue(( ( ( self29 == null ) && ( b13 == null ) ) || ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( self29 != null ) && ( b13 != null ) ) && ( self29.m00 == b13.m00 ) ) && ( self29.m10 == b13.m10 ) ) && ( self29.m20 == b13.m20 ) ) && ( self29.m30 == b13.m30 ) ) && ( self29.m01 == b13.m01 ) ) && ( self29.m11 == b13.m11 ) ) && ( self29.m21 == b13.m21 ) ) && ( self29.m31 == b13.m31 ) ) && ( self29.m02 == b13.m02 ) ) && ( self29.m12 == b13.m12 ) ) && ( self29.m22 == b13.m22 ) ) && ( self29.m32 == b13.m32 ) ) && ( self29.m03 == b13.m03 ) ) && ( self29.m13 == b13.m13 ) ) && ( self29.m23 == b13.m23 ) ) && ( self29.m33 == b13.m33 ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (94) )}));
				global::hxmath.math.Matrix4x4Default b14 = ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) );
				global::hxmath.math.Matrix4x4Default self30 = ((global::hxmath.math.Matrix4x4Default) (self27) );
				global::hxmath.math.Matrix4x4Default self31 = ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(self30.m00, self30.m10, self30.m20, self30.m30, self30.m01, self30.m11, self30.m21, self30.m31, self30.m02, self30.m12, self30.m22, self30.m32, self30.m03, self30.m13, self30.m23, self30.m33)) );
				self31.m00 -= b14.m00;
				self31.m10 -= b14.m10;
				self31.m20 -= b14.m20;
				self31.m30 -= b14.m30;
				self31.m01 -= b14.m01;
				self31.m11 -= b14.m11;
				self31.m21 -= b14.m21;
				self31.m31 -= b14.m31;
				self31.m02 -= b14.m02;
				self31.m12 -= b14.m12;
				self31.m22 -= b14.m22;
				self31.m32 -= b14.m32;
				self31.m03 -= b14.m03;
				self31.m13 -= b14.m13;
				self31.m23 -= b14.m23;
				self31.m33 -= b14.m33;
				mat44 = self31;
				global::hxmath.math.Matrix4x4Default b15 = ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) );
				this.assertTrue(( ( ( self31 == null ) && ( b15 == null ) ) || ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( self31 != null ) && ( b15 != null ) ) && ( self31.m00 == b15.m00 ) ) && ( self31.m10 == b15.m10 ) ) && ( self31.m20 == b15.m20 ) ) && ( self31.m30 == b15.m30 ) ) && ( self31.m01 == b15.m01 ) ) && ( self31.m11 == b15.m11 ) ) && ( self31.m21 == b15.m21 ) ) && ( self31.m31 == b15.m31 ) ) && ( self31.m02 == b15.m02 ) ) && ( self31.m12 == b15.m12 ) ) && ( self31.m22 == b15.m22 ) ) && ( self31.m32 == b15.m32 ) ) && ( self31.m03 == b15.m03 ) ) && ( self31.m13 == b15.m13 ) ) && ( self31.m23 == b15.m23 ) ) && ( self31.m33 == b15.m33 ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (96) )}));
				global::hxmath.math.Vector2Default vec2 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 0.0)) );
				global::hxmath.math.Vector2Default b16 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 0.0)) );
				global::hxmath.math.Vector2Default self32 = ((global::hxmath.math.Vector2Default) (vec2) );
				global::hxmath.math.Vector2Default self33 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self32.x, self32.y)) );
				self33.x += b16.x;
				self33.y += b16.y;
				global::hxmath.math.Vector2Default b17 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 0.0)) );
				this.assertTrue(( ( ( self33 == null ) && ( b17 == null ) ) || ( ( ( ( self33 != null ) && ( b17 != null ) ) && ( self33.x == b17.x ) ) && ( self33.y == b17.y ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (99) )}));
				global::hxmath.math.Vector2Default b18 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 0.0)) );
				global::hxmath.math.Vector2Default self34 = ((global::hxmath.math.Vector2Default) (vec2) );
				global::hxmath.math.Vector2Default self35 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self34.x, self34.y)) );
				self35.x += b18.x;
				self35.y += b18.y;
				vec2 = self35;
				global::hxmath.math.Vector2Default b19 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 0.0)) );
				this.assertTrue(( ( ( self35 == null ) && ( b19 == null ) ) || ( ( ( ( self35 != null ) && ( b19 != null ) ) && ( self35.x == b19.x ) ) && ( self35.y == b19.y ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (101) )}));
				global::hxmath.math.Vector2Default b20 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 0.0)) );
				global::hxmath.math.Vector2Default self36 = ((global::hxmath.math.Vector2Default) (self35) );
				global::hxmath.math.Vector2Default self37 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self36.x, self36.y)) );
				self37.x -= b20.x;
				self37.y -= b20.y;
				global::hxmath.math.Vector2Default b21 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 0.0)) );
				this.assertTrue(( ( ( self37 == null ) && ( b21 == null ) ) || ( ( ( ( self37 != null ) && ( b21 != null ) ) && ( self37.x == b21.x ) ) && ( self37.y == b21.y ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (102) )}));
				global::hxmath.math.Vector2Default b22 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 0.0)) );
				global::hxmath.math.Vector2Default self38 = ((global::hxmath.math.Vector2Default) (self35) );
				global::hxmath.math.Vector2Default self39 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self38.x, self38.y)) );
				self39.x -= b22.x;
				self39.y -= b22.y;
				vec2 = self39;
				global::hxmath.math.Vector2Default b23 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 0.0)) );
				this.assertTrue(( ( ( self39 == null ) && ( b23 == null ) ) || ( ( ( ( self39 != null ) && ( b23 != null ) ) && ( self39.x == b23.x ) ) && ( self39.y == b23.y ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (104) )}));
				global::hxmath.math.Vector3Default vec3 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 0.0, 0.0)) );
				global::hxmath.math.Vector3Default b24 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(1.0, 0.0, 0.0)) );
				global::hxmath.math.Vector3Default self40 = ((global::hxmath.math.Vector3Default) (vec3) );
				global::hxmath.math.Vector3Default self41 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(self40.x, self40.y, self40.z)) );
				self41.x += b24.x;
				self41.y += b24.y;
				self41.z += b24.z;
				global::hxmath.math.Vector3Default b25 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(1.0, 0.0, 0.0)) );
				this.assertTrue(( ( ( self41 == null ) && ( b25 == null ) ) || ( ( ( ( ( self41 != null ) && ( b25 != null ) ) && ( self41.x == b25.x ) ) && ( self41.y == b25.y ) ) && ( self41.z == b25.z ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (107) )}));
				global::hxmath.math.Vector3Default b26 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(1.0, 0.0, 0.0)) );
				global::hxmath.math.Vector3Default self42 = ((global::hxmath.math.Vector3Default) (vec3) );
				global::hxmath.math.Vector3Default self43 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(self42.x, self42.y, self42.z)) );
				self43.x += b26.x;
				self43.y += b26.y;
				self43.z += b26.z;
				vec3 = self43;
				global::hxmath.math.Vector3Default b27 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(1.0, 0.0, 0.0)) );
				this.assertTrue(( ( ( self43 == null ) && ( b27 == null ) ) || ( ( ( ( ( self43 != null ) && ( b27 != null ) ) && ( self43.x == b27.x ) ) && ( self43.y == b27.y ) ) && ( self43.z == b27.z ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (109) )}));
				global::hxmath.math.Vector3Default b28 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(1.0, 0.0, 0.0)) );
				global::hxmath.math.Vector3Default self44 = ((global::hxmath.math.Vector3Default) (self43) );
				global::hxmath.math.Vector3Default self45 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(self44.x, self44.y, self44.z)) );
				self45.x -= b28.x;
				self45.y -= b28.y;
				self45.z -= b28.z;
				global::hxmath.math.Vector3Default b29 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 0.0, 0.0)) );
				this.assertTrue(( ( ( self45 == null ) && ( b29 == null ) ) || ( ( ( ( ( self45 != null ) && ( b29 != null ) ) && ( self45.x == b29.x ) ) && ( self45.y == b29.y ) ) && ( self45.z == b29.z ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (110) )}));
				global::hxmath.math.Vector3Default b30 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(1.0, 0.0, 0.0)) );
				global::hxmath.math.Vector3Default self46 = ((global::hxmath.math.Vector3Default) (self43) );
				global::hxmath.math.Vector3Default self47 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(self46.x, self46.y, self46.z)) );
				self47.x -= b30.x;
				self47.y -= b30.y;
				self47.z -= b30.z;
				vec3 = self47;
				global::hxmath.math.Vector3Default b31 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 0.0, 0.0)) );
				this.assertTrue(( ( ( self47 == null ) && ( b31 == null ) ) || ( ( ( ( ( self47 != null ) && ( b31 != null ) ) && ( self47.x == b31.x ) ) && ( self47.y == b31.y ) ) && ( self47.z == b31.z ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (112) )}));
				global::hxmath.math.Vector4Default vec4 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 0.0, 0.0, 0.0)) );
				global::hxmath.math.Vector4Default b32 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(1.0, 0.0, 0.0, 0.0)) );
				global::hxmath.math.Vector4Default self48 = ((global::hxmath.math.Vector4Default) (vec4) );
				global::hxmath.math.Vector4Default self49 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(self48.x, self48.y, self48.z, self48.w)) );
				self49.x += b32.x;
				self49.y += b32.y;
				self49.z += b32.z;
				self49.w += b32.w;
				global::hxmath.math.Vector4Default b33 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(1.0, 0.0, 0.0, 0.0)) );
				this.assertTrue(( ( ( self49 == null ) && ( b33 == null ) ) || ( ( ( ( ( ( self49 != null ) && ( b33 != null ) ) && ( self49.x == b33.x ) ) && ( self49.y == b33.y ) ) && ( self49.z == b33.z ) ) && ( self49.w == b33.w ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (115) )}));
				global::hxmath.math.Vector4Default b34 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(1.0, 0.0, 0.0, 0.0)) );
				global::hxmath.math.Vector4Default self50 = ((global::hxmath.math.Vector4Default) (vec4) );
				global::hxmath.math.Vector4Default self51 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(self50.x, self50.y, self50.z, self50.w)) );
				self51.x += b34.x;
				self51.y += b34.y;
				self51.z += b34.z;
				self51.w += b34.w;
				vec4 = self51;
				global::hxmath.math.Vector4Default b35 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(1.0, 0.0, 0.0, 0.0)) );
				this.assertTrue(( ( ( self51 == null ) && ( b35 == null ) ) || ( ( ( ( ( ( self51 != null ) && ( b35 != null ) ) && ( self51.x == b35.x ) ) && ( self51.y == b35.y ) ) && ( self51.z == b35.z ) ) && ( self51.w == b35.w ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (117) )}));
				global::hxmath.math.Vector4Default b36 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(1.0, 0.0, 0.0, 0.0)) );
				global::hxmath.math.Vector4Default self52 = ((global::hxmath.math.Vector4Default) (self51) );
				global::hxmath.math.Vector4Default self53 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(self52.x, self52.y, self52.z, self52.w)) );
				self53.x -= b36.x;
				self53.y -= b36.y;
				self53.z -= b36.z;
				self53.w -= b36.w;
				global::hxmath.math.Vector4Default b37 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 0.0, 0.0, 0.0)) );
				this.assertTrue(( ( ( self53 == null ) && ( b37 == null ) ) || ( ( ( ( ( ( self53 != null ) && ( b37 != null ) ) && ( self53.x == b37.x ) ) && ( self53.y == b37.y ) ) && ( self53.z == b37.z ) ) && ( self53.w == b37.w ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (118) )}));
				global::hxmath.math.Vector4Default b38 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(1.0, 0.0, 0.0, 0.0)) );
				global::hxmath.math.Vector4Default self54 = ((global::hxmath.math.Vector4Default) (self51) );
				global::hxmath.math.Vector4Default self55 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(self54.x, self54.y, self54.z, self54.w)) );
				self55.x -= b38.x;
				self55.y -= b38.y;
				self55.z -= b38.z;
				self55.w -= b38.w;
				vec4 = self55;
				global::hxmath.math.Vector4Default b39 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 0.0, 0.0, 0.0)) );
				this.assertTrue(( ( ( self55 == null ) && ( b39 == null ) ) || ( ( ( ( ( ( self55 != null ) && ( b39 != null ) ) && ( self55.x == b39.x ) ) && ( self55.y == b39.y ) ) && ( self55.z == b39.z ) ) && ( self55.w == b39.w ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (120) )}));
				global::hxmath.math.QuaternionDefault q = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (0) ))) );
				global::hxmath.math.QuaternionDefault b40 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(((double) (1) ), ((double) (0) ), ((double) (0) ), ((double) (0) ))) );
				global::hxmath.math.QuaternionDefault self56 = ((global::hxmath.math.QuaternionDefault) (q) );
				global::hxmath.math.QuaternionDefault self57 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(self56.s, self56.x, self56.y, self56.z)) );
				self57.s += b40.s;
				self57.x += b40.x;
				self57.y += b40.y;
				self57.z += b40.z;
				global::hxmath.math.QuaternionDefault b41 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(((double) (1) ), ((double) (0) ), ((double) (0) ), ((double) (0) ))) );
				this.assertTrue(( ( ( self57 == null ) && ( b41 == null ) ) || ( ( ( ( ( ( self57 != null ) && ( b41 != null ) ) && ( self57.s == b41.s ) ) && ( self57.x == b41.x ) ) && ( self57.y == b41.y ) ) && ( self57.z == b41.z ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (123) )}));
				global::hxmath.math.QuaternionDefault b42 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(((double) (1) ), ((double) (0) ), ((double) (0) ), ((double) (0) ))) );
				global::hxmath.math.QuaternionDefault self58 = ((global::hxmath.math.QuaternionDefault) (q) );
				global::hxmath.math.QuaternionDefault self59 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(self58.s, self58.x, self58.y, self58.z)) );
				self59.s += b42.s;
				self59.x += b42.x;
				self59.y += b42.y;
				self59.z += b42.z;
				q = self59;
				global::hxmath.math.QuaternionDefault b43 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(((double) (1) ), ((double) (0) ), ((double) (0) ), ((double) (0) ))) );
				this.assertTrue(( ( ( self59 == null ) && ( b43 == null ) ) || ( ( ( ( ( ( self59 != null ) && ( b43 != null ) ) && ( self59.s == b43.s ) ) && ( self59.x == b43.x ) ) && ( self59.y == b43.y ) ) && ( self59.z == b43.z ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (125) )}));
				global::hxmath.math.QuaternionDefault b44 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(((double) (1) ), ((double) (0) ), ((double) (0) ), ((double) (0) ))) );
				global::hxmath.math.QuaternionDefault self60 = ((global::hxmath.math.QuaternionDefault) (self59) );
				global::hxmath.math.QuaternionDefault self61 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(self60.s, self60.x, self60.y, self60.z)) );
				self61.s -= b44.s;
				self61.x -= b44.x;
				self61.y -= b44.y;
				self61.z -= b44.z;
				global::hxmath.math.QuaternionDefault b45 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (0) ))) );
				this.assertTrue(( ( ( self61 == null ) && ( b45 == null ) ) || ( ( ( ( ( ( self61 != null ) && ( b45 != null ) ) && ( self61.s == b45.s ) ) && ( self61.x == b45.x ) ) && ( self61.y == b45.y ) ) && ( self61.z == b45.z ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (126) )}));
				global::hxmath.math.QuaternionDefault b46 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(((double) (1) ), ((double) (0) ), ((double) (0) ), ((double) (0) ))) );
				global::hxmath.math.QuaternionDefault self62 = ((global::hxmath.math.QuaternionDefault) (self59) );
				global::hxmath.math.QuaternionDefault self63 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(self62.s, self62.x, self62.y, self62.z)) );
				self63.s -= b46.s;
				self63.x -= b46.x;
				self63.y -= b46.y;
				self63.z -= b46.z;
				q = self63;
				global::hxmath.math.QuaternionDefault b47 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (0) ))) );
				this.assertTrue(( ( ( self63 == null ) && ( b47 == null ) ) || ( ( ( ( ( ( self63 != null ) && ( b47 != null ) ) && ( self63.s == b47.s ) ) && ( self63.x == b47.x ) ) && ( self63.y == b47.y ) ) && ( self63.z == b47.z ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (128) )}));
				global::hxmath.math.IntVector2Default intVec2 = global::hxmath.math._IntVector2.IntVector2_Impl_._new(0, 0);
				global::hxmath.math.IntVector2Default b48 = global::hxmath.math._IntVector2.IntVector2_Impl_._new(1, 0);
				global::hxmath.math.IntVector2Default self64 = ((global::hxmath.math.IntVector2Default) (intVec2) );
				global::hxmath.math.IntVector2Default self65 = ((global::hxmath.math.IntVector2Default) (global::hxmath.math._IntVector2.IntVector2_Impl_._new(self64.x, self64.y)) );
				self65.x += b48.x;
				self65.y += b48.y;
				global::hxmath.math.IntVector2Default b49 = global::hxmath.math._IntVector2.IntVector2_Impl_._new(1, 0);
				this.assertTrue(( ( ( self65 == null ) && ( b49 == null ) ) || ( ( ( ( self65 != null ) && ( b49 != null ) ) && ( self65.x == b49.x ) ) && ( self65.y == b49.y ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (131) )}));
				global::hxmath.math.IntVector2Default b50 = global::hxmath.math._IntVector2.IntVector2_Impl_._new(1, 0);
				global::hxmath.math.IntVector2Default self66 = ((global::hxmath.math.IntVector2Default) (intVec2) );
				global::hxmath.math.IntVector2Default self67 = ((global::hxmath.math.IntVector2Default) (global::hxmath.math._IntVector2.IntVector2_Impl_._new(self66.x, self66.y)) );
				self67.x += b50.x;
				self67.y += b50.y;
				intVec2 = self67;
				global::hxmath.math.IntVector2Default b51 = global::hxmath.math._IntVector2.IntVector2_Impl_._new(1, 0);
				this.assertTrue(( ( ( self67 == null ) && ( b51 == null ) ) || ( ( ( ( self67 != null ) && ( b51 != null ) ) && ( self67.x == b51.x ) ) && ( self67.y == b51.y ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (133) )}));
				global::hxmath.math.IntVector2Default b52 = global::hxmath.math._IntVector2.IntVector2_Impl_._new(1, 0);
				global::hxmath.math.IntVector2Default self68 = ((global::hxmath.math.IntVector2Default) (self67) );
				global::hxmath.math.IntVector2Default self69 = ((global::hxmath.math.IntVector2Default) (global::hxmath.math._IntVector2.IntVector2_Impl_._new(self68.x, self68.y)) );
				self69.x -= b52.x;
				self69.y -= b52.y;
				global::hxmath.math.IntVector2Default b53 = global::hxmath.math._IntVector2.IntVector2_Impl_._new(0, 0);
				this.assertTrue(( ( ( self69 == null ) && ( b53 == null ) ) || ( ( ( ( self69 != null ) && ( b53 != null ) ) && ( self69.x == b53.x ) ) && ( self69.y == b53.y ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (134) )}));
				global::hxmath.math.IntVector2Default b54 = global::hxmath.math._IntVector2.IntVector2_Impl_._new(1, 0);
				global::hxmath.math.IntVector2Default self70 = ((global::hxmath.math.IntVector2Default) (self67) );
				global::hxmath.math.IntVector2Default self71 = ((global::hxmath.math.IntVector2Default) (global::hxmath.math._IntVector2.IntVector2_Impl_._new(self70.x, self70.y)) );
				self71.x -= b54.x;
				self71.y -= b54.y;
				intVec2 = self71;
				global::hxmath.math.IntVector2Default b55 = global::hxmath.math._IntVector2.IntVector2_Impl_._new(0, 0);
				this.assertTrue(( ( ( self71 == null ) && ( b55 == null ) ) || ( ( ( ( self71 != null ) && ( b55 != null ) ) && ( self71.x == b55.x ) ) && ( self71.y == b55.y ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (136) )}));
				int shortVec2 = global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(0, 0);
				int b56 = global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(1, 0);
				this.assertTrue(( global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(( (( ((int) (shortVec2) ) & 65535 )) + (( ((int) (b56) ) & 65535 )) ), ( (( ( ((int) (shortVec2) ) >> 16 ) & 65535 )) + (( ( ((int) (b56) ) >> 16 ) & 65535 )) )) == global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(1, 0) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (139) )}));
				int b57 = global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(1, 0);
				shortVec2 = global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(( (( ((int) (shortVec2) ) & 65535 )) + (( ((int) (b57) ) & 65535 )) ), ( (( ( ((int) (shortVec2) ) >> 16 ) & 65535 )) + (( ( ((int) (b57) ) >> 16 ) & 65535 )) ));
				this.assertTrue(( shortVec2 == global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(1, 0) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (141) )}));
				int b58 = global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(1, 0);
				this.assertTrue(( global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(( (( ((int) (shortVec2) ) & 65535 )) - (( ((int) (b58) ) & 65535 )) ), ( (( ( ((int) (shortVec2) ) >> 16 ) & 65535 )) - (( ( ((int) (b58) ) >> 16 ) & 65535 )) )) == global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(0, 0) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (142) )}));
				int b59 = global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(1, 0);
				shortVec2 = global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(( (( ((int) (shortVec2) ) & 65535 )) - (( ((int) (b59) ) & 65535 )) ), ( (( ( ((int) (shortVec2) ) >> 16 ) & 65535 )) - (( ( ((int) (b59) ) >> 16 ) & 65535 )) ));
				this.assertTrue(( shortVec2 == global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(0, 0) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddSub", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (144) )}));
			}
		}
		
		
		public virtual void testDeterminant() {
			unchecked {
				global::hxmath.math.Matrix2x2Default self = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(0.0, 0.0, 0.0, 0.0)) );
				this.assertEquals<double>(((double) (( ( self.a * self.d ) - ( self.b * self.c ) )) ), ((double) (0.0) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDeterminant", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (149) )})) ));
				global::hxmath.math.Matrix2x2Default self1 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(1.0, 0.0, 0.0, 1.0)) );
				this.assertEquals<double>(((double) (( ( self1.a * self1.d ) - ( self1.b * self1.c ) )) ), ((double) (1.0) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDeterminant", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (150) )})) ));
				{
					int _g = 0;
					while (( _g < 10 )) {
						 ++ _g;
						global::hxmath.math.Matrix2x2Default a = this.randomMatrix2x2(default(global::haxe.lang.Null<double>));
						global::hxmath.math.Matrix2x2Default b = this.randomMatrix2x2(default(global::haxe.lang.Null<double>));
						global::hxmath.math.Matrix2x2Default self2 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(( ( a.a * b.a ) + ( a.b * b.c ) ), ( ( a.a * b.b ) + ( a.b * b.d ) ), ( ( a.c * b.a ) + ( a.d * b.c ) ), ( ( a.c * b.b ) + ( a.d * b.d ) ))) );
						this.assertApproxEquals(( ( self2.a * self2.d ) - ( self2.b * self2.c ) ), ( (( ( a.a * a.d ) - ( a.b * a.c ) )) * (( ( b.a * b.d ) - ( b.b * b.c ) )) ), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDeterminant", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (156) )}));
					}
					
				}
				
				global::hxmath.math.Matrix3x3Default self3 = ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) );
				double m00 = self3.m00;
				double m10 = self3.m10;
				double m20 = self3.m20;
				double m01 = self3.m01;
				double m11 = self3.m11;
				double m21 = self3.m21;
				double m02 = self3.m02;
				double m12 = self3.m12;
				double m22 = self3.m22;
				this.assertEquals<double>(((double) (( ( ( m00 * (( ( m11 * m22 ) - ( m21 * m12 ) )) ) - ( m10 * (( ( m01 * m22 ) - ( m21 * m02 ) )) ) ) + ( m20 * (( ( m01 * m12 ) - ( m11 * m02 ) )) ) )) ), ((double) (0.0) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDeterminant", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (159) )})) ));
				global::hxmath.math.Matrix3x3Default self4 = ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) );
				double m001 = self4.m00;
				double m101 = self4.m10;
				double m201 = self4.m20;
				double m011 = self4.m01;
				double m111 = self4.m11;
				double m211 = self4.m21;
				double m021 = self4.m02;
				double m121 = self4.m12;
				double m221 = self4.m22;
				this.assertEquals<double>(((double) (( ( ( m001 * (( ( m111 * m221 ) - ( m211 * m121 ) )) ) - ( m101 * (( ( m011 * m221 ) - ( m211 * m021 ) )) ) ) + ( m201 * (( ( m011 * m121 ) - ( m111 * m021 ) )) ) )) ), ((double) (1.0) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDeterminant", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (160) )})) ));
				{
					int _g1 = 0;
					while (( _g1 < 10 )) {
						 ++ _g1;
						global::hxmath.math.Matrix3x3Default a1 = this.randomMatrix3x3(default(global::haxe.lang.Null<double>));
						global::hxmath.math.Matrix3x3Default b1 = this.randomMatrix3x3(default(global::haxe.lang.Null<double>));
						global::hxmath.math.Matrix3x3Default self5 = ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(( ( ( a1.m00 * b1.m00 ) + ( a1.m10 * b1.m01 ) ) + ( a1.m20 * b1.m02 ) ), ( ( ( a1.m00 * b1.m10 ) + ( a1.m10 * b1.m11 ) ) + ( a1.m20 * b1.m12 ) ), ( ( ( a1.m00 * b1.m20 ) + ( a1.m10 * b1.m21 ) ) + ( a1.m20 * b1.m22 ) ), ( ( ( a1.m01 * b1.m00 ) + ( a1.m11 * b1.m01 ) ) + ( a1.m21 * b1.m02 ) ), ( ( ( a1.m01 * b1.m10 ) + ( a1.m11 * b1.m11 ) ) + ( a1.m21 * b1.m12 ) ), ( ( ( a1.m01 * b1.m20 ) + ( a1.m11 * b1.m21 ) ) + ( a1.m21 * b1.m22 ) ), ( ( ( a1.m02 * b1.m00 ) + ( a1.m12 * b1.m01 ) ) + ( a1.m22 * b1.m02 ) ), ( ( ( a1.m02 * b1.m10 ) + ( a1.m12 * b1.m11 ) ) + ( a1.m22 * b1.m12 ) ), ( ( ( a1.m02 * b1.m20 ) + ( a1.m12 * b1.m21 ) ) + ( a1.m22 * b1.m22 ) ))) );
						double m002 = self5.m00;
						double m102 = self5.m10;
						double m202 = self5.m20;
						double m012 = self5.m01;
						double m112 = self5.m11;
						double m212 = self5.m21;
						double m022 = self5.m02;
						double m122 = self5.m12;
						double m222 = self5.m22;
						double tmp = ( ( ( m002 * (( ( m112 * m222 ) - ( m212 * m122 ) )) ) - ( m102 * (( ( m012 * m222 ) - ( m212 * m022 ) )) ) ) + ( m202 * (( ( m012 * m122 ) - ( m112 * m022 ) )) ) );
						double m003 = a1.m00;
						double m103 = a1.m10;
						double m203 = a1.m20;
						double m013 = a1.m01;
						double m113 = a1.m11;
						double m213 = a1.m21;
						double m023 = a1.m02;
						double m123 = a1.m12;
						double m223 = a1.m22;
						double tmp1 = ( ( ( m003 * (( ( m113 * m223 ) - ( m213 * m123 ) )) ) - ( m103 * (( ( m013 * m223 ) - ( m213 * m023 ) )) ) ) + ( m203 * (( ( m013 * m123 ) - ( m113 * m023 ) )) ) );
						double m004 = b1.m00;
						double m104 = b1.m10;
						double m204 = b1.m20;
						double m014 = b1.m01;
						double m114 = b1.m11;
						double m214 = b1.m21;
						double m024 = b1.m02;
						double m124 = b1.m12;
						double m224 = b1.m22;
						this.assertApproxEquals(tmp, ( tmp1 * (( ( ( m004 * (( ( m114 * m224 ) - ( m214 * m124 ) )) ) - ( m104 * (( ( m014 * m224 ) - ( m214 * m024 ) )) ) ) + ( m204 * (( ( m014 * m124 ) - ( m114 * m024 ) )) ) )) ), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDeterminant", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (166) )}));
					}
					
				}
				
				global::hxmath.math.Matrix4x4Default self6 = ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) );
				double m005 = self6.m00;
				double m105 = self6.m10;
				double m205 = self6.m20;
				double m30 = self6.m30;
				double m015 = self6.m01;
				double m115 = self6.m11;
				double m215 = self6.m21;
				double m31 = self6.m31;
				double m025 = self6.m02;
				double m125 = self6.m12;
				double m225 = self6.m22;
				double m32 = self6.m32;
				double m03 = self6.m03;
				double m13 = self6.m13;
				double m23 = self6.m23;
				double m33 = self6.m33;
				this.assertEquals<double>(((double) (( ( ( ( m005 * (( ( ( m115 * (( ( m225 * m33 ) - ( m32 * m23 ) )) ) - ( m215 * (( ( m125 * m33 ) - ( m32 * m13 ) )) ) ) + ( m31 * (( ( m125 * m23 ) - ( m225 * m13 ) )) ) )) ) - ( m105 * (( ( ( m015 * (( ( m225 * m33 ) - ( m32 * m23 ) )) ) - ( m215 * (( ( m025 * m33 ) - ( m32 * m03 ) )) ) ) + ( m31 * (( ( m025 * m23 ) - ( m225 * m03 ) )) ) )) ) ) + ( m205 * (( ( ( m015 * (( ( m125 * m33 ) - ( m32 * m13 ) )) ) - ( m115 * (( ( m025 * m33 ) - ( m32 * m03 ) )) ) ) + ( m31 * (( ( m025 * m13 ) - ( m125 * m03 ) )) ) )) ) ) - ( m30 * (( ( ( m015 * (( ( m125 * m23 ) - ( m225 * m13 ) )) ) - ( m115 * (( ( m025 * m23 ) - ( m225 * m03 ) )) ) ) + ( m215 * (( ( m025 * m13 ) - ( m125 * m03 ) )) ) )) ) )) ), ((double) (0.0) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDeterminant", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (169) )})) ));
				global::hxmath.math.Matrix4x4Default self7 = ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) );
				double m006 = self7.m00;
				double m106 = self7.m10;
				double m206 = self7.m20;
				double m301 = self7.m30;
				double m016 = self7.m01;
				double m116 = self7.m11;
				double m216 = self7.m21;
				double m311 = self7.m31;
				double m026 = self7.m02;
				double m126 = self7.m12;
				double m226 = self7.m22;
				double m321 = self7.m32;
				double m031 = self7.m03;
				double m131 = self7.m13;
				double m231 = self7.m23;
				double m331 = self7.m33;
				this.assertEquals<double>(((double) (( ( ( ( m006 * (( ( ( m116 * (( ( m226 * m331 ) - ( m321 * m231 ) )) ) - ( m216 * (( ( m126 * m331 ) - ( m321 * m131 ) )) ) ) + ( m311 * (( ( m126 * m231 ) - ( m226 * m131 ) )) ) )) ) - ( m106 * (( ( ( m016 * (( ( m226 * m331 ) - ( m321 * m231 ) )) ) - ( m216 * (( ( m026 * m331 ) - ( m321 * m031 ) )) ) ) + ( m311 * (( ( m026 * m231 ) - ( m226 * m031 ) )) ) )) ) ) + ( m206 * (( ( ( m016 * (( ( m126 * m331 ) - ( m321 * m131 ) )) ) - ( m116 * (( ( m026 * m331 ) - ( m321 * m031 ) )) ) ) + ( m311 * (( ( m026 * m131 ) - ( m126 * m031 ) )) ) )) ) ) - ( m301 * (( ( ( m016 * (( ( m126 * m231 ) - ( m226 * m131 ) )) ) - ( m116 * (( ( m026 * m231 ) - ( m226 * m031 ) )) ) ) + ( m216 * (( ( m026 * m131 ) - ( m126 * m031 ) )) ) )) ) )) ), ((double) (1.0) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDeterminant", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (170) )})) ));
				{
					int _g2 = 0;
					while (( _g2 < 1 )) {
						 ++ _g2;
						global::hxmath.math.Matrix4x4Default a2 = this.randomMatrix4x4(default(global::haxe.lang.Null<double>));
						global::hxmath.math.Matrix4x4Default b2 = this.randomMatrix4x4(default(global::haxe.lang.Null<double>));
						global::hxmath.math.Matrix4x4Default self8 = ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(( ( ( ( a2.m00 * b2.m00 ) + ( a2.m10 * b2.m01 ) ) + ( a2.m20 * b2.m02 ) ) + ( a2.m30 * b2.m03 ) ), ( ( ( ( a2.m00 * b2.m10 ) + ( a2.m10 * b2.m11 ) ) + ( a2.m20 * b2.m12 ) ) + ( a2.m30 * b2.m13 ) ), ( ( ( ( a2.m00 * b2.m20 ) + ( a2.m10 * b2.m21 ) ) + ( a2.m20 * b2.m22 ) ) + ( a2.m30 * b2.m23 ) ), ( ( ( ( a2.m00 * b2.m30 ) + ( a2.m10 * b2.m31 ) ) + ( a2.m20 * b2.m32 ) ) + ( a2.m30 * b2.m33 ) ), ( ( ( ( a2.m01 * b2.m00 ) + ( a2.m11 * b2.m01 ) ) + ( a2.m21 * b2.m02 ) ) + ( a2.m31 * b2.m03 ) ), ( ( ( ( a2.m01 * b2.m10 ) + ( a2.m11 * b2.m11 ) ) + ( a2.m21 * b2.m12 ) ) + ( a2.m31 * b2.m13 ) ), ( ( ( ( a2.m01 * b2.m20 ) + ( a2.m11 * b2.m21 ) ) + ( a2.m21 * b2.m22 ) ) + ( a2.m31 * b2.m23 ) ), ( ( ( ( a2.m01 * b2.m30 ) + ( a2.m11 * b2.m31 ) ) + ( a2.m21 * b2.m32 ) ) + ( a2.m31 * b2.m33 ) ), ( ( ( ( a2.m02 * b2.m00 ) + ( a2.m12 * b2.m01 ) ) + ( a2.m22 * b2.m02 ) ) + ( a2.m32 * b2.m03 ) ), ( ( ( ( a2.m02 * b2.m10 ) + ( a2.m12 * b2.m11 ) ) + ( a2.m22 * b2.m12 ) ) + ( a2.m32 * b2.m13 ) ), ( ( ( ( a2.m02 * b2.m20 ) + ( a2.m12 * b2.m21 ) ) + ( a2.m22 * b2.m22 ) ) + ( a2.m32 * b2.m23 ) ), ( ( ( ( a2.m02 * b2.m30 ) + ( a2.m12 * b2.m31 ) ) + ( a2.m22 * b2.m32 ) ) + ( a2.m32 * b2.m33 ) ), ( ( ( ( a2.m03 * b2.m00 ) + ( a2.m13 * b2.m01 ) ) + ( a2.m23 * b2.m02 ) ) + ( a2.m33 * b2.m03 ) ), ( ( ( ( a2.m03 * b2.m10 ) + ( a2.m13 * b2.m11 ) ) + ( a2.m23 * b2.m12 ) ) + ( a2.m33 * b2.m13 ) ), ( ( ( ( a2.m03 * b2.m20 ) + ( a2.m13 * b2.m21 ) ) + ( a2.m23 * b2.m22 ) ) + ( a2.m33 * b2.m23 ) ), ( ( ( ( a2.m03 * b2.m30 ) + ( a2.m13 * b2.m31 ) ) + ( a2.m23 * b2.m32 ) ) + ( a2.m33 * b2.m33 ) ))) );
						double m007 = self8.m00;
						double m107 = self8.m10;
						double m207 = self8.m20;
						double m302 = self8.m30;
						double m017 = self8.m01;
						double m117 = self8.m11;
						double m217 = self8.m21;
						double m312 = self8.m31;
						double m027 = self8.m02;
						double m127 = self8.m12;
						double m227 = self8.m22;
						double m322 = self8.m32;
						double m032 = self8.m03;
						double m132 = self8.m13;
						double m232 = self8.m23;
						double m332 = self8.m33;
						double tmp2 = ( ( ( ( m007 * (( ( ( m117 * (( ( m227 * m332 ) - ( m322 * m232 ) )) ) - ( m217 * (( ( m127 * m332 ) - ( m322 * m132 ) )) ) ) + ( m312 * (( ( m127 * m232 ) - ( m227 * m132 ) )) ) )) ) - ( m107 * (( ( ( m017 * (( ( m227 * m332 ) - ( m322 * m232 ) )) ) - ( m217 * (( ( m027 * m332 ) - ( m322 * m032 ) )) ) ) + ( m312 * (( ( m027 * m232 ) - ( m227 * m032 ) )) ) )) ) ) + ( m207 * (( ( ( m017 * (( ( m127 * m332 ) - ( m322 * m132 ) )) ) - ( m117 * (( ( m027 * m332 ) - ( m322 * m032 ) )) ) ) + ( m312 * (( ( m027 * m132 ) - ( m127 * m032 ) )) ) )) ) ) - ( m302 * (( ( ( m017 * (( ( m127 * m232 ) - ( m227 * m132 ) )) ) - ( m117 * (( ( m027 * m232 ) - ( m227 * m032 ) )) ) ) + ( m217 * (( ( m027 * m132 ) - ( m127 * m032 ) )) ) )) ) );
						double m008 = a2.m00;
						double m108 = a2.m10;
						double m208 = a2.m20;
						double m303 = a2.m30;
						double m018 = a2.m01;
						double m118 = a2.m11;
						double m218 = a2.m21;
						double m313 = a2.m31;
						double m028 = a2.m02;
						double m128 = a2.m12;
						double m228 = a2.m22;
						double m323 = a2.m32;
						double m033 = a2.m03;
						double m133 = a2.m13;
						double m233 = a2.m23;
						double m333 = a2.m33;
						double tmp3 = ( ( ( ( m008 * (( ( ( m118 * (( ( m228 * m333 ) - ( m323 * m233 ) )) ) - ( m218 * (( ( m128 * m333 ) - ( m323 * m133 ) )) ) ) + ( m313 * (( ( m128 * m233 ) - ( m228 * m133 ) )) ) )) ) - ( m108 * (( ( ( m018 * (( ( m228 * m333 ) - ( m323 * m233 ) )) ) - ( m218 * (( ( m028 * m333 ) - ( m323 * m033 ) )) ) ) + ( m313 * (( ( m028 * m233 ) - ( m228 * m033 ) )) ) )) ) ) + ( m208 * (( ( ( m018 * (( ( m128 * m333 ) - ( m323 * m133 ) )) ) - ( m118 * (( ( m028 * m333 ) - ( m323 * m033 ) )) ) ) + ( m313 * (( ( m028 * m133 ) - ( m128 * m033 ) )) ) )) ) ) - ( m303 * (( ( ( m018 * (( ( m128 * m233 ) - ( m228 * m133 ) )) ) - ( m118 * (( ( m028 * m233 ) - ( m228 * m033 ) )) ) ) + ( m218 * (( ( m028 * m133 ) - ( m128 * m033 ) )) ) )) ) );
						double m009 = b2.m00;
						double m109 = b2.m10;
						double m209 = b2.m20;
						double m304 = b2.m30;
						double m019 = b2.m01;
						double m119 = b2.m11;
						double m219 = b2.m21;
						double m314 = b2.m31;
						double m029 = b2.m02;
						double m129 = b2.m12;
						double m229 = b2.m22;
						double m324 = b2.m32;
						double m034 = b2.m03;
						double m134 = b2.m13;
						double m234 = b2.m23;
						double m334 = b2.m33;
						this.assertApproxEquals(tmp2, ( tmp3 * (( ( ( ( m009 * (( ( ( m119 * (( ( m229 * m334 ) - ( m324 * m234 ) )) ) - ( m219 * (( ( m129 * m334 ) - ( m324 * m134 ) )) ) ) + ( m314 * (( ( m129 * m234 ) - ( m229 * m134 ) )) ) )) ) - ( m109 * (( ( ( m019 * (( ( m229 * m334 ) - ( m324 * m234 ) )) ) - ( m219 * (( ( m029 * m334 ) - ( m324 * m034 ) )) ) ) + ( m314 * (( ( m029 * m234 ) - ( m229 * m034 ) )) ) )) ) ) + ( m209 * (( ( ( m019 * (( ( m129 * m334 ) - ( m324 * m134 ) )) ) - ( m119 * (( ( m029 * m334 ) - ( m324 * m034 ) )) ) ) + ( m314 * (( ( m029 * m134 ) - ( m129 * m034 ) )) ) )) ) ) - ( m304 * (( ( ( m019 * (( ( m129 * m234 ) - ( m229 * m134 ) )) ) - ( m119 * (( ( m029 * m234 ) - ( m229 * m034 ) )) ) ) + ( m219 * (( ( m029 * m134 ) - ( m129 * m034 ) )) ) )) ) )) ), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDeterminant", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (176) )}));
					}
					
				}
				
			}
		}
		
		
		public virtual void testArrayAccess() {
			unchecked {
				global::hxmath.math.Vector2Default vec2 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 0.0)) );
				vec2.y = 1.0;
				this.assertEquals<double>(((double) (1.0) ), ((double) (vec2.y) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testArrayAccess", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (184) )})) ));
				this.assertEquals<double>(((double) (1.0) ), ((double) (vec2.y) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testArrayAccess", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (185) )})) ));
				global::hxmath.math.Vector3Default vec3 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 0.0, 0.0)) );
				vec3.y = 1.0;
				this.assertEquals<double>(((double) (1.0) ), ((double) (vec3.y) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testArrayAccess", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (189) )})) ));
				this.assertEquals<double>(((double) (1.0) ), ((double) (vec3.y) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testArrayAccess", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (190) )})) ));
				global::hxmath.math.Vector4Default vec4 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 0.0, 0.0, 0.0)) );
				vec4.y = 1.0;
				this.assertEquals<double>(((double) (1.0) ), ((double) (vec4.y) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testArrayAccess", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (194) )})) ));
				this.assertEquals<double>(((double) (1.0) ), ((double) (vec4.y) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testArrayAccess", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (195) )})) ));
				global::hxmath.math.Matrix2x2Default mat2x2 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(0.0, 0.0, 0.0, 0.0)) );
				mat2x2.c = 1.0;
				this.assertEquals<double>(((double) (1.0) ), ((double) (mat2x2.c) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testArrayAccess", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (199) )})) ));
				this.assertEquals<double>(((double) (1.0) ), ((double) (mat2x2.c) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testArrayAccess", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (200) )})) ));
				this.assertEquals<double>(((double) (1.0) ), ((double) (mat2x2.c) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testArrayAccess", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (201) )})) ));
				global::hxmath.math.Matrix3x2Default mat3x2 = ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) );
				mat3x2.c = 1.0;
				this.assertEquals<double>(((double) (1.0) ), ((double) (mat3x2.c) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testArrayAccess", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (205) )})) ));
				this.assertEquals<double>(((double) (1.0) ), ((double) (mat3x2.c) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testArrayAccess", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (206) )})) ));
				this.assertEquals<double>(((double) (1.0) ), ((double) (mat3x2.c) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testArrayAccess", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (207) )})) ));
				global::hxmath.math.Matrix3x3Default mat3x3 = ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) );
				mat3x3.m21 = 1.0;
				this.assertEquals<double>(((double) (1.0) ), ((double) (mat3x3.m21) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testArrayAccess", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (211) )})) ));
				this.assertEquals<double>(((double) (1.0) ), ((double) (mat3x3.m21) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testArrayAccess", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (212) )})) ));
				this.assertEquals<double>(((double) (1.0) ), ((double) (mat3x3.m21) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testArrayAccess", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (213) )})) ));
				global::hxmath.math.Matrix4x4Default mat4x4 = ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) );
				mat4x4.m11 = 1.0;
				this.assertEquals<double>(((double) (1.0) ), ((double) (mat4x4.m11) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testArrayAccess", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (217) )})) ));
				this.assertEquals<double>(((double) (1.0) ), ((double) (mat4x4.m11) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testArrayAccess", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (218) )})) ));
				this.assertEquals<double>(((double) (1.0) ), ((double) (mat4x4.m11) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testArrayAccess", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (219) )})) ));
				global::hxmath.math.QuaternionDefault quat = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (0) ))) );
				quat.y = 1.0;
				this.assertEquals<double>(((double) (1.0) ), ((double) (quat.y) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testArrayAccess", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (223) )})) ));
				this.assertEquals<double>(((double) (1.0) ), ((double) (quat.y) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testArrayAccess", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (224) )})) ));
				global::hxmath.math.IntVector2Default intVec2 = global::hxmath.math._IntVector2.IntVector2_Impl_._new(0, 0);
				intVec2.y = 1;
				this.assertEquals<int>(((int) (1) ), ((int) (intVec2.y) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testArrayAccess", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (228) )})) ));
				this.assertEquals<int>(((int) (1) ), ((int) (intVec2.y) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testArrayAccess", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (229) )})) ));
				int shortVec2 = global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(0, 1);
				this.assertEquals<int>(((int) (1) ), ((int) (( ( ((int) (shortVec2) ) >> 16 ) & 65535 )) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testArrayAccess", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (233) )})) ));
				this.assertEquals<int>(((int) (1) ), ((int) (( ( ((int) (shortVec2) ) >> 16 ) & 65535 )) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testArrayAccess", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (234) )})) ));
			}
		}
		
		
		public virtual void testApplyScalarFunc() {
			unchecked {
				object __temp_stmt33 = null;
				{
					global::haxe.lang.Function __temp_odecl1 = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Vector2.Vector2_Impl_), "applyScalarFunc", 115073950)) );
					global::hxmath.math.Vector2Default __temp_odecl2 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 0.0)) );
					global::haxe.lang.Function __temp_odecl3 = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Vector2.Vector2_Impl_), "getArrayElement", 1520341977)) );
					global::haxe.lang.Function __temp_odecl4 = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Vector2.Vector2_Impl_), "setArrayElement", 1449791717)) );
					__temp_stmt33 = new global::haxe.lang.DynamicObject(new int[]{102, 5144726, 5741474, 1357975336}, new object[]{__temp_odecl1, __temp_odecl3, __temp_odecl4, __temp_odecl2}, new int[]{1248019663}, new double[]{((double) (2) )});
				}
				
				object __temp_stmt34 = null;
				{
					global::haxe.lang.Function __temp_odecl5 = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Vector3.Vector3_Impl_), "applyScalarFunc", 115073950)) );
					global::hxmath.math.Vector3Default __temp_odecl6 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 0.0, 0.0)) );
					global::haxe.lang.Function __temp_odecl7 = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Vector3.Vector3_Impl_), "getArrayElement", 1520341977)) );
					global::haxe.lang.Function __temp_odecl8 = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Vector3.Vector3_Impl_), "setArrayElement", 1449791717)) );
					__temp_stmt34 = new global::haxe.lang.DynamicObject(new int[]{102, 5144726, 5741474, 1357975336}, new object[]{__temp_odecl5, __temp_odecl7, __temp_odecl8, __temp_odecl6}, new int[]{1248019663}, new double[]{((double) (3) )});
				}
				
				object __temp_stmt35 = null;
				{
					global::haxe.lang.Function __temp_odecl9 = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Vector4.Vector4_Impl_), "applyScalarFunc", 115073950)) );
					global::hxmath.math.Vector4Default __temp_odecl10 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 0.0, 0.0, 0.0)) );
					global::haxe.lang.Function __temp_odecl11 = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Vector4.Vector4_Impl_), "getArrayElement", 1520341977)) );
					global::haxe.lang.Function __temp_odecl12 = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Vector4.Vector4_Impl_), "setArrayElement", 1449791717)) );
					__temp_stmt35 = new global::haxe.lang.DynamicObject(new int[]{102, 5144726, 5741474, 1357975336}, new object[]{__temp_odecl9, __temp_odecl11, __temp_odecl12, __temp_odecl10}, new int[]{1248019663}, new double[]{((double) (4) )});
				}
				
				object __temp_stmt36 = null;
				{
					global::haxe.lang.Function __temp_odecl13 = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Matrix2x2.Matrix2x2_Impl_), "applyScalarFunc", 115073950)) );
					global::hxmath.math.Matrix2x2Default __temp_odecl14 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(0.0, 0.0, 0.0, 0.0)) );
					global::haxe.lang.Function __temp_odecl15 = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Matrix2x2.Matrix2x2_Impl_), "getArrayElement", 1520341977)) );
					global::haxe.lang.Function __temp_odecl16 = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Matrix2x2.Matrix2x2_Impl_), "setArrayElement", 1449791717)) );
					__temp_stmt36 = new global::haxe.lang.DynamicObject(new int[]{102, 5144726, 5741474, 1357975336}, new object[]{__temp_odecl13, __temp_odecl15, __temp_odecl16, __temp_odecl14}, new int[]{1248019663}, new double[]{((double) (4) )});
				}
				
				object __temp_stmt37 = null;
				{
					global::haxe.lang.Function __temp_odecl17 = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Matrix3x2.Matrix3x2_Impl_), "applyScalarFunc", 115073950)) );
					global::hxmath.math.Matrix3x2Default __temp_odecl18 = ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) );
					global::haxe.lang.Function __temp_odecl19 = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Matrix3x2.Matrix3x2_Impl_), "getArrayElement", 1520341977)) );
					global::haxe.lang.Function __temp_odecl20 = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Matrix3x2.Matrix3x2_Impl_), "setArrayElement", 1449791717)) );
					__temp_stmt37 = new global::haxe.lang.DynamicObject(new int[]{102, 5144726, 5741474, 1357975336}, new object[]{__temp_odecl17, __temp_odecl19, __temp_odecl20, __temp_odecl18}, new int[]{1248019663}, new double[]{((double) (6) )});
				}
				
				object __temp_stmt38 = null;
				{
					global::haxe.lang.Function __temp_odecl21 = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Matrix3x3.Matrix3x3_Impl_), "applyScalarFunc", 115073950)) );
					global::hxmath.math.Matrix3x3Default __temp_odecl22 = ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) );
					global::haxe.lang.Function __temp_odecl23 = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Matrix3x3.Matrix3x3_Impl_), "getArrayElement", 1520341977)) );
					global::haxe.lang.Function __temp_odecl24 = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Matrix3x3.Matrix3x3_Impl_), "setArrayElement", 1449791717)) );
					__temp_stmt38 = new global::haxe.lang.DynamicObject(new int[]{102, 5144726, 5741474, 1357975336}, new object[]{__temp_odecl21, __temp_odecl23, __temp_odecl24, __temp_odecl22}, new int[]{1248019663}, new double[]{((double) (9) )});
				}
				
				object __temp_stmt39 = null;
				{
					global::haxe.lang.Function __temp_odecl25 = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Matrix4x4.Matrix4x4_Impl_), "applyScalarFunc", 115073950)) );
					global::hxmath.math.Matrix4x4Default __temp_odecl26 = ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) );
					global::haxe.lang.Function __temp_odecl27 = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Matrix4x4.Matrix4x4_Impl_), "getArrayElement", 1520341977)) );
					global::haxe.lang.Function __temp_odecl28 = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Matrix4x4.Matrix4x4_Impl_), "setArrayElement", 1449791717)) );
					__temp_stmt39 = new global::haxe.lang.DynamicObject(new int[]{102, 5144726, 5741474, 1357975336}, new object[]{__temp_odecl25, __temp_odecl27, __temp_odecl28, __temp_odecl26}, new int[]{1248019663}, new double[]{((double) (16) )});
				}
				
				object __temp_stmt40 = null;
				{
					global::haxe.lang.Function __temp_odecl29 = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Quaternion.Quaternion_Impl_), "applyScalarFunc", 115073950)) );
					global::hxmath.math.QuaternionDefault __temp_odecl30 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (0) ))) );
					global::haxe.lang.Function __temp_odecl31 = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Quaternion.Quaternion_Impl_), "getArrayElement", 1520341977)) );
					global::haxe.lang.Function __temp_odecl32 = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Quaternion.Quaternion_Impl_), "setArrayElement", 1449791717)) );
					__temp_stmt40 = new global::haxe.lang.DynamicObject(new int[]{102, 5144726, 5741474, 1357975336}, new object[]{__temp_odecl29, __temp_odecl31, __temp_odecl32, __temp_odecl30}, new int[]{1248019663}, new double[]{((double) (4) )});
				}
				
				global::Array testData = new global::Array<object>(new object[]{__temp_stmt33, __temp_stmt34, __temp_stmt35, __temp_stmt36, __temp_stmt37, __temp_stmt38, __temp_stmt39, __temp_stmt40});
				{
					int _g = 0;
					while (( global::haxe.lang.Runtime.compare(_g, ((int) (global::haxe.lang.Runtime.getField_f(testData, "length", 520590566, true)) )) < 0 )) {
						object data = testData[_g];
						 ++ _g;
						object v = global::haxe.lang.Runtime.getField(data, "zero", 1357975336, true);
						global::haxe.lang.Runtime.callField(data, "set", 5741474, new global::Array<object>(new object[]{v, 1, 0.1}));
						global::haxe.lang.Runtime.callField(data, "f", 102, new global::Array<object>(new object[]{v, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::Math), "ceil", 1102913285)) )}));
						double sum = 0.0;
						{
							int _g2 = 0;
							int _g1 = ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(data, "count", 1248019663, true))) );
							while (( _g2 < _g1 )) {
								sum += ((double) (global::haxe.lang.Runtime.toDouble(((object) (global::haxe.lang.Runtime.callField(data, "get", 5144726, new global::Array<object>(new object[]{v, _g2++}))) ))) );
							}
							
						}
						
						this.assertEquals<double>(((double) (1.0) ), ((double) (sum) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testApplyScalarFunc", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (309) )})) ));
					}
					
				}
				
			}
		}
		
		
		public virtual void testIntApplyScalarFunc() {
			unchecked {
				object __temp_stmt5 = null;
				{
					global::haxe.lang.Function __temp_odecl1 = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._IntVector2.IntVector2_Impl_), "applyScalarFunc", 115073950)) );
					global::hxmath.math.IntVector2Default __temp_odecl2 = global::hxmath.math._IntVector2.IntVector2_Impl_._new(0, 0);
					global::haxe.lang.Function __temp_odecl3 = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._IntVector2.IntVector2_Impl_), "getArrayElement", 1520341977)) );
					global::haxe.lang.Function __temp_odecl4 = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._IntVector2.IntVector2_Impl_), "setArrayElement", 1449791717)) );
					__temp_stmt5 = new global::haxe.lang.DynamicObject(new int[]{102, 5144726, 5741474, 1357975336}, new object[]{__temp_odecl1, __temp_odecl3, __temp_odecl4, __temp_odecl2}, new int[]{1248019663}, new double[]{((double) (2) )});
				}
				
				global::Array testData = new global::Array<object>(new object[]{__temp_stmt5});
				{
					int _g = 0;
					while (( global::haxe.lang.Runtime.compare(_g, ((int) (global::haxe.lang.Runtime.getField_f(testData, "length", 520590566, true)) )) < 0 )) {
						object data = testData[_g];
						 ++ _g;
						object v = global::haxe.lang.Runtime.getField(data, "zero", 1357975336, true);
						global::haxe.lang.Runtime.callField(data, "set", 5741474, new global::Array<object>(new object[]{v, 1, 1}));
						global::haxe.lang.Runtime.callField(data, "f", 102, new global::Array<object>(new object[]{v, ( (( global::test.TestStructures_testIntApplyScalarFunc_328__Fun.__hx_current != null )) ? (global::test.TestStructures_testIntApplyScalarFunc_328__Fun.__hx_current) : (global::test.TestStructures_testIntApplyScalarFunc_328__Fun.__hx_current = ((global::test.TestStructures_testIntApplyScalarFunc_328__Fun) (new global::test.TestStructures_testIntApplyScalarFunc_328__Fun()) )) )}));
						int sum = 0;
						{
							int _g2 = 0;
							int _g1 = ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(data, "count", 1248019663, true))) );
							while (( _g2 < _g1 )) {
								sum += ((int) (global::haxe.lang.Runtime.toInt(((object) (global::haxe.lang.Runtime.callField(data, "get", 5144726, new global::Array<object>(new object[]{v, _g2++}))) ))) );
							}
							
						}
						
						this.assertEquals<int>(((int) (2) ), ((int) (sum) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIntApplyScalarFunc", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (336) )})) ));
					}
					
				}
				
			}
		}
		
		
		public virtual void testCopyToFrom() {
			unchecked {
				global::hxmath.math.Vector2Default vec2a = this.randomVector2(default(global::haxe.lang.Null<double>));
				global::hxmath.math.Vector2Default vec2b = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 0.0)) );
				{
					int _g = 0;
					while (( _g < 2 )) {
						int i = _g++;
						{
							object tmp = null;
							switch (i) {
								case 0:
								{
									tmp = vec2a.x;
									break;
								}
								
								
								case 1:
								{
									tmp = vec2a.y;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double @value = ((double) (global::haxe.lang.Runtime.toDouble(tmp)) );
							switch (i) {
								case 0:
								{
									vec2b.x = @value;
									break;
								}
								
								
								case 1:
								{
									vec2b.y = @value;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				this.assertTrue(( ( ( vec2a == null ) && ( vec2b == null ) ) || ( ( ( ( vec2a != null ) && ( vec2b != null ) ) && ( vec2a.x == vec2b.x ) ) && ( vec2a.y == vec2b.y ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCopyToFrom", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (345) )}));
				global::hxmath.math.Vector3Default vec3a = this.randomVector3(default(global::haxe.lang.Null<double>));
				global::hxmath.math.Vector3Default vec3b = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 0.0, 0.0)) );
				{
					int _g1 = 0;
					while (( _g1 < 3 )) {
						int i1 = _g1++;
						{
							object tmp1 = null;
							switch (i1) {
								case 0:
								{
									tmp1 = vec3a.x;
									break;
								}
								
								
								case 1:
								{
									tmp1 = vec3a.y;
									break;
								}
								
								
								case 2:
								{
									tmp1 = vec3a.z;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double value1 = ((double) (global::haxe.lang.Runtime.toDouble(tmp1)) );
							switch (i1) {
								case 0:
								{
									vec3b.x = value1;
									break;
								}
								
								
								case 1:
								{
									vec3b.y = value1;
									break;
								}
								
								
								case 2:
								{
									vec3b.z = value1;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				this.assertTrue(( ( ( vec3a == null ) && ( vec3b == null ) ) || ( ( ( ( ( vec3a != null ) && ( vec3b != null ) ) && ( vec3a.x == vec3b.x ) ) && ( vec3a.y == vec3b.y ) ) && ( vec3a.z == vec3b.z ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCopyToFrom", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (350) )}));
				global::hxmath.math.Vector4Default vec4a = this.randomVector4(default(global::haxe.lang.Null<double>));
				global::hxmath.math.Vector4Default vec4b = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 0.0, 0.0, 0.0)) );
				{
					int _g2 = 0;
					while (( _g2 < 4 )) {
						int i2 = _g2++;
						{
							object tmp2 = null;
							switch (i2) {
								case 0:
								{
									tmp2 = vec4a.x;
									break;
								}
								
								
								case 1:
								{
									tmp2 = vec4a.y;
									break;
								}
								
								
								case 2:
								{
									tmp2 = vec4a.z;
									break;
								}
								
								
								case 3:
								{
									tmp2 = vec4a.w;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double value2 = ((double) (global::haxe.lang.Runtime.toDouble(tmp2)) );
							switch (i2) {
								case 0:
								{
									vec4b.x = value2;
									break;
								}
								
								
								case 1:
								{
									vec4b.y = value2;
									break;
								}
								
								
								case 2:
								{
									vec4b.z = value2;
									break;
								}
								
								
								case 3:
								{
									vec4b.w = value2;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				this.assertTrue(( ( ( vec4a == null ) && ( vec4b == null ) ) || ( ( ( ( ( ( vec4a != null ) && ( vec4b != null ) ) && ( vec4a.x == vec4b.x ) ) && ( vec4a.y == vec4b.y ) ) && ( vec4a.z == vec4b.z ) ) && ( vec4a.w == vec4b.w ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCopyToFrom", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (355) )}));
				global::hxmath.math.Matrix2x2Default mat2x2a = this.randomMatrix2x2(default(global::haxe.lang.Null<double>));
				global::hxmath.math.Matrix2x2Default mat2x2b = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(0.0, 0.0, 0.0, 0.0)) );
				{
					int _g3 = 0;
					while (( _g3 < 4 )) {
						int i3 = _g3++;
						{
							object tmp3 = null;
							switch (i3) {
								case 0:
								{
									tmp3 = mat2x2a.a;
									break;
								}
								
								
								case 1:
								{
									tmp3 = mat2x2a.b;
									break;
								}
								
								
								case 2:
								{
									tmp3 = mat2x2a.c;
									break;
								}
								
								
								case 3:
								{
									tmp3 = mat2x2a.d;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double value3 = ((double) (global::haxe.lang.Runtime.toDouble(tmp3)) );
							switch (i3) {
								case 0:
								{
									mat2x2b.a = value3;
									break;
								}
								
								
								case 1:
								{
									mat2x2b.b = value3;
									break;
								}
								
								
								case 2:
								{
									mat2x2b.c = value3;
									break;
								}
								
								
								case 3:
								{
									mat2x2b.d = value3;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				this.assertTrue(( ( ( mat2x2a == null ) && ( mat2x2b == null ) ) || ( ( ( ( ( ( mat2x2a != null ) && ( mat2x2b != null ) ) && ( mat2x2a.a == mat2x2b.a ) ) && ( mat2x2a.b == mat2x2b.b ) ) && ( mat2x2a.c == mat2x2b.c ) ) && ( mat2x2a.d == mat2x2b.d ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCopyToFrom", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (360) )}));
				global::hxmath.math.Matrix3x2Default mat3x2a = this.randomMatrix3x2(default(global::haxe.lang.Null<double>));
				global::hxmath.math.Matrix3x2Default mat3x2b = ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) );
				{
					int _g4 = 0;
					while (( _g4 < 6 )) {
						int i4 = _g4++;
						{
							object tmp4 = null;
							switch (i4) {
								case 0:
								{
									tmp4 = mat3x2a.a;
									break;
								}
								
								
								case 1:
								{
									tmp4 = mat3x2a.b;
									break;
								}
								
								
								case 2:
								{
									tmp4 = mat3x2a.tx;
									break;
								}
								
								
								case 3:
								{
									tmp4 = mat3x2a.c;
									break;
								}
								
								
								case 4:
								{
									tmp4 = mat3x2a.d;
									break;
								}
								
								
								case 5:
								{
									tmp4 = mat3x2a.ty;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double value4 = ((double) (global::haxe.lang.Runtime.toDouble(tmp4)) );
							switch (i4) {
								case 0:
								{
									mat3x2b.a = value4;
									break;
								}
								
								
								case 1:
								{
									mat3x2b.b = value4;
									break;
								}
								
								
								case 2:
								{
									mat3x2b.tx = value4;
									break;
								}
								
								
								case 3:
								{
									mat3x2b.c = value4;
									break;
								}
								
								
								case 4:
								{
									mat3x2b.d = value4;
									break;
								}
								
								
								case 5:
								{
									mat3x2b.ty = value4;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				this.assertTrue(( ( ( mat3x2a == null ) && ( mat3x2b == null ) ) || ( ( ( ( ( ( ( ( mat3x2a != null ) && ( mat3x2b != null ) ) && ( mat3x2a.a == mat3x2b.a ) ) && ( mat3x2a.b == mat3x2b.b ) ) && ( mat3x2a.c == mat3x2b.c ) ) && ( mat3x2a.d == mat3x2b.d ) ) && ( mat3x2a.tx == mat3x2b.tx ) ) && ( mat3x2a.ty == mat3x2b.ty ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCopyToFrom", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (365) )}));
				global::hxmath.math.Matrix3x3Default mat3x3a = this.randomMatrix3x3(default(global::haxe.lang.Null<double>));
				global::hxmath.math.Matrix3x3Default mat3x3b = ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) );
				{
					int _g5 = 0;
					while (( _g5 < 9 )) {
						int i5 = _g5++;
						{
							object tmp5 = null;
							switch (i5) {
								case 0:
								{
									tmp5 = mat3x3a.m00;
									break;
								}
								
								
								case 1:
								{
									tmp5 = mat3x3a.m10;
									break;
								}
								
								
								case 2:
								{
									tmp5 = mat3x3a.m20;
									break;
								}
								
								
								case 3:
								{
									tmp5 = mat3x3a.m01;
									break;
								}
								
								
								case 4:
								{
									tmp5 = mat3x3a.m11;
									break;
								}
								
								
								case 5:
								{
									tmp5 = mat3x3a.m21;
									break;
								}
								
								
								case 6:
								{
									tmp5 = mat3x3a.m02;
									break;
								}
								
								
								case 7:
								{
									tmp5 = mat3x3a.m12;
									break;
								}
								
								
								case 8:
								{
									tmp5 = mat3x3a.m22;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double value5 = ((double) (global::haxe.lang.Runtime.toDouble(tmp5)) );
							switch (i5) {
								case 0:
								{
									mat3x3b.m00 = value5;
									break;
								}
								
								
								case 1:
								{
									mat3x3b.m10 = value5;
									break;
								}
								
								
								case 2:
								{
									mat3x3b.m20 = value5;
									break;
								}
								
								
								case 3:
								{
									mat3x3b.m01 = value5;
									break;
								}
								
								
								case 4:
								{
									mat3x3b.m11 = value5;
									break;
								}
								
								
								case 5:
								{
									mat3x3b.m21 = value5;
									break;
								}
								
								
								case 6:
								{
									mat3x3b.m02 = value5;
									break;
								}
								
								
								case 7:
								{
									mat3x3b.m12 = value5;
									break;
								}
								
								
								case 8:
								{
									mat3x3b.m22 = value5;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				this.assertTrue(( ( ( mat3x3a == null ) && ( mat3x3b == null ) ) || ( ( ( ( ( ( ( ( ( ( ( mat3x3a != null ) && ( mat3x3b != null ) ) && ( mat3x3a.m00 == mat3x3b.m00 ) ) && ( mat3x3a.m10 == mat3x3b.m10 ) ) && ( mat3x3a.m20 == mat3x3b.m20 ) ) && ( mat3x3a.m01 == mat3x3b.m01 ) ) && ( mat3x3a.m11 == mat3x3b.m11 ) ) && ( mat3x3a.m21 == mat3x3b.m21 ) ) && ( mat3x3a.m02 == mat3x3b.m02 ) ) && ( mat3x3a.m12 == mat3x3b.m12 ) ) && ( mat3x3a.m22 == mat3x3b.m22 ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCopyToFrom", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (370) )}));
				global::hxmath.math.Matrix4x4Default mat4x4a = this.randomMatrix4x4(default(global::haxe.lang.Null<double>));
				global::hxmath.math.Matrix4x4Default mat4x4b = ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) );
				{
					int _g6 = 0;
					while (( _g6 < 16 )) {
						int i6 = _g6++;
						{
							object tmp6 = null;
							switch (i6) {
								case 0:
								{
									tmp6 = mat4x4a.m00;
									break;
								}
								
								
								case 1:
								{
									tmp6 = mat4x4a.m10;
									break;
								}
								
								
								case 2:
								{
									tmp6 = mat4x4a.m20;
									break;
								}
								
								
								case 3:
								{
									tmp6 = mat4x4a.m30;
									break;
								}
								
								
								case 4:
								{
									tmp6 = mat4x4a.m01;
									break;
								}
								
								
								case 5:
								{
									tmp6 = mat4x4a.m11;
									break;
								}
								
								
								case 6:
								{
									tmp6 = mat4x4a.m21;
									break;
								}
								
								
								case 7:
								{
									tmp6 = mat4x4a.m31;
									break;
								}
								
								
								case 8:
								{
									tmp6 = mat4x4a.m02;
									break;
								}
								
								
								case 9:
								{
									tmp6 = mat4x4a.m12;
									break;
								}
								
								
								case 10:
								{
									tmp6 = mat4x4a.m22;
									break;
								}
								
								
								case 11:
								{
									tmp6 = mat4x4a.m32;
									break;
								}
								
								
								case 12:
								{
									tmp6 = mat4x4a.m03;
									break;
								}
								
								
								case 13:
								{
									tmp6 = mat4x4a.m13;
									break;
								}
								
								
								case 14:
								{
									tmp6 = mat4x4a.m23;
									break;
								}
								
								
								case 15:
								{
									tmp6 = mat4x4a.m33;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double value6 = ((double) (global::haxe.lang.Runtime.toDouble(tmp6)) );
							switch (i6) {
								case 0:
								{
									mat4x4b.m00 = value6;
									break;
								}
								
								
								case 1:
								{
									mat4x4b.m10 = value6;
									break;
								}
								
								
								case 2:
								{
									mat4x4b.m20 = value6;
									break;
								}
								
								
								case 3:
								{
									mat4x4b.m30 = value6;
									break;
								}
								
								
								case 4:
								{
									mat4x4b.m01 = value6;
									break;
								}
								
								
								case 5:
								{
									mat4x4b.m11 = value6;
									break;
								}
								
								
								case 6:
								{
									mat4x4b.m21 = value6;
									break;
								}
								
								
								case 7:
								{
									mat4x4b.m31 = value6;
									break;
								}
								
								
								case 8:
								{
									mat4x4b.m02 = value6;
									break;
								}
								
								
								case 9:
								{
									mat4x4b.m12 = value6;
									break;
								}
								
								
								case 10:
								{
									mat4x4b.m22 = value6;
									break;
								}
								
								
								case 11:
								{
									mat4x4b.m32 = value6;
									break;
								}
								
								
								case 12:
								{
									mat4x4b.m03 = value6;
									break;
								}
								
								
								case 13:
								{
									mat4x4b.m13 = value6;
									break;
								}
								
								
								case 14:
								{
									mat4x4b.m23 = value6;
									break;
								}
								
								
								case 15:
								{
									mat4x4b.m33 = value6;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				this.assertTrue(( ( ( mat4x4a == null ) && ( mat4x4b == null ) ) || ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( mat4x4a != null ) && ( mat4x4b != null ) ) && ( mat4x4a.m00 == mat4x4b.m00 ) ) && ( mat4x4a.m10 == mat4x4b.m10 ) ) && ( mat4x4a.m20 == mat4x4b.m20 ) ) && ( mat4x4a.m30 == mat4x4b.m30 ) ) && ( mat4x4a.m01 == mat4x4b.m01 ) ) && ( mat4x4a.m11 == mat4x4b.m11 ) ) && ( mat4x4a.m21 == mat4x4b.m21 ) ) && ( mat4x4a.m31 == mat4x4b.m31 ) ) && ( mat4x4a.m02 == mat4x4b.m02 ) ) && ( mat4x4a.m12 == mat4x4b.m12 ) ) && ( mat4x4a.m22 == mat4x4b.m22 ) ) && ( mat4x4a.m32 == mat4x4b.m32 ) ) && ( mat4x4a.m03 == mat4x4b.m03 ) ) && ( mat4x4a.m13 == mat4x4b.m13 ) ) && ( mat4x4a.m23 == mat4x4b.m23 ) ) && ( mat4x4a.m33 == mat4x4b.m33 ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCopyToFrom", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (375) )}));
				global::hxmath.math.QuaternionDefault quatA = this.randomQuaternion(default(global::haxe.lang.Null<double>));
				global::hxmath.math.QuaternionDefault quatB = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (0) ))) );
				{
					int _g7 = 0;
					while (( _g7 < 4 )) {
						int i7 = _g7++;
						{
							object tmp7 = null;
							switch (i7) {
								case 0:
								{
									tmp7 = quatA.s;
									break;
								}
								
								
								case 1:
								{
									tmp7 = quatA.x;
									break;
								}
								
								
								case 2:
								{
									tmp7 = quatA.y;
									break;
								}
								
								
								case 3:
								{
									tmp7 = quatA.z;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double value7 = ((double) (global::haxe.lang.Runtime.toDouble(tmp7)) );
							switch (i7) {
								case 0:
								{
									quatB.s = value7;
									break;
								}
								
								
								case 1:
								{
									quatB.x = value7;
									break;
								}
								
								
								case 2:
								{
									quatB.y = value7;
									break;
								}
								
								
								case 3:
								{
									quatB.z = value7;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				this.assertTrue(( ( ( quatA == null ) && ( quatB == null ) ) || ( ( ( ( ( ( quatA != null ) && ( quatB != null ) ) && ( quatA.s == quatB.s ) ) && ( quatA.x == quatB.x ) ) && ( quatA.y == quatB.y ) ) && ( quatA.z == quatB.z ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCopyToFrom", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (380) )}));
				global::hxmath.math.IntVector2Default intVec2a = this.randomIntVector2();
				global::hxmath.math.IntVector2Default intVec2b = global::hxmath.math._IntVector2.IntVector2_Impl_._new(0, 0);
				{
					int _g8 = 0;
					while (( _g8 < 2 )) {
						int i8 = _g8++;
						{
							object tmp8 = null;
							switch (i8) {
								case 0:
								{
									tmp8 = intVec2a.x;
									break;
								}
								
								
								case 1:
								{
									tmp8 = intVec2a.y;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							int value8 = ((int) (global::haxe.lang.Runtime.toInt(tmp8)) );
							switch (i8) {
								case 0:
								{
									intVec2b.x = value8;
									break;
								}
								
								
								case 1:
								{
									intVec2b.y = value8;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				this.assertTrue(( ( ( intVec2a == null ) && ( intVec2b == null ) ) || ( ( ( ( intVec2a != null ) && ( intVec2b != null ) ) && ( intVec2a.x == intVec2b.x ) ) && ( intVec2a.y == intVec2b.y ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCopyToFrom", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (385) )}));
			}
		}
		
		
		public virtual void testRowColAccessors() {
			unchecked {
				global::Array<object> basis2 = new global::Array<object>(new object[]{((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 0.0)) ), ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 1.0)) )});
				{
					int _g = 0;
					while (( _g < 2 )) {
						int i = _g++;
						global::hxmath.math.Matrix2x2Default self = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(1.0, 0.0, 0.0, 1.0)) );
						global::hxmath.math.Vector2Default a = null;
						switch (i) {
							case 0:
							{
								a = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self.a, self.c)) );
								break;
							}
							
							
							case 1:
							{
								a = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self.b, self.d)) );
								break;
							}
							
							
							default:
							{
								throw global::haxe.lang.HaxeException.wrap("Invalid column");
							}
							
						}
						
						global::hxmath.math.Vector2Default b = ((global::hxmath.math.Vector2Default) (basis2[i]) );
						this.assertTrue(( ( ( a == null ) && ( b == null ) ) || ( ( ( ( a != null ) && ( b != null ) ) && ( a.x == b.x ) ) && ( a.y == b.y ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRowColAccessors", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (394) )}));
						global::hxmath.math.Matrix2x2Default self1 = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(1.0, 0.0, 0.0, 1.0)) );
						global::hxmath.math.Vector2Default a1 = null;
						switch (i) {
							case 0:
							{
								a1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self1.a, self1.b)) );
								break;
							}
							
							
							case 1:
							{
								a1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self1.c, self1.d)) );
								break;
							}
							
							
							default:
							{
								throw global::haxe.lang.HaxeException.wrap("Invalid row");
							}
							
						}
						
						global::hxmath.math.Vector2Default b1 = ((global::hxmath.math.Vector2Default) (basis2[i]) );
						this.assertTrue(( ( ( a1 == null ) && ( b1 == null ) ) || ( ( ( ( a1 != null ) && ( b1 != null ) ) && ( a1.x == b1.x ) ) && ( a1.y == b1.y ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRowColAccessors", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (395) )}));
					}
					
				}
				
				global::Array<object> basis32Rows = new global::Array<object>(new object[]{((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(1.0, 0.0, 0.0)) ), ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 1.0, 0.0)) )});
				global::Array<object> basis32Cols = new global::Array<object>(new object[]{((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 0.0)) ), ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 1.0)) ), ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 0.0)) )});
				{
					int _g1 = 0;
					while (( _g1 < 2 )) {
						int i1 = _g1++;
						global::hxmath.math.Matrix3x2Default self2 = ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)) );
						global::hxmath.math.Vector3Default a2 = null;
						switch (i1) {
							case 0:
							{
								a2 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(self2.a, self2.b, self2.tx)) );
								break;
							}
							
							
							case 1:
							{
								a2 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(self2.c, self2.d, self2.ty)) );
								break;
							}
							
							
							default:
							{
								throw global::haxe.lang.HaxeException.wrap("Invalid row");
							}
							
						}
						
						global::hxmath.math.Vector3Default b2 = ((global::hxmath.math.Vector3Default) (basis32Rows[i1]) );
						this.assertTrue(( ( ( a2 == null ) && ( b2 == null ) ) || ( ( ( ( ( a2 != null ) && ( b2 != null ) ) && ( a2.x == b2.x ) ) && ( a2.y == b2.y ) ) && ( a2.z == b2.z ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRowColAccessors", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (403) )}));
					}
					
				}
				
				{
					int _g2 = 0;
					while (( _g2 < 3 )) {
						int i2 = _g2++;
						global::hxmath.math.Matrix3x2Default self3 = ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)) );
						global::hxmath.math.Vector2Default a3 = null;
						switch (i2) {
							case 0:
							{
								a3 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self3.a, self3.c)) );
								break;
							}
							
							
							case 1:
							{
								a3 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self3.b, self3.d)) );
								break;
							}
							
							
							case 2:
							{
								a3 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self3.tx, self3.ty)) );
								break;
							}
							
							
							default:
							{
								throw global::haxe.lang.HaxeException.wrap("Invalid column");
							}
							
						}
						
						global::hxmath.math.Vector2Default b3 = ((global::hxmath.math.Vector2Default) (basis32Cols[i2]) );
						this.assertTrue(( ( ( a3 == null ) && ( b3 == null ) ) || ( ( ( ( a3 != null ) && ( b3 != null ) ) && ( a3.x == b3.x ) ) && ( a3.y == b3.y ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRowColAccessors", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (408) )}));
					}
					
				}
				
				global::Array<object> basis3 = new global::Array<object>(new object[]{((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(1.0, 0.0, 0.0)) ), ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 1.0, 0.0)) ), ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 0.0, 1.0)) )});
				{
					int _g3 = 0;
					while (( _g3 < 3 )) {
						int i3 = _g3++;
						global::hxmath.math.Matrix3x3Default self4 = ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) );
						global::hxmath.math.Vector3Default a4 = null;
						switch (i3) {
							case 0:
							{
								a4 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(self4.m00, self4.m01, self4.m02)) );
								break;
							}
							
							
							case 1:
							{
								a4 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(self4.m10, self4.m11, self4.m12)) );
								break;
							}
							
							
							case 2:
							{
								a4 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(self4.m20, self4.m21, self4.m22)) );
								break;
							}
							
							
							default:
							{
								throw global::haxe.lang.HaxeException.wrap("Invalid column");
							}
							
						}
						
						global::hxmath.math.Vector3Default b4 = ((global::hxmath.math.Vector3Default) (basis3[i3]) );
						this.assertTrue(( ( ( a4 == null ) && ( b4 == null ) ) || ( ( ( ( ( a4 != null ) && ( b4 != null ) ) && ( a4.x == b4.x ) ) && ( a4.y == b4.y ) ) && ( a4.z == b4.z ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRowColAccessors", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (415) )}));
						global::hxmath.math.Matrix3x3Default self5 = ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) );
						global::hxmath.math.Vector3Default a5 = null;
						switch (i3) {
							case 0:
							{
								a5 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(self5.m00, self5.m10, self5.m20)) );
								break;
							}
							
							
							case 1:
							{
								a5 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(self5.m01, self5.m11, self5.m21)) );
								break;
							}
							
							
							case 2:
							{
								a5 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(self5.m02, self5.m12, self5.m22)) );
								break;
							}
							
							
							default:
							{
								throw global::haxe.lang.HaxeException.wrap("Invalid row");
							}
							
						}
						
						global::hxmath.math.Vector3Default b5 = ((global::hxmath.math.Vector3Default) (basis3[i3]) );
						this.assertTrue(( ( ( a5 == null ) && ( b5 == null ) ) || ( ( ( ( ( a5 != null ) && ( b5 != null ) ) && ( a5.x == b5.x ) ) && ( a5.y == b5.y ) ) && ( a5.z == b5.z ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRowColAccessors", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (416) )}));
					}
					
				}
				
				global::Array<object> basis4 = new global::Array<object>(new object[]{((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(1.0, 0.0, 0.0, 0.0)) ), ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 1.0, 0.0, 0.0)) ), ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 0.0, 1.0, 0.0)) ), ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 0.0, 0.0, 1.0)) )});
				{
					int _g4 = 0;
					while (( _g4 < 4 )) {
						int i4 = _g4++;
						global::hxmath.math.Matrix4x4Default self6 = ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) );
						global::hxmath.math.Vector4Default a6 = null;
						switch (i4) {
							case 0:
							{
								a6 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(self6.m00, self6.m01, self6.m02, self6.m03)) );
								break;
							}
							
							
							case 1:
							{
								a6 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(self6.m10, self6.m11, self6.m12, self6.m13)) );
								break;
							}
							
							
							case 2:
							{
								a6 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(self6.m20, self6.m21, self6.m22, self6.m23)) );
								break;
							}
							
							
							case 3:
							{
								a6 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(self6.m30, self6.m31, self6.m32, self6.m33)) );
								break;
							}
							
							
							default:
							{
								throw global::haxe.lang.HaxeException.wrap("Invalid column");
							}
							
						}
						
						global::hxmath.math.Vector4Default b6 = ((global::hxmath.math.Vector4Default) (basis4[i4]) );
						this.assertTrue(( ( ( a6 == null ) && ( b6 == null ) ) || ( ( ( ( ( ( a6 != null ) && ( b6 != null ) ) && ( a6.x == b6.x ) ) && ( a6.y == b6.y ) ) && ( a6.z == b6.z ) ) && ( a6.w == b6.w ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRowColAccessors", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (423) )}));
						global::hxmath.math.Matrix4x4Default self7 = ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) );
						global::hxmath.math.Vector4Default a7 = null;
						switch (i4) {
							case 0:
							{
								a7 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(self7.m00, self7.m10, self7.m20, self7.m30)) );
								break;
							}
							
							
							case 1:
							{
								a7 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(self7.m01, self7.m11, self7.m21, self7.m31)) );
								break;
							}
							
							
							case 2:
							{
								a7 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(self7.m02, self7.m12, self7.m22, self7.m32)) );
								break;
							}
							
							
							case 3:
							{
								a7 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(self7.m03, self7.m13, self7.m23, self7.m33)) );
								break;
							}
							
							
							default:
							{
								throw global::haxe.lang.HaxeException.wrap("Invalid row");
							}
							
						}
						
						global::hxmath.math.Vector4Default b7 = ((global::hxmath.math.Vector4Default) (basis4[i4]) );
						this.assertTrue(( ( ( a7 == null ) && ( b7 == null ) ) || ( ( ( ( ( ( a7 != null ) && ( b7 != null ) ) && ( a7.x == b7.x ) ) && ( a7.y == b7.y ) ) && ( a7.z == b7.z ) ) && ( a7.w == b7.w ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRowColAccessors", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (424) )}));
					}
					
				}
				
			}
		}
		
		
		public virtual void testEqualsNullShouldNotThrow() {
			unchecked {
				this.assertTrue(( ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 0.0)) ) != null ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEqualsNullShouldNotThrow", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (433) )}));
				this.assertTrue(( ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 0.0, 0.0)) ) != null ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEqualsNullShouldNotThrow", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (434) )}));
				this.assertTrue(( ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 0.0, 0.0, 0.0)) ) != null ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEqualsNullShouldNotThrow", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (435) )}));
				this.assertTrue(( ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(0.0, 0.0, 0.0, 0.0)) ) != null ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEqualsNullShouldNotThrow", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (436) )}));
				this.assertTrue(( ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) ) != null ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEqualsNullShouldNotThrow", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (437) )}));
				this.assertTrue(( ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) ) != null ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEqualsNullShouldNotThrow", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (438) )}));
				this.assertTrue(( ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) ) != null ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEqualsNullShouldNotThrow", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (439) )}));
				this.assertTrue(( ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (0) ))) ) != null ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEqualsNullShouldNotThrow", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (440) )}));
				this.assertTrue(( global::hxmath.math._IntVector2.IntVector2_Impl_._new(0, 0) != null ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEqualsNullShouldNotThrow", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (441) )}));
			}
		}
		
		
		public virtual void testHasToString() {
			unchecked {
				global::Array structures = new global::Array<object>(new object[]{((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(((double) (0) ), ((double) (23) ))) ), ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(((double) (0) ), ((double) (23) ), ((double) (0) ))) ), ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(((double) (0) ), ((double) (23) ), ((double) (0) ), ((double) (0) ))) ), ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(((double) (0) ), ((double) (0) ), ((double) (23) ), ((double) (0) ))) ), ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(((double) (0) ), ((double) (0) ), ((double) (23) ), ((double) (0) ), ((double) (0) ), ((double) (0) ))) ), ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(((double) (0) ), ((double) (0) ), ((double) (23) ), ((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (0) ))) ), ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(((double) (0) ), ((double) (0) ), ((double) (23) ), ((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (0) ))) ), ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(((double) (1) ), ((double) (0) ), ((double) (23) ), ((double) (0) ))) ), global::hxmath.math._IntVector2.IntVector2_Impl_._new(0, 23)});
				{
					int _g = 0;
					while (( global::haxe.lang.Runtime.compare(_g, ((int) (global::haxe.lang.Runtime.getField_f(structures, "length", 520590566, true)) )) < 0 )) {
						object x = structures[_g];
						 ++ _g;
						if (( global::haxe.lang.StringExt.indexOf((global::haxe.lang.Runtime.concat("", global::Std.@string(x))), "23", default(global::haxe.lang.Null<int>)) == -1 )) {
							global::haxe.Log.trace.__hx_invoke2_o(default(double), x, default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testHasToString", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (461) )}));
							this.assertTrue(false, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testHasToString", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (462) )}));
						}
						
					}
					
				}
				
			}
		}
		
		
		public virtual void testVectorMinMax() {
			unchecked {
				global::Array<object> v2Axes = new global::Array<object>(new object[]{((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 0.0)) ), ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 1.0)) )});
				global::hxmath.math.Vector2Default v2AxesMax = ((global::hxmath.math.Vector2Default) (global::Lambda.fold<object, object>(((object) (v2Axes) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Vector2.Vector2_Impl_), "max", 5442212)) ), ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 0.0)) ))) );
				global::hxmath.math.Vector2Default v2AxesMin = ((global::hxmath.math.Vector2Default) (global::Lambda.fold<object, object>(((object) (v2Axes) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Vector2.Vector2_Impl_), "min", 5443986)) ), ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 0.0)) ))) );
				global::hxmath.math.Vector2Default v2AxesSum = ((global::hxmath.math.Vector2Default) (global::Lambda.fold<object, object>(((object) (v2Axes) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Vector2.Vector2_Impl_), "add", 4846113)) ), ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 0.0)) ))) );
				this.assertTrue(( ( ( v2AxesMax == null ) && ( v2AxesSum == null ) ) || ( ( ( ( v2AxesMax != null ) && ( v2AxesSum != null ) ) && ( v2AxesMax.x == v2AxesSum.x ) ) && ( v2AxesMax.y == v2AxesSum.y ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testVectorMinMax", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (474) )}));
				global::hxmath.math.Vector2Default b = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 0.0)) );
				this.assertTrue(( ( ( v2AxesMin == null ) && ( b == null ) ) || ( ( ( ( v2AxesMin != null ) && ( b != null ) ) && ( v2AxesMin.x == b.x ) ) && ( v2AxesMin.y == b.y ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testVectorMinMax", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (475) )}));
				global::Array<object> v3Axes = new global::Array<object>(new object[]{((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(1.0, 0.0, 0.0)) ), ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 1.0, 0.0)) ), ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 0.0, 1.0)) )});
				global::hxmath.math.Vector3Default v3AxesMax = ((global::hxmath.math.Vector3Default) (global::Lambda.fold<object, object>(((object) (v3Axes) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Vector3.Vector3_Impl_), "max", 5442212)) ), ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(1.0, 0.0, 0.0)) ))) );
				global::hxmath.math.Vector3Default v3AxesMin = ((global::hxmath.math.Vector3Default) (global::Lambda.fold<object, object>(((object) (v3Axes) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Vector3.Vector3_Impl_), "min", 5443986)) ), ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(1.0, 0.0, 0.0)) ))) );
				global::hxmath.math.Vector3Default v3AxesSum = ((global::hxmath.math.Vector3Default) (global::Lambda.fold<object, object>(((object) (v3Axes) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Vector3.Vector3_Impl_), "add", 4846113)) ), ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 0.0, 0.0)) ))) );
				this.assertTrue(( ( ( v3AxesMax == null ) && ( v3AxesSum == null ) ) || ( ( ( ( ( v3AxesMax != null ) && ( v3AxesSum != null ) ) && ( v3AxesMax.x == v3AxesSum.x ) ) && ( v3AxesMax.y == v3AxesSum.y ) ) && ( v3AxesMax.z == v3AxesSum.z ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testVectorMinMax", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (482) )}));
				global::hxmath.math.Vector3Default b1 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 0.0, 0.0)) );
				this.assertTrue(( ( ( v3AxesMin == null ) && ( b1 == null ) ) || ( ( ( ( ( v3AxesMin != null ) && ( b1 != null ) ) && ( v3AxesMin.x == b1.x ) ) && ( v3AxesMin.y == b1.y ) ) && ( v3AxesMin.z == b1.z ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testVectorMinMax", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (483) )}));
				global::Array<object> v4Axes = new global::Array<object>(new object[]{((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(1.0, 0.0, 0.0, 0.0)) ), ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 1.0, 0.0, 0.0)) ), ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 0.0, 1.0, 0.0)) ), ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 0.0, 0.0, 1.0)) )});
				global::hxmath.math.Vector4Default v4AxesMax = ((global::hxmath.math.Vector4Default) (global::Lambda.fold<object, object>(((object) (v4Axes) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Vector4.Vector4_Impl_), "max", 5442212)) ), ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(1.0, 0.0, 0.0, 0.0)) ))) );
				global::hxmath.math.Vector4Default v4AxesMin = ((global::hxmath.math.Vector4Default) (global::Lambda.fold<object, object>(((object) (v4Axes) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Vector4.Vector4_Impl_), "min", 5443986)) ), ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(1.0, 0.0, 0.0, 0.0)) ))) );
				global::hxmath.math.Vector4Default v4AxesSum = ((global::hxmath.math.Vector4Default) (global::Lambda.fold<object, object>(((object) (v4Axes) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._Vector4.Vector4_Impl_), "add", 4846113)) ), ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 0.0, 0.0, 0.0)) ))) );
				this.assertTrue(( ( ( v4AxesMax == null ) && ( v4AxesSum == null ) ) || ( ( ( ( ( ( v4AxesMax != null ) && ( v4AxesSum != null ) ) && ( v4AxesMax.x == v4AxesSum.x ) ) && ( v4AxesMax.y == v4AxesSum.y ) ) && ( v4AxesMax.z == v4AxesSum.z ) ) && ( v4AxesMax.w == v4AxesSum.w ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testVectorMinMax", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (490) )}));
				global::hxmath.math.Vector4Default b2 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 0.0, 0.0, 0.0)) );
				this.assertTrue(( ( ( v4AxesMin == null ) && ( b2 == null ) ) || ( ( ( ( ( ( v4AxesMin != null ) && ( b2 != null ) ) && ( v4AxesMin.x == b2.x ) ) && ( v4AxesMin.y == b2.y ) ) && ( v4AxesMin.z == b2.z ) ) && ( v4AxesMin.w == b2.w ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testVectorMinMax", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (491) )}));
				global::Array<object> v2iAxes = new global::Array<object>(new object[]{global::hxmath.math._IntVector2.IntVector2_Impl_._new(1, 0), global::hxmath.math._IntVector2.IntVector2_Impl_._new(0, 1)});
				global::hxmath.math.IntVector2Default v2iAxesMax = ((global::hxmath.math.IntVector2Default) (global::Lambda.fold<object, object>(((object) (v2iAxes) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._IntVector2.IntVector2_Impl_), "max", 5442212)) ), ((object) (global::hxmath.math._IntVector2.IntVector2_Impl_._new(1, 0)) ))) );
				global::hxmath.math.IntVector2Default v2iAxesMin = ((global::hxmath.math.IntVector2Default) (global::Lambda.fold<object, object>(((object) (v2iAxes) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._IntVector2.IntVector2_Impl_), "min", 5443986)) ), ((object) (global::hxmath.math._IntVector2.IntVector2_Impl_._new(1, 0)) ))) );
				global::hxmath.math.IntVector2Default v2iAxesSum = ((global::hxmath.math.IntVector2Default) (global::Lambda.fold<object, object>(((object) (v2iAxes) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._IntVector2.IntVector2_Impl_), "add", 4846113)) ), ((object) (global::hxmath.math._IntVector2.IntVector2_Impl_._new(0, 0)) ))) );
				this.assertTrue(( ( ( v2iAxesMax == null ) && ( v2iAxesSum == null ) ) || ( ( ( ( v2iAxesMax != null ) && ( v2iAxesSum != null ) ) && ( v2iAxesMax.x == v2iAxesSum.x ) ) && ( v2iAxesMax.y == v2iAxesSum.y ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testVectorMinMax", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (498) )}));
				global::hxmath.math.IntVector2Default b3 = global::hxmath.math._IntVector2.IntVector2_Impl_._new(0, 0);
				this.assertTrue(( ( ( v2iAxesMin == null ) && ( b3 == null ) ) || ( ( ( ( v2iAxesMin != null ) && ( b3 != null ) ) && ( v2iAxesMin.x == b3.x ) ) && ( v2iAxesMin.y == b3.y ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testVectorMinMax", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (499) )}));
				global::Array<int> v2sAxes = new global::Array<int>(new int[]{global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(1, 0), global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(0, 1)});
				int v2sAxesMax = global::Lambda.fold<int, int>(((object) (v2sAxes) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._ShortVector2.ShortVector2_Impl_), "max", 5442212)) ), ((int) (global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(1, 0)) ));
				int v2sAxesMin = global::Lambda.fold<int, int>(((object) (v2sAxes) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._ShortVector2.ShortVector2_Impl_), "min", 5443986)) ), ((int) (global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(1, 0)) ));
				this.assertTrue(( v2sAxesMax == global::Lambda.fold<int, int>(((object) (v2sAxes) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::hxmath.math._ShortVector2.ShortVector2_Impl_), "add", 4846113)) ), ((int) (global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(0, 0)) )) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testVectorMinMax", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (506) )}));
				this.assertTrue(( v2sAxesMin == global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(0, 0) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testVectorMinMax", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (507) )}));
			}
		}
		
		
		public virtual void testVectorProj() {
			unchecked {
				global::hxmath.math.Vector2Default a = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 0.0)) );
				global::hxmath.math.Vector2Default b = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 1.0)) );
				global::hxmath.math.Vector2Default self = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(a.x, a.y)) );
				double s = ( (( ( self.x * b.x ) + ( self.y * b.y ) )) / (( ( b.x * b.x ) + ( b.y * b.y ) )) );
				{
					int _g = 0;
					while (( _g < 2 )) {
						int i = _g++;
						{
							object tmp = null;
							switch (i) {
								case 0:
								{
									tmp = b.x;
									break;
								}
								
								
								case 1:
								{
									tmp = b.y;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double @value = ((double) (global::haxe.lang.Runtime.toDouble(tmp)) );
							switch (i) {
								case 0:
								{
									self.x = @value;
									break;
								}
								
								
								case 1:
								{
									self.y = @value;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				{
					self.x *= s;
					self.y *= s;
				}
				
				global::hxmath.math.Vector2Default b1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 0.0)) );
				this.assertTrue(( ( ( self == null ) && ( b1 == null ) ) || ( ( ( ( self != null ) && ( b1 != null ) ) && ( self.x == b1.x ) ) && ( self.y == b1.y ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testVectorProj", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (514) )}));
				global::hxmath.math.Vector2Default v2Mid = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.5, 0.5)) );
				{
					global::_List.ListNode<object> _g_head = global::Lambda.map<object, object>(((object) (new global::Array<object>(new object[]{((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 0.0)) ), ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 1.0)) )})) ), ((global::haxe.lang.Function) (new global::test.TestStructures_testVectorProj_518__Fun(v2Mid)) )).h;
					while (( _g_head != null )) {
						global::hxmath.math.Vector2Default val = ((global::hxmath.math.Vector2Default) (_g_head.item) );
						_g_head = _g_head.next;
						this.assertApproxEquals(0.5, global::System.Math.Sqrt(((double) (( ( val.x * val.x ) + ( val.y * val.y ) )) )), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testVectorProj", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (522) )}));
					}
					
				}
				
				global::hxmath.math.Vector3Default a2 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(1.0, 0.0, 0.0)) );
				global::hxmath.math.Vector3Default b2 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 1.0, 0.0)) );
				global::hxmath.math.Vector3Default self3 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(a2.x, a2.y, a2.z)) );
				double s2 = ( (( ( ( self3.x * b2.x ) + ( self3.y * b2.y ) ) + ( self3.z * b2.z ) )) / (( ( ( b2.x * b2.x ) + ( b2.y * b2.y ) ) + ( b2.z * b2.z ) )) );
				{
					int _g2 = 0;
					while (( _g2 < 3 )) {
						int i2 = _g2++;
						{
							object tmp2 = null;
							switch (i2) {
								case 0:
								{
									tmp2 = b2.x;
									break;
								}
								
								
								case 1:
								{
									tmp2 = b2.y;
									break;
								}
								
								
								case 2:
								{
									tmp2 = b2.z;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double value2 = ((double) (global::haxe.lang.Runtime.toDouble(tmp2)) );
							switch (i2) {
								case 0:
								{
									self3.x = value2;
									break;
								}
								
								
								case 1:
								{
									self3.y = value2;
									break;
								}
								
								
								case 2:
								{
									self3.z = value2;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				{
					self3.x *= s2;
					self3.y *= s2;
					self3.z *= s2;
				}
				
				global::hxmath.math.Vector3Default a3 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(1.0, 0.0, 0.0)) );
				global::hxmath.math.Vector3Default b3 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 0.0, 1.0)) );
				global::hxmath.math.Vector3Default self4 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(a3.x, a3.y, a3.z)) );
				double s3 = ( (( ( ( self4.x * b3.x ) + ( self4.y * b3.y ) ) + ( self4.z * b3.z ) )) / (( ( ( b3.x * b3.x ) + ( b3.y * b3.y ) ) + ( b3.z * b3.z ) )) );
				{
					int _g3 = 0;
					while (( _g3 < 3 )) {
						int i3 = _g3++;
						{
							object tmp3 = null;
							switch (i3) {
								case 0:
								{
									tmp3 = b3.x;
									break;
								}
								
								
								case 1:
								{
									tmp3 = b3.y;
									break;
								}
								
								
								case 2:
								{
									tmp3 = b3.z;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double value3 = ((double) (global::haxe.lang.Runtime.toDouble(tmp3)) );
							switch (i3) {
								case 0:
								{
									self4.x = value3;
									break;
								}
								
								
								case 1:
								{
									self4.y = value3;
									break;
								}
								
								
								case 2:
								{
									self4.z = value3;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				{
					self4.x *= s3;
					self4.y *= s3;
					self4.z *= s3;
				}
				
				global::hxmath.math.Vector3Default a4 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 1.0, 0.0)) );
				global::hxmath.math.Vector3Default b4 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 0.0, 1.0)) );
				global::hxmath.math.Vector3Default self5 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(a4.x, a4.y, a4.z)) );
				double s4 = ( (( ( ( self5.x * b4.x ) + ( self5.y * b4.y ) ) + ( self5.z * b4.z ) )) / (( ( ( b4.x * b4.x ) + ( b4.y * b4.y ) ) + ( b4.z * b4.z ) )) );
				{
					int _g4 = 0;
					while (( _g4 < 3 )) {
						int i4 = _g4++;
						{
							object tmp4 = null;
							switch (i4) {
								case 0:
								{
									tmp4 = b4.x;
									break;
								}
								
								
								case 1:
								{
									tmp4 = b4.y;
									break;
								}
								
								
								case 2:
								{
									tmp4 = b4.z;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double value4 = ((double) (global::haxe.lang.Runtime.toDouble(tmp4)) );
							switch (i4) {
								case 0:
								{
									self5.x = value4;
									break;
								}
								
								
								case 1:
								{
									self5.y = value4;
									break;
								}
								
								
								case 2:
								{
									self5.z = value4;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				{
					self5.x *= s4;
					self5.y *= s4;
					self5.z *= s4;
				}
				
				global::Array<object> v3AxesProj = new global::Array<object>(new object[]{self3, self4, self5});
				{
					int _g5 = 0;
					while (( _g5 < v3AxesProj.length )) {
						global::hxmath.math.Vector3Default v = ((global::hxmath.math.Vector3Default) (v3AxesProj[_g5]) );
						 ++ _g5;
						global::hxmath.math.Vector3Default b5 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 0.0, 0.0)) );
						this.assertTrue(( ( ( v == null ) && ( b5 == null ) ) || ( ( ( ( ( v != null ) && ( b5 != null ) ) && ( v.x == b5.x ) ) && ( v.y == b5.y ) ) && ( v.z == b5.z ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testVectorProj", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (533) )}));
					}
					
				}
				
				global::hxmath.math.Vector3Default v3Mid = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.5, 0.5, 0.5)) );
				{
					global::_List.ListNode<object> _g_head1 = global::Lambda.map<object, object>(((object) (new global::Array<object>(new object[]{((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(1.0, 0.0, 0.0)) ), ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 1.0, 0.0)) ), ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 0.0, 1.0)) )})) ), ((global::haxe.lang.Function) (new global::test.TestStructures_testVectorProj_538__Fun(v3Mid)) )).h;
					while (( _g_head1 != null )) {
						global::hxmath.math.Vector3Default val1 = ((global::hxmath.math.Vector3Default) (_g_head1.item) );
						_g_head1 = _g_head1.next;
						this.assertApproxEquals(0.5, global::System.Math.Sqrt(((double) (( ( ( val1.x * val1.x ) + ( val1.y * val1.y ) ) + ( val1.z * val1.z ) )) )), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testVectorProj", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (542) )}));
					}
					
				}
				
				global::hxmath.math.Vector4Default a6 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(1.0, 0.0, 0.0, 0.0)) );
				global::hxmath.math.Vector4Default b6 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 1.0, 0.0, 0.0)) );
				global::hxmath.math.Vector4Default self8 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(a6.x, a6.y, a6.z, a6.w)) );
				double s6 = ( (( ( ( ( self8.x * b6.x ) + ( self8.y * b6.y ) ) + ( self8.z * b6.z ) ) + ( self8.w * b6.w ) )) / (( ( ( ( b6.x * b6.x ) + ( b6.y * b6.y ) ) + ( b6.z * b6.z ) ) + ( b6.w * b6.w ) )) );
				{
					int _g7 = 0;
					while (( _g7 < 4 )) {
						int i6 = _g7++;
						{
							object tmp6 = null;
							switch (i6) {
								case 0:
								{
									tmp6 = b6.x;
									break;
								}
								
								
								case 1:
								{
									tmp6 = b6.y;
									break;
								}
								
								
								case 2:
								{
									tmp6 = b6.z;
									break;
								}
								
								
								case 3:
								{
									tmp6 = b6.w;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double value6 = ((double) (global::haxe.lang.Runtime.toDouble(tmp6)) );
							switch (i6) {
								case 0:
								{
									self8.x = value6;
									break;
								}
								
								
								case 1:
								{
									self8.y = value6;
									break;
								}
								
								
								case 2:
								{
									self8.z = value6;
									break;
								}
								
								
								case 3:
								{
									self8.w = value6;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				{
					self8.x *= s6;
					self8.y *= s6;
					self8.z *= s6;
					self8.w *= s6;
				}
				
				global::hxmath.math.Vector4Default a7 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(1.0, 0.0, 0.0, 0.0)) );
				global::hxmath.math.Vector4Default b7 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 0.0, 1.0, 0.0)) );
				global::hxmath.math.Vector4Default self9 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(a7.x, a7.y, a7.z, a7.w)) );
				double s7 = ( (( ( ( ( self9.x * b7.x ) + ( self9.y * b7.y ) ) + ( self9.z * b7.z ) ) + ( self9.w * b7.w ) )) / (( ( ( ( b7.x * b7.x ) + ( b7.y * b7.y ) ) + ( b7.z * b7.z ) ) + ( b7.w * b7.w ) )) );
				{
					int _g8 = 0;
					while (( _g8 < 4 )) {
						int i7 = _g8++;
						{
							object tmp7 = null;
							switch (i7) {
								case 0:
								{
									tmp7 = b7.x;
									break;
								}
								
								
								case 1:
								{
									tmp7 = b7.y;
									break;
								}
								
								
								case 2:
								{
									tmp7 = b7.z;
									break;
								}
								
								
								case 3:
								{
									tmp7 = b7.w;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double value7 = ((double) (global::haxe.lang.Runtime.toDouble(tmp7)) );
							switch (i7) {
								case 0:
								{
									self9.x = value7;
									break;
								}
								
								
								case 1:
								{
									self9.y = value7;
									break;
								}
								
								
								case 2:
								{
									self9.z = value7;
									break;
								}
								
								
								case 3:
								{
									self9.w = value7;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				{
					self9.x *= s7;
					self9.y *= s7;
					self9.z *= s7;
					self9.w *= s7;
				}
				
				global::hxmath.math.Vector4Default a8 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(1.0, 0.0, 0.0, 0.0)) );
				global::hxmath.math.Vector4Default b8 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 0.0, 0.0, 1.0)) );
				global::hxmath.math.Vector4Default self10 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(a8.x, a8.y, a8.z, a8.w)) );
				double s8 = ( (( ( ( ( self10.x * b8.x ) + ( self10.y * b8.y ) ) + ( self10.z * b8.z ) ) + ( self10.w * b8.w ) )) / (( ( ( ( b8.x * b8.x ) + ( b8.y * b8.y ) ) + ( b8.z * b8.z ) ) + ( b8.w * b8.w ) )) );
				{
					int _g9 = 0;
					while (( _g9 < 4 )) {
						int i8 = _g9++;
						{
							object tmp8 = null;
							switch (i8) {
								case 0:
								{
									tmp8 = b8.x;
									break;
								}
								
								
								case 1:
								{
									tmp8 = b8.y;
									break;
								}
								
								
								case 2:
								{
									tmp8 = b8.z;
									break;
								}
								
								
								case 3:
								{
									tmp8 = b8.w;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double value8 = ((double) (global::haxe.lang.Runtime.toDouble(tmp8)) );
							switch (i8) {
								case 0:
								{
									self10.x = value8;
									break;
								}
								
								
								case 1:
								{
									self10.y = value8;
									break;
								}
								
								
								case 2:
								{
									self10.z = value8;
									break;
								}
								
								
								case 3:
								{
									self10.w = value8;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				{
					self10.x *= s8;
					self10.y *= s8;
					self10.z *= s8;
					self10.w *= s8;
				}
				
				global::hxmath.math.Vector4Default a9 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 1.0, 0.0, 0.0)) );
				global::hxmath.math.Vector4Default b9 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 0.0, 1.0, 0.0)) );
				global::hxmath.math.Vector4Default self11 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(a9.x, a9.y, a9.z, a9.w)) );
				double s9 = ( (( ( ( ( self11.x * b9.x ) + ( self11.y * b9.y ) ) + ( self11.z * b9.z ) ) + ( self11.w * b9.w ) )) / (( ( ( ( b9.x * b9.x ) + ( b9.y * b9.y ) ) + ( b9.z * b9.z ) ) + ( b9.w * b9.w ) )) );
				{
					int _g10 = 0;
					while (( _g10 < 4 )) {
						int i9 = _g10++;
						{
							object tmp9 = null;
							switch (i9) {
								case 0:
								{
									tmp9 = b9.x;
									break;
								}
								
								
								case 1:
								{
									tmp9 = b9.y;
									break;
								}
								
								
								case 2:
								{
									tmp9 = b9.z;
									break;
								}
								
								
								case 3:
								{
									tmp9 = b9.w;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double value9 = ((double) (global::haxe.lang.Runtime.toDouble(tmp9)) );
							switch (i9) {
								case 0:
								{
									self11.x = value9;
									break;
								}
								
								
								case 1:
								{
									self11.y = value9;
									break;
								}
								
								
								case 2:
								{
									self11.z = value9;
									break;
								}
								
								
								case 3:
								{
									self11.w = value9;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				{
					self11.x *= s9;
					self11.y *= s9;
					self11.z *= s9;
					self11.w *= s9;
				}
				
				global::hxmath.math.Vector4Default a10 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 1.0, 0.0, 0.0)) );
				global::hxmath.math.Vector4Default b10 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 0.0, 0.0, 1.0)) );
				global::hxmath.math.Vector4Default self12 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(a10.x, a10.y, a10.z, a10.w)) );
				double s10 = ( (( ( ( ( self12.x * b10.x ) + ( self12.y * b10.y ) ) + ( self12.z * b10.z ) ) + ( self12.w * b10.w ) )) / (( ( ( ( b10.x * b10.x ) + ( b10.y * b10.y ) ) + ( b10.z * b10.z ) ) + ( b10.w * b10.w ) )) );
				{
					int _g11 = 0;
					while (( _g11 < 4 )) {
						int i10 = _g11++;
						{
							object tmp10 = null;
							switch (i10) {
								case 0:
								{
									tmp10 = b10.x;
									break;
								}
								
								
								case 1:
								{
									tmp10 = b10.y;
									break;
								}
								
								
								case 2:
								{
									tmp10 = b10.z;
									break;
								}
								
								
								case 3:
								{
									tmp10 = b10.w;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double value10 = ((double) (global::haxe.lang.Runtime.toDouble(tmp10)) );
							switch (i10) {
								case 0:
								{
									self12.x = value10;
									break;
								}
								
								
								case 1:
								{
									self12.y = value10;
									break;
								}
								
								
								case 2:
								{
									self12.z = value10;
									break;
								}
								
								
								case 3:
								{
									self12.w = value10;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				{
					self12.x *= s10;
					self12.y *= s10;
					self12.z *= s10;
					self12.w *= s10;
				}
				
				global::hxmath.math.Vector4Default a11 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 0.0, 1.0, 0.0)) );
				global::hxmath.math.Vector4Default b11 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 0.0, 0.0, 1.0)) );
				global::hxmath.math.Vector4Default self13 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(a11.x, a11.y, a11.z, a11.w)) );
				double s11 = ( (( ( ( ( self13.x * b11.x ) + ( self13.y * b11.y ) ) + ( self13.z * b11.z ) ) + ( self13.w * b11.w ) )) / (( ( ( ( b11.x * b11.x ) + ( b11.y * b11.y ) ) + ( b11.z * b11.z ) ) + ( b11.w * b11.w ) )) );
				{
					int _g12 = 0;
					while (( _g12 < 4 )) {
						int i11 = _g12++;
						{
							object tmp11 = null;
							switch (i11) {
								case 0:
								{
									tmp11 = b11.x;
									break;
								}
								
								
								case 1:
								{
									tmp11 = b11.y;
									break;
								}
								
								
								case 2:
								{
									tmp11 = b11.z;
									break;
								}
								
								
								case 3:
								{
									tmp11 = b11.w;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double value11 = ((double) (global::haxe.lang.Runtime.toDouble(tmp11)) );
							switch (i11) {
								case 0:
								{
									self13.x = value11;
									break;
								}
								
								
								case 1:
								{
									self13.y = value11;
									break;
								}
								
								
								case 2:
								{
									self13.z = value11;
									break;
								}
								
								
								case 3:
								{
									self13.w = value11;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				{
					self13.x *= s11;
					self13.y *= s11;
					self13.z *= s11;
					self13.w *= s11;
				}
				
				global::Array<object> v4AxesProj = new global::Array<object>(new object[]{self8, self9, self10, self11, self12, self13});
				{
					int _g13 = 0;
					while (( _g13 < v4AxesProj.length )) {
						global::hxmath.math.Vector4Default v1 = ((global::hxmath.math.Vector4Default) (v4AxesProj[_g13]) );
						 ++ _g13;
						global::hxmath.math.Vector4Default b12 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 0.0, 0.0, 0.0)) );
						this.assertTrue(( ( ( v1 == null ) && ( b12 == null ) ) || ( ( ( ( ( ( v1 != null ) && ( b12 != null ) ) && ( v1.x == b12.x ) ) && ( v1.y == b12.y ) ) && ( v1.z == b12.z ) ) && ( v1.w == b12.w ) ) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testVectorProj", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (556) )}));
					}
					
				}
				
				global::hxmath.math.Vector4Default v4Mid = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.5, 0.5, 0.5, 0.5)) );
				{
					global::_List.ListNode<object> _g_head2 = global::Lambda.map<object, object>(((object) (new global::Array<object>(new object[]{((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(1.0, 0.0, 0.0, 0.0)) ), ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 1.0, 0.0, 0.0)) ), ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 0.0, 1.0, 0.0)) ), ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 0.0, 0.0, 1.0)) )})) ), ((global::haxe.lang.Function) (new global::test.TestStructures_testVectorProj_561__Fun(v4Mid)) )).h;
					while (( _g_head2 != null )) {
						global::hxmath.math.Vector4Default val2 = ((global::hxmath.math.Vector4Default) (_g_head2.item) );
						_g_head2 = _g_head2.next;
						this.assertApproxEquals(0.5, global::System.Math.Sqrt(((double) (( ( ( ( val2.x * val2.x ) + ( val2.y * val2.y ) ) + ( val2.z * val2.z ) ) + ( val2.w * val2.w ) )) )), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testVectorProj", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (565) )}));
					}
					
				}
				
			}
		}
		
		
		public virtual void testNormalizeTo() {
			unchecked {
				{
					int _g = 0;
					while (( _g < 30 )) {
						 ++ _g;
						global::hxmath.math.Vector2Default v = this.randomVector2(default(global::haxe.lang.Null<double>));
						double newLength = global::System.Math.Abs(((double) (this.randomFloat(default(global::haxe.lang.Null<double>), default(global::haxe.lang.Null<double>), default(global::haxe.lang.Null<double>))) ));
						{
							double length = global::System.Math.Sqrt(((double) (( ( v.x * v.x ) + ( v.y * v.y ) )) ));
							if (( length > 0.0 )) {
								v.x /= length;
								v.y /= length;
							}
							
						}
						
						{
							v.x *= newLength;
							v.y *= newLength;
						}
						
						global::hxmath.math.Vector2Default self = ((global::hxmath.math.Vector2Default) (v) );
						this.assertApproxEquals(newLength, global::System.Math.Sqrt(((double) (( ( self.x * self.x ) + ( self.y * self.y ) )) )), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNormalizeTo", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (575) )}));
					}
					
				}
				
				{
					int _g1 = 0;
					while (( _g1 < 30 )) {
						 ++ _g1;
						global::hxmath.math.Vector3Default v1 = this.randomVector3(default(global::haxe.lang.Null<double>));
						double newLength1 = global::System.Math.Abs(((double) (this.randomFloat(default(global::haxe.lang.Null<double>), default(global::haxe.lang.Null<double>), default(global::haxe.lang.Null<double>))) ));
						{
							double length1 = global::System.Math.Sqrt(((double) (( ( ( v1.x * v1.x ) + ( v1.y * v1.y ) ) + ( v1.z * v1.z ) )) ));
							if (( length1 > 0.0 )) {
								v1.x /= length1;
								v1.y /= length1;
								v1.z /= length1;
							}
							
						}
						
						{
							v1.x *= newLength1;
							v1.y *= newLength1;
							v1.z *= newLength1;
						}
						
						global::hxmath.math.Vector3Default self1 = ((global::hxmath.math.Vector3Default) (v1) );
						this.assertApproxEquals(newLength1, global::System.Math.Sqrt(((double) (( ( ( self1.x * self1.x ) + ( self1.y * self1.y ) ) + ( self1.z * self1.z ) )) )), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNormalizeTo", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (582) )}));
					}
					
				}
				
				{
					int _g2 = 0;
					while (( _g2 < 30 )) {
						 ++ _g2;
						global::hxmath.math.Vector4Default v2 = this.randomVector4(default(global::haxe.lang.Null<double>));
						double newLength2 = global::System.Math.Abs(((double) (this.randomFloat(default(global::haxe.lang.Null<double>), default(global::haxe.lang.Null<double>), default(global::haxe.lang.Null<double>))) ));
						{
							double length2 = global::System.Math.Sqrt(((double) (( ( ( ( v2.x * v2.x ) + ( v2.y * v2.y ) ) + ( v2.z * v2.z ) ) + ( v2.w * v2.w ) )) ));
							if (( length2 > 0.0 )) {
								v2.x /= length2;
								v2.y /= length2;
								v2.z /= length2;
								v2.w /= length2;
							}
							
						}
						
						{
							v2.x *= newLength2;
							v2.y *= newLength2;
							v2.z *= newLength2;
							v2.w *= newLength2;
						}
						
						global::hxmath.math.Vector4Default self2 = ((global::hxmath.math.Vector4Default) (v2) );
						this.assertApproxEquals(newLength2, global::System.Math.Sqrt(((double) (( ( ( ( self2.x * self2.x ) + ( self2.y * self2.y ) ) + ( self2.z * self2.z ) ) + ( self2.w * self2.w ) )) )), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNormalizeTo", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (589) )}));
					}
					
				}
				
			}
		}
		
		
		public virtual void testClamp() {
			unchecked {
				{
					int _g = 0;
					while (( _g < 30 )) {
						 ++ _g;
						global::hxmath.math.Vector2Default _g2 = this.randomVector2(default(global::haxe.lang.Null<double>));
						global::hxmath.math.Vector2Default self = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(_g2.x, _g2.y)) );
						self.x *= 10.0;
						self.y *= 10.0;
						double length = global::System.Math.Sqrt(((double) (( ( self.x * self.x ) + ( self.y * self.y ) )) ));
						if (( length < 3.0 )) {
							{
								double length1 = global::System.Math.Sqrt(((double) (( ( self.x * self.x ) + ( self.y * self.y ) )) ));
								if (( length1 > 0.0 )) {
									self.x /= length1;
									self.y /= length1;
								}
								
							}
							
							{
								self.x *= 3.0;
								self.y *= 3.0;
							}
							
						}
						else if (( length > 7.0 )) {
							{
								double length2 = global::System.Math.Sqrt(((double) (( ( self.x * self.x ) + ( self.y * self.y ) )) ));
								if (( length2 > 0.0 )) {
									self.x /= length2;
									self.y /= length2;
								}
								
							}
							
							{
								self.x *= 7.0;
								self.y *= 7.0;
							}
							
						}
						
						this.assertTrue(( global::System.Math.Sqrt(((double) (( ( self.x * self.x ) + ( self.y * self.y ) )) )) >= 2.999999 ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testClamp", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (604) )}));
						this.assertTrue(( global::System.Math.Sqrt(((double) (( ( self.x * self.x ) + ( self.y * self.y ) )) )) <= 7.000001 ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testClamp", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (605) )}));
					}
					
				}
				
				{
					int _g1 = 0;
					while (( _g1 < 30 )) {
						 ++ _g1;
						global::hxmath.math.Vector3Default _g21 = this.randomVector3(default(global::haxe.lang.Null<double>));
						global::hxmath.math.Vector3Default self1 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(_g21.x, _g21.y, _g21.z)) );
						self1.x *= 10.0;
						self1.y *= 10.0;
						self1.z *= 10.0;
						double length3 = global::System.Math.Sqrt(((double) (( ( ( self1.x * self1.x ) + ( self1.y * self1.y ) ) + ( self1.z * self1.z ) )) ));
						if (( length3 < 3.0 )) {
							{
								double length4 = global::System.Math.Sqrt(((double) (( ( ( self1.x * self1.x ) + ( self1.y * self1.y ) ) + ( self1.z * self1.z ) )) ));
								if (( length4 > 0.0 )) {
									self1.x /= length4;
									self1.y /= length4;
									self1.z /= length4;
								}
								
							}
							
							{
								self1.x *= 3.0;
								self1.y *= 3.0;
								self1.z *= 3.0;
							}
							
						}
						else if (( length3 > 7.0 )) {
							{
								double length5 = global::System.Math.Sqrt(((double) (( ( ( self1.x * self1.x ) + ( self1.y * self1.y ) ) + ( self1.z * self1.z ) )) ));
								if (( length5 > 0.0 )) {
									self1.x /= length5;
									self1.y /= length5;
									self1.z /= length5;
								}
								
							}
							
							{
								self1.x *= 7.0;
								self1.y *= 7.0;
								self1.z *= 7.0;
							}
							
						}
						
						this.assertTrue(( global::System.Math.Sqrt(((double) (( ( ( self1.x * self1.x ) + ( self1.y * self1.y ) ) + ( self1.z * self1.z ) )) )) >= 2.999999 ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testClamp", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (617) )}));
						this.assertTrue(( global::System.Math.Sqrt(((double) (( ( ( self1.x * self1.x ) + ( self1.y * self1.y ) ) + ( self1.z * self1.z ) )) )) <= 7.000001 ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testClamp", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (618) )}));
					}
					
				}
				
				{
					int _g3 = 0;
					while (( _g3 < 30 )) {
						 ++ _g3;
						global::hxmath.math.Vector4Default _g22 = this.randomVector4(default(global::haxe.lang.Null<double>));
						global::hxmath.math.Vector4Default self2 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(_g22.x, _g22.y, _g22.z, _g22.w)) );
						self2.x *= 10.0;
						self2.y *= 10.0;
						self2.z *= 10.0;
						self2.w *= 10.0;
						double length6 = global::System.Math.Sqrt(((double) (( ( ( ( self2.x * self2.x ) + ( self2.y * self2.y ) ) + ( self2.z * self2.z ) ) + ( self2.w * self2.w ) )) ));
						if (( length6 < 3.0 )) {
							{
								double length7 = global::System.Math.Sqrt(((double) (( ( ( ( self2.x * self2.x ) + ( self2.y * self2.y ) ) + ( self2.z * self2.z ) ) + ( self2.w * self2.w ) )) ));
								if (( length7 > 0.0 )) {
									self2.x /= length7;
									self2.y /= length7;
									self2.z /= length7;
									self2.w /= length7;
								}
								
							}
							
							{
								self2.x *= 3.0;
								self2.y *= 3.0;
								self2.z *= 3.0;
								self2.w *= 3.0;
							}
							
						}
						else if (( length6 > 7.0 )) {
							{
								double length8 = global::System.Math.Sqrt(((double) (( ( ( ( self2.x * self2.x ) + ( self2.y * self2.y ) ) + ( self2.z * self2.z ) ) + ( self2.w * self2.w ) )) ));
								if (( length8 > 0.0 )) {
									self2.x /= length8;
									self2.y /= length8;
									self2.z /= length8;
									self2.w /= length8;
								}
								
							}
							
							{
								self2.x *= 7.0;
								self2.y *= 7.0;
								self2.z *= 7.0;
								self2.w *= 7.0;
							}
							
						}
						
						this.assertTrue(( global::System.Math.Sqrt(((double) (( ( ( ( self2.x * self2.x ) + ( self2.y * self2.y ) ) + ( self2.z * self2.z ) ) + ( self2.w * self2.w ) )) )) >= 2.999999 ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testClamp", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (630) )}));
						this.assertTrue(( global::System.Math.Sqrt(((double) (( ( ( ( self2.x * self2.x ) + ( self2.y * self2.y ) ) + ( self2.z * self2.z ) ) + ( self2.w * self2.w ) )) )) <= 7.000001 ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testClamp", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (631) )}));
					}
					
				}
				
			}
		}
		
		
		public virtual void testDistanceTo() {
			unchecked {
				global::hxmath.math.Vector2Default this1 = new global::hxmath.math.Vector2Default(0.0, 0.0);
				global::hxmath.math.Vector2Default b = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(1.0, 0.0)) );
				global::hxmath.math.Vector2Default self = ((global::hxmath.math.Vector2Default) (this1) );
				global::hxmath.math.Vector2Default self1 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self.x, self.y)) );
				self1.x -= b.x;
				self1.y -= b.y;
				global::hxmath.math.Vector2Default self2 = ((global::hxmath.math.Vector2Default) (self1) );
				this.assertApproxEquals(1.0, global::System.Math.Sqrt(((double) (( ( self2.x * self2.x ) + ( self2.y * self2.y ) )) )), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDistanceTo", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (637) )}));
				global::hxmath.math.Vector3Default this2 = new global::hxmath.math.Vector3Default(0.0, 0.0, 0.0);
				global::hxmath.math.Vector3Default b1 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(1.0, 0.0, 0.0)) );
				global::hxmath.math.Vector3Default self3 = ((global::hxmath.math.Vector3Default) (this2) );
				global::hxmath.math.Vector3Default self4 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(self3.x, self3.y, self3.z)) );
				self4.x -= b1.x;
				self4.y -= b1.y;
				self4.z -= b1.z;
				global::hxmath.math.Vector3Default self5 = ((global::hxmath.math.Vector3Default) (self4) );
				this.assertApproxEquals(1.0, global::System.Math.Sqrt(((double) (( ( ( self5.x * self5.x ) + ( self5.y * self5.y ) ) + ( self5.z * self5.z ) )) )), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDistanceTo", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (638) )}));
				global::hxmath.math.Vector4Default this3 = new global::hxmath.math.Vector4Default(0.0, 0.0, 0.0, 0.0);
				global::hxmath.math.Vector4Default b2 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(1.0, 0.0, 0.0, 0.0)) );
				global::hxmath.math.Vector4Default self6 = ((global::hxmath.math.Vector4Default) (this3) );
				global::hxmath.math.Vector4Default self7 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(self6.x, self6.y, self6.z, self6.w)) );
				self7.x -= b2.x;
				self7.y -= b2.y;
				self7.z -= b2.z;
				self7.w -= b2.w;
				global::hxmath.math.Vector4Default self8 = ((global::hxmath.math.Vector4Default) (self7) );
				this.assertApproxEquals(1.0, global::System.Math.Sqrt(((double) (( ( ( ( self8.x * self8.x ) + ( self8.y * self8.y ) ) + ( self8.z * self8.z ) ) + ( self8.w * self8.w ) )) )), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDistanceTo", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (639) )}));
			}
		}
		
		
		public virtual void testSetAllFields() {
			unchecked {
				global::hxmath.math.Vector2Default self = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 0.0)) );
				self.x = ((double) (23) );
				self.y = ((double) (0) );
				this.assertEquals<double>(((double) (23.0) ), ((double) (self.x) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSetAllFields", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (645) )})) ));
				global::hxmath.math.Vector3Default self1 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 0.0, 0.0)) );
				self1.x = ((double) (23) );
				self1.y = ((double) (0) );
				self1.z = ((double) (0) );
				this.assertEquals<double>(((double) (23.0) ), ((double) (self1.x) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSetAllFields", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (648) )})) ));
				global::hxmath.math.Vector4Default self2 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(0.0, 0.0, 0.0, 0.0)) );
				self2.x = ((double) (23) );
				self2.y = ((double) (0) );
				self2.z = ((double) (0) );
				self2.w = ((double) (0) );
				this.assertEquals<double>(((double) (23.0) ), ((double) (self2.x) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSetAllFields", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (651) )})) ));
				global::hxmath.math.IntVector2Default self3 = ((global::hxmath.math.IntVector2Default) (global::hxmath.math._IntVector2.IntVector2_Impl_._new(0, 0)) );
				self3.x = 23;
				self3.y = 0;
				this.assertEquals<int>(((int) (23) ), ((int) (self3.x) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSetAllFields", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (654) )})) ));
				global::hxmath.math.QuaternionDefault self4 = ((global::hxmath.math.QuaternionDefault) (new global::hxmath.math.QuaternionDefault(((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (0) ))) );
				self4.s = ((double) (23) );
				self4.x = ((double) (0) );
				self4.y = ((double) (0) );
				self4.z = ((double) (0) );
				this.assertEquals<double>(((double) (23.0) ), ((double) (self4.s) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSetAllFields", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (657) )})) ));
				global::hxmath.math.Matrix2x2Default this1 = new global::hxmath.math.Matrix2x2Default(0.0, 0.0, 0.0, 0.0);
				global::hxmath.math.Matrix2x2Default self5 = ((global::hxmath.math.Matrix2x2Default) (this1) );
				self5.a = ((double) (23) );
				self5.b = ((double) (0) );
				self5.c = ((double) (0) );
				self5.d = ((double) (0) );
				global::hxmath.math.Matrix2x2Default m22 = ((global::hxmath.math.Matrix2x2Default) (this1) );
				this.assertEquals<double>(((double) (23.0) ), ((double) (m22.a) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSetAllFields", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (660) )})) ));
				global::hxmath.math.Matrix3x2Default self6 = ((global::hxmath.math.Matrix3x2Default) (new global::hxmath.math.Matrix3x2Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) );
				self6.a = ((double) (23) );
				self6.b = ((double) (0) );
				self6.c = ((double) (0) );
				self6.d = ((double) (0) );
				self6.tx = ((double) (0) );
				self6.ty = ((double) (0) );
				this.assertEquals<double>(((double) (23.0) ), ((double) (self6.a) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSetAllFields", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (663) )})) ));
				global::hxmath.math.Matrix3x3Default self7 = ((global::hxmath.math.Matrix3x3Default) (new global::hxmath.math.Matrix3x3Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) );
				self7.m00 = ((double) (23) );
				self7.m10 = ((double) (0) );
				self7.m20 = ((double) (0) );
				self7.m01 = ((double) (0) );
				self7.m11 = ((double) (0) );
				self7.m21 = ((double) (0) );
				self7.m02 = ((double) (0) );
				self7.m12 = ((double) (0) );
				self7.m22 = ((double) (0) );
				this.assertEquals<double>(((double) (23.0) ), ((double) (self7.m00) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSetAllFields", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (666) )})) ));
				global::hxmath.math.Matrix4x4Default self8 = ((global::hxmath.math.Matrix4x4Default) (new global::hxmath.math.Matrix4x4Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) );
				self8.m00 = ((double) (23) );
				self8.m10 = ((double) (0) );
				self8.m20 = ((double) (0) );
				self8.m30 = ((double) (0) );
				self8.m01 = ((double) (0) );
				self8.m11 = ((double) (0) );
				self8.m21 = ((double) (0) );
				self8.m31 = ((double) (0) );
				self8.m02 = ((double) (0) );
				self8.m12 = ((double) (0) );
				self8.m22 = ((double) (0) );
				self8.m32 = ((double) (0) );
				self8.m03 = ((double) (0) );
				self8.m13 = ((double) (0) );
				self8.m23 = ((double) (0) );
				self8.m33 = ((double) (0) );
				this.assertEquals<double>(((double) (23.0) ), ((double) (self8.m00) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSetAllFields", "test.TestStructures", "TestStructures.hx"}, new int[]{1981972957}, new double[]{((double) (669) )})) ));
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1401033194:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSetAllFields", 1401033194)) );
					}
					
					
					case 736099074:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testDistanceTo", 736099074)) );
					}
					
					
					case 291156297:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testClamp", 291156297)) );
					}
					
					
					case 349645622:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testNormalizeTo", 349645622)) );
					}
					
					
					case 742648050:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testVectorProj", 742648050)) );
					}
					
					
					case 1364809927:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testVectorMinMax", 1364809927)) );
					}
					
					
					case 1609868020:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testHasToString", 1609868020)) );
					}
					
					
					case 1874110430:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testEqualsNullShouldNotThrow", 1874110430)) );
					}
					
					
					case 200726388:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testRowColAccessors", 200726388)) );
					}
					
					
					case 1328782604:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCopyToFrom", 1328782604)) );
					}
					
					
					case 28978273:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testIntApplyScalarFunc", 28978273)) );
					}
					
					
					case 136073068:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testApplyScalarFunc", 136073068)) );
					}
					
					
					case 1293753579:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testArrayAccess", 1293753579)) );
					}
					
					
					case 115624547:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testDeterminant", 115624547)) );
					}
					
					
					case 939327441:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testAddSub", 939327441)) );
					}
					
					
					case 291852715:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testClone", 291852715)) );
					}
					
					
					case 1491547185:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testEquals", 1491547185)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1401033194:
					{
						this.testSetAllFields();
						break;
					}
					
					
					case 736099074:
					{
						this.testDistanceTo();
						break;
					}
					
					
					case 291156297:
					{
						this.testClamp();
						break;
					}
					
					
					case 349645622:
					{
						this.testNormalizeTo();
						break;
					}
					
					
					case 742648050:
					{
						this.testVectorProj();
						break;
					}
					
					
					case 1364809927:
					{
						this.testVectorMinMax();
						break;
					}
					
					
					case 1609868020:
					{
						this.testHasToString();
						break;
					}
					
					
					case 1874110430:
					{
						this.testEqualsNullShouldNotThrow();
						break;
					}
					
					
					case 200726388:
					{
						this.testRowColAccessors();
						break;
					}
					
					
					case 1328782604:
					{
						this.testCopyToFrom();
						break;
					}
					
					
					case 28978273:
					{
						this.testIntApplyScalarFunc();
						break;
					}
					
					
					case 136073068:
					{
						this.testApplyScalarFunc();
						break;
					}
					
					
					case 1293753579:
					{
						this.testArrayAccess();
						break;
					}
					
					
					case 115624547:
					{
						this.testDeterminant();
						break;
					}
					
					
					case 939327441:
					{
						this.testAddSub();
						break;
					}
					
					
					case 291852715:
					{
						this.testClone();
						break;
					}
					
					
					case 1491547185:
					{
						this.testEquals();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace test {
	public class TestStructures_testIntApplyScalarFunc_328__Fun : global::haxe.lang.Function {
		
		public TestStructures_testIntApplyScalarFunc_328__Fun() : base(1, 1) {
		}
		
		
		public static global::test.TestStructures_testIntApplyScalarFunc_328__Fun __hx_current;
		
		public override double __hx_invoke1_f(double __fn_float1, object __fn_dyn1) {
			unchecked {
				int x = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
				return ((double) (( 2 * x )) );
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace test {
	public class TestStructures_testVectorProj_518__Fun : global::haxe.lang.Function {
		
		public TestStructures_testVectorProj_518__Fun(global::hxmath.math.Vector2Default v2Mid) : base(1, 0) {
			this.v2Mid = v2Mid;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::hxmath.math.Vector2Default a1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::hxmath.math.Vector2Default) (((object) (__fn_float1) )) )) : (((global::hxmath.math.Vector2Default) (__fn_dyn1) )) );
				global::hxmath.math.Vector2Default self1 = ((global::hxmath.math.Vector2Default) (this.v2Mid) );
				global::hxmath.math.Vector2Default self2 = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self1.x, self1.y)) );
				double s1 = ( (( ( self2.x * a1.x ) + ( self2.y * a1.y ) )) / (( ( a1.x * a1.x ) + ( a1.y * a1.y ) )) );
				{
					int _g1 = 0;
					while (( _g1 < 2 )) {
						int i1 = _g1++;
						{
							object tmp1 = null;
							switch (i1) {
								case 0:
								{
									tmp1 = a1.x;
									break;
								}
								
								
								case 1:
								{
									tmp1 = a1.y;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double value1 = ((double) (global::haxe.lang.Runtime.toDouble(tmp1)) );
							switch (i1) {
								case 0:
								{
									self2.x = value1;
									break;
								}
								
								
								case 1:
								{
									self2.y = value1;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				{
					self2.x *= s1;
					self2.y *= s1;
				}
				
				return self2;
			}
		}
		
		
		public global::hxmath.math.Vector2Default v2Mid;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace test {
	public class TestStructures_testVectorProj_538__Fun : global::haxe.lang.Function {
		
		public TestStructures_testVectorProj_538__Fun(global::hxmath.math.Vector3Default v3Mid) : base(1, 0) {
			this.v3Mid = v3Mid;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::hxmath.math.Vector3Default a5 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::hxmath.math.Vector3Default) (((object) (__fn_float1) )) )) : (((global::hxmath.math.Vector3Default) (__fn_dyn1) )) );
				global::hxmath.math.Vector3Default self6 = ((global::hxmath.math.Vector3Default) (this.v3Mid) );
				global::hxmath.math.Vector3Default self7 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(self6.x, self6.y, self6.z)) );
				double s5 = ( (( ( ( self7.x * a5.x ) + ( self7.y * a5.y ) ) + ( self7.z * a5.z ) )) / (( ( ( a5.x * a5.x ) + ( a5.y * a5.y ) ) + ( a5.z * a5.z ) )) );
				{
					int _g6 = 0;
					while (( _g6 < 3 )) {
						int i5 = _g6++;
						{
							object tmp5 = null;
							switch (i5) {
								case 0:
								{
									tmp5 = a5.x;
									break;
								}
								
								
								case 1:
								{
									tmp5 = a5.y;
									break;
								}
								
								
								case 2:
								{
									tmp5 = a5.z;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double value5 = ((double) (global::haxe.lang.Runtime.toDouble(tmp5)) );
							switch (i5) {
								case 0:
								{
									self7.x = value5;
									break;
								}
								
								
								case 1:
								{
									self7.y = value5;
									break;
								}
								
								
								case 2:
								{
									self7.z = value5;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				{
					self7.x *= s5;
					self7.y *= s5;
					self7.z *= s5;
				}
				
				return self7;
			}
		}
		
		
		public global::hxmath.math.Vector3Default v3Mid;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace test {
	public class TestStructures_testVectorProj_561__Fun : global::haxe.lang.Function {
		
		public TestStructures_testVectorProj_561__Fun(global::hxmath.math.Vector4Default v4Mid) : base(1, 0) {
			this.v4Mid = v4Mid;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::hxmath.math.Vector4Default a12 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::hxmath.math.Vector4Default) (((object) (__fn_float1) )) )) : (((global::hxmath.math.Vector4Default) (__fn_dyn1) )) );
				global::hxmath.math.Vector4Default self14 = ((global::hxmath.math.Vector4Default) (this.v4Mid) );
				global::hxmath.math.Vector4Default self15 = ((global::hxmath.math.Vector4Default) (new global::hxmath.math.Vector4Default(self14.x, self14.y, self14.z, self14.w)) );
				double s12 = ( (( ( ( ( self15.x * a12.x ) + ( self15.y * a12.y ) ) + ( self15.z * a12.z ) ) + ( self15.w * a12.w ) )) / (( ( ( ( a12.x * a12.x ) + ( a12.y * a12.y ) ) + ( a12.z * a12.z ) ) + ( a12.w * a12.w ) )) );
				{
					int _g14 = 0;
					while (( _g14 < 4 )) {
						int i12 = _g14++;
						{
							object tmp12 = null;
							switch (i12) {
								case 0:
								{
									tmp12 = a12.x;
									break;
								}
								
								
								case 1:
								{
									tmp12 = a12.y;
									break;
								}
								
								
								case 2:
								{
									tmp12 = a12.z;
									break;
								}
								
								
								case 3:
								{
									tmp12 = a12.w;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double value12 = ((double) (global::haxe.lang.Runtime.toDouble(tmp12)) );
							switch (i12) {
								case 0:
								{
									self15.x = value12;
									break;
								}
								
								
								case 1:
								{
									self15.y = value12;
									break;
								}
								
								
								case 2:
								{
									self15.z = value12;
									break;
								}
								
								
								case 3:
								{
									self15.w = value12;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				{
					self15.x *= s12;
					self15.y *= s12;
					self15.z *= s12;
					self15.w *= s12;
				}
				
				return self15;
			}
		}
		
		
		public global::hxmath.math.Vector4Default v4Mid;
		
	}
}


