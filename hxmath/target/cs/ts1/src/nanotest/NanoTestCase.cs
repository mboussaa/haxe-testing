// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace nanotest {
	public class NanoTestCase : global::haxe.lang.HxObject {
		
		static NanoTestCase() {
			global::nanotest.NanoTestCase.ASSERT_TRUE_ERROR = "expected true but was false";
			global::nanotest.NanoTestCase.ASSERT_FALSE_ERROR = "expected false but was true";
			global::nanotest.NanoTestCase.ASSERT_THROWS_ERROR = "expected to throw exception but didn\'t";
		}
		
		
		public NanoTestCase(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public NanoTestCase(object posInfos) {
			global::nanotest.NanoTestCase.__hx_ctor_nanotest_NanoTestCase(this, posInfos);
		}
		
		
		public static void __hx_ctor_nanotest_NanoTestCase(global::nanotest.NanoTestCase __temp_me41, object posInfos) {
			__temp_me41.posInfos = posInfos;
		}
		
		
		public static string ASSERT_TRUE_ERROR;
		
		public static string ASSERT_FALSE_ERROR;
		
		public static string ASSERT_THROWS_ERROR;
		
		public static string ASSERT_THROWS_ILLEGAL_EXCEPTION(object actual) {
			return global::haxe.lang.Runtime.concat("catched illeagal exception ", global::nanotest.NanoTestCase.format(actual));
		}
		
		
		public static string ASSERT_EQUALS_ERROR(object expected, object actual) {
			return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::nanotest.NanoTestCase.format(expected)), " but was "), global::nanotest.NanoTestCase.format(actual));
		}
		
		
		public static string ASSERT_NOT_EQUALS_ERROR(object expected, object actual) {
			return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected not ", global::nanotest.NanoTestCase.format(expected)), " but was "), global::nanotest.NanoTestCase.format(actual));
		}
		
		
		public static string format(object d) {
			if (( d is string )) {
				return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("\"", global::Std.@string(d)), "\"");
			}
			else {
				return global::haxe.lang.Runtime.concat("", global::Std.@string(d));
			}
			
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::nanotest.NanoTestCase(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::nanotest.NanoTestCase(((object) (arr[0]) ));
		}
		
		
		public object currentResult;
		
		public object posInfos;
		
		public virtual void globalTearDown() {
		}
		
		
		public virtual void globalSetup() {
		}
		
		
		public virtual void tearDown() {
		}
		
		
		public virtual void setup() {
		}
		
		
		public virtual global::Array<object> run(global::haxe.lang.Function print) {
			global::nanotest.NanoTestCase _gthis = this;
			global::Array<object> results = new global::Array<object>(new object[]{});
			global::System.Type cl = global::Type.getClass<object>(((object) (this) ));
			global::Array<object> fields = global::Type.getInstanceFields(cl);
			global::haxe.lang.Function closeResult = new global::nanotest.NanoTestCase_run_43__Fun(results, print, _gthis);
			print.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Class: ", global::Type.getClassName(cl)), " "));
			this.globalSetup();
			if (( this.currentResult != null )) {
				closeResult.__hx_invoke0_o();
			}
			
			{
				int _g = 0;
				while (( _g < fields.length )) {
					string fname = global::haxe.lang.Runtime.toString(fields[_g]);
					 ++ _g;
					object field = global::Reflect.field(this, fname);
					if (( fname.StartsWith("test") && ( field is global::haxe.lang.Function ) )) {
						{
							string __temp_odecl3 = global::Type.getClassName(cl);
							this.currentResult = new global::haxe.lang.DynamicObject(new int[]{100394802, 156956385, 641597244, 1156359202, 1547539107, 1744750013, 1932118984}, new object[]{new global::Array<object>(new object[]{}), fname, false, this, __temp_odecl3, false, false}, new int[]{}, new double[]{});
						}
						
						this.setup();
						try {
							global::Reflect.callMethod(this, field, new global::Array<object>(new object[]{}));
						}
						catch (global::System.Exception __temp_catchallException1){
							global::haxe.lang.Exceptions.exception = __temp_catchallException1;
							object __temp_catchall2 = __temp_catchallException1;
							if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
								__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
							}
							
							{
								object e = __temp_catchall2;
								this.error(e);
							}
							
						}
						
						
						this.tearDown();
						closeResult.__hx_invoke0_o();
					}
					
				}
				
			}
			
			this.globalTearDown();
			print.__hx_invoke1_o(default(double), "\n");
			return results;
		}
		
		
		public virtual global::nanotest.NanoTestAssertResult assertTrue(bool b, object p) {
			if (( b == false )) {
				return this.fail("expected true but was false", p);
			}
			else {
				return this.success(p);
			}
			
		}
		
		
		public virtual global::nanotest.NanoTestAssertResult assertFalse(bool b, object p) {
			if (( b == true )) {
				return this.fail("expected false but was true", p);
			}
			else {
				return this.success(p);
			}
			
		}
		
		
		public virtual global::nanotest.NanoTestAssertResult assertEquals<T>(T expected, T actual, object p) {
			if (global::Reflect.isEnumValue(expected)) {
				if ( ! (global::Type.enumEq<T>(global::haxe.lang.Runtime.genericCast<T>(actual), global::haxe.lang.Runtime.genericCast<T>(expected))) ) {
					return this.fail(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::nanotest.NanoTestCase.format(expected)), " but was "), global::nanotest.NanoTestCase.format(actual)), p);
				}
				else {
					return this.success(p);
				}
				
			}
			else if (( ! (global::haxe.lang.Runtime.eq(actual, expected)) )) {
				return this.fail(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::nanotest.NanoTestCase.format(expected)), " but was "), global::nanotest.NanoTestCase.format(actual)), p);
			}
			else {
				return this.success(p);
			}
			
		}
		
		
		public virtual global::nanotest.NanoTestAssertResult assertNotEquals<T>(T notExpected, T actual, object p) {
			if (global::Reflect.isEnumValue(notExpected)) {
				if (global::Type.enumEq<T>(global::haxe.lang.Runtime.genericCast<T>(actual), global::haxe.lang.Runtime.genericCast<T>(notExpected))) {
					return this.fail(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected not ", global::nanotest.NanoTestCase.format(notExpected)), " but was "), global::nanotest.NanoTestCase.format(actual)), p);
				}
				else {
					return this.success(p);
				}
				
			}
			else if (global::haxe.lang.Runtime.eq(actual, notExpected)) {
				return this.fail(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected not ", global::nanotest.NanoTestCase.format(notExpected)), " but was "), global::nanotest.NanoTestCase.format(actual)), p);
			}
			else {
				return this.success(p);
			}
			
		}
		
		
		public virtual global::nanotest.NanoTestAssertResult assertThrows(global::haxe.lang.Function func, global::haxe.lang.Function isSuccess, object p) {
			try {
				func.__hx_invoke0_o();
			}
			catch (global::System.Exception __temp_catchallException1){
				global::haxe.lang.Exceptions.exception = __temp_catchallException1;
				object __temp_catchall2 = __temp_catchallException1;
				if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
					__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
				}
				
				{
					object d = __temp_catchall2;
					if (( ( isSuccess == null ) || global::haxe.lang.Runtime.toBool(isSuccess.__hx_invoke1_o(default(double), d)) )) {
						return this.success(p);
					}
					else {
						global::nanotest.NanoTestAssertResult f = this.fail(global::haxe.lang.Runtime.concat("catched illeagal exception ", global::nanotest.NanoTestCase.format(d)), p);
						this.error(d);
						return f;
					}
					
				}
				
			}
			
			
			return this.fail("expected to throw exception but didn\'t", p);
		}
		
		
		public virtual global::nanotest.NanoTestAssertResult fail(string message, object p) {
			if (( this.currentResult == null )) {
				this._openPreprocessResult();
			}
			
			global::haxe.lang.Runtime.setField(this.currentResult, "failed", 1744750013, true);
			int i = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(this.currentResult, "status", 100394802, true)) ))) ).length;
			((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(this.currentResult, "status", 100394802, true)) ))) ).push(global::nanotest.NanoTestStatus.FAIL(message, p));
			return new global::nanotest.NanoTestAssertResult(this.currentResult, i);
		}
		
		
		public virtual global::nanotest.NanoTestAssertResult success(object p) {
			if (( this.currentResult == null )) {
				this._openPreprocessResult();
			}
			
			int i = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(this.currentResult, "status", 100394802, true)) ))) ).length;
			((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(this.currentResult, "status", 100394802, true)) ))) ).push(global::nanotest.NanoTestStatus.SUCCESS(p));
			return new global::nanotest.NanoTestAssertResult(this.currentResult, i);
		}
		
		
		public virtual global::nanotest.NanoTestAssertResult error(object e) {
			if (( this.currentResult == null )) {
				this._openPreprocessResult();
			}
			
			global::haxe.lang.Runtime.setField(this.currentResult, "failed", 1744750013, true);
			global::haxe.lang.Runtime.setField(this.currentResult, "error", 1932118984, true);
			string message = global::Std.@string(e);
			int i = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(this.currentResult, "status", 100394802, true)) ))) ).length;
			((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(this.currentResult, "status", 100394802, true)) ))) ).push(global::nanotest.NanoTestStatus.ERROR(message, global::haxe.CallStack.exceptionStack()));
			return new global::nanotest.NanoTestAssertResult(this.currentResult, i);
		}
		
		
		public virtual void _openPreprocessResult() {
			{
				string __temp_odecl1 = global::Type.getClassName(global::Type.getClass<object>(((object) (this) )));
				this.currentResult = new global::haxe.lang.DynamicObject(new int[]{100394802, 156956385, 641597244, 1156359202, 1547539107, 1744750013, 1932118984}, new object[]{new global::Array<object>(new object[]{}), null, true, this, __temp_odecl1, false, false}, new int[]{}, new double[]{});
			}
			
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1512997393:
					{
						this.posInfos = ((object) (@value) );
						return @value;
					}
					
					
					case 1809902070:
					{
						this.currentResult = ((object) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1512997393:
					{
						this.posInfos = ((object) (@value) );
						return @value;
					}
					
					
					case 1809902070:
					{
						this.currentResult = ((object) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1417420914:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "_openPreprocessResult", 1417420914)) );
					}
					
					
					case 1932118984:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "error", 1932118984)) );
					}
					
					
					case 944645571:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "success", 944645571)) );
					}
					
					
					case 1135983070:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "fail", 1135983070)) );
					}
					
					
					case 2074818547:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "assertThrows", 2074818547)) );
					}
					
					
					case 279665676:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "assertNotEquals", 279665676)) );
					}
					
					
					case 752681381:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "assertEquals", 752681381)) );
					}
					
					
					case 2105872637:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "assertFalse", 2105872637)) );
					}
					
					
					case 1330771252:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "assertTrue", 1330771252)) );
					}
					
					
					case 5695307:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "run", 5695307)) );
					}
					
					
					case 2049945213:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "setup", 2049945213)) );
					}
					
					
					case 1818678820:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "tearDown", 1818678820)) );
					}
					
					
					case 1382942234:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "globalSetup", 1382942234)) );
					}
					
					
					case 943677095:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "globalTearDown", 943677095)) );
					}
					
					
					case 1512997393:
					{
						return this.posInfos;
					}
					
					
					case 1809902070:
					{
						return this.currentResult;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1512997393:
					{
						return ((double) (global::haxe.lang.Runtime.toDouble(this.posInfos)) );
					}
					
					
					case 1809902070:
					{
						return ((double) (global::haxe.lang.Runtime.toDouble(this.currentResult)) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1417420914:
					{
						this._openPreprocessResult();
						break;
					}
					
					
					case 1932118984:
					{
						return this.error(dynargs[0]);
					}
					
					
					case 944645571:
					{
						return this.success(dynargs[0]);
					}
					
					
					case 1135983070:
					{
						return this.fail(global::haxe.lang.Runtime.toString(dynargs[0]), dynargs[1]);
					}
					
					
					case 2074818547:
					{
						return this.assertThrows(((global::haxe.lang.Function) (dynargs[0]) ), ((global::haxe.lang.Function) (dynargs[1]) ), dynargs[2]);
					}
					
					
					case 279665676:
					{
						return this.assertNotEquals<object>(((object) (dynargs[0]) ), ((object) (dynargs[1]) ), ((object) (dynargs[2]) ));
					}
					
					
					case 752681381:
					{
						return this.assertEquals<object>(((object) (dynargs[0]) ), ((object) (dynargs[1]) ), ((object) (dynargs[2]) ));
					}
					
					
					case 2105872637:
					{
						return this.assertFalse(global::haxe.lang.Runtime.toBool(dynargs[0]), dynargs[1]);
					}
					
					
					case 1330771252:
					{
						return this.assertTrue(global::haxe.lang.Runtime.toBool(dynargs[0]), dynargs[1]);
					}
					
					
					case 5695307:
					{
						return this.run(((global::haxe.lang.Function) (dynargs[0]) ));
					}
					
					
					case 2049945213:
					{
						this.setup();
						break;
					}
					
					
					case 1818678820:
					{
						this.tearDown();
						break;
					}
					
					
					case 1382942234:
					{
						this.globalSetup();
						break;
					}
					
					
					case 943677095:
					{
						this.globalTearDown();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("posInfos");
			baseArr.push("currentResult");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace nanotest {
	public class NanoTestCase_run_43__Fun : global::haxe.lang.Function {
		
		public NanoTestCase_run_43__Fun(global::Array<object> results, global::haxe.lang.Function print, global::nanotest.NanoTestCase _gthis) : base(0, 0) {
			this.results = results;
			this.print = print;
			this._gthis = _gthis;
		}
		
		
		public override object __hx_invoke0_o() {
			if (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(this._gthis.currentResult, "error", 1932118984, true))) {
				this.print.__hx_invoke1_o(default(double), "E");
			}
			else if (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(this._gthis.currentResult, "failed", 1744750013, true))) {
				this.print.__hx_invoke1_o(default(double), "F");
			}
			else {
				this.print.__hx_invoke1_o(default(double), ".");
			}
			
			this.results.push(this._gthis.currentResult);
			this._gthis.currentResult = null;
			return null;
		}
		
		
		public global::Array<object> results;
		
		public global::haxe.lang.Function print;
		
		public global::nanotest.NanoTestCase _gthis;
		
	}
}


