// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hxmath.math {
	public class IntVector2Default : global::haxe.lang.HxObject {
		
		public IntVector2Default(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public IntVector2Default(int x, int y) {
			global::hxmath.math.IntVector2Default.__hx_ctor_hxmath_math_IntVector2Default(this, x, y);
		}
		
		
		public static void __hx_ctor_hxmath_math_IntVector2Default(global::hxmath.math.IntVector2Default __temp_me31, int x, int y) {
			__temp_me31.x = x;
			__temp_me31.y = y;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::hxmath.math.IntVector2Default(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			unchecked {
				return new global::hxmath.math.IntVector2Default(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ), ((int) (global::haxe.lang.Runtime.toInt(arr[1])) ));
			}
		}
		
		
		public int x;
		
		public int y;
		
		public virtual string toString() {
			return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("(", global::haxe.lang.Runtime.toString(this.x)), ", "), global::haxe.lang.Runtime.toString(this.y)), ")");
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 121:
					{
						this.y = ((int) (@value) );
						return @value;
					}
					
					
					case 120:
					{
						this.x = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 121:
					{
						this.y = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 120:
					{
						this.x = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
					}
					
					
					case 121:
					{
						return this.y;
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 121:
					{
						return ((double) (this.y) );
					}
					
					
					case 120:
					{
						return ((double) (this.x) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return this.toString();
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("y");
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
		public override string ToString(){
			return this.toString();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hxmath.math._IntVector2 {
	public sealed class IntVector2_Impl_ {
		
		static IntVector2_Impl_() {
			unchecked {
				global::hxmath.math._IntVector2.IntVector2_Impl_.elementCount = 2;
			}
		}
		
		
		public static int elementCount;
		
		
		
		
		
		
		
		
		
		
		
		
		
		public static global::hxmath.math.IntVector2Default _new(int x, int y) {
			return ((global::hxmath.math.IntVector2Default) (new global::hxmath.math.IntVector2Default(x, y)) );
		}
		
		
		public static global::hxmath.math.IntVector2Default fromArray(global::Array<int> rawData) {
			unchecked {
				if (( rawData.length != 2 )) {
					throw global::haxe.lang.HaxeException.wrap("Invalid rawData.");
				}
				
				return global::hxmath.math._IntVector2.IntVector2_Impl_._new(rawData[0], rawData[1]);
			}
		}
		
		
		public static global::hxmath.math.Vector2Default toVector2(global::hxmath.math.IntVector2Default this1) {
			global::hxmath.math.IntVector2Default self = this1;
			return ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(((double) (self.x) ), ((double) (self.y) ))) );
		}
		
		
		public static int dot(global::hxmath.math.IntVector2Default a, global::hxmath.math.IntVector2Default b) {
			return ( ( a.x * b.x ) + ( a.y * b.y ) );
		}
		
		
		public static global::hxmath.math.IntVector2Default multiply(global::hxmath.math.IntVector2Default a, int s) {
			global::hxmath.math.IntVector2Default self = ((global::hxmath.math.IntVector2Default) (global::hxmath.math._IntVector2.IntVector2_Impl_._new(a.x, a.y)) );
			self.x *= s;
			self.y *= s;
			return self;
		}
		
		
		public static global::hxmath.math.IntVector2Default @add(global::hxmath.math.IntVector2Default a, global::hxmath.math.IntVector2Default b) {
			global::hxmath.math.IntVector2Default self = ((global::hxmath.math.IntVector2Default) (global::hxmath.math._IntVector2.IntVector2_Impl_._new(a.x, a.y)) );
			self.x += b.x;
			self.y += b.y;
			return self;
		}
		
		
		public static global::hxmath.math.IntVector2Default subtract(global::hxmath.math.IntVector2Default a, global::hxmath.math.IntVector2Default b) {
			global::hxmath.math.IntVector2Default self = ((global::hxmath.math.IntVector2Default) (global::hxmath.math._IntVector2.IntVector2_Impl_._new(a.x, a.y)) );
			self.x -= b.x;
			self.y -= b.y;
			return self;
		}
		
		
		public static global::hxmath.math.IntVector2Default negate(global::hxmath.math.IntVector2Default a) {
			return global::hxmath.math._IntVector2.IntVector2_Impl_._new( - (a.x) ,  - (a.y) );
		}
		
		
		public static bool @equals(global::hxmath.math.IntVector2Default a, global::hxmath.math.IntVector2Default b) {
			if ( ! ((( ( a == null ) && ( b == null ) ))) ) {
				if (( ( ( a != null ) && ( b != null ) ) && ( a.x == b.x ) )) {
					return ( a.y == b.y );
				}
				else {
					return false;
				}
				
			}
			else {
				return true;
			}
			
		}
		
		
		public static global::hxmath.math.IntVector2Default max(global::hxmath.math.IntVector2Default a, global::hxmath.math.IntVector2Default b) {
			global::hxmath.math.IntVector2Default self = ((global::hxmath.math.IntVector2Default) (global::hxmath.math._IntVector2.IntVector2_Impl_._new(a.x, a.y)) );
			int a1 = self.x;
			int b1 = b.x;
			self.x = ( (( b1 > a1 )) ? (b1) : (a1) );
			int a2 = self.y;
			int b2 = b.y;
			self.y = ( (( b2 > a2 )) ? (b2) : (a2) );
			return self;
		}
		
		
		public static global::hxmath.math.IntVector2Default min(global::hxmath.math.IntVector2Default a, global::hxmath.math.IntVector2Default b) {
			global::hxmath.math.IntVector2Default self = ((global::hxmath.math.IntVector2Default) (global::hxmath.math._IntVector2.IntVector2_Impl_._new(a.x, a.y)) );
			int a1 = self.x;
			int b1 = b.x;
			self.x = ( (( b1 < a1 )) ? (b1) : (a1) );
			int a2 = self.y;
			int b2 = b.y;
			self.y = ( (( b2 < a2 )) ? (b2) : (a2) );
			return self;
		}
		
		
		public static global::hxmath.math.IntVector2Default @set(global::hxmath.math.IntVector2Default this1, int x, int y) {
			global::hxmath.math.IntVector2Default self = this1;
			self.x = x;
			self.y = y;
			return self;
		}
		
		
		public static global::hxmath.math.IntVector2Default multiplyWith(global::hxmath.math.IntVector2Default this1, int s) {
			global::hxmath.math.IntVector2Default self = this1;
			self.x *= s;
			self.y *= s;
			return self;
		}
		
		
		public static global::hxmath.math.IntVector2Default addWith(global::hxmath.math.IntVector2Default this1, global::hxmath.math.IntVector2Default a) {
			global::hxmath.math.IntVector2Default self = this1;
			self.x += a.x;
			self.y += a.y;
			return self;
		}
		
		
		public static global::hxmath.math.IntVector2Default subtractWith(global::hxmath.math.IntVector2Default this1, global::hxmath.math.IntVector2Default a) {
			global::hxmath.math.IntVector2Default self = this1;
			self.x -= a.x;
			self.y -= a.y;
			return self;
		}
		
		
		public static global::hxmath.math.IntVector2Default maxWith(global::hxmath.math.IntVector2Default this1, global::hxmath.math.IntVector2Default a) {
			global::hxmath.math.IntVector2Default self = this1;
			int a1 = self.x;
			int b = a.x;
			self.x = ( (( b > a1 )) ? (b) : (a1) );
			int a2 = self.y;
			int b1 = a.y;
			self.y = ( (( b1 > a2 )) ? (b1) : (a2) );
			return self;
		}
		
		
		public static global::hxmath.math.IntVector2Default minWith(global::hxmath.math.IntVector2Default this1, global::hxmath.math.IntVector2Default a) {
			global::hxmath.math.IntVector2Default self = this1;
			int a1 = self.x;
			int b = a.x;
			self.x = ( (( b < a1 )) ? (b) : (a1) );
			int a2 = self.y;
			int b1 = a.y;
			self.y = ( (( b1 < a2 )) ? (b1) : (a2) );
			return self;
		}
		
		
		public static void copyTo(global::hxmath.math.IntVector2Default this1, global::hxmath.math.IntVector2Default target) {
			unchecked {
				global::hxmath.math.IntVector2Default self = this1;
				{
					int _g = 0;
					while (( _g < 2 )) {
						int i = _g++;
						{
							object tmp = null;
							switch (i) {
								case 0:
								{
									tmp = self.x;
									break;
								}
								
								
								case 1:
								{
									tmp = self.y;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							int @value = ((int) (global::haxe.lang.Runtime.toInt(tmp)) );
							switch (i) {
								case 0:
								{
									target.x = @value;
									break;
								}
								
								
								case 1:
								{
									target.y = @value;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
			}
		}
		
		
		public static global::hxmath.math.IntVector2Default clone(global::hxmath.math.IntVector2Default this1) {
			global::hxmath.math.IntVector2Default self = this1;
			return global::hxmath.math._IntVector2.IntVector2_Impl_._new(self.x, self.y);
		}
		
		
		public static int getArrayElement(global::hxmath.math.IntVector2Default this1, int i) {
			unchecked {
				global::hxmath.math.IntVector2Default self = this1;
				switch (i) {
					case 0:
					{
						return self.x;
					}
					
					
					case 1:
					{
						return self.y;
					}
					
					
					default:
					{
						throw global::haxe.lang.HaxeException.wrap("Invalid element");
					}
					
				}
				
			}
		}
		
		
		public static int setArrayElement(global::hxmath.math.IntVector2Default this1, int i, int @value) {
			unchecked {
				global::hxmath.math.IntVector2Default self = this1;
				switch (i) {
					case 0:
					{
						return self.x = @value;
					}
					
					
					case 1:
					{
						return self.y = @value;
					}
					
					
					default:
					{
						throw global::haxe.lang.HaxeException.wrap("Invalid element");
					}
					
				}
				
			}
		}
		
		
		public static global::hxmath.math.IntVector2Default applyNegate(global::hxmath.math.IntVector2Default this1) {
			global::hxmath.math.IntVector2Default self = this1;
			self.x =  - (self.x) ;
			self.y =  - (self.y) ;
			return self;
		}
		
		
		public static global::hxmath.math.IntVector2Default applyScalarFunc(global::hxmath.math.IntVector2Default this1, global::haxe.lang.Function func) {
			unchecked {
				global::hxmath.math.IntVector2Default self = this1;
				{
					int _g = 0;
					while (( _g < 2 )) {
						int i = _g++;
						{
							object tmp = null;
							switch (i) {
								case 0:
								{
									tmp = self.x;
									break;
								}
								
								
								case 1:
								{
									tmp = self.y;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							int @value = ((int) (func.__hx_invoke1_f(((double) (((int) (global::haxe.lang.Runtime.toInt(tmp)) )) ), global::haxe.lang.Runtime.undefined)) );
							switch (i) {
								case 0:
								{
									self.x = @value;
									break;
								}
								
								
								case 1:
								{
									self.y = @value;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				return self;
			}
		}
		
		
		public static global::hxmath.math.IntVector2Default rotateLeft(global::hxmath.math.IntVector2Default this1) {
			global::hxmath.math.IntVector2Default self = this1;
			int newX =  - (self.y) ;
			self.y = self.x;
			self.x = newX;
			return self;
		}
		
		
		public static global::hxmath.math.IntVector2Default rotateRight(global::hxmath.math.IntVector2Default this1) {
			global::hxmath.math.IntVector2Default self = this1;
			int newX = self.y;
			self.y =  - (self.x) ;
			self.x = newX;
			return self;
		}
		
		
		public static global::hxmath.math.IntVector2Default get_zero() {
			return global::hxmath.math._IntVector2.IntVector2_Impl_._new(0, 0);
		}
		
		
		public static global::hxmath.math.IntVector2Default get_xAxis() {
			unchecked {
				return global::hxmath.math._IntVector2.IntVector2_Impl_._new(1, 0);
			}
		}
		
		
		public static global::hxmath.math.IntVector2Default get_yAxis() {
			unchecked {
				return global::hxmath.math._IntVector2.IntVector2_Impl_._new(0, 1);
			}
		}
		
		
		public static int get_lengthSq(global::hxmath.math.IntVector2Default this1) {
			global::hxmath.math.IntVector2Default self = this1;
			return ( ( self.x * self.x ) + ( self.y * self.y ) );
		}
		
		
		public static global::hxmath.math.IntVector2Default get_rotatedLeft(global::hxmath.math.IntVector2Default this1) {
			global::hxmath.math.IntVector2Default self = this1;
			global::hxmath.math.IntVector2Default self1 = ((global::hxmath.math.IntVector2Default) (global::hxmath.math._IntVector2.IntVector2_Impl_._new(self.x, self.y)) );
			int newX =  - (self1.y) ;
			self1.y = self1.x;
			self1.x = newX;
			return self1;
		}
		
		
		public static global::hxmath.math.IntVector2Default get_rotatedRight(global::hxmath.math.IntVector2Default this1) {
			global::hxmath.math.IntVector2Default self = this1;
			global::hxmath.math.IntVector2Default self1 = ((global::hxmath.math.IntVector2Default) (global::hxmath.math._IntVector2.IntVector2_Impl_._new(self.x, self.y)) );
			int newX = self1.y;
			self1.y =  - (self1.x) ;
			self1.x = newX;
			return self1;
		}
		
		
	}
}


