// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace test {
	public class TestMathUtil : global::test.MathTestCase {
		
		public TestMathUtil(global::haxe.lang.EmptyObject empty) : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
		}
		
		
		public TestMathUtil(object posInfos) : base(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) )) {
			global::test.TestMathUtil.__hx_ctor_test_TestMathUtil(this, posInfos);
		}
		
		
		public static void __hx_ctor_test_TestMathUtil(global::test.TestMathUtil __temp_me56, object posInfos) {
			global::test.MathTestCase.__hx_ctor_test_MathTestCase(__temp_me56, posInfos);
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::test.TestMathUtil(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::test.TestMathUtil(((object) (arr[0]) ));
		}
		
		
		public virtual void testOrient2D() {
			unchecked {
				global::hxmath.math.Vector2Default a = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 0.0)) );
				global::hxmath.math.Vector2Default b = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, 1.0)) );
				global::hxmath.math.Vector2Default c = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(-0.5, 0.5)) );
				global::hxmath.math.Vector2Default d = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.5, 0.5)) );
				global::hxmath.math.Vector2Default e = ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(0.0, -1.0)) );
				double result = ( ( (( a.x - c.x )) * (( b.y - c.y )) ) - ( (( a.y - c.y )) * (( b.x - c.x )) ) );
				this.assertEquals<int>(((int) (( (( result > 0 )) ? (((int) (1) )) : (( (( result < 0 )) ? (((int) (-1) )) : (((int) (0) )) )) )) ), ((int) (1) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOrient2D", "test.TestMathUtil", "TestMathUtil.hx"}, new int[]{1981972957}, new double[]{((double) (22) )})) ));
				double result1 = ( ( (( a.x - d.x )) * (( b.y - d.y )) ) - ( (( a.y - d.y )) * (( b.x - d.x )) ) );
				this.assertEquals<int>(((int) (( (( result1 > 0 )) ? (((int) (1) )) : (( (( result1 < 0 )) ? (((int) (-1) )) : (((int) (0) )) )) )) ), ((int) (-1) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOrient2D", "test.TestMathUtil", "TestMathUtil.hx"}, new int[]{1981972957}, new double[]{((double) (23) )})) ));
				double result2 = ( ( (( a.x - e.x )) * (( b.y - e.y )) ) - ( (( a.y - e.y )) * (( b.x - e.x )) ) );
				this.assertEquals<int>(((int) (( (( result2 > 0 )) ? (((int) (1) )) : (( (( result2 < 0 )) ? (((int) (-1) )) : (((int) (0) )) )) )) ), ((int) (0) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOrient2D", "test.TestMathUtil", "TestMathUtil.hx"}, new int[]{1981972957}, new double[]{((double) (24) )})) ));
			}
		}
		
		
		public virtual void testWrapAngle() {
			unchecked {
				this.assertEquals<double>(((double) (0.0) ), ((double) (( 0.0 % 360.0 )) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testWrapAngle", "test.TestMathUtil", "TestMathUtil.hx"}, new int[]{1981972957}, new double[]{((double) (29) )})) ));
				this.assertEquals<double>(((double) (0.0) ), ((double) (( 360.0 % 360.0 )) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testWrapAngle", "test.TestMathUtil", "TestMathUtil.hx"}, new int[]{1981972957}, new double[]{((double) (30) )})) ));
				this.assertEquals<double>(((double) (359.999999) ), ((double) (( 359.999999 % 360 )) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testWrapAngle", "test.TestMathUtil", "TestMathUtil.hx"}, new int[]{1981972957}, new double[]{((double) (31) )})) ));
				this.assertEquals<double>(((double) (189.0) ), ((double) (( 360.0 - ( 531.0 % 360.0 ) )) ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testWrapAngle", "test.TestMathUtil", "TestMathUtil.hx"}, new int[]{1981972957}, new double[]{((double) (34) )})) ));
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 2039692023:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testWrapAngle", 2039692023)) );
					}
					
					
					case 812951369:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testOrient2D", 812951369)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 2039692023:
					{
						this.testWrapAngle();
						break;
					}
					
					
					case 812951369:
					{
						this.testOrient2D();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
	}
}


