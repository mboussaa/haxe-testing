// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hxmath.math._ShortVector2 {
	public sealed class ShortVector2_Impl_ {
		
		static ShortVector2_Impl_() {
			unchecked {
				global::hxmath.math._ShortVector2.ShortVector2_Impl_.elementCount = 2;
				global::hxmath.math._ShortVector2.ShortVector2_Impl_.bitsPerField = 16;
				global::hxmath.math._ShortVector2.ShortVector2_Impl_.fieldMax = 65535;
			}
		}
		
		
		public static int elementCount;
		
		public static int bitsPerField;
		
		public static int fieldMax;
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		public static int _new(int x, int y) {
			unchecked {
				int this1 = default(int);
				if ( ! ((( ( ( ( x >= 0 ) && ( y >= 0 ) ) && ( x <= 65535 ) ) && ( y <= 65535 ) ))) ) {
					throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Specified (x=", global::haxe.lang.Runtime.toString(x)), ", y="), global::haxe.lang.Runtime.toString(y)), ") fields not in the range [0, "), global::haxe.lang.Runtime.toString(65535)), "]"));
				}
				
				this1 = ( ( y << 16 ) | x );
				return ((int) (this1) );
			}
		}
		
		
		public static int fromArray(global::Array<int> rawData) {
			unchecked {
				if (( rawData.length != 2 )) {
					throw global::haxe.lang.HaxeException.wrap("Invalid rawData.");
				}
				
				return global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(rawData[0], rawData[1]);
			}
		}
		
		
		public static int dot(int a, int b) {
			unchecked {
				return ( ( (( ((int) (a) ) & 65535 )) * (( ((int) (b) ) & 65535 )) ) + ( (( ( ((int) (a) ) >> 16 ) & 65535 )) * (( ( ((int) (b) ) >> 16 ) & 65535 )) ) );
			}
		}
		
		
		public static int multiply(int a, int s) {
			unchecked {
				return global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(( s * (( ((int) (a) ) & 65535 )) ), ( s * (( ( ((int) (a) ) >> 16 ) & 65535 )) ));
			}
		}
		
		
		public static int @add(int a, int b) {
			unchecked {
				return global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(( (( ((int) (a) ) & 65535 )) + (( ((int) (b) ) & 65535 )) ), ( (( ( ((int) (a) ) >> 16 ) & 65535 )) + (( ( ((int) (b) ) >> 16 ) & 65535 )) ));
			}
		}
		
		
		public static int subtract(int a, int b) {
			unchecked {
				return global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(( (( ((int) (a) ) & 65535 )) - (( ((int) (b) ) & 65535 )) ), ( (( ( ((int) (a) ) >> 16 ) & 65535 )) - (( ( ((int) (b) ) >> 16 ) & 65535 )) ));
			}
		}
		
		
		public static int negate(int a) {
			unchecked {
				return global::hxmath.math._ShortVector2.ShortVector2_Impl_._new( - ((( ((int) (a) ) & 65535 ))) ,  - ((( ( ((int) (a) ) >> 16 ) & 65535 ))) );
			}
		}
		
		
		public static int max(int a, int b) {
			unchecked {
				int a1 = ( ((int) (a) ) & 65535 );
				int b1 = ( ((int) (b) ) & 65535 );
				int tmp = ( (( b1 > a1 )) ? (b1) : (a1) );
				int a2 = ( ( ((int) (a) ) >> 16 ) & 65535 );
				int b2 = ( ( ((int) (b) ) >> 16 ) & 65535 );
				return global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(tmp, ( (( b2 > a2 )) ? (b2) : (a2) ));
			}
		}
		
		
		public static int min(int a, int b) {
			unchecked {
				int a1 = ( ((int) (a) ) & 65535 );
				int b1 = ( ((int) (b) ) & 65535 );
				int tmp = ( (( b1 < a1 )) ? (b1) : (a1) );
				int a2 = ( ( ((int) (a) ) >> 16 ) & 65535 );
				int b2 = ( ( ((int) (b) ) >> 16 ) & 65535 );
				return global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(tmp, ( (( b2 < a2 )) ? (b2) : (a2) ));
			}
		}
		
		
		public static int getArrayElement(int this1, int i) {
			unchecked {
				int self = this1;
				switch (i) {
					case 0:
					{
						return ( ((int) (self) ) & 65535 );
					}
					
					
					case 1:
					{
						return ( ( ((int) (self) ) >> 16 ) & 65535 );
					}
					
					
					default:
					{
						throw global::haxe.lang.HaxeException.wrap("Invalid element");
					}
					
				}
				
			}
		}
		
		
		public static global::hxmath.math.Vector2Default toVector2(int this1) {
			unchecked {
				int self = this1;
				return ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(((double) (( ((int) (self) ) & 65535 )) ), ((double) (( ( ((int) (self) ) >> 16 ) & 65535 )) ))) );
			}
		}
		
		
		public static bool indexInBounds(int x, int y) {
			unchecked {
				if (( ( ( x >= 0 ) && ( y >= 0 ) ) && ( x <= 65535 ) )) {
					return ( y <= 65535 );
				}
				else {
					return false;
				}
				
			}
		}
		
		
		public static int get_zero() {
			return global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(0, 0);
		}
		
		
		public static int get_xAxis() {
			unchecked {
				return global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(1, 0);
			}
		}
		
		
		public static int get_yAxis() {
			unchecked {
				return global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(0, 1);
			}
		}
		
		
		public static int get_x(int this1) {
			unchecked {
				return ( this1 & 65535 );
			}
		}
		
		
		public static int get_y(int this1) {
			unchecked {
				return ( ( this1 >> 16 ) & 65535 );
			}
		}
		
		
		public static int get_lengthSq(int this1) {
			unchecked {
				int self = this1;
				return ( ( (( ((int) (self) ) & 65535 )) * (( ((int) (self) ) & 65535 )) ) + ( (( ( ((int) (self) ) >> 16 ) & 65535 )) * (( ( ((int) (self) ) >> 16 ) & 65535 )) ) );
			}
		}
		
		
		public static int get_rotatedLeft(int this1) {
			unchecked {
				return global::hxmath.math._ShortVector2.ShortVector2_Impl_._new( - ((( ( ((int) (this1) ) >> 16 ) & 65535 ))) , ( ((int) (this1) ) & 65535 ));
			}
		}
		
		
		public static int get_rotatedRight(int this1) {
			unchecked {
				return global::hxmath.math._ShortVector2.ShortVector2_Impl_._new(( ( ((int) (this1) ) >> 16 ) & 65535 ),  - ((( ((int) (this1) ) & 65535 ))) );
			}
		}
		
		
	}
}


