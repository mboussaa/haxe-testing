// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hxmath.math {
	public class Matrix2x2Default : global::haxe.lang.HxObject {
		
		public Matrix2x2Default(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Matrix2x2Default(double a, double b, double c, double d) {
			global::hxmath.math.Matrix2x2Default.__hx_ctor_hxmath_math_Matrix2x2Default(this, a, b, c, d);
		}
		
		
		public static void __hx_ctor_hxmath_math_Matrix2x2Default(global::hxmath.math.Matrix2x2Default __temp_me28, double a, double b, double c, double d) {
			__temp_me28.a = a;
			__temp_me28.b = b;
			__temp_me28.c = c;
			__temp_me28.d = d;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::hxmath.math.Matrix2x2Default(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			unchecked {
				return new global::hxmath.math.Matrix2x2Default(((double) (global::haxe.lang.Runtime.toDouble(arr[0])) ), ((double) (global::haxe.lang.Runtime.toDouble(arr[1])) ), ((double) (global::haxe.lang.Runtime.toDouble(arr[2])) ), ((double) (global::haxe.lang.Runtime.toDouble(arr[3])) ));
			}
		}
		
		
		public double a;
		
		public double b;
		
		public double c;
		
		public double d;
		
		public virtual string toString() {
			return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("[a: ", global::haxe.lang.Runtime.toString(this.a)), ", b: "), global::haxe.lang.Runtime.toString(this.b)), ", c: "), global::haxe.lang.Runtime.toString(this.c)), ", d: "), global::haxe.lang.Runtime.toString(this.d)), "]");
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 100:
					{
						this.d = ((double) (@value) );
						return @value;
					}
					
					
					case 99:
					{
						this.c = ((double) (@value) );
						return @value;
					}
					
					
					case 98:
					{
						this.b = ((double) (@value) );
						return @value;
					}
					
					
					case 97:
					{
						this.a = ((double) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 100:
					{
						this.d = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 99:
					{
						this.c = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 98:
					{
						this.b = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 97:
					{
						this.a = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
					}
					
					
					case 100:
					{
						return this.d;
					}
					
					
					case 99:
					{
						return this.c;
					}
					
					
					case 98:
					{
						return this.b;
					}
					
					
					case 97:
					{
						return this.a;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 100:
					{
						return this.d;
					}
					
					
					case 99:
					{
						return this.c;
					}
					
					
					case 98:
					{
						return this.b;
					}
					
					
					case 97:
					{
						return this.a;
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return this.toString();
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("d");
			baseArr.push("c");
			baseArr.push("b");
			baseArr.push("a");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
		public override string ToString(){
			return this.toString();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hxmath.math._Matrix2x2 {
	public sealed class Matrix2x2_Impl_ {
		
		static Matrix2x2_Impl_() {
			unchecked {
				global::hxmath.math._Matrix2x2.Matrix2x2_Impl_.elementCount = 4;
			}
		}
		
		
		public static int elementCount;
		
		
		
		
		
		
		
		
		
		public static global::hxmath.math.Matrix2x2Default _new(double a, double b, double c, double d) {
			return ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(a, b, c, d)) );
		}
		
		
		public static global::hxmath.math.Matrix2x2Default fromArray(global::Array<double> rawData) {
			unchecked {
				if (( rawData.length != 4 )) {
					throw global::haxe.lang.HaxeException.wrap("Invalid rawData.");
				}
				
				return ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(rawData[0], rawData[1], rawData[2], rawData[3])) );
			}
		}
		
		
		public static global::hxmath.math.Matrix2x2Default fromMatrix2x2Shape(global::hxmath.math.Matrix2x2Default other) {
			return ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(other.a, other.b, other.c, other.d)) );
		}
		
		
		public static global::hxmath.math.Matrix2x2Default multiplyScalar(double s, global::hxmath.math.Matrix2x2Default m) {
			return ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(( s * m.a ), ( s * m.b ), ( s * m.c ), ( s * m.d ))) );
		}
		
		
		public static global::hxmath.math.Vector2Default multiplyVector(global::hxmath.math.Matrix2x2Default m, global::hxmath.math.Vector2Default v) {
			return ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( m.a * v.x ) + ( m.b * v.y ) ), ( ( m.c * v.x ) + ( m.d * v.y ) ))) );
		}
		
		
		public static global::hxmath.math.Matrix2x2Default multiply(global::hxmath.math.Matrix2x2Default m, global::hxmath.math.Matrix2x2Default n) {
			return ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(( ( m.a * n.a ) + ( m.b * n.c ) ), ( ( m.a * n.b ) + ( m.b * n.d ) ), ( ( m.c * n.a ) + ( m.d * n.c ) ), ( ( m.c * n.b ) + ( m.d * n.d ) ))) );
		}
		
		
		public static global::hxmath.math.Matrix2x2Default @add(global::hxmath.math.Matrix2x2Default m, global::hxmath.math.Matrix2x2Default n) {
			global::hxmath.math.Matrix2x2Default self = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(m.a, m.b, m.c, m.d)) );
			self.a += n.a;
			self.b += n.b;
			self.c += n.c;
			self.d += n.d;
			return self;
		}
		
		
		public static global::hxmath.math.Matrix2x2Default subtract(global::hxmath.math.Matrix2x2Default m, global::hxmath.math.Matrix2x2Default n) {
			global::hxmath.math.Matrix2x2Default self = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(m.a, m.b, m.c, m.d)) );
			self.a -= n.a;
			self.b -= n.b;
			self.c -= n.c;
			self.d -= n.d;
			return self;
		}
		
		
		public static global::hxmath.math.Matrix2x2Default negate(global::hxmath.math.Matrix2x2Default m) {
			return ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default( - (m.a) ,  - (m.b) ,  - (m.c) ,  - (m.d) )) );
		}
		
		
		public static bool @equals(global::hxmath.math.Matrix2x2Default m, global::hxmath.math.Matrix2x2Default n) {
			if ( ! ((( ( m == null ) && ( n == null ) ))) ) {
				if (( ( ( ( ( m != null ) && ( n != null ) ) && ( m.a == n.a ) ) && ( m.b == n.b ) ) && ( m.c == n.c ) )) {
					return ( m.d == n.d );
				}
				else {
					return false;
				}
				
			}
			else {
				return true;
			}
			
		}
		
		
		public static global::hxmath.math.Matrix2x2Default rotate(double angle) {
			global::hxmath.math.Matrix2x2Default self = ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(0.0, 0.0, 0.0, 0.0)) );
			double s = global::System.Math.Sin(((double) (angle) ));
			double c = global::System.Math.Cos(((double) (angle) ));
			self.a = c;
			self.b =  - (s) ;
			self.c = s;
			self.d = c;
			return self;
		}
		
		
		public static global::hxmath.math.Matrix2x2Default scale(double sx, double sy) {
			return ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(sx, 0.0, 0.0, sy)) );
		}
		
		
		public static global::hxmath.math.Matrix2x2Default setRotate(global::hxmath.math.Matrix2x2Default this1, double angle) {
			global::hxmath.math.Matrix2x2Default self = this1;
			double s = global::System.Math.Sin(((double) (angle) ));
			double c = global::System.Math.Cos(((double) (angle) ));
			self.a = c;
			self.b =  - (s) ;
			self.c = s;
			self.d = c;
			return self;
		}
		
		
		public static global::hxmath.math.Matrix2x2Default @set(global::hxmath.math.Matrix2x2Default this1, double a, double b, double c, double d) {
			global::hxmath.math.Matrix2x2Default self = this1;
			self.a = a;
			self.b = b;
			self.c = c;
			self.d = d;
			return this1;
		}
		
		
		public static global::hxmath.math.Matrix2x2Default addWith(global::hxmath.math.Matrix2x2Default this1, global::hxmath.math.Matrix2x2Default m) {
			global::hxmath.math.Matrix2x2Default self = this1;
			self.a += m.a;
			self.b += m.b;
			self.c += m.c;
			self.d += m.d;
			return self;
		}
		
		
		public static global::hxmath.math.Matrix2x2Default subtractWith(global::hxmath.math.Matrix2x2Default this1, global::hxmath.math.Matrix2x2Default m) {
			global::hxmath.math.Matrix2x2Default self = this1;
			self.a -= m.a;
			self.b -= m.b;
			self.c -= m.c;
			self.d -= m.d;
			return self;
		}
		
		
		public static void copyTo(global::hxmath.math.Matrix2x2Default this1, global::hxmath.math.Matrix2x2Default target) {
			unchecked {
				global::hxmath.math.Matrix2x2Default self = this1;
				{
					int _g = 0;
					while (( _g < 4 )) {
						int i = _g++;
						{
							object tmp = null;
							switch (i) {
								case 0:
								{
									tmp = self.a;
									break;
								}
								
								
								case 1:
								{
									tmp = self.b;
									break;
								}
								
								
								case 2:
								{
									tmp = self.c;
									break;
								}
								
								
								case 3:
								{
									tmp = self.d;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double @value = ((double) (global::haxe.lang.Runtime.toDouble(tmp)) );
							switch (i) {
								case 0:
								{
									target.a = @value;
									break;
								}
								
								
								case 1:
								{
									target.b = @value;
									break;
								}
								
								
								case 2:
								{
									target.c = @value;
									break;
								}
								
								
								case 3:
								{
									target.d = @value;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
			}
		}
		
		
		public static void copyToShape(global::hxmath.math.Matrix2x2Default this1, object target) {
			global::hxmath.math.Matrix2x2Default self = this1;
			global::haxe.lang.Runtime.setField_f(target, "a", 97, self.a);
			global::haxe.lang.Runtime.setField_f(target, "b", 98, self.b);
			global::haxe.lang.Runtime.setField_f(target, "c", 99, self.c);
			global::haxe.lang.Runtime.setField_f(target, "d", 100, self.d);
		}
		
		
		public static void copyFromShape(global::hxmath.math.Matrix2x2Default this1, object source) {
			global::hxmath.math.Matrix2x2Default self = this1;
			self.a = global::haxe.lang.Runtime.getField_f(source, "a", 97, true);
			self.b = global::haxe.lang.Runtime.getField_f(source, "b", 98, true);
			self.c = global::haxe.lang.Runtime.getField_f(source, "c", 99, true);
			self.d = global::haxe.lang.Runtime.getField_f(source, "d", 100, true);
		}
		
		
		public static global::hxmath.math.Matrix2x2Default clone(global::hxmath.math.Matrix2x2Default this1) {
			global::hxmath.math.Matrix2x2Default self = this1;
			return ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(self.a, self.b, self.c, self.d)) );
		}
		
		
		public static double getArrayElement(global::hxmath.math.Matrix2x2Default this1, int i) {
			unchecked {
				global::hxmath.math.Matrix2x2Default self = this1;
				switch (i) {
					case 0:
					{
						return self.a;
					}
					
					
					case 1:
					{
						return self.b;
					}
					
					
					case 2:
					{
						return self.c;
					}
					
					
					case 3:
					{
						return self.d;
					}
					
					
					default:
					{
						throw global::haxe.lang.HaxeException.wrap("Invalid element");
					}
					
				}
				
			}
		}
		
		
		public static double setArrayElement(global::hxmath.math.Matrix2x2Default this1, int i, double @value) {
			unchecked {
				global::hxmath.math.Matrix2x2Default self = this1;
				switch (i) {
					case 0:
					{
						return self.a = @value;
					}
					
					
					case 1:
					{
						return self.b = @value;
					}
					
					
					case 2:
					{
						return self.c = @value;
					}
					
					
					case 3:
					{
						return self.d = @value;
					}
					
					
					default:
					{
						throw global::haxe.lang.HaxeException.wrap("Invalid element");
					}
					
				}
				
			}
		}
		
		
		public static double getElement(global::hxmath.math.Matrix2x2Default this1, int column, int row) {
			unchecked {
				global::hxmath.math.Matrix2x2Default self = this1;
				object tmp = null;
				switch (( ( row * 2 ) + column )) {
					case 0:
					{
						tmp = self.a;
						break;
					}
					
					
					case 1:
					{
						tmp = self.b;
						break;
					}
					
					
					case 2:
					{
						tmp = self.c;
						break;
					}
					
					
					case 3:
					{
						tmp = self.d;
						break;
					}
					
					
					default:
					{
						throw global::haxe.lang.HaxeException.wrap("Invalid element");
					}
					
				}
				
				return ((double) (global::haxe.lang.Runtime.toDouble(tmp)) );
			}
		}
		
		
		public static double setElement(global::hxmath.math.Matrix2x2Default this1, int column, int row, double @value) {
			unchecked {
				global::hxmath.math.Matrix2x2Default self = this1;
				object tmp = null;
				switch (( ( row * 2 ) + column )) {
					case 0:
					{
						tmp = self.a = @value;
						break;
					}
					
					
					case 1:
					{
						tmp = self.b = @value;
						break;
					}
					
					
					case 2:
					{
						tmp = self.c = @value;
						break;
					}
					
					
					case 3:
					{
						tmp = self.d = @value;
						break;
					}
					
					
					default:
					{
						throw global::haxe.lang.HaxeException.wrap("Invalid element");
					}
					
				}
				
				return ((double) (global::haxe.lang.Runtime.toDouble(tmp)) );
			}
		}
		
		
		public static global::hxmath.math.Vector2Default col(global::hxmath.math.Matrix2x2Default this1, int index) {
			unchecked {
				global::hxmath.math.Matrix2x2Default self = this1;
				switch (index) {
					case 0:
					{
						return ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self.a, self.c)) );
					}
					
					
					case 1:
					{
						return ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self.b, self.d)) );
					}
					
					
					default:
					{
						throw global::haxe.lang.HaxeException.wrap("Invalid column");
					}
					
				}
				
			}
		}
		
		
		public static global::hxmath.math.Vector2Default row(global::hxmath.math.Matrix2x2Default this1, int index) {
			unchecked {
				global::hxmath.math.Matrix2x2Default self = this1;
				switch (index) {
					case 0:
					{
						return ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self.a, self.b)) );
					}
					
					
					case 1:
					{
						return ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(self.c, self.d)) );
					}
					
					
					default:
					{
						throw global::haxe.lang.HaxeException.wrap("Invalid row");
					}
					
				}
				
			}
		}
		
		
		public static global::hxmath.math.Vector2Default transposeMultiplyVector(global::hxmath.math.Matrix2x2Default this1, global::hxmath.math.Vector2Default v) {
			global::hxmath.math.Matrix2x2Default self = this1;
			return ((global::hxmath.math.Vector2Default) (new global::hxmath.math.Vector2Default(( ( self.a * v.x ) + ( self.c * v.y ) ), ( ( self.b * v.x ) + ( self.d * v.y ) ))) );
		}
		
		
		public static global::hxmath.math.Matrix2x2Default applyScalarFunc(global::hxmath.math.Matrix2x2Default this1, global::haxe.lang.Function func) {
			unchecked {
				global::hxmath.math.Matrix2x2Default self = this1;
				{
					int _g = 0;
					while (( _g < 4 )) {
						int i = _g++;
						{
							object tmp = null;
							switch (i) {
								case 0:
								{
									tmp = self.a;
									break;
								}
								
								
								case 1:
								{
									tmp = self.b;
									break;
								}
								
								
								case 2:
								{
									tmp = self.c;
									break;
								}
								
								
								case 3:
								{
									tmp = self.d;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double @value = ((double) (func.__hx_invoke1_f(((double) (global::haxe.lang.Runtime.toDouble(tmp)) ), global::haxe.lang.Runtime.undefined)) );
							switch (i) {
								case 0:
								{
									self.a = @value;
									break;
								}
								
								
								case 1:
								{
									self.b = @value;
									break;
								}
								
								
								case 2:
								{
									self.c = @value;
									break;
								}
								
								
								case 3:
								{
									self.d = @value;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				return self;
			}
		}
		
		
		public static global::hxmath.math.Matrix2x2Default get_zero() {
			return ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(0.0, 0.0, 0.0, 0.0)) );
		}
		
		
		public static global::hxmath.math.Matrix2x2Default get_identity() {
			return ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(1.0, 0.0, 0.0, 1.0)) );
		}
		
		
		public static double get_det(global::hxmath.math.Matrix2x2Default this1) {
			global::hxmath.math.Matrix2x2Default self = this1;
			return ( ( self.a * self.d ) - ( self.b * self.c ) );
		}
		
		
		public static global::hxmath.math.Matrix2x2Default get_transpose(global::hxmath.math.Matrix2x2Default this1) {
			global::hxmath.math.Matrix2x2Default self = this1;
			return ((global::hxmath.math.Matrix2x2Default) (new global::hxmath.math.Matrix2x2Default(self.a, self.c, self.b, self.d)) );
		}
		
		
	}
}


