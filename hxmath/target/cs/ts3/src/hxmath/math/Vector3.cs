// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hxmath.math {
	public class Vector3Default : global::haxe.lang.HxObject {
		
		public Vector3Default(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Vector3Default(double x, double y, double z) {
			global::hxmath.math.Vector3Default.__hx_ctor_hxmath_math_Vector3Default(this, x, y, z);
		}
		
		
		public static void __hx_ctor_hxmath_math_Vector3Default(global::hxmath.math.Vector3Default __temp_me34, double x, double y, double z) {
			__temp_me34.x = x;
			__temp_me34.y = y;
			__temp_me34.z = z;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::hxmath.math.Vector3Default(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			unchecked {
				return new global::hxmath.math.Vector3Default(((double) (global::haxe.lang.Runtime.toDouble(arr[0])) ), ((double) (global::haxe.lang.Runtime.toDouble(arr[1])) ), ((double) (global::haxe.lang.Runtime.toDouble(arr[2])) ));
			}
		}
		
		
		public double x;
		
		public double y;
		
		public double z;
		
		public virtual string toString() {
			return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("(", global::haxe.lang.Runtime.toString(this.x)), ", "), global::haxe.lang.Runtime.toString(this.y)), ", "), global::haxe.lang.Runtime.toString(this.z)), ")");
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 122:
					{
						this.z = ((double) (@value) );
						return @value;
					}
					
					
					case 121:
					{
						this.y = ((double) (@value) );
						return @value;
					}
					
					
					case 120:
					{
						this.x = ((double) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 122:
					{
						this.z = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 121:
					{
						this.y = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 120:
					{
						this.x = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
					}
					
					
					case 122:
					{
						return this.z;
					}
					
					
					case 121:
					{
						return this.y;
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 122:
					{
						return this.z;
					}
					
					
					case 121:
					{
						return this.y;
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return this.toString();
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("z");
			baseArr.push("y");
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
		public override string ToString(){
			return this.toString();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hxmath.math._Vector3 {
	public sealed class Vector3_Impl_ {
		
		static Vector3_Impl_() {
			unchecked {
				global::hxmath.math._Vector3.Vector3_Impl_.elementCount = 3;
			}
		}
		
		
		public static int elementCount;
		
		
		
		
		
		
		
		
		
		
		
		
		
		public static global::hxmath.math.Vector3Default _new(double x, double y, double z) {
			return ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(x, y, z)) );
		}
		
		
		public static global::hxmath.math.Vector3Default fromArray(global::Array<double> rawData) {
			unchecked {
				if (( rawData.length != 3 )) {
					throw global::haxe.lang.HaxeException.wrap("Invalid rawData.");
				}
				
				return ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(rawData[0], rawData[1], rawData[2])) );
			}
		}
		
		
		public static global::hxmath.math.Vector3Default fromVector3Shape(object other) {
			return ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(global::haxe.lang.Runtime.getField_f(other, "x", 120, true), global::haxe.lang.Runtime.getField_f(other, "y", 121, true), global::haxe.lang.Runtime.getField_f(other, "z", 122, true))) );
		}
		
		
		public static double dot(global::hxmath.math.Vector3Default a, global::hxmath.math.Vector3Default b) {
			return ( ( ( a.x * b.x ) + ( a.y * b.y ) ) + ( a.z * b.z ) );
		}
		
		
		public static global::hxmath.math.Vector3Default cross(global::hxmath.math.Vector3Default a, global::hxmath.math.Vector3Default b) {
			global::hxmath.math.Vector3Default self = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(a.x, a.y, a.z)) );
			double newX = ( ( self.y * b.z ) - ( self.z * b.y ) );
			double newY = ( ( self.z * b.x ) - ( self.x * b.z ) );
			double newZ = ( ( self.x * b.y ) - ( self.y * b.x ) );
			self.x = newX;
			self.y = newY;
			self.z = newZ;
			return self;
		}
		
		
		public static global::hxmath.math.Vector3Default multiply(global::hxmath.math.Vector3Default a, double s) {
			global::hxmath.math.Vector3Default self = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(a.x, a.y, a.z)) );
			self.x *= s;
			self.y *= s;
			self.z *= s;
			return self;
		}
		
		
		public static global::hxmath.math.Vector3Default divide(global::hxmath.math.Vector3Default a, double s) {
			global::hxmath.math.Vector3Default self = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(a.x, a.y, a.z)) );
			self.x /= s;
			self.y /= s;
			self.z /= s;
			return self;
		}
		
		
		public static global::hxmath.math.Vector3Default @add(global::hxmath.math.Vector3Default a, global::hxmath.math.Vector3Default b) {
			global::hxmath.math.Vector3Default self = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(a.x, a.y, a.z)) );
			self.x += b.x;
			self.y += b.y;
			self.z += b.z;
			return self;
		}
		
		
		public static global::hxmath.math.Vector3Default subtract(global::hxmath.math.Vector3Default a, global::hxmath.math.Vector3Default b) {
			global::hxmath.math.Vector3Default self = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(a.x, a.y, a.z)) );
			self.x -= b.x;
			self.y -= b.y;
			self.z -= b.z;
			return self;
		}
		
		
		public static global::hxmath.math.Vector3Default negate(global::hxmath.math.Vector3Default a) {
			return ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default( - (a.x) ,  - (a.y) ,  - (a.z) )) );
		}
		
		
		public static bool @equals(global::hxmath.math.Vector3Default a, global::hxmath.math.Vector3Default b) {
			if ( ! ((( ( a == null ) && ( b == null ) ))) ) {
				if (( ( ( ( a != null ) && ( b != null ) ) && ( a.x == b.x ) ) && ( a.y == b.y ) )) {
					return ( a.z == b.z );
				}
				else {
					return false;
				}
				
			}
			else {
				return true;
			}
			
		}
		
		
		public static global::hxmath.math.Vector3Default lerp(global::hxmath.math.Vector3Default a, global::hxmath.math.Vector3Default b, double t) {
			return ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(( ( (( 1.0 - t )) * a.x ) + ( t * b.x ) ), ( ( (( 1.0 - t )) * a.y ) + ( t * b.y ) ), ( ( (( 1.0 - t )) * a.z ) + ( t * b.z ) ))) );
		}
		
		
		public static global::hxmath.math.Vector3Default max(global::hxmath.math.Vector3Default a, global::hxmath.math.Vector3Default b) {
			global::hxmath.math.Vector3Default self = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(a.x, a.y, a.z)) );
			self.x = global::System.Math.Max(((double) (self.x) ), ((double) (b.x) ));
			self.y = global::System.Math.Max(((double) (self.y) ), ((double) (b.y) ));
			self.z = global::System.Math.Max(((double) (self.z) ), ((double) (b.z) ));
			return self;
		}
		
		
		public static global::hxmath.math.Vector3Default min(global::hxmath.math.Vector3Default a, global::hxmath.math.Vector3Default b) {
			global::hxmath.math.Vector3Default self = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(a.x, a.y, a.z)) );
			self.x = global::System.Math.Min(((double) (self.x) ), ((double) (b.x) ));
			self.y = global::System.Math.Min(((double) (self.y) ), ((double) (b.y) ));
			self.z = global::System.Math.Min(((double) (self.z) ), ((double) (b.z) ));
			return self;
		}
		
		
		public static global::hxmath.math.Vector3Default project(global::hxmath.math.Vector3Default a, global::hxmath.math.Vector3Default b) {
			unchecked {
				global::hxmath.math.Vector3Default self = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(a.x, a.y, a.z)) );
				double s = ( (( ( ( self.x * b.x ) + ( self.y * b.y ) ) + ( self.z * b.z ) )) / (( ( ( b.x * b.x ) + ( b.y * b.y ) ) + ( b.z * b.z ) )) );
				{
					int _g = 0;
					while (( _g < 3 )) {
						int i = _g++;
						{
							object tmp = null;
							switch (i) {
								case 0:
								{
									tmp = b.x;
									break;
								}
								
								
								case 1:
								{
									tmp = b.y;
									break;
								}
								
								
								case 2:
								{
									tmp = b.z;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double @value = ((double) (global::haxe.lang.Runtime.toDouble(tmp)) );
							switch (i) {
								case 0:
								{
									self.x = @value;
									break;
								}
								
								
								case 1:
								{
									self.y = @value;
									break;
								}
								
								
								case 2:
								{
									self.z = @value;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				{
					self.x *= s;
					self.y *= s;
					self.z *= s;
				}
				
				return self;
			}
		}
		
		
		public static global::hxmath.math.Vector3Default reflect(global::hxmath.math.Vector3Default v, global::hxmath.math.Vector3Default normal) {
			unchecked {
				global::hxmath.math.Vector3Default self = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(v.x, v.y, v.z)) );
				global::hxmath.math.Vector3Default self1 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(self.x, self.y, self.z)) );
				double s = ( (( ( ( self1.x * normal.x ) + ( self1.y * normal.y ) ) + ( self1.z * normal.z ) )) / (( ( ( normal.x * normal.x ) + ( normal.y * normal.y ) ) + ( normal.z * normal.z ) )) );
				{
					int _g = 0;
					while (( _g < 3 )) {
						int i = _g++;
						{
							object tmp = null;
							switch (i) {
								case 0:
								{
									tmp = normal.x;
									break;
								}
								
								
								case 1:
								{
									tmp = normal.y;
									break;
								}
								
								
								case 2:
								{
									tmp = normal.z;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double @value = ((double) (global::haxe.lang.Runtime.toDouble(tmp)) );
							switch (i) {
								case 0:
								{
									self1.x = @value;
									break;
								}
								
								
								case 1:
								{
									self1.y = @value;
									break;
								}
								
								
								case 2:
								{
									self1.z = @value;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				{
					self1.x *= s;
					self1.y *= s;
					self1.z *= s;
				}
				
				{
					self1.x *= 2.0;
					self1.y *= 2.0;
					self1.z *= 2.0;
				}
				
				{
					self.x -= self1.x;
					self.y -= self1.y;
					self.z -= self1.z;
				}
				
				return self;
			}
		}
		
		
		public static void orthoNormalize(global::hxmath.math.Vector3Default u, global::hxmath.math.Vector3Default v, global::hxmath.math.Vector3Default w) {
			unchecked {
				{
					double length = global::System.Math.Sqrt(((double) (( ( ( u.x * u.x ) + ( u.y * u.y ) ) + ( u.z * u.z ) )) ));
					if (( length > 0.0 )) {
						u.x /= length;
						u.y /= length;
						u.z /= length;
					}
					
				}
				
				{
					global::hxmath.math.Vector3Default self = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(v.x, v.y, v.z)) );
					double s = ( (( ( ( self.x * u.x ) + ( self.y * u.y ) ) + ( self.z * u.z ) )) / (( ( ( u.x * u.x ) + ( u.y * u.y ) ) + ( u.z * u.z ) )) );
					{
						int _g = 0;
						while (( _g < 3 )) {
							int i = _g++;
							{
								object tmp = null;
								switch (i) {
									case 0:
									{
										tmp = u.x;
										break;
									}
									
									
									case 1:
									{
										tmp = u.y;
										break;
									}
									
									
									case 2:
									{
										tmp = u.z;
										break;
									}
									
									
									default:
									{
										throw global::haxe.lang.HaxeException.wrap("Invalid element");
									}
									
								}
								
								double @value = ((double) (global::haxe.lang.Runtime.toDouble(tmp)) );
								switch (i) {
									case 0:
									{
										self.x = @value;
										break;
									}
									
									
									case 1:
									{
										self.y = @value;
										break;
									}
									
									
									case 2:
									{
										self.z = @value;
										break;
									}
									
									
									default:
									{
										throw global::haxe.lang.HaxeException.wrap("Invalid element");
									}
									
								}
								
							}
							
						}
						
					}
					
					{
						self.x *= s;
						self.y *= s;
						self.z *= s;
					}
					
					v.x -= self.x;
					v.y -= self.y;
					v.z -= self.z;
				}
				
				{
					double length1 = global::System.Math.Sqrt(((double) (( ( ( v.x * v.x ) + ( v.y * v.y ) ) + ( v.z * v.z ) )) ));
					if (( length1 > 0.0 )) {
						v.x /= length1;
						v.y /= length1;
						v.z /= length1;
					}
					
				}
				
				{
					global::hxmath.math.Vector3Default self1 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(w.x, w.y, w.z)) );
					double s1 = ( (( ( ( self1.x * u.x ) + ( self1.y * u.y ) ) + ( self1.z * u.z ) )) / (( ( ( u.x * u.x ) + ( u.y * u.y ) ) + ( u.z * u.z ) )) );
					{
						int _g1 = 0;
						while (( _g1 < 3 )) {
							int i1 = _g1++;
							{
								object tmp1 = null;
								switch (i1) {
									case 0:
									{
										tmp1 = u.x;
										break;
									}
									
									
									case 1:
									{
										tmp1 = u.y;
										break;
									}
									
									
									case 2:
									{
										tmp1 = u.z;
										break;
									}
									
									
									default:
									{
										throw global::haxe.lang.HaxeException.wrap("Invalid element");
									}
									
								}
								
								double value1 = ((double) (global::haxe.lang.Runtime.toDouble(tmp1)) );
								switch (i1) {
									case 0:
									{
										self1.x = value1;
										break;
									}
									
									
									case 1:
									{
										self1.y = value1;
										break;
									}
									
									
									case 2:
									{
										self1.z = value1;
										break;
									}
									
									
									default:
									{
										throw global::haxe.lang.HaxeException.wrap("Invalid element");
									}
									
								}
								
							}
							
						}
						
					}
					
					{
						self1.x *= s1;
						self1.y *= s1;
						self1.z *= s1;
					}
					
					w.x -= self1.x;
					w.y -= self1.y;
					w.z -= self1.z;
				}
				
				{
					global::hxmath.math.Vector3Default self2 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(w.x, w.y, w.z)) );
					double s2 = ( (( ( ( self2.x * v.x ) + ( self2.y * v.y ) ) + ( self2.z * v.z ) )) / (( ( ( v.x * v.x ) + ( v.y * v.y ) ) + ( v.z * v.z ) )) );
					{
						int _g2 = 0;
						while (( _g2 < 3 )) {
							int i2 = _g2++;
							{
								object tmp2 = null;
								switch (i2) {
									case 0:
									{
										tmp2 = v.x;
										break;
									}
									
									
									case 1:
									{
										tmp2 = v.y;
										break;
									}
									
									
									case 2:
									{
										tmp2 = v.z;
										break;
									}
									
									
									default:
									{
										throw global::haxe.lang.HaxeException.wrap("Invalid element");
									}
									
								}
								
								double value2 = ((double) (global::haxe.lang.Runtime.toDouble(tmp2)) );
								switch (i2) {
									case 0:
									{
										self2.x = value2;
										break;
									}
									
									
									case 1:
									{
										self2.y = value2;
										break;
									}
									
									
									case 2:
									{
										self2.z = value2;
										break;
									}
									
									
									default:
									{
										throw global::haxe.lang.HaxeException.wrap("Invalid element");
									}
									
								}
								
							}
							
						}
						
					}
					
					{
						self2.x *= s2;
						self2.y *= s2;
						self2.z *= s2;
					}
					
					w.x -= self2.x;
					w.y -= self2.y;
					w.z -= self2.z;
				}
				
				{
					double length2 = global::System.Math.Sqrt(((double) (( ( ( w.x * w.x ) + ( w.y * w.y ) ) + ( w.z * w.z ) )) ));
					if (( length2 > 0.0 )) {
						w.x /= length2;
						w.y /= length2;
						w.z /= length2;
					}
					
				}
				
			}
		}
		
		
		public static global::hxmath.math.Vector3Default @set(global::hxmath.math.Vector3Default this1, double x, double y, double z) {
			global::hxmath.math.Vector3Default self = this1;
			self.x = x;
			self.y = y;
			self.z = z;
			return self;
		}
		
		
		public static global::hxmath.math.Vector3Default crossWith(global::hxmath.math.Vector3Default this1, global::hxmath.math.Vector3Default a) {
			global::hxmath.math.Vector3Default self = this1;
			double newX = ( ( self.y * a.z ) - ( self.z * a.y ) );
			double newY = ( ( self.z * a.x ) - ( self.x * a.z ) );
			double newZ = ( ( self.x * a.y ) - ( self.y * a.x ) );
			self.x = newX;
			self.y = newY;
			self.z = newZ;
			return self;
		}
		
		
		public static global::hxmath.math.Vector3Default multiplyWith(global::hxmath.math.Vector3Default this1, double s) {
			global::hxmath.math.Vector3Default self = this1;
			self.x *= s;
			self.y *= s;
			self.z *= s;
			return self;
		}
		
		
		public static global::hxmath.math.Vector3Default divideWith(global::hxmath.math.Vector3Default this1, double s) {
			global::hxmath.math.Vector3Default self = this1;
			self.x /= s;
			self.y /= s;
			self.z /= s;
			return self;
		}
		
		
		public static global::hxmath.math.Vector3Default addWith(global::hxmath.math.Vector3Default this1, global::hxmath.math.Vector3Default a) {
			global::hxmath.math.Vector3Default self = this1;
			self.x += a.x;
			self.y += a.y;
			self.z += a.z;
			return self;
		}
		
		
		public static global::hxmath.math.Vector3Default subtractWith(global::hxmath.math.Vector3Default this1, global::hxmath.math.Vector3Default a) {
			global::hxmath.math.Vector3Default self = this1;
			self.x -= a.x;
			self.y -= a.y;
			self.z -= a.z;
			return self;
		}
		
		
		public static global::hxmath.math.Vector3Default maxWith(global::hxmath.math.Vector3Default this1, global::hxmath.math.Vector3Default a) {
			global::hxmath.math.Vector3Default self = this1;
			self.x = global::System.Math.Max(((double) (self.x) ), ((double) (a.x) ));
			self.y = global::System.Math.Max(((double) (self.y) ), ((double) (a.y) ));
			self.z = global::System.Math.Max(((double) (self.z) ), ((double) (a.z) ));
			return self;
		}
		
		
		public static global::hxmath.math.Vector3Default minWith(global::hxmath.math.Vector3Default this1, global::hxmath.math.Vector3Default a) {
			global::hxmath.math.Vector3Default self = this1;
			self.x = global::System.Math.Min(((double) (self.x) ), ((double) (a.x) ));
			self.y = global::System.Math.Min(((double) (self.y) ), ((double) (a.y) ));
			self.z = global::System.Math.Min(((double) (self.z) ), ((double) (a.z) ));
			return self;
		}
		
		
		public static global::hxmath.math.Vector3Default projectOnto(global::hxmath.math.Vector3Default this1, global::hxmath.math.Vector3Default a) {
			unchecked {
				global::hxmath.math.Vector3Default self = this1;
				double s = ( (( ( ( self.x * a.x ) + ( self.y * a.y ) ) + ( self.z * a.z ) )) / (( ( ( a.x * a.x ) + ( a.y * a.y ) ) + ( a.z * a.z ) )) );
				{
					int _g = 0;
					while (( _g < 3 )) {
						int i = _g++;
						{
							object tmp = null;
							switch (i) {
								case 0:
								{
									tmp = a.x;
									break;
								}
								
								
								case 1:
								{
									tmp = a.y;
									break;
								}
								
								
								case 2:
								{
									tmp = a.z;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double @value = ((double) (global::haxe.lang.Runtime.toDouble(tmp)) );
							switch (i) {
								case 0:
								{
									self.x = @value;
									break;
								}
								
								
								case 1:
								{
									self.y = @value;
									break;
								}
								
								
								case 2:
								{
									self.z = @value;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				{
					self.x *= s;
					self.y *= s;
					self.z *= s;
				}
				
				return self;
			}
		}
		
		
		public static global::hxmath.math.Vector3Default projectOntoPlane(global::hxmath.math.Vector3Default this1, global::hxmath.math.Vector3Default normal) {
			unchecked {
				global::hxmath.math.Vector3Default self = this1;
				{
					global::hxmath.math.Vector3Default self1 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(self.x, self.y, self.z)) );
					double s = ( (( ( ( self1.x * normal.x ) + ( self1.y * normal.y ) ) + ( self1.z * normal.z ) )) / (( ( ( normal.x * normal.x ) + ( normal.y * normal.y ) ) + ( normal.z * normal.z ) )) );
					{
						int _g = 0;
						while (( _g < 3 )) {
							int i = _g++;
							{
								object tmp = null;
								switch (i) {
									case 0:
									{
										tmp = normal.x;
										break;
									}
									
									
									case 1:
									{
										tmp = normal.y;
										break;
									}
									
									
									case 2:
									{
										tmp = normal.z;
										break;
									}
									
									
									default:
									{
										throw global::haxe.lang.HaxeException.wrap("Invalid element");
									}
									
								}
								
								double @value = ((double) (global::haxe.lang.Runtime.toDouble(tmp)) );
								switch (i) {
									case 0:
									{
										self1.x = @value;
										break;
									}
									
									
									case 1:
									{
										self1.y = @value;
										break;
									}
									
									
									case 2:
									{
										self1.z = @value;
										break;
									}
									
									
									default:
									{
										throw global::haxe.lang.HaxeException.wrap("Invalid element");
									}
									
								}
								
							}
							
						}
						
					}
					
					{
						self1.x *= s;
						self1.y *= s;
						self1.z *= s;
					}
					
					self.x -= self1.x;
					self.y -= self1.y;
					self.z -= self1.z;
				}
				
				return self;
			}
		}
		
		
		public static global::hxmath.math.Vector3Default reflectBy(global::hxmath.math.Vector3Default this1, global::hxmath.math.Vector3Default normal) {
			unchecked {
				global::hxmath.math.Vector3Default self = this1;
				global::hxmath.math.Vector3Default self1 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(self.x, self.y, self.z)) );
				double s = ( (( ( ( self1.x * normal.x ) + ( self1.y * normal.y ) ) + ( self1.z * normal.z ) )) / (( ( ( normal.x * normal.x ) + ( normal.y * normal.y ) ) + ( normal.z * normal.z ) )) );
				{
					int _g = 0;
					while (( _g < 3 )) {
						int i = _g++;
						{
							object tmp = null;
							switch (i) {
								case 0:
								{
									tmp = normal.x;
									break;
								}
								
								
								case 1:
								{
									tmp = normal.y;
									break;
								}
								
								
								case 2:
								{
									tmp = normal.z;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double @value = ((double) (global::haxe.lang.Runtime.toDouble(tmp)) );
							switch (i) {
								case 0:
								{
									self1.x = @value;
									break;
								}
								
								
								case 1:
								{
									self1.y = @value;
									break;
								}
								
								
								case 2:
								{
									self1.z = @value;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				{
					self1.x *= s;
					self1.y *= s;
					self1.z *= s;
				}
				
				{
					self1.x *= 2.0;
					self1.y *= 2.0;
					self1.z *= 2.0;
				}
				
				{
					self.x -= self1.x;
					self.y -= self1.y;
					self.z -= self1.z;
				}
				
				return self;
			}
		}
		
		
		public static void copyTo(global::hxmath.math.Vector3Default this1, global::hxmath.math.Vector3Default target) {
			unchecked {
				global::hxmath.math.Vector3Default self = this1;
				{
					int _g = 0;
					while (( _g < 3 )) {
						int i = _g++;
						{
							object tmp = null;
							switch (i) {
								case 0:
								{
									tmp = self.x;
									break;
								}
								
								
								case 1:
								{
									tmp = self.y;
									break;
								}
								
								
								case 2:
								{
									tmp = self.z;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double @value = ((double) (global::haxe.lang.Runtime.toDouble(tmp)) );
							switch (i) {
								case 0:
								{
									target.x = @value;
									break;
								}
								
								
								case 1:
								{
									target.y = @value;
									break;
								}
								
								
								case 2:
								{
									target.z = @value;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
			}
		}
		
		
		public static void copyToShape(global::hxmath.math.Vector3Default this1, object target) {
			global::hxmath.math.Vector3Default self = this1;
			global::haxe.lang.Runtime.setField_f(target, "x", 120, self.x);
			global::haxe.lang.Runtime.setField_f(target, "y", 121, self.y);
			global::haxe.lang.Runtime.setField_f(target, "z", 122, self.z);
		}
		
		
		public static void copyFromShape(global::hxmath.math.Vector3Default this1, object source) {
			global::hxmath.math.Vector3Default self = this1;
			self.x = global::haxe.lang.Runtime.getField_f(source, "x", 120, true);
			self.y = global::haxe.lang.Runtime.getField_f(source, "y", 121, true);
			self.z = global::haxe.lang.Runtime.getField_f(source, "z", 122, true);
		}
		
		
		public static global::hxmath.math.Vector3Default clone(global::hxmath.math.Vector3Default this1) {
			global::hxmath.math.Vector3Default self = this1;
			return ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(self.x, self.y, self.z)) );
		}
		
		
		public static double getArrayElement(global::hxmath.math.Vector3Default this1, int i) {
			unchecked {
				global::hxmath.math.Vector3Default self = this1;
				switch (i) {
					case 0:
					{
						return self.x;
					}
					
					
					case 1:
					{
						return self.y;
					}
					
					
					case 2:
					{
						return self.z;
					}
					
					
					default:
					{
						throw global::haxe.lang.HaxeException.wrap("Invalid element");
					}
					
				}
				
			}
		}
		
		
		public static double setArrayElement(global::hxmath.math.Vector3Default this1, int i, double @value) {
			unchecked {
				global::hxmath.math.Vector3Default self = this1;
				switch (i) {
					case 0:
					{
						return self.x = @value;
					}
					
					
					case 1:
					{
						return self.y = @value;
					}
					
					
					case 2:
					{
						return self.z = @value;
					}
					
					
					default:
					{
						throw global::haxe.lang.HaxeException.wrap("Invalid element");
					}
					
				}
				
			}
		}
		
		
		public static global::hxmath.math.Vector3Default applyNegate(global::hxmath.math.Vector3Default this1) {
			global::hxmath.math.Vector3Default self = this1;
			self.x =  - (self.x) ;
			self.y =  - (self.y) ;
			self.z =  - (self.z) ;
			return self;
		}
		
		
		public static global::hxmath.math.Vector3Default applyScalarFunc(global::hxmath.math.Vector3Default this1, global::haxe.lang.Function func) {
			unchecked {
				global::hxmath.math.Vector3Default self = this1;
				{
					int _g = 0;
					while (( _g < 3 )) {
						int i = _g++;
						{
							object tmp = null;
							switch (i) {
								case 0:
								{
									tmp = self.x;
									break;
								}
								
								
								case 1:
								{
									tmp = self.y;
									break;
								}
								
								
								case 2:
								{
									tmp = self.z;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							double @value = ((double) (func.__hx_invoke1_f(((double) (global::haxe.lang.Runtime.toDouble(tmp)) ), global::haxe.lang.Runtime.undefined)) );
							switch (i) {
								case 0:
								{
									self.x = @value;
									break;
								}
								
								
								case 1:
								{
									self.y = @value;
									break;
								}
								
								
								case 2:
								{
									self.z = @value;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				return self;
			}
		}
		
		
		public static double angleWith(global::hxmath.math.Vector3Default this1, global::hxmath.math.Vector3Default b) {
			global::hxmath.math.Vector3Default self = this1;
			return global::System.Math.Acos(((double) (( (( ( ( self.x * b.x ) + ( self.y * b.y ) ) + ( self.z * b.z ) )) / (( global::System.Math.Sqrt(((double) (( ( ( self.x * self.x ) + ( self.y * self.y ) ) + ( self.z * self.z ) )) )) * global::System.Math.Sqrt(((double) (( ( ( b.x * b.x ) + ( b.y * b.y ) ) + ( b.z * b.z ) )) )) )) )) ));
		}
		
		
		public static double distanceTo(global::hxmath.math.Vector3Default this1, global::hxmath.math.Vector3Default b) {
			global::hxmath.math.Vector3Default self = this1;
			global::hxmath.math.Vector3Default self1 = ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(self.x, self.y, self.z)) );
			self1.x -= b.x;
			self1.y -= b.y;
			self1.z -= b.z;
			global::hxmath.math.Vector3Default self2 = ((global::hxmath.math.Vector3Default) (self1) );
			return global::System.Math.Sqrt(((double) (( ( ( self2.x * self2.x ) + ( self2.y * self2.y ) ) + ( self2.z * self2.z ) )) ));
		}
		
		
		public static global::hxmath.math.Vector3Default normalize(global::hxmath.math.Vector3Default this1) {
			global::hxmath.math.Vector3Default self = this1;
			double length = global::System.Math.Sqrt(((double) (( ( ( self.x * self.x ) + ( self.y * self.y ) ) + ( self.z * self.z ) )) ));
			if (( length > 0.0 )) {
				self.x /= length;
				self.y /= length;
				self.z /= length;
			}
			
			return self;
		}
		
		
		public static global::hxmath.math.Vector3Default normalizeTo(global::hxmath.math.Vector3Default this1, double newLength) {
			global::hxmath.math.Vector3Default self = this1;
			{
				double length = global::System.Math.Sqrt(((double) (( ( ( self.x * self.x ) + ( self.y * self.y ) ) + ( self.z * self.z ) )) ));
				if (( length > 0.0 )) {
					self.x /= length;
					self.y /= length;
					self.z /= length;
				}
				
			}
			
			{
				self.x *= newLength;
				self.y *= newLength;
				self.z *= newLength;
			}
			
			return self;
		}
		
		
		public static global::hxmath.math.Vector3Default clamp(global::hxmath.math.Vector3Default this1, double min, double max) {
			global::hxmath.math.Vector3Default self = this1;
			double length = global::System.Math.Sqrt(((double) (( ( ( self.x * self.x ) + ( self.y * self.y ) ) + ( self.z * self.z ) )) ));
			if (( length < min )) {
				{
					double length1 = global::System.Math.Sqrt(((double) (( ( ( self.x * self.x ) + ( self.y * self.y ) ) + ( self.z * self.z ) )) ));
					if (( length1 > 0.0 )) {
						self.x /= length1;
						self.y /= length1;
						self.z /= length1;
					}
					
				}
				
				{
					self.x *= min;
					self.y *= min;
					self.z *= min;
				}
				
			}
			else if (( length > max )) {
				{
					double length2 = global::System.Math.Sqrt(((double) (( ( ( self.x * self.x ) + ( self.y * self.y ) ) + ( self.z * self.z ) )) ));
					if (( length2 > 0.0 )) {
						self.x /= length2;
						self.y /= length2;
						self.z /= length2;
					}
					
				}
				
				{
					self.x *= max;
					self.y *= max;
					self.z *= max;
				}
				
			}
			
			return self;
		}
		
		
		public static double get_length(global::hxmath.math.Vector3Default this1) {
			global::hxmath.math.Vector3Default self = this1;
			return global::System.Math.Sqrt(((double) (( ( ( self.x * self.x ) + ( self.y * self.y ) ) + ( self.z * self.z ) )) ));
		}
		
		
		public static double get_lengthSq(global::hxmath.math.Vector3Default this1) {
			global::hxmath.math.Vector3Default self = this1;
			return ( ( ( self.x * self.x ) + ( self.y * self.y ) ) + ( self.z * self.z ) );
		}
		
		
		public static global::hxmath.math.Vector3Default get_zero() {
			return ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 0.0, 0.0)) );
		}
		
		
		public static global::hxmath.math.Vector3Default get_xAxis() {
			return ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(1.0, 0.0, 0.0)) );
		}
		
		
		public static global::hxmath.math.Vector3Default get_yAxis() {
			return ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 1.0, 0.0)) );
		}
		
		
		public static global::hxmath.math.Vector3Default get_zAxis() {
			return ((global::hxmath.math.Vector3Default) (new global::hxmath.math.Vector3Default(0.0, 0.0, 1.0)) );
		}
		
		
	}
}


