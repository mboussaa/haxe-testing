// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_hxmath_math_Vector3Default
#include <hxmath/math/Vector3Default.h>
#endif
#ifndef INCLUDED_hxmath_math__Vector3_Vector3_Impl_
#include <hxmath/math/_Vector3/Vector3_Impl_.h>
#endif

namespace hxmath{
namespace math{
namespace _Vector3{

void Vector3_Impl__obj::__construct() { }

Dynamic Vector3_Impl__obj::__CreateEmpty() { return new Vector3_Impl__obj; }

hx::ObjectPtr< Vector3_Impl__obj > Vector3_Impl__obj::__new()
{
	hx::ObjectPtr< Vector3_Impl__obj > _hx_result = new Vector3_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Vector3_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Vector3_Impl__obj > _hx_result = new Vector3_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Int Vector3_Impl__obj::elementCount;

 ::hxmath::math::Vector3Default Vector3_Impl__obj::_new(Float x,Float y,Float z){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","_new",0xf0f2ff8c,"hxmath.math._Vector3.Vector3_Impl_._new","hxmath/math/Vector3.hx",68,0xc167cc7e)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
HXLINE(  68)		return  ::hxmath::math::Vector3Default_obj::__new(x,y,z);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Vector3_Impl__obj,_new,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::fromArray(::Array< Float > rawData){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","fromArray",0x5f2cb1c4,"hxmath.math._Vector3.Vector3_Impl_.fromArray","hxmath/math/Vector3.hx",80,0xc167cc7e)
            	HX_STACK_ARG(rawData,"rawData")
HXLINE(  81)		if ((rawData->length != (int)3)) {
HXLINE(  83)			HX_STACK_DO_THROW(HX_("Invalid rawData.",25,ca,34,44));
            		}
HXLINE(  86)		return  ::hxmath::math::Vector3Default_obj::__new(rawData->__get((int)0),rawData->__get((int)1),rawData->__get((int)2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector3_Impl__obj,fromArray,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::fromVector3Shape( ::Dynamic other){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","fromVector3Shape",0xc2e54626,"hxmath.math._Vector3.Vector3_Impl_.fromVector3Shape","hxmath/math/Vector3.hx",98,0xc167cc7e)
            	HX_STACK_ARG(other,"other")
HXLINE(  98)		return  ::hxmath::math::Vector3Default_obj::__new( ::Dynamic(other->__Field(HX_("x",78,00,00,00),hx::paccDynamic)), ::Dynamic(other->__Field(HX_("y",79,00,00,00),hx::paccDynamic)), ::Dynamic(other->__Field(HX_("z",7a,00,00,00),hx::paccDynamic)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector3_Impl__obj,fromVector3Shape,return )

Float Vector3_Impl__obj::dot( ::hxmath::math::Vector3Default a, ::hxmath::math::Vector3Default b){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","dot",0x674406be,"hxmath.math._Vector3.Vector3_Impl_.dot","hxmath/math/Vector3.hx",111,0xc167cc7e)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 111)		return (((a->x * b->x) + (a->y * b->y)) + (a->z * b->z));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_Impl__obj,dot,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::cross( ::hxmath::math::Vector3Default a, ::hxmath::math::Vector3Default b){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","cross",0x33f35af5,"hxmath.math._Vector3.Vector3_Impl_.cross","hxmath/math/Vector3.hx",127,0xc167cc7e)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 127)		HX_VARI(  ::hxmath::math::Vector3Default,self) =  ::hxmath::math::Vector3Default_obj::__new(a->x,a->y,a->z);
HXDLIN( 127)		HX_VARI( Float,newX) = ((self->y * b->z) - (self->z * b->y));
HXDLIN( 127)		HX_VARI( Float,newY) = ((self->z * b->x) - (self->x * b->z));
HXDLIN( 127)		HX_VARI( Float,newZ) = ((self->x * b->y) - (self->y * b->x));
HXDLIN( 127)		self->x = newX;
HXDLIN( 127)		self->y = newY;
HXDLIN( 127)		self->z = newZ;
HXDLIN( 127)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_Impl__obj,cross,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::multiply( ::hxmath::math::Vector3Default a,Float s){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","multiply",0xb7d8bdcf,"hxmath.math._Vector3.Vector3_Impl_.multiply","hxmath/math/Vector3.hx",142,0xc167cc7e)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(s,"s")
HXLINE( 142)		HX_VARI(  ::hxmath::math::Vector3Default,self) =  ::hxmath::math::Vector3Default_obj::__new(a->x,a->y,a->z);
HXDLIN( 142)		hx::MultEq(self->x,s);
HXDLIN( 142)		hx::MultEq(self->y,s);
HXDLIN( 142)		hx::MultEq(self->z,s);
HXDLIN( 142)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_Impl__obj,multiply,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::divide( ::hxmath::math::Vector3Default a,Float s){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","divide",0x7d553a64,"hxmath.math._Vector3.Vector3_Impl_.divide","hxmath/math/Vector3.hx",156,0xc167cc7e)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(s,"s")
HXLINE( 156)		HX_VARI(  ::hxmath::math::Vector3Default,self) =  ::hxmath::math::Vector3Default_obj::__new(a->x,a->y,a->z);
HXDLIN( 156)		hx::DivEq(self->x,s);
HXDLIN( 156)		hx::DivEq(self->y,s);
HXDLIN( 156)		hx::DivEq(self->z,s);
HXDLIN( 156)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_Impl__obj,divide,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::add( ::hxmath::math::Vector3Default a, ::hxmath::math::Vector3Default b){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","add",0x6741b656,"hxmath.math._Vector3.Vector3_Impl_.add","hxmath/math/Vector3.hx",170,0xc167cc7e)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 170)		HX_VARI(  ::hxmath::math::Vector3Default,self) =  ::hxmath::math::Vector3Default_obj::__new(a->x,a->y,a->z);
HXDLIN( 170)		hx::AddEq(self->x,b->x);
HXDLIN( 170)		hx::AddEq(self->y,b->y);
HXDLIN( 170)		hx::AddEq(self->z,b->z);
HXDLIN( 170)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_Impl__obj,add,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::subtract( ::hxmath::math::Vector3Default a, ::hxmath::math::Vector3Default b){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","subtract",0x155d50bf,"hxmath.math._Vector3.Vector3_Impl_.subtract","hxmath/math/Vector3.hx",184,0xc167cc7e)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 184)		HX_VARI(  ::hxmath::math::Vector3Default,self) =  ::hxmath::math::Vector3Default_obj::__new(a->x,a->y,a->z);
HXDLIN( 184)		hx::SubEq(self->x,b->x);
HXDLIN( 184)		hx::SubEq(self->y,b->y);
HXDLIN( 184)		hx::SubEq(self->z,b->z);
HXDLIN( 184)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_Impl__obj,subtract,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::negate( ::hxmath::math::Vector3Default a){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","negate",0x255c4cad,"hxmath.math._Vector3.Vector3_Impl_.negate","hxmath/math/Vector3.hx",197,0xc167cc7e)
            	HX_STACK_ARG(a,"a")
HXLINE( 197)		return  ::hxmath::math::Vector3Default_obj::__new(-(a->x),-(a->y),-(a->z));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector3_Impl__obj,negate,return )

Bool Vector3_Impl__obj::equals( ::hxmath::math::Vector3Default a, ::hxmath::math::Vector3Default b){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","equals",0x7e35f92a,"hxmath.math._Vector3.Vector3_Impl_.equals","hxmath/math/Vector3.hx",214,0xc167cc7e)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 214)		Bool _hx_tmp;
HXDLIN( 214)		if (hx::IsNull( a )) {
HXLINE( 214)			_hx_tmp = hx::IsNull( b );
            		}
            		else {
HXLINE( 214)			_hx_tmp = false;
            		}
HXDLIN( 214)		if (!(_hx_tmp)) {
HXLINE( 215)			Bool _hx_tmp1;
HXDLIN( 215)			Bool _hx_tmp2;
HXDLIN( 215)			Bool _hx_tmp3;
HXDLIN( 215)			if (hx::IsNotNull( a )) {
HXLINE( 215)				_hx_tmp3 = hx::IsNotNull( b );
            			}
            			else {
HXLINE( 215)				_hx_tmp3 = false;
            			}
HXDLIN( 215)			if (_hx_tmp3) {
HXLINE( 215)				_hx_tmp2 = (a->x == b->x);
            			}
            			else {
HXLINE( 215)				_hx_tmp2 = false;
            			}
HXDLIN( 215)			if (_hx_tmp2) {
HXLINE( 215)				_hx_tmp1 = (a->y == b->y);
            			}
            			else {
HXLINE( 215)				_hx_tmp1 = false;
            			}
HXDLIN( 215)			if (_hx_tmp1) {
HXLINE( 214)				return (a->z == b->z);
            			}
            			else {
HXLINE( 214)				return false;
            			}
            		}
            		else {
HXLINE( 214)			return true;
            		}
HXDLIN( 214)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_Impl__obj,equals,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::lerp( ::hxmath::math::Vector3Default a, ::hxmath::math::Vector3Default b,Float t){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","lerp",0xf983fca2,"hxmath.math._Vector3.Vector3_Impl_.lerp","hxmath/math/Vector3.hx",232,0xc167cc7e)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(t,"t")
HXLINE( 232)		return  ::hxmath::math::Vector3Default_obj::__new((((((Float)1.0) - t) * a->x) + (t * b->x)),(((((Float)1.0) - t) * a->y) + (t * b->y)),(((((Float)1.0) - t) * a->z) + (t * b->z)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Vector3_Impl__obj,lerp,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::max( ::hxmath::math::Vector3Default a, ::hxmath::math::Vector3Default b){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","max",0x674aced9,"hxmath.math._Vector3.Vector3_Impl_.max","hxmath/math/Vector3.hx",247,0xc167cc7e)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 247)		HX_VARI(  ::hxmath::math::Vector3Default,self) =  ::hxmath::math::Vector3Default_obj::__new(a->x,a->y,a->z);
HXDLIN( 247)		self->x = ::Math_obj::max(self->x,b->x);
HXDLIN( 247)		self->y = ::Math_obj::max(self->y,b->y);
HXDLIN( 247)		self->z = ::Math_obj::max(self->z,b->z);
HXDLIN( 247)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_Impl__obj,max,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::min( ::hxmath::math::Vector3Default a, ::hxmath::math::Vector3Default b){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","min",0x674ad5c7,"hxmath.math._Vector3.Vector3_Impl_.min","hxmath/math/Vector3.hx",260,0xc167cc7e)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 260)		HX_VARI(  ::hxmath::math::Vector3Default,self) =  ::hxmath::math::Vector3Default_obj::__new(a->x,a->y,a->z);
HXDLIN( 260)		self->x = ::Math_obj::min(self->x,b->x);
HXDLIN( 260)		self->y = ::Math_obj::min(self->y,b->y);
HXDLIN( 260)		self->z = ::Math_obj::min(self->z,b->z);
HXDLIN( 260)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_Impl__obj,min,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::project( ::hxmath::math::Vector3Default a, ::hxmath::math::Vector3Default b){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","project",0xb251958e,"hxmath.math._Vector3.Vector3_Impl_.project","hxmath/math/Vector3.hx",273,0xc167cc7e)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 273)		HX_VARI(  ::hxmath::math::Vector3Default,self) =  ::hxmath::math::Vector3Default_obj::__new(a->x,a->y,a->z);
HXDLIN( 273)		HX_VARI( Float,s) = ((Float)(((self->x * b->x) + (self->y * b->y)) + (self->z * b->z)) / (Float)(((b->x * b->x) + (b->y * b->y)) + (b->z * b->z)));
HXDLIN( 273)		{
HXLINE( 273)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 273)			while((_g < (int)3)){
HXLINE( 273)				HX_VARI( Int,i) = _g++;
HXDLIN( 273)				{
HXLINE( 273)					 ::Dynamic _hx_tmp;
HXDLIN( 273)					switch((int)(i)){
            						case (int)0: {
HXLINE( 273)							_hx_tmp = b->x;
            						}
            						break;
            						case (int)1: {
HXLINE( 273)							_hx_tmp = b->y;
            						}
            						break;
            						case (int)2: {
HXLINE( 273)							_hx_tmp = b->z;
            						}
            						break;
            						default:{
HXLINE( 273)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 273)					HX_VARI( Float,value) = ( (Float)(_hx_tmp) );
HXDLIN( 273)					switch((int)(i)){
            						case (int)0: {
HXLINE( 273)							self->x = value;
            						}
            						break;
            						case (int)1: {
HXLINE( 273)							self->y = value;
            						}
            						break;
            						case (int)2: {
HXLINE( 273)							self->z = value;
            						}
            						break;
            						default:{
HXLINE( 273)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXDLIN( 273)		{
HXLINE( 273)			hx::MultEq(self->x,s);
HXDLIN( 273)			hx::MultEq(self->y,s);
HXDLIN( 273)			hx::MultEq(self->z,s);
            		}
HXDLIN( 273)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_Impl__obj,project,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::reflect( ::hxmath::math::Vector3Default v, ::hxmath::math::Vector3Default normal){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","reflect",0xa59006f2,"hxmath.math._Vector3.Vector3_Impl_.reflect","hxmath/math/Vector3.hx",286,0xc167cc7e)
            	HX_STACK_ARG(v,"v")
            	HX_STACK_ARG(normal,"normal")
HXLINE( 286)		HX_VARI(  ::hxmath::math::Vector3Default,self) =  ::hxmath::math::Vector3Default_obj::__new(v->x,v->y,v->z);
HXDLIN( 286)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self1,"self") =  ::hxmath::math::Vector3Default_obj::__new(self->x,self->y,self->z);
HXDLIN( 286)		HX_VARI( Float,s) = ((Float)(((self1->x * normal->x) + (self1->y * normal->y)) + (self1->z * normal->z)) / (Float)(((normal->x * normal->x) + (normal->y * normal->y)) + (normal->z * normal->z)));
HXDLIN( 286)		{
HXLINE( 286)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 286)			while((_g < (int)3)){
HXLINE( 286)				HX_VARI( Int,i) = _g++;
HXDLIN( 286)				{
HXLINE( 286)					 ::Dynamic _hx_tmp;
HXDLIN( 286)					switch((int)(i)){
            						case (int)0: {
HXLINE( 286)							_hx_tmp = normal->x;
            						}
            						break;
            						case (int)1: {
HXLINE( 286)							_hx_tmp = normal->y;
            						}
            						break;
            						case (int)2: {
HXLINE( 286)							_hx_tmp = normal->z;
            						}
            						break;
            						default:{
HXLINE( 286)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 286)					HX_VARI( Float,value) = ( (Float)(_hx_tmp) );
HXDLIN( 286)					switch((int)(i)){
            						case (int)0: {
HXLINE( 286)							self1->x = value;
            						}
            						break;
            						case (int)1: {
HXLINE( 286)							self1->y = value;
            						}
            						break;
            						case (int)2: {
HXLINE( 286)							self1->z = value;
            						}
            						break;
            						default:{
HXLINE( 286)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXDLIN( 286)		{
HXLINE( 286)			hx::MultEq(self1->x,s);
HXDLIN( 286)			hx::MultEq(self1->y,s);
HXDLIN( 286)			hx::MultEq(self1->z,s);
            		}
HXDLIN( 286)		{
HXLINE( 286)			hx::MultEq(self1->x,((Float)2.0));
HXDLIN( 286)			hx::MultEq(self1->y,((Float)2.0));
HXDLIN( 286)			hx::MultEq(self1->z,((Float)2.0));
            		}
HXDLIN( 286)		{
HXLINE( 286)			hx::SubEq(self->x,self1->x);
HXDLIN( 286)			hx::SubEq(self->y,self1->y);
HXDLIN( 286)			hx::SubEq(self->z,self1->z);
            		}
HXDLIN( 286)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_Impl__obj,reflect,return )

void Vector3_Impl__obj::orthoNormalize( ::hxmath::math::Vector3Default u, ::hxmath::math::Vector3Default v, ::hxmath::math::Vector3Default w){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","orthoNormalize",0x96aec720,"hxmath.math._Vector3.Vector3_Impl_.orthoNormalize","hxmath/math/Vector3.hx",298,0xc167cc7e)
            	HX_STACK_ARG(u,"u")
            	HX_STACK_ARG(v,"v")
            	HX_STACK_ARG(w,"w")
HXLINE( 299)		{
HXLINE( 299)			Float _hx_tmp = (((u->x * u->x) + (u->y * u->y)) + (u->z * u->z));
HXDLIN( 299)			HX_VARI( Float,length) = ::Math_obj::sqrt(_hx_tmp);
HXDLIN( 299)			if ((length > ((Float)0.0))) {
HXLINE( 299)				hx::DivEq(u->x,length);
HXDLIN( 299)				hx::DivEq(u->y,length);
HXDLIN( 299)				hx::DivEq(u->z,length);
            			}
            		}
HXLINE( 301)		{
HXLINE( 301)			HX_VARI(  ::hxmath::math::Vector3Default,self) =  ::hxmath::math::Vector3Default_obj::__new(v->x,v->y,v->z);
HXDLIN( 301)			HX_VARI( Float,s) = ((Float)(((self->x * u->x) + (self->y * u->y)) + (self->z * u->z)) / (Float)(((u->x * u->x) + (u->y * u->y)) + (u->z * u->z)));
HXDLIN( 301)			{
HXLINE( 301)				HX_VARI( Int,_g) = (int)0;
HXDLIN( 301)				while((_g < (int)3)){
HXLINE( 301)					HX_VARI( Int,i) = _g++;
HXDLIN( 301)					{
HXLINE( 301)						 ::Dynamic _hx_tmp1;
HXDLIN( 301)						switch((int)(i)){
            							case (int)0: {
HXLINE( 301)								_hx_tmp1 = u->x;
            							}
            							break;
            							case (int)1: {
HXLINE( 301)								_hx_tmp1 = u->y;
            							}
            							break;
            							case (int)2: {
HXLINE( 301)								_hx_tmp1 = u->z;
            							}
            							break;
            							default:{
HXLINE( 301)								HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            							}
            						}
HXDLIN( 301)						HX_VARI( Float,value) = ( (Float)(_hx_tmp1) );
HXDLIN( 301)						switch((int)(i)){
            							case (int)0: {
HXLINE( 301)								self->x = value;
            							}
            							break;
            							case (int)1: {
HXLINE( 301)								self->y = value;
            							}
            							break;
            							case (int)2: {
HXLINE( 301)								self->z = value;
            							}
            							break;
            							default:{
HXLINE( 301)								HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            							}
            						}
            					}
            				}
            			}
HXDLIN( 301)			{
HXLINE( 301)				hx::MultEq(self->x,s);
HXDLIN( 301)				hx::MultEq(self->y,s);
HXDLIN( 301)				hx::MultEq(self->z,s);
            			}
HXDLIN( 301)			hx::SubEq(v->x,self->x);
HXDLIN( 301)			hx::SubEq(v->y,self->y);
HXDLIN( 301)			hx::SubEq(v->z,self->z);
            		}
HXLINE( 302)		{
HXLINE( 302)			Float _hx_tmp2 = (((v->x * v->x) + (v->y * v->y)) + (v->z * v->z));
HXDLIN( 302)			HX_VARI_NAME( Float,length1,"length") = ::Math_obj::sqrt(_hx_tmp2);
HXDLIN( 302)			if ((length1 > ((Float)0.0))) {
HXLINE( 302)				hx::DivEq(v->x,length1);
HXDLIN( 302)				hx::DivEq(v->y,length1);
HXDLIN( 302)				hx::DivEq(v->z,length1);
            			}
            		}
HXLINE( 304)		{
HXLINE( 304)			HX_VARI_NAME(  ::hxmath::math::Vector3Default,self1,"self") =  ::hxmath::math::Vector3Default_obj::__new(w->x,w->y,w->z);
HXDLIN( 304)			HX_VARI_NAME( Float,s1,"s") = ((Float)(((self1->x * u->x) + (self1->y * u->y)) + (self1->z * u->z)) / (Float)(((u->x * u->x) + (u->y * u->y)) + (u->z * u->z)));
HXDLIN( 304)			{
HXLINE( 304)				HX_VARI_NAME( Int,_g1,"_g") = (int)0;
HXDLIN( 304)				while((_g1 < (int)3)){
HXLINE( 304)					HX_VARI_NAME( Int,i1,"i") = _g1++;
HXDLIN( 304)					{
HXLINE( 304)						 ::Dynamic _hx_tmp3;
HXDLIN( 304)						switch((int)(i1)){
            							case (int)0: {
HXLINE( 304)								_hx_tmp3 = u->x;
            							}
            							break;
            							case (int)1: {
HXLINE( 304)								_hx_tmp3 = u->y;
            							}
            							break;
            							case (int)2: {
HXLINE( 304)								_hx_tmp3 = u->z;
            							}
            							break;
            							default:{
HXLINE( 304)								HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            							}
            						}
HXDLIN( 304)						HX_VARI_NAME( Float,value1,"value") = ( (Float)(_hx_tmp3) );
HXDLIN( 304)						switch((int)(i1)){
            							case (int)0: {
HXLINE( 304)								self1->x = value1;
            							}
            							break;
            							case (int)1: {
HXLINE( 304)								self1->y = value1;
            							}
            							break;
            							case (int)2: {
HXLINE( 304)								self1->z = value1;
            							}
            							break;
            							default:{
HXLINE( 304)								HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            							}
            						}
            					}
            				}
            			}
HXDLIN( 304)			{
HXLINE( 304)				hx::MultEq(self1->x,s1);
HXDLIN( 304)				hx::MultEq(self1->y,s1);
HXDLIN( 304)				hx::MultEq(self1->z,s1);
            			}
HXDLIN( 304)			hx::SubEq(w->x,self1->x);
HXDLIN( 304)			hx::SubEq(w->y,self1->y);
HXDLIN( 304)			hx::SubEq(w->z,self1->z);
            		}
HXLINE( 305)		{
HXLINE( 305)			HX_VARI_NAME(  ::hxmath::math::Vector3Default,self2,"self") =  ::hxmath::math::Vector3Default_obj::__new(w->x,w->y,w->z);
HXDLIN( 305)			HX_VARI_NAME( Float,s2,"s") = ((Float)(((self2->x * v->x) + (self2->y * v->y)) + (self2->z * v->z)) / (Float)(((v->x * v->x) + (v->y * v->y)) + (v->z * v->z)));
HXDLIN( 305)			{
HXLINE( 305)				HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 305)				while((_g2 < (int)3)){
HXLINE( 305)					HX_VARI_NAME( Int,i2,"i") = _g2++;
HXDLIN( 305)					{
HXLINE( 305)						 ::Dynamic _hx_tmp4;
HXDLIN( 305)						switch((int)(i2)){
            							case (int)0: {
HXLINE( 305)								_hx_tmp4 = v->x;
            							}
            							break;
            							case (int)1: {
HXLINE( 305)								_hx_tmp4 = v->y;
            							}
            							break;
            							case (int)2: {
HXLINE( 305)								_hx_tmp4 = v->z;
            							}
            							break;
            							default:{
HXLINE( 305)								HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            							}
            						}
HXDLIN( 305)						HX_VARI_NAME( Float,value2,"value") = ( (Float)(_hx_tmp4) );
HXDLIN( 305)						switch((int)(i2)){
            							case (int)0: {
HXLINE( 305)								self2->x = value2;
            							}
            							break;
            							case (int)1: {
HXLINE( 305)								self2->y = value2;
            							}
            							break;
            							case (int)2: {
HXLINE( 305)								self2->z = value2;
            							}
            							break;
            							default:{
HXLINE( 305)								HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            							}
            						}
            					}
            				}
            			}
HXDLIN( 305)			{
HXLINE( 305)				hx::MultEq(self2->x,s2);
HXDLIN( 305)				hx::MultEq(self2->y,s2);
HXDLIN( 305)				hx::MultEq(self2->z,s2);
            			}
HXDLIN( 305)			hx::SubEq(w->x,self2->x);
HXDLIN( 305)			hx::SubEq(w->y,self2->y);
HXDLIN( 305)			hx::SubEq(w->z,self2->z);
            		}
HXLINE( 306)		{
HXLINE( 306)			Float _hx_tmp5 = (((w->x * w->x) + (w->y * w->y)) + (w->z * w->z));
HXDLIN( 306)			HX_VARI_NAME( Float,length2,"length") = ::Math_obj::sqrt(_hx_tmp5);
HXDLIN( 306)			if ((length2 > ((Float)0.0))) {
HXLINE( 306)				hx::DivEq(w->x,length2);
HXDLIN( 306)				hx::DivEq(w->y,length2);
HXDLIN( 306)				hx::DivEq(w->z,length2);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Vector3_Impl__obj,orthoNormalize,(void))

 ::hxmath::math::Vector3Default Vector3_Impl__obj::set( ::hxmath::math::Vector3Default this1,Float x,Float y,Float z){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","set",0x674f5fd7,"hxmath.math._Vector3.Vector3_Impl_.set","hxmath/math/Vector3.hx",318,0xc167cc7e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
HXLINE( 319)		HX_VARI(  ::hxmath::math::Vector3Default,self) = this1;
HXLINE( 321)		self->x = x;
HXLINE( 322)		self->y = y;
HXLINE( 323)		self->z = z;
HXLINE( 325)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Vector3_Impl__obj,set,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::crossWith( ::hxmath::math::Vector3Default this1, ::hxmath::math::Vector3Default a){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","crossWith",0x04a61b9b,"hxmath.math._Vector3.Vector3_Impl_.crossWith","hxmath/math/Vector3.hx",336,0xc167cc7e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(a,"a")
HXLINE( 337)		HX_VARI(  ::hxmath::math::Vector3Default,self) = this1;
HXLINE( 339)		HX_VARI( Float,newX) = ((self->y * a->z) - (self->z * a->y));
HXLINE( 340)		HX_VARI( Float,newY) = ((self->z * a->x) - (self->x * a->z));
HXLINE( 341)		HX_VARI( Float,newZ) = ((self->x * a->y) - (self->y * a->x));
HXLINE( 343)		self->x = newX;
HXLINE( 344)		self->y = newY;
HXLINE( 345)		self->z = newZ;
HXLINE( 347)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_Impl__obj,crossWith,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::multiplyWith( ::hxmath::math::Vector3Default this1,Float s){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","multiplyWith",0xa93ef375,"hxmath.math._Vector3.Vector3_Impl_.multiplyWith","hxmath/math/Vector3.hx",358,0xc167cc7e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(s,"s")
HXLINE( 359)		HX_VARI(  ::hxmath::math::Vector3Default,self) = this1;
HXLINE( 361)		hx::MultEq(self->x,s);
HXLINE( 362)		hx::MultEq(self->y,s);
HXLINE( 363)		hx::MultEq(self->z,s);
HXLINE( 365)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_Impl__obj,multiplyWith,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::divideWith( ::hxmath::math::Vector3Default this1,Float s){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","divideWith",0x575dde8a,"hxmath.math._Vector3.Vector3_Impl_.divideWith","hxmath/math/Vector3.hx",376,0xc167cc7e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(s,"s")
HXLINE( 377)		HX_VARI(  ::hxmath::math::Vector3Default,self) = this1;
HXLINE( 379)		hx::DivEq(self->x,s);
HXLINE( 380)		hx::DivEq(self->y,s);
HXLINE( 381)		hx::DivEq(self->z,s);
HXLINE( 383)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_Impl__obj,divideWith,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::addWith( ::hxmath::math::Vector3Default this1, ::hxmath::math::Vector3Default a){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","addWith",0x479c3b7c,"hxmath.math._Vector3.Vector3_Impl_.addWith","hxmath/math/Vector3.hx",394,0xc167cc7e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(a,"a")
HXLINE( 395)		HX_VARI(  ::hxmath::math::Vector3Default,self) = this1;
HXLINE( 397)		hx::AddEq(self->x,a->x);
HXLINE( 398)		hx::AddEq(self->y,a->y);
HXLINE( 399)		hx::AddEq(self->z,a->z);
HXLINE( 401)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_Impl__obj,addWith,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::subtractWith( ::hxmath::math::Vector3Default this1, ::hxmath::math::Vector3Default a){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","subtractWith",0xc99fbe65,"hxmath.math._Vector3.Vector3_Impl_.subtractWith","hxmath/math/Vector3.hx",412,0xc167cc7e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(a,"a")
HXLINE( 413)		HX_VARI(  ::hxmath::math::Vector3Default,self) = this1;
HXLINE( 415)		hx::SubEq(self->x,a->x);
HXLINE( 416)		hx::SubEq(self->y,a->y);
HXLINE( 417)		hx::SubEq(self->z,a->z);
HXLINE( 419)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_Impl__obj,subtractWith,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::maxWith( ::hxmath::math::Vector3Default this1, ::hxmath::math::Vector3Default a){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","maxWith",0x8b8f517f,"hxmath.math._Vector3.Vector3_Impl_.maxWith","hxmath/math/Vector3.hx",430,0xc167cc7e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(a,"a")
HXLINE( 431)		HX_VARI(  ::hxmath::math::Vector3Default,self) = this1;
HXLINE( 433)		self->x = ::Math_obj::max(self->x,a->x);
HXLINE( 434)		self->y = ::Math_obj::max(self->y,a->y);
HXLINE( 435)		self->z = ::Math_obj::max(self->z,a->z);
HXLINE( 437)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_Impl__obj,maxWith,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::minWith( ::hxmath::math::Vector3Default this1, ::hxmath::math::Vector3Default a){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","minWith",0xfc68676d,"hxmath.math._Vector3.Vector3_Impl_.minWith","hxmath/math/Vector3.hx",448,0xc167cc7e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(a,"a")
HXLINE( 449)		HX_VARI(  ::hxmath::math::Vector3Default,self) = this1;
HXLINE( 451)		self->x = ::Math_obj::min(self->x,a->x);
HXLINE( 452)		self->y = ::Math_obj::min(self->y,a->y);
HXLINE( 453)		self->z = ::Math_obj::min(self->z,a->z);
HXLINE( 455)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_Impl__obj,minWith,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::projectOnto( ::hxmath::math::Vector3Default this1, ::hxmath::math::Vector3Default a){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","projectOnto",0x5ab22d08,"hxmath.math._Vector3.Vector3_Impl_.projectOnto","hxmath/math/Vector3.hx",465,0xc167cc7e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(a,"a")
HXLINE( 466)		HX_VARI(  ::hxmath::math::Vector3Default,self) = this1;
HXLINE( 468)		HX_VARI( Float,s) = ((Float)(((self->x * a->x) + (self->y * a->y)) + (self->z * a->z)) / (Float)(((a->x * a->x) + (a->y * a->y)) + (a->z * a->z)));
HXLINE( 471)		{
HXLINE( 471)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 471)			while((_g < (int)3)){
HXLINE( 471)				HX_VARI( Int,i) = _g++;
HXDLIN( 471)				{
HXLINE( 471)					 ::Dynamic _hx_tmp;
HXDLIN( 471)					switch((int)(i)){
            						case (int)0: {
HXLINE( 471)							_hx_tmp = a->x;
            						}
            						break;
            						case (int)1: {
HXLINE( 471)							_hx_tmp = a->y;
            						}
            						break;
            						case (int)2: {
HXLINE( 471)							_hx_tmp = a->z;
            						}
            						break;
            						default:{
HXLINE( 471)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 471)					HX_VARI( Float,value) = ( (Float)(_hx_tmp) );
HXDLIN( 471)					switch((int)(i)){
            						case (int)0: {
HXLINE( 471)							self->x = value;
            						}
            						break;
            						case (int)1: {
HXLINE( 471)							self->y = value;
            						}
            						break;
            						case (int)2: {
HXLINE( 471)							self->z = value;
            						}
            						break;
            						default:{
HXLINE( 471)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXLINE( 472)		{
HXLINE( 472)			hx::MultEq(self->x,s);
HXDLIN( 472)			hx::MultEq(self->y,s);
HXDLIN( 472)			hx::MultEq(self->z,s);
            		}
HXLINE( 474)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_Impl__obj,projectOnto,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::projectOntoPlane( ::hxmath::math::Vector3Default this1, ::hxmath::math::Vector3Default normal){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","projectOntoPlane",0x39e10434,"hxmath.math._Vector3.Vector3_Impl_.projectOntoPlane","hxmath/math/Vector3.hx",484,0xc167cc7e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(normal,"normal")
HXLINE( 485)		HX_VARI(  ::hxmath::math::Vector3Default,self) = this1;
HXLINE( 487)		{
HXLINE( 487)			HX_VARI_NAME(  ::hxmath::math::Vector3Default,self1,"self") =  ::hxmath::math::Vector3Default_obj::__new(self->x,self->y,self->z);
HXDLIN( 487)			HX_VARI( Float,s) = ((Float)(((self1->x * normal->x) + (self1->y * normal->y)) + (self1->z * normal->z)) / (Float)(((normal->x * normal->x) + (normal->y * normal->y)) + (normal->z * normal->z)));
HXDLIN( 487)			{
HXLINE( 487)				HX_VARI( Int,_g) = (int)0;
HXDLIN( 487)				while((_g < (int)3)){
HXLINE( 487)					HX_VARI( Int,i) = _g++;
HXDLIN( 487)					{
HXLINE( 487)						 ::Dynamic _hx_tmp;
HXDLIN( 487)						switch((int)(i)){
            							case (int)0: {
HXLINE( 487)								_hx_tmp = normal->x;
            							}
            							break;
            							case (int)1: {
HXLINE( 487)								_hx_tmp = normal->y;
            							}
            							break;
            							case (int)2: {
HXLINE( 487)								_hx_tmp = normal->z;
            							}
            							break;
            							default:{
HXLINE( 487)								HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            							}
            						}
HXDLIN( 487)						HX_VARI( Float,value) = ( (Float)(_hx_tmp) );
HXDLIN( 487)						switch((int)(i)){
            							case (int)0: {
HXLINE( 487)								self1->x = value;
            							}
            							break;
            							case (int)1: {
HXLINE( 487)								self1->y = value;
            							}
            							break;
            							case (int)2: {
HXLINE( 487)								self1->z = value;
            							}
            							break;
            							default:{
HXLINE( 487)								HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            							}
            						}
            					}
            				}
            			}
HXDLIN( 487)			{
HXLINE( 487)				hx::MultEq(self1->x,s);
HXDLIN( 487)				hx::MultEq(self1->y,s);
HXDLIN( 487)				hx::MultEq(self1->z,s);
            			}
HXDLIN( 487)			hx::SubEq(self->x,self1->x);
HXDLIN( 487)			hx::SubEq(self->y,self1->y);
HXDLIN( 487)			hx::SubEq(self->z,self1->z);
            		}
HXLINE( 489)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_Impl__obj,projectOntoPlane,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::reflectBy( ::hxmath::math::Vector3Default this1, ::hxmath::math::Vector3Default normal){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","reflectBy",0x2ed56169,"hxmath.math._Vector3.Vector3_Impl_.reflectBy","hxmath/math/Vector3.hx",499,0xc167cc7e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(normal,"normal")
HXLINE( 500)		HX_VARI(  ::hxmath::math::Vector3Default,self) = this1;
HXLINE( 502)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self1,"self") =  ::hxmath::math::Vector3Default_obj::__new(self->x,self->y,self->z);
HXDLIN( 502)		HX_VARI( Float,s) = ((Float)(((self1->x * normal->x) + (self1->y * normal->y)) + (self1->z * normal->z)) / (Float)(((normal->x * normal->x) + (normal->y * normal->y)) + (normal->z * normal->z)));
HXDLIN( 502)		{
HXLINE( 502)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 502)			while((_g < (int)3)){
HXLINE( 502)				HX_VARI( Int,i) = _g++;
HXDLIN( 502)				{
HXLINE( 502)					 ::Dynamic _hx_tmp;
HXDLIN( 502)					switch((int)(i)){
            						case (int)0: {
HXLINE( 502)							_hx_tmp = normal->x;
            						}
            						break;
            						case (int)1: {
HXLINE( 502)							_hx_tmp = normal->y;
            						}
            						break;
            						case (int)2: {
HXLINE( 502)							_hx_tmp = normal->z;
            						}
            						break;
            						default:{
HXLINE( 502)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 502)					HX_VARI( Float,value) = ( (Float)(_hx_tmp) );
HXDLIN( 502)					switch((int)(i)){
            						case (int)0: {
HXLINE( 502)							self1->x = value;
            						}
            						break;
            						case (int)1: {
HXLINE( 502)							self1->y = value;
            						}
            						break;
            						case (int)2: {
HXLINE( 502)							self1->z = value;
            						}
            						break;
            						default:{
HXLINE( 502)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXDLIN( 502)		{
HXLINE( 502)			hx::MultEq(self1->x,s);
HXDLIN( 502)			hx::MultEq(self1->y,s);
HXDLIN( 502)			hx::MultEq(self1->z,s);
            		}
HXLINE( 503)		{
HXLINE( 503)			hx::MultEq(self1->x,((Float)2.0));
HXDLIN( 503)			hx::MultEq(self1->y,((Float)2.0));
HXDLIN( 503)			hx::MultEq(self1->z,((Float)2.0));
            		}
HXLINE( 505)		{
HXLINE( 505)			hx::SubEq(self->x,self1->x);
HXDLIN( 505)			hx::SubEq(self->y,self1->y);
HXDLIN( 505)			hx::SubEq(self->z,self1->z);
            		}
HXLINE( 507)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_Impl__obj,reflectBy,return )

void Vector3_Impl__obj::copyTo( ::hxmath::math::Vector3Default this1, ::hxmath::math::Vector3Default target){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","copyTo",0x8776277b,"hxmath.math._Vector3.Vector3_Impl_.copyTo","hxmath/math/Vector3.hx",517,0xc167cc7e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(target,"target")
HXLINE( 518)		HX_VARI(  ::hxmath::math::Vector3Default,self) = this1;
HXLINE( 520)		{
HXLINE( 520)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 520)			while((_g < (int)3)){
HXLINE( 520)				HX_VARI( Int,i) = _g++;
HXLINE( 522)				{
HXLINE( 522)					 ::Dynamic _hx_tmp;
HXDLIN( 522)					switch((int)(i)){
            						case (int)0: {
HXLINE( 522)							_hx_tmp = self->x;
            						}
            						break;
            						case (int)1: {
HXLINE( 522)							_hx_tmp = self->y;
            						}
            						break;
            						case (int)2: {
HXLINE( 522)							_hx_tmp = self->z;
            						}
            						break;
            						default:{
HXLINE( 522)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 522)					HX_VARI( Float,value) = ( (Float)(_hx_tmp) );
HXDLIN( 522)					switch((int)(i)){
            						case (int)0: {
HXLINE( 522)							target->x = value;
            						}
            						break;
            						case (int)1: {
HXLINE( 522)							target->y = value;
            						}
            						break;
            						case (int)2: {
HXLINE( 522)							target->z = value;
            						}
            						break;
            						default:{
HXLINE( 522)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_Impl__obj,copyTo,(void))

void Vector3_Impl__obj::copyToShape( ::hxmath::math::Vector3Default this1, ::Dynamic target){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","copyToShape",0xd50c2da6,"hxmath.math._Vector3.Vector3_Impl_.copyToShape","hxmath/math/Vector3.hx",532,0xc167cc7e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(target,"target")
HXLINE( 533)		HX_VARI(  ::hxmath::math::Vector3Default,self) = this1;
HXLINE( 535)		target->__SetField(HX_("x",78,00,00,00),self->x,hx::paccDynamic);
HXLINE( 536)		target->__SetField(HX_("y",79,00,00,00),self->y,hx::paccDynamic);
HXLINE( 537)		target->__SetField(HX_("z",7a,00,00,00),self->z,hx::paccDynamic);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_Impl__obj,copyToShape,(void))

void Vector3_Impl__obj::copyFromShape( ::hxmath::math::Vector3Default this1, ::Dynamic source){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","copyFromShape",0xec4c4b57,"hxmath.math._Vector3.Vector3_Impl_.copyFromShape","hxmath/math/Vector3.hx",546,0xc167cc7e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(source,"source")
HXLINE( 547)		HX_VARI(  ::hxmath::math::Vector3Default,self) = this1;
HXLINE( 549)		self->x = ( (Float)(source->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXLINE( 550)		self->y = ( (Float)(source->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXLINE( 551)		self->z = ( (Float)(source->__Field(HX_("z",7a,00,00,00),hx::paccDynamic)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_Impl__obj,copyFromShape,(void))

 ::hxmath::math::Vector3Default Vector3_Impl__obj::clone( ::hxmath::math::Vector3Default this1){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","clone",0x2ffc0ed2,"hxmath.math._Vector3.Vector3_Impl_.clone","hxmath/math/Vector3.hx",560,0xc167cc7e)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 561)		HX_VARI(  ::hxmath::math::Vector3Default,self) = this1;
HXLINE( 562)		return  ::hxmath::math::Vector3Default_obj::__new(self->x,self->y,self->z);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector3_Impl__obj,clone,return )

Float Vector3_Impl__obj::getArrayElement( ::hxmath::math::Vector3Default this1,Int i){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","getArrayElement",0x2906538e,"hxmath.math._Vector3.Vector3_Impl_.getArrayElement","hxmath/math/Vector3.hx",573,0xc167cc7e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(i,"i")
HXLINE( 574)		HX_VARI(  ::hxmath::math::Vector3Default,self) = this1;
HXLINE( 575)		switch((int)(i)){
            			case (int)0: {
HXLINE( 578)				return self->x;
            			}
            			break;
            			case (int)1: {
HXLINE( 580)				return self->y;
            			}
            			break;
            			case (int)2: {
HXLINE( 582)				return self->z;
            			}
            			break;
            			default:{
HXLINE( 584)				HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            			}
            		}
HXLINE( 575)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_Impl__obj,getArrayElement,return )

Float Vector3_Impl__obj::setArrayElement( ::hxmath::math::Vector3Default this1,Int i,Float value){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","setArrayElement",0x24d1d09a,"hxmath.math._Vector3.Vector3_Impl_.setArrayElement","hxmath/math/Vector3.hx",597,0xc167cc7e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(i,"i")
            	HX_STACK_ARG(value,"value")
HXLINE( 598)		HX_VARI(  ::hxmath::math::Vector3Default,self) = this1;
HXLINE( 599)		switch((int)(i)){
            			case (int)0: {
HXLINE( 602)				return (self->x = value);
            			}
            			break;
            			case (int)1: {
HXLINE( 604)				return (self->y = value);
            			}
            			break;
            			case (int)2: {
HXLINE( 606)				return (self->z = value);
            			}
            			break;
            			default:{
HXLINE( 608)				HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            			}
            		}
HXLINE( 599)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Vector3_Impl__obj,setArrayElement,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::applyNegate( ::hxmath::math::Vector3Default this1){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","applyNegate",0xd96a8305,"hxmath.math._Vector3.Vector3_Impl_.applyNegate","hxmath/math/Vector3.hx",618,0xc167cc7e)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 619)		HX_VARI(  ::hxmath::math::Vector3Default,self) = this1;
HXLINE( 621)		self->x = -(self->x);
HXLINE( 622)		self->y = -(self->y);
HXLINE( 623)		self->z = -(self->z);
HXLINE( 625)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector3_Impl__obj,applyNegate,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::applyScalarFunc( ::hxmath::math::Vector3Default this1, ::Dynamic func){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","applyScalarFunc",0xd543a353,"hxmath.math._Vector3.Vector3_Impl_.applyScalarFunc","hxmath/math/Vector3.hx",635,0xc167cc7e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(func,"func")
HXLINE( 636)		HX_VARI(  ::hxmath::math::Vector3Default,self) = this1;
HXLINE( 638)		{
HXLINE( 638)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 638)			while((_g < (int)3)){
HXLINE( 638)				HX_VARI( Int,i) = _g++;
HXLINE( 640)				{
HXLINE( 640)					 ::Dynamic _hx_tmp;
HXDLIN( 640)					switch((int)(i)){
            						case (int)0: {
HXLINE( 640)							_hx_tmp = self->x;
            						}
            						break;
            						case (int)1: {
HXLINE( 640)							_hx_tmp = self->y;
            						}
            						break;
            						case (int)2: {
HXLINE( 640)							_hx_tmp = self->z;
            						}
            						break;
            						default:{
HXLINE( 640)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 640)					HX_VARI( Float,value) = ( (Float)(func(( (Float)(_hx_tmp) ))) );
HXDLIN( 640)					switch((int)(i)){
            						case (int)0: {
HXLINE( 640)							self->x = value;
            						}
            						break;
            						case (int)1: {
HXLINE( 640)							self->y = value;
            						}
            						break;
            						case (int)2: {
HXLINE( 640)							self->z = value;
            						}
            						break;
            						default:{
HXLINE( 640)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXLINE( 643)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_Impl__obj,applyScalarFunc,return )

Float Vector3_Impl__obj::angleWith( ::hxmath::math::Vector3Default this1, ::hxmath::math::Vector3Default b){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","angleWith",0x5132256e,"hxmath.math._Vector3.Vector3_Impl_.angleWith","hxmath/math/Vector3.hx",653,0xc167cc7e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(b,"b")
HXLINE( 654)		HX_VARI(  ::hxmath::math::Vector3Default,self) = this1;
HXLINE( 655)		Float _hx_tmp = (((self->x * b->x) + (self->y * b->y)) + (self->z * b->z));
HXDLIN( 655)		Float _hx_tmp1 = (((self->x * self->x) + (self->y * self->y)) + (self->z * self->z));
HXDLIN( 655)		Float _hx_tmp2 = ::Math_obj::sqrt(_hx_tmp1);
HXDLIN( 655)		Float _hx_tmp3 = (((b->x * b->x) + (b->y * b->y)) + (b->z * b->z));
HXDLIN( 655)		Float _hx_tmp4 = ::Math_obj::sqrt(_hx_tmp3);
HXDLIN( 655)		return ::Math_obj::acos(((Float)_hx_tmp / (Float)(_hx_tmp2 * _hx_tmp4)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_Impl__obj,angleWith,return )

Float Vector3_Impl__obj::distanceTo( ::hxmath::math::Vector3Default this1, ::hxmath::math::Vector3Default b){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","distanceTo",0x78a7307b,"hxmath.math._Vector3.Vector3_Impl_.distanceTo","hxmath/math/Vector3.hx",665,0xc167cc7e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(b,"b")
HXLINE( 666)		HX_VARI(  ::hxmath::math::Vector3Default,self) = this1;
HXLINE( 668)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self1,"self") =  ::hxmath::math::Vector3Default_obj::__new(self->x,self->y,self->z);
HXDLIN( 668)		hx::SubEq(self1->x,b->x);
HXDLIN( 668)		hx::SubEq(self1->y,b->y);
HXDLIN( 668)		hx::SubEq(self1->z,b->z);
HXDLIN( 668)		HX_VARI_NAME(  ::hxmath::math::Vector3Default,self2,"self") = self1;
HXDLIN( 668)		Float _hx_tmp = (((self2->x * self2->x) + (self2->y * self2->y)) + (self2->z * self2->z));
HXDLIN( 668)		return ::Math_obj::sqrt(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_Impl__obj,distanceTo,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::normalize( ::hxmath::math::Vector3Default this1){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","normalize",0x30b59182,"hxmath.math._Vector3.Vector3_Impl_.normalize","hxmath/math/Vector3.hx",677,0xc167cc7e)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 678)		HX_VARI(  ::hxmath::math::Vector3Default,self) = this1;
HXLINE( 680)		Float _hx_tmp = (((self->x * self->x) + (self->y * self->y)) + (self->z * self->z));
HXDLIN( 680)		HX_VARI( Float,length) = ::Math_obj::sqrt(_hx_tmp);
HXLINE( 682)		if ((length > ((Float)0.0))) {
HXLINE( 684)			hx::DivEq(self->x,length);
HXDLIN( 684)			hx::DivEq(self->y,length);
HXDLIN( 684)			hx::DivEq(self->z,length);
            		}
HXLINE( 687)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector3_Impl__obj,normalize,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::normalizeTo( ::hxmath::math::Vector3Default this1,Float newLength){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","normalizeTo",0xf65ebf9d,"hxmath.math._Vector3.Vector3_Impl_.normalizeTo","hxmath/math/Vector3.hx",697,0xc167cc7e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newLength,"newLength")
HXLINE( 698)		HX_VARI(  ::hxmath::math::Vector3Default,self) = this1;
HXLINE( 700)		{
HXLINE( 700)			Float _hx_tmp = (((self->x * self->x) + (self->y * self->y)) + (self->z * self->z));
HXDLIN( 700)			HX_VARI( Float,length) = ::Math_obj::sqrt(_hx_tmp);
HXDLIN( 700)			if ((length > ((Float)0.0))) {
HXLINE( 700)				hx::DivEq(self->x,length);
HXDLIN( 700)				hx::DivEq(self->y,length);
HXDLIN( 700)				hx::DivEq(self->z,length);
            			}
            		}
HXLINE( 701)		{
HXLINE( 701)			hx::MultEq(self->x,newLength);
HXDLIN( 701)			hx::MultEq(self->y,newLength);
HXDLIN( 701)			hx::MultEq(self->z,newLength);
            		}
HXLINE( 703)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_Impl__obj,normalizeTo,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::clamp( ::hxmath::math::Vector3Default this1,Float min,Float max){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","clamp",0x2ff16e70,"hxmath.math._Vector3.Vector3_Impl_.clamp","hxmath/math/Vector3.hx",714,0xc167cc7e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(min,"min")
            	HX_STACK_ARG(max,"max")
HXLINE( 715)		HX_VARI(  ::hxmath::math::Vector3Default,self) = this1;
HXLINE( 717)		Float _hx_tmp = (((self->x * self->x) + (self->y * self->y)) + (self->z * self->z));
HXDLIN( 717)		HX_VARI( Float,length) = ::Math_obj::sqrt(_hx_tmp);
HXLINE( 719)		if ((length < min)) {
HXLINE( 721)			{
HXLINE( 721)				Float _hx_tmp1 = (((self->x * self->x) + (self->y * self->y)) + (self->z * self->z));
HXDLIN( 721)				HX_VARI_NAME( Float,length1,"length") = ::Math_obj::sqrt(_hx_tmp1);
HXDLIN( 721)				if ((length1 > ((Float)0.0))) {
HXLINE( 721)					hx::DivEq(self->x,length1);
HXDLIN( 721)					hx::DivEq(self->y,length1);
HXDLIN( 721)					hx::DivEq(self->z,length1);
            				}
            			}
HXDLIN( 721)			{
HXLINE( 721)				hx::MultEq(self->x,min);
HXDLIN( 721)				hx::MultEq(self->y,min);
HXDLIN( 721)				hx::MultEq(self->z,min);
            			}
            		}
            		else {
HXLINE( 723)			if ((length > max)) {
HXLINE( 725)				{
HXLINE( 725)					Float _hx_tmp2 = (((self->x * self->x) + (self->y * self->y)) + (self->z * self->z));
HXDLIN( 725)					HX_VARI_NAME( Float,length2,"length") = ::Math_obj::sqrt(_hx_tmp2);
HXDLIN( 725)					if ((length2 > ((Float)0.0))) {
HXLINE( 725)						hx::DivEq(self->x,length2);
HXDLIN( 725)						hx::DivEq(self->y,length2);
HXDLIN( 725)						hx::DivEq(self->z,length2);
            					}
            				}
HXDLIN( 725)				{
HXLINE( 725)					hx::MultEq(self->x,max);
HXDLIN( 725)					hx::MultEq(self->y,max);
HXDLIN( 725)					hx::MultEq(self->z,max);
            				}
            			}
            		}
HXLINE( 728)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Vector3_Impl__obj,clamp,return )

Float Vector3_Impl__obj::get_length( ::hxmath::math::Vector3Default this1){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","get_length",0x7c49611a,"hxmath.math._Vector3.Vector3_Impl_.get_length","hxmath/math/Vector3.hx",732,0xc167cc7e)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 733)		HX_VARI(  ::hxmath::math::Vector3Default,self) = this1;
HXLINE( 734)		Float _hx_tmp = (((self->x * self->x) + (self->y * self->y)) + (self->z * self->z));
HXDLIN( 734)		return ::Math_obj::sqrt(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector3_Impl__obj,get_length,return )

Float Vector3_Impl__obj::get_lengthSq( ::hxmath::math::Vector3Default this1){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","get_lengthSq",0x2a37a458,"hxmath.math._Vector3.Vector3_Impl_.get_lengthSq","hxmath/math/Vector3.hx",738,0xc167cc7e)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 739)		HX_VARI(  ::hxmath::math::Vector3Default,self) = this1;
HXLINE( 740)		return (((self->x * self->x) + (self->y * self->y)) + (self->z * self->z));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vector3_Impl__obj,get_lengthSq,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::get_zero(){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","get_zero",0xedf7a65c,"hxmath.math._Vector3.Vector3_Impl_.get_zero","hxmath/math/Vector3.hx",745,0xc167cc7e)
HXLINE( 745)		return  ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vector3_Impl__obj,get_zero,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::get_xAxis(){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","get_xAxis",0x0c259b85,"hxmath.math._Vector3.Vector3_Impl_.get_xAxis","hxmath/math/Vector3.hx",750,0xc167cc7e)
HXLINE( 750)		return  ::hxmath::math::Vector3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vector3_Impl__obj,get_xAxis,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::get_yAxis(){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","get_yAxis",0x9f8c3006,"hxmath.math._Vector3.Vector3_Impl_.get_yAxis","hxmath/math/Vector3.hx",755,0xc167cc7e)
HXLINE( 755)		return  ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)1.0),((Float)0.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vector3_Impl__obj,get_yAxis,return )

 ::hxmath::math::Vector3Default Vector3_Impl__obj::get_zAxis(){
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","get_zAxis",0x32f2c487,"hxmath.math._Vector3.Vector3_Impl_.get_zAxis","hxmath/math/Vector3.hx",760,0xc167cc7e)
HXLINE( 760)		return  ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)1.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vector3_Impl__obj,get_zAxis,return )


Vector3_Impl__obj::Vector3_Impl__obj()
{
}

bool Vector3_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"dot") ) { outValue = dot_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"max") ) { outValue = max_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"min") ) { outValue = min_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lerp") ) { outValue = lerp_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"cross") ) { outValue = cross_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clone") ) { outValue = clone_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clamp") ) { outValue = clamp_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"divide") ) { outValue = divide_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"negate") ) { outValue = negate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyTo") ) { outValue = copyTo_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"project") ) { outValue = project_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"reflect") ) { outValue = reflect_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addWith") ) { outValue = addWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"maxWith") ) { outValue = maxWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"minWith") ) { outValue = minWith_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"multiply") ) { outValue = multiply_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subtract") ) { outValue = subtract_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_zero") ) { outValue = get_zero_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromArray") ) { outValue = fromArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"crossWith") ) { outValue = crossWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"reflectBy") ) { outValue = reflectBy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"angleWith") ) { outValue = angleWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"normalize") ) { outValue = normalize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_xAxis") ) { outValue = get_xAxis_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_yAxis") ) { outValue = get_yAxis_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_zAxis") ) { outValue = get_zAxis_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"divideWith") ) { outValue = divideWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"distanceTo") ) { outValue = distanceTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_length") ) { outValue = get_length_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"projectOnto") ) { outValue = projectOnto_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyToShape") ) { outValue = copyToShape_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"applyNegate") ) { outValue = applyNegate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"normalizeTo") ) { outValue = normalizeTo_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"multiplyWith") ) { outValue = multiplyWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subtractWith") ) { outValue = subtractWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_lengthSq") ) { outValue = get_lengthSq_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"copyFromShape") ) { outValue = copyFromShape_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"orthoNormalize") ) { outValue = orthoNormalize_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getArrayElement") ) { outValue = getArrayElement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setArrayElement") ) { outValue = setArrayElement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"applyScalarFunc") ) { outValue = applyScalarFunc_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"fromVector3Shape") ) { outValue = fromVector3Shape_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"projectOntoPlane") ) { outValue = projectOntoPlane_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Vector3_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo Vector3_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Vector3_Impl__obj::elementCount,HX_HCSTRING("elementCount","\x73","\x1c","\x9d","\xaa")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Vector3_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Vector3_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Vector3_Impl__obj::elementCount,"elementCount");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Vector3_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Vector3_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Vector3_Impl__obj::elementCount,"elementCount");
};

#endif

hx::Class Vector3_Impl__obj::__mClass;

static ::String Vector3_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("elementCount","\x73","\x1c","\x9d","\xaa"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("fromArray","\xcf","\x57","\x18","\xda"),
	HX_HCSTRING("fromVector3Shape","\x7b","\x47","\x85","\x76"),
	HX_HCSTRING("dot","\x89","\x42","\x4c","\x00"),
	HX_HCSTRING("cross","\x80","\x5f","\x5a","\x4c"),
	HX_HCSTRING("multiply","\x24","\xe2","\x8c","\x9a"),
	HX_HCSTRING("divide","\x79","\x2f","\x12","\xbf"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("subtract","\x14","\x75","\x11","\xf8"),
	HX_HCSTRING("negate","\xc2","\x41","\x19","\x67"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("lerp","\x77","\x12","\xb0","\x47"),
	HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"),
	HX_HCSTRING("min","\x92","\x11","\x53","\x00"),
	HX_HCSTRING("project","\xd9","\x12","\xeb","\xf5"),
	HX_HCSTRING("reflect","\x3d","\x84","\x29","\xe9"),
	HX_HCSTRING("orthoNormalize","\x35","\x59","\xb6","\x4b"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("crossWith","\xa6","\xc1","\x91","\x7f"),
	HX_HCSTRING("multiplyWith","\x4a","\x66","\xe4","\x53"),
	HX_HCSTRING("divideWith","\x1f","\x82","\xa3","\x6a"),
	HX_HCSTRING("addWith","\xc7","\xb8","\x35","\x8b"),
	HX_HCSTRING("subtractWith","\x3a","\x31","\x45","\x74"),
	HX_HCSTRING("maxWith","\xca","\xce","\x28","\xcf"),
	HX_HCSTRING("minWith","\xb8","\xe4","\x01","\x40"),
	HX_HCSTRING("projectOnto","\xd3","\xab","\x5b","\x24"),
	HX_HCSTRING("projectOntoPlane","\x89","\x05","\x81","\xed"),
	HX_HCSTRING("reflectBy","\x74","\x07","\xc1","\xa9"),
	HX_HCSTRING("copyTo","\x90","\x1c","\x33","\xc9"),
	HX_HCSTRING("copyToShape","\x71","\xac","\xb5","\x9e"),
	HX_HCSTRING("copyFromShape","\xe2","\x52","\x6b","\x92"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("getArrayElement","\xd9","\x93","\x9e","\xda"),
	HX_HCSTRING("setArrayElement","\xe5","\x10","\x6a","\xd6"),
	HX_HCSTRING("applyNegate","\xd0","\x01","\x14","\xa3"),
	HX_HCSTRING("applyScalarFunc","\x9e","\xe3","\xdb","\x86"),
	HX_HCSTRING("angleWith","\x79","\xcb","\x1d","\xcc"),
	HX_HCSTRING("distanceTo","\x10","\xd4","\xec","\x8b"),
	HX_HCSTRING("normalize","\x8d","\x37","\xa1","\xab"),
	HX_HCSTRING("normalizeTo","\x68","\x3e","\x08","\xc0"),
	HX_HCSTRING("clamp","\xfb","\x72","\x58","\x48"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("get_lengthSq","\x2d","\x17","\xdd","\xd4"),
	HX_HCSTRING("get_zero","\xb1","\xca","\xab","\xd0"),
	HX_HCSTRING("get_xAxis","\x90","\x41","\x11","\x87"),
	HX_HCSTRING("get_yAxis","\x11","\xd6","\x77","\x1a"),
	HX_HCSTRING("get_zAxis","\x92","\x6a","\xde","\xad"),
	::String(null())
};

void Vector3_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hxmath.math._Vector3.Vector3_Impl_","\x23","\xa6","\x3e","\xa6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Vector3_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Vector3_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Vector3_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Vector3_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Vector3_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Vector3_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Vector3_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Vector3_Impl__obj::__boot()
{
{
            	HX_STACK_FRAME("hxmath.math._Vector3.Vector3_Impl_","boot",0xf2ef6e5d,"hxmath.math._Vector3.Vector3_Impl_.boot","hxmath/math/Vector3.hx",41,0xc167cc7e)
HXLINE(  41)		elementCount = (int)3;
            	}
}

} // end namespace hxmath
} // end namespace math
} // end namespace _Vector3
