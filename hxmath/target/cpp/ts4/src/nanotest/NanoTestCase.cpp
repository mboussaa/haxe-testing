// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_CallStack
#include <haxe/CallStack.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_nanotest_NanoTestAssertResult
#include <nanotest/NanoTestAssertResult.h>
#endif
#ifndef INCLUDED_nanotest_NanoTestCase
#include <nanotest/NanoTestCase.h>
#endif
#ifndef INCLUDED_nanotest_NanoTestStatus
#include <nanotest/NanoTestStatus.h>
#endif

namespace nanotest{

void NanoTestCase_obj::__construct( ::Dynamic posInfos){
            	HX_STACK_FRAME("nanotest.NanoTestCase","new",0x46b8d770,"nanotest.NanoTestCase.new","nanotest/NanoTestCase.hx",30,0xa2c50f1f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(posInfos,"posInfos")
HXLINE(  30)		this->posInfos = posInfos;
            	}

Dynamic NanoTestCase_obj::__CreateEmpty() { return new NanoTestCase_obj; }

hx::ObjectPtr< NanoTestCase_obj > NanoTestCase_obj::__new( ::Dynamic posInfos)
{
	hx::ObjectPtr< NanoTestCase_obj > _hx_result = new NanoTestCase_obj();
	_hx_result->__construct(posInfos);
	return _hx_result;
}

Dynamic NanoTestCase_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NanoTestCase_obj > _hx_result = new NanoTestCase_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void NanoTestCase_obj::globalTearDown(){
            	HX_STACK_FRAME("nanotest.NanoTestCase","globalTearDown",0x49f09197,"nanotest.NanoTestCase.globalTearDown","nanotest/NanoTestCase.hx",33,0xa2c50f1f)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(NanoTestCase_obj,globalTearDown,(void))

void NanoTestCase_obj::globalSetup(){
            	HX_STACK_FRAME("nanotest.NanoTestCase","globalSetup",0xcec89d2a,"nanotest.NanoTestCase.globalSetup","nanotest/NanoTestCase.hx",34,0xa2c50f1f)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(NanoTestCase_obj,globalSetup,(void))

void NanoTestCase_obj::tearDown(){
            	HX_STACK_FRAME("nanotest.NanoTestCase","tearDown",0x3d1e3514,"nanotest.NanoTestCase.tearDown","nanotest/NanoTestCase.hx",35,0xa2c50f1f)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(NanoTestCase_obj,tearDown,(void))

void NanoTestCase_obj::setup(){
            	HX_STACK_FRAME("nanotest.NanoTestCase","setup",0xe930998d,"nanotest.NanoTestCase.setup","nanotest/NanoTestCase.hx",36,0xa2c50f1f)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(NanoTestCase_obj,setup,(void))

::Array< ::Dynamic> NanoTestCase_obj::run( ::Dynamic print){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0, ::nanotest::NanoTestCase,_gthis, ::Dynamic,print,::Array< ::Dynamic>,results) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("nanotest.NanoTestCase","run",0x46bbee5b,"nanotest.NanoTestCase.run","nanotest/NanoTestCase.hx",43,0xa2c50f1f)
HXLINE(  44)			Bool _hx_tmp = ( (Bool)(_gthis->currentResult->__Field(HX_("error",c8,cb,29,73),hx::paccDynamic)) );
HXDLIN(  44)			if (_hx_tmp) {
HXLINE(  45)				print(HX_("E",45,00,00,00));
            			}
            			else {
HXLINE(  46)				Bool _hx_tmp1 = ( (Bool)(_gthis->currentResult->__Field(HX_("failed",bd,c5,fe,e7),hx::paccDynamic)) );
HXDLIN(  46)				if (_hx_tmp1) {
HXLINE(  47)					print(HX_("F",46,00,00,00));
            				}
            				else {
HXLINE(  49)					print(HX_(".",2e,00,00,00));
            				}
            			}
HXLINE(  51)			results->push(_gthis->currentResult);
HXLINE(  52)			_gthis->currentResult = null();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACK_FRAME("nanotest.NanoTestCase","run",0x46bbee5b,"nanotest.NanoTestCase.run","nanotest/NanoTestCase.hx",38,0xa2c50f1f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(print,"print")
HXLINE(  38)		HX_VARI(  ::nanotest::NanoTestCase,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(  39)		HX_VARI( ::Array< ::Dynamic>,results) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  40)		HX_VARI( hx::Class,cl) = ::Type_obj::getClass(hx::ObjectPtr<OBJ_>(this));
HXLINE(  41)		HX_VARI( ::Array< ::String >,fields) = ::Type_obj::getInstanceFields(cl);
HXLINE(  43)		HX_VARI(  ::Dynamic,closeResult) =  ::Dynamic(new _hx_Closure_0(_gthis,print,results));
HXLINE(  55)		print(((HX_("Class: ",be,50,e2,36) + ::Type_obj::getClassName(cl)) + HX_(" ",20,00,00,00)));
HXLINE(  57)		this->globalSetup();
HXLINE(  58)		if (hx::IsNotNull( this->currentResult )) {
HXLINE(  59)			closeResult();
            		}
HXLINE(  62)		{
HXLINE(  62)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  62)			while((_g < fields->length)){
HXLINE(  62)				HX_VARI( ::String,fname) = fields->__get(_g);
HXDLIN(  62)				++_g;
HXLINE(  63)				HX_VARI(  ::Dynamic,field) = ::Reflect_obj::field(hx::ObjectPtr<OBJ_>(this),fname);
HXLINE(  64)				Bool _hx_tmp2;
HXDLIN(  64)				Bool _hx_tmp3 = ::StringTools_obj::startsWith(fname,HX_("test",52,c8,f9,4c));
HXDLIN(  64)				if (_hx_tmp3) {
HXLINE(  64)					_hx_tmp2 = ::Reflect_obj::isFunction(field);
            				}
            				else {
HXLINE(  64)					_hx_tmp2 = false;
            				}
HXDLIN(  64)				if (_hx_tmp2) {
HXLINE(  65)					this->currentResult =  ::Dynamic(hx::Anon_obj::Create(7)
            						->setFixed(0,HX_("className",a3,92,3d,dc),::Type_obj::getClassName(cl))
            						->setFixed(1,HX_("failed",bd,c5,fe,e7),false)
            						->setFixed(2,HX_("status",32,e7,fb,05),::Array_obj< ::Dynamic>::__new(0))
            						->setFixed(3,HX_("method",e1,f6,5a,09),fname)
            						->setFixed(4,HX_("async",3c,ff,3d,26),false)
            						->setFixed(5,HX_("testCase",22,a4,ec,44),hx::ObjectPtr<OBJ_>(this))
            						->setFixed(6,HX_("error",c8,cb,29,73),false));
HXLINE(  75)					this->setup();
HXLINE(  78)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  78)						::Reflect_obj::callMethod(hx::ObjectPtr<OBJ_>(this),field,::cpp::VirtualArray_obj::__new(0));
            					}
            					catch( ::Dynamic _hx_e){
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic e = _hx_e;
HXLINE(  80)							this->error(e);
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
HXLINE(  82)					this->tearDown();
HXLINE(  83)					closeResult();
            				}
            			}
            		}
HXLINE(  87)		this->globalTearDown();
HXLINE(  89)		print(HX_("\n",0a,00,00,00));
HXLINE(  90)		return results;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NanoTestCase_obj,run,return )

 ::nanotest::NanoTestAssertResult NanoTestCase_obj::assertTrue(Bool b, ::Dynamic p){
            	HX_STACK_FRAME("nanotest.NanoTestCase","assertTrue",0xc3d2f024,"nanotest.NanoTestCase.assertTrue","nanotest/NanoTestCase.hx",94,0xa2c50f1f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(p,"p")
HXLINE(  94)		if ((b == false)) {
HXLINE(  94)			return this->fail(HX_("expected true but was false",23,26,7c,7d),p);
            		}
            		else {
HXLINE(  94)			return this->success(p);
            		}
HXDLIN(  94)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(NanoTestCase_obj,assertTrue,return )

 ::nanotest::NanoTestAssertResult NanoTestCase_obj::assertFalse(Bool b, ::Dynamic p){
            	HX_STACK_FRAME("nanotest.NanoTestCase","assertFalse",0x79dfa80d,"nanotest.NanoTestCase.assertFalse","nanotest/NanoTestCase.hx",102,0xa2c50f1f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(p,"p")
HXLINE( 102)		if ((b == true)) {
HXLINE( 102)			return this->fail(HX_("expected false but was true",a9,e3,03,60),p);
            		}
            		else {
HXLINE( 102)			return this->success(p);
            		}
HXDLIN( 102)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(NanoTestCase_obj,assertFalse,return )

 ::nanotest::NanoTestAssertResult NanoTestCase_obj::assertEquals( ::Dynamic expected, ::Dynamic actual, ::Dynamic p){
            	HX_STACK_FRAME("nanotest.NanoTestCase","assertEquals",0xffc69895,"nanotest.NanoTestCase.assertEquals","nanotest/NanoTestCase.hx",110,0xa2c50f1f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(expected,"expected")
            	HX_STACK_ARG(actual,"actual")
            	HX_STACK_ARG(p,"p")
HXLINE( 110)		Bool _hx_tmp = ::Reflect_obj::isEnumValue(expected);
HXDLIN( 110)		if (_hx_tmp) {
HXLINE( 111)			if (!(::Type_obj::enumEq(actual,expected))) {
HXLINE( 112)				::String _hx_tmp1 = ::nanotest::NanoTestCase_obj::format(expected);
HXDLIN( 112)				::String _hx_tmp2 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp1) + HX_(" but was ",36,e4,f6,61));
HXDLIN( 112)				::String _hx_tmp3 = ::nanotest::NanoTestCase_obj::format(actual);
HXLINE( 110)				return this->fail((_hx_tmp2 + _hx_tmp3),p);
            			}
            			else {
HXLINE( 110)				return this->success(p);
            			}
            		}
            		else {
HXLINE( 117)			if (hx::IsNotEq( actual,expected )) {
HXLINE( 118)				::String _hx_tmp4 = ::nanotest::NanoTestCase_obj::format(expected);
HXDLIN( 118)				::String _hx_tmp5 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp4) + HX_(" but was ",36,e4,f6,61));
HXDLIN( 118)				::String _hx_tmp6 = ::nanotest::NanoTestCase_obj::format(actual);
HXLINE( 110)				return this->fail((_hx_tmp5 + _hx_tmp6),p);
            			}
            			else {
HXLINE( 110)				return this->success(p);
            			}
            		}
HXDLIN( 110)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(NanoTestCase_obj,assertEquals,return )

 ::nanotest::NanoTestAssertResult NanoTestCase_obj::assertNotEquals( ::Dynamic notExpected, ::Dynamic actual, ::Dynamic p){
            	HX_STACK_FRAME("nanotest.NanoTestCase","assertNotEquals",0xfa06bb1c,"nanotest.NanoTestCase.assertNotEquals","nanotest/NanoTestCase.hx",126,0xa2c50f1f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(notExpected,"notExpected")
            	HX_STACK_ARG(actual,"actual")
            	HX_STACK_ARG(p,"p")
HXLINE( 126)		Bool _hx_tmp = ::Reflect_obj::isEnumValue(notExpected);
HXDLIN( 126)		if (_hx_tmp) {
HXLINE( 127)			if (::Type_obj::enumEq(actual,notExpected)) {
HXLINE( 128)				::String _hx_tmp1 = ::nanotest::NanoTestCase_obj::format(notExpected);
HXDLIN( 128)				::String _hx_tmp2 = ((HX_("expected not ",55,06,19,2d) + _hx_tmp1) + HX_(" but was ",36,e4,f6,61));
HXDLIN( 128)				::String _hx_tmp3 = ::nanotest::NanoTestCase_obj::format(actual);
HXLINE( 126)				return this->fail((_hx_tmp2 + _hx_tmp3),p);
            			}
            			else {
HXLINE( 126)				return this->success(p);
            			}
            		}
            		else {
HXLINE( 133)			if (hx::IsEq( actual,notExpected )) {
HXLINE( 134)				::String _hx_tmp4 = ::nanotest::NanoTestCase_obj::format(notExpected);
HXDLIN( 134)				::String _hx_tmp5 = ((HX_("expected not ",55,06,19,2d) + _hx_tmp4) + HX_(" but was ",36,e4,f6,61));
HXDLIN( 134)				::String _hx_tmp6 = ::nanotest::NanoTestCase_obj::format(actual);
HXLINE( 126)				return this->fail((_hx_tmp5 + _hx_tmp6),p);
            			}
            			else {
HXLINE( 126)				return this->success(p);
            			}
            		}
HXDLIN( 126)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(NanoTestCase_obj,assertNotEquals,return )

 ::nanotest::NanoTestAssertResult NanoTestCase_obj::assertThrows( ::Dynamic func, ::Dynamic isSuccess, ::Dynamic p){
            	HX_STACK_FRAME("nanotest.NanoTestCase","assertThrows",0xce94cee3,"nanotest.NanoTestCase.assertThrows","nanotest/NanoTestCase.hx",141,0xa2c50f1f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(func,"func")
            	HX_STACK_ARG(isSuccess,"isSuccess")
            	HX_STACK_ARG(p,"p")
HXLINE( 143)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 143)			func();
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic d = _hx_e;
HXLINE( 145)				Bool _hx_tmp;
HXDLIN( 145)				if (hx::IsNotNull( isSuccess )) {
HXLINE( 145)					_hx_tmp = ( (Bool)(isSuccess(d)) );
            				}
            				else {
HXLINE( 145)					_hx_tmp = true;
            				}
HXDLIN( 145)				if (_hx_tmp) {
HXLINE( 146)					return this->success(p);
            				}
            				else {
HXLINE( 148)					::String _hx_tmp1 = ::nanotest::NanoTestCase_obj::format(d);
HXDLIN( 148)					HX_VARI(  ::nanotest::NanoTestAssertResult,f) = this->fail((HX_("catched illeagal exception ",fe,19,69,01) + _hx_tmp1),p);
HXLINE( 149)					this->error(d);
HXLINE( 150)					return f;
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 154)		return this->fail(HX_("expected to throw exception but didn't",c3,fb,2a,7b),p);
            	}


HX_DEFINE_DYNAMIC_FUNC3(NanoTestCase_obj,assertThrows,return )

 ::nanotest::NanoTestAssertResult NanoTestCase_obj::fail(::String message, ::Dynamic p){
            	HX_STACK_FRAME("nanotest.NanoTestCase","fail",0x95b6e0ce,"nanotest.NanoTestCase.fail","nanotest/NanoTestCase.hx",157,0xa2c50f1f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(message,"message")
            	HX_STACK_ARG(p,"p")
HXLINE( 158)		if (hx::IsNull( this->currentResult )) {
HXLINE( 158)			this->_openPreprocessResult();
            		}
HXLINE( 159)		this->currentResult->__SetField(HX_("failed",bd,c5,fe,e7),true,hx::paccDynamic);
HXLINE( 161)		HX_VARI( Int,i) = ( (::Array< ::Dynamic>)(this->currentResult->__Field(HX_("status",32,e7,fb,05),hx::paccDynamic)) )->length;
HXLINE( 162)		HX_VARI( ::hx::EnumBase,status) = ::nanotest::NanoTestStatus_obj::FAIL(message,p);
HXLINE( 163)		( (::Array< ::Dynamic>)(this->currentResult->__Field(HX_("status",32,e7,fb,05),hx::paccDynamic)) )->push(status);
HXLINE( 164)		return  ::nanotest::NanoTestAssertResult_obj::__new(this->currentResult,i);
            	}


HX_DEFINE_DYNAMIC_FUNC2(NanoTestCase_obj,fail,return )

 ::nanotest::NanoTestAssertResult NanoTestCase_obj::success( ::Dynamic p){
            	HX_STACK_FRAME("nanotest.NanoTestCase","success",0x99abf4d3,"nanotest.NanoTestCase.success","nanotest/NanoTestCase.hx",167,0xa2c50f1f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(p,"p")
HXLINE( 168)		if (hx::IsNull( this->currentResult )) {
HXLINE( 168)			this->_openPreprocessResult();
            		}
HXLINE( 170)		HX_VARI( Int,i) = ( (::Array< ::Dynamic>)(this->currentResult->__Field(HX_("status",32,e7,fb,05),hx::paccDynamic)) )->length;
HXLINE( 171)		HX_VARI( ::hx::EnumBase,status) = ::nanotest::NanoTestStatus_obj::SUCCESS(p);
HXLINE( 172)		( (::Array< ::Dynamic>)(this->currentResult->__Field(HX_("status",32,e7,fb,05),hx::paccDynamic)) )->push(status);
HXLINE( 173)		return  ::nanotest::NanoTestAssertResult_obj::__new(this->currentResult,i);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NanoTestCase_obj,success,return )

 ::nanotest::NanoTestAssertResult NanoTestCase_obj::error( ::Dynamic e){
            	HX_STACK_FRAME("nanotest.NanoTestCase","error",0xe22ab6d8,"nanotest.NanoTestCase.error","nanotest/NanoTestCase.hx",176,0xa2c50f1f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(e,"e")
HXLINE( 177)		if (hx::IsNull( this->currentResult )) {
HXLINE( 177)			this->_openPreprocessResult();
            		}
HXLINE( 178)		this->currentResult->__SetField(HX_("failed",bd,c5,fe,e7),true,hx::paccDynamic);
HXLINE( 179)		this->currentResult->__SetField(HX_("error",c8,cb,29,73),true,hx::paccDynamic);
HXLINE( 188)		HX_VARI( ::String,message) = ::Std_obj::string(e);
HXLINE( 191)		HX_VARI( Int,i) = ( (::Array< ::Dynamic>)(this->currentResult->__Field(HX_("status",32,e7,fb,05),hx::paccDynamic)) )->length;
HXLINE( 192)		::Array< ::Dynamic> _hx_tmp = ::haxe::CallStack_obj::exceptionStack();
HXDLIN( 192)		HX_VARI( ::hx::EnumBase,status) = ::nanotest::NanoTestStatus_obj::ERROR(message,_hx_tmp);
HXLINE( 193)		( (::Array< ::Dynamic>)(this->currentResult->__Field(HX_("status",32,e7,fb,05),hx::paccDynamic)) )->push(status);
HXLINE( 194)		return  ::nanotest::NanoTestAssertResult_obj::__new(this->currentResult,i);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NanoTestCase_obj,error,return )

void NanoTestCase_obj::_openPreprocessResult(){
            	HX_STACK_FRAME("nanotest.NanoTestCase","_openPreprocessResult",0x44802b82,"nanotest.NanoTestCase._openPreprocessResult","nanotest/NanoTestCase.hx",198,0xa2c50f1f)
            	HX_STACK_THIS(this)
HXLINE( 199)		hx::Class _hx_tmp = ::Type_obj::getClass(hx::ObjectPtr<OBJ_>(this));
HXLINE( 198)		this->currentResult =  ::Dynamic(hx::Anon_obj::Create(7)
            			->setFixed(0,HX_("className",a3,92,3d,dc),::Type_obj::getClassName(_hx_tmp))
            			->setFixed(1,HX_("failed",bd,c5,fe,e7),false)
            			->setFixed(2,HX_("status",32,e7,fb,05),::Array_obj< ::Dynamic>::__new(0))
            			->setFixed(3,HX_("method",e1,f6,5a,09),null())
            			->setFixed(4,HX_("async",3c,ff,3d,26),true)
            			->setFixed(5,HX_("testCase",22,a4,ec,44),hx::ObjectPtr<OBJ_>(this))
            			->setFixed(6,HX_("error",c8,cb,29,73),false));
            	}


HX_DEFINE_DYNAMIC_FUNC0(NanoTestCase_obj,_openPreprocessResult,(void))

::String NanoTestCase_obj::ASSERT_TRUE_ERROR;

::String NanoTestCase_obj::ASSERT_FALSE_ERROR;

::String NanoTestCase_obj::ASSERT_THROWS_ERROR;

::String NanoTestCase_obj::ASSERT_THROWS_ILLEGAL_EXCEPTION( ::Dynamic actual){
            	HX_STACK_FRAME("nanotest.NanoTestCase","ASSERT_THROWS_ILLEGAL_EXCEPTION",0xc70e0e3d,"nanotest.NanoTestCase.ASSERT_THROWS_ILLEGAL_EXCEPTION","nanotest/NanoTestCase.hx",15,0xa2c50f1f)
            	HX_STACK_ARG(actual,"actual")
HXLINE(  15)		::String _hx_tmp = ::nanotest::NanoTestCase_obj::format(actual);
HXDLIN(  15)		return (HX_("catched illeagal exception ",fe,19,69,01) + _hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NanoTestCase_obj,ASSERT_THROWS_ILLEGAL_EXCEPTION,return )

::String NanoTestCase_obj::ASSERT_EQUALS_ERROR( ::Dynamic expected, ::Dynamic actual){
            	HX_STACK_FRAME("nanotest.NanoTestCase","ASSERT_EQUALS_ERROR",0x2474a1d1,"nanotest.NanoTestCase.ASSERT_EQUALS_ERROR","nanotest/NanoTestCase.hx",18,0xa2c50f1f)
            	HX_STACK_ARG(expected,"expected")
            	HX_STACK_ARG(actual,"actual")
HXLINE(  18)		::String _hx_tmp = ::nanotest::NanoTestCase_obj::format(expected);
HXDLIN(  18)		::String _hx_tmp1 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp) + HX_(" but was ",36,e4,f6,61));
HXDLIN(  18)		::String _hx_tmp2 = ::nanotest::NanoTestCase_obj::format(actual);
HXDLIN(  18)		return (_hx_tmp1 + _hx_tmp2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NanoTestCase_obj,ASSERT_EQUALS_ERROR,return )

::String NanoTestCase_obj::ASSERT_NOT_EQUALS_ERROR( ::Dynamic expected, ::Dynamic actual){
            	HX_STACK_FRAME("nanotest.NanoTestCase","ASSERT_NOT_EQUALS_ERROR",0xdee5cc5d,"nanotest.NanoTestCase.ASSERT_NOT_EQUALS_ERROR","nanotest/NanoTestCase.hx",21,0xa2c50f1f)
            	HX_STACK_ARG(expected,"expected")
            	HX_STACK_ARG(actual,"actual")
HXLINE(  21)		::String _hx_tmp = ::nanotest::NanoTestCase_obj::format(expected);
HXDLIN(  21)		::String _hx_tmp1 = ((HX_("expected not ",55,06,19,2d) + _hx_tmp) + HX_(" but was ",36,e4,f6,61));
HXDLIN(  21)		::String _hx_tmp2 = ::nanotest::NanoTestCase_obj::format(actual);
HXDLIN(  21)		return (_hx_tmp1 + _hx_tmp2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NanoTestCase_obj,ASSERT_NOT_EQUALS_ERROR,return )

::String NanoTestCase_obj::format( ::Dynamic d){
            	HX_STACK_FRAME("nanotest.NanoTestCase","format",0xaf5b5227,"nanotest.NanoTestCase.format","nanotest/NanoTestCase.hx",24,0xa2c50f1f)
            	HX_STACK_ARG(d,"d")
HXLINE(  24)		Bool _hx_tmp = ::Std_obj::is(d,hx::ClassOf< ::String >());
HXDLIN(  24)		if (_hx_tmp) {
HXLINE(  24)			::String _hx_tmp1 = ::Std_obj::string(d);
HXDLIN(  24)			return ((HX_("\"",22,00,00,00) + _hx_tmp1) + HX_("\"",22,00,00,00));
            		}
            		else {
HXLINE(  24)			::String _hx_tmp2 = ::Std_obj::string(d);
HXDLIN(  24)			return (HX_("",00,00,00,00) + _hx_tmp2);
            		}
HXDLIN(  24)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NanoTestCase_obj,format,return )


NanoTestCase_obj::NanoTestCase_obj()
{
}

void NanoTestCase_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NanoTestCase);
	HX_MARK_MEMBER_NAME(currentResult,"currentResult");
	HX_MARK_MEMBER_NAME(posInfos,"posInfos");
	HX_MARK_END_CLASS();
}

void NanoTestCase_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(currentResult,"currentResult");
	HX_VISIT_MEMBER_NAME(posInfos,"posInfos");
}

hx::Val NanoTestCase_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"fail") ) { return hx::Val( fail_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"setup") ) { return hx::Val( setup_dyn()); }
		if (HX_FIELD_EQ(inName,"error") ) { return hx::Val( error_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"success") ) { return hx::Val( success_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"posInfos") ) { return hx::Val( posInfos); }
		if (HX_FIELD_EQ(inName,"tearDown") ) { return hx::Val( tearDown_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"assertTrue") ) { return hx::Val( assertTrue_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"globalSetup") ) { return hx::Val( globalSetup_dyn()); }
		if (HX_FIELD_EQ(inName,"assertFalse") ) { return hx::Val( assertFalse_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"assertEquals") ) { return hx::Val( assertEquals_dyn()); }
		if (HX_FIELD_EQ(inName,"assertThrows") ) { return hx::Val( assertThrows_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentResult") ) { return hx::Val( currentResult); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"globalTearDown") ) { return hx::Val( globalTearDown_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"assertNotEquals") ) { return hx::Val( assertNotEquals_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_openPreprocessResult") ) { return hx::Val( _openPreprocessResult_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool NanoTestCase_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"format") ) { outValue = format_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"ASSERT_EQUALS_ERROR") ) { outValue = ASSERT_EQUALS_ERROR_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"ASSERT_NOT_EQUALS_ERROR") ) { outValue = ASSERT_NOT_EQUALS_ERROR_dyn(); return true; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"ASSERT_THROWS_ILLEGAL_EXCEPTION") ) { outValue = ASSERT_THROWS_ILLEGAL_EXCEPTION_dyn(); return true; }
	}
	return false;
}

hx::Val NanoTestCase_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"posInfos") ) { posInfos=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentResult") ) { currentResult=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NanoTestCase_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("currentResult","\xf6","\xe9","\xe0","\xeb"));
	outFields->push(HX_HCSTRING("posInfos","\x11","\x82","\x2e","\x5a"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo NanoTestCase_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(NanoTestCase_obj,currentResult),HX_HCSTRING("currentResult","\xf6","\xe9","\xe0","\xeb")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(NanoTestCase_obj,posInfos),HX_HCSTRING("posInfos","\x11","\x82","\x2e","\x5a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo NanoTestCase_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &NanoTestCase_obj::ASSERT_TRUE_ERROR,HX_HCSTRING("ASSERT_TRUE_ERROR","\xd0","\x0c","\x9f","\x21")},
	{hx::fsString,(void *) &NanoTestCase_obj::ASSERT_FALSE_ERROR,HX_HCSTRING("ASSERT_FALSE_ERROR","\x73","\xee","\x9b","\xde")},
	{hx::fsString,(void *) &NanoTestCase_obj::ASSERT_THROWS_ERROR,HX_HCSTRING("ASSERT_THROWS_ERROR","\x8f","\x5f","\xf9","\x39")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String NanoTestCase_obj_sMemberFields[] = {
	HX_HCSTRING("currentResult","\xf6","\xe9","\xe0","\xeb"),
	HX_HCSTRING("posInfos","\x11","\x82","\x2e","\x5a"),
	HX_HCSTRING("globalTearDown","\xa7","\x5e","\x3f","\x38"),
	HX_HCSTRING("globalSetup","\x1a","\x06","\x6e","\x52"),
	HX_HCSTRING("tearDown","\x24","\xd6","\x66","\xec"),
	HX_HCSTRING("setup","\x7d","\xae","\x2f","\x7a"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("assertTrue","\x34","\xf5","\x51","\x4f"),
	HX_HCSTRING("assertFalse","\xfd","\x10","\x85","\xfd"),
	HX_HCSTRING("assertEquals","\xa5","\x01","\xdd","\xac"),
	HX_HCSTRING("assertNotEquals","\x0c","\x5c","\xab","\x90"),
	HX_HCSTRING("assertThrows","\xf3","\x37","\xab","\x7b"),
	HX_HCSTRING("fail","\xde","\xb9","\xb5","\x43"),
	HX_HCSTRING("success","\xc3","\x25","\x4e","\xb8"),
	HX_HCSTRING("error","\xc8","\xcb","\x29","\x73"),
	HX_HCSTRING("_openPreprocessResult","\x72","\x20","\x7c","\xd4"),
	::String(null()) };

static void NanoTestCase_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NanoTestCase_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(NanoTestCase_obj::ASSERT_TRUE_ERROR,"ASSERT_TRUE_ERROR");
	HX_MARK_MEMBER_NAME(NanoTestCase_obj::ASSERT_FALSE_ERROR,"ASSERT_FALSE_ERROR");
	HX_MARK_MEMBER_NAME(NanoTestCase_obj::ASSERT_THROWS_ERROR,"ASSERT_THROWS_ERROR");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NanoTestCase_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NanoTestCase_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(NanoTestCase_obj::ASSERT_TRUE_ERROR,"ASSERT_TRUE_ERROR");
	HX_VISIT_MEMBER_NAME(NanoTestCase_obj::ASSERT_FALSE_ERROR,"ASSERT_FALSE_ERROR");
	HX_VISIT_MEMBER_NAME(NanoTestCase_obj::ASSERT_THROWS_ERROR,"ASSERT_THROWS_ERROR");
};

#endif

hx::Class NanoTestCase_obj::__mClass;

static ::String NanoTestCase_obj_sStaticFields[] = {
	HX_HCSTRING("ASSERT_TRUE_ERROR","\xd0","\x0c","\x9f","\x21"),
	HX_HCSTRING("ASSERT_FALSE_ERROR","\x73","\xee","\x9b","\xde"),
	HX_HCSTRING("ASSERT_THROWS_ERROR","\x8f","\x5f","\xf9","\x39"),
	HX_HCSTRING("ASSERT_THROWS_ILLEGAL_EXCEPTION","\x2d","\x8f","\x87","\x0d"),
	HX_HCSTRING("ASSERT_EQUALS_ERROR","\xc1","\x7a","\x14","\x2a"),
	HX_HCSTRING("ASSERT_NOT_EQUALS_ERROR","\x4d","\xdd","\x7c","\x5d"),
	HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd"),
	::String(null())
};

void NanoTestCase_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nanotest.NanoTestCase","\x7e","\x9f","\x44","\xf3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &NanoTestCase_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = NanoTestCase_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(NanoTestCase_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NanoTestCase_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NanoTestCase_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NanoTestCase_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NanoTestCase_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NanoTestCase_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void NanoTestCase_obj::__boot()
{
{
            	HX_STACK_FRAME("nanotest.NanoTestCase","boot",0x931cab22,"nanotest.NanoTestCase.boot","nanotest/NanoTestCase.hx",11,0xa2c50f1f)
HXLINE(  11)		ASSERT_TRUE_ERROR = HX_("expected true but was false",23,26,7c,7d);
            	}
{
            	HX_STACK_FRAME("nanotest.NanoTestCase","boot",0x931cab22,"nanotest.NanoTestCase.boot","nanotest/NanoTestCase.hx",12,0xa2c50f1f)
HXLINE(  12)		ASSERT_FALSE_ERROR = HX_("expected false but was true",a9,e3,03,60);
            	}
{
            	HX_STACK_FRAME("nanotest.NanoTestCase","boot",0x931cab22,"nanotest.NanoTestCase.boot","nanotest/NanoTestCase.hx",13,0xa2c50f1f)
HXLINE(  13)		ASSERT_THROWS_ERROR = HX_("expected to throw exception but didn't",c3,fb,2a,7b);
            	}
}

} // end namespace nanotest
