// Generated by Haxe 3.3.0
#ifndef INCLUDED_hxmath_math_MathUtil
#define INCLUDED_hxmath_math_MathUtil

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(hxmath,math,MathUtil)
HX_DECLARE_CLASS2(hxmath,math,Vector2Default)

namespace hxmath{
namespace math{


class HXCPP_CLASS_ATTRIBUTES MathUtil_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef MathUtil_obj OBJ_;
		MathUtil_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="hxmath.math.MathUtil")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"hxmath.math.MathUtil"); }
		static hx::ObjectPtr< MathUtil_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~MathUtil_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("MathUtil","\x0a","\x06","\x68","\x71"); }

		static void __boot();
		static Float eps;
		static Int intMax(Int a,Int b);
		static ::Dynamic intMax_dyn();

		static Int intMin(Int a,Int b);
		static ::Dynamic intMin_dyn();

		static Float lerpCyclic(Float a,Float b,Float t,Float max);
		static ::Dynamic lerpCyclic_dyn();

		static Int sign(Float x,hx::Null< Float >  w);
		static ::Dynamic sign_dyn();

		static Float rangeDistance(Float aStart,Float aWidth,Float bStart,Float bWidth);
		static ::Dynamic rangeDistance_dyn();

		static Bool openRangeContains(Float aStart,Float aWidth,Float x);
		static ::Dynamic openRangeContains_dyn();

		static Bool openRangesIntersect(Float aStart,Float aWidth,Float bStart,Float bWidth);
		static ::Dynamic openRangesIntersect_dyn();

		static Bool closedRangeContains(Float aStart,Float aWidth,Float x);
		static ::Dynamic closedRangeContains_dyn();

		static Float radToDeg(Float rad);
		static ::Dynamic radToDeg_dyn();

		static Float degToRad(Float deg);
		static ::Dynamic degToRad_dyn();

		static Float wrap(Float x,Float n);
		static ::Dynamic wrap_dyn();

		static Float clamp(Float value,Float min,Float max);
		static ::Dynamic clamp_dyn();

		static Int orient2d( ::hxmath::math::Vector2Default a, ::hxmath::math::Vector2Default b, ::hxmath::math::Vector2Default c);
		static ::Dynamic orient2d_dyn();

		static Float det2x2(Float m00,Float m10,Float m01,Float m11);
		static ::Dynamic det2x2_dyn();

		static Float det3x3(Float m00,Float m10,Float m20,Float m01,Float m11,Float m21,Float m02,Float m12,Float m22);
		static ::Dynamic det3x3_dyn();

		static Float det4x4(Float m00,Float m10,Float m20,Float m30,Float m01,Float m11,Float m21,Float m31,Float m02,Float m12,Float m22,Float m32,Float m03,Float m13,Float m23,Float m33);
		static ::Dynamic det4x4_dyn();

};

} // end namespace hxmath
} // end namespace math

#endif /* INCLUDED_hxmath_math_MathUtil */ 
