// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_hxmath_math_Matrix3x3Default
#include <hxmath/math/Matrix3x3Default.h>
#endif
#ifndef INCLUDED_hxmath_math_Matrix4x4Default
#include <hxmath/math/Matrix4x4Default.h>
#endif
#ifndef INCLUDED_hxmath_math_QuaternionDefault
#include <hxmath/math/QuaternionDefault.h>
#endif
#ifndef INCLUDED_hxmath_math_Vector3Default
#include <hxmath/math/Vector3Default.h>
#endif
#ifndef INCLUDED_hxmath_math_Vector4Default
#include <hxmath/math/Vector4Default.h>
#endif
#ifndef INCLUDED_hxmath_math__Matrix4x4_Matrix4x4_Impl_
#include <hxmath/math/_Matrix4x4/Matrix4x4_Impl_.h>
#endif

namespace hxmath{
namespace math{
namespace _Matrix4x4{

void Matrix4x4_Impl__obj::__construct() { }

Dynamic Matrix4x4_Impl__obj::__CreateEmpty() { return new Matrix4x4_Impl__obj; }

hx::ObjectPtr< Matrix4x4_Impl__obj > Matrix4x4_Impl__obj::__new()
{
	hx::ObjectPtr< Matrix4x4_Impl__obj > _hx_result = new Matrix4x4_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Matrix4x4_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Matrix4x4_Impl__obj > _hx_result = new Matrix4x4_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Int Matrix4x4_Impl__obj::elementCount;

 ::hxmath::math::Matrix4x4Default Matrix4x4_Impl__obj::_new(Float m00,Float m10,Float m20,Float m30,Float m01,Float m11,Float m21,Float m31,Float m02,Float m12,Float m22,Float m32,Float m03,Float m13,Float m23,Float m33){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","_new",0x5e2abe0e,"hxmath.math._Matrix4x4.Matrix4x4_Impl_._new","hxmath/math/Matrix4x4.hx",138,0x11ea859f)
            	HX_STACK_ARG(m00,"m00")
            	HX_STACK_ARG(m10,"m10")
            	HX_STACK_ARG(m20,"m20")
            	HX_STACK_ARG(m30,"m30")
            	HX_STACK_ARG(m01,"m01")
            	HX_STACK_ARG(m11,"m11")
            	HX_STACK_ARG(m21,"m21")
            	HX_STACK_ARG(m31,"m31")
            	HX_STACK_ARG(m02,"m02")
            	HX_STACK_ARG(m12,"m12")
            	HX_STACK_ARG(m22,"m22")
            	HX_STACK_ARG(m32,"m32")
            	HX_STACK_ARG(m03,"m03")
            	HX_STACK_ARG(m13,"m13")
            	HX_STACK_ARG(m23,"m23")
            	HX_STACK_ARG(m33,"m33")
HXLINE( 138)		return  ::hxmath::math::Matrix4x4Default_obj::__new(m00,m10,m20,m30,m01,m11,m21,m31,m02,m12,m22,m32,m03,m13,m23,m33);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC16(Matrix4x4_Impl__obj,_new,return )

 ::hxmath::math::Matrix4x4Default Matrix4x4_Impl__obj::fromArray(::Array< Float > rawData){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","fromArray",0x73891c02,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.fromArray","hxmath/math/Matrix4x4.hx",158,0x11ea859f)
            	HX_STACK_ARG(rawData,"rawData")
HXLINE( 159)		if ((rawData->length != (int)16)) {
HXLINE( 161)			HX_STACK_DO_THROW(HX_("Invalid rawData.",25,ca,34,44));
            		}
HXLINE( 164)		return  ::hxmath::math::Matrix4x4Default_obj::__new(rawData->__get((int)0),rawData->__get((int)1),rawData->__get((int)2),rawData->__get((int)3),rawData->__get((int)4),rawData->__get((int)5),rawData->__get((int)6),rawData->__get((int)7),rawData->__get((int)8),rawData->__get((int)9),rawData->__get((int)10),rawData->__get((int)11),rawData->__get((int)12),rawData->__get((int)13),rawData->__get((int)14),rawData->__get((int)15));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4x4_Impl__obj,fromArray,return )

 ::hxmath::math::Matrix4x4Default Matrix4x4_Impl__obj::fromMatrix4x4Shape( ::hxmath::math::Matrix4x4Default other){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","fromMatrix4x4Shape",0x5c4d8ac9,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.fromMatrix4x4Shape","hxmath/math/Matrix4x4.hx",180,0x11ea859f)
            	HX_STACK_ARG(other,"other")
HXLINE( 180)		return  ::hxmath::math::Matrix4x4Default_obj::__new(other->m00,other->m10,other->m20,other->m30,other->m01,other->m11,other->m21,other->m31,other->m02,other->m12,other->m22,other->m32,other->m03,other->m13,other->m23,other->m33);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4x4_Impl__obj,fromMatrix4x4Shape,return )

 ::hxmath::math::Vector4Default Matrix4x4_Impl__obj::multiplyVector( ::hxmath::math::Matrix4x4Default a, ::hxmath::math::Vector4Default v){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","multiplyVector",0x2ad55cf4,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.multiplyVector","hxmath/math/Matrix4x4.hx",197,0x11ea859f)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(v,"v")
HXLINE( 197)		return  ::hxmath::math::Vector4Default_obj::__new(((((a->m00 * v->x) + (a->m10 * v->y)) + (a->m20 * v->z)) + (a->m30 * v->w)),((((a->m01 * v->x) + (a->m11 * v->y)) + (a->m21 * v->z)) + (a->m31 * v->w)),((((a->m02 * v->x) + (a->m12 * v->y)) + (a->m22 * v->z)) + (a->m32 * v->w)),((((a->m03 * v->x) + (a->m13 * v->y)) + (a->m23 * v->z)) + (a->m33 * v->w)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4x4_Impl__obj,multiplyVector,return )

 ::hxmath::math::Matrix4x4Default Matrix4x4_Impl__obj::multiply( ::hxmath::math::Matrix4x4Default a, ::hxmath::math::Matrix4x4Default b){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","multiply",0x88dee551,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.multiply","hxmath/math/Matrix4x4.hx",214,0x11ea859f)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 214)		return  ::hxmath::math::Matrix4x4Default_obj::__new(((((a->m00 * b->m00) + (a->m10 * b->m01)) + (a->m20 * b->m02)) + (a->m30 * b->m03)),((((a->m00 * b->m10) + (a->m10 * b->m11)) + (a->m20 * b->m12)) + (a->m30 * b->m13)),((((a->m00 * b->m20) + (a->m10 * b->m21)) + (a->m20 * b->m22)) + (a->m30 * b->m23)),((((a->m00 * b->m30) + (a->m10 * b->m31)) + (a->m20 * b->m32)) + (a->m30 * b->m33)),((((a->m01 * b->m00) + (a->m11 * b->m01)) + (a->m21 * b->m02)) + (a->m31 * b->m03)),((((a->m01 * b->m10) + (a->m11 * b->m11)) + (a->m21 * b->m12)) + (a->m31 * b->m13)),((((a->m01 * b->m20) + (a->m11 * b->m21)) + (a->m21 * b->m22)) + (a->m31 * b->m23)),((((a->m01 * b->m30) + (a->m11 * b->m31)) + (a->m21 * b->m32)) + (a->m31 * b->m33)),((((a->m02 * b->m00) + (a->m12 * b->m01)) + (a->m22 * b->m02)) + (a->m32 * b->m03)),((((a->m02 * b->m10) + (a->m12 * b->m11)) + (a->m22 * b->m12)) + (a->m32 * b->m13)),((((a->m02 * b->m20) + (a->m12 * b->m21)) + (a->m22 * b->m22)) + (a->m32 * b->m23)),((((a->m02 * b->m30) + (a->m12 * b->m31)) + (a->m22 * b->m32)) + (a->m32 * b->m33)),((((a->m03 * b->m00) + (a->m13 * b->m01)) + (a->m23 * b->m02)) + (a->m33 * b->m03)),((((a->m03 * b->m10) + (a->m13 * b->m11)) + (a->m23 * b->m12)) + (a->m33 * b->m13)),((((a->m03 * b->m20) + (a->m13 * b->m21)) + (a->m23 * b->m22)) + (a->m33 * b->m23)),((((a->m03 * b->m30) + (a->m13 * b->m31)) + (a->m23 * b->m32)) + (a->m33 * b->m33)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4x4_Impl__obj,multiply,return )

 ::hxmath::math::Matrix4x4Default Matrix4x4_Impl__obj::add( ::hxmath::math::Matrix4x4Default a, ::hxmath::math::Matrix4x4Default b){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","add",0x6b30be14,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.add","hxmath/math/Matrix4x4.hx",246,0x11ea859f)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 246)		HX_VARI(  ::hxmath::math::Matrix4x4Default,self) =  ::hxmath::math::Matrix4x4Default_obj::__new(a->m00,a->m10,a->m20,a->m30,a->m01,a->m11,a->m21,a->m31,a->m02,a->m12,a->m22,a->m32,a->m03,a->m13,a->m23,a->m33);
HXDLIN( 246)		hx::AddEq(self->m00,b->m00);
HXDLIN( 246)		hx::AddEq(self->m10,b->m10);
HXDLIN( 246)		hx::AddEq(self->m20,b->m20);
HXDLIN( 246)		hx::AddEq(self->m30,b->m30);
HXDLIN( 246)		hx::AddEq(self->m01,b->m01);
HXDLIN( 246)		hx::AddEq(self->m11,b->m11);
HXDLIN( 246)		hx::AddEq(self->m21,b->m21);
HXDLIN( 246)		hx::AddEq(self->m31,b->m31);
HXDLIN( 246)		hx::AddEq(self->m02,b->m02);
HXDLIN( 246)		hx::AddEq(self->m12,b->m12);
HXDLIN( 246)		hx::AddEq(self->m22,b->m22);
HXDLIN( 246)		hx::AddEq(self->m32,b->m32);
HXDLIN( 246)		hx::AddEq(self->m03,b->m03);
HXDLIN( 246)		hx::AddEq(self->m13,b->m13);
HXDLIN( 246)		hx::AddEq(self->m23,b->m23);
HXDLIN( 246)		hx::AddEq(self->m33,b->m33);
HXDLIN( 246)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4x4_Impl__obj,add,return )

 ::hxmath::math::Matrix4x4Default Matrix4x4_Impl__obj::subtract( ::hxmath::math::Matrix4x4Default a, ::hxmath::math::Matrix4x4Default b){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","subtract",0xe6637841,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.subtract","hxmath/math/Matrix4x4.hx",260,0x11ea859f)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 260)		HX_VARI(  ::hxmath::math::Matrix4x4Default,self) =  ::hxmath::math::Matrix4x4Default_obj::__new(a->m00,a->m10,a->m20,a->m30,a->m01,a->m11,a->m21,a->m31,a->m02,a->m12,a->m22,a->m32,a->m03,a->m13,a->m23,a->m33);
HXDLIN( 260)		hx::SubEq(self->m00,b->m00);
HXDLIN( 260)		hx::SubEq(self->m10,b->m10);
HXDLIN( 260)		hx::SubEq(self->m20,b->m20);
HXDLIN( 260)		hx::SubEq(self->m30,b->m30);
HXDLIN( 260)		hx::SubEq(self->m01,b->m01);
HXDLIN( 260)		hx::SubEq(self->m11,b->m11);
HXDLIN( 260)		hx::SubEq(self->m21,b->m21);
HXDLIN( 260)		hx::SubEq(self->m31,b->m31);
HXDLIN( 260)		hx::SubEq(self->m02,b->m02);
HXDLIN( 260)		hx::SubEq(self->m12,b->m12);
HXDLIN( 260)		hx::SubEq(self->m22,b->m22);
HXDLIN( 260)		hx::SubEq(self->m32,b->m32);
HXDLIN( 260)		hx::SubEq(self->m03,b->m03);
HXDLIN( 260)		hx::SubEq(self->m13,b->m13);
HXDLIN( 260)		hx::SubEq(self->m23,b->m23);
HXDLIN( 260)		hx::SubEq(self->m33,b->m33);
HXDLIN( 260)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4x4_Impl__obj,subtract,return )

 ::hxmath::math::Matrix4x4Default Matrix4x4_Impl__obj::negate( ::hxmath::math::Matrix4x4Default a){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","negate",0x1ee22faf,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.negate","hxmath/math/Matrix4x4.hx",273,0x11ea859f)
            	HX_STACK_ARG(a,"a")
HXLINE( 273)		return  ::hxmath::math::Matrix4x4Default_obj::__new(-(a->m00),-(a->m10),-(a->m20),-(a->m30),-(a->m01),-(a->m11),-(a->m21),-(a->m31),-(a->m02),-(a->m12),-(a->m22),-(a->m32),-(a->m03),-(a->m13),-(a->m23),-(a->m33));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4x4_Impl__obj,negate,return )

Bool Matrix4x4_Impl__obj::equals( ::hxmath::math::Matrix4x4Default a, ::hxmath::math::Matrix4x4Default b){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","equals",0x77bbdc2c,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.equals","hxmath/math/Matrix4x4.hx",291,0x11ea859f)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 291)		Bool _hx_tmp;
HXDLIN( 291)		if (hx::IsNull( a )) {
HXLINE( 291)			_hx_tmp = hx::IsNull( b );
            		}
            		else {
HXLINE( 291)			_hx_tmp = false;
            		}
HXDLIN( 291)		if (!(_hx_tmp)) {
HXLINE( 292)			Bool _hx_tmp1;
HXDLIN( 292)			Bool _hx_tmp2;
HXDLIN( 292)			Bool _hx_tmp3;
HXDLIN( 292)			Bool _hx_tmp4;
HXDLIN( 292)			Bool _hx_tmp5;
HXDLIN( 292)			Bool _hx_tmp6;
HXDLIN( 292)			Bool _hx_tmp7;
HXDLIN( 292)			Bool _hx_tmp8;
HXDLIN( 292)			Bool _hx_tmp9;
HXDLIN( 292)			Bool _hx_tmp10;
HXDLIN( 292)			Bool _hx_tmp11;
HXDLIN( 292)			Bool _hx_tmp12;
HXDLIN( 292)			Bool _hx_tmp13;
HXDLIN( 292)			Bool _hx_tmp14;
HXDLIN( 292)			Bool _hx_tmp15;
HXDLIN( 292)			Bool _hx_tmp16;
HXDLIN( 292)			if (hx::IsNotNull( a )) {
HXLINE( 292)				_hx_tmp16 = hx::IsNotNull( b );
            			}
            			else {
HXLINE( 292)				_hx_tmp16 = false;
            			}
HXDLIN( 292)			if (_hx_tmp16) {
HXLINE( 292)				_hx_tmp15 = (a->m00 == b->m00);
            			}
            			else {
HXLINE( 292)				_hx_tmp15 = false;
            			}
HXDLIN( 292)			if (_hx_tmp15) {
HXLINE( 292)				_hx_tmp14 = (a->m10 == b->m10);
            			}
            			else {
HXLINE( 292)				_hx_tmp14 = false;
            			}
HXDLIN( 292)			if (_hx_tmp14) {
HXLINE( 292)				_hx_tmp13 = (a->m20 == b->m20);
            			}
            			else {
HXLINE( 292)				_hx_tmp13 = false;
            			}
HXDLIN( 292)			if (_hx_tmp13) {
HXLINE( 292)				_hx_tmp12 = (a->m30 == b->m30);
            			}
            			else {
HXLINE( 292)				_hx_tmp12 = false;
            			}
HXDLIN( 292)			if (_hx_tmp12) {
HXLINE( 292)				_hx_tmp11 = (a->m01 == b->m01);
            			}
            			else {
HXLINE( 292)				_hx_tmp11 = false;
            			}
HXDLIN( 292)			if (_hx_tmp11) {
HXLINE( 292)				_hx_tmp10 = (a->m11 == b->m11);
            			}
            			else {
HXLINE( 292)				_hx_tmp10 = false;
            			}
HXDLIN( 292)			if (_hx_tmp10) {
HXLINE( 292)				_hx_tmp9 = (a->m21 == b->m21);
            			}
            			else {
HXLINE( 292)				_hx_tmp9 = false;
            			}
HXDLIN( 292)			if (_hx_tmp9) {
HXLINE( 292)				_hx_tmp8 = (a->m31 == b->m31);
            			}
            			else {
HXLINE( 292)				_hx_tmp8 = false;
            			}
HXDLIN( 292)			if (_hx_tmp8) {
HXLINE( 292)				_hx_tmp7 = (a->m02 == b->m02);
            			}
            			else {
HXLINE( 292)				_hx_tmp7 = false;
            			}
HXDLIN( 292)			if (_hx_tmp7) {
HXLINE( 292)				_hx_tmp6 = (a->m12 == b->m12);
            			}
            			else {
HXLINE( 292)				_hx_tmp6 = false;
            			}
HXDLIN( 292)			if (_hx_tmp6) {
HXLINE( 292)				_hx_tmp5 = (a->m22 == b->m22);
            			}
            			else {
HXLINE( 292)				_hx_tmp5 = false;
            			}
HXDLIN( 292)			if (_hx_tmp5) {
HXLINE( 292)				_hx_tmp4 = (a->m32 == b->m32);
            			}
            			else {
HXLINE( 292)				_hx_tmp4 = false;
            			}
HXDLIN( 292)			if (_hx_tmp4) {
HXLINE( 292)				_hx_tmp3 = (a->m03 == b->m03);
            			}
            			else {
HXLINE( 292)				_hx_tmp3 = false;
            			}
HXDLIN( 292)			if (_hx_tmp3) {
HXLINE( 292)				_hx_tmp2 = (a->m13 == b->m13);
            			}
            			else {
HXLINE( 292)				_hx_tmp2 = false;
            			}
HXDLIN( 292)			if (_hx_tmp2) {
HXLINE( 292)				_hx_tmp1 = (a->m23 == b->m23);
            			}
            			else {
HXLINE( 292)				_hx_tmp1 = false;
            			}
HXDLIN( 292)			if (_hx_tmp1) {
HXLINE( 291)				return (a->m33 == b->m33);
            			}
            			else {
HXLINE( 291)				return false;
            			}
            		}
            		else {
HXLINE( 291)			return true;
            		}
HXDLIN( 291)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4x4_Impl__obj,equals,return )

 ::hxmath::math::Matrix4x4Default Matrix4x4_Impl__obj::set( ::hxmath::math::Matrix4x4Default this1,Float m00,Float m10,Float m20,Float m30,Float m01,Float m11,Float m21,Float m31,Float m02,Float m12,Float m22,Float m32,Float m03,Float m13,Float m23,Float m33){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","set",0x6b3e6795,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.set","hxmath/math/Matrix4x4.hx",338,0x11ea859f)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(m00,"m00")
            	HX_STACK_ARG(m10,"m10")
            	HX_STACK_ARG(m20,"m20")
            	HX_STACK_ARG(m30,"m30")
            	HX_STACK_ARG(m01,"m01")
            	HX_STACK_ARG(m11,"m11")
            	HX_STACK_ARG(m21,"m21")
            	HX_STACK_ARG(m31,"m31")
            	HX_STACK_ARG(m02,"m02")
            	HX_STACK_ARG(m12,"m12")
            	HX_STACK_ARG(m22,"m22")
            	HX_STACK_ARG(m32,"m32")
            	HX_STACK_ARG(m03,"m03")
            	HX_STACK_ARG(m13,"m13")
            	HX_STACK_ARG(m23,"m23")
            	HX_STACK_ARG(m33,"m33")
HXLINE( 339)		HX_VARI(  ::hxmath::math::Matrix4x4Default,self) = this1;
HXLINE( 341)		self->m00 = m00;
HXLINE( 342)		self->m10 = m10;
HXLINE( 343)		self->m20 = m20;
HXLINE( 344)		self->m30 = m30;
HXLINE( 346)		self->m01 = m01;
HXLINE( 347)		self->m11 = m11;
HXLINE( 348)		self->m21 = m21;
HXLINE( 349)		self->m31 = m31;
HXLINE( 351)		self->m02 = m02;
HXLINE( 352)		self->m12 = m12;
HXLINE( 353)		self->m22 = m22;
HXLINE( 354)		self->m32 = m32;
HXLINE( 356)		self->m03 = m03;
HXLINE( 357)		self->m13 = m13;
HXLINE( 358)		self->m23 = m23;
HXLINE( 359)		self->m33 = m33;
HXLINE( 361)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC17(Matrix4x4_Impl__obj,set,return )

 ::hxmath::math::Matrix4x4Default Matrix4x4_Impl__obj::addWith( ::hxmath::math::Matrix4x4Default this1, ::hxmath::math::Matrix4x4Default a){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","addWith",0xa33cfa3a,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.addWith","hxmath/math/Matrix4x4.hx",372,0x11ea859f)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(a,"a")
HXLINE( 373)		HX_VARI(  ::hxmath::math::Matrix4x4Default,self) = this1;
HXLINE( 375)		hx::AddEq(self->m00,a->m00);
HXLINE( 376)		hx::AddEq(self->m10,a->m10);
HXLINE( 377)		hx::AddEq(self->m20,a->m20);
HXLINE( 378)		hx::AddEq(self->m30,a->m30);
HXLINE( 379)		hx::AddEq(self->m01,a->m01);
HXLINE( 380)		hx::AddEq(self->m11,a->m11);
HXLINE( 381)		hx::AddEq(self->m21,a->m21);
HXLINE( 382)		hx::AddEq(self->m31,a->m31);
HXLINE( 383)		hx::AddEq(self->m02,a->m02);
HXLINE( 384)		hx::AddEq(self->m12,a->m12);
HXLINE( 385)		hx::AddEq(self->m22,a->m22);
HXLINE( 386)		hx::AddEq(self->m32,a->m32);
HXLINE( 387)		hx::AddEq(self->m03,a->m03);
HXLINE( 388)		hx::AddEq(self->m13,a->m13);
HXLINE( 389)		hx::AddEq(self->m23,a->m23);
HXLINE( 390)		hx::AddEq(self->m33,a->m33);
HXLINE( 392)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4x4_Impl__obj,addWith,return )

 ::hxmath::math::Matrix4x4Default Matrix4x4_Impl__obj::subtractWith( ::hxmath::math::Matrix4x4Default this1, ::hxmath::math::Matrix4x4Default a){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","subtractWith",0x105ccee7,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.subtractWith","hxmath/math/Matrix4x4.hx",403,0x11ea859f)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(a,"a")
HXLINE( 404)		HX_VARI(  ::hxmath::math::Matrix4x4Default,self) = this1;
HXLINE( 406)		hx::SubEq(self->m00,a->m00);
HXLINE( 407)		hx::SubEq(self->m10,a->m10);
HXLINE( 408)		hx::SubEq(self->m20,a->m20);
HXLINE( 409)		hx::SubEq(self->m30,a->m30);
HXLINE( 410)		hx::SubEq(self->m01,a->m01);
HXLINE( 411)		hx::SubEq(self->m11,a->m11);
HXLINE( 412)		hx::SubEq(self->m21,a->m21);
HXLINE( 413)		hx::SubEq(self->m31,a->m31);
HXLINE( 414)		hx::SubEq(self->m02,a->m02);
HXLINE( 415)		hx::SubEq(self->m12,a->m12);
HXLINE( 416)		hx::SubEq(self->m22,a->m22);
HXLINE( 417)		hx::SubEq(self->m32,a->m32);
HXLINE( 418)		hx::SubEq(self->m03,a->m03);
HXLINE( 419)		hx::SubEq(self->m13,a->m13);
HXLINE( 420)		hx::SubEq(self->m23,a->m23);
HXLINE( 421)		hx::SubEq(self->m33,a->m33);
HXLINE( 423)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4x4_Impl__obj,subtractWith,return )

void Matrix4x4_Impl__obj::copyTo( ::hxmath::math::Matrix4x4Default this1, ::hxmath::math::Matrix4x4Default target){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","copyTo",0x80fc0a7d,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.copyTo","hxmath/math/Matrix4x4.hx",433,0x11ea859f)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(target,"target")
HXLINE( 434)		HX_VARI(  ::hxmath::math::Matrix4x4Default,self) = this1;
HXLINE( 436)		{
HXLINE( 436)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 436)			while((_g < (int)16)){
HXLINE( 436)				HX_VARI( Int,i) = _g++;
HXLINE( 438)				{
HXLINE( 438)					 ::Dynamic _hx_tmp;
HXDLIN( 438)					switch((int)(i)){
            						case (int)0: {
HXLINE( 438)							_hx_tmp = self->m00;
            						}
            						break;
            						case (int)1: {
HXLINE( 438)							_hx_tmp = self->m10;
            						}
            						break;
            						case (int)2: {
HXLINE( 438)							_hx_tmp = self->m20;
            						}
            						break;
            						case (int)3: {
HXLINE( 438)							_hx_tmp = self->m30;
            						}
            						break;
            						case (int)4: {
HXLINE( 438)							_hx_tmp = self->m01;
            						}
            						break;
            						case (int)5: {
HXLINE( 438)							_hx_tmp = self->m11;
            						}
            						break;
            						case (int)6: {
HXLINE( 438)							_hx_tmp = self->m21;
            						}
            						break;
            						case (int)7: {
HXLINE( 438)							_hx_tmp = self->m31;
            						}
            						break;
            						case (int)8: {
HXLINE( 438)							_hx_tmp = self->m02;
            						}
            						break;
            						case (int)9: {
HXLINE( 438)							_hx_tmp = self->m12;
            						}
            						break;
            						case (int)10: {
HXLINE( 438)							_hx_tmp = self->m22;
            						}
            						break;
            						case (int)11: {
HXLINE( 438)							_hx_tmp = self->m32;
            						}
            						break;
            						case (int)12: {
HXLINE( 438)							_hx_tmp = self->m03;
            						}
            						break;
            						case (int)13: {
HXLINE( 438)							_hx_tmp = self->m13;
            						}
            						break;
            						case (int)14: {
HXLINE( 438)							_hx_tmp = self->m23;
            						}
            						break;
            						case (int)15: {
HXLINE( 438)							_hx_tmp = self->m33;
            						}
            						break;
            						default:{
HXLINE( 438)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 438)					HX_VARI( Float,value) = ( (Float)(_hx_tmp) );
HXDLIN( 438)					switch((int)(i)){
            						case (int)0: {
HXLINE( 438)							target->m00 = value;
            						}
            						break;
            						case (int)1: {
HXLINE( 438)							target->m10 = value;
            						}
            						break;
            						case (int)2: {
HXLINE( 438)							target->m20 = value;
            						}
            						break;
            						case (int)3: {
HXLINE( 438)							target->m30 = value;
            						}
            						break;
            						case (int)4: {
HXLINE( 438)							target->m01 = value;
            						}
            						break;
            						case (int)5: {
HXLINE( 438)							target->m11 = value;
            						}
            						break;
            						case (int)6: {
HXLINE( 438)							target->m21 = value;
            						}
            						break;
            						case (int)7: {
HXLINE( 438)							target->m31 = value;
            						}
            						break;
            						case (int)8: {
HXLINE( 438)							target->m02 = value;
            						}
            						break;
            						case (int)9: {
HXLINE( 438)							target->m12 = value;
            						}
            						break;
            						case (int)10: {
HXLINE( 438)							target->m22 = value;
            						}
            						break;
            						case (int)11: {
HXLINE( 438)							target->m32 = value;
            						}
            						break;
            						case (int)12: {
HXLINE( 438)							target->m03 = value;
            						}
            						break;
            						case (int)13: {
HXLINE( 438)							target->m13 = value;
            						}
            						break;
            						case (int)14: {
HXLINE( 438)							target->m23 = value;
            						}
            						break;
            						case (int)15: {
HXLINE( 438)							target->m33 = value;
            						}
            						break;
            						default:{
HXLINE( 438)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4x4_Impl__obj,copyTo,(void))

void Matrix4x4_Impl__obj::copyToShape( ::hxmath::math::Matrix4x4Default this1, ::Dynamic target){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","copyToShape",0x09062364,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.copyToShape","hxmath/math/Matrix4x4.hx",448,0x11ea859f)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(target,"target")
HXLINE( 449)		HX_VARI(  ::hxmath::math::Matrix4x4Default,self) = this1;
HXLINE( 451)		target->__SetField(HX_("m00",ad,df,52,00),self->m00,hx::paccDynamic);
HXLINE( 452)		target->__SetField(HX_("m01",ae,df,52,00),self->m01,hx::paccDynamic);
HXLINE( 453)		target->__SetField(HX_("m02",af,df,52,00),self->m02,hx::paccDynamic);
HXLINE( 454)		target->__SetField(HX_("m03",b0,df,52,00),self->m03,hx::paccDynamic);
HXLINE( 456)		target->__SetField(HX_("m10",8c,e0,52,00),self->m10,hx::paccDynamic);
HXLINE( 457)		target->__SetField(HX_("m11",8d,e0,52,00),self->m11,hx::paccDynamic);
HXLINE( 458)		target->__SetField(HX_("m12",8e,e0,52,00),self->m12,hx::paccDynamic);
HXLINE( 459)		target->__SetField(HX_("m13",8f,e0,52,00),self->m13,hx::paccDynamic);
HXLINE( 461)		target->__SetField(HX_("m20",6b,e1,52,00),self->m20,hx::paccDynamic);
HXLINE( 462)		target->__SetField(HX_("m21",6c,e1,52,00),self->m21,hx::paccDynamic);
HXLINE( 463)		target->__SetField(HX_("m22",6d,e1,52,00),self->m22,hx::paccDynamic);
HXLINE( 464)		target->__SetField(HX_("m23",6e,e1,52,00),self->m23,hx::paccDynamic);
HXLINE( 466)		target->__SetField(HX_("m30",4a,e2,52,00),self->m30,hx::paccDynamic);
HXLINE( 467)		target->__SetField(HX_("m31",4b,e2,52,00),self->m31,hx::paccDynamic);
HXLINE( 468)		target->__SetField(HX_("m32",4c,e2,52,00),self->m32,hx::paccDynamic);
HXLINE( 469)		target->__SetField(HX_("m33",4d,e2,52,00),self->m33,hx::paccDynamic);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4x4_Impl__obj,copyToShape,(void))

void Matrix4x4_Impl__obj::copyFromShape( ::hxmath::math::Matrix4x4Default this1, ::Dynamic source){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","copyFromShape",0x8afdac95,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.copyFromShape","hxmath/math/Matrix4x4.hx",478,0x11ea859f)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(source,"source")
HXLINE( 479)		HX_VARI(  ::hxmath::math::Matrix4x4Default,self) = this1;
HXLINE( 481)		self->m00 = ( (Float)(source->__Field(HX_("m00",ad,df,52,00),hx::paccDynamic)) );
HXLINE( 482)		self->m01 = ( (Float)(source->__Field(HX_("m01",ae,df,52,00),hx::paccDynamic)) );
HXLINE( 483)		self->m02 = ( (Float)(source->__Field(HX_("m02",af,df,52,00),hx::paccDynamic)) );
HXLINE( 484)		self->m03 = ( (Float)(source->__Field(HX_("m03",b0,df,52,00),hx::paccDynamic)) );
HXLINE( 486)		self->m10 = ( (Float)(source->__Field(HX_("m10",8c,e0,52,00),hx::paccDynamic)) );
HXLINE( 487)		self->m11 = ( (Float)(source->__Field(HX_("m11",8d,e0,52,00),hx::paccDynamic)) );
HXLINE( 488)		self->m12 = ( (Float)(source->__Field(HX_("m12",8e,e0,52,00),hx::paccDynamic)) );
HXLINE( 489)		self->m13 = ( (Float)(source->__Field(HX_("m13",8f,e0,52,00),hx::paccDynamic)) );
HXLINE( 491)		self->m20 = ( (Float)(source->__Field(HX_("m20",6b,e1,52,00),hx::paccDynamic)) );
HXLINE( 492)		self->m21 = ( (Float)(source->__Field(HX_("m21",6c,e1,52,00),hx::paccDynamic)) );
HXLINE( 493)		self->m22 = ( (Float)(source->__Field(HX_("m22",6d,e1,52,00),hx::paccDynamic)) );
HXLINE( 494)		self->m23 = ( (Float)(source->__Field(HX_("m23",6e,e1,52,00),hx::paccDynamic)) );
HXLINE( 496)		self->m30 = ( (Float)(source->__Field(HX_("m30",4a,e2,52,00),hx::paccDynamic)) );
HXLINE( 497)		self->m31 = ( (Float)(source->__Field(HX_("m31",4b,e2,52,00),hx::paccDynamic)) );
HXLINE( 498)		self->m32 = ( (Float)(source->__Field(HX_("m32",4c,e2,52,00),hx::paccDynamic)) );
HXLINE( 499)		self->m33 = ( (Float)(source->__Field(HX_("m33",4d,e2,52,00),hx::paccDynamic)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4x4_Impl__obj,copyFromShape,(void))

 ::hxmath::math::Matrix4x4Default Matrix4x4_Impl__obj::setRotateFromQuaternion( ::hxmath::math::Matrix4x4Default this1, ::hxmath::math::QuaternionDefault q){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","setRotateFromQuaternion",0x55367f18,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.setRotateFromQuaternion","hxmath/math/Matrix4x4.hx",509,0x11ea859f)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(q,"q")
HXLINE( 510)		HX_VARI(  ::hxmath::math::Matrix4x4Default,self) = this1;
HXLINE( 512)		HX_VARI( Float,s) = q->s;
HXLINE( 513)		HX_VARI( Float,x) = q->x;
HXLINE( 514)		HX_VARI( Float,y) = q->y;
HXLINE( 515)		HX_VARI( Float,z) = q->z;
HXLINE( 517)		self->m00 = ((int)1 - ((int)2 * ((y * y) + (z * z))));
HXLINE( 518)		self->m10 = ((int)2 * ((x * y) - (s * z)));
HXLINE( 519)		self->m20 = ((int)2 * ((s * y) + (x * z)));
HXLINE( 521)		self->m01 = ((int)2 * ((x * y) + (s * z)));
HXLINE( 522)		self->m11 = ((int)1 - ((int)2 * ((x * x) + (z * z))));
HXLINE( 523)		self->m21 = ((int)2 * ((y * z) - (s * x)));
HXLINE( 525)		self->m02 = ((int)2 * ((x * z) - (s * y)));
HXLINE( 526)		self->m12 = ((int)2 * ((y * z) + (s * x)));
HXLINE( 527)		self->m22 = ((int)1 - ((int)2 * ((x * x) + (y * y))));
HXLINE( 529)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4x4_Impl__obj,setRotateFromQuaternion,return )

 ::hxmath::math::Matrix4x4Default Matrix4x4_Impl__obj::setTranslate( ::hxmath::math::Matrix4x4Default this1,Float x,Float y,Float z){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","setTranslate",0x09e734f9,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.setTranslate","hxmath/math/Matrix4x4.hx",541,0x11ea859f)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
HXLINE( 542)		HX_VARI(  ::hxmath::math::Matrix4x4Default,self) = this1;
HXLINE( 544)		self->m30 = x;
HXLINE( 545)		self->m31 = y;
HXLINE( 546)		self->m32 = z;
HXLINE( 547)		self->m33 = ((Float)1.0);
HXLINE( 549)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4x4_Impl__obj,setTranslate,return )

 ::hxmath::math::Matrix4x4Default Matrix4x4_Impl__obj::clone( ::hxmath::math::Matrix4x4Default this1){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","clone",0x538b0210,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.clone","hxmath/math/Matrix4x4.hx",558,0x11ea859f)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 559)		HX_VARI(  ::hxmath::math::Matrix4x4Default,self) = this1;
HXLINE( 560)		return  ::hxmath::math::Matrix4x4Default_obj::__new(self->m00,self->m10,self->m20,self->m30,self->m01,self->m11,self->m21,self->m31,self->m02,self->m12,self->m22,self->m32,self->m03,self->m13,self->m23,self->m33);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4x4_Impl__obj,clone,return )

Float Matrix4x4_Impl__obj::getArrayElement( ::hxmath::math::Matrix4x4Default this1,Int i){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","getArrayElement",0xdfc1004c,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.getArrayElement","hxmath/math/Matrix4x4.hx",576,0x11ea859f)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(i,"i")
HXLINE( 577)		HX_VARI(  ::hxmath::math::Matrix4x4Default,self) = this1;
HXLINE( 579)		switch((int)(i)){
            			case (int)0: {
HXLINE( 582)				return self->m00;
            			}
            			break;
            			case (int)1: {
HXLINE( 584)				return self->m10;
            			}
            			break;
            			case (int)2: {
HXLINE( 586)				return self->m20;
            			}
            			break;
            			case (int)3: {
HXLINE( 588)				return self->m30;
            			}
            			break;
            			case (int)4: {
HXLINE( 590)				return self->m01;
            			}
            			break;
            			case (int)5: {
HXLINE( 592)				return self->m11;
            			}
            			break;
            			case (int)6: {
HXLINE( 594)				return self->m21;
            			}
            			break;
            			case (int)7: {
HXLINE( 596)				return self->m31;
            			}
            			break;
            			case (int)8: {
HXLINE( 598)				return self->m02;
            			}
            			break;
            			case (int)9: {
HXLINE( 600)				return self->m12;
            			}
            			break;
            			case (int)10: {
HXLINE( 602)				return self->m22;
            			}
            			break;
            			case (int)11: {
HXLINE( 604)				return self->m32;
            			}
            			break;
            			case (int)12: {
HXLINE( 606)				return self->m03;
            			}
            			break;
            			case (int)13: {
HXLINE( 608)				return self->m13;
            			}
            			break;
            			case (int)14: {
HXLINE( 610)				return self->m23;
            			}
            			break;
            			case (int)15: {
HXLINE( 612)				return self->m33;
            			}
            			break;
            			default:{
HXLINE( 614)				HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            			}
            		}
HXLINE( 579)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4x4_Impl__obj,getArrayElement,return )

Float Matrix4x4_Impl__obj::setArrayElement( ::hxmath::math::Matrix4x4Default this1,Int i,Float value){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","setArrayElement",0xdb8c7d58,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.setArrayElement","hxmath/math/Matrix4x4.hx",628,0x11ea859f)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(i,"i")
            	HX_STACK_ARG(value,"value")
HXLINE( 629)		HX_VARI(  ::hxmath::math::Matrix4x4Default,self) = this1;
HXLINE( 631)		switch((int)(i)){
            			case (int)0: {
HXLINE( 634)				return (self->m00 = value);
            			}
            			break;
            			case (int)1: {
HXLINE( 636)				return (self->m10 = value);
            			}
            			break;
            			case (int)2: {
HXLINE( 638)				return (self->m20 = value);
            			}
            			break;
            			case (int)3: {
HXLINE( 640)				return (self->m30 = value);
            			}
            			break;
            			case (int)4: {
HXLINE( 642)				return (self->m01 = value);
            			}
            			break;
            			case (int)5: {
HXLINE( 644)				return (self->m11 = value);
            			}
            			break;
            			case (int)6: {
HXLINE( 646)				return (self->m21 = value);
            			}
            			break;
            			case (int)7: {
HXLINE( 648)				return (self->m31 = value);
            			}
            			break;
            			case (int)8: {
HXLINE( 650)				return (self->m02 = value);
            			}
            			break;
            			case (int)9: {
HXLINE( 652)				return (self->m12 = value);
            			}
            			break;
            			case (int)10: {
HXLINE( 654)				return (self->m22 = value);
            			}
            			break;
            			case (int)11: {
HXLINE( 656)				return (self->m32 = value);
            			}
            			break;
            			case (int)12: {
HXLINE( 658)				return (self->m03 = value);
            			}
            			break;
            			case (int)13: {
HXLINE( 660)				return (self->m13 = value);
            			}
            			break;
            			case (int)14: {
HXLINE( 662)				return (self->m23 = value);
            			}
            			break;
            			case (int)15: {
HXLINE( 664)				return (self->m33 = value);
            			}
            			break;
            			default:{
HXLINE( 666)				HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            			}
            		}
HXLINE( 631)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4x4_Impl__obj,setArrayElement,return )

Float Matrix4x4_Impl__obj::getElement( ::hxmath::math::Matrix4x4Default this1,Int column,Int row){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","getElement",0xfef11d33,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.getElement","hxmath/math/Matrix4x4.hx",679,0x11ea859f)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(column,"column")
            	HX_STACK_ARG(row,"row")
HXLINE( 680)		HX_VARI(  ::hxmath::math::Matrix4x4Default,self) = this1;
HXLINE( 681)		 ::Dynamic _hx_tmp;
HXDLIN( 681)		switch((int)(((row * (int)4) + column))){
            			case (int)0: {
HXLINE( 681)				_hx_tmp = self->m00;
            			}
            			break;
            			case (int)1: {
HXLINE( 681)				_hx_tmp = self->m10;
            			}
            			break;
            			case (int)2: {
HXLINE( 681)				_hx_tmp = self->m20;
            			}
            			break;
            			case (int)3: {
HXLINE( 681)				_hx_tmp = self->m30;
            			}
            			break;
            			case (int)4: {
HXLINE( 681)				_hx_tmp = self->m01;
            			}
            			break;
            			case (int)5: {
HXLINE( 681)				_hx_tmp = self->m11;
            			}
            			break;
            			case (int)6: {
HXLINE( 681)				_hx_tmp = self->m21;
            			}
            			break;
            			case (int)7: {
HXLINE( 681)				_hx_tmp = self->m31;
            			}
            			break;
            			case (int)8: {
HXLINE( 681)				_hx_tmp = self->m02;
            			}
            			break;
            			case (int)9: {
HXLINE( 681)				_hx_tmp = self->m12;
            			}
            			break;
            			case (int)10: {
HXLINE( 681)				_hx_tmp = self->m22;
            			}
            			break;
            			case (int)11: {
HXLINE( 681)				_hx_tmp = self->m32;
            			}
            			break;
            			case (int)12: {
HXLINE( 681)				_hx_tmp = self->m03;
            			}
            			break;
            			case (int)13: {
HXLINE( 681)				_hx_tmp = self->m13;
            			}
            			break;
            			case (int)14: {
HXLINE( 681)				_hx_tmp = self->m23;
            			}
            			break;
            			case (int)15: {
HXLINE( 681)				_hx_tmp = self->m33;
            			}
            			break;
            			default:{
HXLINE( 681)				HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            			}
            		}
HXDLIN( 681)		return ( (Float)(_hx_tmp) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4x4_Impl__obj,getElement,return )

Float Matrix4x4_Impl__obj::setElement( ::hxmath::math::Matrix4x4Default this1,Int column,Int row,Float value){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","setElement",0x026ebba7,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.setElement","hxmath/math/Matrix4x4.hx",694,0x11ea859f)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(column,"column")
            	HX_STACK_ARG(row,"row")
            	HX_STACK_ARG(value,"value")
HXLINE( 695)		HX_VARI(  ::hxmath::math::Matrix4x4Default,self) = this1;
HXLINE( 696)		 ::Dynamic _hx_tmp;
HXDLIN( 696)		switch((int)(((row * (int)4) + column))){
            			case (int)0: {
HXLINE( 696)				_hx_tmp = (self->m00 = value);
            			}
            			break;
            			case (int)1: {
HXLINE( 696)				_hx_tmp = (self->m10 = value);
            			}
            			break;
            			case (int)2: {
HXLINE( 696)				_hx_tmp = (self->m20 = value);
            			}
            			break;
            			case (int)3: {
HXLINE( 696)				_hx_tmp = (self->m30 = value);
            			}
            			break;
            			case (int)4: {
HXLINE( 696)				_hx_tmp = (self->m01 = value);
            			}
            			break;
            			case (int)5: {
HXLINE( 696)				_hx_tmp = (self->m11 = value);
            			}
            			break;
            			case (int)6: {
HXLINE( 696)				_hx_tmp = (self->m21 = value);
            			}
            			break;
            			case (int)7: {
HXLINE( 696)				_hx_tmp = (self->m31 = value);
            			}
            			break;
            			case (int)8: {
HXLINE( 696)				_hx_tmp = (self->m02 = value);
            			}
            			break;
            			case (int)9: {
HXLINE( 696)				_hx_tmp = (self->m12 = value);
            			}
            			break;
            			case (int)10: {
HXLINE( 696)				_hx_tmp = (self->m22 = value);
            			}
            			break;
            			case (int)11: {
HXLINE( 696)				_hx_tmp = (self->m32 = value);
            			}
            			break;
            			case (int)12: {
HXLINE( 696)				_hx_tmp = (self->m03 = value);
            			}
            			break;
            			case (int)13: {
HXLINE( 696)				_hx_tmp = (self->m13 = value);
            			}
            			break;
            			case (int)14: {
HXLINE( 696)				_hx_tmp = (self->m23 = value);
            			}
            			break;
            			case (int)15: {
HXLINE( 696)				_hx_tmp = (self->m33 = value);
            			}
            			break;
            			default:{
HXLINE( 696)				HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            			}
            		}
HXDLIN( 696)		return ( (Float)(_hx_tmp) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4x4_Impl__obj,setElement,return )

 ::hxmath::math::Vector4Default Matrix4x4_Impl__obj::col( ::hxmath::math::Matrix4x4Default this1,Int index){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","col",0x6b324c33,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.col","hxmath/math/Matrix4x4.hx",706,0x11ea859f)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(index,"index")
HXLINE( 707)		HX_VARI(  ::hxmath::math::Matrix4x4Default,self) = this1;
HXLINE( 709)		switch((int)(index)){
            			case (int)0: {
HXLINE( 712)				return  ::hxmath::math::Vector4Default_obj::__new(self->m00,self->m01,self->m02,self->m03);
            			}
            			break;
            			case (int)1: {
HXLINE( 714)				return  ::hxmath::math::Vector4Default_obj::__new(self->m10,self->m11,self->m12,self->m13);
            			}
            			break;
            			case (int)2: {
HXLINE( 716)				return  ::hxmath::math::Vector4Default_obj::__new(self->m20,self->m21,self->m22,self->m23);
            			}
            			break;
            			case (int)3: {
HXLINE( 718)				return  ::hxmath::math::Vector4Default_obj::__new(self->m30,self->m31,self->m32,self->m33);
            			}
            			break;
            			default:{
HXLINE( 720)				HX_STACK_DO_THROW(HX_("Invalid column",ff,3c,03,94));
            			}
            		}
HXLINE( 709)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4x4_Impl__obj,col,return )

 ::hxmath::math::Vector4Default Matrix4x4_Impl__obj::row( ::hxmath::math::Matrix4x4Default this1,Int index){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","row",0x6b3dae0d,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.row","hxmath/math/Matrix4x4.hx",731,0x11ea859f)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(index,"index")
HXLINE( 732)		HX_VARI(  ::hxmath::math::Matrix4x4Default,self) = this1;
HXLINE( 734)		switch((int)(index)){
            			case (int)0: {
HXLINE( 737)				return  ::hxmath::math::Vector4Default_obj::__new(self->m00,self->m10,self->m20,self->m30);
            			}
            			break;
            			case (int)1: {
HXLINE( 739)				return  ::hxmath::math::Vector4Default_obj::__new(self->m01,self->m11,self->m21,self->m31);
            			}
            			break;
            			case (int)2: {
HXLINE( 741)				return  ::hxmath::math::Vector4Default_obj::__new(self->m02,self->m12,self->m22,self->m32);
            			}
            			break;
            			case (int)3: {
HXLINE( 743)				return  ::hxmath::math::Vector4Default_obj::__new(self->m03,self->m13,self->m23,self->m33);
            			}
            			break;
            			default:{
HXLINE( 745)				HX_STACK_DO_THROW(HX_("Invalid row",51,70,e6,76));
            			}
            		}
HXLINE( 734)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4x4_Impl__obj,row,return )

 ::hxmath::math::Matrix4x4Default Matrix4x4_Impl__obj::applyScalarFunc( ::hxmath::math::Matrix4x4Default this1, ::Dynamic func){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","applyScalarFunc",0x8bfe5011,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.applyScalarFunc","hxmath/math/Matrix4x4.hx",756,0x11ea859f)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(func,"func")
HXLINE( 757)		HX_VARI(  ::hxmath::math::Matrix4x4Default,self) = this1;
HXLINE( 759)		{
HXLINE( 759)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 759)			while((_g < (int)16)){
HXLINE( 759)				HX_VARI( Int,i) = _g++;
HXLINE( 761)				{
HXLINE( 761)					 ::Dynamic _hx_tmp;
HXDLIN( 761)					switch((int)(i)){
            						case (int)0: {
HXLINE( 761)							_hx_tmp = self->m00;
            						}
            						break;
            						case (int)1: {
HXLINE( 761)							_hx_tmp = self->m10;
            						}
            						break;
            						case (int)2: {
HXLINE( 761)							_hx_tmp = self->m20;
            						}
            						break;
            						case (int)3: {
HXLINE( 761)							_hx_tmp = self->m30;
            						}
            						break;
            						case (int)4: {
HXLINE( 761)							_hx_tmp = self->m01;
            						}
            						break;
            						case (int)5: {
HXLINE( 761)							_hx_tmp = self->m11;
            						}
            						break;
            						case (int)6: {
HXLINE( 761)							_hx_tmp = self->m21;
            						}
            						break;
            						case (int)7: {
HXLINE( 761)							_hx_tmp = self->m31;
            						}
            						break;
            						case (int)8: {
HXLINE( 761)							_hx_tmp = self->m02;
            						}
            						break;
            						case (int)9: {
HXLINE( 761)							_hx_tmp = self->m12;
            						}
            						break;
            						case (int)10: {
HXLINE( 761)							_hx_tmp = self->m22;
            						}
            						break;
            						case (int)11: {
HXLINE( 761)							_hx_tmp = self->m32;
            						}
            						break;
            						case (int)12: {
HXLINE( 761)							_hx_tmp = self->m03;
            						}
            						break;
            						case (int)13: {
HXLINE( 761)							_hx_tmp = self->m13;
            						}
            						break;
            						case (int)14: {
HXLINE( 761)							_hx_tmp = self->m23;
            						}
            						break;
            						case (int)15: {
HXLINE( 761)							_hx_tmp = self->m33;
            						}
            						break;
            						default:{
HXLINE( 761)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 761)					HX_VARI( Float,value) = ( (Float)(func(( (Float)(_hx_tmp) ))) );
HXDLIN( 761)					switch((int)(i)){
            						case (int)0: {
HXLINE( 761)							self->m00 = value;
            						}
            						break;
            						case (int)1: {
HXLINE( 761)							self->m10 = value;
            						}
            						break;
            						case (int)2: {
HXLINE( 761)							self->m20 = value;
            						}
            						break;
            						case (int)3: {
HXLINE( 761)							self->m30 = value;
            						}
            						break;
            						case (int)4: {
HXLINE( 761)							self->m01 = value;
            						}
            						break;
            						case (int)5: {
HXLINE( 761)							self->m11 = value;
            						}
            						break;
            						case (int)6: {
HXLINE( 761)							self->m21 = value;
            						}
            						break;
            						case (int)7: {
HXLINE( 761)							self->m31 = value;
            						}
            						break;
            						case (int)8: {
HXLINE( 761)							self->m02 = value;
            						}
            						break;
            						case (int)9: {
HXLINE( 761)							self->m12 = value;
            						}
            						break;
            						case (int)10: {
HXLINE( 761)							self->m22 = value;
            						}
            						break;
            						case (int)11: {
HXLINE( 761)							self->m32 = value;
            						}
            						break;
            						case (int)12: {
HXLINE( 761)							self->m03 = value;
            						}
            						break;
            						case (int)13: {
HXLINE( 761)							self->m13 = value;
            						}
            						break;
            						case (int)14: {
HXLINE( 761)							self->m23 = value;
            						}
            						break;
            						case (int)15: {
HXLINE( 761)							self->m33 = value;
            						}
            						break;
            						default:{
HXLINE( 761)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXLINE( 764)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4x4_Impl__obj,applyScalarFunc,return )

 ::hxmath::math::Matrix4x4Default Matrix4x4_Impl__obj::applySubMatrixTranspose( ::hxmath::math::Matrix4x4Default this1){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","applySubMatrixTranspose",0xca3cecd9,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.applySubMatrixTranspose","hxmath/math/Matrix4x4.hx",773,0x11ea859f)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 774)		HX_VARI(  ::hxmath::math::Matrix4x4Default,self) = this1;
HXLINE( 776)		HX_VARI( Float,temp) = self->m01;
HXLINE( 779)		self->m01 = self->m10;
HXLINE( 780)		self->m10 = temp;
HXLINE( 782)		temp = self->m02;
HXLINE( 783)		self->m02 = self->m20;
HXLINE( 784)		self->m20 = temp;
HXLINE( 786)		temp = self->m12;
HXLINE( 787)		self->m12 = self->m21;
HXLINE( 788)		self->m21 = temp;
HXLINE( 790)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4x4_Impl__obj,applySubMatrixTranspose,return )

 ::hxmath::math::Matrix4x4Default Matrix4x4_Impl__obj::applyInvertFrame( ::hxmath::math::Matrix4x4Default this1){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","applyInvertFrame",0x78155696,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.applyInvertFrame","hxmath/math/Matrix4x4.hx",801,0x11ea859f)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 802)		HX_VARI(  ::hxmath::math::Matrix4x4Default,self) = this1;
HXLINE( 805)		{
HXLINE( 805)			HX_VARI( Float,temp) = self->m01;
HXDLIN( 805)			self->m01 = self->m10;
HXDLIN( 805)			self->m10 = temp;
HXDLIN( 805)			temp = self->m02;
HXDLIN( 805)			self->m02 = self->m20;
HXDLIN( 805)			self->m20 = temp;
HXDLIN( 805)			temp = self->m12;
HXDLIN( 805)			self->m12 = self->m21;
HXDLIN( 805)			self->m21 = temp;
            		}
HXLINE( 808)		HX_VARI( Float,tx) = -((((self->m00 * self->m30) + (self->m10 * self->m31)) + (self->m20 * self->m32)));
HXLINE( 809)		HX_VARI( Float,ty) = -((((self->m01 * self->m30) + (self->m11 * self->m31)) + (self->m21 * self->m32)));
HXLINE( 810)		HX_VARI( Float,tz) = -((((self->m02 * self->m30) + (self->m12 * self->m31)) + (self->m22 * self->m32)));
HXLINE( 812)		self->m30 = tx;
HXLINE( 813)		self->m31 = ty;
HXLINE( 814)		self->m32 = tz;
HXLINE( 816)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4x4_Impl__obj,applyInvertFrame,return )

 ::hxmath::math::Matrix4x4Default Matrix4x4_Impl__obj::get_zero(){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","get_zero",0xbefdcdde,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.get_zero","hxmath/math/Matrix4x4.hx",821,0x11ea859f)
HXLINE( 821)		return  ::hxmath::math::Matrix4x4Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Matrix4x4_Impl__obj,get_zero,return )

 ::hxmath::math::Matrix4x4Default Matrix4x4_Impl__obj::get_identity(){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","get_identity",0x0a6096f4,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.get_identity","hxmath/math/Matrix4x4.hx",830,0x11ea859f)
HXLINE( 830)		return  ::hxmath::math::Matrix4x4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Matrix4x4_Impl__obj,get_identity,return )

 ::hxmath::math::Vector3Default Matrix4x4_Impl__obj::get_t( ::hxmath::math::Matrix4x4Default this1){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","get_t",0x9c8893fe,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.get_t","hxmath/math/Matrix4x4.hx",838,0x11ea859f)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 839)		HX_VARI(  ::hxmath::math::Matrix4x4Default,self) = this1;
HXLINE( 840)		return  ::hxmath::math::Vector3Default_obj::__new(self->m30,self->m31,self->m32);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4x4_Impl__obj,get_t,return )

 ::hxmath::math::Vector3Default Matrix4x4_Impl__obj::set_t( ::hxmath::math::Matrix4x4Default this1, ::hxmath::math::Vector3Default t){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","set_t",0x85578a0a,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.set_t","hxmath/math/Matrix4x4.hx",844,0x11ea859f)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(t,"t")
HXLINE( 845)		HX_VARI(  ::hxmath::math::Matrix4x4Default,self) = this1;
HXLINE( 846)		self->m30 = t->x;
HXLINE( 847)		self->m31 = t->y;
HXLINE( 848)		self->m32 = t->z;
HXLINE( 849)		return t;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4x4_Impl__obj,set_t,return )

 ::hxmath::math::Matrix4x4Default Matrix4x4_Impl__obj::get_transpose( ::hxmath::math::Matrix4x4Default this1){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","get_transpose",0x06257e03,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.get_transpose","hxmath/math/Matrix4x4.hx",853,0x11ea859f)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 854)		HX_VARI(  ::hxmath::math::Matrix4x4Default,self) = this1;
HXLINE( 855)		return  ::hxmath::math::Matrix4x4Default_obj::__new(self->m00,self->m01,self->m02,self->m03,self->m10,self->m11,self->m12,self->m13,self->m20,self->m21,self->m22,self->m23,self->m30,self->m31,self->m32,self->m33);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4x4_Impl__obj,get_transpose,return )

Float Matrix4x4_Impl__obj::get_det( ::hxmath::math::Matrix4x4Default this1){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","get_det",0x3ec843dd,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.get_det","hxmath/math/Matrix4x4.hx",863,0x11ea859f)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 864)		HX_VARI(  ::hxmath::math::Matrix4x4Default,self) = this1;
HXLINE( 865)		HX_VARI( Float,m00) = self->m00;
HXDLIN( 865)		HX_VARI( Float,m10) = self->m10;
HXDLIN( 865)		HX_VARI( Float,m20) = self->m20;
HXDLIN( 865)		HX_VARI( Float,m30) = self->m30;
HXDLIN( 865)		HX_VARI( Float,m01) = self->m01;
HXDLIN( 865)		HX_VARI( Float,m11) = self->m11;
HXDLIN( 865)		HX_VARI( Float,m21) = self->m21;
HXDLIN( 865)		HX_VARI( Float,m31) = self->m31;
HXDLIN( 865)		HX_VARI( Float,m02) = self->m02;
HXDLIN( 865)		HX_VARI( Float,m12) = self->m12;
HXDLIN( 865)		HX_VARI( Float,m22) = self->m22;
HXDLIN( 865)		HX_VARI( Float,m32) = self->m32;
HXDLIN( 865)		HX_VARI( Float,m03) = self->m03;
HXDLIN( 865)		HX_VARI( Float,m13) = self->m13;
HXDLIN( 865)		HX_VARI( Float,m23) = self->m23;
HXDLIN( 865)		HX_VARI( Float,m33) = self->m33;
HXDLIN( 865)		return ((((m00 * (((m11 * ((m22 * m33) - (m32 * m23))) - (m21 * ((m12 * m33) - (m32 * m13)))) + (m31 * ((m12 * m23) - (m22 * m13))))) - (m10 * (((m01 * ((m22 * m33) - (m32 * m23))) - (m21 * ((m02 * m33) - (m32 * m03)))) + (m31 * ((m02 * m23) - (m22 * m03)))))) + (m20 * (((m01 * ((m12 * m33) - (m32 * m13))) - (m11 * ((m02 * m33) - (m32 * m03)))) + (m31 * ((m02 * m13) - (m12 * m03)))))) - (m30 * (((m01 * ((m12 * m23) - (m22 * m13))) - (m11 * ((m02 * m23) - (m22 * m03)))) + (m21 * ((m02 * m13) - (m12 * m03))))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4x4_Impl__obj,get_det,return )

 ::hxmath::math::Matrix3x3Default Matrix4x4_Impl__obj::get_subMatrix( ::hxmath::math::Matrix4x4Default this1){
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","get_subMatrix",0x7c0aa16b,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.get_subMatrix","hxmath/math/Matrix4x4.hx",873,0x11ea859f)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 874)		HX_VARI(  ::hxmath::math::Matrix4x4Default,self) = this1;
HXLINE( 875)		return  ::hxmath::math::Matrix3x3Default_obj::__new(self->m00,self->m10,self->m20,self->m01,self->m11,self->m21,self->m02,self->m12,self->m22);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4x4_Impl__obj,get_subMatrix,return )


Matrix4x4_Impl__obj::Matrix4x4_Impl__obj()
{
}

bool Matrix4x4_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"col") ) { outValue = col_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"row") ) { outValue = row_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { outValue = clone_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_t") ) { outValue = get_t_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_t") ) { outValue = set_t_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"negate") ) { outValue = negate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyTo") ) { outValue = copyTo_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addWith") ) { outValue = addWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_det") ) { outValue = get_det_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"multiply") ) { outValue = multiply_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subtract") ) { outValue = subtract_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_zero") ) { outValue = get_zero_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromArray") ) { outValue = fromArray_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getElement") ) { outValue = getElement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setElement") ) { outValue = setElement_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"copyToShape") ) { outValue = copyToShape_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"subtractWith") ) { outValue = subtractWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setTranslate") ) { outValue = setTranslate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_identity") ) { outValue = get_identity_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"copyFromShape") ) { outValue = copyFromShape_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_transpose") ) { outValue = get_transpose_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_subMatrix") ) { outValue = get_subMatrix_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"multiplyVector") ) { outValue = multiplyVector_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getArrayElement") ) { outValue = getArrayElement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setArrayElement") ) { outValue = setArrayElement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"applyScalarFunc") ) { outValue = applyScalarFunc_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"applyInvertFrame") ) { outValue = applyInvertFrame_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"fromMatrix4x4Shape") ) { outValue = fromMatrix4x4Shape_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"setRotateFromQuaternion") ) { outValue = setRotateFromQuaternion_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"applySubMatrixTranspose") ) { outValue = applySubMatrixTranspose_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Matrix4x4_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo Matrix4x4_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Matrix4x4_Impl__obj::elementCount,HX_HCSTRING("elementCount","\x73","\x1c","\x9d","\xaa")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Matrix4x4_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Matrix4x4_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Matrix4x4_Impl__obj::elementCount,"elementCount");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Matrix4x4_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Matrix4x4_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Matrix4x4_Impl__obj::elementCount,"elementCount");
};

#endif

hx::Class Matrix4x4_Impl__obj::__mClass;

static ::String Matrix4x4_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("elementCount","\x73","\x1c","\x9d","\xaa"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("fromArray","\xcf","\x57","\x18","\xda"),
	HX_HCSTRING("fromMatrix4x4Shape","\x5c","\xed","\x20","\x51"),
	HX_HCSTRING("multiplyVector","\x07","\x3a","\x59","\xa3"),
	HX_HCSTRING("multiply","\x24","\xe2","\x8c","\x9a"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("subtract","\x14","\x75","\x11","\xf8"),
	HX_HCSTRING("negate","\xc2","\x41","\x19","\x67"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("addWith","\xc7","\xb8","\x35","\x8b"),
	HX_HCSTRING("subtractWith","\x3a","\x31","\x45","\x74"),
	HX_HCSTRING("copyTo","\x90","\x1c","\x33","\xc9"),
	HX_HCSTRING("copyToShape","\x71","\xac","\xb5","\x9e"),
	HX_HCSTRING("copyFromShape","\xe2","\x52","\x6b","\x92"),
	HX_HCSTRING("setRotateFromQuaternion","\xa5","\xe7","\x55","\xc3"),
	HX_HCSTRING("setTranslate","\x4c","\x97","\xcf","\x6d"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("getArrayElement","\xd9","\x93","\x9e","\xda"),
	HX_HCSTRING("setArrayElement","\xe5","\x10","\x6a","\xd6"),
	HX_HCSTRING("getElement","\xc6","\x34","\xb6","\x55"),
	HX_HCSTRING("setElement","\x3a","\xd3","\x33","\x59"),
	HX_HCSTRING("col","\x40","\x80","\x4b","\x00"),
	HX_HCSTRING("row","\x1a","\xe2","\x56","\x00"),
	HX_HCSTRING("applyScalarFunc","\x9e","\xe3","\xdb","\x86"),
	HX_HCSTRING("applySubMatrixTranspose","\x66","\x55","\x5c","\x38"),
	HX_HCSTRING("applyInvertFrame","\x69","\xde","\x18","\xff"),
	HX_HCSTRING("get_zero","\xb1","\xca","\xab","\xd0"),
	HX_HCSTRING("get_identity","\x47","\xf9","\x48","\x6e"),
	HX_HCSTRING("get_t","\x4b","\xa5","\x60","\x91"),
	HX_HCSTRING("set_t","\x57","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_transpose","\x50","\x24","\x93","\x0d"),
	HX_HCSTRING("get_det","\x6a","\x02","\xc1","\x26"),
	HX_HCSTRING("get_subMatrix","\xb8","\x47","\x78","\x83"),
	::String(null())
};

void Matrix4x4_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hxmath.math._Matrix4x4.Matrix4x4_Impl_","\xe1","\x76","\x63","\x89");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Matrix4x4_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Matrix4x4_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Matrix4x4_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Matrix4x4_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Matrix4x4_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Matrix4x4_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Matrix4x4_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Matrix4x4_Impl__obj::__boot()
{
{
            	HX_STACK_FRAME("hxmath.math._Matrix4x4.Matrix4x4_Impl_","boot",0x60272cdf,"hxmath.math._Matrix4x4.Matrix4x4_Impl_.boot","hxmath/math/Matrix4x4.hx",98,0x11ea859f)
HXLINE(  98)		elementCount = (int)16;
            	}
}

} // end namespace hxmath
} // end namespace math
} // end namespace _Matrix4x4
