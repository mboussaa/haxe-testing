// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_test_FlxPointMock
#include <test/FlxPointMock.h>
#endif

namespace test{

void FlxPointMock_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y){
Float X = __o_X.Default(((Float)0.0));
Float Y = __o_Y.Default(((Float)0.0));
            	HX_STACK_FRAME("test.FlxPointMock","new",0x869940d6,"test.FlxPointMock.new","test/TestConverters.hx",9,0x87bef13c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE(  12)		this->y = ((Float)0.0);
HXLINE(  11)		this->x = ((Float)0.0);
HXLINE(  16)		this->set_x(X);
HXLINE(  17)		this->set_y(Y);
            	}

Dynamic FlxPointMock_obj::__CreateEmpty() { return new FlxPointMock_obj; }

hx::ObjectPtr< FlxPointMock_obj > FlxPointMock_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y)
{
	hx::ObjectPtr< FlxPointMock_obj > _hx_result = new FlxPointMock_obj();
	_hx_result->__construct(__o_X,__o_Y);
	return _hx_result;
}

Dynamic FlxPointMock_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxPointMock_obj > _hx_result = new FlxPointMock_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

Float FlxPointMock_obj::set_x(Float value){
            	HX_STACK_FRAME("test.FlxPointMock","set_x",0x310a9551,"test.FlxPointMock.set_x","test/TestConverters.hx",22,0x87bef13c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(  22)		return (this->x = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPointMock_obj,set_x,return )

Float FlxPointMock_obj::set_y(Float value){
            	HX_STACK_FRAME("test.FlxPointMock","set_y",0x310a9552,"test.FlxPointMock.set_y","test/TestConverters.hx",27,0x87bef13c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(  27)		return (this->y = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxPointMock_obj,set_y,return )

::String FlxPointMock_obj::toString(){
            	HX_STACK_FRAME("test.FlxPointMock","toString",0xfe8ff476,"test.FlxPointMock.toString","test/TestConverters.hx",32,0x87bef13c)
            	HX_STACK_THIS(this)
HXLINE(  32)		return (((HX_("",00,00,00,00) + this->x) + HX_(", ",74,26,00,00)) + this->y);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxPointMock_obj,toString,return )


FlxPointMock_obj::FlxPointMock_obj()
{
}

hx::Val FlxPointMock_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn()); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxPointMock_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_x(inValue) );x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_y(inValue) );y=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxPointMock_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxPointMock_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(FlxPointMock_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(FlxPointMock_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxPointMock_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxPointMock_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void FlxPointMock_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxPointMock_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxPointMock_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxPointMock_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxPointMock_obj::__mClass;

void FlxPointMock_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("test.FlxPointMock","\xe4","\xdd","\x4e","\xd3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxPointMock_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxPointMock_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxPointMock_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxPointMock_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxPointMock_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxPointMock_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace test
