// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_hxmath_math_Matrix2x2Default
#include <hxmath/math/Matrix2x2Default.h>
#endif
#ifndef INCLUDED_hxmath_math_Matrix3x2Default
#include <hxmath/math/Matrix3x2Default.h>
#endif
#ifndef INCLUDED_hxmath_math_Matrix3x3Default
#include <hxmath/math/Matrix3x3Default.h>
#endif
#ifndef INCLUDED_hxmath_math_Matrix4x4Default
#include <hxmath/math/Matrix4x4Default.h>
#endif
#ifndef INCLUDED_hxmath_math_QuaternionDefault
#include <hxmath/math/QuaternionDefault.h>
#endif
#ifndef INCLUDED_hxmath_math_Vector2Default
#include <hxmath/math/Vector2Default.h>
#endif
#ifndef INCLUDED_hxmath_math_Vector3Default
#include <hxmath/math/Vector3Default.h>
#endif
#ifndef INCLUDED_hxmath_math_Vector4Default
#include <hxmath/math/Vector4Default.h>
#endif
#ifndef INCLUDED_nanotest_NanoTestAssertResult
#include <nanotest/NanoTestAssertResult.h>
#endif
#ifndef INCLUDED_nanotest_NanoTestCase
#include <nanotest/NanoTestCase.h>
#endif
#ifndef INCLUDED_test_FlxPointMock
#include <test/FlxPointMock.h>
#endif
#ifndef INCLUDED_test_MathTestCase
#include <test/MathTestCase.h>
#endif
#ifndef INCLUDED_test_TestConverters
#include <test/TestConverters.h>
#endif

namespace test{

void TestConverters_obj::__construct(){
            	HX_STACK_FRAME("test.TestConverters","new",0x3a4b8c73,"test.TestConverters.new","test/TestConverters.hx",44,0x87bef13c)
            	HX_STACK_THIS(this)
HXLINE(  44)		super::__construct(hx::SourceInfo(HX_("TestConverters.hx",79,d1,29,52),44,HX_("test.TestConverters",01,d7,f1,94),HX_("new",60,d0,53,00)));
            	}

Dynamic TestConverters_obj::__CreateEmpty() { return new TestConverters_obj; }

hx::ObjectPtr< TestConverters_obj > TestConverters_obj::__new()
{
	hx::ObjectPtr< TestConverters_obj > _hx_result = new TestConverters_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestConverters_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestConverters_obj > _hx_result = new TestConverters_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestConverters_obj::testShapeSimilarConversion(){
            	HX_STACK_FRAME("test.TestConverters","testShapeSimilarConversion",0x89bef8ff,"test.TestConverters.testShapeSimilarConversion","test/TestConverters.hx",48,0x87bef13c)
            	HX_STACK_THIS(this)
HXLINE(  49)		HX_VARI(  ::hxmath::math::Vector2Default,v2a) = this->randomVector2(null());
HXLINE(  50)		HX_VAR( Float,v2b_y);
HXDLIN(  50)		HX_VARI( Float,v2b_x) = ((Float)0.0);
HXLINE(  47)		v2b_y = ((Float)0.0);
HXLINE(  51)		HX_VARI(  ::hxmath::math::Vector2Default,v2c) = this->randomVector2(null());
HXLINE(  52)		{
HXLINE(  47)			v2b_x = v2a->x;
HXDLIN(  47)			v2b_y = v2a->y;
            		}
HXLINE(  53)		{
HXLINE(  53)			v2c->x = v2b_x;
HXDLIN(  53)			v2c->y = v2b_y;
            		}
HXLINE(  54)		Bool _hx_tmp;
HXDLIN(  54)		Bool _hx_tmp1;
HXDLIN(  54)		if (hx::IsNull( v2a )) {
HXLINE(  54)			_hx_tmp1 = hx::IsNull( v2c );
            		}
            		else {
HXLINE(  54)			_hx_tmp1 = false;
            		}
HXDLIN(  54)		if (!(_hx_tmp1)) {
HXLINE(  54)			Bool _hx_tmp2;
HXDLIN(  54)			Bool _hx_tmp3;
HXDLIN(  54)			if (hx::IsNotNull( v2a )) {
HXLINE(  54)				_hx_tmp3 = hx::IsNotNull( v2c );
            			}
            			else {
HXLINE(  54)				_hx_tmp3 = false;
            			}
HXDLIN(  54)			if (_hx_tmp3) {
HXLINE(  54)				_hx_tmp2 = (v2a->x == v2c->x);
            			}
            			else {
HXLINE(  54)				_hx_tmp2 = false;
            			}
HXDLIN(  54)			if (_hx_tmp2) {
HXLINE(  54)				_hx_tmp = (v2a->y == v2c->y);
            			}
            			else {
HXLINE(  54)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(  54)			_hx_tmp = true;
            		}
HXDLIN(  54)		this->assertTrue(_hx_tmp,hx::SourceInfo(HX_("TestConverters.hx",79,d1,29,52),54,HX_("test.TestConverters",01,d7,f1,94),HX_("testShapeSimilarConversion",b2,92,ba,e7)));
HXLINE(  56)		HX_VARI(  ::hxmath::math::Vector3Default,v3a) = this->randomVector3(null());
HXLINE(  57)		HX_VAR( Float,v3b_z);
HXDLIN(  57)		HX_VAR( Float,v3b_y);
HXDLIN(  57)		HX_VARI( Float,v3b_x) = ((Float)0.0);
HXLINE(  47)		v3b_y = ((Float)0.0);
HXDLIN(  47)		v3b_z = ((Float)0.0);
HXLINE(  58)		HX_VARI(  ::hxmath::math::Vector3Default,v3c) = this->randomVector3(null());
HXLINE(  59)		{
HXLINE(  47)			v3b_x = v3a->x;
HXDLIN(  47)			v3b_y = v3a->y;
HXDLIN(  47)			v3b_z = v3a->z;
            		}
HXLINE(  60)		{
HXLINE(  60)			v3c->x = v3b_x;
HXDLIN(  60)			v3c->y = v3b_y;
HXDLIN(  60)			v3c->z = v3b_z;
            		}
HXLINE(  61)		Bool _hx_tmp4;
HXDLIN(  61)		Bool _hx_tmp5;
HXDLIN(  61)		if (hx::IsNull( v3a )) {
HXLINE(  61)			_hx_tmp5 = hx::IsNull( v3c );
            		}
            		else {
HXLINE(  61)			_hx_tmp5 = false;
            		}
HXDLIN(  61)		if (!(_hx_tmp5)) {
HXLINE(  61)			Bool _hx_tmp6;
HXDLIN(  61)			Bool _hx_tmp7;
HXDLIN(  61)			Bool _hx_tmp8;
HXDLIN(  61)			if (hx::IsNotNull( v3a )) {
HXLINE(  61)				_hx_tmp8 = hx::IsNotNull( v3c );
            			}
            			else {
HXLINE(  61)				_hx_tmp8 = false;
            			}
HXDLIN(  61)			if (_hx_tmp8) {
HXLINE(  61)				_hx_tmp7 = (v3a->x == v3c->x);
            			}
            			else {
HXLINE(  61)				_hx_tmp7 = false;
            			}
HXDLIN(  61)			if (_hx_tmp7) {
HXLINE(  61)				_hx_tmp6 = (v3a->y == v3c->y);
            			}
            			else {
HXLINE(  61)				_hx_tmp6 = false;
            			}
HXDLIN(  61)			if (_hx_tmp6) {
HXLINE(  61)				_hx_tmp4 = (v3a->z == v3c->z);
            			}
            			else {
HXLINE(  61)				_hx_tmp4 = false;
            			}
            		}
            		else {
HXLINE(  61)			_hx_tmp4 = true;
            		}
HXDLIN(  61)		this->assertTrue(_hx_tmp4,hx::SourceInfo(HX_("TestConverters.hx",79,d1,29,52),61,HX_("test.TestConverters",01,d7,f1,94),HX_("testShapeSimilarConversion",b2,92,ba,e7)));
HXLINE(  63)		HX_VARI(  ::hxmath::math::Vector4Default,v4a) = this->randomVector4(null());
HXLINE(  64)		HX_VAR( Float,v4b_z);
HXDLIN(  64)		HX_VAR( Float,v4b_y);
HXDLIN(  64)		HX_VAR( Float,v4b_x);
HXDLIN(  64)		HX_VAR( Float,v4b_w);
HXLINE(  47)		v4b_x = ((Float)0.0);
HXDLIN(  47)		v4b_y = ((Float)0.0);
HXDLIN(  47)		v4b_z = ((Float)0.0);
HXDLIN(  47)		v4b_w = ((Float)0.0);
HXLINE(  65)		HX_VARI(  ::hxmath::math::Vector4Default,v4c) = this->randomVector4(null());
HXLINE(  66)		{
HXLINE(  47)			v4b_x = v4a->x;
HXDLIN(  47)			v4b_y = v4a->y;
HXDLIN(  47)			v4b_z = v4a->z;
HXDLIN(  47)			v4b_w = v4a->w;
            		}
HXLINE(  67)		{
HXLINE(  67)			v4c->x = v4b_x;
HXDLIN(  67)			v4c->y = v4b_y;
HXDLIN(  67)			v4c->z = v4b_z;
HXDLIN(  67)			v4c->w = v4b_w;
            		}
HXLINE(  68)		Bool _hx_tmp9;
HXDLIN(  68)		Bool _hx_tmp10;
HXDLIN(  68)		if (hx::IsNull( v4a )) {
HXLINE(  68)			_hx_tmp10 = hx::IsNull( v4c );
            		}
            		else {
HXLINE(  68)			_hx_tmp10 = false;
            		}
HXDLIN(  68)		if (!(_hx_tmp10)) {
HXLINE(  68)			Bool _hx_tmp11;
HXDLIN(  68)			Bool _hx_tmp12;
HXDLIN(  68)			Bool _hx_tmp13;
HXDLIN(  68)			Bool _hx_tmp14;
HXDLIN(  68)			if (hx::IsNotNull( v4a )) {
HXLINE(  68)				_hx_tmp14 = hx::IsNotNull( v4c );
            			}
            			else {
HXLINE(  68)				_hx_tmp14 = false;
            			}
HXDLIN(  68)			if (_hx_tmp14) {
HXLINE(  68)				_hx_tmp13 = (v4a->x == v4c->x);
            			}
            			else {
HXLINE(  68)				_hx_tmp13 = false;
            			}
HXDLIN(  68)			if (_hx_tmp13) {
HXLINE(  68)				_hx_tmp12 = (v4a->y == v4c->y);
            			}
            			else {
HXLINE(  68)				_hx_tmp12 = false;
            			}
HXDLIN(  68)			if (_hx_tmp12) {
HXLINE(  68)				_hx_tmp11 = (v4a->z == v4c->z);
            			}
            			else {
HXLINE(  68)				_hx_tmp11 = false;
            			}
HXDLIN(  68)			if (_hx_tmp11) {
HXLINE(  68)				_hx_tmp9 = (v4a->w == v4c->w);
            			}
            			else {
HXLINE(  68)				_hx_tmp9 = false;
            			}
            		}
            		else {
HXLINE(  68)			_hx_tmp9 = true;
            		}
HXDLIN(  68)		this->assertTrue(_hx_tmp9,hx::SourceInfo(HX_("TestConverters.hx",79,d1,29,52),68,HX_("test.TestConverters",01,d7,f1,94),HX_("testShapeSimilarConversion",b2,92,ba,e7)));
HXLINE(  70)		HX_VARI(  ::hxmath::math::Matrix2x2Default,m22a) = this->randomMatrix2x2(null());
HXLINE(  71)		HX_VAR( Float,m22b_d);
HXDLIN(  71)		HX_VAR( Float,m22b_c);
HXDLIN(  71)		HX_VAR( Float,m22b_b);
HXDLIN(  71)		HX_VARI( Float,m22b_a) = ((Float)0.0);
HXLINE(  47)		m22b_b = ((Float)0.0);
HXDLIN(  47)		m22b_c = ((Float)0.0);
HXDLIN(  47)		m22b_d = ((Float)0.0);
HXLINE(  75)		HX_VARI(  ::hxmath::math::Matrix2x2Default,m22c) = this->randomMatrix2x2(null());
HXLINE(  76)		{
HXLINE(  47)			m22b_a = m22a->a;
HXDLIN(  47)			m22b_b = m22a->b;
HXDLIN(  47)			m22b_c = m22a->c;
HXDLIN(  47)			m22b_d = m22a->d;
            		}
HXLINE(  77)		{
HXLINE(  77)			m22c->a = m22b_a;
HXDLIN(  77)			m22c->b = m22b_b;
HXDLIN(  77)			m22c->c = m22b_c;
HXDLIN(  77)			m22c->d = m22b_d;
            		}
HXLINE(  78)		Bool _hx_tmp15;
HXDLIN(  78)		Bool _hx_tmp16;
HXDLIN(  78)		if (hx::IsNull( m22a )) {
HXLINE(  78)			_hx_tmp16 = hx::IsNull( m22c );
            		}
            		else {
HXLINE(  78)			_hx_tmp16 = false;
            		}
HXDLIN(  78)		if (!(_hx_tmp16)) {
HXLINE(  78)			Bool _hx_tmp17;
HXDLIN(  78)			Bool _hx_tmp18;
HXDLIN(  78)			Bool _hx_tmp19;
HXDLIN(  78)			Bool _hx_tmp20;
HXDLIN(  78)			if (hx::IsNotNull( m22a )) {
HXLINE(  78)				_hx_tmp20 = hx::IsNotNull( m22c );
            			}
            			else {
HXLINE(  78)				_hx_tmp20 = false;
            			}
HXDLIN(  78)			if (_hx_tmp20) {
HXLINE(  78)				_hx_tmp19 = (m22a->a == m22c->a);
            			}
            			else {
HXLINE(  78)				_hx_tmp19 = false;
            			}
HXDLIN(  78)			if (_hx_tmp19) {
HXLINE(  78)				_hx_tmp18 = (m22a->b == m22c->b);
            			}
            			else {
HXLINE(  78)				_hx_tmp18 = false;
            			}
HXDLIN(  78)			if (_hx_tmp18) {
HXLINE(  78)				_hx_tmp17 = (m22a->c == m22c->c);
            			}
            			else {
HXLINE(  78)				_hx_tmp17 = false;
            			}
HXDLIN(  78)			if (_hx_tmp17) {
HXLINE(  78)				_hx_tmp15 = (m22a->d == m22c->d);
            			}
            			else {
HXLINE(  78)				_hx_tmp15 = false;
            			}
            		}
            		else {
HXLINE(  78)			_hx_tmp15 = true;
            		}
HXDLIN(  78)		this->assertTrue(_hx_tmp15,hx::SourceInfo(HX_("TestConverters.hx",79,d1,29,52),78,HX_("test.TestConverters",01,d7,f1,94),HX_("testShapeSimilarConversion",b2,92,ba,e7)));
HXLINE(  80)		HX_VARI(  ::hxmath::math::Matrix3x2Default,m32a) = this->randomMatrix3x2(null());
HXLINE(  81)		HX_VAR( Float,m32b_ty);
HXDLIN(  81)		HX_VAR( Float,m32b_tx);
HXDLIN(  81)		HX_VAR( Float,m32b_d);
HXDLIN(  81)		HX_VAR( Float,m32b_c);
HXDLIN(  81)		HX_VAR( Float,m32b_b);
HXDLIN(  81)		HX_VARI( Float,m32b_a) = ((Float)0.0);
HXLINE(  47)		m32b_b = ((Float)0.0);
HXDLIN(  47)		m32b_c = ((Float)0.0);
HXDLIN(  47)		m32b_d = ((Float)0.0);
HXDLIN(  47)		m32b_tx = ((Float)0.0);
HXDLIN(  47)		m32b_ty = ((Float)0.0);
HXLINE(  86)		HX_VARI(  ::hxmath::math::Matrix3x2Default,m32c) = this->randomMatrix3x2(null());
HXLINE(  87)		{
HXLINE(  47)			m32b_a = m32a->a;
HXDLIN(  47)			m32b_b = m32a->b;
HXDLIN(  47)			m32b_c = m32a->c;
HXDLIN(  47)			m32b_d = m32a->d;
HXDLIN(  47)			m32b_tx = m32a->tx;
HXDLIN(  47)			m32b_ty = m32a->ty;
            		}
HXLINE(  88)		{
HXLINE(  88)			m32c->a = m32b_a;
HXDLIN(  88)			m32c->b = m32b_b;
HXDLIN(  88)			m32c->c = m32b_c;
HXDLIN(  88)			m32c->d = m32b_d;
HXDLIN(  88)			m32c->tx = m32b_tx;
HXDLIN(  88)			m32c->ty = m32b_ty;
            		}
HXLINE(  89)		Bool _hx_tmp21;
HXDLIN(  89)		Bool _hx_tmp22;
HXDLIN(  89)		if (hx::IsNull( m32a )) {
HXLINE(  89)			_hx_tmp22 = hx::IsNull( m32c );
            		}
            		else {
HXLINE(  89)			_hx_tmp22 = false;
            		}
HXDLIN(  89)		if (!(_hx_tmp22)) {
HXLINE(  89)			Bool _hx_tmp23;
HXDLIN(  89)			Bool _hx_tmp24;
HXDLIN(  89)			Bool _hx_tmp25;
HXDLIN(  89)			Bool _hx_tmp26;
HXDLIN(  89)			Bool _hx_tmp27;
HXDLIN(  89)			Bool _hx_tmp28;
HXDLIN(  89)			if (hx::IsNotNull( m32a )) {
HXLINE(  89)				_hx_tmp28 = hx::IsNotNull( m32c );
            			}
            			else {
HXLINE(  89)				_hx_tmp28 = false;
            			}
HXDLIN(  89)			if (_hx_tmp28) {
HXLINE(  89)				_hx_tmp27 = (m32a->a == m32c->a);
            			}
            			else {
HXLINE(  89)				_hx_tmp27 = false;
            			}
HXDLIN(  89)			if (_hx_tmp27) {
HXLINE(  89)				_hx_tmp26 = (m32a->b == m32c->b);
            			}
            			else {
HXLINE(  89)				_hx_tmp26 = false;
            			}
HXDLIN(  89)			if (_hx_tmp26) {
HXLINE(  89)				_hx_tmp25 = (m32a->c == m32c->c);
            			}
            			else {
HXLINE(  89)				_hx_tmp25 = false;
            			}
HXDLIN(  89)			if (_hx_tmp25) {
HXLINE(  89)				_hx_tmp24 = (m32a->d == m32c->d);
            			}
            			else {
HXLINE(  89)				_hx_tmp24 = false;
            			}
HXDLIN(  89)			if (_hx_tmp24) {
HXLINE(  89)				_hx_tmp23 = (m32a->tx == m32c->tx);
            			}
            			else {
HXLINE(  89)				_hx_tmp23 = false;
            			}
HXDLIN(  89)			if (_hx_tmp23) {
HXLINE(  89)				_hx_tmp21 = (m32a->ty == m32c->ty);
            			}
            			else {
HXLINE(  89)				_hx_tmp21 = false;
            			}
            		}
            		else {
HXLINE(  89)			_hx_tmp21 = true;
            		}
HXDLIN(  89)		this->assertTrue(_hx_tmp21,hx::SourceInfo(HX_("TestConverters.hx",79,d1,29,52),89,HX_("test.TestConverters",01,d7,f1,94),HX_("testShapeSimilarConversion",b2,92,ba,e7)));
HXLINE(  91)		HX_VARI(  ::hxmath::math::Matrix3x3Default,m33a) = this->randomMatrix3x3(null());
HXLINE(  92)		HX_VAR( Float,m33b_m22);
HXDLIN(  92)		HX_VAR( Float,m33b_m21);
HXDLIN(  92)		HX_VAR( Float,m33b_m20);
HXDLIN(  92)		HX_VAR( Float,m33b_m12);
HXDLIN(  92)		HX_VAR( Float,m33b_m11);
HXDLIN(  92)		HX_VAR( Float,m33b_m10);
HXDLIN(  92)		HX_VAR( Float,m33b_m02);
HXDLIN(  92)		HX_VAR( Float,m33b_m01);
HXDLIN(  92)		HX_VARI( Float,m33b_m00) = ((Float)0.0);
HXLINE(  47)		m33b_m01 = ((Float)0.0);
HXDLIN(  47)		m33b_m02 = ((Float)0.0);
HXDLIN(  47)		m33b_m10 = ((Float)0.0);
HXDLIN(  47)		m33b_m11 = ((Float)0.0);
HXDLIN(  47)		m33b_m12 = ((Float)0.0);
HXDLIN(  47)		m33b_m20 = ((Float)0.0);
HXDLIN(  47)		m33b_m21 = ((Float)0.0);
HXDLIN(  47)		m33b_m22 = ((Float)0.0);
HXLINE(  97)		HX_VARI(  ::hxmath::math::Matrix3x3Default,m33c) = this->randomMatrix3x3(null());
HXLINE(  98)		{
HXLINE(  47)			m33b_m00 = m33a->m00;
HXDLIN(  47)			m33b_m01 = m33a->m01;
HXDLIN(  47)			m33b_m02 = m33a->m02;
HXDLIN(  47)			m33b_m10 = m33a->m10;
HXDLIN(  47)			m33b_m11 = m33a->m11;
HXDLIN(  47)			m33b_m12 = m33a->m12;
HXDLIN(  47)			m33b_m20 = m33a->m20;
HXDLIN(  47)			m33b_m21 = m33a->m21;
HXDLIN(  47)			m33b_m22 = m33a->m22;
            		}
HXLINE(  99)		{
HXLINE(  99)			m33c->m00 = m33b_m00;
HXDLIN(  99)			m33c->m01 = m33b_m01;
HXDLIN(  99)			m33c->m02 = m33b_m02;
HXDLIN(  99)			m33c->m10 = m33b_m10;
HXDLIN(  99)			m33c->m11 = m33b_m11;
HXDLIN(  99)			m33c->m12 = m33b_m12;
HXDLIN(  99)			m33c->m20 = m33b_m20;
HXDLIN(  99)			m33c->m21 = m33b_m21;
HXDLIN(  99)			m33c->m22 = m33b_m22;
            		}
HXLINE( 100)		Bool _hx_tmp29;
HXDLIN( 100)		Bool _hx_tmp30;
HXDLIN( 100)		if (hx::IsNull( m33a )) {
HXLINE( 100)			_hx_tmp30 = hx::IsNull( m33c );
            		}
            		else {
HXLINE( 100)			_hx_tmp30 = false;
            		}
HXDLIN( 100)		if (!(_hx_tmp30)) {
HXLINE( 100)			Bool _hx_tmp31;
HXDLIN( 100)			Bool _hx_tmp32;
HXDLIN( 100)			Bool _hx_tmp33;
HXDLIN( 100)			Bool _hx_tmp34;
HXDLIN( 100)			Bool _hx_tmp35;
HXDLIN( 100)			Bool _hx_tmp36;
HXDLIN( 100)			Bool _hx_tmp37;
HXDLIN( 100)			Bool _hx_tmp38;
HXDLIN( 100)			Bool _hx_tmp39;
HXDLIN( 100)			if (hx::IsNotNull( m33a )) {
HXLINE( 100)				_hx_tmp39 = hx::IsNotNull( m33c );
            			}
            			else {
HXLINE( 100)				_hx_tmp39 = false;
            			}
HXDLIN( 100)			if (_hx_tmp39) {
HXLINE( 100)				_hx_tmp38 = (m33a->m00 == m33c->m00);
            			}
            			else {
HXLINE( 100)				_hx_tmp38 = false;
            			}
HXDLIN( 100)			if (_hx_tmp38) {
HXLINE( 100)				_hx_tmp37 = (m33a->m10 == m33c->m10);
            			}
            			else {
HXLINE( 100)				_hx_tmp37 = false;
            			}
HXDLIN( 100)			if (_hx_tmp37) {
HXLINE( 100)				_hx_tmp36 = (m33a->m20 == m33c->m20);
            			}
            			else {
HXLINE( 100)				_hx_tmp36 = false;
            			}
HXDLIN( 100)			if (_hx_tmp36) {
HXLINE( 100)				_hx_tmp35 = (m33a->m01 == m33c->m01);
            			}
            			else {
HXLINE( 100)				_hx_tmp35 = false;
            			}
HXDLIN( 100)			if (_hx_tmp35) {
HXLINE( 100)				_hx_tmp34 = (m33a->m11 == m33c->m11);
            			}
            			else {
HXLINE( 100)				_hx_tmp34 = false;
            			}
HXDLIN( 100)			if (_hx_tmp34) {
HXLINE( 100)				_hx_tmp33 = (m33a->m21 == m33c->m21);
            			}
            			else {
HXLINE( 100)				_hx_tmp33 = false;
            			}
HXDLIN( 100)			if (_hx_tmp33) {
HXLINE( 100)				_hx_tmp32 = (m33a->m02 == m33c->m02);
            			}
            			else {
HXLINE( 100)				_hx_tmp32 = false;
            			}
HXDLIN( 100)			if (_hx_tmp32) {
HXLINE( 100)				_hx_tmp31 = (m33a->m12 == m33c->m12);
            			}
            			else {
HXLINE( 100)				_hx_tmp31 = false;
            			}
HXDLIN( 100)			if (_hx_tmp31) {
HXLINE( 100)				_hx_tmp29 = (m33a->m22 == m33c->m22);
            			}
            			else {
HXLINE( 100)				_hx_tmp29 = false;
            			}
            		}
            		else {
HXLINE( 100)			_hx_tmp29 = true;
            		}
HXDLIN( 100)		this->assertTrue(_hx_tmp29,hx::SourceInfo(HX_("TestConverters.hx",79,d1,29,52),100,HX_("test.TestConverters",01,d7,f1,94),HX_("testShapeSimilarConversion",b2,92,ba,e7)));
HXLINE( 102)		HX_VARI(  ::hxmath::math::Matrix4x4Default,m44a) = this->randomMatrix4x4(null());
HXLINE( 103)		HX_VAR( Float,m44b_m33);
HXDLIN( 103)		HX_VAR( Float,m44b_m32);
HXDLIN( 103)		HX_VAR( Float,m44b_m31);
HXDLIN( 103)		HX_VAR( Float,m44b_m30);
HXDLIN( 103)		HX_VAR( Float,m44b_m23);
HXDLIN( 103)		HX_VAR( Float,m44b_m22);
HXDLIN( 103)		HX_VAR( Float,m44b_m21);
HXDLIN( 103)		HX_VAR( Float,m44b_m20);
HXDLIN( 103)		HX_VAR( Float,m44b_m13);
HXDLIN( 103)		HX_VAR( Float,m44b_m12);
HXDLIN( 103)		HX_VAR( Float,m44b_m11);
HXDLIN( 103)		HX_VAR( Float,m44b_m10);
HXDLIN( 103)		HX_VAR( Float,m44b_m03);
HXDLIN( 103)		HX_VAR( Float,m44b_m02);
HXDLIN( 103)		HX_VAR( Float,m44b_m01);
HXDLIN( 103)		HX_VARI( Float,m44b_m00) = ((Float)0.0);
HXLINE(  47)		m44b_m01 = ((Float)0.0);
HXDLIN(  47)		m44b_m02 = ((Float)0.0);
HXDLIN(  47)		m44b_m03 = ((Float)0.0);
HXDLIN(  47)		m44b_m10 = ((Float)0.0);
HXDLIN(  47)		m44b_m11 = ((Float)0.0);
HXDLIN(  47)		m44b_m12 = ((Float)0.0);
HXDLIN(  47)		m44b_m13 = ((Float)0.0);
HXDLIN(  47)		m44b_m20 = ((Float)0.0);
HXDLIN(  47)		m44b_m21 = ((Float)0.0);
HXDLIN(  47)		m44b_m22 = ((Float)0.0);
HXDLIN(  47)		m44b_m23 = ((Float)0.0);
HXDLIN(  47)		m44b_m30 = ((Float)0.0);
HXDLIN(  47)		m44b_m31 = ((Float)0.0);
HXDLIN(  47)		m44b_m32 = ((Float)0.0);
HXDLIN(  47)		m44b_m33 = ((Float)0.0);
HXLINE( 109)		HX_VARI(  ::hxmath::math::Matrix4x4Default,m44c) = this->randomMatrix4x4(null());
HXLINE( 110)		{
HXLINE(  47)			m44b_m00 = m44a->m00;
HXDLIN(  47)			m44b_m01 = m44a->m01;
HXDLIN(  47)			m44b_m02 = m44a->m02;
HXDLIN(  47)			m44b_m03 = m44a->m03;
HXDLIN(  47)			m44b_m10 = m44a->m10;
HXDLIN(  47)			m44b_m11 = m44a->m11;
HXDLIN(  47)			m44b_m12 = m44a->m12;
HXDLIN(  47)			m44b_m13 = m44a->m13;
HXDLIN(  47)			m44b_m20 = m44a->m20;
HXDLIN(  47)			m44b_m21 = m44a->m21;
HXDLIN(  47)			m44b_m22 = m44a->m22;
HXDLIN(  47)			m44b_m23 = m44a->m23;
HXDLIN(  47)			m44b_m30 = m44a->m30;
HXDLIN(  47)			m44b_m31 = m44a->m31;
HXDLIN(  47)			m44b_m32 = m44a->m32;
HXDLIN(  47)			m44b_m33 = m44a->m33;
            		}
HXLINE( 111)		{
HXLINE( 111)			m44c->m00 = m44b_m00;
HXDLIN( 111)			m44c->m01 = m44b_m01;
HXDLIN( 111)			m44c->m02 = m44b_m02;
HXDLIN( 111)			m44c->m03 = m44b_m03;
HXDLIN( 111)			m44c->m10 = m44b_m10;
HXDLIN( 111)			m44c->m11 = m44b_m11;
HXDLIN( 111)			m44c->m12 = m44b_m12;
HXDLIN( 111)			m44c->m13 = m44b_m13;
HXDLIN( 111)			m44c->m20 = m44b_m20;
HXDLIN( 111)			m44c->m21 = m44b_m21;
HXDLIN( 111)			m44c->m22 = m44b_m22;
HXDLIN( 111)			m44c->m23 = m44b_m23;
HXDLIN( 111)			m44c->m30 = m44b_m30;
HXDLIN( 111)			m44c->m31 = m44b_m31;
HXDLIN( 111)			m44c->m32 = m44b_m32;
HXDLIN( 111)			m44c->m33 = m44b_m33;
            		}
HXLINE( 112)		Bool _hx_tmp40;
HXDLIN( 112)		Bool _hx_tmp41;
HXDLIN( 112)		if (hx::IsNull( m44a )) {
HXLINE( 112)			_hx_tmp41 = hx::IsNull( m44c );
            		}
            		else {
HXLINE( 112)			_hx_tmp41 = false;
            		}
HXDLIN( 112)		if (!(_hx_tmp41)) {
HXLINE( 112)			Bool _hx_tmp42;
HXDLIN( 112)			Bool _hx_tmp43;
HXDLIN( 112)			Bool _hx_tmp44;
HXDLIN( 112)			Bool _hx_tmp45;
HXDLIN( 112)			Bool _hx_tmp46;
HXDLIN( 112)			Bool _hx_tmp47;
HXDLIN( 112)			Bool _hx_tmp48;
HXDLIN( 112)			Bool _hx_tmp49;
HXDLIN( 112)			Bool _hx_tmp50;
HXDLIN( 112)			Bool _hx_tmp51;
HXDLIN( 112)			Bool _hx_tmp52;
HXDLIN( 112)			Bool _hx_tmp53;
HXDLIN( 112)			Bool _hx_tmp54;
HXDLIN( 112)			Bool _hx_tmp55;
HXDLIN( 112)			Bool _hx_tmp56;
HXDLIN( 112)			Bool _hx_tmp57;
HXDLIN( 112)			if (hx::IsNotNull( m44a )) {
HXLINE( 112)				_hx_tmp57 = hx::IsNotNull( m44c );
            			}
            			else {
HXLINE( 112)				_hx_tmp57 = false;
            			}
HXDLIN( 112)			if (_hx_tmp57) {
HXLINE( 112)				_hx_tmp56 = (m44a->m00 == m44c->m00);
            			}
            			else {
HXLINE( 112)				_hx_tmp56 = false;
            			}
HXDLIN( 112)			if (_hx_tmp56) {
HXLINE( 112)				_hx_tmp55 = (m44a->m10 == m44c->m10);
            			}
            			else {
HXLINE( 112)				_hx_tmp55 = false;
            			}
HXDLIN( 112)			if (_hx_tmp55) {
HXLINE( 112)				_hx_tmp54 = (m44a->m20 == m44c->m20);
            			}
            			else {
HXLINE( 112)				_hx_tmp54 = false;
            			}
HXDLIN( 112)			if (_hx_tmp54) {
HXLINE( 112)				_hx_tmp53 = (m44a->m30 == m44c->m30);
            			}
            			else {
HXLINE( 112)				_hx_tmp53 = false;
            			}
HXDLIN( 112)			if (_hx_tmp53) {
HXLINE( 112)				_hx_tmp52 = (m44a->m01 == m44c->m01);
            			}
            			else {
HXLINE( 112)				_hx_tmp52 = false;
            			}
HXDLIN( 112)			if (_hx_tmp52) {
HXLINE( 112)				_hx_tmp51 = (m44a->m11 == m44c->m11);
            			}
            			else {
HXLINE( 112)				_hx_tmp51 = false;
            			}
HXDLIN( 112)			if (_hx_tmp51) {
HXLINE( 112)				_hx_tmp50 = (m44a->m21 == m44c->m21);
            			}
            			else {
HXLINE( 112)				_hx_tmp50 = false;
            			}
HXDLIN( 112)			if (_hx_tmp50) {
HXLINE( 112)				_hx_tmp49 = (m44a->m31 == m44c->m31);
            			}
            			else {
HXLINE( 112)				_hx_tmp49 = false;
            			}
HXDLIN( 112)			if (_hx_tmp49) {
HXLINE( 112)				_hx_tmp48 = (m44a->m02 == m44c->m02);
            			}
            			else {
HXLINE( 112)				_hx_tmp48 = false;
            			}
HXDLIN( 112)			if (_hx_tmp48) {
HXLINE( 112)				_hx_tmp47 = (m44a->m12 == m44c->m12);
            			}
            			else {
HXLINE( 112)				_hx_tmp47 = false;
            			}
HXDLIN( 112)			if (_hx_tmp47) {
HXLINE( 112)				_hx_tmp46 = (m44a->m22 == m44c->m22);
            			}
            			else {
HXLINE( 112)				_hx_tmp46 = false;
            			}
HXDLIN( 112)			if (_hx_tmp46) {
HXLINE( 112)				_hx_tmp45 = (m44a->m32 == m44c->m32);
            			}
            			else {
HXLINE( 112)				_hx_tmp45 = false;
            			}
HXDLIN( 112)			if (_hx_tmp45) {
HXLINE( 112)				_hx_tmp44 = (m44a->m03 == m44c->m03);
            			}
            			else {
HXLINE( 112)				_hx_tmp44 = false;
            			}
HXDLIN( 112)			if (_hx_tmp44) {
HXLINE( 112)				_hx_tmp43 = (m44a->m13 == m44c->m13);
            			}
            			else {
HXLINE( 112)				_hx_tmp43 = false;
            			}
HXDLIN( 112)			if (_hx_tmp43) {
HXLINE( 112)				_hx_tmp42 = (m44a->m23 == m44c->m23);
            			}
            			else {
HXLINE( 112)				_hx_tmp42 = false;
            			}
HXDLIN( 112)			if (_hx_tmp42) {
HXLINE( 112)				_hx_tmp40 = (m44a->m33 == m44c->m33);
            			}
            			else {
HXLINE( 112)				_hx_tmp40 = false;
            			}
            		}
            		else {
HXLINE( 112)			_hx_tmp40 = true;
            		}
HXDLIN( 112)		this->assertTrue(_hx_tmp40,hx::SourceInfo(HX_("TestConverters.hx",79,d1,29,52),112,HX_("test.TestConverters",01,d7,f1,94),HX_("testShapeSimilarConversion",b2,92,ba,e7)));
HXLINE( 114)		HX_VARI(  ::hxmath::math::QuaternionDefault,qa) = this->randomQuaternion(null());
HXLINE( 115)		HX_VAR( Float,qb_z);
HXDLIN( 115)		HX_VAR( Float,qb_y);
HXDLIN( 115)		HX_VAR( Float,qb_x);
HXDLIN( 115)		HX_VARI( Float,qb_s) = ((Float)0.0);
HXLINE(  47)		qb_x = ((Float)0.0);
HXDLIN(  47)		qb_y = ((Float)0.0);
HXDLIN(  47)		qb_z = ((Float)0.0);
HXLINE( 116)		HX_VARI(  ::hxmath::math::QuaternionDefault,qc) = this->randomQuaternion(null());
HXLINE( 117)		{
HXLINE(  47)			qb_s = qa->s;
HXDLIN(  47)			qb_x = qa->x;
HXDLIN(  47)			qb_y = qa->y;
HXDLIN(  47)			qb_z = qa->z;
            		}
HXLINE( 118)		{
HXLINE( 118)			qc->s = qb_s;
HXDLIN( 118)			qc->x = qb_x;
HXDLIN( 118)			qc->y = qb_y;
HXDLIN( 118)			qc->z = qb_z;
            		}
HXLINE( 119)		Bool _hx_tmp58;
HXDLIN( 119)		Bool _hx_tmp59;
HXDLIN( 119)		if (hx::IsNull( qa )) {
HXLINE( 119)			_hx_tmp59 = hx::IsNull( qc );
            		}
            		else {
HXLINE( 119)			_hx_tmp59 = false;
            		}
HXDLIN( 119)		if (!(_hx_tmp59)) {
HXLINE( 119)			Bool _hx_tmp60;
HXDLIN( 119)			Bool _hx_tmp61;
HXDLIN( 119)			Bool _hx_tmp62;
HXDLIN( 119)			Bool _hx_tmp63;
HXDLIN( 119)			if (hx::IsNotNull( qa )) {
HXLINE( 119)				_hx_tmp63 = hx::IsNotNull( qc );
            			}
            			else {
HXLINE( 119)				_hx_tmp63 = false;
            			}
HXDLIN( 119)			if (_hx_tmp63) {
HXLINE( 119)				_hx_tmp62 = (qa->s == qc->s);
            			}
            			else {
HXLINE( 119)				_hx_tmp62 = false;
            			}
HXDLIN( 119)			if (_hx_tmp62) {
HXLINE( 119)				_hx_tmp61 = (qa->x == qc->x);
            			}
            			else {
HXLINE( 119)				_hx_tmp61 = false;
            			}
HXDLIN( 119)			if (_hx_tmp61) {
HXLINE( 119)				_hx_tmp60 = (qa->y == qc->y);
            			}
            			else {
HXLINE( 119)				_hx_tmp60 = false;
            			}
HXDLIN( 119)			if (_hx_tmp60) {
HXLINE( 119)				_hx_tmp58 = (qa->z == qc->z);
            			}
            			else {
HXLINE( 119)				_hx_tmp58 = false;
            			}
            		}
            		else {
HXLINE( 119)			_hx_tmp58 = true;
            		}
HXDLIN( 119)		this->assertTrue(_hx_tmp58,hx::SourceInfo(HX_("TestConverters.hx",79,d1,29,52),119,HX_("test.TestConverters",01,d7,f1,94),HX_("testShapeSimilarConversion",b2,92,ba,e7)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestConverters_obj,testShapeSimilarConversion,(void))

void TestConverters_obj::testFlxPointConversion(){
            	HX_STACK_FRAME("test.TestConverters","testFlxPointConversion",0x4c5487f3,"test.TestConverters.testFlxPointConversion","test/TestConverters.hx",123,0x87bef13c)
            	HX_STACK_THIS(this)
HXLINE( 124)		HX_VARI(  ::hxmath::math::Vector2Default,v) =  ::hxmath::math::Vector2Default_obj::__new(((Float)3.0),((Float)1.0));
HXLINE( 126)		HX_VARI(  ::test::FlxPointMock,q) =  ::test::FlxPointMock_obj::__new(null(),null());
HXLINE( 127)		{
HXLINE( 127)			 ::Dynamic(q->__Field(HX_("set_x",5b,9b,2f,7a),hx::paccDynamic))(v->x);
HXDLIN( 127)			 ::Dynamic(q->__Field(HX_("set_y",5c,9b,2f,7a),hx::paccDynamic))(v->y);
            		}
HXLINE( 128)		this->assertEquals(v->x,q->x,hx::SourceInfo(HX_("TestConverters.hx",79,d1,29,52),128,HX_("test.TestConverters",01,d7,f1,94),HX_("testFlxPointConversion",26,8c,8e,8d)));
HXLINE( 129)		this->assertEquals(v->y,q->y,hx::SourceInfo(HX_("TestConverters.hx",79,d1,29,52),129,HX_("test.TestConverters",01,d7,f1,94),HX_("testFlxPointConversion",26,8c,8e,8d)));
HXLINE( 131)		HX_VARI(  ::hxmath::math::Vector2Default,u) =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)0.0));
HXLINE( 132)		{
HXLINE( 132)			u->x = ( (Float)(q->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 132)			u->y = ( (Float)(q->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
            		}
HXLINE( 133)		this->assertEquals(u->x,q->x,hx::SourceInfo(HX_("TestConverters.hx",79,d1,29,52),133,HX_("test.TestConverters",01,d7,f1,94),HX_("testFlxPointConversion",26,8c,8e,8d)));
HXLINE( 134)		this->assertEquals(u->y,q->y,hx::SourceInfo(HX_("TestConverters.hx",79,d1,29,52),134,HX_("test.TestConverters",01,d7,f1,94),HX_("testFlxPointConversion",26,8c,8e,8d)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestConverters_obj,testFlxPointConversion,(void))


TestConverters_obj::TestConverters_obj()
{
}

hx::Val TestConverters_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 22:
		if (HX_FIELD_EQ(inName,"testFlxPointConversion") ) { return hx::Val( testFlxPointConversion_dyn()); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"testShapeSimilarConversion") ) { return hx::Val( testShapeSimilarConversion_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestConverters_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestConverters_obj_sStaticStorageInfo = 0;
#endif

static ::String TestConverters_obj_sMemberFields[] = {
	HX_HCSTRING("testShapeSimilarConversion","\xb2","\x92","\xba","\xe7"),
	HX_HCSTRING("testFlxPointConversion","\x26","\x8c","\x8e","\x8d"),
	::String(null()) };

static void TestConverters_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestConverters_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestConverters_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestConverters_obj::__mClass,"__mClass");
};

#endif

hx::Class TestConverters_obj::__mClass;

void TestConverters_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("test.TestConverters","\x01","\xd7","\xf1","\x94");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestConverters_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestConverters_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestConverters_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestConverters_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestConverters_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestConverters_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace test
