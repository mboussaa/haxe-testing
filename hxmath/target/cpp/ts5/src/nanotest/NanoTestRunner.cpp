// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_haxe_unit_TestRunner
#include <haxe/unit/TestRunner.h>
#endif
#ifndef INCLUDED_nanotest_NanoTestCase
#include <nanotest/NanoTestCase.h>
#endif
#ifndef INCLUDED_nanotest_NanoTestRunner
#include <nanotest/NanoTestRunner.h>
#endif
#ifndef INCLUDED_nanotest_NanoTestStatus
#include <nanotest/NanoTestStatus.h>
#endif

namespace nanotest{

void NanoTestRunner_obj::__construct( ::Dynamic printError){
            	HX_STACK_FRAME("nanotest.NanoTestRunner","new",0x4689b230,"nanotest.NanoTestRunner.new","nanotest/NanoTestRunner.hx",115,0xf84d921f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(printError,"printError")
HXLINE( 116)		this->cases = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 118)		if (hx::IsNull( printError )) {
HXLINE( 119)			this->printError = ::nanotest::NanoTestRunner_obj::warning_dyn();
            		}
            		else {
HXLINE( 121)			this->printError = printError;
            		}
            	}

Dynamic NanoTestRunner_obj::__CreateEmpty() { return new NanoTestRunner_obj; }

hx::ObjectPtr< NanoTestRunner_obj > NanoTestRunner_obj::__new( ::Dynamic printError)
{
	hx::ObjectPtr< NanoTestRunner_obj > _hx_result = new NanoTestRunner_obj();
	_hx_result->__construct(printError);
	return _hx_result;
}

Dynamic NanoTestRunner_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NanoTestRunner_obj > _hx_result = new NanoTestRunner_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

HX_BEGIN_DEFAULT_FUNC(__default_print,NanoTestRunner_obj)
void _hx_run( ::Dynamic d){
            	HX_STACK_FRAME("nanotest.NanoTestRunner","__default_print",0x2e72919f,"nanotest.NanoTestRunner.__default_print","nanotest/NanoTestRunner.hx",111,0xf84d921f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(d,"d")
HXLINE( 111)		::haxe::unit::TestRunner_obj::print(d);
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

void NanoTestRunner_obj::add( ::nanotest::NanoTestCase testCase){
            	HX_STACK_FRAME("nanotest.NanoTestRunner","add",0x467fd3f1,"nanotest.NanoTestRunner.add","nanotest/NanoTestRunner.hx",126,0xf84d921f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(testCase,"testCase")
HXLINE( 126)		this->cases->push(testCase);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NanoTestRunner_obj,add,(void))

Bool NanoTestRunner_obj::run(){
            	HX_STACK_FRAME("nanotest.NanoTestRunner","run",0x468cc91b,"nanotest.NanoTestRunner.run","nanotest/NanoTestRunner.hx",129,0xf84d921f)
            	HX_STACK_THIS(this)
HXLINE( 135)		HX_VARI( ::Array< ::Dynamic>,results) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 136)		{
HXLINE( 136)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 136)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->cases;
HXDLIN( 136)			while((_g < _g1->length)){
HXLINE( 136)				HX_VARI(  ::nanotest::NanoTestCase,c) = _g1->__get(_g).StaticCast<  ::nanotest::NanoTestCase >();
HXDLIN( 136)				++_g;
HXLINE( 137)				HX_VARI( ::Array< ::Dynamic>,rs) = c->run(this->print);
HXLINE( 138)				{
HXLINE( 138)					HX_VARI( Int,_g2) = (int)0;
HXDLIN( 138)					while((_g2 < rs->length)){
HXLINE( 138)						HX_VARI(  ::Dynamic,r) = rs->__get(_g2);
HXDLIN( 138)						++_g2;
HXLINE( 139)						results->push(r);
            					}
            				}
            			}
            		}
HXLINE( 143)		HX_VARI( Int,failures) = (int)0;
HXLINE( 144)		{
HXLINE( 144)			HX_VARI_NAME( Int,_g3,"_g") = (int)0;
HXDLIN( 144)			while((_g3 < results->length)){
HXLINE( 144)				HX_VARI(  ::Dynamic,result) = results->__get(_g3);
HXDLIN( 144)				++_g3;
HXLINE( 145)				Bool _hx_tmp = ( (Bool)(result->__Field(HX_("failed",bd,c5,fe,e7),hx::paccDynamic)) );
HXDLIN( 145)				if (_hx_tmp) {
HXLINE( 146)					this->print(((((HX_("* ",b6,24,00,00) + ( (::String)(result->__Field(HX_("className",a3,92,3d,dc),hx::paccDynamic)) )) + HX_("::",c0,32,00,00)) + ( (::String)(result->__Field(HX_("method",e1,f6,5a,09),hx::paccDynamic)) )) + HX_("()\n",e9,7d,1e,00)));
HXLINE( 148)					{
HXLINE( 148)						HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 148)						HX_VARI_NAME( ::Array< ::Dynamic>,_g21,"_g2") = ( (::Array< ::Dynamic>)(result->__Field(HX_("status",32,e7,fb,05),hx::paccDynamic)) );
HXDLIN( 148)						while((_g11 < _g21->length)){
HXLINE( 148)							HX_VARI( ::hx::EnumBase,status) = _g21->__get(_g11).StaticCast< ::hx::EnumBase >();
HXDLIN( 148)							++_g11;
HXLINE( 149)							Int _hx_tmp1 = ( ( ::hx::EnumBase)(status) )->_hx_getIndex();
HXDLIN( 149)							switch((int)(_hx_tmp1)){
            								case (int)0: {
            								}
            								break;
            								case (int)1: {
HXLINE( 152)									this->printError((HX_("Test failed : ",fb,db,b6,bb) + status->_hx_getString(0)),status->_hx_getObject(1));
            								}
            								break;
            								case (int)2: {
HXLINE( 149)									HX_VARI( ::Array< ::Dynamic>,callStack) = status->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 149)									HX_VARI( ::String,message) = status->_hx_getString(0);
HXLINE( 153)									{
HXLINE( 154)										HX_VARI( Bool,first) = true;
HXLINE( 155)										{
HXLINE( 155)											HX_VARI_NAME( Int,_g31,"_g3") = (int)0;
HXDLIN( 155)											while((_g31 < callStack->length)){
HXLINE( 155)												HX_VARI( ::hx::EnumBase,item) = callStack->__get(_g31).StaticCast< ::hx::EnumBase >();
HXDLIN( 155)												++_g31;
HXLINE( 157)												Int _hx_tmp2 = ( ( ::hx::EnumBase)(item) )->_hx_getIndex();
HXDLIN( 157)												switch((int)(_hx_tmp2)){
            													case (int)0: {
HXLINE( 159)														this->print((HX_("Called from",cd,13,cb,c9) + HX_(" : a C function\n",10,1b,17,1a)));
            													}
            													break;
            													case (int)1: {
HXLINE( 161)														this->print((((HX_("Called from",cd,13,cb,c9) + HX_(" : module ",ee,eb,49,f2)) + item->_hx_getString(0)) + HX_("\n",0a,00,00,00)));
            													}
            													break;
            													case (int)2: {
HXLINE( 163)														HX_VARI(  ::Dynamic,posInfos) =  ::Dynamic(hx::Anon_obj::Create(4)
            															->setFixed(0,HX_("className",a3,92,3d,dc), ::Dynamic(result->__Field(HX_("className",a3,92,3d,dc),hx::paccDynamic)))
            															->setFixed(1,HX_("methodName",cc,19,0f,12), ::Dynamic(result->__Field(HX_("method",e1,f6,5a,09),hx::paccDynamic)))
            															->setFixed(2,HX_("fileName",e7,5a,43,62),item->_hx_getString(1))
            															->setFixed(3,HX_("lineNumber",dd,81,22,76),item->_hx_getInt(2)));
HXLINE( 169)														if (first) {
HXLINE( 170)															this->printError((HX_("exception thrown : ",2d,00,4b,48) + message),posInfos);
HXLINE( 171)															first = false;
            														}
            														else {
HXLINE( 173)															this->printError(HX_("Called from",cd,13,cb,c9),posInfos);
            														}
            													}
            													break;
            													case (int)3: {
HXLINE( 176)														this->print((((((HX_("Called from",cd,13,cb,c9) + HX_(" : ",c6,7a,18,00)) + item->_hx_getString(0)) + HX_(".",2e,00,00,00)) + item->_hx_getString(1)) + HX_("\n",0a,00,00,00)));
            													}
            													break;
            													case (int)4: {
HXLINE( 182)														this->print((((HX_("Called from",cd,13,cb,c9) + HX_(" : local function #",76,b4,58,2a)) + item->_hx_getObject(0)) + HX_("\n",0a,00,00,00)));
            													}
            													break;
            												}
            											}
            										}
HXLINE( 186)										if (first) {
HXLINE( 187)											this->printError((HX_("exception thrown : ",2d,00,4b,48) + message),( ( ::nanotest::NanoTestCase)(result->__Field(HX_("testCase",22,a4,ec,44),hx::paccDynamic)) )->posInfos);
            										}
            									}
            								}
            								break;
            							}
            						}
            					}
HXLINE( 195)					this->print(HX_("\n",0a,00,00,00));
HXLINE( 196)					++failures;
            				}
            			}
            		}
HXLINE( 200)		if ((failures == (int)0)) {
HXLINE( 201)			this->print(HX_("OK ",84,33,3c,00));
            		}
            		else {
HXLINE( 203)			this->print(HX_("FAILED ",c3,13,c2,96));
            		}
HXLINE( 205)		::String _hx_tmp3 = ((((results->length + HX_(" tests, ",75,64,2c,e4)) + failures) + HX_(" failed, ",91,b5,b6,57)) + (results->length - failures));
HXDLIN( 205)		this->print((_hx_tmp3 + HX_(" success\n",07,05,40,ea)));
HXLINE( 212)		return (failures == (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(NanoTestRunner_obj,run,return )

void NanoTestRunner_obj::error(::String message, ::Dynamic position){
            	HX_STACK_FRAME("nanotest.NanoTestRunner","error",0x1bf7c198,"nanotest.NanoTestRunner.error","nanotest/NanoTestRunner.hx",215,0xf84d921f)
            	HX_STACK_ARG(message,"message")
            	HX_STACK_ARG(position,"position")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NanoTestRunner_obj,error,(void))

void NanoTestRunner_obj::warning(::String message, ::Dynamic position){
            	HX_STACK_FRAME("nanotest.NanoTestRunner","warning",0xfa5ee42c,"nanotest.NanoTestRunner.warning","nanotest/NanoTestRunner.hx",230,0xf84d921f)
            	HX_STACK_ARG(message,"message")
            	HX_STACK_ARG(position,"position")
HXLINE( 230)		::String _hx_tmp = ::nanotest::NanoTestRunner_obj::fileFromPosInfos(position);
HXDLIN( 230)		::String _hx_tmp1 = ((((_hx_tmp + HX_(":",3a,00,00,00)) + ( (Int)(position->__Field(HX_("lineNumber",dd,81,22,76),hx::paccDynamic)) )) + HX_(": ",a6,32,00,00)) + message);
HXDLIN( 230)		::haxe::unit::TestRunner_obj::print((_hx_tmp1 + HX_("\n",0a,00,00,00)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NanoTestRunner_obj,warning,(void))

::String NanoTestRunner_obj::fileFromPosInfos( ::Dynamic posInfos){
            	HX_STACK_FRAME("nanotest.NanoTestRunner","fileFromPosInfos",0xa0927e67,"nanotest.NanoTestRunner.fileFromPosInfos","nanotest/NanoTestRunner.hx",237,0xf84d921f)
            	HX_STACK_ARG(posInfos,"posInfos")
HXLINE( 238)		if (hx::IsNull( ( (::String)(posInfos->__Field(HX_("className",a3,92,3d,dc),hx::paccDynamic)) ) )) {
HXLINE( 238)			return ( (::String)(posInfos->__Field(HX_("fileName",e7,5a,43,62),hx::paccDynamic)) );
            		}
HXLINE( 239)		if (hx::IsNull( ( (::String)(posInfos->__Field(HX_("fileName",e7,5a,43,62),hx::paccDynamic)) ) )) {
HXLINE( 239)			return null();
            		}
HXLINE( 241)		HX_VARI( ::Array< ::String >,fsegs) =  ::EReg_obj::__new(HX_("\\\\|/",b3,dc,15,3d),HX_("",00,00,00,00))->split( ::Dynamic(posInfos->__Field(HX_("fileName",e7,5a,43,62),hx::paccDynamic)));
HXLINE( 242)		if ((fsegs->length > (int)1)) {
HXLINE( 242)			return ( (::String)(posInfos->__Field(HX_("fileName",e7,5a,43,62),hx::paccDynamic)) );
            		}
HXLINE( 244)		HX_VARI( ::String,f) = ( (::String)(fsegs->pop()) );
HXLINE( 246)		Int _hx_tmp = (f.length - (int)3);
HXDLIN( 246)		::String _hx_tmp1 = f.substr(_hx_tmp,null());
HXDLIN( 246)		if ((_hx_tmp1 != HX_(".hx",be,42,23,00))) {
HXLINE( 246)			return ( (::String)(posInfos->__Field(HX_("fileName",e7,5a,43,62),hx::paccDynamic)) );
            		}
HXLINE( 248)		HX_VARI( ::Array< ::String >,segs) = ( (::String)(posInfos->__Field(HX_("className",a3,92,3d,dc),hx::paccDynamic)) ).split(HX_(".",2e,00,00,00));
HXLINE( 249)		segs->pop();
HXLINE( 250)		segs->push(f);
HXLINE( 251)		return segs->join(HX_("/",2f,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NanoTestRunner_obj,fileFromPosInfos,return )

 ::Dynamic NanoTestRunner_obj::posInfosToPosition( ::Dynamic posInfos){
            	HX_STACK_FRAME("nanotest.NanoTestRunner","posInfosToPosition",0xfd6302e5,"nanotest.NanoTestRunner.posInfosToPosition","nanotest/NanoTestRunner.hx",280,0xf84d921f)
            	HX_STACK_ARG(posInfos,"posInfos")
HXLINE( 280)		return  ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("max",a4,0a,53,00),(int)0)
            			->setFixed(1,HX_("min",92,11,53,00),(int)0)
            			->setFixed(2,HX_("file",7c,ce,bb,43), ::Dynamic(posInfos->__Field(HX_("fileName",e7,5a,43,62),hx::paccDynamic))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NanoTestRunner_obj,posInfosToPosition,return )


NanoTestRunner_obj::NanoTestRunner_obj()
{
	print = new __default_print(this);
}

void NanoTestRunner_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NanoTestRunner);
	HX_MARK_MEMBER_NAME(cases,"cases");
	HX_MARK_MEMBER_NAME(printError,"printError");
	HX_MARK_MEMBER_NAME(print,"print");
	HX_MARK_END_CLASS();
}

void NanoTestRunner_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(cases,"cases");
	HX_VISIT_MEMBER_NAME(printError,"printError");
	HX_VISIT_MEMBER_NAME(print,"print");
}

hx::Val NanoTestRunner_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"cases") ) { return hx::Val( cases); }
		if (HX_FIELD_EQ(inName,"print") ) { return hx::Val( print); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"printError") ) { return hx::Val( printError); }
	}
	return super::__Field(inName,inCallProp);
}

bool NanoTestRunner_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"error") ) { outValue = error_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"warning") ) { outValue = warning_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"fileFromPosInfos") ) { outValue = fileFromPosInfos_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"posInfosToPosition") ) { outValue = posInfosToPosition_dyn(); return true; }
	}
	return false;
}

hx::Val NanoTestRunner_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"cases") ) { cases=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"print") ) { print=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"printError") ) { printError=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NanoTestRunner_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("cases","\xc3","\xbb","\x20","\x41"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo NanoTestRunner_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(NanoTestRunner_obj,cases),HX_HCSTRING("cases","\xc3","\xbb","\x20","\x41")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(NanoTestRunner_obj,printError),HX_HCSTRING("printError","\x5b","\x20","\xbc","\xcb")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(NanoTestRunner_obj,print),HX_HCSTRING("print","\x2d","\x58","\x8b","\xc8")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *NanoTestRunner_obj_sStaticStorageInfo = 0;
#endif

static ::String NanoTestRunner_obj_sMemberFields[] = {
	HX_HCSTRING("cases","\xc3","\xbb","\x20","\x41"),
	HX_HCSTRING("printError","\x5b","\x20","\xbc","\xcb"),
	HX_HCSTRING("print","\x2d","\x58","\x8b","\xc8"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	::String(null()) };

static void NanoTestRunner_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NanoTestRunner_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NanoTestRunner_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NanoTestRunner_obj::__mClass,"__mClass");
};

#endif

hx::Class NanoTestRunner_obj::__mClass;

static ::String NanoTestRunner_obj_sStaticFields[] = {
	HX_HCSTRING("error","\xc8","\xcb","\x29","\x73"),
	HX_HCSTRING("warning","\x5c","\xda","\xcb","\x09"),
	HX_HCSTRING("fileFromPosInfos","\x37","\x42","\xcd","\xe0"),
	HX_HCSTRING("posInfosToPosition","\xb5","\x5a","\xb2","\xd4"),
	::String(null())
};

void NanoTestRunner_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nanotest.NanoTestRunner","\x3e","\x1a","\x61","\x45");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &NanoTestRunner_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = NanoTestRunner_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(NanoTestRunner_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NanoTestRunner_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NanoTestRunner_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NanoTestRunner_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NanoTestRunner_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NanoTestRunner_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nanotest
