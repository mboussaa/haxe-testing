// Generated by Haxe 3.3.0
#ifndef INCLUDED_hxmath_converters_flixel_Vector2Converter
#define INCLUDED_hxmath_converters_flixel_Vector2Converter

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(hxmath,converters,flixel,Vector2Converter)
HX_DECLARE_CLASS2(hxmath,math,Vector2Default)

namespace hxmath{
namespace converters{
namespace flixel{


class HXCPP_CLASS_ATTRIBUTES Vector2Converter_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Vector2Converter_obj OBJ_;
		Vector2Converter_obj();
		void __construct();

	public:
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="hxmath.converters.flixel.Vector2Converter")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		static hx::ObjectPtr< Vector2Converter_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Vector2Converter_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Vector2Converter","\x31","\x81","\xda","\x8a"); }

		static void copyToFlxPoint( ::hxmath::math::Vector2Default v, ::Dynamic p);
		static ::Dynamic copyToFlxPoint_dyn();

		static void copyFromFlxPoint( ::hxmath::math::Vector2Default v, ::Dynamic p);
		static ::Dynamic copyFromFlxPoint_dyn();

};

} // end namespace hxmath
} // end namespace converters
} // end namespace flixel

#endif /* INCLUDED_hxmath_converters_flixel_Vector2Converter */ 
