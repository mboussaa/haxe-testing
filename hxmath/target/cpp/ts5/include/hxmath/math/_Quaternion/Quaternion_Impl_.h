// Generated by Haxe 3.3.0
#ifndef INCLUDED_hxmath_math__Quaternion_Quaternion_Impl_
#define INCLUDED_hxmath_math__Quaternion_Quaternion_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(hxmath,math,Matrix3x3Default)
HX_DECLARE_CLASS2(hxmath,math,QuaternionDefault)
HX_DECLARE_CLASS2(hxmath,math,Vector3Default)
HX_DECLARE_CLASS3(hxmath,math,_Quaternion,Quaternion_Impl_)

namespace hxmath{
namespace math{
namespace _Quaternion{


class HXCPP_CLASS_ATTRIBUTES Quaternion_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Quaternion_Impl__obj OBJ_;
		Quaternion_Impl__obj();
		void __construct();

	public:
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="hxmath.math._Quaternion.Quaternion_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		static hx::ObjectPtr< Quaternion_Impl__obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Quaternion_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Quaternion_Impl_","\x5e","\xd0","\x59","\xec"); }

		static void __boot();
		static Int elementCount;
		static  ::hxmath::math::QuaternionDefault _new(Float s,Float x,Float y,Float z);
		static ::Dynamic _new_dyn();

		static  ::hxmath::math::QuaternionDefault fromArray(::Array< Float > rawData);
		static ::Dynamic fromArray_dyn();

		static  ::hxmath::math::QuaternionDefault fromAxisAngle(Float angleDegrees, ::hxmath::math::Vector3Default axis);
		static ::Dynamic fromAxisAngle_dyn();

		static  ::hxmath::math::QuaternionDefault multiplyScalar( ::hxmath::math::QuaternionDefault a,Float s);
		static ::Dynamic multiplyScalar_dyn();

		static  ::hxmath::math::QuaternionDefault multiply( ::hxmath::math::QuaternionDefault a, ::hxmath::math::QuaternionDefault b);
		static ::Dynamic multiply_dyn();

		static  ::hxmath::math::QuaternionDefault add( ::hxmath::math::QuaternionDefault a, ::hxmath::math::QuaternionDefault b);
		static ::Dynamic add_dyn();

		static  ::hxmath::math::QuaternionDefault subtract( ::hxmath::math::QuaternionDefault a, ::hxmath::math::QuaternionDefault b);
		static ::Dynamic subtract_dyn();

		static  ::hxmath::math::QuaternionDefault conjugate( ::hxmath::math::QuaternionDefault a);
		static ::Dynamic conjugate_dyn();

		static  ::hxmath::math::QuaternionDefault negate( ::hxmath::math::QuaternionDefault a);
		static ::Dynamic negate_dyn();

		static Bool equals( ::hxmath::math::QuaternionDefault a, ::hxmath::math::QuaternionDefault b);
		static ::Dynamic equals_dyn();

		static  ::hxmath::math::QuaternionDefault lerp( ::hxmath::math::QuaternionDefault a, ::hxmath::math::QuaternionDefault b,Float t);
		static ::Dynamic lerp_dyn();

		static  ::hxmath::math::QuaternionDefault slerp( ::hxmath::math::QuaternionDefault a, ::hxmath::math::QuaternionDefault b,Float t);
		static ::Dynamic slerp_dyn();

		static Float dot( ::hxmath::math::QuaternionDefault a, ::hxmath::math::QuaternionDefault b);
		static ::Dynamic dot_dyn();

		static  ::hxmath::math::QuaternionDefault set( ::hxmath::math::QuaternionDefault this1,Float s,Float x,Float y,Float z);
		static ::Dynamic set_dyn();

		static  ::hxmath::math::QuaternionDefault invert( ::hxmath::math::QuaternionDefault this1);
		static ::Dynamic invert_dyn();

		static  ::hxmath::math::QuaternionDefault multiplyWithScalar( ::hxmath::math::QuaternionDefault this1,Float s);
		static ::Dynamic multiplyWithScalar_dyn();

		static  ::hxmath::math::QuaternionDefault addWith( ::hxmath::math::QuaternionDefault this1, ::hxmath::math::QuaternionDefault a);
		static ::Dynamic addWith_dyn();

		static  ::hxmath::math::QuaternionDefault subtractWith( ::hxmath::math::QuaternionDefault this1, ::hxmath::math::QuaternionDefault a);
		static ::Dynamic subtractWith_dyn();

		static void copyTo( ::hxmath::math::QuaternionDefault this1, ::hxmath::math::QuaternionDefault target);
		static ::Dynamic copyTo_dyn();

		static void copyToShape( ::hxmath::math::QuaternionDefault this1, ::Dynamic target);
		static ::Dynamic copyToShape_dyn();

		static void copyFromShape( ::hxmath::math::QuaternionDefault this1, ::Dynamic source);
		static ::Dynamic copyFromShape_dyn();

		static  ::hxmath::math::QuaternionDefault clone( ::hxmath::math::QuaternionDefault this1);
		static ::Dynamic clone_dyn();

		static Float getArrayElement( ::hxmath::math::QuaternionDefault this1,Int i);
		static ::Dynamic getArrayElement_dyn();

		static Float setArrayElement( ::hxmath::math::QuaternionDefault this1,Int i,Float value);
		static ::Dynamic setArrayElement_dyn();

		static  ::hxmath::math::QuaternionDefault applyScalarFunc( ::hxmath::math::QuaternionDefault this1, ::Dynamic func);
		static ::Dynamic applyScalarFunc_dyn();

		static  ::hxmath::math::QuaternionDefault log( ::hxmath::math::QuaternionDefault this1);
		static ::Dynamic log_dyn();

		static  ::hxmath::math::QuaternionDefault exp( ::hxmath::math::QuaternionDefault this1);
		static ::Dynamic exp_dyn();

		static  ::hxmath::math::Vector3Default rotate( ::hxmath::math::QuaternionDefault this1, ::hxmath::math::Vector3Default u);
		static ::Dynamic rotate_dyn();

		static Float angleWith( ::hxmath::math::QuaternionDefault this1, ::hxmath::math::QuaternionDefault b);
		static ::Dynamic angleWith_dyn();

		static  ::hxmath::math::QuaternionDefault normalize( ::hxmath::math::QuaternionDefault this1);
		static ::Dynamic normalize_dyn();

		static  ::hxmath::math::QuaternionDefault applyConjugate( ::hxmath::math::QuaternionDefault this1);
		static ::Dynamic applyConjugate_dyn();

		static  ::hxmath::math::QuaternionDefault applyInvert( ::hxmath::math::QuaternionDefault this1);
		static ::Dynamic applyInvert_dyn();

		static  ::hxmath::math::QuaternionDefault get_zero();
		static ::Dynamic get_zero_dyn();

		static  ::hxmath::math::QuaternionDefault get_identity();
		static ::Dynamic get_identity_dyn();

		static Float get_length( ::hxmath::math::QuaternionDefault this1);
		static ::Dynamic get_length_dyn();

		static Float get_lengthSq( ::hxmath::math::QuaternionDefault this1);
		static ::Dynamic get_lengthSq_dyn();

		static  ::hxmath::math::Matrix3x3Default get_matrix( ::hxmath::math::QuaternionDefault this1);
		static ::Dynamic get_matrix_dyn();

		static  ::hxmath::math::QuaternionDefault get_normal( ::hxmath::math::QuaternionDefault this1);
		static ::Dynamic get_normal_dyn();

};

} // end namespace hxmath
} // end namespace math
} // end namespace _Quaternion

#endif /* INCLUDED_hxmath_math__Quaternion_Quaternion_Impl_ */ 
