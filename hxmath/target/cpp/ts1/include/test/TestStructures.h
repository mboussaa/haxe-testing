// Generated by Haxe 3.3.0
#ifndef INCLUDED_test_TestStructures
#define INCLUDED_test_TestStructures

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_test_MathTestCase
#include <test/MathTestCase.h>
#endif
HX_DECLARE_CLASS1(nanotest,NanoTestCase)
HX_DECLARE_CLASS1(test,MathTestCase)
HX_DECLARE_CLASS1(test,TestStructures)

namespace test{


class HXCPP_CLASS_ATTRIBUTES TestStructures_obj : public  ::test::MathTestCase_obj
{
	public:
		typedef  ::test::MathTestCase_obj super;
		typedef TestStructures_obj OBJ_;
		TestStructures_obj();

	public:
		void __construct( ::Dynamic posInfos);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="test.TestStructures")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"test.TestStructures"); }
		static hx::ObjectPtr< TestStructures_obj > __new( ::Dynamic posInfos);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestStructures_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("TestStructures","\xf2","\x13","\x63","\x68"); }

		void testEquals();
		::Dynamic testEquals_dyn();

		void testClone();
		::Dynamic testClone_dyn();

		void testAddSub();
		::Dynamic testAddSub_dyn();

		void testDeterminant();
		::Dynamic testDeterminant_dyn();

		void testArrayAccess();
		::Dynamic testArrayAccess_dyn();

		void testApplyScalarFunc();
		::Dynamic testApplyScalarFunc_dyn();

		void testIntApplyScalarFunc();
		::Dynamic testIntApplyScalarFunc_dyn();

		void testCopyToFrom();
		::Dynamic testCopyToFrom_dyn();

		void testRowColAccessors();
		::Dynamic testRowColAccessors_dyn();

		void testEqualsNullShouldNotThrow();
		::Dynamic testEqualsNullShouldNotThrow_dyn();

		void testHasToString();
		::Dynamic testHasToString_dyn();

		void testVectorMinMax();
		::Dynamic testVectorMinMax_dyn();

		void testVectorProj();
		::Dynamic testVectorProj_dyn();

		void testNormalizeTo();
		::Dynamic testNormalizeTo_dyn();

		void testClamp();
		::Dynamic testClamp_dyn();

		void testDistanceTo();
		::Dynamic testDistanceTo_dyn();

		void testSetAllFields();
		::Dynamic testSetAllFields_dyn();

};

} // end namespace test

#endif /* INCLUDED_test_TestStructures */ 
