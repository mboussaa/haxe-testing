// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_List
#include <List.h>
#endif


void Lambda_obj::__construct() { }

Dynamic Lambda_obj::__CreateEmpty() { return new Lambda_obj; }

hx::ObjectPtr< Lambda_obj > Lambda_obj::__new()
{
	hx::ObjectPtr< Lambda_obj > _hx_result = new Lambda_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Lambda_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Lambda_obj > _hx_result = new Lambda_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::List Lambda_obj::map( ::Dynamic it, ::Dynamic f){
            	HX_STACK_FRAME("Lambda","map",0x3d8fa1d5,"Lambda.map","/usr/lib/haxe/std/Lambda.hx",70,0xc6d51bb6)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(f,"f")
HXLINE(  71)		HX_VARI(  ::List,l) =  ::List_obj::__new();
HXLINE(  72)		{
HXLINE(  72)			HX_VARI(  ::Dynamic,tmp) =  ::Dynamic(it->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))();
HXDLIN(  72)			while(true){
HXLINE(  72)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  72)				if (_hx_tmp) {
HXLINE(  72)					goto _hx_goto_0;
            				}
HXDLIN(  72)				HX_VARI(  ::Dynamic,x) =  ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE(  73)				 ::Dynamic _hx_tmp1 = f(x);
HXDLIN(  73)				l->add(_hx_tmp1);
            			}
            			_hx_goto_0:;
            		}
HXLINE(  74)		return l;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lambda_obj,map,return )

 ::Dynamic Lambda_obj::fold( ::Dynamic it, ::Dynamic f, ::Dynamic first){
            	HX_STACK_FRAME("Lambda","fold",0x9b8816a8,"Lambda.fold","/usr/lib/haxe/std/Lambda.hx",205,0xc6d51bb6)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(first,"first")
HXLINE( 206)		{
HXLINE( 206)			HX_VARI(  ::Dynamic,tmp) =  ::Dynamic(it->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))();
HXDLIN( 206)			while(true){
HXLINE( 206)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 206)				if (_hx_tmp) {
HXLINE( 206)					goto _hx_goto_1;
            				}
HXDLIN( 206)				HX_VARI(  ::Dynamic,x) =  ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE( 207)				first = f(x,first);
            			}
            			_hx_goto_1:;
            		}
HXLINE( 208)		return first;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Lambda_obj,fold,return )


Lambda_obj::Lambda_obj()
{
}

bool Lambda_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { outValue = map_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"fold") ) { outValue = fold_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Lambda_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Lambda_obj_sStaticStorageInfo = 0;
#endif

static void Lambda_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Lambda_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Lambda_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Lambda_obj::__mClass,"__mClass");
};

#endif

hx::Class Lambda_obj::__mClass;

static ::String Lambda_obj_sStaticFields[] = {
	HX_HCSTRING("map","\x9c","\x0a","\x53","\x00"),
	HX_HCSTRING("fold","\x01","\x5c","\xc0","\x43"),
	::String(null())
};

void Lambda_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Lambda","\x27","\xa7","\x54","\x85");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Lambda_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Lambda_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Lambda_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Lambda_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Lambda_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Lambda_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Lambda_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

