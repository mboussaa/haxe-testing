// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_hxmath_math_IntVector2Default
#include <hxmath/math/IntVector2Default.h>
#endif
#ifndef INCLUDED_hxmath_math_Vector2Default
#include <hxmath/math/Vector2Default.h>
#endif
#ifndef INCLUDED_hxmath_math__IntVector2_IntVector2_Impl_
#include <hxmath/math/_IntVector2/IntVector2_Impl_.h>
#endif

namespace hxmath{
namespace math{
namespace _IntVector2{

void IntVector2_Impl__obj::__construct() { }

Dynamic IntVector2_Impl__obj::__CreateEmpty() { return new IntVector2_Impl__obj; }

hx::ObjectPtr< IntVector2_Impl__obj > IntVector2_Impl__obj::__new()
{
	hx::ObjectPtr< IntVector2_Impl__obj > _hx_result = new IntVector2_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic IntVector2_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< IntVector2_Impl__obj > _hx_result = new IntVector2_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Int IntVector2_Impl__obj::elementCount;

 ::hxmath::math::IntVector2Default IntVector2_Impl__obj::_new(Int x,Int y){
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","_new",0x4e9bc610,"hxmath.math._IntVector2.IntVector2_Impl_._new","hxmath/math/IntVector2.hx",57,0x576b160e)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE(  57)		return  ::hxmath::math::IntVector2Default_obj::__new(x,y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(IntVector2_Impl__obj,_new,return )

 ::hxmath::math::IntVector2Default IntVector2_Impl__obj::fromArray(::Array< Int > rawData){
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","fromArray",0xf111ccc0,"hxmath.math._IntVector2.IntVector2_Impl_.fromArray","hxmath/math/IntVector2.hx",68,0x576b160e)
            	HX_STACK_ARG(rawData,"rawData")
HXLINE(  69)		if ((rawData->length != (int)2)) {
HXLINE(  71)			HX_STACK_DO_THROW(HX_("Invalid rawData.",25,ca,34,44));
            		}
HXLINE(  74)		return ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new(rawData->__get((int)0),rawData->__get((int)1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(IntVector2_Impl__obj,fromArray,return )

 ::hxmath::math::Vector2Default IntVector2_Impl__obj::toVector2( ::hxmath::math::IntVector2Default this1){
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","toVector2",0x212aa6c5,"hxmath.math._IntVector2.IntVector2_Impl_.toVector2","hxmath/math/IntVector2.hx",83,0x576b160e)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  84)		HX_VARI(  ::hxmath::math::IntVector2Default,self) = this1;
HXLINE(  85)		return  ::hxmath::math::Vector2Default_obj::__new(self->x,self->y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(IntVector2_Impl__obj,toVector2,return )

Int IntVector2_Impl__obj::dot( ::hxmath::math::IntVector2Default a, ::hxmath::math::IntVector2Default b){
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","dot",0xe8427cba,"hxmath.math._IntVector2.IntVector2_Impl_.dot","hxmath/math/IntVector2.hx",98,0x576b160e)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(  98)		return ((a->x * b->x) + (a->y * b->y));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(IntVector2_Impl__obj,dot,return )

 ::hxmath::math::IntVector2Default IntVector2_Impl__obj::multiply( ::hxmath::math::IntVector2Default a,Int s){
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","multiply",0x61411653,"hxmath.math._IntVector2.IntVector2_Impl_.multiply","hxmath/math/IntVector2.hx",114,0x576b160e)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(s,"s")
HXLINE( 114)		HX_VARI(  ::hxmath::math::IntVector2Default,self) = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new(a->x,a->y);
HXDLIN( 114)		hx::MultEq(self->x,s);
HXDLIN( 114)		hx::MultEq(self->y,s);
HXDLIN( 114)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(IntVector2_Impl__obj,multiply,return )

 ::hxmath::math::IntVector2Default IntVector2_Impl__obj::add( ::hxmath::math::IntVector2Default a, ::hxmath::math::IntVector2Default b){
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","add",0xe8402c52,"hxmath.math._IntVector2.IntVector2_Impl_.add","hxmath/math/IntVector2.hx",128,0x576b160e)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 128)		HX_VARI(  ::hxmath::math::IntVector2Default,self) = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new(a->x,a->y);
HXDLIN( 128)		hx::AddEq(self->x,b->x);
HXDLIN( 128)		hx::AddEq(self->y,b->y);
HXDLIN( 128)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(IntVector2_Impl__obj,add,return )

 ::hxmath::math::IntVector2Default IntVector2_Impl__obj::subtract( ::hxmath::math::IntVector2Default a, ::hxmath::math::IntVector2Default b){
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","subtract",0xbec5a943,"hxmath.math._IntVector2.IntVector2_Impl_.subtract","hxmath/math/IntVector2.hx",142,0x576b160e)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 142)		HX_VARI(  ::hxmath::math::IntVector2Default,self) = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new(a->x,a->y);
HXDLIN( 142)		hx::SubEq(self->x,b->x);
HXDLIN( 142)		hx::SubEq(self->y,b->y);
HXDLIN( 142)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(IntVector2_Impl__obj,subtract,return )

 ::hxmath::math::IntVector2Default IntVector2_Impl__obj::negate( ::hxmath::math::IntVector2Default a){
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","negate",0xd3a6bc31,"hxmath.math._IntVector2.IntVector2_Impl_.negate","hxmath/math/IntVector2.hx",155,0x576b160e)
            	HX_STACK_ARG(a,"a")
HXLINE( 155)		return ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new(-(a->x),-(a->y));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(IntVector2_Impl__obj,negate,return )

Bool IntVector2_Impl__obj::equals( ::hxmath::math::IntVector2Default a, ::hxmath::math::IntVector2Default b){
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","equals",0x2c8068ae,"hxmath.math._IntVector2.IntVector2_Impl_.equals","hxmath/math/IntVector2.hx",171,0x576b160e)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 171)		Bool _hx_tmp;
HXDLIN( 171)		if (hx::IsNull( a )) {
HXLINE( 171)			_hx_tmp = hx::IsNull( b );
            		}
            		else {
HXLINE( 171)			_hx_tmp = false;
            		}
HXDLIN( 171)		if (!(_hx_tmp)) {
HXLINE( 172)			Bool _hx_tmp1;
HXDLIN( 172)			Bool _hx_tmp2;
HXDLIN( 172)			if (hx::IsNotNull( a )) {
HXLINE( 173)				_hx_tmp2 = hx::IsNotNull( b );
            			}
            			else {
HXLINE( 172)				_hx_tmp2 = false;
            			}
HXDLIN( 172)			if (_hx_tmp2) {
HXLINE( 174)				_hx_tmp1 = (a->x == b->x);
            			}
            			else {
HXLINE( 172)				_hx_tmp1 = false;
            			}
HXDLIN( 172)			if (_hx_tmp1) {
HXLINE( 171)				return (a->y == b->y);
            			}
            			else {
HXLINE( 171)				return false;
            			}
            		}
            		else {
HXLINE( 171)			return true;
            		}
HXDLIN( 171)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(IntVector2_Impl__obj,equals,return )

 ::hxmath::math::IntVector2Default IntVector2_Impl__obj::max( ::hxmath::math::IntVector2Default a, ::hxmath::math::IntVector2Default b){
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","max",0xe84944d5,"hxmath.math._IntVector2.IntVector2_Impl_.max","hxmath/math/IntVector2.hx",187,0x576b160e)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 187)		HX_VARI(  ::hxmath::math::IntVector2Default,self) = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new(a->x,a->y);
HXDLIN( 187)		HX_VARI_NAME( Int,a1,"a") = self->x;
HXDLIN( 187)		HX_VARI_NAME( Int,b1,"b") = b->x;
HXDLIN( 187)		Int _hx_tmp;
HXDLIN( 187)		if ((b1 > a1)) {
HXLINE( 187)			_hx_tmp = b1;
            		}
            		else {
HXLINE( 187)			_hx_tmp = a1;
            		}
HXDLIN( 187)		self->x = _hx_tmp;
HXDLIN( 187)		HX_VARI_NAME( Int,a2,"a") = self->y;
HXDLIN( 187)		HX_VARI_NAME( Int,b2,"b") = b->y;
HXDLIN( 187)		Int _hx_tmp1;
HXDLIN( 187)		if ((b2 > a2)) {
HXLINE( 187)			_hx_tmp1 = b2;
            		}
            		else {
HXLINE( 187)			_hx_tmp1 = a2;
            		}
HXDLIN( 187)		self->y = _hx_tmp1;
HXDLIN( 187)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(IntVector2_Impl__obj,max,return )

 ::hxmath::math::IntVector2Default IntVector2_Impl__obj::min( ::hxmath::math::IntVector2Default a, ::hxmath::math::IntVector2Default b){
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","min",0xe8494bc3,"hxmath.math._IntVector2.IntVector2_Impl_.min","hxmath/math/IntVector2.hx",200,0x576b160e)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 200)		HX_VARI(  ::hxmath::math::IntVector2Default,self) = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new(a->x,a->y);
HXDLIN( 200)		HX_VARI_NAME( Int,a1,"a") = self->x;
HXDLIN( 200)		HX_VARI_NAME( Int,b1,"b") = b->x;
HXDLIN( 200)		Int _hx_tmp;
HXDLIN( 200)		if ((b1 < a1)) {
HXLINE( 200)			_hx_tmp = b1;
            		}
            		else {
HXLINE( 200)			_hx_tmp = a1;
            		}
HXDLIN( 200)		self->x = _hx_tmp;
HXDLIN( 200)		HX_VARI_NAME( Int,a2,"a") = self->y;
HXDLIN( 200)		HX_VARI_NAME( Int,b2,"b") = b->y;
HXDLIN( 200)		Int _hx_tmp1;
HXDLIN( 200)		if ((b2 < a2)) {
HXLINE( 200)			_hx_tmp1 = b2;
            		}
            		else {
HXLINE( 200)			_hx_tmp1 = a2;
            		}
HXDLIN( 200)		self->y = _hx_tmp1;
HXDLIN( 200)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(IntVector2_Impl__obj,min,return )

 ::hxmath::math::IntVector2Default IntVector2_Impl__obj::set( ::hxmath::math::IntVector2Default this1,Int x,Int y){
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","set",0xe84dd5d3,"hxmath.math._IntVector2.IntVector2_Impl_.set","hxmath/math/IntVector2.hx",212,0x576b160e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 213)		HX_VARI(  ::hxmath::math::IntVector2Default,self) = this1;
HXLINE( 215)		self->x = x;
HXLINE( 216)		self->y = y;
HXLINE( 218)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(IntVector2_Impl__obj,set,return )

 ::hxmath::math::IntVector2Default IntVector2_Impl__obj::multiplyWith( ::hxmath::math::IntVector2Default this1,Int s){
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","multiplyWith",0x6a97ddf9,"hxmath.math._IntVector2.IntVector2_Impl_.multiplyWith","hxmath/math/IntVector2.hx",229,0x576b160e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(s,"s")
HXLINE( 230)		HX_VARI(  ::hxmath::math::IntVector2Default,self) = this1;
HXLINE( 232)		hx::MultEq(self->x,s);
HXLINE( 233)		hx::MultEq(self->y,s);
HXLINE( 235)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(IntVector2_Impl__obj,multiplyWith,return )

 ::hxmath::math::IntVector2Default IntVector2_Impl__obj::addWith( ::hxmath::math::IntVector2Default this1, ::hxmath::math::IntVector2Default a){
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","addWith",0x1a735f78,"hxmath.math._IntVector2.IntVector2_Impl_.addWith","hxmath/math/IntVector2.hx",246,0x576b160e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(a,"a")
HXLINE( 247)		HX_VARI(  ::hxmath::math::IntVector2Default,self) = this1;
HXLINE( 249)		hx::AddEq(self->x,a->x);
HXLINE( 250)		hx::AddEq(self->y,a->y);
HXLINE( 252)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(IntVector2_Impl__obj,addWith,return )

 ::hxmath::math::IntVector2Default IntVector2_Impl__obj::subtractWith( ::hxmath::math::IntVector2Default this1, ::hxmath::math::IntVector2Default a){
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","subtractWith",0x8af8a8e9,"hxmath.math._IntVector2.IntVector2_Impl_.subtractWith","hxmath/math/IntVector2.hx",263,0x576b160e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(a,"a")
HXLINE( 264)		HX_VARI(  ::hxmath::math::IntVector2Default,self) = this1;
HXLINE( 266)		hx::SubEq(self->x,a->x);
HXLINE( 267)		hx::SubEq(self->y,a->y);
HXLINE( 269)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(IntVector2_Impl__obj,subtractWith,return )

 ::hxmath::math::IntVector2Default IntVector2_Impl__obj::maxWith( ::hxmath::math::IntVector2Default this1, ::hxmath::math::IntVector2Default a){
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","maxWith",0x5e66757b,"hxmath.math._IntVector2.IntVector2_Impl_.maxWith","hxmath/math/IntVector2.hx",280,0x576b160e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(a,"a")
HXLINE( 281)		HX_VARI(  ::hxmath::math::IntVector2Default,self) = this1;
HXLINE( 283)		HX_VARI_NAME( Int,a1,"a") = self->x;
HXDLIN( 283)		HX_VARI( Int,b) = a->x;
HXDLIN( 283)		Int _hx_tmp;
HXDLIN( 283)		if ((b > a1)) {
HXLINE( 283)			_hx_tmp = b;
            		}
            		else {
HXLINE( 283)			_hx_tmp = a1;
            		}
HXDLIN( 283)		self->x = _hx_tmp;
HXLINE( 284)		HX_VARI_NAME( Int,a2,"a") = self->y;
HXDLIN( 284)		HX_VARI_NAME( Int,b1,"b") = a->y;
HXDLIN( 284)		Int _hx_tmp1;
HXDLIN( 284)		if ((b1 > a2)) {
HXLINE( 284)			_hx_tmp1 = b1;
            		}
            		else {
HXLINE( 284)			_hx_tmp1 = a2;
            		}
HXDLIN( 284)		self->y = _hx_tmp1;
HXLINE( 286)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(IntVector2_Impl__obj,maxWith,return )

 ::hxmath::math::IntVector2Default IntVector2_Impl__obj::minWith( ::hxmath::math::IntVector2Default this1, ::hxmath::math::IntVector2Default a){
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","minWith",0xcf3f8b69,"hxmath.math._IntVector2.IntVector2_Impl_.minWith","hxmath/math/IntVector2.hx",297,0x576b160e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(a,"a")
HXLINE( 298)		HX_VARI(  ::hxmath::math::IntVector2Default,self) = this1;
HXLINE( 300)		HX_VARI_NAME( Int,a1,"a") = self->x;
HXDLIN( 300)		HX_VARI( Int,b) = a->x;
HXDLIN( 300)		Int _hx_tmp;
HXDLIN( 300)		if ((b < a1)) {
HXLINE( 300)			_hx_tmp = b;
            		}
            		else {
HXLINE( 300)			_hx_tmp = a1;
            		}
HXDLIN( 300)		self->x = _hx_tmp;
HXLINE( 301)		HX_VARI_NAME( Int,a2,"a") = self->y;
HXDLIN( 301)		HX_VARI_NAME( Int,b1,"b") = a->y;
HXDLIN( 301)		Int _hx_tmp1;
HXDLIN( 301)		if ((b1 < a2)) {
HXLINE( 301)			_hx_tmp1 = b1;
            		}
            		else {
HXLINE( 301)			_hx_tmp1 = a2;
            		}
HXDLIN( 301)		self->y = _hx_tmp1;
HXLINE( 303)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(IntVector2_Impl__obj,minWith,return )

void IntVector2_Impl__obj::copyTo( ::hxmath::math::IntVector2Default this1, ::hxmath::math::IntVector2Default target){
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","copyTo",0x35c096ff,"hxmath.math._IntVector2.IntVector2_Impl_.copyTo","hxmath/math/IntVector2.hx",313,0x576b160e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(target,"target")
HXLINE( 314)		HX_VARI(  ::hxmath::math::IntVector2Default,self) = this1;
HXLINE( 316)		{
HXLINE( 316)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 316)			while((_g < (int)2)){
HXLINE( 316)				HX_VARI( Int,i) = _g++;
HXLINE( 318)				{
HXLINE( 318)					 ::Dynamic _hx_tmp;
HXDLIN( 318)					switch((int)(i)){
            						case (int)0: {
HXLINE( 318)							_hx_tmp = self->x;
            						}
            						break;
            						case (int)1: {
HXLINE( 318)							_hx_tmp = self->y;
            						}
            						break;
            						default:{
HXLINE( 318)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 318)					HX_VARI( Int,value) = ( (Int)(_hx_tmp) );
HXDLIN( 318)					switch((int)(i)){
            						case (int)0: {
HXLINE( 318)							target->x = value;
            						}
            						break;
            						case (int)1: {
HXLINE( 318)							target->y = value;
            						}
            						break;
            						default:{
HXLINE( 318)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(IntVector2_Impl__obj,copyTo,(void))

 ::hxmath::math::IntVector2Default IntVector2_Impl__obj::clone( ::hxmath::math::IntVector2Default this1){
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","clone",0xc600fbce,"hxmath.math._IntVector2.IntVector2_Impl_.clone","hxmath/math/IntVector2.hx",328,0x576b160e)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 329)		HX_VARI(  ::hxmath::math::IntVector2Default,self) = this1;
HXLINE( 330)		return ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new(self->x,self->y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(IntVector2_Impl__obj,clone,return )

Int IntVector2_Impl__obj::getArrayElement( ::hxmath::math::IntVector2Default this1,Int i){
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","getArrayElement",0xd1dbd38a,"hxmath.math._IntVector2.IntVector2_Impl_.getArrayElement","hxmath/math/IntVector2.hx",341,0x576b160e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(i,"i")
HXLINE( 342)		HX_VARI(  ::hxmath::math::IntVector2Default,self) = this1;
HXLINE( 343)		switch((int)(i)){
            			case (int)0: {
HXLINE( 346)				return self->x;
            			}
            			break;
            			case (int)1: {
HXLINE( 348)				return self->y;
            			}
            			break;
            			default:{
HXLINE( 350)				HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            			}
            		}
HXLINE( 343)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(IntVector2_Impl__obj,getArrayElement,return )

Int IntVector2_Impl__obj::setArrayElement( ::hxmath::math::IntVector2Default this1,Int i,Int value){
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","setArrayElement",0xcda75096,"hxmath.math._IntVector2.IntVector2_Impl_.setArrayElement","hxmath/math/IntVector2.hx",363,0x576b160e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(i,"i")
            	HX_STACK_ARG(value,"value")
HXLINE( 364)		HX_VARI(  ::hxmath::math::IntVector2Default,self) = this1;
HXLINE( 365)		switch((int)(i)){
            			case (int)0: {
HXLINE( 368)				return (self->x = value);
            			}
            			break;
            			case (int)1: {
HXLINE( 370)				return (self->y = value);
            			}
            			break;
            			default:{
HXLINE( 372)				HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            			}
            		}
HXLINE( 365)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(IntVector2_Impl__obj,setArrayElement,return )

 ::hxmath::math::IntVector2Default IntVector2_Impl__obj::applyNegate( ::hxmath::math::IntVector2Default this1){
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","applyNegate",0x83095501,"hxmath.math._IntVector2.IntVector2_Impl_.applyNegate","hxmath/math/IntVector2.hx",382,0x576b160e)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 383)		HX_VARI(  ::hxmath::math::IntVector2Default,self) = this1;
HXLINE( 385)		self->x = -(self->x);
HXLINE( 386)		self->y = -(self->y);
HXLINE( 388)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(IntVector2_Impl__obj,applyNegate,return )

 ::hxmath::math::IntVector2Default IntVector2_Impl__obj::applyScalarFunc( ::hxmath::math::IntVector2Default this1, ::Dynamic func){
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","applyScalarFunc",0x7e19234f,"hxmath.math._IntVector2.IntVector2_Impl_.applyScalarFunc","hxmath/math/IntVector2.hx",398,0x576b160e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(func,"func")
HXLINE( 399)		HX_VARI(  ::hxmath::math::IntVector2Default,self) = this1;
HXLINE( 401)		{
HXLINE( 401)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 401)			while((_g < (int)2)){
HXLINE( 401)				HX_VARI( Int,i) = _g++;
HXLINE( 403)				{
HXLINE( 403)					 ::Dynamic _hx_tmp;
HXDLIN( 403)					switch((int)(i)){
            						case (int)0: {
HXLINE( 403)							_hx_tmp = self->x;
            						}
            						break;
            						case (int)1: {
HXLINE( 403)							_hx_tmp = self->y;
            						}
            						break;
            						default:{
HXLINE( 403)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 403)					HX_VARI( Int,value) = ( (Int)(func(_hx_tmp)) );
HXDLIN( 403)					switch((int)(i)){
            						case (int)0: {
HXLINE( 403)							self->x = value;
            						}
            						break;
            						case (int)1: {
HXLINE( 403)							self->y = value;
            						}
            						break;
            						default:{
HXLINE( 403)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXLINE( 406)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(IntVector2_Impl__obj,applyScalarFunc,return )

 ::hxmath::math::IntVector2Default IntVector2_Impl__obj::rotateLeft( ::hxmath::math::IntVector2Default this1){
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","rotateLeft",0x830821f1,"hxmath.math._IntVector2.IntVector2_Impl_.rotateLeft","hxmath/math/IntVector2.hx",415,0x576b160e)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 416)		HX_VARI(  ::hxmath::math::IntVector2Default,self) = this1;
HXLINE( 418)		HX_VARI( Int,newX) = -(self->y);
HXLINE( 419)		self->y = self->x;
HXLINE( 420)		self->x = newX;
HXLINE( 422)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(IntVector2_Impl__obj,rotateLeft,return )

 ::hxmath::math::IntVector2Default IntVector2_Impl__obj::rotateRight( ::hxmath::math::IntVector2Default this1){
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","rotateRight",0x9b229eb2,"hxmath.math._IntVector2.IntVector2_Impl_.rotateRight","hxmath/math/IntVector2.hx",431,0x576b160e)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 432)		HX_VARI(  ::hxmath::math::IntVector2Default,self) = this1;
HXLINE( 434)		HX_VARI( Int,newX) = self->y;
HXLINE( 435)		self->y = -(self->x);
HXLINE( 436)		self->x = newX;
HXLINE( 438)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(IntVector2_Impl__obj,rotateRight,return )

 ::hxmath::math::IntVector2Default IntVector2_Impl__obj::get_zero(){
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","get_zero",0x975ffee0,"hxmath.math._IntVector2.IntVector2_Impl_.get_zero","hxmath/math/IntVector2.hx",443,0x576b160e)
HXLINE( 443)		return ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)0,(int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(IntVector2_Impl__obj,get_zero,return )

 ::hxmath::math::IntVector2Default IntVector2_Impl__obj::get_xAxis(){
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","get_xAxis",0x9e0ab681,"hxmath.math._IntVector2.IntVector2_Impl_.get_xAxis","hxmath/math/IntVector2.hx",448,0x576b160e)
HXLINE( 448)		return ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)1,(int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(IntVector2_Impl__obj,get_xAxis,return )

 ::hxmath::math::IntVector2Default IntVector2_Impl__obj::get_yAxis(){
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","get_yAxis",0x31714b02,"hxmath.math._IntVector2.IntVector2_Impl_.get_yAxis","hxmath/math/IntVector2.hx",453,0x576b160e)
HXLINE( 453)		return ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)0,(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(IntVector2_Impl__obj,get_yAxis,return )

Int IntVector2_Impl__obj::get_lengthSq( ::hxmath::math::IntVector2Default this1){
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","get_lengthSq",0xeb908edc,"hxmath.math._IntVector2.IntVector2_Impl_.get_lengthSq","hxmath/math/IntVector2.hx",457,0x576b160e)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 458)		HX_VARI(  ::hxmath::math::IntVector2Default,self) = this1;
HXLINE( 459)		return ((self->x * self->x) + (self->y * self->y));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(IntVector2_Impl__obj,get_lengthSq,return )

 ::hxmath::math::IntVector2Default IntVector2_Impl__obj::get_rotatedLeft( ::hxmath::math::IntVector2Default this1){
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","get_rotatedLeft",0xbd55fd98,"hxmath.math._IntVector2.IntVector2_Impl_.get_rotatedLeft","hxmath/math/IntVector2.hx",465,0x576b160e)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 466)		HX_VARI(  ::hxmath::math::IntVector2Default,self) = this1;
HXLINE( 467)		HX_VARI_NAME(  ::hxmath::math::IntVector2Default,self1,"self") = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new(self->x,self->y);
HXDLIN( 467)		HX_VARI( Int,newX) = -(self1->y);
HXDLIN( 467)		self1->y = self1->x;
HXDLIN( 467)		self1->x = newX;
HXDLIN( 467)		return self1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(IntVector2_Impl__obj,get_rotatedLeft,return )

 ::hxmath::math::IntVector2Default IntVector2_Impl__obj::get_rotatedRight( ::hxmath::math::IntVector2Default this1){
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","get_rotatedRight",0x64f4f52b,"hxmath.math._IntVector2.IntVector2_Impl_.get_rotatedRight","hxmath/math/IntVector2.hx",472,0x576b160e)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 473)		HX_VARI(  ::hxmath::math::IntVector2Default,self) = this1;
HXLINE( 474)		HX_VARI_NAME(  ::hxmath::math::IntVector2Default,self1,"self") = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new(self->x,self->y);
HXDLIN( 474)		HX_VARI( Int,newX) = self1->y;
HXDLIN( 474)		self1->y = -(self1->x);
HXDLIN( 474)		self1->x = newX;
HXDLIN( 474)		return self1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(IntVector2_Impl__obj,get_rotatedRight,return )


IntVector2_Impl__obj::IntVector2_Impl__obj()
{
}

bool IntVector2_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"dot") ) { outValue = dot_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"max") ) { outValue = max_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"min") ) { outValue = min_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { outValue = clone_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"negate") ) { outValue = negate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyTo") ) { outValue = copyTo_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addWith") ) { outValue = addWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"maxWith") ) { outValue = maxWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"minWith") ) { outValue = minWith_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"multiply") ) { outValue = multiply_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subtract") ) { outValue = subtract_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_zero") ) { outValue = get_zero_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromArray") ) { outValue = fromArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toVector2") ) { outValue = toVector2_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_xAxis") ) { outValue = get_xAxis_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_yAxis") ) { outValue = get_yAxis_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rotateLeft") ) { outValue = rotateLeft_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"applyNegate") ) { outValue = applyNegate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rotateRight") ) { outValue = rotateRight_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"multiplyWith") ) { outValue = multiplyWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subtractWith") ) { outValue = subtractWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_lengthSq") ) { outValue = get_lengthSq_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getArrayElement") ) { outValue = getArrayElement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setArrayElement") ) { outValue = setArrayElement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"applyScalarFunc") ) { outValue = applyScalarFunc_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_rotatedLeft") ) { outValue = get_rotatedLeft_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_rotatedRight") ) { outValue = get_rotatedRight_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *IntVector2_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo IntVector2_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &IntVector2_Impl__obj::elementCount,HX_HCSTRING("elementCount","\x73","\x1c","\x9d","\xaa")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void IntVector2_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(IntVector2_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(IntVector2_Impl__obj::elementCount,"elementCount");
};

#ifdef HXCPP_VISIT_ALLOCS
static void IntVector2_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(IntVector2_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(IntVector2_Impl__obj::elementCount,"elementCount");
};

#endif

hx::Class IntVector2_Impl__obj::__mClass;

static ::String IntVector2_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("elementCount","\x73","\x1c","\x9d","\xaa"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("fromArray","\xcf","\x57","\x18","\xda"),
	HX_HCSTRING("toVector2","\xd4","\x31","\x31","\x0a"),
	HX_HCSTRING("dot","\x89","\x42","\x4c","\x00"),
	HX_HCSTRING("multiply","\x24","\xe2","\x8c","\x9a"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("subtract","\x14","\x75","\x11","\xf8"),
	HX_HCSTRING("negate","\xc2","\x41","\x19","\x67"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"),
	HX_HCSTRING("min","\x92","\x11","\x53","\x00"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("multiplyWith","\x4a","\x66","\xe4","\x53"),
	HX_HCSTRING("addWith","\xc7","\xb8","\x35","\x8b"),
	HX_HCSTRING("subtractWith","\x3a","\x31","\x45","\x74"),
	HX_HCSTRING("maxWith","\xca","\xce","\x28","\xcf"),
	HX_HCSTRING("minWith","\xb8","\xe4","\x01","\x40"),
	HX_HCSTRING("copyTo","\x90","\x1c","\x33","\xc9"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("getArrayElement","\xd9","\x93","\x9e","\xda"),
	HX_HCSTRING("setArrayElement","\xe5","\x10","\x6a","\xd6"),
	HX_HCSTRING("applyNegate","\xd0","\x01","\x14","\xa3"),
	HX_HCSTRING("applyScalarFunc","\x9e","\xe3","\xdb","\x86"),
	HX_HCSTRING("rotateLeft","\x02","\x44","\xbb","\x7f"),
	HX_HCSTRING("rotateRight","\x81","\x4b","\x2d","\xbb"),
	HX_HCSTRING("get_zero","\xb1","\xca","\xab","\xd0"),
	HX_HCSTRING("get_xAxis","\x90","\x41","\x11","\x87"),
	HX_HCSTRING("get_yAxis","\x11","\xd6","\x77","\x1a"),
	HX_HCSTRING("get_lengthSq","\x2d","\x17","\xdd","\xd4"),
	HX_HCSTRING("get_rotatedLeft","\xe7","\xbd","\x18","\xc6"),
	HX_HCSTRING("get_rotatedRight","\xfc","\x79","\x9a","\x06"),
	::String(null())
};

void IntVector2_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hxmath.math._IntVector2.IntVector2_Impl_","\x1f","\x6e","\xd3","\x76");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &IntVector2_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = IntVector2_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(IntVector2_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< IntVector2_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = IntVector2_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IntVector2_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IntVector2_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void IntVector2_Impl__obj::__boot()
{
{
            	HX_STACK_FRAME("hxmath.math._IntVector2.IntVector2_Impl_","boot",0x509834e1,"hxmath.math._IntVector2.IntVector2_Impl_.boot","hxmath/math/IntVector2.hx",30,0x576b160e)
HXLINE(  30)		elementCount = (int)2;
            	}
}

} // end namespace hxmath
} // end namespace math
} // end namespace _IntVector2
