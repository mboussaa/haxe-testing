// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_hxmath_math_Vector2Default
#include <hxmath/math/Vector2Default.h>
#endif

namespace hxmath{
namespace math{

void Vector2Default_obj::__construct(Float x,Float y){
            	HX_STACK_FRAME("hxmath.math.Vector2Default","new",0x024eedd4,"hxmath.math.Vector2Default.new","hxmath/math/Vector2.hx",18,0xc0be95df)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE(  19)		this->x = x;
HXLINE(  20)		this->y = y;
            	}

Dynamic Vector2Default_obj::__CreateEmpty() { return new Vector2Default_obj; }

hx::ObjectPtr< Vector2Default_obj > Vector2Default_obj::__new(Float x,Float y)
{
	hx::ObjectPtr< Vector2Default_obj > _hx_result = new Vector2Default_obj();
	_hx_result->__construct(x,y);
	return _hx_result;
}

Dynamic Vector2Default_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Vector2Default_obj > _hx_result = new Vector2Default_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

::String Vector2Default_obj::toString(){
            	HX_STACK_FRAME("hxmath.math.Vector2Default","toString",0xe3706eb8,"hxmath.math.Vector2Default.toString","hxmath/math/Vector2.hx",25,0xc0be95df)
            	HX_STACK_THIS(this)
HXLINE(  25)		return ((((HX_("(",28,00,00,00) + this->x) + HX_(", ",74,26,00,00)) + this->y) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector2Default_obj,toString,return )


Vector2Default_obj::Vector2Default_obj()
{
}

hx::Val Vector2Default_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Vector2Default_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Vector2Default_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Vector2Default_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Vector2Default_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Vector2Default_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Vector2Default_obj_sStaticStorageInfo = 0;
#endif

static ::String Vector2Default_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void Vector2Default_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Vector2Default_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Vector2Default_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Vector2Default_obj::__mClass,"__mClass");
};

#endif

hx::Class Vector2Default_obj::__mClass;

void Vector2Default_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hxmath.math.Vector2Default","\xe2","\xb3","\x2e","\x5a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Vector2Default_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Vector2Default_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Vector2Default_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Vector2Default_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Vector2Default_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Vector2Default_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxmath
} // end namespace math
