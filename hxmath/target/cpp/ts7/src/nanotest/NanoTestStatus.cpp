// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_nanotest_NanoTestStatus
#include <nanotest/NanoTestStatus.h>
#endif
namespace nanotest{

::nanotest::NanoTestStatus NanoTestStatus_obj::ERROR(::String message,::Array< ::Dynamic> callStack)
{
	return hx::CreateEnum< NanoTestStatus_obj >(HX_("ERROR",a8,03,18,f1),2,2)->_hx_init(0,message)->_hx_init(1,callStack);
}

::nanotest::NanoTestStatus NanoTestStatus_obj::FAIL(::String message, ::Dynamic posInfos)
{
	return hx::CreateEnum< NanoTestStatus_obj >(HX_("FAIL",de,81,76,2e),1,2)->_hx_init(0,message)->_hx_init(1,posInfos);
}

::nanotest::NanoTestStatus NanoTestStatus_obj::SUCCESS( ::Dynamic posInfos)
{
	return hx::CreateEnum< NanoTestStatus_obj >(HX_("SUCCESS",a3,f9,21,38),0,1)->_hx_init(0,posInfos);
}

bool NanoTestStatus_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	if (inName==HX_("ERROR",a8,03,18,f1)) { outValue = NanoTestStatus_obj::ERROR_dyn(); return true; }
	if (inName==HX_("FAIL",de,81,76,2e)) { outValue = NanoTestStatus_obj::FAIL_dyn(); return true; }
	if (inName==HX_("SUCCESS",a3,f9,21,38)) { outValue = NanoTestStatus_obj::SUCCESS_dyn(); return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(NanoTestStatus_obj)

int NanoTestStatus_obj::__FindIndex(::String inName)
{
	if (inName==HX_("ERROR",a8,03,18,f1)) return 2;
	if (inName==HX_("FAIL",de,81,76,2e)) return 1;
	if (inName==HX_("SUCCESS",a3,f9,21,38)) return 0;
	return super::__FindIndex(inName);
}

STATIC_HX_DEFINE_DYNAMIC_FUNC2(NanoTestStatus_obj,ERROR,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC2(NanoTestStatus_obj,FAIL,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(NanoTestStatus_obj,SUCCESS,return)

int NanoTestStatus_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("ERROR",a8,03,18,f1)) return 2;
	if (inName==HX_("FAIL",de,81,76,2e)) return 2;
	if (inName==HX_("SUCCESS",a3,f9,21,38)) return 1;
	return super::__FindArgCount(inName);
}

hx::Val NanoTestStatus_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	if (inName==HX_("ERROR",a8,03,18,f1)) return ERROR_dyn();
	if (inName==HX_("FAIL",de,81,76,2e)) return FAIL_dyn();
	if (inName==HX_("SUCCESS",a3,f9,21,38)) return SUCCESS_dyn();
	return super::__Field(inName,inCallProp);
}

static ::String NanoTestStatus_obj_sStaticFields[] = {
	HX_("SUCCESS",a3,f9,21,38),
	HX_("FAIL",de,81,76,2e),
	HX_("ERROR",a8,03,18,f1),
	::String(null())
};

static void NanoTestStatus_obj_sMarkStatics(HX_MARK_PARAMS) {
};

#ifdef HXCPP_VISIT_ALLOCS
static void NanoTestStatus_obj_sVisitStatic(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NanoTestStatus_obj::__mClass,"__mClass");
};
#endif

hx::Class NanoTestStatus_obj::__mClass;

Dynamic __Create_NanoTestStatus_obj() { return new NanoTestStatus_obj; }

void NanoTestStatus_obj::__register()
{

hx::Static(__mClass) = hx::_hx_RegisterClass(HX_HCSTRING("nanotest.NanoTestStatus","\x80","\xb7","\xc2","\x0f"), hx::TCanCast< NanoTestStatus_obj >,NanoTestStatus_obj_sStaticFields,0,
	&__Create_NanoTestStatus_obj, &__Create,
	&super::__SGetClass(), &CreateNanoTestStatus_obj, NanoTestStatus_obj_sMarkStatics
#ifdef HXCPP_VISIT_ALLOCS
    , NanoTestStatus_obj_sVisitStatic
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &NanoTestStatus_obj::__GetStatic;
}

void NanoTestStatus_obj::__boot()
{
}


} // end namespace nanotest
