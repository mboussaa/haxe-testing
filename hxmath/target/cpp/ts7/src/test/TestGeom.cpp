// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_hxmath_geom_Ray2
#include <hxmath/geom/Ray2.h>
#endif
#ifndef INCLUDED_hxmath_geom_Rect
#include <hxmath/geom/Rect.h>
#endif
#ifndef INCLUDED_hxmath_math_Matrix2x2Default
#include <hxmath/math/Matrix2x2Default.h>
#endif
#ifndef INCLUDED_hxmath_math_Matrix3x2Default
#include <hxmath/math/Matrix3x2Default.h>
#endif
#ifndef INCLUDED_hxmath_math_Vector2Default
#include <hxmath/math/Vector2Default.h>
#endif
#ifndef INCLUDED_nanotest_NanoTestAssertResult
#include <nanotest/NanoTestAssertResult.h>
#endif
#ifndef INCLUDED_nanotest_NanoTestCase
#include <nanotest/NanoTestCase.h>
#endif
#ifndef INCLUDED_test_MathTestCase
#include <test/MathTestCase.h>
#endif
#ifndef INCLUDED_test_TestGeom
#include <test/TestGeom.h>
#endif

namespace test{

void TestGeom_obj::__construct( ::Dynamic posInfos){
            	HX_STACK_FRAME("test.TestGeom","new",0x820799dc,"test.TestGeom.new","test/TestGeom.hx",12,0x1a26c2b3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(posInfos,"posInfos")
HXLINE(  12)		super::__construct(posInfos);
            	}

Dynamic TestGeom_obj::__CreateEmpty() { return new TestGeom_obj; }

hx::ObjectPtr< TestGeom_obj > TestGeom_obj::__new( ::Dynamic posInfos)
{
	hx::ObjectPtr< TestGeom_obj > _hx_result = new TestGeom_obj();
	_hx_result->__construct(posInfos);
	return _hx_result;
}

Dynamic TestGeom_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestGeom_obj > _hx_result = new TestGeom_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestGeom_obj::testRectIntersect(){
            	HX_STACK_FRAME("test.TestGeom","testRectIntersect",0xe388f5e5,"test.TestGeom.testRectIntersect","test/TestGeom.hx",15,0x1a26c2b3)
            	HX_STACK_THIS(this)
HXLINE(  24)		HX_VARI(  ::hxmath::geom::Rect,a) =  ::hxmath::geom::Rect_obj::__new(((Float)0.0),((Float)0.0),((Float)1.0),((Float)1.0));
HXLINE(  25)		HX_VARI(  ::hxmath::geom::Rect,b) =  ::hxmath::geom::Rect_obj::__new(((Float)1.0),((Float)0.0),((Float)1.0),((Float)1.0));
HXLINE(  26)		HX_VARI(  ::hxmath::geom::Rect,c) =  ::hxmath::geom::Rect_obj::__new(((Float)0.0),((Float)1.0),((Float)1.0),((Float)1.0));
HXLINE(  27)		HX_VARI(  ::hxmath::geom::Rect,d) =  ::hxmath::geom::Rect_obj::__new(((Float)1.0),((Float)1.0),((Float)1.0),((Float)1.0));
HXLINE(  29)		Bool _hx_tmp;
HXDLIN(  29)		HX_VARI( Float,aStart) = a->x;
HXDLIN(  29)		HX_VARI( Float,aWidth) = a->width;
HXDLIN(  29)		HX_VARI( Float,bStart) = b->x;
HXDLIN(  29)		HX_VARI( Float,bWidth) = b->width;
HXDLIN(  29)		Bool _hx_tmp1;
HXDLIN(  29)		if (!((aStart >= (bStart + bWidth)))) {
HXLINE(  29)			_hx_tmp1 = (bStart >= (aStart + aWidth));
            		}
            		else {
HXLINE(  29)			_hx_tmp1 = true;
            		}
HXDLIN(  29)		if (!(_hx_tmp1)) {
HXLINE(  29)			HX_VARI_NAME( Float,aStart1,"aStart") = a->y;
HXDLIN(  29)			HX_VARI_NAME( Float,aWidth1,"aWidth") = a->height;
HXDLIN(  29)			HX_VARI_NAME( Float,bStart1,"bStart") = b->y;
HXDLIN(  29)			HX_VARI_NAME( Float,bWidth1,"bWidth") = b->height;
HXDLIN(  29)			Bool _hx_tmp2;
HXDLIN(  29)			if (!((aStart1 >= (bStart1 + bWidth1)))) {
HXLINE(  29)				_hx_tmp2 = (bStart1 >= (aStart1 + aWidth1));
            			}
            			else {
HXLINE(  29)				_hx_tmp2 = true;
            			}
HXDLIN(  29)			_hx_tmp = !(_hx_tmp2);
            		}
            		else {
HXLINE(  29)			_hx_tmp = false;
            		}
HXDLIN(  29)		this->assertFalse(_hx_tmp,hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),29,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRectIntersect",69,0b,46,34)));
HXLINE(  30)		Bool _hx_tmp3;
HXDLIN(  30)		HX_VARI_NAME( Float,aStart2,"aStart") = a->x;
HXDLIN(  30)		HX_VARI_NAME( Float,aWidth2,"aWidth") = a->width;
HXDLIN(  30)		HX_VARI_NAME( Float,bStart2,"bStart") = c->x;
HXDLIN(  30)		HX_VARI_NAME( Float,bWidth2,"bWidth") = c->width;
HXDLIN(  30)		Bool _hx_tmp4;
HXDLIN(  30)		if (!((aStart2 >= (bStart2 + bWidth2)))) {
HXLINE(  30)			_hx_tmp4 = (bStart2 >= (aStart2 + aWidth2));
            		}
            		else {
HXLINE(  30)			_hx_tmp4 = true;
            		}
HXDLIN(  30)		if (!(_hx_tmp4)) {
HXLINE(  30)			HX_VARI_NAME( Float,aStart3,"aStart") = a->y;
HXDLIN(  30)			HX_VARI_NAME( Float,aWidth3,"aWidth") = a->height;
HXDLIN(  30)			HX_VARI_NAME( Float,bStart3,"bStart") = c->y;
HXDLIN(  30)			HX_VARI_NAME( Float,bWidth3,"bWidth") = c->height;
HXDLIN(  30)			Bool _hx_tmp5;
HXDLIN(  30)			if (!((aStart3 >= (bStart3 + bWidth3)))) {
HXLINE(  30)				_hx_tmp5 = (bStart3 >= (aStart3 + aWidth3));
            			}
            			else {
HXLINE(  30)				_hx_tmp5 = true;
            			}
HXDLIN(  30)			_hx_tmp3 = !(_hx_tmp5);
            		}
            		else {
HXLINE(  30)			_hx_tmp3 = false;
            		}
HXDLIN(  30)		this->assertFalse(_hx_tmp3,hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),30,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRectIntersect",69,0b,46,34)));
HXLINE(  31)		Bool _hx_tmp6;
HXDLIN(  31)		HX_VARI_NAME( Float,aStart4,"aStart") = a->x;
HXDLIN(  31)		HX_VARI_NAME( Float,aWidth4,"aWidth") = a->width;
HXDLIN(  31)		HX_VARI_NAME( Float,bStart4,"bStart") = d->x;
HXDLIN(  31)		HX_VARI_NAME( Float,bWidth4,"bWidth") = d->width;
HXDLIN(  31)		Bool _hx_tmp7;
HXDLIN(  31)		if (!((aStart4 >= (bStart4 + bWidth4)))) {
HXLINE(  31)			_hx_tmp7 = (bStart4 >= (aStart4 + aWidth4));
            		}
            		else {
HXLINE(  31)			_hx_tmp7 = true;
            		}
HXDLIN(  31)		if (!(_hx_tmp7)) {
HXLINE(  31)			HX_VARI_NAME( Float,aStart5,"aStart") = a->y;
HXDLIN(  31)			HX_VARI_NAME( Float,aWidth5,"aWidth") = a->height;
HXDLIN(  31)			HX_VARI_NAME( Float,bStart5,"bStart") = d->y;
HXDLIN(  31)			HX_VARI_NAME( Float,bWidth5,"bWidth") = d->height;
HXDLIN(  31)			Bool _hx_tmp8;
HXDLIN(  31)			if (!((aStart5 >= (bStart5 + bWidth5)))) {
HXLINE(  31)				_hx_tmp8 = (bStart5 >= (aStart5 + aWidth5));
            			}
            			else {
HXLINE(  31)				_hx_tmp8 = true;
            			}
HXDLIN(  31)			_hx_tmp6 = !(_hx_tmp8);
            		}
            		else {
HXLINE(  31)			_hx_tmp6 = false;
            		}
HXDLIN(  31)		this->assertFalse(_hx_tmp6,hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),31,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRectIntersect",69,0b,46,34)));
HXLINE(  34)		HX_VARI(  ::hxmath::geom::Rect,e) =  ::hxmath::geom::Rect_obj::__new(((Float)0.5),((Float)0.5),((Float)1.0),((Float)1.0));
HXLINE(  35)		Bool _hx_tmp9;
HXDLIN(  35)		HX_VARI_NAME( Float,aStart6,"aStart") = a->x;
HXDLIN(  35)		HX_VARI_NAME( Float,aWidth6,"aWidth") = a->width;
HXDLIN(  35)		HX_VARI_NAME( Float,bStart6,"bStart") = e->x;
HXDLIN(  35)		HX_VARI_NAME( Float,bWidth6,"bWidth") = e->width;
HXDLIN(  35)		Bool _hx_tmp10;
HXDLIN(  35)		if (!((aStart6 >= (bStart6 + bWidth6)))) {
HXLINE(  35)			_hx_tmp10 = (bStart6 >= (aStart6 + aWidth6));
            		}
            		else {
HXLINE(  35)			_hx_tmp10 = true;
            		}
HXDLIN(  35)		if (!(_hx_tmp10)) {
HXLINE(  35)			HX_VARI_NAME( Float,aStart7,"aStart") = a->y;
HXDLIN(  35)			HX_VARI_NAME( Float,aWidth7,"aWidth") = a->height;
HXDLIN(  35)			HX_VARI_NAME( Float,bStart7,"bStart") = e->y;
HXDLIN(  35)			HX_VARI_NAME( Float,bWidth7,"bWidth") = e->height;
HXDLIN(  35)			Bool _hx_tmp11;
HXDLIN(  35)			if (!((aStart7 >= (bStart7 + bWidth7)))) {
HXLINE(  35)				_hx_tmp11 = (bStart7 >= (aStart7 + aWidth7));
            			}
            			else {
HXLINE(  35)				_hx_tmp11 = true;
            			}
HXDLIN(  35)			_hx_tmp9 = !(_hx_tmp11);
            		}
            		else {
HXLINE(  35)			_hx_tmp9 = false;
            		}
HXDLIN(  35)		this->assertTrue(_hx_tmp9,hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),35,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRectIntersect",69,0b,46,34)));
HXLINE(  36)		Bool _hx_tmp12;
HXDLIN(  36)		HX_VARI_NAME( Float,aStart8,"aStart") = b->x;
HXDLIN(  36)		HX_VARI_NAME( Float,aWidth8,"aWidth") = b->width;
HXDLIN(  36)		HX_VARI_NAME( Float,bStart8,"bStart") = e->x;
HXDLIN(  36)		HX_VARI_NAME( Float,bWidth8,"bWidth") = e->width;
HXDLIN(  36)		Bool _hx_tmp13;
HXDLIN(  36)		if (!((aStart8 >= (bStart8 + bWidth8)))) {
HXLINE(  36)			_hx_tmp13 = (bStart8 >= (aStart8 + aWidth8));
            		}
            		else {
HXLINE(  36)			_hx_tmp13 = true;
            		}
HXDLIN(  36)		if (!(_hx_tmp13)) {
HXLINE(  36)			HX_VARI_NAME( Float,aStart9,"aStart") = b->y;
HXDLIN(  36)			HX_VARI_NAME( Float,aWidth9,"aWidth") = b->height;
HXDLIN(  36)			HX_VARI_NAME( Float,bStart9,"bStart") = e->y;
HXDLIN(  36)			HX_VARI_NAME( Float,bWidth9,"bWidth") = e->height;
HXDLIN(  36)			Bool _hx_tmp14;
HXDLIN(  36)			if (!((aStart9 >= (bStart9 + bWidth9)))) {
HXLINE(  36)				_hx_tmp14 = (bStart9 >= (aStart9 + aWidth9));
            			}
            			else {
HXLINE(  36)				_hx_tmp14 = true;
            			}
HXDLIN(  36)			_hx_tmp12 = !(_hx_tmp14);
            		}
            		else {
HXLINE(  36)			_hx_tmp12 = false;
            		}
HXDLIN(  36)		this->assertTrue(_hx_tmp12,hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),36,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRectIntersect",69,0b,46,34)));
HXLINE(  37)		Bool _hx_tmp15;
HXDLIN(  37)		HX_VARI_NAME( Float,aStart10,"aStart") = c->x;
HXDLIN(  37)		HX_VARI_NAME( Float,aWidth10,"aWidth") = c->width;
HXDLIN(  37)		HX_VARI_NAME( Float,bStart10,"bStart") = e->x;
HXDLIN(  37)		HX_VARI_NAME( Float,bWidth10,"bWidth") = e->width;
HXDLIN(  37)		Bool _hx_tmp16;
HXDLIN(  37)		if (!((aStart10 >= (bStart10 + bWidth10)))) {
HXLINE(  37)			_hx_tmp16 = (bStart10 >= (aStart10 + aWidth10));
            		}
            		else {
HXLINE(  37)			_hx_tmp16 = true;
            		}
HXDLIN(  37)		if (!(_hx_tmp16)) {
HXLINE(  37)			HX_VARI_NAME( Float,aStart11,"aStart") = c->y;
HXDLIN(  37)			HX_VARI_NAME( Float,aWidth11,"aWidth") = c->height;
HXDLIN(  37)			HX_VARI_NAME( Float,bStart11,"bStart") = e->y;
HXDLIN(  37)			HX_VARI_NAME( Float,bWidth11,"bWidth") = e->height;
HXDLIN(  37)			Bool _hx_tmp17;
HXDLIN(  37)			if (!((aStart11 >= (bStart11 + bWidth11)))) {
HXLINE(  37)				_hx_tmp17 = (bStart11 >= (aStart11 + aWidth11));
            			}
            			else {
HXLINE(  37)				_hx_tmp17 = true;
            			}
HXDLIN(  37)			_hx_tmp15 = !(_hx_tmp17);
            		}
            		else {
HXLINE(  37)			_hx_tmp15 = false;
            		}
HXDLIN(  37)		this->assertTrue(_hx_tmp15,hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),37,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRectIntersect",69,0b,46,34)));
HXLINE(  38)		Bool _hx_tmp18;
HXDLIN(  38)		HX_VARI_NAME( Float,aStart12,"aStart") = d->x;
HXDLIN(  38)		HX_VARI_NAME( Float,aWidth12,"aWidth") = d->width;
HXDLIN(  38)		HX_VARI_NAME( Float,bStart12,"bStart") = e->x;
HXDLIN(  38)		HX_VARI_NAME( Float,bWidth12,"bWidth") = e->width;
HXDLIN(  38)		Bool _hx_tmp19;
HXDLIN(  38)		if (!((aStart12 >= (bStart12 + bWidth12)))) {
HXLINE(  38)			_hx_tmp19 = (bStart12 >= (aStart12 + aWidth12));
            		}
            		else {
HXLINE(  38)			_hx_tmp19 = true;
            		}
HXDLIN(  38)		if (!(_hx_tmp19)) {
HXLINE(  38)			HX_VARI_NAME( Float,aStart13,"aStart") = d->y;
HXDLIN(  38)			HX_VARI_NAME( Float,aWidth13,"aWidth") = d->height;
HXDLIN(  38)			HX_VARI_NAME( Float,bStart13,"bStart") = e->y;
HXDLIN(  38)			HX_VARI_NAME( Float,bWidth13,"bWidth") = e->height;
HXDLIN(  38)			Bool _hx_tmp20;
HXDLIN(  38)			if (!((aStart13 >= (bStart13 + bWidth13)))) {
HXLINE(  38)				_hx_tmp20 = (bStart13 >= (aStart13 + aWidth13));
            			}
            			else {
HXLINE(  38)				_hx_tmp20 = true;
            			}
HXDLIN(  38)			_hx_tmp18 = !(_hx_tmp20);
            		}
            		else {
HXLINE(  38)			_hx_tmp18 = false;
            		}
HXDLIN(  38)		this->assertTrue(_hx_tmp18,hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),38,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRectIntersect",69,0b,46,34)));
HXLINE(  41)		HX_VARI(  ::hxmath::geom::Rect,contained) =  ::hxmath::geom::Rect_obj::__new(((Float)0.25),((Float)0.25),((Float)0.5),((Float)0.5));
HXLINE(  42)		Bool _hx_tmp21;
HXDLIN(  42)		HX_VARI_NAME( Float,aStart14,"aStart") = a->x;
HXDLIN(  42)		HX_VARI_NAME( Float,aWidth14,"aWidth") = a->width;
HXDLIN(  42)		HX_VARI_NAME( Float,bStart14,"bStart") = contained->x;
HXDLIN(  42)		HX_VARI_NAME( Float,bWidth14,"bWidth") = contained->width;
HXDLIN(  42)		Bool _hx_tmp22;
HXDLIN(  42)		if (!((aStart14 >= (bStart14 + bWidth14)))) {
HXLINE(  42)			_hx_tmp22 = (bStart14 >= (aStart14 + aWidth14));
            		}
            		else {
HXLINE(  42)			_hx_tmp22 = true;
            		}
HXDLIN(  42)		if (!(_hx_tmp22)) {
HXLINE(  42)			HX_VARI_NAME( Float,aStart15,"aStart") = a->y;
HXDLIN(  42)			HX_VARI_NAME( Float,aWidth15,"aWidth") = a->height;
HXDLIN(  42)			HX_VARI_NAME( Float,bStart15,"bStart") = contained->y;
HXDLIN(  42)			HX_VARI_NAME( Float,bWidth15,"bWidth") = contained->height;
HXDLIN(  42)			Bool _hx_tmp23;
HXDLIN(  42)			if (!((aStart15 >= (bStart15 + bWidth15)))) {
HXLINE(  42)				_hx_tmp23 = (bStart15 >= (aStart15 + aWidth15));
            			}
            			else {
HXLINE(  42)				_hx_tmp23 = true;
            			}
HXDLIN(  42)			_hx_tmp21 = !(_hx_tmp23);
            		}
            		else {
HXLINE(  42)			_hx_tmp21 = false;
            		}
HXDLIN(  42)		this->assertTrue(_hx_tmp21,hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),42,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRectIntersect",69,0b,46,34)));
HXLINE(  43)		Bool _hx_tmp24;
HXDLIN(  43)		HX_VARI_NAME( Float,aStart16,"aStart") = contained->x;
HXDLIN(  43)		HX_VARI_NAME( Float,aWidth16,"aWidth") = contained->width;
HXDLIN(  43)		HX_VARI_NAME( Float,bStart16,"bStart") = a->x;
HXDLIN(  43)		HX_VARI_NAME( Float,bWidth16,"bWidth") = a->width;
HXDLIN(  43)		Bool _hx_tmp25;
HXDLIN(  43)		if (!((aStart16 >= (bStart16 + bWidth16)))) {
HXLINE(  43)			_hx_tmp25 = (bStart16 >= (aStart16 + aWidth16));
            		}
            		else {
HXLINE(  43)			_hx_tmp25 = true;
            		}
HXDLIN(  43)		if (!(_hx_tmp25)) {
HXLINE(  43)			HX_VARI_NAME( Float,aStart17,"aStart") = contained->y;
HXDLIN(  43)			HX_VARI_NAME( Float,aWidth17,"aWidth") = contained->height;
HXDLIN(  43)			HX_VARI_NAME( Float,bStart17,"bStart") = a->y;
HXDLIN(  43)			HX_VARI_NAME( Float,bWidth17,"bWidth") = a->height;
HXDLIN(  43)			Bool _hx_tmp26;
HXDLIN(  43)			if (!((aStart17 >= (bStart17 + bWidth17)))) {
HXLINE(  43)				_hx_tmp26 = (bStart17 >= (aStart17 + aWidth17));
            			}
            			else {
HXLINE(  43)				_hx_tmp26 = true;
            			}
HXDLIN(  43)			_hx_tmp24 = !(_hx_tmp26);
            		}
            		else {
HXLINE(  43)			_hx_tmp24 = false;
            		}
HXDLIN(  43)		this->assertTrue(_hx_tmp24,hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),43,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRectIntersect",69,0b,46,34)));
HXLINE(  46)		HX_VARI(  ::hxmath::geom::Rect,straddling) =  ::hxmath::geom::Rect_obj::__new(((Float)0.25),((Float)0.25),((Float)1.0),((Float)0.5));
HXLINE(  47)		Bool _hx_tmp27;
HXDLIN(  47)		HX_VARI_NAME( Float,aStart18,"aStart") = a->x;
HXDLIN(  47)		HX_VARI_NAME( Float,aWidth18,"aWidth") = a->width;
HXDLIN(  47)		HX_VARI_NAME( Float,bStart18,"bStart") = straddling->x;
HXDLIN(  47)		HX_VARI_NAME( Float,bWidth18,"bWidth") = straddling->width;
HXDLIN(  47)		Bool _hx_tmp28;
HXDLIN(  47)		if (!((aStart18 >= (bStart18 + bWidth18)))) {
HXLINE(  47)			_hx_tmp28 = (bStart18 >= (aStart18 + aWidth18));
            		}
            		else {
HXLINE(  47)			_hx_tmp28 = true;
            		}
HXDLIN(  47)		if (!(_hx_tmp28)) {
HXLINE(  47)			HX_VARI_NAME( Float,aStart19,"aStart") = a->y;
HXDLIN(  47)			HX_VARI_NAME( Float,aWidth19,"aWidth") = a->height;
HXDLIN(  47)			HX_VARI_NAME( Float,bStart19,"bStart") = straddling->y;
HXDLIN(  47)			HX_VARI_NAME( Float,bWidth19,"bWidth") = straddling->height;
HXDLIN(  47)			Bool _hx_tmp29;
HXDLIN(  47)			if (!((aStart19 >= (bStart19 + bWidth19)))) {
HXLINE(  47)				_hx_tmp29 = (bStart19 >= (aStart19 + aWidth19));
            			}
            			else {
HXLINE(  47)				_hx_tmp29 = true;
            			}
HXDLIN(  47)			_hx_tmp27 = !(_hx_tmp29);
            		}
            		else {
HXLINE(  47)			_hx_tmp27 = false;
            		}
HXDLIN(  47)		this->assertTrue(_hx_tmp27,hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),47,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRectIntersect",69,0b,46,34)));
HXLINE(  48)		Bool _hx_tmp30;
HXDLIN(  48)		HX_VARI_NAME( Float,aStart20,"aStart") = straddling->x;
HXDLIN(  48)		HX_VARI_NAME( Float,aWidth20,"aWidth") = straddling->width;
HXDLIN(  48)		HX_VARI_NAME( Float,bStart20,"bStart") = a->x;
HXDLIN(  48)		HX_VARI_NAME( Float,bWidth20,"bWidth") = a->width;
HXDLIN(  48)		Bool _hx_tmp31;
HXDLIN(  48)		if (!((aStart20 >= (bStart20 + bWidth20)))) {
HXLINE(  48)			_hx_tmp31 = (bStart20 >= (aStart20 + aWidth20));
            		}
            		else {
HXLINE(  48)			_hx_tmp31 = true;
            		}
HXDLIN(  48)		if (!(_hx_tmp31)) {
HXLINE(  48)			HX_VARI_NAME( Float,aStart21,"aStart") = straddling->y;
HXDLIN(  48)			HX_VARI_NAME( Float,aWidth21,"aWidth") = straddling->height;
HXDLIN(  48)			HX_VARI_NAME( Float,bStart21,"bStart") = a->y;
HXDLIN(  48)			HX_VARI_NAME( Float,bWidth21,"bWidth") = a->height;
HXDLIN(  48)			Bool _hx_tmp32;
HXDLIN(  48)			if (!((aStart21 >= (bStart21 + bWidth21)))) {
HXLINE(  48)				_hx_tmp32 = (bStart21 >= (aStart21 + aWidth21));
            			}
            			else {
HXLINE(  48)				_hx_tmp32 = true;
            			}
HXDLIN(  48)			_hx_tmp30 = !(_hx_tmp32);
            		}
            		else {
HXLINE(  48)			_hx_tmp30 = false;
            		}
HXDLIN(  48)		this->assertTrue(_hx_tmp30,hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),48,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRectIntersect",69,0b,46,34)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestGeom_obj,testRectIntersect,(void))

void TestGeom_obj::testRectMatrixConversion(){
            	HX_STACK_FRAME("test.TestGeom","testRectMatrixConversion",0x595d2071,"test.TestGeom.testRectMatrixConversion","test/TestGeom.hx",52,0x1a26c2b3)
            	HX_STACK_THIS(this)
HXLINE(  53)		HX_VARI(  ::hxmath::math::Matrix3x2Default,m) = this->randomMatrix3x2(null());
HXLINE(  56)		m->a = ::Math_obj::abs(m->a);
HXLINE(  57)		m->b = ((Float)0.0);
HXLINE(  58)		m->c = ((Float)0.0);
HXLINE(  59)		m->d = ::Math_obj::abs(m->d);
HXLINE(  62)		Bool _hx_tmp = (m->a < ((Float)1e-6));
HXDLIN(  62)		if (_hx_tmp) {
HXLINE(  64)			hx::AddEq(m->a,((Float)1.0));
            		}
HXLINE(  67)		Bool _hx_tmp1 = (m->d < ((Float)1e-6));
HXDLIN(  67)		if (_hx_tmp1) {
HXLINE(  69)			hx::AddEq(m->d,((Float)1.0));
            		}
HXLINE(  73)		HX_VARI(  ::hxmath::math::Matrix2x2Default,self) =  ::hxmath::math::Matrix2x2Default_obj::__new(m->a,m->b,m->c,m->d);
HXDLIN(  73)		HX_VARI( Float,matrixArea) = ((self->a * self->d) - (self->b * self->c));
HXLINE(  75)		HX_VARI(  ::hxmath::geom::Rect,rect) =  ::hxmath::geom::Rect_obj::__new(m->tx,m->ty,m->a,m->d);
HXLINE(  76)		Float _hx_tmp2 = (rect->width * rect->height);
HXDLIN(  76)		this->assertEquals(matrixArea,_hx_tmp2,hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),76,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRectMatrixConversion",6d,83,9f,eb)));
HXLINE(  77)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,m1,"m") =  ::hxmath::math::Matrix3x2Default_obj::__new(rect->width,((Float)0.0),((Float)0.0),rect->height,rect->x,rect->y);
HXDLIN(  77)		Bool _hx_tmp3;
HXDLIN(  77)		Bool _hx_tmp4;
HXDLIN(  77)		if (hx::IsNull( m1 )) {
HXLINE(  77)			_hx_tmp4 = hx::IsNull( m );
            		}
            		else {
HXLINE(  77)			_hx_tmp4 = false;
            		}
HXDLIN(  77)		if (!(_hx_tmp4)) {
HXLINE(  77)			Bool _hx_tmp5;
HXDLIN(  77)			Bool _hx_tmp6;
HXDLIN(  77)			Bool _hx_tmp7;
HXDLIN(  77)			Bool _hx_tmp8;
HXDLIN(  77)			Bool _hx_tmp9;
HXDLIN(  77)			Bool _hx_tmp10;
HXDLIN(  77)			if (hx::IsNotNull( m1 )) {
HXLINE(  77)				_hx_tmp10 = hx::IsNotNull( m );
            			}
            			else {
HXLINE(  77)				_hx_tmp10 = false;
            			}
HXDLIN(  77)			if (_hx_tmp10) {
HXLINE(  77)				_hx_tmp9 = (m1->a == m->a);
            			}
            			else {
HXLINE(  77)				_hx_tmp9 = false;
            			}
HXDLIN(  77)			if (_hx_tmp9) {
HXLINE(  77)				_hx_tmp8 = (m1->b == m->b);
            			}
            			else {
HXLINE(  77)				_hx_tmp8 = false;
            			}
HXDLIN(  77)			if (_hx_tmp8) {
HXLINE(  77)				_hx_tmp7 = (m1->c == m->c);
            			}
            			else {
HXLINE(  77)				_hx_tmp7 = false;
            			}
HXDLIN(  77)			if (_hx_tmp7) {
HXLINE(  77)				_hx_tmp6 = (m1->d == m->d);
            			}
            			else {
HXLINE(  77)				_hx_tmp6 = false;
            			}
HXDLIN(  77)			if (_hx_tmp6) {
HXLINE(  77)				_hx_tmp5 = (m1->tx == m->tx);
            			}
            			else {
HXLINE(  77)				_hx_tmp5 = false;
            			}
HXDLIN(  77)			if (_hx_tmp5) {
HXLINE(  77)				_hx_tmp3 = (m1->ty == m->ty);
            			}
            			else {
HXLINE(  77)				_hx_tmp3 = false;
            			}
            		}
            		else {
HXLINE(  77)			_hx_tmp3 = true;
            		}
HXDLIN(  77)		this->assertTrue(_hx_tmp3,hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),77,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRectMatrixConversion",6d,83,9f,eb)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestGeom_obj,testRectMatrixConversion,(void))

void TestGeom_obj::testRectTwoPointConstruction(){
            	HX_STACK_FRAME("test.TestGeom","testRectTwoPointConstruction",0x3c00e80f,"test.TestGeom.testRectTwoPointConstruction","test/TestGeom.hx",81,0x1a26c2b3)
            	HX_STACK_THIS(this)
HXLINE(  82)		HX_VARI(  ::hxmath::math::Vector2Default,zero) =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)0.0));
HXLINE(  83)		HX_VARI(  ::hxmath::math::Vector2Default,one) =  ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)1.0));
HXLINE(  85)		Float _hx_tmp = ::Math_obj::min(zero->x,one->x);
HXDLIN(  85)		Float _hx_tmp1 = ::Math_obj::min(zero->y,one->y);
HXDLIN(  85)		Float _hx_tmp2 = (one->x - zero->x);
HXDLIN(  85)		Float _hx_tmp3 = ::Math_obj::abs(_hx_tmp2);
HXDLIN(  85)		Float _hx_tmp4 = (one->y - zero->y);
HXDLIN(  85)		Float _hx_tmp5 = ::Math_obj::abs(_hx_tmp4);
HXDLIN(  85)		HX_VARI(  ::hxmath::geom::Rect,_this) =  ::hxmath::geom::Rect_obj::__new(_hx_tmp,_hx_tmp1,_hx_tmp3,_hx_tmp5);
HXDLIN(  85)		Float _hx_tmp6 = (_this->width * _this->height);
HXDLIN(  85)		this->assertEquals(((Float)1.0),_hx_tmp6,hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),85,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRectTwoPointConstruction",0b,79,16,75)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestGeom_obj,testRectTwoPointConstruction,(void))

void TestGeom_obj::testRectContainsPoint(){
            	HX_STACK_FRAME("test.TestGeom","testRectContainsPoint",0x5a05a9b7,"test.TestGeom.testRectContainsPoint","test/TestGeom.hx",89,0x1a26c2b3)
            	HX_STACK_THIS(this)
HXLINE(  90)		HX_VARI(  ::hxmath::geom::Rect,rect) =  ::hxmath::geom::Rect_obj::__new(((Float)0.5),((Float)0.5),((Float)1.0),((Float)1.0));
HXLINE(  92)		{
HXLINE(  92)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  92)			while((_g < (int)4)){
HXLINE(  92)				HX_VARI( Int,i) = _g++;
HXLINE(  95)				HX_VARI(  ::hxmath::math::Vector2Default,v) =  ::hxmath::math::Vector2Default_obj::__new(rect->x,rect->y);
HXDLIN(  95)				switch((int)(i)){
            					case (int)0: {
            					}
            					break;
            					case (int)1: {
HXLINE(  95)						hx::AddEq(v->x,rect->width);
            					}
            					break;
            					case (int)2: {
HXLINE(  95)						hx::AddEq(v->x,rect->width);
HXDLIN(  95)						hx::AddEq(v->y,rect->height);
            					}
            					break;
            					case (int)3: {
HXLINE(  95)						hx::AddEq(v->y,rect->height);
            					}
            					break;
            					default:{
HXLINE(  95)						HX_STACK_DO_THROW(HX_("Invalid vertex index.",0f,1f,26,5a));
            					}
            				}
HXLINE(  96)				Bool _hx_tmp;
HXDLIN(  96)				HX_VARI( Float,aStart) = rect->x;
HXDLIN(  96)				HX_VARI( Float,aWidth) = rect->width;
HXDLIN(  96)				HX_VARI( Float,x) = v->x;
HXDLIN(  96)				Bool _hx_tmp1;
HXDLIN(  96)				if ((x >= aStart)) {
HXLINE(  96)					_hx_tmp1 = (x <= (aStart + aWidth));
            				}
            				else {
HXLINE(  96)					_hx_tmp1 = false;
            				}
HXDLIN(  96)				if (_hx_tmp1) {
HXLINE(  96)					HX_VARI_NAME( Float,aStart1,"aStart") = rect->y;
HXDLIN(  96)					HX_VARI_NAME( Float,aWidth1,"aWidth") = rect->height;
HXDLIN(  96)					HX_VARI_NAME( Float,x1,"x") = v->y;
HXDLIN(  96)					if ((x1 >= aStart1)) {
HXLINE(  96)						_hx_tmp = (x1 <= (aStart1 + aWidth1));
            					}
            					else {
HXLINE(  96)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE(  96)					_hx_tmp = false;
            				}
HXDLIN(  96)				this->assertTrue(_hx_tmp,hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),96,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRectContainsPoint",3b,d1,55,b8)));
HXLINE(  99)				HX_VARI(  ::hxmath::math::Vector2Default,b) =  ::hxmath::math::Vector2Default_obj::__new((rect->x + (((Float)0.5) * rect->width)),(rect->y + (((Float)0.5) * rect->height)));
HXDLIN(  99)				HX_VARI(  ::hxmath::math::Vector2Default,self) =  ::hxmath::math::Vector2Default_obj::__new(v->x,v->y);
HXDLIN(  99)				hx::SubEq(self->x,b->x);
HXDLIN(  99)				hx::SubEq(self->y,b->y);
HXDLIN(  99)				HX_VARI_NAME(  ::hxmath::math::Vector2Default,self1,"self") =  ::hxmath::math::Vector2Default_obj::__new(self->x,self->y);
HXDLIN(  99)				hx::MultEq(self1->x,((Float)1.1));
HXDLIN(  99)				hx::MultEq(self1->y,((Float)1.1));
HXDLIN(  99)				HX_VARI_NAME(  ::hxmath::math::Vector2Default,b1,"b") =  ::hxmath::math::Vector2Default_obj::__new((rect->x + (((Float)0.5) * rect->width)),(rect->y + (((Float)0.5) * rect->height)));
HXDLIN(  99)				HX_VARI_NAME(  ::hxmath::math::Vector2Default,self2,"self") =  ::hxmath::math::Vector2Default_obj::__new(self1->x,self1->y);
HXDLIN(  99)				hx::AddEq(self2->x,b1->x);
HXDLIN(  99)				hx::AddEq(self2->y,b1->y);
HXLINE( 100)				Bool _hx_tmp2;
HXDLIN( 100)				HX_VARI_NAME( Float,aStart2,"aStart") = rect->x;
HXDLIN( 100)				HX_VARI_NAME( Float,aWidth2,"aWidth") = rect->width;
HXDLIN( 100)				HX_VARI_NAME( Float,x2,"x") = self2->x;
HXDLIN( 100)				Bool _hx_tmp3;
HXDLIN( 100)				if ((x2 >= aStart2)) {
HXLINE( 100)					_hx_tmp3 = (x2 <= (aStart2 + aWidth2));
            				}
            				else {
HXLINE( 100)					_hx_tmp3 = false;
            				}
HXDLIN( 100)				if (_hx_tmp3) {
HXLINE( 100)					HX_VARI_NAME( Float,aStart3,"aStart") = rect->y;
HXDLIN( 100)					HX_VARI_NAME( Float,aWidth3,"aWidth") = rect->height;
HXDLIN( 100)					HX_VARI_NAME( Float,x3,"x") = self2->y;
HXDLIN( 100)					if ((x3 >= aStart3)) {
HXLINE( 100)						_hx_tmp2 = (x3 <= (aStart3 + aWidth3));
            					}
            					else {
HXLINE( 100)						_hx_tmp2 = false;
            					}
            				}
            				else {
HXLINE( 100)					_hx_tmp2 = false;
            				}
HXDLIN( 100)				this->assertFalse(_hx_tmp2,hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),100,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRectContainsPoint",3b,d1,55,b8)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestGeom_obj,testRectContainsPoint,(void))

void TestGeom_obj::testRectIntersectOverlapping(){
            	HX_STACK_FRAME("test.TestGeom","testRectIntersectOverlapping",0x712ed794,"test.TestGeom.testRectIntersectOverlapping","test/TestGeom.hx",106,0x1a26c2b3)
            	HX_STACK_THIS(this)
HXLINE( 106)		return;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestGeom_obj,testRectIntersectOverlapping,(void))

void TestGeom_obj::testRectIntersectContaining(){
            	HX_STACK_FRAME("test.TestGeom","testRectIntersectContaining",0x7d6a53d3,"test.TestGeom.testRectIntersectContaining","test/TestGeom.hx",132,0x1a26c2b3)
            	HX_STACK_THIS(this)
HXLINE( 141)		HX_VARI(  ::hxmath::geom::Rect,outer) =  ::hxmath::geom::Rect_obj::__new(((Float)0.0),((Float)0.0),((Float)1.0),((Float)1.0));
HXLINE( 143)		HX_VARI(  ::hxmath::geom::Rect,inner) =  ::hxmath::geom::Rect_obj::__new(((Float)0.25),((Float)0.25),((Float)0.5),((Float)0.5));
HXLINE( 144)		HX_VARI(  ::hxmath::geom::Rect,innerLeft) =  ::hxmath::geom::Rect_obj::__new(((Float)0.0),((Float)0.25),((Float)0.25),((Float)0.5));
HXLINE( 145)		HX_VARI(  ::hxmath::geom::Rect,innerRight) =  ::hxmath::geom::Rect_obj::__new(((Float)0.75),((Float)0.25),((Float)0.25),((Float)0.5));
HXLINE( 147)		HX_VARI(  ::hxmath::geom::Rect,left) =  ::hxmath::geom::Rect_obj::__new(((Float)-0.25),((Float)0.25),((Float)0.5),((Float)0.5));
HXLINE( 148)		HX_VARI(  ::hxmath::geom::Rect,right) =  ::hxmath::geom::Rect_obj::__new(((Float)0.75),((Float)0.25),((Float)0.5),((Float)0.5));
HXLINE( 150)		HX_VARI(  ::hxmath::geom::Rect,_this) =  ::hxmath::geom::Rect_obj::__new(outer->x,outer->y,outer->width,outer->height);
HXDLIN( 150)		Bool _hx_tmp = (_this->x < inner->x);
HXDLIN( 150)		if (_hx_tmp) {
HXLINE( 150)			hx::SubEq(_this->width,(inner->x - _this->x));
HXDLIN( 150)			_this->x = inner->x;
            		}
HXDLIN( 150)		Bool _hx_tmp1 = (_this->y < inner->y);
HXDLIN( 150)		if (_hx_tmp1) {
HXLINE( 150)			hx::SubEq(_this->height,(inner->y - _this->y));
HXDLIN( 150)			_this->y = inner->y;
            		}
HXDLIN( 150)		Bool _hx_tmp2 = ((_this->x + _this->width) > (inner->x + inner->width));
HXDLIN( 150)		if (_hx_tmp2) {
HXLINE( 150)			Float _hx_tmp3 = (_this->x + _this->width);
HXDLIN( 150)			Float _hx_tmp4 = (inner->x + inner->width);
HXDLIN( 150)			hx::SubEq(_this->width,(_hx_tmp3 - _hx_tmp4));
            		}
HXDLIN( 150)		Bool _hx_tmp5 = ((_this->y + _this->height) > (inner->y + inner->height));
HXDLIN( 150)		if (_hx_tmp5) {
HXLINE( 150)			Float _hx_tmp6 = (_this->y + _this->height);
HXDLIN( 150)			Float _hx_tmp7 = (inner->y + inner->height);
HXDLIN( 150)			hx::SubEq(_this->height,(_hx_tmp6 - _hx_tmp7));
            		}
HXDLIN( 150)		Bool _hx_tmp8;
HXDLIN( 150)		Bool _hx_tmp9;
HXDLIN( 150)		Bool _hx_tmp10;
HXDLIN( 150)		Bool _hx_tmp11;
HXDLIN( 150)		if (hx::IsNotNull( inner )) {
HXLINE( 150)			_hx_tmp11 = (_this->x == inner->x);
            		}
            		else {
HXLINE( 150)			_hx_tmp11 = false;
            		}
HXDLIN( 150)		if (_hx_tmp11) {
HXLINE( 150)			_hx_tmp10 = (_this->y == inner->y);
            		}
            		else {
HXLINE( 150)			_hx_tmp10 = false;
            		}
HXDLIN( 150)		if (_hx_tmp10) {
HXLINE( 150)			_hx_tmp9 = (_this->width == inner->width);
            		}
            		else {
HXLINE( 150)			_hx_tmp9 = false;
            		}
HXDLIN( 150)		if (_hx_tmp9) {
HXLINE( 150)			_hx_tmp8 = (_this->height == inner->height);
            		}
            		else {
HXLINE( 150)			_hx_tmp8 = false;
            		}
HXDLIN( 150)		this->assertTrue(_hx_tmp8,hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),150,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRectIntersectContaining",57,f6,e2,ad)));
HXLINE( 152)		HX_VARI_NAME(  ::hxmath::geom::Rect,_this1,"_this") =  ::hxmath::geom::Rect_obj::__new(inner->x,inner->y,inner->width,inner->height);
HXDLIN( 152)		Bool _hx_tmp12 = (_this1->x < outer->x);
HXDLIN( 152)		if (_hx_tmp12) {
HXLINE( 152)			hx::SubEq(_this1->width,(outer->x - _this1->x));
HXDLIN( 152)			_this1->x = outer->x;
            		}
HXDLIN( 152)		Bool _hx_tmp13 = (_this1->y < outer->y);
HXDLIN( 152)		if (_hx_tmp13) {
HXLINE( 152)			hx::SubEq(_this1->height,(outer->y - _this1->y));
HXDLIN( 152)			_this1->y = outer->y;
            		}
HXDLIN( 152)		Bool _hx_tmp14 = ((_this1->x + _this1->width) > (outer->x + outer->width));
HXDLIN( 152)		if (_hx_tmp14) {
HXLINE( 152)			Float _hx_tmp15 = (_this1->x + _this1->width);
HXDLIN( 152)			Float _hx_tmp16 = (outer->x + outer->width);
HXDLIN( 152)			hx::SubEq(_this1->width,(_hx_tmp15 - _hx_tmp16));
            		}
HXDLIN( 152)		Bool _hx_tmp17 = ((_this1->y + _this1->height) > (outer->y + outer->height));
HXDLIN( 152)		if (_hx_tmp17) {
HXLINE( 152)			Float _hx_tmp18 = (_this1->y + _this1->height);
HXDLIN( 152)			Float _hx_tmp19 = (outer->y + outer->height);
HXDLIN( 152)			hx::SubEq(_this1->height,(_hx_tmp18 - _hx_tmp19));
            		}
HXDLIN( 152)		Bool _hx_tmp20;
HXDLIN( 152)		Bool _hx_tmp21;
HXDLIN( 152)		Bool _hx_tmp22;
HXDLIN( 152)		Bool _hx_tmp23;
HXDLIN( 152)		if (hx::IsNotNull( inner )) {
HXLINE( 152)			_hx_tmp23 = (_this1->x == inner->x);
            		}
            		else {
HXLINE( 152)			_hx_tmp23 = false;
            		}
HXDLIN( 152)		if (_hx_tmp23) {
HXLINE( 152)			_hx_tmp22 = (_this1->y == inner->y);
            		}
            		else {
HXLINE( 152)			_hx_tmp22 = false;
            		}
HXDLIN( 152)		if (_hx_tmp22) {
HXLINE( 152)			_hx_tmp21 = (_this1->width == inner->width);
            		}
            		else {
HXLINE( 152)			_hx_tmp21 = false;
            		}
HXDLIN( 152)		if (_hx_tmp21) {
HXLINE( 152)			_hx_tmp20 = (_this1->height == inner->height);
            		}
            		else {
HXLINE( 152)			_hx_tmp20 = false;
            		}
HXDLIN( 152)		this->assertTrue(_hx_tmp20,hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),152,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRectIntersectContaining",57,f6,e2,ad)));
HXLINE( 156)		HX_VARI_NAME(  ::hxmath::geom::Rect,_this2,"_this") =  ::hxmath::geom::Rect_obj::__new(outer->x,outer->y,outer->width,outer->height);
HXDLIN( 156)		Bool _hx_tmp24 = (_this2->x < left->x);
HXDLIN( 156)		if (_hx_tmp24) {
HXLINE( 156)			hx::SubEq(_this2->width,(left->x - _this2->x));
HXDLIN( 156)			_this2->x = left->x;
            		}
HXDLIN( 156)		Bool _hx_tmp25 = (_this2->y < left->y);
HXDLIN( 156)		if (_hx_tmp25) {
HXLINE( 156)			hx::SubEq(_this2->height,(left->y - _this2->y));
HXDLIN( 156)			_this2->y = left->y;
            		}
HXDLIN( 156)		Bool _hx_tmp26 = ((_this2->x + _this2->width) > (left->x + left->width));
HXDLIN( 156)		if (_hx_tmp26) {
HXLINE( 156)			Float _hx_tmp27 = (_this2->x + _this2->width);
HXDLIN( 156)			Float _hx_tmp28 = (left->x + left->width);
HXDLIN( 156)			hx::SubEq(_this2->width,(_hx_tmp27 - _hx_tmp28));
            		}
HXDLIN( 156)		Bool _hx_tmp29 = ((_this2->y + _this2->height) > (left->y + left->height));
HXDLIN( 156)		if (_hx_tmp29) {
HXLINE( 156)			Float _hx_tmp30 = (_this2->y + _this2->height);
HXDLIN( 156)			Float _hx_tmp31 = (left->y + left->height);
HXDLIN( 156)			hx::SubEq(_this2->height,(_hx_tmp30 - _hx_tmp31));
            		}
HXDLIN( 156)		Bool _hx_tmp32;
HXDLIN( 156)		Bool _hx_tmp33;
HXDLIN( 156)		Bool _hx_tmp34;
HXDLIN( 156)		Bool _hx_tmp35;
HXDLIN( 156)		if (hx::IsNotNull( innerLeft )) {
HXLINE( 156)			_hx_tmp35 = (_this2->x == innerLeft->x);
            		}
            		else {
HXLINE( 156)			_hx_tmp35 = false;
            		}
HXDLIN( 156)		if (_hx_tmp35) {
HXLINE( 156)			_hx_tmp34 = (_this2->y == innerLeft->y);
            		}
            		else {
HXLINE( 156)			_hx_tmp34 = false;
            		}
HXDLIN( 156)		if (_hx_tmp34) {
HXLINE( 156)			_hx_tmp33 = (_this2->width == innerLeft->width);
            		}
            		else {
HXLINE( 156)			_hx_tmp33 = false;
            		}
HXDLIN( 156)		if (_hx_tmp33) {
HXLINE( 156)			_hx_tmp32 = (_this2->height == innerLeft->height);
            		}
            		else {
HXLINE( 156)			_hx_tmp32 = false;
            		}
HXDLIN( 156)		this->assertTrue(_hx_tmp32,hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),156,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRectIntersectContaining",57,f6,e2,ad)));
HXLINE( 158)		HX_VARI_NAME(  ::hxmath::geom::Rect,_this3,"_this") =  ::hxmath::geom::Rect_obj::__new(left->x,left->y,left->width,left->height);
HXDLIN( 158)		Bool _hx_tmp36 = (_this3->x < outer->x);
HXDLIN( 158)		if (_hx_tmp36) {
HXLINE( 158)			hx::SubEq(_this3->width,(outer->x - _this3->x));
HXDLIN( 158)			_this3->x = outer->x;
            		}
HXDLIN( 158)		Bool _hx_tmp37 = (_this3->y < outer->y);
HXDLIN( 158)		if (_hx_tmp37) {
HXLINE( 158)			hx::SubEq(_this3->height,(outer->y - _this3->y));
HXDLIN( 158)			_this3->y = outer->y;
            		}
HXDLIN( 158)		Bool _hx_tmp38 = ((_this3->x + _this3->width) > (outer->x + outer->width));
HXDLIN( 158)		if (_hx_tmp38) {
HXLINE( 158)			Float _hx_tmp39 = (_this3->x + _this3->width);
HXDLIN( 158)			Float _hx_tmp40 = (outer->x + outer->width);
HXDLIN( 158)			hx::SubEq(_this3->width,(_hx_tmp39 - _hx_tmp40));
            		}
HXDLIN( 158)		Bool _hx_tmp41 = ((_this3->y + _this3->height) > (outer->y + outer->height));
HXDLIN( 158)		if (_hx_tmp41) {
HXLINE( 158)			Float _hx_tmp42 = (_this3->y + _this3->height);
HXDLIN( 158)			Float _hx_tmp43 = (outer->y + outer->height);
HXDLIN( 158)			hx::SubEq(_this3->height,(_hx_tmp42 - _hx_tmp43));
            		}
HXDLIN( 158)		Bool _hx_tmp44;
HXDLIN( 158)		Bool _hx_tmp45;
HXDLIN( 158)		Bool _hx_tmp46;
HXDLIN( 158)		Bool _hx_tmp47;
HXDLIN( 158)		if (hx::IsNotNull( innerLeft )) {
HXLINE( 158)			_hx_tmp47 = (_this3->x == innerLeft->x);
            		}
            		else {
HXLINE( 158)			_hx_tmp47 = false;
            		}
HXDLIN( 158)		if (_hx_tmp47) {
HXLINE( 158)			_hx_tmp46 = (_this3->y == innerLeft->y);
            		}
            		else {
HXLINE( 158)			_hx_tmp46 = false;
            		}
HXDLIN( 158)		if (_hx_tmp46) {
HXLINE( 158)			_hx_tmp45 = (_this3->width == innerLeft->width);
            		}
            		else {
HXLINE( 158)			_hx_tmp45 = false;
            		}
HXDLIN( 158)		if (_hx_tmp45) {
HXLINE( 158)			_hx_tmp44 = (_this3->height == innerLeft->height);
            		}
            		else {
HXLINE( 158)			_hx_tmp44 = false;
            		}
HXDLIN( 158)		this->assertTrue(_hx_tmp44,hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),158,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRectIntersectContaining",57,f6,e2,ad)));
HXLINE( 160)		HX_VARI_NAME(  ::hxmath::geom::Rect,_this4,"_this") =  ::hxmath::geom::Rect_obj::__new(outer->x,outer->y,outer->width,outer->height);
HXDLIN( 160)		Bool _hx_tmp48 = (_this4->x < right->x);
HXDLIN( 160)		if (_hx_tmp48) {
HXLINE( 160)			hx::SubEq(_this4->width,(right->x - _this4->x));
HXDLIN( 160)			_this4->x = right->x;
            		}
HXDLIN( 160)		Bool _hx_tmp49 = (_this4->y < right->y);
HXDLIN( 160)		if (_hx_tmp49) {
HXLINE( 160)			hx::SubEq(_this4->height,(right->y - _this4->y));
HXDLIN( 160)			_this4->y = right->y;
            		}
HXDLIN( 160)		Bool _hx_tmp50 = ((_this4->x + _this4->width) > (right->x + right->width));
HXDLIN( 160)		if (_hx_tmp50) {
HXLINE( 160)			Float _hx_tmp51 = (_this4->x + _this4->width);
HXDLIN( 160)			Float _hx_tmp52 = (right->x + right->width);
HXDLIN( 160)			hx::SubEq(_this4->width,(_hx_tmp51 - _hx_tmp52));
            		}
HXDLIN( 160)		Bool _hx_tmp53 = ((_this4->y + _this4->height) > (right->y + right->height));
HXDLIN( 160)		if (_hx_tmp53) {
HXLINE( 160)			Float _hx_tmp54 = (_this4->y + _this4->height);
HXDLIN( 160)			Float _hx_tmp55 = (right->y + right->height);
HXDLIN( 160)			hx::SubEq(_this4->height,(_hx_tmp54 - _hx_tmp55));
            		}
HXDLIN( 160)		Bool _hx_tmp56;
HXDLIN( 160)		Bool _hx_tmp57;
HXDLIN( 160)		Bool _hx_tmp58;
HXDLIN( 160)		Bool _hx_tmp59;
HXDLIN( 160)		if (hx::IsNotNull( innerRight )) {
HXLINE( 160)			_hx_tmp59 = (_this4->x == innerRight->x);
            		}
            		else {
HXLINE( 160)			_hx_tmp59 = false;
            		}
HXDLIN( 160)		if (_hx_tmp59) {
HXLINE( 160)			_hx_tmp58 = (_this4->y == innerRight->y);
            		}
            		else {
HXLINE( 160)			_hx_tmp58 = false;
            		}
HXDLIN( 160)		if (_hx_tmp58) {
HXLINE( 160)			_hx_tmp57 = (_this4->width == innerRight->width);
            		}
            		else {
HXLINE( 160)			_hx_tmp57 = false;
            		}
HXDLIN( 160)		if (_hx_tmp57) {
HXLINE( 160)			_hx_tmp56 = (_this4->height == innerRight->height);
            		}
            		else {
HXLINE( 160)			_hx_tmp56 = false;
            		}
HXDLIN( 160)		this->assertTrue(_hx_tmp56,hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),160,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRectIntersectContaining",57,f6,e2,ad)));
HXLINE( 162)		HX_VARI_NAME(  ::hxmath::geom::Rect,_this5,"_this") =  ::hxmath::geom::Rect_obj::__new(right->x,right->y,right->width,right->height);
HXDLIN( 162)		Bool _hx_tmp60 = (_this5->x < outer->x);
HXDLIN( 162)		if (_hx_tmp60) {
HXLINE( 162)			hx::SubEq(_this5->width,(outer->x - _this5->x));
HXDLIN( 162)			_this5->x = outer->x;
            		}
HXDLIN( 162)		Bool _hx_tmp61 = (_this5->y < outer->y);
HXDLIN( 162)		if (_hx_tmp61) {
HXLINE( 162)			hx::SubEq(_this5->height,(outer->y - _this5->y));
HXDLIN( 162)			_this5->y = outer->y;
            		}
HXDLIN( 162)		Bool _hx_tmp62 = ((_this5->x + _this5->width) > (outer->x + outer->width));
HXDLIN( 162)		if (_hx_tmp62) {
HXLINE( 162)			Float _hx_tmp63 = (_this5->x + _this5->width);
HXDLIN( 162)			Float _hx_tmp64 = (outer->x + outer->width);
HXDLIN( 162)			hx::SubEq(_this5->width,(_hx_tmp63 - _hx_tmp64));
            		}
HXDLIN( 162)		Bool _hx_tmp65 = ((_this5->y + _this5->height) > (outer->y + outer->height));
HXDLIN( 162)		if (_hx_tmp65) {
HXLINE( 162)			Float _hx_tmp66 = (_this5->y + _this5->height);
HXDLIN( 162)			Float _hx_tmp67 = (outer->y + outer->height);
HXDLIN( 162)			hx::SubEq(_this5->height,(_hx_tmp66 - _hx_tmp67));
            		}
HXDLIN( 162)		Bool _hx_tmp68;
HXDLIN( 162)		Bool _hx_tmp69;
HXDLIN( 162)		Bool _hx_tmp70;
HXDLIN( 162)		Bool _hx_tmp71;
HXDLIN( 162)		if (hx::IsNotNull( innerRight )) {
HXLINE( 162)			_hx_tmp71 = (_this5->x == innerRight->x);
            		}
            		else {
HXLINE( 162)			_hx_tmp71 = false;
            		}
HXDLIN( 162)		if (_hx_tmp71) {
HXLINE( 162)			_hx_tmp70 = (_this5->y == innerRight->y);
            		}
            		else {
HXLINE( 162)			_hx_tmp70 = false;
            		}
HXDLIN( 162)		if (_hx_tmp70) {
HXLINE( 162)			_hx_tmp69 = (_this5->width == innerRight->width);
            		}
            		else {
HXLINE( 162)			_hx_tmp69 = false;
            		}
HXDLIN( 162)		if (_hx_tmp69) {
HXLINE( 162)			_hx_tmp68 = (_this5->height == innerRight->height);
            		}
            		else {
HXLINE( 162)			_hx_tmp68 = false;
            		}
HXDLIN( 162)		this->assertTrue(_hx_tmp68,hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),162,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRectIntersectContaining",57,f6,e2,ad)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestGeom_obj,testRectIntersectContaining,(void))

void TestGeom_obj::testRectToPointDistance(){
            	HX_STACK_FRAME("test.TestGeom","testRectToPointDistance",0xc5162ab0,"test.TestGeom.testRectToPointDistance","test/TestGeom.hx",170,0x1a26c2b3)
            	HX_STACK_THIS(this)
HXLINE( 171)		HX_VARI(  ::hxmath::geom::Rect,unit) =  ::hxmath::geom::Rect_obj::__new(((Float)0.0),((Float)0.0),((Float)1.0),((Float)1.0));
HXLINE( 172)		HX_VARI( ::Array< ::Dynamic>,distanceOfTwo) = ::Array_obj< ::Dynamic>::__new(4)->init(0, ::hxmath::math::Vector2Default_obj::__new(((Float)-2.0),((Float)0.5)))->init(1, ::hxmath::math::Vector2Default_obj::__new(((Float)3.0),((Float)0.5)))->init(2, ::hxmath::math::Vector2Default_obj::__new(((Float)0.5),((Float)-2.0)))->init(3, ::hxmath::math::Vector2Default_obj::__new(((Float)0.5),((Float)3.0)));
HXLINE( 174)		{
HXLINE( 174)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 174)			while((_g < distanceOfTwo->length)){
HXLINE( 174)				HX_VARI(  ::hxmath::math::Vector2Default,point) = distanceOfTwo->__get(_g).StaticCast<  ::hxmath::math::Vector2Default >();
HXDLIN( 174)				++_g;
HXLINE( 176)				Float _hx_tmp = point->x;
HXDLIN( 176)				Float _hx_tmp1 = (unit->x + (((Float)0.5) * unit->width));
HXDLIN( 176)				Float _hx_tmp2 = ::Math_obj::abs((_hx_tmp - _hx_tmp1));
HXDLIN( 176)				Float _hx_tmp3 = (_hx_tmp2 - (((Float)0.5) * unit->width));
HXDLIN( 176)				HX_VARI( Float,dx) = ::Math_obj::max(_hx_tmp3,(int)0);
HXDLIN( 176)				Float _hx_tmp4 = point->y;
HXDLIN( 176)				Float _hx_tmp5 = (unit->y + (((Float)0.5) * unit->height));
HXDLIN( 176)				Float _hx_tmp6 = ::Math_obj::abs((_hx_tmp4 - _hx_tmp5));
HXDLIN( 176)				Float _hx_tmp7 = (_hx_tmp6 - (((Float)0.5) * unit->height));
HXDLIN( 176)				HX_VARI( Float,dy) = ::Math_obj::max(_hx_tmp7,(int)0);
HXDLIN( 176)				Float _hx_tmp8 = ::Math_obj::sqrt(((dx * dx) + (dy * dy)));
HXDLIN( 176)				this->assertApproxEquals(((Float)2.0),_hx_tmp8,null(),hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),176,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRectToPointDistance",34,3b,62,75)));
            			}
            		}
HXLINE( 179)		HX_VARI(  ::hxmath::math::Vector2Default,inside) =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.75),((Float)0.2));
HXLINE( 180)		Float _hx_tmp9 = inside->x;
HXDLIN( 180)		Float _hx_tmp10 = (unit->x + (((Float)0.5) * unit->width));
HXDLIN( 180)		Float _hx_tmp11 = ::Math_obj::abs((_hx_tmp9 - _hx_tmp10));
HXDLIN( 180)		Float _hx_tmp12 = (_hx_tmp11 - (((Float)0.5) * unit->width));
HXDLIN( 180)		HX_VARI_NAME( Float,dx1,"dx") = ::Math_obj::max(_hx_tmp12,(int)0);
HXDLIN( 180)		Float _hx_tmp13 = inside->y;
HXDLIN( 180)		Float _hx_tmp14 = (unit->y + (((Float)0.5) * unit->height));
HXDLIN( 180)		Float _hx_tmp15 = ::Math_obj::abs((_hx_tmp13 - _hx_tmp14));
HXDLIN( 180)		Float _hx_tmp16 = (_hx_tmp15 - (((Float)0.5) * unit->height));
HXDLIN( 180)		HX_VARI_NAME( Float,dy1,"dy") = ::Math_obj::max(_hx_tmp16,(int)0);
HXDLIN( 180)		Float _hx_tmp17 = ::Math_obj::sqrt(((dx1 * dx1) + (dy1 * dy1)));
HXDLIN( 180)		this->assertEquals(((Float)0.0),_hx_tmp17,hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),180,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRectToPointDistance",34,3b,62,75)));
HXLINE( 182)		HX_VARI(  ::hxmath::math::Vector2Default,diagonal) =  ::hxmath::math::Vector2Default_obj::__new(((Float)-0.5),((Float)-0.5));
HXLINE( 183)		Float _hx_tmp18 = ((diagonal->x * diagonal->x) + (diagonal->y * diagonal->y));
HXDLIN( 183)		Float _hx_tmp19 = ::Math_obj::sqrt(_hx_tmp18);
HXDLIN( 183)		Float _hx_tmp20 = diagonal->x;
HXDLIN( 183)		Float _hx_tmp21 = (unit->x + (((Float)0.5) * unit->width));
HXDLIN( 183)		Float _hx_tmp22 = ::Math_obj::abs((_hx_tmp20 - _hx_tmp21));
HXDLIN( 183)		Float _hx_tmp23 = (_hx_tmp22 - (((Float)0.5) * unit->width));
HXDLIN( 183)		HX_VARI_NAME( Float,dx2,"dx") = ::Math_obj::max(_hx_tmp23,(int)0);
HXDLIN( 183)		Float _hx_tmp24 = diagonal->y;
HXDLIN( 183)		Float _hx_tmp25 = (unit->y + (((Float)0.5) * unit->height));
HXDLIN( 183)		Float _hx_tmp26 = ::Math_obj::abs((_hx_tmp24 - _hx_tmp25));
HXDLIN( 183)		Float _hx_tmp27 = (_hx_tmp26 - (((Float)0.5) * unit->height));
HXDLIN( 183)		HX_VARI_NAME( Float,dy2,"dy") = ::Math_obj::max(_hx_tmp27,(int)0);
HXDLIN( 183)		Float _hx_tmp28 = ::Math_obj::sqrt(((dx2 * dx2) + (dy2 * dy2)));
HXDLIN( 183)		this->assertApproxEquals(_hx_tmp19,_hx_tmp28,null(),hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),183,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRectToPointDistance",34,3b,62,75)));
HXLINE( 185)		HX_VARI(  ::hxmath::math::Vector2Default,corner) =  ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)1.0));
HXLINE( 186)		Float _hx_tmp29 = corner->x;
HXDLIN( 186)		Float _hx_tmp30 = (unit->x + (((Float)0.5) * unit->width));
HXDLIN( 186)		Float _hx_tmp31 = ::Math_obj::abs((_hx_tmp29 - _hx_tmp30));
HXDLIN( 186)		Float _hx_tmp32 = (_hx_tmp31 - (((Float)0.5) * unit->width));
HXDLIN( 186)		HX_VARI_NAME( Float,dx3,"dx") = ::Math_obj::max(_hx_tmp32,(int)0);
HXDLIN( 186)		Float _hx_tmp33 = corner->y;
HXDLIN( 186)		Float _hx_tmp34 = (unit->y + (((Float)0.5) * unit->height));
HXDLIN( 186)		Float _hx_tmp35 = ::Math_obj::abs((_hx_tmp33 - _hx_tmp34));
HXDLIN( 186)		Float _hx_tmp36 = (_hx_tmp35 - (((Float)0.5) * unit->height));
HXDLIN( 186)		HX_VARI_NAME( Float,dy3,"dy") = ::Math_obj::max(_hx_tmp36,(int)0);
HXDLIN( 186)		Float _hx_tmp37 = ::Math_obj::sqrt(((dx3 * dx3) + (dy3 * dy3)));
HXDLIN( 186)		this->assertEquals(((Float)0.0),_hx_tmp37,hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),186,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRectToPointDistance",34,3b,62,75)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestGeom_obj,testRectToPointDistance,(void))

void TestGeom_obj::testRectAddVector(){
            	HX_STACK_FRAME("test.TestGeom","testRectAddVector",0xf095daca,"test.TestGeom.testRectAddVector","test/TestGeom.hx",190,0x1a26c2b3)
            	HX_STACK_THIS(this)
HXLINE( 191)		HX_VARI(  ::hxmath::geom::Rect,unit) =  ::hxmath::geom::Rect_obj::__new(((Float)0.0),((Float)0.0),((Float)1.0),((Float)1.0));
HXLINE( 192)		HX_VARI(  ::hxmath::math::Vector2Default,two) =  ::hxmath::math::Vector2Default_obj::__new(((Float)2.0),((Float)2.0));
HXLINE( 193)		HX_VARI( Float,expectedArea) = ((unit->width + two->x) * (unit->height + two->y));
HXLINE( 196)		HX_VARI(  ::hxmath::geom::Rect,_this) =  ::hxmath::geom::Rect_obj::__new(unit->x,unit->y,unit->width,unit->height);
HXDLIN( 196)		Bool _hx_tmp = (two->x < ((Float)0.0));
HXDLIN( 196)		if (_hx_tmp) {
HXLINE( 196)			hx::AddEq(_this->x,two->x);
HXDLIN( 196)			hx::SubEq(_this->width,two->x);
            		}
            		else {
HXLINE( 196)			hx::AddEq(_this->width,two->x);
            		}
HXDLIN( 196)		Bool _hx_tmp1 = (two->y < ((Float)0.0));
HXDLIN( 196)		if (_hx_tmp1) {
HXLINE( 196)			hx::AddEq(_this->y,two->y);
HXDLIN( 196)			hx::SubEq(_this->height,two->y);
            		}
            		else {
HXLINE( 196)			hx::AddEq(_this->height,two->y);
            		}
HXLINE( 199)		Float _hx_tmp2 = (_this->width * _this->height);
HXDLIN( 199)		this->assertApproxEquals(expectedArea,_hx_tmp2,null(),hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),199,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRectAddVector",4e,f0,52,41)));
HXLINE( 200)		HX_VARI(  ::hxmath::math::Vector2Default,a) =  ::hxmath::math::Vector2Default_obj::__new(_this->x,_this->y);
HXDLIN( 200)		HX_VARI(  ::hxmath::math::Vector2Default,b) =  ::hxmath::math::Vector2Default_obj::__new(unit->x,unit->y);
HXDLIN( 200)		HX_VARI(  ::hxmath::math::Vector2Default,self) =  ::hxmath::math::Vector2Default_obj::__new(a->x,a->y);
HXDLIN( 200)		hx::SubEq(self->x,b->x);
HXDLIN( 200)		hx::SubEq(self->y,b->y);
HXDLIN( 200)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self1,"self") = self;
HXDLIN( 200)		Float _hx_tmp3 = ((self1->x * self1->x) + (self1->y * self1->y));
HXDLIN( 200)		Float _hx_tmp4 = ::Math_obj::sqrt(_hx_tmp3);
HXDLIN( 200)		this->assertApproxEquals(((Float)0.0),_hx_tmp4,null(),hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),200,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRectAddVector",4e,f0,52,41)));
HXLINE( 203)		HX_VARI_NAME(  ::hxmath::geom::Rect,_this1,"_this") =  ::hxmath::geom::Rect_obj::__new(unit->x,unit->y,unit->width,unit->height);
HXDLIN( 203)		HX_VARI(  ::hxmath::math::Vector2Default,v) =  ::hxmath::math::Vector2Default_obj::__new(-(two->x),-(two->y));
HXDLIN( 203)		Bool _hx_tmp5 = (v->x < ((Float)0.0));
HXDLIN( 203)		if (_hx_tmp5) {
HXLINE( 203)			hx::AddEq(_this1->x,v->x);
HXDLIN( 203)			hx::SubEq(_this1->width,v->x);
            		}
            		else {
HXLINE( 203)			hx::AddEq(_this1->width,v->x);
            		}
HXDLIN( 203)		Bool _hx_tmp6 = (v->y < ((Float)0.0));
HXDLIN( 203)		if (_hx_tmp6) {
HXLINE( 203)			hx::AddEq(_this1->y,v->y);
HXDLIN( 203)			hx::SubEq(_this1->height,v->y);
            		}
            		else {
HXLINE( 203)			hx::AddEq(_this1->height,v->y);
            		}
HXLINE( 206)		Float _hx_tmp7 = (_this1->width * _this1->height);
HXDLIN( 206)		this->assertApproxEquals(expectedArea,_hx_tmp7,null(),hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),206,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRectAddVector",4e,f0,52,41)));
HXLINE( 207)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,a1,"a") =  ::hxmath::math::Vector2Default_obj::__new(_this1->x,_this1->y);
HXDLIN( 207)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self2,"self") =  ::hxmath::math::Vector2Default_obj::__new(a1->x,a1->y);
HXDLIN( 207)		hx::AddEq(self2->x,two->x);
HXDLIN( 207)		hx::AddEq(self2->y,two->y);
HXDLIN( 207)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self3,"self") = self2;
HXDLIN( 207)		Float _hx_tmp8 = ((self3->x * self3->x) + (self3->y * self3->y));
HXDLIN( 207)		Float _hx_tmp9 = ::Math_obj::sqrt(_hx_tmp8);
HXDLIN( 207)		this->assertApproxEquals(((Float)0.0),_hx_tmp9,null(),hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),207,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRectAddVector",4e,f0,52,41)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestGeom_obj,testRectAddVector,(void))

void TestGeom_obj::testRectDistanceAgainstRangeAlgorithm(){
            	HX_STACK_FRAME("test.TestGeom","testRectDistanceAgainstRangeAlgorithm",0x10b72b64,"test.TestGeom.testRectDistanceAgainstRangeAlgorithm","test/TestGeom.hx",212,0x1a26c2b3)
            	HX_STACK_THIS(this)
HXLINE( 212)		HX_VARI( Int,_g) = (int)0;
HXDLIN( 212)		while((_g < (int)100)){
HXLINE( 212)			++_g;
HXLINE( 214)			Float _hx_tmp = ::Math_obj::random();
HXDLIN( 214)			Float _hx_tmp1 = (_hx_tmp - ((Float)0.5));
HXDLIN( 214)			Float _hx_tmp2 = ::Math_obj::random();
HXDLIN( 214)			Float _hx_tmp3 = (_hx_tmp2 - ((Float)0.5));
HXDLIN( 214)			Float _hx_tmp4 = ::Math_obj::random();
HXDLIN( 214)			Float _hx_tmp5 = ::Math_obj::random();
HXDLIN( 214)			HX_VARI(  ::hxmath::geom::Rect,a) =  ::hxmath::geom::Rect_obj::__new(_hx_tmp1,_hx_tmp3,_hx_tmp4,_hx_tmp5);
HXLINE( 215)			Float _hx_tmp6 = ::Math_obj::random();
HXDLIN( 215)			Float _hx_tmp7 = (_hx_tmp6 - ((Float)0.5));
HXDLIN( 215)			Float _hx_tmp8 = ::Math_obj::random();
HXDLIN( 215)			Float _hx_tmp9 = (_hx_tmp8 - ((Float)0.5));
HXDLIN( 215)			Float _hx_tmp10 = ::Math_obj::random();
HXDLIN( 215)			Float _hx_tmp11 = ::Math_obj::random();
HXDLIN( 215)			HX_VARI(  ::hxmath::geom::Rect,b) =  ::hxmath::geom::Rect_obj::__new(_hx_tmp7,_hx_tmp9,_hx_tmp10,_hx_tmp11);
HXLINE( 217)			Float _hx_tmp12 = (b->x + (((Float)0.5) * b->width));
HXDLIN( 217)			Float _hx_tmp13 = (a->x + (((Float)0.5) * a->width));
HXDLIN( 217)			Float _hx_tmp14 = ::Math_obj::abs((_hx_tmp12 - _hx_tmp13));
HXDLIN( 217)			Float _hx_tmp15 = (((Float)0.5) * (a->width + b->width));
HXDLIN( 217)			HX_VARI( Float,dx) = ::Math_obj::max((_hx_tmp14 - _hx_tmp15),(int)0);
HXDLIN( 217)			Float _hx_tmp16 = (b->y + (((Float)0.5) * b->height));
HXDLIN( 217)			Float _hx_tmp17 = (a->y + (((Float)0.5) * a->height));
HXDLIN( 217)			Float _hx_tmp18 = ::Math_obj::abs((_hx_tmp16 - _hx_tmp17));
HXDLIN( 217)			Float _hx_tmp19 = (((Float)0.5) * (a->height + b->height));
HXDLIN( 217)			HX_VARI( Float,dy) = ::Math_obj::max((_hx_tmp18 - _hx_tmp19),(int)0);
HXDLIN( 217)			HX_VARI( Float,regularDist) = ::Math_obj::sqrt(((dx * dx) + (dy * dy)));
HXLINE( 218)			Float _hx_tmp20 = (b->x + (((Float)0.5) * b->width));
HXDLIN( 218)			Float _hx_tmp21 = (a->x + (((Float)0.5) * a->width));
HXDLIN( 218)			Float _hx_tmp22 = ::Math_obj::abs((_hx_tmp20 - _hx_tmp21));
HXDLIN( 218)			Float _hx_tmp23 = (((Float)0.5) * (a->width + b->width));
HXDLIN( 218)			HX_VARI_NAME( Float,dx1,"dx") = ::Math_obj::max((_hx_tmp22 - _hx_tmp23),(int)0);
HXDLIN( 218)			Float _hx_tmp24 = (b->y + (((Float)0.5) * b->height));
HXDLIN( 218)			Float _hx_tmp25 = (a->y + (((Float)0.5) * a->height));
HXDLIN( 218)			Float _hx_tmp26 = ::Math_obj::abs((_hx_tmp24 - _hx_tmp25));
HXDLIN( 218)			Float _hx_tmp27 = (((Float)0.5) * (a->height + b->height));
HXDLIN( 218)			HX_VARI_NAME( Float,dy1,"dy") = ::Math_obj::max((_hx_tmp26 - _hx_tmp27),(int)0);
HXDLIN( 218)			HX_VARI( Float,rangeDistance) = ::Math_obj::sqrt(((dx1 * dx1) + (dy1 * dy1)));
HXLINE( 219)			this->assertApproxEquals(rangeDistance,regularDist,null(),hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),219,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRectDistanceAgainstRangeAlgorithm",e8,9a,bd,b9)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestGeom_obj,testRectDistanceAgainstRangeAlgorithm,(void))

void TestGeom_obj::testRay2Cast(){
            	HX_STACK_FRAME("test.TestGeom","testRay2Cast",0xd108135d,"test.TestGeom.testRay2Cast","test/TestGeom.hx",224,0x1a26c2b3)
            	HX_STACK_THIS(this)
HXLINE( 225)		HX_VARI(  ::hxmath::math::Vector2Default,self) =  ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)1.0));
HXDLIN( 225)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self1,"self") =  ::hxmath::math::Vector2Default_obj::__new(self->x,self->y);
HXDLIN( 225)		Float _hx_tmp = ((self1->x * self1->x) + (self1->y * self1->y));
HXDLIN( 225)		HX_VARI( Float,length) = ::Math_obj::sqrt(_hx_tmp);
HXDLIN( 225)		if ((length > ((Float)0.0))) {
HXLINE( 225)			hx::DivEq(self1->x,length);
HXDLIN( 225)			hx::DivEq(self1->y,length);
            		}
HXLINE( 226)		 ::hxmath::math::Vector2Default _hx_tmp1 =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)0.0));
HXDLIN( 226)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self2,"self") =  ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)1.0));
HXDLIN( 226)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self3,"self") =  ::hxmath::math::Vector2Default_obj::__new(self2->x,self2->y);
HXDLIN( 226)		Float _hx_tmp2 = ((self3->x * self3->x) + (self3->y * self3->y));
HXDLIN( 226)		HX_VARI_NAME( Float,length1,"length") = ::Math_obj::sqrt(_hx_tmp2);
HXDLIN( 226)		if ((length1 > ((Float)0.0))) {
HXLINE( 226)			hx::DivEq(self3->x,length1);
HXDLIN( 226)			hx::DivEq(self3->y,length1);
            		}
HXLINE( 228)		HX_VARI( Float,result) =  ::hxmath::geom::Ray2_obj::__new(_hx_tmp1,self3)->intersectPoint(self1,null());
HXLINE( 229)		this->assertApproxEquals(((Float)1.0),result,null(),hx::SourceInfo(HX_("TestGeom.hx",30,a7,d3,ef),229,HX_("test.TestGeom",ea,bb,0e,9a),HX_("testRay2Cast",59,ec,ea,04)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestGeom_obj,testRay2Cast,(void))

Float TestGeom_obj::rangeRectDistance( ::hxmath::geom::Rect a, ::hxmath::geom::Rect b){
            	HX_STACK_FRAME("test.TestGeom","rangeRectDistance",0x74cf6452,"test.TestGeom.rangeRectDistance","test/TestGeom.hx",233,0x1a26c2b3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 235)		HX_VARI( Float,aStart) = a->x;
HXDLIN( 235)		HX_VARI( Float,aWidth) = a->width;
HXDLIN( 235)		HX_VARI( Float,bStart) = b->x;
HXDLIN( 235)		HX_VARI( Float,bWidth) = b->width;
HXDLIN( 235)		HX_VAR( Float,minX);
HXDLIN( 235)		if (((aStart + aWidth) < bStart)) {
HXLINE( 235)			minX = (bStart - (aStart + aWidth));
            		}
            		else {
HXLINE( 235)			if (((bStart + bWidth) < aStart)) {
HXLINE( 235)				minX = (aStart - (bStart + bWidth));
            			}
            			else {
HXLINE( 235)				minX = (int)0;
            			}
            		}
HXLINE( 236)		HX_VARI_NAME( Float,aStart1,"aStart") = a->y;
HXDLIN( 236)		HX_VARI_NAME( Float,aWidth1,"aWidth") = a->height;
HXDLIN( 236)		HX_VARI_NAME( Float,bStart1,"bStart") = b->y;
HXDLIN( 236)		HX_VARI_NAME( Float,bWidth1,"bWidth") = b->height;
HXDLIN( 236)		HX_VAR( Float,minY);
HXDLIN( 236)		if (((aStart1 + aWidth1) < bStart1)) {
HXLINE( 236)			minY = (bStart1 - (aStart1 + aWidth1));
            		}
            		else {
HXLINE( 236)			if (((bStart1 + bWidth1) < aStart1)) {
HXLINE( 236)				minY = (aStart1 - (bStart1 + bWidth1));
            			}
            			else {
HXLINE( 236)				minY = (int)0;
            			}
            		}
HXLINE( 241)		return ::Math_obj::sqrt(((minX * minX) + (minY * minY)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(TestGeom_obj,rangeRectDistance,return )


TestGeom_obj::TestGeom_obj()
{
}

hx::Val TestGeom_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"testRay2Cast") ) { return hx::Val( testRay2Cast_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"testRectIntersect") ) { return hx::Val( testRectIntersect_dyn()); }
		if (HX_FIELD_EQ(inName,"testRectAddVector") ) { return hx::Val( testRectAddVector_dyn()); }
		if (HX_FIELD_EQ(inName,"rangeRectDistance") ) { return hx::Val( rangeRectDistance_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"testRectContainsPoint") ) { return hx::Val( testRectContainsPoint_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"testRectToPointDistance") ) { return hx::Val( testRectToPointDistance_dyn()); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"testRectMatrixConversion") ) { return hx::Val( testRectMatrixConversion_dyn()); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"testRectIntersectContaining") ) { return hx::Val( testRectIntersectContaining_dyn()); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"testRectTwoPointConstruction") ) { return hx::Val( testRectTwoPointConstruction_dyn()); }
		if (HX_FIELD_EQ(inName,"testRectIntersectOverlapping") ) { return hx::Val( testRectIntersectOverlapping_dyn()); }
		break;
	case 37:
		if (HX_FIELD_EQ(inName,"testRectDistanceAgainstRangeAlgorithm") ) { return hx::Val( testRectDistanceAgainstRangeAlgorithm_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestGeom_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestGeom_obj_sStaticStorageInfo = 0;
#endif

static ::String TestGeom_obj_sMemberFields[] = {
	HX_HCSTRING("testRectIntersect","\x69","\x0b","\x46","\x34"),
	HX_HCSTRING("testRectMatrixConversion","\x6d","\x83","\x9f","\xeb"),
	HX_HCSTRING("testRectTwoPointConstruction","\x0b","\x79","\x16","\x75"),
	HX_HCSTRING("testRectContainsPoint","\x3b","\xd1","\x55","\xb8"),
	HX_HCSTRING("testRectIntersectOverlapping","\x90","\x68","\x44","\xaa"),
	HX_HCSTRING("testRectIntersectContaining","\x57","\xf6","\xe2","\xad"),
	HX_HCSTRING("testRectToPointDistance","\x34","\x3b","\x62","\x75"),
	HX_HCSTRING("testRectAddVector","\x4e","\xf0","\x52","\x41"),
	HX_HCSTRING("testRectDistanceAgainstRangeAlgorithm","\xe8","\x9a","\xbd","\xb9"),
	HX_HCSTRING("testRay2Cast","\x59","\xec","\xea","\x04"),
	HX_HCSTRING("rangeRectDistance","\xd6","\x79","\x8c","\xc5"),
	::String(null()) };

static void TestGeom_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestGeom_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestGeom_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestGeom_obj::__mClass,"__mClass");
};

#endif

hx::Class TestGeom_obj::__mClass;

void TestGeom_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("test.TestGeom","\xea","\xbb","\x0e","\x9a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestGeom_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestGeom_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestGeom_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestGeom_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestGeom_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestGeom_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace test
