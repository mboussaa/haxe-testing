// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_test_Distribution
#include <test/Distribution.h>
#endif

namespace test{

void Distribution_obj::__construct(){
            	HX_STACK_FRAME("test.Distribution","new",0x1351d432,"test.Distribution.new","test/Distribution.hx",3,0x46b3609d)
            	HX_STACK_THIS(this)
HXLINE(   7)		this->precision = ((Float)1e-4);
HXLINE(   6)		this->width = ((Float)1.0);
HXLINE(   5)		this->center = ((Float)0.0);
            	}

Dynamic Distribution_obj::__CreateEmpty() { return new Distribution_obj; }

hx::ObjectPtr< Distribution_obj > Distribution_obj::__new()
{
	hx::ObjectPtr< Distribution_obj > _hx_result = new Distribution_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Distribution_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Distribution_obj > _hx_result = new Distribution_obj();
	_hx_result->__construct();
	return _hx_result;
}


Distribution_obj::Distribution_obj()
{
}

hx::Val Distribution_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"center") ) { return hx::Val( center); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"precision") ) { return hx::Val( precision); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Distribution_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"center") ) { center=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"precision") ) { precision=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Distribution_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("center","\xd5","\x25","\xdb","\x05"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("precision","\x3e","\xd5","\xc7","\x80"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Distribution_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Distribution_obj,center),HX_HCSTRING("center","\xd5","\x25","\xdb","\x05")},
	{hx::fsFloat,(int)offsetof(Distribution_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsFloat,(int)offsetof(Distribution_obj,precision),HX_HCSTRING("precision","\x3e","\xd5","\xc7","\x80")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Distribution_obj_sStaticStorageInfo = 0;
#endif

static ::String Distribution_obj_sMemberFields[] = {
	HX_HCSTRING("center","\xd5","\x25","\xdb","\x05"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("precision","\x3e","\xd5","\xc7","\x80"),
	::String(null()) };

static void Distribution_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Distribution_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Distribution_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Distribution_obj::__mClass,"__mClass");
};

#endif

hx::Class Distribution_obj::__mClass;

void Distribution_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("test.Distribution","\x40","\x93","\x2b","\x42");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Distribution_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Distribution_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Distribution_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Distribution_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Distribution_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Distribution_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace test
