// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_nanotest_NanoTestCase
#include <nanotest/NanoTestCase.h>
#endif
#ifndef INCLUDED_nanotest_NanoTestRunner
#include <nanotest/NanoTestRunner.h>
#endif
#ifndef INCLUDED_test_MathTestCase
#include <test/MathTestCase.h>
#endif
#ifndef INCLUDED_test_TS7
#include <test/TS7.h>
#endif
#ifndef INCLUDED_test_TestGeom
#include <test/TestGeom.h>
#endif

namespace test{

void TS7_obj::__construct() { }

Dynamic TS7_obj::__CreateEmpty() { return new TS7_obj; }

hx::ObjectPtr< TS7_obj > TS7_obj::__new()
{
	hx::ObjectPtr< TS7_obj > _hx_result = new TS7_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TS7_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TS7_obj > _hx_result = new TS7_obj();
	_hx_result->__construct();
	return _hx_result;
}

Bool TS7_obj::main(){
            	HX_STACK_FRAME("test.TS7","main",0x7b312e2b,"test.TS7.main","test/TS7.hx",11,0x16a30743)
HXLINE(  12)		HX_VARI(  ::nanotest::NanoTestRunner,runner) =  ::nanotest::NanoTestRunner_obj::__new(null());
HXLINE(  29)		{
HXLINE(  29)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  29)			while((_g < (int)3000)){
HXLINE(  29)				++_g;
HXLINE(  30)				runner->add( ::test::TestGeom_obj::__new(hx::SourceInfo(HX_("TS7.hx",e6,73,ba,84),30,HX_("test.TS7",bc,2f,01,37),HX_("main",39,38,56,48))));
            			}
            		}
HXLINE(  40)		return runner->run();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(TS7_obj,main,return )


TS7_obj::TS7_obj()
{
}

bool TS7_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TS7_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TS7_obj_sStaticStorageInfo = 0;
#endif

static void TS7_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TS7_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TS7_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TS7_obj::__mClass,"__mClass");
};

#endif

hx::Class TS7_obj::__mClass;

static ::String TS7_obj_sStaticFields[] = {
	HX_HCSTRING("main","\x39","\x38","\x56","\x48"),
	::String(null())
};

void TS7_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("test.TS7","\xbc","\x2f","\x01","\x37");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TS7_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TS7_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TS7_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< TS7_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TS7_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TS7_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TS7_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace test
