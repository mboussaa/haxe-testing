// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif


void EReg_obj::__construct(::String r,::String opt){
            	HX_STACK_FRAME("EReg","new",0x8b859e81,"EReg.new","/usr/lib/haxe/std/cpp/_std/EReg.hx",30,0x16cad931)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(r,"r")
            	HX_STACK_ARG(opt,"opt")
HXLINE(  31)		HX_VARI( ::Array< ::String >,a) = opt.split(HX_("g",67,00,00,00));
HXLINE(  32)		this->global = (a->length > (int)1);
HXLINE(  33)		Bool _hx_tmp = this->global;
HXDLIN(  33)		if (_hx_tmp) {
HXLINE(  34)			opt = a->join(HX_("",00,00,00,00));
            		}
HXLINE(  35)		this->r = _hx_regexp_new_options(r,opt);
            	}

Dynamic EReg_obj::__CreateEmpty() { return new EReg_obj; }

hx::ObjectPtr< EReg_obj > EReg_obj::__new(::String r,::String opt)
{
	hx::ObjectPtr< EReg_obj > _hx_result = new EReg_obj();
	_hx_result->__construct(r,opt);
	return _hx_result;
}

Dynamic EReg_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< EReg_obj > _hx_result = new EReg_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

::Array< ::String > EReg_obj::split(::String s){
            	HX_STACK_FRAME("EReg","split",0x9749433b,"EReg.split","/usr/lib/haxe/std/cpp/_std/EReg.hx",76,0x16cad931)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s,"s")
HXLINE(  77)		HX_VARI( Int,pos) = (int)0;
HXLINE(  78)		HX_VARI( Int,len) = s.length;
HXLINE(  79)		HX_VARI( ::Array< ::String >,a) = ::Array_obj< ::String >::__new();
HXLINE(  80)		HX_VARI( Bool,first) = true;
HXLINE(  81)		while(_hx_regexp_match(this->r,s,pos,len)){
HXLINE(  84)			HX_VARI(  ::Dynamic,p) = _hx_regexp_matched_pos(this->r,(int)0);
HXLINE(  85)			Bool _hx_tmp;
HXDLIN(  85)			if ((( (Int)(p->__Field(HX_("len",d5,4b,52,00),hx::paccDynamic)) ) == (int)0)) {
HXLINE(  85)				_hx_tmp = !(first);
            			}
            			else {
HXLINE(  85)				_hx_tmp = false;
            			}
HXDLIN(  85)			if (_hx_tmp) {
HXLINE(  86)				if ((( (Int)(p->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) ) == s.length)) {
HXLINE(  87)					goto _hx_goto_0;
            				}
HXLINE(  88)				hx::AddEq(hx::FieldRef((p).mPtr,HX_("pos",94,5d,55,00)),(int)1);
            			}
HXLINE(  90)			Int _hx_tmp1 = (( (Int)(p->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) ) - pos);
HXDLIN(  90)			::String _hx_tmp2 = s.substr(pos,_hx_tmp1);
HXDLIN(  90)			a->push(_hx_tmp2);
HXLINE(  91)			HX_VARI( Int,tot) = ((( (Int)(p->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) ) + ( (Int)(p->__Field(HX_("len",d5,4b,52,00),hx::paccDynamic)) )) - pos);
HXLINE(  92)			hx::AddEq(pos,tot);
HXLINE(  93)			hx::SubEq(len,tot);
HXLINE(  94)			first = false;
HXLINE(  95)			if (!(this->global)) {
HXLINE(  81)				goto _hx_goto_0;
            			}
            		}
            		_hx_goto_0:;
HXLINE(  96)		::String _hx_tmp3 = s.substr(pos,len);
HXDLIN(  96)		a->push(_hx_tmp3);
HXLINE(  97)		return a;
            	}


HX_DEFINE_DYNAMIC_FUNC1(EReg_obj,split,return )


EReg_obj::EReg_obj()
{
}

void EReg_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EReg);
	HX_MARK_MEMBER_NAME(r,"r");
	HX_MARK_MEMBER_NAME(global,"global");
	HX_MARK_END_CLASS();
}

void EReg_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(r,"r");
	HX_VISIT_MEMBER_NAME(global,"global");
}

hx::Val EReg_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"r") ) { return hx::Val( r); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"split") ) { return hx::Val( split_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"global") ) { return hx::Val( global); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val EReg_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"r") ) { r=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"global") ) { global=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void EReg_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("r","\x72","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("global","\x63","\x31","\xb2","\xa7"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo EReg_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(EReg_obj,r),HX_HCSTRING("r","\x72","\x00","\x00","\x00")},
	{hx::fsBool,(int)offsetof(EReg_obj,global),HX_HCSTRING("global","\x63","\x31","\xb2","\xa7")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *EReg_obj_sStaticStorageInfo = 0;
#endif

static ::String EReg_obj_sMemberFields[] = {
	HX_HCSTRING("r","\x72","\x00","\x00","\x00"),
	HX_HCSTRING("global","\x63","\x31","\xb2","\xa7"),
	HX_HCSTRING("split","\xda","\xea","\x6e","\x81"),
	::String(null()) };

static void EReg_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(EReg_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void EReg_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(EReg_obj::__mClass,"__mClass");
};

#endif

hx::Class EReg_obj::__mClass;

void EReg_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("EReg","\x0f","\x4a","\xda","\x2d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = EReg_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(EReg_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< EReg_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = EReg_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EReg_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EReg_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

