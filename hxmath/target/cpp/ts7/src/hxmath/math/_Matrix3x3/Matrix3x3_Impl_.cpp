// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_hxmath_math_Matrix3x3Default
#include <hxmath/math/Matrix3x3Default.h>
#endif
#ifndef INCLUDED_hxmath_math_Vector3Default
#include <hxmath/math/Vector3Default.h>
#endif
#ifndef INCLUDED_hxmath_math__Matrix3x3_Matrix3x3_Impl_
#include <hxmath/math/_Matrix3x3/Matrix3x3_Impl_.h>
#endif

namespace hxmath{
namespace math{
namespace _Matrix3x3{

void Matrix3x3_Impl__obj::__construct() { }

Dynamic Matrix3x3_Impl__obj::__CreateEmpty() { return new Matrix3x3_Impl__obj; }

hx::ObjectPtr< Matrix3x3_Impl__obj > Matrix3x3_Impl__obj::__new()
{
	hx::ObjectPtr< Matrix3x3_Impl__obj > _hx_result = new Matrix3x3_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Matrix3x3_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Matrix3x3_Impl__obj > _hx_result = new Matrix3x3_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Int Matrix3x3_Impl__obj::elementCount;

 ::hxmath::math::Matrix3x3Default Matrix3x3_Impl__obj::_new(Float m00,Float m10,Float m20,Float m01,Float m11,Float m21,Float m02,Float m12,Float m22){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","_new",0x6932d292,"hxmath.math._Matrix3x3.Matrix3x3_Impl_._new","hxmath/math/Matrix3x3.hx",103,0xaae5f2a1)
            	HX_STACK_ARG(m00,"m00")
            	HX_STACK_ARG(m10,"m10")
            	HX_STACK_ARG(m20,"m20")
            	HX_STACK_ARG(m01,"m01")
            	HX_STACK_ARG(m11,"m11")
            	HX_STACK_ARG(m21,"m21")
            	HX_STACK_ARG(m02,"m02")
            	HX_STACK_ARG(m12,"m12")
            	HX_STACK_ARG(m22,"m22")
HXLINE( 103)		return  ::hxmath::math::Matrix3x3Default_obj::__new(m00,m10,m20,m01,m11,m21,m02,m12,m22);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC9(Matrix3x3_Impl__obj,_new,return )

 ::hxmath::math::Matrix3x3Default Matrix3x3_Impl__obj::fromArray(::Array< Float > rawData){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","fromArray",0x55d428fe,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.fromArray","hxmath/math/Matrix3x3.hx",117,0xaae5f2a1)
            	HX_STACK_ARG(rawData,"rawData")
HXLINE( 118)		if ((rawData->length != (int)9)) {
HXLINE( 120)			HX_STACK_DO_THROW(HX_("Invalid rawData.",25,ca,34,44));
            		}
HXLINE( 123)		return  ::hxmath::math::Matrix3x3Default_obj::__new(rawData->__get((int)0),rawData->__get((int)1),rawData->__get((int)2),rawData->__get((int)3),rawData->__get((int)4),rawData->__get((int)5),rawData->__get((int)6),rawData->__get((int)7),rawData->__get((int)8));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix3x3_Impl__obj,fromArray,return )

 ::hxmath::math::Matrix3x3Default Matrix3x3_Impl__obj::fromMatrix3x3Shape( ::hxmath::math::Matrix3x3Default other){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","fromMatrix3x3Shape",0x80012fcf,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.fromMatrix3x3Shape","hxmath/math/Matrix3x3.hx",138,0xaae5f2a1)
            	HX_STACK_ARG(other,"other")
HXLINE( 138)		return  ::hxmath::math::Matrix3x3Default_obj::__new(other->m00,other->m10,other->m20,other->m01,other->m11,other->m21,other->m02,other->m12,other->m22);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix3x3_Impl__obj,fromMatrix3x3Shape,return )

 ::hxmath::math::Matrix3x3Default Matrix3x3_Impl__obj::multiplyScalar(Float s, ::hxmath::math::Matrix3x3Default a){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","multiplyScalar",0xc7b5f4e1,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.multiplyScalar","hxmath/math/Matrix3x3.hx",154,0xaae5f2a1)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(a,"a")
HXLINE( 154)		return  ::hxmath::math::Matrix3x3Default_obj::__new((s * a->m00),(s * a->m10),(s * a->m20),(s * a->m01),(s * a->m11),(s * a->m21),(s * a->m02),(s * a->m12),(s * a->m22));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x3_Impl__obj,multiplyScalar,return )

 ::hxmath::math::Vector3Default Matrix3x3_Impl__obj::multiplyVector( ::hxmath::math::Matrix3x3Default a, ::hxmath::math::Vector3Default v){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","multiplyVector",0x22edbe78,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.multiplyVector","hxmath/math/Matrix3x3.hx",170,0xaae5f2a1)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(v,"v")
HXLINE( 170)		return  ::hxmath::math::Vector3Default_obj::__new((((a->m00 * v->x) + (a->m10 * v->y)) + (a->m20 * v->z)),(((a->m01 * v->x) + (a->m11 * v->y)) + (a->m21 * v->z)),(((a->m02 * v->x) + (a->m12 * v->y)) + (a->m22 * v->z)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x3_Impl__obj,multiplyVector,return )

 ::hxmath::math::Matrix3x3Default Matrix3x3_Impl__obj::multiply( ::hxmath::math::Matrix3x3Default a, ::hxmath::math::Matrix3x3Default b){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","multiply",0xbc658bd5,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.multiply","hxmath/math/Matrix3x3.hx",186,0xaae5f2a1)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 186)		return  ::hxmath::math::Matrix3x3Default_obj::__new((((a->m00 * b->m00) + (a->m10 * b->m01)) + (a->m20 * b->m02)),(((a->m00 * b->m10) + (a->m10 * b->m11)) + (a->m20 * b->m12)),(((a->m00 * b->m20) + (a->m10 * b->m21)) + (a->m20 * b->m22)),(((a->m01 * b->m00) + (a->m11 * b->m01)) + (a->m21 * b->m02)),(((a->m01 * b->m10) + (a->m11 * b->m11)) + (a->m21 * b->m12)),(((a->m01 * b->m20) + (a->m11 * b->m21)) + (a->m21 * b->m22)),(((a->m02 * b->m00) + (a->m12 * b->m01)) + (a->m22 * b->m02)),(((a->m02 * b->m10) + (a->m12 * b->m11)) + (a->m22 * b->m12)),(((a->m02 * b->m20) + (a->m12 * b->m21)) + (a->m22 * b->m22)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x3_Impl__obj,multiply,return )

 ::hxmath::math::Matrix3x3Default Matrix3x3_Impl__obj::add( ::hxmath::math::Matrix3x3Default a, ::hxmath::math::Matrix3x3Default b){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","add",0xf2b3a610,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.add","hxmath/math/Matrix3x3.hx",210,0xaae5f2a1)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 210)		HX_VARI(  ::hxmath::math::Matrix3x3Default,self) =  ::hxmath::math::Matrix3x3Default_obj::__new(a->m00,a->m10,a->m20,a->m01,a->m11,a->m21,a->m02,a->m12,a->m22);
HXDLIN( 210)		hx::AddEq(self->m00,b->m00);
HXDLIN( 210)		hx::AddEq(self->m10,b->m10);
HXDLIN( 210)		hx::AddEq(self->m20,b->m20);
HXDLIN( 210)		hx::AddEq(self->m01,b->m01);
HXDLIN( 210)		hx::AddEq(self->m11,b->m11);
HXDLIN( 210)		hx::AddEq(self->m21,b->m21);
HXDLIN( 210)		hx::AddEq(self->m02,b->m02);
HXDLIN( 210)		hx::AddEq(self->m12,b->m12);
HXDLIN( 210)		hx::AddEq(self->m22,b->m22);
HXDLIN( 210)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x3_Impl__obj,add,return )

 ::hxmath::math::Matrix3x3Default Matrix3x3_Impl__obj::subtract( ::hxmath::math::Matrix3x3Default a, ::hxmath::math::Matrix3x3Default b){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","subtract",0x19ea1ec5,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.subtract","hxmath/math/Matrix3x3.hx",224,0xaae5f2a1)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 224)		HX_VARI(  ::hxmath::math::Matrix3x3Default,self) =  ::hxmath::math::Matrix3x3Default_obj::__new(a->m00,a->m10,a->m20,a->m01,a->m11,a->m21,a->m02,a->m12,a->m22);
HXDLIN( 224)		hx::SubEq(self->m00,b->m00);
HXDLIN( 224)		hx::SubEq(self->m10,b->m10);
HXDLIN( 224)		hx::SubEq(self->m20,b->m20);
HXDLIN( 224)		hx::SubEq(self->m01,b->m01);
HXDLIN( 224)		hx::SubEq(self->m11,b->m11);
HXDLIN( 224)		hx::SubEq(self->m21,b->m21);
HXDLIN( 224)		hx::SubEq(self->m02,b->m02);
HXDLIN( 224)		hx::SubEq(self->m12,b->m12);
HXDLIN( 224)		hx::SubEq(self->m22,b->m22);
HXDLIN( 224)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x3_Impl__obj,subtract,return )

 ::hxmath::math::Matrix3x3Default Matrix3x3_Impl__obj::negate( ::hxmath::math::Matrix3x3Default a){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","negate",0x0b7b6d33,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.negate","hxmath/math/Matrix3x3.hx",237,0xaae5f2a1)
            	HX_STACK_ARG(a,"a")
HXLINE( 237)		return  ::hxmath::math::Matrix3x3Default_obj::__new(-(a->m00),-(a->m10),-(a->m20),-(a->m01),-(a->m11),-(a->m21),-(a->m02),-(a->m12),-(a->m22));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix3x3_Impl__obj,negate,return )

Bool Matrix3x3_Impl__obj::equals( ::hxmath::math::Matrix3x3Default a, ::hxmath::math::Matrix3x3Default b){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","equals",0x645519b0,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.equals","hxmath/math/Matrix3x3.hx",254,0xaae5f2a1)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 254)		Bool _hx_tmp;
HXDLIN( 254)		if (hx::IsNull( a )) {
HXLINE( 254)			_hx_tmp = hx::IsNull( b );
            		}
            		else {
HXLINE( 254)			_hx_tmp = false;
            		}
HXDLIN( 254)		if (!(_hx_tmp)) {
HXLINE( 255)			Bool _hx_tmp1;
HXDLIN( 255)			Bool _hx_tmp2;
HXDLIN( 255)			Bool _hx_tmp3;
HXDLIN( 255)			Bool _hx_tmp4;
HXDLIN( 255)			Bool _hx_tmp5;
HXDLIN( 255)			Bool _hx_tmp6;
HXDLIN( 255)			Bool _hx_tmp7;
HXDLIN( 255)			Bool _hx_tmp8;
HXDLIN( 255)			Bool _hx_tmp9;
HXDLIN( 255)			if (hx::IsNotNull( a )) {
HXLINE( 256)				_hx_tmp9 = hx::IsNotNull( b );
            			}
            			else {
HXLINE( 255)				_hx_tmp9 = false;
            			}
HXDLIN( 255)			if (_hx_tmp9) {
HXLINE( 257)				_hx_tmp8 = (a->m00 == b->m00);
            			}
            			else {
HXLINE( 255)				_hx_tmp8 = false;
            			}
HXDLIN( 255)			if (_hx_tmp8) {
HXLINE( 258)				_hx_tmp7 = (a->m10 == b->m10);
            			}
            			else {
HXLINE( 255)				_hx_tmp7 = false;
            			}
HXDLIN( 255)			if (_hx_tmp7) {
HXLINE( 259)				_hx_tmp6 = (a->m20 == b->m20);
            			}
            			else {
HXLINE( 255)				_hx_tmp6 = false;
            			}
HXDLIN( 255)			if (_hx_tmp6) {
HXLINE( 260)				_hx_tmp5 = (a->m01 == b->m01);
            			}
            			else {
HXLINE( 255)				_hx_tmp5 = false;
            			}
HXDLIN( 255)			if (_hx_tmp5) {
HXLINE( 261)				_hx_tmp4 = (a->m11 == b->m11);
            			}
            			else {
HXLINE( 255)				_hx_tmp4 = false;
            			}
HXDLIN( 255)			if (_hx_tmp4) {
HXLINE( 262)				_hx_tmp3 = (a->m21 == b->m21);
            			}
            			else {
HXLINE( 255)				_hx_tmp3 = false;
            			}
HXDLIN( 255)			if (_hx_tmp3) {
HXLINE( 263)				_hx_tmp2 = (a->m02 == b->m02);
            			}
            			else {
HXLINE( 255)				_hx_tmp2 = false;
            			}
HXDLIN( 255)			if (_hx_tmp2) {
HXLINE( 264)				_hx_tmp1 = (a->m12 == b->m12);
            			}
            			else {
HXLINE( 255)				_hx_tmp1 = false;
            			}
HXDLIN( 255)			if (_hx_tmp1) {
HXLINE( 254)				return (a->m22 == b->m22);
            			}
            			else {
HXLINE( 254)				return false;
            			}
            		}
            		else {
HXLINE( 254)			return true;
            		}
HXDLIN( 254)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x3_Impl__obj,equals,return )

 ::hxmath::math::Matrix3x3Default Matrix3x3_Impl__obj::rotationX(Float angleDegrees){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","rotationX",0xe8ab2a89,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.rotationX","hxmath/math/Matrix3x3.hx",275,0xaae5f2a1)
            	HX_STACK_ARG(angleDegrees,"angleDegrees")
HXLINE( 276)		HX_VARI( Float,angleRadians) = (((Float)::Math_obj::PI / (Float)(int)180) * angleDegrees);
HXLINE( 277)		HX_VARI( Float,s) = ::Math_obj::sin(angleRadians);
HXLINE( 278)		HX_VARI( Float,c) = ::Math_obj::cos(angleRadians);
HXLINE( 279)		return  ::hxmath::math::Matrix3x3Default_obj::__new((int)1,(int)0,(int)0,(int)0,c,-(s),(int)0,s,c);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix3x3_Impl__obj,rotationX,return )

 ::hxmath::math::Matrix3x3Default Matrix3x3_Impl__obj::rotationY(Float angleDegrees){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","rotationY",0xe8ab2a8a,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.rotationY","hxmath/math/Matrix3x3.hx",292,0xaae5f2a1)
            	HX_STACK_ARG(angleDegrees,"angleDegrees")
HXLINE( 293)		HX_VARI( Float,angleRadians) = (((Float)::Math_obj::PI / (Float)(int)180) * angleDegrees);
HXLINE( 294)		HX_VARI( Float,s) = ::Math_obj::sin(angleRadians);
HXLINE( 295)		HX_VARI( Float,c) = ::Math_obj::cos(angleRadians);
HXLINE( 296)		return  ::hxmath::math::Matrix3x3Default_obj::__new(c,(int)0,s,(int)0,(int)1,(int)0,-(s),(int)0,c);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix3x3_Impl__obj,rotationY,return )

 ::hxmath::math::Matrix3x3Default Matrix3x3_Impl__obj::rotationZ(Float angleDegrees){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","rotationZ",0xe8ab2a8b,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.rotationZ","hxmath/math/Matrix3x3.hx",309,0xaae5f2a1)
            	HX_STACK_ARG(angleDegrees,"angleDegrees")
HXLINE( 310)		HX_VARI( Float,angleRadians) = (((Float)::Math_obj::PI / (Float)(int)180) * angleDegrees);
HXLINE( 311)		HX_VARI( Float,s) = ::Math_obj::sin(angleRadians);
HXLINE( 312)		HX_VARI( Float,c) = ::Math_obj::cos(angleRadians);
HXLINE( 313)		return  ::hxmath::math::Matrix3x3Default_obj::__new(c,-(s),(int)0,s,c,(int)0,(int)0,(int)0,(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix3x3_Impl__obj,rotationZ,return )

 ::hxmath::math::Matrix3x3Default Matrix3x3_Impl__obj::scale(Float sx,Float sy,Float sz){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","scale",0x20009c39,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.scale","hxmath/math/Matrix3x3.hx",329,0xaae5f2a1)
            	HX_STACK_ARG(sx,"sx")
            	HX_STACK_ARG(sy,"sy")
            	HX_STACK_ARG(sz,"sz")
HXLINE( 329)		return  ::hxmath::math::Matrix3x3Default_obj::__new(sx,((Float)0.0),((Float)0.0),((Float)0.0),sy,((Float)0.0),((Float)0.0),((Float)0.0),sz);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix3x3_Impl__obj,scale,return )

 ::hxmath::math::Matrix3x3Default Matrix3x3_Impl__obj::set( ::hxmath::math::Matrix3x3Default this1,Float m00,Float m10,Float m20,Float m01,Float m11,Float m21,Float m02,Float m12,Float m22){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","set",0xf2c14f91,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.set","hxmath/math/Matrix3x3.hx",353,0xaae5f2a1)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(m00,"m00")
            	HX_STACK_ARG(m10,"m10")
            	HX_STACK_ARG(m20,"m20")
            	HX_STACK_ARG(m01,"m01")
            	HX_STACK_ARG(m11,"m11")
            	HX_STACK_ARG(m21,"m21")
            	HX_STACK_ARG(m02,"m02")
            	HX_STACK_ARG(m12,"m12")
            	HX_STACK_ARG(m22,"m22")
HXLINE( 354)		HX_VARI(  ::hxmath::math::Matrix3x3Default,self) = this1;
HXLINE( 356)		self->m00 = m00;
HXLINE( 357)		self->m10 = m10;
HXLINE( 358)		self->m20 = m20;
HXLINE( 360)		self->m01 = m01;
HXLINE( 361)		self->m11 = m11;
HXLINE( 362)		self->m21 = m21;
HXLINE( 364)		self->m02 = m02;
HXLINE( 365)		self->m12 = m12;
HXLINE( 366)		self->m22 = m22;
HXLINE( 368)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC10(Matrix3x3_Impl__obj,set,return )

 ::hxmath::math::Matrix3x3Default Matrix3x3_Impl__obj::addWith( ::hxmath::math::Matrix3x3Default this1, ::hxmath::math::Matrix3x3Default a){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","addWith",0xbcb99036,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.addWith","hxmath/math/Matrix3x3.hx",379,0xaae5f2a1)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(a,"a")
HXLINE( 380)		HX_VARI(  ::hxmath::math::Matrix3x3Default,self) = this1;
HXLINE( 382)		hx::AddEq(self->m00,a->m00);
HXLINE( 383)		hx::AddEq(self->m10,a->m10);
HXLINE( 384)		hx::AddEq(self->m20,a->m20);
HXLINE( 385)		hx::AddEq(self->m01,a->m01);
HXLINE( 386)		hx::AddEq(self->m11,a->m11);
HXLINE( 387)		hx::AddEq(self->m21,a->m21);
HXLINE( 388)		hx::AddEq(self->m02,a->m02);
HXLINE( 389)		hx::AddEq(self->m12,a->m12);
HXLINE( 390)		hx::AddEq(self->m22,a->m22);
HXLINE( 392)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x3_Impl__obj,addWith,return )

 ::hxmath::math::Matrix3x3Default Matrix3x3_Impl__obj::subtractWith( ::hxmath::math::Matrix3x3Default this1, ::hxmath::math::Matrix3x3Default a){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","subtractWith",0x0413076b,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.subtractWith","hxmath/math/Matrix3x3.hx",403,0xaae5f2a1)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(a,"a")
HXLINE( 404)		HX_VARI(  ::hxmath::math::Matrix3x3Default,self) = this1;
HXLINE( 406)		hx::SubEq(self->m00,a->m00);
HXLINE( 407)		hx::SubEq(self->m10,a->m10);
HXLINE( 408)		hx::SubEq(self->m20,a->m20);
HXLINE( 409)		hx::SubEq(self->m01,a->m01);
HXLINE( 410)		hx::SubEq(self->m11,a->m11);
HXLINE( 411)		hx::SubEq(self->m21,a->m21);
HXLINE( 412)		hx::SubEq(self->m02,a->m02);
HXLINE( 413)		hx::SubEq(self->m12,a->m12);
HXLINE( 414)		hx::SubEq(self->m22,a->m22);
HXLINE( 416)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x3_Impl__obj,subtractWith,return )

void Matrix3x3_Impl__obj::copyTo( ::hxmath::math::Matrix3x3Default this1, ::hxmath::math::Matrix3x3Default target){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","copyTo",0x6d954801,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.copyTo","hxmath/math/Matrix3x3.hx",426,0xaae5f2a1)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(target,"target")
HXLINE( 427)		HX_VARI(  ::hxmath::math::Matrix3x3Default,self) = this1;
HXLINE( 429)		{
HXLINE( 429)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 429)			while((_g < (int)9)){
HXLINE( 429)				HX_VARI( Int,i) = _g++;
HXLINE( 431)				{
HXLINE( 431)					 ::Dynamic _hx_tmp;
HXDLIN( 431)					switch((int)(i)){
            						case (int)0: {
HXLINE( 431)							_hx_tmp = self->m00;
            						}
            						break;
            						case (int)1: {
HXLINE( 431)							_hx_tmp = self->m10;
            						}
            						break;
            						case (int)2: {
HXLINE( 431)							_hx_tmp = self->m20;
            						}
            						break;
            						case (int)3: {
HXLINE( 431)							_hx_tmp = self->m01;
            						}
            						break;
            						case (int)4: {
HXLINE( 431)							_hx_tmp = self->m11;
            						}
            						break;
            						case (int)5: {
HXLINE( 431)							_hx_tmp = self->m21;
            						}
            						break;
            						case (int)6: {
HXLINE( 431)							_hx_tmp = self->m02;
            						}
            						break;
            						case (int)7: {
HXLINE( 431)							_hx_tmp = self->m12;
            						}
            						break;
            						case (int)8: {
HXLINE( 431)							_hx_tmp = self->m22;
            						}
            						break;
            						default:{
HXLINE( 431)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 431)					HX_VARI( Float,value) = ( (Float)(_hx_tmp) );
HXDLIN( 431)					switch((int)(i)){
            						case (int)0: {
HXLINE( 431)							target->m00 = value;
            						}
            						break;
            						case (int)1: {
HXLINE( 431)							target->m10 = value;
            						}
            						break;
            						case (int)2: {
HXLINE( 431)							target->m20 = value;
            						}
            						break;
            						case (int)3: {
HXLINE( 431)							target->m01 = value;
            						}
            						break;
            						case (int)4: {
HXLINE( 431)							target->m11 = value;
            						}
            						break;
            						case (int)5: {
HXLINE( 431)							target->m21 = value;
            						}
            						break;
            						case (int)6: {
HXLINE( 431)							target->m02 = value;
            						}
            						break;
            						case (int)7: {
HXLINE( 431)							target->m12 = value;
            						}
            						break;
            						case (int)8: {
HXLINE( 431)							target->m22 = value;
            						}
            						break;
            						default:{
HXLINE( 431)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x3_Impl__obj,copyTo,(void))

void Matrix3x3_Impl__obj::copyToShape( ::hxmath::math::Matrix3x3Default this1, ::Dynamic target){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","copyToShape",0x5deb6760,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.copyToShape","hxmath/math/Matrix3x3.hx",441,0xaae5f2a1)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(target,"target")
HXLINE( 442)		HX_VARI(  ::hxmath::math::Matrix3x3Default,self) = this1;
HXLINE( 444)		target->__SetField(HX_("m00",ad,df,52,00),self->m00,hx::paccDynamic);
HXLINE( 445)		target->__SetField(HX_("m01",ae,df,52,00),self->m01,hx::paccDynamic);
HXLINE( 446)		target->__SetField(HX_("m02",af,df,52,00),self->m02,hx::paccDynamic);
HXLINE( 448)		target->__SetField(HX_("m10",8c,e0,52,00),self->m10,hx::paccDynamic);
HXLINE( 449)		target->__SetField(HX_("m11",8d,e0,52,00),self->m11,hx::paccDynamic);
HXLINE( 450)		target->__SetField(HX_("m12",8e,e0,52,00),self->m12,hx::paccDynamic);
HXLINE( 452)		target->__SetField(HX_("m20",6b,e1,52,00),self->m20,hx::paccDynamic);
HXLINE( 453)		target->__SetField(HX_("m21",6c,e1,52,00),self->m21,hx::paccDynamic);
HXLINE( 454)		target->__SetField(HX_("m22",6d,e1,52,00),self->m22,hx::paccDynamic);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x3_Impl__obj,copyToShape,(void))

void Matrix3x3_Impl__obj::copyFromShape( ::hxmath::math::Matrix3x3Default this1, ::Dynamic source){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","copyFromShape",0xd6b8e791,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.copyFromShape","hxmath/math/Matrix3x3.hx",463,0xaae5f2a1)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(source,"source")
HXLINE( 464)		HX_VARI(  ::hxmath::math::Matrix3x3Default,self) = this1;
HXLINE( 466)		self->m00 = ( (Float)(source->__Field(HX_("m00",ad,df,52,00),hx::paccDynamic)) );
HXLINE( 467)		self->m01 = ( (Float)(source->__Field(HX_("m01",ae,df,52,00),hx::paccDynamic)) );
HXLINE( 468)		self->m02 = ( (Float)(source->__Field(HX_("m02",af,df,52,00),hx::paccDynamic)) );
HXLINE( 470)		self->m10 = ( (Float)(source->__Field(HX_("m10",8c,e0,52,00),hx::paccDynamic)) );
HXLINE( 471)		self->m11 = ( (Float)(source->__Field(HX_("m11",8d,e0,52,00),hx::paccDynamic)) );
HXLINE( 472)		self->m12 = ( (Float)(source->__Field(HX_("m12",8e,e0,52,00),hx::paccDynamic)) );
HXLINE( 474)		self->m20 = ( (Float)(source->__Field(HX_("m20",6b,e1,52,00),hx::paccDynamic)) );
HXLINE( 475)		self->m21 = ( (Float)(source->__Field(HX_("m21",6c,e1,52,00),hx::paccDynamic)) );
HXLINE( 476)		self->m22 = ( (Float)(source->__Field(HX_("m22",6d,e1,52,00),hx::paccDynamic)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x3_Impl__obj,copyFromShape,(void))

 ::hxmath::math::Matrix3x3Default Matrix3x3_Impl__obj::clone( ::hxmath::math::Matrix3x3Default this1){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","clone",0xef94e10c,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.clone","hxmath/math/Matrix3x3.hx",485,0xaae5f2a1)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 486)		HX_VARI(  ::hxmath::math::Matrix3x3Default,self) = this1;
HXLINE( 487)		return  ::hxmath::math::Matrix3x3Default_obj::__new(self->m00,self->m10,self->m20,self->m01,self->m11,self->m21,self->m02,self->m12,self->m22);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix3x3_Impl__obj,clone,return )

Float Matrix3x3_Impl__obj::getArrayElement( ::hxmath::math::Matrix3x3Default this1,Int i){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","getArrayElement",0xfcfdf248,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.getArrayElement","hxmath/math/Matrix3x3.hx",502,0xaae5f2a1)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(i,"i")
HXLINE( 503)		HX_VARI(  ::hxmath::math::Matrix3x3Default,self) = this1;
HXLINE( 505)		switch((int)(i)){
            			case (int)0: {
HXLINE( 508)				return self->m00;
            			}
            			break;
            			case (int)1: {
HXLINE( 510)				return self->m10;
            			}
            			break;
            			case (int)2: {
HXLINE( 512)				return self->m20;
            			}
            			break;
            			case (int)3: {
HXLINE( 514)				return self->m01;
            			}
            			break;
            			case (int)4: {
HXLINE( 516)				return self->m11;
            			}
            			break;
            			case (int)5: {
HXLINE( 518)				return self->m21;
            			}
            			break;
            			case (int)6: {
HXLINE( 520)				return self->m02;
            			}
            			break;
            			case (int)7: {
HXLINE( 522)				return self->m12;
            			}
            			break;
            			case (int)8: {
HXLINE( 524)				return self->m22;
            			}
            			break;
            			default:{
HXLINE( 526)				HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            			}
            		}
HXLINE( 505)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x3_Impl__obj,getArrayElement,return )

Float Matrix3x3_Impl__obj::setArrayElement( ::hxmath::math::Matrix3x3Default this1,Int i,Float value){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","setArrayElement",0xf8c96f54,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.setArrayElement","hxmath/math/Matrix3x3.hx",540,0xaae5f2a1)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(i,"i")
            	HX_STACK_ARG(value,"value")
HXLINE( 541)		HX_VARI(  ::hxmath::math::Matrix3x3Default,self) = this1;
HXLINE( 543)		switch((int)(i)){
            			case (int)0: {
HXLINE( 546)				return (self->m00 = value);
            			}
            			break;
            			case (int)1: {
HXLINE( 548)				return (self->m10 = value);
            			}
            			break;
            			case (int)2: {
HXLINE( 550)				return (self->m20 = value);
            			}
            			break;
            			case (int)3: {
HXLINE( 552)				return (self->m01 = value);
            			}
            			break;
            			case (int)4: {
HXLINE( 554)				return (self->m11 = value);
            			}
            			break;
            			case (int)5: {
HXLINE( 556)				return (self->m21 = value);
            			}
            			break;
            			case (int)6: {
HXLINE( 558)				return (self->m02 = value);
            			}
            			break;
            			case (int)7: {
HXLINE( 560)				return (self->m12 = value);
            			}
            			break;
            			case (int)8: {
HXLINE( 562)				return (self->m22 = value);
            			}
            			break;
            			default:{
HXLINE( 564)				HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            			}
            		}
HXLINE( 543)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix3x3_Impl__obj,setArrayElement,return )

Float Matrix3x3_Impl__obj::getElement( ::hxmath::math::Matrix3x3Default this1,Int column,Int row){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","getElement",0x1e516cb7,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.getElement","hxmath/math/Matrix3x3.hx",577,0xaae5f2a1)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(column,"column")
            	HX_STACK_ARG(row,"row")
HXLINE( 578)		HX_VARI(  ::hxmath::math::Matrix3x3Default,self) = this1;
HXLINE( 579)		 ::Dynamic _hx_tmp;
HXDLIN( 579)		switch((int)(((row * (int)3) + column))){
            			case (int)0: {
HXLINE( 579)				_hx_tmp = self->m00;
            			}
            			break;
            			case (int)1: {
HXLINE( 579)				_hx_tmp = self->m10;
            			}
            			break;
            			case (int)2: {
HXLINE( 579)				_hx_tmp = self->m20;
            			}
            			break;
            			case (int)3: {
HXLINE( 579)				_hx_tmp = self->m01;
            			}
            			break;
            			case (int)4: {
HXLINE( 579)				_hx_tmp = self->m11;
            			}
            			break;
            			case (int)5: {
HXLINE( 579)				_hx_tmp = self->m21;
            			}
            			break;
            			case (int)6: {
HXLINE( 579)				_hx_tmp = self->m02;
            			}
            			break;
            			case (int)7: {
HXLINE( 579)				_hx_tmp = self->m12;
            			}
            			break;
            			case (int)8: {
HXLINE( 579)				_hx_tmp = self->m22;
            			}
            			break;
            			default:{
HXLINE( 579)				HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            			}
            		}
HXDLIN( 579)		return ( (Float)(_hx_tmp) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix3x3_Impl__obj,getElement,return )

Float Matrix3x3_Impl__obj::setElement( ::hxmath::math::Matrix3x3Default this1,Int column,Int row,Float value){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","setElement",0x21cf0b2b,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.setElement","hxmath/math/Matrix3x3.hx",592,0xaae5f2a1)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(column,"column")
            	HX_STACK_ARG(row,"row")
            	HX_STACK_ARG(value,"value")
HXLINE( 593)		HX_VARI(  ::hxmath::math::Matrix3x3Default,self) = this1;
HXLINE( 594)		 ::Dynamic _hx_tmp;
HXDLIN( 594)		switch((int)(((row * (int)3) + column))){
            			case (int)0: {
HXLINE( 594)				_hx_tmp = (self->m00 = value);
            			}
            			break;
            			case (int)1: {
HXLINE( 594)				_hx_tmp = (self->m10 = value);
            			}
            			break;
            			case (int)2: {
HXLINE( 594)				_hx_tmp = (self->m20 = value);
            			}
            			break;
            			case (int)3: {
HXLINE( 594)				_hx_tmp = (self->m01 = value);
            			}
            			break;
            			case (int)4: {
HXLINE( 594)				_hx_tmp = (self->m11 = value);
            			}
            			break;
            			case (int)5: {
HXLINE( 594)				_hx_tmp = (self->m21 = value);
            			}
            			break;
            			case (int)6: {
HXLINE( 594)				_hx_tmp = (self->m02 = value);
            			}
            			break;
            			case (int)7: {
HXLINE( 594)				_hx_tmp = (self->m12 = value);
            			}
            			break;
            			case (int)8: {
HXLINE( 594)				_hx_tmp = (self->m22 = value);
            			}
            			break;
            			default:{
HXLINE( 594)				HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            			}
            		}
HXDLIN( 594)		return ( (Float)(_hx_tmp) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix3x3_Impl__obj,setElement,return )

 ::hxmath::math::Vector3Default Matrix3x3_Impl__obj::col( ::hxmath::math::Matrix3x3Default this1,Int index){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","col",0xf2b5342f,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.col","hxmath/math/Matrix3x3.hx",604,0xaae5f2a1)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(index,"index")
HXLINE( 605)		HX_VARI(  ::hxmath::math::Matrix3x3Default,self) = this1;
HXLINE( 607)		switch((int)(index)){
            			case (int)0: {
HXLINE( 610)				return  ::hxmath::math::Vector3Default_obj::__new(self->m00,self->m01,self->m02);
            			}
            			break;
            			case (int)1: {
HXLINE( 612)				return  ::hxmath::math::Vector3Default_obj::__new(self->m10,self->m11,self->m12);
            			}
            			break;
            			case (int)2: {
HXLINE( 614)				return  ::hxmath::math::Vector3Default_obj::__new(self->m20,self->m21,self->m22);
            			}
            			break;
            			default:{
HXLINE( 616)				HX_STACK_DO_THROW(HX_("Invalid column",ff,3c,03,94));
            			}
            		}
HXLINE( 607)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x3_Impl__obj,col,return )

 ::hxmath::math::Vector3Default Matrix3x3_Impl__obj::row( ::hxmath::math::Matrix3x3Default this1,Int index){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","row",0xf2c09609,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.row","hxmath/math/Matrix3x3.hx",627,0xaae5f2a1)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(index,"index")
HXLINE( 628)		HX_VARI(  ::hxmath::math::Matrix3x3Default,self) = this1;
HXLINE( 630)		switch((int)(index)){
            			case (int)0: {
HXLINE( 633)				return  ::hxmath::math::Vector3Default_obj::__new(self->m00,self->m10,self->m20);
            			}
            			break;
            			case (int)1: {
HXLINE( 635)				return  ::hxmath::math::Vector3Default_obj::__new(self->m01,self->m11,self->m21);
            			}
            			break;
            			case (int)2: {
HXLINE( 637)				return  ::hxmath::math::Vector3Default_obj::__new(self->m02,self->m12,self->m22);
            			}
            			break;
            			default:{
HXLINE( 639)				HX_STACK_DO_THROW(HX_("Invalid row",51,70,e6,76));
            			}
            		}
HXLINE( 630)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x3_Impl__obj,row,return )

 ::hxmath::math::Matrix3x3Default Matrix3x3_Impl__obj::applyScalarFunc( ::hxmath::math::Matrix3x3Default this1, ::Dynamic func){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","applyScalarFunc",0xa93b420d,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.applyScalarFunc","hxmath/math/Matrix3x3.hx",650,0xaae5f2a1)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(func,"func")
HXLINE( 651)		HX_VARI(  ::hxmath::math::Matrix3x3Default,self) = this1;
HXLINE( 653)		{
HXLINE( 653)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 653)			while((_g < (int)9)){
HXLINE( 653)				HX_VARI( Int,i) = _g++;
HXLINE( 655)				{
HXLINE( 655)					 ::Dynamic _hx_tmp;
HXDLIN( 655)					switch((int)(i)){
            						case (int)0: {
HXLINE( 655)							_hx_tmp = self->m00;
            						}
            						break;
            						case (int)1: {
HXLINE( 655)							_hx_tmp = self->m10;
            						}
            						break;
            						case (int)2: {
HXLINE( 655)							_hx_tmp = self->m20;
            						}
            						break;
            						case (int)3: {
HXLINE( 655)							_hx_tmp = self->m01;
            						}
            						break;
            						case (int)4: {
HXLINE( 655)							_hx_tmp = self->m11;
            						}
            						break;
            						case (int)5: {
HXLINE( 655)							_hx_tmp = self->m21;
            						}
            						break;
            						case (int)6: {
HXLINE( 655)							_hx_tmp = self->m02;
            						}
            						break;
            						case (int)7: {
HXLINE( 655)							_hx_tmp = self->m12;
            						}
            						break;
            						case (int)8: {
HXLINE( 655)							_hx_tmp = self->m22;
            						}
            						break;
            						default:{
HXLINE( 655)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 655)					HX_VARI( Float,value) = ( (Float)(func(_hx_tmp)) );
HXDLIN( 655)					switch((int)(i)){
            						case (int)0: {
HXLINE( 655)							self->m00 = value;
            						}
            						break;
            						case (int)1: {
HXLINE( 655)							self->m10 = value;
            						}
            						break;
            						case (int)2: {
HXLINE( 655)							self->m20 = value;
            						}
            						break;
            						case (int)3: {
HXLINE( 655)							self->m01 = value;
            						}
            						break;
            						case (int)4: {
HXLINE( 655)							self->m11 = value;
            						}
            						break;
            						case (int)5: {
HXLINE( 655)							self->m21 = value;
            						}
            						break;
            						case (int)6: {
HXLINE( 655)							self->m02 = value;
            						}
            						break;
            						case (int)7: {
HXLINE( 655)							self->m12 = value;
            						}
            						break;
            						case (int)8: {
HXLINE( 655)							self->m22 = value;
            						}
            						break;
            						default:{
HXLINE( 655)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXLINE( 658)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x3_Impl__obj,applyScalarFunc,return )

 ::hxmath::math::Matrix3x3Default Matrix3x3_Impl__obj::get_zero(){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","get_zero",0xf2847462,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.get_zero","hxmath/math/Matrix3x3.hx",663,0xaae5f2a1)
HXLINE( 663)		return  ::hxmath::math::Matrix3x3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Matrix3x3_Impl__obj,get_zero,return )

 ::hxmath::math::Matrix3x3Default Matrix3x3_Impl__obj::get_identity(){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","get_identity",0xfe16cf78,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.get_identity","hxmath/math/Matrix3x3.hx",671,0xaae5f2a1)
HXLINE( 671)		return  ::hxmath::math::Matrix3x3Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Matrix3x3_Impl__obj,get_identity,return )

Float Matrix3x3_Impl__obj::get_det( ::hxmath::math::Matrix3x3Default this1){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","get_det",0x5844d9d9,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.get_det","hxmath/math/Matrix3x3.hx",678,0xaae5f2a1)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 679)		HX_VARI(  ::hxmath::math::Matrix3x3Default,self) = this1;
HXLINE( 681)		HX_VARI( Float,m00) = self->m00;
HXDLIN( 681)		HX_VARI( Float,m10) = self->m10;
HXDLIN( 681)		HX_VARI( Float,m20) = self->m20;
HXLINE( 682)		HX_VARI( Float,m01) = self->m01;
HXDLIN( 682)		HX_VARI( Float,m11) = self->m11;
HXDLIN( 682)		HX_VARI( Float,m21) = self->m21;
HXLINE( 683)		HX_VARI( Float,m02) = self->m02;
HXDLIN( 683)		HX_VARI( Float,m12) = self->m12;
HXDLIN( 683)		HX_VARI( Float,m22) = self->m22;
HXLINE( 680)		return (((m00 * ((m11 * m22) - (m21 * m12))) - (m10 * ((m01 * m22) - (m21 * m02)))) + (m20 * ((m01 * m12) - (m11 * m02))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix3x3_Impl__obj,get_det,return )

 ::hxmath::math::Matrix3x3Default Matrix3x3_Impl__obj::get_transpose( ::hxmath::math::Matrix3x3Default this1){
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","get_transpose",0x51e0b8ff,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.get_transpose","hxmath/math/Matrix3x3.hx",687,0xaae5f2a1)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 688)		HX_VARI(  ::hxmath::math::Matrix3x3Default,self) = this1;
HXLINE( 689)		return  ::hxmath::math::Matrix3x3Default_obj::__new(self->m00,self->m01,self->m02,self->m10,self->m11,self->m12,self->m20,self->m21,self->m22);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix3x3_Impl__obj,get_transpose,return )


Matrix3x3_Impl__obj::Matrix3x3_Impl__obj()
{
}

bool Matrix3x3_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"col") ) { outValue = col_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"row") ) { outValue = row_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { outValue = scale_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clone") ) { outValue = clone_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"negate") ) { outValue = negate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyTo") ) { outValue = copyTo_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addWith") ) { outValue = addWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_det") ) { outValue = get_det_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"multiply") ) { outValue = multiply_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subtract") ) { outValue = subtract_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_zero") ) { outValue = get_zero_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromArray") ) { outValue = fromArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rotationX") ) { outValue = rotationX_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rotationY") ) { outValue = rotationY_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rotationZ") ) { outValue = rotationZ_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getElement") ) { outValue = getElement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setElement") ) { outValue = setElement_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"copyToShape") ) { outValue = copyToShape_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"subtractWith") ) { outValue = subtractWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_identity") ) { outValue = get_identity_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"copyFromShape") ) { outValue = copyFromShape_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_transpose") ) { outValue = get_transpose_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"multiplyScalar") ) { outValue = multiplyScalar_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"multiplyVector") ) { outValue = multiplyVector_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getArrayElement") ) { outValue = getArrayElement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setArrayElement") ) { outValue = setArrayElement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"applyScalarFunc") ) { outValue = applyScalarFunc_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"fromMatrix3x3Shape") ) { outValue = fromMatrix3x3Shape_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Matrix3x3_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo Matrix3x3_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Matrix3x3_Impl__obj::elementCount,HX_HCSTRING("elementCount","\x73","\x1c","\x9d","\xaa")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Matrix3x3_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Matrix3x3_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Matrix3x3_Impl__obj::elementCount,"elementCount");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Matrix3x3_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Matrix3x3_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Matrix3x3_Impl__obj::elementCount,"elementCount");
};

#endif

hx::Class Matrix3x3_Impl__obj::__mClass;

static ::String Matrix3x3_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("elementCount","\x73","\x1c","\x9d","\xaa"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("fromArray","\xcf","\x57","\x18","\xda"),
	HX_HCSTRING("fromMatrix3x3Shape","\xde","\x1e","\x93","\xb1"),
	HX_HCSTRING("multiplyScalar","\x70","\x70","\x21","\x48"),
	HX_HCSTRING("multiplyVector","\x07","\x3a","\x59","\xa3"),
	HX_HCSTRING("multiply","\x24","\xe2","\x8c","\x9a"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("subtract","\x14","\x75","\x11","\xf8"),
	HX_HCSTRING("negate","\xc2","\x41","\x19","\x67"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("rotationX","\x5a","\x59","\xef","\x6c"),
	HX_HCSTRING("rotationY","\x5b","\x59","\xef","\x6c"),
	HX_HCSTRING("rotationZ","\x5c","\x59","\xef","\x6c"),
	HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("addWith","\xc7","\xb8","\x35","\x8b"),
	HX_HCSTRING("subtractWith","\x3a","\x31","\x45","\x74"),
	HX_HCSTRING("copyTo","\x90","\x1c","\x33","\xc9"),
	HX_HCSTRING("copyToShape","\x71","\xac","\xb5","\x9e"),
	HX_HCSTRING("copyFromShape","\xe2","\x52","\x6b","\x92"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("getArrayElement","\xd9","\x93","\x9e","\xda"),
	HX_HCSTRING("setArrayElement","\xe5","\x10","\x6a","\xd6"),
	HX_HCSTRING("getElement","\xc6","\x34","\xb6","\x55"),
	HX_HCSTRING("setElement","\x3a","\xd3","\x33","\x59"),
	HX_HCSTRING("col","\x40","\x80","\x4b","\x00"),
	HX_HCSTRING("row","\x1a","\xe2","\x56","\x00"),
	HX_HCSTRING("applyScalarFunc","\x9e","\xe3","\xdb","\x86"),
	HX_HCSTRING("get_zero","\xb1","\xca","\xab","\xd0"),
	HX_HCSTRING("get_identity","\x47","\xf9","\x48","\x6e"),
	HX_HCSTRING("get_det","\x6a","\x02","\xc1","\x26"),
	HX_HCSTRING("get_transpose","\x50","\x24","\x93","\x0d"),
	::String(null())
};

void Matrix3x3_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hxmath.math._Matrix3x3.Matrix3x3_Impl_","\xdd","\xb0","\xdb","\x04");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Matrix3x3_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Matrix3x3_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Matrix3x3_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Matrix3x3_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Matrix3x3_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Matrix3x3_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Matrix3x3_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Matrix3x3_Impl__obj::__boot()
{
{
            	HX_STACK_FRAME("hxmath.math._Matrix3x3.Matrix3x3_Impl_","boot",0x6b2f4163,"hxmath.math._Matrix3x3.Matrix3x3_Impl_.boot","hxmath/math/Matrix3x3.hx",72,0xaae5f2a1)
HXLINE(  72)		elementCount = (int)9;
            	}
}

} // end namespace hxmath
} // end namespace math
} // end namespace _Matrix3x3
