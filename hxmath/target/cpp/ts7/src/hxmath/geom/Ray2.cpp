// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_hxmath_geom_Ray2
#include <hxmath/geom/Ray2.h>
#endif
#ifndef INCLUDED_hxmath_math_Vector2Default
#include <hxmath/math/Vector2Default.h>
#endif

namespace hxmath{
namespace geom{

void Ray2_obj::__construct( ::hxmath::math::Vector2Default origin, ::hxmath::math::Vector2Default normal){
            	HX_STACK_FRAME("hxmath.geom.Ray2","new",0x336129f6,"hxmath.geom.Ray2.new","hxmath/geom/Ray2.hx",22,0x3243b5da)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(origin,"origin")
            	HX_STACK_ARG(normal,"normal")
HXLINE(  23)		this->origin = origin;
HXLINE(  24)		this->normal = normal;
            	}

Dynamic Ray2_obj::__CreateEmpty() { return new Ray2_obj; }

hx::ObjectPtr< Ray2_obj > Ray2_obj::__new( ::hxmath::math::Vector2Default origin, ::hxmath::math::Vector2Default normal)
{
	hx::ObjectPtr< Ray2_obj > _hx_result = new Ray2_obj();
	_hx_result->__construct(origin,normal);
	return _hx_result;
}

Dynamic Ray2_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Ray2_obj > _hx_result = new Ray2_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

 ::hxmath::math::Vector2Default Ray2_obj::eval(Float t){
            	HX_STACK_FRAME("hxmath.geom.Ray2","eval",0xbbbd7546,"hxmath.geom.Ray2.eval","hxmath/geom/Ray2.hx",35,0x3243b5da)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(t,"t")
HXLINE(  35)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this->normal;
HXDLIN(  35)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self1,"self") =  ::hxmath::math::Vector2Default_obj::__new(self->x,self->y);
HXDLIN(  35)		hx::MultEq(self1->x,t);
HXDLIN(  35)		hx::MultEq(self1->y,t);
HXDLIN(  35)		HX_VARI(  ::hxmath::math::Vector2Default,b) = this->origin;
HXDLIN(  35)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self2,"self") =  ::hxmath::math::Vector2Default_obj::__new(self1->x,self1->y);
HXDLIN(  35)		hx::AddEq(self2->x,b->x);
HXDLIN(  35)		hx::AddEq(self2->y,b->y);
HXDLIN(  35)		return self2;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Ray2_obj,eval,return )

Float Ray2_obj::intersectPoint( ::hxmath::math::Vector2Default point,hx::Null< Float >  __o_tolerance){
Float tolerance = __o_tolerance.Default(((Float)1e-6));
            	HX_STACK_FRAME("hxmath.geom.Ray2","intersectPoint",0x8a171d1b,"hxmath.geom.Ray2.intersectPoint","hxmath/geom/Ray2.hx",46,0x3243b5da)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
            	HX_STACK_ARG(tolerance,"tolerance")
HXLINE(  48)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this->normal;
HXDLIN(  48)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self1,"self") =  ::hxmath::math::Vector2Default_obj::__new(self->x,self->y);
HXDLIN(  48)		HX_VARI( Float,newX) = -(self1->y);
HXDLIN(  48)		self1->y = self1->x;
HXDLIN(  48)		self1->x = newX;
HXLINE(  51)		HX_VARI(  ::hxmath::math::Vector2Default,b) = this->origin;
HXDLIN(  51)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self2,"self") =  ::hxmath::math::Vector2Default_obj::__new(point->x,point->y);
HXDLIN(  51)		hx::SubEq(self2->x,b->x);
HXDLIN(  51)		hx::SubEq(self2->y,b->y);
HXDLIN(  51)		HX_VARI( Float,d) = ((self2->x * self1->x) + (self2->y * self1->y));
HXLINE(  52)		if ((d < tolerance)) {
HXLINE(  55)			HX_VARI_NAME(  ::hxmath::math::Vector2Default,b1,"b") = this->origin;
HXDLIN(  55)			HX_VARI_NAME(  ::hxmath::math::Vector2Default,self3,"self") =  ::hxmath::math::Vector2Default_obj::__new(point->x,point->y);
HXDLIN(  55)			hx::SubEq(self3->x,b1->x);
HXDLIN(  55)			hx::SubEq(self3->y,b1->y);
HXDLIN(  55)			HX_VARI_NAME(  ::hxmath::math::Vector2Default,b2,"b") = this->normal;
HXDLIN(  55)			HX_VARI( Float,t) = ((self3->x * b2->x) + (self3->y * b2->y));
HXLINE(  57)			if ((t >= ((Float)0.0))) {
HXLINE(  59)				return t;
            			}
            		}
HXLINE(  63)		return ::Math_obj::NEGATIVE_INFINITY;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Ray2_obj,intersectPoint,return )

Int Ray2_obj::getClosestPoint(::Array< ::Dynamic> points,hx::Null< Float >  __o_tolerance){
Float tolerance = __o_tolerance.Default(((Float)1e-6));
            	HX_STACK_FRAME("hxmath.geom.Ray2","getClosestPoint",0xe7a9df83,"hxmath.geom.Ray2.getClosestPoint","hxmath/geom/Ray2.hx",74,0x3243b5da)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(points,"points")
            	HX_STACK_ARG(tolerance,"tolerance")
HXLINE(  75)		HX_VARI( Float,closestHit) = ::Math_obj::NEGATIVE_INFINITY;
HXLINE(  76)		HX_VARI( Int,hitIndex) = (int)-1;
HXLINE(  77)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this->normal;
HXDLIN(  77)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self1,"self") =  ::hxmath::math::Vector2Default_obj::__new(self->x,self->y);
HXDLIN(  77)		HX_VARI( Float,newX) = -(self1->y);
HXDLIN(  77)		self1->y = self1->x;
HXDLIN(  77)		self1->x = newX;
HXLINE(  79)		{
HXLINE(  79)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  79)			HX_VARI( Int,_g) = points->length;
HXDLIN(  79)			while((_g1 < _g)){
HXLINE(  79)				HX_VARI( Int,i) = _g1++;
HXLINE(  81)				HX_VARI( Float,t) = this->intersectPoint(points->__get(i).StaticCast<  ::hxmath::math::Vector2Default >(),tolerance);
HXLINE(  82)				Bool _hx_tmp;
HXDLIN(  82)				if ((t > ((Float)0.0))) {
HXLINE(  83)					if ((hitIndex != (int)-1)) {
HXLINE(  83)						if ((t < closestHit)) {
HXLINE(  82)							_hx_tmp = (t >= ((Float)0.0));
            						}
            						else {
HXLINE(  82)							_hx_tmp = false;
            						}
            					}
            					else {
HXLINE(  82)						_hx_tmp = true;
            					}
            				}
            				else {
HXLINE(  82)					_hx_tmp = false;
            				}
HXDLIN(  82)				if (_hx_tmp) {
HXLINE(  85)					hitIndex = i;
HXLINE(  86)					closestHit = t;
            				}
            			}
            		}
HXLINE(  90)		return hitIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Ray2_obj,getClosestPoint,return )


Ray2_obj::Ray2_obj()
{
}

void Ray2_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Ray2);
	HX_MARK_MEMBER_NAME(origin,"origin");
	HX_MARK_MEMBER_NAME(normal,"normal");
	HX_MARK_END_CLASS();
}

void Ray2_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(origin,"origin");
	HX_VISIT_MEMBER_NAME(normal,"normal");
}

hx::Val Ray2_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"eval") ) { return hx::Val( eval_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"origin") ) { return hx::Val( origin); }
		if (HX_FIELD_EQ(inName,"normal") ) { return hx::Val( normal); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"intersectPoint") ) { return hx::Val( intersectPoint_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getClosestPoint") ) { return hx::Val( getClosestPoint_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Ray2_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"origin") ) { origin=inValue.Cast<  ::hxmath::math::Vector2Default >(); return inValue; }
		if (HX_FIELD_EQ(inName,"normal") ) { normal=inValue.Cast<  ::hxmath::math::Vector2Default >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Ray2_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("origin","\xe6","\x19","\x01","\x4b"));
	outFields->push(HX_HCSTRING("normal","\x27","\x72","\x69","\x30"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Ray2_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::hxmath::math::Vector2Default*/ ,(int)offsetof(Ray2_obj,origin),HX_HCSTRING("origin","\xe6","\x19","\x01","\x4b")},
	{hx::fsObject /*::hxmath::math::Vector2Default*/ ,(int)offsetof(Ray2_obj,normal),HX_HCSTRING("normal","\x27","\x72","\x69","\x30")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Ray2_obj_sStaticStorageInfo = 0;
#endif

static ::String Ray2_obj_sMemberFields[] = {
	HX_HCSTRING("origin","\xe6","\x19","\x01","\x4b"),
	HX_HCSTRING("normal","\x27","\x72","\x69","\x30"),
	HX_HCSTRING("eval","\x9c","\x6b","\x1c","\x43"),
	HX_HCSTRING("intersectPoint","\xf1","\x9a","\xbd","\x38"),
	HX_HCSTRING("getClosestPoint","\xed","\x7c","\xb1","\x0a"),
	::String(null()) };

static void Ray2_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Ray2_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Ray2_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Ray2_obj::__mClass,"__mClass");
};

#endif

hx::Class Ray2_obj::__mClass;

void Ray2_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hxmath.geom.Ray2","\x04","\xb7","\x63","\x85");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Ray2_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Ray2_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Ray2_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Ray2_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Ray2_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Ray2_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxmath
} // end namespace geom
