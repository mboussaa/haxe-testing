// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_hxmath_geom_Rect
#include <hxmath/geom/Rect.h>
#endif
#ifndef INCLUDED_hxmath_math_Matrix3x2Default
#include <hxmath/math/Matrix3x2Default.h>
#endif
#ifndef INCLUDED_hxmath_math_Vector2Default
#include <hxmath/math/Vector2Default.h>
#endif

namespace hxmath{
namespace geom{

void Rect_obj::__construct(Float x,Float y,Float width,Float height){
            	HX_STACK_FRAME("hxmath.geom.Rect","new",0x0e4f5e12,"hxmath.geom.Rect.new","hxmath/geom/Rect.hx",49,0x4c80793e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE(  50)		this->x = x;
HXLINE(  51)		this->y = y;
HXLINE(  52)		this->width = width;
HXLINE(  53)		this->height = height;
            	}

Dynamic Rect_obj::__CreateEmpty() { return new Rect_obj; }

hx::ObjectPtr< Rect_obj > Rect_obj::__new(Float x,Float y,Float width,Float height)
{
	hx::ObjectPtr< Rect_obj > _hx_result = new Rect_obj();
	_hx_result->__construct(x,y,width,height);
	return _hx_result;
}

Dynamic Rect_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Rect_obj > _hx_result = new Rect_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

Bool Rect_obj::equals( ::hxmath::geom::Rect r){
            	HX_STACK_FRAME("hxmath.geom.Rect","equals",0x09957bcd,"hxmath.geom.Rect.equals","hxmath/geom/Rect.hx",103,0x4c80793e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(r,"r")
HXLINE( 103)		Bool _hx_tmp;
HXDLIN( 103)		Bool _hx_tmp1;
HXDLIN( 103)		Bool _hx_tmp2;
HXDLIN( 103)		if (hx::IsNotNull( r )) {
HXLINE( 104)			_hx_tmp2 = (this->x == r->x);
            		}
            		else {
HXLINE( 103)			_hx_tmp2 = false;
            		}
HXDLIN( 103)		if (_hx_tmp2) {
HXLINE( 105)			_hx_tmp1 = (this->y == r->y);
            		}
            		else {
HXLINE( 103)			_hx_tmp1 = false;
            		}
HXDLIN( 103)		if (_hx_tmp1) {
HXLINE( 106)			_hx_tmp = (this->width == r->width);
            		}
            		else {
HXLINE( 103)			_hx_tmp = false;
            		}
HXDLIN( 103)		if (_hx_tmp) {
HXLINE( 103)			return (this->height == r->height);
            		}
            		else {
HXLINE( 103)			return false;
            		}
HXDLIN( 103)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rect_obj,equals,return )

 ::hxmath::geom::Rect Rect_obj::clone(){
            	HX_STACK_FRAME("hxmath.geom.Rect","clone",0x76a2f18f,"hxmath.geom.Rect.clone","hxmath/geom/Rect.hx",117,0x4c80793e)
            	HX_STACK_THIS(this)
HXLINE( 117)		return  ::hxmath::geom::Rect_obj::__new(this->x,this->y,this->width,this->height);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rect_obj,clone,return )

void Rect_obj::copyTo( ::Dynamic r){
            	HX_STACK_FRAME("hxmath.geom.Rect","copyTo",0x12d5aa1e,"hxmath.geom.Rect.copyTo","hxmath/geom/Rect.hx",126,0x4c80793e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(r,"r")
HXLINE( 127)		r->__SetField(HX_("x",78,00,00,00),this->x,hx::paccDynamic);
HXLINE( 128)		r->__SetField(HX_("y",79,00,00,00),this->y,hx::paccDynamic);
HXLINE( 129)		r->__SetField(HX_("width",06,b6,62,ca),this->width,hx::paccDynamic);
HXLINE( 130)		r->__SetField(HX_("height",e7,07,4c,02),this->height,hx::paccDynamic);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rect_obj,copyTo,(void))

Bool Rect_obj::overlaps( ::hxmath::geom::Rect r){
            	HX_STACK_FRAME("hxmath.geom.Rect","overlaps",0x26b6601a,"hxmath.geom.Rect.overlaps","hxmath/geom/Rect.hx",143,0x4c80793e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(r,"r")
HXLINE( 143)		HX_VARI( Float,aStart) = this->x;
HXDLIN( 143)		HX_VARI( Float,aWidth) = this->width;
HXDLIN( 143)		HX_VARI( Float,bStart) = r->x;
HXDLIN( 143)		HX_VARI( Float,bWidth) = r->width;
HXDLIN( 143)		Bool _hx_tmp;
HXDLIN( 143)		if (!((aStart >= (bStart + bWidth)))) {
HXLINE( 143)			_hx_tmp = (bStart >= (aStart + aWidth));
            		}
            		else {
HXLINE( 143)			_hx_tmp = true;
            		}
HXDLIN( 143)		if (!(_hx_tmp)) {
HXLINE( 144)			HX_VARI_NAME( Float,aStart1,"aStart") = this->y;
HXDLIN( 144)			HX_VARI_NAME( Float,aWidth1,"aWidth") = this->height;
HXDLIN( 144)			HX_VARI_NAME( Float,bStart1,"bStart") = r->y;
HXDLIN( 144)			HX_VARI_NAME( Float,bWidth1,"bWidth") = r->height;
HXDLIN( 144)			Bool _hx_tmp1;
HXDLIN( 144)			if (!((aStart1 >= (bStart1 + bWidth1)))) {
HXLINE( 144)				_hx_tmp1 = (bStart1 >= (aStart1 + aWidth1));
            			}
            			else {
HXLINE( 144)				_hx_tmp1 = true;
            			}
HXLINE( 143)			return !(_hx_tmp1);
            		}
            		else {
HXLINE( 143)			return false;
            		}
HXDLIN( 143)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rect_obj,overlaps,return )

 ::hxmath::geom::Rect Rect_obj::intersect( ::hxmath::geom::Rect r){
            	HX_STACK_FRAME("hxmath.geom.Rect","intersect",0xbb04e011,"hxmath.geom.Rect.intersect","hxmath/geom/Rect.hx",155,0x4c80793e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(r,"r")
HXLINE( 155)		HX_VARI(  ::hxmath::geom::Rect,_this) =  ::hxmath::geom::Rect_obj::__new(this->x,this->y,this->width,this->height);
HXDLIN( 155)		Bool _hx_tmp = (_this->x < r->x);
HXDLIN( 155)		if (_hx_tmp) {
HXLINE( 155)			hx::SubEq(_this->width,(r->x - _this->x));
HXDLIN( 155)			_this->x = r->x;
            		}
HXDLIN( 155)		Bool _hx_tmp1 = (_this->y < r->y);
HXDLIN( 155)		if (_hx_tmp1) {
HXLINE( 155)			hx::SubEq(_this->height,(r->y - _this->y));
HXDLIN( 155)			_this->y = r->y;
            		}
HXDLIN( 155)		Bool _hx_tmp2 = ((_this->x + _this->width) > (r->x + r->width));
HXDLIN( 155)		if (_hx_tmp2) {
HXLINE( 155)			Float _hx_tmp3 = (_this->x + _this->width);
HXDLIN( 155)			Float _hx_tmp4 = (r->x + r->width);
HXDLIN( 155)			hx::SubEq(_this->width,(_hx_tmp3 - _hx_tmp4));
            		}
HXDLIN( 155)		Bool _hx_tmp5 = ((_this->y + _this->height) > (r->y + r->height));
HXDLIN( 155)		if (_hx_tmp5) {
HXLINE( 155)			Float _hx_tmp6 = (_this->y + _this->height);
HXDLIN( 155)			Float _hx_tmp7 = (r->y + r->height);
HXDLIN( 155)			hx::SubEq(_this->height,(_hx_tmp6 - _hx_tmp7));
            		}
HXDLIN( 155)		return _this;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rect_obj,intersect,return )

 ::hxmath::geom::Rect Rect_obj::intersectWith( ::hxmath::geom::Rect r){
            	HX_STACK_FRAME("hxmath.geom.Rect","intersectWith",0x52965eb7,"hxmath.geom.Rect.intersectWith","hxmath/geom/Rect.hx",166,0x4c80793e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(r,"r")
HXLINE( 168)		Bool _hx_tmp = (this->x < r->x);
HXDLIN( 168)		if (_hx_tmp) {
HXLINE( 170)			hx::SubEq(this->width,(r->x - this->x));
HXLINE( 171)			this->x = r->x;
            		}
HXLINE( 175)		Bool _hx_tmp1 = (this->y < r->y);
HXDLIN( 175)		if (_hx_tmp1) {
HXLINE( 177)			hx::SubEq(this->height,(r->y - this->y));
HXLINE( 178)			this->y = r->y;
            		}
HXLINE( 182)		Bool _hx_tmp2 = ((this->x + this->width) > (r->x + r->width));
HXDLIN( 182)		if (_hx_tmp2) {
HXLINE( 184)			Float _hx_tmp3 = (this->x + this->width);
HXDLIN( 184)			Float _hx_tmp4 = (r->x + r->width);
HXDLIN( 184)			hx::SubEq(this->width,(_hx_tmp3 - _hx_tmp4));
            		}
HXLINE( 188)		Bool _hx_tmp5 = ((this->y + this->height) > (r->y + r->height));
HXDLIN( 188)		if (_hx_tmp5) {
HXLINE( 190)			Float _hx_tmp6 = (this->y + this->height);
HXDLIN( 190)			Float _hx_tmp7 = (r->y + r->height);
HXDLIN( 190)			hx::SubEq(this->height,(_hx_tmp6 - _hx_tmp7));
            		}
HXLINE( 193)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rect_obj,intersectWith,return )

Bool Rect_obj::containsPoint( ::hxmath::math::Vector2Default p){
            	HX_STACK_FRAME("hxmath.geom.Rect","containsPoint",0x246019e3,"hxmath.geom.Rect.containsPoint","hxmath/geom/Rect.hx",205,0x4c80793e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(p,"p")
HXLINE( 205)		HX_VARI( Float,aStart) = this->x;
HXDLIN( 205)		HX_VARI( Float,aWidth) = this->width;
HXDLIN( 205)		HX_VARI( Float,x) = p->x;
HXDLIN( 205)		Bool _hx_tmp;
HXDLIN( 205)		if ((x >= aStart)) {
HXLINE( 205)			_hx_tmp = (x <= (aStart + aWidth));
            		}
            		else {
HXLINE( 205)			_hx_tmp = false;
            		}
HXDLIN( 205)		if (_hx_tmp) {
HXLINE( 206)			HX_VARI_NAME( Float,aStart1,"aStart") = this->y;
HXDLIN( 206)			HX_VARI_NAME( Float,aWidth1,"aWidth") = this->height;
HXDLIN( 206)			HX_VARI_NAME( Float,x1,"x") = p->y;
HXDLIN( 206)			if ((x1 >= aStart1)) {
HXLINE( 205)				return (x1 <= (aStart1 + aWidth1));
            			}
            			else {
HXLINE( 205)				return false;
            			}
            		}
            		else {
HXLINE( 205)			return false;
            		}
HXDLIN( 205)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rect_obj,containsPoint,return )

Float Rect_obj::distanceToPoint( ::hxmath::math::Vector2Default p){
            	HX_STACK_FRAME("hxmath.geom.Rect","distanceToPoint",0x43f7e6d2,"hxmath.geom.Rect.distanceToPoint","hxmath/geom/Rect.hx",216,0x4c80793e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(p,"p")
HXLINE( 217)		Float _hx_tmp = p->x;
HXDLIN( 217)		Float _hx_tmp1 = (this->x + (((Float)0.5) * this->width));
HXDLIN( 217)		Float _hx_tmp2 = ::Math_obj::abs((_hx_tmp - _hx_tmp1));
HXDLIN( 217)		Float _hx_tmp3 = (_hx_tmp2 - (((Float)0.5) * this->width));
HXDLIN( 217)		HX_VARI( Float,dx) = ::Math_obj::max(_hx_tmp3,(int)0);
HXLINE( 218)		Float _hx_tmp4 = p->y;
HXDLIN( 218)		Float _hx_tmp5 = (this->y + (((Float)0.5) * this->height));
HXDLIN( 218)		Float _hx_tmp6 = ::Math_obj::abs((_hx_tmp4 - _hx_tmp5));
HXDLIN( 218)		Float _hx_tmp7 = (_hx_tmp6 - (((Float)0.5) * this->height));
HXDLIN( 218)		HX_VARI( Float,dy) = ::Math_obj::max(_hx_tmp7,(int)0);
HXLINE( 219)		return ::Math_obj::sqrt(((dx * dx) + (dy * dy)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rect_obj,distanceToPoint,return )

Float Rect_obj::distanceToRect( ::hxmath::geom::Rect r){
            	HX_STACK_FRAME("hxmath.geom.Rect","distanceToRect",0x063060e2,"hxmath.geom.Rect.distanceToRect","hxmath/geom/Rect.hx",229,0x4c80793e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(r,"r")
HXLINE( 230)		Float _hx_tmp = (r->x + (((Float)0.5) * r->width));
HXDLIN( 230)		Float _hx_tmp1 = (this->x + (((Float)0.5) * this->width));
HXDLIN( 230)		Float _hx_tmp2 = ::Math_obj::abs((_hx_tmp - _hx_tmp1));
HXDLIN( 230)		Float _hx_tmp3 = (((Float)0.5) * (this->width + r->width));
HXDLIN( 230)		HX_VARI( Float,dx) = ::Math_obj::max((_hx_tmp2 - _hx_tmp3),(int)0);
HXLINE( 231)		Float _hx_tmp4 = (r->y + (((Float)0.5) * r->height));
HXDLIN( 231)		Float _hx_tmp5 = (this->y + (((Float)0.5) * this->height));
HXDLIN( 231)		Float _hx_tmp6 = ::Math_obj::abs((_hx_tmp4 - _hx_tmp5));
HXDLIN( 231)		Float _hx_tmp7 = (((Float)0.5) * (this->height + r->height));
HXDLIN( 231)		HX_VARI( Float,dy) = ::Math_obj::max((_hx_tmp6 - _hx_tmp7),(int)0);
HXLINE( 232)		return ::Math_obj::sqrt(((dx * dx) + (dy * dy)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rect_obj,distanceToRect,return )

 ::hxmath::geom::Rect Rect_obj::addWith( ::hxmath::math::Vector2Default v){
            	HX_STACK_FRAME("hxmath.geom.Rect","addWith",0xafcf0779,"hxmath.geom.Rect.addWith","hxmath/geom/Rect.hx",242,0x4c80793e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(v,"v")
HXLINE( 243)		Bool _hx_tmp = (v->x < ((Float)0.0));
HXDLIN( 243)		if (_hx_tmp) {
HXLINE( 245)			hx::AddEq(this->x,v->x);
HXLINE( 246)			hx::SubEq(this->width,v->x);
            		}
            		else {
HXLINE( 250)			hx::AddEq(this->width,v->x);
            		}
HXLINE( 253)		Bool _hx_tmp1 = (v->y < ((Float)0.0));
HXDLIN( 253)		if (_hx_tmp1) {
HXLINE( 255)			hx::AddEq(this->y,v->y);
HXLINE( 256)			hx::SubEq(this->height,v->y);
            		}
            		else {
HXLINE( 260)			hx::AddEq(this->height,v->y);
            		}
HXLINE( 263)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rect_obj,addWith,return )

 ::hxmath::math::Vector2Default Rect_obj::getVertex(Int index){
            	HX_STACK_FRAME("hxmath.geom.Rect","getVertex",0x962e43cc,"hxmath.geom.Rect.getVertex","hxmath/geom/Rect.hx",273,0x4c80793e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE( 274)		HX_VARI(  ::hxmath::math::Vector2Default,v) =  ::hxmath::math::Vector2Default_obj::__new(this->x,this->y);
HXLINE( 276)		switch((int)(index)){
            			case (int)0: {
            			}
            			break;
            			case (int)1: {
HXLINE( 280)				hx::AddEq(v->x,this->width);
            			}
            			break;
            			case (int)2: {
HXLINE( 282)				hx::AddEq(v->x,this->width);
HXLINE( 283)				hx::AddEq(v->y,this->height);
            			}
            			break;
            			case (int)3: {
HXLINE( 285)				hx::AddEq(v->y,this->height);
            			}
            			break;
            			default:{
HXLINE( 287)				HX_STACK_DO_THROW(HX_("Invalid vertex index.",0f,1f,26,5a));
            			}
            		}
HXLINE( 290)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rect_obj,getVertex,return )

 ::hxmath::math::Vector2Default Rect_obj::get_center(){
            	HX_STACK_FRAME("hxmath.geom.Rect","get_center",0xfbb6022c,"hxmath.geom.Rect.get_center","hxmath/geom/Rect.hx",295,0x4c80793e)
            	HX_STACK_THIS(this)
HXLINE( 295)		return  ::hxmath::math::Vector2Default_obj::__new((this->x + (((Float)0.5) * this->width)),(this->y + (((Float)0.5) * this->height)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rect_obj,get_center,return )

 ::hxmath::math::Matrix3x2Default Rect_obj::get_matrix(){
            	HX_STACK_FRAME("hxmath.geom.Rect","get_matrix",0xb1a31298,"hxmath.geom.Rect.get_matrix","hxmath/geom/Rect.hx",302,0x4c80793e)
            	HX_STACK_THIS(this)
HXLINE( 302)		return  ::hxmath::math::Matrix3x2Default_obj::__new(this->width,((Float)0.0),((Float)0.0),this->height,this->x,this->y);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rect_obj,get_matrix,return )

Float Rect_obj::get_area(){
            	HX_STACK_FRAME("hxmath.geom.Rect","get_area",0xa1bad424,"hxmath.geom.Rect.get_area","hxmath/geom/Rect.hx",307,0x4c80793e)
            	HX_STACK_THIS(this)
HXLINE( 307)		return (this->width * this->height);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rect_obj,get_area,return )

Bool Rect_obj::get_isEmpty(){
            	HX_STACK_FRAME("hxmath.geom.Rect","get_isEmpty",0x3605ce0c,"hxmath.geom.Rect.get_isEmpty","hxmath/geom/Rect.hx",312,0x4c80793e)
            	HX_STACK_THIS(this)
HXLINE( 312)		if (!((this->width <= ((Float)0.0)))) {
HXLINE( 312)			return (this->height <= ((Float)0.0));
            		}
            		else {
HXLINE( 312)			return true;
            		}
HXDLIN( 312)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rect_obj,get_isEmpty,return )

 ::hxmath::geom::Rect Rect_obj::fromTwoPoints( ::hxmath::math::Vector2Default pointA, ::hxmath::math::Vector2Default pointB){
            	HX_STACK_FRAME("hxmath.geom.Rect","fromTwoPoints",0x64c54237,"hxmath.geom.Rect.fromTwoPoints","hxmath/geom/Rect.hx",66,0x4c80793e)
            	HX_STACK_ARG(pointA,"pointA")
            	HX_STACK_ARG(pointB,"pointB")
HXLINE(  67)		Float _hx_tmp = ::Math_obj::min(pointA->x,pointB->x);
HXLINE(  68)		Float _hx_tmp1 = ::Math_obj::min(pointA->y,pointB->y);
HXLINE(  69)		Float _hx_tmp2 = (pointB->x - pointA->x);
HXDLIN(  69)		Float _hx_tmp3 = ::Math_obj::abs(_hx_tmp2);
HXLINE(  70)		Float _hx_tmp4 = (pointB->y - pointA->y);
HXDLIN(  70)		Float _hx_tmp5 = ::Math_obj::abs(_hx_tmp4);
HXLINE(  66)		return  ::hxmath::geom::Rect_obj::__new(_hx_tmp,_hx_tmp1,_hx_tmp3,_hx_tmp5);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rect_obj,fromTwoPoints,return )

 ::hxmath::geom::Rect Rect_obj::fromRectShape( ::Dynamic r){
            	HX_STACK_FRAME("hxmath.geom.Rect","fromRectShape",0x0b4280c5,"hxmath.geom.Rect.fromRectShape","hxmath/geom/Rect.hx",81,0x4c80793e)
            	HX_STACK_ARG(r,"r")
HXLINE(  81)		return  ::hxmath::geom::Rect_obj::__new( ::Dynamic(r->__Field(HX_("x",78,00,00,00),hx::paccDynamic)), ::Dynamic(r->__Field(HX_("y",79,00,00,00),hx::paccDynamic)), ::Dynamic(r->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)), ::Dynamic(r->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rect_obj,fromRectShape,return )

 ::hxmath::geom::Rect Rect_obj::fromMatrix( ::hxmath::math::Matrix3x2Default m){
            	HX_STACK_FRAME("hxmath.geom.Rect","fromMatrix",0x045fa7d9,"hxmath.geom.Rect.fromMatrix","hxmath/geom/Rect.hx",92,0x4c80793e)
            	HX_STACK_ARG(m,"m")
HXLINE(  92)		return  ::hxmath::geom::Rect_obj::__new(m->tx,m->ty,m->a,m->d);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rect_obj,fromMatrix,return )


Rect_obj::Rect_obj()
{
}

hx::Val Rect_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"area") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_area()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height); }
		if (HX_FIELD_EQ(inName,"center") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_center()); }
		if (HX_FIELD_EQ(inName,"matrix") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_matrix()); }
		if (HX_FIELD_EQ(inName,"equals") ) { return hx::Val( equals_dyn()); }
		if (HX_FIELD_EQ(inName,"copyTo") ) { return hx::Val( copyTo_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isEmpty") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_isEmpty()); }
		if (HX_FIELD_EQ(inName,"addWith") ) { return hx::Val( addWith_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"overlaps") ) { return hx::Val( overlaps_dyn()); }
		if (HX_FIELD_EQ(inName,"get_area") ) { return hx::Val( get_area_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"intersect") ) { return hx::Val( intersect_dyn()); }
		if (HX_FIELD_EQ(inName,"getVertex") ) { return hx::Val( getVertex_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_center") ) { return hx::Val( get_center_dyn()); }
		if (HX_FIELD_EQ(inName,"get_matrix") ) { return hx::Val( get_matrix_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_isEmpty") ) { return hx::Val( get_isEmpty_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"intersectWith") ) { return hx::Val( intersectWith_dyn()); }
		if (HX_FIELD_EQ(inName,"containsPoint") ) { return hx::Val( containsPoint_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"distanceToRect") ) { return hx::Val( distanceToRect_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"distanceToPoint") ) { return hx::Val( distanceToPoint_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Rect_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"fromMatrix") ) { outValue = fromMatrix_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fromTwoPoints") ) { outValue = fromTwoPoints_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromRectShape") ) { outValue = fromRectShape_dyn(); return true; }
	}
	return false;
}

hx::Val Rect_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Rect_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("center","\xd5","\x25","\xdb","\x05"));
	outFields->push(HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb"));
	outFields->push(HX_HCSTRING("area","\x8d","\x8b","\x74","\x40"));
	outFields->push(HX_HCSTRING("isEmpty","\x43","\xde","\x5f","\x0c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Rect_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Rect_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Rect_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Rect_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsFloat,(int)offsetof(Rect_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Rect_obj_sStaticStorageInfo = 0;
#endif

static ::String Rect_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("copyTo","\x90","\x1c","\x33","\xc9"),
	HX_HCSTRING("overlaps","\x0c","\xd3","\x2a","\x45"),
	HX_HCSTRING("intersect","\xdf","\x00","\x75","\x42"),
	HX_HCSTRING("intersectWith","\x85","\xfe","\x21","\xc1"),
	HX_HCSTRING("containsPoint","\xb1","\xb9","\xeb","\x92"),
	HX_HCSTRING("distanceToPoint","\x20","\x96","\x85","\x24"),
	HX_HCSTRING("distanceToRect","\x54","\x95","\xd0","\x51"),
	HX_HCSTRING("addWith","\xc7","\xb8","\x35","\x8b"),
	HX_HCSTRING("getVertex","\x9a","\x64","\x9e","\x1d"),
	HX_HCSTRING("get_center","\x9e","\x95","\x62","\xf6"),
	HX_HCSTRING("get_matrix","\x0a","\xa6","\x4f","\xac"),
	HX_HCSTRING("get_area","\x16","\x47","\x2f","\xc0"),
	HX_HCSTRING("get_isEmpty","\x5a","\x3e","\x5a","\x92"),
	::String(null()) };

static void Rect_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Rect_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Rect_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Rect_obj::__mClass,"__mClass");
};

#endif

hx::Class Rect_obj::__mClass;

static ::String Rect_obj_sStaticFields[] = {
	HX_HCSTRING("fromTwoPoints","\x05","\xe2","\x50","\xd3"),
	HX_HCSTRING("fromRectShape","\x93","\x20","\xce","\x79"),
	HX_HCSTRING("fromMatrix","\x4b","\x3b","\x0c","\xff"),
	::String(null())
};

void Rect_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hxmath.geom.Rect","\x20","\xad","\x66","\x85");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Rect_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Rect_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Rect_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Rect_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Rect_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Rect_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Rect_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Rect_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxmath
} // end namespace geom
