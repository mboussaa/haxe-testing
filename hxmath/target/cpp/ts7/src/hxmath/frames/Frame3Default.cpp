// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_hxmath_frames_Frame3Default
#include <hxmath/frames/Frame3Default.h>
#endif
#ifndef INCLUDED_hxmath_frames_IFrame3
#include <hxmath/frames/IFrame3.h>
#endif
#ifndef INCLUDED_hxmath_math_Matrix4x4Default
#include <hxmath/math/Matrix4x4Default.h>
#endif
#ifndef INCLUDED_hxmath_math_QuaternionDefault
#include <hxmath/math/QuaternionDefault.h>
#endif
#ifndef INCLUDED_hxmath_math_Vector3Default
#include <hxmath/math/Vector3Default.h>
#endif

namespace hxmath{
namespace frames{

void Frame3Default_obj::__construct( ::hxmath::math::Vector3Default offset, ::hxmath::math::QuaternionDefault orientation,hx::Null< Bool >  __o_isCached){
Bool isCached = __o_isCached.Default(true);
            	HX_STACK_FRAME("hxmath.frames.Frame3Default","new",0x371c4bdb,"hxmath.frames.Frame3Default.new","hxmath/frames/Frame3Default.hx",12,0xcddbda15)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(offset,"offset")
            	HX_STACK_ARG(orientation,"orientation")
            	HX_STACK_ARG(isCached,"isCached")
HXLINE(  36)		this->isDirty = true;
HXLINE(  33)		this->isCached = true;
HXLINE(  47)		 ::hxmath::math::Vector3Default _hx_tmp;
HXDLIN(  47)		if (hx::IsNull( offset )) {
HXLINE(  47)			_hx_tmp =  ::hxmath::math::Vector3Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0));
            		}
            		else {
HXLINE(  47)			_hx_tmp = offset;
            		}
HXDLIN(  47)		this->internalOffset = _hx_tmp;
HXLINE(  50)		 ::hxmath::math::QuaternionDefault _hx_tmp1;
HXDLIN(  50)		if (hx::IsNull( orientation )) {
HXLINE(  50)			_hx_tmp1 =  ::hxmath::math::QuaternionDefault_obj::__new((int)1,(int)0,(int)0,(int)0);
            		}
            		else {
HXLINE(  50)			_hx_tmp1 = orientation;
            		}
HXDLIN(  50)		this->internalOrientation = _hx_tmp1;
HXLINE(  53)		this->isCached = isCached;
HXLINE(  54)		this->isDirty = true;
HXLINE(  55)		this->internalMatrix =  ::hxmath::math::Matrix4x4Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)1.0));
            	}

Dynamic Frame3Default_obj::__CreateEmpty() { return new Frame3Default_obj; }

hx::ObjectPtr< Frame3Default_obj > Frame3Default_obj::__new( ::hxmath::math::Vector3Default offset, ::hxmath::math::QuaternionDefault orientation,hx::Null< Bool >  __o_isCached)
{
	hx::ObjectPtr< Frame3Default_obj > _hx_result = new Frame3Default_obj();
	_hx_result->__construct(offset,orientation,__o_isCached);
	return _hx_result;
}

Dynamic Frame3Default_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Frame3Default_obj > _hx_result = new Frame3Default_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

static ::hxmath::frames::IFrame3_obj _hx_hxmath_frames_Frame3Default__hx_hxmath_frames_IFrame3= {
	(  ::hxmath::math::Matrix4x4Default (hx::Object::*)())&::hxmath::frames::Frame3Default_obj::get_matrix,
	(  ::hxmath::math::Vector3Default (hx::Object::*)())&::hxmath::frames::Frame3Default_obj::get_offset,
	(  ::hxmath::math::Vector3Default (hx::Object::*)( ::hxmath::math::Vector3Default))&::hxmath::frames::Frame3Default_obj::set_offset,
	(  ::hxmath::math::QuaternionDefault (hx::Object::*)())&::hxmath::frames::Frame3Default_obj::get_orientation,
	(  ::hxmath::math::QuaternionDefault (hx::Object::*)( ::hxmath::math::QuaternionDefault))&::hxmath::frames::Frame3Default_obj::set_orientation,
};

void *Frame3Default_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xca0d5ed1: return &_hx_hxmath_frames_Frame3Default__hx_hxmath_frames_IFrame3;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

::String Frame3Default_obj::toString(){
            	HX_STACK_FRAME("hxmath.frames.Frame3Default","toString",0x7fedd751,"hxmath.frames.Frame3Default.toString","hxmath/frames/Frame3Default.hx",60,0xcddbda15)
            	HX_STACK_THIS(this)
HXLINE(  60)		::String _hx_tmp = ::Std_obj::string(this->internalOffset);
HXDLIN(  60)		::String _hx_tmp1 = ((HX_("Frame3 { offset: ",98,53,1b,f6) + _hx_tmp) + HX_(", orientation: ",82,56,9e,9f));
HXDLIN(  60)		::String _hx_tmp2 = ::Std_obj::string(this->internalOrientation);
HXDLIN(  60)		return ((_hx_tmp1 + _hx_tmp2) + HX_(" }",5d,1c,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Frame3Default_obj,toString,return )

 ::hxmath::math::Matrix4x4Default Frame3Default_obj::get_matrix(){
            	HX_STACK_FRAME("hxmath.frames.Frame3Default","get_matrix",0x16995fef,"hxmath.frames.Frame3Default.get_matrix","hxmath/frames/Frame3Default.hx",64,0xcddbda15)
            	HX_STACK_THIS(this)
HXLINE(  66)		Bool _hx_tmp;
HXDLIN(  66)		if (!(!(this->isCached))) {
HXLINE(  66)			_hx_tmp = this->isDirty;
            		}
            		else {
HXLINE(  66)			_hx_tmp = true;
            		}
HXDLIN(  66)		if (_hx_tmp) {
HXLINE(  68)			{
HXLINE(  68)				HX_VARI(  ::hxmath::math::Matrix4x4Default,matrix) = this->internalMatrix;
HXDLIN(  68)				HX_VARI(  ::hxmath::math::Vector3Default,offset) = this->internalOffset;
HXDLIN(  68)				HX_VARI(  ::hxmath::math::QuaternionDefault,orientation) = this->internalOrientation;
HXDLIN(  68)				{
HXLINE(  68)					HX_VARI( Float,s) = orientation->s;
HXDLIN(  68)					HX_VARI( Float,x) = orientation->x;
HXDLIN(  68)					HX_VARI( Float,y) = orientation->y;
HXDLIN(  68)					HX_VARI( Float,z) = orientation->z;
HXDLIN(  68)					matrix->m00 = ((int)1 - ((int)2 * ((y * y) + (z * z))));
HXDLIN(  68)					matrix->m10 = ((int)2 * ((x * y) - (s * z)));
HXDLIN(  68)					matrix->m20 = ((int)2 * ((s * y) + (x * z)));
HXDLIN(  68)					matrix->m01 = ((int)2 * ((x * y) + (s * z)));
HXDLIN(  68)					matrix->m11 = ((int)1 - ((int)2 * ((x * x) + (z * z))));
HXDLIN(  68)					matrix->m21 = ((int)2 * ((y * z) - (s * x)));
HXDLIN(  68)					matrix->m02 = ((int)2 * ((x * z) - (s * y)));
HXDLIN(  68)					matrix->m12 = ((int)2 * ((y * z) + (s * x)));
HXDLIN(  68)					matrix->m22 = ((int)1 - ((int)2 * ((x * x) + (y * y))));
            				}
HXDLIN(  68)				{
HXLINE(  68)					HX_VARI_NAME( Float,x1,"x") = offset->x;
HXDLIN(  68)					HX_VARI_NAME( Float,y1,"y") = offset->y;
HXDLIN(  68)					HX_VARI_NAME( Float,z1,"z") = offset->z;
HXDLIN(  68)					matrix->m30 = x1;
HXDLIN(  68)					matrix->m31 = y1;
HXDLIN(  68)					matrix->m32 = z1;
HXDLIN(  68)					matrix->m33 = ((Float)1.0);
            				}
            			}
HXLINE(  69)			this->isDirty = false;
            		}
HXLINE(  72)		return this->internalMatrix;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Frame3Default_obj,get_matrix,return )

 ::hxmath::math::Vector3Default Frame3Default_obj::get_offset(){
            	HX_STACK_FRAME("hxmath.frames.Frame3Default","get_offset",0xbb10c141,"hxmath.frames.Frame3Default.get_offset","hxmath/frames/Frame3Default.hx",77,0xcddbda15)
            	HX_STACK_THIS(this)
HXLINE(  77)		return this->internalOffset;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Frame3Default_obj,get_offset,return )

 ::hxmath::math::Vector3Default Frame3Default_obj::set_offset( ::hxmath::math::Vector3Default offset){
            	HX_STACK_FRAME("hxmath.frames.Frame3Default","set_offset",0xbe8e5fb5,"hxmath.frames.Frame3Default.set_offset","hxmath/frames/Frame3Default.hx",81,0xcddbda15)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(offset,"offset")
HXLINE(  82)		this->internalOffset = offset;
HXLINE(  83)		this->isDirty = true;
HXLINE(  84)		return offset;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Frame3Default_obj,set_offset,return )

 ::hxmath::math::QuaternionDefault Frame3Default_obj::get_orientation(){
            	HX_STACK_FRAME("hxmath.frames.Frame3Default","get_orientation",0x0171ee62,"hxmath.frames.Frame3Default.get_orientation","hxmath/frames/Frame3Default.hx",89,0xcddbda15)
            	HX_STACK_THIS(this)
HXLINE(  89)		return this->internalOrientation;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Frame3Default_obj,get_orientation,return )

 ::hxmath::math::QuaternionDefault Frame3Default_obj::set_orientation( ::hxmath::math::QuaternionDefault orientation){
            	HX_STACK_FRAME("hxmath.frames.Frame3Default","set_orientation",0xfd3d6b6e,"hxmath.frames.Frame3Default.set_orientation","hxmath/frames/Frame3Default.hx",93,0xcddbda15)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(orientation,"orientation")
HXLINE(  94)		this->internalOrientation = orientation;
HXLINE(  95)		this->isDirty = true;
HXLINE(  96)		return orientation;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Frame3Default_obj,set_orientation,return )


Frame3Default_obj::Frame3Default_obj()
{
}

void Frame3Default_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Frame3Default);
	HX_MARK_MEMBER_NAME(internalMatrix,"internalMatrix");
	HX_MARK_MEMBER_NAME(internalOffset,"internalOffset");
	HX_MARK_MEMBER_NAME(internalOrientation,"internalOrientation");
	HX_MARK_MEMBER_NAME(isCached,"isCached");
	HX_MARK_MEMBER_NAME(isDirty,"isDirty");
	HX_MARK_END_CLASS();
}

void Frame3Default_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(internalMatrix,"internalMatrix");
	HX_VISIT_MEMBER_NAME(internalOffset,"internalOffset");
	HX_VISIT_MEMBER_NAME(internalOrientation,"internalOrientation");
	HX_VISIT_MEMBER_NAME(isCached,"isCached");
	HX_VISIT_MEMBER_NAME(isDirty,"isDirty");
}

hx::Val Frame3Default_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"matrix") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_matrix()); }
		if (HX_FIELD_EQ(inName,"offset") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_offset()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isDirty") ) { return hx::Val( isDirty); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isCached") ) { return hx::Val( isCached); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_matrix") ) { return hx::Val( get_matrix_dyn()); }
		if (HX_FIELD_EQ(inName,"get_offset") ) { return hx::Val( get_offset_dyn()); }
		if (HX_FIELD_EQ(inName,"set_offset") ) { return hx::Val( set_offset_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"orientation") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_orientation()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"internalMatrix") ) { return hx::Val( internalMatrix); }
		if (HX_FIELD_EQ(inName,"internalOffset") ) { return hx::Val( internalOffset); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_orientation") ) { return hx::Val( get_orientation_dyn()); }
		if (HX_FIELD_EQ(inName,"set_orientation") ) { return hx::Val( set_orientation_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"internalOrientation") ) { return hx::Val( internalOrientation); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Frame3Default_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_offset(inValue) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isDirty") ) { isDirty=inValue.Cast< Bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isCached") ) { isCached=inValue.Cast< Bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"orientation") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_orientation(inValue) ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"internalMatrix") ) { internalMatrix=inValue.Cast<  ::hxmath::math::Matrix4x4Default >(); return inValue; }
		if (HX_FIELD_EQ(inName,"internalOffset") ) { internalOffset=inValue.Cast<  ::hxmath::math::Vector3Default >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"internalOrientation") ) { internalOrientation=inValue.Cast<  ::hxmath::math::QuaternionDefault >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Frame3Default_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb"));
	outFields->push(HX_HCSTRING("offset","\x93","\x97","\x3f","\x60"));
	outFields->push(HX_HCSTRING("orientation","\xd0","\xee","\xfe","\xfd"));
	outFields->push(HX_HCSTRING("internalMatrix","\x5e","\x9d","\xb7","\xe0"));
	outFields->push(HX_HCSTRING("internalOffset","\xb0","\xfe","\x2e","\x85"));
	outFields->push(HX_HCSTRING("internalOrientation","\x93","\x9e","\x33","\xf1"));
	outFields->push(HX_HCSTRING("isCached","\x6c","\xfb","\x5b","\x09"));
	outFields->push(HX_HCSTRING("isDirty","\xc8","\xf3","\x55","\x76"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Frame3Default_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::hxmath::math::Matrix4x4Default*/ ,(int)offsetof(Frame3Default_obj,internalMatrix),HX_HCSTRING("internalMatrix","\x5e","\x9d","\xb7","\xe0")},
	{hx::fsObject /*::hxmath::math::Vector3Default*/ ,(int)offsetof(Frame3Default_obj,internalOffset),HX_HCSTRING("internalOffset","\xb0","\xfe","\x2e","\x85")},
	{hx::fsObject /*::hxmath::math::QuaternionDefault*/ ,(int)offsetof(Frame3Default_obj,internalOrientation),HX_HCSTRING("internalOrientation","\x93","\x9e","\x33","\xf1")},
	{hx::fsBool,(int)offsetof(Frame3Default_obj,isCached),HX_HCSTRING("isCached","\x6c","\xfb","\x5b","\x09")},
	{hx::fsBool,(int)offsetof(Frame3Default_obj,isDirty),HX_HCSTRING("isDirty","\xc8","\xf3","\x55","\x76")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Frame3Default_obj_sStaticStorageInfo = 0;
#endif

static ::String Frame3Default_obj_sMemberFields[] = {
	HX_HCSTRING("internalMatrix","\x5e","\x9d","\xb7","\xe0"),
	HX_HCSTRING("internalOffset","\xb0","\xfe","\x2e","\x85"),
	HX_HCSTRING("internalOrientation","\x93","\x9e","\x33","\xf1"),
	HX_HCSTRING("isCached","\x6c","\xfb","\x5b","\x09"),
	HX_HCSTRING("isDirty","\xc8","\xf3","\x55","\x76"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("get_matrix","\x0a","\xa6","\x4f","\xac"),
	HX_HCSTRING("get_offset","\x5c","\x07","\xc7","\x50"),
	HX_HCSTRING("set_offset","\xd0","\xa5","\x44","\x54"),
	HX_HCSTRING("get_orientation","\x67","\xa6","\xe0","\xbe"),
	HX_HCSTRING("set_orientation","\x73","\x23","\xac","\xba"),
	::String(null()) };

static void Frame3Default_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Frame3Default_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Frame3Default_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Frame3Default_obj::__mClass,"__mClass");
};

#endif

hx::Class Frame3Default_obj::__mClass;

void Frame3Default_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hxmath.frames.Frame3Default","\x69","\xc2","\xc4","\x34");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Frame3Default_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Frame3Default_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Frame3Default_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Frame3Default_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Frame3Default_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Frame3Default_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxmath
} // end namespace frames
