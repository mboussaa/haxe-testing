// Generated by Haxe 3.3.0
#ifndef INCLUDED_hxmath_math__Vector2_Vector2_Impl_
#define INCLUDED_hxmath_math__Vector2_Vector2_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(hxmath,math,IntVector2Default)
HX_DECLARE_CLASS2(hxmath,math,Vector2Default)
HX_DECLARE_CLASS3(hxmath,math,_Vector2,Vector2_Impl_)

namespace hxmath{
namespace math{
namespace _Vector2{


class HXCPP_CLASS_ATTRIBUTES Vector2_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Vector2_Impl__obj OBJ_;
		Vector2_Impl__obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="hxmath.math._Vector2.Vector2_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"hxmath.math._Vector2.Vector2_Impl_"); }
		static hx::ObjectPtr< Vector2_Impl__obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Vector2_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Vector2_Impl_","\xcf","\xfb","\xcf","\xb1"); }

		static void __boot();
		static Int elementCount;
		static  ::hxmath::math::Vector2Default _new(Float x,Float y);
		static ::Dynamic _new_dyn();

		static  ::hxmath::math::Vector2Default fromArray(::Array< Float > rawData);
		static ::Dynamic fromArray_dyn();

		static  ::hxmath::math::Vector2Default fromPolar(Float angle,Float radius);
		static ::Dynamic fromPolar_dyn();

		static  ::hxmath::math::Vector2Default fromVector2Shape( ::Dynamic other);
		static ::Dynamic fromVector2Shape_dyn();

		static  ::hxmath::math::IntVector2Default toIntVector2( ::hxmath::math::Vector2Default this1, ::Dynamic func);
		static ::Dynamic toIntVector2_dyn();

		static Float dot( ::hxmath::math::Vector2Default a, ::hxmath::math::Vector2Default b);
		static ::Dynamic dot_dyn();

		static  ::hxmath::math::Vector2Default multiply( ::hxmath::math::Vector2Default a,Float s);
		static ::Dynamic multiply_dyn();

		static  ::hxmath::math::Vector2Default divide( ::hxmath::math::Vector2Default a,Float s);
		static ::Dynamic divide_dyn();

		static  ::hxmath::math::Vector2Default add( ::hxmath::math::Vector2Default a, ::hxmath::math::Vector2Default b);
		static ::Dynamic add_dyn();

		static  ::hxmath::math::Vector2Default subtract( ::hxmath::math::Vector2Default a, ::hxmath::math::Vector2Default b);
		static ::Dynamic subtract_dyn();

		static  ::hxmath::math::Vector2Default negate( ::hxmath::math::Vector2Default a);
		static ::Dynamic negate_dyn();

		static Bool equals( ::hxmath::math::Vector2Default a, ::hxmath::math::Vector2Default b);
		static ::Dynamic equals_dyn();

		static  ::hxmath::math::Vector2Default lerp( ::hxmath::math::Vector2Default a, ::hxmath::math::Vector2Default b,Float t);
		static ::Dynamic lerp_dyn();

		static  ::hxmath::math::Vector2Default max( ::hxmath::math::Vector2Default a, ::hxmath::math::Vector2Default b);
		static ::Dynamic max_dyn();

		static  ::hxmath::math::Vector2Default min( ::hxmath::math::Vector2Default a, ::hxmath::math::Vector2Default b);
		static ::Dynamic min_dyn();

		static  ::hxmath::math::Vector2Default project( ::hxmath::math::Vector2Default a, ::hxmath::math::Vector2Default b);
		static ::Dynamic project_dyn();

		static  ::hxmath::math::Vector2Default reflect( ::hxmath::math::Vector2Default v, ::hxmath::math::Vector2Default normal);
		static ::Dynamic reflect_dyn();

		static void orthoNormalize( ::hxmath::math::Vector2Default u, ::hxmath::math::Vector2Default v);
		static ::Dynamic orthoNormalize_dyn();

		static  ::hxmath::math::Vector2Default set( ::hxmath::math::Vector2Default this1,Float x,Float y);
		static ::Dynamic set_dyn();

		static  ::hxmath::math::Vector2Default multiplyWith( ::hxmath::math::Vector2Default this1,Float s);
		static ::Dynamic multiplyWith_dyn();

		static  ::hxmath::math::Vector2Default divideWith( ::hxmath::math::Vector2Default this1,Float s);
		static ::Dynamic divideWith_dyn();

		static  ::hxmath::math::Vector2Default addWith( ::hxmath::math::Vector2Default this1, ::hxmath::math::Vector2Default a);
		static ::Dynamic addWith_dyn();

		static  ::hxmath::math::Vector2Default subtractWith( ::hxmath::math::Vector2Default this1, ::hxmath::math::Vector2Default a);
		static ::Dynamic subtractWith_dyn();

		static  ::hxmath::math::Vector2Default maxWith( ::hxmath::math::Vector2Default this1, ::hxmath::math::Vector2Default a);
		static ::Dynamic maxWith_dyn();

		static  ::hxmath::math::Vector2Default minWith( ::hxmath::math::Vector2Default this1, ::hxmath::math::Vector2Default a);
		static ::Dynamic minWith_dyn();

		static  ::hxmath::math::Vector2Default projectOnto( ::hxmath::math::Vector2Default this1, ::hxmath::math::Vector2Default a);
		static ::Dynamic projectOnto_dyn();

		static  ::hxmath::math::Vector2Default reflectBy( ::hxmath::math::Vector2Default this1, ::hxmath::math::Vector2Default normal);
		static ::Dynamic reflectBy_dyn();

		static void copyTo( ::hxmath::math::Vector2Default this1, ::hxmath::math::Vector2Default target);
		static ::Dynamic copyTo_dyn();

		static void copyToShape( ::hxmath::math::Vector2Default this1, ::Dynamic target);
		static ::Dynamic copyToShape_dyn();

		static void copyFromShape( ::hxmath::math::Vector2Default this1, ::Dynamic source);
		static ::Dynamic copyFromShape_dyn();

		static  ::hxmath::math::Vector2Default clone( ::hxmath::math::Vector2Default this1);
		static ::Dynamic clone_dyn();

		static Float getArrayElement( ::hxmath::math::Vector2Default this1,Int i);
		static ::Dynamic getArrayElement_dyn();

		static Float setArrayElement( ::hxmath::math::Vector2Default this1,Int i,Float value);
		static ::Dynamic setArrayElement_dyn();

		static  ::hxmath::math::Vector2Default applyNegate( ::hxmath::math::Vector2Default this1);
		static ::Dynamic applyNegate_dyn();

		static  ::hxmath::math::Vector2Default applyScalarFunc( ::hxmath::math::Vector2Default this1, ::Dynamic func);
		static ::Dynamic applyScalarFunc_dyn();

		static Float angleWith( ::hxmath::math::Vector2Default this1, ::hxmath::math::Vector2Default b);
		static ::Dynamic angleWith_dyn();

		static Float signedAngleWith( ::hxmath::math::Vector2Default this1, ::hxmath::math::Vector2Default b);
		static ::Dynamic signedAngleWith_dyn();

		static Float distanceTo( ::hxmath::math::Vector2Default this1, ::hxmath::math::Vector2Default b);
		static ::Dynamic distanceTo_dyn();

		static  ::hxmath::math::Vector2Default normalize( ::hxmath::math::Vector2Default this1);
		static ::Dynamic normalize_dyn();

		static  ::hxmath::math::Vector2Default normalizeTo( ::hxmath::math::Vector2Default this1,Float newLength);
		static ::Dynamic normalizeTo_dyn();

		static  ::hxmath::math::Vector2Default clamp( ::hxmath::math::Vector2Default this1,Float min,Float max);
		static ::Dynamic clamp_dyn();

		static  ::hxmath::math::Vector2Default rotate( ::hxmath::math::Vector2Default this1,Float angle, ::hxmath::math::Vector2Default pivot);
		static ::Dynamic rotate_dyn();

		static  ::hxmath::math::Vector2Default rotateLeft( ::hxmath::math::Vector2Default this1);
		static ::Dynamic rotateLeft_dyn();

		static  ::hxmath::math::Vector2Default rotateRight( ::hxmath::math::Vector2Default this1);
		static ::Dynamic rotateRight_dyn();

		static  ::hxmath::math::Vector2Default get_zero();
		static ::Dynamic get_zero_dyn();

		static  ::hxmath::math::Vector2Default get_xAxis();
		static ::Dynamic get_xAxis_dyn();

		static  ::hxmath::math::Vector2Default get_yAxis();
		static ::Dynamic get_yAxis_dyn();

		static Float get_length( ::hxmath::math::Vector2Default this1);
		static ::Dynamic get_length_dyn();

		static Float get_lengthSq( ::hxmath::math::Vector2Default this1);
		static ::Dynamic get_lengthSq_dyn();

		static Float get_angle( ::hxmath::math::Vector2Default this1);
		static ::Dynamic get_angle_dyn();

		static  ::hxmath::math::Vector2Default get_normal( ::hxmath::math::Vector2Default this1);
		static ::Dynamic get_normal_dyn();

		static  ::hxmath::math::Vector2Default get_rotatedLeft( ::hxmath::math::Vector2Default this1);
		static ::Dynamic get_rotatedLeft_dyn();

		static  ::hxmath::math::Vector2Default get_rotatedRight( ::hxmath::math::Vector2Default this1);
		static ::Dynamic get_rotatedRight_dyn();

};

} // end namespace hxmath
} // end namespace math
} // end namespace _Vector2

#endif /* INCLUDED_hxmath_math__Vector2_Vector2_Impl_ */ 
