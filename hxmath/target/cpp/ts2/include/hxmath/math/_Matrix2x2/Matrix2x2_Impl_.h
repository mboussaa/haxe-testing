// Generated by Haxe 3.3.0
#ifndef INCLUDED_hxmath_math__Matrix2x2_Matrix2x2_Impl_
#define INCLUDED_hxmath_math__Matrix2x2_Matrix2x2_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(hxmath,math,Matrix2x2Default)
HX_DECLARE_CLASS2(hxmath,math,Vector2Default)
HX_DECLARE_CLASS3(hxmath,math,_Matrix2x2,Matrix2x2_Impl_)

namespace hxmath{
namespace math{
namespace _Matrix2x2{


class HXCPP_CLASS_ATTRIBUTES Matrix2x2_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Matrix2x2_Impl__obj OBJ_;
		Matrix2x2_Impl__obj();
		void __construct();

	public:
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="hxmath.math._Matrix2x2.Matrix2x2_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		static hx::ObjectPtr< Matrix2x2_Impl__obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Matrix2x2_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Matrix2x2_Impl_","\x8b","\xf0","\x7b","\xe2"); }

		static void __boot();
		static Int elementCount;
		static  ::hxmath::math::Matrix2x2Default _new(Float a,Float b,Float c,Float d);
		static ::Dynamic _new_dyn();

		static  ::hxmath::math::Matrix2x2Default fromArray(::Array< Float > rawData);
		static ::Dynamic fromArray_dyn();

		static  ::hxmath::math::Matrix2x2Default fromMatrix2x2Shape( ::hxmath::math::Matrix2x2Default other);
		static ::Dynamic fromMatrix2x2Shape_dyn();

		static  ::hxmath::math::Matrix2x2Default multiplyScalar(Float s, ::hxmath::math::Matrix2x2Default m);
		static ::Dynamic multiplyScalar_dyn();

		static  ::hxmath::math::Vector2Default multiplyVector( ::hxmath::math::Matrix2x2Default m, ::hxmath::math::Vector2Default v);
		static ::Dynamic multiplyVector_dyn();

		static  ::hxmath::math::Matrix2x2Default multiply( ::hxmath::math::Matrix2x2Default m, ::hxmath::math::Matrix2x2Default n);
		static ::Dynamic multiply_dyn();

		static  ::hxmath::math::Matrix2x2Default add( ::hxmath::math::Matrix2x2Default m, ::hxmath::math::Matrix2x2Default n);
		static ::Dynamic add_dyn();

		static  ::hxmath::math::Matrix2x2Default subtract( ::hxmath::math::Matrix2x2Default m, ::hxmath::math::Matrix2x2Default n);
		static ::Dynamic subtract_dyn();

		static  ::hxmath::math::Matrix2x2Default negate( ::hxmath::math::Matrix2x2Default m);
		static ::Dynamic negate_dyn();

		static Bool equals( ::hxmath::math::Matrix2x2Default m, ::hxmath::math::Matrix2x2Default n);
		static ::Dynamic equals_dyn();

		static  ::hxmath::math::Matrix2x2Default rotate(Float angle);
		static ::Dynamic rotate_dyn();

		static  ::hxmath::math::Matrix2x2Default scale(Float sx,Float sy);
		static ::Dynamic scale_dyn();

		static  ::hxmath::math::Matrix2x2Default setRotate( ::hxmath::math::Matrix2x2Default this1,Float angle);
		static ::Dynamic setRotate_dyn();

		static  ::hxmath::math::Matrix2x2Default set( ::hxmath::math::Matrix2x2Default this1,Float a,Float b,Float c,Float d);
		static ::Dynamic set_dyn();

		static  ::hxmath::math::Matrix2x2Default addWith( ::hxmath::math::Matrix2x2Default this1, ::hxmath::math::Matrix2x2Default m);
		static ::Dynamic addWith_dyn();

		static  ::hxmath::math::Matrix2x2Default subtractWith( ::hxmath::math::Matrix2x2Default this1, ::hxmath::math::Matrix2x2Default m);
		static ::Dynamic subtractWith_dyn();

		static void copyTo( ::hxmath::math::Matrix2x2Default this1, ::hxmath::math::Matrix2x2Default target);
		static ::Dynamic copyTo_dyn();

		static void copyToShape( ::hxmath::math::Matrix2x2Default this1, ::Dynamic target);
		static ::Dynamic copyToShape_dyn();

		static void copyFromShape( ::hxmath::math::Matrix2x2Default this1, ::Dynamic source);
		static ::Dynamic copyFromShape_dyn();

		static  ::hxmath::math::Matrix2x2Default clone( ::hxmath::math::Matrix2x2Default this1);
		static ::Dynamic clone_dyn();

		static Float getArrayElement( ::hxmath::math::Matrix2x2Default this1,Int i);
		static ::Dynamic getArrayElement_dyn();

		static Float setArrayElement( ::hxmath::math::Matrix2x2Default this1,Int i,Float value);
		static ::Dynamic setArrayElement_dyn();

		static Float getElement( ::hxmath::math::Matrix2x2Default this1,Int column,Int row);
		static ::Dynamic getElement_dyn();

		static Float setElement( ::hxmath::math::Matrix2x2Default this1,Int column,Int row,Float value);
		static ::Dynamic setElement_dyn();

		static  ::hxmath::math::Vector2Default col( ::hxmath::math::Matrix2x2Default this1,Int index);
		static ::Dynamic col_dyn();

		static  ::hxmath::math::Vector2Default row( ::hxmath::math::Matrix2x2Default this1,Int index);
		static ::Dynamic row_dyn();

		static  ::hxmath::math::Vector2Default transposeMultiplyVector( ::hxmath::math::Matrix2x2Default this1, ::hxmath::math::Vector2Default v);
		static ::Dynamic transposeMultiplyVector_dyn();

		static  ::hxmath::math::Matrix2x2Default applyScalarFunc( ::hxmath::math::Matrix2x2Default this1, ::Dynamic func);
		static ::Dynamic applyScalarFunc_dyn();

		static  ::hxmath::math::Matrix2x2Default get_zero();
		static ::Dynamic get_zero_dyn();

		static  ::hxmath::math::Matrix2x2Default get_identity();
		static ::Dynamic get_identity_dyn();

		static Float get_det( ::hxmath::math::Matrix2x2Default this1);
		static ::Dynamic get_det_dyn();

		static  ::hxmath::math::Matrix2x2Default get_transpose( ::hxmath::math::Matrix2x2Default this1);
		static ::Dynamic get_transpose_dyn();

};

} // end namespace hxmath
} // end namespace math
} // end namespace _Matrix2x2

#endif /* INCLUDED_hxmath_math__Matrix2x2_Matrix2x2_Impl_ */ 
