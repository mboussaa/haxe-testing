// Generated by Haxe 3.3.0
#ifndef INCLUDED_hxmath_frames_Frame2Default
#define INCLUDED_hxmath_frames_Frame2Default

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_hxmath_frames_IFrame2
#include <hxmath/frames/IFrame2.h>
#endif
HX_DECLARE_CLASS2(hxmath,frames,Frame2Default)
HX_DECLARE_CLASS2(hxmath,frames,IFrame2)
HX_DECLARE_CLASS2(hxmath,math,Matrix3x2Default)
HX_DECLARE_CLASS2(hxmath,math,Vector2Default)

namespace hxmath{
namespace frames{


class HXCPP_CLASS_ATTRIBUTES Frame2Default_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Frame2Default_obj OBJ_;
		Frame2Default_obj();
		void __construct( ::hxmath::math::Vector2Default offset,hx::Null< Float >  __o_angleDegrees,hx::Null< Bool >  __o_isCached);

	public:
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="hxmath.frames.Frame2Default")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		static hx::ObjectPtr< Frame2Default_obj > __new( ::hxmath::math::Vector2Default offset,hx::Null< Float >  __o_angleDegrees,hx::Null< Bool >  __o_isCached);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Frame2Default_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_HCSTRING("Frame2Default","\xbc","\x87","\x0a","\xdc"); }

		 ::hxmath::math::Matrix3x2Default internalMatrix;
		 ::hxmath::math::Vector2Default internalOffset;
		Float internalAngleDegrees;
		Bool isCached;
		Bool isDirty;
		virtual ::String toString();
		::Dynamic toString_dyn();

		 ::hxmath::math::Matrix3x2Default get_matrix();
		::Dynamic get_matrix_dyn();

		 ::hxmath::math::Vector2Default get_offset();
		::Dynamic get_offset_dyn();

		 ::hxmath::math::Vector2Default set_offset( ::hxmath::math::Vector2Default offset);
		::Dynamic set_offset_dyn();

		Float get_angleDegrees();
		::Dynamic get_angleDegrees_dyn();

		Float set_angleDegrees(Float angleDegrees);
		::Dynamic set_angleDegrees_dyn();

};

} // end namespace hxmath
} // end namespace frames

#endif /* INCLUDED_hxmath_frames_Frame2Default */ 
