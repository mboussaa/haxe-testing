// Generated by Haxe 3.3.0
#ifndef INCLUDED_hxmath_frames_IFrame3
#define INCLUDED_hxmath_frames_IFrame3

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(hxmath,frames,IFrame3)
HX_DECLARE_CLASS2(hxmath,math,Matrix4x4Default)
HX_DECLARE_CLASS2(hxmath,math,QuaternionDefault)
HX_DECLARE_CLASS2(hxmath,math,Vector3Default)

namespace hxmath{
namespace frames{


class HXCPP_CLASS_ATTRIBUTES IFrame3_obj {
	public:
		typedef hx::Object super;
		HX_DO_INTERFACE_RTTI;

		 ::hxmath::math::Matrix4x4Default (hx::Object :: *_hx_get_matrix)(); 
		static inline  ::hxmath::math::Matrix4x4Default get_matrix( ::Dynamic _hx_) {
			return (_hx_.mPtr->*( static_cast< ::hxmath::frames::IFrame3_obj *>(_hx_.mPtr->_hx_getInterface(0xca0d5ed1)))->_hx_get_matrix)();
		}
		 ::hxmath::math::Vector3Default (hx::Object :: *_hx_get_offset)(); 
		static inline  ::hxmath::math::Vector3Default get_offset( ::Dynamic _hx_) {
			return (_hx_.mPtr->*( static_cast< ::hxmath::frames::IFrame3_obj *>(_hx_.mPtr->_hx_getInterface(0xca0d5ed1)))->_hx_get_offset)();
		}
		 ::hxmath::math::Vector3Default (hx::Object :: *_hx_set_offset)( ::hxmath::math::Vector3Default value); 
		static inline  ::hxmath::math::Vector3Default set_offset( ::Dynamic _hx_, ::hxmath::math::Vector3Default value) {
			return (_hx_.mPtr->*( static_cast< ::hxmath::frames::IFrame3_obj *>(_hx_.mPtr->_hx_getInterface(0xca0d5ed1)))->_hx_set_offset)(value);
		}
		 ::hxmath::math::QuaternionDefault (hx::Object :: *_hx_get_orientation)(); 
		static inline  ::hxmath::math::QuaternionDefault get_orientation( ::Dynamic _hx_) {
			return (_hx_.mPtr->*( static_cast< ::hxmath::frames::IFrame3_obj *>(_hx_.mPtr->_hx_getInterface(0xca0d5ed1)))->_hx_get_orientation)();
		}
		 ::hxmath::math::QuaternionDefault (hx::Object :: *_hx_set_orientation)( ::hxmath::math::QuaternionDefault value); 
		static inline  ::hxmath::math::QuaternionDefault set_orientation( ::Dynamic _hx_, ::hxmath::math::QuaternionDefault value) {
			return (_hx_.mPtr->*( static_cast< ::hxmath::frames::IFrame3_obj *>(_hx_.mPtr->_hx_getInterface(0xca0d5ed1)))->_hx_set_orientation)(value);
		}
};

} // end namespace hxmath
} // end namespace frames

#endif /* INCLUDED_hxmath_frames_IFrame3 */ 
