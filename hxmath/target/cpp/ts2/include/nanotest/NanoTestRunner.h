// Generated by Haxe 3.3.0
#ifndef INCLUDED_nanotest_NanoTestRunner
#define INCLUDED_nanotest_NanoTestRunner

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(nanotest,NanoTestCase)
HX_DECLARE_CLASS1(nanotest,NanoTestRunner)

namespace nanotest{


class HXCPP_CLASS_ATTRIBUTES NanoTestRunner_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef NanoTestRunner_obj OBJ_;
		NanoTestRunner_obj();

	public:
		void __construct( ::Dynamic printError);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nanotest.NanoTestRunner")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"nanotest.NanoTestRunner"); }
		static hx::ObjectPtr< NanoTestRunner_obj > __new( ::Dynamic printError);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~NanoTestRunner_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("NanoTestRunner","\x56","\x24","\xb0","\x2a"); }

		static void error(::String message, ::Dynamic position);
		static ::Dynamic error_dyn();

		static void warning(::String message, ::Dynamic position);
		static ::Dynamic warning_dyn();

		static ::String fileFromPosInfos( ::Dynamic posInfos);
		static ::Dynamic fileFromPosInfos_dyn();

		static  ::Dynamic posInfosToPosition( ::Dynamic posInfos);
		static ::Dynamic posInfosToPosition_dyn();

		::Array< ::Dynamic> cases;
		 ::Dynamic printError;
		 ::Dynamic &printError_dyn() { return printError;}
		::Dynamic print;
		inline ::Dynamic &print_dyn() {return print; }

		void add( ::nanotest::NanoTestCase testCase);
		::Dynamic add_dyn();

		Bool run();
		::Dynamic run_dyn();

};

} // end namespace nanotest

#endif /* INCLUDED_nanotest_NanoTestRunner */ 
