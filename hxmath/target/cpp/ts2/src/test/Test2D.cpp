// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_hxmath_frames_IFrame2
#include <hxmath/frames/IFrame2.h>
#endif
#ifndef INCLUDED_hxmath_frames__Frame2_Frame2_Impl_
#include <hxmath/frames/_Frame2/Frame2_Impl_.h>
#endif
#ifndef INCLUDED_hxmath_math_IntVector2Default
#include <hxmath/math/IntVector2Default.h>
#endif
#ifndef INCLUDED_hxmath_math_Matrix2x2Default
#include <hxmath/math/Matrix2x2Default.h>
#endif
#ifndef INCLUDED_hxmath_math_Matrix3x2Default
#include <hxmath/math/Matrix3x2Default.h>
#endif
#ifndef INCLUDED_hxmath_math_Vector2Default
#include <hxmath/math/Vector2Default.h>
#endif
#ifndef INCLUDED_hxmath_math__IntVector2_IntVector2_Impl_
#include <hxmath/math/_IntVector2/IntVector2_Impl_.h>
#endif
#ifndef INCLUDED_nanotest_NanoTestAssertResult
#include <nanotest/NanoTestAssertResult.h>
#endif
#ifndef INCLUDED_nanotest_NanoTestCase
#include <nanotest/NanoTestCase.h>
#endif
#ifndef INCLUDED_test_MathTestCase
#include <test/MathTestCase.h>
#endif
#ifndef INCLUDED_test_Test2D
#include <test/Test2D.h>
#endif

namespace test{

void Test2D_obj::__construct( ::Dynamic posInfos){
            	HX_STACK_FRAME("test.Test2D","new",0xb7778e52,"test.Test2D.new","test/Test2D.hx",10,0xc5b4993d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(posInfos,"posInfos")
HXLINE(  10)		super::__construct(posInfos);
            	}

Dynamic Test2D_obj::__CreateEmpty() { return new Test2D_obj; }

hx::ObjectPtr< Test2D_obj > Test2D_obj::__new( ::Dynamic posInfos)
{
	hx::ObjectPtr< Test2D_obj > _hx_result = new Test2D_obj();
	_hx_result->__construct(posInfos);
	return _hx_result;
}

Dynamic Test2D_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Test2D_obj > _hx_result = new Test2D_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void Test2D_obj::testVector2BasicOps(){
            	HX_STACK_FRAME("test.Test2D","testVector2BasicOps",0x60a41513,"test.Test2D.testVector2BasicOps","test/Test2D.hx",13,0xc5b4993d)
            	HX_STACK_THIS(this)
HXLINE(  14)		HX_VARI(  ::hxmath::math::Vector2Default,a) =  ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)0.0));
HXDLIN(  14)		HX_VARI(  ::hxmath::math::Vector2Default,b) =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)1.0));
HXDLIN(  14)		Float _hx_tmp = ((a->x * b->x) + (a->y * b->y));
HXDLIN(  14)		this->assertTrue((_hx_tmp == ((Float)0.0)),hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),14,HX_("test.Test2D",60,bd,21,72),HX_("testVector2BasicOps",21,d3,f9,26)));
HXLINE(  15)		HX_VARI(  ::hxmath::math::Vector2Default,_g1) =  ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)0.0));
HXDLIN(  15)		HX_VARI(  ::hxmath::math::Vector2Default,self) =  ::hxmath::math::Vector2Default_obj::__new(_g1->x,_g1->y);
HXDLIN(  15)		hx::MultEq(self->x,((Float)0.0));
HXDLIN(  15)		hx::MultEq(self->y,((Float)0.0));
HXDLIN(  15)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b1,"b") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)0.0));
HXDLIN(  15)		Bool _hx_tmp1;
HXDLIN(  15)		Bool _hx_tmp2;
HXDLIN(  15)		if (hx::IsNull( self )) {
HXLINE(  15)			_hx_tmp2 = hx::IsNull( b1 );
            		}
            		else {
HXLINE(  15)			_hx_tmp2 = false;
            		}
HXDLIN(  15)		if (!(_hx_tmp2)) {
HXLINE(  15)			Bool _hx_tmp3;
HXDLIN(  15)			Bool _hx_tmp4;
HXDLIN(  15)			if (hx::IsNotNull( self )) {
HXLINE(  15)				_hx_tmp4 = hx::IsNotNull( b1 );
            			}
            			else {
HXLINE(  15)				_hx_tmp4 = false;
            			}
HXDLIN(  15)			if (_hx_tmp4) {
HXLINE(  15)				_hx_tmp3 = (self->x == b1->x);
            			}
            			else {
HXLINE(  15)				_hx_tmp3 = false;
            			}
HXDLIN(  15)			if (_hx_tmp3) {
HXLINE(  15)				_hx_tmp1 = (self->y == b1->y);
            			}
            			else {
HXLINE(  15)				_hx_tmp1 = false;
            			}
            		}
            		else {
HXLINE(  15)			_hx_tmp1 = true;
            		}
HXDLIN(  15)		this->assertTrue(_hx_tmp1,hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),15,HX_("test.Test2D",60,bd,21,72),HX_("testVector2BasicOps",21,d3,f9,26)));
HXLINE(  17)		HX_VARI_NAME(  ::hxmath::math::IntVector2Default,a1,"a") = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)1,(int)0);
HXDLIN(  17)		HX_VARI_NAME(  ::hxmath::math::IntVector2Default,b2,"b") = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)0,(int)1);
HXDLIN(  17)		Int _hx_tmp5 = ((a1->x * b2->x) + (a1->y * b2->y));
HXDLIN(  17)		this->assertTrue((_hx_tmp5 == (int)0),hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),17,HX_("test.Test2D",60,bd,21,72),HX_("testVector2BasicOps",21,d3,f9,26)));
HXLINE(  18)		HX_VARI(  ::hxmath::math::IntVector2Default,_g3) = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)1,(int)0);
HXDLIN(  18)		HX_VARI_NAME(  ::hxmath::math::IntVector2Default,self1,"self") = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new(_g3->x,_g3->y);
HXDLIN(  18)		hx::MultEq(self1->x,(int)0);
HXDLIN(  18)		hx::MultEq(self1->y,(int)0);
HXDLIN(  18)		HX_VARI_NAME(  ::hxmath::math::IntVector2Default,b3,"b") = ::hxmath::math::_IntVector2::IntVector2_Impl__obj::_new((int)0,(int)0);
HXDLIN(  18)		Bool _hx_tmp6;
HXDLIN(  18)		Bool _hx_tmp7;
HXDLIN(  18)		if (hx::IsNull( self1 )) {
HXLINE(  18)			_hx_tmp7 = hx::IsNull( b3 );
            		}
            		else {
HXLINE(  18)			_hx_tmp7 = false;
            		}
HXDLIN(  18)		if (!(_hx_tmp7)) {
HXLINE(  18)			Bool _hx_tmp8;
HXDLIN(  18)			Bool _hx_tmp9;
HXDLIN(  18)			if (hx::IsNotNull( self1 )) {
HXLINE(  18)				_hx_tmp9 = hx::IsNotNull( b3 );
            			}
            			else {
HXLINE(  18)				_hx_tmp9 = false;
            			}
HXDLIN(  18)			if (_hx_tmp9) {
HXLINE(  18)				_hx_tmp8 = (self1->x == b3->x);
            			}
            			else {
HXLINE(  18)				_hx_tmp8 = false;
            			}
HXDLIN(  18)			if (_hx_tmp8) {
HXLINE(  18)				_hx_tmp6 = (self1->y == b3->y);
            			}
            			else {
HXLINE(  18)				_hx_tmp6 = false;
            			}
            		}
            		else {
HXLINE(  18)			_hx_tmp6 = true;
            		}
HXDLIN(  18)		this->assertTrue(_hx_tmp6,hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),18,HX_("test.Test2D",60,bd,21,72),HX_("testVector2BasicOps",21,d3,f9,26)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Test2D_obj,testVector2BasicOps,(void))

void Test2D_obj::testDeterminant(){
            	HX_STACK_FRAME("test.Test2D","testDeterminant",0xf3262b55,"test.Test2D.testDeterminant","test/Test2D.hx",23,0xc5b4993d)
            	HX_STACK_THIS(this)
HXLINE(  23)		HX_VARI(  ::hxmath::math::Matrix2x2Default,self) =  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0));
HXDLIN(  23)		Float _hx_tmp = ((self->a * self->d) - (self->b * self->c));
HXDLIN(  23)		this->assertTrue((_hx_tmp == ((Float)1.0)),hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),23,HX_("test.Test2D",60,bd,21,72),HX_("testDeterminant",63,4a,e4,86)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Test2D_obj,testDeterminant,(void))

void Test2D_obj::testHomogenousTranslation(){
            	HX_STACK_FRAME("test.Test2D","testHomogenousTranslation",0xb71a9b6b,"test.Test2D.testHomogenousTranslation","test/Test2D.hx",27,0xc5b4993d)
            	HX_STACK_THIS(this)
HXLINE(  28)		HX_VARI(  ::hxmath::math::Matrix3x2Default,m) =  ::hxmath::math::Matrix3x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0));
HXLINE(  29)		{
HXLINE(  29)			HX_VARI(  ::hxmath::math::Vector2Default,t) =  ::hxmath::math::Vector2Default_obj::__new((int)3,(int)-1);
HXDLIN(  29)			m->tx = t->x;
HXDLIN(  29)			m->ty = t->y;
            		}
HXLINE(  30)		HX_VARI(  ::hxmath::math::Vector2Default,v) =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)0.0));
HXDLIN(  30)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,m1,"m") =  ::hxmath::math::Matrix2x2Default_obj::__new(m->a,m->b,m->c,m->d);
HXDLIN(  30)		HX_VARI(  ::hxmath::math::Vector2Default,a) =  ::hxmath::math::Vector2Default_obj::__new(((m1->a * v->x) + (m1->b * v->y)),((m1->c * v->x) + (m1->d * v->y)));
HXDLIN(  30)		HX_VARI(  ::hxmath::math::Vector2Default,b) =  ::hxmath::math::Vector2Default_obj::__new(m->tx,m->ty);
HXDLIN(  30)		HX_VARI(  ::hxmath::math::Vector2Default,self) =  ::hxmath::math::Vector2Default_obj::__new(a->x,a->y);
HXDLIN(  30)		hx::AddEq(self->x,b->x);
HXDLIN(  30)		hx::AddEq(self->y,b->y);
HXDLIN(  30)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b1,"b") =  ::hxmath::math::Vector2Default_obj::__new(m->tx,m->ty);
HXDLIN(  30)		Bool _hx_tmp;
HXDLIN(  30)		Bool _hx_tmp1;
HXDLIN(  30)		if (hx::IsNull( self )) {
HXLINE(  30)			_hx_tmp1 = hx::IsNull( b1 );
            		}
            		else {
HXLINE(  30)			_hx_tmp1 = false;
            		}
HXDLIN(  30)		if (!(_hx_tmp1)) {
HXLINE(  30)			Bool _hx_tmp2;
HXDLIN(  30)			Bool _hx_tmp3;
HXDLIN(  30)			if (hx::IsNotNull( self )) {
HXLINE(  30)				_hx_tmp3 = hx::IsNotNull( b1 );
            			}
            			else {
HXLINE(  30)				_hx_tmp3 = false;
            			}
HXDLIN(  30)			if (_hx_tmp3) {
HXLINE(  30)				_hx_tmp2 = (self->x == b1->x);
            			}
            			else {
HXLINE(  30)				_hx_tmp2 = false;
            			}
HXDLIN(  30)			if (_hx_tmp2) {
HXLINE(  30)				_hx_tmp = (self->y == b1->y);
            			}
            			else {
HXLINE(  30)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(  30)			_hx_tmp = true;
            		}
HXDLIN(  30)		this->assertTrue(_hx_tmp,hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),30,HX_("test.Test2D",60,bd,21,72),HX_("testHomogenousTranslation",f9,57,7f,9f)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Test2D_obj,testHomogenousTranslation,(void))

void Test2D_obj::testTranspose(){
            	HX_STACK_FRAME("test.Test2D","testTranspose",0xa7bd2e39,"test.Test2D.testTranspose","test/Test2D.hx",34,0xc5b4993d)
            	HX_STACK_THIS(this)
HXLINE(  36)		HX_VARI( Float,a) = ::Math_obj::random();
HXDLIN(  36)		HX_VARI( Float,b) = ::Math_obj::random();
HXLINE(  37)		HX_VARI( Float,c) = ::Math_obj::random();
HXDLIN(  37)		HX_VARI( Float,d) = ::Math_obj::random();
HXLINE(  35)		HX_VARI(  ::hxmath::math::Matrix2x2Default,m) =  ::hxmath::math::Matrix2x2Default_obj::__new(a,b,c,d);
HXLINE(  39)		HX_VARI(  ::hxmath::math::Matrix2x2Default,self) =  ::hxmath::math::Matrix2x2Default_obj::__new(m->a,m->c,m->b,m->d);
HXDLIN(  39)		HX_VARI(  ::hxmath::math::Matrix2x2Default,n) =  ::hxmath::math::Matrix2x2Default_obj::__new(self->a,self->c,self->b,self->d);
HXLINE(  42)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,self1,"self") =  ::hxmath::math::Matrix2x2Default_obj::__new(m->a,m->b,m->c,m->d);
HXDLIN(  42)		hx::SubEq(self1->a,n->a);
HXDLIN(  42)		hx::SubEq(self1->b,n->b);
HXDLIN(  42)		hx::SubEq(self1->c,n->c);
HXDLIN(  42)		hx::SubEq(self1->d,n->d);
HXLINE(  43)		HX_VARI( Float,normSq) = ((((self1->a * self1->a) + (self1->b * self1->b)) + (self1->c * self1->c)) + (self1->d * self1->d));
HXLINE(  44)		this->assertTrue((normSq < ((Float)1e-6)),hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),44,HX_("test.Test2D",60,bd,21,72),HX_("testTranspose",c7,cd,69,7f)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Test2D_obj,testTranspose,(void))

void Test2D_obj::testRotation(){
            	HX_STACK_FRAME("test.Test2D","testRotation",0x08ef577e,"test.Test2D.testRotation","test/Test2D.hx",48,0xc5b4993d)
            	HX_STACK_THIS(this)
HXLINE(  52)		HX_VARI( Float,angle) = ((Float)::Math_obj::PI / (Float)((Float)2.0));
HXDLIN(  52)		HX_VARI(  ::hxmath::math::Matrix2x2Default,self) =  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN(  52)		HX_VARI( Float,s) = ::Math_obj::sin(angle);
HXDLIN(  52)		HX_VARI( Float,c) = ::Math_obj::cos(angle);
HXDLIN(  52)		self->a = c;
HXDLIN(  52)		self->b = -(s);
HXDLIN(  52)		self->c = s;
HXDLIN(  52)		self->d = c;
HXDLIN(  52)		HX_VARI(  ::hxmath::math::Vector2Default,v) =  ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)0.0));
HXDLIN(  52)		HX_VARI(  ::hxmath::math::Vector2Default,a) =  ::hxmath::math::Vector2Default_obj::__new(((self->a * v->x) + (self->b * v->y)),((self->c * v->x) + (self->d * v->y)));
HXDLIN(  52)		HX_VARI(  ::hxmath::math::Vector2Default,b) =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)1.0));
HXDLIN(  52)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self1,"self") =  ::hxmath::math::Vector2Default_obj::__new(a->x,a->y);
HXDLIN(  52)		hx::SubEq(self1->x,b->x);
HXDLIN(  52)		hx::SubEq(self1->y,b->y);
HXDLIN(  52)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self2,"self") = self1;
HXDLIN(  52)		Float _hx_tmp = ((self2->x * self2->x) + (self2->y * self2->y));
HXDLIN(  52)		Float _hx_tmp1 = ::Math_obj::sqrt(_hx_tmp);
HXDLIN(  52)		this->assertApproxEquals(((Float)0.0),_hx_tmp1,null(),hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),52,HX_("test.Test2D",60,bd,21,72),HX_("testRotation",b0,63,8d,7b)));
HXLINE(  53)		HX_VARI_NAME( Float,angle1,"angle") = ((Float)::Math_obj::PI / (Float)((Float)2.0));
HXDLIN(  53)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,self3,"self") =  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN(  53)		HX_VARI_NAME( Float,s1,"s") = ::Math_obj::sin(angle1);
HXDLIN(  53)		HX_VARI_NAME( Float,c1,"c") = ::Math_obj::cos(angle1);
HXDLIN(  53)		self3->a = c1;
HXDLIN(  53)		self3->b = -(s1);
HXDLIN(  53)		self3->c = s1;
HXDLIN(  53)		self3->d = c1;
HXDLIN(  53)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,v1,"v") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)1.0));
HXDLIN(  53)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,a1,"a") =  ::hxmath::math::Vector2Default_obj::__new(((self3->a * v1->x) + (self3->b * v1->y)),((self3->c * v1->x) + (self3->d * v1->y)));
HXDLIN(  53)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b1,"b") =  ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)0.0));
HXDLIN(  53)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self4,"self") =  ::hxmath::math::Vector2Default_obj::__new(a1->x,a1->y);
HXDLIN(  53)		hx::AddEq(self4->x,b1->x);
HXDLIN(  53)		hx::AddEq(self4->y,b1->y);
HXDLIN(  53)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self5,"self") = self4;
HXDLIN(  53)		Float _hx_tmp2 = ((self5->x * self5->x) + (self5->y * self5->y));
HXDLIN(  53)		Float _hx_tmp3 = ::Math_obj::sqrt(_hx_tmp2);
HXDLIN(  53)		this->assertApproxEquals(((Float)0.0),_hx_tmp3,null(),hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),53,HX_("test.Test2D",60,bd,21,72),HX_("testRotation",b0,63,8d,7b)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Test2D_obj,testRotation,(void))

void Test2D_obj::testVectorRotate(){
            	HX_STACK_FRAME("test.Test2D","testVectorRotate",0x96f319be,"test.Test2D.testVectorRotate","test/Test2D.hx",57,0xc5b4993d)
            	HX_STACK_THIS(this)
HXLINE(  61)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,this1,"this") =  ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)0.0));
HXDLIN(  61)		HX_VARI( Float,angle) = ((Float)::Math_obj::PI / (Float)((Float)2.0));
HXDLIN(  61)		HX_VARI(  ::hxmath::math::Vector2Default,pivot) =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)0.0));
HXDLIN(  61)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXDLIN(  61)		::Math_obj::cos(angle);
HXDLIN(  61)		::Math_obj::sin(angle);
HXDLIN(  61)		HX_VARI( Float,dx) = (self->x - pivot->x);
HXDLIN(  61)		HX_VARI( Float,dy) = (self->y - pivot->y);
HXDLIN(  61)		Float _hx_tmp = ::Math_obj::cos(angle);
HXDLIN(  61)		Float _hx_tmp1 = (dx * _hx_tmp);
HXDLIN(  61)		Float _hx_tmp2 = ::Math_obj::sin(angle);
HXDLIN(  61)		self->x = (_hx_tmp1 - (dy * _hx_tmp2));
HXDLIN(  61)		Float _hx_tmp3 = ::Math_obj::sin(angle);
HXDLIN(  61)		Float _hx_tmp4 = (dx * _hx_tmp3);
HXDLIN(  61)		Float _hx_tmp5 = ::Math_obj::cos(angle);
HXDLIN(  61)		self->y = (_hx_tmp4 + (dy * _hx_tmp5));
HXDLIN(  61)		HX_VARI(  ::hxmath::math::Vector2Default,b) =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)1.0));
HXDLIN(  61)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self1,"self") =  ::hxmath::math::Vector2Default_obj::__new(self->x,self->y);
HXDLIN(  61)		hx::SubEq(self1->x,b->x);
HXDLIN(  61)		hx::SubEq(self1->y,b->y);
HXDLIN(  61)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self2,"self") = self1;
HXDLIN(  61)		Float _hx_tmp6 = ((self2->x * self2->x) + (self2->y * self2->y));
HXDLIN(  61)		Float _hx_tmp7 = ::Math_obj::sqrt(_hx_tmp6);
HXDLIN(  61)		this->assertApproxEquals(((Float)0.0),_hx_tmp7,null(),hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),61,HX_("test.Test2D",60,bd,21,72),HX_("testVectorRotate",f0,26,90,49)));
HXLINE(  62)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,this2,"this") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)1.0));
HXDLIN(  62)		HX_VARI_NAME( Float,angle1,"angle") = ((Float)::Math_obj::PI / (Float)((Float)2.0));
HXDLIN(  62)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,pivot1,"pivot") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)0.0));
HXDLIN(  62)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self3,"self") = this2;
HXDLIN(  62)		::Math_obj::cos(angle1);
HXDLIN(  62)		::Math_obj::sin(angle1);
HXDLIN(  62)		HX_VARI_NAME( Float,dx1,"dx") = (self3->x - pivot1->x);
HXDLIN(  62)		HX_VARI_NAME( Float,dy1,"dy") = (self3->y - pivot1->y);
HXDLIN(  62)		Float _hx_tmp8 = ::Math_obj::cos(angle1);
HXDLIN(  62)		Float _hx_tmp9 = (dx1 * _hx_tmp8);
HXDLIN(  62)		Float _hx_tmp10 = ::Math_obj::sin(angle1);
HXDLIN(  62)		self3->x = (_hx_tmp9 - (dy1 * _hx_tmp10));
HXDLIN(  62)		Float _hx_tmp11 = ::Math_obj::sin(angle1);
HXDLIN(  62)		Float _hx_tmp12 = (dx1 * _hx_tmp11);
HXDLIN(  62)		Float _hx_tmp13 = ::Math_obj::cos(angle1);
HXDLIN(  62)		self3->y = (_hx_tmp12 + (dy1 * _hx_tmp13));
HXDLIN(  62)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b1,"b") =  ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)0.0));
HXDLIN(  62)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self4,"self") =  ::hxmath::math::Vector2Default_obj::__new(self3->x,self3->y);
HXDLIN(  62)		hx::AddEq(self4->x,b1->x);
HXDLIN(  62)		hx::AddEq(self4->y,b1->y);
HXDLIN(  62)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self5,"self") = self4;
HXDLIN(  62)		Float _hx_tmp14 = ((self5->x * self5->x) + (self5->y * self5->y));
HXDLIN(  62)		Float _hx_tmp15 = ::Math_obj::sqrt(_hx_tmp14);
HXDLIN(  62)		this->assertApproxEquals(((Float)0.0),_hx_tmp15,null(),hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),62,HX_("test.Test2D",60,bd,21,72),HX_("testVectorRotate",f0,26,90,49)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Test2D_obj,testVectorRotate,(void))

void Test2D_obj::testPolarConversion(){
            	HX_STACK_FRAME("test.Test2D","testPolarConversion",0x66b9ce34,"test.Test2D.testPolarConversion","test/Test2D.hx",66,0xc5b4993d)
            	HX_STACK_THIS(this)
HXLINE(  67)		HX_VARI( Float,angle) = ::Math_obj::PI;
HXDLIN(  67)		HX_VARI( Float,x) = ::Math_obj::cos(angle);
HXDLIN(  67)		HX_VARI( Float,y) = ::Math_obj::sin(angle);
HXDLIN(  67)		HX_VARI(  ::hxmath::math::Vector2Default,a) =  ::hxmath::math::Vector2Default_obj::__new(x,y);
HXDLIN(  67)		HX_VARI(  ::hxmath::math::Vector2Default,b) =  ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)0.0));
HXDLIN(  67)		HX_VARI(  ::hxmath::math::Vector2Default,self) =  ::hxmath::math::Vector2Default_obj::__new(a->x,a->y);
HXDLIN(  67)		hx::AddEq(self->x,b->x);
HXDLIN(  67)		hx::AddEq(self->y,b->y);
HXDLIN(  67)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self1,"self") = self;
HXDLIN(  67)		Float _hx_tmp = ((self1->x * self1->x) + (self1->y * self1->y));
HXDLIN(  67)		Float _hx_tmp1 = ::Math_obj::sqrt(_hx_tmp);
HXDLIN(  67)		this->assertApproxEquals(((Float)0.0),_hx_tmp1,null(),hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),67,HX_("test.Test2D",60,bd,21,72),HX_("testPolarConversion",42,8c,0f,2d)));
HXLINE(  70)		Float _hx_tmp2 = ::Math_obj::PI;
HXDLIN(  70)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,a1,"a") =  ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)0.0));
HXDLIN(  70)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self2,"self") =  ::hxmath::math::Vector2Default_obj::__new(-(a1->x),-(a1->y));
HXDLIN(  70)		Float _hx_tmp3 = ::Math_obj::atan2(self2->y,self2->x);
HXDLIN(  70)		Float _hx_tmp4 = ::Math_obj::abs(_hx_tmp3);
HXDLIN(  70)		this->assertApproxEquals(_hx_tmp2,_hx_tmp4,null(),hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),70,HX_("test.Test2D",60,bd,21,72),HX_("testPolarConversion",42,8c,0f,2d)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Test2D_obj,testPolarConversion,(void))

void Test2D_obj::testNorms(){
            	HX_STACK_FRAME("test.Test2D","testNorms",0x44255c77,"test.Test2D.testNorms","test/Test2D.hx",74,0xc5b4993d)
            	HX_STACK_THIS(this)
HXLINE(  75)		HX_VARI(  ::hxmath::math::Vector2Default,self) =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)1.0));
HXDLIN(  75)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self1,"self") =  ::hxmath::math::Vector2Default_obj::__new(self->x,self->y);
HXDLIN(  75)		Float _hx_tmp = ((self1->x * self1->x) + (self1->y * self1->y));
HXDLIN(  75)		HX_VARI( Float,length) = ::Math_obj::sqrt(_hx_tmp);
HXDLIN(  75)		if ((length > ((Float)0.0))) {
HXLINE(  75)			hx::DivEq(self1->x,length);
HXDLIN(  75)			hx::DivEq(self1->y,length);
            		}
HXDLIN(  75)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self2,"self") = self1;
HXDLIN(  75)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self3,"self") =  ::hxmath::math::Vector2Default_obj::__new(self2->x,self2->y);
HXDLIN(  75)		HX_VARI( Float,newX) = -(self3->y);
HXDLIN(  75)		self3->y = self3->x;
HXDLIN(  75)		self3->x = newX;
HXDLIN(  75)		HX_VARI(  ::hxmath::math::Vector2Default,b) =  ::hxmath::math::Vector2Default_obj::__new((int)-1,(int)0);
HXDLIN(  75)		Float _hx_tmp1 = ((self3->x * b->x) + (self3->y * b->y));
HXDLIN(  75)		this->assertTrue((_hx_tmp1 > ((Float)0.0)),hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),75,HX_("test.Test2D",60,bd,21,72),HX_("testNorms",05,9d,cb,68)));
HXLINE(  76)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self4,"self") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)1.0));
HXDLIN(  76)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self5,"self") =  ::hxmath::math::Vector2Default_obj::__new(self4->x,self4->y);
HXDLIN(  76)		Float _hx_tmp2 = ((self5->x * self5->x) + (self5->y * self5->y));
HXDLIN(  76)		HX_VARI_NAME( Float,length1,"length") = ::Math_obj::sqrt(_hx_tmp2);
HXDLIN(  76)		if ((length1 > ((Float)0.0))) {
HXLINE(  76)			hx::DivEq(self5->x,length1);
HXDLIN(  76)			hx::DivEq(self5->y,length1);
            		}
HXDLIN(  76)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self6,"self") = self5;
HXDLIN(  76)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self7,"self") =  ::hxmath::math::Vector2Default_obj::__new(self6->x,self6->y);
HXDLIN(  76)		HX_VARI_NAME( Float,newX1,"newX") = self7->y;
HXDLIN(  76)		self7->y = -(self7->x);
HXDLIN(  76)		self7->x = newX1;
HXDLIN(  76)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b1,"b") =  ::hxmath::math::Vector2Default_obj::__new((int)-1,(int)0);
HXDLIN(  76)		Float _hx_tmp3 = ((self7->x * b1->x) + (self7->y * b1->y));
HXDLIN(  76)		this->assertTrue((_hx_tmp3 < ((Float)0.0)),hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),76,HX_("test.Test2D",60,bd,21,72),HX_("testNorms",05,9d,cb,68)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Test2D_obj,testNorms,(void))

void Test2D_obj::testAngles(){
            	HX_STACK_FRAME("test.Test2D","testAngles",0x8f3b1f80,"test.Test2D.testAngles","test/Test2D.hx",80,0xc5b4993d)
            	HX_STACK_THIS(this)
HXLINE(  81)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,this1,"this") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)1.0));
HXDLIN(  81)		HX_VARI(  ::hxmath::math::Vector2Default,b) =  ::hxmath::math::Vector2Default_obj::__new((int)-1,(int)1);
HXDLIN(  81)		HX_VARI(  ::hxmath::math::Vector2Default,self) = this1;
HXDLIN(  81)		HX_VARI( Float,x) = ((self->x * b->y) - (b->x * self->y));
HXDLIN(  81)		HX_VARI( Float,w) = (int)0;
HXDLIN(  81)		Int _hx_tmp;
HXDLIN(  81)		Float _hx_tmp1 = ::Math_obj::abs(x);
HXDLIN(  81)		if ((_hx_tmp1 < w)) {
HXLINE(  81)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE(  81)			if ((x <= -(w))) {
HXLINE(  81)				_hx_tmp = (int)-1;
            			}
            			else {
HXLINE(  81)				_hx_tmp = (int)1;
            			}
            		}
HXDLIN(  81)		Float _hx_tmp2 = ((self->x * b->x) + (self->y * b->y));
HXDLIN(  81)		Float _hx_tmp3 = ((self->x * self->x) + (self->y * self->y));
HXDLIN(  81)		Float _hx_tmp4 = ::Math_obj::sqrt(_hx_tmp3);
HXDLIN(  81)		Float _hx_tmp5 = ((b->x * b->x) + (b->y * b->y));
HXDLIN(  81)		Float _hx_tmp6 = ::Math_obj::sqrt(_hx_tmp5);
HXDLIN(  81)		Float _hx_tmp7 = ::Math_obj::acos(((Float)_hx_tmp2 / (Float)(_hx_tmp4 * _hx_tmp6)));
HXDLIN(  81)		Float _hx_tmp8 = (_hx_tmp * _hx_tmp7);
HXDLIN(  81)		Float _hx_tmp9 = ((Float)::Math_obj::PI / (Float)((Float)4.0));
HXDLIN(  81)		this->assertApproxEquals(_hx_tmp8,_hx_tmp9,null(),hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),81,HX_("test.Test2D",60,bd,21,72),HX_("testAngles",32,5b,0d,7c)));
HXLINE(  82)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,this2,"this") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)1.0));
HXDLIN(  82)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b1,"b") =  ::hxmath::math::Vector2Default_obj::__new((int)1,(int)1);
HXDLIN(  82)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self1,"self") = this2;
HXDLIN(  82)		HX_VARI_NAME( Float,x1,"x") = ((self1->x * b1->y) - (b1->x * self1->y));
HXDLIN(  82)		HX_VARI_NAME( Float,w1,"w") = (int)0;
HXDLIN(  82)		Int _hx_tmp10;
HXDLIN(  82)		Float _hx_tmp11 = ::Math_obj::abs(x1);
HXDLIN(  82)		if ((_hx_tmp11 < w1)) {
HXLINE(  82)			_hx_tmp10 = (int)0;
            		}
            		else {
HXLINE(  82)			if ((x1 <= -(w1))) {
HXLINE(  82)				_hx_tmp10 = (int)-1;
            			}
            			else {
HXLINE(  82)				_hx_tmp10 = (int)1;
            			}
            		}
HXDLIN(  82)		Float _hx_tmp12 = ((self1->x * b1->x) + (self1->y * b1->y));
HXDLIN(  82)		Float _hx_tmp13 = ((self1->x * self1->x) + (self1->y * self1->y));
HXDLIN(  82)		Float _hx_tmp14 = ::Math_obj::sqrt(_hx_tmp13);
HXDLIN(  82)		Float _hx_tmp15 = ((b1->x * b1->x) + (b1->y * b1->y));
HXDLIN(  82)		Float _hx_tmp16 = ::Math_obj::sqrt(_hx_tmp15);
HXDLIN(  82)		Float _hx_tmp17 = ::Math_obj::acos(((Float)_hx_tmp12 / (Float)(_hx_tmp14 * _hx_tmp16)));
HXDLIN(  82)		Float _hx_tmp18 = (_hx_tmp10 * _hx_tmp17);
HXDLIN(  82)		Float _hx_tmp19 = ((Float)-(::Math_obj::PI) / (Float)((Float)4.0));
HXDLIN(  82)		this->assertApproxEquals(_hx_tmp18,_hx_tmp19,null(),hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),82,HX_("test.Test2D",60,bd,21,72),HX_("testAngles",32,5b,0d,7c)));
HXLINE(  83)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,this3,"this") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)1.0));
HXDLIN(  83)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b2,"b") =  ::hxmath::math::Vector2Default_obj::__new((int)-1,(int)-1);
HXDLIN(  83)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self2,"self") = this3;
HXDLIN(  83)		HX_VARI_NAME( Float,x2,"x") = ((self2->x * b2->y) - (b2->x * self2->y));
HXDLIN(  83)		HX_VARI_NAME( Float,w2,"w") = (int)0;
HXDLIN(  83)		Int _hx_tmp20;
HXDLIN(  83)		Float _hx_tmp21 = ::Math_obj::abs(x2);
HXDLIN(  83)		if ((_hx_tmp21 < w2)) {
HXLINE(  83)			_hx_tmp20 = (int)0;
            		}
            		else {
HXLINE(  83)			if ((x2 <= -(w2))) {
HXLINE(  83)				_hx_tmp20 = (int)-1;
            			}
            			else {
HXLINE(  83)				_hx_tmp20 = (int)1;
            			}
            		}
HXDLIN(  83)		Float _hx_tmp22 = ((self2->x * b2->x) + (self2->y * b2->y));
HXDLIN(  83)		Float _hx_tmp23 = ((self2->x * self2->x) + (self2->y * self2->y));
HXDLIN(  83)		Float _hx_tmp24 = ::Math_obj::sqrt(_hx_tmp23);
HXDLIN(  83)		Float _hx_tmp25 = ((b2->x * b2->x) + (b2->y * b2->y));
HXDLIN(  83)		Float _hx_tmp26 = ::Math_obj::sqrt(_hx_tmp25);
HXDLIN(  83)		Float _hx_tmp27 = ::Math_obj::acos(((Float)_hx_tmp22 / (Float)(_hx_tmp24 * _hx_tmp26)));
HXDLIN(  83)		Float _hx_tmp28 = (_hx_tmp20 * _hx_tmp27);
HXDLIN(  83)		Float _hx_tmp29 = ((Float)(((Float)3.0) * ::Math_obj::PI) / (Float)((Float)4.0));
HXDLIN(  83)		this->assertApproxEquals(_hx_tmp28,_hx_tmp29,null(),hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),83,HX_("test.Test2D",60,bd,21,72),HX_("testAngles",32,5b,0d,7c)));
HXLINE(  84)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,this4,"this") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)1.0));
HXDLIN(  84)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b3,"b") =  ::hxmath::math::Vector2Default_obj::__new((int)1,(int)-1);
HXDLIN(  84)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self3,"self") = this4;
HXDLIN(  84)		HX_VARI_NAME( Float,x3,"x") = ((self3->x * b3->y) - (b3->x * self3->y));
HXDLIN(  84)		HX_VARI_NAME( Float,w3,"w") = (int)0;
HXDLIN(  84)		Int _hx_tmp30;
HXDLIN(  84)		Float _hx_tmp31 = ::Math_obj::abs(x3);
HXDLIN(  84)		if ((_hx_tmp31 < w3)) {
HXLINE(  84)			_hx_tmp30 = (int)0;
            		}
            		else {
HXLINE(  84)			if ((x3 <= -(w3))) {
HXLINE(  84)				_hx_tmp30 = (int)-1;
            			}
            			else {
HXLINE(  84)				_hx_tmp30 = (int)1;
            			}
            		}
HXDLIN(  84)		Float _hx_tmp32 = ((self3->x * b3->x) + (self3->y * b3->y));
HXDLIN(  84)		Float _hx_tmp33 = ((self3->x * self3->x) + (self3->y * self3->y));
HXDLIN(  84)		Float _hx_tmp34 = ::Math_obj::sqrt(_hx_tmp33);
HXDLIN(  84)		Float _hx_tmp35 = ((b3->x * b3->x) + (b3->y * b3->y));
HXDLIN(  84)		Float _hx_tmp36 = ::Math_obj::sqrt(_hx_tmp35);
HXDLIN(  84)		Float _hx_tmp37 = ::Math_obj::acos(((Float)_hx_tmp32 / (Float)(_hx_tmp34 * _hx_tmp36)));
HXDLIN(  84)		Float _hx_tmp38 = (_hx_tmp30 * _hx_tmp37);
HXDLIN(  84)		Float _hx_tmp39 = ((Float)(((Float)-3.) * ::Math_obj::PI) / (Float)((Float)4.0));
HXDLIN(  84)		this->assertApproxEquals(_hx_tmp38,_hx_tmp39,null(),hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),84,HX_("test.Test2D",60,bd,21,72),HX_("testAngles",32,5b,0d,7c)));
HXLINE(  86)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,this5,"this") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)1.0));
HXDLIN(  86)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b4,"b") =  ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)0.0));
HXDLIN(  86)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self4,"self") = this5;
HXDLIN(  86)		HX_VARI_NAME( Float,x4,"x") = ((self4->x * b4->y) - (b4->x * self4->y));
HXDLIN(  86)		HX_VARI_NAME( Float,w4,"w") = (int)0;
HXDLIN(  86)		Int _hx_tmp40;
HXDLIN(  86)		Float _hx_tmp41 = ::Math_obj::abs(x4);
HXDLIN(  86)		if ((_hx_tmp41 < w4)) {
HXLINE(  86)			_hx_tmp40 = (int)0;
            		}
            		else {
HXLINE(  86)			if ((x4 <= -(w4))) {
HXLINE(  86)				_hx_tmp40 = (int)-1;
            			}
            			else {
HXLINE(  86)				_hx_tmp40 = (int)1;
            			}
            		}
HXDLIN(  86)		Float _hx_tmp42 = ((self4->x * b4->x) + (self4->y * b4->y));
HXDLIN(  86)		Float _hx_tmp43 = ((self4->x * self4->x) + (self4->y * self4->y));
HXDLIN(  86)		Float _hx_tmp44 = ::Math_obj::sqrt(_hx_tmp43);
HXDLIN(  86)		Float _hx_tmp45 = ((b4->x * b4->x) + (b4->y * b4->y));
HXDLIN(  86)		Float _hx_tmp46 = ::Math_obj::sqrt(_hx_tmp45);
HXDLIN(  86)		Float _hx_tmp47 = ::Math_obj::acos(((Float)_hx_tmp42 / (Float)(_hx_tmp44 * _hx_tmp46)));
HXDLIN(  86)		Float _hx_tmp48 = (_hx_tmp40 * _hx_tmp47);
HXDLIN(  86)		Float _hx_tmp49 = ((Float)-(::Math_obj::PI) / (Float)((Float)2.0));
HXDLIN(  86)		this->assertApproxEquals(_hx_tmp48,_hx_tmp49,null(),hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),86,HX_("test.Test2D",60,bd,21,72),HX_("testAngles",32,5b,0d,7c)));
HXLINE(  87)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,this6,"this") =  ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)0.0));
HXDLIN(  87)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b5,"b") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)1.0));
HXDLIN(  87)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self5,"self") = this6;
HXDLIN(  87)		HX_VARI_NAME( Float,x5,"x") = ((self5->x * b5->y) - (b5->x * self5->y));
HXDLIN(  87)		HX_VARI_NAME( Float,w5,"w") = (int)0;
HXDLIN(  87)		Int _hx_tmp50;
HXDLIN(  87)		Float _hx_tmp51 = ::Math_obj::abs(x5);
HXDLIN(  87)		if ((_hx_tmp51 < w5)) {
HXLINE(  87)			_hx_tmp50 = (int)0;
            		}
            		else {
HXLINE(  87)			if ((x5 <= -(w5))) {
HXLINE(  87)				_hx_tmp50 = (int)-1;
            			}
            			else {
HXLINE(  87)				_hx_tmp50 = (int)1;
            			}
            		}
HXDLIN(  87)		Float _hx_tmp52 = ((self5->x * b5->x) + (self5->y * b5->y));
HXDLIN(  87)		Float _hx_tmp53 = ((self5->x * self5->x) + (self5->y * self5->y));
HXDLIN(  87)		Float _hx_tmp54 = ::Math_obj::sqrt(_hx_tmp53);
HXDLIN(  87)		Float _hx_tmp55 = ((b5->x * b5->x) + (b5->y * b5->y));
HXDLIN(  87)		Float _hx_tmp56 = ::Math_obj::sqrt(_hx_tmp55);
HXDLIN(  87)		Float _hx_tmp57 = ::Math_obj::acos(((Float)_hx_tmp52 / (Float)(_hx_tmp54 * _hx_tmp56)));
HXDLIN(  87)		Float _hx_tmp58 = (_hx_tmp50 * _hx_tmp57);
HXDLIN(  87)		Float _hx_tmp59 = ((Float)::Math_obj::PI / (Float)((Float)2.0));
HXDLIN(  87)		this->assertApproxEquals(_hx_tmp58,_hx_tmp59,null(),hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),87,HX_("test.Test2D",60,bd,21,72),HX_("testAngles",32,5b,0d,7c)));
HXLINE(  89)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,this7,"this") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)1.0));
HXDLIN(  89)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b6,"b") =  ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)0.0));
HXDLIN(  89)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self6,"self") = this7;
HXDLIN(  89)		Float _hx_tmp60 = ((self6->x * b6->x) + (self6->y * b6->y));
HXDLIN(  89)		Float _hx_tmp61 = ((self6->x * self6->x) + (self6->y * self6->y));
HXDLIN(  89)		Float _hx_tmp62 = ::Math_obj::sqrt(_hx_tmp61);
HXDLIN(  89)		Float _hx_tmp63 = ((b6->x * b6->x) + (b6->y * b6->y));
HXDLIN(  89)		Float _hx_tmp64 = ::Math_obj::sqrt(_hx_tmp63);
HXDLIN(  89)		Float _hx_tmp65 = ::Math_obj::acos(((Float)_hx_tmp60 / (Float)(_hx_tmp62 * _hx_tmp64)));
HXDLIN(  89)		Float _hx_tmp66 = ((Float)::Math_obj::PI / (Float)((Float)2.0));
HXDLIN(  89)		this->assertApproxEquals(_hx_tmp65,_hx_tmp66,null(),hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),89,HX_("test.Test2D",60,bd,21,72),HX_("testAngles",32,5b,0d,7c)));
HXLINE(  90)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,this8,"this") =  ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)0.0));
HXDLIN(  90)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,b7,"b") =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)1.0));
HXDLIN(  90)		HX_VARI_NAME(  ::hxmath::math::Vector2Default,self7,"self") = this8;
HXDLIN(  90)		Float _hx_tmp67 = ((self7->x * b7->x) + (self7->y * b7->y));
HXDLIN(  90)		Float _hx_tmp68 = ((self7->x * self7->x) + (self7->y * self7->y));
HXDLIN(  90)		Float _hx_tmp69 = ::Math_obj::sqrt(_hx_tmp68);
HXDLIN(  90)		Float _hx_tmp70 = ((b7->x * b7->x) + (b7->y * b7->y));
HXDLIN(  90)		Float _hx_tmp71 = ::Math_obj::sqrt(_hx_tmp70);
HXDLIN(  90)		Float _hx_tmp72 = ::Math_obj::acos(((Float)_hx_tmp67 / (Float)(_hx_tmp69 * _hx_tmp71)));
HXDLIN(  90)		Float _hx_tmp73 = ((Float)::Math_obj::PI / (Float)((Float)2.0));
HXDLIN(  90)		this->assertApproxEquals(_hx_tmp72,_hx_tmp73,null(),hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),90,HX_("test.Test2D",60,bd,21,72),HX_("testAngles",32,5b,0d,7c)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Test2D_obj,testAngles,(void))

void Test2D_obj::testOrbit(){
            	HX_STACK_FRAME("test.Test2D","testOrbit",0xd97b6d4a,"test.Test2D.testOrbit","test/Test2D.hx",95,0xc5b4993d)
            	HX_STACK_THIS(this)
HXLINE(  95)		HX_VARI( Int,_g) = (int)0;
HXDLIN(  95)		while((_g < (int)5)){
HXLINE(  95)			++_g;
HXLINE(  97)			HX_VARI(  ::hxmath::math::Vector2Default,a) = this->randomVector2(null());
HXDLIN(  97)			HX_VARI(  ::hxmath::math::Vector2Default,b) =  ::hxmath::math::Vector2Default_obj::__new((int)1,(int)1);
HXDLIN(  97)			HX_VARI(  ::hxmath::math::Vector2Default,self) =  ::hxmath::math::Vector2Default_obj::__new(a->x,a->y);
HXDLIN(  97)			hx::AddEq(self->x,b->x);
HXDLIN(  97)			hx::AddEq(self->y,b->y);
HXLINE(  98)			HX_VARI( Float,angle) = ((Float)::Math_obj::PI / (Float)(int)2);
HXDLIN(  98)			HX_VARI(  ::hxmath::math::Matrix3x2Default,m) =  ::hxmath::math::Matrix3x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0));
HXDLIN(  98)			{
HXLINE(  98)				HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,self1,"self") =  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN(  98)				HX_VARI( Float,s) = ::Math_obj::sin(angle);
HXDLIN(  98)				HX_VARI( Float,c) = ::Math_obj::cos(angle);
HXDLIN(  98)				self1->a = c;
HXDLIN(  98)				self1->b = -(s);
HXDLIN(  98)				self1->c = s;
HXDLIN(  98)				self1->d = c;
HXDLIN(  98)				m->a = self1->a;
HXDLIN(  98)				m->b = self1->b;
HXDLIN(  98)				m->c = self1->c;
HXDLIN(  98)				m->d = self1->d;
            			}
HXDLIN(  98)			{
HXLINE(  98)				HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,m1,"m") =  ::hxmath::math::Matrix2x2Default_obj::__new(m->a,m->b,m->c,m->d);
HXDLIN(  98)				HX_VARI_NAME(  ::hxmath::math::Vector2Default,b1,"b") =  ::hxmath::math::Vector2Default_obj::__new(((m1->a * self->x) + (m1->b * self->y)),((m1->c * self->x) + (m1->d * self->y)));
HXDLIN(  98)				HX_VARI_NAME(  ::hxmath::math::Vector2Default,self2,"self") =  ::hxmath::math::Vector2Default_obj::__new(self->x,self->y);
HXDLIN(  98)				hx::SubEq(self2->x,b1->x);
HXDLIN(  98)				hx::SubEq(self2->y,b1->y);
HXDLIN(  98)				m->tx = self2->x;
HXDLIN(  98)				m->ty = self2->y;
            			}
HXLINE( 100)			{
HXLINE( 100)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 100)				while((_g1 < (int)5)){
HXLINE( 100)					++_g1;
HXLINE( 102)					HX_VARI(  ::hxmath::math::Vector2Default,point) = this->randomVector2(null());
HXLINE( 103)					HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,m2,"m") =  ::hxmath::math::Matrix2x2Default_obj::__new(m->a,m->b,m->c,m->d);
HXDLIN( 103)					HX_VARI_NAME(  ::hxmath::math::Vector2Default,a1,"a") =  ::hxmath::math::Vector2Default_obj::__new(((m2->a * point->x) + (m2->b * point->y)),((m2->c * point->x) + (m2->d * point->y)));
HXDLIN( 103)					HX_VARI_NAME(  ::hxmath::math::Vector2Default,b2,"b") =  ::hxmath::math::Vector2Default_obj::__new(m->tx,m->ty);
HXDLIN( 103)					HX_VARI_NAME(  ::hxmath::math::Vector2Default,self3,"self") =  ::hxmath::math::Vector2Default_obj::__new(a1->x,a1->y);
HXDLIN( 103)					hx::AddEq(self3->x,b2->x);
HXDLIN( 103)					hx::AddEq(self3->y,b2->y);
HXLINE( 104)					HX_VARI_NAME(  ::hxmath::math::Vector2Default,self4,"self") =  ::hxmath::math::Vector2Default_obj::__new(point->x,point->y);
HXDLIN( 104)					hx::SubEq(self4->x,self->x);
HXDLIN( 104)					hx::SubEq(self4->y,self->y);
HXDLIN( 104)					HX_VARI_NAME(  ::hxmath::math::Vector2Default,self5,"self") =  ::hxmath::math::Vector2Default_obj::__new(self3->x,self3->y);
HXDLIN( 104)					hx::SubEq(self5->x,self->x);
HXDLIN( 104)					hx::SubEq(self5->y,self->y);
HXDLIN( 104)					Float _hx_tmp = ((self4->x * self5->x) + (self4->y * self5->y));
HXDLIN( 104)					this->assertApproxEquals(((Float)0.0),_hx_tmp,null(),hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),104,HX_("test.Test2D",60,bd,21,72),HX_("testOrbit",d8,ad,21,fe)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Test2D_obj,testOrbit,(void))

void Test2D_obj::testLinearSubMatrix(){
            	HX_STACK_FRAME("test.Test2D","testLinearSubMatrix",0xb0bccafc,"test.Test2D.testLinearSubMatrix","test/Test2D.hx",110,0xc5b4993d)
            	HX_STACK_THIS(this)
HXLINE( 111)		HX_VARI(  ::hxmath::math::Matrix3x2Default,m) =  ::hxmath::math::Matrix3x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0));
HXLINE( 112)		{
HXLINE( 112)			HX_VARI(  ::hxmath::math::Matrix2x2Default,value) =  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)1.0),((Float)2.0),((Float)3.0),((Float)4.0));
HXDLIN( 112)			m->a = value->a;
HXDLIN( 112)			m->b = value->b;
HXDLIN( 112)			m->c = value->c;
HXDLIN( 112)			m->d = value->d;
            		}
HXLINE( 113)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,m1,"m") =  ::hxmath::math::Matrix2x2Default_obj::__new(m->a,m->b,m->c,m->d);
HXDLIN( 113)		HX_VARI(  ::hxmath::math::Matrix2x2Default,n) =  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)1.0),((Float)2.0),((Float)3.0),((Float)4.0));
HXDLIN( 113)		Bool _hx_tmp;
HXDLIN( 113)		Bool _hx_tmp1;
HXDLIN( 113)		if (hx::IsNull( m1 )) {
HXLINE( 113)			_hx_tmp1 = hx::IsNull( n );
            		}
            		else {
HXLINE( 113)			_hx_tmp1 = false;
            		}
HXDLIN( 113)		if (!(_hx_tmp1)) {
HXLINE( 113)			Bool _hx_tmp2;
HXDLIN( 113)			Bool _hx_tmp3;
HXDLIN( 113)			Bool _hx_tmp4;
HXDLIN( 113)			Bool _hx_tmp5;
HXDLIN( 113)			if (hx::IsNotNull( m1 )) {
HXLINE( 113)				_hx_tmp5 = hx::IsNotNull( n );
            			}
            			else {
HXLINE( 113)				_hx_tmp5 = false;
            			}
HXDLIN( 113)			if (_hx_tmp5) {
HXLINE( 113)				_hx_tmp4 = (m1->a == n->a);
            			}
            			else {
HXLINE( 113)				_hx_tmp4 = false;
            			}
HXDLIN( 113)			if (_hx_tmp4) {
HXLINE( 113)				_hx_tmp3 = (m1->b == n->b);
            			}
            			else {
HXLINE( 113)				_hx_tmp3 = false;
            			}
HXDLIN( 113)			if (_hx_tmp3) {
HXLINE( 113)				_hx_tmp2 = (m1->c == n->c);
            			}
            			else {
HXLINE( 113)				_hx_tmp2 = false;
            			}
HXDLIN( 113)			if (_hx_tmp2) {
HXLINE( 113)				_hx_tmp = (m1->d == n->d);
            			}
            			else {
HXLINE( 113)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 113)			_hx_tmp = true;
            		}
HXDLIN( 113)		this->assertTrue(_hx_tmp,hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),113,HX_("test.Test2D",60,bd,21,72),HX_("testLinearSubMatrix",0a,89,12,77)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Test2D_obj,testLinearSubMatrix,(void))

void Test2D_obj::testMatrixFrameInverse(){
            	HX_STACK_FRAME("test.Test2D","testMatrixFrameInverse",0x0ad7d524,"test.Test2D.testMatrixFrameInverse","test/Test2D.hx",118,0xc5b4993d)
            	HX_STACK_THIS(this)
HXLINE( 118)		HX_VARI( Int,_g) = (int)0;
HXDLIN( 118)		while((_g < (int)10)){
HXLINE( 118)			++_g;
HXLINE( 121)			HX_VARI( ::Dynamic,frame) = this->randomFrame2(null());
HXLINE( 124)			HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,this1,"this") = ( ( ::hxmath::math::Matrix3x2Default)( ::Dynamic(frame->__Field(HX_("get_matrix",0a,a6,4f,ac),hx::paccDynamic))()) );
HXDLIN( 124)			HX_VARI(  ::hxmath::math::Matrix3x2Default,self) = this1;
HXDLIN( 124)			HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,this2,"this") =  ::hxmath::math::Matrix2x2Default_obj::__new(self->a,self->b,self->c,self->d);
HXDLIN( 124)			HX_VARI(  ::hxmath::math::Vector2Default,v) = ( ( ::hxmath::math::Vector2Default)( ::Dynamic(frame->__Field(HX_("get_offset",5c,07,c7,50),hx::paccDynamic))()) );
HXDLIN( 124)			HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,self1,"self") = this2;
HXDLIN( 124)			HX_VARI_NAME(  ::hxmath::math::Vector2Default,self2,"self") =  ::hxmath::math::Vector2Default_obj::__new(((self1->a * v->x) + (self1->c * v->y)),((self1->b * v->x) + (self1->d * v->y)));
HXDLIN( 124)			self2->x = -(self2->x);
HXDLIN( 124)			self2->y = -(self2->y);
HXDLIN( 124)			HX_VARI( ::Dynamic,invFrame) = ::hxmath::frames::_Frame2::Frame2_Impl__obj::_new(self2,-(( (Float)( ::Dynamic(frame->__Field(HX_("get_angleDegrees",9d,24,1b,42),hx::paccDynamic))()) )));
HXLINE( 126)			::hxmath::frames::IFrame2_obj::get_matrix(frame);
HXLINE( 129)			HX_VARI(  ::hxmath::math::Matrix3x2Default,invFrameMatrix) = ::hxmath::frames::IFrame2_obj::get_matrix(invFrame);
HXLINE( 130)			HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,this3,"this") = ::hxmath::frames::IFrame2_obj::get_matrix(frame);
HXDLIN( 130)			HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,self3,"self") = this3;
HXDLIN( 130)			{
HXLINE( 130)				HX_VARI( Float,temp) = self3->c;
HXDLIN( 130)				self3->c = self3->b;
HXDLIN( 130)				self3->b = temp;
            			}
HXDLIN( 130)			HX_VARI( Float,tx) = -(((self3->a * self3->tx) + (self3->b * self3->ty)));
HXDLIN( 130)			HX_VARI( Float,ty) = -(((self3->c * self3->tx) + (self3->d * self3->ty)));
HXDLIN( 130)			self3->tx = tx;
HXDLIN( 130)			self3->ty = ty;
HXLINE( 133)			HX_VARI(  ::hxmath::math::Vector2Default,homogenous0) =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)0.0));
HXLINE( 134)			HX_VARI(  ::hxmath::math::Vector2Default,homogenousX) =  ::hxmath::math::Vector2Default_obj::__new(((Float)1.0),((Float)0.0));
HXLINE( 135)			HX_VARI(  ::hxmath::math::Vector2Default,homogenousY) =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)1.0));
HXLINE( 138)			HX_VARI(  ::hxmath::math::Matrix2x2Default,m) =  ::hxmath::math::Matrix2x2Default_obj::__new(invFrameMatrix->a,invFrameMatrix->b,invFrameMatrix->c,invFrameMatrix->d);
HXDLIN( 138)			HX_VARI(  ::hxmath::math::Vector2Default,a) =  ::hxmath::math::Vector2Default_obj::__new(((m->a * homogenous0->x) + (m->b * homogenous0->y)),((m->c * homogenous0->x) + (m->d * homogenous0->y)));
HXDLIN( 138)			HX_VARI(  ::hxmath::math::Vector2Default,b) =  ::hxmath::math::Vector2Default_obj::__new(invFrameMatrix->tx,invFrameMatrix->ty);
HXDLIN( 138)			HX_VARI_NAME(  ::hxmath::math::Vector2Default,self4,"self") =  ::hxmath::math::Vector2Default_obj::__new(a->x,a->y);
HXDLIN( 138)			hx::AddEq(self4->x,b->x);
HXDLIN( 138)			hx::AddEq(self4->y,b->y);
HXDLIN( 138)			HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,m1,"m") =  ::hxmath::math::Matrix2x2Default_obj::__new(self3->a,self3->b,self3->c,self3->d);
HXDLIN( 138)			HX_VARI_NAME(  ::hxmath::math::Vector2Default,a1,"a") =  ::hxmath::math::Vector2Default_obj::__new(((m1->a * homogenous0->x) + (m1->b * homogenous0->y)),((m1->c * homogenous0->x) + (m1->d * homogenous0->y)));
HXDLIN( 138)			HX_VARI_NAME(  ::hxmath::math::Vector2Default,b1,"b") =  ::hxmath::math::Vector2Default_obj::__new(self3->tx,self3->ty);
HXDLIN( 138)			HX_VARI_NAME(  ::hxmath::math::Vector2Default,self5,"self") =  ::hxmath::math::Vector2Default_obj::__new(a1->x,a1->y);
HXDLIN( 138)			hx::AddEq(self5->x,b1->x);
HXDLIN( 138)			hx::AddEq(self5->y,b1->y);
HXDLIN( 138)			HX_VARI_NAME(  ::hxmath::math::Vector2Default,self6,"self") =  ::hxmath::math::Vector2Default_obj::__new(self4->x,self4->y);
HXDLIN( 138)			hx::SubEq(self6->x,self5->x);
HXDLIN( 138)			hx::SubEq(self6->y,self5->y);
HXDLIN( 138)			HX_VARI_NAME(  ::hxmath::math::Vector2Default,self7,"self") = self6;
HXDLIN( 138)			Float _hx_tmp = ((self7->x * self7->x) + (self7->y * self7->y));
HXDLIN( 138)			this->assertApproxEquals(((Float)0.0),_hx_tmp,null(),hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),138,HX_("test.Test2D",60,bd,21,72),HX_("testMatrixFrameInverse",d6,d3,6d,c7)));
HXLINE( 139)			HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,m2,"m") =  ::hxmath::math::Matrix2x2Default_obj::__new(invFrameMatrix->a,invFrameMatrix->b,invFrameMatrix->c,invFrameMatrix->d);
HXDLIN( 139)			HX_VARI_NAME(  ::hxmath::math::Vector2Default,a2,"a") =  ::hxmath::math::Vector2Default_obj::__new(((m2->a * homogenousX->x) + (m2->b * homogenousX->y)),((m2->c * homogenousX->x) + (m2->d * homogenousX->y)));
HXDLIN( 139)			HX_VARI_NAME(  ::hxmath::math::Vector2Default,b2,"b") =  ::hxmath::math::Vector2Default_obj::__new(invFrameMatrix->tx,invFrameMatrix->ty);
HXDLIN( 139)			HX_VARI_NAME(  ::hxmath::math::Vector2Default,self8,"self") =  ::hxmath::math::Vector2Default_obj::__new(a2->x,a2->y);
HXDLIN( 139)			hx::AddEq(self8->x,b2->x);
HXDLIN( 139)			hx::AddEq(self8->y,b2->y);
HXDLIN( 139)			HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,m3,"m") =  ::hxmath::math::Matrix2x2Default_obj::__new(self3->a,self3->b,self3->c,self3->d);
HXDLIN( 139)			HX_VARI_NAME(  ::hxmath::math::Vector2Default,a3,"a") =  ::hxmath::math::Vector2Default_obj::__new(((m3->a * homogenousX->x) + (m3->b * homogenousX->y)),((m3->c * homogenousX->x) + (m3->d * homogenousX->y)));
HXDLIN( 139)			HX_VARI_NAME(  ::hxmath::math::Vector2Default,b3,"b") =  ::hxmath::math::Vector2Default_obj::__new(self3->tx,self3->ty);
HXDLIN( 139)			HX_VARI_NAME(  ::hxmath::math::Vector2Default,self9,"self") =  ::hxmath::math::Vector2Default_obj::__new(a3->x,a3->y);
HXDLIN( 139)			hx::AddEq(self9->x,b3->x);
HXDLIN( 139)			hx::AddEq(self9->y,b3->y);
HXDLIN( 139)			HX_VARI_NAME(  ::hxmath::math::Vector2Default,self10,"self") =  ::hxmath::math::Vector2Default_obj::__new(self8->x,self8->y);
HXDLIN( 139)			hx::SubEq(self10->x,self9->x);
HXDLIN( 139)			hx::SubEq(self10->y,self9->y);
HXDLIN( 139)			HX_VARI_NAME(  ::hxmath::math::Vector2Default,self11,"self") = self10;
HXDLIN( 139)			Float _hx_tmp1 = ((self11->x * self11->x) + (self11->y * self11->y));
HXDLIN( 139)			this->assertApproxEquals(((Float)0.0),_hx_tmp1,null(),hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),139,HX_("test.Test2D",60,bd,21,72),HX_("testMatrixFrameInverse",d6,d3,6d,c7)));
HXLINE( 140)			HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,m4,"m") =  ::hxmath::math::Matrix2x2Default_obj::__new(invFrameMatrix->a,invFrameMatrix->b,invFrameMatrix->c,invFrameMatrix->d);
HXDLIN( 140)			HX_VARI_NAME(  ::hxmath::math::Vector2Default,a4,"a") =  ::hxmath::math::Vector2Default_obj::__new(((m4->a * homogenousY->x) + (m4->b * homogenousY->y)),((m4->c * homogenousY->x) + (m4->d * homogenousY->y)));
HXDLIN( 140)			HX_VARI_NAME(  ::hxmath::math::Vector2Default,b4,"b") =  ::hxmath::math::Vector2Default_obj::__new(invFrameMatrix->tx,invFrameMatrix->ty);
HXDLIN( 140)			HX_VARI_NAME(  ::hxmath::math::Vector2Default,self12,"self") =  ::hxmath::math::Vector2Default_obj::__new(a4->x,a4->y);
HXDLIN( 140)			hx::AddEq(self12->x,b4->x);
HXDLIN( 140)			hx::AddEq(self12->y,b4->y);
HXDLIN( 140)			HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,m5,"m") =  ::hxmath::math::Matrix2x2Default_obj::__new(self3->a,self3->b,self3->c,self3->d);
HXDLIN( 140)			HX_VARI_NAME(  ::hxmath::math::Vector2Default,a5,"a") =  ::hxmath::math::Vector2Default_obj::__new(((m5->a * homogenousY->x) + (m5->b * homogenousY->y)),((m5->c * homogenousY->x) + (m5->d * homogenousY->y)));
HXDLIN( 140)			HX_VARI_NAME(  ::hxmath::math::Vector2Default,b5,"b") =  ::hxmath::math::Vector2Default_obj::__new(self3->tx,self3->ty);
HXDLIN( 140)			HX_VARI_NAME(  ::hxmath::math::Vector2Default,self13,"self") =  ::hxmath::math::Vector2Default_obj::__new(a5->x,a5->y);
HXDLIN( 140)			hx::AddEq(self13->x,b5->x);
HXDLIN( 140)			hx::AddEq(self13->y,b5->y);
HXDLIN( 140)			HX_VARI_NAME(  ::hxmath::math::Vector2Default,self14,"self") =  ::hxmath::math::Vector2Default_obj::__new(self12->x,self12->y);
HXDLIN( 140)			hx::SubEq(self14->x,self13->x);
HXDLIN( 140)			hx::SubEq(self14->y,self13->y);
HXDLIN( 140)			HX_VARI_NAME(  ::hxmath::math::Vector2Default,self15,"self") = self14;
HXDLIN( 140)			Float _hx_tmp2 = ((self15->x * self15->x) + (self15->y * self15->y));
HXDLIN( 140)			this->assertApproxEquals(((Float)0.0),_hx_tmp2,null(),hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),140,HX_("test.Test2D",60,bd,21,72),HX_("testMatrixFrameInverse",d6,d3,6d,c7)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Test2D_obj,testMatrixFrameInverse,(void))

void Test2D_obj::testOrthoNormalize(){
            	HX_STACK_FRAME("test.Test2D","testOrthoNormalize",0x944ca375,"test.Test2D.testOrthoNormalize","test/Test2D.hx",146,0xc5b4993d)
            	HX_STACK_THIS(this)
HXLINE( 146)		HX_VARI( Int,_g) = (int)0;
HXDLIN( 146)		while((_g < (int)10)){
HXLINE( 146)			++_g;
HXLINE( 148)			HX_VARI(  ::hxmath::math::Vector2Default,u) = this->randomVector2(null());
HXLINE( 149)			HX_VARI(  ::hxmath::math::Vector2Default,v) = this->randomVector2(null());
HXLINE( 151)			{
HXLINE( 151)				{
HXLINE( 151)					Float _hx_tmp = ((u->x * u->x) + (u->y * u->y));
HXDLIN( 151)					HX_VARI( Float,length) = ::Math_obj::sqrt(_hx_tmp);
HXDLIN( 151)					if ((length > ((Float)0.0))) {
HXLINE( 151)						hx::DivEq(u->x,length);
HXDLIN( 151)						hx::DivEq(u->y,length);
            					}
            				}
HXDLIN( 151)				{
HXLINE( 151)					HX_VARI(  ::hxmath::math::Vector2Default,self) =  ::hxmath::math::Vector2Default_obj::__new(v->x,v->y);
HXDLIN( 151)					HX_VARI( Float,s) = ((Float)((self->x * u->x) + (self->y * u->y)) / (Float)((u->x * u->x) + (u->y * u->y)));
HXDLIN( 151)					{
HXLINE( 151)						HX_VARI_NAME( Int,_g1,"_g") = (int)0;
HXDLIN( 151)						while((_g1 < (int)2)){
HXLINE( 151)							HX_VARI( Int,i) = _g1++;
HXDLIN( 151)							{
HXLINE( 151)								 ::Dynamic _hx_tmp1;
HXDLIN( 151)								switch((int)(i)){
            									case (int)0: {
HXLINE( 151)										_hx_tmp1 = u->x;
            									}
            									break;
            									case (int)1: {
HXLINE( 151)										_hx_tmp1 = u->y;
            									}
            									break;
            									default:{
HXLINE( 151)										HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            									}
            								}
HXDLIN( 151)								HX_VARI( Float,value) = ( (Float)(_hx_tmp1) );
HXDLIN( 151)								switch((int)(i)){
            									case (int)0: {
HXLINE( 151)										self->x = value;
            									}
            									break;
            									case (int)1: {
HXLINE( 151)										self->y = value;
            									}
            									break;
            									default:{
HXLINE( 151)										HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            									}
            								}
            							}
            						}
            					}
HXDLIN( 151)					{
HXLINE( 151)						hx::MultEq(self->x,s);
HXDLIN( 151)						hx::MultEq(self->y,s);
            					}
HXDLIN( 151)					hx::SubEq(v->x,self->x);
HXDLIN( 151)					hx::SubEq(v->y,self->y);
            				}
HXDLIN( 151)				{
HXLINE( 151)					Float _hx_tmp2 = ((v->x * v->x) + (v->y * v->y));
HXDLIN( 151)					HX_VARI_NAME( Float,length1,"length") = ::Math_obj::sqrt(_hx_tmp2);
HXDLIN( 151)					if ((length1 > ((Float)0.0))) {
HXLINE( 151)						hx::DivEq(v->x,length1);
HXDLIN( 151)						hx::DivEq(v->y,length1);
            					}
            				}
            			}
HXLINE( 153)			Float _hx_tmp3 = ((u->x * u->x) + (u->y * u->y));
HXDLIN( 153)			Float _hx_tmp4 = ::Math_obj::sqrt(_hx_tmp3);
HXDLIN( 153)			this->assertApproxEquals(((Float)1.0),_hx_tmp4,null(),hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),153,HX_("test.Test2D",60,bd,21,72),HX_("testOrthoNormalize",27,e1,2c,f2)));
HXLINE( 154)			Float _hx_tmp5 = ((v->x * v->x) + (v->y * v->y));
HXDLIN( 154)			Float _hx_tmp6 = ::Math_obj::sqrt(_hx_tmp5);
HXDLIN( 154)			this->assertApproxEquals(((Float)1.0),_hx_tmp6,null(),hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),154,HX_("test.Test2D",60,bd,21,72),HX_("testOrthoNormalize",27,e1,2c,f2)));
HXLINE( 155)			Float _hx_tmp7 = ((u->x * v->x) + (u->y * v->y));
HXDLIN( 155)			this->assertApproxEquals(((Float)0.0),_hx_tmp7,null(),hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),155,HX_("test.Test2D",60,bd,21,72),HX_("testOrthoNormalize",27,e1,2c,f2)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Test2D_obj,testOrthoNormalize,(void))

void Test2D_obj::testReflect(){
            	HX_STACK_FRAME("test.Test2D","testReflect",0x5ad071fd,"test.Test2D.testReflect","test/Test2D.hx",161,0xc5b4993d)
            	HX_STACK_THIS(this)
HXLINE( 161)		HX_VARI( Int,_g) = (int)0;
HXDLIN( 161)		while((_g < (int)10)){
HXLINE( 161)			++_g;
HXLINE( 163)			HX_VARI(  ::hxmath::math::Vector2Default,u) = this->randomVector2(null());
HXLINE( 164)			HX_VARI(  ::hxmath::math::Vector2Default,normal) =  ::hxmath::math::Vector2Default_obj::__new(((Float)0.0),((Float)1.0));
HXDLIN( 164)			HX_VARI(  ::hxmath::math::Vector2Default,self) =  ::hxmath::math::Vector2Default_obj::__new(u->x,u->y);
HXDLIN( 164)			HX_VARI_NAME(  ::hxmath::math::Vector2Default,self1,"self") =  ::hxmath::math::Vector2Default_obj::__new(self->x,self->y);
HXDLIN( 164)			HX_VARI( Float,s) = ((Float)((self1->x * normal->x) + (self1->y * normal->y)) / (Float)((normal->x * normal->x) + (normal->y * normal->y)));
HXDLIN( 164)			{
HXLINE( 164)				HX_VARI_NAME( Int,_g1,"_g") = (int)0;
HXDLIN( 164)				while((_g1 < (int)2)){
HXLINE( 164)					HX_VARI( Int,i) = _g1++;
HXDLIN( 164)					{
HXLINE( 164)						 ::Dynamic _hx_tmp;
HXDLIN( 164)						switch((int)(i)){
            							case (int)0: {
HXLINE( 164)								_hx_tmp = normal->x;
            							}
            							break;
            							case (int)1: {
HXLINE( 164)								_hx_tmp = normal->y;
            							}
            							break;
            							default:{
HXLINE( 164)								HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            							}
            						}
HXDLIN( 164)						HX_VARI( Float,value) = ( (Float)(_hx_tmp) );
HXDLIN( 164)						switch((int)(i)){
            							case (int)0: {
HXLINE( 164)								self1->x = value;
            							}
            							break;
            							case (int)1: {
HXLINE( 164)								self1->y = value;
            							}
            							break;
            							default:{
HXLINE( 164)								HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            							}
            						}
            					}
            				}
            			}
HXDLIN( 164)			{
HXLINE( 164)				hx::MultEq(self1->x,s);
HXDLIN( 164)				hx::MultEq(self1->y,s);
            			}
HXDLIN( 164)			{
HXLINE( 164)				hx::MultEq(self1->x,((Float)2.0));
HXDLIN( 164)				hx::MultEq(self1->y,((Float)2.0));
            			}
HXDLIN( 164)			{
HXLINE( 164)				hx::SubEq(self->x,self1->x);
HXDLIN( 164)				hx::SubEq(self->y,self1->y);
            			}
HXLINE( 166)			this->assertEquals(u->x,self->x,hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),166,HX_("test.Test2D",60,bd,21,72),HX_("testReflect",0b,72,f2,a5)));
HXLINE( 167)			this->assertEquals(-(u->y),self->y,hx::SourceInfo(HX_("Test2D.hx",7a,74,c6,ce),167,HX_("test.Test2D",60,bd,21,72),HX_("testReflect",0b,72,f2,a5)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Test2D_obj,testReflect,(void))


Test2D_obj::Test2D_obj()
{
}

hx::Val Test2D_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"testNorms") ) { return hx::Val( testNorms_dyn()); }
		if (HX_FIELD_EQ(inName,"testOrbit") ) { return hx::Val( testOrbit_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testAngles") ) { return hx::Val( testAngles_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testReflect") ) { return hx::Val( testReflect_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testRotation") ) { return hx::Val( testRotation_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"testTranspose") ) { return hx::Val( testTranspose_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"testDeterminant") ) { return hx::Val( testDeterminant_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"testVectorRotate") ) { return hx::Val( testVectorRotate_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"testOrthoNormalize") ) { return hx::Val( testOrthoNormalize_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"testVector2BasicOps") ) { return hx::Val( testVector2BasicOps_dyn()); }
		if (HX_FIELD_EQ(inName,"testPolarConversion") ) { return hx::Val( testPolarConversion_dyn()); }
		if (HX_FIELD_EQ(inName,"testLinearSubMatrix") ) { return hx::Val( testLinearSubMatrix_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"testMatrixFrameInverse") ) { return hx::Val( testMatrixFrameInverse_dyn()); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"testHomogenousTranslation") ) { return hx::Val( testHomogenousTranslation_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Test2D_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Test2D_obj_sStaticStorageInfo = 0;
#endif

static ::String Test2D_obj_sMemberFields[] = {
	HX_HCSTRING("testVector2BasicOps","\x21","\xd3","\xf9","\x26"),
	HX_HCSTRING("testDeterminant","\x63","\x4a","\xe4","\x86"),
	HX_HCSTRING("testHomogenousTranslation","\xf9","\x57","\x7f","\x9f"),
	HX_HCSTRING("testTranspose","\xc7","\xcd","\x69","\x7f"),
	HX_HCSTRING("testRotation","\xb0","\x63","\x8d","\x7b"),
	HX_HCSTRING("testVectorRotate","\xf0","\x26","\x90","\x49"),
	HX_HCSTRING("testPolarConversion","\x42","\x8c","\x0f","\x2d"),
	HX_HCSTRING("testNorms","\x05","\x9d","\xcb","\x68"),
	HX_HCSTRING("testAngles","\x32","\x5b","\x0d","\x7c"),
	HX_HCSTRING("testOrbit","\xd8","\xad","\x21","\xfe"),
	HX_HCSTRING("testLinearSubMatrix","\x0a","\x89","\x12","\x77"),
	HX_HCSTRING("testMatrixFrameInverse","\xd6","\xd3","\x6d","\xc7"),
	HX_HCSTRING("testOrthoNormalize","\x27","\xe1","\x2c","\xf2"),
	HX_HCSTRING("testReflect","\x0b","\x72","\xf2","\xa5"),
	::String(null()) };

static void Test2D_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Test2D_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Test2D_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Test2D_obj::__mClass,"__mClass");
};

#endif

hx::Class Test2D_obj::__mClass;

void Test2D_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("test.Test2D","\x60","\xbd","\x21","\x72");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Test2D_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Test2D_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Test2D_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Test2D_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Test2D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Test2D_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace test
