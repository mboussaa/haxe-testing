// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_hxmath_math_Matrix2x2Default
#include <hxmath/math/Matrix2x2Default.h>
#endif
#ifndef INCLUDED_hxmath_math_Matrix3x2Default
#include <hxmath/math/Matrix3x2Default.h>
#endif
#ifndef INCLUDED_hxmath_math_Vector2Default
#include <hxmath/math/Vector2Default.h>
#endif
#ifndef INCLUDED_hxmath_math_Vector3Default
#include <hxmath/math/Vector3Default.h>
#endif
#ifndef INCLUDED_hxmath_math__Matrix3x2_Matrix3x2_Impl_
#include <hxmath/math/_Matrix3x2/Matrix3x2_Impl_.h>
#endif

namespace hxmath{
namespace math{
namespace _Matrix3x2{

void Matrix3x2_Impl__obj::__construct() { }

Dynamic Matrix3x2_Impl__obj::__CreateEmpty() { return new Matrix3x2_Impl__obj; }

hx::ObjectPtr< Matrix3x2_Impl__obj > Matrix3x2_Impl__obj::__new()
{
	hx::ObjectPtr< Matrix3x2_Impl__obj > _hx_result = new Matrix3x2_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Matrix3x2_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Matrix3x2_Impl__obj > _hx_result = new Matrix3x2_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Int Matrix3x2_Impl__obj::elementCount;

 ::hxmath::math::Matrix3x2Default Matrix3x2_Impl__obj::_new(Float a,Float b,Float c,Float d,Float tx,Float ty){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","_new",0xe3251a94,"hxmath.math._Matrix3x2.Matrix3x2_Impl_._new","hxmath/math/Matrix3x2.hx",94,0xaa3cbc02)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(c,"c")
            	HX_STACK_ARG(d,"d")
            	HX_STACK_ARG(tx,"tx")
            	HX_STACK_ARG(ty,"ty")
HXLINE(  94)		return  ::hxmath::math::Matrix3x2Default_obj::__new(a,b,c,d,tx,ty);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Matrix3x2_Impl__obj,_new,return )

 ::hxmath::math::Matrix3x2Default Matrix3x2_Impl__obj::fromArray(::Array< Float > rawData){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","fromArray",0x0d5399bc,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.fromArray","hxmath/math/Matrix3x2.hx",110,0xaa3cbc02)
            	HX_STACK_ARG(rawData,"rawData")
HXLINE( 111)		if ((rawData->length != (int)6)) {
HXLINE( 113)			HX_STACK_DO_THROW(HX_("Invalid rawData.",25,ca,34,44));
            		}
HXLINE( 116)		return  ::hxmath::math::Matrix3x2Default_obj::__new(rawData->__get((int)0),rawData->__get((int)1),rawData->__get((int)2),rawData->__get((int)3),rawData->__get((int)4),rawData->__get((int)5));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix3x2_Impl__obj,fromArray,return )

 ::hxmath::math::Matrix3x2Default Matrix3x2_Impl__obj::fromMatrix3x2Shape( ::hxmath::math::Matrix3x2Default other){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","fromMatrix3x2Shape",0x45fd5af2,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.fromMatrix3x2Shape","hxmath/math/Matrix3x2.hx",128,0xaa3cbc02)
            	HX_STACK_ARG(other,"other")
HXLINE( 128)		return  ::hxmath::math::Matrix3x2Default_obj::__new(other->a,other->b,other->c,other->d,other->tx,other->ty);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix3x2_Impl__obj,fromMatrix3x2Shape,return )

 ::hxmath::math::Matrix3x2Default Matrix3x2_Impl__obj::multiplyScalar(Float s, ::hxmath::math::Matrix3x2Default m){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","multiplyScalar",0x740f1363,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.multiplyScalar","hxmath/math/Matrix3x2.hx",141,0xaa3cbc02)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(m,"m")
HXLINE( 141)		return  ::hxmath::math::Matrix3x2Default_obj::__new((s * m->a),(s * m->b),(s * m->c),(s * m->d),(s * m->tx),(s * m->ty));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x2_Impl__obj,multiplyScalar,return )

 ::hxmath::math::Vector2Default Matrix3x2_Impl__obj::transform( ::hxmath::math::Matrix3x2Default m, ::hxmath::math::Vector2Default v){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","transform",0x78ce6f59,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.transform","hxmath/math/Matrix3x2.hx",158,0xaa3cbc02)
            	HX_STACK_ARG(m,"m")
            	HX_STACK_ARG(v,"v")
HXLINE( 158)		HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,m1,"m") =  ::hxmath::math::Matrix2x2Default_obj::__new(m->a,m->b,m->c,m->d);
HXDLIN( 158)		HX_VARI(  ::hxmath::math::Vector2Default,a) =  ::hxmath::math::Vector2Default_obj::__new(((m1->a * v->x) + (m1->b * v->y)),((m1->c * v->x) + (m1->d * v->y)));
HXDLIN( 158)		HX_VARI(  ::hxmath::math::Vector2Default,b) =  ::hxmath::math::Vector2Default_obj::__new(m->tx,m->ty);
HXDLIN( 158)		HX_VARI(  ::hxmath::math::Vector2Default,self) =  ::hxmath::math::Vector2Default_obj::__new(a->x,a->y);
HXDLIN( 158)		hx::AddEq(self->x,b->x);
HXDLIN( 158)		hx::AddEq(self->y,b->y);
HXDLIN( 158)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x2_Impl__obj,transform,return )

 ::hxmath::math::Matrix3x2Default Matrix3x2_Impl__obj::concat( ::hxmath::math::Matrix3x2Default m, ::hxmath::math::Matrix3x2Default n){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","concat",0xfd480107,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.concat","hxmath/math/Matrix3x2.hx",171,0xaa3cbc02)
            	HX_STACK_ARG(m,"m")
            	HX_STACK_ARG(n,"n")
HXLINE( 173)		HX_VARI(  ::hxmath::math::Matrix2x2Default,mLinear) =  ::hxmath::math::Matrix2x2Default_obj::__new(m->a,m->b,m->c,m->d);
HXLINE( 174)		HX_VARI(  ::hxmath::math::Matrix2x2Default,nLinear) =  ::hxmath::math::Matrix2x2Default_obj::__new(n->a,n->b,n->c,n->d);
HXLINE( 175)		HX_VARI(  ::hxmath::math::Matrix2x2Default,resultLinear) =  ::hxmath::math::Matrix2x2Default_obj::__new(((mLinear->a * nLinear->a) + (mLinear->b * nLinear->c)),((mLinear->a * nLinear->b) + (mLinear->b * nLinear->d)),((mLinear->c * nLinear->a) + (mLinear->d * nLinear->c)),((mLinear->c * nLinear->b) + (mLinear->d * nLinear->d)));
HXLINE( 176)		HX_VARI(  ::hxmath::math::Vector2Default,v) =  ::hxmath::math::Vector2Default_obj::__new(m->tx,m->ty);
HXDLIN( 176)		HX_VARI(  ::hxmath::math::Vector2Default,a) =  ::hxmath::math::Vector2Default_obj::__new(((nLinear->a * v->x) + (nLinear->b * v->y)),((nLinear->c * v->x) + (nLinear->d * v->y)));
HXDLIN( 176)		HX_VARI(  ::hxmath::math::Vector2Default,b) =  ::hxmath::math::Vector2Default_obj::__new(n->tx,n->ty);
HXDLIN( 176)		HX_VARI(  ::hxmath::math::Vector2Default,self) =  ::hxmath::math::Vector2Default_obj::__new(a->x,a->y);
HXDLIN( 176)		hx::AddEq(self->x,b->x);
HXDLIN( 176)		hx::AddEq(self->y,b->y);
HXLINE( 178)		return  ::hxmath::math::Matrix3x2Default_obj::__new(resultLinear->a,resultLinear->b,resultLinear->c,resultLinear->d,self->x,self->y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x2_Impl__obj,concat,return )

 ::hxmath::math::Matrix3x2Default Matrix3x2_Impl__obj::add( ::hxmath::math::Matrix3x2Default m, ::hxmath::math::Matrix3x2Default n){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","add",0x4029d44e,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.add","hxmath/math/Matrix3x2.hx",194,0xaa3cbc02)
            	HX_STACK_ARG(m,"m")
            	HX_STACK_ARG(n,"n")
HXLINE( 194)		HX_VARI(  ::hxmath::math::Matrix3x2Default,self) =  ::hxmath::math::Matrix3x2Default_obj::__new(m->a,m->b,m->c,m->d,m->tx,m->ty);
HXDLIN( 194)		hx::AddEq(self->a,n->a);
HXDLIN( 194)		hx::AddEq(self->b,n->b);
HXDLIN( 194)		hx::AddEq(self->c,n->c);
HXDLIN( 194)		hx::AddEq(self->d,n->d);
HXDLIN( 194)		hx::AddEq(self->tx,n->tx);
HXDLIN( 194)		hx::AddEq(self->ty,n->ty);
HXDLIN( 194)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x2_Impl__obj,add,return )

 ::hxmath::math::Matrix3x2Default Matrix3x2_Impl__obj::subtract( ::hxmath::math::Matrix3x2Default m, ::hxmath::math::Matrix3x2Default n){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","subtract",0x756d8fc7,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.subtract","hxmath/math/Matrix3x2.hx",208,0xaa3cbc02)
            	HX_STACK_ARG(m,"m")
            	HX_STACK_ARG(n,"n")
HXLINE( 208)		HX_VARI(  ::hxmath::math::Matrix3x2Default,self) =  ::hxmath::math::Matrix3x2Default_obj::__new(m->a,m->b,m->c,m->d,m->tx,m->ty);
HXDLIN( 208)		hx::SubEq(self->a,n->a);
HXDLIN( 208)		hx::SubEq(self->b,n->b);
HXDLIN( 208)		hx::SubEq(self->c,n->c);
HXDLIN( 208)		hx::SubEq(self->d,n->d);
HXDLIN( 208)		hx::SubEq(self->tx,n->tx);
HXDLIN( 208)		hx::SubEq(self->ty,n->ty);
HXDLIN( 208)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x2_Impl__obj,subtract,return )

 ::hxmath::math::Matrix3x2Default Matrix3x2_Impl__obj::negate( ::hxmath::math::Matrix3x2Default m){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","negate",0x9c9139b5,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.negate","hxmath/math/Matrix3x2.hx",221,0xaa3cbc02)
            	HX_STACK_ARG(m,"m")
HXLINE( 221)		return  ::hxmath::math::Matrix3x2Default_obj::__new(-(m->a),-(m->b),-(m->c),-(m->d),-(m->tx),-(m->ty));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix3x2_Impl__obj,negate,return )

Bool Matrix3x2_Impl__obj::equals( ::hxmath::math::Matrix3x2Default m, ::hxmath::math::Matrix3x2Default n){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","equals",0xf56ae632,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.equals","hxmath/math/Matrix3x2.hx",239,0xaa3cbc02)
            	HX_STACK_ARG(m,"m")
            	HX_STACK_ARG(n,"n")
HXLINE( 239)		Bool _hx_tmp;
HXDLIN( 239)		if (hx::IsNull( m )) {
HXLINE( 239)			_hx_tmp = hx::IsNull( n );
            		}
            		else {
HXLINE( 239)			_hx_tmp = false;
            		}
HXDLIN( 239)		if (!(_hx_tmp)) {
HXLINE( 240)			Bool _hx_tmp1;
HXDLIN( 240)			Bool _hx_tmp2;
HXDLIN( 240)			Bool _hx_tmp3;
HXDLIN( 240)			Bool _hx_tmp4;
HXDLIN( 240)			Bool _hx_tmp5;
HXDLIN( 240)			Bool _hx_tmp6;
HXDLIN( 240)			if (hx::IsNotNull( m )) {
HXLINE( 240)				_hx_tmp6 = hx::IsNotNull( n );
            			}
            			else {
HXLINE( 240)				_hx_tmp6 = false;
            			}
HXDLIN( 240)			if (_hx_tmp6) {
HXLINE( 240)				_hx_tmp5 = (m->a == n->a);
            			}
            			else {
HXLINE( 240)				_hx_tmp5 = false;
            			}
HXDLIN( 240)			if (_hx_tmp5) {
HXLINE( 240)				_hx_tmp4 = (m->b == n->b);
            			}
            			else {
HXLINE( 240)				_hx_tmp4 = false;
            			}
HXDLIN( 240)			if (_hx_tmp4) {
HXLINE( 240)				_hx_tmp3 = (m->c == n->c);
            			}
            			else {
HXLINE( 240)				_hx_tmp3 = false;
            			}
HXDLIN( 240)			if (_hx_tmp3) {
HXLINE( 240)				_hx_tmp2 = (m->d == n->d);
            			}
            			else {
HXLINE( 240)				_hx_tmp2 = false;
            			}
HXDLIN( 240)			if (_hx_tmp2) {
HXLINE( 240)				_hx_tmp1 = (m->tx == n->tx);
            			}
            			else {
HXLINE( 240)				_hx_tmp1 = false;
            			}
HXDLIN( 240)			if (_hx_tmp1) {
HXLINE( 239)				return (m->ty == n->ty);
            			}
            			else {
HXLINE( 239)				return false;
            			}
            		}
            		else {
HXLINE( 239)			return true;
            		}
HXDLIN( 239)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x2_Impl__obj,equals,return )

 ::hxmath::math::Matrix3x2Default Matrix3x2_Impl__obj::rotate(Float angle){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","rotate",0x00983e4e,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.rotate","hxmath/math/Matrix3x2.hx",257,0xaa3cbc02)
            	HX_STACK_ARG(angle,"angle")
HXLINE( 258)		HX_VARI(  ::hxmath::math::Matrix3x2Default,m) =  ::hxmath::math::Matrix3x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0));
HXLINE( 259)		{
HXLINE( 259)			HX_VARI(  ::hxmath::math::Matrix2x2Default,self) =  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 259)			HX_VARI( Float,s) = ::Math_obj::sin(angle);
HXDLIN( 259)			HX_VARI( Float,c) = ::Math_obj::cos(angle);
HXDLIN( 259)			self->a = c;
HXDLIN( 259)			self->b = -(s);
HXDLIN( 259)			self->c = s;
HXDLIN( 259)			self->d = c;
HXDLIN( 259)			m->a = self->a;
HXDLIN( 259)			m->b = self->b;
HXDLIN( 259)			m->c = self->c;
HXDLIN( 259)			m->d = self->d;
            		}
HXLINE( 260)		return m;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix3x2_Impl__obj,rotate,return )

 ::hxmath::math::Matrix3x2Default Matrix3x2_Impl__obj::translate( ::hxmath::math::Vector2Default v){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","translate",0x7cbb193b,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.translate","hxmath/math/Matrix3x2.hx",270,0xaa3cbc02)
            	HX_STACK_ARG(v,"v")
HXLINE( 271)		HX_VARI(  ::hxmath::math::Matrix3x2Default,m) =  ::hxmath::math::Matrix3x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0));
HXLINE( 272)		{
HXLINE( 272)			m->tx = v->x;
HXDLIN( 272)			m->ty = v->y;
            		}
HXLINE( 273)		return m;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix3x2_Impl__obj,translate,return )

 ::hxmath::math::Matrix3x2Default Matrix3x2_Impl__obj::orbit( ::hxmath::math::Vector2Default center,Float angle){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","orbit",0x165df6f7,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.orbit","hxmath/math/Matrix3x2.hx",286,0xaa3cbc02)
            	HX_STACK_ARG(center,"center")
            	HX_STACK_ARG(angle,"angle")
HXLINE( 287)		HX_VARI(  ::hxmath::math::Matrix3x2Default,m) =  ::hxmath::math::Matrix3x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0));
HXLINE( 288)		{
HXLINE( 288)			HX_VARI(  ::hxmath::math::Matrix2x2Default,self) =  ::hxmath::math::Matrix2x2Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN( 288)			HX_VARI( Float,s) = ::Math_obj::sin(angle);
HXDLIN( 288)			HX_VARI( Float,c) = ::Math_obj::cos(angle);
HXDLIN( 288)			self->a = c;
HXDLIN( 288)			self->b = -(s);
HXDLIN( 288)			self->c = s;
HXDLIN( 288)			self->d = c;
HXDLIN( 288)			m->a = self->a;
HXDLIN( 288)			m->b = self->b;
HXDLIN( 288)			m->c = self->c;
HXDLIN( 288)			m->d = self->d;
            		}
HXLINE( 289)		{
HXLINE( 289)			HX_VARI_NAME(  ::hxmath::math::Matrix2x2Default,m1,"m") =  ::hxmath::math::Matrix2x2Default_obj::__new(m->a,m->b,m->c,m->d);
HXDLIN( 289)			HX_VARI(  ::hxmath::math::Vector2Default,b) =  ::hxmath::math::Vector2Default_obj::__new(((m1->a * center->x) + (m1->b * center->y)),((m1->c * center->x) + (m1->d * center->y)));
HXDLIN( 289)			HX_VARI_NAME(  ::hxmath::math::Vector2Default,self1,"self") =  ::hxmath::math::Vector2Default_obj::__new(center->x,center->y);
HXDLIN( 289)			hx::SubEq(self1->x,b->x);
HXDLIN( 289)			hx::SubEq(self1->y,b->y);
HXDLIN( 289)			m->tx = self1->x;
HXDLIN( 289)			m->ty = self1->y;
            		}
HXLINE( 290)		return m;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x2_Impl__obj,orbit,return )

void Matrix3x2_Impl__obj::copyTo( ::hxmath::math::Matrix3x2Default this1, ::hxmath::math::Matrix3x2Default target){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","copyTo",0xfeab1483,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.copyTo","hxmath/math/Matrix3x2.hx",300,0xaa3cbc02)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(target,"target")
HXLINE( 301)		HX_VARI(  ::hxmath::math::Matrix3x2Default,self) = this1;
HXLINE( 303)		{
HXLINE( 303)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 303)			while((_g < (int)6)){
HXLINE( 303)				HX_VARI( Int,i) = _g++;
HXLINE( 305)				{
HXLINE( 305)					 ::Dynamic _hx_tmp;
HXDLIN( 305)					switch((int)(i)){
            						case (int)0: {
HXLINE( 305)							_hx_tmp = self->a;
            						}
            						break;
            						case (int)1: {
HXLINE( 305)							_hx_tmp = self->b;
            						}
            						break;
            						case (int)2: {
HXLINE( 305)							_hx_tmp = self->tx;
            						}
            						break;
            						case (int)3: {
HXLINE( 305)							_hx_tmp = self->c;
            						}
            						break;
            						case (int)4: {
HXLINE( 305)							_hx_tmp = self->d;
            						}
            						break;
            						case (int)5: {
HXLINE( 305)							_hx_tmp = self->ty;
            						}
            						break;
            						default:{
HXLINE( 305)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 305)					HX_VARI( Float,value) = ( (Float)(_hx_tmp) );
HXDLIN( 305)					switch((int)(i)){
            						case (int)0: {
HXLINE( 305)							target->a = value;
            						}
            						break;
            						case (int)1: {
HXLINE( 305)							target->b = value;
            						}
            						break;
            						case (int)2: {
HXLINE( 305)							target->tx = value;
            						}
            						break;
            						case (int)3: {
HXLINE( 305)							target->c = value;
            						}
            						break;
            						case (int)4: {
HXLINE( 305)							target->d = value;
            						}
            						break;
            						case (int)5: {
HXLINE( 305)							target->ty = value;
            						}
            						break;
            						default:{
HXLINE( 305)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x2_Impl__obj,copyTo,(void))

void Matrix3x2_Impl__obj::copyToShape( ::hxmath::math::Matrix3x2Default this1, ::Dynamic target){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","copyToShape",0x88b7039e,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.copyToShape","hxmath/math/Matrix3x2.hx",315,0xaa3cbc02)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(target,"target")
HXLINE( 316)		HX_VARI(  ::hxmath::math::Matrix3x2Default,self) = this1;
HXLINE( 318)		target->__SetField(HX_("a",61,00,00,00),self->a,hx::paccDynamic);
HXLINE( 319)		target->__SetField(HX_("b",62,00,00,00),self->b,hx::paccDynamic);
HXLINE( 320)		target->__SetField(HX_("c",63,00,00,00),self->c,hx::paccDynamic);
HXLINE( 321)		target->__SetField(HX_("d",64,00,00,00),self->d,hx::paccDynamic);
HXLINE( 322)		target->__SetField(HX_("tx",84,65,00,00),self->tx,hx::paccDynamic);
HXLINE( 323)		target->__SetField(HX_("ty",85,65,00,00),self->ty,hx::paccDynamic);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x2_Impl__obj,copyToShape,(void))

void Matrix3x2_Impl__obj::copyFromShape( ::hxmath::math::Matrix3x2Default this1, ::Dynamic source){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","copyFromShape",0x00d28f4f,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.copyFromShape","hxmath/math/Matrix3x2.hx",332,0xaa3cbc02)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(source,"source")
HXLINE( 333)		HX_VARI(  ::hxmath::math::Matrix3x2Default,self) = this1;
HXLINE( 335)		self->a = ( (Float)(source->__Field(HX_("a",61,00,00,00),hx::paccDynamic)) );
HXLINE( 336)		self->b = ( (Float)(source->__Field(HX_("b",62,00,00,00),hx::paccDynamic)) );
HXLINE( 337)		self->c = ( (Float)(source->__Field(HX_("c",63,00,00,00),hx::paccDynamic)) );
HXLINE( 338)		self->d = ( (Float)(source->__Field(HX_("d",64,00,00,00),hx::paccDynamic)) );
HXLINE( 339)		self->tx = ( (Float)(source->__Field(HX_("tx",84,65,00,00),hx::paccDynamic)) );
HXLINE( 340)		self->ty = ( (Float)(source->__Field(HX_("ty",85,65,00,00),hx::paccDynamic)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x2_Impl__obj,copyFromShape,(void))

 ::hxmath::math::Matrix3x2Default Matrix3x2_Impl__obj::setRotate( ::hxmath::math::Matrix3x2Default this1,Float angle){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","setRotate",0x5e02fd8a,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.setRotate","hxmath/math/Matrix3x2.hx",350,0xaa3cbc02)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(angle,"angle")
HXLINE( 351)		HX_VARI(  ::hxmath::math::Matrix3x2Default,self) = this1;
HXLINE( 353)		HX_VARI( Float,s) = ::Math_obj::sin(angle);
HXLINE( 354)		HX_VARI( Float,c) = ::Math_obj::cos(angle);
HXLINE( 356)		self->a = c;
HXLINE( 357)		self->b = -(s);
HXLINE( 358)		self->c = s;
HXLINE( 359)		self->d = c;
HXLINE( 361)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x2_Impl__obj,setRotate,return )

 ::hxmath::math::Matrix3x2Default Matrix3x2_Impl__obj::setTranslate( ::hxmath::math::Matrix3x2Default this1,Float x,Float y){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","setTranslate",0x44fa877f,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.setTranslate","hxmath/math/Matrix3x2.hx",372,0xaa3cbc02)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 373)		HX_VARI(  ::hxmath::math::Matrix3x2Default,self) = this1;
HXLINE( 375)		self->tx = x;
HXLINE( 376)		self->ty = y;
HXLINE( 378)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix3x2_Impl__obj,setTranslate,return )

 ::hxmath::math::Matrix3x2Default Matrix3x2_Impl__obj::set( ::hxmath::math::Matrix3x2Default this1,Float a,Float b,Float c,Float d,Float tx,Float ty){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","set",0x40377dcf,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.set","hxmath/math/Matrix3x2.hx",393,0xaa3cbc02)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(c,"c")
            	HX_STACK_ARG(d,"d")
            	HX_STACK_ARG(tx,"tx")
            	HX_STACK_ARG(ty,"ty")
HXLINE( 394)		HX_VARI(  ::hxmath::math::Matrix3x2Default,self) = this1;
HXLINE( 396)		self->a = a;
HXLINE( 397)		self->b = b;
HXLINE( 398)		self->c = c;
HXLINE( 399)		self->d = d;
HXLINE( 400)		self->tx = tx;
HXLINE( 401)		self->ty = ty;
HXLINE( 403)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(Matrix3x2_Impl__obj,set,return )

 ::hxmath::math::Matrix3x2Default Matrix3x2_Impl__obj::addWith( ::hxmath::math::Matrix3x2Default this1, ::hxmath::math::Matrix3x2Default m){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","addWith",0x1eb6b574,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.addWith","hxmath/math/Matrix3x2.hx",414,0xaa3cbc02)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(m,"m")
HXLINE( 415)		HX_VARI(  ::hxmath::math::Matrix3x2Default,self) = this1;
HXLINE( 417)		hx::AddEq(self->a,m->a);
HXLINE( 418)		hx::AddEq(self->b,m->b);
HXLINE( 419)		hx::AddEq(self->c,m->c);
HXLINE( 420)		hx::AddEq(self->d,m->d);
HXLINE( 421)		hx::AddEq(self->tx,m->tx);
HXLINE( 422)		hx::AddEq(self->ty,m->ty);
HXLINE( 424)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x2_Impl__obj,addWith,return )

 ::hxmath::math::Matrix3x2Default Matrix3x2_Impl__obj::subtractWith( ::hxmath::math::Matrix3x2Default this1, ::hxmath::math::Matrix3x2Default m){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","subtractWith",0x4b70216d,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.subtractWith","hxmath/math/Matrix3x2.hx",435,0xaa3cbc02)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(m,"m")
HXLINE( 436)		HX_VARI(  ::hxmath::math::Matrix3x2Default,self) = this1;
HXLINE( 438)		hx::SubEq(self->a,m->a);
HXLINE( 439)		hx::SubEq(self->b,m->b);
HXLINE( 440)		hx::SubEq(self->c,m->c);
HXLINE( 441)		hx::SubEq(self->d,m->d);
HXLINE( 442)		hx::SubEq(self->tx,m->tx);
HXLINE( 443)		hx::SubEq(self->ty,m->ty);
HXLINE( 445)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x2_Impl__obj,subtractWith,return )

 ::hxmath::math::Matrix3x2Default Matrix3x2_Impl__obj::clone( ::hxmath::math::Matrix3x2Default this1){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","clone",0x29a19aca,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.clone","hxmath/math/Matrix3x2.hx",454,0xaa3cbc02)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 455)		HX_VARI(  ::hxmath::math::Matrix3x2Default,self) = this1;
HXLINE( 456)		return  ::hxmath::math::Matrix3x2Default_obj::__new(self->a,self->b,self->c,self->d,self->tx,self->ty);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix3x2_Impl__obj,clone,return )

Float Matrix3x2_Impl__obj::getArrayElement( ::hxmath::math::Matrix3x2Default this1,Int i){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","getArrayElement",0x1e9f8586,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.getArrayElement","hxmath/math/Matrix3x2.hx",471,0xaa3cbc02)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(i,"i")
HXLINE( 472)		HX_VARI(  ::hxmath::math::Matrix3x2Default,self) = this1;
HXLINE( 474)		switch((int)(i)){
            			case (int)0: {
HXLINE( 477)				return self->a;
            			}
            			break;
            			case (int)1: {
HXLINE( 479)				return self->b;
            			}
            			break;
            			case (int)2: {
HXLINE( 481)				return self->tx;
            			}
            			break;
            			case (int)3: {
HXLINE( 483)				return self->c;
            			}
            			break;
            			case (int)4: {
HXLINE( 485)				return self->d;
            			}
            			break;
            			case (int)5: {
HXLINE( 487)				return self->ty;
            			}
            			break;
            			default:{
HXLINE( 489)				HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            			}
            		}
HXLINE( 474)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x2_Impl__obj,getArrayElement,return )

Float Matrix3x2_Impl__obj::setArrayElement( ::hxmath::math::Matrix3x2Default this1,Int i,Float value){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","setArrayElement",0x1a6b0292,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.setArrayElement","hxmath/math/Matrix3x2.hx",503,0xaa3cbc02)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(i,"i")
            	HX_STACK_ARG(value,"value")
HXLINE( 504)		HX_VARI(  ::hxmath::math::Matrix3x2Default,self) = this1;
HXLINE( 506)		switch((int)(i)){
            			case (int)0: {
HXLINE( 509)				return (self->a = value);
            			}
            			break;
            			case (int)1: {
HXLINE( 511)				return (self->b = value);
            			}
            			break;
            			case (int)2: {
HXLINE( 513)				return (self->tx = value);
            			}
            			break;
            			case (int)3: {
HXLINE( 515)				return (self->c = value);
            			}
            			break;
            			case (int)4: {
HXLINE( 517)				return (self->d = value);
            			}
            			break;
            			case (int)5: {
HXLINE( 519)				return (self->ty = value);
            			}
            			break;
            			default:{
HXLINE( 521)				HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            			}
            		}
HXLINE( 506)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix3x2_Impl__obj,setArrayElement,return )

Float Matrix3x2_Impl__obj::getElement( ::hxmath::math::Matrix3x2Default this1,Int column,Int row){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","getElement",0xf654a239,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.getElement","hxmath/math/Matrix3x2.hx",534,0xaa3cbc02)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(column,"column")
            	HX_STACK_ARG(row,"row")
HXLINE( 535)		HX_VARI(  ::hxmath::math::Matrix3x2Default,self) = this1;
HXLINE( 536)		 ::Dynamic _hx_tmp;
HXDLIN( 536)		switch((int)(((row * (int)3) + column))){
            			case (int)0: {
HXLINE( 536)				_hx_tmp = self->a;
            			}
            			break;
            			case (int)1: {
HXLINE( 536)				_hx_tmp = self->b;
            			}
            			break;
            			case (int)2: {
HXLINE( 536)				_hx_tmp = self->tx;
            			}
            			break;
            			case (int)3: {
HXLINE( 536)				_hx_tmp = self->c;
            			}
            			break;
            			case (int)4: {
HXLINE( 536)				_hx_tmp = self->d;
            			}
            			break;
            			case (int)5: {
HXLINE( 536)				_hx_tmp = self->ty;
            			}
            			break;
            			default:{
HXLINE( 536)				HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            			}
            		}
HXDLIN( 536)		return ( (Float)(_hx_tmp) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix3x2_Impl__obj,getElement,return )

Float Matrix3x2_Impl__obj::setElement( ::hxmath::math::Matrix3x2Default this1,Int column,Int row,Float value){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","setElement",0xf9d240ad,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.setElement","hxmath/math/Matrix3x2.hx",549,0xaa3cbc02)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(column,"column")
            	HX_STACK_ARG(row,"row")
            	HX_STACK_ARG(value,"value")
HXLINE( 550)		HX_VARI(  ::hxmath::math::Matrix3x2Default,self) = this1;
HXLINE( 551)		 ::Dynamic _hx_tmp;
HXDLIN( 551)		switch((int)(((row * (int)3) + column))){
            			case (int)0: {
HXLINE( 551)				_hx_tmp = (self->a = value);
            			}
            			break;
            			case (int)1: {
HXLINE( 551)				_hx_tmp = (self->b = value);
            			}
            			break;
            			case (int)2: {
HXLINE( 551)				_hx_tmp = (self->tx = value);
            			}
            			break;
            			case (int)3: {
HXLINE( 551)				_hx_tmp = (self->c = value);
            			}
            			break;
            			case (int)4: {
HXLINE( 551)				_hx_tmp = (self->d = value);
            			}
            			break;
            			case (int)5: {
HXLINE( 551)				_hx_tmp = (self->ty = value);
            			}
            			break;
            			default:{
HXLINE( 551)				HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            			}
            		}
HXDLIN( 551)		return ( (Float)(_hx_tmp) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix3x2_Impl__obj,setElement,return )

 ::hxmath::math::Vector2Default Matrix3x2_Impl__obj::col( ::hxmath::math::Matrix3x2Default this1,Int index){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","col",0x402b626d,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.col","hxmath/math/Matrix3x2.hx",561,0xaa3cbc02)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(index,"index")
HXLINE( 562)		HX_VARI(  ::hxmath::math::Matrix3x2Default,self) = this1;
HXLINE( 564)		switch((int)(index)){
            			case (int)0: {
HXLINE( 567)				return  ::hxmath::math::Vector2Default_obj::__new(self->a,self->c);
            			}
            			break;
            			case (int)1: {
HXLINE( 569)				return  ::hxmath::math::Vector2Default_obj::__new(self->b,self->d);
            			}
            			break;
            			case (int)2: {
HXLINE( 571)				return  ::hxmath::math::Vector2Default_obj::__new(self->tx,self->ty);
            			}
            			break;
            			default:{
HXLINE( 573)				HX_STACK_DO_THROW(HX_("Invalid column",ff,3c,03,94));
            			}
            		}
HXLINE( 564)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x2_Impl__obj,col,return )

 ::hxmath::math::Vector3Default Matrix3x2_Impl__obj::row( ::hxmath::math::Matrix3x2Default this1,Int index){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","row",0x4036c447,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.row","hxmath/math/Matrix3x2.hx",584,0xaa3cbc02)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(index,"index")
HXLINE( 585)		HX_VARI(  ::hxmath::math::Matrix3x2Default,self) = this1;
HXLINE( 587)		switch((int)(index)){
            			case (int)0: {
HXLINE( 590)				return  ::hxmath::math::Vector3Default_obj::__new(self->a,self->b,self->tx);
            			}
            			break;
            			case (int)1: {
HXLINE( 592)				return  ::hxmath::math::Vector3Default_obj::__new(self->c,self->d,self->ty);
            			}
            			break;
            			default:{
HXLINE( 594)				HX_STACK_DO_THROW(HX_("Invalid row",51,70,e6,76));
            			}
            		}
HXLINE( 587)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x2_Impl__obj,row,return )

 ::hxmath::math::Matrix3x2Default Matrix3x2_Impl__obj::applyScalarFunc( ::hxmath::math::Matrix3x2Default this1, ::Dynamic func){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","applyScalarFunc",0xcadcd54b,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.applyScalarFunc","hxmath/math/Matrix3x2.hx",605,0xaa3cbc02)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(func,"func")
HXLINE( 606)		HX_VARI(  ::hxmath::math::Matrix3x2Default,self) = this1;
HXLINE( 608)		{
HXLINE( 608)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 608)			while((_g < (int)6)){
HXLINE( 608)				HX_VARI( Int,i) = _g++;
HXLINE( 610)				{
HXLINE( 610)					 ::Dynamic _hx_tmp;
HXDLIN( 610)					switch((int)(i)){
            						case (int)0: {
HXLINE( 610)							_hx_tmp = self->a;
            						}
            						break;
            						case (int)1: {
HXLINE( 610)							_hx_tmp = self->b;
            						}
            						break;
            						case (int)2: {
HXLINE( 610)							_hx_tmp = self->tx;
            						}
            						break;
            						case (int)3: {
HXLINE( 610)							_hx_tmp = self->c;
            						}
            						break;
            						case (int)4: {
HXLINE( 610)							_hx_tmp = self->d;
            						}
            						break;
            						case (int)5: {
HXLINE( 610)							_hx_tmp = self->ty;
            						}
            						break;
            						default:{
HXLINE( 610)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
HXDLIN( 610)					HX_VARI( Float,value) = ( (Float)(func(( (Float)(_hx_tmp) ))) );
HXDLIN( 610)					switch((int)(i)){
            						case (int)0: {
HXLINE( 610)							self->a = value;
            						}
            						break;
            						case (int)1: {
HXLINE( 610)							self->b = value;
            						}
            						break;
            						case (int)2: {
HXLINE( 610)							self->tx = value;
            						}
            						break;
            						case (int)3: {
HXLINE( 610)							self->c = value;
            						}
            						break;
            						case (int)4: {
HXLINE( 610)							self->d = value;
            						}
            						break;
            						case (int)5: {
HXLINE( 610)							self->ty = value;
            						}
            						break;
            						default:{
HXLINE( 610)							HX_STACK_DO_THROW(HX_("Invalid element",73,24,cd,01));
            						}
            					}
            				}
            			}
            		}
HXLINE( 613)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x2_Impl__obj,applyScalarFunc,return )

 ::hxmath::math::Matrix3x2Default Matrix3x2_Impl__obj::applySubMatrixTranspose( ::hxmath::math::Matrix3x2Default this1){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","applySubMatrixTranspose",0x4d5a3c13,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.applySubMatrixTranspose","hxmath/math/Matrix3x2.hx",622,0xaa3cbc02)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 623)		HX_VARI(  ::hxmath::math::Matrix3x2Default,self) = this1;
HXLINE( 625)		HX_VARI( Float,temp) = self->c;
HXLINE( 628)		self->c = self->b;
HXLINE( 629)		self->b = temp;
HXLINE( 631)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix3x2_Impl__obj,applySubMatrixTranspose,return )

 ::hxmath::math::Matrix3x2Default Matrix3x2_Impl__obj::applyInvertFrame( ::hxmath::math::Matrix3x2Default this1){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","applyInvertFrame",0x3beb641c,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.applyInvertFrame","hxmath/math/Matrix3x2.hx",642,0xaa3cbc02)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 643)		HX_VARI(  ::hxmath::math::Matrix3x2Default,self) = this1;
HXLINE( 646)		{
HXLINE( 646)			HX_VARI( Float,temp) = self->c;
HXDLIN( 646)			self->c = self->b;
HXDLIN( 646)			self->b = temp;
            		}
HXLINE( 649)		HX_VARI( Float,tx) = -(((self->a * self->tx) + (self->b * self->ty)));
HXLINE( 650)		HX_VARI( Float,ty) = -(((self->c * self->tx) + (self->d * self->ty)));
HXLINE( 652)		self->tx = tx;
HXLINE( 653)		self->ty = ty;
HXLINE( 655)		return self;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix3x2_Impl__obj,applyInvertFrame,return )

 ::hxmath::math::Matrix3x2Default Matrix3x2_Impl__obj::get_zero(){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","get_zero",0x4e07e564,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.get_zero","hxmath/math/Matrix3x2.hx",660,0xaa3cbc02)
HXLINE( 660)		return  ::hxmath::math::Matrix3x2Default_obj::__new(((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0),((Float)0.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Matrix3x2_Impl__obj,get_zero,return )

 ::hxmath::math::Matrix3x2Default Matrix3x2_Impl__obj::get_identity(){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","get_identity",0x4573e97a,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.get_identity","hxmath/math/Matrix3x2.hx",668,0xaa3cbc02)
HXLINE( 668)		return  ::hxmath::math::Matrix3x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Matrix3x2_Impl__obj,get_identity,return )

 ::hxmath::math::Vector2Default Matrix3x2_Impl__obj::get_t( ::hxmath::math::Matrix3x2Default this1){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","get_t",0x729f2cb8,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.get_t","hxmath/math/Matrix3x2.hx",675,0xaa3cbc02)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 676)		HX_VARI(  ::hxmath::math::Matrix3x2Default,self) = this1;
HXLINE( 677)		return  ::hxmath::math::Vector2Default_obj::__new(self->tx,self->ty);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix3x2_Impl__obj,get_t,return )

 ::hxmath::math::Vector2Default Matrix3x2_Impl__obj::set_t( ::hxmath::math::Matrix3x2Default this1, ::hxmath::math::Vector2Default t){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","set_t",0x5b6e22c4,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.set_t","hxmath/math/Matrix3x2.hx",681,0xaa3cbc02)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(t,"t")
HXLINE( 682)		HX_VARI(  ::hxmath::math::Matrix3x2Default,self) = this1;
HXLINE( 683)		self->tx = t->x;
HXLINE( 684)		self->ty = t->y;
HXLINE( 685)		return t;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x2_Impl__obj,set_t,return )

 ::hxmath::math::Matrix2x2Default Matrix3x2_Impl__obj::get_linearSubMatrix( ::hxmath::math::Matrix3x2Default this1){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","get_linearSubMatrix",0x72fcb880,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.get_linearSubMatrix","hxmath/math/Matrix3x2.hx",689,0xaa3cbc02)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 690)		HX_VARI(  ::hxmath::math::Matrix3x2Default,self) = this1;
HXLINE( 691)		return  ::hxmath::math::Matrix2x2Default_obj::__new(self->a,self->b,self->c,self->d);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix3x2_Impl__obj,get_linearSubMatrix,return )

 ::hxmath::math::Matrix2x2Default Matrix3x2_Impl__obj::set_linearSubMatrix( ::hxmath::math::Matrix3x2Default this1, ::hxmath::math::Matrix2x2Default value){
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","set_linearSubMatrix",0xaf99ab8c,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.set_linearSubMatrix","hxmath/math/Matrix3x2.hx",695,0xaa3cbc02)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(value,"value")
HXLINE( 696)		HX_VARI(  ::hxmath::math::Matrix3x2Default,self) = this1;
HXLINE( 697)		self->a = value->a;
HXLINE( 698)		self->b = value->b;
HXLINE( 699)		self->c = value->c;
HXLINE( 700)		self->d = value->d;
HXLINE( 701)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix3x2_Impl__obj,set_linearSubMatrix,return )


Matrix3x2_Impl__obj::Matrix3x2_Impl__obj()
{
}

bool Matrix3x2_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"col") ) { outValue = col_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"row") ) { outValue = row_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"orbit") ) { outValue = orbit_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clone") ) { outValue = clone_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_t") ) { outValue = get_t_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_t") ) { outValue = set_t_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"concat") ) { outValue = concat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"negate") ) { outValue = negate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rotate") ) { outValue = rotate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyTo") ) { outValue = copyTo_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addWith") ) { outValue = addWith_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"subtract") ) { outValue = subtract_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_zero") ) { outValue = get_zero_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromArray") ) { outValue = fromArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"transform") ) { outValue = transform_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"translate") ) { outValue = translate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setRotate") ) { outValue = setRotate_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getElement") ) { outValue = getElement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setElement") ) { outValue = setElement_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"copyToShape") ) { outValue = copyToShape_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setTranslate") ) { outValue = setTranslate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subtractWith") ) { outValue = subtractWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_identity") ) { outValue = get_identity_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"copyFromShape") ) { outValue = copyFromShape_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"multiplyScalar") ) { outValue = multiplyScalar_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getArrayElement") ) { outValue = getArrayElement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setArrayElement") ) { outValue = setArrayElement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"applyScalarFunc") ) { outValue = applyScalarFunc_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"applyInvertFrame") ) { outValue = applyInvertFrame_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"fromMatrix3x2Shape") ) { outValue = fromMatrix3x2Shape_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"get_linearSubMatrix") ) { outValue = get_linearSubMatrix_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_linearSubMatrix") ) { outValue = set_linearSubMatrix_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"applySubMatrixTranspose") ) { outValue = applySubMatrixTranspose_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Matrix3x2_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo Matrix3x2_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Matrix3x2_Impl__obj::elementCount,HX_HCSTRING("elementCount","\x73","\x1c","\x9d","\xaa")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Matrix3x2_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Matrix3x2_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Matrix3x2_Impl__obj::elementCount,"elementCount");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Matrix3x2_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Matrix3x2_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Matrix3x2_Impl__obj::elementCount,"elementCount");
};

#endif

hx::Class Matrix3x2_Impl__obj::__mClass;

static ::String Matrix3x2_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("elementCount","\x73","\x1c","\x9d","\xaa"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("fromArray","\xcf","\x57","\x18","\xda"),
	HX_HCSTRING("fromMatrix3x2Shape","\x7f","\xc2","\x37","\x4b"),
	HX_HCSTRING("multiplyScalar","\x70","\x70","\x21","\x48"),
	HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45"),
	HX_HCSTRING("concat","\x14","\x09","\xd0","\xc7"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("subtract","\x14","\x75","\x11","\xf8"),
	HX_HCSTRING("negate","\xc2","\x41","\x19","\x67"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("rotate","\x5b","\x46","\x20","\xcb"),
	HX_HCSTRING("translate","\x4e","\xd7","\x7f","\x49"),
	HX_HCSTRING("orbit","\x8a","\x6f","\x1f","\x35"),
	HX_HCSTRING("copyTo","\x90","\x1c","\x33","\xc9"),
	HX_HCSTRING("copyToShape","\x71","\xac","\xb5","\x9e"),
	HX_HCSTRING("copyFromShape","\xe2","\x52","\x6b","\x92"),
	HX_HCSTRING("setRotate","\x9d","\xbb","\xc7","\x2a"),
	HX_HCSTRING("setTranslate","\x4c","\x97","\xcf","\x6d"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("addWith","\xc7","\xb8","\x35","\x8b"),
	HX_HCSTRING("subtractWith","\x3a","\x31","\x45","\x74"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("getArrayElement","\xd9","\x93","\x9e","\xda"),
	HX_HCSTRING("setArrayElement","\xe5","\x10","\x6a","\xd6"),
	HX_HCSTRING("getElement","\xc6","\x34","\xb6","\x55"),
	HX_HCSTRING("setElement","\x3a","\xd3","\x33","\x59"),
	HX_HCSTRING("col","\x40","\x80","\x4b","\x00"),
	HX_HCSTRING("row","\x1a","\xe2","\x56","\x00"),
	HX_HCSTRING("applyScalarFunc","\x9e","\xe3","\xdb","\x86"),
	HX_HCSTRING("applySubMatrixTranspose","\x66","\x55","\x5c","\x38"),
	HX_HCSTRING("applyInvertFrame","\x69","\xde","\x18","\xff"),
	HX_HCSTRING("get_zero","\xb1","\xca","\xab","\xd0"),
	HX_HCSTRING("get_identity","\x47","\xf9","\x48","\x6e"),
	HX_HCSTRING("get_t","\x4b","\xa5","\x60","\x91"),
	HX_HCSTRING("set_t","\x57","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_linearSubMatrix","\x53","\xec","\xdc","\x00"),
	HX_HCSTRING("set_linearSubMatrix","\x5f","\xdf","\x79","\x3d"),
	::String(null())
};

void Matrix3x2_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hxmath.math._Matrix3x2.Matrix3x2_Impl_","\x1b","\x68","\x52","\x58");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Matrix3x2_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Matrix3x2_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Matrix3x2_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Matrix3x2_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Matrix3x2_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Matrix3x2_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Matrix3x2_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Matrix3x2_Impl__obj::__boot()
{
{
            	HX_STACK_FRAME("hxmath.math._Matrix3x2.Matrix3x2_Impl_","boot",0xe5218965,"hxmath.math._Matrix3x2.Matrix3x2_Impl_.boot","hxmath/math/Matrix3x2.hx",68,0xaa3cbc02)
HXLINE(  68)		elementCount = (int)6;
            	}
}

} // end namespace hxmath
} // end namespace math
} // end namespace _Matrix3x2
