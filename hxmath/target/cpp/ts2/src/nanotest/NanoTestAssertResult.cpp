// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_nanotest_NanoTestAssertResult
#include <nanotest/NanoTestAssertResult.h>
#endif
#ifndef INCLUDED_nanotest_NanoTestStatus
#include <nanotest/NanoTestStatus.h>
#endif

namespace nanotest{

void NanoTestAssertResult_obj::__construct( ::Dynamic _result,Int position){
            	HX_STACK_FRAME("nanotest.NanoTestAssertResult","new",0xdf207883,"nanotest.NanoTestAssertResult.new","nanotest/NanoTestAssertResult.hx",12,0x1800286c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(_result,"_result")
            	HX_STACK_ARG(position,"position")
HXLINE(  13)		this->result = _result;
HXLINE(  14)		this->position = position;
            	}

Dynamic NanoTestAssertResult_obj::__CreateEmpty() { return new NanoTestAssertResult_obj; }

hx::ObjectPtr< NanoTestAssertResult_obj > NanoTestAssertResult_obj::__new( ::Dynamic _result,Int position)
{
	hx::ObjectPtr< NanoTestAssertResult_obj > _hx_result = new NanoTestAssertResult_obj();
	_hx_result->__construct(_result,position);
	return _hx_result;
}

Dynamic NanoTestAssertResult_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NanoTestAssertResult_obj > _hx_result = new NanoTestAssertResult_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

 ::nanotest::NanoTestAssertResult NanoTestAssertResult_obj::label( ::Dynamic d){
            	HX_STACK_FRAME("nanotest.NanoTestAssertResult","label",0x191044d7,"nanotest.NanoTestAssertResult.label","nanotest/NanoTestAssertResult.hx",17,0x1800286c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(d,"d")
HXLINE(  18)		{
HXLINE(  18)			HX_VARI( ::hx::EnumBase,_g) =  ::Dynamic(this->result->__Field(HX_("status",32,e7,fb,05),hx::paccDynamic))->__GetItem(this->position);
HXDLIN(  18)			Int _hx_tmp = ( ( ::hx::EnumBase)(_g) )->_hx_getIndex();
HXDLIN(  18)			switch((int)(_hx_tmp)){
            				case (int)0: {
            				}
            				break;
            				case (int)1: {
HXLINE(  20)					HX_VARI(  ::Dynamic,p) = _g->_hx_getObject(1);
HXDLIN(  20)					HX_VARI( ::String,mes) = _g->_hx_getString(0);
HXLINE(  21)					Int _hx_tmp1 = this->position;
HXDLIN(  21)					::String _hx_tmp2 = ((HX_("",00,00,00,00) + mes) + HX_(" [",3b,1c,00,00));
HXDLIN(  21)					::String _hx_tmp3 = ::Std_obj::string(d);
HXDLIN(  21)					::hx::EnumBase _hx_tmp4 = ::nanotest::NanoTestStatus_obj::FAIL(((_hx_tmp2 + _hx_tmp3) + HX_("]",5d,00,00,00)),p);
HXDLIN(  21)					 ::Dynamic(this->result->__Field(HX_("status",32,e7,fb,05),hx::paccDynamic))->__SetItem(_hx_tmp1,_hx_tmp4);
            				}
            				break;
            				case (int)2: {
HXLINE(  22)					HX_VARI_NAME( ::Array< ::Dynamic>,p1,"p") = _g->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(  22)					HX_VARI_NAME( ::String,mes1,"mes") = _g->_hx_getString(0);
HXLINE(  23)					Int _hx_tmp5 = this->position;
HXDLIN(  23)					::String _hx_tmp6 = ((HX_("",00,00,00,00) + mes1) + HX_(" [",3b,1c,00,00));
HXDLIN(  23)					::String _hx_tmp7 = ::Std_obj::string(d);
HXDLIN(  23)					::hx::EnumBase _hx_tmp8 = ::nanotest::NanoTestStatus_obj::ERROR(((_hx_tmp6 + _hx_tmp7) + HX_("]",5d,00,00,00)),p1);
HXDLIN(  23)					 ::Dynamic(this->result->__Field(HX_("status",32,e7,fb,05),hx::paccDynamic))->__SetItem(_hx_tmp5,_hx_tmp8);
            				}
            				break;
            			}
            		}
HXLINE(  25)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NanoTestAssertResult_obj,label,return )


NanoTestAssertResult_obj::NanoTestAssertResult_obj()
{
}

void NanoTestAssertResult_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NanoTestAssertResult);
	HX_MARK_MEMBER_NAME(result,"result");
	HX_MARK_MEMBER_NAME(position,"position");
	HX_MARK_END_CLASS();
}

void NanoTestAssertResult_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(result,"result");
	HX_VISIT_MEMBER_NAME(position,"position");
}

hx::Val NanoTestAssertResult_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"label") ) { return hx::Val( label_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"result") ) { return hx::Val( result); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { return hx::Val( position); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val NanoTestAssertResult_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"result") ) { result=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { position=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NanoTestAssertResult_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("result","\xdd","\x68","\x84","\x08"));
	outFields->push(HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo NanoTestAssertResult_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(NanoTestAssertResult_obj,result),HX_HCSTRING("result","\xdd","\x68","\x84","\x08")},
	{hx::fsInt,(int)offsetof(NanoTestAssertResult_obj,position),HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *NanoTestAssertResult_obj_sStaticStorageInfo = 0;
#endif

static ::String NanoTestAssertResult_obj_sMemberFields[] = {
	HX_HCSTRING("result","\xdd","\x68","\x84","\x08"),
	HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"),
	HX_HCSTRING("label","\xf4","\x0d","\xaf","\x6f"),
	::String(null()) };

static void NanoTestAssertResult_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NanoTestAssertResult_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NanoTestAssertResult_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NanoTestAssertResult_obj::__mClass,"__mClass");
};

#endif

hx::Class NanoTestAssertResult_obj::__mClass;

void NanoTestAssertResult_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nanotest.NanoTestAssertResult","\x11","\x7b","\xbb","\xb3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = NanoTestAssertResult_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NanoTestAssertResult_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NanoTestAssertResult_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NanoTestAssertResult_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NanoTestAssertResult_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NanoTestAssertResult_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nanotest
