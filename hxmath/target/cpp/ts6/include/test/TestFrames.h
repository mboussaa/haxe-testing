// Generated by Haxe 3.3.0
#ifndef INCLUDED_test_TestFrames
#define INCLUDED_test_TestFrames

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_test_MathTestCase
#include <test/MathTestCase.h>
#endif
HX_DECLARE_CLASS1(nanotest,NanoTestCase)
HX_DECLARE_CLASS1(test,MathTestCase)
HX_DECLARE_CLASS1(test,TestFrames)

namespace test{


class HXCPP_CLASS_ATTRIBUTES TestFrames_obj : public  ::test::MathTestCase_obj
{
	public:
		typedef  ::test::MathTestCase_obj super;
		typedef TestFrames_obj OBJ_;
		TestFrames_obj();
		void __construct( ::Dynamic posInfos);

	public:
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="test.TestFrames")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		static hx::ObjectPtr< TestFrames_obj > __new( ::Dynamic posInfos);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestFrames_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("TestFrames","\xb8","\xf9","\x2a","\xbc"); }

		void testFrame2Concat();
		::Dynamic testFrame2Concat_dyn();

		void testFrame3Concat();
		::Dynamic testFrame3Concat_dyn();

		void testFrame2LinearAffineTransform();
		::Dynamic testFrame2LinearAffineTransform_dyn();

		void testFrame2Inverse();
		::Dynamic testFrame2Inverse_dyn();

		void testFlxSpriteFrame2();
		::Dynamic testFlxSpriteFrame2_dyn();

		void testLerpFrame2();
		::Dynamic testLerpFrame2_dyn();

		void testFramesHaveToString();
		::Dynamic testFramesHaveToString_dyn();

};

} // end namespace test

#endif /* INCLUDED_test_TestFrames */ 
