// Generated by Haxe 3.3.0
#ifndef INCLUDED_test_FlxObjectMock
#define INCLUDED_test_FlxObjectMock

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(test,FlxObjectMock)

namespace test{


class HXCPP_CLASS_ATTRIBUTES FlxObjectMock_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef FlxObjectMock_obj OBJ_;
		FlxObjectMock_obj();
		void __construct();

	public:
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="test.FlxObjectMock")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		static hx::ObjectPtr< FlxObjectMock_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FlxObjectMock_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("FlxObjectMock","\xdb","\x23","\xf1","\xf8"); }

		Float x;
		Float y;
		Float angle;
		Float set_x(Float x);
		::Dynamic set_x_dyn();

		Float set_y(Float y);
		::Dynamic set_y_dyn();

		Float set_angle(Float angle);
		::Dynamic set_angle_dyn();

};

} // end namespace test

#endif /* INCLUDED_test_FlxObjectMock */ 
