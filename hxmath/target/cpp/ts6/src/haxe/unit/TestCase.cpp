// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_unit_TestCase
#include <haxe/unit/TestCase.h>
#endif
#ifndef INCLUDED_haxe_unit_TestRunner
#include <haxe/unit/TestRunner.h>
#endif
#ifndef INCLUDED_haxe_unit_TestStatus
#include <haxe/unit/TestStatus.h>
#endif

namespace haxe{
namespace unit{

void TestCase_obj::__construct(){
            	HX_STACK_FRAME("haxe.unit.TestCase","new",0x83fcec16,"haxe.unit.TestCase.new","/usr/lib/haxe/std/haxe/unit/TestCase.hx",30,0x5c47d7f9)
            	HX_STACK_THIS(this)
            	}

Dynamic TestCase_obj::__CreateEmpty() { return new TestCase_obj; }

hx::ObjectPtr< TestCase_obj > TestCase_obj::__new()
{
	hx::ObjectPtr< TestCase_obj > _hx_result = new TestCase_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestCase_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestCase_obj > _hx_result = new TestCase_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestCase_obj::setup(){
            	HX_STACK_FRAME("haxe.unit.TestCase","setup",0x0f1fa3b3,"haxe.unit.TestCase.setup","/usr/lib/haxe/std/haxe/unit/TestCase.hx",33,0x5c47d7f9)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestCase_obj,setup,(void))

void TestCase_obj::tearDown(){
            	HX_STACK_FRAME("haxe.unit.TestCase","tearDown",0xebcf86ae,"haxe.unit.TestCase.tearDown","/usr/lib/haxe/std/haxe/unit/TestCase.hx",36,0x5c47d7f9)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestCase_obj,tearDown,(void))

void TestCase_obj::print( ::Dynamic v){
            	HX_STACK_FRAME("haxe.unit.TestCase","print",0x5d7b4d63,"haxe.unit.TestCase.print","/usr/lib/haxe/std/haxe/unit/TestCase.hx",40,0x5c47d7f9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(v,"v")
HXLINE(  40)		::haxe::unit::TestRunner_obj::print(v);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestCase_obj,print,(void))

void TestCase_obj::assertTrue(Bool b, ::Dynamic c){
            	HX_STACK_FRAME("haxe.unit.TestCase","assertTrue",0x7eaf5c3e,"haxe.unit.TestCase.assertTrue","/usr/lib/haxe/std/haxe/unit/TestCase.hx",43,0x5c47d7f9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(c,"c")
HXLINE(  44)		this->currentTest->done = true;
HXLINE(  45)		if ((b != true)) {
HXLINE(  46)			this->currentTest->success = false;
HXLINE(  47)			this->currentTest->error = HX_("expected true but was false",23,26,7c,7d);
HXLINE(  48)			this->currentTest->posInfos = c;
HXLINE(  49)			HX_STACK_DO_THROW(this->currentTest);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TestCase_obj,assertTrue,(void))

void TestCase_obj::assertFalse(Bool b, ::Dynamic c){
            	HX_STACK_FRAME("haxe.unit.TestCase","assertFalse",0x3fe1d2b3,"haxe.unit.TestCase.assertFalse","/usr/lib/haxe/std/haxe/unit/TestCase.hx",53,0x5c47d7f9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(c,"c")
HXLINE(  54)		this->currentTest->done = true;
HXLINE(  55)		if ((b == true)) {
HXLINE(  56)			this->currentTest->success = false;
HXLINE(  57)			this->currentTest->error = HX_("expected false but was true",a9,e3,03,60);
HXLINE(  58)			this->currentTest->posInfos = c;
HXLINE(  59)			HX_STACK_DO_THROW(this->currentTest);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TestCase_obj,assertFalse,(void))

void TestCase_obj::assertEquals( ::Dynamic expected, ::Dynamic actual, ::Dynamic c){
            	HX_STACK_FRAME("haxe.unit.TestCase","assertEquals",0x7ba9bf2f,"haxe.unit.TestCase.assertEquals","/usr/lib/haxe/std/haxe/unit/TestCase.hx",63,0x5c47d7f9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(expected,"expected")
            	HX_STACK_ARG(actual,"actual")
            	HX_STACK_ARG(c,"c")
HXLINE(  64)		this->currentTest->done = true;
HXLINE(  65)		if (hx::IsNotEq( actual,expected )) {
HXLINE(  66)			this->currentTest->success = false;
HXLINE(  67)			::String _hx_tmp = ::Std_obj::string(expected);
HXDLIN(  67)			::String _hx_tmp1 = ((HX_("expected '",7f,d8,72,cf) + _hx_tmp) + HX_("' but was '",18,22,f3,f7));
HXDLIN(  67)			::String _hx_tmp2 = ::Std_obj::string(actual);
HXDLIN(  67)			this->currentTest->error = ((_hx_tmp1 + _hx_tmp2) + HX_("'",27,00,00,00));
HXLINE(  68)			this->currentTest->posInfos = c;
HXLINE(  69)			HX_STACK_DO_THROW(this->currentTest);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(TestCase_obj,assertEquals,(void))


TestCase_obj::TestCase_obj()
{
}

void TestCase_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TestCase);
	HX_MARK_MEMBER_NAME(currentTest,"currentTest");
	HX_MARK_END_CLASS();
}

void TestCase_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(currentTest,"currentTest");
}

hx::Val TestCase_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"setup") ) { return hx::Val( setup_dyn()); }
		if (HX_FIELD_EQ(inName,"print") ) { return hx::Val( print_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tearDown") ) { return hx::Val( tearDown_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"assertTrue") ) { return hx::Val( assertTrue_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentTest") ) { return hx::Val( currentTest); }
		if (HX_FIELD_EQ(inName,"assertFalse") ) { return hx::Val( assertFalse_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"assertEquals") ) { return hx::Val( assertEquals_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestCase_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"currentTest") ) { currentTest=inValue.Cast<  ::haxe::unit::TestStatus >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestCase_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("currentTest","\x2b","\xa1","\x8b","\x85"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestCase_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::unit::TestStatus*/ ,(int)offsetof(TestCase_obj,currentTest),HX_HCSTRING("currentTest","\x2b","\xa1","\x8b","\x85")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestCase_obj_sStaticStorageInfo = 0;
#endif

static ::String TestCase_obj_sMemberFields[] = {
	HX_HCSTRING("currentTest","\x2b","\xa1","\x8b","\x85"),
	HX_HCSTRING("setup","\x7d","\xae","\x2f","\x7a"),
	HX_HCSTRING("tearDown","\x24","\xd6","\x66","\xec"),
	HX_HCSTRING("print","\x2d","\x58","\x8b","\xc8"),
	HX_HCSTRING("assertTrue","\x34","\xf5","\x51","\x4f"),
	HX_HCSTRING("assertFalse","\xfd","\x10","\x85","\xfd"),
	HX_HCSTRING("assertEquals","\xa5","\x01","\xdd","\xac"),
	::String(null()) };

static void TestCase_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestCase_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestCase_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestCase_obj::__mClass,"__mClass");
};

#endif

hx::Class TestCase_obj::__mClass;

void TestCase_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxe.unit.TestCase","\x24","\xe9","\x2b","\x5c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestCase_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestCase_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestCase_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestCase_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestCase_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestCase_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace unit
