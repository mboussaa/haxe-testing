// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_hxmath_frames_IFrame2
#include <hxmath/frames/IFrame2.h>
#endif
#ifndef INCLUDED_hxmath_frames_adapters_FlxSpriteFrame2
#include <hxmath/frames/adapters/FlxSpriteFrame2.h>
#endif
#ifndef INCLUDED_hxmath_math_Matrix3x2Default
#include <hxmath/math/Matrix3x2Default.h>
#endif
#ifndef INCLUDED_hxmath_math_Vector2Default
#include <hxmath/math/Vector2Default.h>
#endif

namespace hxmath{
namespace frames{
namespace adapters{

void FlxSpriteFrame2_obj::__construct( ::Dynamic owner){
            	HX_STACK_FRAME("hxmath.frames.adapters.FlxSpriteFrame2","new",0xdc8b1276,"hxmath.frames.adapters.FlxSpriteFrame2.new","hxmath/frames/adapters/FlxSpriteFrame2.hx",18,0x3bbcc3db)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(owner,"owner")
HXLINE(  24)		HX_VARI_NAME(  ::hxmath::math::Matrix3x2Default,this1,"this") =  ::hxmath::math::Matrix3x2Default_obj::__new(((Float)1.0),((Float)0.0),((Float)0.0),((Float)1.0),((Float)0.0),((Float)0.0));
HXDLIN(  24)		this->internalMatrix = this1;
HXLINE(  42)		this->owner = owner;
            	}

Dynamic FlxSpriteFrame2_obj::__CreateEmpty() { return new FlxSpriteFrame2_obj; }

hx::ObjectPtr< FlxSpriteFrame2_obj > FlxSpriteFrame2_obj::__new( ::Dynamic owner)
{
	hx::ObjectPtr< FlxSpriteFrame2_obj > _hx_result = new FlxSpriteFrame2_obj();
	_hx_result->__construct(owner);
	return _hx_result;
}

Dynamic FlxSpriteFrame2_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxSpriteFrame2_obj > _hx_result = new FlxSpriteFrame2_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

static ::hxmath::frames::IFrame2_obj _hx_hxmath_frames_adapters_FlxSpriteFrame2__hx_hxmath_frames_IFrame2= {
	(  ::hxmath::math::Matrix3x2Default (hx::Object::*)())&::hxmath::frames::adapters::FlxSpriteFrame2_obj::get_matrix,
	(  ::hxmath::math::Vector2Default (hx::Object::*)())&::hxmath::frames::adapters::FlxSpriteFrame2_obj::get_offset,
	(  ::hxmath::math::Vector2Default (hx::Object::*)( ::hxmath::math::Vector2Default))&::hxmath::frames::adapters::FlxSpriteFrame2_obj::set_offset,
	( Float (hx::Object::*)())&::hxmath::frames::adapters::FlxSpriteFrame2_obj::get_angleDegrees,
	( Float (hx::Object::*)(Float))&::hxmath::frames::adapters::FlxSpriteFrame2_obj::set_angleDegrees,
};

void *FlxSpriteFrame2_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xca0d5ed0: return &_hx_hxmath_frames_adapters_FlxSpriteFrame2__hx_hxmath_frames_IFrame2;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::hxmath::math::Matrix3x2Default FlxSpriteFrame2_obj::get_matrix(){
            	HX_STACK_FRAME("hxmath.frames.adapters.FlxSpriteFrame2","get_matrix",0xc0ba72b4,"hxmath.frames.adapters.FlxSpriteFrame2.get_matrix","hxmath/frames/adapters/FlxSpriteFrame2.hx",47,0x3bbcc3db)
            	HX_STACK_THIS(this)
HXLINE(  47)		HX_VARI(  ::hxmath::math::Matrix3x2Default,matrix) = this->internalMatrix;
HXDLIN(  47)		HX_VARI(  ::hxmath::math::Vector2Default,offset) =  ::hxmath::math::Vector2Default_obj::__new( ::Dynamic(this->owner->__Field(HX_("x",78,00,00,00),hx::paccDynamic)), ::Dynamic(this->owner->__Field(HX_("y",79,00,00,00),hx::paccDynamic)));
HXDLIN(  47)		HX_VARI( Float,angleDegrees) = ( (Float)(this->owner->__Field(HX_("angle",d3,43,e2,22),hx::paccDynamic)) );
HXDLIN(  47)		{
HXLINE(  47)			HX_VARI( Float,angle) = (((Float)::Math_obj::PI / (Float)(int)180) * angleDegrees);
HXDLIN(  47)			HX_VARI( Float,s) = ::Math_obj::sin(angle);
HXDLIN(  47)			HX_VARI( Float,c) = ::Math_obj::cos(angle);
HXDLIN(  47)			matrix->a = c;
HXDLIN(  47)			matrix->b = -(s);
HXDLIN(  47)			matrix->c = s;
HXDLIN(  47)			matrix->d = c;
            		}
HXDLIN(  47)		{
HXLINE(  47)			HX_VARI( Float,x) = offset->x;
HXDLIN(  47)			HX_VARI( Float,y) = offset->y;
HXDLIN(  47)			matrix->tx = x;
HXDLIN(  47)			matrix->ty = y;
            		}
HXDLIN(  47)		return matrix;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSpriteFrame2_obj,get_matrix,return )

 ::hxmath::math::Vector2Default FlxSpriteFrame2_obj::get_offset(){
            	HX_STACK_FRAME("hxmath.frames.adapters.FlxSpriteFrame2","get_offset",0x6531d406,"hxmath.frames.adapters.FlxSpriteFrame2.get_offset","hxmath/frames/adapters/FlxSpriteFrame2.hx",52,0x3bbcc3db)
            	HX_STACK_THIS(this)
HXLINE(  52)		return  ::hxmath::math::Vector2Default_obj::__new( ::Dynamic(this->owner->__Field(HX_("x",78,00,00,00),hx::paccDynamic)), ::Dynamic(this->owner->__Field(HX_("y",79,00,00,00),hx::paccDynamic)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSpriteFrame2_obj,get_offset,return )

 ::hxmath::math::Vector2Default FlxSpriteFrame2_obj::set_offset( ::hxmath::math::Vector2Default offset){
            	HX_STACK_FRAME("hxmath.frames.adapters.FlxSpriteFrame2","set_offset",0x68af727a,"hxmath.frames.adapters.FlxSpriteFrame2.set_offset","hxmath/frames/adapters/FlxSpriteFrame2.hx",56,0x3bbcc3db)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(offset,"offset")
HXLINE(  57)		 ::Dynamic(this->owner->__Field(HX_("set_x",5b,9b,2f,7a),hx::paccDynamic))(offset->x);
HXLINE(  58)		 ::Dynamic(this->owner->__Field(HX_("set_y",5c,9b,2f,7a),hx::paccDynamic))(offset->y);
HXLINE(  59)		return offset;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSpriteFrame2_obj,set_offset,return )

Float FlxSpriteFrame2_obj::get_angleDegrees(){
            	HX_STACK_FRAME("hxmath.frames.adapters.FlxSpriteFrame2","get_angleDegrees",0x39e7ccc7,"hxmath.frames.adapters.FlxSpriteFrame2.get_angleDegrees","hxmath/frames/adapters/FlxSpriteFrame2.hx",64,0x3bbcc3db)
            	HX_STACK_THIS(this)
HXLINE(  64)		return ( (Float)(this->owner->__Field(HX_("angle",d3,43,e2,22),hx::paccDynamic)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSpriteFrame2_obj,get_angleDegrees,return )

Float FlxSpriteFrame2_obj::set_angleDegrees(Float angleDegrees){
            	HX_STACK_FRAME("hxmath.frames.adapters.FlxSpriteFrame2","set_angleDegrees",0x9029ba3b,"hxmath.frames.adapters.FlxSpriteFrame2.set_angleDegrees","hxmath/frames/adapters/FlxSpriteFrame2.hx",69,0x3bbcc3db)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(angleDegrees,"angleDegrees")
HXLINE(  69)		return ( (Float)( ::Dynamic(this->owner->__Field(HX_("set_angle",36,8c,dc,49),hx::paccDynamic))(angleDegrees)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSpriteFrame2_obj,set_angleDegrees,return )


FlxSpriteFrame2_obj::FlxSpriteFrame2_obj()
{
}

void FlxSpriteFrame2_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxSpriteFrame2);
	HX_MARK_MEMBER_NAME(owner,"owner");
	HX_MARK_MEMBER_NAME(internalMatrix,"internalMatrix");
	HX_MARK_END_CLASS();
}

void FlxSpriteFrame2_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(owner,"owner");
	HX_VISIT_MEMBER_NAME(internalMatrix,"internalMatrix");
}

hx::Val FlxSpriteFrame2_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"owner") ) { return hx::Val( owner); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"matrix") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_matrix()); }
		if (HX_FIELD_EQ(inName,"offset") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_offset()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_matrix") ) { return hx::Val( get_matrix_dyn()); }
		if (HX_FIELD_EQ(inName,"get_offset") ) { return hx::Val( get_offset_dyn()); }
		if (HX_FIELD_EQ(inName,"set_offset") ) { return hx::Val( set_offset_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"angleDegrees") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_angleDegrees()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"internalMatrix") ) { return hx::Val( internalMatrix); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_angleDegrees") ) { return hx::Val( get_angleDegrees_dyn()); }
		if (HX_FIELD_EQ(inName,"set_angleDegrees") ) { return hx::Val( set_angleDegrees_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxSpriteFrame2_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"owner") ) { owner=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_offset(inValue) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"angleDegrees") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_angleDegrees(inValue) ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"internalMatrix") ) { internalMatrix=inValue.Cast<  ::hxmath::math::Matrix3x2Default >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxSpriteFrame2_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("owner","\x33","\x98","\x76","\x38"));
	outFields->push(HX_HCSTRING("internalMatrix","\x5e","\x9d","\xb7","\xe0"));
	outFields->push(HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb"));
	outFields->push(HX_HCSTRING("offset","\x93","\x97","\x3f","\x60"));
	outFields->push(HX_HCSTRING("angleDegrees","\x14","\x38","\x7c","\x3d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxSpriteFrame2_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxSpriteFrame2_obj,owner),HX_HCSTRING("owner","\x33","\x98","\x76","\x38")},
	{hx::fsObject /*::hxmath::math::Matrix3x2Default*/ ,(int)offsetof(FlxSpriteFrame2_obj,internalMatrix),HX_HCSTRING("internalMatrix","\x5e","\x9d","\xb7","\xe0")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxSpriteFrame2_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxSpriteFrame2_obj_sMemberFields[] = {
	HX_HCSTRING("owner","\x33","\x98","\x76","\x38"),
	HX_HCSTRING("internalMatrix","\x5e","\x9d","\xb7","\xe0"),
	HX_HCSTRING("get_matrix","\x0a","\xa6","\x4f","\xac"),
	HX_HCSTRING("get_offset","\x5c","\x07","\xc7","\x50"),
	HX_HCSTRING("set_offset","\xd0","\xa5","\x44","\x54"),
	HX_HCSTRING("get_angleDegrees","\x9d","\x24","\x1b","\x42"),
	HX_HCSTRING("set_angleDegrees","\x11","\x12","\x5d","\x98"),
	::String(null()) };

static void FlxSpriteFrame2_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxSpriteFrame2_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxSpriteFrame2_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxSpriteFrame2_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxSpriteFrame2_obj::__mClass;

void FlxSpriteFrame2_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hxmath.frames.adapters.FlxSpriteFrame2","\x84","\x5f","\x4f","\xd8");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxSpriteFrame2_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxSpriteFrame2_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxSpriteFrame2_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxSpriteFrame2_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxSpriteFrame2_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxSpriteFrame2_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxmath
} // end namespace frames
} // end namespace adapters
