// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_test_FlxObjectMock
#include <test/FlxObjectMock.h>
#endif

namespace test{

void FlxObjectMock_obj::__construct(){
            	HX_STACK_FRAME("test.FlxObjectMock","new",0x266c7f31,"test.FlxObjectMock.new","test/TestFrames.hx",18,0x83ec6e49)
            	HX_STACK_THIS(this)
            	}

Dynamic FlxObjectMock_obj::__CreateEmpty() { return new FlxObjectMock_obj; }

hx::ObjectPtr< FlxObjectMock_obj > FlxObjectMock_obj::__new()
{
	hx::ObjectPtr< FlxObjectMock_obj > _hx_result = new FlxObjectMock_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic FlxObjectMock_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxObjectMock_obj > _hx_result = new FlxObjectMock_obj();
	_hx_result->__construct();
	return _hx_result;
}

Float FlxObjectMock_obj::set_x(Float x){
            	HX_STACK_FRAME("test.FlxObjectMock","set_x",0xdaee606c,"test.FlxObjectMock.set_x","test/TestFrames.hx",23,0x83ec6e49)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(  23)		return (this->x = x);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObjectMock_obj,set_x,return )

Float FlxObjectMock_obj::set_y(Float y){
            	HX_STACK_FRAME("test.FlxObjectMock","set_y",0xdaee606d,"test.FlxObjectMock.set_y","test/TestFrames.hx",28,0x83ec6e49)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(y,"y")
HXLINE(  28)		return (this->y = y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObjectMock_obj,set_y,return )

Float FlxObjectMock_obj::set_angle(Float angle){
            	HX_STACK_FRAME("test.FlxObjectMock","set_angle",0x9bb1adc7,"test.FlxObjectMock.set_angle","test/TestFrames.hx",33,0x83ec6e49)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(angle,"angle")
HXLINE(  33)		return (this->angle = angle);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxObjectMock_obj,set_angle,return )


FlxObjectMock_obj::FlxObjectMock_obj()
{
}

hx::Val FlxObjectMock_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"angle") ) { return hx::Val( angle); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn()); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"set_angle") ) { return hx::Val( set_angle_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxObjectMock_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_x(inValue) );x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_y(inValue) );y=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"angle") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_angle(inValue) );angle=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxObjectMock_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxObjectMock_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(FlxObjectMock_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(FlxObjectMock_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(FlxObjectMock_obj,angle),HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxObjectMock_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxObjectMock_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_angle","\x36","\x8c","\xdc","\x49"),
	::String(null()) };

static void FlxObjectMock_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxObjectMock_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxObjectMock_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxObjectMock_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxObjectMock_obj::__mClass;

void FlxObjectMock_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("test.FlxObjectMock","\xbf","\x12","\x37","\xf0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxObjectMock_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxObjectMock_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxObjectMock_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxObjectMock_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxObjectMock_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxObjectMock_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace test
