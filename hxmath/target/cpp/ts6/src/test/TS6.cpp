// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_nanotest_NanoTestCase
#include <nanotest/NanoTestCase.h>
#endif
#ifndef INCLUDED_nanotest_NanoTestRunner
#include <nanotest/NanoTestRunner.h>
#endif
#ifndef INCLUDED_test_MathTestCase
#include <test/MathTestCase.h>
#endif
#ifndef INCLUDED_test_TS6
#include <test/TS6.h>
#endif
#ifndef INCLUDED_test_TestFrames
#include <test/TestFrames.h>
#endif

namespace test{

void TS6_obj::__construct() { }

Dynamic TS6_obj::__CreateEmpty() { return new TS6_obj; }

hx::ObjectPtr< TS6_obj > TS6_obj::__new()
{
	hx::ObjectPtr< TS6_obj > _hx_result = new TS6_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TS6_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TS6_obj > _hx_result = new TS6_obj();
	_hx_result->__construct();
	return _hx_result;
}

Bool TS6_obj::main(){
            	HX_STACK_FRAME("test.TS6","main",0x14d5d1cc,"test.TS6.main","test/TS6.hx",14,0x15f9d0a4)
HXLINE(  15)		HX_VARI(  ::nanotest::NanoTestRunner,runner) =  ::nanotest::NanoTestRunner_obj::__new(null());
HXLINE(  17)		HX_VARI( ::String,w) = HX_("",00,00,00,00);
HXLINE(  18)		{
HXLINE(  18)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  18)			HX_VARI( ::Array< ::String >,_g1) = ::Sys_obj::args();
HXDLIN(  18)			while((_g < _g1->length)){
HXLINE(  18)				HX_VARI( ::String,arg) = _g1->__get(_g);
HXDLIN(  18)				++_g;
HXLINE(  19)				w = arg;
            			}
            		}
HXLINE(  21)		::haxe::Log_obj::trace((HX_("The value of loop_wrapper is ",79,76,58,6c) + w),hx::SourceInfo(HX_("TS6.hx",47,3d,11,84),21,HX_("test.TS6",bb,2f,01,37),HX_("main",39,38,56,48)));
HXLINE(  22)		HX_VARI( Int,x) = ::Std_obj::parseInt(w);
HXLINE(  23)		{
HXLINE(  23)			HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN(  23)			while((_g11 < x)){
HXLINE(  23)				++_g11;
HXLINE(  24)				runner->add( ::test::TestFrames_obj::__new(hx::SourceInfo(HX_("TS6.hx",47,3d,11,84),24,HX_("test.TS6",bb,2f,01,37),HX_("main",39,38,56,48))));
            			}
            		}
HXLINE(  27)		return runner->run();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(TS6_obj,main,return )


TS6_obj::TS6_obj()
{
}

bool TS6_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TS6_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TS6_obj_sStaticStorageInfo = 0;
#endif

static void TS6_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TS6_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TS6_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TS6_obj::__mClass,"__mClass");
};

#endif

hx::Class TS6_obj::__mClass;

static ::String TS6_obj_sStaticFields[] = {
	HX_HCSTRING("main","\x39","\x38","\x56","\x48"),
	::String(null())
};

void TS6_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("test.TS6","\xbb","\x2f","\x01","\x37");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TS6_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TS6_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TS6_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< TS6_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TS6_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TS6_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TS6_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace test
