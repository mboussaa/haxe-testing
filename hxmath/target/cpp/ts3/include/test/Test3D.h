// Generated by Haxe 3.3.0
#ifndef INCLUDED_test_Test3D
#define INCLUDED_test_Test3D

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_test_MathTestCase
#include <test/MathTestCase.h>
#endif
HX_DECLARE_CLASS1(nanotest,NanoTestCase)
HX_DECLARE_CLASS1(test,MathTestCase)
HX_DECLARE_CLASS1(test,Test3D)

namespace test{


class HXCPP_CLASS_ATTRIBUTES Test3D_obj : public  ::test::MathTestCase_obj
{
	public:
		typedef  ::test::MathTestCase_obj super;
		typedef Test3D_obj OBJ_;
		Test3D_obj();
		void __construct( ::Dynamic posInfos);

	public:
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="test.Test3D")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		static hx::ObjectPtr< Test3D_obj > __new( ::Dynamic posInfos);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Test3D_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Test3D","\xa3","\xa1","\xce","\x09"); }

		void testMatrixMult();
		::Dynamic testMatrixMult_dyn();

		void testAddSub();
		::Dynamic testAddSub_dyn();

		void testCrossProductPrecedence();
		::Dynamic testCrossProductPrecedence_dyn();

		void testAxialRotation();
		::Dynamic testAxialRotation_dyn();

		void testQuaternionToMatrix();
		::Dynamic testQuaternionToMatrix_dyn();

		void testMatrixFrameInverse();
		::Dynamic testMatrixFrameInverse_dyn();

		void testQuaternionInverse();
		::Dynamic testQuaternionInverse_dyn();

		void testOrthoNormalize();
		::Dynamic testOrthoNormalize_dyn();

		void testAngles();
		::Dynamic testAngles_dyn();

		void testReflect();
		::Dynamic testReflect_dyn();

		void testProjectOntoPlane();
		::Dynamic testProjectOntoPlane_dyn();

		void testSlerpMidpointAngle();
		::Dynamic testSlerpMidpointAngle_dyn();

		void testSlerpMonotonicity();
		::Dynamic testSlerpMonotonicity_dyn();

		void testSlerpLargeAngleStability();
		::Dynamic testSlerpLargeAngleStability_dyn();

		void testSlerpSmallAngleStability();
		::Dynamic testSlerpSmallAngleStability_dyn();

};

} // end namespace test

#endif /* INCLUDED_test_Test3D */ 
