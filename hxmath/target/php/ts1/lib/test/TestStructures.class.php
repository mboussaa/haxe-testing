<?php

// Generated by Haxe 3.3.0
class test_TestStructures extends test_MathTestCase {
	public function __construct($posInfos = null) { if(!php_Boot::$skip_constructor) {
		parent::__construct($posInfos);
	}}
	public function testEquals() {
		$this1 = new hxmath_math_Matrix2x2Default(1.0, 0.0, 0.0, 1.0);
		$m = $this1;
		$this2 = new hxmath_math_Matrix2x2Default(1.0, 0.0, 0.0, 1.0);
		$n = $this2;
		$tmp = null;
		$tmp1 = null;
		if($m === null) {
			$tmp1 = $n === null;
		} else {
			$tmp1 = false;
		}
		if(!$tmp1) {
			$tmp2 = null;
			$tmp3 = null;
			$tmp4 = null;
			$tmp5 = null;
			if($m !== null) {
				$tmp5 = $n !== null;
			} else {
				$tmp5 = false;
			}
			if($tmp5) {
				$tmp4 = $m->a === $n->a;
			} else {
				$tmp4 = false;
			}
			if($tmp4) {
				$tmp3 = $m->b === $n->b;
			} else {
				$tmp3 = false;
			}
			if($tmp3) {
				$tmp2 = $m->c === $n->c;
			} else {
				$tmp2 = false;
			}
			if($tmp2) {
				$tmp = $m->d === $n->d;
			} else {
				$tmp = false;
			}
		} else {
			$tmp = true;
		}
		$this->assertTrue($tmp, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 22, "className" => "test.TestStructures", "methodName" => "testEquals")));
		$this3 = new hxmath_math_Matrix2x2Default(1.0, 0.0, 0.0, 1.0);
		$tmp6 = $this3;
		$this4 = new hxmath_math_Matrix2x2Default(0.0, 0.0, 0.0, 0.0);
		$this->assertTrue($tmp6 !== $this4, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 23, "className" => "test.TestStructures", "methodName" => "testEquals")));
		$this5 = new hxmath_math_Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0);
		$m1 = $this5;
		$this6 = new hxmath_math_Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0);
		$n1 = $this6;
		$tmp7 = null;
		$tmp8 = null;
		if($m1 === null) {
			$tmp8 = $n1 === null;
		} else {
			$tmp8 = false;
		}
		if(!$tmp8) {
			$tmp9 = null;
			$tmp10 = null;
			$tmp11 = null;
			$tmp12 = null;
			$tmp13 = null;
			$tmp14 = null;
			if($m1 !== null) {
				$tmp14 = $n1 !== null;
			} else {
				$tmp14 = false;
			}
			if($tmp14) {
				$tmp13 = $m1->a === $n1->a;
			} else {
				$tmp13 = false;
			}
			if($tmp13) {
				$tmp12 = $m1->b === $n1->b;
			} else {
				$tmp12 = false;
			}
			if($tmp12) {
				$tmp11 = $m1->c === $n1->c;
			} else {
				$tmp11 = false;
			}
			if($tmp11) {
				$tmp10 = $m1->d === $n1->d;
			} else {
				$tmp10 = false;
			}
			if($tmp10) {
				$tmp9 = $m1->tx === $n1->tx;
			} else {
				$tmp9 = false;
			}
			if($tmp9) {
				$tmp7 = $m1->ty === $n1->ty;
			} else {
				$tmp7 = false;
			}
		} else {
			$tmp7 = true;
		}
		$this->assertTrue($tmp7, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 24, "className" => "test.TestStructures", "methodName" => "testEquals")));
		$this7 = new hxmath_math_Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0);
		$tmp15 = $this7;
		$this8 = new hxmath_math_Matrix3x2Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		$this->assertTrue($tmp15 !== $this8, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 25, "className" => "test.TestStructures", "methodName" => "testEquals")));
		$this9 = new hxmath_math_Matrix3x3Default(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0);
		$a = $this9;
		$this10 = new hxmath_math_Matrix3x3Default(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0);
		$b = $this10;
		$tmp16 = null;
		$tmp17 = null;
		if($a === null) {
			$tmp17 = $b === null;
		} else {
			$tmp17 = false;
		}
		if(!$tmp17) {
			$tmp18 = null;
			$tmp19 = null;
			$tmp20 = null;
			$tmp21 = null;
			$tmp22 = null;
			$tmp23 = null;
			$tmp24 = null;
			$tmp25 = null;
			$tmp26 = null;
			if($a !== null) {
				$tmp26 = $b !== null;
			} else {
				$tmp26 = false;
			}
			if($tmp26) {
				$tmp25 = $a->m00 === $b->m00;
			} else {
				$tmp25 = false;
			}
			if($tmp25) {
				$tmp24 = $a->m10 === $b->m10;
			} else {
				$tmp24 = false;
			}
			if($tmp24) {
				$tmp23 = $a->m20 === $b->m20;
			} else {
				$tmp23 = false;
			}
			if($tmp23) {
				$tmp22 = $a->m01 === $b->m01;
			} else {
				$tmp22 = false;
			}
			if($tmp22) {
				$tmp21 = $a->m11 === $b->m11;
			} else {
				$tmp21 = false;
			}
			if($tmp21) {
				$tmp20 = $a->m21 === $b->m21;
			} else {
				$tmp20 = false;
			}
			if($tmp20) {
				$tmp19 = $a->m02 === $b->m02;
			} else {
				$tmp19 = false;
			}
			if($tmp19) {
				$tmp18 = $a->m12 === $b->m12;
			} else {
				$tmp18 = false;
			}
			if($tmp18) {
				$tmp16 = $a->m22 === $b->m22;
			} else {
				$tmp16 = false;
			}
		} else {
			$tmp16 = true;
		}
		$this->assertTrue($tmp16, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 26, "className" => "test.TestStructures", "methodName" => "testEquals")));
		$this11 = new hxmath_math_Matrix3x3Default(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0);
		$tmp27 = $this11;
		$this12 = new hxmath_math_Matrix3x3Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		$this->assertTrue($tmp27 !== $this12, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 27, "className" => "test.TestStructures", "methodName" => "testEquals")));
		$this13 = new hxmath_math_Matrix4x4Default(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);
		$a1 = $this13;
		$this14 = new hxmath_math_Matrix4x4Default(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);
		$b1 = $this14;
		$tmp28 = null;
		$tmp29 = null;
		if($a1 === null) {
			$tmp29 = $b1 === null;
		} else {
			$tmp29 = false;
		}
		if(!$tmp29) {
			$tmp30 = null;
			$tmp31 = null;
			$tmp32 = null;
			$tmp33 = null;
			$tmp34 = null;
			$tmp35 = null;
			$tmp36 = null;
			$tmp37 = null;
			$tmp38 = null;
			$tmp39 = null;
			$tmp40 = null;
			$tmp41 = null;
			$tmp42 = null;
			$tmp43 = null;
			$tmp44 = null;
			$tmp45 = null;
			if($a1 !== null) {
				$tmp45 = $b1 !== null;
			} else {
				$tmp45 = false;
			}
			if($tmp45) {
				$tmp44 = $a1->m00 === $b1->m00;
			} else {
				$tmp44 = false;
			}
			if($tmp44) {
				$tmp43 = $a1->m10 === $b1->m10;
			} else {
				$tmp43 = false;
			}
			if($tmp43) {
				$tmp42 = $a1->m20 === $b1->m20;
			} else {
				$tmp42 = false;
			}
			if($tmp42) {
				$tmp41 = $a1->m30 === $b1->m30;
			} else {
				$tmp41 = false;
			}
			if($tmp41) {
				$tmp40 = $a1->m01 === $b1->m01;
			} else {
				$tmp40 = false;
			}
			if($tmp40) {
				$tmp39 = $a1->m11 === $b1->m11;
			} else {
				$tmp39 = false;
			}
			if($tmp39) {
				$tmp38 = $a1->m21 === $b1->m21;
			} else {
				$tmp38 = false;
			}
			if($tmp38) {
				$tmp37 = $a1->m31 === $b1->m31;
			} else {
				$tmp37 = false;
			}
			if($tmp37) {
				$tmp36 = $a1->m02 === $b1->m02;
			} else {
				$tmp36 = false;
			}
			if($tmp36) {
				$tmp35 = $a1->m12 === $b1->m12;
			} else {
				$tmp35 = false;
			}
			if($tmp35) {
				$tmp34 = $a1->m22 === $b1->m22;
			} else {
				$tmp34 = false;
			}
			if($tmp34) {
				$tmp33 = $a1->m32 === $b1->m32;
			} else {
				$tmp33 = false;
			}
			if($tmp33) {
				$tmp32 = $a1->m03 === $b1->m03;
			} else {
				$tmp32 = false;
			}
			if($tmp32) {
				$tmp31 = $a1->m13 === $b1->m13;
			} else {
				$tmp31 = false;
			}
			if($tmp31) {
				$tmp30 = $a1->m23 === $b1->m23;
			} else {
				$tmp30 = false;
			}
			if($tmp30) {
				$tmp28 = $a1->m33 === $b1->m33;
			} else {
				$tmp28 = false;
			}
		} else {
			$tmp28 = true;
		}
		$this->assertTrue($tmp28, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 28, "className" => "test.TestStructures", "methodName" => "testEquals")));
		$this15 = new hxmath_math_Matrix4x4Default(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);
		$tmp46 = $this15;
		$this16 = new hxmath_math_Matrix4x4Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		$this->assertTrue($tmp46 !== $this16, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 29, "className" => "test.TestStructures", "methodName" => "testEquals")));
		$this17 = new hxmath_math_Vector2Default(0.0, 1.0);
		$a2 = $this17;
		$this18 = new hxmath_math_Vector2Default(0.0, 1.0);
		$b2 = $this18;
		$tmp47 = null;
		$tmp48 = null;
		if($a2 === null) {
			$tmp48 = $b2 === null;
		} else {
			$tmp48 = false;
		}
		if(!$tmp48) {
			$tmp49 = null;
			$tmp50 = null;
			if($a2 !== null) {
				$tmp50 = $b2 !== null;
			} else {
				$tmp50 = false;
			}
			if($tmp50) {
				$tmp49 = $a2->x === $b2->x;
			} else {
				$tmp49 = false;
			}
			if($tmp49) {
				$tmp47 = $a2->y === $b2->y;
			} else {
				$tmp47 = false;
			}
		} else {
			$tmp47 = true;
		}
		$this->assertTrue($tmp47, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 31, "className" => "test.TestStructures", "methodName" => "testEquals")));
		$this19 = new hxmath_math_Vector2Default(0.0, 1.0);
		$tmp51 = $this19;
		$this20 = new hxmath_math_Vector2Default(1.0, 0.0);
		$this->assertTrue($tmp51 !== $this20, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 32, "className" => "test.TestStructures", "methodName" => "testEquals")));
		$this21 = new hxmath_math_Vector3Default(0.0, 0.0, 1.0);
		$a3 = $this21;
		$this22 = new hxmath_math_Vector3Default(0.0, 0.0, 1.0);
		$b3 = $this22;
		$tmp52 = null;
		$tmp53 = null;
		if($a3 === null) {
			$tmp53 = $b3 === null;
		} else {
			$tmp53 = false;
		}
		if(!$tmp53) {
			$tmp54 = null;
			$tmp55 = null;
			$tmp56 = null;
			if($a3 !== null) {
				$tmp56 = $b3 !== null;
			} else {
				$tmp56 = false;
			}
			if($tmp56) {
				$tmp55 = $a3->x === $b3->x;
			} else {
				$tmp55 = false;
			}
			if($tmp55) {
				$tmp54 = $a3->y === $b3->y;
			} else {
				$tmp54 = false;
			}
			if($tmp54) {
				$tmp52 = $a3->z === $b3->z;
			} else {
				$tmp52 = false;
			}
		} else {
			$tmp52 = true;
		}
		$this->assertTrue($tmp52, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 33, "className" => "test.TestStructures", "methodName" => "testEquals")));
		$this23 = new hxmath_math_Vector3Default(0.0, 0.0, 1.0);
		$tmp57 = $this23;
		$this24 = new hxmath_math_Vector3Default(1.0, 0.0, 0.0);
		$this->assertTrue($tmp57 !== $this24, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 34, "className" => "test.TestStructures", "methodName" => "testEquals")));
		$this25 = new hxmath_math_Vector4Default(0.0, 0.0, 1.0, 0.0);
		$a4 = $this25;
		$this26 = new hxmath_math_Vector4Default(0.0, 0.0, 1.0, 0.0);
		$b4 = $this26;
		$tmp58 = null;
		$tmp59 = null;
		if($a4 === null) {
			$tmp59 = $b4 === null;
		} else {
			$tmp59 = false;
		}
		if(!$tmp59) {
			$tmp60 = null;
			$tmp61 = null;
			$tmp62 = null;
			$tmp63 = null;
			if($a4 !== null) {
				$tmp63 = $b4 !== null;
			} else {
				$tmp63 = false;
			}
			if($tmp63) {
				$tmp62 = $a4->x === $b4->x;
			} else {
				$tmp62 = false;
			}
			if($tmp62) {
				$tmp61 = $a4->y === $b4->y;
			} else {
				$tmp61 = false;
			}
			if($tmp61) {
				$tmp60 = $a4->z === $b4->z;
			} else {
				$tmp60 = false;
			}
			if($tmp60) {
				$tmp58 = $a4->w === $b4->w;
			} else {
				$tmp58 = false;
			}
		} else {
			$tmp58 = true;
		}
		$this->assertTrue($tmp58, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 35, "className" => "test.TestStructures", "methodName" => "testEquals")));
		$this27 = new hxmath_math_Vector4Default(0.0, 0.0, 1.0, 0.0);
		$tmp64 = $this27;
		$this28 = new hxmath_math_Vector4Default(1.0, 0.0, 0.0, 0.0);
		$this->assertTrue($tmp64 !== $this28, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 36, "className" => "test.TestStructures", "methodName" => "testEquals")));
		$this29 = new hxmath_math_QuaternionDefault(1, 0, 0, 0);
		$a5 = $this29;
		$this30 = new hxmath_math_QuaternionDefault(1, 0, 0, 0);
		$b5 = $this30;
		$tmp65 = null;
		$tmp66 = null;
		if($a5 === null) {
			$tmp66 = $b5 === null;
		} else {
			$tmp66 = false;
		}
		if(!$tmp66) {
			$tmp67 = null;
			$tmp68 = null;
			$tmp69 = null;
			$tmp70 = null;
			if($a5 !== null) {
				$tmp70 = $b5 !== null;
			} else {
				$tmp70 = false;
			}
			if($tmp70) {
				$tmp69 = $a5->s === $b5->s;
			} else {
				$tmp69 = false;
			}
			if($tmp69) {
				$tmp68 = $a5->x === $b5->x;
			} else {
				$tmp68 = false;
			}
			if($tmp68) {
				$tmp67 = $a5->y === $b5->y;
			} else {
				$tmp67 = false;
			}
			if($tmp67) {
				$tmp65 = $a5->z === $b5->z;
			} else {
				$tmp65 = false;
			}
		} else {
			$tmp65 = true;
		}
		$this->assertTrue($tmp65, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 38, "className" => "test.TestStructures", "methodName" => "testEquals")));
		$this31 = new hxmath_math_QuaternionDefault(1, 0, 0, 0);
		$tmp71 = $this31;
		$this32 = new hxmath_math_QuaternionDefault(0, 0, 0, 0);
		$this->assertTrue($tmp71 !== $this32, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 39, "className" => "test.TestStructures", "methodName" => "testEquals")));
		$a6 = hxmath_math__IntVector2_IntVector2_Impl_::_new(0, 1);
		$b6 = hxmath_math__IntVector2_IntVector2_Impl_::_new(0, 1);
		$tmp72 = null;
		$tmp73 = null;
		if($a6 === null) {
			$tmp73 = $b6 === null;
		} else {
			$tmp73 = false;
		}
		if(!$tmp73) {
			$tmp74 = null;
			$tmp75 = null;
			if($a6 !== null) {
				$tmp75 = $b6 !== null;
			} else {
				$tmp75 = false;
			}
			if($tmp75) {
				$tmp74 = $a6->x === $b6->x;
			} else {
				$tmp74 = false;
			}
			if($tmp74) {
				$tmp72 = $a6->y === $b6->y;
			} else {
				$tmp72 = false;
			}
		} else {
			$tmp72 = true;
		}
		$this->assertTrue($tmp72, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 41, "className" => "test.TestStructures", "methodName" => "testEquals")));
		$this->assertTrue((is_object($_t = hxmath_math__IntVector2_IntVector2_Impl_::_new(0, 1)) && ($_t instanceof Enum) ? $_t != hxmath_math__IntVector2_IntVector2_Impl_::_new(1, 0) : !_hx_equal($_t, hxmath_math__IntVector2_IntVector2_Impl_::_new(1, 0))), _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 42, "className" => "test.TestStructures", "methodName" => "testEquals")));
		$tmp76 = hxmath_math__ShortVector2_ShortVector2_Impl_::_new(0, 1);
		$tmp77 = hxmath_math__ShortVector2_ShortVector2_Impl_::_new(0, 1);
		$this->assertTrue($tmp76 === $tmp77, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 44, "className" => "test.TestStructures", "methodName" => "testEquals")));
		$tmp78 = hxmath_math__ShortVector2_ShortVector2_Impl_::_new(0, 1);
		$tmp79 = hxmath_math__ShortVector2_ShortVector2_Impl_::_new(1, 0);
		$this->assertTrue($tmp78 !== $tmp79, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 45, "className" => "test.TestStructures", "methodName" => "testEquals")));
	}
	public function testClone() {
		$this1 = new hxmath_math_Matrix2x2Default(1.0, 0.0, 0.0, 1.0);
		$self = $this1;
		$this2 = new hxmath_math_Matrix2x2Default($self->a, $self->b, $self->c, $self->d);
		$m = $this2;
		$this3 = new hxmath_math_Matrix2x2Default(1.0, 0.0, 0.0, 1.0);
		$n = $this3;
		$tmp = null;
		$tmp1 = null;
		if($m === null) {
			$tmp1 = $n === null;
		} else {
			$tmp1 = false;
		}
		if(!$tmp1) {
			$tmp2 = null;
			$tmp3 = null;
			$tmp4 = null;
			$tmp5 = null;
			if($m !== null) {
				$tmp5 = $n !== null;
			} else {
				$tmp5 = false;
			}
			if($tmp5) {
				$tmp4 = $m->a === $n->a;
			} else {
				$tmp4 = false;
			}
			if($tmp4) {
				$tmp3 = $m->b === $n->b;
			} else {
				$tmp3 = false;
			}
			if($tmp3) {
				$tmp2 = $m->c === $n->c;
			} else {
				$tmp2 = false;
			}
			if($tmp2) {
				$tmp = $m->d === $n->d;
			} else {
				$tmp = false;
			}
		} else {
			$tmp = true;
		}
		$this->assertTrue($tmp, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 50, "className" => "test.TestStructures", "methodName" => "testClone")));
		$this4 = new hxmath_math_Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0);
		$self1 = $this4;
		$this5 = new hxmath_math_Matrix3x2Default($self1->a, $self1->b, $self1->c, $self1->d, $self1->tx, $self1->ty);
		$m1 = $this5;
		$this6 = new hxmath_math_Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0);
		$n1 = $this6;
		$tmp6 = null;
		$tmp7 = null;
		if($m1 === null) {
			$tmp7 = $n1 === null;
		} else {
			$tmp7 = false;
		}
		if(!$tmp7) {
			$tmp8 = null;
			$tmp9 = null;
			$tmp10 = null;
			$tmp11 = null;
			$tmp12 = null;
			$tmp13 = null;
			if($m1 !== null) {
				$tmp13 = $n1 !== null;
			} else {
				$tmp13 = false;
			}
			if($tmp13) {
				$tmp12 = $m1->a === $n1->a;
			} else {
				$tmp12 = false;
			}
			if($tmp12) {
				$tmp11 = $m1->b === $n1->b;
			} else {
				$tmp11 = false;
			}
			if($tmp11) {
				$tmp10 = $m1->c === $n1->c;
			} else {
				$tmp10 = false;
			}
			if($tmp10) {
				$tmp9 = $m1->d === $n1->d;
			} else {
				$tmp9 = false;
			}
			if($tmp9) {
				$tmp8 = $m1->tx === $n1->tx;
			} else {
				$tmp8 = false;
			}
			if($tmp8) {
				$tmp6 = $m1->ty === $n1->ty;
			} else {
				$tmp6 = false;
			}
		} else {
			$tmp6 = true;
		}
		$this->assertTrue($tmp6, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 51, "className" => "test.TestStructures", "methodName" => "testClone")));
		$this7 = new hxmath_math_Matrix3x3Default(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0);
		$self2 = $this7;
		$this8 = new hxmath_math_Matrix3x3Default($self2->m00, $self2->m10, $self2->m20, $self2->m01, $self2->m11, $self2->m21, $self2->m02, $self2->m12, $self2->m22);
		$a = $this8;
		$this9 = new hxmath_math_Matrix3x3Default(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0);
		$b = $this9;
		$tmp14 = null;
		$tmp15 = null;
		if($a === null) {
			$tmp15 = $b === null;
		} else {
			$tmp15 = false;
		}
		if(!$tmp15) {
			$tmp16 = null;
			$tmp17 = null;
			$tmp18 = null;
			$tmp19 = null;
			$tmp20 = null;
			$tmp21 = null;
			$tmp22 = null;
			$tmp23 = null;
			$tmp24 = null;
			if($a !== null) {
				$tmp24 = $b !== null;
			} else {
				$tmp24 = false;
			}
			if($tmp24) {
				$tmp23 = $a->m00 === $b->m00;
			} else {
				$tmp23 = false;
			}
			if($tmp23) {
				$tmp22 = $a->m10 === $b->m10;
			} else {
				$tmp22 = false;
			}
			if($tmp22) {
				$tmp21 = $a->m20 === $b->m20;
			} else {
				$tmp21 = false;
			}
			if($tmp21) {
				$tmp20 = $a->m01 === $b->m01;
			} else {
				$tmp20 = false;
			}
			if($tmp20) {
				$tmp19 = $a->m11 === $b->m11;
			} else {
				$tmp19 = false;
			}
			if($tmp19) {
				$tmp18 = $a->m21 === $b->m21;
			} else {
				$tmp18 = false;
			}
			if($tmp18) {
				$tmp17 = $a->m02 === $b->m02;
			} else {
				$tmp17 = false;
			}
			if($tmp17) {
				$tmp16 = $a->m12 === $b->m12;
			} else {
				$tmp16 = false;
			}
			if($tmp16) {
				$tmp14 = $a->m22 === $b->m22;
			} else {
				$tmp14 = false;
			}
		} else {
			$tmp14 = true;
		}
		$this->assertTrue($tmp14, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 52, "className" => "test.TestStructures", "methodName" => "testClone")));
		$this10 = new hxmath_math_Matrix4x4Default(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);
		$self3 = $this10;
		$this11 = new hxmath_math_Matrix4x4Default($self3->m00, $self3->m10, $self3->m20, $self3->m30, $self3->m01, $self3->m11, $self3->m21, $self3->m31, $self3->m02, $self3->m12, $self3->m22, $self3->m32, $self3->m03, $self3->m13, $self3->m23, $self3->m33);
		$a1 = $this11;
		$this12 = new hxmath_math_Matrix4x4Default(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);
		$b1 = $this12;
		$tmp25 = null;
		$tmp26 = null;
		if($a1 === null) {
			$tmp26 = $b1 === null;
		} else {
			$tmp26 = false;
		}
		if(!$tmp26) {
			$tmp27 = null;
			$tmp28 = null;
			$tmp29 = null;
			$tmp30 = null;
			$tmp31 = null;
			$tmp32 = null;
			$tmp33 = null;
			$tmp34 = null;
			$tmp35 = null;
			$tmp36 = null;
			$tmp37 = null;
			$tmp38 = null;
			$tmp39 = null;
			$tmp40 = null;
			$tmp41 = null;
			$tmp42 = null;
			if($a1 !== null) {
				$tmp42 = $b1 !== null;
			} else {
				$tmp42 = false;
			}
			if($tmp42) {
				$tmp41 = $a1->m00 === $b1->m00;
			} else {
				$tmp41 = false;
			}
			if($tmp41) {
				$tmp40 = $a1->m10 === $b1->m10;
			} else {
				$tmp40 = false;
			}
			if($tmp40) {
				$tmp39 = $a1->m20 === $b1->m20;
			} else {
				$tmp39 = false;
			}
			if($tmp39) {
				$tmp38 = $a1->m30 === $b1->m30;
			} else {
				$tmp38 = false;
			}
			if($tmp38) {
				$tmp37 = $a1->m01 === $b1->m01;
			} else {
				$tmp37 = false;
			}
			if($tmp37) {
				$tmp36 = $a1->m11 === $b1->m11;
			} else {
				$tmp36 = false;
			}
			if($tmp36) {
				$tmp35 = $a1->m21 === $b1->m21;
			} else {
				$tmp35 = false;
			}
			if($tmp35) {
				$tmp34 = $a1->m31 === $b1->m31;
			} else {
				$tmp34 = false;
			}
			if($tmp34) {
				$tmp33 = $a1->m02 === $b1->m02;
			} else {
				$tmp33 = false;
			}
			if($tmp33) {
				$tmp32 = $a1->m12 === $b1->m12;
			} else {
				$tmp32 = false;
			}
			if($tmp32) {
				$tmp31 = $a1->m22 === $b1->m22;
			} else {
				$tmp31 = false;
			}
			if($tmp31) {
				$tmp30 = $a1->m32 === $b1->m32;
			} else {
				$tmp30 = false;
			}
			if($tmp30) {
				$tmp29 = $a1->m03 === $b1->m03;
			} else {
				$tmp29 = false;
			}
			if($tmp29) {
				$tmp28 = $a1->m13 === $b1->m13;
			} else {
				$tmp28 = false;
			}
			if($tmp28) {
				$tmp27 = $a1->m23 === $b1->m23;
			} else {
				$tmp27 = false;
			}
			if($tmp27) {
				$tmp25 = $a1->m33 === $b1->m33;
			} else {
				$tmp25 = false;
			}
		} else {
			$tmp25 = true;
		}
		$this->assertTrue($tmp25, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 53, "className" => "test.TestStructures", "methodName" => "testClone")));
		$this13 = new hxmath_math_Vector2Default(0.0, 0.0);
		$self4 = $this13;
		$this14 = new hxmath_math_Vector2Default($self4->x, $self4->y);
		$a2 = $this14;
		$this15 = new hxmath_math_Vector2Default(0.0, 0.0);
		$b2 = $this15;
		$tmp43 = null;
		$tmp44 = null;
		if($a2 === null) {
			$tmp44 = $b2 === null;
		} else {
			$tmp44 = false;
		}
		if(!$tmp44) {
			$tmp45 = null;
			$tmp46 = null;
			if($a2 !== null) {
				$tmp46 = $b2 !== null;
			} else {
				$tmp46 = false;
			}
			if($tmp46) {
				$tmp45 = $a2->x === $b2->x;
			} else {
				$tmp45 = false;
			}
			if($tmp45) {
				$tmp43 = $a2->y === $b2->y;
			} else {
				$tmp43 = false;
			}
		} else {
			$tmp43 = true;
		}
		$this->assertTrue($tmp43, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 55, "className" => "test.TestStructures", "methodName" => "testClone")));
		$this16 = new hxmath_math_Vector3Default(0.0, 0.0, 0.0);
		$self5 = $this16;
		$this17 = new hxmath_math_Vector3Default($self5->x, $self5->y, $self5->z);
		$a3 = $this17;
		$this18 = new hxmath_math_Vector3Default(0.0, 0.0, 0.0);
		$b3 = $this18;
		$tmp47 = null;
		$tmp48 = null;
		if($a3 === null) {
			$tmp48 = $b3 === null;
		} else {
			$tmp48 = false;
		}
		if(!$tmp48) {
			$tmp49 = null;
			$tmp50 = null;
			$tmp51 = null;
			if($a3 !== null) {
				$tmp51 = $b3 !== null;
			} else {
				$tmp51 = false;
			}
			if($tmp51) {
				$tmp50 = $a3->x === $b3->x;
			} else {
				$tmp50 = false;
			}
			if($tmp50) {
				$tmp49 = $a3->y === $b3->y;
			} else {
				$tmp49 = false;
			}
			if($tmp49) {
				$tmp47 = $a3->z === $b3->z;
			} else {
				$tmp47 = false;
			}
		} else {
			$tmp47 = true;
		}
		$this->assertTrue($tmp47, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 56, "className" => "test.TestStructures", "methodName" => "testClone")));
		$this19 = new hxmath_math_Vector4Default(0.0, 0.0, 0.0, 0.0);
		$self6 = $this19;
		$this20 = new hxmath_math_Vector4Default($self6->x, $self6->y, $self6->z, $self6->w);
		$a4 = $this20;
		$this21 = new hxmath_math_Vector4Default(0.0, 0.0, 0.0, 0.0);
		$b4 = $this21;
		$tmp52 = null;
		$tmp53 = null;
		if($a4 === null) {
			$tmp53 = $b4 === null;
		} else {
			$tmp53 = false;
		}
		if(!$tmp53) {
			$tmp54 = null;
			$tmp55 = null;
			$tmp56 = null;
			$tmp57 = null;
			if($a4 !== null) {
				$tmp57 = $b4 !== null;
			} else {
				$tmp57 = false;
			}
			if($tmp57) {
				$tmp56 = $a4->x === $b4->x;
			} else {
				$tmp56 = false;
			}
			if($tmp56) {
				$tmp55 = $a4->y === $b4->y;
			} else {
				$tmp55 = false;
			}
			if($tmp55) {
				$tmp54 = $a4->z === $b4->z;
			} else {
				$tmp54 = false;
			}
			if($tmp54) {
				$tmp52 = $a4->w === $b4->w;
			} else {
				$tmp52 = false;
			}
		} else {
			$tmp52 = true;
		}
		$this->assertTrue($tmp52, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 57, "className" => "test.TestStructures", "methodName" => "testClone")));
		$this22 = new hxmath_math_QuaternionDefault(1, 0, 0, 0);
		$self7 = $this22;
		$this23 = new hxmath_math_QuaternionDefault($self7->s, $self7->x, $self7->y, $self7->z);
		$a5 = $this23;
		$this24 = new hxmath_math_QuaternionDefault(1, 0, 0, 0);
		$b5 = $this24;
		$tmp58 = null;
		$tmp59 = null;
		if($a5 === null) {
			$tmp59 = $b5 === null;
		} else {
			$tmp59 = false;
		}
		if(!$tmp59) {
			$tmp60 = null;
			$tmp61 = null;
			$tmp62 = null;
			$tmp63 = null;
			if($a5 !== null) {
				$tmp63 = $b5 !== null;
			} else {
				$tmp63 = false;
			}
			if($tmp63) {
				$tmp62 = $a5->s === $b5->s;
			} else {
				$tmp62 = false;
			}
			if($tmp62) {
				$tmp61 = $a5->x === $b5->x;
			} else {
				$tmp61 = false;
			}
			if($tmp61) {
				$tmp60 = $a5->y === $b5->y;
			} else {
				$tmp60 = false;
			}
			if($tmp60) {
				$tmp58 = $a5->z === $b5->z;
			} else {
				$tmp58 = false;
			}
		} else {
			$tmp58 = true;
		}
		$this->assertTrue($tmp58, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 59, "className" => "test.TestStructures", "methodName" => "testClone")));
		$self8 = hxmath_math__IntVector2_IntVector2_Impl_::_new(0, 0);
		$a6 = hxmath_math__IntVector2_IntVector2_Impl_::_new($self8->x, $self8->y);
		$b6 = hxmath_math__IntVector2_IntVector2_Impl_::_new(0, 0);
		$tmp64 = null;
		$tmp65 = null;
		if($a6 === null) {
			$tmp65 = $b6 === null;
		} else {
			$tmp65 = false;
		}
		if(!$tmp65) {
			$tmp66 = null;
			$tmp67 = null;
			if($a6 !== null) {
				$tmp67 = $b6 !== null;
			} else {
				$tmp67 = false;
			}
			if($tmp67) {
				$tmp66 = $a6->x === $b6->x;
			} else {
				$tmp66 = false;
			}
			if($tmp66) {
				$tmp64 = $a6->y === $b6->y;
			} else {
				$tmp64 = false;
			}
		} else {
			$tmp64 = true;
		}
		$this->assertTrue($tmp64, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 61, "className" => "test.TestStructures", "methodName" => "testClone")));
	}
	public function testAddSub() {
		$this1 = new hxmath_math_Matrix2x2Default(0.0, 0.0, 0.0, 0.0);
		$mat22 = $this1;
		$this2 = new hxmath_math_Matrix2x2Default(1.0, 0.0, 0.0, 1.0);
		$n = $this2;
		$self = $mat22;
		$this3 = new hxmath_math_Matrix2x2Default($self->a, $self->b, $self->c, $self->d);
		$self1 = $this3;
		$self1->a += $n->a;
		$self1->b += $n->b;
		$self1->c += $n->c;
		$self1->d += $n->d;
		$this4 = new hxmath_math_Matrix2x2Default(1.0, 0.0, 0.0, 1.0);
		$n1 = $this4;
		$tmp = null;
		$tmp1 = null;
		if($self1 === null) {
			$tmp1 = $n1 === null;
		} else {
			$tmp1 = false;
		}
		if(!$tmp1) {
			$tmp2 = null;
			$tmp3 = null;
			$tmp4 = null;
			$tmp5 = null;
			if($self1 !== null) {
				$tmp5 = $n1 !== null;
			} else {
				$tmp5 = false;
			}
			if($tmp5) {
				$tmp4 = $self1->a === $n1->a;
			} else {
				$tmp4 = false;
			}
			if($tmp4) {
				$tmp3 = $self1->b === $n1->b;
			} else {
				$tmp3 = false;
			}
			if($tmp3) {
				$tmp2 = $self1->c === $n1->c;
			} else {
				$tmp2 = false;
			}
			if($tmp2) {
				$tmp = $self1->d === $n1->d;
			} else {
				$tmp = false;
			}
		} else {
			$tmp = true;
		}
		$this->assertTrue($tmp, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 67, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$this5 = new hxmath_math_Matrix2x2Default(1.0, 0.0, 0.0, 1.0);
		$n2 = $this5;
		$self2 = $mat22;
		$this6 = new hxmath_math_Matrix2x2Default($self2->a, $self2->b, $self2->c, $self2->d);
		$self3 = $this6;
		$self3->a += $n2->a;
		$self3->b += $n2->b;
		$self3->c += $n2->c;
		$self3->d += $n2->d;
		$mat22 = $self3;
		$this7 = new hxmath_math_Matrix2x2Default(1.0, 0.0, 0.0, 1.0);
		$n3 = $this7;
		$tmp6 = null;
		$tmp7 = null;
		if($self3 === null) {
			$tmp7 = $n3 === null;
		} else {
			$tmp7 = false;
		}
		if(!$tmp7) {
			$tmp8 = null;
			$tmp9 = null;
			$tmp10 = null;
			$tmp11 = null;
			if($self3 !== null) {
				$tmp11 = $n3 !== null;
			} else {
				$tmp11 = false;
			}
			if($tmp11) {
				$tmp10 = $self3->a === $n3->a;
			} else {
				$tmp10 = false;
			}
			if($tmp10) {
				$tmp9 = $self3->b === $n3->b;
			} else {
				$tmp9 = false;
			}
			if($tmp9) {
				$tmp8 = $self3->c === $n3->c;
			} else {
				$tmp8 = false;
			}
			if($tmp8) {
				$tmp6 = $self3->d === $n3->d;
			} else {
				$tmp6 = false;
			}
		} else {
			$tmp6 = true;
		}
		$this->assertTrue($tmp6, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 69, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$this8 = new hxmath_math_Matrix2x2Default(1.0, 0.0, 0.0, 1.0);
		$n4 = $this8;
		$self4 = $self3;
		$this9 = new hxmath_math_Matrix2x2Default($self4->a, $self4->b, $self4->c, $self4->d);
		$self5 = $this9;
		$self5->a -= $n4->a;
		$self5->b -= $n4->b;
		$self5->c -= $n4->c;
		$self5->d -= $n4->d;
		$this10 = new hxmath_math_Matrix2x2Default(0.0, 0.0, 0.0, 0.0);
		$n5 = $this10;
		$tmp12 = null;
		$tmp13 = null;
		if($self5 === null) {
			$tmp13 = $n5 === null;
		} else {
			$tmp13 = false;
		}
		if(!$tmp13) {
			$tmp14 = null;
			$tmp15 = null;
			$tmp16 = null;
			$tmp17 = null;
			if($self5 !== null) {
				$tmp17 = $n5 !== null;
			} else {
				$tmp17 = false;
			}
			if($tmp17) {
				$tmp16 = $self5->a === $n5->a;
			} else {
				$tmp16 = false;
			}
			if($tmp16) {
				$tmp15 = $self5->b === $n5->b;
			} else {
				$tmp15 = false;
			}
			if($tmp15) {
				$tmp14 = $self5->c === $n5->c;
			} else {
				$tmp14 = false;
			}
			if($tmp14) {
				$tmp12 = $self5->d === $n5->d;
			} else {
				$tmp12 = false;
			}
		} else {
			$tmp12 = true;
		}
		$this->assertTrue($tmp12, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 70, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$this11 = new hxmath_math_Matrix2x2Default(1.0, 0.0, 0.0, 1.0);
		$n6 = $this11;
		$self6 = $self3;
		$this12 = new hxmath_math_Matrix2x2Default($self6->a, $self6->b, $self6->c, $self6->d);
		$self7 = $this12;
		$self7->a -= $n6->a;
		$self7->b -= $n6->b;
		$self7->c -= $n6->c;
		$self7->d -= $n6->d;
		$mat22 = $self7;
		$this13 = new hxmath_math_Matrix2x2Default(0.0, 0.0, 0.0, 0.0);
		$n7 = $this13;
		$tmp18 = null;
		$tmp19 = null;
		if($self7 === null) {
			$tmp19 = $n7 === null;
		} else {
			$tmp19 = false;
		}
		if(!$tmp19) {
			$tmp20 = null;
			$tmp21 = null;
			$tmp22 = null;
			$tmp23 = null;
			if($self7 !== null) {
				$tmp23 = $n7 !== null;
			} else {
				$tmp23 = false;
			}
			if($tmp23) {
				$tmp22 = $self7->a === $n7->a;
			} else {
				$tmp22 = false;
			}
			if($tmp22) {
				$tmp21 = $self7->b === $n7->b;
			} else {
				$tmp21 = false;
			}
			if($tmp21) {
				$tmp20 = $self7->c === $n7->c;
			} else {
				$tmp20 = false;
			}
			if($tmp20) {
				$tmp18 = $self7->d === $n7->d;
			} else {
				$tmp18 = false;
			}
		} else {
			$tmp18 = true;
		}
		$this->assertTrue($tmp18, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 72, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$this14 = new hxmath_math_Matrix3x2Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		$mat32 = $this14;
		$this15 = new hxmath_math_Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0);
		$n8 = $this15;
		$self8 = $mat32;
		$this16 = new hxmath_math_Matrix3x2Default($self8->a, $self8->b, $self8->c, $self8->d, $self8->tx, $self8->ty);
		$self9 = $this16;
		$self9->a += $n8->a;
		$self9->b += $n8->b;
		$self9->c += $n8->c;
		$self9->d += $n8->d;
		$self9->tx += $n8->tx;
		$self9->ty += $n8->ty;
		$this17 = new hxmath_math_Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0);
		$n9 = $this17;
		$tmp24 = null;
		$tmp25 = null;
		if($self9 === null) {
			$tmp25 = $n9 === null;
		} else {
			$tmp25 = false;
		}
		if(!$tmp25) {
			$tmp26 = null;
			$tmp27 = null;
			$tmp28 = null;
			$tmp29 = null;
			$tmp30 = null;
			$tmp31 = null;
			if($self9 !== null) {
				$tmp31 = $n9 !== null;
			} else {
				$tmp31 = false;
			}
			if($tmp31) {
				$tmp30 = $self9->a === $n9->a;
			} else {
				$tmp30 = false;
			}
			if($tmp30) {
				$tmp29 = $self9->b === $n9->b;
			} else {
				$tmp29 = false;
			}
			if($tmp29) {
				$tmp28 = $self9->c === $n9->c;
			} else {
				$tmp28 = false;
			}
			if($tmp28) {
				$tmp27 = $self9->d === $n9->d;
			} else {
				$tmp27 = false;
			}
			if($tmp27) {
				$tmp26 = $self9->tx === $n9->tx;
			} else {
				$tmp26 = false;
			}
			if($tmp26) {
				$tmp24 = $self9->ty === $n9->ty;
			} else {
				$tmp24 = false;
			}
		} else {
			$tmp24 = true;
		}
		$this->assertTrue($tmp24, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 75, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$this18 = new hxmath_math_Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0);
		$n10 = $this18;
		$self10 = $mat32;
		$this19 = new hxmath_math_Matrix3x2Default($self10->a, $self10->b, $self10->c, $self10->d, $self10->tx, $self10->ty);
		$self11 = $this19;
		$self11->a += $n10->a;
		$self11->b += $n10->b;
		$self11->c += $n10->c;
		$self11->d += $n10->d;
		$self11->tx += $n10->tx;
		$self11->ty += $n10->ty;
		$mat32 = $self11;
		$this20 = new hxmath_math_Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0);
		$n11 = $this20;
		$tmp32 = null;
		$tmp33 = null;
		if($self11 === null) {
			$tmp33 = $n11 === null;
		} else {
			$tmp33 = false;
		}
		if(!$tmp33) {
			$tmp34 = null;
			$tmp35 = null;
			$tmp36 = null;
			$tmp37 = null;
			$tmp38 = null;
			$tmp39 = null;
			if($self11 !== null) {
				$tmp39 = $n11 !== null;
			} else {
				$tmp39 = false;
			}
			if($tmp39) {
				$tmp38 = $self11->a === $n11->a;
			} else {
				$tmp38 = false;
			}
			if($tmp38) {
				$tmp37 = $self11->b === $n11->b;
			} else {
				$tmp37 = false;
			}
			if($tmp37) {
				$tmp36 = $self11->c === $n11->c;
			} else {
				$tmp36 = false;
			}
			if($tmp36) {
				$tmp35 = $self11->d === $n11->d;
			} else {
				$tmp35 = false;
			}
			if($tmp35) {
				$tmp34 = $self11->tx === $n11->tx;
			} else {
				$tmp34 = false;
			}
			if($tmp34) {
				$tmp32 = $self11->ty === $n11->ty;
			} else {
				$tmp32 = false;
			}
		} else {
			$tmp32 = true;
		}
		$this->assertTrue($tmp32, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 77, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$this21 = new hxmath_math_Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0);
		$n12 = $this21;
		$self12 = $self11;
		$this22 = new hxmath_math_Matrix3x2Default($self12->a, $self12->b, $self12->c, $self12->d, $self12->tx, $self12->ty);
		$self13 = $this22;
		$self13->a -= $n12->a;
		$self13->b -= $n12->b;
		$self13->c -= $n12->c;
		$self13->d -= $n12->d;
		$self13->tx -= $n12->tx;
		$self13->ty -= $n12->ty;
		$this23 = new hxmath_math_Matrix3x2Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		$n13 = $this23;
		$tmp40 = null;
		$tmp41 = null;
		if($self13 === null) {
			$tmp41 = $n13 === null;
		} else {
			$tmp41 = false;
		}
		if(!$tmp41) {
			$tmp42 = null;
			$tmp43 = null;
			$tmp44 = null;
			$tmp45 = null;
			$tmp46 = null;
			$tmp47 = null;
			if($self13 !== null) {
				$tmp47 = $n13 !== null;
			} else {
				$tmp47 = false;
			}
			if($tmp47) {
				$tmp46 = $self13->a === $n13->a;
			} else {
				$tmp46 = false;
			}
			if($tmp46) {
				$tmp45 = $self13->b === $n13->b;
			} else {
				$tmp45 = false;
			}
			if($tmp45) {
				$tmp44 = $self13->c === $n13->c;
			} else {
				$tmp44 = false;
			}
			if($tmp44) {
				$tmp43 = $self13->d === $n13->d;
			} else {
				$tmp43 = false;
			}
			if($tmp43) {
				$tmp42 = $self13->tx === $n13->tx;
			} else {
				$tmp42 = false;
			}
			if($tmp42) {
				$tmp40 = $self13->ty === $n13->ty;
			} else {
				$tmp40 = false;
			}
		} else {
			$tmp40 = true;
		}
		$this->assertTrue($tmp40, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 78, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$this24 = new hxmath_math_Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0);
		$n14 = $this24;
		$self14 = $self11;
		$this25 = new hxmath_math_Matrix3x2Default($self14->a, $self14->b, $self14->c, $self14->d, $self14->tx, $self14->ty);
		$self15 = $this25;
		$self15->a -= $n14->a;
		$self15->b -= $n14->b;
		$self15->c -= $n14->c;
		$self15->d -= $n14->d;
		$self15->tx -= $n14->tx;
		$self15->ty -= $n14->ty;
		$mat32 = $self15;
		$this26 = new hxmath_math_Matrix3x2Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		$n15 = $this26;
		$tmp48 = null;
		$tmp49 = null;
		if($self15 === null) {
			$tmp49 = $n15 === null;
		} else {
			$tmp49 = false;
		}
		if(!$tmp49) {
			$tmp50 = null;
			$tmp51 = null;
			$tmp52 = null;
			$tmp53 = null;
			$tmp54 = null;
			$tmp55 = null;
			if($self15 !== null) {
				$tmp55 = $n15 !== null;
			} else {
				$tmp55 = false;
			}
			if($tmp55) {
				$tmp54 = $self15->a === $n15->a;
			} else {
				$tmp54 = false;
			}
			if($tmp54) {
				$tmp53 = $self15->b === $n15->b;
			} else {
				$tmp53 = false;
			}
			if($tmp53) {
				$tmp52 = $self15->c === $n15->c;
			} else {
				$tmp52 = false;
			}
			if($tmp52) {
				$tmp51 = $self15->d === $n15->d;
			} else {
				$tmp51 = false;
			}
			if($tmp51) {
				$tmp50 = $self15->tx === $n15->tx;
			} else {
				$tmp50 = false;
			}
			if($tmp50) {
				$tmp48 = $self15->ty === $n15->ty;
			} else {
				$tmp48 = false;
			}
		} else {
			$tmp48 = true;
		}
		$this->assertTrue($tmp48, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 80, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$this27 = new hxmath_math_Matrix3x3Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		$mat33 = $this27;
		$this28 = new hxmath_math_Matrix3x3Default(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0);
		$b = $this28;
		$self16 = $mat33;
		$this29 = new hxmath_math_Matrix3x3Default($self16->m00, $self16->m10, $self16->m20, $self16->m01, $self16->m11, $self16->m21, $self16->m02, $self16->m12, $self16->m22);
		$self17 = $this29;
		$self17->m00 += $b->m00;
		$self17->m10 += $b->m10;
		$self17->m20 += $b->m20;
		$self17->m01 += $b->m01;
		$self17->m11 += $b->m11;
		$self17->m21 += $b->m21;
		$self17->m02 += $b->m02;
		$self17->m12 += $b->m12;
		$self17->m22 += $b->m22;
		$this30 = new hxmath_math_Matrix3x3Default(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0);
		$b1 = $this30;
		$tmp56 = null;
		$tmp57 = null;
		if($self17 === null) {
			$tmp57 = $b1 === null;
		} else {
			$tmp57 = false;
		}
		if(!$tmp57) {
			$tmp58 = null;
			$tmp59 = null;
			$tmp60 = null;
			$tmp61 = null;
			$tmp62 = null;
			$tmp63 = null;
			$tmp64 = null;
			$tmp65 = null;
			$tmp66 = null;
			if($self17 !== null) {
				$tmp66 = $b1 !== null;
			} else {
				$tmp66 = false;
			}
			if($tmp66) {
				$tmp65 = $self17->m00 === $b1->m00;
			} else {
				$tmp65 = false;
			}
			if($tmp65) {
				$tmp64 = $self17->m10 === $b1->m10;
			} else {
				$tmp64 = false;
			}
			if($tmp64) {
				$tmp63 = $self17->m20 === $b1->m20;
			} else {
				$tmp63 = false;
			}
			if($tmp63) {
				$tmp62 = $self17->m01 === $b1->m01;
			} else {
				$tmp62 = false;
			}
			if($tmp62) {
				$tmp61 = $self17->m11 === $b1->m11;
			} else {
				$tmp61 = false;
			}
			if($tmp61) {
				$tmp60 = $self17->m21 === $b1->m21;
			} else {
				$tmp60 = false;
			}
			if($tmp60) {
				$tmp59 = $self17->m02 === $b1->m02;
			} else {
				$tmp59 = false;
			}
			if($tmp59) {
				$tmp58 = $self17->m12 === $b1->m12;
			} else {
				$tmp58 = false;
			}
			if($tmp58) {
				$tmp56 = $self17->m22 === $b1->m22;
			} else {
				$tmp56 = false;
			}
		} else {
			$tmp56 = true;
		}
		$this->assertTrue($tmp56, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 83, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$this31 = new hxmath_math_Matrix3x3Default(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0);
		$b2 = $this31;
		$self18 = $mat33;
		$this32 = new hxmath_math_Matrix3x3Default($self18->m00, $self18->m10, $self18->m20, $self18->m01, $self18->m11, $self18->m21, $self18->m02, $self18->m12, $self18->m22);
		$self19 = $this32;
		$self19->m00 += $b2->m00;
		$self19->m10 += $b2->m10;
		$self19->m20 += $b2->m20;
		$self19->m01 += $b2->m01;
		$self19->m11 += $b2->m11;
		$self19->m21 += $b2->m21;
		$self19->m02 += $b2->m02;
		$self19->m12 += $b2->m12;
		$self19->m22 += $b2->m22;
		$mat33 = $self19;
		$this33 = new hxmath_math_Matrix3x3Default(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0);
		$b3 = $this33;
		$tmp67 = null;
		$tmp68 = null;
		if($self19 === null) {
			$tmp68 = $b3 === null;
		} else {
			$tmp68 = false;
		}
		if(!$tmp68) {
			$tmp69 = null;
			$tmp70 = null;
			$tmp71 = null;
			$tmp72 = null;
			$tmp73 = null;
			$tmp74 = null;
			$tmp75 = null;
			$tmp76 = null;
			$tmp77 = null;
			if($self19 !== null) {
				$tmp77 = $b3 !== null;
			} else {
				$tmp77 = false;
			}
			if($tmp77) {
				$tmp76 = $self19->m00 === $b3->m00;
			} else {
				$tmp76 = false;
			}
			if($tmp76) {
				$tmp75 = $self19->m10 === $b3->m10;
			} else {
				$tmp75 = false;
			}
			if($tmp75) {
				$tmp74 = $self19->m20 === $b3->m20;
			} else {
				$tmp74 = false;
			}
			if($tmp74) {
				$tmp73 = $self19->m01 === $b3->m01;
			} else {
				$tmp73 = false;
			}
			if($tmp73) {
				$tmp72 = $self19->m11 === $b3->m11;
			} else {
				$tmp72 = false;
			}
			if($tmp72) {
				$tmp71 = $self19->m21 === $b3->m21;
			} else {
				$tmp71 = false;
			}
			if($tmp71) {
				$tmp70 = $self19->m02 === $b3->m02;
			} else {
				$tmp70 = false;
			}
			if($tmp70) {
				$tmp69 = $self19->m12 === $b3->m12;
			} else {
				$tmp69 = false;
			}
			if($tmp69) {
				$tmp67 = $self19->m22 === $b3->m22;
			} else {
				$tmp67 = false;
			}
		} else {
			$tmp67 = true;
		}
		$this->assertTrue($tmp67, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 85, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$this34 = new hxmath_math_Matrix3x3Default(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0);
		$b4 = $this34;
		$self20 = $self19;
		$this35 = new hxmath_math_Matrix3x3Default($self20->m00, $self20->m10, $self20->m20, $self20->m01, $self20->m11, $self20->m21, $self20->m02, $self20->m12, $self20->m22);
		$self21 = $this35;
		$self21->m00 -= $b4->m00;
		$self21->m10 -= $b4->m10;
		$self21->m20 -= $b4->m20;
		$self21->m01 -= $b4->m01;
		$self21->m11 -= $b4->m11;
		$self21->m21 -= $b4->m21;
		$self21->m02 -= $b4->m02;
		$self21->m12 -= $b4->m12;
		$self21->m22 -= $b4->m22;
		$this36 = new hxmath_math_Matrix3x3Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		$b5 = $this36;
		$tmp78 = null;
		$tmp79 = null;
		if($self21 === null) {
			$tmp79 = $b5 === null;
		} else {
			$tmp79 = false;
		}
		if(!$tmp79) {
			$tmp80 = null;
			$tmp81 = null;
			$tmp82 = null;
			$tmp83 = null;
			$tmp84 = null;
			$tmp85 = null;
			$tmp86 = null;
			$tmp87 = null;
			$tmp88 = null;
			if($self21 !== null) {
				$tmp88 = $b5 !== null;
			} else {
				$tmp88 = false;
			}
			if($tmp88) {
				$tmp87 = $self21->m00 === $b5->m00;
			} else {
				$tmp87 = false;
			}
			if($tmp87) {
				$tmp86 = $self21->m10 === $b5->m10;
			} else {
				$tmp86 = false;
			}
			if($tmp86) {
				$tmp85 = $self21->m20 === $b5->m20;
			} else {
				$tmp85 = false;
			}
			if($tmp85) {
				$tmp84 = $self21->m01 === $b5->m01;
			} else {
				$tmp84 = false;
			}
			if($tmp84) {
				$tmp83 = $self21->m11 === $b5->m11;
			} else {
				$tmp83 = false;
			}
			if($tmp83) {
				$tmp82 = $self21->m21 === $b5->m21;
			} else {
				$tmp82 = false;
			}
			if($tmp82) {
				$tmp81 = $self21->m02 === $b5->m02;
			} else {
				$tmp81 = false;
			}
			if($tmp81) {
				$tmp80 = $self21->m12 === $b5->m12;
			} else {
				$tmp80 = false;
			}
			if($tmp80) {
				$tmp78 = $self21->m22 === $b5->m22;
			} else {
				$tmp78 = false;
			}
		} else {
			$tmp78 = true;
		}
		$this->assertTrue($tmp78, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 86, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$this37 = new hxmath_math_Matrix3x3Default(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0);
		$b6 = $this37;
		$self22 = $self19;
		$this38 = new hxmath_math_Matrix3x3Default($self22->m00, $self22->m10, $self22->m20, $self22->m01, $self22->m11, $self22->m21, $self22->m02, $self22->m12, $self22->m22);
		$self23 = $this38;
		$self23->m00 -= $b6->m00;
		$self23->m10 -= $b6->m10;
		$self23->m20 -= $b6->m20;
		$self23->m01 -= $b6->m01;
		$self23->m11 -= $b6->m11;
		$self23->m21 -= $b6->m21;
		$self23->m02 -= $b6->m02;
		$self23->m12 -= $b6->m12;
		$self23->m22 -= $b6->m22;
		$mat33 = $self23;
		$this39 = new hxmath_math_Matrix3x3Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		$b7 = $this39;
		$tmp89 = null;
		$tmp90 = null;
		if($self23 === null) {
			$tmp90 = $b7 === null;
		} else {
			$tmp90 = false;
		}
		if(!$tmp90) {
			$tmp91 = null;
			$tmp92 = null;
			$tmp93 = null;
			$tmp94 = null;
			$tmp95 = null;
			$tmp96 = null;
			$tmp97 = null;
			$tmp98 = null;
			$tmp99 = null;
			if($self23 !== null) {
				$tmp99 = $b7 !== null;
			} else {
				$tmp99 = false;
			}
			if($tmp99) {
				$tmp98 = $self23->m00 === $b7->m00;
			} else {
				$tmp98 = false;
			}
			if($tmp98) {
				$tmp97 = $self23->m10 === $b7->m10;
			} else {
				$tmp97 = false;
			}
			if($tmp97) {
				$tmp96 = $self23->m20 === $b7->m20;
			} else {
				$tmp96 = false;
			}
			if($tmp96) {
				$tmp95 = $self23->m01 === $b7->m01;
			} else {
				$tmp95 = false;
			}
			if($tmp95) {
				$tmp94 = $self23->m11 === $b7->m11;
			} else {
				$tmp94 = false;
			}
			if($tmp94) {
				$tmp93 = $self23->m21 === $b7->m21;
			} else {
				$tmp93 = false;
			}
			if($tmp93) {
				$tmp92 = $self23->m02 === $b7->m02;
			} else {
				$tmp92 = false;
			}
			if($tmp92) {
				$tmp91 = $self23->m12 === $b7->m12;
			} else {
				$tmp91 = false;
			}
			if($tmp91) {
				$tmp89 = $self23->m22 === $b7->m22;
			} else {
				$tmp89 = false;
			}
		} else {
			$tmp89 = true;
		}
		$this->assertTrue($tmp89, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 88, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$this40 = new hxmath_math_Matrix4x4Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		$mat44 = $this40;
		$this41 = new hxmath_math_Matrix4x4Default(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);
		$b8 = $this41;
		$self24 = $mat44;
		$this42 = new hxmath_math_Matrix4x4Default($self24->m00, $self24->m10, $self24->m20, $self24->m30, $self24->m01, $self24->m11, $self24->m21, $self24->m31, $self24->m02, $self24->m12, $self24->m22, $self24->m32, $self24->m03, $self24->m13, $self24->m23, $self24->m33);
		$self25 = $this42;
		$self25->m00 += $b8->m00;
		$self25->m10 += $b8->m10;
		$self25->m20 += $b8->m20;
		$self25->m30 += $b8->m30;
		$self25->m01 += $b8->m01;
		$self25->m11 += $b8->m11;
		$self25->m21 += $b8->m21;
		$self25->m31 += $b8->m31;
		$self25->m02 += $b8->m02;
		$self25->m12 += $b8->m12;
		$self25->m22 += $b8->m22;
		$self25->m32 += $b8->m32;
		$self25->m03 += $b8->m03;
		$self25->m13 += $b8->m13;
		$self25->m23 += $b8->m23;
		$self25->m33 += $b8->m33;
		$this43 = new hxmath_math_Matrix4x4Default(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);
		$b9 = $this43;
		$tmp100 = null;
		$tmp101 = null;
		if($self25 === null) {
			$tmp101 = $b9 === null;
		} else {
			$tmp101 = false;
		}
		if(!$tmp101) {
			$tmp102 = null;
			$tmp103 = null;
			$tmp104 = null;
			$tmp105 = null;
			$tmp106 = null;
			$tmp107 = null;
			$tmp108 = null;
			$tmp109 = null;
			$tmp110 = null;
			$tmp111 = null;
			$tmp112 = null;
			$tmp113 = null;
			$tmp114 = null;
			$tmp115 = null;
			$tmp116 = null;
			$tmp117 = null;
			if($self25 !== null) {
				$tmp117 = $b9 !== null;
			} else {
				$tmp117 = false;
			}
			if($tmp117) {
				$tmp116 = $self25->m00 === $b9->m00;
			} else {
				$tmp116 = false;
			}
			if($tmp116) {
				$tmp115 = $self25->m10 === $b9->m10;
			} else {
				$tmp115 = false;
			}
			if($tmp115) {
				$tmp114 = $self25->m20 === $b9->m20;
			} else {
				$tmp114 = false;
			}
			if($tmp114) {
				$tmp113 = $self25->m30 === $b9->m30;
			} else {
				$tmp113 = false;
			}
			if($tmp113) {
				$tmp112 = $self25->m01 === $b9->m01;
			} else {
				$tmp112 = false;
			}
			if($tmp112) {
				$tmp111 = $self25->m11 === $b9->m11;
			} else {
				$tmp111 = false;
			}
			if($tmp111) {
				$tmp110 = $self25->m21 === $b9->m21;
			} else {
				$tmp110 = false;
			}
			if($tmp110) {
				$tmp109 = $self25->m31 === $b9->m31;
			} else {
				$tmp109 = false;
			}
			if($tmp109) {
				$tmp108 = $self25->m02 === $b9->m02;
			} else {
				$tmp108 = false;
			}
			if($tmp108) {
				$tmp107 = $self25->m12 === $b9->m12;
			} else {
				$tmp107 = false;
			}
			if($tmp107) {
				$tmp106 = $self25->m22 === $b9->m22;
			} else {
				$tmp106 = false;
			}
			if($tmp106) {
				$tmp105 = $self25->m32 === $b9->m32;
			} else {
				$tmp105 = false;
			}
			if($tmp105) {
				$tmp104 = $self25->m03 === $b9->m03;
			} else {
				$tmp104 = false;
			}
			if($tmp104) {
				$tmp103 = $self25->m13 === $b9->m13;
			} else {
				$tmp103 = false;
			}
			if($tmp103) {
				$tmp102 = $self25->m23 === $b9->m23;
			} else {
				$tmp102 = false;
			}
			if($tmp102) {
				$tmp100 = $self25->m33 === $b9->m33;
			} else {
				$tmp100 = false;
			}
		} else {
			$tmp100 = true;
		}
		$this->assertTrue($tmp100, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 91, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$this44 = new hxmath_math_Matrix4x4Default(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);
		$b10 = $this44;
		$self26 = $mat44;
		$this45 = new hxmath_math_Matrix4x4Default($self26->m00, $self26->m10, $self26->m20, $self26->m30, $self26->m01, $self26->m11, $self26->m21, $self26->m31, $self26->m02, $self26->m12, $self26->m22, $self26->m32, $self26->m03, $self26->m13, $self26->m23, $self26->m33);
		$self27 = $this45;
		$self27->m00 += $b10->m00;
		$self27->m10 += $b10->m10;
		$self27->m20 += $b10->m20;
		$self27->m30 += $b10->m30;
		$self27->m01 += $b10->m01;
		$self27->m11 += $b10->m11;
		$self27->m21 += $b10->m21;
		$self27->m31 += $b10->m31;
		$self27->m02 += $b10->m02;
		$self27->m12 += $b10->m12;
		$self27->m22 += $b10->m22;
		$self27->m32 += $b10->m32;
		$self27->m03 += $b10->m03;
		$self27->m13 += $b10->m13;
		$self27->m23 += $b10->m23;
		$self27->m33 += $b10->m33;
		$mat44 = $self27;
		$this46 = new hxmath_math_Matrix4x4Default(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);
		$b11 = $this46;
		$tmp118 = null;
		$tmp119 = null;
		if($self27 === null) {
			$tmp119 = $b11 === null;
		} else {
			$tmp119 = false;
		}
		if(!$tmp119) {
			$tmp120 = null;
			$tmp121 = null;
			$tmp122 = null;
			$tmp123 = null;
			$tmp124 = null;
			$tmp125 = null;
			$tmp126 = null;
			$tmp127 = null;
			$tmp128 = null;
			$tmp129 = null;
			$tmp130 = null;
			$tmp131 = null;
			$tmp132 = null;
			$tmp133 = null;
			$tmp134 = null;
			$tmp135 = null;
			if($self27 !== null) {
				$tmp135 = $b11 !== null;
			} else {
				$tmp135 = false;
			}
			if($tmp135) {
				$tmp134 = $self27->m00 === $b11->m00;
			} else {
				$tmp134 = false;
			}
			if($tmp134) {
				$tmp133 = $self27->m10 === $b11->m10;
			} else {
				$tmp133 = false;
			}
			if($tmp133) {
				$tmp132 = $self27->m20 === $b11->m20;
			} else {
				$tmp132 = false;
			}
			if($tmp132) {
				$tmp131 = $self27->m30 === $b11->m30;
			} else {
				$tmp131 = false;
			}
			if($tmp131) {
				$tmp130 = $self27->m01 === $b11->m01;
			} else {
				$tmp130 = false;
			}
			if($tmp130) {
				$tmp129 = $self27->m11 === $b11->m11;
			} else {
				$tmp129 = false;
			}
			if($tmp129) {
				$tmp128 = $self27->m21 === $b11->m21;
			} else {
				$tmp128 = false;
			}
			if($tmp128) {
				$tmp127 = $self27->m31 === $b11->m31;
			} else {
				$tmp127 = false;
			}
			if($tmp127) {
				$tmp126 = $self27->m02 === $b11->m02;
			} else {
				$tmp126 = false;
			}
			if($tmp126) {
				$tmp125 = $self27->m12 === $b11->m12;
			} else {
				$tmp125 = false;
			}
			if($tmp125) {
				$tmp124 = $self27->m22 === $b11->m22;
			} else {
				$tmp124 = false;
			}
			if($tmp124) {
				$tmp123 = $self27->m32 === $b11->m32;
			} else {
				$tmp123 = false;
			}
			if($tmp123) {
				$tmp122 = $self27->m03 === $b11->m03;
			} else {
				$tmp122 = false;
			}
			if($tmp122) {
				$tmp121 = $self27->m13 === $b11->m13;
			} else {
				$tmp121 = false;
			}
			if($tmp121) {
				$tmp120 = $self27->m23 === $b11->m23;
			} else {
				$tmp120 = false;
			}
			if($tmp120) {
				$tmp118 = $self27->m33 === $b11->m33;
			} else {
				$tmp118 = false;
			}
		} else {
			$tmp118 = true;
		}
		$this->assertTrue($tmp118, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 93, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$this47 = new hxmath_math_Matrix4x4Default(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);
		$b12 = $this47;
		$self28 = $self27;
		$this48 = new hxmath_math_Matrix4x4Default($self28->m00, $self28->m10, $self28->m20, $self28->m30, $self28->m01, $self28->m11, $self28->m21, $self28->m31, $self28->m02, $self28->m12, $self28->m22, $self28->m32, $self28->m03, $self28->m13, $self28->m23, $self28->m33);
		$self29 = $this48;
		$self29->m00 -= $b12->m00;
		$self29->m10 -= $b12->m10;
		$self29->m20 -= $b12->m20;
		$self29->m30 -= $b12->m30;
		$self29->m01 -= $b12->m01;
		$self29->m11 -= $b12->m11;
		$self29->m21 -= $b12->m21;
		$self29->m31 -= $b12->m31;
		$self29->m02 -= $b12->m02;
		$self29->m12 -= $b12->m12;
		$self29->m22 -= $b12->m22;
		$self29->m32 -= $b12->m32;
		$self29->m03 -= $b12->m03;
		$self29->m13 -= $b12->m13;
		$self29->m23 -= $b12->m23;
		$self29->m33 -= $b12->m33;
		$this49 = new hxmath_math_Matrix4x4Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		$b13 = $this49;
		$tmp136 = null;
		$tmp137 = null;
		if($self29 === null) {
			$tmp137 = $b13 === null;
		} else {
			$tmp137 = false;
		}
		if(!$tmp137) {
			$tmp138 = null;
			$tmp139 = null;
			$tmp140 = null;
			$tmp141 = null;
			$tmp142 = null;
			$tmp143 = null;
			$tmp144 = null;
			$tmp145 = null;
			$tmp146 = null;
			$tmp147 = null;
			$tmp148 = null;
			$tmp149 = null;
			$tmp150 = null;
			$tmp151 = null;
			$tmp152 = null;
			$tmp153 = null;
			if($self29 !== null) {
				$tmp153 = $b13 !== null;
			} else {
				$tmp153 = false;
			}
			if($tmp153) {
				$tmp152 = $self29->m00 === $b13->m00;
			} else {
				$tmp152 = false;
			}
			if($tmp152) {
				$tmp151 = $self29->m10 === $b13->m10;
			} else {
				$tmp151 = false;
			}
			if($tmp151) {
				$tmp150 = $self29->m20 === $b13->m20;
			} else {
				$tmp150 = false;
			}
			if($tmp150) {
				$tmp149 = $self29->m30 === $b13->m30;
			} else {
				$tmp149 = false;
			}
			if($tmp149) {
				$tmp148 = $self29->m01 === $b13->m01;
			} else {
				$tmp148 = false;
			}
			if($tmp148) {
				$tmp147 = $self29->m11 === $b13->m11;
			} else {
				$tmp147 = false;
			}
			if($tmp147) {
				$tmp146 = $self29->m21 === $b13->m21;
			} else {
				$tmp146 = false;
			}
			if($tmp146) {
				$tmp145 = $self29->m31 === $b13->m31;
			} else {
				$tmp145 = false;
			}
			if($tmp145) {
				$tmp144 = $self29->m02 === $b13->m02;
			} else {
				$tmp144 = false;
			}
			if($tmp144) {
				$tmp143 = $self29->m12 === $b13->m12;
			} else {
				$tmp143 = false;
			}
			if($tmp143) {
				$tmp142 = $self29->m22 === $b13->m22;
			} else {
				$tmp142 = false;
			}
			if($tmp142) {
				$tmp141 = $self29->m32 === $b13->m32;
			} else {
				$tmp141 = false;
			}
			if($tmp141) {
				$tmp140 = $self29->m03 === $b13->m03;
			} else {
				$tmp140 = false;
			}
			if($tmp140) {
				$tmp139 = $self29->m13 === $b13->m13;
			} else {
				$tmp139 = false;
			}
			if($tmp139) {
				$tmp138 = $self29->m23 === $b13->m23;
			} else {
				$tmp138 = false;
			}
			if($tmp138) {
				$tmp136 = $self29->m33 === $b13->m33;
			} else {
				$tmp136 = false;
			}
		} else {
			$tmp136 = true;
		}
		$this->assertTrue($tmp136, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 94, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$this50 = new hxmath_math_Matrix4x4Default(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);
		$b14 = $this50;
		$self30 = $self27;
		$this51 = new hxmath_math_Matrix4x4Default($self30->m00, $self30->m10, $self30->m20, $self30->m30, $self30->m01, $self30->m11, $self30->m21, $self30->m31, $self30->m02, $self30->m12, $self30->m22, $self30->m32, $self30->m03, $self30->m13, $self30->m23, $self30->m33);
		$self31 = $this51;
		$self31->m00 -= $b14->m00;
		$self31->m10 -= $b14->m10;
		$self31->m20 -= $b14->m20;
		$self31->m30 -= $b14->m30;
		$self31->m01 -= $b14->m01;
		$self31->m11 -= $b14->m11;
		$self31->m21 -= $b14->m21;
		$self31->m31 -= $b14->m31;
		$self31->m02 -= $b14->m02;
		$self31->m12 -= $b14->m12;
		$self31->m22 -= $b14->m22;
		$self31->m32 -= $b14->m32;
		$self31->m03 -= $b14->m03;
		$self31->m13 -= $b14->m13;
		$self31->m23 -= $b14->m23;
		$self31->m33 -= $b14->m33;
		$mat44 = $self31;
		$this52 = new hxmath_math_Matrix4x4Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		$b15 = $this52;
		$tmp154 = null;
		$tmp155 = null;
		if($self31 === null) {
			$tmp155 = $b15 === null;
		} else {
			$tmp155 = false;
		}
		if(!$tmp155) {
			$tmp156 = null;
			$tmp157 = null;
			$tmp158 = null;
			$tmp159 = null;
			$tmp160 = null;
			$tmp161 = null;
			$tmp162 = null;
			$tmp163 = null;
			$tmp164 = null;
			$tmp165 = null;
			$tmp166 = null;
			$tmp167 = null;
			$tmp168 = null;
			$tmp169 = null;
			$tmp170 = null;
			$tmp171 = null;
			if($self31 !== null) {
				$tmp171 = $b15 !== null;
			} else {
				$tmp171 = false;
			}
			if($tmp171) {
				$tmp170 = $self31->m00 === $b15->m00;
			} else {
				$tmp170 = false;
			}
			if($tmp170) {
				$tmp169 = $self31->m10 === $b15->m10;
			} else {
				$tmp169 = false;
			}
			if($tmp169) {
				$tmp168 = $self31->m20 === $b15->m20;
			} else {
				$tmp168 = false;
			}
			if($tmp168) {
				$tmp167 = $self31->m30 === $b15->m30;
			} else {
				$tmp167 = false;
			}
			if($tmp167) {
				$tmp166 = $self31->m01 === $b15->m01;
			} else {
				$tmp166 = false;
			}
			if($tmp166) {
				$tmp165 = $self31->m11 === $b15->m11;
			} else {
				$tmp165 = false;
			}
			if($tmp165) {
				$tmp164 = $self31->m21 === $b15->m21;
			} else {
				$tmp164 = false;
			}
			if($tmp164) {
				$tmp163 = $self31->m31 === $b15->m31;
			} else {
				$tmp163 = false;
			}
			if($tmp163) {
				$tmp162 = $self31->m02 === $b15->m02;
			} else {
				$tmp162 = false;
			}
			if($tmp162) {
				$tmp161 = $self31->m12 === $b15->m12;
			} else {
				$tmp161 = false;
			}
			if($tmp161) {
				$tmp160 = $self31->m22 === $b15->m22;
			} else {
				$tmp160 = false;
			}
			if($tmp160) {
				$tmp159 = $self31->m32 === $b15->m32;
			} else {
				$tmp159 = false;
			}
			if($tmp159) {
				$tmp158 = $self31->m03 === $b15->m03;
			} else {
				$tmp158 = false;
			}
			if($tmp158) {
				$tmp157 = $self31->m13 === $b15->m13;
			} else {
				$tmp157 = false;
			}
			if($tmp157) {
				$tmp156 = $self31->m23 === $b15->m23;
			} else {
				$tmp156 = false;
			}
			if($tmp156) {
				$tmp154 = $self31->m33 === $b15->m33;
			} else {
				$tmp154 = false;
			}
		} else {
			$tmp154 = true;
		}
		$this->assertTrue($tmp154, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 96, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$this53 = new hxmath_math_Vector2Default(0.0, 0.0);
		$vec2 = $this53;
		$this54 = new hxmath_math_Vector2Default(1.0, 0.0);
		$b16 = $this54;
		$self32 = $vec2;
		$this55 = new hxmath_math_Vector2Default($self32->x, $self32->y);
		$self33 = $this55;
		$self33->x += $b16->x;
		$self33->y += $b16->y;
		$this56 = new hxmath_math_Vector2Default(1.0, 0.0);
		$b17 = $this56;
		$tmp172 = null;
		$tmp173 = null;
		if($self33 === null) {
			$tmp173 = $b17 === null;
		} else {
			$tmp173 = false;
		}
		if(!$tmp173) {
			$tmp174 = null;
			$tmp175 = null;
			if($self33 !== null) {
				$tmp175 = $b17 !== null;
			} else {
				$tmp175 = false;
			}
			if($tmp175) {
				$tmp174 = $self33->x === $b17->x;
			} else {
				$tmp174 = false;
			}
			if($tmp174) {
				$tmp172 = $self33->y === $b17->y;
			} else {
				$tmp172 = false;
			}
		} else {
			$tmp172 = true;
		}
		$this->assertTrue($tmp172, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 99, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$this57 = new hxmath_math_Vector2Default(1.0, 0.0);
		$b18 = $this57;
		$self34 = $vec2;
		$this58 = new hxmath_math_Vector2Default($self34->x, $self34->y);
		$self35 = $this58;
		$self35->x += $b18->x;
		$self35->y += $b18->y;
		$vec2 = $self35;
		$this59 = new hxmath_math_Vector2Default(1.0, 0.0);
		$b19 = $this59;
		$tmp176 = null;
		$tmp177 = null;
		if($self35 === null) {
			$tmp177 = $b19 === null;
		} else {
			$tmp177 = false;
		}
		if(!$tmp177) {
			$tmp178 = null;
			$tmp179 = null;
			if($self35 !== null) {
				$tmp179 = $b19 !== null;
			} else {
				$tmp179 = false;
			}
			if($tmp179) {
				$tmp178 = $self35->x === $b19->x;
			} else {
				$tmp178 = false;
			}
			if($tmp178) {
				$tmp176 = $self35->y === $b19->y;
			} else {
				$tmp176 = false;
			}
		} else {
			$tmp176 = true;
		}
		$this->assertTrue($tmp176, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 101, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$this60 = new hxmath_math_Vector2Default(1.0, 0.0);
		$b20 = $this60;
		$self36 = $self35;
		$this61 = new hxmath_math_Vector2Default($self36->x, $self36->y);
		$self37 = $this61;
		$self37->x -= $b20->x;
		$self37->y -= $b20->y;
		$this62 = new hxmath_math_Vector2Default(0.0, 0.0);
		$b21 = $this62;
		$tmp180 = null;
		$tmp181 = null;
		if($self37 === null) {
			$tmp181 = $b21 === null;
		} else {
			$tmp181 = false;
		}
		if(!$tmp181) {
			$tmp182 = null;
			$tmp183 = null;
			if($self37 !== null) {
				$tmp183 = $b21 !== null;
			} else {
				$tmp183 = false;
			}
			if($tmp183) {
				$tmp182 = $self37->x === $b21->x;
			} else {
				$tmp182 = false;
			}
			if($tmp182) {
				$tmp180 = $self37->y === $b21->y;
			} else {
				$tmp180 = false;
			}
		} else {
			$tmp180 = true;
		}
		$this->assertTrue($tmp180, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 102, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$this63 = new hxmath_math_Vector2Default(1.0, 0.0);
		$b22 = $this63;
		$self38 = $self35;
		$this64 = new hxmath_math_Vector2Default($self38->x, $self38->y);
		$self39 = $this64;
		$self39->x -= $b22->x;
		$self39->y -= $b22->y;
		$vec2 = $self39;
		$this65 = new hxmath_math_Vector2Default(0.0, 0.0);
		$b23 = $this65;
		$tmp184 = null;
		$tmp185 = null;
		if($self39 === null) {
			$tmp185 = $b23 === null;
		} else {
			$tmp185 = false;
		}
		if(!$tmp185) {
			$tmp186 = null;
			$tmp187 = null;
			if($self39 !== null) {
				$tmp187 = $b23 !== null;
			} else {
				$tmp187 = false;
			}
			if($tmp187) {
				$tmp186 = $self39->x === $b23->x;
			} else {
				$tmp186 = false;
			}
			if($tmp186) {
				$tmp184 = $self39->y === $b23->y;
			} else {
				$tmp184 = false;
			}
		} else {
			$tmp184 = true;
		}
		$this->assertTrue($tmp184, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 104, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$this66 = new hxmath_math_Vector3Default(0.0, 0.0, 0.0);
		$vec3 = $this66;
		$this67 = new hxmath_math_Vector3Default(1.0, 0.0, 0.0);
		$b24 = $this67;
		$self40 = $vec3;
		$this68 = new hxmath_math_Vector3Default($self40->x, $self40->y, $self40->z);
		$self41 = $this68;
		$self41->x += $b24->x;
		$self41->y += $b24->y;
		$self41->z += $b24->z;
		$this69 = new hxmath_math_Vector3Default(1.0, 0.0, 0.0);
		$b25 = $this69;
		$tmp188 = null;
		$tmp189 = null;
		if($self41 === null) {
			$tmp189 = $b25 === null;
		} else {
			$tmp189 = false;
		}
		if(!$tmp189) {
			$tmp190 = null;
			$tmp191 = null;
			$tmp192 = null;
			if($self41 !== null) {
				$tmp192 = $b25 !== null;
			} else {
				$tmp192 = false;
			}
			if($tmp192) {
				$tmp191 = $self41->x === $b25->x;
			} else {
				$tmp191 = false;
			}
			if($tmp191) {
				$tmp190 = $self41->y === $b25->y;
			} else {
				$tmp190 = false;
			}
			if($tmp190) {
				$tmp188 = $self41->z === $b25->z;
			} else {
				$tmp188 = false;
			}
		} else {
			$tmp188 = true;
		}
		$this->assertTrue($tmp188, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 107, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$this70 = new hxmath_math_Vector3Default(1.0, 0.0, 0.0);
		$b26 = $this70;
		$self42 = $vec3;
		$this71 = new hxmath_math_Vector3Default($self42->x, $self42->y, $self42->z);
		$self43 = $this71;
		$self43->x += $b26->x;
		$self43->y += $b26->y;
		$self43->z += $b26->z;
		$vec3 = $self43;
		$this72 = new hxmath_math_Vector3Default(1.0, 0.0, 0.0);
		$b27 = $this72;
		$tmp193 = null;
		$tmp194 = null;
		if($self43 === null) {
			$tmp194 = $b27 === null;
		} else {
			$tmp194 = false;
		}
		if(!$tmp194) {
			$tmp195 = null;
			$tmp196 = null;
			$tmp197 = null;
			if($self43 !== null) {
				$tmp197 = $b27 !== null;
			} else {
				$tmp197 = false;
			}
			if($tmp197) {
				$tmp196 = $self43->x === $b27->x;
			} else {
				$tmp196 = false;
			}
			if($tmp196) {
				$tmp195 = $self43->y === $b27->y;
			} else {
				$tmp195 = false;
			}
			if($tmp195) {
				$tmp193 = $self43->z === $b27->z;
			} else {
				$tmp193 = false;
			}
		} else {
			$tmp193 = true;
		}
		$this->assertTrue($tmp193, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 109, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$this73 = new hxmath_math_Vector3Default(1.0, 0.0, 0.0);
		$b28 = $this73;
		$self44 = $self43;
		$this74 = new hxmath_math_Vector3Default($self44->x, $self44->y, $self44->z);
		$self45 = $this74;
		$self45->x -= $b28->x;
		$self45->y -= $b28->y;
		$self45->z -= $b28->z;
		$this75 = new hxmath_math_Vector3Default(0.0, 0.0, 0.0);
		$b29 = $this75;
		$tmp198 = null;
		$tmp199 = null;
		if($self45 === null) {
			$tmp199 = $b29 === null;
		} else {
			$tmp199 = false;
		}
		if(!$tmp199) {
			$tmp200 = null;
			$tmp201 = null;
			$tmp202 = null;
			if($self45 !== null) {
				$tmp202 = $b29 !== null;
			} else {
				$tmp202 = false;
			}
			if($tmp202) {
				$tmp201 = $self45->x === $b29->x;
			} else {
				$tmp201 = false;
			}
			if($tmp201) {
				$tmp200 = $self45->y === $b29->y;
			} else {
				$tmp200 = false;
			}
			if($tmp200) {
				$tmp198 = $self45->z === $b29->z;
			} else {
				$tmp198 = false;
			}
		} else {
			$tmp198 = true;
		}
		$this->assertTrue($tmp198, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 110, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$this76 = new hxmath_math_Vector3Default(1.0, 0.0, 0.0);
		$b30 = $this76;
		$self46 = $self43;
		$this77 = new hxmath_math_Vector3Default($self46->x, $self46->y, $self46->z);
		$self47 = $this77;
		$self47->x -= $b30->x;
		$self47->y -= $b30->y;
		$self47->z -= $b30->z;
		$vec3 = $self47;
		$this78 = new hxmath_math_Vector3Default(0.0, 0.0, 0.0);
		$b31 = $this78;
		$tmp203 = null;
		$tmp204 = null;
		if($self47 === null) {
			$tmp204 = $b31 === null;
		} else {
			$tmp204 = false;
		}
		if(!$tmp204) {
			$tmp205 = null;
			$tmp206 = null;
			$tmp207 = null;
			if($self47 !== null) {
				$tmp207 = $b31 !== null;
			} else {
				$tmp207 = false;
			}
			if($tmp207) {
				$tmp206 = $self47->x === $b31->x;
			} else {
				$tmp206 = false;
			}
			if($tmp206) {
				$tmp205 = $self47->y === $b31->y;
			} else {
				$tmp205 = false;
			}
			if($tmp205) {
				$tmp203 = $self47->z === $b31->z;
			} else {
				$tmp203 = false;
			}
		} else {
			$tmp203 = true;
		}
		$this->assertTrue($tmp203, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 112, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$this79 = new hxmath_math_Vector4Default(0.0, 0.0, 0.0, 0.0);
		$vec4 = $this79;
		$this80 = new hxmath_math_Vector4Default(1.0, 0.0, 0.0, 0.0);
		$b32 = $this80;
		$self48 = $vec4;
		$this81 = new hxmath_math_Vector4Default($self48->x, $self48->y, $self48->z, $self48->w);
		$self49 = $this81;
		$self49->x += $b32->x;
		$self49->y += $b32->y;
		$self49->z += $b32->z;
		$self49->w += $b32->w;
		$this82 = new hxmath_math_Vector4Default(1.0, 0.0, 0.0, 0.0);
		$b33 = $this82;
		$tmp208 = null;
		$tmp209 = null;
		if($self49 === null) {
			$tmp209 = $b33 === null;
		} else {
			$tmp209 = false;
		}
		if(!$tmp209) {
			$tmp210 = null;
			$tmp211 = null;
			$tmp212 = null;
			$tmp213 = null;
			if($self49 !== null) {
				$tmp213 = $b33 !== null;
			} else {
				$tmp213 = false;
			}
			if($tmp213) {
				$tmp212 = $self49->x === $b33->x;
			} else {
				$tmp212 = false;
			}
			if($tmp212) {
				$tmp211 = $self49->y === $b33->y;
			} else {
				$tmp211 = false;
			}
			if($tmp211) {
				$tmp210 = $self49->z === $b33->z;
			} else {
				$tmp210 = false;
			}
			if($tmp210) {
				$tmp208 = $self49->w === $b33->w;
			} else {
				$tmp208 = false;
			}
		} else {
			$tmp208 = true;
		}
		$this->assertTrue($tmp208, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 115, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$this83 = new hxmath_math_Vector4Default(1.0, 0.0, 0.0, 0.0);
		$b34 = $this83;
		$self50 = $vec4;
		$this84 = new hxmath_math_Vector4Default($self50->x, $self50->y, $self50->z, $self50->w);
		$self51 = $this84;
		$self51->x += $b34->x;
		$self51->y += $b34->y;
		$self51->z += $b34->z;
		$self51->w += $b34->w;
		$vec4 = $self51;
		$this85 = new hxmath_math_Vector4Default(1.0, 0.0, 0.0, 0.0);
		$b35 = $this85;
		$tmp214 = null;
		$tmp215 = null;
		if($self51 === null) {
			$tmp215 = $b35 === null;
		} else {
			$tmp215 = false;
		}
		if(!$tmp215) {
			$tmp216 = null;
			$tmp217 = null;
			$tmp218 = null;
			$tmp219 = null;
			if($self51 !== null) {
				$tmp219 = $b35 !== null;
			} else {
				$tmp219 = false;
			}
			if($tmp219) {
				$tmp218 = $self51->x === $b35->x;
			} else {
				$tmp218 = false;
			}
			if($tmp218) {
				$tmp217 = $self51->y === $b35->y;
			} else {
				$tmp217 = false;
			}
			if($tmp217) {
				$tmp216 = $self51->z === $b35->z;
			} else {
				$tmp216 = false;
			}
			if($tmp216) {
				$tmp214 = $self51->w === $b35->w;
			} else {
				$tmp214 = false;
			}
		} else {
			$tmp214 = true;
		}
		$this->assertTrue($tmp214, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 117, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$this86 = new hxmath_math_Vector4Default(1.0, 0.0, 0.0, 0.0);
		$b36 = $this86;
		$self52 = $self51;
		$this87 = new hxmath_math_Vector4Default($self52->x, $self52->y, $self52->z, $self52->w);
		$self53 = $this87;
		$self53->x -= $b36->x;
		$self53->y -= $b36->y;
		$self53->z -= $b36->z;
		$self53->w -= $b36->w;
		$this88 = new hxmath_math_Vector4Default(0.0, 0.0, 0.0, 0.0);
		$b37 = $this88;
		$tmp220 = null;
		$tmp221 = null;
		if($self53 === null) {
			$tmp221 = $b37 === null;
		} else {
			$tmp221 = false;
		}
		if(!$tmp221) {
			$tmp222 = null;
			$tmp223 = null;
			$tmp224 = null;
			$tmp225 = null;
			if($self53 !== null) {
				$tmp225 = $b37 !== null;
			} else {
				$tmp225 = false;
			}
			if($tmp225) {
				$tmp224 = $self53->x === $b37->x;
			} else {
				$tmp224 = false;
			}
			if($tmp224) {
				$tmp223 = $self53->y === $b37->y;
			} else {
				$tmp223 = false;
			}
			if($tmp223) {
				$tmp222 = $self53->z === $b37->z;
			} else {
				$tmp222 = false;
			}
			if($tmp222) {
				$tmp220 = $self53->w === $b37->w;
			} else {
				$tmp220 = false;
			}
		} else {
			$tmp220 = true;
		}
		$this->assertTrue($tmp220, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 118, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$this89 = new hxmath_math_Vector4Default(1.0, 0.0, 0.0, 0.0);
		$b38 = $this89;
		$self54 = $self51;
		$this90 = new hxmath_math_Vector4Default($self54->x, $self54->y, $self54->z, $self54->w);
		$self55 = $this90;
		$self55->x -= $b38->x;
		$self55->y -= $b38->y;
		$self55->z -= $b38->z;
		$self55->w -= $b38->w;
		$vec4 = $self55;
		$this91 = new hxmath_math_Vector4Default(0.0, 0.0, 0.0, 0.0);
		$b39 = $this91;
		$tmp226 = null;
		$tmp227 = null;
		if($self55 === null) {
			$tmp227 = $b39 === null;
		} else {
			$tmp227 = false;
		}
		if(!$tmp227) {
			$tmp228 = null;
			$tmp229 = null;
			$tmp230 = null;
			$tmp231 = null;
			if($self55 !== null) {
				$tmp231 = $b39 !== null;
			} else {
				$tmp231 = false;
			}
			if($tmp231) {
				$tmp230 = $self55->x === $b39->x;
			} else {
				$tmp230 = false;
			}
			if($tmp230) {
				$tmp229 = $self55->y === $b39->y;
			} else {
				$tmp229 = false;
			}
			if($tmp229) {
				$tmp228 = $self55->z === $b39->z;
			} else {
				$tmp228 = false;
			}
			if($tmp228) {
				$tmp226 = $self55->w === $b39->w;
			} else {
				$tmp226 = false;
			}
		} else {
			$tmp226 = true;
		}
		$this->assertTrue($tmp226, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 120, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$this92 = new hxmath_math_QuaternionDefault(0, 0, 0, 0);
		$q = $this92;
		$this93 = new hxmath_math_QuaternionDefault(1, 0, 0, 0);
		$b40 = $this93;
		$self56 = $q;
		$this94 = new hxmath_math_QuaternionDefault($self56->s, $self56->x, $self56->y, $self56->z);
		$self57 = $this94;
		$self57->s += $b40->s;
		$self57->x += $b40->x;
		$self57->y += $b40->y;
		$self57->z += $b40->z;
		$this95 = new hxmath_math_QuaternionDefault(1, 0, 0, 0);
		$b41 = $this95;
		$tmp232 = null;
		$tmp233 = null;
		if($self57 === null) {
			$tmp233 = $b41 === null;
		} else {
			$tmp233 = false;
		}
		if(!$tmp233) {
			$tmp234 = null;
			$tmp235 = null;
			$tmp236 = null;
			$tmp237 = null;
			if($self57 !== null) {
				$tmp237 = $b41 !== null;
			} else {
				$tmp237 = false;
			}
			if($tmp237) {
				$tmp236 = $self57->s === $b41->s;
			} else {
				$tmp236 = false;
			}
			if($tmp236) {
				$tmp235 = $self57->x === $b41->x;
			} else {
				$tmp235 = false;
			}
			if($tmp235) {
				$tmp234 = $self57->y === $b41->y;
			} else {
				$tmp234 = false;
			}
			if($tmp234) {
				$tmp232 = $self57->z === $b41->z;
			} else {
				$tmp232 = false;
			}
		} else {
			$tmp232 = true;
		}
		$this->assertTrue($tmp232, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 123, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$this96 = new hxmath_math_QuaternionDefault(1, 0, 0, 0);
		$b42 = $this96;
		$self58 = $q;
		$this97 = new hxmath_math_QuaternionDefault($self58->s, $self58->x, $self58->y, $self58->z);
		$self59 = $this97;
		$self59->s += $b42->s;
		$self59->x += $b42->x;
		$self59->y += $b42->y;
		$self59->z += $b42->z;
		$q = $self59;
		$this98 = new hxmath_math_QuaternionDefault(1, 0, 0, 0);
		$b43 = $this98;
		$tmp238 = null;
		$tmp239 = null;
		if($self59 === null) {
			$tmp239 = $b43 === null;
		} else {
			$tmp239 = false;
		}
		if(!$tmp239) {
			$tmp240 = null;
			$tmp241 = null;
			$tmp242 = null;
			$tmp243 = null;
			if($self59 !== null) {
				$tmp243 = $b43 !== null;
			} else {
				$tmp243 = false;
			}
			if($tmp243) {
				$tmp242 = $self59->s === $b43->s;
			} else {
				$tmp242 = false;
			}
			if($tmp242) {
				$tmp241 = $self59->x === $b43->x;
			} else {
				$tmp241 = false;
			}
			if($tmp241) {
				$tmp240 = $self59->y === $b43->y;
			} else {
				$tmp240 = false;
			}
			if($tmp240) {
				$tmp238 = $self59->z === $b43->z;
			} else {
				$tmp238 = false;
			}
		} else {
			$tmp238 = true;
		}
		$this->assertTrue($tmp238, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 125, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$this99 = new hxmath_math_QuaternionDefault(1, 0, 0, 0);
		$b44 = $this99;
		$self60 = $self59;
		$this100 = new hxmath_math_QuaternionDefault($self60->s, $self60->x, $self60->y, $self60->z);
		$self61 = $this100;
		$self61->s -= $b44->s;
		$self61->x -= $b44->x;
		$self61->y -= $b44->y;
		$self61->z -= $b44->z;
		$this101 = new hxmath_math_QuaternionDefault(0, 0, 0, 0);
		$b45 = $this101;
		$tmp244 = null;
		$tmp245 = null;
		if($self61 === null) {
			$tmp245 = $b45 === null;
		} else {
			$tmp245 = false;
		}
		if(!$tmp245) {
			$tmp246 = null;
			$tmp247 = null;
			$tmp248 = null;
			$tmp249 = null;
			if($self61 !== null) {
				$tmp249 = $b45 !== null;
			} else {
				$tmp249 = false;
			}
			if($tmp249) {
				$tmp248 = $self61->s === $b45->s;
			} else {
				$tmp248 = false;
			}
			if($tmp248) {
				$tmp247 = $self61->x === $b45->x;
			} else {
				$tmp247 = false;
			}
			if($tmp247) {
				$tmp246 = $self61->y === $b45->y;
			} else {
				$tmp246 = false;
			}
			if($tmp246) {
				$tmp244 = $self61->z === $b45->z;
			} else {
				$tmp244 = false;
			}
		} else {
			$tmp244 = true;
		}
		$this->assertTrue($tmp244, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 126, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$this102 = new hxmath_math_QuaternionDefault(1, 0, 0, 0);
		$b46 = $this102;
		$self62 = $self59;
		$this103 = new hxmath_math_QuaternionDefault($self62->s, $self62->x, $self62->y, $self62->z);
		$self63 = $this103;
		$self63->s -= $b46->s;
		$self63->x -= $b46->x;
		$self63->y -= $b46->y;
		$self63->z -= $b46->z;
		$q = $self63;
		$this104 = new hxmath_math_QuaternionDefault(0, 0, 0, 0);
		$b47 = $this104;
		$tmp250 = null;
		$tmp251 = null;
		if($self63 === null) {
			$tmp251 = $b47 === null;
		} else {
			$tmp251 = false;
		}
		if(!$tmp251) {
			$tmp252 = null;
			$tmp253 = null;
			$tmp254 = null;
			$tmp255 = null;
			if($self63 !== null) {
				$tmp255 = $b47 !== null;
			} else {
				$tmp255 = false;
			}
			if($tmp255) {
				$tmp254 = $self63->s === $b47->s;
			} else {
				$tmp254 = false;
			}
			if($tmp254) {
				$tmp253 = $self63->x === $b47->x;
			} else {
				$tmp253 = false;
			}
			if($tmp253) {
				$tmp252 = $self63->y === $b47->y;
			} else {
				$tmp252 = false;
			}
			if($tmp252) {
				$tmp250 = $self63->z === $b47->z;
			} else {
				$tmp250 = false;
			}
		} else {
			$tmp250 = true;
		}
		$this->assertTrue($tmp250, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 128, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$intVec2 = hxmath_math__IntVector2_IntVector2_Impl_::_new(0, 0);
		$b48 = hxmath_math__IntVector2_IntVector2_Impl_::_new(1, 0);
		$self64 = $intVec2;
		$self65 = hxmath_math__IntVector2_IntVector2_Impl_::_new($self64->x, $self64->y);
		$self65->x += $b48->x;
		$self65->y += $b48->y;
		$b49 = hxmath_math__IntVector2_IntVector2_Impl_::_new(1, 0);
		$tmp256 = null;
		$tmp257 = null;
		if($self65 === null) {
			$tmp257 = $b49 === null;
		} else {
			$tmp257 = false;
		}
		if(!$tmp257) {
			$tmp258 = null;
			$tmp259 = null;
			if($self65 !== null) {
				$tmp259 = $b49 !== null;
			} else {
				$tmp259 = false;
			}
			if($tmp259) {
				$tmp258 = $self65->x === $b49->x;
			} else {
				$tmp258 = false;
			}
			if($tmp258) {
				$tmp256 = $self65->y === $b49->y;
			} else {
				$tmp256 = false;
			}
		} else {
			$tmp256 = true;
		}
		$this->assertTrue($tmp256, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 131, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$b50 = hxmath_math__IntVector2_IntVector2_Impl_::_new(1, 0);
		$self66 = $intVec2;
		$self67 = hxmath_math__IntVector2_IntVector2_Impl_::_new($self66->x, $self66->y);
		$self67->x += $b50->x;
		$self67->y += $b50->y;
		$intVec2 = $self67;
		$b51 = hxmath_math__IntVector2_IntVector2_Impl_::_new(1, 0);
		$tmp260 = null;
		$tmp261 = null;
		if($self67 === null) {
			$tmp261 = $b51 === null;
		} else {
			$tmp261 = false;
		}
		if(!$tmp261) {
			$tmp262 = null;
			$tmp263 = null;
			if($self67 !== null) {
				$tmp263 = $b51 !== null;
			} else {
				$tmp263 = false;
			}
			if($tmp263) {
				$tmp262 = $self67->x === $b51->x;
			} else {
				$tmp262 = false;
			}
			if($tmp262) {
				$tmp260 = $self67->y === $b51->y;
			} else {
				$tmp260 = false;
			}
		} else {
			$tmp260 = true;
		}
		$this->assertTrue($tmp260, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 133, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$b52 = hxmath_math__IntVector2_IntVector2_Impl_::_new(1, 0);
		$self68 = $self67;
		$self69 = hxmath_math__IntVector2_IntVector2_Impl_::_new($self68->x, $self68->y);
		$self69->x -= $b52->x;
		$self69->y -= $b52->y;
		$b53 = hxmath_math__IntVector2_IntVector2_Impl_::_new(0, 0);
		$tmp264 = null;
		$tmp265 = null;
		if($self69 === null) {
			$tmp265 = $b53 === null;
		} else {
			$tmp265 = false;
		}
		if(!$tmp265) {
			$tmp266 = null;
			$tmp267 = null;
			if($self69 !== null) {
				$tmp267 = $b53 !== null;
			} else {
				$tmp267 = false;
			}
			if($tmp267) {
				$tmp266 = $self69->x === $b53->x;
			} else {
				$tmp266 = false;
			}
			if($tmp266) {
				$tmp264 = $self69->y === $b53->y;
			} else {
				$tmp264 = false;
			}
		} else {
			$tmp264 = true;
		}
		$this->assertTrue($tmp264, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 134, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$b54 = hxmath_math__IntVector2_IntVector2_Impl_::_new(1, 0);
		$self70 = $self67;
		$self71 = hxmath_math__IntVector2_IntVector2_Impl_::_new($self70->x, $self70->y);
		$self71->x -= $b54->x;
		$self71->y -= $b54->y;
		$intVec2 = $self71;
		$b55 = hxmath_math__IntVector2_IntVector2_Impl_::_new(0, 0);
		$tmp268 = null;
		$tmp269 = null;
		if($self71 === null) {
			$tmp269 = $b55 === null;
		} else {
			$tmp269 = false;
		}
		if(!$tmp269) {
			$tmp270 = null;
			$tmp271 = null;
			if($self71 !== null) {
				$tmp271 = $b55 !== null;
			} else {
				$tmp271 = false;
			}
			if($tmp271) {
				$tmp270 = $self71->x === $b55->x;
			} else {
				$tmp270 = false;
			}
			if($tmp270) {
				$tmp268 = $self71->y === $b55->y;
			} else {
				$tmp268 = false;
			}
		} else {
			$tmp268 = true;
		}
		$this->assertTrue($tmp268, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 136, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$shortVec2 = hxmath_math__ShortVector2_ShortVector2_Impl_::_new(0, 0);
		$b56 = hxmath_math__ShortVector2_ShortVector2_Impl_::_new(1, 0);
		$tmp272 = hxmath_math__ShortVector2_ShortVector2_Impl_::_new(($shortVec2 & 65535) + ($b56 & 65535), ($shortVec2 >> 16 & 65535) + ($b56 >> 16 & 65535));
		$tmp273 = hxmath_math__ShortVector2_ShortVector2_Impl_::_new(1, 0);
		$this->assertTrue($tmp272 === $tmp273, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 139, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$b57 = hxmath_math__ShortVector2_ShortVector2_Impl_::_new(1, 0);
		$shortVec2 = hxmath_math__ShortVector2_ShortVector2_Impl_::_new(($shortVec2 & 65535) + ($b57 & 65535), ($shortVec2 >> 16 & 65535) + ($b57 >> 16 & 65535));
		$tmp274 = hxmath_math__ShortVector2_ShortVector2_Impl_::_new(1, 0);
		$this->assertTrue($shortVec2 === $tmp274, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 141, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$b58 = hxmath_math__ShortVector2_ShortVector2_Impl_::_new(1, 0);
		$tmp275 = hxmath_math__ShortVector2_ShortVector2_Impl_::_new(($shortVec2 & 65535) - ($b58 & 65535), ($shortVec2 >> 16 & 65535) - ($b58 >> 16 & 65535));
		$tmp276 = hxmath_math__ShortVector2_ShortVector2_Impl_::_new(0, 0);
		$this->assertTrue($tmp275 === $tmp276, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 142, "className" => "test.TestStructures", "methodName" => "testAddSub")));
		$b59 = hxmath_math__ShortVector2_ShortVector2_Impl_::_new(1, 0);
		$shortVec2 = hxmath_math__ShortVector2_ShortVector2_Impl_::_new(($shortVec2 & 65535) - ($b59 & 65535), ($shortVec2 >> 16 & 65535) - ($b59 >> 16 & 65535));
		$tmp277 = hxmath_math__ShortVector2_ShortVector2_Impl_::_new(0, 0);
		$this->assertTrue($shortVec2 === $tmp277, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 144, "className" => "test.TestStructures", "methodName" => "testAddSub")));
	}
	public function testDeterminant() {
		$this1 = new hxmath_math_Matrix2x2Default(0.0, 0.0, 0.0, 0.0);
		$self = $this1;
		$tmp = $self->a * $self->d - $self->b * $self->c;
		$this->assertEquals($tmp, 0.0, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 149, "className" => "test.TestStructures", "methodName" => "testDeterminant")));
		$this2 = new hxmath_math_Matrix2x2Default(1.0, 0.0, 0.0, 1.0);
		$self1 = $this2;
		$tmp1 = $self1->a * $self1->d - $self1->b * $self1->c;
		$this->assertEquals($tmp1, 1.0, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 150, "className" => "test.TestStructures", "methodName" => "testDeterminant")));
		{
			$_g = 0;
			while($_g < 10) {
				++$_g;
				$a = $this->randomMatrix2x2(null);
				$b = $this->randomMatrix2x2(null);
				$this3 = new hxmath_math_Matrix2x2Default($a->a * $b->a + $a->b * $b->c, $a->a * $b->b + $a->b * $b->d, $a->c * $b->a + $a->d * $b->c, $a->c * $b->b + $a->d * $b->d);
				$self2 = $this3;
				$tmp2 = $self2->a * $self2->d - $self2->b * $self2->c;
				$tmp3 = $a->a * $a->d - $a->b * $a->c;
				$tmp4 = $b->a * $b->d - $b->b * $b->c;
				$this->assertApproxEquals($tmp2, $tmp3 * $tmp4, null, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 156, "className" => "test.TestStructures", "methodName" => "testDeterminant")));
				unset($tmp4,$tmp3,$tmp2,$this3,$self2,$b,$a);
			}
		}
		$this4 = new hxmath_math_Matrix3x3Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		$self3 = $this4;
		$m00 = $self3->m00;
		$m10 = $self3->m10;
		$m20 = $self3->m20;
		$m01 = $self3->m01;
		$m11 = $self3->m11;
		$m21 = $self3->m21;
		$m02 = $self3->m02;
		$m12 = $self3->m12;
		$m22 = $self3->m22;
		$this->assertEquals($m00 * ($m11 * $m22 - $m21 * $m12) - $m10 * ($m01 * $m22 - $m21 * $m02) + $m20 * ($m01 * $m12 - $m11 * $m02), 0.0, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 159, "className" => "test.TestStructures", "methodName" => "testDeterminant")));
		$this5 = new hxmath_math_Matrix3x3Default(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0);
		$self4 = $this5;
		$m001 = $self4->m00;
		$m101 = $self4->m10;
		$m201 = $self4->m20;
		$m011 = $self4->m01;
		$m111 = $self4->m11;
		$m211 = $self4->m21;
		$m021 = $self4->m02;
		$m121 = $self4->m12;
		$m221 = $self4->m22;
		$this->assertEquals($m001 * ($m111 * $m221 - $m211 * $m121) - $m101 * ($m011 * $m221 - $m211 * $m021) + $m201 * ($m011 * $m121 - $m111 * $m021), 1.0, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 160, "className" => "test.TestStructures", "methodName" => "testDeterminant")));
		{
			$_g1 = 0;
			while($_g1 < 10) {
				++$_g1;
				$a1 = $this->randomMatrix3x3(null);
				$b1 = $this->randomMatrix3x3(null);
				$this6 = new hxmath_math_Matrix3x3Default($a1->m00 * $b1->m00 + $a1->m10 * $b1->m01 + $a1->m20 * $b1->m02, $a1->m00 * $b1->m10 + $a1->m10 * $b1->m11 + $a1->m20 * $b1->m12, $a1->m00 * $b1->m20 + $a1->m10 * $b1->m21 + $a1->m20 * $b1->m22, $a1->m01 * $b1->m00 + $a1->m11 * $b1->m01 + $a1->m21 * $b1->m02, $a1->m01 * $b1->m10 + $a1->m11 * $b1->m11 + $a1->m21 * $b1->m12, $a1->m01 * $b1->m20 + $a1->m11 * $b1->m21 + $a1->m21 * $b1->m22, $a1->m02 * $b1->m00 + $a1->m12 * $b1->m01 + $a1->m22 * $b1->m02, $a1->m02 * $b1->m10 + $a1->m12 * $b1->m11 + $a1->m22 * $b1->m12, $a1->m02 * $b1->m20 + $a1->m12 * $b1->m21 + $a1->m22 * $b1->m22);
				$self5 = $this6;
				$m002 = $self5->m00;
				$m102 = $self5->m10;
				$m202 = $self5->m20;
				$m012 = $self5->m01;
				$m112 = $self5->m11;
				$m212 = $self5->m21;
				$m022 = $self5->m02;
				$m122 = $self5->m12;
				$m222 = $self5->m22;
				$tmp5 = $m002 * ($m112 * $m222 - $m212 * $m122) - $m102 * ($m012 * $m222 - $m212 * $m022) + $m202 * ($m012 * $m122 - $m112 * $m022);
				$m003 = $a1->m00;
				$m103 = $a1->m10;
				$m203 = $a1->m20;
				$m013 = $a1->m01;
				$m113 = $a1->m11;
				$m213 = $a1->m21;
				$m023 = $a1->m02;
				$m123 = $a1->m12;
				$m223 = $a1->m22;
				$tmp6 = $m003 * ($m113 * $m223 - $m213 * $m123) - $m103 * ($m013 * $m223 - $m213 * $m023) + $m203 * ($m013 * $m123 - $m113 * $m023);
				$m004 = $b1->m00;
				$m104 = $b1->m10;
				$m204 = $b1->m20;
				$m014 = $b1->m01;
				$m114 = $b1->m11;
				$m214 = $b1->m21;
				$m024 = $b1->m02;
				$m124 = $b1->m12;
				$m224 = $b1->m22;
				$this->assertApproxEquals($tmp5, $tmp6 * ($m004 * ($m114 * $m224 - $m214 * $m124) - $m104 * ($m014 * $m224 - $m214 * $m024) + $m204 * ($m014 * $m124 - $m114 * $m024)), null, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 166, "className" => "test.TestStructures", "methodName" => "testDeterminant")));
				unset($tmp6,$tmp5,$this6,$self5,$m224,$m223,$m222,$m214,$m213,$m212,$m204,$m203,$m202,$m124,$m123,$m122,$m114,$m113,$m112,$m104,$m103,$m102,$m024,$m023,$m022,$m014,$m013,$m012,$m004,$m003,$m002,$b1,$a1);
			}
		}
		$this7 = new hxmath_math_Matrix4x4Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		$self6 = $this7;
		$m005 = $self6->m00;
		$m105 = $self6->m10;
		$m205 = $self6->m20;
		$m30 = $self6->m30;
		$m015 = $self6->m01;
		$m115 = $self6->m11;
		$m215 = $self6->m21;
		$m31 = $self6->m31;
		$m025 = $self6->m02;
		$m125 = $self6->m12;
		$m225 = $self6->m22;
		$m32 = $self6->m32;
		$m03 = $self6->m03;
		$m13 = $self6->m13;
		$m23 = $self6->m23;
		$m33 = $self6->m33;
		$this->assertEquals($m005 * ($m115 * ($m225 * $m33 - $m32 * $m23) - $m215 * ($m125 * $m33 - $m32 * $m13) + $m31 * ($m125 * $m23 - $m225 * $m13)) - $m105 * ($m015 * ($m225 * $m33 - $m32 * $m23) - $m215 * ($m025 * $m33 - $m32 * $m03) + $m31 * ($m025 * $m23 - $m225 * $m03)) + $m205 * ($m015 * ($m125 * $m33 - $m32 * $m13) - $m115 * ($m025 * $m33 - $m32 * $m03) + $m31 * ($m025 * $m13 - $m125 * $m03)) - $m30 * ($m015 * ($m125 * $m23 - $m225 * $m13) - $m115 * ($m025 * $m23 - $m225 * $m03) + $m215 * ($m025 * $m13 - $m125 * $m03)), 0.0, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 169, "className" => "test.TestStructures", "methodName" => "testDeterminant")));
		$this8 = new hxmath_math_Matrix4x4Default(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);
		$self7 = $this8;
		$m006 = $self7->m00;
		$m106 = $self7->m10;
		$m206 = $self7->m20;
		$m301 = $self7->m30;
		$m016 = $self7->m01;
		$m116 = $self7->m11;
		$m216 = $self7->m21;
		$m311 = $self7->m31;
		$m026 = $self7->m02;
		$m126 = $self7->m12;
		$m226 = $self7->m22;
		$m321 = $self7->m32;
		$m031 = $self7->m03;
		$m131 = $self7->m13;
		$m231 = $self7->m23;
		$m331 = $self7->m33;
		$this->assertEquals($m006 * ($m116 * ($m226 * $m331 - $m321 * $m231) - $m216 * ($m126 * $m331 - $m321 * $m131) + $m311 * ($m126 * $m231 - $m226 * $m131)) - $m106 * ($m016 * ($m226 * $m331 - $m321 * $m231) - $m216 * ($m026 * $m331 - $m321 * $m031) + $m311 * ($m026 * $m231 - $m226 * $m031)) + $m206 * ($m016 * ($m126 * $m331 - $m321 * $m131) - $m116 * ($m026 * $m331 - $m321 * $m031) + $m311 * ($m026 * $m131 - $m126 * $m031)) - $m301 * ($m016 * ($m126 * $m231 - $m226 * $m131) - $m116 * ($m026 * $m231 - $m226 * $m031) + $m216 * ($m026 * $m131 - $m126 * $m031)), 1.0, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 170, "className" => "test.TestStructures", "methodName" => "testDeterminant")));
		{
			$_g2 = 0;
			while($_g2 < 1) {
				++$_g2;
				$a2 = $this->randomMatrix4x4(null);
				$b2 = $this->randomMatrix4x4(null);
				$this9 = new hxmath_math_Matrix4x4Default($a2->m00 * $b2->m00 + $a2->m10 * $b2->m01 + $a2->m20 * $b2->m02 + $a2->m30 * $b2->m03, $a2->m00 * $b2->m10 + $a2->m10 * $b2->m11 + $a2->m20 * $b2->m12 + $a2->m30 * $b2->m13, $a2->m00 * $b2->m20 + $a2->m10 * $b2->m21 + $a2->m20 * $b2->m22 + $a2->m30 * $b2->m23, $a2->m00 * $b2->m30 + $a2->m10 * $b2->m31 + $a2->m20 * $b2->m32 + $a2->m30 * $b2->m33, $a2->m01 * $b2->m00 + $a2->m11 * $b2->m01 + $a2->m21 * $b2->m02 + $a2->m31 * $b2->m03, $a2->m01 * $b2->m10 + $a2->m11 * $b2->m11 + $a2->m21 * $b2->m12 + $a2->m31 * $b2->m13, $a2->m01 * $b2->m20 + $a2->m11 * $b2->m21 + $a2->m21 * $b2->m22 + $a2->m31 * $b2->m23, $a2->m01 * $b2->m30 + $a2->m11 * $b2->m31 + $a2->m21 * $b2->m32 + $a2->m31 * $b2->m33, $a2->m02 * $b2->m00 + $a2->m12 * $b2->m01 + $a2->m22 * $b2->m02 + $a2->m32 * $b2->m03, $a2->m02 * $b2->m10 + $a2->m12 * $b2->m11 + $a2->m22 * $b2->m12 + $a2->m32 * $b2->m13, $a2->m02 * $b2->m20 + $a2->m12 * $b2->m21 + $a2->m22 * $b2->m22 + $a2->m32 * $b2->m23, $a2->m02 * $b2->m30 + $a2->m12 * $b2->m31 + $a2->m22 * $b2->m32 + $a2->m32 * $b2->m33, $a2->m03 * $b2->m00 + $a2->m13 * $b2->m01 + $a2->m23 * $b2->m02 + $a2->m33 * $b2->m03, $a2->m03 * $b2->m10 + $a2->m13 * $b2->m11 + $a2->m23 * $b2->m12 + $a2->m33 * $b2->m13, $a2->m03 * $b2->m20 + $a2->m13 * $b2->m21 + $a2->m23 * $b2->m22 + $a2->m33 * $b2->m23, $a2->m03 * $b2->m30 + $a2->m13 * $b2->m31 + $a2->m23 * $b2->m32 + $a2->m33 * $b2->m33);
				$self8 = $this9;
				$m007 = $self8->m00;
				$m107 = $self8->m10;
				$m207 = $self8->m20;
				$m302 = $self8->m30;
				$m017 = $self8->m01;
				$m117 = $self8->m11;
				$m217 = $self8->m21;
				$m312 = $self8->m31;
				$m027 = $self8->m02;
				$m127 = $self8->m12;
				$m227 = $self8->m22;
				$m322 = $self8->m32;
				$m032 = $self8->m03;
				$m132 = $self8->m13;
				$m232 = $self8->m23;
				$m332 = $self8->m33;
				$tmp7 = $m007 * ($m117 * ($m227 * $m332 - $m322 * $m232) - $m217 * ($m127 * $m332 - $m322 * $m132) + $m312 * ($m127 * $m232 - $m227 * $m132)) - $m107 * ($m017 * ($m227 * $m332 - $m322 * $m232) - $m217 * ($m027 * $m332 - $m322 * $m032) + $m312 * ($m027 * $m232 - $m227 * $m032)) + $m207 * ($m017 * ($m127 * $m332 - $m322 * $m132) - $m117 * ($m027 * $m332 - $m322 * $m032) + $m312 * ($m027 * $m132 - $m127 * $m032)) - $m302 * ($m017 * ($m127 * $m232 - $m227 * $m132) - $m117 * ($m027 * $m232 - $m227 * $m032) + $m217 * ($m027 * $m132 - $m127 * $m032));
				$m008 = $a2->m00;
				$m108 = $a2->m10;
				$m208 = $a2->m20;
				$m303 = $a2->m30;
				$m018 = $a2->m01;
				$m118 = $a2->m11;
				$m218 = $a2->m21;
				$m313 = $a2->m31;
				$m028 = $a2->m02;
				$m128 = $a2->m12;
				$m228 = $a2->m22;
				$m323 = $a2->m32;
				$m033 = $a2->m03;
				$m133 = $a2->m13;
				$m233 = $a2->m23;
				$m333 = $a2->m33;
				$tmp8 = $m008 * ($m118 * ($m228 * $m333 - $m323 * $m233) - $m218 * ($m128 * $m333 - $m323 * $m133) + $m313 * ($m128 * $m233 - $m228 * $m133)) - $m108 * ($m018 * ($m228 * $m333 - $m323 * $m233) - $m218 * ($m028 * $m333 - $m323 * $m033) + $m313 * ($m028 * $m233 - $m228 * $m033)) + $m208 * ($m018 * ($m128 * $m333 - $m323 * $m133) - $m118 * ($m028 * $m333 - $m323 * $m033) + $m313 * ($m028 * $m133 - $m128 * $m033)) - $m303 * ($m018 * ($m128 * $m233 - $m228 * $m133) - $m118 * ($m028 * $m233 - $m228 * $m033) + $m218 * ($m028 * $m133 - $m128 * $m033));
				$m009 = $b2->m00;
				$m109 = $b2->m10;
				$m209 = $b2->m20;
				$m304 = $b2->m30;
				$m019 = $b2->m01;
				$m119 = $b2->m11;
				$m219 = $b2->m21;
				$m314 = $b2->m31;
				$m029 = $b2->m02;
				$m129 = $b2->m12;
				$m229 = $b2->m22;
				$m324 = $b2->m32;
				$m034 = $b2->m03;
				$m134 = $b2->m13;
				$m234 = $b2->m23;
				$m334 = $b2->m33;
				$this->assertApproxEquals($tmp7, $tmp8 * ($m009 * ($m119 * ($m229 * $m334 - $m324 * $m234) - $m219 * ($m129 * $m334 - $m324 * $m134) + $m314 * ($m129 * $m234 - $m229 * $m134)) - $m109 * ($m019 * ($m229 * $m334 - $m324 * $m234) - $m219 * ($m029 * $m334 - $m324 * $m034) + $m314 * ($m029 * $m234 - $m229 * $m034)) + $m209 * ($m019 * ($m129 * $m334 - $m324 * $m134) - $m119 * ($m029 * $m334 - $m324 * $m034) + $m314 * ($m029 * $m134 - $m129 * $m034)) - $m304 * ($m019 * ($m129 * $m234 - $m229 * $m134) - $m119 * ($m029 * $m234 - $m229 * $m034) + $m219 * ($m029 * $m134 - $m129 * $m034))), null, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 176, "className" => "test.TestStructures", "methodName" => "testDeterminant")));
				unset($tmp8,$tmp7,$this9,$self8,$m334,$m333,$m332,$m324,$m323,$m322,$m314,$m313,$m312,$m304,$m303,$m302,$m234,$m233,$m232,$m229,$m228,$m227,$m219,$m218,$m217,$m209,$m208,$m207,$m134,$m133,$m132,$m129,$m128,$m127,$m119,$m118,$m117,$m109,$m108,$m107,$m034,$m033,$m032,$m029,$m028,$m027,$m019,$m018,$m017,$m009,$m008,$m007,$b2,$a2);
			}
		}
	}
	public function testArrayAccess() {
		$this1 = new hxmath_math_Vector2Default(0.0, 0.0);
		$vec2 = $this1;
		$vec2->y = 1.0;
		$this->assertEquals(1.0, $vec2->y, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 184, "className" => "test.TestStructures", "methodName" => "testArrayAccess")));
		$tmp = $vec2->y;
		$this->assertEquals(1.0, $tmp, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 185, "className" => "test.TestStructures", "methodName" => "testArrayAccess")));
		$this2 = new hxmath_math_Vector3Default(0.0, 0.0, 0.0);
		$vec3 = $this2;
		$vec3->y = 1.0;
		$this->assertEquals(1.0, $vec3->y, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 189, "className" => "test.TestStructures", "methodName" => "testArrayAccess")));
		$tmp1 = $vec3->y;
		$this->assertEquals(1.0, $tmp1, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 190, "className" => "test.TestStructures", "methodName" => "testArrayAccess")));
		$this3 = new hxmath_math_Vector4Default(0.0, 0.0, 0.0, 0.0);
		$vec4 = $this3;
		$vec4->y = 1.0;
		$this->assertEquals(1.0, $vec4->y, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 194, "className" => "test.TestStructures", "methodName" => "testArrayAccess")));
		$tmp2 = $vec4->y;
		$this->assertEquals(1.0, $tmp2, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 195, "className" => "test.TestStructures", "methodName" => "testArrayAccess")));
		$this4 = new hxmath_math_Matrix2x2Default(0.0, 0.0, 0.0, 0.0);
		$mat2x2 = $this4;
		$mat2x2->c = 1.0;
		$this->assertEquals(1.0, $mat2x2->c, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 199, "className" => "test.TestStructures", "methodName" => "testArrayAccess")));
		$tmp3 = $mat2x2->c;
		$this->assertEquals(1.0, $tmp3, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 200, "className" => "test.TestStructures", "methodName" => "testArrayAccess")));
		$tmp4 = $mat2x2->c;
		$this->assertEquals(1.0, $tmp4, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 201, "className" => "test.TestStructures", "methodName" => "testArrayAccess")));
		$this5 = new hxmath_math_Matrix3x2Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		$mat3x2 = $this5;
		$mat3x2->c = 1.0;
		$this->assertEquals(1.0, $mat3x2->c, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 205, "className" => "test.TestStructures", "methodName" => "testArrayAccess")));
		$tmp5 = $mat3x2->c;
		$this->assertEquals(1.0, $tmp5, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 206, "className" => "test.TestStructures", "methodName" => "testArrayAccess")));
		$tmp6 = $mat3x2->c;
		$this->assertEquals(1.0, $tmp6, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 207, "className" => "test.TestStructures", "methodName" => "testArrayAccess")));
		$this6 = new hxmath_math_Matrix3x3Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		$mat3x3 = $this6;
		$mat3x3->m21 = 1.0;
		$this->assertEquals(1.0, $mat3x3->m21, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 211, "className" => "test.TestStructures", "methodName" => "testArrayAccess")));
		$tmp7 = $mat3x3->m21;
		$this->assertEquals(1.0, $tmp7, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 212, "className" => "test.TestStructures", "methodName" => "testArrayAccess")));
		$tmp8 = $mat3x3->m21;
		$this->assertEquals(1.0, $tmp8, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 213, "className" => "test.TestStructures", "methodName" => "testArrayAccess")));
		$this7 = new hxmath_math_Matrix4x4Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		$mat4x4 = $this7;
		$mat4x4->m11 = 1.0;
		$this->assertEquals(1.0, $mat4x4->m11, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 217, "className" => "test.TestStructures", "methodName" => "testArrayAccess")));
		$tmp9 = $mat4x4->m11;
		$this->assertEquals(1.0, $tmp9, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 218, "className" => "test.TestStructures", "methodName" => "testArrayAccess")));
		$tmp10 = $mat4x4->m11;
		$this->assertEquals(1.0, $tmp10, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 219, "className" => "test.TestStructures", "methodName" => "testArrayAccess")));
		$this8 = new hxmath_math_QuaternionDefault(0, 0, 0, 0);
		$quat = $this8;
		$quat->y = 1.0;
		$this->assertEquals(1.0, $quat->y, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 223, "className" => "test.TestStructures", "methodName" => "testArrayAccess")));
		$tmp11 = $quat->y;
		$this->assertEquals(1.0, $tmp11, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 224, "className" => "test.TestStructures", "methodName" => "testArrayAccess")));
		$intVec2 = hxmath_math__IntVector2_IntVector2_Impl_::_new(0, 0);
		$intVec2->y = 1;
		$this->assertEquals(1, $intVec2->y, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 228, "className" => "test.TestStructures", "methodName" => "testArrayAccess")));
		$tmp12 = $intVec2->y;
		$this->assertEquals(1, $tmp12, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 229, "className" => "test.TestStructures", "methodName" => "testArrayAccess")));
		$shortVec2 = hxmath_math__ShortVector2_ShortVector2_Impl_::_new(0, 1);
		$this->assertEquals(1, $shortVec2 >> 16 & 65535, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 233, "className" => "test.TestStructures", "methodName" => "testArrayAccess")));
		$this->assertEquals(1, $shortVec2 >> 16 & 65535, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 234, "className" => "test.TestStructures", "methodName" => "testArrayAccess")));
	}
	public function testApplyScalarFunc() {
		$this1 = new hxmath_math_Vector2Default(0.0, 0.0);
		$tmp = _hx_anonymous(array("f" => (isset(hxmath_math__Vector2_Vector2_Impl_::$applyScalarFunc) ? hxmath_math__Vector2_Vector2_Impl_::$applyScalarFunc: array("hxmath_math__Vector2_Vector2_Impl_", "applyScalarFunc")), "zero" => $this1, "count" => 2, "get" => (isset(hxmath_math__Vector2_Vector2_Impl_::$getArrayElement) ? hxmath_math__Vector2_Vector2_Impl_::$getArrayElement: array("hxmath_math__Vector2_Vector2_Impl_", "getArrayElement")), "set" => (isset(hxmath_math__Vector2_Vector2_Impl_::$setArrayElement) ? hxmath_math__Vector2_Vector2_Impl_::$setArrayElement: array("hxmath_math__Vector2_Vector2_Impl_", "setArrayElement"))));
		$this2 = new hxmath_math_Vector3Default(0.0, 0.0, 0.0);
		$tmp1 = _hx_anonymous(array("f" => (isset(hxmath_math__Vector3_Vector3_Impl_::$applyScalarFunc) ? hxmath_math__Vector3_Vector3_Impl_::$applyScalarFunc: array("hxmath_math__Vector3_Vector3_Impl_", "applyScalarFunc")), "zero" => $this2, "count" => 3, "get" => (isset(hxmath_math__Vector3_Vector3_Impl_::$getArrayElement) ? hxmath_math__Vector3_Vector3_Impl_::$getArrayElement: array("hxmath_math__Vector3_Vector3_Impl_", "getArrayElement")), "set" => (isset(hxmath_math__Vector3_Vector3_Impl_::$setArrayElement) ? hxmath_math__Vector3_Vector3_Impl_::$setArrayElement: array("hxmath_math__Vector3_Vector3_Impl_", "setArrayElement"))));
		$this3 = new hxmath_math_Vector4Default(0.0, 0.0, 0.0, 0.0);
		$tmp2 = _hx_anonymous(array("f" => (isset(hxmath_math__Vector4_Vector4_Impl_::$applyScalarFunc) ? hxmath_math__Vector4_Vector4_Impl_::$applyScalarFunc: array("hxmath_math__Vector4_Vector4_Impl_", "applyScalarFunc")), "zero" => $this3, "count" => 4, "get" => (isset(hxmath_math__Vector4_Vector4_Impl_::$getArrayElement) ? hxmath_math__Vector4_Vector4_Impl_::$getArrayElement: array("hxmath_math__Vector4_Vector4_Impl_", "getArrayElement")), "set" => (isset(hxmath_math__Vector4_Vector4_Impl_::$setArrayElement) ? hxmath_math__Vector4_Vector4_Impl_::$setArrayElement: array("hxmath_math__Vector4_Vector4_Impl_", "setArrayElement"))));
		$this4 = new hxmath_math_Matrix2x2Default(0.0, 0.0, 0.0, 0.0);
		$tmp3 = _hx_anonymous(array("f" => (isset(hxmath_math__Matrix2x2_Matrix2x2_Impl_::$applyScalarFunc) ? hxmath_math__Matrix2x2_Matrix2x2_Impl_::$applyScalarFunc: array("hxmath_math__Matrix2x2_Matrix2x2_Impl_", "applyScalarFunc")), "zero" => $this4, "count" => 4, "get" => (isset(hxmath_math__Matrix2x2_Matrix2x2_Impl_::$getArrayElement) ? hxmath_math__Matrix2x2_Matrix2x2_Impl_::$getArrayElement: array("hxmath_math__Matrix2x2_Matrix2x2_Impl_", "getArrayElement")), "set" => (isset(hxmath_math__Matrix2x2_Matrix2x2_Impl_::$setArrayElement) ? hxmath_math__Matrix2x2_Matrix2x2_Impl_::$setArrayElement: array("hxmath_math__Matrix2x2_Matrix2x2_Impl_", "setArrayElement"))));
		$this5 = new hxmath_math_Matrix3x2Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		$tmp4 = _hx_anonymous(array("f" => (isset(hxmath_math__Matrix3x2_Matrix3x2_Impl_::$applyScalarFunc) ? hxmath_math__Matrix3x2_Matrix3x2_Impl_::$applyScalarFunc: array("hxmath_math__Matrix3x2_Matrix3x2_Impl_", "applyScalarFunc")), "zero" => $this5, "count" => 6, "get" => (isset(hxmath_math__Matrix3x2_Matrix3x2_Impl_::$getArrayElement) ? hxmath_math__Matrix3x2_Matrix3x2_Impl_::$getArrayElement: array("hxmath_math__Matrix3x2_Matrix3x2_Impl_", "getArrayElement")), "set" => (isset(hxmath_math__Matrix3x2_Matrix3x2_Impl_::$setArrayElement) ? hxmath_math__Matrix3x2_Matrix3x2_Impl_::$setArrayElement: array("hxmath_math__Matrix3x2_Matrix3x2_Impl_", "setArrayElement"))));
		$this6 = new hxmath_math_Matrix3x3Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		$tmp5 = _hx_anonymous(array("f" => (isset(hxmath_math__Matrix3x3_Matrix3x3_Impl_::$applyScalarFunc) ? hxmath_math__Matrix3x3_Matrix3x3_Impl_::$applyScalarFunc: array("hxmath_math__Matrix3x3_Matrix3x3_Impl_", "applyScalarFunc")), "zero" => $this6, "count" => 9, "get" => (isset(hxmath_math__Matrix3x3_Matrix3x3_Impl_::$getArrayElement) ? hxmath_math__Matrix3x3_Matrix3x3_Impl_::$getArrayElement: array("hxmath_math__Matrix3x3_Matrix3x3_Impl_", "getArrayElement")), "set" => (isset(hxmath_math__Matrix3x3_Matrix3x3_Impl_::$setArrayElement) ? hxmath_math__Matrix3x3_Matrix3x3_Impl_::$setArrayElement: array("hxmath_math__Matrix3x3_Matrix3x3_Impl_", "setArrayElement"))));
		$this7 = new hxmath_math_Matrix4x4Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		$tmp6 = _hx_anonymous(array("f" => (isset(hxmath_math__Matrix4x4_Matrix4x4_Impl_::$applyScalarFunc) ? hxmath_math__Matrix4x4_Matrix4x4_Impl_::$applyScalarFunc: array("hxmath_math__Matrix4x4_Matrix4x4_Impl_", "applyScalarFunc")), "zero" => $this7, "count" => 16, "get" => (isset(hxmath_math__Matrix4x4_Matrix4x4_Impl_::$getArrayElement) ? hxmath_math__Matrix4x4_Matrix4x4_Impl_::$getArrayElement: array("hxmath_math__Matrix4x4_Matrix4x4_Impl_", "getArrayElement")), "set" => (isset(hxmath_math__Matrix4x4_Matrix4x4_Impl_::$setArrayElement) ? hxmath_math__Matrix4x4_Matrix4x4_Impl_::$setArrayElement: array("hxmath_math__Matrix4x4_Matrix4x4_Impl_", "setArrayElement"))));
		$this8 = new hxmath_math_QuaternionDefault(0, 0, 0, 0);
		$testData = (new _hx_array(array($tmp, $tmp1, $tmp2, $tmp3, $tmp4, $tmp5, $tmp6, _hx_anonymous(array("f" => (isset(hxmath_math__Quaternion_Quaternion_Impl_::$applyScalarFunc) ? hxmath_math__Quaternion_Quaternion_Impl_::$applyScalarFunc: array("hxmath_math__Quaternion_Quaternion_Impl_", "applyScalarFunc")), "zero" => $this8, "count" => 4, "get" => (isset(hxmath_math__Quaternion_Quaternion_Impl_::$getArrayElement) ? hxmath_math__Quaternion_Quaternion_Impl_::$getArrayElement: array("hxmath_math__Quaternion_Quaternion_Impl_", "getArrayElement")), "set" => (isset(hxmath_math__Quaternion_Quaternion_Impl_::$setArrayElement) ? hxmath_math__Quaternion_Quaternion_Impl_::$setArrayElement: array("hxmath_math__Quaternion_Quaternion_Impl_", "setArrayElement")))))));
		{
			$_g = 0;
			while($_g < $testData->length) {
				$data = $testData[$_g];
				++$_g;
				$v = $data->zero;
				$data->set($v, 1, 0.1);
				$data->f($v, (isset(Math::$ceil) ? Math::$ceil: array("Math", "ceil")));
				$sum = 0.0;
				{
					$_g2 = 0;
					$_g1 = $data->count;
					while($_g2 < $_g1) {
						$i = $_g2++;
						$tmp7 = $data->get($v, $i);
						$sum += $tmp7;
						unset($tmp7,$i);
					}
					unset($_g2,$_g1);
				}
				$this->assertEquals(1.0, $sum, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 309, "className" => "test.TestStructures", "methodName" => "testApplyScalarFunc")));
				unset($v,$sum,$data);
			}
		}
	}
	public function testIntApplyScalarFunc() {
		$testData = (new _hx_array(array(_hx_anonymous(array("f" => (isset(hxmath_math__IntVector2_IntVector2_Impl_::$applyScalarFunc) ? hxmath_math__IntVector2_IntVector2_Impl_::$applyScalarFunc: array("hxmath_math__IntVector2_IntVector2_Impl_", "applyScalarFunc")), "zero" => hxmath_math__IntVector2_IntVector2_Impl_::_new(0, 0), "count" => 2, "get" => (isset(hxmath_math__IntVector2_IntVector2_Impl_::$getArrayElement) ? hxmath_math__IntVector2_IntVector2_Impl_::$getArrayElement: array("hxmath_math__IntVector2_IntVector2_Impl_", "getArrayElement")), "set" => (isset(hxmath_math__IntVector2_IntVector2_Impl_::$setArrayElement) ? hxmath_math__IntVector2_IntVector2_Impl_::$setArrayElement: array("hxmath_math__IntVector2_IntVector2_Impl_", "setArrayElement")))))));
		{
			$_g = 0;
			while($_g < $testData->length) {
				$data = $testData[$_g];
				++$_g;
				$v = $data->zero;
				$data->set($v, 1, 1);
				$data->f($v, array(new _hx_lambda(array(), "test_TestStructures_0"), 'execute'));
				$sum = 0;
				{
					$_g2 = 0;
					$_g1 = $data->count;
					while($_g2 < $_g1) {
						$i = $_g2++;
						$tmp = $data->get($v, $i);
						$sum += $tmp;
						unset($tmp,$i);
					}
					unset($_g2,$_g1);
				}
				$this->assertEquals(2, $sum, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 336, "className" => "test.TestStructures", "methodName" => "testIntApplyScalarFunc")));
				unset($v,$sum,$data);
			}
		}
	}
	public function testCopyToFrom() {
		$vec2a = $this->randomVector2(null);
		$this1 = new hxmath_math_Vector2Default(0.0, 0.0);
		$vec2b = $this1;
		{
			$_g = 0;
			while($_g < 2) {
				$i = $_g++;
				{
					$tmp = null;
					switch($i) {
					case 0:{
						$tmp = $vec2a->x;
					}break;
					case 1:{
						$tmp = $vec2a->y;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					$value = $tmp;
					switch($i) {
					case 0:{
						$vec2b->x = $value;
					}break;
					case 1:{
						$vec2b->y = $value;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					unset($value,$tmp);
				}
				unset($i);
			}
		}
		$tmp1 = null;
		$tmp2 = null;
		if($vec2a === null) {
			$tmp2 = $vec2b === null;
		} else {
			$tmp2 = false;
		}
		if(!$tmp2) {
			$tmp3 = null;
			$tmp4 = null;
			if($vec2a !== null) {
				$tmp4 = $vec2b !== null;
			} else {
				$tmp4 = false;
			}
			if($tmp4) {
				$tmp3 = $vec2a->x === $vec2b->x;
			} else {
				$tmp3 = false;
			}
			if($tmp3) {
				$tmp1 = $vec2a->y === $vec2b->y;
			} else {
				$tmp1 = false;
			}
		} else {
			$tmp1 = true;
		}
		$this->assertTrue($tmp1, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 345, "className" => "test.TestStructures", "methodName" => "testCopyToFrom")));
		$vec3a = $this->randomVector3(null);
		$this2 = new hxmath_math_Vector3Default(0.0, 0.0, 0.0);
		$vec3b = $this2;
		{
			$_g1 = 0;
			while($_g1 < 3) {
				$i1 = $_g1++;
				{
					$tmp5 = null;
					switch($i1) {
					case 0:{
						$tmp5 = $vec3a->x;
					}break;
					case 1:{
						$tmp5 = $vec3a->y;
					}break;
					case 2:{
						$tmp5 = $vec3a->z;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					$value1 = $tmp5;
					switch($i1) {
					case 0:{
						$vec3b->x = $value1;
					}break;
					case 1:{
						$vec3b->y = $value1;
					}break;
					case 2:{
						$vec3b->z = $value1;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					unset($value1,$tmp5);
				}
				unset($i1);
			}
		}
		$tmp6 = null;
		$tmp7 = null;
		if($vec3a === null) {
			$tmp7 = $vec3b === null;
		} else {
			$tmp7 = false;
		}
		if(!$tmp7) {
			$tmp8 = null;
			$tmp9 = null;
			$tmp10 = null;
			if($vec3a !== null) {
				$tmp10 = $vec3b !== null;
			} else {
				$tmp10 = false;
			}
			if($tmp10) {
				$tmp9 = $vec3a->x === $vec3b->x;
			} else {
				$tmp9 = false;
			}
			if($tmp9) {
				$tmp8 = $vec3a->y === $vec3b->y;
			} else {
				$tmp8 = false;
			}
			if($tmp8) {
				$tmp6 = $vec3a->z === $vec3b->z;
			} else {
				$tmp6 = false;
			}
		} else {
			$tmp6 = true;
		}
		$this->assertTrue($tmp6, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 350, "className" => "test.TestStructures", "methodName" => "testCopyToFrom")));
		$vec4a = $this->randomVector4(null);
		$this3 = new hxmath_math_Vector4Default(0.0, 0.0, 0.0, 0.0);
		$vec4b = $this3;
		{
			$_g2 = 0;
			while($_g2 < 4) {
				$i2 = $_g2++;
				{
					$tmp11 = null;
					switch($i2) {
					case 0:{
						$tmp11 = $vec4a->x;
					}break;
					case 1:{
						$tmp11 = $vec4a->y;
					}break;
					case 2:{
						$tmp11 = $vec4a->z;
					}break;
					case 3:{
						$tmp11 = $vec4a->w;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					$value2 = $tmp11;
					switch($i2) {
					case 0:{
						$vec4b->x = $value2;
					}break;
					case 1:{
						$vec4b->y = $value2;
					}break;
					case 2:{
						$vec4b->z = $value2;
					}break;
					case 3:{
						$vec4b->w = $value2;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					unset($value2,$tmp11);
				}
				unset($i2);
			}
		}
		$tmp12 = null;
		$tmp13 = null;
		if($vec4a === null) {
			$tmp13 = $vec4b === null;
		} else {
			$tmp13 = false;
		}
		if(!$tmp13) {
			$tmp14 = null;
			$tmp15 = null;
			$tmp16 = null;
			$tmp17 = null;
			if($vec4a !== null) {
				$tmp17 = $vec4b !== null;
			} else {
				$tmp17 = false;
			}
			if($tmp17) {
				$tmp16 = $vec4a->x === $vec4b->x;
			} else {
				$tmp16 = false;
			}
			if($tmp16) {
				$tmp15 = $vec4a->y === $vec4b->y;
			} else {
				$tmp15 = false;
			}
			if($tmp15) {
				$tmp14 = $vec4a->z === $vec4b->z;
			} else {
				$tmp14 = false;
			}
			if($tmp14) {
				$tmp12 = $vec4a->w === $vec4b->w;
			} else {
				$tmp12 = false;
			}
		} else {
			$tmp12 = true;
		}
		$this->assertTrue($tmp12, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 355, "className" => "test.TestStructures", "methodName" => "testCopyToFrom")));
		$mat2x2a = $this->randomMatrix2x2(null);
		$this4 = new hxmath_math_Matrix2x2Default(0.0, 0.0, 0.0, 0.0);
		$mat2x2b = $this4;
		{
			$_g3 = 0;
			while($_g3 < 4) {
				$i3 = $_g3++;
				{
					$tmp18 = null;
					switch($i3) {
					case 0:{
						$tmp18 = $mat2x2a->a;
					}break;
					case 1:{
						$tmp18 = $mat2x2a->b;
					}break;
					case 2:{
						$tmp18 = $mat2x2a->c;
					}break;
					case 3:{
						$tmp18 = $mat2x2a->d;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					$value3 = $tmp18;
					switch($i3) {
					case 0:{
						$mat2x2b->a = $value3;
					}break;
					case 1:{
						$mat2x2b->b = $value3;
					}break;
					case 2:{
						$mat2x2b->c = $value3;
					}break;
					case 3:{
						$mat2x2b->d = $value3;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					unset($value3,$tmp18);
				}
				unset($i3);
			}
		}
		$tmp19 = null;
		$tmp20 = null;
		if($mat2x2a === null) {
			$tmp20 = $mat2x2b === null;
		} else {
			$tmp20 = false;
		}
		if(!$tmp20) {
			$tmp21 = null;
			$tmp22 = null;
			$tmp23 = null;
			$tmp24 = null;
			if($mat2x2a !== null) {
				$tmp24 = $mat2x2b !== null;
			} else {
				$tmp24 = false;
			}
			if($tmp24) {
				$tmp23 = $mat2x2a->a === $mat2x2b->a;
			} else {
				$tmp23 = false;
			}
			if($tmp23) {
				$tmp22 = $mat2x2a->b === $mat2x2b->b;
			} else {
				$tmp22 = false;
			}
			if($tmp22) {
				$tmp21 = $mat2x2a->c === $mat2x2b->c;
			} else {
				$tmp21 = false;
			}
			if($tmp21) {
				$tmp19 = $mat2x2a->d === $mat2x2b->d;
			} else {
				$tmp19 = false;
			}
		} else {
			$tmp19 = true;
		}
		$this->assertTrue($tmp19, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 360, "className" => "test.TestStructures", "methodName" => "testCopyToFrom")));
		$mat3x2a = $this->randomMatrix3x2(null);
		$this5 = new hxmath_math_Matrix3x2Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		$mat3x2b = $this5;
		{
			$_g4 = 0;
			while($_g4 < 6) {
				$i4 = $_g4++;
				{
					$tmp25 = null;
					switch($i4) {
					case 0:{
						$tmp25 = $mat3x2a->a;
					}break;
					case 1:{
						$tmp25 = $mat3x2a->b;
					}break;
					case 2:{
						$tmp25 = $mat3x2a->tx;
					}break;
					case 3:{
						$tmp25 = $mat3x2a->c;
					}break;
					case 4:{
						$tmp25 = $mat3x2a->d;
					}break;
					case 5:{
						$tmp25 = $mat3x2a->ty;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					$value4 = $tmp25;
					switch($i4) {
					case 0:{
						$mat3x2b->a = $value4;
					}break;
					case 1:{
						$mat3x2b->b = $value4;
					}break;
					case 2:{
						$mat3x2b->tx = $value4;
					}break;
					case 3:{
						$mat3x2b->c = $value4;
					}break;
					case 4:{
						$mat3x2b->d = $value4;
					}break;
					case 5:{
						$mat3x2b->ty = $value4;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					unset($value4,$tmp25);
				}
				unset($i4);
			}
		}
		$tmp26 = null;
		$tmp27 = null;
		if($mat3x2a === null) {
			$tmp27 = $mat3x2b === null;
		} else {
			$tmp27 = false;
		}
		if(!$tmp27) {
			$tmp28 = null;
			$tmp29 = null;
			$tmp30 = null;
			$tmp31 = null;
			$tmp32 = null;
			$tmp33 = null;
			if($mat3x2a !== null) {
				$tmp33 = $mat3x2b !== null;
			} else {
				$tmp33 = false;
			}
			if($tmp33) {
				$tmp32 = $mat3x2a->a === $mat3x2b->a;
			} else {
				$tmp32 = false;
			}
			if($tmp32) {
				$tmp31 = $mat3x2a->b === $mat3x2b->b;
			} else {
				$tmp31 = false;
			}
			if($tmp31) {
				$tmp30 = $mat3x2a->c === $mat3x2b->c;
			} else {
				$tmp30 = false;
			}
			if($tmp30) {
				$tmp29 = $mat3x2a->d === $mat3x2b->d;
			} else {
				$tmp29 = false;
			}
			if($tmp29) {
				$tmp28 = $mat3x2a->tx === $mat3x2b->tx;
			} else {
				$tmp28 = false;
			}
			if($tmp28) {
				$tmp26 = $mat3x2a->ty === $mat3x2b->ty;
			} else {
				$tmp26 = false;
			}
		} else {
			$tmp26 = true;
		}
		$this->assertTrue($tmp26, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 365, "className" => "test.TestStructures", "methodName" => "testCopyToFrom")));
		$mat3x3a = $this->randomMatrix3x3(null);
		$this6 = new hxmath_math_Matrix3x3Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		$mat3x3b = $this6;
		{
			$_g5 = 0;
			while($_g5 < 9) {
				$i5 = $_g5++;
				{
					$tmp34 = null;
					switch($i5) {
					case 0:{
						$tmp34 = $mat3x3a->m00;
					}break;
					case 1:{
						$tmp34 = $mat3x3a->m10;
					}break;
					case 2:{
						$tmp34 = $mat3x3a->m20;
					}break;
					case 3:{
						$tmp34 = $mat3x3a->m01;
					}break;
					case 4:{
						$tmp34 = $mat3x3a->m11;
					}break;
					case 5:{
						$tmp34 = $mat3x3a->m21;
					}break;
					case 6:{
						$tmp34 = $mat3x3a->m02;
					}break;
					case 7:{
						$tmp34 = $mat3x3a->m12;
					}break;
					case 8:{
						$tmp34 = $mat3x3a->m22;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					$value5 = $tmp34;
					switch($i5) {
					case 0:{
						$mat3x3b->m00 = $value5;
					}break;
					case 1:{
						$mat3x3b->m10 = $value5;
					}break;
					case 2:{
						$mat3x3b->m20 = $value5;
					}break;
					case 3:{
						$mat3x3b->m01 = $value5;
					}break;
					case 4:{
						$mat3x3b->m11 = $value5;
					}break;
					case 5:{
						$mat3x3b->m21 = $value5;
					}break;
					case 6:{
						$mat3x3b->m02 = $value5;
					}break;
					case 7:{
						$mat3x3b->m12 = $value5;
					}break;
					case 8:{
						$mat3x3b->m22 = $value5;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					unset($value5,$tmp34);
				}
				unset($i5);
			}
		}
		$tmp35 = null;
		$tmp36 = null;
		if($mat3x3a === null) {
			$tmp36 = $mat3x3b === null;
		} else {
			$tmp36 = false;
		}
		if(!$tmp36) {
			$tmp37 = null;
			$tmp38 = null;
			$tmp39 = null;
			$tmp40 = null;
			$tmp41 = null;
			$tmp42 = null;
			$tmp43 = null;
			$tmp44 = null;
			$tmp45 = null;
			if($mat3x3a !== null) {
				$tmp45 = $mat3x3b !== null;
			} else {
				$tmp45 = false;
			}
			if($tmp45) {
				$tmp44 = $mat3x3a->m00 === $mat3x3b->m00;
			} else {
				$tmp44 = false;
			}
			if($tmp44) {
				$tmp43 = $mat3x3a->m10 === $mat3x3b->m10;
			} else {
				$tmp43 = false;
			}
			if($tmp43) {
				$tmp42 = $mat3x3a->m20 === $mat3x3b->m20;
			} else {
				$tmp42 = false;
			}
			if($tmp42) {
				$tmp41 = $mat3x3a->m01 === $mat3x3b->m01;
			} else {
				$tmp41 = false;
			}
			if($tmp41) {
				$tmp40 = $mat3x3a->m11 === $mat3x3b->m11;
			} else {
				$tmp40 = false;
			}
			if($tmp40) {
				$tmp39 = $mat3x3a->m21 === $mat3x3b->m21;
			} else {
				$tmp39 = false;
			}
			if($tmp39) {
				$tmp38 = $mat3x3a->m02 === $mat3x3b->m02;
			} else {
				$tmp38 = false;
			}
			if($tmp38) {
				$tmp37 = $mat3x3a->m12 === $mat3x3b->m12;
			} else {
				$tmp37 = false;
			}
			if($tmp37) {
				$tmp35 = $mat3x3a->m22 === $mat3x3b->m22;
			} else {
				$tmp35 = false;
			}
		} else {
			$tmp35 = true;
		}
		$this->assertTrue($tmp35, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 370, "className" => "test.TestStructures", "methodName" => "testCopyToFrom")));
		$mat4x4a = $this->randomMatrix4x4(null);
		$this7 = new hxmath_math_Matrix4x4Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		$mat4x4b = $this7;
		{
			$_g6 = 0;
			while($_g6 < 16) {
				$i6 = $_g6++;
				{
					$tmp46 = null;
					switch($i6) {
					case 0:{
						$tmp46 = $mat4x4a->m00;
					}break;
					case 1:{
						$tmp46 = $mat4x4a->m10;
					}break;
					case 2:{
						$tmp46 = $mat4x4a->m20;
					}break;
					case 3:{
						$tmp46 = $mat4x4a->m30;
					}break;
					case 4:{
						$tmp46 = $mat4x4a->m01;
					}break;
					case 5:{
						$tmp46 = $mat4x4a->m11;
					}break;
					case 6:{
						$tmp46 = $mat4x4a->m21;
					}break;
					case 7:{
						$tmp46 = $mat4x4a->m31;
					}break;
					case 8:{
						$tmp46 = $mat4x4a->m02;
					}break;
					case 9:{
						$tmp46 = $mat4x4a->m12;
					}break;
					case 10:{
						$tmp46 = $mat4x4a->m22;
					}break;
					case 11:{
						$tmp46 = $mat4x4a->m32;
					}break;
					case 12:{
						$tmp46 = $mat4x4a->m03;
					}break;
					case 13:{
						$tmp46 = $mat4x4a->m13;
					}break;
					case 14:{
						$tmp46 = $mat4x4a->m23;
					}break;
					case 15:{
						$tmp46 = $mat4x4a->m33;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					$value6 = $tmp46;
					switch($i6) {
					case 0:{
						$mat4x4b->m00 = $value6;
					}break;
					case 1:{
						$mat4x4b->m10 = $value6;
					}break;
					case 2:{
						$mat4x4b->m20 = $value6;
					}break;
					case 3:{
						$mat4x4b->m30 = $value6;
					}break;
					case 4:{
						$mat4x4b->m01 = $value6;
					}break;
					case 5:{
						$mat4x4b->m11 = $value6;
					}break;
					case 6:{
						$mat4x4b->m21 = $value6;
					}break;
					case 7:{
						$mat4x4b->m31 = $value6;
					}break;
					case 8:{
						$mat4x4b->m02 = $value6;
					}break;
					case 9:{
						$mat4x4b->m12 = $value6;
					}break;
					case 10:{
						$mat4x4b->m22 = $value6;
					}break;
					case 11:{
						$mat4x4b->m32 = $value6;
					}break;
					case 12:{
						$mat4x4b->m03 = $value6;
					}break;
					case 13:{
						$mat4x4b->m13 = $value6;
					}break;
					case 14:{
						$mat4x4b->m23 = $value6;
					}break;
					case 15:{
						$mat4x4b->m33 = $value6;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					unset($value6,$tmp46);
				}
				unset($i6);
			}
		}
		$tmp47 = null;
		$tmp48 = null;
		if($mat4x4a === null) {
			$tmp48 = $mat4x4b === null;
		} else {
			$tmp48 = false;
		}
		if(!$tmp48) {
			$tmp49 = null;
			$tmp50 = null;
			$tmp51 = null;
			$tmp52 = null;
			$tmp53 = null;
			$tmp54 = null;
			$tmp55 = null;
			$tmp56 = null;
			$tmp57 = null;
			$tmp58 = null;
			$tmp59 = null;
			$tmp60 = null;
			$tmp61 = null;
			$tmp62 = null;
			$tmp63 = null;
			$tmp64 = null;
			if($mat4x4a !== null) {
				$tmp64 = $mat4x4b !== null;
			} else {
				$tmp64 = false;
			}
			if($tmp64) {
				$tmp63 = $mat4x4a->m00 === $mat4x4b->m00;
			} else {
				$tmp63 = false;
			}
			if($tmp63) {
				$tmp62 = $mat4x4a->m10 === $mat4x4b->m10;
			} else {
				$tmp62 = false;
			}
			if($tmp62) {
				$tmp61 = $mat4x4a->m20 === $mat4x4b->m20;
			} else {
				$tmp61 = false;
			}
			if($tmp61) {
				$tmp60 = $mat4x4a->m30 === $mat4x4b->m30;
			} else {
				$tmp60 = false;
			}
			if($tmp60) {
				$tmp59 = $mat4x4a->m01 === $mat4x4b->m01;
			} else {
				$tmp59 = false;
			}
			if($tmp59) {
				$tmp58 = $mat4x4a->m11 === $mat4x4b->m11;
			} else {
				$tmp58 = false;
			}
			if($tmp58) {
				$tmp57 = $mat4x4a->m21 === $mat4x4b->m21;
			} else {
				$tmp57 = false;
			}
			if($tmp57) {
				$tmp56 = $mat4x4a->m31 === $mat4x4b->m31;
			} else {
				$tmp56 = false;
			}
			if($tmp56) {
				$tmp55 = $mat4x4a->m02 === $mat4x4b->m02;
			} else {
				$tmp55 = false;
			}
			if($tmp55) {
				$tmp54 = $mat4x4a->m12 === $mat4x4b->m12;
			} else {
				$tmp54 = false;
			}
			if($tmp54) {
				$tmp53 = $mat4x4a->m22 === $mat4x4b->m22;
			} else {
				$tmp53 = false;
			}
			if($tmp53) {
				$tmp52 = $mat4x4a->m32 === $mat4x4b->m32;
			} else {
				$tmp52 = false;
			}
			if($tmp52) {
				$tmp51 = $mat4x4a->m03 === $mat4x4b->m03;
			} else {
				$tmp51 = false;
			}
			if($tmp51) {
				$tmp50 = $mat4x4a->m13 === $mat4x4b->m13;
			} else {
				$tmp50 = false;
			}
			if($tmp50) {
				$tmp49 = $mat4x4a->m23 === $mat4x4b->m23;
			} else {
				$tmp49 = false;
			}
			if($tmp49) {
				$tmp47 = $mat4x4a->m33 === $mat4x4b->m33;
			} else {
				$tmp47 = false;
			}
		} else {
			$tmp47 = true;
		}
		$this->assertTrue($tmp47, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 375, "className" => "test.TestStructures", "methodName" => "testCopyToFrom")));
		$quatA = $this->randomQuaternion(null);
		$this8 = new hxmath_math_QuaternionDefault(0, 0, 0, 0);
		$quatB = $this8;
		{
			$_g7 = 0;
			while($_g7 < 4) {
				$i7 = $_g7++;
				{
					$tmp65 = null;
					switch($i7) {
					case 0:{
						$tmp65 = $quatA->s;
					}break;
					case 1:{
						$tmp65 = $quatA->x;
					}break;
					case 2:{
						$tmp65 = $quatA->y;
					}break;
					case 3:{
						$tmp65 = $quatA->z;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					$value7 = $tmp65;
					switch($i7) {
					case 0:{
						$quatB->s = $value7;
					}break;
					case 1:{
						$quatB->x = $value7;
					}break;
					case 2:{
						$quatB->y = $value7;
					}break;
					case 3:{
						$quatB->z = $value7;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					unset($value7,$tmp65);
				}
				unset($i7);
			}
		}
		$tmp66 = null;
		$tmp67 = null;
		if($quatA === null) {
			$tmp67 = $quatB === null;
		} else {
			$tmp67 = false;
		}
		if(!$tmp67) {
			$tmp68 = null;
			$tmp69 = null;
			$tmp70 = null;
			$tmp71 = null;
			if($quatA !== null) {
				$tmp71 = $quatB !== null;
			} else {
				$tmp71 = false;
			}
			if($tmp71) {
				$tmp70 = $quatA->s === $quatB->s;
			} else {
				$tmp70 = false;
			}
			if($tmp70) {
				$tmp69 = $quatA->x === $quatB->x;
			} else {
				$tmp69 = false;
			}
			if($tmp69) {
				$tmp68 = $quatA->y === $quatB->y;
			} else {
				$tmp68 = false;
			}
			if($tmp68) {
				$tmp66 = $quatA->z === $quatB->z;
			} else {
				$tmp66 = false;
			}
		} else {
			$tmp66 = true;
		}
		$this->assertTrue($tmp66, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 380, "className" => "test.TestStructures", "methodName" => "testCopyToFrom")));
		$intVec2a = $this->randomIntVector2();
		$intVec2b = hxmath_math__IntVector2_IntVector2_Impl_::_new(0, 0);
		{
			$_g8 = 0;
			while($_g8 < 2) {
				$i8 = $_g8++;
				{
					$tmp72 = null;
					switch($i8) {
					case 0:{
						$tmp72 = $intVec2a->x;
					}break;
					case 1:{
						$tmp72 = $intVec2a->y;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					$value8 = $tmp72;
					switch($i8) {
					case 0:{
						$intVec2b->x = $value8;
					}break;
					case 1:{
						$intVec2b->y = $value8;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					unset($value8,$tmp72);
				}
				unset($i8);
			}
		}
		$tmp73 = null;
		$tmp74 = null;
		if($intVec2a === null) {
			$tmp74 = $intVec2b === null;
		} else {
			$tmp74 = false;
		}
		if(!$tmp74) {
			$tmp75 = null;
			$tmp76 = null;
			if($intVec2a !== null) {
				$tmp76 = $intVec2b !== null;
			} else {
				$tmp76 = false;
			}
			if($tmp76) {
				$tmp75 = $intVec2a->x === $intVec2b->x;
			} else {
				$tmp75 = false;
			}
			if($tmp75) {
				$tmp73 = $intVec2a->y === $intVec2b->y;
			} else {
				$tmp73 = false;
			}
		} else {
			$tmp73 = true;
		}
		$this->assertTrue($tmp73, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 385, "className" => "test.TestStructures", "methodName" => "testCopyToFrom")));
	}
	public function testRowColAccessors() {
		$this1 = new hxmath_math_Vector2Default(1.0, 0.0);
		$tmp = $this1;
		$this2 = new hxmath_math_Vector2Default(0.0, 1.0);
		$basis2 = (new _hx_array(array($tmp, $this2)));
		{
			$_g = 0;
			while($_g < 2) {
				$i = $_g++;
				$this3 = new hxmath_math_Matrix2x2Default(1.0, 0.0, 0.0, 1.0);
				$self = $this3;
				$a = null;
				switch($i) {
				case 0:{
					$this4 = new hxmath_math_Vector2Default($self->a, $self->c);
					$a = $this4;
				}break;
				case 1:{
					$this5 = new hxmath_math_Vector2Default($self->b, $self->d);
					$a = $this5;
				}break;
				default:{
					throw new HException("Invalid column");
				}break;
				}
				$b = $basis2[$i];
				$tmp1 = null;
				$tmp2 = null;
				if($a === null) {
					$tmp2 = $b === null;
				} else {
					$tmp2 = false;
				}
				if(!$tmp2) {
					$tmp3 = null;
					$tmp4 = null;
					if($a !== null) {
						$tmp4 = $b !== null;
					} else {
						$tmp4 = false;
					}
					if($tmp4) {
						$tmp3 = $a->x === $b->x;
					} else {
						$tmp3 = false;
					}
					if($tmp3) {
						$tmp1 = $a->y === $b->y;
					} else {
						$tmp1 = false;
					}
					unset($tmp4,$tmp3);
				} else {
					$tmp1 = true;
				}
				$this->assertTrue($tmp1, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 394, "className" => "test.TestStructures", "methodName" => "testRowColAccessors")));
				$this6 = new hxmath_math_Matrix2x2Default(1.0, 0.0, 0.0, 1.0);
				$self1 = $this6;
				$a1 = null;
				switch($i) {
				case 0:{
					$this7 = new hxmath_math_Vector2Default($self1->a, $self1->b);
					$a1 = $this7;
				}break;
				case 1:{
					$this8 = new hxmath_math_Vector2Default($self1->c, $self1->d);
					$a1 = $this8;
				}break;
				default:{
					throw new HException("Invalid row");
				}break;
				}
				$b1 = $basis2[$i];
				$tmp5 = null;
				$tmp6 = null;
				if($a1 === null) {
					$tmp6 = $b1 === null;
				} else {
					$tmp6 = false;
				}
				if(!$tmp6) {
					$tmp7 = null;
					$tmp8 = null;
					if($a1 !== null) {
						$tmp8 = $b1 !== null;
					} else {
						$tmp8 = false;
					}
					if($tmp8) {
						$tmp7 = $a1->x === $b1->x;
					} else {
						$tmp7 = false;
					}
					if($tmp7) {
						$tmp5 = $a1->y === $b1->y;
					} else {
						$tmp5 = false;
					}
					unset($tmp8,$tmp7);
				} else {
					$tmp5 = true;
				}
				$this->assertTrue($tmp5, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 395, "className" => "test.TestStructures", "methodName" => "testRowColAccessors")));
				unset($tmp6,$tmp5,$tmp2,$tmp1,$this6,$this3,$self1,$self,$i,$b1,$b,$a1,$a);
			}
		}
		$this9 = new hxmath_math_Vector3Default(1.0, 0.0, 0.0);
		$tmp9 = $this9;
		$this10 = new hxmath_math_Vector3Default(0.0, 1.0, 0.0);
		$basis32Rows = (new _hx_array(array($tmp9, $this10)));
		$this11 = new hxmath_math_Vector2Default(1.0, 0.0);
		$tmp10 = $this11;
		$this12 = new hxmath_math_Vector2Default(0.0, 1.0);
		$tmp11 = $this12;
		$this13 = new hxmath_math_Vector2Default(0.0, 0.0);
		$basis32Cols = (new _hx_array(array($tmp10, $tmp11, $this13)));
		{
			$_g1 = 0;
			while($_g1 < 2) {
				$i1 = $_g1++;
				$this14 = new hxmath_math_Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0);
				$self2 = $this14;
				$a2 = null;
				switch($i1) {
				case 0:{
					$this15 = new hxmath_math_Vector3Default($self2->a, $self2->b, $self2->tx);
					$a2 = $this15;
				}break;
				case 1:{
					$this16 = new hxmath_math_Vector3Default($self2->c, $self2->d, $self2->ty);
					$a2 = $this16;
				}break;
				default:{
					throw new HException("Invalid row");
				}break;
				}
				$b2 = $basis32Rows[$i1];
				$tmp12 = null;
				$tmp13 = null;
				if($a2 === null) {
					$tmp13 = $b2 === null;
				} else {
					$tmp13 = false;
				}
				if(!$tmp13) {
					$tmp14 = null;
					$tmp15 = null;
					$tmp16 = null;
					if($a2 !== null) {
						$tmp16 = $b2 !== null;
					} else {
						$tmp16 = false;
					}
					if($tmp16) {
						$tmp15 = $a2->x === $b2->x;
					} else {
						$tmp15 = false;
					}
					if($tmp15) {
						$tmp14 = $a2->y === $b2->y;
					} else {
						$tmp14 = false;
					}
					if($tmp14) {
						$tmp12 = $a2->z === $b2->z;
					} else {
						$tmp12 = false;
					}
					unset($tmp16,$tmp15,$tmp14);
				} else {
					$tmp12 = true;
				}
				$this->assertTrue($tmp12, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 403, "className" => "test.TestStructures", "methodName" => "testRowColAccessors")));
				unset($tmp13,$tmp12,$this14,$self2,$i1,$b2,$a2);
			}
		}
		{
			$_g2 = 0;
			while($_g2 < 3) {
				$i2 = $_g2++;
				$this17 = new hxmath_math_Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0);
				$self3 = $this17;
				$a3 = null;
				switch($i2) {
				case 0:{
					$this18 = new hxmath_math_Vector2Default($self3->a, $self3->c);
					$a3 = $this18;
				}break;
				case 1:{
					$this19 = new hxmath_math_Vector2Default($self3->b, $self3->d);
					$a3 = $this19;
				}break;
				case 2:{
					$this20 = new hxmath_math_Vector2Default($self3->tx, $self3->ty);
					$a3 = $this20;
				}break;
				default:{
					throw new HException("Invalid column");
				}break;
				}
				$b3 = $basis32Cols[$i2];
				$tmp17 = null;
				$tmp18 = null;
				if($a3 === null) {
					$tmp18 = $b3 === null;
				} else {
					$tmp18 = false;
				}
				if(!$tmp18) {
					$tmp19 = null;
					$tmp20 = null;
					if($a3 !== null) {
						$tmp20 = $b3 !== null;
					} else {
						$tmp20 = false;
					}
					if($tmp20) {
						$tmp19 = $a3->x === $b3->x;
					} else {
						$tmp19 = false;
					}
					if($tmp19) {
						$tmp17 = $a3->y === $b3->y;
					} else {
						$tmp17 = false;
					}
					unset($tmp20,$tmp19);
				} else {
					$tmp17 = true;
				}
				$this->assertTrue($tmp17, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 408, "className" => "test.TestStructures", "methodName" => "testRowColAccessors")));
				unset($tmp18,$tmp17,$this17,$self3,$i2,$b3,$a3);
			}
		}
		$this21 = new hxmath_math_Vector3Default(1.0, 0.0, 0.0);
		$tmp21 = $this21;
		$this22 = new hxmath_math_Vector3Default(0.0, 1.0, 0.0);
		$tmp22 = $this22;
		$this23 = new hxmath_math_Vector3Default(0.0, 0.0, 1.0);
		$basis3 = (new _hx_array(array($tmp21, $tmp22, $this23)));
		{
			$_g3 = 0;
			while($_g3 < 3) {
				$i3 = $_g3++;
				$this24 = new hxmath_math_Matrix3x3Default(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0);
				$self4 = $this24;
				$a4 = null;
				switch($i3) {
				case 0:{
					$this25 = new hxmath_math_Vector3Default($self4->m00, $self4->m01, $self4->m02);
					$a4 = $this25;
				}break;
				case 1:{
					$this26 = new hxmath_math_Vector3Default($self4->m10, $self4->m11, $self4->m12);
					$a4 = $this26;
				}break;
				case 2:{
					$this27 = new hxmath_math_Vector3Default($self4->m20, $self4->m21, $self4->m22);
					$a4 = $this27;
				}break;
				default:{
					throw new HException("Invalid column");
				}break;
				}
				$b4 = $basis3[$i3];
				$tmp23 = null;
				$tmp24 = null;
				if($a4 === null) {
					$tmp24 = $b4 === null;
				} else {
					$tmp24 = false;
				}
				if(!$tmp24) {
					$tmp25 = null;
					$tmp26 = null;
					$tmp27 = null;
					if($a4 !== null) {
						$tmp27 = $b4 !== null;
					} else {
						$tmp27 = false;
					}
					if($tmp27) {
						$tmp26 = $a4->x === $b4->x;
					} else {
						$tmp26 = false;
					}
					if($tmp26) {
						$tmp25 = $a4->y === $b4->y;
					} else {
						$tmp25 = false;
					}
					if($tmp25) {
						$tmp23 = $a4->z === $b4->z;
					} else {
						$tmp23 = false;
					}
					unset($tmp27,$tmp26,$tmp25);
				} else {
					$tmp23 = true;
				}
				$this->assertTrue($tmp23, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 415, "className" => "test.TestStructures", "methodName" => "testRowColAccessors")));
				$this28 = new hxmath_math_Matrix3x3Default(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0);
				$self5 = $this28;
				$a5 = null;
				switch($i3) {
				case 0:{
					$this29 = new hxmath_math_Vector3Default($self5->m00, $self5->m10, $self5->m20);
					$a5 = $this29;
				}break;
				case 1:{
					$this30 = new hxmath_math_Vector3Default($self5->m01, $self5->m11, $self5->m21);
					$a5 = $this30;
				}break;
				case 2:{
					$this31 = new hxmath_math_Vector3Default($self5->m02, $self5->m12, $self5->m22);
					$a5 = $this31;
				}break;
				default:{
					throw new HException("Invalid row");
				}break;
				}
				$b5 = $basis3[$i3];
				$tmp28 = null;
				$tmp29 = null;
				if($a5 === null) {
					$tmp29 = $b5 === null;
				} else {
					$tmp29 = false;
				}
				if(!$tmp29) {
					$tmp30 = null;
					$tmp31 = null;
					$tmp32 = null;
					if($a5 !== null) {
						$tmp32 = $b5 !== null;
					} else {
						$tmp32 = false;
					}
					if($tmp32) {
						$tmp31 = $a5->x === $b5->x;
					} else {
						$tmp31 = false;
					}
					if($tmp31) {
						$tmp30 = $a5->y === $b5->y;
					} else {
						$tmp30 = false;
					}
					if($tmp30) {
						$tmp28 = $a5->z === $b5->z;
					} else {
						$tmp28 = false;
					}
					unset($tmp32,$tmp31,$tmp30);
				} else {
					$tmp28 = true;
				}
				$this->assertTrue($tmp28, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 416, "className" => "test.TestStructures", "methodName" => "testRowColAccessors")));
				unset($tmp29,$tmp28,$tmp24,$tmp23,$this28,$this24,$self5,$self4,$i3,$b5,$b4,$a5,$a4);
			}
		}
		$this32 = new hxmath_math_Vector4Default(1.0, 0.0, 0.0, 0.0);
		$tmp33 = $this32;
		$this33 = new hxmath_math_Vector4Default(0.0, 1.0, 0.0, 0.0);
		$tmp34 = $this33;
		$this34 = new hxmath_math_Vector4Default(0.0, 0.0, 1.0, 0.0);
		$tmp35 = $this34;
		$this35 = new hxmath_math_Vector4Default(0.0, 0.0, 0.0, 1.0);
		$basis4 = (new _hx_array(array($tmp33, $tmp34, $tmp35, $this35)));
		{
			$_g4 = 0;
			while($_g4 < 4) {
				$i4 = $_g4++;
				$this36 = new hxmath_math_Matrix4x4Default(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);
				$self6 = $this36;
				$a6 = null;
				switch($i4) {
				case 0:{
					$this37 = new hxmath_math_Vector4Default($self6->m00, $self6->m01, $self6->m02, $self6->m03);
					$a6 = $this37;
				}break;
				case 1:{
					$this38 = new hxmath_math_Vector4Default($self6->m10, $self6->m11, $self6->m12, $self6->m13);
					$a6 = $this38;
				}break;
				case 2:{
					$this39 = new hxmath_math_Vector4Default($self6->m20, $self6->m21, $self6->m22, $self6->m23);
					$a6 = $this39;
				}break;
				case 3:{
					$this40 = new hxmath_math_Vector4Default($self6->m30, $self6->m31, $self6->m32, $self6->m33);
					$a6 = $this40;
				}break;
				default:{
					throw new HException("Invalid column");
				}break;
				}
				$b6 = $basis4[$i4];
				$tmp36 = null;
				$tmp37 = null;
				if($a6 === null) {
					$tmp37 = $b6 === null;
				} else {
					$tmp37 = false;
				}
				if(!$tmp37) {
					$tmp38 = null;
					$tmp39 = null;
					$tmp40 = null;
					$tmp41 = null;
					if($a6 !== null) {
						$tmp41 = $b6 !== null;
					} else {
						$tmp41 = false;
					}
					if($tmp41) {
						$tmp40 = $a6->x === $b6->x;
					} else {
						$tmp40 = false;
					}
					if($tmp40) {
						$tmp39 = $a6->y === $b6->y;
					} else {
						$tmp39 = false;
					}
					if($tmp39) {
						$tmp38 = $a6->z === $b6->z;
					} else {
						$tmp38 = false;
					}
					if($tmp38) {
						$tmp36 = $a6->w === $b6->w;
					} else {
						$tmp36 = false;
					}
					unset($tmp41,$tmp40,$tmp39,$tmp38);
				} else {
					$tmp36 = true;
				}
				$this->assertTrue($tmp36, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 423, "className" => "test.TestStructures", "methodName" => "testRowColAccessors")));
				$this41 = new hxmath_math_Matrix4x4Default(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);
				$self7 = $this41;
				$a7 = null;
				switch($i4) {
				case 0:{
					$this42 = new hxmath_math_Vector4Default($self7->m00, $self7->m10, $self7->m20, $self7->m30);
					$a7 = $this42;
				}break;
				case 1:{
					$this43 = new hxmath_math_Vector4Default($self7->m01, $self7->m11, $self7->m21, $self7->m31);
					$a7 = $this43;
				}break;
				case 2:{
					$this44 = new hxmath_math_Vector4Default($self7->m02, $self7->m12, $self7->m22, $self7->m32);
					$a7 = $this44;
				}break;
				case 3:{
					$this45 = new hxmath_math_Vector4Default($self7->m03, $self7->m13, $self7->m23, $self7->m33);
					$a7 = $this45;
				}break;
				default:{
					throw new HException("Invalid row");
				}break;
				}
				$b7 = $basis4[$i4];
				$tmp42 = null;
				$tmp43 = null;
				if($a7 === null) {
					$tmp43 = $b7 === null;
				} else {
					$tmp43 = false;
				}
				if(!$tmp43) {
					$tmp44 = null;
					$tmp45 = null;
					$tmp46 = null;
					$tmp47 = null;
					if($a7 !== null) {
						$tmp47 = $b7 !== null;
					} else {
						$tmp47 = false;
					}
					if($tmp47) {
						$tmp46 = $a7->x === $b7->x;
					} else {
						$tmp46 = false;
					}
					if($tmp46) {
						$tmp45 = $a7->y === $b7->y;
					} else {
						$tmp45 = false;
					}
					if($tmp45) {
						$tmp44 = $a7->z === $b7->z;
					} else {
						$tmp44 = false;
					}
					if($tmp44) {
						$tmp42 = $a7->w === $b7->w;
					} else {
						$tmp42 = false;
					}
					unset($tmp47,$tmp46,$tmp45,$tmp44);
				} else {
					$tmp42 = true;
				}
				$this->assertTrue($tmp42, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 424, "className" => "test.TestStructures", "methodName" => "testRowColAccessors")));
				unset($tmp43,$tmp42,$tmp37,$tmp36,$this41,$this36,$self7,$self6,$i4,$b7,$b6,$a7,$a6);
			}
		}
	}
	public function testEqualsNullShouldNotThrow() {
		$this1 = new hxmath_math_Vector2Default(0.0, 0.0);
		$this->assertTrue($this1 !== null, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 433, "className" => "test.TestStructures", "methodName" => "testEqualsNullShouldNotThrow")));
		$this2 = new hxmath_math_Vector3Default(0.0, 0.0, 0.0);
		$this->assertTrue($this2 !== null, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 434, "className" => "test.TestStructures", "methodName" => "testEqualsNullShouldNotThrow")));
		$this3 = new hxmath_math_Vector4Default(0.0, 0.0, 0.0, 0.0);
		$this->assertTrue($this3 !== null, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 435, "className" => "test.TestStructures", "methodName" => "testEqualsNullShouldNotThrow")));
		$this4 = new hxmath_math_Matrix2x2Default(0.0, 0.0, 0.0, 0.0);
		$this->assertTrue($this4 !== null, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 436, "className" => "test.TestStructures", "methodName" => "testEqualsNullShouldNotThrow")));
		$this5 = new hxmath_math_Matrix3x2Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		$this->assertTrue($this5 !== null, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 437, "className" => "test.TestStructures", "methodName" => "testEqualsNullShouldNotThrow")));
		$this6 = new hxmath_math_Matrix3x3Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		$this->assertTrue($this6 !== null, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 438, "className" => "test.TestStructures", "methodName" => "testEqualsNullShouldNotThrow")));
		$this7 = new hxmath_math_Matrix4x4Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		$this->assertTrue($this7 !== null, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 439, "className" => "test.TestStructures", "methodName" => "testEqualsNullShouldNotThrow")));
		$this8 = new hxmath_math_QuaternionDefault(0, 0, 0, 0);
		$this->assertTrue($this8 !== null, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 440, "className" => "test.TestStructures", "methodName" => "testEqualsNullShouldNotThrow")));
		$this->assertTrue(hxmath_math__IntVector2_IntVector2_Impl_::_new(0, 0) !== null, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 441, "className" => "test.TestStructures", "methodName" => "testEqualsNullShouldNotThrow")));
	}
	public function testHasToString() {
		$this1 = new hxmath_math_Vector2Default(0, 23);
		$tmp = $this1;
		$this2 = new hxmath_math_Vector3Default(0, 23, 0);
		$tmp1 = $this2;
		$this3 = new hxmath_math_Vector4Default(0, 23, 0, 0);
		$tmp2 = $this3;
		$this4 = new hxmath_math_Matrix2x2Default(0, 0, 23, 0);
		$tmp3 = $this4;
		$this5 = new hxmath_math_Matrix3x2Default(0, 0, 23, 0, 0, 0);
		$tmp4 = $this5;
		$this6 = new hxmath_math_Matrix3x3Default(0, 0, 23, 0, 0, 0, 0, 0, 0);
		$tmp5 = $this6;
		$this7 = new hxmath_math_Matrix4x4Default(0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
		$tmp6 = $this7;
		$this8 = new hxmath_math_QuaternionDefault(1, 0, 23, 0);
		$structures = (new _hx_array(array($tmp, $tmp1, $tmp2, $tmp3, $tmp4, $tmp5, $tmp6, $this8, hxmath_math__IntVector2_IntVector2_Impl_::_new(0, 23))));
		{
			$_g = 0;
			while($_g < $structures->length) {
				$x = $structures[$_g];
				++$_g;
				$tmp7 = Std::string($x);
				$tmp8 = _hx_index_of(("" . _hx_string_or_null($tmp7)), "23", null);
				if($tmp8 === -1) {
					haxe_Log::trace($x, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 461, "className" => "test.TestStructures", "methodName" => "testHasToString")));
					$this->assertTrue(false, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 462, "className" => "test.TestStructures", "methodName" => "testHasToString")));
				}
				unset($x,$tmp8,$tmp7);
			}
		}
	}
	public function testVectorMinMax() {
		$this1 = new hxmath_math_Vector2Default(1.0, 0.0);
		$tmp = $this1;
		$this2 = new hxmath_math_Vector2Default(0.0, 1.0);
		$v2Axes = (new _hx_array(array($tmp, $this2)));
		$this3 = new hxmath_math_Vector2Default(1.0, 0.0);
		$v2AxesMax = Lambda::fold($v2Axes, (isset(hxmath_math__Vector2_Vector2_Impl_::$max) ? hxmath_math__Vector2_Vector2_Impl_::$max: array("hxmath_math__Vector2_Vector2_Impl_", "max")), $this3);
		$this4 = new hxmath_math_Vector2Default(1.0, 0.0);
		$v2AxesMin = Lambda::fold($v2Axes, (isset(hxmath_math__Vector2_Vector2_Impl_::$min) ? hxmath_math__Vector2_Vector2_Impl_::$min: array("hxmath_math__Vector2_Vector2_Impl_", "min")), $this4);
		$this5 = new hxmath_math_Vector2Default(0.0, 0.0);
		$v2AxesSum = Lambda::fold($v2Axes, (isset(hxmath_math__Vector2_Vector2_Impl_::$add) ? hxmath_math__Vector2_Vector2_Impl_::$add: array("hxmath_math__Vector2_Vector2_Impl_", "add")), $this5);
		$tmp1 = null;
		$tmp2 = null;
		if($v2AxesMax === null) {
			$tmp2 = $v2AxesSum === null;
		} else {
			$tmp2 = false;
		}
		if(!$tmp2) {
			$tmp3 = null;
			$tmp4 = null;
			if($v2AxesMax !== null) {
				$tmp4 = $v2AxesSum !== null;
			} else {
				$tmp4 = false;
			}
			if($tmp4) {
				$tmp3 = $v2AxesMax->x === $v2AxesSum->x;
			} else {
				$tmp3 = false;
			}
			if($tmp3) {
				$tmp1 = $v2AxesMax->y === $v2AxesSum->y;
			} else {
				$tmp1 = false;
			}
		} else {
			$tmp1 = true;
		}
		$this->assertTrue($tmp1, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 474, "className" => "test.TestStructures", "methodName" => "testVectorMinMax")));
		$this6 = new hxmath_math_Vector2Default(0.0, 0.0);
		$b = $this6;
		$tmp5 = null;
		$tmp6 = null;
		if($v2AxesMin === null) {
			$tmp6 = $b === null;
		} else {
			$tmp6 = false;
		}
		if(!$tmp6) {
			$tmp7 = null;
			$tmp8 = null;
			if($v2AxesMin !== null) {
				$tmp8 = $b !== null;
			} else {
				$tmp8 = false;
			}
			if($tmp8) {
				$tmp7 = $v2AxesMin->x === $b->x;
			} else {
				$tmp7 = false;
			}
			if($tmp7) {
				$tmp5 = $v2AxesMin->y === $b->y;
			} else {
				$tmp5 = false;
			}
		} else {
			$tmp5 = true;
		}
		$this->assertTrue($tmp5, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 475, "className" => "test.TestStructures", "methodName" => "testVectorMinMax")));
		$this7 = new hxmath_math_Vector3Default(1.0, 0.0, 0.0);
		$tmp9 = $this7;
		$this8 = new hxmath_math_Vector3Default(0.0, 1.0, 0.0);
		$tmp10 = $this8;
		$this9 = new hxmath_math_Vector3Default(0.0, 0.0, 1.0);
		$v3Axes = (new _hx_array(array($tmp9, $tmp10, $this9)));
		$this10 = new hxmath_math_Vector3Default(1.0, 0.0, 0.0);
		$v3AxesMax = Lambda::fold($v3Axes, (isset(hxmath_math__Vector3_Vector3_Impl_::$max) ? hxmath_math__Vector3_Vector3_Impl_::$max: array("hxmath_math__Vector3_Vector3_Impl_", "max")), $this10);
		$this11 = new hxmath_math_Vector3Default(1.0, 0.0, 0.0);
		$v3AxesMin = Lambda::fold($v3Axes, (isset(hxmath_math__Vector3_Vector3_Impl_::$min) ? hxmath_math__Vector3_Vector3_Impl_::$min: array("hxmath_math__Vector3_Vector3_Impl_", "min")), $this11);
		$this12 = new hxmath_math_Vector3Default(0.0, 0.0, 0.0);
		$v3AxesSum = Lambda::fold($v3Axes, (isset(hxmath_math__Vector3_Vector3_Impl_::$add) ? hxmath_math__Vector3_Vector3_Impl_::$add: array("hxmath_math__Vector3_Vector3_Impl_", "add")), $this12);
		$tmp11 = null;
		$tmp12 = null;
		if($v3AxesMax === null) {
			$tmp12 = $v3AxesSum === null;
		} else {
			$tmp12 = false;
		}
		if(!$tmp12) {
			$tmp13 = null;
			$tmp14 = null;
			$tmp15 = null;
			if($v3AxesMax !== null) {
				$tmp15 = $v3AxesSum !== null;
			} else {
				$tmp15 = false;
			}
			if($tmp15) {
				$tmp14 = $v3AxesMax->x === $v3AxesSum->x;
			} else {
				$tmp14 = false;
			}
			if($tmp14) {
				$tmp13 = $v3AxesMax->y === $v3AxesSum->y;
			} else {
				$tmp13 = false;
			}
			if($tmp13) {
				$tmp11 = $v3AxesMax->z === $v3AxesSum->z;
			} else {
				$tmp11 = false;
			}
		} else {
			$tmp11 = true;
		}
		$this->assertTrue($tmp11, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 482, "className" => "test.TestStructures", "methodName" => "testVectorMinMax")));
		$this13 = new hxmath_math_Vector3Default(0.0, 0.0, 0.0);
		$b1 = $this13;
		$tmp16 = null;
		$tmp17 = null;
		if($v3AxesMin === null) {
			$tmp17 = $b1 === null;
		} else {
			$tmp17 = false;
		}
		if(!$tmp17) {
			$tmp18 = null;
			$tmp19 = null;
			$tmp20 = null;
			if($v3AxesMin !== null) {
				$tmp20 = $b1 !== null;
			} else {
				$tmp20 = false;
			}
			if($tmp20) {
				$tmp19 = $v3AxesMin->x === $b1->x;
			} else {
				$tmp19 = false;
			}
			if($tmp19) {
				$tmp18 = $v3AxesMin->y === $b1->y;
			} else {
				$tmp18 = false;
			}
			if($tmp18) {
				$tmp16 = $v3AxesMin->z === $b1->z;
			} else {
				$tmp16 = false;
			}
		} else {
			$tmp16 = true;
		}
		$this->assertTrue($tmp16, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 483, "className" => "test.TestStructures", "methodName" => "testVectorMinMax")));
		$this14 = new hxmath_math_Vector4Default(1.0, 0.0, 0.0, 0.0);
		$tmp21 = $this14;
		$this15 = new hxmath_math_Vector4Default(0.0, 1.0, 0.0, 0.0);
		$tmp22 = $this15;
		$this16 = new hxmath_math_Vector4Default(0.0, 0.0, 1.0, 0.0);
		$tmp23 = $this16;
		$this17 = new hxmath_math_Vector4Default(0.0, 0.0, 0.0, 1.0);
		$v4Axes = (new _hx_array(array($tmp21, $tmp22, $tmp23, $this17)));
		$this18 = new hxmath_math_Vector4Default(1.0, 0.0, 0.0, 0.0);
		$v4AxesMax = Lambda::fold($v4Axes, (isset(hxmath_math__Vector4_Vector4_Impl_::$max) ? hxmath_math__Vector4_Vector4_Impl_::$max: array("hxmath_math__Vector4_Vector4_Impl_", "max")), $this18);
		$this19 = new hxmath_math_Vector4Default(1.0, 0.0, 0.0, 0.0);
		$v4AxesMin = Lambda::fold($v4Axes, (isset(hxmath_math__Vector4_Vector4_Impl_::$min) ? hxmath_math__Vector4_Vector4_Impl_::$min: array("hxmath_math__Vector4_Vector4_Impl_", "min")), $this19);
		$this20 = new hxmath_math_Vector4Default(0.0, 0.0, 0.0, 0.0);
		$v4AxesSum = Lambda::fold($v4Axes, (isset(hxmath_math__Vector4_Vector4_Impl_::$add) ? hxmath_math__Vector4_Vector4_Impl_::$add: array("hxmath_math__Vector4_Vector4_Impl_", "add")), $this20);
		$tmp24 = null;
		$tmp25 = null;
		if($v4AxesMax === null) {
			$tmp25 = $v4AxesSum === null;
		} else {
			$tmp25 = false;
		}
		if(!$tmp25) {
			$tmp26 = null;
			$tmp27 = null;
			$tmp28 = null;
			$tmp29 = null;
			if($v4AxesMax !== null) {
				$tmp29 = $v4AxesSum !== null;
			} else {
				$tmp29 = false;
			}
			if($tmp29) {
				$tmp28 = $v4AxesMax->x === $v4AxesSum->x;
			} else {
				$tmp28 = false;
			}
			if($tmp28) {
				$tmp27 = $v4AxesMax->y === $v4AxesSum->y;
			} else {
				$tmp27 = false;
			}
			if($tmp27) {
				$tmp26 = $v4AxesMax->z === $v4AxesSum->z;
			} else {
				$tmp26 = false;
			}
			if($tmp26) {
				$tmp24 = $v4AxesMax->w === $v4AxesSum->w;
			} else {
				$tmp24 = false;
			}
		} else {
			$tmp24 = true;
		}
		$this->assertTrue($tmp24, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 490, "className" => "test.TestStructures", "methodName" => "testVectorMinMax")));
		$this21 = new hxmath_math_Vector4Default(0.0, 0.0, 0.0, 0.0);
		$b2 = $this21;
		$tmp30 = null;
		$tmp31 = null;
		if($v4AxesMin === null) {
			$tmp31 = $b2 === null;
		} else {
			$tmp31 = false;
		}
		if(!$tmp31) {
			$tmp32 = null;
			$tmp33 = null;
			$tmp34 = null;
			$tmp35 = null;
			if($v4AxesMin !== null) {
				$tmp35 = $b2 !== null;
			} else {
				$tmp35 = false;
			}
			if($tmp35) {
				$tmp34 = $v4AxesMin->x === $b2->x;
			} else {
				$tmp34 = false;
			}
			if($tmp34) {
				$tmp33 = $v4AxesMin->y === $b2->y;
			} else {
				$tmp33 = false;
			}
			if($tmp33) {
				$tmp32 = $v4AxesMin->z === $b2->z;
			} else {
				$tmp32 = false;
			}
			if($tmp32) {
				$tmp30 = $v4AxesMin->w === $b2->w;
			} else {
				$tmp30 = false;
			}
		} else {
			$tmp30 = true;
		}
		$this->assertTrue($tmp30, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 491, "className" => "test.TestStructures", "methodName" => "testVectorMinMax")));
		$v2iAxes = (new _hx_array(array(hxmath_math__IntVector2_IntVector2_Impl_::_new(1, 0), hxmath_math__IntVector2_IntVector2_Impl_::_new(0, 1))));
		$v2iAxesMax = Lambda::fold($v2iAxes, (isset(hxmath_math__IntVector2_IntVector2_Impl_::$max) ? hxmath_math__IntVector2_IntVector2_Impl_::$max: array("hxmath_math__IntVector2_IntVector2_Impl_", "max")), hxmath_math__IntVector2_IntVector2_Impl_::_new(1, 0));
		$v2iAxesMin = Lambda::fold($v2iAxes, (isset(hxmath_math__IntVector2_IntVector2_Impl_::$min) ? hxmath_math__IntVector2_IntVector2_Impl_::$min: array("hxmath_math__IntVector2_IntVector2_Impl_", "min")), hxmath_math__IntVector2_IntVector2_Impl_::_new(1, 0));
		$v2iAxesSum = Lambda::fold($v2iAxes, (isset(hxmath_math__IntVector2_IntVector2_Impl_::$add) ? hxmath_math__IntVector2_IntVector2_Impl_::$add: array("hxmath_math__IntVector2_IntVector2_Impl_", "add")), hxmath_math__IntVector2_IntVector2_Impl_::_new(0, 0));
		$tmp36 = null;
		$tmp37 = null;
		if($v2iAxesMax === null) {
			$tmp37 = $v2iAxesSum === null;
		} else {
			$tmp37 = false;
		}
		if(!$tmp37) {
			$tmp38 = null;
			$tmp39 = null;
			if($v2iAxesMax !== null) {
				$tmp39 = $v2iAxesSum !== null;
			} else {
				$tmp39 = false;
			}
			if($tmp39) {
				$tmp38 = $v2iAxesMax->x === $v2iAxesSum->x;
			} else {
				$tmp38 = false;
			}
			if($tmp38) {
				$tmp36 = $v2iAxesMax->y === $v2iAxesSum->y;
			} else {
				$tmp36 = false;
			}
		} else {
			$tmp36 = true;
		}
		$this->assertTrue($tmp36, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 498, "className" => "test.TestStructures", "methodName" => "testVectorMinMax")));
		$b3 = hxmath_math__IntVector2_IntVector2_Impl_::_new(0, 0);
		$tmp40 = null;
		$tmp41 = null;
		if($v2iAxesMin === null) {
			$tmp41 = $b3 === null;
		} else {
			$tmp41 = false;
		}
		if(!$tmp41) {
			$tmp42 = null;
			$tmp43 = null;
			if($v2iAxesMin !== null) {
				$tmp43 = $b3 !== null;
			} else {
				$tmp43 = false;
			}
			if($tmp43) {
				$tmp42 = $v2iAxesMin->x === $b3->x;
			} else {
				$tmp42 = false;
			}
			if($tmp42) {
				$tmp40 = $v2iAxesMin->y === $b3->y;
			} else {
				$tmp40 = false;
			}
		} else {
			$tmp40 = true;
		}
		$this->assertTrue($tmp40, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 499, "className" => "test.TestStructures", "methodName" => "testVectorMinMax")));
		$tmp44 = hxmath_math__ShortVector2_ShortVector2_Impl_::_new(1, 0);
		$tmp45 = hxmath_math__ShortVector2_ShortVector2_Impl_::_new(0, 1);
		$v2sAxes = (new _hx_array(array($tmp44, $tmp45)));
		$tmp46 = hxmath_math__ShortVector2_ShortVector2_Impl_::_new(1, 0);
		$v2sAxesMax = Lambda::fold($v2sAxes, (isset(hxmath_math__ShortVector2_ShortVector2_Impl_::$max) ? hxmath_math__ShortVector2_ShortVector2_Impl_::$max: array("hxmath_math__ShortVector2_ShortVector2_Impl_", "max")), $tmp46);
		$tmp47 = hxmath_math__ShortVector2_ShortVector2_Impl_::_new(1, 0);
		$v2sAxesMin = Lambda::fold($v2sAxes, (isset(hxmath_math__ShortVector2_ShortVector2_Impl_::$min) ? hxmath_math__ShortVector2_ShortVector2_Impl_::$min: array("hxmath_math__ShortVector2_ShortVector2_Impl_", "min")), $tmp47);
		$tmp48 = hxmath_math__ShortVector2_ShortVector2_Impl_::_new(0, 0);
		$v2sAxesSum = Lambda::fold($v2sAxes, (isset(hxmath_math__ShortVector2_ShortVector2_Impl_::$add) ? hxmath_math__ShortVector2_ShortVector2_Impl_::$add: array("hxmath_math__ShortVector2_ShortVector2_Impl_", "add")), $tmp48);
		$this->assertTrue($v2sAxesMax === $v2sAxesSum, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 506, "className" => "test.TestStructures", "methodName" => "testVectorMinMax")));
		$tmp49 = hxmath_math__ShortVector2_ShortVector2_Impl_::_new(0, 0);
		$this->assertTrue($v2sAxesMin === $tmp49, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 507, "className" => "test.TestStructures", "methodName" => "testVectorMinMax")));
	}
	public function testVectorProj() {
		$this1 = new hxmath_math_Vector2Default(1.0, 0.0);
		$a = $this1;
		$this2 = new hxmath_math_Vector2Default(0.0, 1.0);
		$b = $this2;
		$this3 = new hxmath_math_Vector2Default($a->x, $a->y);
		$self = $this3;
		$s = ($self->x * $b->x + $self->y * $b->y) / ($b->x * $b->x + $b->y * $b->y);
		{
			$_g = 0;
			while($_g < 2) {
				$i = $_g++;
				{
					$tmp = null;
					switch($i) {
					case 0:{
						$tmp = $b->x;
					}break;
					case 1:{
						$tmp = $b->y;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					$value = $tmp;
					switch($i) {
					case 0:{
						$self->x = $value;
					}break;
					case 1:{
						$self->y = $value;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					unset($value,$tmp);
				}
				unset($i);
			}
		}
		{
			$self->x *= $s;
			$self->y *= $s;
		}
		$this4 = new hxmath_math_Vector2Default(0.0, 0.0);
		$b1 = $this4;
		$tmp1 = null;
		$tmp2 = null;
		if($self === null) {
			$tmp2 = $b1 === null;
		} else {
			$tmp2 = false;
		}
		if(!$tmp2) {
			$tmp3 = null;
			$tmp4 = null;
			if($self !== null) {
				$tmp4 = $b1 !== null;
			} else {
				$tmp4 = false;
			}
			if($tmp4) {
				$tmp3 = $self->x === $b1->x;
			} else {
				$tmp3 = false;
			}
			if($tmp3) {
				$tmp1 = $self->y === $b1->y;
			} else {
				$tmp1 = false;
			}
		} else {
			$tmp1 = true;
		}
		$this->assertTrue($tmp1, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 514, "className" => "test.TestStructures", "methodName" => "testVectorProj")));
		$this5 = new hxmath_math_Vector2Default(0.5, 0.5);
		$v2Mid = $this5;
		$this6 = new hxmath_math_Vector2Default(1.0, 0.0);
		$tmp5 = $this6;
		$this7 = new hxmath_math_Vector2Default(0.0, 1.0);
		$v2MidProjOntoAxes = Lambda::map((new _hx_array(array($tmp5, $this7))), array(new _hx_lambda(array(&$v2Mid), "test_TestStructures_1"), 'execute'));
		{
			$tmp7 = $v2MidProjOntoAxes->iterator();
			while(true) {
				$tmp8 = !$tmp7->hasNext();
				if($tmp8) {
					break;
				}
				$v = $tmp7->next();
				$tmp9 = $v->x * $v->x + $v->y * $v->y;
				$tmp10 = Math::sqrt($tmp9);
				$this->assertApproxEquals(0.5, $tmp10, null, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 522, "className" => "test.TestStructures", "methodName" => "testVectorProj")));
				unset($v,$tmp9,$tmp8,$tmp10);
			}
		}
		$this9 = new hxmath_math_Vector3Default(1.0, 0.0, 0.0);
		$a2 = $this9;
		$this10 = new hxmath_math_Vector3Default(0.0, 1.0, 0.0);
		$b2 = $this10;
		$this11 = new hxmath_math_Vector3Default($a2->x, $a2->y, $a2->z);
		$self3 = $this11;
		$s2 = ($self3->x * $b2->x + $self3->y * $b2->y + $self3->z * $b2->z) / ($b2->x * $b2->x + $b2->y * $b2->y + $b2->z * $b2->z);
		{
			$_g2 = 0;
			while($_g2 < 3) {
				$i2 = $_g2++;
				{
					$tmp11 = null;
					switch($i2) {
					case 0:{
						$tmp11 = $b2->x;
					}break;
					case 1:{
						$tmp11 = $b2->y;
					}break;
					case 2:{
						$tmp11 = $b2->z;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					$value2 = $tmp11;
					switch($i2) {
					case 0:{
						$self3->x = $value2;
					}break;
					case 1:{
						$self3->y = $value2;
					}break;
					case 2:{
						$self3->z = $value2;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					unset($value2,$tmp11);
				}
				unset($i2);
			}
		}
		{
			$self3->x *= $s2;
			$self3->y *= $s2;
			$self3->z *= $s2;
		}
		$this12 = new hxmath_math_Vector3Default(1.0, 0.0, 0.0);
		$a3 = $this12;
		$this13 = new hxmath_math_Vector3Default(0.0, 0.0, 1.0);
		$b3 = $this13;
		$this14 = new hxmath_math_Vector3Default($a3->x, $a3->y, $a3->z);
		$self4 = $this14;
		$s3 = ($self4->x * $b3->x + $self4->y * $b3->y + $self4->z * $b3->z) / ($b3->x * $b3->x + $b3->y * $b3->y + $b3->z * $b3->z);
		{
			$_g3 = 0;
			while($_g3 < 3) {
				$i3 = $_g3++;
				{
					$tmp12 = null;
					switch($i3) {
					case 0:{
						$tmp12 = $b3->x;
					}break;
					case 1:{
						$tmp12 = $b3->y;
					}break;
					case 2:{
						$tmp12 = $b3->z;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					$value3 = $tmp12;
					switch($i3) {
					case 0:{
						$self4->x = $value3;
					}break;
					case 1:{
						$self4->y = $value3;
					}break;
					case 2:{
						$self4->z = $value3;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					unset($value3,$tmp12);
				}
				unset($i3);
			}
		}
		{
			$self4->x *= $s3;
			$self4->y *= $s3;
			$self4->z *= $s3;
		}
		$this15 = new hxmath_math_Vector3Default(0.0, 1.0, 0.0);
		$a4 = $this15;
		$this16 = new hxmath_math_Vector3Default(0.0, 0.0, 1.0);
		$b4 = $this16;
		$this17 = new hxmath_math_Vector3Default($a4->x, $a4->y, $a4->z);
		$self5 = $this17;
		$s4 = ($self5->x * $b4->x + $self5->y * $b4->y + $self5->z * $b4->z) / ($b4->x * $b4->x + $b4->y * $b4->y + $b4->z * $b4->z);
		{
			$_g4 = 0;
			while($_g4 < 3) {
				$i4 = $_g4++;
				{
					$tmp13 = null;
					switch($i4) {
					case 0:{
						$tmp13 = $b4->x;
					}break;
					case 1:{
						$tmp13 = $b4->y;
					}break;
					case 2:{
						$tmp13 = $b4->z;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					$value4 = $tmp13;
					switch($i4) {
					case 0:{
						$self5->x = $value4;
					}break;
					case 1:{
						$self5->y = $value4;
					}break;
					case 2:{
						$self5->z = $value4;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					unset($value4,$tmp13);
				}
				unset($i4);
			}
		}
		{
			$self5->x *= $s4;
			$self5->y *= $s4;
			$self5->z *= $s4;
		}
		$v3AxesProj = (new _hx_array(array($self3, $self4, $self5)));
		{
			$_g5 = 0;
			while($_g5 < $v3AxesProj->length) {
				$v1 = $v3AxesProj[$_g5];
				++$_g5;
				$this18 = new hxmath_math_Vector3Default(0.0, 0.0, 0.0);
				$b5 = $this18;
				$tmp14 = null;
				$tmp15 = null;
				if($v1 === null) {
					$tmp15 = $b5 === null;
				} else {
					$tmp15 = false;
				}
				if(!$tmp15) {
					$tmp16 = null;
					$tmp17 = null;
					$tmp18 = null;
					if($v1 !== null) {
						$tmp18 = $b5 !== null;
					} else {
						$tmp18 = false;
					}
					if($tmp18) {
						$tmp17 = $v1->x === $b5->x;
					} else {
						$tmp17 = false;
					}
					if($tmp17) {
						$tmp16 = $v1->y === $b5->y;
					} else {
						$tmp16 = false;
					}
					if($tmp16) {
						$tmp14 = $v1->z === $b5->z;
					} else {
						$tmp14 = false;
					}
					unset($tmp18,$tmp17,$tmp16);
				} else {
					$tmp14 = true;
				}
				$this->assertTrue($tmp14, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 533, "className" => "test.TestStructures", "methodName" => "testVectorProj")));
				unset($v1,$tmp15,$tmp14,$this18,$b5);
			}
		}
		$this19 = new hxmath_math_Vector3Default(0.5, 0.5, 0.5);
		$v3Mid = $this19;
		$this20 = new hxmath_math_Vector3Default(1.0, 0.0, 0.0);
		$tmp19 = $this20;
		$this21 = new hxmath_math_Vector3Default(0.0, 1.0, 0.0);
		$tmp20 = $this21;
		$this22 = new hxmath_math_Vector3Default(0.0, 0.0, 1.0);
		$v3MidProjOntoAxes = Lambda::map((new _hx_array(array($tmp19, $tmp20, $this22))), array(new _hx_lambda(array(&$v3Mid), "test_TestStructures_2"), 'execute'));
		{
			$tmp22 = $v3MidProjOntoAxes->iterator();
			while(true) {
				$tmp23 = !$tmp22->hasNext();
				if($tmp23) {
					break;
				}
				$v2 = $tmp22->next();
				$tmp24 = $v2->x * $v2->x + $v2->y * $v2->y + $v2->z * $v2->z;
				$tmp25 = Math::sqrt($tmp24);
				$this->assertApproxEquals(0.5, $tmp25, null, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 542, "className" => "test.TestStructures", "methodName" => "testVectorProj")));
				unset($v2,$tmp25,$tmp24,$tmp23);
			}
		}
		$this24 = new hxmath_math_Vector4Default(1.0, 0.0, 0.0, 0.0);
		$a6 = $this24;
		$this25 = new hxmath_math_Vector4Default(0.0, 1.0, 0.0, 0.0);
		$b6 = $this25;
		$this26 = new hxmath_math_Vector4Default($a6->x, $a6->y, $a6->z, $a6->w);
		$self8 = $this26;
		$s6 = ($self8->x * $b6->x + $self8->y * $b6->y + $self8->z * $b6->z + $self8->w * $b6->w) / ($b6->x * $b6->x + $b6->y * $b6->y + $b6->z * $b6->z + $b6->w * $b6->w);
		{
			$_g7 = 0;
			while($_g7 < 4) {
				$i6 = $_g7++;
				{
					$tmp26 = null;
					switch($i6) {
					case 0:{
						$tmp26 = $b6->x;
					}break;
					case 1:{
						$tmp26 = $b6->y;
					}break;
					case 2:{
						$tmp26 = $b6->z;
					}break;
					case 3:{
						$tmp26 = $b6->w;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					$value6 = $tmp26;
					switch($i6) {
					case 0:{
						$self8->x = $value6;
					}break;
					case 1:{
						$self8->y = $value6;
					}break;
					case 2:{
						$self8->z = $value6;
					}break;
					case 3:{
						$self8->w = $value6;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					unset($value6,$tmp26);
				}
				unset($i6);
			}
		}
		{
			$self8->x *= $s6;
			$self8->y *= $s6;
			$self8->z *= $s6;
			$self8->w *= $s6;
		}
		$this27 = new hxmath_math_Vector4Default(1.0, 0.0, 0.0, 0.0);
		$a7 = $this27;
		$this28 = new hxmath_math_Vector4Default(0.0, 0.0, 1.0, 0.0);
		$b7 = $this28;
		$this29 = new hxmath_math_Vector4Default($a7->x, $a7->y, $a7->z, $a7->w);
		$self9 = $this29;
		$s7 = ($self9->x * $b7->x + $self9->y * $b7->y + $self9->z * $b7->z + $self9->w * $b7->w) / ($b7->x * $b7->x + $b7->y * $b7->y + $b7->z * $b7->z + $b7->w * $b7->w);
		{
			$_g8 = 0;
			while($_g8 < 4) {
				$i7 = $_g8++;
				{
					$tmp27 = null;
					switch($i7) {
					case 0:{
						$tmp27 = $b7->x;
					}break;
					case 1:{
						$tmp27 = $b7->y;
					}break;
					case 2:{
						$tmp27 = $b7->z;
					}break;
					case 3:{
						$tmp27 = $b7->w;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					$value7 = $tmp27;
					switch($i7) {
					case 0:{
						$self9->x = $value7;
					}break;
					case 1:{
						$self9->y = $value7;
					}break;
					case 2:{
						$self9->z = $value7;
					}break;
					case 3:{
						$self9->w = $value7;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					unset($value7,$tmp27);
				}
				unset($i7);
			}
		}
		{
			$self9->x *= $s7;
			$self9->y *= $s7;
			$self9->z *= $s7;
			$self9->w *= $s7;
		}
		$this30 = new hxmath_math_Vector4Default(1.0, 0.0, 0.0, 0.0);
		$a8 = $this30;
		$this31 = new hxmath_math_Vector4Default(0.0, 0.0, 0.0, 1.0);
		$b8 = $this31;
		$this32 = new hxmath_math_Vector4Default($a8->x, $a8->y, $a8->z, $a8->w);
		$self10 = $this32;
		$s8 = ($self10->x * $b8->x + $self10->y * $b8->y + $self10->z * $b8->z + $self10->w * $b8->w) / ($b8->x * $b8->x + $b8->y * $b8->y + $b8->z * $b8->z + $b8->w * $b8->w);
		{
			$_g9 = 0;
			while($_g9 < 4) {
				$i8 = $_g9++;
				{
					$tmp28 = null;
					switch($i8) {
					case 0:{
						$tmp28 = $b8->x;
					}break;
					case 1:{
						$tmp28 = $b8->y;
					}break;
					case 2:{
						$tmp28 = $b8->z;
					}break;
					case 3:{
						$tmp28 = $b8->w;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					$value8 = $tmp28;
					switch($i8) {
					case 0:{
						$self10->x = $value8;
					}break;
					case 1:{
						$self10->y = $value8;
					}break;
					case 2:{
						$self10->z = $value8;
					}break;
					case 3:{
						$self10->w = $value8;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					unset($value8,$tmp28);
				}
				unset($i8);
			}
		}
		{
			$self10->x *= $s8;
			$self10->y *= $s8;
			$self10->z *= $s8;
			$self10->w *= $s8;
		}
		$this33 = new hxmath_math_Vector4Default(0.0, 1.0, 0.0, 0.0);
		$a9 = $this33;
		$this34 = new hxmath_math_Vector4Default(0.0, 0.0, 1.0, 0.0);
		$b9 = $this34;
		$this35 = new hxmath_math_Vector4Default($a9->x, $a9->y, $a9->z, $a9->w);
		$self11 = $this35;
		$s9 = ($self11->x * $b9->x + $self11->y * $b9->y + $self11->z * $b9->z + $self11->w * $b9->w) / ($b9->x * $b9->x + $b9->y * $b9->y + $b9->z * $b9->z + $b9->w * $b9->w);
		{
			$_g10 = 0;
			while($_g10 < 4) {
				$i9 = $_g10++;
				{
					$tmp29 = null;
					switch($i9) {
					case 0:{
						$tmp29 = $b9->x;
					}break;
					case 1:{
						$tmp29 = $b9->y;
					}break;
					case 2:{
						$tmp29 = $b9->z;
					}break;
					case 3:{
						$tmp29 = $b9->w;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					$value9 = $tmp29;
					switch($i9) {
					case 0:{
						$self11->x = $value9;
					}break;
					case 1:{
						$self11->y = $value9;
					}break;
					case 2:{
						$self11->z = $value9;
					}break;
					case 3:{
						$self11->w = $value9;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					unset($value9,$tmp29);
				}
				unset($i9);
			}
		}
		{
			$self11->x *= $s9;
			$self11->y *= $s9;
			$self11->z *= $s9;
			$self11->w *= $s9;
		}
		$this36 = new hxmath_math_Vector4Default(0.0, 1.0, 0.0, 0.0);
		$a10 = $this36;
		$this37 = new hxmath_math_Vector4Default(0.0, 0.0, 0.0, 1.0);
		$b10 = $this37;
		$this38 = new hxmath_math_Vector4Default($a10->x, $a10->y, $a10->z, $a10->w);
		$self12 = $this38;
		$s10 = ($self12->x * $b10->x + $self12->y * $b10->y + $self12->z * $b10->z + $self12->w * $b10->w) / ($b10->x * $b10->x + $b10->y * $b10->y + $b10->z * $b10->z + $b10->w * $b10->w);
		{
			$_g11 = 0;
			while($_g11 < 4) {
				$i10 = $_g11++;
				{
					$tmp30 = null;
					switch($i10) {
					case 0:{
						$tmp30 = $b10->x;
					}break;
					case 1:{
						$tmp30 = $b10->y;
					}break;
					case 2:{
						$tmp30 = $b10->z;
					}break;
					case 3:{
						$tmp30 = $b10->w;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					$value10 = $tmp30;
					switch($i10) {
					case 0:{
						$self12->x = $value10;
					}break;
					case 1:{
						$self12->y = $value10;
					}break;
					case 2:{
						$self12->z = $value10;
					}break;
					case 3:{
						$self12->w = $value10;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					unset($value10,$tmp30);
				}
				unset($i10);
			}
		}
		{
			$self12->x *= $s10;
			$self12->y *= $s10;
			$self12->z *= $s10;
			$self12->w *= $s10;
		}
		$this39 = new hxmath_math_Vector4Default(0.0, 0.0, 1.0, 0.0);
		$a11 = $this39;
		$this40 = new hxmath_math_Vector4Default(0.0, 0.0, 0.0, 1.0);
		$b11 = $this40;
		$this41 = new hxmath_math_Vector4Default($a11->x, $a11->y, $a11->z, $a11->w);
		$self13 = $this41;
		$s11 = ($self13->x * $b11->x + $self13->y * $b11->y + $self13->z * $b11->z + $self13->w * $b11->w) / ($b11->x * $b11->x + $b11->y * $b11->y + $b11->z * $b11->z + $b11->w * $b11->w);
		{
			$_g12 = 0;
			while($_g12 < 4) {
				$i11 = $_g12++;
				{
					$tmp31 = null;
					switch($i11) {
					case 0:{
						$tmp31 = $b11->x;
					}break;
					case 1:{
						$tmp31 = $b11->y;
					}break;
					case 2:{
						$tmp31 = $b11->z;
					}break;
					case 3:{
						$tmp31 = $b11->w;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					$value11 = $tmp31;
					switch($i11) {
					case 0:{
						$self13->x = $value11;
					}break;
					case 1:{
						$self13->y = $value11;
					}break;
					case 2:{
						$self13->z = $value11;
					}break;
					case 3:{
						$self13->w = $value11;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					unset($value11,$tmp31);
				}
				unset($i11);
			}
		}
		{
			$self13->x *= $s11;
			$self13->y *= $s11;
			$self13->z *= $s11;
			$self13->w *= $s11;
		}
		$v4AxesProj = (new _hx_array(array($self8, $self9, $self10, $self11, $self12, $self13)));
		{
			$_g13 = 0;
			while($_g13 < $v4AxesProj->length) {
				$v3 = $v4AxesProj[$_g13];
				++$_g13;
				$this42 = new hxmath_math_Vector4Default(0.0, 0.0, 0.0, 0.0);
				$b12 = $this42;
				$tmp32 = null;
				$tmp33 = null;
				if($v3 === null) {
					$tmp33 = $b12 === null;
				} else {
					$tmp33 = false;
				}
				if(!$tmp33) {
					$tmp34 = null;
					$tmp35 = null;
					$tmp36 = null;
					$tmp37 = null;
					if($v3 !== null) {
						$tmp37 = $b12 !== null;
					} else {
						$tmp37 = false;
					}
					if($tmp37) {
						$tmp36 = $v3->x === $b12->x;
					} else {
						$tmp36 = false;
					}
					if($tmp36) {
						$tmp35 = $v3->y === $b12->y;
					} else {
						$tmp35 = false;
					}
					if($tmp35) {
						$tmp34 = $v3->z === $b12->z;
					} else {
						$tmp34 = false;
					}
					if($tmp34) {
						$tmp32 = $v3->w === $b12->w;
					} else {
						$tmp32 = false;
					}
					unset($tmp37,$tmp36,$tmp35,$tmp34);
				} else {
					$tmp32 = true;
				}
				$this->assertTrue($tmp32, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 556, "className" => "test.TestStructures", "methodName" => "testVectorProj")));
				unset($v3,$tmp33,$tmp32,$this42,$b12);
			}
		}
		$this43 = new hxmath_math_Vector4Default(0.5, 0.5, 0.5, 0.5);
		$v4Mid = $this43;
		$this44 = new hxmath_math_Vector4Default(1.0, 0.0, 0.0, 0.0);
		$tmp38 = $this44;
		$this45 = new hxmath_math_Vector4Default(0.0, 1.0, 0.0, 0.0);
		$tmp39 = $this45;
		$this46 = new hxmath_math_Vector4Default(0.0, 0.0, 1.0, 0.0);
		$tmp40 = $this46;
		$this47 = new hxmath_math_Vector4Default(0.0, 0.0, 0.0, 1.0);
		$v4MidProjOntoAxes = Lambda::map((new _hx_array(array($tmp38, $tmp39, $tmp40, $this47))), array(new _hx_lambda(array(&$v4Mid), "test_TestStructures_3"), 'execute'));
		{
			$tmp42 = $v4MidProjOntoAxes->iterator();
			while(true) {
				$tmp43 = !$tmp42->hasNext();
				if($tmp43) {
					break;
				}
				$v4 = $tmp42->next();
				$tmp44 = $v4->x * $v4->x + $v4->y * $v4->y + $v4->z * $v4->z + $v4->w * $v4->w;
				$tmp45 = Math::sqrt($tmp44);
				$this->assertApproxEquals(0.5, $tmp45, null, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 565, "className" => "test.TestStructures", "methodName" => "testVectorProj")));
				unset($v4,$tmp45,$tmp44,$tmp43);
			}
		}
	}
	public function testNormalizeTo() {
		{
			$_g = 0;
			while($_g < 30) {
				++$_g;
				$v = $this->randomVector2(null);
				$tmp = $this->randomFloat(null, null, null);
				$newLength = Math::abs($tmp);
				{
					$tmp1 = $v->x * $v->x + $v->y * $v->y;
					$length = Math::sqrt($tmp1);
					if($length > 0.0) {
						$v->x /= $length;
						$v->y /= $length;
					}
					unset($tmp1,$length);
				}
				{
					$v->x *= $newLength;
					$v->y *= $newLength;
				}
				$self = $v;
				$tmp2 = $self->x * $self->x + $self->y * $self->y;
				$tmp3 = Math::sqrt($tmp2);
				$this->assertApproxEquals($newLength, $tmp3, null, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 575, "className" => "test.TestStructures", "methodName" => "testNormalizeTo")));
				unset($v,$tmp3,$tmp2,$tmp,$self,$newLength);
			}
		}
		{
			$_g1 = 0;
			while($_g1 < 30) {
				++$_g1;
				$v1 = $this->randomVector3(null);
				$tmp4 = $this->randomFloat(null, null, null);
				$newLength1 = Math::abs($tmp4);
				{
					$tmp5 = $v1->x * $v1->x + $v1->y * $v1->y + $v1->z * $v1->z;
					$length1 = Math::sqrt($tmp5);
					if($length1 > 0.0) {
						$v1->x /= $length1;
						$v1->y /= $length1;
						$v1->z /= $length1;
					}
					unset($tmp5,$length1);
				}
				{
					$v1->x *= $newLength1;
					$v1->y *= $newLength1;
					$v1->z *= $newLength1;
				}
				$self1 = $v1;
				$tmp6 = $self1->x * $self1->x + $self1->y * $self1->y + $self1->z * $self1->z;
				$tmp7 = Math::sqrt($tmp6);
				$this->assertApproxEquals($newLength1, $tmp7, null, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 582, "className" => "test.TestStructures", "methodName" => "testNormalizeTo")));
				unset($v1,$tmp7,$tmp6,$tmp4,$self1,$newLength1);
			}
		}
		{
			$_g2 = 0;
			while($_g2 < 30) {
				++$_g2;
				$v2 = $this->randomVector4(null);
				$tmp8 = $this->randomFloat(null, null, null);
				$newLength2 = Math::abs($tmp8);
				{
					$tmp9 = $v2->x * $v2->x + $v2->y * $v2->y + $v2->z * $v2->z + $v2->w * $v2->w;
					$length2 = Math::sqrt($tmp9);
					if($length2 > 0.0) {
						$v2->x /= $length2;
						$v2->y /= $length2;
						$v2->z /= $length2;
						$v2->w /= $length2;
					}
					unset($tmp9,$length2);
				}
				{
					$v2->x *= $newLength2;
					$v2->y *= $newLength2;
					$v2->z *= $newLength2;
					$v2->w *= $newLength2;
				}
				$self2 = $v2;
				$tmp10 = $self2->x * $self2->x + $self2->y * $self2->y + $self2->z * $self2->z + $self2->w * $self2->w;
				$tmp11 = Math::sqrt($tmp10);
				$this->assertApproxEquals($newLength2, $tmp11, null, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 589, "className" => "test.TestStructures", "methodName" => "testNormalizeTo")));
				unset($v2,$tmp8,$tmp11,$tmp10,$self2,$newLength2);
			}
		}
	}
	public function testClamp() {
		{
			$_g = 0;
			while($_g < 30) {
				++$_g;
				$_g2 = $this->randomVector2(null);
				$this1 = new hxmath_math_Vector2Default($_g2->x, $_g2->y);
				$self = $this1;
				$self->x *= 10.0;
				$self->y *= 10.0;
				$tmp = $self->x * $self->x + $self->y * $self->y;
				$length = Math::sqrt($tmp);
				if($length < 3.0) {
					{
						$tmp1 = $self->x * $self->x + $self->y * $self->y;
						$length1 = Math::sqrt($tmp1);
						if($length1 > 0.0) {
							$self->x /= $length1;
							$self->y /= $length1;
						}
						unset($tmp1,$length1);
					}
					{
						$self->x *= 3.0;
						$self->y *= 3.0;
					}
				} else {
					if($length > 7.0) {
						{
							$tmp2 = $self->x * $self->x + $self->y * $self->y;
							$length2 = Math::sqrt($tmp2);
							if($length2 > 0.0) {
								$self->x /= $length2;
								$self->y /= $length2;
							}
							unset($tmp2,$length2);
						}
						{
							$self->x *= 7.0;
							$self->y *= 7.0;
						}
					}
				}
				$tmp3 = $self->x * $self->x + $self->y * $self->y;
				$tmp4 = Math::sqrt($tmp3);
				$this->assertTrue($tmp4 >= 2.999999, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 604, "className" => "test.TestStructures", "methodName" => "testClamp")));
				$tmp5 = $self->x * $self->x + $self->y * $self->y;
				$tmp6 = Math::sqrt($tmp5);
				$this->assertTrue($tmp6 <= 7.000001, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 605, "className" => "test.TestStructures", "methodName" => "testClamp")));
				unset($tmp6,$tmp5,$tmp4,$tmp3,$tmp,$this1,$self,$length,$_g2);
			}
		}
		{
			$_g1 = 0;
			while($_g1 < 30) {
				++$_g1;
				$_g21 = $this->randomVector3(null);
				$this2 = new hxmath_math_Vector3Default($_g21->x, $_g21->y, $_g21->z);
				$self1 = $this2;
				$self1->x *= 10.0;
				$self1->y *= 10.0;
				$self1->z *= 10.0;
				$tmp7 = $self1->x * $self1->x + $self1->y * $self1->y + $self1->z * $self1->z;
				$length3 = Math::sqrt($tmp7);
				if($length3 < 3.0) {
					{
						$tmp8 = $self1->x * $self1->x + $self1->y * $self1->y + $self1->z * $self1->z;
						$length4 = Math::sqrt($tmp8);
						if($length4 > 0.0) {
							$self1->x /= $length4;
							$self1->y /= $length4;
							$self1->z /= $length4;
						}
						unset($tmp8,$length4);
					}
					{
						$self1->x *= 3.0;
						$self1->y *= 3.0;
						$self1->z *= 3.0;
					}
				} else {
					if($length3 > 7.0) {
						{
							$tmp9 = $self1->x * $self1->x + $self1->y * $self1->y + $self1->z * $self1->z;
							$length5 = Math::sqrt($tmp9);
							if($length5 > 0.0) {
								$self1->x /= $length5;
								$self1->y /= $length5;
								$self1->z /= $length5;
							}
							unset($tmp9,$length5);
						}
						{
							$self1->x *= 7.0;
							$self1->y *= 7.0;
							$self1->z *= 7.0;
						}
					}
				}
				$tmp10 = $self1->x * $self1->x + $self1->y * $self1->y + $self1->z * $self1->z;
				$tmp11 = Math::sqrt($tmp10);
				$this->assertTrue($tmp11 >= 2.999999, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 617, "className" => "test.TestStructures", "methodName" => "testClamp")));
				$tmp12 = $self1->x * $self1->x + $self1->y * $self1->y + $self1->z * $self1->z;
				$tmp13 = Math::sqrt($tmp12);
				$this->assertTrue($tmp13 <= 7.000001, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 618, "className" => "test.TestStructures", "methodName" => "testClamp")));
				unset($tmp7,$tmp13,$tmp12,$tmp11,$tmp10,$this2,$self1,$length3,$_g21);
			}
		}
		{
			$_g3 = 0;
			while($_g3 < 30) {
				++$_g3;
				$_g22 = $this->randomVector4(null);
				$this3 = new hxmath_math_Vector4Default($_g22->x, $_g22->y, $_g22->z, $_g22->w);
				$self2 = $this3;
				$self2->x *= 10.0;
				$self2->y *= 10.0;
				$self2->z *= 10.0;
				$self2->w *= 10.0;
				$tmp14 = $self2->x * $self2->x + $self2->y * $self2->y + $self2->z * $self2->z + $self2->w * $self2->w;
				$length6 = Math::sqrt($tmp14);
				if($length6 < 3.0) {
					{
						$tmp15 = $self2->x * $self2->x + $self2->y * $self2->y + $self2->z * $self2->z + $self2->w * $self2->w;
						$length7 = Math::sqrt($tmp15);
						if($length7 > 0.0) {
							$self2->x /= $length7;
							$self2->y /= $length7;
							$self2->z /= $length7;
							$self2->w /= $length7;
						}
						unset($tmp15,$length7);
					}
					{
						$self2->x *= 3.0;
						$self2->y *= 3.0;
						$self2->z *= 3.0;
						$self2->w *= 3.0;
					}
				} else {
					if($length6 > 7.0) {
						{
							$tmp16 = $self2->x * $self2->x + $self2->y * $self2->y + $self2->z * $self2->z + $self2->w * $self2->w;
							$length8 = Math::sqrt($tmp16);
							if($length8 > 0.0) {
								$self2->x /= $length8;
								$self2->y /= $length8;
								$self2->z /= $length8;
								$self2->w /= $length8;
							}
							unset($tmp16,$length8);
						}
						{
							$self2->x *= 7.0;
							$self2->y *= 7.0;
							$self2->z *= 7.0;
							$self2->w *= 7.0;
						}
					}
				}
				$tmp17 = $self2->x * $self2->x + $self2->y * $self2->y + $self2->z * $self2->z + $self2->w * $self2->w;
				$tmp18 = Math::sqrt($tmp17);
				$this->assertTrue($tmp18 >= 2.999999, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 630, "className" => "test.TestStructures", "methodName" => "testClamp")));
				$tmp19 = $self2->x * $self2->x + $self2->y * $self2->y + $self2->z * $self2->z + $self2->w * $self2->w;
				$tmp20 = Math::sqrt($tmp19);
				$this->assertTrue($tmp20 <= 7.000001, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 631, "className" => "test.TestStructures", "methodName" => "testClamp")));
				unset($tmp20,$tmp19,$tmp18,$tmp17,$tmp14,$this3,$self2,$length6,$_g22);
			}
		}
	}
	public function testDistanceTo() {
		$this1 = new hxmath_math_Vector2Default(0.0, 0.0);
		$this2 = new hxmath_math_Vector2Default(1.0, 0.0);
		$b = $this2;
		$self = $this1;
		$this3 = new hxmath_math_Vector2Default($self->x, $self->y);
		$self1 = $this3;
		$self1->x -= $b->x;
		$self1->y -= $b->y;
		$self2 = $self1;
		$tmp = $self2->x * $self2->x + $self2->y * $self2->y;
		$tmp1 = Math::sqrt($tmp);
		$this->assertApproxEquals(1.0, $tmp1, null, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 637, "className" => "test.TestStructures", "methodName" => "testDistanceTo")));
		$this4 = new hxmath_math_Vector3Default(0.0, 0.0, 0.0);
		$this5 = new hxmath_math_Vector3Default(1.0, 0.0, 0.0);
		$b1 = $this5;
		$self3 = $this4;
		$this6 = new hxmath_math_Vector3Default($self3->x, $self3->y, $self3->z);
		$self4 = $this6;
		$self4->x -= $b1->x;
		$self4->y -= $b1->y;
		$self4->z -= $b1->z;
		$self5 = $self4;
		$tmp2 = $self5->x * $self5->x + $self5->y * $self5->y + $self5->z * $self5->z;
		$tmp3 = Math::sqrt($tmp2);
		$this->assertApproxEquals(1.0, $tmp3, null, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 638, "className" => "test.TestStructures", "methodName" => "testDistanceTo")));
		$this7 = new hxmath_math_Vector4Default(0.0, 0.0, 0.0, 0.0);
		$this8 = new hxmath_math_Vector4Default(1.0, 0.0, 0.0, 0.0);
		$b2 = $this8;
		$self6 = $this7;
		$this9 = new hxmath_math_Vector4Default($self6->x, $self6->y, $self6->z, $self6->w);
		$self7 = $this9;
		$self7->x -= $b2->x;
		$self7->y -= $b2->y;
		$self7->z -= $b2->z;
		$self7->w -= $b2->w;
		$self8 = $self7;
		$tmp4 = $self8->x * $self8->x + $self8->y * $self8->y + $self8->z * $self8->z + $self8->w * $self8->w;
		$tmp5 = Math::sqrt($tmp4);
		$this->assertApproxEquals(1.0, $tmp5, null, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 639, "className" => "test.TestStructures", "methodName" => "testDistanceTo")));
	}
	public function testSetAllFields() {
		$this1 = new hxmath_math_Vector2Default(0.0, 0.0);
		$self = $this1;
		$self->x = 23;
		$self->y = 0;
		$this->assertEquals(23.0, $self->x, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 645, "className" => "test.TestStructures", "methodName" => "testSetAllFields")));
		$this2 = new hxmath_math_Vector3Default(0.0, 0.0, 0.0);
		$self1 = $this2;
		$self1->x = 23;
		$self1->y = 0;
		$self1->z = 0;
		$this->assertEquals(23.0, $self1->x, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 648, "className" => "test.TestStructures", "methodName" => "testSetAllFields")));
		$this3 = new hxmath_math_Vector4Default(0.0, 0.0, 0.0, 0.0);
		$self2 = $this3;
		$self2->x = 23;
		$self2->y = 0;
		$self2->z = 0;
		$self2->w = 0;
		$this->assertEquals(23.0, $self2->x, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 651, "className" => "test.TestStructures", "methodName" => "testSetAllFields")));
		$self3 = hxmath_math__IntVector2_IntVector2_Impl_::_new(0, 0);
		$self3->x = 23;
		$self3->y = 0;
		$this->assertEquals(23, $self3->x, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 654, "className" => "test.TestStructures", "methodName" => "testSetAllFields")));
		$this4 = new hxmath_math_QuaternionDefault(0, 0, 0, 0);
		$self4 = $this4;
		$self4->s = 23;
		$self4->x = 0;
		$self4->y = 0;
		$self4->z = 0;
		$this->assertEquals(23.0, $self4->s, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 657, "className" => "test.TestStructures", "methodName" => "testSetAllFields")));
		$this5 = new hxmath_math_Matrix2x2Default(0.0, 0.0, 0.0, 0.0);
		$self5 = $this5;
		$self5->a = 23;
		$self5->b = 0;
		$self5->c = 0;
		$self5->d = 0;
		$m22 = $this5;
		$this->assertEquals(23.0, $m22->a, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 660, "className" => "test.TestStructures", "methodName" => "testSetAllFields")));
		$this6 = new hxmath_math_Matrix3x2Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		$self6 = $this6;
		$self6->a = 23;
		$self6->b = 0;
		$self6->c = 0;
		$self6->d = 0;
		$self6->tx = 0;
		$self6->ty = 0;
		$this->assertEquals(23.0, $self6->a, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 663, "className" => "test.TestStructures", "methodName" => "testSetAllFields")));
		$this7 = new hxmath_math_Matrix3x3Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		$self7 = $this7;
		$self7->m00 = 23;
		$self7->m10 = 0;
		$self7->m20 = 0;
		$self7->m01 = 0;
		$self7->m11 = 0;
		$self7->m21 = 0;
		$self7->m02 = 0;
		$self7->m12 = 0;
		$self7->m22 = 0;
		$this->assertEquals(23.0, $self7->m00, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 666, "className" => "test.TestStructures", "methodName" => "testSetAllFields")));
		$this8 = new hxmath_math_Matrix4x4Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		$self8 = $this8;
		$self8->m00 = 23;
		$self8->m10 = 0;
		$self8->m20 = 0;
		$self8->m30 = 0;
		$self8->m01 = 0;
		$self8->m11 = 0;
		$self8->m21 = 0;
		$self8->m31 = 0;
		$self8->m02 = 0;
		$self8->m12 = 0;
		$self8->m22 = 0;
		$self8->m32 = 0;
		$self8->m03 = 0;
		$self8->m13 = 0;
		$self8->m23 = 0;
		$self8->m33 = 0;
		$this->assertEquals(23.0, $self8->m00, _hx_anonymous(array("fileName" => "TestStructures.hx", "lineNumber" => 669, "className" => "test.TestStructures", "methodName" => "testSetAllFields")));
	}
	function __toString() { return 'test.TestStructures'; }
}
function test_TestStructures_0($x) {
	{
		return 2 * $x;
	}
}
function test_TestStructures_1(&$v2Mid, $a1) {
	{
		$self1 = $v2Mid;
		$this8 = new hxmath_math_Vector2Default($self1->x, $self1->y);
		$self2 = $this8;
		$s1 = ($self2->x * $a1->x + $self2->y * $a1->y) / ($a1->x * $a1->x + $a1->y * $a1->y);
		{
			$_g1 = 0;
			while($_g1 < 2) {
				$i1 = $_g1++;
				{
					$tmp6 = null;
					switch($i1) {
					case 0:{
						$tmp6 = $a1->x;
					}break;
					case 1:{
						$tmp6 = $a1->y;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					$value1 = $tmp6;
					switch($i1) {
					case 0:{
						$self2->x = $value1;
					}break;
					case 1:{
						$self2->y = $value1;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					unset($value1,$tmp6);
				}
				unset($i1);
			}
		}
		{
			$self2->x *= $s1;
			$self2->y *= $s1;
		}
		return $self2;
	}
}
function test_TestStructures_2(&$v3Mid, $a5) {
	{
		$self6 = $v3Mid;
		$this23 = new hxmath_math_Vector3Default($self6->x, $self6->y, $self6->z);
		$self7 = $this23;
		$s5 = ($self7->x * $a5->x + $self7->y * $a5->y + $self7->z * $a5->z) / ($a5->x * $a5->x + $a5->y * $a5->y + $a5->z * $a5->z);
		{
			$_g6 = 0;
			while($_g6 < 3) {
				$i5 = $_g6++;
				{
					$tmp21 = null;
					switch($i5) {
					case 0:{
						$tmp21 = $a5->x;
					}break;
					case 1:{
						$tmp21 = $a5->y;
					}break;
					case 2:{
						$tmp21 = $a5->z;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					$value5 = $tmp21;
					switch($i5) {
					case 0:{
						$self7->x = $value5;
					}break;
					case 1:{
						$self7->y = $value5;
					}break;
					case 2:{
						$self7->z = $value5;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					unset($value5,$tmp21);
				}
				unset($i5);
			}
		}
		{
			$self7->x *= $s5;
			$self7->y *= $s5;
			$self7->z *= $s5;
		}
		return $self7;
	}
}
function test_TestStructures_3(&$v4Mid, $a12) {
	{
		$self14 = $v4Mid;
		$this48 = new hxmath_math_Vector4Default($self14->x, $self14->y, $self14->z, $self14->w);
		$self15 = $this48;
		$s12 = ($self15->x * $a12->x + $self15->y * $a12->y + $self15->z * $a12->z + $self15->w * $a12->w) / ($a12->x * $a12->x + $a12->y * $a12->y + $a12->z * $a12->z + $a12->w * $a12->w);
		{
			$_g14 = 0;
			while($_g14 < 4) {
				$i12 = $_g14++;
				{
					$tmp41 = null;
					switch($i12) {
					case 0:{
						$tmp41 = $a12->x;
					}break;
					case 1:{
						$tmp41 = $a12->y;
					}break;
					case 2:{
						$tmp41 = $a12->z;
					}break;
					case 3:{
						$tmp41 = $a12->w;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					$value12 = $tmp41;
					switch($i12) {
					case 0:{
						$self15->x = $value12;
					}break;
					case 1:{
						$self15->y = $value12;
					}break;
					case 2:{
						$self15->z = $value12;
					}break;
					case 3:{
						$self15->w = $value12;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					unset($value12,$tmp41);
				}
				unset($i12);
			}
		}
		{
			$self15->x *= $s12;
			$self15->y *= $s12;
			$self15->z *= $s12;
			$self15->w *= $s12;
		}
		return $self15;
	}
}
