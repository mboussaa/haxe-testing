<?php

// Generated by Haxe 3.3.0
class hxmath_math__Matrix3x3_Matrix3x3_Impl_ {
	public function __construct(){}
	static $elementCount = 9;
	static function _new($m00, $m10, $m20, $m01, $m11, $m21, $m02, $m12, $m22) {
		$this1 = new hxmath_math_Matrix3x3Default($m00, $m10, $m20, $m01, $m11, $m21, $m02, $m12, $m22);
		return $this1;
	}
	static function fromArray($rawData) {
		if($rawData->length !== 9) {
			throw new HException("Invalid rawData.");
		}
		$this1 = new hxmath_math_Matrix3x3Default($rawData[0], $rawData[1], $rawData[2], $rawData[3], $rawData[4], $rawData[5], $rawData[6], $rawData[7], $rawData[8]);
		return $this1;
	}
	static function fromMatrix3x3Shape($other) {
		$this1 = new hxmath_math_Matrix3x3Default($other->m00, $other->m10, $other->m20, $other->m01, $other->m11, $other->m21, $other->m02, $other->m12, $other->m22);
		return $this1;
	}
	static function multiplyScalar($s, $a) {
		$this1 = new hxmath_math_Matrix3x3Default($s * $a->m00, $s * $a->m10, $s * $a->m20, $s * $a->m01, $s * $a->m11, $s * $a->m21, $s * $a->m02, $s * $a->m12, $s * $a->m22);
		return $this1;
	}
	static function multiplyVector($a, $v) {
		$this1 = new hxmath_math_Vector3Default($a->m00 * $v->x + $a->m10 * $v->y + $a->m20 * $v->z, $a->m01 * $v->x + $a->m11 * $v->y + $a->m21 * $v->z, $a->m02 * $v->x + $a->m12 * $v->y + $a->m22 * $v->z);
		return $this1;
	}
	static function multiply($a, $b) {
		$this1 = new hxmath_math_Matrix3x3Default($a->m00 * $b->m00 + $a->m10 * $b->m01 + $a->m20 * $b->m02, $a->m00 * $b->m10 + $a->m10 * $b->m11 + $a->m20 * $b->m12, $a->m00 * $b->m20 + $a->m10 * $b->m21 + $a->m20 * $b->m22, $a->m01 * $b->m00 + $a->m11 * $b->m01 + $a->m21 * $b->m02, $a->m01 * $b->m10 + $a->m11 * $b->m11 + $a->m21 * $b->m12, $a->m01 * $b->m20 + $a->m11 * $b->m21 + $a->m21 * $b->m22, $a->m02 * $b->m00 + $a->m12 * $b->m01 + $a->m22 * $b->m02, $a->m02 * $b->m10 + $a->m12 * $b->m11 + $a->m22 * $b->m12, $a->m02 * $b->m20 + $a->m12 * $b->m21 + $a->m22 * $b->m22);
		return $this1;
	}
	static function add($a, $b) {
		$this1 = new hxmath_math_Matrix3x3Default($a->m00, $a->m10, $a->m20, $a->m01, $a->m11, $a->m21, $a->m02, $a->m12, $a->m22);
		$self = $this1;
		$self->m00 += $b->m00;
		$self->m10 += $b->m10;
		$self->m20 += $b->m20;
		$self->m01 += $b->m01;
		$self->m11 += $b->m11;
		$self->m21 += $b->m21;
		$self->m02 += $b->m02;
		$self->m12 += $b->m12;
		$self->m22 += $b->m22;
		return $self;
	}
	static function subtract($a, $b) {
		$this1 = new hxmath_math_Matrix3x3Default($a->m00, $a->m10, $a->m20, $a->m01, $a->m11, $a->m21, $a->m02, $a->m12, $a->m22);
		$self = $this1;
		$self->m00 -= $b->m00;
		$self->m10 -= $b->m10;
		$self->m20 -= $b->m20;
		$self->m01 -= $b->m01;
		$self->m11 -= $b->m11;
		$self->m21 -= $b->m21;
		$self->m02 -= $b->m02;
		$self->m12 -= $b->m12;
		$self->m22 -= $b->m22;
		return $self;
	}
	static function negate($a) {
		$this1 = new hxmath_math_Matrix3x3Default(-$a->m00, -$a->m10, -$a->m20, -$a->m01, -$a->m11, -$a->m21, -$a->m02, -$a->m12, -$a->m22);
		return $this1;
	}
	static function equals($a, $b) {
		$tmp = null;
		if($a === null) {
			$tmp = $b === null;
		} else {
			$tmp = false;
		}
		if(!$tmp) {
			$tmp1 = null;
			$tmp2 = null;
			$tmp3 = null;
			$tmp4 = null;
			$tmp5 = null;
			$tmp6 = null;
			$tmp7 = null;
			$tmp8 = null;
			$tmp9 = null;
			if($a !== null) {
				$tmp9 = $b !== null;
			} else {
				$tmp9 = false;
			}
			if($tmp9) {
				$tmp8 = $a->m00 === $b->m00;
			} else {
				$tmp8 = false;
			}
			if($tmp8) {
				$tmp7 = $a->m10 === $b->m10;
			} else {
				$tmp7 = false;
			}
			if($tmp7) {
				$tmp6 = $a->m20 === $b->m20;
			} else {
				$tmp6 = false;
			}
			if($tmp6) {
				$tmp5 = $a->m01 === $b->m01;
			} else {
				$tmp5 = false;
			}
			if($tmp5) {
				$tmp4 = $a->m11 === $b->m11;
			} else {
				$tmp4 = false;
			}
			if($tmp4) {
				$tmp3 = $a->m21 === $b->m21;
			} else {
				$tmp3 = false;
			}
			if($tmp3) {
				$tmp2 = $a->m02 === $b->m02;
			} else {
				$tmp2 = false;
			}
			if($tmp2) {
				$tmp1 = $a->m12 === $b->m12;
			} else {
				$tmp1 = false;
			}
			if($tmp1) {
				return $a->m22 === $b->m22;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	static function rotationX($angleDegrees) {
		$angleRadians = Math::$PI / 180 * $angleDegrees;
		$s = Math::sin($angleRadians);
		$c = Math::cos($angleRadians);
		$this1 = new hxmath_math_Matrix3x3Default(1, 0, 0, 0, $c, -$s, 0, $s, $c);
		return $this1;
	}
	static function rotationY($angleDegrees) {
		$angleRadians = Math::$PI / 180 * $angleDegrees;
		$s = Math::sin($angleRadians);
		$c = Math::cos($angleRadians);
		$this1 = new hxmath_math_Matrix3x3Default($c, 0, $s, 0, 1, 0, -$s, 0, $c);
		return $this1;
	}
	static function rotationZ($angleDegrees) {
		$angleRadians = Math::$PI / 180 * $angleDegrees;
		$s = Math::sin($angleRadians);
		$c = Math::cos($angleRadians);
		$this1 = new hxmath_math_Matrix3x3Default($c, -$s, 0, $s, $c, 0, 0, 0, 1);
		return $this1;
	}
	static function scale($sx, $sy, $sz) {
		$this1 = new hxmath_math_Matrix3x3Default($sx, 0.0, 0.0, 0.0, $sy, 0.0, 0.0, 0.0, $sz);
		return $this1;
	}
	static function set($this1, $m00, $m10, $m20, $m01, $m11, $m21, $m02, $m12, $m22) {
		$self = $this1;
		$self->m00 = $m00;
		$self->m10 = $m10;
		$self->m20 = $m20;
		$self->m01 = $m01;
		$self->m11 = $m11;
		$self->m21 = $m21;
		$self->m02 = $m02;
		$self->m12 = $m12;
		$self->m22 = $m22;
		return $self;
	}
	static function addWith($this1, $a) {
		$self = $this1;
		$self->m00 += $a->m00;
		$self->m10 += $a->m10;
		$self->m20 += $a->m20;
		$self->m01 += $a->m01;
		$self->m11 += $a->m11;
		$self->m21 += $a->m21;
		$self->m02 += $a->m02;
		$self->m12 += $a->m12;
		$self->m22 += $a->m22;
		return $self;
	}
	static function subtractWith($this1, $a) {
		$self = $this1;
		$self->m00 -= $a->m00;
		$self->m10 -= $a->m10;
		$self->m20 -= $a->m20;
		$self->m01 -= $a->m01;
		$self->m11 -= $a->m11;
		$self->m21 -= $a->m21;
		$self->m02 -= $a->m02;
		$self->m12 -= $a->m12;
		$self->m22 -= $a->m22;
		return $self;
	}
	static function copyTo($this1, $target) {
		$self = $this1;
		{
			$_g = 0;
			while($_g < 9) {
				$i = $_g++;
				{
					$tmp = null;
					switch($i) {
					case 0:{
						$tmp = $self->m00;
					}break;
					case 1:{
						$tmp = $self->m10;
					}break;
					case 2:{
						$tmp = $self->m20;
					}break;
					case 3:{
						$tmp = $self->m01;
					}break;
					case 4:{
						$tmp = $self->m11;
					}break;
					case 5:{
						$tmp = $self->m21;
					}break;
					case 6:{
						$tmp = $self->m02;
					}break;
					case 7:{
						$tmp = $self->m12;
					}break;
					case 8:{
						$tmp = $self->m22;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					$value = $tmp;
					switch($i) {
					case 0:{
						$target->m00 = $value;
					}break;
					case 1:{
						$target->m10 = $value;
					}break;
					case 2:{
						$target->m20 = $value;
					}break;
					case 3:{
						$target->m01 = $value;
					}break;
					case 4:{
						$target->m11 = $value;
					}break;
					case 5:{
						$target->m21 = $value;
					}break;
					case 6:{
						$target->m02 = $value;
					}break;
					case 7:{
						$target->m12 = $value;
					}break;
					case 8:{
						$target->m22 = $value;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					unset($value,$tmp);
				}
				unset($i);
			}
		}
	}
	static function copyToShape($this1, $target) {
		$self = $this1;
		$target->m00 = $self->m00;
		$target->m01 = $self->m01;
		$target->m02 = $self->m02;
		$target->m10 = $self->m10;
		$target->m11 = $self->m11;
		$target->m12 = $self->m12;
		$target->m20 = $self->m20;
		$target->m21 = $self->m21;
		$target->m22 = $self->m22;
	}
	static function copyFromShape($this1, $source) {
		$self = $this1;
		$self->m00 = $source->m00;
		$self->m01 = $source->m01;
		$self->m02 = $source->m02;
		$self->m10 = $source->m10;
		$self->m11 = $source->m11;
		$self->m12 = $source->m12;
		$self->m20 = $source->m20;
		$self->m21 = $source->m21;
		$self->m22 = $source->m22;
	}
	static function hclone($this1) {
		$self = $this1;
		$this2 = new hxmath_math_Matrix3x3Default($self->m00, $self->m10, $self->m20, $self->m01, $self->m11, $self->m21, $self->m02, $self->m12, $self->m22);
		return $this2;
	}
	static function getArrayElement($this1, $i) {
		$self = $this1;
		switch($i) {
		case 0:{
			return $self->m00;
		}break;
		case 1:{
			return $self->m10;
		}break;
		case 2:{
			return $self->m20;
		}break;
		case 3:{
			return $self->m01;
		}break;
		case 4:{
			return $self->m11;
		}break;
		case 5:{
			return $self->m21;
		}break;
		case 6:{
			return $self->m02;
		}break;
		case 7:{
			return $self->m12;
		}break;
		case 8:{
			return $self->m22;
		}break;
		default:{
			throw new HException("Invalid element");
		}break;
		}
	}
	static function setArrayElement($this1, $i, $value) {
		$self = $this1;
		switch($i) {
		case 0:{
			return $self->m00 = $value;
		}break;
		case 1:{
			return $self->m10 = $value;
		}break;
		case 2:{
			return $self->m20 = $value;
		}break;
		case 3:{
			return $self->m01 = $value;
		}break;
		case 4:{
			return $self->m11 = $value;
		}break;
		case 5:{
			return $self->m21 = $value;
		}break;
		case 6:{
			return $self->m02 = $value;
		}break;
		case 7:{
			return $self->m12 = $value;
		}break;
		case 8:{
			return $self->m22 = $value;
		}break;
		default:{
			throw new HException("Invalid element");
		}break;
		}
	}
	static function getElement($this1, $column, $row) {
		$self = $this1;
		$tmp = null;
		switch($row * 3 + $column) {
		case 0:{
			$tmp = $self->m00;
		}break;
		case 1:{
			$tmp = $self->m10;
		}break;
		case 2:{
			$tmp = $self->m20;
		}break;
		case 3:{
			$tmp = $self->m01;
		}break;
		case 4:{
			$tmp = $self->m11;
		}break;
		case 5:{
			$tmp = $self->m21;
		}break;
		case 6:{
			$tmp = $self->m02;
		}break;
		case 7:{
			$tmp = $self->m12;
		}break;
		case 8:{
			$tmp = $self->m22;
		}break;
		default:{
			throw new HException("Invalid element");
		}break;
		}
		return $tmp;
	}
	static function setElement($this1, $column, $row, $value) {
		$self = $this1;
		$tmp = null;
		switch($row * 3 + $column) {
		case 0:{
			$tmp = $self->m00 = $value;
		}break;
		case 1:{
			$tmp = $self->m10 = $value;
		}break;
		case 2:{
			$tmp = $self->m20 = $value;
		}break;
		case 3:{
			$tmp = $self->m01 = $value;
		}break;
		case 4:{
			$tmp = $self->m11 = $value;
		}break;
		case 5:{
			$tmp = $self->m21 = $value;
		}break;
		case 6:{
			$tmp = $self->m02 = $value;
		}break;
		case 7:{
			$tmp = $self->m12 = $value;
		}break;
		case 8:{
			$tmp = $self->m22 = $value;
		}break;
		default:{
			throw new HException("Invalid element");
		}break;
		}
		return $tmp;
	}
	static function col($this1, $index) {
		$self = $this1;
		switch($index) {
		case 0:{
			$this2 = new hxmath_math_Vector3Default($self->m00, $self->m01, $self->m02);
			return $this2;
		}break;
		case 1:{
			$this3 = new hxmath_math_Vector3Default($self->m10, $self->m11, $self->m12);
			return $this3;
		}break;
		case 2:{
			$this4 = new hxmath_math_Vector3Default($self->m20, $self->m21, $self->m22);
			return $this4;
		}break;
		default:{
			throw new HException("Invalid column");
		}break;
		}
	}
	static function row($this1, $index) {
		$self = $this1;
		switch($index) {
		case 0:{
			$this2 = new hxmath_math_Vector3Default($self->m00, $self->m10, $self->m20);
			return $this2;
		}break;
		case 1:{
			$this3 = new hxmath_math_Vector3Default($self->m01, $self->m11, $self->m21);
			return $this3;
		}break;
		case 2:{
			$this4 = new hxmath_math_Vector3Default($self->m02, $self->m12, $self->m22);
			return $this4;
		}break;
		default:{
			throw new HException("Invalid row");
		}break;
		}
	}
	static function applyScalarFunc($this1, $func) {
		$self = $this1;
		{
			$_g = 0;
			while($_g < 9) {
				$i = $_g++;
				{
					$tmp = null;
					switch($i) {
					case 0:{
						$tmp = $self->m00;
					}break;
					case 1:{
						$tmp = $self->m10;
					}break;
					case 2:{
						$tmp = $self->m20;
					}break;
					case 3:{
						$tmp = $self->m01;
					}break;
					case 4:{
						$tmp = $self->m11;
					}break;
					case 5:{
						$tmp = $self->m21;
					}break;
					case 6:{
						$tmp = $self->m02;
					}break;
					case 7:{
						$tmp = $self->m12;
					}break;
					case 8:{
						$tmp = $self->m22;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					$value = call_user_func_array($func, array($tmp));
					switch($i) {
					case 0:{
						$self->m00 = $value;
					}break;
					case 1:{
						$self->m10 = $value;
					}break;
					case 2:{
						$self->m20 = $value;
					}break;
					case 3:{
						$self->m01 = $value;
					}break;
					case 4:{
						$self->m11 = $value;
					}break;
					case 5:{
						$self->m21 = $value;
					}break;
					case 6:{
						$self->m02 = $value;
					}break;
					case 7:{
						$self->m12 = $value;
					}break;
					case 8:{
						$self->m22 = $value;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					unset($value,$tmp);
				}
				unset($i);
			}
		}
		return $self;
	}
	static function get_zero() {
		$this1 = new hxmath_math_Matrix3x3Default(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		return $this1;
	}
	static function get_identity() {
		$this1 = new hxmath_math_Matrix3x3Default(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0);
		return $this1;
	}
	static function get_det($this1) {
		$self = $this1;
		$m00 = $self->m00;
		$m10 = $self->m10;
		$m20 = $self->m20;
		$m01 = $self->m01;
		$m11 = $self->m11;
		$m21 = $self->m21;
		$m02 = $self->m02;
		$m12 = $self->m12;
		$m22 = $self->m22;
		return $m00 * ($m11 * $m22 - $m21 * $m12) - $m10 * ($m01 * $m22 - $m21 * $m02) + $m20 * ($m01 * $m12 - $m11 * $m02);
	}
	static function get_transpose($this1) {
		$self = $this1;
		$this2 = new hxmath_math_Matrix3x3Default($self->m00, $self->m01, $self->m02, $self->m10, $self->m11, $self->m12, $self->m20, $self->m21, $self->m22);
		return $this2;
	}
	static $__properties__ = array("get_transpose" => "get_transpose","get_det" => "get_det","get_identity" => "get_identity","get_zero" => "get_zero");
	function __toString() { return 'hxmath.math._Matrix3x3.Matrix3x3_Impl_'; }
}
