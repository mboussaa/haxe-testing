<?php

// Generated by Haxe 3.3.0
class hxmath_math_Matrix3x3Default {
	public function __construct($m00, $m10, $m20, $m01, $m11, $m21, $m02, $m12, $m22) {
		if(!php_Boot::$skip_constructor) {
		$this->m00 = $m00;
		$this->m10 = $m10;
		$this->m20 = $m20;
		$this->m01 = $m01;
		$this->m11 = $m11;
		$this->m21 = $m21;
		$this->m02 = $m02;
		$this->m12 = $m12;
		$this->m22 = $m22;
	}}
	public $m00;
	public $m01;
	public $m02;
	public $m10;
	public $m11;
	public $m12;
	public $m20;
	public $m21;
	public $m22;
	public function toString() {
		return "[[" . _hx_string_rec($this->m00, "") . ", " . _hx_string_rec($this->m10, "") . ", " . _hx_string_rec($this->m20, "") . "], [" . _hx_string_rec($this->m01, "") . ", " . _hx_string_rec($this->m11, "") . ", " . _hx_string_rec($this->m21, "") . "], [" . _hx_string_rec($this->m02, "") . ", " . _hx_string_rec($this->m12, "") . ", " . _hx_string_rec($this->m22, "") . "]]";
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return $this->toString(); }
}
