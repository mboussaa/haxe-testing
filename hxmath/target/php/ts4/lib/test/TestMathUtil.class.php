<?php

// Generated by Haxe 3.3.0
class test_TestMathUtil extends test_MathTestCase {
	public function __construct($posInfos = null) { if(!php_Boot::$skip_constructor) {
		parent::__construct($posInfos);
	}}
	public function testOrient2D() {
		$this1 = new hxmath_math_Vector2Default(0.0, 0.0);
		$a = $this1;
		$this2 = new hxmath_math_Vector2Default(0.0, 1.0);
		$b = $this2;
		$this3 = new hxmath_math_Vector2Default(-0.5, 0.5);
		$c = $this3;
		$this4 = new hxmath_math_Vector2Default(0.5, 0.5);
		$d = $this4;
		$this5 = new hxmath_math_Vector2Default(0.0, -1.0);
		$e = $this5;
		$result = ($a->x - $c->x) * ($b->y - $c->y) - ($a->y - $c->y) * ($b->x - $c->x);
		$tmp = null;
		if($result > 0) {
			$tmp = 1;
		} else {
			if($result < 0) {
				$tmp = -1;
			} else {
				$tmp = 0;
			}
		}
		$this->assertEquals($tmp, 1, _hx_anonymous(array("fileName" => "TestMathUtil.hx", "lineNumber" => 22, "className" => "test.TestMathUtil", "methodName" => "testOrient2D")));
		$result1 = ($a->x - $d->x) * ($b->y - $d->y) - ($a->y - $d->y) * ($b->x - $d->x);
		$tmp1 = null;
		if($result1 > 0) {
			$tmp1 = 1;
		} else {
			if($result1 < 0) {
				$tmp1 = -1;
			} else {
				$tmp1 = 0;
			}
		}
		$this->assertEquals($tmp1, -1, _hx_anonymous(array("fileName" => "TestMathUtil.hx", "lineNumber" => 23, "className" => "test.TestMathUtil", "methodName" => "testOrient2D")));
		$result2 = ($a->x - $e->x) * ($b->y - $e->y) - ($a->y - $e->y) * ($b->x - $e->x);
		$tmp2 = null;
		if($result2 > 0) {
			$tmp2 = 1;
		} else {
			if($result2 < 0) {
				$tmp2 = -1;
			} else {
				$tmp2 = 0;
			}
		}
		$this->assertEquals($tmp2, 0, _hx_anonymous(array("fileName" => "TestMathUtil.hx", "lineNumber" => 24, "className" => "test.TestMathUtil", "methodName" => "testOrient2D")));
	}
	public function testWrapAngle() {
		$this->assertEquals(0.0, _hx_mod(0.0, 360.0), _hx_anonymous(array("fileName" => "TestMathUtil.hx", "lineNumber" => 29, "className" => "test.TestMathUtil", "methodName" => "testWrapAngle")));
		$this->assertEquals(0.0, _hx_mod(360.0, 360.0), _hx_anonymous(array("fileName" => "TestMathUtil.hx", "lineNumber" => 30, "className" => "test.TestMathUtil", "methodName" => "testWrapAngle")));
		$this->assertEquals(359.999999, _hx_mod(359.999999, 360), _hx_anonymous(array("fileName" => "TestMathUtil.hx", "lineNumber" => 31, "className" => "test.TestMathUtil", "methodName" => "testWrapAngle")));
		$this->assertEquals(189.0, 360.0 - _hx_mod(531., 360.0), _hx_anonymous(array("fileName" => "TestMathUtil.hx", "lineNumber" => 34, "className" => "test.TestMathUtil", "methodName" => "testWrapAngle")));
	}
	function __toString() { return 'test.TestMathUtil'; }
}
