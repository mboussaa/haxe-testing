<?php

// Generated by Haxe 3.3.0
class hxmath_math__ShortVector2_ShortVector2_Impl_ {
	public function __construct(){}
	static $elementCount = 2;
	static $bitsPerField = 16;
	static $fieldMax = 65535;
	static function _new($x, $y) {
		$this1 = null;
		$tmp = null;
		$tmp1 = null;
		$tmp2 = null;
		if($x >= 0) {
			$tmp2 = $y >= 0;
		} else {
			$tmp2 = false;
		}
		if($tmp2) {
			$tmp1 = $x <= 65535;
		} else {
			$tmp1 = false;
		}
		if($tmp1) {
			$tmp = $y <= 65535;
		} else {
			$tmp = false;
		}
		if(!$tmp) {
			throw new HException("Specified (x=" . _hx_string_rec($x, "") . ", y=" . _hx_string_rec($y, "") . ") fields not in the range [0, " . _hx_string_rec(65535, "") . "]");
		}
		$this1 = $y << 16 | $x;
		return $this1;
	}
	static function fromArray($rawData) {
		if($rawData->length !== 2) {
			throw new HException("Invalid rawData.");
		}
		return hxmath_math__ShortVector2_ShortVector2_Impl_::_new($rawData[0], $rawData[1]);
	}
	static function dot($a, $b) {
		return ($a & 65535) * ($b & 65535) + ($a >> 16 & 65535) * ($b >> 16 & 65535);
	}
	static function multiply($a, $s) {
		return hxmath_math__ShortVector2_ShortVector2_Impl_::_new($s * ($a & 65535), $s * ($a >> 16 & 65535));
	}
	static function add($a, $b) {
		return hxmath_math__ShortVector2_ShortVector2_Impl_::_new(($a & 65535) + ($b & 65535), ($a >> 16 & 65535) + ($b >> 16 & 65535));
	}
	static function subtract($a, $b) {
		return hxmath_math__ShortVector2_ShortVector2_Impl_::_new(($a & 65535) - ($b & 65535), ($a >> 16 & 65535) - ($b >> 16 & 65535));
	}
	static function negate($a) {
		return hxmath_math__ShortVector2_ShortVector2_Impl_::_new(-($a & 65535), -($a >> 16 & 65535));
	}
	static function max($a, $b) {
		$a1 = $a & 65535;
		$b1 = $b & 65535;
		$tmp = null;
		if($b1 > $a1) {
			$tmp = $b1;
		} else {
			$tmp = $a1;
		}
		$a2 = $a >> 16 & 65535;
		$b2 = $b >> 16 & 65535;
		$tmp1 = null;
		if($b2 > $a2) {
			$tmp1 = $b2;
		} else {
			$tmp1 = $a2;
		}
		return hxmath_math__ShortVector2_ShortVector2_Impl_::_new($tmp, $tmp1);
	}
	static function min($a, $b) {
		$a1 = $a & 65535;
		$b1 = $b & 65535;
		$tmp = null;
		if($b1 < $a1) {
			$tmp = $b1;
		} else {
			$tmp = $a1;
		}
		$a2 = $a >> 16 & 65535;
		$b2 = $b >> 16 & 65535;
		$tmp1 = null;
		if($b2 < $a2) {
			$tmp1 = $b2;
		} else {
			$tmp1 = $a2;
		}
		return hxmath_math__ShortVector2_ShortVector2_Impl_::_new($tmp, $tmp1);
	}
	static function getArrayElement($this1, $i) {
		$self = $this1;
		switch($i) {
		case 0:{
			return $self & 65535;
		}break;
		case 1:{
			return $self >> 16 & 65535;
		}break;
		default:{
			throw new HException("Invalid element");
		}break;
		}
	}
	static function toVector2($this1) {
		$self = $this1;
		$this2 = new hxmath_math_Vector2Default($self & 65535, $self >> 16 & 65535);
		return $this2;
	}
	static function indexInBounds($x, $y) {
		$tmp = null;
		$tmp1 = null;
		if($x >= 0) {
			$tmp1 = $y >= 0;
		} else {
			$tmp1 = false;
		}
		if($tmp1) {
			$tmp = $x <= 65535;
		} else {
			$tmp = false;
		}
		if($tmp) {
			return $y <= 65535;
		} else {
			return false;
		}
	}
	static function get_zero() {
		return hxmath_math__ShortVector2_ShortVector2_Impl_::_new(0, 0);
	}
	static function get_xAxis() {
		return hxmath_math__ShortVector2_ShortVector2_Impl_::_new(1, 0);
	}
	static function get_yAxis() {
		return hxmath_math__ShortVector2_ShortVector2_Impl_::_new(0, 1);
	}
	static function get_x($this1) {
		return $this1 & 65535;
	}
	static function get_y($this1) {
		return $this1 >> 16 & 65535;
	}
	static function get_lengthSq($this1) {
		$self = $this1;
		return ($self & 65535) * ($self & 65535) + ($self >> 16 & 65535) * ($self >> 16 & 65535);
	}
	static function get_rotatedLeft($this1) {
		return hxmath_math__ShortVector2_ShortVector2_Impl_::_new(-($this1 >> 16 & 65535), $this1 & 65535);
	}
	static function get_rotatedRight($this1) {
		return hxmath_math__ShortVector2_ShortVector2_Impl_::_new($this1 >> 16 & 65535, -($this1 & 65535));
	}
	static $__properties__ = array("get_y" => "get_y","get_x" => "get_x","get_rotatedRight" => "get_rotatedRight","get_rotatedLeft" => "get_rotatedLeft","get_lengthSq" => "get_lengthSq","get_yAxis" => "get_yAxis","get_xAxis" => "get_xAxis","get_zero" => "get_zero");
	function __toString() { return 'hxmath.math._ShortVector2.ShortVector2_Impl_'; }
}
