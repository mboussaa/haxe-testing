<?php

// Generated by Haxe 3.3.0
class hxmath_math__IntVector2_IntVector2_Impl_ {
	public function __construct(){}
	static $elementCount = 2;
	static function _new($x, $y) {
		$this1 = new hxmath_math_IntVector2Default($x, $y);
		return $this1;
	}
	static function fromArray($rawData) {
		if($rawData->length !== 2) {
			throw new HException("Invalid rawData.");
		}
		return hxmath_math__IntVector2_IntVector2_Impl_::_new($rawData[0], $rawData[1]);
	}
	static function toVector2($this1) {
		$self = $this1;
		$this2 = new hxmath_math_Vector2Default($self->x, $self->y);
		return $this2;
	}
	static function dot($a, $b) {
		return $a->x * $b->x + $a->y * $b->y;
	}
	static function multiply($a, $s) {
		$self = hxmath_math__IntVector2_IntVector2_Impl_::_new($a->x, $a->y);
		$self->x *= $s;
		$self->y *= $s;
		return $self;
	}
	static function add($a, $b) {
		$self = hxmath_math__IntVector2_IntVector2_Impl_::_new($a->x, $a->y);
		$self->x += $b->x;
		$self->y += $b->y;
		return $self;
	}
	static function subtract($a, $b) {
		$self = hxmath_math__IntVector2_IntVector2_Impl_::_new($a->x, $a->y);
		$self->x -= $b->x;
		$self->y -= $b->y;
		return $self;
	}
	static function negate($a) {
		return hxmath_math__IntVector2_IntVector2_Impl_::_new(-$a->x, -$a->y);
	}
	static function equals($a, $b) {
		$tmp = null;
		if($a === null) {
			$tmp = $b === null;
		} else {
			$tmp = false;
		}
		if(!$tmp) {
			$tmp1 = null;
			$tmp2 = null;
			if($a !== null) {
				$tmp2 = $b !== null;
			} else {
				$tmp2 = false;
			}
			if($tmp2) {
				$tmp1 = $a->x === $b->x;
			} else {
				$tmp1 = false;
			}
			if($tmp1) {
				return $a->y === $b->y;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	static function max($a, $b) {
		$self = hxmath_math__IntVector2_IntVector2_Impl_::_new($a->x, $a->y);
		$a1 = $self->x;
		$b1 = $b->x;
		$tmp = null;
		if($b1 > $a1) {
			$tmp = $b1;
		} else {
			$tmp = $a1;
		}
		$self->x = $tmp;
		$a2 = $self->y;
		$b2 = $b->y;
		$tmp1 = null;
		if($b2 > $a2) {
			$tmp1 = $b2;
		} else {
			$tmp1 = $a2;
		}
		$self->y = $tmp1;
		return $self;
	}
	static function min($a, $b) {
		$self = hxmath_math__IntVector2_IntVector2_Impl_::_new($a->x, $a->y);
		$a1 = $self->x;
		$b1 = $b->x;
		$tmp = null;
		if($b1 < $a1) {
			$tmp = $b1;
		} else {
			$tmp = $a1;
		}
		$self->x = $tmp;
		$a2 = $self->y;
		$b2 = $b->y;
		$tmp1 = null;
		if($b2 < $a2) {
			$tmp1 = $b2;
		} else {
			$tmp1 = $a2;
		}
		$self->y = $tmp1;
		return $self;
	}
	static function set($this1, $x, $y) {
		$self = $this1;
		$self->x = $x;
		$self->y = $y;
		return $self;
	}
	static function multiplyWith($this1, $s) {
		$self = $this1;
		$self->x *= $s;
		$self->y *= $s;
		return $self;
	}
	static function addWith($this1, $a) {
		$self = $this1;
		$self->x += $a->x;
		$self->y += $a->y;
		return $self;
	}
	static function subtractWith($this1, $a) {
		$self = $this1;
		$self->x -= $a->x;
		$self->y -= $a->y;
		return $self;
	}
	static function maxWith($this1, $a) {
		$self = $this1;
		$a1 = $self->x;
		$b = $a->x;
		$tmp = null;
		if($b > $a1) {
			$tmp = $b;
		} else {
			$tmp = $a1;
		}
		$self->x = $tmp;
		$a2 = $self->y;
		$b1 = $a->y;
		$tmp1 = null;
		if($b1 > $a2) {
			$tmp1 = $b1;
		} else {
			$tmp1 = $a2;
		}
		$self->y = $tmp1;
		return $self;
	}
	static function minWith($this1, $a) {
		$self = $this1;
		$a1 = $self->x;
		$b = $a->x;
		$tmp = null;
		if($b < $a1) {
			$tmp = $b;
		} else {
			$tmp = $a1;
		}
		$self->x = $tmp;
		$a2 = $self->y;
		$b1 = $a->y;
		$tmp1 = null;
		if($b1 < $a2) {
			$tmp1 = $b1;
		} else {
			$tmp1 = $a2;
		}
		$self->y = $tmp1;
		return $self;
	}
	static function copyTo($this1, $target) {
		$self = $this1;
		{
			$_g = 0;
			while($_g < 2) {
				$i = $_g++;
				{
					$tmp = null;
					switch($i) {
					case 0:{
						$tmp = $self->x;
					}break;
					case 1:{
						$tmp = $self->y;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					$value = $tmp;
					switch($i) {
					case 0:{
						$target->x = $value;
					}break;
					case 1:{
						$target->y = $value;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					unset($value,$tmp);
				}
				unset($i);
			}
		}
	}
	static function hclone($this1) {
		$self = $this1;
		return hxmath_math__IntVector2_IntVector2_Impl_::_new($self->x, $self->y);
	}
	static function getArrayElement($this1, $i) {
		$self = $this1;
		switch($i) {
		case 0:{
			return $self->x;
		}break;
		case 1:{
			return $self->y;
		}break;
		default:{
			throw new HException("Invalid element");
		}break;
		}
	}
	static function setArrayElement($this1, $i, $value) {
		$self = $this1;
		switch($i) {
		case 0:{
			return $self->x = $value;
		}break;
		case 1:{
			return $self->y = $value;
		}break;
		default:{
			throw new HException("Invalid element");
		}break;
		}
	}
	static function applyNegate($this1) {
		$self = $this1;
		$self->x = -$self->x;
		$self->y = -$self->y;
		return $self;
	}
	static function applyScalarFunc($this1, $func) {
		$self = $this1;
		{
			$_g = 0;
			while($_g < 2) {
				$i = $_g++;
				{
					$tmp = null;
					switch($i) {
					case 0:{
						$tmp = $self->x;
					}break;
					case 1:{
						$tmp = $self->y;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					$value = call_user_func_array($func, array($tmp));
					switch($i) {
					case 0:{
						$self->x = $value;
					}break;
					case 1:{
						$self->y = $value;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					unset($value,$tmp);
				}
				unset($i);
			}
		}
		return $self;
	}
	static function rotateLeft($this1) {
		$self = $this1;
		$newX = -$self->y;
		$self->y = $self->x;
		$self->x = $newX;
		return $self;
	}
	static function rotateRight($this1) {
		$self = $this1;
		$newX = $self->y;
		$self->y = -$self->x;
		$self->x = $newX;
		return $self;
	}
	static function get_zero() {
		return hxmath_math__IntVector2_IntVector2_Impl_::_new(0, 0);
	}
	static function get_xAxis() {
		return hxmath_math__IntVector2_IntVector2_Impl_::_new(1, 0);
	}
	static function get_yAxis() {
		return hxmath_math__IntVector2_IntVector2_Impl_::_new(0, 1);
	}
	static function get_lengthSq($this1) {
		$self = $this1;
		return $self->x * $self->x + $self->y * $self->y;
	}
	static function get_rotatedLeft($this1) {
		$self = $this1;
		$self1 = hxmath_math__IntVector2_IntVector2_Impl_::_new($self->x, $self->y);
		$newX = -$self1->y;
		$self1->y = $self1->x;
		$self1->x = $newX;
		return $self1;
	}
	static function get_rotatedRight($this1) {
		$self = $this1;
		$self1 = hxmath_math__IntVector2_IntVector2_Impl_::_new($self->x, $self->y);
		$newX = $self1->y;
		$self1->y = -$self1->x;
		$self1->x = $newX;
		return $self1;
	}
	static $__properties__ = array("get_rotatedRight" => "get_rotatedRight","get_rotatedLeft" => "get_rotatedLeft","get_lengthSq" => "get_lengthSq","get_yAxis" => "get_yAxis","get_xAxis" => "get_xAxis","get_zero" => "get_zero");
	function __toString() { return 'hxmath.math._IntVector2.IntVector2_Impl_'; }
}
