<?php

// Generated by Haxe 3.3.0
class hxmath_math_MathUtil {
	public function __construct(){}
	static $eps = 1e-6;
	static function intMax($a, $b) {
		if($b > $a) {
			return $b;
		} else {
			return $a;
		}
	}
	static function intMin($a, $b) {
		if($b < $a) {
			return $b;
		} else {
			return $a;
		}
	}
	static function lerpCyclic($a, $b, $t, $max) {
		$tmp = Math::abs($a - $b);
		if($tmp > 0.5 * $max) {
			$tmp1 = $a < $b;
			if($tmp1) {
				$a += $max;
			} else {
				$b += $max;
			}
		}
		$x = (1.0 - $t) * $a + $t * $b;
		if($x < 0) {
			return $max - _hx_mod(-$x, $max);
		} else {
			return _hx_mod($x, $max);
		}
	}
	static function sign($x, $w = null) {
		if($w === null) {
			$w = 0;
		}
		$tmp = Math::abs($x);
		if($tmp < $w) {
			return 0;
		} else {
			if($x <= -$w) {
				return -1;
			} else {
				return 1;
			}
		}
	}
	static function rangeDistance($aStart, $aWidth, $bStart, $bWidth) {
		if($aStart + $aWidth < $bStart) {
			return $bStart - ($aStart + $aWidth);
		} else {
			if($bStart + $bWidth < $aStart) {
				return $aStart - ($bStart + $bWidth);
			} else {
				return 0;
			}
		}
	}
	static function openRangeContains($aStart, $aWidth, $x) {
		if($x > $aStart) {
			return $x < $aStart + $aWidth;
		} else {
			return false;
		}
	}
	static function openRangesIntersect($aStart, $aWidth, $bStart, $bWidth) {
		$tmp = null;
		if(!($aStart >= $bStart + $bWidth)) {
			$tmp = $bStart >= $aStart + $aWidth;
		} else {
			$tmp = true;
		}
		return !$tmp;
	}
	static function closedRangeContains($aStart, $aWidth, $x) {
		if($x >= $aStart) {
			return $x <= $aStart + $aWidth;
		} else {
			return false;
		}
	}
	static function radToDeg($rad) {
		return 180 / Math::$PI * $rad;
	}
	static function degToRad($deg) {
		return Math::$PI / 180 * $deg;
	}
	static function wrap($x, $n) {
		if($x < 0) {
			return $n - _hx_mod(-$x, $n);
		} else {
			return _hx_mod($x, $n);
		}
	}
	static function clamp($value, $min, $max) {
		if($value < $min) {
			return $min;
		} else {
			if($value > $max) {
				return $max;
			} else {
				return $value;
			}
		}
	}
	static function orient2d($a, $b, $c) {
		$result = ($a->x - $c->x) * ($b->y - $c->y) - ($a->y - $c->y) * ($b->x - $c->x);
		if($result > 0) {
			return 1;
		} else {
			if($result < 0) {
				return -1;
			} else {
				return 0;
			}
		}
	}
	static function det2x2($m00, $m10, $m01, $m11) {
		return $m00 * $m11 - $m10 * $m01;
	}
	static function det3x3($m00, $m10, $m20, $m01, $m11, $m21, $m02, $m12, $m22) {
		return $m00 * ($m11 * $m22 - $m21 * $m12) - $m10 * ($m01 * $m22 - $m21 * $m02) + $m20 * ($m01 * $m12 - $m11 * $m02);
	}
	static function det4x4($m00, $m10, $m20, $m30, $m01, $m11, $m21, $m31, $m02, $m12, $m22, $m32, $m03, $m13, $m23, $m33) {
		return $m00 * ($m11 * ($m22 * $m33 - $m32 * $m23) - $m21 * ($m12 * $m33 - $m32 * $m13) + $m31 * ($m12 * $m23 - $m22 * $m13)) - $m10 * ($m01 * ($m22 * $m33 - $m32 * $m23) - $m21 * ($m02 * $m33 - $m32 * $m03) + $m31 * ($m02 * $m23 - $m22 * $m03)) + $m20 * ($m01 * ($m12 * $m33 - $m32 * $m13) - $m11 * ($m02 * $m33 - $m32 * $m03) + $m31 * ($m02 * $m13 - $m12 * $m03)) - $m30 * ($m01 * ($m12 * $m23 - $m22 * $m13) - $m11 * ($m02 * $m23 - $m22 * $m03) + $m21 * ($m02 * $m13 - $m12 * $m03));
	}
	function __toString() { return 'hxmath.math.MathUtil'; }
}
