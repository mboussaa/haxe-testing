<?php

// Generated by Haxe 3.3.0
class hxmath_frames_Frame2Default implements hxmath_frames_IFrame2{
	public function __construct($offset = null, $angleDegrees = null, $isCached = null) {
		if(!php_Boot::$skip_constructor) {
		if($isCached === null) {
			$isCached = true;
		}
		if($angleDegrees === null) {
			$angleDegrees = 0.0;
		}
		$this->isDirty = true;
		$this->isCached = true;
		$tmp = null;
		if($offset === null) {
			$this1 = new hxmath_math_Vector2Default(0.0, 0.0);
			$tmp = $this1;
		} else {
			$tmp = $offset;
		}
		$this->internalOffset = $tmp;
		$this->internalAngleDegrees = $angleDegrees;
		$this->isCached = $isCached;
		$this->isDirty = true;
		$this2 = new hxmath_math_Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0);
		$this->internalMatrix = $this2;
	}}
	public $internalMatrix;
	public $internalOffset;
	public $internalAngleDegrees;
	public $isCached;
	public $isDirty;
	public function toString() {
		$tmp = Std::string($this->internalOffset);
		return "Frame2 { offset: " . _hx_string_or_null($tmp) . ", angleDegrees: " . _hx_string_rec($this->internalAngleDegrees, "") . " }";
	}
	public function get_matrix() {
		$tmp = null;
		if(!(!$this->isCached)) {
			$tmp = $this->isDirty;
		} else {
			$tmp = true;
		}
		if($tmp) {
			{
				$matrix = $this->internalMatrix;
				$offset = $this->internalOffset;
				$angleDegrees = $this->internalAngleDegrees;
				{
					$angle = Math::$PI / 180 * $angleDegrees;
					$s = Math::sin($angle);
					$c = Math::cos($angle);
					$matrix->a = $c;
					$matrix->b = -$s;
					$matrix->c = $s;
					$matrix->d = $c;
				}
				{
					$x = $offset->x;
					$y = $offset->y;
					$matrix->tx = $x;
					$matrix->ty = $y;
				}
			}
			$this->isDirty = false;
		}
		return $this->internalMatrix;
	}
	public function get_offset() {
		return $this->internalOffset;
	}
	public function set_offset($offset) {
		$this->internalOffset = $offset;
		$this->isDirty = true;
		return $offset;
	}
	public function get_angleDegrees() {
		return $this->internalAngleDegrees;
	}
	public function set_angleDegrees($angleDegrees) {
		$this->internalAngleDegrees = $angleDegrees;
		$this->isDirty = true;
		return $angleDegrees;
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $__properties__ = array("set_angleDegrees" => "set_angleDegrees","get_angleDegrees" => "get_angleDegrees","set_offset" => "set_offset","get_offset" => "get_offset","get_matrix" => "get_matrix");
	function __toString() { return $this->toString(); }
}
