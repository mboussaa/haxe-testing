<?php

// Generated by Haxe 3.3.0
class hxmath_frames_Frame3Default implements hxmath_frames_IFrame3{
	public function __construct($offset = null, $orientation = null, $isCached = null) {
		if(!php_Boot::$skip_constructor) {
		if($isCached === null) {
			$isCached = true;
		}
		$this->isDirty = true;
		$this->isCached = true;
		$tmp = null;
		if($offset === null) {
			$this1 = new hxmath_math_Vector3Default(0.0, 0.0, 0.0);
			$tmp = $this1;
		} else {
			$tmp = $offset;
		}
		$this->internalOffset = $tmp;
		$tmp1 = null;
		if($orientation === null) {
			$this2 = new hxmath_math_QuaternionDefault(1, 0, 0, 0);
			$tmp1 = $this2;
		} else {
			$tmp1 = $orientation;
		}
		$this->internalOrientation = $tmp1;
		$this->isCached = $isCached;
		$this->isDirty = true;
		$this3 = new hxmath_math_Matrix4x4Default(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);
		$this->internalMatrix = $this3;
	}}
	public $internalMatrix;
	public $internalOffset;
	public $internalOrientation;
	public $isCached;
	public $isDirty;
	public function toString() {
		$tmp = Std::string($this->internalOffset);
		$tmp1 = "Frame3 { offset: " . _hx_string_or_null($tmp) . ", orientation: ";
		$tmp2 = Std::string($this->internalOrientation);
		return _hx_string_or_null($tmp1) . _hx_string_or_null($tmp2) . " }";
	}
	public function get_matrix() {
		$tmp = null;
		if(!(!$this->isCached)) {
			$tmp = $this->isDirty;
		} else {
			$tmp = true;
		}
		if($tmp) {
			{
				$matrix = $this->internalMatrix;
				$offset = $this->internalOffset;
				$orientation = $this->internalOrientation;
				{
					$s = $orientation->s;
					$x = $orientation->x;
					$y = $orientation->y;
					$z = $orientation->z;
					$matrix->m00 = 1 - 2 * ($y * $y + $z * $z);
					$matrix->m10 = 2 * ($x * $y - $s * $z);
					$matrix->m20 = 2 * ($s * $y + $x * $z);
					$matrix->m01 = 2 * ($x * $y + $s * $z);
					$matrix->m11 = 1 - 2 * ($x * $x + $z * $z);
					$matrix->m21 = 2 * ($y * $z - $s * $x);
					$matrix->m02 = 2 * ($x * $z - $s * $y);
					$matrix->m12 = 2 * ($y * $z + $s * $x);
					$matrix->m22 = 1 - 2 * ($x * $x + $y * $y);
				}
				{
					$x1 = $offset->x;
					$y1 = $offset->y;
					$z1 = $offset->z;
					$matrix->m30 = $x1;
					$matrix->m31 = $y1;
					$matrix->m32 = $z1;
					$matrix->m33 = 1.0;
				}
			}
			$this->isDirty = false;
		}
		return $this->internalMatrix;
	}
	public function get_offset() {
		return $this->internalOffset;
	}
	public function set_offset($offset) {
		$this->internalOffset = $offset;
		$this->isDirty = true;
		return $offset;
	}
	public function get_orientation() {
		return $this->internalOrientation;
	}
	public function set_orientation($orientation) {
		$this->internalOrientation = $orientation;
		$this->isDirty = true;
		return $orientation;
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $__properties__ = array("set_orientation" => "set_orientation","get_orientation" => "get_orientation","set_offset" => "set_offset","get_offset" => "get_offset","get_matrix" => "get_matrix");
	function __toString() { return $this->toString(); }
}
