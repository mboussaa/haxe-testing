<?php

// Generated by Haxe 3.3.0
class Reflect {
	public function __construct(){}
	static function field($o, $field) {
		return _hx_field($o, $field);
	}
	static function callMethod($o, $func, $args) {
		return call_user_func_array(((is_callable($func)) ? $func : array($o, $func)), ((null === $args) ? array() : $args->a));
	}
	static function isFunction($f) {
		$tmp = !(is_array($f) && is_callable($f)) || _hx_is_lambda($f);
		if($tmp) {
			$tmp1 = null;
			$tmp2 = is_array($f);
			if($tmp2) {
				$o = $f[0];
				$field = $f[1];
				$tmp1 = _hx_has_field($o, $field);
			} else {
				$tmp1 = false;
			}
			if($tmp1) {
				$tmp3 = $f[1];
				return $tmp3 !== "length";
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	static function isEnumValue($v) {
		return $v instanceof Enum;
	}
	function __toString() { return 'Reflect'; }
}
