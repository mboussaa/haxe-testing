<?php

// Generated by Haxe 3.3.0
class test_TestConverters extends test_MathTestCase {
	public function __construct() { if(!php_Boot::$skip_constructor) {
		parent::__construct(_hx_anonymous(array("fileName" => "TestConverters.hx", "lineNumber" => 44, "className" => "test.TestConverters", "methodName" => "new")));
	}}
	public function testShapeSimilarConversion() {
		$v2a = $this->randomVector2(null);
		$v2b_y = null;
		$v2b_x = 0.0;
		$v2b_y = 0.0;
		$v2c = $this->randomVector2(null);
		{
			$v2b_x = $v2a->x;
			$v2b_y = $v2a->y;
		}
		{
			$v2c->x = $v2b_x;
			$v2c->y = $v2b_y;
		}
		$tmp = null;
		$tmp1 = null;
		if($v2a === null) {
			$tmp1 = $v2c === null;
		} else {
			$tmp1 = false;
		}
		if(!$tmp1) {
			$tmp2 = null;
			$tmp3 = null;
			if($v2a !== null) {
				$tmp3 = $v2c !== null;
			} else {
				$tmp3 = false;
			}
			if($tmp3) {
				$tmp2 = $v2a->x === $v2c->x;
			} else {
				$tmp2 = false;
			}
			if($tmp2) {
				$tmp = $v2a->y === $v2c->y;
			} else {
				$tmp = false;
			}
		} else {
			$tmp = true;
		}
		$this->assertTrue($tmp, _hx_anonymous(array("fileName" => "TestConverters.hx", "lineNumber" => 54, "className" => "test.TestConverters", "methodName" => "testShapeSimilarConversion")));
		$v3a = $this->randomVector3(null);
		$v3b_z = null;
		$v3b_y = null;
		$v3b_x = 0.0;
		$v3b_y = 0.0;
		$v3b_z = 0.0;
		$v3c = $this->randomVector3(null);
		{
			$v3b_x = $v3a->x;
			$v3b_y = $v3a->y;
			$v3b_z = $v3a->z;
		}
		{
			$v3c->x = $v3b_x;
			$v3c->y = $v3b_y;
			$v3c->z = $v3b_z;
		}
		$tmp4 = null;
		$tmp5 = null;
		if($v3a === null) {
			$tmp5 = $v3c === null;
		} else {
			$tmp5 = false;
		}
		if(!$tmp5) {
			$tmp6 = null;
			$tmp7 = null;
			$tmp8 = null;
			if($v3a !== null) {
				$tmp8 = $v3c !== null;
			} else {
				$tmp8 = false;
			}
			if($tmp8) {
				$tmp7 = $v3a->x === $v3c->x;
			} else {
				$tmp7 = false;
			}
			if($tmp7) {
				$tmp6 = $v3a->y === $v3c->y;
			} else {
				$tmp6 = false;
			}
			if($tmp6) {
				$tmp4 = $v3a->z === $v3c->z;
			} else {
				$tmp4 = false;
			}
		} else {
			$tmp4 = true;
		}
		$this->assertTrue($tmp4, _hx_anonymous(array("fileName" => "TestConverters.hx", "lineNumber" => 61, "className" => "test.TestConverters", "methodName" => "testShapeSimilarConversion")));
		$v4a = $this->randomVector4(null);
		$v4b_z = null;
		$v4b_y = null;
		$v4b_x = null;
		$v4b_w = null;
		$v4b_x = 0.0;
		$v4b_y = 0.0;
		$v4b_z = 0.0;
		$v4b_w = 0.0;
		$v4c = $this->randomVector4(null);
		{
			$v4b_x = $v4a->x;
			$v4b_y = $v4a->y;
			$v4b_z = $v4a->z;
			$v4b_w = $v4a->w;
		}
		{
			$v4c->x = $v4b_x;
			$v4c->y = $v4b_y;
			$v4c->z = $v4b_z;
			$v4c->w = $v4b_w;
		}
		$tmp9 = null;
		$tmp10 = null;
		if($v4a === null) {
			$tmp10 = $v4c === null;
		} else {
			$tmp10 = false;
		}
		if(!$tmp10) {
			$tmp11 = null;
			$tmp12 = null;
			$tmp13 = null;
			$tmp14 = null;
			if($v4a !== null) {
				$tmp14 = $v4c !== null;
			} else {
				$tmp14 = false;
			}
			if($tmp14) {
				$tmp13 = $v4a->x === $v4c->x;
			} else {
				$tmp13 = false;
			}
			if($tmp13) {
				$tmp12 = $v4a->y === $v4c->y;
			} else {
				$tmp12 = false;
			}
			if($tmp12) {
				$tmp11 = $v4a->z === $v4c->z;
			} else {
				$tmp11 = false;
			}
			if($tmp11) {
				$tmp9 = $v4a->w === $v4c->w;
			} else {
				$tmp9 = false;
			}
		} else {
			$tmp9 = true;
		}
		$this->assertTrue($tmp9, _hx_anonymous(array("fileName" => "TestConverters.hx", "lineNumber" => 68, "className" => "test.TestConverters", "methodName" => "testShapeSimilarConversion")));
		$m22a = $this->randomMatrix2x2(null);
		$m22b_d = null;
		$m22b_c = null;
		$m22b_b = null;
		$m22b_a = 0.0;
		$m22b_b = 0.0;
		$m22b_c = 0.0;
		$m22b_d = 0.0;
		$m22c = $this->randomMatrix2x2(null);
		{
			$m22b_a = $m22a->a;
			$m22b_b = $m22a->b;
			$m22b_c = $m22a->c;
			$m22b_d = $m22a->d;
		}
		{
			$m22c->a = $m22b_a;
			$m22c->b = $m22b_b;
			$m22c->c = $m22b_c;
			$m22c->d = $m22b_d;
		}
		$tmp15 = null;
		$tmp16 = null;
		if($m22a === null) {
			$tmp16 = $m22c === null;
		} else {
			$tmp16 = false;
		}
		if(!$tmp16) {
			$tmp17 = null;
			$tmp18 = null;
			$tmp19 = null;
			$tmp20 = null;
			if($m22a !== null) {
				$tmp20 = $m22c !== null;
			} else {
				$tmp20 = false;
			}
			if($tmp20) {
				$tmp19 = $m22a->a === $m22c->a;
			} else {
				$tmp19 = false;
			}
			if($tmp19) {
				$tmp18 = $m22a->b === $m22c->b;
			} else {
				$tmp18 = false;
			}
			if($tmp18) {
				$tmp17 = $m22a->c === $m22c->c;
			} else {
				$tmp17 = false;
			}
			if($tmp17) {
				$tmp15 = $m22a->d === $m22c->d;
			} else {
				$tmp15 = false;
			}
		} else {
			$tmp15 = true;
		}
		$this->assertTrue($tmp15, _hx_anonymous(array("fileName" => "TestConverters.hx", "lineNumber" => 78, "className" => "test.TestConverters", "methodName" => "testShapeSimilarConversion")));
		$m32a = $this->randomMatrix3x2(null);
		$m32b_ty = null;
		$m32b_tx = null;
		$m32b_d = null;
		$m32b_c = null;
		$m32b_b = null;
		$m32b_a = 0.0;
		$m32b_b = 0.0;
		$m32b_c = 0.0;
		$m32b_d = 0.0;
		$m32b_tx = 0.0;
		$m32b_ty = 0.0;
		$m32c = $this->randomMatrix3x2(null);
		{
			$m32b_a = $m32a->a;
			$m32b_b = $m32a->b;
			$m32b_c = $m32a->c;
			$m32b_d = $m32a->d;
			$m32b_tx = $m32a->tx;
			$m32b_ty = $m32a->ty;
		}
		{
			$m32c->a = $m32b_a;
			$m32c->b = $m32b_b;
			$m32c->c = $m32b_c;
			$m32c->d = $m32b_d;
			$m32c->tx = $m32b_tx;
			$m32c->ty = $m32b_ty;
		}
		$tmp21 = null;
		$tmp22 = null;
		if($m32a === null) {
			$tmp22 = $m32c === null;
		} else {
			$tmp22 = false;
		}
		if(!$tmp22) {
			$tmp23 = null;
			$tmp24 = null;
			$tmp25 = null;
			$tmp26 = null;
			$tmp27 = null;
			$tmp28 = null;
			if($m32a !== null) {
				$tmp28 = $m32c !== null;
			} else {
				$tmp28 = false;
			}
			if($tmp28) {
				$tmp27 = $m32a->a === $m32c->a;
			} else {
				$tmp27 = false;
			}
			if($tmp27) {
				$tmp26 = $m32a->b === $m32c->b;
			} else {
				$tmp26 = false;
			}
			if($tmp26) {
				$tmp25 = $m32a->c === $m32c->c;
			} else {
				$tmp25 = false;
			}
			if($tmp25) {
				$tmp24 = $m32a->d === $m32c->d;
			} else {
				$tmp24 = false;
			}
			if($tmp24) {
				$tmp23 = $m32a->tx === $m32c->tx;
			} else {
				$tmp23 = false;
			}
			if($tmp23) {
				$tmp21 = $m32a->ty === $m32c->ty;
			} else {
				$tmp21 = false;
			}
		} else {
			$tmp21 = true;
		}
		$this->assertTrue($tmp21, _hx_anonymous(array("fileName" => "TestConverters.hx", "lineNumber" => 89, "className" => "test.TestConverters", "methodName" => "testShapeSimilarConversion")));
		$m33a = $this->randomMatrix3x3(null);
		$m33b_m22 = null;
		$m33b_m21 = null;
		$m33b_m20 = null;
		$m33b_m12 = null;
		$m33b_m11 = null;
		$m33b_m10 = null;
		$m33b_m02 = null;
		$m33b_m01 = null;
		$m33b_m00 = 0.0;
		$m33b_m01 = 0.0;
		$m33b_m02 = 0.0;
		$m33b_m10 = 0.0;
		$m33b_m11 = 0.0;
		$m33b_m12 = 0.0;
		$m33b_m20 = 0.0;
		$m33b_m21 = 0.0;
		$m33b_m22 = 0.0;
		$m33c = $this->randomMatrix3x3(null);
		{
			$m33b_m00 = $m33a->m00;
			$m33b_m01 = $m33a->m01;
			$m33b_m02 = $m33a->m02;
			$m33b_m10 = $m33a->m10;
			$m33b_m11 = $m33a->m11;
			$m33b_m12 = $m33a->m12;
			$m33b_m20 = $m33a->m20;
			$m33b_m21 = $m33a->m21;
			$m33b_m22 = $m33a->m22;
		}
		{
			$m33c->m00 = $m33b_m00;
			$m33c->m01 = $m33b_m01;
			$m33c->m02 = $m33b_m02;
			$m33c->m10 = $m33b_m10;
			$m33c->m11 = $m33b_m11;
			$m33c->m12 = $m33b_m12;
			$m33c->m20 = $m33b_m20;
			$m33c->m21 = $m33b_m21;
			$m33c->m22 = $m33b_m22;
		}
		$tmp29 = null;
		$tmp30 = null;
		if($m33a === null) {
			$tmp30 = $m33c === null;
		} else {
			$tmp30 = false;
		}
		if(!$tmp30) {
			$tmp31 = null;
			$tmp32 = null;
			$tmp33 = null;
			$tmp34 = null;
			$tmp35 = null;
			$tmp36 = null;
			$tmp37 = null;
			$tmp38 = null;
			$tmp39 = null;
			if($m33a !== null) {
				$tmp39 = $m33c !== null;
			} else {
				$tmp39 = false;
			}
			if($tmp39) {
				$tmp38 = $m33a->m00 === $m33c->m00;
			} else {
				$tmp38 = false;
			}
			if($tmp38) {
				$tmp37 = $m33a->m10 === $m33c->m10;
			} else {
				$tmp37 = false;
			}
			if($tmp37) {
				$tmp36 = $m33a->m20 === $m33c->m20;
			} else {
				$tmp36 = false;
			}
			if($tmp36) {
				$tmp35 = $m33a->m01 === $m33c->m01;
			} else {
				$tmp35 = false;
			}
			if($tmp35) {
				$tmp34 = $m33a->m11 === $m33c->m11;
			} else {
				$tmp34 = false;
			}
			if($tmp34) {
				$tmp33 = $m33a->m21 === $m33c->m21;
			} else {
				$tmp33 = false;
			}
			if($tmp33) {
				$tmp32 = $m33a->m02 === $m33c->m02;
			} else {
				$tmp32 = false;
			}
			if($tmp32) {
				$tmp31 = $m33a->m12 === $m33c->m12;
			} else {
				$tmp31 = false;
			}
			if($tmp31) {
				$tmp29 = $m33a->m22 === $m33c->m22;
			} else {
				$tmp29 = false;
			}
		} else {
			$tmp29 = true;
		}
		$this->assertTrue($tmp29, _hx_anonymous(array("fileName" => "TestConverters.hx", "lineNumber" => 100, "className" => "test.TestConverters", "methodName" => "testShapeSimilarConversion")));
		$m44a = $this->randomMatrix4x4(null);
		$m44b_m33 = null;
		$m44b_m32 = null;
		$m44b_m31 = null;
		$m44b_m30 = null;
		$m44b_m23 = null;
		$m44b_m22 = null;
		$m44b_m21 = null;
		$m44b_m20 = null;
		$m44b_m13 = null;
		$m44b_m12 = null;
		$m44b_m11 = null;
		$m44b_m10 = null;
		$m44b_m03 = null;
		$m44b_m02 = null;
		$m44b_m01 = null;
		$m44b_m00 = 0.0;
		$m44b_m01 = 0.0;
		$m44b_m02 = 0.0;
		$m44b_m03 = 0.0;
		$m44b_m10 = 0.0;
		$m44b_m11 = 0.0;
		$m44b_m12 = 0.0;
		$m44b_m13 = 0.0;
		$m44b_m20 = 0.0;
		$m44b_m21 = 0.0;
		$m44b_m22 = 0.0;
		$m44b_m23 = 0.0;
		$m44b_m30 = 0.0;
		$m44b_m31 = 0.0;
		$m44b_m32 = 0.0;
		$m44b_m33 = 0.0;
		$m44c = $this->randomMatrix4x4(null);
		{
			$m44b_m00 = $m44a->m00;
			$m44b_m01 = $m44a->m01;
			$m44b_m02 = $m44a->m02;
			$m44b_m03 = $m44a->m03;
			$m44b_m10 = $m44a->m10;
			$m44b_m11 = $m44a->m11;
			$m44b_m12 = $m44a->m12;
			$m44b_m13 = $m44a->m13;
			$m44b_m20 = $m44a->m20;
			$m44b_m21 = $m44a->m21;
			$m44b_m22 = $m44a->m22;
			$m44b_m23 = $m44a->m23;
			$m44b_m30 = $m44a->m30;
			$m44b_m31 = $m44a->m31;
			$m44b_m32 = $m44a->m32;
			$m44b_m33 = $m44a->m33;
		}
		{
			$m44c->m00 = $m44b_m00;
			$m44c->m01 = $m44b_m01;
			$m44c->m02 = $m44b_m02;
			$m44c->m03 = $m44b_m03;
			$m44c->m10 = $m44b_m10;
			$m44c->m11 = $m44b_m11;
			$m44c->m12 = $m44b_m12;
			$m44c->m13 = $m44b_m13;
			$m44c->m20 = $m44b_m20;
			$m44c->m21 = $m44b_m21;
			$m44c->m22 = $m44b_m22;
			$m44c->m23 = $m44b_m23;
			$m44c->m30 = $m44b_m30;
			$m44c->m31 = $m44b_m31;
			$m44c->m32 = $m44b_m32;
			$m44c->m33 = $m44b_m33;
		}
		$tmp40 = null;
		$tmp41 = null;
		if($m44a === null) {
			$tmp41 = $m44c === null;
		} else {
			$tmp41 = false;
		}
		if(!$tmp41) {
			$tmp42 = null;
			$tmp43 = null;
			$tmp44 = null;
			$tmp45 = null;
			$tmp46 = null;
			$tmp47 = null;
			$tmp48 = null;
			$tmp49 = null;
			$tmp50 = null;
			$tmp51 = null;
			$tmp52 = null;
			$tmp53 = null;
			$tmp54 = null;
			$tmp55 = null;
			$tmp56 = null;
			$tmp57 = null;
			if($m44a !== null) {
				$tmp57 = $m44c !== null;
			} else {
				$tmp57 = false;
			}
			if($tmp57) {
				$tmp56 = $m44a->m00 === $m44c->m00;
			} else {
				$tmp56 = false;
			}
			if($tmp56) {
				$tmp55 = $m44a->m10 === $m44c->m10;
			} else {
				$tmp55 = false;
			}
			if($tmp55) {
				$tmp54 = $m44a->m20 === $m44c->m20;
			} else {
				$tmp54 = false;
			}
			if($tmp54) {
				$tmp53 = $m44a->m30 === $m44c->m30;
			} else {
				$tmp53 = false;
			}
			if($tmp53) {
				$tmp52 = $m44a->m01 === $m44c->m01;
			} else {
				$tmp52 = false;
			}
			if($tmp52) {
				$tmp51 = $m44a->m11 === $m44c->m11;
			} else {
				$tmp51 = false;
			}
			if($tmp51) {
				$tmp50 = $m44a->m21 === $m44c->m21;
			} else {
				$tmp50 = false;
			}
			if($tmp50) {
				$tmp49 = $m44a->m31 === $m44c->m31;
			} else {
				$tmp49 = false;
			}
			if($tmp49) {
				$tmp48 = $m44a->m02 === $m44c->m02;
			} else {
				$tmp48 = false;
			}
			if($tmp48) {
				$tmp47 = $m44a->m12 === $m44c->m12;
			} else {
				$tmp47 = false;
			}
			if($tmp47) {
				$tmp46 = $m44a->m22 === $m44c->m22;
			} else {
				$tmp46 = false;
			}
			if($tmp46) {
				$tmp45 = $m44a->m32 === $m44c->m32;
			} else {
				$tmp45 = false;
			}
			if($tmp45) {
				$tmp44 = $m44a->m03 === $m44c->m03;
			} else {
				$tmp44 = false;
			}
			if($tmp44) {
				$tmp43 = $m44a->m13 === $m44c->m13;
			} else {
				$tmp43 = false;
			}
			if($tmp43) {
				$tmp42 = $m44a->m23 === $m44c->m23;
			} else {
				$tmp42 = false;
			}
			if($tmp42) {
				$tmp40 = $m44a->m33 === $m44c->m33;
			} else {
				$tmp40 = false;
			}
		} else {
			$tmp40 = true;
		}
		$this->assertTrue($tmp40, _hx_anonymous(array("fileName" => "TestConverters.hx", "lineNumber" => 112, "className" => "test.TestConverters", "methodName" => "testShapeSimilarConversion")));
		$qa = $this->randomQuaternion(null);
		$qb_z = null;
		$qb_y = null;
		$qb_x = null;
		$qb_s = 0.0;
		$qb_x = 0.0;
		$qb_y = 0.0;
		$qb_z = 0.0;
		$qc = $this->randomQuaternion(null);
		{
			$qb_s = $qa->s;
			$qb_x = $qa->x;
			$qb_y = $qa->y;
			$qb_z = $qa->z;
		}
		{
			$qc->s = $qb_s;
			$qc->x = $qb_x;
			$qc->y = $qb_y;
			$qc->z = $qb_z;
		}
		$tmp58 = null;
		$tmp59 = null;
		if($qa === null) {
			$tmp59 = $qc === null;
		} else {
			$tmp59 = false;
		}
		if(!$tmp59) {
			$tmp60 = null;
			$tmp61 = null;
			$tmp62 = null;
			$tmp63 = null;
			if($qa !== null) {
				$tmp63 = $qc !== null;
			} else {
				$tmp63 = false;
			}
			if($tmp63) {
				$tmp62 = $qa->s === $qc->s;
			} else {
				$tmp62 = false;
			}
			if($tmp62) {
				$tmp61 = $qa->x === $qc->x;
			} else {
				$tmp61 = false;
			}
			if($tmp61) {
				$tmp60 = $qa->y === $qc->y;
			} else {
				$tmp60 = false;
			}
			if($tmp60) {
				$tmp58 = $qa->z === $qc->z;
			} else {
				$tmp58 = false;
			}
		} else {
			$tmp58 = true;
		}
		$this->assertTrue($tmp58, _hx_anonymous(array("fileName" => "TestConverters.hx", "lineNumber" => 119, "className" => "test.TestConverters", "methodName" => "testShapeSimilarConversion")));
	}
	public function testFlxPointConversion() {
		$this1 = new hxmath_math_Vector2Default(3.0, 1.0);
		$v = $this1;
		$q = new test_FlxPointMock(null, null);
		{
			$q->set_x($v->x);
			$q->set_y($v->y);
		}
		$this->assertEquals($v->x, $q->x, _hx_anonymous(array("fileName" => "TestConverters.hx", "lineNumber" => 128, "className" => "test.TestConverters", "methodName" => "testFlxPointConversion")));
		$this->assertEquals($v->y, $q->y, _hx_anonymous(array("fileName" => "TestConverters.hx", "lineNumber" => 129, "className" => "test.TestConverters", "methodName" => "testFlxPointConversion")));
		$this2 = new hxmath_math_Vector2Default(0.0, 0.0);
		$u = $this2;
		{
			$u->x = $q->x;
			$u->y = $q->y;
		}
		$this->assertEquals($u->x, $q->x, _hx_anonymous(array("fileName" => "TestConverters.hx", "lineNumber" => 133, "className" => "test.TestConverters", "methodName" => "testFlxPointConversion")));
		$this->assertEquals($u->y, $q->y, _hx_anonymous(array("fileName" => "TestConverters.hx", "lineNumber" => 134, "className" => "test.TestConverters", "methodName" => "testFlxPointConversion")));
	}
	function __toString() { return 'test.TestConverters'; }
}
