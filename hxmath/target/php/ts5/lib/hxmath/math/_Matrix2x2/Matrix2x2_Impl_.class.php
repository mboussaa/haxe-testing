<?php

// Generated by Haxe 3.3.0
class hxmath_math__Matrix2x2_Matrix2x2_Impl_ {
	public function __construct(){}
	static $elementCount = 4;
	static function _new($a, $b, $c, $d) {
		$this1 = new hxmath_math_Matrix2x2Default($a, $b, $c, $d);
		return $this1;
	}
	static function fromArray($rawData) {
		if($rawData->length !== 4) {
			throw new HException("Invalid rawData.");
		}
		$this1 = new hxmath_math_Matrix2x2Default($rawData[0], $rawData[1], $rawData[2], $rawData[3]);
		return $this1;
	}
	static function fromMatrix2x2Shape($other) {
		$this1 = new hxmath_math_Matrix2x2Default($other->a, $other->b, $other->c, $other->d);
		return $this1;
	}
	static function multiplyScalar($s, $m) {
		$this1 = new hxmath_math_Matrix2x2Default($s * $m->a, $s * $m->b, $s * $m->c, $s * $m->d);
		return $this1;
	}
	static function multiplyVector($m, $v) {
		$this1 = new hxmath_math_Vector2Default($m->a * $v->x + $m->b * $v->y, $m->c * $v->x + $m->d * $v->y);
		return $this1;
	}
	static function multiply($m, $n) {
		$this1 = new hxmath_math_Matrix2x2Default($m->a * $n->a + $m->b * $n->c, $m->a * $n->b + $m->b * $n->d, $m->c * $n->a + $m->d * $n->c, $m->c * $n->b + $m->d * $n->d);
		return $this1;
	}
	static function add($m, $n) {
		$this1 = new hxmath_math_Matrix2x2Default($m->a, $m->b, $m->c, $m->d);
		$self = $this1;
		$self->a += $n->a;
		$self->b += $n->b;
		$self->c += $n->c;
		$self->d += $n->d;
		return $self;
	}
	static function subtract($m, $n) {
		$this1 = new hxmath_math_Matrix2x2Default($m->a, $m->b, $m->c, $m->d);
		$self = $this1;
		$self->a -= $n->a;
		$self->b -= $n->b;
		$self->c -= $n->c;
		$self->d -= $n->d;
		return $self;
	}
	static function negate($m) {
		$this1 = new hxmath_math_Matrix2x2Default(-$m->a, -$m->b, -$m->c, -$m->d);
		return $this1;
	}
	static function equals($m, $n) {
		$tmp = null;
		if($m === null) {
			$tmp = $n === null;
		} else {
			$tmp = false;
		}
		if(!$tmp) {
			$tmp1 = null;
			$tmp2 = null;
			$tmp3 = null;
			$tmp4 = null;
			if($m !== null) {
				$tmp4 = $n !== null;
			} else {
				$tmp4 = false;
			}
			if($tmp4) {
				$tmp3 = $m->a === $n->a;
			} else {
				$tmp3 = false;
			}
			if($tmp3) {
				$tmp2 = $m->b === $n->b;
			} else {
				$tmp2 = false;
			}
			if($tmp2) {
				$tmp1 = $m->c === $n->c;
			} else {
				$tmp1 = false;
			}
			if($tmp1) {
				return $m->d === $n->d;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	static function rotate($angle) {
		$this1 = new hxmath_math_Matrix2x2Default(0.0, 0.0, 0.0, 0.0);
		$self = $this1;
		$s = Math::sin($angle);
		$c = Math::cos($angle);
		$self->a = $c;
		$self->b = -$s;
		$self->c = $s;
		$self->d = $c;
		return $self;
	}
	static function scale($sx, $sy) {
		$this1 = new hxmath_math_Matrix2x2Default($sx, 0.0, 0.0, $sy);
		return $this1;
	}
	static function setRotate($this1, $angle) {
		$self = $this1;
		$s = Math::sin($angle);
		$c = Math::cos($angle);
		$self->a = $c;
		$self->b = -$s;
		$self->c = $s;
		$self->d = $c;
		return $self;
	}
	static function set($this1, $a, $b, $c, $d) {
		$self = $this1;
		$self->a = $a;
		$self->b = $b;
		$self->c = $c;
		$self->d = $d;
		return $this1;
	}
	static function addWith($this1, $m) {
		$self = $this1;
		$self->a += $m->a;
		$self->b += $m->b;
		$self->c += $m->c;
		$self->d += $m->d;
		return $self;
	}
	static function subtractWith($this1, $m) {
		$self = $this1;
		$self->a -= $m->a;
		$self->b -= $m->b;
		$self->c -= $m->c;
		$self->d -= $m->d;
		return $self;
	}
	static function copyTo($this1, $target) {
		$self = $this1;
		{
			$_g = 0;
			while($_g < 4) {
				$i = $_g++;
				{
					$tmp = null;
					switch($i) {
					case 0:{
						$tmp = $self->a;
					}break;
					case 1:{
						$tmp = $self->b;
					}break;
					case 2:{
						$tmp = $self->c;
					}break;
					case 3:{
						$tmp = $self->d;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					$value = $tmp;
					switch($i) {
					case 0:{
						$target->a = $value;
					}break;
					case 1:{
						$target->b = $value;
					}break;
					case 2:{
						$target->c = $value;
					}break;
					case 3:{
						$target->d = $value;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					unset($value,$tmp);
				}
				unset($i);
			}
		}
	}
	static function copyToShape($this1, $target) {
		$self = $this1;
		$target->a = $self->a;
		$target->b = $self->b;
		$target->c = $self->c;
		$target->d = $self->d;
	}
	static function copyFromShape($this1, $source) {
		$self = $this1;
		$self->a = $source->a;
		$self->b = $source->b;
		$self->c = $source->c;
		$self->d = $source->d;
	}
	static function hclone($this1) {
		$self = $this1;
		$this2 = new hxmath_math_Matrix2x2Default($self->a, $self->b, $self->c, $self->d);
		return $this2;
	}
	static function getArrayElement($this1, $i) {
		$self = $this1;
		switch($i) {
		case 0:{
			return $self->a;
		}break;
		case 1:{
			return $self->b;
		}break;
		case 2:{
			return $self->c;
		}break;
		case 3:{
			return $self->d;
		}break;
		default:{
			throw new HException("Invalid element");
		}break;
		}
	}
	static function setArrayElement($this1, $i, $value) {
		$self = $this1;
		switch($i) {
		case 0:{
			return $self->a = $value;
		}break;
		case 1:{
			return $self->b = $value;
		}break;
		case 2:{
			return $self->c = $value;
		}break;
		case 3:{
			return $self->d = $value;
		}break;
		default:{
			throw new HException("Invalid element");
		}break;
		}
	}
	static function getElement($this1, $column, $row) {
		$self = $this1;
		$tmp = null;
		switch($row * 2 + $column) {
		case 0:{
			$tmp = $self->a;
		}break;
		case 1:{
			$tmp = $self->b;
		}break;
		case 2:{
			$tmp = $self->c;
		}break;
		case 3:{
			$tmp = $self->d;
		}break;
		default:{
			throw new HException("Invalid element");
		}break;
		}
		return $tmp;
	}
	static function setElement($this1, $column, $row, $value) {
		$self = $this1;
		$tmp = null;
		switch($row * 2 + $column) {
		case 0:{
			$tmp = $self->a = $value;
		}break;
		case 1:{
			$tmp = $self->b = $value;
		}break;
		case 2:{
			$tmp = $self->c = $value;
		}break;
		case 3:{
			$tmp = $self->d = $value;
		}break;
		default:{
			throw new HException("Invalid element");
		}break;
		}
		return $tmp;
	}
	static function col($this1, $index) {
		$self = $this1;
		switch($index) {
		case 0:{
			$this2 = new hxmath_math_Vector2Default($self->a, $self->c);
			return $this2;
		}break;
		case 1:{
			$this3 = new hxmath_math_Vector2Default($self->b, $self->d);
			return $this3;
		}break;
		default:{
			throw new HException("Invalid column");
		}break;
		}
	}
	static function row($this1, $index) {
		$self = $this1;
		switch($index) {
		case 0:{
			$this2 = new hxmath_math_Vector2Default($self->a, $self->b);
			return $this2;
		}break;
		case 1:{
			$this3 = new hxmath_math_Vector2Default($self->c, $self->d);
			return $this3;
		}break;
		default:{
			throw new HException("Invalid row");
		}break;
		}
	}
	static function transposeMultiplyVector($this1, $v) {
		$self = $this1;
		$this2 = new hxmath_math_Vector2Default($self->a * $v->x + $self->c * $v->y, $self->b * $v->x + $self->d * $v->y);
		return $this2;
	}
	static function applyScalarFunc($this1, $func) {
		$self = $this1;
		{
			$_g = 0;
			while($_g < 4) {
				$i = $_g++;
				{
					$tmp = null;
					switch($i) {
					case 0:{
						$tmp = $self->a;
					}break;
					case 1:{
						$tmp = $self->b;
					}break;
					case 2:{
						$tmp = $self->c;
					}break;
					case 3:{
						$tmp = $self->d;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					$value = call_user_func_array($func, array($tmp));
					switch($i) {
					case 0:{
						$self->a = $value;
					}break;
					case 1:{
						$self->b = $value;
					}break;
					case 2:{
						$self->c = $value;
					}break;
					case 3:{
						$self->d = $value;
					}break;
					default:{
						throw new HException("Invalid element");
					}break;
					}
					unset($value,$tmp);
				}
				unset($i);
			}
		}
		return $self;
	}
	static function get_zero() {
		$this1 = new hxmath_math_Matrix2x2Default(0.0, 0.0, 0.0, 0.0);
		return $this1;
	}
	static function get_identity() {
		$this1 = new hxmath_math_Matrix2x2Default(1.0, 0.0, 0.0, 1.0);
		return $this1;
	}
	static function get_det($this1) {
		$self = $this1;
		return $self->a * $self->d - $self->b * $self->c;
	}
	static function get_transpose($this1) {
		$self = $this1;
		$this2 = new hxmath_math_Matrix2x2Default($self->a, $self->c, $self->b, $self->d);
		return $this2;
	}
	static $__properties__ = array("get_transpose" => "get_transpose","get_det" => "get_det","get_identity" => "get_identity","get_zero" => "get_zero");
	function __toString() { return 'hxmath.math._Matrix2x2.Matrix2x2_Impl_'; }
}
