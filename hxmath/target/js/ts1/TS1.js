// Generated by Haxe 3.3.0
if (process.version < "v4.0.0") console.warn("Module " + (typeof(module) == "undefined" ? "" : module.filename) + " requires node.js version 4.0.0 or higher");
(function ($global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.__name__ = ["Lambda"];
Lambda.map = function(it,f) {
	var l = new List();
	var tmp = $iterator(it)();
	while(tmp.hasNext()) l.add(f(tmp.next()));
	return l;
};
Lambda.fold = function(it,f,first) {
	var tmp = $iterator(it)();
	while(tmp.hasNext()) first = f(tmp.next(),first);
	return first;
};
var List = function() {
	this.length = 0;
};
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: _$List_ListNode
};
var _$List_ListIterator = function(head) {
	this.head = head;
};
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _$List_ListIterator
};
Math.__name__ = ["Math"];
var Reflect = function() { };
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return null;
	}
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.__name__ = ["StringTools"];
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) {
		return s.split("\"").join("&quot;").split("'").join("&#039;");
	} else {
		return s;
	}
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var Type = function() { };
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		if(a[0] != b[0]) {
			return false;
		}
		var _g1 = 2;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!Type.enumEq(a[i],b[i])) {
				return false;
			}
		}
		var e = a.__enum__;
		if(e != b.__enum__ || e == null) {
			return false;
		}
	} catch( e1 ) {
		haxe_CallStack.lastException = e1;
		return false;
	}
	return true;
};
var haxe_StackItem = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; return $x; };
var haxe_CallStack = function() { };
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function"?haxe_StackItem.LocalFunction():meth == "Global code"?null:haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_unit_TestCase = function() {
};
haxe_unit_TestCase.__name__ = ["haxe","unit","TestCase"];
haxe_unit_TestCase.prototype = {
	currentTest: null
	,setup: function() {
	}
	,tearDown: function() {
	}
	,print: function(v) {
		haxe_unit_TestRunner.print(v);
	}
	,assertTrue: function(b,c) {
		this.currentTest.done = true;
		if(b != true) {
			this.currentTest.success = false;
			this.currentTest.error = "expected true but was false";
			this.currentTest.posInfos = c;
			throw new js__$Boot_HaxeError(this.currentTest);
		}
	}
	,assertFalse: function(b,c) {
		this.currentTest.done = true;
		if(b == true) {
			this.currentTest.success = false;
			this.currentTest.error = "expected false but was true";
			this.currentTest.posInfos = c;
			throw new js__$Boot_HaxeError(this.currentTest);
		}
	}
	,assertEquals: function(expected,actual,c) {
		this.currentTest.done = true;
		if(actual != expected) {
			this.currentTest.success = false;
			this.currentTest.error = "expected '" + Std.string(expected) + "' but was '" + Std.string(actual) + "'";
			this.currentTest.posInfos = c;
			throw new js__$Boot_HaxeError(this.currentTest);
		}
	}
	,__class__: haxe_unit_TestCase
};
var haxe_unit_TestRunner = function() { };
haxe_unit_TestRunner.__name__ = ["haxe","unit","TestRunner"];
haxe_unit_TestRunner.print = function(v) {
	var msg = js_Boot.__string_rec(v,"");
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		msg = StringTools.htmlEscape(msg).split("\n").join("<br/>");
		d.innerHTML += msg + "<br/>";
	} else if(typeof process != "undefined" && process.stdout != null && process.stdout.write != null) {
		process.stdout.write(msg);
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
var haxe_unit_TestStatus = function() { };
haxe_unit_TestStatus.__name__ = ["haxe","unit","TestStatus"];
haxe_unit_TestStatus.prototype = {
	done: null
	,success: null
	,error: null
	,posInfos: null
	,__class__: haxe_unit_TestStatus
};
var hxmath_frames__$Frame2_Frame2_$Impl_$ = {};
hxmath_frames__$Frame2_Frame2_$Impl_$.__name__ = ["hxmath","frames","_Frame2","Frame2_Impl_"];
hxmath_frames__$Frame2_Frame2_$Impl_$._new = function(offset,angleDegrees) {
	var this1 = new hxmath_frames_Frame2Default(offset,angleDegrees);
	return this1;
};
hxmath_frames__$Frame2_Frame2_$Impl_$.calculateMatrix = function(matrix,offset,angleDegrees) {
	var angle = Math.PI / 180 * angleDegrees;
	var s = Math.sin(angle);
	var c = Math.cos(angle);
	matrix.a = c;
	matrix.b = -s;
	matrix.c = s;
	matrix.d = c;
	var x = offset.x;
	var y = offset.y;
	matrix.tx = x;
	matrix.ty = y;
	return matrix;
};
hxmath_frames__$Frame2_Frame2_$Impl_$.lerp = function(frameA,frameB,t) {
	var a = frameA.get_offset();
	var b = frameB.get_offset();
	var tmp = new hxmath_math_Vector2Default((1.0 - t) * a.x + t * b.x,(1.0 - t) * a.y + t * b.y);
	var a1 = frameA.get_angleDegrees();
	var b1 = frameB.get_angleDegrees();
	if(Math.abs(a1 - b1) > 180.) {
		if(a1 < b1) {
			a1 += 360;
		} else {
			b1 += 360;
		}
	}
	var x = (1.0 - t) * a1 + t * b1;
	return hxmath_frames__$Frame2_Frame2_$Impl_$._new(tmp,x < 0?360 - -x % 360:x % 360);
};
hxmath_frames__$Frame2_Frame2_$Impl_$.concat = function(this1,other) {
	var self = this1;
	var self1 = hxmath_frames__$Frame2_Frame2_$Impl_$._new(self.get_offset(),self.get_angleDegrees());
	var self2 = self1.get_matrix();
	var m = new hxmath_math_Matrix2x2Default(self2.a,self2.b,self2.c,self2.d);
	var v = other.get_offset();
	var this2 = new hxmath_math_Vector2Default(m.a * v.x + m.b * v.y,m.c * v.x + m.d * v.y);
	var a = self1.get_offset();
	var self3 = this2;
	self3.x += a.x;
	self3.y += a.y;
	var x = self1.get_angleDegrees() + other.get_angleDegrees();
	self1.set_angleDegrees(x < 0?360 - -x % 360:x % 360);
	self1.set_offset(self3);
	return self1;
};
hxmath_frames__$Frame2_Frame2_$Impl_$.concatWith = function(this1,other) {
	var self = this1;
	var self1 = self.get_matrix();
	var m = new hxmath_math_Matrix2x2Default(self1.a,self1.b,self1.c,self1.d);
	var v = other.get_offset();
	var this2 = new hxmath_math_Vector2Default(m.a * v.x + m.b * v.y,m.c * v.x + m.d * v.y);
	var a = self.get_offset();
	var self2 = this2;
	self2.x += a.x;
	self2.y += a.y;
	var x = self.get_angleDegrees() + other.get_angleDegrees();
	self.set_angleDegrees(x < 0?360 - -x % 360:x % 360);
	self.set_offset(self2);
	return self;
};
hxmath_frames__$Frame2_Frame2_$Impl_$.transformFrom = function(this1,p) {
	var self = this1;
	var m = self.get_matrix();
	var m1 = new hxmath_math_Matrix2x2Default(m.a,m.b,m.c,m.d);
	var a = new hxmath_math_Vector2Default(m1.a * p.x + m1.b * p.y,m1.c * p.x + m1.d * p.y);
	var b = new hxmath_math_Vector2Default(m.tx,m.ty);
	var self1 = new hxmath_math_Vector2Default(a.x,a.y);
	self1.x += b.x;
	self1.y += b.y;
	return self1;
};
hxmath_frames__$Frame2_Frame2_$Impl_$.transformTo = function(this1,p) {
	var self = this1;
	var self1 = self.get_matrix();
	var this2 = new hxmath_math_Matrix2x2Default(self1.a,self1.b,self1.c,self1.d);
	var b = self.get_offset();
	var self2 = new hxmath_math_Vector2Default(p.x,p.y);
	self2.x -= b.x;
	self2.y -= b.y;
	var self3 = this2;
	return new hxmath_math_Vector2Default(self3.a * self2.x + self3.c * self2.y,self3.b * self2.x + self3.d * self2.y);
};
hxmath_frames__$Frame2_Frame2_$Impl_$.linearTransformFrom = function(this1,v) {
	var self = this1;
	var self1 = self.get_matrix();
	var m = new hxmath_math_Matrix2x2Default(self1.a,self1.b,self1.c,self1.d);
	return new hxmath_math_Vector2Default(m.a * v.x + m.b * v.y,m.c * v.x + m.d * v.y);
};
hxmath_frames__$Frame2_Frame2_$Impl_$.linearTransformTo = function(this1,v) {
	var self = this1;
	var self1 = self.get_matrix();
	var self2 = new hxmath_math_Matrix2x2Default(self1.a,self1.b,self1.c,self1.d);
	return new hxmath_math_Vector2Default(self2.a * v.x + self2.c * v.y,self2.b * v.x + self2.d * v.y);
};
hxmath_frames__$Frame2_Frame2_$Impl_$.inverse = function(this1) {
	var self = this1;
	var self1 = self.get_matrix();
	var this2 = new hxmath_math_Matrix2x2Default(self1.a,self1.b,self1.c,self1.d);
	var v = self.get_offset();
	var self2 = this2;
	var self3 = new hxmath_math_Vector2Default(self2.a * v.x + self2.c * v.y,self2.b * v.x + self2.d * v.y);
	self3.x = -self3.x;
	self3.y = -self3.y;
	return hxmath_frames__$Frame2_Frame2_$Impl_$._new(self3,-self.get_angleDegrees());
};
hxmath_frames__$Frame2_Frame2_$Impl_$.clone = function(this1) {
	var self = this1;
	return hxmath_frames__$Frame2_Frame2_$Impl_$._new(self.get_offset(),self.get_angleDegrees());
};
hxmath_frames__$Frame2_Frame2_$Impl_$.get_linearMatrix = function(this1) {
	var self = this1;
	var self1 = self.get_matrix();
	return new hxmath_math_Matrix2x2Default(self1.a,self1.b,self1.c,self1.d);
};
var hxmath_frames_IFrame2 = function() { };
hxmath_frames_IFrame2.__name__ = ["hxmath","frames","IFrame2"];
hxmath_frames_IFrame2.prototype = {
	get_matrix: null
	,get_offset: null
	,set_offset: null
	,get_angleDegrees: null
	,set_angleDegrees: null
	,__class__: hxmath_frames_IFrame2
};
var hxmath_frames_Frame2Default = function(offset,angleDegrees,isCached) {
	if(isCached == null) {
		isCached = true;
	}
	if(angleDegrees == null) {
		angleDegrees = 0.0;
	}
	this.isDirty = true;
	this.isCached = true;
	this.internalOffset = offset == null?new hxmath_math_Vector2Default(0.0,0.0):offset;
	this.internalAngleDegrees = angleDegrees;
	this.isCached = isCached;
	this.isDirty = true;
	this.internalMatrix = new hxmath_math_Matrix3x2Default(1.0,0.0,0.0,1.0,0.0,0.0);
};
hxmath_frames_Frame2Default.__name__ = ["hxmath","frames","Frame2Default"];
hxmath_frames_Frame2Default.__interfaces__ = [hxmath_frames_IFrame2];
hxmath_frames_Frame2Default.prototype = {
	internalMatrix: null
	,internalOffset: null
	,internalAngleDegrees: null
	,isCached: null
	,isDirty: null
	,toString: function() {
		return "Frame2 { offset: " + Std.string(this.internalOffset) + ", angleDegrees: " + this.internalAngleDegrees + " }";
	}
	,get_matrix: function() {
		if(!this.isCached || this.isDirty) {
			var matrix = this.internalMatrix;
			var offset = this.internalOffset;
			var angle = Math.PI / 180 * this.internalAngleDegrees;
			var s = Math.sin(angle);
			var c = Math.cos(angle);
			matrix.a = c;
			matrix.b = -s;
			matrix.c = s;
			matrix.d = c;
			var x = offset.x;
			var y = offset.y;
			matrix.tx = x;
			matrix.ty = y;
			this.isDirty = false;
		}
		return this.internalMatrix;
	}
	,get_offset: function() {
		return this.internalOffset;
	}
	,set_offset: function(offset) {
		this.internalOffset = offset;
		this.isDirty = true;
		return offset;
	}
	,get_angleDegrees: function() {
		return this.internalAngleDegrees;
	}
	,set_angleDegrees: function(angleDegrees) {
		this.internalAngleDegrees = angleDegrees;
		this.isDirty = true;
		return angleDegrees;
	}
	,__class__: hxmath_frames_Frame2Default
};
var hxmath_frames__$Frame3_Frame3_$Impl_$ = {};
hxmath_frames__$Frame3_Frame3_$Impl_$.__name__ = ["hxmath","frames","_Frame3","Frame3_Impl_"];
hxmath_frames__$Frame3_Frame3_$Impl_$._new = function(offset,orientation) {
	var this1 = new hxmath_frames_Frame3Default(offset,orientation);
	return this1;
};
hxmath_frames__$Frame3_Frame3_$Impl_$.calculateMatrix = function(matrix,offset,orientation) {
	var s = orientation.s;
	var x = orientation.x;
	var y = orientation.y;
	var z = orientation.z;
	matrix.m00 = 1 - 2 * (y * y + z * z);
	matrix.m10 = 2 * (x * y - s * z);
	matrix.m20 = 2 * (s * y + x * z);
	matrix.m01 = 2 * (x * y + s * z);
	matrix.m11 = 1 - 2 * (x * x + z * z);
	matrix.m21 = 2 * (y * z - s * x);
	matrix.m02 = 2 * (x * z - s * y);
	matrix.m12 = 2 * (y * z + s * x);
	matrix.m22 = 1 - 2 * (x * x + y * y);
	var x1 = offset.x;
	var y1 = offset.y;
	var z1 = offset.z;
	matrix.m30 = x1;
	matrix.m31 = y1;
	matrix.m32 = z1;
	matrix.m33 = 1.0;
	return matrix;
};
hxmath_frames__$Frame3_Frame3_$Impl_$.lerp = function(frameA,frameB,t) {
	var a = frameA.get_offset();
	var b = frameB.get_offset();
	var tmp = new hxmath_math_Vector3Default((1.0 - t) * a.x + t * b.x,(1.0 - t) * a.y + t * b.y,(1.0 - t) * a.z + t * b.z);
	var a1 = frameA.get_orientation();
	var b1 = frameB.get_orientation();
	var s = 1.0 - t;
	var self = new hxmath_math_QuaternionDefault(a1.s,a1.x,a1.y,a1.z);
	self.s *= s;
	self.x *= s;
	self.y *= s;
	self.z *= s;
	var self1 = new hxmath_math_QuaternionDefault(b1.s,b1.x,b1.y,b1.z);
	self1.s *= t;
	self1.x *= t;
	self1.y *= t;
	self1.z *= t;
	var self2 = new hxmath_math_QuaternionDefault(self.s,self.x,self.y,self.z);
	self2.s += self1.s;
	self2.x += self1.x;
	self2.y += self1.y;
	self2.z += self1.z;
	return hxmath_frames__$Frame3_Frame3_$Impl_$._new(tmp,self2);
};
hxmath_frames__$Frame3_Frame3_$Impl_$.concat = function(this1,other) {
	var self = this1;
	var self1 = hxmath_frames__$Frame3_Frame3_$Impl_$._new(self.get_offset(),self.get_orientation());
	var this2 = self1.get_orientation();
	var u = other.get_offset();
	var self2 = this2;
	var a = 2.0 * (self2.x * u.x + self2.y * u.y + self2.z * u.z);
	var b = self2.s * self2.s - self2.x * self2.x - self2.y * self2.y - self2.z * self2.z;
	var c = 2.0 * self2.s;
	var this3 = new hxmath_math_Vector3Default(a * self2.x + b * u.x + c * (self2.y * u.z - self2.z * u.y),a * self2.y + b * u.y + c * (self2.z * u.x - self2.x * u.z),a * self2.z + b * u.z + c * (self2.x * u.y - self2.y * u.x));
	var a1 = self1.get_offset();
	var self3 = this3;
	self3.x += a1.x;
	self3.y += a1.y;
	self3.z += a1.z;
	var a2 = self1.get_orientation();
	var b1 = other.get_orientation();
	var self4 = new hxmath_math_QuaternionDefault(a2.s * b1.s - a2.x * b1.x - a2.y * b1.y - a2.z * b1.z,a2.s * b1.x + b1.s * a2.x + a2.y * b1.z - a2.z * b1.y,a2.s * b1.y + b1.s * a2.y + a2.z * b1.x - a2.x * b1.z,a2.s * b1.z + b1.s * a2.z + a2.x * b1.y - a2.y * b1.x);
	var _g = 1.0 / Math.sqrt(self4.s * self4.s + self4.x * self4.x + self4.y * self4.y + self4.z * self4.z);
	var self5 = new hxmath_math_QuaternionDefault(self4.s,self4.x,self4.y,self4.z);
	self5.s *= _g;
	self5.x *= _g;
	self5.y *= _g;
	self5.z *= _g;
	self1.set_orientation(self5);
	self1.set_offset(self3);
	return self1;
};
hxmath_frames__$Frame3_Frame3_$Impl_$.concatWith = function(this1,other) {
	var self = this1;
	var this2 = self.get_orientation();
	var u = other.get_offset();
	var self1 = this2;
	var a = 2.0 * (self1.x * u.x + self1.y * u.y + self1.z * u.z);
	var b = self1.s * self1.s - self1.x * self1.x - self1.y * self1.y - self1.z * self1.z;
	var c = 2.0 * self1.s;
	var this3 = new hxmath_math_Vector3Default(a * self1.x + b * u.x + c * (self1.y * u.z - self1.z * u.y),a * self1.y + b * u.y + c * (self1.z * u.x - self1.x * u.z),a * self1.z + b * u.z + c * (self1.x * u.y - self1.y * u.x));
	var a1 = self.get_offset();
	var self2 = this3;
	self2.x += a1.x;
	self2.y += a1.y;
	self2.z += a1.z;
	var a2 = self.get_orientation();
	var b1 = other.get_orientation();
	var self3 = new hxmath_math_QuaternionDefault(a2.s * b1.s - a2.x * b1.x - a2.y * b1.y - a2.z * b1.z,a2.s * b1.x + b1.s * a2.x + a2.y * b1.z - a2.z * b1.y,a2.s * b1.y + b1.s * a2.y + a2.z * b1.x - a2.x * b1.z,a2.s * b1.z + b1.s * a2.z + a2.x * b1.y - a2.y * b1.x);
	var _g = 1.0 / Math.sqrt(self3.s * self3.s + self3.x * self3.x + self3.y * self3.y + self3.z * self3.z);
	var self4 = new hxmath_math_QuaternionDefault(self3.s,self3.x,self3.y,self3.z);
	self4.s *= _g;
	self4.x *= _g;
	self4.y *= _g;
	self4.z *= _g;
	self.set_orientation(self4);
	self.set_offset(self2);
	return self;
};
hxmath_frames__$Frame3_Frame3_$Impl_$.transformFrom = function(this1,p) {
	var self = this1;
	var self1 = self.get_orientation();
	var a = 2.0 * (self1.x * p.x + self1.y * p.y + self1.z * p.z);
	var b = self1.s * self1.s - self1.x * self1.x - self1.y * self1.y - self1.z * self1.z;
	var c = 2.0 * self1.s;
	var this2 = new hxmath_math_Vector3Default(a * self1.x + b * p.x + c * (self1.y * p.z - self1.z * p.y),a * self1.y + b * p.y + c * (self1.z * p.x - self1.x * p.z),a * self1.z + b * p.z + c * (self1.x * p.y - self1.y * p.x));
	var a1 = self.get_offset();
	var self2 = this2;
	self2.x += a1.x;
	self2.y += a1.y;
	self2.z += a1.z;
	return self2;
};
hxmath_frames__$Frame3_Frame3_$Impl_$.transformTo = function(this1,p) {
	var self = this1;
	var self1 = self.get_orientation();
	var self2 = new hxmath_math_QuaternionDefault(self1.s,self1.x,self1.y,self1.z);
	self2.x = -self2.x;
	self2.y = -self2.y;
	self2.z = -self2.z;
	var self3 = self2;
	var length = Math.sqrt(self3.s * self3.s + self3.x * self3.x + self3.y * self3.y + self3.z * self3.z);
	if(length > 0.0) {
		var k = 1.0 / length;
		self3.s *= k;
		self3.x *= k;
		self3.y *= k;
		self3.z *= k;
	}
	var this2 = self3;
	var b = self.get_offset();
	var self4 = new hxmath_math_Vector3Default(p.x,p.y,p.z);
	self4.x -= b.x;
	self4.y -= b.y;
	self4.z -= b.z;
	var self5 = this2;
	var a = 2.0 * (self5.x * self4.x + self5.y * self4.y + self5.z * self4.z);
	var b1 = self5.s * self5.s - self5.x * self5.x - self5.y * self5.y - self5.z * self5.z;
	var c = 2.0 * self5.s;
	return new hxmath_math_Vector3Default(a * self5.x + b1 * self4.x + c * (self5.y * self4.z - self5.z * self4.y),a * self5.y + b1 * self4.y + c * (self5.z * self4.x - self5.x * self4.z),a * self5.z + b1 * self4.z + c * (self5.x * self4.y - self5.y * self4.x));
};
hxmath_frames__$Frame3_Frame3_$Impl_$.linearTransformFrom = function(this1,v) {
	var self = this1;
	var self1 = self.get_orientation();
	var a = 2.0 * (self1.x * v.x + self1.y * v.y + self1.z * v.z);
	var b = self1.s * self1.s - self1.x * self1.x - self1.y * self1.y - self1.z * self1.z;
	var c = 2.0 * self1.s;
	return new hxmath_math_Vector3Default(a * self1.x + b * v.x + c * (self1.y * v.z - self1.z * v.y),a * self1.y + b * v.y + c * (self1.z * v.x - self1.x * v.z),a * self1.z + b * v.z + c * (self1.x * v.y - self1.y * v.x));
};
hxmath_frames__$Frame3_Frame3_$Impl_$.linearTransformTo = function(this1,v) {
	var self = this1;
	var self1 = self.get_orientation();
	var self2 = new hxmath_math_QuaternionDefault(self1.s,self1.x,self1.y,self1.z);
	self2.x = -self2.x;
	self2.y = -self2.y;
	self2.z = -self2.z;
	var self3 = self2;
	var length = Math.sqrt(self3.s * self3.s + self3.x * self3.x + self3.y * self3.y + self3.z * self3.z);
	if(length > 0.0) {
		var k = 1.0 / length;
		self3.s *= k;
		self3.x *= k;
		self3.y *= k;
		self3.z *= k;
	}
	var self4 = self3;
	var a = 2.0 * (self4.x * v.x + self4.y * v.y + self4.z * v.z);
	var b = self4.s * self4.s - self4.x * self4.x - self4.y * self4.y - self4.z * self4.z;
	var c = 2.0 * self4.s;
	return new hxmath_math_Vector3Default(a * self4.x + b * v.x + c * (self4.y * v.z - self4.z * v.y),a * self4.y + b * v.y + c * (self4.z * v.x - self4.x * v.z),a * self4.z + b * v.z + c * (self4.x * v.y - self4.y * v.x));
};
hxmath_frames__$Frame3_Frame3_$Impl_$.inverse = function(this1) {
	var self = this1;
	var self1 = self.get_orientation();
	var self2 = new hxmath_math_QuaternionDefault(self1.s,self1.x,self1.y,self1.z);
	self2.x = -self2.x;
	self2.y = -self2.y;
	self2.z = -self2.z;
	var self3 = self2;
	var length = Math.sqrt(self3.s * self3.s + self3.x * self3.x + self3.y * self3.y + self3.z * self3.z);
	if(length > 0.0) {
		var k = 1.0 / length;
		self3.s *= k;
		self3.x *= k;
		self3.y *= k;
		self3.z *= k;
	}
	var u = self.get_offset();
	var a = 2.0 * (self3.x * u.x + self3.y * u.y + self3.z * u.z);
	var b = self3.s * self3.s - self3.x * self3.x - self3.y * self3.y - self3.z * self3.z;
	var c = 2.0 * self3.s;
	var self4 = new hxmath_math_Vector3Default(a * self3.x + b * u.x + c * (self3.y * u.z - self3.z * u.y),a * self3.y + b * u.y + c * (self3.z * u.x - self3.x * u.z),a * self3.z + b * u.z + c * (self3.x * u.y - self3.y * u.x));
	self4.x = -self4.x;
	self4.y = -self4.y;
	self4.z = -self4.z;
	return hxmath_frames__$Frame3_Frame3_$Impl_$._new(self4,self3);
};
hxmath_frames__$Frame3_Frame3_$Impl_$.clone = function(this1) {
	var self = this1;
	return hxmath_frames__$Frame3_Frame3_$Impl_$._new(self.get_offset(),self.get_orientation());
};
hxmath_frames__$Frame3_Frame3_$Impl_$.get_linearMatrix = function(this1) {
	var self = this1;
	var self1 = self.get_matrix();
	return new hxmath_math_Matrix3x3Default(self1.m00,self1.m10,self1.m20,self1.m01,self1.m11,self1.m21,self1.m02,self1.m12,self1.m22);
};
var hxmath_frames_IFrame3 = function() { };
hxmath_frames_IFrame3.__name__ = ["hxmath","frames","IFrame3"];
hxmath_frames_IFrame3.prototype = {
	get_matrix: null
	,get_offset: null
	,set_offset: null
	,get_orientation: null
	,set_orientation: null
	,__class__: hxmath_frames_IFrame3
};
var hxmath_frames_Frame3Default = function(offset,orientation,isCached) {
	if(isCached == null) {
		isCached = true;
	}
	this.isDirty = true;
	this.isCached = true;
	this.internalOffset = offset == null?new hxmath_math_Vector3Default(0.0,0.0,0.0):offset;
	this.internalOrientation = orientation == null?new hxmath_math_QuaternionDefault(1,0,0,0):orientation;
	this.isCached = isCached;
	this.isDirty = true;
	this.internalMatrix = new hxmath_math_Matrix4x4Default(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
};
hxmath_frames_Frame3Default.__name__ = ["hxmath","frames","Frame3Default"];
hxmath_frames_Frame3Default.__interfaces__ = [hxmath_frames_IFrame3];
hxmath_frames_Frame3Default.prototype = {
	internalMatrix: null
	,internalOffset: null
	,internalOrientation: null
	,isCached: null
	,isDirty: null
	,toString: function() {
		return "Frame3 { offset: " + Std.string(this.internalOffset) + ", orientation: " + Std.string(this.internalOrientation) + " }";
	}
	,get_matrix: function() {
		if(!this.isCached || this.isDirty) {
			var matrix = this.internalMatrix;
			var offset = this.internalOffset;
			var orientation = this.internalOrientation;
			var s = orientation.s;
			var x = orientation.x;
			var y = orientation.y;
			var z = orientation.z;
			matrix.m00 = 1 - 2 * (y * y + z * z);
			matrix.m10 = 2 * (x * y - s * z);
			matrix.m20 = 2 * (s * y + x * z);
			matrix.m01 = 2 * (x * y + s * z);
			matrix.m11 = 1 - 2 * (x * x + z * z);
			matrix.m21 = 2 * (y * z - s * x);
			matrix.m02 = 2 * (x * z - s * y);
			matrix.m12 = 2 * (y * z + s * x);
			matrix.m22 = 1 - 2 * (x * x + y * y);
			var x1 = offset.x;
			var y1 = offset.y;
			var z1 = offset.z;
			matrix.m30 = x1;
			matrix.m31 = y1;
			matrix.m32 = z1;
			matrix.m33 = 1.0;
			this.isDirty = false;
		}
		return this.internalMatrix;
	}
	,get_offset: function() {
		return this.internalOffset;
	}
	,set_offset: function(offset) {
		this.internalOffset = offset;
		this.isDirty = true;
		return offset;
	}
	,get_orientation: function() {
		return this.internalOrientation;
	}
	,set_orientation: function(orientation) {
		this.internalOrientation = orientation;
		this.isDirty = true;
		return orientation;
	}
	,__class__: hxmath_frames_Frame3Default
};
var hxmath_math_IntVector2Default = function(x,y) {
	this.x = x;
	this.y = y;
};
hxmath_math_IntVector2Default.__name__ = ["hxmath","math","IntVector2Default"];
hxmath_math_IntVector2Default.prototype = {
	x: null
	,y: null
	,toString: function() {
		return "(" + this.x + ", " + this.y + ")";
	}
	,__class__: hxmath_math_IntVector2Default
};
var hxmath_math__$IntVector2_IntVector2_$Impl_$ = {};
hxmath_math__$IntVector2_IntVector2_$Impl_$.__name__ = ["hxmath","math","_IntVector2","IntVector2_Impl_"];
hxmath_math__$IntVector2_IntVector2_$Impl_$._new = function(x,y) {
	return new hxmath_math_IntVector2Default(x,y);
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.fromArray = function(rawData) {
	if(rawData.length != 2) {
		throw new js__$Boot_HaxeError("Invalid rawData.");
	}
	return hxmath_math__$IntVector2_IntVector2_$Impl_$._new(rawData[0],rawData[1]);
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.toVector2 = function(this1) {
	var self = this1;
	return new hxmath_math_Vector2Default(self.x,self.y);
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.dot = function(a,b) {
	return a.x * b.x + a.y * b.y;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.multiply = function(a,s) {
	var self = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(a.x,a.y);
	self.x *= s;
	self.y *= s;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.add = function(a,b) {
	var self = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(a.x,a.y);
	self.x += b.x;
	self.y += b.y;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.subtract = function(a,b) {
	var self = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(a.x,a.y);
	self.x -= b.x;
	self.y -= b.y;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.negate = function(a) {
	return hxmath_math__$IntVector2_IntVector2_$Impl_$._new(-a.x,-a.y);
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.equals = function(a,b) {
	if(!(a == null && b == null)) {
		if(a != null && b != null && a.x == b.x) {
			return a.y == b.y;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.max = function(a,b) {
	var self = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(a.x,a.y);
	var a1 = self.x;
	var b1 = b.x;
	self.x = b1 > a1?b1:a1;
	var a2 = self.y;
	var b2 = b.y;
	self.y = b2 > a2?b2:a2;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.min = function(a,b) {
	var self = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(a.x,a.y);
	var a1 = self.x;
	var b1 = b.x;
	self.x = b1 < a1?b1:a1;
	var a2 = self.y;
	var b2 = b.y;
	self.y = b2 < a2?b2:a2;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.set = function(this1,x,y) {
	var self = this1;
	self.x = x;
	self.y = y;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.multiplyWith = function(this1,s) {
	var self = this1;
	self.x *= s;
	self.y *= s;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.addWith = function(this1,a) {
	var self = this1;
	self.x += a.x;
	self.y += a.y;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.subtractWith = function(this1,a) {
	var self = this1;
	self.x -= a.x;
	self.y -= a.y;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.maxWith = function(this1,a) {
	var self = this1;
	var a1 = self.x;
	var b = a.x;
	self.x = b > a1?b:a1;
	var a2 = self.y;
	var b1 = a.y;
	self.y = b1 > a2?b1:a2;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.minWith = function(this1,a) {
	var self = this1;
	var a1 = self.x;
	var b = a.x;
	self.x = b < a1?b:a1;
	var a2 = self.y;
	var b1 = a.y;
	self.y = b1 < a2?b1:a2;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.copyTo = function(this1,target) {
	var self = this1;
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.x;
			break;
		case 1:
			tmp = self.y;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			target.x = value;
			break;
		case 1:
			target.y = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.clone = function(this1) {
	var self = this1;
	return hxmath_math__$IntVector2_IntVector2_$Impl_$._new(self.x,self.y);
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x;
	case 1:
		return self.y;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x = value;
	case 1:
		return self.y = value;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.applyNegate = function(this1) {
	var self = this1;
	self.x = -self.x;
	self.y = -self.y;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.applyScalarFunc = function(this1,func) {
	var self = this1;
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.x;
			break;
		case 1:
			tmp = self.y;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = func(tmp);
		switch(i) {
		case 0:
			self.x = value;
			break;
		case 1:
			self.y = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.rotateLeft = function(this1) {
	var self = this1;
	var newX = -self.y;
	self.y = self.x;
	self.x = newX;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.rotateRight = function(this1) {
	var self = this1;
	var newX = self.y;
	self.y = -self.x;
	self.x = newX;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.get_zero = function() {
	return hxmath_math__$IntVector2_IntVector2_$Impl_$._new(0,0);
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.get_xAxis = function() {
	return hxmath_math__$IntVector2_IntVector2_$Impl_$._new(1,0);
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.get_yAxis = function() {
	return hxmath_math__$IntVector2_IntVector2_$Impl_$._new(0,1);
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.get_lengthSq = function(this1) {
	var self = this1;
	return self.x * self.x + self.y * self.y;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.get_rotatedLeft = function(this1) {
	var self = this1;
	var self1 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(self.x,self.y);
	var newX = -self1.y;
	self1.y = self1.x;
	self1.x = newX;
	return self1;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.get_rotatedRight = function(this1) {
	var self = this1;
	var self1 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(self.x,self.y);
	var newX = self1.y;
	self1.y = -self1.x;
	self1.x = newX;
	return self1;
};
var hxmath_math_MathUtil = function() { };
hxmath_math_MathUtil.__name__ = ["hxmath","math","MathUtil"];
hxmath_math_MathUtil.intMax = function(a,b) {
	if(b > a) {
		return b;
	} else {
		return a;
	}
};
hxmath_math_MathUtil.intMin = function(a,b) {
	if(b < a) {
		return b;
	} else {
		return a;
	}
};
hxmath_math_MathUtil.lerpCyclic = function(a,b,t,max) {
	if(Math.abs(a - b) > 0.5 * max) {
		if(a < b) {
			a += max;
		} else {
			b += max;
		}
	}
	var x = (1.0 - t) * a + t * b;
	if(x < 0) {
		return max - -x % max;
	} else {
		return x % max;
	}
};
hxmath_math_MathUtil.sign = function(x,w) {
	if(w == null) {
		w = 0;
	}
	if(Math.abs(x) < w) {
		return 0;
	} else if(x <= -w) {
		return -1;
	} else {
		return 1;
	}
};
hxmath_math_MathUtil.rangeDistance = function(aStart,aWidth,bStart,bWidth) {
	if(aStart + aWidth < bStart) {
		return bStart - (aStart + aWidth);
	} else if(bStart + bWidth < aStart) {
		return aStart - (bStart + bWidth);
	} else {
		return 0;
	}
};
hxmath_math_MathUtil.openRangeContains = function(aStart,aWidth,x) {
	if(x > aStart) {
		return x < aStart + aWidth;
	} else {
		return false;
	}
};
hxmath_math_MathUtil.openRangesIntersect = function(aStart,aWidth,bStart,bWidth) {
	return !(aStart >= bStart + bWidth || bStart >= aStart + aWidth);
};
hxmath_math_MathUtil.closedRangeContains = function(aStart,aWidth,x) {
	if(x >= aStart) {
		return x <= aStart + aWidth;
	} else {
		return false;
	}
};
hxmath_math_MathUtil.radToDeg = function(rad) {
	return 180 / Math.PI * rad;
};
hxmath_math_MathUtil.degToRad = function(deg) {
	return Math.PI / 180 * deg;
};
hxmath_math_MathUtil.wrap = function(x,n) {
	if(x < 0) {
		return n - -x % n;
	} else {
		return x % n;
	}
};
hxmath_math_MathUtil.clamp = function(value,min,max) {
	if(value < min) {
		return min;
	} else if(value > max) {
		return max;
	} else {
		return value;
	}
};
hxmath_math_MathUtil.orient2d = function(a,b,c) {
	var result = (a.x - c.x) * (b.y - c.y) - (a.y - c.y) * (b.x - c.x);
	if(result > 0) {
		return 1;
	} else if(result < 0) {
		return -1;
	} else {
		return 0;
	}
};
hxmath_math_MathUtil.det2x2 = function(m00,m10,m01,m11) {
	return m00 * m11 - m10 * m01;
};
hxmath_math_MathUtil.det3x3 = function(m00,m10,m20,m01,m11,m21,m02,m12,m22) {
	return m00 * (m11 * m22 - m21 * m12) - m10 * (m01 * m22 - m21 * m02) + m20 * (m01 * m12 - m11 * m02);
};
hxmath_math_MathUtil.det4x4 = function(m00,m10,m20,m30,m01,m11,m21,m31,m02,m12,m22,m32,m03,m13,m23,m33) {
	return m00 * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13)) - m10 * (m01 * (m22 * m33 - m32 * m23) - m21 * (m02 * m33 - m32 * m03) + m31 * (m02 * m23 - m22 * m03)) + m20 * (m01 * (m12 * m33 - m32 * m13) - m11 * (m02 * m33 - m32 * m03) + m31 * (m02 * m13 - m12 * m03)) - m30 * (m01 * (m12 * m23 - m22 * m13) - m11 * (m02 * m23 - m22 * m03) + m21 * (m02 * m13 - m12 * m03));
};
var hxmath_math_Matrix2x2Default = function(a,b,c,d) {
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
};
hxmath_math_Matrix2x2Default.__name__ = ["hxmath","math","Matrix2x2Default"];
hxmath_math_Matrix2x2Default.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,toString: function() {
		return "[a: " + this.a + ", b: " + this.b + ", c: " + this.c + ", d: " + this.d + "]";
	}
	,__class__: hxmath_math_Matrix2x2Default
};
var hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$ = {};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.__name__ = ["hxmath","math","_Matrix2x2","Matrix2x2_Impl_"];
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$._new = function(a,b,c,d) {
	return new hxmath_math_Matrix2x2Default(a,b,c,d);
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.fromArray = function(rawData) {
	if(rawData.length != 4) {
		throw new js__$Boot_HaxeError("Invalid rawData.");
	}
	return new hxmath_math_Matrix2x2Default(rawData[0],rawData[1],rawData[2],rawData[3]);
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.fromMatrix2x2Shape = function(other) {
	return new hxmath_math_Matrix2x2Default(other.a,other.b,other.c,other.d);
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.multiplyScalar = function(s,m) {
	return new hxmath_math_Matrix2x2Default(s * m.a,s * m.b,s * m.c,s * m.d);
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.multiplyVector = function(m,v) {
	return new hxmath_math_Vector2Default(m.a * v.x + m.b * v.y,m.c * v.x + m.d * v.y);
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.multiply = function(m,n) {
	return new hxmath_math_Matrix2x2Default(m.a * n.a + m.b * n.c,m.a * n.b + m.b * n.d,m.c * n.a + m.d * n.c,m.c * n.b + m.d * n.d);
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.add = function(m,n) {
	var self = new hxmath_math_Matrix2x2Default(m.a,m.b,m.c,m.d);
	self.a += n.a;
	self.b += n.b;
	self.c += n.c;
	self.d += n.d;
	return self;
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.subtract = function(m,n) {
	var self = new hxmath_math_Matrix2x2Default(m.a,m.b,m.c,m.d);
	self.a -= n.a;
	self.b -= n.b;
	self.c -= n.c;
	self.d -= n.d;
	return self;
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.negate = function(m) {
	return new hxmath_math_Matrix2x2Default(-m.a,-m.b,-m.c,-m.d);
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.equals = function(m,n) {
	if(!(m == null && n == null)) {
		if(m != null && n != null && m.a == n.a && m.b == n.b && m.c == n.c) {
			return m.d == n.d;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.rotate = function(angle) {
	var self = new hxmath_math_Matrix2x2Default(0.0,0.0,0.0,0.0);
	var s = Math.sin(angle);
	var c = Math.cos(angle);
	self.a = c;
	self.b = -s;
	self.c = s;
	self.d = c;
	return self;
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.scale = function(sx,sy) {
	return new hxmath_math_Matrix2x2Default(sx,0.0,0.0,sy);
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.setRotate = function(this1,angle) {
	var self = this1;
	var s = Math.sin(angle);
	var c = Math.cos(angle);
	self.a = c;
	self.b = -s;
	self.c = s;
	self.d = c;
	return self;
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.set = function(this1,a,b,c,d) {
	var self = this1;
	self.a = a;
	self.b = b;
	self.c = c;
	self.d = d;
	return this1;
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.addWith = function(this1,m) {
	var self = this1;
	self.a += m.a;
	self.b += m.b;
	self.c += m.c;
	self.d += m.d;
	return self;
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.subtractWith = function(this1,m) {
	var self = this1;
	self.a -= m.a;
	self.b -= m.b;
	self.c -= m.c;
	self.d -= m.d;
	return self;
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.copyTo = function(this1,target) {
	var self = this1;
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.a;
			break;
		case 1:
			tmp = self.b;
			break;
		case 2:
			tmp = self.c;
			break;
		case 3:
			tmp = self.d;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			target.a = value;
			break;
		case 1:
			target.b = value;
			break;
		case 2:
			target.c = value;
			break;
		case 3:
			target.d = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.copyToShape = function(this1,target) {
	var self = this1;
	target.a = self.a;
	target.b = self.b;
	target.c = self.c;
	target.d = self.d;
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.copyFromShape = function(this1,source) {
	var self = this1;
	self.a = source.a;
	self.b = source.b;
	self.c = source.c;
	self.d = source.d;
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.clone = function(this1) {
	var self = this1;
	return new hxmath_math_Matrix2x2Default(self.a,self.b,self.c,self.d);
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.a;
	case 1:
		return self.b;
	case 2:
		return self.c;
	case 3:
		return self.d;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.a = value;
	case 1:
		return self.b = value;
	case 2:
		return self.c = value;
	case 3:
		return self.d = value;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.getElement = function(this1,column,row) {
	var self = this1;
	var tmp;
	switch(row * 2 + column) {
	case 0:
		tmp = self.a;
		break;
	case 1:
		tmp = self.b;
		break;
	case 2:
		tmp = self.c;
		break;
	case 3:
		tmp = self.d;
		break;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
	return tmp;
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.setElement = function(this1,column,row,value) {
	var self = this1;
	var tmp;
	switch(row * 2 + column) {
	case 0:
		tmp = self.a = value;
		break;
	case 1:
		tmp = self.b = value;
		break;
	case 2:
		tmp = self.c = value;
		break;
	case 3:
		tmp = self.d = value;
		break;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
	return tmp;
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.col = function(this1,index) {
	var self = this1;
	switch(index) {
	case 0:
		return new hxmath_math_Vector2Default(self.a,self.c);
	case 1:
		return new hxmath_math_Vector2Default(self.b,self.d);
	default:
		throw new js__$Boot_HaxeError("Invalid column");
	}
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.row = function(this1,index) {
	var self = this1;
	switch(index) {
	case 0:
		return new hxmath_math_Vector2Default(self.a,self.b);
	case 1:
		return new hxmath_math_Vector2Default(self.c,self.d);
	default:
		throw new js__$Boot_HaxeError("Invalid row");
	}
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.transposeMultiplyVector = function(this1,v) {
	var self = this1;
	return new hxmath_math_Vector2Default(self.a * v.x + self.c * v.y,self.b * v.x + self.d * v.y);
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.applyScalarFunc = function(this1,func) {
	var self = this1;
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.a;
			break;
		case 1:
			tmp = self.b;
			break;
		case 2:
			tmp = self.c;
			break;
		case 3:
			tmp = self.d;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = func(tmp);
		switch(i) {
		case 0:
			self.a = value;
			break;
		case 1:
			self.b = value;
			break;
		case 2:
			self.c = value;
			break;
		case 3:
			self.d = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	return self;
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.get_zero = function() {
	return new hxmath_math_Matrix2x2Default(0.0,0.0,0.0,0.0);
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.get_identity = function() {
	return new hxmath_math_Matrix2x2Default(1.0,0.0,0.0,1.0);
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.get_det = function(this1) {
	var self = this1;
	return self.a * self.d - self.b * self.c;
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.get_transpose = function(this1) {
	var self = this1;
	return new hxmath_math_Matrix2x2Default(self.a,self.c,self.b,self.d);
};
var hxmath_math_Matrix3x2Default = function(a,b,c,d,tx,ty) {
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
hxmath_math_Matrix3x2Default.__name__ = ["hxmath","math","Matrix3x2Default"];
hxmath_math_Matrix3x2Default.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,toString: function() {
		return "[a: " + this.a + ", b: " + this.b + ", c: " + this.c + ", d: " + this.d + ", tx: " + this.tx + ", ty: " + this.ty + "]";
	}
	,__class__: hxmath_math_Matrix3x2Default
};
var hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$ = {};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.__name__ = ["hxmath","math","_Matrix3x2","Matrix3x2_Impl_"];
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$._new = function(a,b,c,d,tx,ty) {
	return new hxmath_math_Matrix3x2Default(a,b,c,d,tx,ty);
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.fromArray = function(rawData) {
	if(rawData.length != 6) {
		throw new js__$Boot_HaxeError("Invalid rawData.");
	}
	return new hxmath_math_Matrix3x2Default(rawData[0],rawData[1],rawData[2],rawData[3],rawData[4],rawData[5]);
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.fromMatrix3x2Shape = function(other) {
	return new hxmath_math_Matrix3x2Default(other.a,other.b,other.c,other.d,other.tx,other.ty);
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.multiplyScalar = function(s,m) {
	return new hxmath_math_Matrix3x2Default(s * m.a,s * m.b,s * m.c,s * m.d,s * m.tx,s * m.ty);
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.transform = function(m,v) {
	var m1 = new hxmath_math_Matrix2x2Default(m.a,m.b,m.c,m.d);
	var a = new hxmath_math_Vector2Default(m1.a * v.x + m1.b * v.y,m1.c * v.x + m1.d * v.y);
	var b = new hxmath_math_Vector2Default(m.tx,m.ty);
	var self = new hxmath_math_Vector2Default(a.x,a.y);
	self.x += b.x;
	self.y += b.y;
	return self;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.concat = function(m,n) {
	var mLinear = new hxmath_math_Matrix2x2Default(m.a,m.b,m.c,m.d);
	var nLinear = new hxmath_math_Matrix2x2Default(n.a,n.b,n.c,n.d);
	var resultLinear = new hxmath_math_Matrix2x2Default(mLinear.a * nLinear.a + mLinear.b * nLinear.c,mLinear.a * nLinear.b + mLinear.b * nLinear.d,mLinear.c * nLinear.a + mLinear.d * nLinear.c,mLinear.c * nLinear.b + mLinear.d * nLinear.d);
	var v = new hxmath_math_Vector2Default(m.tx,m.ty);
	var a = new hxmath_math_Vector2Default(nLinear.a * v.x + nLinear.b * v.y,nLinear.c * v.x + nLinear.d * v.y);
	var b = new hxmath_math_Vector2Default(n.tx,n.ty);
	var self = new hxmath_math_Vector2Default(a.x,a.y);
	self.x += b.x;
	self.y += b.y;
	return new hxmath_math_Matrix3x2Default(resultLinear.a,resultLinear.b,resultLinear.c,resultLinear.d,self.x,self.y);
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.add = function(m,n) {
	var self = new hxmath_math_Matrix3x2Default(m.a,m.b,m.c,m.d,m.tx,m.ty);
	self.a += n.a;
	self.b += n.b;
	self.c += n.c;
	self.d += n.d;
	self.tx += n.tx;
	self.ty += n.ty;
	return self;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.subtract = function(m,n) {
	var self = new hxmath_math_Matrix3x2Default(m.a,m.b,m.c,m.d,m.tx,m.ty);
	self.a -= n.a;
	self.b -= n.b;
	self.c -= n.c;
	self.d -= n.d;
	self.tx -= n.tx;
	self.ty -= n.ty;
	return self;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.negate = function(m) {
	return new hxmath_math_Matrix3x2Default(-m.a,-m.b,-m.c,-m.d,-m.tx,-m.ty);
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.equals = function(m,n) {
	if(!(m == null && n == null)) {
		if(m != null && n != null && m.a == n.a && m.b == n.b && m.c == n.c && m.d == n.d && m.tx == n.tx) {
			return m.ty == n.ty;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.rotate = function(angle) {
	var m = new hxmath_math_Matrix3x2Default(1.0,0.0,0.0,1.0,0.0,0.0);
	var self = new hxmath_math_Matrix2x2Default(0.0,0.0,0.0,0.0);
	var s = Math.sin(angle);
	var c = Math.cos(angle);
	self.a = c;
	self.b = -s;
	self.c = s;
	self.d = c;
	m.a = self.a;
	m.b = self.b;
	m.c = self.c;
	m.d = self.d;
	return m;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.translate = function(v) {
	var m = new hxmath_math_Matrix3x2Default(1.0,0.0,0.0,1.0,0.0,0.0);
	m.tx = v.x;
	m.ty = v.y;
	return m;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.orbit = function(center,angle) {
	var m = new hxmath_math_Matrix3x2Default(1.0,0.0,0.0,1.0,0.0,0.0);
	var self = new hxmath_math_Matrix2x2Default(0.0,0.0,0.0,0.0);
	var s = Math.sin(angle);
	var c = Math.cos(angle);
	self.a = c;
	self.b = -s;
	self.c = s;
	self.d = c;
	m.a = self.a;
	m.b = self.b;
	m.c = self.c;
	m.d = self.d;
	var m1 = new hxmath_math_Matrix2x2Default(m.a,m.b,m.c,m.d);
	var b = new hxmath_math_Vector2Default(m1.a * center.x + m1.b * center.y,m1.c * center.x + m1.d * center.y);
	var self1 = new hxmath_math_Vector2Default(center.x,center.y);
	self1.x -= b.x;
	self1.y -= b.y;
	m.tx = self1.x;
	m.ty = self1.y;
	return m;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.copyTo = function(this1,target) {
	var self = this1;
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.a;
			break;
		case 1:
			tmp = self.b;
			break;
		case 2:
			tmp = self.tx;
			break;
		case 3:
			tmp = self.c;
			break;
		case 4:
			tmp = self.d;
			break;
		case 5:
			tmp = self.ty;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			target.a = value;
			break;
		case 1:
			target.b = value;
			break;
		case 2:
			target.tx = value;
			break;
		case 3:
			target.c = value;
			break;
		case 4:
			target.d = value;
			break;
		case 5:
			target.ty = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.copyToShape = function(this1,target) {
	var self = this1;
	target.a = self.a;
	target.b = self.b;
	target.c = self.c;
	target.d = self.d;
	target.tx = self.tx;
	target.ty = self.ty;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.copyFromShape = function(this1,source) {
	var self = this1;
	self.a = source.a;
	self.b = source.b;
	self.c = source.c;
	self.d = source.d;
	self.tx = source.tx;
	self.ty = source.ty;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.setRotate = function(this1,angle) {
	var self = this1;
	var s = Math.sin(angle);
	var c = Math.cos(angle);
	self.a = c;
	self.b = -s;
	self.c = s;
	self.d = c;
	return self;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.setTranslate = function(this1,x,y) {
	var self = this1;
	self.tx = x;
	self.ty = y;
	return self;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.set = function(this1,a,b,c,d,tx,ty) {
	var self = this1;
	self.a = a;
	self.b = b;
	self.c = c;
	self.d = d;
	self.tx = tx;
	self.ty = ty;
	return self;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.addWith = function(this1,m) {
	var self = this1;
	self.a += m.a;
	self.b += m.b;
	self.c += m.c;
	self.d += m.d;
	self.tx += m.tx;
	self.ty += m.ty;
	return self;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.subtractWith = function(this1,m) {
	var self = this1;
	self.a -= m.a;
	self.b -= m.b;
	self.c -= m.c;
	self.d -= m.d;
	self.tx -= m.tx;
	self.ty -= m.ty;
	return self;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.clone = function(this1) {
	var self = this1;
	return new hxmath_math_Matrix3x2Default(self.a,self.b,self.c,self.d,self.tx,self.ty);
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.a;
	case 1:
		return self.b;
	case 2:
		return self.tx;
	case 3:
		return self.c;
	case 4:
		return self.d;
	case 5:
		return self.ty;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.a = value;
	case 1:
		return self.b = value;
	case 2:
		return self.tx = value;
	case 3:
		return self.c = value;
	case 4:
		return self.d = value;
	case 5:
		return self.ty = value;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.getElement = function(this1,column,row) {
	var self = this1;
	var tmp;
	switch(row * 3 + column) {
	case 0:
		tmp = self.a;
		break;
	case 1:
		tmp = self.b;
		break;
	case 2:
		tmp = self.tx;
		break;
	case 3:
		tmp = self.c;
		break;
	case 4:
		tmp = self.d;
		break;
	case 5:
		tmp = self.ty;
		break;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
	return tmp;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.setElement = function(this1,column,row,value) {
	var self = this1;
	var tmp;
	switch(row * 3 + column) {
	case 0:
		tmp = self.a = value;
		break;
	case 1:
		tmp = self.b = value;
		break;
	case 2:
		tmp = self.tx = value;
		break;
	case 3:
		tmp = self.c = value;
		break;
	case 4:
		tmp = self.d = value;
		break;
	case 5:
		tmp = self.ty = value;
		break;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
	return tmp;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.col = function(this1,index) {
	var self = this1;
	switch(index) {
	case 0:
		return new hxmath_math_Vector2Default(self.a,self.c);
	case 1:
		return new hxmath_math_Vector2Default(self.b,self.d);
	case 2:
		return new hxmath_math_Vector2Default(self.tx,self.ty);
	default:
		throw new js__$Boot_HaxeError("Invalid column");
	}
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.row = function(this1,index) {
	var self = this1;
	switch(index) {
	case 0:
		return new hxmath_math_Vector3Default(self.a,self.b,self.tx);
	case 1:
		return new hxmath_math_Vector3Default(self.c,self.d,self.ty);
	default:
		throw new js__$Boot_HaxeError("Invalid row");
	}
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.applyScalarFunc = function(this1,func) {
	var self = this1;
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.a;
			break;
		case 1:
			tmp = self.b;
			break;
		case 2:
			tmp = self.tx;
			break;
		case 3:
			tmp = self.c;
			break;
		case 4:
			tmp = self.d;
			break;
		case 5:
			tmp = self.ty;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = func(tmp);
		switch(i) {
		case 0:
			self.a = value;
			break;
		case 1:
			self.b = value;
			break;
		case 2:
			self.tx = value;
			break;
		case 3:
			self.c = value;
			break;
		case 4:
			self.d = value;
			break;
		case 5:
			self.ty = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	return self;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.applySubMatrixTranspose = function(this1) {
	var self = this1;
	var temp = self.c;
	self.c = self.b;
	self.b = temp;
	return self;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.applyInvertFrame = function(this1) {
	var self = this1;
	var temp = self.c;
	self.c = self.b;
	self.b = temp;
	var tx = -(self.a * self.tx + self.b * self.ty);
	var ty = -(self.c * self.tx + self.d * self.ty);
	self.tx = tx;
	self.ty = ty;
	return self;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.get_zero = function() {
	return new hxmath_math_Matrix3x2Default(0.0,0.0,0.0,0.0,0.0,0.0);
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.get_identity = function() {
	return new hxmath_math_Matrix3x2Default(1.0,0.0,0.0,1.0,0.0,0.0);
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.get_t = function(this1) {
	var self = this1;
	return new hxmath_math_Vector2Default(self.tx,self.ty);
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.set_t = function(this1,t) {
	var self = this1;
	self.tx = t.x;
	self.ty = t.y;
	return t;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.get_linearSubMatrix = function(this1) {
	var self = this1;
	return new hxmath_math_Matrix2x2Default(self.a,self.b,self.c,self.d);
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.set_linearSubMatrix = function(this1,value) {
	var self = this1;
	self.a = value.a;
	self.b = value.b;
	self.c = value.c;
	self.d = value.d;
	return value;
};
var hxmath_math_Matrix3x3Default = function(m00,m10,m20,m01,m11,m21,m02,m12,m22) {
	this.m00 = m00;
	this.m10 = m10;
	this.m20 = m20;
	this.m01 = m01;
	this.m11 = m11;
	this.m21 = m21;
	this.m02 = m02;
	this.m12 = m12;
	this.m22 = m22;
};
hxmath_math_Matrix3x3Default.__name__ = ["hxmath","math","Matrix3x3Default"];
hxmath_math_Matrix3x3Default.prototype = {
	m00: null
	,m01: null
	,m02: null
	,m10: null
	,m11: null
	,m12: null
	,m20: null
	,m21: null
	,m22: null
	,toString: function() {
		return "[[" + this.m00 + ", " + this.m10 + ", " + this.m20 + "], [" + this.m01 + ", " + this.m11 + ", " + this.m21 + "], [" + this.m02 + ", " + this.m12 + ", " + this.m22 + "]]";
	}
	,__class__: hxmath_math_Matrix3x3Default
};
var hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$ = {};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.__name__ = ["hxmath","math","_Matrix3x3","Matrix3x3_Impl_"];
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$._new = function(m00,m10,m20,m01,m11,m21,m02,m12,m22) {
	return new hxmath_math_Matrix3x3Default(m00,m10,m20,m01,m11,m21,m02,m12,m22);
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.fromArray = function(rawData) {
	if(rawData.length != 9) {
		throw new js__$Boot_HaxeError("Invalid rawData.");
	}
	return new hxmath_math_Matrix3x3Default(rawData[0],rawData[1],rawData[2],rawData[3],rawData[4],rawData[5],rawData[6],rawData[7],rawData[8]);
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.fromMatrix3x3Shape = function(other) {
	return new hxmath_math_Matrix3x3Default(other.m00,other.m10,other.m20,other.m01,other.m11,other.m21,other.m02,other.m12,other.m22);
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.multiplyScalar = function(s,a) {
	return new hxmath_math_Matrix3x3Default(s * a.m00,s * a.m10,s * a.m20,s * a.m01,s * a.m11,s * a.m21,s * a.m02,s * a.m12,s * a.m22);
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.multiplyVector = function(a,v) {
	return new hxmath_math_Vector3Default(a.m00 * v.x + a.m10 * v.y + a.m20 * v.z,a.m01 * v.x + a.m11 * v.y + a.m21 * v.z,a.m02 * v.x + a.m12 * v.y + a.m22 * v.z);
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.multiply = function(a,b) {
	return new hxmath_math_Matrix3x3Default(a.m00 * b.m00 + a.m10 * b.m01 + a.m20 * b.m02,a.m00 * b.m10 + a.m10 * b.m11 + a.m20 * b.m12,a.m00 * b.m20 + a.m10 * b.m21 + a.m20 * b.m22,a.m01 * b.m00 + a.m11 * b.m01 + a.m21 * b.m02,a.m01 * b.m10 + a.m11 * b.m11 + a.m21 * b.m12,a.m01 * b.m20 + a.m11 * b.m21 + a.m21 * b.m22,a.m02 * b.m00 + a.m12 * b.m01 + a.m22 * b.m02,a.m02 * b.m10 + a.m12 * b.m11 + a.m22 * b.m12,a.m02 * b.m20 + a.m12 * b.m21 + a.m22 * b.m22);
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.add = function(a,b) {
	var self = new hxmath_math_Matrix3x3Default(a.m00,a.m10,a.m20,a.m01,a.m11,a.m21,a.m02,a.m12,a.m22);
	self.m00 += b.m00;
	self.m10 += b.m10;
	self.m20 += b.m20;
	self.m01 += b.m01;
	self.m11 += b.m11;
	self.m21 += b.m21;
	self.m02 += b.m02;
	self.m12 += b.m12;
	self.m22 += b.m22;
	return self;
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.subtract = function(a,b) {
	var self = new hxmath_math_Matrix3x3Default(a.m00,a.m10,a.m20,a.m01,a.m11,a.m21,a.m02,a.m12,a.m22);
	self.m00 -= b.m00;
	self.m10 -= b.m10;
	self.m20 -= b.m20;
	self.m01 -= b.m01;
	self.m11 -= b.m11;
	self.m21 -= b.m21;
	self.m02 -= b.m02;
	self.m12 -= b.m12;
	self.m22 -= b.m22;
	return self;
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.negate = function(a) {
	return new hxmath_math_Matrix3x3Default(-a.m00,-a.m10,-a.m20,-a.m01,-a.m11,-a.m21,-a.m02,-a.m12,-a.m22);
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.equals = function(a,b) {
	if(!(a == null && b == null)) {
		if(a != null && b != null && a.m00 == b.m00 && a.m10 == b.m10 && a.m20 == b.m20 && a.m01 == b.m01 && a.m11 == b.m11 && a.m21 == b.m21 && a.m02 == b.m02 && a.m12 == b.m12) {
			return a.m22 == b.m22;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.rotationX = function(angleDegrees) {
	var angleRadians = Math.PI / 180 * angleDegrees;
	var s = Math.sin(angleRadians);
	var c = Math.cos(angleRadians);
	return new hxmath_math_Matrix3x3Default(1,0,0,0,c,-s,0,s,c);
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.rotationY = function(angleDegrees) {
	var angleRadians = Math.PI / 180 * angleDegrees;
	var s = Math.sin(angleRadians);
	var c = Math.cos(angleRadians);
	return new hxmath_math_Matrix3x3Default(c,0,s,0,1,0,-s,0,c);
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.rotationZ = function(angleDegrees) {
	var angleRadians = Math.PI / 180 * angleDegrees;
	var s = Math.sin(angleRadians);
	var c = Math.cos(angleRadians);
	return new hxmath_math_Matrix3x3Default(c,-s,0,s,c,0,0,0,1);
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.scale = function(sx,sy,sz) {
	return new hxmath_math_Matrix3x3Default(sx,0.0,0.0,0.0,sy,0.0,0.0,0.0,sz);
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.set = function(this1,m00,m10,m20,m01,m11,m21,m02,m12,m22) {
	var self = this1;
	self.m00 = m00;
	self.m10 = m10;
	self.m20 = m20;
	self.m01 = m01;
	self.m11 = m11;
	self.m21 = m21;
	self.m02 = m02;
	self.m12 = m12;
	self.m22 = m22;
	return self;
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.addWith = function(this1,a) {
	var self = this1;
	self.m00 += a.m00;
	self.m10 += a.m10;
	self.m20 += a.m20;
	self.m01 += a.m01;
	self.m11 += a.m11;
	self.m21 += a.m21;
	self.m02 += a.m02;
	self.m12 += a.m12;
	self.m22 += a.m22;
	return self;
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.subtractWith = function(this1,a) {
	var self = this1;
	self.m00 -= a.m00;
	self.m10 -= a.m10;
	self.m20 -= a.m20;
	self.m01 -= a.m01;
	self.m11 -= a.m11;
	self.m21 -= a.m21;
	self.m02 -= a.m02;
	self.m12 -= a.m12;
	self.m22 -= a.m22;
	return self;
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.copyTo = function(this1,target) {
	var self = this1;
	var _g = 0;
	while(_g < 9) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.m00;
			break;
		case 1:
			tmp = self.m10;
			break;
		case 2:
			tmp = self.m20;
			break;
		case 3:
			tmp = self.m01;
			break;
		case 4:
			tmp = self.m11;
			break;
		case 5:
			tmp = self.m21;
			break;
		case 6:
			tmp = self.m02;
			break;
		case 7:
			tmp = self.m12;
			break;
		case 8:
			tmp = self.m22;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			target.m00 = value;
			break;
		case 1:
			target.m10 = value;
			break;
		case 2:
			target.m20 = value;
			break;
		case 3:
			target.m01 = value;
			break;
		case 4:
			target.m11 = value;
			break;
		case 5:
			target.m21 = value;
			break;
		case 6:
			target.m02 = value;
			break;
		case 7:
			target.m12 = value;
			break;
		case 8:
			target.m22 = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.copyToShape = function(this1,target) {
	var self = this1;
	target.m00 = self.m00;
	target.m01 = self.m01;
	target.m02 = self.m02;
	target.m10 = self.m10;
	target.m11 = self.m11;
	target.m12 = self.m12;
	target.m20 = self.m20;
	target.m21 = self.m21;
	target.m22 = self.m22;
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.copyFromShape = function(this1,source) {
	var self = this1;
	self.m00 = source.m00;
	self.m01 = source.m01;
	self.m02 = source.m02;
	self.m10 = source.m10;
	self.m11 = source.m11;
	self.m12 = source.m12;
	self.m20 = source.m20;
	self.m21 = source.m21;
	self.m22 = source.m22;
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.clone = function(this1) {
	var self = this1;
	return new hxmath_math_Matrix3x3Default(self.m00,self.m10,self.m20,self.m01,self.m11,self.m21,self.m02,self.m12,self.m22);
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.m00;
	case 1:
		return self.m10;
	case 2:
		return self.m20;
	case 3:
		return self.m01;
	case 4:
		return self.m11;
	case 5:
		return self.m21;
	case 6:
		return self.m02;
	case 7:
		return self.m12;
	case 8:
		return self.m22;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.m00 = value;
	case 1:
		return self.m10 = value;
	case 2:
		return self.m20 = value;
	case 3:
		return self.m01 = value;
	case 4:
		return self.m11 = value;
	case 5:
		return self.m21 = value;
	case 6:
		return self.m02 = value;
	case 7:
		return self.m12 = value;
	case 8:
		return self.m22 = value;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.getElement = function(this1,column,row) {
	var self = this1;
	var tmp;
	switch(row * 3 + column) {
	case 0:
		tmp = self.m00;
		break;
	case 1:
		tmp = self.m10;
		break;
	case 2:
		tmp = self.m20;
		break;
	case 3:
		tmp = self.m01;
		break;
	case 4:
		tmp = self.m11;
		break;
	case 5:
		tmp = self.m21;
		break;
	case 6:
		tmp = self.m02;
		break;
	case 7:
		tmp = self.m12;
		break;
	case 8:
		tmp = self.m22;
		break;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
	return tmp;
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.setElement = function(this1,column,row,value) {
	var self = this1;
	var tmp;
	switch(row * 3 + column) {
	case 0:
		tmp = self.m00 = value;
		break;
	case 1:
		tmp = self.m10 = value;
		break;
	case 2:
		tmp = self.m20 = value;
		break;
	case 3:
		tmp = self.m01 = value;
		break;
	case 4:
		tmp = self.m11 = value;
		break;
	case 5:
		tmp = self.m21 = value;
		break;
	case 6:
		tmp = self.m02 = value;
		break;
	case 7:
		tmp = self.m12 = value;
		break;
	case 8:
		tmp = self.m22 = value;
		break;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
	return tmp;
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.col = function(this1,index) {
	var self = this1;
	switch(index) {
	case 0:
		return new hxmath_math_Vector3Default(self.m00,self.m01,self.m02);
	case 1:
		return new hxmath_math_Vector3Default(self.m10,self.m11,self.m12);
	case 2:
		return new hxmath_math_Vector3Default(self.m20,self.m21,self.m22);
	default:
		throw new js__$Boot_HaxeError("Invalid column");
	}
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.row = function(this1,index) {
	var self = this1;
	switch(index) {
	case 0:
		return new hxmath_math_Vector3Default(self.m00,self.m10,self.m20);
	case 1:
		return new hxmath_math_Vector3Default(self.m01,self.m11,self.m21);
	case 2:
		return new hxmath_math_Vector3Default(self.m02,self.m12,self.m22);
	default:
		throw new js__$Boot_HaxeError("Invalid row");
	}
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.applyScalarFunc = function(this1,func) {
	var self = this1;
	var _g = 0;
	while(_g < 9) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.m00;
			break;
		case 1:
			tmp = self.m10;
			break;
		case 2:
			tmp = self.m20;
			break;
		case 3:
			tmp = self.m01;
			break;
		case 4:
			tmp = self.m11;
			break;
		case 5:
			tmp = self.m21;
			break;
		case 6:
			tmp = self.m02;
			break;
		case 7:
			tmp = self.m12;
			break;
		case 8:
			tmp = self.m22;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = func(tmp);
		switch(i) {
		case 0:
			self.m00 = value;
			break;
		case 1:
			self.m10 = value;
			break;
		case 2:
			self.m20 = value;
			break;
		case 3:
			self.m01 = value;
			break;
		case 4:
			self.m11 = value;
			break;
		case 5:
			self.m21 = value;
			break;
		case 6:
			self.m02 = value;
			break;
		case 7:
			self.m12 = value;
			break;
		case 8:
			self.m22 = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	return self;
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.get_zero = function() {
	return new hxmath_math_Matrix3x3Default(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.get_identity = function() {
	return new hxmath_math_Matrix3x3Default(1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0);
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.get_det = function(this1) {
	var self = this1;
	var m00 = self.m00;
	var m10 = self.m10;
	var m20 = self.m20;
	var m01 = self.m01;
	var m11 = self.m11;
	var m21 = self.m21;
	var m02 = self.m02;
	var m12 = self.m12;
	var m22 = self.m22;
	return m00 * (m11 * m22 - m21 * m12) - m10 * (m01 * m22 - m21 * m02) + m20 * (m01 * m12 - m11 * m02);
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.get_transpose = function(this1) {
	var self = this1;
	return new hxmath_math_Matrix3x3Default(self.m00,self.m01,self.m02,self.m10,self.m11,self.m12,self.m20,self.m21,self.m22);
};
var hxmath_math_Matrix4x4Default = function(m00,m10,m20,m30,m01,m11,m21,m31,m02,m12,m22,m32,m03,m13,m23,m33) {
	this.m00 = m00;
	this.m10 = m10;
	this.m20 = m20;
	this.m30 = m30;
	this.m01 = m01;
	this.m11 = m11;
	this.m21 = m21;
	this.m31 = m31;
	this.m02 = m02;
	this.m12 = m12;
	this.m22 = m22;
	this.m32 = m32;
	this.m03 = m03;
	this.m13 = m13;
	this.m23 = m23;
	this.m33 = m33;
};
hxmath_math_Matrix4x4Default.__name__ = ["hxmath","math","Matrix4x4Default"];
hxmath_math_Matrix4x4Default.prototype = {
	m00: null
	,m01: null
	,m02: null
	,m03: null
	,m10: null
	,m11: null
	,m12: null
	,m13: null
	,m20: null
	,m21: null
	,m22: null
	,m23: null
	,m30: null
	,m31: null
	,m32: null
	,m33: null
	,toString: function() {
		return "[[" + this.m00 + ", " + this.m10 + ", " + this.m20 + ", " + this.m30 + "], [" + this.m01 + ", " + this.m11 + ", " + this.m21 + ", " + this.m31 + "], [" + this.m02 + ", " + this.m12 + ", " + this.m22 + ", " + this.m32 + "], [" + this.m03 + ", " + this.m13 + ", " + this.m23 + ", " + this.m33 + "]]";
	}
	,__class__: hxmath_math_Matrix4x4Default
};
var hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$ = {};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.__name__ = ["hxmath","math","_Matrix4x4","Matrix4x4_Impl_"];
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$._new = function(m00,m10,m20,m30,m01,m11,m21,m31,m02,m12,m22,m32,m03,m13,m23,m33) {
	return new hxmath_math_Matrix4x4Default(m00,m10,m20,m30,m01,m11,m21,m31,m02,m12,m22,m32,m03,m13,m23,m33);
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.fromArray = function(rawData) {
	if(rawData.length != 16) {
		throw new js__$Boot_HaxeError("Invalid rawData.");
	}
	return new hxmath_math_Matrix4x4Default(rawData[0],rawData[1],rawData[2],rawData[3],rawData[4],rawData[5],rawData[6],rawData[7],rawData[8],rawData[9],rawData[10],rawData[11],rawData[12],rawData[13],rawData[14],rawData[15]);
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.fromMatrix4x4Shape = function(other) {
	return new hxmath_math_Matrix4x4Default(other.m00,other.m10,other.m20,other.m30,other.m01,other.m11,other.m21,other.m31,other.m02,other.m12,other.m22,other.m32,other.m03,other.m13,other.m23,other.m33);
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.multiplyVector = function(a,v) {
	return new hxmath_math_Vector4Default(a.m00 * v.x + a.m10 * v.y + a.m20 * v.z + a.m30 * v.w,a.m01 * v.x + a.m11 * v.y + a.m21 * v.z + a.m31 * v.w,a.m02 * v.x + a.m12 * v.y + a.m22 * v.z + a.m32 * v.w,a.m03 * v.x + a.m13 * v.y + a.m23 * v.z + a.m33 * v.w);
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.multiply = function(a,b) {
	return new hxmath_math_Matrix4x4Default(a.m00 * b.m00 + a.m10 * b.m01 + a.m20 * b.m02 + a.m30 * b.m03,a.m00 * b.m10 + a.m10 * b.m11 + a.m20 * b.m12 + a.m30 * b.m13,a.m00 * b.m20 + a.m10 * b.m21 + a.m20 * b.m22 + a.m30 * b.m23,a.m00 * b.m30 + a.m10 * b.m31 + a.m20 * b.m32 + a.m30 * b.m33,a.m01 * b.m00 + a.m11 * b.m01 + a.m21 * b.m02 + a.m31 * b.m03,a.m01 * b.m10 + a.m11 * b.m11 + a.m21 * b.m12 + a.m31 * b.m13,a.m01 * b.m20 + a.m11 * b.m21 + a.m21 * b.m22 + a.m31 * b.m23,a.m01 * b.m30 + a.m11 * b.m31 + a.m21 * b.m32 + a.m31 * b.m33,a.m02 * b.m00 + a.m12 * b.m01 + a.m22 * b.m02 + a.m32 * b.m03,a.m02 * b.m10 + a.m12 * b.m11 + a.m22 * b.m12 + a.m32 * b.m13,a.m02 * b.m20 + a.m12 * b.m21 + a.m22 * b.m22 + a.m32 * b.m23,a.m02 * b.m30 + a.m12 * b.m31 + a.m22 * b.m32 + a.m32 * b.m33,a.m03 * b.m00 + a.m13 * b.m01 + a.m23 * b.m02 + a.m33 * b.m03,a.m03 * b.m10 + a.m13 * b.m11 + a.m23 * b.m12 + a.m33 * b.m13,a.m03 * b.m20 + a.m13 * b.m21 + a.m23 * b.m22 + a.m33 * b.m23,a.m03 * b.m30 + a.m13 * b.m31 + a.m23 * b.m32 + a.m33 * b.m33);
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.add = function(a,b) {
	var self = new hxmath_math_Matrix4x4Default(a.m00,a.m10,a.m20,a.m30,a.m01,a.m11,a.m21,a.m31,a.m02,a.m12,a.m22,a.m32,a.m03,a.m13,a.m23,a.m33);
	self.m00 += b.m00;
	self.m10 += b.m10;
	self.m20 += b.m20;
	self.m30 += b.m30;
	self.m01 += b.m01;
	self.m11 += b.m11;
	self.m21 += b.m21;
	self.m31 += b.m31;
	self.m02 += b.m02;
	self.m12 += b.m12;
	self.m22 += b.m22;
	self.m32 += b.m32;
	self.m03 += b.m03;
	self.m13 += b.m13;
	self.m23 += b.m23;
	self.m33 += b.m33;
	return self;
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.subtract = function(a,b) {
	var self = new hxmath_math_Matrix4x4Default(a.m00,a.m10,a.m20,a.m30,a.m01,a.m11,a.m21,a.m31,a.m02,a.m12,a.m22,a.m32,a.m03,a.m13,a.m23,a.m33);
	self.m00 -= b.m00;
	self.m10 -= b.m10;
	self.m20 -= b.m20;
	self.m30 -= b.m30;
	self.m01 -= b.m01;
	self.m11 -= b.m11;
	self.m21 -= b.m21;
	self.m31 -= b.m31;
	self.m02 -= b.m02;
	self.m12 -= b.m12;
	self.m22 -= b.m22;
	self.m32 -= b.m32;
	self.m03 -= b.m03;
	self.m13 -= b.m13;
	self.m23 -= b.m23;
	self.m33 -= b.m33;
	return self;
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.negate = function(a) {
	return new hxmath_math_Matrix4x4Default(-a.m00,-a.m10,-a.m20,-a.m30,-a.m01,-a.m11,-a.m21,-a.m31,-a.m02,-a.m12,-a.m22,-a.m32,-a.m03,-a.m13,-a.m23,-a.m33);
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.equals = function(a,b) {
	if(!(a == null && b == null)) {
		if(a != null && b != null && a.m00 == b.m00 && a.m10 == b.m10 && a.m20 == b.m20 && a.m30 == b.m30 && a.m01 == b.m01 && a.m11 == b.m11 && a.m21 == b.m21 && a.m31 == b.m31 && a.m02 == b.m02 && a.m12 == b.m12 && a.m22 == b.m22 && a.m32 == b.m32 && a.m03 == b.m03 && a.m13 == b.m13 && a.m23 == b.m23) {
			return a.m33 == b.m33;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.set = function(this1,m00,m10,m20,m30,m01,m11,m21,m31,m02,m12,m22,m32,m03,m13,m23,m33) {
	var self = this1;
	self.m00 = m00;
	self.m10 = m10;
	self.m20 = m20;
	self.m30 = m30;
	self.m01 = m01;
	self.m11 = m11;
	self.m21 = m21;
	self.m31 = m31;
	self.m02 = m02;
	self.m12 = m12;
	self.m22 = m22;
	self.m32 = m32;
	self.m03 = m03;
	self.m13 = m13;
	self.m23 = m23;
	self.m33 = m33;
	return self;
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.addWith = function(this1,a) {
	var self = this1;
	self.m00 += a.m00;
	self.m10 += a.m10;
	self.m20 += a.m20;
	self.m30 += a.m30;
	self.m01 += a.m01;
	self.m11 += a.m11;
	self.m21 += a.m21;
	self.m31 += a.m31;
	self.m02 += a.m02;
	self.m12 += a.m12;
	self.m22 += a.m22;
	self.m32 += a.m32;
	self.m03 += a.m03;
	self.m13 += a.m13;
	self.m23 += a.m23;
	self.m33 += a.m33;
	return self;
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.subtractWith = function(this1,a) {
	var self = this1;
	self.m00 -= a.m00;
	self.m10 -= a.m10;
	self.m20 -= a.m20;
	self.m30 -= a.m30;
	self.m01 -= a.m01;
	self.m11 -= a.m11;
	self.m21 -= a.m21;
	self.m31 -= a.m31;
	self.m02 -= a.m02;
	self.m12 -= a.m12;
	self.m22 -= a.m22;
	self.m32 -= a.m32;
	self.m03 -= a.m03;
	self.m13 -= a.m13;
	self.m23 -= a.m23;
	self.m33 -= a.m33;
	return self;
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.copyTo = function(this1,target) {
	var self = this1;
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.m00;
			break;
		case 1:
			tmp = self.m10;
			break;
		case 2:
			tmp = self.m20;
			break;
		case 3:
			tmp = self.m30;
			break;
		case 4:
			tmp = self.m01;
			break;
		case 5:
			tmp = self.m11;
			break;
		case 6:
			tmp = self.m21;
			break;
		case 7:
			tmp = self.m31;
			break;
		case 8:
			tmp = self.m02;
			break;
		case 9:
			tmp = self.m12;
			break;
		case 10:
			tmp = self.m22;
			break;
		case 11:
			tmp = self.m32;
			break;
		case 12:
			tmp = self.m03;
			break;
		case 13:
			tmp = self.m13;
			break;
		case 14:
			tmp = self.m23;
			break;
		case 15:
			tmp = self.m33;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			target.m00 = value;
			break;
		case 1:
			target.m10 = value;
			break;
		case 2:
			target.m20 = value;
			break;
		case 3:
			target.m30 = value;
			break;
		case 4:
			target.m01 = value;
			break;
		case 5:
			target.m11 = value;
			break;
		case 6:
			target.m21 = value;
			break;
		case 7:
			target.m31 = value;
			break;
		case 8:
			target.m02 = value;
			break;
		case 9:
			target.m12 = value;
			break;
		case 10:
			target.m22 = value;
			break;
		case 11:
			target.m32 = value;
			break;
		case 12:
			target.m03 = value;
			break;
		case 13:
			target.m13 = value;
			break;
		case 14:
			target.m23 = value;
			break;
		case 15:
			target.m33 = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.copyToShape = function(this1,target) {
	var self = this1;
	target.m00 = self.m00;
	target.m01 = self.m01;
	target.m02 = self.m02;
	target.m03 = self.m03;
	target.m10 = self.m10;
	target.m11 = self.m11;
	target.m12 = self.m12;
	target.m13 = self.m13;
	target.m20 = self.m20;
	target.m21 = self.m21;
	target.m22 = self.m22;
	target.m23 = self.m23;
	target.m30 = self.m30;
	target.m31 = self.m31;
	target.m32 = self.m32;
	target.m33 = self.m33;
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.copyFromShape = function(this1,source) {
	var self = this1;
	self.m00 = source.m00;
	self.m01 = source.m01;
	self.m02 = source.m02;
	self.m03 = source.m03;
	self.m10 = source.m10;
	self.m11 = source.m11;
	self.m12 = source.m12;
	self.m13 = source.m13;
	self.m20 = source.m20;
	self.m21 = source.m21;
	self.m22 = source.m22;
	self.m23 = source.m23;
	self.m30 = source.m30;
	self.m31 = source.m31;
	self.m32 = source.m32;
	self.m33 = source.m33;
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.setRotateFromQuaternion = function(this1,q) {
	var self = this1;
	var s = q.s;
	var x = q.x;
	var y = q.y;
	var z = q.z;
	self.m00 = 1 - 2 * (y * y + z * z);
	self.m10 = 2 * (x * y - s * z);
	self.m20 = 2 * (s * y + x * z);
	self.m01 = 2 * (x * y + s * z);
	self.m11 = 1 - 2 * (x * x + z * z);
	self.m21 = 2 * (y * z - s * x);
	self.m02 = 2 * (x * z - s * y);
	self.m12 = 2 * (y * z + s * x);
	self.m22 = 1 - 2 * (x * x + y * y);
	return self;
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.setTranslate = function(this1,x,y,z) {
	var self = this1;
	self.m30 = x;
	self.m31 = y;
	self.m32 = z;
	self.m33 = 1.0;
	return self;
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.clone = function(this1) {
	var self = this1;
	return new hxmath_math_Matrix4x4Default(self.m00,self.m10,self.m20,self.m30,self.m01,self.m11,self.m21,self.m31,self.m02,self.m12,self.m22,self.m32,self.m03,self.m13,self.m23,self.m33);
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.m00;
	case 1:
		return self.m10;
	case 2:
		return self.m20;
	case 3:
		return self.m30;
	case 4:
		return self.m01;
	case 5:
		return self.m11;
	case 6:
		return self.m21;
	case 7:
		return self.m31;
	case 8:
		return self.m02;
	case 9:
		return self.m12;
	case 10:
		return self.m22;
	case 11:
		return self.m32;
	case 12:
		return self.m03;
	case 13:
		return self.m13;
	case 14:
		return self.m23;
	case 15:
		return self.m33;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.m00 = value;
	case 1:
		return self.m10 = value;
	case 2:
		return self.m20 = value;
	case 3:
		return self.m30 = value;
	case 4:
		return self.m01 = value;
	case 5:
		return self.m11 = value;
	case 6:
		return self.m21 = value;
	case 7:
		return self.m31 = value;
	case 8:
		return self.m02 = value;
	case 9:
		return self.m12 = value;
	case 10:
		return self.m22 = value;
	case 11:
		return self.m32 = value;
	case 12:
		return self.m03 = value;
	case 13:
		return self.m13 = value;
	case 14:
		return self.m23 = value;
	case 15:
		return self.m33 = value;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.getElement = function(this1,column,row) {
	var self = this1;
	var tmp;
	switch(row * 4 + column) {
	case 0:
		tmp = self.m00;
		break;
	case 1:
		tmp = self.m10;
		break;
	case 2:
		tmp = self.m20;
		break;
	case 3:
		tmp = self.m30;
		break;
	case 4:
		tmp = self.m01;
		break;
	case 5:
		tmp = self.m11;
		break;
	case 6:
		tmp = self.m21;
		break;
	case 7:
		tmp = self.m31;
		break;
	case 8:
		tmp = self.m02;
		break;
	case 9:
		tmp = self.m12;
		break;
	case 10:
		tmp = self.m22;
		break;
	case 11:
		tmp = self.m32;
		break;
	case 12:
		tmp = self.m03;
		break;
	case 13:
		tmp = self.m13;
		break;
	case 14:
		tmp = self.m23;
		break;
	case 15:
		tmp = self.m33;
		break;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
	return tmp;
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.setElement = function(this1,column,row,value) {
	var self = this1;
	var tmp;
	switch(row * 4 + column) {
	case 0:
		tmp = self.m00 = value;
		break;
	case 1:
		tmp = self.m10 = value;
		break;
	case 2:
		tmp = self.m20 = value;
		break;
	case 3:
		tmp = self.m30 = value;
		break;
	case 4:
		tmp = self.m01 = value;
		break;
	case 5:
		tmp = self.m11 = value;
		break;
	case 6:
		tmp = self.m21 = value;
		break;
	case 7:
		tmp = self.m31 = value;
		break;
	case 8:
		tmp = self.m02 = value;
		break;
	case 9:
		tmp = self.m12 = value;
		break;
	case 10:
		tmp = self.m22 = value;
		break;
	case 11:
		tmp = self.m32 = value;
		break;
	case 12:
		tmp = self.m03 = value;
		break;
	case 13:
		tmp = self.m13 = value;
		break;
	case 14:
		tmp = self.m23 = value;
		break;
	case 15:
		tmp = self.m33 = value;
		break;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
	return tmp;
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.col = function(this1,index) {
	var self = this1;
	switch(index) {
	case 0:
		return new hxmath_math_Vector4Default(self.m00,self.m01,self.m02,self.m03);
	case 1:
		return new hxmath_math_Vector4Default(self.m10,self.m11,self.m12,self.m13);
	case 2:
		return new hxmath_math_Vector4Default(self.m20,self.m21,self.m22,self.m23);
	case 3:
		return new hxmath_math_Vector4Default(self.m30,self.m31,self.m32,self.m33);
	default:
		throw new js__$Boot_HaxeError("Invalid column");
	}
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.row = function(this1,index) {
	var self = this1;
	switch(index) {
	case 0:
		return new hxmath_math_Vector4Default(self.m00,self.m10,self.m20,self.m30);
	case 1:
		return new hxmath_math_Vector4Default(self.m01,self.m11,self.m21,self.m31);
	case 2:
		return new hxmath_math_Vector4Default(self.m02,self.m12,self.m22,self.m32);
	case 3:
		return new hxmath_math_Vector4Default(self.m03,self.m13,self.m23,self.m33);
	default:
		throw new js__$Boot_HaxeError("Invalid row");
	}
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.applyScalarFunc = function(this1,func) {
	var self = this1;
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.m00;
			break;
		case 1:
			tmp = self.m10;
			break;
		case 2:
			tmp = self.m20;
			break;
		case 3:
			tmp = self.m30;
			break;
		case 4:
			tmp = self.m01;
			break;
		case 5:
			tmp = self.m11;
			break;
		case 6:
			tmp = self.m21;
			break;
		case 7:
			tmp = self.m31;
			break;
		case 8:
			tmp = self.m02;
			break;
		case 9:
			tmp = self.m12;
			break;
		case 10:
			tmp = self.m22;
			break;
		case 11:
			tmp = self.m32;
			break;
		case 12:
			tmp = self.m03;
			break;
		case 13:
			tmp = self.m13;
			break;
		case 14:
			tmp = self.m23;
			break;
		case 15:
			tmp = self.m33;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = func(tmp);
		switch(i) {
		case 0:
			self.m00 = value;
			break;
		case 1:
			self.m10 = value;
			break;
		case 2:
			self.m20 = value;
			break;
		case 3:
			self.m30 = value;
			break;
		case 4:
			self.m01 = value;
			break;
		case 5:
			self.m11 = value;
			break;
		case 6:
			self.m21 = value;
			break;
		case 7:
			self.m31 = value;
			break;
		case 8:
			self.m02 = value;
			break;
		case 9:
			self.m12 = value;
			break;
		case 10:
			self.m22 = value;
			break;
		case 11:
			self.m32 = value;
			break;
		case 12:
			self.m03 = value;
			break;
		case 13:
			self.m13 = value;
			break;
		case 14:
			self.m23 = value;
			break;
		case 15:
			self.m33 = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	return self;
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.applySubMatrixTranspose = function(this1) {
	var self = this1;
	var temp = self.m01;
	self.m01 = self.m10;
	self.m10 = temp;
	temp = self.m02;
	self.m02 = self.m20;
	self.m20 = temp;
	temp = self.m12;
	self.m12 = self.m21;
	self.m21 = temp;
	return self;
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.applyInvertFrame = function(this1) {
	var self = this1;
	var temp = self.m01;
	self.m01 = self.m10;
	self.m10 = temp;
	temp = self.m02;
	self.m02 = self.m20;
	self.m20 = temp;
	temp = self.m12;
	self.m12 = self.m21;
	self.m21 = temp;
	var tx = -(self.m00 * self.m30 + self.m10 * self.m31 + self.m20 * self.m32);
	var ty = -(self.m01 * self.m30 + self.m11 * self.m31 + self.m21 * self.m32);
	var tz = -(self.m02 * self.m30 + self.m12 * self.m31 + self.m22 * self.m32);
	self.m30 = tx;
	self.m31 = ty;
	self.m32 = tz;
	return self;
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.get_zero = function() {
	return new hxmath_math_Matrix4x4Default(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.get_identity = function() {
	return new hxmath_math_Matrix4x4Default(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.get_t = function(this1) {
	var self = this1;
	return new hxmath_math_Vector3Default(self.m30,self.m31,self.m32);
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.set_t = function(this1,t) {
	var self = this1;
	self.m30 = t.x;
	self.m31 = t.y;
	self.m32 = t.z;
	return t;
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.get_transpose = function(this1) {
	var self = this1;
	return new hxmath_math_Matrix4x4Default(self.m00,self.m01,self.m02,self.m03,self.m10,self.m11,self.m12,self.m13,self.m20,self.m21,self.m22,self.m23,self.m30,self.m31,self.m32,self.m33);
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.get_det = function(this1) {
	var self = this1;
	var m00 = self.m00;
	var m10 = self.m10;
	var m20 = self.m20;
	var m30 = self.m30;
	var m01 = self.m01;
	var m11 = self.m11;
	var m21 = self.m21;
	var m31 = self.m31;
	var m02 = self.m02;
	var m12 = self.m12;
	var m22 = self.m22;
	var m32 = self.m32;
	var m03 = self.m03;
	var m13 = self.m13;
	var m23 = self.m23;
	var m33 = self.m33;
	return m00 * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13)) - m10 * (m01 * (m22 * m33 - m32 * m23) - m21 * (m02 * m33 - m32 * m03) + m31 * (m02 * m23 - m22 * m03)) + m20 * (m01 * (m12 * m33 - m32 * m13) - m11 * (m02 * m33 - m32 * m03) + m31 * (m02 * m13 - m12 * m03)) - m30 * (m01 * (m12 * m23 - m22 * m13) - m11 * (m02 * m23 - m22 * m03) + m21 * (m02 * m13 - m12 * m03));
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.get_subMatrix = function(this1) {
	var self = this1;
	return new hxmath_math_Matrix3x3Default(self.m00,self.m10,self.m20,self.m01,self.m11,self.m21,self.m02,self.m12,self.m22);
};
var hxmath_math_QuaternionDefault = function(s,x,y,z) {
	this.s = s;
	this.x = x;
	this.y = y;
	this.z = z;
};
hxmath_math_QuaternionDefault.__name__ = ["hxmath","math","QuaternionDefault"];
hxmath_math_QuaternionDefault.prototype = {
	s: null
	,x: null
	,y: null
	,z: null
	,toString: function() {
		return "[" + this.s + ", (" + this.x + ", " + this.y + ", " + this.z + ")]";
	}
	,__class__: hxmath_math_QuaternionDefault
};
var hxmath_math__$Quaternion_Quaternion_$Impl_$ = {};
hxmath_math__$Quaternion_Quaternion_$Impl_$.__name__ = ["hxmath","math","_Quaternion","Quaternion_Impl_"];
hxmath_math__$Quaternion_Quaternion_$Impl_$._new = function(s,x,y,z) {
	return new hxmath_math_QuaternionDefault(s,x,y,z);
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.fromArray = function(rawData) {
	if(rawData.length != 4) {
		throw new js__$Boot_HaxeError("Invalid rawData.");
	}
	return new hxmath_math_QuaternionDefault(rawData[0],rawData[1],rawData[2],rawData[3]);
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.fromAxisAngle = function(angleDegrees,axis) {
	var angleRadians = Math.PI / 180 * angleDegrees;
	var cosHalfAngle = Math.cos(angleRadians / 2.0);
	var sinHalfAngle = Math.sin(angleRadians / 2.0);
	return new hxmath_math_QuaternionDefault(cosHalfAngle,sinHalfAngle * axis.x,sinHalfAngle * axis.y,sinHalfAngle * axis.z);
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.multiplyScalar = function(a,s) {
	var self = new hxmath_math_QuaternionDefault(a.s,a.x,a.y,a.z);
	self.s *= s;
	self.x *= s;
	self.y *= s;
	self.z *= s;
	return self;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.multiply = function(a,b) {
	return new hxmath_math_QuaternionDefault(a.s * b.s - a.x * b.x - a.y * b.y - a.z * b.z,a.s * b.x + b.s * a.x + a.y * b.z - a.z * b.y,a.s * b.y + b.s * a.y + a.z * b.x - a.x * b.z,a.s * b.z + b.s * a.z + a.x * b.y - a.y * b.x);
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.add = function(a,b) {
	var self = new hxmath_math_QuaternionDefault(a.s,a.x,a.y,a.z);
	self.s += b.s;
	self.x += b.x;
	self.y += b.y;
	self.z += b.z;
	return self;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.subtract = function(a,b) {
	var self = new hxmath_math_QuaternionDefault(a.s,a.x,a.y,a.z);
	self.s -= b.s;
	self.x -= b.x;
	self.y -= b.y;
	self.z -= b.z;
	return self;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.conjugate = function(a) {
	return new hxmath_math_QuaternionDefault(a.s,-a.x,-a.y,-a.z);
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.negate = function(a) {
	return new hxmath_math_QuaternionDefault(-a.s,-a.x,-a.y,-a.z);
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.equals = function(a,b) {
	if(!(a == null && b == null)) {
		if(a != null && b != null && a.s == b.s && a.x == b.x && a.y == b.y) {
			return a.z == b.z;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.lerp = function(a,b,t) {
	var s = 1.0 - t;
	var self = new hxmath_math_QuaternionDefault(a.s,a.x,a.y,a.z);
	self.s *= s;
	self.x *= s;
	self.y *= s;
	self.z *= s;
	var self1 = new hxmath_math_QuaternionDefault(b.s,b.x,b.y,b.z);
	self1.s *= t;
	self1.x *= t;
	self1.y *= t;
	self1.z *= t;
	var self2 = new hxmath_math_QuaternionDefault(self.s,self.x,self.y,self.z);
	self2.s += self1.s;
	self2.x += self1.x;
	self2.y += self1.y;
	self2.z += self1.z;
	return self2;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.slerp = function(a,b,t) {
	var cosHalfTheta = a.s * b.s + a.x * b.x + a.y * b.y + a.z * b.z;
	if(Math.abs(cosHalfTheta) >= 1.0) {
		return a;
	}
	var halfTheta = Math.acos(cosHalfTheta);
	var sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);
	if(Math.abs(sinHalfTheta) < 1e-3) {
		var s = 1.0 - t;
		var self = new hxmath_math_QuaternionDefault(a.s,a.x,a.y,a.z);
		self.s *= s;
		self.x *= s;
		self.y *= s;
		self.z *= s;
		var self1 = new hxmath_math_QuaternionDefault(b.s,b.x,b.y,b.z);
		self1.s *= t;
		self1.x *= t;
		self1.y *= t;
		self1.z *= t;
		var self2 = new hxmath_math_QuaternionDefault(self.s,self.x,self.y,self.z);
		self2.s += self1.s;
		self2.x += self1.x;
		self2.y += self1.y;
		self2.z += self1.z;
		var self3 = self2;
		var length = Math.sqrt(self3.s * self3.s + self3.x * self3.x + self3.y * self3.y + self3.z * self3.z);
		if(length > 0.0) {
			var k = 1.0 / length;
			self3.s *= k;
			self3.x *= k;
			self3.y *= k;
			self3.z *= k;
		}
		return self3;
	}
	var ta = Math.sin((1 - t) * halfTheta) / sinHalfTheta;
	var tb = Math.sin(t * halfTheta) / sinHalfTheta;
	var result = new hxmath_math_QuaternionDefault(0,0,0,0);
	result.x = a.x * ta + b.x * tb;
	result.y = a.y * ta + b.y * tb;
	result.z = a.z * ta + b.z * tb;
	result.s = a.s * ta + b.s * tb;
	return result;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.dot = function(a,b) {
	return a.s * b.s + a.x * b.x + a.y * b.y + a.z * b.z;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.set = function(this1,s,x,y,z) {
	var self = this1;
	self.s = s;
	self.x = x;
	self.y = y;
	self.z = z;
	return self;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.invert = function(this1) {
	var self = this1;
	var self1 = new hxmath_math_QuaternionDefault(self.s,self.x,self.y,self.z);
	self1.x = -self1.x;
	self1.y = -self1.y;
	self1.z = -self1.z;
	var self2 = self1;
	var length = Math.sqrt(self2.s * self2.s + self2.x * self2.x + self2.y * self2.y + self2.z * self2.z);
	if(length > 0.0) {
		var k = 1.0 / length;
		self2.s *= k;
		self2.x *= k;
		self2.y *= k;
		self2.z *= k;
	}
	return self2;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.multiplyWithScalar = function(this1,s) {
	var self = this1;
	self.s *= s;
	self.x *= s;
	self.y *= s;
	self.z *= s;
	return self;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.addWith = function(this1,a) {
	var self = this1;
	self.s += a.s;
	self.x += a.x;
	self.y += a.y;
	self.z += a.z;
	return self;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.subtractWith = function(this1,a) {
	var self = this1;
	self.s -= a.s;
	self.x -= a.x;
	self.y -= a.y;
	self.z -= a.z;
	return self;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.copyTo = function(this1,target) {
	var self = this1;
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.s;
			break;
		case 1:
			tmp = self.x;
			break;
		case 2:
			tmp = self.y;
			break;
		case 3:
			tmp = self.z;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			target.s = value;
			break;
		case 1:
			target.x = value;
			break;
		case 2:
			target.y = value;
			break;
		case 3:
			target.z = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.copyToShape = function(this1,target) {
	var self = this1;
	target.s = self.s;
	target.x = self.x;
	target.y = self.y;
	target.z = self.z;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.copyFromShape = function(this1,source) {
	var self = this1;
	self.s = source.s;
	self.x = source.x;
	self.y = source.y;
	self.z = source.z;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.clone = function(this1) {
	var self = this1;
	return new hxmath_math_QuaternionDefault(self.s,self.x,self.y,self.z);
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.s;
	case 1:
		return self.x;
	case 2:
		return self.y;
	case 3:
		return self.z;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.s = value;
	case 1:
		return self.x = value;
	case 2:
		return self.y = value;
	case 3:
		return self.z = value;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.applyScalarFunc = function(this1,func) {
	var self = this1;
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.s;
			break;
		case 1:
			tmp = self.x;
			break;
		case 2:
			tmp = self.y;
			break;
		case 3:
			tmp = self.z;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = func(tmp);
		switch(i) {
		case 0:
			self.s = value;
			break;
		case 1:
			self.x = value;
			break;
		case 2:
			self.y = value;
			break;
		case 3:
			self.z = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	return self;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.log = function(this1) {
	var self = this1;
	var theta = Math.acos(self.s);
	var sinTheta = Math.sin(theta);
	if(sinTheta > 0.0) {
		var k = theta / sinTheta;
		return new hxmath_math_QuaternionDefault(0.0,k * self.x,k * self.y,k * self.z);
	} else {
		return new hxmath_math_QuaternionDefault(0,0,0,0);
	}
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.exp = function(this1) {
	var self = this1;
	var theta = Math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z);
	var sinTheta = Math.sin(theta);
	var cosTheta = Math.cos(theta);
	if(theta > 0.0) {
		return new hxmath_math_QuaternionDefault(cosTheta,sinTheta * self.x,sinTheta * self.y,sinTheta * self.z);
	} else {
		return new hxmath_math_QuaternionDefault(cosTheta,0,0,0);
	}
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.rotate = function(this1,u) {
	var self = this1;
	var a = 2.0 * (self.x * u.x + self.y * u.y + self.z * u.z);
	var b = self.s * self.s - self.x * self.x - self.y * self.y - self.z * self.z;
	var c = 2.0 * self.s;
	return new hxmath_math_Vector3Default(a * self.x + b * u.x + c * (self.y * u.z - self.z * u.y),a * self.y + b * u.y + c * (self.z * u.x - self.x * u.z),a * self.z + b * u.z + c * (self.x * u.y - self.y * u.x));
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.angleWith = function(this1,b) {
	var self = this1;
	return 2.0 * Math.acos((self.s * b.s + self.x * b.x + self.y * b.y + self.z * b.z) / (Math.sqrt(self.s * self.s + self.x * self.x + self.y * self.y + self.z * self.z) * Math.sqrt(b.s * b.s + b.x * b.x + b.y * b.y + b.z * b.z)));
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.normalize = function(this1) {
	var self = this1;
	var length = Math.sqrt(self.s * self.s + self.x * self.x + self.y * self.y + self.z * self.z);
	if(length > 0.0) {
		var k = 1.0 / length;
		self.s *= k;
		self.x *= k;
		self.y *= k;
		self.z *= k;
	}
	return self;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.applyConjugate = function(this1) {
	var self = this1;
	self.x = -self.x;
	self.y = -self.y;
	self.z = -self.z;
	return self;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.applyInvert = function(this1) {
	var self = this1;
	self.x = -self.x;
	self.y = -self.y;
	self.z = -self.z;
	var self1 = self;
	var length = Math.sqrt(self1.s * self1.s + self1.x * self1.x + self1.y * self1.y + self1.z * self1.z);
	if(length > 0.0) {
		var k = 1.0 / length;
		self1.s *= k;
		self1.x *= k;
		self1.y *= k;
		self1.z *= k;
	}
	return self1;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.get_zero = function() {
	return new hxmath_math_QuaternionDefault(0,0,0,0);
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.get_identity = function() {
	return new hxmath_math_QuaternionDefault(1,0,0,0);
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.get_length = function(this1) {
	var self = this1;
	return Math.sqrt(self.s * self.s + self.x * self.x + self.y * self.y + self.z * self.z);
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.get_lengthSq = function(this1) {
	var self = this1;
	return self.s * self.s + self.x * self.x + self.y * self.y + self.z * self.z;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.get_matrix = function(this1) {
	var self = this1;
	var s = self.s;
	var x = self.x;
	var y = self.y;
	var z = self.z;
	return new hxmath_math_Matrix3x3Default(1 - 2 * (y * y + z * z),2 * (x * y - s * z),2 * (s * y + x * z),2 * (x * y + s * z),1 - 2 * (x * x + z * z),2 * (y * z - s * x),2 * (x * z - s * y),2 * (y * z + s * x),1 - 2 * (x * x + y * y));
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.get_normal = function(this1) {
	var self = this1;
	var _g = 1.0 / Math.sqrt(self.s * self.s + self.x * self.x + self.y * self.y + self.z * self.z);
	var self1 = new hxmath_math_QuaternionDefault(self.s,self.x,self.y,self.z);
	self1.s *= _g;
	self1.x *= _g;
	self1.y *= _g;
	self1.z *= _g;
	return self1;
};
var hxmath_math__$ShortVector2_ShortVector2_$Impl_$ = {};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.__name__ = ["hxmath","math","_ShortVector2","ShortVector2_Impl_"];
hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new = function(x,y) {
	var this1;
	if(!(x >= 0 && y >= 0 && x <= 65535 && y <= 65535)) {
		throw new js__$Boot_HaxeError("Specified (x=" + x + ", y=" + y + ") fields not in the range [0, " + 65535 + "]");
	}
	this1 = y << 16 | x;
	return this1;
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.fromArray = function(rawData) {
	if(rawData.length != 2) {
		throw new js__$Boot_HaxeError("Invalid rawData.");
	}
	return hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(rawData[0],rawData[1]);
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.dot = function(a,b) {
	return (a & 65535) * (b & 65535) + (a >> 16 & 65535) * (b >> 16 & 65535);
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.multiply = function(a,s) {
	return hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(s * (a & 65535),s * (a >> 16 & 65535));
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.add = function(a,b) {
	return hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new((a & 65535) + (b & 65535),(a >> 16 & 65535) + (b >> 16 & 65535));
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.subtract = function(a,b) {
	return hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new((a & 65535) - (b & 65535),(a >> 16 & 65535) - (b >> 16 & 65535));
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.negate = function(a) {
	return hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(-(a & 65535),-(a >> 16 & 65535));
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.max = function(a,b) {
	var a1 = a & 65535;
	var b1 = b & 65535;
	var tmp = b1 > a1?b1:a1;
	var a2 = a >> 16 & 65535;
	var b2 = b >> 16 & 65535;
	return hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(tmp,b2 > a2?b2:a2);
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.min = function(a,b) {
	var a1 = a & 65535;
	var b1 = b & 65535;
	var tmp = b1 < a1?b1:a1;
	var a2 = a >> 16 & 65535;
	var b2 = b >> 16 & 65535;
	return hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(tmp,b2 < a2?b2:a2);
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self & 65535;
	case 1:
		return self >> 16 & 65535;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.toVector2 = function(this1) {
	var self = this1;
	return new hxmath_math_Vector2Default(self & 65535,self >> 16 & 65535);
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.indexInBounds = function(x,y) {
	if(x >= 0 && y >= 0 && x <= 65535) {
		return y <= 65535;
	} else {
		return false;
	}
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.get_zero = function() {
	return hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(0,0);
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.get_xAxis = function() {
	return hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(1,0);
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.get_yAxis = function() {
	return hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(0,1);
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.get_x = function(this1) {
	return this1 & 65535;
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.get_y = function(this1) {
	return this1 >> 16 & 65535;
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.get_lengthSq = function(this1) {
	var self = this1;
	return (self & 65535) * (self & 65535) + (self >> 16 & 65535) * (self >> 16 & 65535);
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.get_rotatedLeft = function(this1) {
	return hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(-(this1 >> 16 & 65535),this1 & 65535);
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.get_rotatedRight = function(this1) {
	return hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(this1 >> 16 & 65535,-(this1 & 65535));
};
var hxmath_math_Vector2Default = function(x,y) {
	this.x = x;
	this.y = y;
};
hxmath_math_Vector2Default.__name__ = ["hxmath","math","Vector2Default"];
hxmath_math_Vector2Default.prototype = {
	x: null
	,y: null
	,toString: function() {
		return "(" + this.x + ", " + this.y + ")";
	}
	,__class__: hxmath_math_Vector2Default
};
var hxmath_math__$Vector2_Vector2_$Impl_$ = {};
hxmath_math__$Vector2_Vector2_$Impl_$.__name__ = ["hxmath","math","_Vector2","Vector2_Impl_"];
hxmath_math__$Vector2_Vector2_$Impl_$._new = function(x,y) {
	return new hxmath_math_Vector2Default(x,y);
};
hxmath_math__$Vector2_Vector2_$Impl_$.fromArray = function(rawData) {
	if(rawData.length != 2) {
		throw new js__$Boot_HaxeError("Invalid rawData.");
	}
	return new hxmath_math_Vector2Default(rawData[0],rawData[1]);
};
hxmath_math__$Vector2_Vector2_$Impl_$.fromPolar = function(angle,radius) {
	return new hxmath_math_Vector2Default(radius * Math.cos(angle),radius * Math.sin(angle));
};
hxmath_math__$Vector2_Vector2_$Impl_$.fromVector2Shape = function(other) {
	return new hxmath_math_Vector2Default(other.x,other.y);
};
hxmath_math__$Vector2_Vector2_$Impl_$.toIntVector2 = function(this1,func) {
	var self = this1;
	if(func == null) {
		func = Std["int"];
	}
	return hxmath_math__$IntVector2_IntVector2_$Impl_$._new(func(self.x),func(self.y));
};
hxmath_math__$Vector2_Vector2_$Impl_$.dot = function(a,b) {
	return a.x * b.x + a.y * b.y;
};
hxmath_math__$Vector2_Vector2_$Impl_$.multiply = function(a,s) {
	var self = new hxmath_math_Vector2Default(a.x,a.y);
	self.x *= s;
	self.y *= s;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.divide = function(a,s) {
	var self = new hxmath_math_Vector2Default(a.x,a.y);
	self.x /= s;
	self.y /= s;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.add = function(a,b) {
	var self = new hxmath_math_Vector2Default(a.x,a.y);
	self.x += b.x;
	self.y += b.y;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.subtract = function(a,b) {
	var self = new hxmath_math_Vector2Default(a.x,a.y);
	self.x -= b.x;
	self.y -= b.y;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.negate = function(a) {
	return new hxmath_math_Vector2Default(-a.x,-a.y);
};
hxmath_math__$Vector2_Vector2_$Impl_$.equals = function(a,b) {
	if(!(a == null && b == null)) {
		if(a != null && b != null && a.x == b.x) {
			return a.y == b.y;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxmath_math__$Vector2_Vector2_$Impl_$.lerp = function(a,b,t) {
	return new hxmath_math_Vector2Default((1.0 - t) * a.x + t * b.x,(1.0 - t) * a.y + t * b.y);
};
hxmath_math__$Vector2_Vector2_$Impl_$.max = function(a,b) {
	var self = new hxmath_math_Vector2Default(a.x,a.y);
	self.x = Math.max(self.x,b.x);
	self.y = Math.max(self.y,b.y);
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.min = function(a,b) {
	var self = new hxmath_math_Vector2Default(a.x,a.y);
	self.x = Math.min(self.x,b.x);
	self.y = Math.min(self.y,b.y);
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.project = function(a,b) {
	var self = new hxmath_math_Vector2Default(a.x,a.y);
	var s = (self.x * b.x + self.y * b.y) / (b.x * b.x + b.y * b.y);
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = b.x;
			break;
		case 1:
			tmp = b.y;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			self.x = value;
			break;
		case 1:
			self.y = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	self.x *= s;
	self.y *= s;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.reflect = function(v,normal) {
	var self = new hxmath_math_Vector2Default(v.x,v.y);
	var self1 = new hxmath_math_Vector2Default(self.x,self.y);
	var s = (self1.x * normal.x + self1.y * normal.y) / (normal.x * normal.x + normal.y * normal.y);
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = normal.x;
			break;
		case 1:
			tmp = normal.y;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			self1.x = value;
			break;
		case 1:
			self1.y = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	self1.x *= s;
	self1.y *= s;
	self1.x *= 2.0;
	self1.y *= 2.0;
	self.x -= self1.x;
	self.y -= self1.y;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.orthoNormalize = function(u,v) {
	var length = Math.sqrt(u.x * u.x + u.y * u.y);
	if(length > 0.0) {
		u.x /= length;
		u.y /= length;
	}
	var self = new hxmath_math_Vector2Default(v.x,v.y);
	var s = (self.x * u.x + self.y * u.y) / (u.x * u.x + u.y * u.y);
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = u.x;
			break;
		case 1:
			tmp = u.y;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			self.x = value;
			break;
		case 1:
			self.y = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	self.x *= s;
	self.y *= s;
	v.x -= self.x;
	v.y -= self.y;
	var length1 = Math.sqrt(v.x * v.x + v.y * v.y);
	if(length1 > 0.0) {
		v.x /= length1;
		v.y /= length1;
	}
};
hxmath_math__$Vector2_Vector2_$Impl_$.set = function(this1,x,y) {
	var self = this1;
	self.x = x;
	self.y = y;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.multiplyWith = function(this1,s) {
	var self = this1;
	self.x *= s;
	self.y *= s;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.divideWith = function(this1,s) {
	var self = this1;
	self.x /= s;
	self.y /= s;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.addWith = function(this1,a) {
	var self = this1;
	self.x += a.x;
	self.y += a.y;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.subtractWith = function(this1,a) {
	var self = this1;
	self.x -= a.x;
	self.y -= a.y;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.maxWith = function(this1,a) {
	var self = this1;
	self.x = Math.max(self.x,a.x);
	self.y = Math.max(self.y,a.y);
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.minWith = function(this1,a) {
	var self = this1;
	self.x = Math.min(self.x,a.x);
	self.y = Math.min(self.y,a.y);
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.projectOnto = function(this1,a) {
	var self = this1;
	var s = (self.x * a.x + self.y * a.y) / (a.x * a.x + a.y * a.y);
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = a.x;
			break;
		case 1:
			tmp = a.y;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			self.x = value;
			break;
		case 1:
			self.y = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	self.x *= s;
	self.y *= s;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.reflectBy = function(this1,normal) {
	var self = this1;
	var self1 = new hxmath_math_Vector2Default(self.x,self.y);
	var s = (self1.x * normal.x + self1.y * normal.y) / (normal.x * normal.x + normal.y * normal.y);
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = normal.x;
			break;
		case 1:
			tmp = normal.y;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			self1.x = value;
			break;
		case 1:
			self1.y = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	self1.x *= s;
	self1.y *= s;
	self1.x *= 2.0;
	self1.y *= 2.0;
	self.x -= self1.x;
	self.y -= self1.y;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.copyTo = function(this1,target) {
	var self = this1;
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.x;
			break;
		case 1:
			tmp = self.y;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			target.x = value;
			break;
		case 1:
			target.y = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
};
hxmath_math__$Vector2_Vector2_$Impl_$.copyToShape = function(this1,target) {
	var self = this1;
	target.x = self.x;
	target.y = self.y;
};
hxmath_math__$Vector2_Vector2_$Impl_$.copyFromShape = function(this1,source) {
	var self = this1;
	self.x = source.x;
	self.y = source.y;
};
hxmath_math__$Vector2_Vector2_$Impl_$.clone = function(this1) {
	var self = this1;
	return new hxmath_math_Vector2Default(self.x,self.y);
};
hxmath_math__$Vector2_Vector2_$Impl_$.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x;
	case 1:
		return self.y;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Vector2_Vector2_$Impl_$.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x = value;
	case 1:
		return self.y = value;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Vector2_Vector2_$Impl_$.applyNegate = function(this1) {
	var self = this1;
	self.x = -self.x;
	self.y = -self.y;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.applyScalarFunc = function(this1,func) {
	var self = this1;
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.x;
			break;
		case 1:
			tmp = self.y;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = func(tmp);
		switch(i) {
		case 0:
			self.x = value;
			break;
		case 1:
			self.y = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.angleWith = function(this1,b) {
	var self = this1;
	return Math.acos((self.x * b.x + self.y * b.y) / (Math.sqrt(self.x * self.x + self.y * self.y) * Math.sqrt(b.x * b.x + b.y * b.y)));
};
hxmath_math__$Vector2_Vector2_$Impl_$.signedAngleWith = function(this1,b) {
	var self = this1;
	var x = self.x * b.y - b.x * self.y;
	return (Math.abs(x) < 0?0:x <= 0?-1:1) * Math.acos((self.x * b.x + self.y * b.y) / (Math.sqrt(self.x * self.x + self.y * self.y) * Math.sqrt(b.x * b.x + b.y * b.y)));
};
hxmath_math__$Vector2_Vector2_$Impl_$.distanceTo = function(this1,b) {
	var self = this1;
	var self1 = new hxmath_math_Vector2Default(self.x,self.y);
	self1.x -= b.x;
	self1.y -= b.y;
	var self2 = self1;
	return Math.sqrt(self2.x * self2.x + self2.y * self2.y);
};
hxmath_math__$Vector2_Vector2_$Impl_$.normalize = function(this1) {
	var self = this1;
	var length = Math.sqrt(self.x * self.x + self.y * self.y);
	if(length > 0.0) {
		self.x /= length;
		self.y /= length;
	}
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.normalizeTo = function(this1,newLength) {
	var self = this1;
	var length = Math.sqrt(self.x * self.x + self.y * self.y);
	if(length > 0.0) {
		self.x /= length;
		self.y /= length;
	}
	self.x *= newLength;
	self.y *= newLength;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.clamp = function(this1,min,max) {
	var self = this1;
	var length = Math.sqrt(self.x * self.x + self.y * self.y);
	if(length < min) {
		var length1 = Math.sqrt(self.x * self.x + self.y * self.y);
		if(length1 > 0.0) {
			self.x /= length1;
			self.y /= length1;
		}
		self.x *= min;
		self.y *= min;
	} else if(length > max) {
		var length2 = Math.sqrt(self.x * self.x + self.y * self.y);
		if(length2 > 0.0) {
			self.x /= length2;
			self.y /= length2;
		}
		self.x *= max;
		self.y *= max;
	}
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.rotate = function(this1,angle,pivot) {
	var self = this1;
	Math.cos(angle);
	Math.sin(angle);
	var dx = self.x - pivot.x;
	var dy = self.y - pivot.y;
	self.x = dx * Math.cos(angle) - dy * Math.sin(angle);
	self.y = dx * Math.sin(angle) + dy * Math.cos(angle);
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.rotateLeft = function(this1) {
	var self = this1;
	var newX = -self.y;
	self.y = self.x;
	self.x = newX;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.rotateRight = function(this1) {
	var self = this1;
	var newX = self.y;
	self.y = -self.x;
	self.x = newX;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_zero = function() {
	return new hxmath_math_Vector2Default(0.0,0.0);
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_xAxis = function() {
	return new hxmath_math_Vector2Default(1.0,0.0);
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_yAxis = function() {
	return new hxmath_math_Vector2Default(0.0,1.0);
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_length = function(this1) {
	var self = this1;
	return Math.sqrt(self.x * self.x + self.y * self.y);
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_lengthSq = function(this1) {
	var self = this1;
	return self.x * self.x + self.y * self.y;
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_angle = function(this1) {
	var self = this1;
	return Math.atan2(self.y,self.x);
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_normal = function(this1) {
	var self = this1;
	var self1 = new hxmath_math_Vector2Default(self.x,self.y);
	var length = Math.sqrt(self1.x * self1.x + self1.y * self1.y);
	if(length > 0.0) {
		self1.x /= length;
		self1.y /= length;
	}
	return self1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_rotatedLeft = function(this1) {
	var self = this1;
	var self1 = new hxmath_math_Vector2Default(self.x,self.y);
	var newX = -self1.y;
	self1.y = self1.x;
	self1.x = newX;
	return self1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_rotatedRight = function(this1) {
	var self = this1;
	var self1 = new hxmath_math_Vector2Default(self.x,self.y);
	var newX = self1.y;
	self1.y = -self1.x;
	self1.x = newX;
	return self1;
};
var hxmath_math_Vector3Default = function(x,y,z) {
	this.x = x;
	this.y = y;
	this.z = z;
};
hxmath_math_Vector3Default.__name__ = ["hxmath","math","Vector3Default"];
hxmath_math_Vector3Default.prototype = {
	x: null
	,y: null
	,z: null
	,toString: function() {
		return "(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,__class__: hxmath_math_Vector3Default
};
var hxmath_math__$Vector3_Vector3_$Impl_$ = {};
hxmath_math__$Vector3_Vector3_$Impl_$.__name__ = ["hxmath","math","_Vector3","Vector3_Impl_"];
hxmath_math__$Vector3_Vector3_$Impl_$._new = function(x,y,z) {
	return new hxmath_math_Vector3Default(x,y,z);
};
hxmath_math__$Vector3_Vector3_$Impl_$.fromArray = function(rawData) {
	if(rawData.length != 3) {
		throw new js__$Boot_HaxeError("Invalid rawData.");
	}
	return new hxmath_math_Vector3Default(rawData[0],rawData[1],rawData[2]);
};
hxmath_math__$Vector3_Vector3_$Impl_$.fromVector3Shape = function(other) {
	return new hxmath_math_Vector3Default(other.x,other.y,other.z);
};
hxmath_math__$Vector3_Vector3_$Impl_$.dot = function(a,b) {
	return a.x * b.x + a.y * b.y + a.z * b.z;
};
hxmath_math__$Vector3_Vector3_$Impl_$.cross = function(a,b) {
	var self = new hxmath_math_Vector3Default(a.x,a.y,a.z);
	var newX = self.y * b.z - self.z * b.y;
	var newY = self.z * b.x - self.x * b.z;
	var newZ = self.x * b.y - self.y * b.x;
	self.x = newX;
	self.y = newY;
	self.z = newZ;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.multiply = function(a,s) {
	var self = new hxmath_math_Vector3Default(a.x,a.y,a.z);
	self.x *= s;
	self.y *= s;
	self.z *= s;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.divide = function(a,s) {
	var self = new hxmath_math_Vector3Default(a.x,a.y,a.z);
	self.x /= s;
	self.y /= s;
	self.z /= s;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.add = function(a,b) {
	var self = new hxmath_math_Vector3Default(a.x,a.y,a.z);
	self.x += b.x;
	self.y += b.y;
	self.z += b.z;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.subtract = function(a,b) {
	var self = new hxmath_math_Vector3Default(a.x,a.y,a.z);
	self.x -= b.x;
	self.y -= b.y;
	self.z -= b.z;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.negate = function(a) {
	return new hxmath_math_Vector3Default(-a.x,-a.y,-a.z);
};
hxmath_math__$Vector3_Vector3_$Impl_$.equals = function(a,b) {
	if(!(a == null && b == null)) {
		if(a != null && b != null && a.x == b.x && a.y == b.y) {
			return a.z == b.z;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxmath_math__$Vector3_Vector3_$Impl_$.lerp = function(a,b,t) {
	return new hxmath_math_Vector3Default((1.0 - t) * a.x + t * b.x,(1.0 - t) * a.y + t * b.y,(1.0 - t) * a.z + t * b.z);
};
hxmath_math__$Vector3_Vector3_$Impl_$.max = function(a,b) {
	var self = new hxmath_math_Vector3Default(a.x,a.y,a.z);
	self.x = Math.max(self.x,b.x);
	self.y = Math.max(self.y,b.y);
	self.z = Math.max(self.z,b.z);
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.min = function(a,b) {
	var self = new hxmath_math_Vector3Default(a.x,a.y,a.z);
	self.x = Math.min(self.x,b.x);
	self.y = Math.min(self.y,b.y);
	self.z = Math.min(self.z,b.z);
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.project = function(a,b) {
	var self = new hxmath_math_Vector3Default(a.x,a.y,a.z);
	var s = (self.x * b.x + self.y * b.y + self.z * b.z) / (b.x * b.x + b.y * b.y + b.z * b.z);
	var _g = 0;
	while(_g < 3) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = b.x;
			break;
		case 1:
			tmp = b.y;
			break;
		case 2:
			tmp = b.z;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			self.x = value;
			break;
		case 1:
			self.y = value;
			break;
		case 2:
			self.z = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	self.x *= s;
	self.y *= s;
	self.z *= s;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.reflect = function(v,normal) {
	var self = new hxmath_math_Vector3Default(v.x,v.y,v.z);
	var self1 = new hxmath_math_Vector3Default(self.x,self.y,self.z);
	var s = (self1.x * normal.x + self1.y * normal.y + self1.z * normal.z) / (normal.x * normal.x + normal.y * normal.y + normal.z * normal.z);
	var _g = 0;
	while(_g < 3) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = normal.x;
			break;
		case 1:
			tmp = normal.y;
			break;
		case 2:
			tmp = normal.z;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			self1.x = value;
			break;
		case 1:
			self1.y = value;
			break;
		case 2:
			self1.z = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	self1.x *= s;
	self1.y *= s;
	self1.z *= s;
	self1.x *= 2.0;
	self1.y *= 2.0;
	self1.z *= 2.0;
	self.x -= self1.x;
	self.y -= self1.y;
	self.z -= self1.z;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.orthoNormalize = function(u,v,w) {
	var length = Math.sqrt(u.x * u.x + u.y * u.y + u.z * u.z);
	if(length > 0.0) {
		u.x /= length;
		u.y /= length;
		u.z /= length;
	}
	var self = new hxmath_math_Vector3Default(v.x,v.y,v.z);
	var s = (self.x * u.x + self.y * u.y + self.z * u.z) / (u.x * u.x + u.y * u.y + u.z * u.z);
	var _g = 0;
	while(_g < 3) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = u.x;
			break;
		case 1:
			tmp = u.y;
			break;
		case 2:
			tmp = u.z;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			self.x = value;
			break;
		case 1:
			self.y = value;
			break;
		case 2:
			self.z = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	self.x *= s;
	self.y *= s;
	self.z *= s;
	v.x -= self.x;
	v.y -= self.y;
	v.z -= self.z;
	var length1 = Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
	if(length1 > 0.0) {
		v.x /= length1;
		v.y /= length1;
		v.z /= length1;
	}
	var self1 = new hxmath_math_Vector3Default(w.x,w.y,w.z);
	var s1 = (self1.x * u.x + self1.y * u.y + self1.z * u.z) / (u.x * u.x + u.y * u.y + u.z * u.z);
	var _g1 = 0;
	while(_g1 < 3) {
		var i1 = _g1++;
		var tmp1;
		switch(i1) {
		case 0:
			tmp1 = u.x;
			break;
		case 1:
			tmp1 = u.y;
			break;
		case 2:
			tmp1 = u.z;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value1 = tmp1;
		switch(i1) {
		case 0:
			self1.x = value1;
			break;
		case 1:
			self1.y = value1;
			break;
		case 2:
			self1.z = value1;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	self1.x *= s1;
	self1.y *= s1;
	self1.z *= s1;
	w.x -= self1.x;
	w.y -= self1.y;
	w.z -= self1.z;
	var self2 = new hxmath_math_Vector3Default(w.x,w.y,w.z);
	var s2 = (self2.x * v.x + self2.y * v.y + self2.z * v.z) / (v.x * v.x + v.y * v.y + v.z * v.z);
	var _g2 = 0;
	while(_g2 < 3) {
		var i2 = _g2++;
		var tmp2;
		switch(i2) {
		case 0:
			tmp2 = v.x;
			break;
		case 1:
			tmp2 = v.y;
			break;
		case 2:
			tmp2 = v.z;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value2 = tmp2;
		switch(i2) {
		case 0:
			self2.x = value2;
			break;
		case 1:
			self2.y = value2;
			break;
		case 2:
			self2.z = value2;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	self2.x *= s2;
	self2.y *= s2;
	self2.z *= s2;
	w.x -= self2.x;
	w.y -= self2.y;
	w.z -= self2.z;
	var length2 = Math.sqrt(w.x * w.x + w.y * w.y + w.z * w.z);
	if(length2 > 0.0) {
		w.x /= length2;
		w.y /= length2;
		w.z /= length2;
	}
};
hxmath_math__$Vector3_Vector3_$Impl_$.set = function(this1,x,y,z) {
	var self = this1;
	self.x = x;
	self.y = y;
	self.z = z;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.crossWith = function(this1,a) {
	var self = this1;
	var newX = self.y * a.z - self.z * a.y;
	var newY = self.z * a.x - self.x * a.z;
	var newZ = self.x * a.y - self.y * a.x;
	self.x = newX;
	self.y = newY;
	self.z = newZ;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.multiplyWith = function(this1,s) {
	var self = this1;
	self.x *= s;
	self.y *= s;
	self.z *= s;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.divideWith = function(this1,s) {
	var self = this1;
	self.x /= s;
	self.y /= s;
	self.z /= s;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.addWith = function(this1,a) {
	var self = this1;
	self.x += a.x;
	self.y += a.y;
	self.z += a.z;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.subtractWith = function(this1,a) {
	var self = this1;
	self.x -= a.x;
	self.y -= a.y;
	self.z -= a.z;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.maxWith = function(this1,a) {
	var self = this1;
	self.x = Math.max(self.x,a.x);
	self.y = Math.max(self.y,a.y);
	self.z = Math.max(self.z,a.z);
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.minWith = function(this1,a) {
	var self = this1;
	self.x = Math.min(self.x,a.x);
	self.y = Math.min(self.y,a.y);
	self.z = Math.min(self.z,a.z);
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.projectOnto = function(this1,a) {
	var self = this1;
	var s = (self.x * a.x + self.y * a.y + self.z * a.z) / (a.x * a.x + a.y * a.y + a.z * a.z);
	var _g = 0;
	while(_g < 3) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = a.x;
			break;
		case 1:
			tmp = a.y;
			break;
		case 2:
			tmp = a.z;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			self.x = value;
			break;
		case 1:
			self.y = value;
			break;
		case 2:
			self.z = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	self.x *= s;
	self.y *= s;
	self.z *= s;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.projectOntoPlane = function(this1,normal) {
	var self = this1;
	var self1 = new hxmath_math_Vector3Default(self.x,self.y,self.z);
	var s = (self1.x * normal.x + self1.y * normal.y + self1.z * normal.z) / (normal.x * normal.x + normal.y * normal.y + normal.z * normal.z);
	var _g = 0;
	while(_g < 3) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = normal.x;
			break;
		case 1:
			tmp = normal.y;
			break;
		case 2:
			tmp = normal.z;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			self1.x = value;
			break;
		case 1:
			self1.y = value;
			break;
		case 2:
			self1.z = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	self1.x *= s;
	self1.y *= s;
	self1.z *= s;
	self.x -= self1.x;
	self.y -= self1.y;
	self.z -= self1.z;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.reflectBy = function(this1,normal) {
	var self = this1;
	var self1 = new hxmath_math_Vector3Default(self.x,self.y,self.z);
	var s = (self1.x * normal.x + self1.y * normal.y + self1.z * normal.z) / (normal.x * normal.x + normal.y * normal.y + normal.z * normal.z);
	var _g = 0;
	while(_g < 3) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = normal.x;
			break;
		case 1:
			tmp = normal.y;
			break;
		case 2:
			tmp = normal.z;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			self1.x = value;
			break;
		case 1:
			self1.y = value;
			break;
		case 2:
			self1.z = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	self1.x *= s;
	self1.y *= s;
	self1.z *= s;
	self1.x *= 2.0;
	self1.y *= 2.0;
	self1.z *= 2.0;
	self.x -= self1.x;
	self.y -= self1.y;
	self.z -= self1.z;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.copyTo = function(this1,target) {
	var self = this1;
	var _g = 0;
	while(_g < 3) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.x;
			break;
		case 1:
			tmp = self.y;
			break;
		case 2:
			tmp = self.z;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			target.x = value;
			break;
		case 1:
			target.y = value;
			break;
		case 2:
			target.z = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
};
hxmath_math__$Vector3_Vector3_$Impl_$.copyToShape = function(this1,target) {
	var self = this1;
	target.x = self.x;
	target.y = self.y;
	target.z = self.z;
};
hxmath_math__$Vector3_Vector3_$Impl_$.copyFromShape = function(this1,source) {
	var self = this1;
	self.x = source.x;
	self.y = source.y;
	self.z = source.z;
};
hxmath_math__$Vector3_Vector3_$Impl_$.clone = function(this1) {
	var self = this1;
	return new hxmath_math_Vector3Default(self.x,self.y,self.z);
};
hxmath_math__$Vector3_Vector3_$Impl_$.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x;
	case 1:
		return self.y;
	case 2:
		return self.z;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Vector3_Vector3_$Impl_$.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x = value;
	case 1:
		return self.y = value;
	case 2:
		return self.z = value;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Vector3_Vector3_$Impl_$.applyNegate = function(this1) {
	var self = this1;
	self.x = -self.x;
	self.y = -self.y;
	self.z = -self.z;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.applyScalarFunc = function(this1,func) {
	var self = this1;
	var _g = 0;
	while(_g < 3) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.x;
			break;
		case 1:
			tmp = self.y;
			break;
		case 2:
			tmp = self.z;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = func(tmp);
		switch(i) {
		case 0:
			self.x = value;
			break;
		case 1:
			self.y = value;
			break;
		case 2:
			self.z = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.angleWith = function(this1,b) {
	var self = this1;
	return Math.acos((self.x * b.x + self.y * b.y + self.z * b.z) / (Math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z) * Math.sqrt(b.x * b.x + b.y * b.y + b.z * b.z)));
};
hxmath_math__$Vector3_Vector3_$Impl_$.distanceTo = function(this1,b) {
	var self = this1;
	var self1 = new hxmath_math_Vector3Default(self.x,self.y,self.z);
	self1.x -= b.x;
	self1.y -= b.y;
	self1.z -= b.z;
	var self2 = self1;
	return Math.sqrt(self2.x * self2.x + self2.y * self2.y + self2.z * self2.z);
};
hxmath_math__$Vector3_Vector3_$Impl_$.normalize = function(this1) {
	var self = this1;
	var length = Math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z);
	if(length > 0.0) {
		self.x /= length;
		self.y /= length;
		self.z /= length;
	}
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.normalizeTo = function(this1,newLength) {
	var self = this1;
	var length = Math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z);
	if(length > 0.0) {
		self.x /= length;
		self.y /= length;
		self.z /= length;
	}
	self.x *= newLength;
	self.y *= newLength;
	self.z *= newLength;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.clamp = function(this1,min,max) {
	var self = this1;
	var length = Math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z);
	if(length < min) {
		var length1 = Math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z);
		if(length1 > 0.0) {
			self.x /= length1;
			self.y /= length1;
			self.z /= length1;
		}
		self.x *= min;
		self.y *= min;
		self.z *= min;
	} else if(length > max) {
		var length2 = Math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z);
		if(length2 > 0.0) {
			self.x /= length2;
			self.y /= length2;
			self.z /= length2;
		}
		self.x *= max;
		self.y *= max;
		self.z *= max;
	}
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.get_length = function(this1) {
	var self = this1;
	return Math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z);
};
hxmath_math__$Vector3_Vector3_$Impl_$.get_lengthSq = function(this1) {
	var self = this1;
	return self.x * self.x + self.y * self.y + self.z * self.z;
};
hxmath_math__$Vector3_Vector3_$Impl_$.get_zero = function() {
	return new hxmath_math_Vector3Default(0.0,0.0,0.0);
};
hxmath_math__$Vector3_Vector3_$Impl_$.get_xAxis = function() {
	return new hxmath_math_Vector3Default(1.0,0.0,0.0);
};
hxmath_math__$Vector3_Vector3_$Impl_$.get_yAxis = function() {
	return new hxmath_math_Vector3Default(0.0,1.0,0.0);
};
hxmath_math__$Vector3_Vector3_$Impl_$.get_zAxis = function() {
	return new hxmath_math_Vector3Default(0.0,0.0,1.0);
};
var hxmath_math_Vector4Default = function(x,y,z,w) {
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
hxmath_math_Vector4Default.__name__ = ["hxmath","math","Vector4Default"];
hxmath_math_Vector4Default.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,toString: function() {
		return "(" + this.x + ", " + this.y + ", " + this.z + ", " + this.w + ")";
	}
	,__class__: hxmath_math_Vector4Default
};
var hxmath_math__$Vector4_Vector4_$Impl_$ = {};
hxmath_math__$Vector4_Vector4_$Impl_$.__name__ = ["hxmath","math","_Vector4","Vector4_Impl_"];
hxmath_math__$Vector4_Vector4_$Impl_$._new = function(x,y,z,w) {
	return new hxmath_math_Vector4Default(x,y,z,w);
};
hxmath_math__$Vector4_Vector4_$Impl_$.fromArray = function(rawData) {
	if(rawData.length != 4) {
		throw new js__$Boot_HaxeError("Invalid rawData.");
	}
	return new hxmath_math_Vector4Default(rawData[0],rawData[1],rawData[2],rawData[3]);
};
hxmath_math__$Vector4_Vector4_$Impl_$.fromVector4Shape = function(other) {
	return new hxmath_math_Vector4Default(other.x,other.y,other.z,other.w);
};
hxmath_math__$Vector4_Vector4_$Impl_$.dot = function(a,b) {
	return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
};
hxmath_math__$Vector4_Vector4_$Impl_$.multiply = function(a,s) {
	var self = new hxmath_math_Vector4Default(a.x,a.y,a.z,a.w);
	self.x *= s;
	self.y *= s;
	self.z *= s;
	self.w *= s;
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.divide = function(a,s) {
	var self = new hxmath_math_Vector4Default(a.x,a.y,a.z,a.w);
	self.x /= s;
	self.y /= s;
	self.z /= s;
	self.w /= s;
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.add = function(a,b) {
	var self = new hxmath_math_Vector4Default(a.x,a.y,a.z,a.w);
	self.x += b.x;
	self.y += b.y;
	self.z += b.z;
	self.w += b.w;
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.subtract = function(a,b) {
	var self = new hxmath_math_Vector4Default(a.x,a.y,a.z,a.w);
	self.x -= b.x;
	self.y -= b.y;
	self.z -= b.z;
	self.w -= b.w;
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.negate = function(a) {
	return new hxmath_math_Vector4Default(-a.x,-a.y,-a.z,-a.w);
};
hxmath_math__$Vector4_Vector4_$Impl_$.equals = function(a,b) {
	if(!(a == null && b == null)) {
		if(a != null && b != null && a.x == b.x && a.y == b.y && a.z == b.z) {
			return a.w == b.w;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxmath_math__$Vector4_Vector4_$Impl_$.lerp = function(a,b,t) {
	return new hxmath_math_Vector4Default((1.0 - t) * a.x + t * b.x,(1.0 - t) * a.y + t * b.y,(1.0 - t) * a.z + t * b.z,(1.0 - t) * a.w + t * b.w);
};
hxmath_math__$Vector4_Vector4_$Impl_$.max = function(a,b) {
	var self = new hxmath_math_Vector4Default(a.x,a.y,a.z,a.w);
	self.x = Math.max(self.x,b.x);
	self.y = Math.max(self.y,b.y);
	self.z = Math.max(self.z,b.z);
	self.w = Math.max(self.w,b.w);
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.min = function(a,b) {
	var self = new hxmath_math_Vector4Default(a.x,a.y,a.z,a.w);
	self.x = Math.min(self.x,b.x);
	self.y = Math.min(self.y,b.y);
	self.z = Math.min(self.z,b.z);
	self.w = Math.min(self.w,b.w);
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.project = function(a,b) {
	var self = new hxmath_math_Vector4Default(a.x,a.y,a.z,a.w);
	var s = (self.x * b.x + self.y * b.y + self.z * b.z + self.w * b.w) / (b.x * b.x + b.y * b.y + b.z * b.z + b.w * b.w);
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = b.x;
			break;
		case 1:
			tmp = b.y;
			break;
		case 2:
			tmp = b.z;
			break;
		case 3:
			tmp = b.w;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			self.x = value;
			break;
		case 1:
			self.y = value;
			break;
		case 2:
			self.z = value;
			break;
		case 3:
			self.w = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	self.x *= s;
	self.y *= s;
	self.z *= s;
	self.w *= s;
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.set = function(this1,x,y,z,w) {
	var self = this1;
	self.x = x;
	self.y = y;
	self.z = z;
	self.w = w;
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.multiplyWith = function(this1,s) {
	var self = this1;
	self.x *= s;
	self.y *= s;
	self.z *= s;
	self.w *= s;
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.divideWith = function(this1,s) {
	var self = this1;
	self.x /= s;
	self.y /= s;
	self.z /= s;
	self.w /= s;
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.addWith = function(this1,a) {
	var self = this1;
	self.x += a.x;
	self.y += a.y;
	self.z += a.z;
	self.w += a.w;
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.subtractWith = function(this1,a) {
	var self = this1;
	self.x -= a.x;
	self.y -= a.y;
	self.z -= a.z;
	self.w -= a.w;
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.maxWith = function(this1,a) {
	var self = this1;
	self.x = Math.max(self.x,a.x);
	self.y = Math.max(self.y,a.y);
	self.z = Math.max(self.z,a.z);
	self.w = Math.max(self.w,a.w);
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.minWith = function(this1,a) {
	var self = this1;
	self.x = Math.min(self.x,a.x);
	self.y = Math.min(self.y,a.y);
	self.z = Math.min(self.z,a.z);
	self.w = Math.min(self.w,a.w);
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.projectOnto = function(this1,a) {
	var self = this1;
	var s = (self.x * a.x + self.y * a.y + self.z * a.z + self.w * a.w) / (a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w);
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = a.x;
			break;
		case 1:
			tmp = a.y;
			break;
		case 2:
			tmp = a.z;
			break;
		case 3:
			tmp = a.w;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			self.x = value;
			break;
		case 1:
			self.y = value;
			break;
		case 2:
			self.z = value;
			break;
		case 3:
			self.w = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	self.x *= s;
	self.y *= s;
	self.z *= s;
	self.w *= s;
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.copyTo = function(this1,target) {
	var self = this1;
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.x;
			break;
		case 1:
			tmp = self.y;
			break;
		case 2:
			tmp = self.z;
			break;
		case 3:
			tmp = self.w;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			target.x = value;
			break;
		case 1:
			target.y = value;
			break;
		case 2:
			target.z = value;
			break;
		case 3:
			target.w = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
};
hxmath_math__$Vector4_Vector4_$Impl_$.copyToShape = function(this1,target) {
	var self = this1;
	target.x = self.x;
	target.y = self.y;
	target.z = self.z;
	target.w = self.w;
};
hxmath_math__$Vector4_Vector4_$Impl_$.copyFromShape = function(this1,source) {
	var self = this1;
	self.x = source.x;
	self.y = source.y;
	self.z = source.z;
	self.w = source.w;
};
hxmath_math__$Vector4_Vector4_$Impl_$.clone = function(this1) {
	var self = this1;
	return new hxmath_math_Vector4Default(self.x,self.y,self.z,self.w);
};
hxmath_math__$Vector4_Vector4_$Impl_$.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x;
	case 1:
		return self.y;
	case 2:
		return self.z;
	case 3:
		return self.w;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Vector4_Vector4_$Impl_$.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x = value;
	case 1:
		return self.y = value;
	case 2:
		return self.z = value;
	case 3:
		return self.w = value;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Vector4_Vector4_$Impl_$.applyScalarFunc = function(this1,func) {
	var self = this1;
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.x;
			break;
		case 1:
			tmp = self.y;
			break;
		case 2:
			tmp = self.z;
			break;
		case 3:
			tmp = self.w;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = func(tmp);
		switch(i) {
		case 0:
			self.x = value;
			break;
		case 1:
			self.y = value;
			break;
		case 2:
			self.z = value;
			break;
		case 3:
			self.w = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.distanceTo = function(this1,b) {
	var self = this1;
	var self1 = new hxmath_math_Vector4Default(self.x,self.y,self.z,self.w);
	self1.x -= b.x;
	self1.y -= b.y;
	self1.z -= b.z;
	self1.w -= b.w;
	var self2 = self1;
	return Math.sqrt(self2.x * self2.x + self2.y * self2.y + self2.z * self2.z + self2.w * self2.w);
};
hxmath_math__$Vector4_Vector4_$Impl_$.normalize = function(this1) {
	var self = this1;
	var length = Math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z + self.w * self.w);
	if(length > 0.0) {
		self.x /= length;
		self.y /= length;
		self.z /= length;
		self.w /= length;
	}
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.normalizeTo = function(this1,newLength) {
	var self = this1;
	var length = Math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z + self.w * self.w);
	if(length > 0.0) {
		self.x /= length;
		self.y /= length;
		self.z /= length;
		self.w /= length;
	}
	self.x *= newLength;
	self.y *= newLength;
	self.z *= newLength;
	self.w *= newLength;
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.clamp = function(this1,min,max) {
	var self = this1;
	var length = Math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z + self.w * self.w);
	if(length < min) {
		var length1 = Math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z + self.w * self.w);
		if(length1 > 0.0) {
			self.x /= length1;
			self.y /= length1;
			self.z /= length1;
			self.w /= length1;
		}
		self.x *= min;
		self.y *= min;
		self.z *= min;
		self.w *= min;
	} else if(length > max) {
		var length2 = Math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z + self.w * self.w);
		if(length2 > 0.0) {
			self.x /= length2;
			self.y /= length2;
			self.z /= length2;
			self.w /= length2;
		}
		self.x *= max;
		self.y *= max;
		self.z *= max;
		self.w *= max;
	}
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.get_length = function(this1) {
	var self = this1;
	return Math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z + self.w * self.w);
};
hxmath_math__$Vector4_Vector4_$Impl_$.get_lengthSq = function(this1) {
	var self = this1;
	return self.x * self.x + self.y * self.y + self.z * self.z + self.w * self.w;
};
hxmath_math__$Vector4_Vector4_$Impl_$.get_zero = function() {
	return new hxmath_math_Vector4Default(0.0,0.0,0.0,0.0);
};
hxmath_math__$Vector4_Vector4_$Impl_$.get_xAxis = function() {
	return new hxmath_math_Vector4Default(1.0,0.0,0.0,0.0);
};
hxmath_math__$Vector4_Vector4_$Impl_$.get_yAxis = function() {
	return new hxmath_math_Vector4Default(0.0,1.0,0.0,0.0);
};
hxmath_math__$Vector4_Vector4_$Impl_$.get_zAxis = function() {
	return new hxmath_math_Vector4Default(0.0,0.0,1.0,0.0);
};
hxmath_math__$Vector4_Vector4_$Impl_$.get_wAxis = function() {
	return new hxmath_math_Vector4Default(0.0,0.0,0.0,1.0);
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = ["js","Boot"];
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var nanotest_NanoTestAssertResult = function(_result,position) {
	this.result = _result;
	this.position = position;
};
nanotest_NanoTestAssertResult.__name__ = ["nanotest","NanoTestAssertResult"];
nanotest_NanoTestAssertResult.prototype = {
	result: null
	,position: null
	,label: function(d) {
		var _g = this.result.status[this.position];
		switch(_g[1]) {
		case 0:
			break;
		case 1:
			this.result.status[this.position] = nanotest_NanoTestStatus.FAIL("" + _g[2] + " [" + Std.string(d) + "]",_g[3]);
			break;
		case 2:
			this.result.status[this.position] = nanotest_NanoTestStatus.ERROR("" + _g[2] + " [" + Std.string(d) + "]",_g[3]);
			break;
		}
		return this;
	}
	,__class__: nanotest_NanoTestAssertResult
};
var nanotest_NanoTestCase = function(posInfos) {
	this.posInfos = posInfos;
};
nanotest_NanoTestCase.__name__ = ["nanotest","NanoTestCase"];
nanotest_NanoTestCase.ASSERT_THROWS_ILLEGAL_EXCEPTION = function(actual) {
	return "catched illeagal exception " + nanotest_NanoTestCase.format(actual);
};
nanotest_NanoTestCase.ASSERT_EQUALS_ERROR = function(expected,actual) {
	return "expected " + nanotest_NanoTestCase.format(expected) + " but was " + nanotest_NanoTestCase.format(actual);
};
nanotest_NanoTestCase.ASSERT_NOT_EQUALS_ERROR = function(expected,actual) {
	return "expected not " + nanotest_NanoTestCase.format(expected) + " but was " + nanotest_NanoTestCase.format(actual);
};
nanotest_NanoTestCase.format = function(d) {
	if(typeof(d) == "string") {
		return "\"" + Std.string(d) + "\"";
	} else {
		return "" + Std.string(d);
	}
};
nanotest_NanoTestCase.prototype = {
	currentResult: null
	,posInfos: null
	,globalTearDown: function() {
	}
	,globalSetup: function() {
	}
	,tearDown: function() {
	}
	,setup: function() {
	}
	,run: function(print) {
		var _gthis = this;
		var results = [];
		var cl = js_Boot.getClass(this);
		var fields = Type.getInstanceFields(cl);
		var closeResult = function() {
			if(_gthis.currentResult.error) {
				print("E");
			} else if(_gthis.currentResult.failed) {
				print("F");
			} else {
				print(".");
			}
			results.push(_gthis.currentResult);
			_gthis.currentResult = null;
		};
		print("Class: " + Type.getClassName(cl) + " ");
		this.globalSetup();
		if(this.currentResult != null) {
			closeResult();
		}
		var _g = 0;
		while(_g < fields.length) {
			var fname = fields[_g];
			++_g;
			var field = Reflect.field(this,fname);
			if(StringTools.startsWith(fname,"test") && Reflect.isFunction(field)) {
				this.currentResult = { className : Type.getClassName(cl), method : fname, async : false, testCase : this, error : false, failed : false, status : []};
				this.setup();
				try {
					field.apply(this,[]);
				} catch( e ) {
					haxe_CallStack.lastException = e;
					if (e instanceof js__$Boot_HaxeError) e = e.val;
					this.error(e);
				}
				this.tearDown();
				closeResult();
			}
		}
		this.globalTearDown();
		print("\n");
		return results;
	}
	,assertTrue: function(b,p) {
		if(b == false) {
			return this.fail("expected true but was false",p);
		} else {
			return this.success(p);
		}
	}
	,assertFalse: function(b,p) {
		if(b == true) {
			return this.fail("expected false but was true",p);
		} else {
			return this.success(p);
		}
	}
	,assertEquals: function(expected,actual,p) {
		if(Reflect.isEnumValue(expected)) {
			if(!Type.enumEq(actual,expected)) {
				return this.fail("expected " + nanotest_NanoTestCase.format(expected) + " but was " + nanotest_NanoTestCase.format(actual),p);
			} else {
				return this.success(p);
			}
		} else if(actual != expected) {
			return this.fail("expected " + nanotest_NanoTestCase.format(expected) + " but was " + nanotest_NanoTestCase.format(actual),p);
		} else {
			return this.success(p);
		}
	}
	,assertNotEquals: function(notExpected,actual,p) {
		if(Reflect.isEnumValue(notExpected)) {
			if(Type.enumEq(actual,notExpected)) {
				return this.fail("expected not " + nanotest_NanoTestCase.format(notExpected) + " but was " + nanotest_NanoTestCase.format(actual),p);
			} else {
				return this.success(p);
			}
		} else if(actual == notExpected) {
			return this.fail("expected not " + nanotest_NanoTestCase.format(notExpected) + " but was " + nanotest_NanoTestCase.format(actual),p);
		} else {
			return this.success(p);
		}
	}
	,assertThrows: function(func,isSuccess,p) {
		try {
			func();
		} catch( d ) {
			haxe_CallStack.lastException = d;
			if (d instanceof js__$Boot_HaxeError) d = d.val;
			if(isSuccess == null || isSuccess(d)) {
				return this.success(p);
			} else {
				var f = this.fail("catched illeagal exception " + nanotest_NanoTestCase.format(d),p);
				this.error(d);
				return f;
			}
		}
		return this.fail("expected to throw exception but didn't",p);
	}
	,fail: function(message,p) {
		if(this.currentResult == null) {
			this._openPreprocessResult();
		}
		this.currentResult.failed = true;
		var i = this.currentResult.status.length;
		this.currentResult.status.push(nanotest_NanoTestStatus.FAIL(message,p));
		return new nanotest_NanoTestAssertResult(this.currentResult,i);
	}
	,success: function(p) {
		if(this.currentResult == null) {
			this._openPreprocessResult();
		}
		var i = this.currentResult.status.length;
		this.currentResult.status.push(nanotest_NanoTestStatus.SUCCESS(p));
		return new nanotest_NanoTestAssertResult(this.currentResult,i);
	}
	,error: function(e) {
		if(this.currentResult == null) {
			this._openPreprocessResult();
		}
		this.currentResult.failed = true;
		this.currentResult.error = true;
		var message = e.message != null?Std.string(e) + " [" + Std.string(e.message) + "]":Std.string(e);
		var i = this.currentResult.status.length;
		this.currentResult.status.push(nanotest_NanoTestStatus.ERROR(message,haxe_CallStack.exceptionStack()));
		return new nanotest_NanoTestAssertResult(this.currentResult,i);
	}
	,_openPreprocessResult: function() {
		this.currentResult = { className : Type.getClassName(js_Boot.getClass(this)), method : null, async : true, testCase : this, error : false, failed : false, status : []};
	}
	,__class__: nanotest_NanoTestCase
};
var nanotest_NanoTestRunner = function(printError) {
	this.cases = [];
	if(printError == null) {
		this.printError = nanotest_NanoTestRunner.warning;
	} else {
		this.printError = printError;
	}
};
nanotest_NanoTestRunner.__name__ = ["nanotest","NanoTestRunner"];
nanotest_NanoTestRunner.error = function(message,position) {
};
nanotest_NanoTestRunner.warning = function(message,position) {
	haxe_unit_TestRunner.print(nanotest_NanoTestRunner.fileFromPosInfos(position) + ":" + position.lineNumber + ": " + message + "\n");
};
nanotest_NanoTestRunner.fileFromPosInfos = function(posInfos) {
	if(posInfos.className == null) {
		return posInfos.fileName;
	}
	if(posInfos.fileName == null) {
		return null;
	}
	var fsegs = new EReg("\\\\|/","").split(posInfos.fileName);
	if(fsegs.length > 1) {
		return posInfos.fileName;
	}
	var f = fsegs.pop();
	if(HxOverrides.substr(f,f.length - 3,null) != ".hx") {
		return posInfos.fileName;
	}
	var segs = posInfos.className.split(".");
	segs.pop();
	segs.push(f);
	return segs.join("/");
};
nanotest_NanoTestRunner.posInfosToPosition = function(posInfos) {
	return { file : posInfos.fileName, min : 0, max : 0};
};
nanotest_NanoTestRunner.prototype = {
	cases: null
	,printError: null
	,print: function(d) {
		haxe_unit_TestRunner.print(d);
	}
	,add: function(testCase) {
		this.cases.push(testCase);
	}
	,run: function() {
		var results = [];
		var _g = 0;
		var _g1 = this.cases;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var rs = c.run($bind(this,this.print));
			var _g2 = 0;
			while(_g2 < rs.length) {
				var r = rs[_g2];
				++_g2;
				results.push(r);
			}
		}
		var failures = 0;
		var _g3 = 0;
		while(_g3 < results.length) {
			var result = results[_g3];
			++_g3;
			if(result.failed) {
				this.print("* " + result.className + "::" + result.method + "()\n");
				var _g11 = 0;
				var _g21 = result.status;
				while(_g11 < _g21.length) {
					var status = _g21[_g11];
					++_g11;
					switch(status[1]) {
					case 0:
						break;
					case 1:
						this.printError("Test failed : " + status[2],status[3]);
						break;
					case 2:
						var callStack = status[3];
						var message = status[2];
						var first = true;
						var _g31 = 0;
						while(_g31 < callStack.length) {
							var item = callStack[_g31];
							++_g31;
							switch(item[1]) {
							case 0:
								this.print("Called from" + " : a C function\n");
								break;
							case 1:
								this.print("Called from" + " : module " + item[2] + "\n");
								break;
							case 2:
								var posInfos = { fileName : item[3], lineNumber : item[4], className : result.className, methodName : result.method};
								if(first) {
									this.printError("exception thrown : " + message,posInfos);
									first = false;
								} else {
									this.printError("Called from",posInfos);
								}
								break;
							case 3:
								this.print("Called from" + " : " + item[2] + "." + item[3] + "\n");
								break;
							case 4:
								this.print("Called from" + " : local function #" + item[2] + "\n");
								break;
							}
						}
						if(first) {
							this.printError("exception thrown : " + message,result.testCase.posInfos);
						}
						break;
					}
				}
				this.print("\n");
				++failures;
			}
		}
		if(failures == 0) {
			this.print("OK ");
		} else {
			this.print("FAILED ");
		}
		this.print(results.length + " tests, " + failures + " failed, " + (results.length - failures) + " success\n");
		return failures == 0;
	}
	,__class__: nanotest_NanoTestRunner
};
var nanotest_NanoTestStatus = { __ename__ : true, __constructs__ : ["SUCCESS","FAIL","ERROR"] };
nanotest_NanoTestStatus.SUCCESS = function(posInfos) { var $x = ["SUCCESS",0,posInfos]; $x.__enum__ = nanotest_NanoTestStatus; return $x; };
nanotest_NanoTestStatus.FAIL = function(message,posInfos) { var $x = ["FAIL",1,message,posInfos]; $x.__enum__ = nanotest_NanoTestStatus; return $x; };
nanotest_NanoTestStatus.ERROR = function(message,callStack) { var $x = ["ERROR",2,message,callStack]; $x.__enum__ = nanotest_NanoTestStatus; return $x; };
var test_Distribution = function() {
	this.precision = 1e-4;
	this.width = 1.0;
	this.center = 0.0;
};
test_Distribution.__name__ = ["test","Distribution"];
test_Distribution.prototype = {
	center: null
	,width: null
	,precision: null
	,__class__: test_Distribution
};
var test_MathTestCase = function(posInfos) {
	nanotest_NanoTestCase.call(this,posInfos);
};
test_MathTestCase.__name__ = ["test","MathTestCase"];
test_MathTestCase.__super__ = nanotest_NanoTestCase;
test_MathTestCase.prototype = $extend(nanotest_NanoTestCase.prototype,{
	randomFloat: function(center,width,precision) {
		if(precision == null) {
			precision = 1e-4;
		}
		if(width == null) {
			width = 1.0;
		}
		if(center == null) {
			center = 0.0;
		}
		return Math.floor(((Math.random() - 0.5) * width + center) / precision) * precision;
	}
	,randomInt: function() {
		return Math.floor(Math.random() * 10);
	}
	,randomArray: function(size,distribution) {
		var data = [];
		var distribution1 = distribution == null?new test_Distribution():distribution;
		var _g1 = 0;
		while(_g1 < size) {
			++_g1;
			data.push(this.randomFloat(distribution1.center,distribution1.width,distribution1.precision));
		}
		return data;
	}
	,assertApproxEquals: function(expected,actual,tolerance,p) {
		if(tolerance == null) {
			tolerance = 1e-6;
		}
		if(Math.abs(expected - actual) < tolerance) {
			this.success(p);
		} else {
			this.fail("expected " + expected + " +-" + tolerance + " but was " + actual,p);
		}
	}
	,randomVector2: function(precision) {
		if(precision == null) {
			precision = 1e-4;
		}
		var distribution = new test_Distribution();
		distribution.precision = precision;
		var rawData = this.randomArray(2,distribution);
		if(rawData.length != 2) {
			throw new js__$Boot_HaxeError("Invalid rawData.");
		}
		return new hxmath_math_Vector2Default(rawData[0],rawData[1]);
	}
	,randomVector3: function(precision) {
		if(precision == null) {
			precision = 1e-4;
		}
		var distribution = new test_Distribution();
		distribution.precision = precision;
		var rawData = this.randomArray(3,distribution);
		if(rawData.length != 3) {
			throw new js__$Boot_HaxeError("Invalid rawData.");
		}
		return new hxmath_math_Vector3Default(rawData[0],rawData[1],rawData[2]);
	}
	,randomVector4: function(precision) {
		if(precision == null) {
			precision = 1e-4;
		}
		var distribution = new test_Distribution();
		distribution.precision = precision;
		var rawData = this.randomArray(4,distribution);
		if(rawData.length != 4) {
			throw new js__$Boot_HaxeError("Invalid rawData.");
		}
		return new hxmath_math_Vector4Default(rawData[0],rawData[1],rawData[2],rawData[3]);
	}
	,randomMatrix2x2: function(precision) {
		if(precision == null) {
			precision = 1e-4;
		}
		var distribution = new test_Distribution();
		distribution.precision = precision;
		var rawData = this.randomArray(4,distribution);
		if(rawData.length != 4) {
			throw new js__$Boot_HaxeError("Invalid rawData.");
		}
		return new hxmath_math_Matrix2x2Default(rawData[0],rawData[1],rawData[2],rawData[3]);
	}
	,randomMatrix3x2: function(precision) {
		if(precision == null) {
			precision = 1e-4;
		}
		var distribution = new test_Distribution();
		distribution.precision = precision;
		var rawData = this.randomArray(6,distribution);
		if(rawData.length != 6) {
			throw new js__$Boot_HaxeError("Invalid rawData.");
		}
		return new hxmath_math_Matrix3x2Default(rawData[0],rawData[1],rawData[2],rawData[3],rawData[4],rawData[5]);
	}
	,randomMatrix3x3: function(precision) {
		if(precision == null) {
			precision = 1e-4;
		}
		var distribution = new test_Distribution();
		distribution.precision = precision;
		var rawData = this.randomArray(9,distribution);
		if(rawData.length != 9) {
			throw new js__$Boot_HaxeError("Invalid rawData.");
		}
		return new hxmath_math_Matrix3x3Default(rawData[0],rawData[1],rawData[2],rawData[3],rawData[4],rawData[5],rawData[6],rawData[7],rawData[8]);
	}
	,randomMatrix4x4: function(precision) {
		if(precision == null) {
			precision = 1e-4;
		}
		var distribution = new test_Distribution();
		distribution.precision = precision;
		var rawData = this.randomArray(16,distribution);
		if(rawData.length != 16) {
			throw new js__$Boot_HaxeError("Invalid rawData.");
		}
		return new hxmath_math_Matrix4x4Default(rawData[0],rawData[1],rawData[2],rawData[3],rawData[4],rawData[5],rawData[6],rawData[7],rawData[8],rawData[9],rawData[10],rawData[11],rawData[12],rawData[13],rawData[14],rawData[15]);
	}
	,randomQuaternion: function(precision) {
		if(precision == null) {
			precision = 1e-4;
		}
		var distribution = new test_Distribution();
		distribution.precision = precision;
		var rawData = this.randomArray(4,distribution);
		if(rawData.length != 4) {
			throw new js__$Boot_HaxeError("Invalid rawData.");
		}
		return new hxmath_math_QuaternionDefault(rawData[0],rawData[1],rawData[2],rawData[3]);
	}
	,randomIntVector2: function() {
		return hxmath_math__$IntVector2_IntVector2_$Impl_$._new(this.randomInt(),this.randomInt());
	}
	,randomShortVector2: function() {
		return hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(this.randomInt(),this.randomInt());
	}
	,randomFrame2: function(precision) {
		if(precision == null) {
			precision = 1e-4;
		}
		return hxmath_frames__$Frame2_Frame2_$Impl_$._new(this.randomVector2(precision),this.randomFloat(0.0,1.0,precision) * Math.PI);
	}
	,randomFrame3: function(precision) {
		if(precision == null) {
			precision = 1e-4;
		}
		var tmp = this.randomVector3(precision);
		var self = this.randomQuaternion(precision);
		var _g = 1.0 / Math.sqrt(self.s * self.s + self.x * self.x + self.y * self.y + self.z * self.z);
		var self1 = new hxmath_math_QuaternionDefault(self.s,self.x,self.y,self.z);
		self1.s *= _g;
		self1.x *= _g;
		self1.y *= _g;
		self1.z *= _g;
		return hxmath_frames__$Frame3_Frame3_$Impl_$._new(tmp,self1);
	}
	,__class__: test_MathTestCase
});
var test_TS1 = function() { };
test_TS1.__name__ = ["test","TS1"];
test_TS1.main = function() {
	var runner = new nanotest_NanoTestRunner();
	var _g = 0;
	while(_g < 3000) {
		++_g;
		runner.add(new test_TestStructures({ fileName : "TS1.hx", lineNumber : 21, className : "test.TS1", methodName : "main"}));
	}
	return runner.run();
};
var test_TestStress = function(posInfos) {
	this.a = 5;
	test_MathTestCase.call(this,posInfos);
};
test_TestStress.__name__ = ["test","TestStress"];
test_TestStress.__super__ = test_MathTestCase;
test_TestStress.prototype = $extend(test_MathTestCase.prototype,{
	a: null
	,testDotProduct: function() {
		console.log("--Vector2 dot product--");
		this.a = 100;
		var time1Start = this.a;
		var sum1 = 0.0;
		var _g1 = 0;
		while(_g1 < 100000) {
			var i = _g1++;
			var a = new hxmath_math_Vector2Default(i * 1.2,i * 4.3);
			var b = new hxmath_math_Vector2Default(i * 1.1,i * 0.8);
			sum1 += a.x * b.x + a.y * b.y;
		}
		var time1End = this.a;
		var time2Start = this.a;
		var sum2 = 0.0;
		var _g11 = 0;
		while(_g11 < 100000) {
			var i1 = _g11++;
			var a1 = new hxmath_math_Vector2Default(i1 * 1.2,i1 * 4.3);
			var b1 = new hxmath_math_Vector2Default(i1 * 1.1,i1 * 0.8);
			sum2 += a1.x * b1.x + a1.y * b1.y;
		}
		var time2End = this.a;
		this.assertEquals(sum1,sum2,{ fileName : "TestStress.hx", lineNumber : 43, className : "test.TestStress", methodName : "testDotProduct"});
		var time1 = time1End - time1Start;
		var time2 = time2End - time2Start;
		console.log("abstracts = " + time1);
		console.log("direct = " + time2);
		console.log("abstracts / direct = " + time1 / time2);
	}
	,testMatrixProduct: function() {
		console.log("--Matrix3x3 matrix product--");
		this.a = 100;
		var time1Start = this.a;
		var sum1 = 0.0;
		var _g1 = 0;
		while(_g1 < 100000) {
			var i = _g1++;
			var a = new hxmath_math_Matrix3x3Default(i * 1.2,i * 4.3,i * 1.2,i * 4.3,i * 1.2,i * 4.3,i * 1.2,i * 4.3,i * 1.2);
			var b = new hxmath_math_Matrix3x3Default(i * 1.1,i * 0.8,i * 1.1,i * 0.8,i * 1.1,i * 0.8,i * 1.1,i * 0.8,i * 1.1);
			var c = new hxmath_math_Matrix3x3Default(a.m00 * b.m00 + a.m10 * b.m01 + a.m20 * b.m02,a.m00 * b.m10 + a.m10 * b.m11 + a.m20 * b.m12,a.m00 * b.m20 + a.m10 * b.m21 + a.m20 * b.m22,a.m01 * b.m00 + a.m11 * b.m01 + a.m21 * b.m02,a.m01 * b.m10 + a.m11 * b.m11 + a.m21 * b.m12,a.m01 * b.m20 + a.m11 * b.m21 + a.m21 * b.m22,a.m02 * b.m00 + a.m12 * b.m01 + a.m22 * b.m02,a.m02 * b.m10 + a.m12 * b.m11 + a.m22 * b.m12,a.m02 * b.m20 + a.m12 * b.m21 + a.m22 * b.m22);
			sum1 += c.m00 + c.m10 + c.m20 + c.m01 + c.m11 + c.m21 + c.m02 + c.m12 + c.m22;
		}
		var time1End = this.a;
		var time2Start = this.a;
		var sum2 = 0.0;
		var _g11 = 0;
		while(_g11 < 100000) {
			var i1 = _g11++;
			var a1 = new hxmath_math_Matrix3x3Default(i1 * 1.2,i1 * 4.3,i1 * 1.2,i1 * 4.3,i1 * 1.2,i1 * 4.3,i1 * 1.2,i1 * 4.3,i1 * 1.2);
			var b1 = new hxmath_math_Matrix3x3Default(i1 * 1.1,i1 * 0.8,i1 * 1.1,i1 * 0.8,i1 * 1.1,i1 * 0.8,i1 * 1.1,i1 * 0.8,i1 * 1.1);
			var c1 = new hxmath_math_Matrix3x3Default(a1.m00 * b1.m00 + a1.m10 * b1.m01 + a1.m20 * b1.m02,a1.m00 * b1.m10 + a1.m10 * b1.m11 + a1.m20 * b1.m12,a1.m00 * b1.m20 + a1.m10 * b1.m21 + a1.m20 * b1.m22,a1.m01 * b1.m00 + a1.m11 * b1.m01 + a1.m21 * b1.m02,a1.m01 * b1.m10 + a1.m11 * b1.m11 + a1.m21 * b1.m12,a1.m01 * b1.m20 + a1.m11 * b1.m21 + a1.m21 * b1.m22,a1.m02 * b1.m00 + a1.m12 * b1.m01 + a1.m22 * b1.m02,a1.m02 * b1.m10 + a1.m12 * b1.m11 + a1.m22 * b1.m12,a1.m02 * b1.m20 + a1.m12 * b1.m21 + a1.m22 * b1.m22);
			sum2 += c1.m00 + c1.m10 + c1.m20 + c1.m01 + c1.m11 + c1.m21 + c1.m02 + c1.m12 + c1.m22;
		}
		var time2End = this.a;
		this.assertEquals(sum1,sum2,{ fileName : "TestStress.hx", lineNumber : 116, className : "test.TestStress", methodName : "testMatrixProduct"});
		var time1 = time1End - time1Start;
		var time2 = time2End - time2Start;
		console.log("abstracts = " + time1);
		console.log("direct = " + time2);
		console.log("abstracts / direct = " + time1 / time2);
	}
	,testMatrix3x2Constructor: function() {
		console.log("--Matrix3x2 constructor--");
		this.a = 100;
		var abstractTimeStart = this.a;
		var sum1 = 0.0;
		var _g1 = 0;
		while(_g1 < 100000) {
			var i = _g1++;
			var m = new hxmath_math_Matrix3x2Default(i * 1.2,i * 4.3,i * 1.2,i * 4.3,i * 1.2,i * 4.3);
			sum1 += m.a + m.b + m.c + m.d + m.tx + m.ty;
		}
		var abstractTimeEnd = this.a;
		var classTimeStart = this.a;
		var sum2 = 0.0;
		var _g11 = 0;
		while(_g11 < 100000) {
			var i1 = _g11++;
			var m1 = new hxmath_math_Matrix3x2Default(i1 * 1.2,i1 * 4.3,i1 * 1.2,i1 * 4.3,i1 * 1.2,i1 * 4.3);
			sum2 += m1.a + m1.b + m1.c + m1.d + m1.tx + m1.ty;
		}
		var classTimeEnd = this.a;
		this.assertEquals(sum1,sum2,{ fileName : "TestStress.hx", lineNumber : 160, className : "test.TestStress", methodName : "testMatrix3x2Constructor"});
		var abstractTime = abstractTimeEnd - abstractTimeStart;
		var classTime = classTimeEnd - classTimeStart;
		console.log("abstracts = " + abstractTime);
		console.log("direct = " + classTime);
		console.log("abstracts / direct = " + abstractTime / classTime);
	}
	,testMatrix4x4Constructor: function() {
		console.log("--Matrix4x4 constructor--");
		this.a = 100;
		var abstractTimeStart = this.a;
		var sum1 = 0.0;
		var _g1 = 0;
		while(_g1 < 100000) {
			var i = _g1++;
			var a = new hxmath_math_Matrix4x4Default(i * 1.2,i * 4.3,i * 1.2,i * 4.3,i * 1.2,i * 4.3,i * 1.2,i * 4.3,i * 1.2,i * 4.3,i * 1.2,i * 4.3,i * 1.2,i * 4.3,i * 1.2,i * 4.3);
			sum1 += a.m00 + a.m10 + a.m20 + a.m30 + a.m01 + a.m11 + a.m21 + a.m31 + a.m02 + a.m12 + a.m22 + a.m32 + a.m03 + a.m13 + a.m23 + a.m33;
		}
		var abstractTimeEnd = this.a;
		var classTimeStart = this.a;
		var sum2 = 0.0;
		var _g11 = 0;
		while(_g11 < 100000) {
			var i1 = _g11++;
			var a1 = new hxmath_math_Matrix4x4Default(i1 * 1.2,i1 * 4.3,i1 * 1.2,i1 * 4.3,i1 * 1.2,i1 * 4.3,i1 * 1.2,i1 * 4.3,i1 * 1.2,i1 * 4.3,i1 * 1.2,i1 * 4.3,i1 * 1.2,i1 * 4.3,i1 * 1.2,i1 * 4.3);
			sum2 += a1.m00 + a1.m10 + a1.m20 + a1.m30 + a1.m01 + a1.m11 + a1.m21 + a1.m31 + a1.m02 + a1.m12 + a1.m22 + a1.m32 + a1.m03 + a1.m13 + a1.m23 + a1.m33;
		}
		var classTimeEnd = this.a;
		this.assertEquals(sum1,sum2,{ fileName : "TestStress.hx", lineNumber : 216, className : "test.TestStress", methodName : "testMatrix4x4Constructor"});
		var abstractTime = abstractTimeEnd - abstractTimeStart;
		var classTime = classTimeEnd - classTimeStart;
		console.log("abstracts = " + abstractTime);
		console.log("direct = " + classTime);
		console.log("abstracts / direct = " + abstractTime / classTime);
	}
	,__class__: test_TestStress
});
var test_TestStructures = function(posInfos) {
	test_MathTestCase.call(this,posInfos);
};
test_TestStructures.__name__ = ["test","TestStructures"];
test_TestStructures.__super__ = test_MathTestCase;
test_TestStructures.prototype = $extend(test_MathTestCase.prototype,{
	testEquals: function() {
		var m = new hxmath_math_Matrix2x2Default(1.0,0.0,0.0,1.0);
		var n = new hxmath_math_Matrix2x2Default(1.0,0.0,0.0,1.0);
		this.assertTrue(m == null && n == null || m != null && n != null && m.a == n.a && m.b == n.b && m.c == n.c && m.d == n.d,{ fileName : "TestStructures.hx", lineNumber : 22, className : "test.TestStructures", methodName : "testEquals"});
		this.assertTrue(new hxmath_math_Matrix2x2Default(1.0,0.0,0.0,1.0) != new hxmath_math_Matrix2x2Default(0.0,0.0,0.0,0.0),{ fileName : "TestStructures.hx", lineNumber : 23, className : "test.TestStructures", methodName : "testEquals"});
		var m1 = new hxmath_math_Matrix3x2Default(1.0,0.0,0.0,1.0,0.0,0.0);
		var n1 = new hxmath_math_Matrix3x2Default(1.0,0.0,0.0,1.0,0.0,0.0);
		this.assertTrue(m1 == null && n1 == null || m1 != null && n1 != null && m1.a == n1.a && m1.b == n1.b && m1.c == n1.c && m1.d == n1.d && m1.tx == n1.tx && m1.ty == n1.ty,{ fileName : "TestStructures.hx", lineNumber : 24, className : "test.TestStructures", methodName : "testEquals"});
		this.assertTrue(new hxmath_math_Matrix3x2Default(1.0,0.0,0.0,1.0,0.0,0.0) != new hxmath_math_Matrix3x2Default(0.0,0.0,0.0,0.0,0.0,0.0),{ fileName : "TestStructures.hx", lineNumber : 25, className : "test.TestStructures", methodName : "testEquals"});
		var a = new hxmath_math_Matrix3x3Default(1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0);
		var b = new hxmath_math_Matrix3x3Default(1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0);
		this.assertTrue(a == null && b == null || a != null && b != null && a.m00 == b.m00 && a.m10 == b.m10 && a.m20 == b.m20 && a.m01 == b.m01 && a.m11 == b.m11 && a.m21 == b.m21 && a.m02 == b.m02 && a.m12 == b.m12 && a.m22 == b.m22,{ fileName : "TestStructures.hx", lineNumber : 26, className : "test.TestStructures", methodName : "testEquals"});
		this.assertTrue(new hxmath_math_Matrix3x3Default(1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0) != new hxmath_math_Matrix3x3Default(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0),{ fileName : "TestStructures.hx", lineNumber : 27, className : "test.TestStructures", methodName : "testEquals"});
		var a1 = new hxmath_math_Matrix4x4Default(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
		var b1 = new hxmath_math_Matrix4x4Default(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
		this.assertTrue(a1 == null && b1 == null || a1 != null && b1 != null && a1.m00 == b1.m00 && a1.m10 == b1.m10 && a1.m20 == b1.m20 && a1.m30 == b1.m30 && a1.m01 == b1.m01 && a1.m11 == b1.m11 && a1.m21 == b1.m21 && a1.m31 == b1.m31 && a1.m02 == b1.m02 && a1.m12 == b1.m12 && a1.m22 == b1.m22 && a1.m32 == b1.m32 && a1.m03 == b1.m03 && a1.m13 == b1.m13 && a1.m23 == b1.m23 && a1.m33 == b1.m33,{ fileName : "TestStructures.hx", lineNumber : 28, className : "test.TestStructures", methodName : "testEquals"});
		this.assertTrue(new hxmath_math_Matrix4x4Default(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0) != new hxmath_math_Matrix4x4Default(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0),{ fileName : "TestStructures.hx", lineNumber : 29, className : "test.TestStructures", methodName : "testEquals"});
		var a2 = new hxmath_math_Vector2Default(0.0,1.0);
		var b2 = new hxmath_math_Vector2Default(0.0,1.0);
		this.assertTrue(a2 == null && b2 == null || a2 != null && b2 != null && a2.x == b2.x && a2.y == b2.y,{ fileName : "TestStructures.hx", lineNumber : 31, className : "test.TestStructures", methodName : "testEquals"});
		this.assertTrue(new hxmath_math_Vector2Default(0.0,1.0) != new hxmath_math_Vector2Default(1.0,0.0),{ fileName : "TestStructures.hx", lineNumber : 32, className : "test.TestStructures", methodName : "testEquals"});
		var a3 = new hxmath_math_Vector3Default(0.0,0.0,1.0);
		var b3 = new hxmath_math_Vector3Default(0.0,0.0,1.0);
		this.assertTrue(a3 == null && b3 == null || a3 != null && b3 != null && a3.x == b3.x && a3.y == b3.y && a3.z == b3.z,{ fileName : "TestStructures.hx", lineNumber : 33, className : "test.TestStructures", methodName : "testEquals"});
		this.assertTrue(new hxmath_math_Vector3Default(0.0,0.0,1.0) != new hxmath_math_Vector3Default(1.0,0.0,0.0),{ fileName : "TestStructures.hx", lineNumber : 34, className : "test.TestStructures", methodName : "testEquals"});
		var a4 = new hxmath_math_Vector4Default(0.0,0.0,1.0,0.0);
		var b4 = new hxmath_math_Vector4Default(0.0,0.0,1.0,0.0);
		this.assertTrue(a4 == null && b4 == null || a4 != null && b4 != null && a4.x == b4.x && a4.y == b4.y && a4.z == b4.z && a4.w == b4.w,{ fileName : "TestStructures.hx", lineNumber : 35, className : "test.TestStructures", methodName : "testEquals"});
		this.assertTrue(new hxmath_math_Vector4Default(0.0,0.0,1.0,0.0) != new hxmath_math_Vector4Default(1.0,0.0,0.0,0.0),{ fileName : "TestStructures.hx", lineNumber : 36, className : "test.TestStructures", methodName : "testEquals"});
		var a5 = new hxmath_math_QuaternionDefault(1,0,0,0);
		var b5 = new hxmath_math_QuaternionDefault(1,0,0,0);
		this.assertTrue(a5 == null && b5 == null || a5 != null && b5 != null && a5.s == b5.s && a5.x == b5.x && a5.y == b5.y && a5.z == b5.z,{ fileName : "TestStructures.hx", lineNumber : 38, className : "test.TestStructures", methodName : "testEquals"});
		this.assertTrue(new hxmath_math_QuaternionDefault(1,0,0,0) != new hxmath_math_QuaternionDefault(0,0,0,0),{ fileName : "TestStructures.hx", lineNumber : 39, className : "test.TestStructures", methodName : "testEquals"});
		var a6 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(0,1);
		var b6 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(0,1);
		this.assertTrue(a6 == null && b6 == null || a6 != null && b6 != null && a6.x == b6.x && a6.y == b6.y,{ fileName : "TestStructures.hx", lineNumber : 41, className : "test.TestStructures", methodName : "testEquals"});
		this.assertTrue(hxmath_math__$IntVector2_IntVector2_$Impl_$._new(0,1) != hxmath_math__$IntVector2_IntVector2_$Impl_$._new(1,0),{ fileName : "TestStructures.hx", lineNumber : 42, className : "test.TestStructures", methodName : "testEquals"});
		this.assertTrue(hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(0,1) == hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(0,1),{ fileName : "TestStructures.hx", lineNumber : 44, className : "test.TestStructures", methodName : "testEquals"});
		this.assertTrue(hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(0,1) != hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(1,0),{ fileName : "TestStructures.hx", lineNumber : 45, className : "test.TestStructures", methodName : "testEquals"});
	}
	,testClone: function() {
		var self = new hxmath_math_Matrix2x2Default(1.0,0.0,0.0,1.0);
		var m = new hxmath_math_Matrix2x2Default(self.a,self.b,self.c,self.d);
		var n = new hxmath_math_Matrix2x2Default(1.0,0.0,0.0,1.0);
		this.assertTrue(m == null && n == null || m != null && n != null && m.a == n.a && m.b == n.b && m.c == n.c && m.d == n.d,{ fileName : "TestStructures.hx", lineNumber : 50, className : "test.TestStructures", methodName : "testClone"});
		var self1 = new hxmath_math_Matrix3x2Default(1.0,0.0,0.0,1.0,0.0,0.0);
		var m1 = new hxmath_math_Matrix3x2Default(self1.a,self1.b,self1.c,self1.d,self1.tx,self1.ty);
		var n1 = new hxmath_math_Matrix3x2Default(1.0,0.0,0.0,1.0,0.0,0.0);
		this.assertTrue(m1 == null && n1 == null || m1 != null && n1 != null && m1.a == n1.a && m1.b == n1.b && m1.c == n1.c && m1.d == n1.d && m1.tx == n1.tx && m1.ty == n1.ty,{ fileName : "TestStructures.hx", lineNumber : 51, className : "test.TestStructures", methodName : "testClone"});
		var self2 = new hxmath_math_Matrix3x3Default(1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0);
		var a = new hxmath_math_Matrix3x3Default(self2.m00,self2.m10,self2.m20,self2.m01,self2.m11,self2.m21,self2.m02,self2.m12,self2.m22);
		var b = new hxmath_math_Matrix3x3Default(1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0);
		this.assertTrue(a == null && b == null || a != null && b != null && a.m00 == b.m00 && a.m10 == b.m10 && a.m20 == b.m20 && a.m01 == b.m01 && a.m11 == b.m11 && a.m21 == b.m21 && a.m02 == b.m02 && a.m12 == b.m12 && a.m22 == b.m22,{ fileName : "TestStructures.hx", lineNumber : 52, className : "test.TestStructures", methodName : "testClone"});
		var self3 = new hxmath_math_Matrix4x4Default(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
		var a1 = new hxmath_math_Matrix4x4Default(self3.m00,self3.m10,self3.m20,self3.m30,self3.m01,self3.m11,self3.m21,self3.m31,self3.m02,self3.m12,self3.m22,self3.m32,self3.m03,self3.m13,self3.m23,self3.m33);
		var b1 = new hxmath_math_Matrix4x4Default(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
		this.assertTrue(a1 == null && b1 == null || a1 != null && b1 != null && a1.m00 == b1.m00 && a1.m10 == b1.m10 && a1.m20 == b1.m20 && a1.m30 == b1.m30 && a1.m01 == b1.m01 && a1.m11 == b1.m11 && a1.m21 == b1.m21 && a1.m31 == b1.m31 && a1.m02 == b1.m02 && a1.m12 == b1.m12 && a1.m22 == b1.m22 && a1.m32 == b1.m32 && a1.m03 == b1.m03 && a1.m13 == b1.m13 && a1.m23 == b1.m23 && a1.m33 == b1.m33,{ fileName : "TestStructures.hx", lineNumber : 53, className : "test.TestStructures", methodName : "testClone"});
		var self4 = new hxmath_math_Vector2Default(0.0,0.0);
		var a2 = new hxmath_math_Vector2Default(self4.x,self4.y);
		var b2 = new hxmath_math_Vector2Default(0.0,0.0);
		this.assertTrue(a2 == null && b2 == null || a2 != null && b2 != null && a2.x == b2.x && a2.y == b2.y,{ fileName : "TestStructures.hx", lineNumber : 55, className : "test.TestStructures", methodName : "testClone"});
		var self5 = new hxmath_math_Vector3Default(0.0,0.0,0.0);
		var a3 = new hxmath_math_Vector3Default(self5.x,self5.y,self5.z);
		var b3 = new hxmath_math_Vector3Default(0.0,0.0,0.0);
		this.assertTrue(a3 == null && b3 == null || a3 != null && b3 != null && a3.x == b3.x && a3.y == b3.y && a3.z == b3.z,{ fileName : "TestStructures.hx", lineNumber : 56, className : "test.TestStructures", methodName : "testClone"});
		var self6 = new hxmath_math_Vector4Default(0.0,0.0,0.0,0.0);
		var a4 = new hxmath_math_Vector4Default(self6.x,self6.y,self6.z,self6.w);
		var b4 = new hxmath_math_Vector4Default(0.0,0.0,0.0,0.0);
		this.assertTrue(a4 == null && b4 == null || a4 != null && b4 != null && a4.x == b4.x && a4.y == b4.y && a4.z == b4.z && a4.w == b4.w,{ fileName : "TestStructures.hx", lineNumber : 57, className : "test.TestStructures", methodName : "testClone"});
		var self7 = new hxmath_math_QuaternionDefault(1,0,0,0);
		var a5 = new hxmath_math_QuaternionDefault(self7.s,self7.x,self7.y,self7.z);
		var b5 = new hxmath_math_QuaternionDefault(1,0,0,0);
		this.assertTrue(a5 == null && b5 == null || a5 != null && b5 != null && a5.s == b5.s && a5.x == b5.x && a5.y == b5.y && a5.z == b5.z,{ fileName : "TestStructures.hx", lineNumber : 59, className : "test.TestStructures", methodName : "testClone"});
		var self8 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(0,0);
		var a6 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(self8.x,self8.y);
		var b6 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(0,0);
		this.assertTrue(a6 == null && b6 == null || a6 != null && b6 != null && a6.x == b6.x && a6.y == b6.y,{ fileName : "TestStructures.hx", lineNumber : 61, className : "test.TestStructures", methodName : "testClone"});
	}
	,testAddSub: function() {
		var mat22 = new hxmath_math_Matrix2x2Default(0.0,0.0,0.0,0.0);
		var n = new hxmath_math_Matrix2x2Default(1.0,0.0,0.0,1.0);
		var self = mat22;
		var self1 = new hxmath_math_Matrix2x2Default(self.a,self.b,self.c,self.d);
		self1.a += n.a;
		self1.b += n.b;
		self1.c += n.c;
		self1.d += n.d;
		var n1 = new hxmath_math_Matrix2x2Default(1.0,0.0,0.0,1.0);
		this.assertTrue(self1 == null && n1 == null || self1 != null && n1 != null && self1.a == n1.a && self1.b == n1.b && self1.c == n1.c && self1.d == n1.d,{ fileName : "TestStructures.hx", lineNumber : 67, className : "test.TestStructures", methodName : "testAddSub"});
		var n2 = new hxmath_math_Matrix2x2Default(1.0,0.0,0.0,1.0);
		var self2 = mat22;
		var self3 = new hxmath_math_Matrix2x2Default(self2.a,self2.b,self2.c,self2.d);
		self3.a += n2.a;
		self3.b += n2.b;
		self3.c += n2.c;
		self3.d += n2.d;
		mat22 = self3;
		var n3 = new hxmath_math_Matrix2x2Default(1.0,0.0,0.0,1.0);
		this.assertTrue(self3 == null && n3 == null || self3 != null && n3 != null && self3.a == n3.a && self3.b == n3.b && self3.c == n3.c && self3.d == n3.d,{ fileName : "TestStructures.hx", lineNumber : 69, className : "test.TestStructures", methodName : "testAddSub"});
		var n4 = new hxmath_math_Matrix2x2Default(1.0,0.0,0.0,1.0);
		var self4 = self3;
		var self5 = new hxmath_math_Matrix2x2Default(self4.a,self4.b,self4.c,self4.d);
		self5.a -= n4.a;
		self5.b -= n4.b;
		self5.c -= n4.c;
		self5.d -= n4.d;
		var n5 = new hxmath_math_Matrix2x2Default(0.0,0.0,0.0,0.0);
		this.assertTrue(self5 == null && n5 == null || self5 != null && n5 != null && self5.a == n5.a && self5.b == n5.b && self5.c == n5.c && self5.d == n5.d,{ fileName : "TestStructures.hx", lineNumber : 70, className : "test.TestStructures", methodName : "testAddSub"});
		var n6 = new hxmath_math_Matrix2x2Default(1.0,0.0,0.0,1.0);
		var self6 = self3;
		var self7 = new hxmath_math_Matrix2x2Default(self6.a,self6.b,self6.c,self6.d);
		self7.a -= n6.a;
		self7.b -= n6.b;
		self7.c -= n6.c;
		self7.d -= n6.d;
		mat22 = self7;
		var n7 = new hxmath_math_Matrix2x2Default(0.0,0.0,0.0,0.0);
		this.assertTrue(self7 == null && n7 == null || self7 != null && n7 != null && self7.a == n7.a && self7.b == n7.b && self7.c == n7.c && self7.d == n7.d,{ fileName : "TestStructures.hx", lineNumber : 72, className : "test.TestStructures", methodName : "testAddSub"});
		var mat32 = new hxmath_math_Matrix3x2Default(0.0,0.0,0.0,0.0,0.0,0.0);
		var n8 = new hxmath_math_Matrix3x2Default(1.0,0.0,0.0,1.0,0.0,0.0);
		var self8 = mat32;
		var self9 = new hxmath_math_Matrix3x2Default(self8.a,self8.b,self8.c,self8.d,self8.tx,self8.ty);
		self9.a += n8.a;
		self9.b += n8.b;
		self9.c += n8.c;
		self9.d += n8.d;
		self9.tx += n8.tx;
		self9.ty += n8.ty;
		var n9 = new hxmath_math_Matrix3x2Default(1.0,0.0,0.0,1.0,0.0,0.0);
		this.assertTrue(self9 == null && n9 == null || self9 != null && n9 != null && self9.a == n9.a && self9.b == n9.b && self9.c == n9.c && self9.d == n9.d && self9.tx == n9.tx && self9.ty == n9.ty,{ fileName : "TestStructures.hx", lineNumber : 75, className : "test.TestStructures", methodName : "testAddSub"});
		var n10 = new hxmath_math_Matrix3x2Default(1.0,0.0,0.0,1.0,0.0,0.0);
		var self10 = mat32;
		var self11 = new hxmath_math_Matrix3x2Default(self10.a,self10.b,self10.c,self10.d,self10.tx,self10.ty);
		self11.a += n10.a;
		self11.b += n10.b;
		self11.c += n10.c;
		self11.d += n10.d;
		self11.tx += n10.tx;
		self11.ty += n10.ty;
		mat32 = self11;
		var n11 = new hxmath_math_Matrix3x2Default(1.0,0.0,0.0,1.0,0.0,0.0);
		this.assertTrue(self11 == null && n11 == null || self11 != null && n11 != null && self11.a == n11.a && self11.b == n11.b && self11.c == n11.c && self11.d == n11.d && self11.tx == n11.tx && self11.ty == n11.ty,{ fileName : "TestStructures.hx", lineNumber : 77, className : "test.TestStructures", methodName : "testAddSub"});
		var n12 = new hxmath_math_Matrix3x2Default(1.0,0.0,0.0,1.0,0.0,0.0);
		var self12 = self11;
		var self13 = new hxmath_math_Matrix3x2Default(self12.a,self12.b,self12.c,self12.d,self12.tx,self12.ty);
		self13.a -= n12.a;
		self13.b -= n12.b;
		self13.c -= n12.c;
		self13.d -= n12.d;
		self13.tx -= n12.tx;
		self13.ty -= n12.ty;
		var n13 = new hxmath_math_Matrix3x2Default(0.0,0.0,0.0,0.0,0.0,0.0);
		this.assertTrue(self13 == null && n13 == null || self13 != null && n13 != null && self13.a == n13.a && self13.b == n13.b && self13.c == n13.c && self13.d == n13.d && self13.tx == n13.tx && self13.ty == n13.ty,{ fileName : "TestStructures.hx", lineNumber : 78, className : "test.TestStructures", methodName : "testAddSub"});
		var n14 = new hxmath_math_Matrix3x2Default(1.0,0.0,0.0,1.0,0.0,0.0);
		var self14 = self11;
		var self15 = new hxmath_math_Matrix3x2Default(self14.a,self14.b,self14.c,self14.d,self14.tx,self14.ty);
		self15.a -= n14.a;
		self15.b -= n14.b;
		self15.c -= n14.c;
		self15.d -= n14.d;
		self15.tx -= n14.tx;
		self15.ty -= n14.ty;
		mat32 = self15;
		var n15 = new hxmath_math_Matrix3x2Default(0.0,0.0,0.0,0.0,0.0,0.0);
		this.assertTrue(self15 == null && n15 == null || self15 != null && n15 != null && self15.a == n15.a && self15.b == n15.b && self15.c == n15.c && self15.d == n15.d && self15.tx == n15.tx && self15.ty == n15.ty,{ fileName : "TestStructures.hx", lineNumber : 80, className : "test.TestStructures", methodName : "testAddSub"});
		var mat33 = new hxmath_math_Matrix3x3Default(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);
		var b = new hxmath_math_Matrix3x3Default(1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0);
		var self16 = mat33;
		var self17 = new hxmath_math_Matrix3x3Default(self16.m00,self16.m10,self16.m20,self16.m01,self16.m11,self16.m21,self16.m02,self16.m12,self16.m22);
		self17.m00 += b.m00;
		self17.m10 += b.m10;
		self17.m20 += b.m20;
		self17.m01 += b.m01;
		self17.m11 += b.m11;
		self17.m21 += b.m21;
		self17.m02 += b.m02;
		self17.m12 += b.m12;
		self17.m22 += b.m22;
		var b1 = new hxmath_math_Matrix3x3Default(1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0);
		this.assertTrue(self17 == null && b1 == null || self17 != null && b1 != null && self17.m00 == b1.m00 && self17.m10 == b1.m10 && self17.m20 == b1.m20 && self17.m01 == b1.m01 && self17.m11 == b1.m11 && self17.m21 == b1.m21 && self17.m02 == b1.m02 && self17.m12 == b1.m12 && self17.m22 == b1.m22,{ fileName : "TestStructures.hx", lineNumber : 83, className : "test.TestStructures", methodName : "testAddSub"});
		var b2 = new hxmath_math_Matrix3x3Default(1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0);
		var self18 = mat33;
		var self19 = new hxmath_math_Matrix3x3Default(self18.m00,self18.m10,self18.m20,self18.m01,self18.m11,self18.m21,self18.m02,self18.m12,self18.m22);
		self19.m00 += b2.m00;
		self19.m10 += b2.m10;
		self19.m20 += b2.m20;
		self19.m01 += b2.m01;
		self19.m11 += b2.m11;
		self19.m21 += b2.m21;
		self19.m02 += b2.m02;
		self19.m12 += b2.m12;
		self19.m22 += b2.m22;
		mat33 = self19;
		var b3 = new hxmath_math_Matrix3x3Default(1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0);
		this.assertTrue(self19 == null && b3 == null || self19 != null && b3 != null && self19.m00 == b3.m00 && self19.m10 == b3.m10 && self19.m20 == b3.m20 && self19.m01 == b3.m01 && self19.m11 == b3.m11 && self19.m21 == b3.m21 && self19.m02 == b3.m02 && self19.m12 == b3.m12 && self19.m22 == b3.m22,{ fileName : "TestStructures.hx", lineNumber : 85, className : "test.TestStructures", methodName : "testAddSub"});
		var b4 = new hxmath_math_Matrix3x3Default(1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0);
		var self20 = self19;
		var self21 = new hxmath_math_Matrix3x3Default(self20.m00,self20.m10,self20.m20,self20.m01,self20.m11,self20.m21,self20.m02,self20.m12,self20.m22);
		self21.m00 -= b4.m00;
		self21.m10 -= b4.m10;
		self21.m20 -= b4.m20;
		self21.m01 -= b4.m01;
		self21.m11 -= b4.m11;
		self21.m21 -= b4.m21;
		self21.m02 -= b4.m02;
		self21.m12 -= b4.m12;
		self21.m22 -= b4.m22;
		var b5 = new hxmath_math_Matrix3x3Default(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);
		this.assertTrue(self21 == null && b5 == null || self21 != null && b5 != null && self21.m00 == b5.m00 && self21.m10 == b5.m10 && self21.m20 == b5.m20 && self21.m01 == b5.m01 && self21.m11 == b5.m11 && self21.m21 == b5.m21 && self21.m02 == b5.m02 && self21.m12 == b5.m12 && self21.m22 == b5.m22,{ fileName : "TestStructures.hx", lineNumber : 86, className : "test.TestStructures", methodName : "testAddSub"});
		var b6 = new hxmath_math_Matrix3x3Default(1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0);
		var self22 = self19;
		var self23 = new hxmath_math_Matrix3x3Default(self22.m00,self22.m10,self22.m20,self22.m01,self22.m11,self22.m21,self22.m02,self22.m12,self22.m22);
		self23.m00 -= b6.m00;
		self23.m10 -= b6.m10;
		self23.m20 -= b6.m20;
		self23.m01 -= b6.m01;
		self23.m11 -= b6.m11;
		self23.m21 -= b6.m21;
		self23.m02 -= b6.m02;
		self23.m12 -= b6.m12;
		self23.m22 -= b6.m22;
		mat33 = self23;
		var b7 = new hxmath_math_Matrix3x3Default(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);
		this.assertTrue(self23 == null && b7 == null || self23 != null && b7 != null && self23.m00 == b7.m00 && self23.m10 == b7.m10 && self23.m20 == b7.m20 && self23.m01 == b7.m01 && self23.m11 == b7.m11 && self23.m21 == b7.m21 && self23.m02 == b7.m02 && self23.m12 == b7.m12 && self23.m22 == b7.m22,{ fileName : "TestStructures.hx", lineNumber : 88, className : "test.TestStructures", methodName : "testAddSub"});
		var mat44 = new hxmath_math_Matrix4x4Default(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);
		var b8 = new hxmath_math_Matrix4x4Default(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
		var self24 = mat44;
		var self25 = new hxmath_math_Matrix4x4Default(self24.m00,self24.m10,self24.m20,self24.m30,self24.m01,self24.m11,self24.m21,self24.m31,self24.m02,self24.m12,self24.m22,self24.m32,self24.m03,self24.m13,self24.m23,self24.m33);
		self25.m00 += b8.m00;
		self25.m10 += b8.m10;
		self25.m20 += b8.m20;
		self25.m30 += b8.m30;
		self25.m01 += b8.m01;
		self25.m11 += b8.m11;
		self25.m21 += b8.m21;
		self25.m31 += b8.m31;
		self25.m02 += b8.m02;
		self25.m12 += b8.m12;
		self25.m22 += b8.m22;
		self25.m32 += b8.m32;
		self25.m03 += b8.m03;
		self25.m13 += b8.m13;
		self25.m23 += b8.m23;
		self25.m33 += b8.m33;
		var b9 = new hxmath_math_Matrix4x4Default(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
		this.assertTrue(self25 == null && b9 == null || self25 != null && b9 != null && self25.m00 == b9.m00 && self25.m10 == b9.m10 && self25.m20 == b9.m20 && self25.m30 == b9.m30 && self25.m01 == b9.m01 && self25.m11 == b9.m11 && self25.m21 == b9.m21 && self25.m31 == b9.m31 && self25.m02 == b9.m02 && self25.m12 == b9.m12 && self25.m22 == b9.m22 && self25.m32 == b9.m32 && self25.m03 == b9.m03 && self25.m13 == b9.m13 && self25.m23 == b9.m23 && self25.m33 == b9.m33,{ fileName : "TestStructures.hx", lineNumber : 91, className : "test.TestStructures", methodName : "testAddSub"});
		var b10 = new hxmath_math_Matrix4x4Default(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
		var self26 = mat44;
		var self27 = new hxmath_math_Matrix4x4Default(self26.m00,self26.m10,self26.m20,self26.m30,self26.m01,self26.m11,self26.m21,self26.m31,self26.m02,self26.m12,self26.m22,self26.m32,self26.m03,self26.m13,self26.m23,self26.m33);
		self27.m00 += b10.m00;
		self27.m10 += b10.m10;
		self27.m20 += b10.m20;
		self27.m30 += b10.m30;
		self27.m01 += b10.m01;
		self27.m11 += b10.m11;
		self27.m21 += b10.m21;
		self27.m31 += b10.m31;
		self27.m02 += b10.m02;
		self27.m12 += b10.m12;
		self27.m22 += b10.m22;
		self27.m32 += b10.m32;
		self27.m03 += b10.m03;
		self27.m13 += b10.m13;
		self27.m23 += b10.m23;
		self27.m33 += b10.m33;
		mat44 = self27;
		var b11 = new hxmath_math_Matrix4x4Default(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
		this.assertTrue(self27 == null && b11 == null || self27 != null && b11 != null && self27.m00 == b11.m00 && self27.m10 == b11.m10 && self27.m20 == b11.m20 && self27.m30 == b11.m30 && self27.m01 == b11.m01 && self27.m11 == b11.m11 && self27.m21 == b11.m21 && self27.m31 == b11.m31 && self27.m02 == b11.m02 && self27.m12 == b11.m12 && self27.m22 == b11.m22 && self27.m32 == b11.m32 && self27.m03 == b11.m03 && self27.m13 == b11.m13 && self27.m23 == b11.m23 && self27.m33 == b11.m33,{ fileName : "TestStructures.hx", lineNumber : 93, className : "test.TestStructures", methodName : "testAddSub"});
		var b12 = new hxmath_math_Matrix4x4Default(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
		var self28 = self27;
		var self29 = new hxmath_math_Matrix4x4Default(self28.m00,self28.m10,self28.m20,self28.m30,self28.m01,self28.m11,self28.m21,self28.m31,self28.m02,self28.m12,self28.m22,self28.m32,self28.m03,self28.m13,self28.m23,self28.m33);
		self29.m00 -= b12.m00;
		self29.m10 -= b12.m10;
		self29.m20 -= b12.m20;
		self29.m30 -= b12.m30;
		self29.m01 -= b12.m01;
		self29.m11 -= b12.m11;
		self29.m21 -= b12.m21;
		self29.m31 -= b12.m31;
		self29.m02 -= b12.m02;
		self29.m12 -= b12.m12;
		self29.m22 -= b12.m22;
		self29.m32 -= b12.m32;
		self29.m03 -= b12.m03;
		self29.m13 -= b12.m13;
		self29.m23 -= b12.m23;
		self29.m33 -= b12.m33;
		var b13 = new hxmath_math_Matrix4x4Default(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);
		this.assertTrue(self29 == null && b13 == null || self29 != null && b13 != null && self29.m00 == b13.m00 && self29.m10 == b13.m10 && self29.m20 == b13.m20 && self29.m30 == b13.m30 && self29.m01 == b13.m01 && self29.m11 == b13.m11 && self29.m21 == b13.m21 && self29.m31 == b13.m31 && self29.m02 == b13.m02 && self29.m12 == b13.m12 && self29.m22 == b13.m22 && self29.m32 == b13.m32 && self29.m03 == b13.m03 && self29.m13 == b13.m13 && self29.m23 == b13.m23 && self29.m33 == b13.m33,{ fileName : "TestStructures.hx", lineNumber : 94, className : "test.TestStructures", methodName : "testAddSub"});
		var b14 = new hxmath_math_Matrix4x4Default(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
		var self30 = self27;
		var self31 = new hxmath_math_Matrix4x4Default(self30.m00,self30.m10,self30.m20,self30.m30,self30.m01,self30.m11,self30.m21,self30.m31,self30.m02,self30.m12,self30.m22,self30.m32,self30.m03,self30.m13,self30.m23,self30.m33);
		self31.m00 -= b14.m00;
		self31.m10 -= b14.m10;
		self31.m20 -= b14.m20;
		self31.m30 -= b14.m30;
		self31.m01 -= b14.m01;
		self31.m11 -= b14.m11;
		self31.m21 -= b14.m21;
		self31.m31 -= b14.m31;
		self31.m02 -= b14.m02;
		self31.m12 -= b14.m12;
		self31.m22 -= b14.m22;
		self31.m32 -= b14.m32;
		self31.m03 -= b14.m03;
		self31.m13 -= b14.m13;
		self31.m23 -= b14.m23;
		self31.m33 -= b14.m33;
		mat44 = self31;
		var b15 = new hxmath_math_Matrix4x4Default(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);
		this.assertTrue(self31 == null && b15 == null || self31 != null && b15 != null && self31.m00 == b15.m00 && self31.m10 == b15.m10 && self31.m20 == b15.m20 && self31.m30 == b15.m30 && self31.m01 == b15.m01 && self31.m11 == b15.m11 && self31.m21 == b15.m21 && self31.m31 == b15.m31 && self31.m02 == b15.m02 && self31.m12 == b15.m12 && self31.m22 == b15.m22 && self31.m32 == b15.m32 && self31.m03 == b15.m03 && self31.m13 == b15.m13 && self31.m23 == b15.m23 && self31.m33 == b15.m33,{ fileName : "TestStructures.hx", lineNumber : 96, className : "test.TestStructures", methodName : "testAddSub"});
		var vec2 = new hxmath_math_Vector2Default(0.0,0.0);
		var b16 = new hxmath_math_Vector2Default(1.0,0.0);
		var self32 = vec2;
		var self33 = new hxmath_math_Vector2Default(self32.x,self32.y);
		self33.x += b16.x;
		self33.y += b16.y;
		var b17 = new hxmath_math_Vector2Default(1.0,0.0);
		this.assertTrue(self33 == null && b17 == null || self33 != null && b17 != null && self33.x == b17.x && self33.y == b17.y,{ fileName : "TestStructures.hx", lineNumber : 99, className : "test.TestStructures", methodName : "testAddSub"});
		var b18 = new hxmath_math_Vector2Default(1.0,0.0);
		var self34 = vec2;
		var self35 = new hxmath_math_Vector2Default(self34.x,self34.y);
		self35.x += b18.x;
		self35.y += b18.y;
		vec2 = self35;
		var b19 = new hxmath_math_Vector2Default(1.0,0.0);
		this.assertTrue(self35 == null && b19 == null || self35 != null && b19 != null && self35.x == b19.x && self35.y == b19.y,{ fileName : "TestStructures.hx", lineNumber : 101, className : "test.TestStructures", methodName : "testAddSub"});
		var b20 = new hxmath_math_Vector2Default(1.0,0.0);
		var self36 = self35;
		var self37 = new hxmath_math_Vector2Default(self36.x,self36.y);
		self37.x -= b20.x;
		self37.y -= b20.y;
		var b21 = new hxmath_math_Vector2Default(0.0,0.0);
		this.assertTrue(self37 == null && b21 == null || self37 != null && b21 != null && self37.x == b21.x && self37.y == b21.y,{ fileName : "TestStructures.hx", lineNumber : 102, className : "test.TestStructures", methodName : "testAddSub"});
		var b22 = new hxmath_math_Vector2Default(1.0,0.0);
		var self38 = self35;
		var self39 = new hxmath_math_Vector2Default(self38.x,self38.y);
		self39.x -= b22.x;
		self39.y -= b22.y;
		vec2 = self39;
		var b23 = new hxmath_math_Vector2Default(0.0,0.0);
		this.assertTrue(self39 == null && b23 == null || self39 != null && b23 != null && self39.x == b23.x && self39.y == b23.y,{ fileName : "TestStructures.hx", lineNumber : 104, className : "test.TestStructures", methodName : "testAddSub"});
		var vec3 = new hxmath_math_Vector3Default(0.0,0.0,0.0);
		var b24 = new hxmath_math_Vector3Default(1.0,0.0,0.0);
		var self40 = vec3;
		var self41 = new hxmath_math_Vector3Default(self40.x,self40.y,self40.z);
		self41.x += b24.x;
		self41.y += b24.y;
		self41.z += b24.z;
		var b25 = new hxmath_math_Vector3Default(1.0,0.0,0.0);
		this.assertTrue(self41 == null && b25 == null || self41 != null && b25 != null && self41.x == b25.x && self41.y == b25.y && self41.z == b25.z,{ fileName : "TestStructures.hx", lineNumber : 107, className : "test.TestStructures", methodName : "testAddSub"});
		var b26 = new hxmath_math_Vector3Default(1.0,0.0,0.0);
		var self42 = vec3;
		var self43 = new hxmath_math_Vector3Default(self42.x,self42.y,self42.z);
		self43.x += b26.x;
		self43.y += b26.y;
		self43.z += b26.z;
		vec3 = self43;
		var b27 = new hxmath_math_Vector3Default(1.0,0.0,0.0);
		this.assertTrue(self43 == null && b27 == null || self43 != null && b27 != null && self43.x == b27.x && self43.y == b27.y && self43.z == b27.z,{ fileName : "TestStructures.hx", lineNumber : 109, className : "test.TestStructures", methodName : "testAddSub"});
		var b28 = new hxmath_math_Vector3Default(1.0,0.0,0.0);
		var self44 = self43;
		var self45 = new hxmath_math_Vector3Default(self44.x,self44.y,self44.z);
		self45.x -= b28.x;
		self45.y -= b28.y;
		self45.z -= b28.z;
		var b29 = new hxmath_math_Vector3Default(0.0,0.0,0.0);
		this.assertTrue(self45 == null && b29 == null || self45 != null && b29 != null && self45.x == b29.x && self45.y == b29.y && self45.z == b29.z,{ fileName : "TestStructures.hx", lineNumber : 110, className : "test.TestStructures", methodName : "testAddSub"});
		var b30 = new hxmath_math_Vector3Default(1.0,0.0,0.0);
		var self46 = self43;
		var self47 = new hxmath_math_Vector3Default(self46.x,self46.y,self46.z);
		self47.x -= b30.x;
		self47.y -= b30.y;
		self47.z -= b30.z;
		vec3 = self47;
		var b31 = new hxmath_math_Vector3Default(0.0,0.0,0.0);
		this.assertTrue(self47 == null && b31 == null || self47 != null && b31 != null && self47.x == b31.x && self47.y == b31.y && self47.z == b31.z,{ fileName : "TestStructures.hx", lineNumber : 112, className : "test.TestStructures", methodName : "testAddSub"});
		var vec4 = new hxmath_math_Vector4Default(0.0,0.0,0.0,0.0);
		var b32 = new hxmath_math_Vector4Default(1.0,0.0,0.0,0.0);
		var self48 = vec4;
		var self49 = new hxmath_math_Vector4Default(self48.x,self48.y,self48.z,self48.w);
		self49.x += b32.x;
		self49.y += b32.y;
		self49.z += b32.z;
		self49.w += b32.w;
		var b33 = new hxmath_math_Vector4Default(1.0,0.0,0.0,0.0);
		this.assertTrue(self49 == null && b33 == null || self49 != null && b33 != null && self49.x == b33.x && self49.y == b33.y && self49.z == b33.z && self49.w == b33.w,{ fileName : "TestStructures.hx", lineNumber : 115, className : "test.TestStructures", methodName : "testAddSub"});
		var b34 = new hxmath_math_Vector4Default(1.0,0.0,0.0,0.0);
		var self50 = vec4;
		var self51 = new hxmath_math_Vector4Default(self50.x,self50.y,self50.z,self50.w);
		self51.x += b34.x;
		self51.y += b34.y;
		self51.z += b34.z;
		self51.w += b34.w;
		vec4 = self51;
		var b35 = new hxmath_math_Vector4Default(1.0,0.0,0.0,0.0);
		this.assertTrue(self51 == null && b35 == null || self51 != null && b35 != null && self51.x == b35.x && self51.y == b35.y && self51.z == b35.z && self51.w == b35.w,{ fileName : "TestStructures.hx", lineNumber : 117, className : "test.TestStructures", methodName : "testAddSub"});
		var b36 = new hxmath_math_Vector4Default(1.0,0.0,0.0,0.0);
		var self52 = self51;
		var self53 = new hxmath_math_Vector4Default(self52.x,self52.y,self52.z,self52.w);
		self53.x -= b36.x;
		self53.y -= b36.y;
		self53.z -= b36.z;
		self53.w -= b36.w;
		var b37 = new hxmath_math_Vector4Default(0.0,0.0,0.0,0.0);
		this.assertTrue(self53 == null && b37 == null || self53 != null && b37 != null && self53.x == b37.x && self53.y == b37.y && self53.z == b37.z && self53.w == b37.w,{ fileName : "TestStructures.hx", lineNumber : 118, className : "test.TestStructures", methodName : "testAddSub"});
		var b38 = new hxmath_math_Vector4Default(1.0,0.0,0.0,0.0);
		var self54 = self51;
		var self55 = new hxmath_math_Vector4Default(self54.x,self54.y,self54.z,self54.w);
		self55.x -= b38.x;
		self55.y -= b38.y;
		self55.z -= b38.z;
		self55.w -= b38.w;
		vec4 = self55;
		var b39 = new hxmath_math_Vector4Default(0.0,0.0,0.0,0.0);
		this.assertTrue(self55 == null && b39 == null || self55 != null && b39 != null && self55.x == b39.x && self55.y == b39.y && self55.z == b39.z && self55.w == b39.w,{ fileName : "TestStructures.hx", lineNumber : 120, className : "test.TestStructures", methodName : "testAddSub"});
		var q = new hxmath_math_QuaternionDefault(0,0,0,0);
		var b40 = new hxmath_math_QuaternionDefault(1,0,0,0);
		var self56 = q;
		var self57 = new hxmath_math_QuaternionDefault(self56.s,self56.x,self56.y,self56.z);
		self57.s += b40.s;
		self57.x += b40.x;
		self57.y += b40.y;
		self57.z += b40.z;
		var b41 = new hxmath_math_QuaternionDefault(1,0,0,0);
		this.assertTrue(self57 == null && b41 == null || self57 != null && b41 != null && self57.s == b41.s && self57.x == b41.x && self57.y == b41.y && self57.z == b41.z,{ fileName : "TestStructures.hx", lineNumber : 123, className : "test.TestStructures", methodName : "testAddSub"});
		var b42 = new hxmath_math_QuaternionDefault(1,0,0,0);
		var self58 = q;
		var self59 = new hxmath_math_QuaternionDefault(self58.s,self58.x,self58.y,self58.z);
		self59.s += b42.s;
		self59.x += b42.x;
		self59.y += b42.y;
		self59.z += b42.z;
		q = self59;
		var b43 = new hxmath_math_QuaternionDefault(1,0,0,0);
		this.assertTrue(self59 == null && b43 == null || self59 != null && b43 != null && self59.s == b43.s && self59.x == b43.x && self59.y == b43.y && self59.z == b43.z,{ fileName : "TestStructures.hx", lineNumber : 125, className : "test.TestStructures", methodName : "testAddSub"});
		var b44 = new hxmath_math_QuaternionDefault(1,0,0,0);
		var self60 = self59;
		var self61 = new hxmath_math_QuaternionDefault(self60.s,self60.x,self60.y,self60.z);
		self61.s -= b44.s;
		self61.x -= b44.x;
		self61.y -= b44.y;
		self61.z -= b44.z;
		var b45 = new hxmath_math_QuaternionDefault(0,0,0,0);
		this.assertTrue(self61 == null && b45 == null || self61 != null && b45 != null && self61.s == b45.s && self61.x == b45.x && self61.y == b45.y && self61.z == b45.z,{ fileName : "TestStructures.hx", lineNumber : 126, className : "test.TestStructures", methodName : "testAddSub"});
		var b46 = new hxmath_math_QuaternionDefault(1,0,0,0);
		var self62 = self59;
		var self63 = new hxmath_math_QuaternionDefault(self62.s,self62.x,self62.y,self62.z);
		self63.s -= b46.s;
		self63.x -= b46.x;
		self63.y -= b46.y;
		self63.z -= b46.z;
		q = self63;
		var b47 = new hxmath_math_QuaternionDefault(0,0,0,0);
		this.assertTrue(self63 == null && b47 == null || self63 != null && b47 != null && self63.s == b47.s && self63.x == b47.x && self63.y == b47.y && self63.z == b47.z,{ fileName : "TestStructures.hx", lineNumber : 128, className : "test.TestStructures", methodName : "testAddSub"});
		var intVec2 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(0,0);
		var b48 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(1,0);
		var self64 = intVec2;
		var self65 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(self64.x,self64.y);
		self65.x += b48.x;
		self65.y += b48.y;
		var b49 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(1,0);
		this.assertTrue(self65 == null && b49 == null || self65 != null && b49 != null && self65.x == b49.x && self65.y == b49.y,{ fileName : "TestStructures.hx", lineNumber : 131, className : "test.TestStructures", methodName : "testAddSub"});
		var b50 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(1,0);
		var self66 = intVec2;
		var self67 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(self66.x,self66.y);
		self67.x += b50.x;
		self67.y += b50.y;
		intVec2 = self67;
		var b51 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(1,0);
		this.assertTrue(self67 == null && b51 == null || self67 != null && b51 != null && self67.x == b51.x && self67.y == b51.y,{ fileName : "TestStructures.hx", lineNumber : 133, className : "test.TestStructures", methodName : "testAddSub"});
		var b52 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(1,0);
		var self68 = self67;
		var self69 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(self68.x,self68.y);
		self69.x -= b52.x;
		self69.y -= b52.y;
		var b53 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(0,0);
		this.assertTrue(self69 == null && b53 == null || self69 != null && b53 != null && self69.x == b53.x && self69.y == b53.y,{ fileName : "TestStructures.hx", lineNumber : 134, className : "test.TestStructures", methodName : "testAddSub"});
		var b54 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(1,0);
		var self70 = self67;
		var self71 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(self70.x,self70.y);
		self71.x -= b54.x;
		self71.y -= b54.y;
		intVec2 = self71;
		var b55 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(0,0);
		this.assertTrue(self71 == null && b55 == null || self71 != null && b55 != null && self71.x == b55.x && self71.y == b55.y,{ fileName : "TestStructures.hx", lineNumber : 136, className : "test.TestStructures", methodName : "testAddSub"});
		var shortVec2 = hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(0,0);
		var b56 = hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(1,0);
		this.assertTrue(hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new((shortVec2 & 65535) + (b56 & 65535),(shortVec2 >> 16 & 65535) + (b56 >> 16 & 65535)) == hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(1,0),{ fileName : "TestStructures.hx", lineNumber : 139, className : "test.TestStructures", methodName : "testAddSub"});
		var b57 = hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(1,0);
		shortVec2 = hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new((shortVec2 & 65535) + (b57 & 65535),(shortVec2 >> 16 & 65535) + (b57 >> 16 & 65535));
		this.assertTrue(shortVec2 == hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(1,0),{ fileName : "TestStructures.hx", lineNumber : 141, className : "test.TestStructures", methodName : "testAddSub"});
		var b58 = hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(1,0);
		this.assertTrue(hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new((shortVec2 & 65535) - (b58 & 65535),(shortVec2 >> 16 & 65535) - (b58 >> 16 & 65535)) == hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(0,0),{ fileName : "TestStructures.hx", lineNumber : 142, className : "test.TestStructures", methodName : "testAddSub"});
		var b59 = hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(1,0);
		shortVec2 = hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new((shortVec2 & 65535) - (b59 & 65535),(shortVec2 >> 16 & 65535) - (b59 >> 16 & 65535));
		this.assertTrue(shortVec2 == hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(0,0),{ fileName : "TestStructures.hx", lineNumber : 144, className : "test.TestStructures", methodName : "testAddSub"});
	}
	,testDeterminant: function() {
		var self = new hxmath_math_Matrix2x2Default(0.0,0.0,0.0,0.0);
		this.assertEquals(self.a * self.d - self.b * self.c,0.0,{ fileName : "TestStructures.hx", lineNumber : 149, className : "test.TestStructures", methodName : "testDeterminant"});
		var self1 = new hxmath_math_Matrix2x2Default(1.0,0.0,0.0,1.0);
		this.assertEquals(self1.a * self1.d - self1.b * self1.c,1.0,{ fileName : "TestStructures.hx", lineNumber : 150, className : "test.TestStructures", methodName : "testDeterminant"});
		var _g = 0;
		while(_g < 10) {
			++_g;
			var a = this.randomMatrix2x2();
			var b = this.randomMatrix2x2();
			var self2 = new hxmath_math_Matrix2x2Default(a.a * b.a + a.b * b.c,a.a * b.b + a.b * b.d,a.c * b.a + a.d * b.c,a.c * b.b + a.d * b.d);
			this.assertApproxEquals(self2.a * self2.d - self2.b * self2.c,(a.a * a.d - a.b * a.c) * (b.a * b.d - b.b * b.c),null,{ fileName : "TestStructures.hx", lineNumber : 156, className : "test.TestStructures", methodName : "testDeterminant"});
		}
		var self3 = new hxmath_math_Matrix3x3Default(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);
		var m00 = self3.m00;
		var m10 = self3.m10;
		var m20 = self3.m20;
		var m01 = self3.m01;
		var m11 = self3.m11;
		var m21 = self3.m21;
		var m02 = self3.m02;
		var m12 = self3.m12;
		var m22 = self3.m22;
		this.assertEquals(m00 * (m11 * m22 - m21 * m12) - m10 * (m01 * m22 - m21 * m02) + m20 * (m01 * m12 - m11 * m02),0.0,{ fileName : "TestStructures.hx", lineNumber : 159, className : "test.TestStructures", methodName : "testDeterminant"});
		var self4 = new hxmath_math_Matrix3x3Default(1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0);
		var m001 = self4.m00;
		var m101 = self4.m10;
		var m201 = self4.m20;
		var m011 = self4.m01;
		var m111 = self4.m11;
		var m211 = self4.m21;
		var m021 = self4.m02;
		var m121 = self4.m12;
		var m221 = self4.m22;
		this.assertEquals(m001 * (m111 * m221 - m211 * m121) - m101 * (m011 * m221 - m211 * m021) + m201 * (m011 * m121 - m111 * m021),1.0,{ fileName : "TestStructures.hx", lineNumber : 160, className : "test.TestStructures", methodName : "testDeterminant"});
		var _g1 = 0;
		while(_g1 < 10) {
			++_g1;
			var a1 = this.randomMatrix3x3();
			var b1 = this.randomMatrix3x3();
			var self5 = new hxmath_math_Matrix3x3Default(a1.m00 * b1.m00 + a1.m10 * b1.m01 + a1.m20 * b1.m02,a1.m00 * b1.m10 + a1.m10 * b1.m11 + a1.m20 * b1.m12,a1.m00 * b1.m20 + a1.m10 * b1.m21 + a1.m20 * b1.m22,a1.m01 * b1.m00 + a1.m11 * b1.m01 + a1.m21 * b1.m02,a1.m01 * b1.m10 + a1.m11 * b1.m11 + a1.m21 * b1.m12,a1.m01 * b1.m20 + a1.m11 * b1.m21 + a1.m21 * b1.m22,a1.m02 * b1.m00 + a1.m12 * b1.m01 + a1.m22 * b1.m02,a1.m02 * b1.m10 + a1.m12 * b1.m11 + a1.m22 * b1.m12,a1.m02 * b1.m20 + a1.m12 * b1.m21 + a1.m22 * b1.m22);
			var m002 = self5.m00;
			var m102 = self5.m10;
			var m202 = self5.m20;
			var m012 = self5.m01;
			var m112 = self5.m11;
			var m212 = self5.m21;
			var m022 = self5.m02;
			var m122 = self5.m12;
			var m222 = self5.m22;
			var tmp = m002 * (m112 * m222 - m212 * m122) - m102 * (m012 * m222 - m212 * m022) + m202 * (m012 * m122 - m112 * m022);
			var m003 = a1.m00;
			var m103 = a1.m10;
			var m203 = a1.m20;
			var m013 = a1.m01;
			var m113 = a1.m11;
			var m213 = a1.m21;
			var m023 = a1.m02;
			var m123 = a1.m12;
			var m223 = a1.m22;
			var tmp1 = m003 * (m113 * m223 - m213 * m123) - m103 * (m013 * m223 - m213 * m023) + m203 * (m013 * m123 - m113 * m023);
			var m004 = b1.m00;
			var m104 = b1.m10;
			var m204 = b1.m20;
			var m014 = b1.m01;
			var m114 = b1.m11;
			var m214 = b1.m21;
			var m024 = b1.m02;
			var m124 = b1.m12;
			var m224 = b1.m22;
			this.assertApproxEquals(tmp,tmp1 * (m004 * (m114 * m224 - m214 * m124) - m104 * (m014 * m224 - m214 * m024) + m204 * (m014 * m124 - m114 * m024)),null,{ fileName : "TestStructures.hx", lineNumber : 166, className : "test.TestStructures", methodName : "testDeterminant"});
		}
		var self6 = new hxmath_math_Matrix4x4Default(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);
		var m005 = self6.m00;
		var m105 = self6.m10;
		var m205 = self6.m20;
		var m30 = self6.m30;
		var m015 = self6.m01;
		var m115 = self6.m11;
		var m215 = self6.m21;
		var m31 = self6.m31;
		var m025 = self6.m02;
		var m125 = self6.m12;
		var m225 = self6.m22;
		var m32 = self6.m32;
		var m03 = self6.m03;
		var m13 = self6.m13;
		var m23 = self6.m23;
		var m33 = self6.m33;
		this.assertEquals(m005 * (m115 * (m225 * m33 - m32 * m23) - m215 * (m125 * m33 - m32 * m13) + m31 * (m125 * m23 - m225 * m13)) - m105 * (m015 * (m225 * m33 - m32 * m23) - m215 * (m025 * m33 - m32 * m03) + m31 * (m025 * m23 - m225 * m03)) + m205 * (m015 * (m125 * m33 - m32 * m13) - m115 * (m025 * m33 - m32 * m03) + m31 * (m025 * m13 - m125 * m03)) - m30 * (m015 * (m125 * m23 - m225 * m13) - m115 * (m025 * m23 - m225 * m03) + m215 * (m025 * m13 - m125 * m03)),0.0,{ fileName : "TestStructures.hx", lineNumber : 169, className : "test.TestStructures", methodName : "testDeterminant"});
		var self7 = new hxmath_math_Matrix4x4Default(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
		var m006 = self7.m00;
		var m106 = self7.m10;
		var m206 = self7.m20;
		var m301 = self7.m30;
		var m016 = self7.m01;
		var m116 = self7.m11;
		var m216 = self7.m21;
		var m311 = self7.m31;
		var m026 = self7.m02;
		var m126 = self7.m12;
		var m226 = self7.m22;
		var m321 = self7.m32;
		var m031 = self7.m03;
		var m131 = self7.m13;
		var m231 = self7.m23;
		var m331 = self7.m33;
		this.assertEquals(m006 * (m116 * (m226 * m331 - m321 * m231) - m216 * (m126 * m331 - m321 * m131) + m311 * (m126 * m231 - m226 * m131)) - m106 * (m016 * (m226 * m331 - m321 * m231) - m216 * (m026 * m331 - m321 * m031) + m311 * (m026 * m231 - m226 * m031)) + m206 * (m016 * (m126 * m331 - m321 * m131) - m116 * (m026 * m331 - m321 * m031) + m311 * (m026 * m131 - m126 * m031)) - m301 * (m016 * (m126 * m231 - m226 * m131) - m116 * (m026 * m231 - m226 * m031) + m216 * (m026 * m131 - m126 * m031)),1.0,{ fileName : "TestStructures.hx", lineNumber : 170, className : "test.TestStructures", methodName : "testDeterminant"});
		var _g2 = 0;
		while(_g2 < 1) {
			++_g2;
			var a2 = this.randomMatrix4x4();
			var b2 = this.randomMatrix4x4();
			var self8 = new hxmath_math_Matrix4x4Default(a2.m00 * b2.m00 + a2.m10 * b2.m01 + a2.m20 * b2.m02 + a2.m30 * b2.m03,a2.m00 * b2.m10 + a2.m10 * b2.m11 + a2.m20 * b2.m12 + a2.m30 * b2.m13,a2.m00 * b2.m20 + a2.m10 * b2.m21 + a2.m20 * b2.m22 + a2.m30 * b2.m23,a2.m00 * b2.m30 + a2.m10 * b2.m31 + a2.m20 * b2.m32 + a2.m30 * b2.m33,a2.m01 * b2.m00 + a2.m11 * b2.m01 + a2.m21 * b2.m02 + a2.m31 * b2.m03,a2.m01 * b2.m10 + a2.m11 * b2.m11 + a2.m21 * b2.m12 + a2.m31 * b2.m13,a2.m01 * b2.m20 + a2.m11 * b2.m21 + a2.m21 * b2.m22 + a2.m31 * b2.m23,a2.m01 * b2.m30 + a2.m11 * b2.m31 + a2.m21 * b2.m32 + a2.m31 * b2.m33,a2.m02 * b2.m00 + a2.m12 * b2.m01 + a2.m22 * b2.m02 + a2.m32 * b2.m03,a2.m02 * b2.m10 + a2.m12 * b2.m11 + a2.m22 * b2.m12 + a2.m32 * b2.m13,a2.m02 * b2.m20 + a2.m12 * b2.m21 + a2.m22 * b2.m22 + a2.m32 * b2.m23,a2.m02 * b2.m30 + a2.m12 * b2.m31 + a2.m22 * b2.m32 + a2.m32 * b2.m33,a2.m03 * b2.m00 + a2.m13 * b2.m01 + a2.m23 * b2.m02 + a2.m33 * b2.m03,a2.m03 * b2.m10 + a2.m13 * b2.m11 + a2.m23 * b2.m12 + a2.m33 * b2.m13,a2.m03 * b2.m20 + a2.m13 * b2.m21 + a2.m23 * b2.m22 + a2.m33 * b2.m23,a2.m03 * b2.m30 + a2.m13 * b2.m31 + a2.m23 * b2.m32 + a2.m33 * b2.m33);
			var m007 = self8.m00;
			var m107 = self8.m10;
			var m207 = self8.m20;
			var m302 = self8.m30;
			var m017 = self8.m01;
			var m117 = self8.m11;
			var m217 = self8.m21;
			var m312 = self8.m31;
			var m027 = self8.m02;
			var m127 = self8.m12;
			var m227 = self8.m22;
			var m322 = self8.m32;
			var m032 = self8.m03;
			var m132 = self8.m13;
			var m232 = self8.m23;
			var m332 = self8.m33;
			var tmp2 = m007 * (m117 * (m227 * m332 - m322 * m232) - m217 * (m127 * m332 - m322 * m132) + m312 * (m127 * m232 - m227 * m132)) - m107 * (m017 * (m227 * m332 - m322 * m232) - m217 * (m027 * m332 - m322 * m032) + m312 * (m027 * m232 - m227 * m032)) + m207 * (m017 * (m127 * m332 - m322 * m132) - m117 * (m027 * m332 - m322 * m032) + m312 * (m027 * m132 - m127 * m032)) - m302 * (m017 * (m127 * m232 - m227 * m132) - m117 * (m027 * m232 - m227 * m032) + m217 * (m027 * m132 - m127 * m032));
			var m008 = a2.m00;
			var m108 = a2.m10;
			var m208 = a2.m20;
			var m303 = a2.m30;
			var m018 = a2.m01;
			var m118 = a2.m11;
			var m218 = a2.m21;
			var m313 = a2.m31;
			var m028 = a2.m02;
			var m128 = a2.m12;
			var m228 = a2.m22;
			var m323 = a2.m32;
			var m033 = a2.m03;
			var m133 = a2.m13;
			var m233 = a2.m23;
			var m333 = a2.m33;
			var tmp3 = m008 * (m118 * (m228 * m333 - m323 * m233) - m218 * (m128 * m333 - m323 * m133) + m313 * (m128 * m233 - m228 * m133)) - m108 * (m018 * (m228 * m333 - m323 * m233) - m218 * (m028 * m333 - m323 * m033) + m313 * (m028 * m233 - m228 * m033)) + m208 * (m018 * (m128 * m333 - m323 * m133) - m118 * (m028 * m333 - m323 * m033) + m313 * (m028 * m133 - m128 * m033)) - m303 * (m018 * (m128 * m233 - m228 * m133) - m118 * (m028 * m233 - m228 * m033) + m218 * (m028 * m133 - m128 * m033));
			var m009 = b2.m00;
			var m109 = b2.m10;
			var m209 = b2.m20;
			var m304 = b2.m30;
			var m019 = b2.m01;
			var m119 = b2.m11;
			var m219 = b2.m21;
			var m314 = b2.m31;
			var m029 = b2.m02;
			var m129 = b2.m12;
			var m229 = b2.m22;
			var m324 = b2.m32;
			var m034 = b2.m03;
			var m134 = b2.m13;
			var m234 = b2.m23;
			var m334 = b2.m33;
			this.assertApproxEquals(tmp2,tmp3 * (m009 * (m119 * (m229 * m334 - m324 * m234) - m219 * (m129 * m334 - m324 * m134) + m314 * (m129 * m234 - m229 * m134)) - m109 * (m019 * (m229 * m334 - m324 * m234) - m219 * (m029 * m334 - m324 * m034) + m314 * (m029 * m234 - m229 * m034)) + m209 * (m019 * (m129 * m334 - m324 * m134) - m119 * (m029 * m334 - m324 * m034) + m314 * (m029 * m134 - m129 * m034)) - m304 * (m019 * (m129 * m234 - m229 * m134) - m119 * (m029 * m234 - m229 * m034) + m219 * (m029 * m134 - m129 * m034))),null,{ fileName : "TestStructures.hx", lineNumber : 176, className : "test.TestStructures", methodName : "testDeterminant"});
		}
	}
	,testArrayAccess: function() {
		var vec2 = new hxmath_math_Vector2Default(0.0,0.0);
		vec2.y = 1.0;
		this.assertEquals(1.0,vec2.y,{ fileName : "TestStructures.hx", lineNumber : 184, className : "test.TestStructures", methodName : "testArrayAccess"});
		this.assertEquals(1.0,vec2.y,{ fileName : "TestStructures.hx", lineNumber : 185, className : "test.TestStructures", methodName : "testArrayAccess"});
		var vec3 = new hxmath_math_Vector3Default(0.0,0.0,0.0);
		vec3.y = 1.0;
		this.assertEquals(1.0,vec3.y,{ fileName : "TestStructures.hx", lineNumber : 189, className : "test.TestStructures", methodName : "testArrayAccess"});
		this.assertEquals(1.0,vec3.y,{ fileName : "TestStructures.hx", lineNumber : 190, className : "test.TestStructures", methodName : "testArrayAccess"});
		var vec4 = new hxmath_math_Vector4Default(0.0,0.0,0.0,0.0);
		vec4.y = 1.0;
		this.assertEquals(1.0,vec4.y,{ fileName : "TestStructures.hx", lineNumber : 194, className : "test.TestStructures", methodName : "testArrayAccess"});
		this.assertEquals(1.0,vec4.y,{ fileName : "TestStructures.hx", lineNumber : 195, className : "test.TestStructures", methodName : "testArrayAccess"});
		var mat2x2 = new hxmath_math_Matrix2x2Default(0.0,0.0,0.0,0.0);
		mat2x2.c = 1.0;
		this.assertEquals(1.0,mat2x2.c,{ fileName : "TestStructures.hx", lineNumber : 199, className : "test.TestStructures", methodName : "testArrayAccess"});
		this.assertEquals(1.0,mat2x2.c,{ fileName : "TestStructures.hx", lineNumber : 200, className : "test.TestStructures", methodName : "testArrayAccess"});
		this.assertEquals(1.0,mat2x2.c,{ fileName : "TestStructures.hx", lineNumber : 201, className : "test.TestStructures", methodName : "testArrayAccess"});
		var mat3x2 = new hxmath_math_Matrix3x2Default(0.0,0.0,0.0,0.0,0.0,0.0);
		mat3x2.c = 1.0;
		this.assertEquals(1.0,mat3x2.c,{ fileName : "TestStructures.hx", lineNumber : 205, className : "test.TestStructures", methodName : "testArrayAccess"});
		this.assertEquals(1.0,mat3x2.c,{ fileName : "TestStructures.hx", lineNumber : 206, className : "test.TestStructures", methodName : "testArrayAccess"});
		this.assertEquals(1.0,mat3x2.c,{ fileName : "TestStructures.hx", lineNumber : 207, className : "test.TestStructures", methodName : "testArrayAccess"});
		var mat3x3 = new hxmath_math_Matrix3x3Default(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);
		mat3x3.m21 = 1.0;
		this.assertEquals(1.0,mat3x3.m21,{ fileName : "TestStructures.hx", lineNumber : 211, className : "test.TestStructures", methodName : "testArrayAccess"});
		this.assertEquals(1.0,mat3x3.m21,{ fileName : "TestStructures.hx", lineNumber : 212, className : "test.TestStructures", methodName : "testArrayAccess"});
		this.assertEquals(1.0,mat3x3.m21,{ fileName : "TestStructures.hx", lineNumber : 213, className : "test.TestStructures", methodName : "testArrayAccess"});
		var mat4x4 = new hxmath_math_Matrix4x4Default(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);
		mat4x4.m11 = 1.0;
		this.assertEquals(1.0,mat4x4.m11,{ fileName : "TestStructures.hx", lineNumber : 217, className : "test.TestStructures", methodName : "testArrayAccess"});
		this.assertEquals(1.0,mat4x4.m11,{ fileName : "TestStructures.hx", lineNumber : 218, className : "test.TestStructures", methodName : "testArrayAccess"});
		this.assertEquals(1.0,mat4x4.m11,{ fileName : "TestStructures.hx", lineNumber : 219, className : "test.TestStructures", methodName : "testArrayAccess"});
		var quat = new hxmath_math_QuaternionDefault(0,0,0,0);
		quat.y = 1.0;
		this.assertEquals(1.0,quat.y,{ fileName : "TestStructures.hx", lineNumber : 223, className : "test.TestStructures", methodName : "testArrayAccess"});
		this.assertEquals(1.0,quat.y,{ fileName : "TestStructures.hx", lineNumber : 224, className : "test.TestStructures", methodName : "testArrayAccess"});
		var intVec2 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(0,0);
		intVec2.y = 1;
		this.assertEquals(1,intVec2.y,{ fileName : "TestStructures.hx", lineNumber : 228, className : "test.TestStructures", methodName : "testArrayAccess"});
		this.assertEquals(1,intVec2.y,{ fileName : "TestStructures.hx", lineNumber : 229, className : "test.TestStructures", methodName : "testArrayAccess"});
		var shortVec2 = hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(0,1);
		this.assertEquals(1,shortVec2 >> 16 & 65535,{ fileName : "TestStructures.hx", lineNumber : 233, className : "test.TestStructures", methodName : "testArrayAccess"});
		this.assertEquals(1,shortVec2 >> 16 & 65535,{ fileName : "TestStructures.hx", lineNumber : 234, className : "test.TestStructures", methodName : "testArrayAccess"});
	}
	,testApplyScalarFunc: function() {
		var testData = [{ f : hxmath_math__$Vector2_Vector2_$Impl_$.applyScalarFunc, zero : new hxmath_math_Vector2Default(0.0,0.0), count : 2, get : hxmath_math__$Vector2_Vector2_$Impl_$.getArrayElement, set : hxmath_math__$Vector2_Vector2_$Impl_$.setArrayElement},{ f : hxmath_math__$Vector3_Vector3_$Impl_$.applyScalarFunc, zero : new hxmath_math_Vector3Default(0.0,0.0,0.0), count : 3, get : hxmath_math__$Vector3_Vector3_$Impl_$.getArrayElement, set : hxmath_math__$Vector3_Vector3_$Impl_$.setArrayElement},{ f : hxmath_math__$Vector4_Vector4_$Impl_$.applyScalarFunc, zero : new hxmath_math_Vector4Default(0.0,0.0,0.0,0.0), count : 4, get : hxmath_math__$Vector4_Vector4_$Impl_$.getArrayElement, set : hxmath_math__$Vector4_Vector4_$Impl_$.setArrayElement},{ f : hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.applyScalarFunc, zero : new hxmath_math_Matrix2x2Default(0.0,0.0,0.0,0.0), count : 4, get : hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.getArrayElement, set : hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.setArrayElement},{ f : hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.applyScalarFunc, zero : new hxmath_math_Matrix3x2Default(0.0,0.0,0.0,0.0,0.0,0.0), count : 6, get : hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.getArrayElement, set : hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.setArrayElement},{ f : hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.applyScalarFunc, zero : new hxmath_math_Matrix3x3Default(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), count : 9, get : hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.getArrayElement, set : hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.setArrayElement},{ f : hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.applyScalarFunc, zero : new hxmath_math_Matrix4x4Default(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), count : 16, get : hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.getArrayElement, set : hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.setArrayElement},{ f : hxmath_math__$Quaternion_Quaternion_$Impl_$.applyScalarFunc, zero : new hxmath_math_QuaternionDefault(0,0,0,0), count : 4, get : hxmath_math__$Quaternion_Quaternion_$Impl_$.getArrayElement, set : hxmath_math__$Quaternion_Quaternion_$Impl_$.setArrayElement}];
		var _g = 0;
		while(_g < testData.length) {
			var data = testData[_g];
			++_g;
			var v = data.zero;
			data.set(v,1,0.1);
			data.f(v,Math.ceil);
			var sum = 0.0;
			var _g2 = 0;
			var _g1 = data.count;
			while(_g2 < _g1) sum += data.get(v,_g2++);
			this.assertEquals(1.0,sum,{ fileName : "TestStructures.hx", lineNumber : 309, className : "test.TestStructures", methodName : "testApplyScalarFunc"});
		}
	}
	,testIntApplyScalarFunc: function() {
		var testData = [{ f : hxmath_math__$IntVector2_IntVector2_$Impl_$.applyScalarFunc, zero : hxmath_math__$IntVector2_IntVector2_$Impl_$._new(0,0), count : 2, get : hxmath_math__$IntVector2_IntVector2_$Impl_$.getArrayElement, set : hxmath_math__$IntVector2_IntVector2_$Impl_$.setArrayElement}];
		var _g = 0;
		while(_g < testData.length) {
			var data = testData[_g];
			++_g;
			var v = data.zero;
			data.set(v,1,1);
			data.f(v,function(x) {
				return 2 * x;
			});
			var sum = 0;
			var _g2 = 0;
			var _g1 = data.count;
			while(_g2 < _g1) sum += data.get(v,_g2++);
			this.assertEquals(2,sum,{ fileName : "TestStructures.hx", lineNumber : 336, className : "test.TestStructures", methodName : "testIntApplyScalarFunc"});
		}
	}
	,testCopyToFrom: function() {
		var vec2a = this.randomVector2();
		var vec2b = new hxmath_math_Vector2Default(0.0,0.0);
		var _g = 0;
		while(_g < 2) {
			var i = _g++;
			var tmp;
			switch(i) {
			case 0:
				tmp = vec2a.x;
				break;
			case 1:
				tmp = vec2a.y;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
			var value = tmp;
			switch(i) {
			case 0:
				vec2b.x = value;
				break;
			case 1:
				vec2b.y = value;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
		}
		this.assertTrue(vec2a == null && vec2b == null || vec2a != null && vec2b != null && vec2a.x == vec2b.x && vec2a.y == vec2b.y,{ fileName : "TestStructures.hx", lineNumber : 345, className : "test.TestStructures", methodName : "testCopyToFrom"});
		var vec3a = this.randomVector3();
		var vec3b = new hxmath_math_Vector3Default(0.0,0.0,0.0);
		var _g1 = 0;
		while(_g1 < 3) {
			var i1 = _g1++;
			var tmp1;
			switch(i1) {
			case 0:
				tmp1 = vec3a.x;
				break;
			case 1:
				tmp1 = vec3a.y;
				break;
			case 2:
				tmp1 = vec3a.z;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
			var value1 = tmp1;
			switch(i1) {
			case 0:
				vec3b.x = value1;
				break;
			case 1:
				vec3b.y = value1;
				break;
			case 2:
				vec3b.z = value1;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
		}
		this.assertTrue(vec3a == null && vec3b == null || vec3a != null && vec3b != null && vec3a.x == vec3b.x && vec3a.y == vec3b.y && vec3a.z == vec3b.z,{ fileName : "TestStructures.hx", lineNumber : 350, className : "test.TestStructures", methodName : "testCopyToFrom"});
		var vec4a = this.randomVector4();
		var vec4b = new hxmath_math_Vector4Default(0.0,0.0,0.0,0.0);
		var _g2 = 0;
		while(_g2 < 4) {
			var i2 = _g2++;
			var tmp2;
			switch(i2) {
			case 0:
				tmp2 = vec4a.x;
				break;
			case 1:
				tmp2 = vec4a.y;
				break;
			case 2:
				tmp2 = vec4a.z;
				break;
			case 3:
				tmp2 = vec4a.w;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
			var value2 = tmp2;
			switch(i2) {
			case 0:
				vec4b.x = value2;
				break;
			case 1:
				vec4b.y = value2;
				break;
			case 2:
				vec4b.z = value2;
				break;
			case 3:
				vec4b.w = value2;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
		}
		this.assertTrue(vec4a == null && vec4b == null || vec4a != null && vec4b != null && vec4a.x == vec4b.x && vec4a.y == vec4b.y && vec4a.z == vec4b.z && vec4a.w == vec4b.w,{ fileName : "TestStructures.hx", lineNumber : 355, className : "test.TestStructures", methodName : "testCopyToFrom"});
		var mat2x2a = this.randomMatrix2x2();
		var mat2x2b = new hxmath_math_Matrix2x2Default(0.0,0.0,0.0,0.0);
		var _g3 = 0;
		while(_g3 < 4) {
			var i3 = _g3++;
			var tmp3;
			switch(i3) {
			case 0:
				tmp3 = mat2x2a.a;
				break;
			case 1:
				tmp3 = mat2x2a.b;
				break;
			case 2:
				tmp3 = mat2x2a.c;
				break;
			case 3:
				tmp3 = mat2x2a.d;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
			var value3 = tmp3;
			switch(i3) {
			case 0:
				mat2x2b.a = value3;
				break;
			case 1:
				mat2x2b.b = value3;
				break;
			case 2:
				mat2x2b.c = value3;
				break;
			case 3:
				mat2x2b.d = value3;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
		}
		this.assertTrue(mat2x2a == null && mat2x2b == null || mat2x2a != null && mat2x2b != null && mat2x2a.a == mat2x2b.a && mat2x2a.b == mat2x2b.b && mat2x2a.c == mat2x2b.c && mat2x2a.d == mat2x2b.d,{ fileName : "TestStructures.hx", lineNumber : 360, className : "test.TestStructures", methodName : "testCopyToFrom"});
		var mat3x2a = this.randomMatrix3x2();
		var mat3x2b = new hxmath_math_Matrix3x2Default(0.0,0.0,0.0,0.0,0.0,0.0);
		var _g4 = 0;
		while(_g4 < 6) {
			var i4 = _g4++;
			var tmp4;
			switch(i4) {
			case 0:
				tmp4 = mat3x2a.a;
				break;
			case 1:
				tmp4 = mat3x2a.b;
				break;
			case 2:
				tmp4 = mat3x2a.tx;
				break;
			case 3:
				tmp4 = mat3x2a.c;
				break;
			case 4:
				tmp4 = mat3x2a.d;
				break;
			case 5:
				tmp4 = mat3x2a.ty;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
			var value4 = tmp4;
			switch(i4) {
			case 0:
				mat3x2b.a = value4;
				break;
			case 1:
				mat3x2b.b = value4;
				break;
			case 2:
				mat3x2b.tx = value4;
				break;
			case 3:
				mat3x2b.c = value4;
				break;
			case 4:
				mat3x2b.d = value4;
				break;
			case 5:
				mat3x2b.ty = value4;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
		}
		this.assertTrue(mat3x2a == null && mat3x2b == null || mat3x2a != null && mat3x2b != null && mat3x2a.a == mat3x2b.a && mat3x2a.b == mat3x2b.b && mat3x2a.c == mat3x2b.c && mat3x2a.d == mat3x2b.d && mat3x2a.tx == mat3x2b.tx && mat3x2a.ty == mat3x2b.ty,{ fileName : "TestStructures.hx", lineNumber : 365, className : "test.TestStructures", methodName : "testCopyToFrom"});
		var mat3x3a = this.randomMatrix3x3();
		var mat3x3b = new hxmath_math_Matrix3x3Default(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);
		var _g5 = 0;
		while(_g5 < 9) {
			var i5 = _g5++;
			var tmp5;
			switch(i5) {
			case 0:
				tmp5 = mat3x3a.m00;
				break;
			case 1:
				tmp5 = mat3x3a.m10;
				break;
			case 2:
				tmp5 = mat3x3a.m20;
				break;
			case 3:
				tmp5 = mat3x3a.m01;
				break;
			case 4:
				tmp5 = mat3x3a.m11;
				break;
			case 5:
				tmp5 = mat3x3a.m21;
				break;
			case 6:
				tmp5 = mat3x3a.m02;
				break;
			case 7:
				tmp5 = mat3x3a.m12;
				break;
			case 8:
				tmp5 = mat3x3a.m22;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
			var value5 = tmp5;
			switch(i5) {
			case 0:
				mat3x3b.m00 = value5;
				break;
			case 1:
				mat3x3b.m10 = value5;
				break;
			case 2:
				mat3x3b.m20 = value5;
				break;
			case 3:
				mat3x3b.m01 = value5;
				break;
			case 4:
				mat3x3b.m11 = value5;
				break;
			case 5:
				mat3x3b.m21 = value5;
				break;
			case 6:
				mat3x3b.m02 = value5;
				break;
			case 7:
				mat3x3b.m12 = value5;
				break;
			case 8:
				mat3x3b.m22 = value5;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
		}
		this.assertTrue(mat3x3a == null && mat3x3b == null || mat3x3a != null && mat3x3b != null && mat3x3a.m00 == mat3x3b.m00 && mat3x3a.m10 == mat3x3b.m10 && mat3x3a.m20 == mat3x3b.m20 && mat3x3a.m01 == mat3x3b.m01 && mat3x3a.m11 == mat3x3b.m11 && mat3x3a.m21 == mat3x3b.m21 && mat3x3a.m02 == mat3x3b.m02 && mat3x3a.m12 == mat3x3b.m12 && mat3x3a.m22 == mat3x3b.m22,{ fileName : "TestStructures.hx", lineNumber : 370, className : "test.TestStructures", methodName : "testCopyToFrom"});
		var mat4x4a = this.randomMatrix4x4();
		var mat4x4b = new hxmath_math_Matrix4x4Default(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);
		var _g6 = 0;
		while(_g6 < 16) {
			var i6 = _g6++;
			var tmp6;
			switch(i6) {
			case 0:
				tmp6 = mat4x4a.m00;
				break;
			case 1:
				tmp6 = mat4x4a.m10;
				break;
			case 2:
				tmp6 = mat4x4a.m20;
				break;
			case 3:
				tmp6 = mat4x4a.m30;
				break;
			case 4:
				tmp6 = mat4x4a.m01;
				break;
			case 5:
				tmp6 = mat4x4a.m11;
				break;
			case 6:
				tmp6 = mat4x4a.m21;
				break;
			case 7:
				tmp6 = mat4x4a.m31;
				break;
			case 8:
				tmp6 = mat4x4a.m02;
				break;
			case 9:
				tmp6 = mat4x4a.m12;
				break;
			case 10:
				tmp6 = mat4x4a.m22;
				break;
			case 11:
				tmp6 = mat4x4a.m32;
				break;
			case 12:
				tmp6 = mat4x4a.m03;
				break;
			case 13:
				tmp6 = mat4x4a.m13;
				break;
			case 14:
				tmp6 = mat4x4a.m23;
				break;
			case 15:
				tmp6 = mat4x4a.m33;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
			var value6 = tmp6;
			switch(i6) {
			case 0:
				mat4x4b.m00 = value6;
				break;
			case 1:
				mat4x4b.m10 = value6;
				break;
			case 2:
				mat4x4b.m20 = value6;
				break;
			case 3:
				mat4x4b.m30 = value6;
				break;
			case 4:
				mat4x4b.m01 = value6;
				break;
			case 5:
				mat4x4b.m11 = value6;
				break;
			case 6:
				mat4x4b.m21 = value6;
				break;
			case 7:
				mat4x4b.m31 = value6;
				break;
			case 8:
				mat4x4b.m02 = value6;
				break;
			case 9:
				mat4x4b.m12 = value6;
				break;
			case 10:
				mat4x4b.m22 = value6;
				break;
			case 11:
				mat4x4b.m32 = value6;
				break;
			case 12:
				mat4x4b.m03 = value6;
				break;
			case 13:
				mat4x4b.m13 = value6;
				break;
			case 14:
				mat4x4b.m23 = value6;
				break;
			case 15:
				mat4x4b.m33 = value6;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
		}
		this.assertTrue(mat4x4a == null && mat4x4b == null || mat4x4a != null && mat4x4b != null && mat4x4a.m00 == mat4x4b.m00 && mat4x4a.m10 == mat4x4b.m10 && mat4x4a.m20 == mat4x4b.m20 && mat4x4a.m30 == mat4x4b.m30 && mat4x4a.m01 == mat4x4b.m01 && mat4x4a.m11 == mat4x4b.m11 && mat4x4a.m21 == mat4x4b.m21 && mat4x4a.m31 == mat4x4b.m31 && mat4x4a.m02 == mat4x4b.m02 && mat4x4a.m12 == mat4x4b.m12 && mat4x4a.m22 == mat4x4b.m22 && mat4x4a.m32 == mat4x4b.m32 && mat4x4a.m03 == mat4x4b.m03 && mat4x4a.m13 == mat4x4b.m13 && mat4x4a.m23 == mat4x4b.m23 && mat4x4a.m33 == mat4x4b.m33,{ fileName : "TestStructures.hx", lineNumber : 375, className : "test.TestStructures", methodName : "testCopyToFrom"});
		var quatA = this.randomQuaternion();
		var quatB = new hxmath_math_QuaternionDefault(0,0,0,0);
		var _g7 = 0;
		while(_g7 < 4) {
			var i7 = _g7++;
			var tmp7;
			switch(i7) {
			case 0:
				tmp7 = quatA.s;
				break;
			case 1:
				tmp7 = quatA.x;
				break;
			case 2:
				tmp7 = quatA.y;
				break;
			case 3:
				tmp7 = quatA.z;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
			var value7 = tmp7;
			switch(i7) {
			case 0:
				quatB.s = value7;
				break;
			case 1:
				quatB.x = value7;
				break;
			case 2:
				quatB.y = value7;
				break;
			case 3:
				quatB.z = value7;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
		}
		this.assertTrue(quatA == null && quatB == null || quatA != null && quatB != null && quatA.s == quatB.s && quatA.x == quatB.x && quatA.y == quatB.y && quatA.z == quatB.z,{ fileName : "TestStructures.hx", lineNumber : 380, className : "test.TestStructures", methodName : "testCopyToFrom"});
		var intVec2a = this.randomIntVector2();
		var intVec2b = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(0,0);
		var _g8 = 0;
		while(_g8 < 2) {
			var i8 = _g8++;
			var tmp8;
			switch(i8) {
			case 0:
				tmp8 = intVec2a.x;
				break;
			case 1:
				tmp8 = intVec2a.y;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
			var value8 = tmp8;
			switch(i8) {
			case 0:
				intVec2b.x = value8;
				break;
			case 1:
				intVec2b.y = value8;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
		}
		this.assertTrue(intVec2a == null && intVec2b == null || intVec2a != null && intVec2b != null && intVec2a.x == intVec2b.x && intVec2a.y == intVec2b.y,{ fileName : "TestStructures.hx", lineNumber : 385, className : "test.TestStructures", methodName : "testCopyToFrom"});
	}
	,testRowColAccessors: function() {
		var basis2 = [new hxmath_math_Vector2Default(1.0,0.0),new hxmath_math_Vector2Default(0.0,1.0)];
		var _g = 0;
		while(_g < 2) {
			var i = _g++;
			var self = new hxmath_math_Matrix2x2Default(1.0,0.0,0.0,1.0);
			var a;
			switch(i) {
			case 0:
				a = new hxmath_math_Vector2Default(self.a,self.c);
				break;
			case 1:
				a = new hxmath_math_Vector2Default(self.b,self.d);
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid column");
			}
			var b = basis2[i];
			this.assertTrue(a == null && b == null || a != null && b != null && a.x == b.x && a.y == b.y,{ fileName : "TestStructures.hx", lineNumber : 394, className : "test.TestStructures", methodName : "testRowColAccessors"});
			var self1 = new hxmath_math_Matrix2x2Default(1.0,0.0,0.0,1.0);
			var a1;
			switch(i) {
			case 0:
				a1 = new hxmath_math_Vector2Default(self1.a,self1.b);
				break;
			case 1:
				a1 = new hxmath_math_Vector2Default(self1.c,self1.d);
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid row");
			}
			var b1 = basis2[i];
			this.assertTrue(a1 == null && b1 == null || a1 != null && b1 != null && a1.x == b1.x && a1.y == b1.y,{ fileName : "TestStructures.hx", lineNumber : 395, className : "test.TestStructures", methodName : "testRowColAccessors"});
		}
		var basis32Rows = [new hxmath_math_Vector3Default(1.0,0.0,0.0),new hxmath_math_Vector3Default(0.0,1.0,0.0)];
		var basis32Cols = [new hxmath_math_Vector2Default(1.0,0.0),new hxmath_math_Vector2Default(0.0,1.0),new hxmath_math_Vector2Default(0.0,0.0)];
		var _g1 = 0;
		while(_g1 < 2) {
			var i1 = _g1++;
			var self2 = new hxmath_math_Matrix3x2Default(1.0,0.0,0.0,1.0,0.0,0.0);
			var a2;
			switch(i1) {
			case 0:
				a2 = new hxmath_math_Vector3Default(self2.a,self2.b,self2.tx);
				break;
			case 1:
				a2 = new hxmath_math_Vector3Default(self2.c,self2.d,self2.ty);
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid row");
			}
			var b2 = basis32Rows[i1];
			this.assertTrue(a2 == null && b2 == null || a2 != null && b2 != null && a2.x == b2.x && a2.y == b2.y && a2.z == b2.z,{ fileName : "TestStructures.hx", lineNumber : 403, className : "test.TestStructures", methodName : "testRowColAccessors"});
		}
		var _g2 = 0;
		while(_g2 < 3) {
			var i2 = _g2++;
			var self3 = new hxmath_math_Matrix3x2Default(1.0,0.0,0.0,1.0,0.0,0.0);
			var a3;
			switch(i2) {
			case 0:
				a3 = new hxmath_math_Vector2Default(self3.a,self3.c);
				break;
			case 1:
				a3 = new hxmath_math_Vector2Default(self3.b,self3.d);
				break;
			case 2:
				a3 = new hxmath_math_Vector2Default(self3.tx,self3.ty);
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid column");
			}
			var b3 = basis32Cols[i2];
			this.assertTrue(a3 == null && b3 == null || a3 != null && b3 != null && a3.x == b3.x && a3.y == b3.y,{ fileName : "TestStructures.hx", lineNumber : 408, className : "test.TestStructures", methodName : "testRowColAccessors"});
		}
		var basis3 = [new hxmath_math_Vector3Default(1.0,0.0,0.0),new hxmath_math_Vector3Default(0.0,1.0,0.0),new hxmath_math_Vector3Default(0.0,0.0,1.0)];
		var _g3 = 0;
		while(_g3 < 3) {
			var i3 = _g3++;
			var self4 = new hxmath_math_Matrix3x3Default(1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0);
			var a4;
			switch(i3) {
			case 0:
				a4 = new hxmath_math_Vector3Default(self4.m00,self4.m01,self4.m02);
				break;
			case 1:
				a4 = new hxmath_math_Vector3Default(self4.m10,self4.m11,self4.m12);
				break;
			case 2:
				a4 = new hxmath_math_Vector3Default(self4.m20,self4.m21,self4.m22);
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid column");
			}
			var b4 = basis3[i3];
			this.assertTrue(a4 == null && b4 == null || a4 != null && b4 != null && a4.x == b4.x && a4.y == b4.y && a4.z == b4.z,{ fileName : "TestStructures.hx", lineNumber : 415, className : "test.TestStructures", methodName : "testRowColAccessors"});
			var self5 = new hxmath_math_Matrix3x3Default(1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0);
			var a5;
			switch(i3) {
			case 0:
				a5 = new hxmath_math_Vector3Default(self5.m00,self5.m10,self5.m20);
				break;
			case 1:
				a5 = new hxmath_math_Vector3Default(self5.m01,self5.m11,self5.m21);
				break;
			case 2:
				a5 = new hxmath_math_Vector3Default(self5.m02,self5.m12,self5.m22);
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid row");
			}
			var b5 = basis3[i3];
			this.assertTrue(a5 == null && b5 == null || a5 != null && b5 != null && a5.x == b5.x && a5.y == b5.y && a5.z == b5.z,{ fileName : "TestStructures.hx", lineNumber : 416, className : "test.TestStructures", methodName : "testRowColAccessors"});
		}
		var basis4 = [new hxmath_math_Vector4Default(1.0,0.0,0.0,0.0),new hxmath_math_Vector4Default(0.0,1.0,0.0,0.0),new hxmath_math_Vector4Default(0.0,0.0,1.0,0.0),new hxmath_math_Vector4Default(0.0,0.0,0.0,1.0)];
		var _g4 = 0;
		while(_g4 < 4) {
			var i4 = _g4++;
			var self6 = new hxmath_math_Matrix4x4Default(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
			var a6;
			switch(i4) {
			case 0:
				a6 = new hxmath_math_Vector4Default(self6.m00,self6.m01,self6.m02,self6.m03);
				break;
			case 1:
				a6 = new hxmath_math_Vector4Default(self6.m10,self6.m11,self6.m12,self6.m13);
				break;
			case 2:
				a6 = new hxmath_math_Vector4Default(self6.m20,self6.m21,self6.m22,self6.m23);
				break;
			case 3:
				a6 = new hxmath_math_Vector4Default(self6.m30,self6.m31,self6.m32,self6.m33);
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid column");
			}
			var b6 = basis4[i4];
			this.assertTrue(a6 == null && b6 == null || a6 != null && b6 != null && a6.x == b6.x && a6.y == b6.y && a6.z == b6.z && a6.w == b6.w,{ fileName : "TestStructures.hx", lineNumber : 423, className : "test.TestStructures", methodName : "testRowColAccessors"});
			var self7 = new hxmath_math_Matrix4x4Default(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
			var a7;
			switch(i4) {
			case 0:
				a7 = new hxmath_math_Vector4Default(self7.m00,self7.m10,self7.m20,self7.m30);
				break;
			case 1:
				a7 = new hxmath_math_Vector4Default(self7.m01,self7.m11,self7.m21,self7.m31);
				break;
			case 2:
				a7 = new hxmath_math_Vector4Default(self7.m02,self7.m12,self7.m22,self7.m32);
				break;
			case 3:
				a7 = new hxmath_math_Vector4Default(self7.m03,self7.m13,self7.m23,self7.m33);
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid row");
			}
			var b7 = basis4[i4];
			this.assertTrue(a7 == null && b7 == null || a7 != null && b7 != null && a7.x == b7.x && a7.y == b7.y && a7.z == b7.z && a7.w == b7.w,{ fileName : "TestStructures.hx", lineNumber : 424, className : "test.TestStructures", methodName : "testRowColAccessors"});
		}
	}
	,testEqualsNullShouldNotThrow: function() {
		this.assertTrue(new hxmath_math_Vector2Default(0.0,0.0) != null,{ fileName : "TestStructures.hx", lineNumber : 433, className : "test.TestStructures", methodName : "testEqualsNullShouldNotThrow"});
		this.assertTrue(new hxmath_math_Vector3Default(0.0,0.0,0.0) != null,{ fileName : "TestStructures.hx", lineNumber : 434, className : "test.TestStructures", methodName : "testEqualsNullShouldNotThrow"});
		this.assertTrue(new hxmath_math_Vector4Default(0.0,0.0,0.0,0.0) != null,{ fileName : "TestStructures.hx", lineNumber : 435, className : "test.TestStructures", methodName : "testEqualsNullShouldNotThrow"});
		this.assertTrue(new hxmath_math_Matrix2x2Default(0.0,0.0,0.0,0.0) != null,{ fileName : "TestStructures.hx", lineNumber : 436, className : "test.TestStructures", methodName : "testEqualsNullShouldNotThrow"});
		this.assertTrue(new hxmath_math_Matrix3x2Default(0.0,0.0,0.0,0.0,0.0,0.0) != null,{ fileName : "TestStructures.hx", lineNumber : 437, className : "test.TestStructures", methodName : "testEqualsNullShouldNotThrow"});
		this.assertTrue(new hxmath_math_Matrix3x3Default(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) != null,{ fileName : "TestStructures.hx", lineNumber : 438, className : "test.TestStructures", methodName : "testEqualsNullShouldNotThrow"});
		this.assertTrue(new hxmath_math_Matrix4x4Default(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) != null,{ fileName : "TestStructures.hx", lineNumber : 439, className : "test.TestStructures", methodName : "testEqualsNullShouldNotThrow"});
		this.assertTrue(new hxmath_math_QuaternionDefault(0,0,0,0) != null,{ fileName : "TestStructures.hx", lineNumber : 440, className : "test.TestStructures", methodName : "testEqualsNullShouldNotThrow"});
		this.assertTrue(hxmath_math__$IntVector2_IntVector2_$Impl_$._new(0,0) != null,{ fileName : "TestStructures.hx", lineNumber : 441, className : "test.TestStructures", methodName : "testEqualsNullShouldNotThrow"});
	}
	,testHasToString: function() {
		var structures = [new hxmath_math_Vector2Default(0,23),new hxmath_math_Vector3Default(0,23,0),new hxmath_math_Vector4Default(0,23,0,0),new hxmath_math_Matrix2x2Default(0,0,23,0),new hxmath_math_Matrix3x2Default(0,0,23,0,0,0),new hxmath_math_Matrix3x3Default(0,0,23,0,0,0,0,0,0),new hxmath_math_Matrix4x4Default(0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0),new hxmath_math_QuaternionDefault(1,0,23,0),hxmath_math__$IntVector2_IntVector2_$Impl_$._new(0,23)];
		var _g = 0;
		while(_g < structures.length) {
			var x = structures[_g];
			++_g;
			if(("" + Std.string(x)).indexOf("23") == -1) {
				console.log(x);
				this.assertTrue(false,{ fileName : "TestStructures.hx", lineNumber : 462, className : "test.TestStructures", methodName : "testHasToString"});
			}
		}
	}
	,testVectorMinMax: function() {
		var v2Axes = [new hxmath_math_Vector2Default(1.0,0.0),new hxmath_math_Vector2Default(0.0,1.0)];
		var v2AxesMax = Lambda.fold(v2Axes,hxmath_math__$Vector2_Vector2_$Impl_$.max,new hxmath_math_Vector2Default(1.0,0.0));
		var v2AxesMin = Lambda.fold(v2Axes,hxmath_math__$Vector2_Vector2_$Impl_$.min,new hxmath_math_Vector2Default(1.0,0.0));
		var v2AxesSum = Lambda.fold(v2Axes,hxmath_math__$Vector2_Vector2_$Impl_$.add,new hxmath_math_Vector2Default(0.0,0.0));
		this.assertTrue(v2AxesMax == null && v2AxesSum == null || v2AxesMax != null && v2AxesSum != null && v2AxesMax.x == v2AxesSum.x && v2AxesMax.y == v2AxesSum.y,{ fileName : "TestStructures.hx", lineNumber : 474, className : "test.TestStructures", methodName : "testVectorMinMax"});
		var b = new hxmath_math_Vector2Default(0.0,0.0);
		this.assertTrue(v2AxesMin == null && b == null || v2AxesMin != null && b != null && v2AxesMin.x == b.x && v2AxesMin.y == b.y,{ fileName : "TestStructures.hx", lineNumber : 475, className : "test.TestStructures", methodName : "testVectorMinMax"});
		var v3Axes = [new hxmath_math_Vector3Default(1.0,0.0,0.0),new hxmath_math_Vector3Default(0.0,1.0,0.0),new hxmath_math_Vector3Default(0.0,0.0,1.0)];
		var v3AxesMax = Lambda.fold(v3Axes,hxmath_math__$Vector3_Vector3_$Impl_$.max,new hxmath_math_Vector3Default(1.0,0.0,0.0));
		var v3AxesMin = Lambda.fold(v3Axes,hxmath_math__$Vector3_Vector3_$Impl_$.min,new hxmath_math_Vector3Default(1.0,0.0,0.0));
		var v3AxesSum = Lambda.fold(v3Axes,hxmath_math__$Vector3_Vector3_$Impl_$.add,new hxmath_math_Vector3Default(0.0,0.0,0.0));
		this.assertTrue(v3AxesMax == null && v3AxesSum == null || v3AxesMax != null && v3AxesSum != null && v3AxesMax.x == v3AxesSum.x && v3AxesMax.y == v3AxesSum.y && v3AxesMax.z == v3AxesSum.z,{ fileName : "TestStructures.hx", lineNumber : 482, className : "test.TestStructures", methodName : "testVectorMinMax"});
		var b1 = new hxmath_math_Vector3Default(0.0,0.0,0.0);
		this.assertTrue(v3AxesMin == null && b1 == null || v3AxesMin != null && b1 != null && v3AxesMin.x == b1.x && v3AxesMin.y == b1.y && v3AxesMin.z == b1.z,{ fileName : "TestStructures.hx", lineNumber : 483, className : "test.TestStructures", methodName : "testVectorMinMax"});
		var v4Axes = [new hxmath_math_Vector4Default(1.0,0.0,0.0,0.0),new hxmath_math_Vector4Default(0.0,1.0,0.0,0.0),new hxmath_math_Vector4Default(0.0,0.0,1.0,0.0),new hxmath_math_Vector4Default(0.0,0.0,0.0,1.0)];
		var v4AxesMax = Lambda.fold(v4Axes,hxmath_math__$Vector4_Vector4_$Impl_$.max,new hxmath_math_Vector4Default(1.0,0.0,0.0,0.0));
		var v4AxesMin = Lambda.fold(v4Axes,hxmath_math__$Vector4_Vector4_$Impl_$.min,new hxmath_math_Vector4Default(1.0,0.0,0.0,0.0));
		var v4AxesSum = Lambda.fold(v4Axes,hxmath_math__$Vector4_Vector4_$Impl_$.add,new hxmath_math_Vector4Default(0.0,0.0,0.0,0.0));
		this.assertTrue(v4AxesMax == null && v4AxesSum == null || v4AxesMax != null && v4AxesSum != null && v4AxesMax.x == v4AxesSum.x && v4AxesMax.y == v4AxesSum.y && v4AxesMax.z == v4AxesSum.z && v4AxesMax.w == v4AxesSum.w,{ fileName : "TestStructures.hx", lineNumber : 490, className : "test.TestStructures", methodName : "testVectorMinMax"});
		var b2 = new hxmath_math_Vector4Default(0.0,0.0,0.0,0.0);
		this.assertTrue(v4AxesMin == null && b2 == null || v4AxesMin != null && b2 != null && v4AxesMin.x == b2.x && v4AxesMin.y == b2.y && v4AxesMin.z == b2.z && v4AxesMin.w == b2.w,{ fileName : "TestStructures.hx", lineNumber : 491, className : "test.TestStructures", methodName : "testVectorMinMax"});
		var v2iAxes = [hxmath_math__$IntVector2_IntVector2_$Impl_$._new(1,0),hxmath_math__$IntVector2_IntVector2_$Impl_$._new(0,1)];
		var v2iAxesMax = Lambda.fold(v2iAxes,hxmath_math__$IntVector2_IntVector2_$Impl_$.max,hxmath_math__$IntVector2_IntVector2_$Impl_$._new(1,0));
		var v2iAxesMin = Lambda.fold(v2iAxes,hxmath_math__$IntVector2_IntVector2_$Impl_$.min,hxmath_math__$IntVector2_IntVector2_$Impl_$._new(1,0));
		var v2iAxesSum = Lambda.fold(v2iAxes,hxmath_math__$IntVector2_IntVector2_$Impl_$.add,hxmath_math__$IntVector2_IntVector2_$Impl_$._new(0,0));
		this.assertTrue(v2iAxesMax == null && v2iAxesSum == null || v2iAxesMax != null && v2iAxesSum != null && v2iAxesMax.x == v2iAxesSum.x && v2iAxesMax.y == v2iAxesSum.y,{ fileName : "TestStructures.hx", lineNumber : 498, className : "test.TestStructures", methodName : "testVectorMinMax"});
		var b3 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(0,0);
		this.assertTrue(v2iAxesMin == null && b3 == null || v2iAxesMin != null && b3 != null && v2iAxesMin.x == b3.x && v2iAxesMin.y == b3.y,{ fileName : "TestStructures.hx", lineNumber : 499, className : "test.TestStructures", methodName : "testVectorMinMax"});
		var v2sAxes = [hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(1,0),hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(0,1)];
		var v2sAxesMax = Lambda.fold(v2sAxes,hxmath_math__$ShortVector2_ShortVector2_$Impl_$.max,hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(1,0));
		var v2sAxesMin = Lambda.fold(v2sAxes,hxmath_math__$ShortVector2_ShortVector2_$Impl_$.min,hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(1,0));
		this.assertTrue(v2sAxesMax == Lambda.fold(v2sAxes,hxmath_math__$ShortVector2_ShortVector2_$Impl_$.add,hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(0,0)),{ fileName : "TestStructures.hx", lineNumber : 506, className : "test.TestStructures", methodName : "testVectorMinMax"});
		this.assertTrue(v2sAxesMin == hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(0,0),{ fileName : "TestStructures.hx", lineNumber : 507, className : "test.TestStructures", methodName : "testVectorMinMax"});
	}
	,testVectorProj: function() {
		var a = new hxmath_math_Vector2Default(1.0,0.0);
		var b = new hxmath_math_Vector2Default(0.0,1.0);
		var self = new hxmath_math_Vector2Default(a.x,a.y);
		var s = (self.x * b.x + self.y * b.y) / (b.x * b.x + b.y * b.y);
		var _g = 0;
		while(_g < 2) {
			var i = _g++;
			var tmp;
			switch(i) {
			case 0:
				tmp = b.x;
				break;
			case 1:
				tmp = b.y;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
			var value = tmp;
			switch(i) {
			case 0:
				self.x = value;
				break;
			case 1:
				self.y = value;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
		}
		self.x *= s;
		self.y *= s;
		var b1 = new hxmath_math_Vector2Default(0.0,0.0);
		this.assertTrue(self == null && b1 == null || self != null && b1 != null && self.x == b1.x && self.y == b1.y,{ fileName : "TestStructures.hx", lineNumber : 514, className : "test.TestStructures", methodName : "testVectorProj"});
		var v2Mid = new hxmath_math_Vector2Default(0.5,0.5);
		var _g_head = Lambda.map([new hxmath_math_Vector2Default(1.0,0.0),new hxmath_math_Vector2Default(0.0,1.0)],function(a1) {
			var self1 = v2Mid;
			var self2 = new hxmath_math_Vector2Default(self1.x,self1.y);
			var s1 = (self2.x * a1.x + self2.y * a1.y) / (a1.x * a1.x + a1.y * a1.y);
			var _g1 = 0;
			while(_g1 < 2) {
				var i1 = _g1++;
				var tmp1;
				switch(i1) {
				case 0:
					tmp1 = a1.x;
					break;
				case 1:
					tmp1 = a1.y;
					break;
				default:
					throw new js__$Boot_HaxeError("Invalid element");
				}
				var value1 = tmp1;
				switch(i1) {
				case 0:
					self2.x = value1;
					break;
				case 1:
					self2.y = value1;
					break;
				default:
					throw new js__$Boot_HaxeError("Invalid element");
				}
			}
			self2.x *= s1;
			self2.y *= s1;
			return self2;
		}).h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			this.assertApproxEquals(0.5,Math.sqrt(val.x * val.x + val.y * val.y),null,{ fileName : "TestStructures.hx", lineNumber : 522, className : "test.TestStructures", methodName : "testVectorProj"});
		}
		var a2 = new hxmath_math_Vector3Default(1.0,0.0,0.0);
		var b2 = new hxmath_math_Vector3Default(0.0,1.0,0.0);
		var self3 = new hxmath_math_Vector3Default(a2.x,a2.y,a2.z);
		var s2 = (self3.x * b2.x + self3.y * b2.y + self3.z * b2.z) / (b2.x * b2.x + b2.y * b2.y + b2.z * b2.z);
		var _g2 = 0;
		while(_g2 < 3) {
			var i2 = _g2++;
			var tmp2;
			switch(i2) {
			case 0:
				tmp2 = b2.x;
				break;
			case 1:
				tmp2 = b2.y;
				break;
			case 2:
				tmp2 = b2.z;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
			var value2 = tmp2;
			switch(i2) {
			case 0:
				self3.x = value2;
				break;
			case 1:
				self3.y = value2;
				break;
			case 2:
				self3.z = value2;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
		}
		self3.x *= s2;
		self3.y *= s2;
		self3.z *= s2;
		var a3 = new hxmath_math_Vector3Default(1.0,0.0,0.0);
		var b3 = new hxmath_math_Vector3Default(0.0,0.0,1.0);
		var self4 = new hxmath_math_Vector3Default(a3.x,a3.y,a3.z);
		var s3 = (self4.x * b3.x + self4.y * b3.y + self4.z * b3.z) / (b3.x * b3.x + b3.y * b3.y + b3.z * b3.z);
		var _g3 = 0;
		while(_g3 < 3) {
			var i3 = _g3++;
			var tmp3;
			switch(i3) {
			case 0:
				tmp3 = b3.x;
				break;
			case 1:
				tmp3 = b3.y;
				break;
			case 2:
				tmp3 = b3.z;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
			var value3 = tmp3;
			switch(i3) {
			case 0:
				self4.x = value3;
				break;
			case 1:
				self4.y = value3;
				break;
			case 2:
				self4.z = value3;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
		}
		self4.x *= s3;
		self4.y *= s3;
		self4.z *= s3;
		var a4 = new hxmath_math_Vector3Default(0.0,1.0,0.0);
		var b4 = new hxmath_math_Vector3Default(0.0,0.0,1.0);
		var self5 = new hxmath_math_Vector3Default(a4.x,a4.y,a4.z);
		var s4 = (self5.x * b4.x + self5.y * b4.y + self5.z * b4.z) / (b4.x * b4.x + b4.y * b4.y + b4.z * b4.z);
		var _g4 = 0;
		while(_g4 < 3) {
			var i4 = _g4++;
			var tmp4;
			switch(i4) {
			case 0:
				tmp4 = b4.x;
				break;
			case 1:
				tmp4 = b4.y;
				break;
			case 2:
				tmp4 = b4.z;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
			var value4 = tmp4;
			switch(i4) {
			case 0:
				self5.x = value4;
				break;
			case 1:
				self5.y = value4;
				break;
			case 2:
				self5.z = value4;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
		}
		self5.x *= s4;
		self5.y *= s4;
		self5.z *= s4;
		var v3AxesProj = [self3,self4,self5];
		var _g5 = 0;
		while(_g5 < v3AxesProj.length) {
			var v = v3AxesProj[_g5];
			++_g5;
			var b5 = new hxmath_math_Vector3Default(0.0,0.0,0.0);
			this.assertTrue(v == null && b5 == null || v != null && b5 != null && v.x == b5.x && v.y == b5.y && v.z == b5.z,{ fileName : "TestStructures.hx", lineNumber : 533, className : "test.TestStructures", methodName : "testVectorProj"});
		}
		var v3Mid = new hxmath_math_Vector3Default(0.5,0.5,0.5);
		var _g_head1 = Lambda.map([new hxmath_math_Vector3Default(1.0,0.0,0.0),new hxmath_math_Vector3Default(0.0,1.0,0.0),new hxmath_math_Vector3Default(0.0,0.0,1.0)],function(a5) {
			var self6 = v3Mid;
			var self7 = new hxmath_math_Vector3Default(self6.x,self6.y,self6.z);
			var s5 = (self7.x * a5.x + self7.y * a5.y + self7.z * a5.z) / (a5.x * a5.x + a5.y * a5.y + a5.z * a5.z);
			var _g6 = 0;
			while(_g6 < 3) {
				var i5 = _g6++;
				var tmp5;
				switch(i5) {
				case 0:
					tmp5 = a5.x;
					break;
				case 1:
					tmp5 = a5.y;
					break;
				case 2:
					tmp5 = a5.z;
					break;
				default:
					throw new js__$Boot_HaxeError("Invalid element");
				}
				var value5 = tmp5;
				switch(i5) {
				case 0:
					self7.x = value5;
					break;
				case 1:
					self7.y = value5;
					break;
				case 2:
					self7.z = value5;
					break;
				default:
					throw new js__$Boot_HaxeError("Invalid element");
				}
			}
			self7.x *= s5;
			self7.y *= s5;
			self7.z *= s5;
			return self7;
		}).h;
		while(_g_head1 != null) {
			var val1 = _g_head1.item;
			_g_head1 = _g_head1.next;
			this.assertApproxEquals(0.5,Math.sqrt(val1.x * val1.x + val1.y * val1.y + val1.z * val1.z),null,{ fileName : "TestStructures.hx", lineNumber : 542, className : "test.TestStructures", methodName : "testVectorProj"});
		}
		var a6 = new hxmath_math_Vector4Default(1.0,0.0,0.0,0.0);
		var b6 = new hxmath_math_Vector4Default(0.0,1.0,0.0,0.0);
		var self8 = new hxmath_math_Vector4Default(a6.x,a6.y,a6.z,a6.w);
		var s6 = (self8.x * b6.x + self8.y * b6.y + self8.z * b6.z + self8.w * b6.w) / (b6.x * b6.x + b6.y * b6.y + b6.z * b6.z + b6.w * b6.w);
		var _g7 = 0;
		while(_g7 < 4) {
			var i6 = _g7++;
			var tmp6;
			switch(i6) {
			case 0:
				tmp6 = b6.x;
				break;
			case 1:
				tmp6 = b6.y;
				break;
			case 2:
				tmp6 = b6.z;
				break;
			case 3:
				tmp6 = b6.w;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
			var value6 = tmp6;
			switch(i6) {
			case 0:
				self8.x = value6;
				break;
			case 1:
				self8.y = value6;
				break;
			case 2:
				self8.z = value6;
				break;
			case 3:
				self8.w = value6;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
		}
		self8.x *= s6;
		self8.y *= s6;
		self8.z *= s6;
		self8.w *= s6;
		var a7 = new hxmath_math_Vector4Default(1.0,0.0,0.0,0.0);
		var b7 = new hxmath_math_Vector4Default(0.0,0.0,1.0,0.0);
		var self9 = new hxmath_math_Vector4Default(a7.x,a7.y,a7.z,a7.w);
		var s7 = (self9.x * b7.x + self9.y * b7.y + self9.z * b7.z + self9.w * b7.w) / (b7.x * b7.x + b7.y * b7.y + b7.z * b7.z + b7.w * b7.w);
		var _g8 = 0;
		while(_g8 < 4) {
			var i7 = _g8++;
			var tmp7;
			switch(i7) {
			case 0:
				tmp7 = b7.x;
				break;
			case 1:
				tmp7 = b7.y;
				break;
			case 2:
				tmp7 = b7.z;
				break;
			case 3:
				tmp7 = b7.w;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
			var value7 = tmp7;
			switch(i7) {
			case 0:
				self9.x = value7;
				break;
			case 1:
				self9.y = value7;
				break;
			case 2:
				self9.z = value7;
				break;
			case 3:
				self9.w = value7;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
		}
		self9.x *= s7;
		self9.y *= s7;
		self9.z *= s7;
		self9.w *= s7;
		var a8 = new hxmath_math_Vector4Default(1.0,0.0,0.0,0.0);
		var b8 = new hxmath_math_Vector4Default(0.0,0.0,0.0,1.0);
		var self10 = new hxmath_math_Vector4Default(a8.x,a8.y,a8.z,a8.w);
		var s8 = (self10.x * b8.x + self10.y * b8.y + self10.z * b8.z + self10.w * b8.w) / (b8.x * b8.x + b8.y * b8.y + b8.z * b8.z + b8.w * b8.w);
		var _g9 = 0;
		while(_g9 < 4) {
			var i8 = _g9++;
			var tmp8;
			switch(i8) {
			case 0:
				tmp8 = b8.x;
				break;
			case 1:
				tmp8 = b8.y;
				break;
			case 2:
				tmp8 = b8.z;
				break;
			case 3:
				tmp8 = b8.w;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
			var value8 = tmp8;
			switch(i8) {
			case 0:
				self10.x = value8;
				break;
			case 1:
				self10.y = value8;
				break;
			case 2:
				self10.z = value8;
				break;
			case 3:
				self10.w = value8;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
		}
		self10.x *= s8;
		self10.y *= s8;
		self10.z *= s8;
		self10.w *= s8;
		var a9 = new hxmath_math_Vector4Default(0.0,1.0,0.0,0.0);
		var b9 = new hxmath_math_Vector4Default(0.0,0.0,1.0,0.0);
		var self11 = new hxmath_math_Vector4Default(a9.x,a9.y,a9.z,a9.w);
		var s9 = (self11.x * b9.x + self11.y * b9.y + self11.z * b9.z + self11.w * b9.w) / (b9.x * b9.x + b9.y * b9.y + b9.z * b9.z + b9.w * b9.w);
		var _g10 = 0;
		while(_g10 < 4) {
			var i9 = _g10++;
			var tmp9;
			switch(i9) {
			case 0:
				tmp9 = b9.x;
				break;
			case 1:
				tmp9 = b9.y;
				break;
			case 2:
				tmp9 = b9.z;
				break;
			case 3:
				tmp9 = b9.w;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
			var value9 = tmp9;
			switch(i9) {
			case 0:
				self11.x = value9;
				break;
			case 1:
				self11.y = value9;
				break;
			case 2:
				self11.z = value9;
				break;
			case 3:
				self11.w = value9;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
		}
		self11.x *= s9;
		self11.y *= s9;
		self11.z *= s9;
		self11.w *= s9;
		var a10 = new hxmath_math_Vector4Default(0.0,1.0,0.0,0.0);
		var b10 = new hxmath_math_Vector4Default(0.0,0.0,0.0,1.0);
		var self12 = new hxmath_math_Vector4Default(a10.x,a10.y,a10.z,a10.w);
		var s10 = (self12.x * b10.x + self12.y * b10.y + self12.z * b10.z + self12.w * b10.w) / (b10.x * b10.x + b10.y * b10.y + b10.z * b10.z + b10.w * b10.w);
		var _g11 = 0;
		while(_g11 < 4) {
			var i10 = _g11++;
			var tmp10;
			switch(i10) {
			case 0:
				tmp10 = b10.x;
				break;
			case 1:
				tmp10 = b10.y;
				break;
			case 2:
				tmp10 = b10.z;
				break;
			case 3:
				tmp10 = b10.w;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
			var value10 = tmp10;
			switch(i10) {
			case 0:
				self12.x = value10;
				break;
			case 1:
				self12.y = value10;
				break;
			case 2:
				self12.z = value10;
				break;
			case 3:
				self12.w = value10;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
		}
		self12.x *= s10;
		self12.y *= s10;
		self12.z *= s10;
		self12.w *= s10;
		var a11 = new hxmath_math_Vector4Default(0.0,0.0,1.0,0.0);
		var b11 = new hxmath_math_Vector4Default(0.0,0.0,0.0,1.0);
		var self13 = new hxmath_math_Vector4Default(a11.x,a11.y,a11.z,a11.w);
		var s11 = (self13.x * b11.x + self13.y * b11.y + self13.z * b11.z + self13.w * b11.w) / (b11.x * b11.x + b11.y * b11.y + b11.z * b11.z + b11.w * b11.w);
		var _g12 = 0;
		while(_g12 < 4) {
			var i11 = _g12++;
			var tmp11;
			switch(i11) {
			case 0:
				tmp11 = b11.x;
				break;
			case 1:
				tmp11 = b11.y;
				break;
			case 2:
				tmp11 = b11.z;
				break;
			case 3:
				tmp11 = b11.w;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
			var value11 = tmp11;
			switch(i11) {
			case 0:
				self13.x = value11;
				break;
			case 1:
				self13.y = value11;
				break;
			case 2:
				self13.z = value11;
				break;
			case 3:
				self13.w = value11;
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid element");
			}
		}
		self13.x *= s11;
		self13.y *= s11;
		self13.z *= s11;
		self13.w *= s11;
		var v4AxesProj = [self8,self9,self10,self11,self12,self13];
		var _g13 = 0;
		while(_g13 < v4AxesProj.length) {
			var v1 = v4AxesProj[_g13];
			++_g13;
			var b12 = new hxmath_math_Vector4Default(0.0,0.0,0.0,0.0);
			this.assertTrue(v1 == null && b12 == null || v1 != null && b12 != null && v1.x == b12.x && v1.y == b12.y && v1.z == b12.z && v1.w == b12.w,{ fileName : "TestStructures.hx", lineNumber : 556, className : "test.TestStructures", methodName : "testVectorProj"});
		}
		var v4Mid = new hxmath_math_Vector4Default(0.5,0.5,0.5,0.5);
		var _g_head2 = Lambda.map([new hxmath_math_Vector4Default(1.0,0.0,0.0,0.0),new hxmath_math_Vector4Default(0.0,1.0,0.0,0.0),new hxmath_math_Vector4Default(0.0,0.0,1.0,0.0),new hxmath_math_Vector4Default(0.0,0.0,0.0,1.0)],function(a12) {
			var self14 = v4Mid;
			var self15 = new hxmath_math_Vector4Default(self14.x,self14.y,self14.z,self14.w);
			var s12 = (self15.x * a12.x + self15.y * a12.y + self15.z * a12.z + self15.w * a12.w) / (a12.x * a12.x + a12.y * a12.y + a12.z * a12.z + a12.w * a12.w);
			var _g14 = 0;
			while(_g14 < 4) {
				var i12 = _g14++;
				var tmp12;
				switch(i12) {
				case 0:
					tmp12 = a12.x;
					break;
				case 1:
					tmp12 = a12.y;
					break;
				case 2:
					tmp12 = a12.z;
					break;
				case 3:
					tmp12 = a12.w;
					break;
				default:
					throw new js__$Boot_HaxeError("Invalid element");
				}
				var value12 = tmp12;
				switch(i12) {
				case 0:
					self15.x = value12;
					break;
				case 1:
					self15.y = value12;
					break;
				case 2:
					self15.z = value12;
					break;
				case 3:
					self15.w = value12;
					break;
				default:
					throw new js__$Boot_HaxeError("Invalid element");
				}
			}
			self15.x *= s12;
			self15.y *= s12;
			self15.z *= s12;
			self15.w *= s12;
			return self15;
		}).h;
		while(_g_head2 != null) {
			var val2 = _g_head2.item;
			_g_head2 = _g_head2.next;
			this.assertApproxEquals(0.5,Math.sqrt(val2.x * val2.x + val2.y * val2.y + val2.z * val2.z + val2.w * val2.w),null,{ fileName : "TestStructures.hx", lineNumber : 565, className : "test.TestStructures", methodName : "testVectorProj"});
		}
	}
	,testNormalizeTo: function() {
		var _g = 0;
		while(_g < 30) {
			++_g;
			var v = this.randomVector2();
			var newLength = Math.abs(this.randomFloat());
			var length = Math.sqrt(v.x * v.x + v.y * v.y);
			if(length > 0.0) {
				v.x /= length;
				v.y /= length;
			}
			v.x *= newLength;
			v.y *= newLength;
			var self = v;
			this.assertApproxEquals(newLength,Math.sqrt(self.x * self.x + self.y * self.y),null,{ fileName : "TestStructures.hx", lineNumber : 575, className : "test.TestStructures", methodName : "testNormalizeTo"});
		}
		var _g1 = 0;
		while(_g1 < 30) {
			++_g1;
			var v1 = this.randomVector3();
			var newLength1 = Math.abs(this.randomFloat());
			var length1 = Math.sqrt(v1.x * v1.x + v1.y * v1.y + v1.z * v1.z);
			if(length1 > 0.0) {
				v1.x /= length1;
				v1.y /= length1;
				v1.z /= length1;
			}
			v1.x *= newLength1;
			v1.y *= newLength1;
			v1.z *= newLength1;
			var self1 = v1;
			this.assertApproxEquals(newLength1,Math.sqrt(self1.x * self1.x + self1.y * self1.y + self1.z * self1.z),null,{ fileName : "TestStructures.hx", lineNumber : 582, className : "test.TestStructures", methodName : "testNormalizeTo"});
		}
		var _g2 = 0;
		while(_g2 < 30) {
			++_g2;
			var v2 = this.randomVector4();
			var newLength2 = Math.abs(this.randomFloat());
			var length2 = Math.sqrt(v2.x * v2.x + v2.y * v2.y + v2.z * v2.z + v2.w * v2.w);
			if(length2 > 0.0) {
				v2.x /= length2;
				v2.y /= length2;
				v2.z /= length2;
				v2.w /= length2;
			}
			v2.x *= newLength2;
			v2.y *= newLength2;
			v2.z *= newLength2;
			v2.w *= newLength2;
			var self2 = v2;
			this.assertApproxEquals(newLength2,Math.sqrt(self2.x * self2.x + self2.y * self2.y + self2.z * self2.z + self2.w * self2.w),null,{ fileName : "TestStructures.hx", lineNumber : 589, className : "test.TestStructures", methodName : "testNormalizeTo"});
		}
	}
	,testClamp: function() {
		var _g = 0;
		while(_g < 30) {
			++_g;
			var _g2 = this.randomVector2();
			var self = new hxmath_math_Vector2Default(_g2.x,_g2.y);
			self.x *= 10.0;
			self.y *= 10.0;
			var length = Math.sqrt(self.x * self.x + self.y * self.y);
			if(length < 3.0) {
				var length1 = Math.sqrt(self.x * self.x + self.y * self.y);
				if(length1 > 0.0) {
					self.x /= length1;
					self.y /= length1;
				}
				self.x *= 3.0;
				self.y *= 3.0;
			} else if(length > 7.0) {
				var length2 = Math.sqrt(self.x * self.x + self.y * self.y);
				if(length2 > 0.0) {
					self.x /= length2;
					self.y /= length2;
				}
				self.x *= 7.0;
				self.y *= 7.0;
			}
			this.assertTrue(Math.sqrt(self.x * self.x + self.y * self.y) >= 2.999999,{ fileName : "TestStructures.hx", lineNumber : 604, className : "test.TestStructures", methodName : "testClamp"});
			this.assertTrue(Math.sqrt(self.x * self.x + self.y * self.y) <= 7.000001,{ fileName : "TestStructures.hx", lineNumber : 605, className : "test.TestStructures", methodName : "testClamp"});
		}
		var _g1 = 0;
		while(_g1 < 30) {
			++_g1;
			var _g21 = this.randomVector3();
			var self1 = new hxmath_math_Vector3Default(_g21.x,_g21.y,_g21.z);
			self1.x *= 10.0;
			self1.y *= 10.0;
			self1.z *= 10.0;
			var length3 = Math.sqrt(self1.x * self1.x + self1.y * self1.y + self1.z * self1.z);
			if(length3 < 3.0) {
				var length4 = Math.sqrt(self1.x * self1.x + self1.y * self1.y + self1.z * self1.z);
				if(length4 > 0.0) {
					self1.x /= length4;
					self1.y /= length4;
					self1.z /= length4;
				}
				self1.x *= 3.0;
				self1.y *= 3.0;
				self1.z *= 3.0;
			} else if(length3 > 7.0) {
				var length5 = Math.sqrt(self1.x * self1.x + self1.y * self1.y + self1.z * self1.z);
				if(length5 > 0.0) {
					self1.x /= length5;
					self1.y /= length5;
					self1.z /= length5;
				}
				self1.x *= 7.0;
				self1.y *= 7.0;
				self1.z *= 7.0;
			}
			this.assertTrue(Math.sqrt(self1.x * self1.x + self1.y * self1.y + self1.z * self1.z) >= 2.999999,{ fileName : "TestStructures.hx", lineNumber : 617, className : "test.TestStructures", methodName : "testClamp"});
			this.assertTrue(Math.sqrt(self1.x * self1.x + self1.y * self1.y + self1.z * self1.z) <= 7.000001,{ fileName : "TestStructures.hx", lineNumber : 618, className : "test.TestStructures", methodName : "testClamp"});
		}
		var _g3 = 0;
		while(_g3 < 30) {
			++_g3;
			var _g22 = this.randomVector4();
			var self2 = new hxmath_math_Vector4Default(_g22.x,_g22.y,_g22.z,_g22.w);
			self2.x *= 10.0;
			self2.y *= 10.0;
			self2.z *= 10.0;
			self2.w *= 10.0;
			var length6 = Math.sqrt(self2.x * self2.x + self2.y * self2.y + self2.z * self2.z + self2.w * self2.w);
			if(length6 < 3.0) {
				var length7 = Math.sqrt(self2.x * self2.x + self2.y * self2.y + self2.z * self2.z + self2.w * self2.w);
				if(length7 > 0.0) {
					self2.x /= length7;
					self2.y /= length7;
					self2.z /= length7;
					self2.w /= length7;
				}
				self2.x *= 3.0;
				self2.y *= 3.0;
				self2.z *= 3.0;
				self2.w *= 3.0;
			} else if(length6 > 7.0) {
				var length8 = Math.sqrt(self2.x * self2.x + self2.y * self2.y + self2.z * self2.z + self2.w * self2.w);
				if(length8 > 0.0) {
					self2.x /= length8;
					self2.y /= length8;
					self2.z /= length8;
					self2.w /= length8;
				}
				self2.x *= 7.0;
				self2.y *= 7.0;
				self2.z *= 7.0;
				self2.w *= 7.0;
			}
			this.assertTrue(Math.sqrt(self2.x * self2.x + self2.y * self2.y + self2.z * self2.z + self2.w * self2.w) >= 2.999999,{ fileName : "TestStructures.hx", lineNumber : 630, className : "test.TestStructures", methodName : "testClamp"});
			this.assertTrue(Math.sqrt(self2.x * self2.x + self2.y * self2.y + self2.z * self2.z + self2.w * self2.w) <= 7.000001,{ fileName : "TestStructures.hx", lineNumber : 631, className : "test.TestStructures", methodName : "testClamp"});
		}
	}
	,testDistanceTo: function() {
		var this1 = new hxmath_math_Vector2Default(0.0,0.0);
		var b = new hxmath_math_Vector2Default(1.0,0.0);
		var self = this1;
		var self1 = new hxmath_math_Vector2Default(self.x,self.y);
		self1.x -= b.x;
		self1.y -= b.y;
		var self2 = self1;
		this.assertApproxEquals(1.0,Math.sqrt(self2.x * self2.x + self2.y * self2.y),null,{ fileName : "TestStructures.hx", lineNumber : 637, className : "test.TestStructures", methodName : "testDistanceTo"});
		var this2 = new hxmath_math_Vector3Default(0.0,0.0,0.0);
		var b1 = new hxmath_math_Vector3Default(1.0,0.0,0.0);
		var self3 = this2;
		var self4 = new hxmath_math_Vector3Default(self3.x,self3.y,self3.z);
		self4.x -= b1.x;
		self4.y -= b1.y;
		self4.z -= b1.z;
		var self5 = self4;
		this.assertApproxEquals(1.0,Math.sqrt(self5.x * self5.x + self5.y * self5.y + self5.z * self5.z),null,{ fileName : "TestStructures.hx", lineNumber : 638, className : "test.TestStructures", methodName : "testDistanceTo"});
		var this3 = new hxmath_math_Vector4Default(0.0,0.0,0.0,0.0);
		var b2 = new hxmath_math_Vector4Default(1.0,0.0,0.0,0.0);
		var self6 = this3;
		var self7 = new hxmath_math_Vector4Default(self6.x,self6.y,self6.z,self6.w);
		self7.x -= b2.x;
		self7.y -= b2.y;
		self7.z -= b2.z;
		self7.w -= b2.w;
		var self8 = self7;
		this.assertApproxEquals(1.0,Math.sqrt(self8.x * self8.x + self8.y * self8.y + self8.z * self8.z + self8.w * self8.w),null,{ fileName : "TestStructures.hx", lineNumber : 639, className : "test.TestStructures", methodName : "testDistanceTo"});
	}
	,testSetAllFields: function() {
		var self = new hxmath_math_Vector2Default(0.0,0.0);
		self.x = 23;
		self.y = 0;
		this.assertEquals(23.0,self.x,{ fileName : "TestStructures.hx", lineNumber : 645, className : "test.TestStructures", methodName : "testSetAllFields"});
		var self1 = new hxmath_math_Vector3Default(0.0,0.0,0.0);
		self1.x = 23;
		self1.y = 0;
		self1.z = 0;
		this.assertEquals(23.0,self1.x,{ fileName : "TestStructures.hx", lineNumber : 648, className : "test.TestStructures", methodName : "testSetAllFields"});
		var self2 = new hxmath_math_Vector4Default(0.0,0.0,0.0,0.0);
		self2.x = 23;
		self2.y = 0;
		self2.z = 0;
		self2.w = 0;
		this.assertEquals(23.0,self2.x,{ fileName : "TestStructures.hx", lineNumber : 651, className : "test.TestStructures", methodName : "testSetAllFields"});
		var self3 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(0,0);
		self3.x = 23;
		self3.y = 0;
		this.assertEquals(23,self3.x,{ fileName : "TestStructures.hx", lineNumber : 654, className : "test.TestStructures", methodName : "testSetAllFields"});
		var self4 = new hxmath_math_QuaternionDefault(0,0,0,0);
		self4.s = 23;
		self4.x = 0;
		self4.y = 0;
		self4.z = 0;
		this.assertEquals(23.0,self4.s,{ fileName : "TestStructures.hx", lineNumber : 657, className : "test.TestStructures", methodName : "testSetAllFields"});
		var this1 = new hxmath_math_Matrix2x2Default(0.0,0.0,0.0,0.0);
		var self5 = this1;
		self5.a = 23;
		self5.b = 0;
		self5.c = 0;
		self5.d = 0;
		var m22 = this1;
		this.assertEquals(23.0,m22.a,{ fileName : "TestStructures.hx", lineNumber : 660, className : "test.TestStructures", methodName : "testSetAllFields"});
		var self6 = new hxmath_math_Matrix3x2Default(0.0,0.0,0.0,0.0,0.0,0.0);
		self6.a = 23;
		self6.b = 0;
		self6.c = 0;
		self6.d = 0;
		self6.tx = 0;
		self6.ty = 0;
		this.assertEquals(23.0,self6.a,{ fileName : "TestStructures.hx", lineNumber : 663, className : "test.TestStructures", methodName : "testSetAllFields"});
		var self7 = new hxmath_math_Matrix3x3Default(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);
		self7.m00 = 23;
		self7.m10 = 0;
		self7.m20 = 0;
		self7.m01 = 0;
		self7.m11 = 0;
		self7.m21 = 0;
		self7.m02 = 0;
		self7.m12 = 0;
		self7.m22 = 0;
		this.assertEquals(23.0,self7.m00,{ fileName : "TestStructures.hx", lineNumber : 666, className : "test.TestStructures", methodName : "testSetAllFields"});
		var self8 = new hxmath_math_Matrix4x4Default(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);
		self8.m00 = 23;
		self8.m10 = 0;
		self8.m20 = 0;
		self8.m30 = 0;
		self8.m01 = 0;
		self8.m11 = 0;
		self8.m21 = 0;
		self8.m31 = 0;
		self8.m02 = 0;
		self8.m12 = 0;
		self8.m22 = 0;
		self8.m32 = 0;
		self8.m03 = 0;
		self8.m13 = 0;
		self8.m23 = 0;
		self8.m33 = 0;
		this.assertEquals(23.0,self8.m00,{ fileName : "TestStructures.hx", lineNumber : 669, className : "test.TestStructures", methodName : "testSetAllFields"});
	}
	,__class__: test_TestStructures
});
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = ["String"];
Array.__name__ = ["Array"];
hxmath_math__$IntVector2_IntVector2_$Impl_$.elementCount = 2;
hxmath_math_MathUtil.eps = 1e-6;
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.elementCount = 4;
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.elementCount = 6;
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.elementCount = 9;
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.elementCount = 16;
hxmath_math__$Quaternion_Quaternion_$Impl_$.elementCount = 4;
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.elementCount = 2;
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.bitsPerField = 16;
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.fieldMax = 65535;
hxmath_math__$Vector2_Vector2_$Impl_$.elementCount = 2;
hxmath_math__$Vector3_Vector3_$Impl_$.elementCount = 3;
hxmath_math__$Vector4_Vector4_$Impl_$.elementCount = 4;
js_Boot.__toStr = { }.toString;
nanotest_NanoTestCase.ASSERT_TRUE_ERROR = "expected true but was false";
nanotest_NanoTestCase.ASSERT_FALSE_ERROR = "expected false but was true";
nanotest_NanoTestCase.ASSERT_THROWS_ERROR = "expected to throw exception but didn't";
test_TS1.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
