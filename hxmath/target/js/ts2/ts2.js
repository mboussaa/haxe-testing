// Generated by Haxe 3.3.0
if (process.version < "v4.0.0") console.warn("Module " + (typeof(module) == "undefined" ? "" : module.filename) + " requires node.js version 4.0.0 or higher");
(function ($global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
Math.__name__ = ["Math"];
var Reflect = function() { };
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return null;
	}
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.__name__ = ["StringTools"];
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) {
		return s.split("\"").join("&quot;").split("'").join("&#039;");
	} else {
		return s;
	}
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var Type = function() { };
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		if(a[0] != b[0]) {
			return false;
		}
		var _g1 = 2;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!Type.enumEq(a[i],b[i])) {
				return false;
			}
		}
		var e = a.__enum__;
		if(e != b.__enum__ || e == null) {
			return false;
		}
	} catch( e1 ) {
		haxe_CallStack.lastException = e1;
		return false;
	}
	return true;
};
var haxe_StackItem = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; return $x; };
var haxe_CallStack = function() { };
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function"?haxe_StackItem.LocalFunction():meth == "Global code"?null:haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_unit_TestCase = function() {
};
haxe_unit_TestCase.__name__ = ["haxe","unit","TestCase"];
haxe_unit_TestCase.prototype = {
	currentTest: null
	,setup: function() {
	}
	,tearDown: function() {
	}
	,print: function(v) {
		haxe_unit_TestRunner.print(v);
	}
	,assertTrue: function(b,c) {
		this.currentTest.done = true;
		if(b != true) {
			this.currentTest.success = false;
			this.currentTest.error = "expected true but was false";
			this.currentTest.posInfos = c;
			throw new js__$Boot_HaxeError(this.currentTest);
		}
	}
	,assertFalse: function(b,c) {
		this.currentTest.done = true;
		if(b == true) {
			this.currentTest.success = false;
			this.currentTest.error = "expected false but was true";
			this.currentTest.posInfos = c;
			throw new js__$Boot_HaxeError(this.currentTest);
		}
	}
	,assertEquals: function(expected,actual,c) {
		this.currentTest.done = true;
		if(actual != expected) {
			this.currentTest.success = false;
			this.currentTest.error = "expected '" + Std.string(expected) + "' but was '" + Std.string(actual) + "'";
			this.currentTest.posInfos = c;
			throw new js__$Boot_HaxeError(this.currentTest);
		}
	}
	,__class__: haxe_unit_TestCase
};
var haxe_unit_TestRunner = function() { };
haxe_unit_TestRunner.__name__ = ["haxe","unit","TestRunner"];
haxe_unit_TestRunner.print = function(v) {
	var msg = js_Boot.__string_rec(v,"");
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		msg = StringTools.htmlEscape(msg).split("\n").join("<br/>");
		d.innerHTML += msg + "<br/>";
	} else if(typeof process != "undefined" && process.stdout != null && process.stdout.write != null) {
		process.stdout.write(msg);
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
var haxe_unit_TestStatus = function() { };
haxe_unit_TestStatus.__name__ = ["haxe","unit","TestStatus"];
haxe_unit_TestStatus.prototype = {
	done: null
	,success: null
	,error: null
	,posInfos: null
	,__class__: haxe_unit_TestStatus
};
var hxmath_frames__$Frame2_Frame2_$Impl_$ = {};
hxmath_frames__$Frame2_Frame2_$Impl_$.__name__ = ["hxmath","frames","_Frame2","Frame2_Impl_"];
hxmath_frames__$Frame2_Frame2_$Impl_$._new = function(offset,angleDegrees) {
	var this1 = new hxmath_frames_Frame2Default(offset,angleDegrees);
	return this1;
};
hxmath_frames__$Frame2_Frame2_$Impl_$.calculateMatrix = function(matrix,offset,angleDegrees) {
	var angle = Math.PI / 180 * angleDegrees;
	var s = Math.sin(angle);
	var c = Math.cos(angle);
	matrix.a = c;
	matrix.b = -s;
	matrix.c = s;
	matrix.d = c;
	var x = offset.x;
	var y = offset.y;
	matrix.tx = x;
	matrix.ty = y;
	return matrix;
};
hxmath_frames__$Frame2_Frame2_$Impl_$.lerp = function(frameA,frameB,t) {
	var a = frameA.get_offset();
	var b = frameB.get_offset();
	var tmp = new hxmath_math_Vector2Default((1.0 - t) * a.x + t * b.x,(1.0 - t) * a.y + t * b.y);
	var a1 = frameA.get_angleDegrees();
	var b1 = frameB.get_angleDegrees();
	if(Math.abs(a1 - b1) > 180.) {
		if(a1 < b1) {
			a1 += 360;
		} else {
			b1 += 360;
		}
	}
	var x = (1.0 - t) * a1 + t * b1;
	return hxmath_frames__$Frame2_Frame2_$Impl_$._new(tmp,x < 0?360 - -x % 360:x % 360);
};
hxmath_frames__$Frame2_Frame2_$Impl_$.concat = function(this1,other) {
	var self = this1;
	var self1 = hxmath_frames__$Frame2_Frame2_$Impl_$._new(self.get_offset(),self.get_angleDegrees());
	var self2 = self1.get_matrix();
	var m = new hxmath_math_Matrix2x2Default(self2.a,self2.b,self2.c,self2.d);
	var v = other.get_offset();
	var this2 = new hxmath_math_Vector2Default(m.a * v.x + m.b * v.y,m.c * v.x + m.d * v.y);
	var a = self1.get_offset();
	var self3 = this2;
	self3.x += a.x;
	self3.y += a.y;
	var x = self1.get_angleDegrees() + other.get_angleDegrees();
	self1.set_angleDegrees(x < 0?360 - -x % 360:x % 360);
	self1.set_offset(self3);
	return self1;
};
hxmath_frames__$Frame2_Frame2_$Impl_$.concatWith = function(this1,other) {
	var self = this1;
	var self1 = self.get_matrix();
	var m = new hxmath_math_Matrix2x2Default(self1.a,self1.b,self1.c,self1.d);
	var v = other.get_offset();
	var this2 = new hxmath_math_Vector2Default(m.a * v.x + m.b * v.y,m.c * v.x + m.d * v.y);
	var a = self.get_offset();
	var self2 = this2;
	self2.x += a.x;
	self2.y += a.y;
	var x = self.get_angleDegrees() + other.get_angleDegrees();
	self.set_angleDegrees(x < 0?360 - -x % 360:x % 360);
	self.set_offset(self2);
	return self;
};
hxmath_frames__$Frame2_Frame2_$Impl_$.transformFrom = function(this1,p) {
	var self = this1;
	var m = self.get_matrix();
	var m1 = new hxmath_math_Matrix2x2Default(m.a,m.b,m.c,m.d);
	var a = new hxmath_math_Vector2Default(m1.a * p.x + m1.b * p.y,m1.c * p.x + m1.d * p.y);
	var b = new hxmath_math_Vector2Default(m.tx,m.ty);
	var self1 = new hxmath_math_Vector2Default(a.x,a.y);
	self1.x += b.x;
	self1.y += b.y;
	return self1;
};
hxmath_frames__$Frame2_Frame2_$Impl_$.transformTo = function(this1,p) {
	var self = this1;
	var self1 = self.get_matrix();
	var this2 = new hxmath_math_Matrix2x2Default(self1.a,self1.b,self1.c,self1.d);
	var b = self.get_offset();
	var self2 = new hxmath_math_Vector2Default(p.x,p.y);
	self2.x -= b.x;
	self2.y -= b.y;
	var self3 = this2;
	return new hxmath_math_Vector2Default(self3.a * self2.x + self3.c * self2.y,self3.b * self2.x + self3.d * self2.y);
};
hxmath_frames__$Frame2_Frame2_$Impl_$.linearTransformFrom = function(this1,v) {
	var self = this1;
	var self1 = self.get_matrix();
	var m = new hxmath_math_Matrix2x2Default(self1.a,self1.b,self1.c,self1.d);
	return new hxmath_math_Vector2Default(m.a * v.x + m.b * v.y,m.c * v.x + m.d * v.y);
};
hxmath_frames__$Frame2_Frame2_$Impl_$.linearTransformTo = function(this1,v) {
	var self = this1;
	var self1 = self.get_matrix();
	var self2 = new hxmath_math_Matrix2x2Default(self1.a,self1.b,self1.c,self1.d);
	return new hxmath_math_Vector2Default(self2.a * v.x + self2.c * v.y,self2.b * v.x + self2.d * v.y);
};
hxmath_frames__$Frame2_Frame2_$Impl_$.inverse = function(this1) {
	var self = this1;
	var self1 = self.get_matrix();
	var this2 = new hxmath_math_Matrix2x2Default(self1.a,self1.b,self1.c,self1.d);
	var v = self.get_offset();
	var self2 = this2;
	var self3 = new hxmath_math_Vector2Default(self2.a * v.x + self2.c * v.y,self2.b * v.x + self2.d * v.y);
	self3.x = -self3.x;
	self3.y = -self3.y;
	return hxmath_frames__$Frame2_Frame2_$Impl_$._new(self3,-self.get_angleDegrees());
};
hxmath_frames__$Frame2_Frame2_$Impl_$.clone = function(this1) {
	var self = this1;
	return hxmath_frames__$Frame2_Frame2_$Impl_$._new(self.get_offset(),self.get_angleDegrees());
};
hxmath_frames__$Frame2_Frame2_$Impl_$.get_linearMatrix = function(this1) {
	var self = this1;
	var self1 = self.get_matrix();
	return new hxmath_math_Matrix2x2Default(self1.a,self1.b,self1.c,self1.d);
};
var hxmath_frames_IFrame2 = function() { };
hxmath_frames_IFrame2.__name__ = ["hxmath","frames","IFrame2"];
hxmath_frames_IFrame2.prototype = {
	get_matrix: null
	,get_offset: null
	,set_offset: null
	,get_angleDegrees: null
	,set_angleDegrees: null
	,__class__: hxmath_frames_IFrame2
};
var hxmath_frames_Frame2Default = function(offset,angleDegrees,isCached) {
	if(isCached == null) {
		isCached = true;
	}
	if(angleDegrees == null) {
		angleDegrees = 0.0;
	}
	this.isDirty = true;
	this.isCached = true;
	this.internalOffset = offset == null?new hxmath_math_Vector2Default(0.0,0.0):offset;
	this.internalAngleDegrees = angleDegrees;
	this.isCached = isCached;
	this.isDirty = true;
	this.internalMatrix = new hxmath_math_Matrix3x2Default(1.0,0.0,0.0,1.0,0.0,0.0);
};
hxmath_frames_Frame2Default.__name__ = ["hxmath","frames","Frame2Default"];
hxmath_frames_Frame2Default.__interfaces__ = [hxmath_frames_IFrame2];
hxmath_frames_Frame2Default.prototype = {
	internalMatrix: null
	,internalOffset: null
	,internalAngleDegrees: null
	,isCached: null
	,isDirty: null
	,toString: function() {
		return "Frame2 { offset: " + Std.string(this.internalOffset) + ", angleDegrees: " + this.internalAngleDegrees + " }";
	}
	,get_matrix: function() {
		if(!this.isCached || this.isDirty) {
			var matrix = this.internalMatrix;
			var offset = this.internalOffset;
			var angle = Math.PI / 180 * this.internalAngleDegrees;
			var s = Math.sin(angle);
			var c = Math.cos(angle);
			matrix.a = c;
			matrix.b = -s;
			matrix.c = s;
			matrix.d = c;
			var x = offset.x;
			var y = offset.y;
			matrix.tx = x;
			matrix.ty = y;
			this.isDirty = false;
		}
		return this.internalMatrix;
	}
	,get_offset: function() {
		return this.internalOffset;
	}
	,set_offset: function(offset) {
		this.internalOffset = offset;
		this.isDirty = true;
		return offset;
	}
	,get_angleDegrees: function() {
		return this.internalAngleDegrees;
	}
	,set_angleDegrees: function(angleDegrees) {
		this.internalAngleDegrees = angleDegrees;
		this.isDirty = true;
		return angleDegrees;
	}
	,__class__: hxmath_frames_Frame2Default
};
var hxmath_frames__$Frame3_Frame3_$Impl_$ = {};
hxmath_frames__$Frame3_Frame3_$Impl_$.__name__ = ["hxmath","frames","_Frame3","Frame3_Impl_"];
hxmath_frames__$Frame3_Frame3_$Impl_$._new = function(offset,orientation) {
	var this1 = new hxmath_frames_Frame3Default(offset,orientation);
	return this1;
};
hxmath_frames__$Frame3_Frame3_$Impl_$.calculateMatrix = function(matrix,offset,orientation) {
	var s = orientation.s;
	var x = orientation.x;
	var y = orientation.y;
	var z = orientation.z;
	matrix.m00 = 1 - 2 * (y * y + z * z);
	matrix.m10 = 2 * (x * y - s * z);
	matrix.m20 = 2 * (s * y + x * z);
	matrix.m01 = 2 * (x * y + s * z);
	matrix.m11 = 1 - 2 * (x * x + z * z);
	matrix.m21 = 2 * (y * z - s * x);
	matrix.m02 = 2 * (x * z - s * y);
	matrix.m12 = 2 * (y * z + s * x);
	matrix.m22 = 1 - 2 * (x * x + y * y);
	var x1 = offset.x;
	var y1 = offset.y;
	var z1 = offset.z;
	matrix.m30 = x1;
	matrix.m31 = y1;
	matrix.m32 = z1;
	matrix.m33 = 1.0;
	return matrix;
};
hxmath_frames__$Frame3_Frame3_$Impl_$.lerp = function(frameA,frameB,t) {
	var a = frameA.get_offset();
	var b = frameB.get_offset();
	var tmp = new hxmath_math_Vector3Default((1.0 - t) * a.x + t * b.x,(1.0 - t) * a.y + t * b.y,(1.0 - t) * a.z + t * b.z);
	var a1 = frameA.get_orientation();
	var b1 = frameB.get_orientation();
	var s = 1.0 - t;
	var self = new hxmath_math_QuaternionDefault(a1.s,a1.x,a1.y,a1.z);
	self.s *= s;
	self.x *= s;
	self.y *= s;
	self.z *= s;
	var self1 = new hxmath_math_QuaternionDefault(b1.s,b1.x,b1.y,b1.z);
	self1.s *= t;
	self1.x *= t;
	self1.y *= t;
	self1.z *= t;
	var self2 = new hxmath_math_QuaternionDefault(self.s,self.x,self.y,self.z);
	self2.s += self1.s;
	self2.x += self1.x;
	self2.y += self1.y;
	self2.z += self1.z;
	return hxmath_frames__$Frame3_Frame3_$Impl_$._new(tmp,self2);
};
hxmath_frames__$Frame3_Frame3_$Impl_$.concat = function(this1,other) {
	var self = this1;
	var self1 = hxmath_frames__$Frame3_Frame3_$Impl_$._new(self.get_offset(),self.get_orientation());
	var this2 = self1.get_orientation();
	var u = other.get_offset();
	var self2 = this2;
	var a = 2.0 * (self2.x * u.x + self2.y * u.y + self2.z * u.z);
	var b = self2.s * self2.s - self2.x * self2.x - self2.y * self2.y - self2.z * self2.z;
	var c = 2.0 * self2.s;
	var this3 = new hxmath_math_Vector3Default(a * self2.x + b * u.x + c * (self2.y * u.z - self2.z * u.y),a * self2.y + b * u.y + c * (self2.z * u.x - self2.x * u.z),a * self2.z + b * u.z + c * (self2.x * u.y - self2.y * u.x));
	var a1 = self1.get_offset();
	var self3 = this3;
	self3.x += a1.x;
	self3.y += a1.y;
	self3.z += a1.z;
	var a2 = self1.get_orientation();
	var b1 = other.get_orientation();
	var self4 = new hxmath_math_QuaternionDefault(a2.s * b1.s - a2.x * b1.x - a2.y * b1.y - a2.z * b1.z,a2.s * b1.x + b1.s * a2.x + a2.y * b1.z - a2.z * b1.y,a2.s * b1.y + b1.s * a2.y + a2.z * b1.x - a2.x * b1.z,a2.s * b1.z + b1.s * a2.z + a2.x * b1.y - a2.y * b1.x);
	var _g = 1.0 / Math.sqrt(self4.s * self4.s + self4.x * self4.x + self4.y * self4.y + self4.z * self4.z);
	var self5 = new hxmath_math_QuaternionDefault(self4.s,self4.x,self4.y,self4.z);
	self5.s *= _g;
	self5.x *= _g;
	self5.y *= _g;
	self5.z *= _g;
	self1.set_orientation(self5);
	self1.set_offset(self3);
	return self1;
};
hxmath_frames__$Frame3_Frame3_$Impl_$.concatWith = function(this1,other) {
	var self = this1;
	var this2 = self.get_orientation();
	var u = other.get_offset();
	var self1 = this2;
	var a = 2.0 * (self1.x * u.x + self1.y * u.y + self1.z * u.z);
	var b = self1.s * self1.s - self1.x * self1.x - self1.y * self1.y - self1.z * self1.z;
	var c = 2.0 * self1.s;
	var this3 = new hxmath_math_Vector3Default(a * self1.x + b * u.x + c * (self1.y * u.z - self1.z * u.y),a * self1.y + b * u.y + c * (self1.z * u.x - self1.x * u.z),a * self1.z + b * u.z + c * (self1.x * u.y - self1.y * u.x));
	var a1 = self.get_offset();
	var self2 = this3;
	self2.x += a1.x;
	self2.y += a1.y;
	self2.z += a1.z;
	var a2 = self.get_orientation();
	var b1 = other.get_orientation();
	var self3 = new hxmath_math_QuaternionDefault(a2.s * b1.s - a2.x * b1.x - a2.y * b1.y - a2.z * b1.z,a2.s * b1.x + b1.s * a2.x + a2.y * b1.z - a2.z * b1.y,a2.s * b1.y + b1.s * a2.y + a2.z * b1.x - a2.x * b1.z,a2.s * b1.z + b1.s * a2.z + a2.x * b1.y - a2.y * b1.x);
	var _g = 1.0 / Math.sqrt(self3.s * self3.s + self3.x * self3.x + self3.y * self3.y + self3.z * self3.z);
	var self4 = new hxmath_math_QuaternionDefault(self3.s,self3.x,self3.y,self3.z);
	self4.s *= _g;
	self4.x *= _g;
	self4.y *= _g;
	self4.z *= _g;
	self.set_orientation(self4);
	self.set_offset(self2);
	return self;
};
hxmath_frames__$Frame3_Frame3_$Impl_$.transformFrom = function(this1,p) {
	var self = this1;
	var self1 = self.get_orientation();
	var a = 2.0 * (self1.x * p.x + self1.y * p.y + self1.z * p.z);
	var b = self1.s * self1.s - self1.x * self1.x - self1.y * self1.y - self1.z * self1.z;
	var c = 2.0 * self1.s;
	var this2 = new hxmath_math_Vector3Default(a * self1.x + b * p.x + c * (self1.y * p.z - self1.z * p.y),a * self1.y + b * p.y + c * (self1.z * p.x - self1.x * p.z),a * self1.z + b * p.z + c * (self1.x * p.y - self1.y * p.x));
	var a1 = self.get_offset();
	var self2 = this2;
	self2.x += a1.x;
	self2.y += a1.y;
	self2.z += a1.z;
	return self2;
};
hxmath_frames__$Frame3_Frame3_$Impl_$.transformTo = function(this1,p) {
	var self = this1;
	var self1 = self.get_orientation();
	var self2 = new hxmath_math_QuaternionDefault(self1.s,self1.x,self1.y,self1.z);
	self2.x = -self2.x;
	self2.y = -self2.y;
	self2.z = -self2.z;
	var self3 = self2;
	var length = Math.sqrt(self3.s * self3.s + self3.x * self3.x + self3.y * self3.y + self3.z * self3.z);
	if(length > 0.0) {
		var k = 1.0 / length;
		self3.s *= k;
		self3.x *= k;
		self3.y *= k;
		self3.z *= k;
	}
	var this2 = self3;
	var b = self.get_offset();
	var self4 = new hxmath_math_Vector3Default(p.x,p.y,p.z);
	self4.x -= b.x;
	self4.y -= b.y;
	self4.z -= b.z;
	var self5 = this2;
	var a = 2.0 * (self5.x * self4.x + self5.y * self4.y + self5.z * self4.z);
	var b1 = self5.s * self5.s - self5.x * self5.x - self5.y * self5.y - self5.z * self5.z;
	var c = 2.0 * self5.s;
	return new hxmath_math_Vector3Default(a * self5.x + b1 * self4.x + c * (self5.y * self4.z - self5.z * self4.y),a * self5.y + b1 * self4.y + c * (self5.z * self4.x - self5.x * self4.z),a * self5.z + b1 * self4.z + c * (self5.x * self4.y - self5.y * self4.x));
};
hxmath_frames__$Frame3_Frame3_$Impl_$.linearTransformFrom = function(this1,v) {
	var self = this1;
	var self1 = self.get_orientation();
	var a = 2.0 * (self1.x * v.x + self1.y * v.y + self1.z * v.z);
	var b = self1.s * self1.s - self1.x * self1.x - self1.y * self1.y - self1.z * self1.z;
	var c = 2.0 * self1.s;
	return new hxmath_math_Vector3Default(a * self1.x + b * v.x + c * (self1.y * v.z - self1.z * v.y),a * self1.y + b * v.y + c * (self1.z * v.x - self1.x * v.z),a * self1.z + b * v.z + c * (self1.x * v.y - self1.y * v.x));
};
hxmath_frames__$Frame3_Frame3_$Impl_$.linearTransformTo = function(this1,v) {
	var self = this1;
	var self1 = self.get_orientation();
	var self2 = new hxmath_math_QuaternionDefault(self1.s,self1.x,self1.y,self1.z);
	self2.x = -self2.x;
	self2.y = -self2.y;
	self2.z = -self2.z;
	var self3 = self2;
	var length = Math.sqrt(self3.s * self3.s + self3.x * self3.x + self3.y * self3.y + self3.z * self3.z);
	if(length > 0.0) {
		var k = 1.0 / length;
		self3.s *= k;
		self3.x *= k;
		self3.y *= k;
		self3.z *= k;
	}
	var self4 = self3;
	var a = 2.0 * (self4.x * v.x + self4.y * v.y + self4.z * v.z);
	var b = self4.s * self4.s - self4.x * self4.x - self4.y * self4.y - self4.z * self4.z;
	var c = 2.0 * self4.s;
	return new hxmath_math_Vector3Default(a * self4.x + b * v.x + c * (self4.y * v.z - self4.z * v.y),a * self4.y + b * v.y + c * (self4.z * v.x - self4.x * v.z),a * self4.z + b * v.z + c * (self4.x * v.y - self4.y * v.x));
};
hxmath_frames__$Frame3_Frame3_$Impl_$.inverse = function(this1) {
	var self = this1;
	var self1 = self.get_orientation();
	var self2 = new hxmath_math_QuaternionDefault(self1.s,self1.x,self1.y,self1.z);
	self2.x = -self2.x;
	self2.y = -self2.y;
	self2.z = -self2.z;
	var self3 = self2;
	var length = Math.sqrt(self3.s * self3.s + self3.x * self3.x + self3.y * self3.y + self3.z * self3.z);
	if(length > 0.0) {
		var k = 1.0 / length;
		self3.s *= k;
		self3.x *= k;
		self3.y *= k;
		self3.z *= k;
	}
	var u = self.get_offset();
	var a = 2.0 * (self3.x * u.x + self3.y * u.y + self3.z * u.z);
	var b = self3.s * self3.s - self3.x * self3.x - self3.y * self3.y - self3.z * self3.z;
	var c = 2.0 * self3.s;
	var self4 = new hxmath_math_Vector3Default(a * self3.x + b * u.x + c * (self3.y * u.z - self3.z * u.y),a * self3.y + b * u.y + c * (self3.z * u.x - self3.x * u.z),a * self3.z + b * u.z + c * (self3.x * u.y - self3.y * u.x));
	self4.x = -self4.x;
	self4.y = -self4.y;
	self4.z = -self4.z;
	return hxmath_frames__$Frame3_Frame3_$Impl_$._new(self4,self3);
};
hxmath_frames__$Frame3_Frame3_$Impl_$.clone = function(this1) {
	var self = this1;
	return hxmath_frames__$Frame3_Frame3_$Impl_$._new(self.get_offset(),self.get_orientation());
};
hxmath_frames__$Frame3_Frame3_$Impl_$.get_linearMatrix = function(this1) {
	var self = this1;
	var self1 = self.get_matrix();
	return new hxmath_math_Matrix3x3Default(self1.m00,self1.m10,self1.m20,self1.m01,self1.m11,self1.m21,self1.m02,self1.m12,self1.m22);
};
var hxmath_frames_IFrame3 = function() { };
hxmath_frames_IFrame3.__name__ = ["hxmath","frames","IFrame3"];
hxmath_frames_IFrame3.prototype = {
	get_matrix: null
	,get_offset: null
	,set_offset: null
	,get_orientation: null
	,set_orientation: null
	,__class__: hxmath_frames_IFrame3
};
var hxmath_frames_Frame3Default = function(offset,orientation,isCached) {
	if(isCached == null) {
		isCached = true;
	}
	this.isDirty = true;
	this.isCached = true;
	this.internalOffset = offset == null?new hxmath_math_Vector3Default(0.0,0.0,0.0):offset;
	this.internalOrientation = orientation == null?new hxmath_math_QuaternionDefault(1,0,0,0):orientation;
	this.isCached = isCached;
	this.isDirty = true;
	this.internalMatrix = new hxmath_math_Matrix4x4Default(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
};
hxmath_frames_Frame3Default.__name__ = ["hxmath","frames","Frame3Default"];
hxmath_frames_Frame3Default.__interfaces__ = [hxmath_frames_IFrame3];
hxmath_frames_Frame3Default.prototype = {
	internalMatrix: null
	,internalOffset: null
	,internalOrientation: null
	,isCached: null
	,isDirty: null
	,toString: function() {
		return "Frame3 { offset: " + Std.string(this.internalOffset) + ", orientation: " + Std.string(this.internalOrientation) + " }";
	}
	,get_matrix: function() {
		if(!this.isCached || this.isDirty) {
			var matrix = this.internalMatrix;
			var offset = this.internalOffset;
			var orientation = this.internalOrientation;
			var s = orientation.s;
			var x = orientation.x;
			var y = orientation.y;
			var z = orientation.z;
			matrix.m00 = 1 - 2 * (y * y + z * z);
			matrix.m10 = 2 * (x * y - s * z);
			matrix.m20 = 2 * (s * y + x * z);
			matrix.m01 = 2 * (x * y + s * z);
			matrix.m11 = 1 - 2 * (x * x + z * z);
			matrix.m21 = 2 * (y * z - s * x);
			matrix.m02 = 2 * (x * z - s * y);
			matrix.m12 = 2 * (y * z + s * x);
			matrix.m22 = 1 - 2 * (x * x + y * y);
			var x1 = offset.x;
			var y1 = offset.y;
			var z1 = offset.z;
			matrix.m30 = x1;
			matrix.m31 = y1;
			matrix.m32 = z1;
			matrix.m33 = 1.0;
			this.isDirty = false;
		}
		return this.internalMatrix;
	}
	,get_offset: function() {
		return this.internalOffset;
	}
	,set_offset: function(offset) {
		this.internalOffset = offset;
		this.isDirty = true;
		return offset;
	}
	,get_orientation: function() {
		return this.internalOrientation;
	}
	,set_orientation: function(orientation) {
		this.internalOrientation = orientation;
		this.isDirty = true;
		return orientation;
	}
	,__class__: hxmath_frames_Frame3Default
};
var hxmath_math_IntVector2Default = function(x,y) {
	this.x = x;
	this.y = y;
};
hxmath_math_IntVector2Default.__name__ = ["hxmath","math","IntVector2Default"];
hxmath_math_IntVector2Default.prototype = {
	x: null
	,y: null
	,toString: function() {
		return "(" + this.x + ", " + this.y + ")";
	}
	,__class__: hxmath_math_IntVector2Default
};
var hxmath_math__$IntVector2_IntVector2_$Impl_$ = {};
hxmath_math__$IntVector2_IntVector2_$Impl_$.__name__ = ["hxmath","math","_IntVector2","IntVector2_Impl_"];
hxmath_math__$IntVector2_IntVector2_$Impl_$._new = function(x,y) {
	return new hxmath_math_IntVector2Default(x,y);
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.fromArray = function(rawData) {
	if(rawData.length != 2) {
		throw new js__$Boot_HaxeError("Invalid rawData.");
	}
	return hxmath_math__$IntVector2_IntVector2_$Impl_$._new(rawData[0],rawData[1]);
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.toVector2 = function(this1) {
	var self = this1;
	return new hxmath_math_Vector2Default(self.x,self.y);
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.dot = function(a,b) {
	return a.x * b.x + a.y * b.y;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.multiply = function(a,s) {
	var self = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(a.x,a.y);
	self.x *= s;
	self.y *= s;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.add = function(a,b) {
	var self = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(a.x,a.y);
	self.x += b.x;
	self.y += b.y;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.subtract = function(a,b) {
	var self = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(a.x,a.y);
	self.x -= b.x;
	self.y -= b.y;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.negate = function(a) {
	return hxmath_math__$IntVector2_IntVector2_$Impl_$._new(-a.x,-a.y);
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.equals = function(a,b) {
	if(!(a == null && b == null)) {
		if(a != null && b != null && a.x == b.x) {
			return a.y == b.y;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.max = function(a,b) {
	var self = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(a.x,a.y);
	var a1 = self.x;
	var b1 = b.x;
	self.x = b1 > a1?b1:a1;
	var a2 = self.y;
	var b2 = b.y;
	self.y = b2 > a2?b2:a2;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.min = function(a,b) {
	var self = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(a.x,a.y);
	var a1 = self.x;
	var b1 = b.x;
	self.x = b1 < a1?b1:a1;
	var a2 = self.y;
	var b2 = b.y;
	self.y = b2 < a2?b2:a2;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.set = function(this1,x,y) {
	var self = this1;
	self.x = x;
	self.y = y;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.multiplyWith = function(this1,s) {
	var self = this1;
	self.x *= s;
	self.y *= s;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.addWith = function(this1,a) {
	var self = this1;
	self.x += a.x;
	self.y += a.y;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.subtractWith = function(this1,a) {
	var self = this1;
	self.x -= a.x;
	self.y -= a.y;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.maxWith = function(this1,a) {
	var self = this1;
	var a1 = self.x;
	var b = a.x;
	self.x = b > a1?b:a1;
	var a2 = self.y;
	var b1 = a.y;
	self.y = b1 > a2?b1:a2;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.minWith = function(this1,a) {
	var self = this1;
	var a1 = self.x;
	var b = a.x;
	self.x = b < a1?b:a1;
	var a2 = self.y;
	var b1 = a.y;
	self.y = b1 < a2?b1:a2;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.copyTo = function(this1,target) {
	var self = this1;
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.x;
			break;
		case 1:
			tmp = self.y;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			target.x = value;
			break;
		case 1:
			target.y = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.clone = function(this1) {
	var self = this1;
	return hxmath_math__$IntVector2_IntVector2_$Impl_$._new(self.x,self.y);
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x;
	case 1:
		return self.y;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x = value;
	case 1:
		return self.y = value;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.applyNegate = function(this1) {
	var self = this1;
	self.x = -self.x;
	self.y = -self.y;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.applyScalarFunc = function(this1,func) {
	var self = this1;
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.x;
			break;
		case 1:
			tmp = self.y;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = func(tmp);
		switch(i) {
		case 0:
			self.x = value;
			break;
		case 1:
			self.y = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.rotateLeft = function(this1) {
	var self = this1;
	var newX = -self.y;
	self.y = self.x;
	self.x = newX;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.rotateRight = function(this1) {
	var self = this1;
	var newX = self.y;
	self.y = -self.x;
	self.x = newX;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.get_zero = function() {
	return hxmath_math__$IntVector2_IntVector2_$Impl_$._new(0,0);
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.get_xAxis = function() {
	return hxmath_math__$IntVector2_IntVector2_$Impl_$._new(1,0);
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.get_yAxis = function() {
	return hxmath_math__$IntVector2_IntVector2_$Impl_$._new(0,1);
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.get_lengthSq = function(this1) {
	var self = this1;
	return self.x * self.x + self.y * self.y;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.get_rotatedLeft = function(this1) {
	var self = this1;
	var self1 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(self.x,self.y);
	var newX = -self1.y;
	self1.y = self1.x;
	self1.x = newX;
	return self1;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.get_rotatedRight = function(this1) {
	var self = this1;
	var self1 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(self.x,self.y);
	var newX = self1.y;
	self1.y = -self1.x;
	self1.x = newX;
	return self1;
};
var hxmath_math_MathUtil = function() { };
hxmath_math_MathUtil.__name__ = ["hxmath","math","MathUtil"];
hxmath_math_MathUtil.intMax = function(a,b) {
	if(b > a) {
		return b;
	} else {
		return a;
	}
};
hxmath_math_MathUtil.intMin = function(a,b) {
	if(b < a) {
		return b;
	} else {
		return a;
	}
};
hxmath_math_MathUtil.lerpCyclic = function(a,b,t,max) {
	if(Math.abs(a - b) > 0.5 * max) {
		if(a < b) {
			a += max;
		} else {
			b += max;
		}
	}
	var x = (1.0 - t) * a + t * b;
	if(x < 0) {
		return max - -x % max;
	} else {
		return x % max;
	}
};
hxmath_math_MathUtil.sign = function(x,w) {
	if(w == null) {
		w = 0;
	}
	if(Math.abs(x) < w) {
		return 0;
	} else if(x <= -w) {
		return -1;
	} else {
		return 1;
	}
};
hxmath_math_MathUtil.rangeDistance = function(aStart,aWidth,bStart,bWidth) {
	if(aStart + aWidth < bStart) {
		return bStart - (aStart + aWidth);
	} else if(bStart + bWidth < aStart) {
		return aStart - (bStart + bWidth);
	} else {
		return 0;
	}
};
hxmath_math_MathUtil.openRangeContains = function(aStart,aWidth,x) {
	if(x > aStart) {
		return x < aStart + aWidth;
	} else {
		return false;
	}
};
hxmath_math_MathUtil.openRangesIntersect = function(aStart,aWidth,bStart,bWidth) {
	return !(aStart >= bStart + bWidth || bStart >= aStart + aWidth);
};
hxmath_math_MathUtil.closedRangeContains = function(aStart,aWidth,x) {
	if(x >= aStart) {
		return x <= aStart + aWidth;
	} else {
		return false;
	}
};
hxmath_math_MathUtil.radToDeg = function(rad) {
	return 180 / Math.PI * rad;
};
hxmath_math_MathUtil.degToRad = function(deg) {
	return Math.PI / 180 * deg;
};
hxmath_math_MathUtil.wrap = function(x,n) {
	if(x < 0) {
		return n - -x % n;
	} else {
		return x % n;
	}
};
hxmath_math_MathUtil.clamp = function(value,min,max) {
	if(value < min) {
		return min;
	} else if(value > max) {
		return max;
	} else {
		return value;
	}
};
hxmath_math_MathUtil.orient2d = function(a,b,c) {
	var result = (a.x - c.x) * (b.y - c.y) - (a.y - c.y) * (b.x - c.x);
	if(result > 0) {
		return 1;
	} else if(result < 0) {
		return -1;
	} else {
		return 0;
	}
};
hxmath_math_MathUtil.det2x2 = function(m00,m10,m01,m11) {
	return m00 * m11 - m10 * m01;
};
hxmath_math_MathUtil.det3x3 = function(m00,m10,m20,m01,m11,m21,m02,m12,m22) {
	return m00 * (m11 * m22 - m21 * m12) - m10 * (m01 * m22 - m21 * m02) + m20 * (m01 * m12 - m11 * m02);
};
hxmath_math_MathUtil.det4x4 = function(m00,m10,m20,m30,m01,m11,m21,m31,m02,m12,m22,m32,m03,m13,m23,m33) {
	return m00 * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13)) - m10 * (m01 * (m22 * m33 - m32 * m23) - m21 * (m02 * m33 - m32 * m03) + m31 * (m02 * m23 - m22 * m03)) + m20 * (m01 * (m12 * m33 - m32 * m13) - m11 * (m02 * m33 - m32 * m03) + m31 * (m02 * m13 - m12 * m03)) - m30 * (m01 * (m12 * m23 - m22 * m13) - m11 * (m02 * m23 - m22 * m03) + m21 * (m02 * m13 - m12 * m03));
};
var hxmath_math_Matrix2x2Default = function(a,b,c,d) {
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
};
hxmath_math_Matrix2x2Default.__name__ = ["hxmath","math","Matrix2x2Default"];
hxmath_math_Matrix2x2Default.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,toString: function() {
		return "[a: " + this.a + ", b: " + this.b + ", c: " + this.c + ", d: " + this.d + "]";
	}
	,__class__: hxmath_math_Matrix2x2Default
};
var hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$ = {};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.__name__ = ["hxmath","math","_Matrix2x2","Matrix2x2_Impl_"];
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$._new = function(a,b,c,d) {
	return new hxmath_math_Matrix2x2Default(a,b,c,d);
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.fromArray = function(rawData) {
	if(rawData.length != 4) {
		throw new js__$Boot_HaxeError("Invalid rawData.");
	}
	return new hxmath_math_Matrix2x2Default(rawData[0],rawData[1],rawData[2],rawData[3]);
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.fromMatrix2x2Shape = function(other) {
	return new hxmath_math_Matrix2x2Default(other.a,other.b,other.c,other.d);
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.multiplyScalar = function(s,m) {
	return new hxmath_math_Matrix2x2Default(s * m.a,s * m.b,s * m.c,s * m.d);
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.multiplyVector = function(m,v) {
	return new hxmath_math_Vector2Default(m.a * v.x + m.b * v.y,m.c * v.x + m.d * v.y);
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.multiply = function(m,n) {
	return new hxmath_math_Matrix2x2Default(m.a * n.a + m.b * n.c,m.a * n.b + m.b * n.d,m.c * n.a + m.d * n.c,m.c * n.b + m.d * n.d);
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.add = function(m,n) {
	var self = new hxmath_math_Matrix2x2Default(m.a,m.b,m.c,m.d);
	self.a += n.a;
	self.b += n.b;
	self.c += n.c;
	self.d += n.d;
	return self;
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.subtract = function(m,n) {
	var self = new hxmath_math_Matrix2x2Default(m.a,m.b,m.c,m.d);
	self.a -= n.a;
	self.b -= n.b;
	self.c -= n.c;
	self.d -= n.d;
	return self;
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.negate = function(m) {
	return new hxmath_math_Matrix2x2Default(-m.a,-m.b,-m.c,-m.d);
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.equals = function(m,n) {
	if(!(m == null && n == null)) {
		if(m != null && n != null && m.a == n.a && m.b == n.b && m.c == n.c) {
			return m.d == n.d;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.rotate = function(angle) {
	var self = new hxmath_math_Matrix2x2Default(0.0,0.0,0.0,0.0);
	var s = Math.sin(angle);
	var c = Math.cos(angle);
	self.a = c;
	self.b = -s;
	self.c = s;
	self.d = c;
	return self;
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.scale = function(sx,sy) {
	return new hxmath_math_Matrix2x2Default(sx,0.0,0.0,sy);
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.setRotate = function(this1,angle) {
	var self = this1;
	var s = Math.sin(angle);
	var c = Math.cos(angle);
	self.a = c;
	self.b = -s;
	self.c = s;
	self.d = c;
	return self;
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.set = function(this1,a,b,c,d) {
	var self = this1;
	self.a = a;
	self.b = b;
	self.c = c;
	self.d = d;
	return this1;
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.addWith = function(this1,m) {
	var self = this1;
	self.a += m.a;
	self.b += m.b;
	self.c += m.c;
	self.d += m.d;
	return self;
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.subtractWith = function(this1,m) {
	var self = this1;
	self.a -= m.a;
	self.b -= m.b;
	self.c -= m.c;
	self.d -= m.d;
	return self;
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.copyTo = function(this1,target) {
	var self = this1;
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.a;
			break;
		case 1:
			tmp = self.b;
			break;
		case 2:
			tmp = self.c;
			break;
		case 3:
			tmp = self.d;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			target.a = value;
			break;
		case 1:
			target.b = value;
			break;
		case 2:
			target.c = value;
			break;
		case 3:
			target.d = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.copyToShape = function(this1,target) {
	var self = this1;
	target.a = self.a;
	target.b = self.b;
	target.c = self.c;
	target.d = self.d;
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.copyFromShape = function(this1,source) {
	var self = this1;
	self.a = source.a;
	self.b = source.b;
	self.c = source.c;
	self.d = source.d;
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.clone = function(this1) {
	var self = this1;
	return new hxmath_math_Matrix2x2Default(self.a,self.b,self.c,self.d);
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.a;
	case 1:
		return self.b;
	case 2:
		return self.c;
	case 3:
		return self.d;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.a = value;
	case 1:
		return self.b = value;
	case 2:
		return self.c = value;
	case 3:
		return self.d = value;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.getElement = function(this1,column,row) {
	var self = this1;
	var tmp;
	switch(row * 2 + column) {
	case 0:
		tmp = self.a;
		break;
	case 1:
		tmp = self.b;
		break;
	case 2:
		tmp = self.c;
		break;
	case 3:
		tmp = self.d;
		break;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
	return tmp;
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.setElement = function(this1,column,row,value) {
	var self = this1;
	var tmp;
	switch(row * 2 + column) {
	case 0:
		tmp = self.a = value;
		break;
	case 1:
		tmp = self.b = value;
		break;
	case 2:
		tmp = self.c = value;
		break;
	case 3:
		tmp = self.d = value;
		break;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
	return tmp;
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.col = function(this1,index) {
	var self = this1;
	switch(index) {
	case 0:
		return new hxmath_math_Vector2Default(self.a,self.c);
	case 1:
		return new hxmath_math_Vector2Default(self.b,self.d);
	default:
		throw new js__$Boot_HaxeError("Invalid column");
	}
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.row = function(this1,index) {
	var self = this1;
	switch(index) {
	case 0:
		return new hxmath_math_Vector2Default(self.a,self.b);
	case 1:
		return new hxmath_math_Vector2Default(self.c,self.d);
	default:
		throw new js__$Boot_HaxeError("Invalid row");
	}
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.transposeMultiplyVector = function(this1,v) {
	var self = this1;
	return new hxmath_math_Vector2Default(self.a * v.x + self.c * v.y,self.b * v.x + self.d * v.y);
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.applyScalarFunc = function(this1,func) {
	var self = this1;
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.a;
			break;
		case 1:
			tmp = self.b;
			break;
		case 2:
			tmp = self.c;
			break;
		case 3:
			tmp = self.d;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = func(tmp);
		switch(i) {
		case 0:
			self.a = value;
			break;
		case 1:
			self.b = value;
			break;
		case 2:
			self.c = value;
			break;
		case 3:
			self.d = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	return self;
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.get_zero = function() {
	return new hxmath_math_Matrix2x2Default(0.0,0.0,0.0,0.0);
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.get_identity = function() {
	return new hxmath_math_Matrix2x2Default(1.0,0.0,0.0,1.0);
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.get_det = function(this1) {
	var self = this1;
	return self.a * self.d - self.b * self.c;
};
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.get_transpose = function(this1) {
	var self = this1;
	return new hxmath_math_Matrix2x2Default(self.a,self.c,self.b,self.d);
};
var hxmath_math_Matrix3x2Default = function(a,b,c,d,tx,ty) {
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
hxmath_math_Matrix3x2Default.__name__ = ["hxmath","math","Matrix3x2Default"];
hxmath_math_Matrix3x2Default.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,toString: function() {
		return "[a: " + this.a + ", b: " + this.b + ", c: " + this.c + ", d: " + this.d + ", tx: " + this.tx + ", ty: " + this.ty + "]";
	}
	,__class__: hxmath_math_Matrix3x2Default
};
var hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$ = {};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.__name__ = ["hxmath","math","_Matrix3x2","Matrix3x2_Impl_"];
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$._new = function(a,b,c,d,tx,ty) {
	return new hxmath_math_Matrix3x2Default(a,b,c,d,tx,ty);
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.fromArray = function(rawData) {
	if(rawData.length != 6) {
		throw new js__$Boot_HaxeError("Invalid rawData.");
	}
	return new hxmath_math_Matrix3x2Default(rawData[0],rawData[1],rawData[2],rawData[3],rawData[4],rawData[5]);
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.fromMatrix3x2Shape = function(other) {
	return new hxmath_math_Matrix3x2Default(other.a,other.b,other.c,other.d,other.tx,other.ty);
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.multiplyScalar = function(s,m) {
	return new hxmath_math_Matrix3x2Default(s * m.a,s * m.b,s * m.c,s * m.d,s * m.tx,s * m.ty);
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.transform = function(m,v) {
	var m1 = new hxmath_math_Matrix2x2Default(m.a,m.b,m.c,m.d);
	var a = new hxmath_math_Vector2Default(m1.a * v.x + m1.b * v.y,m1.c * v.x + m1.d * v.y);
	var b = new hxmath_math_Vector2Default(m.tx,m.ty);
	var self = new hxmath_math_Vector2Default(a.x,a.y);
	self.x += b.x;
	self.y += b.y;
	return self;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.concat = function(m,n) {
	var mLinear = new hxmath_math_Matrix2x2Default(m.a,m.b,m.c,m.d);
	var nLinear = new hxmath_math_Matrix2x2Default(n.a,n.b,n.c,n.d);
	var resultLinear = new hxmath_math_Matrix2x2Default(mLinear.a * nLinear.a + mLinear.b * nLinear.c,mLinear.a * nLinear.b + mLinear.b * nLinear.d,mLinear.c * nLinear.a + mLinear.d * nLinear.c,mLinear.c * nLinear.b + mLinear.d * nLinear.d);
	var v = new hxmath_math_Vector2Default(m.tx,m.ty);
	var a = new hxmath_math_Vector2Default(nLinear.a * v.x + nLinear.b * v.y,nLinear.c * v.x + nLinear.d * v.y);
	var b = new hxmath_math_Vector2Default(n.tx,n.ty);
	var self = new hxmath_math_Vector2Default(a.x,a.y);
	self.x += b.x;
	self.y += b.y;
	return new hxmath_math_Matrix3x2Default(resultLinear.a,resultLinear.b,resultLinear.c,resultLinear.d,self.x,self.y);
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.add = function(m,n) {
	var self = new hxmath_math_Matrix3x2Default(m.a,m.b,m.c,m.d,m.tx,m.ty);
	self.a += n.a;
	self.b += n.b;
	self.c += n.c;
	self.d += n.d;
	self.tx += n.tx;
	self.ty += n.ty;
	return self;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.subtract = function(m,n) {
	var self = new hxmath_math_Matrix3x2Default(m.a,m.b,m.c,m.d,m.tx,m.ty);
	self.a -= n.a;
	self.b -= n.b;
	self.c -= n.c;
	self.d -= n.d;
	self.tx -= n.tx;
	self.ty -= n.ty;
	return self;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.negate = function(m) {
	return new hxmath_math_Matrix3x2Default(-m.a,-m.b,-m.c,-m.d,-m.tx,-m.ty);
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.equals = function(m,n) {
	if(!(m == null && n == null)) {
		if(m != null && n != null && m.a == n.a && m.b == n.b && m.c == n.c && m.d == n.d && m.tx == n.tx) {
			return m.ty == n.ty;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.rotate = function(angle) {
	var m = new hxmath_math_Matrix3x2Default(1.0,0.0,0.0,1.0,0.0,0.0);
	var self = new hxmath_math_Matrix2x2Default(0.0,0.0,0.0,0.0);
	var s = Math.sin(angle);
	var c = Math.cos(angle);
	self.a = c;
	self.b = -s;
	self.c = s;
	self.d = c;
	m.a = self.a;
	m.b = self.b;
	m.c = self.c;
	m.d = self.d;
	return m;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.translate = function(v) {
	var m = new hxmath_math_Matrix3x2Default(1.0,0.0,0.0,1.0,0.0,0.0);
	m.tx = v.x;
	m.ty = v.y;
	return m;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.orbit = function(center,angle) {
	var m = new hxmath_math_Matrix3x2Default(1.0,0.0,0.0,1.0,0.0,0.0);
	var self = new hxmath_math_Matrix2x2Default(0.0,0.0,0.0,0.0);
	var s = Math.sin(angle);
	var c = Math.cos(angle);
	self.a = c;
	self.b = -s;
	self.c = s;
	self.d = c;
	m.a = self.a;
	m.b = self.b;
	m.c = self.c;
	m.d = self.d;
	var m1 = new hxmath_math_Matrix2x2Default(m.a,m.b,m.c,m.d);
	var b = new hxmath_math_Vector2Default(m1.a * center.x + m1.b * center.y,m1.c * center.x + m1.d * center.y);
	var self1 = new hxmath_math_Vector2Default(center.x,center.y);
	self1.x -= b.x;
	self1.y -= b.y;
	m.tx = self1.x;
	m.ty = self1.y;
	return m;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.copyTo = function(this1,target) {
	var self = this1;
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.a;
			break;
		case 1:
			tmp = self.b;
			break;
		case 2:
			tmp = self.tx;
			break;
		case 3:
			tmp = self.c;
			break;
		case 4:
			tmp = self.d;
			break;
		case 5:
			tmp = self.ty;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			target.a = value;
			break;
		case 1:
			target.b = value;
			break;
		case 2:
			target.tx = value;
			break;
		case 3:
			target.c = value;
			break;
		case 4:
			target.d = value;
			break;
		case 5:
			target.ty = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.copyToShape = function(this1,target) {
	var self = this1;
	target.a = self.a;
	target.b = self.b;
	target.c = self.c;
	target.d = self.d;
	target.tx = self.tx;
	target.ty = self.ty;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.copyFromShape = function(this1,source) {
	var self = this1;
	self.a = source.a;
	self.b = source.b;
	self.c = source.c;
	self.d = source.d;
	self.tx = source.tx;
	self.ty = source.ty;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.setRotate = function(this1,angle) {
	var self = this1;
	var s = Math.sin(angle);
	var c = Math.cos(angle);
	self.a = c;
	self.b = -s;
	self.c = s;
	self.d = c;
	return self;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.setTranslate = function(this1,x,y) {
	var self = this1;
	self.tx = x;
	self.ty = y;
	return self;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.set = function(this1,a,b,c,d,tx,ty) {
	var self = this1;
	self.a = a;
	self.b = b;
	self.c = c;
	self.d = d;
	self.tx = tx;
	self.ty = ty;
	return self;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.addWith = function(this1,m) {
	var self = this1;
	self.a += m.a;
	self.b += m.b;
	self.c += m.c;
	self.d += m.d;
	self.tx += m.tx;
	self.ty += m.ty;
	return self;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.subtractWith = function(this1,m) {
	var self = this1;
	self.a -= m.a;
	self.b -= m.b;
	self.c -= m.c;
	self.d -= m.d;
	self.tx -= m.tx;
	self.ty -= m.ty;
	return self;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.clone = function(this1) {
	var self = this1;
	return new hxmath_math_Matrix3x2Default(self.a,self.b,self.c,self.d,self.tx,self.ty);
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.a;
	case 1:
		return self.b;
	case 2:
		return self.tx;
	case 3:
		return self.c;
	case 4:
		return self.d;
	case 5:
		return self.ty;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.a = value;
	case 1:
		return self.b = value;
	case 2:
		return self.tx = value;
	case 3:
		return self.c = value;
	case 4:
		return self.d = value;
	case 5:
		return self.ty = value;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.getElement = function(this1,column,row) {
	var self = this1;
	var tmp;
	switch(row * 3 + column) {
	case 0:
		tmp = self.a;
		break;
	case 1:
		tmp = self.b;
		break;
	case 2:
		tmp = self.tx;
		break;
	case 3:
		tmp = self.c;
		break;
	case 4:
		tmp = self.d;
		break;
	case 5:
		tmp = self.ty;
		break;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
	return tmp;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.setElement = function(this1,column,row,value) {
	var self = this1;
	var tmp;
	switch(row * 3 + column) {
	case 0:
		tmp = self.a = value;
		break;
	case 1:
		tmp = self.b = value;
		break;
	case 2:
		tmp = self.tx = value;
		break;
	case 3:
		tmp = self.c = value;
		break;
	case 4:
		tmp = self.d = value;
		break;
	case 5:
		tmp = self.ty = value;
		break;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
	return tmp;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.col = function(this1,index) {
	var self = this1;
	switch(index) {
	case 0:
		return new hxmath_math_Vector2Default(self.a,self.c);
	case 1:
		return new hxmath_math_Vector2Default(self.b,self.d);
	case 2:
		return new hxmath_math_Vector2Default(self.tx,self.ty);
	default:
		throw new js__$Boot_HaxeError("Invalid column");
	}
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.row = function(this1,index) {
	var self = this1;
	switch(index) {
	case 0:
		return new hxmath_math_Vector3Default(self.a,self.b,self.tx);
	case 1:
		return new hxmath_math_Vector3Default(self.c,self.d,self.ty);
	default:
		throw new js__$Boot_HaxeError("Invalid row");
	}
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.applyScalarFunc = function(this1,func) {
	var self = this1;
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.a;
			break;
		case 1:
			tmp = self.b;
			break;
		case 2:
			tmp = self.tx;
			break;
		case 3:
			tmp = self.c;
			break;
		case 4:
			tmp = self.d;
			break;
		case 5:
			tmp = self.ty;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = func(tmp);
		switch(i) {
		case 0:
			self.a = value;
			break;
		case 1:
			self.b = value;
			break;
		case 2:
			self.tx = value;
			break;
		case 3:
			self.c = value;
			break;
		case 4:
			self.d = value;
			break;
		case 5:
			self.ty = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	return self;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.applySubMatrixTranspose = function(this1) {
	var self = this1;
	var temp = self.c;
	self.c = self.b;
	self.b = temp;
	return self;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.applyInvertFrame = function(this1) {
	var self = this1;
	var temp = self.c;
	self.c = self.b;
	self.b = temp;
	var tx = -(self.a * self.tx + self.b * self.ty);
	var ty = -(self.c * self.tx + self.d * self.ty);
	self.tx = tx;
	self.ty = ty;
	return self;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.get_zero = function() {
	return new hxmath_math_Matrix3x2Default(0.0,0.0,0.0,0.0,0.0,0.0);
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.get_identity = function() {
	return new hxmath_math_Matrix3x2Default(1.0,0.0,0.0,1.0,0.0,0.0);
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.get_t = function(this1) {
	var self = this1;
	return new hxmath_math_Vector2Default(self.tx,self.ty);
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.set_t = function(this1,t) {
	var self = this1;
	self.tx = t.x;
	self.ty = t.y;
	return t;
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.get_linearSubMatrix = function(this1) {
	var self = this1;
	return new hxmath_math_Matrix2x2Default(self.a,self.b,self.c,self.d);
};
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.set_linearSubMatrix = function(this1,value) {
	var self = this1;
	self.a = value.a;
	self.b = value.b;
	self.c = value.c;
	self.d = value.d;
	return value;
};
var hxmath_math_Matrix3x3Default = function(m00,m10,m20,m01,m11,m21,m02,m12,m22) {
	this.m00 = m00;
	this.m10 = m10;
	this.m20 = m20;
	this.m01 = m01;
	this.m11 = m11;
	this.m21 = m21;
	this.m02 = m02;
	this.m12 = m12;
	this.m22 = m22;
};
hxmath_math_Matrix3x3Default.__name__ = ["hxmath","math","Matrix3x3Default"];
hxmath_math_Matrix3x3Default.prototype = {
	m00: null
	,m01: null
	,m02: null
	,m10: null
	,m11: null
	,m12: null
	,m20: null
	,m21: null
	,m22: null
	,toString: function() {
		return "[[" + this.m00 + ", " + this.m10 + ", " + this.m20 + "], [" + this.m01 + ", " + this.m11 + ", " + this.m21 + "], [" + this.m02 + ", " + this.m12 + ", " + this.m22 + "]]";
	}
	,__class__: hxmath_math_Matrix3x3Default
};
var hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$ = {};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.__name__ = ["hxmath","math","_Matrix3x3","Matrix3x3_Impl_"];
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$._new = function(m00,m10,m20,m01,m11,m21,m02,m12,m22) {
	return new hxmath_math_Matrix3x3Default(m00,m10,m20,m01,m11,m21,m02,m12,m22);
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.fromArray = function(rawData) {
	if(rawData.length != 9) {
		throw new js__$Boot_HaxeError("Invalid rawData.");
	}
	return new hxmath_math_Matrix3x3Default(rawData[0],rawData[1],rawData[2],rawData[3],rawData[4],rawData[5],rawData[6],rawData[7],rawData[8]);
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.fromMatrix3x3Shape = function(other) {
	return new hxmath_math_Matrix3x3Default(other.m00,other.m10,other.m20,other.m01,other.m11,other.m21,other.m02,other.m12,other.m22);
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.multiplyScalar = function(s,a) {
	return new hxmath_math_Matrix3x3Default(s * a.m00,s * a.m10,s * a.m20,s * a.m01,s * a.m11,s * a.m21,s * a.m02,s * a.m12,s * a.m22);
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.multiplyVector = function(a,v) {
	return new hxmath_math_Vector3Default(a.m00 * v.x + a.m10 * v.y + a.m20 * v.z,a.m01 * v.x + a.m11 * v.y + a.m21 * v.z,a.m02 * v.x + a.m12 * v.y + a.m22 * v.z);
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.multiply = function(a,b) {
	return new hxmath_math_Matrix3x3Default(a.m00 * b.m00 + a.m10 * b.m01 + a.m20 * b.m02,a.m00 * b.m10 + a.m10 * b.m11 + a.m20 * b.m12,a.m00 * b.m20 + a.m10 * b.m21 + a.m20 * b.m22,a.m01 * b.m00 + a.m11 * b.m01 + a.m21 * b.m02,a.m01 * b.m10 + a.m11 * b.m11 + a.m21 * b.m12,a.m01 * b.m20 + a.m11 * b.m21 + a.m21 * b.m22,a.m02 * b.m00 + a.m12 * b.m01 + a.m22 * b.m02,a.m02 * b.m10 + a.m12 * b.m11 + a.m22 * b.m12,a.m02 * b.m20 + a.m12 * b.m21 + a.m22 * b.m22);
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.add = function(a,b) {
	var self = new hxmath_math_Matrix3x3Default(a.m00,a.m10,a.m20,a.m01,a.m11,a.m21,a.m02,a.m12,a.m22);
	self.m00 += b.m00;
	self.m10 += b.m10;
	self.m20 += b.m20;
	self.m01 += b.m01;
	self.m11 += b.m11;
	self.m21 += b.m21;
	self.m02 += b.m02;
	self.m12 += b.m12;
	self.m22 += b.m22;
	return self;
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.subtract = function(a,b) {
	var self = new hxmath_math_Matrix3x3Default(a.m00,a.m10,a.m20,a.m01,a.m11,a.m21,a.m02,a.m12,a.m22);
	self.m00 -= b.m00;
	self.m10 -= b.m10;
	self.m20 -= b.m20;
	self.m01 -= b.m01;
	self.m11 -= b.m11;
	self.m21 -= b.m21;
	self.m02 -= b.m02;
	self.m12 -= b.m12;
	self.m22 -= b.m22;
	return self;
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.negate = function(a) {
	return new hxmath_math_Matrix3x3Default(-a.m00,-a.m10,-a.m20,-a.m01,-a.m11,-a.m21,-a.m02,-a.m12,-a.m22);
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.equals = function(a,b) {
	if(!(a == null && b == null)) {
		if(a != null && b != null && a.m00 == b.m00 && a.m10 == b.m10 && a.m20 == b.m20 && a.m01 == b.m01 && a.m11 == b.m11 && a.m21 == b.m21 && a.m02 == b.m02 && a.m12 == b.m12) {
			return a.m22 == b.m22;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.rotationX = function(angleDegrees) {
	var angleRadians = Math.PI / 180 * angleDegrees;
	var s = Math.sin(angleRadians);
	var c = Math.cos(angleRadians);
	return new hxmath_math_Matrix3x3Default(1,0,0,0,c,-s,0,s,c);
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.rotationY = function(angleDegrees) {
	var angleRadians = Math.PI / 180 * angleDegrees;
	var s = Math.sin(angleRadians);
	var c = Math.cos(angleRadians);
	return new hxmath_math_Matrix3x3Default(c,0,s,0,1,0,-s,0,c);
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.rotationZ = function(angleDegrees) {
	var angleRadians = Math.PI / 180 * angleDegrees;
	var s = Math.sin(angleRadians);
	var c = Math.cos(angleRadians);
	return new hxmath_math_Matrix3x3Default(c,-s,0,s,c,0,0,0,1);
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.scale = function(sx,sy,sz) {
	return new hxmath_math_Matrix3x3Default(sx,0.0,0.0,0.0,sy,0.0,0.0,0.0,sz);
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.set = function(this1,m00,m10,m20,m01,m11,m21,m02,m12,m22) {
	var self = this1;
	self.m00 = m00;
	self.m10 = m10;
	self.m20 = m20;
	self.m01 = m01;
	self.m11 = m11;
	self.m21 = m21;
	self.m02 = m02;
	self.m12 = m12;
	self.m22 = m22;
	return self;
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.addWith = function(this1,a) {
	var self = this1;
	self.m00 += a.m00;
	self.m10 += a.m10;
	self.m20 += a.m20;
	self.m01 += a.m01;
	self.m11 += a.m11;
	self.m21 += a.m21;
	self.m02 += a.m02;
	self.m12 += a.m12;
	self.m22 += a.m22;
	return self;
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.subtractWith = function(this1,a) {
	var self = this1;
	self.m00 -= a.m00;
	self.m10 -= a.m10;
	self.m20 -= a.m20;
	self.m01 -= a.m01;
	self.m11 -= a.m11;
	self.m21 -= a.m21;
	self.m02 -= a.m02;
	self.m12 -= a.m12;
	self.m22 -= a.m22;
	return self;
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.copyTo = function(this1,target) {
	var self = this1;
	var _g = 0;
	while(_g < 9) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.m00;
			break;
		case 1:
			tmp = self.m10;
			break;
		case 2:
			tmp = self.m20;
			break;
		case 3:
			tmp = self.m01;
			break;
		case 4:
			tmp = self.m11;
			break;
		case 5:
			tmp = self.m21;
			break;
		case 6:
			tmp = self.m02;
			break;
		case 7:
			tmp = self.m12;
			break;
		case 8:
			tmp = self.m22;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			target.m00 = value;
			break;
		case 1:
			target.m10 = value;
			break;
		case 2:
			target.m20 = value;
			break;
		case 3:
			target.m01 = value;
			break;
		case 4:
			target.m11 = value;
			break;
		case 5:
			target.m21 = value;
			break;
		case 6:
			target.m02 = value;
			break;
		case 7:
			target.m12 = value;
			break;
		case 8:
			target.m22 = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.copyToShape = function(this1,target) {
	var self = this1;
	target.m00 = self.m00;
	target.m01 = self.m01;
	target.m02 = self.m02;
	target.m10 = self.m10;
	target.m11 = self.m11;
	target.m12 = self.m12;
	target.m20 = self.m20;
	target.m21 = self.m21;
	target.m22 = self.m22;
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.copyFromShape = function(this1,source) {
	var self = this1;
	self.m00 = source.m00;
	self.m01 = source.m01;
	self.m02 = source.m02;
	self.m10 = source.m10;
	self.m11 = source.m11;
	self.m12 = source.m12;
	self.m20 = source.m20;
	self.m21 = source.m21;
	self.m22 = source.m22;
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.clone = function(this1) {
	var self = this1;
	return new hxmath_math_Matrix3x3Default(self.m00,self.m10,self.m20,self.m01,self.m11,self.m21,self.m02,self.m12,self.m22);
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.m00;
	case 1:
		return self.m10;
	case 2:
		return self.m20;
	case 3:
		return self.m01;
	case 4:
		return self.m11;
	case 5:
		return self.m21;
	case 6:
		return self.m02;
	case 7:
		return self.m12;
	case 8:
		return self.m22;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.m00 = value;
	case 1:
		return self.m10 = value;
	case 2:
		return self.m20 = value;
	case 3:
		return self.m01 = value;
	case 4:
		return self.m11 = value;
	case 5:
		return self.m21 = value;
	case 6:
		return self.m02 = value;
	case 7:
		return self.m12 = value;
	case 8:
		return self.m22 = value;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.getElement = function(this1,column,row) {
	var self = this1;
	var tmp;
	switch(row * 3 + column) {
	case 0:
		tmp = self.m00;
		break;
	case 1:
		tmp = self.m10;
		break;
	case 2:
		tmp = self.m20;
		break;
	case 3:
		tmp = self.m01;
		break;
	case 4:
		tmp = self.m11;
		break;
	case 5:
		tmp = self.m21;
		break;
	case 6:
		tmp = self.m02;
		break;
	case 7:
		tmp = self.m12;
		break;
	case 8:
		tmp = self.m22;
		break;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
	return tmp;
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.setElement = function(this1,column,row,value) {
	var self = this1;
	var tmp;
	switch(row * 3 + column) {
	case 0:
		tmp = self.m00 = value;
		break;
	case 1:
		tmp = self.m10 = value;
		break;
	case 2:
		tmp = self.m20 = value;
		break;
	case 3:
		tmp = self.m01 = value;
		break;
	case 4:
		tmp = self.m11 = value;
		break;
	case 5:
		tmp = self.m21 = value;
		break;
	case 6:
		tmp = self.m02 = value;
		break;
	case 7:
		tmp = self.m12 = value;
		break;
	case 8:
		tmp = self.m22 = value;
		break;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
	return tmp;
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.col = function(this1,index) {
	var self = this1;
	switch(index) {
	case 0:
		return new hxmath_math_Vector3Default(self.m00,self.m01,self.m02);
	case 1:
		return new hxmath_math_Vector3Default(self.m10,self.m11,self.m12);
	case 2:
		return new hxmath_math_Vector3Default(self.m20,self.m21,self.m22);
	default:
		throw new js__$Boot_HaxeError("Invalid column");
	}
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.row = function(this1,index) {
	var self = this1;
	switch(index) {
	case 0:
		return new hxmath_math_Vector3Default(self.m00,self.m10,self.m20);
	case 1:
		return new hxmath_math_Vector3Default(self.m01,self.m11,self.m21);
	case 2:
		return new hxmath_math_Vector3Default(self.m02,self.m12,self.m22);
	default:
		throw new js__$Boot_HaxeError("Invalid row");
	}
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.applyScalarFunc = function(this1,func) {
	var self = this1;
	var _g = 0;
	while(_g < 9) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.m00;
			break;
		case 1:
			tmp = self.m10;
			break;
		case 2:
			tmp = self.m20;
			break;
		case 3:
			tmp = self.m01;
			break;
		case 4:
			tmp = self.m11;
			break;
		case 5:
			tmp = self.m21;
			break;
		case 6:
			tmp = self.m02;
			break;
		case 7:
			tmp = self.m12;
			break;
		case 8:
			tmp = self.m22;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = func(tmp);
		switch(i) {
		case 0:
			self.m00 = value;
			break;
		case 1:
			self.m10 = value;
			break;
		case 2:
			self.m20 = value;
			break;
		case 3:
			self.m01 = value;
			break;
		case 4:
			self.m11 = value;
			break;
		case 5:
			self.m21 = value;
			break;
		case 6:
			self.m02 = value;
			break;
		case 7:
			self.m12 = value;
			break;
		case 8:
			self.m22 = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	return self;
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.get_zero = function() {
	return new hxmath_math_Matrix3x3Default(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.get_identity = function() {
	return new hxmath_math_Matrix3x3Default(1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0);
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.get_det = function(this1) {
	var self = this1;
	var m00 = self.m00;
	var m10 = self.m10;
	var m20 = self.m20;
	var m01 = self.m01;
	var m11 = self.m11;
	var m21 = self.m21;
	var m02 = self.m02;
	var m12 = self.m12;
	var m22 = self.m22;
	return m00 * (m11 * m22 - m21 * m12) - m10 * (m01 * m22 - m21 * m02) + m20 * (m01 * m12 - m11 * m02);
};
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.get_transpose = function(this1) {
	var self = this1;
	return new hxmath_math_Matrix3x3Default(self.m00,self.m01,self.m02,self.m10,self.m11,self.m12,self.m20,self.m21,self.m22);
};
var hxmath_math_Matrix4x4Default = function(m00,m10,m20,m30,m01,m11,m21,m31,m02,m12,m22,m32,m03,m13,m23,m33) {
	this.m00 = m00;
	this.m10 = m10;
	this.m20 = m20;
	this.m30 = m30;
	this.m01 = m01;
	this.m11 = m11;
	this.m21 = m21;
	this.m31 = m31;
	this.m02 = m02;
	this.m12 = m12;
	this.m22 = m22;
	this.m32 = m32;
	this.m03 = m03;
	this.m13 = m13;
	this.m23 = m23;
	this.m33 = m33;
};
hxmath_math_Matrix4x4Default.__name__ = ["hxmath","math","Matrix4x4Default"];
hxmath_math_Matrix4x4Default.prototype = {
	m00: null
	,m01: null
	,m02: null
	,m03: null
	,m10: null
	,m11: null
	,m12: null
	,m13: null
	,m20: null
	,m21: null
	,m22: null
	,m23: null
	,m30: null
	,m31: null
	,m32: null
	,m33: null
	,toString: function() {
		return "[[" + this.m00 + ", " + this.m10 + ", " + this.m20 + ", " + this.m30 + "], [" + this.m01 + ", " + this.m11 + ", " + this.m21 + ", " + this.m31 + "], [" + this.m02 + ", " + this.m12 + ", " + this.m22 + ", " + this.m32 + "], [" + this.m03 + ", " + this.m13 + ", " + this.m23 + ", " + this.m33 + "]]";
	}
	,__class__: hxmath_math_Matrix4x4Default
};
var hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$ = {};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.__name__ = ["hxmath","math","_Matrix4x4","Matrix4x4_Impl_"];
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$._new = function(m00,m10,m20,m30,m01,m11,m21,m31,m02,m12,m22,m32,m03,m13,m23,m33) {
	return new hxmath_math_Matrix4x4Default(m00,m10,m20,m30,m01,m11,m21,m31,m02,m12,m22,m32,m03,m13,m23,m33);
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.fromArray = function(rawData) {
	if(rawData.length != 16) {
		throw new js__$Boot_HaxeError("Invalid rawData.");
	}
	return new hxmath_math_Matrix4x4Default(rawData[0],rawData[1],rawData[2],rawData[3],rawData[4],rawData[5],rawData[6],rawData[7],rawData[8],rawData[9],rawData[10],rawData[11],rawData[12],rawData[13],rawData[14],rawData[15]);
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.fromMatrix4x4Shape = function(other) {
	return new hxmath_math_Matrix4x4Default(other.m00,other.m10,other.m20,other.m30,other.m01,other.m11,other.m21,other.m31,other.m02,other.m12,other.m22,other.m32,other.m03,other.m13,other.m23,other.m33);
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.multiplyVector = function(a,v) {
	return new hxmath_math_Vector4Default(a.m00 * v.x + a.m10 * v.y + a.m20 * v.z + a.m30 * v.w,a.m01 * v.x + a.m11 * v.y + a.m21 * v.z + a.m31 * v.w,a.m02 * v.x + a.m12 * v.y + a.m22 * v.z + a.m32 * v.w,a.m03 * v.x + a.m13 * v.y + a.m23 * v.z + a.m33 * v.w);
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.multiply = function(a,b) {
	return new hxmath_math_Matrix4x4Default(a.m00 * b.m00 + a.m10 * b.m01 + a.m20 * b.m02 + a.m30 * b.m03,a.m00 * b.m10 + a.m10 * b.m11 + a.m20 * b.m12 + a.m30 * b.m13,a.m00 * b.m20 + a.m10 * b.m21 + a.m20 * b.m22 + a.m30 * b.m23,a.m00 * b.m30 + a.m10 * b.m31 + a.m20 * b.m32 + a.m30 * b.m33,a.m01 * b.m00 + a.m11 * b.m01 + a.m21 * b.m02 + a.m31 * b.m03,a.m01 * b.m10 + a.m11 * b.m11 + a.m21 * b.m12 + a.m31 * b.m13,a.m01 * b.m20 + a.m11 * b.m21 + a.m21 * b.m22 + a.m31 * b.m23,a.m01 * b.m30 + a.m11 * b.m31 + a.m21 * b.m32 + a.m31 * b.m33,a.m02 * b.m00 + a.m12 * b.m01 + a.m22 * b.m02 + a.m32 * b.m03,a.m02 * b.m10 + a.m12 * b.m11 + a.m22 * b.m12 + a.m32 * b.m13,a.m02 * b.m20 + a.m12 * b.m21 + a.m22 * b.m22 + a.m32 * b.m23,a.m02 * b.m30 + a.m12 * b.m31 + a.m22 * b.m32 + a.m32 * b.m33,a.m03 * b.m00 + a.m13 * b.m01 + a.m23 * b.m02 + a.m33 * b.m03,a.m03 * b.m10 + a.m13 * b.m11 + a.m23 * b.m12 + a.m33 * b.m13,a.m03 * b.m20 + a.m13 * b.m21 + a.m23 * b.m22 + a.m33 * b.m23,a.m03 * b.m30 + a.m13 * b.m31 + a.m23 * b.m32 + a.m33 * b.m33);
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.add = function(a,b) {
	var self = new hxmath_math_Matrix4x4Default(a.m00,a.m10,a.m20,a.m30,a.m01,a.m11,a.m21,a.m31,a.m02,a.m12,a.m22,a.m32,a.m03,a.m13,a.m23,a.m33);
	self.m00 += b.m00;
	self.m10 += b.m10;
	self.m20 += b.m20;
	self.m30 += b.m30;
	self.m01 += b.m01;
	self.m11 += b.m11;
	self.m21 += b.m21;
	self.m31 += b.m31;
	self.m02 += b.m02;
	self.m12 += b.m12;
	self.m22 += b.m22;
	self.m32 += b.m32;
	self.m03 += b.m03;
	self.m13 += b.m13;
	self.m23 += b.m23;
	self.m33 += b.m33;
	return self;
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.subtract = function(a,b) {
	var self = new hxmath_math_Matrix4x4Default(a.m00,a.m10,a.m20,a.m30,a.m01,a.m11,a.m21,a.m31,a.m02,a.m12,a.m22,a.m32,a.m03,a.m13,a.m23,a.m33);
	self.m00 -= b.m00;
	self.m10 -= b.m10;
	self.m20 -= b.m20;
	self.m30 -= b.m30;
	self.m01 -= b.m01;
	self.m11 -= b.m11;
	self.m21 -= b.m21;
	self.m31 -= b.m31;
	self.m02 -= b.m02;
	self.m12 -= b.m12;
	self.m22 -= b.m22;
	self.m32 -= b.m32;
	self.m03 -= b.m03;
	self.m13 -= b.m13;
	self.m23 -= b.m23;
	self.m33 -= b.m33;
	return self;
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.negate = function(a) {
	return new hxmath_math_Matrix4x4Default(-a.m00,-a.m10,-a.m20,-a.m30,-a.m01,-a.m11,-a.m21,-a.m31,-a.m02,-a.m12,-a.m22,-a.m32,-a.m03,-a.m13,-a.m23,-a.m33);
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.equals = function(a,b) {
	if(!(a == null && b == null)) {
		if(a != null && b != null && a.m00 == b.m00 && a.m10 == b.m10 && a.m20 == b.m20 && a.m30 == b.m30 && a.m01 == b.m01 && a.m11 == b.m11 && a.m21 == b.m21 && a.m31 == b.m31 && a.m02 == b.m02 && a.m12 == b.m12 && a.m22 == b.m22 && a.m32 == b.m32 && a.m03 == b.m03 && a.m13 == b.m13 && a.m23 == b.m23) {
			return a.m33 == b.m33;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.set = function(this1,m00,m10,m20,m30,m01,m11,m21,m31,m02,m12,m22,m32,m03,m13,m23,m33) {
	var self = this1;
	self.m00 = m00;
	self.m10 = m10;
	self.m20 = m20;
	self.m30 = m30;
	self.m01 = m01;
	self.m11 = m11;
	self.m21 = m21;
	self.m31 = m31;
	self.m02 = m02;
	self.m12 = m12;
	self.m22 = m22;
	self.m32 = m32;
	self.m03 = m03;
	self.m13 = m13;
	self.m23 = m23;
	self.m33 = m33;
	return self;
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.addWith = function(this1,a) {
	var self = this1;
	self.m00 += a.m00;
	self.m10 += a.m10;
	self.m20 += a.m20;
	self.m30 += a.m30;
	self.m01 += a.m01;
	self.m11 += a.m11;
	self.m21 += a.m21;
	self.m31 += a.m31;
	self.m02 += a.m02;
	self.m12 += a.m12;
	self.m22 += a.m22;
	self.m32 += a.m32;
	self.m03 += a.m03;
	self.m13 += a.m13;
	self.m23 += a.m23;
	self.m33 += a.m33;
	return self;
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.subtractWith = function(this1,a) {
	var self = this1;
	self.m00 -= a.m00;
	self.m10 -= a.m10;
	self.m20 -= a.m20;
	self.m30 -= a.m30;
	self.m01 -= a.m01;
	self.m11 -= a.m11;
	self.m21 -= a.m21;
	self.m31 -= a.m31;
	self.m02 -= a.m02;
	self.m12 -= a.m12;
	self.m22 -= a.m22;
	self.m32 -= a.m32;
	self.m03 -= a.m03;
	self.m13 -= a.m13;
	self.m23 -= a.m23;
	self.m33 -= a.m33;
	return self;
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.copyTo = function(this1,target) {
	var self = this1;
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.m00;
			break;
		case 1:
			tmp = self.m10;
			break;
		case 2:
			tmp = self.m20;
			break;
		case 3:
			tmp = self.m30;
			break;
		case 4:
			tmp = self.m01;
			break;
		case 5:
			tmp = self.m11;
			break;
		case 6:
			tmp = self.m21;
			break;
		case 7:
			tmp = self.m31;
			break;
		case 8:
			tmp = self.m02;
			break;
		case 9:
			tmp = self.m12;
			break;
		case 10:
			tmp = self.m22;
			break;
		case 11:
			tmp = self.m32;
			break;
		case 12:
			tmp = self.m03;
			break;
		case 13:
			tmp = self.m13;
			break;
		case 14:
			tmp = self.m23;
			break;
		case 15:
			tmp = self.m33;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			target.m00 = value;
			break;
		case 1:
			target.m10 = value;
			break;
		case 2:
			target.m20 = value;
			break;
		case 3:
			target.m30 = value;
			break;
		case 4:
			target.m01 = value;
			break;
		case 5:
			target.m11 = value;
			break;
		case 6:
			target.m21 = value;
			break;
		case 7:
			target.m31 = value;
			break;
		case 8:
			target.m02 = value;
			break;
		case 9:
			target.m12 = value;
			break;
		case 10:
			target.m22 = value;
			break;
		case 11:
			target.m32 = value;
			break;
		case 12:
			target.m03 = value;
			break;
		case 13:
			target.m13 = value;
			break;
		case 14:
			target.m23 = value;
			break;
		case 15:
			target.m33 = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.copyToShape = function(this1,target) {
	var self = this1;
	target.m00 = self.m00;
	target.m01 = self.m01;
	target.m02 = self.m02;
	target.m03 = self.m03;
	target.m10 = self.m10;
	target.m11 = self.m11;
	target.m12 = self.m12;
	target.m13 = self.m13;
	target.m20 = self.m20;
	target.m21 = self.m21;
	target.m22 = self.m22;
	target.m23 = self.m23;
	target.m30 = self.m30;
	target.m31 = self.m31;
	target.m32 = self.m32;
	target.m33 = self.m33;
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.copyFromShape = function(this1,source) {
	var self = this1;
	self.m00 = source.m00;
	self.m01 = source.m01;
	self.m02 = source.m02;
	self.m03 = source.m03;
	self.m10 = source.m10;
	self.m11 = source.m11;
	self.m12 = source.m12;
	self.m13 = source.m13;
	self.m20 = source.m20;
	self.m21 = source.m21;
	self.m22 = source.m22;
	self.m23 = source.m23;
	self.m30 = source.m30;
	self.m31 = source.m31;
	self.m32 = source.m32;
	self.m33 = source.m33;
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.setRotateFromQuaternion = function(this1,q) {
	var self = this1;
	var s = q.s;
	var x = q.x;
	var y = q.y;
	var z = q.z;
	self.m00 = 1 - 2 * (y * y + z * z);
	self.m10 = 2 * (x * y - s * z);
	self.m20 = 2 * (s * y + x * z);
	self.m01 = 2 * (x * y + s * z);
	self.m11 = 1 - 2 * (x * x + z * z);
	self.m21 = 2 * (y * z - s * x);
	self.m02 = 2 * (x * z - s * y);
	self.m12 = 2 * (y * z + s * x);
	self.m22 = 1 - 2 * (x * x + y * y);
	return self;
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.setTranslate = function(this1,x,y,z) {
	var self = this1;
	self.m30 = x;
	self.m31 = y;
	self.m32 = z;
	self.m33 = 1.0;
	return self;
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.clone = function(this1) {
	var self = this1;
	return new hxmath_math_Matrix4x4Default(self.m00,self.m10,self.m20,self.m30,self.m01,self.m11,self.m21,self.m31,self.m02,self.m12,self.m22,self.m32,self.m03,self.m13,self.m23,self.m33);
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.m00;
	case 1:
		return self.m10;
	case 2:
		return self.m20;
	case 3:
		return self.m30;
	case 4:
		return self.m01;
	case 5:
		return self.m11;
	case 6:
		return self.m21;
	case 7:
		return self.m31;
	case 8:
		return self.m02;
	case 9:
		return self.m12;
	case 10:
		return self.m22;
	case 11:
		return self.m32;
	case 12:
		return self.m03;
	case 13:
		return self.m13;
	case 14:
		return self.m23;
	case 15:
		return self.m33;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.m00 = value;
	case 1:
		return self.m10 = value;
	case 2:
		return self.m20 = value;
	case 3:
		return self.m30 = value;
	case 4:
		return self.m01 = value;
	case 5:
		return self.m11 = value;
	case 6:
		return self.m21 = value;
	case 7:
		return self.m31 = value;
	case 8:
		return self.m02 = value;
	case 9:
		return self.m12 = value;
	case 10:
		return self.m22 = value;
	case 11:
		return self.m32 = value;
	case 12:
		return self.m03 = value;
	case 13:
		return self.m13 = value;
	case 14:
		return self.m23 = value;
	case 15:
		return self.m33 = value;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.getElement = function(this1,column,row) {
	var self = this1;
	var tmp;
	switch(row * 4 + column) {
	case 0:
		tmp = self.m00;
		break;
	case 1:
		tmp = self.m10;
		break;
	case 2:
		tmp = self.m20;
		break;
	case 3:
		tmp = self.m30;
		break;
	case 4:
		tmp = self.m01;
		break;
	case 5:
		tmp = self.m11;
		break;
	case 6:
		tmp = self.m21;
		break;
	case 7:
		tmp = self.m31;
		break;
	case 8:
		tmp = self.m02;
		break;
	case 9:
		tmp = self.m12;
		break;
	case 10:
		tmp = self.m22;
		break;
	case 11:
		tmp = self.m32;
		break;
	case 12:
		tmp = self.m03;
		break;
	case 13:
		tmp = self.m13;
		break;
	case 14:
		tmp = self.m23;
		break;
	case 15:
		tmp = self.m33;
		break;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
	return tmp;
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.setElement = function(this1,column,row,value) {
	var self = this1;
	var tmp;
	switch(row * 4 + column) {
	case 0:
		tmp = self.m00 = value;
		break;
	case 1:
		tmp = self.m10 = value;
		break;
	case 2:
		tmp = self.m20 = value;
		break;
	case 3:
		tmp = self.m30 = value;
		break;
	case 4:
		tmp = self.m01 = value;
		break;
	case 5:
		tmp = self.m11 = value;
		break;
	case 6:
		tmp = self.m21 = value;
		break;
	case 7:
		tmp = self.m31 = value;
		break;
	case 8:
		tmp = self.m02 = value;
		break;
	case 9:
		tmp = self.m12 = value;
		break;
	case 10:
		tmp = self.m22 = value;
		break;
	case 11:
		tmp = self.m32 = value;
		break;
	case 12:
		tmp = self.m03 = value;
		break;
	case 13:
		tmp = self.m13 = value;
		break;
	case 14:
		tmp = self.m23 = value;
		break;
	case 15:
		tmp = self.m33 = value;
		break;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
	return tmp;
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.col = function(this1,index) {
	var self = this1;
	switch(index) {
	case 0:
		return new hxmath_math_Vector4Default(self.m00,self.m01,self.m02,self.m03);
	case 1:
		return new hxmath_math_Vector4Default(self.m10,self.m11,self.m12,self.m13);
	case 2:
		return new hxmath_math_Vector4Default(self.m20,self.m21,self.m22,self.m23);
	case 3:
		return new hxmath_math_Vector4Default(self.m30,self.m31,self.m32,self.m33);
	default:
		throw new js__$Boot_HaxeError("Invalid column");
	}
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.row = function(this1,index) {
	var self = this1;
	switch(index) {
	case 0:
		return new hxmath_math_Vector4Default(self.m00,self.m10,self.m20,self.m30);
	case 1:
		return new hxmath_math_Vector4Default(self.m01,self.m11,self.m21,self.m31);
	case 2:
		return new hxmath_math_Vector4Default(self.m02,self.m12,self.m22,self.m32);
	case 3:
		return new hxmath_math_Vector4Default(self.m03,self.m13,self.m23,self.m33);
	default:
		throw new js__$Boot_HaxeError("Invalid row");
	}
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.applyScalarFunc = function(this1,func) {
	var self = this1;
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.m00;
			break;
		case 1:
			tmp = self.m10;
			break;
		case 2:
			tmp = self.m20;
			break;
		case 3:
			tmp = self.m30;
			break;
		case 4:
			tmp = self.m01;
			break;
		case 5:
			tmp = self.m11;
			break;
		case 6:
			tmp = self.m21;
			break;
		case 7:
			tmp = self.m31;
			break;
		case 8:
			tmp = self.m02;
			break;
		case 9:
			tmp = self.m12;
			break;
		case 10:
			tmp = self.m22;
			break;
		case 11:
			tmp = self.m32;
			break;
		case 12:
			tmp = self.m03;
			break;
		case 13:
			tmp = self.m13;
			break;
		case 14:
			tmp = self.m23;
			break;
		case 15:
			tmp = self.m33;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = func(tmp);
		switch(i) {
		case 0:
			self.m00 = value;
			break;
		case 1:
			self.m10 = value;
			break;
		case 2:
			self.m20 = value;
			break;
		case 3:
			self.m30 = value;
			break;
		case 4:
			self.m01 = value;
			break;
		case 5:
			self.m11 = value;
			break;
		case 6:
			self.m21 = value;
			break;
		case 7:
			self.m31 = value;
			break;
		case 8:
			self.m02 = value;
			break;
		case 9:
			self.m12 = value;
			break;
		case 10:
			self.m22 = value;
			break;
		case 11:
			self.m32 = value;
			break;
		case 12:
			self.m03 = value;
			break;
		case 13:
			self.m13 = value;
			break;
		case 14:
			self.m23 = value;
			break;
		case 15:
			self.m33 = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	return self;
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.applySubMatrixTranspose = function(this1) {
	var self = this1;
	var temp = self.m01;
	self.m01 = self.m10;
	self.m10 = temp;
	temp = self.m02;
	self.m02 = self.m20;
	self.m20 = temp;
	temp = self.m12;
	self.m12 = self.m21;
	self.m21 = temp;
	return self;
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.applyInvertFrame = function(this1) {
	var self = this1;
	var temp = self.m01;
	self.m01 = self.m10;
	self.m10 = temp;
	temp = self.m02;
	self.m02 = self.m20;
	self.m20 = temp;
	temp = self.m12;
	self.m12 = self.m21;
	self.m21 = temp;
	var tx = -(self.m00 * self.m30 + self.m10 * self.m31 + self.m20 * self.m32);
	var ty = -(self.m01 * self.m30 + self.m11 * self.m31 + self.m21 * self.m32);
	var tz = -(self.m02 * self.m30 + self.m12 * self.m31 + self.m22 * self.m32);
	self.m30 = tx;
	self.m31 = ty;
	self.m32 = tz;
	return self;
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.get_zero = function() {
	return new hxmath_math_Matrix4x4Default(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.get_identity = function() {
	return new hxmath_math_Matrix4x4Default(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.get_t = function(this1) {
	var self = this1;
	return new hxmath_math_Vector3Default(self.m30,self.m31,self.m32);
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.set_t = function(this1,t) {
	var self = this1;
	self.m30 = t.x;
	self.m31 = t.y;
	self.m32 = t.z;
	return t;
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.get_transpose = function(this1) {
	var self = this1;
	return new hxmath_math_Matrix4x4Default(self.m00,self.m01,self.m02,self.m03,self.m10,self.m11,self.m12,self.m13,self.m20,self.m21,self.m22,self.m23,self.m30,self.m31,self.m32,self.m33);
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.get_det = function(this1) {
	var self = this1;
	var m00 = self.m00;
	var m10 = self.m10;
	var m20 = self.m20;
	var m30 = self.m30;
	var m01 = self.m01;
	var m11 = self.m11;
	var m21 = self.m21;
	var m31 = self.m31;
	var m02 = self.m02;
	var m12 = self.m12;
	var m22 = self.m22;
	var m32 = self.m32;
	var m03 = self.m03;
	var m13 = self.m13;
	var m23 = self.m23;
	var m33 = self.m33;
	return m00 * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13)) - m10 * (m01 * (m22 * m33 - m32 * m23) - m21 * (m02 * m33 - m32 * m03) + m31 * (m02 * m23 - m22 * m03)) + m20 * (m01 * (m12 * m33 - m32 * m13) - m11 * (m02 * m33 - m32 * m03) + m31 * (m02 * m13 - m12 * m03)) - m30 * (m01 * (m12 * m23 - m22 * m13) - m11 * (m02 * m23 - m22 * m03) + m21 * (m02 * m13 - m12 * m03));
};
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.get_subMatrix = function(this1) {
	var self = this1;
	return new hxmath_math_Matrix3x3Default(self.m00,self.m10,self.m20,self.m01,self.m11,self.m21,self.m02,self.m12,self.m22);
};
var hxmath_math_QuaternionDefault = function(s,x,y,z) {
	this.s = s;
	this.x = x;
	this.y = y;
	this.z = z;
};
hxmath_math_QuaternionDefault.__name__ = ["hxmath","math","QuaternionDefault"];
hxmath_math_QuaternionDefault.prototype = {
	s: null
	,x: null
	,y: null
	,z: null
	,toString: function() {
		return "[" + this.s + ", (" + this.x + ", " + this.y + ", " + this.z + ")]";
	}
	,__class__: hxmath_math_QuaternionDefault
};
var hxmath_math__$Quaternion_Quaternion_$Impl_$ = {};
hxmath_math__$Quaternion_Quaternion_$Impl_$.__name__ = ["hxmath","math","_Quaternion","Quaternion_Impl_"];
hxmath_math__$Quaternion_Quaternion_$Impl_$._new = function(s,x,y,z) {
	return new hxmath_math_QuaternionDefault(s,x,y,z);
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.fromArray = function(rawData) {
	if(rawData.length != 4) {
		throw new js__$Boot_HaxeError("Invalid rawData.");
	}
	return new hxmath_math_QuaternionDefault(rawData[0],rawData[1],rawData[2],rawData[3]);
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.fromAxisAngle = function(angleDegrees,axis) {
	var angleRadians = Math.PI / 180 * angleDegrees;
	var cosHalfAngle = Math.cos(angleRadians / 2.0);
	var sinHalfAngle = Math.sin(angleRadians / 2.0);
	return new hxmath_math_QuaternionDefault(cosHalfAngle,sinHalfAngle * axis.x,sinHalfAngle * axis.y,sinHalfAngle * axis.z);
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.multiplyScalar = function(a,s) {
	var self = new hxmath_math_QuaternionDefault(a.s,a.x,a.y,a.z);
	self.s *= s;
	self.x *= s;
	self.y *= s;
	self.z *= s;
	return self;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.multiply = function(a,b) {
	return new hxmath_math_QuaternionDefault(a.s * b.s - a.x * b.x - a.y * b.y - a.z * b.z,a.s * b.x + b.s * a.x + a.y * b.z - a.z * b.y,a.s * b.y + b.s * a.y + a.z * b.x - a.x * b.z,a.s * b.z + b.s * a.z + a.x * b.y - a.y * b.x);
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.add = function(a,b) {
	var self = new hxmath_math_QuaternionDefault(a.s,a.x,a.y,a.z);
	self.s += b.s;
	self.x += b.x;
	self.y += b.y;
	self.z += b.z;
	return self;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.subtract = function(a,b) {
	var self = new hxmath_math_QuaternionDefault(a.s,a.x,a.y,a.z);
	self.s -= b.s;
	self.x -= b.x;
	self.y -= b.y;
	self.z -= b.z;
	return self;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.conjugate = function(a) {
	return new hxmath_math_QuaternionDefault(a.s,-a.x,-a.y,-a.z);
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.negate = function(a) {
	return new hxmath_math_QuaternionDefault(-a.s,-a.x,-a.y,-a.z);
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.equals = function(a,b) {
	if(!(a == null && b == null)) {
		if(a != null && b != null && a.s == b.s && a.x == b.x && a.y == b.y) {
			return a.z == b.z;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.lerp = function(a,b,t) {
	var s = 1.0 - t;
	var self = new hxmath_math_QuaternionDefault(a.s,a.x,a.y,a.z);
	self.s *= s;
	self.x *= s;
	self.y *= s;
	self.z *= s;
	var self1 = new hxmath_math_QuaternionDefault(b.s,b.x,b.y,b.z);
	self1.s *= t;
	self1.x *= t;
	self1.y *= t;
	self1.z *= t;
	var self2 = new hxmath_math_QuaternionDefault(self.s,self.x,self.y,self.z);
	self2.s += self1.s;
	self2.x += self1.x;
	self2.y += self1.y;
	self2.z += self1.z;
	return self2;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.slerp = function(a,b,t) {
	var cosHalfTheta = a.s * b.s + a.x * b.x + a.y * b.y + a.z * b.z;
	if(Math.abs(cosHalfTheta) >= 1.0) {
		return a;
	}
	var halfTheta = Math.acos(cosHalfTheta);
	var sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);
	if(Math.abs(sinHalfTheta) < 1e-3) {
		var s = 1.0 - t;
		var self = new hxmath_math_QuaternionDefault(a.s,a.x,a.y,a.z);
		self.s *= s;
		self.x *= s;
		self.y *= s;
		self.z *= s;
		var self1 = new hxmath_math_QuaternionDefault(b.s,b.x,b.y,b.z);
		self1.s *= t;
		self1.x *= t;
		self1.y *= t;
		self1.z *= t;
		var self2 = new hxmath_math_QuaternionDefault(self.s,self.x,self.y,self.z);
		self2.s += self1.s;
		self2.x += self1.x;
		self2.y += self1.y;
		self2.z += self1.z;
		var self3 = self2;
		var length = Math.sqrt(self3.s * self3.s + self3.x * self3.x + self3.y * self3.y + self3.z * self3.z);
		if(length > 0.0) {
			var k = 1.0 / length;
			self3.s *= k;
			self3.x *= k;
			self3.y *= k;
			self3.z *= k;
		}
		return self3;
	}
	var ta = Math.sin((1 - t) * halfTheta) / sinHalfTheta;
	var tb = Math.sin(t * halfTheta) / sinHalfTheta;
	var result = new hxmath_math_QuaternionDefault(0,0,0,0);
	result.x = a.x * ta + b.x * tb;
	result.y = a.y * ta + b.y * tb;
	result.z = a.z * ta + b.z * tb;
	result.s = a.s * ta + b.s * tb;
	return result;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.dot = function(a,b) {
	return a.s * b.s + a.x * b.x + a.y * b.y + a.z * b.z;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.set = function(this1,s,x,y,z) {
	var self = this1;
	self.s = s;
	self.x = x;
	self.y = y;
	self.z = z;
	return self;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.invert = function(this1) {
	var self = this1;
	var self1 = new hxmath_math_QuaternionDefault(self.s,self.x,self.y,self.z);
	self1.x = -self1.x;
	self1.y = -self1.y;
	self1.z = -self1.z;
	var self2 = self1;
	var length = Math.sqrt(self2.s * self2.s + self2.x * self2.x + self2.y * self2.y + self2.z * self2.z);
	if(length > 0.0) {
		var k = 1.0 / length;
		self2.s *= k;
		self2.x *= k;
		self2.y *= k;
		self2.z *= k;
	}
	return self2;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.multiplyWithScalar = function(this1,s) {
	var self = this1;
	self.s *= s;
	self.x *= s;
	self.y *= s;
	self.z *= s;
	return self;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.addWith = function(this1,a) {
	var self = this1;
	self.s += a.s;
	self.x += a.x;
	self.y += a.y;
	self.z += a.z;
	return self;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.subtractWith = function(this1,a) {
	var self = this1;
	self.s -= a.s;
	self.x -= a.x;
	self.y -= a.y;
	self.z -= a.z;
	return self;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.copyTo = function(this1,target) {
	var self = this1;
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.s;
			break;
		case 1:
			tmp = self.x;
			break;
		case 2:
			tmp = self.y;
			break;
		case 3:
			tmp = self.z;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			target.s = value;
			break;
		case 1:
			target.x = value;
			break;
		case 2:
			target.y = value;
			break;
		case 3:
			target.z = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.copyToShape = function(this1,target) {
	var self = this1;
	target.s = self.s;
	target.x = self.x;
	target.y = self.y;
	target.z = self.z;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.copyFromShape = function(this1,source) {
	var self = this1;
	self.s = source.s;
	self.x = source.x;
	self.y = source.y;
	self.z = source.z;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.clone = function(this1) {
	var self = this1;
	return new hxmath_math_QuaternionDefault(self.s,self.x,self.y,self.z);
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.s;
	case 1:
		return self.x;
	case 2:
		return self.y;
	case 3:
		return self.z;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.s = value;
	case 1:
		return self.x = value;
	case 2:
		return self.y = value;
	case 3:
		return self.z = value;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.applyScalarFunc = function(this1,func) {
	var self = this1;
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.s;
			break;
		case 1:
			tmp = self.x;
			break;
		case 2:
			tmp = self.y;
			break;
		case 3:
			tmp = self.z;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = func(tmp);
		switch(i) {
		case 0:
			self.s = value;
			break;
		case 1:
			self.x = value;
			break;
		case 2:
			self.y = value;
			break;
		case 3:
			self.z = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	return self;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.log = function(this1) {
	var self = this1;
	var theta = Math.acos(self.s);
	var sinTheta = Math.sin(theta);
	if(sinTheta > 0.0) {
		var k = theta / sinTheta;
		return new hxmath_math_QuaternionDefault(0.0,k * self.x,k * self.y,k * self.z);
	} else {
		return new hxmath_math_QuaternionDefault(0,0,0,0);
	}
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.exp = function(this1) {
	var self = this1;
	var theta = Math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z);
	var sinTheta = Math.sin(theta);
	var cosTheta = Math.cos(theta);
	if(theta > 0.0) {
		return new hxmath_math_QuaternionDefault(cosTheta,sinTheta * self.x,sinTheta * self.y,sinTheta * self.z);
	} else {
		return new hxmath_math_QuaternionDefault(cosTheta,0,0,0);
	}
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.rotate = function(this1,u) {
	var self = this1;
	var a = 2.0 * (self.x * u.x + self.y * u.y + self.z * u.z);
	var b = self.s * self.s - self.x * self.x - self.y * self.y - self.z * self.z;
	var c = 2.0 * self.s;
	return new hxmath_math_Vector3Default(a * self.x + b * u.x + c * (self.y * u.z - self.z * u.y),a * self.y + b * u.y + c * (self.z * u.x - self.x * u.z),a * self.z + b * u.z + c * (self.x * u.y - self.y * u.x));
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.angleWith = function(this1,b) {
	var self = this1;
	return 2.0 * Math.acos((self.s * b.s + self.x * b.x + self.y * b.y + self.z * b.z) / (Math.sqrt(self.s * self.s + self.x * self.x + self.y * self.y + self.z * self.z) * Math.sqrt(b.s * b.s + b.x * b.x + b.y * b.y + b.z * b.z)));
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.normalize = function(this1) {
	var self = this1;
	var length = Math.sqrt(self.s * self.s + self.x * self.x + self.y * self.y + self.z * self.z);
	if(length > 0.0) {
		var k = 1.0 / length;
		self.s *= k;
		self.x *= k;
		self.y *= k;
		self.z *= k;
	}
	return self;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.applyConjugate = function(this1) {
	var self = this1;
	self.x = -self.x;
	self.y = -self.y;
	self.z = -self.z;
	return self;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.applyInvert = function(this1) {
	var self = this1;
	self.x = -self.x;
	self.y = -self.y;
	self.z = -self.z;
	var self1 = self;
	var length = Math.sqrt(self1.s * self1.s + self1.x * self1.x + self1.y * self1.y + self1.z * self1.z);
	if(length > 0.0) {
		var k = 1.0 / length;
		self1.s *= k;
		self1.x *= k;
		self1.y *= k;
		self1.z *= k;
	}
	return self1;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.get_zero = function() {
	return new hxmath_math_QuaternionDefault(0,0,0,0);
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.get_identity = function() {
	return new hxmath_math_QuaternionDefault(1,0,0,0);
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.get_length = function(this1) {
	var self = this1;
	return Math.sqrt(self.s * self.s + self.x * self.x + self.y * self.y + self.z * self.z);
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.get_lengthSq = function(this1) {
	var self = this1;
	return self.s * self.s + self.x * self.x + self.y * self.y + self.z * self.z;
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.get_matrix = function(this1) {
	var self = this1;
	var s = self.s;
	var x = self.x;
	var y = self.y;
	var z = self.z;
	return new hxmath_math_Matrix3x3Default(1 - 2 * (y * y + z * z),2 * (x * y - s * z),2 * (s * y + x * z),2 * (x * y + s * z),1 - 2 * (x * x + z * z),2 * (y * z - s * x),2 * (x * z - s * y),2 * (y * z + s * x),1 - 2 * (x * x + y * y));
};
hxmath_math__$Quaternion_Quaternion_$Impl_$.get_normal = function(this1) {
	var self = this1;
	var _g = 1.0 / Math.sqrt(self.s * self.s + self.x * self.x + self.y * self.y + self.z * self.z);
	var self1 = new hxmath_math_QuaternionDefault(self.s,self.x,self.y,self.z);
	self1.s *= _g;
	self1.x *= _g;
	self1.y *= _g;
	self1.z *= _g;
	return self1;
};
var hxmath_math__$ShortVector2_ShortVector2_$Impl_$ = {};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.__name__ = ["hxmath","math","_ShortVector2","ShortVector2_Impl_"];
hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new = function(x,y) {
	var this1;
	if(!(x >= 0 && y >= 0 && x <= 65535 && y <= 65535)) {
		throw new js__$Boot_HaxeError("Specified (x=" + x + ", y=" + y + ") fields not in the range [0, " + 65535 + "]");
	}
	this1 = y << 16 | x;
	return this1;
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.fromArray = function(rawData) {
	if(rawData.length != 2) {
		throw new js__$Boot_HaxeError("Invalid rawData.");
	}
	return hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(rawData[0],rawData[1]);
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.dot = function(a,b) {
	return (a & 65535) * (b & 65535) + (a >> 16 & 65535) * (b >> 16 & 65535);
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.multiply = function(a,s) {
	return hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(s * (a & 65535),s * (a >> 16 & 65535));
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.add = function(a,b) {
	return hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new((a & 65535) + (b & 65535),(a >> 16 & 65535) + (b >> 16 & 65535));
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.subtract = function(a,b) {
	return hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new((a & 65535) - (b & 65535),(a >> 16 & 65535) - (b >> 16 & 65535));
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.negate = function(a) {
	return hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(-(a & 65535),-(a >> 16 & 65535));
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.max = function(a,b) {
	var a1 = a & 65535;
	var b1 = b & 65535;
	var tmp = b1 > a1?b1:a1;
	var a2 = a >> 16 & 65535;
	var b2 = b >> 16 & 65535;
	return hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(tmp,b2 > a2?b2:a2);
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.min = function(a,b) {
	var a1 = a & 65535;
	var b1 = b & 65535;
	var tmp = b1 < a1?b1:a1;
	var a2 = a >> 16 & 65535;
	var b2 = b >> 16 & 65535;
	return hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(tmp,b2 < a2?b2:a2);
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self & 65535;
	case 1:
		return self >> 16 & 65535;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.toVector2 = function(this1) {
	var self = this1;
	return new hxmath_math_Vector2Default(self & 65535,self >> 16 & 65535);
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.indexInBounds = function(x,y) {
	if(x >= 0 && y >= 0 && x <= 65535) {
		return y <= 65535;
	} else {
		return false;
	}
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.get_zero = function() {
	return hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(0,0);
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.get_xAxis = function() {
	return hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(1,0);
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.get_yAxis = function() {
	return hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(0,1);
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.get_x = function(this1) {
	return this1 & 65535;
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.get_y = function(this1) {
	return this1 >> 16 & 65535;
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.get_lengthSq = function(this1) {
	var self = this1;
	return (self & 65535) * (self & 65535) + (self >> 16 & 65535) * (self >> 16 & 65535);
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.get_rotatedLeft = function(this1) {
	return hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(-(this1 >> 16 & 65535),this1 & 65535);
};
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.get_rotatedRight = function(this1) {
	return hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(this1 >> 16 & 65535,-(this1 & 65535));
};
var hxmath_math_Vector2Default = function(x,y) {
	this.x = x;
	this.y = y;
};
hxmath_math_Vector2Default.__name__ = ["hxmath","math","Vector2Default"];
hxmath_math_Vector2Default.prototype = {
	x: null
	,y: null
	,toString: function() {
		return "(" + this.x + ", " + this.y + ")";
	}
	,__class__: hxmath_math_Vector2Default
};
var hxmath_math__$Vector2_Vector2_$Impl_$ = {};
hxmath_math__$Vector2_Vector2_$Impl_$.__name__ = ["hxmath","math","_Vector2","Vector2_Impl_"];
hxmath_math__$Vector2_Vector2_$Impl_$._new = function(x,y) {
	return new hxmath_math_Vector2Default(x,y);
};
hxmath_math__$Vector2_Vector2_$Impl_$.fromArray = function(rawData) {
	if(rawData.length != 2) {
		throw new js__$Boot_HaxeError("Invalid rawData.");
	}
	return new hxmath_math_Vector2Default(rawData[0],rawData[1]);
};
hxmath_math__$Vector2_Vector2_$Impl_$.fromPolar = function(angle,radius) {
	return new hxmath_math_Vector2Default(radius * Math.cos(angle),radius * Math.sin(angle));
};
hxmath_math__$Vector2_Vector2_$Impl_$.fromVector2Shape = function(other) {
	return new hxmath_math_Vector2Default(other.x,other.y);
};
hxmath_math__$Vector2_Vector2_$Impl_$.toIntVector2 = function(this1,func) {
	var self = this1;
	if(func == null) {
		func = Std["int"];
	}
	return hxmath_math__$IntVector2_IntVector2_$Impl_$._new(func(self.x),func(self.y));
};
hxmath_math__$Vector2_Vector2_$Impl_$.dot = function(a,b) {
	return a.x * b.x + a.y * b.y;
};
hxmath_math__$Vector2_Vector2_$Impl_$.multiply = function(a,s) {
	var self = new hxmath_math_Vector2Default(a.x,a.y);
	self.x *= s;
	self.y *= s;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.divide = function(a,s) {
	var self = new hxmath_math_Vector2Default(a.x,a.y);
	self.x /= s;
	self.y /= s;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.add = function(a,b) {
	var self = new hxmath_math_Vector2Default(a.x,a.y);
	self.x += b.x;
	self.y += b.y;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.subtract = function(a,b) {
	var self = new hxmath_math_Vector2Default(a.x,a.y);
	self.x -= b.x;
	self.y -= b.y;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.negate = function(a) {
	return new hxmath_math_Vector2Default(-a.x,-a.y);
};
hxmath_math__$Vector2_Vector2_$Impl_$.equals = function(a,b) {
	if(!(a == null && b == null)) {
		if(a != null && b != null && a.x == b.x) {
			return a.y == b.y;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxmath_math__$Vector2_Vector2_$Impl_$.lerp = function(a,b,t) {
	return new hxmath_math_Vector2Default((1.0 - t) * a.x + t * b.x,(1.0 - t) * a.y + t * b.y);
};
hxmath_math__$Vector2_Vector2_$Impl_$.max = function(a,b) {
	var self = new hxmath_math_Vector2Default(a.x,a.y);
	self.x = Math.max(self.x,b.x);
	self.y = Math.max(self.y,b.y);
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.min = function(a,b) {
	var self = new hxmath_math_Vector2Default(a.x,a.y);
	self.x = Math.min(self.x,b.x);
	self.y = Math.min(self.y,b.y);
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.project = function(a,b) {
	var self = new hxmath_math_Vector2Default(a.x,a.y);
	var s = (self.x * b.x + self.y * b.y) / (b.x * b.x + b.y * b.y);
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = b.x;
			break;
		case 1:
			tmp = b.y;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			self.x = value;
			break;
		case 1:
			self.y = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	self.x *= s;
	self.y *= s;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.reflect = function(v,normal) {
	var self = new hxmath_math_Vector2Default(v.x,v.y);
	var self1 = new hxmath_math_Vector2Default(self.x,self.y);
	var s = (self1.x * normal.x + self1.y * normal.y) / (normal.x * normal.x + normal.y * normal.y);
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = normal.x;
			break;
		case 1:
			tmp = normal.y;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			self1.x = value;
			break;
		case 1:
			self1.y = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	self1.x *= s;
	self1.y *= s;
	self1.x *= 2.0;
	self1.y *= 2.0;
	self.x -= self1.x;
	self.y -= self1.y;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.orthoNormalize = function(u,v) {
	var length = Math.sqrt(u.x * u.x + u.y * u.y);
	if(length > 0.0) {
		u.x /= length;
		u.y /= length;
	}
	var self = new hxmath_math_Vector2Default(v.x,v.y);
	var s = (self.x * u.x + self.y * u.y) / (u.x * u.x + u.y * u.y);
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = u.x;
			break;
		case 1:
			tmp = u.y;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			self.x = value;
			break;
		case 1:
			self.y = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	self.x *= s;
	self.y *= s;
	v.x -= self.x;
	v.y -= self.y;
	var length1 = Math.sqrt(v.x * v.x + v.y * v.y);
	if(length1 > 0.0) {
		v.x /= length1;
		v.y /= length1;
	}
};
hxmath_math__$Vector2_Vector2_$Impl_$.set = function(this1,x,y) {
	var self = this1;
	self.x = x;
	self.y = y;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.multiplyWith = function(this1,s) {
	var self = this1;
	self.x *= s;
	self.y *= s;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.divideWith = function(this1,s) {
	var self = this1;
	self.x /= s;
	self.y /= s;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.addWith = function(this1,a) {
	var self = this1;
	self.x += a.x;
	self.y += a.y;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.subtractWith = function(this1,a) {
	var self = this1;
	self.x -= a.x;
	self.y -= a.y;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.maxWith = function(this1,a) {
	var self = this1;
	self.x = Math.max(self.x,a.x);
	self.y = Math.max(self.y,a.y);
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.minWith = function(this1,a) {
	var self = this1;
	self.x = Math.min(self.x,a.x);
	self.y = Math.min(self.y,a.y);
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.projectOnto = function(this1,a) {
	var self = this1;
	var s = (self.x * a.x + self.y * a.y) / (a.x * a.x + a.y * a.y);
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = a.x;
			break;
		case 1:
			tmp = a.y;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			self.x = value;
			break;
		case 1:
			self.y = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	self.x *= s;
	self.y *= s;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.reflectBy = function(this1,normal) {
	var self = this1;
	var self1 = new hxmath_math_Vector2Default(self.x,self.y);
	var s = (self1.x * normal.x + self1.y * normal.y) / (normal.x * normal.x + normal.y * normal.y);
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = normal.x;
			break;
		case 1:
			tmp = normal.y;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			self1.x = value;
			break;
		case 1:
			self1.y = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	self1.x *= s;
	self1.y *= s;
	self1.x *= 2.0;
	self1.y *= 2.0;
	self.x -= self1.x;
	self.y -= self1.y;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.copyTo = function(this1,target) {
	var self = this1;
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.x;
			break;
		case 1:
			tmp = self.y;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			target.x = value;
			break;
		case 1:
			target.y = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
};
hxmath_math__$Vector2_Vector2_$Impl_$.copyToShape = function(this1,target) {
	var self = this1;
	target.x = self.x;
	target.y = self.y;
};
hxmath_math__$Vector2_Vector2_$Impl_$.copyFromShape = function(this1,source) {
	var self = this1;
	self.x = source.x;
	self.y = source.y;
};
hxmath_math__$Vector2_Vector2_$Impl_$.clone = function(this1) {
	var self = this1;
	return new hxmath_math_Vector2Default(self.x,self.y);
};
hxmath_math__$Vector2_Vector2_$Impl_$.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x;
	case 1:
		return self.y;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Vector2_Vector2_$Impl_$.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x = value;
	case 1:
		return self.y = value;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Vector2_Vector2_$Impl_$.applyNegate = function(this1) {
	var self = this1;
	self.x = -self.x;
	self.y = -self.y;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.applyScalarFunc = function(this1,func) {
	var self = this1;
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.x;
			break;
		case 1:
			tmp = self.y;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = func(tmp);
		switch(i) {
		case 0:
			self.x = value;
			break;
		case 1:
			self.y = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.angleWith = function(this1,b) {
	var self = this1;
	return Math.acos((self.x * b.x + self.y * b.y) / (Math.sqrt(self.x * self.x + self.y * self.y) * Math.sqrt(b.x * b.x + b.y * b.y)));
};
hxmath_math__$Vector2_Vector2_$Impl_$.signedAngleWith = function(this1,b) {
	var self = this1;
	var x = self.x * b.y - b.x * self.y;
	return (Math.abs(x) < 0?0:x <= 0?-1:1) * Math.acos((self.x * b.x + self.y * b.y) / (Math.sqrt(self.x * self.x + self.y * self.y) * Math.sqrt(b.x * b.x + b.y * b.y)));
};
hxmath_math__$Vector2_Vector2_$Impl_$.distanceTo = function(this1,b) {
	var self = this1;
	var self1 = new hxmath_math_Vector2Default(self.x,self.y);
	self1.x -= b.x;
	self1.y -= b.y;
	var self2 = self1;
	return Math.sqrt(self2.x * self2.x + self2.y * self2.y);
};
hxmath_math__$Vector2_Vector2_$Impl_$.normalize = function(this1) {
	var self = this1;
	var length = Math.sqrt(self.x * self.x + self.y * self.y);
	if(length > 0.0) {
		self.x /= length;
		self.y /= length;
	}
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.normalizeTo = function(this1,newLength) {
	var self = this1;
	var length = Math.sqrt(self.x * self.x + self.y * self.y);
	if(length > 0.0) {
		self.x /= length;
		self.y /= length;
	}
	self.x *= newLength;
	self.y *= newLength;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.clamp = function(this1,min,max) {
	var self = this1;
	var length = Math.sqrt(self.x * self.x + self.y * self.y);
	if(length < min) {
		var length1 = Math.sqrt(self.x * self.x + self.y * self.y);
		if(length1 > 0.0) {
			self.x /= length1;
			self.y /= length1;
		}
		self.x *= min;
		self.y *= min;
	} else if(length > max) {
		var length2 = Math.sqrt(self.x * self.x + self.y * self.y);
		if(length2 > 0.0) {
			self.x /= length2;
			self.y /= length2;
		}
		self.x *= max;
		self.y *= max;
	}
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.rotate = function(this1,angle,pivot) {
	var self = this1;
	Math.cos(angle);
	Math.sin(angle);
	var dx = self.x - pivot.x;
	var dy = self.y - pivot.y;
	self.x = dx * Math.cos(angle) - dy * Math.sin(angle);
	self.y = dx * Math.sin(angle) + dy * Math.cos(angle);
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.rotateLeft = function(this1) {
	var self = this1;
	var newX = -self.y;
	self.y = self.x;
	self.x = newX;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.rotateRight = function(this1) {
	var self = this1;
	var newX = self.y;
	self.y = -self.x;
	self.x = newX;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_zero = function() {
	return new hxmath_math_Vector2Default(0.0,0.0);
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_xAxis = function() {
	return new hxmath_math_Vector2Default(1.0,0.0);
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_yAxis = function() {
	return new hxmath_math_Vector2Default(0.0,1.0);
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_length = function(this1) {
	var self = this1;
	return Math.sqrt(self.x * self.x + self.y * self.y);
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_lengthSq = function(this1) {
	var self = this1;
	return self.x * self.x + self.y * self.y;
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_angle = function(this1) {
	var self = this1;
	return Math.atan2(self.y,self.x);
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_normal = function(this1) {
	var self = this1;
	var self1 = new hxmath_math_Vector2Default(self.x,self.y);
	var length = Math.sqrt(self1.x * self1.x + self1.y * self1.y);
	if(length > 0.0) {
		self1.x /= length;
		self1.y /= length;
	}
	return self1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_rotatedLeft = function(this1) {
	var self = this1;
	var self1 = new hxmath_math_Vector2Default(self.x,self.y);
	var newX = -self1.y;
	self1.y = self1.x;
	self1.x = newX;
	return self1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_rotatedRight = function(this1) {
	var self = this1;
	var self1 = new hxmath_math_Vector2Default(self.x,self.y);
	var newX = self1.y;
	self1.y = -self1.x;
	self1.x = newX;
	return self1;
};
var hxmath_math_Vector3Default = function(x,y,z) {
	this.x = x;
	this.y = y;
	this.z = z;
};
hxmath_math_Vector3Default.__name__ = ["hxmath","math","Vector3Default"];
hxmath_math_Vector3Default.prototype = {
	x: null
	,y: null
	,z: null
	,toString: function() {
		return "(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,__class__: hxmath_math_Vector3Default
};
var hxmath_math__$Vector3_Vector3_$Impl_$ = {};
hxmath_math__$Vector3_Vector3_$Impl_$.__name__ = ["hxmath","math","_Vector3","Vector3_Impl_"];
hxmath_math__$Vector3_Vector3_$Impl_$._new = function(x,y,z) {
	return new hxmath_math_Vector3Default(x,y,z);
};
hxmath_math__$Vector3_Vector3_$Impl_$.fromArray = function(rawData) {
	if(rawData.length != 3) {
		throw new js__$Boot_HaxeError("Invalid rawData.");
	}
	return new hxmath_math_Vector3Default(rawData[0],rawData[1],rawData[2]);
};
hxmath_math__$Vector3_Vector3_$Impl_$.fromVector3Shape = function(other) {
	return new hxmath_math_Vector3Default(other.x,other.y,other.z);
};
hxmath_math__$Vector3_Vector3_$Impl_$.dot = function(a,b) {
	return a.x * b.x + a.y * b.y + a.z * b.z;
};
hxmath_math__$Vector3_Vector3_$Impl_$.cross = function(a,b) {
	var self = new hxmath_math_Vector3Default(a.x,a.y,a.z);
	var newX = self.y * b.z - self.z * b.y;
	var newY = self.z * b.x - self.x * b.z;
	var newZ = self.x * b.y - self.y * b.x;
	self.x = newX;
	self.y = newY;
	self.z = newZ;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.multiply = function(a,s) {
	var self = new hxmath_math_Vector3Default(a.x,a.y,a.z);
	self.x *= s;
	self.y *= s;
	self.z *= s;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.divide = function(a,s) {
	var self = new hxmath_math_Vector3Default(a.x,a.y,a.z);
	self.x /= s;
	self.y /= s;
	self.z /= s;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.add = function(a,b) {
	var self = new hxmath_math_Vector3Default(a.x,a.y,a.z);
	self.x += b.x;
	self.y += b.y;
	self.z += b.z;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.subtract = function(a,b) {
	var self = new hxmath_math_Vector3Default(a.x,a.y,a.z);
	self.x -= b.x;
	self.y -= b.y;
	self.z -= b.z;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.negate = function(a) {
	return new hxmath_math_Vector3Default(-a.x,-a.y,-a.z);
};
hxmath_math__$Vector3_Vector3_$Impl_$.equals = function(a,b) {
	if(!(a == null && b == null)) {
		if(a != null && b != null && a.x == b.x && a.y == b.y) {
			return a.z == b.z;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxmath_math__$Vector3_Vector3_$Impl_$.lerp = function(a,b,t) {
	return new hxmath_math_Vector3Default((1.0 - t) * a.x + t * b.x,(1.0 - t) * a.y + t * b.y,(1.0 - t) * a.z + t * b.z);
};
hxmath_math__$Vector3_Vector3_$Impl_$.max = function(a,b) {
	var self = new hxmath_math_Vector3Default(a.x,a.y,a.z);
	self.x = Math.max(self.x,b.x);
	self.y = Math.max(self.y,b.y);
	self.z = Math.max(self.z,b.z);
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.min = function(a,b) {
	var self = new hxmath_math_Vector3Default(a.x,a.y,a.z);
	self.x = Math.min(self.x,b.x);
	self.y = Math.min(self.y,b.y);
	self.z = Math.min(self.z,b.z);
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.project = function(a,b) {
	var self = new hxmath_math_Vector3Default(a.x,a.y,a.z);
	var s = (self.x * b.x + self.y * b.y + self.z * b.z) / (b.x * b.x + b.y * b.y + b.z * b.z);
	var _g = 0;
	while(_g < 3) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = b.x;
			break;
		case 1:
			tmp = b.y;
			break;
		case 2:
			tmp = b.z;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			self.x = value;
			break;
		case 1:
			self.y = value;
			break;
		case 2:
			self.z = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	self.x *= s;
	self.y *= s;
	self.z *= s;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.reflect = function(v,normal) {
	var self = new hxmath_math_Vector3Default(v.x,v.y,v.z);
	var self1 = new hxmath_math_Vector3Default(self.x,self.y,self.z);
	var s = (self1.x * normal.x + self1.y * normal.y + self1.z * normal.z) / (normal.x * normal.x + normal.y * normal.y + normal.z * normal.z);
	var _g = 0;
	while(_g < 3) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = normal.x;
			break;
		case 1:
			tmp = normal.y;
			break;
		case 2:
			tmp = normal.z;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			self1.x = value;
			break;
		case 1:
			self1.y = value;
			break;
		case 2:
			self1.z = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	self1.x *= s;
	self1.y *= s;
	self1.z *= s;
	self1.x *= 2.0;
	self1.y *= 2.0;
	self1.z *= 2.0;
	self.x -= self1.x;
	self.y -= self1.y;
	self.z -= self1.z;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.orthoNormalize = function(u,v,w) {
	var length = Math.sqrt(u.x * u.x + u.y * u.y + u.z * u.z);
	if(length > 0.0) {
		u.x /= length;
		u.y /= length;
		u.z /= length;
	}
	var self = new hxmath_math_Vector3Default(v.x,v.y,v.z);
	var s = (self.x * u.x + self.y * u.y + self.z * u.z) / (u.x * u.x + u.y * u.y + u.z * u.z);
	var _g = 0;
	while(_g < 3) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = u.x;
			break;
		case 1:
			tmp = u.y;
			break;
		case 2:
			tmp = u.z;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			self.x = value;
			break;
		case 1:
			self.y = value;
			break;
		case 2:
			self.z = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	self.x *= s;
	self.y *= s;
	self.z *= s;
	v.x -= self.x;
	v.y -= self.y;
	v.z -= self.z;
	var length1 = Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
	if(length1 > 0.0) {
		v.x /= length1;
		v.y /= length1;
		v.z /= length1;
	}
	var self1 = new hxmath_math_Vector3Default(w.x,w.y,w.z);
	var s1 = (self1.x * u.x + self1.y * u.y + self1.z * u.z) / (u.x * u.x + u.y * u.y + u.z * u.z);
	var _g1 = 0;
	while(_g1 < 3) {
		var i1 = _g1++;
		var tmp1;
		switch(i1) {
		case 0:
			tmp1 = u.x;
			break;
		case 1:
			tmp1 = u.y;
			break;
		case 2:
			tmp1 = u.z;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value1 = tmp1;
		switch(i1) {
		case 0:
			self1.x = value1;
			break;
		case 1:
			self1.y = value1;
			break;
		case 2:
			self1.z = value1;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	self1.x *= s1;
	self1.y *= s1;
	self1.z *= s1;
	w.x -= self1.x;
	w.y -= self1.y;
	w.z -= self1.z;
	var self2 = new hxmath_math_Vector3Default(w.x,w.y,w.z);
	var s2 = (self2.x * v.x + self2.y * v.y + self2.z * v.z) / (v.x * v.x + v.y * v.y + v.z * v.z);
	var _g2 = 0;
	while(_g2 < 3) {
		var i2 = _g2++;
		var tmp2;
		switch(i2) {
		case 0:
			tmp2 = v.x;
			break;
		case 1:
			tmp2 = v.y;
			break;
		case 2:
			tmp2 = v.z;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value2 = tmp2;
		switch(i2) {
		case 0:
			self2.x = value2;
			break;
		case 1:
			self2.y = value2;
			break;
		case 2:
			self2.z = value2;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	self2.x *= s2;
	self2.y *= s2;
	self2.z *= s2;
	w.x -= self2.x;
	w.y -= self2.y;
	w.z -= self2.z;
	var length2 = Math.sqrt(w.x * w.x + w.y * w.y + w.z * w.z);
	if(length2 > 0.0) {
		w.x /= length2;
		w.y /= length2;
		w.z /= length2;
	}
};
hxmath_math__$Vector3_Vector3_$Impl_$.set = function(this1,x,y,z) {
	var self = this1;
	self.x = x;
	self.y = y;
	self.z = z;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.crossWith = function(this1,a) {
	var self = this1;
	var newX = self.y * a.z - self.z * a.y;
	var newY = self.z * a.x - self.x * a.z;
	var newZ = self.x * a.y - self.y * a.x;
	self.x = newX;
	self.y = newY;
	self.z = newZ;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.multiplyWith = function(this1,s) {
	var self = this1;
	self.x *= s;
	self.y *= s;
	self.z *= s;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.divideWith = function(this1,s) {
	var self = this1;
	self.x /= s;
	self.y /= s;
	self.z /= s;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.addWith = function(this1,a) {
	var self = this1;
	self.x += a.x;
	self.y += a.y;
	self.z += a.z;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.subtractWith = function(this1,a) {
	var self = this1;
	self.x -= a.x;
	self.y -= a.y;
	self.z -= a.z;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.maxWith = function(this1,a) {
	var self = this1;
	self.x = Math.max(self.x,a.x);
	self.y = Math.max(self.y,a.y);
	self.z = Math.max(self.z,a.z);
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.minWith = function(this1,a) {
	var self = this1;
	self.x = Math.min(self.x,a.x);
	self.y = Math.min(self.y,a.y);
	self.z = Math.min(self.z,a.z);
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.projectOnto = function(this1,a) {
	var self = this1;
	var s = (self.x * a.x + self.y * a.y + self.z * a.z) / (a.x * a.x + a.y * a.y + a.z * a.z);
	var _g = 0;
	while(_g < 3) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = a.x;
			break;
		case 1:
			tmp = a.y;
			break;
		case 2:
			tmp = a.z;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			self.x = value;
			break;
		case 1:
			self.y = value;
			break;
		case 2:
			self.z = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	self.x *= s;
	self.y *= s;
	self.z *= s;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.projectOntoPlane = function(this1,normal) {
	var self = this1;
	var self1 = new hxmath_math_Vector3Default(self.x,self.y,self.z);
	var s = (self1.x * normal.x + self1.y * normal.y + self1.z * normal.z) / (normal.x * normal.x + normal.y * normal.y + normal.z * normal.z);
	var _g = 0;
	while(_g < 3) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = normal.x;
			break;
		case 1:
			tmp = normal.y;
			break;
		case 2:
			tmp = normal.z;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			self1.x = value;
			break;
		case 1:
			self1.y = value;
			break;
		case 2:
			self1.z = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	self1.x *= s;
	self1.y *= s;
	self1.z *= s;
	self.x -= self1.x;
	self.y -= self1.y;
	self.z -= self1.z;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.reflectBy = function(this1,normal) {
	var self = this1;
	var self1 = new hxmath_math_Vector3Default(self.x,self.y,self.z);
	var s = (self1.x * normal.x + self1.y * normal.y + self1.z * normal.z) / (normal.x * normal.x + normal.y * normal.y + normal.z * normal.z);
	var _g = 0;
	while(_g < 3) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = normal.x;
			break;
		case 1:
			tmp = normal.y;
			break;
		case 2:
			tmp = normal.z;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			self1.x = value;
			break;
		case 1:
			self1.y = value;
			break;
		case 2:
			self1.z = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	self1.x *= s;
	self1.y *= s;
	self1.z *= s;
	self1.x *= 2.0;
	self1.y *= 2.0;
	self1.z *= 2.0;
	self.x -= self1.x;
	self.y -= self1.y;
	self.z -= self1.z;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.copyTo = function(this1,target) {
	var self = this1;
	var _g = 0;
	while(_g < 3) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.x;
			break;
		case 1:
			tmp = self.y;
			break;
		case 2:
			tmp = self.z;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			target.x = value;
			break;
		case 1:
			target.y = value;
			break;
		case 2:
			target.z = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
};
hxmath_math__$Vector3_Vector3_$Impl_$.copyToShape = function(this1,target) {
	var self = this1;
	target.x = self.x;
	target.y = self.y;
	target.z = self.z;
};
hxmath_math__$Vector3_Vector3_$Impl_$.copyFromShape = function(this1,source) {
	var self = this1;
	self.x = source.x;
	self.y = source.y;
	self.z = source.z;
};
hxmath_math__$Vector3_Vector3_$Impl_$.clone = function(this1) {
	var self = this1;
	return new hxmath_math_Vector3Default(self.x,self.y,self.z);
};
hxmath_math__$Vector3_Vector3_$Impl_$.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x;
	case 1:
		return self.y;
	case 2:
		return self.z;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Vector3_Vector3_$Impl_$.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x = value;
	case 1:
		return self.y = value;
	case 2:
		return self.z = value;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Vector3_Vector3_$Impl_$.applyNegate = function(this1) {
	var self = this1;
	self.x = -self.x;
	self.y = -self.y;
	self.z = -self.z;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.applyScalarFunc = function(this1,func) {
	var self = this1;
	var _g = 0;
	while(_g < 3) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.x;
			break;
		case 1:
			tmp = self.y;
			break;
		case 2:
			tmp = self.z;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = func(tmp);
		switch(i) {
		case 0:
			self.x = value;
			break;
		case 1:
			self.y = value;
			break;
		case 2:
			self.z = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.angleWith = function(this1,b) {
	var self = this1;
	return Math.acos((self.x * b.x + self.y * b.y + self.z * b.z) / (Math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z) * Math.sqrt(b.x * b.x + b.y * b.y + b.z * b.z)));
};
hxmath_math__$Vector3_Vector3_$Impl_$.distanceTo = function(this1,b) {
	var self = this1;
	var self1 = new hxmath_math_Vector3Default(self.x,self.y,self.z);
	self1.x -= b.x;
	self1.y -= b.y;
	self1.z -= b.z;
	var self2 = self1;
	return Math.sqrt(self2.x * self2.x + self2.y * self2.y + self2.z * self2.z);
};
hxmath_math__$Vector3_Vector3_$Impl_$.normalize = function(this1) {
	var self = this1;
	var length = Math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z);
	if(length > 0.0) {
		self.x /= length;
		self.y /= length;
		self.z /= length;
	}
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.normalizeTo = function(this1,newLength) {
	var self = this1;
	var length = Math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z);
	if(length > 0.0) {
		self.x /= length;
		self.y /= length;
		self.z /= length;
	}
	self.x *= newLength;
	self.y *= newLength;
	self.z *= newLength;
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.clamp = function(this1,min,max) {
	var self = this1;
	var length = Math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z);
	if(length < min) {
		var length1 = Math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z);
		if(length1 > 0.0) {
			self.x /= length1;
			self.y /= length1;
			self.z /= length1;
		}
		self.x *= min;
		self.y *= min;
		self.z *= min;
	} else if(length > max) {
		var length2 = Math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z);
		if(length2 > 0.0) {
			self.x /= length2;
			self.y /= length2;
			self.z /= length2;
		}
		self.x *= max;
		self.y *= max;
		self.z *= max;
	}
	return self;
};
hxmath_math__$Vector3_Vector3_$Impl_$.get_length = function(this1) {
	var self = this1;
	return Math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z);
};
hxmath_math__$Vector3_Vector3_$Impl_$.get_lengthSq = function(this1) {
	var self = this1;
	return self.x * self.x + self.y * self.y + self.z * self.z;
};
hxmath_math__$Vector3_Vector3_$Impl_$.get_zero = function() {
	return new hxmath_math_Vector3Default(0.0,0.0,0.0);
};
hxmath_math__$Vector3_Vector3_$Impl_$.get_xAxis = function() {
	return new hxmath_math_Vector3Default(1.0,0.0,0.0);
};
hxmath_math__$Vector3_Vector3_$Impl_$.get_yAxis = function() {
	return new hxmath_math_Vector3Default(0.0,1.0,0.0);
};
hxmath_math__$Vector3_Vector3_$Impl_$.get_zAxis = function() {
	return new hxmath_math_Vector3Default(0.0,0.0,1.0);
};
var hxmath_math_Vector4Default = function(x,y,z,w) {
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
hxmath_math_Vector4Default.__name__ = ["hxmath","math","Vector4Default"];
hxmath_math_Vector4Default.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,toString: function() {
		return "(" + this.x + ", " + this.y + ", " + this.z + ", " + this.w + ")";
	}
	,__class__: hxmath_math_Vector4Default
};
var hxmath_math__$Vector4_Vector4_$Impl_$ = {};
hxmath_math__$Vector4_Vector4_$Impl_$.__name__ = ["hxmath","math","_Vector4","Vector4_Impl_"];
hxmath_math__$Vector4_Vector4_$Impl_$._new = function(x,y,z,w) {
	return new hxmath_math_Vector4Default(x,y,z,w);
};
hxmath_math__$Vector4_Vector4_$Impl_$.fromArray = function(rawData) {
	if(rawData.length != 4) {
		throw new js__$Boot_HaxeError("Invalid rawData.");
	}
	return new hxmath_math_Vector4Default(rawData[0],rawData[1],rawData[2],rawData[3]);
};
hxmath_math__$Vector4_Vector4_$Impl_$.fromVector4Shape = function(other) {
	return new hxmath_math_Vector4Default(other.x,other.y,other.z,other.w);
};
hxmath_math__$Vector4_Vector4_$Impl_$.dot = function(a,b) {
	return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
};
hxmath_math__$Vector4_Vector4_$Impl_$.multiply = function(a,s) {
	var self = new hxmath_math_Vector4Default(a.x,a.y,a.z,a.w);
	self.x *= s;
	self.y *= s;
	self.z *= s;
	self.w *= s;
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.divide = function(a,s) {
	var self = new hxmath_math_Vector4Default(a.x,a.y,a.z,a.w);
	self.x /= s;
	self.y /= s;
	self.z /= s;
	self.w /= s;
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.add = function(a,b) {
	var self = new hxmath_math_Vector4Default(a.x,a.y,a.z,a.w);
	self.x += b.x;
	self.y += b.y;
	self.z += b.z;
	self.w += b.w;
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.subtract = function(a,b) {
	var self = new hxmath_math_Vector4Default(a.x,a.y,a.z,a.w);
	self.x -= b.x;
	self.y -= b.y;
	self.z -= b.z;
	self.w -= b.w;
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.negate = function(a) {
	return new hxmath_math_Vector4Default(-a.x,-a.y,-a.z,-a.w);
};
hxmath_math__$Vector4_Vector4_$Impl_$.equals = function(a,b) {
	if(!(a == null && b == null)) {
		if(a != null && b != null && a.x == b.x && a.y == b.y && a.z == b.z) {
			return a.w == b.w;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxmath_math__$Vector4_Vector4_$Impl_$.lerp = function(a,b,t) {
	return new hxmath_math_Vector4Default((1.0 - t) * a.x + t * b.x,(1.0 - t) * a.y + t * b.y,(1.0 - t) * a.z + t * b.z,(1.0 - t) * a.w + t * b.w);
};
hxmath_math__$Vector4_Vector4_$Impl_$.max = function(a,b) {
	var self = new hxmath_math_Vector4Default(a.x,a.y,a.z,a.w);
	self.x = Math.max(self.x,b.x);
	self.y = Math.max(self.y,b.y);
	self.z = Math.max(self.z,b.z);
	self.w = Math.max(self.w,b.w);
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.min = function(a,b) {
	var self = new hxmath_math_Vector4Default(a.x,a.y,a.z,a.w);
	self.x = Math.min(self.x,b.x);
	self.y = Math.min(self.y,b.y);
	self.z = Math.min(self.z,b.z);
	self.w = Math.min(self.w,b.w);
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.project = function(a,b) {
	var self = new hxmath_math_Vector4Default(a.x,a.y,a.z,a.w);
	var s = (self.x * b.x + self.y * b.y + self.z * b.z + self.w * b.w) / (b.x * b.x + b.y * b.y + b.z * b.z + b.w * b.w);
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = b.x;
			break;
		case 1:
			tmp = b.y;
			break;
		case 2:
			tmp = b.z;
			break;
		case 3:
			tmp = b.w;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			self.x = value;
			break;
		case 1:
			self.y = value;
			break;
		case 2:
			self.z = value;
			break;
		case 3:
			self.w = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	self.x *= s;
	self.y *= s;
	self.z *= s;
	self.w *= s;
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.set = function(this1,x,y,z,w) {
	var self = this1;
	self.x = x;
	self.y = y;
	self.z = z;
	self.w = w;
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.multiplyWith = function(this1,s) {
	var self = this1;
	self.x *= s;
	self.y *= s;
	self.z *= s;
	self.w *= s;
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.divideWith = function(this1,s) {
	var self = this1;
	self.x /= s;
	self.y /= s;
	self.z /= s;
	self.w /= s;
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.addWith = function(this1,a) {
	var self = this1;
	self.x += a.x;
	self.y += a.y;
	self.z += a.z;
	self.w += a.w;
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.subtractWith = function(this1,a) {
	var self = this1;
	self.x -= a.x;
	self.y -= a.y;
	self.z -= a.z;
	self.w -= a.w;
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.maxWith = function(this1,a) {
	var self = this1;
	self.x = Math.max(self.x,a.x);
	self.y = Math.max(self.y,a.y);
	self.z = Math.max(self.z,a.z);
	self.w = Math.max(self.w,a.w);
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.minWith = function(this1,a) {
	var self = this1;
	self.x = Math.min(self.x,a.x);
	self.y = Math.min(self.y,a.y);
	self.z = Math.min(self.z,a.z);
	self.w = Math.min(self.w,a.w);
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.projectOnto = function(this1,a) {
	var self = this1;
	var s = (self.x * a.x + self.y * a.y + self.z * a.z + self.w * a.w) / (a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w);
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = a.x;
			break;
		case 1:
			tmp = a.y;
			break;
		case 2:
			tmp = a.z;
			break;
		case 3:
			tmp = a.w;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			self.x = value;
			break;
		case 1:
			self.y = value;
			break;
		case 2:
			self.z = value;
			break;
		case 3:
			self.w = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	self.x *= s;
	self.y *= s;
	self.z *= s;
	self.w *= s;
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.copyTo = function(this1,target) {
	var self = this1;
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.x;
			break;
		case 1:
			tmp = self.y;
			break;
		case 2:
			tmp = self.z;
			break;
		case 3:
			tmp = self.w;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = tmp;
		switch(i) {
		case 0:
			target.x = value;
			break;
		case 1:
			target.y = value;
			break;
		case 2:
			target.z = value;
			break;
		case 3:
			target.w = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
};
hxmath_math__$Vector4_Vector4_$Impl_$.copyToShape = function(this1,target) {
	var self = this1;
	target.x = self.x;
	target.y = self.y;
	target.z = self.z;
	target.w = self.w;
};
hxmath_math__$Vector4_Vector4_$Impl_$.copyFromShape = function(this1,source) {
	var self = this1;
	self.x = source.x;
	self.y = source.y;
	self.z = source.z;
	self.w = source.w;
};
hxmath_math__$Vector4_Vector4_$Impl_$.clone = function(this1) {
	var self = this1;
	return new hxmath_math_Vector4Default(self.x,self.y,self.z,self.w);
};
hxmath_math__$Vector4_Vector4_$Impl_$.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x;
	case 1:
		return self.y;
	case 2:
		return self.z;
	case 3:
		return self.w;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Vector4_Vector4_$Impl_$.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x = value;
	case 1:
		return self.y = value;
	case 2:
		return self.z = value;
	case 3:
		return self.w = value;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Vector4_Vector4_$Impl_$.applyScalarFunc = function(this1,func) {
	var self = this1;
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		var tmp;
		switch(i) {
		case 0:
			tmp = self.x;
			break;
		case 1:
			tmp = self.y;
			break;
		case 2:
			tmp = self.z;
			break;
		case 3:
			tmp = self.w;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
		var value = func(tmp);
		switch(i) {
		case 0:
			self.x = value;
			break;
		case 1:
			self.y = value;
			break;
		case 2:
			self.z = value;
			break;
		case 3:
			self.w = value;
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid element");
		}
	}
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.distanceTo = function(this1,b) {
	var self = this1;
	var self1 = new hxmath_math_Vector4Default(self.x,self.y,self.z,self.w);
	self1.x -= b.x;
	self1.y -= b.y;
	self1.z -= b.z;
	self1.w -= b.w;
	var self2 = self1;
	return Math.sqrt(self2.x * self2.x + self2.y * self2.y + self2.z * self2.z + self2.w * self2.w);
};
hxmath_math__$Vector4_Vector4_$Impl_$.normalize = function(this1) {
	var self = this1;
	var length = Math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z + self.w * self.w);
	if(length > 0.0) {
		self.x /= length;
		self.y /= length;
		self.z /= length;
		self.w /= length;
	}
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.normalizeTo = function(this1,newLength) {
	var self = this1;
	var length = Math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z + self.w * self.w);
	if(length > 0.0) {
		self.x /= length;
		self.y /= length;
		self.z /= length;
		self.w /= length;
	}
	self.x *= newLength;
	self.y *= newLength;
	self.z *= newLength;
	self.w *= newLength;
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.clamp = function(this1,min,max) {
	var self = this1;
	var length = Math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z + self.w * self.w);
	if(length < min) {
		var length1 = Math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z + self.w * self.w);
		if(length1 > 0.0) {
			self.x /= length1;
			self.y /= length1;
			self.z /= length1;
			self.w /= length1;
		}
		self.x *= min;
		self.y *= min;
		self.z *= min;
		self.w *= min;
	} else if(length > max) {
		var length2 = Math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z + self.w * self.w);
		if(length2 > 0.0) {
			self.x /= length2;
			self.y /= length2;
			self.z /= length2;
			self.w /= length2;
		}
		self.x *= max;
		self.y *= max;
		self.z *= max;
		self.w *= max;
	}
	return self;
};
hxmath_math__$Vector4_Vector4_$Impl_$.get_length = function(this1) {
	var self = this1;
	return Math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z + self.w * self.w);
};
hxmath_math__$Vector4_Vector4_$Impl_$.get_lengthSq = function(this1) {
	var self = this1;
	return self.x * self.x + self.y * self.y + self.z * self.z + self.w * self.w;
};
hxmath_math__$Vector4_Vector4_$Impl_$.get_zero = function() {
	return new hxmath_math_Vector4Default(0.0,0.0,0.0,0.0);
};
hxmath_math__$Vector4_Vector4_$Impl_$.get_xAxis = function() {
	return new hxmath_math_Vector4Default(1.0,0.0,0.0,0.0);
};
hxmath_math__$Vector4_Vector4_$Impl_$.get_yAxis = function() {
	return new hxmath_math_Vector4Default(0.0,1.0,0.0,0.0);
};
hxmath_math__$Vector4_Vector4_$Impl_$.get_zAxis = function() {
	return new hxmath_math_Vector4Default(0.0,0.0,1.0,0.0);
};
hxmath_math__$Vector4_Vector4_$Impl_$.get_wAxis = function() {
	return new hxmath_math_Vector4Default(0.0,0.0,0.0,1.0);
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = ["js","Boot"];
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var nanotest_NanoTestAssertResult = function(_result,position) {
	this.result = _result;
	this.position = position;
};
nanotest_NanoTestAssertResult.__name__ = ["nanotest","NanoTestAssertResult"];
nanotest_NanoTestAssertResult.prototype = {
	result: null
	,position: null
	,label: function(d) {
		var _g = this.result.status[this.position];
		switch(_g[1]) {
		case 0:
			break;
		case 1:
			this.result.status[this.position] = nanotest_NanoTestStatus.FAIL("" + _g[2] + " [" + Std.string(d) + "]",_g[3]);
			break;
		case 2:
			this.result.status[this.position] = nanotest_NanoTestStatus.ERROR("" + _g[2] + " [" + Std.string(d) + "]",_g[3]);
			break;
		}
		return this;
	}
	,__class__: nanotest_NanoTestAssertResult
};
var nanotest_NanoTestCase = function(posInfos) {
	this.posInfos = posInfos;
};
nanotest_NanoTestCase.__name__ = ["nanotest","NanoTestCase"];
nanotest_NanoTestCase.ASSERT_THROWS_ILLEGAL_EXCEPTION = function(actual) {
	return "catched illeagal exception " + nanotest_NanoTestCase.format(actual);
};
nanotest_NanoTestCase.ASSERT_EQUALS_ERROR = function(expected,actual) {
	return "expected " + nanotest_NanoTestCase.format(expected) + " but was " + nanotest_NanoTestCase.format(actual);
};
nanotest_NanoTestCase.ASSERT_NOT_EQUALS_ERROR = function(expected,actual) {
	return "expected not " + nanotest_NanoTestCase.format(expected) + " but was " + nanotest_NanoTestCase.format(actual);
};
nanotest_NanoTestCase.format = function(d) {
	if(typeof(d) == "string") {
		return "\"" + Std.string(d) + "\"";
	} else {
		return "" + Std.string(d);
	}
};
nanotest_NanoTestCase.prototype = {
	currentResult: null
	,posInfos: null
	,globalTearDown: function() {
	}
	,globalSetup: function() {
	}
	,tearDown: function() {
	}
	,setup: function() {
	}
	,run: function(print) {
		var _gthis = this;
		var results = [];
		var cl = js_Boot.getClass(this);
		var fields = Type.getInstanceFields(cl);
		var closeResult = function() {
			if(_gthis.currentResult.error) {
				print("E");
			} else if(_gthis.currentResult.failed) {
				print("F");
			} else {
				print(".");
			}
			results.push(_gthis.currentResult);
			_gthis.currentResult = null;
		};
		print("Class: " + Type.getClassName(cl) + " ");
		this.globalSetup();
		if(this.currentResult != null) {
			closeResult();
		}
		var _g = 0;
		while(_g < fields.length) {
			var fname = fields[_g];
			++_g;
			var field = Reflect.field(this,fname);
			if(StringTools.startsWith(fname,"test") && Reflect.isFunction(field)) {
				this.currentResult = { className : Type.getClassName(cl), method : fname, async : false, testCase : this, error : false, failed : false, status : []};
				this.setup();
				try {
					field.apply(this,[]);
				} catch( e ) {
					haxe_CallStack.lastException = e;
					if (e instanceof js__$Boot_HaxeError) e = e.val;
					this.error(e);
				}
				this.tearDown();
				closeResult();
			}
		}
		this.globalTearDown();
		print("\n");
		return results;
	}
	,assertTrue: function(b,p) {
		if(b == false) {
			return this.fail("expected true but was false",p);
		} else {
			return this.success(p);
		}
	}
	,assertFalse: function(b,p) {
		if(b == true) {
			return this.fail("expected false but was true",p);
		} else {
			return this.success(p);
		}
	}
	,assertEquals: function(expected,actual,p) {
		if(Reflect.isEnumValue(expected)) {
			if(!Type.enumEq(actual,expected)) {
				return this.fail("expected " + nanotest_NanoTestCase.format(expected) + " but was " + nanotest_NanoTestCase.format(actual),p);
			} else {
				return this.success(p);
			}
		} else if(actual != expected) {
			return this.fail("expected " + nanotest_NanoTestCase.format(expected) + " but was " + nanotest_NanoTestCase.format(actual),p);
		} else {
			return this.success(p);
		}
	}
	,assertNotEquals: function(notExpected,actual,p) {
		if(Reflect.isEnumValue(notExpected)) {
			if(Type.enumEq(actual,notExpected)) {
				return this.fail("expected not " + nanotest_NanoTestCase.format(notExpected) + " but was " + nanotest_NanoTestCase.format(actual),p);
			} else {
				return this.success(p);
			}
		} else if(actual == notExpected) {
			return this.fail("expected not " + nanotest_NanoTestCase.format(notExpected) + " but was " + nanotest_NanoTestCase.format(actual),p);
		} else {
			return this.success(p);
		}
	}
	,assertThrows: function(func,isSuccess,p) {
		try {
			func();
		} catch( d ) {
			haxe_CallStack.lastException = d;
			if (d instanceof js__$Boot_HaxeError) d = d.val;
			if(isSuccess == null || isSuccess(d)) {
				return this.success(p);
			} else {
				var f = this.fail("catched illeagal exception " + nanotest_NanoTestCase.format(d),p);
				this.error(d);
				return f;
			}
		}
		return this.fail("expected to throw exception but didn't",p);
	}
	,fail: function(message,p) {
		if(this.currentResult == null) {
			this._openPreprocessResult();
		}
		this.currentResult.failed = true;
		var i = this.currentResult.status.length;
		this.currentResult.status.push(nanotest_NanoTestStatus.FAIL(message,p));
		return new nanotest_NanoTestAssertResult(this.currentResult,i);
	}
	,success: function(p) {
		if(this.currentResult == null) {
			this._openPreprocessResult();
		}
		var i = this.currentResult.status.length;
		this.currentResult.status.push(nanotest_NanoTestStatus.SUCCESS(p));
		return new nanotest_NanoTestAssertResult(this.currentResult,i);
	}
	,error: function(e) {
		if(this.currentResult == null) {
			this._openPreprocessResult();
		}
		this.currentResult.failed = true;
		this.currentResult.error = true;
		var message = e.message != null?Std.string(e) + " [" + Std.string(e.message) + "]":Std.string(e);
		var i = this.currentResult.status.length;
		this.currentResult.status.push(nanotest_NanoTestStatus.ERROR(message,haxe_CallStack.exceptionStack()));
		return new nanotest_NanoTestAssertResult(this.currentResult,i);
	}
	,_openPreprocessResult: function() {
		this.currentResult = { className : Type.getClassName(js_Boot.getClass(this)), method : null, async : true, testCase : this, error : false, failed : false, status : []};
	}
	,__class__: nanotest_NanoTestCase
};
var nanotest_NanoTestRunner = function(printError) {
	this.cases = [];
	if(printError == null) {
		this.printError = nanotest_NanoTestRunner.warning;
	} else {
		this.printError = printError;
	}
};
nanotest_NanoTestRunner.__name__ = ["nanotest","NanoTestRunner"];
nanotest_NanoTestRunner.error = function(message,position) {
};
nanotest_NanoTestRunner.warning = function(message,position) {
	haxe_unit_TestRunner.print(nanotest_NanoTestRunner.fileFromPosInfos(position) + ":" + position.lineNumber + ": " + message + "\n");
};
nanotest_NanoTestRunner.fileFromPosInfos = function(posInfos) {
	if(posInfos.className == null) {
		return posInfos.fileName;
	}
	if(posInfos.fileName == null) {
		return null;
	}
	var fsegs = new EReg("\\\\|/","").split(posInfos.fileName);
	if(fsegs.length > 1) {
		return posInfos.fileName;
	}
	var f = fsegs.pop();
	if(HxOverrides.substr(f,f.length - 3,null) != ".hx") {
		return posInfos.fileName;
	}
	var segs = posInfos.className.split(".");
	segs.pop();
	segs.push(f);
	return segs.join("/");
};
nanotest_NanoTestRunner.posInfosToPosition = function(posInfos) {
	return { file : posInfos.fileName, min : 0, max : 0};
};
nanotest_NanoTestRunner.prototype = {
	cases: null
	,printError: null
	,print: function(d) {
		haxe_unit_TestRunner.print(d);
	}
	,add: function(testCase) {
		this.cases.push(testCase);
	}
	,run: function() {
		var results = [];
		var _g = 0;
		var _g1 = this.cases;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var rs = c.run($bind(this,this.print));
			var _g2 = 0;
			while(_g2 < rs.length) {
				var r = rs[_g2];
				++_g2;
				results.push(r);
			}
		}
		var failures = 0;
		var _g3 = 0;
		while(_g3 < results.length) {
			var result = results[_g3];
			++_g3;
			if(result.failed) {
				this.print("* " + result.className + "::" + result.method + "()\n");
				var _g11 = 0;
				var _g21 = result.status;
				while(_g11 < _g21.length) {
					var status = _g21[_g11];
					++_g11;
					switch(status[1]) {
					case 0:
						break;
					case 1:
						this.printError("Test failed : " + status[2],status[3]);
						break;
					case 2:
						var callStack = status[3];
						var message = status[2];
						var first = true;
						var _g31 = 0;
						while(_g31 < callStack.length) {
							var item = callStack[_g31];
							++_g31;
							switch(item[1]) {
							case 0:
								this.print("Called from" + " : a C function\n");
								break;
							case 1:
								this.print("Called from" + " : module " + item[2] + "\n");
								break;
							case 2:
								var posInfos = { fileName : item[3], lineNumber : item[4], className : result.className, methodName : result.method};
								if(first) {
									this.printError("exception thrown : " + message,posInfos);
									first = false;
								} else {
									this.printError("Called from",posInfos);
								}
								break;
							case 3:
								this.print("Called from" + " : " + item[2] + "." + item[3] + "\n");
								break;
							case 4:
								this.print("Called from" + " : local function #" + item[2] + "\n");
								break;
							}
						}
						if(first) {
							this.printError("exception thrown : " + message,result.testCase.posInfos);
						}
						break;
					}
				}
				this.print("\n");
				++failures;
			}
		}
		if(failures == 0) {
			this.print("OK ");
		} else {
			this.print("FAILED ");
		}
		this.print(results.length + " tests, " + failures + " failed, " + (results.length - failures) + " success\n");
		return failures == 0;
	}
	,__class__: nanotest_NanoTestRunner
};
var nanotest_NanoTestStatus = { __ename__ : true, __constructs__ : ["SUCCESS","FAIL","ERROR"] };
nanotest_NanoTestStatus.SUCCESS = function(posInfos) { var $x = ["SUCCESS",0,posInfos]; $x.__enum__ = nanotest_NanoTestStatus; return $x; };
nanotest_NanoTestStatus.FAIL = function(message,posInfos) { var $x = ["FAIL",1,message,posInfos]; $x.__enum__ = nanotest_NanoTestStatus; return $x; };
nanotest_NanoTestStatus.ERROR = function(message,callStack) { var $x = ["ERROR",2,message,callStack]; $x.__enum__ = nanotest_NanoTestStatus; return $x; };
var test_Distribution = function() {
	this.precision = 1e-4;
	this.width = 1.0;
	this.center = 0.0;
};
test_Distribution.__name__ = ["test","Distribution"];
test_Distribution.prototype = {
	center: null
	,width: null
	,precision: null
	,__class__: test_Distribution
};
var test_MathTestCase = function(posInfos) {
	nanotest_NanoTestCase.call(this,posInfos);
};
test_MathTestCase.__name__ = ["test","MathTestCase"];
test_MathTestCase.__super__ = nanotest_NanoTestCase;
test_MathTestCase.prototype = $extend(nanotest_NanoTestCase.prototype,{
	randomFloat: function(center,width,precision) {
		if(precision == null) {
			precision = 1e-4;
		}
		if(width == null) {
			width = 1.0;
		}
		if(center == null) {
			center = 0.0;
		}
		return Math.floor(((Math.random() - 0.5) * width + center) / precision) * precision;
	}
	,randomInt: function() {
		return Math.floor(Math.random() * 10);
	}
	,randomArray: function(size,distribution) {
		var data = [];
		var distribution1 = distribution == null?new test_Distribution():distribution;
		var _g1 = 0;
		while(_g1 < size) {
			++_g1;
			data.push(this.randomFloat(distribution1.center,distribution1.width,distribution1.precision));
		}
		return data;
	}
	,assertApproxEquals: function(expected,actual,tolerance,p) {
		if(tolerance == null) {
			tolerance = 1e-6;
		}
		if(Math.abs(expected - actual) < tolerance) {
			this.success(p);
		} else {
			this.fail("expected " + expected + " +-" + tolerance + " but was " + actual,p);
		}
	}
	,randomVector2: function(precision) {
		if(precision == null) {
			precision = 1e-4;
		}
		var distribution = new test_Distribution();
		distribution.precision = precision;
		var rawData = this.randomArray(2,distribution);
		if(rawData.length != 2) {
			throw new js__$Boot_HaxeError("Invalid rawData.");
		}
		return new hxmath_math_Vector2Default(rawData[0],rawData[1]);
	}
	,randomVector3: function(precision) {
		if(precision == null) {
			precision = 1e-4;
		}
		var distribution = new test_Distribution();
		distribution.precision = precision;
		var rawData = this.randomArray(3,distribution);
		if(rawData.length != 3) {
			throw new js__$Boot_HaxeError("Invalid rawData.");
		}
		return new hxmath_math_Vector3Default(rawData[0],rawData[1],rawData[2]);
	}
	,randomVector4: function(precision) {
		if(precision == null) {
			precision = 1e-4;
		}
		var distribution = new test_Distribution();
		distribution.precision = precision;
		var rawData = this.randomArray(4,distribution);
		if(rawData.length != 4) {
			throw new js__$Boot_HaxeError("Invalid rawData.");
		}
		return new hxmath_math_Vector4Default(rawData[0],rawData[1],rawData[2],rawData[3]);
	}
	,randomMatrix2x2: function(precision) {
		if(precision == null) {
			precision = 1e-4;
		}
		var distribution = new test_Distribution();
		distribution.precision = precision;
		var rawData = this.randomArray(4,distribution);
		if(rawData.length != 4) {
			throw new js__$Boot_HaxeError("Invalid rawData.");
		}
		return new hxmath_math_Matrix2x2Default(rawData[0],rawData[1],rawData[2],rawData[3]);
	}
	,randomMatrix3x2: function(precision) {
		if(precision == null) {
			precision = 1e-4;
		}
		var distribution = new test_Distribution();
		distribution.precision = precision;
		var rawData = this.randomArray(6,distribution);
		if(rawData.length != 6) {
			throw new js__$Boot_HaxeError("Invalid rawData.");
		}
		return new hxmath_math_Matrix3x2Default(rawData[0],rawData[1],rawData[2],rawData[3],rawData[4],rawData[5]);
	}
	,randomMatrix3x3: function(precision) {
		if(precision == null) {
			precision = 1e-4;
		}
		var distribution = new test_Distribution();
		distribution.precision = precision;
		var rawData = this.randomArray(9,distribution);
		if(rawData.length != 9) {
			throw new js__$Boot_HaxeError("Invalid rawData.");
		}
		return new hxmath_math_Matrix3x3Default(rawData[0],rawData[1],rawData[2],rawData[3],rawData[4],rawData[5],rawData[6],rawData[7],rawData[8]);
	}
	,randomMatrix4x4: function(precision) {
		if(precision == null) {
			precision = 1e-4;
		}
		var distribution = new test_Distribution();
		distribution.precision = precision;
		var rawData = this.randomArray(16,distribution);
		if(rawData.length != 16) {
			throw new js__$Boot_HaxeError("Invalid rawData.");
		}
		return new hxmath_math_Matrix4x4Default(rawData[0],rawData[1],rawData[2],rawData[3],rawData[4],rawData[5],rawData[6],rawData[7],rawData[8],rawData[9],rawData[10],rawData[11],rawData[12],rawData[13],rawData[14],rawData[15]);
	}
	,randomQuaternion: function(precision) {
		if(precision == null) {
			precision = 1e-4;
		}
		var distribution = new test_Distribution();
		distribution.precision = precision;
		var rawData = this.randomArray(4,distribution);
		if(rawData.length != 4) {
			throw new js__$Boot_HaxeError("Invalid rawData.");
		}
		return new hxmath_math_QuaternionDefault(rawData[0],rawData[1],rawData[2],rawData[3]);
	}
	,randomIntVector2: function() {
		return hxmath_math__$IntVector2_IntVector2_$Impl_$._new(this.randomInt(),this.randomInt());
	}
	,randomShortVector2: function() {
		return hxmath_math__$ShortVector2_ShortVector2_$Impl_$._new(this.randomInt(),this.randomInt());
	}
	,randomFrame2: function(precision) {
		if(precision == null) {
			precision = 1e-4;
		}
		return hxmath_frames__$Frame2_Frame2_$Impl_$._new(this.randomVector2(precision),this.randomFloat(0.0,1.0,precision) * Math.PI);
	}
	,randomFrame3: function(precision) {
		if(precision == null) {
			precision = 1e-4;
		}
		var tmp = this.randomVector3(precision);
		var self = this.randomQuaternion(precision);
		var _g = 1.0 / Math.sqrt(self.s * self.s + self.x * self.x + self.y * self.y + self.z * self.z);
		var self1 = new hxmath_math_QuaternionDefault(self.s,self.x,self.y,self.z);
		self1.s *= _g;
		self1.x *= _g;
		self1.y *= _g;
		self1.z *= _g;
		return hxmath_frames__$Frame3_Frame3_$Impl_$._new(tmp,self1);
	}
	,__class__: test_MathTestCase
});
var test_TS2 = function() { };
test_TS2.__name__ = ["test","TS2"];
test_TS2.main = function() {
	var runner = new nanotest_NanoTestRunner();
	runner.add(new test_Test2D({ fileName : "TS2.hx", lineNumber : 22, className : "test.TS2", methodName : "main"}));
	return runner.run();
};
var test_Test2D = function(posInfos) {
	test_MathTestCase.call(this,posInfos);
};
test_Test2D.__name__ = ["test","Test2D"];
test_Test2D.__super__ = test_MathTestCase;
test_Test2D.prototype = $extend(test_MathTestCase.prototype,{
	testVector2BasicOps: function() {
		var a = new hxmath_math_Vector2Default(1.0,0.0);
		var b = new hxmath_math_Vector2Default(0.0,1.0);
		this.assertTrue(a.x * b.x + a.y * b.y == 0.0,{ fileName : "Test2D.hx", lineNumber : 14, className : "test.Test2D", methodName : "testVector2BasicOps"});
		var _g1 = new hxmath_math_Vector2Default(1.0,0.0);
		var self = new hxmath_math_Vector2Default(_g1.x,_g1.y);
		self.x *= 0.0;
		self.y *= 0.0;
		var b1 = new hxmath_math_Vector2Default(0.0,0.0);
		this.assertTrue(self == null && b1 == null || self != null && b1 != null && self.x == b1.x && self.y == b1.y,{ fileName : "Test2D.hx", lineNumber : 15, className : "test.Test2D", methodName : "testVector2BasicOps"});
		var a1 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(1,0);
		var b2 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(0,1);
		this.assertTrue(a1.x * b2.x + a1.y * b2.y == 0,{ fileName : "Test2D.hx", lineNumber : 17, className : "test.Test2D", methodName : "testVector2BasicOps"});
		var _g3 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(1,0);
		var self1 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(_g3.x,_g3.y);
		self1.x *= 0;
		self1.y *= 0;
		var b3 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(0,0);
		this.assertTrue(self1 == null && b3 == null || self1 != null && b3 != null && self1.x == b3.x && self1.y == b3.y,{ fileName : "Test2D.hx", lineNumber : 18, className : "test.Test2D", methodName : "testVector2BasicOps"});
	}
	,testDeterminant: function() {
		var self = new hxmath_math_Matrix2x2Default(1.0,0.0,0.0,1.0);
		this.assertTrue(self.a * self.d - self.b * self.c == 1.0,{ fileName : "Test2D.hx", lineNumber : 23, className : "test.Test2D", methodName : "testDeterminant"});
	}
	,testHomogenousTranslation: function() {
		var m = new hxmath_math_Matrix3x2Default(1.0,0.0,0.0,1.0,0.0,0.0);
		var t = new hxmath_math_Vector2Default(3,-1);
		m.tx = t.x;
		m.ty = t.y;
		var v = new hxmath_math_Vector2Default(0.0,0.0);
		var m1 = new hxmath_math_Matrix2x2Default(m.a,m.b,m.c,m.d);
		var a = new hxmath_math_Vector2Default(m1.a * v.x + m1.b * v.y,m1.c * v.x + m1.d * v.y);
		var b = new hxmath_math_Vector2Default(m.tx,m.ty);
		var self = new hxmath_math_Vector2Default(a.x,a.y);
		self.x += b.x;
		self.y += b.y;
		var b1 = new hxmath_math_Vector2Default(m.tx,m.ty);
		this.assertTrue(self == null && b1 == null || self != null && b1 != null && self.x == b1.x && self.y == b1.y,{ fileName : "Test2D.hx", lineNumber : 30, className : "test.Test2D", methodName : "testHomogenousTranslation"});
	}
	,testTranspose: function() {
		var m = new hxmath_math_Matrix2x2Default(Math.random(),Math.random(),Math.random(),Math.random());
		var self = new hxmath_math_Matrix2x2Default(m.a,m.c,m.b,m.d);
		var n = new hxmath_math_Matrix2x2Default(self.a,self.c,self.b,self.d);
		var self1 = new hxmath_math_Matrix2x2Default(m.a,m.b,m.c,m.d);
		self1.a -= n.a;
		self1.b -= n.b;
		self1.c -= n.c;
		self1.d -= n.d;
		this.assertTrue(self1.a * self1.a + self1.b * self1.b + self1.c * self1.c + self1.d * self1.d < 1e-6,{ fileName : "Test2D.hx", lineNumber : 44, className : "test.Test2D", methodName : "testTranspose"});
	}
	,testRotation: function() {
		var angle = Math.PI / 2.0;
		var self = new hxmath_math_Matrix2x2Default(0.0,0.0,0.0,0.0);
		var s = Math.sin(angle);
		var c = Math.cos(angle);
		self.a = c;
		self.b = -s;
		self.c = s;
		self.d = c;
		var v = new hxmath_math_Vector2Default(1.0,0.0);
		var a = new hxmath_math_Vector2Default(self.a * v.x + self.b * v.y,self.c * v.x + self.d * v.y);
		var b = new hxmath_math_Vector2Default(0.0,1.0);
		var self1 = new hxmath_math_Vector2Default(a.x,a.y);
		self1.x -= b.x;
		self1.y -= b.y;
		var self2 = self1;
		this.assertApproxEquals(0.0,Math.sqrt(self2.x * self2.x + self2.y * self2.y),null,{ fileName : "Test2D.hx", lineNumber : 52, className : "test.Test2D", methodName : "testRotation"});
		var angle1 = Math.PI / 2.0;
		var self3 = new hxmath_math_Matrix2x2Default(0.0,0.0,0.0,0.0);
		var s1 = Math.sin(angle1);
		var c1 = Math.cos(angle1);
		self3.a = c1;
		self3.b = -s1;
		self3.c = s1;
		self3.d = c1;
		var v1 = new hxmath_math_Vector2Default(0.0,1.0);
		var a1 = new hxmath_math_Vector2Default(self3.a * v1.x + self3.b * v1.y,self3.c * v1.x + self3.d * v1.y);
		var b1 = new hxmath_math_Vector2Default(1.0,0.0);
		var self4 = new hxmath_math_Vector2Default(a1.x,a1.y);
		self4.x += b1.x;
		self4.y += b1.y;
		var self5 = self4;
		this.assertApproxEquals(0.0,Math.sqrt(self5.x * self5.x + self5.y * self5.y),null,{ fileName : "Test2D.hx", lineNumber : 53, className : "test.Test2D", methodName : "testRotation"});
	}
	,testVectorRotate: function() {
		var this1 = new hxmath_math_Vector2Default(1.0,0.0);
		var angle = Math.PI / 2.0;
		var pivot = new hxmath_math_Vector2Default(0.0,0.0);
		var self = this1;
		Math.cos(angle);
		Math.sin(angle);
		var dx = self.x - pivot.x;
		var dy = self.y - pivot.y;
		self.x = dx * Math.cos(angle) - dy * Math.sin(angle);
		self.y = dx * Math.sin(angle) + dy * Math.cos(angle);
		var b = new hxmath_math_Vector2Default(0.0,1.0);
		var self1 = new hxmath_math_Vector2Default(self.x,self.y);
		self1.x -= b.x;
		self1.y -= b.y;
		var self2 = self1;
		this.assertApproxEquals(0.0,Math.sqrt(self2.x * self2.x + self2.y * self2.y),null,{ fileName : "Test2D.hx", lineNumber : 61, className : "test.Test2D", methodName : "testVectorRotate"});
		var this2 = new hxmath_math_Vector2Default(0.0,1.0);
		var angle1 = Math.PI / 2.0;
		var pivot1 = new hxmath_math_Vector2Default(0.0,0.0);
		var self3 = this2;
		Math.cos(angle1);
		Math.sin(angle1);
		var dx1 = self3.x - pivot1.x;
		var dy1 = self3.y - pivot1.y;
		self3.x = dx1 * Math.cos(angle1) - dy1 * Math.sin(angle1);
		self3.y = dx1 * Math.sin(angle1) + dy1 * Math.cos(angle1);
		var b1 = new hxmath_math_Vector2Default(1.0,0.0);
		var self4 = new hxmath_math_Vector2Default(self3.x,self3.y);
		self4.x += b1.x;
		self4.y += b1.y;
		var self5 = self4;
		this.assertApproxEquals(0.0,Math.sqrt(self5.x * self5.x + self5.y * self5.y),null,{ fileName : "Test2D.hx", lineNumber : 62, className : "test.Test2D", methodName : "testVectorRotate"});
	}
	,testPolarConversion: function() {
		var angle = Math.PI;
		var a = new hxmath_math_Vector2Default(Math.cos(angle),Math.sin(angle));
		var b = new hxmath_math_Vector2Default(1.0,0.0);
		var self = new hxmath_math_Vector2Default(a.x,a.y);
		self.x += b.x;
		self.y += b.y;
		var self1 = self;
		this.assertApproxEquals(0.0,Math.sqrt(self1.x * self1.x + self1.y * self1.y),null,{ fileName : "Test2D.hx", lineNumber : 67, className : "test.Test2D", methodName : "testPolarConversion"});
		var tmp = Math.PI;
		var a1 = new hxmath_math_Vector2Default(1.0,0.0);
		var self2 = new hxmath_math_Vector2Default(-a1.x,-a1.y);
		this.assertApproxEquals(tmp,Math.abs(Math.atan2(self2.y,self2.x)),null,{ fileName : "Test2D.hx", lineNumber : 70, className : "test.Test2D", methodName : "testPolarConversion"});
	}
	,testNorms: function() {
		var self = new hxmath_math_Vector2Default(0.0,1.0);
		var self1 = new hxmath_math_Vector2Default(self.x,self.y);
		var length = Math.sqrt(self1.x * self1.x + self1.y * self1.y);
		if(length > 0.0) {
			self1.x /= length;
			self1.y /= length;
		}
		var self2 = self1;
		var self3 = new hxmath_math_Vector2Default(self2.x,self2.y);
		var newX = -self3.y;
		self3.y = self3.x;
		self3.x = newX;
		var b = new hxmath_math_Vector2Default(-1,0);
		this.assertTrue(self3.x * b.x + self3.y * b.y > 0.0,{ fileName : "Test2D.hx", lineNumber : 75, className : "test.Test2D", methodName : "testNorms"});
		var self4 = new hxmath_math_Vector2Default(0.0,1.0);
		var self5 = new hxmath_math_Vector2Default(self4.x,self4.y);
		var length1 = Math.sqrt(self5.x * self5.x + self5.y * self5.y);
		if(length1 > 0.0) {
			self5.x /= length1;
			self5.y /= length1;
		}
		var self6 = self5;
		var self7 = new hxmath_math_Vector2Default(self6.x,self6.y);
		var newX1 = self7.y;
		self7.y = -self7.x;
		self7.x = newX1;
		var b1 = new hxmath_math_Vector2Default(-1,0);
		this.assertTrue(self7.x * b1.x + self7.y * b1.y < 0.0,{ fileName : "Test2D.hx", lineNumber : 76, className : "test.Test2D", methodName : "testNorms"});
	}
	,testAngles: function() {
		var this1 = new hxmath_math_Vector2Default(0.0,1.0);
		var b = new hxmath_math_Vector2Default(-1,1);
		var self = this1;
		var x = self.x * b.y - b.x * self.y;
		this.assertApproxEquals((Math.abs(x) < 0?0:x <= 0?-1:1) * Math.acos((self.x * b.x + self.y * b.y) / (Math.sqrt(self.x * self.x + self.y * self.y) * Math.sqrt(b.x * b.x + b.y * b.y))),Math.PI / 4.0,null,{ fileName : "Test2D.hx", lineNumber : 81, className : "test.Test2D", methodName : "testAngles"});
		var this2 = new hxmath_math_Vector2Default(0.0,1.0);
		var b1 = new hxmath_math_Vector2Default(1,1);
		var self1 = this2;
		var x1 = self1.x * b1.y - b1.x * self1.y;
		this.assertApproxEquals((Math.abs(x1) < 0?0:x1 <= 0?-1:1) * Math.acos((self1.x * b1.x + self1.y * b1.y) / (Math.sqrt(self1.x * self1.x + self1.y * self1.y) * Math.sqrt(b1.x * b1.x + b1.y * b1.y))),-Math.PI / 4.0,null,{ fileName : "Test2D.hx", lineNumber : 82, className : "test.Test2D", methodName : "testAngles"});
		var this3 = new hxmath_math_Vector2Default(0.0,1.0);
		var b2 = new hxmath_math_Vector2Default(-1,-1);
		var self2 = this3;
		var x2 = self2.x * b2.y - b2.x * self2.y;
		this.assertApproxEquals((Math.abs(x2) < 0?0:x2 <= 0?-1:1) * Math.acos((self2.x * b2.x + self2.y * b2.y) / (Math.sqrt(self2.x * self2.x + self2.y * self2.y) * Math.sqrt(b2.x * b2.x + b2.y * b2.y))),3.0 * Math.PI / 4.0,null,{ fileName : "Test2D.hx", lineNumber : 83, className : "test.Test2D", methodName : "testAngles"});
		var this4 = new hxmath_math_Vector2Default(0.0,1.0);
		var b3 = new hxmath_math_Vector2Default(1,-1);
		var self3 = this4;
		var x3 = self3.x * b3.y - b3.x * self3.y;
		this.assertApproxEquals((Math.abs(x3) < 0?0:x3 <= 0?-1:1) * Math.acos((self3.x * b3.x + self3.y * b3.y) / (Math.sqrt(self3.x * self3.x + self3.y * self3.y) * Math.sqrt(b3.x * b3.x + b3.y * b3.y))),-3. * Math.PI / 4.0,null,{ fileName : "Test2D.hx", lineNumber : 84, className : "test.Test2D", methodName : "testAngles"});
		var this5 = new hxmath_math_Vector2Default(0.0,1.0);
		var b4 = new hxmath_math_Vector2Default(1.0,0.0);
		var self4 = this5;
		var x4 = self4.x * b4.y - b4.x * self4.y;
		this.assertApproxEquals((Math.abs(x4) < 0?0:x4 <= 0?-1:1) * Math.acos((self4.x * b4.x + self4.y * b4.y) / (Math.sqrt(self4.x * self4.x + self4.y * self4.y) * Math.sqrt(b4.x * b4.x + b4.y * b4.y))),-Math.PI / 2.0,null,{ fileName : "Test2D.hx", lineNumber : 86, className : "test.Test2D", methodName : "testAngles"});
		var this6 = new hxmath_math_Vector2Default(1.0,0.0);
		var b5 = new hxmath_math_Vector2Default(0.0,1.0);
		var self5 = this6;
		var x5 = self5.x * b5.y - b5.x * self5.y;
		this.assertApproxEquals((Math.abs(x5) < 0?0:x5 <= 0?-1:1) * Math.acos((self5.x * b5.x + self5.y * b5.y) / (Math.sqrt(self5.x * self5.x + self5.y * self5.y) * Math.sqrt(b5.x * b5.x + b5.y * b5.y))),Math.PI / 2.0,null,{ fileName : "Test2D.hx", lineNumber : 87, className : "test.Test2D", methodName : "testAngles"});
		var this7 = new hxmath_math_Vector2Default(0.0,1.0);
		var b6 = new hxmath_math_Vector2Default(1.0,0.0);
		var self6 = this7;
		this.assertApproxEquals(Math.acos((self6.x * b6.x + self6.y * b6.y) / (Math.sqrt(self6.x * self6.x + self6.y * self6.y) * Math.sqrt(b6.x * b6.x + b6.y * b6.y))),Math.PI / 2.0,null,{ fileName : "Test2D.hx", lineNumber : 89, className : "test.Test2D", methodName : "testAngles"});
		var this8 = new hxmath_math_Vector2Default(1.0,0.0);
		var b7 = new hxmath_math_Vector2Default(0.0,1.0);
		var self7 = this8;
		this.assertApproxEquals(Math.acos((self7.x * b7.x + self7.y * b7.y) / (Math.sqrt(self7.x * self7.x + self7.y * self7.y) * Math.sqrt(b7.x * b7.x + b7.y * b7.y))),Math.PI / 2.0,null,{ fileName : "Test2D.hx", lineNumber : 90, className : "test.Test2D", methodName : "testAngles"});
	}
	,testOrbit: function() {
		var _g = 0;
		while(_g < 5) {
			++_g;
			var a = this.randomVector2();
			var b = new hxmath_math_Vector2Default(1,1);
			var self = new hxmath_math_Vector2Default(a.x,a.y);
			self.x += b.x;
			self.y += b.y;
			var angle = Math.PI / 2;
			var m = new hxmath_math_Matrix3x2Default(1.0,0.0,0.0,1.0,0.0,0.0);
			var self1 = new hxmath_math_Matrix2x2Default(0.0,0.0,0.0,0.0);
			var s = Math.sin(angle);
			var c = Math.cos(angle);
			self1.a = c;
			self1.b = -s;
			self1.c = s;
			self1.d = c;
			m.a = self1.a;
			m.b = self1.b;
			m.c = self1.c;
			m.d = self1.d;
			var m1 = new hxmath_math_Matrix2x2Default(m.a,m.b,m.c,m.d);
			var b1 = new hxmath_math_Vector2Default(m1.a * self.x + m1.b * self.y,m1.c * self.x + m1.d * self.y);
			var self2 = new hxmath_math_Vector2Default(self.x,self.y);
			self2.x -= b1.x;
			self2.y -= b1.y;
			m.tx = self2.x;
			m.ty = self2.y;
			var _g1 = 0;
			while(_g1 < 5) {
				++_g1;
				var point = this.randomVector2();
				var m2 = new hxmath_math_Matrix2x2Default(m.a,m.b,m.c,m.d);
				var a1 = new hxmath_math_Vector2Default(m2.a * point.x + m2.b * point.y,m2.c * point.x + m2.d * point.y);
				var b2 = new hxmath_math_Vector2Default(m.tx,m.ty);
				var self3 = new hxmath_math_Vector2Default(a1.x,a1.y);
				self3.x += b2.x;
				self3.y += b2.y;
				var self4 = new hxmath_math_Vector2Default(point.x,point.y);
				self4.x -= self.x;
				self4.y -= self.y;
				var self5 = new hxmath_math_Vector2Default(self3.x,self3.y);
				self5.x -= self.x;
				self5.y -= self.y;
				this.assertApproxEquals(0.0,self4.x * self5.x + self4.y * self5.y,null,{ fileName : "Test2D.hx", lineNumber : 104, className : "test.Test2D", methodName : "testOrbit"});
			}
		}
	}
	,testLinearSubMatrix: function() {
		var m = new hxmath_math_Matrix3x2Default(1.0,0.0,0.0,1.0,0.0,0.0);
		var value = new hxmath_math_Matrix2x2Default(1.0,2.0,3.0,4.0);
		m.a = value.a;
		m.b = value.b;
		m.c = value.c;
		m.d = value.d;
		var m1 = new hxmath_math_Matrix2x2Default(m.a,m.b,m.c,m.d);
		var n = new hxmath_math_Matrix2x2Default(1.0,2.0,3.0,4.0);
		this.assertTrue(m1 == null && n == null || m1 != null && n != null && m1.a == n.a && m1.b == n.b && m1.c == n.c && m1.d == n.d,{ fileName : "Test2D.hx", lineNumber : 113, className : "test.Test2D", methodName : "testLinearSubMatrix"});
	}
	,testMatrixFrameInverse: function() {
		var _g = 0;
		while(_g < 10) {
			++_g;
			var frame = this.randomFrame2();
			var self = frame.get_matrix();
			var this1 = new hxmath_math_Matrix2x2Default(self.a,self.b,self.c,self.d);
			var v = frame.get_offset();
			var self1 = this1;
			var self2 = new hxmath_math_Vector2Default(self1.a * v.x + self1.c * v.y,self1.b * v.x + self1.d * v.y);
			self2.x = -self2.x;
			self2.y = -self2.y;
			var invFrame = hxmath_frames__$Frame2_Frame2_$Impl_$._new(self2,-frame.get_angleDegrees());
			frame.get_matrix();
			var invFrameMatrix = invFrame.get_matrix();
			var self3 = frame.get_matrix();
			var temp = self3.c;
			self3.c = self3.b;
			self3.b = temp;
			var tx = -(self3.a * self3.tx + self3.b * self3.ty);
			var ty = -(self3.c * self3.tx + self3.d * self3.ty);
			self3.tx = tx;
			self3.ty = ty;
			var homogenous0 = new hxmath_math_Vector2Default(0.0,0.0);
			var homogenousX = new hxmath_math_Vector2Default(1.0,0.0);
			var homogenousY = new hxmath_math_Vector2Default(0.0,1.0);
			var m = new hxmath_math_Matrix2x2Default(invFrameMatrix.a,invFrameMatrix.b,invFrameMatrix.c,invFrameMatrix.d);
			var a = new hxmath_math_Vector2Default(m.a * homogenous0.x + m.b * homogenous0.y,m.c * homogenous0.x + m.d * homogenous0.y);
			var b = new hxmath_math_Vector2Default(invFrameMatrix.tx,invFrameMatrix.ty);
			var self4 = new hxmath_math_Vector2Default(a.x,a.y);
			self4.x += b.x;
			self4.y += b.y;
			var m1 = new hxmath_math_Matrix2x2Default(self3.a,self3.b,self3.c,self3.d);
			var a1 = new hxmath_math_Vector2Default(m1.a * homogenous0.x + m1.b * homogenous0.y,m1.c * homogenous0.x + m1.d * homogenous0.y);
			var b1 = new hxmath_math_Vector2Default(self3.tx,self3.ty);
			var self5 = new hxmath_math_Vector2Default(a1.x,a1.y);
			self5.x += b1.x;
			self5.y += b1.y;
			var self6 = new hxmath_math_Vector2Default(self4.x,self4.y);
			self6.x -= self5.x;
			self6.y -= self5.y;
			var self7 = self6;
			this.assertApproxEquals(0.0,self7.x * self7.x + self7.y * self7.y,null,{ fileName : "Test2D.hx", lineNumber : 138, className : "test.Test2D", methodName : "testMatrixFrameInverse"});
			var m2 = new hxmath_math_Matrix2x2Default(invFrameMatrix.a,invFrameMatrix.b,invFrameMatrix.c,invFrameMatrix.d);
			var a2 = new hxmath_math_Vector2Default(m2.a * homogenousX.x + m2.b * homogenousX.y,m2.c * homogenousX.x + m2.d * homogenousX.y);
			var b2 = new hxmath_math_Vector2Default(invFrameMatrix.tx,invFrameMatrix.ty);
			var self8 = new hxmath_math_Vector2Default(a2.x,a2.y);
			self8.x += b2.x;
			self8.y += b2.y;
			var m3 = new hxmath_math_Matrix2x2Default(self3.a,self3.b,self3.c,self3.d);
			var a3 = new hxmath_math_Vector2Default(m3.a * homogenousX.x + m3.b * homogenousX.y,m3.c * homogenousX.x + m3.d * homogenousX.y);
			var b3 = new hxmath_math_Vector2Default(self3.tx,self3.ty);
			var self9 = new hxmath_math_Vector2Default(a3.x,a3.y);
			self9.x += b3.x;
			self9.y += b3.y;
			var self10 = new hxmath_math_Vector2Default(self8.x,self8.y);
			self10.x -= self9.x;
			self10.y -= self9.y;
			var self11 = self10;
			this.assertApproxEquals(0.0,self11.x * self11.x + self11.y * self11.y,null,{ fileName : "Test2D.hx", lineNumber : 139, className : "test.Test2D", methodName : "testMatrixFrameInverse"});
			var m4 = new hxmath_math_Matrix2x2Default(invFrameMatrix.a,invFrameMatrix.b,invFrameMatrix.c,invFrameMatrix.d);
			var a4 = new hxmath_math_Vector2Default(m4.a * homogenousY.x + m4.b * homogenousY.y,m4.c * homogenousY.x + m4.d * homogenousY.y);
			var b4 = new hxmath_math_Vector2Default(invFrameMatrix.tx,invFrameMatrix.ty);
			var self12 = new hxmath_math_Vector2Default(a4.x,a4.y);
			self12.x += b4.x;
			self12.y += b4.y;
			var m5 = new hxmath_math_Matrix2x2Default(self3.a,self3.b,self3.c,self3.d);
			var a5 = new hxmath_math_Vector2Default(m5.a * homogenousY.x + m5.b * homogenousY.y,m5.c * homogenousY.x + m5.d * homogenousY.y);
			var b5 = new hxmath_math_Vector2Default(self3.tx,self3.ty);
			var self13 = new hxmath_math_Vector2Default(a5.x,a5.y);
			self13.x += b5.x;
			self13.y += b5.y;
			var self14 = new hxmath_math_Vector2Default(self12.x,self12.y);
			self14.x -= self13.x;
			self14.y -= self13.y;
			var self15 = self14;
			this.assertApproxEquals(0.0,self15.x * self15.x + self15.y * self15.y,null,{ fileName : "Test2D.hx", lineNumber : 140, className : "test.Test2D", methodName : "testMatrixFrameInverse"});
		}
	}
	,testOrthoNormalize: function() {
		var _g = 0;
		while(_g < 10) {
			++_g;
			var u = this.randomVector2();
			var v = this.randomVector2();
			var length = Math.sqrt(u.x * u.x + u.y * u.y);
			if(length > 0.0) {
				u.x /= length;
				u.y /= length;
			}
			var self = new hxmath_math_Vector2Default(v.x,v.y);
			var s = (self.x * u.x + self.y * u.y) / (u.x * u.x + u.y * u.y);
			var _g1 = 0;
			while(_g1 < 2) {
				var i = _g1++;
				var tmp;
				switch(i) {
				case 0:
					tmp = u.x;
					break;
				case 1:
					tmp = u.y;
					break;
				default:
					throw new js__$Boot_HaxeError("Invalid element");
				}
				var value = tmp;
				switch(i) {
				case 0:
					self.x = value;
					break;
				case 1:
					self.y = value;
					break;
				default:
					throw new js__$Boot_HaxeError("Invalid element");
				}
			}
			self.x *= s;
			self.y *= s;
			v.x -= self.x;
			v.y -= self.y;
			var length1 = Math.sqrt(v.x * v.x + v.y * v.y);
			if(length1 > 0.0) {
				v.x /= length1;
				v.y /= length1;
			}
			this.assertApproxEquals(1.0,Math.sqrt(u.x * u.x + u.y * u.y),null,{ fileName : "Test2D.hx", lineNumber : 153, className : "test.Test2D", methodName : "testOrthoNormalize"});
			this.assertApproxEquals(1.0,Math.sqrt(v.x * v.x + v.y * v.y),null,{ fileName : "Test2D.hx", lineNumber : 154, className : "test.Test2D", methodName : "testOrthoNormalize"});
			this.assertApproxEquals(0.0,u.x * v.x + u.y * v.y,null,{ fileName : "Test2D.hx", lineNumber : 155, className : "test.Test2D", methodName : "testOrthoNormalize"});
		}
	}
	,testReflect: function() {
		var _g = 0;
		while(_g < 10) {
			++_g;
			var u = this.randomVector2();
			var normal = new hxmath_math_Vector2Default(0.0,1.0);
			var self = new hxmath_math_Vector2Default(u.x,u.y);
			var self1 = new hxmath_math_Vector2Default(self.x,self.y);
			var s = (self1.x * normal.x + self1.y * normal.y) / (normal.x * normal.x + normal.y * normal.y);
			var _g1 = 0;
			while(_g1 < 2) {
				var i = _g1++;
				var tmp;
				switch(i) {
				case 0:
					tmp = normal.x;
					break;
				case 1:
					tmp = normal.y;
					break;
				default:
					throw new js__$Boot_HaxeError("Invalid element");
				}
				var value = tmp;
				switch(i) {
				case 0:
					self1.x = value;
					break;
				case 1:
					self1.y = value;
					break;
				default:
					throw new js__$Boot_HaxeError("Invalid element");
				}
			}
			self1.x *= s;
			self1.y *= s;
			self1.x *= 2.0;
			self1.y *= 2.0;
			self.x -= self1.x;
			self.y -= self1.y;
			this.assertEquals(u.x,self.x,{ fileName : "Test2D.hx", lineNumber : 166, className : "test.Test2D", methodName : "testReflect"});
			this.assertEquals(-u.y,self.y,{ fileName : "Test2D.hx", lineNumber : 167, className : "test.Test2D", methodName : "testReflect"});
		}
	}
	,__class__: test_Test2D
});
var test_TestStress = function(posInfos) {
	this.a = 5;
	test_MathTestCase.call(this,posInfos);
};
test_TestStress.__name__ = ["test","TestStress"];
test_TestStress.__super__ = test_MathTestCase;
test_TestStress.prototype = $extend(test_MathTestCase.prototype,{
	a: null
	,testDotProduct: function() {
		console.log("--Vector2 dot product--");
		this.a = 100;
		var time1Start = this.a;
		var sum1 = 0.0;
		var _g1 = 0;
		while(_g1 < 100000) {
			var i = _g1++;
			var a = new hxmath_math_Vector2Default(i * 1.2,i * 4.3);
			var b = new hxmath_math_Vector2Default(i * 1.1,i * 0.8);
			sum1 += a.x * b.x + a.y * b.y;
		}
		var time1End = this.a;
		var time2Start = this.a;
		var sum2 = 0.0;
		var _g11 = 0;
		while(_g11 < 100000) {
			var i1 = _g11++;
			var a1 = new hxmath_math_Vector2Default(i1 * 1.2,i1 * 4.3);
			var b1 = new hxmath_math_Vector2Default(i1 * 1.1,i1 * 0.8);
			sum2 += a1.x * b1.x + a1.y * b1.y;
		}
		var time2End = this.a;
		this.assertEquals(sum1,sum2,{ fileName : "TestStress.hx", lineNumber : 43, className : "test.TestStress", methodName : "testDotProduct"});
		var time1 = time1End - time1Start;
		var time2 = time2End - time2Start;
		console.log("abstracts = " + time1);
		console.log("direct = " + time2);
		console.log("abstracts / direct = " + time1 / time2);
	}
	,testMatrixProduct: function() {
		console.log("--Matrix3x3 matrix product--");
		this.a = 100;
		var time1Start = this.a;
		var sum1 = 0.0;
		var _g1 = 0;
		while(_g1 < 100000) {
			var i = _g1++;
			var a = new hxmath_math_Matrix3x3Default(i * 1.2,i * 4.3,i * 1.2,i * 4.3,i * 1.2,i * 4.3,i * 1.2,i * 4.3,i * 1.2);
			var b = new hxmath_math_Matrix3x3Default(i * 1.1,i * 0.8,i * 1.1,i * 0.8,i * 1.1,i * 0.8,i * 1.1,i * 0.8,i * 1.1);
			var c = new hxmath_math_Matrix3x3Default(a.m00 * b.m00 + a.m10 * b.m01 + a.m20 * b.m02,a.m00 * b.m10 + a.m10 * b.m11 + a.m20 * b.m12,a.m00 * b.m20 + a.m10 * b.m21 + a.m20 * b.m22,a.m01 * b.m00 + a.m11 * b.m01 + a.m21 * b.m02,a.m01 * b.m10 + a.m11 * b.m11 + a.m21 * b.m12,a.m01 * b.m20 + a.m11 * b.m21 + a.m21 * b.m22,a.m02 * b.m00 + a.m12 * b.m01 + a.m22 * b.m02,a.m02 * b.m10 + a.m12 * b.m11 + a.m22 * b.m12,a.m02 * b.m20 + a.m12 * b.m21 + a.m22 * b.m22);
			sum1 += c.m00 + c.m10 + c.m20 + c.m01 + c.m11 + c.m21 + c.m02 + c.m12 + c.m22;
		}
		var time1End = this.a;
		var time2Start = this.a;
		var sum2 = 0.0;
		var _g11 = 0;
		while(_g11 < 100000) {
			var i1 = _g11++;
			var a1 = new hxmath_math_Matrix3x3Default(i1 * 1.2,i1 * 4.3,i1 * 1.2,i1 * 4.3,i1 * 1.2,i1 * 4.3,i1 * 1.2,i1 * 4.3,i1 * 1.2);
			var b1 = new hxmath_math_Matrix3x3Default(i1 * 1.1,i1 * 0.8,i1 * 1.1,i1 * 0.8,i1 * 1.1,i1 * 0.8,i1 * 1.1,i1 * 0.8,i1 * 1.1);
			var c1 = new hxmath_math_Matrix3x3Default(a1.m00 * b1.m00 + a1.m10 * b1.m01 + a1.m20 * b1.m02,a1.m00 * b1.m10 + a1.m10 * b1.m11 + a1.m20 * b1.m12,a1.m00 * b1.m20 + a1.m10 * b1.m21 + a1.m20 * b1.m22,a1.m01 * b1.m00 + a1.m11 * b1.m01 + a1.m21 * b1.m02,a1.m01 * b1.m10 + a1.m11 * b1.m11 + a1.m21 * b1.m12,a1.m01 * b1.m20 + a1.m11 * b1.m21 + a1.m21 * b1.m22,a1.m02 * b1.m00 + a1.m12 * b1.m01 + a1.m22 * b1.m02,a1.m02 * b1.m10 + a1.m12 * b1.m11 + a1.m22 * b1.m12,a1.m02 * b1.m20 + a1.m12 * b1.m21 + a1.m22 * b1.m22);
			sum2 += c1.m00 + c1.m10 + c1.m20 + c1.m01 + c1.m11 + c1.m21 + c1.m02 + c1.m12 + c1.m22;
		}
		var time2End = this.a;
		this.assertEquals(sum1,sum2,{ fileName : "TestStress.hx", lineNumber : 116, className : "test.TestStress", methodName : "testMatrixProduct"});
		var time1 = time1End - time1Start;
		var time2 = time2End - time2Start;
		console.log("abstracts = " + time1);
		console.log("direct = " + time2);
		console.log("abstracts / direct = " + time1 / time2);
	}
	,testMatrix3x2Constructor: function() {
		console.log("--Matrix3x2 constructor--");
		this.a = 100;
		var abstractTimeStart = this.a;
		var sum1 = 0.0;
		var _g1 = 0;
		while(_g1 < 100000) {
			var i = _g1++;
			var m = new hxmath_math_Matrix3x2Default(i * 1.2,i * 4.3,i * 1.2,i * 4.3,i * 1.2,i * 4.3);
			sum1 += m.a + m.b + m.c + m.d + m.tx + m.ty;
		}
		var abstractTimeEnd = this.a;
		var classTimeStart = this.a;
		var sum2 = 0.0;
		var _g11 = 0;
		while(_g11 < 100000) {
			var i1 = _g11++;
			var m1 = new hxmath_math_Matrix3x2Default(i1 * 1.2,i1 * 4.3,i1 * 1.2,i1 * 4.3,i1 * 1.2,i1 * 4.3);
			sum2 += m1.a + m1.b + m1.c + m1.d + m1.tx + m1.ty;
		}
		var classTimeEnd = this.a;
		this.assertEquals(sum1,sum2,{ fileName : "TestStress.hx", lineNumber : 160, className : "test.TestStress", methodName : "testMatrix3x2Constructor"});
		var abstractTime = abstractTimeEnd - abstractTimeStart;
		var classTime = classTimeEnd - classTimeStart;
		console.log("abstracts = " + abstractTime);
		console.log("direct = " + classTime);
		console.log("abstracts / direct = " + abstractTime / classTime);
	}
	,testMatrix4x4Constructor: function() {
		console.log("--Matrix4x4 constructor--");
		this.a = 100;
		var abstractTimeStart = this.a;
		var sum1 = 0.0;
		var _g1 = 0;
		while(_g1 < 100000) {
			var i = _g1++;
			var a = new hxmath_math_Matrix4x4Default(i * 1.2,i * 4.3,i * 1.2,i * 4.3,i * 1.2,i * 4.3,i * 1.2,i * 4.3,i * 1.2,i * 4.3,i * 1.2,i * 4.3,i * 1.2,i * 4.3,i * 1.2,i * 4.3);
			sum1 += a.m00 + a.m10 + a.m20 + a.m30 + a.m01 + a.m11 + a.m21 + a.m31 + a.m02 + a.m12 + a.m22 + a.m32 + a.m03 + a.m13 + a.m23 + a.m33;
		}
		var abstractTimeEnd = this.a;
		var classTimeStart = this.a;
		var sum2 = 0.0;
		var _g11 = 0;
		while(_g11 < 100000) {
			var i1 = _g11++;
			var a1 = new hxmath_math_Matrix4x4Default(i1 * 1.2,i1 * 4.3,i1 * 1.2,i1 * 4.3,i1 * 1.2,i1 * 4.3,i1 * 1.2,i1 * 4.3,i1 * 1.2,i1 * 4.3,i1 * 1.2,i1 * 4.3,i1 * 1.2,i1 * 4.3,i1 * 1.2,i1 * 4.3);
			sum2 += a1.m00 + a1.m10 + a1.m20 + a1.m30 + a1.m01 + a1.m11 + a1.m21 + a1.m31 + a1.m02 + a1.m12 + a1.m22 + a1.m32 + a1.m03 + a1.m13 + a1.m23 + a1.m33;
		}
		var classTimeEnd = this.a;
		this.assertEquals(sum1,sum2,{ fileName : "TestStress.hx", lineNumber : 216, className : "test.TestStress", methodName : "testMatrix4x4Constructor"});
		var abstractTime = abstractTimeEnd - abstractTimeStart;
		var classTime = classTimeEnd - classTimeStart;
		console.log("abstracts = " + abstractTime);
		console.log("direct = " + classTime);
		console.log("abstracts / direct = " + abstractTime / classTime);
	}
	,__class__: test_TestStress
});
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = ["String"];
Array.__name__ = ["Array"];
hxmath_math__$IntVector2_IntVector2_$Impl_$.elementCount = 2;
hxmath_math_MathUtil.eps = 1e-6;
hxmath_math__$Matrix2x2_Matrix2x2_$Impl_$.elementCount = 4;
hxmath_math__$Matrix3x2_Matrix3x2_$Impl_$.elementCount = 6;
hxmath_math__$Matrix3x3_Matrix3x3_$Impl_$.elementCount = 9;
hxmath_math__$Matrix4x4_Matrix4x4_$Impl_$.elementCount = 16;
hxmath_math__$Quaternion_Quaternion_$Impl_$.elementCount = 4;
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.elementCount = 2;
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.bitsPerField = 16;
hxmath_math__$ShortVector2_ShortVector2_$Impl_$.fieldMax = 65535;
hxmath_math__$Vector2_Vector2_$Impl_$.elementCount = 2;
hxmath_math__$Vector3_Vector3_$Impl_$.elementCount = 3;
hxmath_math__$Vector4_Vector4_$Impl_$.elementCount = 4;
js_Boot.__toStr = { }.toString;
nanotest_NanoTestCase.ASSERT_TRUE_ERROR = "expected true but was false";
nanotest_NanoTestCase.ASSERT_FALSE_ERROR = "expected false but was true";
nanotest_NanoTestCase.ASSERT_THROWS_ERROR = "expected to throw exception but didn't";
test_TS2.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
