// Generated by Haxe 3.3.0
package test;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Test3D extends test.MathTestCase
{
	public Test3D(haxe.lang.EmptyObject empty)
	{
		//line 11 "/shared/hxmath/test/Test3D.hx"
		super(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public Test3D(java.lang.Object posInfos)
	{
		//line 29 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		super(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
		//line 29 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		test.Test3D.__hx_ctor_test_Test3D(this, posInfos);
	}
	
	
	public static void __hx_ctor_test_Test3D(test.Test3D __temp_me54, java.lang.Object posInfos)
	{
		//line 29 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		test.MathTestCase.__hx_ctor_test_MathTestCase(__temp_me54, posInfos);
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 11 "/shared/hxmath/test/Test3D.hx"
		return new test.Test3D(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 11 "/shared/hxmath/test/Test3D.hx"
		return new test.Test3D(((java.lang.Object) (arr.__get(0)) ));
	}
	
	
	public void testMatrixMult()
	{
		//line 15 "/shared/hxmath/test/Test3D.hx"
		int _g = 0;
		//line 15 "/shared/hxmath/test/Test3D.hx"
		while (( _g < 10 ))
		{
			//line 15 "/shared/hxmath/test/Test3D.hx"
			 ++ _g;
			//line 17 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Matrix3x3Default a = this.randomMatrix3x3(null);
			//line 18 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Matrix3x3Default this1 = new hxmath.math.Matrix3x3Default(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0);
			//line 18 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Matrix3x3Default a1 = ((hxmath.math.Matrix3x3Default) (this1) );
			//line 18 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Matrix3x3Default this2 = new hxmath.math.Matrix3x3Default(( ( ( a1.m00 * a.m00 ) + ( a1.m10 * a.m01 ) ) + ( a1.m20 * a.m02 ) ), ( ( ( a1.m00 * a.m10 ) + ( a1.m10 * a.m11 ) ) + ( a1.m20 * a.m12 ) ), ( ( ( a1.m00 * a.m20 ) + ( a1.m10 * a.m21 ) ) + ( a1.m20 * a.m22 ) ), ( ( ( a1.m01 * a.m00 ) + ( a1.m11 * a.m01 ) ) + ( a1.m21 * a.m02 ) ), ( ( ( a1.m01 * a.m10 ) + ( a1.m11 * a.m11 ) ) + ( a1.m21 * a.m12 ) ), ( ( ( a1.m01 * a.m20 ) + ( a1.m11 * a.m21 ) ) + ( a1.m21 * a.m22 ) ), ( ( ( a1.m02 * a.m00 ) + ( a1.m12 * a.m01 ) ) + ( a1.m22 * a.m02 ) ), ( ( ( a1.m02 * a.m10 ) + ( a1.m12 * a.m11 ) ) + ( a1.m22 * a.m12 ) ), ( ( ( a1.m02 * a.m20 ) + ( a1.m12 * a.m21 ) ) + ( a1.m22 * a.m22 ) ));
			//line 18 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Matrix3x3Default a2 = ((hxmath.math.Matrix3x3Default) (this2) );
			//line 18 "/shared/hxmath/test/Test3D.hx"
			this.assertTrue(( ( ( a2 == null ) && ( a == null ) ) || ( ( ( ( ( ( ( ( ( ( ( a2 != null ) && ( a != null ) ) && ( a2.m00 == a.m00 ) ) && ( a2.m10 == a.m10 ) ) && ( a2.m20 == a.m20 ) ) && ( a2.m01 == a.m01 ) ) && ( a2.m11 == a.m11 ) ) && ( a2.m21 == a.m21 ) ) && ( a2.m02 == a.m02 ) ) && ( a2.m12 == a.m12 ) ) && ( a2.m22 == a.m22 ) ) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testMatrixMult"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (18) )) )}));
		}
		
	}
	
	
	public void testAddSub()
	{
		//line 24 "/shared/hxmath/test/Test3D.hx"
		{
			//line 24 "/shared/hxmath/test/Test3D.hx"
			int _g = 0;
			//line 24 "/shared/hxmath/test/Test3D.hx"
			while (( _g < 10 ))
			{
				//line 24 "/shared/hxmath/test/Test3D.hx"
				 ++ _g;
				//line 26 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.Matrix3x3Default a = this.randomMatrix3x3(null);
				//line 27 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.Matrix3x3Default b = this.randomMatrix3x3(null);
				//line 28 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.Matrix3x3Default this1 = new hxmath.math.Matrix3x3Default(a.m00, a.m10, a.m20, a.m01, a.m11, a.m21, a.m02, a.m12, a.m22);
				//line 28 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.Matrix3x3Default c = ((hxmath.math.Matrix3x3Default) (this1) );
				//line 29 "/shared/hxmath/test/Test3D.hx"
				c.m00 += b.m00;
				//line 29 "/shared/hxmath/test/Test3D.hx"
				c.m10 += b.m10;
				//line 29 "/shared/hxmath/test/Test3D.hx"
				c.m20 += b.m20;
				//line 29 "/shared/hxmath/test/Test3D.hx"
				c.m01 += b.m01;
				//line 29 "/shared/hxmath/test/Test3D.hx"
				c.m11 += b.m11;
				//line 29 "/shared/hxmath/test/Test3D.hx"
				c.m21 += b.m21;
				//line 29 "/shared/hxmath/test/Test3D.hx"
				c.m02 += b.m02;
				//line 29 "/shared/hxmath/test/Test3D.hx"
				c.m12 += b.m12;
				//line 29 "/shared/hxmath/test/Test3D.hx"
				c.m22 += b.m22;
				//line 29 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.Matrix3x3Default this2 = new hxmath.math.Matrix3x3Default(a.m00, a.m10, a.m20, a.m01, a.m11, a.m21, a.m02, a.m12, a.m22);
				//line 29 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.Matrix3x3Default self = ((hxmath.math.Matrix3x3Default) (this2) );
				//line 29 "/shared/hxmath/test/Test3D.hx"
				self.m00 += b.m00;
				//line 29 "/shared/hxmath/test/Test3D.hx"
				self.m10 += b.m10;
				//line 29 "/shared/hxmath/test/Test3D.hx"
				self.m20 += b.m20;
				//line 29 "/shared/hxmath/test/Test3D.hx"
				self.m01 += b.m01;
				//line 29 "/shared/hxmath/test/Test3D.hx"
				self.m11 += b.m11;
				//line 29 "/shared/hxmath/test/Test3D.hx"
				self.m21 += b.m21;
				//line 29 "/shared/hxmath/test/Test3D.hx"
				self.m02 += b.m02;
				//line 29 "/shared/hxmath/test/Test3D.hx"
				self.m12 += b.m12;
				//line 29 "/shared/hxmath/test/Test3D.hx"
				self.m22 += b.m22;
				//line 29 "/shared/hxmath/test/Test3D.hx"
				this.assertTrue(( ( ( c == null ) && ( self == null ) ) || ( ( ( ( ( ( ( ( ( ( ( c != null ) && ( self != null ) ) && ( c.m00 == self.m00 ) ) && ( c.m10 == self.m10 ) ) && ( c.m20 == self.m20 ) ) && ( c.m01 == self.m01 ) ) && ( c.m11 == self.m11 ) ) && ( c.m21 == self.m21 ) ) && ( c.m02 == self.m02 ) ) && ( c.m12 == self.m12 ) ) && ( c.m22 == self.m22 ) ) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testAddSub"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (29) )) )}));
			}
			
		}
		
		//line 32 "/shared/hxmath/test/Test3D.hx"
		{
			//line 32 "/shared/hxmath/test/Test3D.hx"
			int _g1 = 0;
			//line 32 "/shared/hxmath/test/Test3D.hx"
			while (( _g1 < 10 ))
			{
				//line 32 "/shared/hxmath/test/Test3D.hx"
				 ++ _g1;
				//line 34 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.Matrix3x3Default a1 = this.randomMatrix3x3(null);
				//line 35 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.Matrix3x3Default b1 = this.randomMatrix3x3(null);
				//line 36 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.Matrix3x3Default this3 = new hxmath.math.Matrix3x3Default(a1.m00, a1.m10, a1.m20, a1.m01, a1.m11, a1.m21, a1.m02, a1.m12, a1.m22);
				//line 36 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.Matrix3x3Default c1 = ((hxmath.math.Matrix3x3Default) (this3) );
				//line 37 "/shared/hxmath/test/Test3D.hx"
				c1.m00 -= b1.m00;
				//line 37 "/shared/hxmath/test/Test3D.hx"
				c1.m10 -= b1.m10;
				//line 37 "/shared/hxmath/test/Test3D.hx"
				c1.m20 -= b1.m20;
				//line 37 "/shared/hxmath/test/Test3D.hx"
				c1.m01 -= b1.m01;
				//line 37 "/shared/hxmath/test/Test3D.hx"
				c1.m11 -= b1.m11;
				//line 37 "/shared/hxmath/test/Test3D.hx"
				c1.m21 -= b1.m21;
				//line 37 "/shared/hxmath/test/Test3D.hx"
				c1.m02 -= b1.m02;
				//line 37 "/shared/hxmath/test/Test3D.hx"
				c1.m12 -= b1.m12;
				//line 37 "/shared/hxmath/test/Test3D.hx"
				c1.m22 -= b1.m22;
				//line 37 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.Matrix3x3Default this4 = new hxmath.math.Matrix3x3Default(a1.m00, a1.m10, a1.m20, a1.m01, a1.m11, a1.m21, a1.m02, a1.m12, a1.m22);
				//line 37 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.Matrix3x3Default self1 = ((hxmath.math.Matrix3x3Default) (this4) );
				//line 37 "/shared/hxmath/test/Test3D.hx"
				self1.m00 -= b1.m00;
				//line 37 "/shared/hxmath/test/Test3D.hx"
				self1.m10 -= b1.m10;
				//line 37 "/shared/hxmath/test/Test3D.hx"
				self1.m20 -= b1.m20;
				//line 37 "/shared/hxmath/test/Test3D.hx"
				self1.m01 -= b1.m01;
				//line 37 "/shared/hxmath/test/Test3D.hx"
				self1.m11 -= b1.m11;
				//line 37 "/shared/hxmath/test/Test3D.hx"
				self1.m21 -= b1.m21;
				//line 37 "/shared/hxmath/test/Test3D.hx"
				self1.m02 -= b1.m02;
				//line 37 "/shared/hxmath/test/Test3D.hx"
				self1.m12 -= b1.m12;
				//line 37 "/shared/hxmath/test/Test3D.hx"
				self1.m22 -= b1.m22;
				//line 37 "/shared/hxmath/test/Test3D.hx"
				this.assertTrue(( ( ( c1 == null ) && ( self1 == null ) ) || ( ( ( ( ( ( ( ( ( ( ( c1 != null ) && ( self1 != null ) ) && ( c1.m00 == self1.m00 ) ) && ( c1.m10 == self1.m10 ) ) && ( c1.m20 == self1.m20 ) ) && ( c1.m01 == self1.m01 ) ) && ( c1.m11 == self1.m11 ) ) && ( c1.m21 == self1.m21 ) ) && ( c1.m02 == self1.m02 ) ) && ( c1.m12 == self1.m12 ) ) && ( c1.m22 == self1.m22 ) ) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testAddSub"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (37) )) )}));
			}
			
		}
		
	}
	
	
	public void testCrossProductPrecedence()
	{
		//line 43 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this1 = new hxmath.math.Vector3Default(1.0, 0.0, 0.0);
		//line 43 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default a = ((hxmath.math.Vector3Default) (this1) );
		//line 43 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this2 = new hxmath.math.Vector3Default(0.0, 1.0, 0.0);
		//line 43 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default a1 = ((hxmath.math.Vector3Default) (this2) );
		//line 43 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this3 = new hxmath.math.Vector3Default(0.0, 0.0, 1.0);
		//line 43 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default b = ((hxmath.math.Vector3Default) (this3) );
		//line 43 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this4 = new hxmath.math.Vector3Default(a1.x, a1.y, a1.z);
		//line 43 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default self = ((hxmath.math.Vector3Default) (this4) );
		//line 43 "/shared/hxmath/test/Test3D.hx"
		double newX = ( ( self.y * b.z ) - ( self.z * b.y ) );
		//line 43 "/shared/hxmath/test/Test3D.hx"
		double newY = ( ( self.z * b.x ) - ( self.x * b.z ) );
		//line 43 "/shared/hxmath/test/Test3D.hx"
		double newZ = ( ( self.x * b.y ) - ( self.y * b.x ) );
		//line 43 "/shared/hxmath/test/Test3D.hx"
		self.x = newX;
		//line 43 "/shared/hxmath/test/Test3D.hx"
		self.y = newY;
		//line 43 "/shared/hxmath/test/Test3D.hx"
		self.z = newZ;
		//line 43 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this5 = new hxmath.math.Vector3Default(a.x, a.y, a.z);
		//line 43 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default self1 = ((hxmath.math.Vector3Default) (this5) );
		//line 43 "/shared/hxmath/test/Test3D.hx"
		self1.x += self.x;
		//line 43 "/shared/hxmath/test/Test3D.hx"
		self1.y += self.y;
		//line 43 "/shared/hxmath/test/Test3D.hx"
		self1.z += self.z;
		//line 43 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this6 = new hxmath.math.Vector3Default(1.0, 0.0, 0.0);
		//line 43 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default _g1 = ((hxmath.math.Vector3Default) (this6) );
		//line 43 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this7 = new hxmath.math.Vector3Default(_g1.x, _g1.y, _g1.z);
		//line 43 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default self2 = ((hxmath.math.Vector3Default) (this7) );
		//line 43 "/shared/hxmath/test/Test3D.hx"
		self2.x *= 2.0;
		//line 43 "/shared/hxmath/test/Test3D.hx"
		self2.y *= 2.0;
		//line 43 "/shared/hxmath/test/Test3D.hx"
		self2.z *= 2.0;
		//line 43 "/shared/hxmath/test/Test3D.hx"
		this.assertTrue(( ( ( self1 == null ) && ( self2 == null ) ) || ( ( ( ( ( self1 != null ) && ( self2 != null ) ) && ( self1.x == self2.x ) ) && ( self1.y == self2.y ) ) && ( self1.z == self2.z ) ) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testCrossProductPrecedence"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (43) )) )}));
	}
	
	
	public void testAxialRotation()
	{
		//line 53 "/shared/hxmath/test/Test3D.hx"
		double angleRadians = ( ( java.lang.Math.PI / 180 ) * 90.0 );
		//line 53 "/shared/hxmath/test/Test3D.hx"
		double s = java.lang.Math.sin(angleRadians);
		//line 53 "/shared/hxmath/test/Test3D.hx"
		double c = java.lang.Math.cos(angleRadians);
		//line 53 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Matrix3x3Default this1 = new hxmath.math.Matrix3x3Default(((double) (1) ), ((double) (0) ), ((double) (0) ), ((double) (0) ), c,  - (s) , ((double) (0) ), s, c);
		//line 53 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Matrix3x3Default a = ((hxmath.math.Matrix3x3Default) (this1) );
		//line 53 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this2 = new hxmath.math.Vector3Default(0.0, 1.0, 0.0);
		//line 53 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default v = ((hxmath.math.Vector3Default) (this2) );
		//line 53 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this3 = new hxmath.math.Vector3Default(( ( ( a.m00 * v.x ) + ( a.m10 * v.y ) ) + ( a.m20 * v.z ) ), ( ( ( a.m01 * v.x ) + ( a.m11 * v.y ) ) + ( a.m21 * v.z ) ), ( ( ( a.m02 * v.x ) + ( a.m12 * v.y ) ) + ( a.m22 * v.z ) ));
		//line 53 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default a1 = ((hxmath.math.Vector3Default) (this3) );
		//line 53 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this4 = new hxmath.math.Vector3Default(0.0, 0.0, 1.0);
		//line 53 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default b = ((hxmath.math.Vector3Default) (this4) );
		//line 53 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this5 = new hxmath.math.Vector3Default(a1.x, a1.y, a1.z);
		//line 53 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default self = ((hxmath.math.Vector3Default) (this5) );
		//line 53 "/shared/hxmath/test/Test3D.hx"
		self.x -= b.x;
		//line 53 "/shared/hxmath/test/Test3D.hx"
		self.y -= b.y;
		//line 53 "/shared/hxmath/test/Test3D.hx"
		self.z -= b.z;
		//line 53 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default self1 = ((hxmath.math.Vector3Default) (self) );
		//line 53 "/shared/hxmath/test/Test3D.hx"
		this.assertApproxEquals(java.lang.Math.sqrt(( ( ( self1.x * self1.x ) + ( self1.y * self1.y ) ) + ( self1.z * self1.z ) )), 0.0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testAxialRotation"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (53) )) )}));
		//line 54 "/shared/hxmath/test/Test3D.hx"
		double angleRadians1 = ( ( java.lang.Math.PI / 180 ) * 90.0 );
		//line 54 "/shared/hxmath/test/Test3D.hx"
		double s1 = java.lang.Math.sin(angleRadians1);
		//line 54 "/shared/hxmath/test/Test3D.hx"
		double c1 = java.lang.Math.cos(angleRadians1);
		//line 54 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Matrix3x3Default this6 = new hxmath.math.Matrix3x3Default(((double) (1) ), ((double) (0) ), ((double) (0) ), ((double) (0) ), c1,  - (s1) , ((double) (0) ), s1, c1);
		//line 54 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Matrix3x3Default a2 = ((hxmath.math.Matrix3x3Default) (this6) );
		//line 54 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this7 = new hxmath.math.Vector3Default(0.0, 0.0, 1.0);
		//line 54 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default v1 = ((hxmath.math.Vector3Default) (this7) );
		//line 54 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this8 = new hxmath.math.Vector3Default(( ( ( a2.m00 * v1.x ) + ( a2.m10 * v1.y ) ) + ( a2.m20 * v1.z ) ), ( ( ( a2.m01 * v1.x ) + ( a2.m11 * v1.y ) ) + ( a2.m21 * v1.z ) ), ( ( ( a2.m02 * v1.x ) + ( a2.m12 * v1.y ) ) + ( a2.m22 * v1.z ) ));
		//line 54 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default a3 = ((hxmath.math.Vector3Default) (this8) );
		//line 54 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this9 = new hxmath.math.Vector3Default(0.0, 1.0, 0.0);
		//line 54 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default b1 = ((hxmath.math.Vector3Default) (this9) );
		//line 54 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this10 = new hxmath.math.Vector3Default(a3.x, a3.y, a3.z);
		//line 54 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default self2 = ((hxmath.math.Vector3Default) (this10) );
		//line 54 "/shared/hxmath/test/Test3D.hx"
		self2.x += b1.x;
		//line 54 "/shared/hxmath/test/Test3D.hx"
		self2.y += b1.y;
		//line 54 "/shared/hxmath/test/Test3D.hx"
		self2.z += b1.z;
		//line 54 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default self3 = ((hxmath.math.Vector3Default) (self2) );
		//line 54 "/shared/hxmath/test/Test3D.hx"
		this.assertApproxEquals(java.lang.Math.sqrt(( ( ( self3.x * self3.x ) + ( self3.y * self3.y ) ) + ( self3.z * self3.z ) )), 0.0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testAxialRotation"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (54) )) )}));
		//line 59 "/shared/hxmath/test/Test3D.hx"
		double angleRadians2 = ( ( java.lang.Math.PI / 180 ) * 90.0 );
		//line 59 "/shared/hxmath/test/Test3D.hx"
		double s2 = java.lang.Math.sin(angleRadians2);
		//line 59 "/shared/hxmath/test/Test3D.hx"
		double c2 = java.lang.Math.cos(angleRadians2);
		//line 59 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Matrix3x3Default this11 = new hxmath.math.Matrix3x3Default(c2, ((double) (0) ), s2, ((double) (0) ), ((double) (1) ), ((double) (0) ),  - (s2) , ((double) (0) ), c2);
		//line 59 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Matrix3x3Default a4 = ((hxmath.math.Matrix3x3Default) (this11) );
		//line 59 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this12 = new hxmath.math.Vector3Default(0.0, 0.0, 1.0);
		//line 59 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default v2 = ((hxmath.math.Vector3Default) (this12) );
		//line 59 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this13 = new hxmath.math.Vector3Default(( ( ( a4.m00 * v2.x ) + ( a4.m10 * v2.y ) ) + ( a4.m20 * v2.z ) ), ( ( ( a4.m01 * v2.x ) + ( a4.m11 * v2.y ) ) + ( a4.m21 * v2.z ) ), ( ( ( a4.m02 * v2.x ) + ( a4.m12 * v2.y ) ) + ( a4.m22 * v2.z ) ));
		//line 59 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default a5 = ((hxmath.math.Vector3Default) (this13) );
		//line 59 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this14 = new hxmath.math.Vector3Default(1.0, 0.0, 0.0);
		//line 59 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default b2 = ((hxmath.math.Vector3Default) (this14) );
		//line 59 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this15 = new hxmath.math.Vector3Default(a5.x, a5.y, a5.z);
		//line 59 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default self4 = ((hxmath.math.Vector3Default) (this15) );
		//line 59 "/shared/hxmath/test/Test3D.hx"
		self4.x -= b2.x;
		//line 59 "/shared/hxmath/test/Test3D.hx"
		self4.y -= b2.y;
		//line 59 "/shared/hxmath/test/Test3D.hx"
		self4.z -= b2.z;
		//line 59 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default self5 = ((hxmath.math.Vector3Default) (self4) );
		//line 59 "/shared/hxmath/test/Test3D.hx"
		this.assertApproxEquals(java.lang.Math.sqrt(( ( ( self5.x * self5.x ) + ( self5.y * self5.y ) ) + ( self5.z * self5.z ) )), 0.0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testAxialRotation"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (59) )) )}));
		//line 60 "/shared/hxmath/test/Test3D.hx"
		double angleRadians3 = ( ( java.lang.Math.PI / 180 ) * 90.0 );
		//line 60 "/shared/hxmath/test/Test3D.hx"
		double s3 = java.lang.Math.sin(angleRadians3);
		//line 60 "/shared/hxmath/test/Test3D.hx"
		double c3 = java.lang.Math.cos(angleRadians3);
		//line 60 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Matrix3x3Default this16 = new hxmath.math.Matrix3x3Default(c3, ((double) (0) ), s3, ((double) (0) ), ((double) (1) ), ((double) (0) ),  - (s3) , ((double) (0) ), c3);
		//line 60 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Matrix3x3Default a6 = ((hxmath.math.Matrix3x3Default) (this16) );
		//line 60 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this17 = new hxmath.math.Vector3Default(1.0, 0.0, 0.0);
		//line 60 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default v3 = ((hxmath.math.Vector3Default) (this17) );
		//line 60 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this18 = new hxmath.math.Vector3Default(( ( ( a6.m00 * v3.x ) + ( a6.m10 * v3.y ) ) + ( a6.m20 * v3.z ) ), ( ( ( a6.m01 * v3.x ) + ( a6.m11 * v3.y ) ) + ( a6.m21 * v3.z ) ), ( ( ( a6.m02 * v3.x ) + ( a6.m12 * v3.y ) ) + ( a6.m22 * v3.z ) ));
		//line 60 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default a7 = ((hxmath.math.Vector3Default) (this18) );
		//line 60 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this19 = new hxmath.math.Vector3Default(0.0, 0.0, 1.0);
		//line 60 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default b3 = ((hxmath.math.Vector3Default) (this19) );
		//line 60 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this20 = new hxmath.math.Vector3Default(a7.x, a7.y, a7.z);
		//line 60 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default self6 = ((hxmath.math.Vector3Default) (this20) );
		//line 60 "/shared/hxmath/test/Test3D.hx"
		self6.x += b3.x;
		//line 60 "/shared/hxmath/test/Test3D.hx"
		self6.y += b3.y;
		//line 60 "/shared/hxmath/test/Test3D.hx"
		self6.z += b3.z;
		//line 60 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default self7 = ((hxmath.math.Vector3Default) (self6) );
		//line 60 "/shared/hxmath/test/Test3D.hx"
		this.assertApproxEquals(java.lang.Math.sqrt(( ( ( self7.x * self7.x ) + ( self7.y * self7.y ) ) + ( self7.z * self7.z ) )), 0.0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testAxialRotation"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (60) )) )}));
		//line 65 "/shared/hxmath/test/Test3D.hx"
		double angleRadians4 = ( ( java.lang.Math.PI / 180 ) * 90.0 );
		//line 65 "/shared/hxmath/test/Test3D.hx"
		double s4 = java.lang.Math.sin(angleRadians4);
		//line 65 "/shared/hxmath/test/Test3D.hx"
		double c4 = java.lang.Math.cos(angleRadians4);
		//line 65 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Matrix3x3Default this21 = new hxmath.math.Matrix3x3Default(c4,  - (s4) , ((double) (0) ), s4, c4, ((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (1) ));
		//line 65 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Matrix3x3Default a8 = ((hxmath.math.Matrix3x3Default) (this21) );
		//line 65 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this22 = new hxmath.math.Vector3Default(1.0, 0.0, 0.0);
		//line 65 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default v4 = ((hxmath.math.Vector3Default) (this22) );
		//line 65 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this23 = new hxmath.math.Vector3Default(( ( ( a8.m00 * v4.x ) + ( a8.m10 * v4.y ) ) + ( a8.m20 * v4.z ) ), ( ( ( a8.m01 * v4.x ) + ( a8.m11 * v4.y ) ) + ( a8.m21 * v4.z ) ), ( ( ( a8.m02 * v4.x ) + ( a8.m12 * v4.y ) ) + ( a8.m22 * v4.z ) ));
		//line 65 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default a9 = ((hxmath.math.Vector3Default) (this23) );
		//line 65 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this24 = new hxmath.math.Vector3Default(0.0, 1.0, 0.0);
		//line 65 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default b4 = ((hxmath.math.Vector3Default) (this24) );
		//line 65 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this25 = new hxmath.math.Vector3Default(a9.x, a9.y, a9.z);
		//line 65 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default self8 = ((hxmath.math.Vector3Default) (this25) );
		//line 65 "/shared/hxmath/test/Test3D.hx"
		self8.x -= b4.x;
		//line 65 "/shared/hxmath/test/Test3D.hx"
		self8.y -= b4.y;
		//line 65 "/shared/hxmath/test/Test3D.hx"
		self8.z -= b4.z;
		//line 65 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default self9 = ((hxmath.math.Vector3Default) (self8) );
		//line 65 "/shared/hxmath/test/Test3D.hx"
		this.assertApproxEquals(java.lang.Math.sqrt(( ( ( self9.x * self9.x ) + ( self9.y * self9.y ) ) + ( self9.z * self9.z ) )), 0.0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testAxialRotation"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (65) )) )}));
		//line 66 "/shared/hxmath/test/Test3D.hx"
		double angleRadians5 = ( ( java.lang.Math.PI / 180 ) * 90.0 );
		//line 66 "/shared/hxmath/test/Test3D.hx"
		double s5 = java.lang.Math.sin(angleRadians5);
		//line 66 "/shared/hxmath/test/Test3D.hx"
		double c5 = java.lang.Math.cos(angleRadians5);
		//line 66 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Matrix3x3Default this26 = new hxmath.math.Matrix3x3Default(c5,  - (s5) , ((double) (0) ), s5, c5, ((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (1) ));
		//line 66 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Matrix3x3Default a10 = ((hxmath.math.Matrix3x3Default) (this26) );
		//line 66 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this27 = new hxmath.math.Vector3Default(0.0, 1.0, 0.0);
		//line 66 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default v5 = ((hxmath.math.Vector3Default) (this27) );
		//line 66 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this28 = new hxmath.math.Vector3Default(( ( ( a10.m00 * v5.x ) + ( a10.m10 * v5.y ) ) + ( a10.m20 * v5.z ) ), ( ( ( a10.m01 * v5.x ) + ( a10.m11 * v5.y ) ) + ( a10.m21 * v5.z ) ), ( ( ( a10.m02 * v5.x ) + ( a10.m12 * v5.y ) ) + ( a10.m22 * v5.z ) ));
		//line 66 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default a11 = ((hxmath.math.Vector3Default) (this28) );
		//line 66 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this29 = new hxmath.math.Vector3Default(1.0, 0.0, 0.0);
		//line 66 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default b5 = ((hxmath.math.Vector3Default) (this29) );
		//line 66 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this30 = new hxmath.math.Vector3Default(a11.x, a11.y, a11.z);
		//line 66 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default self10 = ((hxmath.math.Vector3Default) (this30) );
		//line 66 "/shared/hxmath/test/Test3D.hx"
		self10.x += b5.x;
		//line 66 "/shared/hxmath/test/Test3D.hx"
		self10.y += b5.y;
		//line 66 "/shared/hxmath/test/Test3D.hx"
		self10.z += b5.z;
		//line 66 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default self11 = ((hxmath.math.Vector3Default) (self10) );
		//line 66 "/shared/hxmath/test/Test3D.hx"
		this.assertApproxEquals(java.lang.Math.sqrt(( ( ( self11.x * self11.x ) + ( self11.y * self11.y ) ) + ( self11.z * self11.z ) )), 0.0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testAxialRotation"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (66) )) )}));
	}
	
	
	public void testQuaternionToMatrix()
	{
		//line 71 "/shared/hxmath/test/Test3D.hx"
		haxe.lang.Function createMatrixPair = ( (( test.Test3D_testQuaternionToMatrix_71__Fun.__hx_current != null )) ? (test.Test3D_testQuaternionToMatrix_71__Fun.__hx_current) : (test.Test3D_testQuaternionToMatrix_71__Fun.__hx_current = ((test.Test3D_testQuaternionToMatrix_71__Fun) (new test.Test3D_testQuaternionToMatrix_71__Fun()) )) );
		//line 83 "/shared/hxmath/test/Test3D.hx"
		{
			//line 83 "/shared/hxmath/test/Test3D.hx"
			int _g = 0;
			//line 83 "/shared/hxmath/test/Test3D.hx"
			while (( _g < 3 ))
			{
				//line 83 "/shared/hxmath/test/Test3D.hx"
				int axis2 = _g++;
				//line 85 "/shared/hxmath/test/Test3D.hx"
				double unitAngle1 = 0.0;
				//line 87 "/shared/hxmath/test/Test3D.hx"
				{
					//line 87 "/shared/hxmath/test/Test3D.hx"
					int _g1 = 0;
					//line 87 "/shared/hxmath/test/Test3D.hx"
					while (( _g1 < 10 ))
					{
						//line 87 "/shared/hxmath/test/Test3D.hx"
						 ++ _g1;
						//line 89 "/shared/hxmath/test/Test3D.hx"
						unitAngle1 += 0.01;
						//line 90 "/shared/hxmath/test/Test3D.hx"
						double totalLength = 0.0;
						//line 92 "/shared/hxmath/test/Test3D.hx"
						{
							//line 92 "/shared/hxmath/test/Test3D.hx"
							int _g2 = 0;
							//line 92 "/shared/hxmath/test/Test3D.hx"
							while (( _g2 < 3 ))
							{
								//line 92 "/shared/hxmath/test/Test3D.hx"
								int c = _g2++;
								//line 94 "/shared/hxmath/test/Test3D.hx"
								java.lang.Object pair = ((java.lang.Object) (createMatrixPair.__hx_invoke2_o(unitAngle1, haxe.lang.Runtime.undefined, ((double) (axis2) ), haxe.lang.Runtime.undefined)) );
								//line 95 "/shared/hxmath/test/Test3D.hx"
								hxmath.math.Matrix3x3Default self = ((hxmath.math.Matrix3x3Default) (haxe.lang.Runtime.getField(pair, "n", true)) );
								//line 95 "/shared/hxmath/test/Test3D.hx"
								java.lang.Object tmp2 = null;
								//line 95 "/shared/hxmath/test/Test3D.hx"
								switch (c)
								{
									case 0:
									{
										//line 95 "/shared/hxmath/test/Test3D.hx"
										hxmath.math.Vector3Default this6 = new hxmath.math.Vector3Default(self.m00, self.m01, self.m02);
										//line 95 "/shared/hxmath/test/Test3D.hx"
										tmp2 = ((hxmath.math.Vector3Default) (this6) );
										//line 95 "/shared/hxmath/test/Test3D.hx"
										break;
									}
									
									
									case 1:
									{
										//line 95 "/shared/hxmath/test/Test3D.hx"
										hxmath.math.Vector3Default this7 = new hxmath.math.Vector3Default(self.m10, self.m11, self.m12);
										//line 95 "/shared/hxmath/test/Test3D.hx"
										tmp2 = ((hxmath.math.Vector3Default) (this7) );
										//line 95 "/shared/hxmath/test/Test3D.hx"
										break;
									}
									
									
									case 2:
									{
										//line 95 "/shared/hxmath/test/Test3D.hx"
										hxmath.math.Vector3Default this8 = new hxmath.math.Vector3Default(self.m20, self.m21, self.m22);
										//line 95 "/shared/hxmath/test/Test3D.hx"
										tmp2 = ((hxmath.math.Vector3Default) (this8) );
										//line 95 "/shared/hxmath/test/Test3D.hx"
										break;
									}
									
									
									default:
									{
										//line 95 "/shared/hxmath/test/Test3D.hx"
										throw haxe.lang.HaxeException.wrap("Invalid column");
									}
									
								}
								
								//line 95 "/shared/hxmath/test/Test3D.hx"
								hxmath.math.Vector3Default a = ((hxmath.math.Vector3Default) (tmp2) );
								//line 95 "/shared/hxmath/test/Test3D.hx"
								hxmath.math.Matrix3x3Default self1 = ((hxmath.math.Matrix3x3Default) (haxe.lang.Runtime.getField(pair, "m", true)) );
								//line 95 "/shared/hxmath/test/Test3D.hx"
								java.lang.Object tmp3 = null;
								//line 95 "/shared/hxmath/test/Test3D.hx"
								switch (c)
								{
									case 0:
									{
										//line 95 "/shared/hxmath/test/Test3D.hx"
										hxmath.math.Vector3Default this9 = new hxmath.math.Vector3Default(self1.m00, self1.m01, self1.m02);
										//line 95 "/shared/hxmath/test/Test3D.hx"
										tmp3 = ((hxmath.math.Vector3Default) (this9) );
										//line 95 "/shared/hxmath/test/Test3D.hx"
										break;
									}
									
									
									case 1:
									{
										//line 95 "/shared/hxmath/test/Test3D.hx"
										hxmath.math.Vector3Default this10 = new hxmath.math.Vector3Default(self1.m10, self1.m11, self1.m12);
										//line 95 "/shared/hxmath/test/Test3D.hx"
										tmp3 = ((hxmath.math.Vector3Default) (this10) );
										//line 95 "/shared/hxmath/test/Test3D.hx"
										break;
									}
									
									
									case 2:
									{
										//line 95 "/shared/hxmath/test/Test3D.hx"
										hxmath.math.Vector3Default this11 = new hxmath.math.Vector3Default(self1.m20, self1.m21, self1.m22);
										//line 95 "/shared/hxmath/test/Test3D.hx"
										tmp3 = ((hxmath.math.Vector3Default) (this11) );
										//line 95 "/shared/hxmath/test/Test3D.hx"
										break;
									}
									
									
									default:
									{
										//line 95 "/shared/hxmath/test/Test3D.hx"
										throw haxe.lang.HaxeException.wrap("Invalid column");
									}
									
								}
								
								//line 95 "/shared/hxmath/test/Test3D.hx"
								hxmath.math.Vector3Default b = ((hxmath.math.Vector3Default) (tmp3) );
								//line 95 "/shared/hxmath/test/Test3D.hx"
								hxmath.math.Vector3Default this12 = new hxmath.math.Vector3Default(a.x, a.y, a.z);
								//line 95 "/shared/hxmath/test/Test3D.hx"
								hxmath.math.Vector3Default self2 = ((hxmath.math.Vector3Default) (this12) );
								//line 95 "/shared/hxmath/test/Test3D.hx"
								self2.x -= b.x;
								//line 95 "/shared/hxmath/test/Test3D.hx"
								self2.y -= b.y;
								//line 95 "/shared/hxmath/test/Test3D.hx"
								self2.z -= b.z;
								//line 95 "/shared/hxmath/test/Test3D.hx"
								hxmath.math.Vector3Default self3 = ((hxmath.math.Vector3Default) (self2) );
								//line 95 "/shared/hxmath/test/Test3D.hx"
								totalLength += java.lang.Math.sqrt(( ( ( self3.x * self3.x ) + ( self3.y * self3.y ) ) + ( self3.z * self3.z ) ));
							}
							
						}
						
						//line 98 "/shared/hxmath/test/Test3D.hx"
						this.assertApproxEquals(totalLength, 0.0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testQuaternionToMatrix"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (98) )) )}));
					}
					
				}
				
			}
			
		}
		
	}
	
	
	public void testMatrixFrameInverse()
	{
		//line 105 "/shared/hxmath/test/Test3D.hx"
		int _g = 0;
		//line 105 "/shared/hxmath/test/Test3D.hx"
		while (( _g < 10 ))
		{
			//line 105 "/shared/hxmath/test/Test3D.hx"
			 ++ _g;
			//line 108 "/shared/hxmath/test/Test3D.hx"
			hxmath.frames.IFrame3 frame = this.randomFrame3(null);
			//line 111 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.QuaternionDefault self = ((hxmath.math.QuaternionDefault) (frame.get_orientation()) );
			//line 111 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.QuaternionDefault this1 = new hxmath.math.QuaternionDefault(self.s, self.x, self.y, self.z);
			//line 111 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.QuaternionDefault self1 = ((hxmath.math.QuaternionDefault) (this1) );
			//line 111 "/shared/hxmath/test/Test3D.hx"
			self1.x =  - (self1.x) ;
			//line 111 "/shared/hxmath/test/Test3D.hx"
			self1.y =  - (self1.y) ;
			//line 111 "/shared/hxmath/test/Test3D.hx"
			self1.z =  - (self1.z) ;
			//line 111 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.QuaternionDefault self2 = ((hxmath.math.QuaternionDefault) (self1) );
			//line 111 "/shared/hxmath/test/Test3D.hx"
			double length = java.lang.Math.sqrt(( ( ( ( self2.s * self2.s ) + ( self2.x * self2.x ) ) + ( self2.y * self2.y ) ) + ( self2.z * self2.z ) ));
			//line 111 "/shared/hxmath/test/Test3D.hx"
			if (( length > 0.0 )) 
			{
				//line 111 "/shared/hxmath/test/Test3D.hx"
				double k = ( 1.0 / length );
				//line 111 "/shared/hxmath/test/Test3D.hx"
				{
					//line 111 "/shared/hxmath/test/Test3D.hx"
					self2.s *= k;
					//line 111 "/shared/hxmath/test/Test3D.hx"
					self2.x *= k;
					//line 111 "/shared/hxmath/test/Test3D.hx"
					self2.y *= k;
					//line 111 "/shared/hxmath/test/Test3D.hx"
					self2.z *= k;
				}
				
			}
			
			//line 111 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector3Default u = frame.get_offset();
			//line 111 "/shared/hxmath/test/Test3D.hx"
			double a = ( 2.0 * (( ( ( self2.x * u.x ) + ( self2.y * u.y ) ) + ( self2.z * u.z ) )) );
			//line 111 "/shared/hxmath/test/Test3D.hx"
			double b = ( ( ( ( self2.s * self2.s ) - ( self2.x * self2.x ) ) - ( self2.y * self2.y ) ) - ( self2.z * self2.z ) );
			//line 111 "/shared/hxmath/test/Test3D.hx"
			double c = ( 2.0 * self2.s );
			//line 111 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector3Default this2 = new hxmath.math.Vector3Default(( ( ( a * self2.x ) + ( b * u.x ) ) + ( c * (( ( self2.y * u.z ) - ( self2.z * u.y ) )) ) ), ( ( ( a * self2.y ) + ( b * u.y ) ) + ( c * (( ( self2.z * u.x ) - ( self2.x * u.z ) )) ) ), ( ( ( a * self2.z ) + ( b * u.z ) ) + ( c * (( ( self2.x * u.y ) - ( self2.y * u.x ) )) ) ));
			//line 111 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector3Default self3 = ((hxmath.math.Vector3Default) (this2) );
			//line 111 "/shared/hxmath/test/Test3D.hx"
			self3.x =  - (self3.x) ;
			//line 111 "/shared/hxmath/test/Test3D.hx"
			self3.y =  - (self3.y) ;
			//line 111 "/shared/hxmath/test/Test3D.hx"
			self3.z =  - (self3.z) ;
			//line 111 "/shared/hxmath/test/Test3D.hx"
			hxmath.frames.IFrame3 invFrame = hxmath.frames._Frame3.Frame3_Impl_._new(self3, self2);
			//line 113 "/shared/hxmath/test/Test3D.hx"
			frame.get_matrix();
			//line 116 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Matrix4x4Default invFrameMatrix = invFrame.get_matrix();
			//line 117 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Matrix4x4Default self4 = ((hxmath.math.Matrix4x4Default) (frame.get_matrix()) );
			//line 117 "/shared/hxmath/test/Test3D.hx"
			{
				//line 117 "/shared/hxmath/test/Test3D.hx"
				double temp = self4.m01;
				//line 117 "/shared/hxmath/test/Test3D.hx"
				self4.m01 = self4.m10;
				//line 117 "/shared/hxmath/test/Test3D.hx"
				self4.m10 = temp;
				//line 117 "/shared/hxmath/test/Test3D.hx"
				temp = self4.m02;
				//line 117 "/shared/hxmath/test/Test3D.hx"
				self4.m02 = self4.m20;
				//line 117 "/shared/hxmath/test/Test3D.hx"
				self4.m20 = temp;
				//line 117 "/shared/hxmath/test/Test3D.hx"
				temp = self4.m12;
				//line 117 "/shared/hxmath/test/Test3D.hx"
				self4.m12 = self4.m21;
				//line 117 "/shared/hxmath/test/Test3D.hx"
				self4.m21 = temp;
			}
			
			//line 117 "/shared/hxmath/test/Test3D.hx"
			double tx =  - ((( ( ( self4.m00 * self4.m30 ) + ( self4.m10 * self4.m31 ) ) + ( self4.m20 * self4.m32 ) ))) ;
			//line 117 "/shared/hxmath/test/Test3D.hx"
			double ty =  - ((( ( ( self4.m01 * self4.m30 ) + ( self4.m11 * self4.m31 ) ) + ( self4.m21 * self4.m32 ) ))) ;
			//line 117 "/shared/hxmath/test/Test3D.hx"
			double tz =  - ((( ( ( self4.m02 * self4.m30 ) + ( self4.m12 * self4.m31 ) ) + ( self4.m22 * self4.m32 ) ))) ;
			//line 117 "/shared/hxmath/test/Test3D.hx"
			self4.m30 = tx;
			//line 117 "/shared/hxmath/test/Test3D.hx"
			self4.m31 = ty;
			//line 117 "/shared/hxmath/test/Test3D.hx"
			self4.m32 = tz;
			//line 120 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default this3 = new hxmath.math.Vector4Default(0.0, 0.0, 0.0, 1.0);
			//line 120 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default homogenous0 = ((hxmath.math.Vector4Default) (this3) );
			//line 121 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default this4 = new hxmath.math.Vector4Default(1.0, 0.0, 0.0, 1.0);
			//line 121 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default homogenousX = ((hxmath.math.Vector4Default) (this4) );
			//line 122 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default this5 = new hxmath.math.Vector4Default(0.0, 1.0, 0.0, 1.0);
			//line 122 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default homogenousY = ((hxmath.math.Vector4Default) (this5) );
			//line 123 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default this6 = new hxmath.math.Vector4Default(0.0, 0.0, 1.0, 1.0);
			//line 123 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default homogenousZ = ((hxmath.math.Vector4Default) (this6) );
			//line 126 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default this7 = new hxmath.math.Vector4Default(( ( ( ( invFrameMatrix.m00 * homogenous0.x ) + ( invFrameMatrix.m10 * homogenous0.y ) ) + ( invFrameMatrix.m20 * homogenous0.z ) ) + ( invFrameMatrix.m30 * homogenous0.w ) ), ( ( ( ( invFrameMatrix.m01 * homogenous0.x ) + ( invFrameMatrix.m11 * homogenous0.y ) ) + ( invFrameMatrix.m21 * homogenous0.z ) ) + ( invFrameMatrix.m31 * homogenous0.w ) ), ( ( ( ( invFrameMatrix.m02 * homogenous0.x ) + ( invFrameMatrix.m12 * homogenous0.y ) ) + ( invFrameMatrix.m22 * homogenous0.z ) ) + ( invFrameMatrix.m32 * homogenous0.w ) ), ( ( ( ( invFrameMatrix.m03 * homogenous0.x ) + ( invFrameMatrix.m13 * homogenous0.y ) ) + ( invFrameMatrix.m23 * homogenous0.z ) ) + ( invFrameMatrix.m33 * homogenous0.w ) ));
			//line 126 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default a1 = ((hxmath.math.Vector4Default) (this7) );
			//line 126 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default this8 = new hxmath.math.Vector4Default(( ( ( ( self4.m00 * homogenous0.x ) + ( self4.m10 * homogenous0.y ) ) + ( self4.m20 * homogenous0.z ) ) + ( self4.m30 * homogenous0.w ) ), ( ( ( ( self4.m01 * homogenous0.x ) + ( self4.m11 * homogenous0.y ) ) + ( self4.m21 * homogenous0.z ) ) + ( self4.m31 * homogenous0.w ) ), ( ( ( ( self4.m02 * homogenous0.x ) + ( self4.m12 * homogenous0.y ) ) + ( self4.m22 * homogenous0.z ) ) + ( self4.m32 * homogenous0.w ) ), ( ( ( ( self4.m03 * homogenous0.x ) + ( self4.m13 * homogenous0.y ) ) + ( self4.m23 * homogenous0.z ) ) + ( self4.m33 * homogenous0.w ) ));
			//line 126 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default b1 = ((hxmath.math.Vector4Default) (this8) );
			//line 126 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default this9 = new hxmath.math.Vector4Default(a1.x, a1.y, a1.z, a1.w);
			//line 126 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default self5 = ((hxmath.math.Vector4Default) (this9) );
			//line 126 "/shared/hxmath/test/Test3D.hx"
			self5.x -= b1.x;
			//line 126 "/shared/hxmath/test/Test3D.hx"
			self5.y -= b1.y;
			//line 126 "/shared/hxmath/test/Test3D.hx"
			self5.z -= b1.z;
			//line 126 "/shared/hxmath/test/Test3D.hx"
			self5.w -= b1.w;
			//line 126 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default self6 = ((hxmath.math.Vector4Default) (self5) );
			//line 126 "/shared/hxmath/test/Test3D.hx"
			this.assertApproxEquals(0.0, ( ( ( ( self6.x * self6.x ) + ( self6.y * self6.y ) ) + ( self6.z * self6.z ) ) + ( self6.w * self6.w ) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testMatrixFrameInverse"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (126) )) )}));
			//line 127 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default this10 = new hxmath.math.Vector4Default(( ( ( ( invFrameMatrix.m00 * homogenousX.x ) + ( invFrameMatrix.m10 * homogenousX.y ) ) + ( invFrameMatrix.m20 * homogenousX.z ) ) + ( invFrameMatrix.m30 * homogenousX.w ) ), ( ( ( ( invFrameMatrix.m01 * homogenousX.x ) + ( invFrameMatrix.m11 * homogenousX.y ) ) + ( invFrameMatrix.m21 * homogenousX.z ) ) + ( invFrameMatrix.m31 * homogenousX.w ) ), ( ( ( ( invFrameMatrix.m02 * homogenousX.x ) + ( invFrameMatrix.m12 * homogenousX.y ) ) + ( invFrameMatrix.m22 * homogenousX.z ) ) + ( invFrameMatrix.m32 * homogenousX.w ) ), ( ( ( ( invFrameMatrix.m03 * homogenousX.x ) + ( invFrameMatrix.m13 * homogenousX.y ) ) + ( invFrameMatrix.m23 * homogenousX.z ) ) + ( invFrameMatrix.m33 * homogenousX.w ) ));
			//line 127 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default a2 = ((hxmath.math.Vector4Default) (this10) );
			//line 127 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default this11 = new hxmath.math.Vector4Default(( ( ( ( self4.m00 * homogenousX.x ) + ( self4.m10 * homogenousX.y ) ) + ( self4.m20 * homogenousX.z ) ) + ( self4.m30 * homogenousX.w ) ), ( ( ( ( self4.m01 * homogenousX.x ) + ( self4.m11 * homogenousX.y ) ) + ( self4.m21 * homogenousX.z ) ) + ( self4.m31 * homogenousX.w ) ), ( ( ( ( self4.m02 * homogenousX.x ) + ( self4.m12 * homogenousX.y ) ) + ( self4.m22 * homogenousX.z ) ) + ( self4.m32 * homogenousX.w ) ), ( ( ( ( self4.m03 * homogenousX.x ) + ( self4.m13 * homogenousX.y ) ) + ( self4.m23 * homogenousX.z ) ) + ( self4.m33 * homogenousX.w ) ));
			//line 127 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default b2 = ((hxmath.math.Vector4Default) (this11) );
			//line 127 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default this12 = new hxmath.math.Vector4Default(a2.x, a2.y, a2.z, a2.w);
			//line 127 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default self7 = ((hxmath.math.Vector4Default) (this12) );
			//line 127 "/shared/hxmath/test/Test3D.hx"
			self7.x -= b2.x;
			//line 127 "/shared/hxmath/test/Test3D.hx"
			self7.y -= b2.y;
			//line 127 "/shared/hxmath/test/Test3D.hx"
			self7.z -= b2.z;
			//line 127 "/shared/hxmath/test/Test3D.hx"
			self7.w -= b2.w;
			//line 127 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default self8 = ((hxmath.math.Vector4Default) (self7) );
			//line 127 "/shared/hxmath/test/Test3D.hx"
			this.assertApproxEquals(0.0, ( ( ( ( self8.x * self8.x ) + ( self8.y * self8.y ) ) + ( self8.z * self8.z ) ) + ( self8.w * self8.w ) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testMatrixFrameInverse"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (127) )) )}));
			//line 128 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default this13 = new hxmath.math.Vector4Default(( ( ( ( invFrameMatrix.m00 * homogenousY.x ) + ( invFrameMatrix.m10 * homogenousY.y ) ) + ( invFrameMatrix.m20 * homogenousY.z ) ) + ( invFrameMatrix.m30 * homogenousY.w ) ), ( ( ( ( invFrameMatrix.m01 * homogenousY.x ) + ( invFrameMatrix.m11 * homogenousY.y ) ) + ( invFrameMatrix.m21 * homogenousY.z ) ) + ( invFrameMatrix.m31 * homogenousY.w ) ), ( ( ( ( invFrameMatrix.m02 * homogenousY.x ) + ( invFrameMatrix.m12 * homogenousY.y ) ) + ( invFrameMatrix.m22 * homogenousY.z ) ) + ( invFrameMatrix.m32 * homogenousY.w ) ), ( ( ( ( invFrameMatrix.m03 * homogenousY.x ) + ( invFrameMatrix.m13 * homogenousY.y ) ) + ( invFrameMatrix.m23 * homogenousY.z ) ) + ( invFrameMatrix.m33 * homogenousY.w ) ));
			//line 128 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default a3 = ((hxmath.math.Vector4Default) (this13) );
			//line 128 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default this14 = new hxmath.math.Vector4Default(( ( ( ( self4.m00 * homogenousY.x ) + ( self4.m10 * homogenousY.y ) ) + ( self4.m20 * homogenousY.z ) ) + ( self4.m30 * homogenousY.w ) ), ( ( ( ( self4.m01 * homogenousY.x ) + ( self4.m11 * homogenousY.y ) ) + ( self4.m21 * homogenousY.z ) ) + ( self4.m31 * homogenousY.w ) ), ( ( ( ( self4.m02 * homogenousY.x ) + ( self4.m12 * homogenousY.y ) ) + ( self4.m22 * homogenousY.z ) ) + ( self4.m32 * homogenousY.w ) ), ( ( ( ( self4.m03 * homogenousY.x ) + ( self4.m13 * homogenousY.y ) ) + ( self4.m23 * homogenousY.z ) ) + ( self4.m33 * homogenousY.w ) ));
			//line 128 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default b3 = ((hxmath.math.Vector4Default) (this14) );
			//line 128 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default this15 = new hxmath.math.Vector4Default(a3.x, a3.y, a3.z, a3.w);
			//line 128 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default self9 = ((hxmath.math.Vector4Default) (this15) );
			//line 128 "/shared/hxmath/test/Test3D.hx"
			self9.x -= b3.x;
			//line 128 "/shared/hxmath/test/Test3D.hx"
			self9.y -= b3.y;
			//line 128 "/shared/hxmath/test/Test3D.hx"
			self9.z -= b3.z;
			//line 128 "/shared/hxmath/test/Test3D.hx"
			self9.w -= b3.w;
			//line 128 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default self10 = ((hxmath.math.Vector4Default) (self9) );
			//line 128 "/shared/hxmath/test/Test3D.hx"
			this.assertApproxEquals(0.0, ( ( ( ( self10.x * self10.x ) + ( self10.y * self10.y ) ) + ( self10.z * self10.z ) ) + ( self10.w * self10.w ) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testMatrixFrameInverse"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (128) )) )}));
			//line 129 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default this16 = new hxmath.math.Vector4Default(( ( ( ( invFrameMatrix.m00 * homogenousZ.x ) + ( invFrameMatrix.m10 * homogenousZ.y ) ) + ( invFrameMatrix.m20 * homogenousZ.z ) ) + ( invFrameMatrix.m30 * homogenousZ.w ) ), ( ( ( ( invFrameMatrix.m01 * homogenousZ.x ) + ( invFrameMatrix.m11 * homogenousZ.y ) ) + ( invFrameMatrix.m21 * homogenousZ.z ) ) + ( invFrameMatrix.m31 * homogenousZ.w ) ), ( ( ( ( invFrameMatrix.m02 * homogenousZ.x ) + ( invFrameMatrix.m12 * homogenousZ.y ) ) + ( invFrameMatrix.m22 * homogenousZ.z ) ) + ( invFrameMatrix.m32 * homogenousZ.w ) ), ( ( ( ( invFrameMatrix.m03 * homogenousZ.x ) + ( invFrameMatrix.m13 * homogenousZ.y ) ) + ( invFrameMatrix.m23 * homogenousZ.z ) ) + ( invFrameMatrix.m33 * homogenousZ.w ) ));
			//line 129 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default a4 = ((hxmath.math.Vector4Default) (this16) );
			//line 129 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default this17 = new hxmath.math.Vector4Default(( ( ( ( self4.m00 * homogenousZ.x ) + ( self4.m10 * homogenousZ.y ) ) + ( self4.m20 * homogenousZ.z ) ) + ( self4.m30 * homogenousZ.w ) ), ( ( ( ( self4.m01 * homogenousZ.x ) + ( self4.m11 * homogenousZ.y ) ) + ( self4.m21 * homogenousZ.z ) ) + ( self4.m31 * homogenousZ.w ) ), ( ( ( ( self4.m02 * homogenousZ.x ) + ( self4.m12 * homogenousZ.y ) ) + ( self4.m22 * homogenousZ.z ) ) + ( self4.m32 * homogenousZ.w ) ), ( ( ( ( self4.m03 * homogenousZ.x ) + ( self4.m13 * homogenousZ.y ) ) + ( self4.m23 * homogenousZ.z ) ) + ( self4.m33 * homogenousZ.w ) ));
			//line 129 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default b4 = ((hxmath.math.Vector4Default) (this17) );
			//line 129 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default this18 = new hxmath.math.Vector4Default(a4.x, a4.y, a4.z, a4.w);
			//line 129 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default self11 = ((hxmath.math.Vector4Default) (this18) );
			//line 129 "/shared/hxmath/test/Test3D.hx"
			self11.x -= b4.x;
			//line 129 "/shared/hxmath/test/Test3D.hx"
			self11.y -= b4.y;
			//line 129 "/shared/hxmath/test/Test3D.hx"
			self11.z -= b4.z;
			//line 129 "/shared/hxmath/test/Test3D.hx"
			self11.w -= b4.w;
			//line 129 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector4Default self12 = ((hxmath.math.Vector4Default) (self11) );
			//line 129 "/shared/hxmath/test/Test3D.hx"
			this.assertApproxEquals(0.0, ( ( ( ( self12.x * self12.x ) + ( self12.y * self12.y ) ) + ( self12.z * self12.z ) ) + ( self12.w * self12.w ) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testMatrixFrameInverse"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (129) )) )}));
		}
		
	}
	
	
	public void testQuaternionInverse()
	{
		//line 135 "/shared/hxmath/test/Test3D.hx"
		int _g = 0;
		//line 135 "/shared/hxmath/test/Test3D.hx"
		while (( _g < 10 ))
		{
			//line 135 "/shared/hxmath/test/Test3D.hx"
			 ++ _g;
			//line 137 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.QuaternionDefault self = ((hxmath.math.QuaternionDefault) (this.randomQuaternion(null)) );
			//line 137 "/shared/hxmath/test/Test3D.hx"
			double _g1 = ( 1.0 / java.lang.Math.sqrt(( ( ( ( self.s * self.s ) + ( self.x * self.x ) ) + ( self.y * self.y ) ) + ( self.z * self.z ) )) );
			//line 137 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.QuaternionDefault this1 = new hxmath.math.QuaternionDefault(self.s, self.x, self.y, self.z);
			//line 137 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.QuaternionDefault self1 = ((hxmath.math.QuaternionDefault) (this1) );
			//line 137 "/shared/hxmath/test/Test3D.hx"
			self1.s *= _g1;
			//line 137 "/shared/hxmath/test/Test3D.hx"
			self1.x *= _g1;
			//line 137 "/shared/hxmath/test/Test3D.hx"
			self1.y *= _g1;
			//line 137 "/shared/hxmath/test/Test3D.hx"
			self1.z *= _g1;
			//line 138 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.QuaternionDefault this2 = new hxmath.math.QuaternionDefault(self1.s, self1.x, self1.y, self1.z);
			//line 138 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.QuaternionDefault self2 = ((hxmath.math.QuaternionDefault) (this2) );
			//line 138 "/shared/hxmath/test/Test3D.hx"
			self2.x =  - (self2.x) ;
			//line 138 "/shared/hxmath/test/Test3D.hx"
			self2.y =  - (self2.y) ;
			//line 138 "/shared/hxmath/test/Test3D.hx"
			self2.z =  - (self2.z) ;
			//line 140 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.QuaternionDefault this3 = new hxmath.math.QuaternionDefault(( ( ( ( self1.s * self2.s ) - ( self1.x * self2.x ) ) - ( self1.y * self2.y ) ) - ( self1.z * self2.z ) ), ( ( ( ( self1.s * self2.x ) + ( self2.s * self1.x ) ) + ( self1.y * self2.z ) ) - ( self1.z * self2.y ) ), ( ( ( ( self1.s * self2.y ) + ( self2.s * self1.y ) ) + ( self1.z * self2.x ) ) - ( self1.x * self2.z ) ), ( ( ( ( self1.s * self2.z ) + ( self2.s * self1.z ) ) + ( self1.x * self2.y ) ) - ( self1.y * self2.x ) ));
			//line 140 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.QuaternionDefault p = ((hxmath.math.QuaternionDefault) (this3) );
			//line 142 "/shared/hxmath/test/Test3D.hx"
			this.assertApproxEquals(1.0, p.s, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testQuaternionInverse"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (142) )) )}));
			//line 143 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector3Default this4 = new hxmath.math.Vector3Default(p.x, p.y, p.z);
			//line 143 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector3Default self3 = ((hxmath.math.Vector3Default) (this4) );
			//line 143 "/shared/hxmath/test/Test3D.hx"
			this.assertApproxEquals(0.0, java.lang.Math.sqrt(( ( ( self3.x * self3.x ) + ( self3.y * self3.y ) ) + ( self3.z * self3.z ) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testQuaternionInverse"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (143) )) )}));
		}
		
	}
	
	
	public void testOrthoNormalize()
	{
		//line 149 "/shared/hxmath/test/Test3D.hx"
		int _g = 0;
		//line 149 "/shared/hxmath/test/Test3D.hx"
		while (( _g < 10 ))
		{
			//line 149 "/shared/hxmath/test/Test3D.hx"
			 ++ _g;
			//line 151 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector3Default u = this.randomVector3(null);
			//line 152 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector3Default v = this.randomVector3(null);
			//line 153 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector3Default w = this.randomVector3(null);
			//line 155 "/shared/hxmath/test/Test3D.hx"
			{
				//line 155 "/shared/hxmath/test/Test3D.hx"
				{
					//line 155 "/shared/hxmath/test/Test3D.hx"
					double length = java.lang.Math.sqrt(( ( ( u.x * u.x ) + ( u.y * u.y ) ) + ( u.z * u.z ) ));
					//line 155 "/shared/hxmath/test/Test3D.hx"
					if (( length > 0.0 )) 
					{
						//line 155 "/shared/hxmath/test/Test3D.hx"
						u.x /= length;
						//line 155 "/shared/hxmath/test/Test3D.hx"
						u.y /= length;
						//line 155 "/shared/hxmath/test/Test3D.hx"
						u.z /= length;
					}
					
				}
				
				//line 155 "/shared/hxmath/test/Test3D.hx"
				{
					//line 155 "/shared/hxmath/test/Test3D.hx"
					hxmath.math.Vector3Default this1 = new hxmath.math.Vector3Default(v.x, v.y, v.z);
					//line 155 "/shared/hxmath/test/Test3D.hx"
					hxmath.math.Vector3Default self = ((hxmath.math.Vector3Default) (this1) );
					//line 155 "/shared/hxmath/test/Test3D.hx"
					double s = ( (( ( ( self.x * u.x ) + ( self.y * u.y ) ) + ( self.z * u.z ) )) / (( ( ( u.x * u.x ) + ( u.y * u.y ) ) + ( u.z * u.z ) )) );
					//line 155 "/shared/hxmath/test/Test3D.hx"
					{
						//line 155 "/shared/hxmath/test/Test3D.hx"
						int _g1 = 0;
						//line 155 "/shared/hxmath/test/Test3D.hx"
						while (( _g1 < 3 ))
						{
							//line 155 "/shared/hxmath/test/Test3D.hx"
							int i = _g1++;
							//line 155 "/shared/hxmath/test/Test3D.hx"
							{
								//line 155 "/shared/hxmath/test/Test3D.hx"
								java.lang.Object tmp = null;
								//line 155 "/shared/hxmath/test/Test3D.hx"
								switch (i)
								{
									case 0:
									{
										//line 155 "/shared/hxmath/test/Test3D.hx"
										tmp = u.x;
										//line 155 "/shared/hxmath/test/Test3D.hx"
										break;
									}
									
									
									case 1:
									{
										//line 155 "/shared/hxmath/test/Test3D.hx"
										tmp = u.y;
										//line 155 "/shared/hxmath/test/Test3D.hx"
										break;
									}
									
									
									case 2:
									{
										//line 155 "/shared/hxmath/test/Test3D.hx"
										tmp = u.z;
										//line 155 "/shared/hxmath/test/Test3D.hx"
										break;
									}
									
									
									default:
									{
										//line 155 "/shared/hxmath/test/Test3D.hx"
										throw haxe.lang.HaxeException.wrap("Invalid element");
									}
									
								}
								
								//line 155 "/shared/hxmath/test/Test3D.hx"
								double value = ((double) (haxe.lang.Runtime.toDouble(tmp)) );
								//line 155 "/shared/hxmath/test/Test3D.hx"
								switch (i)
								{
									case 0:
									{
										//line 155 "/shared/hxmath/test/Test3D.hx"
										self.x = value;
										//line 155 "/shared/hxmath/test/Test3D.hx"
										break;
									}
									
									
									case 1:
									{
										//line 155 "/shared/hxmath/test/Test3D.hx"
										self.y = value;
										//line 155 "/shared/hxmath/test/Test3D.hx"
										break;
									}
									
									
									case 2:
									{
										//line 155 "/shared/hxmath/test/Test3D.hx"
										self.z = value;
										//line 155 "/shared/hxmath/test/Test3D.hx"
										break;
									}
									
									
									default:
									{
										//line 155 "/shared/hxmath/test/Test3D.hx"
										throw haxe.lang.HaxeException.wrap("Invalid element");
									}
									
								}
								
							}
							
						}
						
					}
					
					//line 155 "/shared/hxmath/test/Test3D.hx"
					{
						//line 155 "/shared/hxmath/test/Test3D.hx"
						self.x *= s;
						//line 155 "/shared/hxmath/test/Test3D.hx"
						self.y *= s;
						//line 155 "/shared/hxmath/test/Test3D.hx"
						self.z *= s;
					}
					
					//line 155 "/shared/hxmath/test/Test3D.hx"
					v.x -= self.x;
					//line 155 "/shared/hxmath/test/Test3D.hx"
					v.y -= self.y;
					//line 155 "/shared/hxmath/test/Test3D.hx"
					v.z -= self.z;
				}
				
				//line 155 "/shared/hxmath/test/Test3D.hx"
				{
					//line 155 "/shared/hxmath/test/Test3D.hx"
					double length1 = java.lang.Math.sqrt(( ( ( v.x * v.x ) + ( v.y * v.y ) ) + ( v.z * v.z ) ));
					//line 155 "/shared/hxmath/test/Test3D.hx"
					if (( length1 > 0.0 )) 
					{
						//line 155 "/shared/hxmath/test/Test3D.hx"
						v.x /= length1;
						//line 155 "/shared/hxmath/test/Test3D.hx"
						v.y /= length1;
						//line 155 "/shared/hxmath/test/Test3D.hx"
						v.z /= length1;
					}
					
				}
				
				//line 155 "/shared/hxmath/test/Test3D.hx"
				{
					//line 155 "/shared/hxmath/test/Test3D.hx"
					hxmath.math.Vector3Default this2 = new hxmath.math.Vector3Default(w.x, w.y, w.z);
					//line 155 "/shared/hxmath/test/Test3D.hx"
					hxmath.math.Vector3Default self1 = ((hxmath.math.Vector3Default) (this2) );
					//line 155 "/shared/hxmath/test/Test3D.hx"
					double s1 = ( (( ( ( self1.x * u.x ) + ( self1.y * u.y ) ) + ( self1.z * u.z ) )) / (( ( ( u.x * u.x ) + ( u.y * u.y ) ) + ( u.z * u.z ) )) );
					//line 155 "/shared/hxmath/test/Test3D.hx"
					{
						//line 155 "/shared/hxmath/test/Test3D.hx"
						int _g2 = 0;
						//line 155 "/shared/hxmath/test/Test3D.hx"
						while (( _g2 < 3 ))
						{
							//line 155 "/shared/hxmath/test/Test3D.hx"
							int i1 = _g2++;
							//line 155 "/shared/hxmath/test/Test3D.hx"
							{
								//line 155 "/shared/hxmath/test/Test3D.hx"
								java.lang.Object tmp1 = null;
								//line 155 "/shared/hxmath/test/Test3D.hx"
								switch (i1)
								{
									case 0:
									{
										//line 155 "/shared/hxmath/test/Test3D.hx"
										tmp1 = u.x;
										//line 155 "/shared/hxmath/test/Test3D.hx"
										break;
									}
									
									
									case 1:
									{
										//line 155 "/shared/hxmath/test/Test3D.hx"
										tmp1 = u.y;
										//line 155 "/shared/hxmath/test/Test3D.hx"
										break;
									}
									
									
									case 2:
									{
										//line 155 "/shared/hxmath/test/Test3D.hx"
										tmp1 = u.z;
										//line 155 "/shared/hxmath/test/Test3D.hx"
										break;
									}
									
									
									default:
									{
										//line 155 "/shared/hxmath/test/Test3D.hx"
										throw haxe.lang.HaxeException.wrap("Invalid element");
									}
									
								}
								
								//line 155 "/shared/hxmath/test/Test3D.hx"
								double value1 = ((double) (haxe.lang.Runtime.toDouble(tmp1)) );
								//line 155 "/shared/hxmath/test/Test3D.hx"
								switch (i1)
								{
									case 0:
									{
										//line 155 "/shared/hxmath/test/Test3D.hx"
										self1.x = value1;
										//line 155 "/shared/hxmath/test/Test3D.hx"
										break;
									}
									
									
									case 1:
									{
										//line 155 "/shared/hxmath/test/Test3D.hx"
										self1.y = value1;
										//line 155 "/shared/hxmath/test/Test3D.hx"
										break;
									}
									
									
									case 2:
									{
										//line 155 "/shared/hxmath/test/Test3D.hx"
										self1.z = value1;
										//line 155 "/shared/hxmath/test/Test3D.hx"
										break;
									}
									
									
									default:
									{
										//line 155 "/shared/hxmath/test/Test3D.hx"
										throw haxe.lang.HaxeException.wrap("Invalid element");
									}
									
								}
								
							}
							
						}
						
					}
					
					//line 155 "/shared/hxmath/test/Test3D.hx"
					{
						//line 155 "/shared/hxmath/test/Test3D.hx"
						self1.x *= s1;
						//line 155 "/shared/hxmath/test/Test3D.hx"
						self1.y *= s1;
						//line 155 "/shared/hxmath/test/Test3D.hx"
						self1.z *= s1;
					}
					
					//line 155 "/shared/hxmath/test/Test3D.hx"
					w.x -= self1.x;
					//line 155 "/shared/hxmath/test/Test3D.hx"
					w.y -= self1.y;
					//line 155 "/shared/hxmath/test/Test3D.hx"
					w.z -= self1.z;
				}
				
				//line 155 "/shared/hxmath/test/Test3D.hx"
				{
					//line 155 "/shared/hxmath/test/Test3D.hx"
					hxmath.math.Vector3Default this3 = new hxmath.math.Vector3Default(w.x, w.y, w.z);
					//line 155 "/shared/hxmath/test/Test3D.hx"
					hxmath.math.Vector3Default self2 = ((hxmath.math.Vector3Default) (this3) );
					//line 155 "/shared/hxmath/test/Test3D.hx"
					double s2 = ( (( ( ( self2.x * v.x ) + ( self2.y * v.y ) ) + ( self2.z * v.z ) )) / (( ( ( v.x * v.x ) + ( v.y * v.y ) ) + ( v.z * v.z ) )) );
					//line 155 "/shared/hxmath/test/Test3D.hx"
					{
						//line 155 "/shared/hxmath/test/Test3D.hx"
						int _g3 = 0;
						//line 155 "/shared/hxmath/test/Test3D.hx"
						while (( _g3 < 3 ))
						{
							//line 155 "/shared/hxmath/test/Test3D.hx"
							int i2 = _g3++;
							//line 155 "/shared/hxmath/test/Test3D.hx"
							{
								//line 155 "/shared/hxmath/test/Test3D.hx"
								java.lang.Object tmp2 = null;
								//line 155 "/shared/hxmath/test/Test3D.hx"
								switch (i2)
								{
									case 0:
									{
										//line 155 "/shared/hxmath/test/Test3D.hx"
										tmp2 = v.x;
										//line 155 "/shared/hxmath/test/Test3D.hx"
										break;
									}
									
									
									case 1:
									{
										//line 155 "/shared/hxmath/test/Test3D.hx"
										tmp2 = v.y;
										//line 155 "/shared/hxmath/test/Test3D.hx"
										break;
									}
									
									
									case 2:
									{
										//line 155 "/shared/hxmath/test/Test3D.hx"
										tmp2 = v.z;
										//line 155 "/shared/hxmath/test/Test3D.hx"
										break;
									}
									
									
									default:
									{
										//line 155 "/shared/hxmath/test/Test3D.hx"
										throw haxe.lang.HaxeException.wrap("Invalid element");
									}
									
								}
								
								//line 155 "/shared/hxmath/test/Test3D.hx"
								double value2 = ((double) (haxe.lang.Runtime.toDouble(tmp2)) );
								//line 155 "/shared/hxmath/test/Test3D.hx"
								switch (i2)
								{
									case 0:
									{
										//line 155 "/shared/hxmath/test/Test3D.hx"
										self2.x = value2;
										//line 155 "/shared/hxmath/test/Test3D.hx"
										break;
									}
									
									
									case 1:
									{
										//line 155 "/shared/hxmath/test/Test3D.hx"
										self2.y = value2;
										//line 155 "/shared/hxmath/test/Test3D.hx"
										break;
									}
									
									
									case 2:
									{
										//line 155 "/shared/hxmath/test/Test3D.hx"
										self2.z = value2;
										//line 155 "/shared/hxmath/test/Test3D.hx"
										break;
									}
									
									
									default:
									{
										//line 155 "/shared/hxmath/test/Test3D.hx"
										throw haxe.lang.HaxeException.wrap("Invalid element");
									}
									
								}
								
							}
							
						}
						
					}
					
					//line 155 "/shared/hxmath/test/Test3D.hx"
					{
						//line 155 "/shared/hxmath/test/Test3D.hx"
						self2.x *= s2;
						//line 155 "/shared/hxmath/test/Test3D.hx"
						self2.y *= s2;
						//line 155 "/shared/hxmath/test/Test3D.hx"
						self2.z *= s2;
					}
					
					//line 155 "/shared/hxmath/test/Test3D.hx"
					w.x -= self2.x;
					//line 155 "/shared/hxmath/test/Test3D.hx"
					w.y -= self2.y;
					//line 155 "/shared/hxmath/test/Test3D.hx"
					w.z -= self2.z;
				}
				
				//line 155 "/shared/hxmath/test/Test3D.hx"
				{
					//line 155 "/shared/hxmath/test/Test3D.hx"
					double length2 = java.lang.Math.sqrt(( ( ( w.x * w.x ) + ( w.y * w.y ) ) + ( w.z * w.z ) ));
					//line 155 "/shared/hxmath/test/Test3D.hx"
					if (( length2 > 0.0 )) 
					{
						//line 155 "/shared/hxmath/test/Test3D.hx"
						w.x /= length2;
						//line 155 "/shared/hxmath/test/Test3D.hx"
						w.y /= length2;
						//line 155 "/shared/hxmath/test/Test3D.hx"
						w.z /= length2;
					}
					
				}
				
			}
			
			//line 157 "/shared/hxmath/test/Test3D.hx"
			this.assertApproxEquals(1.0, java.lang.Math.sqrt(( ( ( u.x * u.x ) + ( u.y * u.y ) ) + ( u.z * u.z ) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testOrthoNormalize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (157) )) )}));
			//line 158 "/shared/hxmath/test/Test3D.hx"
			this.assertApproxEquals(1.0, java.lang.Math.sqrt(( ( ( v.x * v.x ) + ( v.y * v.y ) ) + ( v.z * v.z ) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testOrthoNormalize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (158) )) )}));
			//line 159 "/shared/hxmath/test/Test3D.hx"
			this.assertApproxEquals(1.0, java.lang.Math.sqrt(( ( ( w.x * w.x ) + ( w.y * w.y ) ) + ( w.z * w.z ) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testOrthoNormalize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (159) )) )}));
			//line 160 "/shared/hxmath/test/Test3D.hx"
			this.assertApproxEquals(0.0, ( ( ( u.x * v.x ) + ( u.y * v.y ) ) + ( u.z * v.z ) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testOrthoNormalize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (160) )) )}));
			//line 161 "/shared/hxmath/test/Test3D.hx"
			this.assertApproxEquals(0.0, ( ( ( u.x * w.x ) + ( u.y * w.y ) ) + ( u.z * w.z ) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testOrthoNormalize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (161) )) )}));
			//line 162 "/shared/hxmath/test/Test3D.hx"
			this.assertApproxEquals(0.0, ( ( ( v.x * w.x ) + ( v.y * w.y ) ) + ( v.z * w.z ) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testOrthoNormalize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (162) )) )}));
			//line 164 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector3Default this4 = new hxmath.math.Vector3Default(u.x, u.y, u.z);
			//line 164 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector3Default self3 = ((hxmath.math.Vector3Default) (this4) );
			//line 164 "/shared/hxmath/test/Test3D.hx"
			double newX = ( ( self3.y * v.z ) - ( self3.z * v.y ) );
			//line 164 "/shared/hxmath/test/Test3D.hx"
			double newY = ( ( self3.z * v.x ) - ( self3.x * v.z ) );
			//line 164 "/shared/hxmath/test/Test3D.hx"
			double newZ = ( ( self3.x * v.y ) - ( self3.y * v.x ) );
			//line 164 "/shared/hxmath/test/Test3D.hx"
			self3.x = newX;
			//line 164 "/shared/hxmath/test/Test3D.hx"
			self3.y = newY;
			//line 164 "/shared/hxmath/test/Test3D.hx"
			self3.z = newZ;
			//line 164 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector3Default this5 = new hxmath.math.Vector3Default(self3.x, self3.y, self3.z);
			//line 164 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector3Default self4 = ((hxmath.math.Vector3Default) (this5) );
			//line 164 "/shared/hxmath/test/Test3D.hx"
			double newX1 = ( ( self4.y * w.z ) - ( self4.z * w.y ) );
			//line 164 "/shared/hxmath/test/Test3D.hx"
			double newY1 = ( ( self4.z * w.x ) - ( self4.x * w.z ) );
			//line 164 "/shared/hxmath/test/Test3D.hx"
			double newZ1 = ( ( self4.x * w.y ) - ( self4.y * w.x ) );
			//line 164 "/shared/hxmath/test/Test3D.hx"
			self4.x = newX1;
			//line 164 "/shared/hxmath/test/Test3D.hx"
			self4.y = newY1;
			//line 164 "/shared/hxmath/test/Test3D.hx"
			self4.z = newZ1;
			//line 164 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector3Default self5 = ((hxmath.math.Vector3Default) (self4) );
			//line 164 "/shared/hxmath/test/Test3D.hx"
			this.assertApproxEquals(0.0, java.lang.Math.sqrt(( ( ( self5.x * self5.x ) + ( self5.y * self5.y ) ) + ( self5.z * self5.z ) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testOrthoNormalize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (164) )) )}));
		}
		
	}
	
	
	public void testAngles()
	{
		//line 170 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this1 = new hxmath.math.Vector3Default(1.0, 0.0, 0.0);
		//line 170 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this2 = new hxmath.math.Vector3Default(0.0, 1.0, 0.0);
		//line 170 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default b = ((hxmath.math.Vector3Default) (this2) );
		//line 170 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default self = ((hxmath.math.Vector3Default) (this1) );
		//line 170 "/shared/hxmath/test/Test3D.hx"
		this.assertApproxEquals(java.lang.Math.acos(( (( ( ( self.x * b.x ) + ( self.y * b.y ) ) + ( self.z * b.z ) )) / (( java.lang.Math.sqrt(( ( ( self.x * self.x ) + ( self.y * self.y ) ) + ( self.z * self.z ) )) * java.lang.Math.sqrt(( ( ( b.x * b.x ) + ( b.y * b.y ) ) + ( b.z * b.z ) )) )) )), ( java.lang.Math.PI / 2.0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testAngles"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (170) )) )}));
		//line 171 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this3 = new hxmath.math.Vector3Default(1.0, 0.0, 0.0);
		//line 171 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this4 = new hxmath.math.Vector3Default(0.0, 0.0, 1.0);
		//line 171 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default b1 = ((hxmath.math.Vector3Default) (this4) );
		//line 171 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default self1 = ((hxmath.math.Vector3Default) (this3) );
		//line 171 "/shared/hxmath/test/Test3D.hx"
		this.assertApproxEquals(java.lang.Math.acos(( (( ( ( self1.x * b1.x ) + ( self1.y * b1.y ) ) + ( self1.z * b1.z ) )) / (( java.lang.Math.sqrt(( ( ( self1.x * self1.x ) + ( self1.y * self1.y ) ) + ( self1.z * self1.z ) )) * java.lang.Math.sqrt(( ( ( b1.x * b1.x ) + ( b1.y * b1.y ) ) + ( b1.z * b1.z ) )) )) )), ( java.lang.Math.PI / 2.0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testAngles"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (171) )) )}));
		//line 172 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this5 = new hxmath.math.Vector3Default(0.0, 1.0, 0.0);
		//line 172 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this6 = new hxmath.math.Vector3Default(0.0, 0.0, 1.0);
		//line 172 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default b2 = ((hxmath.math.Vector3Default) (this6) );
		//line 172 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default self2 = ((hxmath.math.Vector3Default) (this5) );
		//line 172 "/shared/hxmath/test/Test3D.hx"
		this.assertApproxEquals(java.lang.Math.acos(( (( ( ( self2.x * b2.x ) + ( self2.y * b2.y ) ) + ( self2.z * b2.z ) )) / (( java.lang.Math.sqrt(( ( ( self2.x * self2.x ) + ( self2.y * self2.y ) ) + ( self2.z * self2.z ) )) * java.lang.Math.sqrt(( ( ( b2.x * b2.x ) + ( b2.y * b2.y ) ) + ( b2.z * b2.z ) )) )) )), ( java.lang.Math.PI / 2.0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testAngles"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (172) )) )}));
	}
	
	
	public void testReflect()
	{
		//line 177 "/shared/hxmath/test/Test3D.hx"
		int _g = 0;
		//line 177 "/shared/hxmath/test/Test3D.hx"
		while (( _g < 10 ))
		{
			//line 177 "/shared/hxmath/test/Test3D.hx"
			 ++ _g;
			//line 179 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector3Default u = this.randomVector3(null);
			//line 180 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector3Default this1 = new hxmath.math.Vector3Default(0.0, 0.0, 1.0);
			//line 180 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector3Default normal = ((hxmath.math.Vector3Default) (this1) );
			//line 180 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector3Default this2 = new hxmath.math.Vector3Default(u.x, u.y, u.z);
			//line 180 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector3Default self = ((hxmath.math.Vector3Default) (this2) );
			//line 180 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector3Default this3 = new hxmath.math.Vector3Default(self.x, self.y, self.z);
			//line 180 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector3Default self1 = ((hxmath.math.Vector3Default) (this3) );
			//line 180 "/shared/hxmath/test/Test3D.hx"
			double s = ( (( ( ( self1.x * normal.x ) + ( self1.y * normal.y ) ) + ( self1.z * normal.z ) )) / (( ( ( normal.x * normal.x ) + ( normal.y * normal.y ) ) + ( normal.z * normal.z ) )) );
			//line 180 "/shared/hxmath/test/Test3D.hx"
			{
				//line 180 "/shared/hxmath/test/Test3D.hx"
				int _g1 = 0;
				//line 180 "/shared/hxmath/test/Test3D.hx"
				while (( _g1 < 3 ))
				{
					//line 180 "/shared/hxmath/test/Test3D.hx"
					int i = _g1++;
					//line 180 "/shared/hxmath/test/Test3D.hx"
					{
						//line 180 "/shared/hxmath/test/Test3D.hx"
						java.lang.Object tmp = null;
						//line 180 "/shared/hxmath/test/Test3D.hx"
						switch (i)
						{
							case 0:
							{
								//line 180 "/shared/hxmath/test/Test3D.hx"
								tmp = normal.x;
								//line 180 "/shared/hxmath/test/Test3D.hx"
								break;
							}
							
							
							case 1:
							{
								//line 180 "/shared/hxmath/test/Test3D.hx"
								tmp = normal.y;
								//line 180 "/shared/hxmath/test/Test3D.hx"
								break;
							}
							
							
							case 2:
							{
								//line 180 "/shared/hxmath/test/Test3D.hx"
								tmp = normal.z;
								//line 180 "/shared/hxmath/test/Test3D.hx"
								break;
							}
							
							
							default:
							{
								//line 180 "/shared/hxmath/test/Test3D.hx"
								throw haxe.lang.HaxeException.wrap("Invalid element");
							}
							
						}
						
						//line 180 "/shared/hxmath/test/Test3D.hx"
						double value = ((double) (haxe.lang.Runtime.toDouble(tmp)) );
						//line 180 "/shared/hxmath/test/Test3D.hx"
						switch (i)
						{
							case 0:
							{
								//line 180 "/shared/hxmath/test/Test3D.hx"
								self1.x = value;
								//line 180 "/shared/hxmath/test/Test3D.hx"
								break;
							}
							
							
							case 1:
							{
								//line 180 "/shared/hxmath/test/Test3D.hx"
								self1.y = value;
								//line 180 "/shared/hxmath/test/Test3D.hx"
								break;
							}
							
							
							case 2:
							{
								//line 180 "/shared/hxmath/test/Test3D.hx"
								self1.z = value;
								//line 180 "/shared/hxmath/test/Test3D.hx"
								break;
							}
							
							
							default:
							{
								//line 180 "/shared/hxmath/test/Test3D.hx"
								throw haxe.lang.HaxeException.wrap("Invalid element");
							}
							
						}
						
					}
					
				}
				
			}
			
			//line 180 "/shared/hxmath/test/Test3D.hx"
			{
				//line 180 "/shared/hxmath/test/Test3D.hx"
				self1.x *= s;
				//line 180 "/shared/hxmath/test/Test3D.hx"
				self1.y *= s;
				//line 180 "/shared/hxmath/test/Test3D.hx"
				self1.z *= s;
			}
			
			//line 180 "/shared/hxmath/test/Test3D.hx"
			{
				//line 180 "/shared/hxmath/test/Test3D.hx"
				self1.x *= 2.0;
				//line 180 "/shared/hxmath/test/Test3D.hx"
				self1.y *= 2.0;
				//line 180 "/shared/hxmath/test/Test3D.hx"
				self1.z *= 2.0;
			}
			
			//line 180 "/shared/hxmath/test/Test3D.hx"
			{
				//line 180 "/shared/hxmath/test/Test3D.hx"
				self.x -= self1.x;
				//line 180 "/shared/hxmath/test/Test3D.hx"
				self.y -= self1.y;
				//line 180 "/shared/hxmath/test/Test3D.hx"
				self.z -= self1.z;
			}
			
			//line 182 "/shared/hxmath/test/Test3D.hx"
			this.assertEquals(((java.lang.Object) (u.x) ), ((java.lang.Object) (self.x) ), ((java.lang.Object) (new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testReflect"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (182) )) )})) ));
			//line 183 "/shared/hxmath/test/Test3D.hx"
			this.assertEquals(((java.lang.Object) (u.y) ), ((java.lang.Object) (self.y) ), ((java.lang.Object) (new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testReflect"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (183) )) )})) ));
			//line 184 "/shared/hxmath/test/Test3D.hx"
			this.assertEquals(((java.lang.Object) ( - (u.z) ) ), ((java.lang.Object) (self.z) ), ((java.lang.Object) (new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testReflect"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (184) )) )})) ));
		}
		
	}
	
	
	public void testProjectOntoPlane()
	{
		//line 190 "/shared/hxmath/test/Test3D.hx"
		int _g = 0;
		//line 190 "/shared/hxmath/test/Test3D.hx"
		while (( _g < 10 ))
		{
			//line 190 "/shared/hxmath/test/Test3D.hx"
			 ++ _g;
			//line 192 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector3Default u = this.randomVector3(null);
			//line 193 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.Vector3Default normal = this.randomVector3(null);
			//line 195 "/shared/hxmath/test/Test3D.hx"
			{
				//line 195 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.Vector3Default this1 = new hxmath.math.Vector3Default(u.x, u.y, u.z);
				//line 195 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.Vector3Default self = ((hxmath.math.Vector3Default) (this1) );
				//line 195 "/shared/hxmath/test/Test3D.hx"
				double s = ( (( ( ( self.x * normal.x ) + ( self.y * normal.y ) ) + ( self.z * normal.z ) )) / (( ( ( normal.x * normal.x ) + ( normal.y * normal.y ) ) + ( normal.z * normal.z ) )) );
				//line 195 "/shared/hxmath/test/Test3D.hx"
				{
					//line 195 "/shared/hxmath/test/Test3D.hx"
					int _g1 = 0;
					//line 195 "/shared/hxmath/test/Test3D.hx"
					while (( _g1 < 3 ))
					{
						//line 195 "/shared/hxmath/test/Test3D.hx"
						int i = _g1++;
						//line 195 "/shared/hxmath/test/Test3D.hx"
						{
							//line 195 "/shared/hxmath/test/Test3D.hx"
							java.lang.Object tmp = null;
							//line 195 "/shared/hxmath/test/Test3D.hx"
							switch (i)
							{
								case 0:
								{
									//line 195 "/shared/hxmath/test/Test3D.hx"
									tmp = normal.x;
									//line 195 "/shared/hxmath/test/Test3D.hx"
									break;
								}
								
								
								case 1:
								{
									//line 195 "/shared/hxmath/test/Test3D.hx"
									tmp = normal.y;
									//line 195 "/shared/hxmath/test/Test3D.hx"
									break;
								}
								
								
								case 2:
								{
									//line 195 "/shared/hxmath/test/Test3D.hx"
									tmp = normal.z;
									//line 195 "/shared/hxmath/test/Test3D.hx"
									break;
								}
								
								
								default:
								{
									//line 195 "/shared/hxmath/test/Test3D.hx"
									throw haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
							//line 195 "/shared/hxmath/test/Test3D.hx"
							double value = ((double) (haxe.lang.Runtime.toDouble(tmp)) );
							//line 195 "/shared/hxmath/test/Test3D.hx"
							switch (i)
							{
								case 0:
								{
									//line 195 "/shared/hxmath/test/Test3D.hx"
									self.x = value;
									//line 195 "/shared/hxmath/test/Test3D.hx"
									break;
								}
								
								
								case 1:
								{
									//line 195 "/shared/hxmath/test/Test3D.hx"
									self.y = value;
									//line 195 "/shared/hxmath/test/Test3D.hx"
									break;
								}
								
								
								case 2:
								{
									//line 195 "/shared/hxmath/test/Test3D.hx"
									self.z = value;
									//line 195 "/shared/hxmath/test/Test3D.hx"
									break;
								}
								
								
								default:
								{
									//line 195 "/shared/hxmath/test/Test3D.hx"
									throw haxe.lang.HaxeException.wrap("Invalid element");
								}
								
							}
							
						}
						
					}
					
				}
				
				//line 195 "/shared/hxmath/test/Test3D.hx"
				{
					//line 195 "/shared/hxmath/test/Test3D.hx"
					self.x *= s;
					//line 195 "/shared/hxmath/test/Test3D.hx"
					self.y *= s;
					//line 195 "/shared/hxmath/test/Test3D.hx"
					self.z *= s;
				}
				
				//line 195 "/shared/hxmath/test/Test3D.hx"
				u.x -= self.x;
				//line 195 "/shared/hxmath/test/Test3D.hx"
				u.y -= self.y;
				//line 195 "/shared/hxmath/test/Test3D.hx"
				u.z -= self.z;
			}
			
			//line 197 "/shared/hxmath/test/Test3D.hx"
			this.assertApproxEquals(0.0, ( ( ( u.x * normal.x ) + ( u.y * normal.y ) ) + ( u.z * normal.z ) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testProjectOntoPlane"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (197) )) )}));
		}
		
	}
	
	
	public void testSlerpMidpointAngle()
	{
		//line 203 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this1 = new hxmath.math.Vector3Default(0.0, 0.0, 1.0);
		//line 203 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default axis = ((hxmath.math.Vector3Default) (this1) );
		//line 203 "/shared/hxmath/test/Test3D.hx"
		double angleRadians = ( ( java.lang.Math.PI / 180 ) * 0 );
		//line 203 "/shared/hxmath/test/Test3D.hx"
		double cosHalfAngle = java.lang.Math.cos(( angleRadians / 2.0 ));
		//line 203 "/shared/hxmath/test/Test3D.hx"
		double sinHalfAngle = java.lang.Math.sin(( angleRadians / 2.0 ));
		//line 203 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.QuaternionDefault this2 = new hxmath.math.QuaternionDefault(cosHalfAngle, ( sinHalfAngle * axis.x ), ( sinHalfAngle * axis.y ), ( sinHalfAngle * axis.z ));
		//line 203 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.QuaternionDefault qA = ((hxmath.math.QuaternionDefault) (this2) );
		//line 204 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this3 = new hxmath.math.Vector3Default(0.0, 0.0, 1.0);
		//line 204 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default axis1 = ((hxmath.math.Vector3Default) (this3) );
		//line 204 "/shared/hxmath/test/Test3D.hx"
		double angleRadians1 = ( ( java.lang.Math.PI / 180 ) * 90 );
		//line 204 "/shared/hxmath/test/Test3D.hx"
		double cosHalfAngle1 = java.lang.Math.cos(( angleRadians1 / 2.0 ));
		//line 204 "/shared/hxmath/test/Test3D.hx"
		double sinHalfAngle1 = java.lang.Math.sin(( angleRadians1 / 2.0 ));
		//line 204 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.QuaternionDefault this4 = new hxmath.math.QuaternionDefault(cosHalfAngle1, ( sinHalfAngle1 * axis1.x ), ( sinHalfAngle1 * axis1.y ), ( sinHalfAngle1 * axis1.z ));
		//line 204 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.QuaternionDefault qB = ((hxmath.math.QuaternionDefault) (this4) );
		//line 205 "/shared/hxmath/test/Test3D.hx"
		double cosHalfTheta = ( ( ( ( qA.s * qB.s ) + ( qA.x * qB.x ) ) + ( qA.y * qB.y ) ) + ( qA.z * qB.z ) );
		//line 205 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.QuaternionDefault qC = null;
		//line 205 "/shared/hxmath/test/Test3D.hx"
		if (( java.lang.Math.abs(cosHalfTheta) >= 1.0 )) 
		{
			//line 205 "/shared/hxmath/test/Test3D.hx"
			qC = qA;
		}
		else
		{
			//line 205 "/shared/hxmath/test/Test3D.hx"
			double halfTheta = java.lang.Math.acos(cosHalfTheta);
			//line 205 "/shared/hxmath/test/Test3D.hx"
			double sinHalfTheta = java.lang.Math.sqrt(( 1.0 - ( cosHalfTheta * cosHalfTheta ) ));
			//line 205 "/shared/hxmath/test/Test3D.hx"
			if (( java.lang.Math.abs(sinHalfTheta) < 1e-3 )) 
			{
				//line 205 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.QuaternionDefault this5 = new hxmath.math.QuaternionDefault(qA.s, qA.x, qA.y, qA.z);
				//line 205 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.QuaternionDefault self = ((hxmath.math.QuaternionDefault) (this5) );
				//line 205 "/shared/hxmath/test/Test3D.hx"
				self.s *= 0.5;
				//line 205 "/shared/hxmath/test/Test3D.hx"
				self.x *= 0.5;
				//line 205 "/shared/hxmath/test/Test3D.hx"
				self.y *= 0.5;
				//line 205 "/shared/hxmath/test/Test3D.hx"
				self.z *= 0.5;
				//line 205 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.QuaternionDefault this6 = new hxmath.math.QuaternionDefault(qB.s, qB.x, qB.y, qB.z);
				//line 205 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.QuaternionDefault self1 = ((hxmath.math.QuaternionDefault) (this6) );
				//line 205 "/shared/hxmath/test/Test3D.hx"
				self1.s *= 0.5;
				//line 205 "/shared/hxmath/test/Test3D.hx"
				self1.x *= 0.5;
				//line 205 "/shared/hxmath/test/Test3D.hx"
				self1.y *= 0.5;
				//line 205 "/shared/hxmath/test/Test3D.hx"
				self1.z *= 0.5;
				//line 205 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.QuaternionDefault this7 = new hxmath.math.QuaternionDefault(self.s, self.x, self.y, self.z);
				//line 205 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.QuaternionDefault self2 = ((hxmath.math.QuaternionDefault) (this7) );
				//line 205 "/shared/hxmath/test/Test3D.hx"
				self2.s += self1.s;
				//line 205 "/shared/hxmath/test/Test3D.hx"
				self2.x += self1.x;
				//line 205 "/shared/hxmath/test/Test3D.hx"
				self2.y += self1.y;
				//line 205 "/shared/hxmath/test/Test3D.hx"
				self2.z += self1.z;
				//line 205 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.QuaternionDefault self3 = ((hxmath.math.QuaternionDefault) (self2) );
				//line 205 "/shared/hxmath/test/Test3D.hx"
				double length = java.lang.Math.sqrt(( ( ( ( self3.s * self3.s ) + ( self3.x * self3.x ) ) + ( self3.y * self3.y ) ) + ( self3.z * self3.z ) ));
				//line 205 "/shared/hxmath/test/Test3D.hx"
				if (( length > 0.0 )) 
				{
					//line 205 "/shared/hxmath/test/Test3D.hx"
					double k = ( 1.0 / length );
					//line 205 "/shared/hxmath/test/Test3D.hx"
					{
						//line 205 "/shared/hxmath/test/Test3D.hx"
						self3.s *= k;
						//line 205 "/shared/hxmath/test/Test3D.hx"
						self3.x *= k;
						//line 205 "/shared/hxmath/test/Test3D.hx"
						self3.y *= k;
						//line 205 "/shared/hxmath/test/Test3D.hx"
						self3.z *= k;
					}
					
				}
				
				//line 205 "/shared/hxmath/test/Test3D.hx"
				qC = self3;
			}
			else
			{
				//line 205 "/shared/hxmath/test/Test3D.hx"
				double ta = ( java.lang.Math.sin(( 0.5 * halfTheta )) / sinHalfTheta );
				//line 205 "/shared/hxmath/test/Test3D.hx"
				double tb = ( java.lang.Math.sin(( 0.5 * halfTheta )) / sinHalfTheta );
				//line 205 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.QuaternionDefault this8 = new hxmath.math.QuaternionDefault(((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (0) ));
				//line 205 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.QuaternionDefault result = ((hxmath.math.QuaternionDefault) (this8) );
				//line 205 "/shared/hxmath/test/Test3D.hx"
				result.x = ( ( qA.x * ta ) + ( qB.x * tb ) );
				//line 205 "/shared/hxmath/test/Test3D.hx"
				result.y = ( ( qA.y * ta ) + ( qB.y * tb ) );
				//line 205 "/shared/hxmath/test/Test3D.hx"
				result.z = ( ( qA.z * ta ) + ( qB.z * tb ) );
				//line 205 "/shared/hxmath/test/Test3D.hx"
				result.s = ( ( qA.s * ta ) + ( qB.s * tb ) );
				//line 205 "/shared/hxmath/test/Test3D.hx"
				qC = result;
			}
			
		}
		
		//line 207 "/shared/hxmath/test/Test3D.hx"
		double tmp = ( ( ( ( qA.s * qC.s ) + ( qA.x * qC.x ) ) + ( qA.y * qC.y ) ) + ( qA.z * qC.z ) );
		//line 207 "/shared/hxmath/test/Test3D.hx"
		double tmp1 = java.lang.Math.sqrt(( ( ( ( qA.s * qA.s ) + ( qA.x * qA.x ) ) + ( qA.y * qA.y ) ) + ( qA.z * qA.z ) ));
		//line 207 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.QuaternionDefault self4 = ((hxmath.math.QuaternionDefault) (qC) );
		//line 207 "/shared/hxmath/test/Test3D.hx"
		double angleAC = ( ( ( 2.0 * java.lang.Math.acos(( tmp / (( tmp1 * java.lang.Math.sqrt(( ( ( ( self4.s * self4.s ) + ( self4.x * self4.x ) ) + ( self4.y * self4.y ) ) + ( self4.z * self4.z ) )) )) )) ) * 180.0 ) / java.lang.Math.PI );
		//line 208 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.QuaternionDefault self5 = ((hxmath.math.QuaternionDefault) (qC) );
		//line 208 "/shared/hxmath/test/Test3D.hx"
		double angleCB = ( ( ( 2.0 * java.lang.Math.acos(( (( ( ( ( self5.s * qB.s ) + ( self5.x * qB.x ) ) + ( self5.y * qB.y ) ) + ( self5.z * qB.z ) )) / (( java.lang.Math.sqrt(( ( ( ( self5.s * self5.s ) + ( self5.x * self5.x ) ) + ( self5.y * self5.y ) ) + ( self5.z * self5.z ) )) * java.lang.Math.sqrt(( ( ( ( qB.s * qB.s ) + ( qB.x * qB.x ) ) + ( qB.y * qB.y ) ) + ( qB.z * qB.z ) )) )) )) ) * 180.0 ) / java.lang.Math.PI );
		//line 209 "/shared/hxmath/test/Test3D.hx"
		this.assertApproxEquals(45.0, angleAC, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testSlerpMidpointAngle"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (209) )) )}));
		//line 210 "/shared/hxmath/test/Test3D.hx"
		this.assertApproxEquals(45.0, angleCB, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testSlerpMidpointAngle"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (210) )) )}));
	}
	
	
	public void testSlerpMonotonicity()
	{
		//line 215 "/shared/hxmath/test/Test3D.hx"
		int _g = 0;
		//line 215 "/shared/hxmath/test/Test3D.hx"
		while (( _g < 10 ))
		{
			//line 215 "/shared/hxmath/test/Test3D.hx"
			 ++ _g;
			//line 217 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.QuaternionDefault self = ((hxmath.math.QuaternionDefault) (this.randomQuaternion(null)) );
			//line 217 "/shared/hxmath/test/Test3D.hx"
			double length = java.lang.Math.sqrt(( ( ( ( self.s * self.s ) + ( self.x * self.x ) ) + ( self.y * self.y ) ) + ( self.z * self.z ) ));
			//line 217 "/shared/hxmath/test/Test3D.hx"
			if (( length > 0.0 )) 
			{
				//line 217 "/shared/hxmath/test/Test3D.hx"
				double k = ( 1.0 / length );
				//line 217 "/shared/hxmath/test/Test3D.hx"
				{
					//line 217 "/shared/hxmath/test/Test3D.hx"
					self.s *= k;
					//line 217 "/shared/hxmath/test/Test3D.hx"
					self.x *= k;
					//line 217 "/shared/hxmath/test/Test3D.hx"
					self.y *= k;
					//line 217 "/shared/hxmath/test/Test3D.hx"
					self.z *= k;
				}
				
			}
			
			//line 218 "/shared/hxmath/test/Test3D.hx"
			hxmath.math.QuaternionDefault self1 = ((hxmath.math.QuaternionDefault) (this.randomQuaternion(null)) );
			//line 218 "/shared/hxmath/test/Test3D.hx"
			double length1 = java.lang.Math.sqrt(( ( ( ( self1.s * self1.s ) + ( self1.x * self1.x ) ) + ( self1.y * self1.y ) ) + ( self1.z * self1.z ) ));
			//line 218 "/shared/hxmath/test/Test3D.hx"
			if (( length1 > 0.0 )) 
			{
				//line 218 "/shared/hxmath/test/Test3D.hx"
				double k1 = ( 1.0 / length1 );
				//line 218 "/shared/hxmath/test/Test3D.hx"
				{
					//line 218 "/shared/hxmath/test/Test3D.hx"
					self1.s *= k1;
					//line 218 "/shared/hxmath/test/Test3D.hx"
					self1.x *= k1;
					//line 218 "/shared/hxmath/test/Test3D.hx"
					self1.y *= k1;
					//line 218 "/shared/hxmath/test/Test3D.hx"
					self1.z *= k1;
				}
				
			}
			
			//line 220 "/shared/hxmath/test/Test3D.hx"
			double lastAC = java.lang.Double.NEGATIVE_INFINITY;
			//line 221 "/shared/hxmath/test/Test3D.hx"
			double lastCB = java.lang.Double.POSITIVE_INFINITY;
			//line 223 "/shared/hxmath/test/Test3D.hx"
			{
				//line 223 "/shared/hxmath/test/Test3D.hx"
				int _g1 = 1;
				//line 223 "/shared/hxmath/test/Test3D.hx"
				while (( _g1 < 12 ))
				{
					//line 223 "/shared/hxmath/test/Test3D.hx"
					int step = _g1++;
					//line 225 "/shared/hxmath/test/Test3D.hx"
					double t = ( ((double) (step) ) / 12 );
					//line 226 "/shared/hxmath/test/Test3D.hx"
					double cosHalfTheta = ( ( ( ( self.s * self1.s ) + ( self.x * self1.x ) ) + ( self.y * self1.y ) ) + ( self.z * self1.z ) );
					//line 226 "/shared/hxmath/test/Test3D.hx"
					hxmath.math.QuaternionDefault qC = null;
					//line 226 "/shared/hxmath/test/Test3D.hx"
					if (( java.lang.Math.abs(cosHalfTheta) >= 1.0 )) 
					{
						//line 226 "/shared/hxmath/test/Test3D.hx"
						qC = self;
					}
					else
					{
						//line 226 "/shared/hxmath/test/Test3D.hx"
						double halfTheta = java.lang.Math.acos(cosHalfTheta);
						//line 226 "/shared/hxmath/test/Test3D.hx"
						double sinHalfTheta = java.lang.Math.sqrt(( 1.0 - ( cosHalfTheta * cosHalfTheta ) ));
						//line 226 "/shared/hxmath/test/Test3D.hx"
						if (( java.lang.Math.abs(sinHalfTheta) < 1e-3 )) 
						{
							//line 226 "/shared/hxmath/test/Test3D.hx"
							double s = ( 1.0 - t );
							//line 226 "/shared/hxmath/test/Test3D.hx"
							hxmath.math.QuaternionDefault this1 = new hxmath.math.QuaternionDefault(self.s, self.x, self.y, self.z);
							//line 226 "/shared/hxmath/test/Test3D.hx"
							hxmath.math.QuaternionDefault self2 = ((hxmath.math.QuaternionDefault) (this1) );
							//line 226 "/shared/hxmath/test/Test3D.hx"
							self2.s *= s;
							//line 226 "/shared/hxmath/test/Test3D.hx"
							self2.x *= s;
							//line 226 "/shared/hxmath/test/Test3D.hx"
							self2.y *= s;
							//line 226 "/shared/hxmath/test/Test3D.hx"
							self2.z *= s;
							//line 226 "/shared/hxmath/test/Test3D.hx"
							hxmath.math.QuaternionDefault this2 = new hxmath.math.QuaternionDefault(self1.s, self1.x, self1.y, self1.z);
							//line 226 "/shared/hxmath/test/Test3D.hx"
							hxmath.math.QuaternionDefault self3 = ((hxmath.math.QuaternionDefault) (this2) );
							//line 226 "/shared/hxmath/test/Test3D.hx"
							self3.s *= t;
							//line 226 "/shared/hxmath/test/Test3D.hx"
							self3.x *= t;
							//line 226 "/shared/hxmath/test/Test3D.hx"
							self3.y *= t;
							//line 226 "/shared/hxmath/test/Test3D.hx"
							self3.z *= t;
							//line 226 "/shared/hxmath/test/Test3D.hx"
							hxmath.math.QuaternionDefault this3 = new hxmath.math.QuaternionDefault(self2.s, self2.x, self2.y, self2.z);
							//line 226 "/shared/hxmath/test/Test3D.hx"
							hxmath.math.QuaternionDefault self4 = ((hxmath.math.QuaternionDefault) (this3) );
							//line 226 "/shared/hxmath/test/Test3D.hx"
							self4.s += self3.s;
							//line 226 "/shared/hxmath/test/Test3D.hx"
							self4.x += self3.x;
							//line 226 "/shared/hxmath/test/Test3D.hx"
							self4.y += self3.y;
							//line 226 "/shared/hxmath/test/Test3D.hx"
							self4.z += self3.z;
							//line 226 "/shared/hxmath/test/Test3D.hx"
							hxmath.math.QuaternionDefault self5 = ((hxmath.math.QuaternionDefault) (self4) );
							//line 226 "/shared/hxmath/test/Test3D.hx"
							double length2 = java.lang.Math.sqrt(( ( ( ( self5.s * self5.s ) + ( self5.x * self5.x ) ) + ( self5.y * self5.y ) ) + ( self5.z * self5.z ) ));
							//line 226 "/shared/hxmath/test/Test3D.hx"
							if (( length2 > 0.0 )) 
							{
								//line 226 "/shared/hxmath/test/Test3D.hx"
								double k2 = ( 1.0 / length2 );
								//line 226 "/shared/hxmath/test/Test3D.hx"
								{
									//line 226 "/shared/hxmath/test/Test3D.hx"
									self5.s *= k2;
									//line 226 "/shared/hxmath/test/Test3D.hx"
									self5.x *= k2;
									//line 226 "/shared/hxmath/test/Test3D.hx"
									self5.y *= k2;
									//line 226 "/shared/hxmath/test/Test3D.hx"
									self5.z *= k2;
								}
								
							}
							
							//line 226 "/shared/hxmath/test/Test3D.hx"
							qC = self5;
						}
						else
						{
							//line 226 "/shared/hxmath/test/Test3D.hx"
							double ta = ( java.lang.Math.sin(( (( 1 - t )) * halfTheta )) / sinHalfTheta );
							//line 226 "/shared/hxmath/test/Test3D.hx"
							double tb = ( java.lang.Math.sin(( t * halfTheta )) / sinHalfTheta );
							//line 226 "/shared/hxmath/test/Test3D.hx"
							hxmath.math.QuaternionDefault this4 = new hxmath.math.QuaternionDefault(((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (0) ));
							//line 226 "/shared/hxmath/test/Test3D.hx"
							hxmath.math.QuaternionDefault result = ((hxmath.math.QuaternionDefault) (this4) );
							//line 226 "/shared/hxmath/test/Test3D.hx"
							result.x = ( ( self.x * ta ) + ( self1.x * tb ) );
							//line 226 "/shared/hxmath/test/Test3D.hx"
							result.y = ( ( self.y * ta ) + ( self1.y * tb ) );
							//line 226 "/shared/hxmath/test/Test3D.hx"
							result.z = ( ( self.z * ta ) + ( self1.z * tb ) );
							//line 226 "/shared/hxmath/test/Test3D.hx"
							result.s = ( ( self.s * ta ) + ( self1.s * tb ) );
							//line 226 "/shared/hxmath/test/Test3D.hx"
							qC = result;
						}
						
					}
					
					//line 227 "/shared/hxmath/test/Test3D.hx"
					double tmp = ( ( ( ( self.s * qC.s ) + ( self.x * qC.x ) ) + ( self.y * qC.y ) ) + ( self.z * qC.z ) );
					//line 227 "/shared/hxmath/test/Test3D.hx"
					double tmp1 = java.lang.Math.sqrt(( ( ( ( self.s * self.s ) + ( self.x * self.x ) ) + ( self.y * self.y ) ) + ( self.z * self.z ) ));
					//line 227 "/shared/hxmath/test/Test3D.hx"
					hxmath.math.QuaternionDefault self6 = ((hxmath.math.QuaternionDefault) (qC) );
					//line 227 "/shared/hxmath/test/Test3D.hx"
					double angleAC = ( ( ( 2.0 * java.lang.Math.acos(( tmp / (( tmp1 * java.lang.Math.sqrt(( ( ( ( self6.s * self6.s ) + ( self6.x * self6.x ) ) + ( self6.y * self6.y ) ) + ( self6.z * self6.z ) )) )) )) ) * 180.0 ) / java.lang.Math.PI );
					//line 228 "/shared/hxmath/test/Test3D.hx"
					hxmath.math.QuaternionDefault self7 = ((hxmath.math.QuaternionDefault) (qC) );
					//line 228 "/shared/hxmath/test/Test3D.hx"
					double angleCB = ( ( ( 2.0 * java.lang.Math.acos(( (( ( ( ( self7.s * self1.s ) + ( self7.x * self1.x ) ) + ( self7.y * self1.y ) ) + ( self7.z * self1.z ) )) / (( java.lang.Math.sqrt(( ( ( ( self7.s * self7.s ) + ( self7.x * self7.x ) ) + ( self7.y * self7.y ) ) + ( self7.z * self7.z ) )) * java.lang.Math.sqrt(( ( ( ( self1.s * self1.s ) + ( self1.x * self1.x ) ) + ( self1.y * self1.y ) ) + ( self1.z * self1.z ) )) )) )) ) * 180.0 ) / java.lang.Math.PI );
					//line 230 "/shared/hxmath/test/Test3D.hx"
					this.assertTrue(( angleAC > lastAC ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testSlerpMonotonicity"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (230) )) )}));
					//line 231 "/shared/hxmath/test/Test3D.hx"
					this.assertTrue(( angleCB < lastCB ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testSlerpMonotonicity"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (231) )) )}));
					//line 232 "/shared/hxmath/test/Test3D.hx"
					lastAC = angleAC;
					//line 233 "/shared/hxmath/test/Test3D.hx"
					lastCB = angleCB;
				}
				
			}
			
		}
		
	}
	
	
	public void testSlerpLargeAngleStability()
	{
		//line 240 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this1 = new hxmath.math.Vector3Default(0.0, 0.0, 1.0);
		//line 240 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default axis = ((hxmath.math.Vector3Default) (this1) );
		//line 240 "/shared/hxmath/test/Test3D.hx"
		double angleRadians = ( ( java.lang.Math.PI / 180 ) * 0 );
		//line 240 "/shared/hxmath/test/Test3D.hx"
		double cosHalfAngle = java.lang.Math.cos(( angleRadians / 2.0 ));
		//line 240 "/shared/hxmath/test/Test3D.hx"
		double sinHalfAngle = java.lang.Math.sin(( angleRadians / 2.0 ));
		//line 240 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.QuaternionDefault this2 = new hxmath.math.QuaternionDefault(cosHalfAngle, ( sinHalfAngle * axis.x ), ( sinHalfAngle * axis.y ), ( sinHalfAngle * axis.z ));
		//line 240 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.QuaternionDefault qA = ((hxmath.math.QuaternionDefault) (this2) );
		//line 241 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this3 = new hxmath.math.Vector3Default(0.0, 0.0, 1.0);
		//line 241 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default axis1 = ((hxmath.math.Vector3Default) (this3) );
		//line 241 "/shared/hxmath/test/Test3D.hx"
		double angleRadians1 = ( ( java.lang.Math.PI / 180 ) * 180 );
		//line 241 "/shared/hxmath/test/Test3D.hx"
		double cosHalfAngle1 = java.lang.Math.cos(( angleRadians1 / 2.0 ));
		//line 241 "/shared/hxmath/test/Test3D.hx"
		double sinHalfAngle1 = java.lang.Math.sin(( angleRadians1 / 2.0 ));
		//line 241 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.QuaternionDefault this4 = new hxmath.math.QuaternionDefault(cosHalfAngle1, ( sinHalfAngle1 * axis1.x ), ( sinHalfAngle1 * axis1.y ), ( sinHalfAngle1 * axis1.z ));
		//line 241 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.QuaternionDefault qB = ((hxmath.math.QuaternionDefault) (this4) );
		//line 242 "/shared/hxmath/test/Test3D.hx"
		double cosHalfTheta = ( ( ( ( qA.s * qB.s ) + ( qA.x * qB.x ) ) + ( qA.y * qB.y ) ) + ( qA.z * qB.z ) );
		//line 242 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.QuaternionDefault qC = null;
		//line 242 "/shared/hxmath/test/Test3D.hx"
		if (( java.lang.Math.abs(cosHalfTheta) >= 1.0 )) 
		{
			//line 242 "/shared/hxmath/test/Test3D.hx"
			qC = qA;
		}
		else
		{
			//line 242 "/shared/hxmath/test/Test3D.hx"
			double halfTheta = java.lang.Math.acos(cosHalfTheta);
			//line 242 "/shared/hxmath/test/Test3D.hx"
			double sinHalfTheta = java.lang.Math.sqrt(( 1.0 - ( cosHalfTheta * cosHalfTheta ) ));
			//line 242 "/shared/hxmath/test/Test3D.hx"
			if (( java.lang.Math.abs(sinHalfTheta) < 1e-3 )) 
			{
				//line 242 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.QuaternionDefault this5 = new hxmath.math.QuaternionDefault(qA.s, qA.x, qA.y, qA.z);
				//line 242 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.QuaternionDefault self = ((hxmath.math.QuaternionDefault) (this5) );
				//line 242 "/shared/hxmath/test/Test3D.hx"
				self.s *= 0.5;
				//line 242 "/shared/hxmath/test/Test3D.hx"
				self.x *= 0.5;
				//line 242 "/shared/hxmath/test/Test3D.hx"
				self.y *= 0.5;
				//line 242 "/shared/hxmath/test/Test3D.hx"
				self.z *= 0.5;
				//line 242 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.QuaternionDefault this6 = new hxmath.math.QuaternionDefault(qB.s, qB.x, qB.y, qB.z);
				//line 242 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.QuaternionDefault self1 = ((hxmath.math.QuaternionDefault) (this6) );
				//line 242 "/shared/hxmath/test/Test3D.hx"
				self1.s *= 0.5;
				//line 242 "/shared/hxmath/test/Test3D.hx"
				self1.x *= 0.5;
				//line 242 "/shared/hxmath/test/Test3D.hx"
				self1.y *= 0.5;
				//line 242 "/shared/hxmath/test/Test3D.hx"
				self1.z *= 0.5;
				//line 242 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.QuaternionDefault this7 = new hxmath.math.QuaternionDefault(self.s, self.x, self.y, self.z);
				//line 242 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.QuaternionDefault self2 = ((hxmath.math.QuaternionDefault) (this7) );
				//line 242 "/shared/hxmath/test/Test3D.hx"
				self2.s += self1.s;
				//line 242 "/shared/hxmath/test/Test3D.hx"
				self2.x += self1.x;
				//line 242 "/shared/hxmath/test/Test3D.hx"
				self2.y += self1.y;
				//line 242 "/shared/hxmath/test/Test3D.hx"
				self2.z += self1.z;
				//line 242 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.QuaternionDefault self3 = ((hxmath.math.QuaternionDefault) (self2) );
				//line 242 "/shared/hxmath/test/Test3D.hx"
				double length = java.lang.Math.sqrt(( ( ( ( self3.s * self3.s ) + ( self3.x * self3.x ) ) + ( self3.y * self3.y ) ) + ( self3.z * self3.z ) ));
				//line 242 "/shared/hxmath/test/Test3D.hx"
				if (( length > 0.0 )) 
				{
					//line 242 "/shared/hxmath/test/Test3D.hx"
					double k = ( 1.0 / length );
					//line 242 "/shared/hxmath/test/Test3D.hx"
					{
						//line 242 "/shared/hxmath/test/Test3D.hx"
						self3.s *= k;
						//line 242 "/shared/hxmath/test/Test3D.hx"
						self3.x *= k;
						//line 242 "/shared/hxmath/test/Test3D.hx"
						self3.y *= k;
						//line 242 "/shared/hxmath/test/Test3D.hx"
						self3.z *= k;
					}
					
				}
				
				//line 242 "/shared/hxmath/test/Test3D.hx"
				qC = self3;
			}
			else
			{
				//line 242 "/shared/hxmath/test/Test3D.hx"
				double ta = ( java.lang.Math.sin(( 0.5 * halfTheta )) / sinHalfTheta );
				//line 242 "/shared/hxmath/test/Test3D.hx"
				double tb = ( java.lang.Math.sin(( 0.5 * halfTheta )) / sinHalfTheta );
				//line 242 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.QuaternionDefault this8 = new hxmath.math.QuaternionDefault(((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (0) ));
				//line 242 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.QuaternionDefault result = ((hxmath.math.QuaternionDefault) (this8) );
				//line 242 "/shared/hxmath/test/Test3D.hx"
				result.x = ( ( qA.x * ta ) + ( qB.x * tb ) );
				//line 242 "/shared/hxmath/test/Test3D.hx"
				result.y = ( ( qA.y * ta ) + ( qB.y * tb ) );
				//line 242 "/shared/hxmath/test/Test3D.hx"
				result.z = ( ( qA.z * ta ) + ( qB.z * tb ) );
				//line 242 "/shared/hxmath/test/Test3D.hx"
				result.s = ( ( qA.s * ta ) + ( qB.s * tb ) );
				//line 242 "/shared/hxmath/test/Test3D.hx"
				qC = result;
			}
			
		}
		
		//line 244 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.QuaternionDefault self4 = ((hxmath.math.QuaternionDefault) (qC) );
		//line 244 "/shared/hxmath/test/Test3D.hx"
		this.assertApproxEquals(((double) (90) ), ( ( ( 2.0 * java.lang.Math.acos(( (( ( ( ( self4.s * qA.s ) + ( self4.x * qA.x ) ) + ( self4.y * qA.y ) ) + ( self4.z * qA.z ) )) / (( java.lang.Math.sqrt(( ( ( ( self4.s * self4.s ) + ( self4.x * self4.x ) ) + ( self4.y * self4.y ) ) + ( self4.z * self4.z ) )) * java.lang.Math.sqrt(( ( ( ( qA.s * qA.s ) + ( qA.x * qA.x ) ) + ( qA.y * qA.y ) ) + ( qA.z * qA.z ) )) )) )) ) * 180.0 ) / java.lang.Math.PI ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testSlerpLargeAngleStability"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (244) )) )}));
	}
	
	
	public void testSlerpSmallAngleStability()
	{
		//line 249 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this1 = new hxmath.math.Vector3Default(0.0, 0.0, 1.0);
		//line 249 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default axis = ((hxmath.math.Vector3Default) (this1) );
		//line 249 "/shared/hxmath/test/Test3D.hx"
		double angleRadians = ( ( java.lang.Math.PI / 180 ) * 0 );
		//line 249 "/shared/hxmath/test/Test3D.hx"
		double cosHalfAngle = java.lang.Math.cos(( angleRadians / 2.0 ));
		//line 249 "/shared/hxmath/test/Test3D.hx"
		double sinHalfAngle = java.lang.Math.sin(( angleRadians / 2.0 ));
		//line 249 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.QuaternionDefault this2 = new hxmath.math.QuaternionDefault(cosHalfAngle, ( sinHalfAngle * axis.x ), ( sinHalfAngle * axis.y ), ( sinHalfAngle * axis.z ));
		//line 249 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.QuaternionDefault qA = ((hxmath.math.QuaternionDefault) (this2) );
		//line 250 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this3 = new hxmath.math.Vector3Default(0.0, 0.0, 1.0);
		//line 250 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default axis1 = ((hxmath.math.Vector3Default) (this3) );
		//line 250 "/shared/hxmath/test/Test3D.hx"
		double angleRadians1 = ( ( java.lang.Math.PI / 180 ) * 1e-2 );
		//line 250 "/shared/hxmath/test/Test3D.hx"
		double cosHalfAngle1 = java.lang.Math.cos(( angleRadians1 / 2.0 ));
		//line 250 "/shared/hxmath/test/Test3D.hx"
		double sinHalfAngle1 = java.lang.Math.sin(( angleRadians1 / 2.0 ));
		//line 250 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.QuaternionDefault this4 = new hxmath.math.QuaternionDefault(cosHalfAngle1, ( sinHalfAngle1 * axis1.x ), ( sinHalfAngle1 * axis1.y ), ( sinHalfAngle1 * axis1.z ));
		//line 250 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.QuaternionDefault qB = ((hxmath.math.QuaternionDefault) (this4) );
		//line 251 "/shared/hxmath/test/Test3D.hx"
		double cosHalfTheta = ( ( ( ( qA.s * qB.s ) + ( qA.x * qB.x ) ) + ( qA.y * qB.y ) ) + ( qA.z * qB.z ) );
		//line 251 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.QuaternionDefault qC = null;
		//line 251 "/shared/hxmath/test/Test3D.hx"
		if (( java.lang.Math.abs(cosHalfTheta) >= 1.0 )) 
		{
			//line 251 "/shared/hxmath/test/Test3D.hx"
			qC = qA;
		}
		else
		{
			//line 251 "/shared/hxmath/test/Test3D.hx"
			double halfTheta = java.lang.Math.acos(cosHalfTheta);
			//line 251 "/shared/hxmath/test/Test3D.hx"
			double sinHalfTheta = java.lang.Math.sqrt(( 1.0 - ( cosHalfTheta * cosHalfTheta ) ));
			//line 251 "/shared/hxmath/test/Test3D.hx"
			if (( java.lang.Math.abs(sinHalfTheta) < 1e-3 )) 
			{
				//line 251 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.QuaternionDefault this5 = new hxmath.math.QuaternionDefault(qA.s, qA.x, qA.y, qA.z);
				//line 251 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.QuaternionDefault self = ((hxmath.math.QuaternionDefault) (this5) );
				//line 251 "/shared/hxmath/test/Test3D.hx"
				self.s *= 0.5;
				//line 251 "/shared/hxmath/test/Test3D.hx"
				self.x *= 0.5;
				//line 251 "/shared/hxmath/test/Test3D.hx"
				self.y *= 0.5;
				//line 251 "/shared/hxmath/test/Test3D.hx"
				self.z *= 0.5;
				//line 251 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.QuaternionDefault this6 = new hxmath.math.QuaternionDefault(qB.s, qB.x, qB.y, qB.z);
				//line 251 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.QuaternionDefault self1 = ((hxmath.math.QuaternionDefault) (this6) );
				//line 251 "/shared/hxmath/test/Test3D.hx"
				self1.s *= 0.5;
				//line 251 "/shared/hxmath/test/Test3D.hx"
				self1.x *= 0.5;
				//line 251 "/shared/hxmath/test/Test3D.hx"
				self1.y *= 0.5;
				//line 251 "/shared/hxmath/test/Test3D.hx"
				self1.z *= 0.5;
				//line 251 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.QuaternionDefault this7 = new hxmath.math.QuaternionDefault(self.s, self.x, self.y, self.z);
				//line 251 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.QuaternionDefault self2 = ((hxmath.math.QuaternionDefault) (this7) );
				//line 251 "/shared/hxmath/test/Test3D.hx"
				self2.s += self1.s;
				//line 251 "/shared/hxmath/test/Test3D.hx"
				self2.x += self1.x;
				//line 251 "/shared/hxmath/test/Test3D.hx"
				self2.y += self1.y;
				//line 251 "/shared/hxmath/test/Test3D.hx"
				self2.z += self1.z;
				//line 251 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.QuaternionDefault self3 = ((hxmath.math.QuaternionDefault) (self2) );
				//line 251 "/shared/hxmath/test/Test3D.hx"
				double length = java.lang.Math.sqrt(( ( ( ( self3.s * self3.s ) + ( self3.x * self3.x ) ) + ( self3.y * self3.y ) ) + ( self3.z * self3.z ) ));
				//line 251 "/shared/hxmath/test/Test3D.hx"
				if (( length > 0.0 )) 
				{
					//line 251 "/shared/hxmath/test/Test3D.hx"
					double k = ( 1.0 / length );
					//line 251 "/shared/hxmath/test/Test3D.hx"
					{
						//line 251 "/shared/hxmath/test/Test3D.hx"
						self3.s *= k;
						//line 251 "/shared/hxmath/test/Test3D.hx"
						self3.x *= k;
						//line 251 "/shared/hxmath/test/Test3D.hx"
						self3.y *= k;
						//line 251 "/shared/hxmath/test/Test3D.hx"
						self3.z *= k;
					}
					
				}
				
				//line 251 "/shared/hxmath/test/Test3D.hx"
				qC = self3;
			}
			else
			{
				//line 251 "/shared/hxmath/test/Test3D.hx"
				double ta = ( java.lang.Math.sin(( 0.5 * halfTheta )) / sinHalfTheta );
				//line 251 "/shared/hxmath/test/Test3D.hx"
				double tb = ( java.lang.Math.sin(( 0.5 * halfTheta )) / sinHalfTheta );
				//line 251 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.QuaternionDefault this8 = new hxmath.math.QuaternionDefault(((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (0) ));
				//line 251 "/shared/hxmath/test/Test3D.hx"
				hxmath.math.QuaternionDefault result = ((hxmath.math.QuaternionDefault) (this8) );
				//line 251 "/shared/hxmath/test/Test3D.hx"
				result.x = ( ( qA.x * ta ) + ( qB.x * tb ) );
				//line 251 "/shared/hxmath/test/Test3D.hx"
				result.y = ( ( qA.y * ta ) + ( qB.y * tb ) );
				//line 251 "/shared/hxmath/test/Test3D.hx"
				result.z = ( ( qA.z * ta ) + ( qB.z * tb ) );
				//line 251 "/shared/hxmath/test/Test3D.hx"
				result.s = ( ( qA.s * ta ) + ( qB.s * tb ) );
				//line 251 "/shared/hxmath/test/Test3D.hx"
				qC = result;
			}
			
		}
		
		//line 253 "/shared/hxmath/test/Test3D.hx"
		double tmp = ( ( ( ( qA.s * qC.s ) + ( qA.x * qC.x ) ) + ( qA.y * qC.y ) ) + ( qA.z * qC.z ) );
		//line 253 "/shared/hxmath/test/Test3D.hx"
		double tmp1 = java.lang.Math.sqrt(( ( ( ( qA.s * qA.s ) + ( qA.x * qA.x ) ) + ( qA.y * qA.y ) ) + ( qA.z * qA.z ) ));
		//line 253 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.QuaternionDefault self4 = ((hxmath.math.QuaternionDefault) (qC) );
		//line 253 "/shared/hxmath/test/Test3D.hx"
		this.assertTrue(( ( 2.0 * java.lang.Math.acos(( tmp / (( tmp1 * java.lang.Math.sqrt(( ( ( ( self4.s * self4.s ) + ( self4.x * self4.x ) ) + ( self4.y * self4.y ) ) + ( self4.z * self4.z ) )) )) )) ) <= 1e-2 ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test3D", "Test3D.hx", "testSlerpSmallAngleStability"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (253) )) )}));
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 11 "/shared/hxmath/test/Test3D.hx"
		{
			//line 11 "/shared/hxmath/test/Test3D.hx"
			boolean __temp_executeDef1 = true;
			//line 11 "/shared/hxmath/test/Test3D.hx"
			switch (field.hashCode())
			{
				case 2086273765:
				{
					//line 11 "/shared/hxmath/test/Test3D.hx"
					if (field.equals("testSlerpSmallAngleStability")) 
					{
						//line 11 "/shared/hxmath/test/Test3D.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/hxmath/test/Test3D.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSlerpSmallAngleStability")) );
					}
					
					//line 11 "/shared/hxmath/test/Test3D.hx"
					break;
				}
				
				
				case 1629464259:
				{
					//line 11 "/shared/hxmath/test/Test3D.hx"
					if (field.equals("testMatrixMult")) 
					{
						//line 11 "/shared/hxmath/test/Test3D.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/hxmath/test/Test3D.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testMatrixMult")) );
					}
					
					//line 11 "/shared/hxmath/test/Test3D.hx"
					break;
				}
				
				
				case 608779801:
				{
					//line 11 "/shared/hxmath/test/Test3D.hx"
					if (field.equals("testSlerpLargeAngleStability")) 
					{
						//line 11 "/shared/hxmath/test/Test3D.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/hxmath/test/Test3D.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSlerpLargeAngleStability")) );
					}
					
					//line 11 "/shared/hxmath/test/Test3D.hx"
					break;
				}
				
				
				case 1197209873:
				{
					//line 11 "/shared/hxmath/test/Test3D.hx"
					if (field.equals("testAddSub")) 
					{
						//line 11 "/shared/hxmath/test/Test3D.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/hxmath/test/Test3D.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testAddSub")) );
					}
					
					//line 11 "/shared/hxmath/test/Test3D.hx"
					break;
				}
				
				
				case 611034844:
				{
					//line 11 "/shared/hxmath/test/Test3D.hx"
					if (field.equals("testSlerpMonotonicity")) 
					{
						//line 11 "/shared/hxmath/test/Test3D.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/hxmath/test/Test3D.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSlerpMonotonicity")) );
					}
					
					//line 11 "/shared/hxmath/test/Test3D.hx"
					break;
				}
				
				
				case -1905470677:
				{
					//line 11 "/shared/hxmath/test/Test3D.hx"
					if (field.equals("testCrossProductPrecedence")) 
					{
						//line 11 "/shared/hxmath/test/Test3D.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/hxmath/test/Test3D.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCrossProductPrecedence")) );
					}
					
					//line 11 "/shared/hxmath/test/Test3D.hx"
					break;
				}
				
				
				case 444912979:
				{
					//line 11 "/shared/hxmath/test/Test3D.hx"
					if (field.equals("testSlerpMidpointAngle")) 
					{
						//line 11 "/shared/hxmath/test/Test3D.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/hxmath/test/Test3D.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSlerpMidpointAngle")) );
					}
					
					//line 11 "/shared/hxmath/test/Test3D.hx"
					break;
				}
				
				
				case -1676486167:
				{
					//line 11 "/shared/hxmath/test/Test3D.hx"
					if (field.equals("testAxialRotation")) 
					{
						//line 11 "/shared/hxmath/test/Test3D.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/hxmath/test/Test3D.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testAxialRotation")) );
					}
					
					//line 11 "/shared/hxmath/test/Test3D.hx"
					break;
				}
				
				
				case -1815511173:
				{
					//line 11 "/shared/hxmath/test/Test3D.hx"
					if (field.equals("testProjectOntoPlane")) 
					{
						//line 11 "/shared/hxmath/test/Test3D.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/hxmath/test/Test3D.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testProjectOntoPlane")) );
					}
					
					//line 11 "/shared/hxmath/test/Test3D.hx"
					break;
				}
				
				
				case 1312406412:
				{
					//line 11 "/shared/hxmath/test/Test3D.hx"
					if (field.equals("testQuaternionToMatrix")) 
					{
						//line 11 "/shared/hxmath/test/Test3D.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/hxmath/test/Test3D.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testQuaternionToMatrix")) );
					}
					
					//line 11 "/shared/hxmath/test/Test3D.hx"
					break;
				}
				
				
				case 692666827:
				{
					//line 11 "/shared/hxmath/test/Test3D.hx"
					if (field.equals("testReflect")) 
					{
						//line 11 "/shared/hxmath/test/Test3D.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/hxmath/test/Test3D.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testReflect")) );
					}
					
					//line 11 "/shared/hxmath/test/Test3D.hx"
					break;
				}
				
				
				case 1955256214:
				{
					//line 11 "/shared/hxmath/test/Test3D.hx"
					if (field.equals("testMatrixFrameInverse")) 
					{
						//line 11 "/shared/hxmath/test/Test3D.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/hxmath/test/Test3D.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testMatrixFrameInverse")) );
					}
					
					//line 11 "/shared/hxmath/test/Test3D.hx"
					break;
				}
				
				
				case 1206558002:
				{
					//line 11 "/shared/hxmath/test/Test3D.hx"
					if (field.equals("testAngles")) 
					{
						//line 11 "/shared/hxmath/test/Test3D.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/hxmath/test/Test3D.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testAngles")) );
					}
					
					//line 11 "/shared/hxmath/test/Test3D.hx"
					break;
				}
				
				
				case 126008256:
				{
					//line 11 "/shared/hxmath/test/Test3D.hx"
					if (field.equals("testQuaternionInverse")) 
					{
						//line 11 "/shared/hxmath/test/Test3D.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/hxmath/test/Test3D.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testQuaternionInverse")) );
					}
					
					//line 11 "/shared/hxmath/test/Test3D.hx"
					break;
				}
				
				
				case 1168642919:
				{
					//line 11 "/shared/hxmath/test/Test3D.hx"
					if (field.equals("testOrthoNormalize")) 
					{
						//line 11 "/shared/hxmath/test/Test3D.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/hxmath/test/Test3D.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testOrthoNormalize")) );
					}
					
					//line 11 "/shared/hxmath/test/Test3D.hx"
					break;
				}
				
				
			}
			
			//line 11 "/shared/hxmath/test/Test3D.hx"
			if (__temp_executeDef1) 
			{
				//line 11 "/shared/hxmath/test/Test3D.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 11 "/shared/hxmath/test/Test3D.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 11 "/shared/hxmath/test/Test3D.hx"
		{
			//line 11 "/shared/hxmath/test/Test3D.hx"
			boolean __temp_executeDef1 = true;
			//line 11 "/shared/hxmath/test/Test3D.hx"
			switch (field.hashCode())
			{
				case 2086273765:
				{
					//line 11 "/shared/hxmath/test/Test3D.hx"
					if (field.equals("testSlerpSmallAngleStability")) 
					{
						//line 11 "/shared/hxmath/test/Test3D.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/hxmath/test/Test3D.hx"
						this.testSlerpSmallAngleStability();
					}
					
					//line 11 "/shared/hxmath/test/Test3D.hx"
					break;
				}
				
				
				case 1629464259:
				{
					//line 11 "/shared/hxmath/test/Test3D.hx"
					if (field.equals("testMatrixMult")) 
					{
						//line 11 "/shared/hxmath/test/Test3D.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/hxmath/test/Test3D.hx"
						this.testMatrixMult();
					}
					
					//line 11 "/shared/hxmath/test/Test3D.hx"
					break;
				}
				
				
				case 608779801:
				{
					//line 11 "/shared/hxmath/test/Test3D.hx"
					if (field.equals("testSlerpLargeAngleStability")) 
					{
						//line 11 "/shared/hxmath/test/Test3D.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/hxmath/test/Test3D.hx"
						this.testSlerpLargeAngleStability();
					}
					
					//line 11 "/shared/hxmath/test/Test3D.hx"
					break;
				}
				
				
				case 1197209873:
				{
					//line 11 "/shared/hxmath/test/Test3D.hx"
					if (field.equals("testAddSub")) 
					{
						//line 11 "/shared/hxmath/test/Test3D.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/hxmath/test/Test3D.hx"
						this.testAddSub();
					}
					
					//line 11 "/shared/hxmath/test/Test3D.hx"
					break;
				}
				
				
				case 611034844:
				{
					//line 11 "/shared/hxmath/test/Test3D.hx"
					if (field.equals("testSlerpMonotonicity")) 
					{
						//line 11 "/shared/hxmath/test/Test3D.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/hxmath/test/Test3D.hx"
						this.testSlerpMonotonicity();
					}
					
					//line 11 "/shared/hxmath/test/Test3D.hx"
					break;
				}
				
				
				case -1905470677:
				{
					//line 11 "/shared/hxmath/test/Test3D.hx"
					if (field.equals("testCrossProductPrecedence")) 
					{
						//line 11 "/shared/hxmath/test/Test3D.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/hxmath/test/Test3D.hx"
						this.testCrossProductPrecedence();
					}
					
					//line 11 "/shared/hxmath/test/Test3D.hx"
					break;
				}
				
				
				case 444912979:
				{
					//line 11 "/shared/hxmath/test/Test3D.hx"
					if (field.equals("testSlerpMidpointAngle")) 
					{
						//line 11 "/shared/hxmath/test/Test3D.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/hxmath/test/Test3D.hx"
						this.testSlerpMidpointAngle();
					}
					
					//line 11 "/shared/hxmath/test/Test3D.hx"
					break;
				}
				
				
				case -1676486167:
				{
					//line 11 "/shared/hxmath/test/Test3D.hx"
					if (field.equals("testAxialRotation")) 
					{
						//line 11 "/shared/hxmath/test/Test3D.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/hxmath/test/Test3D.hx"
						this.testAxialRotation();
					}
					
					//line 11 "/shared/hxmath/test/Test3D.hx"
					break;
				}
				
				
				case -1815511173:
				{
					//line 11 "/shared/hxmath/test/Test3D.hx"
					if (field.equals("testProjectOntoPlane")) 
					{
						//line 11 "/shared/hxmath/test/Test3D.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/hxmath/test/Test3D.hx"
						this.testProjectOntoPlane();
					}
					
					//line 11 "/shared/hxmath/test/Test3D.hx"
					break;
				}
				
				
				case 1312406412:
				{
					//line 11 "/shared/hxmath/test/Test3D.hx"
					if (field.equals("testQuaternionToMatrix")) 
					{
						//line 11 "/shared/hxmath/test/Test3D.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/hxmath/test/Test3D.hx"
						this.testQuaternionToMatrix();
					}
					
					//line 11 "/shared/hxmath/test/Test3D.hx"
					break;
				}
				
				
				case 692666827:
				{
					//line 11 "/shared/hxmath/test/Test3D.hx"
					if (field.equals("testReflect")) 
					{
						//line 11 "/shared/hxmath/test/Test3D.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/hxmath/test/Test3D.hx"
						this.testReflect();
					}
					
					//line 11 "/shared/hxmath/test/Test3D.hx"
					break;
				}
				
				
				case 1955256214:
				{
					//line 11 "/shared/hxmath/test/Test3D.hx"
					if (field.equals("testMatrixFrameInverse")) 
					{
						//line 11 "/shared/hxmath/test/Test3D.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/hxmath/test/Test3D.hx"
						this.testMatrixFrameInverse();
					}
					
					//line 11 "/shared/hxmath/test/Test3D.hx"
					break;
				}
				
				
				case 1206558002:
				{
					//line 11 "/shared/hxmath/test/Test3D.hx"
					if (field.equals("testAngles")) 
					{
						//line 11 "/shared/hxmath/test/Test3D.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/hxmath/test/Test3D.hx"
						this.testAngles();
					}
					
					//line 11 "/shared/hxmath/test/Test3D.hx"
					break;
				}
				
				
				case 126008256:
				{
					//line 11 "/shared/hxmath/test/Test3D.hx"
					if (field.equals("testQuaternionInverse")) 
					{
						//line 11 "/shared/hxmath/test/Test3D.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/hxmath/test/Test3D.hx"
						this.testQuaternionInverse();
					}
					
					//line 11 "/shared/hxmath/test/Test3D.hx"
					break;
				}
				
				
				case 1168642919:
				{
					//line 11 "/shared/hxmath/test/Test3D.hx"
					if (field.equals("testOrthoNormalize")) 
					{
						//line 11 "/shared/hxmath/test/Test3D.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/hxmath/test/Test3D.hx"
						this.testOrthoNormalize();
					}
					
					//line 11 "/shared/hxmath/test/Test3D.hx"
					break;
				}
				
				
			}
			
			//line 11 "/shared/hxmath/test/Test3D.hx"
			if (__temp_executeDef1) 
			{
				//line 11 "/shared/hxmath/test/Test3D.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 11 "/shared/hxmath/test/Test3D.hx"
		return null;
	}
	
	
}


