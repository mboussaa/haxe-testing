// Generated by Haxe 3.3.0
package test;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Test3D_testQuaternionToMatrix_71__Fun extends haxe.lang.Function
{
	public Test3D_testQuaternionToMatrix_71__Fun()
	{
		//line 72 "/shared/hxmath/test/Test3D.hx"
		super(2, 0);
	}
	
	
	public static test.Test3D_testQuaternionToMatrix_71__Fun __hx_current;
	
	@Override public java.lang.Object __hx_invoke2_o(double __fn_float1, java.lang.Object __fn_dyn1, double __fn_float2, java.lang.Object __fn_dyn2)
	{
		//line 71 "/shared/hxmath/test/Test3D.hx"
		int axis = ( (( __fn_dyn2 == haxe.lang.Runtime.undefined )) ? (((int) (__fn_float2) )) : (((int) (haxe.lang.Runtime.toInt(__fn_dyn2)) )) );
		//line 71 "/shared/hxmath/test/Test3D.hx"
		double unitAngle = ( (( __fn_dyn1 == haxe.lang.Runtime.undefined )) ? (((double) (__fn_float1) )) : (((double) (haxe.lang.Runtime.toDouble(__fn_dyn1)) )) );
		//line 73 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this1 = new hxmath.math.Vector3Default(1.0, 0.0, 0.0);
		//line 73 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default tmp = ((hxmath.math.Vector3Default) (this1) );
		//line 73 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this2 = new hxmath.math.Vector3Default(0.0, 1.0, 0.0);
		//line 73 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default tmp1 = ((hxmath.math.Vector3Default) (this2) );
		//line 73 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default this3 = new hxmath.math.Vector3Default(0.0, 0.0, 1.0);
		//line 73 "/shared/hxmath/test/Test3D.hx"
		haxe.root.Array<hxmath.math.Vector3Default> axes = new haxe.root.Array<hxmath.math.Vector3Default>(new hxmath.math.Vector3Default[]{tmp, tmp1, ((hxmath.math.Vector3Default) (this3) )});
		//line 74 "/shared/hxmath/test/Test3D.hx"
		haxe.root.Array<haxe.lang.Function> _const = new haxe.root.Array<haxe.lang.Function>(new haxe.lang.Function[]{((haxe.lang.Function) (new haxe.lang.Closure(hxmath.math._Matrix3x3.Matrix3x3_Impl_.class, "rotationX")) ), ((haxe.lang.Function) (new haxe.lang.Closure(hxmath.math._Matrix3x3.Matrix3x3_Impl_.class, "rotationY")) ), ((haxe.lang.Function) (new haxe.lang.Closure(hxmath.math._Matrix3x3.Matrix3x3_Impl_.class, "rotationZ")) )});
		//line 75 "/shared/hxmath/test/Test3D.hx"
		double angle = ( unitAngle * 360.0 );
		//line 76 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Vector3Default axis1 = axes.__get(axis);
		//line 76 "/shared/hxmath/test/Test3D.hx"
		double angleRadians = ( ( java.lang.Math.PI / 180 ) * angle );
		//line 76 "/shared/hxmath/test/Test3D.hx"
		double cosHalfAngle = java.lang.Math.cos(( angleRadians / 2.0 ));
		//line 76 "/shared/hxmath/test/Test3D.hx"
		double sinHalfAngle = java.lang.Math.sin(( angleRadians / 2.0 ));
		//line 76 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.QuaternionDefault this4 = new hxmath.math.QuaternionDefault(cosHalfAngle, ( sinHalfAngle * axis1.x ), ( sinHalfAngle * axis1.y ), ( sinHalfAngle * axis1.z ));
		//line 76 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.QuaternionDefault q = ((hxmath.math.QuaternionDefault) (this4) );
		//line 77 "/shared/hxmath/test/Test3D.hx"
		double s = q.s;
		//line 77 "/shared/hxmath/test/Test3D.hx"
		double x = q.x;
		//line 77 "/shared/hxmath/test/Test3D.hx"
		double y = q.y;
		//line 77 "/shared/hxmath/test/Test3D.hx"
		double z = q.z;
		//line 77 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Matrix3x3Default this5 = new hxmath.math.Matrix3x3Default(( 1 - ( 2 * (( ( y * y ) + ( z * z ) )) ) ), ( 2 * (( ( x * y ) - ( s * z ) )) ), ( 2 * (( ( s * y ) + ( x * z ) )) ), ( 2 * (( ( x * y ) + ( s * z ) )) ), ( 1 - ( 2 * (( ( x * x ) + ( z * z ) )) ) ), ( 2 * (( ( y * z ) - ( s * x ) )) ), ( 2 * (( ( x * z ) - ( s * y ) )) ), ( 2 * (( ( y * z ) + ( s * x ) )) ), ( 1 - ( 2 * (( ( x * x ) + ( y * y ) )) ) ));
		//line 77 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Matrix3x3Default m = ((hxmath.math.Matrix3x3Default) (this5) );
		//line 78 "/shared/hxmath/test/Test3D.hx"
		hxmath.math.Matrix3x3Default m1 = ((hxmath.math.Matrix3x3Default) (_const.__get(axis).__hx_invoke1_o(angle, haxe.lang.Runtime.undefined)) );
		//line 80 "/shared/hxmath/test/Test3D.hx"
		return new haxe.lang.DynamicObject(new java.lang.String[]{"m", "n"}, new java.lang.Object[]{m1, m}, new java.lang.String[]{}, new double[]{});
	}
	
	
}


