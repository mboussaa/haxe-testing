// Generated by Haxe 3.3.0
package nanotest;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class NanoTestCase extends haxe.lang.HxObject
{
	static
	{
		//line 11 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		nanotest.NanoTestCase.ASSERT_TRUE_ERROR = "expected true but was false";
		//line 12 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		nanotest.NanoTestCase.ASSERT_FALSE_ERROR = "expected false but was true";
		//line 13 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		nanotest.NanoTestCase.ASSERT_THROWS_ERROR = "expected to throw exception but didn\'t";
	}
	
	public NanoTestCase(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public NanoTestCase(java.lang.Object posInfos)
	{
		//line 29 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		nanotest.NanoTestCase.__hx_ctor_nanotest_NanoTestCase(this, posInfos);
	}
	
	
	public static void __hx_ctor_nanotest_NanoTestCase(nanotest.NanoTestCase __temp_me43, java.lang.Object posInfos)
	{
		//line 30 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		__temp_me43.posInfos = posInfos;
	}
	
	
	public static java.lang.String ASSERT_TRUE_ERROR;
	
	public static java.lang.String ASSERT_FALSE_ERROR;
	
	public static java.lang.String ASSERT_THROWS_ERROR;
	
	public static java.lang.String ASSERT_THROWS_ILLEGAL_EXCEPTION(java.lang.Object actual)
	{
		//line 15 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		return ( "catched illeagal exception " + nanotest.NanoTestCase.format(actual) );
	}
	
	
	public static java.lang.String ASSERT_EQUALS_ERROR(java.lang.Object expected, java.lang.Object actual)
	{
		//line 18 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		return ( ( ( "expected " + nanotest.NanoTestCase.format(expected) ) + " but was " ) + nanotest.NanoTestCase.format(actual) );
	}
	
	
	public static java.lang.String ASSERT_NOT_EQUALS_ERROR(java.lang.Object expected, java.lang.Object actual)
	{
		//line 21 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		return ( ( ( "expected not " + nanotest.NanoTestCase.format(expected) ) + " but was " ) + nanotest.NanoTestCase.format(actual) );
	}
	
	
	public static java.lang.String format(java.lang.Object d)
	{
		//line 24 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		if (( d instanceof java.lang.String )) 
		{
			//line 24 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			return ( ( "\"" + haxe.root.Std.string(d) ) + "\"" );
		}
		else
		{
			//line 24 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			return ( "" + haxe.root.Std.string(d) );
		}
		
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		return new nanotest.NanoTestCase(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		return new nanotest.NanoTestCase(((java.lang.Object) (arr.__get(0)) ));
	}
	
	
	public java.lang.Object currentResult;
	
	public java.lang.Object posInfos;
	
	public void globalTearDown()
	{
	}
	
	
	public void globalSetup()
	{
	}
	
	
	public void tearDown()
	{
	}
	
	
	public void setup()
	{
	}
	
	
	public haxe.root.Array<java.lang.Object> run(haxe.lang.Function print)
	{
		//line 38 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		nanotest.NanoTestCase _gthis = this;
		//line 39 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		haxe.root.Array<java.lang.Object> results = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		//line 40 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		java.lang.Class cl = ((java.lang.Class) (haxe.root.Type.getClass(((nanotest.NanoTestCase) (this) ))) );
		//line 41 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		haxe.root.Array<java.lang.String> fields = haxe.root.Type.getInstanceFields(cl);
		//line 43 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		haxe.lang.Function closeResult = new nanotest.NanoTestCase_run_43__Fun(results, print, _gthis);
		//line 55 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		print.__hx_invoke1_o(0.0, ( ( "Class: " + haxe.root.Type.getClassName(cl) ) + " " ));
		//line 57 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		this.globalSetup();
		//line 58 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		if (( ! (( this.currentResult == null )) )) 
		{
			//line 59 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			closeResult.__hx_invoke0_o();
		}
		
		//line 62 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		{
			//line 62 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			int _g = 0;
			//line 62 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			while (( _g < fields.length ))
			{
				//line 62 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
				java.lang.String fname = fields.__get(_g);
				//line 62 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
				 ++ _g;
				//line 63 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
				java.lang.Object field = haxe.root.Reflect.field(this, fname);
				//line 64 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
				if (( fname.startsWith("test") && haxe.root.Reflect.isFunction(field) )) 
				{
					//line 65 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					{
						//line 66 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						java.lang.String __temp_odecl3 = haxe.root.Type.getClassName(cl);
						//line 65 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						this.currentResult = new haxe.lang.DynamicObject(new java.lang.String[]{"async", "className", "error", "failed", "method", "status", "testCase"}, new java.lang.Object[]{false, __temp_odecl3, false, false, fname, new haxe.root.Array<nanotest.NanoTestStatus>(new nanotest.NanoTestStatus[]{}), this}, new java.lang.String[]{}, new double[]{});
					}
					
					//line 75 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					this.setup();
					//line 78 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					try 
					{
						//line 78 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						haxe.root.Reflect.callMethod(this, field, new haxe.root.Array(new java.lang.Object[]{}));
					}
					catch (java.lang.Throwable __temp_catchallException1)
					{
						//line 78 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						haxe.lang.Exceptions.setException(__temp_catchallException1);
						//line 80 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						java.lang.Object __temp_catchall2 = __temp_catchallException1;
						//line 80 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						if (( __temp_catchall2 instanceof haxe.lang.HaxeException )) 
						{
							//line 80 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
							__temp_catchall2 = ((haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
						}
						
						//line 80 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						{
							//line 80 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
							java.lang.Object e = __temp_catchall2;
							//line 80 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
							this.error(e);
						}
						
					}
					
					
					//line 82 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					this.tearDown();
					//line 83 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					closeResult.__hx_invoke0_o();
				}
				
			}
			
		}
		
		//line 87 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		this.globalTearDown();
		//line 89 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		print.__hx_invoke1_o(0.0, "\n");
		//line 90 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		return results;
	}
	
	
	public nanotest.NanoTestAssertResult assertTrue(boolean b, java.lang.Object p)
	{
		//line 94 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		if (( b == false )) 
		{
			//line 94 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			return this.fail("expected true but was false", p);
		}
		else
		{
			//line 94 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			return this.success(p);
		}
		
	}
	
	
	public nanotest.NanoTestAssertResult assertFalse(boolean b, java.lang.Object p)
	{
		//line 102 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		if (( b == true )) 
		{
			//line 102 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			return this.fail("expected false but was true", p);
		}
		else
		{
			//line 102 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			return this.success(p);
		}
		
	}
	
	
	public <T> nanotest.NanoTestAssertResult assertEquals(T expected, T actual, java.lang.Object p)
	{
		//line 110 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		if (haxe.root.Reflect.isEnumValue(expected)) 
		{
			//line 111 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			if ( ! (((boolean) (haxe.root.Type.enumEq(((T) (actual) ), ((T) (expected) ))) )) ) 
			{
				//line 110 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
				return this.fail(( ( ( "expected " + nanotest.NanoTestCase.format(expected) ) + " but was " ) + nanotest.NanoTestCase.format(actual) ), p);
			}
			else
			{
				//line 110 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
				return this.success(p);
			}
			
		}
		else
		{
			//line 117 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			if (( ! (haxe.lang.Runtime.eq(actual, expected)) )) 
			{
				//line 110 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
				return this.fail(( ( ( "expected " + nanotest.NanoTestCase.format(expected) ) + " but was " ) + nanotest.NanoTestCase.format(actual) ), p);
			}
			else
			{
				//line 110 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
				return this.success(p);
			}
			
		}
		
	}
	
	
	public <T> nanotest.NanoTestAssertResult assertNotEquals(T notExpected, T actual, java.lang.Object p)
	{
		//line 126 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		if (haxe.root.Reflect.isEnumValue(notExpected)) 
		{
			//line 127 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			if (((boolean) (haxe.root.Type.enumEq(((T) (actual) ), ((T) (notExpected) ))) )) 
			{
				//line 126 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
				return this.fail(( ( ( "expected not " + nanotest.NanoTestCase.format(notExpected) ) + " but was " ) + nanotest.NanoTestCase.format(actual) ), p);
			}
			else
			{
				//line 126 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
				return this.success(p);
			}
			
		}
		else
		{
			//line 133 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			if (haxe.lang.Runtime.eq(actual, notExpected)) 
			{
				//line 126 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
				return this.fail(( ( ( "expected not " + nanotest.NanoTestCase.format(notExpected) ) + " but was " ) + nanotest.NanoTestCase.format(actual) ), p);
			}
			else
			{
				//line 126 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
				return this.success(p);
			}
			
		}
		
	}
	
	
	public nanotest.NanoTestAssertResult assertThrows(haxe.lang.Function func, haxe.lang.Function isSuccess, java.lang.Object p)
	{
		//line 143 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		try 
		{
			//line 143 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			func.__hx_invoke0_o();
		}
		catch (java.lang.Throwable __temp_catchallException1)
		{
			//line 143 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			haxe.lang.Exceptions.setException(__temp_catchallException1);
			//line 145 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			java.lang.Object __temp_catchall2 = __temp_catchallException1;
			//line 145 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			if (( __temp_catchall2 instanceof haxe.lang.HaxeException )) 
			{
				//line 145 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
				__temp_catchall2 = ((haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
			}
			
			//line 145 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			{
				//line 145 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
				java.lang.Object d = __temp_catchall2;
				//line 145 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
				if (( ( isSuccess == null ) || haxe.lang.Runtime.toBool(isSuccess.__hx_invoke1_o(0.0, d)) )) 
				{
					//line 146 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					return this.success(p);
				}
				else
				{
					//line 148 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					nanotest.NanoTestAssertResult f = this.fail(( "catched illeagal exception " + nanotest.NanoTestCase.format(d) ), p);
					//line 149 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					this.error(d);
					//line 150 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					return f;
				}
				
			}
			
		}
		
		
		//line 154 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		return this.fail("expected to throw exception but didn\'t", p);
	}
	
	
	public nanotest.NanoTestAssertResult fail(java.lang.String message, java.lang.Object p)
	{
		//line 158 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		if (( this.currentResult == null )) 
		{
			//line 158 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			this._openPreprocessResult();
		}
		
		//line 159 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		haxe.lang.Runtime.setField(this.currentResult, "failed", true);
		//line 161 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		int i = ((haxe.root.Array<nanotest.NanoTestStatus>) (haxe.lang.Runtime.getField(this.currentResult, "status", true)) ).length;
		//line 162 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		nanotest.NanoTestStatus status = nanotest.NanoTestStatus.FAIL(message, p);
		//line 163 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		((haxe.root.Array<nanotest.NanoTestStatus>) (haxe.lang.Runtime.getField(this.currentResult, "status", true)) ).push(status);
		//line 164 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		return new nanotest.NanoTestAssertResult(this.currentResult, i);
	}
	
	
	public nanotest.NanoTestAssertResult success(java.lang.Object p)
	{
		//line 168 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		if (( this.currentResult == null )) 
		{
			//line 168 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			this._openPreprocessResult();
		}
		
		//line 170 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		int i = ((haxe.root.Array<nanotest.NanoTestStatus>) (haxe.lang.Runtime.getField(this.currentResult, "status", true)) ).length;
		//line 171 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		nanotest.NanoTestStatus status = nanotest.NanoTestStatus.SUCCESS(p);
		//line 172 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		((haxe.root.Array<nanotest.NanoTestStatus>) (haxe.lang.Runtime.getField(this.currentResult, "status", true)) ).push(status);
		//line 173 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		return new nanotest.NanoTestAssertResult(this.currentResult, i);
	}
	
	
	public nanotest.NanoTestAssertResult error(java.lang.Object e)
	{
		//line 177 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		if (( this.currentResult == null )) 
		{
			//line 177 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			this._openPreprocessResult();
		}
		
		//line 178 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		haxe.lang.Runtime.setField(this.currentResult, "failed", true);
		//line 179 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		haxe.lang.Runtime.setField(this.currentResult, "error", true);
		//line 188 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		java.lang.String message = haxe.root.Std.string(e);
		//line 191 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		int i = ((haxe.root.Array<nanotest.NanoTestStatus>) (haxe.lang.Runtime.getField(this.currentResult, "status", true)) ).length;
		//line 192 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		nanotest.NanoTestStatus status = nanotest.NanoTestStatus.ERROR(message, haxe.CallStack.exceptionStack());
		//line 193 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		((haxe.root.Array<nanotest.NanoTestStatus>) (haxe.lang.Runtime.getField(this.currentResult, "status", true)) ).push(status);
		//line 194 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		return new nanotest.NanoTestAssertResult(this.currentResult, i);
	}
	
	
	public void _openPreprocessResult()
	{
		//line 198 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		{
			//line 199 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			java.lang.String __temp_odecl1 = haxe.root.Type.getClassName(((java.lang.Class) (haxe.root.Type.getClass(((nanotest.NanoTestCase) (this) ))) ));
			//line 198 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			this.currentResult = new haxe.lang.DynamicObject(new java.lang.String[]{"async", "className", "error", "failed", "method", "status", "testCase"}, new java.lang.Object[]{true, __temp_odecl1, false, false, null, new haxe.root.Array<nanotest.NanoTestStatus>(new nanotest.NanoTestStatus[]{}), this}, new java.lang.String[]{}, new double[]{});
		}
		
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		{
			//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			boolean __temp_executeDef1 = true;
			//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			switch (field.hashCode())
			{
				case 718070673:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("posInfos")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						this.posInfos = ((java.lang.Object) (value) );
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						return value;
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
				case -2094091530:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("currentResult")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						this.currentResult = ((java.lang.Object) (value) );
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						return value;
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
			}
			
			//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			if (__temp_executeDef1) 
			{
				//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		{
			//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			boolean __temp_executeDef1 = true;
			//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			switch (field.hashCode())
			{
				case 718070673:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("posInfos")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						this.posInfos = ((java.lang.Object) (value) );
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						return value;
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
				case -2094091530:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("currentResult")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						this.currentResult = ((java.lang.Object) (value) );
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						return value;
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
			}
			
			//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			if (__temp_executeDef1) 
			{
				//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		{
			//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			boolean __temp_executeDef1 = true;
			//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			switch (field.hashCode())
			{
				case 924164850:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("_openPreprocessResult")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "_openPreprocessResult")) );
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
				case -2094091530:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("currentResult")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						return this.currentResult;
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
				case 96784904:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("error")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "error")) );
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
				case 718070673:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("posInfos")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						return this.posInfos;
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
				case -1867169789:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("success")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "success")) );
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
				case -1838289177:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("globalTearDown")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "globalTearDown")) );
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
				case 3135262:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("fail")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "fail")) );
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
				case -853011302:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("globalSetup")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "globalSetup")) );
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
				case -655849165:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("assertThrows")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "assertThrows")) );
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
				case -1664427484:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("tearDown")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "tearDown")) );
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
				case 1540515788:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("assertNotEquals")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "assertNotEquals")) );
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
				case 109329021:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("setup")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "setup")) );
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
				case -1076899163:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("assertEquals")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "assertEquals")) );
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
				case 113291:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("run")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "run")) );
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
				case 381342077:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("assertFalse")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "assertFalse")) );
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
				case 2090945012:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("assertTrue")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "assertTrue")) );
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
			}
			
			//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			if (__temp_executeDef1) 
			{
				//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		{
			//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			boolean __temp_executeDef1 = true;
			//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			switch (field.hashCode())
			{
				case 718070673:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("posInfos")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						return ((double) (haxe.lang.Runtime.toDouble(this.posInfos)) );
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
				case -2094091530:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("currentResult")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						return ((double) (haxe.lang.Runtime.toDouble(this.currentResult)) );
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
			}
			
			//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			if (__temp_executeDef1) 
			{
				//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		{
			//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			boolean __temp_executeDef1 = true;
			//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			switch (field.hashCode())
			{
				case 924164850:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("_openPreprocessResult")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						this._openPreprocessResult();
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
				case -1838289177:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("globalTearDown")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						this.globalTearDown();
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
				case 96784904:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("error")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						return this.error(dynargs.__get(0));
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
				case -853011302:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("globalSetup")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						this.globalSetup();
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
				case -1867169789:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("success")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						return this.success(dynargs.__get(0));
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
				case -1664427484:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("tearDown")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						this.tearDown();
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
				case 3135262:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("fail")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						return this.fail(haxe.lang.Runtime.toString(dynargs.__get(0)), dynargs.__get(1));
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
				case 109329021:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("setup")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						this.setup();
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
				case -655849165:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("assertThrows")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						return this.assertThrows(((haxe.lang.Function) (dynargs.__get(0)) ), ((haxe.lang.Function) (dynargs.__get(1)) ), dynargs.__get(2));
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
				case 113291:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("run")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						return this.run(((haxe.lang.Function) (dynargs.__get(0)) ));
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
				case 1540515788:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("assertNotEquals")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						return ((nanotest.NanoTestAssertResult) (this.assertNotEquals(((java.lang.Object) (dynargs.__get(0)) ), ((java.lang.Object) (dynargs.__get(1)) ), ((java.lang.Object) (dynargs.__get(2)) ))) );
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
				case 2090945012:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("assertTrue")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						return this.assertTrue(haxe.lang.Runtime.toBool(dynargs.__get(0)), dynargs.__get(1));
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
				case -1076899163:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("assertEquals")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						return ((nanotest.NanoTestAssertResult) (this.assertEquals(((java.lang.Object) (dynargs.__get(0)) ), ((java.lang.Object) (dynargs.__get(1)) ), ((java.lang.Object) (dynargs.__get(2)) ))) );
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
				case 381342077:
				{
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					if (field.equals("assertFalse")) 
					{
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						__temp_executeDef1 = false;
						//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
						return this.assertFalse(haxe.lang.Runtime.toBool(dynargs.__get(0)), dynargs.__get(1));
					}
					
					//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
					break;
				}
				
				
			}
			
			//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			if (__temp_executeDef1) 
			{
				//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		baseArr.push("posInfos");
		//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		baseArr.push("currentResult");
		//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		{
			//line 10 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


