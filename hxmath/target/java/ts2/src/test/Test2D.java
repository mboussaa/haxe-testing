// Generated by Haxe 3.3.0
package test;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Test2D extends test.MathTestCase
{
	public Test2D(haxe.lang.EmptyObject empty)
	{
		//line 10 "/shared/hxmath/test/Test2D.hx"
		super(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public Test2D(java.lang.Object posInfos)
	{
		//line 29 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		super(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
		//line 29 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		test.Test2D.__hx_ctor_test_Test2D(this, posInfos);
	}
	
	
	public static void __hx_ctor_test_Test2D(test.Test2D __temp_me63, java.lang.Object posInfos)
	{
		//line 29 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		test.MathTestCase.__hx_ctor_test_MathTestCase(__temp_me63, posInfos);
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 10 "/shared/hxmath/test/Test2D.hx"
		return new test.Test2D(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 10 "/shared/hxmath/test/Test2D.hx"
		return new test.Test2D(((java.lang.Object) (arr.__get(0)) ));
	}
	
	
	public void testVector2BasicOps()
	{
		//line 14 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this1 = new hxmath.math.Vector2Default(1.0, 0.0);
		//line 14 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default a = ((hxmath.math.Vector2Default) (this1) );
		//line 14 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this2 = new hxmath.math.Vector2Default(0.0, 1.0);
		//line 14 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default b = ((hxmath.math.Vector2Default) (this2) );
		//line 14 "/shared/hxmath/test/Test2D.hx"
		this.assertTrue(( ( ( a.x * b.x ) + ( a.y * b.y ) ) == 0.0 ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testVector2BasicOps"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (14) )) )}));
		//line 15 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this3 = new hxmath.math.Vector2Default(1.0, 0.0);
		//line 15 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default _g1 = ((hxmath.math.Vector2Default) (this3) );
		//line 15 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this4 = new hxmath.math.Vector2Default(_g1.x, _g1.y);
		//line 15 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default self = ((hxmath.math.Vector2Default) (this4) );
		//line 15 "/shared/hxmath/test/Test2D.hx"
		self.x *= 0.0;
		//line 15 "/shared/hxmath/test/Test2D.hx"
		self.y *= 0.0;
		//line 15 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this5 = new hxmath.math.Vector2Default(0.0, 0.0);
		//line 15 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default b1 = ((hxmath.math.Vector2Default) (this5) );
		//line 15 "/shared/hxmath/test/Test2D.hx"
		this.assertTrue(( ( ( self == null ) && ( b1 == null ) ) || ( ( ( ( self != null ) && ( b1 != null ) ) && ( self.x == b1.x ) ) && ( self.y == b1.y ) ) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testVector2BasicOps"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (15) )) )}));
		//line 17 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.IntVector2Default a1 = hxmath.math._IntVector2.IntVector2_Impl_._new(1, 0);
		//line 17 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.IntVector2Default b2 = hxmath.math._IntVector2.IntVector2_Impl_._new(0, 1);
		//line 17 "/shared/hxmath/test/Test2D.hx"
		this.assertTrue(( ( ( a1.x * b2.x ) + ( a1.y * b2.y ) ) == 0 ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testVector2BasicOps"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (17) )) )}));
		//line 18 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.IntVector2Default _g3 = hxmath.math._IntVector2.IntVector2_Impl_._new(1, 0);
		//line 18 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.IntVector2Default self1 = ((hxmath.math.IntVector2Default) (hxmath.math._IntVector2.IntVector2_Impl_._new(_g3.x, _g3.y)) );
		//line 18 "/shared/hxmath/test/Test2D.hx"
		self1.x *= 0;
		//line 18 "/shared/hxmath/test/Test2D.hx"
		self1.y *= 0;
		//line 18 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.IntVector2Default b3 = hxmath.math._IntVector2.IntVector2_Impl_._new(0, 0);
		//line 18 "/shared/hxmath/test/Test2D.hx"
		this.assertTrue(( ( ( self1 == null ) && ( b3 == null ) ) || ( ( ( ( self1 != null ) && ( b3 != null ) ) && ( self1.x == b3.x ) ) && ( self1.y == b3.y ) ) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testVector2BasicOps"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (18) )) )}));
	}
	
	
	public void testDeterminant()
	{
		//line 23 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Matrix2x2Default this1 = new hxmath.math.Matrix2x2Default(1.0, 0.0, 0.0, 1.0);
		//line 23 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Matrix2x2Default self = ((hxmath.math.Matrix2x2Default) (this1) );
		//line 23 "/shared/hxmath/test/Test2D.hx"
		this.assertTrue(( ( ( self.a * self.d ) - ( self.b * self.c ) ) == 1.0 ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testDeterminant"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (23) )) )}));
	}
	
	
	public void testHomogenousTranslation()
	{
		//line 28 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Matrix3x2Default this1 = new hxmath.math.Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0);
		//line 28 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Matrix3x2Default m = ((hxmath.math.Matrix3x2Default) (this1) );
		//line 29 "/shared/hxmath/test/Test2D.hx"
		{
			//line 29 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default this2 = new hxmath.math.Vector2Default(((double) (3) ), ((double) (-1) ));
			//line 29 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default t = ((hxmath.math.Vector2Default) (this2) );
			//line 29 "/shared/hxmath/test/Test2D.hx"
			m.tx = t.x;
			//line 29 "/shared/hxmath/test/Test2D.hx"
			m.ty = t.y;
		}
		
		//line 30 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this3 = new hxmath.math.Vector2Default(0.0, 0.0);
		//line 30 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default v = ((hxmath.math.Vector2Default) (this3) );
		//line 30 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Matrix2x2Default this4 = new hxmath.math.Matrix2x2Default(m.a, m.b, m.c, m.d);
		//line 30 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Matrix2x2Default m1 = ((hxmath.math.Matrix2x2Default) (this4) );
		//line 30 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this5 = new hxmath.math.Vector2Default(( ( m1.a * v.x ) + ( m1.b * v.y ) ), ( ( m1.c * v.x ) + ( m1.d * v.y ) ));
		//line 30 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default a = ((hxmath.math.Vector2Default) (this5) );
		//line 30 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this6 = new hxmath.math.Vector2Default(m.tx, m.ty);
		//line 30 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default b = ((hxmath.math.Vector2Default) (this6) );
		//line 30 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this7 = new hxmath.math.Vector2Default(a.x, a.y);
		//line 30 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default self = ((hxmath.math.Vector2Default) (this7) );
		//line 30 "/shared/hxmath/test/Test2D.hx"
		self.x += b.x;
		//line 30 "/shared/hxmath/test/Test2D.hx"
		self.y += b.y;
		//line 30 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this8 = new hxmath.math.Vector2Default(m.tx, m.ty);
		//line 30 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default b1 = ((hxmath.math.Vector2Default) (this8) );
		//line 30 "/shared/hxmath/test/Test2D.hx"
		this.assertTrue(( ( ( self == null ) && ( b1 == null ) ) || ( ( ( ( self != null ) && ( b1 != null ) ) && ( self.x == b1.x ) ) && ( self.y == b1.y ) ) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testHomogenousTranslation"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (30) )) )}));
	}
	
	
	public void testTranspose()
	{
		//line 35 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Matrix2x2Default this1 = new hxmath.math.Matrix2x2Default(java.lang.Math.random(), java.lang.Math.random(), java.lang.Math.random(), java.lang.Math.random());
		//line 35 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Matrix2x2Default m = ((hxmath.math.Matrix2x2Default) (this1) );
		//line 39 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Matrix2x2Default this2 = new hxmath.math.Matrix2x2Default(m.a, m.c, m.b, m.d);
		//line 39 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Matrix2x2Default self = ((hxmath.math.Matrix2x2Default) (this2) );
		//line 39 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Matrix2x2Default this3 = new hxmath.math.Matrix2x2Default(self.a, self.c, self.b, self.d);
		//line 39 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Matrix2x2Default n = ((hxmath.math.Matrix2x2Default) (this3) );
		//line 42 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Matrix2x2Default this4 = new hxmath.math.Matrix2x2Default(m.a, m.b, m.c, m.d);
		//line 42 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Matrix2x2Default self1 = ((hxmath.math.Matrix2x2Default) (this4) );
		//line 42 "/shared/hxmath/test/Test2D.hx"
		self1.a -= n.a;
		//line 42 "/shared/hxmath/test/Test2D.hx"
		self1.b -= n.b;
		//line 42 "/shared/hxmath/test/Test2D.hx"
		self1.c -= n.c;
		//line 42 "/shared/hxmath/test/Test2D.hx"
		self1.d -= n.d;
		//line 43 "/shared/hxmath/test/Test2D.hx"
		double normSq = ( ( ( ( self1.a * self1.a ) + ( self1.b * self1.b ) ) + ( self1.c * self1.c ) ) + ( self1.d * self1.d ) );
		//line 44 "/shared/hxmath/test/Test2D.hx"
		this.assertTrue(( normSq < 1e-6 ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testTranspose"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (44) )) )}));
	}
	
	
	public void testRotation()
	{
		//line 52 "/shared/hxmath/test/Test2D.hx"
		double angle = ( java.lang.Math.PI / 2.0 );
		//line 52 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Matrix2x2Default this1 = new hxmath.math.Matrix2x2Default(0.0, 0.0, 0.0, 0.0);
		//line 52 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Matrix2x2Default self = ((hxmath.math.Matrix2x2Default) (this1) );
		//line 52 "/shared/hxmath/test/Test2D.hx"
		double s = java.lang.Math.sin(angle);
		//line 52 "/shared/hxmath/test/Test2D.hx"
		double c = java.lang.Math.cos(angle);
		//line 52 "/shared/hxmath/test/Test2D.hx"
		self.a = c;
		//line 52 "/shared/hxmath/test/Test2D.hx"
		self.b =  - (s) ;
		//line 52 "/shared/hxmath/test/Test2D.hx"
		self.c = s;
		//line 52 "/shared/hxmath/test/Test2D.hx"
		self.d = c;
		//line 52 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this2 = new hxmath.math.Vector2Default(1.0, 0.0);
		//line 52 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default v = ((hxmath.math.Vector2Default) (this2) );
		//line 52 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this3 = new hxmath.math.Vector2Default(( ( self.a * v.x ) + ( self.b * v.y ) ), ( ( self.c * v.x ) + ( self.d * v.y ) ));
		//line 52 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default a = ((hxmath.math.Vector2Default) (this3) );
		//line 52 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this4 = new hxmath.math.Vector2Default(0.0, 1.0);
		//line 52 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default b = ((hxmath.math.Vector2Default) (this4) );
		//line 52 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this5 = new hxmath.math.Vector2Default(a.x, a.y);
		//line 52 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default self1 = ((hxmath.math.Vector2Default) (this5) );
		//line 52 "/shared/hxmath/test/Test2D.hx"
		self1.x -= b.x;
		//line 52 "/shared/hxmath/test/Test2D.hx"
		self1.y -= b.y;
		//line 52 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default self2 = ((hxmath.math.Vector2Default) (self1) );
		//line 52 "/shared/hxmath/test/Test2D.hx"
		this.assertApproxEquals(0.0, java.lang.Math.sqrt(( ( self2.x * self2.x ) + ( self2.y * self2.y ) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testRotation"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (52) )) )}));
		//line 53 "/shared/hxmath/test/Test2D.hx"
		double angle1 = ( java.lang.Math.PI / 2.0 );
		//line 53 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Matrix2x2Default this6 = new hxmath.math.Matrix2x2Default(0.0, 0.0, 0.0, 0.0);
		//line 53 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Matrix2x2Default self3 = ((hxmath.math.Matrix2x2Default) (this6) );
		//line 53 "/shared/hxmath/test/Test2D.hx"
		double s1 = java.lang.Math.sin(angle1);
		//line 53 "/shared/hxmath/test/Test2D.hx"
		double c1 = java.lang.Math.cos(angle1);
		//line 53 "/shared/hxmath/test/Test2D.hx"
		self3.a = c1;
		//line 53 "/shared/hxmath/test/Test2D.hx"
		self3.b =  - (s1) ;
		//line 53 "/shared/hxmath/test/Test2D.hx"
		self3.c = s1;
		//line 53 "/shared/hxmath/test/Test2D.hx"
		self3.d = c1;
		//line 53 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this7 = new hxmath.math.Vector2Default(0.0, 1.0);
		//line 53 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default v1 = ((hxmath.math.Vector2Default) (this7) );
		//line 53 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this8 = new hxmath.math.Vector2Default(( ( self3.a * v1.x ) + ( self3.b * v1.y ) ), ( ( self3.c * v1.x ) + ( self3.d * v1.y ) ));
		//line 53 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default a1 = ((hxmath.math.Vector2Default) (this8) );
		//line 53 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this9 = new hxmath.math.Vector2Default(1.0, 0.0);
		//line 53 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default b1 = ((hxmath.math.Vector2Default) (this9) );
		//line 53 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this10 = new hxmath.math.Vector2Default(a1.x, a1.y);
		//line 53 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default self4 = ((hxmath.math.Vector2Default) (this10) );
		//line 53 "/shared/hxmath/test/Test2D.hx"
		self4.x += b1.x;
		//line 53 "/shared/hxmath/test/Test2D.hx"
		self4.y += b1.y;
		//line 53 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default self5 = ((hxmath.math.Vector2Default) (self4) );
		//line 53 "/shared/hxmath/test/Test2D.hx"
		this.assertApproxEquals(0.0, java.lang.Math.sqrt(( ( self5.x * self5.x ) + ( self5.y * self5.y ) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testRotation"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (53) )) )}));
	}
	
	
	public void testVectorRotate()
	{
		//line 61 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this1 = new hxmath.math.Vector2Default(1.0, 0.0);
		//line 61 "/shared/hxmath/test/Test2D.hx"
		double angle = ( java.lang.Math.PI / 2.0 );
		//line 61 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this2 = new hxmath.math.Vector2Default(0.0, 0.0);
		//line 61 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default pivot = ((hxmath.math.Vector2Default) (this2) );
		//line 61 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default self = ((hxmath.math.Vector2Default) (this1) );
		//line 61 "/shared/hxmath/test/Test2D.hx"
		java.lang.Math.cos(angle);
		//line 61 "/shared/hxmath/test/Test2D.hx"
		java.lang.Math.sin(angle);
		//line 61 "/shared/hxmath/test/Test2D.hx"
		double dx = ( self.x - pivot.x );
		//line 61 "/shared/hxmath/test/Test2D.hx"
		double dy = ( self.y - pivot.y );
		//line 61 "/shared/hxmath/test/Test2D.hx"
		self.x = ( ( dx * java.lang.Math.cos(angle) ) - ( dy * java.lang.Math.sin(angle) ) );
		//line 61 "/shared/hxmath/test/Test2D.hx"
		self.y = ( ( dx * java.lang.Math.sin(angle) ) + ( dy * java.lang.Math.cos(angle) ) );
		//line 61 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this3 = new hxmath.math.Vector2Default(0.0, 1.0);
		//line 61 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default b = ((hxmath.math.Vector2Default) (this3) );
		//line 61 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this4 = new hxmath.math.Vector2Default(self.x, self.y);
		//line 61 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default self1 = ((hxmath.math.Vector2Default) (this4) );
		//line 61 "/shared/hxmath/test/Test2D.hx"
		self1.x -= b.x;
		//line 61 "/shared/hxmath/test/Test2D.hx"
		self1.y -= b.y;
		//line 61 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default self2 = ((hxmath.math.Vector2Default) (self1) );
		//line 61 "/shared/hxmath/test/Test2D.hx"
		this.assertApproxEquals(0.0, java.lang.Math.sqrt(( ( self2.x * self2.x ) + ( self2.y * self2.y ) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testVectorRotate"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (61) )) )}));
		//line 62 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this5 = new hxmath.math.Vector2Default(0.0, 1.0);
		//line 62 "/shared/hxmath/test/Test2D.hx"
		double angle1 = ( java.lang.Math.PI / 2.0 );
		//line 62 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this6 = new hxmath.math.Vector2Default(0.0, 0.0);
		//line 62 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default pivot1 = ((hxmath.math.Vector2Default) (this6) );
		//line 62 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default self3 = ((hxmath.math.Vector2Default) (this5) );
		//line 62 "/shared/hxmath/test/Test2D.hx"
		java.lang.Math.cos(angle1);
		//line 62 "/shared/hxmath/test/Test2D.hx"
		java.lang.Math.sin(angle1);
		//line 62 "/shared/hxmath/test/Test2D.hx"
		double dx1 = ( self3.x - pivot1.x );
		//line 62 "/shared/hxmath/test/Test2D.hx"
		double dy1 = ( self3.y - pivot1.y );
		//line 62 "/shared/hxmath/test/Test2D.hx"
		self3.x = ( ( dx1 * java.lang.Math.cos(angle1) ) - ( dy1 * java.lang.Math.sin(angle1) ) );
		//line 62 "/shared/hxmath/test/Test2D.hx"
		self3.y = ( ( dx1 * java.lang.Math.sin(angle1) ) + ( dy1 * java.lang.Math.cos(angle1) ) );
		//line 62 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this7 = new hxmath.math.Vector2Default(1.0, 0.0);
		//line 62 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default b1 = ((hxmath.math.Vector2Default) (this7) );
		//line 62 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this8 = new hxmath.math.Vector2Default(self3.x, self3.y);
		//line 62 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default self4 = ((hxmath.math.Vector2Default) (this8) );
		//line 62 "/shared/hxmath/test/Test2D.hx"
		self4.x += b1.x;
		//line 62 "/shared/hxmath/test/Test2D.hx"
		self4.y += b1.y;
		//line 62 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default self5 = ((hxmath.math.Vector2Default) (self4) );
		//line 62 "/shared/hxmath/test/Test2D.hx"
		this.assertApproxEquals(0.0, java.lang.Math.sqrt(( ( self5.x * self5.x ) + ( self5.y * self5.y ) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testVectorRotate"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (62) )) )}));
	}
	
	
	public void testPolarConversion()
	{
		//line 67 "/shared/hxmath/test/Test2D.hx"
		double angle = java.lang.Math.PI;
		//line 67 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this1 = new hxmath.math.Vector2Default(java.lang.Math.cos(angle), java.lang.Math.sin(angle));
		//line 67 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default a = ((hxmath.math.Vector2Default) (this1) );
		//line 67 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this2 = new hxmath.math.Vector2Default(1.0, 0.0);
		//line 67 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default b = ((hxmath.math.Vector2Default) (this2) );
		//line 67 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this3 = new hxmath.math.Vector2Default(a.x, a.y);
		//line 67 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default self = ((hxmath.math.Vector2Default) (this3) );
		//line 67 "/shared/hxmath/test/Test2D.hx"
		self.x += b.x;
		//line 67 "/shared/hxmath/test/Test2D.hx"
		self.y += b.y;
		//line 67 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default self1 = ((hxmath.math.Vector2Default) (self) );
		//line 67 "/shared/hxmath/test/Test2D.hx"
		this.assertApproxEquals(0.0, java.lang.Math.sqrt(( ( self1.x * self1.x ) + ( self1.y * self1.y ) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testPolarConversion"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (67) )) )}));
		//line 70 "/shared/hxmath/test/Test2D.hx"
		double tmp = java.lang.Math.PI;
		//line 70 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this4 = new hxmath.math.Vector2Default(1.0, 0.0);
		//line 70 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default a1 = ((hxmath.math.Vector2Default) (this4) );
		//line 70 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this5 = new hxmath.math.Vector2Default( - (a1.x) ,  - (a1.y) );
		//line 70 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default self2 = ((hxmath.math.Vector2Default) (this5) );
		//line 70 "/shared/hxmath/test/Test2D.hx"
		this.assertApproxEquals(tmp, java.lang.Math.abs(java.lang.Math.atan2(self2.y, self2.x)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testPolarConversion"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (70) )) )}));
	}
	
	
	public void testNorms()
	{
		//line 75 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this1 = new hxmath.math.Vector2Default(0.0, 1.0);
		//line 75 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default self = ((hxmath.math.Vector2Default) (this1) );
		//line 75 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this2 = new hxmath.math.Vector2Default(self.x, self.y);
		//line 75 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default self1 = ((hxmath.math.Vector2Default) (this2) );
		//line 75 "/shared/hxmath/test/Test2D.hx"
		double length = java.lang.Math.sqrt(( ( self1.x * self1.x ) + ( self1.y * self1.y ) ));
		//line 75 "/shared/hxmath/test/Test2D.hx"
		if (( length > 0.0 )) 
		{
			//line 75 "/shared/hxmath/test/Test2D.hx"
			self1.x /= length;
			//line 75 "/shared/hxmath/test/Test2D.hx"
			self1.y /= length;
		}
		
		//line 75 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default self2 = ((hxmath.math.Vector2Default) (self1) );
		//line 75 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this3 = new hxmath.math.Vector2Default(self2.x, self2.y);
		//line 75 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default self3 = ((hxmath.math.Vector2Default) (this3) );
		//line 75 "/shared/hxmath/test/Test2D.hx"
		double newX =  - (self3.y) ;
		//line 75 "/shared/hxmath/test/Test2D.hx"
		self3.y = self3.x;
		//line 75 "/shared/hxmath/test/Test2D.hx"
		self3.x = newX;
		//line 75 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this4 = new hxmath.math.Vector2Default(((double) (-1) ), ((double) (0) ));
		//line 75 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default b = ((hxmath.math.Vector2Default) (this4) );
		//line 75 "/shared/hxmath/test/Test2D.hx"
		this.assertTrue(( ( ( self3.x * b.x ) + ( self3.y * b.y ) ) > 0.0 ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testNorms"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (75) )) )}));
		//line 76 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this5 = new hxmath.math.Vector2Default(0.0, 1.0);
		//line 76 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default self4 = ((hxmath.math.Vector2Default) (this5) );
		//line 76 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this6 = new hxmath.math.Vector2Default(self4.x, self4.y);
		//line 76 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default self5 = ((hxmath.math.Vector2Default) (this6) );
		//line 76 "/shared/hxmath/test/Test2D.hx"
		double length1 = java.lang.Math.sqrt(( ( self5.x * self5.x ) + ( self5.y * self5.y ) ));
		//line 76 "/shared/hxmath/test/Test2D.hx"
		if (( length1 > 0.0 )) 
		{
			//line 76 "/shared/hxmath/test/Test2D.hx"
			self5.x /= length1;
			//line 76 "/shared/hxmath/test/Test2D.hx"
			self5.y /= length1;
		}
		
		//line 76 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default self6 = ((hxmath.math.Vector2Default) (self5) );
		//line 76 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this7 = new hxmath.math.Vector2Default(self6.x, self6.y);
		//line 76 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default self7 = ((hxmath.math.Vector2Default) (this7) );
		//line 76 "/shared/hxmath/test/Test2D.hx"
		double newX1 = self7.y;
		//line 76 "/shared/hxmath/test/Test2D.hx"
		self7.y =  - (self7.x) ;
		//line 76 "/shared/hxmath/test/Test2D.hx"
		self7.x = newX1;
		//line 76 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this8 = new hxmath.math.Vector2Default(((double) (-1) ), ((double) (0) ));
		//line 76 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default b1 = ((hxmath.math.Vector2Default) (this8) );
		//line 76 "/shared/hxmath/test/Test2D.hx"
		this.assertTrue(( ( ( self7.x * b1.x ) + ( self7.y * b1.y ) ) < 0.0 ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testNorms"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (76) )) )}));
	}
	
	
	public void testAngles()
	{
		//line 81 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this1 = new hxmath.math.Vector2Default(0.0, 1.0);
		//line 81 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this2 = new hxmath.math.Vector2Default(((double) (-1) ), ((double) (1) ));
		//line 81 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default b = ((hxmath.math.Vector2Default) (this2) );
		//line 81 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default self = ((hxmath.math.Vector2Default) (this1) );
		//line 81 "/shared/hxmath/test/Test2D.hx"
		double x = ( ( self.x * b.y ) - ( b.x * self.y ) );
		//line 81 "/shared/hxmath/test/Test2D.hx"
		double w = ((double) (0) );
		//line 81 "/shared/hxmath/test/Test2D.hx"
		this.assertApproxEquals(( (( (( java.lang.Math.abs(x) < w )) ? (0) : (( (( x <=  - (w)  )) ? (-1) : (1) )) )) * java.lang.Math.acos(( (( ( self.x * b.x ) + ( self.y * b.y ) )) / (( java.lang.Math.sqrt(( ( self.x * self.x ) + ( self.y * self.y ) )) * java.lang.Math.sqrt(( ( b.x * b.x ) + ( b.y * b.y ) )) )) )) ), ( java.lang.Math.PI / 4.0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testAngles"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (81) )) )}));
		//line 82 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this3 = new hxmath.math.Vector2Default(0.0, 1.0);
		//line 82 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this4 = new hxmath.math.Vector2Default(((double) (1) ), ((double) (1) ));
		//line 82 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default b1 = ((hxmath.math.Vector2Default) (this4) );
		//line 82 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default self1 = ((hxmath.math.Vector2Default) (this3) );
		//line 82 "/shared/hxmath/test/Test2D.hx"
		double x1 = ( ( self1.x * b1.y ) - ( b1.x * self1.y ) );
		//line 82 "/shared/hxmath/test/Test2D.hx"
		double w1 = ((double) (0) );
		//line 82 "/shared/hxmath/test/Test2D.hx"
		this.assertApproxEquals(( (( (( java.lang.Math.abs(x1) < w1 )) ? (0) : (( (( x1 <=  - (w1)  )) ? (-1) : (1) )) )) * java.lang.Math.acos(( (( ( self1.x * b1.x ) + ( self1.y * b1.y ) )) / (( java.lang.Math.sqrt(( ( self1.x * self1.x ) + ( self1.y * self1.y ) )) * java.lang.Math.sqrt(( ( b1.x * b1.x ) + ( b1.y * b1.y ) )) )) )) ), (  - (java.lang.Math.PI)  / 4.0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testAngles"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (82) )) )}));
		//line 83 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this5 = new hxmath.math.Vector2Default(0.0, 1.0);
		//line 83 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this6 = new hxmath.math.Vector2Default(((double) (-1) ), ((double) (-1) ));
		//line 83 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default b2 = ((hxmath.math.Vector2Default) (this6) );
		//line 83 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default self2 = ((hxmath.math.Vector2Default) (this5) );
		//line 83 "/shared/hxmath/test/Test2D.hx"
		double x2 = ( ( self2.x * b2.y ) - ( b2.x * self2.y ) );
		//line 83 "/shared/hxmath/test/Test2D.hx"
		double w2 = ((double) (0) );
		//line 83 "/shared/hxmath/test/Test2D.hx"
		this.assertApproxEquals(( (( (( java.lang.Math.abs(x2) < w2 )) ? (0) : (( (( x2 <=  - (w2)  )) ? (-1) : (1) )) )) * java.lang.Math.acos(( (( ( self2.x * b2.x ) + ( self2.y * b2.y ) )) / (( java.lang.Math.sqrt(( ( self2.x * self2.x ) + ( self2.y * self2.y ) )) * java.lang.Math.sqrt(( ( b2.x * b2.x ) + ( b2.y * b2.y ) )) )) )) ), ( ( 3.0 * java.lang.Math.PI ) / 4.0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testAngles"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (83) )) )}));
		//line 84 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this7 = new hxmath.math.Vector2Default(0.0, 1.0);
		//line 84 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this8 = new hxmath.math.Vector2Default(((double) (1) ), ((double) (-1) ));
		//line 84 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default b3 = ((hxmath.math.Vector2Default) (this8) );
		//line 84 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default self3 = ((hxmath.math.Vector2Default) (this7) );
		//line 84 "/shared/hxmath/test/Test2D.hx"
		double x3 = ( ( self3.x * b3.y ) - ( b3.x * self3.y ) );
		//line 84 "/shared/hxmath/test/Test2D.hx"
		double w3 = ((double) (0) );
		//line 84 "/shared/hxmath/test/Test2D.hx"
		this.assertApproxEquals(( (( (( java.lang.Math.abs(x3) < w3 )) ? (0) : (( (( x3 <=  - (w3)  )) ? (-1) : (1) )) )) * java.lang.Math.acos(( (( ( self3.x * b3.x ) + ( self3.y * b3.y ) )) / (( java.lang.Math.sqrt(( ( self3.x * self3.x ) + ( self3.y * self3.y ) )) * java.lang.Math.sqrt(( ( b3.x * b3.x ) + ( b3.y * b3.y ) )) )) )) ), ( ( -3. * java.lang.Math.PI ) / 4.0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testAngles"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (84) )) )}));
		//line 86 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this9 = new hxmath.math.Vector2Default(0.0, 1.0);
		//line 86 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this10 = new hxmath.math.Vector2Default(1.0, 0.0);
		//line 86 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default b4 = ((hxmath.math.Vector2Default) (this10) );
		//line 86 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default self4 = ((hxmath.math.Vector2Default) (this9) );
		//line 86 "/shared/hxmath/test/Test2D.hx"
		double x4 = ( ( self4.x * b4.y ) - ( b4.x * self4.y ) );
		//line 86 "/shared/hxmath/test/Test2D.hx"
		double w4 = ((double) (0) );
		//line 86 "/shared/hxmath/test/Test2D.hx"
		this.assertApproxEquals(( (( (( java.lang.Math.abs(x4) < w4 )) ? (0) : (( (( x4 <=  - (w4)  )) ? (-1) : (1) )) )) * java.lang.Math.acos(( (( ( self4.x * b4.x ) + ( self4.y * b4.y ) )) / (( java.lang.Math.sqrt(( ( self4.x * self4.x ) + ( self4.y * self4.y ) )) * java.lang.Math.sqrt(( ( b4.x * b4.x ) + ( b4.y * b4.y ) )) )) )) ), (  - (java.lang.Math.PI)  / 2.0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testAngles"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (86) )) )}));
		//line 87 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this11 = new hxmath.math.Vector2Default(1.0, 0.0);
		//line 87 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this12 = new hxmath.math.Vector2Default(0.0, 1.0);
		//line 87 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default b5 = ((hxmath.math.Vector2Default) (this12) );
		//line 87 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default self5 = ((hxmath.math.Vector2Default) (this11) );
		//line 87 "/shared/hxmath/test/Test2D.hx"
		double x5 = ( ( self5.x * b5.y ) - ( b5.x * self5.y ) );
		//line 87 "/shared/hxmath/test/Test2D.hx"
		double w5 = ((double) (0) );
		//line 87 "/shared/hxmath/test/Test2D.hx"
		this.assertApproxEquals(( (( (( java.lang.Math.abs(x5) < w5 )) ? (0) : (( (( x5 <=  - (w5)  )) ? (-1) : (1) )) )) * java.lang.Math.acos(( (( ( self5.x * b5.x ) + ( self5.y * b5.y ) )) / (( java.lang.Math.sqrt(( ( self5.x * self5.x ) + ( self5.y * self5.y ) )) * java.lang.Math.sqrt(( ( b5.x * b5.x ) + ( b5.y * b5.y ) )) )) )) ), ( java.lang.Math.PI / 2.0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testAngles"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (87) )) )}));
		//line 89 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this13 = new hxmath.math.Vector2Default(0.0, 1.0);
		//line 89 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this14 = new hxmath.math.Vector2Default(1.0, 0.0);
		//line 89 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default b6 = ((hxmath.math.Vector2Default) (this14) );
		//line 89 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default self6 = ((hxmath.math.Vector2Default) (this13) );
		//line 89 "/shared/hxmath/test/Test2D.hx"
		this.assertApproxEquals(java.lang.Math.acos(( (( ( self6.x * b6.x ) + ( self6.y * b6.y ) )) / (( java.lang.Math.sqrt(( ( self6.x * self6.x ) + ( self6.y * self6.y ) )) * java.lang.Math.sqrt(( ( b6.x * b6.x ) + ( b6.y * b6.y ) )) )) )), ( java.lang.Math.PI / 2.0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testAngles"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (89) )) )}));
		//line 90 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this15 = new hxmath.math.Vector2Default(1.0, 0.0);
		//line 90 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default this16 = new hxmath.math.Vector2Default(0.0, 1.0);
		//line 90 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default b7 = ((hxmath.math.Vector2Default) (this16) );
		//line 90 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Vector2Default self7 = ((hxmath.math.Vector2Default) (this15) );
		//line 90 "/shared/hxmath/test/Test2D.hx"
		this.assertApproxEquals(java.lang.Math.acos(( (( ( self7.x * b7.x ) + ( self7.y * b7.y ) )) / (( java.lang.Math.sqrt(( ( self7.x * self7.x ) + ( self7.y * self7.y ) )) * java.lang.Math.sqrt(( ( b7.x * b7.x ) + ( b7.y * b7.y ) )) )) )), ( java.lang.Math.PI / 2.0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testAngles"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (90) )) )}));
	}
	
	
	public void testOrbit()
	{
		//line 95 "/shared/hxmath/test/Test2D.hx"
		int _g = 0;
		//line 95 "/shared/hxmath/test/Test2D.hx"
		while (( _g < 5 ))
		{
			//line 95 "/shared/hxmath/test/Test2D.hx"
			 ++ _g;
			//line 97 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default a = this.randomVector2(null);
			//line 97 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default this1 = new hxmath.math.Vector2Default(((double) (1) ), ((double) (1) ));
			//line 97 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default b = ((hxmath.math.Vector2Default) (this1) );
			//line 97 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default this2 = new hxmath.math.Vector2Default(a.x, a.y);
			//line 97 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default self = ((hxmath.math.Vector2Default) (this2) );
			//line 97 "/shared/hxmath/test/Test2D.hx"
			self.x += b.x;
			//line 97 "/shared/hxmath/test/Test2D.hx"
			self.y += b.y;
			//line 98 "/shared/hxmath/test/Test2D.hx"
			double angle = ( java.lang.Math.PI / 2 );
			//line 98 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Matrix3x2Default this3 = new hxmath.math.Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0);
			//line 98 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Matrix3x2Default m = ((hxmath.math.Matrix3x2Default) (this3) );
			//line 98 "/shared/hxmath/test/Test2D.hx"
			{
				//line 98 "/shared/hxmath/test/Test2D.hx"
				hxmath.math.Matrix2x2Default this4 = new hxmath.math.Matrix2x2Default(0.0, 0.0, 0.0, 0.0);
				//line 98 "/shared/hxmath/test/Test2D.hx"
				hxmath.math.Matrix2x2Default self1 = ((hxmath.math.Matrix2x2Default) (this4) );
				//line 98 "/shared/hxmath/test/Test2D.hx"
				double s = java.lang.Math.sin(angle);
				//line 98 "/shared/hxmath/test/Test2D.hx"
				double c = java.lang.Math.cos(angle);
				//line 98 "/shared/hxmath/test/Test2D.hx"
				self1.a = c;
				//line 98 "/shared/hxmath/test/Test2D.hx"
				self1.b =  - (s) ;
				//line 98 "/shared/hxmath/test/Test2D.hx"
				self1.c = s;
				//line 98 "/shared/hxmath/test/Test2D.hx"
				self1.d = c;
				//line 98 "/shared/hxmath/test/Test2D.hx"
				m.a = self1.a;
				//line 98 "/shared/hxmath/test/Test2D.hx"
				m.b = self1.b;
				//line 98 "/shared/hxmath/test/Test2D.hx"
				m.c = self1.c;
				//line 98 "/shared/hxmath/test/Test2D.hx"
				m.d = self1.d;
			}
			
			//line 98 "/shared/hxmath/test/Test2D.hx"
			{
				//line 98 "/shared/hxmath/test/Test2D.hx"
				hxmath.math.Matrix2x2Default this5 = new hxmath.math.Matrix2x2Default(m.a, m.b, m.c, m.d);
				//line 98 "/shared/hxmath/test/Test2D.hx"
				hxmath.math.Matrix2x2Default m1 = ((hxmath.math.Matrix2x2Default) (this5) );
				//line 98 "/shared/hxmath/test/Test2D.hx"
				hxmath.math.Vector2Default this6 = new hxmath.math.Vector2Default(( ( m1.a * self.x ) + ( m1.b * self.y ) ), ( ( m1.c * self.x ) + ( m1.d * self.y ) ));
				//line 98 "/shared/hxmath/test/Test2D.hx"
				hxmath.math.Vector2Default b1 = ((hxmath.math.Vector2Default) (this6) );
				//line 98 "/shared/hxmath/test/Test2D.hx"
				hxmath.math.Vector2Default this7 = new hxmath.math.Vector2Default(self.x, self.y);
				//line 98 "/shared/hxmath/test/Test2D.hx"
				hxmath.math.Vector2Default self2 = ((hxmath.math.Vector2Default) (this7) );
				//line 98 "/shared/hxmath/test/Test2D.hx"
				self2.x -= b1.x;
				//line 98 "/shared/hxmath/test/Test2D.hx"
				self2.y -= b1.y;
				//line 98 "/shared/hxmath/test/Test2D.hx"
				m.tx = self2.x;
				//line 98 "/shared/hxmath/test/Test2D.hx"
				m.ty = self2.y;
			}
			
			//line 100 "/shared/hxmath/test/Test2D.hx"
			{
				//line 100 "/shared/hxmath/test/Test2D.hx"
				int _g1 = 0;
				//line 100 "/shared/hxmath/test/Test2D.hx"
				while (( _g1 < 5 ))
				{
					//line 100 "/shared/hxmath/test/Test2D.hx"
					 ++ _g1;
					//line 102 "/shared/hxmath/test/Test2D.hx"
					hxmath.math.Vector2Default point = this.randomVector2(null);
					//line 103 "/shared/hxmath/test/Test2D.hx"
					hxmath.math.Matrix2x2Default this8 = new hxmath.math.Matrix2x2Default(m.a, m.b, m.c, m.d);
					//line 103 "/shared/hxmath/test/Test2D.hx"
					hxmath.math.Matrix2x2Default m2 = ((hxmath.math.Matrix2x2Default) (this8) );
					//line 103 "/shared/hxmath/test/Test2D.hx"
					hxmath.math.Vector2Default this9 = new hxmath.math.Vector2Default(( ( m2.a * point.x ) + ( m2.b * point.y ) ), ( ( m2.c * point.x ) + ( m2.d * point.y ) ));
					//line 103 "/shared/hxmath/test/Test2D.hx"
					hxmath.math.Vector2Default a1 = ((hxmath.math.Vector2Default) (this9) );
					//line 103 "/shared/hxmath/test/Test2D.hx"
					hxmath.math.Vector2Default this10 = new hxmath.math.Vector2Default(m.tx, m.ty);
					//line 103 "/shared/hxmath/test/Test2D.hx"
					hxmath.math.Vector2Default b2 = ((hxmath.math.Vector2Default) (this10) );
					//line 103 "/shared/hxmath/test/Test2D.hx"
					hxmath.math.Vector2Default this11 = new hxmath.math.Vector2Default(a1.x, a1.y);
					//line 103 "/shared/hxmath/test/Test2D.hx"
					hxmath.math.Vector2Default self3 = ((hxmath.math.Vector2Default) (this11) );
					//line 103 "/shared/hxmath/test/Test2D.hx"
					self3.x += b2.x;
					//line 103 "/shared/hxmath/test/Test2D.hx"
					self3.y += b2.y;
					//line 104 "/shared/hxmath/test/Test2D.hx"
					hxmath.math.Vector2Default this12 = new hxmath.math.Vector2Default(point.x, point.y);
					//line 104 "/shared/hxmath/test/Test2D.hx"
					hxmath.math.Vector2Default self4 = ((hxmath.math.Vector2Default) (this12) );
					//line 104 "/shared/hxmath/test/Test2D.hx"
					self4.x -= self.x;
					//line 104 "/shared/hxmath/test/Test2D.hx"
					self4.y -= self.y;
					//line 104 "/shared/hxmath/test/Test2D.hx"
					hxmath.math.Vector2Default this13 = new hxmath.math.Vector2Default(self3.x, self3.y);
					//line 104 "/shared/hxmath/test/Test2D.hx"
					hxmath.math.Vector2Default self5 = ((hxmath.math.Vector2Default) (this13) );
					//line 104 "/shared/hxmath/test/Test2D.hx"
					self5.x -= self.x;
					//line 104 "/shared/hxmath/test/Test2D.hx"
					self5.y -= self.y;
					//line 104 "/shared/hxmath/test/Test2D.hx"
					this.assertApproxEquals(0.0, ( ( self4.x * self5.x ) + ( self4.y * self5.y ) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testOrbit"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (104) )) )}));
				}
				
			}
			
		}
		
	}
	
	
	public void testLinearSubMatrix()
	{
		//line 111 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Matrix3x2Default this1 = new hxmath.math.Matrix3x2Default(1.0, 0.0, 0.0, 1.0, 0.0, 0.0);
		//line 111 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Matrix3x2Default m = ((hxmath.math.Matrix3x2Default) (this1) );
		//line 112 "/shared/hxmath/test/Test2D.hx"
		{
			//line 112 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Matrix2x2Default this2 = new hxmath.math.Matrix2x2Default(1.0, 2.0, 3.0, 4.0);
			//line 112 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Matrix2x2Default value = ((hxmath.math.Matrix2x2Default) (this2) );
			//line 112 "/shared/hxmath/test/Test2D.hx"
			m.a = value.a;
			//line 112 "/shared/hxmath/test/Test2D.hx"
			m.b = value.b;
			//line 112 "/shared/hxmath/test/Test2D.hx"
			m.c = value.c;
			//line 112 "/shared/hxmath/test/Test2D.hx"
			m.d = value.d;
		}
		
		//line 113 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Matrix2x2Default this3 = new hxmath.math.Matrix2x2Default(m.a, m.b, m.c, m.d);
		//line 113 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Matrix2x2Default m1 = ((hxmath.math.Matrix2x2Default) (this3) );
		//line 113 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Matrix2x2Default this4 = new hxmath.math.Matrix2x2Default(1.0, 2.0, 3.0, 4.0);
		//line 113 "/shared/hxmath/test/Test2D.hx"
		hxmath.math.Matrix2x2Default n = ((hxmath.math.Matrix2x2Default) (this4) );
		//line 113 "/shared/hxmath/test/Test2D.hx"
		this.assertTrue(( ( ( m1 == null ) && ( n == null ) ) || ( ( ( ( ( ( m1 != null ) && ( n != null ) ) && ( m1.a == n.a ) ) && ( m1.b == n.b ) ) && ( m1.c == n.c ) ) && ( m1.d == n.d ) ) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testLinearSubMatrix"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (113) )) )}));
	}
	
	
	public void testMatrixFrameInverse()
	{
		//line 118 "/shared/hxmath/test/Test2D.hx"
		int _g = 0;
		//line 118 "/shared/hxmath/test/Test2D.hx"
		while (( _g < 10 ))
		{
			//line 118 "/shared/hxmath/test/Test2D.hx"
			 ++ _g;
			//line 121 "/shared/hxmath/test/Test2D.hx"
			hxmath.frames.IFrame2 frame = this.randomFrame2(null);
			//line 124 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Matrix3x2Default self = ((hxmath.math.Matrix3x2Default) (frame.get_matrix()) );
			//line 124 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Matrix2x2Default this1 = new hxmath.math.Matrix2x2Default(self.a, self.b, self.c, self.d);
			//line 124 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default v = frame.get_offset();
			//line 124 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Matrix2x2Default self1 = ((hxmath.math.Matrix2x2Default) (this1) );
			//line 124 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default this2 = new hxmath.math.Vector2Default(( ( self1.a * v.x ) + ( self1.c * v.y ) ), ( ( self1.b * v.x ) + ( self1.d * v.y ) ));
			//line 124 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default self2 = ((hxmath.math.Vector2Default) (this2) );
			//line 124 "/shared/hxmath/test/Test2D.hx"
			self2.x =  - (self2.x) ;
			//line 124 "/shared/hxmath/test/Test2D.hx"
			self2.y =  - (self2.y) ;
			//line 124 "/shared/hxmath/test/Test2D.hx"
			hxmath.frames.IFrame2 invFrame = hxmath.frames._Frame2.Frame2_Impl_._new(self2,  - (frame.get_angleDegrees()) );
			//line 126 "/shared/hxmath/test/Test2D.hx"
			frame.get_matrix();
			//line 129 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Matrix3x2Default invFrameMatrix = invFrame.get_matrix();
			//line 130 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Matrix3x2Default self3 = ((hxmath.math.Matrix3x2Default) (frame.get_matrix()) );
			//line 130 "/shared/hxmath/test/Test2D.hx"
			{
				//line 130 "/shared/hxmath/test/Test2D.hx"
				double temp = self3.c;
				//line 130 "/shared/hxmath/test/Test2D.hx"
				self3.c = self3.b;
				//line 130 "/shared/hxmath/test/Test2D.hx"
				self3.b = temp;
			}
			
			//line 130 "/shared/hxmath/test/Test2D.hx"
			double tx =  - ((( ( self3.a * self3.tx ) + ( self3.b * self3.ty ) ))) ;
			//line 130 "/shared/hxmath/test/Test2D.hx"
			double ty =  - ((( ( self3.c * self3.tx ) + ( self3.d * self3.ty ) ))) ;
			//line 130 "/shared/hxmath/test/Test2D.hx"
			self3.tx = tx;
			//line 130 "/shared/hxmath/test/Test2D.hx"
			self3.ty = ty;
			//line 133 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default this3 = new hxmath.math.Vector2Default(0.0, 0.0);
			//line 133 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default homogenous0 = ((hxmath.math.Vector2Default) (this3) );
			//line 134 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default this4 = new hxmath.math.Vector2Default(1.0, 0.0);
			//line 134 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default homogenousX = ((hxmath.math.Vector2Default) (this4) );
			//line 135 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default this5 = new hxmath.math.Vector2Default(0.0, 1.0);
			//line 135 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default homogenousY = ((hxmath.math.Vector2Default) (this5) );
			//line 138 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Matrix2x2Default this6 = new hxmath.math.Matrix2x2Default(invFrameMatrix.a, invFrameMatrix.b, invFrameMatrix.c, invFrameMatrix.d);
			//line 138 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Matrix2x2Default m = ((hxmath.math.Matrix2x2Default) (this6) );
			//line 138 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default this7 = new hxmath.math.Vector2Default(( ( m.a * homogenous0.x ) + ( m.b * homogenous0.y ) ), ( ( m.c * homogenous0.x ) + ( m.d * homogenous0.y ) ));
			//line 138 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default a = ((hxmath.math.Vector2Default) (this7) );
			//line 138 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default this8 = new hxmath.math.Vector2Default(invFrameMatrix.tx, invFrameMatrix.ty);
			//line 138 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default b = ((hxmath.math.Vector2Default) (this8) );
			//line 138 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default this9 = new hxmath.math.Vector2Default(a.x, a.y);
			//line 138 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default self4 = ((hxmath.math.Vector2Default) (this9) );
			//line 138 "/shared/hxmath/test/Test2D.hx"
			self4.x += b.x;
			//line 138 "/shared/hxmath/test/Test2D.hx"
			self4.y += b.y;
			//line 138 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Matrix2x2Default this10 = new hxmath.math.Matrix2x2Default(self3.a, self3.b, self3.c, self3.d);
			//line 138 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Matrix2x2Default m1 = ((hxmath.math.Matrix2x2Default) (this10) );
			//line 138 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default this11 = new hxmath.math.Vector2Default(( ( m1.a * homogenous0.x ) + ( m1.b * homogenous0.y ) ), ( ( m1.c * homogenous0.x ) + ( m1.d * homogenous0.y ) ));
			//line 138 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default a1 = ((hxmath.math.Vector2Default) (this11) );
			//line 138 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default this12 = new hxmath.math.Vector2Default(self3.tx, self3.ty);
			//line 138 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default b1 = ((hxmath.math.Vector2Default) (this12) );
			//line 138 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default this13 = new hxmath.math.Vector2Default(a1.x, a1.y);
			//line 138 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default self5 = ((hxmath.math.Vector2Default) (this13) );
			//line 138 "/shared/hxmath/test/Test2D.hx"
			self5.x += b1.x;
			//line 138 "/shared/hxmath/test/Test2D.hx"
			self5.y += b1.y;
			//line 138 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default this14 = new hxmath.math.Vector2Default(self4.x, self4.y);
			//line 138 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default self6 = ((hxmath.math.Vector2Default) (this14) );
			//line 138 "/shared/hxmath/test/Test2D.hx"
			self6.x -= self5.x;
			//line 138 "/shared/hxmath/test/Test2D.hx"
			self6.y -= self5.y;
			//line 138 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default self7 = ((hxmath.math.Vector2Default) (self6) );
			//line 138 "/shared/hxmath/test/Test2D.hx"
			this.assertApproxEquals(0.0, ( ( self7.x * self7.x ) + ( self7.y * self7.y ) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testMatrixFrameInverse"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (138) )) )}));
			//line 139 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Matrix2x2Default this15 = new hxmath.math.Matrix2x2Default(invFrameMatrix.a, invFrameMatrix.b, invFrameMatrix.c, invFrameMatrix.d);
			//line 139 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Matrix2x2Default m2 = ((hxmath.math.Matrix2x2Default) (this15) );
			//line 139 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default this16 = new hxmath.math.Vector2Default(( ( m2.a * homogenousX.x ) + ( m2.b * homogenousX.y ) ), ( ( m2.c * homogenousX.x ) + ( m2.d * homogenousX.y ) ));
			//line 139 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default a2 = ((hxmath.math.Vector2Default) (this16) );
			//line 139 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default this17 = new hxmath.math.Vector2Default(invFrameMatrix.tx, invFrameMatrix.ty);
			//line 139 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default b2 = ((hxmath.math.Vector2Default) (this17) );
			//line 139 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default this18 = new hxmath.math.Vector2Default(a2.x, a2.y);
			//line 139 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default self8 = ((hxmath.math.Vector2Default) (this18) );
			//line 139 "/shared/hxmath/test/Test2D.hx"
			self8.x += b2.x;
			//line 139 "/shared/hxmath/test/Test2D.hx"
			self8.y += b2.y;
			//line 139 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Matrix2x2Default this19 = new hxmath.math.Matrix2x2Default(self3.a, self3.b, self3.c, self3.d);
			//line 139 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Matrix2x2Default m3 = ((hxmath.math.Matrix2x2Default) (this19) );
			//line 139 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default this20 = new hxmath.math.Vector2Default(( ( m3.a * homogenousX.x ) + ( m3.b * homogenousX.y ) ), ( ( m3.c * homogenousX.x ) + ( m3.d * homogenousX.y ) ));
			//line 139 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default a3 = ((hxmath.math.Vector2Default) (this20) );
			//line 139 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default this21 = new hxmath.math.Vector2Default(self3.tx, self3.ty);
			//line 139 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default b3 = ((hxmath.math.Vector2Default) (this21) );
			//line 139 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default this22 = new hxmath.math.Vector2Default(a3.x, a3.y);
			//line 139 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default self9 = ((hxmath.math.Vector2Default) (this22) );
			//line 139 "/shared/hxmath/test/Test2D.hx"
			self9.x += b3.x;
			//line 139 "/shared/hxmath/test/Test2D.hx"
			self9.y += b3.y;
			//line 139 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default this23 = new hxmath.math.Vector2Default(self8.x, self8.y);
			//line 139 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default self10 = ((hxmath.math.Vector2Default) (this23) );
			//line 139 "/shared/hxmath/test/Test2D.hx"
			self10.x -= self9.x;
			//line 139 "/shared/hxmath/test/Test2D.hx"
			self10.y -= self9.y;
			//line 139 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default self11 = ((hxmath.math.Vector2Default) (self10) );
			//line 139 "/shared/hxmath/test/Test2D.hx"
			this.assertApproxEquals(0.0, ( ( self11.x * self11.x ) + ( self11.y * self11.y ) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testMatrixFrameInverse"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (139) )) )}));
			//line 140 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Matrix2x2Default this24 = new hxmath.math.Matrix2x2Default(invFrameMatrix.a, invFrameMatrix.b, invFrameMatrix.c, invFrameMatrix.d);
			//line 140 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Matrix2x2Default m4 = ((hxmath.math.Matrix2x2Default) (this24) );
			//line 140 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default this25 = new hxmath.math.Vector2Default(( ( m4.a * homogenousY.x ) + ( m4.b * homogenousY.y ) ), ( ( m4.c * homogenousY.x ) + ( m4.d * homogenousY.y ) ));
			//line 140 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default a4 = ((hxmath.math.Vector2Default) (this25) );
			//line 140 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default this26 = new hxmath.math.Vector2Default(invFrameMatrix.tx, invFrameMatrix.ty);
			//line 140 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default b4 = ((hxmath.math.Vector2Default) (this26) );
			//line 140 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default this27 = new hxmath.math.Vector2Default(a4.x, a4.y);
			//line 140 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default self12 = ((hxmath.math.Vector2Default) (this27) );
			//line 140 "/shared/hxmath/test/Test2D.hx"
			self12.x += b4.x;
			//line 140 "/shared/hxmath/test/Test2D.hx"
			self12.y += b4.y;
			//line 140 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Matrix2x2Default this28 = new hxmath.math.Matrix2x2Default(self3.a, self3.b, self3.c, self3.d);
			//line 140 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Matrix2x2Default m5 = ((hxmath.math.Matrix2x2Default) (this28) );
			//line 140 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default this29 = new hxmath.math.Vector2Default(( ( m5.a * homogenousY.x ) + ( m5.b * homogenousY.y ) ), ( ( m5.c * homogenousY.x ) + ( m5.d * homogenousY.y ) ));
			//line 140 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default a5 = ((hxmath.math.Vector2Default) (this29) );
			//line 140 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default this30 = new hxmath.math.Vector2Default(self3.tx, self3.ty);
			//line 140 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default b5 = ((hxmath.math.Vector2Default) (this30) );
			//line 140 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default this31 = new hxmath.math.Vector2Default(a5.x, a5.y);
			//line 140 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default self13 = ((hxmath.math.Vector2Default) (this31) );
			//line 140 "/shared/hxmath/test/Test2D.hx"
			self13.x += b5.x;
			//line 140 "/shared/hxmath/test/Test2D.hx"
			self13.y += b5.y;
			//line 140 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default this32 = new hxmath.math.Vector2Default(self12.x, self12.y);
			//line 140 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default self14 = ((hxmath.math.Vector2Default) (this32) );
			//line 140 "/shared/hxmath/test/Test2D.hx"
			self14.x -= self13.x;
			//line 140 "/shared/hxmath/test/Test2D.hx"
			self14.y -= self13.y;
			//line 140 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default self15 = ((hxmath.math.Vector2Default) (self14) );
			//line 140 "/shared/hxmath/test/Test2D.hx"
			this.assertApproxEquals(0.0, ( ( self15.x * self15.x ) + ( self15.y * self15.y ) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testMatrixFrameInverse"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (140) )) )}));
		}
		
	}
	
	
	public void testOrthoNormalize()
	{
		//line 146 "/shared/hxmath/test/Test2D.hx"
		int _g = 0;
		//line 146 "/shared/hxmath/test/Test2D.hx"
		while (( _g < 10 ))
		{
			//line 146 "/shared/hxmath/test/Test2D.hx"
			 ++ _g;
			//line 148 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default u = this.randomVector2(null);
			//line 149 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default v = this.randomVector2(null);
			//line 151 "/shared/hxmath/test/Test2D.hx"
			{
				//line 151 "/shared/hxmath/test/Test2D.hx"
				{
					//line 151 "/shared/hxmath/test/Test2D.hx"
					double length = java.lang.Math.sqrt(( ( u.x * u.x ) + ( u.y * u.y ) ));
					//line 151 "/shared/hxmath/test/Test2D.hx"
					if (( length > 0.0 )) 
					{
						//line 151 "/shared/hxmath/test/Test2D.hx"
						u.x /= length;
						//line 151 "/shared/hxmath/test/Test2D.hx"
						u.y /= length;
					}
					
				}
				
				//line 151 "/shared/hxmath/test/Test2D.hx"
				{
					//line 151 "/shared/hxmath/test/Test2D.hx"
					hxmath.math.Vector2Default this1 = new hxmath.math.Vector2Default(v.x, v.y);
					//line 151 "/shared/hxmath/test/Test2D.hx"
					hxmath.math.Vector2Default self = ((hxmath.math.Vector2Default) (this1) );
					//line 151 "/shared/hxmath/test/Test2D.hx"
					double s = ( (( ( self.x * u.x ) + ( self.y * u.y ) )) / (( ( u.x * u.x ) + ( u.y * u.y ) )) );
					//line 151 "/shared/hxmath/test/Test2D.hx"
					{
						//line 151 "/shared/hxmath/test/Test2D.hx"
						int _g1 = 0;
						//line 151 "/shared/hxmath/test/Test2D.hx"
						while (( _g1 < 2 ))
						{
							//line 151 "/shared/hxmath/test/Test2D.hx"
							int i = _g1++;
							//line 151 "/shared/hxmath/test/Test2D.hx"
							{
								//line 151 "/shared/hxmath/test/Test2D.hx"
								java.lang.Object tmp = null;
								//line 151 "/shared/hxmath/test/Test2D.hx"
								switch (i)
								{
									case 0:
									{
										//line 151 "/shared/hxmath/test/Test2D.hx"
										tmp = u.x;
										//line 151 "/shared/hxmath/test/Test2D.hx"
										break;
									}
									
									
									case 1:
									{
										//line 151 "/shared/hxmath/test/Test2D.hx"
										tmp = u.y;
										//line 151 "/shared/hxmath/test/Test2D.hx"
										break;
									}
									
									
									default:
									{
										//line 151 "/shared/hxmath/test/Test2D.hx"
										throw haxe.lang.HaxeException.wrap("Invalid element");
									}
									
								}
								
								//line 151 "/shared/hxmath/test/Test2D.hx"
								double value = ((double) (haxe.lang.Runtime.toDouble(tmp)) );
								//line 151 "/shared/hxmath/test/Test2D.hx"
								switch (i)
								{
									case 0:
									{
										//line 151 "/shared/hxmath/test/Test2D.hx"
										self.x = value;
										//line 151 "/shared/hxmath/test/Test2D.hx"
										break;
									}
									
									
									case 1:
									{
										//line 151 "/shared/hxmath/test/Test2D.hx"
										self.y = value;
										//line 151 "/shared/hxmath/test/Test2D.hx"
										break;
									}
									
									
									default:
									{
										//line 151 "/shared/hxmath/test/Test2D.hx"
										throw haxe.lang.HaxeException.wrap("Invalid element");
									}
									
								}
								
							}
							
						}
						
					}
					
					//line 151 "/shared/hxmath/test/Test2D.hx"
					{
						//line 151 "/shared/hxmath/test/Test2D.hx"
						self.x *= s;
						//line 151 "/shared/hxmath/test/Test2D.hx"
						self.y *= s;
					}
					
					//line 151 "/shared/hxmath/test/Test2D.hx"
					v.x -= self.x;
					//line 151 "/shared/hxmath/test/Test2D.hx"
					v.y -= self.y;
				}
				
				//line 151 "/shared/hxmath/test/Test2D.hx"
				{
					//line 151 "/shared/hxmath/test/Test2D.hx"
					double length1 = java.lang.Math.sqrt(( ( v.x * v.x ) + ( v.y * v.y ) ));
					//line 151 "/shared/hxmath/test/Test2D.hx"
					if (( length1 > 0.0 )) 
					{
						//line 151 "/shared/hxmath/test/Test2D.hx"
						v.x /= length1;
						//line 151 "/shared/hxmath/test/Test2D.hx"
						v.y /= length1;
					}
					
				}
				
			}
			
			//line 153 "/shared/hxmath/test/Test2D.hx"
			this.assertApproxEquals(1.0, java.lang.Math.sqrt(( ( u.x * u.x ) + ( u.y * u.y ) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testOrthoNormalize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (153) )) )}));
			//line 154 "/shared/hxmath/test/Test2D.hx"
			this.assertApproxEquals(1.0, java.lang.Math.sqrt(( ( v.x * v.x ) + ( v.y * v.y ) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testOrthoNormalize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (154) )) )}));
			//line 155 "/shared/hxmath/test/Test2D.hx"
			this.assertApproxEquals(0.0, ( ( u.x * v.x ) + ( u.y * v.y ) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testOrthoNormalize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (155) )) )}));
		}
		
	}
	
	
	public void testReflect()
	{
		//line 161 "/shared/hxmath/test/Test2D.hx"
		int _g = 0;
		//line 161 "/shared/hxmath/test/Test2D.hx"
		while (( _g < 10 ))
		{
			//line 161 "/shared/hxmath/test/Test2D.hx"
			 ++ _g;
			//line 163 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default u = this.randomVector2(null);
			//line 164 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default this1 = new hxmath.math.Vector2Default(0.0, 1.0);
			//line 164 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default normal = ((hxmath.math.Vector2Default) (this1) );
			//line 164 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default this2 = new hxmath.math.Vector2Default(u.x, u.y);
			//line 164 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default self = ((hxmath.math.Vector2Default) (this2) );
			//line 164 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default this3 = new hxmath.math.Vector2Default(self.x, self.y);
			//line 164 "/shared/hxmath/test/Test2D.hx"
			hxmath.math.Vector2Default self1 = ((hxmath.math.Vector2Default) (this3) );
			//line 164 "/shared/hxmath/test/Test2D.hx"
			double s = ( (( ( self1.x * normal.x ) + ( self1.y * normal.y ) )) / (( ( normal.x * normal.x ) + ( normal.y * normal.y ) )) );
			//line 164 "/shared/hxmath/test/Test2D.hx"
			{
				//line 164 "/shared/hxmath/test/Test2D.hx"
				int _g1 = 0;
				//line 164 "/shared/hxmath/test/Test2D.hx"
				while (( _g1 < 2 ))
				{
					//line 164 "/shared/hxmath/test/Test2D.hx"
					int i = _g1++;
					//line 164 "/shared/hxmath/test/Test2D.hx"
					{
						//line 164 "/shared/hxmath/test/Test2D.hx"
						java.lang.Object tmp = null;
						//line 164 "/shared/hxmath/test/Test2D.hx"
						switch (i)
						{
							case 0:
							{
								//line 164 "/shared/hxmath/test/Test2D.hx"
								tmp = normal.x;
								//line 164 "/shared/hxmath/test/Test2D.hx"
								break;
							}
							
							
							case 1:
							{
								//line 164 "/shared/hxmath/test/Test2D.hx"
								tmp = normal.y;
								//line 164 "/shared/hxmath/test/Test2D.hx"
								break;
							}
							
							
							default:
							{
								//line 164 "/shared/hxmath/test/Test2D.hx"
								throw haxe.lang.HaxeException.wrap("Invalid element");
							}
							
						}
						
						//line 164 "/shared/hxmath/test/Test2D.hx"
						double value = ((double) (haxe.lang.Runtime.toDouble(tmp)) );
						//line 164 "/shared/hxmath/test/Test2D.hx"
						switch (i)
						{
							case 0:
							{
								//line 164 "/shared/hxmath/test/Test2D.hx"
								self1.x = value;
								//line 164 "/shared/hxmath/test/Test2D.hx"
								break;
							}
							
							
							case 1:
							{
								//line 164 "/shared/hxmath/test/Test2D.hx"
								self1.y = value;
								//line 164 "/shared/hxmath/test/Test2D.hx"
								break;
							}
							
							
							default:
							{
								//line 164 "/shared/hxmath/test/Test2D.hx"
								throw haxe.lang.HaxeException.wrap("Invalid element");
							}
							
						}
						
					}
					
				}
				
			}
			
			//line 164 "/shared/hxmath/test/Test2D.hx"
			{
				//line 164 "/shared/hxmath/test/Test2D.hx"
				self1.x *= s;
				//line 164 "/shared/hxmath/test/Test2D.hx"
				self1.y *= s;
			}
			
			//line 164 "/shared/hxmath/test/Test2D.hx"
			{
				//line 164 "/shared/hxmath/test/Test2D.hx"
				self1.x *= 2.0;
				//line 164 "/shared/hxmath/test/Test2D.hx"
				self1.y *= 2.0;
			}
			
			//line 164 "/shared/hxmath/test/Test2D.hx"
			{
				//line 164 "/shared/hxmath/test/Test2D.hx"
				self.x -= self1.x;
				//line 164 "/shared/hxmath/test/Test2D.hx"
				self.y -= self1.y;
			}
			
			//line 166 "/shared/hxmath/test/Test2D.hx"
			this.assertEquals(((java.lang.Object) (u.x) ), ((java.lang.Object) (self.x) ), ((java.lang.Object) (new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testReflect"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (166) )) )})) ));
			//line 167 "/shared/hxmath/test/Test2D.hx"
			this.assertEquals(((java.lang.Object) ( - (u.y) ) ), ((java.lang.Object) (self.y) ), ((java.lang.Object) (new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.Test2D", "Test2D.hx", "testReflect"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (167) )) )})) ));
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 10 "/shared/hxmath/test/Test2D.hx"
		{
			//line 10 "/shared/hxmath/test/Test2D.hx"
			boolean __temp_executeDef1 = true;
			//line 10 "/shared/hxmath/test/Test2D.hx"
			switch (field.hashCode())
			{
				case 692666827:
				{
					//line 10 "/shared/hxmath/test/Test2D.hx"
					if (field.equals("testReflect")) 
					{
						//line 10 "/shared/hxmath/test/Test2D.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/hxmath/test/Test2D.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testReflect")) );
					}
					
					//line 10 "/shared/hxmath/test/Test2D.hx"
					break;
				}
				
				
				case 558052641:
				{
					//line 10 "/shared/hxmath/test/Test2D.hx"
					if (field.equals("testVector2BasicOps")) 
					{
						//line 10 "/shared/hxmath/test/Test2D.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/hxmath/test/Test2D.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testVector2BasicOps")) );
					}
					
					//line 10 "/shared/hxmath/test/Test2D.hx"
					break;
				}
				
				
				case 1168642919:
				{
					//line 10 "/shared/hxmath/test/Test2D.hx"
					if (field.equals("testOrthoNormalize")) 
					{
						//line 10 "/shared/hxmath/test/Test2D.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/hxmath/test/Test2D.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testOrthoNormalize")) );
					}
					
					//line 10 "/shared/hxmath/test/Test2D.hx"
					break;
				}
				
				
				case -597989789:
				{
					//line 10 "/shared/hxmath/test/Test2D.hx"
					if (field.equals("testDeterminant")) 
					{
						//line 10 "/shared/hxmath/test/Test2D.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/hxmath/test/Test2D.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testDeterminant")) );
					}
					
					//line 10 "/shared/hxmath/test/Test2D.hx"
					break;
				}
				
				
				case 1955256214:
				{
					//line 10 "/shared/hxmath/test/Test2D.hx"
					if (field.equals("testMatrixFrameInverse")) 
					{
						//line 10 "/shared/hxmath/test/Test2D.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/hxmath/test/Test2D.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testMatrixFrameInverse")) );
					}
					
					//line 10 "/shared/hxmath/test/Test2D.hx"
					break;
				}
				
				
				case -854056647:
				{
					//line 10 "/shared/hxmath/test/Test2D.hx"
					if (field.equals("testHomogenousTranslation")) 
					{
						//line 10 "/shared/hxmath/test/Test2D.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/hxmath/test/Test2D.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testHomogenousTranslation")) );
					}
					
					//line 10 "/shared/hxmath/test/Test2D.hx"
					break;
				}
				
				
				case -1875715702:
				{
					//line 10 "/shared/hxmath/test/Test2D.hx"
					if (field.equals("testLinearSubMatrix")) 
					{
						//line 10 "/shared/hxmath/test/Test2D.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/hxmath/test/Test2D.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testLinearSubMatrix")) );
					}
					
					//line 10 "/shared/hxmath/test/Test2D.hx"
					break;
				}
				
				
				case 1722668743:
				{
					//line 10 "/shared/hxmath/test/Test2D.hx"
					if (field.equals("testTranspose")) 
					{
						//line 10 "/shared/hxmath/test/Test2D.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/hxmath/test/Test2D.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testTranspose")) );
					}
					
					//line 10 "/shared/hxmath/test/Test2D.hx"
					break;
				}
				
				
				case -1194961192:
				{
					//line 10 "/shared/hxmath/test/Test2D.hx"
					if (field.equals("testOrbit")) 
					{
						//line 10 "/shared/hxmath/test/Test2D.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/hxmath/test/Test2D.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testOrbit")) );
					}
					
					//line 10 "/shared/hxmath/test/Test2D.hx"
					break;
				}
				
				
				case 674039344:
				{
					//line 10 "/shared/hxmath/test/Test2D.hx"
					if (field.equals("testRotation")) 
					{
						//line 10 "/shared/hxmath/test/Test2D.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/hxmath/test/Test2D.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testRotation")) );
					}
					
					//line 10 "/shared/hxmath/test/Test2D.hx"
					break;
				}
				
				
				case 1206558002:
				{
					//line 10 "/shared/hxmath/test/Test2D.hx"
					if (field.equals("testAngles")) 
					{
						//line 10 "/shared/hxmath/test/Test2D.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/hxmath/test/Test2D.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testAngles")) );
					}
					
					//line 10 "/shared/hxmath/test/Test2D.hx"
					break;
				}
				
				
				case 1516485168:
				{
					//line 10 "/shared/hxmath/test/Test2D.hx"
					if (field.equals("testVectorRotate")) 
					{
						//line 10 "/shared/hxmath/test/Test2D.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/hxmath/test/Test2D.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testVectorRotate")) );
					}
					
					//line 10 "/shared/hxmath/test/Test2D.hx"
					break;
				}
				
				
				case -1195958587:
				{
					//line 10 "/shared/hxmath/test/Test2D.hx"
					if (field.equals("testNorms")) 
					{
						//line 10 "/shared/hxmath/test/Test2D.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/hxmath/test/Test2D.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testNorms")) );
					}
					
					//line 10 "/shared/hxmath/test/Test2D.hx"
					break;
				}
				
				
				case -51476478:
				{
					//line 10 "/shared/hxmath/test/Test2D.hx"
					if (field.equals("testPolarConversion")) 
					{
						//line 10 "/shared/hxmath/test/Test2D.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/hxmath/test/Test2D.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testPolarConversion")) );
					}
					
					//line 10 "/shared/hxmath/test/Test2D.hx"
					break;
				}
				
				
			}
			
			//line 10 "/shared/hxmath/test/Test2D.hx"
			if (__temp_executeDef1) 
			{
				//line 10 "/shared/hxmath/test/Test2D.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 10 "/shared/hxmath/test/Test2D.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 10 "/shared/hxmath/test/Test2D.hx"
		{
			//line 10 "/shared/hxmath/test/Test2D.hx"
			boolean __temp_executeDef1 = true;
			//line 10 "/shared/hxmath/test/Test2D.hx"
			switch (field.hashCode())
			{
				case 692666827:
				{
					//line 10 "/shared/hxmath/test/Test2D.hx"
					if (field.equals("testReflect")) 
					{
						//line 10 "/shared/hxmath/test/Test2D.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/hxmath/test/Test2D.hx"
						this.testReflect();
					}
					
					//line 10 "/shared/hxmath/test/Test2D.hx"
					break;
				}
				
				
				case 558052641:
				{
					//line 10 "/shared/hxmath/test/Test2D.hx"
					if (field.equals("testVector2BasicOps")) 
					{
						//line 10 "/shared/hxmath/test/Test2D.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/hxmath/test/Test2D.hx"
						this.testVector2BasicOps();
					}
					
					//line 10 "/shared/hxmath/test/Test2D.hx"
					break;
				}
				
				
				case 1168642919:
				{
					//line 10 "/shared/hxmath/test/Test2D.hx"
					if (field.equals("testOrthoNormalize")) 
					{
						//line 10 "/shared/hxmath/test/Test2D.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/hxmath/test/Test2D.hx"
						this.testOrthoNormalize();
					}
					
					//line 10 "/shared/hxmath/test/Test2D.hx"
					break;
				}
				
				
				case -597989789:
				{
					//line 10 "/shared/hxmath/test/Test2D.hx"
					if (field.equals("testDeterminant")) 
					{
						//line 10 "/shared/hxmath/test/Test2D.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/hxmath/test/Test2D.hx"
						this.testDeterminant();
					}
					
					//line 10 "/shared/hxmath/test/Test2D.hx"
					break;
				}
				
				
				case 1955256214:
				{
					//line 10 "/shared/hxmath/test/Test2D.hx"
					if (field.equals("testMatrixFrameInverse")) 
					{
						//line 10 "/shared/hxmath/test/Test2D.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/hxmath/test/Test2D.hx"
						this.testMatrixFrameInverse();
					}
					
					//line 10 "/shared/hxmath/test/Test2D.hx"
					break;
				}
				
				
				case -854056647:
				{
					//line 10 "/shared/hxmath/test/Test2D.hx"
					if (field.equals("testHomogenousTranslation")) 
					{
						//line 10 "/shared/hxmath/test/Test2D.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/hxmath/test/Test2D.hx"
						this.testHomogenousTranslation();
					}
					
					//line 10 "/shared/hxmath/test/Test2D.hx"
					break;
				}
				
				
				case -1875715702:
				{
					//line 10 "/shared/hxmath/test/Test2D.hx"
					if (field.equals("testLinearSubMatrix")) 
					{
						//line 10 "/shared/hxmath/test/Test2D.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/hxmath/test/Test2D.hx"
						this.testLinearSubMatrix();
					}
					
					//line 10 "/shared/hxmath/test/Test2D.hx"
					break;
				}
				
				
				case 1722668743:
				{
					//line 10 "/shared/hxmath/test/Test2D.hx"
					if (field.equals("testTranspose")) 
					{
						//line 10 "/shared/hxmath/test/Test2D.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/hxmath/test/Test2D.hx"
						this.testTranspose();
					}
					
					//line 10 "/shared/hxmath/test/Test2D.hx"
					break;
				}
				
				
				case -1194961192:
				{
					//line 10 "/shared/hxmath/test/Test2D.hx"
					if (field.equals("testOrbit")) 
					{
						//line 10 "/shared/hxmath/test/Test2D.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/hxmath/test/Test2D.hx"
						this.testOrbit();
					}
					
					//line 10 "/shared/hxmath/test/Test2D.hx"
					break;
				}
				
				
				case 674039344:
				{
					//line 10 "/shared/hxmath/test/Test2D.hx"
					if (field.equals("testRotation")) 
					{
						//line 10 "/shared/hxmath/test/Test2D.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/hxmath/test/Test2D.hx"
						this.testRotation();
					}
					
					//line 10 "/shared/hxmath/test/Test2D.hx"
					break;
				}
				
				
				case 1206558002:
				{
					//line 10 "/shared/hxmath/test/Test2D.hx"
					if (field.equals("testAngles")) 
					{
						//line 10 "/shared/hxmath/test/Test2D.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/hxmath/test/Test2D.hx"
						this.testAngles();
					}
					
					//line 10 "/shared/hxmath/test/Test2D.hx"
					break;
				}
				
				
				case 1516485168:
				{
					//line 10 "/shared/hxmath/test/Test2D.hx"
					if (field.equals("testVectorRotate")) 
					{
						//line 10 "/shared/hxmath/test/Test2D.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/hxmath/test/Test2D.hx"
						this.testVectorRotate();
					}
					
					//line 10 "/shared/hxmath/test/Test2D.hx"
					break;
				}
				
				
				case -1195958587:
				{
					//line 10 "/shared/hxmath/test/Test2D.hx"
					if (field.equals("testNorms")) 
					{
						//line 10 "/shared/hxmath/test/Test2D.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/hxmath/test/Test2D.hx"
						this.testNorms();
					}
					
					//line 10 "/shared/hxmath/test/Test2D.hx"
					break;
				}
				
				
				case -51476478:
				{
					//line 10 "/shared/hxmath/test/Test2D.hx"
					if (field.equals("testPolarConversion")) 
					{
						//line 10 "/shared/hxmath/test/Test2D.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/hxmath/test/Test2D.hx"
						this.testPolarConversion();
					}
					
					//line 10 "/shared/hxmath/test/Test2D.hx"
					break;
				}
				
				
			}
			
			//line 10 "/shared/hxmath/test/Test2D.hx"
			if (__temp_executeDef1) 
			{
				//line 10 "/shared/hxmath/test/Test2D.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 10 "/shared/hxmath/test/Test2D.hx"
		return null;
	}
	
	
}


