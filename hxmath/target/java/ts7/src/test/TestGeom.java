// Generated by Haxe 3.3.0
package test;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestGeom extends test.MathTestCase
{
	public TestGeom(haxe.lang.EmptyObject empty)
	{
		//line 12 "/shared/hxmath/test/TestGeom.hx"
		super(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public TestGeom(java.lang.Object posInfos)
	{
		//line 29 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		super(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
		//line 29 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		test.TestGeom.__hx_ctor_test_TestGeom(this, posInfos);
	}
	
	
	public static void __hx_ctor_test_TestGeom(test.TestGeom __temp_me67, java.lang.Object posInfos)
	{
		//line 29 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		test.MathTestCase.__hx_ctor_test_MathTestCase(__temp_me67, posInfos);
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 12 "/shared/hxmath/test/TestGeom.hx"
		return new test.TestGeom(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 12 "/shared/hxmath/test/TestGeom.hx"
		return new test.TestGeom(((java.lang.Object) (arr.__get(0)) ));
	}
	
	
	public void testRectIntersect()
	{
		//line 24 "/shared/hxmath/test/TestGeom.hx"
		hxmath.geom.Rect a = new hxmath.geom.Rect(0.0, 0.0, 1.0, 1.0);
		//line 25 "/shared/hxmath/test/TestGeom.hx"
		hxmath.geom.Rect b = new hxmath.geom.Rect(1.0, 0.0, 1.0, 1.0);
		//line 26 "/shared/hxmath/test/TestGeom.hx"
		hxmath.geom.Rect c = new hxmath.geom.Rect(0.0, 1.0, 1.0, 1.0);
		//line 27 "/shared/hxmath/test/TestGeom.hx"
		hxmath.geom.Rect d = new hxmath.geom.Rect(1.0, 1.0, 1.0, 1.0);
		//line 29 "/shared/hxmath/test/TestGeom.hx"
		boolean tmp = false;
		//line 29 "/shared/hxmath/test/TestGeom.hx"
		double aStart = a.x;
		//line 29 "/shared/hxmath/test/TestGeom.hx"
		double aWidth = a.width;
		//line 29 "/shared/hxmath/test/TestGeom.hx"
		double bStart = b.x;
		//line 29 "/shared/hxmath/test/TestGeom.hx"
		if ( ! ((( ( aStart >= ( bStart + b.width ) ) || ( bStart >= ( aStart + aWidth ) ) ))) ) 
		{
			//line 29 "/shared/hxmath/test/TestGeom.hx"
			double aStart1 = a.y;
			//line 29 "/shared/hxmath/test/TestGeom.hx"
			double aWidth1 = a.height;
			//line 29 "/shared/hxmath/test/TestGeom.hx"
			double bStart1 = b.y;
			//line 29 "/shared/hxmath/test/TestGeom.hx"
			tmp =  ! ((( ( aStart1 >= ( bStart1 + b.height ) ) || ( bStart1 >= ( aStart1 + aWidth1 ) ) ))) ;
		}
		else
		{
			//line 29 "/shared/hxmath/test/TestGeom.hx"
			tmp = false;
		}
		
		//line 29 "/shared/hxmath/test/TestGeom.hx"
		this.assertFalse(tmp, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRectIntersect"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (29) )) )}));
		//line 30 "/shared/hxmath/test/TestGeom.hx"
		boolean tmp1 = false;
		//line 30 "/shared/hxmath/test/TestGeom.hx"
		double aStart2 = a.x;
		//line 30 "/shared/hxmath/test/TestGeom.hx"
		double aWidth2 = a.width;
		//line 30 "/shared/hxmath/test/TestGeom.hx"
		double bStart2 = c.x;
		//line 30 "/shared/hxmath/test/TestGeom.hx"
		if ( ! ((( ( aStart2 >= ( bStart2 + c.width ) ) || ( bStart2 >= ( aStart2 + aWidth2 ) ) ))) ) 
		{
			//line 30 "/shared/hxmath/test/TestGeom.hx"
			double aStart3 = a.y;
			//line 30 "/shared/hxmath/test/TestGeom.hx"
			double aWidth3 = a.height;
			//line 30 "/shared/hxmath/test/TestGeom.hx"
			double bStart3 = c.y;
			//line 30 "/shared/hxmath/test/TestGeom.hx"
			tmp1 =  ! ((( ( aStart3 >= ( bStart3 + c.height ) ) || ( bStart3 >= ( aStart3 + aWidth3 ) ) ))) ;
		}
		else
		{
			//line 30 "/shared/hxmath/test/TestGeom.hx"
			tmp1 = false;
		}
		
		//line 30 "/shared/hxmath/test/TestGeom.hx"
		this.assertFalse(tmp1, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRectIntersect"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (30) )) )}));
		//line 31 "/shared/hxmath/test/TestGeom.hx"
		boolean tmp2 = false;
		//line 31 "/shared/hxmath/test/TestGeom.hx"
		double aStart4 = a.x;
		//line 31 "/shared/hxmath/test/TestGeom.hx"
		double aWidth4 = a.width;
		//line 31 "/shared/hxmath/test/TestGeom.hx"
		double bStart4 = d.x;
		//line 31 "/shared/hxmath/test/TestGeom.hx"
		if ( ! ((( ( aStart4 >= ( bStart4 + d.width ) ) || ( bStart4 >= ( aStart4 + aWidth4 ) ) ))) ) 
		{
			//line 31 "/shared/hxmath/test/TestGeom.hx"
			double aStart5 = a.y;
			//line 31 "/shared/hxmath/test/TestGeom.hx"
			double aWidth5 = a.height;
			//line 31 "/shared/hxmath/test/TestGeom.hx"
			double bStart5 = d.y;
			//line 31 "/shared/hxmath/test/TestGeom.hx"
			tmp2 =  ! ((( ( aStart5 >= ( bStart5 + d.height ) ) || ( bStart5 >= ( aStart5 + aWidth5 ) ) ))) ;
		}
		else
		{
			//line 31 "/shared/hxmath/test/TestGeom.hx"
			tmp2 = false;
		}
		
		//line 31 "/shared/hxmath/test/TestGeom.hx"
		this.assertFalse(tmp2, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRectIntersect"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (31) )) )}));
		//line 34 "/shared/hxmath/test/TestGeom.hx"
		hxmath.geom.Rect e = new hxmath.geom.Rect(0.5, 0.5, 1.0, 1.0);
		//line 35 "/shared/hxmath/test/TestGeom.hx"
		boolean tmp3 = false;
		//line 35 "/shared/hxmath/test/TestGeom.hx"
		double aStart6 = a.x;
		//line 35 "/shared/hxmath/test/TestGeom.hx"
		double aWidth6 = a.width;
		//line 35 "/shared/hxmath/test/TestGeom.hx"
		double bStart6 = e.x;
		//line 35 "/shared/hxmath/test/TestGeom.hx"
		if ( ! ((( ( aStart6 >= ( bStart6 + e.width ) ) || ( bStart6 >= ( aStart6 + aWidth6 ) ) ))) ) 
		{
			//line 35 "/shared/hxmath/test/TestGeom.hx"
			double aStart7 = a.y;
			//line 35 "/shared/hxmath/test/TestGeom.hx"
			double aWidth7 = a.height;
			//line 35 "/shared/hxmath/test/TestGeom.hx"
			double bStart7 = e.y;
			//line 35 "/shared/hxmath/test/TestGeom.hx"
			tmp3 =  ! ((( ( aStart7 >= ( bStart7 + e.height ) ) || ( bStart7 >= ( aStart7 + aWidth7 ) ) ))) ;
		}
		else
		{
			//line 35 "/shared/hxmath/test/TestGeom.hx"
			tmp3 = false;
		}
		
		//line 35 "/shared/hxmath/test/TestGeom.hx"
		this.assertTrue(tmp3, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRectIntersect"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (35) )) )}));
		//line 36 "/shared/hxmath/test/TestGeom.hx"
		boolean tmp4 = false;
		//line 36 "/shared/hxmath/test/TestGeom.hx"
		double aStart8 = b.x;
		//line 36 "/shared/hxmath/test/TestGeom.hx"
		double aWidth8 = b.width;
		//line 36 "/shared/hxmath/test/TestGeom.hx"
		double bStart8 = e.x;
		//line 36 "/shared/hxmath/test/TestGeom.hx"
		if ( ! ((( ( aStart8 >= ( bStart8 + e.width ) ) || ( bStart8 >= ( aStart8 + aWidth8 ) ) ))) ) 
		{
			//line 36 "/shared/hxmath/test/TestGeom.hx"
			double aStart9 = b.y;
			//line 36 "/shared/hxmath/test/TestGeom.hx"
			double aWidth9 = b.height;
			//line 36 "/shared/hxmath/test/TestGeom.hx"
			double bStart9 = e.y;
			//line 36 "/shared/hxmath/test/TestGeom.hx"
			tmp4 =  ! ((( ( aStart9 >= ( bStart9 + e.height ) ) || ( bStart9 >= ( aStart9 + aWidth9 ) ) ))) ;
		}
		else
		{
			//line 36 "/shared/hxmath/test/TestGeom.hx"
			tmp4 = false;
		}
		
		//line 36 "/shared/hxmath/test/TestGeom.hx"
		this.assertTrue(tmp4, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRectIntersect"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (36) )) )}));
		//line 37 "/shared/hxmath/test/TestGeom.hx"
		boolean tmp5 = false;
		//line 37 "/shared/hxmath/test/TestGeom.hx"
		double aStart10 = c.x;
		//line 37 "/shared/hxmath/test/TestGeom.hx"
		double aWidth10 = c.width;
		//line 37 "/shared/hxmath/test/TestGeom.hx"
		double bStart10 = e.x;
		//line 37 "/shared/hxmath/test/TestGeom.hx"
		if ( ! ((( ( aStart10 >= ( bStart10 + e.width ) ) || ( bStart10 >= ( aStart10 + aWidth10 ) ) ))) ) 
		{
			//line 37 "/shared/hxmath/test/TestGeom.hx"
			double aStart11 = c.y;
			//line 37 "/shared/hxmath/test/TestGeom.hx"
			double aWidth11 = c.height;
			//line 37 "/shared/hxmath/test/TestGeom.hx"
			double bStart11 = e.y;
			//line 37 "/shared/hxmath/test/TestGeom.hx"
			tmp5 =  ! ((( ( aStart11 >= ( bStart11 + e.height ) ) || ( bStart11 >= ( aStart11 + aWidth11 ) ) ))) ;
		}
		else
		{
			//line 37 "/shared/hxmath/test/TestGeom.hx"
			tmp5 = false;
		}
		
		//line 37 "/shared/hxmath/test/TestGeom.hx"
		this.assertTrue(tmp5, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRectIntersect"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (37) )) )}));
		//line 38 "/shared/hxmath/test/TestGeom.hx"
		boolean tmp6 = false;
		//line 38 "/shared/hxmath/test/TestGeom.hx"
		double aStart12 = d.x;
		//line 38 "/shared/hxmath/test/TestGeom.hx"
		double aWidth12 = d.width;
		//line 38 "/shared/hxmath/test/TestGeom.hx"
		double bStart12 = e.x;
		//line 38 "/shared/hxmath/test/TestGeom.hx"
		if ( ! ((( ( aStart12 >= ( bStart12 + e.width ) ) || ( bStart12 >= ( aStart12 + aWidth12 ) ) ))) ) 
		{
			//line 38 "/shared/hxmath/test/TestGeom.hx"
			double aStart13 = d.y;
			//line 38 "/shared/hxmath/test/TestGeom.hx"
			double aWidth13 = d.height;
			//line 38 "/shared/hxmath/test/TestGeom.hx"
			double bStart13 = e.y;
			//line 38 "/shared/hxmath/test/TestGeom.hx"
			tmp6 =  ! ((( ( aStart13 >= ( bStart13 + e.height ) ) || ( bStart13 >= ( aStart13 + aWidth13 ) ) ))) ;
		}
		else
		{
			//line 38 "/shared/hxmath/test/TestGeom.hx"
			tmp6 = false;
		}
		
		//line 38 "/shared/hxmath/test/TestGeom.hx"
		this.assertTrue(tmp6, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRectIntersect"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (38) )) )}));
		//line 41 "/shared/hxmath/test/TestGeom.hx"
		hxmath.geom.Rect contained = new hxmath.geom.Rect(0.25, 0.25, 0.5, 0.5);
		//line 42 "/shared/hxmath/test/TestGeom.hx"
		boolean tmp7 = false;
		//line 42 "/shared/hxmath/test/TestGeom.hx"
		double aStart14 = a.x;
		//line 42 "/shared/hxmath/test/TestGeom.hx"
		double aWidth14 = a.width;
		//line 42 "/shared/hxmath/test/TestGeom.hx"
		double bStart14 = contained.x;
		//line 42 "/shared/hxmath/test/TestGeom.hx"
		if ( ! ((( ( aStart14 >= ( bStart14 + contained.width ) ) || ( bStart14 >= ( aStart14 + aWidth14 ) ) ))) ) 
		{
			//line 42 "/shared/hxmath/test/TestGeom.hx"
			double aStart15 = a.y;
			//line 42 "/shared/hxmath/test/TestGeom.hx"
			double aWidth15 = a.height;
			//line 42 "/shared/hxmath/test/TestGeom.hx"
			double bStart15 = contained.y;
			//line 42 "/shared/hxmath/test/TestGeom.hx"
			tmp7 =  ! ((( ( aStart15 >= ( bStart15 + contained.height ) ) || ( bStart15 >= ( aStart15 + aWidth15 ) ) ))) ;
		}
		else
		{
			//line 42 "/shared/hxmath/test/TestGeom.hx"
			tmp7 = false;
		}
		
		//line 42 "/shared/hxmath/test/TestGeom.hx"
		this.assertTrue(tmp7, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRectIntersect"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (42) )) )}));
		//line 43 "/shared/hxmath/test/TestGeom.hx"
		boolean tmp8 = false;
		//line 43 "/shared/hxmath/test/TestGeom.hx"
		double aStart16 = contained.x;
		//line 43 "/shared/hxmath/test/TestGeom.hx"
		double aWidth16 = contained.width;
		//line 43 "/shared/hxmath/test/TestGeom.hx"
		double bStart16 = a.x;
		//line 43 "/shared/hxmath/test/TestGeom.hx"
		if ( ! ((( ( aStart16 >= ( bStart16 + a.width ) ) || ( bStart16 >= ( aStart16 + aWidth16 ) ) ))) ) 
		{
			//line 43 "/shared/hxmath/test/TestGeom.hx"
			double aStart17 = contained.y;
			//line 43 "/shared/hxmath/test/TestGeom.hx"
			double aWidth17 = contained.height;
			//line 43 "/shared/hxmath/test/TestGeom.hx"
			double bStart17 = a.y;
			//line 43 "/shared/hxmath/test/TestGeom.hx"
			tmp8 =  ! ((( ( aStart17 >= ( bStart17 + a.height ) ) || ( bStart17 >= ( aStart17 + aWidth17 ) ) ))) ;
		}
		else
		{
			//line 43 "/shared/hxmath/test/TestGeom.hx"
			tmp8 = false;
		}
		
		//line 43 "/shared/hxmath/test/TestGeom.hx"
		this.assertTrue(tmp8, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRectIntersect"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (43) )) )}));
		//line 46 "/shared/hxmath/test/TestGeom.hx"
		hxmath.geom.Rect straddling = new hxmath.geom.Rect(0.25, 0.25, 1.0, 0.5);
		//line 47 "/shared/hxmath/test/TestGeom.hx"
		boolean tmp9 = false;
		//line 47 "/shared/hxmath/test/TestGeom.hx"
		double aStart18 = a.x;
		//line 47 "/shared/hxmath/test/TestGeom.hx"
		double aWidth18 = a.width;
		//line 47 "/shared/hxmath/test/TestGeom.hx"
		double bStart18 = straddling.x;
		//line 47 "/shared/hxmath/test/TestGeom.hx"
		if ( ! ((( ( aStart18 >= ( bStart18 + straddling.width ) ) || ( bStart18 >= ( aStart18 + aWidth18 ) ) ))) ) 
		{
			//line 47 "/shared/hxmath/test/TestGeom.hx"
			double aStart19 = a.y;
			//line 47 "/shared/hxmath/test/TestGeom.hx"
			double aWidth19 = a.height;
			//line 47 "/shared/hxmath/test/TestGeom.hx"
			double bStart19 = straddling.y;
			//line 47 "/shared/hxmath/test/TestGeom.hx"
			tmp9 =  ! ((( ( aStart19 >= ( bStart19 + straddling.height ) ) || ( bStart19 >= ( aStart19 + aWidth19 ) ) ))) ;
		}
		else
		{
			//line 47 "/shared/hxmath/test/TestGeom.hx"
			tmp9 = false;
		}
		
		//line 47 "/shared/hxmath/test/TestGeom.hx"
		this.assertTrue(tmp9, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRectIntersect"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (47) )) )}));
		//line 48 "/shared/hxmath/test/TestGeom.hx"
		boolean tmp10 = false;
		//line 48 "/shared/hxmath/test/TestGeom.hx"
		double aStart20 = straddling.x;
		//line 48 "/shared/hxmath/test/TestGeom.hx"
		double aWidth20 = straddling.width;
		//line 48 "/shared/hxmath/test/TestGeom.hx"
		double bStart20 = a.x;
		//line 48 "/shared/hxmath/test/TestGeom.hx"
		if ( ! ((( ( aStart20 >= ( bStart20 + a.width ) ) || ( bStart20 >= ( aStart20 + aWidth20 ) ) ))) ) 
		{
			//line 48 "/shared/hxmath/test/TestGeom.hx"
			double aStart21 = straddling.y;
			//line 48 "/shared/hxmath/test/TestGeom.hx"
			double aWidth21 = straddling.height;
			//line 48 "/shared/hxmath/test/TestGeom.hx"
			double bStart21 = a.y;
			//line 48 "/shared/hxmath/test/TestGeom.hx"
			tmp10 =  ! ((( ( aStart21 >= ( bStart21 + a.height ) ) || ( bStart21 >= ( aStart21 + aWidth21 ) ) ))) ;
		}
		else
		{
			//line 48 "/shared/hxmath/test/TestGeom.hx"
			tmp10 = false;
		}
		
		//line 48 "/shared/hxmath/test/TestGeom.hx"
		this.assertTrue(tmp10, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRectIntersect"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (48) )) )}));
	}
	
	
	public void testRectMatrixConversion()
	{
		//line 53 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Matrix3x2Default m = this.randomMatrix3x2(null);
		//line 56 "/shared/hxmath/test/TestGeom.hx"
		m.a = java.lang.Math.abs(m.a);
		//line 57 "/shared/hxmath/test/TestGeom.hx"
		m.b = 0.0;
		//line 58 "/shared/hxmath/test/TestGeom.hx"
		m.c = 0.0;
		//line 59 "/shared/hxmath/test/TestGeom.hx"
		m.d = java.lang.Math.abs(m.d);
		//line 62 "/shared/hxmath/test/TestGeom.hx"
		if (( m.a < 1e-6 )) 
		{
			//line 64 "/shared/hxmath/test/TestGeom.hx"
			m.a += 1.0;
		}
		
		//line 67 "/shared/hxmath/test/TestGeom.hx"
		if (( m.d < 1e-6 )) 
		{
			//line 69 "/shared/hxmath/test/TestGeom.hx"
			m.d += 1.0;
		}
		
		//line 73 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Matrix2x2Default this1 = new hxmath.math.Matrix2x2Default(m.a, m.b, m.c, m.d);
		//line 73 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Matrix2x2Default self = ((hxmath.math.Matrix2x2Default) (this1) );
		//line 73 "/shared/hxmath/test/TestGeom.hx"
		double matrixArea = ( ( self.a * self.d ) - ( self.b * self.c ) );
		//line 75 "/shared/hxmath/test/TestGeom.hx"
		hxmath.geom.Rect rect = new hxmath.geom.Rect(m.tx, m.ty, m.a, m.d);
		//line 76 "/shared/hxmath/test/TestGeom.hx"
		this.assertEquals(((java.lang.Object) (matrixArea) ), ((java.lang.Object) (( rect.width * rect.height )) ), ((java.lang.Object) (new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRectMatrixConversion"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (76) )) )})) ));
		//line 77 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Matrix3x2Default this2 = new hxmath.math.Matrix3x2Default(rect.width, 0.0, 0.0, rect.height, rect.x, rect.y);
		//line 77 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Matrix3x2Default m1 = ((hxmath.math.Matrix3x2Default) (this2) );
		//line 77 "/shared/hxmath/test/TestGeom.hx"
		this.assertTrue(( ( ( m1 == null ) && ( m == null ) ) || ( ( ( ( ( ( ( ( m1 != null ) && ( m != null ) ) && ( m1.a == m.a ) ) && ( m1.b == m.b ) ) && ( m1.c == m.c ) ) && ( m1.d == m.d ) ) && ( m1.tx == m.tx ) ) && ( m1.ty == m.ty ) ) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRectMatrixConversion"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (77) )) )}));
	}
	
	
	public void testRectTwoPointConstruction()
	{
		//line 82 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default this1 = new hxmath.math.Vector2Default(0.0, 0.0);
		//line 82 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default zero = ((hxmath.math.Vector2Default) (this1) );
		//line 83 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default this2 = new hxmath.math.Vector2Default(1.0, 1.0);
		//line 83 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default one = ((hxmath.math.Vector2Default) (this2) );
		//line 85 "/shared/hxmath/test/TestGeom.hx"
		hxmath.geom.Rect _this = new hxmath.geom.Rect(java.lang.Math.min(zero.x, one.x), java.lang.Math.min(zero.y, one.y), java.lang.Math.abs(( one.x - zero.x )), java.lang.Math.abs(( one.y - zero.y )));
		//line 85 "/shared/hxmath/test/TestGeom.hx"
		this.assertEquals(((java.lang.Object) (1.0) ), ((java.lang.Object) (( _this.width * _this.height )) ), ((java.lang.Object) (new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRectTwoPointConstruction"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (85) )) )})) ));
	}
	
	
	public void testRectContainsPoint()
	{
		//line 90 "/shared/hxmath/test/TestGeom.hx"
		hxmath.geom.Rect rect = new hxmath.geom.Rect(0.5, 0.5, 1.0, 1.0);
		//line 92 "/shared/hxmath/test/TestGeom.hx"
		{
			//line 92 "/shared/hxmath/test/TestGeom.hx"
			int _g = 0;
			//line 92 "/shared/hxmath/test/TestGeom.hx"
			while (( _g < 4 ))
			{
				//line 92 "/shared/hxmath/test/TestGeom.hx"
				int i = _g++;
				//line 95 "/shared/hxmath/test/TestGeom.hx"
				hxmath.math.Vector2Default this1 = new hxmath.math.Vector2Default(rect.x, rect.y);
				//line 95 "/shared/hxmath/test/TestGeom.hx"
				hxmath.math.Vector2Default v = ((hxmath.math.Vector2Default) (this1) );
				//line 95 "/shared/hxmath/test/TestGeom.hx"
				switch (i)
				{
					case 0:
					{
						//line 95 "/shared/hxmath/test/TestGeom.hx"
						break;
					}
					
					
					case 1:
					{
						//line 95 "/shared/hxmath/test/TestGeom.hx"
						v.x += rect.width;
						//line 95 "/shared/hxmath/test/TestGeom.hx"
						break;
					}
					
					
					case 2:
					{
						//line 95 "/shared/hxmath/test/TestGeom.hx"
						v.x += rect.width;
						//line 95 "/shared/hxmath/test/TestGeom.hx"
						v.y += rect.height;
						//line 95 "/shared/hxmath/test/TestGeom.hx"
						break;
					}
					
					
					case 3:
					{
						//line 95 "/shared/hxmath/test/TestGeom.hx"
						v.y += rect.height;
						//line 95 "/shared/hxmath/test/TestGeom.hx"
						break;
					}
					
					
					default:
					{
						//line 95 "/shared/hxmath/test/TestGeom.hx"
						throw haxe.lang.HaxeException.wrap("Invalid vertex index.");
					}
					
				}
				
				//line 96 "/shared/hxmath/test/TestGeom.hx"
				boolean tmp = false;
				//line 96 "/shared/hxmath/test/TestGeom.hx"
				double aStart = rect.x;
				//line 96 "/shared/hxmath/test/TestGeom.hx"
				double aWidth = rect.width;
				//line 96 "/shared/hxmath/test/TestGeom.hx"
				double x = v.x;
				//line 96 "/shared/hxmath/test/TestGeom.hx"
				if (( ( x >= aStart ) && ( x <= ( aStart + aWidth ) ) )) 
				{
					//line 96 "/shared/hxmath/test/TestGeom.hx"
					double aStart1 = rect.y;
					//line 96 "/shared/hxmath/test/TestGeom.hx"
					double aWidth1 = rect.height;
					//line 96 "/shared/hxmath/test/TestGeom.hx"
					double x1 = v.y;
					//line 96 "/shared/hxmath/test/TestGeom.hx"
					if (( x1 >= aStart1 )) 
					{
						//line 96 "/shared/hxmath/test/TestGeom.hx"
						tmp = ( x1 <= ( aStart1 + aWidth1 ) );
					}
					else
					{
						//line 96 "/shared/hxmath/test/TestGeom.hx"
						tmp = false;
					}
					
				}
				else
				{
					//line 96 "/shared/hxmath/test/TestGeom.hx"
					tmp = false;
				}
				
				//line 96 "/shared/hxmath/test/TestGeom.hx"
				this.assertTrue(tmp, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRectContainsPoint"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (96) )) )}));
				//line 99 "/shared/hxmath/test/TestGeom.hx"
				hxmath.math.Vector2Default this2 = new hxmath.math.Vector2Default(( rect.x + ( 0.5 * rect.width ) ), ( rect.y + ( 0.5 * rect.height ) ));
				//line 99 "/shared/hxmath/test/TestGeom.hx"
				hxmath.math.Vector2Default b = ((hxmath.math.Vector2Default) (this2) );
				//line 99 "/shared/hxmath/test/TestGeom.hx"
				hxmath.math.Vector2Default this3 = new hxmath.math.Vector2Default(v.x, v.y);
				//line 99 "/shared/hxmath/test/TestGeom.hx"
				hxmath.math.Vector2Default self = ((hxmath.math.Vector2Default) (this3) );
				//line 99 "/shared/hxmath/test/TestGeom.hx"
				self.x -= b.x;
				//line 99 "/shared/hxmath/test/TestGeom.hx"
				self.y -= b.y;
				//line 99 "/shared/hxmath/test/TestGeom.hx"
				hxmath.math.Vector2Default this4 = new hxmath.math.Vector2Default(self.x, self.y);
				//line 99 "/shared/hxmath/test/TestGeom.hx"
				hxmath.math.Vector2Default self1 = ((hxmath.math.Vector2Default) (this4) );
				//line 99 "/shared/hxmath/test/TestGeom.hx"
				self1.x *= 1.1;
				//line 99 "/shared/hxmath/test/TestGeom.hx"
				self1.y *= 1.1;
				//line 99 "/shared/hxmath/test/TestGeom.hx"
				hxmath.math.Vector2Default this5 = new hxmath.math.Vector2Default(( rect.x + ( 0.5 * rect.width ) ), ( rect.y + ( 0.5 * rect.height ) ));
				//line 99 "/shared/hxmath/test/TestGeom.hx"
				hxmath.math.Vector2Default b1 = ((hxmath.math.Vector2Default) (this5) );
				//line 99 "/shared/hxmath/test/TestGeom.hx"
				hxmath.math.Vector2Default this6 = new hxmath.math.Vector2Default(self1.x, self1.y);
				//line 99 "/shared/hxmath/test/TestGeom.hx"
				hxmath.math.Vector2Default self2 = ((hxmath.math.Vector2Default) (this6) );
				//line 99 "/shared/hxmath/test/TestGeom.hx"
				self2.x += b1.x;
				//line 99 "/shared/hxmath/test/TestGeom.hx"
				self2.y += b1.y;
				//line 100 "/shared/hxmath/test/TestGeom.hx"
				boolean tmp1 = false;
				//line 100 "/shared/hxmath/test/TestGeom.hx"
				double aStart2 = rect.x;
				//line 100 "/shared/hxmath/test/TestGeom.hx"
				double aWidth2 = rect.width;
				//line 100 "/shared/hxmath/test/TestGeom.hx"
				double x2 = self2.x;
				//line 100 "/shared/hxmath/test/TestGeom.hx"
				if (( ( x2 >= aStart2 ) && ( x2 <= ( aStart2 + aWidth2 ) ) )) 
				{
					//line 100 "/shared/hxmath/test/TestGeom.hx"
					double aStart3 = rect.y;
					//line 100 "/shared/hxmath/test/TestGeom.hx"
					double aWidth3 = rect.height;
					//line 100 "/shared/hxmath/test/TestGeom.hx"
					double x3 = self2.y;
					//line 100 "/shared/hxmath/test/TestGeom.hx"
					if (( x3 >= aStart3 )) 
					{
						//line 100 "/shared/hxmath/test/TestGeom.hx"
						tmp1 = ( x3 <= ( aStart3 + aWidth3 ) );
					}
					else
					{
						//line 100 "/shared/hxmath/test/TestGeom.hx"
						tmp1 = false;
					}
					
				}
				else
				{
					//line 100 "/shared/hxmath/test/TestGeom.hx"
					tmp1 = false;
				}
				
				//line 100 "/shared/hxmath/test/TestGeom.hx"
				this.assertFalse(tmp1, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRectContainsPoint"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (100) )) )}));
			}
			
		}
		
	}
	
	
	public void testRectIntersectOverlapping()
	{
		//line 106 "/shared/hxmath/test/TestGeom.hx"
		return ;
	}
	
	
	public void testRectIntersectContaining()
	{
		//line 141 "/shared/hxmath/test/TestGeom.hx"
		hxmath.geom.Rect outer = new hxmath.geom.Rect(0.0, 0.0, 1.0, 1.0);
		//line 143 "/shared/hxmath/test/TestGeom.hx"
		hxmath.geom.Rect inner = new hxmath.geom.Rect(0.25, 0.25, 0.5, 0.5);
		//line 144 "/shared/hxmath/test/TestGeom.hx"
		hxmath.geom.Rect innerLeft = new hxmath.geom.Rect(0.0, 0.25, 0.25, 0.5);
		//line 145 "/shared/hxmath/test/TestGeom.hx"
		hxmath.geom.Rect innerRight = new hxmath.geom.Rect(0.75, 0.25, 0.25, 0.5);
		//line 147 "/shared/hxmath/test/TestGeom.hx"
		hxmath.geom.Rect left = new hxmath.geom.Rect(-0.25, 0.25, 0.5, 0.5);
		//line 148 "/shared/hxmath/test/TestGeom.hx"
		hxmath.geom.Rect right = new hxmath.geom.Rect(0.75, 0.25, 0.5, 0.5);
		//line 150 "/shared/hxmath/test/TestGeom.hx"
		hxmath.geom.Rect _this = new hxmath.geom.Rect(outer.x, outer.y, outer.width, outer.height);
		//line 150 "/shared/hxmath/test/TestGeom.hx"
		if (( _this.x < inner.x )) 
		{
			//line 150 "/shared/hxmath/test/TestGeom.hx"
			_this.width -= ( inner.x - _this.x );
			//line 150 "/shared/hxmath/test/TestGeom.hx"
			_this.x = inner.x;
		}
		
		//line 150 "/shared/hxmath/test/TestGeom.hx"
		if (( _this.y < inner.y )) 
		{
			//line 150 "/shared/hxmath/test/TestGeom.hx"
			_this.height -= ( inner.y - _this.y );
			//line 150 "/shared/hxmath/test/TestGeom.hx"
			_this.y = inner.y;
		}
		
		//line 150 "/shared/hxmath/test/TestGeom.hx"
		if (( ( _this.x + _this.width ) > ( inner.x + inner.width ) )) 
		{
			//line 150 "/shared/hxmath/test/TestGeom.hx"
			_this.width -= ( ( _this.x + _this.width ) - (( inner.x + inner.width )) );
		}
		
		//line 150 "/shared/hxmath/test/TestGeom.hx"
		if (( ( _this.y + _this.height ) > ( inner.y + inner.height ) )) 
		{
			//line 150 "/shared/hxmath/test/TestGeom.hx"
			_this.height -= ( ( _this.y + _this.height ) - (( inner.y + inner.height )) );
		}
		
		//line 150 "/shared/hxmath/test/TestGeom.hx"
		this.assertTrue(( ( ( ( ( inner != null ) && ( _this.x == inner.x ) ) && ( _this.y == inner.y ) ) && ( _this.width == inner.width ) ) && ( _this.height == inner.height ) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRectIntersectContaining"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (150) )) )}));
		//line 152 "/shared/hxmath/test/TestGeom.hx"
		hxmath.geom.Rect _this1 = new hxmath.geom.Rect(inner.x, inner.y, inner.width, inner.height);
		//line 152 "/shared/hxmath/test/TestGeom.hx"
		if (( _this1.x < outer.x )) 
		{
			//line 152 "/shared/hxmath/test/TestGeom.hx"
			_this1.width -= ( outer.x - _this1.x );
			//line 152 "/shared/hxmath/test/TestGeom.hx"
			_this1.x = outer.x;
		}
		
		//line 152 "/shared/hxmath/test/TestGeom.hx"
		if (( _this1.y < outer.y )) 
		{
			//line 152 "/shared/hxmath/test/TestGeom.hx"
			_this1.height -= ( outer.y - _this1.y );
			//line 152 "/shared/hxmath/test/TestGeom.hx"
			_this1.y = outer.y;
		}
		
		//line 152 "/shared/hxmath/test/TestGeom.hx"
		if (( ( _this1.x + _this1.width ) > ( outer.x + outer.width ) )) 
		{
			//line 152 "/shared/hxmath/test/TestGeom.hx"
			_this1.width -= ( ( _this1.x + _this1.width ) - (( outer.x + outer.width )) );
		}
		
		//line 152 "/shared/hxmath/test/TestGeom.hx"
		if (( ( _this1.y + _this1.height ) > ( outer.y + outer.height ) )) 
		{
			//line 152 "/shared/hxmath/test/TestGeom.hx"
			_this1.height -= ( ( _this1.y + _this1.height ) - (( outer.y + outer.height )) );
		}
		
		//line 152 "/shared/hxmath/test/TestGeom.hx"
		this.assertTrue(( ( ( ( ( inner != null ) && ( _this1.x == inner.x ) ) && ( _this1.y == inner.y ) ) && ( _this1.width == inner.width ) ) && ( _this1.height == inner.height ) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRectIntersectContaining"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (152) )) )}));
		//line 156 "/shared/hxmath/test/TestGeom.hx"
		hxmath.geom.Rect _this2 = new hxmath.geom.Rect(outer.x, outer.y, outer.width, outer.height);
		//line 156 "/shared/hxmath/test/TestGeom.hx"
		if (( _this2.x < left.x )) 
		{
			//line 156 "/shared/hxmath/test/TestGeom.hx"
			_this2.width -= ( left.x - _this2.x );
			//line 156 "/shared/hxmath/test/TestGeom.hx"
			_this2.x = left.x;
		}
		
		//line 156 "/shared/hxmath/test/TestGeom.hx"
		if (( _this2.y < left.y )) 
		{
			//line 156 "/shared/hxmath/test/TestGeom.hx"
			_this2.height -= ( left.y - _this2.y );
			//line 156 "/shared/hxmath/test/TestGeom.hx"
			_this2.y = left.y;
		}
		
		//line 156 "/shared/hxmath/test/TestGeom.hx"
		if (( ( _this2.x + _this2.width ) > ( left.x + left.width ) )) 
		{
			//line 156 "/shared/hxmath/test/TestGeom.hx"
			_this2.width -= ( ( _this2.x + _this2.width ) - (( left.x + left.width )) );
		}
		
		//line 156 "/shared/hxmath/test/TestGeom.hx"
		if (( ( _this2.y + _this2.height ) > ( left.y + left.height ) )) 
		{
			//line 156 "/shared/hxmath/test/TestGeom.hx"
			_this2.height -= ( ( _this2.y + _this2.height ) - (( left.y + left.height )) );
		}
		
		//line 156 "/shared/hxmath/test/TestGeom.hx"
		this.assertTrue(( ( ( ( ( innerLeft != null ) && ( _this2.x == innerLeft.x ) ) && ( _this2.y == innerLeft.y ) ) && ( _this2.width == innerLeft.width ) ) && ( _this2.height == innerLeft.height ) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRectIntersectContaining"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (156) )) )}));
		//line 158 "/shared/hxmath/test/TestGeom.hx"
		hxmath.geom.Rect _this3 = new hxmath.geom.Rect(left.x, left.y, left.width, left.height);
		//line 158 "/shared/hxmath/test/TestGeom.hx"
		if (( _this3.x < outer.x )) 
		{
			//line 158 "/shared/hxmath/test/TestGeom.hx"
			_this3.width -= ( outer.x - _this3.x );
			//line 158 "/shared/hxmath/test/TestGeom.hx"
			_this3.x = outer.x;
		}
		
		//line 158 "/shared/hxmath/test/TestGeom.hx"
		if (( _this3.y < outer.y )) 
		{
			//line 158 "/shared/hxmath/test/TestGeom.hx"
			_this3.height -= ( outer.y - _this3.y );
			//line 158 "/shared/hxmath/test/TestGeom.hx"
			_this3.y = outer.y;
		}
		
		//line 158 "/shared/hxmath/test/TestGeom.hx"
		if (( ( _this3.x + _this3.width ) > ( outer.x + outer.width ) )) 
		{
			//line 158 "/shared/hxmath/test/TestGeom.hx"
			_this3.width -= ( ( _this3.x + _this3.width ) - (( outer.x + outer.width )) );
		}
		
		//line 158 "/shared/hxmath/test/TestGeom.hx"
		if (( ( _this3.y + _this3.height ) > ( outer.y + outer.height ) )) 
		{
			//line 158 "/shared/hxmath/test/TestGeom.hx"
			_this3.height -= ( ( _this3.y + _this3.height ) - (( outer.y + outer.height )) );
		}
		
		//line 158 "/shared/hxmath/test/TestGeom.hx"
		this.assertTrue(( ( ( ( ( innerLeft != null ) && ( _this3.x == innerLeft.x ) ) && ( _this3.y == innerLeft.y ) ) && ( _this3.width == innerLeft.width ) ) && ( _this3.height == innerLeft.height ) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRectIntersectContaining"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (158) )) )}));
		//line 160 "/shared/hxmath/test/TestGeom.hx"
		hxmath.geom.Rect _this4 = new hxmath.geom.Rect(outer.x, outer.y, outer.width, outer.height);
		//line 160 "/shared/hxmath/test/TestGeom.hx"
		if (( _this4.x < right.x )) 
		{
			//line 160 "/shared/hxmath/test/TestGeom.hx"
			_this4.width -= ( right.x - _this4.x );
			//line 160 "/shared/hxmath/test/TestGeom.hx"
			_this4.x = right.x;
		}
		
		//line 160 "/shared/hxmath/test/TestGeom.hx"
		if (( _this4.y < right.y )) 
		{
			//line 160 "/shared/hxmath/test/TestGeom.hx"
			_this4.height -= ( right.y - _this4.y );
			//line 160 "/shared/hxmath/test/TestGeom.hx"
			_this4.y = right.y;
		}
		
		//line 160 "/shared/hxmath/test/TestGeom.hx"
		if (( ( _this4.x + _this4.width ) > ( right.x + right.width ) )) 
		{
			//line 160 "/shared/hxmath/test/TestGeom.hx"
			_this4.width -= ( ( _this4.x + _this4.width ) - (( right.x + right.width )) );
		}
		
		//line 160 "/shared/hxmath/test/TestGeom.hx"
		if (( ( _this4.y + _this4.height ) > ( right.y + right.height ) )) 
		{
			//line 160 "/shared/hxmath/test/TestGeom.hx"
			_this4.height -= ( ( _this4.y + _this4.height ) - (( right.y + right.height )) );
		}
		
		//line 160 "/shared/hxmath/test/TestGeom.hx"
		this.assertTrue(( ( ( ( ( innerRight != null ) && ( _this4.x == innerRight.x ) ) && ( _this4.y == innerRight.y ) ) && ( _this4.width == innerRight.width ) ) && ( _this4.height == innerRight.height ) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRectIntersectContaining"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (160) )) )}));
		//line 162 "/shared/hxmath/test/TestGeom.hx"
		hxmath.geom.Rect _this5 = new hxmath.geom.Rect(right.x, right.y, right.width, right.height);
		//line 162 "/shared/hxmath/test/TestGeom.hx"
		if (( _this5.x < outer.x )) 
		{
			//line 162 "/shared/hxmath/test/TestGeom.hx"
			_this5.width -= ( outer.x - _this5.x );
			//line 162 "/shared/hxmath/test/TestGeom.hx"
			_this5.x = outer.x;
		}
		
		//line 162 "/shared/hxmath/test/TestGeom.hx"
		if (( _this5.y < outer.y )) 
		{
			//line 162 "/shared/hxmath/test/TestGeom.hx"
			_this5.height -= ( outer.y - _this5.y );
			//line 162 "/shared/hxmath/test/TestGeom.hx"
			_this5.y = outer.y;
		}
		
		//line 162 "/shared/hxmath/test/TestGeom.hx"
		if (( ( _this5.x + _this5.width ) > ( outer.x + outer.width ) )) 
		{
			//line 162 "/shared/hxmath/test/TestGeom.hx"
			_this5.width -= ( ( _this5.x + _this5.width ) - (( outer.x + outer.width )) );
		}
		
		//line 162 "/shared/hxmath/test/TestGeom.hx"
		if (( ( _this5.y + _this5.height ) > ( outer.y + outer.height ) )) 
		{
			//line 162 "/shared/hxmath/test/TestGeom.hx"
			_this5.height -= ( ( _this5.y + _this5.height ) - (( outer.y + outer.height )) );
		}
		
		//line 162 "/shared/hxmath/test/TestGeom.hx"
		this.assertTrue(( ( ( ( ( innerRight != null ) && ( _this5.x == innerRight.x ) ) && ( _this5.y == innerRight.y ) ) && ( _this5.width == innerRight.width ) ) && ( _this5.height == innerRight.height ) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRectIntersectContaining"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (162) )) )}));
	}
	
	
	public void testRectToPointDistance()
	{
		//line 171 "/shared/hxmath/test/TestGeom.hx"
		hxmath.geom.Rect unit = new hxmath.geom.Rect(0.0, 0.0, 1.0, 1.0);
		//line 172 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default this1 = new hxmath.math.Vector2Default(-2.0, 0.5);
		//line 172 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default tmp = ((hxmath.math.Vector2Default) (this1) );
		//line 172 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default this2 = new hxmath.math.Vector2Default(3.0, 0.5);
		//line 172 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default tmp1 = ((hxmath.math.Vector2Default) (this2) );
		//line 172 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default this3 = new hxmath.math.Vector2Default(0.5, -2.0);
		//line 172 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default tmp2 = ((hxmath.math.Vector2Default) (this3) );
		//line 172 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default this4 = new hxmath.math.Vector2Default(0.5, 3.0);
		//line 172 "/shared/hxmath/test/TestGeom.hx"
		haxe.root.Array<hxmath.math.Vector2Default> distanceOfTwo = new haxe.root.Array<hxmath.math.Vector2Default>(new hxmath.math.Vector2Default[]{tmp, tmp1, tmp2, ((hxmath.math.Vector2Default) (this4) )});
		//line 174 "/shared/hxmath/test/TestGeom.hx"
		{
			//line 174 "/shared/hxmath/test/TestGeom.hx"
			int _g = 0;
			//line 174 "/shared/hxmath/test/TestGeom.hx"
			while (( _g < distanceOfTwo.length ))
			{
				//line 174 "/shared/hxmath/test/TestGeom.hx"
				hxmath.math.Vector2Default point = distanceOfTwo.__get(_g);
				//line 174 "/shared/hxmath/test/TestGeom.hx"
				 ++ _g;
				//line 176 "/shared/hxmath/test/TestGeom.hx"
				double dx = java.lang.Math.max(( java.lang.Math.abs(( point.x - (( unit.x + ( 0.5 * unit.width ) )) )) - ( 0.5 * unit.width ) ), ((double) (0) ));
				//line 176 "/shared/hxmath/test/TestGeom.hx"
				double dy = java.lang.Math.max(( java.lang.Math.abs(( point.y - (( unit.y + ( 0.5 * unit.height ) )) )) - ( 0.5 * unit.height ) ), ((double) (0) ));
				//line 176 "/shared/hxmath/test/TestGeom.hx"
				this.assertApproxEquals(2.0, java.lang.Math.sqrt(( ( dx * dx ) + ( dy * dy ) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRectToPointDistance"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (176) )) )}));
			}
			
		}
		
		//line 179 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default this5 = new hxmath.math.Vector2Default(0.75, 0.2);
		//line 179 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default inside = ((hxmath.math.Vector2Default) (this5) );
		//line 180 "/shared/hxmath/test/TestGeom.hx"
		double dx1 = java.lang.Math.max(( java.lang.Math.abs(( inside.x - (( unit.x + ( 0.5 * unit.width ) )) )) - ( 0.5 * unit.width ) ), ((double) (0) ));
		//line 180 "/shared/hxmath/test/TestGeom.hx"
		double dy1 = java.lang.Math.max(( java.lang.Math.abs(( inside.y - (( unit.y + ( 0.5 * unit.height ) )) )) - ( 0.5 * unit.height ) ), ((double) (0) ));
		//line 180 "/shared/hxmath/test/TestGeom.hx"
		this.assertEquals(((java.lang.Object) (0.0) ), ((java.lang.Object) (java.lang.Math.sqrt(( ( dx1 * dx1 ) + ( dy1 * dy1 ) ))) ), ((java.lang.Object) (new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRectToPointDistance"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (180) )) )})) ));
		//line 182 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default this6 = new hxmath.math.Vector2Default(-0.5, -0.5);
		//line 182 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default diagonal = ((hxmath.math.Vector2Default) (this6) );
		//line 183 "/shared/hxmath/test/TestGeom.hx"
		double tmp3 = java.lang.Math.sqrt(( ( diagonal.x * diagonal.x ) + ( diagonal.y * diagonal.y ) ));
		//line 183 "/shared/hxmath/test/TestGeom.hx"
		double dx2 = java.lang.Math.max(( java.lang.Math.abs(( diagonal.x - (( unit.x + ( 0.5 * unit.width ) )) )) - ( 0.5 * unit.width ) ), ((double) (0) ));
		//line 183 "/shared/hxmath/test/TestGeom.hx"
		double dy2 = java.lang.Math.max(( java.lang.Math.abs(( diagonal.y - (( unit.y + ( 0.5 * unit.height ) )) )) - ( 0.5 * unit.height ) ), ((double) (0) ));
		//line 183 "/shared/hxmath/test/TestGeom.hx"
		this.assertApproxEquals(tmp3, java.lang.Math.sqrt(( ( dx2 * dx2 ) + ( dy2 * dy2 ) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRectToPointDistance"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (183) )) )}));
		//line 185 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default this7 = new hxmath.math.Vector2Default(1.0, 1.0);
		//line 185 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default corner = ((hxmath.math.Vector2Default) (this7) );
		//line 186 "/shared/hxmath/test/TestGeom.hx"
		double dx3 = java.lang.Math.max(( java.lang.Math.abs(( corner.x - (( unit.x + ( 0.5 * unit.width ) )) )) - ( 0.5 * unit.width ) ), ((double) (0) ));
		//line 186 "/shared/hxmath/test/TestGeom.hx"
		double dy3 = java.lang.Math.max(( java.lang.Math.abs(( corner.y - (( unit.y + ( 0.5 * unit.height ) )) )) - ( 0.5 * unit.height ) ), ((double) (0) ));
		//line 186 "/shared/hxmath/test/TestGeom.hx"
		this.assertEquals(((java.lang.Object) (0.0) ), ((java.lang.Object) (java.lang.Math.sqrt(( ( dx3 * dx3 ) + ( dy3 * dy3 ) ))) ), ((java.lang.Object) (new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRectToPointDistance"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (186) )) )})) ));
	}
	
	
	public void testRectAddVector()
	{
		//line 191 "/shared/hxmath/test/TestGeom.hx"
		hxmath.geom.Rect unit = new hxmath.geom.Rect(0.0, 0.0, 1.0, 1.0);
		//line 192 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default this1 = new hxmath.math.Vector2Default(2.0, 2.0);
		//line 192 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default two = ((hxmath.math.Vector2Default) (this1) );
		//line 193 "/shared/hxmath/test/TestGeom.hx"
		double expectedArea = ( (( unit.width + two.x )) * (( unit.height + two.y )) );
		//line 196 "/shared/hxmath/test/TestGeom.hx"
		hxmath.geom.Rect _this = new hxmath.geom.Rect(unit.x, unit.y, unit.width, unit.height);
		//line 196 "/shared/hxmath/test/TestGeom.hx"
		if (( two.x < 0.0 )) 
		{
			//line 196 "/shared/hxmath/test/TestGeom.hx"
			_this.x += two.x;
			//line 196 "/shared/hxmath/test/TestGeom.hx"
			_this.width -= two.x;
		}
		else
		{
			//line 196 "/shared/hxmath/test/TestGeom.hx"
			_this.width += two.x;
		}
		
		//line 196 "/shared/hxmath/test/TestGeom.hx"
		if (( two.y < 0.0 )) 
		{
			//line 196 "/shared/hxmath/test/TestGeom.hx"
			_this.y += two.y;
			//line 196 "/shared/hxmath/test/TestGeom.hx"
			_this.height -= two.y;
		}
		else
		{
			//line 196 "/shared/hxmath/test/TestGeom.hx"
			_this.height += two.y;
		}
		
		//line 199 "/shared/hxmath/test/TestGeom.hx"
		this.assertApproxEquals(expectedArea, ( _this.width * _this.height ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRectAddVector"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (199) )) )}));
		//line 200 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default this2 = new hxmath.math.Vector2Default(_this.x, _this.y);
		//line 200 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default a = ((hxmath.math.Vector2Default) (this2) );
		//line 200 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default this3 = new hxmath.math.Vector2Default(unit.x, unit.y);
		//line 200 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default b = ((hxmath.math.Vector2Default) (this3) );
		//line 200 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default this4 = new hxmath.math.Vector2Default(a.x, a.y);
		//line 200 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default self = ((hxmath.math.Vector2Default) (this4) );
		//line 200 "/shared/hxmath/test/TestGeom.hx"
		self.x -= b.x;
		//line 200 "/shared/hxmath/test/TestGeom.hx"
		self.y -= b.y;
		//line 200 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default self1 = ((hxmath.math.Vector2Default) (self) );
		//line 200 "/shared/hxmath/test/TestGeom.hx"
		this.assertApproxEquals(0.0, java.lang.Math.sqrt(( ( self1.x * self1.x ) + ( self1.y * self1.y ) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRectAddVector"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (200) )) )}));
		//line 203 "/shared/hxmath/test/TestGeom.hx"
		hxmath.geom.Rect _this1 = new hxmath.geom.Rect(unit.x, unit.y, unit.width, unit.height);
		//line 204 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default this5 = new hxmath.math.Vector2Default( - (two.x) ,  - (two.y) );
		//line 203 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default v = ((hxmath.math.Vector2Default) (this5) );
		//line 203 "/shared/hxmath/test/TestGeom.hx"
		if (( v.x < 0.0 )) 
		{
			//line 203 "/shared/hxmath/test/TestGeom.hx"
			_this1.x += v.x;
			//line 203 "/shared/hxmath/test/TestGeom.hx"
			_this1.width -= v.x;
		}
		else
		{
			//line 203 "/shared/hxmath/test/TestGeom.hx"
			_this1.width += v.x;
		}
		
		//line 203 "/shared/hxmath/test/TestGeom.hx"
		if (( v.y < 0.0 )) 
		{
			//line 203 "/shared/hxmath/test/TestGeom.hx"
			_this1.y += v.y;
			//line 203 "/shared/hxmath/test/TestGeom.hx"
			_this1.height -= v.y;
		}
		else
		{
			//line 203 "/shared/hxmath/test/TestGeom.hx"
			_this1.height += v.y;
		}
		
		//line 206 "/shared/hxmath/test/TestGeom.hx"
		this.assertApproxEquals(expectedArea, ( _this1.width * _this1.height ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRectAddVector"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (206) )) )}));
		//line 207 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default this6 = new hxmath.math.Vector2Default(_this1.x, _this1.y);
		//line 207 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default a1 = ((hxmath.math.Vector2Default) (this6) );
		//line 207 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default this7 = new hxmath.math.Vector2Default(a1.x, a1.y);
		//line 207 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default self2 = ((hxmath.math.Vector2Default) (this7) );
		//line 207 "/shared/hxmath/test/TestGeom.hx"
		self2.x += two.x;
		//line 207 "/shared/hxmath/test/TestGeom.hx"
		self2.y += two.y;
		//line 207 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default self3 = ((hxmath.math.Vector2Default) (self2) );
		//line 207 "/shared/hxmath/test/TestGeom.hx"
		this.assertApproxEquals(0.0, java.lang.Math.sqrt(( ( self3.x * self3.x ) + ( self3.y * self3.y ) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRectAddVector"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (207) )) )}));
	}
	
	
	public void testRectDistanceAgainstRangeAlgorithm()
	{
		//line 212 "/shared/hxmath/test/TestGeom.hx"
		int _g = 0;
		//line 212 "/shared/hxmath/test/TestGeom.hx"
		while (( _g < 100 ))
		{
			//line 212 "/shared/hxmath/test/TestGeom.hx"
			 ++ _g;
			//line 214 "/shared/hxmath/test/TestGeom.hx"
			hxmath.geom.Rect a = new hxmath.geom.Rect(( java.lang.Math.random() - 0.5 ), ( java.lang.Math.random() - 0.5 ), java.lang.Math.random(), java.lang.Math.random());
			//line 215 "/shared/hxmath/test/TestGeom.hx"
			hxmath.geom.Rect b = new hxmath.geom.Rect(( java.lang.Math.random() - 0.5 ), ( java.lang.Math.random() - 0.5 ), java.lang.Math.random(), java.lang.Math.random());
			//line 217 "/shared/hxmath/test/TestGeom.hx"
			double dx = java.lang.Math.max(( java.lang.Math.abs(( ( b.x + ( 0.5 * b.width ) ) - (( a.x + ( 0.5 * a.width ) )) )) - ( 0.5 * (( a.width + b.width )) ) ), ((double) (0) ));
			//line 217 "/shared/hxmath/test/TestGeom.hx"
			double dy = java.lang.Math.max(( java.lang.Math.abs(( ( b.y + ( 0.5 * b.height ) ) - (( a.y + ( 0.5 * a.height ) )) )) - ( 0.5 * (( a.height + b.height )) ) ), ((double) (0) ));
			//line 217 "/shared/hxmath/test/TestGeom.hx"
			double regularDist = java.lang.Math.sqrt(( ( dx * dx ) + ( dy * dy ) ));
			//line 218 "/shared/hxmath/test/TestGeom.hx"
			double dx1 = java.lang.Math.max(( java.lang.Math.abs(( ( b.x + ( 0.5 * b.width ) ) - (( a.x + ( 0.5 * a.width ) )) )) - ( 0.5 * (( a.width + b.width )) ) ), ((double) (0) ));
			//line 218 "/shared/hxmath/test/TestGeom.hx"
			double dy1 = java.lang.Math.max(( java.lang.Math.abs(( ( b.y + ( 0.5 * b.height ) ) - (( a.y + ( 0.5 * a.height ) )) )) - ( 0.5 * (( a.height + b.height )) ) ), ((double) (0) ));
			//line 218 "/shared/hxmath/test/TestGeom.hx"
			double rangeDistance = java.lang.Math.sqrt(( ( dx1 * dx1 ) + ( dy1 * dy1 ) ));
			//line 219 "/shared/hxmath/test/TestGeom.hx"
			this.assertApproxEquals(rangeDistance, regularDist, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRectDistanceAgainstRangeAlgorithm"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (219) )) )}));
		}
		
	}
	
	
	public void testRay2Cast()
	{
		//line 225 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default this1 = new hxmath.math.Vector2Default(1.0, 1.0);
		//line 225 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default self = ((hxmath.math.Vector2Default) (this1) );
		//line 225 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default this2 = new hxmath.math.Vector2Default(self.x, self.y);
		//line 225 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default self1 = ((hxmath.math.Vector2Default) (this2) );
		//line 225 "/shared/hxmath/test/TestGeom.hx"
		double length = java.lang.Math.sqrt(( ( self1.x * self1.x ) + ( self1.y * self1.y ) ));
		//line 225 "/shared/hxmath/test/TestGeom.hx"
		if (( length > 0.0 )) 
		{
			//line 225 "/shared/hxmath/test/TestGeom.hx"
			self1.x /= length;
			//line 225 "/shared/hxmath/test/TestGeom.hx"
			self1.y /= length;
		}
		
		//line 226 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default this3 = new hxmath.math.Vector2Default(0.0, 0.0);
		//line 226 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default tmp = ((hxmath.math.Vector2Default) (this3) );
		//line 226 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default this4 = new hxmath.math.Vector2Default(1.0, 1.0);
		//line 226 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default self2 = ((hxmath.math.Vector2Default) (this4) );
		//line 226 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default this5 = new hxmath.math.Vector2Default(self2.x, self2.y);
		//line 226 "/shared/hxmath/test/TestGeom.hx"
		hxmath.math.Vector2Default self3 = ((hxmath.math.Vector2Default) (this5) );
		//line 226 "/shared/hxmath/test/TestGeom.hx"
		double length1 = java.lang.Math.sqrt(( ( self3.x * self3.x ) + ( self3.y * self3.y ) ));
		//line 226 "/shared/hxmath/test/TestGeom.hx"
		if (( length1 > 0.0 )) 
		{
			//line 226 "/shared/hxmath/test/TestGeom.hx"
			self3.x /= length1;
			//line 226 "/shared/hxmath/test/TestGeom.hx"
			self3.y /= length1;
		}
		
		//line 226 "/shared/hxmath/test/TestGeom.hx"
		hxmath.geom.Ray2 r = new hxmath.geom.Ray2(tmp, self3);
		//line 228 "/shared/hxmath/test/TestGeom.hx"
		double result = r.intersectPoint(self1, null);
		//line 229 "/shared/hxmath/test/TestGeom.hx"
		this.assertApproxEquals(1.0, result, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestGeom", "TestGeom.hx", "testRay2Cast"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (229) )) )}));
	}
	
	
	public double rangeRectDistance(hxmath.geom.Rect a, hxmath.geom.Rect b)
	{
		//line 235 "/shared/hxmath/test/TestGeom.hx"
		double aStart = a.x;
		//line 235 "/shared/hxmath/test/TestGeom.hx"
		double aWidth = a.width;
		//line 235 "/shared/hxmath/test/TestGeom.hx"
		double bStart = b.x;
		//line 235 "/shared/hxmath/test/TestGeom.hx"
		double bWidth = b.width;
		//line 235 "/shared/hxmath/test/TestGeom.hx"
		double minX = ( (( ( aStart + aWidth ) < bStart )) ? (( bStart - (( aStart + aWidth )) )) : (( (( ( bStart + bWidth ) < aStart )) ? (( aStart - (( bStart + bWidth )) )) : (((double) (0) )) )) );
		//line 236 "/shared/hxmath/test/TestGeom.hx"
		double aStart1 = a.y;
		//line 236 "/shared/hxmath/test/TestGeom.hx"
		double aWidth1 = a.height;
		//line 236 "/shared/hxmath/test/TestGeom.hx"
		double bStart1 = b.y;
		//line 236 "/shared/hxmath/test/TestGeom.hx"
		double bWidth1 = b.height;
		//line 236 "/shared/hxmath/test/TestGeom.hx"
		double minY = ( (( ( aStart1 + aWidth1 ) < bStart1 )) ? (( bStart1 - (( aStart1 + aWidth1 )) )) : (( (( ( bStart1 + bWidth1 ) < aStart1 )) ? (( aStart1 - (( bStart1 + bWidth1 )) )) : (((double) (0) )) )) );
		//line 241 "/shared/hxmath/test/TestGeom.hx"
		return java.lang.Math.sqrt(( ( minX * minX ) + ( minY * minY ) ));
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 12 "/shared/hxmath/test/TestGeom.hx"
		{
			//line 12 "/shared/hxmath/test/TestGeom.hx"
			boolean __temp_executeDef1 = true;
			//line 12 "/shared/hxmath/test/TestGeom.hx"
			switch (field.hashCode())
			{
				case -340410410:
				{
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					if (field.equals("rangeRectDistance")) 
					{
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "rangeRectDistance")) );
					}
					
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					break;
				}
				
				
				case -1949731799:
				{
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					if (field.equals("testRectIntersect")) 
					{
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testRectIntersect")) );
					}
					
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					break;
				}
				
				
				case 1232162649:
				{
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					if (field.equals("testRay2Cast")) 
					{
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testRay2Cast")) );
					}
					
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					break;
				}
				
				
				case -660501139:
				{
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					if (field.equals("testRectMatrixConversion")) 
					{
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testRectMatrixConversion")) );
					}
					
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					break;
				}
				
				
				case 219620584:
				{
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					if (field.equals("testRectDistanceAgainstRangeAlgorithm")) 
					{
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testRectDistanceAgainstRangeAlgorithm")) );
					}
					
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					break;
				}
				
				
				case -1750153141:
				{
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					if (field.equals("testRectTwoPointConstruction")) 
					{
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testRectTwoPointConstruction")) );
					}
					
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					break;
				}
				
				
				case 1914673230:
				{
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					if (field.equals("testRectAddVector")) 
					{
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testRectAddVector")) );
					}
					
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					break;
				}
				
				
				case 906585275:
				{
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					if (field.equals("testRectContainsPoint")) 
					{
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testRectContainsPoint")) );
					}
					
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					break;
				}
				
				
				case -1128360332:
				{
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					if (field.equals("testRectToPointDistance")) 
					{
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testRectToPointDistance")) );
					}
					
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					break;
				}
				
				
				case 1907522128:
				{
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					if (field.equals("testRectIntersectOverlapping")) 
					{
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testRectIntersectOverlapping")) );
					}
					
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					break;
				}
				
				
				case 497238935:
				{
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					if (field.equals("testRectIntersectContaining")) 
					{
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testRectIntersectContaining")) );
					}
					
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					break;
				}
				
				
			}
			
			//line 12 "/shared/hxmath/test/TestGeom.hx"
			if (__temp_executeDef1) 
			{
				//line 12 "/shared/hxmath/test/TestGeom.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 12 "/shared/hxmath/test/TestGeom.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 12 "/shared/hxmath/test/TestGeom.hx"
		{
			//line 12 "/shared/hxmath/test/TestGeom.hx"
			boolean __temp_executeDef1 = true;
			//line 12 "/shared/hxmath/test/TestGeom.hx"
			switch (field.hashCode())
			{
				case -340410410:
				{
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					if (field.equals("rangeRectDistance")) 
					{
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						return this.rangeRectDistance(((hxmath.geom.Rect) (dynargs.__get(0)) ), ((hxmath.geom.Rect) (dynargs.__get(1)) ));
					}
					
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					break;
				}
				
				
				case -1949731799:
				{
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					if (field.equals("testRectIntersect")) 
					{
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						this.testRectIntersect();
					}
					
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					break;
				}
				
				
				case 1232162649:
				{
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					if (field.equals("testRay2Cast")) 
					{
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						this.testRay2Cast();
					}
					
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					break;
				}
				
				
				case -660501139:
				{
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					if (field.equals("testRectMatrixConversion")) 
					{
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						this.testRectMatrixConversion();
					}
					
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					break;
				}
				
				
				case 219620584:
				{
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					if (field.equals("testRectDistanceAgainstRangeAlgorithm")) 
					{
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						this.testRectDistanceAgainstRangeAlgorithm();
					}
					
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					break;
				}
				
				
				case -1750153141:
				{
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					if (field.equals("testRectTwoPointConstruction")) 
					{
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						this.testRectTwoPointConstruction();
					}
					
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					break;
				}
				
				
				case 1914673230:
				{
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					if (field.equals("testRectAddVector")) 
					{
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						this.testRectAddVector();
					}
					
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					break;
				}
				
				
				case 906585275:
				{
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					if (field.equals("testRectContainsPoint")) 
					{
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						this.testRectContainsPoint();
					}
					
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					break;
				}
				
				
				case -1128360332:
				{
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					if (field.equals("testRectToPointDistance")) 
					{
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						this.testRectToPointDistance();
					}
					
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					break;
				}
				
				
				case 1907522128:
				{
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					if (field.equals("testRectIntersectOverlapping")) 
					{
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						this.testRectIntersectOverlapping();
					}
					
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					break;
				}
				
				
				case 497238935:
				{
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					if (field.equals("testRectIntersectContaining")) 
					{
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/hxmath/test/TestGeom.hx"
						this.testRectIntersectContaining();
					}
					
					//line 12 "/shared/hxmath/test/TestGeom.hx"
					break;
				}
				
				
			}
			
			//line 12 "/shared/hxmath/test/TestGeom.hx"
			if (__temp_executeDef1) 
			{
				//line 12 "/shared/hxmath/test/TestGeom.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 12 "/shared/hxmath/test/TestGeom.hx"
		return null;
	}
	
	
}


