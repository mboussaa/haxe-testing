// Generated by Haxe 3.3.0
package test;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestFrames extends test.MathTestCase
{
	public TestFrames(haxe.lang.EmptyObject empty)
	{
		//line 37 "/shared/hxmath/test/TestFrames.hx"
		super(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public TestFrames(java.lang.Object posInfos)
	{
		//line 29 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		super(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
		//line 29 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		test.TestFrames.__hx_ctor_test_TestFrames(this, posInfos);
	}
	
	
	public static void __hx_ctor_test_TestFrames(test.TestFrames __temp_me65, java.lang.Object posInfos)
	{
		//line 29 "/usr/lib/haxe/lib/nanotest/1,0,0/nanotest/NanoTestCase.hx"
		test.MathTestCase.__hx_ctor_test_MathTestCase(__temp_me65, posInfos);
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 37 "/shared/hxmath/test/TestFrames.hx"
		return new test.TestFrames(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 37 "/shared/hxmath/test/TestFrames.hx"
		return new test.TestFrames(((java.lang.Object) (arr.__get(0)) ));
	}
	
	
	public void testFrame2Concat()
	{
		//line 41 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this1 = new hxmath.math.Vector2Default(1.0, 1.0);
		//line 41 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default originA = ((hxmath.math.Vector2Default) (this1) );
		//line 42 "/shared/hxmath/test/TestFrames.hx"
		hxmath.frames.IFrame2 a = hxmath.frames._Frame2.Frame2_Impl_._new(originA, 90.0);
		//line 43 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this2 = new hxmath.math.Vector2Default(1.0, 0.0);
		//line 43 "/shared/hxmath/test/TestFrames.hx"
		hxmath.frames.IFrame2 b = hxmath.frames._Frame2.Frame2_Impl_._new(((hxmath.math.Vector2Default) (this2) ), 90.0);
		//line 44 "/shared/hxmath/test/TestFrames.hx"
		hxmath.frames.IFrame2 self = ((hxmath.frames.IFrame2) (hxmath.frames._Frame2.Frame2_Impl_._new(a.get_offset(), a.get_angleDegrees())) );
		//line 44 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix3x2Default self1 = ((hxmath.math.Matrix3x2Default) (self.get_matrix()) );
		//line 44 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix2x2Default this3 = new hxmath.math.Matrix2x2Default(self1.a, self1.b, self1.c, self1.d);
		//line 44 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix2x2Default m = ((hxmath.math.Matrix2x2Default) (this3) );
		//line 44 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default v = b.get_offset();
		//line 44 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this4 = new hxmath.math.Vector2Default(( ( m.a * v.x ) + ( m.b * v.y ) ), ( ( m.c * v.x ) + ( m.d * v.y ) ));
		//line 44 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default a1 = self.get_offset();
		//line 44 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self2 = ((hxmath.math.Vector2Default) (this4) );
		//line 44 "/shared/hxmath/test/TestFrames.hx"
		self2.x += a1.x;
		//line 44 "/shared/hxmath/test/TestFrames.hx"
		self2.y += a1.y;
		//line 44 "/shared/hxmath/test/TestFrames.hx"
		double x = ( self.get_angleDegrees() + b.get_angleDegrees() );
		//line 44 "/shared/hxmath/test/TestFrames.hx"
		self.set_angleDegrees(( (( x < 0 )) ? (( 360 - (  - (x)  % 360 ) )) : (( x % 360 )) ));
		//line 44 "/shared/hxmath/test/TestFrames.hx"
		self.set_offset(self2);
		//line 46 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default p = b.get_offset();
		//line 46 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix3x2Default m1 = a.get_matrix();
		//line 46 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix2x2Default this5 = new hxmath.math.Matrix2x2Default(m1.a, m1.b, m1.c, m1.d);
		//line 46 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix2x2Default m2 = ((hxmath.math.Matrix2x2Default) (this5) );
		//line 46 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this6 = new hxmath.math.Vector2Default(( ( m2.a * p.x ) + ( m2.b * p.y ) ), ( ( m2.c * p.x ) + ( m2.d * p.y ) ));
		//line 46 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default a2 = ((hxmath.math.Vector2Default) (this6) );
		//line 46 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this7 = new hxmath.math.Vector2Default(m1.tx, m1.ty);
		//line 46 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default b1 = ((hxmath.math.Vector2Default) (this7) );
		//line 46 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this8 = new hxmath.math.Vector2Default(a2.x, a2.y);
		//line 46 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self3 = ((hxmath.math.Vector2Default) (this8) );
		//line 46 "/shared/hxmath/test/TestFrames.hx"
		self3.x += b1.x;
		//line 46 "/shared/hxmath/test/TestFrames.hx"
		self3.y += b1.y;
		//line 46 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this9 = new hxmath.math.Vector2Default(0.0, 1.0);
		//line 46 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default a3 = ((hxmath.math.Vector2Default) (this9) );
		//line 46 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this10 = new hxmath.math.Vector2Default(a3.x, a3.y);
		//line 46 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self4 = ((hxmath.math.Vector2Default) (this10) );
		//line 46 "/shared/hxmath/test/TestFrames.hx"
		self4.x += originA.x;
		//line 46 "/shared/hxmath/test/TestFrames.hx"
		self4.y += originA.y;
		//line 46 "/shared/hxmath/test/TestFrames.hx"
		this.assertTrue(( ( ( self3 == null ) && ( self4 == null ) ) || ( ( ( ( self3 != null ) && ( self4 != null ) ) && ( self3.x == self4.x ) ) && ( self3.y == self4.y ) ) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testFrame2Concat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (46) )) )}));
		//line 49 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default a4 = self.get_offset();
		//line 49 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this11 = new hxmath.math.Vector2Default(0.0, 1.0);
		//line 49 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default a5 = ((hxmath.math.Vector2Default) (this11) );
		//line 49 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this12 = new hxmath.math.Vector2Default(a5.x, a5.y);
		//line 49 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self5 = ((hxmath.math.Vector2Default) (this12) );
		//line 49 "/shared/hxmath/test/TestFrames.hx"
		self5.x += originA.x;
		//line 49 "/shared/hxmath/test/TestFrames.hx"
		self5.y += originA.y;
		//line 49 "/shared/hxmath/test/TestFrames.hx"
		this.assertTrue(( ( ( a4 == null ) && ( self5 == null ) ) || ( ( ( ( a4 != null ) && ( self5 != null ) ) && ( a4.x == self5.x ) ) && ( a4.y == self5.y ) ) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testFrame2Concat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (49) )) )}));
		//line 50 "/shared/hxmath/test/TestFrames.hx"
		this.assertEquals(((java.lang.Object) (self.get_angleDegrees()) ), ((java.lang.Object) (180.0) ), ((java.lang.Object) (new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testFrame2Concat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (50) )) )})) ));
		//line 53 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix3x2Default m3 = self.get_matrix();
		//line 53 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this13 = new hxmath.math.Vector2Default(0.0, 0.0);
		//line 53 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default v1 = ((hxmath.math.Vector2Default) (this13) );
		//line 53 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix2x2Default this14 = new hxmath.math.Matrix2x2Default(m3.a, m3.b, m3.c, m3.d);
		//line 53 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix2x2Default m4 = ((hxmath.math.Matrix2x2Default) (this14) );
		//line 53 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this15 = new hxmath.math.Vector2Default(( ( m4.a * v1.x ) + ( m4.b * v1.y ) ), ( ( m4.c * v1.x ) + ( m4.d * v1.y ) ));
		//line 53 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default a6 = ((hxmath.math.Vector2Default) (this15) );
		//line 53 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this16 = new hxmath.math.Vector2Default(m3.tx, m3.ty);
		//line 53 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default b2 = ((hxmath.math.Vector2Default) (this16) );
		//line 53 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this17 = new hxmath.math.Vector2Default(a6.x, a6.y);
		//line 53 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self6 = ((hxmath.math.Vector2Default) (this17) );
		//line 53 "/shared/hxmath/test/TestFrames.hx"
		self6.x += b2.x;
		//line 53 "/shared/hxmath/test/TestFrames.hx"
		self6.y += b2.y;
		//line 53 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this18 = new hxmath.math.Vector2Default(0.0, 1.0);
		//line 53 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default a7 = ((hxmath.math.Vector2Default) (this18) );
		//line 53 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this19 = new hxmath.math.Vector2Default(a7.x, a7.y);
		//line 53 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self7 = ((hxmath.math.Vector2Default) (this19) );
		//line 53 "/shared/hxmath/test/TestFrames.hx"
		self7.x += originA.x;
		//line 53 "/shared/hxmath/test/TestFrames.hx"
		self7.y += originA.y;
		//line 53 "/shared/hxmath/test/TestFrames.hx"
		this.assertTrue(( ( ( self6 == null ) && ( self7 == null ) ) || ( ( ( ( self6 != null ) && ( self7 != null ) ) && ( self6.x == self7.x ) ) && ( self6.y == self7.y ) ) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testFrame2Concat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (53) )) )}));
	}
	
	
	public void testFrame3Concat()
	{
		//line 58 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default this1 = new hxmath.math.Vector3Default(1.0, 1.0, 0.0);
		//line 58 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default originA = ((hxmath.math.Vector3Default) (this1) );
		//line 59 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default this2 = new hxmath.math.Vector3Default(0.0, 0.0, 1.0);
		//line 59 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default axis = ((hxmath.math.Vector3Default) (this2) );
		//line 59 "/shared/hxmath/test/TestFrames.hx"
		double angleRadians = ( ( java.lang.Math.PI / 180 ) * 90.0 );
		//line 59 "/shared/hxmath/test/TestFrames.hx"
		double cosHalfAngle = java.lang.Math.cos(( angleRadians / 2.0 ));
		//line 59 "/shared/hxmath/test/TestFrames.hx"
		double sinHalfAngle = java.lang.Math.sin(( angleRadians / 2.0 ));
		//line 59 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.QuaternionDefault this3 = new hxmath.math.QuaternionDefault(cosHalfAngle, ( sinHalfAngle * axis.x ), ( sinHalfAngle * axis.y ), ( sinHalfAngle * axis.z ));
		//line 59 "/shared/hxmath/test/TestFrames.hx"
		hxmath.frames.IFrame3 a = hxmath.frames._Frame3.Frame3_Impl_._new(originA, ((hxmath.math.QuaternionDefault) (this3) ));
		//line 60 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default this4 = new hxmath.math.Vector3Default(1.0, 0.0, 0.0);
		//line 60 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default tmp = ((hxmath.math.Vector3Default) (this4) );
		//line 60 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default this5 = new hxmath.math.Vector3Default(0.0, 0.0, 1.0);
		//line 60 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default axis1 = ((hxmath.math.Vector3Default) (this5) );
		//line 60 "/shared/hxmath/test/TestFrames.hx"
		double angleRadians1 = ( ( java.lang.Math.PI / 180 ) * 90.0 );
		//line 60 "/shared/hxmath/test/TestFrames.hx"
		double cosHalfAngle1 = java.lang.Math.cos(( angleRadians1 / 2.0 ));
		//line 60 "/shared/hxmath/test/TestFrames.hx"
		double sinHalfAngle1 = java.lang.Math.sin(( angleRadians1 / 2.0 ));
		//line 60 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.QuaternionDefault this6 = new hxmath.math.QuaternionDefault(cosHalfAngle1, ( sinHalfAngle1 * axis1.x ), ( sinHalfAngle1 * axis1.y ), ( sinHalfAngle1 * axis1.z ));
		//line 60 "/shared/hxmath/test/TestFrames.hx"
		hxmath.frames.IFrame3 b = hxmath.frames._Frame3.Frame3_Impl_._new(tmp, ((hxmath.math.QuaternionDefault) (this6) ));
		//line 61 "/shared/hxmath/test/TestFrames.hx"
		hxmath.frames.IFrame3 self = ((hxmath.frames.IFrame3) (hxmath.frames._Frame3.Frame3_Impl_._new(a.get_offset(), a.get_orientation())) );
		//line 61 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.QuaternionDefault this7 = self.get_orientation();
		//line 61 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default u = b.get_offset();
		//line 61 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.QuaternionDefault self1 = ((hxmath.math.QuaternionDefault) (this7) );
		//line 61 "/shared/hxmath/test/TestFrames.hx"
		double a1 = ( 2.0 * (( ( ( self1.x * u.x ) + ( self1.y * u.y ) ) + ( self1.z * u.z ) )) );
		//line 61 "/shared/hxmath/test/TestFrames.hx"
		double b1 = ( ( ( ( self1.s * self1.s ) - ( self1.x * self1.x ) ) - ( self1.y * self1.y ) ) - ( self1.z * self1.z ) );
		//line 61 "/shared/hxmath/test/TestFrames.hx"
		double c = ( 2.0 * self1.s );
		//line 61 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default this8 = new hxmath.math.Vector3Default(( ( ( a1 * self1.x ) + ( b1 * u.x ) ) + ( c * (( ( self1.y * u.z ) - ( self1.z * u.y ) )) ) ), ( ( ( a1 * self1.y ) + ( b1 * u.y ) ) + ( c * (( ( self1.z * u.x ) - ( self1.x * u.z ) )) ) ), ( ( ( a1 * self1.z ) + ( b1 * u.z ) ) + ( c * (( ( self1.x * u.y ) - ( self1.y * u.x ) )) ) ));
		//line 61 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default a2 = self.get_offset();
		//line 61 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default self2 = ((hxmath.math.Vector3Default) (this8) );
		//line 61 "/shared/hxmath/test/TestFrames.hx"
		self2.x += a2.x;
		//line 61 "/shared/hxmath/test/TestFrames.hx"
		self2.y += a2.y;
		//line 61 "/shared/hxmath/test/TestFrames.hx"
		self2.z += a2.z;
		//line 61 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.QuaternionDefault a3 = self.get_orientation();
		//line 61 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.QuaternionDefault b2 = b.get_orientation();
		//line 61 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.QuaternionDefault this9 = new hxmath.math.QuaternionDefault(( ( ( ( a3.s * b2.s ) - ( a3.x * b2.x ) ) - ( a3.y * b2.y ) ) - ( a3.z * b2.z ) ), ( ( ( ( a3.s * b2.x ) + ( b2.s * a3.x ) ) + ( a3.y * b2.z ) ) - ( a3.z * b2.y ) ), ( ( ( ( a3.s * b2.y ) + ( b2.s * a3.y ) ) + ( a3.z * b2.x ) ) - ( a3.x * b2.z ) ), ( ( ( ( a3.s * b2.z ) + ( b2.s * a3.z ) ) + ( a3.x * b2.y ) ) - ( a3.y * b2.x ) ));
		//line 61 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.QuaternionDefault self3 = ((hxmath.math.QuaternionDefault) (this9) );
		//line 61 "/shared/hxmath/test/TestFrames.hx"
		double _g = ( 1.0 / java.lang.Math.sqrt(( ( ( ( self3.s * self3.s ) + ( self3.x * self3.x ) ) + ( self3.y * self3.y ) ) + ( self3.z * self3.z ) )) );
		//line 61 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.QuaternionDefault this10 = new hxmath.math.QuaternionDefault(self3.s, self3.x, self3.y, self3.z);
		//line 61 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.QuaternionDefault self4 = ((hxmath.math.QuaternionDefault) (this10) );
		//line 61 "/shared/hxmath/test/TestFrames.hx"
		self4.s *= _g;
		//line 61 "/shared/hxmath/test/TestFrames.hx"
		self4.x *= _g;
		//line 61 "/shared/hxmath/test/TestFrames.hx"
		self4.y *= _g;
		//line 61 "/shared/hxmath/test/TestFrames.hx"
		self4.z *= _g;
		//line 61 "/shared/hxmath/test/TestFrames.hx"
		self.set_orientation(self4);
		//line 61 "/shared/hxmath/test/TestFrames.hx"
		self.set_offset(self2);
		//line 63 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default p = b.get_offset();
		//line 63 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.QuaternionDefault self5 = ((hxmath.math.QuaternionDefault) (a.get_orientation()) );
		//line 63 "/shared/hxmath/test/TestFrames.hx"
		double a4 = ( 2.0 * (( ( ( self5.x * p.x ) + ( self5.y * p.y ) ) + ( self5.z * p.z ) )) );
		//line 63 "/shared/hxmath/test/TestFrames.hx"
		double b3 = ( ( ( ( self5.s * self5.s ) - ( self5.x * self5.x ) ) - ( self5.y * self5.y ) ) - ( self5.z * self5.z ) );
		//line 63 "/shared/hxmath/test/TestFrames.hx"
		double c1 = ( 2.0 * self5.s );
		//line 63 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default this11 = new hxmath.math.Vector3Default(( ( ( a4 * self5.x ) + ( b3 * p.x ) ) + ( c1 * (( ( self5.y * p.z ) - ( self5.z * p.y ) )) ) ), ( ( ( a4 * self5.y ) + ( b3 * p.y ) ) + ( c1 * (( ( self5.z * p.x ) - ( self5.x * p.z ) )) ) ), ( ( ( a4 * self5.z ) + ( b3 * p.z ) ) + ( c1 * (( ( self5.x * p.y ) - ( self5.y * p.x ) )) ) ));
		//line 63 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default a5 = a.get_offset();
		//line 63 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default self6 = ((hxmath.math.Vector3Default) (this11) );
		//line 63 "/shared/hxmath/test/TestFrames.hx"
		self6.x += a5.x;
		//line 63 "/shared/hxmath/test/TestFrames.hx"
		self6.y += a5.y;
		//line 63 "/shared/hxmath/test/TestFrames.hx"
		self6.z += a5.z;
		//line 63 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default this12 = new hxmath.math.Vector3Default(0.0, 1.0, 0.0);
		//line 63 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default a6 = ((hxmath.math.Vector3Default) (this12) );
		//line 63 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default this13 = new hxmath.math.Vector3Default(a6.x, a6.y, a6.z);
		//line 63 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default self7 = ((hxmath.math.Vector3Default) (this13) );
		//line 63 "/shared/hxmath/test/TestFrames.hx"
		self7.x += originA.x;
		//line 63 "/shared/hxmath/test/TestFrames.hx"
		self7.y += originA.y;
		//line 63 "/shared/hxmath/test/TestFrames.hx"
		self7.z += originA.z;
		//line 63 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default this14 = new hxmath.math.Vector3Default(self6.x, self6.y, self6.z);
		//line 63 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default self8 = ((hxmath.math.Vector3Default) (this14) );
		//line 63 "/shared/hxmath/test/TestFrames.hx"
		self8.x -= self7.x;
		//line 63 "/shared/hxmath/test/TestFrames.hx"
		self8.y -= self7.y;
		//line 63 "/shared/hxmath/test/TestFrames.hx"
		self8.z -= self7.z;
		//line 63 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default self9 = ((hxmath.math.Vector3Default) (self8) );
		//line 63 "/shared/hxmath/test/TestFrames.hx"
		this.assertApproxEquals(0.0, java.lang.Math.sqrt(( ( ( self9.x * self9.x ) + ( self9.y * self9.y ) ) + ( self9.z * self9.z ) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testFrame3Concat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (63) )) )}));
		//line 66 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default a7 = self.get_offset();
		//line 66 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default this15 = new hxmath.math.Vector3Default(0.0, 1.0, 0.0);
		//line 66 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default a8 = ((hxmath.math.Vector3Default) (this15) );
		//line 66 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default this16 = new hxmath.math.Vector3Default(a8.x, a8.y, a8.z);
		//line 66 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default self10 = ((hxmath.math.Vector3Default) (this16) );
		//line 66 "/shared/hxmath/test/TestFrames.hx"
		self10.x += originA.x;
		//line 66 "/shared/hxmath/test/TestFrames.hx"
		self10.y += originA.y;
		//line 66 "/shared/hxmath/test/TestFrames.hx"
		self10.z += originA.z;
		//line 66 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default this17 = new hxmath.math.Vector3Default(a7.x, a7.y, a7.z);
		//line 66 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default self11 = ((hxmath.math.Vector3Default) (this17) );
		//line 66 "/shared/hxmath/test/TestFrames.hx"
		self11.x -= self10.x;
		//line 66 "/shared/hxmath/test/TestFrames.hx"
		self11.y -= self10.y;
		//line 66 "/shared/hxmath/test/TestFrames.hx"
		self11.z -= self10.z;
		//line 66 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default self12 = ((hxmath.math.Vector3Default) (self11) );
		//line 66 "/shared/hxmath/test/TestFrames.hx"
		this.assertApproxEquals(0.0, java.lang.Math.sqrt(( ( ( self12.x * self12.x ) + ( self12.y * self12.y ) ) + ( self12.z * self12.z ) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testFrame3Concat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (66) )) )}));
		//line 69 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.QuaternionDefault a9 = self.get_orientation();
		//line 69 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.QuaternionDefault this18 = new hxmath.math.QuaternionDefault(((double) (1) ), ((double) (0) ), ((double) (0) ), ((double) (0) ));
		//line 69 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.QuaternionDefault b4 = ((hxmath.math.QuaternionDefault) (this18) );
		//line 69 "/shared/hxmath/test/TestFrames.hx"
		this.assertApproxEquals(0.0, ( ( ( ( a9.s * b4.s ) + ( a9.x * b4.x ) ) + ( a9.y * b4.y ) ) + ( a9.z * b4.z ) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testFrame3Concat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (69) )) )}));
		//line 72 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default this19 = new hxmath.math.Vector3Default(0.0, 0.0, 0.0);
		//line 72 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default p1 = ((hxmath.math.Vector3Default) (this19) );
		//line 72 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.QuaternionDefault self13 = ((hxmath.math.QuaternionDefault) (self.get_orientation()) );
		//line 72 "/shared/hxmath/test/TestFrames.hx"
		double a10 = ( 2.0 * (( ( ( self13.x * p1.x ) + ( self13.y * p1.y ) ) + ( self13.z * p1.z ) )) );
		//line 72 "/shared/hxmath/test/TestFrames.hx"
		double b5 = ( ( ( ( self13.s * self13.s ) - ( self13.x * self13.x ) ) - ( self13.y * self13.y ) ) - ( self13.z * self13.z ) );
		//line 72 "/shared/hxmath/test/TestFrames.hx"
		double c2 = ( 2.0 * self13.s );
		//line 72 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default this20 = new hxmath.math.Vector3Default(( ( ( a10 * self13.x ) + ( b5 * p1.x ) ) + ( c2 * (( ( self13.y * p1.z ) - ( self13.z * p1.y ) )) ) ), ( ( ( a10 * self13.y ) + ( b5 * p1.y ) ) + ( c2 * (( ( self13.z * p1.x ) - ( self13.x * p1.z ) )) ) ), ( ( ( a10 * self13.z ) + ( b5 * p1.z ) ) + ( c2 * (( ( self13.x * p1.y ) - ( self13.y * p1.x ) )) ) ));
		//line 72 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default a11 = self.get_offset();
		//line 72 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default self14 = ((hxmath.math.Vector3Default) (this20) );
		//line 72 "/shared/hxmath/test/TestFrames.hx"
		self14.x += a11.x;
		//line 72 "/shared/hxmath/test/TestFrames.hx"
		self14.y += a11.y;
		//line 72 "/shared/hxmath/test/TestFrames.hx"
		self14.z += a11.z;
		//line 72 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default this21 = new hxmath.math.Vector3Default(0.0, 1.0, 0.0);
		//line 72 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default a12 = ((hxmath.math.Vector3Default) (this21) );
		//line 72 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default this22 = new hxmath.math.Vector3Default(a12.x, a12.y, a12.z);
		//line 72 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default self15 = ((hxmath.math.Vector3Default) (this22) );
		//line 72 "/shared/hxmath/test/TestFrames.hx"
		self15.x += originA.x;
		//line 72 "/shared/hxmath/test/TestFrames.hx"
		self15.y += originA.y;
		//line 72 "/shared/hxmath/test/TestFrames.hx"
		self15.z += originA.z;
		//line 72 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default this23 = new hxmath.math.Vector3Default(self14.x, self14.y, self14.z);
		//line 72 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default self16 = ((hxmath.math.Vector3Default) (this23) );
		//line 72 "/shared/hxmath/test/TestFrames.hx"
		self16.x -= self15.x;
		//line 72 "/shared/hxmath/test/TestFrames.hx"
		self16.y -= self15.y;
		//line 72 "/shared/hxmath/test/TestFrames.hx"
		self16.z -= self15.z;
		//line 72 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default self17 = ((hxmath.math.Vector3Default) (self16) );
		//line 72 "/shared/hxmath/test/TestFrames.hx"
		this.assertApproxEquals(0.0, java.lang.Math.sqrt(( ( ( self17.x * self17.x ) + ( self17.y * self17.y ) ) + ( self17.z * self17.z ) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testFrame3Concat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (72) )) )}));
	}
	
	
	public void testFrame2LinearAffineTransform()
	{
		//line 87 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this1 = new hxmath.math.Vector2Default(1.0, 1.0);
		//line 87 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default originA = ((hxmath.math.Vector2Default) (this1) );
		//line 88 "/shared/hxmath/test/TestFrames.hx"
		hxmath.frames.IFrame2 a = hxmath.frames._Frame2.Frame2_Impl_._new(originA, 90.0);
		//line 90 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this2 = new hxmath.math.Vector2Default(1.0, 1.0);
		//line 90 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default testInA = ((hxmath.math.Vector2Default) (this2) );
		//line 93 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix3x2Default self = ((hxmath.math.Matrix3x2Default) (a.get_matrix()) );
		//line 93 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix2x2Default this3 = new hxmath.math.Matrix2x2Default(self.a, self.b, self.c, self.d);
		//line 93 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix2x2Default m = ((hxmath.math.Matrix2x2Default) (this3) );
		//line 93 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this4 = new hxmath.math.Vector2Default(( ( m.a * testInA.x ) + ( m.b * testInA.y ) ), ( ( m.c * testInA.x ) + ( m.d * testInA.y ) ));
		//line 93 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default testLinearInOuter = ((hxmath.math.Vector2Default) (this4) );
		//line 94 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this5 = new hxmath.math.Vector2Default(-1.0, 1.0);
		//line 94 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default expectedLinearResult = ((hxmath.math.Vector2Default) (this5) );
		//line 95 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this6 = new hxmath.math.Vector2Default(testLinearInOuter.x, testLinearInOuter.y);
		//line 95 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self1 = ((hxmath.math.Vector2Default) (this6) );
		//line 95 "/shared/hxmath/test/TestFrames.hx"
		self1.x -= expectedLinearResult.x;
		//line 95 "/shared/hxmath/test/TestFrames.hx"
		self1.y -= expectedLinearResult.y;
		//line 95 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self2 = ((hxmath.math.Vector2Default) (self1) );
		//line 95 "/shared/hxmath/test/TestFrames.hx"
		this.assertApproxEquals(java.lang.Math.sqrt(( ( self2.x * self2.x ) + ( self2.y * self2.y ) )), 0.0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testFrame2LinearAffineTransform"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (95) )) )}));
		//line 98 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix3x2Default m1 = a.get_matrix();
		//line 98 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix2x2Default this7 = new hxmath.math.Matrix2x2Default(m1.a, m1.b, m1.c, m1.d);
		//line 98 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix2x2Default m2 = ((hxmath.math.Matrix2x2Default) (this7) );
		//line 98 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this8 = new hxmath.math.Vector2Default(( ( m2.a * testInA.x ) + ( m2.b * testInA.y ) ), ( ( m2.c * testInA.x ) + ( m2.d * testInA.y ) ));
		//line 98 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default a1 = ((hxmath.math.Vector2Default) (this8) );
		//line 98 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this9 = new hxmath.math.Vector2Default(m1.tx, m1.ty);
		//line 98 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default b = ((hxmath.math.Vector2Default) (this9) );
		//line 98 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this10 = new hxmath.math.Vector2Default(a1.x, a1.y);
		//line 98 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self3 = ((hxmath.math.Vector2Default) (this10) );
		//line 98 "/shared/hxmath/test/TestFrames.hx"
		self3.x += b.x;
		//line 98 "/shared/hxmath/test/TestFrames.hx"
		self3.y += b.y;
		//line 99 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this11 = new hxmath.math.Vector2Default(expectedLinearResult.x, expectedLinearResult.y);
		//line 99 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self4 = ((hxmath.math.Vector2Default) (this11) );
		//line 99 "/shared/hxmath/test/TestFrames.hx"
		self4.x += originA.x;
		//line 99 "/shared/hxmath/test/TestFrames.hx"
		self4.y += originA.y;
		//line 100 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this12 = new hxmath.math.Vector2Default(self3.x, self3.y);
		//line 100 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self5 = ((hxmath.math.Vector2Default) (this12) );
		//line 100 "/shared/hxmath/test/TestFrames.hx"
		self5.x -= self4.x;
		//line 100 "/shared/hxmath/test/TestFrames.hx"
		self5.y -= self4.y;
		//line 100 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self6 = ((hxmath.math.Vector2Default) (self5) );
		//line 100 "/shared/hxmath/test/TestFrames.hx"
		this.assertApproxEquals(java.lang.Math.sqrt(( ( self6.x * self6.x ) + ( self6.y * self6.y ) )), 0.0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testFrame2LinearAffineTransform"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (100) )) )}));
		//line 103 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix3x2Default self7 = ((hxmath.math.Matrix3x2Default) (a.get_matrix()) );
		//line 103 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix2x2Default this13 = new hxmath.math.Matrix2x2Default(self7.a, self7.b, self7.c, self7.d);
		//line 103 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix2x2Default self8 = ((hxmath.math.Matrix2x2Default) (this13) );
		//line 103 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this14 = new hxmath.math.Vector2Default(( ( self8.a * testLinearInOuter.x ) + ( self8.c * testLinearInOuter.y ) ), ( ( self8.b * testLinearInOuter.x ) + ( self8.d * testLinearInOuter.y ) ));
		//line 103 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default testLinearBackToInner = ((hxmath.math.Vector2Default) (this14) );
		//line 104 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this15 = new hxmath.math.Vector2Default(testLinearBackToInner.x, testLinearBackToInner.y);
		//line 104 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self9 = ((hxmath.math.Vector2Default) (this15) );
		//line 104 "/shared/hxmath/test/TestFrames.hx"
		self9.x -= testInA.x;
		//line 104 "/shared/hxmath/test/TestFrames.hx"
		self9.y -= testInA.y;
		//line 104 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self10 = ((hxmath.math.Vector2Default) (self9) );
		//line 104 "/shared/hxmath/test/TestFrames.hx"
		this.assertApproxEquals(java.lang.Math.sqrt(( ( self10.x * self10.x ) + ( self10.y * self10.y ) )), 0.0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testFrame2LinearAffineTransform"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (104) )) )}));
		//line 107 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix3x2Default self11 = ((hxmath.math.Matrix3x2Default) (a.get_matrix()) );
		//line 107 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix2x2Default this16 = new hxmath.math.Matrix2x2Default(self11.a, self11.b, self11.c, self11.d);
		//line 107 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default b1 = a.get_offset();
		//line 107 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this17 = new hxmath.math.Vector2Default(self3.x, self3.y);
		//line 107 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self12 = ((hxmath.math.Vector2Default) (this17) );
		//line 107 "/shared/hxmath/test/TestFrames.hx"
		self12.x -= b1.x;
		//line 107 "/shared/hxmath/test/TestFrames.hx"
		self12.y -= b1.y;
		//line 107 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix2x2Default self13 = ((hxmath.math.Matrix2x2Default) (this16) );
		//line 107 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this18 = new hxmath.math.Vector2Default(( ( self13.a * self12.x ) + ( self13.c * self12.y ) ), ( ( self13.b * self12.x ) + ( self13.d * self12.y ) ));
		//line 107 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default testAffineBackToInner = ((hxmath.math.Vector2Default) (this18) );
		//line 108 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this19 = new hxmath.math.Vector2Default(testAffineBackToInner.x, testAffineBackToInner.y);
		//line 108 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self14 = ((hxmath.math.Vector2Default) (this19) );
		//line 108 "/shared/hxmath/test/TestFrames.hx"
		self14.x -= testInA.x;
		//line 108 "/shared/hxmath/test/TestFrames.hx"
		self14.y -= testInA.y;
		//line 108 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self15 = ((hxmath.math.Vector2Default) (self14) );
		//line 108 "/shared/hxmath/test/TestFrames.hx"
		this.assertApproxEquals(java.lang.Math.sqrt(( ( self15.x * self15.x ) + ( self15.y * self15.y ) )), 0.0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testFrame2LinearAffineTransform"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (108) )) )}));
	}
	
	
	public void testFrame2Inverse()
	{
		//line 113 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this1 = new hxmath.math.Vector2Default(1.0, 1.0);
		//line 113 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default originA = ((hxmath.math.Vector2Default) (this1) );
		//line 114 "/shared/hxmath/test/TestFrames.hx"
		hxmath.frames.IFrame2 a = hxmath.frames._Frame2.Frame2_Impl_._new(originA, 90.0);
		//line 116 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix3x2Default self = ((hxmath.math.Matrix3x2Default) (a.get_matrix()) );
		//line 116 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix2x2Default this2 = new hxmath.math.Matrix2x2Default(self.a, self.b, self.c, self.d);
		//line 116 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default v = a.get_offset();
		//line 116 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix2x2Default self1 = ((hxmath.math.Matrix2x2Default) (this2) );
		//line 116 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this3 = new hxmath.math.Vector2Default(( ( self1.a * v.x ) + ( self1.c * v.y ) ), ( ( self1.b * v.x ) + ( self1.d * v.y ) ));
		//line 116 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self2 = ((hxmath.math.Vector2Default) (this3) );
		//line 116 "/shared/hxmath/test/TestFrames.hx"
		self2.x =  - (self2.x) ;
		//line 116 "/shared/hxmath/test/TestFrames.hx"
		self2.y =  - (self2.y) ;
		//line 116 "/shared/hxmath/test/TestFrames.hx"
		hxmath.frames.IFrame2 aInv = hxmath.frames._Frame2.Frame2_Impl_._new(self2,  - (a.get_angleDegrees()) );
		//line 121 "/shared/hxmath/test/TestFrames.hx"
		hxmath.frames.IFrame2 self3 = ((hxmath.frames.IFrame2) (hxmath.frames._Frame2.Frame2_Impl_._new(a.get_offset(), a.get_angleDegrees())) );
		//line 121 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix3x2Default self4 = ((hxmath.math.Matrix3x2Default) (self3.get_matrix()) );
		//line 121 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix2x2Default this4 = new hxmath.math.Matrix2x2Default(self4.a, self4.b, self4.c, self4.d);
		//line 121 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix2x2Default m = ((hxmath.math.Matrix2x2Default) (this4) );
		//line 121 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default v1 = aInv.get_offset();
		//line 121 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this5 = new hxmath.math.Vector2Default(( ( m.a * v1.x ) + ( m.b * v1.y ) ), ( ( m.c * v1.x ) + ( m.d * v1.y ) ));
		//line 121 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default a1 = self3.get_offset();
		//line 121 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self5 = ((hxmath.math.Vector2Default) (this5) );
		//line 121 "/shared/hxmath/test/TestFrames.hx"
		self5.x += a1.x;
		//line 121 "/shared/hxmath/test/TestFrames.hx"
		self5.y += a1.y;
		//line 121 "/shared/hxmath/test/TestFrames.hx"
		double x = ( self3.get_angleDegrees() + aInv.get_angleDegrees() );
		//line 121 "/shared/hxmath/test/TestFrames.hx"
		self3.set_angleDegrees(( (( x < 0 )) ? (( 360 - (  - (x)  % 360 ) )) : (( x % 360 )) ));
		//line 121 "/shared/hxmath/test/TestFrames.hx"
		self3.set_offset(self5);
		//line 121 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default a2 = self3.get_offset();
		//line 121 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this6 = new hxmath.math.Vector2Default(0.0, 0.0);
		//line 121 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default b = ((hxmath.math.Vector2Default) (this6) );
		//line 121 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this7 = new hxmath.math.Vector2Default(a2.x, a2.y);
		//line 121 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self6 = ((hxmath.math.Vector2Default) (this7) );
		//line 121 "/shared/hxmath/test/TestFrames.hx"
		self6.x -= b.x;
		//line 121 "/shared/hxmath/test/TestFrames.hx"
		self6.y -= b.y;
		//line 121 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self7 = ((hxmath.math.Vector2Default) (self6) );
		//line 121 "/shared/hxmath/test/TestFrames.hx"
		this.assertApproxEquals(java.lang.Math.sqrt(( ( self7.x * self7.x ) + ( self7.y * self7.y ) )), 0.0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testFrame2Inverse"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (121) )) )}));
		//line 122 "/shared/hxmath/test/TestFrames.hx"
		hxmath.frames.IFrame2 self8 = ((hxmath.frames.IFrame2) (hxmath.frames._Frame2.Frame2_Impl_._new(aInv.get_offset(), aInv.get_angleDegrees())) );
		//line 122 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix3x2Default self9 = ((hxmath.math.Matrix3x2Default) (self8.get_matrix()) );
		//line 122 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix2x2Default this8 = new hxmath.math.Matrix2x2Default(self9.a, self9.b, self9.c, self9.d);
		//line 122 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix2x2Default m1 = ((hxmath.math.Matrix2x2Default) (this8) );
		//line 122 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default v2 = a.get_offset();
		//line 122 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this9 = new hxmath.math.Vector2Default(( ( m1.a * v2.x ) + ( m1.b * v2.y ) ), ( ( m1.c * v2.x ) + ( m1.d * v2.y ) ));
		//line 122 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default a3 = self8.get_offset();
		//line 122 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self10 = ((hxmath.math.Vector2Default) (this9) );
		//line 122 "/shared/hxmath/test/TestFrames.hx"
		self10.x += a3.x;
		//line 122 "/shared/hxmath/test/TestFrames.hx"
		self10.y += a3.y;
		//line 122 "/shared/hxmath/test/TestFrames.hx"
		double x1 = ( self8.get_angleDegrees() + a.get_angleDegrees() );
		//line 122 "/shared/hxmath/test/TestFrames.hx"
		self8.set_angleDegrees(( (( x1 < 0 )) ? (( 360 - (  - (x1)  % 360 ) )) : (( x1 % 360 )) ));
		//line 122 "/shared/hxmath/test/TestFrames.hx"
		self8.set_offset(self10);
		//line 122 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default a4 = self8.get_offset();
		//line 122 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this10 = new hxmath.math.Vector2Default(0.0, 0.0);
		//line 122 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default b1 = ((hxmath.math.Vector2Default) (this10) );
		//line 122 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this11 = new hxmath.math.Vector2Default(a4.x, a4.y);
		//line 122 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self11 = ((hxmath.math.Vector2Default) (this11) );
		//line 122 "/shared/hxmath/test/TestFrames.hx"
		self11.x -= b1.x;
		//line 122 "/shared/hxmath/test/TestFrames.hx"
		self11.y -= b1.y;
		//line 122 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self12 = ((hxmath.math.Vector2Default) (self11) );
		//line 122 "/shared/hxmath/test/TestFrames.hx"
		this.assertApproxEquals(java.lang.Math.sqrt(( ( self12.x * self12.x ) + ( self12.y * self12.y ) )), 0.0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testFrame2Inverse"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (122) )) )}));
		//line 123 "/shared/hxmath/test/TestFrames.hx"
		hxmath.frames.IFrame2 self13 = ((hxmath.frames.IFrame2) (hxmath.frames._Frame2.Frame2_Impl_._new(a.get_offset(), a.get_angleDegrees())) );
		//line 123 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix3x2Default self14 = ((hxmath.math.Matrix3x2Default) (self13.get_matrix()) );
		//line 123 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix2x2Default this12 = new hxmath.math.Matrix2x2Default(self14.a, self14.b, self14.c, self14.d);
		//line 123 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix2x2Default m2 = ((hxmath.math.Matrix2x2Default) (this12) );
		//line 123 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default v3 = aInv.get_offset();
		//line 123 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this13 = new hxmath.math.Vector2Default(( ( m2.a * v3.x ) + ( m2.b * v3.y ) ), ( ( m2.c * v3.x ) + ( m2.d * v3.y ) ));
		//line 123 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default a5 = self13.get_offset();
		//line 123 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self15 = ((hxmath.math.Vector2Default) (this13) );
		//line 123 "/shared/hxmath/test/TestFrames.hx"
		self15.x += a5.x;
		//line 123 "/shared/hxmath/test/TestFrames.hx"
		self15.y += a5.y;
		//line 123 "/shared/hxmath/test/TestFrames.hx"
		double x2 = ( self13.get_angleDegrees() + aInv.get_angleDegrees() );
		//line 123 "/shared/hxmath/test/TestFrames.hx"
		self13.set_angleDegrees(( (( x2 < 0 )) ? (( 360 - (  - (x2)  % 360 ) )) : (( x2 % 360 )) ));
		//line 123 "/shared/hxmath/test/TestFrames.hx"
		self13.set_offset(self15);
		//line 123 "/shared/hxmath/test/TestFrames.hx"
		this.assertApproxEquals(self13.get_angleDegrees(), 0.0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testFrame2Inverse"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (123) )) )}));
		//line 124 "/shared/hxmath/test/TestFrames.hx"
		hxmath.frames.IFrame2 self16 = ((hxmath.frames.IFrame2) (hxmath.frames._Frame2.Frame2_Impl_._new(aInv.get_offset(), aInv.get_angleDegrees())) );
		//line 124 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix3x2Default self17 = ((hxmath.math.Matrix3x2Default) (self16.get_matrix()) );
		//line 124 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix2x2Default this14 = new hxmath.math.Matrix2x2Default(self17.a, self17.b, self17.c, self17.d);
		//line 124 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Matrix2x2Default m3 = ((hxmath.math.Matrix2x2Default) (this14) );
		//line 124 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default v4 = a.get_offset();
		//line 124 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this15 = new hxmath.math.Vector2Default(( ( m3.a * v4.x ) + ( m3.b * v4.y ) ), ( ( m3.c * v4.x ) + ( m3.d * v4.y ) ));
		//line 124 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default a6 = self16.get_offset();
		//line 124 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self18 = ((hxmath.math.Vector2Default) (this15) );
		//line 124 "/shared/hxmath/test/TestFrames.hx"
		self18.x += a6.x;
		//line 124 "/shared/hxmath/test/TestFrames.hx"
		self18.y += a6.y;
		//line 124 "/shared/hxmath/test/TestFrames.hx"
		double x3 = ( self16.get_angleDegrees() + a.get_angleDegrees() );
		//line 124 "/shared/hxmath/test/TestFrames.hx"
		self16.set_angleDegrees(( (( x3 < 0 )) ? (( 360 - (  - (x3)  % 360 ) )) : (( x3 % 360 )) ));
		//line 124 "/shared/hxmath/test/TestFrames.hx"
		self16.set_offset(self18);
		//line 124 "/shared/hxmath/test/TestFrames.hx"
		this.assertApproxEquals(self16.get_angleDegrees(), 0.0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testFrame2Inverse"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (124) )) )}));
	}
	
	
	public void testFlxSpriteFrame2()
	{
		//line 129 "/shared/hxmath/test/TestFrames.hx"
		test.FlxObjectMock dummySprite = new test.FlxObjectMock();
		//line 130 "/shared/hxmath/test/TestFrames.hx"
		hxmath.frames.IFrame2 frame = new hxmath.frames.adapters.FlxSpriteFrame2(((java.lang.Object) (dummySprite) ));
		//line 131 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this1 = new hxmath.math.Vector2Default(0.0, 0.0);
		//line 131 "/shared/hxmath/test/TestFrames.hx"
		frame.set_offset(((hxmath.math.Vector2Default) (this1) ));
		//line 132 "/shared/hxmath/test/TestFrames.hx"
		frame.set_angleDegrees(((double) (90) ));
		//line 134 "/shared/hxmath/test/TestFrames.hx"
		this.assertEquals(((java.lang.Object) (frame.get_offset().x) ), ((java.lang.Object) (dummySprite.x) ), ((java.lang.Object) (new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testFlxSpriteFrame2"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (134) )) )})) ));
		//line 135 "/shared/hxmath/test/TestFrames.hx"
		this.assertEquals(((java.lang.Object) (frame.get_offset().y) ), ((java.lang.Object) (dummySprite.y) ), ((java.lang.Object) (new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testFlxSpriteFrame2"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (135) )) )})) ));
		//line 136 "/shared/hxmath/test/TestFrames.hx"
		this.assertEquals(((java.lang.Object) (frame.get_angleDegrees()) ), ((java.lang.Object) (dummySprite.angle) ), ((java.lang.Object) (new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testFlxSpriteFrame2"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (136) )) )})) ));
	}
	
	
	public void testLerpFrame2()
	{
		//line 141 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this1 = new hxmath.math.Vector2Default(1.0, 0.0);
		//line 141 "/shared/hxmath/test/TestFrames.hx"
		hxmath.frames.IFrame2 frameA = hxmath.frames._Frame2.Frame2_Impl_._new(((hxmath.math.Vector2Default) (this1) ), 330.0);
		//line 142 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this2 = new hxmath.math.Vector2Default(0.0, 1.0);
		//line 142 "/shared/hxmath/test/TestFrames.hx"
		hxmath.frames.IFrame2 frameB = hxmath.frames._Frame2.Frame2_Impl_._new(((hxmath.math.Vector2Default) (this2) ), 60.0);
		//line 145 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default a = frameA.get_offset();
		//line 145 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default b = frameB.get_offset();
		//line 145 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this3 = new hxmath.math.Vector2Default(( ( 0.5 * a.x ) + ( 0.5 * b.x ) ), ( ( 0.5 * a.y ) + ( 0.5 * b.y ) ));
		//line 145 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default tmp = ((hxmath.math.Vector2Default) (this3) );
		//line 145 "/shared/hxmath/test/TestFrames.hx"
		double a1 = frameA.get_angleDegrees();
		//line 145 "/shared/hxmath/test/TestFrames.hx"
		double b1 = frameB.get_angleDegrees();
		//line 145 "/shared/hxmath/test/TestFrames.hx"
		if (( java.lang.Math.abs(( a1 - b1 )) > 180. )) 
		{
			//line 145 "/shared/hxmath/test/TestFrames.hx"
			if (( a1 < b1 )) 
			{
				//line 145 "/shared/hxmath/test/TestFrames.hx"
				a1 += ((double) (360) );
			}
			else
			{
				//line 145 "/shared/hxmath/test/TestFrames.hx"
				b1 += ((double) (360) );
			}
			
		}
		
		//line 145 "/shared/hxmath/test/TestFrames.hx"
		double x = ( ( 0.5 * a1 ) + ( 0.5 * b1 ) );
		//line 145 "/shared/hxmath/test/TestFrames.hx"
		hxmath.frames.IFrame2 frameC = hxmath.frames._Frame2.Frame2_Impl_._new(tmp, ( (( x < 0 )) ? (( 360 - (  - (x)  % 360 ) )) : (( x % 360 )) ));
		//line 146 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default a2 = frameB.get_offset();
		//line 146 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default b2 = frameA.get_offset();
		//line 146 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this4 = new hxmath.math.Vector2Default(( ( 0.5 * a2.x ) + ( 0.5 * b2.x ) ), ( ( 0.5 * a2.y ) + ( 0.5 * b2.y ) ));
		//line 146 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default tmp1 = ((hxmath.math.Vector2Default) (this4) );
		//line 146 "/shared/hxmath/test/TestFrames.hx"
		double a3 = frameB.get_angleDegrees();
		//line 146 "/shared/hxmath/test/TestFrames.hx"
		double b3 = frameA.get_angleDegrees();
		//line 146 "/shared/hxmath/test/TestFrames.hx"
		if (( java.lang.Math.abs(( a3 - b3 )) > 180. )) 
		{
			//line 146 "/shared/hxmath/test/TestFrames.hx"
			if (( a3 < b3 )) 
			{
				//line 146 "/shared/hxmath/test/TestFrames.hx"
				a3 += ((double) (360) );
			}
			else
			{
				//line 146 "/shared/hxmath/test/TestFrames.hx"
				b3 += ((double) (360) );
			}
			
		}
		
		//line 146 "/shared/hxmath/test/TestFrames.hx"
		double x1 = ( ( 0.5 * a3 ) + ( 0.5 * b3 ) );
		//line 146 "/shared/hxmath/test/TestFrames.hx"
		hxmath.frames.IFrame2 frameC2 = hxmath.frames._Frame2.Frame2_Impl_._new(tmp1, ( (( x1 < 0 )) ? (( 360 - (  - (x1)  % 360 ) )) : (( x1 % 360 )) ));
		//line 147 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default a4 = frameC.get_offset();
		//line 147 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this5 = new hxmath.math.Vector2Default(0.5, 0.5);
		//line 147 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default b4 = ((hxmath.math.Vector2Default) (this5) );
		//line 147 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this6 = new hxmath.math.Vector2Default(a4.x, a4.y);
		//line 147 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self = ((hxmath.math.Vector2Default) (this6) );
		//line 147 "/shared/hxmath/test/TestFrames.hx"
		self.x -= b4.x;
		//line 147 "/shared/hxmath/test/TestFrames.hx"
		self.y -= b4.y;
		//line 147 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self1 = ((hxmath.math.Vector2Default) (self) );
		//line 147 "/shared/hxmath/test/TestFrames.hx"
		this.assertApproxEquals(java.lang.Math.sqrt(( ( self1.x * self1.x ) + ( self1.y * self1.y ) )), 0.0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testLerpFrame2"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (147) )) )}));
		//line 148 "/shared/hxmath/test/TestFrames.hx"
		this.assertApproxEquals(frameC.get_angleDegrees(), 15.0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testLerpFrame2"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (148) )) )}));
		//line 149 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default a5 = frameC2.get_offset();
		//line 149 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this7 = new hxmath.math.Vector2Default(0.5, 0.5);
		//line 149 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default b5 = ((hxmath.math.Vector2Default) (this7) );
		//line 149 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this8 = new hxmath.math.Vector2Default(a5.x, a5.y);
		//line 149 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self2 = ((hxmath.math.Vector2Default) (this8) );
		//line 149 "/shared/hxmath/test/TestFrames.hx"
		self2.x -= b5.x;
		//line 149 "/shared/hxmath/test/TestFrames.hx"
		self2.y -= b5.y;
		//line 149 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self3 = ((hxmath.math.Vector2Default) (self2) );
		//line 149 "/shared/hxmath/test/TestFrames.hx"
		this.assertApproxEquals(java.lang.Math.sqrt(( ( self3.x * self3.x ) + ( self3.y * self3.y ) )), 0.0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testLerpFrame2"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (149) )) )}));
		//line 150 "/shared/hxmath/test/TestFrames.hx"
		this.assertApproxEquals(frameC2.get_angleDegrees(), 15.0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testLerpFrame2"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (150) )) )}));
		//line 152 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default a6 = frameA.get_offset();
		//line 152 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default b6 = frameB.get_offset();
		//line 152 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this9 = new hxmath.math.Vector2Default(( ( 0.666666666666666741 * a6.x ) + ( 0.333333333333333315 * b6.x ) ), ( ( 0.666666666666666741 * a6.y ) + ( 0.333333333333333315 * b6.y ) ));
		//line 152 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default tmp2 = ((hxmath.math.Vector2Default) (this9) );
		//line 152 "/shared/hxmath/test/TestFrames.hx"
		double a7 = frameA.get_angleDegrees();
		//line 152 "/shared/hxmath/test/TestFrames.hx"
		double b7 = frameB.get_angleDegrees();
		//line 152 "/shared/hxmath/test/TestFrames.hx"
		if (( java.lang.Math.abs(( a7 - b7 )) > 180. )) 
		{
			//line 152 "/shared/hxmath/test/TestFrames.hx"
			if (( a7 < b7 )) 
			{
				//line 152 "/shared/hxmath/test/TestFrames.hx"
				a7 += ((double) (360) );
			}
			else
			{
				//line 152 "/shared/hxmath/test/TestFrames.hx"
				b7 += ((double) (360) );
			}
			
		}
		
		//line 152 "/shared/hxmath/test/TestFrames.hx"
		double x2 = ( ( 0.666666666666666741 * a7 ) + ( 0.333333333333333315 * b7 ) );
		//line 152 "/shared/hxmath/test/TestFrames.hx"
		hxmath.frames.IFrame2 frameD = hxmath.frames._Frame2.Frame2_Impl_._new(tmp2, ( (( x2 < 0 )) ? (( 360 - (  - (x2)  % 360 ) )) : (( x2 % 360 )) ));
		//line 153 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default a8 = frameB.get_offset();
		//line 153 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default b8 = frameA.get_offset();
		//line 153 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this10 = new hxmath.math.Vector2Default(( ( 0.33333333333333337 * a8.x ) + ( 0.66666666666666663 * b8.x ) ), ( ( 0.33333333333333337 * a8.y ) + ( 0.66666666666666663 * b8.y ) ));
		//line 153 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default tmp3 = ((hxmath.math.Vector2Default) (this10) );
		//line 153 "/shared/hxmath/test/TestFrames.hx"
		double a9 = frameB.get_angleDegrees();
		//line 153 "/shared/hxmath/test/TestFrames.hx"
		double b9 = frameA.get_angleDegrees();
		//line 153 "/shared/hxmath/test/TestFrames.hx"
		if (( java.lang.Math.abs(( a9 - b9 )) > 180. )) 
		{
			//line 153 "/shared/hxmath/test/TestFrames.hx"
			if (( a9 < b9 )) 
			{
				//line 153 "/shared/hxmath/test/TestFrames.hx"
				a9 += ((double) (360) );
			}
			else
			{
				//line 153 "/shared/hxmath/test/TestFrames.hx"
				b9 += ((double) (360) );
			}
			
		}
		
		//line 153 "/shared/hxmath/test/TestFrames.hx"
		double x3 = ( ( 0.33333333333333337 * a9 ) + ( 0.66666666666666663 * b9 ) );
		//line 153 "/shared/hxmath/test/TestFrames.hx"
		hxmath.frames.IFrame2 frameD2 = hxmath.frames._Frame2.Frame2_Impl_._new(tmp3, ( (( x3 < 0 )) ? (( 360 - (  - (x3)  % 360 ) )) : (( x3 % 360 )) ));
		//line 154 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default a10 = frameD.get_offset();
		//line 154 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this11 = new hxmath.math.Vector2Default(0.66666666666666663, 0.333333333333333315);
		//line 154 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default b10 = ((hxmath.math.Vector2Default) (this11) );
		//line 154 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this12 = new hxmath.math.Vector2Default(a10.x, a10.y);
		//line 154 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self4 = ((hxmath.math.Vector2Default) (this12) );
		//line 154 "/shared/hxmath/test/TestFrames.hx"
		self4.x -= b10.x;
		//line 154 "/shared/hxmath/test/TestFrames.hx"
		self4.y -= b10.y;
		//line 154 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self5 = ((hxmath.math.Vector2Default) (self4) );
		//line 154 "/shared/hxmath/test/TestFrames.hx"
		this.assertApproxEquals(java.lang.Math.sqrt(( ( self5.x * self5.x ) + ( self5.y * self5.y ) )), 0.0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testLerpFrame2"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (154) )) )}));
		//line 155 "/shared/hxmath/test/TestFrames.hx"
		this.assertApproxEquals(frameD.get_angleDegrees(), 0.0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testLerpFrame2"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (155) )) )}));
		//line 156 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default a11 = frameD2.get_offset();
		//line 156 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this13 = new hxmath.math.Vector2Default(0.66666666666666663, 0.333333333333333315);
		//line 156 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default b11 = ((hxmath.math.Vector2Default) (this13) );
		//line 156 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this14 = new hxmath.math.Vector2Default(a11.x, a11.y);
		//line 156 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self6 = ((hxmath.math.Vector2Default) (this14) );
		//line 156 "/shared/hxmath/test/TestFrames.hx"
		self6.x -= b11.x;
		//line 156 "/shared/hxmath/test/TestFrames.hx"
		self6.y -= b11.y;
		//line 156 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self7 = ((hxmath.math.Vector2Default) (self6) );
		//line 156 "/shared/hxmath/test/TestFrames.hx"
		this.assertApproxEquals(java.lang.Math.sqrt(( ( self7.x * self7.x ) + ( self7.y * self7.y ) )), 0.0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testLerpFrame2"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (156) )) )}));
		//line 157 "/shared/hxmath/test/TestFrames.hx"
		this.assertApproxEquals(frameD2.get_angleDegrees(), 0.0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testLerpFrame2"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (157) )) )}));
		//line 159 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default a12 = frameA.get_offset();
		//line 159 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default b12 = frameB.get_offset();
		//line 159 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this15 = new hxmath.math.Vector2Default(( ( 0.33333333333333337 * a12.x ) + ( 0.66666666666666663 * b12.x ) ), ( ( 0.33333333333333337 * a12.y ) + ( 0.66666666666666663 * b12.y ) ));
		//line 159 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default tmp4 = ((hxmath.math.Vector2Default) (this15) );
		//line 159 "/shared/hxmath/test/TestFrames.hx"
		double a13 = frameA.get_angleDegrees();
		//line 159 "/shared/hxmath/test/TestFrames.hx"
		double b13 = frameB.get_angleDegrees();
		//line 159 "/shared/hxmath/test/TestFrames.hx"
		if (( java.lang.Math.abs(( a13 - b13 )) > 180. )) 
		{
			//line 159 "/shared/hxmath/test/TestFrames.hx"
			if (( a13 < b13 )) 
			{
				//line 159 "/shared/hxmath/test/TestFrames.hx"
				a13 += ((double) (360) );
			}
			else
			{
				//line 159 "/shared/hxmath/test/TestFrames.hx"
				b13 += ((double) (360) );
			}
			
		}
		
		//line 159 "/shared/hxmath/test/TestFrames.hx"
		double x4 = ( ( 0.33333333333333337 * a13 ) + ( 0.66666666666666663 * b13 ) );
		//line 159 "/shared/hxmath/test/TestFrames.hx"
		hxmath.frames.IFrame2 frameE = hxmath.frames._Frame2.Frame2_Impl_._new(tmp4, ( (( x4 < 0 )) ? (( 360 - (  - (x4)  % 360 ) )) : (( x4 % 360 )) ));
		//line 160 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default a14 = frameB.get_offset();
		//line 160 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default b14 = frameA.get_offset();
		//line 160 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this16 = new hxmath.math.Vector2Default(( ( 0.666666666666666741 * a14.x ) + ( 0.333333333333333315 * b14.x ) ), ( ( 0.666666666666666741 * a14.y ) + ( 0.333333333333333315 * b14.y ) ));
		//line 160 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default tmp5 = ((hxmath.math.Vector2Default) (this16) );
		//line 160 "/shared/hxmath/test/TestFrames.hx"
		double a15 = frameB.get_angleDegrees();
		//line 160 "/shared/hxmath/test/TestFrames.hx"
		double b15 = frameA.get_angleDegrees();
		//line 160 "/shared/hxmath/test/TestFrames.hx"
		if (( java.lang.Math.abs(( a15 - b15 )) > 180. )) 
		{
			//line 160 "/shared/hxmath/test/TestFrames.hx"
			if (( a15 < b15 )) 
			{
				//line 160 "/shared/hxmath/test/TestFrames.hx"
				a15 += ((double) (360) );
			}
			else
			{
				//line 160 "/shared/hxmath/test/TestFrames.hx"
				b15 += ((double) (360) );
			}
			
		}
		
		//line 160 "/shared/hxmath/test/TestFrames.hx"
		double x5 = ( ( 0.666666666666666741 * a15 ) + ( 0.333333333333333315 * b15 ) );
		//line 160 "/shared/hxmath/test/TestFrames.hx"
		hxmath.frames.IFrame2 frameE2 = hxmath.frames._Frame2.Frame2_Impl_._new(tmp5, ( (( x5 < 0 )) ? (( 360 - (  - (x5)  % 360 ) )) : (( x5 % 360 )) ));
		//line 161 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default a16 = frameE.get_offset();
		//line 161 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this17 = new hxmath.math.Vector2Default(0.333333333333333315, 0.66666666666666663);
		//line 161 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default b16 = ((hxmath.math.Vector2Default) (this17) );
		//line 161 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this18 = new hxmath.math.Vector2Default(a16.x, a16.y);
		//line 161 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self8 = ((hxmath.math.Vector2Default) (this18) );
		//line 161 "/shared/hxmath/test/TestFrames.hx"
		self8.x -= b16.x;
		//line 161 "/shared/hxmath/test/TestFrames.hx"
		self8.y -= b16.y;
		//line 161 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self9 = ((hxmath.math.Vector2Default) (self8) );
		//line 161 "/shared/hxmath/test/TestFrames.hx"
		this.assertApproxEquals(java.lang.Math.sqrt(( ( self9.x * self9.x ) + ( self9.y * self9.y ) )), 0.0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testLerpFrame2"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (161) )) )}));
		//line 162 "/shared/hxmath/test/TestFrames.hx"
		this.assertApproxEquals(frameE.get_angleDegrees(), 30.0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testLerpFrame2"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (162) )) )}));
		//line 163 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default a17 = frameE2.get_offset();
		//line 163 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this19 = new hxmath.math.Vector2Default(0.333333333333333315, 0.66666666666666663);
		//line 163 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default b17 = ((hxmath.math.Vector2Default) (this19) );
		//line 163 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this20 = new hxmath.math.Vector2Default(a17.x, a17.y);
		//line 163 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self10 = ((hxmath.math.Vector2Default) (this20) );
		//line 163 "/shared/hxmath/test/TestFrames.hx"
		self10.x -= b17.x;
		//line 163 "/shared/hxmath/test/TestFrames.hx"
		self10.y -= b17.y;
		//line 163 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default self11 = ((hxmath.math.Vector2Default) (self10) );
		//line 163 "/shared/hxmath/test/TestFrames.hx"
		this.assertApproxEquals(java.lang.Math.sqrt(( ( self11.x * self11.x ) + ( self11.y * self11.y ) )), 0.0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testLerpFrame2"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (163) )) )}));
		//line 164 "/shared/hxmath/test/TestFrames.hx"
		this.assertApproxEquals(frameE2.get_angleDegrees(), 30.0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testLerpFrame2"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (164) )) )}));
	}
	
	
	public void testFramesHaveToString()
	{
		//line 169 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector2Default this1 = new hxmath.math.Vector2Default(23.0, 0.0);
		//line 169 "/shared/hxmath/test/TestFrames.hx"
		hxmath.frames.IFrame2 frame2 = hxmath.frames._Frame2.Frame2_Impl_._new(((hxmath.math.Vector2Default) (this1) ), 42.0);
		//line 170 "/shared/hxmath/test/TestFrames.hx"
		this.assertTrue(( haxe.lang.StringExt.indexOf((( "" + haxe.root.Std.string(frame2) )), "23", null) != -1 ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testFramesHaveToString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (170) )) )}));
		//line 171 "/shared/hxmath/test/TestFrames.hx"
		this.assertTrue(( haxe.lang.StringExt.indexOf((( "" + haxe.root.Std.string(frame2) )), "42", null) != -1 ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testFramesHaveToString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (171) )) )}));
		//line 173 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default this2 = new hxmath.math.Vector3Default(23.0, 0.0, 0.0);
		//line 173 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.Vector3Default tmp = ((hxmath.math.Vector3Default) (this2) );
		//line 173 "/shared/hxmath/test/TestFrames.hx"
		hxmath.math.QuaternionDefault this3 = new hxmath.math.QuaternionDefault(42.0, 0.0, 0.0, 0.0);
		//line 173 "/shared/hxmath/test/TestFrames.hx"
		hxmath.frames.IFrame3 frame3 = hxmath.frames._Frame3.Frame3_Impl_._new(tmp, ((hxmath.math.QuaternionDefault) (this3) ));
		//line 174 "/shared/hxmath/test/TestFrames.hx"
		this.assertTrue(( haxe.lang.StringExt.indexOf((( "" + haxe.root.Std.string(frame3) )), "23", null) != -1 ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testFramesHaveToString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (174) )) )}));
		//line 175 "/shared/hxmath/test/TestFrames.hx"
		this.assertTrue(( haxe.lang.StringExt.indexOf((( "" + haxe.root.Std.string(frame3) )), "42", null) != -1 ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"test.TestFrames", "TestFrames.hx", "testFramesHaveToString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (175) )) )}));
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 37 "/shared/hxmath/test/TestFrames.hx"
		{
			//line 37 "/shared/hxmath/test/TestFrames.hx"
			boolean __temp_executeDef1 = true;
			//line 37 "/shared/hxmath/test/TestFrames.hx"
			switch (field.hashCode())
			{
				case 450387948:
				{
					//line 37 "/shared/hxmath/test/TestFrames.hx"
					if (field.equals("testFramesHaveToString")) 
					{
						//line 37 "/shared/hxmath/test/TestFrames.hx"
						__temp_executeDef1 = false;
						//line 37 "/shared/hxmath/test/TestFrames.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFramesHaveToString")) );
					}
					
					//line 37 "/shared/hxmath/test/TestFrames.hx"
					break;
				}
				
				
				case 377394571:
				{
					//line 37 "/shared/hxmath/test/TestFrames.hx"
					if (field.equals("testFrame2Concat")) 
					{
						//line 37 "/shared/hxmath/test/TestFrames.hx"
						__temp_executeDef1 = false;
						//line 37 "/shared/hxmath/test/TestFrames.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFrame2Concat")) );
					}
					
					//line 37 "/shared/hxmath/test/TestFrames.hx"
					break;
				}
				
				
				case 1213460206:
				{
					//line 37 "/shared/hxmath/test/TestFrames.hx"
					if (field.equals("testLerpFrame2")) 
					{
						//line 37 "/shared/hxmath/test/TestFrames.hx"
						__temp_executeDef1 = false;
						//line 37 "/shared/hxmath/test/TestFrames.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testLerpFrame2")) );
					}
					
					//line 37 "/shared/hxmath/test/TestFrames.hx"
					break;
				}
				
				
				case 1264898252:
				{
					//line 37 "/shared/hxmath/test/TestFrames.hx"
					if (field.equals("testFrame3Concat")) 
					{
						//line 37 "/shared/hxmath/test/TestFrames.hx"
						__temp_executeDef1 = false;
						//line 37 "/shared/hxmath/test/TestFrames.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFrame3Concat")) );
					}
					
					//line 37 "/shared/hxmath/test/TestFrames.hx"
					break;
				}
				
				
				case -2074685910:
				{
					//line 37 "/shared/hxmath/test/TestFrames.hx"
					if (field.equals("testFlxSpriteFrame2")) 
					{
						//line 37 "/shared/hxmath/test/TestFrames.hx"
						__temp_executeDef1 = false;
						//line 37 "/shared/hxmath/test/TestFrames.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFlxSpriteFrame2")) );
					}
					
					//line 37 "/shared/hxmath/test/TestFrames.hx"
					break;
				}
				
				
				case -1740464751:
				{
					//line 37 "/shared/hxmath/test/TestFrames.hx"
					if (field.equals("testFrame2LinearAffineTransform")) 
					{
						//line 37 "/shared/hxmath/test/TestFrames.hx"
						__temp_executeDef1 = false;
						//line 37 "/shared/hxmath/test/TestFrames.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFrame2LinearAffineTransform")) );
					}
					
					//line 37 "/shared/hxmath/test/TestFrames.hx"
					break;
				}
				
				
				case -176780391:
				{
					//line 37 "/shared/hxmath/test/TestFrames.hx"
					if (field.equals("testFrame2Inverse")) 
					{
						//line 37 "/shared/hxmath/test/TestFrames.hx"
						__temp_executeDef1 = false;
						//line 37 "/shared/hxmath/test/TestFrames.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFrame2Inverse")) );
					}
					
					//line 37 "/shared/hxmath/test/TestFrames.hx"
					break;
				}
				
				
			}
			
			//line 37 "/shared/hxmath/test/TestFrames.hx"
			if (__temp_executeDef1) 
			{
				//line 37 "/shared/hxmath/test/TestFrames.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 37 "/shared/hxmath/test/TestFrames.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 37 "/shared/hxmath/test/TestFrames.hx"
		{
			//line 37 "/shared/hxmath/test/TestFrames.hx"
			boolean __temp_executeDef1 = true;
			//line 37 "/shared/hxmath/test/TestFrames.hx"
			switch (field.hashCode())
			{
				case 450387948:
				{
					//line 37 "/shared/hxmath/test/TestFrames.hx"
					if (field.equals("testFramesHaveToString")) 
					{
						//line 37 "/shared/hxmath/test/TestFrames.hx"
						__temp_executeDef1 = false;
						//line 37 "/shared/hxmath/test/TestFrames.hx"
						this.testFramesHaveToString();
					}
					
					//line 37 "/shared/hxmath/test/TestFrames.hx"
					break;
				}
				
				
				case 377394571:
				{
					//line 37 "/shared/hxmath/test/TestFrames.hx"
					if (field.equals("testFrame2Concat")) 
					{
						//line 37 "/shared/hxmath/test/TestFrames.hx"
						__temp_executeDef1 = false;
						//line 37 "/shared/hxmath/test/TestFrames.hx"
						this.testFrame2Concat();
					}
					
					//line 37 "/shared/hxmath/test/TestFrames.hx"
					break;
				}
				
				
				case 1213460206:
				{
					//line 37 "/shared/hxmath/test/TestFrames.hx"
					if (field.equals("testLerpFrame2")) 
					{
						//line 37 "/shared/hxmath/test/TestFrames.hx"
						__temp_executeDef1 = false;
						//line 37 "/shared/hxmath/test/TestFrames.hx"
						this.testLerpFrame2();
					}
					
					//line 37 "/shared/hxmath/test/TestFrames.hx"
					break;
				}
				
				
				case 1264898252:
				{
					//line 37 "/shared/hxmath/test/TestFrames.hx"
					if (field.equals("testFrame3Concat")) 
					{
						//line 37 "/shared/hxmath/test/TestFrames.hx"
						__temp_executeDef1 = false;
						//line 37 "/shared/hxmath/test/TestFrames.hx"
						this.testFrame3Concat();
					}
					
					//line 37 "/shared/hxmath/test/TestFrames.hx"
					break;
				}
				
				
				case -2074685910:
				{
					//line 37 "/shared/hxmath/test/TestFrames.hx"
					if (field.equals("testFlxSpriteFrame2")) 
					{
						//line 37 "/shared/hxmath/test/TestFrames.hx"
						__temp_executeDef1 = false;
						//line 37 "/shared/hxmath/test/TestFrames.hx"
						this.testFlxSpriteFrame2();
					}
					
					//line 37 "/shared/hxmath/test/TestFrames.hx"
					break;
				}
				
				
				case -1740464751:
				{
					//line 37 "/shared/hxmath/test/TestFrames.hx"
					if (field.equals("testFrame2LinearAffineTransform")) 
					{
						//line 37 "/shared/hxmath/test/TestFrames.hx"
						__temp_executeDef1 = false;
						//line 37 "/shared/hxmath/test/TestFrames.hx"
						this.testFrame2LinearAffineTransform();
					}
					
					//line 37 "/shared/hxmath/test/TestFrames.hx"
					break;
				}
				
				
				case -176780391:
				{
					//line 37 "/shared/hxmath/test/TestFrames.hx"
					if (field.equals("testFrame2Inverse")) 
					{
						//line 37 "/shared/hxmath/test/TestFrames.hx"
						__temp_executeDef1 = false;
						//line 37 "/shared/hxmath/test/TestFrames.hx"
						this.testFrame2Inverse();
					}
					
					//line 37 "/shared/hxmath/test/TestFrames.hx"
					break;
				}
				
				
			}
			
			//line 37 "/shared/hxmath/test/TestFrames.hx"
			if (__temp_executeDef1) 
			{
				//line 37 "/shared/hxmath/test/TestFrames.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 37 "/shared/hxmath/test/TestFrames.hx"
		return null;
	}
	
	
}


