<?php

// Generated by Haxe 3.3.0
class utest_Runner {
	public function __construct() {
		if(!php_Boot::$skip_constructor) {
		$this->globalPattern = null;
		$this->fixtures = new _hx_array(array());
		$this->onProgress = new utest_Dispatcher();
		$this->onStart = new utest_Dispatcher();
		$this->onComplete = new utest_Dispatcher();
		$this->onPrecheck = new utest_Dispatcher();
		$this->onTestStart = new utest_Dispatcher();
		$this->onTestComplete = new utest_Dispatcher();
		$this->length = 0;
	}}
	public $fixtures;
	public $onProgress;
	public $onStart;
	public $onComplete;
	public $onPrecheck;
	public $onTestStart;
	public $onTestComplete;
	public $length;
	public $globalPattern;
	public function addCase($test, $setup = null, $teardown = null, $prefix = null, $pattern = null) {
		if($prefix === null) {
			$prefix = "test";
		}
		if($teardown === null) {
			$teardown = "teardown";
		}
		if($setup === null) {
			$setup = "setup";
		}
		$tmp = !Reflect::isObject($test);
		if($tmp) {
			throw new HException("can't add a null object as a test case");
		}
		$tmp1 = !$this->isMethod($test, $setup);
		if($tmp1) {
			$setup = null;
		}
		$tmp2 = !$this->isMethod($test, $teardown);
		if($tmp2) {
			$teardown = null;
		}
		$tmp3 = Type::getClass($test);
		$fields = Type::getInstanceFields($tmp3);
		$tmp4 = null;
		if($this->globalPattern === null) {
			$tmp4 = $pattern === null;
		} else {
			$tmp4 = false;
		}
		if($tmp4) {
			$_g = 0;
			while($_g < $fields->length) {
				$field = $fields[$_g];
				++$_g;
				$tmp5 = !StringTools::startsWith($field, $prefix);
				if($tmp5) {
					continue;
				}
				$tmp6 = !$this->isMethod($test, $field);
				if($tmp6) {
					continue;
				}
				$this->addFixture(new utest_TestFixture($test, $field, $setup, $teardown));
				unset($tmp6,$tmp5,$field);
			}
		} else {
			if($this->globalPattern !== null) {
				$pattern = $this->globalPattern;
			} else {
				$pattern = $pattern;
			}
			{
				$_g1 = 0;
				while($_g1 < $fields->length) {
					$field1 = $fields[$_g1];
					++$_g1;
					$tmp7 = !$pattern->match($field1);
					if($tmp7) {
						continue;
					}
					$tmp8 = !$this->isMethod($test, $field1);
					if($tmp8) {
						continue;
					}
					$this->addFixture(new utest_TestFixture($test, $field1, $setup, $teardown));
					unset($tmp8,$tmp7,$field1);
				}
			}
		}
	}
	public function addFixture($fixture) {
		$this->fixtures->push($fixture);
		$this->length++;
	}
	public function getFixture($index) {
		return $this->fixtures[$index];
	}
	public function isMethod($test, $name) {
		try {
			$tmp = Reflect::field($test, $name);
			return Reflect::isFunction($tmp);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				return false;
			}
		}
	}
	public function run() {
		$this->onStart->dispatch($this);
		{
			$_g1 = 0;
			$_g = $this->fixtures->length;
			while($_g1 < $_g) {
				$i = $_g1++;
				$h = $this->runFixture($this->fixtures[$i]);
				$this->onTestComplete->dispatch($h);
				$tmp = utest_TestResult::ofHandler($h);
				$this->onProgress->dispatch(_hx_anonymous(array("result" => $tmp, "done" => $i + 1, "totals" => $this->length)));
				unset($tmp,$i,$h);
			}
		}
		$this->onComplete->dispatch($this);
	}
	public function runFixture($fixture) {
		$handler = new utest_TestHandler($fixture);
		$handler->onPrecheck->add((isset($this->onPrecheck->dispatch) ? $this->onPrecheck->dispatch: array($this->onPrecheck, "dispatch")));
		$this->onTestStart->dispatch($handler);
		$handler->execute();
		return $handler;
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'utest.Runner'; }
}
