<?php

// Generated by Haxe 3.3.0
class thx__Tuple_Tuple3_Impl_ {
	public function __construct(){}
	static function of($_0, $_1, $_2) {
		return _hx_anonymous(array("_0" => $_0, "_1" => $_1, "_2" => $_2));
	}
	static function _new($_0, $_1, $_2) {
		return _hx_anonymous(array("_0" => $_0, "_1" => $_1, "_2" => $_2));
	}
	static function flip($this1) {
		return _hx_anonymous(array("_0" => $this1->_2, "_1" => $this1->_1, "_2" => $this1->_0));
	}
	static function dropLeft($this1) {
		return _hx_anonymous(array("_0" => $this1->_1, "_1" => $this1->_2));
	}
	static function dropRight($this1) {
		return _hx_anonymous(array("_0" => $this1->_0, "_1" => $this1->_1));
	}
	static function with($this1, $v) {
		return _hx_anonymous(array("_0" => $this1->_0, "_1" => $this1->_1, "_2" => $this1->_2, "_3" => $v));
	}
	static function toString($this1) {
		$tmp = Std::string($this1->_0);
		$tmp1 = "Tuple3(" . _hx_string_or_null($tmp) . ",";
		$tmp2 = Std::string($this1->_1);
		$tmp3 = _hx_string_or_null($tmp1) . _hx_string_or_null($tmp2) . ",";
		$tmp4 = Std::string($this1->_2);
		return _hx_string_or_null($tmp3) . _hx_string_or_null($tmp4) . ")";
	}
	static function arrayToTuple3($v) {
		return _hx_anonymous(array("_0" => $v[0], "_1" => $v[1], "_2" => $v[2]));
	}
	static function map($this1, $f) {
		$_2 = call_user_func_array($f, array($this1->_2));
		return _hx_anonymous(array("_0" => $this1->_0, "_1" => $this1->_1, "_2" => $_2));
	}
	function __toString() { return 'thx._Tuple.Tuple3_Impl_'; }
}
