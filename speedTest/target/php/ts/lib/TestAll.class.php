<?php

// Generated by Haxe 3.3.0
class TestAll {
	public function __construct() {}
	public function testEncode() {
		$tmp = thx_csv_Dsv::encode((new _hx_array(array((new _hx_array(array("1997", "Ford", "E350")))))), thx_csv_Csv::$encodeOptions);
		utest_Assert::same("1997,Ford,E350", $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestAll.hx", "lineNumber" => 12, "className" => "TestAll", "methodName" => "testEncode")));
		$tmp1 = thx_csv_Dsv::encode((new _hx_array(array((new _hx_array(array("1997", "Ford", "E350", "Super, luxurious truck")))))), thx_csv_Csv::$encodeOptions);
		utest_Assert::same("1997,Ford,E350,\"Super, luxurious truck\"", $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestAll.hx", "lineNumber" => 13, "className" => "TestAll", "methodName" => "testEncode")));
		$tmp2 = thx_csv_Dsv::encode((new _hx_array(array((new _hx_array(array("1997", "Ford", "E350", "Super, \"luxurious\" truck")))))), thx_csv_Csv::$encodeOptions);
		utest_Assert::same("1997,Ford,E350,\"Super, \"\"luxurious\"\" truck\"", $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestAll.hx", "lineNumber" => 14, "className" => "TestAll", "methodName" => "testEncode")));
		$tmp3 = thx_csv_Dsv::encode((new _hx_array(array((new _hx_array(array("1997", "Ford", "E350", "Go get one now\x0Athey are going fast")))))), thx_csv_Csv::$encodeOptions);
		utest_Assert::same("1997,Ford,E350,\"Go get one now\x0Athey are going fast\"", $tmp3, null, null, null, _hx_anonymous(array("fileName" => "TestAll.hx", "lineNumber" => 15, "className" => "TestAll", "methodName" => "testEncode")));
	}
	public function testDecode() {
		$tmp = thx_csv_Dsv::decode("", thx_csv_Csv::$decodeOptions);
		utest_Assert::same((new _hx_array(array())), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestAll.hx", "lineNumber" => 19, "className" => "TestAll", "methodName" => "testDecode")));
		$tmp1 = thx_csv_Dsv::decode(",", thx_csv_Csv::$decodeOptions);
		utest_Assert::same((new _hx_array(array((new _hx_array(array("", "")))))), $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestAll.hx", "lineNumber" => 20, "className" => "TestAll", "methodName" => "testDecode")));
		$tmp2 = thx_csv_Dsv::decode("f,", thx_csv_Csv::$decodeOptions);
		utest_Assert::same((new _hx_array(array((new _hx_array(array("f", "")))))), $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestAll.hx", "lineNumber" => 21, "className" => "TestAll", "methodName" => "testDecode")));
		$tmp3 = thx_csv_Dsv::decode(",f", thx_csv_Csv::$decodeOptions);
		utest_Assert::same((new _hx_array(array((new _hx_array(array("", "f")))))), $tmp3, null, null, null, _hx_anonymous(array("fileName" => "TestAll.hx", "lineNumber" => 22, "className" => "TestAll", "methodName" => "testDecode")));
		$tmp4 = thx_csv_Dsv::decode("x,y", thx_csv_Csv::$decodeOptions);
		utest_Assert::same((new _hx_array(array((new _hx_array(array("x", "y")))))), $tmp4, null, null, null, _hx_anonymous(array("fileName" => "TestAll.hx", "lineNumber" => 23, "className" => "TestAll", "methodName" => "testDecode")));
		$tmp5 = thx_csv_Dsv::decode(",\x0A,", thx_csv_Csv::$decodeOptions);
		utest_Assert::same((new _hx_array(array((new _hx_array(array("", ""))), (new _hx_array(array("", "")))))), $tmp5, null, null, null, _hx_anonymous(array("fileName" => "TestAll.hx", "lineNumber" => 24, "className" => "TestAll", "methodName" => "testDecode")));
		$tmp6 = thx_csv_Dsv::decode(",\x0A\x0A,", thx_csv_Csv::$decodeOptions);
		utest_Assert::same((new _hx_array(array((new _hx_array(array("", ""))), (new _hx_array(array(""))), (new _hx_array(array("", "")))))), $tmp6, null, null, null, _hx_anonymous(array("fileName" => "TestAll.hx", "lineNumber" => 25, "className" => "TestAll", "methodName" => "testDecode")));
		$tmp7 = thx_csv_Dsv::decode(",\x0A\"\"\x0A,", thx_csv_Csv::$decodeOptions);
		utest_Assert::same((new _hx_array(array((new _hx_array(array("", ""))), (new _hx_array(array(""))), (new _hx_array(array("", "")))))), $tmp7, null, null, null, _hx_anonymous(array("fileName" => "TestAll.hx", "lineNumber" => 26, "className" => "TestAll", "methodName" => "testDecode")));
		utest_Assert::same((new _hx_array(array((new _hx_array(array("1997", "Ford", "E350")))))), (new _hx_array(array((new _hx_array(array("1997", "Ford", "E350")))))), null, null, null, _hx_anonymous(array("fileName" => "TestAll.hx", "lineNumber" => 27, "className" => "TestAll", "methodName" => "testDecode")));
		$tmp8 = thx_csv_Dsv::decode("1997,Ford,E350", thx_csv_Csv::$decodeOptions);
		utest_Assert::same((new _hx_array(array((new _hx_array(array("1997", "Ford", "E350")))))), $tmp8, null, null, null, _hx_anonymous(array("fileName" => "TestAll.hx", "lineNumber" => 28, "className" => "TestAll", "methodName" => "testDecode")));
		$tmp9 = thx_csv_Dsv::decode("\"1997\",\"Ford\",\"E350\"", thx_csv_Csv::$decodeOptions);
		utest_Assert::same((new _hx_array(array((new _hx_array(array("1997", "Ford", "E350")))))), $tmp9, null, null, null, _hx_anonymous(array("fileName" => "TestAll.hx", "lineNumber" => 29, "className" => "TestAll", "methodName" => "testDecode")));
		$tmp10 = thx_csv_Dsv::decode("1997,Ford,E350,\"Super, luxurious truck\"", thx_csv_Csv::$decodeOptions);
		utest_Assert::same((new _hx_array(array((new _hx_array(array("1997", "Ford", "E350", "Super, luxurious truck")))))), $tmp10, null, null, null, _hx_anonymous(array("fileName" => "TestAll.hx", "lineNumber" => 30, "className" => "TestAll", "methodName" => "testDecode")));
		$tmp11 = thx_csv_Dsv::decode("1997,Ford,E350,\"Super, \"\"luxurious\"\" truck\"", thx_csv_Csv::$decodeOptions);
		utest_Assert::same((new _hx_array(array((new _hx_array(array("1997", "Ford", "E350", "Super, \"luxurious\" truck")))))), $tmp11, null, null, null, _hx_anonymous(array("fileName" => "TestAll.hx", "lineNumber" => 31, "className" => "TestAll", "methodName" => "testDecode")));
		$tmp12 = thx_csv_Dsv::decode("1997,Ford,E350,\"Go get one now\x0Athey are going fast\"", thx_csv_Csv::$decodeOptions);
		utest_Assert::same((new _hx_array(array((new _hx_array(array("1997", "Ford", "E350", "Go get one now\x0Athey are going fast")))))), $tmp12, null, null, null, _hx_anonymous(array("fileName" => "TestAll.hx", "lineNumber" => 32, "className" => "TestAll", "methodName" => "testDecode")));
	}
	public function testIssue20160125() {
		$decoded = thx_csv_Dsv::decode("265671209,\"Dynagreen Environmental Protection Group Co., Ltd.\",1330,China,HKD,", thx_csv_Csv::$decodeOptions);
		$encoded = thx_csv_Dsv::encode($decoded, thx_csv_Csv::$encodeOptions);
		utest_Assert::same((new _hx_array(array((new _hx_array(array("265671209", "Dynagreen Environmental Protection Group Co., Ltd.", "1330", "China", "HKD", "")))))), $decoded, null, null, null, _hx_anonymous(array("fileName" => "TestAll.hx", "lineNumber" => 39, "className" => "TestAll", "methodName" => "testIssue20160125")));
		utest_Assert::same("265671209,\"Dynagreen Environmental Protection Group Co., Ltd.\",1330,China,HKD,", $encoded, null, null, null, _hx_anonymous(array("fileName" => "TestAll.hx", "lineNumber" => 42, "className" => "TestAll", "methodName" => "testIssue20160125")));
	}
	public function testTerminalComma() {
		$decoded = thx_csv_Dsv::decode("Company ID,Name,Ticker,Country,Currency,\x0A24085,1-800-Flowers.com Inc.,FLWS,United States,USD,", thx_csv_Csv::$decodeOptions);
		$encoded = thx_csv_Dsv::encode($decoded, thx_csv_Csv::$encodeOptions);
		utest_Assert::same((new _hx_array(array((new _hx_array(array("Company ID", "Name", "Ticker", "Country", "Currency", ""))), (new _hx_array(array("24085", "1-800-Flowers.com Inc.", "FLWS", "United States", "USD", "")))))), $decoded, null, null, null, _hx_anonymous(array("fileName" => "TestAll.hx", "lineNumber" => 50, "className" => "TestAll", "methodName" => "testTerminalComma")));
		utest_Assert::same("Company ID,Name,Ticker,Country,Currency,\x0A24085,1-800-Flowers.com Inc.,FLWS,United States,USD,", $encoded, null, null, null, _hx_anonymous(array("fileName" => "TestAll.hx", "lineNumber" => 54, "className" => "TestAll", "methodName" => "testTerminalComma")));
	}
	public function testRoundtrip() {
		$decoded = thx_csv_Dsv::decode("Year,Make,Model,Description,Price\x0A1997,Ford,E350,\"ac, abs, moon\",3000.00\x0A1999,Chevy,\"Venture \"\"Extended Edition\"\"\",\"\",4900.00\x0A1999,Chevy,\"Venture \"\"Extended Edition, Very Large\"\"\",,5000.00\x0A1996,Jeep,Grand Cherokee,\"MUST SELL!\x0Aair, moon roof, loaded\",4799.00", thx_csv_Csv::$decodeOptions);
		$encoded = thx_csv_Dsv::encode($decoded, thx_csv_Csv::$encodeOptions);
		utest_Assert::same((new _hx_array(array((new _hx_array(array("Year", "Make", "Model", "Description", "Price"))), (new _hx_array(array("1997", "Ford", "E350", "ac, abs, moon", "3000.00"))), (new _hx_array(array("1999", "Chevy", "Venture \"Extended Edition\"", "", "4900.00"))), (new _hx_array(array("1999", "Chevy", "Venture \"Extended Edition, Very Large\"", "", "5000.00"))), (new _hx_array(array("1996", "Jeep", "Grand Cherokee", "MUST SELL!\x0Aair, moon roof, loaded", "4799.00")))))), $decoded, null, null, null, _hx_anonymous(array("fileName" => "TestAll.hx", "lineNumber" => 67, "className" => "TestAll", "methodName" => "testRoundtrip")));
		utest_Assert::same("Year,Make,Model,Description,Price\x0A1997,Ford,E350,\"ac, abs, moon\",3000.00\x0A1999,Chevy,\"Venture \"\"Extended Edition\"\"\",,4900.00\x0A1999,Chevy,\"Venture \"\"Extended Edition, Very Large\"\"\",,5000.00\x0A1996,Jeep,Grand Cherokee,\"MUST SELL!\x0Aair, moon roof, loaded\",4799.00", $encoded, null, null, null, _hx_anonymous(array("fileName" => "TestAll.hx", "lineNumber" => 74, "className" => "TestAll", "methodName" => "testRoundtrip")));
	}
	public function testSemicolon() {
		$encoded = thx_csv_Dsv::decode("Year;Make;Model;Length\x0A1997;Ford;E350;2,34\x0A2000;Mercury;Cougar;2,38", _hx_anonymous(array("quote" => "\"", "escapedQuote" => "\"\"", "delimiter" => ";", "trimValues" => false)));
		$decoded = thx_csv_Dsv::encode($encoded, _hx_anonymous(array("quote" => "\"", "escapedQuote" => "\"\"", "delimiter" => ";", "newline" => "\x0A")));
		utest_Assert::equals("Year;Make;Model;Length\x0A1997;Ford;E350;2,34\x0A2000;Mercury;Cougar;2,38", $decoded, null, _hx_anonymous(array("fileName" => "TestAll.hx", "lineNumber" => 88, "className" => "TestAll", "methodName" => "testSemicolon")));
	}
	public function testAutoTrim() {
		$encoded = thx_csv_Dsv::decode("1997 , Ford, E350", _hx_anonymous(array("quote" => "\"", "escapedQuote" => "\"\"", "delimiter" => ",", "trimValues" => true)));
		utest_Assert::same((new _hx_array(array((new _hx_array(array("1997", "Ford", "E350")))))), $encoded, null, null, null, _hx_anonymous(array("fileName" => "TestAll.hx", "lineNumber" => 94, "className" => "TestAll", "methodName" => "testAutoTrim")));
		$encoded = thx_csv_Dsv::decode("1997 , Ford, E350", _hx_anonymous(array("quote" => "\"", "escapedQuote" => "\"\"", "delimiter" => ",", "trimValues" => false)));
		utest_Assert::same((new _hx_array(array((new _hx_array(array("1997 ", " Ford", " E350")))))), $encoded, null, null, null, _hx_anonymous(array("fileName" => "TestAll.hx", "lineNumber" => 96, "className" => "TestAll", "methodName" => "testAutoTrim")));
		$tmp = thx_csv_Dsv::decode("1997,Ford,E350,\" Super, luxurious truck \"", thx_csv_Csv::$decodeOptions);
		utest_Assert::same((new _hx_array(array((new _hx_array(array("1997", "Ford", "E350", " Super, luxurious truck ")))))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestAll.hx", "lineNumber" => 97, "className" => "TestAll", "methodName" => "testAutoTrim")));
	}
	public function testSurroundingWhitespaces() {
		$tmp = thx_csv_Dsv::decode("1997, \"Ford\" ,E350", thx_csv_Csv::$decodeOptions);
		utest_Assert::same((new _hx_array(array((new _hx_array(array("1997", " \"Ford\" ", "E350")))))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestAll.hx", "lineNumber" => 101, "className" => "TestAll", "methodName" => "testSurroundingWhitespaces")));
	}
	public function testTsv() {
		$tmp = thx_csv_Dsv::decode("1997 \x09 Ford \x09 E350", thx_csv_Tsv::$decodeOptions);
		utest_Assert::same((new _hx_array(array((new _hx_array(array("1997 ", " Ford ", " E350")))))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestAll.hx", "lineNumber" => 105, "className" => "TestAll", "methodName" => "testTsv")));
	}
	static function main() {
		utest_UTest::run((new _hx_array(array(new TestAll()))), null);
	}
	function __toString() { return 'TestAll'; }
}
