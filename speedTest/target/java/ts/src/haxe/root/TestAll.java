// Generated by Haxe 3.3.0
package haxe.root;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestAll extends haxe.lang.HxObject
{
	public static void main(String[] args)
	{
		Sys._args = args;
		main();
	}
	
	public TestAll(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestAll()
	{
		//line 9 "/shared/csv/test/TestAll.hx"
		haxe.root.TestAll.__hx_ctor__TestAll(this);
	}
	
	
	public static void __hx_ctor__TestAll(haxe.root.TestAll __temp_me15)
	{
	}
	
	
	public static void main()
	{
		//line 7 "/shared/csv/test/TestAll.hx"
		utest.UTest.run(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{new haxe.root.TestAll()}), null);
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 5 "/shared/csv/test/TestAll.hx"
		return new haxe.root.TestAll(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 5 "/shared/csv/test/TestAll.hx"
		return new haxe.root.TestAll();
	}
	
	
	public void testEncode()
	{
		//line 12 "/shared/csv/test/TestAll.hx"
		utest.Assert.same("1997,Ford,E350", thx.csv.Dsv.encode(new haxe.root.Array<haxe.root.Array<java.lang.String>>(new haxe.root.Array[]{new haxe.root.Array<java.lang.String>(new java.lang.String[]{"1997", "Ford", "E350"})}), thx.csv.Csv.encodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"TestAll", "TestAll.hx", "testEncode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (12) )) )}));
		//line 13 "/shared/csv/test/TestAll.hx"
		utest.Assert.same("1997,Ford,E350,\"Super, luxurious truck\"", thx.csv.Dsv.encode(new haxe.root.Array<haxe.root.Array<java.lang.String>>(new haxe.root.Array[]{new haxe.root.Array<java.lang.String>(new java.lang.String[]{"1997", "Ford", "E350", "Super, luxurious truck"})}), thx.csv.Csv.encodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"TestAll", "TestAll.hx", "testEncode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (13) )) )}));
		//line 14 "/shared/csv/test/TestAll.hx"
		utest.Assert.same("1997,Ford,E350,\"Super, \"\"luxurious\"\" truck\"", thx.csv.Dsv.encode(new haxe.root.Array<haxe.root.Array<java.lang.String>>(new haxe.root.Array[]{new haxe.root.Array<java.lang.String>(new java.lang.String[]{"1997", "Ford", "E350", "Super, \"luxurious\" truck"})}), thx.csv.Csv.encodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"TestAll", "TestAll.hx", "testEncode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (14) )) )}));
		//line 15 "/shared/csv/test/TestAll.hx"
		utest.Assert.same("1997,Ford,E350,\"Go get one now\nthey are going fast\"", thx.csv.Dsv.encode(new haxe.root.Array<haxe.root.Array<java.lang.String>>(new haxe.root.Array[]{new haxe.root.Array<java.lang.String>(new java.lang.String[]{"1997", "Ford", "E350", "Go get one now\nthey are going fast"})}), thx.csv.Csv.encodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"TestAll", "TestAll.hx", "testEncode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (15) )) )}));
	}
	
	
	public void testDecode()
	{
		//line 19 "/shared/csv/test/TestAll.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{}), thx.csv.Dsv.decode("", thx.csv.Csv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"TestAll", "TestAll.hx", "testDecode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (19) )) )}));
		//line 20 "/shared/csv/test/TestAll.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"", ""})}), thx.csv.Dsv.decode(",", thx.csv.Csv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"TestAll", "TestAll.hx", "testDecode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (20) )) )}));
		//line 21 "/shared/csv/test/TestAll.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"f", ""})}), thx.csv.Dsv.decode("f,", thx.csv.Csv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"TestAll", "TestAll.hx", "testDecode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (21) )) )}));
		//line 22 "/shared/csv/test/TestAll.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"", "f"})}), thx.csv.Dsv.decode(",f", thx.csv.Csv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"TestAll", "TestAll.hx", "testDecode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (22) )) )}));
		//line 23 "/shared/csv/test/TestAll.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"x", "y"})}), thx.csv.Dsv.decode("x,y", thx.csv.Csv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"TestAll", "TestAll.hx", "testDecode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (23) )) )}));
		//line 24 "/shared/csv/test/TestAll.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"", ""}), new haxe.root.Array(new java.lang.Object[]{"", ""})}), thx.csv.Dsv.decode(",\n,", thx.csv.Csv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"TestAll", "TestAll.hx", "testDecode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (24) )) )}));
		//line 25 "/shared/csv/test/TestAll.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"", ""}), new haxe.root.Array(new java.lang.Object[]{""}), new haxe.root.Array(new java.lang.Object[]{"", ""})}), thx.csv.Dsv.decode(",\n\n,", thx.csv.Csv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"TestAll", "TestAll.hx", "testDecode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (25) )) )}));
		//line 26 "/shared/csv/test/TestAll.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"", ""}), new haxe.root.Array(new java.lang.Object[]{""}), new haxe.root.Array(new java.lang.Object[]{"", ""})}), thx.csv.Dsv.decode(",\n\"\"\n,", thx.csv.Csv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"TestAll", "TestAll.hx", "testDecode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (26) )) )}));
		//line 27 "/shared/csv/test/TestAll.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"1997", "Ford", "E350"})}), new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"1997", "Ford", "E350"})}), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"TestAll", "TestAll.hx", "testDecode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (27) )) )}));
		//line 28 "/shared/csv/test/TestAll.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"1997", "Ford", "E350"})}), thx.csv.Dsv.decode("1997,Ford,E350", thx.csv.Csv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"TestAll", "TestAll.hx", "testDecode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (28) )) )}));
		//line 29 "/shared/csv/test/TestAll.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"1997", "Ford", "E350"})}), thx.csv.Dsv.decode("\"1997\",\"Ford\",\"E350\"", thx.csv.Csv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"TestAll", "TestAll.hx", "testDecode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (29) )) )}));
		//line 30 "/shared/csv/test/TestAll.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"1997", "Ford", "E350", "Super, luxurious truck"})}), thx.csv.Dsv.decode("1997,Ford,E350,\"Super, luxurious truck\"", thx.csv.Csv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"TestAll", "TestAll.hx", "testDecode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (30) )) )}));
		//line 31 "/shared/csv/test/TestAll.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"1997", "Ford", "E350", "Super, \"luxurious\" truck"})}), thx.csv.Dsv.decode("1997,Ford,E350,\"Super, \"\"luxurious\"\" truck\"", thx.csv.Csv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"TestAll", "TestAll.hx", "testDecode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (31) )) )}));
		//line 32 "/shared/csv/test/TestAll.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"1997", "Ford", "E350", "Go get one now\nthey are going fast"})}), thx.csv.Dsv.decode("1997,Ford,E350,\"Go get one now\nthey are going fast\"", thx.csv.Csv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"TestAll", "TestAll.hx", "testDecode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (32) )) )}));
	}
	
	
	public void testIssue20160125()
	{
		//line 37 "/shared/csv/test/TestAll.hx"
		haxe.root.Array<haxe.root.Array<java.lang.String>> decoded = thx.csv.Dsv.decode("265671209,\"Dynagreen Environmental Protection Group Co., Ltd.\",1330,China,HKD,", thx.csv.Csv.decodeOptions);
		//line 37 "/shared/csv/test/TestAll.hx"
		java.lang.String encoded = thx.csv.Dsv.encode(decoded, thx.csv.Csv.encodeOptions);
		//line 39 "/shared/csv/test/TestAll.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"265671209", "Dynagreen Environmental Protection Group Co., Ltd.", "1330", "China", "HKD", ""})}), decoded, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"TestAll", "TestAll.hx", "testIssue20160125"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (39) )) )}));
		//line 42 "/shared/csv/test/TestAll.hx"
		utest.Assert.same("265671209,\"Dynagreen Environmental Protection Group Co., Ltd.\",1330,China,HKD,", encoded, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"TestAll", "TestAll.hx", "testIssue20160125"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (42) )) )}));
	}
	
	
	public void testTerminalComma()
	{
		//line 48 "/shared/csv/test/TestAll.hx"
		haxe.root.Array<haxe.root.Array<java.lang.String>> decoded = thx.csv.Dsv.decode("Company ID,Name,Ticker,Country,Currency,\n24085,1-800-Flowers.com Inc.,FLWS,United States,USD,", thx.csv.Csv.decodeOptions);
		//line 48 "/shared/csv/test/TestAll.hx"
		java.lang.String encoded = thx.csv.Dsv.encode(decoded, thx.csv.Csv.encodeOptions);
		//line 50 "/shared/csv/test/TestAll.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"Company ID", "Name", "Ticker", "Country", "Currency", ""}), new haxe.root.Array(new java.lang.Object[]{"24085", "1-800-Flowers.com Inc.", "FLWS", "United States", "USD", ""})}), decoded, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"TestAll", "TestAll.hx", "testTerminalComma"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (50) )) )}));
		//line 54 "/shared/csv/test/TestAll.hx"
		utest.Assert.same("Company ID,Name,Ticker,Country,Currency,\n24085,1-800-Flowers.com Inc.,FLWS,United States,USD,", encoded, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"TestAll", "TestAll.hx", "testTerminalComma"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (54) )) )}));
	}
	
	
	public void testRoundtrip()
	{
		//line 65 "/shared/csv/test/TestAll.hx"
		haxe.root.Array<haxe.root.Array<java.lang.String>> decoded = thx.csv.Dsv.decode("Year,Make,Model,Description,Price\n1997,Ford,E350,\"ac, abs, moon\",3000.00\n1999,Chevy,\"Venture \"\"Extended Edition\"\"\",\"\",4900.00\n1999,Chevy,\"Venture \"\"Extended Edition, Very Large\"\"\",,5000.00\n1996,Jeep,Grand Cherokee,\"MUST SELL!\nair, moon roof, loaded\",4799.00", thx.csv.Csv.decodeOptions);
		//line 65 "/shared/csv/test/TestAll.hx"
		java.lang.String encoded = thx.csv.Dsv.encode(decoded, thx.csv.Csv.encodeOptions);
		//line 67 "/shared/csv/test/TestAll.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"Year", "Make", "Model", "Description", "Price"}), new haxe.root.Array(new java.lang.Object[]{"1997", "Ford", "E350", "ac, abs, moon", "3000.00"}), new haxe.root.Array(new java.lang.Object[]{"1999", "Chevy", "Venture \"Extended Edition\"", "", "4900.00"}), new haxe.root.Array(new java.lang.Object[]{"1999", "Chevy", "Venture \"Extended Edition, Very Large\"", "", "5000.00"}), new haxe.root.Array(new java.lang.Object[]{"1996", "Jeep", "Grand Cherokee", "MUST SELL!\nair, moon roof, loaded", "4799.00"})}), decoded, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"TestAll", "TestAll.hx", "testRoundtrip"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (67) )) )}));
		//line 74 "/shared/csv/test/TestAll.hx"
		utest.Assert.same("Year,Make,Model,Description,Price\n1997,Ford,E350,\"ac, abs, moon\",3000.00\n1999,Chevy,\"Venture \"\"Extended Edition\"\"\",,4900.00\n1999,Chevy,\"Venture \"\"Extended Edition, Very Large\"\"\",,5000.00\n1996,Jeep,Grand Cherokee,\"MUST SELL!\nair, moon roof, loaded\",4799.00", encoded, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"TestAll", "TestAll.hx", "testRoundtrip"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (74) )) )}));
	}
	
	
	public void testSemicolon()
	{
		//line 83 "/shared/csv/test/TestAll.hx"
		haxe.root.Array<haxe.root.Array<java.lang.String>> encoded = thx.csv.Dsv.decode("Year;Make;Model;Length\n1997;Ford;E350;2,34\n2000;Mercury;Cougar;2,38", new haxe.lang.DynamicObject(new java.lang.String[]{"delimiter", "escapedQuote", "quote", "trimValues"}, new java.lang.Object[]{";", "\"\"", "\"", false}, new java.lang.String[]{}, new double[]{}));
		//line 83 "/shared/csv/test/TestAll.hx"
		java.lang.String decoded = thx.csv.Dsv.encode(encoded, new haxe.lang.DynamicObject(new java.lang.String[]{"delimiter", "escapedQuote", "newline", "quote"}, new java.lang.Object[]{";", "\"\"", "\n", "\""}, new java.lang.String[]{}, new double[]{}));
		//line 88 "/shared/csv/test/TestAll.hx"
		utest.Assert.equals("Year;Make;Model;Length\n1997;Ford;E350;2,34\n2000;Mercury;Cougar;2,38", decoded, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"TestAll", "TestAll.hx", "testSemicolon"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (88) )) )}));
	}
	
	
	public void testAutoTrim()
	{
		//line 92 "/shared/csv/test/TestAll.hx"
		haxe.root.Array<haxe.root.Array<java.lang.String>> encoded = thx.csv.Dsv.decode("1997 , Ford, E350", new haxe.lang.DynamicObject(new java.lang.String[]{"delimiter", "escapedQuote", "quote", "trimValues"}, new java.lang.Object[]{",", "\"\"", "\"", true}, new java.lang.String[]{}, new double[]{}));
		//line 94 "/shared/csv/test/TestAll.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"1997", "Ford", "E350"})}), encoded, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"TestAll", "TestAll.hx", "testAutoTrim"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (94) )) )}));
		//line 95 "/shared/csv/test/TestAll.hx"
		encoded = thx.csv.Dsv.decode("1997 , Ford, E350", new haxe.lang.DynamicObject(new java.lang.String[]{"delimiter", "escapedQuote", "quote", "trimValues"}, new java.lang.Object[]{",", "\"\"", "\"", false}, new java.lang.String[]{}, new double[]{}));
		//line 96 "/shared/csv/test/TestAll.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"1997 ", " Ford", " E350"})}), encoded, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"TestAll", "TestAll.hx", "testAutoTrim"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (96) )) )}));
		//line 97 "/shared/csv/test/TestAll.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"1997", "Ford", "E350", " Super, luxurious truck "})}), thx.csv.Dsv.decode("1997,Ford,E350,\" Super, luxurious truck \"", thx.csv.Csv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"TestAll", "TestAll.hx", "testAutoTrim"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (97) )) )}));
	}
	
	
	public void testSurroundingWhitespaces()
	{
		//line 101 "/shared/csv/test/TestAll.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"1997", " \"Ford\" ", "E350"})}), thx.csv.Dsv.decode("1997, \"Ford\" ,E350", thx.csv.Csv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"TestAll", "TestAll.hx", "testSurroundingWhitespaces"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (101) )) )}));
	}
	
	
	public void testTsv()
	{
		//line 105 "/shared/csv/test/TestAll.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"1997 ", " Ford ", " E350"})}), thx.csv.Dsv.decode("1997 \t Ford \t E350", thx.csv.Tsv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"TestAll", "TestAll.hx", "testTsv"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (105) )) )}));
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 5 "/shared/csv/test/TestAll.hx"
		{
			//line 5 "/shared/csv/test/TestAll.hx"
			boolean __temp_executeDef1 = true;
			//line 5 "/shared/csv/test/TestAll.hx"
			switch (field.hashCode())
			{
				case -1422466075:
				{
					//line 5 "/shared/csv/test/TestAll.hx"
					if (field.equals("testTsv")) 
					{
						//line 5 "/shared/csv/test/TestAll.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/TestAll.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testTsv")) );
					}
					
					//line 5 "/shared/csv/test/TestAll.hx"
					break;
				}
				
				
				case 1320958280:
				{
					//line 5 "/shared/csv/test/TestAll.hx"
					if (field.equals("testEncode")) 
					{
						//line 5 "/shared/csv/test/TestAll.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/TestAll.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testEncode")) );
					}
					
					//line 5 "/shared/csv/test/TestAll.hx"
					break;
				}
				
				
				case -1493114812:
				{
					//line 5 "/shared/csv/test/TestAll.hx"
					if (field.equals("testSurroundingWhitespaces")) 
					{
						//line 5 "/shared/csv/test/TestAll.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/TestAll.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSurroundingWhitespaces")) );
					}
					
					//line 5 "/shared/csv/test/TestAll.hx"
					break;
				}
				
				
				case 1284017440:
				{
					//line 5 "/shared/csv/test/TestAll.hx"
					if (field.equals("testDecode")) 
					{
						//line 5 "/shared/csv/test/TestAll.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/TestAll.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testDecode")) );
					}
					
					//line 5 "/shared/csv/test/TestAll.hx"
					break;
				}
				
				
				case -2141893341:
				{
					//line 5 "/shared/csv/test/TestAll.hx"
					if (field.equals("testAutoTrim")) 
					{
						//line 5 "/shared/csv/test/TestAll.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/TestAll.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testAutoTrim")) );
					}
					
					//line 5 "/shared/csv/test/TestAll.hx"
					break;
				}
				
				
				case 1289683918:
				{
					//line 5 "/shared/csv/test/TestAll.hx"
					if (field.equals("testIssue20160125")) 
					{
						//line 5 "/shared/csv/test/TestAll.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/TestAll.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testIssue20160125")) );
					}
					
					//line 5 "/shared/csv/test/TestAll.hx"
					break;
				}
				
				
				case -44387265:
				{
					//line 5 "/shared/csv/test/TestAll.hx"
					if (field.equals("testSemicolon")) 
					{
						//line 5 "/shared/csv/test/TestAll.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/TestAll.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSemicolon")) );
					}
					
					//line 5 "/shared/csv/test/TestAll.hx"
					break;
				}
				
				
				case 419776071:
				{
					//line 5 "/shared/csv/test/TestAll.hx"
					if (field.equals("testTerminalComma")) 
					{
						//line 5 "/shared/csv/test/TestAll.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/TestAll.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testTerminalComma")) );
					}
					
					//line 5 "/shared/csv/test/TestAll.hx"
					break;
				}
				
				
				case 665620033:
				{
					//line 5 "/shared/csv/test/TestAll.hx"
					if (field.equals("testRoundtrip")) 
					{
						//line 5 "/shared/csv/test/TestAll.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/TestAll.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testRoundtrip")) );
					}
					
					//line 5 "/shared/csv/test/TestAll.hx"
					break;
				}
				
				
			}
			
			//line 5 "/shared/csv/test/TestAll.hx"
			if (__temp_executeDef1) 
			{
				//line 5 "/shared/csv/test/TestAll.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 5 "/shared/csv/test/TestAll.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 5 "/shared/csv/test/TestAll.hx"
		{
			//line 5 "/shared/csv/test/TestAll.hx"
			boolean __temp_executeDef1 = true;
			//line 5 "/shared/csv/test/TestAll.hx"
			switch (field.hashCode())
			{
				case -1422466075:
				{
					//line 5 "/shared/csv/test/TestAll.hx"
					if (field.equals("testTsv")) 
					{
						//line 5 "/shared/csv/test/TestAll.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/TestAll.hx"
						this.testTsv();
					}
					
					//line 5 "/shared/csv/test/TestAll.hx"
					break;
				}
				
				
				case 1320958280:
				{
					//line 5 "/shared/csv/test/TestAll.hx"
					if (field.equals("testEncode")) 
					{
						//line 5 "/shared/csv/test/TestAll.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/TestAll.hx"
						this.testEncode();
					}
					
					//line 5 "/shared/csv/test/TestAll.hx"
					break;
				}
				
				
				case -1493114812:
				{
					//line 5 "/shared/csv/test/TestAll.hx"
					if (field.equals("testSurroundingWhitespaces")) 
					{
						//line 5 "/shared/csv/test/TestAll.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/TestAll.hx"
						this.testSurroundingWhitespaces();
					}
					
					//line 5 "/shared/csv/test/TestAll.hx"
					break;
				}
				
				
				case 1284017440:
				{
					//line 5 "/shared/csv/test/TestAll.hx"
					if (field.equals("testDecode")) 
					{
						//line 5 "/shared/csv/test/TestAll.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/TestAll.hx"
						this.testDecode();
					}
					
					//line 5 "/shared/csv/test/TestAll.hx"
					break;
				}
				
				
				case -2141893341:
				{
					//line 5 "/shared/csv/test/TestAll.hx"
					if (field.equals("testAutoTrim")) 
					{
						//line 5 "/shared/csv/test/TestAll.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/TestAll.hx"
						this.testAutoTrim();
					}
					
					//line 5 "/shared/csv/test/TestAll.hx"
					break;
				}
				
				
				case 1289683918:
				{
					//line 5 "/shared/csv/test/TestAll.hx"
					if (field.equals("testIssue20160125")) 
					{
						//line 5 "/shared/csv/test/TestAll.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/TestAll.hx"
						this.testIssue20160125();
					}
					
					//line 5 "/shared/csv/test/TestAll.hx"
					break;
				}
				
				
				case -44387265:
				{
					//line 5 "/shared/csv/test/TestAll.hx"
					if (field.equals("testSemicolon")) 
					{
						//line 5 "/shared/csv/test/TestAll.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/TestAll.hx"
						this.testSemicolon();
					}
					
					//line 5 "/shared/csv/test/TestAll.hx"
					break;
				}
				
				
				case 419776071:
				{
					//line 5 "/shared/csv/test/TestAll.hx"
					if (field.equals("testTerminalComma")) 
					{
						//line 5 "/shared/csv/test/TestAll.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/TestAll.hx"
						this.testTerminalComma();
					}
					
					//line 5 "/shared/csv/test/TestAll.hx"
					break;
				}
				
				
				case 665620033:
				{
					//line 5 "/shared/csv/test/TestAll.hx"
					if (field.equals("testRoundtrip")) 
					{
						//line 5 "/shared/csv/test/TestAll.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/TestAll.hx"
						this.testRoundtrip();
					}
					
					//line 5 "/shared/csv/test/TestAll.hx"
					break;
				}
				
				
			}
			
			//line 5 "/shared/csv/test/TestAll.hx"
			if (__temp_executeDef1) 
			{
				//line 5 "/shared/csv/test/TestAll.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 5 "/shared/csv/test/TestAll.hx"
		return null;
	}
	
	
}


