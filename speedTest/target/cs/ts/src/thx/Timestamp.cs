// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._Timestamp {
	public sealed class Timestamp_Impl_ {
		
		public static double create(int year, global::haxe.lang.Null<int> month, global::haxe.lang.Null<int> day, global::haxe.lang.Null<int> hour, global::haxe.lang.Null<int> minute, global::haxe.lang.Null<int> second) {
			global::Date _this = global::thx.Dates.create(year, month, day, hour, minute, second);
			return ( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (_this.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) );
		}
		
		
		public static double now() {
			global::Date d = new global::Date(((global::System.DateTime) (global::System.DateTime.Now) ));
			return ( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (d.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) );
		}
		
		
		public static double fromDate(global::Date d) {
			return ( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (d.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) );
		}
		
		
		public static double fromString(string s) {
			global::Date _this = global::Date.fromString(s);
			return ( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (_this.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) );
		}
		
		
		public static global::Date toDate(double this1) {
			return new global::Date(((global::System.DateTime) (global::System.TimeZone.CurrentTimeZone.ToLocalTime(((global::System.DateTime) (new global::System.DateTime(((long) (( ((long) (( this1 * ((double) (global::System.TimeSpan.TicksPerMillisecond) ) )) ) + ((long) (global::Date.epochTicks) ) )) ))) ))) ));
		}
		
		
		public static string toString(double this1) {
			return new global::Date(((global::System.DateTime) (global::System.TimeZone.CurrentTimeZone.ToLocalTime(((global::System.DateTime) (new global::System.DateTime(((long) (( ((long) (( ((double) (this1) ) * ((double) (global::System.TimeSpan.TicksPerMillisecond) ) )) ) + ((long) (global::Date.epochTicks) ) )) ))) ))) )).toString();
		}
		
		
		public static double snapNext(double this1, global::thx.TimePeriod period) {
			unchecked {
				switch (period.index) {
					case 0:
					{
						return ( global::System.Math.Ceiling(((double) (( this1 / 1000.0 )) )) * 1000.0 );
					}
					
					
					case 1:
					{
						return ( global::System.Math.Ceiling(((double) (( this1 / 60000.0 )) )) * 60000.0 );
					}
					
					
					case 2:
					{
						return ( global::System.Math.Ceiling(((double) (( this1 / 3600000.0 )) )) * 3600000.0 );
					}
					
					
					case 3:
					{
						global::Date d = new global::Date(((global::System.DateTime) (global::System.TimeZone.CurrentTimeZone.ToLocalTime(((global::System.DateTime) (new global::System.DateTime(((long) (( ((long) (( ((double) (this1) ) * ((double) (global::System.TimeSpan.TicksPerMillisecond) ) )) ) + ((long) (global::Date.epochTicks) ) )) ))) ))) ));
						global::Date _this = global::thx.Dates.create(d.date.Year, new global::haxe.lang.Null<int>(( d.date.Month - 1 ), true), new global::haxe.lang.Null<int>(( d.date.Day + 1 ), true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true));
						return ( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (_this.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) );
					}
					
					
					case 4:
					{
						global::Date d1 = new global::Date(((global::System.DateTime) (global::System.TimeZone.CurrentTimeZone.ToLocalTime(((global::System.DateTime) (new global::System.DateTime(((long) (( ((long) (( ((double) (this1) ) * ((double) (global::System.TimeSpan.TicksPerMillisecond) ) )) ) + ((long) (global::Date.epochTicks) ) )) ))) ))) ));
						int wd = ((int) (global::haxe.lang.Runtime.toInt(((object) (d1.date.DayOfWeek) ))) );
						global::Date _this1 = global::thx.Dates.create(d1.date.Year, new global::haxe.lang.Null<int>(( d1.date.Month - 1 ), true), new global::haxe.lang.Null<int>(( ( d1.date.Day + 7 ) - wd ), true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true));
						return ( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (_this1.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) );
					}
					
					
					case 5:
					{
						global::Date d2 = new global::Date(((global::System.DateTime) (global::System.TimeZone.CurrentTimeZone.ToLocalTime(((global::System.DateTime) (new global::System.DateTime(((long) (( ((long) (( ((double) (this1) ) * ((double) (global::System.TimeSpan.TicksPerMillisecond) ) )) ) + ((long) (global::Date.epochTicks) ) )) ))) ))) ));
						global::Date _this2 = global::thx.Dates.create(d2.date.Year, new global::haxe.lang.Null<int>(( ( d2.date.Month - 1 ) + 1 ), true), new global::haxe.lang.Null<int>(1, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true));
						return ( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (_this2.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) );
					}
					
					
					case 6:
					{
						global::Date _this3 = global::thx.Dates.create(( new global::Date(((global::System.DateTime) (global::System.TimeZone.CurrentTimeZone.ToLocalTime(((global::System.DateTime) (new global::System.DateTime(((long) (( ((long) (( ((double) (this1) ) * ((double) (global::System.TimeSpan.TicksPerMillisecond) ) )) ) + ((long) (global::Date.epochTicks) ) )) ))) ))) )).date.Year + 1 ), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(1, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true));
						return ( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (_this3.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) );
					}
					
					
				}
				
				return default(double);
			}
		}
		
		
		public static double snapPrev(double this1, global::thx.TimePeriod period) {
			unchecked {
				switch (period.index) {
					case 0:
					{
						return ( global::System.Math.Floor(((double) (( this1 / 1000.0 )) )) * 1000.0 );
					}
					
					
					case 1:
					{
						return ( global::System.Math.Floor(((double) (( this1 / 60000.0 )) )) * 60000.0 );
					}
					
					
					case 2:
					{
						return ( global::System.Math.Floor(((double) (( this1 / 3600000.0 )) )) * 3600000.0 );
					}
					
					
					case 3:
					{
						global::Date d = new global::Date(((global::System.DateTime) (global::System.TimeZone.CurrentTimeZone.ToLocalTime(((global::System.DateTime) (new global::System.DateTime(((long) (( ((long) (( ((double) (this1) ) * ((double) (global::System.TimeSpan.TicksPerMillisecond) ) )) ) + ((long) (global::Date.epochTicks) ) )) ))) ))) ));
						global::Date _this = global::thx.Dates.create(d.date.Year, new global::haxe.lang.Null<int>(( d.date.Month - 1 ), true), new global::haxe.lang.Null<int>(d.date.Day, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true));
						return ( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (_this.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) );
					}
					
					
					case 4:
					{
						global::Date d1 = new global::Date(((global::System.DateTime) (global::System.TimeZone.CurrentTimeZone.ToLocalTime(((global::System.DateTime) (new global::System.DateTime(((long) (( ((long) (( ((double) (this1) ) * ((double) (global::System.TimeSpan.TicksPerMillisecond) ) )) ) + ((long) (global::Date.epochTicks) ) )) ))) ))) ));
						int wd = ((int) (global::haxe.lang.Runtime.toInt(((object) (d1.date.DayOfWeek) ))) );
						global::Date _this1 = global::thx.Dates.create(d1.date.Year, new global::haxe.lang.Null<int>(( d1.date.Month - 1 ), true), new global::haxe.lang.Null<int>(( d1.date.Day - wd ), true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true));
						return ( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (_this1.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) );
					}
					
					
					case 5:
					{
						global::Date d2 = new global::Date(((global::System.DateTime) (global::System.TimeZone.CurrentTimeZone.ToLocalTime(((global::System.DateTime) (new global::System.DateTime(((long) (( ((long) (( ((double) (this1) ) * ((double) (global::System.TimeSpan.TicksPerMillisecond) ) )) ) + ((long) (global::Date.epochTicks) ) )) ))) ))) ));
						global::Date _this2 = global::thx.Dates.create(d2.date.Year, new global::haxe.lang.Null<int>(( d2.date.Month - 1 ), true), new global::haxe.lang.Null<int>(1, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true));
						return ( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (_this2.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) );
					}
					
					
					case 6:
					{
						global::Date _this3 = global::thx.Dates.create(new global::Date(((global::System.DateTime) (global::System.TimeZone.CurrentTimeZone.ToLocalTime(((global::System.DateTime) (new global::System.DateTime(((long) (( ((long) (( ((double) (this1) ) * ((double) (global::System.TimeSpan.TicksPerMillisecond) ) )) ) + ((long) (global::Date.epochTicks) ) )) ))) ))) )).date.Year, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(1, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true));
						return ( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (_this3.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) );
					}
					
					
				}
				
				return default(double);
			}
		}
		
		
		public static double snapTo(double this1, global::thx.TimePeriod period) {
			unchecked {
				switch (period.index) {
					case 0:
					{
						return ( global::System.Math.Floor(((double) (( ( this1 / 1000.0 ) + 0.5 )) )) * 1000.0 );
					}
					
					
					case 1:
					{
						return ( global::System.Math.Floor(((double) (( ( this1 / 60000.0 ) + 0.5 )) )) * 60000.0 );
					}
					
					
					case 2:
					{
						return ( global::System.Math.Floor(((double) (( ( this1 / 3600000.0 ) + 0.5 )) )) * 3600000.0 );
					}
					
					
					case 3:
					{
						global::Date d = new global::Date(((global::System.DateTime) (global::System.TimeZone.CurrentTimeZone.ToLocalTime(((global::System.DateTime) (new global::System.DateTime(((long) (( ((long) (( ((double) (this1) ) * ((double) (global::System.TimeSpan.TicksPerMillisecond) ) )) ) + ((long) (global::Date.epochTicks) ) )) ))) ))) ));
						int mod = ( (( d.date.Hour >= 12 )) ? (1) : (0) );
						global::Date _this = global::thx.Dates.create(d.date.Year, new global::haxe.lang.Null<int>(( d.date.Month - 1 ), true), new global::haxe.lang.Null<int>(( d.date.Day + mod ), true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true));
						return ( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (_this.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) );
					}
					
					
					case 4:
					{
						global::Date d1 = new global::Date(((global::System.DateTime) (global::System.TimeZone.CurrentTimeZone.ToLocalTime(((global::System.DateTime) (new global::System.DateTime(((long) (( ((long) (( ((double) (this1) ) * ((double) (global::System.TimeSpan.TicksPerMillisecond) ) )) ) + ((long) (global::Date.epochTicks) ) )) ))) ))) ));
						int wd = ((int) (global::haxe.lang.Runtime.toInt(((object) (d1.date.DayOfWeek) ))) );
						int mod1 = ( (( wd < 3 )) ? ( - (wd) ) : (( (( wd > 3 )) ? (( 7 - wd )) : (( (( d1.date.Hour < 12 )) ? ( - (wd) ) : (( 7 - wd )) )) )) );
						global::Date _this1 = global::thx.Dates.create(d1.date.Year, new global::haxe.lang.Null<int>(( d1.date.Month - 1 ), true), new global::haxe.lang.Null<int>(( d1.date.Day + mod1 ), true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true));
						return ( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (_this1.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) );
					}
					
					
					case 5:
					{
						global::Date d2 = new global::Date(((global::System.DateTime) (global::System.TimeZone.CurrentTimeZone.ToLocalTime(((global::System.DateTime) (new global::System.DateTime(((long) (( ((long) (( ((double) (this1) ) * ((double) (global::System.TimeSpan.TicksPerMillisecond) ) )) ) + ((long) (global::Date.epochTicks) ) )) ))) ))) ));
						int mod2 = ( (( d2.date.Day > global::Math.round(( ((double) (global::DateTools.getMonthDays(d2)) ) / 2 )) )) ? (1) : (0) );
						global::Date _this2 = global::thx.Dates.create(d2.date.Year, new global::haxe.lang.Null<int>(( ( d2.date.Month - 1 ) + mod2 ), true), new global::haxe.lang.Null<int>(1, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true));
						return ( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (_this2.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) );
					}
					
					
					case 6:
					{
						global::Date d3 = new global::Date(((global::System.DateTime) (global::System.TimeZone.CurrentTimeZone.ToLocalTime(((global::System.DateTime) (new global::System.DateTime(((long) (( ((long) (( ((double) (this1) ) * ((double) (global::System.TimeSpan.TicksPerMillisecond) ) )) ) + ((long) (global::Date.epochTicks) ) )) ))) ))) ));
						int mod3 = default(int);
						global::Date _this3 = new global::Date(d3.date.Year, 6, 2, 0, 0, 0);
						if (( this1 > ( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (_this3.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) ) )) {
							mod3 = 1;
						}
						else {
							mod3 = 0;
						}
						
						global::Date _this4 = global::thx.Dates.create(( d3.date.Year + mod3 ), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(1, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true));
						return ( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (_this4.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) );
					}
					
					
				}
				
				return default(double);
			}
		}
		
		
		public static double r(double t, double v) {
			return ( global::System.Math.Floor(((double) (( ( t / v ) + 0.5 )) )) * v );
		}
		
		
		public static double f(double t, double v) {
			return ( global::System.Math.Floor(((double) (( t / v )) )) * v );
		}
		
		
		public static double c(double t, double v) {
			return ( global::System.Math.Ceiling(((double) (( t / v )) )) * v );
		}
		
		
	}
}


