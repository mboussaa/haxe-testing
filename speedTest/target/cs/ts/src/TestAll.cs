// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
public class TestAll : global::haxe.lang.HxObject {
	
	public static void Main(){
		global::cs.Boot.init();
		main();
	}
	public TestAll(global::haxe.lang.EmptyObject empty) {
	}
	
	
	public TestAll() {
		global::TestAll.__hx_ctor__TestAll(this);
	}
	
	
	public static void __hx_ctor__TestAll(global::TestAll __temp_me20) {
	}
	
	
	public static void main() {
		global::utest.UTest.run(new global::Array<object>(new object[]{new global::TestAll()}), null);
	}
	
	
	public static new object __hx_createEmpty() {
		return new global::TestAll(global::haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static new object __hx_create(global::Array arr) {
		return new global::TestAll();
	}
	
	
	public virtual void testEncode() {
		unchecked {
			global::utest.Assert.same("1997,Ford,E350", global::thx.csv.Dsv.encode(new global::Array<object>(new object[]{new global::Array<object>(new object[]{"1997", "Ford", "E350"})}), global::thx.csv.Csv.encodeOptions), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEncode", "TestAll", "TestAll.hx"}, new int[]{1981972957}, new double[]{((double) (12) )}));
			global::utest.Assert.same("1997,Ford,E350,\"Super, luxurious truck\"", global::thx.csv.Dsv.encode(new global::Array<object>(new object[]{new global::Array<object>(new object[]{"1997", "Ford", "E350", "Super, luxurious truck"})}), global::thx.csv.Csv.encodeOptions), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEncode", "TestAll", "TestAll.hx"}, new int[]{1981972957}, new double[]{((double) (13) )}));
			global::utest.Assert.same("1997,Ford,E350,\"Super, \"\"luxurious\"\" truck\"", global::thx.csv.Dsv.encode(new global::Array<object>(new object[]{new global::Array<object>(new object[]{"1997", "Ford", "E350", "Super, \"luxurious\" truck"})}), global::thx.csv.Csv.encodeOptions), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEncode", "TestAll", "TestAll.hx"}, new int[]{1981972957}, new double[]{((double) (14) )}));
			global::utest.Assert.same("1997,Ford,E350,\"Go get one now\nthey are going fast\"", global::thx.csv.Dsv.encode(new global::Array<object>(new object[]{new global::Array<object>(new object[]{"1997", "Ford", "E350", "Go get one now\nthey are going fast"})}), global::thx.csv.Csv.encodeOptions), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEncode", "TestAll", "TestAll.hx"}, new int[]{1981972957}, new double[]{((double) (15) )}));
		}
	}
	
	
	public virtual void testDecode() {
		unchecked {
			global::utest.Assert.same(new global::Array<object>(new object[]{}), global::thx.csv.Dsv.decode("", global::thx.csv.Csv.decodeOptions), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDecode", "TestAll", "TestAll.hx"}, new int[]{1981972957}, new double[]{((double) (19) )}));
			global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{"", ""})}), global::thx.csv.Dsv.decode(",", global::thx.csv.Csv.decodeOptions), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDecode", "TestAll", "TestAll.hx"}, new int[]{1981972957}, new double[]{((double) (20) )}));
			global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{"f", ""})}), global::thx.csv.Dsv.decode("f,", global::thx.csv.Csv.decodeOptions), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDecode", "TestAll", "TestAll.hx"}, new int[]{1981972957}, new double[]{((double) (21) )}));
			global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{"", "f"})}), global::thx.csv.Dsv.decode(",f", global::thx.csv.Csv.decodeOptions), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDecode", "TestAll", "TestAll.hx"}, new int[]{1981972957}, new double[]{((double) (22) )}));
			global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{"x", "y"})}), global::thx.csv.Dsv.decode("x,y", global::thx.csv.Csv.decodeOptions), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDecode", "TestAll", "TestAll.hx"}, new int[]{1981972957}, new double[]{((double) (23) )}));
			global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{"", ""}), new global::Array<object>(new object[]{"", ""})}), global::thx.csv.Dsv.decode(",\n,", global::thx.csv.Csv.decodeOptions), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDecode", "TestAll", "TestAll.hx"}, new int[]{1981972957}, new double[]{((double) (24) )}));
			global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{"", ""}), new global::Array<object>(new object[]{""}), new global::Array<object>(new object[]{"", ""})}), global::thx.csv.Dsv.decode(",\n\n,", global::thx.csv.Csv.decodeOptions), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDecode", "TestAll", "TestAll.hx"}, new int[]{1981972957}, new double[]{((double) (25) )}));
			global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{"", ""}), new global::Array<object>(new object[]{""}), new global::Array<object>(new object[]{"", ""})}), global::thx.csv.Dsv.decode(",\n\"\"\n,", global::thx.csv.Csv.decodeOptions), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDecode", "TestAll", "TestAll.hx"}, new int[]{1981972957}, new double[]{((double) (26) )}));
			global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{"1997", "Ford", "E350"})}), new global::Array<object>(new object[]{new global::Array<object>(new object[]{"1997", "Ford", "E350"})}), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDecode", "TestAll", "TestAll.hx"}, new int[]{1981972957}, new double[]{((double) (27) )}));
			global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{"1997", "Ford", "E350"})}), global::thx.csv.Dsv.decode("1997,Ford,E350", global::thx.csv.Csv.decodeOptions), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDecode", "TestAll", "TestAll.hx"}, new int[]{1981972957}, new double[]{((double) (28) )}));
			global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{"1997", "Ford", "E350"})}), global::thx.csv.Dsv.decode("\"1997\",\"Ford\",\"E350\"", global::thx.csv.Csv.decodeOptions), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDecode", "TestAll", "TestAll.hx"}, new int[]{1981972957}, new double[]{((double) (29) )}));
			global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{"1997", "Ford", "E350", "Super, luxurious truck"})}), global::thx.csv.Dsv.decode("1997,Ford,E350,\"Super, luxurious truck\"", global::thx.csv.Csv.decodeOptions), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDecode", "TestAll", "TestAll.hx"}, new int[]{1981972957}, new double[]{((double) (30) )}));
			global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{"1997", "Ford", "E350", "Super, \"luxurious\" truck"})}), global::thx.csv.Dsv.decode("1997,Ford,E350,\"Super, \"\"luxurious\"\" truck\"", global::thx.csv.Csv.decodeOptions), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDecode", "TestAll", "TestAll.hx"}, new int[]{1981972957}, new double[]{((double) (31) )}));
			global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{"1997", "Ford", "E350", "Go get one now\nthey are going fast"})}), global::thx.csv.Dsv.decode("1997,Ford,E350,\"Go get one now\nthey are going fast\"", global::thx.csv.Csv.decodeOptions), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDecode", "TestAll", "TestAll.hx"}, new int[]{1981972957}, new double[]{((double) (32) )}));
		}
	}
	
	
	public virtual void testIssue20160125() {
		unchecked {
			global::Array<object> decoded = global::thx.csv.Dsv.decode("265671209,\"Dynagreen Environmental Protection Group Co., Ltd.\",1330,China,HKD,", global::thx.csv.Csv.decodeOptions);
			string encoded = global::thx.csv.Dsv.encode(decoded, global::thx.csv.Csv.encodeOptions);
			global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{"265671209", "Dynagreen Environmental Protection Group Co., Ltd.", "1330", "China", "HKD", ""})}), decoded, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIssue20160125", "TestAll", "TestAll.hx"}, new int[]{1981972957}, new double[]{((double) (39) )}));
			global::utest.Assert.same("265671209,\"Dynagreen Environmental Protection Group Co., Ltd.\",1330,China,HKD,", encoded, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIssue20160125", "TestAll", "TestAll.hx"}, new int[]{1981972957}, new double[]{((double) (42) )}));
		}
	}
	
	
	public virtual void testTerminalComma() {
		unchecked {
			global::Array<object> decoded = global::thx.csv.Dsv.decode("Company ID,Name,Ticker,Country,Currency,\n24085,1-800-Flowers.com Inc.,FLWS,United States,USD,", global::thx.csv.Csv.decodeOptions);
			string encoded = global::thx.csv.Dsv.encode(decoded, global::thx.csv.Csv.encodeOptions);
			global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{"Company ID", "Name", "Ticker", "Country", "Currency", ""}), new global::Array<object>(new object[]{"24085", "1-800-Flowers.com Inc.", "FLWS", "United States", "USD", ""})}), decoded, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTerminalComma", "TestAll", "TestAll.hx"}, new int[]{1981972957}, new double[]{((double) (50) )}));
			global::utest.Assert.same("Company ID,Name,Ticker,Country,Currency,\n24085,1-800-Flowers.com Inc.,FLWS,United States,USD,", encoded, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTerminalComma", "TestAll", "TestAll.hx"}, new int[]{1981972957}, new double[]{((double) (54) )}));
		}
	}
	
	
	public virtual void testRoundtrip() {
		unchecked {
			global::Array<object> decoded = global::thx.csv.Dsv.decode("Year,Make,Model,Description,Price\n1997,Ford,E350,\"ac, abs, moon\",3000.00\n1999,Chevy,\"Venture \"\"Extended Edition\"\"\",\"\",4900.00\n1999,Chevy,\"Venture \"\"Extended Edition, Very Large\"\"\",,5000.00\n1996,Jeep,Grand Cherokee,\"MUST SELL!\nair, moon roof, loaded\",4799.00", global::thx.csv.Csv.decodeOptions);
			string encoded = global::thx.csv.Dsv.encode(decoded, global::thx.csv.Csv.encodeOptions);
			global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{"Year", "Make", "Model", "Description", "Price"}), new global::Array<object>(new object[]{"1997", "Ford", "E350", "ac, abs, moon", "3000.00"}), new global::Array<object>(new object[]{"1999", "Chevy", "Venture \"Extended Edition\"", "", "4900.00"}), new global::Array<object>(new object[]{"1999", "Chevy", "Venture \"Extended Edition, Very Large\"", "", "5000.00"}), new global::Array<object>(new object[]{"1996", "Jeep", "Grand Cherokee", "MUST SELL!\nair, moon roof, loaded", "4799.00"})}), decoded, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRoundtrip", "TestAll", "TestAll.hx"}, new int[]{1981972957}, new double[]{((double) (67) )}));
			global::utest.Assert.same("Year,Make,Model,Description,Price\n1997,Ford,E350,\"ac, abs, moon\",3000.00\n1999,Chevy,\"Venture \"\"Extended Edition\"\"\",,4900.00\n1999,Chevy,\"Venture \"\"Extended Edition, Very Large\"\"\",,5000.00\n1996,Jeep,Grand Cherokee,\"MUST SELL!\nair, moon roof, loaded\",4799.00", encoded, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRoundtrip", "TestAll", "TestAll.hx"}, new int[]{1981972957}, new double[]{((double) (74) )}));
		}
	}
	
	
	public virtual void testSemicolon() {
		unchecked {
			global::utest.Assert.@equals("Year;Make;Model;Length\n1997;Ford;E350;2,34\n2000;Mercury;Cougar;2,38", global::thx.csv.Dsv.encode(global::thx.csv.Dsv.decode("Year;Make;Model;Length\n1997;Ford;E350;2,34\n2000;Mercury;Cougar;2,38", new global::haxe.lang.DynamicObject(new int[]{103286535, 1071573604, 1576149820, 2039415417}, new object[]{";", false, "\"", "\"\""}, new int[]{}, new double[]{})), new global::haxe.lang.DynamicObject(new int[]{103286535, 212244564, 1576149820, 2039415417}, new object[]{";", "\n", "\"", "\"\""}, new int[]{}, new double[]{})), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSemicolon", "TestAll", "TestAll.hx"}, new int[]{1981972957}, new double[]{((double) (88) )}));
		}
	}
	
	
	public virtual void testAutoTrim() {
		unchecked {
			global::Array<object> encoded = global::thx.csv.Dsv.decode("1997 , Ford, E350", new global::haxe.lang.DynamicObject(new int[]{103286535, 1071573604, 1576149820, 2039415417}, new object[]{",", true, "\"", "\"\""}, new int[]{}, new double[]{}));
			global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{"1997", "Ford", "E350"})}), encoded, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAutoTrim", "TestAll", "TestAll.hx"}, new int[]{1981972957}, new double[]{((double) (94) )}));
			encoded = global::thx.csv.Dsv.decode("1997 , Ford, E350", new global::haxe.lang.DynamicObject(new int[]{103286535, 1071573604, 1576149820, 2039415417}, new object[]{",", false, "\"", "\"\""}, new int[]{}, new double[]{}));
			global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{"1997 ", " Ford", " E350"})}), encoded, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAutoTrim", "TestAll", "TestAll.hx"}, new int[]{1981972957}, new double[]{((double) (96) )}));
			global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{"1997", "Ford", "E350", " Super, luxurious truck "})}), global::thx.csv.Dsv.decode("1997,Ford,E350,\" Super, luxurious truck \"", global::thx.csv.Csv.decodeOptions), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAutoTrim", "TestAll", "TestAll.hx"}, new int[]{1981972957}, new double[]{((double) (97) )}));
		}
	}
	
	
	public virtual void testSurroundingWhitespaces() {
		unchecked {
			global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{"1997", " \"Ford\" ", "E350"})}), global::thx.csv.Dsv.decode("1997, \"Ford\" ,E350", global::thx.csv.Csv.decodeOptions), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSurroundingWhitespaces", "TestAll", "TestAll.hx"}, new int[]{1981972957}, new double[]{((double) (101) )}));
		}
	}
	
	
	public virtual void testTsv() {
		unchecked {
			global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{"1997 ", " Ford ", " E350"})}), global::thx.csv.Dsv.decode("1997 \t Ford \t E350", global::thx.csv.Tsv.decodeOptions), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTsv", "TestAll", "TestAll.hx"}, new int[]{1981972957}, new double[]{((double) (105) )}));
		}
	}
	
	
	public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
		unchecked {
			switch (hash) {
				case 1036441829:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTsv", 1036441829)) );
				}
				
				
				case 1506124228:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSurroundingWhitespaces", 1506124228)) );
				}
				
				
				case 590393955:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testAutoTrim", 590393955)) );
				}
				
				
				case 17601407:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSemicolon", 17601407)) );
				}
				
				
				case 1296126337:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testRoundtrip", 1296126337)) );
				}
				
				
				case 216455943:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTerminalComma", 216455943)) );
				}
				
				
				case 1124171982:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testIssue20160125", 1124171982)) );
				}
				
				
				case 2111939360:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testDecode", 2111939360)) );
				}
				
				
				case 316160008:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testEncode", 316160008)) );
				}
				
				
				default:
				{
					return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
				}
				
			}
			
		}
	}
	
	
	public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
		unchecked {
			switch (hash) {
				case 1036441829:
				{
					this.testTsv();
					break;
				}
				
				
				case 1506124228:
				{
					this.testSurroundingWhitespaces();
					break;
				}
				
				
				case 590393955:
				{
					this.testAutoTrim();
					break;
				}
				
				
				case 17601407:
				{
					this.testSemicolon();
					break;
				}
				
				
				case 1296126337:
				{
					this.testRoundtrip();
					break;
				}
				
				
				case 216455943:
				{
					this.testTerminalComma();
					break;
				}
				
				
				case 1124171982:
				{
					this.testIssue20160125();
					break;
				}
				
				
				case 2111939360:
				{
					this.testDecode();
					break;
				}
				
				
				case 316160008:
				{
					this.testEncode();
					break;
				}
				
				
				default:
				{
					return base.__hx_invokeField(field, hash, dynargs);
				}
				
			}
			
			return null;
		}
	}
	
	
}


