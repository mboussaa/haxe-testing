// Generated by Haxe 3.3.0
#ifndef INCLUDED_haxe_crypto_Base64
#define INCLUDED_haxe_crypto_Base64

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,crypto,Base64)

namespace haxe{
namespace crypto{


class HXCPP_CLASS_ATTRIBUTES Base64_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Base64_obj OBJ_;
		Base64_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="haxe.crypto.Base64")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"haxe.crypto.Base64"); }
		static hx::ObjectPtr< Base64_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Base64_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Base64","\xaf","\x71","\xbc","\x89"); }

		static void __boot();
		static ::String CHARS;
};

} // end namespace haxe
} // end namespace crypto

#endif /* INCLUDED_haxe_crypto_Base64 */ 
