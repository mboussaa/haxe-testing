// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_Dates
#define INCLUDED_thx_Dates

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Date)
HX_DECLARE_CLASS1(thx,Dates)
HX_DECLARE_CLASS1(thx,Either)
HX_DECLARE_CLASS1(thx,TimePeriod)

namespace thx{


class HXCPP_CLASS_ATTRIBUTES Dates_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Dates_obj OBJ_;
		Dates_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.Dates")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.Dates"); }
		static hx::ObjectPtr< Dates_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Dates_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Dates","\x65","\x82","\xb5","\x67"); }

		static Int compare( ::Date a, ::Date b);
		static ::Dynamic compare_dyn();

		static  ::Date create(Int year, ::Dynamic month, ::Dynamic day, ::Dynamic hour, ::Dynamic minute, ::Dynamic second);
		static ::Dynamic create_dyn();

		static ::Array< ::Dynamic> daysRange( ::Date start, ::Date end);
		static ::Dynamic daysRange_dyn();

		static Bool equals( ::Date self, ::Date other);
		static ::Dynamic equals_dyn();

		static Bool nearEquals( ::Date self, ::Date other, ::Dynamic units,::hx::EnumBase period);
		static ::Dynamic nearEquals_dyn();

		static Bool greater( ::Date self, ::Date other);
		static ::Dynamic greater_dyn();

		static Bool more( ::Date self, ::Date other);
		static ::Dynamic more_dyn();

		static Bool less( ::Date self, ::Date other);
		static ::Dynamic less_dyn();

		static Bool greaterEquals( ::Date self, ::Date other);
		static ::Dynamic greaterEquals_dyn();

		static Bool moreEqual( ::Date self, ::Date other);
		static ::Dynamic moreEqual_dyn();

		static Bool lessEquals( ::Date self, ::Date other);
		static ::Dynamic lessEquals_dyn();

		static Bool lessEqual( ::Date self, ::Date other);
		static ::Dynamic lessEqual_dyn();

		static Bool isLeapYear(Int year);
		static ::Dynamic isLeapYear_dyn();

		static Bool isInLeapYear( ::Date d);
		static ::Dynamic isInLeapYear_dyn();

		static Int daysInMonth(Int year,Int month);
		static ::Dynamic daysInMonth_dyn();

		static Int numDaysInMonth(Int month,Int year);
		static ::Dynamic numDaysInMonth_dyn();

		static Int daysInThisMonth( ::Date d);
		static ::Dynamic daysInThisMonth_dyn();

		static Int numDaysInThisMonth( ::Date d);
		static ::Dynamic numDaysInThisMonth_dyn();

		static Bool sameYear( ::Date self, ::Date other);
		static ::Dynamic sameYear_dyn();

		static Bool sameMonth( ::Date self, ::Date other);
		static ::Dynamic sameMonth_dyn();

		static Bool sameDay( ::Date self, ::Date other);
		static ::Dynamic sameDay_dyn();

		static Bool sameHour( ::Date self, ::Date other);
		static ::Dynamic sameHour_dyn();

		static Bool sameMinute( ::Date self, ::Date other);
		static ::Dynamic sameMinute_dyn();

		static  ::Date snapNext( ::Date date,::hx::EnumBase period);
		static ::Dynamic snapNext_dyn();

		static  ::Date snapPrev( ::Date date,::hx::EnumBase period);
		static ::Dynamic snapPrev_dyn();

		static  ::Date snapTo( ::Date date,::hx::EnumBase period);
		static ::Dynamic snapTo_dyn();

		static  ::Date jump( ::Date date,::hx::EnumBase period,Int amount);
		static ::Dynamic jump_dyn();

		static  ::Date max( ::Date self, ::Date other);
		static ::Dynamic max_dyn();

		static  ::Date min( ::Date self, ::Date other);
		static ::Dynamic min_dyn();

		static  ::Date snapToWeekDay( ::Date date,Int day, ::Dynamic firstDayOfWk);
		static ::Dynamic snapToWeekDay_dyn();

		static  ::Date snapNextWeekDay( ::Date date,Int day);
		static ::Dynamic snapNextWeekDay_dyn();

		static  ::Date snapPrevWeekDay( ::Date date,Int day);
		static ::Dynamic snapPrevWeekDay_dyn();

		static  ::Date prevYear( ::Date d);
		static ::Dynamic prevYear_dyn();

		static  ::Date nextYear( ::Date d);
		static ::Dynamic nextYear_dyn();

		static  ::Date prevMonth( ::Date d);
		static ::Dynamic prevMonth_dyn();

		static  ::Date nextMonth( ::Date d);
		static ::Dynamic nextMonth_dyn();

		static  ::Date prevWeek( ::Date d);
		static ::Dynamic prevWeek_dyn();

		static  ::Date nextWeek( ::Date d);
		static ::Dynamic nextWeek_dyn();

		static  ::Date prevDay( ::Date d);
		static ::Dynamic prevDay_dyn();

		static  ::Date nextDay( ::Date d);
		static ::Dynamic nextDay_dyn();

		static  ::Date prevHour( ::Date d);
		static ::Dynamic prevHour_dyn();

		static  ::Date nextHour( ::Date d);
		static ::Dynamic nextHour_dyn();

		static  ::Date prevMinute( ::Date d);
		static ::Dynamic prevMinute_dyn();

		static  ::Date nextMinute( ::Date d);
		static ::Dynamic nextMinute_dyn();

		static  ::Date prevSecond( ::Date d);
		static ::Dynamic prevSecond_dyn();

		static  ::Date nextSecond( ::Date d);
		static ::Dynamic nextSecond_dyn();

		static  ::Date withYear( ::Date date,Int year);
		static ::Dynamic withYear_dyn();

		static  ::Date withMonth( ::Date date,Int month);
		static ::Dynamic withMonth_dyn();

		static  ::Date withDay( ::Date date,Int day);
		static ::Dynamic withDay_dyn();

		static  ::Date withHour( ::Date date,Int hour);
		static ::Dynamic withHour_dyn();

		static  ::Date withMinute( ::Date date,Int minute);
		static ::Dynamic withMinute_dyn();

		static  ::Date withSecond( ::Date date,Int second);
		static ::Dynamic withSecond_dyn();

		static ::hx::EnumBase parseDate(::String s);
		static ::Dynamic parseDate_dyn();

};

} // end namespace thx

#endif /* INCLUDED_thx_Dates */ 
