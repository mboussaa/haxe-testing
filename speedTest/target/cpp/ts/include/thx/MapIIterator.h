// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_MapIIterator
#define INCLUDED_thx_MapIIterator

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(thx,MapIIterator)

namespace thx{


class HXCPP_CLASS_ATTRIBUTES MapIIterator_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef MapIIterator_obj OBJ_;
		MapIIterator_obj();

	public:
		void __construct( ::Dynamic base, ::Dynamic f);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="thx.MapIIterator")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"thx.MapIIterator"); }
		static hx::ObjectPtr< MapIIterator_obj > __new( ::Dynamic base, ::Dynamic f);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~MapIIterator_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("MapIIterator","\x5b","\x05","\x92","\x4f"); }

		 ::Dynamic base;
		 ::Dynamic f;
		 ::Dynamic &f_dyn() { return f;}
		Int i;
		 ::Dynamic next();
		::Dynamic next_dyn();

		Bool hasNext();
		::Dynamic hasNext_dyn();

};

} // end namespace thx

#endif /* INCLUDED_thx_MapIIterator */ 
