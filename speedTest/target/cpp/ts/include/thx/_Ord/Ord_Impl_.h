// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx__Ord_Ord_Impl_
#define INCLUDED_thx__Ord_Ord_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(thx,OrderingImpl)
HX_DECLARE_CLASS2(thx,_Ord,Ord_Impl_)

namespace thx{
namespace _Ord{


class HXCPP_CLASS_ATTRIBUTES Ord_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Ord_Impl__obj OBJ_;
		Ord_Impl__obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx._Ord.Ord_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx._Ord.Ord_Impl_"); }
		static hx::ObjectPtr< Ord_Impl__obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Ord_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Ord_Impl_","\x21","\xd9","\xe1","\x1b"); }

		static ::hx::EnumBase order( ::Dynamic this1, ::Dynamic a0, ::Dynamic a1);
		static ::Dynamic order_dyn();

		static  ::Dynamic max( ::Dynamic this1, ::Dynamic a0, ::Dynamic a1);
		static ::Dynamic max_dyn();

		static  ::Dynamic min( ::Dynamic this1, ::Dynamic a0, ::Dynamic a1);
		static ::Dynamic min_dyn();

		static Bool equal( ::Dynamic this1, ::Dynamic a0, ::Dynamic a1);
		static ::Dynamic equal_dyn();

		static  ::Dynamic contramap( ::Dynamic this1, ::Dynamic f);
		static ::Dynamic contramap_dyn();

		static  ::Dynamic inverse( ::Dynamic this1);
		static ::Dynamic inverse_dyn();

		static Int intComparison( ::Dynamic this1, ::Dynamic a0, ::Dynamic a1);
		static ::Dynamic intComparison_dyn();

		static  ::Dynamic fromIntComparison( ::Dynamic f);
		static ::Dynamic fromIntComparison_dyn();

		static  ::Dynamic forComparable();
		static ::Dynamic forComparable_dyn();

		static  ::Dynamic forComparableOrd();
		static ::Dynamic forComparableOrd_dyn();

};

} // end namespace thx
} // end namespace _Ord

#endif /* INCLUDED_thx__Ord_Ord_Impl_ */ 
