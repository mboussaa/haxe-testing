// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_haxe_ds_Option
#include <haxe/ds/Option.h>
#endif
#ifndef INCLUDED_thx_Either
#include <thx/Either.h>
#endif
#ifndef INCLUDED_thx_Eithers
#include <thx/Eithers.h>
#endif
#ifndef INCLUDED_thx_Error
#include <thx/Error.h>
#endif
#ifndef INCLUDED_thx_NonEmptyList
#include <thx/NonEmptyList.h>
#endif
#ifndef INCLUDED_thx__Nel_Nel_Impl_
#include <thx/_Nel/Nel_Impl_.h>
#endif

namespace thx{

void Eithers_obj::__construct() { }

Dynamic Eithers_obj::__CreateEmpty() { return new Eithers_obj; }

hx::ObjectPtr< Eithers_obj > Eithers_obj::__new()
{
	hx::ObjectPtr< Eithers_obj > _hx_result = new Eithers_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Eithers_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Eithers_obj > _hx_result = new Eithers_obj();
	_hx_result->__construct();
	return _hx_result;
}

Bool Eithers_obj::isLeft(::hx::EnumBase either){
            	HX_STACK_FRAME("thx.Eithers","isLeft",0x42612ebb,"thx.Eithers.isLeft","thx/Eithers.hx",13,0x81d88afb)
            	HX_STACK_ARG(either,"either")
HXLINE(  13)		Int _hx_tmp = ( ( ::hx::EnumBase)(either) )->_hx_getIndex();
HXDLIN(  13)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE(  13)				return true;
            			}
            			break;
            			case (int)1: {
HXLINE(  13)				return false;
            			}
            			break;
            		}
HXDLIN(  13)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Eithers_obj,isLeft,return )

Bool Eithers_obj::isRight(::hx::EnumBase either){
            	HX_STACK_FRAME("thx.Eithers","isRight",0x49b4c2a8,"thx.Eithers.isRight","thx/Eithers.hx",23,0x81d88afb)
            	HX_STACK_ARG(either,"either")
HXLINE(  23)		Int _hx_tmp = ( ( ::hx::EnumBase)(either) )->_hx_getIndex();
HXDLIN(  23)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE(  23)				return false;
            			}
            			break;
            			case (int)1: {
HXLINE(  23)				return true;
            			}
            			break;
            		}
HXDLIN(  23)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Eithers_obj,isRight,return )

::hx::EnumBase Eithers_obj::toLeft(::hx::EnumBase either){
            	HX_STACK_FRAME("thx.Eithers","toLeft",0x5ab3d4cc,"thx.Eithers.toLeft","thx/Eithers.hx",33,0x81d88afb)
            	HX_STACK_ARG(either,"either")
HXLINE(  33)		Int _hx_tmp = ( ( ::hx::EnumBase)(either) )->_hx_getIndex();
HXDLIN(  33)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE(  33)				return ::haxe::ds::Option_obj::Some(either->_hx_getObject(0));
            			}
            			break;
            			case (int)1: {
HXLINE(  33)				return ::haxe::ds::Option_obj::None_dyn();
            			}
            			break;
            		}
HXDLIN(  33)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Eithers_obj,toLeft,return )

::hx::EnumBase Eithers_obj::toRight(::hx::EnumBase either){
            	HX_STACK_FRAME("thx.Eithers","toRight",0x79b36b77,"thx.Eithers.toRight","thx/Eithers.hx",43,0x81d88afb)
            	HX_STACK_ARG(either,"either")
HXLINE(  43)		Int _hx_tmp = ( ( ::hx::EnumBase)(either) )->_hx_getIndex();
HXDLIN(  43)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE(  43)				return ::haxe::ds::Option_obj::None_dyn();
            			}
            			break;
            			case (int)1: {
HXLINE(  43)				return ::haxe::ds::Option_obj::Some(either->_hx_getObject(0));
            			}
            			break;
            		}
HXDLIN(  43)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Eithers_obj,toRight,return )

 ::Dynamic Eithers_obj::toLeftUnsafe(::hx::EnumBase either){
            	HX_STACK_FRAME("thx.Eithers","toLeftUnsafe",0x6b1c6e12,"thx.Eithers.toLeftUnsafe","thx/Eithers.hx",53,0x81d88afb)
            	HX_STACK_ARG(either,"either")
HXLINE(  53)		Int _hx_tmp = ( ( ::hx::EnumBase)(either) )->_hx_getIndex();
HXDLIN(  53)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE(  53)				return either->_hx_getObject(0);
            			}
            			break;
            			case (int)1: {
HXLINE(  53)				return null();
            			}
            			break;
            		}
HXDLIN(  53)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Eithers_obj,toLeftUnsafe,return )

 ::Dynamic Eithers_obj::toRightUnsafe(::hx::EnumBase either){
            	HX_STACK_FRAME("thx.Eithers","toRightUnsafe",0xadc6d6fd,"thx.Eithers.toRightUnsafe","thx/Eithers.hx",63,0x81d88afb)
            	HX_STACK_ARG(either,"either")
HXLINE(  63)		Int _hx_tmp = ( ( ::hx::EnumBase)(either) )->_hx_getIndex();
HXDLIN(  63)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE(  63)				return null();
            			}
            			break;
            			case (int)1: {
HXLINE(  63)				return either->_hx_getObject(0);
            			}
            			break;
            		}
HXDLIN(  63)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Eithers_obj,toRightUnsafe,return )

::hx::EnumBase Eithers_obj::map(::hx::EnumBase either, ::Dynamic f){
            	HX_STACK_FRAME("thx.Eithers","map",0xd9e55ab2,"thx.Eithers.map","thx/Eithers.hx",70,0x81d88afb)
            	HX_STACK_ARG(either,"either")
            	HX_STACK_ARG(f,"f")
HXLINE(  70)		Int _hx_tmp = ( ( ::hx::EnumBase)(either) )->_hx_getIndex();
HXDLIN(  70)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE(  70)				return ::thx::Either_obj::Left(either->_hx_getObject(0));
            			}
            			break;
            			case (int)1: {
HXLINE(  72)				 ::Dynamic _hx_tmp1 = f(either->_hx_getObject(0));
HXLINE(  70)				return ::thx::Either_obj::Right(_hx_tmp1);
            			}
            			break;
            		}
HXDLIN(  70)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Eithers_obj,map,return )

::hx::EnumBase Eithers_obj::flatMap(::hx::EnumBase either, ::Dynamic f){
            	HX_STACK_FRAME("thx.Eithers","flatMap",0xaaa92379,"thx.Eithers.flatMap","thx/Eithers.hx",79,0x81d88afb)
            	HX_STACK_ARG(either,"either")
            	HX_STACK_ARG(f,"f")
HXLINE(  79)		Int _hx_tmp = ( ( ::hx::EnumBase)(either) )->_hx_getIndex();
HXDLIN(  79)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE(  79)				return ::thx::Either_obj::Left(either->_hx_getObject(0));
            			}
            			break;
            			case (int)1: {
HXLINE(  79)				return f(either->_hx_getObject(0));
            			}
            			break;
            		}
HXDLIN(  79)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Eithers_obj,flatMap,return )

::hx::EnumBase Eithers_obj::leftMap(::hx::EnumBase either, ::Dynamic f){
            	HX_STACK_FRAME("thx.Eithers","leftMap",0xb8ab4beb,"thx.Eithers.leftMap","thx/Eithers.hx",86,0x81d88afb)
            	HX_STACK_ARG(either,"either")
            	HX_STACK_ARG(f,"f")
HXLINE(  86)		Int _hx_tmp = ( ( ::hx::EnumBase)(either) )->_hx_getIndex();
HXDLIN(  86)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE(  87)				 ::Dynamic _hx_tmp1 = f(either->_hx_getObject(0));
HXLINE(  86)				return ::thx::Either_obj::Left(_hx_tmp1);
            			}
            			break;
            			case (int)1: {
HXLINE(  86)				return ::thx::Either_obj::Right(either->_hx_getObject(0));
            			}
            			break;
            		}
HXDLIN(  86)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Eithers_obj,leftMap,return )

 ::Dynamic Eithers_obj::orThrow(::hx::EnumBase either,::String message){
            	HX_STACK_FRAME("thx.Eithers","orThrow",0x03068019,"thx.Eithers.orThrow","thx/Eithers.hx",92,0x81d88afb)
            	HX_STACK_ARG(either,"either")
            	HX_STACK_ARG(message,"message")
HXLINE(  92)		Int _hx_tmp = ( ( ::hx::EnumBase)(either) )->_hx_getIndex();
HXDLIN(  92)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE(  93)				HX_VARI(  ::Dynamic,v) = either->_hx_getObject(0);
HXDLIN(  93)				::String _hx_tmp1 = ((HX_("",00,00,00,00) + message) + HX_(": ",a6,32,00,00));
HXDLIN(  93)				::String _hx_tmp2 = ::Std_obj::string(v);
HXDLIN(  93)				HX_STACK_DO_THROW( ::thx::Error_obj::__new((_hx_tmp1 + _hx_tmp2),null(),hx::SourceInfo(HX_("Eithers.hx",10,b4,8a,7a),93,HX_("thx.Eithers",84,6d,8b,eb),HX_("orThrow",03,6d,3b,3f))));
            			}
            			break;
            			case (int)1: {
HXLINE(  92)				return either->_hx_getObject(0);
            			}
            			break;
            		}
HXDLIN(  92)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Eithers_obj,orThrow,return )

::hx::EnumBase Eithers_obj::toVNel(::hx::EnumBase either){
            	HX_STACK_FRAME("thx.Eithers","toVNel",0x613e8244,"thx.Eithers.toVNel","thx/Eithers.hx",98,0x81d88afb)
            	HX_STACK_ARG(either,"either")
HXLINE(  98)		Int _hx_tmp = ( ( ::hx::EnumBase)(either) )->_hx_getIndex();
HXDLIN(  98)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE(  99)				::hx::EnumBase _hx_tmp1 = ::thx::_Nel::Nel_Impl__obj::pure(either->_hx_getObject(0));
HXLINE(  98)				return ::thx::Either_obj::Left(_hx_tmp1);
            			}
            			break;
            			case (int)1: {
HXLINE(  98)				return ::thx::Either_obj::Right(either->_hx_getObject(0));
            			}
            			break;
            		}
HXDLIN(  98)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Eithers_obj,toVNel,return )

 ::Dynamic Eithers_obj::cata(::hx::EnumBase either, ::Dynamic l, ::Dynamic r){
            	HX_STACK_FRAME("thx.Eithers","cata",0xc82de2b5,"thx.Eithers.cata","thx/Eithers.hx",104,0x81d88afb)
            	HX_STACK_ARG(either,"either")
            	HX_STACK_ARG(l,"l")
            	HX_STACK_ARG(r,"r")
HXLINE( 104)		Int _hx_tmp = ( ( ::hx::EnumBase)(either) )->_hx_getIndex();
HXDLIN( 104)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE( 104)				return l(either->_hx_getObject(0));
            			}
            			break;
            			case (int)1: {
HXLINE( 104)				return r(either->_hx_getObject(0));
            			}
            			break;
            		}
HXDLIN( 104)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Eithers_obj,cata,return )


Eithers_obj::Eithers_obj()
{
}

bool Eithers_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { outValue = map_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"cata") ) { outValue = cata_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"isLeft") ) { outValue = isLeft_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLeft") ) { outValue = toLeft_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toVNel") ) { outValue = toVNel_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isRight") ) { outValue = isRight_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRight") ) { outValue = toRight_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"flatMap") ) { outValue = flatMap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"leftMap") ) { outValue = leftMap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"orThrow") ) { outValue = orThrow_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"toLeftUnsafe") ) { outValue = toLeftUnsafe_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"toRightUnsafe") ) { outValue = toRightUnsafe_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Eithers_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Eithers_obj_sStaticStorageInfo = 0;
#endif

static void Eithers_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Eithers_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Eithers_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Eithers_obj::__mClass,"__mClass");
};

#endif

hx::Class Eithers_obj::__mClass;

static ::String Eithers_obj_sStaticFields[] = {
	HX_HCSTRING("isLeft","\x11","\xcd","\x16","\x65"),
	HX_HCSTRING("isRight","\x92","\xaf","\xe9","\x85"),
	HX_HCSTRING("toLeft","\x22","\x73","\x69","\x7d"),
	HX_HCSTRING("toRight","\x61","\x58","\xe8","\xb5"),
	HX_HCSTRING("toLeftUnsafe","\xe8","\x70","\x12","\x3b"),
	HX_HCSTRING("toRightUnsafe","\x67","\x4f","\x13","\xd5"),
	HX_HCSTRING("map","\x9c","\x0a","\x53","\x00"),
	HX_HCSTRING("flatMap","\x63","\x10","\xde","\xe6"),
	HX_HCSTRING("leftMap","\xd5","\x38","\xe0","\xf4"),
	HX_HCSTRING("orThrow","\x03","\x6d","\x3b","\x3f"),
	HX_HCSTRING("toVNel","\x9a","\x20","\xf4","\x83"),
	HX_HCSTRING("cata","\x8b","\x1f","\xba","\x41"),
	::String(null())
};

void Eithers_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.Eithers","\x84","\x6d","\x8b","\xeb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Eithers_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Eithers_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Eithers_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Eithers_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Eithers_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Eithers_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Eithers_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
