// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_thx_Ints
#include <thx/Ints.h>
#endif
#ifndef INCLUDED_thx_OrderingImpl
#include <thx/OrderingImpl.h>
#endif
#ifndef INCLUDED_thx_RangeIterator
#include <thx/RangeIterator.h>
#endif
#ifndef INCLUDED_thx_Strings
#include <thx/Strings.h>
#endif

namespace thx{

void Ints_obj::__construct() { }

Dynamic Ints_obj::__CreateEmpty() { return new Ints_obj; }

hx::ObjectPtr< Ints_obj > Ints_obj::__new()
{
	hx::ObjectPtr< Ints_obj > _hx_result = new Ints_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Ints_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Ints_obj > _hx_result = new Ints_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::EReg Ints_obj::pattern_parse;

Int Ints_obj::abs(Int v){
            	HX_STACK_FRAME("thx.Ints","abs",0x142a30f2,"thx.Ints.abs","thx/Ints.hx",18,0xd1f81caf)
            	HX_STACK_ARG(v,"v")
HXLINE(  18)		if ((v < (int)0)) {
HXLINE(  18)			return -(v);
            		}
            		else {
HXLINE(  18)			return v;
            		}
HXDLIN(  18)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Ints_obj,abs,return )

Bool Ints_obj::canParse(::String s){
            	HX_STACK_FRAME("thx.Ints","canParse",0x10cec183,"thx.Ints.canParse","thx/Ints.hx",25,0xd1f81caf)
            	HX_STACK_ARG(s,"s")
HXLINE(  25)		return ::thx::Ints_obj::pattern_parse->match(s);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Ints_obj,canParse,return )

Int Ints_obj::clamp(Int v,Int min,Int max){
            	HX_STACK_FRAME("thx.Ints","clamp",0x4529d37b,"thx.Ints.clamp","thx/Ints.hx",31,0xd1f81caf)
            	HX_STACK_ARG(v,"v")
            	HX_STACK_ARG(min,"min")
            	HX_STACK_ARG(max,"max")
HXLINE(  31)		if ((v < min)) {
HXLINE(  31)			return min;
            		}
            		else {
HXLINE(  31)			if ((v > max)) {
HXLINE(  31)				return max;
            			}
            			else {
HXLINE(  31)				return v;
            			}
            		}
HXDLIN(  31)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Ints_obj,clamp,return )

Int Ints_obj::clampSym(Int v,Int max){
            	HX_STACK_FRAME("thx.Ints","clampSym",0x6408b04c,"thx.Ints.clampSym","thx/Ints.hx",38,0xd1f81caf)
            	HX_STACK_ARG(v,"v")
            	HX_STACK_ARG(max,"max")
HXLINE(  38)		HX_VARI( Int,min) = -(max);
HXDLIN(  38)		if ((v < min)) {
HXLINE(  38)			return min;
            		}
            		else {
HXLINE(  38)			if ((v > max)) {
HXLINE(  38)				return max;
            			}
            			else {
HXLINE(  38)				return v;
            			}
            		}
HXDLIN(  38)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Ints_obj,clampSym,return )

Int Ints_obj::compare(Int a,Int b){
            	HX_STACK_FRAME("thx.Ints","compare",0x5fb39925,"thx.Ints.compare","thx/Ints.hx",46,0xd1f81caf)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(  46)		return (a - b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Ints_obj,compare,return )

Int Ints_obj::gcd(Int m,Int n){
            	HX_STACK_FRAME("thx.Ints","gcd",0x142ebf48,"thx.Ints.gcd","thx/Ints.hx",51,0xd1f81caf)
            	HX_STACK_ARG(m,"m")
            	HX_STACK_ARG(n,"n")
HXLINE(  52)		Bool _hx_tmp = (m < (int)0);
HXDLIN(  52)		if (_hx_tmp) {
HXLINE(  52)			m = -(m);
            		}
            		else {
HXLINE(  52)			m = m;
            		}
HXLINE(  53)		Bool _hx_tmp1 = (n < (int)0);
HXDLIN(  53)		if (_hx_tmp1) {
HXLINE(  53)			n = -(n);
            		}
            		else {
HXLINE(  53)			n = n;
            		}
HXLINE(  54)		if ((n == (int)0)) {
HXLINE(  54)			return m;
            		}
HXLINE(  55)		return ::thx::Ints_obj::gcd(n,hx::Mod(m,n));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Ints_obj,gcd,return )

Int Ints_obj::interpolate(Float f,Float a,Float b){
            	HX_STACK_FRAME("thx.Ints","interpolate",0xe6079541,"thx.Ints.interpolate","thx/Ints.hx",64,0xd1f81caf)
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(  64)		return ::Math_obj::round((a + ((b - a) * f)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Ints_obj,interpolate,return )

Bool Ints_obj::isEven(Int v){
            	HX_STACK_FRAME("thx.Ints","isEven",0x9ae643a4,"thx.Ints.isEven","thx/Ints.hx",70,0xd1f81caf)
            	HX_STACK_ARG(v,"v")
HXLINE(  70)		return (hx::Mod(v,(int)2) == (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Ints_obj,isEven,return )

Bool Ints_obj::isOdd(Int v){
            	HX_STACK_FRAME("thx.Ints","isOdd",0xbe241c65,"thx.Ints.isOdd","thx/Ints.hx",76,0xd1f81caf)
            	HX_STACK_ARG(v,"v")
HXLINE(  76)		return (hx::Mod(v,(int)2) != (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Ints_obj,isOdd,return )

::String Ints_obj::lpad(Int v,::String __o_pad,Int len){
::String pad = __o_pad.Default(HX_HCSTRING("0","\x30","\x00","\x00","\x00"));
            	HX_STACK_FRAME("thx.Ints","lpad",0x98108be7,"thx.Ints.lpad","thx/Ints.hx",78,0xd1f81caf)
            	HX_STACK_ARG(v,"v")
            	HX_STACK_ARG(pad,"pad")
            	HX_STACK_ARG(len,"len")
HXLINE(  79)		HX_VARI( Bool,neg) = false;
HXLINE(  80)		Bool _hx_tmp = (v < (int)0);
HXDLIN(  80)		if (_hx_tmp) {
HXLINE(  81)			neg = true;
HXLINE(  82)			v = -(v);
            		}
HXLINE(  84)		::String _hx_tmp1;
HXDLIN(  84)		if (neg) {
HXLINE(  84)			_hx_tmp1 = HX_("-",2d,00,00,00);
            		}
            		else {
HXLINE(  84)			_hx_tmp1 = HX_("",00,00,00,00);
            		}
HXDLIN(  84)		return (_hx_tmp1 + ::StringTools_obj::lpad((HX_("",00,00,00,00) + v),pad,len));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Ints_obj,lpad,return )

Int Ints_obj::lcm(Int m,Int n){
            	HX_STACK_FRAME("thx.Ints","lcm",0x14328a96,"thx.Ints.lcm","thx/Ints.hx",90,0xd1f81caf)
            	HX_STACK_ARG(m,"m")
            	HX_STACK_ARG(n,"n")
HXLINE(  91)		Bool _hx_tmp = (m < (int)0);
HXDLIN(  91)		if (_hx_tmp) {
HXLINE(  91)			m = -(m);
            		}
            		else {
HXLINE(  91)			m = m;
            		}
HXLINE(  92)		Bool _hx_tmp1 = (n < (int)0);
HXDLIN(  92)		if (_hx_tmp1) {
HXLINE(  92)			n = -(n);
            		}
            		else {
HXLINE(  92)			n = n;
            		}
HXLINE(  93)		if ((n == (int)0)) {
HXLINE(  93)			return m;
            		}
HXLINE(  94)		Int _hx_tmp2 = ::Std_obj::_hx_int(((Float)n / (Float)::thx::Ints_obj::gcd(m,n)));
HXDLIN(  94)		return (m * _hx_tmp2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Ints_obj,lcm,return )

::String Ints_obj::rpad(Int v,::String __o_pad,Int len){
::String pad = __o_pad.Default(HX_HCSTRING("0","\x30","\x00","\x00","\x00"));
            	HX_STACK_FRAME("thx.Ints","rpad",0x9c07d3a1,"thx.Ints.rpad","thx/Ints.hx",98,0xd1f81caf)
            	HX_STACK_ARG(v,"v")
            	HX_STACK_ARG(pad,"pad")
            	HX_STACK_ARG(len,"len")
HXLINE(  98)		return ::StringTools_obj::rpad((HX_("",00,00,00,00) + v),pad,len);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Ints_obj,rpad,return )

Int Ints_obj::max(Int a,Int b){
            	HX_STACK_FRAME("thx.Ints","max",0x14334b24,"thx.Ints.max","thx/Ints.hx",104,0xd1f81caf)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 104)		if ((a > b)) {
HXLINE( 104)			return a;
            		}
            		else {
HXLINE( 104)			return b;
            		}
HXDLIN( 104)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Ints_obj,max,return )

Int Ints_obj::min(Int a,Int b){
            	HX_STACK_FRAME("thx.Ints","min",0x14335212,"thx.Ints.min","thx/Ints.hx",110,0xd1f81caf)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 110)		if ((a < b)) {
HXLINE( 110)			return a;
            		}
            		else {
HXLINE( 110)			return b;
            		}
HXDLIN( 110)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Ints_obj,min,return )

 ::Dynamic Ints_obj::parse(::String s, ::Dynamic base){
            	HX_STACK_FRAME("thx.Ints","parse",0xba26f0b3,"thx.Ints.parse","thx/Ints.hx",116,0xd1f81caf)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(base,"base")
HXLINE( 132)		Bool _hx_tmp;
HXDLIN( 132)		if (hx::IsNotNull( base )) {
HXLINE( 132)			if (hx::IsGreaterEq( base,(int)2 )) {
HXLINE( 132)				_hx_tmp = hx::IsGreater( base,::thx::Ints_obj::BASE.length );
            			}
            			else {
HXLINE( 132)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 132)			_hx_tmp = false;
            		}
HXDLIN( 132)		if (_hx_tmp) {
HXLINE( 133)			HX_STACK_DO_THROW((((HX_("invalid base ",06,a1,02,4a) + base) + HX_(", it must be between 2 and ",f6,dd,3e,5e)) + ::thx::Ints_obj::BASE.length));
            		}
HXLINE( 135)		s = ::StringTools_obj::trim(s).toLowerCase();
HXLINE( 137)		HX_VAR( Int,sign);
HXDLIN( 137)		Bool _hx_tmp1 = ::StringTools_obj::startsWith(s,HX_("+",2b,00,00,00));
HXDLIN( 137)		if (_hx_tmp1) {
HXLINE( 138)			s = s.substring((int)1,null());
HXLINE( 137)			sign = (int)1;
            		}
            		else {
HXLINE( 140)			Bool _hx_tmp2 = ::StringTools_obj::startsWith(s,HX_("-",2d,00,00,00));
HXDLIN( 140)			if (_hx_tmp2) {
HXLINE( 141)				s = s.substring((int)1,null());
HXLINE( 137)				sign = (int)-1;
            			}
            			else {
HXLINE( 137)				sign = (int)1;
            			}
            		}
HXLINE( 147)		if ((s.length == (int)0)) {
HXLINE( 148)			return null();
            		}
HXLINE( 150)		Bool _hx_tmp3 = ::StringTools_obj::startsWith(s,HX_("0x",48,2a,00,00));
HXDLIN( 150)		if (_hx_tmp3) {
HXLINE( 151)			Bool _hx_tmp4;
HXDLIN( 151)			if (hx::IsNotNull( base )) {
HXLINE( 151)				_hx_tmp4 = hx::IsNotEq( (int)16,base );
            			}
            			else {
HXLINE( 151)				_hx_tmp4 = false;
            			}
HXDLIN( 151)			if (_hx_tmp4) {
HXLINE( 152)				return null();
            			}
HXLINE( 153)			base = (int)16;
HXLINE( 154)			s = s.substring((int)2,null());
            		}
            		else {
HXLINE( 155)			Bool _hx_tmp5 = hx::IsNull( base );
HXDLIN( 155)			if (_hx_tmp5) {
HXLINE( 156)				base = (int)10;
            			}
            		}
HXLINE( 159)		HX_VARI( ::Array< Int >,acc) = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXLINE( 160)		try {
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,base,::Array< Int >,acc) HXARGC(1)
            			void _hx_run(::String c){
            				HX_STACK_FRAME("thx.Ints","parse",0xba26f0b3,"thx.Ints.parse","thx/Ints.hx",160,0xd1f81caf)
            				HX_STACK_ARG(c,"c")
HXLINE( 161)				HX_VARI( Int,i) = ::thx::Ints_obj::BASE.indexOf(c,null());
HXLINE( 162)				Bool _hx_tmp6;
HXDLIN( 162)				if ((i >= (int)0)) {
HXLINE( 162)					_hx_tmp6 = hx::IsGreaterEq( i,base );
            				}
            				else {
HXLINE( 162)					_hx_tmp6 = true;
            				}
HXDLIN( 162)				if (_hx_tmp6) {
HXLINE( 162)					HX_STACK_DO_THROW(HX_("invalid",f7,da,47,3b));
            				}
HXLINE( 163)				acc[(int)0] = ((acc->__get((int)0) * base) + i);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 160)			::thx::Strings_obj::map(s, ::Dynamic(new _hx_Closure_0(base,acc)));
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 165)		return (acc->__get((int)0) * sign);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Ints_obj,parse,return )

Int Ints_obj::random(hx::Null< Int >  __o_min,Int max){
Int min = __o_min.Default(0);
            	HX_STACK_FRAME("thx.Ints","random",0xf1f23183,"thx.Ints.random","thx/Ints.hx",178,0xd1f81caf)
            	HX_STACK_ARG(min,"min")
            	HX_STACK_ARG(max,"max")
HXLINE( 178)		Int _hx_tmp = ::Std_obj::random((max + (int)1));
HXDLIN( 178)		return (_hx_tmp + min);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Ints_obj,random,return )

::Array< Int > Ints_obj::range(Int start, ::Dynamic stop,hx::Null< Int >  __o_step){
Int step = __o_step.Default(1);
            	HX_STACK_FRAME("thx.Ints","range",0xe0f1063d,"thx.Ints.range","thx/Ints.hx",185,0xd1f81caf)
            	HX_STACK_ARG(start,"start")
            	HX_STACK_ARG(stop,"stop")
            	HX_STACK_ARG(step,"step")
HXLINE( 186)		Bool _hx_tmp = hx::IsNull( stop );
HXDLIN( 186)		if (_hx_tmp) {
HXLINE( 187)			stop = start;
HXLINE( 188)			start = (int)0;
            		}
HXLINE( 190)		if ((((Float)(stop - start) / (Float)step) == ::Math_obj::POSITIVE_INFINITY)) {
HXLINE( 190)			HX_STACK_DO_THROW(HX_("infinite range",71,1f,af,06));
            		}
HXLINE( 191)		HX_VARI( ::Array< Int >,range) = ::Array_obj< Int >::__new(0);
HXDLIN( 191)		HX_VARI( Int,i) = (int)-1;
HXDLIN( 191)		HX_VAR( Int,j);
HXLINE( 192)		if ((step < (int)0)) {
HXLINE( 193)			while(true){
HXLINE( 193)				Int _hx_tmp1 = ++i;
HXDLIN( 193)				j = (start + (step * _hx_tmp1));
HXDLIN( 193)				if (!(hx::IsGreater( j,stop ))) {
HXLINE( 193)					goto _hx_goto_0;
            				}
HXDLIN( 193)				range->push(j);
            			}
            			_hx_goto_0:;
            		}
            		else {
HXLINE( 195)			while(true){
HXLINE( 195)				Int _hx_tmp2 = ++i;
HXDLIN( 195)				j = (start + (step * _hx_tmp2));
HXDLIN( 195)				if (!(hx::IsLess( j,stop ))) {
HXLINE( 195)					goto _hx_goto_1;
            				}
HXDLIN( 195)				range->push(j);
            			}
            			_hx_goto_1:;
            		}
HXLINE( 196)		return range;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Ints_obj,range,return )

 ::Dynamic Ints_obj::rangeIter(Int start, ::Dynamic stop,hx::Null< Int >  __o_step){
Int step = __o_step.Default(1);
            	HX_STACK_FRAME("thx.Ints","rangeIter",0x64f659f5,"thx.Ints.rangeIter","thx/Ints.hx",200,0xd1f81caf)
            	HX_STACK_ARG(start,"start")
            	HX_STACK_ARG(stop,"stop")
            	HX_STACK_ARG(step,"step")
HXLINE( 200)		return  ::thx::RangeIterator_obj::__new(start,stop,step);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Ints_obj,rangeIter,return )

::String Ints_obj::BASE;

::String Ints_obj::toString(Int value,Int base){
            	HX_STACK_FRAME("thx.Ints","toString",0x1d54c02c,"thx.Ints.toString","thx/Ints.hx",210,0xd1f81caf)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(base,"base")
HXLINE( 215)		Bool _hx_tmp;
HXDLIN( 215)		if ((base >= (int)2)) {
HXLINE( 215)			_hx_tmp = (base > ::thx::Ints_obj::BASE.length);
            		}
            		else {
HXLINE( 215)			_hx_tmp = true;
            		}
HXDLIN( 215)		if (_hx_tmp) {
HXLINE( 216)			HX_STACK_DO_THROW((((HX_("invalid base ",06,a1,02,4a) + base) + HX_(", it must be between 2 and ",f6,dd,3e,5e)) + ::thx::Ints_obj::BASE.length));
            		}
HXLINE( 217)		Bool _hx_tmp1;
HXDLIN( 217)		if ((base != (int)10)) {
HXLINE( 217)			_hx_tmp1 = (value == (int)0);
            		}
            		else {
HXLINE( 217)			_hx_tmp1 = true;
            		}
HXDLIN( 217)		if (_hx_tmp1) {
HXLINE( 218)			return (HX_("",00,00,00,00) + value);
            		}
HXLINE( 220)		HX_VARI( ::String,buf) = HX_("",00,00,00,00);
HXDLIN( 220)		HX_VAR( Int,abs);
HXLINE( 221)		if ((value < (int)0)) {
HXLINE( 220)			abs = -(value);
            		}
            		else {
HXLINE( 220)			abs = value;
            		}
HXLINE( 222)		while((abs > (int)0)){
HXLINE( 223)			::String _hx_tmp2 = ::thx::Ints_obj::BASE.charAt(hx::Mod(abs,base));
HXDLIN( 223)			buf = (_hx_tmp2 + buf);
HXLINE( 224)			abs = ::Std_obj::_hx_int(((Float)abs / (Float)base));
            		}
HXLINE( 227)		::String _hx_tmp3;
HXDLIN( 227)		if ((value < (int)0)) {
HXLINE( 227)			_hx_tmp3 = HX_("-",2d,00,00,00);
            		}
            		else {
HXLINE( 227)			_hx_tmp3 = HX_("",00,00,00,00);
            		}
HXDLIN( 227)		return (_hx_tmp3 + buf);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Ints_obj,toString,return )

::String Ints_obj::toBase(Int value,Int base){
            	HX_STACK_FRAME("thx.Ints","toBase",0xb12d62ac,"thx.Ints.toBase","thx/Ints.hx",237,0xd1f81caf)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(base,"base")
HXLINE( 237)		return ::thx::Ints_obj::toString(value,base);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Ints_obj,toBase,return )

Bool Ints_obj::toBool(Int v){
            	HX_STACK_FRAME("thx.Ints","toBool",0xb137fec5,"thx.Ints.toBool","thx/Ints.hx",243,0xd1f81caf)
            	HX_STACK_ARG(v,"v")
HXLINE( 243)		return (v != (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Ints_obj,toBool,return )

Int Ints_obj::toInt(::String s, ::Dynamic base){
            	HX_STACK_FRAME("thx.Ints","toInt",0x10e31eb4,"thx.Ints.toInt","thx/Ints.hx",249,0xd1f81caf)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(base,"base")
HXLINE( 249)		return ::thx::Ints_obj::parse(s,base);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Ints_obj,toInt,return )

Int Ints_obj::sign(Int value){
            	HX_STACK_FRAME("thx.Ints","sign",0x9cabbfbd,"thx.Ints.sign","thx/Ints.hx",255,0xd1f81caf)
            	HX_STACK_ARG(value,"value")
HXLINE( 255)		if ((value < (int)0)) {
HXLINE( 255)			return (int)-1;
            		}
            		else {
HXLINE( 255)			return (int)1;
            		}
HXDLIN( 255)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Ints_obj,sign,return )

Int Ints_obj::wrapCircular(Int v,Int max){
            	HX_STACK_FRAME("thx.Ints","wrapCircular",0x35b525c9,"thx.Ints.wrapCircular","thx/Ints.hx",260,0xd1f81caf)
            	HX_STACK_ARG(v,"v")
            	HX_STACK_ARG(max,"max")
HXLINE( 261)		hx::ModEq(v,max);
HXLINE( 262)		Bool _hx_tmp = (v < (int)0);
HXDLIN( 262)		if (_hx_tmp) {
HXLINE( 263)			hx::AddEq(v,max);
            		}
HXLINE( 264)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Ints_obj,wrapCircular,return )

 ::Dynamic Ints_obj::order;

 ::Dynamic Ints_obj::monoid;


Ints_obj::Ints_obj()
{
}

bool Ints_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"abs") ) { outValue = abs_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gcd") ) { outValue = gcd_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lcm") ) { outValue = lcm_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"max") ) { outValue = max_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"min") ) { outValue = min_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"lpad") ) { outValue = lpad_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rpad") ) { outValue = rpad_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"BASE") ) { outValue = BASE; return true; }
		if (HX_FIELD_EQ(inName,"sign") ) { outValue = sign_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clamp") ) { outValue = clamp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isOdd") ) { outValue = isOdd_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"parse") ) { outValue = parse_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"range") ) { outValue = range_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toInt") ) { outValue = toInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"order") ) { outValue = order; return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"isEven") ) { outValue = isEven_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"random") ) { outValue = random_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toBase") ) { outValue = toBase_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toBool") ) { outValue = toBool_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"monoid") ) { outValue = monoid; return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"compare") ) { outValue = compare_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"canParse") ) { outValue = canParse_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clampSym") ) { outValue = clampSym_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"rangeIter") ) { outValue = rangeIter_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"interpolate") ) { outValue = interpolate_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"wrapCircular") ) { outValue = wrapCircular_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"pattern_parse") ) { outValue = pattern_parse; return true; }
	}
	return false;
}

bool Ints_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"BASE") ) { BASE=ioValue.Cast< ::String >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"order") ) { order=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"monoid") ) { monoid=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"pattern_parse") ) { pattern_parse=ioValue.Cast<  ::EReg >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Ints_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Ints_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::EReg*/ ,(void *) &Ints_obj::pattern_parse,HX_HCSTRING("pattern_parse","\xc4","\x79","\x71","\x3d")},
	{hx::fsString,(void *) &Ints_obj::BASE,HX_HCSTRING("BASE","\x11","\xb0","\xd1","\x2b")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Ints_obj::order,HX_HCSTRING("order","\x8e","\xf0","\x20","\x35")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Ints_obj::monoid,HX_HCSTRING("monoid","\xbe","\xc6","\x6a","\xc7")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Ints_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Ints_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Ints_obj::pattern_parse,"pattern_parse");
	HX_MARK_MEMBER_NAME(Ints_obj::BASE,"BASE");
	HX_MARK_MEMBER_NAME(Ints_obj::order,"order");
	HX_MARK_MEMBER_NAME(Ints_obj::monoid,"monoid");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Ints_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Ints_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Ints_obj::pattern_parse,"pattern_parse");
	HX_VISIT_MEMBER_NAME(Ints_obj::BASE,"BASE");
	HX_VISIT_MEMBER_NAME(Ints_obj::order,"order");
	HX_VISIT_MEMBER_NAME(Ints_obj::monoid,"monoid");
};

#endif

hx::Class Ints_obj::__mClass;

static ::String Ints_obj_sStaticFields[] = {
	HX_HCSTRING("pattern_parse","\xc4","\x79","\x71","\x3d"),
	HX_HCSTRING("abs","\x72","\xf0","\x49","\x00"),
	HX_HCSTRING("canParse","\x03","\xd2","\xe8","\x2b"),
	HX_HCSTRING("clamp","\xfb","\x72","\x58","\x48"),
	HX_HCSTRING("clampSym","\xcc","\xc0","\x22","\x7f"),
	HX_HCSTRING("compare","\xa5","\x18","\x69","\x83"),
	HX_HCSTRING("gcd","\xc8","\x7e","\x4e","\x00"),
	HX_HCSTRING("interpolate","\xc1","\xd4","\x32","\x1f"),
	HX_HCSTRING("isEven","\x24","\x34","\x83","\x60"),
	HX_HCSTRING("isOdd","\xe5","\xbb","\x52","\xc1"),
	HX_HCSTRING("lpad","\x67","\x5c","\xb8","\x47"),
	HX_HCSTRING("lcm","\x16","\x4a","\x52","\x00"),
	HX_HCSTRING("rpad","\x21","\xa4","\xaf","\x4b"),
	HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"),
	HX_HCSTRING("min","\x92","\x11","\x53","\x00"),
	HX_HCSTRING("parse","\x33","\x90","\x55","\xbd"),
	HX_HCSTRING("random","\x03","\x22","\x8f","\xb7"),
	HX_HCSTRING("range","\xbd","\xa5","\x1f","\xe4"),
	HX_HCSTRING("rangeIter","\x75","\xb9","\xaa","\x00"),
	HX_HCSTRING("BASE","\x11","\xb0","\xd1","\x2b"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("toBase","\x2c","\x53","\xca","\x76"),
	HX_HCSTRING("toBool","\x45","\xef","\xd4","\x76"),
	HX_HCSTRING("toInt","\x34","\xbe","\x11","\x14"),
	HX_HCSTRING("sign","\x3d","\x90","\x53","\x4c"),
	HX_HCSTRING("wrapCircular","\x49","\x76","\x61","\x02"),
	HX_HCSTRING("order","\x8e","\xf0","\x20","\x35"),
	HX_HCSTRING("monoid","\xbe","\xc6","\x6a","\xc7"),
	::String(null())
};

void Ints_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.Ints","\xee","\x60","\x6a","\x77");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Ints_obj::__GetStatic;
	__mClass->mSetStaticField = &Ints_obj::__SetStatic;
	__mClass->mMarkFunc = Ints_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Ints_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Ints_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Ints_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Ints_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Ints_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Ints_obj::__boot()
{
{
            	HX_STACK_FRAME("thx.Ints","boot",0x9173b3b2,"thx.Ints.boot","thx/Ints.hx",13,0xd1f81caf)
HXLINE(  13)		pattern_parse =  ::EReg_obj::__new(HX_("^[ \t\r\n]*[+-]?(\\d+|0x[0-9A-F]+)",dc,90,01,c6),HX_("i",69,00,00,00));
            	}
{
            	HX_STACK_FRAME("thx.Ints","boot",0x9173b3b2,"thx.Ints.boot","thx/Ints.hx",204,0xd1f81caf)
HXLINE( 204)		BASE = HX_("0123456789abcdefghijklmnopqrstuvwxyz",b2,43,15,83);
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		::hx::EnumBase _hx_run(Int i0,Int i1){
            			HX_STACK_FRAME("thx.Ints","boot",0x9173b3b2,"thx.Ints.boot","thx/Ints.hx",268,0xd1f81caf)
            			HX_STACK_ARG(i0,"i0")
            			HX_STACK_ARG(i1,"i1")
HXLINE( 268)			if ((i0 > i1)) {
HXLINE( 268)				return ::thx::OrderingImpl_obj::GT_dyn();
            			}
            			else {
HXLINE( 268)				if ((i0 == i1)) {
HXLINE( 268)					return ::thx::OrderingImpl_obj::EQ_dyn();
            				}
            				else {
HXLINE( 268)					return ::thx::OrderingImpl_obj::LT_dyn();
            				}
            			}
HXDLIN( 268)			return null();
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.Ints","boot",0x9173b3b2,"thx.Ints.boot","thx/Ints.hx",268,0xd1f81caf)
HXLINE( 268)		order =  ::Dynamic(new _hx_Closure_0());
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		Int _hx_run(Int a,Int b){
            			HX_STACK_FRAME("thx.Ints","boot",0x9173b3b2,"thx.Ints.boot","thx/Ints.hx",271,0xd1f81caf)
            			HX_STACK_ARG(a,"a")
            			HX_STACK_ARG(b,"b")
HXLINE( 271)			return (a + b);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.Ints","boot",0x9173b3b2,"thx.Ints.boot","thx/Ints.hx",271,0xd1f81caf)
HXLINE( 271)		monoid =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("append",da,e1,d3,8f), ::Dynamic(new _hx_Closure_0()))
            			->setFixed(1,HX_("zero",28,0f,f1,50),(int)0));
            	}
}

} // end namespace thx
