// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_utest_ui_common_HeaderDisplayMode
#include <utest/ui/common/HeaderDisplayMode.h>
#endif
namespace utest{
namespace ui{
namespace common{

::utest::ui::common::HeaderDisplayMode HeaderDisplayMode_obj::AlwaysShowHeader;

::utest::ui::common::HeaderDisplayMode HeaderDisplayMode_obj::NeverShowHeader;

::utest::ui::common::HeaderDisplayMode HeaderDisplayMode_obj::ShowHeaderWithResults;

bool HeaderDisplayMode_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	if (inName==HX_("AlwaysShowHeader",39,d6,6d,ae)) { outValue = HeaderDisplayMode_obj::AlwaysShowHeader; return true; }
	if (inName==HX_("NeverShowHeader",f6,1f,7e,0a)) { outValue = HeaderDisplayMode_obj::NeverShowHeader; return true; }
	if (inName==HX_("ShowHeaderWithResults",26,b5,10,db)) { outValue = HeaderDisplayMode_obj::ShowHeaderWithResults; return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(HeaderDisplayMode_obj)

int HeaderDisplayMode_obj::__FindIndex(::String inName)
{
	if (inName==HX_("AlwaysShowHeader",39,d6,6d,ae)) return 0;
	if (inName==HX_("NeverShowHeader",f6,1f,7e,0a)) return 1;
	if (inName==HX_("ShowHeaderWithResults",26,b5,10,db)) return 2;
	return super::__FindIndex(inName);
}

int HeaderDisplayMode_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("AlwaysShowHeader",39,d6,6d,ae)) return 0;
	if (inName==HX_("NeverShowHeader",f6,1f,7e,0a)) return 0;
	if (inName==HX_("ShowHeaderWithResults",26,b5,10,db)) return 0;
	return super::__FindArgCount(inName);
}

hx::Val HeaderDisplayMode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	if (inName==HX_("AlwaysShowHeader",39,d6,6d,ae)) return AlwaysShowHeader;
	if (inName==HX_("NeverShowHeader",f6,1f,7e,0a)) return NeverShowHeader;
	if (inName==HX_("ShowHeaderWithResults",26,b5,10,db)) return ShowHeaderWithResults;
	return super::__Field(inName,inCallProp);
}

static ::String HeaderDisplayMode_obj_sStaticFields[] = {
	HX_("AlwaysShowHeader",39,d6,6d,ae),
	HX_("NeverShowHeader",f6,1f,7e,0a),
	HX_("ShowHeaderWithResults",26,b5,10,db),
	::String(null())
};

static void HeaderDisplayMode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(HeaderDisplayMode_obj::AlwaysShowHeader,"AlwaysShowHeader");
	HX_MARK_MEMBER_NAME(HeaderDisplayMode_obj::NeverShowHeader,"NeverShowHeader");
	HX_MARK_MEMBER_NAME(HeaderDisplayMode_obj::ShowHeaderWithResults,"ShowHeaderWithResults");
};

#ifdef HXCPP_VISIT_ALLOCS
static void HeaderDisplayMode_obj_sVisitStatic(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(HeaderDisplayMode_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(HeaderDisplayMode_obj::AlwaysShowHeader,"AlwaysShowHeader");
	HX_VISIT_MEMBER_NAME(HeaderDisplayMode_obj::NeverShowHeader,"NeverShowHeader");
	HX_VISIT_MEMBER_NAME(HeaderDisplayMode_obj::ShowHeaderWithResults,"ShowHeaderWithResults");
};
#endif

hx::Class HeaderDisplayMode_obj::__mClass;

Dynamic __Create_HeaderDisplayMode_obj() { return new HeaderDisplayMode_obj; }

void HeaderDisplayMode_obj::__register()
{

hx::Static(__mClass) = hx::_hx_RegisterClass(HX_HCSTRING("utest.ui.common.HeaderDisplayMode","\xc8","\x55","\xf8","\xb1"), hx::TCanCast< HeaderDisplayMode_obj >,HeaderDisplayMode_obj_sStaticFields,0,
	&__Create_HeaderDisplayMode_obj, &__Create,
	&super::__SGetClass(), &CreateHeaderDisplayMode_obj, HeaderDisplayMode_obj_sMarkStatics
#ifdef HXCPP_VISIT_ALLOCS
    , HeaderDisplayMode_obj_sVisitStatic
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &HeaderDisplayMode_obj::__GetStatic;
}

void HeaderDisplayMode_obj::__boot()
{
AlwaysShowHeader = hx::CreateEnum< HeaderDisplayMode_obj >(HX_HCSTRING("AlwaysShowHeader","\x39","\xd6","\x6d","\xae"),0,0);
NeverShowHeader = hx::CreateEnum< HeaderDisplayMode_obj >(HX_HCSTRING("NeverShowHeader","\xf6","\x1f","\x7e","\x0a"),1,0);
ShowHeaderWithResults = hx::CreateEnum< HeaderDisplayMode_obj >(HX_HCSTRING("ShowHeaderWithResults","\x26","\xb5","\x10","\xdb"),2,0);
}


} // end namespace utest
} // end namespace ui
} // end namespace common
