// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_utest_TestFixture
#include <utest/TestFixture.h>
#endif

namespace utest{

void TestFixture_obj::__construct( ::Dynamic target,::String method,::String setup,::String teardown){
            	HX_STACK_FRAME("utest.TestFixture","new",0x0fdcb2c2,"utest.TestFixture.new","utest/TestFixture.hx",8,0x8992faaf)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(method,"method")
            	HX_STACK_ARG(setup,"setup")
            	HX_STACK_ARG(teardown,"teardown")
HXLINE(   9)		this->target = target;
HXLINE(  10)		this->method = method;
HXLINE(  11)		this->setup = setup;
HXLINE(  12)		this->teardown = teardown;
            	}

Dynamic TestFixture_obj::__CreateEmpty() { return new TestFixture_obj; }

hx::ObjectPtr< TestFixture_obj > TestFixture_obj::__new( ::Dynamic target,::String method,::String setup,::String teardown)
{
	hx::ObjectPtr< TestFixture_obj > _hx_result = new TestFixture_obj();
	_hx_result->__construct(target,method,setup,teardown);
	return _hx_result;
}

Dynamic TestFixture_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestFixture_obj > _hx_result = new TestFixture_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

void TestFixture_obj::checkMethod(::String name,::String arg){
            	HX_STACK_FRAME("utest.TestFixture","checkMethod",0xa211de2b,"utest.TestFixture.checkMethod","utest/TestFixture.hx",15,0x8992faaf)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
            	HX_STACK_ARG(arg,"arg")
HXLINE(  16)		HX_VARI(  ::Dynamic,field) = ::Reflect_obj::field(this->target,name);
HXLINE(  17)		if (hx::IsNull( field )) {
HXLINE(  17)			HX_STACK_DO_THROW((((arg + HX_(" function ",e8,05,52,bd)) + name) + HX_(" is not a field of target",b2,3b,34,90)));
            		}
HXLINE(  18)		Bool _hx_tmp = !(::Reflect_obj::isFunction(field));
HXDLIN(  18)		if (_hx_tmp) {
HXLINE(  18)			HX_STACK_DO_THROW((((arg + HX_(" function ",e8,05,52,bd)) + name) + HX_(" is not a function",fa,f7,c7,36)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TestFixture_obj,checkMethod,(void))


TestFixture_obj::TestFixture_obj()
{
}

void TestFixture_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TestFixture);
	HX_MARK_MEMBER_NAME(target,"target");
	HX_MARK_MEMBER_NAME(method,"method");
	HX_MARK_MEMBER_NAME(setup,"setup");
	HX_MARK_MEMBER_NAME(teardown,"teardown");
	HX_MARK_END_CLASS();
}

void TestFixture_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(target,"target");
	HX_VISIT_MEMBER_NAME(method,"method");
	HX_VISIT_MEMBER_NAME(setup,"setup");
	HX_VISIT_MEMBER_NAME(teardown,"teardown");
}

hx::Val TestFixture_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"setup") ) { return hx::Val( setup); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { return hx::Val( target); }
		if (HX_FIELD_EQ(inName,"method") ) { return hx::Val( method); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"teardown") ) { return hx::Val( teardown); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"checkMethod") ) { return hx::Val( checkMethod_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestFixture_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"setup") ) { setup=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { target=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"method") ) { method=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"teardown") ) { teardown=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestFixture_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("target","\x51","\xf3","\xec","\x86"));
	outFields->push(HX_HCSTRING("method","\xe1","\xf6","\x5a","\x09"));
	outFields->push(HX_HCSTRING("setup","\x7d","\xae","\x2f","\x7a"));
	outFields->push(HX_HCSTRING("teardown","\x04","\xaa","\x8d","\x01"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestFixture_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TestFixture_obj,target),HX_HCSTRING("target","\x51","\xf3","\xec","\x86")},
	{hx::fsString,(int)offsetof(TestFixture_obj,method),HX_HCSTRING("method","\xe1","\xf6","\x5a","\x09")},
	{hx::fsString,(int)offsetof(TestFixture_obj,setup),HX_HCSTRING("setup","\x7d","\xae","\x2f","\x7a")},
	{hx::fsString,(int)offsetof(TestFixture_obj,teardown),HX_HCSTRING("teardown","\x04","\xaa","\x8d","\x01")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestFixture_obj_sStaticStorageInfo = 0;
#endif

static ::String TestFixture_obj_sMemberFields[] = {
	HX_HCSTRING("target","\x51","\xf3","\xec","\x86"),
	HX_HCSTRING("method","\xe1","\xf6","\x5a","\x09"),
	HX_HCSTRING("setup","\x7d","\xae","\x2f","\x7a"),
	HX_HCSTRING("teardown","\x04","\xaa","\x8d","\x01"),
	HX_HCSTRING("checkMethod","\xc9","\xc9","\x6c","\xeb"),
	::String(null()) };

static void TestFixture_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestFixture_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestFixture_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestFixture_obj::__mClass,"__mClass");
};

#endif

hx::Class TestFixture_obj::__mClass;

void TestFixture_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("utest.TestFixture","\xd0","\xe9","\x1f","\x55");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestFixture_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestFixture_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestFixture_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestFixture_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestFixture_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestFixture_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace utest
