// Generated by Haxe 3.3.0
#ifndef INCLUDED_utest_Notifier
#define INCLUDED_utest_Notifier

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(utest,Notifier)

namespace utest{


class HXCPP_CLASS_ATTRIBUTES Notifier_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Notifier_obj OBJ_;
		Notifier_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="utest.Notifier")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"utest.Notifier"); }
		static hx::ObjectPtr< Notifier_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Notifier_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("Notifier","\x86","\xcf","\x61","\x8f"); }

		static void stop();
		static ::Dynamic stop_dyn();

		::Array< ::Dynamic> handlers;
		 ::Dynamic add( ::Dynamic h);
		::Dynamic add_dyn();

		 ::Dynamic remove( ::Dynamic h);
		::Dynamic remove_dyn();

		void clear();
		::Dynamic clear_dyn();

		Bool dispatch();
		::Dynamic dispatch_dyn();

		Bool has();
		::Dynamic has_dyn();

};

} // end namespace utest

#endif /* INCLUDED_utest_Notifier */ 
