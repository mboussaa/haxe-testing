// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED__List_ListNode
#include <_List/ListNode.h>
#endif
#ifndef INCLUDED_utest_Assertation
#include <utest/Assertation.h>
#endif
#ifndef INCLUDED_utest_Dispatcher
#include <utest/Dispatcher.h>
#endif
#ifndef INCLUDED_utest_Notifier
#include <utest/Notifier.h>
#endif
#ifndef INCLUDED_utest_Runner
#include <utest/Runner.h>
#endif
#ifndef INCLUDED_utest_TestResult
#include <utest/TestResult.h>
#endif
#ifndef INCLUDED_utest_ui_common_ClassResult
#include <utest/ui/common/ClassResult.h>
#endif
#ifndef INCLUDED_utest_ui_common_FixtureResult
#include <utest/ui/common/FixtureResult.h>
#endif
#ifndef INCLUDED_utest_ui_common_PackageResult
#include <utest/ui/common/PackageResult.h>
#endif
#ifndef INCLUDED_utest_ui_common_ResultAggregator
#include <utest/ui/common/ResultAggregator.h>
#endif

namespace utest{
namespace ui{
namespace common{

void ResultAggregator_obj::__construct( ::utest::Runner runner,hx::Null< Bool >  __o_flattenPackage){
Bool flattenPackage = __o_flattenPackage.Default(false);
            	HX_STACK_FRAME("utest.ui.common.ResultAggregator","new",0xd3458728,"utest.ui.common.ResultAggregator.new","utest/ui/common/ResultAggregator.hx",16,0x88513887)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(runner,"runner")
            	HX_STACK_ARG(flattenPackage,"flattenPackage")
HXLINE(  17)		if (hx::IsNull( runner )) {
HXLINE(  17)			HX_STACK_DO_THROW(HX_("runner argument is null",0a,22,9d,29));
            		}
HXLINE(  18)		this->flattenPackage = flattenPackage;
HXLINE(  19)		this->runner = runner;
HXLINE(  20)		runner->onStart->add(this->start_dyn());
HXLINE(  21)		runner->onProgress->add(this->progress_dyn());
HXLINE(  22)		runner->onComplete->add(this->complete_dyn());
HXLINE(  24)		this->onStart =  ::utest::Notifier_obj::__new();
HXLINE(  25)		this->onComplete =  ::utest::Dispatcher_obj::__new();
HXLINE(  26)		this->onProgress =  ::utest::Dispatcher_obj::__new();
            	}

Dynamic ResultAggregator_obj::__CreateEmpty() { return new ResultAggregator_obj; }

hx::ObjectPtr< ResultAggregator_obj > ResultAggregator_obj::__new( ::utest::Runner runner,hx::Null< Bool >  __o_flattenPackage)
{
	hx::ObjectPtr< ResultAggregator_obj > _hx_result = new ResultAggregator_obj();
	_hx_result->__construct(runner,__o_flattenPackage);
	return _hx_result;
}

Dynamic ResultAggregator_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ResultAggregator_obj > _hx_result = new ResultAggregator_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

void ResultAggregator_obj::start( ::utest::Runner runner){
            	HX_STACK_FRAME("utest.ui.common.ResultAggregator","start",0x3fee6d2a,"utest.ui.common.ResultAggregator.start","utest/ui/common/ResultAggregator.hx",29,0x88513887)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(runner,"runner")
HXLINE(  30)		this->root =  ::utest::ui::common::PackageResult_obj::__new(null());
HXLINE(  31)		this->onStart->dispatch();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ResultAggregator_obj,start,(void))

 ::utest::ui::common::PackageResult ResultAggregator_obj::getOrCreatePackage(::String pack,Bool flat, ::utest::ui::common::PackageResult ref){
            	HX_STACK_FRAME("utest.ui.common.ResultAggregator","getOrCreatePackage",0x6dfe8309,"utest.ui.common.ResultAggregator.getOrCreatePackage","utest/ui/common/ResultAggregator.hx",34,0x88513887)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pack,"pack")
            	HX_STACK_ARG(flat,"flat")
            	HX_STACK_ARG(ref,"ref")
HXLINE(  35)		Bool _hx_tmp = hx::IsNull( ref );
HXDLIN(  35)		if (_hx_tmp) {
HXLINE(  35)			ref = this->root;
            		}
HXLINE(  36)		Bool _hx_tmp1;
HXDLIN(  36)		if (hx::IsNotNull( pack )) {
HXLINE(  36)			_hx_tmp1 = (pack == HX_("",00,00,00,00));
            		}
            		else {
HXLINE(  36)			_hx_tmp1 = true;
            		}
HXDLIN(  36)		if (_hx_tmp1) {
HXLINE(  36)			return ref;
            		}
HXLINE(  37)		if (flat) {
HXLINE(  38)			Bool _hx_tmp2 = ref->existsPackage(pack);
HXDLIN(  38)			if (_hx_tmp2) {
HXLINE(  39)				return ref->getPackage(pack);
            			}
HXLINE(  40)			HX_VARI(  ::utest::ui::common::PackageResult,p) =  ::utest::ui::common::PackageResult_obj::__new(pack);
HXLINE(  41)			ref->addPackage(p);
HXLINE(  42)			return p;
            		}
            		else {
HXLINE(  44)			HX_VARI( ::Array< ::String >,parts) = pack.split(HX_(".",2e,00,00,00));
HXLINE(  45)			{
HXLINE(  45)				HX_VARI( Int,_g) = (int)0;
HXDLIN(  45)				while((_g < parts->length)){
HXLINE(  45)					HX_VARI( ::String,part) = parts->__get(_g);
HXDLIN(  45)					++_g;
HXLINE(  46)					ref = this->getOrCreatePackage(part,true,ref);
            				}
            			}
HXLINE(  48)			return ref;
            		}
HXLINE(  37)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(ResultAggregator_obj,getOrCreatePackage,return )

 ::utest::ui::common::ClassResult ResultAggregator_obj::getOrCreateClass( ::utest::ui::common::PackageResult pack,::String cls,::String setup,::String teardown){
            	HX_STACK_FRAME("utest.ui.common.ResultAggregator","getOrCreateClass",0x00f9d8fb,"utest.ui.common.ResultAggregator.getOrCreateClass","utest/ui/common/ResultAggregator.hx",52,0x88513887)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pack,"pack")
            	HX_STACK_ARG(cls,"cls")
            	HX_STACK_ARG(setup,"setup")
            	HX_STACK_ARG(teardown,"teardown")
HXLINE(  53)		Bool _hx_tmp = pack->existsClass(cls);
HXDLIN(  53)		if (_hx_tmp) {
HXLINE(  53)			return pack->getClass(cls);
            		}
HXLINE(  54)		HX_VARI(  ::utest::ui::common::ClassResult,c) =  ::utest::ui::common::ClassResult_obj::__new(cls,setup,teardown);
HXLINE(  55)		pack->addClass(c);
HXLINE(  56)		return c;
            	}


HX_DEFINE_DYNAMIC_FUNC4(ResultAggregator_obj,getOrCreateClass,return )

 ::utest::ui::common::FixtureResult ResultAggregator_obj::createFixture( ::utest::TestResult result){
            	HX_STACK_FRAME("utest.ui.common.ResultAggregator","createFixture",0xf29994f5,"utest.ui.common.ResultAggregator.createFixture","utest/ui/common/ResultAggregator.hx",59,0x88513887)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(result,"result")
HXLINE(  60)		HX_VARI(  ::utest::ui::common::FixtureResult,f) =  ::utest::ui::common::FixtureResult_obj::__new(result->method);
HXLINE(  61)		{
HXLINE(  61)			HX_VARI(  ::_List::ListNode,_g_head) = result->assertations->h;
HXDLIN(  61)			while(hx::IsNotNull( _g_head )){
HXLINE(  61)				HX_VARI( ::hx::EnumBase,val) = _g_head->item;
HXLINE(  59)				_g_head = _g_head->next;
HXLINE(  62)				f->add(val);
            			}
            		}
HXLINE(  63)		return f;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ResultAggregator_obj,createFixture,return )

void ResultAggregator_obj::progress( ::Dynamic e){
            	HX_STACK_FRAME("utest.ui.common.ResultAggregator","progress",0x54a5abe5,"utest.ui.common.ResultAggregator.progress","utest/ui/common/ResultAggregator.hx",66,0x88513887)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(e,"e")
HXLINE(  67)		this->root->addResult( ::Dynamic(e->__Field(HX_("result",dd,68,84,08),hx::paccDynamic)),this->flattenPackage);
HXLINE(  68)		this->onProgress->dispatch(e);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ResultAggregator_obj,progress,(void))

void ResultAggregator_obj::complete( ::utest::Runner runner){
            	HX_STACK_FRAME("utest.ui.common.ResultAggregator","complete",0x4e42b4f1,"utest.ui.common.ResultAggregator.complete","utest/ui/common/ResultAggregator.hx",72,0x88513887)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(runner,"runner")
HXLINE(  72)		this->onComplete->dispatch(this->root);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ResultAggregator_obj,complete,(void))


ResultAggregator_obj::ResultAggregator_obj()
{
}

void ResultAggregator_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ResultAggregator);
	HX_MARK_MEMBER_NAME(runner,"runner");
	HX_MARK_MEMBER_NAME(flattenPackage,"flattenPackage");
	HX_MARK_MEMBER_NAME(root,"root");
	HX_MARK_MEMBER_NAME(onStart,"onStart");
	HX_MARK_MEMBER_NAME(onComplete,"onComplete");
	HX_MARK_MEMBER_NAME(onProgress,"onProgress");
	HX_MARK_END_CLASS();
}

void ResultAggregator_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(runner,"runner");
	HX_VISIT_MEMBER_NAME(flattenPackage,"flattenPackage");
	HX_VISIT_MEMBER_NAME(root,"root");
	HX_VISIT_MEMBER_NAME(onStart,"onStart");
	HX_VISIT_MEMBER_NAME(onComplete,"onComplete");
	HX_VISIT_MEMBER_NAME(onProgress,"onProgress");
}

hx::Val ResultAggregator_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { return hx::Val( root); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"runner") ) { return hx::Val( runner); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onStart") ) { return hx::Val( onStart); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"progress") ) { return hx::Val( progress_dyn()); }
		if (HX_FIELD_EQ(inName,"complete") ) { return hx::Val( complete_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"onComplete") ) { return hx::Val( onComplete); }
		if (HX_FIELD_EQ(inName,"onProgress") ) { return hx::Val( onProgress); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"createFixture") ) { return hx::Val( createFixture_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"flattenPackage") ) { return hx::Val( flattenPackage); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getOrCreateClass") ) { return hx::Val( getOrCreateClass_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getOrCreatePackage") ) { return hx::Val( getOrCreatePackage_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ResultAggregator_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { root=inValue.Cast<  ::utest::ui::common::PackageResult >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"runner") ) { runner=inValue.Cast<  ::utest::Runner >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onStart") ) { onStart=inValue.Cast<  ::utest::Notifier >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"onComplete") ) { onComplete=inValue.Cast<  ::utest::Dispatcher >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onProgress") ) { onProgress=inValue.Cast<  ::utest::Dispatcher >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"flattenPackage") ) { flattenPackage=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ResultAggregator_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("runner","\xf0","\x49","\x9a","\x3b"));
	outFields->push(HX_HCSTRING("flattenPackage","\x22","\x68","\x41","\x4a"));
	outFields->push(HX_HCSTRING("root","\x22","\xee","\xae","\x4b"));
	outFields->push(HX_HCSTRING("onStart","\xc3","\x12","\x49","\x1a"));
	outFields->push(HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d"));
	outFields->push(HX_HCSTRING("onProgress","\xec","\xcb","\xe1","\x63"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ResultAggregator_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::utest::Runner*/ ,(int)offsetof(ResultAggregator_obj,runner),HX_HCSTRING("runner","\xf0","\x49","\x9a","\x3b")},
	{hx::fsBool,(int)offsetof(ResultAggregator_obj,flattenPackage),HX_HCSTRING("flattenPackage","\x22","\x68","\x41","\x4a")},
	{hx::fsObject /*::utest::ui::common::PackageResult*/ ,(int)offsetof(ResultAggregator_obj,root),HX_HCSTRING("root","\x22","\xee","\xae","\x4b")},
	{hx::fsObject /*::utest::Notifier*/ ,(int)offsetof(ResultAggregator_obj,onStart),HX_HCSTRING("onStart","\xc3","\x12","\x49","\x1a")},
	{hx::fsObject /*::utest::Dispatcher*/ ,(int)offsetof(ResultAggregator_obj,onComplete),HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d")},
	{hx::fsObject /*::utest::Dispatcher*/ ,(int)offsetof(ResultAggregator_obj,onProgress),HX_HCSTRING("onProgress","\xec","\xcb","\xe1","\x63")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ResultAggregator_obj_sStaticStorageInfo = 0;
#endif

static ::String ResultAggregator_obj_sMemberFields[] = {
	HX_HCSTRING("runner","\xf0","\x49","\x9a","\x3b"),
	HX_HCSTRING("flattenPackage","\x22","\x68","\x41","\x4a"),
	HX_HCSTRING("root","\x22","\xee","\xae","\x4b"),
	HX_HCSTRING("onStart","\xc3","\x12","\x49","\x1a"),
	HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d"),
	HX_HCSTRING("onProgress","\xec","\xcb","\xe1","\x63"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("getOrCreatePackage","\xd1","\x58","\xf3","\x6e"),
	HX_HCSTRING("getOrCreateClass","\xc3","\x2c","\xdc","\x45"),
	HX_HCSTRING("createFixture","\x2d","\x94","\x64","\xda"),
	HX_HCSTRING("progress","\xad","\xf7","\x2a","\x86"),
	HX_HCSTRING("complete","\xb9","\x00","\xc8","\x7f"),
	::String(null()) };

static void ResultAggregator_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ResultAggregator_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ResultAggregator_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ResultAggregator_obj::__mClass,"__mClass");
};

#endif

hx::Class ResultAggregator_obj::__mClass;

void ResultAggregator_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("utest.ui.common.ResultAggregator","\x36","\x13","\x61","\x3b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ResultAggregator_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ResultAggregator_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ResultAggregator_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ResultAggregator_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ResultAggregator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ResultAggregator_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace utest
} // end namespace ui
} // end namespace common
