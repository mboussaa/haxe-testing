// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_speedTest_TestArrayFill
#include <thx/speedTest/TestArrayFill.h>
#endif

namespace thx{
namespace speedTest{

void TestArrayFill_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.speedTest.TestArrayFill","new",0xd95dc2bd,"thx.speedTest.TestArrayFill.new","thx/speedTest/TestArrayFill.hx",8,0xd2163295)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(   8)		this->x = i;
            	}

Dynamic TestArrayFill_obj::__CreateEmpty() { return new TestArrayFill_obj; }

hx::ObjectPtr< TestArrayFill_obj > TestArrayFill_obj::__new(Int i)
{
	hx::ObjectPtr< TestArrayFill_obj > _hx_result = new TestArrayFill_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestArrayFill_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestArrayFill_obj > _hx_result = new TestArrayFill_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestArrayFill_obj::testInitialisation(){
            	HX_STACK_FRAME("thx.speedTest.TestArrayFill","testInitialisation",0x8e84d4bc,"thx.speedTest.TestArrayFill.testInitialisation","thx/speedTest/TestArrayFill.hx",11,0xd2163295)
            	HX_STACK_THIS(this)
HXLINE(  12)		HX_VARI( ::Array< Int >,x) = ::Array_obj< Int >::__new(0);
HXLINE(  19)		{
HXLINE(  19)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  19)			while((_g < (int)10000000)){
HXLINE(  19)				HX_VARI( Int,i) = _g++;
HXLINE(  20)				x[i] = (int)0;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrayFill_obj,testInitialisation,(void))


TestArrayFill_obj::TestArrayFill_obj()
{
}

hx::Val TestArrayFill_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"testInitialisation") ) { return hx::Val( testInitialisation_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestArrayFill_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestArrayFill_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestArrayFill_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestArrayFill_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestArrayFill_obj_sStaticStorageInfo = 0;
#endif

static ::String TestArrayFill_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testInitialisation","\x79","\x96","\x0f","\xf2"),
	::String(null()) };

static void TestArrayFill_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestArrayFill_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestArrayFill_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestArrayFill_obj::__mClass,"__mClass");
};

#endif

hx::Class TestArrayFill_obj::__mClass;

void TestArrayFill_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.speedTest.TestArrayFill","\x4b","\xa0","\xc4","\xbc");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestArrayFill_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestArrayFill_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestArrayFill_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestArrayFill_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestArrayFill_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestArrayFill_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace speedTest
