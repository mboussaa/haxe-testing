// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif

namespace haxe{
namespace ds{

void EnumValueMap_obj::__construct(){
            	HX_STACK_FRAME("haxe.ds.EnumValueMap","new",0x9ce29655,"haxe.ds.EnumValueMap.new","/usr/lib/haxe/std/haxe/ds/EnumValueMap.hx",31,0x9506461a)
            	HX_STACK_THIS(this)
HXLINE(  31)		super::__construct();
            	}

Dynamic EnumValueMap_obj::__CreateEmpty() { return new EnumValueMap_obj; }

hx::ObjectPtr< EnumValueMap_obj > EnumValueMap_obj::__new()
{
	hx::ObjectPtr< EnumValueMap_obj > _hx_result = new EnumValueMap_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic EnumValueMap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< EnumValueMap_obj > _hx_result = new EnumValueMap_obj();
	_hx_result->__construct();
	return _hx_result;
}

static ::haxe::IMap_obj _hx_haxe_ds_EnumValueMap__hx_haxe_IMap= {
	(  ::Dynamic (hx::Object::*)( ::Dynamic))&::haxe::ds::EnumValueMap_obj::get,
	( void (hx::Object::*)( ::Dynamic, ::Dynamic))&::haxe::ds::EnumValueMap_obj::set,
	( Bool (hx::Object::*)( ::Dynamic))&::haxe::ds::EnumValueMap_obj::exists,
	( Bool (hx::Object::*)( ::Dynamic))&::haxe::ds::EnumValueMap_obj::remove,
	(  ::Dynamic (hx::Object::*)())&::haxe::ds::EnumValueMap_obj::keys,
	(  ::Dynamic (hx::Object::*)())&::haxe::ds::EnumValueMap_obj::iterator,
};

void *EnumValueMap_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x09c2bd39: return &_hx_haxe_ds_EnumValueMap__hx_haxe_IMap;
	}
	return super::_hx_getInterface(inHash);
}

Int EnumValueMap_obj::compare( ::Dynamic _tmp_k1, ::Dynamic _tmp_k2){
            	HX_STACK_FRAME("haxe.ds.EnumValueMap","compare",0x806a7d1a,"haxe.ds.EnumValueMap.compare","/usr/lib/haxe/std/haxe/ds/EnumValueMap.hx",33,0x9506461a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(_tmp_k1,"_tmp_k1")
            	HX_STACK_ARG(_tmp_k2,"_tmp_k2")
HXLINE(  34)		HX_VARI(  ::Dynamic,k1) = _tmp_k1;
HXDLIN(  34)		HX_VARI(  ::Dynamic,k2) = _tmp_k2;
HXDLIN(  34)		Int _hx_tmp = ( ( ::hx::EnumBase)(k1) )->_hx_getIndex();
HXDLIN(  34)		Int _hx_tmp1 = ( ( ::hx::EnumBase)(k2) )->_hx_getIndex();
HXDLIN(  34)		HX_VARI( Int,d) = (_hx_tmp - _hx_tmp1);
HXLINE(  35)		if ((d != (int)0)) {
HXLINE(  35)			return d;
            		}
HXLINE(  36)		HX_VARI( ::cpp::VirtualArray,p1) = ::Type_obj::enumParameters(k1);
HXLINE(  37)		HX_VARI( ::cpp::VirtualArray,p2) = ::Type_obj::enumParameters(k2);
HXLINE(  38)		Bool _hx_tmp2;
HXDLIN(  38)		if ((p1->get_length() == (int)0)) {
HXLINE(  38)			_hx_tmp2 = (p2->get_length() == (int)0);
            		}
            		else {
HXLINE(  38)			_hx_tmp2 = false;
            		}
HXDLIN(  38)		if (_hx_tmp2) {
HXLINE(  38)			return (int)0;
            		}
HXLINE(  39)		return this->compareArgs(p1,p2);
            	}


Int EnumValueMap_obj::compareArgs(::cpp::VirtualArray a1,::cpp::VirtualArray a2){
            	HX_STACK_FRAME("haxe.ds.EnumValueMap","compareArgs",0x37a5cb97,"haxe.ds.EnumValueMap.compareArgs","/usr/lib/haxe/std/haxe/ds/EnumValueMap.hx",42,0x9506461a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a1,"a1")
            	HX_STACK_ARG(a2,"a2")
HXLINE(  43)		HX_VARI( Int,ld) = (a1->get_length() - a2->get_length());
HXLINE(  44)		if ((ld != (int)0)) {
HXLINE(  44)			return ld;
            		}
HXLINE(  45)		{
HXLINE(  45)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  45)			HX_VARI( Int,_g) = a1->get_length();
HXDLIN(  45)			while((_g1 < _g)){
HXLINE(  45)				HX_VARI( Int,i) = _g1++;
HXLINE(  46)				HX_VARI( Int,d) = this->compareArg(a1->__get(i),a2->__get(i));
HXLINE(  47)				if ((d != (int)0)) {
HXLINE(  47)					return d;
            				}
            			}
            		}
HXLINE(  49)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(EnumValueMap_obj,compareArgs,return )

Int EnumValueMap_obj::compareArg( ::Dynamic v1, ::Dynamic v2){
            	HX_STACK_FRAME("haxe.ds.EnumValueMap","compareArg",0xcee2e55c,"haxe.ds.EnumValueMap.compareArg","/usr/lib/haxe/std/haxe/ds/EnumValueMap.hx",53,0x9506461a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(v1,"v1")
            	HX_STACK_ARG(v2,"v2")
HXLINE(  53)		Bool _hx_tmp;
HXDLIN(  53)		Bool _hx_tmp1 = ::Reflect_obj::isEnumValue(v1);
HXDLIN(  53)		if (_hx_tmp1) {
HXLINE(  53)			_hx_tmp = ::Reflect_obj::isEnumValue(v2);
            		}
            		else {
HXLINE(  53)			_hx_tmp = false;
            		}
HXDLIN(  53)		if (_hx_tmp) {
HXLINE(  53)			return this->compare(v1,v2);
            		}
            		else {
HXLINE(  55)			Bool _hx_tmp2;
HXDLIN(  55)			Bool _hx_tmp3 = ::Std_obj::is(v1,hx::ArrayBase::__mClass);
HXDLIN(  55)			if (_hx_tmp3) {
HXLINE(  55)				_hx_tmp2 = ::Std_obj::is(v2,hx::ArrayBase::__mClass);
            			}
            			else {
HXLINE(  55)				_hx_tmp2 = false;
            			}
HXDLIN(  55)			if (_hx_tmp2) {
HXLINE(  53)				return this->compareArgs(v1,v2);
            			}
            			else {
HXLINE(  53)				return ::Reflect_obj::compare(v1,v2);
            			}
            		}
HXDLIN(  53)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(EnumValueMap_obj,compareArg,return )


EnumValueMap_obj::EnumValueMap_obj()
{
}

hx::Val EnumValueMap_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"compare") ) { return hx::Val( compare_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"compareArg") ) { return hx::Val( compareArg_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"compareArgs") ) { return hx::Val( compareArgs_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *EnumValueMap_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *EnumValueMap_obj_sStaticStorageInfo = 0;
#endif

static ::String EnumValueMap_obj_sMemberFields[] = {
	HX_HCSTRING("compare","\xa5","\x18","\x69","\x83"),
	HX_HCSTRING("compareArgs","\xa2","\x88","\x40","\xb6"),
	HX_HCSTRING("compareArg","\xb1","\xd2","\x97","\x0e"),
	::String(null()) };

static void EnumValueMap_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(EnumValueMap_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void EnumValueMap_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(EnumValueMap_obj::__mClass,"__mClass");
};

#endif

hx::Class EnumValueMap_obj::__mClass;

void EnumValueMap_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxe.ds.EnumValueMap","\xe3","\xc7","\x41","\x58");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = EnumValueMap_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(EnumValueMap_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< EnumValueMap_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = EnumValueMap_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EnumValueMap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EnumValueMap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ds
