// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_DateTools
#include <DateTools.h>
#endif


void DateTools_obj::__construct() { }

Dynamic DateTools_obj::__CreateEmpty() { return new DateTools_obj; }

hx::ObjectPtr< DateTools_obj > DateTools_obj::__new()
{
	hx::ObjectPtr< DateTools_obj > _hx_result = new DateTools_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic DateTools_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DateTools_obj > _hx_result = new DateTools_obj();
	_hx_result->__construct();
	return _hx_result;
}

::Array< Int > DateTools_obj::DAYS_OF_MONTH;

Int DateTools_obj::getMonthDays( ::Date d){
            	HX_STACK_FRAME("DateTools","getMonthDays",0x5b0762a2,"DateTools.getMonthDays","/usr/lib/haxe/std/DateTools.hx",143,0x64e40392)
            	HX_STACK_ARG(d,"d")
HXLINE( 144)		HX_VARI( Int,month) = d->getMonth();
HXLINE( 145)		HX_VARI( Int,year) = d->getFullYear();
HXLINE( 147)		if ((month != (int)1)) {
HXLINE( 148)			return ::DateTools_obj::DAYS_OF_MONTH->__get(month);
            		}
HXLINE( 150)		HX_VAR( Bool,isB);
HXDLIN( 150)		Bool _hx_tmp;
HXDLIN( 150)		if ((hx::Mod(year,(int)4) == (int)0)) {
HXLINE( 150)			_hx_tmp = (hx::Mod(year,(int)100) != (int)0);
            		}
            		else {
HXLINE( 150)			_hx_tmp = false;
            		}
HXDLIN( 150)		if (!(_hx_tmp)) {
HXLINE( 150)			isB = (hx::Mod(year,(int)400) == (int)0);
            		}
            		else {
HXLINE( 150)			isB = true;
            		}
HXLINE( 151)		if (isB) {
HXLINE( 151)			return (int)29;
            		}
            		else {
HXLINE( 151)			return (int)28;
            		}
HXDLIN( 151)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DateTools_obj,getMonthDays,return )


DateTools_obj::DateTools_obj()
{
}

bool DateTools_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"getMonthDays") ) { outValue = getMonthDays_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"DAYS_OF_MONTH") ) { outValue = DAYS_OF_MONTH; return true; }
	}
	return false;
}

bool DateTools_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"DAYS_OF_MONTH") ) { DAYS_OF_MONTH=ioValue.Cast< ::Array< Int > >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *DateTools_obj_sMemberStorageInfo = 0;
static hx::StaticInfo DateTools_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< int >*/ ,(void *) &DateTools_obj::DAYS_OF_MONTH,HX_HCSTRING("DAYS_OF_MONTH","\xa0","\x40","\x6f","\x31")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void DateTools_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DateTools_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(DateTools_obj::DAYS_OF_MONTH,"DAYS_OF_MONTH");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DateTools_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DateTools_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(DateTools_obj::DAYS_OF_MONTH,"DAYS_OF_MONTH");
};

#endif

hx::Class DateTools_obj::__mClass;

static ::String DateTools_obj_sStaticFields[] = {
	HX_HCSTRING("DAYS_OF_MONTH","\xa0","\x40","\x6f","\x31"),
	HX_HCSTRING("getMonthDays","\x81","\x8a","\x87","\xfb"),
	::String(null())
};

void DateTools_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("DateTools","\xed","\x64","\x5e","\x95");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DateTools_obj::__GetStatic;
	__mClass->mSetStaticField = &DateTools_obj::__SetStatic;
	__mClass->mMarkFunc = DateTools_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(DateTools_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< DateTools_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DateTools_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DateTools_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DateTools_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void DateTools_obj::__boot()
{
{
            	HX_STACK_FRAME("DateTools","boot",0x6615d353,"DateTools.boot","/usr/lib/haxe/std/DateTools.hx",136,0x64e40392)
HXLINE( 136)		DAYS_OF_MONTH = ::Array_obj< Int >::__new(12)->init(0,(int)31)->init(1,(int)28)->init(2,(int)31)->init(3,(int)30)->init(4,(int)31)->init(5,(int)30)->init(6,(int)31)->init(7,(int)31)->init(8,(int)30)->init(9,(int)31)->init(10,(int)30)->init(11,(int)31);
            	}
}

