// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_utest_Dispatcher
#include <utest/Dispatcher.h>
#endif
#ifndef INCLUDED_utest__Dispatcher_EventException
#include <utest/_Dispatcher/EventException.h>
#endif

namespace utest{

void Dispatcher_obj::__construct(){
            	HX_STACK_FRAME("utest.Dispatcher","new",0x077fb380,"utest.Dispatcher.new","utest/Dispatcher.hx",12,0x81468f4f)
            	HX_STACK_THIS(this)
HXLINE(  12)		this->handlers = ::Array_obj< ::Dynamic>::__new();
            	}

Dynamic Dispatcher_obj::__CreateEmpty() { return new Dispatcher_obj; }

hx::ObjectPtr< Dispatcher_obj > Dispatcher_obj::__new()
{
	hx::ObjectPtr< Dispatcher_obj > _hx_result = new Dispatcher_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Dispatcher_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Dispatcher_obj > _hx_result = new Dispatcher_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::Dynamic Dispatcher_obj::add( ::Dynamic h){
            	HX_STACK_FRAME("utest.Dispatcher","add",0x0775d541,"utest.Dispatcher.add","utest/Dispatcher.hx",14,0x81468f4f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(h,"h")
HXLINE(  15)		this->handlers->push(h);
HXLINE(  16)		return h;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Dispatcher_obj,add,return )

 ::Dynamic Dispatcher_obj::remove( ::Dynamic h){
            	HX_STACK_FRAME("utest.Dispatcher","remove",0xaad36d24,"utest.Dispatcher.remove","utest/Dispatcher.hx",19,0x81468f4f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(h,"h")
HXLINE(  20)		{
HXLINE(  20)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  20)			HX_VARI( Int,_g) = this->handlers->length;
HXDLIN(  20)			while((_g1 < _g)){
HXLINE(  20)				HX_VARI( Int,i) = _g1++;
HXLINE(  21)				Bool _hx_tmp = ::Reflect_obj::compareMethods(this->handlers->__get(i),h);
HXDLIN(  21)				if (_hx_tmp) {
HXLINE(  22)					::Array< ::Dynamic> _hx_tmp1 = this->handlers->splice(i,(int)1);
HXDLIN(  22)					return _hx_tmp1->__get((int)0);
            				}
            			}
            		}
HXLINE(  23)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Dispatcher_obj,remove,return )

void Dispatcher_obj::clear(){
            	HX_STACK_FRAME("utest.Dispatcher","clear",0x5c9e5cad,"utest.Dispatcher.clear","utest/Dispatcher.hx",27,0x81468f4f)
            	HX_STACK_THIS(this)
HXLINE(  27)		this->handlers = ::Array_obj< ::Dynamic>::__new();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Dispatcher_obj,clear,(void))

Bool Dispatcher_obj::dispatch( ::Dynamic e){
            	HX_STACK_FRAME("utest.Dispatcher","dispatch",0x09ac979a,"utest.Dispatcher.dispatch","utest/Dispatcher.hx",30,0x81468f4f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(e,"e")
HXLINE(  30)		try {
            			HX_STACK_CATCHABLE(::hx::EnumBase, 0);
HXLINE(  32)			HX_VARI( ::Array< ::Dynamic>,list) = this->handlers->copy();
HXLINE(  33)			{
HXLINE(  33)				HX_VARI( Int,_g) = (int)0;
HXDLIN(  33)				while((_g < list->length)){
HXLINE(  33)					HX_VARI(  ::Dynamic,l) = list->__get(_g);
HXDLIN(  33)					++_g;
HXLINE(  34)					l(e);
            				}
            			}
HXLINE(  35)			return true;
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass< ::hx::EnumBase >() ){
            				HX_STACK_BEGIN_CATCH
            				::hx::EnumBase exc = _hx_e;
HXLINE(  37)				return false;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(  30)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Dispatcher_obj,dispatch,return )

Bool Dispatcher_obj::has(){
            	HX_STACK_FRAME("utest.Dispatcher","has",0x077b227a,"utest.Dispatcher.has","utest/Dispatcher.hx",42,0x81468f4f)
            	HX_STACK_THIS(this)
HXLINE(  42)		return (this->handlers->length > (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Dispatcher_obj,has,return )

void Dispatcher_obj::stop(){
            	HX_STACK_FRAME("utest.Dispatcher","stop",0x8b96c8e2,"utest.Dispatcher.stop","utest/Dispatcher.hx",45,0x81468f4f)
HXLINE(  45)		HX_STACK_DO_THROW(::utest::_Dispatcher::EventException_obj::StopPropagation_dyn());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Dispatcher_obj,stop,(void))


Dispatcher_obj::Dispatcher_obj()
{
}

void Dispatcher_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Dispatcher);
	HX_MARK_MEMBER_NAME(handlers,"handlers");
	HX_MARK_END_CLASS();
}

void Dispatcher_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(handlers,"handlers");
}

hx::Val Dispatcher_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"handlers") ) { return hx::Val( handlers); }
		if (HX_FIELD_EQ(inName,"dispatch") ) { return hx::Val( dispatch_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Dispatcher_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"stop") ) { outValue = stop_dyn(); return true; }
	}
	return false;
}

hx::Val Dispatcher_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"handlers") ) { handlers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Dispatcher_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("handlers","\x69","\x21","\x24","\xd5"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Dispatcher_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Dispatcher_obj,handlers),HX_HCSTRING("handlers","\x69","\x21","\x24","\xd5")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Dispatcher_obj_sStaticStorageInfo = 0;
#endif

static ::String Dispatcher_obj_sMemberFields[] = {
	HX_HCSTRING("handlers","\x69","\x21","\x24","\xd5"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("dispatch","\xba","\xce","\x63","\x1e"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	::String(null()) };

static void Dispatcher_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Dispatcher_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Dispatcher_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Dispatcher_obj::__mClass,"__mClass");
};

#endif

hx::Class Dispatcher_obj::__mClass;

static ::String Dispatcher_obj_sStaticFields[] = {
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	::String(null())
};

void Dispatcher_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("utest.Dispatcher","\x8e","\x33","\x48","\xf2");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Dispatcher_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Dispatcher_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Dispatcher_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Dispatcher_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Dispatcher_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Dispatcher_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Dispatcher_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Dispatcher_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace utest
