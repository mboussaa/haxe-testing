// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_ValueType
#include <ValueType.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif
#ifndef INCLUDED_utest_Assertation
#include <utest/Assertation.h>
#endif

namespace utest{

void Assert_obj::__construct() { }

Dynamic Assert_obj::__CreateEmpty() { return new Assert_obj; }

hx::ObjectPtr< Assert_obj > Assert_obj::__new()
{
	hx::ObjectPtr< Assert_obj > _hx_result = new Assert_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Assert_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Assert_obj > _hx_result = new Assert_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::List Assert_obj::results;

void Assert_obj::isTrue(Bool cond,::String msg, ::Dynamic pos){
            	HX_STACK_FRAME("utest.Assert","isTrue",0x040c0179,"utest.Assert.isTrue","utest/Assert.hx",31,0x4f910390)
            	HX_STACK_ARG(cond,"cond")
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE(  32)		if (hx::IsNull( ::utest::Assert_obj::results )) {
HXLINE(  32)			HX_STACK_DO_THROW(HX_("Assert.results is not currently bound to any assert context",c1,68,20,d5));
            		}
HXLINE(  33)		Bool _hx_tmp = hx::IsNull( msg );
HXDLIN(  33)		if (_hx_tmp) {
HXLINE(  34)			msg = HX_("expected true",f6,95,12,31);
            		}
HXLINE(  35)		if (cond) {
HXLINE(  36)			::hx::EnumBase _hx_tmp1 = ::utest::Assertation_obj::Success(pos);
HXDLIN(  36)			::utest::Assert_obj::results->add(_hx_tmp1);
            		}
            		else {
HXLINE(  38)			::hx::EnumBase _hx_tmp2 = ::utest::Assertation_obj::Failure(msg,pos);
HXDLIN(  38)			::utest::Assert_obj::results->add(_hx_tmp2);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assert_obj,isTrue,(void))

void Assert_obj::isFalse(Bool value,::String msg, ::Dynamic pos){
            	HX_STACK_FRAME("utest.Assert","isFalse",0x6b95c118,"utest.Assert.isFalse","utest/Assert.hx",47,0x4f910390)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE(  48)		Bool _hx_tmp = hx::IsNull( msg );
HXDLIN(  48)		if (_hx_tmp) {
HXLINE(  49)			msg = HX_("expected false",fb,19,51,a4);
            		}
HXLINE(  50)		::utest::Assert_obj::isTrue((value == false),msg,pos);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assert_obj,isFalse,(void))

void Assert_obj::isNull( ::Dynamic value,::String msg, ::Dynamic pos){
            	HX_STACK_FRAME("utest.Assert","isNull",0x0016f8b2,"utest.Assert.isNull","utest/Assert.hx",59,0x4f910390)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE(  60)		if (hx::IsNull( msg )) {
HXLINE(  61)			::String _hx_tmp = ::utest::Assert_obj::q(value);
HXDLIN(  61)			msg = (HX_("expected null but it is ",91,9c,22,f9) + _hx_tmp);
            		}
HXLINE(  62)		::utest::Assert_obj::isTrue(hx::IsNull( value ),msg,pos);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assert_obj,isNull,(void))

void Assert_obj::notNull( ::Dynamic value,::String msg, ::Dynamic pos){
            	HX_STACK_FRAME("utest.Assert","notNull",0x11fa10f9,"utest.Assert.notNull","utest/Assert.hx",71,0x4f910390)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE(  72)		Bool _hx_tmp = hx::IsNull( msg );
HXDLIN(  72)		if (_hx_tmp) {
HXLINE(  73)			msg = HX_("expected not null",5c,f3,31,cf);
            		}
HXLINE(  74)		::utest::Assert_obj::isTrue(hx::IsNotNull( value ),msg,pos);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assert_obj,notNull,(void))

void Assert_obj::is( ::Dynamic value, ::Dynamic type,::String msg, ::Dynamic pos){
            	HX_STACK_FRAME("utest.Assert","is",0x8f468c8b,"utest.Assert.is","utest/Assert.hx",84,0x4f910390)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE(  85)		if (hx::IsNull( msg )) {
HXLINE(  85)			::String _hx_tmp = ::utest::Assert_obj::typeToString(type);
HXDLIN(  85)			::String _hx_tmp1 = ((HX_("expected type ",7e,54,cd,c3) + _hx_tmp) + HX_(" but it is ",60,e9,99,19));
HXDLIN(  85)			::String _hx_tmp2 = ::utest::Assert_obj::typeToString(value);
HXDLIN(  85)			msg = (_hx_tmp1 + _hx_tmp2);
            		}
HXLINE(  86)		Bool _hx_tmp3 = ::Std_obj::is(value,type);
HXDLIN(  86)		::utest::Assert_obj::isTrue(_hx_tmp3,msg,pos);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Assert_obj,is,(void))

void Assert_obj::notEquals( ::Dynamic expected, ::Dynamic value,::String msg, ::Dynamic pos){
            	HX_STACK_FRAME("utest.Assert","notEquals",0x30756131,"utest.Assert.notEquals","utest/Assert.hx",100,0x4f910390)
            	HX_STACK_ARG(expected,"expected")
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 101)		if (hx::IsNull( msg )) {
HXLINE( 101)			::String _hx_tmp = ::utest::Assert_obj::q(expected);
HXDLIN( 101)			::String _hx_tmp1 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp) + HX_(" and test value ",b4,da,d2,e8));
HXDLIN( 101)			::String _hx_tmp2 = ::utest::Assert_obj::q(value);
HXDLIN( 101)			msg = ((_hx_tmp1 + _hx_tmp2) + HX_(" should be different",c9,5a,1d,ae));
            		}
HXLINE( 102)		::utest::Assert_obj::isFalse(hx::IsEq( expected,value ),msg,pos);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Assert_obj,notEquals,(void))

void Assert_obj::equals( ::Dynamic expected, ::Dynamic value,::String msg, ::Dynamic pos){
            	HX_STACK_FRAME("utest.Assert","equals",0x59948360,"utest.Assert.equals","utest/Assert.hx",116,0x4f910390)
            	HX_STACK_ARG(expected,"expected")
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 117)		if (hx::IsNull( msg )) {
HXLINE( 117)			::String _hx_tmp = ::utest::Assert_obj::q(expected);
HXDLIN( 117)			::String _hx_tmp1 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 117)			::String _hx_tmp2 = ::utest::Assert_obj::q(value);
HXDLIN( 117)			msg = (_hx_tmp1 + _hx_tmp2);
            		}
HXLINE( 118)		::utest::Assert_obj::isTrue(hx::IsEq( expected,value ),msg,pos);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Assert_obj,equals,(void))

void Assert_obj::match( ::EReg pattern, ::Dynamic value,::String msg, ::Dynamic pos){
            	HX_STACK_FRAME("utest.Assert","match",0xe8467344,"utest.Assert.match","utest/Assert.hx",132,0x4f910390)
            	HX_STACK_ARG(pattern,"pattern")
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 133)		if (hx::IsNull( msg )) {
HXLINE( 133)			::String _hx_tmp = ::utest::Assert_obj::q(value);
HXDLIN( 133)			msg = ((HX_("the value ",5e,db,1d,e7) + _hx_tmp) + HX_(" does not match the provided pattern",f1,6e,18,3f));
            		}
HXLINE( 134)		Bool _hx_tmp1 = pattern->match(value);
HXDLIN( 134)		::utest::Assert_obj::isTrue(_hx_tmp1,msg,pos);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Assert_obj,match,(void))

void Assert_obj::floatEquals(Float expected,Float value, ::Dynamic approx,::String msg, ::Dynamic pos){
            	HX_STACK_FRAME("utest.Assert","floatEquals",0xa45d783a,"utest.Assert.floatEquals","utest/Assert.hx",150,0x4f910390)
            	HX_STACK_ARG(expected,"expected")
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(approx,"approx")
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 151)		if (hx::IsNull( msg )) {
HXLINE( 151)			::String _hx_tmp = ::utest::Assert_obj::q(expected);
HXDLIN( 151)			::String _hx_tmp1 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 151)			::String _hx_tmp2 = ::utest::Assert_obj::q(value);
HXDLIN( 151)			msg = (_hx_tmp1 + _hx_tmp2);
            		}
HXLINE( 152)		Bool _hx_tmp3 = ::utest::Assert_obj::_floatEquals(expected,value,approx);
HXDLIN( 152)		::utest::Assert_obj::isTrue(_hx_tmp3,msg,pos);
HXDLIN( 152)		return;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Assert_obj,floatEquals,(void))

Bool Assert_obj::_floatEquals(Float expected,Float value, ::Dynamic approx){
            	HX_STACK_FRAME("utest.Assert","_floatEquals",0x2fe196dd,"utest.Assert._floatEquals","utest/Assert.hx",156,0x4f910390)
            	HX_STACK_ARG(expected,"expected")
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(approx,"approx")
HXLINE( 157)		Bool _hx_tmp = ::Math_obj::isNaN(expected);
HXDLIN( 157)		if (_hx_tmp) {
HXLINE( 158)			return ::Math_obj::isNaN(value);
            		}
            		else {
HXLINE( 159)			Bool _hx_tmp1 = ::Math_obj::isNaN(value);
HXDLIN( 159)			if (_hx_tmp1) {
HXLINE( 160)				return false;
            			}
            			else {
HXLINE( 161)				Bool _hx_tmp2;
HXDLIN( 161)				Bool _hx_tmp3 = !(::Math_obj::isFinite(expected));
HXDLIN( 161)				if (_hx_tmp3) {
HXLINE( 161)					_hx_tmp2 = !(::Math_obj::isFinite(value));
            				}
            				else {
HXLINE( 161)					_hx_tmp2 = false;
            				}
HXDLIN( 161)				if (_hx_tmp2) {
HXLINE( 162)					return ((expected > (int)0) == (value > (int)0));
            				}
            			}
            		}
HXLINE( 163)		Bool _hx_tmp4 = hx::IsNull( approx );
HXDLIN( 163)		if (_hx_tmp4) {
HXLINE( 164)			approx = ((Float)1e-5);
            		}
HXLINE( 165)		Float _hx_tmp5 = ::Math_obj::abs((value - expected));
HXDLIN( 165)		return hx::IsLessEq( _hx_tmp5,approx );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assert_obj,_floatEquals,return )

::String Assert_obj::getTypeName( ::Dynamic v){
            	HX_STACK_FRAME("utest.Assert","getTypeName",0x19076c1a,"utest.Assert.getTypeName","utest/Assert.hx",169,0x4f910390)
            	HX_STACK_ARG(v,"v")
HXLINE( 169)		HX_VARI( ::hx::EnumBase,_g) = ::Type_obj::_hx_typeof(v);
HXDLIN( 169)		Int _hx_tmp = ( ( ::hx::EnumBase)(_g) )->_hx_getIndex();
HXDLIN( 169)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE( 171)				return HX_("`null`",99,bb,fe,05);
            			}
            			break;
            			case (int)1: {
HXLINE( 172)				return HX_("Int",cf,c4,37,00);
            			}
            			break;
            			case (int)2: {
HXLINE( 173)				return HX_("Float",7c,35,c4,95);
            			}
            			break;
            			case (int)3: {
HXLINE( 174)				return HX_("Bool",4a,b0,f4,2b);
            			}
            			break;
            			case (int)4: {
HXLINE( 178)				return HX_("Object",df,f2,d3,49);
            			}
            			break;
            			case (int)5: {
HXLINE( 175)				return HX_("function",18,ab,52,14);
            			}
            			break;
            			case (int)6: {
HXLINE( 176)				return ::Type_obj::getClassName(_g->_hx_getObject(0).StaticCast< hx::Class >());
            			}
            			break;
            			case (int)7: {
HXLINE( 177)				return ::Type_obj::getEnumName(_g->_hx_getObject(0).StaticCast< hx::Class >());
            			}
            			break;
            			case (int)8: {
HXLINE( 179)				return HX_("`Unknown`",16,12,7d,5e);
            			}
            			break;
            		}
HXLINE( 169)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assert_obj,getTypeName,return )

Bool Assert_obj::isIterable( ::Dynamic v,Bool isAnonym){
            	HX_STACK_FRAME("utest.Assert","isIterable",0x4104ea5d,"utest.Assert.isIterable","utest/Assert.hx",183,0x4f910390)
            	HX_STACK_ARG(v,"v")
            	HX_STACK_ARG(isAnonym,"isAnonym")
HXLINE( 184)		HX_VAR( ::Array< ::String >,fields);
HXDLIN( 184)		if (isAnonym) {
HXLINE( 184)			fields = ::Reflect_obj::fields(v);
            		}
            		else {
HXLINE( 184)			hx::Class _hx_tmp = ::Type_obj::getClass(v);
HXDLIN( 184)			fields = ::Type_obj::getInstanceFields(_hx_tmp);
            		}
HXLINE( 185)		Bool _hx_tmp1 = !(::Lambda_obj::has(fields,HX_("iterator",ee,49,9a,93)));
HXDLIN( 185)		if (_hx_tmp1) {
HXLINE( 185)			return false;
            		}
HXLINE( 186)		 ::Dynamic _hx_tmp2 = ::Reflect_obj::field(v,HX_("iterator",ee,49,9a,93));
HXDLIN( 186)		return ::Reflect_obj::isFunction(_hx_tmp2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assert_obj,isIterable,return )

Bool Assert_obj::isIterator( ::Dynamic v,Bool isAnonym){
            	HX_STACK_FRAME("utest.Assert","isIterator",0x41129599,"utest.Assert.isIterator","utest/Assert.hx",189,0x4f910390)
            	HX_STACK_ARG(v,"v")
            	HX_STACK_ARG(isAnonym,"isAnonym")
HXLINE( 190)		HX_VAR( ::Array< ::String >,fields);
HXDLIN( 190)		if (isAnonym) {
HXLINE( 190)			fields = ::Reflect_obj::fields(v);
            		}
            		else {
HXLINE( 190)			hx::Class _hx_tmp = ::Type_obj::getClass(v);
HXDLIN( 190)			fields = ::Type_obj::getInstanceFields(_hx_tmp);
            		}
HXLINE( 191)		Bool _hx_tmp1;
HXDLIN( 191)		Bool _hx_tmp2 = !(!(::Lambda_obj::has(fields,HX_("next",f3,84,02,49))));
HXDLIN( 191)		if (_hx_tmp2) {
HXLINE( 191)			_hx_tmp1 = !(::Lambda_obj::has(fields,HX_("hasNext",6d,a5,46,18)));
            		}
            		else {
HXLINE( 191)			_hx_tmp1 = true;
            		}
HXDLIN( 191)		if (_hx_tmp1) {
HXLINE( 191)			return false;
            		}
HXLINE( 192)		 ::Dynamic _hx_tmp3 = ::Reflect_obj::field(v,HX_("next",f3,84,02,49));
HXDLIN( 192)		Bool _hx_tmp4 = ::Reflect_obj::isFunction(_hx_tmp3);
HXDLIN( 192)		if (_hx_tmp4) {
HXLINE( 192)			 ::Dynamic _hx_tmp5 = ::Reflect_obj::field(v,HX_("hasNext",6d,a5,46,18));
HXDLIN( 192)			return ::Reflect_obj::isFunction(_hx_tmp5);
            		}
            		else {
HXLINE( 192)			return false;
            		}
HXDLIN( 192)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assert_obj,isIterator,return )

Bool Assert_obj::sameAs( ::Dynamic expected, ::Dynamic value, ::Dynamic status,Float approx){
            	HX_STACK_FRAME("utest.Assert","sameAs",0xb6e37719,"utest.Assert.sameAs","utest/Assert.hx",195,0x4f910390)
            	HX_STACK_ARG(expected,"expected")
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(status,"status")
            	HX_STACK_ARG(approx,"approx")
HXLINE( 196)		HX_VARI( ::String,texpected) = ::utest::Assert_obj::getTypeName(expected);
HXLINE( 197)		HX_VARI( ::String,tvalue) = ::utest::Assert_obj::getTypeName(value);
HXLINE( 199)		Bool _hx_tmp;
HXDLIN( 199)		if ((texpected != tvalue)) {
HXLINE( 199)			Bool _hx_tmp1;
HXDLIN( 199)			Bool _hx_tmp2;
HXDLIN( 199)			if ((texpected == HX_("Int",cf,c4,37,00))) {
HXLINE( 199)				_hx_tmp2 = (tvalue == HX_("Float",7c,35,c4,95));
            			}
            			else {
HXLINE( 199)				_hx_tmp2 = false;
            			}
HXDLIN( 199)			if (!(_hx_tmp2)) {
HXLINE( 199)				if ((texpected == HX_("Float",7c,35,c4,95))) {
HXLINE( 199)					_hx_tmp1 = (tvalue == HX_("Int",cf,c4,37,00));
            				}
            				else {
HXLINE( 199)					_hx_tmp1 = false;
            				}
            			}
            			else {
HXLINE( 199)				_hx_tmp1 = true;
            			}
HXDLIN( 199)			_hx_tmp = !(_hx_tmp1);
            		}
            		else {
HXLINE( 199)			_hx_tmp = false;
            		}
HXDLIN( 199)		if (_hx_tmp) {
HXLINE( 201)			::String _hx_tmp3 = (((HX_("expected type ",7e,54,cd,c3) + texpected) + HX_(" but it is ",60,e9,99,19)) + tvalue);
HXDLIN( 201)			::String _hx_tmp4;
HXDLIN( 201)			if ((( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00))) {
HXLINE( 201)				_hx_tmp4 = HX_("",00,00,00,00);
            			}
            			else {
HXLINE( 201)				_hx_tmp4 = (HX_(" for field ",7d,ea,d9,5b) + ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ));
            			}
HXDLIN( 201)			status->__SetField(HX_("error",c8,cb,29,73),(_hx_tmp3 + _hx_tmp4),hx::paccDynamic);
HXLINE( 202)			return false;
            		}
HXLINE( 204)		HX_VARI( ::hx::EnumBase,_g) = ::Type_obj::_hx_typeof(expected);
HXDLIN( 204)		Int _hx_tmp5 = ( ( ::hx::EnumBase)(_g) )->_hx_getIndex();
HXDLIN( 204)		switch((int)(_hx_tmp5)){
            			case (int)0: case (int)3: {
HXLINE( 214)				if (hx::IsNotEq( expected,value )) {
HXLINE( 215)					::String _hx_tmp6 = ::utest::Assert_obj::q(expected);
HXDLIN( 215)					::String _hx_tmp7 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp6) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 215)					::String _hx_tmp8 = ::utest::Assert_obj::q(value);
HXDLIN( 215)					::String _hx_tmp9 = (_hx_tmp7 + _hx_tmp8);
HXDLIN( 215)					::String _hx_tmp10;
HXDLIN( 215)					if ((( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00))) {
HXLINE( 215)						_hx_tmp10 = HX_("",00,00,00,00);
            					}
            					else {
HXLINE( 215)						_hx_tmp10 = (HX_(" for field ",7d,ea,d9,5b) + ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ));
            					}
HXDLIN( 215)					status->__SetField(HX_("error",c8,cb,29,73),(_hx_tmp9 + _hx_tmp10),hx::paccDynamic);
HXLINE( 216)					return false;
            				}
HXLINE( 218)				return true;
            			}
            			break;
            			case (int)1: case (int)2: {
HXLINE( 207)				Bool _hx_tmp11 = !(::utest::Assert_obj::_floatEquals(expected,value,approx));
HXDLIN( 207)				if (_hx_tmp11) {
HXLINE( 209)					::String _hx_tmp12 = ::utest::Assert_obj::q(expected);
HXDLIN( 209)					::String _hx_tmp13 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp12) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 209)					::String _hx_tmp14 = ::utest::Assert_obj::q(value);
HXDLIN( 209)					::String _hx_tmp15 = (_hx_tmp13 + _hx_tmp14);
HXDLIN( 209)					::String _hx_tmp16;
HXDLIN( 209)					if ((( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00))) {
HXLINE( 209)						_hx_tmp16 = HX_("",00,00,00,00);
            					}
            					else {
HXLINE( 209)						_hx_tmp16 = (HX_(" for field ",7d,ea,d9,5b) + ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ));
            					}
HXDLIN( 209)					status->__SetField(HX_("error",c8,cb,29,73),(_hx_tmp15 + _hx_tmp16),hx::paccDynamic);
HXLINE( 210)					return false;
            				}
HXLINE( 212)				return true;
            			}
            			break;
            			case (int)4: {
HXLINE( 399)				Bool _hx_tmp17;
HXDLIN( 399)				if (!(( (Bool)(status->__Field(HX_("recursive",72,ab,f7,4c),hx::paccDynamic)) ))) {
HXLINE( 399)					_hx_tmp17 = (( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00));
            				}
            				else {
HXLINE( 399)					_hx_tmp17 = true;
            				}
HXDLIN( 399)				if (_hx_tmp17) {
HXLINE( 400)					HX_VARI( ::Array< ::String >,tfields) = ::Reflect_obj::fields(value);
HXLINE( 401)					HX_VARI( ::Array< ::String >,fields) = ::Reflect_obj::fields(expected);
HXLINE( 402)					HX_VARI( ::String,path) = ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) );
HXLINE( 403)					{
HXLINE( 403)						HX_VARI_NAME( Int,_g1,"_g") = (int)0;
HXDLIN( 403)						while((_g1 < fields->length)){
HXLINE( 403)							HX_VARI( ::String,field) = fields->__get(_g1);
HXDLIN( 403)							++_g1;
HXLINE( 404)							tfields->remove(field);
HXLINE( 405)							::String _hx_tmp18;
HXDLIN( 405)							if ((path == HX_("",00,00,00,00))) {
HXLINE( 405)								_hx_tmp18 = field;
            							}
            							else {
HXLINE( 405)								_hx_tmp18 = ((path + HX_(".",2e,00,00,00)) + field);
            							}
HXDLIN( 405)							status->__SetField(HX_("path",a5,e5,51,4a),_hx_tmp18,hx::paccDynamic);
HXLINE( 406)							Bool _hx_tmp19 = !(::Reflect_obj::hasField(value,field));
HXDLIN( 406)							if (_hx_tmp19) {
HXLINE( 407)								::String _hx_tmp20 = ((HX_("expected field ",ce,76,34,b9) + ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) )) + HX_(" does not exist in ",de,a3,13,4c));
HXDLIN( 407)								::String _hx_tmp21 = ::utest::Assert_obj::q(value);
HXDLIN( 407)								status->__SetField(HX_("error",c8,cb,29,73),(_hx_tmp20 + _hx_tmp21),hx::paccDynamic);
HXLINE( 408)								return false;
            							}
HXLINE( 410)							HX_VARI(  ::Dynamic,e) = ::Reflect_obj::field(expected,field);
HXLINE( 411)							Bool _hx_tmp22 = ::Reflect_obj::isFunction(e);
HXDLIN( 411)							if (_hx_tmp22) {
HXLINE( 412)								continue;
            							}
HXLINE( 413)							HX_VARI(  ::Dynamic,v) = ::Reflect_obj::field(value,field);
HXLINE( 414)							Bool _hx_tmp23 = !(::utest::Assert_obj::sameAs(e,v,status,approx));
HXDLIN( 414)							if (_hx_tmp23) {
HXLINE( 415)								return false;
            							}
            						}
            					}
HXLINE( 417)					Bool _hx_tmp24 = (tfields->length > (int)0);
HXDLIN( 417)					if (_hx_tmp24) {
HXLINE( 419)						::String _hx_tmp25 = tfields->join(HX_(", ",74,26,00,00));
HXDLIN( 419)						status->__SetField(HX_("error",c8,cb,29,73),((HX_("the tested object has extra field(s) (",03,06,86,dc) + _hx_tmp25) + HX_(") not included in the expected ones",eb,3e,d1,60)),hx::paccDynamic);
HXLINE( 420)						return false;
            					}
            				}
HXLINE( 425)				Bool _hx_tmp26 = ::utest::Assert_obj::isIterator(expected,true);
HXDLIN( 425)				if (_hx_tmp26) {
HXLINE( 426)					Bool _hx_tmp27 = !(::utest::Assert_obj::isIterator(value,true));
HXDLIN( 426)					if (_hx_tmp27) {
HXLINE( 427)						::String _hx_tmp28;
HXDLIN( 427)						if ((( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00))) {
HXLINE( 427)							_hx_tmp28 = HX_("",00,00,00,00);
            						}
            						else {
HXLINE( 427)							_hx_tmp28 = (HX_(" for field ",7d,ea,d9,5b) + ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ));
            						}
HXDLIN( 427)						status->__SetField(HX_("error",c8,cb,29,73),(HX_("expected Iterable but it is not ",d3,ac,06,23) + _hx_tmp28),hx::paccDynamic);
HXLINE( 428)						return false;
            					}
HXLINE( 430)					Bool _hx_tmp29;
HXDLIN( 430)					if (!(( (Bool)(status->__Field(HX_("recursive",72,ab,f7,4c),hx::paccDynamic)) ))) {
HXLINE( 430)						_hx_tmp29 = (( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00));
            					}
            					else {
HXLINE( 430)						_hx_tmp29 = true;
            					}
HXDLIN( 430)					if (_hx_tmp29) {
            						HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,expected) HXARGC(0)
            						 ::Dynamic _hx_run(){
            							HX_STACK_FRAME("utest.Assert","sameAs",0xb6e37719,"utest.Assert.sameAs","utest/Assert.hx",431,0x4f910390)
HXLINE( 431)							return expected;
            						}
            						HX_END_LOCAL_FUNC0(return)

            						HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,value) HXARGC(0)
            						 ::Dynamic _hx_run(){
            							HX_STACK_FRAME("utest.Assert","sameAs",0xb6e37719,"utest.Assert.sameAs","utest/Assert.hx",432,0x4f910390)
HXLINE( 432)							return value;
            						}
            						HX_END_LOCAL_FUNC0(return)

HXLINE( 431)						HX_VARI( ::cpp::VirtualArray,evalues) = ::Lambda_obj::array( ::Dynamic(hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("iterator",ee,49,9a,93), ::Dynamic(new _hx_Closure_0(expected)))));
HXLINE( 432)						HX_VARI( ::cpp::VirtualArray,vvalues) = ::Lambda_obj::array( ::Dynamic(hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("iterator",ee,49,9a,93), ::Dynamic(new _hx_Closure_1(value)))));
HXLINE( 433)						Bool _hx_tmp30 = (evalues->get_length() != vvalues->get_length());
HXDLIN( 433)						if (_hx_tmp30) {
HXLINE( 434)							::String _hx_tmp31 = (((HX_("expected ",a8,7a,f8,e9) + evalues->get_length()) + HX_(" values in Iterator but they are ",90,a3,73,02)) + vvalues->get_length());
HXDLIN( 434)							::String _hx_tmp32;
HXDLIN( 434)							if ((( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00))) {
HXLINE( 434)								_hx_tmp32 = HX_("",00,00,00,00);
            							}
            							else {
HXLINE( 434)								_hx_tmp32 = (HX_(" for field ",7d,ea,d9,5b) + ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ));
            							}
HXDLIN( 434)							status->__SetField(HX_("error",c8,cb,29,73),(_hx_tmp31 + _hx_tmp32),hx::paccDynamic);
HXLINE( 435)							return false;
            						}
HXLINE( 437)						HX_VARI_NAME( ::String,path1,"path") = ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) );
HXLINE( 438)						{
HXLINE( 438)							HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 438)							HX_VARI_NAME( Int,_g2,"_g") = evalues->get_length();
HXDLIN( 438)							while((_g11 < _g2)){
HXLINE( 438)								HX_VARI( Int,i) = _g11++;
HXLINE( 439)								::String _hx_tmp33;
HXDLIN( 439)								if ((path1 == HX_("",00,00,00,00))) {
HXLINE( 439)									_hx_tmp33 = ((HX_("iterator[",ad,66,66,93) + i) + HX_("]",5d,00,00,00));
            								}
            								else {
HXLINE( 439)									_hx_tmp33 = (((path1 + HX_("[",5b,00,00,00)) + i) + HX_("]",5d,00,00,00));
            								}
HXDLIN( 439)								status->__SetField(HX_("path",a5,e5,51,4a),_hx_tmp33,hx::paccDynamic);
HXLINE( 440)								Bool _hx_tmp34 = !(::utest::Assert_obj::sameAs(evalues->__get(i),vvalues->__get(i),status,approx));
HXDLIN( 440)								if (_hx_tmp34) {
HXLINE( 442)									::String _hx_tmp35 = ::utest::Assert_obj::q(expected);
HXDLIN( 442)									::String _hx_tmp36 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp35) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 442)									::String _hx_tmp37 = ::utest::Assert_obj::q(value);
HXDLIN( 442)									::String _hx_tmp38 = (_hx_tmp36 + _hx_tmp37);
HXDLIN( 442)									::String _hx_tmp39;
HXDLIN( 442)									if ((( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00))) {
HXLINE( 442)										_hx_tmp39 = HX_("",00,00,00,00);
            									}
            									else {
HXLINE( 442)										_hx_tmp39 = (HX_(" for field ",7d,ea,d9,5b) + ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ));
            									}
HXDLIN( 442)									status->__SetField(HX_("error",c8,cb,29,73),(_hx_tmp38 + _hx_tmp39),hx::paccDynamic);
HXLINE( 443)									return false;
            								}
            							}
            						}
            					}
HXLINE( 447)					return true;
            				}
HXLINE( 451)				Bool _hx_tmp40 = ::utest::Assert_obj::isIterable(expected,true);
HXDLIN( 451)				if (_hx_tmp40) {
HXLINE( 452)					Bool _hx_tmp41 = !(::utest::Assert_obj::isIterable(value,true));
HXDLIN( 452)					if (_hx_tmp41) {
HXLINE( 453)						::String _hx_tmp42;
HXDLIN( 453)						if ((( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00))) {
HXLINE( 453)							_hx_tmp42 = HX_("",00,00,00,00);
            						}
            						else {
HXLINE( 453)							_hx_tmp42 = (HX_(" for field ",7d,ea,d9,5b) + ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ));
            						}
HXDLIN( 453)						status->__SetField(HX_("error",c8,cb,29,73),(HX_("expected Iterator but it is not ",17,05,5b,14) + _hx_tmp42),hx::paccDynamic);
HXLINE( 454)						return false;
            					}
HXLINE( 456)					Bool _hx_tmp43;
HXDLIN( 456)					if (!(( (Bool)(status->__Field(HX_("recursive",72,ab,f7,4c),hx::paccDynamic)) ))) {
HXLINE( 456)						_hx_tmp43 = (( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00));
            					}
            					else {
HXLINE( 456)						_hx_tmp43 = true;
            					}
HXDLIN( 456)					if (_hx_tmp43) {
HXLINE( 457)						HX_VARI_NAME( ::cpp::VirtualArray,evalues1,"evalues") = ::Lambda_obj::array(expected);
HXLINE( 458)						HX_VARI_NAME( ::cpp::VirtualArray,vvalues1,"vvalues") = ::Lambda_obj::array(value);
HXLINE( 459)						Bool _hx_tmp44 = (evalues1->get_length() != vvalues1->get_length());
HXDLIN( 459)						if (_hx_tmp44) {
HXLINE( 460)							::String _hx_tmp45 = (((HX_("expected ",a8,7a,f8,e9) + evalues1->get_length()) + HX_(" values in Iterable but they are ",54,47,f7,e6)) + vvalues1->get_length());
HXDLIN( 460)							::String _hx_tmp46;
HXDLIN( 460)							if ((( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00))) {
HXLINE( 460)								_hx_tmp46 = HX_("",00,00,00,00);
            							}
            							else {
HXLINE( 460)								_hx_tmp46 = (HX_(" for field ",7d,ea,d9,5b) + ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ));
            							}
HXDLIN( 460)							status->__SetField(HX_("error",c8,cb,29,73),(_hx_tmp45 + _hx_tmp46),hx::paccDynamic);
HXLINE( 461)							return false;
            						}
HXLINE( 463)						HX_VARI_NAME( ::String,path2,"path") = ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) );
HXLINE( 464)						{
HXLINE( 464)							HX_VARI_NAME( Int,_g12,"_g1") = (int)0;
HXDLIN( 464)							HX_VARI_NAME( Int,_g3,"_g") = evalues1->get_length();
HXDLIN( 464)							while((_g12 < _g3)){
HXLINE( 464)								HX_VARI_NAME( Int,i1,"i") = _g12++;
HXLINE( 465)								::String _hx_tmp47;
HXDLIN( 465)								if ((path2 == HX_("",00,00,00,00))) {
HXLINE( 465)									_hx_tmp47 = ((HX_("iterable[",69,3d,7e,87) + i1) + HX_("]",5d,00,00,00));
            								}
            								else {
HXLINE( 465)									_hx_tmp47 = (((path2 + HX_("[",5b,00,00,00)) + i1) + HX_("]",5d,00,00,00));
            								}
HXDLIN( 465)								status->__SetField(HX_("path",a5,e5,51,4a),_hx_tmp47,hx::paccDynamic);
HXLINE( 466)								Bool _hx_tmp48 = !(::utest::Assert_obj::sameAs(evalues1->__get(i1),vvalues1->__get(i1),status,approx));
HXDLIN( 466)								if (_hx_tmp48) {
HXLINE( 467)									return false;
            								}
            							}
            						}
            					}
HXLINE( 470)					return true;
            				}
HXLINE( 472)				return true;
            			}
            			break;
            			case (int)5: {
HXLINE( 220)				Bool _hx_tmp49 = !(::Reflect_obj::compareMethods(expected,value));
HXDLIN( 220)				if (_hx_tmp49) {
HXLINE( 222)					::String _hx_tmp50;
HXDLIN( 222)					if ((( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00))) {
HXLINE( 222)						_hx_tmp50 = HX_("",00,00,00,00);
            					}
            					else {
HXLINE( 222)						_hx_tmp50 = (HX_(" for field ",7d,ea,d9,5b) + ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ));
            					}
HXDLIN( 222)					status->__SetField(HX_("error",c8,cb,29,73),(HX_("expected same function reference",95,d3,fa,7e) + _hx_tmp50),hx::paccDynamic);
HXLINE( 223)					return false;
            				}
HXLINE( 225)				return true;
            			}
            			break;
            			case (int)6: {
HXLINE( 227)				HX_VARI( ::String,cexpected) = ::Type_obj::getClassName(_g->_hx_getObject(0).StaticCast< hx::Class >());
HXLINE( 228)				hx::Class _hx_tmp51 = ::Type_obj::getClass(value);
HXDLIN( 228)				HX_VARI( ::String,cvalue) = ::Type_obj::getClassName(_hx_tmp51);
HXLINE( 229)				if ((cexpected != cvalue)) {
HXLINE( 231)					::String _hx_tmp52 = ::utest::Assert_obj::q(cexpected);
HXDLIN( 231)					::String _hx_tmp53 = ((HX_("expected instance of ",c6,4b,a6,2a) + _hx_tmp52) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 231)					::String _hx_tmp54 = ::utest::Assert_obj::q(cvalue);
HXDLIN( 231)					::String _hx_tmp55 = (_hx_tmp53 + _hx_tmp54);
HXDLIN( 231)					::String _hx_tmp56;
HXDLIN( 231)					if ((( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00))) {
HXLINE( 231)						_hx_tmp56 = HX_("",00,00,00,00);
            					}
            					else {
HXLINE( 231)						_hx_tmp56 = (HX_(" for field ",7d,ea,d9,5b) + ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ));
            					}
HXDLIN( 231)					status->__SetField(HX_("error",c8,cb,29,73),(_hx_tmp55 + _hx_tmp56),hx::paccDynamic);
HXLINE( 232)					return false;
            				}
HXLINE( 236)				Bool _hx_tmp57;
HXDLIN( 236)				Bool _hx_tmp58 = ::Std_obj::is(expected,hx::ClassOf< ::String >());
HXDLIN( 236)				if (_hx_tmp58) {
HXLINE( 236)					_hx_tmp57 = hx::IsNotEq( expected,value );
            				}
            				else {
HXLINE( 236)					_hx_tmp57 = false;
            				}
HXDLIN( 236)				if (_hx_tmp57) {
HXLINE( 238)					::String _hx_tmp59 = ::Std_obj::string(expected);
HXDLIN( 238)					::String _hx_tmp60 = ((HX_("expected '",7f,d8,72,cf) + _hx_tmp59) + HX_("' but it is '",6e,69,65,ed));
HXDLIN( 238)					::String _hx_tmp61 = ::Std_obj::string(value);
HXDLIN( 238)					status->__SetField(HX_("error",c8,cb,29,73),((_hx_tmp60 + _hx_tmp61) + HX_("'",27,00,00,00)),hx::paccDynamic);
HXLINE( 239)					return false;
            				}
HXLINE( 243)				Bool _hx_tmp62 = ::Std_obj::is(expected,hx::ArrayBase::__mClass);
HXDLIN( 243)				if (_hx_tmp62) {
HXLINE( 244)					Bool _hx_tmp63;
HXDLIN( 244)					if (!(( (Bool)(status->__Field(HX_("recursive",72,ab,f7,4c),hx::paccDynamic)) ))) {
HXLINE( 244)						_hx_tmp63 = (( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00));
            					}
            					else {
HXLINE( 244)						_hx_tmp63 = true;
            					}
HXDLIN( 244)					if (_hx_tmp63) {
HXLINE( 245)						Bool _hx_tmp64 = hx::IsNotEq(  ::Dynamic(expected->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)), ::Dynamic(value->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)) );
HXDLIN( 245)						if (_hx_tmp64) {
HXLINE( 246)							::String _hx_tmp65 = ::Std_obj::string( ::Dynamic(expected->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)));
HXDLIN( 246)							::String _hx_tmp66 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp65) + HX_(" elements but they are ",5c,d6,1d,fb));
HXDLIN( 246)							::String _hx_tmp67 = ::Std_obj::string( ::Dynamic(value->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)));
HXDLIN( 246)							::String _hx_tmp68 = (_hx_tmp66 + _hx_tmp67);
HXDLIN( 246)							::String _hx_tmp69;
HXDLIN( 246)							if ((( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00))) {
HXLINE( 246)								_hx_tmp69 = HX_("",00,00,00,00);
            							}
            							else {
HXLINE( 246)								_hx_tmp69 = (HX_(" for field ",7d,ea,d9,5b) + ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ));
            							}
HXDLIN( 246)							status->__SetField(HX_("error",c8,cb,29,73),(_hx_tmp68 + _hx_tmp69),hx::paccDynamic);
HXLINE( 247)							return false;
            						}
HXLINE( 249)						HX_VARI_NAME( ::String,path3,"path") = ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) );
HXLINE( 250)						{
HXLINE( 250)							HX_VARI_NAME( Int,_g13,"_g1") = (int)0;
HXDLIN( 250)							HX_VARI_NAME( Int,_g4,"_g") = ( (Int)(expected->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)) );
HXDLIN( 250)							while((_g13 < _g4)){
HXLINE( 250)								HX_VARI_NAME( Int,i2,"i") = _g13++;
HXLINE( 251)								::String _hx_tmp70;
HXDLIN( 251)								if ((path3 == HX_("",00,00,00,00))) {
HXLINE( 251)									_hx_tmp70 = ((HX_("array[",a2,78,f0,b7) + i2) + HX_("]",5d,00,00,00));
            								}
            								else {
HXLINE( 251)									_hx_tmp70 = (((path3 + HX_("[",5b,00,00,00)) + i2) + HX_("]",5d,00,00,00));
            								}
HXDLIN( 251)								status->__SetField(HX_("path",a5,e5,51,4a),_hx_tmp70,hx::paccDynamic);
HXLINE( 252)								Bool _hx_tmp71 = !(::utest::Assert_obj::sameAs(expected->__GetItem(i2),value->__GetItem(i2),status,approx));
HXDLIN( 252)								if (_hx_tmp71) {
HXLINE( 254)									::String _hx_tmp72 = ::utest::Assert_obj::q(expected->__GetItem(i2));
HXDLIN( 254)									::String _hx_tmp73 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp72) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 254)									::String _hx_tmp74 = ::utest::Assert_obj::q(value->__GetItem(i2));
HXDLIN( 254)									::String _hx_tmp75 = (_hx_tmp73 + _hx_tmp74);
HXDLIN( 254)									::String _hx_tmp76;
HXDLIN( 254)									if ((( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00))) {
HXLINE( 254)										_hx_tmp76 = HX_("",00,00,00,00);
            									}
            									else {
HXLINE( 254)										_hx_tmp76 = (HX_(" for field ",7d,ea,d9,5b) + ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ));
            									}
HXDLIN( 254)									status->__SetField(HX_("error",c8,cb,29,73),(_hx_tmp75 + _hx_tmp76),hx::paccDynamic);
HXLINE( 255)									return false;
            								}
            							}
            						}
            					}
HXLINE( 259)					return true;
            				}
HXLINE( 263)				Bool _hx_tmp77 = ::Std_obj::is(expected,hx::ClassOf< ::Date >());
HXDLIN( 263)				if (_hx_tmp77) {
HXLINE( 264)					 ::Dynamic _hx_tmp78 =  ::Dynamic(expected->__Field(HX_("getTime",c3,7b,7f,1f),hx::paccDynamic))();
HXDLIN( 264)					 ::Dynamic _hx_tmp79 =  ::Dynamic(value->__Field(HX_("getTime",c3,7b,7f,1f),hx::paccDynamic))();
HXDLIN( 264)					if (hx::IsNotEq( _hx_tmp78,_hx_tmp79 )) {
HXLINE( 265)						::String _hx_tmp80 = ::utest::Assert_obj::q(expected);
HXDLIN( 265)						::String _hx_tmp81 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp80) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 265)						::String _hx_tmp82 = ::utest::Assert_obj::q(value);
HXDLIN( 265)						::String _hx_tmp83 = (_hx_tmp81 + _hx_tmp82);
HXDLIN( 265)						::String _hx_tmp84;
HXDLIN( 265)						if ((( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00))) {
HXLINE( 265)							_hx_tmp84 = HX_("",00,00,00,00);
            						}
            						else {
HXLINE( 265)							_hx_tmp84 = (HX_(" for field ",7d,ea,d9,5b) + ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ));
            						}
HXDLIN( 265)						status->__SetField(HX_("error",c8,cb,29,73),(_hx_tmp83 + _hx_tmp84),hx::paccDynamic);
HXLINE( 266)						return false;
            					}
HXLINE( 268)					return true;
            				}
HXLINE( 272)				Bool _hx_tmp85 = ::Std_obj::is(expected,hx::ClassOf< ::haxe::io::Bytes >());
HXDLIN( 272)				if (_hx_tmp85) {
HXLINE( 273)					Bool _hx_tmp86;
HXDLIN( 273)					if (!(( (Bool)(status->__Field(HX_("recursive",72,ab,f7,4c),hx::paccDynamic)) ))) {
HXLINE( 273)						_hx_tmp86 = (( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00));
            					}
            					else {
HXLINE( 273)						_hx_tmp86 = true;
            					}
HXDLIN( 273)					if (_hx_tmp86) {
HXLINE( 274)						HX_VARI(  ::haxe::io::Bytes,ebytes) = ( ( ::haxe::io::Bytes)(expected) );
HXLINE( 275)						HX_VARI(  ::haxe::io::Bytes,vbytes) = ( ( ::haxe::io::Bytes)(value) );
HXLINE( 276)						if ((ebytes->length != vbytes->length)) {
HXLINE( 276)							return false;
            						}
HXLINE( 277)						{
HXLINE( 277)							HX_VARI_NAME( Int,_g14,"_g1") = (int)0;
HXDLIN( 277)							HX_VARI_NAME( Int,_g5,"_g") = ebytes->length;
HXDLIN( 277)							while((_g14 < _g5)){
HXLINE( 277)								HX_VARI_NAME( Int,i3,"i") = _g14++;
HXLINE( 278)								if ((ebytes->b->__get(i3) != vbytes->b->__get(i3))) {
HXLINE( 280)									::String _hx_tmp87 = (((HX_("expected byte ",70,ec,99,66) + ebytes->b->__get(i3)) + HX_(" but it is ",60,e9,99,19)) + vbytes->b->__get(i3));
HXDLIN( 280)									::String _hx_tmp88;
HXDLIN( 280)									if ((( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00))) {
HXLINE( 280)										_hx_tmp88 = HX_("",00,00,00,00);
            									}
            									else {
HXLINE( 280)										_hx_tmp88 = (HX_(" for field ",7d,ea,d9,5b) + ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ));
            									}
HXDLIN( 280)									status->__SetField(HX_("error",c8,cb,29,73),(_hx_tmp87 + _hx_tmp88),hx::paccDynamic);
HXLINE( 281)									return false;
            								}
            							}
            						}
            					}
HXLINE( 284)					return true;
            				}
HXLINE( 288)				Bool _hx_tmp89 = ::Std_obj::is(expected,hx::ClassOf< ::haxe::IMap >());
HXDLIN( 288)				if (_hx_tmp89) {
HXLINE( 289)					Bool _hx_tmp90;
HXDLIN( 289)					if (!(( (Bool)(status->__Field(HX_("recursive",72,ab,f7,4c),hx::paccDynamic)) ))) {
HXLINE( 289)						_hx_tmp90 = (( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00));
            					}
            					else {
HXLINE( 289)						_hx_tmp90 = true;
            					}
HXDLIN( 289)					if (_hx_tmp90) {
HXLINE( 290)						HX_VARI( ::Dynamic,map) = expected;
HXLINE( 291)						HX_VARI( ::Dynamic,vmap) = value;
HXLINE( 292)						HX_VARI_NAME( ::cpp::VirtualArray,_g6,"_g") = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 292)						{
HXLINE( 292)							HX_VARI(  ::Dynamic,tmp) = ::haxe::IMap_obj::keys(map);
HXDLIN( 292)							while(true){
HXLINE( 292)								Bool _hx_tmp91 = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 292)								if (_hx_tmp91) {
HXLINE( 292)									goto _hx_goto_5;
            								}
HXDLIN( 292)								HX_VARI(  ::Dynamic,k) =  ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXDLIN( 292)								_g6->push(k);
            							}
            							_hx_goto_5:;
            						}
HXLINE( 293)						HX_VARI_NAME( ::cpp::VirtualArray,_g15,"_g1") = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 293)						{
HXLINE( 293)							HX_VARI_NAME(  ::Dynamic,tmp1,"tmp") = ::haxe::IMap_obj::keys(vmap);
HXDLIN( 293)							while(true){
HXLINE( 293)								Bool _hx_tmp92 = !(( (Bool)( ::Dynamic(tmp1->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 293)								if (_hx_tmp92) {
HXLINE( 293)									goto _hx_goto_6;
            								}
HXDLIN( 293)								HX_VARI_NAME(  ::Dynamic,k1,"k") =  ::Dynamic(tmp1->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXDLIN( 293)								_g15->push(k1);
            							}
            							_hx_goto_6:;
            						}
HXLINE( 295)						Bool _hx_tmp93 = (_g6->get_length() != _g15->get_length());
HXDLIN( 295)						if (_hx_tmp93) {
HXLINE( 296)							::String _hx_tmp94 = (((HX_("expected ",a8,7a,f8,e9) + _g6->get_length()) + HX_(" keys but they are ",d9,22,a4,da)) + _g15->get_length());
HXDLIN( 296)							::String _hx_tmp95;
HXDLIN( 296)							if ((( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00))) {
HXLINE( 296)								_hx_tmp95 = HX_("",00,00,00,00);
            							}
            							else {
HXLINE( 296)								_hx_tmp95 = (HX_(" for field ",7d,ea,d9,5b) + ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ));
            							}
HXDLIN( 296)							status->__SetField(HX_("error",c8,cb,29,73),(_hx_tmp94 + _hx_tmp95),hx::paccDynamic);
HXLINE( 297)							return false;
            						}
HXLINE( 299)						HX_VARI_NAME( ::String,path4,"path") = ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) );
HXLINE( 300)						{
HXLINE( 300)							HX_VARI_NAME( Int,_g21,"_g2") = (int)0;
HXDLIN( 300)							while((_g21 < _g6->get_length())){
HXLINE( 300)								HX_VARI(  ::Dynamic,key) = _g6->__get(_g21);
HXDLIN( 300)								++_g21;
HXLINE( 301)								::String _hx_tmp96;
HXDLIN( 301)								if ((path4 == HX_("",00,00,00,00))) {
HXLINE( 301)									::String _hx_tmp97 = ::Std_obj::string(key);
HXDLIN( 301)									_hx_tmp96 = ((HX_("hash[",cd,a4,21,22) + _hx_tmp97) + HX_("]",5d,00,00,00));
            								}
            								else {
HXLINE( 301)									::String _hx_tmp98 = (path4 + HX_("[",5b,00,00,00));
HXDLIN( 301)									::String _hx_tmp99 = ::Std_obj::string(key);
HXDLIN( 301)									_hx_tmp96 = ((_hx_tmp98 + _hx_tmp99) + HX_("]",5d,00,00,00));
            								}
HXDLIN( 301)								status->__SetField(HX_("path",a5,e5,51,4a),_hx_tmp96,hx::paccDynamic);
HXLINE( 302)								 ::Dynamic _hx_tmp100 = ::haxe::IMap_obj::get(map,key);
HXDLIN( 302)								 ::Dynamic _hx_tmp101 = ::haxe::IMap_obj::get(vmap,key);
HXDLIN( 302)								Bool _hx_tmp102 = !(::utest::Assert_obj::sameAs(_hx_tmp100,_hx_tmp101,status,approx));
HXDLIN( 302)								if (_hx_tmp102) {
HXLINE( 304)									::String _hx_tmp103 = ::utest::Assert_obj::q(expected);
HXDLIN( 304)									::String _hx_tmp104 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp103) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 304)									::String _hx_tmp105 = ::utest::Assert_obj::q(value);
HXDLIN( 304)									::String _hx_tmp106 = (_hx_tmp104 + _hx_tmp105);
HXDLIN( 304)									::String _hx_tmp107;
HXDLIN( 304)									if ((( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00))) {
HXLINE( 304)										_hx_tmp107 = HX_("",00,00,00,00);
            									}
            									else {
HXLINE( 304)										_hx_tmp107 = (HX_(" for field ",7d,ea,d9,5b) + ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ));
            									}
HXDLIN( 304)									status->__SetField(HX_("error",c8,cb,29,73),(_hx_tmp106 + _hx_tmp107),hx::paccDynamic);
HXLINE( 305)									return false;
            								}
            							}
            						}
            					}
HXLINE( 309)					return true;
            				}
HXLINE( 313)				Bool _hx_tmp108 = ::utest::Assert_obj::isIterator(expected,false);
HXDLIN( 313)				if (_hx_tmp108) {
HXLINE( 314)					Bool _hx_tmp109;
HXDLIN( 314)					if (!(( (Bool)(status->__Field(HX_("recursive",72,ab,f7,4c),hx::paccDynamic)) ))) {
HXLINE( 314)						_hx_tmp109 = (( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00));
            					}
            					else {
HXLINE( 314)						_hx_tmp109 = true;
            					}
HXDLIN( 314)					if (_hx_tmp109) {
            						HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2, ::Dynamic,expected) HXARGC(0)
            						 ::Dynamic _hx_run(){
            							HX_STACK_FRAME("utest.Assert","sameAs",0xb6e37719,"utest.Assert.sameAs","utest/Assert.hx",315,0x4f910390)
HXLINE( 315)							return expected;
            						}
            						HX_END_LOCAL_FUNC0(return)

            						HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_3, ::Dynamic,value) HXARGC(0)
            						 ::Dynamic _hx_run(){
            							HX_STACK_FRAME("utest.Assert","sameAs",0xb6e37719,"utest.Assert.sameAs","utest/Assert.hx",316,0x4f910390)
HXLINE( 316)							return value;
            						}
            						HX_END_LOCAL_FUNC0(return)

HXLINE( 315)						HX_VARI_NAME( ::cpp::VirtualArray,evalues2,"evalues") = ::Lambda_obj::array( ::Dynamic(hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("iterator",ee,49,9a,93), ::Dynamic(new _hx_Closure_2(expected)))));
HXLINE( 316)						HX_VARI_NAME( ::cpp::VirtualArray,vvalues2,"vvalues") = ::Lambda_obj::array( ::Dynamic(hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("iterator",ee,49,9a,93), ::Dynamic(new _hx_Closure_3(value)))));
HXLINE( 317)						Bool _hx_tmp110 = (evalues2->get_length() != vvalues2->get_length());
HXDLIN( 317)						if (_hx_tmp110) {
HXLINE( 318)							::String _hx_tmp111 = (((HX_("expected ",a8,7a,f8,e9) + evalues2->get_length()) + HX_(" values in Iterator but they are ",90,a3,73,02)) + vvalues2->get_length());
HXDLIN( 318)							::String _hx_tmp112;
HXDLIN( 318)							if ((( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00))) {
HXLINE( 318)								_hx_tmp112 = HX_("",00,00,00,00);
            							}
            							else {
HXLINE( 318)								_hx_tmp112 = (HX_(" for field ",7d,ea,d9,5b) + ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ));
            							}
HXDLIN( 318)							status->__SetField(HX_("error",c8,cb,29,73),(_hx_tmp111 + _hx_tmp112),hx::paccDynamic);
HXLINE( 319)							return false;
            						}
HXLINE( 321)						HX_VARI_NAME( ::String,path5,"path") = ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) );
HXLINE( 322)						{
HXLINE( 322)							HX_VARI_NAME( Int,_g16,"_g1") = (int)0;
HXDLIN( 322)							HX_VARI_NAME( Int,_g7,"_g") = evalues2->get_length();
HXDLIN( 322)							while((_g16 < _g7)){
HXLINE( 322)								HX_VARI_NAME( Int,i4,"i") = _g16++;
HXLINE( 323)								::String _hx_tmp113;
HXDLIN( 323)								if ((path5 == HX_("",00,00,00,00))) {
HXLINE( 323)									_hx_tmp113 = ((HX_("iterator[",ad,66,66,93) + i4) + HX_("]",5d,00,00,00));
            								}
            								else {
HXLINE( 323)									_hx_tmp113 = (((path5 + HX_("[",5b,00,00,00)) + i4) + HX_("]",5d,00,00,00));
            								}
HXDLIN( 323)								status->__SetField(HX_("path",a5,e5,51,4a),_hx_tmp113,hx::paccDynamic);
HXLINE( 324)								Bool _hx_tmp114 = !(::utest::Assert_obj::sameAs(evalues2->__get(i4),vvalues2->__get(i4),status,approx));
HXDLIN( 324)								if (_hx_tmp114) {
HXLINE( 326)									::String _hx_tmp115 = ::utest::Assert_obj::q(expected);
HXDLIN( 326)									::String _hx_tmp116 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp115) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 326)									::String _hx_tmp117 = ::utest::Assert_obj::q(value);
HXDLIN( 326)									::String _hx_tmp118 = (_hx_tmp116 + _hx_tmp117);
HXDLIN( 326)									::String _hx_tmp119;
HXDLIN( 326)									if ((( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00))) {
HXLINE( 326)										_hx_tmp119 = HX_("",00,00,00,00);
            									}
            									else {
HXLINE( 326)										_hx_tmp119 = (HX_(" for field ",7d,ea,d9,5b) + ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ));
            									}
HXDLIN( 326)									status->__SetField(HX_("error",c8,cb,29,73),(_hx_tmp118 + _hx_tmp119),hx::paccDynamic);
HXLINE( 327)									return false;
            								}
            							}
            						}
            					}
HXLINE( 331)					return true;
            				}
HXLINE( 335)				Bool _hx_tmp120 = ::utest::Assert_obj::isIterable(expected,false);
HXDLIN( 335)				if (_hx_tmp120) {
HXLINE( 336)					Bool _hx_tmp121;
HXDLIN( 336)					if (!(( (Bool)(status->__Field(HX_("recursive",72,ab,f7,4c),hx::paccDynamic)) ))) {
HXLINE( 336)						_hx_tmp121 = (( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00));
            					}
            					else {
HXLINE( 336)						_hx_tmp121 = true;
            					}
HXDLIN( 336)					if (_hx_tmp121) {
HXLINE( 337)						HX_VARI_NAME( ::cpp::VirtualArray,evalues3,"evalues") = ::Lambda_obj::array(expected);
HXLINE( 338)						HX_VARI_NAME( ::cpp::VirtualArray,vvalues3,"vvalues") = ::Lambda_obj::array(value);
HXLINE( 339)						Bool _hx_tmp122 = (evalues3->get_length() != vvalues3->get_length());
HXDLIN( 339)						if (_hx_tmp122) {
HXLINE( 340)							::String _hx_tmp123 = (((HX_("expected ",a8,7a,f8,e9) + evalues3->get_length()) + HX_(" values in Iterable but they are ",54,47,f7,e6)) + vvalues3->get_length());
HXDLIN( 340)							::String _hx_tmp124;
HXDLIN( 340)							if ((( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00))) {
HXLINE( 340)								_hx_tmp124 = HX_("",00,00,00,00);
            							}
            							else {
HXLINE( 340)								_hx_tmp124 = (HX_(" for field ",7d,ea,d9,5b) + ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ));
            							}
HXDLIN( 340)							status->__SetField(HX_("error",c8,cb,29,73),(_hx_tmp123 + _hx_tmp124),hx::paccDynamic);
HXLINE( 341)							return false;
            						}
HXLINE( 343)						HX_VARI_NAME( ::String,path6,"path") = ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) );
HXLINE( 344)						{
HXLINE( 344)							HX_VARI_NAME( Int,_g17,"_g1") = (int)0;
HXDLIN( 344)							HX_VARI_NAME( Int,_g8,"_g") = evalues3->get_length();
HXDLIN( 344)							while((_g17 < _g8)){
HXLINE( 344)								HX_VARI_NAME( Int,i5,"i") = _g17++;
HXLINE( 345)								::String _hx_tmp125;
HXDLIN( 345)								if ((path6 == HX_("",00,00,00,00))) {
HXLINE( 345)									_hx_tmp125 = ((HX_("iterable[",69,3d,7e,87) + i5) + HX_("]",5d,00,00,00));
            								}
            								else {
HXLINE( 345)									_hx_tmp125 = (((path6 + HX_("[",5b,00,00,00)) + i5) + HX_("]",5d,00,00,00));
            								}
HXDLIN( 345)								status->__SetField(HX_("path",a5,e5,51,4a),_hx_tmp125,hx::paccDynamic);
HXLINE( 346)								Bool _hx_tmp126 = !(::utest::Assert_obj::sameAs(evalues3->__get(i5),vvalues3->__get(i5),status,approx));
HXDLIN( 346)								if (_hx_tmp126) {
HXLINE( 347)									return false;
            								}
            							}
            						}
            					}
HXLINE( 350)					return true;
            				}
HXLINE( 354)				Bool _hx_tmp127;
HXDLIN( 354)				if (!(( (Bool)(status->__Field(HX_("recursive",72,ab,f7,4c),hx::paccDynamic)) ))) {
HXLINE( 354)					_hx_tmp127 = (( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00));
            				}
            				else {
HXLINE( 354)					_hx_tmp127 = true;
            				}
HXDLIN( 354)				if (_hx_tmp127) {
HXLINE( 355)					hx::Class _hx_tmp128 = ::Type_obj::getClass(expected);
HXDLIN( 355)					HX_VARI_NAME( ::Array< ::String >,fields1,"fields") = ::Type_obj::getInstanceFields(_hx_tmp128);
HXLINE( 356)					HX_VARI_NAME( ::String,path7,"path") = ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) );
HXLINE( 357)					{
HXLINE( 357)						HX_VARI_NAME( Int,_g9,"_g") = (int)0;
HXDLIN( 357)						while((_g9 < fields1->length)){
HXLINE( 357)							HX_VARI_NAME( ::String,field1,"field") = fields1->__get(_g9);
HXDLIN( 357)							++_g9;
HXLINE( 358)							::String _hx_tmp129;
HXDLIN( 358)							if ((path7 == HX_("",00,00,00,00))) {
HXLINE( 358)								_hx_tmp129 = field1;
            							}
            							else {
HXLINE( 358)								_hx_tmp129 = ((path7 + HX_(".",2e,00,00,00)) + field1);
            							}
HXDLIN( 358)							status->__SetField(HX_("path",a5,e5,51,4a),_hx_tmp129,hx::paccDynamic);
HXLINE( 359)							HX_VARI_NAME(  ::Dynamic,e1,"e") = ::Reflect_obj::field(expected,field1);
HXLINE( 360)							Bool _hx_tmp130 = ::Reflect_obj::isFunction(e1);
HXDLIN( 360)							if (_hx_tmp130) {
HXLINE( 360)								continue;
            							}
HXLINE( 361)							HX_VARI_NAME(  ::Dynamic,v1,"v") = ::Reflect_obj::field(value,field1);
HXLINE( 362)							Bool _hx_tmp131 = !(::utest::Assert_obj::sameAs(e1,v1,status,approx));
HXDLIN( 362)							if (_hx_tmp131) {
HXLINE( 363)								return false;
            							}
            						}
            					}
            				}
HXLINE( 367)				return true;
            			}
            			break;
            			case (int)7: {
HXLINE( 369)				HX_VARI( ::String,eexpected) = ::Type_obj::getEnumName(_g->_hx_getObject(0).StaticCast< hx::Class >());
HXLINE( 370)				hx::Class _hx_tmp132 = ::Type_obj::getEnum(value);
HXDLIN( 370)				HX_VARI( ::String,evalue) = ::Type_obj::getEnumName(_hx_tmp132);
HXLINE( 371)				if ((eexpected != evalue)) {
HXLINE( 373)					::String _hx_tmp133 = ::utest::Assert_obj::q(eexpected);
HXDLIN( 373)					::String _hx_tmp134 = ((HX_("expected enumeration of ",28,cf,2e,32) + _hx_tmp133) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 373)					::String _hx_tmp135 = ::utest::Assert_obj::q(evalue);
HXDLIN( 373)					::String _hx_tmp136 = (_hx_tmp134 + _hx_tmp135);
HXDLIN( 373)					::String _hx_tmp137;
HXDLIN( 373)					if ((( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00))) {
HXLINE( 373)						_hx_tmp137 = HX_("",00,00,00,00);
            					}
            					else {
HXLINE( 373)						_hx_tmp137 = (HX_(" for field ",7d,ea,d9,5b) + ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ));
            					}
HXDLIN( 373)					status->__SetField(HX_("error",c8,cb,29,73),(_hx_tmp136 + _hx_tmp137),hx::paccDynamic);
HXLINE( 374)					return false;
            				}
HXLINE( 376)				Bool _hx_tmp138;
HXDLIN( 376)				if (!(( (Bool)(status->__Field(HX_("recursive",72,ab,f7,4c),hx::paccDynamic)) ))) {
HXLINE( 376)					_hx_tmp138 = (( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00));
            				}
            				else {
HXLINE( 376)					_hx_tmp138 = true;
            				}
HXDLIN( 376)				if (_hx_tmp138) {
HXLINE( 378)					Int _hx_tmp139 = ( ( ::hx::EnumBase)(expected) )->_hx_getIndex();
HXDLIN( 378)					Int _hx_tmp140 = ( ( ::hx::EnumBase)(value) )->_hx_getIndex();
HXDLIN( 378)					if ((_hx_tmp139 != _hx_tmp140)) {
HXLINE( 380)						::String _hx_tmp141 = ::Type_obj::enumConstructor(expected);
HXDLIN( 380)						::String _hx_tmp142 = ::utest::Assert_obj::q(_hx_tmp141);
HXDLIN( 380)						::String _hx_tmp143 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp142) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 380)						::String _hx_tmp144 = ::Type_obj::enumConstructor(value);
HXDLIN( 380)						::String _hx_tmp145 = ::utest::Assert_obj::q(_hx_tmp144);
HXDLIN( 380)						::String _hx_tmp146 = (_hx_tmp143 + _hx_tmp145);
HXDLIN( 380)						::String _hx_tmp147;
HXDLIN( 380)						if ((( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00))) {
HXLINE( 380)							_hx_tmp147 = HX_("",00,00,00,00);
            						}
            						else {
HXLINE( 380)							_hx_tmp147 = (HX_(" for field ",7d,ea,d9,5b) + ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ));
            						}
HXDLIN( 380)						status->__SetField(HX_("error",c8,cb,29,73),(_hx_tmp146 + _hx_tmp147),hx::paccDynamic);
HXLINE( 381)						return false;
            					}
HXLINE( 383)					HX_VARI( ::cpp::VirtualArray,eparams) = ::Type_obj::enumParameters(expected);
HXLINE( 384)					HX_VARI( ::cpp::VirtualArray,vparams) = ::Type_obj::enumParameters(value);
HXLINE( 385)					HX_VARI_NAME( ::String,path8,"path") = ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) );
HXLINE( 386)					{
HXLINE( 386)						HX_VARI_NAME( Int,_g18,"_g1") = (int)0;
HXDLIN( 386)						HX_VARI_NAME( Int,_g10,"_g") = eparams->get_length();
HXDLIN( 386)						while((_g18 < _g10)){
HXLINE( 386)							HX_VARI_NAME( Int,i6,"i") = _g18++;
HXLINE( 388)							::String _hx_tmp148;
HXDLIN( 388)							if ((path8 == HX_("",00,00,00,00))) {
HXLINE( 388)								_hx_tmp148 = ((HX_("enum[",3a,36,87,70) + i6) + HX_("]",5d,00,00,00));
            							}
            							else {
HXLINE( 388)								_hx_tmp148 = (((path8 + HX_("[",5b,00,00,00)) + i6) + HX_("]",5d,00,00,00));
            							}
HXDLIN( 388)							status->__SetField(HX_("path",a5,e5,51,4a),_hx_tmp148,hx::paccDynamic);
HXLINE( 389)							Bool _hx_tmp149 = !(::utest::Assert_obj::sameAs(eparams->__get(i6),vparams->__get(i6),status,approx));
HXDLIN( 389)							if (_hx_tmp149) {
HXLINE( 391)								::String _hx_tmp150 = ::utest::Assert_obj::q(expected);
HXDLIN( 391)								::String _hx_tmp151 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp150) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 391)								::String _hx_tmp152 = ::utest::Assert_obj::q(value);
HXDLIN( 391)								::String _hx_tmp153 = (_hx_tmp151 + _hx_tmp152);
HXDLIN( 391)								::String _hx_tmp154;
HXDLIN( 391)								if ((( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00))) {
HXLINE( 391)									_hx_tmp154 = HX_("",00,00,00,00);
            								}
            								else {
HXLINE( 391)									_hx_tmp154 = (HX_(" for field ",7d,ea,d9,5b) + ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ));
            								}
HXDLIN( 391)								status->__SetField(HX_("error",c8,cb,29,73),(_hx_tmp153 + _hx_tmp154),hx::paccDynamic);
HXLINE( 392)								return false;
            							}
            						}
            					}
            				}
HXLINE( 396)				return true;
            			}
            			break;
            			case (int)8: {
HXLINE( 474)				HX_STACK_DO_THROW(HX_("Unable to compare two unknown types",5c,3c,2b,f7));
            			}
            			break;
            		}
HXLINE( 204)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Assert_obj,sameAs,return )

::String Assert_obj::q( ::Dynamic v){
            	HX_STACK_FRAME("utest.Assert","q",0x14287ef0,"utest.Assert.q","utest/Assert.hx",481,0x4f910390)
            	HX_STACK_ARG(v,"v")
HXLINE( 481)		Bool _hx_tmp = ::Std_obj::is(v,hx::ClassOf< ::String >());
HXDLIN( 481)		if (_hx_tmp) {
HXLINE( 482)			::String _hx_tmp1 = ::StringTools_obj::replace(v,HX_("\"",22,00,00,00),HX_("\\\"",46,50,00,00));
HXDLIN( 482)			return ((HX_("\"",22,00,00,00) + _hx_tmp1) + HX_("\"",22,00,00,00));
            		}
            		else {
HXLINE( 484)			return ::Std_obj::string(v);
            		}
HXLINE( 481)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assert_obj,q,return )

void Assert_obj::same( ::Dynamic expected, ::Dynamic value, ::Dynamic recursive,::String msg, ::Dynamic approx, ::Dynamic pos){
            	HX_STACK_FRAME("utest.Assert","same",0xddf9de47,"utest.Assert.same","utest/Assert.hx",502,0x4f910390)
            	HX_STACK_ARG(expected,"expected")
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(recursive,"recursive")
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(approx,"approx")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 503)		Bool _hx_tmp = hx::IsNull( approx );
HXDLIN( 503)		if (_hx_tmp) {
HXLINE( 504)			approx = ((Float)1e-5);
            		}
HXLINE( 505)		 ::Dynamic _hx_tmp1;
HXDLIN( 505)		if (hx::IsNull( recursive )) {
HXLINE( 505)			_hx_tmp1 = true;
            		}
            		else {
HXLINE( 505)			_hx_tmp1 = recursive;
            		}
HXDLIN( 505)		HX_VARI(  ::Dynamic,status) =  ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("path",a5,e5,51,4a),HX_("",00,00,00,00))
            			->setFixed(1,HX_("recursive",72,ab,f7,4c),_hx_tmp1)
            			->setFixed(2,HX_("error",c8,cb,29,73),null()));
HXLINE( 506)		Bool _hx_tmp2 = ::utest::Assert_obj::sameAs(expected,value,status,approx);
HXDLIN( 506)		if (_hx_tmp2) {
HXLINE( 507)			::utest::Assert_obj::pass(msg,pos);
            		}
            		else {
HXLINE( 509)			::String _hx_tmp3;
HXDLIN( 509)			if (hx::IsNull( msg )) {
HXLINE( 509)				_hx_tmp3 = ( (::String)(status->__Field(HX_("error",c8,cb,29,73),hx::paccDynamic)) );
            			}
            			else {
HXLINE( 509)				_hx_tmp3 = msg;
            			}
HXDLIN( 509)			::utest::Assert_obj::fail(_hx_tmp3,pos);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Assert_obj,same,(void))

void Assert_obj::raises( ::Dynamic method,hx::Class type,::String msgNotThrown,::String msgWrongType, ::Dynamic pos){
            	HX_STACK_FRAME("utest.Assert","raises",0x4dedff28,"utest.Assert.raises","utest/Assert.hx",530,0x4f910390)
            	HX_STACK_ARG(method,"method")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(msgNotThrown,"msgNotThrown")
            	HX_STACK_ARG(msgWrongType,"msgWrongType")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 530)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 531)			method();
HXLINE( 532)			HX_VARI( ::String,name) = ::Type_obj::getClassName(type);
HXLINE( 533)			Bool _hx_tmp = hx::IsNull( name );
HXDLIN( 533)			if (_hx_tmp) {
HXLINE( 533)				name = HX_("Dynamic",5f,c7,66,03);
            			}
HXLINE( 534)			Bool _hx_tmp1 = hx::IsNull( msgNotThrown );
HXDLIN( 534)			if (_hx_tmp1) {
HXLINE( 535)				msgNotThrown = ((HX_("exception of type ",4e,d6,6f,54) + name) + HX_(" not raised",85,69,50,04));
            			}
HXLINE( 536)			::utest::Assert_obj::fail(msgNotThrown,pos);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic ex = _hx_e;
HXLINE( 538)				if (hx::IsNull( type )) {
HXLINE( 539)					::utest::Assert_obj::pass(null(),pos);
            				}
            				else {
HXLINE( 541)					HX_VARI_NAME( ::String,name1,"name") = ::Type_obj::getClassName(type);
HXLINE( 542)					if (hx::IsNull( msgWrongType )) {
HXLINE( 543)						::String _hx_tmp2 = ((HX_("expected throw of type ",3f,87,15,d5) + name1) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 543)						::String _hx_tmp3 = ::Std_obj::string(ex);
HXDLIN( 543)						msgWrongType = (_hx_tmp2 + _hx_tmp3);
            					}
HXLINE( 544)					Bool _hx_tmp4 = ::Std_obj::is(ex,type);
HXDLIN( 544)					::utest::Assert_obj::isTrue(_hx_tmp4,msgWrongType,pos);
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Assert_obj,raises,(void))

void Assert_obj::allows(::cpp::VirtualArray possibilities, ::Dynamic value,::String msg, ::Dynamic pos){
            	HX_STACK_FRAME("utest.Assert","allows",0xd93de8eb,"utest.Assert.allows","utest/Assert.hx",558,0x4f910390)
            	HX_STACK_ARG(possibilities,"possibilities")
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 558)		Bool _hx_tmp = ::Lambda_obj::has(possibilities,value);
HXDLIN( 558)		if (_hx_tmp) {
HXLINE( 559)			::utest::Assert_obj::isTrue(true,msg,pos);
            		}
            		else {
HXLINE( 561)			::String _hx_tmp1;
HXDLIN( 561)			if (hx::IsNull( msg )) {
HXLINE( 561)				::String _hx_tmp2 = ::utest::Assert_obj::q(value);
HXDLIN( 561)				::String _hx_tmp3 = ((HX_("value ",8f,03,b7,4f) + _hx_tmp2) + HX_(" not found in the expected possibilities ",58,b2,ce,1c));
HXDLIN( 561)				::String _hx_tmp4 = ::Std_obj::string(possibilities);
HXDLIN( 561)				_hx_tmp1 = (_hx_tmp3 + _hx_tmp4);
            			}
            			else {
HXLINE( 561)				_hx_tmp1 = msg;
            			}
HXDLIN( 561)			::utest::Assert_obj::fail(_hx_tmp1,pos);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Assert_obj,allows,(void))

void Assert_obj::contains( ::Dynamic match,::cpp::VirtualArray values,::String msg, ::Dynamic pos){
            	HX_STACK_FRAME("utest.Assert","contains",0xa1853980,"utest.Assert.contains","utest/Assert.hx",574,0x4f910390)
            	HX_STACK_ARG(match,"match")
            	HX_STACK_ARG(values,"values")
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 574)		Bool _hx_tmp = ::Lambda_obj::has(values,match);
HXDLIN( 574)		if (_hx_tmp) {
HXLINE( 575)			::utest::Assert_obj::isTrue(true,msg,pos);
            		}
            		else {
HXLINE( 577)			::String _hx_tmp1;
HXDLIN( 577)			if (hx::IsNull( msg )) {
HXLINE( 577)				::String _hx_tmp2 = ::utest::Assert_obj::q(values);
HXDLIN( 577)				::String _hx_tmp3 = ((HX_("values ",fe,61,6c,70) + _hx_tmp2) + HX_(" do not contain ",0e,c8,9e,06));
HXDLIN( 577)				::String _hx_tmp4 = ::Std_obj::string(match);
HXDLIN( 577)				_hx_tmp1 = (_hx_tmp3 + _hx_tmp4);
            			}
            			else {
HXLINE( 577)				_hx_tmp1 = msg;
            			}
HXDLIN( 577)			::utest::Assert_obj::fail(_hx_tmp1,pos);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Assert_obj,contains,(void))

void Assert_obj::notContains( ::Dynamic match,::cpp::VirtualArray values,::String msg, ::Dynamic pos){
            	HX_STACK_FRAME("utest.Assert","notContains",0x98b5ed91,"utest.Assert.notContains","utest/Assert.hx",590,0x4f910390)
            	HX_STACK_ARG(match,"match")
            	HX_STACK_ARG(values,"values")
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 590)		Bool _hx_tmp = !(::Lambda_obj::has(values,match));
HXDLIN( 590)		if (_hx_tmp) {
HXLINE( 591)			::utest::Assert_obj::isTrue(true,msg,pos);
            		}
            		else {
HXLINE( 593)			::String _hx_tmp1;
HXDLIN( 593)			if (hx::IsNull( msg )) {
HXLINE( 593)				::String _hx_tmp2 = ::utest::Assert_obj::q(values);
HXDLIN( 593)				::String _hx_tmp3 = ((HX_("values ",fe,61,6c,70) + _hx_tmp2) + HX_(" do contain ",e1,0c,c2,79));
HXDLIN( 593)				::String _hx_tmp4 = ::Std_obj::string(match);
HXDLIN( 593)				_hx_tmp1 = (_hx_tmp3 + _hx_tmp4);
            			}
            			else {
HXLINE( 593)				_hx_tmp1 = msg;
            			}
HXDLIN( 593)			::utest::Assert_obj::fail(_hx_tmp1,pos);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Assert_obj,notContains,(void))

void Assert_obj::stringContains(::String match,::String value,::String msg, ::Dynamic pos){
            	HX_STACK_FRAME("utest.Assert","stringContains",0x0cb91631,"utest.Assert.stringContains","utest/Assert.hx",605,0x4f910390)
            	HX_STACK_ARG(match,"match")
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 605)		Bool _hx_tmp;
HXDLIN( 605)		if (hx::IsNotNull( value )) {
HXLINE( 605)			Int _hx_tmp1 = value.indexOf(match,null());
HXDLIN( 605)			_hx_tmp = (_hx_tmp1 >= (int)0);
            		}
            		else {
HXLINE( 605)			_hx_tmp = false;
            		}
HXDLIN( 605)		if (_hx_tmp) {
HXLINE( 606)			::utest::Assert_obj::isTrue(true,msg,pos);
            		}
            		else {
HXLINE( 608)			::String _hx_tmp2;
HXDLIN( 608)			if (hx::IsNull( msg )) {
HXLINE( 608)				::String _hx_tmp3 = ::utest::Assert_obj::q(value);
HXDLIN( 608)				::String _hx_tmp4 = ((HX_("value ",8f,03,b7,4f) + _hx_tmp3) + HX_(" does not contain ",20,4a,e8,91));
HXDLIN( 608)				::String _hx_tmp5 = ::utest::Assert_obj::q(match);
HXDLIN( 608)				_hx_tmp2 = (_hx_tmp4 + _hx_tmp5);
            			}
            			else {
HXLINE( 608)				_hx_tmp2 = msg;
            			}
HXDLIN( 608)			::utest::Assert_obj::fail(_hx_tmp2,pos);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Assert_obj,stringContains,(void))

void Assert_obj::stringSequence(::Array< ::String > sequence,::String value,::String msg, ::Dynamic pos){
            	HX_STACK_FRAME("utest.Assert","stringSequence",0xc92ada53,"utest.Assert.stringSequence","utest/Assert.hx",620,0x4f910390)
            	HX_STACK_ARG(sequence,"sequence")
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 621)		if (hx::IsNull( value )) {
HXLINE( 623)			::String _hx_tmp;
HXDLIN( 623)			if (hx::IsNull( msg )) {
HXLINE( 623)				_hx_tmp = HX_("null argument value",07,bf,7b,28);
            			}
            			else {
HXLINE( 623)				_hx_tmp = msg;
            			}
HXDLIN( 623)			::utest::Assert_obj::fail(_hx_tmp,pos);
HXLINE( 624)			return;
            		}
HXLINE( 626)		HX_VARI( Int,p) = (int)0;
HXLINE( 627)		{
HXLINE( 627)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 627)			while((_g < sequence->length)){
HXLINE( 627)				HX_VARI( ::String,s) = sequence->__get(_g);
HXDLIN( 627)				++_g;
HXLINE( 629)				HX_VARI( Int,p2) = value.indexOf(s,p);
HXLINE( 630)				if ((p2 < (int)0)) {
HXLINE( 632)					if (hx::IsNull( msg )) {
HXLINE( 634)						msg = ((HX_("expected '",7f,d8,72,cf) + s) + HX_("' after ",5d,2d,d5,b9));
HXLINE( 635)						if ((p > (int)0)) {
HXLINE( 637)							HX_VARI( ::String,cut) = value.substr((int)0,p);
HXLINE( 638)							Bool _hx_tmp1 = (cut.length > (int)30);
HXDLIN( 638)							if (_hx_tmp1) {
HXLINE( 639)								::String _hx_tmp2 = cut.substr((int)-27,null());
HXDLIN( 639)								cut = (HX_("...",ee,0f,23,00) + _hx_tmp2);
            							}
HXLINE( 640)							hx::AddEq(msg,((HX_(" '",07,1c,00,00) + cut) + HX_("'",27,00,00,00)));
            						}
            						else {
HXLINE( 642)							hx::AddEq(msg,HX_(" begin",09,76,c1,7b));
            						}
            					}
HXLINE( 644)					::utest::Assert_obj::fail(msg,pos);
HXLINE( 645)					return;
            				}
HXLINE( 647)				p = (p2 + s.length);
            			}
            		}
HXLINE( 649)		::utest::Assert_obj::isTrue(true,msg,pos);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Assert_obj,stringSequence,(void))

void Assert_obj::pass(::String __o_msg, ::Dynamic pos){
::String msg = __o_msg.Default(HX_HCSTRING("pass expected","\xa7","\xc7","\x7a","\x51"));
            	HX_STACK_FRAME("utest.Assert","pass",0xdbfe3fb2,"utest.Assert.pass","utest/Assert.hx",659,0x4f910390)
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 659)		::utest::Assert_obj::isTrue(true,msg,pos);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assert_obj,pass,(void))

void Assert_obj::fail(::String __o_msg, ::Dynamic pos){
::String msg = __o_msg.Default(HX_HCSTRING("failure expected","\x0e","\x85","\x1b","\x02"));
            	HX_STACK_FRAME("utest.Assert","fail",0xd56214bf,"utest.Assert.fail","utest/Assert.hx",669,0x4f910390)
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 669)		::utest::Assert_obj::isTrue(false,msg,pos);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assert_obj,fail,(void))

void Assert_obj::warn(::String msg){
            	HX_STACK_FRAME("utest.Assert","warn",0xe09ebd27,"utest.Assert.warn","utest/Assert.hx",679,0x4f910390)
            	HX_STACK_ARG(msg,"msg")
HXLINE( 679)		::hx::EnumBase _hx_tmp = ::utest::Assertation_obj::Warning(msg);
HXDLIN( 679)		::utest::Assert_obj::results->add(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assert_obj,warn,(void))

HX_BEGIN_DEFAULT_FUNC(__default_createAsync,Assert_obj)
 ::Dynamic _hx_run( ::Dynamic f, ::Dynamic timeout){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("utest.Assert","__default_createAsync",0xf0a0d3c1,"utest.Assert.__default_createAsync","utest/Assert.hx",694,0x4f910390)
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACK_FRAME("utest.Assert","__default_createAsync",0xf0a0d3c1,"utest.Assert.__default_createAsync","utest/Assert.hx",694,0x4f910390)
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(timeout,"timeout")
HXLINE( 694)		return  ::Dynamic(new _hx_Closure_0());
            	}
HX_END_LOCAL_FUNC2(return )
HX_END_DEFAULT_FUNC

::Dynamic Assert_obj::createAsync;

HX_BEGIN_DEFAULT_FUNC(__default_createEvent,Assert_obj)
 ::Dynamic _hx_run( ::Dynamic f, ::Dynamic timeout){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::Dynamic e){
            			HX_STACK_FRAME("utest.Assert","__default_createEvent",0x40279c9f,"utest.Assert.__default_createEvent","utest/Assert.hx",706,0x4f910390)
            			HX_STACK_ARG(e,"e")
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("utest.Assert","__default_createEvent",0x40279c9f,"utest.Assert.__default_createEvent","utest/Assert.hx",706,0x4f910390)
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(timeout,"timeout")
HXLINE( 706)		return  ::Dynamic(new _hx_Closure_0());
            	}
HX_END_LOCAL_FUNC2(return )
HX_END_DEFAULT_FUNC

::Dynamic Assert_obj::createEvent;

::String Assert_obj::typeToString( ::Dynamic t){
            	HX_STACK_FRAME("utest.Assert","typeToString",0x82956d67,"utest.Assert.typeToString","utest/Assert.hx",709,0x4f910390)
            	HX_STACK_ARG(t,"t")
HXLINE( 710)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 711)			HX_VARI( hx::Class,_t) = ::Type_obj::getClass(t);
HXLINE( 712)			if (hx::IsNotNull( _t )) {
HXLINE( 713)				t = _t;
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 715)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 715)			return ::Type_obj::getClassName(t);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e1 = _hx_e;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 716)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 717)			HX_VARI_NAME( hx::Class,_t1,"_t") = ::Type_obj::getEnum(t);
HXLINE( 718)			if (hx::IsNotNull( _t1 )) {
HXLINE( 719)				t = _t1;
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e2 = _hx_e;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 721)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 721)			return ::Type_obj::getEnumName(t);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e3 = _hx_e;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 722)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 722)			::hx::EnumBase _hx_tmp = ::Type_obj::_hx_typeof(t);
HXDLIN( 722)			return ::Std_obj::string(_hx_tmp);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e4 = _hx_e;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 723)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 723)			return ::Std_obj::string(t);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e5 = _hx_e;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 724)		return HX_("<unable to retrieve type name>",fd,59,3e,a2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assert_obj,typeToString,return )


Assert_obj::Assert_obj()
{
}

bool Assert_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"q") ) { outValue = q_dyn(); return true; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"is") ) { outValue = is_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"same") ) { outValue = same_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pass") ) { outValue = pass_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fail") ) { outValue = fail_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"warn") ) { outValue = warn_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"match") ) { outValue = match_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"isTrue") ) { outValue = isTrue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isNull") ) { outValue = isNull_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sameAs") ) { outValue = sameAs_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"raises") ) { outValue = raises_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"allows") ) { outValue = allows_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"results") ) { outValue = results; return true; }
		if (HX_FIELD_EQ(inName,"isFalse") ) { outValue = isFalse_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"notNull") ) { outValue = notNull_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"contains") ) { outValue = contains_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"notEquals") ) { outValue = notEquals_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isIterable") ) { outValue = isIterable_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isIterator") ) { outValue = isIterator_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"floatEquals") ) { outValue = floatEquals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getTypeName") ) { outValue = getTypeName_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"notContains") ) { outValue = notContains_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"createAsync") ) { outValue = createAsync; return true; }
		if (HX_FIELD_EQ(inName,"createEvent") ) { outValue = createEvent; return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_floatEquals") ) { outValue = _floatEquals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"typeToString") ) { outValue = typeToString_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"stringContains") ) { outValue = stringContains_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stringSequence") ) { outValue = stringSequence_dyn(); return true; }
	}
	return false;
}

bool Assert_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"results") ) { results=ioValue.Cast<  ::List >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"createAsync") ) { createAsync=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"createEvent") ) { createEvent=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Assert_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Assert_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::List*/ ,(void *) &Assert_obj::results,HX_HCSTRING("results","\xf6","\x58","\x57","\x6b")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Assert_obj::createAsync,HX_HCSTRING("createAsync","\xa0","\x36","\xb9","\x4f")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Assert_obj::createEvent,HX_HCSTRING("createEvent","\x7e","\xff","\x3f","\x9f")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Assert_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Assert_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Assert_obj::results,"results");
	HX_MARK_MEMBER_NAME(Assert_obj::createAsync,"createAsync");
	HX_MARK_MEMBER_NAME(Assert_obj::createEvent,"createEvent");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Assert_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Assert_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Assert_obj::results,"results");
	HX_VISIT_MEMBER_NAME(Assert_obj::createAsync,"createAsync");
	HX_VISIT_MEMBER_NAME(Assert_obj::createEvent,"createEvent");
};

#endif

hx::Class Assert_obj::__mClass;

static ::String Assert_obj_sStaticFields[] = {
	HX_HCSTRING("results","\xf6","\x58","\x57","\x6b"),
	HX_HCSTRING("isTrue","\x58","\x6c","\x6a","\x6a"),
	HX_HCSTRING("isFalse","\x59","\xd9","\xd4","\x97"),
	HX_HCSTRING("isNull","\x91","\x63","\x75","\x66"),
	HX_HCSTRING("notNull","\x3a","\x29","\x39","\x3e"),
	HX_HCSTRING("is","\xea","\x5b","\x00","\x00"),
	HX_HCSTRING("notEquals","\xb2","\xcb","\xdb","\x3c"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("match","\x45","\x49","\x23","\x03"),
	HX_HCSTRING("floatEquals","\xfb","\x44","\x14","\x67"),
	HX_HCSTRING("_floatEquals","\xfc","\xf2","\x1d","\xcd"),
	HX_HCSTRING("getTypeName","\xdb","\x38","\xbe","\xdb"),
	HX_HCSTRING("isIterable","\xbc","\xb0","\x3b","\x0e"),
	HX_HCSTRING("isIterator","\xf8","\x5b","\x49","\x0e"),
	HX_HCSTRING("sameAs","\xf8","\xe1","\x41","\x1d"),
	HX_HCSTRING("q","\x71","\x00","\x00","\x00"),
	HX_HCSTRING("same","\x66","\x83","\x4d","\x4c"),
	HX_HCSTRING("raises","\x07","\x6a","\x4c","\xb4"),
	HX_HCSTRING("allows","\xca","\x53","\x9c","\x3f"),
	HX_HCSTRING("contains","\x1f","\x5a","\x7b","\x2c"),
	HX_HCSTRING("notContains","\x52","\xba","\x6c","\x5b"),
	HX_HCSTRING("stringContains","\x10","\xf8","\xdb","\xb6"),
	HX_HCSTRING("stringSequence","\x32","\xbc","\x4d","\x73"),
	HX_HCSTRING("pass","\xd1","\xe4","\x51","\x4a"),
	HX_HCSTRING("fail","\xde","\xb9","\xb5","\x43"),
	HX_HCSTRING("warn","\x46","\x62","\xf2","\x4e"),
	HX_HCSTRING("createAsync","\xa0","\x36","\xb9","\x4f"),
	HX_HCSTRING("createEvent","\x7e","\xff","\x3f","\x9f"),
	HX_HCSTRING("typeToString","\x86","\xc9","\xd1","\x1f"),
	::String(null())
};

void Assert_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("utest.Assert","\x2d","\xf1","\x67","\xf5");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Assert_obj::__GetStatic;
	__mClass->mSetStaticField = &Assert_obj::__SetStatic;
	__mClass->mMarkFunc = Assert_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Assert_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Assert_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Assert_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Assert_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Assert_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Assert_obj::__boot()
{
	createAsync = new __default_createAsync;

	createEvent = new __default_createEvent;

}

} // end namespace utest
