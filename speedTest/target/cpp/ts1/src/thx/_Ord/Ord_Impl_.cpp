// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_OrderingImpl
#include <thx/OrderingImpl.h>
#endif
#ifndef INCLUDED_thx__Ord_Ord_Impl_
#include <thx/_Ord/Ord_Impl_.h>
#endif
#ifndef INCLUDED_thx__Ord_Ordering_Impl_
#include <thx/_Ord/Ordering_Impl_.h>
#endif

namespace thx{
namespace _Ord{

void Ord_Impl__obj::__construct() { }

Dynamic Ord_Impl__obj::__CreateEmpty() { return new Ord_Impl__obj; }

hx::ObjectPtr< Ord_Impl__obj > Ord_Impl__obj::__new()
{
	hx::ObjectPtr< Ord_Impl__obj > _hx_result = new Ord_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Ord_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Ord_Impl__obj > _hx_result = new Ord_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

::hx::EnumBase Ord_Impl__obj::order( ::Dynamic this1, ::Dynamic a0, ::Dynamic a1){
            	HX_STACK_FRAME("thx._Ord.Ord_Impl_","order",0x2498f7ff,"thx._Ord.Ord_Impl_.order","thx/Ord.hx",46,0xc2038108)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(a0,"a0")
            	HX_STACK_ARG(a1,"a1")
HXLINE(  46)		return this1(a0,a1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Ord_Impl__obj,order,return )

 ::Dynamic Ord_Impl__obj::max( ::Dynamic this1, ::Dynamic a0, ::Dynamic a1){
            	HX_STACK_FRAME("thx._Ord.Ord_Impl_","max",0x590da3d5,"thx._Ord.Ord_Impl_.max","thx/Ord.hx",49,0xc2038108)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(a0,"a0")
            	HX_STACK_ARG(a1,"a1")
HXLINE(  49)		HX_VARI( ::hx::EnumBase,_g) = this1(a0,a1);
HXDLIN(  49)		Int _hx_tmp = ( ( ::hx::EnumBase)(_g) )->_hx_getIndex();
HXDLIN(  49)		switch((int)(_hx_tmp)){
            			case (int)1: {
HXLINE(  49)				return a0;
            			}
            			break;
            			case (int)0: case (int)2: {
HXLINE(  49)				return a1;
            			}
            			break;
            		}
HXDLIN(  49)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Ord_Impl__obj,max,return )

 ::Dynamic Ord_Impl__obj::min( ::Dynamic this1, ::Dynamic a0, ::Dynamic a1){
            	HX_STACK_FRAME("thx._Ord.Ord_Impl_","min",0x590daac3,"thx._Ord.Ord_Impl_.min","thx/Ord.hx",55,0xc2038108)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(a0,"a0")
            	HX_STACK_ARG(a1,"a1")
HXLINE(  55)		HX_VARI( ::hx::EnumBase,_g) = this1(a0,a1);
HXDLIN(  55)		Int _hx_tmp = ( ( ::hx::EnumBase)(_g) )->_hx_getIndex();
HXDLIN(  55)		switch((int)(_hx_tmp)){
            			case (int)1: {
HXLINE(  55)				return a1;
            			}
            			break;
            			case (int)0: case (int)2: {
HXLINE(  55)				return a0;
            			}
            			break;
            		}
HXDLIN(  55)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Ord_Impl__obj,min,return )

Bool Ord_Impl__obj::equal( ::Dynamic this1, ::Dynamic a0, ::Dynamic a1){
            	HX_STACK_FRAME("thx._Ord.Ord_Impl_","equal",0x61fad725,"thx._Ord.Ord_Impl_.equal","thx/Ord.hx",61,0xc2038108)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(a0,"a0")
            	HX_STACK_ARG(a1,"a1")
HXLINE(  61)		::hx::EnumBase _hx_tmp = this1(a0,a1);
HXDLIN(  61)		return hx::IsEq( _hx_tmp,::thx::OrderingImpl_obj::EQ_dyn() );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Ord_Impl__obj,equal,return )

 ::Dynamic Ord_Impl__obj::contramap( ::Dynamic this1, ::Dynamic f){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,this1, ::Dynamic,f) HXARGC(2)
            		::hx::EnumBase _hx_run( ::Dynamic b0, ::Dynamic b1){
            			HX_STACK_FRAME("thx._Ord.Ord_Impl_","contramap",0x6dc7eb0c,"thx._Ord.Ord_Impl_.contramap","thx/Ord.hx",64,0xc2038108)
            			HX_STACK_ARG(b0,"b0")
            			HX_STACK_ARG(b1,"b1")
HXLINE(  64)			 ::Dynamic _hx_tmp = f(b0);
HXDLIN(  64)			 ::Dynamic _hx_tmp1 = f(b1);
HXDLIN(  64)			return this1(_hx_tmp,_hx_tmp1);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx._Ord.Ord_Impl_","contramap",0x6dc7eb0c,"thx._Ord.Ord_Impl_.contramap","thx/Ord.hx",64,0xc2038108)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(f,"f")
HXLINE(  64)		return  ::Dynamic(new _hx_Closure_0(this1,f));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Ord_Impl__obj,contramap,return )

 ::Dynamic Ord_Impl__obj::inverse( ::Dynamic this1){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,this1) HXARGC(2)
            		::hx::EnumBase _hx_run( ::Dynamic a0, ::Dynamic a1){
            			HX_STACK_FRAME("thx._Ord.Ord_Impl_","inverse",0x010ed161,"thx._Ord.Ord_Impl_.inverse","thx/Ord.hx",67,0xc2038108)
            			HX_STACK_ARG(a0,"a0")
            			HX_STACK_ARG(a1,"a1")
HXLINE(  67)			return this1(a1,a0);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx._Ord.Ord_Impl_","inverse",0x010ed161,"thx._Ord.Ord_Impl_.inverse","thx/Ord.hx",67,0xc2038108)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  67)		return  ::Dynamic(new _hx_Closure_0(this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Ord_Impl__obj,inverse,return )

Int Ord_Impl__obj::intComparison( ::Dynamic this1, ::Dynamic a0, ::Dynamic a1){
            	HX_STACK_FRAME("thx._Ord.Ord_Impl_","intComparison",0x26f72d89,"thx._Ord.Ord_Impl_.intComparison","thx/Ord.hx",70,0xc2038108)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(a0,"a0")
            	HX_STACK_ARG(a1,"a1")
HXLINE(  70)		HX_VARI( ::hx::EnumBase,_g) = this1(a0,a1);
HXDLIN(  70)		Int _hx_tmp = ( ( ::hx::EnumBase)(_g) )->_hx_getIndex();
HXDLIN(  70)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE(  70)				return (int)-1;
            			}
            			break;
            			case (int)1: {
HXLINE(  70)				return (int)1;
            			}
            			break;
            			case (int)2: {
HXLINE(  70)				return (int)0;
            			}
            			break;
            		}
HXDLIN(  70)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Ord_Impl__obj,intComparison,return )

 ::Dynamic Ord_Impl__obj::fromIntComparison( ::Dynamic f){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f) HXARGC(2)
            		::hx::EnumBase _hx_run( ::Dynamic a, ::Dynamic b){
            			HX_STACK_FRAME("thx._Ord.Ord_Impl_","fromIntComparison",0x3f5dca3f,"thx._Ord.Ord_Impl_.fromIntComparison","thx/Ord.hx",77,0xc2038108)
            			HX_STACK_ARG(a,"a")
            			HX_STACK_ARG(b,"b")
HXLINE(  77)			Int _hx_tmp = ( (Int)(f(a,b)) );
HXDLIN(  77)			return ::thx::_Ord::Ordering_Impl__obj::fromInt(_hx_tmp);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx._Ord.Ord_Impl_","fromIntComparison",0x3f5dca3f,"thx._Ord.Ord_Impl_.fromIntComparison","thx/Ord.hx",77,0xc2038108)
            	HX_STACK_ARG(f,"f")
HXLINE(  77)		return  ::Dynamic(new _hx_Closure_0(f));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Ord_Impl__obj,fromIntComparison,return )

 ::Dynamic Ord_Impl__obj::forComparable(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		::hx::EnumBase _hx_run( ::Dynamic a, ::Dynamic b){
            			HX_STACK_FRAME("thx._Ord.Ord_Impl_","forComparable",0x9061ae34,"thx._Ord.Ord_Impl_.forComparable","thx/Ord.hx",80,0xc2038108)
            			HX_STACK_ARG(a,"a")
            			HX_STACK_ARG(b,"b")
HXLINE(  80)			Int _hx_tmp = ( (Int)( ::Dynamic(a->__Field(HX_("compareTo",80,95,5c,02),hx::paccDynamic))(b)) );
HXDLIN(  80)			return ::thx::_Ord::Ordering_Impl__obj::fromInt(_hx_tmp);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx._Ord.Ord_Impl_","forComparable",0x9061ae34,"thx._Ord.Ord_Impl_.forComparable","thx/Ord.hx",80,0xc2038108)
HXLINE(  80)		return  ::Dynamic(new _hx_Closure_0());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Ord_Impl__obj,forComparable,return )

 ::Dynamic Ord_Impl__obj::forComparableOrd(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		::hx::EnumBase _hx_run( ::Dynamic a, ::Dynamic b){
            			HX_STACK_FRAME("thx._Ord.Ord_Impl_","forComparableOrd",0x47fa800d,"thx._Ord.Ord_Impl_.forComparableOrd","thx/Ord.hx",83,0xc2038108)
            			HX_STACK_ARG(a,"a")
            			HX_STACK_ARG(b,"b")
HXLINE(  83)			return  ::Dynamic(a->__Field(HX_("compareTo",80,95,5c,02),hx::paccDynamic))(b);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx._Ord.Ord_Impl_","forComparableOrd",0x47fa800d,"thx._Ord.Ord_Impl_.forComparableOrd","thx/Ord.hx",83,0xc2038108)
HXLINE(  83)		return  ::Dynamic(new _hx_Closure_0());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Ord_Impl__obj,forComparableOrd,return )


Ord_Impl__obj::Ord_Impl__obj()
{
}

bool Ord_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"max") ) { outValue = max_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"min") ) { outValue = min_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"order") ) { outValue = order_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equal") ) { outValue = equal_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"inverse") ) { outValue = inverse_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"contramap") ) { outValue = contramap_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"intComparison") ) { outValue = intComparison_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"forComparable") ) { outValue = forComparable_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"forComparableOrd") ) { outValue = forComparableOrd_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"fromIntComparison") ) { outValue = fromIntComparison_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Ord_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Ord_Impl__obj_sStaticStorageInfo = 0;
#endif

static void Ord_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Ord_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Ord_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Ord_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class Ord_Impl__obj::__mClass;

static ::String Ord_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("order","\x8e","\xf0","\x20","\x35"),
	HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"),
	HX_HCSTRING("min","\x92","\x11","\x53","\x00"),
	HX_HCSTRING("equal","\xb4","\xcf","\x82","\x72"),
	HX_HCSTRING("contramap","\x1b","\xd7","\xf8","\x83"),
	HX_HCSTRING("inverse","\xb0","\x4b","\xf1","\x3d"),
	HX_HCSTRING("intComparison","\x18","\xcd","\x10","\x49"),
	HX_HCSTRING("fromIntComparison","\x4e","\xdd","\x7f","\xee"),
	HX_HCSTRING("forComparable","\xc3","\x4d","\x7b","\xb2"),
	HX_HCSTRING("forComparableOrd","\xde","\xc3","\xf3","\x32"),
	::String(null())
};

void Ord_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx._Ord.Ord_Impl_","\x1f","\x4d","\x3c","\xb8");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Ord_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Ord_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Ord_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Ord_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Ord_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Ord_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Ord_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace _Ord
