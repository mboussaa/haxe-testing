// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_thx_Dates
#include <thx/Dates.h>
#endif
#ifndef INCLUDED_thx_Either
#include <thx/Either.h>
#endif
#ifndef INCLUDED_thx_TimePeriod
#include <thx/TimePeriod.h>
#endif
#ifndef INCLUDED_thx__Timestamp_Timestamp_Impl_
#include <thx/_Timestamp/Timestamp_Impl_.h>
#endif

namespace thx{

void Dates_obj::__construct() { }

Dynamic Dates_obj::__CreateEmpty() { return new Dates_obj; }

hx::ObjectPtr< Dates_obj > Dates_obj::__new()
{
	hx::ObjectPtr< Dates_obj > _hx_result = new Dates_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Dates_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Dates_obj > _hx_result = new Dates_obj();
	_hx_result->__construct();
	return _hx_result;
}

Int Dates_obj::compare( ::Date a, ::Date b){
            	HX_STACK_FRAME("thx.Dates","compare",0x52e34432,"thx.Dates.compare","thx/Dates.hx",20,0xca6143a4)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(  20)		HX_VARI_NAME( Float,a1,"a") = a->getTime();
HXDLIN(  20)		HX_VARI_NAME( Float,b1,"b") = b->getTime();
HXDLIN(  20)		if ((a1 < b1)) {
HXLINE(  20)			return (int)-1;
            		}
            		else {
HXLINE(  20)			if ((a1 > b1)) {
HXLINE(  20)				return (int)1;
            			}
            			else {
HXLINE(  20)				return (int)0;
            			}
            		}
HXDLIN(  20)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dates_obj,compare,return )

 ::Date Dates_obj::create(Int year, ::Dynamic __o_month, ::Dynamic __o_day, ::Dynamic __o_hour, ::Dynamic __o_minute, ::Dynamic __o_second){
 ::Dynamic month = __o_month.Default(0);
 ::Dynamic day = __o_day.Default(1);
 ::Dynamic hour = __o_hour.Default(0);
 ::Dynamic minute = __o_minute.Default(0);
 ::Dynamic second = __o_second.Default(0);
            	HX_STACK_FRAME("thx.Dates","create",0xde91ac0f,"thx.Dates.create","thx/Dates.hx",29,0xca6143a4)
            	HX_STACK_ARG(year,"year")
            	HX_STACK_ARG(month,"month")
            	HX_STACK_ARG(day,"day")
            	HX_STACK_ARG(hour,"hour")
            	HX_STACK_ARG(minute,"minute")
            	HX_STACK_ARG(second,"second")
HXLINE(  31)		Int _hx_tmp = ::Math_obj::floor(((Float)second / (Float)(int)60));
HXDLIN(  31)		hx::AddEq(minute,_hx_tmp);
HXLINE(  32)		hx::ModEq(second,(int)60);
HXLINE(  33)		Bool _hx_tmp1 = hx::IsLess( second,(int)0 );
HXDLIN(  33)		if (_hx_tmp1) {
HXLINE(  33)			hx::AddEq(second,(int)60);
            		}
HXLINE(  35)		Int _hx_tmp2 = ::Math_obj::floor(((Float)minute / (Float)(int)60));
HXDLIN(  35)		hx::AddEq(hour,_hx_tmp2);
HXLINE(  36)		hx::ModEq(minute,(int)60);
HXLINE(  37)		Bool _hx_tmp3 = hx::IsLess( minute,(int)0 );
HXDLIN(  37)		if (_hx_tmp3) {
HXLINE(  37)			hx::AddEq(minute,(int)60);
            		}
HXLINE(  39)		Int _hx_tmp4 = ::Math_obj::floor(((Float)hour / (Float)(int)24));
HXDLIN(  39)		hx::AddEq(day,_hx_tmp4);
HXLINE(  40)		hx::ModEq(hour,(int)24);
HXLINE(  41)		Bool _hx_tmp5 = hx::IsLess( hour,(int)0 );
HXDLIN(  41)		if (_hx_tmp5) {
HXLINE(  41)			hx::AddEq(hour,(int)24);
            		}
HXLINE(  43)		if (hx::IsEq( day,(int)0 )) {
HXLINE(  44)			--month;
HXLINE(  45)			Bool _hx_tmp6 = hx::IsLess( month,(int)0 );
HXDLIN(  45)			if (_hx_tmp6) {
HXLINE(  46)				month = (int)11;
HXLINE(  47)				--year;
            			}
HXLINE(  49)			day = ::thx::Dates_obj::daysInMonth(year,month);
            		}
HXLINE(  52)		Int _hx_tmp7 = ::Math_obj::floor(((Float)month / (Float)(int)12));
HXDLIN(  52)		hx::AddEq(year,_hx_tmp7);
HXLINE(  53)		hx::ModEq(month,(int)12);
HXLINE(  54)		Bool _hx_tmp8 = hx::IsLess( month,(int)0 );
HXDLIN(  54)		if (_hx_tmp8) {
HXLINE(  54)			hx::AddEq(month,(int)12);
            		}
HXLINE(  56)		HX_VARI( Int,days) = ::thx::Dates_obj::daysInMonth(year,month);
HXLINE(  57)		while(hx::IsGreater( day,days )){
HXLINE(  58)			Bool _hx_tmp9 = hx::IsGreater( day,days );
HXDLIN(  58)			if (_hx_tmp9) {
HXLINE(  59)				hx::SubEq(day,days);
HXLINE(  60)				++month;
            			}
HXLINE(  62)			Bool _hx_tmp10 = hx::IsGreater( month,(int)11 );
HXDLIN(  62)			if (_hx_tmp10) {
HXLINE(  63)				hx::SubEq(month,(int)12);
HXLINE(  64)				++year;
            			}
HXLINE(  66)			days = ::thx::Dates_obj::daysInMonth(year,month);
            		}
HXLINE(  69)		return  ::Date_obj::__new(year,month,day,hour,minute,second);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Dates_obj,create,return )

::Array< ::Dynamic> Dates_obj::daysRange( ::Date start, ::Date end){
            	HX_STACK_FRAME("thx.Dates","daysRange",0x6f6ce073,"thx.Dates.daysRange","thx/Dates.hx",78,0xca6143a4)
            	HX_STACK_ARG(start,"start")
            	HX_STACK_ARG(end,"end")
HXLINE(  79)		Int _hx_tmp = ::thx::Dates_obj::compare(end,start);
HXDLIN(  79)		if ((_hx_tmp < (int)0)) {
HXLINE(  79)			return ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE(  80)		HX_VARI( ::Array< ::Dynamic>,days) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  81)		while(true){
HXLINE(  81)			Bool _hx_tmp1 = !(!(::thx::Dates_obj::sameDay(start,end)));
HXDLIN(  81)			if (_hx_tmp1) {
HXLINE(  81)				goto _hx_goto_1;
            			}
HXLINE(  82)			days->push(start);
HXLINE(  83)			start = ::thx::Dates_obj::jump(start,::thx::TimePeriod_obj::Day_dyn(),(int)1);
            		}
            		_hx_goto_1:;
HXLINE(  85)		days->push(end);
HXLINE(  86)		return days;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dates_obj,daysRange,return )

Bool Dates_obj::equals( ::Date self, ::Date other){
            	HX_STACK_FRAME("thx.Dates","equals",0x22753352,"thx.Dates.equals","thx/Dates.hx",93,0xca6143a4)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(other,"other")
HXLINE(  93)		Float _hx_tmp = self->getTime();
HXDLIN(  93)		Float _hx_tmp1 = other->getTime();
HXDLIN(  93)		return (_hx_tmp == _hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dates_obj,equals,return )

Bool Dates_obj::nearEquals( ::Date self, ::Date other, ::Dynamic __o_units,::hx::EnumBase period){
 ::Dynamic units = __o_units.Default(1);
            	HX_STACK_FRAME("thx.Dates","nearEquals",0x60973bda,"thx.Dates.nearEquals","thx/Dates.hx",102,0xca6143a4)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(units,"units")
            	HX_STACK_ARG(period,"period")
HXLINE( 103)		Bool _hx_tmp = hx::IsNull( period );
HXDLIN( 103)		if (_hx_tmp) {
HXLINE( 104)			period = ::thx::TimePeriod_obj::Second_dyn();
            		}
HXLINE( 105)		Bool _hx_tmp1 = hx::IsLess( units,(int)0 );
HXDLIN( 105)		if (_hx_tmp1) {
HXLINE( 106)			units = -(units);
            		}
HXLINE( 107)		HX_VARI(  ::Date,min) = ::thx::Dates_obj::jump(self,period,-(units));
HXDLIN( 107)		HX_VARI(  ::Date,max) = ::thx::Dates_obj::jump(self,period,units);
HXLINE( 109)		Int _hx_tmp2 = ::thx::Dates_obj::compare(min,other);
HXDLIN( 109)		if ((_hx_tmp2 <= (int)0)) {
HXLINE( 109)			Int _hx_tmp3 = ::thx::Dates_obj::compare(max,other);
HXDLIN( 109)			return (_hx_tmp3 >= (int)0);
            		}
            		else {
HXLINE( 109)			return false;
            		}
HXDLIN( 109)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Dates_obj,nearEquals,return )

Bool Dates_obj::greater( ::Date self, ::Date other){
            	HX_STACK_FRAME("thx.Dates","greater",0x873abc87,"thx.Dates.greater","thx/Dates.hx",116,0xca6143a4)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(other,"other")
HXLINE( 116)		Int _hx_tmp = ::thx::Dates_obj::compare(self,other);
HXDLIN( 116)		return (_hx_tmp > (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dates_obj,greater,return )

Bool Dates_obj::more( ::Date self, ::Date other){
            	HX_STACK_FRAME("thx.Dates","more",0x9a5da9e8,"thx.Dates.more","thx/Dates.hx",120,0xca6143a4)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(other,"other")
HXLINE( 120)		Int _hx_tmp = ::thx::Dates_obj::compare(self,other);
HXDLIN( 120)		return (_hx_tmp > (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dates_obj,more,return )

Bool Dates_obj::less( ::Date self, ::Date other){
            	HX_STACK_FRAME("thx.Dates","less",0x99acddac,"thx.Dates.less","thx/Dates.hx",126,0xca6143a4)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(other,"other")
HXLINE( 126)		Int _hx_tmp = ::thx::Dates_obj::compare(self,other);
HXDLIN( 126)		return (_hx_tmp < (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dates_obj,less,return )

Bool Dates_obj::greaterEquals( ::Date self, ::Date other){
            	HX_STACK_FRAME("thx.Dates","greaterEquals",0x5448be26,"thx.Dates.greaterEquals","thx/Dates.hx",132,0xca6143a4)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(other,"other")
HXLINE( 132)		Int _hx_tmp = ::thx::Dates_obj::compare(self,other);
HXDLIN( 132)		return (_hx_tmp >= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dates_obj,greaterEquals,return )

Bool Dates_obj::moreEqual( ::Date self, ::Date other){
            	HX_STACK_FRAME("thx.Dates","moreEqual",0xccf9acac,"thx.Dates.moreEqual","thx/Dates.hx",136,0xca6143a4)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(other,"other")
HXLINE( 136)		Int _hx_tmp = ::thx::Dates_obj::compare(self,other);
HXDLIN( 136)		return (_hx_tmp >= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dates_obj,moreEqual,return )

Bool Dates_obj::lessEquals( ::Date self, ::Date other){
            	HX_STACK_FRAME("thx.Dates","lessEquals",0x0f23c90b,"thx.Dates.lessEquals","thx/Dates.hx",142,0xca6143a4)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(other,"other")
HXLINE( 142)		Int _hx_tmp = ::thx::Dates_obj::compare(self,other);
HXDLIN( 142)		return (_hx_tmp <= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dates_obj,lessEquals,return )

Bool Dates_obj::lessEqual( ::Date self, ::Date other){
            	HX_STACK_FRAME("thx.Dates","lessEqual",0x80a45268,"thx.Dates.lessEqual","thx/Dates.hx",146,0xca6143a4)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(other,"other")
HXLINE( 146)		Int _hx_tmp = ::thx::Dates_obj::compare(self,other);
HXDLIN( 146)		return (_hx_tmp <= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dates_obj,lessEqual,return )

Bool Dates_obj::isLeapYear(Int year){
            	HX_STACK_FRAME("thx.Dates","isLeapYear",0xe6b4ca22,"thx.Dates.isLeapYear","thx/Dates.hx",154,0xca6143a4)
            	HX_STACK_ARG(year,"year")
HXLINE( 156)		if ((hx::Mod(year,(int)4) != (int)0)) {
HXLINE( 156)			return false;
            		}
HXLINE( 158)		if ((hx::Mod(year,(int)100) == (int)0)) {
HXLINE( 159)			return (hx::Mod(year,(int)400) == (int)0);
            		}
HXLINE( 161)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Dates_obj,isLeapYear,return )

Bool Dates_obj::isInLeapYear( ::Date d){
            	HX_STACK_FRAME("thx.Dates","isInLeapYear",0xc712f067,"thx.Dates.isInLeapYear","thx/Dates.hx",170,0xca6143a4)
            	HX_STACK_ARG(d,"d")
HXLINE( 170)		Int _hx_tmp = d->getFullYear();
HXDLIN( 170)		return ::thx::Dates_obj::isLeapYear(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Dates_obj,isInLeapYear,return )

Int Dates_obj::daysInMonth(Int year,Int month){
            	HX_STACK_FRAME("thx.Dates","daysInMonth",0x8e367151,"thx.Dates.daysInMonth","thx/Dates.hx",184,0xca6143a4)
            	HX_STACK_ARG(year,"year")
            	HX_STACK_ARG(month,"month")
HXLINE( 184)		switch((int)(month)){
            			case (int)1: {
HXLINE( 187)				if (::thx::Dates_obj::isLeapYear(year)) {
HXLINE( 184)					return (int)29;
            				}
            				else {
HXLINE( 184)					return (int)28;
            				}
            			}
            			break;
            			case (int)0: case (int)2: case (int)4: case (int)6: case (int)7: case (int)9: case (int)11: {
HXLINE( 184)				return (int)31;
            			}
            			break;
            			case (int)3: case (int)5: case (int)8: case (int)10: {
HXLINE( 184)				return (int)30;
            			}
            			break;
            			default:{
HXLINE( 188)				HX_STACK_DO_THROW(((HX_("Invalid month \"",f9,a8,c8,b4) + month) + HX_("\".  Month should be a number, Jan=0, Dec=11",c1,f4,eb,58)));
            			}
            		}
HXLINE( 184)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dates_obj,daysInMonth,return )

Int Dates_obj::numDaysInMonth(Int month,Int year){
            	HX_STACK_FRAME("thx.Dates","numDaysInMonth",0xe72c7eb1,"thx.Dates.numDaysInMonth","thx/Dates.hx",193,0xca6143a4)
            	HX_STACK_ARG(month,"month")
            	HX_STACK_ARG(year,"year")
HXLINE( 193)		return ::thx::Dates_obj::daysInMonth(year,month);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dates_obj,numDaysInMonth,return )

Int Dates_obj::daysInThisMonth( ::Date d){
            	HX_STACK_FRAME("thx.Dates","daysInThisMonth",0x880ae293,"thx.Dates.daysInThisMonth","thx/Dates.hx",202,0xca6143a4)
            	HX_STACK_ARG(d,"d")
HXLINE( 202)		Int _hx_tmp = d->getFullYear();
HXDLIN( 202)		Int _hx_tmp1 = d->getMonth();
HXDLIN( 202)		return ::thx::Dates_obj::daysInMonth(_hx_tmp,_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Dates_obj,daysInThisMonth,return )

Int Dates_obj::numDaysInThisMonth( ::Date d){
            	HX_STACK_FRAME("thx.Dates","numDaysInThisMonth",0x10031ff3,"thx.Dates.numDaysInThisMonth","thx/Dates.hx",206,0xca6143a4)
            	HX_STACK_ARG(d,"d")
HXLINE( 206)		return ::thx::Dates_obj::daysInThisMonth(d);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Dates_obj,numDaysInThisMonth,return )

Bool Dates_obj::sameYear( ::Date self, ::Date other){
            	HX_STACK_FRAME("thx.Dates","sameYear",0x26371416,"thx.Dates.sameYear","thx/Dates.hx",212,0xca6143a4)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(other,"other")
HXLINE( 212)		Int _hx_tmp = self->getFullYear();
HXDLIN( 212)		Int _hx_tmp1 = other->getFullYear();
HXDLIN( 212)		return (_hx_tmp == _hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dates_obj,sameYear,return )

Bool Dates_obj::sameMonth( ::Date self, ::Date other){
            	HX_STACK_FRAME("thx.Dates","sameMonth",0x67d18ac7,"thx.Dates.sameMonth","thx/Dates.hx",218,0xca6143a4)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(other,"other")
HXLINE( 218)		Bool _hx_tmp = ::thx::Dates_obj::sameYear(self,other);
HXDLIN( 218)		if (_hx_tmp) {
HXLINE( 218)			Int _hx_tmp1 = self->getMonth();
HXDLIN( 218)			Int _hx_tmp2 = other->getMonth();
HXDLIN( 218)			return (_hx_tmp1 == _hx_tmp2);
            		}
            		else {
HXLINE( 218)			return false;
            		}
HXDLIN( 218)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dates_obj,sameMonth,return )

Bool Dates_obj::sameDay( ::Date self, ::Date other){
            	HX_STACK_FRAME("thx.Dates","sameDay",0x4be03a23,"thx.Dates.sameDay","thx/Dates.hx",224,0xca6143a4)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(other,"other")
HXLINE( 224)		Bool _hx_tmp = ::thx::Dates_obj::sameMonth(self,other);
HXDLIN( 224)		if (_hx_tmp) {
HXLINE( 224)			Int _hx_tmp1 = self->getDate();
HXDLIN( 224)			Int _hx_tmp2 = other->getDate();
HXDLIN( 224)			return (_hx_tmp1 == _hx_tmp2);
            		}
            		else {
HXLINE( 224)			return false;
            		}
HXDLIN( 224)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dates_obj,sameDay,return )

Bool Dates_obj::sameHour( ::Date self, ::Date other){
            	HX_STACK_FRAME("thx.Dates","sameHour",0x1b021b7d,"thx.Dates.sameHour","thx/Dates.hx",230,0xca6143a4)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(other,"other")
HXLINE( 230)		Bool _hx_tmp = ::thx::Dates_obj::sameDay(self,other);
HXDLIN( 230)		if (_hx_tmp) {
HXLINE( 230)			Int _hx_tmp1 = self->getHours();
HXDLIN( 230)			Int _hx_tmp2 = other->getHours();
HXDLIN( 230)			return (_hx_tmp1 == _hx_tmp2);
            		}
            		else {
HXLINE( 230)			return false;
            		}
HXDLIN( 230)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dates_obj,sameHour,return )

Bool Dates_obj::sameMinute( ::Date self, ::Date other){
            	HX_STACK_FRAME("thx.Dates","sameMinute",0xfb21356d,"thx.Dates.sameMinute","thx/Dates.hx",236,0xca6143a4)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(other,"other")
HXLINE( 236)		Bool _hx_tmp = ::thx::Dates_obj::sameHour(self,other);
HXDLIN( 236)		if (_hx_tmp) {
HXLINE( 236)			Int _hx_tmp1 = self->getMinutes();
HXDLIN( 236)			Int _hx_tmp2 = other->getMinutes();
HXDLIN( 236)			return (_hx_tmp1 == _hx_tmp2);
            		}
            		else {
HXLINE( 236)			return false;
            		}
HXDLIN( 236)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dates_obj,sameMinute,return )

 ::Date Dates_obj::snapNext( ::Date date,::hx::EnumBase period){
            	HX_STACK_FRAME("thx.Dates","snapNext",0xc4a8e430,"thx.Dates.snapNext","thx/Dates.hx",246,0xca6143a4)
            	HX_STACK_ARG(date,"date")
            	HX_STACK_ARG(period,"period")
HXLINE( 246)		HX_VARI_NAME( Float,this1,"this") = ::thx::_Timestamp::Timestamp_Impl__obj::snapNext(date->getTime(),period);
HXDLIN( 246)		return ::Date_obj::fromTime(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dates_obj,snapNext,return )

 ::Date Dates_obj::snapPrev( ::Date date,::hx::EnumBase period){
            	HX_STACK_FRAME("thx.Dates","snapPrev",0xc6051e30,"thx.Dates.snapPrev","thx/Dates.hx",256,0xca6143a4)
            	HX_STACK_ARG(date,"date")
            	HX_STACK_ARG(period,"period")
HXLINE( 256)		HX_VARI_NAME( Float,this1,"this") = ::thx::_Timestamp::Timestamp_Impl__obj::snapPrev(date->getTime(),period);
HXDLIN( 256)		return ::Date_obj::fromTime(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dates_obj,snapPrev,return )

 ::Date Dates_obj::snapTo( ::Date date,::hx::EnumBase period){
            	HX_STACK_FRAME("thx.Dates","snapTo",0xf4138b78,"thx.Dates.snapTo","thx/Dates.hx",266,0xca6143a4)
            	HX_STACK_ARG(date,"date")
            	HX_STACK_ARG(period,"period")
HXLINE( 266)		HX_VARI_NAME( Float,this1,"this") = ::thx::_Timestamp::Timestamp_Impl__obj::snapTo(date->getTime(),period);
HXDLIN( 266)		return ::Date_obj::fromTime(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dates_obj,snapTo,return )

 ::Date Dates_obj::jump( ::Date date,::hx::EnumBase period,Int amount){
            	HX_STACK_FRAME("thx.Dates","jump",0x98668f41,"thx.Dates.jump","thx/Dates.hx",279,0xca6143a4)
            	HX_STACK_ARG(date,"date")
            	HX_STACK_ARG(period,"period")
            	HX_STACK_ARG(amount,"amount")
HXLINE( 280)		HX_VARI( Int,sec) = date->getSeconds();
HXDLIN( 280)		HX_VARI( Int,min) = date->getMinutes();
HXDLIN( 280)		HX_VARI( Int,hour) = date->getHours();
HXDLIN( 280)		HX_VARI( Int,day) = date->getDate();
HXDLIN( 280)		HX_VARI( Int,month) = date->getMonth();
HXDLIN( 280)		HX_VARI( Int,year) = date->getFullYear();
HXLINE( 287)		Int _hx_tmp = ( ( ::hx::EnumBase)(period) )->_hx_getIndex();
HXDLIN( 287)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE( 288)				hx::AddEq(sec,amount);
            			}
            			break;
            			case (int)1: {
HXLINE( 289)				hx::AddEq(min,amount);
            			}
            			break;
            			case (int)2: {
HXLINE( 290)				hx::AddEq(hour,amount);
            			}
            			break;
            			case (int)3: {
HXLINE( 291)				hx::AddEq(day,amount);
            			}
            			break;
            			case (int)4: {
HXLINE( 292)				hx::AddEq(day,(amount * (int)7));
            			}
            			break;
            			case (int)5: {
HXLINE( 293)				hx::AddEq(month,amount);
            			}
            			break;
            			case (int)6: {
HXLINE( 294)				hx::AddEq(year,amount);
            			}
            			break;
            		}
HXLINE( 297)		return ::thx::Dates_obj::create(year,month,day,hour,min,sec);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Dates_obj,jump,return )

 ::Date Dates_obj::max( ::Date self, ::Date other){
            	HX_STACK_FRAME("thx.Dates","max",0x8a732bb1,"thx.Dates.max","thx/Dates.hx",304,0xca6143a4)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(other,"other")
HXLINE( 304)		Float _hx_tmp = self->getTime();
HXDLIN( 304)		Float _hx_tmp1 = other->getTime();
HXDLIN( 304)		if ((_hx_tmp > _hx_tmp1)) {
HXLINE( 304)			return self;
            		}
            		else {
HXLINE( 304)			return other;
            		}
HXDLIN( 304)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dates_obj,max,return )

 ::Date Dates_obj::min( ::Date self, ::Date other){
            	HX_STACK_FRAME("thx.Dates","min",0x8a73329f,"thx.Dates.min","thx/Dates.hx",310,0xca6143a4)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(other,"other")
HXLINE( 310)		Float _hx_tmp = self->getTime();
HXDLIN( 310)		Float _hx_tmp1 = other->getTime();
HXDLIN( 310)		if ((_hx_tmp < _hx_tmp1)) {
HXLINE( 310)			return self;
            		}
            		else {
HXLINE( 310)			return other;
            		}
HXDLIN( 310)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dates_obj,min,return )

 ::Date Dates_obj::snapToWeekDay( ::Date date,Int day, ::Dynamic __o_firstDayOfWk){
 ::Dynamic firstDayOfWk = __o_firstDayOfWk.Default(0);
            	HX_STACK_FRAME("thx.Dates","snapToWeekDay",0x2a267a30,"thx.Dates.snapToWeekDay","thx/Dates.hx",322,0xca6143a4)
            	HX_STACK_ARG(date,"date")
            	HX_STACK_ARG(day,"day")
            	HX_STACK_ARG(firstDayOfWk,"firstDayOfWk")
HXLINE( 323)		HX_VARI( Int,d) = date->getDay();
HXDLIN( 323)		HX_VARI( Int,s) = day;
HXLINE( 327)		Bool _hx_tmp = hx::IsLess( s,firstDayOfWk );
HXDLIN( 327)		if (_hx_tmp) {
HXLINE( 327)			hx::AddEq(s,(int)7);
            		}
HXLINE( 328)		Bool _hx_tmp1 = hx::IsLess( d,firstDayOfWk );
HXDLIN( 328)		if (_hx_tmp1) {
HXLINE( 328)			hx::AddEq(d,(int)7);
            		}
HXLINE( 329)		return ::thx::Dates_obj::jump(date,::thx::TimePeriod_obj::Day_dyn(),(s - d));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Dates_obj,snapToWeekDay,return )

 ::Date Dates_obj::snapNextWeekDay( ::Date date,Int day){
            	HX_STACK_FRAME("thx.Dates","snapNextWeekDay",0x39ae2878,"thx.Dates.snapNextWeekDay","thx/Dates.hx",341,0xca6143a4)
            	HX_STACK_ARG(date,"date")
            	HX_STACK_ARG(day,"day")
HXLINE( 342)		HX_VARI( Int,d) = date->getDay();
HXDLIN( 342)		HX_VARI( Int,s) = day;
HXLINE( 346)		Bool _hx_tmp = (s < d);
HXDLIN( 346)		if (_hx_tmp) {
HXLINE( 346)			hx::AddEq(s,(int)7);
            		}
HXLINE( 347)		return ::thx::Dates_obj::jump(date,::thx::TimePeriod_obj::Day_dyn(),(s - d));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dates_obj,snapNextWeekDay,return )

 ::Date Dates_obj::snapPrevWeekDay( ::Date date,Int day){
            	HX_STACK_FRAME("thx.Dates","snapPrevWeekDay",0xc9ad2e78,"thx.Dates.snapPrevWeekDay","thx/Dates.hx",359,0xca6143a4)
            	HX_STACK_ARG(date,"date")
            	HX_STACK_ARG(day,"day")
HXLINE( 360)		HX_VARI( Int,d) = date->getDay();
HXDLIN( 360)		HX_VARI( Int,s) = day;
HXLINE( 364)		Bool _hx_tmp = (s > d);
HXDLIN( 364)		if (_hx_tmp) {
HXLINE( 364)			hx::SubEq(s,(int)7);
            		}
HXLINE( 365)		return ::thx::Dates_obj::jump(date,::thx::TimePeriod_obj::Day_dyn(),(s - d));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dates_obj,snapPrevWeekDay,return )

 ::Date Dates_obj::prevYear( ::Date d){
            	HX_STACK_FRAME("thx.Dates","prevYear",0xd4819a23,"thx.Dates.prevYear","thx/Dates.hx",372,0xca6143a4)
            	HX_STACK_ARG(d,"d")
HXLINE( 372)		return ::thx::Dates_obj::jump(d,::thx::TimePeriod_obj::Year_dyn(),(int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Dates_obj,prevYear,return )

 ::Date Dates_obj::nextYear( ::Date d){
            	HX_STACK_FRAME("thx.Dates","nextYear",0xb7806023,"thx.Dates.nextYear","thx/Dates.hx",378,0xca6143a4)
            	HX_STACK_ARG(d,"d")
HXLINE( 378)		return ::thx::Dates_obj::jump(d,::thx::TimePeriod_obj::Year_dyn(),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Dates_obj,nextYear,return )

 ::Date Dates_obj::prevMonth( ::Date d){
            	HX_STACK_FRAME("thx.Dates","prevMonth",0x3abc501a,"thx.Dates.prevMonth","thx/Dates.hx",384,0xca6143a4)
            	HX_STACK_ARG(d,"d")
HXLINE( 384)		return ::thx::Dates_obj::jump(d,::thx::TimePeriod_obj::Month_dyn(),(int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Dates_obj,prevMonth,return )

 ::Date Dates_obj::nextMonth( ::Date d){
            	HX_STACK_FRAME("thx.Dates","nextMonth",0xf6aaca1a,"thx.Dates.nextMonth","thx/Dates.hx",390,0xca6143a4)
            	HX_STACK_ARG(d,"d")
HXLINE( 390)		return ::thx::Dates_obj::jump(d,::thx::TimePeriod_obj::Month_dyn(),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Dates_obj,nextMonth,return )

 ::Date Dates_obj::prevWeek( ::Date d){
            	HX_STACK_FRAME("thx.Dates","prevWeek",0xd32f305a,"thx.Dates.prevWeek","thx/Dates.hx",396,0xca6143a4)
            	HX_STACK_ARG(d,"d")
HXLINE( 396)		return ::thx::Dates_obj::jump(d,::thx::TimePeriod_obj::Week_dyn(),(int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Dates_obj,prevWeek,return )

 ::Date Dates_obj::nextWeek( ::Date d){
            	HX_STACK_FRAME("thx.Dates","nextWeek",0xb62df65a,"thx.Dates.nextWeek","thx/Dates.hx",402,0xca6143a4)
            	HX_STACK_ARG(d,"d")
HXLINE( 402)		return ::thx::Dates_obj::jump(d,::thx::TimePeriod_obj::Week_dyn(),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Dates_obj,nextWeek,return )

 ::Date Dates_obj::prevDay( ::Date d){
            	HX_STACK_FRAME("thx.Dates","prevDay",0x0b38f4b6,"thx.Dates.prevDay","thx/Dates.hx",408,0xca6143a4)
            	HX_STACK_ARG(d,"d")
HXLINE( 408)		return ::thx::Dates_obj::jump(d,::thx::TimePeriod_obj::Day_dyn(),(int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Dates_obj,prevDay,return )

 ::Date Dates_obj::nextDay( ::Date d){
            	HX_STACK_FRAME("thx.Dates","nextDay",0x74b4eeb6,"thx.Dates.nextDay","thx/Dates.hx",414,0xca6143a4)
            	HX_STACK_ARG(d,"d")
HXLINE( 414)		return ::thx::Dates_obj::jump(d,::thx::TimePeriod_obj::Day_dyn(),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Dates_obj,nextDay,return )

 ::Date Dates_obj::prevHour( ::Date d){
            	HX_STACK_FRAME("thx.Dates","prevHour",0xc94ca18a,"thx.Dates.prevHour","thx/Dates.hx",420,0xca6143a4)
            	HX_STACK_ARG(d,"d")
HXLINE( 420)		return ::thx::Dates_obj::jump(d,::thx::TimePeriod_obj::Hour_dyn(),(int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Dates_obj,prevHour,return )

 ::Date Dates_obj::nextHour( ::Date d){
            	HX_STACK_FRAME("thx.Dates","nextHour",0xac4b678a,"thx.Dates.nextHour","thx/Dates.hx",426,0xca6143a4)
            	HX_STACK_ARG(d,"d")
HXLINE( 426)		return ::thx::Dates_obj::jump(d,::thx::TimePeriod_obj::Hour_dyn(),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Dates_obj,nextHour,return )

 ::Date Dates_obj::prevMinute( ::Date d){
            	HX_STACK_FRAME("thx.Dates","prevMinute",0xb5a318ba,"thx.Dates.prevMinute","thx/Dates.hx",432,0xca6143a4)
            	HX_STACK_ARG(d,"d")
HXLINE( 432)		return ::thx::Dates_obj::jump(d,::thx::TimePeriod_obj::Minute_dyn(),(int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Dates_obj,prevMinute,return )

 ::Date Dates_obj::nextMinute( ::Date d){
            	HX_STACK_FRAME("thx.Dates","nextMinute",0x6a5f5eba,"thx.Dates.nextMinute","thx/Dates.hx",438,0xca6143a4)
            	HX_STACK_ARG(d,"d")
HXLINE( 438)		return ::thx::Dates_obj::jump(d,::thx::TimePeriod_obj::Minute_dyn(),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Dates_obj,nextMinute,return )

 ::Date Dates_obj::prevSecond( ::Date d){
            	HX_STACK_FRAME("thx.Dates","prevSecond",0xc6e3055a,"thx.Dates.prevSecond","thx/Dates.hx",444,0xca6143a4)
            	HX_STACK_ARG(d,"d")
HXLINE( 444)		return ::thx::Dates_obj::jump(d,::thx::TimePeriod_obj::Second_dyn(),(int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Dates_obj,prevSecond,return )

 ::Date Dates_obj::nextSecond( ::Date d){
            	HX_STACK_FRAME("thx.Dates","nextSecond",0x7b9f4b5a,"thx.Dates.nextSecond","thx/Dates.hx",450,0xca6143a4)
            	HX_STACK_ARG(d,"d")
HXLINE( 450)		return ::thx::Dates_obj::jump(d,::thx::TimePeriod_obj::Second_dyn(),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Dates_obj,nextSecond,return )

 ::Date Dates_obj::withYear( ::Date date,Int year){
            	HX_STACK_FRAME("thx.Dates","withYear",0xde5fd6b6,"thx.Dates.withYear","thx/Dates.hx",456,0xca6143a4)
            	HX_STACK_ARG(date,"date")
            	HX_STACK_ARG(year,"year")
HXLINE( 456)		Int _hx_tmp = date->getMonth();
HXDLIN( 456)		Int _hx_tmp1 = date->getDate();
HXDLIN( 456)		Int _hx_tmp2 = date->getHours();
HXDLIN( 456)		Int _hx_tmp3 = date->getMinutes();
HXDLIN( 456)		Int _hx_tmp4 = date->getSeconds();
HXDLIN( 456)		return ::thx::Dates_obj::create(year,_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dates_obj,withYear,return )

 ::Date Dates_obj::withMonth( ::Date date,Int month){
            	HX_STACK_FRAME("thx.Dates","withMonth",0xd3531427,"thx.Dates.withMonth","thx/Dates.hx",462,0xca6143a4)
            	HX_STACK_ARG(date,"date")
            	HX_STACK_ARG(month,"month")
HXLINE( 462)		Int _hx_tmp = date->getFullYear();
HXDLIN( 462)		Int _hx_tmp1 = date->getDate();
HXDLIN( 462)		Int _hx_tmp2 = date->getHours();
HXDLIN( 462)		Int _hx_tmp3 = date->getMinutes();
HXDLIN( 462)		Int _hx_tmp4 = date->getSeconds();
HXDLIN( 462)		return ::thx::Dates_obj::create(_hx_tmp,month,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dates_obj,withMonth,return )

 ::Date Dates_obj::withDay( ::Date date,Int day){
            	HX_STACK_FRAME("thx.Dates","withDay",0x2edaab83,"thx.Dates.withDay","thx/Dates.hx",468,0xca6143a4)
            	HX_STACK_ARG(date,"date")
            	HX_STACK_ARG(day,"day")
HXLINE( 468)		Int _hx_tmp = date->getFullYear();
HXDLIN( 468)		Int _hx_tmp1 = date->getMonth();
HXDLIN( 468)		Int _hx_tmp2 = date->getHours();
HXDLIN( 468)		Int _hx_tmp3 = date->getMinutes();
HXDLIN( 468)		Int _hx_tmp4 = date->getSeconds();
HXDLIN( 468)		return ::thx::Dates_obj::create(_hx_tmp,_hx_tmp1,day,_hx_tmp2,_hx_tmp3,_hx_tmp4);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dates_obj,withDay,return )

 ::Date Dates_obj::withHour( ::Date date,Int hour){
            	HX_STACK_FRAME("thx.Dates","withHour",0xd32ade1d,"thx.Dates.withHour","thx/Dates.hx",474,0xca6143a4)
            	HX_STACK_ARG(date,"date")
            	HX_STACK_ARG(hour,"hour")
HXLINE( 474)		Int _hx_tmp = date->getFullYear();
HXDLIN( 474)		Int _hx_tmp1 = date->getMonth();
HXDLIN( 474)		Int _hx_tmp2 = date->getDate();
HXDLIN( 474)		Int _hx_tmp3 = date->getMinutes();
HXDLIN( 474)		Int _hx_tmp4 = date->getSeconds();
HXDLIN( 474)		return ::thx::Dates_obj::create(_hx_tmp,_hx_tmp1,_hx_tmp2,hour,_hx_tmp3,_hx_tmp4);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dates_obj,withHour,return )

 ::Date Dates_obj::withMinute( ::Date date,Int minute){
            	HX_STACK_FRAME("thx.Dates","withMinute",0xa0f7e00d,"thx.Dates.withMinute","thx/Dates.hx",480,0xca6143a4)
            	HX_STACK_ARG(date,"date")
            	HX_STACK_ARG(minute,"minute")
HXLINE( 480)		Int _hx_tmp = date->getFullYear();
HXDLIN( 480)		Int _hx_tmp1 = date->getMonth();
HXDLIN( 480)		Int _hx_tmp2 = date->getDate();
HXDLIN( 480)		Int _hx_tmp3 = date->getHours();
HXDLIN( 480)		Int _hx_tmp4 = date->getSeconds();
HXDLIN( 480)		return ::thx::Dates_obj::create(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,minute,_hx_tmp4);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dates_obj,withMinute,return )

 ::Date Dates_obj::withSecond( ::Date date,Int second){
            	HX_STACK_FRAME("thx.Dates","withSecond",0xb237ccad,"thx.Dates.withSecond","thx/Dates.hx",486,0xca6143a4)
            	HX_STACK_ARG(date,"date")
            	HX_STACK_ARG(second,"second")
HXLINE( 486)		Int _hx_tmp = date->getFullYear();
HXDLIN( 486)		Int _hx_tmp1 = date->getMonth();
HXDLIN( 486)		Int _hx_tmp2 = date->getDate();
HXDLIN( 486)		Int _hx_tmp3 = date->getHours();
HXDLIN( 486)		Int _hx_tmp4 = date->getMinutes();
HXDLIN( 486)		return ::thx::Dates_obj::create(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,second);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Dates_obj,withSecond,return )

::hx::EnumBase Dates_obj::parseDate(::String s){
            	HX_STACK_FRAME("thx.Dates","parseDate",0x0d0f90ce,"thx.Dates.parseDate","thx/Dates.hx",492,0xca6143a4)
            	HX_STACK_ARG(s,"s")
HXLINE( 492)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 493)			 ::Date _hx_tmp = ::Date_obj::fromString(s);
HXDLIN( 493)			return ::thx::Either_obj::Right(_hx_tmp);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 495)				return ::thx::Either_obj::Left(((HX_("",00,00,00,00) + s) + HX_(" could not be parsed to a valid Date value.",05,a9,80,85)));
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 492)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Dates_obj,parseDate,return )


Dates_obj::Dates_obj()
{
}

bool Dates_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"max") ) { outValue = max_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"min") ) { outValue = min_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"more") ) { outValue = more_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"less") ) { outValue = less_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"jump") ) { outValue = jump_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"snapTo") ) { outValue = snapTo_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"compare") ) { outValue = compare_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"greater") ) { outValue = greater_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sameDay") ) { outValue = sameDay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prevDay") ) { outValue = prevDay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nextDay") ) { outValue = nextDay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withDay") ) { outValue = withDay_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"sameYear") ) { outValue = sameYear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sameHour") ) { outValue = sameHour_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"snapNext") ) { outValue = snapNext_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"snapPrev") ) { outValue = snapPrev_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prevYear") ) { outValue = prevYear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nextYear") ) { outValue = nextYear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prevWeek") ) { outValue = prevWeek_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nextWeek") ) { outValue = nextWeek_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prevHour") ) { outValue = prevHour_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nextHour") ) { outValue = nextHour_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withYear") ) { outValue = withYear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withHour") ) { outValue = withHour_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"daysRange") ) { outValue = daysRange_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"moreEqual") ) { outValue = moreEqual_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lessEqual") ) { outValue = lessEqual_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sameMonth") ) { outValue = sameMonth_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prevMonth") ) { outValue = prevMonth_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nextMonth") ) { outValue = nextMonth_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withMonth") ) { outValue = withMonth_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"parseDate") ) { outValue = parseDate_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"nearEquals") ) { outValue = nearEquals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lessEquals") ) { outValue = lessEquals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isLeapYear") ) { outValue = isLeapYear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sameMinute") ) { outValue = sameMinute_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prevMinute") ) { outValue = prevMinute_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nextMinute") ) { outValue = nextMinute_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prevSecond") ) { outValue = prevSecond_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nextSecond") ) { outValue = nextSecond_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withMinute") ) { outValue = withMinute_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withSecond") ) { outValue = withSecond_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"daysInMonth") ) { outValue = daysInMonth_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isInLeapYear") ) { outValue = isInLeapYear_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"greaterEquals") ) { outValue = greaterEquals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"snapToWeekDay") ) { outValue = snapToWeekDay_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"numDaysInMonth") ) { outValue = numDaysInMonth_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"daysInThisMonth") ) { outValue = daysInThisMonth_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"snapNextWeekDay") ) { outValue = snapNextWeekDay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"snapPrevWeekDay") ) { outValue = snapPrevWeekDay_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"numDaysInThisMonth") ) { outValue = numDaysInThisMonth_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Dates_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Dates_obj_sStaticStorageInfo = 0;
#endif

static void Dates_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Dates_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Dates_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Dates_obj::__mClass,"__mClass");
};

#endif

hx::Class Dates_obj::__mClass;

static ::String Dates_obj_sStaticFields[] = {
	HX_HCSTRING("compare","\xa5","\x18","\x69","\x83"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("daysRange","\xa6","\xf7","\x66","\x2c"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("nearEquals","\x47","\x71","\x71","\xfe"),
	HX_HCSTRING("greater","\xfa","\x90","\xc0","\xb7"),
	HX_HCSTRING("more","\x95","\xdf","\x60","\x48"),
	HX_HCSTRING("less","\x59","\x13","\xb0","\x47"),
	HX_HCSTRING("greaterEquals","\xd9","\xea","\x09","\xab"),
	HX_HCSTRING("moreEqual","\xdf","\xc3","\xf3","\x89"),
	HX_HCSTRING("lessEquals","\x78","\xfe","\xfd","\xac"),
	HX_HCSTRING("lessEqual","\x9b","\x69","\x9e","\x3d"),
	HX_HCSTRING("isLeapYear","\x8f","\xff","\x8e","\x84"),
	HX_HCSTRING("isInLeapYear","\x14","\x1b","\xf7","\x37"),
	HX_HCSTRING("daysInMonth","\x44","\xfb","\x4a","\x0f"),
	HX_HCSTRING("numDaysInMonth","\x9e","\x6e","\x72","\x79"),
	HX_HCSTRING("daysInThisMonth","\x06","\xe2","\xf6","\xf2"),
	HX_HCSTRING("numDaysInThisMonth","\x60","\x0a","\x64","\xe3"),
	HX_HCSTRING("sameYear","\x43","\x24","\xcb","\x6a"),
	HX_HCSTRING("sameMonth","\xfa","\xa1","\xcb","\x24"),
	HX_HCSTRING("sameDay","\x96","\x0e","\x66","\x7c"),
	HX_HCSTRING("sameHour","\xaa","\x2b","\x96","\x5f"),
	HX_HCSTRING("sameMinute","\xda","\x6a","\xfb","\x98"),
	HX_HCSTRING("snapNext","\x5d","\xf4","\x3c","\x09"),
	HX_HCSTRING("snapPrev","\x5d","\x2e","\x99","\x0a"),
	HX_HCSTRING("snapTo","\x65","\x46","\x91","\x91"),
	HX_HCSTRING("jump","\xee","\xc4","\x69","\x46"),
	HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"),
	HX_HCSTRING("min","\x92","\x11","\x53","\x00"),
	HX_HCSTRING("snapToWeekDay","\xe3","\xa6","\xe7","\x80"),
	HX_HCSTRING("snapNextWeekDay","\xeb","\x27","\x9a","\xa4"),
	HX_HCSTRING("snapPrevWeekDay","\xeb","\x2d","\x99","\x34"),
	HX_HCSTRING("prevYear","\x50","\xaa","\x15","\x19"),
	HX_HCSTRING("nextYear","\x50","\x70","\x14","\xfc"),
	HX_HCSTRING("prevMonth","\x4d","\x67","\xb6","\xf7"),
	HX_HCSTRING("nextMonth","\x4d","\xe1","\xa4","\xb3"),
	HX_HCSTRING("prevWeek","\x87","\x40","\xc3","\x17"),
	HX_HCSTRING("nextWeek","\x87","\x06","\xc2","\xfa"),
	HX_HCSTRING("prevDay","\x29","\xc9","\xbe","\x3b"),
	HX_HCSTRING("nextDay","\x29","\xc3","\x3a","\xa5"),
	HX_HCSTRING("prevHour","\xb7","\xb1","\xe0","\x0d"),
	HX_HCSTRING("nextHour","\xb7","\x77","\xdf","\xf0"),
	HX_HCSTRING("prevMinute","\x27","\x4e","\x7d","\x53"),
	HX_HCSTRING("nextMinute","\x27","\x94","\x39","\x08"),
	HX_HCSTRING("prevSecond","\xc7","\x3a","\xbd","\x64"),
	HX_HCSTRING("nextSecond","\xc7","\x80","\x79","\x19"),
	HX_HCSTRING("withYear","\xe3","\xe6","\xf3","\x22"),
	HX_HCSTRING("withMonth","\x5a","\x2b","\x4d","\x90"),
	HX_HCSTRING("withDay","\xf6","\x7f","\x60","\x5f"),
	HX_HCSTRING("withHour","\x4a","\xee","\xbe","\x17"),
	HX_HCSTRING("withMinute","\x7a","\x15","\xd2","\x3e"),
	HX_HCSTRING("withSecond","\x1a","\x02","\x12","\x50"),
	HX_HCSTRING("parseDate","\x01","\xa8","\x09","\xca"),
	::String(null())
};

void Dates_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.Dates","\xfb","\xb6","\x11","\x1c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Dates_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Dates_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Dates_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Dates_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Dates_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Dates_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Dates_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
