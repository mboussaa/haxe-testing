// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_csv_TestCsv
#define INCLUDED_thx_csv_TestCsv

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(thx,csv,TestCsv)

namespace thx{
namespace csv{


class HXCPP_CLASS_ATTRIBUTES TestCsv_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TestCsv_obj OBJ_;
		TestCsv_obj();

	public:
		void __construct(Int i);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.csv.TestCsv")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.csv.TestCsv"); }
		static hx::ObjectPtr< TestCsv_obj > __new(Int i);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestCsv_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("TestCsv","\x74","\x1a","\x0b","\x8b"); }

		Int x;
		void testEncode();
		::Dynamic testEncode_dyn();

		void testDecode();
		::Dynamic testDecode_dyn();

		void testIssue20160125();
		::Dynamic testIssue20160125_dyn();

		void testTerminalComma();
		::Dynamic testTerminalComma_dyn();

		void testRoundtrip();
		::Dynamic testRoundtrip_dyn();

		void testSemicolon();
		::Dynamic testSemicolon_dyn();

		void testAutoTrim();
		::Dynamic testAutoTrim_dyn();

		void testSurroundingWhitespaces();
		::Dynamic testSurroundingWhitespaces_dyn();

		void testTsv();
		::Dynamic testTsv_dyn();

};

} // end namespace thx
} // end namespace csv

#endif /* INCLUDED_thx_csv_TestCsv */ 
