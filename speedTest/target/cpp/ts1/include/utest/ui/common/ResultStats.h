// Generated by Haxe 3.3.0
#ifndef INCLUDED_utest_ui_common_ResultStats
#define INCLUDED_utest_ui_common_ResultStats

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(utest,Dispatcher)
HX_DECLARE_CLASS3(utest,ui,common,ResultStats)

namespace utest{
namespace ui{
namespace common{


class HXCPP_CLASS_ATTRIBUTES ResultStats_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ResultStats_obj OBJ_;
		ResultStats_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="utest.ui.common.ResultStats")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"utest.ui.common.ResultStats"); }
		static hx::ObjectPtr< ResultStats_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ResultStats_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("ResultStats","\xe2","\xd3","\xcc","\x0e"); }

		Int assertations;
		Int successes;
		Int failures;
		Int errors;
		Int warnings;
		 ::utest::Dispatcher onAddSuccesses;
		 ::utest::Dispatcher onAddFailures;
		 ::utest::Dispatcher onAddErrors;
		 ::utest::Dispatcher onAddWarnings;
		Bool isOk;
		Bool hasFailures;
		Bool hasErrors;
		Bool hasWarnings;
		void addSuccesses(Int v);
		::Dynamic addSuccesses_dyn();

		void addFailures(Int v);
		::Dynamic addFailures_dyn();

		void addErrors(Int v);
		::Dynamic addErrors_dyn();

		void addWarnings(Int v);
		::Dynamic addWarnings_dyn();

		void sum( ::utest::ui::common::ResultStats other);
		::Dynamic sum_dyn();

		void subtract( ::utest::ui::common::ResultStats other);
		::Dynamic subtract_dyn();

		void wire( ::utest::ui::common::ResultStats dependant);
		::Dynamic wire_dyn();

		void unwire( ::utest::ui::common::ResultStats dependant);
		::Dynamic unwire_dyn();

};

} // end namespace utest
} // end namespace ui
} // end namespace common

#endif /* INCLUDED_utest_ui_common_ResultStats */ 
