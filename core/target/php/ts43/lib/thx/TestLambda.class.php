<?php

// Generated by Haxe 3.3.0
class thx_TestLambda {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testFunctions() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = _hx_deref((new _hx_array(array(1, 2))))->map(array(new _hx_lambda(array(), "thx_TestLambda_0"), 'execute'));
			utest_Assert::same((new _hx_array(array(2, 3))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 14, "className" => "thx.TestLambda", "methodName" => "testFunctions")));
			utest_Assert::equals(0, 0, null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 16, "className" => "thx.TestLambda", "methodName" => "testFunctions")));
			utest_Assert::equals(2, 2, null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 17, "className" => "thx.TestLambda", "methodName" => "testFunctions")));
			utest_Assert::equals(3, 3, null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 18, "className" => "thx.TestLambda", "methodName" => "testFunctions")));
			utest_Assert::equals(6, 6, null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 19, "className" => "thx.TestLambda", "methodName" => "testFunctions")));
			utest_Assert::equals(10, 10, null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 20, "className" => "thx.TestLambda", "methodName" => "testFunctions")));
			utest_Assert::equals(15, 15, null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 21, "className" => "thx.TestLambda", "methodName" => "testFunctions")));
			$tmp1 = Std::parseInt("1");
			utest_Assert::equals(1, $tmp1, null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 23, "className" => "thx.TestLambda", "methodName" => "testFunctions")));
			$tmp2 = Std::parseInt("1");
			utest_Assert::equals(1, $tmp2, null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 24, "className" => "thx.TestLambda", "methodName" => "testFunctions")));
			utest_Assert::equals(1, 1, null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 25, "className" => "thx.TestLambda", "methodName" => "testFunctions")));
			utest_Assert::equals(3, 3, null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 26, "className" => "thx.TestLambda", "methodName" => "testFunctions")));
			utest_Assert::equals(6, 6, null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 27, "className" => "thx.TestLambda", "methodName" => "testFunctions")));
			utest_Assert::equals(10, 10, null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 28, "className" => "thx.TestLambda", "methodName" => "testFunctions")));
			utest_Assert::equals(15, 15, null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 29, "className" => "thx.TestLambda", "methodName" => "testFunctions")));
			utest_Assert::equals(1, 1, null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 31, "className" => "thx.TestLambda", "methodName" => "testFunctions")));
			utest_Assert::equals(3, 3, null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 32, "className" => "thx.TestLambda", "methodName" => "testFunctions")));
			utest_Assert::equals(6, 6, null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 33, "className" => "thx.TestLambda", "methodName" => "testFunctions")));
			utest_Assert::equals(10, 10, null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 34, "className" => "thx.TestLambda", "methodName" => "testFunctions")));
			utest_Assert::equals(15, 15, null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 35, "className" => "thx.TestLambda", "methodName" => "testFunctions")));
			utest_Assert::equals("Test 1", "Test " . "1", null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 37, "className" => "thx.TestLambda", "methodName" => "testFunctions")));
			utest_Assert::equals("Test 1+2", "Test " . "1" . "+" . "2", null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 38, "className" => "thx.TestLambda", "methodName" => "testFunctions")));
			utest_Assert::equals("BA", "B" . "A", null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 39, "className" => "thx.TestLambda", "methodName" => "testFunctions")));
			utest_Assert::equals("21", "" . _hx_string_rec(2, "") . "1", null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 40, "className" => "thx.TestLambda", "methodName" => "testFunctions")));
			utest_Assert::equals("\$_1\$_0", "\$_1\$_0", null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 41, "className" => "thx.TestLambda", "methodName" => "testFunctions")));
			utest_Assert::equals("\$_0", "\$" . "_0", null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 42, "className" => "thx.TestLambda", "methodName" => "testFunctions")));
			unset($tmp2,$tmp1,$tmp);
		}
	}
	public function testForms() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			{
				utest_Assert::equals(1, 1, null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 49, "className" => "thx.TestLambda", "methodName" => "testForms")));
				utest_Assert::equals(1, 1, null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 53, "className" => "thx.TestLambda", "methodName" => "testForms")));
				utest_Assert::equals(1, 1, null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 56, "className" => "thx.TestLambda", "methodName" => "testForms")));
				utest_Assert::equals(0, 0, null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 63, "className" => "thx.TestLambda", "methodName" => "testForms")));
				utest_Assert::equals(1, 1, null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 67, "className" => "thx.TestLambda", "methodName" => "testForms")));
				utest_Assert::equals(1, 1, null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 70, "className" => "thx.TestLambda", "methodName" => "testForms")));
				utest_Assert::equals(1, 1, null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 74, "className" => "thx.TestLambda", "methodName" => "testForms")));
				utest_Assert::equals(1, 1, null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 77, "className" => "thx.TestLambda", "methodName" => "testForms")));
				utest_Assert::equals(1, 1, null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 81, "className" => "thx.TestLambda", "methodName" => "testForms")));
				utest_Assert::equals(1, 1, null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 84, "className" => "thx.TestLambda", "methodName" => "testForms")));
				utest_Assert::equals(false, false, null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 86, "className" => "thx.TestLambda", "methodName" => "testForms")));
				utest_Assert::equals(true, true, null, _hx_anonymous(array("fileName" => "TestLambda.hx", "lineNumber" => 87, "className" => "thx.TestLambda", "methodName" => "testForms")));
			}
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.TestLambda'; }
}
function thx_TestLambda_0($_) {
	{
		return $_ + 1;
	}
}
