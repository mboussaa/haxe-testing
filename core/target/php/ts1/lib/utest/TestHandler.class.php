<?php

// Generated by Haxe 3.3.0
class utest_TestHandler {
	public function __construct($fixture) {
		if(!php_Boot::$skip_constructor) {
		if($fixture === null) {
			throw new HException("fixture argument is null");
		}
		$this->fixture = $fixture;
		$this->results = new HList();
		$this->asyncStack = new HList();
		$this->onTested = new utest_Dispatcher();
		$this->onTimeout = new utest_Dispatcher();
		$this->onComplete = new utest_Dispatcher();
		$this->onPrecheck = new utest_Dispatcher();
	}}
	public $results;
	public $fixture;
	public $asyncStack;
	public $onTested;
	public $onTimeout;
	public $onComplete;
	public $onPrecheck;
	public $precheck;
	public function execute() {
		try {
			$this->executeMethod($this->fixture->setup);
			try {
				$this->executeMethod($this->fixture->method);
			}catch(Exception $__hx__e) {
				$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
				$e = $_ex_;
				{
					$tmp = utest_TestHandler::exceptionStack(null);
					$tmp1 = utest_Assertation::Error($e, $tmp);
					$this->results->add($tmp1);
				}
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e1 = $_ex_;
			{
				$tmp2 = utest_TestHandler::exceptionStack(null);
				$tmp3 = utest_Assertation::SetupError($e1, $tmp2);
				$this->results->add($tmp3);
			}
		}
		$this->onPrecheck->dispatch($this);
		$this->checkTested();
	}
	public function checkTested() {
		$tmp = $this->asyncStack->length === 0;
		if($tmp) {
			$this->tested();
		} else {
			$this->timeout();
		}
	}
	public $expireson;
	public function setTimeout($timeout) {
		$tmp = haxe_Timer::stamp();
		$newexpire = $tmp + $timeout / 1000;
		$tmp1 = null;
		if($this->expireson === null) {
			$tmp1 = $newexpire;
		} else {
			if($newexpire > $this->expireson) {
				$tmp1 = $newexpire;
			} else {
				$tmp1 = $this->expireson;
			}
		}
		$this->expireson = $tmp1;
	}
	public function bindHandler() {
		utest_Assert::$results = $this->results;
		utest_Assert::$createAsync = (isset($this->addAsync) ? $this->addAsync: array($this, "addAsync"));
		utest_Assert::$createEvent = (isset($this->addEvent) ? $this->addEvent: array($this, "addEvent"));
	}
	public function unbindHandler() {
		utest_Assert::$results = null;
		utest_Assert::$createAsync = array(new _hx_lambda(array(), "utest_TestHandler_0"), 'execute');
		utest_Assert::$createEvent = array(new _hx_lambda(array(), "utest_TestHandler_1"), 'execute');
	}
	public function addAsync($f = null, $timeout = null) {
		if($timeout === null) {
			$timeout = 250;
		}
		$tmp = null === $f;
		if($tmp) {
			$f = array(new _hx_lambda(array(), "utest_TestHandler_2"), 'execute');
		}
		$this->asyncStack->add($f);
		$handler = $this;
		$this->setTimeout($timeout);
		return array(new _hx_lambda(array(&$f, &$handler), "utest_TestHandler_3"), 'execute');
	}
	public function addEvent($f, $timeout = null) {
		if($timeout === null) {
			$timeout = 250;
		}
		$this->asyncStack->add($f);
		$handler = $this;
		$this->setTimeout($timeout);
		return array(new _hx_lambda(array(&$f, &$handler), "utest_TestHandler_4"), 'execute');
	}
	public function executeMethod($name) {
		if($name === null) {
			return;
		}
		$this->bindHandler();
		$tmp = Reflect::field($this->fixture->target, $name);
		Reflect::callMethod($this->fixture->target, $tmp, (new _hx_array(array())));
	}
	public function tested() {
		$tmp = $this->results->length === 0;
		if($tmp) {
			$tmp1 = utest_Assertation::Warning("no assertions");
			$this->results->add($tmp1);
		}
		$this->onTested->dispatch($this);
		$this->completed();
	}
	public function timeout() {
		$tmp = utest_Assertation::TimeoutError($this->asyncStack->length, (new _hx_array(array())));
		$this->results->add($tmp);
		$this->onTimeout->dispatch($this);
		$this->completed();
	}
	public function completed() {
		try {
			$this->executeMethod($this->fixture->teardown);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$tmp = utest_TestHandler::exceptionStack(2);
				$tmp1 = utest_Assertation::TeardownError($e, $tmp);
				$this->results->add($tmp1);
			}
		}
		$this->unbindHandler();
		$this->onComplete->dispatch($this);
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $POLLING_TIME = 10;
	static function exceptionStack($pops = null) {
		if($pops === null) {
			$pops = 2;
		}
		$stack = haxe_CallStack::exceptionStack();
		while(true) {
			$tmp = $pops--;
			if(!($tmp > 0)) {
				break;
			}
			$stack->pop();
			unset($tmp);
		}
		return $stack;
	}
	function __toString() { return 'utest.TestHandler'; }
}
function utest_TestHandler_0($f, $t) {
	{
		return array(new _hx_lambda(array(), "utest_TestHandler_5"), 'execute');
	}
}
function utest_TestHandler_1($f1, $t1) {
	{
		return array(new _hx_lambda(array(), "utest_TestHandler_6"), 'execute');
	}
}
function utest_TestHandler_2() {
	{}
}
function utest_TestHandler_3(&$f, &$handler) {
	{
		$tmp1 = !$handler->asyncStack->remove($f);
		if($tmp1) {
			$tmp2 = utest_Assertation::AsyncError("async function already executed", (new _hx_array(array())));
			$handler->results->add($tmp2);
			return;
		}
		try {
			$handler->bindHandler();
			call_user_func($f);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$tmp3 = utest_TestHandler::exceptionStack(0);
				$tmp4 = utest_Assertation::AsyncError($e, $tmp3);
				$handler->results->add($tmp4);
			}
		}
	}
}
function utest_TestHandler_4(&$f, &$handler, $e) {
	{
		$tmp = !$handler->asyncStack->remove($f);
		if($tmp) {
			$tmp1 = utest_Assertation::AsyncError("event already executed", (new _hx_array(array())));
			$handler->results->add($tmp1);
			return;
		}
		try {
			$handler->bindHandler();
			call_user_func_array($f, array($e));
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e1 = $_ex_;
			{
				$tmp2 = utest_TestHandler::exceptionStack(0);
				$tmp3 = utest_Assertation::AsyncError($e1, $tmp2);
				$handler->results->add($tmp3);
			}
		}
	}
}
function utest_TestHandler_5() {
	{}
}
function utest_TestHandler_6($e) {
	{}
}
