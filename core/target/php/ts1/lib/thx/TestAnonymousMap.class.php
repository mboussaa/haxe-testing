<?php

// Generated by Haxe 3.3.0
class thx_TestAnonymousMap {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testFeatures() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$map = new thx_AnonymousMap(_hx_anonymous(array("name" => "thx", "type" => "library")));
			$tmp = $map->get("name");
			utest_Assert::equals("thx", $tmp, null, _hx_anonymous(array("fileName" => "TestAnonymousMap.hx", "lineNumber" => 23, "className" => "thx.TestAnonymousMap", "methodName" => "testFeatures")));
			$tmp1 = $map->exists("type");
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestAnonymousMap.hx", "lineNumber" => 24, "className" => "thx.TestAnonymousMap", "methodName" => "testFeatures")));
			$map->remove("type");
			$tmp2 = $map->exists("type");
			utest_Assert::isFalse($tmp2, null, _hx_anonymous(array("fileName" => "TestAnonymousMap.hx", "lineNumber" => 26, "className" => "thx.TestAnonymousMap", "methodName" => "testFeatures")));
			$tmp3 = $map->keys();
			$tmp4 = thx_Iterators::toArray($tmp3);
			utest_Assert::same((new _hx_array(array("name"))), $tmp4, null, null, null, _hx_anonymous(array("fileName" => "TestAnonymousMap.hx", "lineNumber" => 27, "className" => "thx.TestAnonymousMap", "methodName" => "testFeatures")));
			$tmp5 = $map->iterator();
			$tmp6 = thx_Iterators::toArray($tmp5);
			utest_Assert::same((new _hx_array(array("thx"))), $tmp6, null, null, null, _hx_anonymous(array("fileName" => "TestAnonymousMap.hx", "lineNumber" => 28, "className" => "thx.TestAnonymousMap", "methodName" => "testFeatures")));
			unset($tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$map);
		}
	}
	public function testGetOption() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$map = new thx_AnonymousMap(_hx_anonymous(array("key1" => 1)));
			$tmp = $map->getOption("key1");
			utest_Assert::same(thx_Options::get($tmp), 1, null, null, null, _hx_anonymous(array("fileName" => "TestAnonymousMap.hx", "lineNumber" => 35, "className" => "thx.TestAnonymousMap", "methodName" => "testGetOption")));
			$tmp1 = $map->getOption("key2");
			utest_Assert::same(thx_Options::toBool($tmp1), false, null, null, null, _hx_anonymous(array("fileName" => "TestAnonymousMap.hx", "lineNumber" => 36, "className" => "thx.TestAnonymousMap", "methodName" => "testGetOption")));
			unset($tmp1,$tmp,$map);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.TestAnonymousMap'; }
}
