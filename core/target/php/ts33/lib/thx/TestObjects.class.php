<?php

// Generated by Haxe 3.3.0
class thx_TestObjects {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testIssue20151201() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$s = thx_Objects::string(_hx_anonymous(array("oldId" => "1", "newId" => "2")));
			utest_Assert::stringContains("oldId : \"1\"", $s, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 22, "className" => "thx.TestObjects", "methodName" => "testIssue20151201")));
			utest_Assert::stringContains("newId : \"2\"", $s, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 23, "className" => "thx.TestObjects", "methodName" => "testIssue20151201")));
			utest_Assert::stringContains(", ", $s, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 24, "className" => "thx.TestObjects", "methodName" => "testIssue20151201")));
			$tmp = StringTools::startsWith($s, "{");
			utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 25, "className" => "thx.TestObjects", "methodName" => "testIssue20151201")));
			$tmp1 = StringTools::endsWith($s, "}");
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 26, "className" => "thx.TestObjects", "methodName" => "testIssue20151201")));
			unset($tmp1,$tmp,$s);
		}
	}
	public function testObjects() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$ob = _hx_anonymous(array());
			$tmp = Reflect::fields($ob)->length === 0;
			utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 32, "className" => "thx.TestObjects", "methodName" => "testObjects")));
			$tmp1 = Reflect::fields($ob);
			utest_Assert::same((new _hx_array(array())), $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 33, "className" => "thx.TestObjects", "methodName" => "testObjects")));
			$ob1 = _hx_anonymous(array("a" => "A", "b" => "B"));
			$tmp2 = Reflect::fields($ob1)->length === 0;
			utest_Assert::isFalse($tmp2, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 36, "className" => "thx.TestObjects", "methodName" => "testObjects")));
			$fields = Reflect::fields($ob1);
			$tmp3 = $fields->remove("a");
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 39, "className" => "thx.TestObjects", "methodName" => "testObjects")));
			$tmp4 = $fields->remove("b");
			utest_Assert::isTrue($tmp4, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 40, "className" => "thx.TestObjects", "methodName" => "testObjects")));
			utest_Assert::equals(0, $fields->length, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 41, "className" => "thx.TestObjects", "methodName" => "testObjects")));
			$o = $ob1;
			$values = Reflect::fields($o)->map(array(new _hx_lambda(array(&$o), "thx_TestObjects_0"), 'execute'));
			$tmp5 = $values->remove("A");
			utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 44, "className" => "thx.TestObjects", "methodName" => "testObjects")));
			$tmp6 = $values->remove("B");
			utest_Assert::isTrue($tmp6, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 45, "className" => "thx.TestObjects", "methodName" => "testObjects")));
			utest_Assert::equals(0, $values->length, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 46, "className" => "thx.TestObjects", "methodName" => "testObjects")));
			$tuples = thx_Objects::tuples($ob1);
			$tuples->sort(array(new _hx_lambda(array(), "thx_TestObjects_1"), 'execute'));
			utest_Assert::same((new _hx_array(array(_hx_anonymous(array("_0" => "a", "_1" => "A")), _hx_anonymous(array("_0" => "b", "_1" => "B"))))), $tuples, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 52, "className" => "thx.TestObjects", "methodName" => "testObjects")));
			unset($values,$tuples,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$ob1,$ob,$o,$fields);
		}
	}
	public function testAssign() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$o = _hx_anonymous(array("name" => "Franco", "age" => 19));
			$out = thx_Objects::assign($o, _hx_anonymous(array("foo" => "bar", "name" => "Michael", "age" => "Two")), null);
			utest_Assert::same("Michael", $out->name, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 59, "className" => "thx.TestObjects", "methodName" => "testAssign")));
			utest_Assert::same("Two", $out->age, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 60, "className" => "thx.TestObjects", "methodName" => "testAssign")));
			utest_Assert::same("bar", $out->foo, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 61, "className" => "thx.TestObjects", "methodName" => "testAssign")));
			{
				$_g2 = 0;
				$_g3 = Reflect::fields($out);
				while($_g2 < $_g3->length) {
					$field = $_g3[$_g2];
					++$_g2;
					$tmp = Reflect::field($out, $field);
					$tmp1 = Reflect::field($o, $field);
					utest_Assert::same($tmp, $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 64, "className" => "thx.TestObjects", "methodName" => "testAssign")));
					unset($tmp1,$tmp,$field);
				}
				unset($_g3,$_g2);
			}
			unset($out,$o);
		}
	}
	public function testCombine() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$o = _hx_anonymous(array("name" => "Franco", "age" => 19));
			$out = thx_Objects::combine($o, _hx_anonymous(array("foo" => "bar", "name" => "Michael", "age" => "Two")));
			utest_Assert::same("Michael", $out->name, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 73, "className" => "thx.TestObjects", "methodName" => "testCombine")));
			utest_Assert::same("Two", $out->age, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 74, "className" => "thx.TestObjects", "methodName" => "testCombine")));
			utest_Assert::same("bar", $out->foo, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 75, "className" => "thx.TestObjects", "methodName" => "testCombine")));
			utest_Assert::same("Franco", $o->name, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 76, "className" => "thx.TestObjects", "methodName" => "testCombine")));
			unset($out,$o);
		}
	}
	public function testMergeWithNullable() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$a = thx_Objects::combine(_hx_anonymous(array("foo" => "baz", "bar" => "qux")), _hx_anonymous(array()));
			utest_Assert::same("baz", $a->foo, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 89, "className" => "thx.TestObjects", "methodName" => "testMergeWithNullable")));
			unset($a);
		}
	}
	public function testMergeWithTypedef() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$to = _hx_anonymous(array("bar" => "qux"));
			$from = _hx_anonymous(array("foo" => "baz", "extra" => "field"));
			$merged = thx_Objects::combine($to, $from);
			utest_Assert::same($merged->foo, $from->foo, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 104, "className" => "thx.TestObjects", "methodName" => "testMergeWithTypedef")));
			utest_Assert::same($merged->bar, $to->bar, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 105, "className" => "thx.TestObjects", "methodName" => "testMergeWithTypedef")));
			$tmp = Reflect::field($merged, "extra");
			utest_Assert::same($tmp, "field", null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 106, "className" => "thx.TestObjects", "methodName" => "testMergeWithTypedef")));
			unset($to,$tmp,$merged,$from);
		}
	}
	public function testHasPath() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$o = _hx_anonymous(array("key1" => _hx_anonymous(array("key2" => 123, "key3" => "abc", "key4" => (new _hx_array(array("one", "two"))), "key5" => (new _hx_array(array(_hx_anonymous(array("key6" => "test1")), _hx_anonymous(array("key6" => "test2"))))), "key6" => null))));
			$tmp = thx_Objects::hasPath($o, "key1.key2");
			utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 127, "className" => "thx.TestObjects", "methodName" => "testHasPath")));
			$tmp1 = thx_Objects::hasPath($o, "key1.key4.1");
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 128, "className" => "thx.TestObjects", "methodName" => "testHasPath")));
			$tmp2 = thx_Objects::hasPath($o, "key1.key6");
			utest_Assert::isTrue($tmp2, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 129, "className" => "thx.TestObjects", "methodName" => "testHasPath")));
			$tmp3 = thx_Objects::hasPath($o, "key1.key4.2");
			utest_Assert::isFalse($tmp3, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 131, "className" => "thx.TestObjects", "methodName" => "testHasPath")));
			$tmp4 = thx_Objects::hasPath($o, "key1.key7");
			utest_Assert::isFalse($tmp4, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 132, "className" => "thx.TestObjects", "methodName" => "testHasPath")));
			unset($tmp4,$tmp3,$tmp2,$tmp1,$tmp,$o);
		}
	}
	public function testHasPathValue() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$o = _hx_anonymous(array("key1" => _hx_anonymous(array("key2" => 123, "key3" => "abc", "key4" => (new _hx_array(array("one", "two", null))), "key5" => (new _hx_array(array(_hx_anonymous(array("key6" => "test1")), _hx_anonymous(array("key6" => "test2"))))), "key6" => null))));
			$tmp = thx_Objects::hasPathValue($o, "key1.key6");
			utest_Assert::isFalse($tmp, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 154, "className" => "thx.TestObjects", "methodName" => "testHasPathValue")));
			$tmp1 = thx_Objects::hasPathValue($o, "key1.key4.2");
			utest_Assert::isFalse($tmp1, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 155, "className" => "thx.TestObjects", "methodName" => "testHasPathValue")));
			$tmp2 = thx_Objects::hasPathValue($o, "key1.key7");
			utest_Assert::isFalse($tmp2, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 156, "className" => "thx.TestObjects", "methodName" => "testHasPathValue")));
			unset($tmp2,$tmp1,$tmp,$o);
		}
	}
	public function testGetPath() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$o = _hx_anonymous(array("key1" => _hx_anonymous(array("key2" => 123, "key3" => "abc", "key4" => (new _hx_array(array("one", "two"))), "key5" => (new _hx_array(array(_hx_anonymous(array("key6" => "test1")), _hx_anonymous(array("key6" => "test2")))))))));
			$tmp = thx_Objects::getPath($o, "key1.key2");
			utest_Assert::same(123, $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 175, "className" => "thx.TestObjects", "methodName" => "testGetPath")));
			$tmp1 = thx_Objects::getPath($o, "key1.key3");
			utest_Assert::same("abc", $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 176, "className" => "thx.TestObjects", "methodName" => "testGetPath")));
			$tmp2 = thx_Objects::getPath($o, "key1.key4.0");
			utest_Assert::same("one", $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 177, "className" => "thx.TestObjects", "methodName" => "testGetPath")));
			$tmp3 = thx_Objects::getPath($o, "key1.key4.1");
			utest_Assert::same("two", $tmp3, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 178, "className" => "thx.TestObjects", "methodName" => "testGetPath")));
			$tmp4 = thx_Objects::getPath($o, "key1.key5");
			utest_Assert::same((new _hx_array(array(_hx_anonymous(array("key6" => "test1")), _hx_anonymous(array("key6" => "test2"))))), $tmp4, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 179, "className" => "thx.TestObjects", "methodName" => "testGetPath")));
			$tmp5 = thx_Objects::getPath($o, "key1.key5.0.key6");
			utest_Assert::same("test1", $tmp5, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 180, "className" => "thx.TestObjects", "methodName" => "testGetPath")));
			$tmp6 = thx_Objects::getPath($o, "key1.key5.1.key6");
			utest_Assert::same("test2", $tmp6, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 181, "className" => "thx.TestObjects", "methodName" => "testGetPath")));
			$tmp7 = thx_Objects::getPath($o, "");
			utest_Assert::isNull($tmp7, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 183, "className" => "thx.TestObjects", "methodName" => "testGetPath")));
			$tmp8 = thx_Objects::getPath($o, "bad");
			utest_Assert::isNull($tmp8, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 184, "className" => "thx.TestObjects", "methodName" => "testGetPath")));
			$tmp9 = thx_Objects::getPath($o, "bad.key");
			utest_Assert::isNull($tmp9, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 185, "className" => "thx.TestObjects", "methodName" => "testGetPath")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$o);
		}
	}
	public function testSetPath() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_Objects::setPath(_hx_anonymous(array()), "key", "val");
			utest_Assert::same(_hx_anonymous(array("key" => "val")), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 190, "className" => "thx.TestObjects", "methodName" => "testSetPath")));
			$tmp1 = thx_Objects::setPath(_hx_anonymous(array()), "key1", "val1");
			$tmp2 = thx_Objects::setPath($tmp1, "key2", "val2");
			utest_Assert::same(_hx_anonymous(array("key1" => "val1", "key2" => "val2")), $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 191, "className" => "thx.TestObjects", "methodName" => "testSetPath")));
			$tmp3 = thx_Objects::setPath(_hx_anonymous(array()), "key1.key2", "val");
			utest_Assert::same(_hx_anonymous(array("key1" => _hx_anonymous(array("key2" => "val")))), $tmp3, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 192, "className" => "thx.TestObjects", "methodName" => "testSetPath")));
			$tmp4 = thx_Objects::setPath(_hx_anonymous(array()), "key1.0.key2", "val");
			utest_Assert::same(_hx_anonymous(array("key1" => (new _hx_array(array(_hx_anonymous(array("key2" => "val"))))))), $tmp4, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 193, "className" => "thx.TestObjects", "methodName" => "testSetPath")));
			$tmp5 = thx_Objects::setPath(_hx_anonymous(array()), "key1.0.0.1", 123);
			utest_Assert::same(_hx_anonymous(array("key1" => (new _hx_array(array((new _hx_array(array((new _hx_array(array(null, 123))))))))))), $tmp5, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 194, "className" => "thx.TestObjects", "methodName" => "testSetPath")));
			$tmp6 = thx_Objects::setPath(_hx_anonymous(array()), "key1.0.0.1.key2", "val");
			utest_Assert::same(_hx_anonymous(array("key1" => (new _hx_array(array((new _hx_array(array((new _hx_array(array(null, _hx_anonymous(array("key2" => "val"))))))))))))), $tmp6, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 195, "className" => "thx.TestObjects", "methodName" => "testSetPath")));
			$tmp7 = thx_Objects::setPath(_hx_anonymous(array("key" => "before")), "key", "val");
			utest_Assert::same(_hx_anonymous(array("key" => "val")), $tmp7, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 197, "className" => "thx.TestObjects", "methodName" => "testSetPath")));
			$tmp8 = thx_Objects::setPath(_hx_anonymous(array("key1" => _hx_anonymous(array("key2" => "before")))), "key1.key2", "val");
			utest_Assert::same(_hx_anonymous(array("key1" => _hx_anonymous(array("key2" => "val")))), $tmp8, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 198, "className" => "thx.TestObjects", "methodName" => "testSetPath")));
			$tmp9 = thx_Objects::setPath(_hx_anonymous(array("key1" => _hx_anonymous(array("key2" => (new _hx_array(array(1, 2, 3))))))), "key1.key2.1", 55);
			utest_Assert::same(_hx_anonymous(array("key1" => _hx_anonymous(array("key2" => (new _hx_array(array(1, 55, 3))))))), $tmp9, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 199, "className" => "thx.TestObjects", "methodName" => "testSetPath")));
			$tmp10 = thx_Objects::setPath(_hx_anonymous(array("key1" => 123)), "newKey", "val");
			utest_Assert::same(_hx_anonymous(array("key1" => 123, "newKey" => "val")), $tmp10, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 200, "className" => "thx.TestObjects", "methodName" => "testSetPath")));
			$tmp11 = thx_Objects::setPath((new _hx_array(array())), "*", 1);
			$tmp12 = thx_Objects::setPath($tmp11, "*", 2);
			utest_Assert::same((new _hx_array(array(1, 2))), $tmp12, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 202, "className" => "thx.TestObjects", "methodName" => "testSetPath")));
			$tmp13 = thx_Objects::setPath(_hx_anonymous(array()), "list.*", 1);
			$tmp14 = thx_Objects::setPath($tmp13, "list.*", 2);
			utest_Assert::same(_hx_anonymous(array("list" => (new _hx_array(array(1, 2))))), $tmp14, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 203, "className" => "thx.TestObjects", "methodName" => "testSetPath")));
			$tmp15 = thx_Objects::setPath((new _hx_array(array())), "0.*", 1);
			$tmp16 = thx_Objects::setPath($tmp15, "0.*", 2);
			utest_Assert::same((new _hx_array(array((new _hx_array(array(1, 2)))))), $tmp16, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 204, "className" => "thx.TestObjects", "methodName" => "testSetPath")));
			$tmp17 = thx_Objects::setPath((new _hx_array(array())), "0.*", 1);
			$tmp18 = thx_Objects::setPath($tmp17, "*.*", 2);
			utest_Assert::same((new _hx_array(array((new _hx_array(array(1))), (new _hx_array(array(2)))))), $tmp18, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 205, "className" => "thx.TestObjects", "methodName" => "testSetPath")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp18,$tmp17,$tmp16,$tmp15,$tmp14,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp);
		}
	}
	public function testRemovePath() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$simple = _hx_anonymous(array("foo" => "bar"));
			$nested = _hx_anonymous(array("foo" => _hx_anonymous(array("bar" => _hx_anonymous(array("baz" => "qux", "other" => "other"))))));
			$arr = _hx_anonymous(array("foo" => (new _hx_array(array(_hx_anonymous(array()), _hx_anonymous(array("bar" => "baz")))))));
			$tmp = thx_Objects::removePath($simple, "foo");
			utest_Assert::same(_hx_anonymous(array()), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 225, "className" => "thx.TestObjects", "methodName" => "testRemovePath")));
			utest_Assert::same(_hx_anonymous(array()), $simple, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 226, "className" => "thx.TestObjects", "methodName" => "testRemovePath")));
			$tmp1 = thx_Objects::removePath($simple, "a.b.c.d");
			utest_Assert::same($simple, $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 227, "className" => "thx.TestObjects", "methodName" => "testRemovePath")));
			$tmp2 = thx_Objects::removePath($nested, "foo.bar.other");
			utest_Assert::same(_hx_anonymous(array("foo" => _hx_anonymous(array("bar" => _hx_anonymous(array("baz" => "qux")))))), $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 229, "className" => "thx.TestObjects", "methodName" => "testRemovePath")));
			$tmp3 = thx_Objects::removePath($arr, "foo.0.bar");
			utest_Assert::same($arr, $tmp3, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 231, "className" => "thx.TestObjects", "methodName" => "testRemovePath")));
			$tmp4 = thx_Objects::removePath($arr, "foo.1.bar");
			utest_Assert::same(_hx_anonymous(array("foo" => (new _hx_array(array(_hx_anonymous(array()), _hx_anonymous(array())))))), $tmp4, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 232, "className" => "thx.TestObjects", "methodName" => "testRemovePath")));
			unset($tmp4,$tmp3,$tmp2,$tmp1,$tmp,$simple,$nested,$arr);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.TestObjects'; }
}
function thx_TestObjects_0(&$o, $key) {
	{
		return Reflect::field($o, $key);
	}
}
function thx_TestObjects_1($a, $b) {
	{
		return haxe_Utf8::compare($a->_0, $b->_0);
	}
}
