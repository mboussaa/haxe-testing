<?php

// Generated by Haxe 3.3.0
class thx_TestFloats {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testNormalize() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			utest_Assert::floatEquals(0.0, 0.0, null, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 20, "className" => "thx.TestFloats", "methodName" => "testNormalize")));
			utest_Assert::floatEquals(1.0, 1.0, null, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 21, "className" => "thx.TestFloats", "methodName" => "testNormalize")));
			utest_Assert::floatEquals(0.5, 0.5, null, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 22, "className" => "thx.TestFloats", "methodName" => "testNormalize")));
			utest_Assert::floatEquals(0.0, 0, null, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 23, "className" => "thx.TestFloats", "methodName" => "testNormalize")));
			utest_Assert::floatEquals(1.0, 1, null, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 24, "className" => "thx.TestFloats", "methodName" => "testNormalize")));
		}
	}
	public function testClamp() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			utest_Assert::floatEquals(10, 10, null, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 29, "className" => "thx.TestFloats", "methodName" => "testClamp")));
			utest_Assert::floatEquals(10, 10, null, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 30, "className" => "thx.TestFloats", "methodName" => "testClamp")));
			utest_Assert::floatEquals(50, 50, null, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 31, "className" => "thx.TestFloats", "methodName" => "testClamp")));
			utest_Assert::floatEquals(100, 100, null, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 32, "className" => "thx.TestFloats", "methodName" => "testClamp")));
			utest_Assert::floatEquals(100, 100, null, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 33, "className" => "thx.TestFloats", "methodName" => "testClamp")));
		}
	}
	public function testClampSym() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$min = -10;
			$tmp = null;
			$tmp = $min;
			utest_Assert::floatEquals(-10, $tmp, null, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 38, "className" => "thx.TestFloats", "methodName" => "testClampSym")));
			$min1 = -10;
			$tmp1 = null;
			$tmp1 = 10;
			utest_Assert::floatEquals(10, $tmp1, null, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 39, "className" => "thx.TestFloats", "methodName" => "testClampSym")));
			$min2 = -10;
			$tmp2 = null;
			$tmp2 = 0;
			utest_Assert::floatEquals(0, $tmp2, null, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 40, "className" => "thx.TestFloats", "methodName" => "testClampSym")));
			unset($tmp2,$tmp1,$tmp,$min2,$min1,$min);
		}
	}
	public function testCompare() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			utest_Assert::equals(-1, -1, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 45, "className" => "thx.TestFloats", "methodName" => "testCompare")));
			utest_Assert::equals(-1, -1, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 46, "className" => "thx.TestFloats", "methodName" => "testCompare")));
			utest_Assert::equals(-1, -1, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 47, "className" => "thx.TestFloats", "methodName" => "testCompare")));
			utest_Assert::equals(-1, -1, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 48, "className" => "thx.TestFloats", "methodName" => "testCompare")));
			$a = -Math::$PI;
			$b = Math::$PI;
			$tmp = null;
			if($a < $b) {
				$tmp = -1;
			} else {
				if($a > $b) {
					$tmp = 1;
				} else {
					$tmp = 0;
				}
			}
			utest_Assert::equals(-1, $tmp, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 49, "className" => "thx.TestFloats", "methodName" => "testCompare")));
			utest_Assert::equals(0, 0, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 51, "className" => "thx.TestFloats", "methodName" => "testCompare")));
			utest_Assert::equals(0, 0, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 52, "className" => "thx.TestFloats", "methodName" => "testCompare")));
			utest_Assert::equals(0, 0, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 53, "className" => "thx.TestFloats", "methodName" => "testCompare")));
			$a1 = Math::$PI;
			$b1 = Math::$PI;
			$tmp1 = null;
			if($a1 < $b1) {
				$tmp1 = -1;
			} else {
				if($a1 > $b1) {
					$tmp1 = 1;
				} else {
					$tmp1 = 0;
				}
			}
			utest_Assert::equals(0, $tmp1, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 54, "className" => "thx.TestFloats", "methodName" => "testCompare")));
			utest_Assert::equals(1, 1, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 56, "className" => "thx.TestFloats", "methodName" => "testCompare")));
			utest_Assert::equals(1, 1, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 57, "className" => "thx.TestFloats", "methodName" => "testCompare")));
			utest_Assert::equals(1, 1, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 58, "className" => "thx.TestFloats", "methodName" => "testCompare")));
			$a2 = Math::$PI;
			$b2 = -Math::$PI;
			$tmp2 = null;
			if($a2 < $b2) {
				$tmp2 = -1;
			} else {
				if($a2 > $b2) {
					$tmp2 = 1;
				} else {
					$tmp2 = 0;
				}
			}
			utest_Assert::equals(1, $tmp2, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 59, "className" => "thx.TestFloats", "methodName" => "testCompare")));
			unset($tmp2,$tmp1,$tmp,$b2,$b1,$b,$a2,$a1,$a);
		}
	}
	public function testRound() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_Floats::roundTo(123.456, 1);
			utest_Assert::floatEquals(123.5, $tmp, null, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 65, "className" => "thx.TestFloats", "methodName" => "testRound")));
			$tmp1 = thx_Floats::roundTo(123.456, 2);
			utest_Assert::floatEquals(123.46, $tmp1, null, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 66, "className" => "thx.TestFloats", "methodName" => "testRound")));
			$tmp2 = thx_Floats::roundTo(123.456, 3);
			utest_Assert::floatEquals(123.456, $tmp2, null, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 67, "className" => "thx.TestFloats", "methodName" => "testRound")));
			$tmp3 = thx_Floats::roundTo(123.456, 4);
			utest_Assert::floatEquals(123.456, $tmp3, null, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 68, "className" => "thx.TestFloats", "methodName" => "testRound")));
			$tmp4 = thx_Floats::roundTo(1234567890.123456, 1);
			utest_Assert::floatEquals(1234567890.1, $tmp4, null, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 71, "className" => "thx.TestFloats", "methodName" => "testRound")));
			$tmp5 = thx_Floats::roundTo(1234567890.123456, 2);
			utest_Assert::floatEquals(1234567890.12, $tmp5, null, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 72, "className" => "thx.TestFloats", "methodName" => "testRound")));
			$tmp6 = thx_Floats::roundTo(1234567890.123456, 3);
			utest_Assert::floatEquals(1234567890.123, $tmp6, null, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 73, "className" => "thx.TestFloats", "methodName" => "testRound")));
			$tmp7 = thx_Floats::roundTo(1234567890.123456, 4);
			utest_Assert::floatEquals(1234567890.1235, $tmp7, null, null, _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 74, "className" => "thx.TestFloats", "methodName" => "testRound")));
			unset($tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testAngleDifference() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tests = (new _hx_array(array(_hx_anonymous(array("a" => 30, "b" => 60, "d" => 30)), _hx_anonymous(array("a" => 60, "b" => 30, "d" => -30)), _hx_anonymous(array("a" => 0, "b" => 190, "d" => -170)), _hx_anonymous(array("a" => 190, "b" => 0, "d" => 170)), _hx_anonymous(array("a" => 400, "b" => 40, "d" => 0)), _hx_anonymous(array("a" => 760, "b" => 40, "d" => 0)))));
			{
				$_g2 = 0;
				while($_g2 < $tests->length) {
					$test = $tests[$_g2];
					++$_g2;
					$d = thx_Floats::angleDifference($test->a, $test->b, null);
					$tmp = $test->d;
					$tmp1 = "expected distance between " . _hx_string_rec($test->a, "") . " and " . _hx_string_rec($test->b, "") . " to be " . _hx_string_rec($test->d, "") . " but it is ";
					utest_Assert::equals($tmp, $d, _hx_string_or_null($tmp1) . _hx_string_rec($d, ""), _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 90, "className" => "thx.TestFloats", "methodName" => "testAngleDifference")));
					unset($tmp1,$tmp,$test,$d);
				}
				unset($_g2);
			}
			unset($tests);
		}
	}
	public function testInterpolateAngle() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tests = (new _hx_array(array(_hx_anonymous(array("a" => 30, "b" => 330, "s" => 0, "l" => 180, "cw" => 180, "ccw" => 0)), _hx_anonymous(array("a" => 330, "b" => 30, "s" => 0, "l" => 180, "cw" => 0, "ccw" => 180)), _hx_anonymous(array("a" => 30, "b" => 120, "s" => 75, "l" => 255, "cw" => 75, "ccw" => 255)), _hx_anonymous(array("a" => 120, "b" => 30, "s" => 75, "l" => 255, "cw" => 255, "ccw" => 75)), _hx_anonymous(array("a" => 0, "b" => 180, "s" => 90, "l" => 270, "cw" => 90, "ccw" => 270)), _hx_anonymous(array("a" => 180, "b" => 0, "s" => 270, "l" => 90, "cw" => 270, "ccw" => 90)), _hx_anonymous(array("a" => 10, "b" => 200, "s" => 285, "l" => 105, "cw" => 105, "ccw" => 285)), _hx_anonymous(array("a" => 200, "b" => 10, "s" => 285, "l" => 105, "cw" => 285, "ccw" => 105)), _hx_anonymous(array("a" => 170, "b" => 340, "s" => 255, "l" => 75, "cw" => 255, "ccw" => 75)), _hx_anonymous(array("a" => 340, "b" => 170, "s" => 255, "l" => 75, "cw" => 75, "ccw" => 255)), _hx_anonymous(array("a" => 190, "b" => 350, "s" => 270, "l" => 90, "cw" => 270, "ccw" => 90)), _hx_anonymous(array("a" => 350, "b" => 190, "s" => 270, "l" => 90, "cw" => 90, "ccw" => 270)), _hx_anonymous(array("a" => 160, "b" => 350, "s" => 75, "l" => 255, "cw" => 255, "ccw" => 75)), _hx_anonymous(array("a" => 350, "b" => 160, "s" => 75, "l" => 255, "cw" => 75, "ccw" => 255)))));
			{
				$_g2 = 0;
				while($_g2 < $tests->length) {
					$test = $tests[$_g2];
					++$_g2;
					$r = thx_Floats::interpolateAngle(0.5, $test->a, $test->b, null);
					$tmp = $test->s;
					$tmp1 = "circular interpolation (shortest) at 50% between " . _hx_string_rec($test->a, "") . " and " . _hx_string_rec($test->b, "") . " should be " . _hx_string_rec($test->s, "") . " but it is ";
					utest_Assert::equals($tmp, $r, _hx_string_or_null($tmp1) . _hx_string_rec($r, ""), _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 121, "className" => "thx.TestFloats", "methodName" => "testInterpolateAngle")));
					$r = thx_Floats::interpolateAngleWidest(0.5, $test->a, $test->b, null);
					$tmp2 = $test->l;
					$tmp3 = "circular interpolation (longest) at 50% between " . _hx_string_rec($test->a, "") . " and " . _hx_string_rec($test->b, "") . " should be " . _hx_string_rec($test->l, "") . " but it is ";
					utest_Assert::equals($tmp2, $r, _hx_string_or_null($tmp3) . _hx_string_rec($r, ""), _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 124, "className" => "thx.TestFloats", "methodName" => "testInterpolateAngle")));
					$r = thx_Floats::interpolateAngleCW(0.5, $test->a, $test->b, null);
					$tmp4 = $test->cw;
					$tmp5 = "circular interpolation CW at 50% between " . _hx_string_rec($test->a, "") . " and " . _hx_string_rec($test->b, "") . " should be " . _hx_string_rec($test->cw, "") . " but it is ";
					utest_Assert::equals($tmp4, $r, _hx_string_or_null($tmp5) . _hx_string_rec($r, ""), _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 127, "className" => "thx.TestFloats", "methodName" => "testInterpolateAngle")));
					$r = thx_Floats::interpolateAngleCCW(0.5, $test->a, $test->b, null);
					$tmp6 = $test->ccw;
					$tmp7 = "circular interpolation CCW at 50% between " . _hx_string_rec($test->a, "") . " and " . _hx_string_rec($test->b, "") . " should be " . _hx_string_rec($test->ccw, "") . " but it is ";
					utest_Assert::equals($tmp6, $r, _hx_string_or_null($tmp7) . _hx_string_rec($r, ""), _hx_anonymous(array("fileName" => "TestFloats.hx", "lineNumber" => 130, "className" => "thx.TestFloats", "methodName" => "testInterpolateAngle")));
					unset($tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$test,$r);
				}
				unset($_g2);
			}
			unset($tests);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.TestFloats'; }
}
