<?php

// Generated by Haxe 3.3.0
class thx_TestInts {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testRange() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$range = thx_Ints::range(2, 7, 1);
			utest_Assert::same((new _hx_array(array(2, 3, 4, 5, 6))), $range, null, null, null, _hx_anonymous(array("fileName" => "TestInts.hx", "lineNumber" => 20, "className" => "thx.TestInts", "methodName" => "testRange")));
			$range = thx_Ints::range(2, 7, 2);
			utest_Assert::same((new _hx_array(array(2, 4, 6))), $range, null, null, null, _hx_anonymous(array("fileName" => "TestInts.hx", "lineNumber" => 22, "className" => "thx.TestInts", "methodName" => "testRange")));
			$range = thx_Ints::range(2, 7, 3);
			utest_Assert::same((new _hx_array(array(2, 5))), $range, null, null, null, _hx_anonymous(array("fileName" => "TestInts.hx", "lineNumber" => 24, "className" => "thx.TestInts", "methodName" => "testRange")));
			$range = thx_Ints::range(7, 2, -2);
			utest_Assert::same((new _hx_array(array(7, 5, 3))), $range, null, null, null, _hx_anonymous(array("fileName" => "TestInts.hx", "lineNumber" => 27, "className" => "thx.TestInts", "methodName" => "testRange")));
			unset($range);
		}
	}
	public function testParse() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tests = (new _hx_array(array(_hx_anonymous(array("e" => -50, "t" => "-50", "b" => 10)), _hx_anonymous(array("e" => 50, "t" => "50", "b" => 10)), _hx_anonymous(array("e" => 1, "t" => "1", "b" => 10)), _hx_anonymous(array("e" => 1, "t" => "+1", "b" => 10)), _hx_anonymous(array("e" => -1, "t" => "-1", "b" => 10)), _hx_anonymous(array("e" => 1, "t" => " 1 ", "b" => 10)), _hx_anonymous(array("e" => 1, "t" => " 1,234", "b" => 10)), _hx_anonymous(array("e" => 15, "t" => " 0xF", "b" => 16)), _hx_anonymous(array("e" => 15, "t" => "17", "b" => 8)), _hx_anonymous(array("e" => 15, "t" => "015", "b" => 10)), _hx_anonymous(array("e" => 15, "t" => "1111", "b" => 2)), _hx_anonymous(array("e" => 15, "t" => "15*3", "b" => 10)), _hx_anonymous(array("e" => 15, "t" => "15e2", "b" => 10)), _hx_anonymous(array("e" => 15, "t" => "15px", "b" => 10)), _hx_anonymous(array("e" => 15, "t" => "12", "b" => 13)), _hx_anonymous(array("e" => -15, "t" => "-0F", "b" => 16)), _hx_anonymous(array("e" => -15, "t" => "-0XF", "b" => 16)), _hx_anonymous(array("e" => -15, "t" => " -17", "b" => 8)), _hx_anonymous(array("e" => -15, "t" => " -15", "b" => 10)), _hx_anonymous(array("e" => -15, "t" => "-1111", "b" => 2)), _hx_anonymous(array("e" => -15, "t" => "-15e1", "b" => 10)), _hx_anonymous(array("e" => -15, "t" => "-12", "b" => 13)), _hx_anonymous(array("e" => 224, "t" => "0e0", "b" => 16)))));
			{
				$_g2 = 0;
				while($_g2 < $tests->length) {
					$test = $tests[$_g2];
					++$_g2;
					$tmp = thx_Ints::canParse($test->t);
					utest_Assert::isTrue($tmp, "Ints.parse should not be able to parse " . _hx_string_or_null($test->t), _hx_anonymous(array("fileName" => "TestInts.hx", "lineNumber" => 60, "className" => "thx.TestInts", "methodName" => "testParse")));
					$tmp1 = $test->e;
					$tmp2 = thx_Ints::parse($test->t, $test->b);
					$tmp3 = "expected " . _hx_string_rec($test->e, "") . " converting \"" . _hx_string_or_null($test->t) . "\" with base " . _hx_string_rec($test->b, "") . " but got ";
					$tmp4 = thx_Ints::parse($test->t, $test->b);
					utest_Assert::equals($tmp1, $tmp2, _hx_string_or_null($tmp3) . _hx_string_rec($tmp4, ""), _hx_anonymous(array("fileName" => "TestInts.hx", "lineNumber" => 61, "className" => "thx.TestInts", "methodName" => "testParse")));
					unset($tmp4,$tmp3,$tmp2,$tmp1,$tmp,$test);
				}
				unset($_g2);
			}
			unset($tests);
		}
	}
	public function testToString() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tests = (new _hx_array(array(_hx_anonymous(array("e" => "1010", "t" => 10, "b" => 2)), _hx_anonymous(array("e" => "12", "t" => 10, "b" => 8)), _hx_anonymous(array("e" => "10", "t" => 10, "b" => 10)), _hx_anonymous(array("e" => "a", "t" => 10, "b" => 16)))));
			{
				$_g2 = 0;
				while($_g2 < $tests->length) {
					$test = $tests[$_g2];
					++$_g2;
					$tmp = thx_Ints::toString($test->t, $test->b);
					utest_Assert::equals($test->e, $tmp, null, _hx_anonymous(array("fileName" => "TestInts.hx", "lineNumber" => 75, "className" => "thx.TestInts", "methodName" => "testToString")));
					unset($tmp,$test);
				}
				unset($_g2);
			}
			unset($tests);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.TestInts'; }
}
