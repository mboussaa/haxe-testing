<?php

// Generated by Haxe 3.3.0
class thx_TestTime {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testBasics() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$time = thx__Time_Time_Impl_::create(249, 8, 7, 6);
			$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerDayI64;
			$x = haxe__Int64_Int64_Impl_::divMod($time, $b)->quotient;
			if($x->high !== $x->low >> 31) {
				throw new HException("Overflow");
			}
			$tmp = $x->low;
			utest_Assert::equals(10, $tmp, null, _hx_anonymous(array("fileName" => "TestTime.hx", "lineNumber" => 16, "className" => "thx.TestTime", "methodName" => "testBasics")));
			$b1 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerHourI64;
			$a = haxe__Int64_Int64_Impl_::divMod($time, $b1)->quotient;
			$x1 = new haxe__Int64____Int64(0, 24);
			$x2 = haxe__Int64_Int64_Impl_::divMod($a, $x1)->modulus;
			if($x2->high !== $x2->low >> 31) {
				throw new HException("Overflow");
			}
			$tmp1 = $x2->low;
			utest_Assert::equals(9, $tmp1, null, _hx_anonymous(array("fileName" => "TestTime.hx", "lineNumber" => 17, "className" => "thx.TestTime", "methodName" => "testBasics")));
			$b2 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMinuteI64;
			$a1 = haxe__Int64_Int64_Impl_::divMod($time, $b2)->quotient;
			$x3 = new haxe__Int64____Int64(0, 60);
			$x4 = haxe__Int64_Int64_Impl_::divMod($a1, $x3)->modulus;
			if($x4->high !== $x4->low >> 31) {
				throw new HException("Overflow");
			}
			$tmp2 = $x4->low;
			utest_Assert::equals(8, $tmp2, null, _hx_anonymous(array("fileName" => "TestTime.hx", "lineNumber" => 18, "className" => "thx.TestTime", "methodName" => "testBasics")));
			$b3 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerSecondI64;
			$a2 = haxe__Int64_Int64_Impl_::divMod($time, $b3)->quotient;
			$x5 = new haxe__Int64____Int64(0, 60);
			$x6 = haxe__Int64_Int64_Impl_::divMod($a2, $x5)->modulus;
			if($x6->high !== $x6->low >> 31) {
				throw new HException("Overflow");
			}
			$tmp3 = $x6->low;
			utest_Assert::equals(7, $tmp3, null, _hx_anonymous(array("fileName" => "TestTime.hx", "lineNumber" => 19, "className" => "thx.TestTime", "methodName" => "testBasics")));
			$b4 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMillisecondI64;
			$a3 = haxe__Int64_Int64_Impl_::divMod($time, $b4)->quotient;
			$b5 = thx__DateTimeUtc_DateTimeUtc_Impl_::$thousandI64;
			$x7 = haxe__Int64_Int64_Impl_::divMod($a3, $b5)->modulus;
			if($x7->high !== $x7->low >> 31) {
				throw new HException("Overflow");
			}
			$tmp4 = $x7->low;
			utest_Assert::equals(6, $tmp4, null, _hx_anonymous(array("fileName" => "TestTime.hx", "lineNumber" => 20, "className" => "thx.TestTime", "methodName" => "testBasics")));
			$b6 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMicrosecondI64;
			$a4 = haxe__Int64_Int64_Impl_::divMod($time, $b6)->quotient;
			$b7 = thx__DateTimeUtc_DateTimeUtc_Impl_::$tenThousandI64;
			$x8 = haxe__Int64_Int64_Impl_::divMod($a4, $b7)->modulus;
			if($x8->high !== $x8->low >> 31) {
				throw new HException("Overflow");
			}
			$tmp5 = $x8->low;
			utest_Assert::equals(6000, $tmp5, null, _hx_anonymous(array("fileName" => "TestTime.hx", "lineNumber" => 21, "className" => "thx.TestTime", "methodName" => "testBasics")));
			$b8 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerSecondI64;
			$x9 = haxe__Int64_Int64_Impl_::divMod($time, $b8)->modulus;
			if($x9->high !== $x9->low >> 31) {
				throw new HException("Overflow");
			}
			$tmp6 = $x9->low;
			utest_Assert::equals(60000, $tmp6, null, _hx_anonymous(array("fileName" => "TestTime.hx", "lineNumber" => 22, "className" => "thx.TestTime", "methodName" => "testBasics")));
			$b9 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerDayI64;
			$x10 = haxe__Int64_Int64_Impl_::divMod($time, $b9)->quotient;
			if($x10->high !== $x10->low >> 31) {
				throw new HException("Overflow");
			}
			$tmp7 = $x10->low;
			utest_Assert::equals(10, $tmp7, null, _hx_anonymous(array("fileName" => "TestTime.hx", "lineNumber" => 24, "className" => "thx.TestTime", "methodName" => "testBasics")));
			$b10 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerHourI64;
			$x11 = haxe__Int64_Int64_Impl_::divMod($time, $b10)->quotient;
			if($x11->high !== $x11->low >> 31) {
				throw new HException("Overflow");
			}
			$tmp8 = $x11->low;
			utest_Assert::equals(249, $tmp8, null, _hx_anonymous(array("fileName" => "TestTime.hx", "lineNumber" => 25, "className" => "thx.TestTime", "methodName" => "testBasics")));
			$b11 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMinuteI64;
			$x12 = haxe__Int64_Int64_Impl_::divMod($time, $b11)->quotient;
			if($x12->high !== $x12->low >> 31) {
				throw new HException("Overflow");
			}
			$tmp9 = $x12->low;
			utest_Assert::equals(14948, $tmp9, null, _hx_anonymous(array("fileName" => "TestTime.hx", "lineNumber" => 26, "className" => "thx.TestTime", "methodName" => "testBasics")));
			$b12 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerSecondI64;
			$x13 = haxe__Int64_Int64_Impl_::divMod($time, $b12)->quotient;
			if($x13->high !== $x13->low >> 31) {
				throw new HException("Overflow");
			}
			$tmp10 = $x13->low;
			utest_Assert::equals(896887, $tmp10, null, _hx_anonymous(array("fileName" => "TestTime.hx", "lineNumber" => 27, "className" => "thx.TestTime", "methodName" => "testBasics")));
			$b13 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMillisecondI64;
			$x14 = haxe__Int64_Int64_Impl_::divMod($time, $b13)->quotient;
			if($x14->high !== $x14->low >> 31) {
				throw new HException("Overflow");
			}
			$tmp11 = $x14->low;
			utest_Assert::equals(896887006, $tmp11, null, _hx_anonymous(array("fileName" => "TestTime.hx", "lineNumber" => 28, "className" => "thx.TestTime", "methodName" => "testBasics")));
			$b14 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMicrosecondI64;
			$x15 = haxe__Int64_Int64_Impl_::divMod($time, $b14)->quotient;
			$tmp12 = haxe__Int64_Int64_Impl_::toString($x15);
			utest_Assert::equals("896887006000", $tmp12, null, _hx_anonymous(array("fileName" => "TestTime.hx", "lineNumber" => 29, "className" => "thx.TestTime", "methodName" => "testBasics")));
			unset($x9,$x8,$x7,$x6,$x5,$x4,$x3,$x2,$x15,$x14,$x13,$x12,$x11,$x10,$x1,$x,$tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp12,$tmp11,$tmp10,$tmp1,$tmp,$time,$b9,$b8,$b7,$b6,$b5,$b4,$b3,$b2,$b14,$b13,$b12,$b11,$b10,$b1,$b,$a4,$a3,$a2,$a1,$a);
		}
	}
	public function testFromString() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$time = thx__Time_Time_Impl_::fromString("125:55:45.123");
			$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerDayI64;
			$x = haxe__Int64_Int64_Impl_::divMod($time, $b)->quotient;
			if($x->high !== $x->low >> 31) {
				throw new HException("Overflow");
			}
			$tmp = $x->low;
			utest_Assert::equals(5, $tmp, null, _hx_anonymous(array("fileName" => "TestTime.hx", "lineNumber" => 35, "className" => "thx.TestTime", "methodName" => "testFromString")));
			$b1 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerHourI64;
			$x1 = haxe__Int64_Int64_Impl_::divMod($time, $b1)->quotient;
			$tmp1 = haxe__Int64_Int64_Impl_::toString($x1);
			utest_Assert::equals("125", $tmp1, null, _hx_anonymous(array("fileName" => "TestTime.hx", "lineNumber" => 36, "className" => "thx.TestTime", "methodName" => "testFromString")));
			$b2 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerHourI64;
			$a = haxe__Int64_Int64_Impl_::divMod($time, $b2)->quotient;
			$x2 = new haxe__Int64____Int64(0, 24);
			$x3 = haxe__Int64_Int64_Impl_::divMod($a, $x2)->modulus;
			if($x3->high !== $x3->low >> 31) {
				throw new HException("Overflow");
			}
			$tmp2 = $x3->low;
			utest_Assert::equals(5, $tmp2, null, _hx_anonymous(array("fileName" => "TestTime.hx", "lineNumber" => 37, "className" => "thx.TestTime", "methodName" => "testFromString")));
			$b3 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMinuteI64;
			$a1 = haxe__Int64_Int64_Impl_::divMod($time, $b3)->quotient;
			$x4 = new haxe__Int64____Int64(0, 60);
			$x5 = haxe__Int64_Int64_Impl_::divMod($a1, $x4)->modulus;
			if($x5->high !== $x5->low >> 31) {
				throw new HException("Overflow");
			}
			$tmp3 = $x5->low;
			utest_Assert::equals(55, $tmp3, null, _hx_anonymous(array("fileName" => "TestTime.hx", "lineNumber" => 38, "className" => "thx.TestTime", "methodName" => "testFromString")));
			$b4 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerSecondI64;
			$a2 = haxe__Int64_Int64_Impl_::divMod($time, $b4)->quotient;
			$x6 = new haxe__Int64____Int64(0, 60);
			$x7 = haxe__Int64_Int64_Impl_::divMod($a2, $x6)->modulus;
			if($x7->high !== $x7->low >> 31) {
				throw new HException("Overflow");
			}
			$tmp4 = $x7->low;
			utest_Assert::equals(45, $tmp4, null, _hx_anonymous(array("fileName" => "TestTime.hx", "lineNumber" => 39, "className" => "thx.TestTime", "methodName" => "testFromString")));
			$b5 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMillisecondI64;
			$a3 = haxe__Int64_Int64_Impl_::divMod($time, $b5)->quotient;
			$b6 = thx__DateTimeUtc_DateTimeUtc_Impl_::$thousandI64;
			$x8 = haxe__Int64_Int64_Impl_::divMod($a3, $b6)->modulus;
			if($x8->high !== $x8->low >> 31) {
				throw new HException("Overflow");
			}
			$tmp5 = $x8->low;
			utest_Assert::equals(123, $tmp5, null, _hx_anonymous(array("fileName" => "TestTime.hx", "lineNumber" => 40, "className" => "thx.TestTime", "methodName" => "testFromString")));
			$tmp6 = thx__Time_Time_Impl_::toString($time);
			utest_Assert::equals("125:55:45.123", $tmp6, null, _hx_anonymous(array("fileName" => "TestTime.hx", "lineNumber" => 42, "className" => "thx.TestTime", "methodName" => "testFromString")));
			$tmp7 = thx__Time_Time_Impl_::toString(thx__Time_Time_Impl_::fromString("3.17:25:30.005"));
			utest_Assert::equals("89:25:30.005", $tmp7, null, _hx_anonymous(array("fileName" => "TestTime.hx", "lineNumber" => 43, "className" => "thx.TestTime", "methodName" => "testFromString")));
			$tmp8 = thx__Time_Time_Impl_::toString(thx__Time_Time_Impl_::fromString("-3.17:25:30.05"));
			utest_Assert::equals("-89:25:30.05", $tmp8, null, _hx_anonymous(array("fileName" => "TestTime.hx", "lineNumber" => 44, "className" => "thx.TestTime", "methodName" => "testFromString")));
			unset($x8,$x7,$x6,$x5,$x4,$x3,$x2,$x1,$x,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$time,$b6,$b5,$b4,$b3,$b2,$b1,$b,$a3,$a2,$a1,$a);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.TestTime'; }
}
