<?php

// Generated by Haxe 3.3.0
class thx_TestBigInt {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testIssue82() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$s = thx_bigint_Bigs::fromInt(101);
			$this1 = thx_bigint_Bigs::parseBase("100", 10);
			$tmp = $this1->toInt();
			$tmp1 = thx_bigint_Bigs::smallToArray($tmp);
			$b = new thx_bigint_Big($tmp1, false);
			$r = $s->subtract($b);
			$tmp2 = thx_bigint_Bigs::fromInt(1);
			$tmp3 = thx__BigInt_BigInt_Impl_::equals($tmp2, $s->subtract($b));
			$tmp4 = $s->toString();
			$tmp5 = "expected " . _hx_string_or_null($tmp4) . " - ";
			$tmp6 = $b->toString();
			$tmp7 = _hx_string_or_null($tmp5) . _hx_string_or_null($tmp6) . " to be equal 1 but it is ";
			$tmp8 = $r->toString();
			utest_Assert::isTrue($tmp3, _hx_string_or_null($tmp7) . _hx_string_or_null($tmp8), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 19, "className" => "thx.TestBigInt", "methodName" => "testIssue82")));
			$s1 = thx_bigint_Bigs::fromInt(101);
			$b1 = thx_bigint_Bigs::fromInt(10);
			$exp = thx_bigint_Bigs::fromInt(2);
			$b1 = $b1->pow($exp);
			$r1 = $s1->subtract($b1);
			$tmp9 = thx_bigint_Bigs::fromInt(1);
			$tmp10 = thx__BigInt_BigInt_Impl_::equals($tmp9, $s1->subtract($b1));
			$tmp11 = $s1->toString();
			$tmp12 = "expected " . _hx_string_or_null($tmp11) . " - ";
			$tmp13 = $b1->toString();
			$tmp14 = _hx_string_or_null($tmp12) . _hx_string_or_null($tmp13) . " to be equal 1 but it is ";
			$tmp15 = $r1->toString();
			utest_Assert::isTrue($tmp10, _hx_string_or_null($tmp14) . _hx_string_or_null($tmp15), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 25, "className" => "thx.TestBigInt", "methodName" => "testIssue82")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp15,$tmp14,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp,$this1,$s1,$s,$r1,$r,$exp,$b1,$b);
		}
	}
	public function testFromInt64() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_Int64s::$minValue;
			$x = new haxe__Int64____Int64(-1, -1);
			$tmp1 = $x;
			$x1 = new haxe__Int64____Int64(0, 0);
			$tmp2 = $x1;
			$x2 = new haxe__Int64____Int64(0, 1);
			$values = (new _hx_array(array($tmp, $tmp1, $tmp2, $x2, thx_Int64s::$maxValue)));
			{
				$_g2 = 0;
				while($_g2 < $values->length) {
					$value = $values[$_g2];
					++$_g2;
					$r = thx_bigint_Bigs::fromInt64($value);
					$i = thx_bigint_Bigs::toInt64($r);
					$tmp3 = null;
					if($i->high === $value->high) {
						$tmp3 = $i->low === $value->low;
					} else {
						$tmp3 = false;
					}
					$tmp4 = $r->toString();
					$tmp5 = "Int64 parsed as " . _hx_string_or_null($tmp4) . " and converted to ";
					$tmp6 = haxe__Int64_Int64_Impl_::toString($i);
					$tmp7 = _hx_string_or_null($tmp5) . _hx_string_or_null($tmp6) . " but expected ";
					$tmp8 = haxe__Int64_Int64_Impl_::toString($value);
					utest_Assert::isTrue($tmp3, _hx_string_or_null($tmp7) . _hx_string_or_null($tmp8), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 34, "className" => "thx.TestBigInt", "methodName" => "testFromInt64")));
					unset($value,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$r,$i);
				}
				unset($_g2);
			}
			unset($x2,$x1,$x,$values,$tmp2,$tmp1,$tmp);
		}
	}
	public function testLcmAndGcd() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_bigint_Bigs::fromInt(21);
			$tmp1 = thx__BigInt_BigInt_Impl_::lcm($tmp, thx_bigint_Bigs::fromInt(6));
			$tmp2 = thx__BigInt_BigInt_Impl_::equals($tmp1, thx_bigint_Bigs::fromInt(42));
			utest_Assert::isTrue($tmp2, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 40, "className" => "thx.TestBigInt", "methodName" => "testLcmAndGcd")));
			$tmp3 = thx_bigint_Bigs::fromInt(42);
			$tmp4 = thx__BigInt_BigInt_Impl_::gcd($tmp3, thx_bigint_Bigs::fromInt(56));
			$tmp5 = thx__BigInt_BigInt_Impl_::equals($tmp4, thx_bigint_Bigs::fromInt(14));
			utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 41, "className" => "thx.TestBigInt", "methodName" => "testLcmAndGcd")));
			$tmp6 = thx_bigint_Bigs::fromInt(0);
			$tmp7 = thx__BigInt_BigInt_Impl_::gcd($tmp6, thx_bigint_Bigs::fromInt(56));
			$tmp8 = thx__BigInt_BigInt_Impl_::equals($tmp7, thx_bigint_Bigs::fromInt(56));
			utest_Assert::isTrue($tmp8, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 42, "className" => "thx.TestBigInt", "methodName" => "testLcmAndGcd")));
			$tmp9 = thx_bigint_Bigs::fromInt(42);
			$tmp10 = thx__BigInt_BigInt_Impl_::gcd($tmp9, thx_bigint_Bigs::fromInt(0));
			$tmp11 = thx__BigInt_BigInt_Impl_::equals($tmp10, thx_bigint_Bigs::fromInt(42));
			utest_Assert::isTrue($tmp11, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 43, "className" => "thx.TestBigInt", "methodName" => "testLcmAndGcd")));
			$tmp12 = thx_bigint_Bigs::fromInt(17);
			$tmp13 = thx__BigInt_BigInt_Impl_::gcd($tmp12, thx_bigint_Bigs::fromInt(103));
			$tmp14 = thx__BigInt_BigInt_Impl_::equals($tmp13, thx_bigint_Bigs::fromInt(1));
			utest_Assert::isTrue($tmp14, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 44, "className" => "thx.TestBigInt", "methodName" => "testLcmAndGcd")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp14,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp);
		}
	}
	public function testIncrements() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx__BigInt_BigInt_Impl_::$zero->isZero();
			utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 49, "className" => "thx.TestBigInt", "methodName" => "testIncrements")));
			$a = thx__BigInt_BigInt_Impl_::$zero;
			$a = $a->add(thx_bigint_Small::$one);
			$b = $a;
			$v = $a;
			$a = $a->add(thx_bigint_Small::$one);
			$c = $v;
			$a = $a->subtract(thx_bigint_Small::$one);
			$d = $a;
			$v1 = $a;
			$a = $a->subtract(thx_bigint_Small::$one);
			$e = $v1;
			$tmp1 = thx__BigInt_BigInt_Impl_::$zero->isZero();
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 55, "className" => "thx.TestBigInt", "methodName" => "testIncrements")));
			$tmp2 = thx__BigInt_BigInt_Impl_::equals($b, thx_bigint_Bigs::fromInt(1));
			utest_Assert::isTrue($tmp2, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 56, "className" => "thx.TestBigInt", "methodName" => "testIncrements")));
			$tmp3 = thx__BigInt_BigInt_Impl_::equals($c, thx_bigint_Bigs::fromInt(1));
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 57, "className" => "thx.TestBigInt", "methodName" => "testIncrements")));
			$tmp4 = thx__BigInt_BigInt_Impl_::equals($d, thx_bigint_Bigs::fromInt(1));
			utest_Assert::isTrue($tmp4, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 58, "className" => "thx.TestBigInt", "methodName" => "testIncrements")));
			$tmp5 = thx__BigInt_BigInt_Impl_::equals($e, thx_bigint_Bigs::fromInt(1));
			utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 59, "className" => "thx.TestBigInt", "methodName" => "testIncrements")));
			$tmp6 = thx__BigInt_BigInt_Impl_::equals($a, thx_bigint_Bigs::fromInt(0));
			utest_Assert::isTrue($tmp6, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 60, "className" => "thx.TestBigInt", "methodName" => "testIncrements")));
			unset($v1,$v,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$e,$d,$c,$b,$a);
		}
	}
	public function testCanHandleLargeNumbers() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tenFactorial = thx_bigint_Bigs::parseBase("3628800", 10);
			$hundredFactorial = thx_bigint_Bigs::parseBase("93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000", 10);
			$threeToTenThousand = thx_bigint_Bigs::parseBase("16313501853426258743032567291811547168121324535825379939348203261918257308143190787480155630847848309673252045223235795433405582999177203852381479145368112501453192355166224391025423628843556686559659645012014177448275529990373274425446425751235537341867387607813619937225616872862016504805593174059909520461668500663118926911571773452255850626968526251879139867085080472539640933730243410152186914328917354576854457274195562218013337745628502470673059426999114202540773175988199842487276183685299388927825296786440252999444785694183675323521704432195785806270123388382931770198990841300861506996108944782065015163410344894945809337689156807686673462563038164792190665340124344133980763205594364754963451564072340502606377790585114123814919001637177034457385019939060232925194471114235892978565322415628344142184842892083466227875760501276009801530703037525839157893875741192497705300469691062454369926795975456340236777734354667139072601574969834312769653557184396147587071260443947944862235744459711204473062937764153770030210332183635531818173456618022745975055313212598514429587545547296534609597194836036546870491771927625214352957503454948403635822345728774885175809500158451837389413798095329711993092101417428406774326126450005467888736546254948658602484494535938888656542746977424368385335496083164921318601934977025095780370104307980276356857350349205866078371806065542393536101673402017980951598946980664330391505845803674248348878071010412918667335823849899623486215050304052577789848512410263834811719236949311423411823585316405085306164936671137456985394285677324771775046050970865520893596151687017153855755197348199659070192954771308347627111052471134476325986362838585959552209645382089055182871854866744633737533217524880118401787595094060855717010144087136495532418544241489437080074716158404895914136451802032446707961058757633345691696743293869623745410870051851590672859347061212573446572045088465460616826082579731686004585218284333452396157730036306379421822435818001505905203918209206969662326706952623512427380240468784114535101496733983401240219840048956733689309620321613793757156727562461651933397540266795963865921590913322060572673349849253303397874242381960775337182730037783698708748781738419747698880321601186310506332869704931303076839444790968339306301273371014087248060946851793697973114432706759288546077622831002526800554849696867710280945946603669593797354642136622231192695027321229511912952940320879763123151760555959496961163141455688278842949587288399100273691880018774147568892650186152065335219113072582417699616901995530249937735219099786758954892534365835235843156112799728164123461219817343904782402517111603206575330527850752564642995318064985900815557979945885931124351303252811255254295797082281946658798705979077492469849644183166585950844953164726896146168297808178398470451561320526180542310840744843107469368959707726836608471817060598771730170755446473440774031371227437651048421606224757527085958515947273151027400662948161111284777828103531499488913672800783167888051177155427285103861736658069404797695900758820465238673970882660162285107599221418743657006872537842677883708807515850397691812433880561772652364847297019508025848964833883225165668986935081274596293983121864046277268590401580209059988500511262470167150495261908136688693861324081559046336288963037090312033522400722360882494928182809075406914319957044927504420797278117837677431446979085756432990753582588102440240611039084516401089948868433353748444104639734074519165067632941419347985624435567342072815910754484123812917487312938280670403228188813003978384081332242484646571417574404852962675165616101527367425654869508712001788393846171780457455963045764943565964887518396481296159902471996735508854292964536796779404377230965723361625182030798297734785854606060323419091646711138678490928840107449923456834763763114226000770316931243666699425694828181155048843161380832067845480569758457751090640996007242018255400627276908188082601795520167054701327802366989747082835481105543878446889896230696091881643547476154998574015907396059478684978574180486798918438643164618541351689258379042326487669479733384712996754251703808037828636599654447727795924596382283226723503386540591321268603222892807562509801015765174359627788357881606366119032951829868274617539946921221330284257027058653162292482686679275266764009881985590648534544939224296689791195355783205968492422636277656735338488299104238060289209390654467316291591219712866052661347026855261289381236881063068219249064767086495184176816629077103667131505064964190910450196502178972477361881300608688593782509793781457170396897496908861893034634895715117114601514654381347139092345833472226493656930996045016355808162984965203661519182202145414866559662218796964329217241498105206552200001", 10);
			$factorial = null;
			$factorial = array(new _hx_lambda(array(&$factorial), "thx_TestBigInt_0"), 'execute');
			$factorial1 = $factorial;
			$tmp2 = call_user_func_array($factorial1, array(thx_bigint_Bigs::fromInt(10)));
			$tmp3 = thx__BigInt_BigInt_Impl_::equals($tmp2, $tenFactorial);
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 75, "className" => "thx.TestBigInt", "methodName" => "testCanHandleLargeNumbers")));
			$tmp4 = call_user_func_array($factorial1, array(thx_bigint_Bigs::fromInt(100)));
			$tmp5 = thx__BigInt_BigInt_Impl_::equals($tmp4, $hundredFactorial);
			utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 76, "className" => "thx.TestBigInt", "methodName" => "testCanHandleLargeNumbers")));
			$this2 = thx_bigint_Bigs::fromInt(3);
			$exp = thx_bigint_Bigs::fromInt(10000);
			$pow = $this2->pow($exp);
			$tmp6 = thx__BigInt_BigInt_Impl_::equals($pow, $threeToTenThousand);
			$this3 = thx_bigint_Bigs::fromInt(3);
			$tmp7 = $this3->toString();
			$tmp8 = "expected " . _hx_string_or_null($tmp7) . ".pow(10000) == ";
			$tmp9 = $threeToTenThousand->toString();
			$tmp10 = _hx_string_or_null($tmp8) . _hx_string_or_null($tmp9) . " but got ";
			$tmp11 = $pow->toString();
			utest_Assert::isTrue($tmp6, _hx_string_or_null($tmp10) . _hx_string_or_null($tmp11), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 81, "className" => "thx.TestBigInt", "methodName" => "testCanHandleLargeNumbers")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp11,$tmp10,$threeToTenThousand,$this3,$this2,$tenFactorial,$pow,$hundredFactorial,$factorial1,$factorial,$exp);
		}
	}
	public function testIsImmutable() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$n = thx_bigint_Bigs::fromInt(14930352);
			{
				$that = thx_bigint_Bigs::fromInt(9227465);
				$n->add($that);
				unset($that);
			}
			$tmp = thx__BigInt_BigInt_Impl_::equals($n, thx_bigint_Bigs::fromInt(14930352));
			utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 92, "className" => "thx.TestBigInt", "methodName" => "testIsImmutable")));
			{
				$that1 = thx_bigint_Bigs::fromInt(123456);
				$n->subtract($that1);
				unset($that1);
			}
			$tmp1 = thx__BigInt_BigInt_Impl_::equals($n, thx_bigint_Bigs::fromInt(14930352));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 94, "className" => "thx.TestBigInt", "methodName" => "testIsImmutable")));
			unset($tmp1,$tmp,$n);
		}
	}
	public function testInts() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tests = (new _hx_array(array(1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 10000, 100000, 1000000, 10000000)));
			{
				$_g2 = 0;
				while($_g2 < $tests->length) {
					$test = $tests[$_g2];
					++$_g2;
					$out = thx_bigint_Bigs::fromInt($test);
					$tmp = $out->toInt();
					$tmp1 = "expected " . _hx_string_rec($test, "") . " but got ";
					$tmp2 = $out->toInt();
					utest_Assert::equals($test, $tmp, _hx_string_or_null($tmp1) . _hx_string_rec($tmp2, ""), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 106, "className" => "thx.TestBigInt", "methodName" => "testInts")));
					$out1 = thx_bigint_Bigs::fromInt(-$test);
					$tmp3 = $out1->toInt();
					$tmp4 = "expected " . _hx_string_rec(-$test, "") . " but got ";
					$tmp5 = $out1->toInt();
					utest_Assert::equals(-$test, $tmp3, _hx_string_or_null($tmp4) . _hx_string_rec($tmp5, ""), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 109, "className" => "thx.TestBigInt", "methodName" => "testInts")));
					unset($tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$test,$out1,$out);
				}
				unset($_g2);
			}
			unset($tests);
		}
	}
	public function testFloats() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tests = (new _hx_array(array(0.0, 1.0, 5.0, 1.2e20, 1.2e40, 1.234e63, 5.432e80, 0.00001, 1.2345e-50)));
			{
				$_g2 = 0;
				while($_g2 < $tests->length) {
					$test = $tests[$_g2];
					++$_g2;
					$out = thx_bigint_Bigs::fromFloat($test);
					$tmp = thx_Floats::roundTo($test, 0);
					$tmp1 = $out->toFloat();
					$tmp2 = thx_Floats::roundTo($test, 0);
					$tmp3 = "expected " . _hx_string_rec($tmp2, "") . " but got ";
					$tmp4 = $out->toFloat();
					utest_Assert::floatEquals($tmp, $tmp1, null, _hx_string_or_null($tmp3) . _hx_string_rec($tmp4, ""), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 119, "className" => "thx.TestBigInt", "methodName" => "testFloats")));
					$out1 = thx_bigint_Bigs::fromFloat(-$test);
					$tmp5 = thx_Floats::roundTo(-$test, 0);
					$tmp6 = $out1->toFloat();
					$tmp7 = thx_Floats::roundTo(-$test, 0);
					$tmp8 = "expected " . _hx_string_rec($tmp7, "") . " but got ";
					$tmp9 = $out1->toFloat();
					utest_Assert::floatEquals($tmp5, $tmp6, null, _hx_string_or_null($tmp8) . _hx_string_rec($tmp9, ""), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 122, "className" => "thx.TestBigInt", "methodName" => "testFloats")));
					unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$test,$out1,$out);
				}
				unset($_g2);
			}
			unset($tests);
		}
	}
	public function testStrings() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tests = (new _hx_array(array("0", "3", "20", "12345678901234567890", "999999999999999999")));
			{
				$_g2 = 0;
				while($_g2 < $tests->length) {
					$test = $tests[$_g2];
					++$_g2;
					$out = thx_bigint_Bigs::parseBase($test, 10);
					$tmp = $out->toString();
					$tmp1 = "expected " . _hx_string_or_null($test) . " but got ";
					$tmp2 = $out->toString();
					utest_Assert::equals($test, $tmp, _hx_string_or_null($tmp1) . _hx_string_or_null($tmp2), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 135, "className" => "thx.TestBigInt", "methodName" => "testStrings")));
					if($test === "0") {
						continue;
					}
					$out1 = thx_bigint_Bigs::parseBase("-" . _hx_string_or_null($test), 10);
					$tmp3 = "-" . _hx_string_or_null($test);
					$tmp4 = $out1->toString();
					$tmp5 = "expected -" . _hx_string_or_null($test) . " but got ";
					$tmp6 = $out1->toString();
					utest_Assert::equals($tmp3, $tmp4, _hx_string_or_null($tmp5) . _hx_string_or_null($tmp6), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 141, "className" => "thx.TestBigInt", "methodName" => "testStrings")));
					unset($tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$test,$out1,$out);
				}
				unset($_g2);
			}
			unset($tests);
		}
	}
	public function testEquals() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_bigint_Bigs::fromInt(0);
			$tmp1 = thx__BigInt_BigInt_Impl_::equals($tmp, thx_bigint_Bigs::fromInt(0));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 147, "className" => "thx.TestBigInt", "methodName" => "testEquals")));
			$tmp2 = thx_bigint_Bigs::fromInt(1);
			$tmp3 = thx__BigInt_BigInt_Impl_::equals($tmp2, thx_bigint_Bigs::fromInt(1));
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 148, "className" => "thx.TestBigInt", "methodName" => "testEquals")));
			$tmp4 = thx_bigint_Bigs::parseBase("12345678901234567890", 10);
			$tmp5 = thx__BigInt_BigInt_Impl_::equals($tmp4, thx_bigint_Bigs::parseBase("12345678901234567890", 10));
			utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 149, "className" => "thx.TestBigInt", "methodName" => "testEquals")));
			$tmp6 = thx_bigint_Bigs::fromInt(-1);
			$tmp7 = thx__BigInt_BigInt_Impl_::equals($tmp6, thx_bigint_Bigs::fromInt(-1));
			utest_Assert::isTrue($tmp7, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 150, "className" => "thx.TestBigInt", "methodName" => "testEquals")));
			$tmp8 = thx_bigint_Bigs::parseBase("-12345678901234567890", 10);
			$tmp9 = thx__BigInt_BigInt_Impl_::equals($tmp8, thx_bigint_Bigs::parseBase("-12345678901234567890", 10));
			utest_Assert::isTrue($tmp9, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 151, "className" => "thx.TestBigInt", "methodName" => "testEquals")));
			$tmp10 = thx_bigint_Bigs::fromInt(0);
			$tmp11 = thx__BigInt_BigInt_Impl_::notEquals($tmp10, thx_bigint_Bigs::fromInt(0));
			utest_Assert::isFalse($tmp11, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 153, "className" => "thx.TestBigInt", "methodName" => "testEquals")));
			$tmp12 = thx_bigint_Bigs::fromInt(1);
			$tmp13 = thx__BigInt_BigInt_Impl_::notEquals($tmp12, thx_bigint_Bigs::fromInt(1));
			utest_Assert::isFalse($tmp13, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 154, "className" => "thx.TestBigInt", "methodName" => "testEquals")));
			$tmp14 = thx_bigint_Bigs::parseBase("12345678901234567890", 10);
			$tmp15 = thx__BigInt_BigInt_Impl_::notEquals($tmp14, thx_bigint_Bigs::parseBase("12345678901234567890", 10));
			utest_Assert::isFalse($tmp15, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 155, "className" => "thx.TestBigInt", "methodName" => "testEquals")));
			$tmp16 = thx_bigint_Bigs::fromInt(-1);
			$tmp17 = thx__BigInt_BigInt_Impl_::notEquals($tmp16, thx_bigint_Bigs::fromInt(-1));
			utest_Assert::isFalse($tmp17, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 156, "className" => "thx.TestBigInt", "methodName" => "testEquals")));
			$tmp18 = thx_bigint_Bigs::parseBase("-12345678901234567890", 10);
			$tmp19 = thx__BigInt_BigInt_Impl_::notEquals($tmp18, thx_bigint_Bigs::parseBase("-12345678901234567890", 10));
			utest_Assert::isFalse($tmp19, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 157, "className" => "thx.TestBigInt", "methodName" => "testEquals")));
			$tmp20 = thx_bigint_Bigs::parseBase("-12345678901234567890", 10);
			$tmp21 = thx__BigInt_BigInt_Impl_::notEquals($tmp20, thx_bigint_Bigs::parseBase("12345678901234567890", 10));
			utest_Assert::isTrue($tmp21, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 158, "className" => "thx.TestBigInt", "methodName" => "testEquals")));
			$tmp22 = thx_bigint_Bigs::fromInt(0);
			$tmp23 = thx__BigInt_BigInt_Impl_::notEquals($tmp22, thx_bigint_Bigs::fromInt(1));
			utest_Assert::isTrue($tmp23, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 160, "className" => "thx.TestBigInt", "methodName" => "testEquals")));
			$tmp24 = thx_bigint_Bigs::fromInt(1);
			$tmp25 = thx__BigInt_BigInt_Impl_::notEquals($tmp24, thx_bigint_Bigs::fromInt(2));
			utest_Assert::isTrue($tmp25, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 161, "className" => "thx.TestBigInt", "methodName" => "testEquals")));
			$tmp26 = thx_bigint_Bigs::parseBase("12345678901234567890", 10);
			$tmp27 = thx__BigInt_BigInt_Impl_::notEquals($tmp26, thx_bigint_Bigs::parseBase("12345678901234567891", 10));
			utest_Assert::isTrue($tmp27, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 162, "className" => "thx.TestBigInt", "methodName" => "testEquals")));
			$tmp28 = thx_bigint_Bigs::fromInt(-1);
			$tmp29 = thx__BigInt_BigInt_Impl_::notEquals($tmp28, thx_bigint_Bigs::fromInt(-2));
			utest_Assert::isTrue($tmp29, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 163, "className" => "thx.TestBigInt", "methodName" => "testEquals")));
			$tmp30 = thx_bigint_Bigs::parseBase("-12345678901234567890", 10);
			$tmp31 = thx__BigInt_BigInt_Impl_::notEquals($tmp30, thx_bigint_Bigs::parseBase("-12345678901234567891", 10));
			utest_Assert::isTrue($tmp31, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 164, "className" => "thx.TestBigInt", "methodName" => "testEquals")));
			$tmp32 = thx_bigint_Bigs::fromInt(0);
			$tmp33 = thx__BigInt_BigInt_Impl_::equals($tmp32, thx_bigint_Bigs::fromInt(1));
			utest_Assert::isFalse($tmp33, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 166, "className" => "thx.TestBigInt", "methodName" => "testEquals")));
			$tmp34 = thx_bigint_Bigs::fromInt(1);
			$tmp35 = thx__BigInt_BigInt_Impl_::equals($tmp34, thx_bigint_Bigs::fromInt(2));
			utest_Assert::isFalse($tmp35, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 167, "className" => "thx.TestBigInt", "methodName" => "testEquals")));
			$tmp36 = thx_bigint_Bigs::parseBase("12345678901234567890", 10);
			$tmp37 = thx__BigInt_BigInt_Impl_::equals($tmp36, thx_bigint_Bigs::parseBase("12345678901234567891", 10));
			utest_Assert::isFalse($tmp37, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 168, "className" => "thx.TestBigInt", "methodName" => "testEquals")));
			$tmp38 = thx_bigint_Bigs::fromInt(-1);
			$tmp39 = thx__BigInt_BigInt_Impl_::equals($tmp38, thx_bigint_Bigs::fromInt(-2));
			utest_Assert::isFalse($tmp39, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 169, "className" => "thx.TestBigInt", "methodName" => "testEquals")));
			$tmp40 = thx_bigint_Bigs::fromInt(2);
			$tmp41 = thx__BigInt_BigInt_Impl_::notEquals($tmp40, thx_bigint_Bigs::fromInt(-2));
			utest_Assert::isTrue($tmp41, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 170, "className" => "thx.TestBigInt", "methodName" => "testEquals")));
			$tmp42 = thx_bigint_Bigs::fromInt(2);
			$tmp43 = thx__BigInt_BigInt_Impl_::equals($tmp42, thx_bigint_Bigs::fromInt(-2));
			utest_Assert::isFalse($tmp43, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 171, "className" => "thx.TestBigInt", "methodName" => "testEquals")));
			$tmp44 = thx_bigint_Bigs::parseBase("-12345678901234567890", 10);
			$tmp45 = thx__BigInt_BigInt_Impl_::equals($tmp44, thx_bigint_Bigs::parseBase("-12345678901234567891", 10));
			utest_Assert::isFalse($tmp45, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 172, "className" => "thx.TestBigInt", "methodName" => "testEquals")));
			$tmp46 = thx_bigint_Bigs::fromInt(0);
			$tmp47 = thx__BigInt_BigInt_Impl_::equals($tmp46, thx_bigint_Bigs::parseBase("-0", 10));
			utest_Assert::isTrue($tmp47, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 174, "className" => "thx.TestBigInt", "methodName" => "testEquals")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp47,$tmp46,$tmp45,$tmp44,$tmp43,$tmp42,$tmp41,$tmp40,$tmp4,$tmp39,$tmp38,$tmp37,$tmp36,$tmp35,$tmp34,$tmp33,$tmp32,$tmp31,$tmp30,$tmp3,$tmp29,$tmp28,$tmp27,$tmp26,$tmp25,$tmp24,$tmp23,$tmp22,$tmp21,$tmp20,$tmp2,$tmp19,$tmp18,$tmp17,$tmp16,$tmp15,$tmp14,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp);
		}
	}
	public function testIgnoreLeadingZeros() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_bigint_Bigs::parseBase("0000000000", 10);
			$tmp1 = thx__BigInt_BigInt_Impl_::equals($tmp, thx_bigint_Bigs::parseBase("0", 10));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 179, "className" => "thx.TestBigInt", "methodName" => "testIgnoreLeadingZeros")));
			$tmp2 = thx_bigint_Bigs::parseBase("000000000000023", 10);
			$tmp3 = thx__BigInt_BigInt_Impl_::equals($tmp2, thx_bigint_Bigs::fromInt(23));
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 180, "className" => "thx.TestBigInt", "methodName" => "testIgnoreLeadingZeros")));
			$tmp4 = thx_bigint_Bigs::parseBase("-0000000000000000000000123", 10);
			$tmp5 = thx__BigInt_BigInt_Impl_::equals($tmp4, thx_bigint_Bigs::fromInt(-123));
			$this1 = thx_bigint_Bigs::parseBase("-0000000000000000000000123", 10);
			$tmp6 = $this1->toString();
			$tmp7 = "expected " . _hx_string_or_null($tmp6) . " == ";
			$this2 = thx_bigint_Bigs::fromInt(-123);
			$tmp8 = $this2->toString();
			utest_Assert::isTrue($tmp5, _hx_string_or_null($tmp7) . _hx_string_or_null($tmp8) . " to be true", _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 181, "className" => "thx.TestBigInt", "methodName" => "testIgnoreLeadingZeros")));
			unset($tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$this2,$this1);
		}
	}
	public function testNumbersShouldBeTheSameWhenConstructedDifferently() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_bigint_Bigs::parseBase("12e5", 10);
			$tmp1 = thx__BigInt_BigInt_Impl_::equals($tmp, thx_bigint_Bigs::fromFloat(12e5));
			$this1 = thx_bigint_Bigs::parseBase("12e5", 10);
			$tmp2 = $this1->toString();
			$tmp3 = "expected " . _hx_string_or_null($tmp2) . " == ";
			$this2 = thx_bigint_Bigs::fromFloat(12e5);
			$tmp4 = $this2->toString();
			utest_Assert::isTrue($tmp1, _hx_string_or_null($tmp3) . _hx_string_or_null($tmp4) . " to be true", _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 186, "className" => "thx.TestBigInt", "methodName" => "testNumbersShouldBeTheSameWhenConstructedDifferently")));
			$tmp5 = thx_bigint_Bigs::fromFloat(12e5);
			$tmp6 = thx__BigInt_BigInt_Impl_::equals($tmp5, thx_bigint_Bigs::parseBase("1200000", 10));
			$this3 = thx_bigint_Bigs::fromFloat(12e5);
			$tmp7 = $this3->toString();
			$tmp8 = "expected " . _hx_string_or_null($tmp7) . " == ";
			$this4 = thx_bigint_Bigs::parseBase("1200000", 10);
			$tmp9 = $this4->toString();
			utest_Assert::isTrue($tmp6, _hx_string_or_null($tmp8) . _hx_string_or_null($tmp9) . " to be true", _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 187, "className" => "thx.TestBigInt", "methodName" => "testNumbersShouldBeTheSameWhenConstructedDifferently")));
			$tmp10 = thx_bigint_Bigs::parseBase("1", 10);
			$tmp11 = thx__BigInt_BigInt_Impl_::equals($tmp10, thx_bigint_Bigs::fromInt(1));
			$this5 = thx_bigint_Bigs::parseBase("1", 10);
			$tmp12 = $this5->toString();
			$tmp13 = "expected " . _hx_string_or_null($tmp12) . " == ";
			$this6 = thx_bigint_Bigs::fromInt(1);
			$tmp14 = $this6->toString();
			utest_Assert::isTrue($tmp11, _hx_string_or_null($tmp13) . _hx_string_or_null($tmp14) . " to be true", _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 188, "className" => "thx.TestBigInt", "methodName" => "testNumbersShouldBeTheSameWhenConstructedDifferently")));
			$tmp15 = thx_bigint_Bigs::fromInt(12345);
			$tmp16 = thx__BigInt_BigInt_Impl_::equals($tmp15, thx_bigint_Bigs::parseBase("12345", 10));
			$this7 = thx_bigint_Bigs::fromInt(12345);
			$tmp17 = $this7->toString();
			$tmp18 = "expected " . _hx_string_or_null($tmp17) . " == ";
			$this8 = thx_bigint_Bigs::parseBase("12345", 10);
			$tmp19 = $this8->toString();
			utest_Assert::isTrue($tmp16, _hx_string_or_null($tmp18) . _hx_string_or_null($tmp19) . " to be true", _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 189, "className" => "thx.TestBigInt", "methodName" => "testNumbersShouldBeTheSameWhenConstructedDifferently")));
			$tmp20 = thx_bigint_Bigs::parseBase("9876543210", 10);
			$tmp21 = thx__BigInt_BigInt_Impl_::equals($tmp20, thx_bigint_Bigs::fromFloat(9876543210.0));
			$this9 = thx_bigint_Bigs::parseBase("9876543210", 10);
			$tmp22 = $this9->toString();
			$tmp23 = "expected " . _hx_string_or_null($tmp22) . " == ";
			$this10 = thx_bigint_Bigs::fromFloat(9876543210.0);
			$tmp24 = $this10->toString();
			utest_Assert::isTrue($tmp21, _hx_string_or_null($tmp23) . _hx_string_or_null($tmp24) . " to be true", _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 190, "className" => "thx.TestBigInt", "methodName" => "testNumbersShouldBeTheSameWhenConstructedDifferently")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp24,$tmp23,$tmp22,$tmp21,$tmp20,$tmp2,$tmp19,$tmp18,$tmp17,$tmp16,$tmp15,$tmp14,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp,$this9,$this8,$this7,$this6,$this5,$this4,$this3,$this2,$this10,$this1);
		}
	}
	public function testFibonacci() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_bigint_Bigs::parseBase("1", 10);
			$tmp1 = thx_bigint_Bigs::parseBase("1", 10);
			$tmp2 = thx_bigint_Bigs::parseBase("2", 10);
			$tmp3 = thx_bigint_Bigs::parseBase("3", 10);
			$tmp4 = thx_bigint_Bigs::parseBase("5", 10);
			$tmp5 = thx_bigint_Bigs::parseBase("8", 10);
			$tmp6 = thx_bigint_Bigs::parseBase("13", 10);
			$tmp7 = thx_bigint_Bigs::parseBase("21", 10);
			$tmp8 = thx_bigint_Bigs::parseBase("34", 10);
			$tmp9 = thx_bigint_Bigs::parseBase("55", 10);
			$tmp10 = thx_bigint_Bigs::parseBase("89", 10);
			$tmp11 = thx_bigint_Bigs::parseBase("144", 10);
			$tmp12 = thx_bigint_Bigs::parseBase("233", 10);
			$tmp13 = thx_bigint_Bigs::parseBase("377", 10);
			$tmp14 = thx_bigint_Bigs::parseBase("610", 10);
			$tmp15 = thx_bigint_Bigs::parseBase("987", 10);
			$tmp16 = thx_bigint_Bigs::parseBase("1597", 10);
			$tmp17 = thx_bigint_Bigs::parseBase("2584", 10);
			$tmp18 = thx_bigint_Bigs::parseBase("4181", 10);
			$tmp19 = thx_bigint_Bigs::parseBase("6765", 10);
			$tmp20 = thx_bigint_Bigs::parseBase("10946", 10);
			$tmp21 = thx_bigint_Bigs::parseBase("17711", 10);
			$tmp22 = thx_bigint_Bigs::parseBase("28657", 10);
			$tmp23 = thx_bigint_Bigs::parseBase("46368", 10);
			$tmp24 = thx_bigint_Bigs::parseBase("75025", 10);
			$tmp25 = thx_bigint_Bigs::parseBase("121393", 10);
			$tmp26 = thx_bigint_Bigs::parseBase("196418", 10);
			$tmp27 = thx_bigint_Bigs::parseBase("317811", 10);
			$tmp28 = thx_bigint_Bigs::parseBase("514229", 10);
			$tmp29 = thx_bigint_Bigs::parseBase("832040", 10);
			$tmp30 = thx_bigint_Bigs::parseBase("1346269", 10);
			$tmp31 = thx_bigint_Bigs::parseBase("2178309", 10);
			$tmp32 = thx_bigint_Bigs::parseBase("3524578", 10);
			$tmp33 = thx_bigint_Bigs::parseBase("5702887", 10);
			$tmp34 = thx_bigint_Bigs::parseBase("9227465", 10);
			$tmp35 = thx_bigint_Bigs::parseBase("14930352", 10);
			$tmp36 = thx_bigint_Bigs::parseBase("24157817", 10);
			$tmp37 = thx_bigint_Bigs::parseBase("39088169", 10);
			$tmp38 = thx_bigint_Bigs::parseBase("63245986", 10);
			$tmp39 = thx_bigint_Bigs::parseBase("102334155", 10);
			$tmp40 = thx_bigint_Bigs::parseBase("165580141", 10);
			$tmp41 = thx_bigint_Bigs::parseBase("267914296", 10);
			$tmp42 = thx_bigint_Bigs::parseBase("433494437", 10);
			$tmp43 = thx_bigint_Bigs::parseBase("701408733", 10);
			$tmp44 = thx_bigint_Bigs::parseBase("1134903170", 10);
			$tmp45 = thx_bigint_Bigs::parseBase("1836311903", 10);
			$tmp46 = thx_bigint_Bigs::parseBase("2971215073", 10);
			$tmp47 = thx_bigint_Bigs::parseBase("4807526976", 10);
			$tmp48 = thx_bigint_Bigs::parseBase("7778742049", 10);
			$fibs = (new _hx_array(array($tmp, $tmp1, $tmp2, $tmp3, $tmp4, $tmp5, $tmp6, $tmp7, $tmp8, $tmp9, $tmp10, $tmp11, $tmp12, $tmp13, $tmp14, $tmp15, $tmp16, $tmp17, $tmp18, $tmp19, $tmp20, $tmp21, $tmp22, $tmp23, $tmp24, $tmp25, $tmp26, $tmp27, $tmp28, $tmp29, $tmp30, $tmp31, $tmp32, $tmp33, $tmp34, $tmp35, $tmp36, $tmp37, $tmp38, $tmp39, $tmp40, $tmp41, $tmp42, $tmp43, $tmp44, $tmp45, $tmp46, $tmp47, $tmp48, thx_bigint_Bigs::parseBase("12586269025", 10))));
			$number = thx_bigint_Bigs::fromInt(1);
			$last = thx_bigint_Bigs::fromInt(1);
			{
				$_g2 = 2;
				while($_g2 < 50) {
					$i = $_g2++;
					$number = $number->add($last);
					$last = $number->subtract($last);
					$tmp49 = thx__BigInt_BigInt_Impl_::equals($number, $fibs[$i]);
					utest_Assert::isTrue($tmp49, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 202, "className" => "thx.TestBigInt", "methodName" => "testFibonacci")));
					unset($tmp49,$i);
				}
				unset($_g2);
			}
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp48,$tmp47,$tmp46,$tmp45,$tmp44,$tmp43,$tmp42,$tmp41,$tmp40,$tmp4,$tmp39,$tmp38,$tmp37,$tmp36,$tmp35,$tmp34,$tmp33,$tmp32,$tmp31,$tmp30,$tmp3,$tmp29,$tmp28,$tmp27,$tmp26,$tmp25,$tmp24,$tmp23,$tmp22,$tmp21,$tmp20,$tmp2,$tmp19,$tmp18,$tmp17,$tmp16,$tmp15,$tmp14,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp,$number,$last,$fibs);
		}
	}
	public function testCarriesOverCorrectly() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = thx_bigint_Bigs::parseBase("9007199254740991", 10);
			$that = thx_bigint_Bigs::fromInt(1);
			$tmp = $this1->add($that);
			$tmp1 = thx__BigInt_BigInt_Impl_::equals($tmp, thx_bigint_Bigs::parseBase("9007199254740992", 10));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 208, "className" => "thx.TestBigInt", "methodName" => "testCarriesOverCorrectly")));
			$this2 = thx_bigint_Bigs::parseBase("999999999999999999999000000000000000000000", 10);
			$that1 = thx_bigint_Bigs::parseBase("1000000000000000000000", 10);
			$tmp2 = $this2->add($that1);
			$tmp3 = thx__BigInt_BigInt_Impl_::equals($tmp2, thx_bigint_Bigs::parseBase("1e42", 10));
			$this3 = thx_bigint_Bigs::parseBase("999999999999999999999000000000000000000000", 10);
			$tmp4 = $this3->toString();
			$tmp5 = "expected " . _hx_string_or_null($tmp4) . " + ";
			$this4 = thx_bigint_Bigs::parseBase("1000000000000000000000", 10);
			$tmp6 = $this4->toString();
			$tmp7 = _hx_string_or_null($tmp5) . _hx_string_or_null($tmp6) . " == ";
			$this5 = thx_bigint_Bigs::parseBase("1e42", 10);
			$tmp8 = $this5->toString();
			$tmp9 = _hx_string_or_null($tmp7) . _hx_string_or_null($tmp8) . " but is ";
			$this6 = thx_bigint_Bigs::parseBase("999999999999999999999000000000000000000000", 10);
			$that2 = thx_bigint_Bigs::parseBase("1000000000000000000000", 10);
			$this7 = $this6->add($that2);
			$tmp10 = $this7->toString();
			utest_Assert::isTrue($tmp3, _hx_string_or_null($tmp9) . _hx_string_or_null($tmp10), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 209, "className" => "thx.TestBigInt", "methodName" => "testCarriesOverCorrectly")));
			$this8 = thx_bigint_Bigs::parseBase("1e20", 10);
			$that3 = thx_bigint_Bigs::parseBase("9007199254740972", 10);
			$tmp11 = $this8->add($that3);
			$tmp12 = thx__BigInt_BigInt_Impl_::equals($tmp11, thx_bigint_Bigs::parseBase("100009007199254740972", 10));
			utest_Assert::isTrue($tmp12, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 212, "className" => "thx.TestBigInt", "methodName" => "testCarriesOverCorrectly")));
			$this9 = thx_bigint_Bigs::parseBase("-9007199254740983", 10);
			$that4 = thx_bigint_Bigs::parseBase("-9999999999999998", 10);
			$tmp13 = $this9->add($that4);
			$tmp14 = thx__BigInt_BigInt_Impl_::equals($tmp13, thx_bigint_Bigs::parseBase("-19007199254740981", 10));
			utest_Assert::isTrue($tmp14, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 213, "className" => "thx.TestBigInt", "methodName" => "testCarriesOverCorrectly")));
			$this10 = thx_bigint_Bigs::parseBase("100000000000000000000000000000000000", 10);
			$that5 = thx_bigint_Bigs::parseBase("999999999999999999", 10);
			$tmp15 = $this10->subtract($that5);
			$tmp16 = thx__BigInt_BigInt_Impl_::equals($tmp15, thx_bigint_Bigs::parseBase("99999999999999999000000000000000001", 10));
			utest_Assert::isTrue($tmp16, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 214, "className" => "thx.TestBigInt", "methodName" => "testCarriesOverCorrectly")));
			$this11 = thx_bigint_Bigs::parseBase("50000005000000", 10);
			$that6 = thx_bigint_Bigs::parseBase("10000001", 10);
			$tmp17 = $this11->multiply($that6);
			$tmp18 = thx__BigInt_BigInt_Impl_::equals($tmp17, thx_bigint_Bigs::parseBase("500000100000005000000", 10));
			utest_Assert::isTrue($tmp18, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 216, "className" => "thx.TestBigInt", "methodName" => "testCarriesOverCorrectly")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp18,$tmp17,$tmp16,$tmp15,$tmp14,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp,$this9,$this8,$this7,$this6,$this5,$this4,$this3,$this2,$this11,$this10,$this1,$that6,$that5,$that4,$that3,$that2,$that1,$that);
		}
	}
	public function testMisc() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = thx_bigint_Bigs::parseBase("10", 10);
			$that = thx_bigint_Bigs::fromInt(10);
			$tmp = $this1->add($that);
			$tmp1 = thx__BigInt_BigInt_Impl_::equals($tmp, thx_bigint_Bigs::parseBase("20", 10));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 221, "className" => "thx.TestBigInt", "methodName" => "testMisc")));
			$this2 = thx_bigint_Bigs::parseBase("-10000000000000000", 10);
			$that1 = thx_bigint_Bigs::parseBase("0", 10);
			$tmp2 = $this2->add($that1);
			$tmp3 = thx__BigInt_BigInt_Impl_::equals($tmp2, thx_bigint_Bigs::parseBase("-10000000000000000", 10));
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 222, "className" => "thx.TestBigInt", "methodName" => "testMisc")));
			$this3 = thx_bigint_Bigs::parseBase("0", 10);
			$that2 = thx_bigint_Bigs::parseBase("10000000000000000", 10);
			$tmp4 = $this3->add($that2);
			$tmp5 = thx__BigInt_BigInt_Impl_::equals($tmp4, thx_bigint_Bigs::parseBase("10000000000000000", 10));
			utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 223, "className" => "thx.TestBigInt", "methodName" => "testMisc")));
			$this4 = thx_bigint_Bigs::fromInt(9999999);
			$that3 = thx_bigint_Bigs::fromInt(1);
			$tmp6 = $this4->add($that3);
			$tmp7 = thx__BigInt_BigInt_Impl_::equals($tmp6, thx_bigint_Bigs::fromInt(10000000));
			$this5 = thx_bigint_Bigs::fromInt(9999999);
			$tmp8 = $this5->toString();
			$tmp9 = "expected " . _hx_string_or_null($tmp8) . " + ";
			$this6 = thx_bigint_Bigs::fromInt(1);
			$tmp10 = $this6->toString();
			$tmp11 = _hx_string_or_null($tmp9) . _hx_string_or_null($tmp10) . " == ";
			$this7 = thx_bigint_Bigs::fromInt(10000000);
			$tmp12 = $this7->toString();
			$tmp13 = _hx_string_or_null($tmp11) . _hx_string_or_null($tmp12) . " but got ";
			$this8 = thx_bigint_Bigs::fromInt(9999999);
			$that4 = thx_bigint_Bigs::fromInt(1);
			$this9 = $this8->add($that4);
			$tmp14 = $this9->toString();
			utest_Assert::isTrue($tmp7, _hx_string_or_null($tmp13) . _hx_string_or_null($tmp14), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 224, "className" => "thx.TestBigInt", "methodName" => "testMisc")));
			$this10 = thx_bigint_Bigs::fromInt(10000000);
			$that5 = thx_bigint_Bigs::fromInt(1);
			$tmp15 = $this10->subtract($that5);
			$tmp16 = thx__BigInt_BigInt_Impl_::equals($tmp15, thx_bigint_Bigs::fromInt(9999999));
			utest_Assert::isTrue($tmp16, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 225, "className" => "thx.TestBigInt", "methodName" => "testMisc")));
			$this11 = thx_bigint_Bigs::parseBase("-1000000000000000000000000000000000001", 10);
			$that6 = thx_bigint_Bigs::parseBase("1000000000000000000000000000000000000", 10);
			$tmp17 = $this11->add($that6);
			$tmp18 = thx__BigInt_BigInt_Impl_::equals($tmp17, thx_bigint_Bigs::fromInt(-1));
			utest_Assert::isTrue($tmp18, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 226, "className" => "thx.TestBigInt", "methodName" => "testMisc")));
			$this12 = thx_bigint_Bigs::parseBase("100000000000000000002222222222222222222", 10);
			$that7 = thx_bigint_Bigs::parseBase("100000000000000000001111111111111111111", 10);
			$tmp19 = $this12->subtract($that7);
			$tmp20 = thx__BigInt_BigInt_Impl_::equals($tmp19, thx_bigint_Bigs::parseBase("1111111111111111111", 10));
			utest_Assert::isTrue($tmp20, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 227, "className" => "thx.TestBigInt", "methodName" => "testMisc")));
			$this13 = thx_bigint_Bigs::parseBase("1", 10);
			$that8 = thx_bigint_Bigs::parseBase("0", 10);
			$tmp21 = $this13->add($that8);
			$tmp22 = thx__BigInt_BigInt_Impl_::equals($tmp21, thx_bigint_Bigs::parseBase("1", 10));
			utest_Assert::isTrue($tmp22, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 228, "className" => "thx.TestBigInt", "methodName" => "testMisc")));
			$this14 = thx_bigint_Bigs::parseBase("10", 10);
			$that9 = thx_bigint_Bigs::parseBase("10000000000000000", 10);
			$tmp23 = $this14->add($that9);
			$tmp24 = thx__BigInt_BigInt_Impl_::equals($tmp23, thx_bigint_Bigs::parseBase("10000000000000010", 10));
			utest_Assert::isTrue($tmp24, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 229, "className" => "thx.TestBigInt", "methodName" => "testMisc")));
			$this15 = thx_bigint_Bigs::parseBase("10000000000000000", 10);
			$that10 = thx_bigint_Bigs::parseBase("10", 10);
			$tmp25 = $this15->add($that10);
			$tmp26 = thx__BigInt_BigInt_Impl_::equals($tmp25, thx_bigint_Bigs::parseBase("10000000000000010", 10));
			utest_Assert::isTrue($tmp26, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 230, "className" => "thx.TestBigInt", "methodName" => "testMisc")));
			$this16 = thx_bigint_Bigs::parseBase("10000000000000000", 10);
			$that11 = thx_bigint_Bigs::parseBase("10000000000000000", 10);
			$tmp27 = $this16->add($that11);
			$tmp28 = thx__BigInt_BigInt_Impl_::equals($tmp27, thx_bigint_Bigs::parseBase("20000000000000000", 10));
			utest_Assert::isTrue($tmp28, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 231, "className" => "thx.TestBigInt", "methodName" => "testMisc")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp28,$tmp27,$tmp26,$tmp25,$tmp24,$tmp23,$tmp22,$tmp21,$tmp20,$tmp2,$tmp19,$tmp18,$tmp17,$tmp16,$tmp15,$tmp14,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp,$this9,$this8,$this7,$this6,$this5,$this4,$this3,$this2,$this16,$this15,$this14,$this13,$this12,$this11,$this10,$this1,$that9,$that8,$that7,$that6,$that5,$that4,$that3,$that2,$that11,$that10,$that1,$that);
		}
	}
	public function testMultiplyHandlesSignsCorectly() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = thx_bigint_Bigs::fromInt(100);
			$that = thx_bigint_Bigs::fromInt(100);
			$tmp = $this1->multiply($that);
			$tmp1 = thx__BigInt_BigInt_Impl_::equals($tmp, thx_bigint_Bigs::fromInt(10000));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 236, "className" => "thx.TestBigInt", "methodName" => "testMultiplyHandlesSignsCorectly")));
			$this2 = thx_bigint_Bigs::fromInt(100);
			$that1 = thx_bigint_Bigs::fromInt(-100);
			$tmp2 = $this2->multiply($that1);
			$tmp3 = thx__BigInt_BigInt_Impl_::equals($tmp2, thx_bigint_Bigs::fromInt(-10000));
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 237, "className" => "thx.TestBigInt", "methodName" => "testMultiplyHandlesSignsCorectly")));
			$this3 = thx_bigint_Bigs::fromInt(-100);
			$that2 = thx_bigint_Bigs::fromInt(100);
			$tmp4 = $this3->multiply($that2);
			$tmp5 = thx__BigInt_BigInt_Impl_::equals($tmp4, thx_bigint_Bigs::fromInt(-10000));
			utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 238, "className" => "thx.TestBigInt", "methodName" => "testMultiplyHandlesSignsCorectly")));
			$this4 = thx_bigint_Bigs::fromInt(-100);
			$that3 = thx_bigint_Bigs::fromInt(-100);
			$tmp6 = $this4->multiply($that3);
			$tmp7 = thx__BigInt_BigInt_Impl_::equals($tmp6, thx_bigint_Bigs::fromInt(10000));
			utest_Assert::isTrue($tmp7, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 239, "className" => "thx.TestBigInt", "methodName" => "testMultiplyHandlesSignsCorectly")));
			$this5 = thx_bigint_Bigs::fromInt(13579);
			$that4 = thx_bigint_Bigs::parseBase("163500573666152634716420931676158", 10);
			$tmp8 = $this5->multiply($that4);
			$tmp9 = thx__BigInt_BigInt_Impl_::equals($tmp8, thx_bigint_Bigs::parseBase("2220174289812686626814279831230549482", 10));
			$this6 = thx_bigint_Bigs::fromInt(13579);
			$tmp10 = $this6->toString();
			$tmp11 = "expected " . _hx_string_or_null($tmp10) . " * ";
			$this7 = thx_bigint_Bigs::parseBase("163500573666152634716420931676158", 10);
			$tmp12 = $this7->toString();
			$tmp13 = _hx_string_or_null($tmp11) . _hx_string_or_null($tmp12) . " == ";
			$this8 = thx_bigint_Bigs::parseBase("2220174289812686626814279831230549482", 10);
			$tmp14 = $this8->toString();
			$tmp15 = _hx_string_or_null($tmp13) . _hx_string_or_null($tmp14) . " but got ";
			$this9 = thx_bigint_Bigs::fromInt(13579);
			$that5 = thx_bigint_Bigs::parseBase("163500573666152634716420931676158", 10);
			$this10 = $this9->multiply($that5);
			$tmp16 = $this10->toString();
			utest_Assert::isTrue($tmp9, _hx_string_or_null($tmp15) . _hx_string_or_null($tmp16), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 241, "className" => "thx.TestBigInt", "methodName" => "testMultiplyHandlesSignsCorectly")));
			$this11 = thx_bigint_Bigs::fromInt(13579);
			$that6 = thx_bigint_Bigs::parseBase("-163500573666152634716420931676158", 10);
			$tmp17 = $this11->multiply($that6);
			$tmp18 = thx__BigInt_BigInt_Impl_::equals($tmp17, thx_bigint_Bigs::parseBase("-2220174289812686626814279831230549482", 10));
			utest_Assert::isTrue($tmp18, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 246, "className" => "thx.TestBigInt", "methodName" => "testMultiplyHandlesSignsCorectly")));
			$this12 = thx_bigint_Bigs::fromInt(-13579);
			$that7 = thx_bigint_Bigs::parseBase("163500573666152634716420931676158", 10);
			$tmp19 = $this12->multiply($that7);
			$tmp20 = thx__BigInt_BigInt_Impl_::equals($tmp19, thx_bigint_Bigs::parseBase("-2220174289812686626814279831230549482", 10));
			utest_Assert::isTrue($tmp20, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 247, "className" => "thx.TestBigInt", "methodName" => "testMultiplyHandlesSignsCorectly")));
			$this13 = thx_bigint_Bigs::fromInt(-13579);
			$that8 = thx_bigint_Bigs::parseBase("-163500573666152634716420931676158", 10);
			$tmp21 = $this13->multiply($that8);
			$tmp22 = thx__BigInt_BigInt_Impl_::equals($tmp21, thx_bigint_Bigs::parseBase("2220174289812686626814279831230549482", 10));
			utest_Assert::isTrue($tmp22, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 248, "className" => "thx.TestBigInt", "methodName" => "testMultiplyHandlesSignsCorectly")));
			$this14 = thx_bigint_Bigs::parseBase("163500573666152634716420931676158", 10);
			$that9 = thx_bigint_Bigs::fromInt(13579);
			$tmp23 = $this14->multiply($that9);
			$tmp24 = thx__BigInt_BigInt_Impl_::equals($tmp23, thx_bigint_Bigs::parseBase("2220174289812686626814279831230549482", 10));
			$this15 = thx_bigint_Bigs::parseBase("163500573666152634716420931676158", 10);
			$tmp25 = $this15->toString();
			$tmp26 = "expected " . _hx_string_or_null($tmp25) . " * 13579 == ";
			$this16 = thx_bigint_Bigs::parseBase("2220174289812686626814279831230549482", 10);
			$tmp27 = $this16->toString();
			$tmp28 = _hx_string_or_null($tmp26) . _hx_string_or_null($tmp27) . " but got ";
			$this17 = thx_bigint_Bigs::parseBase("163500573666152634716420931676158", 10);
			$that10 = thx_bigint_Bigs::fromInt(13579);
			$this18 = $this17->multiply($that10);
			$tmp29 = $this18->toString();
			utest_Assert::isTrue($tmp24, _hx_string_or_null($tmp28) . _hx_string_or_null($tmp29), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 249, "className" => "thx.TestBigInt", "methodName" => "testMultiplyHandlesSignsCorectly")));
			$this19 = thx_bigint_Bigs::parseBase("163500573666152634716420931676158", 10);
			$that11 = thx_bigint_Bigs::fromInt(-13579);
			$tmp30 = $this19->multiply($that11);
			$tmp31 = thx__BigInt_BigInt_Impl_::equals($tmp30, thx_bigint_Bigs::parseBase("-2220174289812686626814279831230549482", 10));
			utest_Assert::isTrue($tmp31, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 253, "className" => "thx.TestBigInt", "methodName" => "testMultiplyHandlesSignsCorectly")));
			$this20 = thx_bigint_Bigs::parseBase("-163500573666152634716420931676158", 10);
			$that12 = thx_bigint_Bigs::fromInt(13579);
			$tmp32 = $this20->multiply($that12);
			$tmp33 = thx__BigInt_BigInt_Impl_::equals($tmp32, thx_bigint_Bigs::parseBase("-2220174289812686626814279831230549482", 10));
			utest_Assert::isTrue($tmp33, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 254, "className" => "thx.TestBigInt", "methodName" => "testMultiplyHandlesSignsCorectly")));
			$this21 = thx_bigint_Bigs::parseBase("-163500573666152634716420931676158", 10);
			$that13 = thx_bigint_Bigs::fromInt(-13579);
			$tmp34 = $this21->multiply($that13);
			$tmp35 = thx__BigInt_BigInt_Impl_::equals($tmp34, thx_bigint_Bigs::parseBase("2220174289812686626814279831230549482", 10));
			utest_Assert::isTrue($tmp35, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 255, "className" => "thx.TestBigInt", "methodName" => "testMultiplyHandlesSignsCorectly")));
			$this22 = thx_bigint_Bigs::parseBase("163500573666152634716420931676158", 10);
			$that14 = thx_bigint_Bigs::fromInt(-1);
			$tmp36 = $this22->multiply($that14);
			$tmp37 = thx__BigInt_BigInt_Impl_::equals($tmp36, thx_bigint_Bigs::parseBase("-163500573666152634716420931676158", 10));
			utest_Assert::isTrue($tmp37, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 256, "className" => "thx.TestBigInt", "methodName" => "testMultiplyHandlesSignsCorectly")));
			$this23 = thx_bigint_Bigs::parseBase("1234567890987654321", 10);
			$that15 = thx_bigint_Bigs::parseBase("132435465768798", 10);
			$tmp38 = $this23->multiply($that15);
			$tmp39 = thx__BigInt_BigInt_Impl_::equals($tmp38, thx_bigint_Bigs::parseBase("163500573666152634716420931676158", 10));
			utest_Assert::isTrue($tmp39, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 257, "className" => "thx.TestBigInt", "methodName" => "testMultiplyHandlesSignsCorectly")));
			$this24 = thx_bigint_Bigs::parseBase("1234567890987654321", 10);
			$that16 = thx_bigint_Bigs::parseBase("-132435465768798", 10);
			$tmp40 = $this24->multiply($that16);
			$tmp41 = thx__BigInt_BigInt_Impl_::equals($tmp40, thx_bigint_Bigs::parseBase("-163500573666152634716420931676158", 10));
			$this25 = thx_bigint_Bigs::parseBase("1234567890987654321", 10);
			$tmp42 = $this25->toString();
			$tmp43 = "expected " . _hx_string_or_null($tmp42) . " * ";
			$this26 = thx_bigint_Bigs::parseBase("-132435465768798", 10);
			$tmp44 = $this26->toString();
			$tmp45 = _hx_string_or_null($tmp43) . _hx_string_or_null($tmp44) . " == ";
			$this27 = thx_bigint_Bigs::parseBase("-163500573666152634716420931676158", 10);
			$tmp46 = $this27->toString();
			$tmp47 = _hx_string_or_null($tmp45) . _hx_string_or_null($tmp46) . " but got ";
			$this28 = thx_bigint_Bigs::parseBase("1234567890987654321", 10);
			$that17 = thx_bigint_Bigs::parseBase("-132435465768798", 10);
			$this29 = $this28->multiply($that17);
			$tmp48 = $this29->toString();
			utest_Assert::isTrue($tmp41, _hx_string_or_null($tmp47) . _hx_string_or_null($tmp48), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 258, "className" => "thx.TestBigInt", "methodName" => "testMultiplyHandlesSignsCorectly")));
			$this30 = thx_bigint_Bigs::parseBase("-1234567890987654321", 10);
			$that18 = thx_bigint_Bigs::parseBase("132435465768798", 10);
			$tmp49 = $this30->multiply($that18);
			$tmp50 = thx__BigInt_BigInt_Impl_::equals($tmp49, thx_bigint_Bigs::parseBase("-163500573666152634716420931676158", 10));
			$this31 = thx_bigint_Bigs::parseBase("-1234567890987654321", 10);
			$tmp51 = $this31->toString();
			$tmp52 = "expected " . _hx_string_or_null($tmp51) . " * ";
			$this32 = thx_bigint_Bigs::parseBase("132435465768798", 10);
			$tmp53 = $this32->toString();
			$tmp54 = _hx_string_or_null($tmp52) . _hx_string_or_null($tmp53) . " == ";
			$this33 = thx_bigint_Bigs::parseBase("-163500573666152634716420931676158", 10);
			$tmp55 = $this33->toString();
			$tmp56 = _hx_string_or_null($tmp54) . _hx_string_or_null($tmp55) . " but got ";
			$this34 = thx_bigint_Bigs::parseBase("-1234567890987654321", 10);
			$that19 = thx_bigint_Bigs::parseBase("132435465768798", 10);
			$this35 = $this34->multiply($that19);
			$tmp57 = $this35->toString();
			utest_Assert::isTrue($tmp50, _hx_string_or_null($tmp56) . _hx_string_or_null($tmp57), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 259, "className" => "thx.TestBigInt", "methodName" => "testMultiplyHandlesSignsCorectly")));
			$this36 = thx_bigint_Bigs::parseBase("-1234567890987654321", 10);
			$that20 = thx_bigint_Bigs::parseBase("-132435465768798", 10);
			$tmp58 = $this36->multiply($that20);
			$tmp59 = thx__BigInt_BigInt_Impl_::equals($tmp58, thx_bigint_Bigs::parseBase("163500573666152634716420931676158", 10));
			$this37 = thx_bigint_Bigs::parseBase("-1234567890987654321", 10);
			$tmp60 = $this37->toString();
			$tmp61 = "expected " . _hx_string_or_null($tmp60) . " * ";
			$this38 = thx_bigint_Bigs::parseBase("-132435465768798", 10);
			$tmp62 = $this38->toString();
			$tmp63 = _hx_string_or_null($tmp61) . _hx_string_or_null($tmp62) . " == ";
			$this39 = thx_bigint_Bigs::parseBase("163500573666152634716420931676158", 10);
			$tmp64 = $this39->toString();
			$tmp65 = _hx_string_or_null($tmp63) . _hx_string_or_null($tmp64) . " but got ";
			$this40 = thx_bigint_Bigs::parseBase("-1234567890987654321", 10);
			$that21 = thx_bigint_Bigs::parseBase("-132435465768798", 10);
			$this41 = $this40->multiply($that21);
			$tmp66 = $this41->toString();
			utest_Assert::isTrue($tmp59, _hx_string_or_null($tmp65) . _hx_string_or_null($tmp66), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 260, "className" => "thx.TestBigInt", "methodName" => "testMultiplyHandlesSignsCorectly")));
			unset($tmp9,$tmp8,$tmp7,$tmp66,$tmp65,$tmp64,$tmp63,$tmp62,$tmp61,$tmp60,$tmp6,$tmp59,$tmp58,$tmp57,$tmp56,$tmp55,$tmp54,$tmp53,$tmp52,$tmp51,$tmp50,$tmp5,$tmp49,$tmp48,$tmp47,$tmp46,$tmp45,$tmp44,$tmp43,$tmp42,$tmp41,$tmp40,$tmp4,$tmp39,$tmp38,$tmp37,$tmp36,$tmp35,$tmp34,$tmp33,$tmp32,$tmp31,$tmp30,$tmp3,$tmp29,$tmp28,$tmp27,$tmp26,$tmp25,$tmp24,$tmp23,$tmp22,$tmp21,$tmp20,$tmp2,$tmp19,$tmp18,$tmp17,$tmp16,$tmp15,$tmp14,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp,$this9,$this8,$this7,$this6,$this5,$this41,$this40,$this4,$this39,$this38,$this37,$this36,$this35,$this34,$this33,$this32,$this31,$this30,$this3,$this29,$this28,$this27,$this26,$this25,$this24,$this23,$this22,$this21,$this20,$this2,$this19,$this18,$this17,$this16,$this15,$this14,$this13,$this12,$this11,$this10,$this1,$that9,$that8,$that7,$that6,$that5,$that4,$that3,$that21,$that20,$that2,$that19,$that18,$that17,$that16,$that15,$that14,$that13,$that12,$that11,$that10,$that1,$that);
		}
	}
	public function testDivisionBy1IsTheIdentity() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = thx_bigint_Bigs::fromInt(1);
			$that = thx_bigint_Bigs::fromInt(1);
			$tmp = $this1->divide($that);
			$tmp1 = thx__BigInt_BigInt_Impl_::equals($tmp, thx_bigint_Bigs::fromInt(1));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 265, "className" => "thx.TestBigInt", "methodName" => "testDivisionBy1IsTheIdentity")));
			$this2 = thx_bigint_Bigs::fromInt(-1);
			$that1 = thx_bigint_Bigs::fromInt(1);
			$tmp2 = $this2->divide($that1);
			$tmp3 = thx__BigInt_BigInt_Impl_::equals($tmp2, thx_bigint_Bigs::fromInt(-1));
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 266, "className" => "thx.TestBigInt", "methodName" => "testDivisionBy1IsTheIdentity")));
			$this3 = thx_bigint_Bigs::fromInt(1);
			$that2 = thx_bigint_Bigs::fromInt(-1);
			$tmp4 = $this3->divide($that2);
			$tmp5 = thx__BigInt_BigInt_Impl_::equals($tmp4, thx_bigint_Bigs::fromInt(-1));
			utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 267, "className" => "thx.TestBigInt", "methodName" => "testDivisionBy1IsTheIdentity")));
			$this4 = thx_bigint_Bigs::fromInt(153);
			$that3 = thx_bigint_Bigs::fromInt(1);
			$tmp6 = $this4->divide($that3);
			$tmp7 = thx__BigInt_BigInt_Impl_::equals($tmp6, thx_bigint_Bigs::fromInt(153));
			utest_Assert::isTrue($tmp7, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 268, "className" => "thx.TestBigInt", "methodName" => "testDivisionBy1IsTheIdentity")));
			$this5 = thx_bigint_Bigs::fromInt(-153);
			$that4 = thx_bigint_Bigs::fromInt(1);
			$tmp8 = $this5->divide($that4);
			$tmp9 = thx__BigInt_BigInt_Impl_::equals($tmp8, thx_bigint_Bigs::fromInt(-153));
			utest_Assert::isTrue($tmp9, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 269, "className" => "thx.TestBigInt", "methodName" => "testDivisionBy1IsTheIdentity")));
			$this6 = thx_bigint_Bigs::parseBase("9844190321790980841789", 10);
			$that5 = thx_bigint_Bigs::fromInt(1);
			$tmp10 = $this6->divide($that5);
			$tmp11 = thx__BigInt_BigInt_Impl_::equals($tmp10, thx_bigint_Bigs::parseBase("9844190321790980841789", 10));
			utest_Assert::isTrue($tmp11, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 270, "className" => "thx.TestBigInt", "methodName" => "testDivisionBy1IsTheIdentity")));
			$this7 = thx_bigint_Bigs::parseBase("-9844190321790980841789", 10);
			$that6 = thx_bigint_Bigs::fromInt(1);
			$tmp12 = $this7->divide($that6);
			$tmp13 = thx__BigInt_BigInt_Impl_::equals($tmp12, thx_bigint_Bigs::parseBase("-9844190321790980841789", 10));
			utest_Assert::isTrue($tmp13, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 271, "className" => "thx.TestBigInt", "methodName" => "testDivisionBy1IsTheIdentity")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp,$this7,$this6,$this5,$this4,$this3,$this2,$this1,$that6,$that5,$that4,$that3,$that2,$that1,$that);
		}
	}
	public function testDivisionBySelfIs1() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = thx_bigint_Bigs::fromInt(5);
			$that = thx_bigint_Bigs::fromInt(5);
			$tmp = $this1->divide($that);
			$tmp1 = thx__BigInt_BigInt_Impl_::equals($tmp, thx_bigint_Bigs::fromInt(1));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 276, "className" => "thx.TestBigInt", "methodName" => "testDivisionBySelfIs1")));
			$this2 = thx_bigint_Bigs::fromInt(-5);
			$that1 = thx_bigint_Bigs::fromInt(-5);
			$tmp2 = $this2->divide($that1);
			$tmp3 = thx__BigInt_BigInt_Impl_::equals($tmp2, thx_bigint_Bigs::fromInt(1));
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 277, "className" => "thx.TestBigInt", "methodName" => "testDivisionBySelfIs1")));
			$this3 = thx_bigint_Bigs::parseBase("20194965098495006574", 10);
			$that2 = thx_bigint_Bigs::parseBase("20194965098495006574", 10);
			$tmp4 = $this3->divide($that2);
			$tmp5 = thx__BigInt_BigInt_Impl_::equals($tmp4, thx_bigint_Bigs::fromInt(1));
			utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 278, "className" => "thx.TestBigInt", "methodName" => "testDivisionBySelfIs1")));
			$this4 = thx_bigint_Bigs::parseBase("-20194965098495006574", 10);
			$that3 = thx_bigint_Bigs::parseBase("-20194965098495006574", 10);
			$tmp6 = $this4->divide($that3);
			$tmp7 = thx__BigInt_BigInt_Impl_::equals($tmp6, thx_bigint_Bigs::fromInt(1));
			utest_Assert::isTrue($tmp7, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 279, "className" => "thx.TestBigInt", "methodName" => "testDivisionBySelfIs1")));
			unset($tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$this4,$this3,$this2,$this1,$that3,$that2,$that1,$that);
		}
	}
	public function testDivisionOf0Equals0() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = thx_bigint_Bigs::fromInt(0);
			$that = thx_bigint_Bigs::fromInt(1);
			$tmp = $this1->divide($that);
			$tmp1 = thx__BigInt_BigInt_Impl_::equals($tmp, thx_bigint_Bigs::fromInt(0));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 284, "className" => "thx.TestBigInt", "methodName" => "testDivisionOf0Equals0")));
			$this2 = thx_bigint_Bigs::fromInt(0);
			$that1 = thx_bigint_Bigs::fromInt(1);
			$tmp2 = $this2->divide($that1);
			$tmp3 = thx__BigInt_BigInt_Impl_::equals($tmp2, thx_bigint_Bigs::fromInt(0));
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 285, "className" => "thx.TestBigInt", "methodName" => "testDivisionOf0Equals0")));
			$this3 = thx_bigint_Bigs::fromInt(0);
			$that2 = thx_bigint_Bigs::parseBase("1234567890987654321", 10);
			$tmp4 = $this3->divide($that2);
			$tmp5 = thx__BigInt_BigInt_Impl_::equals($tmp4, thx_bigint_Bigs::fromInt(0));
			utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 286, "className" => "thx.TestBigInt", "methodName" => "testDivisionOf0Equals0")));
			$this4 = thx_bigint_Bigs::fromInt(0);
			$that3 = thx_bigint_Bigs::parseBase("-1234567890987654321", 10);
			$tmp6 = $this4->divide($that3);
			$tmp7 = thx__BigInt_BigInt_Impl_::equals($tmp6, thx_bigint_Bigs::fromInt(0));
			utest_Assert::isTrue($tmp7, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 287, "className" => "thx.TestBigInt", "methodName" => "testDivisionOf0Equals0")));
			unset($tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$this4,$this3,$this2,$this1,$that3,$that2,$that1,$that);
		}
	}
	public function testModulo0ThrowsError() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			utest_Assert::raises(array(new _hx_lambda(array(), "thx_TestBigInt_1"), 'execute'), _hx_qtype("thx.Error"), null, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 292, "className" => "thx.TestBigInt", "methodName" => "testModulo0ThrowsError")));
			utest_Assert::raises(array(new _hx_lambda(array(), "thx_TestBigInt_2"), 'execute'), _hx_qtype("thx.Error"), null, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 293, "className" => "thx.TestBigInt", "methodName" => "testModulo0ThrowsError")));
			utest_Assert::raises(array(new _hx_lambda(array(), "thx_TestBigInt_3"), 'execute'), _hx_qtype("thx.Error"), null, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 294, "className" => "thx.TestBigInt", "methodName" => "testModulo0ThrowsError")));
			utest_Assert::raises(array(new _hx_lambda(array(), "thx_TestBigInt_4"), 'execute'), _hx_qtype("thx.Error"), null, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 295, "className" => "thx.TestBigInt", "methodName" => "testModulo0ThrowsError")));
			utest_Assert::raises(array(new _hx_lambda(array(), "thx_TestBigInt_5"), 'execute'), _hx_qtype("thx.Error"), null, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 296, "className" => "thx.TestBigInt", "methodName" => "testModulo0ThrowsError")));
			utest_Assert::raises(array(new _hx_lambda(array(), "thx_TestBigInt_6"), 'execute'), _hx_qtype("thx.Error"), null, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 297, "className" => "thx.TestBigInt", "methodName" => "testModulo0ThrowsError")));
		}
	}
	public function testModuloHandlesSignsCorrectly() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = thx_bigint_Bigs::fromInt(124234233);
			$that = thx_bigint_Bigs::fromInt(2);
			$tmp = $this1->modulo($that);
			$tmp1 = thx__BigInt_BigInt_Impl_::equals($tmp, thx_bigint_Bigs::fromInt(1));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 302, "className" => "thx.TestBigInt", "methodName" => "testModuloHandlesSignsCorrectly")));
			$this2 = thx_bigint_Bigs::fromInt(124234233);
			$that1 = thx_bigint_Bigs::fromInt(-2);
			$tmp2 = $this2->modulo($that1);
			$tmp3 = thx__BigInt_BigInt_Impl_::equals($tmp2, thx_bigint_Bigs::fromInt(1));
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 303, "className" => "thx.TestBigInt", "methodName" => "testModuloHandlesSignsCorrectly")));
			$this3 = thx_bigint_Bigs::fromInt(-124234233);
			$that2 = thx_bigint_Bigs::fromInt(2);
			$tmp4 = $this3->modulo($that2);
			$tmp5 = thx__BigInt_BigInt_Impl_::equals($tmp4, thx_bigint_Bigs::fromInt(-1));
			utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 304, "className" => "thx.TestBigInt", "methodName" => "testModuloHandlesSignsCorrectly")));
			$this4 = thx_bigint_Bigs::fromInt(-124234233);
			$that3 = thx_bigint_Bigs::fromInt(-2);
			$tmp6 = $this4->modulo($that3);
			$tmp7 = thx__BigInt_BigInt_Impl_::equals($tmp6, thx_bigint_Bigs::fromInt(-1));
			utest_Assert::isTrue($tmp7, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 305, "className" => "thx.TestBigInt", "methodName" => "testModuloHandlesSignsCorrectly")));
			$this5 = thx_bigint_Bigs::fromInt(2);
			$that4 = thx_bigint_Bigs::fromInt(-1243233);
			$tmp8 = $this5->modulo($that4);
			$tmp9 = thx__BigInt_BigInt_Impl_::equals($tmp8, thx_bigint_Bigs::fromInt(2));
			$this6 = thx_bigint_Bigs::fromInt(2);
			$tmp10 = $this6->toString();
			$tmp11 = "excpected " . _hx_string_or_null($tmp10) . " % ";
			$this7 = thx_bigint_Bigs::fromInt(-1243233);
			$tmp12 = $this7->toString();
			$tmp13 = _hx_string_or_null($tmp11) . _hx_string_or_null($tmp12) . " == 2 but got ";
			$this8 = thx_bigint_Bigs::fromInt(2);
			$that5 = thx_bigint_Bigs::fromInt(-1243233);
			$this9 = $this8->modulo($that5);
			$tmp14 = $this9->toString();
			utest_Assert::isTrue($tmp9, _hx_string_or_null($tmp13) . _hx_string_or_null($tmp14), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 306, "className" => "thx.TestBigInt", "methodName" => "testModuloHandlesSignsCorrectly")));
			$this10 = thx_bigint_Bigs::fromInt(-2);
			$that6 = thx_bigint_Bigs::fromInt(-1243233);
			$tmp15 = $this10->modulo($that6);
			$tmp16 = thx__BigInt_BigInt_Impl_::equals($tmp15, thx_bigint_Bigs::fromInt(-2));
			$this11 = thx_bigint_Bigs::fromInt(-2);
			$tmp17 = $this11->toString();
			$tmp18 = "excpected " . _hx_string_or_null($tmp17) . " % ";
			$this12 = thx_bigint_Bigs::fromInt(-1243233);
			$tmp19 = $this12->toString();
			$tmp20 = _hx_string_or_null($tmp18) . _hx_string_or_null($tmp19) . " == -2 but got ";
			$this13 = thx_bigint_Bigs::fromInt(-2);
			$that7 = thx_bigint_Bigs::fromInt(-1243233);
			$this14 = $this13->modulo($that7);
			$tmp21 = $this14->toString();
			utest_Assert::isTrue($tmp16, _hx_string_or_null($tmp20) . _hx_string_or_null($tmp21), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 307, "className" => "thx.TestBigInt", "methodName" => "testModuloHandlesSignsCorrectly")));
			$this15 = thx_bigint_Bigs::parseBase("786456456335437356436", 10);
			$that8 = thx_bigint_Bigs::parseBase("-5423424653", 10);
			$tmp22 = $this15->modulo($that8);
			$tmp23 = thx__BigInt_BigInt_Impl_::equals($tmp22, thx_bigint_Bigs::parseBase("2663036842", 10));
			$this16 = thx_bigint_Bigs::parseBase("786456456335437356436", 10);
			$tmp24 = $this16->toString();
			$tmp25 = "expected " . _hx_string_or_null($tmp24) . " % ";
			$this17 = thx_bigint_Bigs::parseBase("-5423424653", 10);
			$tmp26 = $this17->toString();
			$tmp27 = _hx_string_or_null($tmp25) . _hx_string_or_null($tmp26) . " == ";
			$this18 = thx_bigint_Bigs::parseBase("2663036842", 10);
			$tmp28 = $this18->toString();
			$tmp29 = _hx_string_or_null($tmp27) . _hx_string_or_null($tmp28) . " but got ";
			$this19 = thx_bigint_Bigs::parseBase("786456456335437356436", 10);
			$that9 = thx_bigint_Bigs::parseBase("-5423424653", 10);
			$this20 = $this19->modulo($that9);
			$tmp30 = $this20->toString();
			utest_Assert::isTrue($tmp23, _hx_string_or_null($tmp29) . _hx_string_or_null($tmp30), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 308, "className" => "thx.TestBigInt", "methodName" => "testModuloHandlesSignsCorrectly")));
			$this21 = thx_bigint_Bigs::parseBase("93453764643534523", 10);
			$that10 = thx_bigint_Bigs::fromInt(-2342);
			$tmp31 = $this21->modulo($that10);
			$tmp32 = thx__BigInt_BigInt_Impl_::equals($tmp31, thx_bigint_Bigs::fromInt(1119));
			utest_Assert::isTrue($tmp32, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 309, "className" => "thx.TestBigInt", "methodName" => "testModuloHandlesSignsCorrectly")));
			$this22 = thx_bigint_Bigs::fromInt(-32542543);
			$that11 = thx_bigint_Bigs::fromInt(100000000);
			$tmp33 = $this22->modulo($that11);
			$tmp34 = thx__BigInt_BigInt_Impl_::equals($tmp33, thx_bigint_Bigs::fromInt(-32542543));
			utest_Assert::isTrue($tmp34, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 310, "className" => "thx.TestBigInt", "methodName" => "testModuloHandlesSignsCorrectly")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp34,$tmp33,$tmp32,$tmp31,$tmp30,$tmp3,$tmp29,$tmp28,$tmp27,$tmp26,$tmp25,$tmp24,$tmp23,$tmp22,$tmp21,$tmp20,$tmp2,$tmp19,$tmp18,$tmp17,$tmp16,$tmp15,$tmp14,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp,$this9,$this8,$this7,$this6,$this5,$this4,$this3,$this22,$this21,$this20,$this2,$this19,$this18,$this17,$this16,$this15,$this14,$this13,$this12,$this11,$this10,$this1,$that9,$that8,$that7,$that6,$that5,$that4,$that3,$that2,$that11,$that10,$that1,$that);
		}
	}
	public function testPrevNext() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = thx_bigint_Bigs::fromInt(546);
			$tmp = $this1->prev();
			$tmp1 = thx__BigInt_BigInt_Impl_::equals($tmp, thx_bigint_Bigs::fromInt(545));
			$this2 = thx_bigint_Bigs::fromInt(546);
			$tmp2 = $this2->toString();
			$tmp3 = "expected " . _hx_string_or_null($tmp2) . ".prev() == 545 but got ";
			$this3 = thx_bigint_Bigs::fromInt(546);
			$this4 = $this3->prev();
			$tmp4 = $this4->toString();
			utest_Assert::isTrue($tmp1, _hx_string_or_null($tmp3) . _hx_string_or_null($tmp4), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 315, "className" => "thx.TestBigInt", "methodName" => "testPrevNext")));
			$this5 = thx_bigint_Bigs::fromInt(1);
			$tmp5 = $this5->prev();
			$tmp6 = thx__BigInt_BigInt_Impl_::equals($tmp5, thx_bigint_Bigs::fromInt(0));
			utest_Assert::isTrue($tmp6, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 316, "className" => "thx.TestBigInt", "methodName" => "testPrevNext")));
			$this6 = thx_bigint_Bigs::fromInt(0);
			$tmp7 = $this6->prev();
			$tmp8 = thx__BigInt_BigInt_Impl_::equals($tmp7, thx_bigint_Bigs::fromInt(-1));
			utest_Assert::isTrue($tmp8, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 317, "className" => "thx.TestBigInt", "methodName" => "testPrevNext")));
			$this7 = thx_bigint_Bigs::fromInt(-1);
			$tmp9 = $this7->prev();
			$tmp10 = thx__BigInt_BigInt_Impl_::equals($tmp9, thx_bigint_Bigs::fromInt(-2));
			$this8 = thx_bigint_Bigs::fromInt(-1);
			$tmp11 = $this8->toString();
			$tmp12 = "expected " . _hx_string_or_null($tmp11) . ".prev() == -2 but got ";
			$this9 = thx_bigint_Bigs::fromInt(-1);
			$this10 = $this9->prev();
			$tmp13 = $this10->toString();
			utest_Assert::isTrue($tmp10, _hx_string_or_null($tmp12) . _hx_string_or_null($tmp13), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 318, "className" => "thx.TestBigInt", "methodName" => "testPrevNext")));
			$this11 = thx_bigint_Bigs::fromInt(-1987);
			$tmp14 = $this11->prev();
			$tmp15 = thx__BigInt_BigInt_Impl_::equals($tmp14, thx_bigint_Bigs::fromInt(-1988));
			utest_Assert::isTrue($tmp15, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 319, "className" => "thx.TestBigInt", "methodName" => "testPrevNext")));
			$this12 = thx_bigint_Bigs::fromInt(546);
			$tmp16 = $this12->next();
			$tmp17 = thx__BigInt_BigInt_Impl_::equals($tmp16, thx_bigint_Bigs::fromInt(547));
			utest_Assert::isTrue($tmp17, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 321, "className" => "thx.TestBigInt", "methodName" => "testPrevNext")));
			$this13 = thx_bigint_Bigs::fromInt(1);
			$tmp18 = $this13->next();
			$tmp19 = thx__BigInt_BigInt_Impl_::equals($tmp18, thx_bigint_Bigs::fromInt(2));
			utest_Assert::isTrue($tmp19, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 322, "className" => "thx.TestBigInt", "methodName" => "testPrevNext")));
			$this14 = thx_bigint_Bigs::fromInt(0);
			$tmp20 = $this14->next();
			$tmp21 = thx__BigInt_BigInt_Impl_::equals($tmp20, thx_bigint_Bigs::fromInt(1));
			utest_Assert::isTrue($tmp21, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 323, "className" => "thx.TestBigInt", "methodName" => "testPrevNext")));
			$this15 = thx_bigint_Bigs::fromInt(-1);
			$tmp22 = $this15->next();
			$tmp23 = thx__BigInt_BigInt_Impl_::equals($tmp22, thx_bigint_Bigs::fromInt(0));
			utest_Assert::isTrue($tmp23, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 324, "className" => "thx.TestBigInt", "methodName" => "testPrevNext")));
			$this16 = thx_bigint_Bigs::fromInt(-1987);
			$tmp24 = $this16->next();
			$tmp25 = thx__BigInt_BigInt_Impl_::equals($tmp24, thx_bigint_Bigs::fromInt(-1986));
			utest_Assert::isTrue($tmp25, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 325, "className" => "thx.TestBigInt", "methodName" => "testPrevNext")));
			$this17 = thx_bigint_Bigs::fromInt(0);
			$tmp26 = $this17->next();
			$tmp27 = thx__BigInt_BigInt_Impl_::equals($tmp26, thx_bigint_Bigs::fromInt(1));
			utest_Assert::isTrue($tmp27, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 327, "className" => "thx.TestBigInt", "methodName" => "testPrevNext")));
			$this18 = thx_bigint_Bigs::fromInt(-1);
			$tmp28 = $this18->next();
			$tmp29 = thx__BigInt_BigInt_Impl_::equals($tmp28, thx_bigint_Bigs::fromInt(0));
			utest_Assert::isTrue($tmp29, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 328, "className" => "thx.TestBigInt", "methodName" => "testPrevNext")));
			$this19 = thx_bigint_Bigs::fromInt(34);
			$tmp30 = $this19->next();
			$tmp31 = thx__BigInt_BigInt_Impl_::equals($tmp30, thx_bigint_Bigs::fromInt(35));
			utest_Assert::isTrue($tmp31, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 329, "className" => "thx.TestBigInt", "methodName" => "testPrevNext")));
			$this20 = thx_bigint_Bigs::parseBase("9007199254740992", 10);
			$tmp32 = $this20->next();
			$tmp33 = thx__BigInt_BigInt_Impl_::equals($tmp32, thx_bigint_Bigs::parseBase("9007199254740993", 10));
			utest_Assert::isTrue($tmp33, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 330, "className" => "thx.TestBigInt", "methodName" => "testPrevNext")));
			$this21 = thx_bigint_Bigs::parseBase("-9007199254740992", 10);
			$tmp34 = $this21->next();
			$tmp35 = thx__BigInt_BigInt_Impl_::equals($tmp34, thx_bigint_Bigs::parseBase("-9007199254740991", 10));
			utest_Assert::isTrue($tmp35, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 331, "className" => "thx.TestBigInt", "methodName" => "testPrevNext")));
			$this22 = thx_bigint_Bigs::parseBase("9007199254740992999", 10);
			$tmp36 = $this22->next();
			$tmp37 = thx__BigInt_BigInt_Impl_::equals($tmp36, thx_bigint_Bigs::parseBase("9007199254740993000", 10));
			utest_Assert::isTrue($tmp37, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 332, "className" => "thx.TestBigInt", "methodName" => "testPrevNext")));
			$this23 = thx_bigint_Bigs::parseBase("9007199254740991", 10);
			$tmp38 = $this23->next();
			$tmp39 = thx__BigInt_BigInt_Impl_::equals($tmp38, thx_bigint_Bigs::parseBase("9007199254740992", 10));
			utest_Assert::isTrue($tmp39, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 333, "className" => "thx.TestBigInt", "methodName" => "testPrevNext")));
			$this24 = thx_bigint_Bigs::fromInt(0);
			$tmp40 = $this24->prev();
			$tmp41 = thx__BigInt_BigInt_Impl_::equals($tmp40, thx_bigint_Bigs::fromInt(-1));
			utest_Assert::isTrue($tmp41, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 335, "className" => "thx.TestBigInt", "methodName" => "testPrevNext")));
			$this25 = thx_bigint_Bigs::fromInt(-1);
			$tmp42 = $this25->prev();
			$tmp43 = thx__BigInt_BigInt_Impl_::equals($tmp42, thx_bigint_Bigs::fromInt(-2));
			utest_Assert::isTrue($tmp43, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 336, "className" => "thx.TestBigInt", "methodName" => "testPrevNext")));
			$this26 = thx_bigint_Bigs::fromInt(34);
			$tmp44 = $this26->prev();
			$tmp45 = thx__BigInt_BigInt_Impl_::equals($tmp44, thx_bigint_Bigs::fromInt(33));
			utest_Assert::isTrue($tmp45, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 337, "className" => "thx.TestBigInt", "methodName" => "testPrevNext")));
			$this27 = thx_bigint_Bigs::parseBase("9007199254740992", 10);
			$tmp46 = $this27->prev();
			$tmp47 = thx__BigInt_BigInt_Impl_::equals($tmp46, thx_bigint_Bigs::parseBase("9007199254740991", 10));
			utest_Assert::isTrue($tmp47, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 338, "className" => "thx.TestBigInt", "methodName" => "testPrevNext")));
			$this28 = thx_bigint_Bigs::parseBase("-9007199254740992", 10);
			$tmp48 = $this28->prev();
			$tmp49 = thx__BigInt_BigInt_Impl_::equals($tmp48, thx_bigint_Bigs::parseBase("-9007199254740993", 10));
			utest_Assert::isTrue($tmp49, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 339, "className" => "thx.TestBigInt", "methodName" => "testPrevNext")));
			$this29 = thx_bigint_Bigs::parseBase("9007199254740992999", 10);
			$tmp50 = $this29->prev();
			$tmp51 = thx__BigInt_BigInt_Impl_::equals($tmp50, thx_bigint_Bigs::parseBase("9007199254740992998", 10));
			utest_Assert::isTrue($tmp51, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 340, "className" => "thx.TestBigInt", "methodName" => "testPrevNext")));
			$this30 = thx_bigint_Bigs::parseBase("-9007199254740991", 10);
			$tmp52 = $this30->prev();
			$tmp53 = thx__BigInt_BigInt_Impl_::equals($tmp52, thx_bigint_Bigs::parseBase("-9007199254740992", 10));
			utest_Assert::isTrue($tmp53, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 341, "className" => "thx.TestBigInt", "methodName" => "testPrevNext")));
			$this31 = thx_bigint_Bigs::parseBase("109874981950949849811049", 10);
			$tmp54 = $this31->prev();
			$tmp55 = thx__BigInt_BigInt_Impl_::equals($tmp54, thx_bigint_Bigs::parseBase("109874981950949849811048", 10));
			$this32 = thx_bigint_Bigs::parseBase("109874981950949849811049", 10);
			$this33 = $this32->prev();
			$tmp56 = $this33->toString();
			$tmp57 = "expected " . _hx_string_or_null($tmp56) . " == ";
			$this34 = thx_bigint_Bigs::parseBase("109874981950949849811048", 10);
			$tmp58 = $this34->toString();
			utest_Assert::isTrue($tmp55, _hx_string_or_null($tmp57) . _hx_string_or_null($tmp58), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 343, "className" => "thx.TestBigInt", "methodName" => "testPrevNext")));
			$this35 = thx_bigint_Bigs::parseBase("109874981950949849811049", 10);
			$tmp59 = $this35->next();
			$tmp60 = thx__BigInt_BigInt_Impl_::equals($tmp59, thx_bigint_Bigs::parseBase("109874981950949849811050", 10));
			$this36 = thx_bigint_Bigs::parseBase("109874981950949849811049", 10);
			$this37 = $this36->next();
			$tmp61 = $this37->toString();
			$tmp62 = "expected " . _hx_string_or_null($tmp61) . " == ";
			$this38 = thx_bigint_Bigs::parseBase("109874981950949849811050", 10);
			$tmp63 = $this38->toString();
			utest_Assert::isTrue($tmp60, _hx_string_or_null($tmp62) . _hx_string_or_null($tmp63), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 344, "className" => "thx.TestBigInt", "methodName" => "testPrevNext")));
			$this39 = thx_bigint_Bigs::parseBase("-109874981950949849811049", 10);
			$tmp64 = $this39->prev();
			$tmp65 = thx__BigInt_BigInt_Impl_::equals($tmp64, thx_bigint_Bigs::parseBase("-109874981950949849811050", 10));
			$this40 = thx_bigint_Bigs::parseBase("-109874981950949849811049", 10);
			$this41 = $this40->prev();
			$tmp66 = $this41->toString();
			$tmp67 = "expected " . _hx_string_or_null($tmp66) . " == ";
			$this42 = thx_bigint_Bigs::parseBase("-109874981950949849811050", 10);
			$tmp68 = $this42->toString();
			utest_Assert::isTrue($tmp65, _hx_string_or_null($tmp67) . _hx_string_or_null($tmp68), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 345, "className" => "thx.TestBigInt", "methodName" => "testPrevNext")));
			$this43 = thx_bigint_Bigs::parseBase("-109874981950949849811049", 10);
			$tmp69 = $this43->next();
			$tmp70 = thx__BigInt_BigInt_Impl_::equals($tmp69, thx_bigint_Bigs::parseBase("-109874981950949849811048", 10));
			$this44 = thx_bigint_Bigs::parseBase("-109874981950949849811049", 10);
			$this45 = $this44->next();
			$tmp71 = $this45->toString();
			$tmp72 = "expected " . _hx_string_or_null($tmp71) . " == ";
			$this46 = thx_bigint_Bigs::parseBase("-109874981950949849811048", 10);
			$tmp73 = $this46->toString();
			utest_Assert::isTrue($tmp70, _hx_string_or_null($tmp72) . _hx_string_or_null($tmp73), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 346, "className" => "thx.TestBigInt", "methodName" => "testPrevNext")));
			unset($tmp9,$tmp8,$tmp73,$tmp72,$tmp71,$tmp70,$tmp7,$tmp69,$tmp68,$tmp67,$tmp66,$tmp65,$tmp64,$tmp63,$tmp62,$tmp61,$tmp60,$tmp6,$tmp59,$tmp58,$tmp57,$tmp56,$tmp55,$tmp54,$tmp53,$tmp52,$tmp51,$tmp50,$tmp5,$tmp49,$tmp48,$tmp47,$tmp46,$tmp45,$tmp44,$tmp43,$tmp42,$tmp41,$tmp40,$tmp4,$tmp39,$tmp38,$tmp37,$tmp36,$tmp35,$tmp34,$tmp33,$tmp32,$tmp31,$tmp30,$tmp3,$tmp29,$tmp28,$tmp27,$tmp26,$tmp25,$tmp24,$tmp23,$tmp22,$tmp21,$tmp20,$tmp2,$tmp19,$tmp18,$tmp17,$tmp16,$tmp15,$tmp14,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp,$this9,$this8,$this7,$this6,$this5,$this46,$this45,$this44,$this43,$this42,$this41,$this40,$this4,$this39,$this38,$this37,$this36,$this35,$this34,$this33,$this32,$this31,$this30,$this3,$this29,$this28,$this27,$this26,$this25,$this24,$this23,$this22,$this21,$this20,$this2,$this19,$this18,$this17,$this16,$this15,$this14,$this13,$this12,$this11,$this10,$this1);
		}
	}
	public function testPrevNextCarriesOverCorrectly() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = thx_bigint_Bigs::fromInt(9999999);
			$tmp = $this1->next();
			$tmp1 = thx__BigInt_BigInt_Impl_::equals($tmp, thx_bigint_Bigs::fromInt(10000000));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 351, "className" => "thx.TestBigInt", "methodName" => "testPrevNextCarriesOverCorrectly")));
			$this2 = thx_bigint_Bigs::fromInt(10000000);
			$tmp2 = $this2->prev();
			$tmp3 = thx__BigInt_BigInt_Impl_::equals($tmp2, thx_bigint_Bigs::fromInt(9999999));
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 352, "className" => "thx.TestBigInt", "methodName" => "testPrevNextCarriesOverCorrectly")));
			unset($tmp3,$tmp2,$tmp1,$tmp,$this2,$this1);
		}
	}
	public function testAbs() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = thx_bigint_Bigs::fromInt(0);
			$tmp = $this1->abs();
			$tmp1 = thx__BigInt_BigInt_Impl_::equals($tmp, thx_bigint_Bigs::fromInt(0));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 357, "className" => "thx.TestBigInt", "methodName" => "testAbs")));
			$this2 = thx_bigint_Bigs::parseBase("-0", 10);
			$tmp2 = $this2->abs();
			$tmp3 = thx__BigInt_BigInt_Impl_::equals($tmp2, thx_bigint_Bigs::fromInt(0));
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 358, "className" => "thx.TestBigInt", "methodName" => "testAbs")));
			$this3 = thx_bigint_Bigs::fromInt(54);
			$tmp4 = $this3->abs();
			$tmp5 = thx__BigInt_BigInt_Impl_::equals($tmp4, thx_bigint_Bigs::fromInt(54));
			utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 359, "className" => "thx.TestBigInt", "methodName" => "testAbs")));
			$this4 = thx_bigint_Bigs::fromInt(-54);
			$tmp6 = $this4->abs();
			$tmp7 = thx__BigInt_BigInt_Impl_::equals($tmp6, thx_bigint_Bigs::fromInt(54));
			utest_Assert::isTrue($tmp7, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 360, "className" => "thx.TestBigInt", "methodName" => "testAbs")));
			$this5 = thx_bigint_Bigs::parseBase("13412564654613034984065434", 10);
			$tmp8 = $this5->abs();
			$tmp9 = thx__BigInt_BigInt_Impl_::equals($tmp8, thx_bigint_Bigs::parseBase("13412564654613034984065434", 10));
			utest_Assert::isTrue($tmp9, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 361, "className" => "thx.TestBigInt", "methodName" => "testAbs")));
			$this6 = thx_bigint_Bigs::parseBase("-13412564654613034984065434", 10);
			$tmp10 = $this6->abs();
			$tmp11 = thx__BigInt_BigInt_Impl_::equals($tmp10, thx_bigint_Bigs::parseBase("13412564654613034984065434", 10));
			utest_Assert::isTrue($tmp11, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 362, "className" => "thx.TestBigInt", "methodName" => "testAbs")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp11,$tmp10,$tmp1,$tmp,$this6,$this5,$this4,$this3,$this2,$this1);
		}
	}
	public function testIsPositiveAndIsNegative() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = thx_bigint_Bigs::fromInt(0);
			$tmp = $this1->compareTo(thx__BigInt_BigInt_Impl_::$zero);
			utest_Assert::isFalse($tmp > 0, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 367, "className" => "thx.TestBigInt", "methodName" => "testIsPositiveAndIsNegative")));
			$this2 = thx_bigint_Bigs::fromInt(0);
			$tmp1 = $this2->sign;
			utest_Assert::isFalse($tmp1, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 368, "className" => "thx.TestBigInt", "methodName" => "testIsPositiveAndIsNegative")));
			$this3 = thx_bigint_Bigs::fromInt(0);
			$tmp2 = $this3->compareTo(thx__BigInt_BigInt_Impl_::$zero);
			utest_Assert::isFalse($tmp2 > 0, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 369, "className" => "thx.TestBigInt", "methodName" => "testIsPositiveAndIsNegative")));
			$this4 = thx_bigint_Bigs::fromInt(0);
			$tmp3 = $this4->sign;
			utest_Assert::isFalse($tmp3, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 370, "className" => "thx.TestBigInt", "methodName" => "testIsPositiveAndIsNegative")));
			unset($tmp3,$tmp2,$tmp1,$tmp,$this4,$this3,$this2,$this1);
		}
	}
	public function testIsPositiveAndIsNegativeWorkForSmallNumbers() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = thx_bigint_Bigs::fromInt(1);
			$tmp = $this1->compareTo(thx__BigInt_BigInt_Impl_::$zero);
			utest_Assert::isTrue($tmp > 0, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 375, "className" => "thx.TestBigInt", "methodName" => "testIsPositiveAndIsNegativeWorkForSmallNumbers")));
			$this2 = thx_bigint_Bigs::fromInt(543);
			$tmp1 = $this2->sign;
			utest_Assert::isFalse($tmp1, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 376, "className" => "thx.TestBigInt", "methodName" => "testIsPositiveAndIsNegativeWorkForSmallNumbers")));
			$this3 = thx_bigint_Bigs::fromInt(-1);
			$tmp2 = $this3->compareTo(thx__BigInt_BigInt_Impl_::$zero);
			utest_Assert::isFalse($tmp2 > 0, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 377, "className" => "thx.TestBigInt", "methodName" => "testIsPositiveAndIsNegativeWorkForSmallNumbers")));
			$this4 = thx_bigint_Bigs::fromInt(-765);
			$tmp3 = $this4->sign;
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 378, "className" => "thx.TestBigInt", "methodName" => "testIsPositiveAndIsNegativeWorkForSmallNumbers")));
			unset($tmp3,$tmp2,$tmp1,$tmp,$this4,$this3,$this2,$this1);
		}
	}
	public function testIsPositiveAndIsNegativeWorkForBigNumbers() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = thx_bigint_Bigs::parseBase("651987498619879841", 10);
			$tmp = $this1->compareTo(thx__BigInt_BigInt_Impl_::$zero);
			utest_Assert::isTrue($tmp > 0, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 383, "className" => "thx.TestBigInt", "methodName" => "testIsPositiveAndIsNegativeWorkForBigNumbers")));
			$this2 = thx_bigint_Bigs::parseBase("0054984980098460", 10);
			$tmp1 = $this2->sign;
			utest_Assert::isFalse($tmp1, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 384, "className" => "thx.TestBigInt", "methodName" => "testIsPositiveAndIsNegativeWorkForBigNumbers")));
			$this3 = thx_bigint_Bigs::parseBase("-1961987984109078496", 10);
			$tmp2 = $this3->compareTo(thx__BigInt_BigInt_Impl_::$zero);
			utest_Assert::isFalse($tmp2 > 0, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 385, "className" => "thx.TestBigInt", "methodName" => "testIsPositiveAndIsNegativeWorkForBigNumbers")));
			$this4 = thx_bigint_Bigs::parseBase("-98800984196109540984", 10);
			$tmp3 = $this4->sign;
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 386, "className" => "thx.TestBigInt", "methodName" => "testIsPositiveAndIsNegativeWorkForBigNumbers")));
			unset($tmp3,$tmp2,$tmp1,$tmp,$this4,$this3,$this2,$this1);
		}
	}
	public function testIsUnit() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx__BigInt_BigInt_Impl_::$one->isUnit();
			utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 391, "className" => "thx.TestBigInt", "methodName" => "testIsUnit")));
			$tmp1 = thx__BigInt_BigInt_Impl_::$negativeOne->isUnit();
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 392, "className" => "thx.TestBigInt", "methodName" => "testIsUnit")));
			$tmp2 = thx__BigInt_BigInt_Impl_::$zero->isUnit();
			utest_Assert::isFalse($tmp2, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 393, "className" => "thx.TestBigInt", "methodName" => "testIsUnit")));
			$this1 = thx_bigint_Bigs::fromInt(5);
			$tmp3 = $this1->isUnit();
			utest_Assert::isFalse($tmp3, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 394, "className" => "thx.TestBigInt", "methodName" => "testIsUnit")));
			$this2 = thx_bigint_Bigs::fromInt(-5);
			$tmp4 = $this2->isUnit();
			utest_Assert::isFalse($tmp4, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 395, "className" => "thx.TestBigInt", "methodName" => "testIsUnit")));
			$this3 = thx_bigint_Bigs::parseBase("654609649089416160", 10);
			$tmp5 = $this3->isUnit();
			utest_Assert::isFalse($tmp5, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 396, "className" => "thx.TestBigInt", "methodName" => "testIsUnit")));
			$this4 = thx_bigint_Bigs::parseBase("-98410980984981094", 10);
			$tmp6 = $this4->isUnit();
			utest_Assert::isFalse($tmp6, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 397, "className" => "thx.TestBigInt", "methodName" => "testIsUnit")));
			unset($tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$this4,$this3,$this2,$this1);
		}
	}
	public function testIsZero() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx__BigInt_BigInt_Impl_::$zero->isZero();
			utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 402, "className" => "thx.TestBigInt", "methodName" => "testIsZero")));
			$this1 = thx_bigint_Bigs::fromInt(0);
			$tmp1 = $this1->isZero();
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 403, "className" => "thx.TestBigInt", "methodName" => "testIsZero")));
			$this2 = thx_bigint_Bigs::parseBase("-0", 10);
			$tmp2 = $this2->isZero();
			utest_Assert::isTrue($tmp2, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 404, "className" => "thx.TestBigInt", "methodName" => "testIsZero")));
			$this3 = thx_bigint_Bigs::fromInt(15);
			$tmp3 = $this3->isZero();
			utest_Assert::isFalse($tmp3, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 405, "className" => "thx.TestBigInt", "methodName" => "testIsZero")));
			$this4 = thx_bigint_Bigs::fromInt(-15);
			$tmp4 = $this4->isZero();
			utest_Assert::isFalse($tmp4, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 406, "className" => "thx.TestBigInt", "methodName" => "testIsZero")));
			$this5 = thx_bigint_Bigs::parseBase("63213098189462109840", 10);
			$tmp5 = $this5->isZero();
			utest_Assert::isFalse($tmp5, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 407, "className" => "thx.TestBigInt", "methodName" => "testIsZero")));
			$this6 = thx_bigint_Bigs::parseBase("-64343745644564564563", 10);
			$tmp6 = $this6->isZero();
			utest_Assert::isFalse($tmp6, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 408, "className" => "thx.TestBigInt", "methodName" => "testIsZero")));
			$this7 = thx_bigint_Bigs::fromInt(0);
			$tmp7 = $this7->isZero();
			utest_Assert::isTrue($tmp7, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 409, "className" => "thx.TestBigInt", "methodName" => "testIsZero")));
			unset($tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$this7,$this6,$this5,$this4,$this3,$this2,$this1);
		}
	}
	public function testSquare() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = thx_bigint_Bigs::fromInt(0);
			$tmp = $this1->square();
			$tmp1 = thx__BigInt_BigInt_Impl_::equals($tmp, thx_bigint_Bigs::fromInt(0));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 414, "className" => "thx.TestBigInt", "methodName" => "testSquare")));
			$this2 = thx_bigint_Bigs::fromInt(16);
			$tmp2 = $this2->square();
			$tmp3 = thx__BigInt_BigInt_Impl_::equals($tmp2, thx_bigint_Bigs::fromInt(256));
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 415, "className" => "thx.TestBigInt", "methodName" => "testSquare")));
			$this3 = thx_bigint_Bigs::fromInt(-16);
			$tmp4 = $this3->square();
			$tmp5 = thx__BigInt_BigInt_Impl_::equals($tmp4, thx_bigint_Bigs::fromInt(256));
			utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 416, "className" => "thx.TestBigInt", "methodName" => "testSquare")));
			$this4 = thx_bigint_Bigs::parseBase("65536", 10);
			$tmp6 = $this4->square();
			$tmp7 = thx__BigInt_BigInt_Impl_::equals($tmp6, thx_bigint_Bigs::parseBase("4294967296", 10));
			$this5 = thx_bigint_Bigs::parseBase("65536", 10);
			$this6 = $this5->square();
			$tmp8 = $this6->toString();
			utest_Assert::isTrue($tmp7, "expected " . _hx_string_or_null($tmp8) . " == 4294967296", _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 417, "className" => "thx.TestBigInt", "methodName" => "testSquare")));
			unset($tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$this6,$this5,$this4,$this3,$this2,$this1);
		}
	}
	public function testPowerToNegativeNumbersIs0() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = thx_bigint_Bigs::fromInt(0);
			$exp = thx_bigint_Bigs::fromInt(-298);
			$tmp = $this1->pow($exp);
			$tmp1 = thx__BigInt_BigInt_Impl_::equals($tmp, thx_bigint_Bigs::fromInt(0));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 422, "className" => "thx.TestBigInt", "methodName" => "testPowerToNegativeNumbersIs0")));
			$this2 = thx_bigint_Bigs::fromInt(543);
			$exp1 = thx_bigint_Bigs::fromInt(-2);
			$tmp2 = $this2->pow($exp1);
			$tmp3 = thx__BigInt_BigInt_Impl_::equals($tmp2, thx_bigint_Bigs::fromInt(0));
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 423, "className" => "thx.TestBigInt", "methodName" => "testPowerToNegativeNumbersIs0")));
			$this3 = thx_bigint_Bigs::parseBase("323434643534523", 10);
			$exp2 = thx_bigint_Bigs::fromInt(-1);
			$tmp4 = $this3->pow($exp2);
			$tmp5 = thx__BigInt_BigInt_Impl_::equals($tmp4, thx_bigint_Bigs::fromInt(0));
			utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 424, "className" => "thx.TestBigInt", "methodName" => "testPowerToNegativeNumbersIs0")));
			$this4 = thx_bigint_Bigs::fromInt(-54302);
			$exp3 = thx_bigint_Bigs::parseBase("-543624724341214223562", 10);
			$tmp6 = $this4->pow($exp3);
			$tmp7 = thx__BigInt_BigInt_Impl_::equals($tmp6, thx_bigint_Bigs::fromInt(0));
			utest_Assert::isTrue($tmp7, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 425, "className" => "thx.TestBigInt", "methodName" => "testPowerToNegativeNumbersIs0")));
			$this5 = thx_bigint_Bigs::parseBase("-20199605604968", 10);
			$exp4 = thx_bigint_Bigs::fromInt(-99);
			$tmp8 = $this5->pow($exp4);
			$tmp9 = thx__BigInt_BigInt_Impl_::equals($tmp8, thx_bigint_Bigs::fromInt(0));
			utest_Assert::isTrue($tmp9, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 426, "className" => "thx.TestBigInt", "methodName" => "testPowerToNegativeNumbersIs0")));
			$this6 = thx_bigint_Bigs::fromInt(1);
			$exp5 = thx_bigint_Bigs::fromInt(-1);
			$tmp10 = $this6->pow($exp5);
			$tmp11 = thx__BigInt_BigInt_Impl_::equals($tmp10, thx_bigint_Bigs::fromInt(1));
			utest_Assert::isTrue($tmp11, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 428, "className" => "thx.TestBigInt", "methodName" => "testPowerToNegativeNumbersIs0")));
			$this7 = thx_bigint_Bigs::fromInt(-1);
			$exp6 = thx_bigint_Bigs::fromInt(-1);
			$tmp12 = $this7->pow($exp6);
			$tmp13 = thx__BigInt_BigInt_Impl_::equals($tmp12, thx_bigint_Bigs::fromInt(-1));
			utest_Assert::isTrue($tmp13, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 429, "className" => "thx.TestBigInt", "methodName" => "testPowerToNegativeNumbersIs0")));
			$this8 = thx_bigint_Bigs::fromInt(-1);
			$exp7 = thx_bigint_Bigs::fromInt(-2);
			$tmp14 = $this8->pow($exp7);
			$tmp15 = thx__BigInt_BigInt_Impl_::equals($tmp14, thx_bigint_Bigs::fromInt(1));
			utest_Assert::isTrue($tmp15, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 430, "className" => "thx.TestBigInt", "methodName" => "testPowerToNegativeNumbersIs0")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp15,$tmp14,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp,$this8,$this7,$this6,$this5,$this4,$this3,$this2,$this1,$exp7,$exp6,$exp5,$exp4,$exp3,$exp2,$exp1,$exp);
		}
	}
	public function testPowerHandlesSignsCorrectly() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = thx_bigint_Bigs::fromInt(2);
			$exp = thx_bigint_Bigs::fromInt(3);
			$tmp = $this1->pow($exp);
			$tmp1 = thx__BigInt_BigInt_Impl_::equals($tmp, thx_bigint_Bigs::fromInt(8));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 435, "className" => "thx.TestBigInt", "methodName" => "testPowerHandlesSignsCorrectly")));
			$this2 = thx_bigint_Bigs::fromInt(-2);
			$exp1 = thx_bigint_Bigs::fromInt(3);
			$tmp2 = $this2->pow($exp1);
			$tmp3 = thx__BigInt_BigInt_Impl_::equals($tmp2, thx_bigint_Bigs::fromInt(-8));
			$this3 = thx_bigint_Bigs::fromInt(-2);
			$exp2 = thx_bigint_Bigs::fromInt(3);
			$this4 = $this3->pow($exp2);
			$tmp4 = $this4->toString();
			utest_Assert::isTrue($tmp3, "expected " . _hx_string_or_null($tmp4) . " == -8", _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 436, "className" => "thx.TestBigInt", "methodName" => "testPowerHandlesSignsCorrectly")));
			$this5 = thx_bigint_Bigs::parseBase("1036350201654", 10);
			$exp3 = thx_bigint_Bigs::fromInt(4);
			$tmp5 = $this5->pow($exp3);
			$tmp6 = thx__BigInt_BigInt_Impl_::equals($tmp5, thx_bigint_Bigs::parseBase("1153522698998527286707879497611725813209153232656", 10));
			$this6 = thx_bigint_Bigs::parseBase("1036350201654", 10);
			$exp4 = thx_bigint_Bigs::fromInt(4);
			$this7 = $this6->pow($exp4);
			$tmp7 = $this7->toString();
			$tmp8 = "expected " . _hx_string_or_null($tmp7) . " == ";
			$this8 = thx_bigint_Bigs::parseBase("1153522698998527286707879497611725813209153232656", 10);
			$tmp9 = $this8->toString();
			utest_Assert::isTrue($tmp6, _hx_string_or_null($tmp8) . _hx_string_or_null($tmp9), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 437, "className" => "thx.TestBigInt", "methodName" => "testPowerHandlesSignsCorrectly")));
			$this9 = thx_bigint_Bigs::parseBase("-1036350201654", 10);
			$exp5 = thx_bigint_Bigs::fromInt(4);
			$tmp10 = $this9->pow($exp5);
			$tmp11 = thx__BigInt_BigInt_Impl_::equals($tmp10, thx_bigint_Bigs::parseBase("1153522698998527286707879497611725813209153232656", 10));
			$this10 = thx_bigint_Bigs::parseBase("-1036350201654", 10);
			$exp6 = thx_bigint_Bigs::fromInt(4);
			$this11 = $this10->pow($exp6);
			$tmp12 = $this11->toString();
			$tmp13 = "expected " . _hx_string_or_null($tmp12) . " == ";
			$this12 = thx_bigint_Bigs::parseBase("1153522698998527286707879497611725813209153232656", 10);
			$tmp14 = $this12->toString();
			utest_Assert::isTrue($tmp11, _hx_string_or_null($tmp13) . _hx_string_or_null($tmp14), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 438, "className" => "thx.TestBigInt", "methodName" => "testPowerHandlesSignsCorrectly")));
			$this13 = thx_bigint_Bigs::parseBase("-154654987", 10);
			$exp7 = thx_bigint_Bigs::fromInt(3);
			$tmp15 = $this13->pow($exp7);
			$tmp16 = thx__BigInt_BigInt_Impl_::equals($tmp15, thx_bigint_Bigs::parseBase("-3699063497752861435082803", 10));
			$this14 = thx_bigint_Bigs::parseBase("-154654987", 10);
			$exp8 = thx_bigint_Bigs::fromInt(3);
			$this15 = $this14->pow($exp8);
			$tmp17 = $this15->toString();
			$tmp18 = "expected " . _hx_string_or_null($tmp17) . " == ";
			$this16 = thx_bigint_Bigs::parseBase("-3699063497752861435082803", 10);
			$tmp19 = $this16->toString();
			utest_Assert::isTrue($tmp16, _hx_string_or_null($tmp18) . _hx_string_or_null($tmp19), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 439, "className" => "thx.TestBigInt", "methodName" => "testPowerHandlesSignsCorrectly")));
			$this17 = thx_bigint_Bigs::fromInt(1);
			$exp9 = thx_bigint_Bigs::fromInt(1);
			$tmp20 = $this17->pow($exp9);
			$tmp21 = thx__BigInt_BigInt_Impl_::equals($tmp20, thx_bigint_Bigs::fromInt(1));
			utest_Assert::isTrue($tmp21, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 441, "className" => "thx.TestBigInt", "methodName" => "testPowerHandlesSignsCorrectly")));
			$this18 = thx_bigint_Bigs::fromInt(-1);
			$exp10 = thx_bigint_Bigs::fromInt(1);
			$tmp22 = $this18->pow($exp10);
			$tmp23 = thx__BigInt_BigInt_Impl_::equals($tmp22, thx_bigint_Bigs::fromInt(-1));
			utest_Assert::isTrue($tmp23, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 442, "className" => "thx.TestBigInt", "methodName" => "testPowerHandlesSignsCorrectly")));
			$this19 = thx_bigint_Bigs::fromInt(-1);
			$exp11 = thx_bigint_Bigs::fromInt(2);
			$tmp24 = $this19->pow($exp11);
			$tmp25 = thx__BigInt_BigInt_Impl_::equals($tmp24, thx_bigint_Bigs::fromInt(1));
			utest_Assert::isTrue($tmp25, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 443, "className" => "thx.TestBigInt", "methodName" => "testPowerHandlesSignsCorrectly")));
			$this20 = thx_bigint_Bigs::fromInt(1);
			$exp12 = thx_bigint_Bigs::parseBase("1e100", 10);
			$tmp26 = $this20->pow($exp12);
			$tmp27 = thx__BigInt_BigInt_Impl_::equals($tmp26, thx_bigint_Bigs::fromInt(1));
			utest_Assert::isTrue($tmp27, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 445, "className" => "thx.TestBigInt", "methodName" => "testPowerHandlesSignsCorrectly")));
			$this21 = thx_bigint_Bigs::fromInt(-1);
			$exp13 = thx_bigint_Bigs::parseBase("1e100", 10);
			$tmp28 = $this21->pow($exp13);
			$tmp29 = thx__BigInt_BigInt_Impl_::equals($tmp28, thx_bigint_Bigs::fromInt(1));
			utest_Assert::isTrue($tmp29, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 446, "className" => "thx.TestBigInt", "methodName" => "testPowerHandlesSignsCorrectly")));
			$this22 = thx_bigint_Bigs::fromInt(0);
			$exp14 = thx_bigint_Bigs::parseBase("1e100", 10);
			$tmp30 = $this22->pow($exp14);
			$tmp31 = thx__BigInt_BigInt_Impl_::equals($tmp30, thx_bigint_Bigs::fromInt(0));
			utest_Assert::isTrue($tmp31, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 447, "className" => "thx.TestBigInt", "methodName" => "testPowerHandlesSignsCorrectly")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp31,$tmp30,$tmp3,$tmp29,$tmp28,$tmp27,$tmp26,$tmp25,$tmp24,$tmp23,$tmp22,$tmp21,$tmp20,$tmp2,$tmp19,$tmp18,$tmp17,$tmp16,$tmp15,$tmp14,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp,$this9,$this8,$this7,$this6,$this5,$this4,$this3,$this22,$this21,$this20,$this2,$this19,$this18,$this17,$this16,$this15,$this14,$this13,$this12,$this11,$this10,$this1,$exp9,$exp8,$exp7,$exp6,$exp5,$exp4,$exp3,$exp2,$exp14,$exp13,$exp12,$exp11,$exp10,$exp1,$exp);
		}
	}
	public function testPower() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			thx_bigint_Bigs::parseBase("102340001040000", 10);
			$tmp = thx_bigint_Bigs::parseBase("10000000000", 10);
			$this1 = thx_bigint_Bigs::fromInt(10);
			$exp = thx_bigint_Bigs::fromInt(10);
			$tmp1 = $this1->pow($exp);
			$tmp2 = thx__BigInt_BigInt_Impl_::equals($tmp, $tmp1);
			utest_Assert::isTrue($tmp2, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 453, "className" => "thx.TestBigInt", "methodName" => "testPower")));
			unset($tmp2,$tmp1,$tmp,$this1,$exp);
		}
	}
	public function testPowerOf0to0is1() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = thx_bigint_Bigs::fromInt(0);
			$exp = thx_bigint_Bigs::fromInt(0);
			$tmp = $this1->pow($exp);
			$tmp1 = thx__BigInt_BigInt_Impl_::equals($tmp, thx_bigint_Bigs::fromInt(1));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 458, "className" => "thx.TestBigInt", "methodName" => "testPowerOf0to0is1")));
			$this2 = thx_bigint_Bigs::fromInt(0);
			$exp1 = thx_bigint_Bigs::parseBase("-0", 10);
			$tmp2 = $this2->pow($exp1);
			$tmp3 = thx__BigInt_BigInt_Impl_::equals($tmp2, thx_bigint_Bigs::fromInt(1));
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 459, "className" => "thx.TestBigInt", "methodName" => "testPowerOf0to0is1")));
			$this3 = thx_bigint_Bigs::parseBase("-0", 10);
			$exp2 = thx_bigint_Bigs::fromInt(0);
			$tmp4 = $this3->pow($exp2);
			$tmp5 = thx__BigInt_BigInt_Impl_::equals($tmp4, thx_bigint_Bigs::fromInt(1));
			utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 460, "className" => "thx.TestBigInt", "methodName" => "testPowerOf0to0is1")));
			$this4 = thx_bigint_Bigs::parseBase("-0", 10);
			$exp3 = thx_bigint_Bigs::parseBase("-0", 10);
			$tmp6 = $this4->pow($exp3);
			$tmp7 = thx__BigInt_BigInt_Impl_::equals($tmp6, thx_bigint_Bigs::fromInt(1));
			utest_Assert::isTrue($tmp7, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 461, "className" => "thx.TestBigInt", "methodName" => "testPowerOf0to0is1")));
			unset($tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$this4,$this3,$this2,$this1,$exp3,$exp2,$exp1,$exp);
		}
	}
	public function testPowerCarriesOverCorrectly() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = thx_bigint_Bigs::parseBase("16", 10);
			$exp = thx_bigint_Bigs::parseBase("13", 10);
			$tmp = $this1->pow($exp);
			$tmp1 = thx__BigInt_BigInt_Impl_::equals($tmp, thx_bigint_Bigs::parseBase("4503599627370496", 10));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 466, "className" => "thx.TestBigInt", "methodName" => "testPowerCarriesOverCorrectly")));
			$this2 = thx_bigint_Bigs::parseBase("123456789123456789", 10);
			$exp1 = thx_bigint_Bigs::fromInt(10);
			$tmp2 = $this2->pow($exp1);
			$tmp3 = thx__BigInt_BigInt_Impl_::equals($tmp2, thx_bigint_Bigs::parseBase("822526267372365207989468699031914332476569003445489153619518989325083908083922133639704420166045905346960117046949453426283086050487204639652635846010822673782217799736601", 10));
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 467, "className" => "thx.TestBigInt", "methodName" => "testPowerCarriesOverCorrectly")));
			$this3 = thx_bigint_Bigs::parseBase("2", 10);
			$exp2 = thx_bigint_Bigs::fromInt(63);
			$tmp4 = $this3->pow($exp2);
			$tmp5 = thx__BigInt_BigInt_Impl_::equals($tmp4, thx_bigint_Bigs::parseBase("9223372036854775808", 10));
			$this4 = thx_bigint_Bigs::parseBase("9223372036854775808", 10);
			$tmp6 = $this4->toString();
			$tmp7 = "expected 2.pow(63) == " . _hx_string_or_null($tmp6) . " but got ";
			$this5 = thx_bigint_Bigs::parseBase("2", 10);
			$exp3 = thx_bigint_Bigs::fromInt(63);
			$this6 = $this5->pow($exp3);
			$tmp8 = $this6->toString();
			utest_Assert::isTrue($tmp5, _hx_string_or_null($tmp7) . _hx_string_or_null($tmp8), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 468, "className" => "thx.TestBigInt", "methodName" => "testPowerCarriesOverCorrectly")));
			$this7 = thx_bigint_Bigs::fromInt(100);
			$exp4 = thx_bigint_Bigs::fromInt(56);
			$tmp9 = $this7->pow($exp4);
			$tmp10 = thx__BigInt_BigInt_Impl_::notEquals($tmp9, thx_bigint_Bigs::fromInt(0));
			utest_Assert::isTrue($tmp10, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 469, "className" => "thx.TestBigInt", "methodName" => "testPowerCarriesOverCorrectly")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp10,$tmp1,$tmp,$this7,$this6,$this5,$this4,$this3,$this2,$this1,$exp4,$exp3,$exp2,$exp1,$exp);
		}
	}
	public function testDivision() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			utest_Assert::raises(array(new _hx_lambda(array(), "thx_TestBigInt_7"), 'execute'), _hx_qtype("thx.Error"), null, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 474, "className" => "thx.TestBigInt", "methodName" => "testDivision")));
			utest_Assert::raises(array(new _hx_lambda(array(), "thx_TestBigInt_8"), 'execute'), _hx_qtype("thx.Error"), null, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 477, "className" => "thx.TestBigInt", "methodName" => "testDivision")));
			$tmp = thx_bigint_Bigs::fromInt(10);
			$tmp1 = thx_bigint_Bigs::fromInt(2);
			$tmp2 = _hx_anonymous(array("num" => $tmp, "div" => $tmp1, "res" => thx_bigint_Bigs::fromInt(5)));
			$tmp3 = thx_bigint_Bigs::parseBase("102340001040000", 10);
			$tmp4 = thx_bigint_Bigs::parseBase("10000000000", 10);
			$tmp5 = _hx_anonymous(array("num" => $tmp3, "div" => $tmp4, "res" => thx_bigint_Bigs::fromInt(10234)));
			$tmp6 = thx_bigint_Bigs::parseBase("1000000000000000000", 10);
			$tmp7 = thx_bigint_Bigs::fromInt(50);
			$tests = (new _hx_array(array($tmp2, $tmp5, _hx_anonymous(array("num" => $tmp6, "div" => $tmp7, "res" => thx_bigint_Bigs::parseBase("20000000000000000", 10))))));
			{
				$_g2 = 0;
				while($_g2 < $tests->length) {
					$test = $tests[$_g2];
					++$_g2;
					$tmp8 = thx__BigInt_BigInt_Impl_::equals($test->num->divide($test->div), $test->res);
					$tmp9 = $test->num->toString();
					$tmp10 = "expected " . _hx_string_or_null($tmp9) . " / ";
					$tmp11 = $test->div->toString();
					$tmp12 = _hx_string_or_null($tmp10) . _hx_string_or_null($tmp11) . " == ";
					$tmp13 = $test->res->toString();
					$tmp14 = _hx_string_or_null($tmp12) . _hx_string_or_null($tmp13) . " and it was ";
					$this3 = $test->num->divide($test->div);
					$tmp15 = $this3->toString();
					utest_Assert::isTrue($tmp8, _hx_string_or_null($tmp14) . _hx_string_or_null($tmp15), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 487, "className" => "thx.TestBigInt", "methodName" => "testDivision")));
					unset($tmp9,$tmp8,$tmp15,$tmp14,$tmp13,$tmp12,$tmp11,$tmp10,$this3,$test);
				}
				unset($_g2);
			}
			unset($tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$tests);
		}
	}
	public function testAddition() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$m = null;
			$n = null;
			$o = null;
			$s = null;
			$m = thx_bigint_Bigs::fromInt(123);
			$n = thx_bigint_Bigs::fromInt(0);
			$tmp = thx__BigInt_BigInt_Impl_::equals($m->add($n), $m);
			utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 500, "className" => "thx.TestBigInt", "methodName" => "testAddition")));
			$tmp1 = thx__BigInt_BigInt_Impl_::equals($n->add($m), $m);
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 501, "className" => "thx.TestBigInt", "methodName" => "testAddition")));
			$tmp2 = thx__BigInt_BigInt_Impl_::equals($m->subtract($n), $m);
			utest_Assert::isTrue($tmp2, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 503, "className" => "thx.TestBigInt", "methodName" => "testAddition")));
			$tmp3 = $n->subtract($m);
			$tmp4 = thx__BigInt_BigInt_Impl_::equals($tmp3, $m->negate());
			utest_Assert::isTrue($tmp4, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 504, "className" => "thx.TestBigInt", "methodName" => "testAddition")));
			$m = thx_bigint_Bigs::fromInt(123);
			$n = thx_bigint_Bigs::fromInt(343);
			$s = thx_bigint_Bigs::fromInt(466);
			$tmp5 = thx__BigInt_BigInt_Impl_::equals($m->add($n), $s);
			utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 508, "className" => "thx.TestBigInt", "methodName" => "testAddition")));
			$tmp6 = thx__BigInt_BigInt_Impl_::equals($n->add($m), $s);
			utest_Assert::isTrue($tmp6, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 509, "className" => "thx.TestBigInt", "methodName" => "testAddition")));
			$tmp7 = thx__BigInt_BigInt_Impl_::equals($s->subtract($n), $m);
			utest_Assert::isTrue($tmp7, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 511, "className" => "thx.TestBigInt", "methodName" => "testAddition")));
			$tmp8 = $n->subtract($s);
			$tmp9 = thx__BigInt_BigInt_Impl_::equals($tmp8, $m->negate());
			utest_Assert::isTrue($tmp9, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 512, "className" => "thx.TestBigInt", "methodName" => "testAddition")));
			$m = thx_bigint_Bigs::fromInt(-234356);
			$n = thx_bigint_Bigs::fromInt(355321);
			$o = thx_bigint_Bigs::fromInt(234);
			$this1 = $m->add($n);
			$tmp10 = $this1->add($o);
			$that = $n->add($o);
			$tmp11 = $m->add($that);
			$tmp12 = thx__BigInt_BigInt_Impl_::equals($tmp10, $tmp11);
			utest_Assert::isTrue($tmp12, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 516, "className" => "thx.TestBigInt", "methodName" => "testAddition")));
			$this2 = $m->subtract($n);
			$tmp13 = $this2->add($o);
			$that1 = $n->subtract($o);
			$tmp14 = $m->subtract($that1);
			$tmp15 = thx__BigInt_BigInt_Impl_::equals($tmp13, $tmp14);
			utest_Assert::isTrue($tmp15, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 518, "className" => "thx.TestBigInt", "methodName" => "testAddition")));
			$m = thx_bigint_Bigs::fromInt(1);
			$n = thx_bigint_Bigs::fromInt(-9999);
			$s = thx_bigint_Bigs::fromInt(-9998);
			$tmp16 = thx__BigInt_BigInt_Impl_::equals($m->add($n), $s);
			utest_Assert::isTrue($tmp16, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 521, "className" => "thx.TestBigInt", "methodName" => "testAddition")));
			$tmp17 = thx__BigInt_BigInt_Impl_::equals($s->subtract($n), $m);
			utest_Assert::isTrue($tmp17, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 523, "className" => "thx.TestBigInt", "methodName" => "testAddition")));
			$m = thx_bigint_Bigs::parseBase("11111111111111111111110111111111111111111111111111", 10);
			$n = $m;
			$s = thx_bigint_Bigs::parseBase("22222222222222222222220222222222222222222222222222", 10);
			$tmp18 = thx__BigInt_BigInt_Impl_::equals($m->add($n), $s);
			$tmp19 = $m->toString();
			$tmp20 = "expected " . _hx_string_or_null($tmp19) . " + ";
			$tmp21 = $n->toString();
			$tmp22 = _hx_string_or_null($tmp20) . _hx_string_or_null($tmp21) . " == ";
			$tmp23 = $s->toString();
			$tmp24 = _hx_string_or_null($tmp22) . _hx_string_or_null($tmp23) . " but is ";
			$this3 = $m->add($n);
			$tmp25 = $this3->toString();
			utest_Assert::isTrue($tmp18, _hx_string_or_null($tmp24) . _hx_string_or_null($tmp25), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 528, "className" => "thx.TestBigInt", "methodName" => "testAddition")));
			$this4 = $m->subtract($n);
			$tmp26 = $this4->isZero();
			$tmp27 = $m->toString();
			$tmp28 = "expected " . _hx_string_or_null($tmp27) . "-";
			$tmp29 = $n->toString();
			$tmp30 = _hx_string_or_null($tmp28) . _hx_string_or_null($tmp29) . "==0 but is ";
			$this5 = $m->subtract($n);
			$tmp31 = $this5->toString();
			utest_Assert::isTrue($tmp26, _hx_string_or_null($tmp30) . _hx_string_or_null($tmp31), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 530, "className" => "thx.TestBigInt", "methodName" => "testAddition")));
			$tmp32 = $m->subtract($n);
			$tmp33 = thx__BigInt_BigInt_Impl_::equals($tmp32, thx_bigint_Bigs::fromInt(0));
			$tmp34 = $m->toString();
			$tmp35 = "expected " . _hx_string_or_null($tmp34) . " - ";
			$tmp36 = $n->toString();
			$tmp37 = _hx_string_or_null($tmp35) . _hx_string_or_null($tmp36) . "==0 but is ";
			$this6 = $m->subtract($n);
			$tmp38 = $this6->toString();
			utest_Assert::isTrue($tmp33, _hx_string_or_null($tmp37) . _hx_string_or_null($tmp38), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 531, "className" => "thx.TestBigInt", "methodName" => "testAddition")));
			$tmp39 = thx__BigInt_BigInt_Impl_::equals($s->subtract($n), $m);
			$tmp40 = $s->toString();
			$tmp41 = "expected " . _hx_string_or_null($tmp40) . " - ";
			$tmp42 = $n->toString();
			$tmp43 = _hx_string_or_null($tmp41) . _hx_string_or_null($tmp42) . " == ";
			$tmp44 = $m->toString();
			$tmp45 = _hx_string_or_null($tmp43) . _hx_string_or_null($tmp44) . " but is ";
			$this7 = $s->subtract($n);
			$tmp46 = $this7->toString();
			utest_Assert::isTrue($tmp39, _hx_string_or_null($tmp45) . _hx_string_or_null($tmp46), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 532, "className" => "thx.TestBigInt", "methodName" => "testAddition")));
			$m = thx_bigint_Bigs::parseBase("99499494949383948405", 10);
			$n = thx_bigint_Bigs::parseBase("-472435789789045237084578078029457809342597808204538970", 10);
			$s = thx_bigint_Bigs::parseBase("-472435789789045237084578078029457709843102858820590565", 10);
			$tmp47 = thx__BigInt_BigInt_Impl_::equals($m->add($n), $s);
			$tmp48 = $m->toString();
			$tmp49 = "expected " . _hx_string_or_null($tmp48) . " + ";
			$tmp50 = $n->toString();
			$tmp51 = _hx_string_or_null($tmp49) . _hx_string_or_null($tmp50) . " == ";
			$tmp52 = $s->toString();
			$tmp53 = _hx_string_or_null($tmp51) . _hx_string_or_null($tmp52) . " but got ";
			$this8 = $m->add($n);
			$tmp54 = $this8->toString();
			utest_Assert::isTrue($tmp47, _hx_string_or_null($tmp53) . _hx_string_or_null($tmp54), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 538, "className" => "thx.TestBigInt", "methodName" => "testAddition")));
			$tmp55 = thx__BigInt_BigInt_Impl_::equals($s->subtract($n), $m);
			$tmp56 = $s->toString();
			$tmp57 = "expected " . _hx_string_or_null($tmp56) . " - ";
			$tmp58 = $n->toString();
			$tmp59 = _hx_string_or_null($tmp57) . _hx_string_or_null($tmp58) . " == ";
			$tmp60 = $m->toString();
			$tmp61 = _hx_string_or_null($tmp59) . _hx_string_or_null($tmp60) . " but got ";
			$this9 = $s->subtract($n);
			$tmp62 = $this9->toString();
			utest_Assert::isTrue($tmp55, _hx_string_or_null($tmp61) . _hx_string_or_null($tmp62), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 540, "className" => "thx.TestBigInt", "methodName" => "testAddition")));
			$m = thx_bigint_Bigs::parseBase("-1", 10);
			$n = thx_bigint_Bigs::parseBase("100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 10);
			$s = thx_bigint_Bigs::parseBase("99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", 10);
			$tmp63 = thx__BigInt_BigInt_Impl_::equals($m->add($n), $s);
			$tmp64 = $m->toString();
			$tmp65 = "expected " . _hx_string_or_null($tmp64) . " + ";
			$tmp66 = $n->toString();
			$tmp67 = _hx_string_or_null($tmp65) . _hx_string_or_null($tmp66) . " == ";
			$tmp68 = $s->toString();
			$tmp69 = _hx_string_or_null($tmp67) . _hx_string_or_null($tmp68) . " but got ";
			$this10 = $m->add($n);
			$tmp70 = $this10->toString();
			utest_Assert::isTrue($tmp63, _hx_string_or_null($tmp69) . _hx_string_or_null($tmp70), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 545, "className" => "thx.TestBigInt", "methodName" => "testAddition")));
			$tmp71 = thx__BigInt_BigInt_Impl_::equals($s->subtract($n), $m);
			$tmp72 = $s->toString();
			$tmp73 = "expected " . _hx_string_or_null($tmp72) . " - ";
			$tmp74 = $n->toString();
			$tmp75 = _hx_string_or_null($tmp73) . _hx_string_or_null($tmp74) . " == ";
			$tmp76 = $m->toString();
			$tmp77 = _hx_string_or_null($tmp75) . _hx_string_or_null($tmp76) . " but got ";
			$this11 = $s->subtract($n);
			$tmp78 = $this11->toString();
			utest_Assert::isTrue($tmp71, _hx_string_or_null($tmp77) . _hx_string_or_null($tmp78), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 546, "className" => "thx.TestBigInt", "methodName" => "testAddition")));
			$m = thx_bigint_Bigs::parseBase("1", 10);
			$tmp79 = thx__BigInt_BigInt_Impl_::equals($m->add($s), $n);
			$tmp80 = $m->toString();
			$tmp81 = "expected " . _hx_string_or_null($tmp80) . " + ";
			$tmp82 = $s->toString();
			$tmp83 = _hx_string_or_null($tmp81) . _hx_string_or_null($tmp82) . " == ";
			$tmp84 = $n->toString();
			$tmp85 = _hx_string_or_null($tmp83) . _hx_string_or_null($tmp84) . " but got ";
			$this12 = $m->add($s);
			$tmp86 = $this12->toString();
			utest_Assert::isTrue($tmp79, _hx_string_or_null($tmp85) . _hx_string_or_null($tmp86), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 549, "className" => "thx.TestBigInt", "methodName" => "testAddition")));
			$tmp87 = thx__BigInt_BigInt_Impl_::equals($n->subtract($s), $m);
			$tmp88 = $n->toString();
			$tmp89 = "expected " . _hx_string_or_null($tmp88) . " - ";
			$tmp90 = $s->toString();
			$tmp91 = _hx_string_or_null($tmp89) . _hx_string_or_null($tmp90) . " == ";
			$tmp92 = $m->toString();
			$tmp93 = _hx_string_or_null($tmp91) . _hx_string_or_null($tmp92) . " but got ";
			$this13 = $n->subtract($s);
			$tmp94 = $this13->toString();
			utest_Assert::isTrue($tmp87, _hx_string_or_null($tmp93) . _hx_string_or_null($tmp94), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 550, "className" => "thx.TestBigInt", "methodName" => "testAddition")));
			$tmp95 = thx__BigInt_BigInt_Impl_::equals($n->subtract($m), $s);
			$tmp96 = $n->toString();
			$tmp97 = "expected " . _hx_string_or_null($tmp96) . " - ";
			$tmp98 = $m->toString();
			$tmp99 = _hx_string_or_null($tmp97) . _hx_string_or_null($tmp98) . " == ";
			$tmp100 = $s->toString();
			$tmp101 = _hx_string_or_null($tmp99) . _hx_string_or_null($tmp100) . " but got ";
			$this14 = $n->subtract($m);
			$tmp102 = $this14->toString();
			utest_Assert::isTrue($tmp95, _hx_string_or_null($tmp101) . _hx_string_or_null($tmp102), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 551, "className" => "thx.TestBigInt", "methodName" => "testAddition")));
			unset($tmp99,$tmp98,$tmp97,$tmp96,$tmp95,$tmp94,$tmp93,$tmp92,$tmp91,$tmp90,$tmp9,$tmp89,$tmp88,$tmp87,$tmp86,$tmp85,$tmp84,$tmp83,$tmp82,$tmp81,$tmp80,$tmp8,$tmp79,$tmp78,$tmp77,$tmp76,$tmp75,$tmp74,$tmp73,$tmp72,$tmp71,$tmp70,$tmp7,$tmp69,$tmp68,$tmp67,$tmp66,$tmp65,$tmp64,$tmp63,$tmp62,$tmp61,$tmp60,$tmp6,$tmp59,$tmp58,$tmp57,$tmp56,$tmp55,$tmp54,$tmp53,$tmp52,$tmp51,$tmp50,$tmp5,$tmp49,$tmp48,$tmp47,$tmp46,$tmp45,$tmp44,$tmp43,$tmp42,$tmp41,$tmp40,$tmp4,$tmp39,$tmp38,$tmp37,$tmp36,$tmp35,$tmp34,$tmp33,$tmp32,$tmp31,$tmp30,$tmp3,$tmp29,$tmp28,$tmp27,$tmp26,$tmp25,$tmp24,$tmp23,$tmp22,$tmp21,$tmp20,$tmp2,$tmp19,$tmp18,$tmp17,$tmp16,$tmp15,$tmp14,$tmp13,$tmp12,$tmp11,$tmp102,$tmp101,$tmp100,$tmp10,$tmp1,$tmp,$this9,$this8,$this7,$this6,$this5,$this4,$this3,$this2,$this14,$this13,$this12,$this11,$this10,$this1,$that1,$that,$s,$o,$n,$m);
		}
	}
	public function testMultiplication() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$a = null;
			$b = null;
			$m = null;
			$a = thx_bigint_Bigs::fromInt(12347);
			$b = thx_bigint_Bigs::fromInt(0);
			$tmp = thx__BigInt_BigInt_Impl_::equals($a->multiply($b), $b);
			utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 561, "className" => "thx.TestBigInt", "methodName" => "testMultiplication")));
			$tmp1 = thx__BigInt_BigInt_Impl_::equals($b->multiply($a), $b);
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 562, "className" => "thx.TestBigInt", "methodName" => "testMultiplication")));
			$a = thx_bigint_Bigs::fromInt(-99999);
			$b = thx_bigint_Bigs::fromInt(1);
			$tmp2 = thx__BigInt_BigInt_Impl_::equals($a->multiply($b), $a);
			utest_Assert::isTrue($tmp2, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 565, "className" => "thx.TestBigInt", "methodName" => "testMultiplication")));
			$tmp3 = thx__BigInt_BigInt_Impl_::equals($b->multiply($a), $a);
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 566, "className" => "thx.TestBigInt", "methodName" => "testMultiplication")));
			$a = thx_bigint_Bigs::fromInt(1235);
			$b = thx_bigint_Bigs::fromInt(44);
			$m = thx_bigint_Bigs::fromInt(54340);
			$tmp4 = thx__BigInt_BigInt_Impl_::equals($a->multiply($b), $m);
			utest_Assert::isTrue($tmp4, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 569, "className" => "thx.TestBigInt", "methodName" => "testMultiplication")));
			$tmp5 = thx__BigInt_BigInt_Impl_::equals($b->multiply($a), $m);
			utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 570, "className" => "thx.TestBigInt", "methodName" => "testMultiplication")));
			$a = thx_bigint_Bigs::fromInt(-11);
			$b = thx_bigint_Bigs::fromInt(-9);
			$m = thx_bigint_Bigs::fromInt(99);
			$tmp6 = thx__BigInt_BigInt_Impl_::equals($a->multiply($b), $m);
			utest_Assert::isTrue($tmp6, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 573, "className" => "thx.TestBigInt", "methodName" => "testMultiplication")));
			$a = thx_bigint_Bigs::fromInt(55);
			$b = thx_bigint_Bigs::fromInt(200395);
			$m = thx_bigint_Bigs::fromInt(11021725);
			$tmp7 = thx__BigInt_BigInt_Impl_::equals($a->multiply($b), $m);
			utest_Assert::isTrue($tmp7, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 576, "className" => "thx.TestBigInt", "methodName" => "testMultiplication")));
			$a = thx_bigint_Bigs::parseBase("111111111111111111111111111111111111111", 10);
			$b = thx_bigint_Bigs::parseBase("-333333333333333333333", 10);
			$m = thx_bigint_Bigs::parseBase("-37037037037037037036999999999999999999962962962962962962963", 10);
			$tmp8 = thx__BigInt_BigInt_Impl_::equals($a->multiply($b), $m);
			$tmp9 = $a->toString();
			$tmp10 = "expected " . _hx_string_or_null($tmp9) . " * ";
			$tmp11 = $b->toString();
			$tmp12 = _hx_string_or_null($tmp10) . _hx_string_or_null($tmp11) . " == ";
			$tmp13 = $m->toString();
			$tmp14 = _hx_string_or_null($tmp12) . _hx_string_or_null($tmp13) . " but got ";
			$this1 = $a->multiply($b);
			$tmp15 = $this1->toString();
			utest_Assert::isTrue($tmp8, _hx_string_or_null($tmp14) . _hx_string_or_null($tmp15), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 582, "className" => "thx.TestBigInt", "methodName" => "testMultiplication")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp15,$tmp14,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp,$this1,$m,$b,$a);
		}
	}
	public function testComparison() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$a = thx_bigint_Bigs::fromInt(1);
			$b = thx_bigint_Bigs::fromInt(2);
			$tmp = thx__BigInt_BigInt_Impl_::less($a, $b);
			utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 589, "className" => "thx.TestBigInt", "methodName" => "testComparison")));
			$tmp1 = thx__BigInt_BigInt_Impl_::lessEquals($a, $b);
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 590, "className" => "thx.TestBigInt", "methodName" => "testComparison")));
			$tmp2 = thx__BigInt_BigInt_Impl_::lessEquals($a, $a);
			utest_Assert::isTrue($tmp2, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 591, "className" => "thx.TestBigInt", "methodName" => "testComparison")));
			$tmp3 = thx__BigInt_BigInt_Impl_::greater($b, $a);
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 593, "className" => "thx.TestBigInt", "methodName" => "testComparison")));
			$tmp4 = thx__BigInt_BigInt_Impl_::greaterEquals($b, $a);
			utest_Assert::isTrue($tmp4, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 594, "className" => "thx.TestBigInt", "methodName" => "testComparison")));
			$tmp5 = thx__BigInt_BigInt_Impl_::greaterEquals($b, $b);
			utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 595, "className" => "thx.TestBigInt", "methodName" => "testComparison")));
			$tmp6 = thx__BigInt_BigInt_Impl_::lessEquals($b, $b);
			utest_Assert::isTrue($tmp6, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 596, "className" => "thx.TestBigInt", "methodName" => "testComparison")));
			$tmp7 = $a->compareTo($b);
			utest_Assert::equals(-1, $tmp7, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 598, "className" => "thx.TestBigInt", "methodName" => "testComparison")));
			$tmp8 = $b->compareTo($a);
			utest_Assert::equals(1, $tmp8, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 599, "className" => "thx.TestBigInt", "methodName" => "testComparison")));
			$tmp9 = $b->compareTo($b);
			utest_Assert::equals(0, $tmp9, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 600, "className" => "thx.TestBigInt", "methodName" => "testComparison")));
			$a = thx_bigint_Bigs::parseBase("-333333333333333333333", 10);
			$b = thx_bigint_Bigs::parseBase("111111111111111111111111111111111111111", 10);
			$tmp10 = thx__BigInt_BigInt_Impl_::less($a, $b);
			$tmp11 = $a->toString();
			$tmp12 = "expected " . _hx_string_or_null($tmp11) . " < ";
			$tmp13 = $b->toString();
			$tmp14 = _hx_string_or_null($tmp12) . _hx_string_or_null($tmp13) . " == true but it is ";
			$tmp15 = thx__BigInt_BigInt_Impl_::less($a, $b);
			$tmp16 = Std::string($tmp15);
			utest_Assert::isTrue($tmp10, _hx_string_or_null($tmp14) . _hx_string_or_null($tmp16), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 605, "className" => "thx.TestBigInt", "methodName" => "testComparison")));
			$tmp17 = thx__BigInt_BigInt_Impl_::lessEquals($a, $b);
			$tmp18 = $a->toString();
			$tmp19 = "expected " . _hx_string_or_null($tmp18) . " <= ";
			$tmp20 = $b->toString();
			$tmp21 = _hx_string_or_null($tmp19) . _hx_string_or_null($tmp20) . " == true but it is ";
			$tmp22 = thx__BigInt_BigInt_Impl_::lessEquals($a, $b);
			$tmp23 = Std::string($tmp22);
			utest_Assert::isTrue($tmp17, _hx_string_or_null($tmp21) . _hx_string_or_null($tmp23), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 606, "className" => "thx.TestBigInt", "methodName" => "testComparison")));
			$tmp24 = thx__BigInt_BigInt_Impl_::lessEquals($a, $a);
			utest_Assert::isTrue($tmp24, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 607, "className" => "thx.TestBigInt", "methodName" => "testComparison")));
			$tmp25 = thx__BigInt_BigInt_Impl_::greater($b, $a);
			utest_Assert::isTrue($tmp25, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 609, "className" => "thx.TestBigInt", "methodName" => "testComparison")));
			$tmp26 = thx__BigInt_BigInt_Impl_::greaterEquals($b, $a);
			utest_Assert::isTrue($tmp26, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 610, "className" => "thx.TestBigInt", "methodName" => "testComparison")));
			$tmp27 = thx__BigInt_BigInt_Impl_::greaterEquals($b, $b);
			utest_Assert::isTrue($tmp27, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 611, "className" => "thx.TestBigInt", "methodName" => "testComparison")));
			$tmp28 = thx__BigInt_BigInt_Impl_::lessEquals($b, $b);
			utest_Assert::isTrue($tmp28, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 612, "className" => "thx.TestBigInt", "methodName" => "testComparison")));
			$tmp29 = $a->compareTo($b);
			$tmp30 = $a->toString();
			$tmp31 = "expected " . _hx_string_or_null($tmp30) . ".compareTo(";
			$tmp32 = $b->toString();
			$tmp33 = _hx_string_or_null($tmp31) . _hx_string_or_null($tmp32) . ") t0 be -1 but it is ";
			$tmp34 = $a->compareTo($b);
			utest_Assert::equals(-1, $tmp29, _hx_string_or_null($tmp33) . _hx_string_rec($tmp34, ""), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 614, "className" => "thx.TestBigInt", "methodName" => "testComparison")));
			$tmp35 = $b->compareTo($a);
			utest_Assert::equals(1, $tmp35, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 615, "className" => "thx.TestBigInt", "methodName" => "testComparison")));
			$tmp36 = $b->compareTo($b);
			utest_Assert::equals(0, $tmp36, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 616, "className" => "thx.TestBigInt", "methodName" => "testComparison")));
			$a = thx_bigint_Bigs::parseBase("-37037037037037037036999999999999999999962962962962962962963", 10);
			$b = thx_bigint_Bigs::parseBase("-333333333333333333333", 10);
			$tmp37 = thx__BigInt_BigInt_Impl_::less($a, $b);
			utest_Assert::isTrue($tmp37, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 621, "className" => "thx.TestBigInt", "methodName" => "testComparison")));
			$tmp38 = thx__BigInt_BigInt_Impl_::lessEquals($a, $b);
			utest_Assert::isTrue($tmp38, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 622, "className" => "thx.TestBigInt", "methodName" => "testComparison")));
			$tmp39 = thx__BigInt_BigInt_Impl_::lessEquals($a, $a);
			utest_Assert::isTrue($tmp39, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 623, "className" => "thx.TestBigInt", "methodName" => "testComparison")));
			$tmp40 = thx__BigInt_BigInt_Impl_::greater($b, $a);
			utest_Assert::isTrue($tmp40, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 625, "className" => "thx.TestBigInt", "methodName" => "testComparison")));
			$tmp41 = thx__BigInt_BigInt_Impl_::greaterEquals($b, $a);
			utest_Assert::isTrue($tmp41, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 626, "className" => "thx.TestBigInt", "methodName" => "testComparison")));
			$tmp42 = thx__BigInt_BigInt_Impl_::greaterEquals($b, $b);
			utest_Assert::isTrue($tmp42, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 627, "className" => "thx.TestBigInt", "methodName" => "testComparison")));
			$tmp43 = thx__BigInt_BigInt_Impl_::lessEquals($b, $b);
			utest_Assert::isTrue($tmp43, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 628, "className" => "thx.TestBigInt", "methodName" => "testComparison")));
			$tmp44 = $a->compareTo($b);
			utest_Assert::equals(-1, $tmp44, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 630, "className" => "thx.TestBigInt", "methodName" => "testComparison")));
			$tmp45 = $b->compareTo($a);
			utest_Assert::equals(1, $tmp45, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 631, "className" => "thx.TestBigInt", "methodName" => "testComparison")));
			$tmp46 = $a->compareTo($a);
			utest_Assert::equals(0, $tmp46, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 632, "className" => "thx.TestBigInt", "methodName" => "testComparison")));
			$tmp47 = $b->compareTo($b);
			utest_Assert::equals(0, $tmp47, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 633, "className" => "thx.TestBigInt", "methodName" => "testComparison")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp47,$tmp46,$tmp45,$tmp44,$tmp43,$tmp42,$tmp41,$tmp40,$tmp4,$tmp39,$tmp38,$tmp37,$tmp36,$tmp35,$tmp34,$tmp33,$tmp32,$tmp31,$tmp30,$tmp3,$tmp29,$tmp28,$tmp27,$tmp26,$tmp25,$tmp24,$tmp23,$tmp22,$tmp21,$tmp20,$tmp2,$tmp19,$tmp18,$tmp17,$tmp16,$tmp15,$tmp14,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp,$b,$a);
		}
	}
	public function testNegation() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$m = null;
			$n = thx_bigint_Bigs::fromInt(0);
			$tmp = thx__BigInt_BigInt_Impl_::equals($n->negate(), $n);
			$this1 = $n->negate();
			$tmp1 = $this1->toString();
			$tmp2 = "expected " . _hx_string_or_null($tmp1) . " == ";
			$tmp3 = $n->toString();
			utest_Assert::isTrue($tmp, _hx_string_or_null($tmp2) . _hx_string_or_null($tmp3), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 643, "className" => "thx.TestBigInt", "methodName" => "testNegation")));
			$n = thx_bigint_Bigs::fromInt(1);
			$tmp4 = $n->negate();
			$tmp5 = thx__BigInt_BigInt_Impl_::equals($tmp4, thx_bigint_Bigs::fromInt(-1));
			utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 646, "className" => "thx.TestBigInt", "methodName" => "testNegation")));
			$this2 = $n->negate();
			$tmp6 = $this2->negate();
			$tmp7 = thx__BigInt_BigInt_Impl_::equals($tmp6, $n);
			utest_Assert::isTrue($tmp7, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 647, "className" => "thx.TestBigInt", "methodName" => "testNegation")));
			$n = thx_bigint_Bigs::fromInt(-1234);
			$tmp8 = $n->negate();
			$tmp9 = thx__BigInt_BigInt_Impl_::equals($tmp8, thx_bigint_Bigs::fromInt(1234));
			utest_Assert::isTrue($tmp9, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 650, "className" => "thx.TestBigInt", "methodName" => "testNegation")));
			$this3 = $n->negate();
			$tmp10 = $this3->negate();
			$tmp11 = thx__BigInt_BigInt_Impl_::equals($tmp10, $n);
			utest_Assert::isTrue($tmp11, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 651, "className" => "thx.TestBigInt", "methodName" => "testNegation")));
			$m = thx_bigint_Bigs::parseBase("192395858359234934684359234", 10);
			$n = thx_bigint_Bigs::parseBase("-192395858359234934684359234", 10);
			$tmp12 = thx__BigInt_BigInt_Impl_::equals($m->negate(), $n);
			utest_Assert::isTrue($tmp12, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 655, "className" => "thx.TestBigInt", "methodName" => "testNegation")));
			$tmp13 = thx__BigInt_BigInt_Impl_::equals($m, $n->negate());
			utest_Assert::isTrue($tmp13, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 656, "className" => "thx.TestBigInt", "methodName" => "testNegation")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp,$this3,$this2,$this1,$n,$m);
		}
	}
	public function testBigIntParsesNumbersCorrectly() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_bigint_Bigs::parseBase("10", 2);
			$tmp1 = thx__BigInt_BigInt_Impl_::equals($tmp, thx_bigint_Bigs::fromInt(2));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 661, "className" => "thx.TestBigInt", "methodName" => "testBigIntParsesNumbersCorrectly")));
			$tmp2 = thx_bigint_Bigs::parseBase("FF", 16);
			$tmp3 = thx__BigInt_BigInt_Impl_::equals($tmp2, thx_bigint_Bigs::fromInt(255));
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 662, "className" => "thx.TestBigInt", "methodName" => "testBigIntParsesNumbersCorrectly")));
			$tmp4 = thx_bigint_Bigs::parseBase("111100001111", 2);
			$tmp5 = thx__BigInt_BigInt_Impl_::equals($tmp4, thx_bigint_Bigs::fromInt(3855));
			$this1 = thx_bigint_Bigs::parseBase("111100001111", 2);
			$tmp6 = $this1->toString();
			$tmp7 = "expected " . _hx_string_or_null($tmp6) . " == ";
			$this2 = thx_bigint_Bigs::fromInt(3855);
			$tmp8 = $this2->toString();
			utest_Assert::isTrue($tmp5, _hx_string_or_null($tmp7) . _hx_string_or_null($tmp8), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 663, "className" => "thx.TestBigInt", "methodName" => "testBigIntParsesNumbersCorrectly")));
			$tmp9 = thx_bigint_Bigs::parseBase("-1", 16);
			$tmp10 = thx__BigInt_BigInt_Impl_::equals($tmp9, thx_bigint_Bigs::fromInt(-1));
			utest_Assert::isTrue($tmp10, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 665, "className" => "thx.TestBigInt", "methodName" => "testBigIntParsesNumbersCorrectly")));
			$tmp11 = thx_bigint_Bigs::parseBase("306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000", 10);
			$tmp12 = thx__BigInt_BigInt_Impl_::equals($tmp11, thx_bigint_Bigs::parseBase("9822997e35bb99bcf103a64299aa92b8446ab93879fba53349f1626f3c8f78a4ee1d8d9e7562538f8e374fdf64c8eff7481c63cde5ca9821abfb3df6fb3e2489d2f85d34cf347f3e89191a19cc6b6b8072a976a8f1bcf68d20f18a1c0efb023252ba2d0961428a5c282d2645f3f7fa160f7f84aca88e40a74066c4a787bed7d0082f7e45b1ffee532715f56bd5f8168eaf7eaae112ed1316371f047692631e70e6b85b290ef063845b364dad7e10b9deb9fcfb708f83b7c3c6b82ce16eb0034c030b332a58d637a7b547fd0527051d7de9e5004db2ea2bd75f5c5a280a1a9b93c3c83373b6dcf1b65c01197096e97d13076b6613bc2ebf47c91fbe1aefeea966134bfbbf5f850320f0f0c2d88888bd82d118a6aaf8df2b092cf5456eff7e209feb476bf3c01d6d2e7ca0b9f40d83b107b4def92f2927cf0a1bb6190c67a4da91478709262ed1f1ecb77fbaf1197ac238c246a63a697f51e8d539f850e790137e7fce5f764896fdfb4fc3787520608f0400e72aeea5737c36304c6887ec1a174564ecec63a57b1e0946dc311dd3aea7bfae197ff9c7fcbf17c97d9db303d231702ef502dde1b53896196dc2e5d30b2b6ec58fc3744f4de08109eb99aa9f22ffe2f12f3953f516f91d35a8852aff4a19e250410fbd8dbcdae99f92f88e2f94341fc1ecdff32733d194c0541f708a72c5b4c03e5515e1086d0903addca0e172968ff1dee87bbd4fee679e2ee5a52975807ae7212cc2a33e0821e2d9b44eaa7dc29536a94c6597eda41bdd1e5e618e7b388b53d38ef9542523bce888738db46c6706c3ee82cbc3655408071e9e422a44d309e3cfd31ec2135ee0cba32b0c6721c8bee4d076543b71c35a06087a007c14e51d1f0c4d0aa9aa0751dfd3776d2357a010e6b147aca40c7b669291e6defbf5ca77505c960f14b330e6c90dc2539431329ef78a1e9f26b2ead7d28a622e6b586bcee22bd0a495442c6a1235588988252cbd4d36975560fb8e7e5c8cf06f29aeb68659c5cb4cf8d011375b00000000000000000000000000000000000000000000000000000000000000000000000000", 16));
			utest_Assert::isTrue($tmp12, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 666, "className" => "thx.TestBigInt", "methodName" => "testBigIntParsesNumbersCorrectly")));
			$tmp13 = thx_bigint_Bigs::parseBase("9223372036854775808", 10);
			$tmp14 = thx__BigInt_BigInt_Impl_::equals($tmp13, thx_bigint_Bigs::parseBase("1000000000000000000000000000000000000000000000000000000000000000", 2));
			utest_Assert::isTrue($tmp14, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 667, "className" => "thx.TestBigInt", "methodName" => "testBigIntParsesNumbersCorrectly")));
			$tmp15 = thx_bigint_Bigs::parseBase("324AFCCC342342333CCD239998881232324AFCCC342342333CCD239998881232", 16);
			$tmp16 = thx__BigInt_BigInt_Impl_::equals($tmp15, thx_bigint_Bigs::parseBase("22748133857356174891035811692236022265357659892433333914058690475216129757746", 10));
			utest_Assert::isTrue($tmp16, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 668, "className" => "thx.TestBigInt", "methodName" => "testBigIntParsesNumbersCorrectly")));
			$tmp17 = thx_bigint_Bigs::parseBase("234345345345", 10);
			$tmp18 = thx__BigInt_BigInt_Impl_::equals($tmp17, thx_bigint_Bigs::parseBase("3690123141", 16));
			utest_Assert::isTrue($tmp18, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 669, "className" => "thx.TestBigInt", "methodName" => "testBigIntParsesNumbersCorrectly")));
			$tmp19 = thx_bigint_Bigs::parseBase("-10", 16);
			$tmp20 = thx__BigInt_BigInt_Impl_::equals($tmp19, thx_bigint_Bigs::parseBase("-16", 10));
			utest_Assert::isTrue($tmp20, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 670, "className" => "thx.TestBigInt", "methodName" => "testBigIntParsesNumbersCorrectly")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp20,$tmp2,$tmp19,$tmp18,$tmp17,$tmp16,$tmp15,$tmp14,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp,$this2,$this1);
		}
	}
	public function testBigIntOutputsNumbersCorrectly() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = thx_bigint_Bigs::parseBase("366900685503779409298642816707647664013657589336", 10);
			$tmp = $this1->toStringWithBase(16);
			utest_Assert::isTrue($tmp === "4044654fce69424a651af2825b37124c25094658", null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 675, "className" => "thx.TestBigInt", "methodName" => "testBigIntOutputsNumbersCorrectly")));
			$this2 = thx_bigint_Bigs::parseBase("111111111111111111111111111111111111111111111111111111", 2);
			$tmp1 = $this2->toStringWithBase(2);
			utest_Assert::isTrue($tmp1 === "111111111111111111111111111111111111111111111111111111", null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 676, "className" => "thx.TestBigInt", "methodName" => "testBigIntOutputsNumbersCorrectly")));
			$this3 = thx_bigint_Bigs::parseBase("secretmessage000", 36);
			$tmp2 = $this3->toStringWithBase(36);
			utest_Assert::isTrue($tmp2 === "secretmessage000", null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 677, "className" => "thx.TestBigInt", "methodName" => "testBigIntOutputsNumbersCorrectly")));
			$this4 = thx_bigint_Bigs::fromInt(-256);
			$tmp3 = $this4->toStringWithBase(16);
			utest_Assert::isTrue($tmp3 === "-100", null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 678, "className" => "thx.TestBigInt", "methodName" => "testBigIntOutputsNumbersCorrectly")));
			unset($tmp3,$tmp2,$tmp1,$tmp,$this4,$this3,$this2,$this1);
		}
	}
	public function testShiftingLeftAndRight() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = thx_bigint_Bigs::fromInt(-5);
			$tmp = $this1->shiftRight(2);
			$tmp1 = thx__BigInt_BigInt_Impl_::equals($tmp, thx_bigint_Bigs::fromInt(-2));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 683, "className" => "thx.TestBigInt", "methodName" => "testShiftingLeftAndRight")));
			$this2 = thx_bigint_Bigs::fromInt(5);
			$tmp2 = $this2->shiftRight(-2);
			$tmp3 = thx__BigInt_BigInt_Impl_::equals($tmp2, thx_bigint_Bigs::fromInt(20));
			$this3 = thx_bigint_Bigs::fromInt(5);
			$this4 = $this3->shiftRight(-2);
			$tmp4 = $this4->toString();
			utest_Assert::isTrue($tmp3, "expected " . _hx_string_or_null($tmp4) . " == 20", _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 684, "className" => "thx.TestBigInt", "methodName" => "testShiftingLeftAndRight")));
			$this5 = thx_bigint_Bigs::fromInt(5);
			$tmp5 = $this5->shiftLeft(-2);
			$tmp6 = thx__BigInt_BigInt_Impl_::equals($tmp5, thx_bigint_Bigs::fromInt(1));
			utest_Assert::isTrue($tmp6, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 685, "className" => "thx.TestBigInt", "methodName" => "testShiftingLeftAndRight")));
			$this6 = thx_bigint_Bigs::fromInt(1024);
			$tmp7 = $this6->shiftLeft(100);
			$tmp8 = thx__BigInt_BigInt_Impl_::equals($tmp7, thx_bigint_Bigs::parseBase("1298074214633706907132624082305024", 10));
			$this7 = thx_bigint_Bigs::fromInt(1024);
			$tmp9 = $this7->toString();
			$tmp10 = "expected " . _hx_string_or_null($tmp9) . ".shiftLeft(100) == ";
			$this8 = thx_bigint_Bigs::parseBase("1298074214633706907132624082305024", 10);
			$tmp11 = $this8->toString();
			$tmp12 = _hx_string_or_null($tmp10) . _hx_string_or_null($tmp11) . " but got ";
			$this9 = thx_bigint_Bigs::fromInt(1024);
			$this10 = $this9->shiftLeft(100);
			$tmp13 = $this10->toString();
			utest_Assert::isTrue($tmp8, _hx_string_or_null($tmp12) . _hx_string_or_null($tmp13), _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 686, "className" => "thx.TestBigInt", "methodName" => "testShiftingLeftAndRight")));
			$this11 = thx_bigint_Bigs::parseBase("2596148429267413814265248164610049", 10);
			$tmp14 = $this11->shiftRight(100);
			$tmp15 = thx__BigInt_BigInt_Impl_::equals($tmp14, thx_bigint_Bigs::fromInt(2048));
			utest_Assert::isTrue($tmp15, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 687, "className" => "thx.TestBigInt", "methodName" => "testShiftingLeftAndRight")));
			$this12 = thx_bigint_Bigs::parseBase("8589934592", 10);
			$tmp16 = $this12->shiftRight(-50);
			$tmp17 = thx__BigInt_BigInt_Impl_::equals($tmp16, thx_bigint_Bigs::parseBase("9671406556917033397649408", 10));
			utest_Assert::isTrue($tmp17, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 688, "className" => "thx.TestBigInt", "methodName" => "testShiftingLeftAndRight")));
			$this13 = thx_bigint_Bigs::parseBase("38685626227668133590597632", 10);
			$tmp18 = $this13->shiftLeft(-50);
			$tmp19 = thx__BigInt_BigInt_Impl_::equals($tmp18, thx_bigint_Bigs::parseBase("34359738368", 10));
			utest_Assert::isTrue($tmp19, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 689, "className" => "thx.TestBigInt", "methodName" => "testShiftingLeftAndRight")));
			$this14 = thx_bigint_Bigs::parseBase("-1", 10);
			$tmp20 = $this14->shiftRight(25);
			$tmp21 = thx__BigInt_BigInt_Impl_::equals($tmp20, thx_bigint_Bigs::fromInt(-1));
			utest_Assert::isTrue($tmp21, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 690, "className" => "thx.TestBigInt", "methodName" => "testShiftingLeftAndRight")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp21,$tmp20,$tmp2,$tmp19,$tmp18,$tmp17,$tmp16,$tmp15,$tmp14,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp,$this9,$this8,$this7,$this6,$this5,$this4,$this3,$this2,$this14,$this13,$this12,$this11,$this10,$this1);
		}
	}
	public function testBitwiseOperations() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = thx_bigint_Bigs::parseBase("435783453", 10);
			$that = thx_bigint_Bigs::parseBase("902345074", 10);
			$tmp = $this1->hand($that);
			$tmp1 = thx__BigInt_BigInt_Impl_::equals($tmp, thx_bigint_Bigs::parseBase("298352912", 10));
			$this2 = thx_bigint_Bigs::parseBase("435783453", 10);
			$that1 = thx_bigint_Bigs::parseBase("902345074", 10);
			$this3 = $this2->hand($that1);
			$tmp2 = $this3->toString();
			utest_Assert::isTrue($tmp1, "expected " . _hx_string_or_null($tmp2) . " to be 298352912", _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 695, "className" => "thx.TestBigInt", "methodName" => "testBitwiseOperations")));
			$this4 = thx_bigint_Bigs::parseBase("435783453", 10);
			$that2 = thx_bigint_Bigs::parseBase("902345074", 10);
			$tmp3 = $this4->hor($that2);
			$tmp4 = thx__BigInt_BigInt_Impl_::equals($tmp3, thx_bigint_Bigs::parseBase("1039775615", 10));
			utest_Assert::isTrue($tmp4, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 696, "className" => "thx.TestBigInt", "methodName" => "testBitwiseOperations")));
			$this5 = thx_bigint_Bigs::parseBase("435783453", 10);
			$that3 = thx_bigint_Bigs::parseBase("902345074", 10);
			$tmp5 = $this5->hxor($that3);
			$tmp6 = thx__BigInt_BigInt_Impl_::equals($tmp5, thx_bigint_Bigs::parseBase("741422703", 10));
			utest_Assert::isTrue($tmp6, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 697, "className" => "thx.TestBigInt", "methodName" => "testBitwiseOperations")));
			$this6 = thx_bigint_Bigs::parseBase("94981987261387596", 10);
			$tmp7 = $this6->not();
			$tmp8 = thx__BigInt_BigInt_Impl_::equals($tmp7, thx_bigint_Bigs::parseBase("-94981987261387597", 10));
			utest_Assert::isTrue($tmp8, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 698, "className" => "thx.TestBigInt", "methodName" => "testBitwiseOperations")));
			$this7 = thx_bigint_Bigs::parseBase("-6931047708307681506", 10);
			$that4 = thx_bigint_Bigs::parseBase("25214903917", 10);
			$tmp9 = $this7->hxor($that4);
			$tmp10 = thx__BigInt_BigInt_Impl_::equals($tmp9, thx_bigint_Bigs::parseBase("-6931047723896018573", 10));
			utest_Assert::isTrue($tmp10, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 699, "className" => "thx.TestBigInt", "methodName" => "testBitwiseOperations")));
			$this8 = thx_bigint_Bigs::parseBase("-6931047723896018573", 10);
			$that5 = thx_bigint_Bigs::parseBase("281474976710655", 10);
			$tmp11 = $this8->hand($that5);
			$tmp12 = thx__BigInt_BigInt_Impl_::equals($tmp11, thx_bigint_Bigs::parseBase("273577603885427", 10));
			utest_Assert::isTrue($tmp12, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 700, "className" => "thx.TestBigInt", "methodName" => "testBitwiseOperations")));
			$this9 = thx_bigint_Bigs::parseBase("-65", 10);
			$that6 = thx_bigint_Bigs::parseBase("-42", 10);
			$tmp13 = $this9->hxor($that6);
			$tmp14 = thx__BigInt_BigInt_Impl_::equals($tmp13, thx_bigint_Bigs::parseBase("105", 10));
			utest_Assert::isTrue($tmp14, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 701, "className" => "thx.TestBigInt", "methodName" => "testBitwiseOperations")));
			$this10 = thx_bigint_Bigs::parseBase("6", 10);
			$that7 = thx_bigint_Bigs::parseBase("-3", 10);
			$tmp15 = $this10->hand($that7);
			$tmp16 = thx__BigInt_BigInt_Impl_::equals($tmp15, thx_bigint_Bigs::parseBase("4", 10));
			utest_Assert::isTrue($tmp16, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 702, "className" => "thx.TestBigInt", "methodName" => "testBitwiseOperations")));
			$this11 = thx_bigint_Bigs::parseBase("0", 10);
			$tmp17 = $this11->not();
			$tmp18 = thx__BigInt_BigInt_Impl_::equals($tmp17, thx_bigint_Bigs::parseBase("-1", 10));
			utest_Assert::isTrue($tmp18, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 703, "className" => "thx.TestBigInt", "methodName" => "testBitwiseOperations")));
			$this12 = thx_bigint_Bigs::parseBase("13", 10);
			$that8 = thx_bigint_Bigs::fromInt(-8);
			$tmp19 = $this12->hor($that8);
			$tmp20 = thx__BigInt_BigInt_Impl_::equals($tmp19, thx_bigint_Bigs::parseBase("-3", 10));
			utest_Assert::isTrue($tmp20, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 704, "className" => "thx.TestBigInt", "methodName" => "testBitwiseOperations")));
			$this13 = thx_bigint_Bigs::parseBase("12", 10);
			$that9 = thx_bigint_Bigs::fromInt(-5);
			$tmp21 = $this13->hxor($that9);
			$tmp22 = thx__BigInt_BigInt_Impl_::equals($tmp21, thx_bigint_Bigs::parseBase("-9", 10));
			utest_Assert::isTrue($tmp22, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 705, "className" => "thx.TestBigInt", "methodName" => "testBitwiseOperations")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp22,$tmp21,$tmp20,$tmp2,$tmp19,$tmp18,$tmp17,$tmp16,$tmp15,$tmp14,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp,$this9,$this8,$this7,$this6,$this5,$this4,$this3,$this2,$this13,$this12,$this11,$this10,$this1,$that9,$that8,$that7,$that6,$that5,$that4,$that3,$that2,$that1,$that);
		}
	}
	public function testIsEvenAndIsOdd() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = thx_bigint_Bigs::fromInt(0);
			$tmp = $this1->isEven();
			utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 710, "className" => "thx.TestBigInt", "methodName" => "testIsEvenAndIsOdd")));
			$this2 = thx_bigint_Bigs::fromInt(0);
			$tmp1 = $this2->isOdd();
			utest_Assert::isFalse($tmp1, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 711, "className" => "thx.TestBigInt", "methodName" => "testIsEvenAndIsOdd")));
			$this3 = thx_bigint_Bigs::fromInt(654);
			$tmp2 = $this3->isEven();
			utest_Assert::isTrue($tmp2, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 713, "className" => "thx.TestBigInt", "methodName" => "testIsEvenAndIsOdd")));
			$this4 = thx_bigint_Bigs::fromInt(654);
			$tmp3 = $this4->isOdd();
			utest_Assert::isFalse($tmp3, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 714, "className" => "thx.TestBigInt", "methodName" => "testIsEvenAndIsOdd")));
			$this5 = thx_bigint_Bigs::fromInt(653);
			$tmp4 = $this5->isOdd();
			utest_Assert::isTrue($tmp4, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 716, "className" => "thx.TestBigInt", "methodName" => "testIsEvenAndIsOdd")));
			$this6 = thx_bigint_Bigs::fromInt(653);
			$tmp5 = $this6->isEven();
			utest_Assert::isFalse($tmp5, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 717, "className" => "thx.TestBigInt", "methodName" => "testIsEvenAndIsOdd")));
			$this7 = thx_bigint_Bigs::fromInt(-984);
			$tmp6 = $this7->isEven();
			utest_Assert::isTrue($tmp6, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 719, "className" => "thx.TestBigInt", "methodName" => "testIsEvenAndIsOdd")));
			$this8 = thx_bigint_Bigs::fromInt(-984);
			$tmp7 = $this8->isOdd();
			utest_Assert::isFalse($tmp7, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 720, "className" => "thx.TestBigInt", "methodName" => "testIsEvenAndIsOdd")));
			$this9 = thx_bigint_Bigs::fromInt(-987);
			$tmp8 = $this9->isOdd();
			utest_Assert::isTrue($tmp8, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 722, "className" => "thx.TestBigInt", "methodName" => "testIsEvenAndIsOdd")));
			$this10 = thx_bigint_Bigs::fromInt(-987);
			$tmp9 = $this10->isEven();
			utest_Assert::isFalse($tmp9, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 723, "className" => "thx.TestBigInt", "methodName" => "testIsEvenAndIsOdd")));
			$this11 = thx_bigint_Bigs::parseBase("9888651888888888", 10);
			$tmp10 = $this11->isEven();
			utest_Assert::isTrue($tmp10, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 725, "className" => "thx.TestBigInt", "methodName" => "testIsEvenAndIsOdd")));
			$this12 = thx_bigint_Bigs::parseBase("9888651888888888", 10);
			$tmp11 = $this12->isOdd();
			utest_Assert::isFalse($tmp11, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 726, "className" => "thx.TestBigInt", "methodName" => "testIsEvenAndIsOdd")));
			$this13 = thx_bigint_Bigs::parseBase("1026377777777777", 10);
			$tmp12 = $this13->isOdd();
			utest_Assert::isTrue($tmp12, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 728, "className" => "thx.TestBigInt", "methodName" => "testIsEvenAndIsOdd")));
			$this14 = thx_bigint_Bigs::parseBase("1026377777777777", 10);
			$tmp13 = $this14->isEven();
			utest_Assert::isFalse($tmp13, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 729, "className" => "thx.TestBigInt", "methodName" => "testIsEvenAndIsOdd")));
			$this15 = thx_bigint_Bigs::parseBase("-9888651888888888", 10);
			$tmp14 = $this15->isEven();
			utest_Assert::isTrue($tmp14, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 731, "className" => "thx.TestBigInt", "methodName" => "testIsEvenAndIsOdd")));
			$this16 = thx_bigint_Bigs::parseBase("-9888651888888888", 10);
			$tmp15 = $this16->isOdd();
			utest_Assert::isFalse($tmp15, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 732, "className" => "thx.TestBigInt", "methodName" => "testIsEvenAndIsOdd")));
			$this17 = thx_bigint_Bigs::parseBase("-1026377777777777", 10);
			$tmp16 = $this17->isOdd();
			utest_Assert::isTrue($tmp16, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 734, "className" => "thx.TestBigInt", "methodName" => "testIsEvenAndIsOdd")));
			$this18 = thx_bigint_Bigs::parseBase("-1026377777777777", 10);
			$tmp17 = $this18->isEven();
			utest_Assert::isFalse($tmp17, null, _hx_anonymous(array("fileName" => "TestBigInt.hx", "lineNumber" => 735, "className" => "thx.TestBigInt", "methodName" => "testIsEvenAndIsOdd")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp17,$tmp16,$tmp15,$tmp14,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp,$this9,$this8,$this7,$this6,$this5,$this4,$this3,$this2,$this18,$this17,$this16,$this15,$this14,$this13,$this12,$this11,$this10,$this1);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.TestBigInt'; }
}
function thx_TestBigInt_0(&$factorial, $n) {
	{
		$tmp = null;
		$tmp1 = !thx__BigInt_BigInt_Impl_::equals($n, thx_bigint_Bigs::fromInt(0));
		if($tmp1) {
			$tmp = thx__BigInt_BigInt_Impl_::equals($n, thx_bigint_Bigs::fromInt(1));
		} else {
			$tmp = true;
		}
		if($tmp) {
			return thx_bigint_Bigs::fromInt(1);
		}
		$this1 = call_user_func_array($factorial, array($n->prev()));
		return $this1->multiply($n);
	}
}
function thx_TestBigInt_1() {
	{
		$this1 = thx_bigint_Bigs::fromInt(0);
		$that = thx_bigint_Bigs::fromInt(0);
		$this1->modulo($that);
	}
}
function thx_TestBigInt_2() {
	{
		$this2 = thx_bigint_Bigs::fromInt(0);
		$that1 = thx_bigint_Bigs::fromInt(0);
		$this2->modulo($that1);
	}
}
function thx_TestBigInt_3() {
	{
		$this3 = thx_bigint_Bigs::fromInt(5);
		$that2 = thx_bigint_Bigs::fromInt(0);
		$this3->modulo($that2);
	}
}
function thx_TestBigInt_4() {
	{
		$this4 = thx_bigint_Bigs::fromInt(-5);
		$that3 = thx_bigint_Bigs::fromInt(0);
		$this4->modulo($that3);
	}
}
function thx_TestBigInt_5() {
	{
		$this5 = thx_bigint_Bigs::parseBase("9549841598749874951041", 10);
		$that4 = thx_bigint_Bigs::fromInt(0);
		$this5->modulo($that4);
	}
}
function thx_TestBigInt_6() {
	{
		$this6 = thx_bigint_Bigs::parseBase("-20964918940987496110974948", 10);
		$that5 = thx_bigint_Bigs::fromInt(0);
		$this6->modulo($that5);
	}
}
function thx_TestBigInt_7() {
	{
		$this1 = thx_bigint_Bigs::fromInt(1);
		$that = thx_bigint_Bigs::fromInt(0);
		$this1->divide($that);
	}
}
function thx_TestBigInt_8() {
	{
		$this2 = thx_bigint_Bigs::fromInt(0);
		$that1 = thx_bigint_Bigs::fromInt(0);
		$this2->divide($that1);
	}
}
