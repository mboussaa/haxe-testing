<?php

// Generated by Haxe 3.3.0
class thx_Dates {
	public function __construct(){}
	static function compare($a, $b) {
		$a1 = $a->getTime();
		$b1 = $b->getTime();
		if($a1 < $b1) {
			return -1;
		} else {
			if($a1 > $b1) {
				return 1;
			} else {
				return 0;
			}
		}
	}
	static function create($year, $month = null, $day = null, $hour = null, $minute = null, $second = null) {
		if($second === null) {
			$second = 0;
		}
		if($minute === null) {
			$minute = 0;
		}
		if($hour === null) {
			$hour = 0;
		}
		if($day === null) {
			$day = 1;
		}
		if($month === null) {
			$month = 0;
		}
		$tmp = Math::floor($second / 60);
		$minute += $tmp;
		$second = _hx_mod($second, 60);
		$tmp1 = $second < 0;
		if($tmp1) {
			$second += 60;
		}
		$tmp2 = Math::floor($minute / 60);
		$hour += $tmp2;
		$minute = _hx_mod($minute, 60);
		$tmp3 = $minute < 0;
		if($tmp3) {
			$minute += 60;
		}
		$tmp4 = Math::floor($hour / 24);
		$day += $tmp4;
		$hour = _hx_mod($hour, 24);
		$tmp5 = $hour < 0;
		if($tmp5) {
			$hour += 24;
		}
		if($day === 0) {
			--$month;
			$tmp6 = $month < 0;
			if($tmp6) {
				$month = 11;
				--$year;
			}
			$day = thx_Dates::daysInMonth($year, $month);
		}
		$tmp7 = Math::floor($month / 12);
		$year += $tmp7;
		$month = _hx_mod($month, 12);
		$tmp8 = $month < 0;
		if($tmp8) {
			$month += 12;
		}
		$days = thx_Dates::daysInMonth($year, $month);
		while($day > $days) {
			$tmp9 = $day > $days;
			if($tmp9) {
				$day -= $days;
				++$month;
			}
			$tmp10 = $month > 11;
			if($tmp10) {
				$month -= 12;
				++$year;
			}
			$days = thx_Dates::daysInMonth($year, $month);
			unset($tmp9,$tmp10);
		}
		return new Date($year, $month, $day, $hour, $minute, $second);
	}
	static function daysRange($start, $end) {
		$tmp = thx_Dates::compare($end, $start);
		if($tmp < 0) {
			return (new _hx_array(array()));
		}
		$days = (new _hx_array(array()));
		while(true) {
			$tmp1 = !(!thx_Dates::sameDay($start, $end));
			if($tmp1) {
				break;
			}
			$days->push($start);
			$start = thx_Dates::jump($start, thx_TimePeriod::$Day, 1);
			unset($tmp1);
		}
		$days->push($end);
		return $days;
	}
	static function equals($self, $other) {
		$tmp = $self->getTime();
		$tmp1 = $other->getTime();
		return $tmp === $tmp1;
	}
	static function nearEquals($self, $other, $units = null, $period = null) {
		if($units === null) {
			$units = 1;
		}
		$tmp = null === $period;
		if($tmp) {
			$period = thx_TimePeriod::$Second;
		}
		$tmp1 = $units < 0;
		if($tmp1) {
			$units = -$units;
		}
		$min = thx_Dates::jump($self, $period, -$units);
		$max = thx_Dates::jump($self, $period, $units);
		$tmp2 = thx_Dates::compare($min, $other);
		if($tmp2 <= 0) {
			$tmp3 = thx_Dates::compare($max, $other);
			return $tmp3 >= 0;
		} else {
			return false;
		}
	}
	static function greater($self, $other) {
		$tmp = thx_Dates::compare($self, $other);
		return $tmp > 0;
	}
	static function more($self, $other) {
		$tmp = thx_Dates::compare($self, $other);
		return $tmp > 0;
	}
	static function less($self, $other) {
		$tmp = thx_Dates::compare($self, $other);
		return $tmp < 0;
	}
	static function greaterEquals($self, $other) {
		$tmp = thx_Dates::compare($self, $other);
		return $tmp >= 0;
	}
	static function moreEqual($self, $other) {
		$tmp = thx_Dates::compare($self, $other);
		return $tmp >= 0;
	}
	static function lessEquals($self, $other) {
		$tmp = thx_Dates::compare($self, $other);
		return $tmp <= 0;
	}
	static function lessEqual($self, $other) {
		$tmp = thx_Dates::compare($self, $other);
		return $tmp <= 0;
	}
	static function isLeapYear($year) {
		if(_hx_mod($year, 4) !== 0) {
			return false;
		}
		if(_hx_mod($year, 100) === 0) {
			return _hx_mod($year, 400) === 0;
		}
		return true;
	}
	static function isInLeapYear($d) {
		$tmp = $d->getFullYear();
		return thx_Dates::isLeapYear($tmp);
	}
	static function daysInMonth($year, $month) {
		switch($month) {
		case 1:{
			if(thx_Dates::isLeapYear($year)) {
				return 29;
			} else {
				return 28;
			}
		}break;
		case 0:case 2:case 4:case 6:case 7:case 9:case 11:{
			return 31;
		}break;
		case 3:case 5:case 8:case 10:{
			return 30;
		}break;
		default:{
			throw new HException("Invalid month \"" . _hx_string_rec($month, "") . "\".  Month should be a number, Jan=0, Dec=11");
		}break;
		}
	}
	static function numDaysInMonth($month, $year) {
		return thx_Dates::daysInMonth($year, $month);
	}
	static function daysInThisMonth($d) {
		$tmp = $d->getFullYear();
		$tmp1 = $d->getMonth();
		return thx_Dates::daysInMonth($tmp, $tmp1);
	}
	static function numDaysInThisMonth($d) {
		return thx_Dates::daysInThisMonth($d);
	}
	static function sameYear($self, $other) {
		$tmp = $self->getFullYear();
		$tmp1 = $other->getFullYear();
		return $tmp === $tmp1;
	}
	static function sameMonth($self, $other) {
		$tmp = thx_Dates::sameYear($self, $other);
		if($tmp) {
			$tmp1 = $self->getMonth();
			$tmp2 = $other->getMonth();
			return $tmp1 === $tmp2;
		} else {
			return false;
		}
	}
	static function sameDay($self, $other) {
		$tmp = thx_Dates::sameMonth($self, $other);
		if($tmp) {
			$tmp1 = $self->getDate();
			$tmp2 = $other->getDate();
			return $tmp1 === $tmp2;
		} else {
			return false;
		}
	}
	static function sameHour($self, $other) {
		$tmp = thx_Dates::sameDay($self, $other);
		if($tmp) {
			$tmp1 = $self->getHours();
			$tmp2 = $other->getHours();
			return $tmp1 === $tmp2;
		} else {
			return false;
		}
	}
	static function sameMinute($self, $other) {
		$tmp = thx_Dates::sameHour($self, $other);
		if($tmp) {
			$tmp1 = $self->getMinutes();
			$tmp2 = $other->getMinutes();
			return $tmp1 === $tmp2;
		} else {
			return false;
		}
	}
	static function snapNext($date, $period) {
		$this1 = thx__Timestamp_Timestamp_Impl_::snapNext($date->getTime(), $period);
		return Date::fromTime($this1);
	}
	static function snapPrev($date, $period) {
		$this1 = thx__Timestamp_Timestamp_Impl_::snapPrev($date->getTime(), $period);
		return Date::fromTime($this1);
	}
	static function snapTo($date, $period) {
		$this1 = thx__Timestamp_Timestamp_Impl_::snapTo($date->getTime(), $period);
		return Date::fromTime($this1);
	}
	static function jump($date, $period, $amount) {
		$sec = $date->getSeconds();
		$min = $date->getMinutes();
		$hour = $date->getHours();
		$day = $date->getDate();
		$month = $date->getMonth();
		$year = $date->getFullYear();
		switch($period->index) {
		case 0:{
			$sec += $amount;
		}break;
		case 1:{
			$min += $amount;
		}break;
		case 2:{
			$hour += $amount;
		}break;
		case 3:{
			$day += $amount;
		}break;
		case 4:{
			$day += $amount * 7;
		}break;
		case 5:{
			$month += $amount;
		}break;
		case 6:{
			$year += $amount;
		}break;
		}
		return thx_Dates::create($year, $month, $day, $hour, $min, $sec);
	}
	static function max($self, $other) {
		$tmp = $self->getTime();
		$tmp1 = $other->getTime();
		if($tmp > $tmp1) {
			return $self;
		} else {
			return $other;
		}
	}
	static function min($self, $other) {
		$tmp = $self->getTime();
		$tmp1 = $other->getTime();
		if($tmp < $tmp1) {
			return $self;
		} else {
			return $other;
		}
	}
	static function snapToWeekDay($date, $day, $firstDayOfWk = null) {
		if($firstDayOfWk === null) {
			$firstDayOfWk = 0;
		}
		$d = $date->getDay();
		$s = $day;
		$tmp = $s < $firstDayOfWk;
		if($tmp) {
			$s += 7;
		}
		$tmp1 = $d < $firstDayOfWk;
		if($tmp1) {
			$d += 7;
		}
		return thx_Dates::jump($date, thx_TimePeriod::$Day, $s - $d);
	}
	static function snapNextWeekDay($date, $day) {
		$d = $date->getDay();
		$s = $day;
		$tmp = $s < $d;
		if($tmp) {
			$s += 7;
		}
		return thx_Dates::jump($date, thx_TimePeriod::$Day, $s - $d);
	}
	static function snapPrevWeekDay($date, $day) {
		$d = $date->getDay();
		$s = $day;
		$tmp = $s > $d;
		if($tmp) {
			$s -= 7;
		}
		return thx_Dates::jump($date, thx_TimePeriod::$Day, $s - $d);
	}
	static function prevYear($d) {
		return thx_Dates::jump($d, thx_TimePeriod::$Year, -1);
	}
	static function nextYear($d) {
		return thx_Dates::jump($d, thx_TimePeriod::$Year, 1);
	}
	static function prevMonth($d) {
		return thx_Dates::jump($d, thx_TimePeriod::$Month, -1);
	}
	static function nextMonth($d) {
		return thx_Dates::jump($d, thx_TimePeriod::$Month, 1);
	}
	static function prevWeek($d) {
		return thx_Dates::jump($d, thx_TimePeriod::$Week, -1);
	}
	static function nextWeek($d) {
		return thx_Dates::jump($d, thx_TimePeriod::$Week, 1);
	}
	static function prevDay($d) {
		return thx_Dates::jump($d, thx_TimePeriod::$Day, -1);
	}
	static function nextDay($d) {
		return thx_Dates::jump($d, thx_TimePeriod::$Day, 1);
	}
	static function prevHour($d) {
		return thx_Dates::jump($d, thx_TimePeriod::$Hour, -1);
	}
	static function nextHour($d) {
		return thx_Dates::jump($d, thx_TimePeriod::$Hour, 1);
	}
	static function prevMinute($d) {
		return thx_Dates::jump($d, thx_TimePeriod::$Minute, -1);
	}
	static function nextMinute($d) {
		return thx_Dates::jump($d, thx_TimePeriod::$Minute, 1);
	}
	static function prevSecond($d) {
		return thx_Dates::jump($d, thx_TimePeriod::$Second, -1);
	}
	static function nextSecond($d) {
		return thx_Dates::jump($d, thx_TimePeriod::$Second, 1);
	}
	static function withYear($date, $year) {
		$tmp = $date->getMonth();
		$tmp1 = $date->getDate();
		$tmp2 = $date->getHours();
		$tmp3 = $date->getMinutes();
		$tmp4 = $date->getSeconds();
		return thx_Dates::create($year, $tmp, $tmp1, $tmp2, $tmp3, $tmp4);
	}
	static function withMonth($date, $month) {
		$tmp = $date->getFullYear();
		$tmp1 = $date->getDate();
		$tmp2 = $date->getHours();
		$tmp3 = $date->getMinutes();
		$tmp4 = $date->getSeconds();
		return thx_Dates::create($tmp, $month, $tmp1, $tmp2, $tmp3, $tmp4);
	}
	static function withDay($date, $day) {
		$tmp = $date->getFullYear();
		$tmp1 = $date->getMonth();
		$tmp2 = $date->getHours();
		$tmp3 = $date->getMinutes();
		$tmp4 = $date->getSeconds();
		return thx_Dates::create($tmp, $tmp1, $day, $tmp2, $tmp3, $tmp4);
	}
	static function withHour($date, $hour) {
		$tmp = $date->getFullYear();
		$tmp1 = $date->getMonth();
		$tmp2 = $date->getDate();
		$tmp3 = $date->getMinutes();
		$tmp4 = $date->getSeconds();
		return thx_Dates::create($tmp, $tmp1, $tmp2, $hour, $tmp3, $tmp4);
	}
	static function withMinute($date, $minute) {
		$tmp = $date->getFullYear();
		$tmp1 = $date->getMonth();
		$tmp2 = $date->getDate();
		$tmp3 = $date->getHours();
		$tmp4 = $date->getSeconds();
		return thx_Dates::create($tmp, $tmp1, $tmp2, $tmp3, $minute, $tmp4);
	}
	static function withSecond($date, $second) {
		$tmp = $date->getFullYear();
		$tmp1 = $date->getMonth();
		$tmp2 = $date->getDate();
		$tmp3 = $date->getHours();
		$tmp4 = $date->getMinutes();
		return thx_Dates::create($tmp, $tmp1, $tmp2, $tmp3, $tmp4, $second);
	}
	static function parseDate($s) {
		try {
			$tmp = Date::fromString($s);
			return thx_Either::Right($tmp);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				return thx_Either::Left("" . _hx_string_or_null($s) . " could not be parsed to a valid Date value.");
			}
		}
	}
	static function order() { $args = func_get_args(); return call_user_func_array(self::$order, $args); }
	static $order;
	function __toString() { return 'thx.Dates'; }
}
thx_Dates::$order = thx__Ord_Ord_Impl_::fromIntComparison((isset(thx_Dates::$compare) ? thx_Dates::$compare: array("thx_Dates", "compare")));
