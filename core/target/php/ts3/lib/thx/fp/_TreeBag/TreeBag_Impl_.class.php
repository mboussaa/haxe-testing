<?php

// Generated by Haxe 3.3.0
class thx_fp__TreeBag_TreeBag_Impl_ {
	public function __construct(){}
	static function hempty() {
		return thx_fp_TreeBagImpl::$hEmpty;
	}
	static function singleton($a) {
		return thx_fp_TreeBagImpl::Cons($a, thx_fp_TreeBagImpl::$hEmpty);
	}
	static function cons($x, $xs) {
		return thx_fp_TreeBagImpl::Cons($x, $xs);
	}
	static function fromArray($xs) {
		return thx_Arrays::reduce($xs, array(new _hx_lambda(array(), "thx_fp__TreeBag_TreeBag_Impl__0"), 'execute'), thx_fp_TreeBagImpl::$hEmpty);
	}
	static function flatten($xs) {
		return thx_fp__TreeBag_TreeBag_Impl_::flatMap($xs, (isset(thx_Functions::$identity) ? thx_Functions::$identity: array("thx_Functions", "identity")));
	}
	static function prepend($this1, $x) {
		return thx_fp_TreeBagImpl::Cons($x, $this1);
	}
	static function append($this1, $other) {
		$tmp = $this1->index;
		switch($tmp) {
		case 0:{
			if($other->index === 0) {
				return thx_fp_TreeBagImpl::$hEmpty;
			} else {
				return $other;
			}
		}break;
		case 1:{
			$tmp1 = $other->index === 0;
			if($tmp1) {
				return $this1;
			} else {
				$tmp2 = _hx_deref($this1)->params[1]->index === 0;
				if($tmp2) {
					return thx_fp_TreeBagImpl::Cons(_hx_deref($this1)->params[0], $other);
				} else {
					return thx_fp_TreeBagImpl::Branch($this1, $other);
				}
			}
		}break;
		default:{
			$tmp3 = $other->index === 0;
			if($tmp3) {
				return $this1;
			} else {
				return thx_fp_TreeBagImpl::Branch($this1, $other);
			}
		}break;
		}
	}
	static function prependAll($this1, $xs) {
		return thx_Arrays::reduce($xs, array(new _hx_lambda(array(), "thx_fp__TreeBag_TreeBag_Impl__1"), 'execute'), $this1);
	}
	static function map($this1, $f) {
		$tmp = $this1->index;
		switch($tmp) {
		case 0:{
			return thx_fp_TreeBagImpl::$hEmpty;
		}break;
		case 1:{
			$xs = _hx_deref($this1)->params[1];
			$tmp1 = call_user_func_array($f, array(_hx_deref($this1)->params[0]));
			$tmp2 = thx_fp__TreeBag_TreeBag_Impl_::map($xs, $f);
			return thx_fp_TreeBagImpl::Cons($tmp1, $tmp2);
		}break;
		case 2:{
			$r = _hx_deref($this1)->params[1];
			$tmp3 = thx_fp__TreeBag_TreeBag_Impl_::map(_hx_deref($this1)->params[0], $f);
			$tmp4 = thx_fp__TreeBag_TreeBag_Impl_::map($r, $f);
			return thx_fp_TreeBagImpl::Branch($tmp3, $tmp4);
		}break;
		}
	}
	static function flatMap($this1, $f) {
		$tmp = $this1->index;
		switch($tmp) {
		case 0:{
			return thx_fp_TreeBagImpl::$hEmpty;
		}break;
		case 1:{
			$xs = _hx_deref($this1)->params[1];
			$this2 = call_user_func_array($f, array(_hx_deref($this1)->params[0]));
			$other = thx_fp__TreeBag_TreeBag_Impl_::flatMap($xs, $f);
			$tmp1 = $this2->index;
			switch($tmp1) {
			case 0:{
				if($other->index === 0) {
					return thx_fp_TreeBagImpl::$hEmpty;
				} else {
					return $other;
				}
			}break;
			case 1:{
				$tmp2 = $other->index === 0;
				if($tmp2) {
					return $this2;
				} else {
					$tmp3 = _hx_deref($this2)->params[1]->index === 0;
					if($tmp3) {
						return thx_fp_TreeBagImpl::Cons(_hx_deref($this2)->params[0], $other);
					} else {
						return thx_fp_TreeBagImpl::Branch($this2, $other);
					}
				}
			}break;
			default:{
				$tmp4 = $other->index === 0;
				if($tmp4) {
					return $this2;
				} else {
					return thx_fp_TreeBagImpl::Branch($this2, $other);
				}
			}break;
			}
		}break;
		case 2:{
			$r = _hx_deref($this1)->params[1];
			$this3 = thx_fp__TreeBag_TreeBag_Impl_::flatMap(_hx_deref($this1)->params[0], $f);
			$other1 = thx_fp__TreeBag_TreeBag_Impl_::flatMap($r, $f);
			$tmp5 = $this3->index;
			switch($tmp5) {
			case 0:{
				if($other1->index === 0) {
					return thx_fp_TreeBagImpl::$hEmpty;
				} else {
					return $other1;
				}
			}break;
			case 1:{
				$tmp6 = $other1->index === 0;
				if($tmp6) {
					return $this3;
				} else {
					$tmp7 = _hx_deref($this3)->params[1]->index === 0;
					if($tmp7) {
						return thx_fp_TreeBagImpl::Cons(_hx_deref($this3)->params[0], $other1);
					} else {
						return thx_fp_TreeBagImpl::Branch($this3, $other1);
					}
				}
			}break;
			default:{
				$tmp8 = $other1->index === 0;
				if($tmp8) {
					return $this3;
				} else {
					return thx_fp_TreeBagImpl::Branch($this3, $other1);
				}
			}break;
			}
		}break;
		}
	}
	static function foldLeft($this1, $b, $f) {
		$acc = $b;
		$nodes = thx_fp_ListImpl::Cons($this1, thx_fp_ListImpl::$Nil);
		while(true) {
			$tmp = $nodes->index;
			switch($tmp) {
			case 0:{
				return $acc;
			}break;
			case 1:{
				$ys = _hx_deref($nodes)->params[1];
				$y = _hx_deref($nodes)->params[0];
				$tmp1 = $y->index;
				switch($tmp1) {
				case 0:{
					$nodes = $ys;
				}break;
				case 1:{
					$acc = call_user_func_array($f, array($acc, _hx_deref($y)->params[0]));
					$nodes = thx_fp_ListImpl::Cons(_hx_deref($y)->params[1], $ys);
				}break;
				case 2:{
					$r = _hx_deref($y)->params[1];
					$l = _hx_deref($y)->params[0];
					$this2 = thx_fp_ListImpl::Cons($r, $ys);
					$nodes = thx_fp_ListImpl::Cons($l, $this2);
				}break;
				}
			}break;
			}
			unset($tmp);
		}
	}
	static function length($this1) {
		return thx_fp__TreeBag_TreeBag_Impl_::foldLeft($this1, 0, array(new _hx_lambda(array(), "thx_fp__TreeBag_TreeBag_Impl__2"), 'execute'));
	}
	static function toArray($this1) {
		return thx_fp__TreeBag_TreeBag_Impl_::foldLeft($this1, (new _hx_array(array())), array(new _hx_lambda(array(), "thx_fp__TreeBag_TreeBag_Impl__3"), 'execute'));
	}
	static function monoid() {
		return _hx_anonymous(array("zero" => thx_fp_TreeBagImpl::$hEmpty, "append" => array(new _hx_lambda(array(), "thx_fp__TreeBag_TreeBag_Impl__4"), 'execute')));
	}
	function __toString() { return 'thx.fp._TreeBag.TreeBag_Impl_'; }
}
function thx_fp__TreeBag_TreeBag_Impl__0($acc, $x) {
	{
		return thx_fp_TreeBagImpl::Cons($x, $acc);
	}
}
function thx_fp__TreeBag_TreeBag_Impl__1($acc, $x) {
	{
		return thx_fp_TreeBagImpl::Cons($x, $acc);
	}
}
function thx_fp__TreeBag_TreeBag_Impl__2($c, $a) {
	{
		return $c + 1;
	}
}
function thx_fp__TreeBag_TreeBag_Impl__3($b, $a) {
	{
		$b->push($a);
		return $b;
	}
}
function thx_fp__TreeBag_TreeBag_Impl__4($l, $r) {
	{
		$tmp = $l->index;
		switch($tmp) {
		case 0:{
			if($r->index === 0) {
				return thx_fp_TreeBagImpl::$hEmpty;
			} else {
				return $r;
			}
		}break;
		case 1:{
			$tmp1 = $r->index === 0;
			if($tmp1) {
				return $l;
			} else {
				$tmp2 = _hx_deref($l)->params[1]->index === 0;
				if($tmp2) {
					return thx_fp_TreeBagImpl::Cons(_hx_deref($l)->params[0], $r);
				} else {
					return thx_fp_TreeBagImpl::Branch($l, $r);
				}
			}
		}break;
		default:{
			$tmp3 = $r->index === 0;
			if($tmp3) {
				return $l;
			} else {
				return thx_fp_TreeBagImpl::Branch($l, $r);
			}
		}break;
		}
	}
}
