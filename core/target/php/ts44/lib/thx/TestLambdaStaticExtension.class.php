<?php

// Generated by Haxe 3.3.0
class thx_TestLambdaStaticExtension {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testFunctions() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = _hx_deref((new _hx_array(array(1, 2))))->map(array(new _hx_lambda(array(), "thx_TestLambdaStaticExtension_0"), 'execute'));
			utest_Assert::same((new _hx_array(array(2, 3))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestLambdaStaticExtension.hx", "lineNumber" => 15, "className" => "thx.TestLambdaStaticExtension", "methodName" => "testFunctions")));
			$tmp1 = _hx_deref((new _hx_array(array(1, 2, 3))))->filter(array(new _hx_lambda(array(), "thx_TestLambdaStaticExtension_1"), 'execute'));
			utest_Assert::same((new _hx_array(array(2, 3))), $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestLambdaStaticExtension.hx", "lineNumber" => 16, "className" => "thx.TestLambdaStaticExtension", "methodName" => "testFunctions")));
			$tmp2 = thx_Arrays::reduce((new _hx_array(array(1, 2, 3))), array(new _hx_lambda(array(), "thx_TestLambdaStaticExtension_2"), 'execute'), 10);
			utest_Assert::equals(16, $tmp2, null, _hx_anonymous(array("fileName" => "TestLambdaStaticExtension.hx", "lineNumber" => 17, "className" => "thx.TestLambdaStaticExtension", "methodName" => "testFunctions")));
			$tmp3 = _hx_deref((new _hx_array(array(1))))->map(array(new _hx_lambda(array(), "thx_TestLambdaStaticExtension_3"), 'execute'));
			utest_Assert::same((new _hx_array(array("Test 1"))), $tmp3, null, null, null, _hx_anonymous(array("fileName" => "TestLambdaStaticExtension.hx", "lineNumber" => 18, "className" => "thx.TestLambdaStaticExtension", "methodName" => "testFunctions")));
			unset($tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testInStringInterpolation() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = _hx_deref((new _hx_array(array(1, 2))))->map(array(new _hx_lambda(array(), "thx_TestLambdaStaticExtension_4"), 'execute'));
			utest_Assert::same((new _hx_array(array("1", "2"))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestLambdaStaticExtension.hx", "lineNumber" => 23, "className" => "thx.TestLambdaStaticExtension", "methodName" => "testInStringInterpolation")));
			$tmp1 = _hx_deref((new _hx_array(array(1, 2))))->map(array(new _hx_lambda(array(), "thx_TestLambdaStaticExtension_5"), 'execute'));
			utest_Assert::same((new _hx_array(array("1", "2"))), $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestLambdaStaticExtension.hx", "lineNumber" => 24, "className" => "thx.TestLambdaStaticExtension", "methodName" => "testInStringInterpolation")));
			$tmp2 = _hx_deref((new _hx_array(array(1, 2))))->map(array(new _hx_lambda(array(), "thx_TestLambdaStaticExtension_6"), 'execute'));
			utest_Assert::same((new _hx_array(array("X1", "X2"))), $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestLambdaStaticExtension.hx", "lineNumber" => 25, "className" => "thx.TestLambdaStaticExtension", "methodName" => "testInStringInterpolation")));
			$tmp3 = _hx_deref((new _hx_array(array(1, 2))))->map(array(new _hx_lambda(array(), "thx_TestLambdaStaticExtension_7"), 'execute'));
			utest_Assert::same((new _hx_array(array("1X", "2X"))), $tmp3, null, null, null, _hx_anonymous(array("fileName" => "TestLambdaStaticExtension.hx", "lineNumber" => 26, "className" => "thx.TestLambdaStaticExtension", "methodName" => "testInStringInterpolation")));
			$tmp4 = _hx_deref((new _hx_array(array(1, 2))))->map(array(new _hx_lambda(array(), "thx_TestLambdaStaticExtension_8"), 'execute'));
			utest_Assert::same((new _hx_array(array("X2X", "X4X"))), $tmp4, null, null, null, _hx_anonymous(array("fileName" => "TestLambdaStaticExtension.hx", "lineNumber" => 27, "className" => "thx.TestLambdaStaticExtension", "methodName" => "testInStringInterpolation")));
			unset($tmp4,$tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testFillEmpty() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_Arrays::mapi((new _hx_array(array(1, 2, 3))), array(new _hx_lambda(array(), "thx_TestLambdaStaticExtension_9"), 'execute'));
			utest_Assert::same((new _hx_array(array(0, 1, 2))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestLambdaStaticExtension.hx", "lineNumber" => 32, "className" => "thx.TestLambdaStaticExtension", "methodName" => "testFillEmpty")));
			unset($tmp);
		}
	}
	public function testOptionalArgs() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$f = array(new _hx_lambda(array(), "thx_TestLambdaStaticExtension_10"), 'execute');
			$tmp = call_user_func_array($f, array(array(new _hx_lambda(array(), "thx_TestLambdaStaticExtension_11"), 'execute')));
			utest_Assert::equals(6, $tmp, null, _hx_anonymous(array("fileName" => "TestLambdaStaticExtension.hx", "lineNumber" => 41, "className" => "thx.TestLambdaStaticExtension", "methodName" => "testOptionalArgs")));
			$tmp1 = call_user_func_array($f, array(array(new _hx_lambda(array(), "thx_TestLambdaStaticExtension_12"), 'execute')));
			utest_Assert::equals(6, $tmp1, null, _hx_anonymous(array("fileName" => "TestLambdaStaticExtension.hx", "lineNumber" => 42, "className" => "thx.TestLambdaStaticExtension", "methodName" => "testOptionalArgs")));
			unset($tmp1,$tmp,$f);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.TestLambdaStaticExtension'; }
}
function thx_TestLambdaStaticExtension_0($_) {
	{
		return $_ + 1;
	}
}
function thx_TestLambdaStaticExtension_1($_1) {
	{
		return $_1 > 1;
	}
}
function thx_TestLambdaStaticExtension_2($_0, $_11) {
	{
		return $_0 + $_11;
	}
}
function thx_TestLambdaStaticExtension_3($_2) {
	{
		return "Test " . _hx_string_rec($_2, "");
	}
}
function thx_TestLambdaStaticExtension_4($_) {
	{
		return "" . _hx_string_rec($_, "");
	}
}
function thx_TestLambdaStaticExtension_5($_1) {
	{
		return "" . _hx_string_rec($_1, "");
	}
}
function thx_TestLambdaStaticExtension_6($_2) {
	{
		return "X" . _hx_string_rec($_2, "");
	}
}
function thx_TestLambdaStaticExtension_7($_3) {
	{
		return "" . _hx_string_rec($_3, "") . "X";
	}
}
function thx_TestLambdaStaticExtension_8($_4) {
	{
		return "X" . _hx_string_rec($_4 * 2, "") . "X";
	}
}
function thx_TestLambdaStaticExtension_9($_0, $_1) {
	{
		return $_1;
	}
}
function thx_TestLambdaStaticExtension_10($callback) {
	{
		return call_user_func_array($callback, array(2, 3));
	}
}
function thx_TestLambdaStaticExtension_11($_0, $_1) {
	{
		return $_0 * 3;
	}
}
function thx_TestLambdaStaticExtension_12($_01, $_11) {
	{
		return $_01 * $_11;
	}
}
