<?php

// Generated by Haxe 3.3.0
class thx_TestDateTime {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
		$this->offset = thx__Time_Time_Impl_::create(-6, 0, 0, 0);
		$offset = $this->offset;
		$dateTime = thx__DateTimeUtc_DateTimeUtc_Impl_::create(2015, 7, 26, 21, 40, 30, 0);
		$this1 = (new _hx_array(array($dateTime, $offset)));
		$this2 = $this1[0];
		$b = $offset;
		$high = $this2->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low - $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($this2->low, $b->low) < 0) {
			--$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		$this->date = (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x), $this1[1])));
		$offset1 = $this->offset;
		$dateTime1 = thx__DateTimeUtc_DateTimeUtc_Impl_::create(2015, 7, 27, 16, 40, 30, 0);
		$this3 = (new _hx_array(array($dateTime1, $offset1)));
		$this4 = $this3[0];
		$b1 = $offset1;
		$high1 = $this4->high - $b1->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low1 = $this4->low - $b1->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($this4->low, $b1->low) < 0) {
			--$high1;
			$tmp1 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x1 = new haxe__Int64____Int64($high1, $low1);
		$this->tomorrow = (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x1), $this3[1])));
		$offset2 = thx__Time_Time_Impl_::$zero;
		$dateTime2 = thx__DateTimeUtc_DateTimeUtc_Impl_::create(2015, 7, 27, 3, 40, 30, 0);
		$this5 = (new _hx_array(array($dateTime2, $offset2)));
		$this6 = $this5[0];
		$b2 = $offset2;
		$high2 = $this6->high - $b2->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low2 = $this6->low - $b2->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($this6->low, $b2->low) < 0) {
			--$high2;
			$tmp2 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
			$high2 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x2 = new haxe__Int64____Int64($high2, $low2);
		$this->dateutc = (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x2), $this5[1])));
	}}
	public $offset;
	public $date;
	public $tomorrow;
	public $dateutc;
	public $x;
	public function testCreate() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = $this->date;
			$this2 = $this1[0];
			$this3 = $this1[1];
			$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
				++$high;
				$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
				$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
				unset($tmp);
			}
			$x = new haxe__Int64____Int64($high, $low);
			$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			$this4 = $this->date;
			$this5 = $this4[0];
			$this6 = $this4[1];
			$high1 = $this5->high + $this6->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low1 = $this5->low + $this6->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low1, $this5->low) < 0) {
				++$high1;
				$tmp2 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
				$high1 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
				unset($tmp2);
			}
			$x1 = new haxe__Int64____Int64($high1, $low1);
			$tmp3 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			utest_Assert::equals(2015, $tmp1, "expected 2015 but got " . _hx_string_rec($tmp3, "") . " for year", _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 25, "className" => "thx.TestDateTime", "methodName" => "testCreate")));
			$this7 = $this->date;
			$this8 = $this7[0];
			$this9 = $this7[1];
			$high2 = $this8->high + $this9->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low2 = $this8->low + $this9->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low2, $this8->low) < 0) {
				++$high2;
				$tmp4 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
				$high2 = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
				unset($tmp4);
			}
			$x2 = new haxe__Int64____Int64($high2, $low2);
			$tmp5 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x2, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
			$this10 = $this->date;
			$this11 = $this10[0];
			$this12 = $this10[1];
			$high3 = $this11->high + $this12->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low3 = $this11->low + $this12->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low3, $this11->low) < 0) {
				++$high3;
				$tmp6 = $high3 << haxe__Int32_Int32_Impl_::$extraBits;
				$high3 = $tmp6 >> haxe__Int32_Int32_Impl_::$extraBits;
				unset($tmp6);
			}
			$x3 = new haxe__Int64____Int64($high3, $low3);
			$tmp7 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x3, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
			utest_Assert::equals(7, $tmp5, "expected 7 but got " . _hx_string_rec($tmp7, "") . " for month", _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 26, "className" => "thx.TestDateTime", "methodName" => "testCreate")));
			$this13 = $this->date;
			$this14 = $this13[0];
			$this15 = $this13[1];
			$high4 = $this14->high + $this15->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low4 = $this14->low + $this15->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low4, $this14->low) < 0) {
				++$high4;
				$tmp8 = $high4 << haxe__Int32_Int32_Impl_::$extraBits;
				$high4 = $tmp8 >> haxe__Int32_Int32_Impl_::$extraBits;
				unset($tmp8);
			}
			$x4 = new haxe__Int64____Int64($high4, $low4);
			$tmp9 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x4, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
			$this16 = $this->date;
			$this17 = $this16[0];
			$this18 = $this16[1];
			$high5 = $this17->high + $this18->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low5 = $this17->low + $this18->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low5, $this17->low) < 0) {
				++$high5;
				$tmp10 = $high5 << haxe__Int32_Int32_Impl_::$extraBits;
				$high5 = $tmp10 >> haxe__Int32_Int32_Impl_::$extraBits;
				unset($tmp10);
			}
			$x5 = new haxe__Int64____Int64($high5, $low5);
			$tmp11 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x5, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
			utest_Assert::equals(26, $tmp9, "expected 26 but got " . _hx_string_rec($tmp11, "") . " for day", _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 27, "className" => "thx.TestDateTime", "methodName" => "testCreate")));
			$this19 = $this->date;
			$this20 = $this19[0];
			$this21 = $this19[1];
			$high6 = $this20->high + $this21->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low6 = $this20->low + $this21->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low6, $this20->low) < 0) {
				++$high6;
				$tmp12 = $high6 << haxe__Int32_Int32_Impl_::$extraBits;
				$high6 = $tmp12 >> haxe__Int32_Int32_Impl_::$extraBits;
				unset($tmp12);
			}
			$x6 = new haxe__Int64____Int64($high6, $low6);
			$tmp13 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($x6);
			$this22 = $this->date;
			$this23 = $this22[0];
			$this24 = $this22[1];
			$high7 = $this23->high + $this24->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low7 = $this23->low + $this24->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low7, $this23->low) < 0) {
				++$high7;
				$tmp14 = $high7 << haxe__Int32_Int32_Impl_::$extraBits;
				$high7 = $tmp14 >> haxe__Int32_Int32_Impl_::$extraBits;
				unset($tmp14);
			}
			$x7 = new haxe__Int64____Int64($high7, $low7);
			$tmp15 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($x7);
			utest_Assert::equals(21, $tmp13, "expected 21 but got " . _hx_string_rec($tmp15, "") . " for hour", _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 29, "className" => "thx.TestDateTime", "methodName" => "testCreate")));
			$this25 = $this->date;
			$this26 = $this25[0];
			$this27 = $this25[1];
			$high8 = $this26->high + $this27->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low8 = $this26->low + $this27->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low8, $this26->low) < 0) {
				++$high8;
				$tmp16 = $high8 << haxe__Int32_Int32_Impl_::$extraBits;
				$high8 = $tmp16 >> haxe__Int32_Int32_Impl_::$extraBits;
				unset($tmp16);
			}
			$x8 = new haxe__Int64____Int64($high8, $low8);
			$tmp17 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_minute($x8);
			$this28 = $this->date;
			$this29 = $this28[0];
			$this30 = $this28[1];
			$high9 = $this29->high + $this30->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low9 = $this29->low + $this30->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low9, $this29->low) < 0) {
				++$high9;
				$tmp18 = $high9 << haxe__Int32_Int32_Impl_::$extraBits;
				$high9 = $tmp18 >> haxe__Int32_Int32_Impl_::$extraBits;
				unset($tmp18);
			}
			$x9 = new haxe__Int64____Int64($high9, $low9);
			$tmp19 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_minute($x9);
			utest_Assert::equals(40, $tmp17, "expected 40 but got " . _hx_string_rec($tmp19, "") . " for minute", _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 30, "className" => "thx.TestDateTime", "methodName" => "testCreate")));
			$this31 = $this->date;
			$this32 = $this31[0];
			$this33 = $this31[1];
			$high10 = $this32->high + $this33->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low10 = $this32->low + $this33->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low10, $this32->low) < 0) {
				++$high10;
				$tmp20 = $high10 << haxe__Int32_Int32_Impl_::$extraBits;
				$high10 = $tmp20 >> haxe__Int32_Int32_Impl_::$extraBits;
				unset($tmp20);
			}
			$x10 = new haxe__Int64____Int64($high10, $low10);
			$tmp21 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_second($x10);
			$this34 = $this->date;
			$this35 = $this34[0];
			$this36 = $this34[1];
			$high11 = $this35->high + $this36->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low11 = $this35->low + $this36->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low11, $this35->low) < 0) {
				++$high11;
				$tmp22 = $high11 << haxe__Int32_Int32_Impl_::$extraBits;
				$high11 = $tmp22 >> haxe__Int32_Int32_Impl_::$extraBits;
				unset($tmp22);
			}
			$x11 = new haxe__Int64____Int64($high11, $low11);
			$tmp23 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_second($x11);
			utest_Assert::equals(30, $tmp21, "expected 30 but got " . _hx_string_rec($tmp23, "") . " for second", _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 31, "className" => "thx.TestDateTime", "methodName" => "testCreate")));
			$this37 = $this->date;
			$this38 = $this37[0];
			$this39 = $this37[1];
			$high12 = $this38->high + $this39->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low12 = $this38->low + $this39->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low12, $this38->low) < 0) {
				++$high12;
				$tmp24 = $high12 << haxe__Int32_Int32_Impl_::$extraBits;
				$high12 = $tmp24 >> haxe__Int32_Int32_Impl_::$extraBits;
				unset($tmp24);
			}
			$x12 = new haxe__Int64____Int64($high12, $low12);
			$tmp25 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_dayOfWeek($x12);
			utest_Assert::equals(0, $tmp25, null, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 33, "className" => "thx.TestDateTime", "methodName" => "testCreate")));
			$this40 = $this->date[1];
			$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerHourI64;
			$a = haxe__Int64_Int64_Impl_::divMod($this40, $b)->quotient;
			$x13 = new haxe__Int64____Int64(0, 24);
			$x14 = haxe__Int64_Int64_Impl_::divMod($a, $x13)->modulus;
			if($x14->high !== $x14->low >> 31) {
				throw new HException("Overflow");
			}
			$tmp26 = $x14->low;
			utest_Assert::equals(-6, $tmp26, null, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 35, "className" => "thx.TestDateTime", "methodName" => "testCreate")));
			unset($x9,$x8,$x7,$x6,$x5,$x4,$x3,$x2,$x14,$x13,$x12,$x11,$x10,$x1,$x,$tmp9,$tmp7,$tmp5,$tmp3,$tmp26,$tmp25,$tmp23,$tmp21,$tmp19,$tmp17,$tmp15,$tmp13,$tmp11,$tmp1,$this9,$this8,$this7,$this6,$this5,$this40,$this4,$this39,$this38,$this37,$this36,$this35,$this34,$this33,$this32,$this31,$this30,$this3,$this29,$this28,$this27,$this26,$this25,$this24,$this23,$this22,$this21,$this20,$this2,$this19,$this18,$this17,$this16,$this15,$this14,$this13,$this12,$this11,$this10,$this1,$low9,$low8,$low7,$low6,$low5,$low4,$low3,$low2,$low12,$low11,$low10,$low1,$low,$high9,$high8,$high7,$high6,$high5,$high4,$high3,$high2,$high12,$high11,$high10,$high1,$high,$b,$a);
		}
	}
	public function testEquals() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = $this->date[0];
			$this2 = $this->date[0];
			$tmp = null;
			if($this1->high === $this2->high) {
				$tmp = $this1->low === $this2->low;
			} else {
				$tmp = false;
			}
			utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 40, "className" => "thx.TestDateTime", "methodName" => "testEquals")));
			$this3 = $this->date[0];
			$this4 = $this->tomorrow[0];
			$tmp1 = null;
			if(!($this3->high !== $this4->high)) {
				$tmp1 = $this3->low !== $this4->low;
			} else {
				$tmp1 = true;
			}
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 41, "className" => "thx.TestDateTime", "methodName" => "testEquals")));
			$this5 = $this->date[0];
			$this6 = $this->dateutc[0];
			$tmp2 = null;
			if($this5->high === $this6->high) {
				$tmp2 = $this5->low === $this6->low;
			} else {
				$tmp2 = false;
			}
			utest_Assert::isTrue($tmp2, null, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 42, "className" => "thx.TestDateTime", "methodName" => "testEquals")));
			unset($tmp2,$tmp1,$tmp,$this6,$this5,$this4,$this3,$this2,$this1);
		}
	}
	public function testCompare() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			utest_Assert::isFalse(thx__DateTime_DateTime_Impl_::compareTo($this->date, $this->date) > 0, null, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 47, "className" => "thx.TestDateTime", "methodName" => "testCompare")));
			utest_Assert::isTrue(thx__DateTime_DateTime_Impl_::compareTo($this->date, $this->date) >= 0, null, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 48, "className" => "thx.TestDateTime", "methodName" => "testCompare")));
			utest_Assert::isFalse(thx__DateTime_DateTime_Impl_::compareTo($this->date, $this->date) < 0, null, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 49, "className" => "thx.TestDateTime", "methodName" => "testCompare")));
			utest_Assert::isTrue(thx__DateTime_DateTime_Impl_::compareTo($this->date, $this->date) <= 0, null, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 50, "className" => "thx.TestDateTime", "methodName" => "testCompare")));
			utest_Assert::isFalse(thx__DateTime_DateTime_Impl_::compareTo($this->date, $this->tomorrow) > 0, null, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 52, "className" => "thx.TestDateTime", "methodName" => "testCompare")));
			utest_Assert::isFalse(thx__DateTime_DateTime_Impl_::compareTo($this->date, $this->tomorrow) >= 0, null, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 53, "className" => "thx.TestDateTime", "methodName" => "testCompare")));
			utest_Assert::isTrue(thx__DateTime_DateTime_Impl_::compareTo($this->date, $this->tomorrow) < 0, null, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 54, "className" => "thx.TestDateTime", "methodName" => "testCompare")));
			utest_Assert::isTrue(thx__DateTime_DateTime_Impl_::compareTo($this->date, $this->tomorrow) <= 0, null, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 55, "className" => "thx.TestDateTime", "methodName" => "testCompare")));
			utest_Assert::isTrue(thx__DateTime_DateTime_Impl_::compareTo($this->tomorrow, $this->date) > 0, null, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 57, "className" => "thx.TestDateTime", "methodName" => "testCompare")));
			utest_Assert::isTrue(thx__DateTime_DateTime_Impl_::compareTo($this->tomorrow, $this->date) >= 0, null, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 58, "className" => "thx.TestDateTime", "methodName" => "testCompare")));
			utest_Assert::isFalse(thx__DateTime_DateTime_Impl_::compareTo($this->tomorrow, $this->date) < 0, null, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 59, "className" => "thx.TestDateTime", "methodName" => "testCompare")));
			utest_Assert::isFalse(thx__DateTime_DateTime_Impl_::compareTo($this->tomorrow, $this->date) <= 0, null, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 60, "className" => "thx.TestDateTime", "methodName" => "testCompare")));
		}
	}
	public function testToString() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$d = thx__DateTime_DateTime_Impl_::toString($this->date);
			utest_Assert::equals("2015-07-26T21:40:30-06:00", $d, null, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 66, "className" => "thx.TestDateTime", "methodName" => "testToString")));
			unset($d);
		}
	}
	public function testAdd() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = $this->date;
			$dateTime = thx__DateTimeUtc_DateTimeUtc_Impl_::addMonths($this1[0], 24);
			$this2 = (new _hx_array(array($dateTime, $this1[1])));
			$dateTime1 = thx__DateTimeUtc_DateTimeUtc_Impl_::addMonths($this2[0], 9);
			$this3 = (new _hx_array(array($dateTime1, $this2[1])));
			$dateTime2 = thx__DateTimeUtc_DateTimeUtc_Impl_::addScaled($this3[0], 10, thx__DateTimeUtc_DateTimeUtc_Impl_::$millisPerDay);
			$this4 = (new _hx_array(array($dateTime2, $this3[1])));
			$dateTime3 = thx__DateTimeUtc_DateTimeUtc_Impl_::addScaled($this4[0], 7, thx__DateTimeUtc_DateTimeUtc_Impl_::$millisPerHour);
			$this5 = (new _hx_array(array($dateTime3, $this4[1])));
			$dateTime4 = thx__DateTimeUtc_DateTimeUtc_Impl_::addScaled($this5[0], 10, thx__DateTimeUtc_DateTimeUtc_Impl_::$millisPerMinute);
			$this6 = (new _hx_array(array($dateTime4, $this5[1])));
			$dateTime5 = thx__DateTimeUtc_DateTimeUtc_Impl_::addScaled($this6[0], 7, thx__DateTimeUtc_DateTimeUtc_Impl_::$millisPerSecond);
			$this7 = (new _hx_array(array($dateTime5, $this6[1])));
			$dateTime6 = thx__DateTimeUtc_DateTimeUtc_Impl_::addScaled($this7[0], 7, 1);
			$d = (new _hx_array(array($dateTime6, $this7[1])));
			$that = thx__DateTime_DateTime_Impl_::fromString("2018-05-07T04:50:37.007-06:00");
			$this8 = $d[0];
			$this9 = $that[0];
			$tmp = null;
			if($this8->high === $this9->high) {
				$tmp = $this8->low === $this9->low;
			} else {
				$tmp = false;
			}
			$tmp1 = "expected " . "2018-05-07T04:50:37.007-06:00" . " but got ";
			$tmp2 = thx__DateTime_DateTime_Impl_::toString($d);
			utest_Assert::isTrue($tmp, _hx_string_or_null($tmp1) . _hx_string_or_null($tmp2), _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 80, "className" => "thx.TestDateTime", "methodName" => "testAdd")));
			unset($tmp2,$tmp1,$tmp,$this9,$this8,$this7,$this6,$this5,$this4,$this3,$this2,$this1,$that,$dateTime6,$dateTime5,$dateTime4,$dateTime3,$dateTime2,$dateTime1,$dateTime,$d);
		}
	}
	public function testOffset() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$nyDate = (new _hx_array(array($this->date[0], thx__Time_Time_Impl_::create(-4, 0, 0, 0))));
			$tmp = thx__DateTime_DateTime_Impl_::toString($nyDate);
			utest_Assert::equals("2015-07-26T23:40:30-04:00", $tmp, null, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 86, "className" => "thx.TestDateTime", "methodName" => "testOffset")));
			$this1 = $this->date;
			$newoffset = thx__Time_Time_Impl_::create(-4, 0, 0, 0);
			$this2 = $this1[0];
			$this3 = $this1[1];
			$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
				++$high;
				$tmp1 = $high << haxe__Int32_Int32_Impl_::$extraBits;
				$high = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
				unset($tmp1);
			}
			$x = new haxe__Int64____Int64($high, $low);
			$ticks = $x;
			$b = $newoffset;
			$high1 = $ticks->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low1 = $ticks->low - $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($ticks->low, $b->low) < 0) {
				--$high1;
				$tmp2 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
				$high1 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
				unset($tmp2);
			}
			$x1 = new haxe__Int64____Int64($high1, $low1);
			$nyDate = (new _hx_array(array($x1, $newoffset)));
			$tmp3 = thx__DateTime_DateTime_Impl_::toString($nyDate);
			utest_Assert::equals("2015-07-26T21:40:30-04:00", $tmp3, null, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 88, "className" => "thx.TestDateTime", "methodName" => "testOffset")));
			unset($x1,$x,$tmp3,$tmp,$ticks,$this3,$this2,$this1,$nyDate,$newoffset,$low1,$low,$high1,$high,$b);
		}
	}
	public function testSnapNext() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx__DateTime_DateTime_Impl_::fromString("2014-01-01 10:07:00-06:00");
			$this->assertSnapNext($tmp, thx__DateTime_DateTime_Impl_::fromString("2014-01-01 10:06:10-06:00"), thx_TimePeriod::$Minute, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 93, "className" => "thx.TestDateTime", "methodName" => "testSnapNext")));
			$tmp1 = thx__DateTime_DateTime_Impl_::fromString("2014-01-01 10:06:00-06:00");
			$this->assertSnapNext($tmp1, thx__DateTime_DateTime_Impl_::fromString("2014-01-01 10:05:50-06:00"), thx_TimePeriod::$Minute, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 94, "className" => "thx.TestDateTime", "methodName" => "testSnapNext")));
			$tmp2 = thx__DateTime_DateTime_Impl_::fromString("2014-01-01 11:00:00-06:00");
			$this->assertSnapNext($tmp2, thx__DateTime_DateTime_Impl_::fromString("2014-01-01 10:10:10-06:00"), thx_TimePeriod::$Hour, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 95, "className" => "thx.TestDateTime", "methodName" => "testSnapNext")));
			$tmp3 = thx__DateTime_DateTime_Impl_::fromString("2014-01-01 10:00:00-06:00");
			$this->assertSnapNext($tmp3, thx__DateTime_DateTime_Impl_::fromString("2014-01-01 09:50:10-06:00"), thx_TimePeriod::$Hour, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 96, "className" => "thx.TestDateTime", "methodName" => "testSnapNext")));
			$tmp4 = thx__DateTime_DateTime_Impl_::fromString("2014-01-02 00:00:00-06:00");
			$this->assertSnapNext($tmp4, thx__DateTime_DateTime_Impl_::fromString("2014-01-01 10:00:00-06:00"), thx_TimePeriod::$Day, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 97, "className" => "thx.TestDateTime", "methodName" => "testSnapNext")));
			$tmp5 = thx__DateTime_DateTime_Impl_::fromString("2014-01-01 00:00:00-06:00");
			$this->assertSnapNext($tmp5, thx__DateTime_DateTime_Impl_::fromString("2013-12-31 20:00:00-06:00"), thx_TimePeriod::$Day, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 98, "className" => "thx.TestDateTime", "methodName" => "testSnapNext")));
			$tmp6 = thx__DateTime_DateTime_Impl_::fromString("2014-12-21 00:00:00-06:00");
			$this->assertSnapNext($tmp6, thx__DateTime_DateTime_Impl_::fromString("2014-12-17 11:00:00-06:00"), thx_TimePeriod::$Week, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 99, "className" => "thx.TestDateTime", "methodName" => "testSnapNext")));
			$tmp7 = thx__DateTime_DateTime_Impl_::fromString("2014-12-21 00:00:00-06:00");
			$this->assertSnapNext($tmp7, thx__DateTime_DateTime_Impl_::fromString("2014-12-18 00:00:00-06:00"), thx_TimePeriod::$Week, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 100, "className" => "thx.TestDateTime", "methodName" => "testSnapNext")));
			$tmp8 = thx__DateTime_DateTime_Impl_::fromString("2015-01-01 00:00:00-06:00");
			$this->assertSnapNext($tmp8, thx__DateTime_DateTime_Impl_::fromString("2014-12-12 00:00:00-06:00"), thx_TimePeriod::$Month, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 101, "className" => "thx.TestDateTime", "methodName" => "testSnapNext")));
			$tmp9 = thx__DateTime_DateTime_Impl_::fromString("2015-01-01 00:00:00-06:00");
			$this->assertSnapNext($tmp9, thx__DateTime_DateTime_Impl_::fromString("2014-12-18 00:00:00-06:00"), thx_TimePeriod::$Month, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 102, "className" => "thx.TestDateTime", "methodName" => "testSnapNext")));
			$tmp10 = thx__DateTime_DateTime_Impl_::fromString("2015-01-01 00:00:00-06:00");
			$this->assertSnapNext($tmp10, thx__DateTime_DateTime_Impl_::fromString("2014-05-12 00:00:00-06:00"), thx_TimePeriod::$Year, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 103, "className" => "thx.TestDateTime", "methodName" => "testSnapNext")));
			$tmp11 = thx__DateTime_DateTime_Impl_::fromString("2015-01-01 00:00:00-06:00");
			$this->assertSnapNext($tmp11, thx__DateTime_DateTime_Impl_::fromString("2014-12-18 00:00:00-06:00"), thx_TimePeriod::$Year, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 104, "className" => "thx.TestDateTime", "methodName" => "testSnapNext")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp11,$tmp10,$tmp1,$tmp);
		}
	}
	public function testSnapPrev() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx__DateTime_DateTime_Impl_::fromString("2014-01-01 10:06:00-06:00");
			$this->assertSnapPrev($tmp, thx__DateTime_DateTime_Impl_::fromString("2014-01-01 10:06:10-06:00"), thx_TimePeriod::$Minute, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 109, "className" => "thx.TestDateTime", "methodName" => "testSnapPrev")));
			$tmp1 = thx__DateTime_DateTime_Impl_::fromString("2014-01-01 10:05:00-06:00");
			$this->assertSnapPrev($tmp1, thx__DateTime_DateTime_Impl_::fromString("2014-01-01 10:05:50-06:00"), thx_TimePeriod::$Minute, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 110, "className" => "thx.TestDateTime", "methodName" => "testSnapPrev")));
			$tmp2 = thx__DateTime_DateTime_Impl_::fromString("2014-01-01 10:00:00-06:00");
			$this->assertSnapPrev($tmp2, thx__DateTime_DateTime_Impl_::fromString("2014-01-01 10:10:10-06:00"), thx_TimePeriod::$Hour, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 111, "className" => "thx.TestDateTime", "methodName" => "testSnapPrev")));
			$tmp3 = thx__DateTime_DateTime_Impl_::fromString("2014-01-01 09:00:00-06:00");
			$this->assertSnapPrev($tmp3, thx__DateTime_DateTime_Impl_::fromString("2014-01-01 09:50:10-06:00"), thx_TimePeriod::$Hour, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 112, "className" => "thx.TestDateTime", "methodName" => "testSnapPrev")));
			$tmp4 = thx__DateTime_DateTime_Impl_::fromString("2014-01-01 00:00:00-06:00");
			$this->assertSnapPrev($tmp4, thx__DateTime_DateTime_Impl_::fromString("2014-01-01 10:00:00-06:00"), thx_TimePeriod::$Day, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 113, "className" => "thx.TestDateTime", "methodName" => "testSnapPrev")));
			$tmp5 = thx__DateTime_DateTime_Impl_::fromString("2013-12-31 00:00:00-06:00");
			$this->assertSnapPrev($tmp5, thx__DateTime_DateTime_Impl_::fromString("2013-12-31 20:00:00-06:00"), thx_TimePeriod::$Day, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 114, "className" => "thx.TestDateTime", "methodName" => "testSnapPrev")));
			$tmp6 = thx__DateTime_DateTime_Impl_::fromString("2014-12-14 00:00:00-06:00");
			$this->assertSnapPrev($tmp6, thx__DateTime_DateTime_Impl_::fromString("2014-12-17 11:00:00-06:00"), thx_TimePeriod::$Week, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 115, "className" => "thx.TestDateTime", "methodName" => "testSnapPrev")));
			$tmp7 = thx__DateTime_DateTime_Impl_::fromString("2014-12-14 00:00:00-06:00");
			$this->assertSnapPrev($tmp7, thx__DateTime_DateTime_Impl_::fromString("2014-12-18 00:00:00-06:00"), thx_TimePeriod::$Week, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 116, "className" => "thx.TestDateTime", "methodName" => "testSnapPrev")));
			$tmp8 = thx__DateTime_DateTime_Impl_::fromString("2014-12-01 00:00:00-06:00");
			$this->assertSnapPrev($tmp8, thx__DateTime_DateTime_Impl_::fromString("2014-12-12 00:00:00-06:00"), thx_TimePeriod::$Month, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 117, "className" => "thx.TestDateTime", "methodName" => "testSnapPrev")));
			$tmp9 = thx__DateTime_DateTime_Impl_::fromString("2014-12-01 00:00:00-06:00");
			$this->assertSnapPrev($tmp9, thx__DateTime_DateTime_Impl_::fromString("2014-12-18 00:00:00-06:00"), thx_TimePeriod::$Month, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 118, "className" => "thx.TestDateTime", "methodName" => "testSnapPrev")));
			$tmp10 = thx__DateTime_DateTime_Impl_::fromString("2014-01-01 00:00:00-06:00");
			$this->assertSnapPrev($tmp10, thx__DateTime_DateTime_Impl_::fromString("2014-05-12 00:00:00-06:00"), thx_TimePeriod::$Year, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 119, "className" => "thx.TestDateTime", "methodName" => "testSnapPrev")));
			$tmp11 = thx__DateTime_DateTime_Impl_::fromString("2014-01-01 00:00:00-06:00");
			$this->assertSnapPrev($tmp11, thx__DateTime_DateTime_Impl_::fromString("2014-12-18 00:00:00-06:00"), thx_TimePeriod::$Year, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 120, "className" => "thx.TestDateTime", "methodName" => "testSnapPrev")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp11,$tmp10,$tmp1,$tmp);
		}
	}
	public function testSnapTo() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx__DateTime_DateTime_Impl_::fromString("2014-01-01 10:06:00-06:00");
			$this->assertSnapTo($tmp, thx__DateTime_DateTime_Impl_::fromString("2014-01-01 10:06:10-06:00"), thx_TimePeriod::$Minute, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 125, "className" => "thx.TestDateTime", "methodName" => "testSnapTo")));
			$tmp1 = thx__DateTime_DateTime_Impl_::fromString("2014-01-01 10:06:00-06:00");
			$this->assertSnapTo($tmp1, thx__DateTime_DateTime_Impl_::fromString("2014-01-01 10:05:50-06:00"), thx_TimePeriod::$Minute, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 126, "className" => "thx.TestDateTime", "methodName" => "testSnapTo")));
			$tmp2 = thx__DateTime_DateTime_Impl_::fromString("2014-01-01 10:00:00-06:00");
			$this->assertSnapTo($tmp2, thx__DateTime_DateTime_Impl_::fromString("2014-01-01 10:10:10-06:00"), thx_TimePeriod::$Hour, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 127, "className" => "thx.TestDateTime", "methodName" => "testSnapTo")));
			$tmp3 = thx__DateTime_DateTime_Impl_::fromString("2014-01-01 10:00:00-06:00");
			$this->assertSnapTo($tmp3, thx__DateTime_DateTime_Impl_::fromString("2014-01-01 09:50:10-06:00"), thx_TimePeriod::$Hour, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 128, "className" => "thx.TestDateTime", "methodName" => "testSnapTo")));
			$tmp4 = thx__DateTime_DateTime_Impl_::fromString("2014-01-01 00:00:00-06:00");
			$this->assertSnapTo($tmp4, thx__DateTime_DateTime_Impl_::fromString("2014-01-01 10:00:00-06:00"), thx_TimePeriod::$Day, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 129, "className" => "thx.TestDateTime", "methodName" => "testSnapTo")));
			$tmp5 = thx__DateTime_DateTime_Impl_::fromString("2014-01-01 00:00:00-06:00");
			$this->assertSnapTo($tmp5, thx__DateTime_DateTime_Impl_::fromString("2013-12-31 20:00:00-06:00"), thx_TimePeriod::$Day, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 130, "className" => "thx.TestDateTime", "methodName" => "testSnapTo")));
			$tmp6 = thx__DateTime_DateTime_Impl_::fromString("2014-12-14 00:00:00-06:00");
			$this->assertSnapTo($tmp6, thx__DateTime_DateTime_Impl_::fromString("2014-12-17 11:00:00-06:00"), thx_TimePeriod::$Week, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 131, "className" => "thx.TestDateTime", "methodName" => "testSnapTo")));
			$tmp7 = thx__DateTime_DateTime_Impl_::fromString("2014-12-21 00:00:00-06:00");
			$this->assertSnapTo($tmp7, thx__DateTime_DateTime_Impl_::fromString("2014-12-18 00:00:00-06:00"), thx_TimePeriod::$Week, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 132, "className" => "thx.TestDateTime", "methodName" => "testSnapTo")));
			$tmp8 = thx__DateTime_DateTime_Impl_::fromString("2014-12-01 00:00:00-06:00");
			$this->assertSnapTo($tmp8, thx__DateTime_DateTime_Impl_::fromString("2014-12-12 00:00:00-06:00"), thx_TimePeriod::$Month, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 133, "className" => "thx.TestDateTime", "methodName" => "testSnapTo")));
			$tmp9 = thx__DateTime_DateTime_Impl_::fromString("2015-01-01 00:00:00-06:00");
			$this->assertSnapTo($tmp9, thx__DateTime_DateTime_Impl_::fromString("2014-12-18 00:00:00-06:00"), thx_TimePeriod::$Month, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 134, "className" => "thx.TestDateTime", "methodName" => "testSnapTo")));
			$tmp10 = thx__DateTime_DateTime_Impl_::fromString("2014-01-01 00:00:00-06:00");
			$this->assertSnapTo($tmp10, thx__DateTime_DateTime_Impl_::fromString("2014-05-12 00:00:00-06:00"), thx_TimePeriod::$Year, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 135, "className" => "thx.TestDateTime", "methodName" => "testSnapTo")));
			$tmp11 = thx__DateTime_DateTime_Impl_::fromString("2015-01-01 00:00:00-06:00");
			$this->assertSnapTo($tmp11, thx__DateTime_DateTime_Impl_::fromString("2014-12-18 00:00:00-06:00"), thx_TimePeriod::$Year, _hx_anonymous(array("fileName" => "TestDateTime.hx", "lineNumber" => 136, "className" => "thx.TestDateTime", "methodName" => "testSnapTo")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp11,$tmp10,$tmp1,$tmp);
		}
	}
	public function assertSnapTo($expected, $date, $period, $pos = null) {
		$t = thx__DateTime_DateTime_Impl_::snapTo($date, $period);
		$this1 = $expected[0];
		$this2 = $t[0];
		$tmp = null;
		if($this1->high === $this2->high) {
			$tmp = $this1->low === $this2->low;
		} else {
			$tmp = false;
		}
		$tmp1 = thx__DateTime_DateTime_Impl_::toString($date);
		$tmp2 = "expected " . _hx_string_or_null($tmp1) . " to snap to ";
		$tmp3 = thx__DateTime_DateTime_Impl_::toString($expected);
		$tmp4 = _hx_string_or_null($tmp2) . _hx_string_or_null($tmp3) . " for ";
		$tmp5 = Std::string($period);
		$tmp6 = _hx_string_or_null($tmp4) . _hx_string_or_null($tmp5) . " but it is ";
		$tmp7 = thx__DateTime_DateTime_Impl_::toString($t);
		utest_Assert::isTrue($tmp, _hx_string_or_null($tmp6) . _hx_string_or_null($tmp7), $pos);
	}
	public function assertSnapPrev($expected, $date, $period, $pos = null) {
		$t = thx__DateTime_DateTime_Impl_::snapPrev($date, $period);
		$this1 = $expected[0];
		$this2 = $t[0];
		$tmp = null;
		if($this1->high === $this2->high) {
			$tmp = $this1->low === $this2->low;
		} else {
			$tmp = false;
		}
		$tmp1 = thx__DateTime_DateTime_Impl_::toString($date);
		$tmp2 = "expected " . _hx_string_or_null($tmp1) . " to snap before ";
		$tmp3 = thx__DateTime_DateTime_Impl_::toString($expected);
		$tmp4 = _hx_string_or_null($tmp2) . _hx_string_or_null($tmp3) . " for ";
		$tmp5 = Std::string($period);
		$tmp6 = _hx_string_or_null($tmp4) . _hx_string_or_null($tmp5) . " but it is ";
		$tmp7 = thx__DateTime_DateTime_Impl_::toString($t);
		utest_Assert::isTrue($tmp, _hx_string_or_null($tmp6) . _hx_string_or_null($tmp7), $pos);
	}
	public function assertSnapNext($expected, $date, $period, $pos = null) {
		$t = thx__DateTime_DateTime_Impl_::snapNext($date, $period);
		$this1 = $expected[0];
		$this2 = $t[0];
		$tmp = null;
		if($this1->high === $this2->high) {
			$tmp = $this1->low === $this2->low;
		} else {
			$tmp = false;
		}
		$tmp1 = thx__DateTime_DateTime_Impl_::toString($date);
		$tmp2 = "expected " . _hx_string_or_null($tmp1) . " to snap after ";
		$tmp3 = thx__DateTime_DateTime_Impl_::toString($expected);
		$tmp4 = _hx_string_or_null($tmp2) . _hx_string_or_null($tmp3) . " for ";
		$tmp5 = Std::string($period);
		$tmp6 = _hx_string_or_null($tmp4) . _hx_string_or_null($tmp5) . " but it is ";
		$tmp7 = thx__DateTime_DateTime_Impl_::toString($t);
		utest_Assert::isTrue($tmp, _hx_string_or_null($tmp6) . _hx_string_or_null($tmp7), $pos);
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.TestDateTime'; }
}
