<?php

// Generated by Haxe 3.3.0
class thx_TestStrings {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testLowerUpperCaseFirst() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_Strings::lowerCaseFirst("ABC");
			utest_Assert::equals("aBC", $tmp, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 20, "className" => "thx.TestStrings", "methodName" => "testLowerUpperCaseFirst")));
			$tmp1 = thx_Strings::upperCaseFirst("abc");
			utest_Assert::equals("Abc", $tmp1, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 21, "className" => "thx.TestStrings", "methodName" => "testLowerUpperCaseFirst")));
			unset($tmp1,$tmp);
		}
	}
	public function testContains() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			utest_Assert::isTrue(true, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 26, "className" => "thx.TestStrings", "methodName" => "testContains")));
			$tmp = _hx_index_of("test", "t", null);
			utest_Assert::isTrue($tmp >= 0, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 27, "className" => "thx.TestStrings", "methodName" => "testContains")));
			$tmp1 = _hx_index_of("test", "te", null);
			utest_Assert::isTrue($tmp1 >= 0, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 28, "className" => "thx.TestStrings", "methodName" => "testContains")));
			$tmp2 = _hx_index_of("test", "tes", null);
			utest_Assert::isTrue($tmp2 >= 0, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 29, "className" => "thx.TestStrings", "methodName" => "testContains")));
			$tmp3 = _hx_index_of("test", "test", null);
			utest_Assert::isTrue($tmp3 >= 0, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 30, "className" => "thx.TestStrings", "methodName" => "testContains")));
			$tmp4 = _hx_index_of("one two three", "one", null);
			utest_Assert::isTrue($tmp4 >= 0, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 31, "className" => "thx.TestStrings", "methodName" => "testContains")));
			$tmp5 = _hx_index_of("one two three", "two", null);
			utest_Assert::isTrue($tmp5 >= 0, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 32, "className" => "thx.TestStrings", "methodName" => "testContains")));
			$tmp6 = _hx_index_of("one two three", "three", null);
			utest_Assert::isTrue($tmp6 >= 0, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 33, "className" => "thx.TestStrings", "methodName" => "testContains")));
			$tmp7 = _hx_index_of("test", "test ", null);
			utest_Assert::isFalse($tmp7 >= 0, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 34, "className" => "thx.TestStrings", "methodName" => "testContains")));
			$tmp8 = _hx_index_of("test", " test", null);
			utest_Assert::isFalse($tmp8 >= 0, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 35, "className" => "thx.TestStrings", "methodName" => "testContains")));
			$tmp9 = _hx_index_of("test", "tes ", null);
			utest_Assert::isFalse($tmp9 >= 0, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 36, "className" => "thx.TestStrings", "methodName" => "testContains")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testCount() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_Strings::count("one two three four five six seven eight nine ten", "o");
			utest_Assert::equals(3, $tmp, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 41, "className" => "thx.TestStrings", "methodName" => "testCount")));
			$tmp1 = thx_Strings::count("one two three four five six seven eight nine ten", "en");
			utest_Assert::equals(2, $tmp1, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 42, "className" => "thx.TestStrings", "methodName" => "testCount")));
			$tmp2 = thx_Strings::count("one two three four five six seven eight nine ten", " t");
			utest_Assert::equals(3, $tmp2, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 43, "className" => "thx.TestStrings", "methodName" => "testCount")));
			$tmp3 = thx_Strings::count("one two three four five six seven eight nine ten", "ve");
			utest_Assert::equals(2, $tmp3, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 44, "className" => "thx.TestStrings", "methodName" => "testCount")));
			$tmp4 = thx_Strings::count("xxxxxx", "y");
			utest_Assert::equals(0, $tmp4, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 45, "className" => "thx.TestStrings", "methodName" => "testCount")));
			$tmp5 = thx_Strings::count("xxxxxx", "x");
			utest_Assert::equals(6, $tmp5, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 46, "className" => "thx.TestStrings", "methodName" => "testCount")));
			$tmp6 = thx_Strings::count("xxxxxx", "xx");
			utest_Assert::equals(3, $tmp6, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 47, "className" => "thx.TestStrings", "methodName" => "testCount")));
			$tmp7 = thx_Strings::count("xxxxxx", "xxx");
			utest_Assert::equals(2, $tmp7, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 48, "className" => "thx.TestStrings", "methodName" => "testCount")));
			$tmp8 = thx_Strings::count("xxxxxx", "xxxx");
			utest_Assert::equals(1, $tmp8, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 49, "className" => "thx.TestStrings", "methodName" => "testCount")));
			$tmp9 = thx_Strings::count("x", "xx");
			utest_Assert::equals(0, $tmp9, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 50, "className" => "thx.TestStrings", "methodName" => "testCount")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testContainsAny() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_Arrays::any((new _hx_array(array("t", "x", "y"))), array(new _hx_lambda(array(), "thx_TestStrings_0"), 'execute'));
			utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 55, "className" => "thx.TestStrings", "methodName" => "testContainsAny")));
			$tmp1 = thx_Arrays::any((new _hx_array(array("e", "x", "y"))), array(new _hx_lambda(array(), "thx_TestStrings_1"), 'execute'));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 56, "className" => "thx.TestStrings", "methodName" => "testContainsAny")));
			$tmp2 = thx_Arrays::any((new _hx_array(array("s", "x", "y"))), array(new _hx_lambda(array(), "thx_TestStrings_2"), 'execute'));
			utest_Assert::isTrue($tmp2, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 57, "className" => "thx.TestStrings", "methodName" => "testContainsAny")));
			$tmp3 = thx_Arrays::any((new _hx_array(array("x", "t", "y"))), array(new _hx_lambda(array(), "thx_TestStrings_3"), 'execute'));
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 58, "className" => "thx.TestStrings", "methodName" => "testContainsAny")));
			$tmp4 = thx_Arrays::any((new _hx_array(array("x", "e", "y"))), array(new _hx_lambda(array(), "thx_TestStrings_4"), 'execute'));
			utest_Assert::isTrue($tmp4, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 59, "className" => "thx.TestStrings", "methodName" => "testContainsAny")));
			$tmp5 = thx_Arrays::any((new _hx_array(array("x", "s", "y"))), array(new _hx_lambda(array(), "thx_TestStrings_5"), 'execute'));
			utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 60, "className" => "thx.TestStrings", "methodName" => "testContainsAny")));
			$tmp6 = thx_Arrays::any((new _hx_array(array("x", "y", "t"))), array(new _hx_lambda(array(), "thx_TestStrings_6"), 'execute'));
			utest_Assert::isTrue($tmp6, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 61, "className" => "thx.TestStrings", "methodName" => "testContainsAny")));
			$tmp7 = thx_Arrays::any((new _hx_array(array("x", "y", "e"))), array(new _hx_lambda(array(), "thx_TestStrings_7"), 'execute'));
			utest_Assert::isTrue($tmp7, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 62, "className" => "thx.TestStrings", "methodName" => "testContainsAny")));
			$tmp8 = thx_Arrays::any((new _hx_array(array("x", "y", "s"))), array(new _hx_lambda(array(), "thx_TestStrings_8"), 'execute'));
			utest_Assert::isTrue($tmp8, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 63, "className" => "thx.TestStrings", "methodName" => "testContainsAny")));
			$tmp9 = thx_Arrays::any((new _hx_array(array("zero", "one", "two"))), array(new _hx_lambda(array(), "thx_TestStrings_9"), 'execute'));
			utest_Assert::isTrue($tmp9, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 64, "className" => "thx.TestStrings", "methodName" => "testContainsAny")));
			$tmp10 = thx_Arrays::any((new _hx_array(array("one", "two", "three"))), array(new _hx_lambda(array(), "thx_TestStrings_10"), 'execute'));
			utest_Assert::isTrue($tmp10, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 65, "className" => "thx.TestStrings", "methodName" => "testContainsAny")));
			$tmp11 = thx_Arrays::any((new _hx_array(array("one two", "x", "three"))), array(new _hx_lambda(array(), "thx_TestStrings_11"), 'execute'));
			utest_Assert::isTrue($tmp11, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 66, "className" => "thx.TestStrings", "methodName" => "testContainsAny")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp11,$tmp10,$tmp1,$tmp);
		}
	}
	public function testHashCode() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_Strings::hashCode("a");
			utest_Assert::equals(97, $tmp, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 71, "className" => "thx.TestStrings", "methodName" => "testHashCode")));
			$tmp1 = thx_Strings::hashCode("abc");
			utest_Assert::equals(96354, $tmp1, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 72, "className" => "thx.TestStrings", "methodName" => "testHashCode")));
			$tmp2 = thx_Strings::hashCode("abcdefghijklm");
			utest_Assert::equals(898829415, $tmp2, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 73, "className" => "thx.TestStrings", "methodName" => "testHashCode")));
			$tmp3 = thx_Strings::hashCode("abcdefghijklmabcdefghijklmabcdefghijklmabcdefghijklmabcdefghijklm!!!");
			utest_Assert::equals(410520826, $tmp3, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 74, "className" => "thx.TestStrings", "methodName" => "testHashCode")));
			unset($tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testUcwordsws() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tests = (new _hx_array(array(_hx_anonymous(array("expected" => "Test", "test" => "test")), _hx_anonymous(array("expected" => "Test Test", "test" => "test test")), _hx_anonymous(array("expected" => " Test Test  Test ", "test" => " test test  test ")), _hx_anonymous(array("expected" => "Test\x0ATest", "test" => "test\x0Atest")), _hx_anonymous(array("expected" => "Test\x09Test", "test" => "test\x09test")))));
			{
				$_g2 = 0;
				while($_g2 < $tests->length) {
					$item = $tests[$_g2];
					++$_g2;
					$tmp = thx_Strings::capitalizeWords($item->test, true);
					utest_Assert::equals($item->expected, $tmp, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 87, "className" => "thx.TestStrings", "methodName" => "testUcwordsws")));
					unset($tmp,$item);
				}
				unset($_g2);
			}
			unset($tests);
		}
	}
	public function testDifferAt() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_Strings::diffAt("abcdef", "abc123");
			utest_Assert::equals(3, $tmp, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 92, "className" => "thx.TestStrings", "methodName" => "testDifferAt")));
			$tmp1 = thx_Strings::diffAt("", "abc123");
			utest_Assert::equals(0, $tmp1, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 93, "className" => "thx.TestStrings", "methodName" => "testDifferAt")));
			$tmp2 = thx_Strings::diffAt("a", "abc123");
			utest_Assert::equals(1, $tmp2, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 94, "className" => "thx.TestStrings", "methodName" => "testDifferAt")));
			$tmp3 = thx_Strings::diffAt("abc123", "");
			utest_Assert::equals(0, $tmp3, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 95, "className" => "thx.TestStrings", "methodName" => "testDifferAt")));
			$tmp4 = thx_Strings::diffAt("abc123", "a");
			utest_Assert::equals(1, $tmp4, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 96, "className" => "thx.TestStrings", "methodName" => "testDifferAt")));
			unset($tmp4,$tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testEllipsis() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tests = (new _hx_array(array(_hx_anonymous(array("expected" => "abcdefghijkl", "len" => null, "symbol" => null)), _hx_anonymous(array("expected" => "abcdefghijkl", "len" => 100, "symbol" => null)), _hx_anonymous(array("expected" => "abcd…", "len" => 5, "symbol" => null)), _hx_anonymous(array("expected" => "a ...", "len" => 5, "symbol" => " ...")), _hx_anonymous(array("expected" => "..", "len" => 2, "symbol" => " ...")), _hx_anonymous(array("expected" => "abcdef ...", "len" => 10, "symbol" => " ...")))));
			{
				$_g2 = 0;
				while($_g2 < $tests->length) {
					$item = $tests[$_g2];
					++$_g2;
					$tmp = thx_Strings::ellipsis("abcdefghijkl", $item->len, $item->symbol);
					utest_Assert::equals($item->expected, $tmp, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 111, "className" => "thx.TestStrings", "methodName" => "testEllipsis")));
					unset($tmp,$item);
				}
				unset($_g2);
			}
			unset($tests);
		}
	}
	public function testEllipsisMiddle() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tests = (new _hx_array(array(_hx_anonymous(array("expected" => "abcdefghijkl", "len" => null, "symbol" => null)), _hx_anonymous(array("expected" => "abcdefghijkl", "len" => 100, "symbol" => null)), _hx_anonymous(array("expected" => "ab…kl", "len" => 5, "symbol" => null)), _hx_anonymous(array("expected" => "a ...", "len" => 5, "symbol" => " ...")), _hx_anonymous(array("expected" => "..", "len" => 2, "symbol" => " ...")), _hx_anonymous(array("expected" => "abc ...jkl", "len" => 10, "symbol" => " ...")))));
			{
				$_g2 = 0;
				while($_g2 < $tests->length) {
					$item = $tests[$_g2];
					++$_g2;
					$tmp = thx_Strings::ellipsisMiddle("abcdefghijkl", $item->len, $item->symbol);
					utest_Assert::equals($item->expected, $tmp, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 126, "className" => "thx.TestStrings", "methodName" => "testEllipsisMiddle")));
					unset($tmp,$item);
				}
				unset($_g2);
			}
			unset($tests);
		}
	}
	public function testUcwords() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tests = (new _hx_array(array(_hx_anonymous(array("expected" => "Test", "test" => "test")), _hx_anonymous(array("expected" => "Test Test", "test" => "test test")), _hx_anonymous(array("expected" => " Test-Test:Test_Test : Test ", "test" => " test-test:test_test : test ")), _hx_anonymous(array("expected" => "Test\x0ATest", "test" => "test\x0Atest")), _hx_anonymous(array("expected" => "Test\x09Test", "test" => "test\x09test")))));
			{
				$_g2 = 0;
				while($_g2 < $tests->length) {
					$item = $tests[$_g2];
					++$_g2;
					$tmp = thx_Strings::capitalizeWords($item->test, null);
					utest_Assert::equals($item->expected, $tmp, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 139, "className" => "thx.TestStrings", "methodName" => "testUcwords")));
					unset($tmp,$item);
				}
				unset($_g2);
			}
			unset($tests);
		}
	}
	public function testAlphaNum() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			$i = $_g1++;
			$tests = (new _hx_array(array(_hx_anonymous(array("expected" => true, "test" => "a")), _hx_anonymous(array("expected" => true, "test" => "1a")), _hx_anonymous(array("expected" => false, "test" => " a")), _hx_anonymous(array("expected" => false, "test" => " ")), _hx_anonymous(array("expected" => false, "test" => "")))));
			{
				$_g2 = 0;
				while($_g2 < $tests->length) {
					$item = $tests[$_g2];
					++$_g2;
					$tmp = $item->expected;
					$tmp1 = ctype_alnum($item->test);
					utest_Assert::equals($tmp, $tmp1, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 152, "className" => "thx.TestStrings", "methodName" => "testAlphaNum")));
					unset($tmp1,$tmp,$item);
				}
				unset($_g2);
			}
			unset($tests,$i);
		}
	}
	public function testHumanize() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_Strings::humanize("helloWorld");
			utest_Assert::equals("hello world", $tmp, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 157, "className" => "thx.TestStrings", "methodName" => "testHumanize")));
			$tmp1 = thx_Strings::humanize("my_long_string");
			utest_Assert::equals("my long string", $tmp1, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 158, "className" => "thx.TestStrings", "methodName" => "testHumanize")));
			$tmp2 = thx_Strings::humanize("ignoreMANY");
			utest_Assert::equals("ignore many", $tmp2, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 159, "className" => "thx.TestStrings", "methodName" => "testHumanize")));
			unset($tmp2,$tmp1,$tmp);
		}
	}
	public function testWrapColumn() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_Strings::wrapColumns("Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.", 20, null, null);
			utest_Assert::equals("Lorem ipsum dolor\x0Asit amet,\x0Aconsectetur\x0Aadipisicing elit,\x0Ased do eiusmod\x0Atempor incididunt ut\x0Alabore et dolore\x0Amagna aliqua. Ut\x0Aenim ad minim\x0Aveniam, quis nostrud\x0Aexercitation ullamco\x0Alaboris nisi ut\x0Aaliquip ex ea\x0Acommodo consequat.", $tmp, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 166, "className" => "thx.TestStrings", "methodName" => "testWrapColumn")));
			$tmp1 = thx_Strings::wrapColumns("Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.", 20, "    ", null);
			utest_Assert::equals("    Lorem ipsum\x0A    dolor sit amet,\x0A    consectetur\x0A    adipisicing\x0A    elit, sed do\x0A    eiusmod tempor\x0A    incididunt ut\x0A    labore et dolore\x0A    magna aliqua. Ut\x0A    enim ad minim\x0A    veniam, quis\x0A    nostrud\x0A    exercitation\x0A    ullamco laboris\x0A    nisi ut aliquip\x0A    ex ea commodo\x0A    consequat.", $tmp1, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 183, "className" => "thx.TestStrings", "methodName" => "testWrapColumn")));
			unset($tmp1,$tmp);
		}
	}
	public function testWrapColumnPreserveNewLines() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_Strings::wrapColumns("Lorem ipsum dolor sit amet,\x0A\x0Aconsectetur adipisicing elit", 18, null, null);
			utest_Assert::equals("Lorem ipsum dolor\x0Asit amet,\x0A\x0Aconsectetur\x0Aadipisicing elit", $tmp, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 208, "className" => "thx.TestStrings", "methodName" => "testWrapColumnPreserveNewLines")));
			unset($tmp);
		}
	}
	public function testWrapColumnLong() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_Strings::wrapColumns("aaaaaaaaaa aaaa aaa aa", 6, null, null);
			utest_Assert::equals("aaaaaaaaaa\x0Aaaaa\x0Aaaa aa", $tmp, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 216, "className" => "thx.TestStrings", "methodName" => "testWrapColumnLong")));
			unset($tmp);
		}
	}
	public function testRepeat() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_Strings::repeat("Xy", 3);
			utest_Assert::equals("XyXyXy", $tmp, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 224, "className" => "thx.TestStrings", "methodName" => "testRepeat")));
			unset($tmp);
		}
	}
	public function testUpTo() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_Strings::upTo("abcdef", "x");
			utest_Assert::equals("abcdef", $tmp, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 229, "className" => "thx.TestStrings", "methodName" => "testUpTo")));
			$tmp1 = thx_Strings::upTo("abcdef", "cd");
			utest_Assert::equals("ab", $tmp1, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 230, "className" => "thx.TestStrings", "methodName" => "testUpTo")));
			unset($tmp1,$tmp);
		}
	}
	public function testFrom() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_Strings::from("abcdef", "x");
			utest_Assert::equals("", $tmp, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 235, "className" => "thx.TestStrings", "methodName" => "testFrom")));
			$tmp1 = thx_Strings::from("abcdef", "cd");
			utest_Assert::equals("cdef", $tmp1, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 236, "className" => "thx.TestStrings", "methodName" => "testFrom")));
			unset($tmp1,$tmp);
		}
	}
	public function testAfter() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_Strings::after("abcdef", "x");
			utest_Assert::equals("", $tmp, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 241, "className" => "thx.TestStrings", "methodName" => "testAfter")));
			$tmp1 = thx_Strings::after("abcdef", "cd");
			utest_Assert::equals("ef", $tmp1, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 242, "className" => "thx.TestStrings", "methodName" => "testAfter")));
			unset($tmp1,$tmp);
		}
	}
	public function testStripTags() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_Strings::stripTags("a<br/> <script src=\"aaa\">code;</script> x");
			utest_Assert::equals("a code; x", $tmp, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 247, "className" => "thx.TestStrings", "methodName" => "testStripTags")));
			unset($tmp);
		}
	}
	public function testLtrim() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_Strings::trimCharsLeft("abcde", "x");
			utest_Assert::equals("abcde", $tmp, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 252, "className" => "thx.TestStrings", "methodName" => "testLtrim")));
			$tmp1 = thx_Strings::trimCharsLeft("abcde", "cba");
			utest_Assert::equals("de", $tmp1, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 253, "className" => "thx.TestStrings", "methodName" => "testLtrim")));
			$tmp2 = thx_Strings::trimCharsLeft("abcde", "b");
			utest_Assert::equals("abcde", $tmp2, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 254, "className" => "thx.TestStrings", "methodName" => "testLtrim")));
			$tmp3 = thx_Strings::trimCharsLeft("/", "/");
			utest_Assert::equals("", $tmp3, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 256, "className" => "thx.TestStrings", "methodName" => "testLtrim")));
			unset($tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testRtrim() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_Strings::trimCharsRight("abcde", "x");
			utest_Assert::equals("abcde", $tmp, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 261, "className" => "thx.TestStrings", "methodName" => "testRtrim")));
			$tmp1 = thx_Strings::trimCharsRight("abcde", "ced");
			utest_Assert::equals("ab", $tmp1, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 262, "className" => "thx.TestStrings", "methodName" => "testRtrim")));
			$tmp2 = thx_Strings::trimCharsRight("abcde", "d");
			utest_Assert::equals("abcde", $tmp2, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 263, "className" => "thx.TestStrings", "methodName" => "testRtrim")));
			$tmp3 = thx_Strings::trimCharsRight("/", "/");
			utest_Assert::equals("", $tmp3, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 265, "className" => "thx.TestStrings", "methodName" => "testRtrim")));
			unset($tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testTrim() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			$i = $_g1++;
			$tmp = trim("abcde", "x");
			utest_Assert::equals("abcde", $tmp, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 270, "className" => "thx.TestStrings", "methodName" => "testTrim")));
			$tmp1 = trim("abcde", "abe");
			utest_Assert::equals("cd", $tmp1, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 271, "className" => "thx.TestStrings", "methodName" => "testTrim")));
			$tmp2 = trim("abcde", "bd");
			utest_Assert::equals("abcde", $tmp2, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 272, "className" => "thx.TestStrings", "methodName" => "testTrim")));
			$tmp3 = trim("/", "/");
			utest_Assert::equals("", $tmp3, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 274, "className" => "thx.TestStrings", "methodName" => "testTrim")));
			unset($tmp3,$tmp2,$tmp1,$tmp,$i);
		}
	}
	public function testToArray() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$e = (new _hx_array(array("a", "☺", "b", "☺", "☺", "c", "☺", "☺", "☺")));
			$tmp = thx_Strings::toArray("a☺b☺☺c☺☺☺");
			utest_Assert::same($e, $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 281, "className" => "thx.TestStrings", "methodName" => "testToArray")));
			unset($tmp,$e);
		}
	}
	public function testToLines() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_Strings::$SPLIT_LINES->split("Split\x0Ato\x0Alines");
			utest_Assert::same((new _hx_array(array("Split", "to", "lines"))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 289, "className" => "thx.TestStrings", "methodName" => "testToLines")));
			unset($tmp);
		}
	}
	public function testReverse() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_Strings::reverse("a☺b☺☺c☺☺☺");
			utest_Assert::same("☺☺☺c☺☺b☺a", $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 296, "className" => "thx.TestStrings", "methodName" => "testReverse")));
			unset($tmp);
		}
	}
	public function testOrder() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx__Ord_Ord_Impl_::order((isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")), "companyId", "companyId");
			utest_Assert::equals(thx_OrderingImpl::$EQ, $tmp, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 301, "className" => "thx.TestStrings", "methodName" => "testOrder")));
			$tmp1 = thx__Ord_Ord_Impl_::order((isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")), "companyIc", "companyId");
			utest_Assert::equals(thx_OrderingImpl::$LT, $tmp1, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 302, "className" => "thx.TestStrings", "methodName" => "testOrder")));
			$tmp2 = thx__Ord_Ord_Impl_::order((isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")), "companyId", "companyIc");
			utest_Assert::equals(thx_OrderingImpl::$GT, $tmp2, null, _hx_anonymous(array("fileName" => "TestStrings.hx", "lineNumber" => 303, "className" => "thx.TestStrings", "methodName" => "testOrder")));
			unset($tmp2,$tmp1,$tmp);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.TestStrings'; }
}
function thx_TestStrings_0($a1) {
	{
		return thx_Strings::contains("test", $a1);
	}
}
function thx_TestStrings_1($a11) {
	{
		return thx_Strings::contains("test", $a11);
	}
}
function thx_TestStrings_2($a12) {
	{
		return thx_Strings::contains("test", $a12);
	}
}
function thx_TestStrings_3($a13) {
	{
		return thx_Strings::contains("test", $a13);
	}
}
function thx_TestStrings_4($a14) {
	{
		return thx_Strings::contains("test", $a14);
	}
}
function thx_TestStrings_5($a15) {
	{
		return thx_Strings::contains("test", $a15);
	}
}
function thx_TestStrings_6($a16) {
	{
		return thx_Strings::contains("test", $a16);
	}
}
function thx_TestStrings_7($a17) {
	{
		return thx_Strings::contains("test", $a17);
	}
}
function thx_TestStrings_8($a18) {
	{
		return thx_Strings::contains("test", $a18);
	}
}
function thx_TestStrings_9($a19) {
	{
		return thx_Strings::contains("one two three", $a19);
	}
}
function thx_TestStrings_10($a110) {
	{
		return thx_Strings::contains("one two three", $a110);
	}
}
function thx_TestStrings_11($a111) {
	{
		return thx_Strings::contains("one two three", $a111);
	}
}
