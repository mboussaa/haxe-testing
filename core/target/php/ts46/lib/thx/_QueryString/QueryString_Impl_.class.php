<?php

// Generated by Haxe 3.3.0
class thx__QueryString_QueryString_Impl_ {
	public function __construct(){}
	static $separator = "&";
	static $assignment = "=";
	static function encodeURIComponent($s) { return call_user_func_array(self::$encodeURIComponent, array($s)); }
	public static $encodeURIComponent = null;
	static function decodeURIComponent($s) { return call_user_func_array(self::$decodeURIComponent, array($s)); }
	public static $decodeURIComponent = null;
	static function hempty() {
		return new haxe_ds_StringMap();
	}
	static function parseWithSymbols($s, $separator, $assignment, $decodeURIComponent = null) {
		if(null === $s) {
			return new haxe_ds_StringMap();
		} else {
			$tmp = null === $decodeURIComponent;
			if($tmp) {
				$decodeURIComponent = (isset(thx__QueryString_QueryString_Impl_::$decodeURIComponent) ? thx__QueryString_QueryString_Impl_::$decodeURIComponent: array("thx__QueryString_QueryString_Impl_", "decodeURIComponent"));
			}
			$tmp1 = null;
			$tmp2 = !StringTools::startsWith($s, "?");
			if($tmp2) {
				$tmp1 = StringTools::startsWith($s, "#");
			} else {
				$tmp1 = true;
			}
			if($tmp1) {
				$s = _hx_substring($s, 1, null);
			}
			$s = ltrim($s);
			$tmp3 = _hx_explode($separator, $s);
			return thx_Arrays::reduce($tmp3, array(new _hx_lambda(array(&$assignment, &$decodeURIComponent), "thx__QueryString_QueryString_Impl__0"), 'execute'), new haxe_ds_StringMap());
		}
	}
	static function parse($s) {
		return thx__QueryString_QueryString_Impl_::parseWithSymbols($s, thx__QueryString_QueryString_Impl_::$separator, thx__QueryString_QueryString_Impl_::$assignment, (isset(thx__QueryString_QueryString_Impl_::$decodeURIComponent) ? thx__QueryString_QueryString_Impl_::$decodeURIComponent: array("thx__QueryString_QueryString_Impl_", "decodeURIComponent")));
	}
	static function fromObject($o) {
		$qs = new haxe_ds_StringMap();
		$tmp = !Reflect::isObject($o);
		if($tmp) {
			$tmp1 = Std::string($o);
			throw new HException("unable to convert " . _hx_string_or_null($tmp1) . " to QueryString");
		}
		thx_Objects::tuples($o)->map(array(new _hx_lambda(array(&$qs), "thx__QueryString_QueryString_Impl__1"), 'execute'));
		return $qs;
	}
	static function toObject($this1) {
		$tmp = $this1->keys();
		return thx_Iterators::reduce($tmp, array(new _hx_lambda(array(&$this1), "thx__QueryString_QueryString_Impl__2"), 'execute'), _hx_anonymous(array()));
	}
	static function isEmpty($this1) {
		return !$this1->iterator()->hasNext();
	}
	static function isEmptyOrMono($this1) {
		$tmp = $this1->keys();
		$arr = thx_Iterators::toArray($tmp);
		if($arr->length === 0) {
			return true;
		}
		if($arr->length !== 1) {
			return false;
		}
		return $this1->get($arr[0])->length === 0;
	}
	static function exist($this1, $name) {
		return $this1->exists($name);
	}
	static function remove($this1, $name) {
		return $this1->remove($name);
	}
	static function removeValue($this1, $name, $value) {
		$tmp = !$this1->exists($name);
		if($tmp) {
			return false;
		}
		return $this1->get($name)->remove($value);
	}
	static function get($this1, $name) {
		return $this1->get($name);
	}
	static function set($this1, $name, $value) {
		$this1->set($name, (new _hx_array(array($value))));
		return $this1;
	}
	static function add($this1, $name, $value) {
		$arr = $this1->get($name);
		if(null === $arr) {
			if($value === null) {
				$arr = (new _hx_array(array()));
			} else {
				$arr = (new _hx_array(array($value)));
			}
			$this1->set($name, $arr);
		} else {
			if(null !== $value) {
				$arr->push($value);
			}
		}
		return $this1;
	}
	static function hclone($this1) {
		if(null === $this1) {
			return null;
		}
		$map = new haxe_ds_StringMap();
		{
			$tmp = $this1->keys();
			while(true) {
				$tmp1 = !$tmp->hasNext();
				if($tmp1) {
					break;
				}
				$key = $tmp->next();
				$value = $this1->get($key)->copy();
				$map->set($key, $value);
				unset($value,$tmp1,$key);
			}
		}
		return $map;
	}
	static function setMany($this1, $name, $values) {
		$this1->set($name, $values);
		return $this1;
	}
	static function toStringWithSymbols($this1, $separator, $assignment, $encodeURIComponent = null) {
		if(null === $this1) {
			return null;
		}
		$tmp = null === $encodeURIComponent;
		if($tmp) {
			$encodeURIComponent = (isset(thx__QueryString_QueryString_Impl_::$encodeURIComponent) ? thx__QueryString_QueryString_Impl_::$encodeURIComponent: array("thx__QueryString_QueryString_Impl_", "encodeURIComponent"));
		}
		$tmp1 = $this1->keys();
		$tmp2 = thx_Iterators::map($tmp1, array(new _hx_lambda(array(&$assignment, &$encodeURIComponent, &$this1), "thx__QueryString_QueryString_Impl__3"), 'execute'));
		return thx_Arrays::flatten($tmp2)->join($separator);
	}
	static function equals($this1, $other) {
		$tuples = thx_Maps::tuples($other);
		{
			$tmp = $this1->keys();
			while(true) {
				$tmp1 = !$tmp->hasNext();
				if($tmp1) {
					break;
				}
				$key = $tmp->next();
				$t = thx_Arrays::find($tuples, array(new _hx_lambda(array(&$key), "thx__QueryString_QueryString_Impl__4"), 'execute'));
				if(null === $t) {
					return false;
				}
				$tmp2 = !thx_Arrays::equals($this1->get($key), $t->_1, null);
				if($tmp2) {
					return false;
				}
				$tuples->remove($t);
				unset($tmp2,$tmp1,$t,$key);
			}
		}
		return $tuples->length === 0;
	}
	static function toString($this1) {
		return thx__QueryString_QueryString_Impl_::toStringWithSymbols($this1, thx__QueryString_QueryString_Impl_::$separator, thx__QueryString_QueryString_Impl_::$assignment, (isset(thx__QueryString_QueryString_Impl_::$encodeURIComponent) ? thx__QueryString_QueryString_Impl_::$encodeURIComponent: array("thx__QueryString_QueryString_Impl_", "encodeURIComponent")));
	}
	function __toString() { return 'thx._QueryString.QueryString_Impl_'; }
}
thx__QueryString_QueryString_Impl_::$encodeURIComponent = array(new _hx_lambda(array(), "thx__QueryString_QueryString_Impl__5"), 'execute');
thx__QueryString_QueryString_Impl_::$decodeURIComponent = array(new _hx_lambda(array(), "thx__QueryString_QueryString_Impl__6"), 'execute');
function thx__QueryString_QueryString_Impl__0(&$assignment, &$decodeURIComponent, $qs, $v) {
	{
		$parts = _hx_explode($assignment, $v);
		if($parts[0] !== "") {
			$tmp4 = call_user_func_array($decodeURIComponent, array($parts[0]));
			$tmp5 = null;
			if(null === $parts[1]) {
				$tmp5 = null;
			} else {
				$tmp5 = call_user_func_array($decodeURIComponent, array($parts[1]));
			}
			thx__QueryString_QueryString_Impl_::add($qs, $tmp4, $tmp5);
		}
		return $qs;
	}
}
function thx__QueryString_QueryString_Impl__1(&$qs, $t) {
	{
		$tmp2 = Std::is($t->_1, _hx_qtype("Array"));
		if($tmp2) {
			$tmp3 = $t->_1->map(array(new _hx_lambda(array(), "thx__QueryString_QueryString_Impl__7"), 'execute'));
			thx__QueryString_QueryString_Impl_::setMany($qs, $t->_0, $tmp3);
		} else {
			$tmp4 = Std::string($t->_1);
			thx__QueryString_QueryString_Impl_::set($qs, $t->_0, "" . _hx_string_or_null($tmp4));
		}
	}
}
function thx__QueryString_QueryString_Impl__2(&$this1, $o, $key) {
	{
		$v = $this1->get($key);
		$tmp1 = $v->length === 0;
		if($tmp1) {
			$o->{$key} = null;
		} else {
			$tmp2 = $v->length === 1;
			if($tmp2) {
				$o->{$key} = $v[0];
			} else {
				$o->{$key} = $v;
			}
		}
		return $o;
	}
}
function thx__QueryString_QueryString_Impl__3(&$assignment, &$encodeURIComponent, &$this1, $k) {
	{
		$vs = $this1->get($k);
		$ek = call_user_func_array($encodeURIComponent, array($k));
		$tmp3 = $vs->length === 0;
		if($tmp3) {
			return (new _hx_array(array($ek)));
		} else {
			return $vs->map(array(new _hx_lambda(array(&$assignment, &$ek, &$encodeURIComponent), "thx__QueryString_QueryString_Impl__8"), 'execute'));
		}
	}
}
function thx__QueryString_QueryString_Impl__4(&$key, $item) {
	{
		return $item->_0 === $key;
	}
}
function thx__QueryString_QueryString_Impl__5($s) {
	{
		$s1 = rawurlencode($s);
		return str_replace("%20", "+", $s1);
	}
}
function thx__QueryString_QueryString_Impl__6($s) {
	{
		$s1 = urldecode($s);
		return str_replace("+", " ", $s1);
	}
}
function thx__QueryString_QueryString_Impl__7($_) {
	{
		return "" . _hx_string_or_null($_);
	}
}
function thx__QueryString_QueryString_Impl__8(&$assignment, &$ek, &$encodeURIComponent, $_) {
	{
		$tmp4 = "" . _hx_string_or_null($ek) . _hx_string_or_null($assignment);
		$tmp5 = call_user_func_array($encodeURIComponent, array($_));
		return _hx_string_or_null($tmp4) . _hx_string_or_null($tmp5);
	}
}
