<?php

// Generated by Haxe 3.3.0
class thx_TestPath {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testIsRelativeAndIsAbsolute() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$rel = thx__Path_Path_Impl_::fromString("a/b");
			$abs = thx__Path_Path_Impl_::fromString("/a/b");
			utest_Assert::isTrue($rel[1] === "", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 17, "className" => "thx.TestPath", "methodName" => "testIsRelativeAndIsAbsolute")));
			utest_Assert::isFalse($rel[1] !== "", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 18, "className" => "thx.TestPath", "methodName" => "testIsRelativeAndIsAbsolute")));
			utest_Assert::isTrue($abs[1] !== "", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 19, "className" => "thx.TestPath", "methodName" => "testIsRelativeAndIsAbsolute")));
			utest_Assert::isFalse($abs[1] === "", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 20, "className" => "thx.TestPath", "methodName" => "testIsRelativeAndIsAbsolute")));
			unset($rel,$abs);
		}
	}
	public function testPathTo() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$path1 = thx__Path_Path_Impl_::fromString("/a/b/c");
			$path2 = thx__Path_Path_Impl_::fromString("/a/d");
			$path3 = thx__Path_Path_Impl_::fromString("/x/y/z");
			$path4 = thx__Path_Path_Impl_::fromString("a/b/c");
			$path5 = thx__Path_Path_Impl_::fromString("x/y/z");
			$tmp = thx__Path_Path_Impl_::pathTo($path1, $path2);
			$tmp1 = thx__Path_Path_Impl_::toString($tmp);
			utest_Assert::equals("../../d", $tmp1, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 30, "className" => "thx.TestPath", "methodName" => "testPathTo")));
			$tmp2 = thx__Path_Path_Impl_::pathTo($path1, $path3);
			$tmp3 = thx__Path_Path_Impl_::toString($tmp2);
			utest_Assert::equals("../../../x/y/z", $tmp3, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 31, "className" => "thx.TestPath", "methodName" => "testPathTo")));
			$tmp4 = thx__Path_Path_Impl_::pathTo($path2, $path1);
			$tmp5 = thx__Path_Path_Impl_::toString($tmp4);
			utest_Assert::equals("../b/c", $tmp5, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 32, "className" => "thx.TestPath", "methodName" => "testPathTo")));
			$tmp6 = thx__Path_Path_Impl_::pathTo($path1, $path4);
			$tmp7 = thx__Path_Path_Impl_::toString($tmp6);
			utest_Assert::equals("/a/b/c/a/b/c", $tmp7, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 34, "className" => "thx.TestPath", "methodName" => "testPathTo")));
			$tmp8 = thx__Path_Path_Impl_::pathTo($path5, $path2);
			$tmp9 = thx__Path_Path_Impl_::toString($tmp8);
			utest_Assert::equals("/a/d", $tmp9, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 35, "className" => "thx.TestPath", "methodName" => "testPathTo")));
			$tmp10 = thx__Path_Path_Impl_::pathTo($path4, $path5);
			$tmp11 = thx__Path_Path_Impl_::toString($tmp10);
			utest_Assert::equals("a/b/c/x/y/z", $tmp11, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 36, "className" => "thx.TestPath", "methodName" => "testPathTo")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp11,$tmp10,$tmp1,$tmp,$path5,$path4,$path3,$path2,$path1);
		}
	}
	public function testUp() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx__Path_Path_Impl_::up(thx__Path_Path_Impl_::fromString("/a/b/c/"), null);
			$tmp1 = thx__Path_Path_Impl_::toString($tmp);
			utest_Assert::equals("/a/b", $tmp1, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 41, "className" => "thx.TestPath", "methodName" => "testUp")));
			$tmp2 = thx__Path_Path_Impl_::up(thx__Path_Path_Impl_::fromString("/a"), 2);
			$tmp3 = thx__Path_Path_Impl_::toString($tmp2);
			utest_Assert::equals("/", $tmp3, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 42, "className" => "thx.TestPath", "methodName" => "testUp")));
			unset($tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testDir() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx__Path_Path_Impl_::dir(thx__Path_Path_Impl_::fromString("/a/b/c"));
			utest_Assert::equals("/a/b", $tmp, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 47, "className" => "thx.TestPath", "methodName" => "testDir")));
			$tmp1 = thx__Path_Path_Impl_::dir(thx__Path_Path_Impl_::fromString("a/b/c"));
			utest_Assert::equals("a/b", $tmp1, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 48, "className" => "thx.TestPath", "methodName" => "testDir")));
			$tmp2 = thx__Path_Path_Impl_::dir(thx__Path_Path_Impl_::fromString("a"));
			utest_Assert::equals(".", $tmp2, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 49, "className" => "thx.TestPath", "methodName" => "testDir")));
			$tmp3 = thx__Path_Path_Impl_::dir(thx__Path_Path_Impl_::fromString(".."));
			utest_Assert::equals(".", $tmp3, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 50, "className" => "thx.TestPath", "methodName" => "testDir")));
			unset($tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testBase() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$path = thx__Path_Path_Impl_::fromString("/a/b.c");
			$tmp = thx__Path_Path_Impl_::base($path, null);
			utest_Assert::equals("b.c", $tmp, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 56, "className" => "thx.TestPath", "methodName" => "testBase")));
			$tmp1 = thx__Path_Path_Impl_::base($path, ".c");
			utest_Assert::equals("b", $tmp1, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 57, "className" => "thx.TestPath", "methodName" => "testBase")));
			$tmp2 = thx__Path_Path_Impl_::base($path, "c");
			utest_Assert::equals("b.", $tmp2, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 58, "className" => "thx.TestPath", "methodName" => "testBase")));
			$tmp3 = thx__Path_Path_Impl_::base($path, ".d");
			utest_Assert::equals("b.c", $tmp3, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 59, "className" => "thx.TestPath", "methodName" => "testBase")));
			unset($tmp3,$tmp2,$tmp1,$tmp,$path);
		}
	}
	public function testExt() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			thx__Path_Path_Impl_::fromString("");
			$tmp = thx__Path_Path_Impl_::ext(thx__Path_Path_Impl_::fromString("/a/b.c"));
			utest_Assert::equals("c", $tmp, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 65, "className" => "thx.TestPath", "methodName" => "testExt")));
			$tmp1 = thx__Path_Path_Impl_::ext(thx__Path_Path_Impl_::fromString("/a/b/c"));
			utest_Assert::equals("", $tmp1, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 66, "className" => "thx.TestPath", "methodName" => "testExt")));
			unset($tmp1,$tmp);
		}
	}
	public function testSep() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$path = thx__Path_Path_Impl_::fromString("/path/to/file.png");
			$win = thx__Path_Path_Impl_::toWin32($path, "C:");
			utest_Assert::equals("/", $path[0], null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 73, "className" => "thx.TestPath", "methodName" => "testSep")));
			utest_Assert::equals("\\", $win[0], null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 74, "className" => "thx.TestPath", "methodName" => "testSep")));
			utest_Assert::isTrue($path[0] === "/", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 75, "className" => "thx.TestPath", "methodName" => "testSep")));
			utest_Assert::isFalse($path[0] === "\\", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 76, "className" => "thx.TestPath", "methodName" => "testSep")));
			utest_Assert::isTrue($win[0] === "\\", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 77, "className" => "thx.TestPath", "methodName" => "testSep")));
			utest_Assert::isFalse($win[0] === "/", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 78, "className" => "thx.TestPath", "methodName" => "testSep")));
			unset($win,$path);
		}
	}
	public function testJoin() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx__Path_Path_Impl_::fromString("/a/x");
			$tmp1 = thx__Path_Path_Impl_::join($tmp, thx__Path_Path_Impl_::fromString("../b/c"));
			$tmp2 = thx__Path_Path_Impl_::toString($tmp1);
			utest_Assert::equals("/a/b/c", $tmp2, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 83, "className" => "thx.TestPath", "methodName" => "testJoin")));
			$tmp3 = thx__Path_Path_Impl_::fromString("../x");
			$tmp4 = thx__Path_Path_Impl_::join($tmp3, thx__Path_Path_Impl_::fromString("../b/c"));
			$tmp5 = thx__Path_Path_Impl_::toString($tmp4);
			utest_Assert::equals("../b/c", $tmp5, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 84, "className" => "thx.TestPath", "methodName" => "testJoin")));
			$tmp6 = thx__Path_Path_Impl_::fromString("/a/x");
			$tmp7 = thx__Path_Path_Impl_::join($tmp6, thx__Path_Path_Impl_::fromString("/b/c"));
			$tmp8 = thx__Path_Path_Impl_::toString($tmp7);
			utest_Assert::equals("/b/c", $tmp8, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 85, "className" => "thx.TestPath", "methodName" => "testJoin")));
			unset($tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testJoinString() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx__Path_Path_Impl_::fromString("/a/b");
			$tmp1 = thx__Path_Path_Impl_::join($tmp, thx__Path_Path_Impl_::fromString("c"));
			$tmp2 = thx__Path_Path_Impl_::toString($tmp1);
			utest_Assert::equals("/a/b/c", $tmp2, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 90, "className" => "thx.TestPath", "methodName" => "testJoinString")));
			$tmp3 = thx__Path_Path_Impl_::fromString("../x");
			$tmp4 = thx__Path_Path_Impl_::join($tmp3, thx__Path_Path_Impl_::fromString("../d"));
			$tmp5 = thx__Path_Path_Impl_::toString($tmp4);
			utest_Assert::equals("../d", $tmp5, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 91, "className" => "thx.TestPath", "methodName" => "testJoinString")));
			unset($tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testToWin32ToNix() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$path = thx__Path_Path_Impl_::fromString("/path/to/file.png");
			$win = thx__Path_Path_Impl_::toWin32($path, null);
			$tmp = thx__Path_Path_Impl_::toString($win);
			utest_Assert::equals("C:\\path\\to\\file.png", $tmp, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 98, "className" => "thx.TestPath", "methodName" => "testToWin32ToNix")));
			$tmp1 = thx__Path_Path_Impl_::toNix($win);
			$tmp2 = thx__Path_Path_Impl_::toString($tmp1);
			utest_Assert::equals("/path/to/file.png", $tmp2, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 99, "className" => "thx.TestPath", "methodName" => "testToWin32ToNix")));
			$path = thx__Path_Path_Impl_::fromString("path/to/file.png");
			$win = thx__Path_Path_Impl_::toWin32($path, null);
			$tmp3 = thx__Path_Path_Impl_::toString($win);
			utest_Assert::equals("path\\to\\file.png", $tmp3, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 103, "className" => "thx.TestPath", "methodName" => "testToWin32ToNix")));
			$tmp4 = thx__Path_Path_Impl_::toNix($win);
			$tmp5 = thx__Path_Path_Impl_::toString($tmp4);
			utest_Assert::equals("path/to/file.png", $tmp5, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 104, "className" => "thx.TestPath", "methodName" => "testToWin32ToNix")));
			unset($win,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$path);
		}
	}
	public function testNormalization() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx__Path_Path_Impl_::toString(thx__Path_Path_Impl_::fromString("a/.././b/../c/."));
			utest_Assert::equals("c", $tmp, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 109, "className" => "thx.TestPath", "methodName" => "testNormalization")));
			$tmp1 = thx__Path_Path_Impl_::toString(thx__Path_Path_Impl_::fromString("a/./b/../c/."));
			utest_Assert::equals("a/c", $tmp1, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 110, "className" => "thx.TestPath", "methodName" => "testNormalization")));
			$tmp2 = thx__Path_Path_Impl_::toString(thx__Path_Path_Impl_::fromString("/a/.././b/./c/."));
			utest_Assert::equals("/b/c", $tmp2, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 111, "className" => "thx.TestPath", "methodName" => "testNormalization")));
			$tmp3 = thx__Path_Path_Impl_::toString(thx__Path_Path_Impl_::fromString("a/../../../b/../c/."));
			utest_Assert::equals("../../c", $tmp3, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 112, "className" => "thx.TestPath", "methodName" => "testNormalization")));
			unset($tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testToString() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx__Path_Path_Impl_::toString(thx__Path_Path_Impl_::fromString("."));
			utest_Assert::equals(".", $tmp, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 117, "className" => "thx.TestPath", "methodName" => "testToString")));
			$tmp1 = thx__Path_Path_Impl_::toString(thx__Path_Path_Impl_::fromString(".."));
			utest_Assert::equals("..", $tmp1, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 118, "className" => "thx.TestPath", "methodName" => "testToString")));
			$tmp2 = thx__Path_Path_Impl_::toString(thx__Path_Path_Impl_::fromString("../"));
			utest_Assert::equals("..", $tmp2, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 119, "className" => "thx.TestPath", "methodName" => "testToString")));
			$tmp3 = thx__Path_Path_Impl_::toString(thx__Path_Path_Impl_::fromString("/../"));
			utest_Assert::equals("/", $tmp3, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 120, "className" => "thx.TestPath", "methodName" => "testToString")));
			$tmp4 = thx__Path_Path_Impl_::toString(thx__Path_Path_Impl_::fromString("/"));
			utest_Assert::equals("/", $tmp4, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 121, "className" => "thx.TestPath", "methodName" => "testToString")));
			$tmp5 = thx__Path_Path_Impl_::toString(thx__Path_Path_Impl_::fromString("/a///a"));
			utest_Assert::equals("/a/a", $tmp5, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 122, "className" => "thx.TestPath", "methodName" => "testToString")));
			$tmp6 = thx__Path_Path_Impl_::toString(thx__Path_Path_Impl_::fromString("/a/a/"));
			utest_Assert::equals("/a/a", $tmp6, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 123, "className" => "thx.TestPath", "methodName" => "testToString")));
			$tmp7 = thx__Path_Path_Impl_::toString(thx__Path_Path_Impl_::fromString("a/.."));
			utest_Assert::equals(".", $tmp7, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 124, "className" => "thx.TestPath", "methodName" => "testToString")));
			$tmp8 = thx__Path_Path_Impl_::toString(thx__Path_Path_Impl_::fromString("a"));
			utest_Assert::equals("a", $tmp8, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 125, "className" => "thx.TestPath", "methodName" => "testToString")));
			unset($tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testNormalize() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$p = (new _hx_array(array("/", "/", "a/*>b")));
			$tmp = thx__Path_Path_Impl_::isValid($p);
			utest_Assert::isFalse($tmp, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 131, "className" => "thx.TestPath", "methodName" => "testNormalize")));
			$p = thx__Path_Path_Impl_::normalize($p);
			$tmp1 = thx__Path_Path_Impl_::isValid($p);
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 133, "className" => "thx.TestPath", "methodName" => "testNormalize")));
			$tmp2 = thx__Path_Path_Impl_::toString($p);
			utest_Assert::equals("/a_*>b", $tmp2, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 134, "className" => "thx.TestPath", "methodName" => "testNormalize")));
			$p = thx__Path_Path_Impl_::toWin32($p, null);
			$tmp3 = thx__Path_Path_Impl_::isValid($p);
			utest_Assert::isFalse($tmp3, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 136, "className" => "thx.TestPath", "methodName" => "testNormalize")));
			$p = thx__Path_Path_Impl_::normalize($p);
			$tmp4 = thx__Path_Path_Impl_::isValid($p);
			utest_Assert::isTrue($tmp4, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 138, "className" => "thx.TestPath", "methodName" => "testNormalize")));
			$tmp5 = thx__Path_Path_Impl_::toString($p);
			utest_Assert::equals("C:\\a___b", $tmp5, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 139, "className" => "thx.TestPath", "methodName" => "testNormalize")));
			unset($tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$p);
		}
	}
	public function testRoot() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$root = thx__Path_Path_Impl_::fromString("C:\\");
			utest_Assert::isFalse($root[0] === "/", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 145, "className" => "thx.TestPath", "methodName" => "testRoot")));
			utest_Assert::isTrue($root[0] === "\\", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 146, "className" => "thx.TestPath", "methodName" => "testRoot")));
			utest_Assert::isTrue($root[1] !== "", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 147, "className" => "thx.TestPath", "methodName" => "testRoot")));
			utest_Assert::isFalse($root[1] === "", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 148, "className" => "thx.TestPath", "methodName" => "testRoot")));
			$tmp = thx__Path_Path_Impl_::isRoot($root);
			utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 149, "className" => "thx.TestPath", "methodName" => "testRoot")));
			$tmp1 = thx__Path_Path_Impl_::toString($root);
			utest_Assert::equals("C:\\", $tmp1, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 150, "className" => "thx.TestPath", "methodName" => "testRoot")));
			$path = $root->slice(2, null);
			$tmp2 = $root[0];
			$tmp3 = thx__Path_Path_Impl_::resolve($path, false);
			$parts = _hx_deref((new _hx_array(array($tmp2, ""))))->concat($tmp3);
			$tmp4 = thx__Path_Path_Impl_::toString($parts);
			utest_Assert::equals(".", $tmp4, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 151, "className" => "thx.TestPath", "methodName" => "testRoot")));
			$root = thx__Path_Path_Impl_::fromString("/");
			utest_Assert::isTrue($root[0] === "/", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 154, "className" => "thx.TestPath", "methodName" => "testRoot")));
			utest_Assert::isFalse($root[0] === "\\", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 155, "className" => "thx.TestPath", "methodName" => "testRoot")));
			utest_Assert::isTrue($root[1] !== "", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 156, "className" => "thx.TestPath", "methodName" => "testRoot")));
			utest_Assert::isFalse($root[1] === "", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 157, "className" => "thx.TestPath", "methodName" => "testRoot")));
			$tmp5 = thx__Path_Path_Impl_::isRoot($root);
			utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 158, "className" => "thx.TestPath", "methodName" => "testRoot")));
			$tmp6 = thx__Path_Path_Impl_::toString($root);
			utest_Assert::equals("/", $tmp6, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 159, "className" => "thx.TestPath", "methodName" => "testRoot")));
			$path1 = $root->slice(2, null);
			$tmp7 = $root[0];
			$tmp8 = thx__Path_Path_Impl_::resolve($path1, false);
			$parts1 = _hx_deref((new _hx_array(array($tmp7, ""))))->concat($tmp8);
			$tmp9 = thx__Path_Path_Impl_::toString($parts1);
			utest_Assert::equals(".", $tmp9, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 160, "className" => "thx.TestPath", "methodName" => "testRoot")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$root,$path1,$path,$parts1,$parts);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.TestPath'; }
}
