<?php

// Generated by Haxe 3.3.0
class thx__Timestamp_Timestamp_Impl_ {
	public function __construct(){}
	static function create($year, $month = null, $day = null, $hour = null, $minute = null, $second = null) {
		return thx_Dates::create($year, $month, $day, $hour, $minute, $second)->getTime();
	}
	static function now() {
		$d = Date::now();
		return $d->getTime();
	}
	static function fromDate($d) {
		return $d->getTime();
	}
	static function fromString($s) {
		return Date::fromString($s)->getTime();
	}
	static function toDate($this1) {
		return Date::fromTime($this1);
	}
	static function toString($this1) {
		return Date::fromTime($this1)->toString();
	}
	static function snapNext($this1, $period) {
		$tmp = $period->index;
		switch($tmp) {
		case 0:{
			$tmp1 = Math::fceil($this1 / 1000.0);
			return $tmp1 * 1000.0;
		}break;
		case 1:{
			$tmp2 = Math::fceil($this1 / 60000.0);
			return $tmp2 * 60000.0;
		}break;
		case 2:{
			$tmp3 = Math::fceil($this1 / 3600000.0);
			return $tmp3 * 3600000.0;
		}break;
		case 3:{
			$d = Date::fromTime($this1);
			$year = $d->getFullYear();
			$month = $d->getMonth();
			$tmp4 = $d->getDate();
			return thx_Dates::create($year, $month, $tmp4 + 1, 0, 0, 0)->getTime();
		}break;
		case 4:{
			$d1 = Date::fromTime($this1);
			$wd = $d1->getDay();
			$year1 = $d1->getFullYear();
			$month1 = $d1->getMonth();
			$tmp5 = $d1->getDate();
			return thx_Dates::create($year1, $month1, $tmp5 + 7 - $wd, 0, 0, 0)->getTime();
		}break;
		case 5:{
			$d2 = Date::fromTime($this1);
			$year2 = $d2->getFullYear();
			$tmp6 = $d2->getMonth();
			return thx_Dates::create($year2, $tmp6 + 1, 1, 0, 0, 0)->getTime();
		}break;
		case 6:{
			$d3 = Date::fromTime($this1);
			$tmp7 = $d3->getFullYear();
			return thx_Dates::create($tmp7 + 1, 0, 1, 0, 0, 0)->getTime();
		}break;
		}
	}
	static function snapPrev($this1, $period) {
		$tmp = $period->index;
		switch($tmp) {
		case 0:{
			$tmp1 = Math::ffloor($this1 / 1000.0);
			return $tmp1 * 1000.0;
		}break;
		case 1:{
			$tmp2 = Math::ffloor($this1 / 60000.0);
			return $tmp2 * 60000.0;
		}break;
		case 2:{
			$tmp3 = Math::ffloor($this1 / 3600000.0);
			return $tmp3 * 3600000.0;
		}break;
		case 3:{
			$d = Date::fromTime($this1);
			$year = $d->getFullYear();
			$month = $d->getMonth();
			$day = $d->getDate();
			return thx_Dates::create($year, $month, $day, 0, 0, 0)->getTime();
		}break;
		case 4:{
			$d1 = Date::fromTime($this1);
			$wd = $d1->getDay();
			$year1 = $d1->getFullYear();
			$month1 = $d1->getMonth();
			$tmp4 = $d1->getDate();
			return thx_Dates::create($year1, $month1, $tmp4 - $wd, 0, 0, 0)->getTime();
		}break;
		case 5:{
			$d2 = Date::fromTime($this1);
			$year2 = $d2->getFullYear();
			$month2 = $d2->getMonth();
			return thx_Dates::create($year2, $month2, 1, 0, 0, 0)->getTime();
		}break;
		case 6:{
			$d3 = Date::fromTime($this1);
			$year3 = $d3->getFullYear();
			return thx_Dates::create($year3, 0, 1, 0, 0, 0)->getTime();
		}break;
		}
	}
	static function snapTo($this1, $period) {
		$tmp = $period->index;
		switch($tmp) {
		case 0:{
			$tmp1 = Math::fround($this1 / 1000.0);
			return $tmp1 * 1000.0;
		}break;
		case 1:{
			$tmp2 = Math::fround($this1 / 60000.0);
			return $tmp2 * 60000.0;
		}break;
		case 2:{
			$tmp3 = Math::fround($this1 / 3600000.0);
			return $tmp3 * 3600000.0;
		}break;
		case 3:{
			$d = Date::fromTime($this1);
			$mod = null;
			$tmp4 = $d->getHours();
			if($tmp4 >= 12) {
				$mod = 1;
			} else {
				$mod = 0;
			}
			$year = $d->getFullYear();
			$month = $d->getMonth();
			$tmp5 = $d->getDate();
			return thx_Dates::create($year, $month, $tmp5 + $mod, 0, 0, 0)->getTime();
		}break;
		case 4:{
			$d1 = Date::fromTime($this1);
			$wd = $d1->getDay();
			$mod1 = null;
			if($wd < 3) {
				$mod1 = -$wd;
			} else {
				if($wd > 3) {
					$mod1 = 7 - $wd;
				} else {
					$tmp6 = $d1->getHours();
					if($tmp6 < 12) {
						$mod1 = -$wd;
					} else {
						$mod1 = 7 - $wd;
					}
				}
			}
			$year1 = $d1->getFullYear();
			$month1 = $d1->getMonth();
			$tmp7 = $d1->getDate();
			return thx_Dates::create($year1, $month1, $tmp7 + $mod1, 0, 0, 0)->getTime();
		}break;
		case 5:{
			$d2 = Date::fromTime($this1);
			$mod2 = null;
			$tmp8 = $d2->getDate();
			$tmp9 = DateTools::getMonthDays($d2);
			$tmp10 = Math::round($tmp9 / 2);
			if($tmp8 > $tmp10) {
				$mod2 = 1;
			} else {
				$mod2 = 0;
			}
			$year2 = $d2->getFullYear();
			$tmp11 = $d2->getMonth();
			return thx_Dates::create($year2, $tmp11 + $mod2, 1, 0, 0, 0)->getTime();
		}break;
		case 6:{
			$d3 = Date::fromTime($this1);
			$mod3 = null;
			$tmp12 = $d3->getFullYear();
			$tmp13 = _hx_deref(new Date($tmp12, 6, 2, 0, 0, 0))->getTime();
			if($this1 > $tmp13) {
				$mod3 = 1;
			} else {
				$mod3 = 0;
			}
			$tmp14 = $d3->getFullYear();
			return thx_Dates::create($tmp14 + $mod3, 0, 1, 0, 0, 0)->getTime();
		}break;
		}
	}
	static function r($t, $v) {
		$tmp = Math::fround($t / $v);
		return $tmp * $v;
	}
	static function f($t, $v) {
		$tmp = Math::ffloor($t / $v);
		return $tmp * $v;
	}
	static function c($t, $v) {
		$tmp = Math::fceil($t / $v);
		return $tmp * $v;
	}
	function __toString() { return 'thx._Timestamp.Timestamp_Impl_'; }
}
