<?php

// Generated by Haxe 3.3.0
class thx_TestEnums {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testIssue20151201() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$e = thx_Enum20151201::Test(_hx_anonymous(array("oldId" => "1", "newId" => "2")));
			$s = thx_Enums::string($e);
			utest_Assert::stringContains("oldId : \"1\"", $s, null, _hx_anonymous(array("fileName" => "TestEnums.hx", "lineNumber" => 20, "className" => "thx.TestEnums", "methodName" => "testIssue20151201")));
			utest_Assert::stringContains("newId : \"2\"", $s, null, _hx_anonymous(array("fileName" => "TestEnums.hx", "lineNumber" => 21, "className" => "thx.TestEnums", "methodName" => "testIssue20151201")));
			utest_Assert::stringContains(", ", $s, null, _hx_anonymous(array("fileName" => "TestEnums.hx", "lineNumber" => 22, "className" => "thx.TestEnums", "methodName" => "testIssue20151201")));
			$tmp = StringTools::startsWith($s, "Test({");
			utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestEnums.hx", "lineNumber" => 23, "className" => "thx.TestEnums", "methodName" => "testIssue20151201")));
			$tmp1 = StringTools::endsWith($s, "})");
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestEnums.hx", "lineNumber" => 24, "className" => "thx.TestEnums", "methodName" => "testIssue20151201")));
			unset($tmp1,$tmp,$s,$e);
		}
	}
	public function testCompare() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx__TestEnums_Sample::B(1);
			$tmp1 = thx__TestEnums_Sample::B(2);
			$tmp2 = (new _hx_array(array(thx__TestEnums_Sample::$A, $tmp, $tmp1)));
			$tmp3 = thx__TestEnums_Sample::B(2);
			$tmp4 = thx__TestEnums_Sample::B(1);
			$tmp5 = thx_Arrays::order((new _hx_array(array($tmp3, thx__TestEnums_Sample::$A, $tmp4))), (isset(thx_Enums::$compare) ? thx_Enums::$compare: array("thx_Enums", "compare")));
			utest_Assert::same($tmp2, $tmp5, null, null, null, _hx_anonymous(array("fileName" => "TestEnums.hx", "lineNumber" => 29, "className" => "thx.TestEnums", "methodName" => "testCompare")));
			unset($tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testString() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_Enums::string(thx__TestEnums_Sample::$A);
			utest_Assert::equals("A", $tmp, null, _hx_anonymous(array("fileName" => "TestEnums.hx", "lineNumber" => 39, "className" => "thx.TestEnums", "methodName" => "testString")));
			$tmp1 = thx__TestEnums_Sample::B(1);
			$tmp2 = thx_Enums::string($tmp1);
			utest_Assert::equals("B(1)", $tmp2, null, _hx_anonymous(array("fileName" => "TestEnums.hx", "lineNumber" => 40, "className" => "thx.TestEnums", "methodName" => "testString")));
			unset($tmp2,$tmp1,$tmp);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.TestEnums'; }
}
