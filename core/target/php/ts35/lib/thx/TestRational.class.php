<?php

// Generated by Haxe 3.3.0
class thx_TestRational {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testOperations() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$x = null;
			$y = null;
			$tmp = thx_bigint_Bigs::fromInt(1);
			$x = thx__Rational_Rational_Impl_::create($tmp, thx_bigint_Bigs::fromInt(2));
			$tmp1 = thx_bigint_Bigs::fromInt(1);
			$y = thx__Rational_Rational_Impl_::create($tmp1, thx_bigint_Bigs::fromInt(3));
			$tmp2 = thx__Rational_Rational_Impl_::add($x, $y);
			$tmp3 = thx__Rational_Rational_Impl_::toString($tmp2);
			utest_Assert::equals("5/6", $tmp3, null, _hx_anonymous(array("fileName" => "TestRational.hx", "lineNumber" => 20, "className" => "thx.TestRational", "methodName" => "testOperations")));
			$tmp4 = thx_bigint_Bigs::fromInt(8);
			$x = thx__Rational_Rational_Impl_::create($tmp4, thx_bigint_Bigs::fromInt(9));
			$tmp5 = thx_bigint_Bigs::fromInt(1);
			$y = thx__Rational_Rational_Impl_::create($tmp5, thx_bigint_Bigs::fromInt(9));
			$tmp6 = thx__Rational_Rational_Impl_::add($x, $y);
			$tmp7 = thx__Rational_Rational_Impl_::toString($tmp6);
			utest_Assert::equals("1", $tmp7, null, _hx_anonymous(array("fileName" => "TestRational.hx", "lineNumber" => 25, "className" => "thx.TestRational", "methodName" => "testOperations")));
			$tmp8 = thx_bigint_Bigs::fromInt(1);
			$x = thx__Rational_Rational_Impl_::create($tmp8, thx_bigint_Bigs::fromInt(200000000));
			$tmp9 = thx_bigint_Bigs::fromInt(1);
			$y = thx__Rational_Rational_Impl_::create($tmp9, thx_bigint_Bigs::fromInt(300000000));
			$tmp10 = thx__Rational_Rational_Impl_::add($x, $y);
			$tmp11 = thx__Rational_Rational_Impl_::toString($tmp10);
			utest_Assert::equals("1/120000000", $tmp11, null, _hx_anonymous(array("fileName" => "TestRational.hx", "lineNumber" => 30, "className" => "thx.TestRational", "methodName" => "testOperations")));
			$tmp12 = thx_bigint_Bigs::fromInt(1073741789);
			$x = thx__Rational_Rational_Impl_::create($tmp12, thx_bigint_Bigs::fromInt(20));
			$tmp13 = thx_bigint_Bigs::fromInt(1073741789);
			$y = thx__Rational_Rational_Impl_::create($tmp13, thx_bigint_Bigs::fromInt(30));
			$tmp14 = thx__Rational_Rational_Impl_::add($x, $y);
			$tmp15 = thx__Rational_Rational_Impl_::toString($tmp14);
			utest_Assert::equals("1073741789/12", $tmp15, null, _hx_anonymous(array("fileName" => "TestRational.hx", "lineNumber" => 35, "className" => "thx.TestRational", "methodName" => "testOperations")));
			$tmp16 = thx_bigint_Bigs::fromInt(4);
			$x = thx__Rational_Rational_Impl_::create($tmp16, thx_bigint_Bigs::fromInt(17));
			$tmp17 = thx_bigint_Bigs::fromInt(17);
			$y = thx__Rational_Rational_Impl_::create($tmp17, thx_bigint_Bigs::fromInt(4));
			$tmp18 = thx__Rational_Rational_Impl_::multiply($x, $y);
			$tmp19 = thx__Rational_Rational_Impl_::toString($tmp18);
			utest_Assert::equals("1", $tmp19, null, _hx_anonymous(array("fileName" => "TestRational.hx", "lineNumber" => 40, "className" => "thx.TestRational", "methodName" => "testOperations")));
			$tmp20 = thx_bigint_Bigs::fromInt(3037141);
			$x = thx__Rational_Rational_Impl_::create($tmp20, thx_bigint_Bigs::fromInt(3247033));
			$tmp21 = thx_bigint_Bigs::fromInt(3037547);
			$y = thx__Rational_Rational_Impl_::create($tmp21, thx_bigint_Bigs::fromInt(3246599));
			$tmp22 = thx__Rational_Rational_Impl_::multiply($x, $y);
			$tmp23 = thx__Rational_Rational_Impl_::toString($tmp22);
			utest_Assert::equals("841/961", $tmp23, null, _hx_anonymous(array("fileName" => "TestRational.hx", "lineNumber" => 45, "className" => "thx.TestRational", "methodName" => "testOperations")));
			$tmp24 = thx__Rational_Rational_Impl_::multiply($x, $y);
			$tmp25 = thx__Rational_Rational_Impl_::toFloat($tmp24);
			utest_Assert::floatEquals(0.87513007284079, $tmp25, null, null, _hx_anonymous(array("fileName" => "TestRational.hx", "lineNumber" => 46, "className" => "thx.TestRational", "methodName" => "testOperations")));
			$tmp26 = thx_bigint_Bigs::fromInt(1);
			$x = thx__Rational_Rational_Impl_::create($tmp26, thx_bigint_Bigs::fromInt(6));
			$tmp27 = thx_bigint_Bigs::fromInt(-4);
			$y = thx__Rational_Rational_Impl_::create($tmp27, thx_bigint_Bigs::fromInt(-8));
			$tmp28 = thx__Rational_Rational_Impl_::subtract($x, $y);
			$tmp29 = thx__Rational_Rational_Impl_::toString($tmp28);
			utest_Assert::equals("-1/3", $tmp29, null, _hx_anonymous(array("fileName" => "TestRational.hx", "lineNumber" => 51, "className" => "thx.TestRational", "methodName" => "testOperations")));
			unset($y,$x,$tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp29,$tmp28,$tmp27,$tmp26,$tmp25,$tmp24,$tmp23,$tmp22,$tmp21,$tmp20,$tmp2,$tmp19,$tmp18,$tmp17,$tmp16,$tmp15,$tmp14,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp);
		}
	}
	public function testFromInt() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$r = thx__Rational_Rational_Impl_::fromInt(3);
			$tmp = thx__Rational_Rational_Impl_::toString($r);
			utest_Assert::equals("3", $tmp, null, _hx_anonymous(array("fileName" => "TestRational.hx", "lineNumber" => 57, "className" => "thx.TestRational", "methodName" => "testFromInt")));
			$r = thx__Rational_Rational_Impl_::divide($r, thx__Rational_Rational_Impl_::fromInt(2));
			$tmp1 = thx__Rational_Rational_Impl_::toString($r);
			utest_Assert::equals("3/2", $tmp1, null, _hx_anonymous(array("fileName" => "TestRational.hx", "lineNumber" => 59, "className" => "thx.TestRational", "methodName" => "testFromInt")));
			unset($tmp1,$tmp,$r);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.TestRational'; }
}
