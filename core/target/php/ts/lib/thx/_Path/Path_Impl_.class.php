<?php

// Generated by Haxe 3.3.0
class thx__Path_Path_Impl_ {
	public function __construct(){}
	static $nixSeparator = "/";
	static $win32Separator = "\\";
	static function isValidNix($path) {
		$tmp = $path->slice(2, null);
		return thx_Arrays::any($tmp, array(new _hx_lambda(array(), "thx__Path_Path_Impl__0"), 'execute'));
	}
	static function isValidWin32($path) {
		$tmp = $path->slice(2, null);
		return thx_Arrays::any($tmp, array(new _hx_lambda(array(), "thx__Path_Path_Impl__1"), 'execute'));
	}
	static function normalizeNix($path, $replacement = null) {
		if($replacement === null) {
			$replacement = "_";
		}
		return thx__Path_Path_Impl_::map($path, array(new _hx_lambda(array(&$replacement), "thx__Path_Path_Impl__2"), 'execute'));
	}
	static function normalizeWin32($path, $replacement = null) {
		if($replacement === null) {
			$replacement = "_";
		}
		return thx__Path_Path_Impl_::map($path, array(new _hx_lambda(array(&$replacement), "thx__Path_Path_Impl__3"), 'execute'));
	}
	static function fromString($s) {
		$tmp = _hx_index_of($s, "\\", null);
		if($tmp >= 0) {
			$re = new EReg("^([a-z]+[:][\\\\])", "i");
			$tmp1 = $re->match($s);
			if($tmp1) {
				$root = $re->matched(1);
				$path = _hx_explode("\\", $re->matchedRight());
				$tmp2 = thx__Path_Path_Impl_::resolve($path, $root !== "");
				$parts = _hx_deref((new _hx_array(array("\\", $root))))->concat($tmp2);
				return $parts;
			} else {
				$path1 = _hx_explode("\\", $s);
				$tmp3 = thx__Path_Path_Impl_::resolve($path1, false);
				$parts1 = _hx_deref((new _hx_array(array("\\", ""))))->concat($tmp3);
				return $parts1;
			}
		} else {
			$root1 = null;
			$tmp4 = StringTools::startsWith($s, "/");
			if($tmp4) {
				$root1 = "/";
			} else {
				$root1 = "";
			}
			$path2 = _hx_explode("/", $s);
			$tmp5 = thx__Path_Path_Impl_::resolve($path2, $root1 !== "");
			$parts2 = _hx_deref((new _hx_array(array("/", $root1))))->concat($tmp5);
			return $parts2;
		}
	}
	static function resolve($path, $isAbsolute) {
		$path = thx_ArrayStrings::compact($path)->filter(array(new _hx_lambda(array(), "thx__Path_Path_Impl__4"), 'execute'));
		return thx_Arrays::reduce($path, array(new _hx_lambda(array(&$isAbsolute), "thx__Path_Path_Impl__5"), 'execute'), (new _hx_array(array())));
	}
	static function create($root, $path, $sep) {
		$tmp = thx__Path_Path_Impl_::resolve($path, $root !== "");
		$parts = _hx_deref((new _hx_array(array($sep, $root))))->concat($tmp);
		return $parts;
	}
	static function raw($parts) {
		return $parts;
	}
	static function _new($parts) {
		return $parts;
	}
	static function asAbsolute($this1, $root = null) {
		if($root === null) {
			$root = "C:\\";
		}
		$root1 = null;
		if($this1[0] === "/") {
			$root1 = "/";
		} else {
			$root1 = $root;
		}
		$path = $this1->slice(2, null);
		$tmp = $this1[0];
		$tmp1 = thx__Path_Path_Impl_::resolve($path, $root1 !== "");
		$parts = _hx_deref((new _hx_array(array($tmp, $root1))))->concat($tmp1);
		return $parts;
	}
	static function asRelative($this1) {
		$path = $this1->slice(2, null);
		$tmp = $this1[0];
		$tmp1 = thx__Path_Path_Impl_::resolve($path, false);
		$parts = _hx_deref((new _hx_array(array($tmp, ""))))->concat($tmp1);
		return $parts;
	}
	static function normalize($this1) {
		if($this1[0] === "\\") {
			return thx__Path_Path_Impl_::normalizeWin32($this1, null);
		} else {
			return thx__Path_Path_Impl_::normalizeNix($this1, null);
		}
	}
	static function isAbsolute($this1) {
		return $this1[1] !== "";
	}
	static function isRelative($this1) {
		return $this1[1] === "";
	}
	static function isRoot($this1) {
		if($this1[1] !== "") {
			return $this1->slice(2, null)->length === 0;
		} else {
			return false;
		}
	}
	static function isNix($this1) {
		return $this1[0] === "/";
	}
	static function isWin32($this1) {
		return $this1[0] === "\\";
	}
	static function isValid($this1) {
		if($this1[0] === "\\") {
			return thx__Path_Path_Impl_::isValidWin32($this1);
		} else {
			return thx__Path_Path_Impl_::isValidNix($this1);
		}
	}
	static function noext($this1) {
		$e = thx__Path_Path_Impl_::ext($this1);
		if($e === "") {
			return thx__Path_Path_Impl_::base($this1, null);
		} else {
			return thx__Path_Path_Impl_::base($this1, "." . _hx_string_or_null($e));
		}
	}
	static function base($this1, $end = null) {
		$tmp = $this1->slice(2, null)->length === 0;
		if($tmp) {
			return "";
		}
		$array = $this1->slice(2, null);
		$name = $array[$array->length - 1];
		$tmp1 = null;
		if(null !== $end) {
			$tmp1 = StringTools::endsWith($name, $end);
		} else {
			$tmp1 = false;
		}
		if($tmp1) {
			$tmp2 = strlen($name) - strlen($end);
			return _hx_substring($name, 0, $tmp2);
		}
		return $name;
	}
	static function ext($this1) {
		$tmp = $this1->slice(2, null)->length === 0;
		if($tmp) {
			return "";
		}
		$array = $this1->slice(2, null);
		$tmp1 = $array[$array->length - 1];
		return thx_Strings::afterLast($tmp1, ".");
	}
	static function dir($this1) {
		$tmp = thx__Path_Path_Impl_::up($this1, null);
		return thx__Path_Path_Impl_::toString($tmp);
	}
	static function map($this1, $handler) {
		$root = $this1[1];
		$path = $this1->slice(2, null)->map($handler);
		$tmp = $this1[0];
		$tmp1 = thx__Path_Path_Impl_::resolve($path, $root !== "");
		$parts = _hx_deref((new _hx_array(array($tmp, $root))))->concat($tmp1);
		return $parts;
	}
	static function hierarchy($this1) {
		$base = (new _hx_array(array()));
		$tmp = $this1->slice(2, null);
		return thx_Arrays::reduce($tmp, array(new _hx_lambda(array(&$base, &$this1), "thx__Path_Path_Impl__6"), 'execute'), (new _hx_array(array())));
	}
	static function iterator($this1) {
		return thx__Path_Path_Impl_::hierarchy($this1)->iterator();
	}
	static function pathTo($this1, $destination) {
		$_g = $destination[1] !== "";
		switch($this1[1] !== "") {
		case false:{
			switch($_g) {
			case false:{
				return thx__Path_Path_Impl_::join($this1, $destination);
			}break;
			case true:{
				return $destination;
			}break;
			}
		}break;
		case true:{
			switch($_g) {
			case false:{
				return thx__Path_Path_Impl_::join($this1, $destination);
			}break;
			case true:{
				if($this1[1] === $destination[1]) {
					$opath = $destination->slice(2, null);
					$tmp = $this1->slice(2, null);
					$common = thx_Arrays::commonsFromStart($tmp, $opath, null);
					$tmp1 = $this1->slice(2, null);
					$tmp2 = $this1->slice(2, null)->length - $common->length;
					$tmp3 = $tmp1->slice(0, $tmp2)->map(array(new _hx_lambda(array(), "thx__Path_Path_Impl__7"), 'execute'));
					$tmp4 = $opath->slice($common->length, null);
					$path = $tmp3->concat($tmp4);
					$tmp5 = $this1[0];
					$tmp6 = thx__Path_Path_Impl_::resolve($path, false);
					$parts = _hx_deref((new _hx_array(array($tmp5, ""))))->concat($tmp6);
					return $parts;
				} else {
					return $destination;
				}
			}break;
			}
		}break;
		}
	}
	static function sibling($this1, $path) {
		$tmp = thx__Path_Path_Impl_::up($this1, null);
		return thx__Path_Path_Impl_::join($tmp, $path);
	}
	static function toNix($this1) {
		if($this1[0] === "/") {
			return $this1;
		} else {
			$tmp = null;
			if($this1[1] !== "") {
				$tmp = "/";
			} else {
				$tmp = "";
			}
			$tmp1 = $this1->slice(2, null);
			$parts = _hx_deref((new _hx_array(array("/", $tmp))))->concat($tmp1);
			return $parts;
		}
	}
	static function toWin32($this1, $root = null) {
		if($root === null) {
			$root = "C:\\";
		}
		if($this1[0] === "\\") {
			return $this1;
		} else {
			$tmp = null;
			if($this1[1] !== "") {
				$tmp = $root;
			} else {
				$tmp = "";
			}
			$tmp1 = $this1->slice(2, null);
			$parts = _hx_deref((new _hx_array(array("\\", $tmp))))->concat($tmp1);
			return $parts;
		}
	}
	static function up($this1, $n = null) {
		if($n === null) {
			$n = 1;
		}
		$tmp = thx__Path_Path_Impl_::isRoot($this1);
		if($tmp) {
			return $this1;
		} else {
			$tmp1 = $this1[0];
			$tmp2 = $this1[1];
			$tmp3 = $this1->length - $n;
			$tmp4 = $this1->slice(2, $tmp3);
			$parts = _hx_deref((new _hx_array(array($tmp1, $tmp2))))->concat($tmp4);
			return $parts;
		}
	}
	static function withExt($this1, $newextension) {
		$oext = thx__Path_Path_Impl_::ext($this1);
		$tmp = strlen($oext) > 0;
		if($tmp) {
			$oext = "." . _hx_string_or_null($oext);
		}
		$tmp1 = _hx_substring($newextension, 0, 1);
		if($tmp1 === ".") {
			$newextension = _hx_substring($newextension, 1, null);
		}
		$tmp2 = thx__Path_Path_Impl_::base($this1, $oext);
		return thx__Path_Path_Impl_::sibling($this1, thx__Path_Path_Impl_::fromString("" . _hx_string_or_null($tmp2) . "." . _hx_string_or_null($newextension)));
	}
	static function join($this1, $other) {
		if($other[1] !== "") {
			return $other;
		}
		$root = $this1[1];
		$tmp = $this1->slice(2, null);
		$tmp1 = $other->slice(2, null);
		$path = $tmp->concat($tmp1);
		$tmp2 = $this1[0];
		$tmp3 = thx__Path_Path_Impl_::resolve($path, $root !== "");
		$parts = _hx_deref((new _hx_array(array($tmp2, $root))))->concat($tmp3);
		return $parts;
	}
	static function toString($this1) {
		$tmp = null;
		if($this1[1] === "") {
			$tmp = $this1->slice(2, null)->length === 0;
		} else {
			$tmp = false;
		}
		if($tmp) {
			return ".";
		} else {
			$tmp1 = $this1[1];
			$tmp2 = $this1->slice(2, null);
			$tmp3 = $tmp2->join($this1[0]);
			return _hx_string_or_null($tmp1) . _hx_string_or_null($tmp3);
		}
	}
	static function get_path($this1) {
		return $this1->slice(2, null);
	}
	static function get_root($this1) {
		return $this1[1];
	}
	static function get_sep($this1) {
		return $this1[0];
	}
	static function get_self($this1) {
		return $this1;
	}
	static $__properties__ = array("get_sep" => "get_sep","get_root" => "get_root","get_path" => "get_path");
	function __toString() { return 'thx._Path.Path_Impl_'; }
}
function thx__Path_Path_Impl__0($_) {
	{
		$tmp1 = _hx_index_of($_, "/", null);
		return $tmp1 < 0;
	}
}
function thx__Path_Path_Impl__1($_) {
	{
		return !_hx_deref(new EReg("[<>:/\\|?*\"]", "g"))->match($_);
	}
}
function thx__Path_Path_Impl__2(&$replacement, $_) {
	{
		return str_replace("/", $replacement, $_);
	}
}
function thx__Path_Path_Impl__3(&$replacement, $_) {
	{
		return _hx_deref(new EReg("[<>:\"/\\|?*]", "g"))->replace($_, $replacement);
	}
}
function thx__Path_Path_Impl__4($s) {
	{
		return $s !== ".";
	}
}
function thx__Path_Path_Impl__5(&$isAbsolute, $acc, $s1) {
	{
		$tmp = null;
		$tmp1 = null;
		if($s1 === "..") {
			$tmp1 = $acc->length > 0;
		} else {
			$tmp1 = false;
		}
		if($tmp1) {
			$tmp = $acc[$acc->length - 1] !== "..";
		} else {
			$tmp = false;
		}
		if($tmp) {
			$tmp2 = $acc->length - 1;
			return $acc->slice(0, $tmp2);
		} else {
			$tmp3 = null;
			if($s1 === "..") {
				$tmp3 = $isAbsolute;
			} else {
				$tmp3 = false;
			}
			if($tmp3) {
				return $acc;
			} else {
				return $acc->concat((new _hx_array(array($s1))));
			}
		}
	}
}
function thx__Path_Path_Impl__6(&$base, &$this1, $acc, $cur) {
	{
		$base->push($cur);
		$root = $this1[1];
		$path = $base->copy();
		$tmp1 = $this1[0];
		$tmp2 = thx__Path_Path_Impl_::resolve($path, $root !== "");
		$parts = _hx_deref((new _hx_array(array($tmp1, $root))))->concat($tmp2);
		$acc->push($parts);
		return $acc;
	}
}
function thx__Path_Path_Impl__7($_) {
	{
		return "..";
	}
}
