<?php

// Generated by Haxe 3.3.0
class thx_TestError {
	public function __construct() {}
	public function testAbstract() {
		$error = new thx_error_AbstractMethod(_hx_anonymous(array("fileName" => "TestError.hx", "lineNumber" => 12, "className" => "thx.TestError", "methodName" => "testAbstract")));
		utest_Assert::notNull($error, null, _hx_anonymous(array("fileName" => "TestError.hx", "lineNumber" => 14, "className" => "thx.TestError", "methodName" => "testAbstract")));
		utest_Assert::stringContains("TestError", $error->message, null, _hx_anonymous(array("fileName" => "TestError.hx", "lineNumber" => 15, "className" => "thx.TestError", "methodName" => "testAbstract")));
		utest_Assert::stringContains("testAbstract", $error->message, null, _hx_anonymous(array("fileName" => "TestError.hx", "lineNumber" => 16, "className" => "thx.TestError", "methodName" => "testAbstract")));
		utest_Assert::stringContains("is abstract", $error->message, null, _hx_anonymous(array("fileName" => "TestError.hx", "lineNumber" => 17, "className" => "thx.TestError", "methodName" => "testAbstract")));
	}
	public function testNotImplemented() {
		$error = new thx_error_NotImplemented(_hx_anonymous(array("fileName" => "TestError.hx", "lineNumber" => 21, "className" => "thx.TestError", "methodName" => "testNotImplemented")));
		utest_Assert::notNull($error, null, _hx_anonymous(array("fileName" => "TestError.hx", "lineNumber" => 23, "className" => "thx.TestError", "methodName" => "testNotImplemented")));
		utest_Assert::stringContains("TestError", $error->message, null, _hx_anonymous(array("fileName" => "TestError.hx", "lineNumber" => 24, "className" => "thx.TestError", "methodName" => "testNotImplemented")));
		utest_Assert::stringContains("testNotImplemented", $error->message, null, _hx_anonymous(array("fileName" => "TestError.hx", "lineNumber" => 25, "className" => "thx.TestError", "methodName" => "testNotImplemented")));
		utest_Assert::stringContains("needs to be implemented", $error->message, null, _hx_anonymous(array("fileName" => "TestError.hx", "lineNumber" => 26, "className" => "thx.TestError", "methodName" => "testNotImplemented")));
	}
	public function testNullArgument() {
		$_gthis = $this;
		utest_Assert::raises(array(new _hx_lambda(array(&$_gthis), "thx_TestError_0"), 'execute'), _hx_qtype("thx.error.NullArgument"), null, null, _hx_anonymous(array("fileName" => "TestError.hx", "lineNumber" => 30, "className" => "thx.TestError", "methodName" => "testNullArgument")));
		$this->nullInt(1);
	}
	public function testNullArgumentUsing() {
		$_gthis = $this;
		utest_Assert::raises(array(new _hx_lambda(array(&$_gthis), "thx_TestError_1"), 'execute'), _hx_qtype("thx.error.NullArgument"), null, null, _hx_anonymous(array("fileName" => "TestError.hx", "lineNumber" => 35, "className" => "thx.TestError", "methodName" => "testNullArgumentUsing")));
		$this->nullUsingInt(1);
	}
	public function testEmptyArray() {
		$_gthis = $this;
		utest_Assert::raises(array(new _hx_lambda(array(&$_gthis), "thx_TestError_2"), 'execute'), _hx_qtype("thx.error.NullArgument"), null, null, _hx_anonymous(array("fileName" => "TestError.hx", "lineNumber" => 40, "className" => "thx.TestError", "methodName" => "testEmptyArray")));
		utest_Assert::raises(array(new _hx_lambda(array(&$_gthis), "thx_TestError_3"), 'execute'), _hx_qtype("thx.error.NullArgument"), null, null, _hx_anonymous(array("fileName" => "TestError.hx", "lineNumber" => 41, "className" => "thx.TestError", "methodName" => "testEmptyArray")));
		$this->emptyArray((new _hx_array(array(1))));
	}
	public function testEmptyString() {
		$_gthis = $this;
		utest_Assert::raises(array(new _hx_lambda(array(&$_gthis), "thx_TestError_4"), 'execute'), _hx_qtype("thx.error.NullArgument"), null, null, _hx_anonymous(array("fileName" => "TestError.hx", "lineNumber" => 46, "className" => "thx.TestError", "methodName" => "testEmptyString")));
		utest_Assert::raises(array(new _hx_lambda(array(&$_gthis), "thx_TestError_5"), 'execute'), _hx_qtype("thx.error.NullArgument"), null, null, _hx_anonymous(array("fileName" => "TestError.hx", "lineNumber" => 47, "className" => "thx.TestError", "methodName" => "testEmptyString")));
		$this->emptyString("a");
	}
	public function testEmptyIterator() {
		$_gthis = $this;
		$it = new IntIterator(0, 0);
		utest_Assert::raises(array(new _hx_lambda(array(&$_gthis), "thx_TestError_6"), 'execute'), _hx_qtype("thx.error.NullArgument"), null, null, _hx_anonymous(array("fileName" => "TestError.hx", "lineNumber" => 53, "className" => "thx.TestError", "methodName" => "testEmptyIterator")));
		utest_Assert::raises(array(new _hx_lambda(array(&$_gthis, &$it), "thx_TestError_7"), 'execute'), _hx_qtype("thx.error.NullArgument"), null, null, _hx_anonymous(array("fileName" => "TestError.hx", "lineNumber" => 54, "className" => "thx.TestError", "methodName" => "testEmptyIterator")));
		$it1 = new IntIterator(0, 4);
		$this->emptyIterator($it1);
	}
	public function testEmptyIterable() {
		$_gthis = $this;
		$it = _hx_anonymous(array("iterator" => array(new _hx_lambda(array(), "thx_TestError_8"), 'execute')));
		utest_Assert::raises(array(new _hx_lambda(array(&$_gthis), "thx_TestError_9"), 'execute'), _hx_qtype("thx.error.NullArgument"), null, null, _hx_anonymous(array("fileName" => "TestError.hx", "lineNumber" => 61, "className" => "thx.TestError", "methodName" => "testEmptyIterable")));
		utest_Assert::raises(array(new _hx_lambda(array(&$_gthis, &$it), "thx_TestError_10"), 'execute'), _hx_qtype("thx.error.NullArgument"), null, null, _hx_anonymous(array("fileName" => "TestError.hx", "lineNumber" => 62, "className" => "thx.TestError", "methodName" => "testEmptyIterable")));
		$this->emptyIterable(_hx_anonymous(array("iterator" => array(new _hx_lambda(array(), "thx_TestError_11"), 'execute'))));
	}
	public function nullInt($i) {
		if(null === $i) {
			throw new HException(new thx_error_NullArgument("argument \"i\" cannot be null", _hx_anonymous(array("fileName" => "NullArgument.hx", "lineNumber" => 32, "className" => "thx.TestError", "methodName" => "nullInt"))));
		}
	}
	public function nullUsingInt($i) {
		if(null === $i) {
			throw new HException(new thx_error_NullArgument("argument \"this\" cannot be null", _hx_anonymous(array("fileName" => "NullArgument.hx", "lineNumber" => 32, "className" => "thx.TestError", "methodName" => "nullUsingInt"))));
		}
	}
	public function emptyArray($arr) {
		if(null === $arr) {
			throw new HException(new thx_error_NullArgument("Array argument \"this\" cannot be null", _hx_anonymous(array("fileName" => "NullArgument.hx", "lineNumber" => 52, "className" => "thx.TestError", "methodName" => "emptyArray"))));
		} else {
			$tmp = $arr->length === 0;
			if($tmp) {
				throw new HException(new thx_error_NullArgument("Array argument \"this\" cannot be empty", _hx_anonymous(array("fileName" => "NullArgument.hx", "lineNumber" => 54, "className" => "thx.TestError", "methodName" => "emptyArray"))));
			}
		}
	}
	public function emptyString($s) {
		if(null === $s) {
			throw new HException(new thx_error_NullArgument("String argument \"this\" cannot be null", _hx_anonymous(array("fileName" => "NullArgument.hx", "lineNumber" => 58, "className" => "thx.TestError", "methodName" => "emptyString"))));
		} else {
			if($s === "") {
				throw new HException(new thx_error_NullArgument("String argument \"this\" cannot be empty", _hx_anonymous(array("fileName" => "NullArgument.hx", "lineNumber" => 60, "className" => "thx.TestError", "methodName" => "emptyString"))));
			}
		}
	}
	public function emptyIterator($it) {
		if(null === $it) {
			throw new HException(new thx_error_NullArgument("Iterator argument \"this\" cannot be null", _hx_anonymous(array("fileName" => "NullArgument.hx", "lineNumber" => 65, "className" => "thx.TestError", "methodName" => "emptyIterator"))));
		} else {
			$tmp = !$it->hasNext();
			if($tmp) {
				throw new HException(new thx_error_NullArgument("Iterator argument \"this\" cannot be empty", _hx_anonymous(array("fileName" => "NullArgument.hx", "lineNumber" => 67, "className" => "thx.TestError", "methodName" => "emptyIterator"))));
			}
		}
	}
	public function emptyIterable($it) {
		if(null === $it) {
			throw new HException(new thx_error_NullArgument("Iterable argument \"this\" cannot be null", _hx_anonymous(array("fileName" => "NullArgument.hx", "lineNumber" => 73, "className" => "thx.TestError", "methodName" => "emptyIterable"))));
		} else {
			$tmp = !$it->iterator()->hasNext();
			if($tmp) {
				throw new HException(new thx_error_NullArgument("Iterable argument \"this\" cannot be empty", _hx_anonymous(array("fileName" => "NullArgument.hx", "lineNumber" => 75, "className" => "thx.TestError", "methodName" => "emptyIterable"))));
			}
		}
	}
	function __toString() { return 'thx.TestError'; }
}
function thx_TestError_0(&$_gthis) {
	{
		$_gthis->nullInt(null);
	}
}
function thx_TestError_1(&$_gthis) {
	{
		$_gthis->nullUsingInt(null);
	}
}
function thx_TestError_2(&$_gthis) {
	{
		$_gthis->emptyArray(null);
	}
}
function thx_TestError_3(&$_gthis) {
	{
		$_gthis->emptyArray((new _hx_array(array())));
	}
}
function thx_TestError_4(&$_gthis) {
	{
		$_gthis->emptyString(null);
	}
}
function thx_TestError_5(&$_gthis) {
	{
		$_gthis->emptyString("");
	}
}
function thx_TestError_6(&$_gthis) {
	{
		$_gthis->emptyIterator(null);
	}
}
function thx_TestError_7(&$_gthis, &$it) {
	{
		$_gthis->emptyIterator($it);
	}
}
function thx_TestError_8() {
	{
		return new IntIterator(0, 0);
	}
}
function thx_TestError_9(&$_gthis) {
	{
		$_gthis->emptyIterable(null);
	}
}
function thx_TestError_10(&$_gthis, &$it) {
	{
		$_gthis->emptyIterable($it);
	}
}
function thx_TestError_11() {
	{
		return new IntIterator(0, 4);
	}
}
