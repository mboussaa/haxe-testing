<?php

// Generated by Haxe 3.3.0
class thx_TestAssert {
	public function __construct() {}
	public $orig;
	public $behavior;
	public function setup() {
		$this->orig = thx_Assert::$behavior;
		thx_Assert::$behavior = $this->behavior = new thx_CollectBehavior();
	}
	public function teardown() {
		thx_Assert::$behavior = $this->orig;
	}
	public function testIsBool() {
		thx_Assert::isTrue(true, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 22, "className" => "thx.TestAssert", "methodName" => "testIsBool")));
		thx_Assert::isTrue(false, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 23, "className" => "thx.TestAssert", "methodName" => "testIsBool")));
		thx_Assert::isFalse(true, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 24, "className" => "thx.TestAssert", "methodName" => "testIsBool")));
		thx_Assert::isFalse(false, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 25, "className" => "thx.TestAssert", "methodName" => "testIsBool")));
		$this->expect(2, 2, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 27, "className" => "thx.TestAssert", "methodName" => "testIsBool")));
	}
	public function testIsNull() {
		thx_Assert::isNull(null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 31, "className" => "thx.TestAssert", "methodName" => "testIsNull")));
		thx_Assert::isNull(0, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 32, "className" => "thx.TestAssert", "methodName" => "testIsNull")));
		thx_Assert::isNull(0.0, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 33, "className" => "thx.TestAssert", "methodName" => "testIsNull")));
		thx_Assert::isNull(0.1, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 34, "className" => "thx.TestAssert", "methodName" => "testIsNull")));
		thx_Assert::isNull(1, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 35, "className" => "thx.TestAssert", "methodName" => "testIsNull")));
		thx_Assert::isNull("", null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 36, "className" => "thx.TestAssert", "methodName" => "testIsNull")));
		thx_Assert::isNull("a", null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 37, "className" => "thx.TestAssert", "methodName" => "testIsNull")));
		thx_Assert::isNull(Math::$NaN, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 38, "className" => "thx.TestAssert", "methodName" => "testIsNull")));
		thx_Assert::isNull(Math::$POSITIVE_INFINITY, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 39, "className" => "thx.TestAssert", "methodName" => "testIsNull")));
		thx_Assert::isNull(true, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 40, "className" => "thx.TestAssert", "methodName" => "testIsNull")));
		thx_Assert::isNull(false, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 41, "className" => "thx.TestAssert", "methodName" => "testIsNull")));
		$this->expect(1, 10, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 42, "className" => "thx.TestAssert", "methodName" => "testIsNull")));
	}
	public function testNotNull() {
		thx_Assert::notNull(null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 46, "className" => "thx.TestAssert", "methodName" => "testNotNull")));
		thx_Assert::notNull(0, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 47, "className" => "thx.TestAssert", "methodName" => "testNotNull")));
		thx_Assert::notNull(0.0, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 48, "className" => "thx.TestAssert", "methodName" => "testNotNull")));
		thx_Assert::notNull(0.1, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 49, "className" => "thx.TestAssert", "methodName" => "testNotNull")));
		thx_Assert::notNull(1, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 50, "className" => "thx.TestAssert", "methodName" => "testNotNull")));
		thx_Assert::notNull("", null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 51, "className" => "thx.TestAssert", "methodName" => "testNotNull")));
		thx_Assert::notNull("a", null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 52, "className" => "thx.TestAssert", "methodName" => "testNotNull")));
		thx_Assert::notNull(Math::$NaN, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 53, "className" => "thx.TestAssert", "methodName" => "testNotNull")));
		thx_Assert::notNull(Math::$POSITIVE_INFINITY, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 54, "className" => "thx.TestAssert", "methodName" => "testNotNull")));
		thx_Assert::notNull(true, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 55, "className" => "thx.TestAssert", "methodName" => "testNotNull")));
		thx_Assert::notNull(false, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 56, "className" => "thx.TestAssert", "methodName" => "testNotNull")));
		$this->expect(10, 1, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 57, "className" => "thx.TestAssert", "methodName" => "testNotNull")));
	}
	public function testRaisesSuccess() {
		$counter = 0;
		$tests = (new _hx_array(array(_hx_anonymous(array("exception" => "e", "catches" => (new _hx_array(array(_hx_qtype("String"), _hx_qtype("Dynamic"), null))))), _hx_anonymous(array("exception" => 1, "catches" => (new _hx_array(array(_hx_qtype("Int"), _hx_qtype("Dynamic"), null))))), _hx_anonymous(array("exception" => 0.1, "catches" => (new _hx_array(array(_hx_qtype("Float"), _hx_qtype("Dynamic"), null))))), _hx_anonymous(array("exception" => new thx_TestAssert(), "catches" => (new _hx_array(array(_hx_qtype("thx.TestAssert"), _hx_qtype("Dynamic"), null))))), _hx_anonymous(array("exception" => (new _hx_array(array(1))), "catches" => (new _hx_array(array(_hx_qtype("Array"), _hx_qtype("Dynamic"), null))))))));
		{
			$_g = 0;
			while($_g < $tests->length) {
				$test = $tests[$_g];
				++$_g;
				{
					$_g1 = 0;
					$_g2 = $test->catches;
					while($_g1 < $_g2->length) {
						$catcher = $_g2[$_g1];
						++$_g1;
						++$counter;
						thx_Assert::raises(array(new _hx_lambda(array(&$test), "thx_TestAssert_0"), 'execute'), $catcher, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 72, "className" => "thx.TestAssert", "methodName" => "testRaisesSuccess")));
						unset($catcher);
					}
					unset($_g2,$_g1);
				}
				unset($test);
			}
		}
		$this->expect($counter, 0, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 75, "className" => "thx.TestAssert", "methodName" => "testRaisesSuccess")));
	}
	public function testRaisesFailure() {
		$counter = 0;
		$tests = (new _hx_array(array(_hx_anonymous(array("exception" => "e", "catches" => (new _hx_array(array(_hx_qtype("Int"), _hx_qtype("Float"), _hx_qtype("thx.TestAssert")))))), _hx_anonymous(array("exception" => 1, "catches" => (new _hx_array(array(_hx_qtype("String"), _hx_qtype("thx.TestAssert")))))), _hx_anonymous(array("exception" => 0.1, "catches" => (new _hx_array(array(_hx_qtype("String"), _hx_qtype("Int"), _hx_qtype("thx.TestAssert")))))), _hx_anonymous(array("exception" => new thx_TestAssert(), "catches" => (new _hx_array(array(_hx_qtype("Int"), _hx_qtype("Float"), _hx_qtype("String")))))), _hx_anonymous(array("exception" => (new _hx_array(array(1))), "catches" => (new _hx_array(array(_hx_qtype("thx.TestAssert"), _hx_qtype("Int"), _hx_qtype("Float")))))))));
		{
			$_g = 0;
			while($_g < $tests->length) {
				$test = $tests[$_g];
				++$_g;
				{
					$_g1 = 0;
					$_g2 = $test->catches;
					while($_g1 < $_g2->length) {
						$catcher = $_g2[$_g1];
						++$_g1;
						++$counter;
						thx_Assert::raises(array(new _hx_lambda(array(&$test), "thx_TestAssert_1"), 'execute'), $catcher, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 90, "className" => "thx.TestAssert", "methodName" => "testRaisesFailure")));
						unset($catcher);
					}
					unset($_g2,$_g1);
				}
				unset($test);
			}
		}
		$this->expect(0, $counter, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 93, "className" => "thx.TestAssert", "methodName" => "testRaisesFailure")));
	}
	public function testIs() {
		$values = (new _hx_array(array("e", 1, 0.1, new thx_TestAssert(), _hx_anonymous(array()), (new _hx_array(array(1))))));
		$types = (new _hx_array(array(_hx_qtype("String"), _hx_qtype("Int"), _hx_qtype("Float"), _hx_qtype("thx.TestAssert"), _hx_qtype("Dynamic"), _hx_qtype("Array"))));
		$i = 0;
		{
			$_g = 0;
			while($_g < $values->length) {
				$value = $values[$_g];
				++$_g;
				{
					$_g1 = 0;
					while($_g1 < $types->length) {
						$type = $types[$_g1];
						++$_g1;
						++$i;
						thx_Assert::is($value, $type, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 104, "className" => "thx.TestAssert", "methodName" => "testIs")));
						unset($type);
					}
					unset($_g1);
				}
				unset($value);
			}
		}
		$this->expect(12, $i - 12, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 106, "className" => "thx.TestAssert", "methodName" => "testIs")));
	}
	public function testSamePrimitive() {
		thx_Assert::same(null, 1, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 110, "className" => "thx.TestAssert", "methodName" => "testSamePrimitive")));
		thx_Assert::same(1, 1, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 111, "className" => "thx.TestAssert", "methodName" => "testSamePrimitive")));
		thx_Assert::same(1, "1", null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 112, "className" => "thx.TestAssert", "methodName" => "testSamePrimitive")));
		thx_Assert::same("a", "a", null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 113, "className" => "thx.TestAssert", "methodName" => "testSamePrimitive")));
		thx_Assert::same(null, "", null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 114, "className" => "thx.TestAssert", "methodName" => "testSamePrimitive")));
		thx_Assert::same(new Date(2000, 0, 1, 0, 0, 0), null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 115, "className" => "thx.TestAssert", "methodName" => "testSamePrimitive")));
		$_g = new haxe_ds_IntMap();
		$_g->set(1, "a");
		$_g->set(2, "b");
		$_g1 = new haxe_ds_IntMap();
		$_g1->set(1, "a");
		$_g1->set(2, "b");
		thx_Assert::same($_g, $_g1, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 116, "className" => "thx.TestAssert", "methodName" => "testSamePrimitive")));
		$_g2 = new haxe_ds_StringMap();
		$_g2->set("a", 1);
		$_g3 = new haxe_ds_StringMap();
		$_g3->set("a", 1);
		thx_Assert::same($_g2, $_g3, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 117, "className" => "thx.TestAssert", "methodName" => "testSamePrimitive")));
		$_g4 = new haxe_ds_StringMap();
		$_g4->set("a", 1);
		$_g5 = new haxe_ds_IntMap();
		$_g5->set(1, 1);
		thx_Assert::same($_g4, $_g5, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 118, "className" => "thx.TestAssert", "methodName" => "testSamePrimitive")));
		$_g6 = new haxe_ds_IntMap();
		$_g6->set(1, "a");
		$_g7 = new haxe_ds_IntMap();
		$_g7->set(1, "a");
		$_g7->set(2, "b");
		thx_Assert::same($_g6, $_g7, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 119, "className" => "thx.TestAssert", "methodName" => "testSamePrimitive")));
		$tmp = new Date(2000, 0, 1, 0, 0, 0);
		thx_Assert::same($tmp, new Date(2000, 0, 1, 0, 0, 0), null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 120, "className" => "thx.TestAssert", "methodName" => "testSamePrimitive")));
		$this->expect(5, 6, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 122, "className" => "thx.TestAssert", "methodName" => "testSamePrimitive")));
	}
	public function testSameType() {
		thx_Assert::same(null, _hx_anonymous(array()), null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 126, "className" => "thx.TestAssert", "methodName" => "testSameType")));
		thx_Assert::same(null, null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 127, "className" => "thx.TestAssert", "methodName" => "testSameType")));
		thx_Assert::same(_hx_anonymous(array()), null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 128, "className" => "thx.TestAssert", "methodName" => "testSameType")));
		thx_Assert::same(_hx_anonymous(array()), 1, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 129, "className" => "thx.TestAssert", "methodName" => "testSameType")));
		thx_Assert::same(_hx_anonymous(array()), (new _hx_array(array())), null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 130, "className" => "thx.TestAssert", "methodName" => "testSameType")));
		thx_Assert::same(null, thx__TestAssert_Sample::$None, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 131, "className" => "thx.TestAssert", "methodName" => "testSameType")));
		thx_Assert::same(thx__TestAssert_Sample::$None, null, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 132, "className" => "thx.TestAssert", "methodName" => "testSameType")));
		$this->expect(1, 6, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 134, "className" => "thx.TestAssert", "methodName" => "testSameType")));
	}
	public function testSameArray() {
		thx_Assert::same((new _hx_array(array())), (new _hx_array(array())), null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 138, "className" => "thx.TestAssert", "methodName" => "testSameArray")));
		thx_Assert::same((new _hx_array(array(1))), (new _hx_array(array("1"))), null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 139, "className" => "thx.TestAssert", "methodName" => "testSameArray")));
		thx_Assert::same((new _hx_array(array(1, 2, 3))), (new _hx_array(array(1, 2, 3))), null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 140, "className" => "thx.TestAssert", "methodName" => "testSameArray")));
		thx_Assert::same((new _hx_array(array(1, 2, 3))), (new _hx_array(array(1, 2))), null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 141, "className" => "thx.TestAssert", "methodName" => "testSameArray")));
		thx_Assert::same((new _hx_array(array(1, 2))), (new _hx_array(array(1, 2, 3))), null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 142, "className" => "thx.TestAssert", "methodName" => "testSameArray")));
		thx_Assert::same((new _hx_array(array(1, (new _hx_array(array(1, 2)))))), (new _hx_array(array(1, (new _hx_array(array(1, 2)))))), null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 143, "className" => "thx.TestAssert", "methodName" => "testSameArray")));
		thx_Assert::same((new _hx_array(array(1, (new _hx_array(array(1, 2)))))), (new _hx_array(array(1, (new _hx_array(array()))))), false, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 144, "className" => "thx.TestAssert", "methodName" => "testSameArray")));
		thx_Assert::same((new _hx_array(array(1, (new _hx_array(array(1, 2)))))), (new _hx_array(array(1, (new _hx_array(array()))))), true, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 145, "className" => "thx.TestAssert", "methodName" => "testSameArray")));
		$this->expect(4, 4, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 147, "className" => "thx.TestAssert", "methodName" => "testSameArray")));
	}
	public function testSameObject() {
		thx_Assert::same(_hx_anonymous(array()), _hx_anonymous(array()), null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 151, "className" => "thx.TestAssert", "methodName" => "testSameObject")));
		thx_Assert::same(_hx_anonymous(array("a" => 1)), _hx_anonymous(array("a" => "1")), null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 152, "className" => "thx.TestAssert", "methodName" => "testSameObject")));
		thx_Assert::same(_hx_anonymous(array("a" => 1, "b" => "c")), _hx_anonymous(array("a" => 1, "b" => "c")), null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 153, "className" => "thx.TestAssert", "methodName" => "testSameObject")));
		thx_Assert::same(_hx_anonymous(array("a" => 1, "b" => "c")), _hx_anonymous(array("a" => 1, "c" => "c")), null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 154, "className" => "thx.TestAssert", "methodName" => "testSameObject")));
		thx_Assert::same(_hx_anonymous(array("a" => 1, "b" => "c")), _hx_anonymous(array("a" => 1)), null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 155, "className" => "thx.TestAssert", "methodName" => "testSameObject")));
		thx_Assert::same(_hx_anonymous(array("a" => 1, "b" => _hx_anonymous(array("a" => 1, "c" => "c")))), _hx_anonymous(array("a" => 1, "b" => _hx_anonymous(array("a" => 1, "c" => "c")))), null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 156, "className" => "thx.TestAssert", "methodName" => "testSameObject")));
		thx_Assert::same(_hx_anonymous(array("a" => 1, "b" => _hx_anonymous(array("a" => 1, "c" => "c")))), _hx_anonymous(array("a" => 1, "b" => _hx_anonymous(array()))), false, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 157, "className" => "thx.TestAssert", "methodName" => "testSameObject")));
		thx_Assert::same(_hx_anonymous(array("a" => 1, "b" => _hx_anonymous(array("a" => 1, "c" => "c")))), _hx_anonymous(array("a" => 1, "b" => _hx_anonymous(array()))), true, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 158, "className" => "thx.TestAssert", "methodName" => "testSameObject")));
		$this->expect(4, 4, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 160, "className" => "thx.TestAssert", "methodName" => "testSameObject")));
	}
	public $value;
	public $sub;
	public function testSameInstance() {
		$c1 = new thx_TestAssert();
		$c1->value = "a";
		$c2 = new thx_TestAssert();
		$c2->value = "a";
		$c3 = new thx_TestAssert();
		$r1 = new thx_TestAssert();
		$r1->sub = $c1;
		$r2 = new thx_TestAssert();
		$r2->sub = $c2;
		$r3 = new thx_TestAssert();
		$r3->sub = $c3;
		thx_Assert::same($c1, $c1, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 180, "className" => "thx.TestAssert", "methodName" => "testSameInstance")));
		thx_Assert::same($c1, $c2, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 181, "className" => "thx.TestAssert", "methodName" => "testSameInstance")));
		thx_Assert::same($c1, $c3, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 182, "className" => "thx.TestAssert", "methodName" => "testSameInstance")));
		thx_Assert::same($r1, $r2, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 184, "className" => "thx.TestAssert", "methodName" => "testSameInstance")));
		thx_Assert::same($r1, $r3, false, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 185, "className" => "thx.TestAssert", "methodName" => "testSameInstance")));
		thx_Assert::same($r1, $r3, true, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 186, "className" => "thx.TestAssert", "methodName" => "testSameInstance")));
		$this->expect(4, 2, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 188, "className" => "thx.TestAssert", "methodName" => "testSameInstance")));
	}
	public function testSameIterable() {
		$list1 = new HList();
		$list1->add("a");
		$list1->add(1);
		$s1 = new HList();
		$s1->add(2);
		$list1->add($s1);
		$list2 = new HList();
		$list2->add("a");
		$list2->add(1);
		$list2->add($s1);
		$list3 = new HList();
		$list3->add("a");
		$list3->add(1);
		$list3->add(new HList());
		thx_Assert::same($list1, $list2, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 207, "className" => "thx.TestAssert", "methodName" => "testSameIterable")));
		thx_Assert::same($list1, $list3, false, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 208, "className" => "thx.TestAssert", "methodName" => "testSameIterable")));
		thx_Assert::same($list1, $list3, true, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 209, "className" => "thx.TestAssert", "methodName" => "testSameIterable")));
		$tmp = new IntIterator(0, 3);
		thx_Assert::same($tmp, new IntIterator(0, 3), null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 211, "className" => "thx.TestAssert", "methodName" => "testSameIterable")));
		$tmp1 = new IntIterator(0, 3);
		thx_Assert::same($tmp1, new IntIterator(0, 4), null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 212, "className" => "thx.TestAssert", "methodName" => "testSameIterable")));
		$this->expect(3, 2, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 214, "className" => "thx.TestAssert", "methodName" => "testSameIterable")));
	}
	public function testSameMap() {
		$h1 = new haxe_ds_StringMap();
		$h1->set("a", "b");
		$h1->set("c", "d");
		$h2 = new haxe_ds_StringMap();
		$h2->set("a", "b");
		$h2->set("c", "d");
		$h3 = new haxe_ds_StringMap();
		$h4 = new haxe_ds_StringMap();
		$h4->set("c", "d");
		$i1 = new haxe_ds_IntMap();
		$i1->set(2, "b");
		$i2 = new haxe_ds_IntMap();
		$i2->set(2, "b");
		thx_Assert::same($h1, $h2, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 233, "className" => "thx.TestAssert", "methodName" => "testSameMap")));
		thx_Assert::same($h1, $h3, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 234, "className" => "thx.TestAssert", "methodName" => "testSameMap")));
		thx_Assert::same($h1, $h4, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 235, "className" => "thx.TestAssert", "methodName" => "testSameMap")));
		thx_Assert::same($i1, $i2, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 236, "className" => "thx.TestAssert", "methodName" => "testSameMap")));
		$this->expect(2, 2, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 238, "className" => "thx.TestAssert", "methodName" => "testSameMap")));
	}
	public function testSameEnums() {
		thx_Assert::same(thx__TestAssert_Sample::$None, thx__TestAssert_Sample::$None, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 243, "className" => "thx.TestAssert", "methodName" => "testSameEnums")));
		$tmp = thx__TestAssert_Sample::Some("a");
		$tmp1 = thx__TestAssert_Sample::Some("a");
		thx_Assert::same($tmp, $tmp1, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 244, "className" => "thx.TestAssert", "methodName" => "testSameEnums")));
		$tmp2 = thx__TestAssert_Sample::Some("a");
		$tmp3 = thx__TestAssert_Sample::Some("b");
		thx_Assert::same($tmp2, $tmp3, true, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 245, "className" => "thx.TestAssert", "methodName" => "testSameEnums")));
		$tmp4 = thx__TestAssert_Sample::Some("a");
		$tmp5 = thx__TestAssert_Sample::Some("b");
		thx_Assert::same($tmp4, $tmp5, false, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 246, "className" => "thx.TestAssert", "methodName" => "testSameEnums")));
		$tmp6 = thx__TestAssert_Sample::Some("a");
		thx_Assert::same($tmp6, thx__TestAssert_Sample::$None, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 247, "className" => "thx.TestAssert", "methodName" => "testSameEnums")));
		$tmp7 = thx__TestAssert_Sample::Some("a");
		$tmp8 = thx__TestAssert_Sample::Rec($tmp7);
		$tmp9 = thx__TestAssert_Sample::Rec($tmp8);
		$tmp10 = thx__TestAssert_Sample::Some("a");
		$tmp11 = thx__TestAssert_Sample::Rec($tmp10);
		$tmp12 = thx__TestAssert_Sample::Rec($tmp11);
		thx_Assert::same($tmp9, $tmp12, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 248, "className" => "thx.TestAssert", "methodName" => "testSameEnums")));
		$tmp13 = thx__TestAssert_Sample::Some("a");
		$tmp14 = thx__TestAssert_Sample::Rec($tmp13);
		$tmp15 = thx__TestAssert_Sample::Rec($tmp14);
		$tmp16 = thx__TestAssert_Sample::Rec(thx__TestAssert_Sample::$None);
		thx_Assert::same($tmp15, $tmp16, true, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 249, "className" => "thx.TestAssert", "methodName" => "testSameEnums")));
		$tmp17 = thx__TestAssert_Sample::Some("a");
		$tmp18 = thx__TestAssert_Sample::Rec($tmp17);
		$tmp19 = thx__TestAssert_Sample::Rec($tmp18);
		$tmp20 = thx__TestAssert_Sample::Rec(thx__TestAssert_Sample::$None);
		$tmp21 = thx__TestAssert_Sample::Rec($tmp20);
		thx_Assert::same($tmp19, $tmp21, false, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 250, "className" => "thx.TestAssert", "methodName" => "testSameEnums")));
		$this->expect(4, 4, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 252, "className" => "thx.TestAssert", "methodName" => "testSameEnums")));
	}
	public function testEquals() {
		$values = (new _hx_array(array("e", 1, 0.1, _hx_anonymous(array()))));
		$expecteds = (new _hx_array(array("e", 1, 0.1, _hx_anonymous(array()))));
		$i = 0;
		{
			$_g = 0;
			while($_g < $expecteds->length) {
				$expected = $expecteds[$_g];
				++$_g;
				{
					$_g1 = 0;
					while($_g1 < $values->length) {
						$value = $values[$_g1];
						++$_g1;
						++$i;
						thx_Assert::equals($expected, $value, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 263, "className" => "thx.TestAssert", "methodName" => "testEquals")));
						unset($value);
					}
					unset($_g1);
				}
				unset($expected);
			}
		}
		$this->expect(3, $i - 3, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 265, "className" => "thx.TestAssert", "methodName" => "testEquals")));
	}
	public function testNearEqualsSuccess() {
		$counter = 0;
		$tests = (new _hx_array(array(_hx_anonymous(array("expected" => 0.1, "tests" => (new _hx_array(array(0.1, 0.100000000000000000000000000001, 0.099999999999999999999999999999))))), _hx_anonymous(array("expected" => 1, "tests" => (new _hx_array(array(1, 1.000000000000000000000000000001, 0.999999999999999999999999999999))))), _hx_anonymous(array("expected" => Math::$NaN, "tests" => (new _hx_array(array(Math::$NaN))))), _hx_anonymous(array("expected" => Math::$NEGATIVE_INFINITY, "tests" => (new _hx_array(array(Math::$NEGATIVE_INFINITY))))), _hx_anonymous(array("expected" => Math::$POSITIVE_INFINITY, "tests" => (new _hx_array(array(Math::$POSITIVE_INFINITY))))), _hx_anonymous(array("expected" => Math::$PI, "tests" => (new _hx_array(array(Math::$PI))))))));
		{
			$_g = 0;
			while($_g < $tests->length) {
				$test = $tests[$_g];
				++$_g;
				{
					$_g1 = 0;
					$_g2 = $test->tests;
					while($_g1 < $_g2->length) {
						$value = $_g2[$_g1];
						++$_g1;
						++$counter;
						thx_Assert::nearEquals($test->expected, $value, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 281, "className" => "thx.TestAssert", "methodName" => "testNearEqualsSuccess")));
						unset($value);
					}
					unset($_g2,$_g1);
				}
				unset($test);
			}
		}
		$this->expect($counter, 0, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 284, "className" => "thx.TestAssert", "methodName" => "testNearEqualsSuccess")));
	}
	public function testNearEqualsFail() {
		$counter = 0;
		$tests = (new _hx_array(array(_hx_anonymous(array("expected" => 0.1, "tests" => (new _hx_array(array(0.2, 0.10000001, 0.0999998, Math::$NaN, Math::$POSITIVE_INFINITY, Math::$NEGATIVE_INFINITY))))), _hx_anonymous(array("expected" => Math::$NaN, "tests" => (new _hx_array(array(2, 1.1, 0.9, Math::$POSITIVE_INFINITY, Math::$NEGATIVE_INFINITY))))), _hx_anonymous(array("expected" => Math::$NEGATIVE_INFINITY, "tests" => (new _hx_array(array(2, 1.1, 0.9, Math::$NaN, Math::$POSITIVE_INFINITY))))), _hx_anonymous(array("expected" => Math::$POSITIVE_INFINITY, "tests" => (new _hx_array(array(2, 1.1, 0.9, Math::$NaN, Math::$NEGATIVE_INFINITY))))))));
		{
			$_g = 0;
			while($_g < $tests->length) {
				$test = $tests[$_g];
				++$_g;
				{
					$_g1 = 0;
					$_g2 = $test->tests;
					while($_g1 < $_g2->length) {
						$value = $_g2[$_g1];
						++$_g1;
						++$counter;
						thx_Assert::nearEquals($test->expected, $value, null, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 299, "className" => "thx.TestAssert", "methodName" => "testNearEqualsFail")));
						unset($value);
					}
					unset($_g2,$_g1);
				}
				unset($test);
			}
		}
		$this->expect(0, $counter, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 302, "className" => "thx.TestAssert", "methodName" => "testNearEqualsFail")));
	}
	public function testPass() {
		thx_Assert::pass(null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 306, "className" => "thx.TestAssert", "methodName" => "testPass")));
		$this->expect(1, 0, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 307, "className" => "thx.TestAssert", "methodName" => "testPass")));
	}
	public function testFail() {
		thx_Assert::fail(null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 311, "className" => "thx.TestAssert", "methodName" => "testFail")));
		$this->expect(0, 1, null, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 312, "className" => "thx.TestAssert", "methodName" => "testFail")));
	}
	public function testWarn() {
		thx_Assert::warn("", _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 316, "className" => "thx.TestAssert", "methodName" => "testWarn")));
		$this->expect(0, 0, 1, _hx_anonymous(array("fileName" => "TestAssert.hx", "lineNumber" => 317, "className" => "thx.TestAssert", "methodName" => "testWarn")));
	}
	public function expect($successes, $failures, $warnings = null, $pos = null) {
		if($warnings === null) {
			$warnings = 0;
		}
		$tmp = $this->behavior->successes;
		$tmp1 = "expected " . _hx_string_rec($successes, "") . " successes but they are " . _hx_string_rec($this->behavior->successes, "");
		utest_Assert::equals($successes, $tmp, $tmp1, $pos);
		$tmp2 = $this->behavior->failures;
		$tmp3 = "expected " . _hx_string_rec($failures, "") . " failures but they are " . _hx_string_rec($this->behavior->failures, "");
		utest_Assert::equals($failures, $tmp2, $tmp3, $pos);
		$tmp4 = $this->behavior->warnings;
		$tmp5 = "expected " . _hx_string_rec($warnings, "") . " warnings but they are " . _hx_string_rec($this->behavior->warnings, "");
		utest_Assert::equals($warnings, $tmp4, $tmp5, $pos);
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.TestAssert'; }
}
function thx_TestAssert_0(&$test) {
	{
		throw new HException($test->{"exception"});
	}
}
function thx_TestAssert_1(&$test) {
	{
		throw new HException($test->{"exception"});
	}
}
