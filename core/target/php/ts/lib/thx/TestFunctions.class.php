<?php

// Generated by Haxe 3.3.0
class thx_TestFunctions {
	public function __construct() {}
	public function testAfter() {
		$counter = 0;
		$test = array(new _hx_lambda(array(&$counter), "thx_TestFunctions_0"), 'execute');
		$callback = $test;
		$n = 3;
		$manage = array(new _hx_lambda(array(&$callback, &$n), "thx_TestFunctions_1"), 'execute');
		utest_Assert::equals(0, $counter, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 14, "className" => "thx.TestFunctions", "methodName" => "testAfter")));
		call_user_func($manage);
		utest_Assert::equals(0, $counter, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 16, "className" => "thx.TestFunctions", "methodName" => "testAfter")));
		call_user_func($manage);
		utest_Assert::equals(0, $counter, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 18, "className" => "thx.TestFunctions", "methodName" => "testAfter")));
		call_user_func($manage);
		utest_Assert::equals(1, $counter, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 20, "className" => "thx.TestFunctions", "methodName" => "testAfter")));
		call_user_func($manage);
		utest_Assert::equals(1, $counter, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 22, "className" => "thx.TestFunctions", "methodName" => "testAfter")));
	}
	public function testOnce() {
		$counter = 0;
		$test = array(new _hx_lambda(array(&$counter), "thx_TestFunctions_2"), 'execute');
		$f = $test;
		$manage = array(new _hx_lambda(array(&$f), "thx_TestFunctions_3"), 'execute');
		utest_Assert::equals(0, $counter, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 30, "className" => "thx.TestFunctions", "methodName" => "testOnce")));
		call_user_func($manage);
		utest_Assert::equals(1, $counter, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 32, "className" => "thx.TestFunctions", "methodName" => "testOnce")));
		call_user_func($manage);
		utest_Assert::equals(1, $counter, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 34, "className" => "thx.TestFunctions", "methodName" => "testOnce")));
	}
	public function testMemoize() {
		$counter = 0;
		$test = array(new _hx_lambda(array(&$counter), "thx_TestFunctions_4"), 'execute');
		$manage = thx_Functions1::memoize($test, null);
		utest_Assert::equals(0, $counter, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 45, "className" => "thx.TestFunctions", "methodName" => "testMemoize")));
		$tmp = call_user_func_array($manage, array(1));
		utest_Assert::equals(10, $tmp, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 46, "className" => "thx.TestFunctions", "methodName" => "testMemoize")));
		utest_Assert::equals(1, $counter, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 47, "className" => "thx.TestFunctions", "methodName" => "testMemoize")));
		$tmp1 = call_user_func_array($manage, array(1));
		utest_Assert::equals(10, $tmp1, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 48, "className" => "thx.TestFunctions", "methodName" => "testMemoize")));
		utest_Assert::equals(1, $counter, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 49, "className" => "thx.TestFunctions", "methodName" => "testMemoize")));
		$tmp2 = call_user_func_array($manage, array(2));
		utest_Assert::equals(20, $tmp2, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 50, "className" => "thx.TestFunctions", "methodName" => "testMemoize")));
		utest_Assert::equals(2, $counter, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 51, "className" => "thx.TestFunctions", "methodName" => "testMemoize")));
	}
	public function testNegate() {
		utest_Assert::isFalse(false, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 55, "className" => "thx.TestFunctions", "methodName" => "testNegate")));
	}
	function __toString() { return 'thx.TestFunctions'; }
}
function thx_TestFunctions_0(&$counter) {
	{
		$tmp = ++$counter;
		utest_Assert::equals(1, $tmp, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 11, "className" => "thx.TestFunctions", "methodName" => "testAfter")));
	}
}
function thx_TestFunctions_1(&$callback, &$n) {
	{
		$tmp1 = --$n;
		if($tmp1 === 0) {
			call_user_func($callback);
		}
	}
}
function thx_TestFunctions_2(&$counter) {
	{
		$tmp = ++$counter;
		utest_Assert::equals(1, $tmp, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 27, "className" => "thx.TestFunctions", "methodName" => "testOnce")));
	}
}
function thx_TestFunctions_3(&$f) {
	{
		$t = $f;
		$f = (isset(thx_Functions::$noop) ? thx_Functions::$noop: array("thx_Functions", "noop"));
		call_user_func($t);
	}
}
function thx_TestFunctions_4(&$counter, $x) {
	{
		++$counter;
		return $x * 10;
	}
}
