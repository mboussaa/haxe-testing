<?php

// Generated by Haxe 3.3.0
class thx_TestNulls {
	public function __construct() {
		if(!php_Boot::$skip_constructor) {
		$this->ensureField = null;
		$this->withValue = "A";
	}}
	public $withValue;
	public $withoutValue;
	public $getter;
	public function get_getter() {
		return "A";
	}
	public $v;
	public function get_setter() {
		return $this->v;
	}
	public function set_setter($v) {
		return $this->v = $v;
	}
	public $nested;
	public $empty;
	public function setup() {
		$this->v = null;
		$this->nested = _hx_anonymous(array("a" => _hx_anonymous(array("b" => "A"))));
		$this->{"empty"} = null;
	}
	public function testOr() {
		$_gthis = $this;
		$s = null;
		$_0 = $s;
		$t = null;
		if(null === $_0) {
			$t = null;
		} else {
			$t = $_0;
		}
		$tmp = null;
		if($t !== null) {
			$tmp = $t;
		} else {
			$tmp = "B";
		}
		utest_Assert::equals("B", $tmp, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 31, "className" => "thx.TestNulls", "methodName" => "testOr")));
		$s = "A";
		$t1 = null;
		if(false) {
			$t1 = null;
		} else {
			$t1 = "A";
		}
		$tmp1 = null;
		if($t1 !== null) {
			$tmp1 = $t1;
		} else {
			$tmp1 = "B";
		}
		utest_Assert::equals("A", $tmp1, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 33, "className" => "thx.TestNulls", "methodName" => "testOr")));
		$s1 = null;
		$_01 = $s1;
		$t2 = null;
		if(null === $_01) {
			$t2 = null;
		} else {
			$t2 = $_01;
		}
		$tmp2 = null;
		if($t2 !== null) {
			$tmp2 = $t2;
		} else {
			$tmp2 = "B";
		}
		utest_Assert::equals("B", $tmp2, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 36, "className" => "thx.TestNulls", "methodName" => "testOr")));
		$s1 = "A";
		$t3 = null;
		if(false) {
			$t3 = null;
		} else {
			$t3 = "A";
		}
		$tmp3 = null;
		if($t3 !== null) {
			$tmp3 = $t3;
		} else {
			$tmp3 = "B";
		}
		utest_Assert::equals("A", $tmp3, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 38, "className" => "thx.TestNulls", "methodName" => "testOr")));
		$t4 = null;
		if(null === $_gthis) {
			$t4 = null;
		} else {
			$_1 = $_gthis->withValue;
			if(null === $_1) {
				$t4 = null;
			} else {
				$t4 = $_1;
			}
		}
		$tmp4 = null;
		if($t4 !== null) {
			$tmp4 = $t4;
		} else {
			$tmp4 = "B";
		}
		utest_Assert::equals("A", $tmp4, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 40, "className" => "thx.TestNulls", "methodName" => "testOr")));
		$t5 = null;
		if(null === $_gthis) {
			$t5 = null;
		} else {
			$_11 = $_gthis->withValue;
			if(null === $_11) {
				$t5 = null;
			} else {
				$t5 = $_11;
			}
		}
		$tmp5 = null;
		if($t5 !== null) {
			$tmp5 = $t5;
		} else {
			$tmp5 = "B";
		}
		utest_Assert::equals("A", $tmp5, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 41, "className" => "thx.TestNulls", "methodName" => "testOr")));
		$t6 = null;
		if(null === $_gthis) {
			$t6 = null;
		} else {
			$_12 = $_gthis->withoutValue;
			if(null === $_12) {
				$t6 = null;
			} else {
				$t6 = $_12;
			}
		}
		$tmp6 = null;
		if($t6 !== null) {
			$tmp6 = $t6;
		} else {
			$tmp6 = "B";
		}
		utest_Assert::equals("B", $tmp6, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 43, "className" => "thx.TestNulls", "methodName" => "testOr")));
		$t7 = null;
		if(null === $_gthis) {
			$t7 = null;
		} else {
			$_13 = $_gthis->withoutValue;
			if(null === $_13) {
				$t7 = null;
			} else {
				$t7 = $_13;
			}
		}
		$tmp7 = null;
		if($t7 !== null) {
			$tmp7 = $t7;
		} else {
			$tmp7 = "B";
		}
		utest_Assert::equals("B", $tmp7, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 44, "className" => "thx.TestNulls", "methodName" => "testOr")));
		$o = _hx_anonymous(array("a" => "A", "b" => null));
		$t8 = null;
		if(null === $o) {
			$t8 = null;
		} else {
			$_14 = $o->a;
			if(null === $_14) {
				$t8 = null;
			} else {
				$t8 = $_14;
			}
		}
		$tmp8 = null;
		if($t8 !== null) {
			$tmp8 = $t8;
		} else {
			$tmp8 = "B";
		}
		utest_Assert::equals("A", $tmp8, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 48, "className" => "thx.TestNulls", "methodName" => "testOr")));
		$t9 = null;
		if(null === $o) {
			$t9 = null;
		} else {
			$_15 = $o->a;
			if(null === $_15) {
				$t9 = null;
			} else {
				$t9 = $_15;
			}
		}
		$tmp9 = null;
		if($t9 !== null) {
			$tmp9 = $t9;
		} else {
			$tmp9 = "B";
		}
		utest_Assert::equals("A", $tmp9, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 49, "className" => "thx.TestNulls", "methodName" => "testOr")));
		$t10 = null;
		if(null === $o) {
			$t10 = null;
		} else {
			$_16 = $o->b;
			if(null === $_16) {
				$t10 = null;
			} else {
				$t10 = $_16;
			}
		}
		$tmp10 = null;
		if($t10 !== null) {
			$tmp10 = $t10;
		} else {
			$tmp10 = "B";
		}
		utest_Assert::equals("B", $tmp10, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 51, "className" => "thx.TestNulls", "methodName" => "testOr")));
		$t11 = null;
		if(null === $o) {
			$t11 = null;
		} else {
			$_17 = $o->b;
			if(null === $_17) {
				$t11 = null;
			} else {
				$t11 = $_17;
			}
		}
		$tmp11 = null;
		if($t11 !== null) {
			$tmp11 = $t11;
		} else {
			$tmp11 = "B";
		}
		utest_Assert::equals("B", $tmp11, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 52, "className" => "thx.TestNulls", "methodName" => "testOr")));
		$t12 = null;
		if(null === $_gthis) {
			$t12 = null;
		} else {
			$_18 = $_gthis->get_getter();
			if(null === $_18) {
				$t12 = null;
			} else {
				$t12 = $_18;
			}
		}
		$tmp12 = null;
		if($t12 !== null) {
			$tmp12 = $t12;
		} else {
			$tmp12 = "B";
		}
		utest_Assert::equals("A", $tmp12, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 54, "className" => "thx.TestNulls", "methodName" => "testOr")));
		$t13 = null;
		if(null === $_gthis) {
			$t13 = null;
		} else {
			$_19 = $_gthis->get_getter();
			if(null === $_19) {
				$t13 = null;
			} else {
				$t13 = $_19;
			}
		}
		$tmp13 = null;
		if($t13 !== null) {
			$tmp13 = $t13;
		} else {
			$tmp13 = "B";
		}
		utest_Assert::equals("A", $tmp13, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 55, "className" => "thx.TestNulls", "methodName" => "testOr")));
		$t14 = null;
		if(null === $_gthis) {
			$t14 = null;
		} else {
			$_110 = $_gthis->get_setter();
			if(null === $_110) {
				$t14 = null;
			} else {
				$t14 = $_110;
			}
		}
		$tmp14 = null;
		if($t14 !== null) {
			$tmp14 = $t14;
		} else {
			$tmp14 = "B";
		}
		utest_Assert::equals("B", $tmp14, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 57, "className" => "thx.TestNulls", "methodName" => "testOr")));
		$t15 = null;
		if(null === $_gthis) {
			$t15 = null;
		} else {
			$_111 = $_gthis->get_setter();
			if(null === $_111) {
				$t15 = null;
			} else {
				$t15 = $_111;
			}
		}
		$tmp15 = null;
		if($t15 !== null) {
			$tmp15 = $t15;
		} else {
			$tmp15 = "B";
		}
		utest_Assert::equals("B", $tmp15, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 58, "className" => "thx.TestNulls", "methodName" => "testOr")));
		$this->set_setter("A");
		$t16 = null;
		if(null === $_gthis) {
			$t16 = null;
		} else {
			$_112 = $_gthis->get_setter();
			if(null === $_112) {
				$t16 = null;
			} else {
				$t16 = $_112;
			}
		}
		$tmp16 = null;
		if($t16 !== null) {
			$tmp16 = $t16;
		} else {
			$tmp16 = "B";
		}
		utest_Assert::equals("A", $tmp16, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 61, "className" => "thx.TestNulls", "methodName" => "testOr")));
		$t17 = null;
		if(null === $_gthis) {
			$t17 = null;
		} else {
			$_113 = $_gthis->get_setter();
			if(null === $_113) {
				$t17 = null;
			} else {
				$t17 = $_113;
			}
		}
		$tmp17 = null;
		if($t17 !== null) {
			$tmp17 = $t17;
		} else {
			$tmp17 = "B";
		}
		utest_Assert::equals("A", $tmp17, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 62, "className" => "thx.TestNulls", "methodName" => "testOr")));
	}
	public function testOpt() {
		$_gthis = $this;
		$o = null;
		$_0 = $o;
		$tmp = null;
		if(null === $_0) {
			$tmp = null;
		} else {
			$_1 = $_0->a;
			if(null === $_1) {
				$tmp = null;
			} else {
				$_2 = $_1->b;
				if(null === $_2) {
					$tmp = null;
				} else {
					$_3 = $_2->c;
					if(null === $_3) {
						$tmp = null;
					} else {
						$tmp = $_3;
					}
				}
			}
		}
		utest_Assert::isNull($tmp, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 68, "className" => "thx.TestNulls", "methodName" => "testOpt")));
		$_01 = $o;
		$tmp1 = null;
		if(null === $_01) {
			$tmp1 = null;
		} else {
			$_11 = $_01->a;
			if(null === $_11) {
				$tmp1 = null;
			} else {
				$_21 = $_11->b;
				if(null === $_21) {
					$tmp1 = null;
				} else {
					$_31 = $_21->c;
					if(null === $_31) {
						$tmp1 = null;
					} else {
						$tmp1 = $_31;
					}
				}
			}
		}
		utest_Assert::isNull($tmp1, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 69, "className" => "thx.TestNulls", "methodName" => "testOpt")));
		$_02 = $o;
		$tmp2 = null;
		if(null === $_02) {
			$tmp2 = null;
		} else {
			$_12 = $_02->a;
			if(null === $_12) {
				$tmp2 = null;
			} else {
				$_22 = $_12->b;
				if(null === $_22) {
					$tmp2 = null;
				} else {
					$_32 = $_22->c;
					if(null === $_32) {
						$tmp2 = null;
					} else {
						$tmp2 = $_32;
					}
				}
			}
		}
		utest_Assert::isNull($tmp2, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 70, "className" => "thx.TestNulls", "methodName" => "testOpt")));
		$_03 = $o;
		$tmp3 = null;
		if(null === $_03) {
			$tmp3 = null;
		} else {
			$_13 = $_03->a;
			if(null === $_13) {
				$tmp3 = null;
			} else {
				$_23 = $_13->b;
				if(null === $_23) {
					$tmp3 = null;
				} else {
					$_33 = $_23->c;
					if(null === $_33) {
						$tmp3 = null;
					} else {
						$tmp3 = $_33;
					}
				}
			}
		}
		utest_Assert::isNull($tmp3, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 71, "className" => "thx.TestNulls", "methodName" => "testOpt")));
		$_04 = $o;
		$t = null;
		if(null === $_04) {
			$t = null;
		} else {
			$_14 = $_04->a;
			if(null === $_14) {
				$t = null;
			} else {
				$_24 = $_14->b;
				if(null === $_24) {
					$t = null;
				} else {
					$_34 = $_24->c;
					if(null === $_34) {
						$t = null;
					} else {
						$t = $_34;
					}
				}
			}
		}
		$tmp4 = null;
		if($t !== null) {
			$tmp4 = $t;
		} else {
			$tmp4 = "B";
		}
		utest_Assert::equals("B", $tmp4, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 73, "className" => "thx.TestNulls", "methodName" => "testOpt")));
		$o = _hx_anonymous(array("a" => _hx_anonymous(array("b" => _hx_anonymous(array("c" => "A"))))));
		$_05 = $o;
		$tmp5 = null;
		if(null === $_05) {
			$tmp5 = null;
		} else {
			$_15 = $_05->a;
			if(null === $_15) {
				$tmp5 = null;
			} else {
				$_25 = $_15->b;
				if(null === $_25) {
					$tmp5 = null;
				} else {
					$_35 = $_25->c;
					if(null === $_35) {
						$tmp5 = null;
					} else {
						$tmp5 = $_35;
					}
				}
			}
		}
		utest_Assert::equals("A", $tmp5, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 76, "className" => "thx.TestNulls", "methodName" => "testOpt")));
		$_06 = $o;
		$t1 = null;
		if(null === $_06) {
			$t1 = null;
		} else {
			$_16 = $_06->a;
			if(null === $_16) {
				$t1 = null;
			} else {
				$_26 = $_16->b;
				if(null === $_26) {
					$t1 = null;
				} else {
					$_36 = $_26->c;
					if(null === $_36) {
						$t1 = null;
					} else {
						$t1 = $_36;
					}
				}
			}
		}
		$tmp6 = null;
		if($t1 !== null) {
			$tmp6 = $t1;
		} else {
			$tmp6 = "B";
		}
		utest_Assert::equals("A", $tmp6, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 77, "className" => "thx.TestNulls", "methodName" => "testOpt")));
		$_07 = $o;
		$tmp7 = null;
		if(null === $_07) {
			$tmp7 = null;
		} else {
			$_17 = $_07->a;
			if(null === $_17) {
				$tmp7 = null;
			} else {
				$_27 = $_17->b;
				if(null === $_27) {
					$tmp7 = null;
				} else {
					$tmp7 = $_27;
				}
			}
		}
		utest_Assert::same(_hx_anonymous(array("c" => "A")), $tmp7, null, null, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 79, "className" => "thx.TestNulls", "methodName" => "testOpt")));
		$_08 = $o;
		$t2 = null;
		if(null === $_08) {
			$t2 = null;
		} else {
			$_18 = $_08->a;
			if(null === $_18) {
				$t2 = null;
			} else {
				$_28 = $_18->b;
				if(null === $_28) {
					$t2 = null;
				} else {
					$t2 = $_28;
				}
			}
		}
		$tmp8 = null;
		if($t2 !== null) {
			$tmp8 = $t2;
		} else {
			$tmp8 = _hx_anonymous(array("c" => "B"));
		}
		utest_Assert::same(_hx_anonymous(array("c" => "A")), $tmp8, null, null, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 80, "className" => "thx.TestNulls", "methodName" => "testOpt")));
		$o = _hx_anonymous(array("a" => _hx_anonymous(array("b" => null))));
		$_09 = $o;
		$tmp9 = null;
		if(null === $_09) {
			$tmp9 = null;
		} else {
			$_19 = $_09->a;
			if(null === $_19) {
				$tmp9 = null;
			} else {
				$_29 = $_19->b;
				if(null === $_29) {
					$tmp9 = null;
				} else {
					$_37 = $_29->c;
					if(null === $_37) {
						$tmp9 = null;
					} else {
						$tmp9 = $_37;
					}
				}
			}
		}
		utest_Assert::isNull($tmp9, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 83, "className" => "thx.TestNulls", "methodName" => "testOpt")));
		$_010 = $o;
		$t3 = null;
		if(null === $_010) {
			$t3 = null;
		} else {
			$_110 = $_010->a;
			if(null === $_110) {
				$t3 = null;
			} else {
				$_210 = $_110->b;
				if(null === $_210) {
					$t3 = null;
				} else {
					$_38 = $_210->c;
					if(null === $_38) {
						$t3 = null;
					} else {
						$t3 = $_38;
					}
				}
			}
		}
		$tmp10 = null;
		if($t3 !== null) {
			$tmp10 = $t3;
		} else {
			$tmp10 = "B";
		}
		utest_Assert::equals("B", $tmp10, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 84, "className" => "thx.TestNulls", "methodName" => "testOpt")));
		$_011 = $o;
		$tmp11 = null;
		if(null === $_011) {
			$tmp11 = null;
		} else {
			$_111 = $_011->a;
			if(null === $_111) {
				$tmp11 = null;
			} else {
				$_211 = $_111->b;
				if(null === $_211) {
					$tmp11 = null;
				} else {
					$tmp11 = $_211;
				}
			}
		}
		utest_Assert::isNull($tmp11, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 86, "className" => "thx.TestNulls", "methodName" => "testOpt")));
		$_012 = $o;
		$t4 = null;
		if(null === $_012) {
			$t4 = null;
		} else {
			$_112 = $_012->a;
			if(null === $_112) {
				$t4 = null;
			} else {
				$_212 = $_112->b;
				if(null === $_212) {
					$t4 = null;
				} else {
					$t4 = $_212;
				}
			}
		}
		$tmp12 = null;
		if($t4 !== null) {
			$tmp12 = $t4;
		} else {
			$tmp12 = _hx_anonymous(array("c" => "B"));
		}
		utest_Assert::same(_hx_anonymous(array("c" => "B")), $tmp12, null, null, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 87, "className" => "thx.TestNulls", "methodName" => "testOpt")));
		$tmp13 = null;
		if(null === $_gthis) {
			$tmp13 = null;
		} else {
			$_113 = $_gthis->nested;
			if(null === $_113) {
				$tmp13 = null;
			} else {
				$_213 = $_113->a;
				if(null === $_213) {
					$tmp13 = null;
				} else {
					$_39 = $_213->b;
					if(null === $_39) {
						$tmp13 = null;
					} else {
						$tmp13 = $_39;
					}
				}
			}
		}
		utest_Assert::equals("A", $tmp13, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 89, "className" => "thx.TestNulls", "methodName" => "testOpt")));
		$tmp14 = null;
		if(null === $_gthis) {
			$tmp14 = null;
		} else {
			$_114 = $_gthis->nested;
			if(null === $_114) {
				$tmp14 = null;
			} else {
				$_214 = $_114->a;
				if(null === $_214) {
					$tmp14 = null;
				} else {
					$_310 = $_214->b;
					if(null === $_310) {
						$tmp14 = null;
					} else {
						$tmp14 = $_310;
					}
				}
			}
		}
		utest_Assert::equals("A", $tmp14, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 90, "className" => "thx.TestNulls", "methodName" => "testOpt")));
		$tmp15 = null;
		if(null === $_gthis) {
			$tmp15 = null;
		} else {
			$_115 = $_gthis->{"empty"};
			if(null === $_115) {
				$tmp15 = null;
			} else {
				$_215 = $_115->a;
				if(null === $_215) {
					$tmp15 = null;
				} else {
					$_311 = $_215->b;
					if(null === $_311) {
						$tmp15 = null;
					} else {
						$tmp15 = $_311;
					}
				}
			}
		}
		utest_Assert::isNull($tmp15, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 92, "className" => "thx.TestNulls", "methodName" => "testOpt")));
		$tmp16 = null;
		if(null === $_gthis) {
			$tmp16 = null;
		} else {
			$_116 = $_gthis->{"empty"};
			if(null === $_116) {
				$tmp16 = null;
			} else {
				$_216 = $_116->a;
				if(null === $_216) {
					$tmp16 = null;
				} else {
					$_312 = $_216->b;
					if(null === $_312) {
						$tmp16 = null;
					} else {
						$tmp16 = $_312;
					}
				}
			}
		}
		utest_Assert::isNull($tmp16, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 93, "className" => "thx.TestNulls", "methodName" => "testOpt")));
		$arr = null;
		$_013 = $arr;
		$tmp17 = null;
		if(null === $_013) {
			$tmp17 = null;
		} else {
			$_117 = $_013->a;
			if(null === $_117) {
				$tmp17 = null;
			} else {
				$_217 = $_117[0];
				if(null === $_217) {
					$tmp17 = null;
				} else {
					$_313 = $_217->b;
					if(null === $_313) {
						$tmp17 = null;
					} else {
						$tmp17 = $_313;
					}
				}
			}
		}
		utest_Assert::isNull($tmp17, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 96, "className" => "thx.TestNulls", "methodName" => "testOpt")));
		$arr = _hx_anonymous(array("a" => (new _hx_array(array(_hx_anonymous(array("b" => "A")))))));
		$_014 = $arr;
		$tmp18 = null;
		if(null === $_014) {
			$tmp18 = null;
		} else {
			$_118 = $_014->a;
			if(null === $_118) {
				$tmp18 = null;
			} else {
				$_218 = $_118[1];
				if(null === $_218) {
					$tmp18 = null;
				} else {
					$_314 = $_218->b;
					if(null === $_314) {
						$tmp18 = null;
					} else {
						$tmp18 = $_314;
					}
				}
			}
		}
		utest_Assert::isNull($tmp18, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 98, "className" => "thx.TestNulls", "methodName" => "testOpt")));
		$_015 = $arr;
		$tmp19 = null;
		if(null === $_015) {
			$tmp19 = null;
		} else {
			$_119 = $_015->a;
			if(null === $_119) {
				$tmp19 = null;
			} else {
				$_219 = $_119[0];
				if(null === $_219) {
					$tmp19 = null;
				} else {
					$_315 = $_219->b;
					if(null === $_315) {
						$tmp19 = null;
					} else {
						$tmp19 = $_315;
					}
				}
			}
		}
		utest_Assert::equals("A", $tmp19, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 99, "className" => "thx.TestNulls", "methodName" => "testOpt")));
		$arr1 = null;
		$_016 = $arr1;
		$tmp20 = null;
		if(null === $_016) {
			$tmp20 = null;
		} else {
			$_120 = $_016[0];
			if(null === $_120) {
				$tmp20 = null;
			} else {
				$tmp20 = $_120;
			}
		}
		utest_Assert::isNull($tmp20, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 102, "className" => "thx.TestNulls", "methodName" => "testOpt")));
		$_017 = $arr1;
		$tmp21 = null;
		if(null === $_017) {
			$tmp21 = null;
		} else {
			$_121 = $_017[0];
			if(null === $_121) {
				$tmp21 = null;
			} else {
				$_220 = $_121[1];
				if(null === $_220) {
					$tmp21 = null;
				} else {
					$tmp21 = $_220;
				}
			}
		}
		utest_Assert::isNull($tmp21, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 103, "className" => "thx.TestNulls", "methodName" => "testOpt")));
		$_018 = $arr1;
		$tmp22 = null;
		if(null === $_018) {
			$tmp22 = null;
		} else {
			$_122 = $_018[0];
			if(null === $_122) {
				$tmp22 = null;
			} else {
				$_221 = $_122[1];
				if(null === $_221) {
					$tmp22 = null;
				} else {
					$_316 = $_221[3];
					if(null === $_316) {
						$tmp22 = null;
					} else {
						$tmp22 = $_316;
					}
				}
			}
		}
		utest_Assert::isNull($tmp22, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 104, "className" => "thx.TestNulls", "methodName" => "testOpt")));
		$arr1 = (new _hx_array(array((new _hx_array(array((new _hx_array(array(1, 2, 3))), (new _hx_array(array(4, 5, 6)))))))));
		$_019 = $arr1;
		$tmp23 = null;
		if(null === $_019) {
			$tmp23 = null;
		} else {
			$_123 = $_019[0];
			if(null === $_123) {
				$tmp23 = null;
			} else {
				$_222 = $_123[0];
				if(null === $_222) {
					$tmp23 = null;
				} else {
					$_317 = $_222[0];
					if(null === $_317) {
						$tmp23 = null;
					} else {
						$tmp23 = $_317;
					}
				}
			}
		}
		utest_Assert::equals(1, $tmp23, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 107, "className" => "thx.TestNulls", "methodName" => "testOpt")));
		$_020 = $arr1;
		$tmp24 = null;
		if(null === $_020) {
			$tmp24 = null;
		} else {
			$_124 = $_020[0];
			if(null === $_124) {
				$tmp24 = null;
			} else {
				$_223 = $_124[1];
				if(null === $_223) {
					$tmp24 = null;
				} else {
					$_318 = $_223[2];
					if(null === $_318) {
						$tmp24 = null;
					} else {
						$tmp24 = $_318;
					}
				}
			}
		}
		utest_Assert::equals(6, $tmp24, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 108, "className" => "thx.TestNulls", "methodName" => "testOpt")));
	}
	public function testOrWithIndex() {
		$arr = null;
		$t = null;
		if(null === $arr) {
			$t = null;
		} else {
			$_1 = $arr[0];
			if(null === $_1) {
				$t = null;
			} else {
				$_2 = $_1[1];
				if(null === $_2) {
					$t = null;
				} else {
					$_3 = $_2[3];
					if(null === $_3) {
						$t = null;
					} else {
						$t = $_3;
					}
				}
			}
		}
		$tmp = null;
		if($t !== null) {
			$tmp = $t;
		} else {
			$tmp = 7;
		}
		utest_Assert::equals(7, $tmp, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 114, "className" => "thx.TestNulls", "methodName" => "testOrWithIndex")));
		$t1 = null;
		if(null === $arr) {
			$t1 = null;
		} else {
			$_11 = $arr[4];
			if(null === $_11) {
				$t1 = null;
			} else {
				$_21 = $_11[1];
				if(null === $_21) {
					$t1 = null;
				} else {
					$_31 = $_21[3];
					if(null === $_31) {
						$t1 = null;
					} else {
						$t1 = $_31;
					}
				}
			}
		}
		$tmp1 = null;
		if($t1 !== null) {
			$tmp1 = $t1;
		} else {
			$tmp1 = 7;
		}
		utest_Assert::equals(7, $tmp1, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 115, "className" => "thx.TestNulls", "methodName" => "testOrWithIndex")));
		$t2 = null;
		if(null === $arr) {
			$t2 = null;
		} else {
			$_12 = $arr[0];
			if(null === $_12) {
				$t2 = null;
			} else {
				$_22 = $_12[4];
				if(null === $_22) {
					$t2 = null;
				} else {
					$_32 = $_22[3];
					if(null === $_32) {
						$t2 = null;
					} else {
						$t2 = $_32;
					}
				}
			}
		}
		$tmp2 = null;
		if($t2 !== null) {
			$tmp2 = $t2;
		} else {
			$tmp2 = 7;
		}
		utest_Assert::equals(7, $tmp2, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 116, "className" => "thx.TestNulls", "methodName" => "testOrWithIndex")));
		$t3 = null;
		if(null === $arr) {
			$t3 = null;
		} else {
			$_13 = $arr[0];
			if(null === $_13) {
				$t3 = null;
			} else {
				$_23 = $_13[1];
				if(null === $_23) {
					$t3 = null;
				} else {
					$_33 = $_23[4];
					if(null === $_33) {
						$t3 = null;
					} else {
						$t3 = $_33;
					}
				}
			}
		}
		$tmp3 = null;
		if($t3 !== null) {
			$tmp3 = $t3;
		} else {
			$tmp3 = 7;
		}
		utest_Assert::equals(7, $tmp3, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 117, "className" => "thx.TestNulls", "methodName" => "testOrWithIndex")));
	}
	public $m;
	public $m2;
	public function testOrMethod() {
		$_gthis = $this;
		$t = null;
		if(null === $_gthis) {
			$t = null;
		} else {
			$_1 = $_gthis->m;
			if(null === $_1) {
				$t = null;
			} else {
				$_2 = $_1->f("Y");
				if(null === $_2) {
					$t = null;
				} else {
					$_3 = $_2->change();
					if(null === $_3) {
						$t = null;
					} else {
						$t = $_3;
					}
				}
			}
		}
		$tmp = null;
		if($t !== null) {
			$tmp = $t;
		} else {
			$tmp = "x";
		}
		utest_Assert::equals("x", $tmp, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 129, "className" => "thx.TestNulls", "methodName" => "testOrMethod")));
		$first = true;
		$this->m = _hx_anonymous(array("f" => array(new _hx_lambda(array(&$first), "thx_TestNulls_0"), 'execute')));
		$t1 = null;
		if(null === $_gthis) {
			$t1 = null;
		} else {
			$_11 = $_gthis->m;
			if(null === $_11) {
				$t1 = null;
			} else {
				$_21 = $_11->f("Y");
				if(null === $_21) {
					$t1 = null;
				} else {
					$_31 = $_21->change();
					if(null === $_31) {
						$t1 = null;
					} else {
						$t1 = $_31;
					}
				}
			}
		}
		$tmp1 = null;
		if($t1 !== null) {
			$tmp1 = $t1;
		} else {
			$tmp1 = "x";
		}
		utest_Assert::equals("y", $tmp1, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 144, "className" => "thx.TestNulls", "methodName" => "testOrMethod")));
		$t2 = null;
		if(null === $_gthis) {
			$t2 = null;
		} else {
			$_12 = $_gthis->m2;
			if(null === $_12) {
				$t2 = null;
			} else {
				$_22 = $_12->f("Y");
				if(null === $_22) {
					$t2 = null;
				} else {
					$_32 = strtolower($_22);
					if(null === $_32) {
						$t2 = null;
					} else {
						$t2 = $_32;
					}
				}
			}
		}
		$tmp2 = null;
		if($t2 !== null) {
			$tmp2 = $t2;
		} else {
			$tmp2 = "x";
		}
		utest_Assert::equals("x", $tmp2, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 146, "className" => "thx.TestNulls", "methodName" => "testOrMethod")));
	}
	public function testIsNull() {
		$_gthis = $this;
		$tmp = null;
		if(null === $_gthis) {
			$tmp = null;
		} else {
			$_1 = $_gthis->{"empty"};
			if(null === $_1) {
				$tmp = null;
			} else {
				$tmp = $_1;
			}
		}
		utest_Assert::isTrue($tmp === null, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 151, "className" => "thx.TestNulls", "methodName" => "testIsNull")));
		$tmp1 = null;
		if(null === $_gthis) {
			$tmp1 = null;
		} else {
			$_11 = $_gthis->{"empty"};
			if(null === $_11) {
				$tmp1 = null;
			} else {
				$_2 = $_11->a;
				if(null === $_2) {
					$tmp1 = null;
				} else {
					$tmp1 = $_2;
				}
			}
		}
		utest_Assert::isTrue($tmp1 === null, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 152, "className" => "thx.TestNulls", "methodName" => "testIsNull")));
		$tmp2 = null;
		if(null === $_gthis) {
			$tmp2 = null;
		} else {
			$_12 = $_gthis->{"empty"};
			if(null === $_12) {
				$tmp2 = null;
			} else {
				$_21 = $_12->a;
				if(null === $_21) {
					$tmp2 = null;
				} else {
					$_3 = $_21->b;
					if(null === $_3) {
						$tmp2 = null;
					} else {
						$tmp2 = $_3;
					}
				}
			}
		}
		utest_Assert::isTrue($tmp2 === null, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 153, "className" => "thx.TestNulls", "methodName" => "testIsNull")));
	}
	public function testNotNull() {
		$_gthis = $this;
		$tmp = null;
		if(null === $_gthis) {
			$tmp = null;
		} else {
			$_1 = $_gthis->nested;
			if(null === $_1) {
				$tmp = null;
			} else {
				$tmp = $_1;
			}
		}
		utest_Assert::isTrue($tmp !== null, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 157, "className" => "thx.TestNulls", "methodName" => "testNotNull")));
		$tmp1 = null;
		if(null === $_gthis) {
			$tmp1 = null;
		} else {
			$_11 = $_gthis->nested;
			if(null === $_11) {
				$tmp1 = null;
			} else {
				$_2 = $_11->a;
				if(null === $_2) {
					$tmp1 = null;
				} else {
					$tmp1 = $_2;
				}
			}
		}
		utest_Assert::isTrue($tmp1 !== null, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 158, "className" => "thx.TestNulls", "methodName" => "testNotNull")));
		$tmp2 = null;
		if(null === $_gthis) {
			$tmp2 = null;
		} else {
			$_12 = $_gthis->nested;
			if(null === $_12) {
				$tmp2 = null;
			} else {
				$_21 = $_12->a;
				if(null === $_21) {
					$tmp2 = null;
				} else {
					$_3 = $_21->b;
					if(null === $_3) {
						$tmp2 = null;
					} else {
						$tmp2 = $_3;
					}
				}
			}
		}
		utest_Assert::isTrue($tmp2 !== null, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 159, "className" => "thx.TestNulls", "methodName" => "testNotNull")));
	}
	public function testEnsure() {
		$nops = null;
		$yups = "some content";
		utest_Assert::isNull($this->ensureField, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 166, "className" => "thx.TestNulls", "methodName" => "testEnsure")));
		utest_Assert::isNull(thx_TestNulls::$ensureStaticField, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 167, "className" => "thx.TestNulls", "methodName" => "testEnsure")));
		$tmp = null === $nops;
		if($tmp) {
			$nops = "alt";
		}
		if(false) {
			$yups = "alt";
		}
		utest_Assert::equals("alt", $nops, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 172, "className" => "thx.TestNulls", "methodName" => "testEnsure")));
		utest_Assert::equals("some content", $yups, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 173, "className" => "thx.TestNulls", "methodName" => "testEnsure")));
		$nops = null;
		$tmp1 = null === $nops;
		if($tmp1) {
			$nops = "alt";
		}
		$tmp2 = null === $yups;
		if($tmp2) {
			$yups = "alt";
		}
		utest_Assert::equals("alt", $nops, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 179, "className" => "thx.TestNulls", "methodName" => "testEnsure")));
		utest_Assert::equals("some content", $yups, null, _hx_anonymous(array("fileName" => "TestNulls.hx", "lineNumber" => 180, "className" => "thx.TestNulls", "methodName" => "testEnsure")));
		if(null === $this->ensureField) {
			$this->ensureField = "alt";
		}
		if(null === thx_TestNulls::$ensureStaticField) {
			thx_TestNulls::$ensureStaticField = "alt";
		}
		if(null === $this->ensureField) {
			$this->ensureField = "alt";
		}
		if(null === thx_TestNulls::$ensureStaticField) {
			thx_TestNulls::$ensureStaticField = "alt";
		}
		$this->ensureField = null;
		thx_TestNulls::$ensureStaticField = null;
		if(null === $this->ensureField) {
			$this->ensureField = "alt";
		}
		if(null === thx_TestNulls::$ensureStaticField) {
			thx_TestNulls::$ensureStaticField = "alt";
		}
		if(null === $this->ensureField) {
			$this->ensureField = "alt";
		}
		if(null === thx_TestNulls::$ensureStaticField) {
			thx_TestNulls::$ensureStaticField = "alt";
		}
	}
	public $ensureField;
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $ensureStaticField = null;
	static $__properties__ = array("set_setter" => "set_setter","get_setter" => "get_setter","get_getter" => "get_getter");
	function __toString() { return 'thx.TestNulls'; }
}
function thx_TestNulls_0(&$first, $s) {
	{
		if($first) {
			$first = false;
			return _hx_anonymous(array("change" => array(new _hx_lambda(array(&$s), "thx_TestNulls_1"), 'execute')));
		} else {
			throw new HException("method called multiple times");
		}
	}
}
function thx_TestNulls_1(&$s) {
	{
		return strtolower($s);
	}
}
