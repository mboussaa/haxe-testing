<?php

// Generated by Haxe 3.3.0
class thx_TestHashSet {
	public function __construct() {}
	public function testCreate() {
		$tmp = new thx_TestItem(1);
		$tmp1 = new thx_TestItem(3);
		$tmp2 = new thx_TestItem(2);
		$tmp3 = new thx_TestItem(3);
		$s = thx__HashSet_HashSet_Impl_::create((new _hx_array(array($tmp, $tmp1, $tmp2, $tmp3, new thx_TestItem(1)))));
		$tmp4 = thx__HashSet_HashSet_Impl_::get_length($s);
		utest_Assert::same(3, $tmp4, null, null, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 12, "className" => "thx.TestHashSet", "methodName" => "testCreate")));
		$v = new thx_TestItem(1);
		$tmp5 = $v->hashCode();
		$tmp6 = $s->values->exists($tmp5);
		utest_Assert::isTrue($tmp6, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 13, "className" => "thx.TestHashSet", "methodName" => "testCreate")));
	}
	public function testEmpty() {
		$s1 = thx__HashSet_HashSet_Impl_::create((new _hx_array(array(new thx_TestItem(1)))));
		$s2 = thx__HashSet_HashSet_Impl_::hempty($s1);
		$tmp = thx__HashSet_HashSet_Impl_::get_length($s1);
		utest_Assert::same(1, $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 19, "className" => "thx.TestHashSet", "methodName" => "testEmpty")));
		$tmp1 = thx__HashSet_HashSet_Impl_::get_length($s2);
		utest_Assert::same(0, $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 20, "className" => "thx.TestHashSet", "methodName" => "testEmpty")));
	}
	public function testExists() {
		$i1 = new thx_TestItem(1);
		$i2a = new thx_TestItem(2);
		$i2b = new thx_TestItem(2);
		$s = thx__HashSet_HashSet_Impl_::create((new _hx_array(array($i1, $i2a, $i2b))));
		$tmp = thx__HashSet_HashSet_Impl_::get_length($s);
		utest_Assert::same(2, $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 28, "className" => "thx.TestHashSet", "methodName" => "testExists")));
		$tmp1 = $i1->hashCode();
		$tmp2 = $s->values->exists($tmp1);
		utest_Assert::isTrue($tmp2, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 29, "className" => "thx.TestHashSet", "methodName" => "testExists")));
		$v = new thx_TestItem(1);
		$tmp3 = $v->hashCode();
		$tmp4 = $s->values->exists($tmp3);
		utest_Assert::isTrue($tmp4, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 30, "className" => "thx.TestHashSet", "methodName" => "testExists")));
		$tmp5 = $i2a->hashCode();
		$tmp6 = $s->values->exists($tmp5);
		utest_Assert::isTrue($tmp6, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 31, "className" => "thx.TestHashSet", "methodName" => "testExists")));
		$tmp7 = $i2b->hashCode();
		$tmp8 = $s->values->exists($tmp7);
		utest_Assert::isTrue($tmp8, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 32, "className" => "thx.TestHashSet", "methodName" => "testExists")));
		$v1 = new thx_TestItem(2);
		$tmp9 = $v1->hashCode();
		$tmp10 = $s->values->exists($tmp9);
		utest_Assert::isTrue($tmp10, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 33, "className" => "thx.TestHashSet", "methodName" => "testExists")));
	}
	public function testAdd() {
		$s = thx__HashSet_HashSet_Impl_::create(null);
		$tmp = thx__HashSet_HashSet_Impl_::add($s, new thx_TestItem(1));
		utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 38, "className" => "thx.TestHashSet", "methodName" => "testAdd")));
		$tmp1 = thx__HashSet_HashSet_Impl_::add($s, new thx_TestItem(2));
		utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 39, "className" => "thx.TestHashSet", "methodName" => "testAdd")));
		$tmp2 = thx__HashSet_HashSet_Impl_::add($s, new thx_TestItem(2));
		utest_Assert::isFalse($tmp2, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 40, "className" => "thx.TestHashSet", "methodName" => "testAdd")));
		$tmp3 = thx__HashSet_HashSet_Impl_::add($s, new thx_TestItem(3));
		utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 41, "className" => "thx.TestHashSet", "methodName" => "testAdd")));
		$tmp4 = thx__HashSet_HashSet_Impl_::add($s, new thx_TestItem(3));
		utest_Assert::isFalse($tmp4, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 42, "className" => "thx.TestHashSet", "methodName" => "testAdd")));
		$tmp5 = thx__HashSet_HashSet_Impl_::get_length($s);
		utest_Assert::same(3, $tmp5, null, null, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 43, "className" => "thx.TestHashSet", "methodName" => "testAdd")));
	}
	public function testPush() {
		$s = thx__HashSet_HashSet_Impl_::create(null);
		thx__HashSet_HashSet_Impl_::add($s, new thx_TestItem(1));
		thx__HashSet_HashSet_Impl_::add($s, new thx_TestItem(2));
		thx__HashSet_HashSet_Impl_::add($s, new thx_TestItem(2));
		thx__HashSet_HashSet_Impl_::add($s, new thx_TestItem(3));
		thx__HashSet_HashSet_Impl_::add($s, new thx_TestItem(3));
		$tmp = thx__HashSet_HashSet_Impl_::get_length($s);
		utest_Assert::same(3, $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 53, "className" => "thx.TestHashSet", "methodName" => "testPush")));
	}
	public function testRemove() {
		$i1 = new thx_TestItem(1);
		$i2 = new thx_TestItem(2);
		$s = thx__HashSet_HashSet_Impl_::create((new _hx_array(array($i1, $i2))));
		{
			$tmp = $i1->hashCode();
			$s->values->remove($tmp);
			$tmp1 = $i1->hashCode();
			$s->keys->remove($tmp1);
		}
		$tmp2 = thx__HashSet_HashSet_Impl_::get_length($s);
		utest_Assert::same(1, $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 61, "className" => "thx.TestHashSet", "methodName" => "testRemove")));
		{
			$v = new thx_TestItem(2);
			$tmp3 = $v->hashCode();
			$s->values->remove($tmp3);
			$tmp4 = $v->hashCode();
			$s->keys->remove($tmp4);
		}
		$tmp5 = thx__HashSet_HashSet_Impl_::get_length($s);
		utest_Assert::same(0, $tmp5, null, null, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 63, "className" => "thx.TestHashSet", "methodName" => "testRemove")));
	}
	public function testCopy() {
		$i1 = new thx_TestItem(1);
		$i2 = new thx_TestItem(2);
		$s1 = thx__HashSet_HashSet_Impl_::create((new _hx_array(array($i1, $i2))));
		$s2 = thx__HashSet_HashSet_Impl_::copy($s1);
		$tmp = thx__HashSet_HashSet_Impl_::get_length($s1);
		utest_Assert::same(2, $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 71, "className" => "thx.TestHashSet", "methodName" => "testCopy")));
		$tmp1 = thx__HashSet_HashSet_Impl_::get_length($s2);
		utest_Assert::same(2, $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 72, "className" => "thx.TestHashSet", "methodName" => "testCopy")));
		$tmp2 = $i1->hashCode();
		$tmp3 = $s1->values->exists($tmp2);
		utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 73, "className" => "thx.TestHashSet", "methodName" => "testCopy")));
		$v = new thx_TestItem(2);
		$tmp4 = $v->hashCode();
		$tmp5 = $s1->values->exists($tmp4);
		utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 74, "className" => "thx.TestHashSet", "methodName" => "testCopy")));
		$tmp6 = $i1->hashCode();
		$tmp7 = $s2->values->exists($tmp6);
		utest_Assert::isTrue($tmp7, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 75, "className" => "thx.TestHashSet", "methodName" => "testCopy")));
		$v1 = new thx_TestItem(2);
		$tmp8 = $v1->hashCode();
		$tmp9 = $s2->values->exists($tmp8);
		utest_Assert::isTrue($tmp9, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 76, "className" => "thx.TestHashSet", "methodName" => "testCopy")));
		thx__HashSet_HashSet_Impl_::add($s1, new thx_TestItem(3));
		$tmp10 = thx__HashSet_HashSet_Impl_::get_length($s1);
		utest_Assert::same(3, $tmp10, null, null, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 78, "className" => "thx.TestHashSet", "methodName" => "testCopy")));
		$tmp11 = thx__HashSet_HashSet_Impl_::get_length($s2);
		utest_Assert::same(2, $tmp11, null, null, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 79, "className" => "thx.TestHashSet", "methodName" => "testCopy")));
	}
	public function testUnion() {
		$tmp = new thx_TestItem(1);
		$tmp1 = new thx_TestItem(2);
		$s1 = thx__HashSet_HashSet_Impl_::create((new _hx_array(array($tmp, $tmp1, new thx_TestItem(3)))));
		$tmp2 = new thx_TestItem(2);
		$tmp3 = new thx_TestItem(3);
		$tmp4 = new thx_TestItem(4);
		$s2 = thx__HashSet_HashSet_Impl_::create((new _hx_array(array($tmp2, $tmp3, $tmp4, new thx_TestItem(5)))));
		$newset = thx__HashSet_HashSet_Impl_::copy($s1);
		{
			$tmp5 = thx__HashSet_HashSet_Impl_::iterator($s2);
			while(true) {
				$tmp6 = !$tmp5->hasNext();
				if($tmp6) {
					break;
				}
				$k = $tmp5->next();
				$tmp7 = $k->hashCode();
				$newset->keys->set($tmp7, $k);
				$tmp8 = $k->hashCode();
				$newset->values->set($tmp8, true);
				unset($tmp8,$tmp7,$tmp6,$k);
			}
		}
		$tmp9 = thx__HashSet_HashSet_Impl_::get_length($s1);
		utest_Assert::same(3, $tmp9, null, null, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 86, "className" => "thx.TestHashSet", "methodName" => "testUnion")));
		$tmp10 = thx__HashSet_HashSet_Impl_::get_length($s2);
		utest_Assert::same(4, $tmp10, null, null, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 87, "className" => "thx.TestHashSet", "methodName" => "testUnion")));
		$tmp11 = thx__HashSet_HashSet_Impl_::get_length($newset);
		utest_Assert::same(5, $tmp11, null, null, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 88, "className" => "thx.TestHashSet", "methodName" => "testUnion")));
		$v = new thx_TestItem(1);
		$tmp12 = $v->hashCode();
		$tmp13 = $newset->values->exists($tmp12);
		utest_Assert::isTrue($tmp13, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 89, "className" => "thx.TestHashSet", "methodName" => "testUnion")));
		$v1 = new thx_TestItem(2);
		$tmp14 = $v1->hashCode();
		$tmp15 = $newset->values->exists($tmp14);
		utest_Assert::isTrue($tmp15, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 90, "className" => "thx.TestHashSet", "methodName" => "testUnion")));
		$v2 = new thx_TestItem(3);
		$tmp16 = $v2->hashCode();
		$tmp17 = $newset->values->exists($tmp16);
		utest_Assert::isTrue($tmp17, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 91, "className" => "thx.TestHashSet", "methodName" => "testUnion")));
		$v3 = new thx_TestItem(4);
		$tmp18 = $v3->hashCode();
		$tmp19 = $newset->values->exists($tmp18);
		utest_Assert::isTrue($tmp19, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 92, "className" => "thx.TestHashSet", "methodName" => "testUnion")));
		$v4 = new thx_TestItem(5);
		$tmp20 = $v4->hashCode();
		$tmp21 = $newset->values->exists($tmp20);
		utest_Assert::isTrue($tmp21, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 93, "className" => "thx.TestHashSet", "methodName" => "testUnion")));
	}
	public function testIntersection() {
		$tmp = new thx_TestItem(1);
		$tmp1 = new thx_TestItem(2);
		$s1 = thx__HashSet_HashSet_Impl_::create((new _hx_array(array($tmp, $tmp1, new thx_TestItem(3)))));
		$tmp2 = new thx_TestItem(2);
		$tmp3 = new thx_TestItem(3);
		$tmp4 = new thx_TestItem(4);
		$s2 = thx__HashSet_HashSet_Impl_::create((new _hx_array(array($tmp2, $tmp3, $tmp4, new thx_TestItem(5)))));
		$result = thx__HashSet_HashSet_Impl_::hempty($s1);
		{
			$tmp5 = thx__HashSet_HashSet_Impl_::iterator($s1);
			while(true) {
				$tmp6 = !$tmp5->hasNext();
				if($tmp6) {
					break;
				}
				$item = $tmp5->next();
				$tmp7 = $item->hashCode();
				$tmp8 = $s2->values->exists($tmp7);
				if($tmp8) {
					$tmp9 = $item->hashCode();
					$result->keys->set($tmp9, $item);
					$tmp10 = $item->hashCode();
					$result->values->set($tmp10, true);
					unset($tmp9,$tmp10);
				}
				unset($tmp8,$tmp7,$tmp6,$item);
			}
		}
		$tmp11 = thx__HashSet_HashSet_Impl_::get_length($s1);
		utest_Assert::same(3, $tmp11, null, null, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 100, "className" => "thx.TestHashSet", "methodName" => "testIntersection")));
		$tmp12 = thx__HashSet_HashSet_Impl_::get_length($s2);
		utest_Assert::same(4, $tmp12, null, null, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 101, "className" => "thx.TestHashSet", "methodName" => "testIntersection")));
		$tmp13 = thx__HashSet_HashSet_Impl_::get_length($result);
		utest_Assert::same(2, $tmp13, null, null, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 102, "className" => "thx.TestHashSet", "methodName" => "testIntersection")));
		$v = new thx_TestItem(2);
		$tmp14 = $v->hashCode();
		$tmp15 = $result->values->exists($tmp14);
		utest_Assert::isTrue($tmp15, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 103, "className" => "thx.TestHashSet", "methodName" => "testIntersection")));
		$v1 = new thx_TestItem(3);
		$tmp16 = $v1->hashCode();
		$tmp17 = $result->values->exists($tmp16);
		utest_Assert::isTrue($tmp17, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 104, "className" => "thx.TestHashSet", "methodName" => "testIntersection")));
	}
	public function testDifference() {
		$tmp = new thx_TestItem(1);
		$tmp1 = new thx_TestItem(2);
		$s1 = thx__HashSet_HashSet_Impl_::create((new _hx_array(array($tmp, $tmp1, new thx_TestItem(3)))));
		$tmp2 = new thx_TestItem(2);
		$tmp3 = new thx_TestItem(3);
		$tmp4 = new thx_TestItem(4);
		$s2 = thx__HashSet_HashSet_Impl_::create((new _hx_array(array($tmp2, $tmp3, $tmp4, new thx_TestItem(5)))));
		$result = thx__HashSet_HashSet_Impl_::copy($s1);
		{
			$tmp5 = thx__HashSet_HashSet_Impl_::iterator($s2);
			while(true) {
				$tmp6 = !$tmp5->hasNext();
				if($tmp6) {
					break;
				}
				$item = $tmp5->next();
				$tmp7 = $item->hashCode();
				$result->values->remove($tmp7);
				$tmp8 = $item->hashCode();
				$result->keys->remove($tmp8);
				unset($tmp8,$tmp7,$tmp6,$item);
			}
		}
		$result1 = thx__HashSet_HashSet_Impl_::copy($s2);
		{
			$tmp9 = thx__HashSet_HashSet_Impl_::iterator($s1);
			while(true) {
				$tmp10 = !$tmp9->hasNext();
				if($tmp10) {
					break;
				}
				$item1 = $tmp9->next();
				$tmp11 = $item1->hashCode();
				$result1->values->remove($tmp11);
				$tmp12 = $item1->hashCode();
				$result1->keys->remove($tmp12);
				unset($tmp12,$tmp11,$tmp10,$item1);
			}
		}
		$tmp13 = thx__HashSet_HashSet_Impl_::get_length($s1);
		utest_Assert::same(3, $tmp13, null, null, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 112, "className" => "thx.TestHashSet", "methodName" => "testDifference")));
		$tmp14 = thx__HashSet_HashSet_Impl_::get_length($s2);
		utest_Assert::same(4, $tmp14, null, null, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 113, "className" => "thx.TestHashSet", "methodName" => "testDifference")));
		$tmp15 = thx__HashSet_HashSet_Impl_::get_length($result);
		utest_Assert::same(1, $tmp15, null, null, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 114, "className" => "thx.TestHashSet", "methodName" => "testDifference")));
		$tmp16 = thx__HashSet_HashSet_Impl_::get_length($result1);
		utest_Assert::same(2, $tmp16, null, null, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 115, "className" => "thx.TestHashSet", "methodName" => "testDifference")));
		$v = new thx_TestItem(1);
		$tmp17 = $v->hashCode();
		$tmp18 = $result->values->exists($tmp17);
		utest_Assert::isTrue($tmp18, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 116, "className" => "thx.TestHashSet", "methodName" => "testDifference")));
		$v1 = new thx_TestItem(4);
		$tmp19 = $v1->hashCode();
		$tmp20 = $result1->values->exists($tmp19);
		utest_Assert::isTrue($tmp20, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 117, "className" => "thx.TestHashSet", "methodName" => "testDifference")));
		$v2 = new thx_TestItem(5);
		$tmp21 = $v2->hashCode();
		$tmp22 = $result1->values->exists($tmp21);
		utest_Assert::isTrue($tmp22, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 118, "className" => "thx.TestHashSet", "methodName" => "testDifference")));
	}
	public function testSymmetricDifference() {
		$tmp = new thx_TestItem(1);
		$tmp1 = new thx_TestItem(2);
		$s1 = thx__HashSet_HashSet_Impl_::create((new _hx_array(array($tmp, $tmp1, new thx_TestItem(3)))));
		$tmp2 = new thx_TestItem(2);
		$tmp3 = new thx_TestItem(3);
		$tmp4 = new thx_TestItem(4);
		$s2 = thx__HashSet_HashSet_Impl_::create((new _hx_array(array($tmp2, $tmp3, $tmp4, new thx_TestItem(5)))));
		$self = thx__HashSet_HashSet_Impl_::copy($s1);
		$newset = thx__HashSet_HashSet_Impl_::copy($self);
		{
			$tmp5 = thx__HashSet_HashSet_Impl_::iterator($s2);
			while(true) {
				$tmp6 = !$tmp5->hasNext();
				if($tmp6) {
					break;
				}
				$k = $tmp5->next();
				$tmp7 = $k->hashCode();
				$newset->keys->set($tmp7, $k);
				$tmp8 = $k->hashCode();
				$newset->values->set($tmp8, true);
				unset($tmp8,$tmp7,$tmp6,$k);
			}
		}
		$this1 = $newset;
		$result = thx__HashSet_HashSet_Impl_::hempty($self);
		{
			$tmp9 = thx__HashSet_HashSet_Impl_::iterator($self);
			while(true) {
				$tmp10 = !$tmp9->hasNext();
				if($tmp10) {
					break;
				}
				$item = $tmp9->next();
				$tmp11 = $item->hashCode();
				$tmp12 = $s2->values->exists($tmp11);
				if($tmp12) {
					$tmp13 = $item->hashCode();
					$result->keys->set($tmp13, $item);
					$tmp14 = $item->hashCode();
					$result->values->set($tmp14, true);
					unset($tmp14,$tmp13);
				}
				unset($tmp12,$tmp11,$tmp10,$item);
			}
		}
		$result1 = thx__HashSet_HashSet_Impl_::copy($this1);
		{
			$tmp15 = thx__HashSet_HashSet_Impl_::iterator($result);
			while(true) {
				$tmp16 = !$tmp15->hasNext();
				if($tmp16) {
					break;
				}
				$item1 = $tmp15->next();
				$tmp17 = $item1->hashCode();
				$result1->values->remove($tmp17);
				$tmp18 = $item1->hashCode();
				$result1->keys->remove($tmp18);
				unset($tmp18,$tmp17,$tmp16,$item1);
			}
		}
		$self1 = thx__HashSet_HashSet_Impl_::copy($s2);
		$newset1 = thx__HashSet_HashSet_Impl_::copy($self1);
		{
			$tmp19 = thx__HashSet_HashSet_Impl_::iterator($s1);
			while(true) {
				$tmp20 = !$tmp19->hasNext();
				if($tmp20) {
					break;
				}
				$k1 = $tmp19->next();
				$tmp21 = $k1->hashCode();
				$newset1->keys->set($tmp21, $k1);
				$tmp22 = $k1->hashCode();
				$newset1->values->set($tmp22, true);
				unset($tmp22,$tmp21,$tmp20,$k1);
			}
		}
		$this2 = $newset1;
		$result2 = thx__HashSet_HashSet_Impl_::hempty($self1);
		{
			$tmp23 = thx__HashSet_HashSet_Impl_::iterator($self1);
			while(true) {
				$tmp24 = !$tmp23->hasNext();
				if($tmp24) {
					break;
				}
				$item2 = $tmp23->next();
				$tmp25 = $item2->hashCode();
				$tmp26 = $s1->values->exists($tmp25);
				if($tmp26) {
					$tmp27 = $item2->hashCode();
					$result2->keys->set($tmp27, $item2);
					$tmp28 = $item2->hashCode();
					$result2->values->set($tmp28, true);
					unset($tmp28,$tmp27);
				}
				unset($tmp26,$tmp25,$tmp24,$item2);
			}
		}
		$result3 = thx__HashSet_HashSet_Impl_::copy($this2);
		{
			$tmp29 = thx__HashSet_HashSet_Impl_::iterator($result2);
			while(true) {
				$tmp30 = !$tmp29->hasNext();
				if($tmp30) {
					break;
				}
				$item3 = $tmp29->next();
				$tmp31 = $item3->hashCode();
				$result3->values->remove($tmp31);
				$tmp32 = $item3->hashCode();
				$result3->keys->remove($tmp32);
				unset($tmp32,$tmp31,$tmp30,$item3);
			}
		}
		$tmp33 = thx__HashSet_HashSet_Impl_::get_length($s1);
		utest_Assert::same(3, $tmp33, null, null, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 126, "className" => "thx.TestHashSet", "methodName" => "testSymmetricDifference")));
		$tmp34 = thx__HashSet_HashSet_Impl_::get_length($s2);
		utest_Assert::same(4, $tmp34, null, null, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 127, "className" => "thx.TestHashSet", "methodName" => "testSymmetricDifference")));
		$tmp35 = thx__HashSet_HashSet_Impl_::get_length($result1);
		utest_Assert::same(3, $tmp35, null, null, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 128, "className" => "thx.TestHashSet", "methodName" => "testSymmetricDifference")));
		$tmp36 = thx__HashSet_HashSet_Impl_::get_length($result3);
		utest_Assert::same(3, $tmp36, null, null, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 129, "className" => "thx.TestHashSet", "methodName" => "testSymmetricDifference")));
		$v = new thx_TestItem(1);
		$tmp37 = $v->hashCode();
		$tmp38 = $result1->values->exists($tmp37);
		utest_Assert::isTrue($tmp38, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 130, "className" => "thx.TestHashSet", "methodName" => "testSymmetricDifference")));
		$v1 = new thx_TestItem(4);
		$tmp39 = $v1->hashCode();
		$tmp40 = $result1->values->exists($tmp39);
		utest_Assert::isTrue($tmp40, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 131, "className" => "thx.TestHashSet", "methodName" => "testSymmetricDifference")));
		$v2 = new thx_TestItem(5);
		$tmp41 = $v2->hashCode();
		$tmp42 = $result1->values->exists($tmp41);
		utest_Assert::isTrue($tmp42, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 132, "className" => "thx.TestHashSet", "methodName" => "testSymmetricDifference")));
		$v3 = new thx_TestItem(1);
		$tmp43 = $v3->hashCode();
		$tmp44 = $result3->values->exists($tmp43);
		utest_Assert::isTrue($tmp44, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 133, "className" => "thx.TestHashSet", "methodName" => "testSymmetricDifference")));
		$v4 = new thx_TestItem(4);
		$tmp45 = $v4->hashCode();
		$tmp46 = $result3->values->exists($tmp45);
		utest_Assert::isTrue($tmp46, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 134, "className" => "thx.TestHashSet", "methodName" => "testSymmetricDifference")));
		$v5 = new thx_TestItem(5);
		$tmp47 = $v5->hashCode();
		$tmp48 = $result3->values->exists($tmp47);
		utest_Assert::isTrue($tmp48, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 135, "className" => "thx.TestHashSet", "methodName" => "testSymmetricDifference")));
	}
	public function testToArray() {
		$tmp = new thx_TestItem(1);
		$s = thx__HashSet_HashSet_Impl_::create((new _hx_array(array($tmp, new thx_TestItem(2)))));
		$a = thx__HashSet_HashSet_Impl_::toArray($s);
		utest_Assert::same(2, $a->length, null, null, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 141, "className" => "thx.TestHashSet", "methodName" => "testToArray")));
		$_e = $a;
		$tmp1 = array(new _hx_lambda(array(&$_e), "thx_TestHashSet_0"), 'execute');
		utest_Assert::same(1, call_user_func_array($tmp1, array(array(new _hx_lambda(array(), "thx_TestHashSet_1"), 'execute')))->code, null, null, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 142, "className" => "thx.TestHashSet", "methodName" => "testToArray")));
		$_e1 = $a;
		$tmp2 = array(new _hx_lambda(array(&$_e1), "thx_TestHashSet_2"), 'execute');
		utest_Assert::same(2, call_user_func_array($tmp2, array(array(new _hx_lambda(array(), "thx_TestHashSet_3"), 'execute')))->code, null, null, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 143, "className" => "thx.TestHashSet", "methodName" => "testToArray")));
	}
	public function testToString() {
		$tmp = new thx_TestItem(1);
		$s = thx__HashSet_HashSet_Impl_::create((new _hx_array(array($tmp, new thx_TestItem(2)))));
		$tmp1 = new EReg("TestItem \\d, TestItem \\d}", "");
		$tmp2 = thx__HashSet_HashSet_Impl_::toString($s);
		$tmp3 = $tmp1->match($tmp2);
		utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestHashSet.hx", "lineNumber" => 148, "className" => "thx.TestHashSet", "methodName" => "testToString")));
	}
	function __toString() { return 'thx.TestHashSet'; }
}
function thx_TestHashSet_0(&$_e, $predicate) {
	{
		return thx_Arrays::find($_e, $predicate);
	}
}
function thx_TestHashSet_1($_) {
	{
		return $_->code === 1;
	}
}
function thx_TestHashSet_2(&$_e1, $predicate1) {
	{
		return thx_Arrays::find($_e1, $predicate1);
	}
}
function thx_TestHashSet_3($_1) {
	{
		return $_1->code === 2;
	}
}
