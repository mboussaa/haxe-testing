<?php

// Generated by Haxe 3.3.0
class thx_TestArrays {
	public function __construct() {}
	public function testApplyIndexes() {
		$tmp = thx_Arrays::applyIndexes((new _hx_array(array("B", "C", "A"))), (new _hx_array(array(1, 2, 0))), null);
		utest_Assert::same((new _hx_array(array("A", "B", "C"))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 18, "className" => "thx.TestArrays", "methodName" => "testApplyIndexes")));
		$tmp1 = thx_Arrays::applyIndexes((new _hx_array(array(1, 3, 2, 1, 2))), (new _hx_array(array(0, 4, 2, 0, 2))), true);
		utest_Assert::same((new _hx_array(array(1, 1, 2, 2, 3))), $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 19, "className" => "thx.TestArrays", "methodName" => "testApplyIndexes")));
	}
	public function testRank() {
		$tests = (new _hx_array(array(_hx_anonymous(array("test" => (new _hx_array(array(3, 1, 2))), "expected" => (new _hx_array(array(1, 2, 3))))), _hx_anonymous(array("test" => (new _hx_array(array(1, 2, 3))), "expected" => (new _hx_array(array(1, 2, 3))))), _hx_anonymous(array("test" => (new _hx_array(array(3, 2, 1))), "expected" => (new _hx_array(array(1, 2, 3))))), _hx_anonymous(array("test" => (new _hx_array(array(2, 1))), "expected" => (new _hx_array(array(1, 2))))), _hx_anonymous(array("test" => (new _hx_array(array(1, 2))), "expected" => (new _hx_array(array(1, 2))))), _hx_anonymous(array("test" => (new _hx_array(array(2))), "expected" => (new _hx_array(array(2))))), _hx_anonymous(array("test" => (new _hx_array(array())), "expected" => (new _hx_array(array())))), _hx_anonymous(array("test" => (new _hx_array(array(1, 3, 2, 1, 2))), "expected" => (new _hx_array(array(1, 1, 2, 2, 3))))))));
		{
			$_g = 0;
			while($_g < $tests->length) {
				$item = $tests[$_g];
				++$_g;
				$ranks = thx_Arrays::rank($item->test, (isset(thx_Ints::$compare) ? thx_Ints::$compare: array("thx_Ints", "compare")), null);
				$applied = thx_Arrays::applyIndexes($item->test, $ranks, null);
				$tmp = Std::string($item->expected);
				$tmp1 = "expected " . _hx_string_or_null($tmp) . " but it is ";
				$tmp2 = Std::string($ranks);
				utest_Assert::same($item->expected, $applied, null, _hx_string_or_null($tmp1) . _hx_string_or_null($tmp2), null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 37, "className" => "thx.TestArrays", "methodName" => "testRank")));
				unset($tmp2,$tmp1,$tmp,$ranks,$item,$applied);
			}
		}
	}
	public function testWith() {
		$arr = (new _hx_array(array(1)));
		$tmp = $arr === $arr->concat((new _hx_array(array(2))));
		utest_Assert::isFalse($tmp, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 43, "className" => "thx.TestArrays", "methodName" => "testWith")));
		utest_Assert::same((new _hx_array(array(1, 2, 3))), _hx_deref((new _hx_array(array(1, 2))))->concat((new _hx_array(array(3)))), null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 45, "className" => "thx.TestArrays", "methodName" => "testWith")));
		utest_Assert::same((new _hx_array(array(1, 2, 3))), _hx_deref((new _hx_array(array(1))))->concat((new _hx_array(array(2, 3)))), null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 46, "className" => "thx.TestArrays", "methodName" => "testWith")));
		$tmp1 = thx_Arrays::withInsert((new _hx_array(array(1, 3))), 2, 1);
		utest_Assert::same((new _hx_array(array(1, 2, 3))), $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 47, "className" => "thx.TestArrays", "methodName" => "testWith")));
		$tmp2 = thx_Arrays::withSlice((new _hx_array(array(1, 2, 3, 4, 5))), (new _hx_array(array(3, 4))), 2, 2);
		utest_Assert::same((new _hx_array(array(1, 2, 3, 4, 5))), $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 48, "className" => "thx.TestArrays", "methodName" => "testWith")));
		$tmp3 = thx_Arrays::withSlice((new _hx_array(array(1, 2, 5))), (new _hx_array(array(3, 4))), 2, null);
		utest_Assert::same((new _hx_array(array(1, 2, 3, 4, 5))), $tmp3, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 49, "className" => "thx.TestArrays", "methodName" => "testWith")));
	}
	public function testCreate() {
		$arr = thx_Arrays::create(3, 2);
		utest_Assert::same((new _hx_array(array(2, 2, 2))), $arr, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 54, "className" => "thx.TestArrays", "methodName" => "testCreate")));
	}
	public function testEach() {
		$arr = (new _hx_array(array(4, 5, 6)));
		$sum = 0;
		thx_Arrays::each($arr, array(new _hx_lambda(array(&$sum), "thx_TestArrays_0"), 'execute'));
		utest_Assert::same(15, $sum, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 63, "className" => "thx.TestArrays", "methodName" => "testEach")));
	}
	public function testEachi() {
		$arr = (new _hx_array(array(4, 5, 6)));
		$sum = 0;
		$indices = (new _hx_array(array()));
		thx_Arrays::eachi($arr, array(new _hx_lambda(array(&$indices, &$sum), "thx_TestArrays_1"), 'execute'));
		utest_Assert::same(15, $sum, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 74, "className" => "thx.TestArrays", "methodName" => "testEachi")));
		utest_Assert::same((new _hx_array(array(0, 1, 2))), $indices, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 75, "className" => "thx.TestArrays", "methodName" => "testEachi")));
	}
	public function testMap() {}
	public function testMapi() {
		$input = (new _hx_array(array(4, 5, 6)));
		$is = (new _hx_array(array()));
		$actual = thx_Arrays::mapi($input, array(new _hx_lambda(array(&$is), "thx_TestArrays_2"), 'execute'));
		utest_Assert::same((new _hx_array(array(8, 10, 12))), $actual, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 93, "className" => "thx.TestArrays", "methodName" => "testMapi")));
		utest_Assert::same((new _hx_array(array(0, 1, 2))), $is, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 94, "className" => "thx.TestArrays", "methodName" => "testMapi")));
	}
	public function testCrossMulti() {
		$r = thx_Arrays::crossMulti((new _hx_array(array((new _hx_array(array(1, 2))), (new _hx_array(array(3, 4))), (new _hx_array(array(5, 6)))))));
		utest_Assert::same((new _hx_array(array((new _hx_array(array(1, 3, 5))), (new _hx_array(array(2, 3, 5))), (new _hx_array(array(1, 4, 5))), (new _hx_array(array(2, 4, 5))), (new _hx_array(array(1, 3, 6))), (new _hx_array(array(2, 3, 6))), (new _hx_array(array(1, 4, 6))), (new _hx_array(array(2, 4, 6)))))), $r, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 99, "className" => "thx.TestArrays", "methodName" => "testCrossMulti")));
	}
	public function testMapField() {
		$test = _hx_deref((new _hx_array(array(_hx_anonymous(array("a" => 1)), _hx_anonymous(array("a" => 2)), _hx_anonymous(array("a" => 3))))))->map(array(new _hx_lambda(array(), "thx_TestArrays_3"), 'execute'));
		utest_Assert::same((new _hx_array(array(1, 2, 3))), $test, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 105, "className" => "thx.TestArrays", "methodName" => "testMapField")));
	}
	public function testMapFieldOnFunction() {
		$tmp = new thx__TestArrays_Sample(2);
		$tmp1 = new thx__TestArrays_Sample(3);
		$test = _hx_deref((new _hx_array(array($tmp, $tmp1, new thx__TestArrays_Sample(4)))))->map(array(new _hx_lambda(array(), "thx_TestArrays_4"), 'execute'));
		utest_Assert::same((new _hx_array(array(4, 6, 8))), $test, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 114, "className" => "thx.TestArrays", "methodName" => "testMapFieldOnFunction")));
	}
	public function testUsingMapField() {
		$test = _hx_deref((new _hx_array(array(_hx_anonymous(array("a" => 1)), _hx_anonymous(array("a" => 2)), _hx_anonymous(array("a" => 3))))))->map(array(new _hx_lambda(array(), "thx_TestArrays_5"), 'execute'));
		utest_Assert::same((new _hx_array(array(1, 2, 3))), $test, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 120, "className" => "thx.TestArrays", "methodName" => "testUsingMapField")));
	}
	public function testUsingMapFieldiOnFunction() {
		$tmp = new thx__TestArrays_Sample(2);
		$tmp1 = new thx__TestArrays_Sample(3);
		$_e = (new _hx_array(array($tmp, $tmp1, new thx__TestArrays_Sample(4))));
		$tmp2 = array(new _hx_lambda(array(&$_e), "thx_TestArrays_6"), 'execute');
		$tmp3 = call_user_func_array($tmp2, array(array(new _hx_lambda(array(), "thx_TestArrays_7"), 'execute')));
		utest_Assert::same((new _hx_array(array(0, 3, 8))), $tmp3, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 124, "className" => "thx.TestArrays", "methodName" => "testUsingMapFieldiOnFunction")));
	}
	public function testFilterFn() {
		$tmp = _hx_deref((new _hx_array(array(1, 2, 3, 4, 5, 6))))->filter(array(new _hx_lambda(array(), "thx_TestArrays_8"), 'execute'));
		utest_Assert::same((new _hx_array(array(1, 3, 5))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 135, "className" => "thx.TestArrays", "methodName" => "testFilterFn")));
	}
	public function testFind() {
		$tmp = thx_Arrays::find((new _hx_array(array(1, 3, 5, 7, 9))), array(new _hx_lambda(array(), "thx_TestArrays_9"), 'execute'));
		utest_Assert::equals(3, $tmp, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 139, "className" => "thx.TestArrays", "methodName" => "testFind")));
	}
	public function testFindOption() {
		$tmp = thx_Arrays::findi((new _hx_array(array(1, 3, 5, 7, 9))), array(new _hx_lambda(array(), "thx_TestArrays_10"), 'execute'));
		utest_Assert::equals(3, $tmp, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 143, "className" => "thx.TestArrays", "methodName" => "testFindOption")));
	}
	public function testFindLast() {
		$tmp = thx_Arrays::findLast((new _hx_array(array(1, 3, 5, 7, 9))), array(new _hx_lambda(array(), "thx_TestArrays_11"), 'execute'));
		utest_Assert::equals(9, $tmp, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 147, "className" => "thx.TestArrays", "methodName" => "testFindLast")));
	}
	public function testFindFn() {
		$tmp = thx_Arrays::find((new _hx_array(array(1, 3, 5, 7, 9))), array(new _hx_lambda(array(), "thx_TestArrays_12"), 'execute'));
		utest_Assert::equals(3, $tmp, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 151, "className" => "thx.TestArrays", "methodName" => "testFindFn")));
	}
	public function testFindFnLast() {
		$tmp = thx_Arrays::findLast((new _hx_array(array(1, 3, 5, 7, 9))), array(new _hx_lambda(array(), "thx_TestArrays_13"), 'execute'));
		utest_Assert::equals(9, $tmp, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 155, "className" => "thx.TestArrays", "methodName" => "testFindFnLast")));
	}
	public function testIntersperse() {
		$tmp = thx_Arrays::intersperse((new _hx_array(array(1, 3, 5))), 2);
		utest_Assert::same((new _hx_array(array(1, 2, 3, 2, 5))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 159, "className" => "thx.TestArrays", "methodName" => "testIntersperse")));
		$tmp1 = thx_Arrays::intersperse((new _hx_array(array(1))), 2);
		utest_Assert::same((new _hx_array(array(1))), $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 160, "className" => "thx.TestArrays", "methodName" => "testIntersperse")));
		$tmp2 = thx_Arrays::intersperse((new _hx_array(array())), 2);
		utest_Assert::same((new _hx_array(array())), $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 161, "className" => "thx.TestArrays", "methodName" => "testIntersperse")));
	}
	public function testFn() {
		$tmp = _hx_deref((new _hx_array(array(1, 2, 4))))->map(array(new _hx_lambda(array(), "thx_TestArrays_14"), 'execute'));
		utest_Assert::same((new _hx_array(array(2, 4, 8))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 165, "className" => "thx.TestArrays", "methodName" => "testFn")));
	}
	public function testMinFloats() {
		$tmp = thx_ArrayFloats::min((new _hx_array(array(1.5, 0.5, 1.0))));
		utest_Assert::floatEquals(0.5, $tmp, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 169, "className" => "thx.TestArrays", "methodName" => "testMinFloats")));
	}
	public function testMinInts() {
		$tmp = thx_ArrayInts::min((new _hx_array(array(2, 5, 1))));
		utest_Assert::equals(1, $tmp, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 173, "className" => "thx.TestArrays", "methodName" => "testMinInts")));
	}
	public function testMaxFloats() {
		$tmp = thx_ArrayFloats::max((new _hx_array(array(1.5, 0.5, 1.0))));
		utest_Assert::floatEquals(1.5, $tmp, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 177, "className" => "thx.TestArrays", "methodName" => "testMaxFloats")));
	}
	public function testMaxInts() {
		$tmp = thx_ArrayInts::max((new _hx_array(array(2, 5, 1))));
		utest_Assert::equals(5, $tmp, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 181, "className" => "thx.TestArrays", "methodName" => "testMaxInts")));
	}
	public function testAverageFloats() {
		$tmp = thx_ArrayFloats::average((new _hx_array(array(2.5, 0.5, 0.0))));
		utest_Assert::floatEquals(1.0, $tmp, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 185, "className" => "thx.TestArrays", "methodName" => "testAverageFloats")));
	}
	public function testAverageInts() {
		$tmp = thx_ArrayInts::average((new _hx_array(array(2, 6, 1))));
		utest_Assert::equals(3.0, $tmp, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 189, "className" => "thx.TestArrays", "methodName" => "testAverageInts")));
	}
	public function testMinString() {
		$tmp = thx_ArrayStrings::min((new _hx_array(array("B", "C", "A"))));
		utest_Assert::equals("A", $tmp, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 193, "className" => "thx.TestArrays", "methodName" => "testMinString")));
	}
	public function testMaxStrings() {
		$tmp = thx_ArrayStrings::max((new _hx_array(array("B", "C", "A"))));
		utest_Assert::equals("C", $tmp, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 197, "className" => "thx.TestArrays", "methodName" => "testMaxStrings")));
	}
	public function testCompactFloats() {
		$tmp = thx_ArrayFloats::compact((new _hx_array(array(Math::$NaN, 1.5, null, 0.5, 1.0))));
		utest_Assert::same((new _hx_array(array(1.5, 0.5, 1.0))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 201, "className" => "thx.TestArrays", "methodName" => "testCompactFloats")));
	}
	public function testCompactStrings() {
		$tmp = thx_ArrayStrings::compact((new _hx_array(array("B", "", "C", null, "A", ""))));
		utest_Assert::same((new _hx_array(array("B", "C", "A"))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 205, "className" => "thx.TestArrays", "methodName" => "testCompactStrings")));
	}
	public function testFilterNullInt() {
		$tmp = thx_Arrays::filterNull((new _hx_array(array(null, 1, null, 0, 2))));
		utest_Assert::same((new _hx_array(array(1, 0, 2))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 209, "className" => "thx.TestArrays", "methodName" => "testFilterNullInt")));
	}
	public function testOrder() {
		$arr = (new _hx_array(array(2, 3, 1)));
		$tmp = thx_Arrays::order($arr, array(new _hx_lambda(array(), "thx_TestArrays_15"), 'execute'));
		utest_Assert::same((new _hx_array(array(1, 2, 3))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 214, "className" => "thx.TestArrays", "methodName" => "testOrder")));
		utest_Assert::same((new _hx_array(array(2, 3, 1))), $arr, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 215, "className" => "thx.TestArrays", "methodName" => "testOrder")));
	}
	public function testOrderFn() {
		$arr = (new _hx_array(array(2, 3, 1)));
		$_e = $arr;
		$tmp = array(new _hx_lambda(array(&$_e), "thx_TestArrays_16"), 'execute');
		$tmp1 = call_user_func_array($tmp, array(array(new _hx_lambda(array(), "thx_TestArrays_17"), 'execute')));
		utest_Assert::same((new _hx_array(array(1, 2, 3))), $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 220, "className" => "thx.TestArrays", "methodName" => "testOrderFn")));
		utest_Assert::same((new _hx_array(array(2, 3, 1))), $arr, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 221, "className" => "thx.TestArrays", "methodName" => "testOrderFn")));
	}
	public function testOrderFnObjectOfInt() {
		$obj1 = _hx_anonymous(array("key" => 1));
		$obj2 = _hx_anonymous(array("key" => 2));
		$obj3 = _hx_anonymous(array("key" => 3));
		$arr = (new _hx_array(array($obj2, $obj3, $obj1)));
		$_e = $arr;
		$tmp = array(new _hx_lambda(array(&$_e), "thx_TestArrays_18"), 'execute');
		$tmp1 = call_user_func_array($tmp, array(array(new _hx_lambda(array(), "thx_TestArrays_19"), 'execute')));
		utest_Assert::same((new _hx_array(array($obj1, $obj2, $obj3))), $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 229, "className" => "thx.TestArrays", "methodName" => "testOrderFnObjectOfInt")));
		utest_Assert::same((new _hx_array(array($obj2, $obj3, $obj1))), $arr, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 230, "className" => "thx.TestArrays", "methodName" => "testOrderFnObjectOfInt")));
	}
	public function testOrderFnObjectOfFloat() {
		$obj1 = _hx_anonymous(array("key" => 1.0));
		$obj2 = _hx_anonymous(array("key" => 2.0));
		$obj3 = _hx_anonymous(array("key" => 3.0));
		$arr = (new _hx_array(array($obj2, $obj3, $obj1)));
		$_e = $arr;
		$tmp = array(new _hx_lambda(array(&$_e), "thx_TestArrays_20"), 'execute');
		$tmp1 = call_user_func_array($tmp, array(array(new _hx_lambda(array(), "thx_TestArrays_21"), 'execute')));
		utest_Assert::same((new _hx_array(array($obj1, $obj2, $obj3))), $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 238, "className" => "thx.TestArrays", "methodName" => "testOrderFnObjectOfFloat")));
		utest_Assert::same((new _hx_array(array($obj2, $obj3, $obj1))), $arr, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 239, "className" => "thx.TestArrays", "methodName" => "testOrderFnObjectOfFloat")));
	}
	public function testSortFn() {
		$arr = (new _hx_array(array(2, 3, 1)));
		$arr->sort(array(new _hx_lambda(array(), "thx_TestArrays_22"), 'execute'));
		utest_Assert::same((new _hx_array(array(1, 2, 3))), $arr, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 246, "className" => "thx.TestArrays", "methodName" => "testSortFn")));
	}
	public function testContains() {
		$tmp = thx_Arrays::contains((new _hx_array(array(1, 2, 3))), 2, null);
		utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 251, "className" => "thx.TestArrays", "methodName" => "testContains")));
		$tmp1 = thx_Arrays::contains((new _hx_array(array(1, 2, 3))), 4, null);
		utest_Assert::isFalse($tmp1, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 252, "className" => "thx.TestArrays", "methodName" => "testContains")));
	}
	public function testContainsAll() {
		$tmp = thx_Arrays::containsAll((new _hx_array(array(1, 2, 3))), (new _hx_array(array(3, 1, 2))), null);
		utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 256, "className" => "thx.TestArrays", "methodName" => "testContainsAll")));
		$tmp1 = thx_Arrays::containsAll((new _hx_array(array(1, 2, 3))), (new _hx_array(array(3, 1, 2, 4))), null);
		utest_Assert::isFalse($tmp1, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 257, "className" => "thx.TestArrays", "methodName" => "testContainsAll")));
	}
	public function testContainsAny() {
		$tmp = thx_Arrays::containsAny((new _hx_array(array(1, 2, 3))), (new _hx_array(array(2, 3, 4))), null);
		utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 261, "className" => "thx.TestArrays", "methodName" => "testContainsAny")));
		$tmp1 = thx_Arrays::containsAny((new _hx_array(array(1, 2, 3))), (new _hx_array(array(4, 5, 6))), null);
		utest_Assert::isFalse($tmp1, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 262, "className" => "thx.TestArrays", "methodName" => "testContainsAny")));
	}
	public function testCount() {
		$map = thx_Arrays::count_Int((new _hx_array(array(2, 3, 2, 1, 4, 2, 3))));
		utest_Assert::equals(3, $map->get(2), null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 268, "className" => "thx.TestArrays", "methodName" => "testCount")));
		utest_Assert::equals(2, $map->get(3), null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 269, "className" => "thx.TestArrays", "methodName" => "testCount")));
		utest_Assert::equals(1, $map->get(1), null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 270, "className" => "thx.TestArrays", "methodName" => "testCount")));
		utest_Assert::equals(1, $map->get(4), null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 271, "className" => "thx.TestArrays", "methodName" => "testCount")));
	}
	public function testGroupBy() {
		$map = thx_Arrays::groupBy_Int_Float((new _hx_array(array(2.1, 3.5, 2.0, 1.4, 2.7, 3.0))), array(new _hx_lambda(array(), "thx_TestArrays_23"), 'execute'));
		utest_Assert::same((new _hx_array(array(2.1, 2.0, 2.7))), $map->get(2), null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 277, "className" => "thx.TestArrays", "methodName" => "testGroupBy")));
		utest_Assert::same((new _hx_array(array(3.5, 3.0))), $map->get(3), null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 278, "className" => "thx.TestArrays", "methodName" => "testGroupBy")));
		utest_Assert::same((new _hx_array(array(1.4))), $map->get(1), null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 279, "className" => "thx.TestArrays", "methodName" => "testGroupBy")));
	}
	public function testGroupByArray() {
		$map = thx_Arrays::groupBy_Int_Array_Int((new _hx_array(array((new _hx_array(array(0, 1))), (new _hx_array(array(0, 2))), (new _hx_array(array(1, 1)))))), array(new _hx_lambda(array(), "thx_TestArrays_24"), 'execute'));
		$_g = new haxe_ds_IntMap();
		$_g->set(0, (new _hx_array(array((new _hx_array(array(0, 1))), (new _hx_array(array(0, 2)))))));
		$_g->set(1, (new _hx_array(array((new _hx_array(array(1, 1)))))));
		utest_Assert::same($_g, $map, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 285, "className" => "thx.TestArrays", "methodName" => "testGroupByArray")));
	}
	public function testGroupByInstance() {
		$tmp = new thx__TestArrays_Sample(1);
		$tmp1 = new thx__TestArrays_Sample(1);
		$arr = (new _hx_array(array($tmp, $tmp1, new thx__TestArrays_Sample(2))));
		$map = thx_Arrays::groupBy_Int_thx__TestArrays_Sample($arr, array(new _hx_lambda(array(), "thx_TestArrays_25"), 'execute'));
		$_g = new haxe_ds_IntMap();
		{
			$tmp2 = new thx__TestArrays_Sample(1);
			$value = (new _hx_array(array($tmp2, new thx__TestArrays_Sample(1))));
			$_g->set(1, $value);
		}
		{
			$value1 = (new _hx_array(array(new thx__TestArrays_Sample(2))));
			$_g->set(2, $value1);
		}
		utest_Assert::same($_g, $map, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 294, "className" => "thx.TestArrays", "methodName" => "testGroupByInstance")));
	}
	public function testGroupByAnonymous() {
		$panels = (new _hx_array(array(_hx_anonymous(array("level" => 1)), _hx_anonymous(array("level" => 1)), _hx_anonymous(array("level" => 2)))));
		$map = new haxe_ds_IntMap();
		$results = thx_Arrays::groupByAppend($panels, array(new _hx_lambda(array(), "thx_TestArrays_26"), 'execute'), $map);
		$_g = new haxe_ds_IntMap();
		$_g->set(1, (new _hx_array(array(_hx_anonymous(array("level" => 1)), _hx_anonymous(array("level" => 1))))));
		$_g->set(2, (new _hx_array(array(_hx_anonymous(array("level" => 2))))));
		utest_Assert::same($_g, $results, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 305, "className" => "thx.TestArrays", "methodName" => "testGroupByAnonymous")));
	}
	public function testMapRight() {
		$tmp = thx_Arrays::mapRight((new _hx_array(array(1, 2, 3))), array(new _hx_lambda(array(), "thx_TestArrays_27"), 'execute'));
		utest_Assert::same((new _hx_array(array(6, 4, 2))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 313, "className" => "thx.TestArrays", "methodName" => "testMapRight")));
	}
	public function testFnRight() {
		$tmp = thx_Arrays::mapRight((new _hx_array(array(1, 2, 3))), array(new _hx_lambda(array(), "thx_TestArrays_28"), 'execute'));
		utest_Assert::same((new _hx_array(array(6, 4, 2))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 317, "className" => "thx.TestArrays", "methodName" => "testFnRight")));
	}
	public function testReduceRight() {
		$array = (new _hx_array(array("a", "b", "c")));
		$initial = "";
		$i = $array->length;
		while(true) {
			$tmp = --$i;
			if(!($tmp >= 0)) {
				break;
			}
			$tmp1 = strtoupper($array[$i]);
			$initial .= _hx_string_or_null($tmp1);
			unset($tmp1,$tmp);
		}
		utest_Assert::same("CBA", $initial, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 321, "className" => "thx.TestArrays", "methodName" => "testReduceRight")));
	}
	public function testRotate() {
		$tmp = thx_Arrays::rotate((new _hx_array(array((new _hx_array(array("a0", "b0"))), (new _hx_array(array("a1", "b1"))), (new _hx_array(array("a2", "b2")))))));
		utest_Assert::same((new _hx_array(array((new _hx_array(array("a0", "a1", "a2"))), (new _hx_array(array("b0", "b1", "b2")))))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 325, "className" => "thx.TestArrays", "methodName" => "testRotate")));
	}
	public function testDistinct() {
		$tmp = thx_Arrays::distinct((new _hx_array(array())), null);
		utest_Assert::same((new _hx_array(array())), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 333, "className" => "thx.TestArrays", "methodName" => "testDistinct")));
		$tmp1 = thx_Arrays::distinct((new _hx_array(array(1))), null);
		utest_Assert::same((new _hx_array(array(1))), $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 334, "className" => "thx.TestArrays", "methodName" => "testDistinct")));
		$tmp2 = thx_Arrays::distinct((new _hx_array(array("one"))), null);
		utest_Assert::same((new _hx_array(array("one"))), $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 335, "className" => "thx.TestArrays", "methodName" => "testDistinct")));
		$tmp3 = thx_Arrays::distinct((new _hx_array(array(1, 1))), null);
		utest_Assert::same((new _hx_array(array(1))), $tmp3, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 336, "className" => "thx.TestArrays", "methodName" => "testDistinct")));
		$tmp4 = thx_Arrays::distinct((new _hx_array(array(1, 2))), null);
		utest_Assert::same((new _hx_array(array(1, 2))), $tmp4, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 337, "className" => "thx.TestArrays", "methodName" => "testDistinct")));
		$tmp5 = thx_Arrays::distinct((new _hx_array(array("one", "two"))), null);
		utest_Assert::same((new _hx_array(array("one", "two"))), $tmp5, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 338, "className" => "thx.TestArrays", "methodName" => "testDistinct")));
		$tmp6 = thx_Arrays::distinct((new _hx_array(array(1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8))), null);
		utest_Assert::same((new _hx_array(array(1, 2, 3, 4, 5, 6, 7, 8))), $tmp6, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 339, "className" => "thx.TestArrays", "methodName" => "testDistinct")));
		$tmp7 = thx_Arrays::distinct((new _hx_array(array(8, 8, 1, 2, 7, 2, 3, 4, 5, 1, 5, 6, 7, 8, 2, 8))), null);
		utest_Assert::same((new _hx_array(array(8, 1, 2, 7, 3, 4, 5, 6))), $tmp7, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 340, "className" => "thx.TestArrays", "methodName" => "testDistinct")));
		$tmp8 = thx_Arrays::distinct((new _hx_array(array("one", "two", "one", "two", "three", "one", "two"))), null);
		utest_Assert::same((new _hx_array(array("one", "two", "three"))), $tmp8, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 341, "className" => "thx.TestArrays", "methodName" => "testDistinct")));
		$tmp9 = thx_Arrays::distinct((new _hx_array(array(false, false, true, false, true, true))), null);
		utest_Assert::same((new _hx_array(array(false, true))), $tmp9, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 342, "className" => "thx.TestArrays", "methodName" => "testDistinct")));
		$result = thx_Arrays::distinct((new _hx_array(array(_hx_anonymous(array("key" => "one")), _hx_anonymous(array("key" => "two")), _hx_anonymous(array("key" => "one")), _hx_anonymous(array("key" => "three")), _hx_anonymous(array("key" => "two"))))), array(new _hx_lambda(array(), "thx_TestArrays_29"), 'execute'));
		utest_Assert::same((new _hx_array(array(_hx_anonymous(array("key" => "one")), _hx_anonymous(array("key" => "two")), _hx_anonymous(array("key" => "three"))))), $result, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 348, "className" => "thx.TestArrays", "methodName" => "testDistinct")));
	}
	public function testSplit() {
		$arr = (new _hx_array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)));
		$tmp = thx_Arrays::split($arr, 1);
		utest_Assert::same((new _hx_array(array((new _hx_array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)))))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 353, "className" => "thx.TestArrays", "methodName" => "testSplit")));
		$tmp1 = thx_Arrays::split($arr, 2);
		utest_Assert::same((new _hx_array(array((new _hx_array(array(1, 2, 3, 4, 5))), (new _hx_array(array(6, 7, 8, 9, 0)))))), $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 354, "className" => "thx.TestArrays", "methodName" => "testSplit")));
		$tmp2 = thx_Arrays::split($arr, 3);
		utest_Assert::same((new _hx_array(array((new _hx_array(array(1, 2, 3, 4))), (new _hx_array(array(5, 6, 7, 8))), (new _hx_array(array(9, 0)))))), $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 355, "className" => "thx.TestArrays", "methodName" => "testSplit")));
		$tmp3 = thx_Arrays::split($arr, 4);
		utest_Assert::same((new _hx_array(array((new _hx_array(array(1, 2, 3))), (new _hx_array(array(4, 5, 6))), (new _hx_array(array(7, 8, 9))), (new _hx_array(array(0)))))), $tmp3, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 356, "className" => "thx.TestArrays", "methodName" => "testSplit")));
		$tmp4 = thx_Arrays::split($arr, 10);
		utest_Assert::same((new _hx_array(array((new _hx_array(array(1))), (new _hx_array(array(2))), (new _hx_array(array(3))), (new _hx_array(array(4))), (new _hx_array(array(5))), (new _hx_array(array(6))), (new _hx_array(array(7))), (new _hx_array(array(8))), (new _hx_array(array(9))), (new _hx_array(array(0)))))), $tmp4, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 357, "className" => "thx.TestArrays", "methodName" => "testSplit")));
		$tmp5 = thx_Arrays::split($arr, 20);
		utest_Assert::same((new _hx_array(array((new _hx_array(array(1))), (new _hx_array(array(2))), (new _hx_array(array(3))), (new _hx_array(array(4))), (new _hx_array(array(5))), (new _hx_array(array(6))), (new _hx_array(array(7))), (new _hx_array(array(8))), (new _hx_array(array(9))), (new _hx_array(array(0)))))), $tmp5, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 358, "className" => "thx.TestArrays", "methodName" => "testSplit")));
	}
	public function testSplitBy() {
		$arr = (new _hx_array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)));
		$tmp = thx_Arrays::splitBy($arr, 1);
		utest_Assert::same((new _hx_array(array((new _hx_array(array(1))), (new _hx_array(array(2))), (new _hx_array(array(3))), (new _hx_array(array(4))), (new _hx_array(array(5))), (new _hx_array(array(6))), (new _hx_array(array(7))), (new _hx_array(array(8))), (new _hx_array(array(9))), (new _hx_array(array(0)))))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 363, "className" => "thx.TestArrays", "methodName" => "testSplitBy")));
		$tmp1 = thx_Arrays::splitBy($arr, 2);
		utest_Assert::same((new _hx_array(array((new _hx_array(array(1, 2))), (new _hx_array(array(3, 4))), (new _hx_array(array(5, 6))), (new _hx_array(array(7, 8))), (new _hx_array(array(9, 0)))))), $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 364, "className" => "thx.TestArrays", "methodName" => "testSplitBy")));
		$tmp2 = thx_Arrays::splitBy($arr, 3);
		utest_Assert::same((new _hx_array(array((new _hx_array(array(1, 2, 3))), (new _hx_array(array(4, 5, 6))), (new _hx_array(array(7, 8, 9))), (new _hx_array(array(0)))))), $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 365, "className" => "thx.TestArrays", "methodName" => "testSplitBy")));
		$tmp3 = thx_Arrays::splitBy($arr, 4);
		utest_Assert::same((new _hx_array(array((new _hx_array(array(1, 2, 3, 4))), (new _hx_array(array(5, 6, 7, 8))), (new _hx_array(array(9, 0)))))), $tmp3, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 366, "className" => "thx.TestArrays", "methodName" => "testSplitBy")));
		$tmp4 = thx_Arrays::splitBy($arr, 10);
		utest_Assert::same((new _hx_array(array((new _hx_array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)))))), $tmp4, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 367, "className" => "thx.TestArrays", "methodName" => "testSplitBy")));
		$tmp5 = thx_Arrays::splitBy($arr, 20);
		utest_Assert::same((new _hx_array(array((new _hx_array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)))))), $tmp5, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 368, "className" => "thx.TestArrays", "methodName" => "testSplitBy")));
	}
	public function testSplitByPad() {
		$arr = (new _hx_array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)));
		$tmp = thx_Arrays::splitByPad($arr, 1, 0);
		utest_Assert::same((new _hx_array(array((new _hx_array(array(1))), (new _hx_array(array(2))), (new _hx_array(array(3))), (new _hx_array(array(4))), (new _hx_array(array(5))), (new _hx_array(array(6))), (new _hx_array(array(7))), (new _hx_array(array(8))), (new _hx_array(array(9))), (new _hx_array(array(0)))))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 373, "className" => "thx.TestArrays", "methodName" => "testSplitByPad")));
		$tmp1 = thx_Arrays::splitByPad($arr, 2, 0);
		utest_Assert::same((new _hx_array(array((new _hx_array(array(1, 2))), (new _hx_array(array(3, 4))), (new _hx_array(array(5, 6))), (new _hx_array(array(7, 8))), (new _hx_array(array(9, 0)))))), $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 374, "className" => "thx.TestArrays", "methodName" => "testSplitByPad")));
		$tmp2 = thx_Arrays::splitByPad($arr, 3, 0);
		utest_Assert::same((new _hx_array(array((new _hx_array(array(1, 2, 3))), (new _hx_array(array(4, 5, 6))), (new _hx_array(array(7, 8, 9))), (new _hx_array(array(0, 0, 0)))))), $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 375, "className" => "thx.TestArrays", "methodName" => "testSplitByPad")));
		$tmp3 = thx_Arrays::splitByPad($arr, 4, 0);
		utest_Assert::same((new _hx_array(array((new _hx_array(array(1, 2, 3, 4))), (new _hx_array(array(5, 6, 7, 8))), (new _hx_array(array(9, 0, 0, 0)))))), $tmp3, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 376, "className" => "thx.TestArrays", "methodName" => "testSplitByPad")));
		$tmp4 = thx_Arrays::splitByPad($arr, 10, 0);
		utest_Assert::same((new _hx_array(array((new _hx_array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)))))), $tmp4, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 377, "className" => "thx.TestArrays", "methodName" => "testSplitByPad")));
		$tmp5 = thx_Arrays::splitByPad($arr, 20, 0);
		utest_Assert::same((new _hx_array(array((new _hx_array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))))), $tmp5, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 378, "className" => "thx.TestArrays", "methodName" => "testSplitByPad")));
	}
	public function testTraverseOption() {
		$arr = (new _hx_array(array(1, 2, 3, 4, 5)));
		$f = array(new _hx_lambda(array(), "thx_TestArrays_30"), 'execute');
		$tmp = thx_Arrays::traverseOption($arr, $f);
		utest_Assert::same(haxe_ds_Option::$None, $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 385, "className" => "thx.TestArrays", "methodName" => "testTraverseOption")));
		$tmp1 = haxe_ds_Option::Some($arr);
		$tmp2 = thx_Arrays::traverseOption($arr, array(new _hx_lambda(array(), "thx_TestArrays_31"), 'execute'));
		utest_Assert::same($tmp1, $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 386, "className" => "thx.TestArrays", "methodName" => "testTraverseOption")));
	}
	public function testTraverseValidation() {
		$arr = (new _hx_array(array(1, 2, 3, 4, 5)));
		$ff = array(new _hx_lambda(array(), "thx_TestArrays_32"), 'execute');
		$fs = array(new _hx_lambda(array(), "thx_TestArrays_33"), 'execute');
		$e = thx__Nel_Nel_Impl_::nel("oops: 5", (new _hx_array(array("oops: 3", "oops: 1"))));
		$tmp1 = thx_Either::Left($e);
		$tmp2 = thx__Nel_Nel_Impl_::semigroup();
		$tmp3 = thx_Arrays::traverseValidation($arr, $ff, $tmp2);
		utest_Assert::same($tmp1, $tmp3, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 394, "className" => "thx.TestArrays", "methodName" => "testTraverseValidation")));
		$tmp4 = thx_Either::Right($arr);
		$tmp5 = thx__Nel_Nel_Impl_::semigroup();
		$tmp6 = thx_Arrays::traverseValidation($arr, $fs, $tmp5);
		utest_Assert::same($tmp4, $tmp6, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 395, "className" => "thx.TestArrays", "methodName" => "testTraverseValidation")));
	}
	public function testZip5Ap() {
		$tmp = thx_Arrays::zip5Ap(array(new _hx_lambda(array(), "thx_TestArrays_34"), 'execute'), (new _hx_array(array("a", "b", "c"))), (new _hx_array(array(1, 2))), (new _hx_array(array("x", "y", "z"))), (new _hx_array(array(3, 4))), (new _hx_array(array(true, false, true))));
		utest_Assert::same((new _hx_array(array("a1x3true", "b2y4false"))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestArrays.hx", "lineNumber" => 406, "className" => "thx.TestArrays", "methodName" => "testZip5Ap")));
	}
	function __toString() { return 'thx.TestArrays'; }
}
function thx_TestArrays_0(&$sum, $item) {
	{
		$sum += $item;
	}
}
function thx_TestArrays_1(&$indices, &$sum, $item, $i) {
	{
		$sum += $item;
		$indices->push($i);
	}
}
function thx_TestArrays_2(&$is, $v, $i) {
	{
		$is->push($i);
		return $v * 2;
	}
}
function thx_TestArrays_3($_) {
	{
		return $_->a;
	}
}
function thx_TestArrays_4($_) {
	{
		return $_->multiply(2);
	}
}
function thx_TestArrays_5($_) {
	{
		return $_->a;
	}
}
function thx_TestArrays_6(&$_e, $callback) {
	{
		return thx_Arrays::mapi($_e, $callback);
	}
}
function thx_TestArrays_7($_, $_1) {
	{
		return $_->multiply($_1);
	}
}
function thx_TestArrays_8($_) {
	{
		return _hx_mod($_, 2) !== 0;
	}
}
function thx_TestArrays_9($item) {
	{
		return _hx_mod($item, 3) === 0;
	}
}
function thx_TestArrays_10($item, $i) {
	{
		return $i === 1;
	}
}
function thx_TestArrays_11($item) {
	{
		return _hx_mod($item, 3) === 0;
	}
}
function thx_TestArrays_12($_) {
	{
		return _hx_mod($_, 3) === 0;
	}
}
function thx_TestArrays_13($_) {
	{
		return _hx_mod($_, 3) === 0;
	}
}
function thx_TestArrays_14($_) {
	{
		return $_ * 2;
	}
}
function thx_TestArrays_15($_0, $_1) {
	{
		return $_0 - $_1;
	}
}
function thx_TestArrays_16(&$_e, $sort) {
	{
		return thx_Arrays::order($_e, $sort);
	}
}
function thx_TestArrays_17($_0, $_1) {
	{
		return $_0 - $_1;
	}
}
function thx_TestArrays_18(&$_e, $sort) {
	{
		return thx_Arrays::order($_e, $sort);
	}
}
function thx_TestArrays_19($_0, $_1) {
	{
		return $_0->key - $_1->key;
	}
}
function thx_TestArrays_20(&$_e, $sort) {
	{
		return thx_Arrays::order($_e, $sort);
	}
}
function thx_TestArrays_21($_0, $_1) {
	{
		$a = $_0->key;
		$b = $_1->key;
		if($a < $b) {
			return -1;
		} else {
			if($a > $b) {
				return 1;
			} else {
				return 0;
			}
		}
	}
}
function thx_TestArrays_22($_0, $_1) {
	{
		return $_0 - $_1;
	}
}
function thx_TestArrays_23($f) {
	{
		return Math::floor($f);
	}
}
function thx_TestArrays_24($f) {
	{
		return $f[0];
	}
}
function thx_TestArrays_25($f) {
	{
		return $f->v;
	}
}
function thx_TestArrays_26($el) {
	{
		return $el->level;
	}
}
function thx_TestArrays_27($v) {
	{
		return $v * 2;
	}
}
function thx_TestArrays_28($_) {
	{
		return $_ * 2;
	}
}
function thx_TestArrays_29($a, $b) {
	{
		return $a->key === $b->key;
	}
}
function thx_TestArrays_30($i) {
	{
		if(_hx_mod($i, 2) === 0) {
			return haxe_ds_Option::Some($i);
		} else {
			return haxe_ds_Option::$None;
		}
	}
}
function thx_TestArrays_31($v) {
	{
		return haxe_ds_Option::Some($v);
	}
}
function thx_TestArrays_32($i) {
	{
		if(_hx_mod($i, 2) === 0) {
			return thx_Either::Right($i);
		} else {
			$tmp = thx__Nel_Nel_Impl_::pure("oops: " . _hx_string_rec($i, ""));
			return thx_Either::Left($tmp);
		}
	}
}
function thx_TestArrays_33($i1) {
	{
		return thx_Either::Right($i1);
	}
}
function thx_TestArrays_34($s, $i, $t, $j, $b) {
	{
		$tmp1 = "" . _hx_string_or_null($s) . _hx_string_rec($i, "") . _hx_string_or_null($t) . _hx_string_rec($j, "");
		$tmp2 = Std::string($b);
		return _hx_string_or_null($tmp1) . _hx_string_or_null($tmp2);
	}
}
