<?php

// Generated by Haxe 3.3.0
class thx_TestLocalDate {
	public function __construct() {
		if(!php_Boot::$skip_constructor) {
		$this->tomorrow = thx__LocalDate_LocalDate_Impl_::create(2015, 7, 27);
		$this->date = thx__LocalDate_LocalDate_Impl_::create(2015, 7, 26);
	}}
	public $date;
	public $tomorrow;
	public function testCreate() {
		$this1 = $this->date;
		$tmp = thx__LocalDate_LocalDate_Impl_::getDatePart($this1, thx__LocalDate_LocalDate_Impl_::$DATE_PART_YEAR);
		$this2 = $this->date;
		$tmp1 = thx__LocalDate_LocalDate_Impl_::getDatePart($this2, thx__LocalDate_LocalDate_Impl_::$DATE_PART_YEAR);
		utest_Assert::equals(2015, $tmp, "expected 2015 but got " . _hx_string_rec($tmp1, "") . " for year", _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 14, "className" => "thx.TestLocalDate", "methodName" => "testCreate")));
		$this3 = $this->date;
		$tmp2 = thx__LocalDate_LocalDate_Impl_::getDatePart($this3, thx__LocalDate_LocalDate_Impl_::$DATE_PART_MONTH);
		$this4 = $this->date;
		$tmp3 = thx__LocalDate_LocalDate_Impl_::getDatePart($this4, thx__LocalDate_LocalDate_Impl_::$DATE_PART_MONTH);
		utest_Assert::equals(7, $tmp2, "expected 7 but got " . _hx_string_rec($tmp3, "") . " for month", _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 15, "className" => "thx.TestLocalDate", "methodName" => "testCreate")));
		$this5 = $this->date;
		$tmp4 = thx__LocalDate_LocalDate_Impl_::getDatePart($this5, thx__LocalDate_LocalDate_Impl_::$DATE_PART_DAY);
		$this6 = $this->date;
		$tmp5 = thx__LocalDate_LocalDate_Impl_::getDatePart($this6, thx__LocalDate_LocalDate_Impl_::$DATE_PART_DAY);
		utest_Assert::equals(26, $tmp4, "expected 26 but got " . _hx_string_rec($tmp5, "") . " for day", _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 16, "className" => "thx.TestLocalDate", "methodName" => "testCreate")));
		$tmp6 = thx__LocalDate_LocalDate_Impl_::get_dayOfWeek($this->date);
		utest_Assert::equals(0, $tmp6, null, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 18, "className" => "thx.TestLocalDate", "methodName" => "testCreate")));
		$tmp7 = thx__LocalDate_LocalDate_Impl_::fromString("2014-12-01");
		$tmp8 = thx__LocalDate_LocalDate_Impl_::create(2014, 12, 1);
		$tmp9 = _hx_anonymous(array("expected" => $tmp7, "test" => $tmp8));
		$tmp10 = thx__LocalDate_LocalDate_Impl_::fromString("2015-03-01");
		$tmp11 = thx__LocalDate_LocalDate_Impl_::create(2014, 15, 1);
		$tmp12 = _hx_anonymous(array("expected" => $tmp10, "test" => $tmp11));
		$tmp13 = thx__LocalDate_LocalDate_Impl_::fromString("2013-11-01");
		$tmp14 = thx__LocalDate_LocalDate_Impl_::create(2014, -1, 1);
		$tmp15 = _hx_anonymous(array("expected" => $tmp13, "test" => $tmp14));
		$tmp16 = thx__LocalDate_LocalDate_Impl_::fromString("2014-03-04");
		$tmp17 = thx__LocalDate_LocalDate_Impl_::create(2014, 2, 32);
		$tmp18 = _hx_anonymous(array("expected" => $tmp16, "test" => $tmp17));
		$tmp19 = thx__LocalDate_LocalDate_Impl_::fromString("2013-12-31");
		$tmp20 = thx__LocalDate_LocalDate_Impl_::create(2014, 1, 0);
		_hx_deref((new _hx_array(array($tmp9, $tmp12, $tmp15, $tmp18, _hx_anonymous(array("expected" => $tmp19, "test" => $tmp20))))))->map(array(new _hx_lambda(array(), "thx_TestLocalDate_0"), 'execute'));
	}
	public function testToString() {
		$tmp = thx__LocalDate_LocalDate_Impl_::toString($this->date);
		utest_Assert::equals("2015-07-26", $tmp, null, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 38, "className" => "thx.TestLocalDate", "methodName" => "testToString")));
		$tmp1 = thx__LocalDate_LocalDate_Impl_::toString(0);
		utest_Assert::equals("1-01-01", $tmp1, null, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 39, "className" => "thx.TestLocalDate", "methodName" => "testToString")));
	}
	public function testEquals() {
		$tmp = $this->date === $this->date;
		utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 43, "className" => "thx.TestLocalDate", "methodName" => "testEquals")));
		$tmp1 = $this->date !== $this->tomorrow;
		utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 44, "className" => "thx.TestLocalDate", "methodName" => "testEquals")));
	}
	public function testCompare() {
		$tmp = $this->date - $this->date;
		utest_Assert::isFalse($tmp > 0, null, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 48, "className" => "thx.TestLocalDate", "methodName" => "testCompare")));
		$tmp1 = $this->date - $this->date;
		utest_Assert::isTrue($tmp1 >= 0, null, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 49, "className" => "thx.TestLocalDate", "methodName" => "testCompare")));
		$tmp2 = $this->date - $this->date;
		utest_Assert::isFalse($tmp2 < 0, null, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 50, "className" => "thx.TestLocalDate", "methodName" => "testCompare")));
		$tmp3 = $this->date - $this->date;
		utest_Assert::isTrue($tmp3 <= 0, null, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 51, "className" => "thx.TestLocalDate", "methodName" => "testCompare")));
		$tmp4 = $this->date - $this->tomorrow;
		utest_Assert::isFalse($tmp4 > 0, null, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 53, "className" => "thx.TestLocalDate", "methodName" => "testCompare")));
		$tmp5 = $this->date - $this->tomorrow;
		utest_Assert::isFalse($tmp5 >= 0, null, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 54, "className" => "thx.TestLocalDate", "methodName" => "testCompare")));
		$tmp6 = $this->date - $this->tomorrow;
		utest_Assert::isTrue($tmp6 < 0, null, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 55, "className" => "thx.TestLocalDate", "methodName" => "testCompare")));
		$tmp7 = $this->date - $this->tomorrow;
		utest_Assert::isTrue($tmp7 <= 0, null, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 56, "className" => "thx.TestLocalDate", "methodName" => "testCompare")));
		$tmp8 = $this->tomorrow - $this->date;
		utest_Assert::isTrue($tmp8 > 0, null, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 58, "className" => "thx.TestLocalDate", "methodName" => "testCompare")));
		$tmp9 = $this->tomorrow - $this->date;
		utest_Assert::isTrue($tmp9 >= 0, null, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 59, "className" => "thx.TestLocalDate", "methodName" => "testCompare")));
		$tmp10 = $this->tomorrow - $this->date;
		utest_Assert::isFalse($tmp10 < 0, null, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 60, "className" => "thx.TestLocalDate", "methodName" => "testCompare")));
		$tmp11 = $this->tomorrow - $this->date;
		utest_Assert::isFalse($tmp11 <= 0, null, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 61, "className" => "thx.TestLocalDate", "methodName" => "testCompare")));
	}
	public function testFromToDate() {
		$this1 = $this->date;
		$tmp = thx__LocalDate_LocalDate_Impl_::getDatePart($this1, thx__LocalDate_LocalDate_Impl_::$DATE_PART_YEAR);
		$tmp1 = thx__LocalDate_LocalDate_Impl_::getDatePart($this1, thx__LocalDate_LocalDate_Impl_::$DATE_PART_MONTH);
		$tmp2 = $tmp1 - 1;
		$tmp3 = thx__LocalDate_LocalDate_Impl_::getDatePart($this1, thx__LocalDate_LocalDate_Impl_::$DATE_PART_DAY);
		$tmp4 = new Date($tmp, $tmp2, $tmp3, 0, 0, 0);
		$d = thx__LocalDate_LocalDate_Impl_::fromDate($tmp4);
		$tmp5 = $this->date === $d;
		$tmp6 = thx__LocalDate_LocalDate_Impl_::toString($this->date);
		$tmp7 = "expected " . _hx_string_or_null($tmp6) . " but got ";
		$tmp8 = thx__LocalDate_LocalDate_Impl_::toString($d);
		utest_Assert::isTrue($tmp5, _hx_string_or_null($tmp7) . _hx_string_or_null($tmp8), _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 68, "className" => "thx.TestLocalDate", "methodName" => "testFromToDate")));
	}
	public function testFromToTime() {
		$this1 = $this->date;
		$tmp = thx__LocalDate_LocalDate_Impl_::getDatePart($this1, thx__LocalDate_LocalDate_Impl_::$DATE_PART_YEAR);
		$tmp1 = thx__LocalDate_LocalDate_Impl_::getDatePart($this1, thx__LocalDate_LocalDate_Impl_::$DATE_PART_MONTH);
		$tmp2 = $tmp1 - 1;
		$tmp3 = thx__LocalDate_LocalDate_Impl_::getDatePart($this1, thx__LocalDate_LocalDate_Impl_::$DATE_PART_DAY);
		$tmp4 = new Date($tmp, $tmp2, $tmp3, 0, 0, 0);
		$tmp5 = $tmp4->getTime();
		$date2 = thx__LocalDate_LocalDate_Impl_::fromTime($tmp5);
		$tmp6 = $this->date === $date2;
		$tmp7 = thx__LocalDate_LocalDate_Impl_::toString($this->date);
		$tmp8 = "expected " . _hx_string_or_null($tmp7) . " but got ";
		$tmp9 = thx__LocalDate_LocalDate_Impl_::toString($date2);
		utest_Assert::isTrue($tmp6, _hx_string_or_null($tmp8) . _hx_string_or_null($tmp9), _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 73, "className" => "thx.TestLocalDate", "methodName" => "testFromToTime")));
	}
	public function testFromToString() {
		$self = $this->date;
		$tmp = thx__LocalDate_LocalDate_Impl_::toString($this->date);
		$that = thx__LocalDate_LocalDate_Impl_::fromString($tmp);
		utest_Assert::isTrue($self === $that, null, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 78, "className" => "thx.TestLocalDate", "methodName" => "testFromToString")));
		$tmp1 = thx__LocalDate_LocalDate_Impl_::toString(thx__LocalDate_LocalDate_Impl_::fromString("0-06-07"));
		utest_Assert::equals("-1-07-27", $tmp1, null, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 80, "className" => "thx.TestLocalDate", "methodName" => "testFromToString")));
		$tmp2 = thx__LocalDate_LocalDate_Impl_::toString(thx__LocalDate_LocalDate_Impl_::fromString("-1-06-07"));
		utest_Assert::equals("-1-06-07", $tmp2, null, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 81, "className" => "thx.TestLocalDate", "methodName" => "testFromToString")));
		$tmp3 = thx__LocalDate_LocalDate_Impl_::toString(thx__LocalDate_LocalDate_Impl_::fromString("1-06-07"));
		utest_Assert::equals("1-06-07", $tmp3, null, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 82, "className" => "thx.TestLocalDate", "methodName" => "testFromToString")));
		$tmp4 = thx__LocalDate_LocalDate_Impl_::toString(thx__LocalDate_LocalDate_Impl_::fromString("-2014-01-01"));
		utest_Assert::equals("-2014-01-01", $tmp4, null, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 83, "className" => "thx.TestLocalDate", "methodName" => "testFromToString")));
	}
	public function testAdd() {
		$this1 = $this->date;
		$tmp = thx__LocalDate_LocalDate_Impl_::addMonths($this1, 24);
		$this2 = thx__LocalDate_LocalDate_Impl_::addMonths($tmp, 9);
		$d = $this2 + 10;
		$that = thx__LocalDate_LocalDate_Impl_::fromString("2018-05-06");
		$tmp1 = $d === $that;
		$tmp2 = "expected " . "2018-05-06" . " but got ";
		$tmp3 = thx__LocalDate_LocalDate_Impl_::toString($d);
		utest_Assert::isTrue($tmp1, _hx_string_or_null($tmp2) . _hx_string_or_null($tmp3), _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 92, "className" => "thx.TestLocalDate", "methodName" => "testAdd")));
	}
	public function testAddMonth() {
		$tmp = thx__LocalDate_LocalDate_Impl_::addMonths($this->date, 1);
		$tmp1 = thx__LocalDate_LocalDate_Impl_::fromString("2015-08-26");
		$tmp2 = _hx_anonymous(array("t" => $tmp, "e" => $tmp1));
		$tmp3 = thx__LocalDate_LocalDate_Impl_::addMonths($this->date, 0);
		$tmp4 = thx__LocalDate_LocalDate_Impl_::fromString("2015-07-26");
		$tmp5 = _hx_anonymous(array("t" => $tmp3, "e" => $tmp4));
		$tmp6 = thx__LocalDate_LocalDate_Impl_::addMonths($this->date, -1);
		$tmp7 = thx__LocalDate_LocalDate_Impl_::fromString("2015-06-26");
		$tmp8 = _hx_anonymous(array("t" => $tmp6, "e" => $tmp7));
		$tmp9 = thx__LocalDate_LocalDate_Impl_::addMonths($this->date, 7);
		$tmp10 = thx__LocalDate_LocalDate_Impl_::fromString("2016-02-26");
		$tmp11 = _hx_anonymous(array("t" => $tmp9, "e" => $tmp10));
		$tmp12 = thx__LocalDate_LocalDate_Impl_::addMonths($this->date, -7);
		$tmp13 = thx__LocalDate_LocalDate_Impl_::fromString("2014-12-26");
		$tmp14 = _hx_anonymous(array("t" => $tmp12, "e" => $tmp13));
		$tmp15 = thx__LocalDate_LocalDate_Impl_::addMonths($this->date, 14);
		$tmp16 = thx__LocalDate_LocalDate_Impl_::fromString("2016-09-26");
		$tmp17 = _hx_anonymous(array("t" => $tmp15, "e" => $tmp16));
		$tmp18 = thx__LocalDate_LocalDate_Impl_::addMonths($this->date, -14);
		$tmp19 = thx__LocalDate_LocalDate_Impl_::fromString("2014-05-26");
		$tests = (new _hx_array(array($tmp2, $tmp5, $tmp8, $tmp11, $tmp14, $tmp17, _hx_anonymous(array("t" => $tmp18, "e" => $tmp19)))));
		{
			$_g = 0;
			while($_g < $tests->length) {
				$test = $tests[$_g];
				++$_g;
				$tmp20 = $test->t === $test->e;
				$tmp21 = thx__LocalDate_LocalDate_Impl_::toString($test->e);
				$tmp22 = "expexted " . _hx_string_or_null($tmp21) . " but got ";
				$tmp23 = thx__LocalDate_LocalDate_Impl_::toString($test->t);
				utest_Assert::isTrue($tmp20, _hx_string_or_null($tmp22) . _hx_string_or_null($tmp23), _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 108, "className" => "thx.TestLocalDate", "methodName" => "testAddMonth")));
				unset($tmp23,$tmp22,$tmp21,$tmp20,$test);
			}
		}
	}
	public function testSnapNext() {
		$this->assertSnapNext("2014-01-01", "2014-01-01", thx_TimePeriod::$Minute, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 113, "className" => "thx.TestLocalDate", "methodName" => "testSnapNext")));
		$this->assertSnapNext("2014-01-01", "2014-01-01", thx_TimePeriod::$Hour, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 114, "className" => "thx.TestLocalDate", "methodName" => "testSnapNext")));
		$this->assertSnapNext("2014-01-02", "2014-01-01", thx_TimePeriod::$Day, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 115, "className" => "thx.TestLocalDate", "methodName" => "testSnapNext")));
		$this->assertSnapNext("2014-01-01", "2013-12-31", thx_TimePeriod::$Day, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 116, "className" => "thx.TestLocalDate", "methodName" => "testSnapNext")));
		$this->assertSnapNext("2014-12-21", "2014-12-17", thx_TimePeriod::$Week, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 117, "className" => "thx.TestLocalDate", "methodName" => "testSnapNext")));
		$this->assertSnapNext("2014-12-21", "2014-12-18", thx_TimePeriod::$Week, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 118, "className" => "thx.TestLocalDate", "methodName" => "testSnapNext")));
		$this->assertSnapNext("2015-01-01", "2014-12-12", thx_TimePeriod::$Month, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 119, "className" => "thx.TestLocalDate", "methodName" => "testSnapNext")));
		$this->assertSnapNext("2015-01-01", "2014-12-18", thx_TimePeriod::$Month, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 120, "className" => "thx.TestLocalDate", "methodName" => "testSnapNext")));
		$this->assertSnapNext("2015-01-01", "2014-05-12", thx_TimePeriod::$Year, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 121, "className" => "thx.TestLocalDate", "methodName" => "testSnapNext")));
		$this->assertSnapNext("2015-01-01", "2014-12-18", thx_TimePeriod::$Year, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 122, "className" => "thx.TestLocalDate", "methodName" => "testSnapNext")));
	}
	public function testSnapPrev() {
		$this->assertSnapPrev("2013-12-31", "2014-01-01", thx_TimePeriod::$Minute, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 126, "className" => "thx.TestLocalDate", "methodName" => "testSnapPrev")));
		$this->assertSnapPrev("2013-12-31", "2014-01-01", thx_TimePeriod::$Hour, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 127, "className" => "thx.TestLocalDate", "methodName" => "testSnapPrev")));
		$this->assertSnapPrev("2013-12-31", "2014-01-01", thx_TimePeriod::$Day, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 128, "className" => "thx.TestLocalDate", "methodName" => "testSnapPrev")));
		$this->assertSnapPrev("2013-12-30", "2013-12-31", thx_TimePeriod::$Day, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 129, "className" => "thx.TestLocalDate", "methodName" => "testSnapPrev")));
		$this->assertSnapPrev("2014-12-14", "2014-12-17", thx_TimePeriod::$Week, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 130, "className" => "thx.TestLocalDate", "methodName" => "testSnapPrev")));
		$this->assertSnapPrev("2014-12-14", "2014-12-18", thx_TimePeriod::$Week, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 131, "className" => "thx.TestLocalDate", "methodName" => "testSnapPrev")));
		$this->assertSnapPrev("2014-12-01", "2014-12-12", thx_TimePeriod::$Month, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 132, "className" => "thx.TestLocalDate", "methodName" => "testSnapPrev")));
		$this->assertSnapPrev("2014-12-01", "2014-12-01", thx_TimePeriod::$Month, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 133, "className" => "thx.TestLocalDate", "methodName" => "testSnapPrev")));
		$this->assertSnapPrev("2014-12-01", "2014-12-18", thx_TimePeriod::$Month, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 134, "className" => "thx.TestLocalDate", "methodName" => "testSnapPrev")));
		$this->assertSnapPrev("2014-01-01", "2014-05-12", thx_TimePeriod::$Year, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 135, "className" => "thx.TestLocalDate", "methodName" => "testSnapPrev")));
		$this->assertSnapPrev("2014-01-01", "2014-12-18", thx_TimePeriod::$Year, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 136, "className" => "thx.TestLocalDate", "methodName" => "testSnapPrev")));
	}
	public function testSnapTo() {
		$this->assertSnapTo("2014-01-01", "2014-01-01", thx_TimePeriod::$Minute, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 140, "className" => "thx.TestLocalDate", "methodName" => "testSnapTo")));
		$this->assertSnapTo("2014-01-01", "2014-01-01", thx_TimePeriod::$Hour, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 141, "className" => "thx.TestLocalDate", "methodName" => "testSnapTo")));
		$this->assertSnapTo("2014-01-01", "2014-01-01", thx_TimePeriod::$Day, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 142, "className" => "thx.TestLocalDate", "methodName" => "testSnapTo")));
		$this->assertSnapTo("2013-12-31", "2013-12-31", thx_TimePeriod::$Day, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 143, "className" => "thx.TestLocalDate", "methodName" => "testSnapTo")));
		$this->assertSnapTo("2014-12-14", "2014-12-17", thx_TimePeriod::$Week, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 144, "className" => "thx.TestLocalDate", "methodName" => "testSnapTo")));
		$this->assertSnapTo("2014-12-21", "2014-12-18", thx_TimePeriod::$Week, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 145, "className" => "thx.TestLocalDate", "methodName" => "testSnapTo")));
		$this->assertSnapTo("2014-12-01", "2014-12-12", thx_TimePeriod::$Month, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 146, "className" => "thx.TestLocalDate", "methodName" => "testSnapTo")));
		$this->assertSnapTo("2015-01-01", "2014-12-18", thx_TimePeriod::$Month, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 147, "className" => "thx.TestLocalDate", "methodName" => "testSnapTo")));
		$this->assertSnapTo("2014-01-01", "2014-05-12", thx_TimePeriod::$Year, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 148, "className" => "thx.TestLocalDate", "methodName" => "testSnapTo")));
		$this->assertSnapTo("2015-01-01", "2014-12-18", thx_TimePeriod::$Year, _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 149, "className" => "thx.TestLocalDate", "methodName" => "testSnapTo")));
	}
	public function assertSnapTo($expected, $date, $period, $pos = null) {
		$tmp = thx__LocalDate_LocalDate_Impl_::fromString($date);
		$t = thx__LocalDate_LocalDate_Impl_::snapTo($tmp, $period);
		$self = thx__LocalDate_LocalDate_Impl_::fromString($expected);
		$tmp1 = $self === $t;
		$tmp2 = "expected " . _hx_string_or_null($date) . " to snap to " . _hx_string_or_null($expected) . " for ";
		$tmp3 = Std::string($period);
		$tmp4 = _hx_string_or_null($tmp2) . _hx_string_or_null($tmp3) . " but it is ";
		$tmp5 = thx__LocalDate_LocalDate_Impl_::toString($t);
		utest_Assert::isTrue($tmp1, _hx_string_or_null($tmp4) . _hx_string_or_null($tmp5), $pos);
	}
	public function assertSnapPrev($expected, $date, $period, $pos = null) {
		$tmp = thx__LocalDate_LocalDate_Impl_::fromString($date);
		$t = thx__LocalDate_LocalDate_Impl_::snapPrev($tmp, $period);
		$self = thx__LocalDate_LocalDate_Impl_::fromString($expected);
		$tmp1 = $self === $t;
		$tmp2 = "expected " . _hx_string_or_null($date) . " to snap before " . _hx_string_or_null($expected) . " for ";
		$tmp3 = Std::string($period);
		$tmp4 = _hx_string_or_null($tmp2) . _hx_string_or_null($tmp3) . " but it is ";
		$tmp5 = thx__LocalDate_LocalDate_Impl_::toString($t);
		utest_Assert::isTrue($tmp1, _hx_string_or_null($tmp4) . _hx_string_or_null($tmp5), $pos);
	}
	public function assertSnapNext($expected, $date, $period, $pos = null) {
		$tmp = thx__LocalDate_LocalDate_Impl_::fromString($date);
		$t = thx__LocalDate_LocalDate_Impl_::snapNext($tmp, $period);
		$self = thx__LocalDate_LocalDate_Impl_::fromString($expected);
		$tmp1 = $self === $t;
		$tmp2 = "expected " . _hx_string_or_null($date) . " to snap after " . _hx_string_or_null($expected) . " for ";
		$tmp3 = Std::string($period);
		$tmp4 = _hx_string_or_null($tmp2) . _hx_string_or_null($tmp3) . " but it is ";
		$tmp5 = thx__LocalDate_LocalDate_Impl_::toString($t);
		utest_Assert::isTrue($tmp1, _hx_string_or_null($tmp4) . _hx_string_or_null($tmp5), $pos);
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.TestLocalDate'; }
}
function thx_TestLocalDate_0($o) {
	{
		$tmp21 = $o->expected === $o->test;
		$tmp22 = thx__LocalDate_LocalDate_Impl_::toString($o->expected);
		$tmp23 = "expected " . _hx_string_or_null($tmp22) . " but was  ";
		$tmp24 = thx__LocalDate_LocalDate_Impl_::toString($o->test);
		utest_Assert::isTrue($tmp21, _hx_string_or_null($tmp23) . _hx_string_or_null($tmp24), _hx_anonymous(array("fileName" => "TestLocalDate.hx", "lineNumber" => 33, "className" => "thx.TestLocalDate", "methodName" => "testCreate")));
	}
}
