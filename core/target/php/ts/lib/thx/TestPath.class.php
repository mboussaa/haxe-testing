<?php

// Generated by Haxe 3.3.0
class thx_TestPath {
	public function __construct() {}
	public function testIsRelativeAndIsAbsolute() {
		$rel = thx__Path_Path_Impl_::fromString("a/b");
		$abs = thx__Path_Path_Impl_::fromString("/a/b");
		utest_Assert::isTrue($rel[1] === "", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 13, "className" => "thx.TestPath", "methodName" => "testIsRelativeAndIsAbsolute")));
		utest_Assert::isFalse($rel[1] !== "", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 14, "className" => "thx.TestPath", "methodName" => "testIsRelativeAndIsAbsolute")));
		utest_Assert::isTrue($abs[1] !== "", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 15, "className" => "thx.TestPath", "methodName" => "testIsRelativeAndIsAbsolute")));
		utest_Assert::isFalse($abs[1] === "", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 16, "className" => "thx.TestPath", "methodName" => "testIsRelativeAndIsAbsolute")));
	}
	public function testPathTo() {
		$path1 = thx__Path_Path_Impl_::fromString("/a/b/c");
		$path2 = thx__Path_Path_Impl_::fromString("/a/d");
		$path3 = thx__Path_Path_Impl_::fromString("/x/y/z");
		$path4 = thx__Path_Path_Impl_::fromString("a/b/c");
		$path5 = thx__Path_Path_Impl_::fromString("x/y/z");
		$tmp = thx__Path_Path_Impl_::pathTo($path1, $path2);
		$tmp1 = thx__Path_Path_Impl_::toString($tmp);
		utest_Assert::equals("../../d", $tmp1, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 25, "className" => "thx.TestPath", "methodName" => "testPathTo")));
		$tmp2 = thx__Path_Path_Impl_::pathTo($path1, $path3);
		$tmp3 = thx__Path_Path_Impl_::toString($tmp2);
		utest_Assert::equals("../../../x/y/z", $tmp3, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 26, "className" => "thx.TestPath", "methodName" => "testPathTo")));
		$tmp4 = thx__Path_Path_Impl_::pathTo($path2, $path1);
		$tmp5 = thx__Path_Path_Impl_::toString($tmp4);
		utest_Assert::equals("../b/c", $tmp5, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 27, "className" => "thx.TestPath", "methodName" => "testPathTo")));
		$tmp6 = thx__Path_Path_Impl_::pathTo($path1, $path4);
		$tmp7 = thx__Path_Path_Impl_::toString($tmp6);
		utest_Assert::equals("/a/b/c/a/b/c", $tmp7, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 29, "className" => "thx.TestPath", "methodName" => "testPathTo")));
		$tmp8 = thx__Path_Path_Impl_::pathTo($path5, $path2);
		$tmp9 = thx__Path_Path_Impl_::toString($tmp8);
		utest_Assert::equals("/a/d", $tmp9, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 30, "className" => "thx.TestPath", "methodName" => "testPathTo")));
		$tmp10 = thx__Path_Path_Impl_::pathTo($path4, $path5);
		$tmp11 = thx__Path_Path_Impl_::toString($tmp10);
		utest_Assert::equals("a/b/c/x/y/z", $tmp11, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 31, "className" => "thx.TestPath", "methodName" => "testPathTo")));
	}
	public function testUp() {
		$tmp = thx__Path_Path_Impl_::up(thx__Path_Path_Impl_::fromString("/a/b/c/"), null);
		$tmp1 = thx__Path_Path_Impl_::toString($tmp);
		utest_Assert::equals("/a/b", $tmp1, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 35, "className" => "thx.TestPath", "methodName" => "testUp")));
		$tmp2 = thx__Path_Path_Impl_::up(thx__Path_Path_Impl_::fromString("/a"), 2);
		$tmp3 = thx__Path_Path_Impl_::toString($tmp2);
		utest_Assert::equals("/", $tmp3, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 36, "className" => "thx.TestPath", "methodName" => "testUp")));
	}
	public function testDir() {
		$tmp = thx__Path_Path_Impl_::dir(thx__Path_Path_Impl_::fromString("/a/b/c"));
		utest_Assert::equals("/a/b", $tmp, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 40, "className" => "thx.TestPath", "methodName" => "testDir")));
		$tmp1 = thx__Path_Path_Impl_::dir(thx__Path_Path_Impl_::fromString("a/b/c"));
		utest_Assert::equals("a/b", $tmp1, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 41, "className" => "thx.TestPath", "methodName" => "testDir")));
		$tmp2 = thx__Path_Path_Impl_::dir(thx__Path_Path_Impl_::fromString("a"));
		utest_Assert::equals(".", $tmp2, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 42, "className" => "thx.TestPath", "methodName" => "testDir")));
		$tmp3 = thx__Path_Path_Impl_::dir(thx__Path_Path_Impl_::fromString(".."));
		utest_Assert::equals(".", $tmp3, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 43, "className" => "thx.TestPath", "methodName" => "testDir")));
	}
	public function testBase() {
		$path = thx__Path_Path_Impl_::fromString("/a/b.c");
		$tmp = thx__Path_Path_Impl_::base($path, null);
		utest_Assert::equals("b.c", $tmp, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 48, "className" => "thx.TestPath", "methodName" => "testBase")));
		$tmp1 = thx__Path_Path_Impl_::base($path, ".c");
		utest_Assert::equals("b", $tmp1, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 49, "className" => "thx.TestPath", "methodName" => "testBase")));
		$tmp2 = thx__Path_Path_Impl_::base($path, "c");
		utest_Assert::equals("b.", $tmp2, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 50, "className" => "thx.TestPath", "methodName" => "testBase")));
		$tmp3 = thx__Path_Path_Impl_::base($path, ".d");
		utest_Assert::equals("b.c", $tmp3, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 51, "className" => "thx.TestPath", "methodName" => "testBase")));
	}
	public function testExt() {
		thx__Path_Path_Impl_::fromString("");
		$tmp = thx__Path_Path_Impl_::ext(thx__Path_Path_Impl_::fromString("/a/b.c"));
		utest_Assert::equals("c", $tmp, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 56, "className" => "thx.TestPath", "methodName" => "testExt")));
		$tmp1 = thx__Path_Path_Impl_::ext(thx__Path_Path_Impl_::fromString("/a/b/c"));
		utest_Assert::equals("", $tmp1, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 57, "className" => "thx.TestPath", "methodName" => "testExt")));
	}
	public function testSep() {
		$path = thx__Path_Path_Impl_::fromString("/path/to/file.png");
		$win = thx__Path_Path_Impl_::toWin32($path, "C:");
		utest_Assert::equals("/", $path[0], null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 63, "className" => "thx.TestPath", "methodName" => "testSep")));
		utest_Assert::equals("\\", $win[0], null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 64, "className" => "thx.TestPath", "methodName" => "testSep")));
		utest_Assert::isTrue($path[0] === "/", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 65, "className" => "thx.TestPath", "methodName" => "testSep")));
		utest_Assert::isFalse($path[0] === "\\", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 66, "className" => "thx.TestPath", "methodName" => "testSep")));
		utest_Assert::isTrue($win[0] === "\\", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 67, "className" => "thx.TestPath", "methodName" => "testSep")));
		utest_Assert::isFalse($win[0] === "/", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 68, "className" => "thx.TestPath", "methodName" => "testSep")));
	}
	public function testJoin() {
		$tmp = thx__Path_Path_Impl_::fromString("/a/x");
		$tmp1 = thx__Path_Path_Impl_::join($tmp, thx__Path_Path_Impl_::fromString("../b/c"));
		$tmp2 = thx__Path_Path_Impl_::toString($tmp1);
		utest_Assert::equals("/a/b/c", $tmp2, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 72, "className" => "thx.TestPath", "methodName" => "testJoin")));
		$tmp3 = thx__Path_Path_Impl_::fromString("../x");
		$tmp4 = thx__Path_Path_Impl_::join($tmp3, thx__Path_Path_Impl_::fromString("../b/c"));
		$tmp5 = thx__Path_Path_Impl_::toString($tmp4);
		utest_Assert::equals("../b/c", $tmp5, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 73, "className" => "thx.TestPath", "methodName" => "testJoin")));
		$tmp6 = thx__Path_Path_Impl_::fromString("/a/x");
		$tmp7 = thx__Path_Path_Impl_::join($tmp6, thx__Path_Path_Impl_::fromString("/b/c"));
		$tmp8 = thx__Path_Path_Impl_::toString($tmp7);
		utest_Assert::equals("/b/c", $tmp8, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 74, "className" => "thx.TestPath", "methodName" => "testJoin")));
	}
	public function testJoinString() {
		$tmp = thx__Path_Path_Impl_::fromString("/a/b");
		$tmp1 = thx__Path_Path_Impl_::join($tmp, thx__Path_Path_Impl_::fromString("c"));
		$tmp2 = thx__Path_Path_Impl_::toString($tmp1);
		utest_Assert::equals("/a/b/c", $tmp2, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 78, "className" => "thx.TestPath", "methodName" => "testJoinString")));
		$tmp3 = thx__Path_Path_Impl_::fromString("../x");
		$tmp4 = thx__Path_Path_Impl_::join($tmp3, thx__Path_Path_Impl_::fromString("../d"));
		$tmp5 = thx__Path_Path_Impl_::toString($tmp4);
		utest_Assert::equals("../d", $tmp5, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 79, "className" => "thx.TestPath", "methodName" => "testJoinString")));
	}
	public function testToWin32ToNix() {
		$path = thx__Path_Path_Impl_::fromString("/path/to/file.png");
		$win = thx__Path_Path_Impl_::toWin32($path, null);
		$tmp = thx__Path_Path_Impl_::toString($win);
		utest_Assert::equals("C:\\path\\to\\file.png", $tmp, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 85, "className" => "thx.TestPath", "methodName" => "testToWin32ToNix")));
		$tmp1 = thx__Path_Path_Impl_::toNix($win);
		$tmp2 = thx__Path_Path_Impl_::toString($tmp1);
		utest_Assert::equals("/path/to/file.png", $tmp2, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 86, "className" => "thx.TestPath", "methodName" => "testToWin32ToNix")));
		$path = thx__Path_Path_Impl_::fromString("path/to/file.png");
		$win = thx__Path_Path_Impl_::toWin32($path, null);
		$tmp3 = thx__Path_Path_Impl_::toString($win);
		utest_Assert::equals("path\\to\\file.png", $tmp3, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 90, "className" => "thx.TestPath", "methodName" => "testToWin32ToNix")));
		$tmp4 = thx__Path_Path_Impl_::toNix($win);
		$tmp5 = thx__Path_Path_Impl_::toString($tmp4);
		utest_Assert::equals("path/to/file.png", $tmp5, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 91, "className" => "thx.TestPath", "methodName" => "testToWin32ToNix")));
	}
	public function testNormalization() {
		$tmp = thx__Path_Path_Impl_::toString(thx__Path_Path_Impl_::fromString("a/.././b/../c/."));
		utest_Assert::equals("c", $tmp, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 95, "className" => "thx.TestPath", "methodName" => "testNormalization")));
		$tmp1 = thx__Path_Path_Impl_::toString(thx__Path_Path_Impl_::fromString("a/./b/../c/."));
		utest_Assert::equals("a/c", $tmp1, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 96, "className" => "thx.TestPath", "methodName" => "testNormalization")));
		$tmp2 = thx__Path_Path_Impl_::toString(thx__Path_Path_Impl_::fromString("/a/.././b/./c/."));
		utest_Assert::equals("/b/c", $tmp2, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 97, "className" => "thx.TestPath", "methodName" => "testNormalization")));
		$tmp3 = thx__Path_Path_Impl_::toString(thx__Path_Path_Impl_::fromString("a/../../../b/../c/."));
		utest_Assert::equals("../../c", $tmp3, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 98, "className" => "thx.TestPath", "methodName" => "testNormalization")));
	}
	public function testToString() {
		$tmp = thx__Path_Path_Impl_::toString(thx__Path_Path_Impl_::fromString("."));
		utest_Assert::equals(".", $tmp, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 102, "className" => "thx.TestPath", "methodName" => "testToString")));
		$tmp1 = thx__Path_Path_Impl_::toString(thx__Path_Path_Impl_::fromString(".."));
		utest_Assert::equals("..", $tmp1, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 103, "className" => "thx.TestPath", "methodName" => "testToString")));
		$tmp2 = thx__Path_Path_Impl_::toString(thx__Path_Path_Impl_::fromString("../"));
		utest_Assert::equals("..", $tmp2, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 104, "className" => "thx.TestPath", "methodName" => "testToString")));
		$tmp3 = thx__Path_Path_Impl_::toString(thx__Path_Path_Impl_::fromString("/../"));
		utest_Assert::equals("/", $tmp3, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 105, "className" => "thx.TestPath", "methodName" => "testToString")));
		$tmp4 = thx__Path_Path_Impl_::toString(thx__Path_Path_Impl_::fromString("/"));
		utest_Assert::equals("/", $tmp4, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 106, "className" => "thx.TestPath", "methodName" => "testToString")));
		$tmp5 = thx__Path_Path_Impl_::toString(thx__Path_Path_Impl_::fromString("/a///a"));
		utest_Assert::equals("/a/a", $tmp5, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 107, "className" => "thx.TestPath", "methodName" => "testToString")));
		$tmp6 = thx__Path_Path_Impl_::toString(thx__Path_Path_Impl_::fromString("/a/a/"));
		utest_Assert::equals("/a/a", $tmp6, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 108, "className" => "thx.TestPath", "methodName" => "testToString")));
		$tmp7 = thx__Path_Path_Impl_::toString(thx__Path_Path_Impl_::fromString("a/.."));
		utest_Assert::equals(".", $tmp7, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 109, "className" => "thx.TestPath", "methodName" => "testToString")));
		$tmp8 = thx__Path_Path_Impl_::toString(thx__Path_Path_Impl_::fromString("a"));
		utest_Assert::equals("a", $tmp8, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 110, "className" => "thx.TestPath", "methodName" => "testToString")));
	}
	public function testNormalize() {
		$p = (new _hx_array(array("/", "/", "a/*>b")));
		$tmp = thx__Path_Path_Impl_::isValid($p);
		utest_Assert::isFalse($tmp, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 115, "className" => "thx.TestPath", "methodName" => "testNormalize")));
		$p = thx__Path_Path_Impl_::normalize($p);
		$tmp1 = thx__Path_Path_Impl_::isValid($p);
		utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 117, "className" => "thx.TestPath", "methodName" => "testNormalize")));
		$tmp2 = thx__Path_Path_Impl_::toString($p);
		utest_Assert::equals("/a_*>b", $tmp2, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 118, "className" => "thx.TestPath", "methodName" => "testNormalize")));
		$p = thx__Path_Path_Impl_::toWin32($p, null);
		$tmp3 = thx__Path_Path_Impl_::isValid($p);
		utest_Assert::isFalse($tmp3, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 120, "className" => "thx.TestPath", "methodName" => "testNormalize")));
		$p = thx__Path_Path_Impl_::normalize($p);
		$tmp4 = thx__Path_Path_Impl_::isValid($p);
		utest_Assert::isTrue($tmp4, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 122, "className" => "thx.TestPath", "methodName" => "testNormalize")));
		$tmp5 = thx__Path_Path_Impl_::toString($p);
		utest_Assert::equals("C:\\a___b", $tmp5, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 123, "className" => "thx.TestPath", "methodName" => "testNormalize")));
	}
	public function testRoot() {
		$root = thx__Path_Path_Impl_::fromString("C:\\");
		utest_Assert::isFalse($root[0] === "/", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 128, "className" => "thx.TestPath", "methodName" => "testRoot")));
		utest_Assert::isTrue($root[0] === "\\", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 129, "className" => "thx.TestPath", "methodName" => "testRoot")));
		utest_Assert::isTrue($root[1] !== "", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 130, "className" => "thx.TestPath", "methodName" => "testRoot")));
		utest_Assert::isFalse($root[1] === "", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 131, "className" => "thx.TestPath", "methodName" => "testRoot")));
		$tmp = thx__Path_Path_Impl_::isRoot($root);
		utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 132, "className" => "thx.TestPath", "methodName" => "testRoot")));
		$tmp1 = thx__Path_Path_Impl_::toString($root);
		utest_Assert::equals("C:\\", $tmp1, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 133, "className" => "thx.TestPath", "methodName" => "testRoot")));
		$path = $root->slice(2, null);
		$tmp2 = $root[0];
		$tmp3 = thx__Path_Path_Impl_::resolve($path, false);
		$parts = _hx_deref((new _hx_array(array($tmp2, ""))))->concat($tmp3);
		$tmp4 = thx__Path_Path_Impl_::toString($parts);
		utest_Assert::equals(".", $tmp4, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 134, "className" => "thx.TestPath", "methodName" => "testRoot")));
		$root = thx__Path_Path_Impl_::fromString("/");
		utest_Assert::isTrue($root[0] === "/", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 137, "className" => "thx.TestPath", "methodName" => "testRoot")));
		utest_Assert::isFalse($root[0] === "\\", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 138, "className" => "thx.TestPath", "methodName" => "testRoot")));
		utest_Assert::isTrue($root[1] !== "", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 139, "className" => "thx.TestPath", "methodName" => "testRoot")));
		utest_Assert::isFalse($root[1] === "", null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 140, "className" => "thx.TestPath", "methodName" => "testRoot")));
		$tmp5 = thx__Path_Path_Impl_::isRoot($root);
		utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 141, "className" => "thx.TestPath", "methodName" => "testRoot")));
		$tmp6 = thx__Path_Path_Impl_::toString($root);
		utest_Assert::equals("/", $tmp6, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 142, "className" => "thx.TestPath", "methodName" => "testRoot")));
		$path1 = $root->slice(2, null);
		$tmp7 = $root[0];
		$tmp8 = thx__Path_Path_Impl_::resolve($path1, false);
		$parts1 = _hx_deref((new _hx_array(array($tmp7, ""))))->concat($tmp8);
		$tmp9 = thx__Path_Path_Impl_::toString($parts1);
		utest_Assert::equals(".", $tmp9, null, _hx_anonymous(array("fileName" => "TestPath.hx", "lineNumber" => 143, "className" => "thx.TestPath", "methodName" => "testRoot")));
	}
	function __toString() { return 'thx.TestPath'; }
}
