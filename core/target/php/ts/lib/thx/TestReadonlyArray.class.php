<?php

// Generated by Haxe 3.3.0
class thx_TestReadonlyArray {
	public function __construct() {}
	public function testInsertAt() {
		$a = (new _hx_array(array(1, 2, 4)));
		$tmp = $a->slice(0, 0)->concat((new _hx_array(array(0))));
		$tmp1 = $a->slice(0, null);
		$b = $tmp->concat($tmp1);
		utest_Assert::isTrue($a !== $b, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 16, "className" => "thx.TestReadonlyArray", "methodName" => "testInsertAt")));
		utest_Assert::same((new _hx_array(array(0, 1, 2, 4))), $b, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 17, "className" => "thx.TestReadonlyArray", "methodName" => "testInsertAt")));
		$tmp2 = $a->slice(0, 2)->concat((new _hx_array(array(3))));
		$tmp3 = $a->slice(2, null);
		$b = $tmp2->concat($tmp3);
		utest_Assert::same((new _hx_array(array(1, 2, 3, 4))), $b, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 20, "className" => "thx.TestReadonlyArray", "methodName" => "testInsertAt")));
		$tmp4 = $a->slice(0, 10)->concat((new _hx_array(array(5))));
		$tmp5 = $a->slice(10, null);
		$b = $tmp4->concat($tmp5);
		utest_Assert::same((new _hx_array(array(1, 2, 4, 5))), $b, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 23, "className" => "thx.TestReadonlyArray", "methodName" => "testInsertAt")));
	}
	public function testReplaceAt() {
		$a = (new _hx_array(array(1, 2, 4)));
		$tmp = $a->slice(0, 0)->concat((new _hx_array(array(0))));
		$tmp1 = $a->slice(1, null);
		$b = $tmp->concat($tmp1);
		utest_Assert::isTrue($a !== $b, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 29, "className" => "thx.TestReadonlyArray", "methodName" => "testReplaceAt")));
		utest_Assert::same((new _hx_array(array(0, 2, 4))), $b, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 30, "className" => "thx.TestReadonlyArray", "methodName" => "testReplaceAt")));
		$tmp2 = $a->slice(0, 2)->concat((new _hx_array(array(3))));
		$tmp3 = $a->slice(3, null);
		$b = $tmp2->concat($tmp3);
		utest_Assert::same((new _hx_array(array(1, 2, 3))), $b, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 33, "className" => "thx.TestReadonlyArray", "methodName" => "testReplaceAt")));
		$tmp4 = $a->slice(0, 10)->concat((new _hx_array(array(5))));
		$tmp5 = $a->slice(11, null);
		$b = $tmp4->concat($tmp5);
		utest_Assert::same((new _hx_array(array(1, 2, 4, 5))), $b, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 36, "className" => "thx.TestReadonlyArray", "methodName" => "testReplaceAt")));
	}
	public function testPush() {
		$a = (new _hx_array(array(1, 2, 3)));
		$b = $a->concat((new _hx_array(array(4))));
		utest_Assert::same((new _hx_array(array(1, 2, 3))), $a, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 42, "className" => "thx.TestReadonlyArray", "methodName" => "testPush")));
		utest_Assert::same((new _hx_array(array(1, 2, 3, 4))), $b, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 43, "className" => "thx.TestReadonlyArray", "methodName" => "testPush")));
	}
	public function testPop() {
		$a = (new _hx_array(array(1, 2)));
		$result = null;
		$tmp = $a->length === 0;
		if($tmp) {
			$result = _hx_anonymous(array("_0" => null, "_1" => $a));
		} else {
			$value = $a[$a->length - 1];
			$pos = $a->length - 1;
			$tmp1 = $a->slice(0, $pos);
			$tmp2 = $a->slice($pos + 1, null);
			$array = $tmp1->concat($tmp2);
			$result = _hx_anonymous(array("_0" => $value, "_1" => $array));
		}
		utest_Assert::same(2, $result->_0, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 50, "className" => "thx.TestReadonlyArray", "methodName" => "testPop")));
		utest_Assert::same((new _hx_array(array(1))), $result->_1, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 51, "className" => "thx.TestReadonlyArray", "methodName" => "testPop")));
		$b = $result->_1;
		$tmp3 = $b->length === 0;
		if($tmp3) {
			$result = _hx_anonymous(array("_0" => null, "_1" => $b));
		} else {
			$value1 = $b[$b->length - 1];
			$pos1 = $b->length - 1;
			$tmp4 = $b->slice(0, $pos1);
			$tmp5 = $b->slice($pos1 + 1, null);
			$array1 = $tmp4->concat($tmp5);
			$result = _hx_anonymous(array("_0" => $value1, "_1" => $array1));
		}
		utest_Assert::same(1, $result->_0, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 55, "className" => "thx.TestReadonlyArray", "methodName" => "testPop")));
		utest_Assert::same((new _hx_array(array())), $result->_1, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 56, "className" => "thx.TestReadonlyArray", "methodName" => "testPop")));
		$c = $result->_1;
		$tmp6 = $c->length === 0;
		if($tmp6) {
			$result = _hx_anonymous(array("_0" => null, "_1" => $c));
		} else {
			$value2 = $c[$c->length - 1];
			$pos2 = $c->length - 1;
			$tmp7 = $c->slice(0, $pos2);
			$tmp8 = $c->slice($pos2 + 1, null);
			$array2 = $tmp7->concat($tmp8);
			$result = _hx_anonymous(array("_0" => $value2, "_1" => $array2));
		}
		utest_Assert::isNull($result->_0, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 60, "className" => "thx.TestReadonlyArray", "methodName" => "testPop")));
		utest_Assert::same((new _hx_array(array())), $result->_1, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 61, "className" => "thx.TestReadonlyArray", "methodName" => "testPop")));
		utest_Assert::same((new _hx_array(array(1, 2))), $a, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 63, "className" => "thx.TestReadonlyArray", "methodName" => "testPop")));
	}
	public function testShift() {
		$a = (new _hx_array(array(1, 2)));
		$result = thx__ReadonlyArray_ReadonlyArray_Impl_::shift($a);
		utest_Assert::same(1, $result->_0, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 70, "className" => "thx.TestReadonlyArray", "methodName" => "testShift")));
		utest_Assert::same((new _hx_array(array(2))), $result->_1, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 71, "className" => "thx.TestReadonlyArray", "methodName" => "testShift")));
		$result = thx__ReadonlyArray_ReadonlyArray_Impl_::shift($result->_1);
		utest_Assert::same(2, $result->_0, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 75, "className" => "thx.TestReadonlyArray", "methodName" => "testShift")));
		utest_Assert::same((new _hx_array(array())), $result->_1, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 76, "className" => "thx.TestReadonlyArray", "methodName" => "testShift")));
		$result = thx__ReadonlyArray_ReadonlyArray_Impl_::shift($result->_1);
		utest_Assert::isNull($result->_0, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 80, "className" => "thx.TestReadonlyArray", "methodName" => "testShift")));
		utest_Assert::same((new _hx_array(array())), $result->_1, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 81, "className" => "thx.TestReadonlyArray", "methodName" => "testShift")));
		utest_Assert::same((new _hx_array(array(1, 2))), $a, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 83, "className" => "thx.TestReadonlyArray", "methodName" => "testShift")));
	}
	public function testUnshift() {
		$a = (new _hx_array(array(1, 2, 3)));
		$b = _hx_deref((new _hx_array(array(4))))->concat($a);
		utest_Assert::same((new _hx_array(array(1, 2, 3))), $a, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 89, "className" => "thx.TestReadonlyArray", "methodName" => "testUnshift")));
		utest_Assert::same((new _hx_array(array(4, 1, 2, 3))), $b, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 90, "className" => "thx.TestReadonlyArray", "methodName" => "testUnshift")));
	}
	function __toString() { return 'thx.TestReadonlyArray'; }
}
