<?php

// Generated by Haxe 3.3.0
class thx_TestDateTimeUtc {
	public function __construct() {
		if(!php_Boot::$skip_constructor) {
		$this->tomorrow = thx__DateTimeUtc_DateTimeUtc_Impl_::create(2015, 7, 27, 21, 40, 30, 123);
		$this->date = thx__DateTimeUtc_DateTimeUtc_Impl_::create(2015, 7, 26, 21, 40, 30, 0);
	}}
	public $date;
	public $tomorrow;
	public function testCreate() {
		$tmp = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this->date, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
		$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this->date, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
		utest_Assert::equals(2015, $tmp, "expected 2015 but got " . _hx_string_rec($tmp1, "") . " for year", _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 16, "className" => "thx.TestDateTimeUtc", "methodName" => "testCreate")));
		$tmp2 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this->date, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
		$tmp3 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this->date, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
		utest_Assert::equals(7, $tmp2, "expected 7 but got " . _hx_string_rec($tmp3, "") . " for month", _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 17, "className" => "thx.TestDateTimeUtc", "methodName" => "testCreate")));
		$tmp4 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this->date, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
		$tmp5 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this->date, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
		utest_Assert::equals(26, $tmp4, "expected 26 but got " . _hx_string_rec($tmp5, "") . " for day", _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 18, "className" => "thx.TestDateTimeUtc", "methodName" => "testCreate")));
		$tmp6 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($this->date);
		$tmp7 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($this->date);
		utest_Assert::equals(21, $tmp6, "expected 21 but got " . _hx_string_rec($tmp7, "") . " for hour", _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 20, "className" => "thx.TestDateTimeUtc", "methodName" => "testCreate")));
		$tmp8 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_minute($this->date);
		$tmp9 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_minute($this->date);
		utest_Assert::equals(40, $tmp8, "expected 40 but got " . _hx_string_rec($tmp9, "") . " for minute", _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 21, "className" => "thx.TestDateTimeUtc", "methodName" => "testCreate")));
		$tmp10 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_second($this->date);
		$tmp11 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_second($this->date);
		utest_Assert::equals(30, $tmp10, "expected 30 but got " . _hx_string_rec($tmp11, "") . " for second", _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 22, "className" => "thx.TestDateTimeUtc", "methodName" => "testCreate")));
		$tmp12 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_millisecond($this->tomorrow);
		$tmp13 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_millisecond($this->tomorrow);
		utest_Assert::equals(123, $tmp12, "expected 123 but got " . _hx_string_rec($tmp13, "") . " for millisecond", _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 24, "className" => "thx.TestDateTimeUtc", "methodName" => "testCreate")));
		$tmp14 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_microsecond($this->tomorrow);
		$tmp15 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_microsecond($this->tomorrow);
		utest_Assert::equals(123000, $tmp14, "expected 123 but got " . _hx_string_rec($tmp15, "") . " for microsecond", _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 25, "className" => "thx.TestDateTimeUtc", "methodName" => "testCreate")));
		$tmp16 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_tickInSecond($this->tomorrow);
		$tmp17 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_tickInSecond($this->tomorrow);
		utest_Assert::equals(1230000, $tmp16, "expected 123 but got " . _hx_string_rec($tmp17, "") . " for tickInSecond", _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 26, "className" => "thx.TestDateTimeUtc", "methodName" => "testCreate")));
		$tmp18 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_dayOfWeek($this->date);
		utest_Assert::equals(0, $tmp18, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 28, "className" => "thx.TestDateTimeUtc", "methodName" => "testCreate")));
	}
	public function testToString() {
		$tmp = thx__DateTimeUtc_DateTimeUtc_Impl_::toString($this->date);
		utest_Assert::equals("2015-07-26T21:40:30Z", $tmp, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 32, "className" => "thx.TestDateTimeUtc", "methodName" => "testToString")));
		$x = new haxe__Int64____Int64(0, 0);
		$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x));
		utest_Assert::equals("1-01-01T00:00:00Z", $tmp1, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 33, "className" => "thx.TestDateTimeUtc", "methodName" => "testToString")));
	}
	public function testOverflowing() {
		$tmp = thx__DateTimeUtc_DateTimeUtc_Impl_::create(2014, 12, 1, null, null, null, null);
		$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString($tmp);
		utest_Assert::equals("2014-12-01T00:00:00Z", $tmp1, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 37, "className" => "thx.TestDateTimeUtc", "methodName" => "testOverflowing")));
		$tmp2 = thx__DateTimeUtc_DateTimeUtc_Impl_::create(2014, 16, 1, null, null, null, null);
		$tmp3 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString($tmp2);
		utest_Assert::equals("2015-04-01T00:00:00Z", $tmp3, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 39, "className" => "thx.TestDateTimeUtc", "methodName" => "testOverflowing")));
		$tmp4 = thx__DateTimeUtc_DateTimeUtc_Impl_::create(2014, -2, 1, null, null, null, null);
		$tmp5 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString($tmp4);
		utest_Assert::equals("2013-10-01T00:00:00Z", $tmp5, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 40, "className" => "thx.TestDateTimeUtc", "methodName" => "testOverflowing")));
		$tmp6 = thx__DateTimeUtc_DateTimeUtc_Impl_::create(2014, 2, 32, null, null, null, null);
		$tmp7 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString($tmp6);
		utest_Assert::equals("2014-03-04T00:00:00Z", $tmp7, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 43, "className" => "thx.TestDateTimeUtc", "methodName" => "testOverflowing")));
		$tmp8 = thx__DateTimeUtc_DateTimeUtc_Impl_::create(2014, 1, 0, null, null, null, null);
		$tmp9 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString($tmp8);
		utest_Assert::equals("2013-12-31T00:00:00Z", $tmp9, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 44, "className" => "thx.TestDateTimeUtc", "methodName" => "testOverflowing")));
		$tmp10 = thx__DateTimeUtc_DateTimeUtc_Impl_::create(2014, 2, 1, 26, null, null, null);
		$tmp11 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString($tmp10);
		utest_Assert::equals("2014-02-02T02:00:00Z", $tmp11, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 47, "className" => "thx.TestDateTimeUtc", "methodName" => "testOverflowing")));
		$tmp12 = thx__DateTimeUtc_DateTimeUtc_Impl_::create(2014, 1, 1, -1, null, null, null);
		$tmp13 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString($tmp12);
		utest_Assert::equals("2013-12-31T23:00:00Z", $tmp13, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 48, "className" => "thx.TestDateTimeUtc", "methodName" => "testOverflowing")));
		$tmp14 = thx__DateTimeUtc_DateTimeUtc_Impl_::create(2014, 2, 1, 0, 65, null, null);
		$tmp15 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString($tmp14);
		utest_Assert::equals("2014-02-01T01:05:00Z", $tmp15, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 51, "className" => "thx.TestDateTimeUtc", "methodName" => "testOverflowing")));
		$tmp16 = thx__DateTimeUtc_DateTimeUtc_Impl_::create(2014, 1, 1, 0, -1, null, null);
		$tmp17 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString($tmp16);
		utest_Assert::equals("2013-12-31T23:59:00Z", $tmp17, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 52, "className" => "thx.TestDateTimeUtc", "methodName" => "testOverflowing")));
		$tmp18 = thx__DateTimeUtc_DateTimeUtc_Impl_::create(2014, 2, 1, 0, 0, 65, null);
		$tmp19 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString($tmp18);
		utest_Assert::equals("2014-02-01T00:01:05Z", $tmp19, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 55, "className" => "thx.TestDateTimeUtc", "methodName" => "testOverflowing")));
		$tmp20 = thx__DateTimeUtc_DateTimeUtc_Impl_::create(2014, 1, 1, 0, 0, -1, null);
		$tmp21 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString($tmp20);
		utest_Assert::equals("2013-12-31T23:59:59Z", $tmp21, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 56, "className" => "thx.TestDateTimeUtc", "methodName" => "testOverflowing")));
	}
	public function testEquals() {
		$a = $this->date;
		$b = $this->date;
		$tmp = null;
		if($a->high === $b->high) {
			$tmp = $a->low === $b->low;
		} else {
			$tmp = false;
		}
		utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 60, "className" => "thx.TestDateTimeUtc", "methodName" => "testEquals")));
		$a1 = $this->date;
		$b1 = $this->tomorrow;
		$tmp1 = null;
		if(!($a1->high !== $b1->high)) {
			$tmp1 = $a1->low !== $b1->low;
		} else {
			$tmp1 = true;
		}
		utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 61, "className" => "thx.TestDateTimeUtc", "methodName" => "testEquals")));
	}
	public function testCompare() {
		$a = $this->date;
		$b = $this->date;
		$v = $a->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $v !== 0;
		if($tmp) {
			$v = $v;
		} else {
			$v = haxe__Int32_Int32_Impl_::ucompare($a->low, $b->low);
		}
		$tmp1 = null;
		if($a->high < 0) {
			if($b->high < 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = -1;
			}
		} else {
			if($b->high >= 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = 1;
			}
		}
		utest_Assert::isFalse($tmp1 > 0, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 65, "className" => "thx.TestDateTimeUtc", "methodName" => "testCompare")));
		$a1 = $this->date;
		$b1 = $this->date;
		$v1 = $a1->high - $b1->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp2 = $v1 !== 0;
		if($tmp2) {
			$v1 = $v1;
		} else {
			$v1 = haxe__Int32_Int32_Impl_::ucompare($a1->low, $b1->low);
		}
		$tmp3 = null;
		if($a1->high < 0) {
			if($b1->high < 0) {
				$tmp3 = $v1;
			} else {
				$tmp3 = -1;
			}
		} else {
			if($b1->high >= 0) {
				$tmp3 = $v1;
			} else {
				$tmp3 = 1;
			}
		}
		utest_Assert::isTrue($tmp3 >= 0, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 66, "className" => "thx.TestDateTimeUtc", "methodName" => "testCompare")));
		$a2 = $this->date;
		$b2 = $this->date;
		$v2 = $a2->high - $b2->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp4 = $v2 !== 0;
		if($tmp4) {
			$v2 = $v2;
		} else {
			$v2 = haxe__Int32_Int32_Impl_::ucompare($a2->low, $b2->low);
		}
		$tmp5 = null;
		if($a2->high < 0) {
			if($b2->high < 0) {
				$tmp5 = $v2;
			} else {
				$tmp5 = -1;
			}
		} else {
			if($b2->high >= 0) {
				$tmp5 = $v2;
			} else {
				$tmp5 = 1;
			}
		}
		utest_Assert::isFalse($tmp5 < 0, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 67, "className" => "thx.TestDateTimeUtc", "methodName" => "testCompare")));
		$a3 = $this->date;
		$b3 = $this->date;
		$v3 = $a3->high - $b3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp6 = $v3 !== 0;
		if($tmp6) {
			$v3 = $v3;
		} else {
			$v3 = haxe__Int32_Int32_Impl_::ucompare($a3->low, $b3->low);
		}
		$tmp7 = null;
		if($a3->high < 0) {
			if($b3->high < 0) {
				$tmp7 = $v3;
			} else {
				$tmp7 = -1;
			}
		} else {
			if($b3->high >= 0) {
				$tmp7 = $v3;
			} else {
				$tmp7 = 1;
			}
		}
		utest_Assert::isTrue($tmp7 <= 0, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 68, "className" => "thx.TestDateTimeUtc", "methodName" => "testCompare")));
		$a4 = $this->date;
		$b4 = $this->tomorrow;
		$v4 = $a4->high - $b4->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp8 = $v4 !== 0;
		if($tmp8) {
			$v4 = $v4;
		} else {
			$v4 = haxe__Int32_Int32_Impl_::ucompare($a4->low, $b4->low);
		}
		$tmp9 = null;
		if($a4->high < 0) {
			if($b4->high < 0) {
				$tmp9 = $v4;
			} else {
				$tmp9 = -1;
			}
		} else {
			if($b4->high >= 0) {
				$tmp9 = $v4;
			} else {
				$tmp9 = 1;
			}
		}
		utest_Assert::isFalse($tmp9 > 0, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 70, "className" => "thx.TestDateTimeUtc", "methodName" => "testCompare")));
		$a5 = $this->date;
		$b5 = $this->tomorrow;
		$v5 = $a5->high - $b5->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp10 = $v5 !== 0;
		if($tmp10) {
			$v5 = $v5;
		} else {
			$v5 = haxe__Int32_Int32_Impl_::ucompare($a5->low, $b5->low);
		}
		$tmp11 = null;
		if($a5->high < 0) {
			if($b5->high < 0) {
				$tmp11 = $v5;
			} else {
				$tmp11 = -1;
			}
		} else {
			if($b5->high >= 0) {
				$tmp11 = $v5;
			} else {
				$tmp11 = 1;
			}
		}
		utest_Assert::isFalse($tmp11 >= 0, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 71, "className" => "thx.TestDateTimeUtc", "methodName" => "testCompare")));
		$a6 = $this->date;
		$b6 = $this->tomorrow;
		$v6 = $a6->high - $b6->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp12 = $v6 !== 0;
		if($tmp12) {
			$v6 = $v6;
		} else {
			$v6 = haxe__Int32_Int32_Impl_::ucompare($a6->low, $b6->low);
		}
		$tmp13 = null;
		if($a6->high < 0) {
			if($b6->high < 0) {
				$tmp13 = $v6;
			} else {
				$tmp13 = -1;
			}
		} else {
			if($b6->high >= 0) {
				$tmp13 = $v6;
			} else {
				$tmp13 = 1;
			}
		}
		utest_Assert::isTrue($tmp13 < 0, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 72, "className" => "thx.TestDateTimeUtc", "methodName" => "testCompare")));
		$a7 = $this->date;
		$b7 = $this->tomorrow;
		$v7 = $a7->high - $b7->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp14 = $v7 !== 0;
		if($tmp14) {
			$v7 = $v7;
		} else {
			$v7 = haxe__Int32_Int32_Impl_::ucompare($a7->low, $b7->low);
		}
		$tmp15 = null;
		if($a7->high < 0) {
			if($b7->high < 0) {
				$tmp15 = $v7;
			} else {
				$tmp15 = -1;
			}
		} else {
			if($b7->high >= 0) {
				$tmp15 = $v7;
			} else {
				$tmp15 = 1;
			}
		}
		utest_Assert::isTrue($tmp15 <= 0, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 73, "className" => "thx.TestDateTimeUtc", "methodName" => "testCompare")));
		$a8 = $this->tomorrow;
		$b8 = $this->date;
		$v8 = $a8->high - $b8->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp16 = $v8 !== 0;
		if($tmp16) {
			$v8 = $v8;
		} else {
			$v8 = haxe__Int32_Int32_Impl_::ucompare($a8->low, $b8->low);
		}
		$tmp17 = null;
		if($a8->high < 0) {
			if($b8->high < 0) {
				$tmp17 = $v8;
			} else {
				$tmp17 = -1;
			}
		} else {
			if($b8->high >= 0) {
				$tmp17 = $v8;
			} else {
				$tmp17 = 1;
			}
		}
		utest_Assert::isTrue($tmp17 > 0, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 75, "className" => "thx.TestDateTimeUtc", "methodName" => "testCompare")));
		$a9 = $this->tomorrow;
		$b9 = $this->date;
		$v9 = $a9->high - $b9->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp18 = $v9 !== 0;
		if($tmp18) {
			$v9 = $v9;
		} else {
			$v9 = haxe__Int32_Int32_Impl_::ucompare($a9->low, $b9->low);
		}
		$tmp19 = null;
		if($a9->high < 0) {
			if($b9->high < 0) {
				$tmp19 = $v9;
			} else {
				$tmp19 = -1;
			}
		} else {
			if($b9->high >= 0) {
				$tmp19 = $v9;
			} else {
				$tmp19 = 1;
			}
		}
		utest_Assert::isTrue($tmp19 >= 0, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 76, "className" => "thx.TestDateTimeUtc", "methodName" => "testCompare")));
		$a10 = $this->tomorrow;
		$b10 = $this->date;
		$v10 = $a10->high - $b10->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp20 = $v10 !== 0;
		if($tmp20) {
			$v10 = $v10;
		} else {
			$v10 = haxe__Int32_Int32_Impl_::ucompare($a10->low, $b10->low);
		}
		$tmp21 = null;
		if($a10->high < 0) {
			if($b10->high < 0) {
				$tmp21 = $v10;
			} else {
				$tmp21 = -1;
			}
		} else {
			if($b10->high >= 0) {
				$tmp21 = $v10;
			} else {
				$tmp21 = 1;
			}
		}
		utest_Assert::isFalse($tmp21 < 0, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 77, "className" => "thx.TestDateTimeUtc", "methodName" => "testCompare")));
		$a11 = $this->tomorrow;
		$b11 = $this->date;
		$v11 = $a11->high - $b11->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp22 = $v11 !== 0;
		if($tmp22) {
			$v11 = $v11;
		} else {
			$v11 = haxe__Int32_Int32_Impl_::ucompare($a11->low, $b11->low);
		}
		$tmp23 = null;
		if($a11->high < 0) {
			if($b11->high < 0) {
				$tmp23 = $v11;
			} else {
				$tmp23 = -1;
			}
		} else {
			if($b11->high >= 0) {
				$tmp23 = $v11;
			} else {
				$tmp23 = 1;
			}
		}
		utest_Assert::isFalse($tmp23 <= 0, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 78, "className" => "thx.TestDateTimeUtc", "methodName" => "testCompare")));
	}
	public function testFromToDate() {
		$a = $this->date;
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$unixEpochTicks;
		$high = $a->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $a->low - $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($a->low, $b->low) < 0) {
			--$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		$a1 = $x;
		$b1 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMillisecondI64;
		$tmp1 = haxe__Int64_Int64_Impl_::divMod($a1, $b1)->quotient;
		$d = Date::fromTime(thx_Int64s::toFloat($tmp1));
		$that = thx__DateTimeUtc_DateTimeUtc_Impl_::fromDate($d);
		$a2 = $this->date;
		$b2 = $that;
		$tmp2 = null;
		if($a2->high === $b2->high) {
			$tmp2 = $a2->low === $b2->low;
		} else {
			$tmp2 = false;
		}
		$tmp3 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString($this->date);
		$tmp4 = "expected " . _hx_string_or_null($tmp3) . " but got ";
		$tmp5 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString(thx__DateTimeUtc_DateTimeUtc_Impl_::fromDate($d));
		utest_Assert::isTrue($tmp2, _hx_string_or_null($tmp4) . _hx_string_or_null($tmp5), _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 83, "className" => "thx.TestDateTimeUtc", "methodName" => "testFromToDate")));
	}
	public function testFromToTime() {
		$a = $this->date;
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$unixEpochTicks;
		$high = $a->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $a->low - $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($a->low, $b->low) < 0) {
			--$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		$a1 = $x;
		$b1 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMillisecondI64;
		$tmp1 = haxe__Int64_Int64_Impl_::divMod($a1, $b1)->quotient;
		$date2 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromTime(thx_Int64s::toFloat($tmp1));
		$a2 = $this->date;
		$b2 = $date2;
		$tmp2 = null;
		if($a2->high === $b2->high) {
			$tmp2 = $a2->low === $b2->low;
		} else {
			$tmp2 = false;
		}
		$tmp3 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString($this->date);
		$tmp4 = "expected " . _hx_string_or_null($tmp3) . " but got ";
		$tmp5 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString($date2);
		utest_Assert::isTrue($tmp2, _hx_string_or_null($tmp4) . _hx_string_or_null($tmp5), _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 89, "className" => "thx.TestDateTimeUtc", "methodName" => "testFromToTime")));
	}
	public function testFromToString() {
		$d = thx__DateTimeUtc_DateTimeUtc_Impl_::toString($this->date);
		$that = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString($d);
		$a = $this->date;
		$b = $that;
		$tmp = null;
		if($a->high === $b->high) {
			$tmp = $a->low === $b->low;
		} else {
			$tmp = false;
		}
		utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 94, "className" => "thx.TestDateTimeUtc", "methodName" => "testFromToString")));
		$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString(thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("0-06-07"));
		utest_Assert::equals("-1-07-27T00:00:00Z", $tmp1, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 96, "className" => "thx.TestDateTimeUtc", "methodName" => "testFromToString")));
		$tmp2 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString(thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("-1-06-07"));
		utest_Assert::equals("-1-06-07T00:00:00Z", $tmp2, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 97, "className" => "thx.TestDateTimeUtc", "methodName" => "testFromToString")));
		$tmp3 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString(thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("1-06-07"));
		utest_Assert::equals("1-06-07T00:00:00Z", $tmp3, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 98, "className" => "thx.TestDateTimeUtc", "methodName" => "testFromToString")));
		$tmp4 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString(thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("-2014-01-01"));
		utest_Assert::equals("-2014-01-01T00:00:00Z", $tmp4, null, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 99, "className" => "thx.TestDateTimeUtc", "methodName" => "testFromToString")));
	}
	public function testAdd() {
		$tmp = thx__DateTimeUtc_DateTimeUtc_Impl_::addMonths($this->date, 24);
		$this1 = thx__DateTimeUtc_DateTimeUtc_Impl_::addMonths($tmp, 9);
		$this2 = thx__DateTimeUtc_DateTimeUtc_Impl_::addScaled($this1, 10, thx__DateTimeUtc_DateTimeUtc_Impl_::$millisPerDay);
		$this3 = thx__DateTimeUtc_DateTimeUtc_Impl_::addScaled($this2, 7, thx__DateTimeUtc_DateTimeUtc_Impl_::$millisPerHour);
		$this4 = thx__DateTimeUtc_DateTimeUtc_Impl_::addScaled($this3, 10, thx__DateTimeUtc_DateTimeUtc_Impl_::$millisPerMinute);
		$this5 = thx__DateTimeUtc_DateTimeUtc_Impl_::addScaled($this4, 7, thx__DateTimeUtc_DateTimeUtc_Impl_::$millisPerSecond);
		$d = thx__DateTimeUtc_DateTimeUtc_Impl_::addScaled($this5, 7, 1);
		$that = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2018-05-07 04:50:37.007");
		$a = $d;
		$b = $that;
		$tmp1 = null;
		if($a->high === $b->high) {
			$tmp1 = $a->low === $b->low;
		} else {
			$tmp1 = false;
		}
		$tmp2 = "expected " . "2018-05-07 04:50:37.007" . " but got ";
		$tmp3 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString($d);
		utest_Assert::isTrue($tmp1, _hx_string_or_null($tmp2) . _hx_string_or_null($tmp3), _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 112, "className" => "thx.TestDateTimeUtc", "methodName" => "testAdd")));
	}
	public function testNow() {
		$ref = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2016-05-24T09:02:59Z");
		$date = thx__DateTimeUtc_DateTimeUtc_Impl_::now();
		$tmp = thx__DateTimeUtc_DateTimeUtc_Impl_::nearEqualsTo($date, $ref, thx__Time_Time_Impl_::create(0, 10, 0, 0));
		$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString($ref);
		$tmp2 = "expected " . _hx_string_or_null($tmp1) . " but got ";
		$tmp3 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString($date);
		utest_Assert::isTrue($tmp, _hx_string_or_null($tmp2) . _hx_string_or_null($tmp3), _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 118, "className" => "thx.TestDateTimeUtc", "methodName" => "testNow")));
	}
	public function testSnapNext() {
		$tmp = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 10:07:00");
		$this->assertSnapNext($tmp, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 10:06:10"), thx_TimePeriod::$Minute, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 122, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapNext")));
		$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 10:06:00");
		$this->assertSnapNext($tmp1, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 10:05:50"), thx_TimePeriod::$Minute, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 123, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapNext")));
		$tmp2 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 11:00:00");
		$this->assertSnapNext($tmp2, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 10:10:10"), thx_TimePeriod::$Hour, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 124, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapNext")));
		$tmp3 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 10:00:00");
		$this->assertSnapNext($tmp3, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 09:50:10"), thx_TimePeriod::$Hour, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 125, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapNext")));
		$tmp4 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-02 00:00:00");
		$this->assertSnapNext($tmp4, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 10:00:00"), thx_TimePeriod::$Day, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 126, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapNext")));
		$tmp5 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 00:00:00");
		$this->assertSnapNext($tmp5, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2013-12-31 20:00:00"), thx_TimePeriod::$Day, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 127, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapNext")));
		$tmp6 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-12-21 00:00:00");
		$this->assertSnapNext($tmp6, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-12-17 11:00:00"), thx_TimePeriod::$Week, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 128, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapNext")));
		$tmp7 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-12-21 00:00:00");
		$this->assertSnapNext($tmp7, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-12-18 00:00:00"), thx_TimePeriod::$Week, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 129, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapNext")));
		$tmp8 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2015-01-01 00:00:00");
		$this->assertSnapNext($tmp8, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-12-12 00:00:00"), thx_TimePeriod::$Month, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 130, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapNext")));
		$tmp9 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2015-01-01 00:00:00");
		$this->assertSnapNext($tmp9, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-12-18 00:00:00"), thx_TimePeriod::$Month, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 131, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapNext")));
		$tmp10 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2015-01-01 00:00:00");
		$this->assertSnapNext($tmp10, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-05-12 00:00:00"), thx_TimePeriod::$Year, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 132, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapNext")));
		$tmp11 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2015-01-01 00:00:00");
		$this->assertSnapNext($tmp11, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-12-18 00:00:00"), thx_TimePeriod::$Year, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 133, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapNext")));
	}
	public function testSnapPrev() {
		$tmp = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 10:06:00");
		$this->assertSnapPrev($tmp, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 10:06:10"), thx_TimePeriod::$Minute, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 137, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapPrev")));
		$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 10:05:00");
		$this->assertSnapPrev($tmp1, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 10:05:50"), thx_TimePeriod::$Minute, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 138, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapPrev")));
		$tmp2 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 10:00:00");
		$this->assertSnapPrev($tmp2, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 10:10:10"), thx_TimePeriod::$Hour, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 139, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapPrev")));
		$tmp3 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 09:00:00");
		$this->assertSnapPrev($tmp3, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 09:50:10"), thx_TimePeriod::$Hour, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 140, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapPrev")));
		$tmp4 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 00:00:00");
		$this->assertSnapPrev($tmp4, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 10:00:00"), thx_TimePeriod::$Day, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 141, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapPrev")));
		$tmp5 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2013-12-31 00:00:00");
		$this->assertSnapPrev($tmp5, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2013-12-31 20:00:00"), thx_TimePeriod::$Day, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 142, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapPrev")));
		$tmp6 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-12-14 00:00:00");
		$this->assertSnapPrev($tmp6, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-12-17 11:00:00"), thx_TimePeriod::$Week, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 143, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapPrev")));
		$tmp7 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-12-14 00:00:00");
		$this->assertSnapPrev($tmp7, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-12-18 00:00:00"), thx_TimePeriod::$Week, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 144, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapPrev")));
		$tmp8 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-12-01 00:00:00");
		$this->assertSnapPrev($tmp8, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-12-12 00:00:00"), thx_TimePeriod::$Month, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 145, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapPrev")));
		$tmp9 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-12-01 00:00:00");
		$this->assertSnapPrev($tmp9, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-12-18 00:00:00"), thx_TimePeriod::$Month, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 146, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapPrev")));
		$tmp10 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 00:00:00");
		$this->assertSnapPrev($tmp10, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-05-12 00:00:00"), thx_TimePeriod::$Year, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 147, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapPrev")));
		$tmp11 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 00:00:00");
		$this->assertSnapPrev($tmp11, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-12-18 00:00:00"), thx_TimePeriod::$Year, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 148, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapPrev")));
	}
	public function testSnapTo() {
		$tmp = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 10:06:00");
		$this->assertSnapTo($tmp, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 10:06:10"), thx_TimePeriod::$Minute, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 152, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapTo")));
		$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 10:06:00");
		$this->assertSnapTo($tmp1, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 10:05:50"), thx_TimePeriod::$Minute, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 153, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapTo")));
		$tmp2 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 10:00:00");
		$this->assertSnapTo($tmp2, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 10:10:10"), thx_TimePeriod::$Hour, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 154, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapTo")));
		$tmp3 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 10:00:00");
		$this->assertSnapTo($tmp3, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 09:50:10"), thx_TimePeriod::$Hour, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 155, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapTo")));
		$tmp4 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 00:00:00");
		$this->assertSnapTo($tmp4, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 10:00:00"), thx_TimePeriod::$Day, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 156, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapTo")));
		$tmp5 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 00:00:00");
		$this->assertSnapTo($tmp5, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2013-12-31 20:00:00"), thx_TimePeriod::$Day, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 157, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapTo")));
		$tmp6 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-12-14 00:00:00");
		$this->assertSnapTo($tmp6, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-12-17 11:00:00"), thx_TimePeriod::$Week, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 158, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapTo")));
		$tmp7 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-12-21 00:00:00");
		$this->assertSnapTo($tmp7, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-12-18 00:00:00"), thx_TimePeriod::$Week, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 159, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapTo")));
		$tmp8 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-12-01 00:00:00");
		$this->assertSnapTo($tmp8, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-12-12 00:00:00"), thx_TimePeriod::$Month, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 160, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapTo")));
		$tmp9 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2015-01-01 00:00:00");
		$this->assertSnapTo($tmp9, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-12-18 00:00:00"), thx_TimePeriod::$Month, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 161, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapTo")));
		$tmp10 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-01-01 00:00:00");
		$this->assertSnapTo($tmp10, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-05-12 00:00:00"), thx_TimePeriod::$Year, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 162, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapTo")));
		$tmp11 = thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2015-01-01 00:00:00");
		$this->assertSnapTo($tmp11, thx__DateTimeUtc_DateTimeUtc_Impl_::fromString("2014-12-18 00:00:00"), thx_TimePeriod::$Year, _hx_anonymous(array("fileName" => "TestDateTimeUtc.hx", "lineNumber" => 163, "className" => "thx.TestDateTimeUtc", "methodName" => "testSnapTo")));
	}
	public function assertSnapTo($expected, $date, $period, $pos = null) {
		$t = thx__DateTimeUtc_DateTimeUtc_Impl_::snapTo($date, $period);
		$a = $expected;
		$b = $t;
		$tmp = null;
		if($a->high === $b->high) {
			$tmp = $a->low === $b->low;
		} else {
			$tmp = false;
		}
		$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString($date);
		$tmp2 = "expected " . _hx_string_or_null($tmp1) . " to snap to ";
		$tmp3 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString($expected);
		$tmp4 = _hx_string_or_null($tmp2) . _hx_string_or_null($tmp3) . " for ";
		$tmp5 = Std::string($period);
		$tmp6 = _hx_string_or_null($tmp4) . _hx_string_or_null($tmp5) . " but it is ";
		$tmp7 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString($t);
		utest_Assert::isTrue($tmp, _hx_string_or_null($tmp6) . _hx_string_or_null($tmp7), $pos);
	}
	public function assertSnapPrev($expected, $date, $period, $pos = null) {
		$t = thx__DateTimeUtc_DateTimeUtc_Impl_::snapPrev($date, $period);
		$a = $expected;
		$b = $t;
		$tmp = null;
		if($a->high === $b->high) {
			$tmp = $a->low === $b->low;
		} else {
			$tmp = false;
		}
		$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString($date);
		$tmp2 = "expected " . _hx_string_or_null($tmp1) . " to snap before ";
		$tmp3 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString($expected);
		$tmp4 = _hx_string_or_null($tmp2) . _hx_string_or_null($tmp3) . " for ";
		$tmp5 = Std::string($period);
		$tmp6 = _hx_string_or_null($tmp4) . _hx_string_or_null($tmp5) . " but it is ";
		$tmp7 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString($t);
		utest_Assert::isTrue($tmp, _hx_string_or_null($tmp6) . _hx_string_or_null($tmp7), $pos);
	}
	public function assertSnapNext($expected, $date, $period, $pos = null) {
		$t = thx__DateTimeUtc_DateTimeUtc_Impl_::snapNext($date, $period);
		$a = $expected;
		$b = $t;
		$tmp = null;
		if($a->high === $b->high) {
			$tmp = $a->low === $b->low;
		} else {
			$tmp = false;
		}
		$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString($date);
		$tmp2 = "expected " . _hx_string_or_null($tmp1) . " to snap after ";
		$tmp3 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString($expected);
		$tmp4 = _hx_string_or_null($tmp2) . _hx_string_or_null($tmp3) . " for ";
		$tmp5 = Std::string($period);
		$tmp6 = _hx_string_or_null($tmp4) . _hx_string_or_null($tmp5) . " but it is ";
		$tmp7 = thx__DateTimeUtc_DateTimeUtc_Impl_::toString($t);
		utest_Assert::isTrue($tmp, _hx_string_or_null($tmp6) . _hx_string_or_null($tmp7), $pos);
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.TestDateTimeUtc'; }
}
