<?php

// Generated by Haxe 3.3.0
class thx_TestQueryString {
	public function __construct() {}
	public function testBasics() {
		$tmp = thx__QueryString_QueryString_Impl_::parseWithSymbols("?foo=bar", thx__QueryString_QueryString_Impl_::$separator, thx__QueryString_QueryString_Impl_::$assignment, (isset(thx__QueryString_QueryString_Impl_::$decodeURIComponent) ? thx__QueryString_QueryString_Impl_::$decodeURIComponent: array("thx__QueryString_QueryString_Impl_", "decodeURIComponent")));
		$tmp1 = thx__QueryString_QueryString_Impl_::toObject($tmp);
		utest_Assert::same(_hx_anonymous(array("foo" => "bar")), $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestQueryString.hx", "lineNumber" => 10, "className" => "thx.TestQueryString", "methodName" => "testBasics")));
		$tmp2 = thx__QueryString_QueryString_Impl_::parseWithSymbols("#foo=bar", thx__QueryString_QueryString_Impl_::$separator, thx__QueryString_QueryString_Impl_::$assignment, (isset(thx__QueryString_QueryString_Impl_::$decodeURIComponent) ? thx__QueryString_QueryString_Impl_::$decodeURIComponent: array("thx__QueryString_QueryString_Impl_", "decodeURIComponent")));
		$tmp3 = thx__QueryString_QueryString_Impl_::toObject($tmp2);
		utest_Assert::same(_hx_anonymous(array("foo" => "bar")), $tmp3, null, null, null, _hx_anonymous(array("fileName" => "TestQueryString.hx", "lineNumber" => 15, "className" => "thx.TestQueryString", "methodName" => "testBasics")));
		$tmp4 = thx__QueryString_QueryString_Impl_::parseWithSymbols("foo=bar", thx__QueryString_QueryString_Impl_::$separator, thx__QueryString_QueryString_Impl_::$assignment, (isset(thx__QueryString_QueryString_Impl_::$decodeURIComponent) ? thx__QueryString_QueryString_Impl_::$decodeURIComponent: array("thx__QueryString_QueryString_Impl_", "decodeURIComponent")));
		$tmp5 = thx__QueryString_QueryString_Impl_::toObject($tmp4);
		utest_Assert::same(_hx_anonymous(array("foo" => "bar")), $tmp5, null, null, null, _hx_anonymous(array("fileName" => "TestQueryString.hx", "lineNumber" => 20, "className" => "thx.TestQueryString", "methodName" => "testBasics")));
		$tmp6 = thx__QueryString_QueryString_Impl_::parseWithSymbols("foo", thx__QueryString_QueryString_Impl_::$separator, thx__QueryString_QueryString_Impl_::$assignment, (isset(thx__QueryString_QueryString_Impl_::$decodeURIComponent) ? thx__QueryString_QueryString_Impl_::$decodeURIComponent: array("thx__QueryString_QueryString_Impl_", "decodeURIComponent")));
		$tmp7 = thx__QueryString_QueryString_Impl_::toObject($tmp6);
		utest_Assert::same(_hx_anonymous(array("foo" => null)), $tmp7, null, null, null, _hx_anonymous(array("fileName" => "TestQueryString.hx", "lineNumber" => 25, "className" => "thx.TestQueryString", "methodName" => "testBasics")));
		$this1 = thx__QueryString_QueryString_Impl_::parseWithSymbols("foo", thx__QueryString_QueryString_Impl_::$separator, thx__QueryString_QueryString_Impl_::$assignment, (isset(thx__QueryString_QueryString_Impl_::$decodeURIComponent) ? thx__QueryString_QueryString_Impl_::$decodeURIComponent: array("thx__QueryString_QueryString_Impl_", "decodeURIComponent")));
		$tmp8 = thx__QueryString_QueryString_Impl_::toStringWithSymbols($this1, thx__QueryString_QueryString_Impl_::$separator, thx__QueryString_QueryString_Impl_::$assignment, (isset(thx__QueryString_QueryString_Impl_::$encodeURIComponent) ? thx__QueryString_QueryString_Impl_::$encodeURIComponent: array("thx__QueryString_QueryString_Impl_", "encodeURIComponent")));
		utest_Assert::equals("foo", $tmp8, null, _hx_anonymous(array("fileName" => "TestQueryString.hx", "lineNumber" => 30, "className" => "thx.TestQueryString", "methodName" => "testBasics")));
		$tmp9 = thx__QueryString_QueryString_Impl_::parseWithSymbols("foo&key", thx__QueryString_QueryString_Impl_::$separator, thx__QueryString_QueryString_Impl_::$assignment, (isset(thx__QueryString_QueryString_Impl_::$decodeURIComponent) ? thx__QueryString_QueryString_Impl_::$decodeURIComponent: array("thx__QueryString_QueryString_Impl_", "decodeURIComponent")));
		$tmp10 = thx__QueryString_QueryString_Impl_::toObject($tmp9);
		utest_Assert::same(_hx_anonymous(array("foo" => null, "key" => null)), $tmp10, null, null, null, _hx_anonymous(array("fileName" => "TestQueryString.hx", "lineNumber" => 35, "className" => "thx.TestQueryString", "methodName" => "testBasics")));
		$tmp11 = thx__QueryString_QueryString_Impl_::parseWithSymbols("foo=bar&key", thx__QueryString_QueryString_Impl_::$separator, thx__QueryString_QueryString_Impl_::$assignment, (isset(thx__QueryString_QueryString_Impl_::$decodeURIComponent) ? thx__QueryString_QueryString_Impl_::$decodeURIComponent: array("thx__QueryString_QueryString_Impl_", "decodeURIComponent")));
		$tmp12 = thx__QueryString_QueryString_Impl_::toObject($tmp11);
		utest_Assert::same(_hx_anonymous(array("foo" => "bar", "key" => null)), $tmp12, null, null, null, _hx_anonymous(array("fileName" => "TestQueryString.hx", "lineNumber" => 40, "className" => "thx.TestQueryString", "methodName" => "testBasics")));
		$tmp13 = thx__QueryString_QueryString_Impl_::parseWithSymbols("?", thx__QueryString_QueryString_Impl_::$separator, thx__QueryString_QueryString_Impl_::$assignment, (isset(thx__QueryString_QueryString_Impl_::$decodeURIComponent) ? thx__QueryString_QueryString_Impl_::$decodeURIComponent: array("thx__QueryString_QueryString_Impl_", "decodeURIComponent")));
		$tmp14 = thx__QueryString_QueryString_Impl_::toObject($tmp13);
		utest_Assert::same(_hx_anonymous(array()), $tmp14, null, null, null, _hx_anonymous(array("fileName" => "TestQueryString.hx", "lineNumber" => 45, "className" => "thx.TestQueryString", "methodName" => "testBasics")));
		$tmp15 = thx__QueryString_QueryString_Impl_::parseWithSymbols("#", thx__QueryString_QueryString_Impl_::$separator, thx__QueryString_QueryString_Impl_::$assignment, (isset(thx__QueryString_QueryString_Impl_::$decodeURIComponent) ? thx__QueryString_QueryString_Impl_::$decodeURIComponent: array("thx__QueryString_QueryString_Impl_", "decodeURIComponent")));
		$tmp16 = thx__QueryString_QueryString_Impl_::toObject($tmp15);
		utest_Assert::same(_hx_anonymous(array()), $tmp16, null, null, null, _hx_anonymous(array("fileName" => "TestQueryString.hx", "lineNumber" => 50, "className" => "thx.TestQueryString", "methodName" => "testBasics")));
		$tmp17 = thx__QueryString_QueryString_Impl_::parseWithSymbols(" ", thx__QueryString_QueryString_Impl_::$separator, thx__QueryString_QueryString_Impl_::$assignment, (isset(thx__QueryString_QueryString_Impl_::$decodeURIComponent) ? thx__QueryString_QueryString_Impl_::$decodeURIComponent: array("thx__QueryString_QueryString_Impl_", "decodeURIComponent")));
		$tmp18 = thx__QueryString_QueryString_Impl_::toObject($tmp17);
		utest_Assert::same(_hx_anonymous(array()), $tmp18, null, null, null, _hx_anonymous(array("fileName" => "TestQueryString.hx", "lineNumber" => 55, "className" => "thx.TestQueryString", "methodName" => "testBasics")));
		$tmp19 = thx__QueryString_QueryString_Impl_::parseWithSymbols("foo=bar&foo=baz", thx__QueryString_QueryString_Impl_::$separator, thx__QueryString_QueryString_Impl_::$assignment, (isset(thx__QueryString_QueryString_Impl_::$decodeURIComponent) ? thx__QueryString_QueryString_Impl_::$decodeURIComponent: array("thx__QueryString_QueryString_Impl_", "decodeURIComponent")));
		$tmp20 = thx__QueryString_QueryString_Impl_::toObject($tmp19);
		utest_Assert::same(_hx_anonymous(array("foo" => (new _hx_array(array("bar", "baz"))))), $tmp20, null, null, null, _hx_anonymous(array("fileName" => "TestQueryString.hx", "lineNumber" => 60, "className" => "thx.TestQueryString", "methodName" => "testBasics")));
		$tmp21 = thx__QueryString_QueryString_Impl_::parseWithSymbols("foo+faz=bar+baz++", thx__QueryString_QueryString_Impl_::$separator, thx__QueryString_QueryString_Impl_::$assignment, (isset(thx__QueryString_QueryString_Impl_::$decodeURIComponent) ? thx__QueryString_QueryString_Impl_::$decodeURIComponent: array("thx__QueryString_QueryString_Impl_", "decodeURIComponent")));
		$tmp22 = thx__QueryString_QueryString_Impl_::toObject($tmp21);
		utest_Assert::same(_hx_anonymous(array("foo faz" => "bar baz  ")), $tmp22, null, null, null, _hx_anonymous(array("fileName" => "TestQueryString.hx", "lineNumber" => 65, "className" => "thx.TestQueryString", "methodName" => "testBasics")));
		$this2 = thx__QueryString_QueryString_Impl_::fromObject(_hx_anonymous(array("foo" => "bar")));
		$tmp23 = thx__QueryString_QueryString_Impl_::toStringWithSymbols($this2, thx__QueryString_QueryString_Impl_::$separator, thx__QueryString_QueryString_Impl_::$assignment, (isset(thx__QueryString_QueryString_Impl_::$encodeURIComponent) ? thx__QueryString_QueryString_Impl_::$encodeURIComponent: array("thx__QueryString_QueryString_Impl_", "encodeURIComponent")));
		utest_Assert::equals("foo=bar", $tmp23, null, _hx_anonymous(array("fileName" => "TestQueryString.hx", "lineNumber" => 70, "className" => "thx.TestQueryString", "methodName" => "testBasics")));
		$qs = thx__QueryString_QueryString_Impl_::fromObject(_hx_anonymous(array("foo" => "bar", "bar" => "baz")));
		utest_Assert::same((new _hx_array(array("bar"))), $qs->get("foo"), null, null, null, _hx_anonymous(array("fileName" => "TestQueryString.hx", "lineNumber" => 76, "className" => "thx.TestQueryString", "methodName" => "testBasics")));
		utest_Assert::same((new _hx_array(array("baz"))), $qs->get("bar"), null, null, null, _hx_anonymous(array("fileName" => "TestQueryString.hx", "lineNumber" => 77, "className" => "thx.TestQueryString", "methodName" => "testBasics")));
		$this3 = thx__QueryString_QueryString_Impl_::fromObject(_hx_anonymous(array("foo bar" => "baz faz")));
		$qs1 = thx__QueryString_QueryString_Impl_::toStringWithSymbols($this3, thx__QueryString_QueryString_Impl_::$separator, thx__QueryString_QueryString_Impl_::$assignment, (isset(thx__QueryString_QueryString_Impl_::$encodeURIComponent) ? thx__QueryString_QueryString_Impl_::$encodeURIComponent: array("thx__QueryString_QueryString_Impl_", "encodeURIComponent")));
		$tmp24 = null;
		if("foo%20bar=baz%20faz" !== $qs1) {
			$tmp24 = "foo+bar=baz+faz" === $qs1;
		} else {
			$tmp24 = true;
		}
		utest_Assert::isTrue($tmp24, null, _hx_anonymous(array("fileName" => "TestQueryString.hx", "lineNumber" => 80, "className" => "thx.TestQueryString", "methodName" => "testBasics")));
		$this4 = thx__QueryString_QueryString_Impl_::fromObject(_hx_anonymous(array("abc" => "abc", "foo" => (new _hx_array(array("bar", "baz"))))));
		$qs2 = thx__QueryString_QueryString_Impl_::toStringWithSymbols($this4, thx__QueryString_QueryString_Impl_::$separator, thx__QueryString_QueryString_Impl_::$assignment, (isset(thx__QueryString_QueryString_Impl_::$encodeURIComponent) ? thx__QueryString_QueryString_Impl_::$encodeURIComponent: array("thx__QueryString_QueryString_Impl_", "encodeURIComponent")));
		$tmp25 = null;
		$tmp26 = null;
		$tmp27 = null;
		$tmp28 = null;
		$tmp29 = null;
		if("abc=abc&foo=bar&foo=baz" !== $qs2) {
			$tmp29 = "foo=bar&abc=abc&foo=baz" === $qs2;
		} else {
			$tmp29 = true;
		}
		if(!$tmp29) {
			$tmp28 = "foo=bar&foo=baz&abc=abc" === $qs2;
		} else {
			$tmp28 = true;
		}
		if(!$tmp28) {
			$tmp27 = "abc=abc&foo=baz&foo=bar" === $qs2;
		} else {
			$tmp27 = true;
		}
		if(!$tmp27) {
			$tmp26 = "foo=bar&abc=abc&foo=baz" === $qs2;
		} else {
			$tmp26 = true;
		}
		if(!$tmp26) {
			$tmp25 = "foo=bar&foo=baz&abc=abc" === $qs2;
		} else {
			$tmp25 = true;
		}
		utest_Assert::isTrue($tmp25, null, _hx_anonymous(array("fileName" => "TestQueryString.hx", "lineNumber" => 86, "className" => "thx.TestQueryString", "methodName" => "testBasics")));
		$this5 = thx__QueryString_QueryString_Impl_::parseWithSymbols("a=b&c=d", thx__QueryString_QueryString_Impl_::$separator, thx__QueryString_QueryString_Impl_::$assignment, (isset(thx__QueryString_QueryString_Impl_::$decodeURIComponent) ? thx__QueryString_QueryString_Impl_::$decodeURIComponent: array("thx__QueryString_QueryString_Impl_", "decodeURIComponent")));
		$qs3 = thx__QueryString_QueryString_Impl_::toStringWithSymbols($this5, thx__QueryString_QueryString_Impl_::$separator, thx__QueryString_QueryString_Impl_::$assignment, (isset(thx__QueryString_QueryString_Impl_::$encodeURIComponent) ? thx__QueryString_QueryString_Impl_::$encodeURIComponent: array("thx__QueryString_QueryString_Impl_", "encodeURIComponent")));
		$tmp30 = null;
		if("a=b&c=d" !== $qs3) {
			$tmp30 = "c=d&a=b" === $qs3;
		} else {
			$tmp30 = true;
		}
		utest_Assert::isTrue($tmp30, null, _hx_anonymous(array("fileName" => "TestQueryString.hx", "lineNumber" => 96, "className" => "thx.TestQueryString", "methodName" => "testBasics")));
	}
	function __toString() { return 'thx.TestQueryString'; }
}
