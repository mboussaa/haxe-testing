<?php

// Generated by Haxe 3.3.0
class thx_TestConvert {
	public function __construct() {}
	public function testString() {
		$tmp = thx_Convert::toString(1);
		utest_Assert::equals("1", $tmp, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 9, "className" => "thx.TestConvert", "methodName" => "testString")));
		$tmp1 = thx_Convert::toStringOr(null, "1");
		utest_Assert::equals("1", $tmp1, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 10, "className" => "thx.TestConvert", "methodName" => "testString")));
	}
	public function testInt() {
		$tmp = thx_Convert::toInt("1");
		utest_Assert::equals(1, $tmp, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 14, "className" => "thx.TestConvert", "methodName" => "testInt")));
		$tmp1 = thx_Convert::toInt(true);
		utest_Assert::equals(1, $tmp1, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 15, "className" => "thx.TestConvert", "methodName" => "testInt")));
		$tmp2 = thx_Convert::toInt(false);
		utest_Assert::equals(0, $tmp2, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 16, "className" => "thx.TestConvert", "methodName" => "testInt")));
		$tmp3 = thx_Convert::toInt(1.1);
		utest_Assert::equals(1, $tmp3, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 17, "className" => "thx.TestConvert", "methodName" => "testInt")));
		$tmp4 = thx_Convert::toIntOr("z", 1);
		utest_Assert::equals(1, $tmp4, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 19, "className" => "thx.TestConvert", "methodName" => "testInt")));
	}
	public function testFloat() {
		$tmp = thx_Convert::toFloat("1");
		utest_Assert::equals(1, $tmp, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 23, "className" => "thx.TestConvert", "methodName" => "testFloat")));
		$tmp1 = thx_Convert::toFloat(true);
		utest_Assert::equals(1, $tmp1, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 24, "className" => "thx.TestConvert", "methodName" => "testFloat")));
		$tmp2 = thx_Convert::toFloat(false);
		utest_Assert::equals(0, $tmp2, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 25, "className" => "thx.TestConvert", "methodName" => "testFloat")));
		$tmp3 = thx_Convert::toFloat(1.1);
		utest_Assert::equals(1.1, $tmp3, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 26, "className" => "thx.TestConvert", "methodName" => "testFloat")));
		$tmp4 = thx_Convert::toFloatOr("z", 1.1);
		utest_Assert::equals(1.1, $tmp4, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 28, "className" => "thx.TestConvert", "methodName" => "testFloat")));
	}
	public function testBool() {
		$tmp = thx_Convert::toBool("1");
		utest_Assert::equals(true, $tmp, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 32, "className" => "thx.TestConvert", "methodName" => "testBool")));
		$tmp1 = thx_Convert::toBool(true);
		utest_Assert::equals(true, $tmp1, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 33, "className" => "thx.TestConvert", "methodName" => "testBool")));
		$tmp2 = thx_Convert::toBool(false);
		utest_Assert::equals(false, $tmp2, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 34, "className" => "thx.TestConvert", "methodName" => "testBool")));
		$tmp3 = thx_Convert::toBool(1.1);
		utest_Assert::equals(true, $tmp3, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 35, "className" => "thx.TestConvert", "methodName" => "testBool")));
		$tmp4 = thx_Convert::toBool(0);
		utest_Assert::equals(false, $tmp4, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 36, "className" => "thx.TestConvert", "methodName" => "testBool")));
		$tmp5 = thx_Convert::toBoolOr("z", true);
		utest_Assert::equals(true, $tmp5, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 38, "className" => "thx.TestConvert", "methodName" => "testBool")));
	}
	public function testMap() {
		$objOfArrays = _hx_anonymous(array("foo" => (new _hx_array(array("bar"))), "baz" => (new _hx_array(array("qux")))));
		$objOfNumbers = _hx_anonymous(array("a" => 1, "b" => 2, "c" => 3));
		$this1 = thx_Convert::toMap($objOfArrays, array(new _hx_lambda(array(), "thx_TestConvert_0"), 'execute'));
		$tmp = $this1->get("foo");
		utest_Assert::equals("bar", $tmp[0], null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 45, "className" => "thx.TestConvert", "methodName" => "testMap")));
		$this2 = thx_Convert::toMap($objOfNumbers, (isset(thx_Convert::$toInt) ? thx_Convert::$toInt: array("thx_Convert", "toInt")));
		$tmp1 = $this2->get("b");
		utest_Assert::equals(2, $tmp1, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 49, "className" => "thx.TestConvert", "methodName" => "testMap")));
		utest_Assert::raises(array(new _hx_lambda(array(), "thx_TestConvert_1"), 'execute'), null, null, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 51, "className" => "thx.TestConvert", "methodName" => "testMap")));
		utest_Assert::raises(array(new _hx_lambda(array(&$objOfArrays), "thx_TestConvert_2"), 'execute'), null, null, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 52, "className" => "thx.TestConvert", "methodName" => "testMap")));
	}
	public function testDateTimeUtc() {
		$value = null;
		thx_Convert::toDateTimeUtc($value);
		utest_Assert::isNull($value, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 58, "className" => "thx.TestConvert", "methodName" => "testDateTimeUtc")));
	}
	function __toString() { return 'thx.TestConvert'; }
}
function thx_TestConvert_0($val) {
	{
		return thx_Convert::toArray($val, (isset(thx_Convert::$toString) ? thx_Convert::$toString: array("thx_Convert", "toString")));
	}
}
function thx_TestConvert_1() {
	{
		thx_Convert::toMap(3, (isset(thx_Convert::$toString) ? thx_Convert::$toString: array("thx_Convert", "toString")));
	}
}
function thx_TestConvert_2(&$objOfArrays) {
	{
		thx_Convert::toMap($objOfArrays, (isset(thx_Convert::$toString) ? thx_Convert::$toString: array("thx_Convert", "toString")));
	}
}
