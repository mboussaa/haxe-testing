<?php

// Generated by Haxe 3.3.0
class thx_TestBitMatrix {
	public function __construct() {}
	public function testNew() {
		$bits = thx__BitMatrix_BitMatrix_Impl_::_new(null, null);
		utest_Assert::same(0, thx__BitMatrix_BitMatrix_Impl_::get_bitSetCount($bits), null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 10, "className" => "thx.TestBitMatrix", "methodName" => "testNew")));
		utest_Assert::same(0, thx__BitMatrix_BitMatrix_Impl_::get_length($bits), null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 11, "className" => "thx.TestBitMatrix", "methodName" => "testNew")));
		$bits = thx__BitMatrix_BitMatrix_Impl_::_new(5, 10);
		utest_Assert::same(5, thx__BitMatrix_BitMatrix_Impl_::get_bitSetCount($bits), null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 14, "className" => "thx.TestBitMatrix", "methodName" => "testNew")));
		utest_Assert::same(10, thx__BitMatrix_BitMatrix_Impl_::get_length($bits), null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 15, "className" => "thx.TestBitMatrix", "methodName" => "testNew")));
	}
	public function testBitMatrix() {
		$bits = thx__BitMatrix_BitMatrix_Impl_::_new(3, 3);
		thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 0, 0, true);
		thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 0, 1, true);
		thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 0, 2, true);
		thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 1, 0, false);
		thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 1, 1, false);
		thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 1, 2, false);
		thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 2, 0, true);
		thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 2, 1, false);
		thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 2, 2, true);
		$tmp = thx__BitMatrix_BitMatrix_Impl_::toString($bits, null);
		utest_Assert::equals("111,000,101", $tmp, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 29, "className" => "thx.TestBitMatrix", "methodName" => "testBitMatrix")));
		utest_Assert::raises(array(new _hx_lambda(array(&$bits), "thx_TestBitMatrix_0"), 'execute'), null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 32, "className" => "thx.TestBitMatrix", "methodName" => "testBitMatrix")));
		thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 0, 3, true);
		$tmp1 = thx__BitMatrix_BitMatrix_Impl_::toString($bits, null);
		utest_Assert::equals("1111,0000,1010", $tmp1, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 36, "className" => "thx.TestBitMatrix", "methodName" => "testBitMatrix")));
		utest_Assert::same(4, thx__BitMatrix_BitMatrix_Impl_::get_length($bits), null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 37, "className" => "thx.TestBitMatrix", "methodName" => "testBitMatrix")));
		thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 1, 4, true);
		$tmp2 = thx__BitMatrix_BitMatrix_Impl_::toString($bits, null);
		utest_Assert::equals("11110,00001,10100", $tmp2, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 40, "className" => "thx.TestBitMatrix", "methodName" => "testBitMatrix")));
		utest_Assert::same(5, thx__BitMatrix_BitMatrix_Impl_::get_length($bits), null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 41, "className" => "thx.TestBitMatrix", "methodName" => "testBitMatrix")));
		thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 2, 5, true);
		$tmp3 = thx__BitMatrix_BitMatrix_Impl_::toString($bits, null);
		utest_Assert::equals("111100,000010,101001", $tmp3, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 44, "className" => "thx.TestBitMatrix", "methodName" => "testBitMatrix")));
		utest_Assert::same(6, thx__BitMatrix_BitMatrix_Impl_::get_length($bits), null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 45, "className" => "thx.TestBitMatrix", "methodName" => "testBitMatrix")));
	}
	public function testClone() {
		$bits = thx__BitMatrix_BitMatrix_Impl_::_new(2, 3);
		thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 0, 0, true);
		thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 0, 1, true);
		thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 0, 2, true);
		thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 1, 0, false);
		thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 1, 1, false);
		thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 1, 2, false);
		$clone = thx__BitMatrix_BitMatrix_Impl_::hclone($bits);
		thx__BitMatrix_BitMatrix_Impl_::setBitAt($clone, 0, 1, false);
		thx__BitMatrix_BitMatrix_Impl_::setBitAt($clone, 1, 1, true);
		$tmp = thx__BitMatrix_BitMatrix_Impl_::toString($bits, null);
		utest_Assert::same("111,000", $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 59, "className" => "thx.TestBitMatrix", "methodName" => "testClone")));
		$tmp1 = thx__BitMatrix_BitMatrix_Impl_::toString($clone, null);
		utest_Assert::same("101,010", $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 60, "className" => "thx.TestBitMatrix", "methodName" => "testClone")));
	}
	public function testFromToString() {
		$bits = thx__BitMatrix_BitMatrix_Impl_::fromString("000,111,101,010", null);
		$tmp = thx__BitMatrix_BitMatrix_Impl_::toString($bits, null);
		utest_Assert::same("000,111,101,010", $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 65, "className" => "thx.TestBitMatrix", "methodName" => "testFromToString")));
	}
	public function testFromToBools() {
		$bits = thx__BitMatrix_BitMatrix_Impl_::fromBools((new _hx_array(array((new _hx_array(array(true, true))), (new _hx_array(array(false, false))), (new _hx_array(array(true, false))), (new _hx_array(array(false, true)))))));
		$tmp = thx__BitMatrix_BitMatrix_Impl_::toBools($bits);
		utest_Assert::same((new _hx_array(array((new _hx_array(array(true, true))), (new _hx_array(array(false, false))), (new _hx_array(array(true, false))), (new _hx_array(array(false, true)))))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 70, "className" => "thx.TestBitMatrix", "methodName" => "testFromToBools")));
	}
	public function testConcat() {
		$b1 = thx__BitMatrix_BitMatrix_Impl_::fromString("000,111,101,010", null);
		$b2 = thx__BitMatrix_BitMatrix_Impl_::fromString("111,000,111,000", null);
		$b3 = thx__BitMatrix_BitMatrix_Impl_::concat($b1, $b2);
		$tmp = thx__BitMatrix_BitMatrix_Impl_::toString($b1, null);
		utest_Assert::same("000,111,101,010", $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 77, "className" => "thx.TestBitMatrix", "methodName" => "testConcat")));
		$tmp1 = thx__BitMatrix_BitMatrix_Impl_::toString($b2, null);
		utest_Assert::same("111,000,111,000", $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 78, "className" => "thx.TestBitMatrix", "methodName" => "testConcat")));
		$tmp2 = thx__BitMatrix_BitMatrix_Impl_::toString($b3, null);
		utest_Assert::same("000111,111000,101111,010000", $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 79, "className" => "thx.TestBitMatrix", "methodName" => "testConcat")));
		utest_Assert::same(4, thx__BitMatrix_BitMatrix_Impl_::get_bitSetCount($b1), null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 80, "className" => "thx.TestBitMatrix", "methodName" => "testConcat")));
		utest_Assert::same(4, thx__BitMatrix_BitMatrix_Impl_::get_bitSetCount($b2), null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 81, "className" => "thx.TestBitMatrix", "methodName" => "testConcat")));
		utest_Assert::same(4, thx__BitMatrix_BitMatrix_Impl_::get_bitSetCount($b3), null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 82, "className" => "thx.TestBitMatrix", "methodName" => "testConcat")));
		utest_Assert::same(3, thx__BitMatrix_BitMatrix_Impl_::get_length($b1), null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 83, "className" => "thx.TestBitMatrix", "methodName" => "testConcat")));
		utest_Assert::same(3, thx__BitMatrix_BitMatrix_Impl_::get_length($b2), null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 84, "className" => "thx.TestBitMatrix", "methodName" => "testConcat")));
		utest_Assert::same(6, thx__BitMatrix_BitMatrix_Impl_::get_length($b3), null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 85, "className" => "thx.TestBitMatrix", "methodName" => "testConcat")));
		utest_Assert::raises(array(new _hx_lambda(array(), "thx_TestBitMatrix_1"), 'execute'), null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 87, "className" => "thx.TestBitMatrix", "methodName" => "testConcat")));
	}
	public function testExpand() {
		$b1 = thx__BitMatrix_BitMatrix_Impl_::fromString("000,111,101,010", null);
		$b2 = thx__BitMatrix_BitMatrix_Impl_::expand($b1, 1);
		$b3 = thx__BitMatrix_BitMatrix_Impl_::expand($b1, 3);
		$tmp = thx__BitMatrix_BitMatrix_Impl_::toString($b1, null);
		utest_Assert::same("000,111,101,010", $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 98, "className" => "thx.TestBitMatrix", "methodName" => "testExpand")));
		$tmp1 = thx__BitMatrix_BitMatrix_Impl_::toString($b2, null);
		utest_Assert::same("000000,111111,110011,001100", $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 99, "className" => "thx.TestBitMatrix", "methodName" => "testExpand")));
		$tmp2 = thx__BitMatrix_BitMatrix_Impl_::toString($b3, null);
		utest_Assert::same("000000000000,111111111111,111100001111,000011110000", $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 100, "className" => "thx.TestBitMatrix", "methodName" => "testExpand")));
	}
	public function testAnd() {
		$b1 = thx__BitMatrix_BitMatrix_Impl_::fromString("11,00", null);
		$b2 = thx__BitMatrix_BitMatrix_Impl_::fromString("10,10", null);
		$actual = thx__BitMatrix_BitMatrix_Impl_::hand($b1, $b2);
		$expected = thx__BitMatrix_BitMatrix_Impl_::fromString("10,00", null);
		$tmp = thx__BitMatrix_BitMatrix_Impl_::equals($expected, $actual);
		utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 108, "className" => "thx.TestBitMatrix", "methodName" => "testAnd")));
	}
	public function testOr() {
		$b1 = thx__BitMatrix_BitMatrix_Impl_::fromString("11,00", null);
		$b2 = thx__BitMatrix_BitMatrix_Impl_::fromString("10,10", null);
		$actual = thx__BitMatrix_BitMatrix_Impl_::hor($b1, $b2);
		$expected = thx__BitMatrix_BitMatrix_Impl_::fromString("11,10", null);
		$tmp = thx__BitMatrix_BitMatrix_Impl_::equals($expected, $actual);
		utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 116, "className" => "thx.TestBitMatrix", "methodName" => "testOr")));
	}
	public function testXor() {
		$b1 = thx__BitMatrix_BitMatrix_Impl_::fromString("11,00", null);
		$b2 = thx__BitMatrix_BitMatrix_Impl_::fromString("10,10", null);
		$actual = thx__BitMatrix_BitMatrix_Impl_::hxor($b1, $b2);
		$expected = thx__BitMatrix_BitMatrix_Impl_::fromString("01,10", null);
		$tmp = thx__BitMatrix_BitMatrix_Impl_::equals($expected, $actual);
		utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 124, "className" => "thx.TestBitMatrix", "methodName" => "testXor")));
	}
	public function testNegate() {
		$b1 = thx__BitMatrix_BitMatrix_Impl_::fromString("11,00", null);
		$actual = thx__BitMatrix_BitMatrix_Impl_::negate($b1);
		$expected = thx__BitMatrix_BitMatrix_Impl_::fromString("00,11", null);
		$tmp = thx__BitMatrix_BitMatrix_Impl_::equals($expected, $actual);
		utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 131, "className" => "thx.TestBitMatrix", "methodName" => "testNegate")));
	}
	function __toString() { return 'thx.TestBitMatrix'; }
}
function thx_TestBitMatrix_0(&$bits) {
	{
		thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 3, 0, true);
	}
}
function thx_TestBitMatrix_1() {
	{
		$b11 = thx__BitMatrix_BitMatrix_Impl_::fromString("000,111", null);
		$b21 = thx__BitMatrix_BitMatrix_Impl_::fromString("000,111,000", null);
		thx__BitMatrix_BitMatrix_Impl_::concat($b11, $b21);
	}
}
