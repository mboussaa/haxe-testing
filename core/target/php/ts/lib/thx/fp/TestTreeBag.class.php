<?php

// Generated by Haxe 3.3.0
class thx_fp_TestTreeBag {
	public function __construct() {}
	public function plusOneBag($i) {
		return thx_fp_TreeBagImpl::Cons($i + 1, thx_fp_TestTreeBag::$t0);
	}
	public function plusTwoBags($i) {
		return thx_fp__TreeBag_TreeBag_Impl_::map(thx_fp_TestTreeBag::$t1, array(new _hx_lambda(array(&$i), "thx_fp_TestTreeBag_0"), 'execute'));
	}
	public function testMap() {
		$tmp = thx_fp__TreeBag_TreeBag_Impl_::map(thx_fp_TestTreeBag::$t0, (isset(thx_Functions::$identity) ? thx_Functions::$identity: array("thx_Functions", "identity")));
		utest_Assert::same(thx_fp_TestTreeBag::$t0, $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestTreeBag.hx", "lineNumber" => 24, "className" => "thx.fp.TestTreeBag", "methodName" => "testMap")));
		$tmp1 = thx_fp__TreeBag_TreeBag_Impl_::map(thx_fp_TestTreeBag::$t1, array(new _hx_lambda(array(), "thx_fp_TestTreeBag_1"), 'execute'));
		utest_Assert::same(thx_fp_TestTreeBag::$t2, $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestTreeBag.hx", "lineNumber" => 25, "className" => "thx.fp.TestTreeBag", "methodName" => "testMap")));
	}
	public function testToArray() {
		$tmp = thx_fp__TreeBag_TreeBag_Impl_::toArray(thx_fp_TestTreeBag::$t1);
		utest_Assert::same((new _hx_array(array(1, 2))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestTreeBag.hx", "lineNumber" => 29, "className" => "thx.fp.TestTreeBag", "methodName" => "testToArray")));
	}
	public function testFlatMap() {
		$tmp = thx_fp__TreeBag_TreeBag_Impl_::toArray(thx_fp_TestTreeBag::$t2);
		$tmp1 = thx_fp__TreeBag_TreeBag_Impl_::flatMap(thx_fp_TestTreeBag::$t1, (isset($this->plusOneBag) ? $this->plusOneBag: array($this, "plusOneBag")));
		$tmp2 = thx_fp__TreeBag_TreeBag_Impl_::toArray($tmp1);
		utest_Assert::same($tmp, $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestTreeBag.hx", "lineNumber" => 33, "className" => "thx.fp.TestTreeBag", "methodName" => "testFlatMap")));
		$xs = thx_fp_TreeBagImpl::Cons(3, thx_fp_TestTreeBag::$t0);
		$this1 = thx_fp_TreeBagImpl::Cons(2, $xs);
		$xs1 = thx_fp_TreeBagImpl::Cons(4, thx_fp_TestTreeBag::$t0);
		$this2 = thx_fp_TreeBagImpl::Cons(3, $xs1);
		$other = thx_fp_TestTreeBag::$t0;
		$other1 = null;
		$tmp3 = $this2->index;
		switch($tmp3) {
		case 0:{
			if($other->index === 0) {
				$other1 = thx_fp_TreeBagImpl::$hEmpty;
			} else {
				$other1 = $other;
			}
		}break;
		case 1:{
			$tmp4 = $other->index === 0;
			if($tmp4) {
				$other1 = $this2;
			} else {
				$tmp5 = _hx_deref($this2)->params[1]->index === 0;
				if($tmp5) {
					$other1 = thx_fp_TreeBagImpl::Cons(3, $other);
				} else {
					$other1 = thx_fp_TreeBagImpl::Branch($this2, $other);
				}
			}
		}break;
		default:{
			$tmp6 = $other->index === 0;
			if($tmp6) {
				$other1 = $this2;
			} else {
				$other1 = thx_fp_TreeBagImpl::Branch($this2, $other);
			}
		}break;
		}
		$tmp7 = null;
		$tmp8 = $this1->index;
		switch($tmp8) {
		case 0:{
			if($other1->index === 0) {
				$tmp7 = thx_fp_TreeBagImpl::$hEmpty;
			} else {
				$tmp7 = $other1;
			}
		}break;
		case 1:{
			$tmp9 = $other1->index === 0;
			if($tmp9) {
				$tmp7 = $this1;
			} else {
				$tmp10 = _hx_deref($this1)->params[1]->index === 0;
				if($tmp10) {
					$tmp7 = thx_fp_TreeBagImpl::Cons(2, $other1);
				} else {
					$tmp7 = thx_fp_TreeBagImpl::Branch($this1, $other1);
				}
			}
		}break;
		default:{
			$tmp11 = $other1->index === 0;
			if($tmp11) {
				$tmp7 = $this1;
			} else {
				$tmp7 = thx_fp_TreeBagImpl::Branch($this1, $other1);
			}
		}break;
		}
		$tmp12 = thx_fp__TreeBag_TreeBag_Impl_::flatMap(thx_fp_TestTreeBag::$t1, (isset($this->plusTwoBags) ? $this->plusTwoBags: array($this, "plusTwoBags")));
		utest_Assert::same($tmp7, $tmp12, null, null, null, _hx_anonymous(array("fileName" => "TestTreeBag.hx", "lineNumber" => 34, "className" => "thx.fp.TestTreeBag", "methodName" => "testFlatMap")));
	}
	static $t0;
	static $t1;
	static $t2;
	function __toString() { return 'thx.fp.TestTreeBag'; }
}
thx_fp_TestTreeBag::$t0 = thx_fp_TreeBagImpl::$hEmpty;
thx_fp_TestTreeBag::$t1 = thx_fp_TestTreeBag_2();
thx_fp_TestTreeBag::$t2 = thx_fp_TestTreeBag_3();
function thx_fp_TestTreeBag_0(&$i, $i0) {
	{
		return $i + $i0;
	}
}
function thx_fp_TestTreeBag_1($i) {
	{
		return $i + 1;
	}
}
function thx_fp_TestTreeBag_2() {
	{
		$xs = thx_fp_TreeBagImpl::Cons(2, thx_fp_TestTreeBag::$t0);
		return thx_fp_TreeBagImpl::Cons(1, $xs);
	}
}
function thx_fp_TestTreeBag_3() {
	{
		$xs = thx_fp_TreeBagImpl::Cons(3, thx_fp_TestTreeBag::$t0);
		return thx_fp_TreeBagImpl::Cons(2, $xs);
	}
}
