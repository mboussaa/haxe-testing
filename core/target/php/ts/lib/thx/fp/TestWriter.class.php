<?php

// Generated by Haxe 3.3.0
class thx_fp_TestWriter {
	public function __construct() {}
	public function testMap() {
		$mw = thx_Strings::$monoid;
		$tmp = thx__Tuple_Tuple3_Impl_::map(thx_fp__Writer_Writer_Impl_::_new(_hx_anonymous(array("_0" => $mw, "_1" => thx__Monoid_Monoid_Impl_::get_zero($mw), "_2" => 1))), array(new _hx_lambda(array(), "thx_fp_TestWriter_0"), 'execute'));
		utest_Assert::same(_hx_anonymous(array("_0" => "", "_1" => 2)), thx_fp__Writer_Writer_Impl_::run(thx_fp__Writer_Writer_Impl_::_new($tmp)), null, null, null, _hx_anonymous(array("fileName" => "TestWriter.hx", "lineNumber" => 15, "className" => "thx.fp.TestWriter", "methodName" => "testMap")));
	}
	public function testFlatMap() {
		$tmp = thx__Tuple_Tuple3_Impl_::map(thx_fp__Writer_Writer_Impl_::_new(_hx_anonymous(array("_0" => thx_Strings::$monoid, "_1" => "a", "_2" => thx_Unit::$unit))), array(new _hx_lambda(array(), "thx_fp_TestWriter_1"), 'execute'));
		$s = thx_fp__Writer_Writer_Impl_::_new($tmp);
		$f = array(new _hx_lambda(array(&$s), "thx_fp_TestWriter_2"), 'execute');
		$tmp2 = _hx_anonymous(array("_0" => "aab", "_1" => 2));
		$tmp3 = thx_fp__Writer_Writer_Impl_::flatMap($s, $f);
		utest_Assert::same($tmp2, thx_fp__Writer_Writer_Impl_::run($tmp3), null, null, null, _hx_anonymous(array("fileName" => "TestWriter.hx", "lineNumber" => 25, "className" => "thx.fp.TestWriter", "methodName" => "testFlatMap")));
	}
	function __toString() { return 'thx.fp.TestWriter'; }
}
function thx_fp_TestWriter_0($v) {
	{
		return $v + 1;
	}
}
function thx_fp_TestWriter_1($a) {
	{
		return 1;
	}
}
function thx_fp_TestWriter_2(&$s, $i) {
	{
		$this1 = thx_fp__Writer_Writer_Impl_::log($s, "b");
		$tmp1 = thx__Tuple_Tuple3_Impl_::map($this1, array(new _hx_lambda(array(&$i), "thx_fp_TestWriter_3"), 'execute'));
		return thx_fp__Writer_Writer_Impl_::_new($tmp1);
	}
}
function thx_fp_TestWriter_3(&$i, $v) {
	{
		return $i + $v;
	}
}
