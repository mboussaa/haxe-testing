<?php

// Generated by Haxe 3.3.0
class thx_fp_TestSet {
	public function __construct() {}
	public function testEmpty() {
		$set = thx_fp_SetImpl::$Tip;
		$tmp = thx__Ord_Ord_Impl_::fromIntComparison((isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
		$tmp1 = thx_fp__Set_Set_Impl_::member($set, "some", $tmp);
		utest_Assert::isFalse($tmp1, null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 12, "className" => "thx.fp.TestSet", "methodName" => "testEmpty")));
		utest_Assert::equals(0, thx_fp__Set_Set_Impl_::size($set), null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 13, "className" => "thx.fp.TestSet", "methodName" => "testEmpty")));
	}
	public function testSizes() {
		$set = thx_fp_SetImpl::Bin(1, "B", thx_fp_SetImpl::$Tip, thx_fp_SetImpl::$Tip);
		$tmp = thx__Ord_Ord_Impl_::fromIntComparison((isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
		$set1 = thx_fp__Set_Set_Impl_::insert($set, "A", $tmp);
		$tmp1 = thx__Ord_Ord_Impl_::fromIntComparison((isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
		$tmp2 = thx_fp__Set_Set_Impl_::insert($set1, "C", $tmp1);
		utest_Assert::equals(3, thx_fp__Set_Set_Impl_::size($tmp2), null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 17, "className" => "thx.fp.TestSet", "methodName" => "testSizes")));
		$set2 = thx_fp_SetImpl::Bin(1, "A", thx_fp_SetImpl::$Tip, thx_fp_SetImpl::$Tip);
		$tmp3 = thx__Ord_Ord_Impl_::fromIntComparison((isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
		$set3 = thx_fp__Set_Set_Impl_::insert($set2, "B", $tmp3);
		$tmp4 = thx__Ord_Ord_Impl_::fromIntComparison((isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
		$tmp5 = thx_fp__Set_Set_Impl_::insert($set3, "C", $tmp4);
		utest_Assert::equals(3, thx_fp__Set_Set_Impl_::size($tmp5), null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 18, "className" => "thx.fp.TestSet", "methodName" => "testSizes")));
		$set4 = thx_fp_SetImpl::Bin(1, "C", thx_fp_SetImpl::$Tip, thx_fp_SetImpl::$Tip);
		$tmp6 = thx__Ord_Ord_Impl_::fromIntComparison((isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
		$set5 = thx_fp__Set_Set_Impl_::insert($set4, "B", $tmp6);
		$tmp7 = thx__Ord_Ord_Impl_::fromIntComparison((isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
		$tmp8 = thx_fp__Set_Set_Impl_::insert($set5, "A", $tmp7);
		utest_Assert::equals(3, thx_fp__Set_Set_Impl_::size($tmp8), null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 19, "className" => "thx.fp.TestSet", "methodName" => "testSizes")));
		$set6 = thx_fp_SetImpl::Bin(1, "B", thx_fp_SetImpl::$Tip, thx_fp_SetImpl::$Tip);
		$tmp9 = thx__Ord_Ord_Impl_::fromIntComparison((isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
		$set7 = thx_fp__Set_Set_Impl_::insert($set6, "C", $tmp9);
		$tmp10 = thx__Ord_Ord_Impl_::fromIntComparison((isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
		$tmp11 = thx_fp__Set_Set_Impl_::insert($set7, "A", $tmp10);
		utest_Assert::equals(3, thx_fp__Set_Set_Impl_::size($tmp11), null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 20, "className" => "thx.fp.TestSet", "methodName" => "testSizes")));
		$set8 = thx_fp_SetImpl::Bin(1, "C", thx_fp_SetImpl::$Tip, thx_fp_SetImpl::$Tip);
		$tmp12 = thx__Ord_Ord_Impl_::fromIntComparison((isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
		$set9 = thx_fp__Set_Set_Impl_::insert($set8, "A", $tmp12);
		$tmp13 = thx__Ord_Ord_Impl_::fromIntComparison((isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
		$tmp14 = thx_fp__Set_Set_Impl_::insert($set9, "B", $tmp13);
		utest_Assert::equals(3, thx_fp__Set_Set_Impl_::size($tmp14), null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 21, "className" => "thx.fp.TestSet", "methodName" => "testSizes")));
		$set10 = thx_fp_SetImpl::Bin(1, "A", thx_fp_SetImpl::$Tip, thx_fp_SetImpl::$Tip);
		$tmp15 = thx__Ord_Ord_Impl_::fromIntComparison((isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
		$set11 = thx_fp__Set_Set_Impl_::insert($set10, "C", $tmp15);
		$tmp16 = thx__Ord_Ord_Impl_::fromIntComparison((isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
		$tmp17 = thx_fp__Set_Set_Impl_::insert($set11, "B", $tmp16);
		utest_Assert::equals(3, thx_fp__Set_Set_Impl_::size($tmp17), null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 22, "className" => "thx.fp.TestSet", "methodName" => "testSizes")));
		$set12 = thx_fp_SetImpl::Bin(1, "A", thx_fp_SetImpl::$Tip, thx_fp_SetImpl::$Tip);
		$tmp18 = thx__Ord_Ord_Impl_::fromIntComparison((isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
		$set13 = thx_fp__Set_Set_Impl_::insert($set12, "A", $tmp18);
		$tmp19 = thx__Ord_Ord_Impl_::fromIntComparison((isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
		$tmp20 = thx_fp__Set_Set_Impl_::insert($set13, "A", $tmp19);
		utest_Assert::equals(1, thx_fp__Set_Set_Impl_::size($tmp20), null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 24, "className" => "thx.fp.TestSet", "methodName" => "testSizes")));
	}
	public function testSet() {
		$set = thx_fp_SetImpl::Bin(1, "Y", thx_fp_SetImpl::$Tip, thx_fp_SetImpl::$Tip);
		$tmp = thx__Ord_Ord_Impl_::fromIntComparison((isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
		$set1 = thx_fp__Set_Set_Impl_::insert($set, "X", $tmp);
		$tmp1 = thx__Ord_Ord_Impl_::fromIntComparison((isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
		$set2 = thx_fp__Set_Set_Impl_::insert($set1, "Y", $tmp1);
		$tmp2 = thx__Ord_Ord_Impl_::fromIntComparison((isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
		$set3 = thx_fp__Set_Set_Impl_::insert($set2, "Z", $tmp2);
		$tmp3 = thx__Ord_Ord_Impl_::fromIntComparison((isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
		$m = thx_fp__Set_Set_Impl_::insert($set3, "Z", $tmp3);
		$tmp4 = thx__Ord_Ord_Impl_::fromIntComparison((isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
		$tmp5 = thx_fp__Set_Set_Impl_::member($m, "X", $tmp4);
		utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 29, "className" => "thx.fp.TestSet", "methodName" => "testSet")));
		$tmp6 = thx__Ord_Ord_Impl_::fromIntComparison((isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
		$tmp7 = thx_fp__Set_Set_Impl_::member($m, "Y", $tmp6);
		utest_Assert::isTrue($tmp7, null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 30, "className" => "thx.fp.TestSet", "methodName" => "testSet")));
		$tmp8 = thx__Ord_Ord_Impl_::fromIntComparison((isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
		$tmp9 = thx_fp__Set_Set_Impl_::member($m, "Z", $tmp8);
		utest_Assert::isTrue($tmp9, null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 31, "className" => "thx.fp.TestSet", "methodName" => "testSet")));
		$tmp10 = thx__Ord_Ord_Impl_::fromIntComparison((isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
		$tmp11 = thx_fp__Set_Set_Impl_::member($m, "W", $tmp10);
		utest_Assert::isFalse($tmp11, null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 32, "className" => "thx.fp.TestSet", "methodName" => "testSet")));
		utest_Assert::equals(3, thx_fp__Set_Set_Impl_::size($m), null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 33, "className" => "thx.fp.TestSet", "methodName" => "testSet")));
	}
	public function testMapList() {
		$set = thx_fp_SetImpl::Bin(1, "Y", thx_fp_SetImpl::$Tip, thx_fp_SetImpl::$Tip);
		$tmp = thx__Ord_Ord_Impl_::fromIntComparison((isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
		$set1 = thx_fp__Set_Set_Impl_::insert($set, "X", $tmp);
		$tmp1 = thx__Ord_Ord_Impl_::fromIntComparison((isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
		$m = thx_fp__Set_Set_Impl_::insert($set1, "Z", $tmp1);
		$l = thx_fp__Set_Set_Impl_::mapList($m, array(new _hx_lambda(array(), "thx_fp_TestSet_0"), 'execute'));
		$tmp2 = thx_fp__List_List_Impl_::foldLeft($l, (new _hx_array(array())), array(new _hx_lambda(array(), "thx_fp_TestSet_1"), 'execute'));
		$tmp3 = thx_Arrays::order($tmp2, (isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
		utest_Assert::same((new _hx_array(array("x", "y", "z"))), $tmp3, null, null, null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 40, "className" => "thx.fp.TestSet", "methodName" => "testMapList")));
	}
	public function testFoldLeft() {
		$set = thx_fp_SetImpl::Bin(1, 1, thx_fp_SetImpl::$Tip, thx_fp_SetImpl::$Tip);
		$tmp = thx__Ord_Ord_Impl_::fromIntComparison((isset(thx_Ints::$compare) ? thx_Ints::$compare: array("thx_Ints", "compare")));
		$set1 = thx_fp__Set_Set_Impl_::insert($set, 2, $tmp);
		$tmp1 = thx__Ord_Ord_Impl_::fromIntComparison((isset(thx_Ints::$compare) ? thx_Ints::$compare: array("thx_Ints", "compare")));
		$set2 = thx_fp__Set_Set_Impl_::insert($set1, 3, $tmp1);
		$tmp2 = thx_fp__Set_Set_Impl_::foldLeft($set2, (new _hx_array(array())), array(new _hx_lambda(array(), "thx_fp_TestSet_2"), 'execute'));
		$tmp3 = thx_Arrays::order($tmp2, (isset(thx_Ints::$compare) ? thx_Ints::$compare: array("thx_Ints", "compare")));
		utest_Assert::same((new _hx_array(array(1, 2, 3))), $tmp3, null, null, null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 45, "className" => "thx.fp.TestSet", "methodName" => "testFoldLeft")));
	}
	public function testToList() {
		$set = thx_fp_SetImpl::Bin(1, "Y", thx_fp_SetImpl::$Tip, thx_fp_SetImpl::$Tip);
		$tmp = thx__Ord_Ord_Impl_::fromIntComparison((isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
		$set1 = thx_fp__Set_Set_Impl_::insert($set, "X", $tmp);
		$tmp1 = thx__Ord_Ord_Impl_::fromIntComparison((isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
		$m = thx_fp__Set_Set_Impl_::insert($set1, "Z", $tmp1);
		$l = thx_fp__Set_Set_Impl_::toList($m);
		$tmp2 = thx_fp__List_List_Impl_::foldLeft($l, (new _hx_array(array())), array(new _hx_lambda(array(), "thx_fp_TestSet_3"), 'execute'));
		$tmp3 = thx_Arrays::order($tmp2, (isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
		utest_Assert::same((new _hx_array(array("X", "Y", "Z"))), $tmp3, null, null, null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 55, "className" => "thx.fp.TestSet", "methodName" => "testToList")));
	}
	function __toString() { return 'thx.fp.TestSet'; }
}
function thx_fp_TestSet_0($v) {
	{
		return strtolower($v);
	}
}
function thx_fp_TestSet_1($acc, $a) {
	{
		$acc->push($a);
		return $acc;
	}
}
function thx_fp_TestSet_2($acc, $v) {
	{
		$acc->push($v);
		return $acc;
	}
}
function thx_fp_TestSet_3($acc, $a) {
	{
		$acc->push($a);
		return $acc;
	}
}
