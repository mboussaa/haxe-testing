<?php

// Generated by Haxe 3.3.0
class thx_fp_TestMap {
	public function __construct() {}
	public function testRemove() {
		$map = thx_fp_MapImpl::Bin(1, "Y", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip);
		$map1 = thx_fp__Map_Map_Impl_::insert($map, "X", 2, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
		$map2 = thx_fp__Map_Map_Impl_::insert($map1, "Z", 3, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
		$m = thx_fp__Map_Map_Impl_::delete($map2, "X", (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
		$tmp = haxe_ds_Option::Some(1);
		$tmp1 = thx_fp__Map_Map_Impl_::lookup($m, "Y", (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
		utest_Assert::same($tmp, $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 18, "className" => "thx.fp.TestMap", "methodName" => "testRemove")));
		$tmp2 = haxe_ds_Option::Some(3);
		$tmp3 = thx_fp__Map_Map_Impl_::lookup($m, "Z", (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
		utest_Assert::same($tmp2, $tmp3, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 19, "className" => "thx.fp.TestMap", "methodName" => "testRemove")));
		utest_Assert::equals(2, thx_fp__Map_Map_Impl_::size($m), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 20, "className" => "thx.fp.TestMap", "methodName" => "testRemove")));
	}
	public function testEmpty() {
		$m = thx_fp_MapImpl::$Tip;
		$tmp = thx_fp__Map_Map_Impl_::lookup($m, "some", (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
		utest_Assert::same(haxe_ds_Option::$None, $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 25, "className" => "thx.fp.TestMap", "methodName" => "testEmpty")));
		utest_Assert::equals(0, thx_fp__Map_Map_Impl_::size($m), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 26, "className" => "thx.fp.TestMap", "methodName" => "testEmpty")));
	}
	public function testSizes() {
		$map = thx_fp_MapImpl::Bin(1, "B", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip);
		$map1 = thx_fp__Map_Map_Impl_::insert($map, "A", 1, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
		$tmp = thx_fp__Map_Map_Impl_::insert($map1, "C", 1, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
		utest_Assert::equals(3, thx_fp__Map_Map_Impl_::size($tmp), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 30, "className" => "thx.fp.TestMap", "methodName" => "testSizes")));
		$map2 = thx_fp_MapImpl::Bin(1, "A", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip);
		$map3 = thx_fp__Map_Map_Impl_::insert($map2, "B", 1, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
		$tmp1 = thx_fp__Map_Map_Impl_::insert($map3, "C", 1, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
		utest_Assert::equals(3, thx_fp__Map_Map_Impl_::size($tmp1), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 31, "className" => "thx.fp.TestMap", "methodName" => "testSizes")));
		$map4 = thx_fp_MapImpl::Bin(1, "C", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip);
		$map5 = thx_fp__Map_Map_Impl_::insert($map4, "B", 1, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
		$tmp2 = thx_fp__Map_Map_Impl_::insert($map5, "A", 1, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
		utest_Assert::equals(3, thx_fp__Map_Map_Impl_::size($tmp2), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 32, "className" => "thx.fp.TestMap", "methodName" => "testSizes")));
		$map6 = thx_fp_MapImpl::Bin(1, "B", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip);
		$map7 = thx_fp__Map_Map_Impl_::insert($map6, "C", 1, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
		$tmp3 = thx_fp__Map_Map_Impl_::insert($map7, "A", 1, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
		utest_Assert::equals(3, thx_fp__Map_Map_Impl_::size($tmp3), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 33, "className" => "thx.fp.TestMap", "methodName" => "testSizes")));
		$map8 = thx_fp_MapImpl::Bin(1, "C", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip);
		$map9 = thx_fp__Map_Map_Impl_::insert($map8, "A", 1, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
		$tmp4 = thx_fp__Map_Map_Impl_::insert($map9, "B", 1, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
		utest_Assert::equals(3, thx_fp__Map_Map_Impl_::size($tmp4), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 34, "className" => "thx.fp.TestMap", "methodName" => "testSizes")));
		$map10 = thx_fp_MapImpl::Bin(1, "A", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip);
		$map11 = thx_fp__Map_Map_Impl_::insert($map10, "C", 1, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
		$tmp5 = thx_fp__Map_Map_Impl_::insert($map11, "B", 1, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
		utest_Assert::equals(3, thx_fp__Map_Map_Impl_::size($tmp5), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 35, "className" => "thx.fp.TestMap", "methodName" => "testSizes")));
		$map12 = thx_fp_MapImpl::Bin(1, "A", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip);
		$map13 = thx_fp__Map_Map_Impl_::insert($map12, "A", 1, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
		$tmp6 = thx_fp__Map_Map_Impl_::insert($map13, "A", 1, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
		utest_Assert::equals(1, thx_fp__Map_Map_Impl_::size($tmp6), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 37, "className" => "thx.fp.TestMap", "methodName" => "testSizes")));
	}
	public function testFoldLeft() {
		$map = thx_fp_MapImpl::Bin(1, "A", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip);
		$map1 = thx_fp__Map_Map_Impl_::insert($map, "B", 2, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
		$map2 = thx_fp__Map_Map_Impl_::insert($map1, "C", 3, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
		$arr = thx_fp__Map_Map_Impl_::foldLeft($map2, (new _hx_array(array())), array(new _hx_lambda(array(), "thx_fp_TestMap_0"), 'execute'));
		$tmp = thx_Arrays::order($arr, (isset(thx_Ints::$compare) ? thx_Ints::$compare: array("thx_Ints", "compare")));
		utest_Assert::same((new _hx_array(array(1, 2, 3))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 46, "className" => "thx.fp.TestMap", "methodName" => "testFoldLeft")));
	}
	public function testFoldLeftKeys() {
		$map = thx_fp_MapImpl::Bin(1, "A", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip);
		$map1 = thx_fp__Map_Map_Impl_::insert($map, "B", 2, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
		$map2 = thx_fp__Map_Map_Impl_::insert($map1, "C", 3, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
		$arr = thx_fp__Map_Map_Impl_::foldLeftKeys($map2, (new _hx_array(array())), array(new _hx_lambda(array(), "thx_fp_TestMap_1"), 'execute'));
		$tmp = thx_Arrays::order($arr, (isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
		utest_Assert::same((new _hx_array(array("A", "B", "C"))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 55, "className" => "thx.fp.TestMap", "methodName" => "testFoldLeftKeys")));
	}
	public function testSet() {
		$map = thx_fp_MapImpl::Bin(1, "Y", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip);
		$map1 = thx_fp__Map_Map_Impl_::insert($map, "X", 2, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
		$m = thx_fp__Map_Map_Impl_::insert($map1, "Z", 3, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
		$tmp = haxe_ds_Option::Some(2);
		$tmp1 = thx_fp__Map_Map_Impl_::lookup($m, "X", (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
		utest_Assert::same($tmp, $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 60, "className" => "thx.fp.TestMap", "methodName" => "testSet")));
		$tmp2 = haxe_ds_Option::Some(1);
		$tmp3 = thx_fp__Map_Map_Impl_::lookup($m, "Y", (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
		utest_Assert::same($tmp2, $tmp3, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 61, "className" => "thx.fp.TestMap", "methodName" => "testSet")));
		$tmp4 = haxe_ds_Option::Some(3);
		$tmp5 = thx_fp__Map_Map_Impl_::lookup($m, "Z", (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
		utest_Assert::same($tmp4, $tmp5, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 62, "className" => "thx.fp.TestMap", "methodName" => "testSet")));
		utest_Assert::equals(3, thx_fp__Map_Map_Impl_::size($m), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 63, "className" => "thx.fp.TestMap", "methodName" => "testSet")));
	}
	public function testObjectSet() {
		$a = new thx_fp_CO("a");
		$b = new thx_fp_CO("b");
		$c = new thx_fp_CO("c");
		$map = thx_fp_MapImpl::Bin(1, $a, 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip);
		$tmp = thx__Ord_Ord_Impl_::forComparableOrd();
		$map1 = thx_fp__Map_Map_Impl_::insert($map, $b, 2, $tmp);
		$tmp1 = thx__Ord_Ord_Impl_::forComparableOrd();
		$m = thx_fp__Map_Map_Impl_::insert($map1, $c, 3, $tmp1);
		$tmp2 = haxe_ds_Option::Some(1);
		$tmp3 = thx__Ord_Ord_Impl_::forComparableOrd();
		$tmp4 = thx_fp__Map_Map_Impl_::lookup($m, $a, $tmp3);
		utest_Assert::same($tmp2, $tmp4, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 74, "className" => "thx.fp.TestMap", "methodName" => "testObjectSet")));
		$tmp5 = haxe_ds_Option::Some(2);
		$tmp6 = thx__Ord_Ord_Impl_::forComparableOrd();
		$tmp7 = thx_fp__Map_Map_Impl_::lookup($m, $b, $tmp6);
		utest_Assert::same($tmp5, $tmp7, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 75, "className" => "thx.fp.TestMap", "methodName" => "testObjectSet")));
		$tmp8 = haxe_ds_Option::Some(3);
		$tmp9 = thx__Ord_Ord_Impl_::forComparableOrd();
		$tmp10 = thx_fp__Map_Map_Impl_::lookup($m, $c, $tmp9);
		utest_Assert::same($tmp8, $tmp10, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 76, "className" => "thx.fp.TestMap", "methodName" => "testObjectSet")));
		utest_Assert::equals(3, thx_fp__Map_Map_Impl_::size($m), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 77, "className" => "thx.fp.TestMap", "methodName" => "testObjectSet")));
	}
	public function testObjectSet2() {
		$a = new thx_fp_CO2("a");
		$b = new thx_fp_CO2("b");
		$c = new thx_fp_CO2("c");
		$map = thx_fp_MapImpl::Bin(1, $a, 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip);
		$tmp = thx__Ord_Ord_Impl_::forComparable();
		$map1 = thx_fp__Map_Map_Impl_::insert($map, $b, 2, $tmp);
		$tmp1 = thx__Ord_Ord_Impl_::forComparable();
		$m = thx_fp__Map_Map_Impl_::insert($map1, $c, 3, $tmp1);
		$tmp2 = haxe_ds_Option::Some(1);
		$tmp3 = thx__Ord_Ord_Impl_::forComparable();
		$tmp4 = thx_fp__Map_Map_Impl_::lookup($m, $a, $tmp3);
		utest_Assert::same($tmp2, $tmp4, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 88, "className" => "thx.fp.TestMap", "methodName" => "testObjectSet2")));
		$tmp5 = haxe_ds_Option::Some(2);
		$tmp6 = thx__Ord_Ord_Impl_::forComparable();
		$tmp7 = thx_fp__Map_Map_Impl_::lookup($m, $b, $tmp6);
		utest_Assert::same($tmp5, $tmp7, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 89, "className" => "thx.fp.TestMap", "methodName" => "testObjectSet2")));
		$tmp8 = haxe_ds_Option::Some(3);
		$tmp9 = thx__Ord_Ord_Impl_::forComparable();
		$tmp10 = thx_fp__Map_Map_Impl_::lookup($m, $c, $tmp9);
		utest_Assert::same($tmp8, $tmp10, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 90, "className" => "thx.fp.TestMap", "methodName" => "testObjectSet2")));
		utest_Assert::equals(3, thx_fp__Map_Map_Impl_::size($m), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 91, "className" => "thx.fp.TestMap", "methodName" => "testObjectSet2")));
	}
	public function testFromNative() {
		$_g = new haxe_ds_StringMap();
		$_g->set("a", 1);
		$_g->set("b", 2);
		$map = thx_fp_StringMap::fromNative($_g);
		utest_Assert::equals(2, thx_fp__Map_Map_Impl_::size($map), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 97, "className" => "thx.fp.TestMap", "methodName" => "testFromNative")));
		$tmp = thx_fp__Map_Map_Impl_::lookup($map, "a", (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
		utest_Assert::isTrue(thx_Options::toBool($tmp), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 98, "className" => "thx.fp.TestMap", "methodName" => "testFromNative")));
		$tmp1 = thx_fp__Map_Map_Impl_::lookup($map, "b", (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
		utest_Assert::isTrue(thx_Options::toBool($tmp1), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 99, "className" => "thx.fp.TestMap", "methodName" => "testFromNative")));
	}
	function __toString() { return 'thx.fp.TestMap'; }
}
function thx_fp_TestMap_0($arr1, $v) {
	{
		$arr1->push($v);
		return $arr1;
	}
}
function thx_fp_TestMap_1($arr1, $k) {
	{
		$arr1->push($k);
		return $arr1;
	}
}
