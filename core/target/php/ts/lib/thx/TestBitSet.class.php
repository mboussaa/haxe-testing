<?php

// Generated by Haxe 3.3.0
class thx_TestBitSet {
	public function __construct() {}
	public function testBitSet() {
		$this1 = (new _hx_array(array(0)));
		thx_Arrays::resize($this1, 2, 0);
		$bits = $this1;
		utest_Assert::same(0, thx__BitSet_BitSet_Impl_::get_length($bits), null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 11, "className" => "thx.TestBitSet", "methodName" => "testBitSet")));
		$tmp = thx__BitSet_BitSet_Impl_::toString($bits);
		utest_Assert::same("", $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 12, "className" => "thx.TestBitSet", "methodName" => "testBitSet")));
		utest_Assert::raises(array(new _hx_lambda(array(&$bits), "thx_TestBitSet_0"), 'execute'), null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 14, "className" => "thx.TestBitSet", "methodName" => "testBitSet")));
		utest_Assert::raises(array(new _hx_lambda(array(&$bits), "thx_TestBitSet_1"), 'execute'), null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 15, "className" => "thx.TestBitSet", "methodName" => "testBitSet")));
		utest_Assert::raises(array(new _hx_lambda(array(&$bits), "thx_TestBitSet_2"), 'execute'), null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 16, "className" => "thx.TestBitSet", "methodName" => "testBitSet")));
		utest_Assert::raises(array(new _hx_lambda(array(&$bits), "thx_TestBitSet_3"), 'execute'), null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 17, "className" => "thx.TestBitSet", "methodName" => "testBitSet")));
		thx__BitSet_BitSet_Impl_::setAt($bits, 0, true);
		utest_Assert::same(1, thx__BitSet_BitSet_Impl_::get_length($bits), null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 20, "className" => "thx.TestBitSet", "methodName" => "testBitSet")));
		$tmp1 = thx__BitSet_BitSet_Impl_::toString($bits);
		utest_Assert::same("1", $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 21, "className" => "thx.TestBitSet", "methodName" => "testBitSet")));
		thx__BitSet_BitSet_Impl_::setAt($bits, 1, true);
		utest_Assert::same(2, thx__BitSet_BitSet_Impl_::get_length($bits), null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 24, "className" => "thx.TestBitSet", "methodName" => "testBitSet")));
		$tmp2 = thx__BitSet_BitSet_Impl_::toString($bits);
		utest_Assert::same("11", $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 25, "className" => "thx.TestBitSet", "methodName" => "testBitSet")));
		thx__BitSet_BitSet_Impl_::setAt($bits, 2, true);
		utest_Assert::same(3, thx__BitSet_BitSet_Impl_::get_length($bits), null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 28, "className" => "thx.TestBitSet", "methodName" => "testBitSet")));
		$tmp3 = thx__BitSet_BitSet_Impl_::toString($bits);
		utest_Assert::same("111", $tmp3, null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 29, "className" => "thx.TestBitSet", "methodName" => "testBitSet")));
		thx__BitSet_BitSet_Impl_::setAt($bits, 1, false);
		utest_Assert::same(3, thx__BitSet_BitSet_Impl_::get_length($bits), null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 32, "className" => "thx.TestBitSet", "methodName" => "testBitSet")));
		$tmp4 = thx__BitSet_BitSet_Impl_::toString($bits);
		utest_Assert::same("101", $tmp4, null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 33, "className" => "thx.TestBitSet", "methodName" => "testBitSet")));
		thx__BitSet_BitSet_Impl_::setAt($bits, 32, true);
		utest_Assert::same(33, thx__BitSet_BitSet_Impl_::get_length($bits), null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 37, "className" => "thx.TestBitSet", "methodName" => "testBitSet")));
		$tmp5 = thx__BitSet_BitSet_Impl_::toString($bits);
		utest_Assert::same("101000000000000000000000000000001", $tmp5, null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 38, "className" => "thx.TestBitSet", "methodName" => "testBitSet")));
		{
			$_g1 = 0;
			$_g = thx__BitSet_BitSet_Impl_::get_length($bits);
			while($_g1 < $_g) {
				$i = $_g1++;
				$tmp6 = thx_Arrays::contains((new _hx_array(array(0, 2, 32))), $i, null);
				if($tmp6) {
					$tmp7 = thx__BitSet_BitSet_Impl_::at($bits, $i);
					utest_Assert::isTrue($tmp7, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 42, "className" => "thx.TestBitSet", "methodName" => "testBitSet")));
					unset($tmp7);
				} else {
					$tmp8 = thx__BitSet_BitSet_Impl_::at($bits, $i);
					utest_Assert::isFalse($tmp8, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 44, "className" => "thx.TestBitSet", "methodName" => "testBitSet")));
					unset($tmp8);
				}
				unset($tmp6,$i);
			}
		}
		utest_Assert::raises(array(new _hx_lambda(array(&$bits), "thx_TestBitSet_4"), 'execute'), null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 48, "className" => "thx.TestBitSet", "methodName" => "testBitSet")));
		{
			$_g11 = 0;
			$_g2 = thx__BitSet_BitSet_Impl_::get_length($bits);
			while($_g11 < $_g2) {
				$i1 = $_g11++;
				thx__BitSet_BitSet_Impl_::setAt($bits, $i1, true);
				unset($i1);
			}
		}
		utest_Assert::same(33, thx__BitSet_BitSet_Impl_::get_length($bits), null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 51, "className" => "thx.TestBitSet", "methodName" => "testBitSet")));
		$tmp10 = thx__BitSet_BitSet_Impl_::toString($bits);
		utest_Assert::same("111111111111111111111111111111111", $tmp10, null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 52, "className" => "thx.TestBitSet", "methodName" => "testBitSet")));
		{
			$_g12 = 0;
			$_g3 = thx__BitSet_BitSet_Impl_::get_length($bits);
			while($_g12 < $_g3) {
				$i2 = $_g12++;
				thx__BitSet_BitSet_Impl_::setAt($bits, $i2, false);
				unset($i2);
			}
		}
		utest_Assert::same(33, thx__BitSet_BitSet_Impl_::get_length($bits), null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 55, "className" => "thx.TestBitSet", "methodName" => "testBitSet")));
		$tmp11 = thx__BitSet_BitSet_Impl_::toString($bits);
		utest_Assert::same("000000000000000000000000000000000", $tmp11, null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 56, "className" => "thx.TestBitSet", "methodName" => "testBitSet")));
	}
	public function testFromBools() {
		$this1 = (new _hx_array(array(0)));
		thx_Arrays::resize($this1, 2, 0);
		$bits = thx_Arrays::reducei((new _hx_array(array(true, false, true, true))), array(new _hx_lambda(array(), "thx_TestBitSet_5"), 'execute'), $this1);
		utest_Assert::same(4, thx__BitSet_BitSet_Impl_::get_length($bits), null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 61, "className" => "thx.TestBitSet", "methodName" => "testFromBools")));
		$tmp = thx__BitSet_BitSet_Impl_::at($bits, 0);
		utest_Assert::same(true, $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 62, "className" => "thx.TestBitSet", "methodName" => "testFromBools")));
		$tmp1 = thx__BitSet_BitSet_Impl_::at($bits, 1);
		utest_Assert::same(false, $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 63, "className" => "thx.TestBitSet", "methodName" => "testFromBools")));
		$tmp2 = thx__BitSet_BitSet_Impl_::at($bits, 2);
		utest_Assert::same(true, $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 64, "className" => "thx.TestBitSet", "methodName" => "testFromBools")));
		$tmp3 = thx__BitSet_BitSet_Impl_::at($bits, 3);
		utest_Assert::same(true, $tmp3, null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 65, "className" => "thx.TestBitSet", "methodName" => "testFromBools")));
	}
	public function testToBools() {
		$chars = _hx_explode("", "10101");
		$this1 = (new _hx_array(array(0)));
		thx_Arrays::resize($this1, 2, 0);
		$bits = thx_Arrays::reducei($chars, array(new _hx_lambda(array(), "thx_TestBitSet_6"), 'execute'), $this1);
		$this2 = $bits;
		$tmp = thx_Ints::range(thx__BitSet_BitSet_Impl_::get_length($this2), null, null)->map(array(new _hx_lambda(array(&$this2), "thx_TestBitSet_7"), 'execute'));
		utest_Assert::same((new _hx_array(array(true, false, true, false, true))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 70, "className" => "thx.TestBitSet", "methodName" => "testToBools")));
	}
	public function testToInt32s() {
		$chars = _hx_explode("", "10101");
		$this1 = (new _hx_array(array(0)));
		thx_Arrays::resize($this1, 2, 0);
		$bits = thx_Arrays::reducei($chars, array(new _hx_lambda(array(), "thx_TestBitSet_8"), 'execute'), $this1);
		$parts = $bits->slice(1, null);
		utest_Assert::same((new _hx_array(array(21))), $parts, null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 76, "className" => "thx.TestBitSet", "methodName" => "testToInt32s")));
	}
	public function testFromString() {
		$chars = _hx_explode("", "1011");
		$this1 = (new _hx_array(array(0)));
		thx_Arrays::resize($this1, 2, 0);
		$bits = thx_Arrays::reducei($chars, array(new _hx_lambda(array(), "thx_TestBitSet_9"), 'execute'), $this1);
		utest_Assert::same(4, thx__BitSet_BitSet_Impl_::get_length($bits), null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 81, "className" => "thx.TestBitSet", "methodName" => "testFromString")));
		$tmp = thx__BitSet_BitSet_Impl_::at($bits, 0);
		utest_Assert::same(true, $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 82, "className" => "thx.TestBitSet", "methodName" => "testFromString")));
		$tmp1 = thx__BitSet_BitSet_Impl_::at($bits, 1);
		utest_Assert::same(false, $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 83, "className" => "thx.TestBitSet", "methodName" => "testFromString")));
		$tmp2 = thx__BitSet_BitSet_Impl_::at($bits, 2);
		utest_Assert::same(true, $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 84, "className" => "thx.TestBitSet", "methodName" => "testFromString")));
		$tmp3 = thx__BitSet_BitSet_Impl_::at($bits, 3);
		utest_Assert::same(true, $tmp3, null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 85, "className" => "thx.TestBitSet", "methodName" => "testFromString")));
	}
	public function testPresetLength() {
		$this1 = (new _hx_array(array(35)));
		thx_Arrays::resize($this1, 3, 0);
		$bits1 = $this1;
		utest_Assert::same(35, thx__BitSet_BitSet_Impl_::get_length($bits1), null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 90, "className" => "thx.TestBitSet", "methodName" => "testPresetLength")));
		{
			$_g = 0;
			while($_g < 35) {
				$i = $_g++;
				$tmp = thx__BitSet_BitSet_Impl_::at($bits1, $i);
				utest_Assert::isFalse($tmp, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 92, "className" => "thx.TestBitSet", "methodName" => "testPresetLength")));
				unset($tmp,$i);
			}
		}
		utest_Assert::raises(array(new _hx_lambda(array(&$bits1), "thx_TestBitSet_10"), 'execute'), null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 94, "className" => "thx.TestBitSet", "methodName" => "testPresetLength")));
		$this2 = (new _hx_array(array(35)));
		thx_Arrays::resize($this2, 3, 0);
		{
			$_g1 = 0;
			$_g2 = thx__BitSet_BitSet_Impl_::get_length($this2);
			while($_g1 < $_g2) {
				$i1 = $_g1++;
				thx__BitSet_BitSet_Impl_::setAt($this2, $i1, true);
				unset($i1);
			}
		}
		$bits2 = $this2;
		utest_Assert::same(35, thx__BitSet_BitSet_Impl_::get_length($bits2), null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 97, "className" => "thx.TestBitSet", "methodName" => "testPresetLength")));
		{
			$_g3 = 0;
			while($_g3 < 35) {
				$i2 = $_g3++;
				$tmp1 = thx__BitSet_BitSet_Impl_::at($bits2, $i2);
				utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 99, "className" => "thx.TestBitSet", "methodName" => "testPresetLength")));
				unset($tmp1,$i2);
			}
		}
		utest_Assert::raises(array(new _hx_lambda(array(&$bits2), "thx_TestBitSet_11"), 'execute'), null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 101, "className" => "thx.TestBitSet", "methodName" => "testPresetLength")));
	}
	public function testConcat() {
		$chars = _hx_explode("", "10101");
		$this1 = (new _hx_array(array(0)));
		thx_Arrays::resize($this1, 2, 0);
		$b1 = thx_Arrays::reducei($chars, array(new _hx_lambda(array(), "thx_TestBitSet_12"), 'execute'), $this1);
		$chars1 = _hx_explode("", "111");
		$this2 = (new _hx_array(array(0)));
		thx_Arrays::resize($this2, 2, 0);
		$b2 = thx_Arrays::reducei($chars1, array(new _hx_lambda(array(), "thx_TestBitSet_13"), 'execute'), $this2);
		$length = thx__BitSet_BitSet_Impl_::get_length($b1) + thx__BitSet_BitSet_Impl_::get_length($b2) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$this3 = (new _hx_array(array($length)));
		$tmp = Std::int($length / 32);
		thx_Arrays::resize($this3, $tmp + 1 + 1, 0);
		$result = $this3;
		$index = 0;
		{
			$_g1 = 0;
			$_g = thx__BitSet_BitSet_Impl_::get_length($b1);
			while($_g1 < $_g) {
				$leftIndex = $_g1++;
				$tmp1 = $index++;
				$tmp2 = thx__BitSet_BitSet_Impl_::at($b1, $leftIndex);
				thx__BitSet_BitSet_Impl_::setAt($result, $tmp1, $tmp2);
				unset($tmp2,$tmp1,$leftIndex);
			}
		}
		{
			$_g11 = 0;
			$_g2 = thx__BitSet_BitSet_Impl_::get_length($b2);
			while($_g11 < $_g2) {
				$rightIndex = $_g11++;
				$tmp3 = $index++;
				$tmp4 = thx__BitSet_BitSet_Impl_::at($b2, $rightIndex);
				thx__BitSet_BitSet_Impl_::setAt($result, $tmp3, $tmp4);
				unset($tmp4,$tmp3,$rightIndex);
			}
		}
		$tmp5 = thx__BitSet_BitSet_Impl_::toString($b1);
		utest_Assert::same("10101", $tmp5, null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 108, "className" => "thx.TestBitSet", "methodName" => "testConcat")));
		$tmp6 = thx__BitSet_BitSet_Impl_::toString($b2);
		utest_Assert::same("111", $tmp6, null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 109, "className" => "thx.TestBitSet", "methodName" => "testConcat")));
		$tmp7 = thx__BitSet_BitSet_Impl_::toString($result);
		utest_Assert::same("10101111", $tmp7, null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 110, "className" => "thx.TestBitSet", "methodName" => "testConcat")));
		utest_Assert::same(5, thx__BitSet_BitSet_Impl_::get_length($b1), null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 111, "className" => "thx.TestBitSet", "methodName" => "testConcat")));
		utest_Assert::same(3, thx__BitSet_BitSet_Impl_::get_length($b2), null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 112, "className" => "thx.TestBitSet", "methodName" => "testConcat")));
		utest_Assert::same(8, thx__BitSet_BitSet_Impl_::get_length($result), null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 113, "className" => "thx.TestBitSet", "methodName" => "testConcat")));
	}
	public function testExpand() {
		$chars = _hx_explode("", "1011");
		$this1 = (new _hx_array(array(0)));
		thx_Arrays::resize($this1, 2, 0);
		$b1 = thx_Arrays::reducei($chars, array(new _hx_lambda(array(), "thx_TestBitSet_14"), 'execute'), $this1);
		$b2 = thx__BitSet_BitSet_Impl_::expand($b1, 1);
		$b3 = thx__BitSet_BitSet_Impl_::expand($b1, 3);
		$tmp = thx__BitSet_BitSet_Impl_::toString($b1);
		utest_Assert::same("1011", $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 120, "className" => "thx.TestBitSet", "methodName" => "testExpand")));
		$tmp1 = thx__BitSet_BitSet_Impl_::toString($b2);
		utest_Assert::same("11001111", $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 121, "className" => "thx.TestBitSet", "methodName" => "testExpand")));
		$tmp2 = thx__BitSet_BitSet_Impl_::toString($b3);
		utest_Assert::same("1111000011111111", $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 122, "className" => "thx.TestBitSet", "methodName" => "testExpand")));
	}
	public function testEquals() {
		$chars = _hx_explode("", "10101100");
		$this1 = (new _hx_array(array(0)));
		thx_Arrays::resize($this1, 2, 0);
		$b1 = thx_Arrays::reducei($chars, array(new _hx_lambda(array(), "thx_TestBitSet_15"), 'execute'), $this1);
		$chars1 = _hx_explode("", "10101100");
		$this2 = (new _hx_array(array(0)));
		thx_Arrays::resize($this2, 2, 0);
		$b2 = thx_Arrays::reducei($chars1, array(new _hx_lambda(array(), "thx_TestBitSet_16"), 'execute'), $this2);
		$chars2 = _hx_explode("", "101011001");
		$this3 = (new _hx_array(array(0)));
		thx_Arrays::resize($this3, 2, 0);
		$b3 = thx_Arrays::reducei($chars2, array(new _hx_lambda(array(), "thx_TestBitSet_17"), 'execute'), $this3);
		$chars3 = _hx_explode("", "10101101");
		$this4 = (new _hx_array(array(0)));
		thx_Arrays::resize($this4, 2, 0);
		$b4 = thx_Arrays::reducei($chars3, array(new _hx_lambda(array(), "thx_TestBitSet_18"), 'execute'), $this4);
		$chars4 = _hx_explode("", "1010110");
		$this5 = (new _hx_array(array(0)));
		thx_Arrays::resize($this5, 2, 0);
		$b5 = thx_Arrays::reducei($chars4, array(new _hx_lambda(array(), "thx_TestBitSet_19"), 'execute'), $this5);
		$tmp = thx__BitSet_BitSet_Impl_::equals($b1, $b2);
		utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 131, "className" => "thx.TestBitSet", "methodName" => "testEquals")));
		$tmp1 = thx__BitSet_BitSet_Impl_::equals($b1, $b3);
		utest_Assert::isFalse($tmp1, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 132, "className" => "thx.TestBitSet", "methodName" => "testEquals")));
		$tmp2 = thx__BitSet_BitSet_Impl_::equals($b1, $b4);
		utest_Assert::isFalse($tmp2, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 133, "className" => "thx.TestBitSet", "methodName" => "testEquals")));
		$tmp3 = thx__BitSet_BitSet_Impl_::equals($b1, $b5);
		utest_Assert::isFalse($tmp3, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 134, "className" => "thx.TestBitSet", "methodName" => "testEquals")));
		$tmp4 = thx__BitSet_BitSet_Impl_::equals($b1, $b2);
		utest_Assert::isTrue($tmp4, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 135, "className" => "thx.TestBitSet", "methodName" => "testEquals")));
		$tmp5 = thx__BitSet_BitSet_Impl_::equals($b1, $b3);
		utest_Assert::isFalse($tmp5, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 136, "className" => "thx.TestBitSet", "methodName" => "testEquals")));
		$tmp6 = thx__BitSet_BitSet_Impl_::equals($b1, $b4);
		utest_Assert::isFalse($tmp6, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 137, "className" => "thx.TestBitSet", "methodName" => "testEquals")));
		$tmp7 = thx__BitSet_BitSet_Impl_::equals($b1, $b5);
		utest_Assert::isFalse($tmp7, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 138, "className" => "thx.TestBitSet", "methodName" => "testEquals")));
	}
	public function testNotEquals() {
		$chars = _hx_explode("", "10101100");
		$this1 = (new _hx_array(array(0)));
		thx_Arrays::resize($this1, 2, 0);
		$b1 = thx_Arrays::reducei($chars, array(new _hx_lambda(array(), "thx_TestBitSet_20"), 'execute'), $this1);
		$chars1 = _hx_explode("", "10101100");
		$this2 = (new _hx_array(array(0)));
		thx_Arrays::resize($this2, 2, 0);
		$b2 = thx_Arrays::reducei($chars1, array(new _hx_lambda(array(), "thx_TestBitSet_21"), 'execute'), $this2);
		$chars2 = _hx_explode("", "101011001");
		$this3 = (new _hx_array(array(0)));
		thx_Arrays::resize($this3, 2, 0);
		$b3 = thx_Arrays::reducei($chars2, array(new _hx_lambda(array(), "thx_TestBitSet_22"), 'execute'), $this3);
		$chars3 = _hx_explode("", "10101101");
		$this4 = (new _hx_array(array(0)));
		thx_Arrays::resize($this4, 2, 0);
		$b4 = thx_Arrays::reducei($chars3, array(new _hx_lambda(array(), "thx_TestBitSet_23"), 'execute'), $this4);
		$chars4 = _hx_explode("", "1010110");
		$this5 = (new _hx_array(array(0)));
		thx_Arrays::resize($this5, 2, 0);
		$b5 = thx_Arrays::reducei($chars4, array(new _hx_lambda(array(), "thx_TestBitSet_24"), 'execute'), $this5);
		$tmp = thx__BitSet_BitSet_Impl_::notEquals($b1, $b2);
		utest_Assert::isFalse($tmp, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 147, "className" => "thx.TestBitSet", "methodName" => "testNotEquals")));
		$tmp1 = thx__BitSet_BitSet_Impl_::notEquals($b1, $b3);
		utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 148, "className" => "thx.TestBitSet", "methodName" => "testNotEquals")));
		$tmp2 = thx__BitSet_BitSet_Impl_::notEquals($b1, $b4);
		utest_Assert::isTrue($tmp2, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 149, "className" => "thx.TestBitSet", "methodName" => "testNotEquals")));
		$tmp3 = thx__BitSet_BitSet_Impl_::notEquals($b1, $b5);
		utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 150, "className" => "thx.TestBitSet", "methodName" => "testNotEquals")));
		$tmp4 = thx__BitSet_BitSet_Impl_::notEquals($b1, $b2);
		utest_Assert::isFalse($tmp4, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 151, "className" => "thx.TestBitSet", "methodName" => "testNotEquals")));
		$tmp5 = thx__BitSet_BitSet_Impl_::notEquals($b1, $b3);
		utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 152, "className" => "thx.TestBitSet", "methodName" => "testNotEquals")));
		$tmp6 = thx__BitSet_BitSet_Impl_::notEquals($b1, $b4);
		utest_Assert::isTrue($tmp6, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 153, "className" => "thx.TestBitSet", "methodName" => "testNotEquals")));
		$tmp7 = thx__BitSet_BitSet_Impl_::notEquals($b1, $b5);
		utest_Assert::isTrue($tmp7, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 154, "className" => "thx.TestBitSet", "methodName" => "testNotEquals")));
	}
	public function testAnd() {
		$chars = _hx_explode("", "10101100");
		$this1 = (new _hx_array(array(0)));
		thx_Arrays::resize($this1, 2, 0);
		$b1 = thx_Arrays::reducei($chars, array(new _hx_lambda(array(), "thx_TestBitSet_25"), 'execute'), $this1);
		$chars1 = _hx_explode("", "11111111");
		$this2 = (new _hx_array(array(0)));
		thx_Arrays::resize($this2, 2, 0);
		$b2 = thx_Arrays::reducei($chars1, array(new _hx_lambda(array(), "thx_TestBitSet_26"), 'execute'), $this2);
		$chars2 = _hx_explode("", "00000000");
		$this3 = (new _hx_array(array(0)));
		thx_Arrays::resize($this3, 2, 0);
		$b3 = thx_Arrays::reducei($chars2, array(new _hx_lambda(array(), "thx_TestBitSet_27"), 'execute'), $this3);
		$chars3 = _hx_explode("", "111");
		$this4 = (new _hx_array(array(0)));
		thx_Arrays::resize($this4, 2, 0);
		$b4 = thx_Arrays::reducei($chars3, array(new _hx_lambda(array(), "thx_TestBitSet_28"), 'execute'), $this4);
		$chars4 = _hx_explode("", "000");
		$this5 = (new _hx_array(array(0)));
		thx_Arrays::resize($this5, 2, 0);
		$b5 = thx_Arrays::reducei($chars4, array(new _hx_lambda(array(), "thx_TestBitSet_29"), 'execute'), $this5);
		$chars5 = _hx_explode("", "10101100");
		$this6 = (new _hx_array(array(0)));
		thx_Arrays::resize($this6, 2, 0);
		$tmp = thx_Arrays::reducei($chars5, array(new _hx_lambda(array(), "thx_TestBitSet_30"), 'execute'), $this6);
		$tmp1 = thx__BitSet_BitSet_Impl_::hand($b1, $b2);
		$tmp2 = thx__BitSet_BitSet_Impl_::equals($tmp, $tmp1);
		utest_Assert::isTrue($tmp2, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 163, "className" => "thx.TestBitSet", "methodName" => "testAnd")));
		$chars6 = _hx_explode("", "00000000");
		$this7 = (new _hx_array(array(0)));
		thx_Arrays::resize($this7, 2, 0);
		$tmp3 = thx_Arrays::reducei($chars6, array(new _hx_lambda(array(), "thx_TestBitSet_31"), 'execute'), $this7);
		$tmp4 = thx__BitSet_BitSet_Impl_::hand($b1, $b3);
		$tmp5 = thx__BitSet_BitSet_Impl_::equals($tmp3, $tmp4);
		utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 164, "className" => "thx.TestBitSet", "methodName" => "testAnd")));
		utest_Assert::raises(array(new _hx_lambda(array(&$b1, &$b4), "thx_TestBitSet_32"), 'execute'), null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 165, "className" => "thx.TestBitSet", "methodName" => "testAnd")));
		utest_Assert::raises(array(new _hx_lambda(array(&$b1, &$b5), "thx_TestBitSet_33"), 'execute'), null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 166, "className" => "thx.TestBitSet", "methodName" => "testAnd")));
	}
	public function testOr() {
		$chars = _hx_explode("", "10101100");
		$this1 = (new _hx_array(array(0)));
		thx_Arrays::resize($this1, 2, 0);
		$b1 = thx_Arrays::reducei($chars, array(new _hx_lambda(array(), "thx_TestBitSet_34"), 'execute'), $this1);
		$chars1 = _hx_explode("", "11111111");
		$this2 = (new _hx_array(array(0)));
		thx_Arrays::resize($this2, 2, 0);
		$b2 = thx_Arrays::reducei($chars1, array(new _hx_lambda(array(), "thx_TestBitSet_35"), 'execute'), $this2);
		$chars2 = _hx_explode("", "00000000");
		$this3 = (new _hx_array(array(0)));
		thx_Arrays::resize($this3, 2, 0);
		$b3 = thx_Arrays::reducei($chars2, array(new _hx_lambda(array(), "thx_TestBitSet_36"), 'execute'), $this3);
		$chars3 = _hx_explode("", "111");
		$this4 = (new _hx_array(array(0)));
		thx_Arrays::resize($this4, 2, 0);
		$b4 = thx_Arrays::reducei($chars3, array(new _hx_lambda(array(), "thx_TestBitSet_37"), 'execute'), $this4);
		$chars4 = _hx_explode("", "000");
		$this5 = (new _hx_array(array(0)));
		thx_Arrays::resize($this5, 2, 0);
		$b5 = thx_Arrays::reducei($chars4, array(new _hx_lambda(array(), "thx_TestBitSet_38"), 'execute'), $this5);
		$chars5 = _hx_explode("", "11111111");
		$this6 = (new _hx_array(array(0)));
		thx_Arrays::resize($this6, 2, 0);
		$tmp = thx_Arrays::reducei($chars5, array(new _hx_lambda(array(), "thx_TestBitSet_39"), 'execute'), $this6);
		$tmp1 = thx__BitSet_BitSet_Impl_::hor($b1, $b2);
		$tmp2 = thx__BitSet_BitSet_Impl_::equals($tmp, $tmp1);
		utest_Assert::isTrue($tmp2, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 175, "className" => "thx.TestBitSet", "methodName" => "testOr")));
		$chars6 = _hx_explode("", "10101100");
		$this7 = (new _hx_array(array(0)));
		thx_Arrays::resize($this7, 2, 0);
		$tmp3 = thx_Arrays::reducei($chars6, array(new _hx_lambda(array(), "thx_TestBitSet_40"), 'execute'), $this7);
		$tmp4 = thx__BitSet_BitSet_Impl_::hor($b1, $b3);
		$tmp5 = thx__BitSet_BitSet_Impl_::equals($tmp3, $tmp4);
		utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 176, "className" => "thx.TestBitSet", "methodName" => "testOr")));
		utest_Assert::raises(array(new _hx_lambda(array(&$b1, &$b4), "thx_TestBitSet_41"), 'execute'), null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 177, "className" => "thx.TestBitSet", "methodName" => "testOr")));
		utest_Assert::raises(array(new _hx_lambda(array(&$b1, &$b5), "thx_TestBitSet_42"), 'execute'), null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 178, "className" => "thx.TestBitSet", "methodName" => "testOr")));
	}
	public function testXor() {
		$chars = _hx_explode("", "10101100");
		$this1 = (new _hx_array(array(0)));
		thx_Arrays::resize($this1, 2, 0);
		$b1 = thx_Arrays::reducei($chars, array(new _hx_lambda(array(), "thx_TestBitSet_43"), 'execute'), $this1);
		$chars1 = _hx_explode("", "11111111");
		$this2 = (new _hx_array(array(0)));
		thx_Arrays::resize($this2, 2, 0);
		$b2 = thx_Arrays::reducei($chars1, array(new _hx_lambda(array(), "thx_TestBitSet_44"), 'execute'), $this2);
		$chars2 = _hx_explode("", "00000000");
		$this3 = (new _hx_array(array(0)));
		thx_Arrays::resize($this3, 2, 0);
		$b3 = thx_Arrays::reducei($chars2, array(new _hx_lambda(array(), "thx_TestBitSet_45"), 'execute'), $this3);
		$chars3 = _hx_explode("", "111");
		$this4 = (new _hx_array(array(0)));
		thx_Arrays::resize($this4, 2, 0);
		$b4 = thx_Arrays::reducei($chars3, array(new _hx_lambda(array(), "thx_TestBitSet_46"), 'execute'), $this4);
		$chars4 = _hx_explode("", "000");
		$this5 = (new _hx_array(array(0)));
		thx_Arrays::resize($this5, 2, 0);
		$b5 = thx_Arrays::reducei($chars4, array(new _hx_lambda(array(), "thx_TestBitSet_47"), 'execute'), $this5);
		$chars5 = _hx_explode("", "01010011");
		$this6 = (new _hx_array(array(0)));
		thx_Arrays::resize($this6, 2, 0);
		$tmp = thx_Arrays::reducei($chars5, array(new _hx_lambda(array(), "thx_TestBitSet_48"), 'execute'), $this6);
		$tmp1 = thx__BitSet_BitSet_Impl_::hxor($b1, $b2);
		$tmp2 = thx__BitSet_BitSet_Impl_::equals($tmp, $tmp1);
		utest_Assert::isTrue($tmp2, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 187, "className" => "thx.TestBitSet", "methodName" => "testXor")));
		$chars6 = _hx_explode("", "10101100");
		$this7 = (new _hx_array(array(0)));
		thx_Arrays::resize($this7, 2, 0);
		$tmp3 = thx_Arrays::reducei($chars6, array(new _hx_lambda(array(), "thx_TestBitSet_49"), 'execute'), $this7);
		$tmp4 = thx__BitSet_BitSet_Impl_::hxor($b1, $b3);
		$tmp5 = thx__BitSet_BitSet_Impl_::equals($tmp3, $tmp4);
		utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 188, "className" => "thx.TestBitSet", "methodName" => "testXor")));
		utest_Assert::raises(array(new _hx_lambda(array(&$b1, &$b4), "thx_TestBitSet_50"), 'execute'), null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 189, "className" => "thx.TestBitSet", "methodName" => "testXor")));
		utest_Assert::raises(array(new _hx_lambda(array(&$b1, &$b5), "thx_TestBitSet_51"), 'execute'), null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 190, "className" => "thx.TestBitSet", "methodName" => "testXor")));
	}
	public function testNegate() {
		$chars = _hx_explode("", "00000000");
		$this1 = (new _hx_array(array(0)));
		thx_Arrays::resize($this1, 2, 0);
		$tmp = thx_Arrays::reducei($chars, array(new _hx_lambda(array(), "thx_TestBitSet_52"), 'execute'), $this1);
		$chars1 = _hx_explode("", "11111111");
		$this2 = (new _hx_array(array(0)));
		thx_Arrays::resize($this2, 2, 0);
		$tmp1 = thx_Arrays::reducei($chars1, array(new _hx_lambda(array(), "thx_TestBitSet_53"), 'execute'), $this2);
		$tmp2 = thx__BitSet_BitSet_Impl_::negate($tmp1);
		$tmp3 = thx__BitSet_BitSet_Impl_::equals($tmp, $tmp2);
		utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 194, "className" => "thx.TestBitSet", "methodName" => "testNegate")));
		$chars2 = _hx_explode("", "11111111");
		$this3 = (new _hx_array(array(0)));
		thx_Arrays::resize($this3, 2, 0);
		$tmp4 = thx_Arrays::reducei($chars2, array(new _hx_lambda(array(), "thx_TestBitSet_54"), 'execute'), $this3);
		$chars3 = _hx_explode("", "00000000");
		$this4 = (new _hx_array(array(0)));
		thx_Arrays::resize($this4, 2, 0);
		$tmp5 = thx_Arrays::reducei($chars3, array(new _hx_lambda(array(), "thx_TestBitSet_55"), 'execute'), $this4);
		$tmp6 = thx__BitSet_BitSet_Impl_::negate($tmp5);
		$tmp7 = thx__BitSet_BitSet_Impl_::equals($tmp4, $tmp6);
		utest_Assert::isTrue($tmp7, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 195, "className" => "thx.TestBitSet", "methodName" => "testNegate")));
		$chars4 = _hx_explode("", "01010011");
		$this5 = (new _hx_array(array(0)));
		thx_Arrays::resize($this5, 2, 0);
		$tmp8 = thx_Arrays::reducei($chars4, array(new _hx_lambda(array(), "thx_TestBitSet_56"), 'execute'), $this5);
		$chars5 = _hx_explode("", "10101100");
		$this6 = (new _hx_array(array(0)));
		thx_Arrays::resize($this6, 2, 0);
		$tmp9 = thx_Arrays::reducei($chars5, array(new _hx_lambda(array(), "thx_TestBitSet_57"), 'execute'), $this6);
		$tmp10 = thx__BitSet_BitSet_Impl_::negate($tmp9);
		$tmp11 = thx__BitSet_BitSet_Impl_::equals($tmp8, $tmp10);
		utest_Assert::isTrue($tmp11, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 196, "className" => "thx.TestBitSet", "methodName" => "testNegate")));
	}
	public function testClone() {
		$chars = _hx_explode("", "0101");
		$this1 = (new _hx_array(array(0)));
		thx_Arrays::resize($this1, 2, 0);
		$a = thx_Arrays::reducei($chars, array(new _hx_lambda(array(), "thx_TestBitSet_58"), 'execute'), $this1);
		$this2 = $a;
		$tmp = thx_Ints::range(thx__BitSet_BitSet_Impl_::get_length($this2), null, null);
		$this3 = (new _hx_array(array(0)));
		thx_Arrays::resize($this3, 2, 0);
		$b = thx_Arrays::reduce($tmp, array(new _hx_lambda(array(&$this2), "thx_TestBitSet_59"), 'execute'), $this3);
		thx__BitSet_BitSet_Impl_::setAt($b, 0, true);
		$tmp2 = thx__BitSet_BitSet_Impl_::toString($a);
		utest_Assert::same("0101", $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 203, "className" => "thx.TestBitSet", "methodName" => "testClone")));
		$tmp3 = thx__BitSet_BitSet_Impl_::toString($b);
		utest_Assert::same("1101", $tmp3, null, null, null, _hx_anonymous(array("fileName" => "TestBitSet.hx", "lineNumber" => 204, "className" => "thx.TestBitSet", "methodName" => "testClone")));
	}
	function __toString() { return 'thx.TestBitSet'; }
}
function thx_TestBitSet_0(&$bits) {
	{
		thx__BitSet_BitSet_Impl_::at($bits, 0);
	}
}
function thx_TestBitSet_1(&$bits) {
	{
		thx__BitSet_BitSet_Impl_::at($bits, -1);
	}
}
function thx_TestBitSet_2(&$bits) {
	{
		thx__BitSet_BitSet_Impl_::at($bits, 1);
	}
}
function thx_TestBitSet_3(&$bits) {
	{
		thx__BitSet_BitSet_Impl_::at($bits, 4);
	}
}
function thx_TestBitSet_4(&$bits) {
	{
		$tmp9 = thx__BitSet_BitSet_Impl_::get_length($bits) + 1 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		thx__BitSet_BitSet_Impl_::at($bits, $tmp9);
	}
}
function thx_TestBitSet_5($acc, $value, $i) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc, $i, $value);
		return $acc;
	}
}
function thx_TestBitSet_6($acc, $char, $i) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc, $i, $char === "1");
		return $acc;
	}
}
function thx_TestBitSet_7(&$this2, $index) {
	{
		return thx__BitSet_BitSet_Impl_::at($this2, $index);
	}
}
function thx_TestBitSet_8($acc, $char, $i) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc, $i, $char === "1");
		return $acc;
	}
}
function thx_TestBitSet_9($acc, $char, $i) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc, $i, $char === "1");
		return $acc;
	}
}
function thx_TestBitSet_10(&$bits1) {
	{
		thx__BitSet_BitSet_Impl_::at($bits1, 35);
	}
}
function thx_TestBitSet_11(&$bits2) {
	{
		thx__BitSet_BitSet_Impl_::at($bits2, 35);
	}
}
function thx_TestBitSet_12($acc, $char, $i) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc, $i, $char === "1");
		return $acc;
	}
}
function thx_TestBitSet_13($acc1, $char1, $i1) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc1, $i1, $char1 === "1");
		return $acc1;
	}
}
function thx_TestBitSet_14($acc, $char, $i) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc, $i, $char === "1");
		return $acc;
	}
}
function thx_TestBitSet_15($acc, $char, $i) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc, $i, $char === "1");
		return $acc;
	}
}
function thx_TestBitSet_16($acc1, $char1, $i1) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc1, $i1, $char1 === "1");
		return $acc1;
	}
}
function thx_TestBitSet_17($acc2, $char2, $i2) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc2, $i2, $char2 === "1");
		return $acc2;
	}
}
function thx_TestBitSet_18($acc3, $char3, $i3) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc3, $i3, $char3 === "1");
		return $acc3;
	}
}
function thx_TestBitSet_19($acc4, $char4, $i4) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc4, $i4, $char4 === "1");
		return $acc4;
	}
}
function thx_TestBitSet_20($acc, $char, $i) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc, $i, $char === "1");
		return $acc;
	}
}
function thx_TestBitSet_21($acc1, $char1, $i1) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc1, $i1, $char1 === "1");
		return $acc1;
	}
}
function thx_TestBitSet_22($acc2, $char2, $i2) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc2, $i2, $char2 === "1");
		return $acc2;
	}
}
function thx_TestBitSet_23($acc3, $char3, $i3) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc3, $i3, $char3 === "1");
		return $acc3;
	}
}
function thx_TestBitSet_24($acc4, $char4, $i4) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc4, $i4, $char4 === "1");
		return $acc4;
	}
}
function thx_TestBitSet_25($acc, $char, $i) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc, $i, $char === "1");
		return $acc;
	}
}
function thx_TestBitSet_26($acc1, $char1, $i1) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc1, $i1, $char1 === "1");
		return $acc1;
	}
}
function thx_TestBitSet_27($acc2, $char2, $i2) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc2, $i2, $char2 === "1");
		return $acc2;
	}
}
function thx_TestBitSet_28($acc3, $char3, $i3) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc3, $i3, $char3 === "1");
		return $acc3;
	}
}
function thx_TestBitSet_29($acc4, $char4, $i4) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc4, $i4, $char4 === "1");
		return $acc4;
	}
}
function thx_TestBitSet_30($acc5, $char5, $i5) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc5, $i5, $char5 === "1");
		return $acc5;
	}
}
function thx_TestBitSet_31($acc6, $char6, $i6) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc6, $i6, $char6 === "1");
		return $acc6;
	}
}
function thx_TestBitSet_32(&$b1, &$b4) {
	{
		thx__BitSet_BitSet_Impl_::hand($b1, $b4);
	}
}
function thx_TestBitSet_33(&$b1, &$b5) {
	{
		thx__BitSet_BitSet_Impl_::hand($b1, $b5);
	}
}
function thx_TestBitSet_34($acc, $char, $i) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc, $i, $char === "1");
		return $acc;
	}
}
function thx_TestBitSet_35($acc1, $char1, $i1) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc1, $i1, $char1 === "1");
		return $acc1;
	}
}
function thx_TestBitSet_36($acc2, $char2, $i2) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc2, $i2, $char2 === "1");
		return $acc2;
	}
}
function thx_TestBitSet_37($acc3, $char3, $i3) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc3, $i3, $char3 === "1");
		return $acc3;
	}
}
function thx_TestBitSet_38($acc4, $char4, $i4) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc4, $i4, $char4 === "1");
		return $acc4;
	}
}
function thx_TestBitSet_39($acc5, $char5, $i5) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc5, $i5, $char5 === "1");
		return $acc5;
	}
}
function thx_TestBitSet_40($acc6, $char6, $i6) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc6, $i6, $char6 === "1");
		return $acc6;
	}
}
function thx_TestBitSet_41(&$b1, &$b4) {
	{
		thx__BitSet_BitSet_Impl_::hor($b1, $b4);
	}
}
function thx_TestBitSet_42(&$b1, &$b5) {
	{
		thx__BitSet_BitSet_Impl_::hor($b1, $b5);
	}
}
function thx_TestBitSet_43($acc, $char, $i) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc, $i, $char === "1");
		return $acc;
	}
}
function thx_TestBitSet_44($acc1, $char1, $i1) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc1, $i1, $char1 === "1");
		return $acc1;
	}
}
function thx_TestBitSet_45($acc2, $char2, $i2) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc2, $i2, $char2 === "1");
		return $acc2;
	}
}
function thx_TestBitSet_46($acc3, $char3, $i3) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc3, $i3, $char3 === "1");
		return $acc3;
	}
}
function thx_TestBitSet_47($acc4, $char4, $i4) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc4, $i4, $char4 === "1");
		return $acc4;
	}
}
function thx_TestBitSet_48($acc5, $char5, $i5) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc5, $i5, $char5 === "1");
		return $acc5;
	}
}
function thx_TestBitSet_49($acc6, $char6, $i6) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc6, $i6, $char6 === "1");
		return $acc6;
	}
}
function thx_TestBitSet_50(&$b1, &$b4) {
	{
		thx__BitSet_BitSet_Impl_::hxor($b1, $b4);
	}
}
function thx_TestBitSet_51(&$b1, &$b5) {
	{
		thx__BitSet_BitSet_Impl_::hxor($b1, $b5);
	}
}
function thx_TestBitSet_52($acc, $char, $i) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc, $i, $char === "1");
		return $acc;
	}
}
function thx_TestBitSet_53($acc1, $char1, $i1) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc1, $i1, $char1 === "1");
		return $acc1;
	}
}
function thx_TestBitSet_54($acc2, $char2, $i2) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc2, $i2, $char2 === "1");
		return $acc2;
	}
}
function thx_TestBitSet_55($acc3, $char3, $i3) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc3, $i3, $char3 === "1");
		return $acc3;
	}
}
function thx_TestBitSet_56($acc4, $char4, $i4) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc4, $i4, $char4 === "1");
		return $acc4;
	}
}
function thx_TestBitSet_57($acc5, $char5, $i5) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc5, $i5, $char5 === "1");
		return $acc5;
	}
}
function thx_TestBitSet_58($acc, $char, $i) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc, $i, $char === "1");
		return $acc;
	}
}
function thx_TestBitSet_59(&$this2, $acc1, $i1) {
	{
		$tmp1 = thx__BitSet_BitSet_Impl_::at($this2, $i1);
		thx__BitSet_BitSet_Impl_::setAt($acc1, $i1, $tmp1);
		return $acc1;
	}
}
