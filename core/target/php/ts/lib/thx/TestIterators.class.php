<?php

// Generated by Haxe 3.3.0
class thx_TestIterators {
	public function __construct() {}
	public function testEquals() {
		$a = (new _hx_array(array(1, 2, 3)));
		$b = (new _hx_array(array(1, 2)));
		$c = (new _hx_array(array(1, 2, 4)));
		$tmp = $a->iterator();
		$tmp1 = $a->iterator();
		$tmp2 = thx_Iterators::equals($tmp, $tmp1, null);
		utest_Assert::isTrue($tmp2, null, _hx_anonymous(array("fileName" => "TestIterators.hx", "lineNumber" => 19, "className" => "thx.TestIterators", "methodName" => "testEquals")));
		$tmp3 = $a->iterator();
		$tmp4 = $b->iterator();
		$tmp5 = thx_Iterators::equals($tmp3, $tmp4, null);
		utest_Assert::isFalse($tmp5, null, _hx_anonymous(array("fileName" => "TestIterators.hx", "lineNumber" => 20, "className" => "thx.TestIterators", "methodName" => "testEquals")));
		$tmp6 = $a->iterator();
		$tmp7 = $c->iterator();
		$tmp8 = thx_Iterators::equals($tmp6, $tmp7, null);
		utest_Assert::isFalse($tmp8, null, _hx_anonymous(array("fileName" => "TestIterators.hx", "lineNumber" => 21, "className" => "thx.TestIterators", "methodName" => "testEquals")));
	}
	public function testReduce() {
		$tmp = _hx_deref((new _hx_array(array(2, 3, 5, 7))))->iterator();
		$tmp1 = thx_Iterators::reduce($tmp, array(new _hx_lambda(array(), "thx_TestIterators_0"), 'execute'), 0);
		utest_Assert::equals(17, $tmp1, null, _hx_anonymous(array("fileName" => "TestIterators.hx", "lineNumber" => 26, "className" => "thx.TestIterators", "methodName" => "testReduce")));
	}
	function __toString() { return 'thx.TestIterators'; }
}
function thx_TestIterators_0($a, $b) {
	{
		return $a + $b;
	}
}
