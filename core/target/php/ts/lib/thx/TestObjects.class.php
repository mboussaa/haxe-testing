<?php

// Generated by Haxe 3.3.0
class thx_TestObjects {
	public function __construct() {}
	public function testIssue20151201() {
		$s = thx_Objects::string(_hx_anonymous(array("oldId" => "1", "newId" => "2")));
		utest_Assert::stringContains("oldId : \"1\"", $s, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 18, "className" => "thx.TestObjects", "methodName" => "testIssue20151201")));
		utest_Assert::stringContains("newId : \"2\"", $s, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 19, "className" => "thx.TestObjects", "methodName" => "testIssue20151201")));
		utest_Assert::stringContains(", ", $s, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 20, "className" => "thx.TestObjects", "methodName" => "testIssue20151201")));
		$tmp = StringTools::startsWith($s, "{");
		utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 21, "className" => "thx.TestObjects", "methodName" => "testIssue20151201")));
		$tmp1 = StringTools::endsWith($s, "}");
		utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 22, "className" => "thx.TestObjects", "methodName" => "testIssue20151201")));
	}
	public function testObjects() {
		$ob = _hx_anonymous(array());
		$tmp = Reflect::fields($ob)->length === 0;
		utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 27, "className" => "thx.TestObjects", "methodName" => "testObjects")));
		$tmp1 = Reflect::fields($ob);
		utest_Assert::same((new _hx_array(array())), $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 28, "className" => "thx.TestObjects", "methodName" => "testObjects")));
		$ob1 = _hx_anonymous(array("a" => "A", "b" => "B"));
		$tmp2 = Reflect::fields($ob1)->length === 0;
		utest_Assert::isFalse($tmp2, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 31, "className" => "thx.TestObjects", "methodName" => "testObjects")));
		$fields = Reflect::fields($ob1);
		$tmp3 = $fields->remove("a");
		utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 34, "className" => "thx.TestObjects", "methodName" => "testObjects")));
		$tmp4 = $fields->remove("b");
		utest_Assert::isTrue($tmp4, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 35, "className" => "thx.TestObjects", "methodName" => "testObjects")));
		utest_Assert::equals(0, $fields->length, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 36, "className" => "thx.TestObjects", "methodName" => "testObjects")));
		$o = $ob1;
		$values = Reflect::fields($o)->map(array(new _hx_lambda(array(&$o), "thx_TestObjects_0"), 'execute'));
		$tmp5 = $values->remove("A");
		utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 39, "className" => "thx.TestObjects", "methodName" => "testObjects")));
		$tmp6 = $values->remove("B");
		utest_Assert::isTrue($tmp6, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 40, "className" => "thx.TestObjects", "methodName" => "testObjects")));
		utest_Assert::equals(0, $values->length, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 41, "className" => "thx.TestObjects", "methodName" => "testObjects")));
		$tuples = thx_Objects::tuples($ob1);
		$tuples->sort(array(new _hx_lambda(array(), "thx_TestObjects_1"), 'execute'));
		utest_Assert::same((new _hx_array(array(_hx_anonymous(array("_0" => "a", "_1" => "A")), _hx_anonymous(array("_0" => "b", "_1" => "B"))))), $tuples, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 47, "className" => "thx.TestObjects", "methodName" => "testObjects")));
	}
	public function testAssign() {
		$o = _hx_anonymous(array("name" => "Franco", "age" => 19));
		$out = thx_Objects::assign($o, _hx_anonymous(array("foo" => "bar", "name" => "Michael", "age" => "Two")), null);
		utest_Assert::same("Michael", $out->name, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 53, "className" => "thx.TestObjects", "methodName" => "testAssign")));
		utest_Assert::same("Two", $out->age, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 54, "className" => "thx.TestObjects", "methodName" => "testAssign")));
		utest_Assert::same("bar", $out->foo, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 55, "className" => "thx.TestObjects", "methodName" => "testAssign")));
		{
			$_g = 0;
			$_g1 = Reflect::fields($out);
			while($_g < $_g1->length) {
				$field = $_g1[$_g];
				++$_g;
				$tmp = Reflect::field($out, $field);
				$tmp1 = Reflect::field($o, $field);
				utest_Assert::same($tmp, $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 58, "className" => "thx.TestObjects", "methodName" => "testAssign")));
				unset($tmp1,$tmp,$field);
			}
		}
	}
	public function testCombine() {
		$o = _hx_anonymous(array("name" => "Franco", "age" => 19));
		$out = thx_Objects::combine($o, _hx_anonymous(array("foo" => "bar", "name" => "Michael", "age" => "Two")));
		utest_Assert::same("Michael", $out->name, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 66, "className" => "thx.TestObjects", "methodName" => "testCombine")));
		utest_Assert::same("Two", $out->age, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 67, "className" => "thx.TestObjects", "methodName" => "testCombine")));
		utest_Assert::same("bar", $out->foo, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 68, "className" => "thx.TestObjects", "methodName" => "testCombine")));
		utest_Assert::same("Franco", $o->name, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 69, "className" => "thx.TestObjects", "methodName" => "testCombine")));
	}
	public function testMergeWithNullable() {
		$a = thx_Objects::combine(_hx_anonymous(array("foo" => "baz", "bar" => "qux")), _hx_anonymous(array()));
		utest_Assert::same("baz", $a->foo, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 81, "className" => "thx.TestObjects", "methodName" => "testMergeWithNullable")));
	}
	public function testMergeWithTypedef() {
		$to = _hx_anonymous(array("bar" => "qux"));
		$from = _hx_anonymous(array("foo" => "baz", "extra" => "field"));
		$merged = thx_Objects::combine($to, $from);
		utest_Assert::same($merged->foo, $from->foo, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 95, "className" => "thx.TestObjects", "methodName" => "testMergeWithTypedef")));
		utest_Assert::same($merged->bar, $to->bar, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 96, "className" => "thx.TestObjects", "methodName" => "testMergeWithTypedef")));
		$tmp = Reflect::field($merged, "extra");
		utest_Assert::same($tmp, "field", null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 97, "className" => "thx.TestObjects", "methodName" => "testMergeWithTypedef")));
	}
	public function testHasPath() {
		$o = _hx_anonymous(array("key1" => _hx_anonymous(array("key2" => 123, "key3" => "abc", "key4" => (new _hx_array(array("one", "two"))), "key5" => (new _hx_array(array(_hx_anonymous(array("key6" => "test1")), _hx_anonymous(array("key6" => "test2"))))), "key6" => null))));
		$tmp = thx_Objects::hasPath($o, "key1.key2");
		utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 117, "className" => "thx.TestObjects", "methodName" => "testHasPath")));
		$tmp1 = thx_Objects::hasPath($o, "key1.key4.1");
		utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 118, "className" => "thx.TestObjects", "methodName" => "testHasPath")));
		$tmp2 = thx_Objects::hasPath($o, "key1.key6");
		utest_Assert::isTrue($tmp2, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 119, "className" => "thx.TestObjects", "methodName" => "testHasPath")));
		$tmp3 = thx_Objects::hasPath($o, "key1.key4.2");
		utest_Assert::isFalse($tmp3, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 121, "className" => "thx.TestObjects", "methodName" => "testHasPath")));
		$tmp4 = thx_Objects::hasPath($o, "key1.key7");
		utest_Assert::isFalse($tmp4, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 122, "className" => "thx.TestObjects", "methodName" => "testHasPath")));
	}
	public function testHasPathValue() {
		$o = _hx_anonymous(array("key1" => _hx_anonymous(array("key2" => 123, "key3" => "abc", "key4" => (new _hx_array(array("one", "two", null))), "key5" => (new _hx_array(array(_hx_anonymous(array("key6" => "test1")), _hx_anonymous(array("key6" => "test2"))))), "key6" => null))));
		$tmp = thx_Objects::hasPathValue($o, "key1.key6");
		utest_Assert::isFalse($tmp, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 143, "className" => "thx.TestObjects", "methodName" => "testHasPathValue")));
		$tmp1 = thx_Objects::hasPathValue($o, "key1.key4.2");
		utest_Assert::isFalse($tmp1, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 144, "className" => "thx.TestObjects", "methodName" => "testHasPathValue")));
		$tmp2 = thx_Objects::hasPathValue($o, "key1.key7");
		utest_Assert::isFalse($tmp2, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 145, "className" => "thx.TestObjects", "methodName" => "testHasPathValue")));
	}
	public function testGetPath() {
		$o = _hx_anonymous(array("key1" => _hx_anonymous(array("key2" => 123, "key3" => "abc", "key4" => (new _hx_array(array("one", "two"))), "key5" => (new _hx_array(array(_hx_anonymous(array("key6" => "test1")), _hx_anonymous(array("key6" => "test2")))))))));
		$tmp = thx_Objects::getPath($o, "key1.key2");
		utest_Assert::same(123, $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 163, "className" => "thx.TestObjects", "methodName" => "testGetPath")));
		$tmp1 = thx_Objects::getPath($o, "key1.key3");
		utest_Assert::same("abc", $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 164, "className" => "thx.TestObjects", "methodName" => "testGetPath")));
		$tmp2 = thx_Objects::getPath($o, "key1.key4.0");
		utest_Assert::same("one", $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 165, "className" => "thx.TestObjects", "methodName" => "testGetPath")));
		$tmp3 = thx_Objects::getPath($o, "key1.key4.1");
		utest_Assert::same("two", $tmp3, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 166, "className" => "thx.TestObjects", "methodName" => "testGetPath")));
		$tmp4 = thx_Objects::getPath($o, "key1.key5");
		utest_Assert::same((new _hx_array(array(_hx_anonymous(array("key6" => "test1")), _hx_anonymous(array("key6" => "test2"))))), $tmp4, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 167, "className" => "thx.TestObjects", "methodName" => "testGetPath")));
		$tmp5 = thx_Objects::getPath($o, "key1.key5.0.key6");
		utest_Assert::same("test1", $tmp5, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 168, "className" => "thx.TestObjects", "methodName" => "testGetPath")));
		$tmp6 = thx_Objects::getPath($o, "key1.key5.1.key6");
		utest_Assert::same("test2", $tmp6, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 169, "className" => "thx.TestObjects", "methodName" => "testGetPath")));
		$tmp7 = thx_Objects::getPath($o, "");
		utest_Assert::isNull($tmp7, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 171, "className" => "thx.TestObjects", "methodName" => "testGetPath")));
		$tmp8 = thx_Objects::getPath($o, "bad");
		utest_Assert::isNull($tmp8, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 172, "className" => "thx.TestObjects", "methodName" => "testGetPath")));
		$tmp9 = thx_Objects::getPath($o, "bad.key");
		utest_Assert::isNull($tmp9, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 173, "className" => "thx.TestObjects", "methodName" => "testGetPath")));
	}
	public function testSetPath() {
		$tmp = thx_Objects::setPath(_hx_anonymous(array()), "key", "val");
		utest_Assert::same(_hx_anonymous(array("key" => "val")), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 177, "className" => "thx.TestObjects", "methodName" => "testSetPath")));
		$tmp1 = thx_Objects::setPath(_hx_anonymous(array()), "key1", "val1");
		$tmp2 = thx_Objects::setPath($tmp1, "key2", "val2");
		utest_Assert::same(_hx_anonymous(array("key1" => "val1", "key2" => "val2")), $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 178, "className" => "thx.TestObjects", "methodName" => "testSetPath")));
		$tmp3 = thx_Objects::setPath(_hx_anonymous(array()), "key1.key2", "val");
		utest_Assert::same(_hx_anonymous(array("key1" => _hx_anonymous(array("key2" => "val")))), $tmp3, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 179, "className" => "thx.TestObjects", "methodName" => "testSetPath")));
		$tmp4 = thx_Objects::setPath(_hx_anonymous(array()), "key1.0.key2", "val");
		utest_Assert::same(_hx_anonymous(array("key1" => (new _hx_array(array(_hx_anonymous(array("key2" => "val"))))))), $tmp4, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 180, "className" => "thx.TestObjects", "methodName" => "testSetPath")));
		$tmp5 = thx_Objects::setPath(_hx_anonymous(array()), "key1.0.0.1", 123);
		utest_Assert::same(_hx_anonymous(array("key1" => (new _hx_array(array((new _hx_array(array((new _hx_array(array(null, 123))))))))))), $tmp5, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 181, "className" => "thx.TestObjects", "methodName" => "testSetPath")));
		$tmp6 = thx_Objects::setPath(_hx_anonymous(array()), "key1.0.0.1.key2", "val");
		utest_Assert::same(_hx_anonymous(array("key1" => (new _hx_array(array((new _hx_array(array((new _hx_array(array(null, _hx_anonymous(array("key2" => "val"))))))))))))), $tmp6, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 182, "className" => "thx.TestObjects", "methodName" => "testSetPath")));
		$tmp7 = thx_Objects::setPath(_hx_anonymous(array("key" => "before")), "key", "val");
		utest_Assert::same(_hx_anonymous(array("key" => "val")), $tmp7, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 184, "className" => "thx.TestObjects", "methodName" => "testSetPath")));
		$tmp8 = thx_Objects::setPath(_hx_anonymous(array("key1" => _hx_anonymous(array("key2" => "before")))), "key1.key2", "val");
		utest_Assert::same(_hx_anonymous(array("key1" => _hx_anonymous(array("key2" => "val")))), $tmp8, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 185, "className" => "thx.TestObjects", "methodName" => "testSetPath")));
		$tmp9 = thx_Objects::setPath(_hx_anonymous(array("key1" => _hx_anonymous(array("key2" => (new _hx_array(array(1, 2, 3))))))), "key1.key2.1", 55);
		utest_Assert::same(_hx_anonymous(array("key1" => _hx_anonymous(array("key2" => (new _hx_array(array(1, 55, 3))))))), $tmp9, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 186, "className" => "thx.TestObjects", "methodName" => "testSetPath")));
		$tmp10 = thx_Objects::setPath(_hx_anonymous(array("key1" => 123)), "newKey", "val");
		utest_Assert::same(_hx_anonymous(array("key1" => 123, "newKey" => "val")), $tmp10, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 187, "className" => "thx.TestObjects", "methodName" => "testSetPath")));
		$tmp11 = thx_Objects::setPath((new _hx_array(array())), "*", 1);
		$tmp12 = thx_Objects::setPath($tmp11, "*", 2);
		utest_Assert::same((new _hx_array(array(1, 2))), $tmp12, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 189, "className" => "thx.TestObjects", "methodName" => "testSetPath")));
		$tmp13 = thx_Objects::setPath(_hx_anonymous(array()), "list.*", 1);
		$tmp14 = thx_Objects::setPath($tmp13, "list.*", 2);
		utest_Assert::same(_hx_anonymous(array("list" => (new _hx_array(array(1, 2))))), $tmp14, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 190, "className" => "thx.TestObjects", "methodName" => "testSetPath")));
		$tmp15 = thx_Objects::setPath((new _hx_array(array())), "0.*", 1);
		$tmp16 = thx_Objects::setPath($tmp15, "0.*", 2);
		utest_Assert::same((new _hx_array(array((new _hx_array(array(1, 2)))))), $tmp16, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 191, "className" => "thx.TestObjects", "methodName" => "testSetPath")));
		$tmp17 = thx_Objects::setPath((new _hx_array(array())), "0.*", 1);
		$tmp18 = thx_Objects::setPath($tmp17, "*.*", 2);
		utest_Assert::same((new _hx_array(array((new _hx_array(array(1))), (new _hx_array(array(2)))))), $tmp18, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 192, "className" => "thx.TestObjects", "methodName" => "testSetPath")));
	}
	public function testRemovePath() {
		$simple = _hx_anonymous(array("foo" => "bar"));
		$nested = _hx_anonymous(array("foo" => _hx_anonymous(array("bar" => _hx_anonymous(array("baz" => "qux", "other" => "other"))))));
		$arr = _hx_anonymous(array("foo" => (new _hx_array(array(_hx_anonymous(array()), _hx_anonymous(array("bar" => "baz")))))));
		$tmp = thx_Objects::removePath($simple, "foo");
		utest_Assert::same(_hx_anonymous(array()), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 211, "className" => "thx.TestObjects", "methodName" => "testRemovePath")));
		utest_Assert::same(_hx_anonymous(array()), $simple, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 212, "className" => "thx.TestObjects", "methodName" => "testRemovePath")));
		$tmp1 = thx_Objects::removePath($simple, "a.b.c.d");
		utest_Assert::same($simple, $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 213, "className" => "thx.TestObjects", "methodName" => "testRemovePath")));
		$tmp2 = thx_Objects::removePath($nested, "foo.bar.other");
		utest_Assert::same(_hx_anonymous(array("foo" => _hx_anonymous(array("bar" => _hx_anonymous(array("baz" => "qux")))))), $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 215, "className" => "thx.TestObjects", "methodName" => "testRemovePath")));
		$tmp3 = thx_Objects::removePath($arr, "foo.0.bar");
		utest_Assert::same($arr, $tmp3, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 217, "className" => "thx.TestObjects", "methodName" => "testRemovePath")));
		$tmp4 = thx_Objects::removePath($arr, "foo.1.bar");
		utest_Assert::same(_hx_anonymous(array("foo" => (new _hx_array(array(_hx_anonymous(array()), _hx_anonymous(array())))))), $tmp4, null, null, null, _hx_anonymous(array("fileName" => "TestObjects.hx", "lineNumber" => 218, "className" => "thx.TestObjects", "methodName" => "testRemovePath")));
	}
	function __toString() { return 'thx.TestObjects'; }
}
function thx_TestObjects_0(&$o, $key) {
	{
		return Reflect::field($o, $key);
	}
}
function thx_TestObjects_1($a, $b) {
	{
		return haxe_Utf8::compare($a->_0, $b->_0);
	}
}
