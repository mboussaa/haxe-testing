<?php

// Generated by Haxe 3.3.0
class Reflect {
	public function __construct(){}
	static function field($o, $field) {
		return _hx_field($o, $field);
	}
	static function callMethod($o, $func, $args) {
		return call_user_func_array(((is_callable($func)) ? $func : array($o, $func)), ((null === $args) ? array() : $args->a));
	}
	static function fields($o) {
		if($o === null) {
			return new _hx_array(array());
		}
		$tmp = $o instanceof _hx_array;
		if($tmp) {
			return new _hx_array(array('concat','copy','insert','iterator','length','join','pop','push','remove','reverse','shift','slice','sort','splice','toString','unshift'));
		} else {
			$tmp1 = is_string($o);
			if($tmp1) {
				return new _hx_array(array('charAt','charCodeAt','indexOf','lastIndexOf','length','split','substr','toLowerCase','toString','toUpperCase'));
			} else {
				return new _hx_array(_hx_get_object_vars($o));
			}
		}
	}
	static function isFunction($f) {
		$tmp = !(is_array($f) && is_callable($f)) || _hx_is_lambda($f);
		if($tmp) {
			$tmp1 = null;
			$tmp2 = is_array($f);
			if($tmp2) {
				$o = $f[0];
				$field = $f[1];
				$tmp1 = _hx_has_field($o, $field);
			} else {
				$tmp1 = false;
			}
			if($tmp1) {
				$tmp3 = $f[1];
				return $tmp3 !== "length";
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	static function compare($a, $b) {
		if((is_object($_t = $a) && ($_t instanceof Enum) ? $_t == $b : _hx_equal($_t, $b))) {
			return 0;
		} else {
			$tmp = is_string($a);
			if($tmp) {
				return strcmp($a, $b);
			} else {
				if($a > $b) {
					return 1;
				} else {
					return -1;
				}
			}
		}
	}
	static function compareMethods($f1, $f2) {
		$tmp = null;
		$tmp1 = is_array($f1);
		if($tmp1) {
			$tmp = is_array($f1);
		} else {
			$tmp = false;
		}
		if($tmp) {
			return $f1[0] === $f2[0] && $f1[1] == $f2[1];
		}
		$tmp2 = null;
		$tmp3 = is_string($f1);
		if($tmp3) {
			$tmp2 = is_string($f2);
		} else {
			$tmp2 = false;
		}
		if($tmp2) {
			return _hx_equal($f1, $f2);
		}
		return false;
	}
	static function isObject($v) {
		if($v === null) {
			return false;
		}
		$tmp = is_object($v);
		if($tmp) {
			$tmp1 = null;
			$tmp2 = !$v instanceof _hx_anonymous;
			if($tmp2) {
				$tmp3 = Type::getClass($v);
				$tmp1 = $tmp3 !== null;
			} else {
				$tmp1 = true;
			}
			if(!$tmp1) {
				$tmp4 = !$v instanceof _hx_class;
				if($tmp4) {
					return $v instanceof _hx_enum;
				} else {
					return true;
				}
			} else {
				return true;
			}
		}
		return is_string($v) && !_hx_is_lambda($v);
	}
	function __toString() { return 'Reflect'; }
}
