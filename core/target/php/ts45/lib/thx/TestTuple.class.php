<?php

// Generated by Haxe 3.3.0
class thx_TestTuple {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testTuple0() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			utest_Assert::equals(thx_Nil::$nil, thx_Nil::$nil, null, _hx_anonymous(array("fileName" => "TestTuple.hx", "lineNumber" => 16, "className" => "thx.TestTuple", "methodName" => "testTuple0")));
		}
	}
	public function testTuple1() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			utest_Assert::equals("thx", "thx", null, _hx_anonymous(array("fileName" => "TestTuple.hx", "lineNumber" => 22, "className" => "thx.TestTuple", "methodName" => "testTuple1")));
		}
	}
	public function testTuple2() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$t = _hx_anonymous(array("_0" => "thx", "_1" => 7));
			utest_Assert::equals("thx", $t->_0, null, _hx_anonymous(array("fileName" => "TestTuple.hx", "lineNumber" => 28, "className" => "thx.TestTuple", "methodName" => "testTuple2")));
			utest_Assert::equals(7, $t->_1, null, _hx_anonymous(array("fileName" => "TestTuple.hx", "lineNumber" => 29, "className" => "thx.TestTuple", "methodName" => "testTuple2")));
			utest_Assert::equals("thx", $t->_0, null, _hx_anonymous(array("fileName" => "TestTuple.hx", "lineNumber" => 30, "className" => "thx.TestTuple", "methodName" => "testTuple2")));
			utest_Assert::equals(7, $t->_1, null, _hx_anonymous(array("fileName" => "TestTuple.hx", "lineNumber" => 31, "className" => "thx.TestTuple", "methodName" => "testTuple2")));
			unset($t);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.TestTuple'; }
}
