<?php

// Generated by Haxe 3.3.0
class thx_fp_ComparableOrdMap {
	public function __construct(){}
	static function exists($map, $key) {
		$tmp = thx__Ord_Ord_Impl_::forComparableOrd();
		$tmp1 = thx_fp__Map_Map_Impl_::lookup($map, $key, $tmp);
		return thx_Options::toBool($tmp1);
	}
	static function get($map, $key) {
		$tmp = thx__Ord_Ord_Impl_::forComparableOrd();
		return thx_fp__Map_Map_Impl_::lookup($map, $key, $tmp);
	}
	static function getAlt($map, $key, $alt) {
		$tmp = thx__Ord_Ord_Impl_::forComparableOrd();
		$tmp1 = thx_fp__Map_Map_Impl_::lookup($map, $key, $tmp);
		return thx_Options::getOrElse($tmp1, $alt);
	}
	static function set($map, $key, $value) {
		$tmp = thx__Ord_Ord_Impl_::forComparableOrd();
		return thx_fp__Map_Map_Impl_::insert($map, $key, $value, $tmp);
	}
	static function remove($map, $key) {
		$tmp = thx__Ord_Ord_Impl_::forComparableOrd();
		return thx_fp__Map_Map_Impl_::delete($map, $key, $tmp);
	}
	static function fromNative($map) {
		$tmp = thx__Ord_Ord_Impl_::forComparableOrd();
		return thx_fp__Map_Map_Impl_::fromNative($map, $tmp);
	}
	static function merge($a, $b) {
		return thx_fp__Map_Map_Impl_::foldLeftTuples($b, $a, array(new _hx_lambda(array(), "thx_fp_ComparableOrdMap_0"), 'execute'));
	}
	function __toString() { return 'thx.fp.ComparableOrdMap'; }
}
function thx_fp_ComparableOrdMap_0($acc, $t) {
	{
		$tmp = thx__Ord_Ord_Impl_::forComparableOrd();
		return thx_fp__Map_Map_Impl_::insert($acc, $t->_0, $t->_1, $tmp);
	}
}
