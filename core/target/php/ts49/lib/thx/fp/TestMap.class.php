<?php

// Generated by Haxe 3.3.0
class thx_fp_TestMap {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testRemove() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$map = thx_fp_MapImpl::Bin(1, "Y", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip);
			$map1 = thx_fp__Map_Map_Impl_::insert($map, "X", 2, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
			$map2 = thx_fp__Map_Map_Impl_::insert($map1, "Z", 3, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
			$m = thx_fp__Map_Map_Impl_::delete($map2, "X", (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
			$tmp = haxe_ds_Option::Some(1);
			$tmp1 = thx_fp__Map_Map_Impl_::lookup($m, "Y", (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
			utest_Assert::same($tmp, $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 22, "className" => "thx.fp.TestMap", "methodName" => "testRemove")));
			$tmp2 = haxe_ds_Option::Some(3);
			$tmp3 = thx_fp__Map_Map_Impl_::lookup($m, "Z", (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
			utest_Assert::same($tmp2, $tmp3, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 23, "className" => "thx.fp.TestMap", "methodName" => "testRemove")));
			utest_Assert::equals(2, thx_fp__Map_Map_Impl_::size($m), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 24, "className" => "thx.fp.TestMap", "methodName" => "testRemove")));
			unset($tmp3,$tmp2,$tmp1,$tmp,$map2,$map1,$map,$m);
		}
	}
	public function testEmpty() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$m = thx_fp_MapImpl::$Tip;
			$tmp = thx_fp__Map_Map_Impl_::lookup($m, "some", (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
			utest_Assert::same(haxe_ds_Option::$None, $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 30, "className" => "thx.fp.TestMap", "methodName" => "testEmpty")));
			utest_Assert::equals(0, thx_fp__Map_Map_Impl_::size($m), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 31, "className" => "thx.fp.TestMap", "methodName" => "testEmpty")));
			unset($tmp,$m);
		}
	}
	public function testSizes() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$map = thx_fp_MapImpl::Bin(1, "B", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip);
			$map1 = thx_fp__Map_Map_Impl_::insert($map, "A", 1, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
			$tmp = thx_fp__Map_Map_Impl_::insert($map1, "C", 1, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
			utest_Assert::equals(3, thx_fp__Map_Map_Impl_::size($tmp), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 36, "className" => "thx.fp.TestMap", "methodName" => "testSizes")));
			$map2 = thx_fp_MapImpl::Bin(1, "A", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip);
			$map3 = thx_fp__Map_Map_Impl_::insert($map2, "B", 1, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
			$tmp1 = thx_fp__Map_Map_Impl_::insert($map3, "C", 1, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
			utest_Assert::equals(3, thx_fp__Map_Map_Impl_::size($tmp1), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 37, "className" => "thx.fp.TestMap", "methodName" => "testSizes")));
			$map4 = thx_fp_MapImpl::Bin(1, "C", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip);
			$map5 = thx_fp__Map_Map_Impl_::insert($map4, "B", 1, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
			$tmp2 = thx_fp__Map_Map_Impl_::insert($map5, "A", 1, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
			utest_Assert::equals(3, thx_fp__Map_Map_Impl_::size($tmp2), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 38, "className" => "thx.fp.TestMap", "methodName" => "testSizes")));
			$map6 = thx_fp_MapImpl::Bin(1, "B", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip);
			$map7 = thx_fp__Map_Map_Impl_::insert($map6, "C", 1, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
			$tmp3 = thx_fp__Map_Map_Impl_::insert($map7, "A", 1, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
			utest_Assert::equals(3, thx_fp__Map_Map_Impl_::size($tmp3), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 39, "className" => "thx.fp.TestMap", "methodName" => "testSizes")));
			$map8 = thx_fp_MapImpl::Bin(1, "C", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip);
			$map9 = thx_fp__Map_Map_Impl_::insert($map8, "A", 1, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
			$tmp4 = thx_fp__Map_Map_Impl_::insert($map9, "B", 1, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
			utest_Assert::equals(3, thx_fp__Map_Map_Impl_::size($tmp4), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 40, "className" => "thx.fp.TestMap", "methodName" => "testSizes")));
			$map10 = thx_fp_MapImpl::Bin(1, "A", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip);
			$map11 = thx_fp__Map_Map_Impl_::insert($map10, "C", 1, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
			$tmp5 = thx_fp__Map_Map_Impl_::insert($map11, "B", 1, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
			utest_Assert::equals(3, thx_fp__Map_Map_Impl_::size($tmp5), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 41, "className" => "thx.fp.TestMap", "methodName" => "testSizes")));
			$map12 = thx_fp_MapImpl::Bin(1, "A", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip);
			$map13 = thx_fp__Map_Map_Impl_::insert($map12, "A", 1, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
			$tmp6 = thx_fp__Map_Map_Impl_::insert($map13, "A", 1, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
			utest_Assert::equals(1, thx_fp__Map_Map_Impl_::size($tmp6), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 43, "className" => "thx.fp.TestMap", "methodName" => "testSizes")));
			unset($tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$map9,$map8,$map7,$map6,$map5,$map4,$map3,$map2,$map13,$map12,$map11,$map10,$map1,$map);
		}
	}
	public function testFoldLeft() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$map = thx_fp_MapImpl::Bin(1, "A", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip);
			$map1 = thx_fp__Map_Map_Impl_::insert($map, "B", 2, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
			$map2 = thx_fp__Map_Map_Impl_::insert($map1, "C", 3, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
			$arr = thx_fp__Map_Map_Impl_::foldLeft($map2, (new _hx_array(array())), array(new _hx_lambda(array(), "thx_fp_TestMap_0"), 'execute'));
			$tmp = thx_Arrays::order($arr, (isset(thx_Ints::$compare) ? thx_Ints::$compare: array("thx_Ints", "compare")));
			utest_Assert::same((new _hx_array(array(1, 2, 3))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 53, "className" => "thx.fp.TestMap", "methodName" => "testFoldLeft")));
			unset($tmp,$map2,$map1,$map,$arr);
		}
	}
	public function testFoldLeftKeys() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$map = thx_fp_MapImpl::Bin(1, "A", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip);
			$map1 = thx_fp__Map_Map_Impl_::insert($map, "B", 2, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
			$map2 = thx_fp__Map_Map_Impl_::insert($map1, "C", 3, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
			$arr = thx_fp__Map_Map_Impl_::foldLeftKeys($map2, (new _hx_array(array())), array(new _hx_lambda(array(), "thx_fp_TestMap_1"), 'execute'));
			$tmp = thx_Arrays::order($arr, (isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
			utest_Assert::same((new _hx_array(array("A", "B", "C"))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 63, "className" => "thx.fp.TestMap", "methodName" => "testFoldLeftKeys")));
			unset($tmp,$map2,$map1,$map,$arr);
		}
	}
	public function testSet() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$map = thx_fp_MapImpl::Bin(1, "Y", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip);
			$map1 = thx_fp__Map_Map_Impl_::insert($map, "X", 2, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
			$m = thx_fp__Map_Map_Impl_::insert($map1, "Z", 3, (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
			$tmp = haxe_ds_Option::Some(2);
			$tmp1 = thx_fp__Map_Map_Impl_::lookup($m, "X", (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
			utest_Assert::same($tmp, $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 69, "className" => "thx.fp.TestMap", "methodName" => "testSet")));
			$tmp2 = haxe_ds_Option::Some(1);
			$tmp3 = thx_fp__Map_Map_Impl_::lookup($m, "Y", (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
			utest_Assert::same($tmp2, $tmp3, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 70, "className" => "thx.fp.TestMap", "methodName" => "testSet")));
			$tmp4 = haxe_ds_Option::Some(3);
			$tmp5 = thx_fp__Map_Map_Impl_::lookup($m, "Z", (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
			utest_Assert::same($tmp4, $tmp5, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 71, "className" => "thx.fp.TestMap", "methodName" => "testSet")));
			utest_Assert::equals(3, thx_fp__Map_Map_Impl_::size($m), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 72, "className" => "thx.fp.TestMap", "methodName" => "testSet")));
			unset($tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$map1,$map,$m);
		}
	}
	public function testObjectSet() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$a = new thx_fp_CO("a");
			$b = new thx_fp_CO("b");
			$c = new thx_fp_CO("c");
			$map = thx_fp_MapImpl::Bin(1, $a, 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip);
			$tmp = thx__Ord_Ord_Impl_::forComparableOrd();
			$map1 = thx_fp__Map_Map_Impl_::insert($map, $b, 2, $tmp);
			$tmp1 = thx__Ord_Ord_Impl_::forComparableOrd();
			$m = thx_fp__Map_Map_Impl_::insert($map1, $c, 3, $tmp1);
			$tmp2 = haxe_ds_Option::Some(1);
			$tmp3 = thx__Ord_Ord_Impl_::forComparableOrd();
			$tmp4 = thx_fp__Map_Map_Impl_::lookup($m, $a, $tmp3);
			utest_Assert::same($tmp2, $tmp4, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 84, "className" => "thx.fp.TestMap", "methodName" => "testObjectSet")));
			$tmp5 = haxe_ds_Option::Some(2);
			$tmp6 = thx__Ord_Ord_Impl_::forComparableOrd();
			$tmp7 = thx_fp__Map_Map_Impl_::lookup($m, $b, $tmp6);
			utest_Assert::same($tmp5, $tmp7, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 85, "className" => "thx.fp.TestMap", "methodName" => "testObjectSet")));
			$tmp8 = haxe_ds_Option::Some(3);
			$tmp9 = thx__Ord_Ord_Impl_::forComparableOrd();
			$tmp10 = thx_fp__Map_Map_Impl_::lookup($m, $c, $tmp9);
			utest_Assert::same($tmp8, $tmp10, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 86, "className" => "thx.fp.TestMap", "methodName" => "testObjectSet")));
			utest_Assert::equals(3, thx_fp__Map_Map_Impl_::size($m), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 87, "className" => "thx.fp.TestMap", "methodName" => "testObjectSet")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp10,$tmp1,$tmp,$map1,$map,$m,$c,$b,$a);
		}
	}
	public function testObjectSet2() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$a = new thx_fp_CO2("a");
			$b = new thx_fp_CO2("b");
			$c = new thx_fp_CO2("c");
			$map = thx_fp_MapImpl::Bin(1, $a, 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip);
			$tmp = thx__Ord_Ord_Impl_::forComparable();
			$map1 = thx_fp__Map_Map_Impl_::insert($map, $b, 2, $tmp);
			$tmp1 = thx__Ord_Ord_Impl_::forComparable();
			$m = thx_fp__Map_Map_Impl_::insert($map1, $c, 3, $tmp1);
			$tmp2 = haxe_ds_Option::Some(1);
			$tmp3 = thx__Ord_Ord_Impl_::forComparable();
			$tmp4 = thx_fp__Map_Map_Impl_::lookup($m, $a, $tmp3);
			utest_Assert::same($tmp2, $tmp4, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 99, "className" => "thx.fp.TestMap", "methodName" => "testObjectSet2")));
			$tmp5 = haxe_ds_Option::Some(2);
			$tmp6 = thx__Ord_Ord_Impl_::forComparable();
			$tmp7 = thx_fp__Map_Map_Impl_::lookup($m, $b, $tmp6);
			utest_Assert::same($tmp5, $tmp7, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 100, "className" => "thx.fp.TestMap", "methodName" => "testObjectSet2")));
			$tmp8 = haxe_ds_Option::Some(3);
			$tmp9 = thx__Ord_Ord_Impl_::forComparable();
			$tmp10 = thx_fp__Map_Map_Impl_::lookup($m, $c, $tmp9);
			utest_Assert::same($tmp8, $tmp10, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 101, "className" => "thx.fp.TestMap", "methodName" => "testObjectSet2")));
			utest_Assert::equals(3, thx_fp__Map_Map_Impl_::size($m), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 102, "className" => "thx.fp.TestMap", "methodName" => "testObjectSet2")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp10,$tmp1,$tmp,$map1,$map,$m,$c,$b,$a);
		}
	}
	public function testFromNative() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$_g2 = new haxe_ds_StringMap();
			$_g2->set("a", 1);
			$_g2->set("b", 2);
			$map = thx_fp_StringMap::fromNative($_g2);
			utest_Assert::equals(2, thx_fp__Map_Map_Impl_::size($map), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 109, "className" => "thx.fp.TestMap", "methodName" => "testFromNative")));
			$tmp = thx_fp__Map_Map_Impl_::lookup($map, "a", (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
			utest_Assert::isTrue(thx_Options::toBool($tmp), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 110, "className" => "thx.fp.TestMap", "methodName" => "testFromNative")));
			$tmp1 = thx_fp__Map_Map_Impl_::lookup($map, "b", (isset(thx_Strings::$order) ? thx_Strings::$order: array("thx_Strings", "order")));
			utest_Assert::isTrue(thx_Options::toBool($tmp1), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 111, "className" => "thx.fp.TestMap", "methodName" => "testFromNative")));
			unset($tmp1,$tmp,$map,$_g2);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.fp.TestMap'; }
}
function thx_fp_TestMap_0($arr1, $v) {
	{
		$arr1->push($v);
		return $arr1;
	}
}
function thx_fp_TestMap_1($arr1, $k) {
	{
		$arr1->push($k);
		return $arr1;
	}
}
