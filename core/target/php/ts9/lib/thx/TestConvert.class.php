<?php

// Generated by Haxe 3.3.0
class thx_TestConvert {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testString() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_Convert::toString(1);
			utest_Assert::equals("1", $tmp, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 13, "className" => "thx.TestConvert", "methodName" => "testString")));
			$tmp1 = thx_Convert::toStringOr(null, "1");
			utest_Assert::equals("1", $tmp1, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 14, "className" => "thx.TestConvert", "methodName" => "testString")));
			unset($tmp1,$tmp);
		}
	}
	public function testInt() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_Convert::toInt("1");
			utest_Assert::equals(1, $tmp, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 19, "className" => "thx.TestConvert", "methodName" => "testInt")));
			$tmp1 = thx_Convert::toInt(true);
			utest_Assert::equals(1, $tmp1, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 20, "className" => "thx.TestConvert", "methodName" => "testInt")));
			$tmp2 = thx_Convert::toInt(false);
			utest_Assert::equals(0, $tmp2, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 21, "className" => "thx.TestConvert", "methodName" => "testInt")));
			$tmp3 = thx_Convert::toInt(1.1);
			utest_Assert::equals(1, $tmp3, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 22, "className" => "thx.TestConvert", "methodName" => "testInt")));
			$tmp4 = thx_Convert::toIntOr("z", 1);
			utest_Assert::equals(1, $tmp4, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 24, "className" => "thx.TestConvert", "methodName" => "testInt")));
			unset($tmp4,$tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testFloat() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_Convert::toFloat("1");
			utest_Assert::equals(1, $tmp, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 29, "className" => "thx.TestConvert", "methodName" => "testFloat")));
			$tmp1 = thx_Convert::toFloat(true);
			utest_Assert::equals(1, $tmp1, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 30, "className" => "thx.TestConvert", "methodName" => "testFloat")));
			$tmp2 = thx_Convert::toFloat(false);
			utest_Assert::equals(0, $tmp2, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 31, "className" => "thx.TestConvert", "methodName" => "testFloat")));
			$tmp3 = thx_Convert::toFloat(1.1);
			utest_Assert::equals(1.1, $tmp3, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 32, "className" => "thx.TestConvert", "methodName" => "testFloat")));
			$tmp4 = thx_Convert::toFloatOr("z", 1.1);
			utest_Assert::equals(1.1, $tmp4, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 34, "className" => "thx.TestConvert", "methodName" => "testFloat")));
			unset($tmp4,$tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testBool() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_Convert::toBool("1");
			utest_Assert::equals(true, $tmp, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 39, "className" => "thx.TestConvert", "methodName" => "testBool")));
			$tmp1 = thx_Convert::toBool(true);
			utest_Assert::equals(true, $tmp1, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 40, "className" => "thx.TestConvert", "methodName" => "testBool")));
			$tmp2 = thx_Convert::toBool(false);
			utest_Assert::equals(false, $tmp2, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 41, "className" => "thx.TestConvert", "methodName" => "testBool")));
			$tmp3 = thx_Convert::toBool(1.1);
			utest_Assert::equals(true, $tmp3, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 42, "className" => "thx.TestConvert", "methodName" => "testBool")));
			$tmp4 = thx_Convert::toBool(0);
			utest_Assert::equals(false, $tmp4, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 43, "className" => "thx.TestConvert", "methodName" => "testBool")));
			$tmp5 = thx_Convert::toBoolOr("z", true);
			utest_Assert::equals(true, $tmp5, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 45, "className" => "thx.TestConvert", "methodName" => "testBool")));
			unset($tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testMap() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$objOfArrays = _hx_anonymous(array("foo" => (new _hx_array(array("bar"))), "baz" => (new _hx_array(array("qux")))));
			$objOfNumbers = _hx_anonymous(array("a" => 1, "b" => 2, "c" => 3));
			$this1 = thx_Convert::toMap($objOfArrays, array(new _hx_lambda(array(), "thx_TestConvert_0"), 'execute'));
			$tmp = $this1->get("foo");
			utest_Assert::equals("bar", $tmp[0], null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 53, "className" => "thx.TestConvert", "methodName" => "testMap")));
			$this2 = thx_Convert::toMap($objOfNumbers, (isset(thx_Convert::$toInt) ? thx_Convert::$toInt: array("thx_Convert", "toInt")));
			$tmp1 = $this2->get("b");
			utest_Assert::equals(2, $tmp1, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 57, "className" => "thx.TestConvert", "methodName" => "testMap")));
			utest_Assert::raises(array(new _hx_lambda(array(), "thx_TestConvert_1"), 'execute'), null, null, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 59, "className" => "thx.TestConvert", "methodName" => "testMap")));
			utest_Assert::raises(array(new _hx_lambda(array(&$objOfArrays), "thx_TestConvert_2"), 'execute'), null, null, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 60, "className" => "thx.TestConvert", "methodName" => "testMap")));
			unset($tmp1,$tmp,$this2,$this1,$objOfNumbers,$objOfArrays);
		}
	}
	public function testDateTimeUtc() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$value = null;
			thx_Convert::toDateTimeUtc($value);
			utest_Assert::isNull($value, null, _hx_anonymous(array("fileName" => "TestConvert.hx", "lineNumber" => 67, "className" => "thx.TestConvert", "methodName" => "testDateTimeUtc")));
			unset($value);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.TestConvert'; }
}
function thx_TestConvert_0($val) {
	{
		return thx_Convert::toArray($val, (isset(thx_Convert::$toString) ? thx_Convert::$toString: array("thx_Convert", "toString")));
	}
}
function thx_TestConvert_1() {
	{
		thx_Convert::toMap(3, (isset(thx_Convert::$toString) ? thx_Convert::$toString: array("thx_Convert", "toString")));
	}
}
function thx_TestConvert_2(&$objOfArrays) {
	{
		thx_Convert::toMap($objOfArrays, (isset(thx_Convert::$toString) ? thx_Convert::$toString: array("thx_Convert", "toString")));
	}
}
