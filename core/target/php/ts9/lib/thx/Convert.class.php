<?php

// Generated by Haxe 3.3.0
class thx_Convert {
	public function __construct(){}
	static function toString($value) {
		$_g = Type::typeof($value);
		$tmp = $_g->index;
		switch($tmp) {
		case 0:{
			return null;
		}break;
		case 1:case 2:case 3:{
			$tmp1 = Std::string($value);
			return "" . _hx_string_or_null($tmp1);
		}break;
		case 4:{
			try {
				return haxe_Json::phpJsonEncode($value, null, null);
			}catch(Exception $__hx__e) {
				$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
				$e = $_ex_;
				{
					throw new HException(new thx_Error("unable to convert object to String", null, _hx_anonymous(array("fileName" => "Convert.hx", "lineNumber" => 15, "className" => "thx.Convert", "methodName" => "toString"))));
				}
			}
		}break;
		case 6:{
			switch(Type::getClassName(_hx_deref($_g)->params[0])) {
			case "Date":{
				return $value->toString();
			}break;
			case "String":{
				return $value;
			}break;
			default:{
				$tmp2 = Std::is($value, _hx_qtype("haxe.IMap"));
				if($tmp2) {
					try {
						$value1 = thx_Maps::toObject($value);
						return haxe_Json::phpJsonEncode($value1, null, null);
					}catch(Exception $__hx__e) {
						$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
						$e1 = $_ex_;
						{
							throw new HException(new thx_Error("unable to convert object to String", null, _hx_anonymous(array("fileName" => "Convert.hx", "lineNumber" => 24, "className" => "thx.Convert", "methodName" => "toString"))));
						}
					}
				} else {
					$tmp3 = Std::string($value);
					throw new HException(new thx_Error("unable to convert " . _hx_string_or_null($tmp3) . " to String", null, _hx_anonymous(array("fileName" => "Convert.hx", "lineNumber" => 26, "className" => "thx.Convert", "methodName" => "toString"))));
				}
			}break;
			}
		}break;
		default:{
			$tmp4 = Std::string($value);
			throw new HException(new thx_Error("unable to convert " . _hx_string_or_null($tmp4) . " to String", null, _hx_anonymous(array("fileName" => "Convert.hx", "lineNumber" => 29, "className" => "thx.Convert", "methodName" => "toString"))));
		}break;
		}
	}
	static function toStringOr($value, $alt) {
		if(null === $value) {
			return $alt;
		} else {
			return thx_Convert::toString($value);
		}
	}
	static function toInt($value) {
		if(null === $value) {
			throw new HException(new thx_Error("unable to convert null to Int", null, _hx_anonymous(array("fileName" => "Convert.hx", "lineNumber" => 37, "className" => "thx.Convert", "methodName" => "toInt"))));
		}
		$tmp = Type::typeof($value);
		$_g = thx_Types::toString($tmp);
		switch($_g) {
		case "Bool":{
			if($value) {
				return 1;
			} else {
				return 0;
			}
		}break;
		case "Float":{
			return Std::int($value);
		}break;
		case "Int":{
			return $value;
		}break;
		case "String":{
			$tmp1 = thx_Ints::canParse($value);
			if($tmp1) {
				return thx_Ints::parse($value, null);
			} else {
				$tmp2 = Std::string($value);
				throw new HException(new thx_Error("unable to convert " . _hx_string_or_null($tmp2) . " to Int", null, _hx_anonymous(array("fileName" => "Convert.hx", "lineNumber" => 48, "className" => "thx.Convert", "methodName" => "toInt"))));
			}
		}break;
		default:{
			$tmp3 = Std::string($value);
			throw new HException(new thx_Error("unable to convert " . _hx_string_or_null($tmp3) . " to Int", null, _hx_anonymous(array("fileName" => "Convert.hx", "lineNumber" => 48, "className" => "thx.Convert", "methodName" => "toInt"))));
		}break;
		}
	}
	static function toIntOr($value, $alt) {
		try {
			return thx_Convert::toInt($value);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			if(($e = $_ex_) instanceof thx_Error){
				return $alt;
			} else throw $__hx__e;;
		}
	}
	static function toFloat($value) {
		if(null === $value) {
			throw new HException(new thx_Error("unable to convert null to Float", null, _hx_anonymous(array("fileName" => "Convert.hx", "lineNumber" => 56, "className" => "thx.Convert", "methodName" => "toFloat"))));
		}
		$tmp = Type::typeof($value);
		$_g = thx_Types::toString($tmp);
		switch($_g) {
		case "Bool":{
			if($value) {
				return 1.0;
			} else {
				return 0.0;
			}
		}break;
		case "Date":{
			return $value->getTime();
		}break;
		case "Float":case "Int":{
			return $value;
		}break;
		case "String":{
			$tmp1 = thx_Floats::canParse($value);
			if($tmp1) {
				return thx_Floats::parse($value);
			} else {
				$tmp2 = Std::string($value);
				throw new HException(new thx_Error("unable to convert " . _hx_string_or_null($tmp2) . " to Float", null, _hx_anonymous(array("fileName" => "Convert.hx", "lineNumber" => 67, "className" => "thx.Convert", "methodName" => "toFloat"))));
			}
		}break;
		default:{
			$tmp3 = Std::string($value);
			throw new HException(new thx_Error("unable to convert " . _hx_string_or_null($tmp3) . " to Float", null, _hx_anonymous(array("fileName" => "Convert.hx", "lineNumber" => 67, "className" => "thx.Convert", "methodName" => "toFloat"))));
		}break;
		}
	}
	static function toFloatOr($value, $alt) {
		try {
			return thx_Convert::toFloat($value);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			if(($e = $_ex_) instanceof thx_Error){
				return $alt;
			} else throw $__hx__e;;
		}
	}
	static function toBool($value) {
		if(null === $value) {
			throw new HException(new thx_Error("unable to convert null to Bool", null, _hx_anonymous(array("fileName" => "Convert.hx", "lineNumber" => 75, "className" => "thx.Convert", "methodName" => "toBool"))));
		}
		$tmp = Type::typeof($value);
		$_g = thx_Types::toString($tmp);
		switch($_g) {
		case "Bool":{
			return $value;
		}break;
		case "Float":case "Int":{
			return !_hx_equal($value, 0);
		}break;
		case "String":{
			$tmp1 = thx_Bools::canParse($value);
			if($tmp1) {
				return thx_Bools::parse($value);
			} else {
				$tmp2 = Std::string($value);
				throw new HException(new thx_Error("unable to convert " . _hx_string_or_null($tmp2) . " to Bool", null, _hx_anonymous(array("fileName" => "Convert.hx", "lineNumber" => 84, "className" => "thx.Convert", "methodName" => "toBool"))));
			}
		}break;
		default:{
			$tmp3 = Std::string($value);
			throw new HException(new thx_Error("unable to convert " . _hx_string_or_null($tmp3) . " to Bool", null, _hx_anonymous(array("fileName" => "Convert.hx", "lineNumber" => 84, "className" => "thx.Convert", "methodName" => "toBool"))));
		}break;
		}
	}
	static function toBoolOr($value, $alt) {
		try {
			return thx_Convert::toBool($value);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			if(($e = $_ex_) instanceof thx_Error){
				return $alt;
			} else throw $__hx__e;;
		}
	}
	static function toDate($value) {
		if(null === $value) {
			throw new HException(new thx_Error("unable to convert null to Date", null, _hx_anonymous(array("fileName" => "Convert.hx", "lineNumber" => 92, "className" => "thx.Convert", "methodName" => "toDate"))));
		}
		$tmp = Type::typeof($value);
		$_g = thx_Types::toString($tmp);
		switch($_g) {
		case "Date":{
			return $value;
		}break;
		case "Float":case "Int":{
			return Date::fromTime($value);
		}break;
		case "String":{
			try {
				return Date::fromString($value);
			}catch(Exception $__hx__e) {
				$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
				$e = $_ex_;
				{
					$tmp1 = Std::string($value);
					throw new HException(new thx_Error("unable to convert string " . _hx_string_or_null($tmp1) . " to Date", null, _hx_anonymous(array("fileName" => "Convert.hx", "lineNumber" => 100, "className" => "thx.Convert", "methodName" => "toDate"))));
				}
			}
		}break;
		default:{
			$tmp2 = Std::string($value);
			throw new HException(new thx_Error("unable to convert " . _hx_string_or_null($tmp2) . " to Date", null, _hx_anonymous(array("fileName" => "Convert.hx", "lineNumber" => 104, "className" => "thx.Convert", "methodName" => "toDate"))));
		}break;
		}
	}
	static function toDateOr($value, $alt) {
		try {
			return thx_Convert::toDate($value);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			if(($e = $_ex_) instanceof thx_Error){
				return $alt;
			} else throw $__hx__e;;
		}
	}
	static function toDateTime($value) {
		if(null === $value) {
			return null;
		}
		$tmp = Type::typeof($value);
		$_g = thx_Types::toString($tmp);
		switch($_g) {
		case "Date":{
			return thx__DateTime_DateTime_Impl_::fromDate($value);
		}break;
		case "Float":case "Int":{
			return thx__DateTime_DateTime_Impl_::fromTime($value);
		}break;
		case "String":{
			try {
				return thx__DateTime_DateTime_Impl_::fromString($value);
			}catch(Exception $__hx__e) {
				$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
				$e = $_ex_;
				{
					$tmp1 = Std::string($value);
					throw new HException(new thx_Error("unable to convert string " . _hx_string_or_null($tmp1) . " to DateTime", null, _hx_anonymous(array("fileName" => "Convert.hx", "lineNumber" => 120, "className" => "thx.Convert", "methodName" => "toDateTime"))));
				}
			}
		}break;
		default:{
			$tmp2 = Std::string($value);
			throw new HException(new thx_Error("unable to convert " . _hx_string_or_null($tmp2) . " to DateTime", null, _hx_anonymous(array("fileName" => "Convert.hx", "lineNumber" => 124, "className" => "thx.Convert", "methodName" => "toDateTime"))));
		}break;
		}
	}
	static function toDateTimeOr($value, $alt) {
		$v = null;
		try {
			$v = thx_Convert::toDateTime($value);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			if(($e = $_ex_) instanceof thx_Error){
				$v = null;
			} else throw $__hx__e;;
		}
		if(null === $v) {
			return $alt;
		} else {
			return $v;
		}
	}
	static function toDateTimeUtc($value) {
		if(null === $value) {
			return null;
		}
		$tmp = Type::typeof($value);
		$_g = thx_Types::toString($tmp);
		switch($_g) {
		case "Date":{
			return thx__DateTimeUtc_DateTimeUtc_Impl_::fromDate($value);
		}break;
		case "Float":case "Int":{
			return thx__DateTimeUtc_DateTimeUtc_Impl_::fromTime($value);
		}break;
		case "String":{
			try {
				return thx__DateTimeUtc_DateTimeUtc_Impl_::fromString($value);
			}catch(Exception $__hx__e) {
				$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
				$e = $_ex_;
				{
					$tmp1 = Std::string($value);
					throw new HException(new thx_Error("unable to convert string " . _hx_string_or_null($tmp1) . " to DateTimeUtc", null, _hx_anonymous(array("fileName" => "Convert.hx", "lineNumber" => 142, "className" => "thx.Convert", "methodName" => "toDateTimeUtc"))));
				}
			}
		}break;
		default:{
			$tmp2 = Std::string($value);
			throw new HException(new thx_Error("unable to convert " . _hx_string_or_null($tmp2) . " to DateTimeUtc", null, _hx_anonymous(array("fileName" => "Convert.hx", "lineNumber" => 146, "className" => "thx.Convert", "methodName" => "toDateTimeUtc"))));
		}break;
		}
	}
	static function toDateTimeUtcOr($value, $alt) {
		$v = null;
		try {
			$v = thx_Convert::toDateTimeUtc($value);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			if(($e = $_ex_) instanceof thx_Error){
				$v = null;
			} else throw $__hx__e;;
		}
		if(null === $v) {
			return $alt;
		} else {
			return $v;
		}
	}
	static function toObject($value) {
		if(null === $value) {
			return null;
		}
		$tmp = Reflect::isObject($value);
		if($tmp) {
			return $value;
		}
		$tmp1 = Type::typeof($value);
		$_g = thx_Types::toString($tmp1);
		if($_g === "String") {
			try {
				return haxe_Json::phpJsonDecode($value);
			}catch(Exception $__hx__e) {
				$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
				$e = $_ex_;
				{
					$tmp2 = Std::string($value);
					throw new HException(new thx_Error("unable to convert string " . _hx_string_or_null($tmp2) . " to Object", null, _hx_anonymous(array("fileName" => "Convert.hx", "lineNumber" => 165, "className" => "thx.Convert", "methodName" => "toObject"))));
				}
			}
		} else {
			$tmp3 = Std::string($value);
			throw new HException(new thx_Error("unable to convert " . _hx_string_or_null($tmp3) . " to Object", null, _hx_anonymous(array("fileName" => "Convert.hx", "lineNumber" => 167, "className" => "thx.Convert", "methodName" => "toObject"))));
		}
	}
	static function toObjectOr($value, $alt) {
		if(null === $value) {
			return $alt;
		}
		try {
			return thx_Convert::toObject($value);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			if(($e = $_ex_) instanceof thx_Error){
				return $alt;
			} else throw $__hx__e;;
		}
	}
	static function toArrayString($value) {
		return thx_Convert::toArray($value, (isset(thx_Convert::$toString) ? thx_Convert::$toString: array("thx_Convert", "toString")));
	}
	static function toArrayStringOr($value, $alt) {
		if(null === $value) {
			return $alt;
		}
		try {
			return thx_Convert::toArrayString($value);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			if(($e = $_ex_) instanceof thx_Error){
				return $alt;
			} else throw $__hx__e;;
		}
	}
	static function toArrayInt($value) {
		return thx_Convert::toArray($value, (isset(thx_Convert::$toInt) ? thx_Convert::$toInt: array("thx_Convert", "toInt")));
	}
	static function toArrayIntOr($value, $alt) {
		if(null === $value) {
			return $alt;
		}
		try {
			return thx_Convert::toArrayInt($value);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			if(($e = $_ex_) instanceof thx_Error){
				return $alt;
			} else throw $__hx__e;;
		}
	}
	static function toArrayFloat($value) {
		return thx_Convert::toArray($value, (isset(thx_Convert::$toFloat) ? thx_Convert::$toFloat: array("thx_Convert", "toFloat")));
	}
	static function toArrayFloatOr($value, $alt) {
		if(null === $value) {
			return $alt;
		}
		try {
			return thx_Convert::toArrayFloat($value);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			if(($e = $_ex_) instanceof thx_Error){
				return $alt;
			} else throw $__hx__e;;
		}
	}
	static function toArrayBool($value) {
		return thx_Convert::toArray($value, (isset(thx_Convert::$toBool) ? thx_Convert::$toBool: array("thx_Convert", "toBool")));
	}
	static function toArrayBoolOr($value, $alt) {
		if(null === $value) {
			return $alt;
		}
		try {
			return thx_Convert::toArrayBool($value);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			if(($e = $_ex_) instanceof thx_Error){
				return $alt;
			} else throw $__hx__e;;
		}
	}
	static function toArrayDate($value) {
		return thx_Convert::toArray($value, (isset(thx_Convert::$toDate) ? thx_Convert::$toDate: array("thx_Convert", "toDate")));
	}
	static function toArrayDateOr($value, $alt) {
		if(null === $value) {
			return $alt;
		}
		try {
			return thx_Convert::toArrayDate($value);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			if(($e = $_ex_) instanceof thx_Error){
				return $alt;
			} else throw $__hx__e;;
		}
	}
	static function toArrayDateTime($value) {
		return thx_Convert::toArray($value, (isset(thx_Convert::$toDateTime) ? thx_Convert::$toDateTime: array("thx_Convert", "toDateTime")));
	}
	static function toArrayDateTimeOr($value, $alt) {
		if(null === $value) {
			return $alt;
		}
		try {
			return thx_Convert::toArrayDateTime($value);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			if(($e = $_ex_) instanceof thx_Error){
				return $alt;
			} else throw $__hx__e;;
		}
	}
	static function toArrayObject($value) {
		return thx_Convert::toArray($value, (isset(thx_Convert::$toObject) ? thx_Convert::$toObject: array("thx_Convert", "toObject")));
	}
	static function toArrayObjectOr($value, $alt) {
		if(null === $value) {
			return $alt;
		}
		try {
			return thx_Convert::toArrayObject($value);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			if(($e = $_ex_) instanceof thx_Error){
				return $alt;
			} else throw $__hx__e;;
		}
	}
	static function toArray($value, $convert) {
		if(null === $value) {
			return (new _hx_array(array()));
		}
		$tmp = Std::is($value, _hx_qtype("Array"));
		if($tmp) {
			return $value->map($convert);
		} else {
			$tmp1 = Std::string($value);
			throw new HException(new thx_Error("unable to convert " . _hx_string_or_null($tmp1) . " to Array<T>", null, _hx_anonymous(array("fileName" => "Convert.hx", "lineNumber" => 236, "className" => "thx.Convert", "methodName" => "toArray"))));
		}
	}
	static function toMap($value, $convert) {
		$obj = thx_Convert::toObject($value);
		$tmp = Reflect::fields($obj);
		return thx_Arrays::reduce($tmp, array(new _hx_lambda(array(&$convert, &$obj), "thx_Convert_0"), 'execute'), new haxe_ds_StringMap());
	}
	function __toString() { return 'thx.Convert'; }
}
function thx_Convert_0(&$convert, &$obj, $map, $field) {
	{
		{
			$tmp1 = Reflect::field($obj, $field);
			$value1 = call_user_func_array($convert, array($tmp1));
			$map->set($field, $value1);
		}
		return $map;
	}
}
