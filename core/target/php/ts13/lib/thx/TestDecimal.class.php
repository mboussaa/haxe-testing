<?php

// Generated by Haxe 3.3.0
class thx_TestDecimal {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public $divisionSize;
	public function setup() {
		$this->divisionSize = thx_bigint_Decimals::$divisionExtraScale;
		thx_bigint_Decimals::$divisionExtraScale = 16;
	}
	public function teardown() {
		$v = $this->divisionSize;
		thx_bigint_Decimals::$divisionExtraScale = $v;
	}
	public function testToBigInt() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$v = thx_bigint_Decimals::parse("10234.0001040000");
			$tmp = thx__Decimal_Decimal_Impl_::toBigInt($v);
			$tmp1 = thx__BigInt_BigInt_Impl_::equals($tmp, thx_bigint_Bigs::parseBase("10234", 10));
			$this1 = thx__Decimal_Decimal_Impl_::toBigInt($v);
			$tmp2 = $this1->toString();
			utest_Assert::isTrue($tmp1, "expected 10234 but got " . _hx_string_or_null($tmp2), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 26, "className" => "thx.TestDecimal", "methodName" => "testToBigInt")));
			unset($v,$tmp2,$tmp1,$tmp,$this1);
		}
	}
	public function testTrim() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$v = thx_bigint_Decimals::parse("10234.0001040000");
			$tmp = $v->scale === 10;
			utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 32, "className" => "thx.TestDecimal", "methodName" => "testTrim")));
			$tmp1 = $v->trim(null)->scale === 6;
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 33, "className" => "thx.TestDecimal", "methodName" => "testTrim")));
			$tmp2 = $v->trim(8)->scale === 8;
			$this1 = $v->trim(8);
			$tmp3 = $this1->toString();
			$tmp4 = "expected " . _hx_string_or_null($tmp3) . " to have a scale 8 but it is " . _hx_string_rec($v->trim(8)->scale, "");
			utest_Assert::isTrue($tmp2, $tmp4, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 34, "className" => "thx.TestDecimal", "methodName" => "testTrim")));
			$tmp5 = $v->trim(2)->scale === 6;
			$this2 = $v->trim(2);
			$tmp6 = $this2->toString();
			$tmp7 = "expected " . _hx_string_or_null($tmp6) . " to have a scale 6 but it is " . _hx_string_rec($v->trim(2)->scale, "");
			utest_Assert::isTrue($tmp5, $tmp7, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 35, "className" => "thx.TestDecimal", "methodName" => "testTrim")));
			$v = thx_bigint_Decimals::parse("10234.00000000");
			$tmp8 = $v->trim(null)->scale === 0;
			utest_Assert::isTrue($tmp8, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 37, "className" => "thx.TestDecimal", "methodName" => "testTrim")));
			$tmp9 = $v->trim(2)->scale === 2;
			$this3 = $v->trim(2);
			$tmp10 = $this3->toString();
			$tmp11 = "expected " . _hx_string_or_null($tmp10) . ".scale == 2 but is " . _hx_string_rec($v->trim(2)->scale, "");
			utest_Assert::isTrue($tmp9, $tmp11, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 38, "className" => "thx.TestDecimal", "methodName" => "testTrim")));
			$v = thx_bigint_Decimals::parse("1.20000000");
			$tmp12 = $v->trim(null)->scale === 1;
			$this4 = $v->trim(null);
			$tmp13 = $this4->toString();
			$tmp14 = "expected " . _hx_string_or_null($tmp13) . ".scale == 1 but got " . _hx_string_rec($v->trim(null)->scale, "");
			utest_Assert::isTrue($tmp12, $tmp14, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 40, "className" => "thx.TestDecimal", "methodName" => "testTrim")));
			unset($v,$tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp14,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp,$this4,$this3,$this2,$this1);
		}
	}
	public function testStringExp() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_bigint_Decimals::parse("1.12345e-10");
			$tmp1 = thx__Decimal_Decimal_Impl_::equals($tmp, thx_bigint_Decimals::parse("0.000000000112345"));
			$this1 = thx_bigint_Decimals::parse("0.000000000112345");
			$tmp2 = $this1->toString();
			$tmp3 = "expected " . _hx_string_or_null($tmp2) . " but got ";
			$this2 = thx_bigint_Decimals::parse("1.12345e-10");
			$tmp4 = $this2->toString();
			utest_Assert::isTrue($tmp1, _hx_string_or_null($tmp3) . _hx_string_or_null($tmp4), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 45, "className" => "thx.TestDecimal", "methodName" => "testStringExp")));
			$tmp5 = thx_bigint_Decimals::parse("1.12345e+10");
			$tmp6 = thx__Decimal_Decimal_Impl_::equals($tmp5, thx_bigint_Decimals::parse("11234500000"));
			$this3 = thx_bigint_Decimals::parse("11234500000");
			$tmp7 = $this3->toString();
			$tmp8 = "expected " . _hx_string_or_null($tmp7) . " but got ";
			$this4 = thx_bigint_Decimals::parse("1.12345e+10");
			$tmp9 = $this4->toString();
			utest_Assert::isTrue($tmp6, _hx_string_or_null($tmp8) . _hx_string_or_null($tmp9), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 46, "className" => "thx.TestDecimal", "methodName" => "testStringExp")));
			$tmp10 = thx_bigint_Decimals::parse("-1.12345e-10");
			$tmp11 = thx__Decimal_Decimal_Impl_::equals($tmp10, thx_bigint_Decimals::parse("-0.000000000112345"));
			$this5 = thx_bigint_Decimals::parse("-0.000000000112345");
			$tmp12 = $this5->toString();
			$tmp13 = "expected " . _hx_string_or_null($tmp12) . " but got ";
			$this6 = thx_bigint_Decimals::parse("-1.12345e-10");
			$tmp14 = $this6->toString();
			utest_Assert::isTrue($tmp11, _hx_string_or_null($tmp13) . _hx_string_or_null($tmp14), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 47, "className" => "thx.TestDecimal", "methodName" => "testStringExp")));
			$tmp15 = thx_bigint_Decimals::parse("-1.12345e+10");
			$tmp16 = thx__Decimal_Decimal_Impl_::equals($tmp15, thx_bigint_Decimals::parse("-11234500000"));
			$this7 = thx_bigint_Decimals::parse("-11234500000");
			$tmp17 = $this7->toString();
			$tmp18 = "expected " . _hx_string_or_null($tmp17) . " but got ";
			$this8 = thx_bigint_Decimals::parse("-1.12345e+10");
			$tmp19 = $this8->toString();
			utest_Assert::isTrue($tmp16, _hx_string_or_null($tmp18) . _hx_string_or_null($tmp19), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 48, "className" => "thx.TestDecimal", "methodName" => "testStringExp")));
			$tmp20 = thx_bigint_Decimals::parse("0E7");
			$tmp21 = thx__Decimal_Decimal_Impl_::equals($tmp20, thx_bigint_Decimals::parse("0"));
			$this9 = thx_bigint_Decimals::parse("0");
			$tmp22 = $this9->toString();
			$tmp23 = "expected " . _hx_string_or_null($tmp22) . " but got ";
			$this10 = thx_bigint_Decimals::parse("0E7");
			$tmp24 = $this10->toString();
			utest_Assert::isTrue($tmp21, _hx_string_or_null($tmp23) . _hx_string_or_null($tmp24), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 49, "className" => "thx.TestDecimal", "methodName" => "testStringExp")));
			$tmp25 = thx_bigint_Decimals::fromFloat(1.234e-50);
			$tmp26 = thx__Decimal_Decimal_Impl_::equals($tmp25, thx_bigint_Decimals::parse("1.234000e-050"));
			$this11 = thx_bigint_Decimals::fromFloat(1.234e-50);
			$tmp27 = $this11->toString();
			$tmp28 = "expected " . _hx_string_or_null($tmp27) . " == ";
			$this12 = thx_bigint_Decimals::parse("1.234000e-050");
			$tmp29 = $this12->toString();
			utest_Assert::isTrue($tmp26, _hx_string_or_null($tmp28) . _hx_string_or_null($tmp29), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 50, "className" => "thx.TestDecimal", "methodName" => "testStringExp")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp29,$tmp28,$tmp27,$tmp26,$tmp25,$tmp24,$tmp23,$tmp22,$tmp21,$tmp20,$tmp2,$tmp19,$tmp18,$tmp17,$tmp16,$tmp15,$tmp14,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp,$this9,$this8,$this7,$this6,$this5,$this4,$this3,$this2,$this12,$this11,$this10,$this1);
		}
	}
	public function testModulo() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = thx__Decimal_Decimal_Impl_::fromInt(10);
			$that = thx__Decimal_Decimal_Impl_::fromInt(3);
			$tmp = $this1->modulo($that);
			$tmp1 = thx__Decimal_Decimal_Impl_::equals($tmp, thx__Decimal_Decimal_Impl_::fromInt(1));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 55, "className" => "thx.TestDecimal", "methodName" => "testModulo")));
			$this2 = thx_bigint_Decimals::fromFloat(10.2);
			$that1 = thx__Decimal_Decimal_Impl_::fromInt(3);
			$tmp2 = $this2->modulo($that1);
			$tmp3 = thx__Decimal_Decimal_Impl_::equals($tmp2, thx_bigint_Decimals::fromFloat(1.2));
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 56, "className" => "thx.TestDecimal", "methodName" => "testModulo")));
			$this3 = thx_bigint_Decimals::parse("12345678900000000");
			$that2 = thx_bigint_Decimals::parse("0.0000000012345678");
			$tmp4 = $this3->modulo($that2);
			$tmp5 = thx__Decimal_Decimal_Impl_::equals($tmp4, thx_bigint_Decimals::parse("0.0000000009832122"));
			utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 57, "className" => "thx.TestDecimal", "methodName" => "testModulo")));
			$this4 = thx_bigint_Decimals::fromFloat(16.80);
			$that3 = thx_bigint_Decimals::fromFloat(4.10);
			$tmp6 = $this4->modulo($that3);
			$tmp7 = thx__Decimal_Decimal_Impl_::equals($tmp6, thx_bigint_Decimals::parse("0.4"));
			utest_Assert::isTrue($tmp7, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 58, "className" => "thx.TestDecimal", "methodName" => "testModulo")));
			$this5 = thx__Decimal_Decimal_Impl_::fromInt(10);
			$that4 = thx__Decimal_Decimal_Impl_::fromInt(3);
			$tmp8 = $this5->modulo($that4);
			$tmp9 = thx__Decimal_Decimal_Impl_::equals($tmp8, thx__Decimal_Decimal_Impl_::fromInt(1));
			utest_Assert::isTrue($tmp9, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 59, "className" => "thx.TestDecimal", "methodName" => "testModulo")));
			$this6 = thx_bigint_Decimals::fromFloat(10.2);
			$that5 = thx__Decimal_Decimal_Impl_::fromInt(3);
			$tmp10 = $this6->modulo($that5);
			$tmp11 = thx__Decimal_Decimal_Impl_::equals($tmp10, thx_bigint_Decimals::fromFloat(1.2));
			utest_Assert::isTrue($tmp11, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 60, "className" => "thx.TestDecimal", "methodName" => "testModulo")));
			$this7 = thx__Decimal_Decimal_Impl_::fromInt(10);
			$that6 = thx__Decimal_Decimal_Impl_::fromInt(-3);
			$tmp12 = $this7->modulo($that6);
			$tmp13 = thx__Decimal_Decimal_Impl_::equals($tmp12, thx__Decimal_Decimal_Impl_::fromInt(1));
			utest_Assert::isTrue($tmp13, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 62, "className" => "thx.TestDecimal", "methodName" => "testModulo")));
			$this8 = thx__Decimal_Decimal_Impl_::fromInt(-10);
			$that7 = thx__Decimal_Decimal_Impl_::fromInt(-3);
			$tmp14 = $this8->modulo($that7);
			$tmp15 = thx__Decimal_Decimal_Impl_::equals($tmp14, thx__Decimal_Decimal_Impl_::fromInt(-1));
			utest_Assert::isTrue($tmp15, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 63, "className" => "thx.TestDecimal", "methodName" => "testModulo")));
			$this9 = thx__Decimal_Decimal_Impl_::fromInt(-10);
			$that8 = thx__Decimal_Decimal_Impl_::fromInt(3);
			$tmp16 = $this9->modulo($that8);
			$tmp17 = thx__Decimal_Decimal_Impl_::equals($tmp16, thx__Decimal_Decimal_Impl_::fromInt(-1));
			utest_Assert::isTrue($tmp17, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 64, "className" => "thx.TestDecimal", "methodName" => "testModulo")));
			$this10 = thx__Decimal_Decimal_Impl_::fromInt(0);
			$that9 = thx__Decimal_Decimal_Impl_::fromInt(3);
			$tmp18 = $this10->modulo($that9);
			$tmp19 = thx__Decimal_Decimal_Impl_::equals($tmp18, thx_bigint_Decimals::parse("0.0"));
			utest_Assert::isTrue($tmp19, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 66, "className" => "thx.TestDecimal", "methodName" => "testModulo")));
			utest_Assert::raises(array(new _hx_lambda(array(), "thx_TestDecimal_0"), 'execute'), null, null, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 68, "className" => "thx.TestDecimal", "methodName" => "testModulo")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp19,$tmp18,$tmp17,$tmp16,$tmp15,$tmp14,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp,$this9,$this8,$this7,$this6,$this5,$this4,$this3,$this2,$this10,$this1,$that9,$that8,$that7,$that6,$that5,$that4,$that3,$that2,$that1,$that);
		}
	}
	public function testDivision() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = thx_bigint_Decimals::parse("12345678900000000");
			$that = thx_bigint_Decimals::parse("0.0000000012345678");
			$tmp = $this1->divide($that);
			$tmp1 = thx__Decimal_Decimal_Impl_::equals($tmp, thx_bigint_Decimals::parse("10000000729000059778004901.79640194730495967900669367854888"));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 73, "className" => "thx.TestDecimal", "methodName" => "testDivision")));
			$this2 = thx_bigint_Decimals::parse("12345678901234567890.12346789");
			$that1 = thx_bigint_Decimals::parse("987654321.987654321");
			$tmp2 = $this2->divide($that1);
			$tmp3 = thx__Decimal_Decimal_Impl_::equals($tmp2, thx_bigint_Decimals::parse("12499999874.843750115314464248433558"));
			$this3 = thx_bigint_Decimals::parse("12345678901234567890.12346789");
			$tmp4 = $this3->toString();
			$tmp5 = "expected " . _hx_string_or_null($tmp4) . " / ";
			$this4 = thx_bigint_Decimals::parse("987654321.987654321");
			$tmp6 = $this4->toString();
			$tmp7 = _hx_string_or_null($tmp5) . _hx_string_or_null($tmp6) . " == ";
			$this5 = thx_bigint_Decimals::parse("12499999874.843750115314464248433558");
			$tmp8 = $this5->toString();
			$tmp9 = _hx_string_or_null($tmp7) . _hx_string_or_null($tmp8) . " but got ";
			$this6 = thx_bigint_Decimals::parse("12345678901234567890.12346789");
			$that2 = thx_bigint_Decimals::parse("987654321.987654321");
			$this7 = $this6->divide($that2);
			$tmp10 = $this7->toString();
			utest_Assert::isTrue($tmp3, _hx_string_or_null($tmp9) . _hx_string_or_null($tmp10), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 74, "className" => "thx.TestDecimal", "methodName" => "testDivision")));
			$this8 = thx_bigint_Decimals::parse("12345678901234567890.12346789");
			$that3 = thx_bigint_Decimals::parse("-987654321.987654321");
			$tmp11 = $this8->divide($that3);
			$tmp12 = thx__Decimal_Decimal_Impl_::equals($tmp11, thx_bigint_Decimals::parse("-12499999874.843750115314464248433558"));
			utest_Assert::isTrue($tmp12, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 75, "className" => "thx.TestDecimal", "methodName" => "testDivision")));
			$this9 = thx_bigint_Decimals::parse("-12345678901234567890.12346789");
			$that4 = thx_bigint_Decimals::parse("-987654321.987654321");
			$tmp13 = $this9->divide($that4);
			$tmp14 = thx__Decimal_Decimal_Impl_::equals($tmp13, thx_bigint_Decimals::parse("12499999874.843750115314464248433558"));
			utest_Assert::isTrue($tmp14, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 76, "className" => "thx.TestDecimal", "methodName" => "testDivision")));
			$this10 = thx_bigint_Decimals::parse("-12345678901234567890.12346789");
			$that5 = thx_bigint_Decimals::parse("987654321.987654321");
			$tmp15 = $this10->divide($that5);
			$tmp16 = thx__Decimal_Decimal_Impl_::equals($tmp15, thx_bigint_Decimals::parse("-12499999874.843750115314464248433558"));
			utest_Assert::isTrue($tmp16, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 77, "className" => "thx.TestDecimal", "methodName" => "testDivision")));
			$this11 = thx_bigint_Decimals::parse("-12345678901234567890.12346789");
			$that6 = thx__Decimal_Decimal_Impl_::fromInt(1);
			$tmp17 = $this11->divide($that6);
			$tmp18 = thx__Decimal_Decimal_Impl_::equals($tmp17, thx_bigint_Decimals::parse("-12345678901234567890.12346789"));
			utest_Assert::isTrue($tmp18, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 78, "className" => "thx.TestDecimal", "methodName" => "testDivision")));
			$this12 = thx_bigint_Decimals::parse("-12345678901234567890.12346789");
			$that7 = thx_bigint_Decimals::parse("-12345678901234567890.12346789");
			$tmp19 = $this12->divide($that7);
			$tmp20 = thx__Decimal_Decimal_Impl_::equals($tmp19, thx__Decimal_Decimal_Impl_::fromInt(1));
			utest_Assert::isTrue($tmp20, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 79, "className" => "thx.TestDecimal", "methodName" => "testDivision")));
			$this13 = thx__Decimal_Decimal_Impl_::fromInt(10);
			$that8 = thx__Decimal_Decimal_Impl_::fromInt(2);
			$tmp21 = $this13->divide($that8);
			$tmp22 = thx__Decimal_Decimal_Impl_::equals($tmp21, thx__Decimal_Decimal_Impl_::fromInt(5));
			utest_Assert::isTrue($tmp22, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 80, "className" => "thx.TestDecimal", "methodName" => "testDivision")));
			$this14 = thx__Decimal_Decimal_Impl_::fromInt(10);
			$that9 = thx__Decimal_Decimal_Impl_::fromInt(3);
			$tmp23 = $this14->divide($that9);
			$tmp24 = thx__Decimal_Decimal_Impl_::equals($tmp23, thx_bigint_Decimals::parse("3.3333333333333333"));
			utest_Assert::isTrue($tmp24, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 81, "className" => "thx.TestDecimal", "methodName" => "testDivision")));
			$this15 = thx__Decimal_Decimal_Impl_::fromInt(1);
			$that10 = thx__Decimal_Decimal_Impl_::fromInt(2);
			$tmp25 = $this15->divide($that10);
			$tmp26 = thx__Decimal_Decimal_Impl_::equals($tmp25, thx_bigint_Decimals::fromFloat(0.5));
			utest_Assert::isTrue($tmp26, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 82, "className" => "thx.TestDecimal", "methodName" => "testDivision")));
			$this16 = thx__Decimal_Decimal_Impl_::fromInt(1);
			$that11 = thx__Decimal_Decimal_Impl_::fromInt(3);
			$tmp27 = $this16->divide($that11);
			$tmp28 = thx__Decimal_Decimal_Impl_::equals($tmp27, thx_bigint_Decimals::parse("0.3333333333333333"));
			utest_Assert::isTrue($tmp28, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 83, "className" => "thx.TestDecimal", "methodName" => "testDivision")));
			$this17 = thx__Decimal_Decimal_Impl_::fromInt(0);
			$that12 = thx__Decimal_Decimal_Impl_::fromInt(3);
			$tmp29 = $this17->divide($that12);
			$tmp30 = thx__Decimal_Decimal_Impl_::equals($tmp29, thx_bigint_Decimals::parse("0.0"));
			utest_Assert::isTrue($tmp30, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 85, "className" => "thx.TestDecimal", "methodName" => "testDivision")));
			utest_Assert::raises(array(new _hx_lambda(array(), "thx_TestDecimal_1"), 'execute'), null, null, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 87, "className" => "thx.TestDecimal", "methodName" => "testDivision")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp30,$tmp3,$tmp29,$tmp28,$tmp27,$tmp26,$tmp25,$tmp24,$tmp23,$tmp22,$tmp21,$tmp20,$tmp2,$tmp19,$tmp18,$tmp17,$tmp16,$tmp15,$tmp14,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp,$this9,$this8,$this7,$this6,$this5,$this4,$this3,$this2,$this17,$this16,$this15,$this14,$this13,$this12,$this11,$this10,$this1,$that9,$that8,$that7,$that6,$that5,$that4,$that3,$that2,$that12,$that11,$that10,$that1,$that);
		}
	}
	public function testMultiply() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = thx_bigint_Decimals::parse("12345678900000000");
			$that = thx_bigint_Decimals::parse("0.0000000012345678");
			$tmp = $this1->multiply($that);
			$tmp1 = thx__Decimal_Decimal_Impl_::equals($tmp, thx_bigint_Decimals::parse("15241577.63907942"));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 92, "className" => "thx.TestDecimal", "methodName" => "testMultiply")));
			unset($tmp1,$tmp,$this1,$that);
		}
	}
	public function testInts() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx__Decimal_Decimal_Impl_::fromInt(123);
			$tmp1 = thx__Decimal_Decimal_Impl_::equals($tmp, thx_bigint_Decimals::parse("123"));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 97, "className" => "thx.TestDecimal", "methodName" => "testInts")));
			$tmp2 = thx__Decimal_Decimal_Impl_::fromInt(-123);
			$tmp3 = thx__Decimal_Decimal_Impl_::equals($tmp2, thx_bigint_Decimals::parse("-123"));
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 98, "className" => "thx.TestDecimal", "methodName" => "testInts")));
			$tmp4 = thx__Decimal_Decimal_Impl_::fromInt(1234567890);
			$tmp5 = thx__Decimal_Decimal_Impl_::equals($tmp4, thx_bigint_Decimals::parse("1234567890"));
			utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 99, "className" => "thx.TestDecimal", "methodName" => "testInts")));
			unset($tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testFloats() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_bigint_Decimals::fromFloat(123.456);
			$tmp1 = thx__Decimal_Decimal_Impl_::equals($tmp, thx_bigint_Decimals::parse("123.456"));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 104, "className" => "thx.TestDecimal", "methodName" => "testFloats")));
			$tmp2 = thx_bigint_Decimals::fromFloat(-123.456);
			$tmp3 = thx__Decimal_Decimal_Impl_::equals($tmp2, thx_bigint_Decimals::parse("-123.456"));
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 105, "className" => "thx.TestDecimal", "methodName" => "testFloats")));
			$tmp4 = thx_bigint_Decimals::fromFloat(0.123456789);
			$tmp5 = thx__Decimal_Decimal_Impl_::equals($tmp4, thx_bigint_Decimals::parse("0.123456789"));
			utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 106, "className" => "thx.TestDecimal", "methodName" => "testFloats")));
			unset($tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testEquality() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_bigint_Decimals::parse("123.456");
			$tmp1 = thx__Decimal_Decimal_Impl_::equals($tmp, thx_bigint_Decimals::parse("123.4560000"));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 111, "className" => "thx.TestDecimal", "methodName" => "testEquality")));
			unset($tmp1,$tmp);
		}
	}
	public function testAddition() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = thx_bigint_Decimals::parse("123.456");
			$that = thx_bigint_Decimals::parse("76.544000");
			$tmp = $this1->add($that);
			$tmp1 = thx__Decimal_Decimal_Impl_::equals($tmp, thx_bigint_Decimals::parse("200"));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 116, "className" => "thx.TestDecimal", "methodName" => "testAddition")));
			$this2 = thx_bigint_Decimals::parse("123.456");
			$that1 = thx_bigint_Decimals::parse("0.004");
			$tmp2 = $this2->add($that1);
			$tmp3 = thx__Decimal_Decimal_Impl_::equals($tmp2, thx_bigint_Decimals::parse("123.46"));
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 117, "className" => "thx.TestDecimal", "methodName" => "testAddition")));
			$this3 = thx_bigint_Decimals::parse("123.456");
			$that2 = thx_bigint_Decimals::parse("-0.456");
			$tmp4 = $this3->add($that2);
			$tmp5 = thx__Decimal_Decimal_Impl_::equals($tmp4, thx_bigint_Decimals::parse("123"));
			utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 118, "className" => "thx.TestDecimal", "methodName" => "testAddition")));
			unset($tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$this3,$this2,$this1,$that2,$that1,$that);
		}
	}
	public function testSubtraction() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = thx_bigint_Decimals::parse("123.456");
			$that = thx_bigint_Decimals::parse("76.544000");
			$tmp = $this1->subtract($that);
			$tmp1 = thx__Decimal_Decimal_Impl_::equals($tmp, thx_bigint_Decimals::parse("46.912000"));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 123, "className" => "thx.TestDecimal", "methodName" => "testSubtraction")));
			$this2 = thx_bigint_Decimals::parse("123.456");
			$that1 = thx_bigint_Decimals::parse("0.004");
			$tmp2 = $this2->subtract($that1);
			$tmp3 = thx__Decimal_Decimal_Impl_::equals($tmp2, thx_bigint_Decimals::parse("123.452"));
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 124, "className" => "thx.TestDecimal", "methodName" => "testSubtraction")));
			$this3 = thx_bigint_Decimals::parse("123.456");
			$that2 = thx_bigint_Decimals::parse("-0.456");
			$tmp4 = $this3->subtract($that2);
			$tmp5 = thx__Decimal_Decimal_Impl_::equals($tmp4, thx_bigint_Decimals::parse("123.912"));
			utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 125, "className" => "thx.TestDecimal", "methodName" => "testSubtraction")));
			unset($tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$this3,$this2,$this1,$that2,$that1,$that);
		}
	}
	public function testComparison() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_bigint_Decimals::parse("1");
			$tmp1 = thx__Decimal_Decimal_Impl_::greater($tmp, thx_bigint_Decimals::parse("0.11111"));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 130, "className" => "thx.TestDecimal", "methodName" => "testComparison")));
			$tmp2 = thx_bigint_Decimals::parse("1");
			$tmp3 = thx__Decimal_Decimal_Impl_::greater($tmp2, thx__Decimal_Decimal_Impl_::fromInt(-1));
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 131, "className" => "thx.TestDecimal", "methodName" => "testComparison")));
			$tmp4 = thx_bigint_Decimals::parse("1");
			$tmp5 = thx__Decimal_Decimal_Impl_::greater($tmp4, thx__Decimal_Decimal_Impl_::fromInt(1));
			utest_Assert::isFalse($tmp5, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 132, "className" => "thx.TestDecimal", "methodName" => "testComparison")));
			$tmp6 = thx_bigint_Decimals::parse("1");
			$tmp7 = thx__Decimal_Decimal_Impl_::greaterEquals($tmp6, thx__Decimal_Decimal_Impl_::fromInt(1));
			utest_Assert::isTrue($tmp7, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 133, "className" => "thx.TestDecimal", "methodName" => "testComparison")));
			$tmp8 = thx_bigint_Decimals::parse("1");
			$tmp9 = thx__Decimal_Decimal_Impl_::equals($tmp8, thx__Decimal_Decimal_Impl_::fromInt(1));
			utest_Assert::isTrue($tmp9, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 134, "className" => "thx.TestDecimal", "methodName" => "testComparison")));
			$tmp10 = thx_bigint_Decimals::parse("1.01001");
			$tmp11 = thx__Decimal_Decimal_Impl_::equals($tmp10, thx_bigint_Decimals::parse("1.0100100"));
			utest_Assert::isTrue($tmp11, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 135, "className" => "thx.TestDecimal", "methodName" => "testComparison")));
			$tmp12 = thx_bigint_Decimals::parse("0");
			$tmp13 = thx__Decimal_Decimal_Impl_::equals($tmp12, thx_bigint_Decimals::parse("0"));
			utest_Assert::isTrue($tmp13, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 136, "className" => "thx.TestDecimal", "methodName" => "testComparison")));
			$tmp14 = thx_bigint_Decimals::parse("0.000");
			$tmp15 = thx__Decimal_Decimal_Impl_::equals($tmp14, thx__Decimal_Decimal_Impl_::fromInt(0));
			utest_Assert::isTrue($tmp15, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 137, "className" => "thx.TestDecimal", "methodName" => "testComparison")));
			$tmp16 = thx_bigint_Decimals::parse("-1.12345e+10");
			$tmp17 = thx__Decimal_Decimal_Impl_::greaterEquals($tmp16, thx_bigint_Decimals::parse("-11234500000"));
			utest_Assert::isTrue($tmp17, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 138, "className" => "thx.TestDecimal", "methodName" => "testComparison")));
			$tmp18 = thx_bigint_Decimals::parse("-1.12345e+10");
			$tmp19 = thx__Decimal_Decimal_Impl_::lessEquals($tmp18, thx_bigint_Decimals::parse("-11234500000"));
			utest_Assert::isTrue($tmp19, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 139, "className" => "thx.TestDecimal", "methodName" => "testComparison")));
			$tmp20 = thx_bigint_Decimals::parse("1.12345e+10");
			$tmp21 = thx__Decimal_Decimal_Impl_::greaterEquals($tmp20, thx_bigint_Decimals::parse("11234500000"));
			utest_Assert::isTrue($tmp21, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 140, "className" => "thx.TestDecimal", "methodName" => "testComparison")));
			$tmp22 = thx_bigint_Decimals::parse("1.12345e+10");
			$tmp23 = thx__Decimal_Decimal_Impl_::lessEquals($tmp22, thx_bigint_Decimals::parse("11234500000"));
			utest_Assert::isTrue($tmp23, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 141, "className" => "thx.TestDecimal", "methodName" => "testComparison")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp23,$tmp22,$tmp21,$tmp20,$tmp2,$tmp19,$tmp18,$tmp17,$tmp16,$tmp15,$tmp14,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp);
		}
	}
	public function testString() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tests = (new _hx_array(array("0", "0.00000789", "0.001", "0.123", "1.0", "1", "1.1", "123456789.0123456789", "123456789.012345678900000")));
			$dec = null;
			{
				$_g2 = 0;
				while($_g2 < $tests->length) {
					$test = $tests[$_g2];
					++$_g2;
					$dec = thx_bigint_Decimals::parse($test);
					$tmp = $dec->toString();
					utest_Assert::equals($test, $tmp, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 150, "className" => "thx.TestDecimal", "methodName" => "testString")));
					if($test === "0") {
						continue;
					}
					$dec = thx_bigint_Decimals::parse("-" . _hx_string_or_null($test));
					$tmp1 = "-" . _hx_string_or_null($test);
					$tmp2 = $dec->toString();
					utest_Assert::equals($tmp1, $tmp2, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 155, "className" => "thx.TestDecimal", "methodName" => "testString")));
					unset($tmp2,$tmp1,$tmp,$test);
				}
				unset($_g2);
			}
			unset($tests,$dec);
		}
	}
	public function assertDecimalEquals($test, $expected, $pos = null) {
		$tmp = thx__Decimal_Decimal_Impl_::equals($test, $expected);
		$tmp1 = $expected->toString();
		$tmp2 = "expected " . _hx_string_or_null($tmp1) . " but got ";
		$tmp3 = $test->toString();
		utest_Assert::isTrue($tmp, _hx_string_or_null($tmp2) . _hx_string_or_null($tmp3), $pos);
	}
	public function testRound() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = thx__Decimal_Decimal_Impl_::fromInt(0);
			$tmp = $this1->roundTo(0);
			$this->assertDecimalEquals($tmp, thx__Decimal_Decimal_Impl_::fromInt(0), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 165, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this2 = thx__Decimal_Decimal_Impl_::fromInt(0);
			$tmp1 = $this2->ceilTo(0);
			$this->assertDecimalEquals($tmp1, thx__Decimal_Decimal_Impl_::fromInt(0), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 166, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this3 = thx__Decimal_Decimal_Impl_::fromInt(0);
			$tmp2 = $this3->floorTo(0);
			$this->assertDecimalEquals($tmp2, thx__Decimal_Decimal_Impl_::fromInt(0), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 167, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this4 = thx__Decimal_Decimal_Impl_::fromInt(1);
			$tmp3 = $this4->roundTo(0);
			$this->assertDecimalEquals($tmp3, thx__Decimal_Decimal_Impl_::fromInt(1), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 169, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this5 = thx__Decimal_Decimal_Impl_::fromInt(-1);
			$tmp4 = $this5->roundTo(0);
			$this->assertDecimalEquals($tmp4, thx__Decimal_Decimal_Impl_::fromInt(-1), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 170, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this6 = thx__Decimal_Decimal_Impl_::fromInt(1);
			$tmp5 = $this6->ceilTo(0);
			$this->assertDecimalEquals($tmp5, thx__Decimal_Decimal_Impl_::fromInt(1), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 171, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this7 = thx__Decimal_Decimal_Impl_::fromInt(-1);
			$tmp6 = $this7->ceilTo(0);
			$this->assertDecimalEquals($tmp6, thx__Decimal_Decimal_Impl_::fromInt(-1), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 172, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this8 = thx__Decimal_Decimal_Impl_::fromInt(1);
			$tmp7 = $this8->floorTo(0);
			$this->assertDecimalEquals($tmp7, thx__Decimal_Decimal_Impl_::fromInt(1), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 173, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this9 = thx__Decimal_Decimal_Impl_::fromInt(-1);
			$tmp8 = $this9->floorTo(0);
			$this->assertDecimalEquals($tmp8, thx__Decimal_Decimal_Impl_::fromInt(-1), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 174, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this10 = thx_bigint_Decimals::parse("1234567890.1234567890");
			$tmp9 = $this10->roundTo(0);
			$this->assertDecimalEquals($tmp9, thx_bigint_Decimals::parse("1234567890"), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 176, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this11 = thx_bigint_Decimals::parse("1234567890.1234567890");
			$tmp10 = $this11->roundTo(3);
			$this->assertDecimalEquals($tmp10, thx_bigint_Decimals::parse("1234567890.123"), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 177, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this12 = thx_bigint_Decimals::parse("1234567890.1234567890");
			$tmp11 = $this12->roundTo(5);
			$this->assertDecimalEquals($tmp11, thx_bigint_Decimals::parse("1234567890.12346"), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 178, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this13 = thx_bigint_Decimals::parse("1234567890.1234567890");
			$tmp12 = $this13->roundTo(6);
			$this->assertDecimalEquals($tmp12, thx_bigint_Decimals::parse("1234567890.123457"), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 179, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this14 = thx_bigint_Decimals::parse("-1234567890.1234567890");
			$tmp13 = $this14->roundTo(0);
			$this->assertDecimalEquals($tmp13, thx_bigint_Decimals::parse("-1234567890"), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 181, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this15 = thx_bigint_Decimals::parse("-1234567890.1234567890");
			$tmp14 = $this15->roundTo(3);
			$this->assertDecimalEquals($tmp14, thx_bigint_Decimals::parse("-1234567890.123"), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 182, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this16 = thx_bigint_Decimals::parse("-1234567890.1234567890");
			$tmp15 = $this16->roundTo(5);
			$this->assertDecimalEquals($tmp15, thx_bigint_Decimals::parse("-1234567890.12345"), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 183, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this17 = thx_bigint_Decimals::parse("-1234567890.1234567890");
			$tmp16 = $this17->roundTo(6);
			$this->assertDecimalEquals($tmp16, thx_bigint_Decimals::parse("-1234567890.123456"), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 184, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this18 = thx_bigint_Decimals::parse("1234567890.1234567890");
			$tmp17 = $this18->ceilTo(0);
			$this->assertDecimalEquals($tmp17, thx_bigint_Decimals::parse("1234567891"), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 186, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this19 = thx_bigint_Decimals::parse("1234567890.1234567890");
			$tmp18 = $this19->ceilTo(3);
			$this->assertDecimalEquals($tmp18, thx_bigint_Decimals::parse("1234567890.124"), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 187, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this20 = thx_bigint_Decimals::parse("1234567890.1234567890");
			$tmp19 = $this20->ceilTo(5);
			$this->assertDecimalEquals($tmp19, thx_bigint_Decimals::parse("1234567890.12346"), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 188, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this21 = thx_bigint_Decimals::parse("1234567890.1234567890");
			$tmp20 = $this21->ceilTo(6);
			$this->assertDecimalEquals($tmp20, thx_bigint_Decimals::parse("1234567890.123457"), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 189, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this22 = thx_bigint_Decimals::parse("-1234567890.1234567890");
			$tmp21 = $this22->ceilTo(0);
			$this->assertDecimalEquals($tmp21, thx_bigint_Decimals::parse("-1234567890"), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 191, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this23 = thx_bigint_Decimals::parse("-1234567890.1234567890");
			$tmp22 = $this23->ceilTo(3);
			$this->assertDecimalEquals($tmp22, thx_bigint_Decimals::parse("-1234567890.123"), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 192, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this24 = thx_bigint_Decimals::parse("-1234567890.1234567890");
			$tmp23 = $this24->ceilTo(5);
			$this->assertDecimalEquals($tmp23, thx_bigint_Decimals::parse("-1234567890.12345"), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 193, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this25 = thx_bigint_Decimals::parse("-1234567890.1234567890");
			$tmp24 = $this25->ceilTo(6);
			$this->assertDecimalEquals($tmp24, thx_bigint_Decimals::parse("-1234567890.123456"), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 194, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this26 = thx_bigint_Decimals::parse("1234567890.1234567890");
			$tmp25 = $this26->floorTo(0);
			$this->assertDecimalEquals($tmp25, thx_bigint_Decimals::parse("1234567890"), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 196, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this27 = thx_bigint_Decimals::parse("1234567890.1234567890");
			$tmp26 = $this27->floorTo(3);
			$this->assertDecimalEquals($tmp26, thx_bigint_Decimals::parse("1234567890.123"), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 197, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this28 = thx_bigint_Decimals::parse("1234567890.1234567890");
			$tmp27 = $this28->floorTo(5);
			$this->assertDecimalEquals($tmp27, thx_bigint_Decimals::parse("1234567890.12345"), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 198, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this29 = thx_bigint_Decimals::parse("1234567890.1234567890");
			$tmp28 = $this29->floorTo(6);
			$this->assertDecimalEquals($tmp28, thx_bigint_Decimals::parse("1234567890.123456"), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 199, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this30 = thx_bigint_Decimals::parse("-1234567890.1234567890");
			$tmp29 = $this30->floorTo(0);
			$this->assertDecimalEquals($tmp29, thx_bigint_Decimals::parse("-1234567890"), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 201, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this31 = thx_bigint_Decimals::parse("-1234567890.1234567890");
			$tmp30 = $this31->floorTo(3);
			$this->assertDecimalEquals($tmp30, thx_bigint_Decimals::parse("-1234567890.123"), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 202, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this32 = thx_bigint_Decimals::parse("-1234567890.1234567890");
			$tmp31 = $this32->floorTo(5);
			$this->assertDecimalEquals($tmp31, thx_bigint_Decimals::parse("-1234567890.12345"), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 203, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			$this33 = thx_bigint_Decimals::parse("-1234567890.1234567890");
			$tmp32 = $this33->floorTo(6);
			$this->assertDecimalEquals($tmp32, thx_bigint_Decimals::parse("-1234567890.123456"), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 204, "className" => "thx.TestDecimal", "methodName" => "testRound")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp32,$tmp31,$tmp30,$tmp3,$tmp29,$tmp28,$tmp27,$tmp26,$tmp25,$tmp24,$tmp23,$tmp22,$tmp21,$tmp20,$tmp2,$tmp19,$tmp18,$tmp17,$tmp16,$tmp15,$tmp14,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp,$this9,$this8,$this7,$this6,$this5,$this4,$this33,$this32,$this31,$this30,$this3,$this29,$this28,$this27,$this26,$this25,$this24,$this23,$this22,$this21,$this20,$this2,$this19,$this18,$this17,$this16,$this15,$this14,$this13,$this12,$this11,$this10,$this1);
		}
	}
	public function testScaleTo() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tests = (new _hx_array(array(_hx_anonymous(array("src" => "0", "exp" => "0", "scale" => 0)), _hx_anonymous(array("src" => "0", "exp" => "0.00000", "scale" => 5)), _hx_anonymous(array("src" => "0.1", "exp" => "0.100", "scale" => 3)), _hx_anonymous(array("src" => "0.0123456", "exp" => "0.012", "scale" => 3)), _hx_anonymous(array("src" => "1234567890.1234567890", "exp" => "1234567890.123", "scale" => 3)), _hx_anonymous(array("src" => "1234567890.1234567890", "exp" => "1234567890.1234567890", "scale" => 10)), _hx_anonymous(array("src" => "1234567890.1234567890", "exp" => "1234567890.123456789000", "scale" => 12)))));
			$dec = null;
			{
				$_g2 = 0;
				while($_g2 < $tests->length) {
					$test = $tests[$_g2];
					++$_g2;
					$dec = thx_bigint_Decimals::parse($test->src);
					$decimals = $test->scale;
					$this1 = $dec->scaleTo($decimals);
					$tmp = $this1->toString();
					$tmp1 = "expected " . _hx_string_or_null($test->src) . " to be " . _hx_string_or_null($test->exp) . " when scaled to " . _hx_string_rec($test->scale, "") . " but got ";
					$decimals1 = $test->scale;
					$this2 = $dec->scaleTo($decimals1);
					$tmp2 = $this2->toString();
					utest_Assert::equals($test->exp, $tmp, _hx_string_or_null($tmp1) . _hx_string_or_null($tmp2), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 221, "className" => "thx.TestDecimal", "methodName" => "testScaleTo")));
					if($test->src === "0") {
						continue;
					}
					$dec = thx_bigint_Decimals::parse("-" . _hx_string_or_null($test->src));
					$tmp3 = "-" . _hx_string_or_null($test->exp);
					$decimals2 = $test->scale;
					$this3 = $dec->scaleTo($decimals2);
					$tmp4 = $this3->toString();
					$tmp5 = "expected -" . _hx_string_or_null($test->src) . " to be -" . _hx_string_or_null($test->exp) . " when scaled to " . _hx_string_rec($test->scale, "") . " but got -";
					$decimals3 = $test->scale;
					$this4 = $dec->scaleTo($decimals3);
					$tmp6 = $this4->toString();
					utest_Assert::equals($tmp3, $tmp4, _hx_string_or_null($tmp5) . _hx_string_or_null($tmp6), _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 226, "className" => "thx.TestDecimal", "methodName" => "testScaleTo")));
					unset($tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$this4,$this3,$this2,$this1,$test,$decimals3,$decimals2,$decimals1,$decimals);
				}
				unset($_g2);
			}
			unset($tests,$dec);
		}
	}
	public function testNegativePow() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = thx__Decimal_Decimal_Impl_::fromInt(10);
			$tmp = $this1->pow(-2);
			$tmp1 = thx__Decimal_Decimal_Impl_::equals($tmp, thx_bigint_Decimals::fromFloat(0.01));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestDecimal.hx", "lineNumber" => 232, "className" => "thx.TestDecimal", "methodName" => "testNegativePow")));
			unset($tmp1,$tmp,$this1);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.TestDecimal'; }
}
function thx_TestDecimal_0() {
	{
		$this11 = thx__Decimal_Decimal_Impl_::fromInt(1);
		$that10 = thx__Decimal_Decimal_Impl_::fromInt(0);
		$this11->modulo($that10);
	}
}
function thx_TestDecimal_1() {
	{
		$this18 = thx__Decimal_Decimal_Impl_::fromInt(1);
		$that13 = thx__Decimal_Decimal_Impl_::fromInt(0);
		$this18->divide($that13);
	}
}
