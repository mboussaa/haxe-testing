<?php

// Generated by Haxe 3.3.0
class thx_TestIterators {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testEquals() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$a = (new _hx_array(array(1, 2, 3)));
			$b = (new _hx_array(array(1, 2)));
			$c = (new _hx_array(array(1, 2, 4)));
			$tmp = $a->iterator();
			$tmp1 = $a->iterator();
			$tmp2 = thx_Iterators::equals($tmp, $tmp1, null);
			utest_Assert::isTrue($tmp2, null, _hx_anonymous(array("fileName" => "TestIterators.hx", "lineNumber" => 23, "className" => "thx.TestIterators", "methodName" => "testEquals")));
			$tmp3 = $a->iterator();
			$tmp4 = $b->iterator();
			$tmp5 = thx_Iterators::equals($tmp3, $tmp4, null);
			utest_Assert::isFalse($tmp5, null, _hx_anonymous(array("fileName" => "TestIterators.hx", "lineNumber" => 24, "className" => "thx.TestIterators", "methodName" => "testEquals")));
			$tmp6 = $a->iterator();
			$tmp7 = $c->iterator();
			$tmp8 = thx_Iterators::equals($tmp6, $tmp7, null);
			utest_Assert::isFalse($tmp8, null, _hx_anonymous(array("fileName" => "TestIterators.hx", "lineNumber" => 25, "className" => "thx.TestIterators", "methodName" => "testEquals")));
			unset($tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$c,$b,$a);
		}
	}
	public function testReduce() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = _hx_deref((new _hx_array(array(2, 3, 5, 7))))->iterator();
			$tmp1 = thx_Iterators::reduce($tmp, array(new _hx_lambda(array(), "thx_TestIterators_0"), 'execute'), 0);
			utest_Assert::equals(17, $tmp1, null, _hx_anonymous(array("fileName" => "TestIterators.hx", "lineNumber" => 31, "className" => "thx.TestIterators", "methodName" => "testReduce")));
			unset($tmp1,$tmp);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.TestIterators'; }
}
function thx_TestIterators_0($a, $b) {
	{
		return $a + $b;
	}
}
