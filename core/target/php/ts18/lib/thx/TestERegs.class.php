<?php

// Generated by Haxe 3.3.0
class thx_TestERegs {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testEscape() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_ERegs::escape("a.b");
			utest_Assert::equals("a\\.b", $tmp, null, _hx_anonymous(array("fileName" => "TestERegs.hx", "lineNumber" => 21, "className" => "thx.TestERegs", "methodName" => "testEscape")));
			$tmp1 = thx_ERegs::escape("a.b.c");
			utest_Assert::equals("a\\.b\\.c", $tmp1, null, _hx_anonymous(array("fileName" => "TestERegs.hx", "lineNumber" => 22, "className" => "thx.TestERegs", "methodName" => "testEscape")));
			$tmp2 = thx_ERegs::escape("([.].)");
			utest_Assert::equals("\\(\\[\\.\\]\\.\\)", $tmp2, null, _hx_anonymous(array("fileName" => "TestERegs.hx", "lineNumber" => 23, "className" => "thx.TestERegs", "methodName" => "testEscape")));
			unset($tmp2,$tmp1,$tmp);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.TestERegs'; }
}
