<?php

// Generated by Haxe 3.3.0
class thx_TestOrderedMap {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testBasics() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$inst = new thx_StringOrderedMap();
			$ml = $inst;
			utest_Assert::equals(0, $ml->length, null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 19, "className" => "thx.TestOrderedMap", "methodName" => "testBasics")));
			$tmp = $ml->toString();
			utest_Assert::equals("[]", $tmp, null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 20, "className" => "thx.TestOrderedMap", "methodName" => "testBasics")));
			$ml->set("z", "Z");
			$ml->set("y", "Y");
			$ml->set("y", "Y");
			$ml->set("x", "X");
			utest_Assert::equals(3, $ml->length, null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 27, "className" => "thx.TestOrderedMap", "methodName" => "testBasics")));
			$tmp1 = $ml->toString();
			utest_Assert::equals("[z => Z, y => Y, x => X]", $tmp1, null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 28, "className" => "thx.TestOrderedMap", "methodName" => "testBasics")));
			$tmp2 = $ml->remove("y");
			utest_Assert::isTrue($tmp2, null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 30, "className" => "thx.TestOrderedMap", "methodName" => "testBasics")));
			$tmp3 = $ml->remove("y");
			utest_Assert::isFalse($tmp3, null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 31, "className" => "thx.TestOrderedMap", "methodName" => "testBasics")));
			utest_Assert::equals(2, $ml->length, null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 33, "className" => "thx.TestOrderedMap", "methodName" => "testBasics")));
			$tmp4 = $ml->toString();
			utest_Assert::equals("[z => Z, x => X]", $tmp4, null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 34, "className" => "thx.TestOrderedMap", "methodName" => "testBasics")));
			$ml->insert(1, "y", "Y");
			utest_Assert::equals(3, $ml->length, null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 38, "className" => "thx.TestOrderedMap", "methodName" => "testBasics")));
			$tmp5 = $ml->toString();
			utest_Assert::equals("[z => Z, y => Y, x => X]", $tmp5, null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 39, "className" => "thx.TestOrderedMap", "methodName" => "testBasics")));
			$tmp6 = $ml->keyAt(1);
			utest_Assert::equals("y", $tmp6, null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 41, "className" => "thx.TestOrderedMap", "methodName" => "testBasics")));
			utest_Assert::equals("Y", $ml->at(1), null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 42, "className" => "thx.TestOrderedMap", "methodName" => "testBasics")));
			$tmp7 = $ml->keyIndex("y");
			utest_Assert::equals(1, $tmp7, null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 44, "className" => "thx.TestOrderedMap", "methodName" => "testBasics")));
			$tmp8 = $ml->valueIndex("Y");
			utest_Assert::equals(1, $tmp8, null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 45, "className" => "thx.TestOrderedMap", "methodName" => "testBasics")));
			$ml->removeAt(1);
			utest_Assert::equals(2, $ml->length, null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 49, "className" => "thx.TestOrderedMap", "methodName" => "testBasics")));
			$tmp9 = $ml->toString();
			utest_Assert::equals("[z => Z, x => X]", $tmp9, null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 50, "className" => "thx.TestOrderedMap", "methodName" => "testBasics")));
			$tmp10 = $ml->toArray();
			utest_Assert::same((new _hx_array(array("Z", "X"))), $tmp10, null, null, null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 52, "className" => "thx.TestOrderedMap", "methodName" => "testBasics")));
			$tmp11 = $ml->keys();
			$tmp12 = thx_Iterators::toArray($tmp11);
			utest_Assert::same((new _hx_array(array("z", "x"))), $tmp12, null, null, null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 53, "className" => "thx.TestOrderedMap", "methodName" => "testBasics")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp12,$tmp11,$tmp10,$tmp1,$tmp,$ml,$inst);
		}
	}
	public function testGetOption() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$inst = new thx_StringOrderedMap();
			$m = $inst;
			$m->set("key1", 1);
			$value = $m->get("key1");
			$tmp = null;
			if(null === $value) {
				$tmp = haxe_ds_Option::$None;
			} else {
				$tmp = haxe_ds_Option::Some($value);
			}
			utest_Assert::same(thx_Options::get($tmp), 1, null, null, null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 61, "className" => "thx.TestOrderedMap", "methodName" => "testGetOption")));
			$value1 = $m->get("key2");
			$tmp1 = null;
			if(null === $value1) {
				$tmp1 = haxe_ds_Option::$None;
			} else {
				$tmp1 = haxe_ds_Option::Some($value1);
			}
			utest_Assert::same(thx_Options::toBool($tmp1), false, null, null, null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 62, "className" => "thx.TestOrderedMap", "methodName" => "testGetOption")));
			unset($value1,$value,$tmp1,$tmp,$m,$inst);
		}
	}
	public function testToTuples() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$inst = new thx_StringOrderedMap();
			$m = $inst;
			$m->set("foo", 10);
			$m->set("bar", 20);
			$m->insert(2, "baz", 30);
			$tuples = $m->tuples();
			utest_Assert::same("foo", $tuples[0]->_0, null, null, null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 74, "className" => "thx.TestOrderedMap", "methodName" => "testToTuples")));
			utest_Assert::same(20, $tuples[1]->_1, null, null, null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 75, "className" => "thx.TestOrderedMap", "methodName" => "testToTuples")));
			utest_Assert::same("baz", $tuples[2]->_0, null, null, null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 76, "className" => "thx.TestOrderedMap", "methodName" => "testToTuples")));
			utest_Assert::same(30, $tuples[2]->_1, null, null, null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 77, "className" => "thx.TestOrderedMap", "methodName" => "testToTuples")));
			unset($tuples,$m,$inst);
		}
	}
	public function testAbstract() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$inst = new thx_StringOrderedMap();
			$ml = $inst;
			$ml->setValue("k", "value");
			utest_Assert::equals("value", $ml->get("k"), null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 84, "className" => "thx.TestOrderedMap", "methodName" => "testAbstract")));
			utest_Assert::equals("value", $ml->at(0), null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 85, "className" => "thx.TestOrderedMap", "methodName" => "testAbstract")));
			utest_Assert::equals("value", $ml->at(0), null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 86, "className" => "thx.TestOrderedMap", "methodName" => "testAbstract")));
			$acceptMap = array(new _hx_lambda(array(), "thx_TestOrderedMap_0"), 'execute');
			call_user_func_array($acceptMap, array($ml));
			$inst1 = new thx_IntOrderedMap();
			utest_Assert::notNull($inst1, null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 93, "className" => "thx.TestOrderedMap", "methodName" => "testAbstract")));
			$inst2 = new thx_EnumValueOrderedMap();
			utest_Assert::notNull($inst2, null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 94, "className" => "thx.TestOrderedMap", "methodName" => "testAbstract")));
			$inst3 = new thx_ObjectOrderedMap();
			utest_Assert::notNull($inst3, null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 95, "className" => "thx.TestOrderedMap", "methodName" => "testAbstract")));
			unset($ml,$inst3,$inst2,$inst1,$inst,$acceptMap);
		}
	}
	public function testEmpty() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$inst = new thx_StringOrderedMap();
			$ml = $inst;
			$ml->setValue("k", "value");
			$inst1 = $ml->hempty();
			utest_Assert::isNull($inst1->get("k"), null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 103, "className" => "thx.TestOrderedMap", "methodName" => "testEmpty")));
			unset($ml,$inst1,$inst);
		}
	}
	public function testCopyTo() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$inst = new thx_StringOrderedMap();
			$ml = $inst;
			$ml->setValue("k", "value");
			$inst1 = $ml->hempty();
			$e = $inst1;
			{
				$tmp = $ml->keys();
				while(true) {
					$tmp1 = !$tmp->hasNext();
					if($tmp1) {
						break;
					}
					$key = $tmp->next();
					$tmp2 = $ml->get($key);
					$e->set($key, $tmp2);
					unset($tmp2,$tmp1,$key);
				}
				unset($tmp);
			}
			utest_Assert::equals("value", $e->get("k"), null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 112, "className" => "thx.TestOrderedMap", "methodName" => "testCopyTo")));
			unset($ml,$inst1,$inst,$e);
		}
	}
	public function testClone() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$inst = new thx_StringOrderedMap();
			$ml = $inst;
			$ml->setValue("k", "value");
			$inst1 = $ml->hempty();
			$that = $inst1;
			{
				$tmp = $ml->keys();
				while(true) {
					$tmp1 = !$tmp->hasNext();
					if($tmp1) {
						break;
					}
					$key = $tmp->next();
					$tmp2 = $ml->get($key);
					$that->set($key, $tmp2);
					unset($tmp2,$tmp1,$key);
				}
				unset($tmp);
			}
			utest_Assert::equals("value", $that->get("k"), null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 120, "className" => "thx.TestOrderedMap", "methodName" => "testClone")));
			unset($that,$ml,$inst1,$inst);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.TestOrderedMap'; }
}
function thx_TestOrderedMap_0($m) {
	{
		$tmp = $m->get("k");
		utest_Assert::equals("value", $tmp, null, _hx_anonymous(array("fileName" => "TestOrderedMap.hx", "lineNumber" => 89, "className" => "thx.TestOrderedMap", "methodName" => "testAbstract")));
	}
}
