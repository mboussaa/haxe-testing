<?php

// Generated by Haxe 3.3.0
class thx_TestSet {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testCreate() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$set = thx__Set_Set_Impl_::createInt(null);
			$tmp = thx__Set_Set_Impl_::get_length($set);
			utest_Assert::equals(0, $tmp, null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 15, "className" => "thx.TestSet", "methodName" => "testCreate")));
			thx__Set_Set_Impl_::add($set, 1);
			thx__Set_Set_Impl_::add($set, 1);
			$tmp1 = thx__Set_Set_Impl_::get_length($set);
			utest_Assert::equals(1, $tmp1, null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 18, "className" => "thx.TestSet", "methodName" => "testCreate")));
			unset($tmp1,$tmp,$set);
		}
	}
	public function testSet() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$set = thx__Set_Set_Impl_::createInt((new _hx_array(array(1, 2, 2, 2, 3))));
			$tmp = thx_Arrays::order(thx__Set_Set_Impl_::toArray($set), (isset(thx_Ints::$compare) ? thx_Ints::$compare: array("thx_Ints", "compare")));
			utest_Assert::same((new _hx_array(array(1, 2, 3))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 24, "className" => "thx.TestSet", "methodName" => "testSet")));
			unset($tmp,$set);
		}
	}
	public function testUnion() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$s1 = thx__Set_Set_Impl_::createInt((new _hx_array(array(1, 2, 3))));
			$s2 = thx__Set_Set_Impl_::createInt((new _hx_array(array(2, 2, 4))));
			$newset = thx__Set_Set_Impl_::copy($s1);
			thx__Set_Set_Impl_::pushMany($newset, thx__Set_Set_Impl_::toArray($s2));
			$tmp = thx_Arrays::order(thx__Set_Set_Impl_::toArray($newset), (isset(thx_Ints::$compare) ? thx_Ints::$compare: array("thx_Ints", "compare")));
			utest_Assert::same((new _hx_array(array(1, 2, 3, 4))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 31, "className" => "thx.TestSet", "methodName" => "testUnion")));
			unset($tmp,$s2,$s1,$newset);
		}
	}
	public function testDifference() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$s1 = thx__Set_Set_Impl_::createInt((new _hx_array(array(1, 2, 3))));
			$s2 = thx__Set_Set_Impl_::createInt((new _hx_array(array(2, 2, 4))));
			$result = thx__Set_Set_Impl_::copy($s1);
			{
				$tmp = thx__Set_Set_Impl_::iterator($s2);
				while(true) {
					$tmp1 = !$tmp->hasNext();
					if($tmp1) {
						break;
					}
					$item = $tmp->next();
					$result->remove($item);
					unset($tmp1,$item);
				}
				unset($tmp);
			}
			$tmp2 = thx_Arrays::order(thx__Set_Set_Impl_::toArray($result), (isset(thx_Ints::$compare) ? thx_Ints::$compare: array("thx_Ints", "compare")));
			utest_Assert::same((new _hx_array(array(1, 3))), $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 38, "className" => "thx.TestSet", "methodName" => "testDifference")));
			unset($tmp2,$s2,$s1,$result);
		}
	}
	public function testBooleans() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = thx__Set_Set_Impl_::createInt((new _hx_array(array(1, 2, 3))));
			$set = thx__Set_Set_Impl_::createInt((new _hx_array(array(2, 3, 4))));
			$newset = thx__Set_Set_Impl_::copy($this1);
			thx__Set_Set_Impl_::pushMany($newset, thx__Set_Set_Impl_::toArray($set));
			$this2 = $newset;
			$set1 = thx__Set_Set_Impl_::createInt((new _hx_array(array(2, 3))));
			$result = thx__Set_Set_Impl_::copy($this2);
			{
				$tmp = thx__Set_Set_Impl_::iterator($set1);
				while(true) {
					$tmp1 = !$tmp->hasNext();
					if($tmp1) {
						break;
					}
					$item = $tmp->next();
					$result->remove($item);
					unset($tmp1,$item);
				}
				unset($tmp);
			}
			$tmp2 = thx_Arrays::order(thx__Set_Set_Impl_::toArray($result), (isset(thx_Ints::$compare) ? thx_Ints::$compare: array("thx_Ints", "compare")));
			utest_Assert::same((new _hx_array(array(1, 4))), $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 46, "className" => "thx.TestSet", "methodName" => "testBooleans")));
			unset($tmp2,$this2,$this1,$set1,$set,$result,$newset);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.TestSet'; }
}
