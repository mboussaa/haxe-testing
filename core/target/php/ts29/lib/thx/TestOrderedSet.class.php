<?php

// Generated by Haxe 3.3.0
class thx_TestOrderedSet {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testCreate() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$set = thx__OrderedSet_OrderedSet_Impl_::create(null);
			utest_Assert::equals(0, $set->length, null, _hx_anonymous(array("fileName" => "TestOrderedSet.hx", "lineNumber" => 14, "className" => "thx.TestOrderedSet", "methodName" => "testCreate")));
			thx__OrderedSet_OrderedSet_Impl_::add($set, 1);
			thx__OrderedSet_OrderedSet_Impl_::add($set, 1);
			utest_Assert::equals(1, $set->length, null, _hx_anonymous(array("fileName" => "TestOrderedSet.hx", "lineNumber" => 17, "className" => "thx.TestOrderedSet", "methodName" => "testCreate")));
			unset($set);
		}
	}
	public function testOrderedSet() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$set = thx__OrderedSet_OrderedSet_Impl_::toOrderedSet((new _hx_array(array(1, 2, 2, 2, 3))));
			utest_Assert::same((new _hx_array(array(1, 2, 3))), thx__OrderedSet_OrderedSet_Impl_::toArray($set), null, null, null, _hx_anonymous(array("fileName" => "TestOrderedSet.hx", "lineNumber" => 23, "className" => "thx.TestOrderedSet", "methodName" => "testOrderedSet")));
			unset($set);
		}
	}
	public function testUnion() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$s1 = thx__OrderedSet_OrderedSet_Impl_::toOrderedSet((new _hx_array(array(1, 2, 3))));
			$s2 = thx__OrderedSet_OrderedSet_Impl_::toOrderedSet((new _hx_array(array(2, 2, 4))));
			$tmp = thx__OrderedSet_OrderedSet_Impl_::toArray($s2);
			$tmp1 = $s1->concat($tmp);
			$tmp2 = thx__OrderedSet_OrderedSet_Impl_::toOrderedSet($tmp1);
			utest_Assert::same((new _hx_array(array(1, 2, 3, 4))), thx__OrderedSet_OrderedSet_Impl_::toArray($tmp2), null, null, null, _hx_anonymous(array("fileName" => "TestOrderedSet.hx", "lineNumber" => 30, "className" => "thx.TestOrderedSet", "methodName" => "testUnion")));
			unset($tmp2,$tmp1,$tmp,$s2,$s1);
		}
	}
	public function testDifference() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$s1 = thx__OrderedSet_OrderedSet_Impl_::toOrderedSet((new _hx_array(array(1, 2, 3))));
			$s2 = thx__OrderedSet_OrderedSet_Impl_::toOrderedSet((new _hx_array(array(2, 2, 4))));
			$result = $s1->copy();
			{
				$tmp = $s2->iterator();
				while(true) {
					$tmp1 = !$tmp->hasNext();
					if($tmp1) {
						break;
					}
					$item = $tmp->next();
					$result->remove($item);
					unset($tmp1,$item);
				}
				unset($tmp);
			}
			utest_Assert::same((new _hx_array(array(1, 3))), thx__OrderedSet_OrderedSet_Impl_::toArray($result), null, null, null, _hx_anonymous(array("fileName" => "TestOrderedSet.hx", "lineNumber" => 37, "className" => "thx.TestOrderedSet", "methodName" => "testDifference")));
			unset($s2,$s1,$result);
		}
	}
	public function testBooleans() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$this1 = thx__OrderedSet_OrderedSet_Impl_::toOrderedSet((new _hx_array(array(1, 2, 3))));
			$set = thx__OrderedSet_OrderedSet_Impl_::toOrderedSet((new _hx_array(array(2, 3, 4))));
			$tmp = thx__OrderedSet_OrderedSet_Impl_::toArray($set);
			$tmp1 = $this1->concat($tmp);
			$this2 = thx__OrderedSet_OrderedSet_Impl_::toOrderedSet($tmp1);
			$set1 = thx__OrderedSet_OrderedSet_Impl_::toOrderedSet((new _hx_array(array(2, 3))));
			$result = $this2->copy();
			{
				$tmp2 = $set1->iterator();
				while(true) {
					$tmp3 = !$tmp2->hasNext();
					if($tmp3) {
						break;
					}
					$item = $tmp2->next();
					$result->remove($item);
					unset($tmp3,$item);
				}
				unset($tmp2);
			}
			utest_Assert::same((new _hx_array(array(1, 4))), $result, null, null, null, _hx_anonymous(array("fileName" => "TestOrderedSet.hx", "lineNumber" => 43, "className" => "thx.TestOrderedSet", "methodName" => "testBooleans")));
			unset($tmp1,$tmp,$this2,$this1,$set1,$set,$result);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.TestOrderedSet'; }
}
