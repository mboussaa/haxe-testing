<?php

// Generated by Haxe 3.3.0
class thx_TestFunctions {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testAfter() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$counter = 0;
			$test = array(new _hx_lambda(array(&$counter), "thx_TestFunctions_0"), 'execute');
			$callback = $test;
			$n = 3;
			$manage = array(new _hx_lambda(array(&$callback, &$n), "thx_TestFunctions_1"), 'execute');
			utest_Assert::equals(0, $counter, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 18, "className" => "thx.TestFunctions", "methodName" => "testAfter")));
			call_user_func($manage);
			utest_Assert::equals(0, $counter, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 20, "className" => "thx.TestFunctions", "methodName" => "testAfter")));
			call_user_func($manage);
			utest_Assert::equals(0, $counter, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 22, "className" => "thx.TestFunctions", "methodName" => "testAfter")));
			call_user_func($manage);
			utest_Assert::equals(1, $counter, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 24, "className" => "thx.TestFunctions", "methodName" => "testAfter")));
			call_user_func($manage);
			utest_Assert::equals(1, $counter, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 26, "className" => "thx.TestFunctions", "methodName" => "testAfter")));
			unset($test,$n,$manage,$counter,$callback);
		}
	}
	public function testOnce() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$counter = 0;
			$test = array(new _hx_lambda(array(&$counter), "thx_TestFunctions_2"), 'execute');
			$f = $test;
			$manage = array(new _hx_lambda(array(&$f), "thx_TestFunctions_3"), 'execute');
			utest_Assert::equals(0, $counter, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 35, "className" => "thx.TestFunctions", "methodName" => "testOnce")));
			call_user_func($manage);
			utest_Assert::equals(1, $counter, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 37, "className" => "thx.TestFunctions", "methodName" => "testOnce")));
			call_user_func($manage);
			utest_Assert::equals(1, $counter, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 39, "className" => "thx.TestFunctions", "methodName" => "testOnce")));
			unset($test,$manage,$f,$counter);
		}
	}
	public function testMemoize() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$counter = 0;
			$test = array(new _hx_lambda(array(&$counter), "thx_TestFunctions_4"), 'execute');
			$manage = thx_Functions1::memoize($test, null);
			utest_Assert::equals(0, $counter, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 51, "className" => "thx.TestFunctions", "methodName" => "testMemoize")));
			$tmp = call_user_func_array($manage, array(1));
			utest_Assert::equals(10, $tmp, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 52, "className" => "thx.TestFunctions", "methodName" => "testMemoize")));
			utest_Assert::equals(1, $counter, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 53, "className" => "thx.TestFunctions", "methodName" => "testMemoize")));
			$tmp1 = call_user_func_array($manage, array(1));
			utest_Assert::equals(10, $tmp1, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 54, "className" => "thx.TestFunctions", "methodName" => "testMemoize")));
			utest_Assert::equals(1, $counter, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 55, "className" => "thx.TestFunctions", "methodName" => "testMemoize")));
			$tmp2 = call_user_func_array($manage, array(2));
			utest_Assert::equals(20, $tmp2, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 56, "className" => "thx.TestFunctions", "methodName" => "testMemoize")));
			utest_Assert::equals(2, $counter, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 57, "className" => "thx.TestFunctions", "methodName" => "testMemoize")));
			unset($tmp2,$tmp1,$tmp,$test,$manage,$counter);
		}
	}
	public function testNegate() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			utest_Assert::isFalse(false, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 62, "className" => "thx.TestFunctions", "methodName" => "testNegate")));
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.TestFunctions'; }
}
function thx_TestFunctions_0(&$counter) {
	{
		$tmp = ++$counter;
		utest_Assert::equals(1, $tmp, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 15, "className" => "thx.TestFunctions", "methodName" => "testAfter")));
	}
}
function thx_TestFunctions_1(&$callback, &$n) {
	{
		$tmp1 = --$n;
		if($tmp1 === 0) {
			call_user_func($callback);
		}
	}
}
function thx_TestFunctions_2(&$counter) {
	{
		$tmp = ++$counter;
		utest_Assert::equals(1, $tmp, null, _hx_anonymous(array("fileName" => "TestFunctions.hx", "lineNumber" => 32, "className" => "thx.TestFunctions", "methodName" => "testOnce")));
	}
}
function thx_TestFunctions_3(&$f) {
	{
		$t = $f;
		$f = (isset(thx_Functions::$noop) ? thx_Functions::$noop: array("thx_Functions", "noop"));
		call_user_func($t);
	}
}
function thx_TestFunctions_4(&$counter, $x) {
	{
		++$counter;
		return $x * 10;
	}
}
