<?php

// Generated by Haxe 3.3.0
class thx_fp__Set_Set_Impl_ {
	public function __construct(){}
	static function hempty() {
		return thx_fp_SetImpl::$Tip;
	}
	static function singleton($x) {
		return thx_fp_SetImpl::Bin(1, $x, thx_fp_SetImpl::$Tip, thx_fp_SetImpl::$Tip);
	}
	static function bin($x, $l, $r) {
		return thx_fp_SetImpl::Bin(thx_fp__Set_Set_Impl_::size($l) + thx_fp__Set_Set_Impl_::size($r) + 1, $x, $l, $r);
	}
	static function isEmpty($this1) {
		switch($this1->index) {
		case 0:{
			return true;
		}break;
		case 1:{
			return false;
		}break;
		}
	}
	static function size($this1) {
		switch($this1->index) {
		case 0:{
			return 0;
		}break;
		case 1:{
			return _hx_deref($this1)->params[0];
		}break;
		}
	}
	static function member($this1, $x, $comparator) {
		$tmp = $this1->index;
		switch($tmp) {
		case 0:{
			return false;
		}break;
		case 1:{
			$r = _hx_deref($this1)->params[3];
			$l = _hx_deref($this1)->params[2];
			$_g = call_user_func_array($comparator, array($x, _hx_deref($this1)->params[1]));
			$tmp1 = $_g->index;
			switch($tmp1) {
			case 0:{
				return thx_fp__Set_Set_Impl_::member($l, $x, $comparator);
			}break;
			case 1:{
				return thx_fp__Set_Set_Impl_::member($r, $x, $comparator);
			}break;
			case 2:{
				return true;
			}break;
			}
		}break;
		}
	}
	static function foldLeft($this1, $b, $f) {
		$tmp = $this1->index;
		switch($tmp) {
		case 0:{
			return $b;
		}break;
		case 1:{
			$r = _hx_deref($this1)->params[3];
			$l = _hx_deref($this1)->params[2];
			$tmp1 = call_user_func_array($f, array($b, _hx_deref($this1)->params[1]));
			$tmp2 = thx_fp__Set_Set_Impl_::foldLeft($l, $tmp1, $f);
			return thx_fp__Set_Set_Impl_::foldLeft($r, $tmp2, $f);
		}break;
		}
	}
	static function insert($this1, $x, $comparator) {
		$tmp = $this1->index;
		switch($tmp) {
		case 0:{
			return thx_fp_SetImpl::Bin(1, $x, thx_fp_SetImpl::$Tip, thx_fp_SetImpl::$Tip);
		}break;
		case 1:{
			$r = _hx_deref($this1)->params[3];
			$l = _hx_deref($this1)->params[2];
			$y = _hx_deref($this1)->params[1];
			$sz = _hx_deref($this1)->params[0];
			$_g = call_user_func_array($comparator, array($x, $y));
			$tmp1 = $_g->index;
			switch($tmp1) {
			case 0:{
				$tmp2 = thx_fp__Set_Set_Impl_::insert($l, $x, $comparator);
				return thx_fp__Set_Set_Impl_::balance($l, $y, $tmp2, $r);
			}break;
			case 1:{
				$tmp3 = thx_fp__Set_Set_Impl_::insert($r, $x, $comparator);
				return thx_fp__Set_Set_Impl_::balance($r, $y, $l, $tmp3);
			}break;
			case 2:{
				return thx_fp_SetImpl::Bin($sz, $x, $l, $r);
			}break;
			}
		}break;
		}
	}
	static function mapList($this1, $f) {
		$tmp = $this1->index;
		switch($tmp) {
		case 0:{
			return thx_fp_ListImpl::$Nil;
		}break;
		case 1:{
			$r = _hx_deref($this1)->params[3];
			$l = _hx_deref($this1)->params[2];
			$x = call_user_func_array($f, array(_hx_deref($this1)->params[1]));
			$tmp1 = thx_fp__Set_Set_Impl_::mapList($l, $f);
			$tmp2 = thx_fp__Set_Set_Impl_::mapList($r, $f);
			$xs = thx_fp__List_List_Impl_::concat($tmp1, $tmp2);
			return thx_fp_ListImpl::Cons($x, $xs);
		}break;
		}
	}
	static $delta = 4;
	static $ratio = 4;
	static function balance($this1, $x, $l, $r) {
		$sl = thx_fp__Set_Set_Impl_::size($l);
		$sr = thx_fp__Set_Set_Impl_::size($r);
		$sx = $sl + $sr + 1;
		if($sl + $sr <= 1) {
			return thx_fp_SetImpl::Bin($sx, $x, $l, $r);
		} else {
			if($sr >= 4 * $sl) {
				return thx_fp__Set_Set_Impl_::rotateLeft($x, $l, $r);
			} else {
				if($sl >= 4 * $sr) {
					return thx_fp__Set_Set_Impl_::rotateRight($x, $l, $r);
				} else {
					return thx_fp_SetImpl::Bin($sx, $x, $l, $r);
				}
			}
		}
	}
	static function rotateLeft($x, $l, $r) {
		$tmp = $r->index === 1;
		if($tmp) {
			$ry = _hx_deref($r)->params[3];
			$ly = _hx_deref($r)->params[2];
			if(thx_fp__Set_Set_Impl_::size($ly) < 4 * thx_fp__Set_Set_Impl_::size($ry)) {
				return thx_fp__Set_Set_Impl_::singleLeft($x, $l, $r);
			} else {
				return thx_fp__Set_Set_Impl_::doubleLeft($x, $l, $r);
			}
		} else {
			return thx_fp__Set_Set_Impl_::doubleLeft($x, $l, $r);
		}
	}
	static function rotateRight($x, $l, $r) {
		$tmp = $l->index === 1;
		if($tmp) {
			$ry = _hx_deref($l)->params[3];
			$ly = _hx_deref($l)->params[2];
			if(thx_fp__Set_Set_Impl_::size($ry) < 4 * thx_fp__Set_Set_Impl_::size($ly)) {
				return thx_fp__Set_Set_Impl_::singleRight($x, $l, $r);
			} else {
				return thx_fp__Set_Set_Impl_::doubleRight($x, $l, $r);
			}
		} else {
			return thx_fp__Set_Set_Impl_::doubleRight($x, $l, $r);
		}
	}
	static function singleLeft($x1, $t1, $r) {
		$tmp = $r->index === 1;
		if($tmp) {
			$t3 = _hx_deref($r)->params[3];
			$t2 = _hx_deref($r)->params[2];
			$x2 = _hx_deref($r)->params[1];
			$l = thx_fp_SetImpl::Bin(thx_fp__Set_Set_Impl_::size($t1) + thx_fp__Set_Set_Impl_::size($t2) + 1, $x1, $t1, $t2);
			return thx_fp_SetImpl::Bin(thx_fp__Set_Set_Impl_::size($l) + thx_fp__Set_Set_Impl_::size($t3) + 1, $x2, $l, $t3);
		} else {
			throw new HException(new thx_Error("damn it, this should never happen", null, _hx_anonymous(array("fileName" => "Set.hx", "lineNumber" => 91, "className" => "thx.fp._Set.Set_Impl_", "methodName" => "singleLeft"))));
		}
	}
	static function singleRight($x1, $l, $t3) {
		$tmp = $l->index === 1;
		if($tmp) {
			$t2 = _hx_deref($l)->params[3];
			$t1 = _hx_deref($l)->params[2];
			$x2 = _hx_deref($l)->params[1];
			$r = thx_fp_SetImpl::Bin(thx_fp__Set_Set_Impl_::size($t2) + thx_fp__Set_Set_Impl_::size($t3) + 1, $x1, $t2, $t3);
			return thx_fp_SetImpl::Bin(thx_fp__Set_Set_Impl_::size($t1) + thx_fp__Set_Set_Impl_::size($r) + 1, $x2, $t1, $r);
		} else {
			throw new HException(new thx_Error("damn it, this should never happen", null, _hx_anonymous(array("fileName" => "Set.hx", "lineNumber" => 97, "className" => "thx.fp._Set.Set_Impl_", "methodName" => "singleRight"))));
		}
	}
	static function doubleLeft($x1, $t1, $r) {
		$tmp = $r->index === 1;
		if($tmp) {
			$tmp1 = _hx_deref($r)->params[2]->index === 1;
			if($tmp1) {
				$t4 = _hx_deref($r)->params[3];
				$x2 = _hx_deref($r)->params[1];
				$t3 = _hx_deref(_hx_deref($r)->params[2])->params[3];
				$t2 = _hx_deref(_hx_deref($r)->params[2])->params[2];
				$x3 = _hx_deref(_hx_deref($r)->params[2])->params[1];
				$l = thx_fp_SetImpl::Bin(thx_fp__Set_Set_Impl_::size($t1) + thx_fp__Set_Set_Impl_::size($t2) + 1, $x1, $t1, $t2);
				$r1 = thx_fp_SetImpl::Bin(thx_fp__Set_Set_Impl_::size($t3) + thx_fp__Set_Set_Impl_::size($t4) + 1, $x2, $t3, $t4);
				return thx_fp_SetImpl::Bin(thx_fp__Set_Set_Impl_::size($l) + thx_fp__Set_Set_Impl_::size($r1) + 1, $x3, $l, $r1);
			} else {
				throw new HException(new thx_Error("damn it, this should never happen", null, _hx_anonymous(array("fileName" => "Set.hx", "lineNumber" => 104, "className" => "thx.fp._Set.Set_Impl_", "methodName" => "doubleLeft"))));
			}
		} else {
			throw new HException(new thx_Error("damn it, this should never happen", null, _hx_anonymous(array("fileName" => "Set.hx", "lineNumber" => 104, "className" => "thx.fp._Set.Set_Impl_", "methodName" => "doubleLeft"))));
		}
	}
	static function doubleRight($x1, $l, $t4) {
		$tmp = $l->index === 1;
		if($tmp) {
			$tmp1 = _hx_deref($l)->params[3]->index === 1;
			if($tmp1) {
				$x2 = _hx_deref($l)->params[1];
				$t1 = _hx_deref($l)->params[2];
				$t3 = _hx_deref(_hx_deref($l)->params[3])->params[3];
				$t2 = _hx_deref(_hx_deref($l)->params[3])->params[2];
				$x3 = _hx_deref(_hx_deref($l)->params[3])->params[1];
				$l1 = thx_fp_SetImpl::Bin(thx_fp__Set_Set_Impl_::size($t1) + thx_fp__Set_Set_Impl_::size($t2) + 1, $x2, $t1, $t2);
				$r = thx_fp_SetImpl::Bin(thx_fp__Set_Set_Impl_::size($t3) + thx_fp__Set_Set_Impl_::size($t4) + 1, $x1, $t3, $t4);
				return thx_fp_SetImpl::Bin(thx_fp__Set_Set_Impl_::size($l1) + thx_fp__Set_Set_Impl_::size($r) + 1, $x3, $l1, $r);
			} else {
				throw new HException(new thx_Error("damn it, this should never happen", null, _hx_anonymous(array("fileName" => "Set.hx", "lineNumber" => 111, "className" => "thx.fp._Set.Set_Impl_", "methodName" => "doubleRight"))));
			}
		} else {
			throw new HException(new thx_Error("damn it, this should never happen", null, _hx_anonymous(array("fileName" => "Set.hx", "lineNumber" => 111, "className" => "thx.fp._Set.Set_Impl_", "methodName" => "doubleRight"))));
		}
	}
	static function toList($this1) {
		$tmp = $this1->index;
		switch($tmp) {
		case 0:{
			return thx_fp_ListImpl::$Nil;
		}break;
		case 1:{
			$r = _hx_deref($this1)->params[3];
			$l = _hx_deref($this1)->params[2];
			$x = _hx_deref($this1)->params[1];
			$tmp1 = thx_fp__Set_Set_Impl_::toList($l);
			$tmp2 = thx_fp__Set_Set_Impl_::toList($r);
			$xs = thx_fp__List_List_Impl_::concat($tmp1, $tmp2);
			return thx_fp_ListImpl::Cons($x, $xs);
		}break;
		}
	}
	function __toString() { return 'thx.fp._Set.Set_Impl_'; }
}
