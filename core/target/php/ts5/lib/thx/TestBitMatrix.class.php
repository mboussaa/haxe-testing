<?php

// Generated by Haxe 3.3.0
class thx_TestBitMatrix {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testNew() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$bits = thx__BitMatrix_BitMatrix_Impl_::_new(null, null);
			utest_Assert::same(0, thx__BitMatrix_BitMatrix_Impl_::get_bitSetCount($bits), null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 14, "className" => "thx.TestBitMatrix", "methodName" => "testNew")));
			utest_Assert::same(0, thx__BitMatrix_BitMatrix_Impl_::get_length($bits), null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 15, "className" => "thx.TestBitMatrix", "methodName" => "testNew")));
			$bits = thx__BitMatrix_BitMatrix_Impl_::_new(5, 10);
			utest_Assert::same(5, thx__BitMatrix_BitMatrix_Impl_::get_bitSetCount($bits), null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 18, "className" => "thx.TestBitMatrix", "methodName" => "testNew")));
			utest_Assert::same(10, thx__BitMatrix_BitMatrix_Impl_::get_length($bits), null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 19, "className" => "thx.TestBitMatrix", "methodName" => "testNew")));
			unset($bits);
		}
	}
	public function testBitMatrix() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$bits = thx__BitMatrix_BitMatrix_Impl_::_new(3, 3);
			thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 0, 0, true);
			thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 0, 1, true);
			thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 0, 2, true);
			thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 1, 0, false);
			thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 1, 1, false);
			thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 1, 2, false);
			thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 2, 0, true);
			thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 2, 1, false);
			thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 2, 2, true);
			$tmp = thx__BitMatrix_BitMatrix_Impl_::toString($bits, null);
			utest_Assert::equals("111,000,101", $tmp, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 34, "className" => "thx.TestBitMatrix", "methodName" => "testBitMatrix")));
			utest_Assert::raises(array(new _hx_lambda(array(&$bits), "thx_TestBitMatrix_0"), 'execute'), null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 37, "className" => "thx.TestBitMatrix", "methodName" => "testBitMatrix")));
			thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 0, 3, true);
			$tmp1 = thx__BitMatrix_BitMatrix_Impl_::toString($bits, null);
			utest_Assert::equals("1111,0000,1010", $tmp1, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 41, "className" => "thx.TestBitMatrix", "methodName" => "testBitMatrix")));
			utest_Assert::same(4, thx__BitMatrix_BitMatrix_Impl_::get_length($bits), null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 42, "className" => "thx.TestBitMatrix", "methodName" => "testBitMatrix")));
			thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 1, 4, true);
			$tmp2 = thx__BitMatrix_BitMatrix_Impl_::toString($bits, null);
			utest_Assert::equals("11110,00001,10100", $tmp2, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 45, "className" => "thx.TestBitMatrix", "methodName" => "testBitMatrix")));
			utest_Assert::same(5, thx__BitMatrix_BitMatrix_Impl_::get_length($bits), null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 46, "className" => "thx.TestBitMatrix", "methodName" => "testBitMatrix")));
			thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 2, 5, true);
			$tmp3 = thx__BitMatrix_BitMatrix_Impl_::toString($bits, null);
			utest_Assert::equals("111100,000010,101001", $tmp3, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 49, "className" => "thx.TestBitMatrix", "methodName" => "testBitMatrix")));
			utest_Assert::same(6, thx__BitMatrix_BitMatrix_Impl_::get_length($bits), null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 50, "className" => "thx.TestBitMatrix", "methodName" => "testBitMatrix")));
			unset($tmp3,$tmp2,$tmp1,$tmp,$bits);
		}
	}
	public function testClone() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$bits = thx__BitMatrix_BitMatrix_Impl_::_new(2, 3);
			thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 0, 0, true);
			thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 0, 1, true);
			thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 0, 2, true);
			thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 1, 0, false);
			thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 1, 1, false);
			thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 1, 2, false);
			$clone = thx__BitMatrix_BitMatrix_Impl_::hclone($bits);
			thx__BitMatrix_BitMatrix_Impl_::setBitAt($clone, 0, 1, false);
			thx__BitMatrix_BitMatrix_Impl_::setBitAt($clone, 1, 1, true);
			$tmp = thx__BitMatrix_BitMatrix_Impl_::toString($bits, null);
			utest_Assert::same("111,000", $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 65, "className" => "thx.TestBitMatrix", "methodName" => "testClone")));
			$tmp1 = thx__BitMatrix_BitMatrix_Impl_::toString($clone, null);
			utest_Assert::same("101,010", $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 66, "className" => "thx.TestBitMatrix", "methodName" => "testClone")));
			unset($tmp1,$tmp,$clone,$bits);
		}
	}
	public function testFromToString() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$bits = thx__BitMatrix_BitMatrix_Impl_::fromString("000,111,101,010", null);
			$tmp = thx__BitMatrix_BitMatrix_Impl_::toString($bits, null);
			utest_Assert::same("000,111,101,010", $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 72, "className" => "thx.TestBitMatrix", "methodName" => "testFromToString")));
			unset($tmp,$bits);
		}
	}
	public function testFromToBools() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$bits = thx__BitMatrix_BitMatrix_Impl_::fromBools((new _hx_array(array((new _hx_array(array(true, true))), (new _hx_array(array(false, false))), (new _hx_array(array(true, false))), (new _hx_array(array(false, true)))))));
			$tmp = thx__BitMatrix_BitMatrix_Impl_::toBools($bits);
			utest_Assert::same((new _hx_array(array((new _hx_array(array(true, true))), (new _hx_array(array(false, false))), (new _hx_array(array(true, false))), (new _hx_array(array(false, true)))))), $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 78, "className" => "thx.TestBitMatrix", "methodName" => "testFromToBools")));
			unset($tmp,$bits);
		}
	}
	public function testConcat() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$b1 = thx__BitMatrix_BitMatrix_Impl_::fromString("000,111,101,010", null);
			$b2 = thx__BitMatrix_BitMatrix_Impl_::fromString("111,000,111,000", null);
			$b3 = thx__BitMatrix_BitMatrix_Impl_::concat($b1, $b2);
			$tmp = thx__BitMatrix_BitMatrix_Impl_::toString($b1, null);
			utest_Assert::same("000,111,101,010", $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 86, "className" => "thx.TestBitMatrix", "methodName" => "testConcat")));
			$tmp1 = thx__BitMatrix_BitMatrix_Impl_::toString($b2, null);
			utest_Assert::same("111,000,111,000", $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 87, "className" => "thx.TestBitMatrix", "methodName" => "testConcat")));
			$tmp2 = thx__BitMatrix_BitMatrix_Impl_::toString($b3, null);
			utest_Assert::same("000111,111000,101111,010000", $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 88, "className" => "thx.TestBitMatrix", "methodName" => "testConcat")));
			utest_Assert::same(4, thx__BitMatrix_BitMatrix_Impl_::get_bitSetCount($b1), null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 89, "className" => "thx.TestBitMatrix", "methodName" => "testConcat")));
			utest_Assert::same(4, thx__BitMatrix_BitMatrix_Impl_::get_bitSetCount($b2), null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 90, "className" => "thx.TestBitMatrix", "methodName" => "testConcat")));
			utest_Assert::same(4, thx__BitMatrix_BitMatrix_Impl_::get_bitSetCount($b3), null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 91, "className" => "thx.TestBitMatrix", "methodName" => "testConcat")));
			utest_Assert::same(3, thx__BitMatrix_BitMatrix_Impl_::get_length($b1), null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 92, "className" => "thx.TestBitMatrix", "methodName" => "testConcat")));
			utest_Assert::same(3, thx__BitMatrix_BitMatrix_Impl_::get_length($b2), null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 93, "className" => "thx.TestBitMatrix", "methodName" => "testConcat")));
			utest_Assert::same(6, thx__BitMatrix_BitMatrix_Impl_::get_length($b3), null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 94, "className" => "thx.TestBitMatrix", "methodName" => "testConcat")));
			utest_Assert::raises(array(new _hx_lambda(array(), "thx_TestBitMatrix_1"), 'execute'), null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 96, "className" => "thx.TestBitMatrix", "methodName" => "testConcat")));
			unset($tmp2,$tmp1,$tmp,$b3,$b2,$b1);
		}
	}
	public function testExpand() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$b1 = thx__BitMatrix_BitMatrix_Impl_::fromString("000,111,101,010", null);
			$b2 = thx__BitMatrix_BitMatrix_Impl_::expand($b1, 1);
			$b3 = thx__BitMatrix_BitMatrix_Impl_::expand($b1, 3);
			$tmp = thx__BitMatrix_BitMatrix_Impl_::toString($b1, null);
			utest_Assert::same("000,111,101,010", $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 108, "className" => "thx.TestBitMatrix", "methodName" => "testExpand")));
			$tmp1 = thx__BitMatrix_BitMatrix_Impl_::toString($b2, null);
			utest_Assert::same("000000,111111,110011,001100", $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 109, "className" => "thx.TestBitMatrix", "methodName" => "testExpand")));
			$tmp2 = thx__BitMatrix_BitMatrix_Impl_::toString($b3, null);
			utest_Assert::same("000000000000,111111111111,111100001111,000011110000", $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 110, "className" => "thx.TestBitMatrix", "methodName" => "testExpand")));
			unset($tmp2,$tmp1,$tmp,$b3,$b2,$b1);
		}
	}
	public function testAnd() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$b1 = thx__BitMatrix_BitMatrix_Impl_::fromString("11,00", null);
			$b2 = thx__BitMatrix_BitMatrix_Impl_::fromString("10,10", null);
			$actual = thx__BitMatrix_BitMatrix_Impl_::hand($b1, $b2);
			$expected = thx__BitMatrix_BitMatrix_Impl_::fromString("10,00", null);
			$tmp = thx__BitMatrix_BitMatrix_Impl_::equals($expected, $actual);
			utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 119, "className" => "thx.TestBitMatrix", "methodName" => "testAnd")));
			unset($tmp,$expected,$b2,$b1,$actual);
		}
	}
	public function testOr() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$b1 = thx__BitMatrix_BitMatrix_Impl_::fromString("11,00", null);
			$b2 = thx__BitMatrix_BitMatrix_Impl_::fromString("10,10", null);
			$actual = thx__BitMatrix_BitMatrix_Impl_::hor($b1, $b2);
			$expected = thx__BitMatrix_BitMatrix_Impl_::fromString("11,10", null);
			$tmp = thx__BitMatrix_BitMatrix_Impl_::equals($expected, $actual);
			utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 128, "className" => "thx.TestBitMatrix", "methodName" => "testOr")));
			unset($tmp,$expected,$b2,$b1,$actual);
		}
	}
	public function testXor() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$b1 = thx__BitMatrix_BitMatrix_Impl_::fromString("11,00", null);
			$b2 = thx__BitMatrix_BitMatrix_Impl_::fromString("10,10", null);
			$actual = thx__BitMatrix_BitMatrix_Impl_::hxor($b1, $b2);
			$expected = thx__BitMatrix_BitMatrix_Impl_::fromString("01,10", null);
			$tmp = thx__BitMatrix_BitMatrix_Impl_::equals($expected, $actual);
			utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 137, "className" => "thx.TestBitMatrix", "methodName" => "testXor")));
			unset($tmp,$expected,$b2,$b1,$actual);
		}
	}
	public function testNegate() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$b1 = thx__BitMatrix_BitMatrix_Impl_::fromString("11,00", null);
			$actual = thx__BitMatrix_BitMatrix_Impl_::negate($b1);
			$expected = thx__BitMatrix_BitMatrix_Impl_::fromString("00,11", null);
			$tmp = thx__BitMatrix_BitMatrix_Impl_::equals($expected, $actual);
			utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestBitMatrix.hx", "lineNumber" => 145, "className" => "thx.TestBitMatrix", "methodName" => "testNegate")));
			unset($tmp,$expected,$b1,$actual);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.TestBitMatrix'; }
}
function thx_TestBitMatrix_0(&$bits) {
	{
		thx__BitMatrix_BitMatrix_Impl_::setBitAt($bits, 3, 0, true);
	}
}
function thx_TestBitMatrix_1() {
	{
		$b11 = thx__BitMatrix_BitMatrix_Impl_::fromString("000,111", null);
		$b21 = thx__BitMatrix_BitMatrix_Impl_::fromString("000,111,000", null);
		thx__BitMatrix_BitMatrix_Impl_::concat($b11, $b21);
	}
}
