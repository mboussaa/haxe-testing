<?php

// Generated by Haxe 3.3.0
class thx__BitSet_BitSet_Impl_ {
	public function __construct(){}
	static $blockSize = 32;
	static function _new($length) {
		$this1 = (new _hx_array(array($length)));
		$tmp = Std::int($length / 32);
		thx_Arrays::resize($this1, $tmp + 1 + 1, 0);
		return $this1;
	}
	static function hempty($length = null) {
		if($length === null) {
			$length = 0;
		}
		$this1 = (new _hx_array(array($length)));
		$tmp = Std::int($length / 32);
		thx_Arrays::resize($this1, $tmp + 1 + 1, 0);
		return $this1;
	}
	static function fromBools($values) {
		$this1 = (new _hx_array(array(0)));
		thx_Arrays::resize($this1, 2, 0);
		return thx_Arrays::reducei($values, array(new _hx_lambda(array(), "thx__BitSet_BitSet_Impl__0"), 'execute'), $this1);
	}
	static function fromString($str) {
		$chars = _hx_explode("", $str);
		$this1 = (new _hx_array(array(0)));
		thx_Arrays::resize($this1, 2, 0);
		return thx_Arrays::reducei($chars, array(new _hx_lambda(array(), "thx__BitSet_BitSet_Impl__1"), 'execute'), $this1);
	}
	static function toBools($this1) {
		return thx_Ints::range(thx__BitSet_BitSet_Impl_::get_length($this1), null, null)->map(array(new _hx_lambda(array(&$this1), "thx__BitSet_BitSet_Impl__2"), 'execute'));
	}
	static function toInt32s($this1) {
		$parts = $this1->slice(1, null);
		return $parts;
	}
	static function at($this1, $index) {
		$tmp = null;
		if($index >= 0) {
			$tmp = $index >= thx__BitSet_BitSet_Impl_::get_length($this1);
		} else {
			$tmp = true;
		}
		if($tmp) {
			throw new HException(new thx_Error("BitSet: index " . _hx_string_rec($index, "") . " out of bounds", null, _hx_anonymous(array("fileName" => "BitSet.hx", "lineNumber" => 88, "className" => "thx._BitSet.BitSet_Impl_", "methodName" => "at"))));
		}
		$tmp1 = Math::floor($index / 32);
		return ($this1->a[$tmp1 + 1] & 1 << _hx_mod($index, 32)) !== 0;
	}
	static function setAt($this1, $index, $value) {
		$tmp = Math::floor($index / 32);
		$blockIndex = $tmp + 1;
		$tmp1 = $blockIndex >= $this1->length;
		if($tmp1) {
			thx_Arrays::resize($this1, $blockIndex + 1, 0);
		}
		if($this1->a[0] <= $index) {
			$this1[0] = $index + 1;
		}
		$bitIndex = _hx_mod($index, 32);
		if($value) {
			$tmp2 = $this1[$blockIndex];
			$tmp3 = 1 << $bitIndex << haxe__Int32_Int32_Impl_::$extraBits;
			$this1[$blockIndex] = $tmp2 | $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
		} else {
			$tmp4 = $this1[$blockIndex];
			$tmp5 = 1 << $bitIndex << haxe__Int32_Int32_Impl_::$extraBits;
			$this1[$blockIndex] = $tmp4 & ~($tmp5 >> haxe__Int32_Int32_Impl_::$extraBits);
		}
		return $value;
	}
	static function hclone($this1) {
		$tmp = thx_Ints::range(thx__BitSet_BitSet_Impl_::get_length($this1), null, null);
		$this2 = (new _hx_array(array(0)));
		thx_Arrays::resize($this2, 2, 0);
		return thx_Arrays::reduce($tmp, array(new _hx_lambda(array(&$this1), "thx__BitSet_BitSet_Impl__3"), 'execute'), $this2);
	}
	static function setAll($this1, $value = null) {
		if($value === null) {
			$value = true;
		}
		{
			$_g1 = 0;
			$_g = thx__BitSet_BitSet_Impl_::get_length($this1);
			while($_g1 < $_g) {
				$i = $_g1++;
				thx__BitSet_BitSet_Impl_::setAt($this1, $i, $value);
				unset($i);
			}
		}
		return $this1;
	}
	static function clearAll($this1) {
		{
			$_g1 = 0;
			$_g = thx__BitSet_BitSet_Impl_::get_length($this1);
			while($_g1 < $_g) {
				$i = $_g1++;
				thx__BitSet_BitSet_Impl_::setAt($this1, $i, false);
				unset($i);
			}
		}
		return $this1;
	}
	static function concat($this1, $right) {
		$left = $this1;
		$length = thx__BitSet_BitSet_Impl_::get_length($left) + thx__BitSet_BitSet_Impl_::get_length($right) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$this2 = (new _hx_array(array($length)));
		$tmp = Std::int($length / 32);
		thx_Arrays::resize($this2, $tmp + 1 + 1, 0);
		$result = $this2;
		$index = 0;
		{
			$_g1 = 0;
			$_g = thx__BitSet_BitSet_Impl_::get_length($left);
			while($_g1 < $_g) {
				$leftIndex = $_g1++;
				$tmp1 = $index++;
				$tmp2 = thx__BitSet_BitSet_Impl_::at($left, $leftIndex);
				thx__BitSet_BitSet_Impl_::setAt($result, $tmp1, $tmp2);
				unset($tmp2,$tmp1,$leftIndex);
			}
		}
		{
			$_g11 = 0;
			$_g2 = thx__BitSet_BitSet_Impl_::get_length($right);
			while($_g11 < $_g2) {
				$rightIndex = $_g11++;
				$tmp3 = $index++;
				$tmp4 = thx__BitSet_BitSet_Impl_::at($right, $rightIndex);
				thx__BitSet_BitSet_Impl_::setAt($result, $tmp3, $tmp4);
				unset($tmp4,$tmp3,$rightIndex);
			}
		}
		return $result;
	}
	static function expand($this1, $count) {
		$array = thx_Ints::range(thx__BitSet_BitSet_Impl_::get_length($this1), null, null);
		$tmp = $array->map(array(new _hx_lambda(array(&$count, &$this1), "thx__BitSet_BitSet_Impl__4"), 'execute'));
		$values = thx_Arrays::flatten($tmp);
		$this2 = (new _hx_array(array(0)));
		thx_Arrays::resize($this2, 2, 0);
		return thx_Arrays::reducei($values, array(new _hx_lambda(array(), "thx__BitSet_BitSet_Impl__5"), 'execute'), $this2);
	}
	static function toString($this1) {
		return thx_Ints::range(thx__BitSet_BitSet_Impl_::get_length($this1), null, null)->map(array(new _hx_lambda(array(&$this1), "thx__BitSet_BitSet_Impl__6"), 'execute'))->join("");
	}
	static function hand($this1, $right) {
		return thx__BitSet_BitSet_Impl_::combine($this1, $right, array(new _hx_lambda(array(), "thx__BitSet_BitSet_Impl__7"), 'execute'));
	}
	static function hor($this1, $right) {
		return thx__BitSet_BitSet_Impl_::combine($this1, $right, array(new _hx_lambda(array(), "thx__BitSet_BitSet_Impl__8"), 'execute'));
	}
	static function hxor($this1, $right) {
		return thx__BitSet_BitSet_Impl_::combine($this1, $right, array(new _hx_lambda(array(), "thx__BitSet_BitSet_Impl__9"), 'execute'));
	}
	static function negate($this1) {
		$tmp = thx_Ints::range(thx__BitSet_BitSet_Impl_::get_length($this1), null, null);
		$this2 = (new _hx_array(array(0)));
		thx_Arrays::resize($this2, 2, 0);
		return thx_Arrays::reduce($tmp, array(new _hx_lambda(array(&$this1), "thx__BitSet_BitSet_Impl__10"), 'execute'), $this2);
	}
	static function equals($this1, $other) {
		if(thx__BitSet_BitSet_Impl_::get_length($this1) !== thx__BitSet_BitSet_Impl_::get_length($other)) {
			return false;
		}
		{
			$_g1 = 0;
			$_g = thx__BitSet_BitSet_Impl_::get_length($this1);
			while($_g1 < $_g) {
				$i = $_g1++;
				$tmp = thx__BitSet_BitSet_Impl_::at($this1, $i);
				$tmp1 = thx__BitSet_BitSet_Impl_::at($other, $i);
				if($tmp !== $tmp1) {
					return false;
				}
				unset($tmp1,$tmp,$i);
			}
		}
		return true;
	}
	static function notEquals($this1, $other) {
		return !thx__BitSet_BitSet_Impl_::equals($this1, $other);
	}
	static function combine($this1, $right, $combiner) {
		$left = $this1;
		$a = thx__BitSet_BitSet_Impl_::get_length($left);
		$b = thx__BitSet_BitSet_Impl_::get_length($right);
		$length = null;
		if($a > $b) {
			$length = $a;
		} else {
			$length = $b;
		}
		$tmp = thx_Ints::range($length, null, null);
		$this2 = (new _hx_array(array(0)));
		thx_Arrays::resize($this2, 2, 0);
		return thx_Arrays::reduce($tmp, array(new _hx_lambda(array(&$combiner, &$left, &$right), "thx__BitSet_BitSet_Impl__11"), 'execute'), $this2);
	}
	static function get_length($this1) {
		return $this1[0];
	}
	static $__properties__ = array("get_length" => "get_length");
	function __toString() { return 'thx._BitSet.BitSet_Impl_'; }
}
function thx__BitSet_BitSet_Impl__0($acc, $value, $i) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc, $i, $value);
		return $acc;
	}
}
function thx__BitSet_BitSet_Impl__1($acc, $char, $i) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc, $i, $char === "1");
		return $acc;
	}
}
function thx__BitSet_BitSet_Impl__2(&$this1, $index) {
	{
		return thx__BitSet_BitSet_Impl_::at($this1, $index);
	}
}
function thx__BitSet_BitSet_Impl__3(&$this1, $acc, $i) {
	{
		$tmp1 = thx__BitSet_BitSet_Impl_::at($this1, $i);
		thx__BitSet_BitSet_Impl_::setAt($acc, $i, $tmp1);
		return $acc;
	}
}
function thx__BitSet_BitSet_Impl__4(&$count, &$this1, $index) {
	{
		$tmp1 = $count + 1;
		$tmp2 = thx__BitSet_BitSet_Impl_::at($this1, $index);
		return thx_Arrays::create($tmp1, $tmp2);
	}
}
function thx__BitSet_BitSet_Impl__5($acc, $value, $i) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc, $i, $value);
		return $acc;
	}
}
function thx__BitSet_BitSet_Impl__6(&$this1, $index) {
	{
		$tmp = thx__BitSet_BitSet_Impl_::at($this1, $index);
		if($tmp) {
			return "1";
		} else {
			return "0";
		}
	}
}
function thx__BitSet_BitSet_Impl__7($l, $r) {
	{
		if($l) {
			return $r;
		} else {
			return false;
		}
	}
}
function thx__BitSet_BitSet_Impl__8($l, $r) {
	{
		if(!$l) {
			return $r;
		} else {
			return true;
		}
	}
}
function thx__BitSet_BitSet_Impl__9($l, $r) {
	{
		$tmp = null;
		if($l) {
			$tmp = !$r;
		} else {
			$tmp = false;
		}
		if(!$tmp) {
			if(!$l) {
				return $r;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
}
function thx__BitSet_BitSet_Impl__10(&$this1, $acc, $i) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc, $i, !thx__BitSet_BitSet_Impl_::at($this1, $i));
		return $acc;
	}
}
function thx__BitSet_BitSet_Impl__11(&$combiner, &$left, &$right, $acc, $i) {
	{
		$leftBit = thx__BitSet_BitSet_Impl_::at($left, $i);
		$rightBit = thx__BitSet_BitSet_Impl_::at($right, $i);
		$tmp1 = call_user_func_array($combiner, array($leftBit, $rightBit));
		thx__BitSet_BitSet_Impl_::setAt($acc, $i, $tmp1);
		return $acc;
	}
}
