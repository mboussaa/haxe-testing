<?php

// Generated by Haxe 3.3.0
class thx__BitMatrix_BitMatrix_Impl_ {
	public function __construct(){}
	static function _new($bitSetCount = null, $length = null) {
		if($length === null) {
			$length = 0;
		}
		if($bitSetCount === null) {
			$bitSetCount = 0;
		}
		return thx__BitMatrix_BitMatrix_Impl_::hempty($bitSetCount, $length);
	}
	static function hempty($bitSetCount = null, $length = null) {
		if($length === null) {
			$length = 0;
		}
		if($bitSetCount === null) {
			$bitSetCount = 0;
		}
		$bitMatrix = (new _hx_array(array()));
		{
			$_g1 = 0;
			while($_g1 < $bitSetCount) {
				$bitSetIndex = $_g1++;
				$this1 = (new _hx_array(array($length)));
				$tmp = Std::int($length / 32);
				thx_Arrays::resize($this1, $tmp + 1 + 1, 0);
				thx__BitMatrix_BitMatrix_Impl_::setBitSetAt($bitMatrix, $bitSetIndex, $this1);
				unset($tmp,$this1,$bitSetIndex);
			}
		}
		return $bitMatrix;
	}
	static function fromBitSets($bitSets) {
		$bitMatrix = thx__BitMatrix_BitMatrix_Impl_::_new(null, null);
		{
			$_g1 = 0;
			$_g = $bitSets->length;
			while($_g1 < $_g) {
				$bitSetIndex = $_g1++;
				thx__BitMatrix_BitMatrix_Impl_::setBitSetAt($bitMatrix, $bitSetIndex, $bitSets[$bitSetIndex]);
				unset($bitSetIndex);
			}
		}
		return $bitMatrix;
	}
	static function fromBools($input) {
		$bitSets = $input->map(array(new _hx_lambda(array(), "thx__BitMatrix_BitMatrix_Impl__0"), 'execute'));
		return thx__BitMatrix_BitMatrix_Impl_::fromBitSets($bitSets);
	}
	static function fromString($input, $delimiter = null) {
		if($delimiter === null) {
			$delimiter = ",";
		}
		$bitSetStrings = _hx_explode($delimiter, $input);
		$bitSets = $bitSetStrings->map((isset(thx__BitSet_BitSet_Impl_::$fromString) ? thx__BitSet_BitSet_Impl_::$fromString: array("thx__BitSet_BitSet_Impl_", "fromString")));
		return thx__BitMatrix_BitMatrix_Impl_::fromBitSets($bitSets);
	}
	static function toBools($this1) {
		return $this1->map(array(new _hx_lambda(array(), "thx__BitMatrix_BitMatrix_Impl__1"), 'execute'));
	}
	static function bitAt($this1, $bitSetIndex, $bitIndex) {
		$bitSet = thx__BitMatrix_BitMatrix_Impl_::bitSetAt($this1, $bitSetIndex);
		return thx__BitSet_BitSet_Impl_::at($bitSet, $bitIndex);
	}
	static function setBitAt($this1, $bitSetIndex, $bitIndex, $value) {
		if($bitIndex >= thx__BitMatrix_BitMatrix_Impl_::get_length($this1)) {
			$_g = 0;
			while($_g < $this1->length) {
				$bitSet = $this1[$_g];
				++$_g;
				thx__BitSet_BitSet_Impl_::setAt($bitSet, $bitIndex, false);
				unset($bitSet);
			}
		}
		$bitSet1 = thx__BitMatrix_BitMatrix_Impl_::bitSetAt($this1, $bitSetIndex);
		return thx__BitSet_BitSet_Impl_::setAt($bitSet1, $bitIndex, $value);
	}
	static function hclone($this1) {
		$tmp = thx_Ints::range(thx__BitMatrix_BitMatrix_Impl_::get_bitSetCount($this1), null, null);
		$tmp1 = thx__BitMatrix_BitMatrix_Impl_::_new(null, null);
		return thx_Arrays::reduce($tmp, array(new _hx_lambda(array(&$this1), "thx__BitMatrix_BitMatrix_Impl__2"), 'execute'), $tmp1);
	}
	static function concat($this1, $right) {
		$left = $this1;
		if(thx__BitMatrix_BitMatrix_Impl_::get_bitSetCount($left) !== thx__BitMatrix_BitMatrix_Impl_::get_bitSetCount($right)) {
			throw new HException(new thx_Error("cannot concat bit matrices with different bit set counts", null, _hx_anonymous(array("fileName" => "BitMatrix.hx", "lineNumber" => 77, "className" => "thx._BitMatrix.BitMatrix_Impl_", "methodName" => "concat"))));
		}
		$tmp = thx_Ints::range(thx__BitMatrix_BitMatrix_Impl_::get_bitSetCount($left), null, null);
		$bitSets = thx_Arrays::reduce($tmp, array(new _hx_lambda(array(&$left, &$right), "thx__BitMatrix_BitMatrix_Impl__3"), 'execute'), (new _hx_array(array())));
		return thx__BitMatrix_BitMatrix_Impl_::fromBitSets($bitSets);
	}
	static function expand($this1, $count) {
		$tmp = $this1->map(array(new _hx_lambda(array(&$count), "thx__BitMatrix_BitMatrix_Impl__4"), 'execute'));
		return thx__BitMatrix_BitMatrix_Impl_::fromBitSets($tmp);
	}
	static function toString($this1, $delimiter = null) {
		if($delimiter === null) {
			$delimiter = ",";
		}
		return $this1->map(array(new _hx_lambda(array(), "thx__BitMatrix_BitMatrix_Impl__5"), 'execute'))->join($delimiter);
	}
	static function hand($this1, $right) {
		return thx__BitMatrix_BitMatrix_Impl_::combine($this1, $right, array(new _hx_lambda(array(), "thx__BitMatrix_BitMatrix_Impl__6"), 'execute'));
	}
	static function hor($this1, $right) {
		return thx__BitMatrix_BitMatrix_Impl_::combine($this1, $right, array(new _hx_lambda(array(), "thx__BitMatrix_BitMatrix_Impl__7"), 'execute'));
	}
	static function hxor($this1, $right) {
		return thx__BitMatrix_BitMatrix_Impl_::combine($this1, $right, array(new _hx_lambda(array(), "thx__BitMatrix_BitMatrix_Impl__8"), 'execute'));
	}
	static function negate($this1) {
		$bits = $this1;
		$tmp = thx_Ints::range(thx__BitMatrix_BitMatrix_Impl_::get_bitSetCount($this1), null, null);
		$tmp1 = thx__BitMatrix_BitMatrix_Impl_::_new(thx__BitMatrix_BitMatrix_Impl_::get_bitSetCount($this1), thx__BitMatrix_BitMatrix_Impl_::get_length($this1));
		return thx_Arrays::reduce($tmp, array(new _hx_lambda(array(&$bits, &$this1), "thx__BitMatrix_BitMatrix_Impl__9"), 'execute'), $tmp1);
	}
	static function equals($this1, $right) {
		$left = $this1;
		if(thx__BitMatrix_BitMatrix_Impl_::get_bitSetCount($left) !== thx__BitMatrix_BitMatrix_Impl_::get_bitSetCount($right)) {
			return false;
		}
		if(thx__BitMatrix_BitMatrix_Impl_::get_length($left) !== thx__BitMatrix_BitMatrix_Impl_::get_length($right)) {
			return false;
		}
		{
			$_g1 = 0;
			$_g = thx__BitMatrix_BitMatrix_Impl_::get_bitSetCount($this1);
			while($_g1 < $_g) {
				$i = $_g1++;
				$tmp = thx__BitMatrix_BitMatrix_Impl_::bitSetAt($left, $i);
				$tmp1 = thx__BitMatrix_BitMatrix_Impl_::bitSetAt($right, $i);
				$tmp2 = !thx__BitSet_BitSet_Impl_::equals($tmp, $tmp1);
				if($tmp2) {
					return false;
				}
				unset($tmp2,$tmp1,$tmp,$i);
			}
		}
		return true;
	}
	static function notEquals($this1, $right) {
		$left = $this1;
		return !thx__BitMatrix_BitMatrix_Impl_::equals($left, $right);
	}
	static function get_bitSetCount($this1) {
		return $this1->length;
	}
	static function get_length($this1) {
		if(thx__BitMatrix_BitMatrix_Impl_::get_bitSetCount($this1) === 0) {
			return 0;
		}
		return thx__BitSet_BitSet_Impl_::get_length($this1[0]);
	}
	static function bitSetAt($this1, $index) {
		$tmp = null;
		if($index >= 0) {
			$tmp = $index >= thx__BitMatrix_BitMatrix_Impl_::get_bitSetCount($this1);
		} else {
			$tmp = true;
		}
		if($tmp) {
			throw new HException(new thx_Error("BitMatrix: index " . _hx_string_rec($index, "") . " is out of bounds", null, _hx_anonymous(array("fileName" => "BitMatrix.hx", "lineNumber" => 166, "className" => "thx._BitMatrix.BitMatrix_Impl_", "methodName" => "bitSetAt"))));
		}
		return $this1[$index];
	}
	static function setBitSetAt($this1, $index, $bitSet) {
		$tmp = null;
		if(thx__BitMatrix_BitMatrix_Impl_::get_bitSetCount($this1) > 0) {
			$tmp = thx__BitMatrix_BitMatrix_Impl_::get_length($this1) !== thx__BitSet_BitSet_Impl_::get_length($bitSet);
		} else {
			$tmp = false;
		}
		if($tmp) {
			throw new HException(new thx_Error("BitMatrix: added BitSet must have same length as BitMatrix length " . _hx_string_rec(thx__BitMatrix_BitMatrix_Impl_::get_length($this1), ""), null, _hx_anonymous(array("fileName" => "BitMatrix.hx", "lineNumber" => 173, "className" => "thx._BitMatrix.BitMatrix_Impl_", "methodName" => "setBitSetAt"))));
		}
		return $this1[$index] = $bitSet;
	}
	static function combine($this1, $right, $combiner) {
		$left = $this1;
		if(thx__BitMatrix_BitMatrix_Impl_::get_bitSetCount($left) !== thx__BitMatrix_BitMatrix_Impl_::get_bitSetCount($right)) {
			throw new HException(new thx_Error("cannot \"and\" BitMatrices of different BitSet counts", null, _hx_anonymous(array("fileName" => "BitMatrix.hx", "lineNumber" => 180, "className" => "thx._BitMatrix.BitMatrix_Impl_", "methodName" => "combine"))));
		}
		if(thx__BitMatrix_BitMatrix_Impl_::get_length($left) !== thx__BitMatrix_BitMatrix_Impl_::get_length($right)) {
			throw new HException(new thx_Error("cannot \"and\" BitMatrices of different lengths", null, _hx_anonymous(array("fileName" => "BitMatrix.hx", "lineNumber" => 181, "className" => "thx._BitMatrix.BitMatrix_Impl_", "methodName" => "combine"))));
		}
		$tmp = thx_Ints::range(thx__BitMatrix_BitMatrix_Impl_::get_bitSetCount($this1), null, null);
		$tmp1 = thx__BitMatrix_BitMatrix_Impl_::_new(thx__BitMatrix_BitMatrix_Impl_::get_bitSetCount($left), thx__BitMatrix_BitMatrix_Impl_::get_length($left));
		return thx_Arrays::reduce($tmp, array(new _hx_lambda(array(&$combiner, &$left, &$right, &$this1), "thx__BitMatrix_BitMatrix_Impl__10"), 'execute'), $tmp1);
	}
	static $__properties__ = array("get_length" => "get_length","get_bitSetCount" => "get_bitSetCount");
	function __toString() { return 'thx._BitMatrix.BitMatrix_Impl_'; }
}
function thx__BitMatrix_BitMatrix_Impl__0($_) {
	{
		$this1 = (new _hx_array(array(0)));
		thx_Arrays::resize($this1, 2, 0);
		return thx_Arrays::reducei($_, array(new _hx_lambda(array(), "thx__BitMatrix_BitMatrix_Impl__11"), 'execute'), $this1);
	}
}
function thx__BitMatrix_BitMatrix_Impl__1($bitSet) {
	{
		$this2 = $bitSet;
		return thx_Ints::range(thx__BitSet_BitSet_Impl_::get_length($this2), null, null)->map(array(new _hx_lambda(array(&$this2), "thx__BitMatrix_BitMatrix_Impl__12"), 'execute'));
	}
}
function thx__BitMatrix_BitMatrix_Impl__2(&$this1, $acc, $i) {
	{
		$this2 = thx__BitMatrix_BitMatrix_Impl_::bitSetAt($this1, $i);
		$tmp2 = thx_Ints::range(thx__BitSet_BitSet_Impl_::get_length($this2), null, null);
		$this3 = (new _hx_array(array(0)));
		thx_Arrays::resize($this3, 2, 0);
		$tmp3 = thx_Arrays::reduce($tmp2, array(new _hx_lambda(array(&$this2), "thx__BitMatrix_BitMatrix_Impl__13"), 'execute'), $this3);
		thx__BitMatrix_BitMatrix_Impl_::setBitSetAt($acc, $i, $tmp3);
		return $acc;
	}
}
function thx__BitMatrix_BitMatrix_Impl__3(&$left, &$right, $bitSets1, $bitSetIndex) {
	{
		$this2 = thx__BitMatrix_BitMatrix_Impl_::bitSetAt($left, $bitSetIndex);
		$right1 = thx__BitMatrix_BitMatrix_Impl_::bitSetAt($right, $bitSetIndex);
		$left1 = $this2;
		$length = thx__BitSet_BitSet_Impl_::get_length($left1) + thx__BitSet_BitSet_Impl_::get_length($right1) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$this3 = (new _hx_array(array($length)));
		$tmp1 = Std::int($length / 32);
		thx_Arrays::resize($this3, $tmp1 + 1 + 1, 0);
		$result = $this3;
		$index = 0;
		{
			$_g1 = 0;
			$_g = thx__BitSet_BitSet_Impl_::get_length($left1);
			while($_g1 < $_g) {
				$leftIndex = $_g1++;
				$tmp2 = $index++;
				$tmp3 = thx__BitSet_BitSet_Impl_::at($left1, $leftIndex);
				thx__BitSet_BitSet_Impl_::setAt($result, $tmp2, $tmp3);
				unset($tmp3,$tmp2,$leftIndex);
			}
		}
		{
			$_g11 = 0;
			$_g2 = thx__BitSet_BitSet_Impl_::get_length($right1);
			while($_g11 < $_g2) {
				$rightIndex = $_g11++;
				$tmp4 = $index++;
				$tmp5 = thx__BitSet_BitSet_Impl_::at($right1, $rightIndex);
				thx__BitSet_BitSet_Impl_::setAt($result, $tmp4, $tmp5);
				unset($tmp5,$tmp4,$rightIndex);
			}
		}
		$bitSets1[$bitSetIndex] = $result;
		return $bitSets1;
	}
}
function thx__BitMatrix_BitMatrix_Impl__4(&$count, $bitSet) {
	{
		return thx__BitSet_BitSet_Impl_::expand($bitSet, $count);
	}
}
function thx__BitMatrix_BitMatrix_Impl__5($_) {
	{
		return thx__BitSet_BitSet_Impl_::toString($_);
	}
}
function thx__BitMatrix_BitMatrix_Impl__6($l, $r) {
	{
		if($l) {
			return $r;
		} else {
			return false;
		}
	}
}
function thx__BitMatrix_BitMatrix_Impl__7($l, $r) {
	{
		if(!$l) {
			return $r;
		} else {
			return true;
		}
	}
}
function thx__BitMatrix_BitMatrix_Impl__8($l, $r) {
	{
		$tmp = null;
		if($l) {
			$tmp = !$r;
		} else {
			$tmp = false;
		}
		if(!$tmp) {
			if(!$l) {
				return $r;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
}
function thx__BitMatrix_BitMatrix_Impl__9(&$bits, &$this1, $acc, $bitSetIndex) {
	{
		$tmp2 = thx_Ints::range(thx__BitMatrix_BitMatrix_Impl_::get_length($this1), null, null);
		return thx_Arrays::reduce($tmp2, array(new _hx_lambda(array(&$bitSetIndex, &$bits), "thx__BitMatrix_BitMatrix_Impl__14"), 'execute'), $acc);
	}
}
function thx__BitMatrix_BitMatrix_Impl__10(&$combiner, &$left, &$right, &$this1, $acc, $bitSetIndex) {
	{
		$tmp2 = thx_Ints::range(thx__BitMatrix_BitMatrix_Impl_::get_length($this1), null, null);
		return thx_Arrays::reduce($tmp2, array(new _hx_lambda(array(&$bitSetIndex, &$combiner, &$left, &$right), "thx__BitMatrix_BitMatrix_Impl__15"), 'execute'), $acc);
	}
}
function thx__BitMatrix_BitMatrix_Impl__11($acc, $value, $i) {
	{
		thx__BitSet_BitSet_Impl_::setAt($acc, $i, $value);
		return $acc;
	}
}
function thx__BitMatrix_BitMatrix_Impl__12(&$this2, $index) {
	{
		return thx__BitSet_BitSet_Impl_::at($this2, $index);
	}
}
function thx__BitMatrix_BitMatrix_Impl__13(&$this2, $acc1, $i1) {
	{
		$tmp4 = thx__BitSet_BitSet_Impl_::at($this2, $i1);
		thx__BitSet_BitSet_Impl_::setAt($acc1, $i1, $tmp4);
		return $acc1;
	}
}
function thx__BitMatrix_BitMatrix_Impl__14(&$bitSetIndex, &$bits, $acc1, $bitIndex) {
	{
		thx__BitMatrix_BitMatrix_Impl_::setBitAt($acc1, $bitSetIndex, $bitIndex, !thx__BitMatrix_BitMatrix_Impl_::bitAt($bits, $bitSetIndex, $bitIndex));
		return $acc1;
	}
}
function thx__BitMatrix_BitMatrix_Impl__15(&$bitSetIndex, &$combiner, &$left, &$right, $acc1, $bitIndex) {
	{
		$tmp3 = thx__BitMatrix_BitMatrix_Impl_::bitAt($left, $bitSetIndex, $bitIndex);
		$tmp4 = thx__BitMatrix_BitMatrix_Impl_::bitAt($right, $bitSetIndex, $bitIndex);
		$tmp5 = call_user_func_array($combiner, array($tmp3, $tmp4));
		thx__BitMatrix_BitMatrix_Impl_::setBitAt($acc1, $bitSetIndex, $bitIndex, $tmp5);
		return $acc1;
	}
}
