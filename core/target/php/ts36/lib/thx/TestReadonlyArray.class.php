<?php

// Generated by Haxe 3.3.0
class thx_TestReadonlyArray {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testInsertAt() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$a = (new _hx_array(array(1, 2, 4)));
			$tmp = $a->slice(0, 0)->concat((new _hx_array(array(0))));
			$tmp1 = $a->slice(0, null);
			$b = $tmp->concat($tmp1);
			utest_Assert::isTrue($a !== $b, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 20, "className" => "thx.TestReadonlyArray", "methodName" => "testInsertAt")));
			utest_Assert::same((new _hx_array(array(0, 1, 2, 4))), $b, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 21, "className" => "thx.TestReadonlyArray", "methodName" => "testInsertAt")));
			$tmp2 = $a->slice(0, 2)->concat((new _hx_array(array(3))));
			$tmp3 = $a->slice(2, null);
			$b = $tmp2->concat($tmp3);
			utest_Assert::same((new _hx_array(array(1, 2, 3, 4))), $b, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 24, "className" => "thx.TestReadonlyArray", "methodName" => "testInsertAt")));
			$tmp4 = $a->slice(0, 10)->concat((new _hx_array(array(5))));
			$tmp5 = $a->slice(10, null);
			$b = $tmp4->concat($tmp5);
			utest_Assert::same((new _hx_array(array(1, 2, 4, 5))), $b, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 27, "className" => "thx.TestReadonlyArray", "methodName" => "testInsertAt")));
			unset($tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$b,$a);
		}
	}
	public function testReplaceAt() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$a = (new _hx_array(array(1, 2, 4)));
			$tmp = $a->slice(0, 0)->concat((new _hx_array(array(0))));
			$tmp1 = $a->slice(1, null);
			$b = $tmp->concat($tmp1);
			utest_Assert::isTrue($a !== $b, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 34, "className" => "thx.TestReadonlyArray", "methodName" => "testReplaceAt")));
			utest_Assert::same((new _hx_array(array(0, 2, 4))), $b, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 35, "className" => "thx.TestReadonlyArray", "methodName" => "testReplaceAt")));
			$tmp2 = $a->slice(0, 2)->concat((new _hx_array(array(3))));
			$tmp3 = $a->slice(3, null);
			$b = $tmp2->concat($tmp3);
			utest_Assert::same((new _hx_array(array(1, 2, 3))), $b, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 38, "className" => "thx.TestReadonlyArray", "methodName" => "testReplaceAt")));
			$tmp4 = $a->slice(0, 10)->concat((new _hx_array(array(5))));
			$tmp5 = $a->slice(11, null);
			$b = $tmp4->concat($tmp5);
			utest_Assert::same((new _hx_array(array(1, 2, 4, 5))), $b, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 41, "className" => "thx.TestReadonlyArray", "methodName" => "testReplaceAt")));
			unset($tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$b,$a);
		}
	}
	public function testPush() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$a = (new _hx_array(array(1, 2, 3)));
			$b = $a->concat((new _hx_array(array(4))));
			utest_Assert::same((new _hx_array(array(1, 2, 3))), $a, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 48, "className" => "thx.TestReadonlyArray", "methodName" => "testPush")));
			utest_Assert::same((new _hx_array(array(1, 2, 3, 4))), $b, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 49, "className" => "thx.TestReadonlyArray", "methodName" => "testPush")));
			unset($b,$a);
		}
	}
	public function testPop() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$a = (new _hx_array(array(1, 2)));
			$result = null;
			$tmp = $a->length === 0;
			if($tmp) {
				$result = _hx_anonymous(array("_0" => null, "_1" => $a));
			} else {
				$value = $a[$a->length - 1];
				$pos = $a->length - 1;
				$tmp1 = $a->slice(0, $pos);
				$tmp2 = $a->slice($pos + 1, null);
				$array = $tmp1->concat($tmp2);
				$result = _hx_anonymous(array("_0" => $value, "_1" => $array));
				unset($value,$tmp2,$tmp1,$pos,$array);
			}
			utest_Assert::same(2, $result->_0, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 57, "className" => "thx.TestReadonlyArray", "methodName" => "testPop")));
			utest_Assert::same((new _hx_array(array(1))), $result->_1, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 58, "className" => "thx.TestReadonlyArray", "methodName" => "testPop")));
			$b = $result->_1;
			$tmp3 = $b->length === 0;
			if($tmp3) {
				$result = _hx_anonymous(array("_0" => null, "_1" => $b));
			} else {
				$value1 = $b[$b->length - 1];
				$pos1 = $b->length - 1;
				$tmp4 = $b->slice(0, $pos1);
				$tmp5 = $b->slice($pos1 + 1, null);
				$array1 = $tmp4->concat($tmp5);
				$result = _hx_anonymous(array("_0" => $value1, "_1" => $array1));
				unset($value1,$tmp5,$tmp4,$pos1,$array1);
			}
			utest_Assert::same(1, $result->_0, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 62, "className" => "thx.TestReadonlyArray", "methodName" => "testPop")));
			utest_Assert::same((new _hx_array(array())), $result->_1, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 63, "className" => "thx.TestReadonlyArray", "methodName" => "testPop")));
			$c = $result->_1;
			$tmp6 = $c->length === 0;
			if($tmp6) {
				$result = _hx_anonymous(array("_0" => null, "_1" => $c));
			} else {
				$value2 = $c[$c->length - 1];
				$pos2 = $c->length - 1;
				$tmp7 = $c->slice(0, $pos2);
				$tmp8 = $c->slice($pos2 + 1, null);
				$array2 = $tmp7->concat($tmp8);
				$result = _hx_anonymous(array("_0" => $value2, "_1" => $array2));
				unset($value2,$tmp8,$tmp7,$pos2,$array2);
			}
			utest_Assert::isNull($result->_0, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 67, "className" => "thx.TestReadonlyArray", "methodName" => "testPop")));
			utest_Assert::same((new _hx_array(array())), $result->_1, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 68, "className" => "thx.TestReadonlyArray", "methodName" => "testPop")));
			utest_Assert::same((new _hx_array(array(1, 2))), $a, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 70, "className" => "thx.TestReadonlyArray", "methodName" => "testPop")));
			unset($tmp6,$tmp3,$tmp,$result,$c,$b,$a);
		}
	}
	public function testShift() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$a = (new _hx_array(array(1, 2)));
			$result = thx__ReadonlyArray_ReadonlyArray_Impl_::shift($a);
			utest_Assert::same(1, $result->_0, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 78, "className" => "thx.TestReadonlyArray", "methodName" => "testShift")));
			utest_Assert::same((new _hx_array(array(2))), $result->_1, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 79, "className" => "thx.TestReadonlyArray", "methodName" => "testShift")));
			$result = thx__ReadonlyArray_ReadonlyArray_Impl_::shift($result->_1);
			utest_Assert::same(2, $result->_0, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 83, "className" => "thx.TestReadonlyArray", "methodName" => "testShift")));
			utest_Assert::same((new _hx_array(array())), $result->_1, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 84, "className" => "thx.TestReadonlyArray", "methodName" => "testShift")));
			$result = thx__ReadonlyArray_ReadonlyArray_Impl_::shift($result->_1);
			utest_Assert::isNull($result->_0, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 88, "className" => "thx.TestReadonlyArray", "methodName" => "testShift")));
			utest_Assert::same((new _hx_array(array())), $result->_1, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 89, "className" => "thx.TestReadonlyArray", "methodName" => "testShift")));
			utest_Assert::same((new _hx_array(array(1, 2))), $a, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 91, "className" => "thx.TestReadonlyArray", "methodName" => "testShift")));
			unset($result,$a);
		}
	}
	public function testUnshift() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$a = (new _hx_array(array(1, 2, 3)));
			$b = _hx_deref((new _hx_array(array(4))))->concat($a);
			utest_Assert::same((new _hx_array(array(1, 2, 3))), $a, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 98, "className" => "thx.TestReadonlyArray", "methodName" => "testUnshift")));
			utest_Assert::same((new _hx_array(array(4, 1, 2, 3))), $b, null, null, null, _hx_anonymous(array("fileName" => "TestReadonlyArray.hx", "lineNumber" => 99, "className" => "thx.TestReadonlyArray", "methodName" => "testUnshift")));
			unset($b,$a);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.TestReadonlyArray'; }
}
