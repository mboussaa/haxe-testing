<?php

// Generated by Haxe 3.3.0
class thx_TestChars {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testChars() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$t = thx__Chars_Chars_Impl_::fromString("a☺b☺☺c☺☺☺");
			utest_Assert::same((new _hx_array(array(97, 9786, 98, 9786, 9786, 99, 9786, 9786, 9786))), $t, null, null, null, _hx_anonymous(array("fileName" => "TestChars.hx", "lineNumber" => 18, "className" => "thx.TestChars", "methodName" => "testChars")));
			$tmp = thx__Chars_Chars_Impl_::toString($t);
			utest_Assert::equals("a☺b☺☺c☺☺☺", $tmp, null, _hx_anonymous(array("fileName" => "TestChars.hx", "lineNumber" => 19, "className" => "thx.TestChars", "methodName" => "testChars")));
			unset($tmp,$t);
		}
	}
	public function testArrayAccess() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$chars = thx__Chars_Chars_Impl_::fromString("a☺b☺☺c☺☺☺");
			utest_Assert::equals(9786, $chars[1], null, _hx_anonymous(array("fileName" => "TestChars.hx", "lineNumber" => 25, "className" => "thx.TestChars", "methodName" => "testArrayAccess")));
			utest_Assert::equals(99, $chars[5], null, _hx_anonymous(array("fileName" => "TestChars.hx", "lineNumber" => 26, "className" => "thx.TestChars", "methodName" => "testArrayAccess")));
			unset($chars);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.TestChars'; }
}
