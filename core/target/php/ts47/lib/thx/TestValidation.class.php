<?php

// Generated by Haxe 3.3.0
class thx_TestValidation {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function or4($b1, $b2, $b3, $b4) {
		$tmp = null;
		$tmp1 = null;
		if(!$b1) {
			$tmp1 = $b2;
		} else {
			$tmp1 = true;
		}
		if(!$tmp1) {
			$tmp = $b3;
		} else {
			$tmp = true;
		}
		if(!$tmp) {
			return $b4;
		} else {
			return true;
		}
	}
	public function add($a, $b) {
		return $a + $b;
	}
	public function testAp() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$l1 = thx_Either::Left(1);
			$rt = thx_Either::Right(true);
			$rbi = thx_Either::Right(array(new _hx_lambda(array(), "thx_TestValidation_0"), 'execute'));
			$tmp = thx__Validation_Validation_Impl_::ap($l1, $rbi, (isset($this->add) ? $this->add: array($this, "add")));
			utest_Assert::same($l1, $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestValidation.hx", "lineNumber" => 33, "className" => "thx.TestValidation", "methodName" => "testAp")));
			$tmp1 = thx_Either::Right(1);
			$tmp2 = thx__Validation_Validation_Impl_::ap($rt, $rbi, (isset($this->add) ? $this->add: array($this, "add")));
			utest_Assert::same($tmp1, $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestValidation.hx", "lineNumber" => 34, "className" => "thx.TestValidation", "methodName" => "testAp")));
			unset($tmp2,$tmp1,$tmp,$rt,$rbi,$l1);
		}
	}
	public function testVal4() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$t = thx_Either::Right(true);
			$f = thx_Either::Right(false);
			$err = thx_Either::Left(1);
			$s = (isset($this->add) ? $this->add: array($this, "add"));
			$f1 = (isset($this->or4) ? $this->or4: array($this, "or4"));
			$f2 = array(new _hx_lambda(array(&$f1), "thx_TestValidation_1"), 'execute');
			$tmp = array(new _hx_lambda(array(&$f2), "thx_TestValidation_2"), 'execute');
			$f3 = thx_Functions2::curry($tmp);
			$tmp1 = thx_Either::Right($f3);
			$tmp2 = thx__Validation_Validation_Impl_::ap($t, $tmp1, array(new _hx_lambda(array(), "thx_TestValidation_3"), 'execute'));
			$tmp3 = thx__Validation_Validation_Impl_::ap($f, $tmp2, $s);
			$tmp4 = thx__Validation_Validation_Impl_::ap($f, $tmp3, $s);
			$tmp5 = thx__Validation_Validation_Impl_::ap($f, $tmp4, $s);
			utest_Assert::same($t, $tmp5, null, null, null, _hx_anonymous(array("fileName" => "TestValidation.hx", "lineNumber" => 45, "className" => "thx.TestValidation", "methodName" => "testVal4")));
			$tmp6 = thx_Either::Left(2);
			$s1 = (isset($this->add) ? $this->add: array($this, "add"));
			$f4 = (isset($this->or4) ? $this->or4: array($this, "or4"));
			$f5 = array(new _hx_lambda(array(&$f4), "thx_TestValidation_4"), 'execute');
			$tmp7 = array(new _hx_lambda(array(&$f5), "thx_TestValidation_5"), 'execute');
			$f6 = thx_Functions2::curry($tmp7);
			$tmp8 = thx_Either::Right($f6);
			$tmp9 = thx__Validation_Validation_Impl_::ap($t, $tmp8, array(new _hx_lambda(array(), "thx_TestValidation_6"), 'execute'));
			$tmp10 = thx__Validation_Validation_Impl_::ap($f, $tmp9, $s1);
			$tmp11 = thx__Validation_Validation_Impl_::ap($err, $tmp10, $s1);
			$tmp12 = thx__Validation_Validation_Impl_::ap($err, $tmp11, $s1);
			utest_Assert::same($tmp6, $tmp12, null, null, null, _hx_anonymous(array("fileName" => "TestValidation.hx", "lineNumber" => 46, "className" => "thx.TestValidation", "methodName" => "testVal4")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp12,$tmp11,$tmp10,$tmp1,$tmp,$t,$s1,$s,$f6,$f5,$f4,$f3,$f2,$f1,$f,$err);
		}
	}
	public function testVal4Nel() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$t = thx_Either::Right(true);
			$tmp = thx__Nel_Nel_Impl_::pure(1);
			$err = thx_Either::Left($tmp);
			$tmp1 = thx__Nel_Nel_Impl_::pure(1);
			$tmp2 = thx__Nel_Nel_Impl_::cons(1, $tmp1);
			$tmp3 = thx_Either::Left($tmp2);
			$s = thx__Nel_Nel_Impl_::semigroup();
			$f = (isset($this->or4) ? $this->or4: array($this, "or4"));
			$f1 = array(new _hx_lambda(array(&$f), "thx_TestValidation_7"), 'execute');
			$tmp4 = array(new _hx_lambda(array(&$f1), "thx_TestValidation_8"), 'execute');
			$f2 = thx_Functions2::curry($tmp4);
			$tmp5 = thx_Either::Right($f2);
			$tmp6 = thx__Validation_Validation_Impl_::ap($t, $tmp5, array(new _hx_lambda(array(), "thx_TestValidation_9"), 'execute'));
			$tmp7 = thx__Validation_Validation_Impl_::ap($t, $tmp6, $s);
			$tmp8 = thx__Validation_Validation_Impl_::ap($err, $tmp7, $s);
			$tmp9 = thx__Validation_Validation_Impl_::ap($err, $tmp8, $s);
			utest_Assert::same($tmp3, $tmp9, null, null, null, _hx_anonymous(array("fileName" => "TestValidation.hx", "lineNumber" => 54, "className" => "thx.TestValidation", "methodName" => "testVal4Nel")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$t,$s,$f2,$f1,$f,$err);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.TestValidation'; }
}
function thx_TestValidation_0($b) {
	{
		if($b) {
			return 1;
		} else {
			return 0;
		}
	}
}
function thx_TestValidation_1(&$f1, $a, $b, $c) {
	{
		return array(new _hx_lambda(array(&$a, &$b, &$c, &$f1), "thx_TestValidation_10"), 'execute');
	}
}
function thx_TestValidation_2(&$f2, $a1, $b1) {
	{
		return array(new _hx_lambda(array(&$a1, &$b1, &$f2), "thx_TestValidation_11"), 'execute');
	}
}
function thx_TestValidation_3($e1, $e2) {
	{
		throw new HException("Unreachable");
	}
}
function thx_TestValidation_4(&$f4, $a2, $b2, $c2) {
	{
		return array(new _hx_lambda(array(&$a2, &$b2, &$c2, &$f4), "thx_TestValidation_12"), 'execute');
	}
}
function thx_TestValidation_5(&$f5, $a3, $b3) {
	{
		return array(new _hx_lambda(array(&$a3, &$b3, &$f5), "thx_TestValidation_13"), 'execute');
	}
}
function thx_TestValidation_6($e11, $e21) {
	{
		throw new HException("Unreachable");
	}
}
function thx_TestValidation_7(&$f, $a, $b, $c) {
	{
		return array(new _hx_lambda(array(&$a, &$b, &$c, &$f), "thx_TestValidation_14"), 'execute');
	}
}
function thx_TestValidation_8(&$f1, $a1, $b1) {
	{
		return array(new _hx_lambda(array(&$a1, &$b1, &$f1), "thx_TestValidation_15"), 'execute');
	}
}
function thx_TestValidation_9($e1, $e2) {
	{
		throw new HException("Unreachable");
	}
}
function thx_TestValidation_10(&$a, &$b, &$c, &$f1, $d) {
	{
		return call_user_func_array($f1, array($a, $b, $c, $d));
	}
}
function thx_TestValidation_11(&$a1, &$b1, &$f2, $c1) {
	{
		return call_user_func_array($f2, array($a1, $b1, $c1));
	}
}
function thx_TestValidation_12(&$a2, &$b2, &$c2, &$f4, $d1) {
	{
		return call_user_func_array($f4, array($a2, $b2, $c2, $d1));
	}
}
function thx_TestValidation_13(&$a3, &$b3, &$f5, $c3) {
	{
		return call_user_func_array($f5, array($a3, $b3, $c3));
	}
}
function thx_TestValidation_14(&$a, &$b, &$c, &$f, $d) {
	{
		return call_user_func_array($f, array($a, $b, $c, $d));
	}
}
function thx_TestValidation_15(&$a1, &$b1, &$f1, $c1) {
	{
		return call_user_func_array($f1, array($a1, $b1, $c1));
	}
}
