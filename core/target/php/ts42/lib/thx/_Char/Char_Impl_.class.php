<?php

// Generated by Haxe 3.3.0
class thx__Char_Char_Impl_ {
	public function __construct(){}
	static function at($s, $index) {
		$i = haxe_Utf8::charCodeAt($s, $index);
		thx_Assert::isTrue($i >= 0, "Char value should be greater than zero: " . _hx_string_rec($i, ""), _hx_anonymous(array("fileName" => "Char.hx", "lineNumber" => 19, "className" => "thx._Char.Char_Impl_", "methodName" => "fromInt")));
		return $i;
	}
	static function fromInt($i) {
		thx_Assert::isTrue($i >= 0, "Char value should be greater than zero: " . _hx_string_rec($i, ""), _hx_anonymous(array("fileName" => "Char.hx", "lineNumber" => 19, "className" => "thx._Char.Char_Impl_", "methodName" => "fromInt")));
		return $i;
	}
	static function fromString($s) {
		$i = haxe_Utf8::charCodeAt($s, 0);
		thx_Assert::isTrue($i >= 0, "Char value should be greater than zero: " . _hx_string_rec($i, ""), _hx_anonymous(array("fileName" => "Char.hx", "lineNumber" => 19, "className" => "thx._Char.Char_Impl_", "methodName" => "fromInt")));
		return $i;
	}
	static function compare($a, $b) {
		$tmp = thx__Char_Char_Impl_::toString($a);
		return haxe_Utf8::compare($tmp, thx__Char_Char_Impl_::toString($b));
	}
	static function _new($i) {
		return $i;
	}
	static function compareTo($this1, $other) {
		$tmp = thx__Char_Char_Impl_::toString($this1);
		return haxe_Utf8::compare($tmp, thx__Char_Char_Impl_::toString($other));
	}
	static function isBreakingWhitespace($this1) {
		$tmp = null;
		$tmp1 = null;
		if($this1 !== 32) {
			$tmp1 = $this1 === 9;
		} else {
			$tmp1 = true;
		}
		if(!$tmp1) {
			$tmp = $this1 === 10;
		} else {
			$tmp = true;
		}
		if(!$tmp) {
			return $this1 === 13;
		} else {
			return true;
		}
	}
	static function isControl($this1) {
		$tmp = null;
		$tmp1 = null;
		if($this1 >= 0) {
			$tmp1 = $this1 <= 31;
		} else {
			$tmp1 = false;
		}
		if(!$tmp1) {
			$tmp = $this1 === 127;
		} else {
			$tmp = true;
		}
		if(!$tmp) {
			if($this1 >= 128) {
				return $this1 <= 159;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	static function isUnicode($this1) {
		return $this1 <= 65533;
	}
	static function next($this1) {
		$i = $this1 + 1;
		thx_Assert::isTrue($i >= 0, "Char value should be greater than zero: " . _hx_string_rec($i, ""), _hx_anonymous(array("fileName" => "Char.hx", "lineNumber" => 19, "className" => "thx._Char.Char_Impl_", "methodName" => "fromInt")));
		return $i;
	}
	static function prev($this1) {
		$i = $this1 - 1;
		thx_Assert::isTrue($i >= 0, "Char value should be greater than zero: " . _hx_string_rec($i, ""), _hx_anonymous(array("fileName" => "Char.hx", "lineNumber" => 19, "className" => "thx._Char.Char_Impl_", "methodName" => "fromInt")));
		return $i;
	}
	static function toUpperCase($this1) {
		$s = strtoupper(thx__Char_Char_Impl_::toString($this1));
		$i = haxe_Utf8::charCodeAt($s, 0);
		thx_Assert::isTrue($i >= 0, "Char value should be greater than zero: " . _hx_string_rec($i, ""), _hx_anonymous(array("fileName" => "Char.hx", "lineNumber" => 19, "className" => "thx._Char.Char_Impl_", "methodName" => "fromInt")));
		return $i;
	}
	static function toLowerCase($this1) {
		$s = strtolower(thx__Char_Char_Impl_::toString($this1));
		$i = haxe_Utf8::charCodeAt($s, 0);
		thx_Assert::isTrue($i >= 0, "Char value should be greater than zero: " . _hx_string_rec($i, ""), _hx_anonymous(array("fileName" => "Char.hx", "lineNumber" => 19, "className" => "thx._Char.Char_Impl_", "methodName" => "fromInt")));
		return $i;
	}
	static function equalsTo($this1, $other) {
		$tmp = thx__Char_Char_Impl_::toString($this1);
		$tmp1 = haxe_Utf8::compare($tmp, thx__Char_Char_Impl_::toString($other));
		return $tmp1 === 0;
	}
	static function equals($self, $other) {
		$tmp = thx__Char_Char_Impl_::toString($self);
		$tmp1 = haxe_Utf8::compare($tmp, thx__Char_Char_Impl_::toString($other));
		return $tmp1 === 0;
	}
	static function greaterThan($this1, $other) {
		$tmp = thx__Char_Char_Impl_::toString($this1);
		$tmp1 = haxe_Utf8::compare($tmp, thx__Char_Char_Impl_::toString($other));
		return $tmp1 > 0;
	}
	static function greater($self, $other) {
		$tmp = thx__Char_Char_Impl_::toString($self);
		$tmp1 = haxe_Utf8::compare($tmp, thx__Char_Char_Impl_::toString($other));
		return $tmp1 > 0;
	}
	static function greaterEqualsThan($this1, $other) {
		$tmp = thx__Char_Char_Impl_::toString($this1);
		$tmp1 = haxe_Utf8::compare($tmp, thx__Char_Char_Impl_::toString($other));
		return $tmp1 >= 0;
	}
	static function greaterEquals($self, $other) {
		$tmp = thx__Char_Char_Impl_::toString($self);
		$tmp1 = haxe_Utf8::compare($tmp, thx__Char_Char_Impl_::toString($other));
		return $tmp1 >= 0;
	}
	static function lessEqualsTo($this1, $other) {
		$tmp = thx__Char_Char_Impl_::toString($this1);
		$tmp1 = haxe_Utf8::compare($tmp, thx__Char_Char_Impl_::toString($other));
		return $tmp1 <= 0;
	}
	static function lessEquals($self, $other) {
		$tmp = thx__Char_Char_Impl_::toString($self);
		$tmp1 = haxe_Utf8::compare($tmp, thx__Char_Char_Impl_::toString($other));
		return $tmp1 <= 0;
	}
	static function lessThan($this1, $other) {
		$tmp = thx__Char_Char_Impl_::toString($this1);
		$tmp1 = haxe_Utf8::compare($tmp, thx__Char_Char_Impl_::toString($other));
		return $tmp1 < 0;
	}
	static function less($self, $other) {
		$tmp = thx__Char_Char_Impl_::toString($self);
		$tmp1 = haxe_Utf8::compare($tmp, thx__Char_Char_Impl_::toString($other));
		return $tmp1 < 0;
	}
	static function toInt($this1) {
		return $this1;
	}
	static function toString($this1) {
		$c = new haxe_Utf8(null);
		$c->addChar($this1);
		return $c->toString();
	}
	static function arrayToString($arr) {
		return $arr->map(array(new _hx_lambda(array(), "thx__Char_Char_Impl__0"), 'execute'))->join("");
	}
	function __toString() { return 'thx._Char.Char_Impl_'; }
}
function thx__Char_Char_Impl__0($c) {
	{
		return thx__Char_Char_Impl_::toString($c);
	}
}
