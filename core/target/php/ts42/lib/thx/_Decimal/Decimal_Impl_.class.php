<?php

// Generated by Haxe 3.3.0
class thx__Decimal_Decimal_Impl_ {
	public function __construct(){}
	static $zero;
	static $one;
	static function fromInt64($value) {
		$tmp = thx_bigint_Bigs::fromInt64($value);
		return new thx_bigint_DecimalImpl($tmp, 0);
	}
	static function fromBigInt($value) {
		return new thx_bigint_DecimalImpl($value, 0);
	}
	static function fromInt($value) {
		return thx_bigint_Decimals::fromInt($value);
	}
	static function fromFloat($value) {
		return thx_bigint_Decimals::fromFloat($value);
	}
	static function fromString($value) {
		return thx_bigint_Decimals::parse($value);
	}
	static function randomBetween($a, $b) {
		return thx_bigint_DecimalImpl::randomBetween($a, $b);
	}
	static function compare($a, $b) {
		return $a->compareTo($b);
	}
	static function isZero($this1) {
		return $this1->isZero();
	}
	static function abs($this1) {
		return $this1->abs();
	}
	static function compareTo($this1, $that) {
		return $this1->compareTo($that);
	}
	static function compareAbs($this1, $that) {
		return $this1->compareToAbs($that);
	}
	static function next($this1) {
		return $this1->next();
	}
	static function prev($this1) {
		return $this1->prev();
	}
	static function square($this1) {
		return $this1->square();
	}
	static function pow($this1, $exp) {
		return $this1->pow($exp);
	}
	static function isEven($this1) {
		return $this1->isEven();
	}
	static function isOdd($this1) {
		return $this1->isOdd();
	}
	static function isNegative($this1) {
		return $this1->isNegative();
	}
	static function isPositive($this1) {
		$tmp = $this1->compareTo(thx__Decimal_Decimal_Impl_::$zero);
		return $tmp > 0;
	}
	static function max($this1, $that) {
		$tmp = thx__Decimal_Decimal_Impl_::greater($this1, $that);
		if($tmp) {
			return $this1;
		} else {
			return $that;
		}
	}
	static function min($this1, $that) {
		$tmp = thx__Decimal_Decimal_Impl_::less($this1, $that);
		if($tmp) {
			return $this1;
		} else {
			return $that;
		}
	}
	static function ceil($this1) {
		return $this1->ceilTo(0);
	}
	static function ceilTo($this1, $decimals) {
		return $this1->ceilTo($decimals);
	}
	static function floor($this1) {
		return $this1->floorTo(0);
	}
	static function floorTo($this1, $decimals) {
		return $this1->floorTo($decimals);
	}
	static function round($this1) {
		return $this1->roundTo(0);
	}
	static function roundTo($this1, $decimals) {
		return $this1->roundTo($decimals);
	}
	static function scaleTo($this1, $decimals) {
		return $this1->scaleTo($decimals);
	}
	static function trim($this1, $mindecimals = null) {
		return $this1->trim($mindecimals);
	}
	static function greaterThan($this1, $that) {
		$tmp = $this1->compareTo($that);
		return $tmp > 0;
	}
	static function greater($self, $that) {
		$tmp = $self->compareTo($that);
		return $tmp > 0;
	}
	static function greaterEqualsTo($this1, $that) {
		$tmp = $this1->compareTo($that);
		return $tmp >= 0;
	}
	static function greaterEquals($self, $that) {
		$tmp = $self->compareTo($that);
		return $tmp >= 0;
	}
	static function lessThan($this1, $that) {
		$tmp = $this1->compareTo($that);
		return $tmp < 0;
	}
	static function less($self, $that) {
		$tmp = $self->compareTo($that);
		return $tmp < 0;
	}
	static function lessEqualsTo($this1, $that) {
		$tmp = $this1->compareTo($that);
		return $tmp <= 0;
	}
	static function lessEquals($self, $that) {
		$tmp = $self->compareTo($that);
		return $tmp <= 0;
	}
	static function equalsTo($this1, $that) {
		$tmp = $this1->compareTo($that);
		return $tmp === 0;
	}
	static function equals($self, $that) {
		$tmp = $self->compareTo($that);
		return $tmp === 0;
	}
	static function notEqualsTo($this1, $that) {
		$tmp = $this1->compareTo($that);
		return $tmp !== 0;
	}
	static function notEquals($self, $that) {
		$tmp = $self->compareTo($that);
		return $tmp !== 0;
	}
	static function add($this1, $that) {
		return $this1->add($that);
	}
	static function subtract($this1, $that) {
		return $this1->subtract($that);
	}
	static function negate($this1) {
		return $this1->negate();
	}
	static function preIncrement($this1) {
		$this1 = $this1->add(thx__Decimal_Decimal_Impl_::$one);
		return $this1;
	}
	static function postIncrement($this1) {
		$v = $this1;
		$this1 = $this1->add(thx__Decimal_Decimal_Impl_::$one);
		return $v;
	}
	static function preDecrement($this1) {
		$this1 = $this1->subtract(thx__Decimal_Decimal_Impl_::$one);
		return $this1;
	}
	static function postDecrement($this1) {
		$v = $this1;
		$this1 = $this1->subtract(thx__Decimal_Decimal_Impl_::$one);
		return $v;
	}
	static function multiply($this1, $that) {
		return $this1->multiply($that);
	}
	static function divide($this1, $that) {
		return $this1->divide($that);
	}
	static function modulo($this1, $that) {
		return $this1->modulo($that);
	}
	static function toInt($this1) {
		return $this1->toInt();
	}
	static function toInt64($this1) {
		$this2 = thx__Decimal_Decimal_Impl_::toBigInt($this1);
		return thx_bigint_Bigs::toInt64($this2);
	}
	static function toBigInt($this1) {
		$tmp = thx_bigint_Bigs::fromInt($this1->scale);
		$tmp1 = thx_bigint_Small::$ten->pow($tmp);
		return $this1->value->divide($tmp1);
	}
	static function toFloat($this1) {
		return $this1->toFloat();
	}
	static function toString($this1) {
		return $this1->toString();
	}
	static function get_divisionScale() {
		return thx_bigint_Decimals::$divisionExtraScale;
	}
	static function set_divisionScale($v) {
		return thx_bigint_Decimals::$divisionExtraScale = $v;
	}
	static $__properties__ = array("set_divisionScale" => "set_divisionScale","get_divisionScale" => "get_divisionScale");
	function __toString() { return 'thx._Decimal.Decimal_Impl_'; }
}
thx__Decimal_Decimal_Impl_::$zero = thx_bigint_DecimalImpl::$zero;
thx__Decimal_Decimal_Impl_::$one = thx_bigint_DecimalImpl::$one;
