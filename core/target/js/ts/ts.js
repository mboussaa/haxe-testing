// Generated by Haxe 3.3.0
(function ($global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var DateTools = function() { };
DateTools.__name__ = ["DateTools"];
DateTools.getMonthDays = function(d) {
	var month = d.getMonth();
	var year = d.getFullYear();
	if(month != 1) {
		return DateTools.DAYS_OF_MONTH[month];
	}
	if(year % 4 == 0 && year % 100 != 0 || year % 400 == 0) {
		return 29;
	} else {
		return 28;
	}
};
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0?s:HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0?HxOverrides.substr(s,pos,null):HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10?"0" + m:"" + m) + "-" + (d < 10?"0" + d:"" + d) + " " + (h < 10?"0" + h:"" + h) + ":" + (mi < 10?"0" + mi:"" + mi) + ":" + (s < 10?"0" + s:"" + s);
};
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d.setTime(0);
		d.setUTCHours(k[0]);
		d.setUTCMinutes(k[1]);
		d.setUTCSeconds(k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
IntIterator.__name__ = ["IntIterator"];
IntIterator.prototype = {
	min: null
	,max: null
	,hasNext: function() {
		return this.min < this.max;
	}
	,next: function() {
		return this.min++;
	}
	,__class__: IntIterator
};
var Lambda = function() { };
Lambda.__name__ = ["Lambda"];
Lambda.array = function(it) {
	var a = [];
	var tmp = $iterator(it)();
	while(tmp.hasNext()) a.push(tmp.next());
	return a;
};
Lambda.has = function(it,elt) {
	var tmp = $iterator(it)();
	while(tmp.hasNext()) if(tmp.next() == elt) {
		return true;
	}
	return false;
};
var List = function() {
	this.length = 0;
};
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: _$List_ListNode
};
var _$List_ListIterator = function(head) {
	this.head = head;
};
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _$List_ListIterator
};
Math.__name__ = ["Math"];
var Reflect = function() { };
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
var Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = ["StringTools"];
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) {
		return s.split("\"").join("&quot;").split("'").join("&#039;");
	} else {
		return s;
	}
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return HxOverrides.substr(s,slen - elen,elen) == end;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	while(s.length < l) s = c + s;
	return s;
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	while(s.length < l) s += c;
	return s;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var TestAll = function() { };
TestAll.__name__ = ["TestAll"];
TestAll.addTests = function(runner) {
	runner.addCase(new thx_TestAnonymousMap());
	runner.addCase(new thx_TestArrays());
	runner.addCase(new thx_TestAssert());
	runner.addCase(new thx_TestBigInt());
	runner.addCase(new thx_TestBitMatrix());
	runner.addCase(new thx_TestBitSet());
	runner.addCase(new thx_TestChar());
	runner.addCase(new thx_TestChars());
	runner.addCase(new thx_TestConvert());
	runner.addCase(new thx_TestDates());
	runner.addCase(new thx_TestDateTime());
	runner.addCase(new thx_TestDateTimeUtc());
	runner.addCase(new thx_TestDecimal());
	runner.addCase(new thx_TestDynamics());
	runner.addCase(new thx_TestEffects());
	runner.addCase(new thx_TestEithers());
	runner.addCase(new thx_TestEnums());
	runner.addCase(new thx_TestERegs());
	runner.addCase(new thx_TestError());
	runner.addCase(new thx_TestFloats());
	runner.addCase(new thx_TestFunctions());
	runner.addCase(new thx_TestHashSet());
	runner.addCase(new thx_TestInt64s());
	runner.addCase(new thx_TestInts());
	runner.addCase(new thx_TestIterables());
	runner.addCase(new thx_TestIterators());
	runner.addCase(new thx_TestLocalDate());
	runner.addCase(new thx_TestOrderedMap());
	runner.addCase(new thx_TestOrderedSet());
	runner.addCase(new thx_TestMake());
	runner.addCase(new thx_TestNulls());
	runner.addCase(new thx_TestObjects());
	runner.addCase(new thx_TestPath());
	runner.addCase(new thx_TestRational());
	runner.addCase(new thx_TestReadonlyArray());
	runner.addCase(new thx_TestQueryString());
	runner.addCase(new thx_TestSet());
	runner.addCase(new thx_TestStaticResource());
	runner.addCase(new thx_TestStrings());
	runner.addCase(new thx_TestTime());
	runner.addCase(new thx_TestThx());
	runner.addCase(new thx_TestLambda());
	runner.addCase(new thx_TestLambdaStaticExtension());
	runner.addCase(new thx_TestTimer());
	runner.addCase(new thx_TestTuple());
	runner.addCase(new thx_TestUrl());
	runner.addCase(new thx_TestValidation());
	runner.addCase(new thx_fp_TestList());
	runner.addCase(new thx_fp_TestMap());
	runner.addCase(new thx_fp_TestSet());
	runner.addCase(new thx_fp_TestState());
	runner.addCase(new thx_fp_TestWriter());
	runner.addCase(new thx_fp_TestTreeBag());
};
TestAll.main = function() {
	var runner = new utest_Runner();
	TestAll.addTests(runner);
	utest_ui_Report.create(runner);
	runner.run();
};
var ValueType = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
Type.__name__ = ["Type"];
Type.getEnum = function(o) {
	if(o == null) {
		return null;
	}
	return o.__enum__;
};
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		if(a[0] != b[0]) {
			return false;
		}
		var _g1 = 2;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!Type.enumEq(a[i],b[i])) {
				return false;
			}
		}
		var e = a.__enum__;
		if(e != b.__enum__ || e == null) {
			return false;
		}
	} catch( e1 ) {
		haxe_CallStack.lastException = e1;
		return false;
	}
	return true;
};
var haxe_StackItem = { __ename__ : ["haxe","StackItem"], __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; return $x; };
var haxe_CallStack = function() { };
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		b.b += m == null?"null":"" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null?"null":"" + file;
		b.b += " line ";
		b.b += line == null?"null":"" + line;
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		b.b += cname == null?"null":"" + cname;
		b.b += ".";
		b.b += meth == null?"null":"" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		b.b += n == null?"null":"" + n;
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function"?haxe_StackItem.LocalFunction():meth == "Global code"?null:haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,keys: null
	,iterator: null
	,__class__: haxe_IMap
};
var haxe__$Int32_Int32_$Impl_$ = {};
haxe__$Int32_Int32_$Impl_$.__name__ = ["haxe","_Int32","Int32_Impl_"];
haxe__$Int32_Int32_$Impl_$.mul = function(a,b) {
	return a * (b & 65535) + (a * (b >>> 16) << 16 | 0) | 0;
};
haxe__$Int32_Int32_$Impl_$.ucompare = function(a,b) {
	if(a < 0) {
		if(b < 0) {
			return ~b - ~a | 0;
		} else {
			return 1;
		}
	}
	if(b < 0) {
		return -1;
	} else {
		return a - b | 0;
	}
};
var haxe__$Int64_Int64_$Impl_$ = {};
haxe__$Int64_Int64_$Impl_$.__name__ = ["haxe","_Int64","Int64_Impl_"];
haxe__$Int64_Int64_$Impl_$.toString = function(this1) {
	var i = this1;
	var b = new haxe__$Int64__$_$_$Int64(0,0);
	if(i.high == b.high && i.low == b.low) {
		return "0";
	}
	var str = "";
	var neg = false;
	if(i.high < 0) {
		neg = true;
	}
	var ten = new haxe__$Int64__$_$_$Int64(0,10);
	while(true) {
		var b1 = new haxe__$Int64__$_$_$Int64(0,0);
		if(!(i.high != b1.high || i.low != b1.low)) {
			break;
		}
		var r = haxe__$Int64_Int64_$Impl_$.divMod(i,ten);
		if(r.modulus.high < 0) {
			var x = r.modulus;
			var high = ~x.high;
			var low = -x.low;
			if(low == 0) {
				++high;
				high = high | 0;
			}
			str = new haxe__$Int64__$_$_$Int64(high,low).low + str;
			var x1 = r.quotient;
			var high1 = ~x1.high;
			var low1 = -x1.low;
			if(low1 == 0) {
				++high1;
				high1 = high1 | 0;
			}
			i = new haxe__$Int64__$_$_$Int64(high1,low1);
		} else {
			str = r.modulus.low + str;
			i = r.quotient;
		}
	}
	if(neg) {
		str = "-" + str;
	}
	return str;
};
haxe__$Int64_Int64_$Impl_$.divMod = function(dividend,divisor) {
	if(divisor.high == 0) {
		switch(divisor.low) {
		case 0:
			throw new js__$Boot_HaxeError("divide by zero");
			break;
		case 1:
			return { quotient : new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low), modulus : new haxe__$Int64__$_$_$Int64(0,0)};
		}
	}
	var divSign = dividend.high < 0 != divisor.high < 0;
	var modulus;
	if(dividend.high < 0) {
		var high = ~dividend.high;
		var low = -dividend.low;
		if(low == 0) {
			++high;
			high = high | 0;
		}
		modulus = new haxe__$Int64__$_$_$Int64(high,low);
	} else {
		modulus = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
	}
	if(divisor.high < 0) {
		var high1 = ~divisor.high;
		var low1 = -divisor.low;
		if(low1 == 0) {
			++high1;
			high1 = high1 | 0;
		}
		divisor = new haxe__$Int64__$_$_$Int64(high1,low1);
	} else {
		divisor = divisor;
	}
	var quotient = new haxe__$Int64__$_$_$Int64(0,0);
	var mask = new haxe__$Int64__$_$_$Int64(0,1);
	while(!(divisor.high < 0)) {
		var v = haxe__$Int32_Int32_$Impl_$.ucompare(divisor.high,modulus.high);
		var cmp = v != 0?v:haxe__$Int32_Int32_$Impl_$.ucompare(divisor.low,modulus.low);
		divisor = new haxe__$Int64__$_$_$Int64(divisor.high << 1 | divisor.low >>> 31,divisor.low << 1);
		mask = new haxe__$Int64__$_$_$Int64(mask.high << 1 | mask.low >>> 31,mask.low << 1);
		if(cmp >= 0) {
			break;
		}
	}
	while(true) {
		var b = new haxe__$Int64__$_$_$Int64(0,0);
		if(!(mask.high != b.high || mask.low != b.low)) {
			break;
		}
		var v1 = haxe__$Int32_Int32_$Impl_$.ucompare(modulus.high,divisor.high);
		if((v1 != 0?v1:haxe__$Int32_Int32_$Impl_$.ucompare(modulus.low,divisor.low)) >= 0) {
			quotient = new haxe__$Int64__$_$_$Int64(quotient.high | mask.high,quotient.low | mask.low);
			var high2 = modulus.high - divisor.high | 0;
			var low2 = modulus.low - divisor.low | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(modulus.low,divisor.low) < 0) {
				--high2;
				high2 = high2 | 0;
			}
			modulus = new haxe__$Int64__$_$_$Int64(high2,low2);
		}
		mask = new haxe__$Int64__$_$_$Int64(mask.high >>> 1,mask.high << 31 | mask.low >>> 1);
		divisor = new haxe__$Int64__$_$_$Int64(divisor.high >>> 1,divisor.high << 31 | divisor.low >>> 1);
	}
	if(divSign) {
		var high3 = ~quotient.high;
		var low3 = -quotient.low;
		if(low3 == 0) {
			++high3;
			high3 = high3 | 0;
		}
		quotient = new haxe__$Int64__$_$_$Int64(high3,low3);
	}
	if(dividend.high < 0) {
		var high4 = ~modulus.high;
		var low4 = -modulus.low;
		if(low4 == 0) {
			++high4;
			high4 = high4 | 0;
		}
		modulus = new haxe__$Int64__$_$_$Int64(high4,low4);
	}
	return { quotient : quotient, modulus : modulus};
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = ["haxe","Timer"];
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_Utf8 = function() { };
haxe_Utf8.__name__ = ["haxe","Utf8"];
haxe_Utf8.compare = function(a,b) {
	if(a > b) {
		return 1;
	} else if(a == b) {
		return 0;
	} else {
		return -1;
	}
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
haxe_crypto_Base64.__name__ = ["haxe","crypto","Base64"];
var haxe_ds_BalancedTree = function() {
};
haxe_ds_BalancedTree.__name__ = ["haxe","ds","BalancedTree"];
haxe_ds_BalancedTree.prototype = {
	root: null
	,set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,remove: function(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,String) ) {
				return false;
			} else throw(e);
		}
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,iterator: function() {
		var ret = [];
		this.iteratorLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null?0:node._height);
		} else if(c < 0) {
			return this.balance(this.setLoop(k,v,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.setLoop(k,v,node.right));
		}
	}
	,removeLoop: function(k,node) {
		if(node == null) {
			throw new js__$Boot_HaxeError("Not_found");
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return this.merge(node.left,node.right);
		} else if(c < 0) {
			return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
		}
	}
	,iteratorLoop: function(node,acc) {
		if(node != null) {
			this.iteratorLoop(node.left,acc);
			acc.push(node.value);
			this.iteratorLoop(node.right,acc);
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,merge: function(t1,t2) {
		if(t1 == null) {
			return t2;
		}
		if(t2 == null) {
			return t1;
		}
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	,minBinding: function(t) {
		if(t == null) {
			throw new js__$Boot_HaxeError("Not_found");
		} else if(t.left == null) {
			return t;
		} else {
			return this.minBinding(t.left);
		}
	}
	,removeMinBinding: function(t) {
		if(t.left == null) {
			return t.right;
		} else {
			return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null?0:l._height;
		var hr = r == null?0:r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var tmp = _this == null?0:_this._height;
			var _this1 = l.right;
			if(tmp >= (_this1 == null?0:_this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this2 = r.right;
			var tmp1 = _this2 == null?0:_this2._height;
			var _this3 = r.left;
			if(tmp1 > (_this3 == null?0:_this3._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr?hl:hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var tmp1 = _this == null?0:_this._height;
		var _this1 = this.right;
		if(tmp1 > (_this1 == null?0:_this1._height)) {
			var _this2 = this.left;
			if(_this2 == null) {
				tmp = 0;
			} else {
				tmp = _this2._height;
			}
		} else {
			var _this3 = this.right;
			if(_this3 == null) {
				tmp = 0;
			} else {
				tmp = _this3._height;
			}
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
haxe_ds_TreeNode.__name__ = ["haxe","ds","TreeNode"];
haxe_ds_TreeNode.prototype = {
	left: null
	,right: null
	,key: null
	,value: null
	,_height: null
	,__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
haxe_ds_EnumValueMap.__name__ = ["haxe","ds","EnumValueMap"];
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1[1] - k2[1];
		if(d != 0) {
			return d;
		}
		var p1 = k1.slice(2);
		var p2 = k2.slice(2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g1 = 0;
		var _g = a1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if((v1 instanceof Array) && v1.__enum__ == null && ((v2 instanceof Array) && v2.__enum__ == null)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds__$HashMap_HashMapData = function() {
	this.keys = new haxe_ds_IntMap();
	this.values = new haxe_ds_IntMap();
};
haxe_ds__$HashMap_HashMapData.__name__ = ["haxe","ds","_HashMap","HashMapData"];
haxe_ds__$HashMap_HashMapData.prototype = {
	keys: null
	,values: null
	,__class__: haxe_ds__$HashMap_HashMapData
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_Option = { __ename__ : ["haxe","ds","Option"], __constructs__ : ["Some","None"] };
haxe_ds_Option.Some = function(v) { var $x = ["Some",0,v]; $x.__enum__ = haxe_ds_Option; return $x; };
haxe_ds_Option.None = ["None",1];
haxe_ds_Option.None.__enum__ = haxe_ds_Option;
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null?i.fileName + ":" + i.lineNumber + ": ":"";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class && o.__name__ != null) {
			return true;
		}
		if(cl == Enum && o.__ename__ != null) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) this.a[_g1++] = 0;
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null?null:end - begin);
	var result = new ArrayBuffer(u.byteLength);
	new Uint8Array(result).set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	byteLength: null
	,a: null
	,slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Uint8Array = function() { };
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var thx_AnonymousMap = function(o) {
	this.o = o;
};
thx_AnonymousMap.__name__ = ["thx","AnonymousMap"];
thx_AnonymousMap.__interfaces__ = [haxe_IMap];
thx_AnonymousMap.prototype = {
	o: null
	,get: function(k) {
		return Reflect.field(this.o,k);
	}
	,getOption: function(k) {
		var value = this.get(k);
		if(null == value) {
			return haxe_ds_Option.None;
		} else {
			return haxe_ds_Option.Some(value);
		}
	}
	,getObject: function() {
		return this.o;
	}
	,set: function(k,v) {
		this.o[k] = v;
	}
	,exists: function(k) {
		return Object.prototype.hasOwnProperty.call(this.o,k);
	}
	,remove: function(k) {
		return Reflect.deleteField(this.o,k);
	}
	,keys: function() {
		return HxOverrides.iter(Reflect.fields(this.o));
	}
	,iterator: function() {
		var tmp = this.keys();
		var o = this.o;
		return thx_Iterators.fmap(tmp,function(a1) {
			return Reflect.field(o,a1);
		});
	}
	,toString: function() {
		return "{ " + thx_Maps.tuples(this).map(function(t) {
			return t._0 + " => " + Std.string(t._1);
		}).join(", ") + " }";
	}
	,__class__: thx_AnonymousMap
};
var thx_Arrays = function() { };
thx_Arrays.__name__ = ["thx","Arrays"];
thx_Arrays.groupBy_Int_thx__TestArrays_Sample = function(arr,resolver) {
	var map = new haxe_ds_IntMap();
	var _g1 = 0;
	var _g = arr.length;
	while(_g1 < _g) {
		var v = arr[_g1++];
		var key = resolver(v);
		var acc = map.h[key];
		if(null == acc) {
			map.h[key] = [v];
		} else {
			acc.push(v);
		}
	}
	return map;
};
thx_Arrays.groupBy_Int_Array_Int = function(arr,resolver) {
	var map = new haxe_ds_IntMap();
	var _g1 = 0;
	var _g = arr.length;
	while(_g1 < _g) {
		var v = arr[_g1++];
		var key = resolver(v);
		var acc = map.h[key];
		if(null == acc) {
			map.h[key] = [v];
		} else {
			acc.push(v);
		}
	}
	return map;
};
thx_Arrays.groupBy_Int_Float = function(arr,resolver) {
	var map = new haxe_ds_IntMap();
	var _g1 = 0;
	var _g = arr.length;
	while(_g1 < _g) {
		var v = arr[_g1++];
		var key = resolver(v);
		var acc = map.h[key];
		if(null == acc) {
			map.h[key] = [v];
		} else {
			acc.push(v);
		}
	}
	return map;
};
thx_Arrays.count_Int = function(arr) {
	var map = new haxe_ds_IntMap();
	arr.map(function(v) {
		var value = map.h.hasOwnProperty(v)?map.h[v] + 1:1;
		map.h[v] = value;
	});
	return map;
};
thx_Arrays.append = function(array,element) {
	array.push(element);
	return array;
};
thx_Arrays.appendIf = function(array,cond,element) {
	if(cond) {
		array.push(element);
	}
	return array;
};
thx_Arrays.applyIndexes = function(array,indexes,incrementDuplicates) {
	if(incrementDuplicates == null) {
		incrementDuplicates = false;
	}
	if(indexes.length != array.length) {
		throw new thx_Error("`Arrays.applyIndexes` can only be applied to two arrays with the same length",null,{ fileName : "Arrays.hx", lineNumber : 53, className : "thx.Arrays", methodName : "applyIndexes"});
	}
	var result = [];
	if(incrementDuplicates) {
		var usedIndexes = thx__$Set_Set_$Impl_$.createInt();
		var _g1 = 0;
		var _g = array.length;
		while(_g1 < _g) {
			var i = _g1++;
			var index = indexes[i];
			while(usedIndexes.h.hasOwnProperty(index)) ++index;
			thx__$Set_Set_$Impl_$.add(usedIndexes,index);
			result[index] = array[i];
		}
	} else {
		var _g11 = 0;
		var _g2 = array.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			result[indexes[i1]] = array[i1];
		}
	}
	return result;
};
thx_Arrays.monoid = function() {
	return { zero : [], append : function(a,b) {
		return a.concat(b);
	}};
};
thx_Arrays.after = function(array,element) {
	return array.slice(thx__$ReadonlyArray_ReadonlyArray_$Impl_$.indexOf(array,element) + 1);
};
thx_Arrays.atIndex = function(array,i) {
	if(i >= 0 && i < array.length) {
		return haxe_ds_Option.Some(array[i]);
	} else {
		return haxe_ds_Option.None;
	}
};
thx_Arrays.getOption = function(array,i) {
	var value = array[i];
	if(null == value) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(value);
	}
};
thx_Arrays.each = function(arr,effect) {
	var tmp = HxOverrides.iter(arr);
	while(tmp.hasNext()) effect(tmp.next());
};
thx_Arrays.eachi = function(arr,effect) {
	var _g1 = 0;
	var _g = arr.length;
	while(_g1 < _g) {
		var i = _g1++;
		effect(arr[i],i);
	}
};
thx_Arrays.all = function(arr,predicate) {
	var tmp = HxOverrides.iter(arr);
	while(tmp.hasNext()) if(!predicate(tmp.next())) {
		return false;
	}
	return true;
};
thx_Arrays.any = function(arr,predicate) {
	var tmp = HxOverrides.iter(arr);
	while(tmp.hasNext()) if(predicate(tmp.next())) {
		return true;
	}
	return false;
};
thx_Arrays.at = function(arr,indexes) {
	return indexes.map(function(i) {
		return arr[i];
	});
};
thx_Arrays.before = function(array,element) {
	return array.slice(0,thx__$ReadonlyArray_ReadonlyArray_$Impl_$.indexOf(array,element));
};
thx_Arrays.commonsFromStart = function(self,other,equality) {
	if(null == equality) {
		equality = thx_Functions.equality;
	}
	var count = 0;
	var _g = 0;
	var _g1 = thx_Arrays.zip(self,other);
	while(_g < _g1.length) {
		var pair = _g1[_g];
		++_g;
		if(equality(pair._0,pair._1)) {
			++count;
		} else {
			break;
		}
	}
	return self.slice(0,count);
};
thx_Arrays.compact = function(arr) {
	return arr.filter(function(v) {
		return null != v;
	});
};
thx_Arrays.compare = function(a,b) {
	var v = a.length - b.length;
	if(v != 0) {
		return v;
	}
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		v = thx_Dynamics.compare(a[i],b[i]);
		if(v != 0) {
			return v;
		}
	}
	return 0;
};
thx_Arrays.contains = function(array,element,eq) {
	if(null == eq) {
		return thx__$ReadonlyArray_ReadonlyArray_$Impl_$.indexOf(array,element) >= 0;
	} else {
		var _g1 = 0;
		var _g = array.length;
		while(_g1 < _g) if(eq(array[_g1++],element)) {
			return true;
		}
		return false;
	}
};
thx_Arrays.containsAll = function(array,elements,eq) {
	var tmp = $iterator(elements)();
	while(tmp.hasNext()) if(!thx_Arrays.contains(array,tmp.next(),eq)) {
		return false;
	}
	return true;
};
thx_Arrays.containsAny = function(array,elements,eq) {
	var tmp = $iterator(elements)();
	while(tmp.hasNext()) if(thx_Arrays.contains(array,tmp.next(),eq)) {
		return true;
	}
	return false;
};
thx_Arrays.create = function(length,fillWith) {
	var arr = length > 0?new Array(length):[];
	var _g1 = 0;
	var _g = length;
	while(_g1 < _g) {
		var i = _g1++;
		arr[i] = fillWith;
	}
	return arr;
};
thx_Arrays.cross = function(a,b) {
	var r = [];
	var tmp = HxOverrides.iter(a);
	while(tmp.hasNext()) {
		var va = tmp.next();
		var tmp1 = HxOverrides.iter(b);
		while(tmp1.hasNext()) r.push([va,tmp1.next()]);
	}
	return r;
};
thx_Arrays.crossMulti = function(array) {
	var acopy = array.slice();
	var result = acopy.shift().map(function(v) {
		return [v];
	});
	while(acopy.length > 0) {
		var array1 = acopy.shift();
		var tresult = result;
		result = [];
		var tmp = HxOverrides.iter(array1);
		while(tmp.hasNext()) {
			var v1 = tmp.next();
			var _g = 0;
			while(_g < tresult.length) {
				var ar = tresult[_g];
				++_g;
				var t = ar.slice();
				t.push(v1);
				result.push(t);
			}
		}
	}
	return result;
};
thx_Arrays.distinct = function(array,predicate) {
	var result = [];
	if(array.length <= 1) {
		return array.slice();
	}
	if(null == predicate) {
		predicate = thx_Functions.equality;
	}
	var tmp = HxOverrides.iter(array);
	while(tmp.hasNext()) {
		var v = [tmp.next()];
		if(!thx_Arrays.any(result,(function(v1) {
			return function(r) {
				return predicate(r,v1[0]);
			};
		})(v))) {
			result.push(v[0]);
		}
	}
	return result;
};
thx_Arrays.eachPair = function(array,callback) {
	var _g1 = 0;
	var _g = array.length;
	while(_g1 < _g) {
		var i = _g1++;
		var _g3 = i;
		var _g2 = array.length;
		while(_g3 < _g2) if(!callback(array[i],array[_g3++])) {
			return;
		}
	}
};
thx_Arrays.equals = function(a,b,equality) {
	if(a == null || b == null || a.length != b.length) {
		return false;
	}
	if(null == equality) {
		equality = thx_Functions.equality;
	}
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(!equality(a[i],b[i])) {
			return false;
		}
	}
	return true;
};
thx_Arrays.extract = function(a,predicate) {
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(predicate(a[i])) {
			return a.splice(i,1)[0];
		}
	}
	return null;
};
thx_Arrays.filterNull = function(a) {
	var arr = [];
	var tmp = HxOverrides.iter(a);
	while(tmp.hasNext()) {
		var v = tmp.next();
		if(null != v) {
			arr.push(v);
		}
	}
	return arr;
};
thx_Arrays.filterOption = function(a) {
	return thx_Arrays.reduce(a,function(acc,maybeV) {
		switch(maybeV[1]) {
		case 0:
			acc.push(maybeV[2]);
			break;
		case 1:
			break;
		}
		return acc;
	},[]);
};
thx_Arrays.find = function(array,predicate) {
	var tmp = HxOverrides.iter(array);
	while(tmp.hasNext()) {
		var element = tmp.next();
		if(predicate(element)) {
			return element;
		}
	}
	return null;
};
thx_Arrays.findi = function(array,predicate) {
	var _g1 = 0;
	var _g = array.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(predicate(array[i],i)) {
			return array[i];
		}
	}
	return null;
};
thx_Arrays.findiOption = function(array,predicate) {
	var _g1 = 0;
	var _g = array.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(predicate(array[i],i)) {
			return haxe_ds_Option.Some(array[i]);
		}
	}
	return haxe_ds_Option.None;
};
thx_Arrays.findOption = function(array,predicate) {
	var tmp = HxOverrides.iter(array);
	while(tmp.hasNext()) {
		var element = tmp.next();
		if(predicate(element)) {
			return haxe_ds_Option.Some(element);
		}
	}
	return haxe_ds_Option.None;
};
thx_Arrays.findIndex = function(array,predicate) {
	var _g1 = 0;
	var _g = array.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(predicate(array[i])) {
			return i;
		}
	}
	return -1;
};
thx_Arrays.findLast = function(array,predicate) {
	var len = array.length;
	var j;
	var _g1 = 0;
	while(_g1 < len) {
		j = len - _g1++ - 1;
		if(predicate(array[j])) {
			return array[j];
		}
	}
	return null;
};
thx_Arrays.first = function(array) {
	return array[0];
};
thx_Arrays.flatMap = function(array,callback) {
	var array1 = array.map(callback);
	return Array.prototype.concat.apply([],array1);
};
thx_Arrays.flatten = function(array) {
	return Array.prototype.concat.apply([],array);
};
thx_Arrays.from = function(array,element) {
	return array.slice(thx__$ReadonlyArray_ReadonlyArray_$Impl_$.indexOf(array,element));
};
thx_Arrays.groupByAppend = function(arr,resolver,map) {
	var _g1 = 0;
	var _g = arr.length;
	while(_g1 < _g) {
		var v = arr[_g1++];
		var key = resolver(v);
		var acc = map.get(key);
		if(null == acc) {
			map.set(key,[v]);
		} else {
			acc.push(v);
		}
	}
	return map;
};
thx_Arrays.spanByIndex = function(arr,spanKey) {
	var acc = [];
	var cur = null;
	var j = -1;
	var _g1 = 0;
	var _g = arr.length;
	while(_g1 < _g) {
		var i = _g1++;
		var k = spanKey(i);
		if(k == null) {
			throw new thx_Error("spanKey function returned null for index " + i,null,{ fileName : "Arrays.hx", lineNumber : 567, className : "thx.Arrays", methodName : "spanByIndex"});
		}
		if(cur == k) {
			acc[j].push(arr[i]);
		} else {
			cur = k;
			++j;
			acc.push([arr[i]]);
		}
	}
	return acc;
};
thx_Arrays.hasElements = function(array) {
	if(null != array) {
		return array.length > 0;
	} else {
		return false;
	}
};
thx_Arrays.head = function(array) {
	return array[0];
};
thx_Arrays.ifEmpty = function(array,alt) {
	if(null != array && 0 != array.length) {
		return array;
	} else {
		return alt;
	}
};
thx_Arrays.initial = function(array) {
	return array.slice(0,array.length - 1);
};
thx_Arrays.intersperse = function(array,value) {
	var tmp = thx_Arrays.create(array.length * 2 - 1,value);
	return thx_Arrays.reducei(array,function(acc,v,i) {
		acc[i * 2] = v;
		return acc;
	},tmp);
};
thx_Arrays.isEmpty = function(array) {
	if(null != array) {
		return array.length == 0;
	} else {
		return true;
	}
};
thx_Arrays.last = function(array) {
	return array[array.length - 1];
};
thx_Arrays.mapi = function(array,callback) {
	return array.map(callback);
};
thx_Arrays.mapRight = function(array,callback) {
	var i = array.length;
	var result = [];
	while(--i >= 0) result.push(callback(array[i]));
	return result;
};
thx_Arrays.order = function(array,sort) {
	var n = array.slice();
	n.sort(sort);
	return n;
};
thx_Arrays.pull = function(array,toRemove,equality) {
	var tmp = HxOverrides.iter(toRemove);
	while(tmp.hasNext()) thx_Arrays.removeAll(array,tmp.next(),equality);
};
thx_Arrays.pushIf = function(array,condition,value) {
	if(condition) {
		array.push(value);
	}
	return array;
};
thx_Arrays.rank = function(array,compare,incrementDuplicates) {
	if(incrementDuplicates == null) {
		incrementDuplicates = true;
	}
	var arr = array.map(function(v,i) {
		return { _0 : v, _1 : i};
	});
	arr.sort(function(a,b) {
		return compare(a._0,b._0);
	});
	if(incrementDuplicates) {
		var usedIndexes = thx__$Set_Set_$Impl_$.createInt();
		return thx_Arrays.reducei(arr,function(acc,x,i1) {
			var index = i1 > 0 && compare(arr[i1 - 1]._0,x._0) == 0?acc[arr[i1 - 1]._1]:i1;
			while(usedIndexes.h.hasOwnProperty(index)) ++index;
			thx__$Set_Set_$Impl_$.add(usedIndexes,index);
			acc[x._1] = index;
			return acc;
		},[]);
	} else {
		return thx_Arrays.reducei(arr,function(acc1,x1,i2) {
			acc1[x1._1] = i2 > 0 && compare(arr[i2 - 1]._0,x1._0) == 0?acc1[arr[i2 - 1]._1]:i2;
			return acc1;
		},[]);
	}
};
thx_Arrays.reduce = function(array,f,initial) {
	var tmp = HxOverrides.iter(array);
	while(tmp.hasNext()) initial = f(initial,tmp.next());
	return initial;
};
thx_Arrays.foldLeft = function(array,init,f) {
	return thx_Arrays.reduce(array,f,init);
};
thx_Arrays.foldLeftEither = function(array,init,f) {
	var acc = thx_Either.Right(init);
	var tmp = HxOverrides.iter(array);
	while(tmp.hasNext()) {
		var a = tmp.next();
		switch(acc[1]) {
		case 0:
			return acc;
		case 1:
			acc = f(acc[2],a);
			break;
		}
	}
	return acc;
};
thx_Arrays.foldMap = function(array,f,m) {
	var array1 = array.map(f);
	var init = thx__$Monoid_Monoid_$Impl_$.get_zero(m);
	var _e = m;
	return thx_Arrays.reduce(array1,function(a0,a1) {
		return thx__$Monoid_Monoid_$Impl_$.append(_e,a0,a1);
	},init);
};
thx_Arrays.fold = function(array,m) {
	return thx_Arrays.foldMap(array,thx_Functions.identity,m);
};
thx_Arrays.nel = function(array) {
	return thx__$Nel_Nel_$Impl_$.fromArray(array);
};
thx_Arrays.foldS = function(array,s) {
	return thx_Options.map(thx_Arrays.nel(array),function(x) {
		return thx__$Nel_Nel_$Impl_$.fold(x,s);
	});
};
thx_Arrays.resize = function(array,length,fill) {
	while(array.length < length) array.push(fill);
	array.splice(length,array.length - length);
	return array;
};
thx_Arrays.reducei = function(array,f,initial) {
	var _g1 = 0;
	var _g = array.length;
	while(_g1 < _g) {
		var i = _g1++;
		initial = f(initial,array[i],i);
	}
	return initial;
};
thx_Arrays.reduceRight = function(array,f,initial) {
	var i = array.length;
	while(--i >= 0) initial = f(initial,array[i]);
	return initial;
};
thx_Arrays.removeAll = function(array,element,equality) {
	if(null == equality) {
		equality = thx_Functions.equality;
	}
	var i = array.length;
	while(--i >= 0) if(equality(array[i],element)) {
		array.splice(i,1);
	}
};
thx_Arrays.rest = function(array) {
	return array.slice(1);
};
thx_Arrays.reversed = function(array) {
	var result = array.slice();
	result.reverse();
	return result;
};
thx_Arrays.sample = function(array,n) {
	var b = array.length;
	if(n < b) {
		n = n;
	} else {
		n = b;
	}
	var copy = array.slice();
	var result = [];
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		++_g1;
		result.push(copy.splice(Std.random(copy.length),1)[0]);
	}
	return result;
};
thx_Arrays.sampleOne = function(array) {
	return array[Std.random(array.length)];
};
thx_Arrays.string = function(arr) {
	return "[" + arr.map(thx_Dynamics.string).join(", ") + "]";
};
thx_Arrays.shuffle = function(a) {
	var t = thx_Ints.range(a.length);
	var array = [];
	while(t.length > 0) {
		var pos = Std.random(t.length);
		var index = t[pos];
		t.splice(pos,1);
		array.push(a[index]);
	}
	return array;
};
thx_Arrays.split = function(array,parts) {
	return thx_Arrays.splitBy(array,Math.ceil(array.length / parts));
};
thx_Arrays.splitBy = function(array,len) {
	var res = [];
	var b = array.length;
	if(len < b) {
		len = len;
	} else {
		len = b;
	}
	var _g1 = 0;
	var _g = Math.ceil(array.length / len);
	while(_g1 < _g) {
		var p = _g1++;
		res.push(array.slice(p * len,(p + 1) * len));
	}
	return res;
};
thx_Arrays.splitByPad = function(arr,len,pad) {
	var res = thx_Arrays.splitBy(arr,len);
	while(res[res.length - 1].length < len) res[res.length - 1].push(pad);
	return res;
};
thx_Arrays.tail = function(array) {
	return array.slice(1);
};
thx_Arrays.take = function(arr,n) {
	return arr.slice(0,n);
};
thx_Arrays.takeLast = function(arr,n) {
	return arr.slice(arr.length - n);
};
thx_Arrays.traverseOption = function(arr,f) {
	var tmp = haxe_ds_Option.Some([]);
	return thx_Arrays.reduce(arr,function(acc,t) {
		return thx_Options.ap(f(t),thx_Options.map(acc,function(ux) {
			return function(u) {
				ux.push(u);
				return ux;
			};
		}));
	},tmp);
};
thx_Arrays.traverseValidation = function(arr,f,s) {
	return thx_Arrays.reduce(arr,function(acc,t) {
		return thx__$Validation_Validation_$Impl_$.ap(f(t),thx__$Validation_Validation_$Impl_$.ap(acc,thx_Either.Right(function(ux) {
			return function(u) {
				ux.push(u);
				return ux;
			};
		}),function(e1,e2) {
			throw new js__$Boot_HaxeError("Unreachable");
		}),s);
	},thx_Either.Right([]));
};
thx_Arrays.traverseValidationIndexed = function(arr,f,s) {
	return thx_Arrays.reducei(arr,function(acc,t,i) {
		return thx__$Validation_Validation_$Impl_$.ap(f(t,i),thx__$Validation_Validation_$Impl_$.ap(acc,thx_Either.Right(function(ux) {
			return function(u) {
				ux.push(u);
				return ux;
			};
		}),function(e1,e2) {
			throw new js__$Boot_HaxeError("Unreachable");
		}),s);
	},thx_Either.Right([]));
};
thx_Arrays.rotate = function(arr) {
	var result = [];
	var _g1 = 0;
	var _g = arr[0].length;
	while(_g1 < _g) {
		var i = _g1++;
		var row = [];
		result.push(row);
		var _g3 = 0;
		var _g2 = arr.length;
		while(_g3 < _g2) row.push(arr[_g3++][i]);
	}
	return result;
};
thx_Arrays.sliding2 = function(arr,f) {
	if(arr.length < 2) {
		return [];
	} else {
		var result = [];
		var _g1 = 0;
		var _g = arr.length - 1;
		while(_g1 < _g) {
			var i = _g1++;
			result.push(f(arr[i],arr[i + 1]));
		}
		return result;
	}
};
thx_Arrays.unzip = function(array) {
	var a1 = [];
	var a2 = [];
	array.map(function(t) {
		a1.push(t._0);
		a2.push(t._1);
	});
	return { _0 : a1, _1 : a2};
};
thx_Arrays.unzip3 = function(array) {
	var a1 = [];
	var a2 = [];
	var a3 = [];
	array.map(function(t) {
		a1.push(t._0);
		a2.push(t._1);
		a3.push(t._2);
	});
	return { _0 : a1, _1 : a2, _2 : a3};
};
thx_Arrays.unzip4 = function(array) {
	var a1 = [];
	var a2 = [];
	var a3 = [];
	var a4 = [];
	array.map(function(t) {
		a1.push(t._0);
		a2.push(t._1);
		a3.push(t._2);
		a4.push(t._3);
	});
	return { _0 : a1, _1 : a2, _2 : a3, _3 : a4};
};
thx_Arrays.unzip5 = function(array) {
	var a1 = [];
	var a2 = [];
	var a3 = [];
	var a4 = [];
	var a5 = [];
	array.map(function(t) {
		a1.push(t._0);
		a2.push(t._1);
		a3.push(t._2);
		a4.push(t._3);
		a5.push(t._4);
	});
	return { _0 : a1, _1 : a2, _2 : a3, _3 : a4, _4 : a5};
};
thx_Arrays.zip = function(array1,array2) {
	var a = array1.length;
	var b = array2.length;
	var length = a < b?a:b;
	var array = [];
	var _g1 = 0;
	var _g = length;
	while(_g1 < _g) {
		var i = _g1++;
		array.push({ _0 : array1[i], _1 : array2[i]});
	}
	return array;
};
thx_Arrays.zip3 = function(array1,array2,array3) {
	var length = thx_ArrayInts.min([array1.length,array2.length,array3.length]);
	var array = [];
	var _g1 = 0;
	while(_g1 < length) {
		var i = _g1++;
		array.push({ _0 : array1[i], _1 : array2[i], _2 : array3[i]});
	}
	return array;
};
thx_Arrays.zip4 = function(array1,array2,array3,array4) {
	var length = thx_ArrayInts.min([array1.length,array2.length,array3.length,array4.length]);
	var array = [];
	var _g1 = 0;
	while(_g1 < length) {
		var i = _g1++;
		array.push({ _0 : array1[i], _1 : array2[i], _2 : array3[i], _3 : array4[i]});
	}
	return array;
};
thx_Arrays.zip5 = function(array1,array2,array3,array4,array5) {
	var length = thx_ArrayInts.min([array1.length,array2.length,array3.length,array4.length,array5.length]);
	var array = [];
	var _g1 = 0;
	while(_g1 < length) {
		var i = _g1++;
		array.push({ _0 : array1[i], _1 : array2[i], _2 : array3[i], _3 : array4[i], _4 : array5[i]});
	}
	return array;
};
thx_Arrays.zipAp = function(ax,fx) {
	var result = [];
	var _g1 = 0;
	var a = ax.length;
	var b = fx.length;
	var _g = a < b?a:b;
	while(_g1 < _g) {
		var i = _g1++;
		result.push(fx[i](ax[i]));
	}
	return result;
};
thx_Arrays.zip2Ap = function(f,ax,bx) {
	return thx_Arrays.zipAp(bx,ax.map(thx_Functions2.curry(f)));
};
thx_Arrays.zip3Ap = function(f,ax,bx,cx) {
	var f1 = f;
	return thx_Arrays.zipAp(cx,thx_Arrays.zip2Ap(function(a,b) {
		return function(c) {
			return f1(a,b,c);
		};
	},ax,bx));
};
thx_Arrays.zip4Ap = function(f,ax,bx,cx,dx) {
	var f1 = f;
	return thx_Arrays.zipAp(dx,thx_Arrays.zip3Ap(function(a,b,c) {
		return function(d) {
			return f1(a,b,c,d);
		};
	},ax,bx,cx));
};
thx_Arrays.zip5Ap = function(f,ax,bx,cx,dx,ex) {
	var f1 = f;
	return thx_Arrays.zipAp(ex,thx_Arrays.zip4Ap(function(a,b,c,d) {
		return function(e) {
			return f1(a,b,c,d,e);
		};
	},ax,bx,cx,dx));
};
thx_Arrays.withPrepend = function(arr,el) {
	return [el].concat(arr);
};
thx_Arrays["with"] = function(arr,el) {
	return arr.concat([el]);
};
thx_Arrays.withSlice = function(arr,other,start,length) {
	if(length == null) {
		length = 0;
	}
	return arr.slice(0,start).concat(other).concat(arr.slice(start + length));
};
thx_Arrays.withInsert = function(arr,el,pos) {
	return arr.slice(0,pos).concat([el]).concat(arr.slice(pos));
};
thx_Arrays.maxBy = function(arr,ord) {
	if(arr.length == 0) {
		return haxe_ds_Option.None;
	} else {
		var _e = ord;
		return haxe_ds_Option.Some(thx_Arrays.reduce(arr,function(a0,a1) {
			return thx__$Ord_Ord_$Impl_$.max(_e,a0,a1);
		},arr[0]));
	}
};
thx_Arrays.minBy = function(arr,ord) {
	if(arr.length == 0) {
		return haxe_ds_Option.None;
	} else {
		var _e = ord;
		return haxe_ds_Option.Some(thx_Arrays.reduce(arr,function(a0,a1) {
			return thx__$Ord_Ord_$Impl_$.min(_e,a0,a1);
		},arr[0]));
	}
};
thx_Arrays.toMap = function(arr,keyOrder) {
	var m = thx_fp_MapImpl.Tip;
	var collisions = [];
	var _g1 = 0;
	var _g = arr.length;
	while(_g1 < _g) {
		var tuple = arr[_g1++];
		if(thx_Options.isNone(thx_fp__$Map_Map_$Impl_$.lookup(m,tuple._0,keyOrder))) {
			m = thx_fp__$Map_Map_$Impl_$.insert(m,tuple._0,tuple._1,keyOrder);
		} else {
			collisions.push(tuple._0);
		}
	}
	return thx_Options.toFailure(thx__$Nel_Nel_$Impl_$.fromArray(collisions),m);
};
var thx_ArrayFloats = function() { };
thx_ArrayFloats.__name__ = ["thx","ArrayFloats"];
thx_ArrayFloats.average = function(arr) {
	return thx_ArrayFloats.sum(arr) / arr.length;
};
thx_ArrayFloats.compact = function(arr) {
	return arr.filter(function(v) {
		if(null != v) {
			return isFinite(v);
		} else {
			return false;
		}
	});
};
thx_ArrayFloats.max = function(arr) {
	return thx_Options.get(thx_Arrays.maxBy(arr,thx_Floats.order));
};
thx_ArrayFloats.min = function(arr) {
	return thx_Options.get(thx_Arrays.minBy(arr,thx_Floats.order));
};
thx_ArrayFloats.resize = function(array,length,fill) {
	if(fill == null) {
		fill = 0.0;
	}
	while(array.length < length) array.push(fill);
	array.splice(length,array.length - length);
	return array;
};
thx_ArrayFloats.standardDeviation = function(array) {
	if(array.length < 2) {
		return 0.0;
	}
	var mean = thx_ArrayFloats.average(array);
	return Math.sqrt(thx_Arrays.reduce(array,function(acc,val) {
		return acc + Math.pow(val - mean,2);
	},0) / (array.length - 1));
};
thx_ArrayFloats.sum = function(arr) {
	return thx_Arrays.reduce(arr,function(tot,v) {
		return tot + v;
	},0.0);
};
var thx_ArrayInts = function() { };
thx_ArrayInts.__name__ = ["thx","ArrayInts"];
thx_ArrayInts.average = function(arr) {
	return thx_ArrayInts.sum(arr) / arr.length;
};
thx_ArrayInts.max = function(arr) {
	return thx_Options.get(thx_Arrays.maxBy(arr,thx_Ints.order));
};
thx_ArrayInts.min = function(arr) {
	return thx_Options.get(thx_Arrays.minBy(arr,thx_Ints.order));
};
thx_ArrayInts.resize = function(array,length,fill) {
	if(fill == null) {
		fill = 0;
	}
	while(array.length < length) array.push(fill);
	array.splice(length,array.length - length);
	return array;
};
thx_ArrayInts.sum = function(arr) {
	return thx_Arrays.reduce(arr,function(tot,v) {
		return tot + v;
	},0);
};
var thx_ArrayStrings = function() { };
thx_ArrayStrings.__name__ = ["thx","ArrayStrings"];
thx_ArrayStrings.compact = function(arr) {
	return arr.filter(function(v) {
		return !thx_Strings.isEmpty(v);
	});
};
thx_ArrayStrings.max = function(arr) {
	return thx_Options.getOrElse(thx_Arrays.maxBy(arr,thx_Strings.order),null);
};
thx_ArrayStrings.min = function(arr) {
	return thx_Options.getOrElse(thx_Arrays.minBy(arr,thx_Strings.order),null);
};
var thx_IAssertBehavior = function() { };
thx_IAssertBehavior.__name__ = ["thx","IAssertBehavior"];
thx_IAssertBehavior.prototype = {
	success: null
	,fail: null
	,warn: null
	,__class__: thx_IAssertBehavior
};
var thx_DefaultAssertBehavior = function() {
};
thx_DefaultAssertBehavior.__name__ = ["thx","DefaultAssertBehavior"];
thx_DefaultAssertBehavior.__interfaces__ = [thx_IAssertBehavior];
thx_DefaultAssertBehavior.prototype = {
	success: function(pos) {
	}
	,warn: function(message,pos) {
		haxe_Log.trace(message,pos);
	}
	,fail: function(message,pos) {
		throw new thx_error_AssertError(message,pos);
	}
	,__class__: thx_DefaultAssertBehavior
};
var thx_Assert = function() { };
thx_Assert.__name__ = ["thx","Assert"];
thx_Assert.contains = function(possibilities,value,msg,pos) {
	if(thx_Arrays.contains(possibilities,value)) {
		thx_Assert.pass(msg,pos);
	} else {
		thx_Assert.fail(msg == null?"value " + Std.string(value) + " not found in the expected possibilities " + Std.string(possibilities):msg,pos);
	}
};
thx_Assert.equals = function(expected,value,msg,pos) {
	if(msg == null) {
		msg = "expected " + Std.string(expected) + " but it is " + Std.string(value);
	}
	thx_Assert.isTrue(expected == value,msg,pos);
};
thx_Assert.excludes = function(match,values,msg,pos) {
	if(!thx_Arrays.contains(values,match)) {
		thx_Assert.pass(msg,pos);
	} else {
		thx_Assert.fail(msg == null?"values " + Std.string(values) + " do contain " + Std.string(match):msg,pos);
	}
};
thx_Assert.fail = function(msg,pos) {
	if(msg == null) {
		msg = "failure expected";
	}
	thx_Assert.isTrue(false,msg,pos);
};
thx_Assert.isContainedIn = function(match,values,msg,pos) {
	if(thx_Arrays.contains(values,match)) {
		thx_Assert.pass(msg,pos);
	} else {
		thx_Assert.fail(msg == null?"values " + Std.string(values) + " do not contain " + Std.string(match):msg,pos);
	}
};
thx_Assert.isFalse = function(value,msg,pos) {
	if(null == msg) {
		msg = "expected false";
	}
	thx_Assert.isTrue(value == false,msg,pos);
};
thx_Assert["is"] = function(value,type,msg,pos) {
	if(msg == null) {
		msg = "expected type " + (js_Boot.__instanceof(type,ValueType)?thx_Types.toString(type):js_Boot.__instanceof(type,Class)?Type.getClassName(type):js_Boot.__instanceof(type,Enum)?Type.getEnumName(type):thx_Types.toString(Type["typeof"](type))) + " but it is " + thx_Types.toString(Type["typeof"](value));
	}
	thx_Assert.isTrue(js_Boot.__instanceof(value,type),msg,pos);
};
thx_Assert.isNull = function(value,msg,pos) {
	if(msg == null) {
		msg = "expected null but it is " + Std.string(value);
	}
	thx_Assert.isTrue(value == null,msg,pos);
};
thx_Assert.isTrue = function(cond,msg,pos) {
	if(cond) {
		thx_Assert.behavior.success(pos);
	} else {
		thx_Assert.behavior.fail(msg,pos);
	}
};
thx_Assert.matches = function(pattern,value,msg,pos) {
	if(msg == null) {
		msg = "the value " + Std.string(value) + " does not match the provided pattern";
	}
	thx_Assert.isTrue(pattern.match(value),msg,pos);
};
thx_Assert.nearEquals = function(expected,value,approx,msg,pos) {
	if(msg == null) {
		msg = "expected " + expected + " but it is " + value;
	}
	thx_Assert.isTrue(thx_Floats.nearEquals(expected,value,approx),msg,pos);
	return;
};
thx_Assert.notEquals = function(expected,value,msg,pos) {
	if(msg == null) {
		msg = "expected " + Std.string(expected) + " and test value " + Std.string(value) + " should be different";
	}
	thx_Assert.isFalse(expected == value,msg,pos);
};
thx_Assert.notNull = function(value,msg,pos) {
	if(null == msg) {
		msg = "expected not null";
	}
	thx_Assert.isTrue(value != null,msg,pos);
};
thx_Assert.pass = function(msg,pos) {
	if(msg == null) {
		msg = "pass expected";
	}
	thx_Assert.isTrue(true,msg,pos);
};
thx_Assert.raises = function(method,type,msgNotThrown,msgWrongType,pos) {
	try {
		method();
		if(null == msgNotThrown) {
			msgNotThrown = "exception of type " + (null == type?"Dynamic":js_Boot.__instanceof(type,ValueType)?thx_Types.toString(type):js_Boot.__instanceof(type,Class)?Type.getClassName(type):js_Boot.__instanceof(type,Enum)?Type.getEnumName(type):thx_Types.toString(Type["typeof"](type))) + " not raised";
		}
		thx_Assert.fail(msgNotThrown,pos);
	} catch( ex ) {
		haxe_CallStack.lastException = ex;
		if (ex instanceof js__$Boot_HaxeError) ex = ex.val;
		if(null == type) {
			thx_Assert.pass(null,pos);
		} else {
			if(null == msgWrongType) {
				msgWrongType = "expected throw of type " + (js_Boot.__instanceof(type,ValueType)?thx_Types.toString(type):js_Boot.__instanceof(type,Class)?Type.getClassName(type):js_Boot.__instanceof(type,Enum)?Type.getEnumName(type):thx_Types.toString(Type["typeof"](type))) + " but it is " + Std.string(ex);
			}
			thx_Assert.isTrue(js_Boot.__instanceof(ex,type),msgWrongType,pos);
		}
	}
};
thx_Assert.same = function(expected,value,recursive,msg,pos) {
	if(recursive == null) {
		recursive = true;
	}
	var status = { recursive : recursive, path : "", error : null};
	if(thx_Assert.sameAs(expected,value,status)) {
		thx_Assert.pass(msg,pos);
	} else {
		thx_Assert.fail(msg == null?status.error:msg,pos);
	}
};
thx_Assert.stringContains = function(match,value,msg,pos) {
	if(value != null && value.indexOf(match) >= 0) {
		thx_Assert.pass(msg,pos);
	} else {
		thx_Assert.fail(msg == null?"value " + thx_Strings.quote(value) + " does not contain " + thx_Strings.quote(match):msg,pos);
	}
};
thx_Assert.stringSequence = function(sequence,value,msg,pos) {
	if(null == value) {
		thx_Assert.fail(msg == null?"null argument value":msg,pos);
		return;
	}
	var p = 0;
	var _g = 0;
	while(_g < sequence.length) {
		var s = sequence[_g];
		++_g;
		var p2 = value.indexOf(s,p);
		if(p2 < 0) {
			if(msg == null) {
				msg = "expected " + thx_Strings.quote(s) + " after ";
				if(p > 0) {
					msg += " " + thx_Strings.quote(thx_Strings.ellipsis(value,30));
				} else {
					msg += " begin";
				}
			}
			thx_Assert.fail(msg,pos);
			return;
		}
		p = p2 + s.length;
	}
	thx_Assert.pass(msg,pos);
};
thx_Assert.warn = function(msg,pos) {
	thx_Assert.behavior.warn(msg,pos);
};
thx_Assert.sameAs = function(expected,value,status) {
	var withPath = function(msg) {
		return msg + (thx_Strings.isEmpty(status.path)?"":" at " + status.path);
	};
	if(!thx_Types.sameType(expected,value)) {
		status.error = withPath("expected type " + thx_Types.toString(Type["typeof"](expected)) + " but it is " + thx_Types.toString(Type["typeof"](value)));
		return false;
	}
	var _g = Type["typeof"](expected);
	switch(_g[1]) {
	case 0:case 1:case 3:
		if(expected != value) {
			status.error = withPath("expected " + Std.string(expected) + " but it is " + Std.string(value));
			return false;
		}
		return true;
	case 2:
		if(!thx_Floats.nearEquals(expected,value)) {
			status.error = withPath("expected " + Std.string(expected) + " but it is " + Std.string(value));
			return false;
		}
		return true;
	case 4:
		if(status.recursive || status.path == "") {
			var tfields = Reflect.fields(value);
			var fields = Reflect.fields(expected);
			var path = status.path;
			var _g1 = 0;
			while(_g1 < fields.length) {
				var field = fields[_g1];
				++_g1;
				HxOverrides.remove(tfields,field);
				status.path = path == ""?field:"" + path + "." + field;
				if(!Object.prototype.hasOwnProperty.call(value,field)) {
					status.error = withPath("expected field " + status.path + " does not exist in " + Std.string(value));
					return false;
				}
				var e = Reflect.field(expected,field);
				if(Reflect.isFunction(e)) {
					continue;
				}
				if(!thx_Assert.sameAs(e,Reflect.field(value,field),status)) {
					return false;
				}
			}
			if(tfields.length > 0) {
				status.error = withPath("the tested object has extra field(s) (" + tfields.join(", ") + ") not included in the expected ones");
				return false;
			}
		}
		if(thx_Iterators.isIterator(expected)) {
			if(!thx_Iterators.isIterator(value)) {
				status.error = withPath("expected an Iterable");
				return false;
			}
			if(status.recursive || status.path == "") {
				var evalues = thx_Iterators.toArray(expected);
				var vvalues = thx_Iterators.toArray(value);
				if(evalues.length != vvalues.length) {
					status.error = withPath("expected " + evalues.length + " values in Iterator but they are " + vvalues.length);
					return false;
				}
				var path1 = status.path;
				var _g11 = 0;
				var _g2 = evalues.length;
				while(_g11 < _g2) {
					var i = _g11++;
					status.path = path1 == ""?"iterator[" + i + "]":path1 + ("[" + i + "]");
					if(!thx_Assert.sameAs(evalues[i],vvalues[i],status)) {
						status.error = withPath("expected " + Std.string(expected) + " but it is " + Std.string(value));
						return false;
					}
				}
			}
			return true;
		}
		if(thx_Iterables.isIterable(expected)) {
			if(!thx_Iterables.isIterable(value)) {
				status.error = withPath("expected an Iterator");
				return false;
			}
			if(status.recursive || status.path == "") {
				var evalues1 = thx_Iterators.toArray($iterator(expected)());
				var vvalues1 = thx_Iterators.toArray($iterator(value)());
				if(evalues1.length != vvalues1.length) {
					status.error = withPath("expected " + evalues1.length + " values in Iterable but they are " + vvalues1.length);
					return false;
				}
				var path2 = status.path;
				var _g12 = 0;
				var _g3 = evalues1.length;
				while(_g12 < _g3) {
					var i1 = _g12++;
					status.path = path2 == ""?"iterable[" + i1 + "]":path2 + ("[" + i1 + "]");
					if(!thx_Assert.sameAs(evalues1[i1],vvalues1[i1],status)) {
						return false;
					}
				}
			}
			return true;
		}
		return true;
	case 5:
		if(!Reflect.compareMethods(expected,value)) {
			status.error = withPath("expected same function reference");
			return false;
		}
		return true;
	case 6:
		var c = _g[2];
		if(typeof(expected) == "string" && expected != value) {
			status.error = withPath("expected " + thx_Strings.quote(expected) + " but it is " + thx_Strings.quote(value));
			return false;
		}
		if((expected instanceof Array) && expected.__enum__ == null) {
			if(status.recursive || status.path == "") {
				if(expected.length != value.length) {
					status.error = withPath("expected " + Std.string(expected.length) + " elements but they are " + Std.string(value.length));
					return false;
				}
				var path3 = status.path;
				var _g13 = 0;
				var _g4 = expected.length;
				while(_g13 < _g4) {
					var i2 = _g13++;
					status.path = path3 == ""?"array[" + i2 + "]":path3 + ("[" + i2 + "]");
					if(!thx_Assert.sameAs(expected[i2],value[i2],status)) {
						status.error = withPath("expected " + Std.string(expected[i2]) + " but it is " + Std.string(value[i2]));
						return false;
					}
				}
			}
			return true;
		}
		if(js_Boot.__instanceof(expected,Date)) {
			if(expected.getTime() != value.getTime()) {
				status.error = withPath("expected " + Std.string(expected) + " but it is " + Std.string(value));
				return false;
			}
			return true;
		}
		if(js_Boot.__instanceof(expected,haxe_io_Bytes)) {
			if(status.recursive || status.path == "") {
				var ebytes = expected;
				var vbytes = value;
				if(ebytes.length != vbytes.length) {
					return false;
				}
				var _g14 = 0;
				var _g5 = ebytes.length;
				while(_g14 < _g5) {
					var i3 = _g14++;
					if(ebytes.b[i3] != vbytes.b[i3]) {
						status.error = withPath("expected byte " + ebytes.b[i3] + " but it is " + vbytes.b[i3]);
						return false;
					}
				}
			}
			return true;
		}
		if(js_Boot.__instanceof(expected,haxe_IMap)) {
			if(status.recursive || status.path == "") {
				var map = js_Boot.__cast(expected , haxe_IMap);
				var vmap = js_Boot.__cast(value , haxe_IMap);
				var _g6 = [];
				var tmp = map.keys();
				while(tmp.hasNext()) _g6.push(tmp.next());
				var keys = _g6;
				var _g15 = [];
				var tmp1 = vmap.keys();
				while(tmp1.hasNext()) _g15.push(tmp1.next());
				var vkeys = _g15;
				if(keys.length != vkeys.length) {
					status.error = withPath("expected " + keys.length + " keys but they are " + vkeys.length);
					return false;
				}
				var path4 = status.path;
				var _g21 = 0;
				while(_g21 < keys.length) {
					var key = keys[_g21];
					++_g21;
					status.path = path4 == ""?"hash[" + Std.string(key) + "]":path4 + ("[" + Std.string(key) + "]");
					if(!thx_Assert.sameAs(map.get(key),vmap.get(key),status)) {
						status.error = withPath("expected " + Std.string(expected) + " but it is " + Std.string(value));
						return false;
					}
				}
			}
			return true;
		}
		if(thx_Iterators.isIterator(expected)) {
			if(status.recursive || status.path == "") {
				var evalues2 = thx_Iterators.toArray(expected);
				var vvalues2 = thx_Iterators.toArray(value);
				if(evalues2.length != vvalues2.length) {
					status.error = withPath("expected " + evalues2.length + " values in Iterator but they are " + vvalues2.length);
					return false;
				}
				var path5 = status.path;
				var _g16 = 0;
				var _g7 = evalues2.length;
				while(_g16 < _g7) {
					var i4 = _g16++;
					status.path = path5 == ""?"iterator[" + i4 + "]":path5 + ("" + path5 + "[" + i4 + "]");
					if(!thx_Assert.sameAs(evalues2[i4],vvalues2[i4],status)) {
						status.error = withPath("expected " + Std.string(expected) + " but it is " + Std.string(value));
						return false;
					}
				}
			}
			return true;
		}
		if(thx_Iterables.isIterable(expected)) {
			if(status.recursive || status.path == "") {
				var evalues3 = thx_Iterators.toArray($iterator(expected)());
				var vvalues3 = thx_Iterators.toArray($iterator(value)());
				if(evalues3.length != vvalues3.length) {
					status.error = withPath("expected " + evalues3.length + " values in Iterable but they are " + vvalues3.length);
					return false;
				}
				var path6 = status.path;
				var _g17 = 0;
				var _g8 = evalues3.length;
				while(_g17 < _g8) {
					var i5 = _g17++;
					status.path = path6 == ""?"iterable[" + i5 + "]":path6 + ("[" + i5 + "]");
					if(!thx_Assert.sameAs(evalues3[i5],vvalues3[i5],status)) {
						return false;
					}
				}
			}
			return true;
		}
		if(status.recursive || status.path == "") {
			var o = expected;
			var fields1 = Type.getInstanceFields(o == null?null:js_Boot.getClass(o));
			var path7 = status.path;
			var _g9 = 0;
			while(_g9 < fields1.length) {
				var field1 = fields1[_g9];
				++_g9;
				status.path = path7 == ""?field1:"" + path7 + "." + field1;
				var e1 = Reflect.field(expected,field1);
				if(Reflect.isFunction(e1)) {
					continue;
				}
				if(!thx_Assert.sameAs(e1,Reflect.field(value,field1),status)) {
					return false;
				}
			}
		}
		return true;
	case 7:
		var eexpected = Type.getEnumName(_g[2]);
		var evalue = Type.getEnumName(Type.getEnum(value));
		if(eexpected != evalue) {
			status.error = withPath("expected enumeration of " + eexpected + " but it is " + evalue);
			return false;
		}
		if(status.recursive || status.path == "") {
			if(expected[1] != value[1]) {
				status.error = withPath("expected " + expected[0] + " but it is " + value[0]);
				return false;
			}
			var eparams = expected.slice(2);
			var vparams = value.slice(2);
			var path8 = status.path;
			var _g18 = 0;
			var _g10 = eparams.length;
			while(_g18 < _g10) {
				var i6 = _g18++;
				status.path = path8 == ""?"enum[" + i6 + "]":path8 + ("[" + i6 + "]");
				if(!thx_Assert.sameAs(eparams[i6],vparams[i6],status)) {
					status.error = withPath("expected " + Std.string(expected) + " but it is " + Std.string(value));
					return false;
				}
			}
		}
		return true;
	case 8:
		throw new js__$Boot_HaxeError("Unable to compare two unknown types");
		break;
	}
};
var thx_bigint_BigIntImpl = function() { };
thx_bigint_BigIntImpl.__name__ = ["thx","bigint","BigIntImpl"];
thx_bigint_BigIntImpl.prototype = {
	sign: null
	,isSmall: null
	,abs: null
	,add: null
	,subtract: null
	,divide: null
	,multiply: null
	,modulo: null
	,random: null
	,negate: null
	,next: null
	,prev: null
	,pow: null
	,shiftLeft: null
	,shiftRight: null
	,square: null
	,isEven: null
	,isOdd: null
	,isUnit: null
	,isZero: null
	,compareTo: null
	,compareToAbs: null
	,not: null
	,and: null
	,or: null
	,xor: null
	,toFloat: null
	,toInt: null
	,toString: null
	,toStringWithBase: null
	,divMod: null
	,__class__: thx_bigint_BigIntImpl
};
var thx_bigint_Small = function(value) {
	this.sign = value < 0;
	this.value = value;
	this.isSmall = true;
};
thx_bigint_Small.__name__ = ["thx","bigint","Small"];
thx_bigint_Small.__interfaces__ = [thx_bigint_BigIntImpl];
thx_bigint_Small.prototype = {
	value: null
	,sign: null
	,isSmall: null
	,add: function(that) {
		if(this.isZero()) {
			return that;
		}
		if(that.isZero()) {
			return this;
		}
		if(this.sign != that.sign) {
			return this.subtract(that.negate());
		}
		if(that.isSmall) {
			return this.addSmall(that);
		} else {
			return this.addBig(that);
		}
	}
	,addSmall: function(small) {
		if(thx_bigint_Bigs.isPrecise(this.value + small.value)) {
			return new thx_bigint_Small(this.value + small.value);
		} else {
			var v = small.value;
			var tmp = thx_bigint_Bigs.smallToArray(v < 0?-v:v);
			var v1 = this.value;
			return new thx_bigint_Big(thx_bigint_Bigs.addSmall(tmp,v1 < 0?-v1:v1),this.sign);
		}
	}
	,addBig: function(big) {
		var v = this.value;
		return new thx_bigint_Big(thx_bigint_Bigs.addSmall(big.value,v < 0?-v:v),this.sign);
	}
	,subtract: function(that) {
		if(this.isZero()) {
			return that.negate();
		}
		if(that.isZero()) {
			return this;
		}
		if(this.sign != that.sign) {
			return this.add(that.negate());
		}
		if(that.isSmall) {
			return this.subtractSmall(that);
		} else {
			return this.subtractBig(that);
		}
	}
	,subtractSmall: function(small) {
		return new thx_bigint_Small(this.value - small.value);
	}
	,subtractBig: function(big) {
		if(big.compareToAbsSmall(this) < 0) {
			return new thx_bigint_Small(this.value - big.toInt());
		}
		var v = this.value;
		return thx_bigint_Bigs.subtractSmall(big.value,v < 0?-v:v,this.value >= 0);
	}
	,divide: function(that) {
		return this.divMod(that).quotient;
	}
	,divMod: function(that) {
		if(that.isZero()) {
			throw new thx_Error("division by zero",null,{ fileName : "Small.hx", lineNumber : 77, className : "thx.bigint.Small", methodName : "divMod"});
		}
		if(that.isSmall) {
			return this.divModSmall(that);
		} else {
			return this.divModBig(that);
		}
	}
	,divModSmall: function(small) {
		var value = this.value / small.value;
		return { quotient : new thx_bigint_Small(value < 0.0?Math.ceil(value):Math.floor(value)), remainder : new thx_bigint_Small(this.value % small.value)};
	}
	,divModBig: function(big) {
		var v = this.value;
		return new thx_bigint_Big(thx_bigint_Bigs.smallToArray(v < 0?-v:v),this.value < 0).divModBig(big);
	}
	,multiply: function(that) {
		if(that.isSmall) {
			return this.multiplySmall(that);
		} else {
			return this.multiplyBig(that);
		}
	}
	,multiplySmall: function(small) {
		if(thx_bigint_Bigs.isPrecise(this.value * small.value)) {
			return new thx_bigint_Small(this.value * small.value);
		}
		var v = small.value;
		var arr = thx_bigint_Bigs.smallToArray(v < 0?-v:v);
		var v1 = this.value;
		var abs = v1 < 0?-v1:v1;
		if(abs < 10000000) {
			return new thx_bigint_Big(thx_bigint_Bigs.multiplySmall(arr,abs),this.sign != small.sign);
		} else {
			return new thx_bigint_Big(thx_bigint_Bigs.multiplyLong(arr,thx_bigint_Bigs.smallToArray(abs)),this.sign != small.sign);
		}
	}
	,multiplyBig: function(big) {
		var v = this.value;
		return new thx_bigint_Big(thx_bigint_Bigs.multiplyLong(big.value,thx_bigint_Bigs.smallToArray(v < 0?-v:v)),this.sign != big.sign);
	}
	,modulo: function(that) {
		return this.divMod(that).remainder;
	}
	,random: function() {
		return thx_bigint_Bigs.fromInt(Math.random() * this.value | 0);
	}
	,abs: function() {
		var v = this.value;
		return new thx_bigint_Small(v < 0?-v:v);
	}
	,negate: function() {
		return new thx_bigint_Small(-this.value);
	}
	,next: function() {
		return this.addSmall(thx_bigint_Small.one);
	}
	,prev: function() {
		return this.addSmall(thx_bigint_Small.negativeOne);
	}
	,pow: function(exp) {
		if(this.isZero()) {
			if(exp.isZero()) {
				return thx_bigint_Small.one;
			} else {
				return this;
			}
		}
		if(this.isUnit()) {
			if(this.sign) {
				if(exp.isEven()) {
					return thx_bigint_Small.one;
				} else {
					return thx_bigint_Small.negativeOne;
				}
			} else {
				return thx_bigint_Small.one;
			}
		}
		if(exp.sign) {
			return thx_bigint_Small.zero;
		}
		if(!exp.isSmall) {
			throw new thx_Error("The exponent " + Std.string(exp) + " is too large.",null,{ fileName : "Small.hx", lineNumber : 141, className : "thx.bigint.Small", methodName : "pow"});
		}
		var b = exp.value;
		if(thx_bigint_Bigs.canPower(this.value,b)) {
			return new thx_bigint_Small(Math.pow(this.value,b) | 0);
		}
		var v = this.value;
		return new thx_bigint_Big(thx_bigint_Bigs.smallToArray(v < 0?-v:v),this.sign).pow(exp);
	}
	,shiftLeft: function(n) {
		if(n < 0) {
			return this.shiftRight(-n);
		}
		if((n < 0?-n:n) > 10000000) {
			return this.multiply(thx_bigint_Small.two.pow(thx_bigint_Bigs.fromInt(n)));
		}
		var result = this;
		while(n >= thx_bigint_Bigs.powers2Length) {
			result = result.multiply(thx_bigint_Bigs.bigHighestPower2);
			n -= thx_bigint_Bigs.powers2Length - 1;
		}
		return result.multiply(thx_bigint_Bigs.bigPowersOfTwo[n]);
	}
	,shiftRight: function(n) {
		if(n < 0) {
			return this.shiftLeft(-n);
		}
		var remQuo;
		if((n < 0?-n:n) > 10000000) {
			remQuo = this.divMod(thx_bigint_Small.two.pow(thx_bigint_Bigs.fromInt(n)));
			if(remQuo.remainder.sign) {
				return remQuo.quotient.prev();
			} else {
				return remQuo.quotient;
			}
		}
		var result = this;
		while(n >= thx_bigint_Bigs.powers2Length) {
			if(result.isZero()) {
				return result;
			}
			remQuo = result.divMod(thx_bigint_Bigs.bigHighestPower2);
			if(remQuo.remainder.sign) {
				result = remQuo.quotient.prev();
			} else {
				result = remQuo.quotient;
			}
			n -= thx_bigint_Bigs.powers2Length - 1;
		}
		remQuo = result.divMod(thx_bigint_Bigs.bigPowersOfTwo[n]);
		if(remQuo.remainder.sign) {
			return remQuo.quotient.prev();
		} else {
			return remQuo.quotient;
		}
	}
	,square: function() {
		if(thx_bigint_Bigs.isPrecise(this.value * this.value)) {
			return new thx_bigint_Small(this.value * this.value);
		}
		var v = this.value;
		return new thx_bigint_Big(thx_bigint_Bigs.square(thx_bigint_Bigs.smallToArray(v < 0?-v:v)),false);
	}
	,isEven: function() {
		return (this.value & 1) == 0;
	}
	,isOdd: function() {
		return (this.value & 1) == 1;
	}
	,isZero: function() {
		return this.value == 0;
	}
	,isUnit: function() {
		var v = this.value;
		return (v < 0?-v:v) == 1;
	}
	,compareTo: function(that) {
		if(this.sign != that.sign) {
			if(this.sign) {
				return -1;
			} else {
				return 1;
			}
		}
		if(that.isSmall) {
			return this.compareToSmall(that);
		} else {
			return this.compareToBig(that);
		}
	}
	,compareToSmall: function(small) {
		return this.value - small.value;
	}
	,compareToBig: function(big) {
		var v = this.value;
		return thx_bigint_Bigs.compareToAbs(thx_bigint_Bigs.smallToArray(v < 0?-v:v),big.value) * (this.sign?-1:1);
	}
	,compareToAbs: function(that) {
		if(that.isSmall) {
			return this.compareToAbsSmall(that);
		} else {
			return this.compareToAbsBig(that);
		}
	}
	,compareToAbsSmall: function(small) {
		var v = this.value;
		var a = v < 0?-v:v;
		var v1 = small.value;
		return a - (v1 < 0?-v1:v1);
	}
	,compareToAbsBig: function(big) {
		var v = this.value;
		return thx_bigint_Bigs.compareToAbs(thx_bigint_Bigs.smallToArray(v < 0?-v:v),big.value);
	}
	,not: function() {
		return this.negate().prev();
	}
	,and: function(that) {
		return thx_bigint_Bigs.bitwise(this,that,function(a,b) {
			return a & b;
		});
	}
	,or: function(that) {
		return thx_bigint_Bigs.bitwise(this,that,function(a,b) {
			return a | b;
		});
	}
	,xor: function(that) {
		return thx_bigint_Bigs.bitwise(this,that,function(a,b) {
			return a ^ b;
		});
	}
	,toFloat: function() {
		return this.value;
	}
	,toInt: function() {
		return this.value;
	}
	,toString: function() {
		return "" + this.value;
	}
	,toStringWithBase: function(base) {
		return this.value.toString(base);
	}
	,__class__: thx_bigint_Small
};
var thx__$BigInt_BigInt_$Impl_$ = {};
thx__$BigInt_BigInt_$Impl_$.__name__ = ["thx","_BigInt","BigInt_Impl_"];
thx__$BigInt_BigInt_$Impl_$.fromInt = function(value) {
	return thx_bigint_Bigs.fromInt(value);
};
thx__$BigInt_BigInt_$Impl_$.fromFloat = function(value) {
	return thx_bigint_Bigs.fromFloat(value);
};
thx__$BigInt_BigInt_$Impl_$.fromInt64 = function(value) {
	return thx_bigint_Bigs.fromInt64(value);
};
thx__$BigInt_BigInt_$Impl_$.fromString = function(value) {
	return thx_bigint_Bigs.parseBase(value,10);
};
thx__$BigInt_BigInt_$Impl_$.fromStringWithBase = function(value,base) {
	return thx_bigint_Bigs.parseBase(value,base);
};
thx__$BigInt_BigInt_$Impl_$.randomBetween = function(a,b) {
	var low = thx__$BigInt_BigInt_$Impl_$.less(a,b)?a:b;
	var range = (thx__$BigInt_BigInt_$Impl_$.greater(a,b)?a:b).subtract(low);
	return low.add(range.random());
};
thx__$BigInt_BigInt_$Impl_$.compare = function(a,b) {
	return a.compareTo(b);
};
thx__$BigInt_BigInt_$Impl_$.isZero = function(this1) {
	return this1.isZero();
};
thx__$BigInt_BigInt_$Impl_$.abs = function(this1) {
	return this1.abs();
};
thx__$BigInt_BigInt_$Impl_$.compareTo = function(this1,that) {
	return this1.compareTo(that);
};
thx__$BigInt_BigInt_$Impl_$.compareToAbs = function(this1,that) {
	return this1.compareToAbs(that);
};
thx__$BigInt_BigInt_$Impl_$.next = function(this1) {
	return this1.next();
};
thx__$BigInt_BigInt_$Impl_$.prev = function(this1) {
	return this1.prev();
};
thx__$BigInt_BigInt_$Impl_$.square = function(this1) {
	return this1.square();
};
thx__$BigInt_BigInt_$Impl_$.pow = function(this1,exp) {
	return this1.pow(exp);
};
thx__$BigInt_BigInt_$Impl_$.isEven = function(this1) {
	return this1.isEven();
};
thx__$BigInt_BigInt_$Impl_$.isOdd = function(this1) {
	return this1.isOdd();
};
thx__$BigInt_BigInt_$Impl_$.isNegative = function(this1) {
	return this1.sign;
};
thx__$BigInt_BigInt_$Impl_$.isPositive = function(this1) {
	return this1.compareTo(thx__$BigInt_BigInt_$Impl_$.zero) > 0;
};
thx__$BigInt_BigInt_$Impl_$.isUnit = function(this1) {
	return this1.isUnit();
};
thx__$BigInt_BigInt_$Impl_$.isDivisibleBy = function(this1,that) {
	if(that.isZero()) {
		return false;
	}
	if(that.isUnit()) {
		return true;
	}
	if(thx__$BigInt_BigInt_$Impl_$.equals(that,thx__$BigInt_BigInt_$Impl_$.two)) {
		return this1.isEven();
	}
	return this1.modulo(that).isZero();
};
thx__$BigInt_BigInt_$Impl_$.isPrime = function(this1) {
	var n = this1.abs();
	var nPrev = n.prev();
	if(n.isUnit()) {
		return false;
	}
	if(thx__$BigInt_BigInt_$Impl_$.equals(n,thx_bigint_Bigs.fromInt(2)) || thx__$BigInt_BigInt_$Impl_$.equals(n,thx_bigint_Bigs.fromInt(3)) || thx__$BigInt_BigInt_$Impl_$.equals(n,thx_bigint_Bigs.fromInt(5))) {
		return true;
	}
	if(n.isEven() || thx__$BigInt_BigInt_$Impl_$.isDivisibleBy(n,thx_bigint_Bigs.fromInt(3)) || thx__$BigInt_BigInt_$Impl_$.isDivisibleBy(n,thx_bigint_Bigs.fromInt(5))) {
		return false;
	}
	if(thx__$BigInt_BigInt_$Impl_$.less(n,thx_bigint_Bigs.fromInt(25))) {
		return true;
	}
	var a = [2,3,5,7,11,13,17,19];
	var b = nPrev;
	var d;
	var t;
	var x;
	while(b.isEven()) b = b.divide(thx_bigint_Bigs.fromInt(2));
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		x = thx__$BigInt_BigInt_$Impl_$.modPow(thx_bigint_Bigs.fromInt(a[_g1++]),b,n);
		if(thx__$BigInt_BigInt_$Impl_$.equals(x,thx__$BigInt_BigInt_$Impl_$.one) || thx__$BigInt_BigInt_$Impl_$.equals(x,nPrev)) {
			continue;
		}
		t = true;
		d = b;
		while(t && thx__$BigInt_BigInt_$Impl_$.less(d,nPrev)) {
			x = x.square().modulo(n);
			if(thx__$BigInt_BigInt_$Impl_$.equals(x,nPrev)) {
				t = false;
			}
			d = d.multiply(thx_bigint_Bigs.fromInt(2));
		}
		if(t) {
			return false;
		}
	}
	return false;
};
thx__$BigInt_BigInt_$Impl_$.modPow = function(this1,exp,mod) {
	if(mod.isZero()) {
		throw new thx_Error("Cannot take modPow with modulus 0",null,{ fileName : "BigInt.hx", lineNumber : 126, className : "thx._BigInt.BigInt_Impl_", methodName : "modPow"});
	}
	var r = thx_bigint_Small.one;
	var base = this1.modulo(mod);
	if(base.isZero()) {
		return thx_bigint_Small.zero;
	}
	while(exp.compareTo(thx__$BigInt_BigInt_$Impl_$.zero) > 0) {
		if(exp.isOdd()) {
			r = r.multiply(base).modulo(mod);
		}
		exp = exp.divide(thx_bigint_Small.two);
		base = base.square().modulo(mod);
	}
	return r;
};
thx__$BigInt_BigInt_$Impl_$.euclideanModPow = function(this1,exp,mod) {
	var x = thx__$BigInt_BigInt_$Impl_$.modPow(this1,exp,mod);
	if(x.sign) {
		return x.add(mod);
	} else {
		return x;
	}
};
thx__$BigInt_BigInt_$Impl_$.max = function(this1,that) {
	if(thx__$BigInt_BigInt_$Impl_$.greater(this1,that)) {
		return this1;
	} else {
		return that;
	}
};
thx__$BigInt_BigInt_$Impl_$.min = function(this1,that) {
	if(thx__$BigInt_BigInt_$Impl_$.less(this1,that)) {
		return this1;
	} else {
		return that;
	}
};
thx__$BigInt_BigInt_$Impl_$.gcd = function(this1,that) {
	var a = this1.abs();
	var b = that.abs();
	if(thx__$BigInt_BigInt_$Impl_$.equals(a,b) || a.isZero()) {
		return b;
	}
	if(b.isZero()) {
		return a;
	}
	if(a.isEven()) {
		if(b.isOdd()) {
			return thx__$BigInt_BigInt_$Impl_$.gcd(a.divide(thx_bigint_Small.two),b);
		}
		return thx__$BigInt_BigInt_$Impl_$.gcd(a.divide(thx_bigint_Small.two),b.divide(thx_bigint_Small.two)).multiply(thx_bigint_Small.two);
	}
	if(b.isEven()) {
		return thx__$BigInt_BigInt_$Impl_$.gcd(a,b.divide(thx_bigint_Small.two));
	}
	if(thx__$BigInt_BigInt_$Impl_$.greater(a,b)) {
		return thx__$BigInt_BigInt_$Impl_$.gcd(a.subtract(b).divide(thx_bigint_Small.two),b);
	}
	return thx__$BigInt_BigInt_$Impl_$.gcd(b.subtract(a).divide(thx_bigint_Small.two),a);
};
thx__$BigInt_BigInt_$Impl_$.lcm = function(this1,that) {
	var a = this1.abs();
	var b = that.abs();
	return a.multiply(b).divide(thx__$BigInt_BigInt_$Impl_$.gcd(a,b));
};
thx__$BigInt_BigInt_$Impl_$.greaterThan = function(this1,that) {
	return this1.compareTo(that) > 0;
};
thx__$BigInt_BigInt_$Impl_$.greater = function(self,that) {
	return self.compareTo(that) > 0;
};
thx__$BigInt_BigInt_$Impl_$.greaterEqualsTo = function(this1,that) {
	return this1.compareTo(that) >= 0;
};
thx__$BigInt_BigInt_$Impl_$.greaterEquals = function(self,that) {
	return self.compareTo(that) >= 0;
};
thx__$BigInt_BigInt_$Impl_$.lessThan = function(this1,that) {
	return this1.compareTo(that) < 0;
};
thx__$BigInt_BigInt_$Impl_$.less = function(self,that) {
	return self.compareTo(that) < 0;
};
thx__$BigInt_BigInt_$Impl_$.lessEqualsTo = function(this1,that) {
	return this1.compareTo(that) <= 0;
};
thx__$BigInt_BigInt_$Impl_$.lessEquals = function(self,that) {
	return self.compareTo(that) <= 0;
};
thx__$BigInt_BigInt_$Impl_$.equalsTo = function(this1,that) {
	return this1.compareTo(that) == 0;
};
thx__$BigInt_BigInt_$Impl_$.equals = function(self,that) {
	return self.compareTo(that) == 0;
};
thx__$BigInt_BigInt_$Impl_$.notEqualsTo = function(this1,that) {
	return this1.compareTo(that) != 0;
};
thx__$BigInt_BigInt_$Impl_$.notEquals = function(self,that) {
	return self.compareTo(that) != 0;
};
thx__$BigInt_BigInt_$Impl_$.add = function(this1,that) {
	return this1.add(that);
};
thx__$BigInt_BigInt_$Impl_$.subtract = function(this1,that) {
	return this1.subtract(that);
};
thx__$BigInt_BigInt_$Impl_$.preIncrement = function(this1) {
	this1 = this1.add(thx_bigint_Small.one);
	return this1;
};
thx__$BigInt_BigInt_$Impl_$.postIncrement = function(this1) {
	var v = this1;
	this1 = this1.add(thx_bigint_Small.one);
	return v;
};
thx__$BigInt_BigInt_$Impl_$.preDecrement = function(this1) {
	this1 = this1.subtract(thx_bigint_Small.one);
	return this1;
};
thx__$BigInt_BigInt_$Impl_$.postDecrement = function(this1) {
	var v = this1;
	this1 = this1.subtract(thx_bigint_Small.one);
	return v;
};
thx__$BigInt_BigInt_$Impl_$.negate = function(this1) {
	return this1.negate();
};
thx__$BigInt_BigInt_$Impl_$.multiply = function(this1,that) {
	return this1.multiply(that);
};
thx__$BigInt_BigInt_$Impl_$.divide = function(this1,that) {
	return this1.divide(that);
};
thx__$BigInt_BigInt_$Impl_$.modulo = function(this1,that) {
	return this1.modulo(that);
};
thx__$BigInt_BigInt_$Impl_$.shiftLeft = function(this1,that) {
	return this1.shiftLeft(that);
};
thx__$BigInt_BigInt_$Impl_$.shiftRight = function(this1,that) {
	return this1.shiftRight(that);
};
thx__$BigInt_BigInt_$Impl_$.not = function(this1) {
	return this1.not();
};
thx__$BigInt_BigInt_$Impl_$.and = function(this1,that) {
	return this1.and(that);
};
thx__$BigInt_BigInt_$Impl_$.or = function(this1,that) {
	return this1.or(that);
};
thx__$BigInt_BigInt_$Impl_$.xor = function(this1,that) {
	return this1.xor(that);
};
thx__$BigInt_BigInt_$Impl_$.divMod = function(this1,that) {
	return this1.divMod(that);
};
thx__$BigInt_BigInt_$Impl_$.toInt = function(this1) {
	return this1.toInt();
};
thx__$BigInt_BigInt_$Impl_$.toFloat = function(this1) {
	return this1.toFloat();
};
thx__$BigInt_BigInt_$Impl_$.toInt64 = function(this1) {
	return thx_bigint_Bigs.toInt64(this1);
};
thx__$BigInt_BigInt_$Impl_$.toString = function(this1) {
	return this1.toString();
};
thx__$BigInt_BigInt_$Impl_$.toStringWithBase = function(this1,base) {
	return this1.toStringWithBase(base);
};
var thx__$BitMatrix_BitMatrix_$Impl_$ = {};
thx__$BitMatrix_BitMatrix_$Impl_$.__name__ = ["thx","_BitMatrix","BitMatrix_Impl_"];
thx__$BitMatrix_BitMatrix_$Impl_$._new = function(bitSetCount,length) {
	if(length == null) {
		length = 0;
	}
	if(bitSetCount == null) {
		bitSetCount = 0;
	}
	return thx__$BitMatrix_BitMatrix_$Impl_$.empty(bitSetCount,length);
};
thx__$BitMatrix_BitMatrix_$Impl_$.empty = function(bitSetCount,length) {
	if(length == null) {
		length = 0;
	}
	if(bitSetCount == null) {
		bitSetCount = 0;
	}
	var bitMatrix = [];
	var _g1 = 0;
	while(_g1 < bitSetCount) thx__$BitMatrix_BitMatrix_$Impl_$.setBitSetAt(bitMatrix,_g1++,[length]);
	return bitMatrix;
};
thx__$BitMatrix_BitMatrix_$Impl_$.fromBitSets = function(bitSets) {
	var bitMatrix = thx__$BitMatrix_BitMatrix_$Impl_$._new();
	var _g1 = 0;
	var _g = bitSets.length;
	while(_g1 < _g) {
		var bitSetIndex = _g1++;
		thx__$BitMatrix_BitMatrix_$Impl_$.setBitSetAt(bitMatrix,bitSetIndex,bitSets[bitSetIndex]);
	}
	return bitMatrix;
};
thx__$BitMatrix_BitMatrix_$Impl_$.fromBools = function(input) {
	return thx__$BitMatrix_BitMatrix_$Impl_$.fromBitSets(input.map(function(_) {
		return thx_Arrays.reducei(_,function(acc,value,i) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc,i,value);
			return acc;
		},[0]);
	}));
};
thx__$BitMatrix_BitMatrix_$Impl_$.fromString = function(input,delimiter) {
	if(delimiter == null) {
		delimiter = ",";
	}
	return thx__$BitMatrix_BitMatrix_$Impl_$.fromBitSets(input.split(delimiter).map(thx__$BitSet_BitSet_$Impl_$.fromString));
};
thx__$BitMatrix_BitMatrix_$Impl_$.toBools = function(this1) {
	return this1.map(function(bitSet) {
		var this2 = bitSet;
		return thx_Ints.range(thx__$BitSet_BitSet_$Impl_$.get_length(this2)).map(function(index) {
			return thx__$BitSet_BitSet_$Impl_$.at(this2,index);
		});
	});
};
thx__$BitMatrix_BitMatrix_$Impl_$.bitAt = function(this1,bitSetIndex,bitIndex) {
	return thx__$BitSet_BitSet_$Impl_$.at(thx__$BitMatrix_BitMatrix_$Impl_$.bitSetAt(this1,bitSetIndex),bitIndex);
};
thx__$BitMatrix_BitMatrix_$Impl_$.setBitAt = function(this1,bitSetIndex,bitIndex,value) {
	if(bitIndex >= thx__$BitMatrix_BitMatrix_$Impl_$.get_length(this1)) {
		var _g = 0;
		while(_g < this1.length) {
			var bitSet = this1[_g];
			++_g;
			thx__$BitSet_BitSet_$Impl_$.setAt(bitSet,bitIndex,false);
		}
	}
	return thx__$BitSet_BitSet_$Impl_$.setAt(thx__$BitMatrix_BitMatrix_$Impl_$.bitSetAt(this1,bitSetIndex),bitIndex,value);
};
thx__$BitMatrix_BitMatrix_$Impl_$.clone = function(this1) {
	var tmp = thx_Ints.range(thx__$BitMatrix_BitMatrix_$Impl_$.get_bitSetCount(this1));
	var tmp1 = thx__$BitMatrix_BitMatrix_$Impl_$._new();
	return thx_Arrays.reduce(tmp,function(acc,i) {
		var this2 = thx__$BitMatrix_BitMatrix_$Impl_$.bitSetAt(this1,i);
		thx__$BitMatrix_BitMatrix_$Impl_$.setBitSetAt(acc,i,thx_Arrays.reduce(thx_Ints.range(thx__$BitSet_BitSet_$Impl_$.get_length(this2)),function(acc1,i1) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc1,i1,thx__$BitSet_BitSet_$Impl_$.at(this2,i1));
			return acc1;
		},[0]));
		return acc;
	},tmp1);
};
thx__$BitMatrix_BitMatrix_$Impl_$.concat = function(this1,right) {
	var left = this1;
	if(thx__$BitMatrix_BitMatrix_$Impl_$.get_bitSetCount(left) != thx__$BitMatrix_BitMatrix_$Impl_$.get_bitSetCount(right)) {
		throw new thx_Error("cannot concat bit matrices with different bit set counts",null,{ fileName : "BitMatrix.hx", lineNumber : 77, className : "thx._BitMatrix.BitMatrix_Impl_", methodName : "concat"});
	}
	return thx__$BitMatrix_BitMatrix_$Impl_$.fromBitSets(thx_Arrays.reduce(thx_Ints.range(thx__$BitMatrix_BitMatrix_$Impl_$.get_bitSetCount(left)),function(bitSets,bitSetIndex) {
		var this2 = thx__$BitMatrix_BitMatrix_$Impl_$.bitSetAt(left,bitSetIndex);
		var right1 = thx__$BitMatrix_BitMatrix_$Impl_$.bitSetAt(right,bitSetIndex);
		var left1 = this2;
		var result = [thx__$BitSet_BitSet_$Impl_$.get_length(left1) + thx__$BitSet_BitSet_$Impl_$.get_length(right1) | 0];
		var index = 0;
		var _g1 = 0;
		var _g = thx__$BitSet_BitSet_$Impl_$.get_length(left1);
		while(_g1 < _g) thx__$BitSet_BitSet_$Impl_$.setAt(result,index++,thx__$BitSet_BitSet_$Impl_$.at(left1,_g1++));
		var _g11 = 0;
		var _g2 = thx__$BitSet_BitSet_$Impl_$.get_length(right1);
		while(_g11 < _g2) thx__$BitSet_BitSet_$Impl_$.setAt(result,index++,thx__$BitSet_BitSet_$Impl_$.at(right1,_g11++));
		bitSets[bitSetIndex] = result;
		return bitSets;
	},[]));
};
thx__$BitMatrix_BitMatrix_$Impl_$.expand = function(this1,count) {
	return thx__$BitMatrix_BitMatrix_$Impl_$.fromBitSets(this1.map(function(bitSet) {
		return thx__$BitSet_BitSet_$Impl_$.expand(bitSet,count);
	}));
};
thx__$BitMatrix_BitMatrix_$Impl_$.toString = function(this1,delimiter) {
	if(delimiter == null) {
		delimiter = ",";
	}
	return this1.map(function(_) {
		return thx__$BitSet_BitSet_$Impl_$.toString(_);
	}).join(delimiter);
};
thx__$BitMatrix_BitMatrix_$Impl_$.and = function(this1,right) {
	return thx__$BitMatrix_BitMatrix_$Impl_$.combine(this1,right,function(l,r) {
		if(l) {
			return r;
		} else {
			return false;
		}
	});
};
thx__$BitMatrix_BitMatrix_$Impl_$.or = function(this1,right) {
	return thx__$BitMatrix_BitMatrix_$Impl_$.combine(this1,right,function(l,r) {
		if(!l) {
			return r;
		} else {
			return true;
		}
	});
};
thx__$BitMatrix_BitMatrix_$Impl_$.xor = function(this1,right) {
	return thx__$BitMatrix_BitMatrix_$Impl_$.combine(this1,right,function(l,r) {
		if(!(l && !r)) {
			if(!l) {
				return r;
			} else {
				return false;
			}
		} else {
			return true;
		}
	});
};
thx__$BitMatrix_BitMatrix_$Impl_$.negate = function(this1) {
	var bits = this1;
	var tmp = thx_Ints.range(thx__$BitMatrix_BitMatrix_$Impl_$.get_bitSetCount(this1));
	var tmp1 = thx__$BitMatrix_BitMatrix_$Impl_$._new(thx__$BitMatrix_BitMatrix_$Impl_$.get_bitSetCount(this1),thx__$BitMatrix_BitMatrix_$Impl_$.get_length(this1));
	return thx_Arrays.reduce(tmp,function(acc,bitSetIndex) {
		return thx_Arrays.reduce(thx_Ints.range(thx__$BitMatrix_BitMatrix_$Impl_$.get_length(this1)),function(acc1,bitIndex) {
			thx__$BitMatrix_BitMatrix_$Impl_$.setBitAt(acc1,bitSetIndex,bitIndex,!thx__$BitMatrix_BitMatrix_$Impl_$.bitAt(bits,bitSetIndex,bitIndex));
			return acc1;
		},acc);
	},tmp1);
};
thx__$BitMatrix_BitMatrix_$Impl_$.equals = function(this1,right) {
	var left = this1;
	if(thx__$BitMatrix_BitMatrix_$Impl_$.get_bitSetCount(left) != thx__$BitMatrix_BitMatrix_$Impl_$.get_bitSetCount(right)) {
		return false;
	}
	if(thx__$BitMatrix_BitMatrix_$Impl_$.get_length(left) != thx__$BitMatrix_BitMatrix_$Impl_$.get_length(right)) {
		return false;
	}
	var _g1 = 0;
	var _g = thx__$BitMatrix_BitMatrix_$Impl_$.get_bitSetCount(this1);
	while(_g1 < _g) {
		var i = _g1++;
		if(!thx__$BitSet_BitSet_$Impl_$.equals(thx__$BitMatrix_BitMatrix_$Impl_$.bitSetAt(left,i),thx__$BitMatrix_BitMatrix_$Impl_$.bitSetAt(right,i))) {
			return false;
		}
	}
	return true;
};
thx__$BitMatrix_BitMatrix_$Impl_$.notEquals = function(this1,right) {
	var left = this1;
	return !thx__$BitMatrix_BitMatrix_$Impl_$.equals(left,right);
};
thx__$BitMatrix_BitMatrix_$Impl_$.get_bitSetCount = function(this1) {
	return this1.length;
};
thx__$BitMatrix_BitMatrix_$Impl_$.get_length = function(this1) {
	if(thx__$BitMatrix_BitMatrix_$Impl_$.get_bitSetCount(this1) == 0) {
		return 0;
	}
	return thx__$BitSet_BitSet_$Impl_$.get_length(this1[0]);
};
thx__$BitMatrix_BitMatrix_$Impl_$.bitSetAt = function(this1,index) {
	if(index < 0 || index >= thx__$BitMatrix_BitMatrix_$Impl_$.get_bitSetCount(this1)) {
		throw new thx_Error("BitMatrix: index " + index + " is out of bounds",null,{ fileName : "BitMatrix.hx", lineNumber : 166, className : "thx._BitMatrix.BitMatrix_Impl_", methodName : "bitSetAt"});
	}
	return this1[index];
};
thx__$BitMatrix_BitMatrix_$Impl_$.setBitSetAt = function(this1,index,bitSet) {
	if(thx__$BitMatrix_BitMatrix_$Impl_$.get_bitSetCount(this1) > 0 && thx__$BitMatrix_BitMatrix_$Impl_$.get_length(this1) != thx__$BitSet_BitSet_$Impl_$.get_length(bitSet)) {
		throw new thx_Error("BitMatrix: added BitSet must have same length as BitMatrix length " + thx__$BitMatrix_BitMatrix_$Impl_$.get_length(this1),null,{ fileName : "BitMatrix.hx", lineNumber : 173, className : "thx._BitMatrix.BitMatrix_Impl_", methodName : "setBitSetAt"});
	}
	return this1[index] = bitSet;
};
thx__$BitMatrix_BitMatrix_$Impl_$.combine = function(this1,right,combiner) {
	var left = this1;
	if(thx__$BitMatrix_BitMatrix_$Impl_$.get_bitSetCount(left) != thx__$BitMatrix_BitMatrix_$Impl_$.get_bitSetCount(right)) {
		throw new thx_Error("cannot \"and\" BitMatrices of different BitSet counts",null,{ fileName : "BitMatrix.hx", lineNumber : 180, className : "thx._BitMatrix.BitMatrix_Impl_", methodName : "combine"});
	}
	if(thx__$BitMatrix_BitMatrix_$Impl_$.get_length(left) != thx__$BitMatrix_BitMatrix_$Impl_$.get_length(right)) {
		throw new thx_Error("cannot \"and\" BitMatrices of different lengths",null,{ fileName : "BitMatrix.hx", lineNumber : 181, className : "thx._BitMatrix.BitMatrix_Impl_", methodName : "combine"});
	}
	var tmp = thx_Ints.range(thx__$BitMatrix_BitMatrix_$Impl_$.get_bitSetCount(this1));
	var tmp1 = thx__$BitMatrix_BitMatrix_$Impl_$._new(thx__$BitMatrix_BitMatrix_$Impl_$.get_bitSetCount(left),thx__$BitMatrix_BitMatrix_$Impl_$.get_length(left));
	return thx_Arrays.reduce(tmp,function(acc,bitSetIndex) {
		return thx_Arrays.reduce(thx_Ints.range(thx__$BitMatrix_BitMatrix_$Impl_$.get_length(this1)),function(acc1,bitIndex) {
			thx__$BitMatrix_BitMatrix_$Impl_$.setBitAt(acc1,bitSetIndex,bitIndex,combiner(thx__$BitMatrix_BitMatrix_$Impl_$.bitAt(left,bitSetIndex,bitIndex),thx__$BitMatrix_BitMatrix_$Impl_$.bitAt(right,bitSetIndex,bitIndex)));
			return acc1;
		},acc);
	},tmp1);
};
var thx__$BitSet_BitSet_$Impl_$ = {};
thx__$BitSet_BitSet_$Impl_$.__name__ = ["thx","_BitSet","BitSet_Impl_"];
thx__$BitSet_BitSet_$Impl_$._new = function(length) {
	return [length];
};
thx__$BitSet_BitSet_$Impl_$.empty = function(length) {
	if(length == null) {
		length = 0;
	}
	return [length];
};
thx__$BitSet_BitSet_$Impl_$.fromBools = function(values) {
	return thx_Arrays.reducei(values,function(acc,value,i) {
		thx__$BitSet_BitSet_$Impl_$.setAt(acc,i,value);
		return acc;
	},[0]);
};
thx__$BitSet_BitSet_$Impl_$.fromString = function(str) {
	return thx_Arrays.reducei(str.split(""),function(acc,$char,i) {
		thx__$BitSet_BitSet_$Impl_$.setAt(acc,i,$char == "1");
		return acc;
	},[0]);
};
thx__$BitSet_BitSet_$Impl_$.toBools = function(this1) {
	return thx_Ints.range(thx__$BitSet_BitSet_$Impl_$.get_length(this1)).map(function(index) {
		return thx__$BitSet_BitSet_$Impl_$.at(this1,index);
	});
};
thx__$BitSet_BitSet_$Impl_$.toInt32s = function(this1) {
	return this1.slice(1);
};
thx__$BitSet_BitSet_$Impl_$.at = function(this1,index) {
	if(index < 0 || index >= thx__$BitSet_BitSet_$Impl_$.get_length(this1)) {
		throw new thx_Error("BitSet: index " + index + " out of bounds",null,{ fileName : "BitSet.hx", lineNumber : 88, className : "thx._BitSet.BitSet_Impl_", methodName : "at"});
	}
	return (this1[Math.floor(index / 32) + 1] & 1 << index % 32) != 0;
};
thx__$BitSet_BitSet_$Impl_$.setAt = function(this1,index,value) {
	var blockIndex = Math.floor(index / 32) + 1;
	if(blockIndex >= this1.length) {
		thx_Arrays.resize(this1,blockIndex + 1,0);
	}
	if(this1[0] <= index) {
		this1[0] = index + 1;
	}
	var bitIndex = index % 32;
	if(value) {
		this1[blockIndex] = this1[blockIndex] | 1 << bitIndex;
	} else {
		this1[blockIndex] = this1[blockIndex] & ~(1 << bitIndex);
	}
	return value;
};
thx__$BitSet_BitSet_$Impl_$.clone = function(this1) {
	return thx_Arrays.reduce(thx_Ints.range(thx__$BitSet_BitSet_$Impl_$.get_length(this1)),function(acc,i) {
		thx__$BitSet_BitSet_$Impl_$.setAt(acc,i,thx__$BitSet_BitSet_$Impl_$.at(this1,i));
		return acc;
	},[0]);
};
thx__$BitSet_BitSet_$Impl_$.setAll = function(this1,value) {
	if(value == null) {
		value = true;
	}
	var _g1 = 0;
	var _g = thx__$BitSet_BitSet_$Impl_$.get_length(this1);
	while(_g1 < _g) thx__$BitSet_BitSet_$Impl_$.setAt(this1,_g1++,value);
	return this1;
};
thx__$BitSet_BitSet_$Impl_$.clearAll = function(this1) {
	var _g1 = 0;
	var _g = thx__$BitSet_BitSet_$Impl_$.get_length(this1);
	while(_g1 < _g) thx__$BitSet_BitSet_$Impl_$.setAt(this1,_g1++,false);
	return this1;
};
thx__$BitSet_BitSet_$Impl_$.concat = function(this1,right) {
	var left = this1;
	var result = [thx__$BitSet_BitSet_$Impl_$.get_length(left) + thx__$BitSet_BitSet_$Impl_$.get_length(right) | 0];
	var index = 0;
	var _g1 = 0;
	var _g = thx__$BitSet_BitSet_$Impl_$.get_length(left);
	while(_g1 < _g) thx__$BitSet_BitSet_$Impl_$.setAt(result,index++,thx__$BitSet_BitSet_$Impl_$.at(left,_g1++));
	var _g11 = 0;
	var _g2 = thx__$BitSet_BitSet_$Impl_$.get_length(right);
	while(_g11 < _g2) thx__$BitSet_BitSet_$Impl_$.setAt(result,index++,thx__$BitSet_BitSet_$Impl_$.at(right,_g11++));
	return result;
};
thx__$BitSet_BitSet_$Impl_$.expand = function(this1,count) {
	var array = thx_Ints.range(thx__$BitSet_BitSet_$Impl_$.get_length(this1)).map(function(index) {
		return thx_Arrays.create(count + 1,thx__$BitSet_BitSet_$Impl_$.at(this1,index));
	});
	return thx_Arrays.reducei(Array.prototype.concat.apply([],array),function(acc,value,i) {
		thx__$BitSet_BitSet_$Impl_$.setAt(acc,i,value);
		return acc;
	},[0]);
};
thx__$BitSet_BitSet_$Impl_$.toString = function(this1) {
	return thx_Ints.range(thx__$BitSet_BitSet_$Impl_$.get_length(this1)).map(function(index) {
		if(thx__$BitSet_BitSet_$Impl_$.at(this1,index)) {
			return "1";
		} else {
			return "0";
		}
	}).join("");
};
thx__$BitSet_BitSet_$Impl_$.and = function(this1,right) {
	return thx__$BitSet_BitSet_$Impl_$.combine(this1,right,function(l,r) {
		if(l) {
			return r;
		} else {
			return false;
		}
	});
};
thx__$BitSet_BitSet_$Impl_$.or = function(this1,right) {
	return thx__$BitSet_BitSet_$Impl_$.combine(this1,right,function(l,r) {
		if(!l) {
			return r;
		} else {
			return true;
		}
	});
};
thx__$BitSet_BitSet_$Impl_$.xor = function(this1,right) {
	return thx__$BitSet_BitSet_$Impl_$.combine(this1,right,function(l,r) {
		if(!(l && !r)) {
			if(!l) {
				return r;
			} else {
				return false;
			}
		} else {
			return true;
		}
	});
};
thx__$BitSet_BitSet_$Impl_$.negate = function(this1) {
	return thx_Arrays.reduce(thx_Ints.range(thx__$BitSet_BitSet_$Impl_$.get_length(this1)),function(acc,i) {
		thx__$BitSet_BitSet_$Impl_$.setAt(acc,i,!thx__$BitSet_BitSet_$Impl_$.at(this1,i));
		return acc;
	},[0]);
};
thx__$BitSet_BitSet_$Impl_$.equals = function(this1,other) {
	if(thx__$BitSet_BitSet_$Impl_$.get_length(this1) != thx__$BitSet_BitSet_$Impl_$.get_length(other)) {
		return false;
	}
	var _g1 = 0;
	var _g = thx__$BitSet_BitSet_$Impl_$.get_length(this1);
	while(_g1 < _g) {
		var i = _g1++;
		if(thx__$BitSet_BitSet_$Impl_$.at(this1,i) != thx__$BitSet_BitSet_$Impl_$.at(other,i)) {
			return false;
		}
	}
	return true;
};
thx__$BitSet_BitSet_$Impl_$.notEquals = function(this1,other) {
	return !thx__$BitSet_BitSet_$Impl_$.equals(this1,other);
};
thx__$BitSet_BitSet_$Impl_$.combine = function(this1,right,combiner) {
	var left = this1;
	var a = thx__$BitSet_BitSet_$Impl_$.get_length(left);
	var b = thx__$BitSet_BitSet_$Impl_$.get_length(right);
	return thx_Arrays.reduce(thx_Ints.range(a > b?a:b),function(acc,i) {
		thx__$BitSet_BitSet_$Impl_$.setAt(acc,i,combiner(thx__$BitSet_BitSet_$Impl_$.at(left,i),thx__$BitSet_BitSet_$Impl_$.at(right,i)));
		return acc;
	},[0]);
};
thx__$BitSet_BitSet_$Impl_$.get_length = function(this1) {
	return this1[0];
};
var thx_Bools = function() { };
thx_Bools.__name__ = ["thx","Bools"];
thx_Bools.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a) {
		return -1;
	} else {
		return 1;
	}
};
thx_Bools.toInt = function(v) {
	if(v) {
		return 1;
	} else {
		return 0;
	}
};
thx_Bools.canParse = function(v) {
	var _g = v.toLowerCase();
	if(_g == null) {
		return true;
	} else {
		switch(_g) {
		case "0":case "1":case "false":case "off":case "on":case "true":
			return true;
		default:
			return false;
		}
	}
};
thx_Bools.parse = function(v) {
	var _g = v.toLowerCase();
	if(_g == null) {
		return false;
	} else {
		switch(_g) {
		case "1":case "on":case "true":
			return true;
		case "0":case "false":case "off":
			return false;
		default:
			throw new js__$Boot_HaxeError("unable to parse \"" + _g + "\"");
		}
	}
};
thx_Bools.xor = function(a,b) {
	return a != b;
};
thx_Bools.option = function(cond,a) {
	if(cond) {
		return haxe_ds_Option.Some(a);
	} else {
		return haxe_ds_Option.None;
	}
};
var thx__$Char_Char_$Impl_$ = {};
thx__$Char_Char_$Impl_$.__name__ = ["thx","_Char","Char_Impl_"];
thx__$Char_Char_$Impl_$.at = function(s,index) {
	var i = HxOverrides.cca(s,index);
	thx_Assert.isTrue(i >= 0,"Char value should be greater than zero: " + i,{ fileName : "Char.hx", lineNumber : 19, className : "thx._Char.Char_Impl_", methodName : "fromInt"});
	return i;
};
thx__$Char_Char_$Impl_$.fromInt = function(i) {
	thx_Assert.isTrue(i >= 0,"Char value should be greater than zero: " + i,{ fileName : "Char.hx", lineNumber : 19, className : "thx._Char.Char_Impl_", methodName : "fromInt"});
	return i;
};
thx__$Char_Char_$Impl_$.fromString = function(s) {
	var i = HxOverrides.cca(s,0);
	thx_Assert.isTrue(i >= 0,"Char value should be greater than zero: " + i,{ fileName : "Char.hx", lineNumber : 19, className : "thx._Char.Char_Impl_", methodName : "fromInt"});
	return i;
};
thx__$Char_Char_$Impl_$.compare = function(a,b) {
	return haxe_Utf8.compare(String.fromCharCode(a),String.fromCharCode(b));
};
thx__$Char_Char_$Impl_$._new = function(i) {
	return i;
};
thx__$Char_Char_$Impl_$.compareTo = function(this1,other) {
	return haxe_Utf8.compare(String.fromCharCode(this1),String.fromCharCode(other));
};
thx__$Char_Char_$Impl_$.isBreakingWhitespace = function(this1) {
	if(!(this1 == 32 || this1 == 9 || this1 == 10)) {
		return this1 == 13;
	} else {
		return true;
	}
};
thx__$Char_Char_$Impl_$.isControl = function(this1) {
	if(!(this1 >= 0 && this1 <= 31 || this1 == 127)) {
		if(this1 >= 128) {
			return this1 <= 159;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
thx__$Char_Char_$Impl_$.isUnicode = function(this1) {
	return this1 <= 65533;
};
thx__$Char_Char_$Impl_$.next = function(this1) {
	var i = this1 + 1;
	thx_Assert.isTrue(i >= 0,"Char value should be greater than zero: " + i,{ fileName : "Char.hx", lineNumber : 19, className : "thx._Char.Char_Impl_", methodName : "fromInt"});
	return i;
};
thx__$Char_Char_$Impl_$.prev = function(this1) {
	var i = this1 - 1;
	thx_Assert.isTrue(i >= 0,"Char value should be greater than zero: " + i,{ fileName : "Char.hx", lineNumber : 19, className : "thx._Char.Char_Impl_", methodName : "fromInt"});
	return i;
};
thx__$Char_Char_$Impl_$.toUpperCase = function(this1) {
	var i = HxOverrides.cca(String.fromCharCode(this1).toUpperCase(),0);
	thx_Assert.isTrue(i >= 0,"Char value should be greater than zero: " + i,{ fileName : "Char.hx", lineNumber : 19, className : "thx._Char.Char_Impl_", methodName : "fromInt"});
	return i;
};
thx__$Char_Char_$Impl_$.toLowerCase = function(this1) {
	var i = HxOverrides.cca(String.fromCharCode(this1).toLowerCase(),0);
	thx_Assert.isTrue(i >= 0,"Char value should be greater than zero: " + i,{ fileName : "Char.hx", lineNumber : 19, className : "thx._Char.Char_Impl_", methodName : "fromInt"});
	return i;
};
thx__$Char_Char_$Impl_$.equalsTo = function(this1,other) {
	return haxe_Utf8.compare(String.fromCharCode(this1),String.fromCharCode(other)) == 0;
};
thx__$Char_Char_$Impl_$.equals = function(self,other) {
	return haxe_Utf8.compare(String.fromCharCode(self),String.fromCharCode(other)) == 0;
};
thx__$Char_Char_$Impl_$.greaterThan = function(this1,other) {
	return haxe_Utf8.compare(String.fromCharCode(this1),String.fromCharCode(other)) > 0;
};
thx__$Char_Char_$Impl_$.greater = function(self,other) {
	return haxe_Utf8.compare(String.fromCharCode(self),String.fromCharCode(other)) > 0;
};
thx__$Char_Char_$Impl_$.greaterEqualsThan = function(this1,other) {
	return haxe_Utf8.compare(String.fromCharCode(this1),String.fromCharCode(other)) >= 0;
};
thx__$Char_Char_$Impl_$.greaterEquals = function(self,other) {
	return haxe_Utf8.compare(String.fromCharCode(self),String.fromCharCode(other)) >= 0;
};
thx__$Char_Char_$Impl_$.lessEqualsTo = function(this1,other) {
	return haxe_Utf8.compare(String.fromCharCode(this1),String.fromCharCode(other)) <= 0;
};
thx__$Char_Char_$Impl_$.lessEquals = function(self,other) {
	return haxe_Utf8.compare(String.fromCharCode(self),String.fromCharCode(other)) <= 0;
};
thx__$Char_Char_$Impl_$.lessThan = function(this1,other) {
	return haxe_Utf8.compare(String.fromCharCode(this1),String.fromCharCode(other)) < 0;
};
thx__$Char_Char_$Impl_$.less = function(self,other) {
	return haxe_Utf8.compare(String.fromCharCode(self),String.fromCharCode(other)) < 0;
};
thx__$Char_Char_$Impl_$.toInt = function(this1) {
	return this1;
};
thx__$Char_Char_$Impl_$.toString = function(this1) {
	return String.fromCharCode(this1);
};
thx__$Char_Char_$Impl_$.arrayToString = function(arr) {
	return arr.map(function(c) {
		return String.fromCharCode(c);
	}).join("");
};
var thx__$Chars_Chars_$Impl_$ = {};
thx__$Chars_Chars_$Impl_$.__name__ = ["thx","_Chars","Chars_Impl_"];
thx__$Chars_Chars_$Impl_$.fromString = function(s) {
	return thx_Strings.map(s,function(s1) {
		var i = HxOverrides.cca(s1,0);
		thx_Assert.isTrue(i >= 0,"Char value should be greater than zero: " + i,{ fileName : "Char.hx", lineNumber : 19, className : "thx._Char.Char_Impl_", methodName : "fromInt"});
		return i;
	});
};
thx__$Chars_Chars_$Impl_$.fromArray = function(arr) {
	return arr;
};
thx__$Chars_Chars_$Impl_$.fromChars = function(arr) {
	return arr;
};
thx__$Chars_Chars_$Impl_$._new = function(chars) {
	return chars;
};
thx__$Chars_Chars_$Impl_$.toString = function(this1) {
	return this1.map(function(c) {
		return String.fromCharCode(c);
	}).join("");
};
var thx_Conditions = function() { };
thx_Conditions.__name__ = ["thx","Conditions"];
var thx_Convert = function() { };
thx_Convert.__name__ = ["thx","Convert"];
thx_Convert.toString = function(value) {
	var _g = Type["typeof"](value);
	switch(_g[1]) {
	case 0:
		return null;
	case 1:case 2:case 3:
		return "" + Std.string(value);
	case 4:
		try {
			return JSON.stringify(value);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			throw new thx_Error("unable to convert object to String",null,{ fileName : "Convert.hx", lineNumber : 15, className : "thx.Convert", methodName : "toString"});
		}
		break;
	case 6:
		switch(Type.getClassName(_g[2])) {
		case "Date":
			return HxOverrides.dateStr(value);
		case "String":
			return value;
		default:
			if(js_Boot.__instanceof(value,haxe_IMap)) {
				try {
					return JSON.stringify(thx_Maps.toObject(value));
				} catch( e1 ) {
					haxe_CallStack.lastException = e1;
					throw new thx_Error("unable to convert object to String",null,{ fileName : "Convert.hx", lineNumber : 24, className : "thx.Convert", methodName : "toString"});
				}
			} else {
				throw new thx_Error("unable to convert " + Std.string(value) + " to String",null,{ fileName : "Convert.hx", lineNumber : 26, className : "thx.Convert", methodName : "toString"});
			}
		}
		break;
	default:
		throw new thx_Error("unable to convert " + Std.string(value) + " to String",null,{ fileName : "Convert.hx", lineNumber : 29, className : "thx.Convert", methodName : "toString"});
	}
};
thx_Convert.toStringOr = function(value,alt) {
	if(null == value) {
		return alt;
	} else {
		return thx_Convert.toString(value);
	}
};
thx_Convert.toInt = function(value) {
	if(null == value) {
		throw new thx_Error("unable to convert null to Int",null,{ fileName : "Convert.hx", lineNumber : 37, className : "thx.Convert", methodName : "toInt"});
	}
	switch(thx_Types.toString(Type["typeof"](value))) {
	case "Bool":
		if(value) {
			return 1;
		} else {
			return 0;
		}
		break;
	case "Float":
		return value | 0;
	case "Int":
		return value;
	case "String":
		if(thx_Ints.canParse(value)) {
			return thx_Ints.parse(value);
		} else {
			throw new thx_Error("unable to convert " + Std.string(value) + " to Int",null,{ fileName : "Convert.hx", lineNumber : 48, className : "thx.Convert", methodName : "toInt"});
		}
		break;
	default:
		throw new thx_Error("unable to convert " + Std.string(value) + " to Int",null,{ fileName : "Convert.hx", lineNumber : 48, className : "thx.Convert", methodName : "toInt"});
	}
};
thx_Convert.toIntOr = function(value,alt) {
	try {
		return thx_Convert.toInt(value);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,thx_Error) ) {
			return alt;
		} else throw(e);
	}
};
thx_Convert.toFloat = function(value) {
	if(null == value) {
		throw new thx_Error("unable to convert null to Float",null,{ fileName : "Convert.hx", lineNumber : 56, className : "thx.Convert", methodName : "toFloat"});
	}
	switch(thx_Types.toString(Type["typeof"](value))) {
	case "Bool":
		if(value) {
			return 1.0;
		} else {
			return 0.0;
		}
		break;
	case "Date":
		return value.getTime();
	case "Float":case "Int":
		return value;
	case "String":
		if(thx_Floats.canParse(value)) {
			return thx_Floats.parse(value);
		} else {
			throw new thx_Error("unable to convert " + Std.string(value) + " to Float",null,{ fileName : "Convert.hx", lineNumber : 67, className : "thx.Convert", methodName : "toFloat"});
		}
		break;
	default:
		throw new thx_Error("unable to convert " + Std.string(value) + " to Float",null,{ fileName : "Convert.hx", lineNumber : 67, className : "thx.Convert", methodName : "toFloat"});
	}
};
thx_Convert.toFloatOr = function(value,alt) {
	try {
		return thx_Convert.toFloat(value);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,thx_Error) ) {
			return alt;
		} else throw(e);
	}
};
thx_Convert.toBool = function(value) {
	if(null == value) {
		throw new thx_Error("unable to convert null to Bool",null,{ fileName : "Convert.hx", lineNumber : 75, className : "thx.Convert", methodName : "toBool"});
	}
	switch(thx_Types.toString(Type["typeof"](value))) {
	case "Bool":
		return value;
	case "Float":case "Int":
		return value != 0;
	case "String":
		if(thx_Bools.canParse(value)) {
			return thx_Bools.parse(value);
		} else {
			throw new thx_Error("unable to convert " + Std.string(value) + " to Bool",null,{ fileName : "Convert.hx", lineNumber : 84, className : "thx.Convert", methodName : "toBool"});
		}
		break;
	default:
		throw new thx_Error("unable to convert " + Std.string(value) + " to Bool",null,{ fileName : "Convert.hx", lineNumber : 84, className : "thx.Convert", methodName : "toBool"});
	}
};
thx_Convert.toBoolOr = function(value,alt) {
	try {
		return thx_Convert.toBool(value);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,thx_Error) ) {
			return alt;
		} else throw(e);
	}
};
thx_Convert.toDate = function(value) {
	if(null == value) {
		throw new thx_Error("unable to convert null to Date",null,{ fileName : "Convert.hx", lineNumber : 92, className : "thx.Convert", methodName : "toDate"});
	}
	switch(thx_Types.toString(Type["typeof"](value))) {
	case "Date":
		return value;
	case "Float":case "Int":
		return new Date(value);
	case "String":
		try {
			return HxOverrides.strDate(value);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			throw new thx_Error("unable to convert string " + Std.string(value) + " to Date",null,{ fileName : "Convert.hx", lineNumber : 100, className : "thx.Convert", methodName : "toDate"});
		}
		break;
	default:
		throw new thx_Error("unable to convert " + Std.string(value) + " to Date",null,{ fileName : "Convert.hx", lineNumber : 104, className : "thx.Convert", methodName : "toDate"});
	}
};
thx_Convert.toDateOr = function(value,alt) {
	try {
		return thx_Convert.toDate(value);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,thx_Error) ) {
			return alt;
		} else throw(e);
	}
};
thx_Convert.toDateTime = function(value) {
	if(null == value) {
		return null;
	}
	switch(thx_Types.toString(Type["typeof"](value))) {
	case "Date":
		return thx__$DateTime_DateTime_$Impl_$.fromDate(value);
	case "Float":case "Int":
		return thx__$DateTime_DateTime_$Impl_$.fromTime(value);
	case "String":
		try {
			return thx__$DateTime_DateTime_$Impl_$.fromString(value);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			throw new thx_Error("unable to convert string " + Std.string(value) + " to DateTime",null,{ fileName : "Convert.hx", lineNumber : 120, className : "thx.Convert", methodName : "toDateTime"});
		}
		break;
	default:
		throw new thx_Error("unable to convert " + Std.string(value) + " to DateTime",null,{ fileName : "Convert.hx", lineNumber : 124, className : "thx.Convert", methodName : "toDateTime"});
	}
};
thx_Convert.toDateTimeOr = function(value,alt) {
	var v;
	try {
		v = thx_Convert.toDateTime(value);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,thx_Error) ) {
			v = null;
		} else throw(e);
	}
	if(null == v) {
		return alt;
	} else {
		return v;
	}
};
thx_Convert.toDateTimeUtc = function(value) {
	if(null == value) {
		return null;
	}
	switch(thx_Types.toString(Type["typeof"](value))) {
	case "Date":
		return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromDate(value);
	case "Float":case "Int":
		return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromTime(value);
	case "String":
		try {
			return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString(value);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			throw new thx_Error("unable to convert string " + Std.string(value) + " to DateTimeUtc",null,{ fileName : "Convert.hx", lineNumber : 142, className : "thx.Convert", methodName : "toDateTimeUtc"});
		}
		break;
	default:
		throw new thx_Error("unable to convert " + Std.string(value) + " to DateTimeUtc",null,{ fileName : "Convert.hx", lineNumber : 146, className : "thx.Convert", methodName : "toDateTimeUtc"});
	}
};
thx_Convert.toDateTimeUtcOr = function(value,alt) {
	var v;
	try {
		v = thx_Convert.toDateTimeUtc(value);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,thx_Error) ) {
			v = null;
		} else throw(e);
	}
	if(null == v) {
		return alt;
	} else {
		return v;
	}
};
thx_Convert.toObject = function(value) {
	if(null == value) {
		return null;
	}
	if(Reflect.isObject(value)) {
		return value;
	}
	if(thx_Types.toString(Type["typeof"](value)) == "String") {
		try {
			return JSON.parse(value);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			throw new thx_Error("unable to convert string " + Std.string(value) + " to Object",null,{ fileName : "Convert.hx", lineNumber : 165, className : "thx.Convert", methodName : "toObject"});
		}
	} else {
		throw new thx_Error("unable to convert " + Std.string(value) + " to Object",null,{ fileName : "Convert.hx", lineNumber : 167, className : "thx.Convert", methodName : "toObject"});
	}
};
thx_Convert.toObjectOr = function(value,alt) {
	if(null == value) {
		return alt;
	}
	try {
		return thx_Convert.toObject(value);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,thx_Error) ) {
			return alt;
		} else throw(e);
	}
};
thx_Convert.toArrayString = function(value) {
	return thx_Convert.toArray(value,thx_Convert.toString);
};
thx_Convert.toArrayStringOr = function(value,alt) {
	if(null == value) {
		return alt;
	}
	try {
		return thx_Convert.toArrayString(value);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,thx_Error) ) {
			return alt;
		} else throw(e);
	}
};
thx_Convert.toArrayInt = function(value) {
	return thx_Convert.toArray(value,thx_Convert.toInt);
};
thx_Convert.toArrayIntOr = function(value,alt) {
	if(null == value) {
		return alt;
	}
	try {
		return thx_Convert.toArrayInt(value);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,thx_Error) ) {
			return alt;
		} else throw(e);
	}
};
thx_Convert.toArrayFloat = function(value) {
	return thx_Convert.toArray(value,thx_Convert.toFloat);
};
thx_Convert.toArrayFloatOr = function(value,alt) {
	if(null == value) {
		return alt;
	}
	try {
		return thx_Convert.toArrayFloat(value);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,thx_Error) ) {
			return alt;
		} else throw(e);
	}
};
thx_Convert.toArrayBool = function(value) {
	return thx_Convert.toArray(value,thx_Convert.toBool);
};
thx_Convert.toArrayBoolOr = function(value,alt) {
	if(null == value) {
		return alt;
	}
	try {
		return thx_Convert.toArrayBool(value);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,thx_Error) ) {
			return alt;
		} else throw(e);
	}
};
thx_Convert.toArrayDate = function(value) {
	return thx_Convert.toArray(value,thx_Convert.toDate);
};
thx_Convert.toArrayDateOr = function(value,alt) {
	if(null == value) {
		return alt;
	}
	try {
		return thx_Convert.toArrayDate(value);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,thx_Error) ) {
			return alt;
		} else throw(e);
	}
};
thx_Convert.toArrayDateTime = function(value) {
	return thx_Convert.toArray(value,thx_Convert.toDateTime);
};
thx_Convert.toArrayDateTimeOr = function(value,alt) {
	if(null == value) {
		return alt;
	}
	try {
		return thx_Convert.toArrayDateTime(value);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,thx_Error) ) {
			return alt;
		} else throw(e);
	}
};
thx_Convert.toArrayObject = function(value) {
	return thx_Convert.toArray(value,thx_Convert.toObject);
};
thx_Convert.toArrayObjectOr = function(value,alt) {
	if(null == value) {
		return alt;
	}
	try {
		return thx_Convert.toArrayObject(value);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,thx_Error) ) {
			return alt;
		} else throw(e);
	}
};
thx_Convert.toArray = function(value,convert) {
	if(null == value) {
		return [];
	}
	if((value instanceof Array) && value.__enum__ == null) {
		return value.map(convert);
	} else {
		throw new thx_Error("unable to convert " + Std.string(value) + " to Array<T>",null,{ fileName : "Convert.hx", lineNumber : 236, className : "thx.Convert", methodName : "toArray"});
	}
};
thx_Convert.toMap = function(value,convert) {
	var obj = thx_Convert.toObject(value);
	return thx_Arrays.reduce(Reflect.fields(obj),function(map,field) {
		var value1 = convert(Reflect.field(obj,field));
		if(__map_reserved[field] != null) {
			map.setReserved(field,value1);
		} else {
			map.h[field] = value1;
		}
		return map;
	},new haxe_ds_StringMap());
};
var thx_DateHelper = function() { };
thx_DateHelper.__name__ = ["thx","DateHelper"];
var thx__$DateTime_DateTime_$Impl_$ = {};
thx__$DateTime_DateTime_$Impl_$.__name__ = ["thx","_DateTime","DateTime_Impl_"];
thx__$DateTime_DateTime_$Impl_$.localOffset = function() {
	var now = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.now();
	var local = new Date(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(now,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(now,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH) - 1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(now,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_hour(now),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_minute(now),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_second(now));
	var a = now;
	var b = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.unixEpochTicks;
	var high = a.high - b.high | 0;
	var low = a.low - b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low) < 0) {
		--high;
		high = high | 0;
	}
	var a1 = thx_Int64s.fromFloat(Math.floor(thx_Int64s.toFloat(haxe__$Int64_Int64_$Impl_$.divMod(new haxe__$Int64__$_$_$Int64(high,low),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMillisecondI64).quotient) / 1000) * 1000 - local.getTime());
	var b1 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMillisecondI64;
	var al = a1.low & 65535;
	var ah = a1.low >>> 16;
	var bl = b1.low & 65535;
	var bh = b1.low >>> 16;
	var p00 = haxe__$Int32_Int32_$Impl_$.mul(al,bl);
	var p10 = haxe__$Int32_Int32_$Impl_$.mul(ah,bl);
	var p01 = haxe__$Int32_Int32_$Impl_$.mul(al,bh);
	var p11 = haxe__$Int32_Int32_$Impl_$.mul(ah,bh);
	var low1 = p00;
	var high1 = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 = p01 << 16;
	low1 = p00 + p01 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,p01) < 0) {
		++high1;
		high1 = high1 | 0;
	}
	p10 = p10 << 16;
	low1 = low1 + p10 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,p10) < 0) {
		++high1;
		high1 = high1 | 0;
	}
	high1 = high1 + (haxe__$Int32_Int32_$Impl_$.mul(a1.low,b1.high) + haxe__$Int32_Int32_$Impl_$.mul(a1.high,b1.low) | 0) | 0;
	return new haxe__$Int64__$_$_$Int64(high1,low1);
};
thx__$DateTime_DateTime_$Impl_$.now = function() {
	return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.now(),thx__$DateTime_DateTime_$Impl_$.localOffset()];
};
thx__$DateTime_DateTime_$Impl_$.nowUtc = function() {
	return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.now(),thx__$Time_Time_$Impl_$.zero];
};
thx__$DateTime_DateTime_$Impl_$.fromDate = function(date) {
	return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromTime(date.getTime()),thx__$DateTime_DateTime_$Impl_$.localOffset()];
};
thx__$DateTime_DateTime_$Impl_$.fromDateWithOffset = function(date,offset) {
	return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromTime(date.getTime()),offset];
};
thx__$DateTime_DateTime_$Impl_$.fromTime = function(timestamp) {
	return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromTime(timestamp),thx__$Time_Time_$Impl_$.zero];
};
thx__$DateTime_DateTime_$Impl_$.fromString = function(s) {
	if(s == null) {
		throw new thx_Error("null String cannot be parsed to DateTime",null,{ fileName : "DateTime.hx", lineNumber : 93, className : "thx._DateTime.DateTime_Impl_", methodName : "fromString"});
	}
	var pattern = new EReg("^([-])?(\\d+)[-](\\d{2})[-](\\d{2})(?:[T ](\\d{2})[:](\\d{2})[:](\\d{2})(?:\\.(\\d+))?(Z|([+-]\\d{2})[:](\\d{2}))?)?$","");
	if(!pattern.match(s)) {
		throw new thx_Error("unable to parse DateTime string: \"" + s + "\"",null,{ fileName : "DateTime.hx", lineNumber : 96, className : "thx._DateTime.DateTime_Impl_", methodName : "fromString"});
	}
	var smticks = pattern.matched(8);
	var mticks = 0;
	if(null != smticks) {
		smticks = "1" + thx_Strings.rpad(smticks,"0",7).substring(0,7);
		mticks = Std.parseInt(smticks) - 10000000;
	}
	var time = thx__$Time_Time_$Impl_$.zero;
	var timepart = pattern.matched(9);
	if(null != timepart && "Z" != timepart) {
		var hours = pattern.matched(10);
		if(hours.substring(0,1) == "+") {
			hours = hours.substring(1);
		}
		time = thx__$Time_Time_$Impl_$.create(Std.parseInt(hours),Std.parseInt(pattern.matched(11)),0);
	}
	var this1 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(Std.parseInt(pattern.matched(2)),Std.parseInt(pattern.matched(3)),Std.parseInt(pattern.matched(4)),Std.parseInt(pattern.matched(5)),Std.parseInt(pattern.matched(6)),Std.parseInt(pattern.matched(7)),0),time];
	var this2 = this1[0];
	var b = time;
	var high = this2.high - b.high | 0;
	var low = this2.low - b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(this2.low,b.low) < 0) {
		--high;
		high = high | 0;
	}
	var this3 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high,low)),this1[1]];
	var ticks = new haxe__$Int64__$_$_$Int64(mticks >> 31,mticks);
	var this4 = this3[0];
	var high1 = this4.high + ticks.high | 0;
	var low1 = this4.low + ticks.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,this4.low) < 0) {
		++high1;
		high1 = high1 | 0;
	}
	var date = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high1,low1)),this3[1]];
	if(pattern.matched(1) == "-") {
		var this5 = date[0];
		var high2 = ~this5.high;
		var low2 = -this5.low;
		if(low2 == 0) {
			++high2;
			high2 = high2 | 0;
		}
		return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high2,low2)),time];
	}
	return date;
};
thx__$DateTime_DateTime_$Impl_$.daysRange = function(start,end) {
	if(thx__$DateTime_DateTime_$Impl_$.compareTo(end,start) < 0) {
		return [];
	}
	var days = [];
	while(!thx__$DateTime_DateTime_$Impl_$.sameDay(start,end)) {
		days.push(start);
		start = thx__$DateTime_DateTime_$Impl_$.jump(start,thx_TimePeriod.Day,1);
	}
	days.push(end);
	return days;
};
thx__$DateTime_DateTime_$Impl_$.compare = function(a,b) {
	return thx__$DateTime_DateTime_$Impl_$.compareTo(a,b);
};
thx__$DateTime_DateTime_$Impl_$.ord = function() {
	return thx__$Ord_Ord_$Impl_$.fromIntComparison(thx__$DateTime_DateTime_$Impl_$.compare);
};
thx__$DateTime_DateTime_$Impl_$.create = function(year,month,day,hour,minute,second,millisecond,offset) {
	if(millisecond == null) {
		millisecond = 0;
	}
	if(second == null) {
		second = 0;
	}
	if(minute == null) {
		minute = 0;
	}
	if(hour == null) {
		hour = 0;
	}
	var this1 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(year,month,day,hour,minute,second,millisecond),offset];
	var this2 = this1[0];
	var b = offset;
	var high = this2.high - b.high | 0;
	var low = this2.low - b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(this2.low,b.low) < 0) {
		--high;
		high = high | 0;
	}
	return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high,low)),this1[1]];
};
thx__$DateTime_DateTime_$Impl_$._new = function(dateTime,offset) {
	return [dateTime,offset];
};
thx__$DateTime_DateTime_$Impl_$.min = function(this1,other) {
	if(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.compareTo(this1[0],other[0]) <= 0) {
		return this1;
	} else {
		return other;
	}
};
thx__$DateTime_DateTime_$Impl_$.max = function(this1,other) {
	if(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.compareTo(this1[0],other[0]) >= 0) {
		return this1;
	} else {
		return other;
	}
};
thx__$DateTime_DateTime_$Impl_$.jump = function(this1,period,amount) {
	var this2 = this1[0];
	var this3 = this1[1];
	var high = this2.high + this3.high | 0;
	var low = this2.low + this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	var sec = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_second(new haxe__$Int64__$_$_$Int64(high,low));
	var this4 = this1[0];
	var this5 = this1[1];
	var high1 = this4.high + this5.high | 0;
	var low1 = this4.low + this5.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,this4.low) < 0) {
		++high1;
		high1 = high1 | 0;
	}
	var min = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_minute(new haxe__$Int64__$_$_$Int64(high1,low1));
	var this6 = this1[0];
	var this7 = this1[1];
	var high2 = this6.high + this7.high | 0;
	var low2 = this6.low + this7.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,this6.low) < 0) {
		++high2;
		high2 = high2 | 0;
	}
	var hr = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_hour(new haxe__$Int64__$_$_$Int64(high2,low2));
	var this8 = this1[0];
	var this9 = this1[1];
	var high3 = this8.high + this9.high | 0;
	var low3 = this8.low + this9.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low3,this8.low) < 0) {
		++high3;
		high3 = high3 | 0;
	}
	var day = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high3,low3),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY);
	var this10 = this1[0];
	var this11 = this1[1];
	var high4 = this10.high + this11.high | 0;
	var low4 = this10.low + this11.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low4,this10.low) < 0) {
		++high4;
		high4 = high4 | 0;
	}
	var mon = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high4,low4),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH);
	var this12 = this1[0];
	var this13 = this1[1];
	var high5 = this12.high + this13.high | 0;
	var low5 = this12.low + this13.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low5,this12.low) < 0) {
		++high5;
		high5 = high5 | 0;
	}
	var yr = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high5,low5),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR);
	switch(period[1]) {
	case 0:
		sec += amount;
		break;
	case 1:
		min += amount;
		break;
	case 2:
		hr += amount;
		break;
	case 3:
		day += amount;
		break;
	case 4:
		day += amount * 7;
		break;
	case 5:
		mon += amount;
		break;
	case 6:
		yr += amount;
		break;
	}
	var this14 = this1[0];
	var this15 = this1[1];
	var high6 = this14.high + this15.high | 0;
	var low6 = this14.low + this15.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low6,this14.low) < 0) {
		++high6;
		high6 = high6 | 0;
	}
	var millisecond = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_millisecond(new haxe__$Int64__$_$_$Int64(high6,low6));
	var offset = this1[1];
	var this16 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(yr,mon,day,hr,min,sec,millisecond),offset];
	var this17 = this16[0];
	var b = offset;
	var high7 = this17.high - b.high | 0;
	var low7 = this17.low - b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(this17.low,b.low) < 0) {
		--high7;
		high7 = high7 | 0;
	}
	return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high7,low7)),this16[1]];
};
thx__$DateTime_DateTime_$Impl_$.daysInThisMonth = function(this1) {
	var this2 = this1[0];
	var this3 = this1[1];
	var high = this2.high + this3.high | 0;
	var low = this2.low + this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	var tmp = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high,low),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR);
	var this4 = this1[0];
	var this5 = this1[1];
	var high1 = this4.high + this5.high | 0;
	var low1 = this4.low + this5.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,this4.low) < 0) {
		++high1;
		high1 = high1 | 0;
	}
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysInMonth(tmp,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high1,low1),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH));
};
thx__$DateTime_DateTime_$Impl_$.prevYear = function(this1) {
	return thx__$DateTime_DateTime_$Impl_$.jump(this1,thx_TimePeriod.Year,-1);
};
thx__$DateTime_DateTime_$Impl_$.nextYear = function(this1) {
	return thx__$DateTime_DateTime_$Impl_$.jump(this1,thx_TimePeriod.Year,1);
};
thx__$DateTime_DateTime_$Impl_$.prevMonth = function(this1) {
	return thx__$DateTime_DateTime_$Impl_$.jump(this1,thx_TimePeriod.Month,-1);
};
thx__$DateTime_DateTime_$Impl_$.nextMonth = function(this1) {
	return thx__$DateTime_DateTime_$Impl_$.jump(this1,thx_TimePeriod.Month,1);
};
thx__$DateTime_DateTime_$Impl_$.prevWeek = function(this1) {
	return thx__$DateTime_DateTime_$Impl_$.jump(this1,thx_TimePeriod.Week,-1);
};
thx__$DateTime_DateTime_$Impl_$.nextWeek = function(this1) {
	return thx__$DateTime_DateTime_$Impl_$.jump(this1,thx_TimePeriod.Week,1);
};
thx__$DateTime_DateTime_$Impl_$.prevDay = function(this1) {
	return thx__$DateTime_DateTime_$Impl_$.jump(this1,thx_TimePeriod.Day,-1);
};
thx__$DateTime_DateTime_$Impl_$.nextDay = function(this1) {
	return thx__$DateTime_DateTime_$Impl_$.jump(this1,thx_TimePeriod.Day,1);
};
thx__$DateTime_DateTime_$Impl_$.prevHour = function(this1) {
	return thx__$DateTime_DateTime_$Impl_$.jump(this1,thx_TimePeriod.Hour,-1);
};
thx__$DateTime_DateTime_$Impl_$.nextHour = function(this1) {
	return thx__$DateTime_DateTime_$Impl_$.jump(this1,thx_TimePeriod.Hour,1);
};
thx__$DateTime_DateTime_$Impl_$.prevMinute = function(this1) {
	return thx__$DateTime_DateTime_$Impl_$.jump(this1,thx_TimePeriod.Minute,-1);
};
thx__$DateTime_DateTime_$Impl_$.nextMinute = function(this1) {
	return thx__$DateTime_DateTime_$Impl_$.jump(this1,thx_TimePeriod.Minute,1);
};
thx__$DateTime_DateTime_$Impl_$.prevSecond = function(this1) {
	return thx__$DateTime_DateTime_$Impl_$.jump(this1,thx_TimePeriod.Second,-1);
};
thx__$DateTime_DateTime_$Impl_$.nextSecond = function(this1) {
	return thx__$DateTime_DateTime_$Impl_$.jump(this1,thx_TimePeriod.Second,1);
};
thx__$DateTime_DateTime_$Impl_$.snapToWeekDay = function(this1,weekday,firstDayOfWk) {
	if(firstDayOfWk == null) {
		firstDayOfWk = 0;
	}
	var this2 = this1[0];
	var this3 = this1[1];
	var high = this2.high + this3.high | 0;
	var low = this2.low + this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	var d = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_dayOfWeek(new haxe__$Int64__$_$_$Int64(high,low));
	var s = weekday;
	if(s < firstDayOfWk) {
		s += 7;
	}
	if(d < firstDayOfWk) {
		d += 7;
	}
	return thx__$DateTime_DateTime_$Impl_$.jump(this1,thx_TimePeriod.Day,s - d);
};
thx__$DateTime_DateTime_$Impl_$.snapNextWeekDay = function(this1,weekday) {
	var this2 = this1[0];
	var this3 = this1[1];
	var high = this2.high + this3.high | 0;
	var low = this2.low + this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	var d = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_dayOfWeek(new haxe__$Int64__$_$_$Int64(high,low));
	var s = weekday;
	if(s < d) {
		s += 7;
	}
	return thx__$DateTime_DateTime_$Impl_$.jump(this1,thx_TimePeriod.Day,s - d);
};
thx__$DateTime_DateTime_$Impl_$.snapPrevWeekDay = function(this1,weekday) {
	var this2 = this1[0];
	var this3 = this1[1];
	var high = this2.high + this3.high | 0;
	var low = this2.low + this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	var d = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_dayOfWeek(new haxe__$Int64__$_$_$Int64(high,low));
	var s = weekday;
	if(s > d) {
		s -= 7;
	}
	return thx__$DateTime_DateTime_$Impl_$.jump(this1,thx_TimePeriod.Day,s - d);
};
thx__$DateTime_DateTime_$Impl_$.snapNext = function(this1,period) {
	switch(period[1]) {
	case 0:
		var a = thx_Int64s.divCeil(this1[0],thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerSecondI64);
		var b = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerSecondI64;
		var al = a.low & 65535;
		var ah = a.low >>> 16;
		var bl = b.low & 65535;
		var bh = b.low >>> 16;
		var p00 = haxe__$Int32_Int32_$Impl_$.mul(al,bl);
		var p10 = haxe__$Int32_Int32_$Impl_$.mul(ah,bl);
		var p01 = haxe__$Int32_Int32_$Impl_$.mul(al,bh);
		var p11 = haxe__$Int32_Int32_$Impl_$.mul(ah,bh);
		var low = p00;
		var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
		p01 = p01 << 16;
		low = p00 + p01 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
			++high;
			high = high | 0;
		}
		p10 = p10 << 16;
		low = low + p10 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
			++high;
			high = high | 0;
		}
		high = high + (haxe__$Int32_Int32_$Impl_$.mul(a.low,b.high) + haxe__$Int32_Int32_$Impl_$.mul(a.high,b.low) | 0) | 0;
		return [new haxe__$Int64__$_$_$Int64(high,low),this1[1]];
	case 1:
		var a1 = thx_Int64s.divCeil(this1[0],thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMinuteI64);
		var b1 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMinuteI64;
		var al1 = a1.low & 65535;
		var ah1 = a1.low >>> 16;
		var bl1 = b1.low & 65535;
		var bh1 = b1.low >>> 16;
		var p001 = haxe__$Int32_Int32_$Impl_$.mul(al1,bl1);
		var p101 = haxe__$Int32_Int32_$Impl_$.mul(ah1,bl1);
		var p011 = haxe__$Int32_Int32_$Impl_$.mul(al1,bh1);
		var p111 = haxe__$Int32_Int32_$Impl_$.mul(ah1,bh1);
		var low1 = p001;
		var high1 = (p111 + (p011 >>> 16) | 0) + (p101 >>> 16) | 0;
		p011 = p011 << 16;
		low1 = p001 + p011 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,p011) < 0) {
			++high1;
			high1 = high1 | 0;
		}
		p101 = p101 << 16;
		low1 = low1 + p101 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,p101) < 0) {
			++high1;
			high1 = high1 | 0;
		}
		high1 = high1 + (haxe__$Int32_Int32_$Impl_$.mul(a1.low,b1.high) + haxe__$Int32_Int32_$Impl_$.mul(a1.high,b1.low) | 0) | 0;
		return [new haxe__$Int64__$_$_$Int64(high1,low1),this1[1]];
	case 2:
		var a2 = thx_Int64s.divCeil(this1[0],thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerHourI64);
		var b2 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerHourI64;
		var al2 = a2.low & 65535;
		var ah2 = a2.low >>> 16;
		var bl2 = b2.low & 65535;
		var bh2 = b2.low >>> 16;
		var p002 = haxe__$Int32_Int32_$Impl_$.mul(al2,bl2);
		var p102 = haxe__$Int32_Int32_$Impl_$.mul(ah2,bl2);
		var p012 = haxe__$Int32_Int32_$Impl_$.mul(al2,bh2);
		var p112 = haxe__$Int32_Int32_$Impl_$.mul(ah2,bh2);
		var low2 = p002;
		var high2 = (p112 + (p012 >>> 16) | 0) + (p102 >>> 16) | 0;
		p012 = p012 << 16;
		low2 = p002 + p012 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,p012) < 0) {
			++high2;
			high2 = high2 | 0;
		}
		p102 = p102 << 16;
		low2 = low2 + p102 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,p102) < 0) {
			++high2;
			high2 = high2 | 0;
		}
		high2 = high2 + (haxe__$Int32_Int32_$Impl_$.mul(a2.low,b2.high) + haxe__$Int32_Int32_$Impl_$.mul(a2.high,b2.low) | 0) | 0;
		return [new haxe__$Int64__$_$_$Int64(high2,low2),this1[1]];
	case 3:
		var this2 = this1[0];
		var this3 = this1[1];
		var high3 = this2.high + this3.high | 0;
		var low3 = this2.low + this3.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low3,this2.low) < 0) {
			++high3;
			high3 = high3 | 0;
		}
		var year = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high3,low3),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR);
		var this4 = this1[0];
		var this5 = this1[1];
		var high4 = this4.high + this5.high | 0;
		var low4 = this4.low + this5.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low4,this4.low) < 0) {
			++high4;
			high4 = high4 | 0;
		}
		var month = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high4,low4),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH);
		var this6 = this1[0];
		var this7 = this1[1];
		var high5 = this6.high + this7.high | 0;
		var low5 = this6.low + this7.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low5,this6.low) < 0) {
			++high5;
			high5 = high5 | 0;
		}
		var day = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high5,low5),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY) + 1;
		var offset = this1[1];
		var this8 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(year,month,day,0,0,0,0),offset];
		var this9 = this8[0];
		var b3 = offset;
		var high6 = this9.high - b3.high | 0;
		var low6 = this9.low - b3.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(this9.low,b3.low) < 0) {
			--high6;
			high6 = high6 | 0;
		}
		return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high6,low6)),this8[1]];
	case 4:
		var this10 = this1[0];
		var this11 = this1[1];
		var high7 = this10.high + this11.high | 0;
		var low7 = this10.low + this11.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low7,this10.low) < 0) {
			++high7;
			high7 = high7 | 0;
		}
		var wd = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_dayOfWeek(new haxe__$Int64__$_$_$Int64(high7,low7));
		var this12 = this1[0];
		var this13 = this1[1];
		var high8 = this12.high + this13.high | 0;
		var low8 = this12.low + this13.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low8,this12.low) < 0) {
			++high8;
			high8 = high8 | 0;
		}
		var year1 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high8,low8),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR);
		var this14 = this1[0];
		var this15 = this1[1];
		var high9 = this14.high + this15.high | 0;
		var low9 = this14.low + this15.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low9,this14.low) < 0) {
			++high9;
			high9 = high9 | 0;
		}
		var month1 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high9,low9),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH);
		var this16 = this1[0];
		var this17 = this1[1];
		var high10 = this16.high + this17.high | 0;
		var low10 = this16.low + this17.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low10,this16.low) < 0) {
			++high10;
			high10 = high10 | 0;
		}
		var day1 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high10,low10),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY) + 7 - wd;
		var offset1 = this1[1];
		var this18 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(year1,month1,day1,0,0,0,0),offset1];
		var this19 = this18[0];
		var b4 = offset1;
		var high11 = this19.high - b4.high | 0;
		var low11 = this19.low - b4.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(this19.low,b4.low) < 0) {
			--high11;
			high11 = high11 | 0;
		}
		return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high11,low11)),this18[1]];
	case 5:
		var this20 = this1[0];
		var this21 = this1[1];
		var high12 = this20.high + this21.high | 0;
		var low12 = this20.low + this21.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low12,this20.low) < 0) {
			++high12;
			high12 = high12 | 0;
		}
		var year2 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high12,low12),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR);
		var this22 = this1[0];
		var this23 = this1[1];
		var high13 = this22.high + this23.high | 0;
		var low13 = this22.low + this23.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low13,this22.low) < 0) {
			++high13;
			high13 = high13 | 0;
		}
		var month2 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high13,low13),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH) + 1;
		var offset2 = this1[1];
		var this24 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(year2,month2,1,0,0,0,0),offset2];
		var this25 = this24[0];
		var b5 = offset2;
		var high14 = this25.high - b5.high | 0;
		var low14 = this25.low - b5.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(this25.low,b5.low) < 0) {
			--high14;
			high14 = high14 | 0;
		}
		return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high14,low14)),this24[1]];
	case 6:
		var this26 = this1[0];
		var this27 = this1[1];
		var high15 = this26.high + this27.high | 0;
		var low15 = this26.low + this27.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low15,this26.low) < 0) {
			++high15;
			high15 = high15 | 0;
		}
		var year3 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high15,low15),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR) + 1;
		var offset3 = this1[1];
		var this28 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(year3,1,1,0,0,0,0),offset3];
		var this29 = this28[0];
		var b6 = offset3;
		var high16 = this29.high - b6.high | 0;
		var low16 = this29.low - b6.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(this29.low,b6.low) < 0) {
			--high16;
			high16 = high16 | 0;
		}
		return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high16,low16)),this28[1]];
	}
};
thx__$DateTime_DateTime_$Impl_$.snapPrev = function(this1,period) {
	switch(period[1]) {
	case 0:
		var a = thx_Int64s.divFloor(this1[0],thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerSecondI64);
		var b = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerSecondI64;
		var al = a.low & 65535;
		var ah = a.low >>> 16;
		var bl = b.low & 65535;
		var bh = b.low >>> 16;
		var p00 = haxe__$Int32_Int32_$Impl_$.mul(al,bl);
		var p10 = haxe__$Int32_Int32_$Impl_$.mul(ah,bl);
		var p01 = haxe__$Int32_Int32_$Impl_$.mul(al,bh);
		var p11 = haxe__$Int32_Int32_$Impl_$.mul(ah,bh);
		var low = p00;
		var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
		p01 = p01 << 16;
		low = p00 + p01 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
			++high;
			high = high | 0;
		}
		p10 = p10 << 16;
		low = low + p10 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
			++high;
			high = high | 0;
		}
		high = high + (haxe__$Int32_Int32_$Impl_$.mul(a.low,b.high) + haxe__$Int32_Int32_$Impl_$.mul(a.high,b.low) | 0) | 0;
		return [new haxe__$Int64__$_$_$Int64(high,low),this1[1]];
	case 1:
		var a1 = thx_Int64s.divFloor(this1[0],thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMinuteI64);
		var b1 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMinuteI64;
		var al1 = a1.low & 65535;
		var ah1 = a1.low >>> 16;
		var bl1 = b1.low & 65535;
		var bh1 = b1.low >>> 16;
		var p001 = haxe__$Int32_Int32_$Impl_$.mul(al1,bl1);
		var p101 = haxe__$Int32_Int32_$Impl_$.mul(ah1,bl1);
		var p011 = haxe__$Int32_Int32_$Impl_$.mul(al1,bh1);
		var p111 = haxe__$Int32_Int32_$Impl_$.mul(ah1,bh1);
		var low1 = p001;
		var high1 = (p111 + (p011 >>> 16) | 0) + (p101 >>> 16) | 0;
		p011 = p011 << 16;
		low1 = p001 + p011 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,p011) < 0) {
			++high1;
			high1 = high1 | 0;
		}
		p101 = p101 << 16;
		low1 = low1 + p101 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,p101) < 0) {
			++high1;
			high1 = high1 | 0;
		}
		high1 = high1 + (haxe__$Int32_Int32_$Impl_$.mul(a1.low,b1.high) + haxe__$Int32_Int32_$Impl_$.mul(a1.high,b1.low) | 0) | 0;
		return [new haxe__$Int64__$_$_$Int64(high1,low1),this1[1]];
	case 2:
		var a2 = thx_Int64s.divFloor(this1[0],thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerHourI64);
		var b2 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerHourI64;
		var al2 = a2.low & 65535;
		var ah2 = a2.low >>> 16;
		var bl2 = b2.low & 65535;
		var bh2 = b2.low >>> 16;
		var p002 = haxe__$Int32_Int32_$Impl_$.mul(al2,bl2);
		var p102 = haxe__$Int32_Int32_$Impl_$.mul(ah2,bl2);
		var p012 = haxe__$Int32_Int32_$Impl_$.mul(al2,bh2);
		var p112 = haxe__$Int32_Int32_$Impl_$.mul(ah2,bh2);
		var low2 = p002;
		var high2 = (p112 + (p012 >>> 16) | 0) + (p102 >>> 16) | 0;
		p012 = p012 << 16;
		low2 = p002 + p012 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,p012) < 0) {
			++high2;
			high2 = high2 | 0;
		}
		p102 = p102 << 16;
		low2 = low2 + p102 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,p102) < 0) {
			++high2;
			high2 = high2 | 0;
		}
		high2 = high2 + (haxe__$Int32_Int32_$Impl_$.mul(a2.low,b2.high) + haxe__$Int32_Int32_$Impl_$.mul(a2.high,b2.low) | 0) | 0;
		return [new haxe__$Int64__$_$_$Int64(high2,low2),this1[1]];
	case 3:
		var this2 = this1[0];
		var this3 = this1[1];
		var high3 = this2.high + this3.high | 0;
		var low3 = this2.low + this3.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low3,this2.low) < 0) {
			++high3;
			high3 = high3 | 0;
		}
		var year = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high3,low3),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR);
		var this4 = this1[0];
		var this5 = this1[1];
		var high4 = this4.high + this5.high | 0;
		var low4 = this4.low + this5.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low4,this4.low) < 0) {
			++high4;
			high4 = high4 | 0;
		}
		var month = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high4,low4),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH);
		var this6 = this1[0];
		var this7 = this1[1];
		var high5 = this6.high + this7.high | 0;
		var low5 = this6.low + this7.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low5,this6.low) < 0) {
			++high5;
			high5 = high5 | 0;
		}
		var day = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high5,low5),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY);
		var offset = this1[1];
		var this8 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(year,month,day,0,0,0,0),offset];
		var this9 = this8[0];
		var b3 = offset;
		var high6 = this9.high - b3.high | 0;
		var low6 = this9.low - b3.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(this9.low,b3.low) < 0) {
			--high6;
			high6 = high6 | 0;
		}
		return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high6,low6)),this8[1]];
	case 4:
		var this10 = this1[0];
		var this11 = this1[1];
		var high7 = this10.high + this11.high | 0;
		var low7 = this10.low + this11.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low7,this10.low) < 0) {
			++high7;
			high7 = high7 | 0;
		}
		var wd = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_dayOfWeek(new haxe__$Int64__$_$_$Int64(high7,low7));
		var this12 = this1[0];
		var this13 = this1[1];
		var high8 = this12.high + this13.high | 0;
		var low8 = this12.low + this13.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low8,this12.low) < 0) {
			++high8;
			high8 = high8 | 0;
		}
		var year1 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high8,low8),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR);
		var this14 = this1[0];
		var this15 = this1[1];
		var high9 = this14.high + this15.high | 0;
		var low9 = this14.low + this15.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low9,this14.low) < 0) {
			++high9;
			high9 = high9 | 0;
		}
		var month1 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high9,low9),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH);
		var this16 = this1[0];
		var this17 = this1[1];
		var high10 = this16.high + this17.high | 0;
		var low10 = this16.low + this17.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low10,this16.low) < 0) {
			++high10;
			high10 = high10 | 0;
		}
		var day1 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high10,low10),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY) - wd;
		var offset1 = this1[1];
		var this18 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(year1,month1,day1,0,0,0,0),offset1];
		var this19 = this18[0];
		var b4 = offset1;
		var high11 = this19.high - b4.high | 0;
		var low11 = this19.low - b4.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(this19.low,b4.low) < 0) {
			--high11;
			high11 = high11 | 0;
		}
		return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high11,low11)),this18[1]];
	case 5:
		var this20 = this1[0];
		var this21 = this1[1];
		var high12 = this20.high + this21.high | 0;
		var low12 = this20.low + this21.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low12,this20.low) < 0) {
			++high12;
			high12 = high12 | 0;
		}
		var year2 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high12,low12),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR);
		var this22 = this1[0];
		var this23 = this1[1];
		var high13 = this22.high + this23.high | 0;
		var low13 = this22.low + this23.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low13,this22.low) < 0) {
			++high13;
			high13 = high13 | 0;
		}
		var month2 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high13,low13),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH);
		var offset2 = this1[1];
		var this24 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(year2,month2,1,0,0,0,0),offset2];
		var this25 = this24[0];
		var b5 = offset2;
		var high14 = this25.high - b5.high | 0;
		var low14 = this25.low - b5.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(this25.low,b5.low) < 0) {
			--high14;
			high14 = high14 | 0;
		}
		return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high14,low14)),this24[1]];
	case 6:
		var this26 = this1[0];
		var this27 = this1[1];
		var high15 = this26.high + this27.high | 0;
		var low15 = this26.low + this27.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low15,this26.low) < 0) {
			++high15;
			high15 = high15 | 0;
		}
		var year3 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high15,low15),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR);
		var offset3 = this1[1];
		var this28 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(year3,1,1,0,0,0,0),offset3];
		var this29 = this28[0];
		var b6 = offset3;
		var high16 = this29.high - b6.high | 0;
		var low16 = this29.low - b6.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(this29.low,b6.low) < 0) {
			--high16;
			high16 = high16 | 0;
		}
		return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high16,low16)),this28[1]];
	}
};
thx__$DateTime_DateTime_$Impl_$.snapTo = function(this1,period) {
	switch(period[1]) {
	case 0:
		var a = thx_Int64s.divRound(this1[0],thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerSecondI64);
		var b = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerSecondI64;
		var al = a.low & 65535;
		var ah = a.low >>> 16;
		var bl = b.low & 65535;
		var bh = b.low >>> 16;
		var p00 = haxe__$Int32_Int32_$Impl_$.mul(al,bl);
		var p10 = haxe__$Int32_Int32_$Impl_$.mul(ah,bl);
		var p01 = haxe__$Int32_Int32_$Impl_$.mul(al,bh);
		var p11 = haxe__$Int32_Int32_$Impl_$.mul(ah,bh);
		var low = p00;
		var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
		p01 = p01 << 16;
		low = p00 + p01 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
			++high;
			high = high | 0;
		}
		p10 = p10 << 16;
		low = low + p10 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
			++high;
			high = high | 0;
		}
		high = high + (haxe__$Int32_Int32_$Impl_$.mul(a.low,b.high) + haxe__$Int32_Int32_$Impl_$.mul(a.high,b.low) | 0) | 0;
		return [new haxe__$Int64__$_$_$Int64(high,low),this1[1]];
	case 1:
		var a1 = thx_Int64s.divRound(this1[0],thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMinuteI64);
		var b1 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMinuteI64;
		var al1 = a1.low & 65535;
		var ah1 = a1.low >>> 16;
		var bl1 = b1.low & 65535;
		var bh1 = b1.low >>> 16;
		var p001 = haxe__$Int32_Int32_$Impl_$.mul(al1,bl1);
		var p101 = haxe__$Int32_Int32_$Impl_$.mul(ah1,bl1);
		var p011 = haxe__$Int32_Int32_$Impl_$.mul(al1,bh1);
		var p111 = haxe__$Int32_Int32_$Impl_$.mul(ah1,bh1);
		var low1 = p001;
		var high1 = (p111 + (p011 >>> 16) | 0) + (p101 >>> 16) | 0;
		p011 = p011 << 16;
		low1 = p001 + p011 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,p011) < 0) {
			++high1;
			high1 = high1 | 0;
		}
		p101 = p101 << 16;
		low1 = low1 + p101 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,p101) < 0) {
			++high1;
			high1 = high1 | 0;
		}
		high1 = high1 + (haxe__$Int32_Int32_$Impl_$.mul(a1.low,b1.high) + haxe__$Int32_Int32_$Impl_$.mul(a1.high,b1.low) | 0) | 0;
		return [new haxe__$Int64__$_$_$Int64(high1,low1),this1[1]];
	case 2:
		var a2 = thx_Int64s.divRound(this1[0],thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerHourI64);
		var b2 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerHourI64;
		var al2 = a2.low & 65535;
		var ah2 = a2.low >>> 16;
		var bl2 = b2.low & 65535;
		var bh2 = b2.low >>> 16;
		var p002 = haxe__$Int32_Int32_$Impl_$.mul(al2,bl2);
		var p102 = haxe__$Int32_Int32_$Impl_$.mul(ah2,bl2);
		var p012 = haxe__$Int32_Int32_$Impl_$.mul(al2,bh2);
		var p112 = haxe__$Int32_Int32_$Impl_$.mul(ah2,bh2);
		var low2 = p002;
		var high2 = (p112 + (p012 >>> 16) | 0) + (p102 >>> 16) | 0;
		p012 = p012 << 16;
		low2 = p002 + p012 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,p012) < 0) {
			++high2;
			high2 = high2 | 0;
		}
		p102 = p102 << 16;
		low2 = low2 + p102 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,p102) < 0) {
			++high2;
			high2 = high2 | 0;
		}
		high2 = high2 + (haxe__$Int32_Int32_$Impl_$.mul(a2.low,b2.high) + haxe__$Int32_Int32_$Impl_$.mul(a2.high,b2.low) | 0) | 0;
		return [new haxe__$Int64__$_$_$Int64(high2,low2),this1[1]];
	case 3:
		var mod;
		var this2 = this1[0];
		var this3 = this1[1];
		var high3 = this2.high + this3.high | 0;
		var low3 = this2.low + this3.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low3,this2.low) < 0) {
			++high3;
			high3 = high3 | 0;
		}
		if(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_hour(new haxe__$Int64__$_$_$Int64(high3,low3)) >= 12) {
			mod = 1;
		} else {
			mod = 0;
		}
		var this4 = this1[0];
		var this5 = this1[1];
		var high4 = this4.high + this5.high | 0;
		var low4 = this4.low + this5.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low4,this4.low) < 0) {
			++high4;
			high4 = high4 | 0;
		}
		var year = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high4,low4),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR);
		var this6 = this1[0];
		var this7 = this1[1];
		var high5 = this6.high + this7.high | 0;
		var low5 = this6.low + this7.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low5,this6.low) < 0) {
			++high5;
			high5 = high5 | 0;
		}
		var month = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high5,low5),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH);
		var this8 = this1[0];
		var this9 = this1[1];
		var high6 = this8.high + this9.high | 0;
		var low6 = this8.low + this9.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low6,this8.low) < 0) {
			++high6;
			high6 = high6 | 0;
		}
		var day = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high6,low6),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY) + mod;
		var offset = this1[1];
		var this10 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(year,month,day,0,0,0,0),offset];
		var this11 = this10[0];
		var b3 = offset;
		var high7 = this11.high - b3.high | 0;
		var low7 = this11.low - b3.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(this11.low,b3.low) < 0) {
			--high7;
			high7 = high7 | 0;
		}
		return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high7,low7)),this10[1]];
	case 4:
		var this12 = this1[0];
		var this13 = this1[1];
		var high8 = this12.high + this13.high | 0;
		var low8 = this12.low + this13.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low8,this12.low) < 0) {
			++high8;
			high8 = high8 | 0;
		}
		var wd = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_dayOfWeek(new haxe__$Int64__$_$_$Int64(high8,low8));
		var mod1;
		if(wd < 3) {
			mod1 = -wd;
		} else if(wd > 3) {
			mod1 = 7 - wd;
		} else {
			var this14 = this1[0];
			var this15 = this1[1];
			var high9 = this14.high + this15.high | 0;
			var low9 = this14.low + this15.low | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(low9,this14.low) < 0) {
				++high9;
				high9 = high9 | 0;
			}
			if(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_hour(new haxe__$Int64__$_$_$Int64(high9,low9)) < 12) {
				mod1 = -wd;
			} else {
				mod1 = 7 - wd;
			}
		}
		var this16 = this1[0];
		var this17 = this1[1];
		var high10 = this16.high + this17.high | 0;
		var low10 = this16.low + this17.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low10,this16.low) < 0) {
			++high10;
			high10 = high10 | 0;
		}
		var year1 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high10,low10),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR);
		var this18 = this1[0];
		var this19 = this1[1];
		var high11 = this18.high + this19.high | 0;
		var low11 = this18.low + this19.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low11,this18.low) < 0) {
			++high11;
			high11 = high11 | 0;
		}
		var month1 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high11,low11),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH);
		var this20 = this1[0];
		var this21 = this1[1];
		var high12 = this20.high + this21.high | 0;
		var low12 = this20.low + this21.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low12,this20.low) < 0) {
			++high12;
			high12 = high12 | 0;
		}
		var day1 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high12,low12),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY) + mod1;
		var offset1 = this1[1];
		var this22 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(year1,month1,day1,0,0,0,0),offset1];
		var this23 = this22[0];
		var b4 = offset1;
		var high13 = this23.high - b4.high | 0;
		var low13 = this23.low - b4.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(this23.low,b4.low) < 0) {
			--high13;
			high13 = high13 | 0;
		}
		return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high13,low13)),this22[1]];
	case 5:
		var mod2;
		var this24 = this1[0];
		var this25 = this1[1];
		var high14 = this24.high + this25.high | 0;
		var low14 = this24.low + this25.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low14,this24.low) < 0) {
			++high14;
			high14 = high14 | 0;
		}
		var tmp = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high14,low14),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY);
		var this26 = this1[0];
		var this27 = this1[1];
		var high15 = this26.high + this27.high | 0;
		var low15 = this26.low + this27.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low15,this26.low) < 0) {
			++high15;
			high15 = high15 | 0;
		}
		var tmp1 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high15,low15),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR);
		var this28 = this1[0];
		var this29 = this1[1];
		var high16 = this28.high + this29.high | 0;
		var low16 = this28.low + this29.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low16,this28.low) < 0) {
			++high16;
			high16 = high16 | 0;
		}
		if(tmp > Math.round(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysInMonth(tmp1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high16,low16),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH)) / 2)) {
			mod2 = 1;
		} else {
			mod2 = 0;
		}
		var this30 = this1[0];
		var this31 = this1[1];
		var high17 = this30.high + this31.high | 0;
		var low17 = this30.low + this31.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low17,this30.low) < 0) {
			++high17;
			high17 = high17 | 0;
		}
		var year2 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high17,low17),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR);
		var this32 = this1[0];
		var this33 = this1[1];
		var high18 = this32.high + this33.high | 0;
		var low18 = this32.low + this33.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low18,this32.low) < 0) {
			++high18;
			high18 = high18 | 0;
		}
		var month2 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high18,low18),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH) + mod2;
		var offset2 = this1[1];
		var this34 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(year2,month2,1,0,0,0,0),offset2];
		var this35 = this34[0];
		var b5 = offset2;
		var high19 = this35.high - b5.high | 0;
		var low19 = this35.low - b5.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(this35.low,b5.low) < 0) {
			--high19;
			high19 = high19 | 0;
		}
		return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high19,low19)),this34[1]];
	case 6:
		var this36 = this1[0];
		var this37 = this1[1];
		var high20 = this36.high + this37.high | 0;
		var low20 = this36.low + this37.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low20,this36.low) < 0) {
			++high20;
			high20 = high20 | 0;
		}
		var year3 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high20,low20),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR);
		var offset3 = this1[1];
		var this38 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(year3,6,2,0,0,0,0),offset3];
		var this39 = this38[0];
		var b6 = offset3;
		var high21 = this39.high - b6.high | 0;
		var low21 = this39.low - b6.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(this39.low,b6.low) < 0) {
			--high21;
			high21 = high21 | 0;
		}
		var mod3 = thx__$DateTime_DateTime_$Impl_$.compareTo(this1,[thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high21,low21)),this38[1]]) > 0?1:0;
		var this40 = this1[0];
		var this41 = this1[1];
		var high22 = this40.high + this41.high | 0;
		var low22 = this40.low + this41.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low22,this40.low) < 0) {
			++high22;
			high22 = high22 | 0;
		}
		var year4 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high22,low22),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR) + mod3;
		var offset4 = this1[1];
		var this42 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(year4,1,1,0,0,0,0),offset4];
		var this43 = this42[0];
		var b7 = offset4;
		var high23 = this43.high - b7.high | 0;
		var low23 = this43.low - b7.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(this43.low,b7.low) < 0) {
			--high23;
			high23 = high23 | 0;
		}
		return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high23,low23)),this42[1]];
	}
};
thx__$DateTime_DateTime_$Impl_$.sameYear = function(this1,other) {
	var this2 = this1[0];
	var this3 = this1[1];
	var high = this2.high + this3.high | 0;
	var low = this2.low + this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	var tmp = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high,low),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR);
	var this4 = other[0];
	var this5 = other[1];
	var high1 = this4.high + this5.high | 0;
	var low1 = this4.low + this5.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,this4.low) < 0) {
		++high1;
		high1 = high1 | 0;
	}
	return tmp == thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high1,low1),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR);
};
thx__$DateTime_DateTime_$Impl_$.sameMonth = function(this1,other) {
	if(thx__$DateTime_DateTime_$Impl_$.sameYear(this1,other)) {
		var this2 = this1[0];
		var this3 = this1[1];
		var high = this2.high + this3.high | 0;
		var low = this2.low + this3.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
			++high;
			high = high | 0;
		}
		var tmp = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high,low),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH);
		var this4 = other[0];
		var this5 = other[1];
		var high1 = this4.high + this5.high | 0;
		var low1 = this4.low + this5.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,this4.low) < 0) {
			++high1;
			high1 = high1 | 0;
		}
		return tmp == thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high1,low1),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH);
	} else {
		return false;
	}
};
thx__$DateTime_DateTime_$Impl_$.sameDay = function(this1,other) {
	if(thx__$DateTime_DateTime_$Impl_$.sameMonth(this1,other)) {
		var this2 = this1[0];
		var this3 = this1[1];
		var high = this2.high + this3.high | 0;
		var low = this2.low + this3.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
			++high;
			high = high | 0;
		}
		var tmp = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high,low),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY);
		var this4 = other[0];
		var this5 = other[1];
		var high1 = this4.high + this5.high | 0;
		var low1 = this4.low + this5.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,this4.low) < 0) {
			++high1;
			high1 = high1 | 0;
		}
		return tmp == thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high1,low1),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY);
	} else {
		return false;
	}
};
thx__$DateTime_DateTime_$Impl_$.sameHour = function(this1,other) {
	if(thx__$DateTime_DateTime_$Impl_$.sameDay(this1,other)) {
		var this2 = this1[0];
		var this3 = this1[1];
		var high = this2.high + this3.high | 0;
		var low = this2.low + this3.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
			++high;
			high = high | 0;
		}
		var tmp = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_hour(new haxe__$Int64__$_$_$Int64(high,low));
		var this4 = other[0];
		var this5 = other[1];
		var high1 = this4.high + this5.high | 0;
		var low1 = this4.low + this5.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,this4.low) < 0) {
			++high1;
			high1 = high1 | 0;
		}
		return tmp == thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_hour(new haxe__$Int64__$_$_$Int64(high1,low1));
	} else {
		return false;
	}
};
thx__$DateTime_DateTime_$Impl_$.sameMinute = function(this1,other) {
	if(thx__$DateTime_DateTime_$Impl_$.sameHour(this1,other)) {
		var this2 = this1[0];
		var this3 = this1[1];
		var high = this2.high + this3.high | 0;
		var low = this2.low + this3.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
			++high;
			high = high | 0;
		}
		var tmp = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_minute(new haxe__$Int64__$_$_$Int64(high,low));
		var this4 = other[0];
		var this5 = other[1];
		var high1 = this4.high + this5.high | 0;
		var low1 = this4.low + this5.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,this4.low) < 0) {
			++high1;
			high1 = high1 | 0;
		}
		return tmp == thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_minute(new haxe__$Int64__$_$_$Int64(high1,low1));
	} else {
		return false;
	}
};
thx__$DateTime_DateTime_$Impl_$.sameSecond = function(this1,other) {
	if(thx__$DateTime_DateTime_$Impl_$.sameMinute(this1,other)) {
		var this2 = this1[0];
		var this3 = this1[1];
		var high = this2.high + this3.high | 0;
		var low = this2.low + this3.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
			++high;
			high = high | 0;
		}
		var tmp = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_second(new haxe__$Int64__$_$_$Int64(high,low));
		var this4 = other[0];
		var this5 = other[1];
		var high1 = this4.high + this5.high | 0;
		var low1 = this4.low + this5.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,this4.low) < 0) {
			++high1;
			high1 = high1 | 0;
		}
		return tmp == thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_second(new haxe__$Int64__$_$_$Int64(high1,low1));
	} else {
		return false;
	}
};
thx__$DateTime_DateTime_$Impl_$.withYear = function(this1,year) {
	var this2 = this1[0];
	var this3 = this1[1];
	var high = this2.high + this3.high | 0;
	var low = this2.low + this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	var month = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high,low),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH);
	var this4 = this1[0];
	var this5 = this1[1];
	var high1 = this4.high + this5.high | 0;
	var low1 = this4.low + this5.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,this4.low) < 0) {
		++high1;
		high1 = high1 | 0;
	}
	var day = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high1,low1),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY);
	var this6 = this1[0];
	var this7 = this1[1];
	var high2 = this6.high + this7.high | 0;
	var low2 = this6.low + this7.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,this6.low) < 0) {
		++high2;
		high2 = high2 | 0;
	}
	var hour = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_hour(new haxe__$Int64__$_$_$Int64(high2,low2));
	var this8 = this1[0];
	var this9 = this1[1];
	var high3 = this8.high + this9.high | 0;
	var low3 = this8.low + this9.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low3,this8.low) < 0) {
		++high3;
		high3 = high3 | 0;
	}
	var minute = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_minute(new haxe__$Int64__$_$_$Int64(high3,low3));
	var this10 = this1[0];
	var this11 = this1[1];
	var high4 = this10.high + this11.high | 0;
	var low4 = this10.low + this11.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low4,this10.low) < 0) {
		++high4;
		high4 = high4 | 0;
	}
	var second = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_second(new haxe__$Int64__$_$_$Int64(high4,low4));
	var this12 = this1[0];
	var this13 = this1[1];
	var high5 = this12.high + this13.high | 0;
	var low5 = this12.low + this13.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low5,this12.low) < 0) {
		++high5;
		high5 = high5 | 0;
	}
	var millisecond = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_millisecond(new haxe__$Int64__$_$_$Int64(high5,low5));
	var offset = this1[1];
	var this14 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(year,month,day,hour,minute,second,millisecond),offset];
	var this15 = this14[0];
	var b = offset;
	var high6 = this15.high - b.high | 0;
	var low6 = this15.low - b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(this15.low,b.low) < 0) {
		--high6;
		high6 = high6 | 0;
	}
	return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high6,low6)),this14[1]];
};
thx__$DateTime_DateTime_$Impl_$.withMonth = function(this1,month) {
	var this2 = this1[0];
	var this3 = this1[1];
	var high = this2.high + this3.high | 0;
	var low = this2.low + this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	var year = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high,low),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR);
	var this4 = this1[0];
	var this5 = this1[1];
	var high1 = this4.high + this5.high | 0;
	var low1 = this4.low + this5.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,this4.low) < 0) {
		++high1;
		high1 = high1 | 0;
	}
	var day = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high1,low1),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY);
	var this6 = this1[0];
	var this7 = this1[1];
	var high2 = this6.high + this7.high | 0;
	var low2 = this6.low + this7.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,this6.low) < 0) {
		++high2;
		high2 = high2 | 0;
	}
	var hour = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_hour(new haxe__$Int64__$_$_$Int64(high2,low2));
	var this8 = this1[0];
	var this9 = this1[1];
	var high3 = this8.high + this9.high | 0;
	var low3 = this8.low + this9.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low3,this8.low) < 0) {
		++high3;
		high3 = high3 | 0;
	}
	var minute = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_minute(new haxe__$Int64__$_$_$Int64(high3,low3));
	var this10 = this1[0];
	var this11 = this1[1];
	var high4 = this10.high + this11.high | 0;
	var low4 = this10.low + this11.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low4,this10.low) < 0) {
		++high4;
		high4 = high4 | 0;
	}
	var second = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_second(new haxe__$Int64__$_$_$Int64(high4,low4));
	var this12 = this1[0];
	var this13 = this1[1];
	var high5 = this12.high + this13.high | 0;
	var low5 = this12.low + this13.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low5,this12.low) < 0) {
		++high5;
		high5 = high5 | 0;
	}
	var millisecond = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_millisecond(new haxe__$Int64__$_$_$Int64(high5,low5));
	var offset = this1[1];
	var this14 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(year,month,day,hour,minute,second,millisecond),offset];
	var this15 = this14[0];
	var b = offset;
	var high6 = this15.high - b.high | 0;
	var low6 = this15.low - b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(this15.low,b.low) < 0) {
		--high6;
		high6 = high6 | 0;
	}
	return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high6,low6)),this14[1]];
};
thx__$DateTime_DateTime_$Impl_$.withDay = function(this1,day) {
	var this2 = this1[0];
	var this3 = this1[1];
	var high = this2.high + this3.high | 0;
	var low = this2.low + this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	var year = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high,low),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR);
	var this4 = this1[0];
	var this5 = this1[1];
	var high1 = this4.high + this5.high | 0;
	var low1 = this4.low + this5.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,this4.low) < 0) {
		++high1;
		high1 = high1 | 0;
	}
	var month = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high1,low1),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH);
	var this6 = this1[0];
	var this7 = this1[1];
	var high2 = this6.high + this7.high | 0;
	var low2 = this6.low + this7.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,this6.low) < 0) {
		++high2;
		high2 = high2 | 0;
	}
	var hour = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_hour(new haxe__$Int64__$_$_$Int64(high2,low2));
	var this8 = this1[0];
	var this9 = this1[1];
	var high3 = this8.high + this9.high | 0;
	var low3 = this8.low + this9.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low3,this8.low) < 0) {
		++high3;
		high3 = high3 | 0;
	}
	var minute = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_minute(new haxe__$Int64__$_$_$Int64(high3,low3));
	var this10 = this1[0];
	var this11 = this1[1];
	var high4 = this10.high + this11.high | 0;
	var low4 = this10.low + this11.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low4,this10.low) < 0) {
		++high4;
		high4 = high4 | 0;
	}
	var second = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_second(new haxe__$Int64__$_$_$Int64(high4,low4));
	var this12 = this1[0];
	var this13 = this1[1];
	var high5 = this12.high + this13.high | 0;
	var low5 = this12.low + this13.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low5,this12.low) < 0) {
		++high5;
		high5 = high5 | 0;
	}
	var millisecond = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_millisecond(new haxe__$Int64__$_$_$Int64(high5,low5));
	var offset = this1[1];
	var this14 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(year,month,day,hour,minute,second,millisecond),offset];
	var this15 = this14[0];
	var b = offset;
	var high6 = this15.high - b.high | 0;
	var low6 = this15.low - b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(this15.low,b.low) < 0) {
		--high6;
		high6 = high6 | 0;
	}
	return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high6,low6)),this14[1]];
};
thx__$DateTime_DateTime_$Impl_$.withHour = function(this1,hour) {
	var this2 = this1[0];
	var this3 = this1[1];
	var high = this2.high + this3.high | 0;
	var low = this2.low + this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	var year = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high,low),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR);
	var this4 = this1[0];
	var this5 = this1[1];
	var high1 = this4.high + this5.high | 0;
	var low1 = this4.low + this5.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,this4.low) < 0) {
		++high1;
		high1 = high1 | 0;
	}
	var month = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high1,low1),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH);
	var this6 = this1[0];
	var this7 = this1[1];
	var high2 = this6.high + this7.high | 0;
	var low2 = this6.low + this7.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,this6.low) < 0) {
		++high2;
		high2 = high2 | 0;
	}
	var day = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high2,low2),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY);
	var this8 = this1[0];
	var this9 = this1[1];
	var high3 = this8.high + this9.high | 0;
	var low3 = this8.low + this9.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low3,this8.low) < 0) {
		++high3;
		high3 = high3 | 0;
	}
	var minute = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_minute(new haxe__$Int64__$_$_$Int64(high3,low3));
	var this10 = this1[0];
	var this11 = this1[1];
	var high4 = this10.high + this11.high | 0;
	var low4 = this10.low + this11.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low4,this10.low) < 0) {
		++high4;
		high4 = high4 | 0;
	}
	var second = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_second(new haxe__$Int64__$_$_$Int64(high4,low4));
	var this12 = this1[0];
	var this13 = this1[1];
	var high5 = this12.high + this13.high | 0;
	var low5 = this12.low + this13.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low5,this12.low) < 0) {
		++high5;
		high5 = high5 | 0;
	}
	var millisecond = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_millisecond(new haxe__$Int64__$_$_$Int64(high5,low5));
	var offset = this1[1];
	var this14 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(year,month,day,hour,minute,second,millisecond),offset];
	var this15 = this14[0];
	var b = offset;
	var high6 = this15.high - b.high | 0;
	var low6 = this15.low - b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(this15.low,b.low) < 0) {
		--high6;
		high6 = high6 | 0;
	}
	return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high6,low6)),this14[1]];
};
thx__$DateTime_DateTime_$Impl_$.withMinute = function(this1,minute) {
	var this2 = this1[0];
	var this3 = this1[1];
	var high = this2.high + this3.high | 0;
	var low = this2.low + this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	var year = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high,low),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR);
	var this4 = this1[0];
	var this5 = this1[1];
	var high1 = this4.high + this5.high | 0;
	var low1 = this4.low + this5.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,this4.low) < 0) {
		++high1;
		high1 = high1 | 0;
	}
	var month = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high1,low1),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH);
	var this6 = this1[0];
	var this7 = this1[1];
	var high2 = this6.high + this7.high | 0;
	var low2 = this6.low + this7.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,this6.low) < 0) {
		++high2;
		high2 = high2 | 0;
	}
	var day = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high2,low2),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY);
	var this8 = this1[0];
	var this9 = this1[1];
	var high3 = this8.high + this9.high | 0;
	var low3 = this8.low + this9.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low3,this8.low) < 0) {
		++high3;
		high3 = high3 | 0;
	}
	var hour = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_hour(new haxe__$Int64__$_$_$Int64(high3,low3));
	var this10 = this1[0];
	var this11 = this1[1];
	var high4 = this10.high + this11.high | 0;
	var low4 = this10.low + this11.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low4,this10.low) < 0) {
		++high4;
		high4 = high4 | 0;
	}
	var second = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_second(new haxe__$Int64__$_$_$Int64(high4,low4));
	var this12 = this1[0];
	var this13 = this1[1];
	var high5 = this12.high + this13.high | 0;
	var low5 = this12.low + this13.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low5,this12.low) < 0) {
		++high5;
		high5 = high5 | 0;
	}
	var millisecond = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_millisecond(new haxe__$Int64__$_$_$Int64(high5,low5));
	var offset = this1[1];
	var this14 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(year,month,day,hour,minute,second,millisecond),offset];
	var this15 = this14[0];
	var b = offset;
	var high6 = this15.high - b.high | 0;
	var low6 = this15.low - b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(this15.low,b.low) < 0) {
		--high6;
		high6 = high6 | 0;
	}
	return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high6,low6)),this14[1]];
};
thx__$DateTime_DateTime_$Impl_$.withSecond = function(this1,second) {
	var this2 = this1[0];
	var this3 = this1[1];
	var high = this2.high + this3.high | 0;
	var low = this2.low + this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	var year = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high,low),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR);
	var this4 = this1[0];
	var this5 = this1[1];
	var high1 = this4.high + this5.high | 0;
	var low1 = this4.low + this5.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,this4.low) < 0) {
		++high1;
		high1 = high1 | 0;
	}
	var month = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high1,low1),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH);
	var this6 = this1[0];
	var this7 = this1[1];
	var high2 = this6.high + this7.high | 0;
	var low2 = this6.low + this7.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,this6.low) < 0) {
		++high2;
		high2 = high2 | 0;
	}
	var day = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high2,low2),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY);
	var this8 = this1[0];
	var this9 = this1[1];
	var high3 = this8.high + this9.high | 0;
	var low3 = this8.low + this9.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low3,this8.low) < 0) {
		++high3;
		high3 = high3 | 0;
	}
	var hour = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_hour(new haxe__$Int64__$_$_$Int64(high3,low3));
	var this10 = this1[0];
	var this11 = this1[1];
	var high4 = this10.high + this11.high | 0;
	var low4 = this10.low + this11.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low4,this10.low) < 0) {
		++high4;
		high4 = high4 | 0;
	}
	var minute = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_minute(new haxe__$Int64__$_$_$Int64(high4,low4));
	var this12 = this1[0];
	var this13 = this1[1];
	var high5 = this12.high + this13.high | 0;
	var low5 = this12.low + this13.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low5,this12.low) < 0) {
		++high5;
		high5 = high5 | 0;
	}
	var millisecond = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_millisecond(new haxe__$Int64__$_$_$Int64(high5,low5));
	var offset = this1[1];
	var this14 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(year,month,day,hour,minute,second,millisecond),offset];
	var this15 = this14[0];
	var b = offset;
	var high6 = this15.high - b.high | 0;
	var low6 = this15.low - b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(this15.low,b.low) < 0) {
		--high6;
		high6 = high6 | 0;
	}
	return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high6,low6)),this14[1]];
};
thx__$DateTime_DateTime_$Impl_$.withMillisecond = function(this1,millisecond) {
	var this2 = this1[0];
	var this3 = this1[1];
	var high = this2.high + this3.high | 0;
	var low = this2.low + this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	var year = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high,low),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR);
	var this4 = this1[0];
	var this5 = this1[1];
	var high1 = this4.high + this5.high | 0;
	var low1 = this4.low + this5.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,this4.low) < 0) {
		++high1;
		high1 = high1 | 0;
	}
	var month = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high1,low1),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH);
	var this6 = this1[0];
	var this7 = this1[1];
	var high2 = this6.high + this7.high | 0;
	var low2 = this6.low + this7.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,this6.low) < 0) {
		++high2;
		high2 = high2 | 0;
	}
	var day = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high2,low2),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY);
	var this8 = this1[0];
	var this9 = this1[1];
	var high3 = this8.high + this9.high | 0;
	var low3 = this8.low + this9.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low3,this8.low) < 0) {
		++high3;
		high3 = high3 | 0;
	}
	var hour = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_hour(new haxe__$Int64__$_$_$Int64(high3,low3));
	var this10 = this1[0];
	var this11 = this1[1];
	var high4 = this10.high + this11.high | 0;
	var low4 = this10.low + this11.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low4,this10.low) < 0) {
		++high4;
		high4 = high4 | 0;
	}
	var minute = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_minute(new haxe__$Int64__$_$_$Int64(high4,low4));
	var this12 = this1[0];
	var this13 = this1[1];
	var high5 = this12.high + this13.high | 0;
	var low5 = this12.low + this13.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low5,this12.low) < 0) {
		++high5;
		high5 = high5 | 0;
	}
	var second = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_second(new haxe__$Int64__$_$_$Int64(high5,low5));
	var offset = this1[1];
	var this14 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(year,month,day,hour,minute,second,millisecond),offset];
	var this15 = this14[0];
	var b = offset;
	var high6 = this15.high - b.high | 0;
	var low6 = this15.low - b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(this15.low,b.low) < 0) {
		--high6;
		high6 = high6 | 0;
	}
	return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high6,low6)),this14[1]];
};
thx__$DateTime_DateTime_$Impl_$.withOffset = function(this1,offset) {
	return [this1[0],offset];
};
thx__$DateTime_DateTime_$Impl_$.add = function(this1,time) {
	var this2 = this1[0];
	var b = time;
	var high = this2.high + b.high | 0;
	var low = this2.low + b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high,low)),this1[1]];
};
thx__$DateTime_DateTime_$Impl_$.addTicks = function(this1,ticks) {
	var this2 = this1[0];
	var high = this2.high + ticks.high | 0;
	var low = this2.low + ticks.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high,low)),this1[1]];
};
thx__$DateTime_DateTime_$Impl_$.subtract = function(this1,time) {
	var this2 = this1[0];
	var b = time;
	var high = this2.high - b.high | 0;
	var low = this2.low - b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(this2.low,b.low) < 0) {
		--high;
		high = high | 0;
	}
	return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high,low)),this1[1]];
};
thx__$DateTime_DateTime_$Impl_$.subtractDate = function(this1,date) {
	var this2 = this1[0];
	var this3 = date[0];
	var high = this2.high + this3.high | 0;
	var low = this2.low + this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high,low)),this1[1]][0];
};
thx__$DateTime_DateTime_$Impl_$.addDays = function(this1,days) {
	return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addScaled(this1[0],days,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.millisPerDay),this1[1]];
};
thx__$DateTime_DateTime_$Impl_$.addHours = function(this1,hours) {
	return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addScaled(this1[0],hours,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.millisPerHour),this1[1]];
};
thx__$DateTime_DateTime_$Impl_$.addMilliseconds = function(this1,milliseconds) {
	return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addScaled(this1[0],milliseconds,1),this1[1]];
};
thx__$DateTime_DateTime_$Impl_$.addMinutes = function(this1,minutes) {
	return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addScaled(this1[0],minutes,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.millisPerMinute),this1[1]];
};
thx__$DateTime_DateTime_$Impl_$.addMonths = function(this1,months) {
	return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addMonths(this1[0],months),this1[1]];
};
thx__$DateTime_DateTime_$Impl_$.addSeconds = function(this1,seconds) {
	return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addScaled(this1[0],seconds,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.millisPerSecond),this1[1]];
};
thx__$DateTime_DateTime_$Impl_$.addYears = function(this1,years) {
	return [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addMonths(this1[0],years * 12),this1[1]];
};
thx__$DateTime_DateTime_$Impl_$.compareTo = function(this1,other) {
	if(null == other && this1 == null) {
		return 0;
	}
	if(null == this1) {
		return -1;
	} else if(null == other) {
		return 1;
	}
	return thx_Int64s.compare(this1[0],other[0]);
};
thx__$DateTime_DateTime_$Impl_$.equalsTo = function(this1,that) {
	var this2 = this1[0];
	var this3 = that[0];
	if(this2.high == this3.high) {
		return this2.low == this3.low;
	} else {
		return false;
	}
};
thx__$DateTime_DateTime_$Impl_$.equals = function(self,that) {
	var this1 = self[0];
	var this2 = that[0];
	if(this1.high == this2.high) {
		return this1.low == this2.low;
	} else {
		return false;
	}
};
thx__$DateTime_DateTime_$Impl_$.notEqualsTo = function(this1,that) {
	var this2 = this1[0];
	var this3 = that[0];
	if(!(this2.high != this3.high)) {
		return this2.low != this3.low;
	} else {
		return true;
	}
};
thx__$DateTime_DateTime_$Impl_$.notEquals = function(self,that) {
	var this1 = self[0];
	var this2 = that[0];
	if(!(this1.high != this2.high)) {
		return this1.low != this2.low;
	} else {
		return true;
	}
};
thx__$DateTime_DateTime_$Impl_$.nearEqualsTo = function(this1,other,span) {
	var this2 = other[0];
	var this3 = this1[0];
	var high = this2.high - this3.high | 0;
	var low = this2.low - this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(this2.low,this3.low) < 0) {
		--high;
		high = high | 0;
	}
	var ticks = thx_Int64s.abs(new haxe__$Int64__$_$_$Int64(high,low));
	var this4 = thx__$Time_Time_$Impl_$.abs(span);
	var v = ticks.high - this4.high | 0;
	if(v != 0) {
		v = v;
	} else {
		v = haxe__$Int32_Int32_$Impl_$.ucompare(ticks.low,this4.low);
	}
	return (ticks.high < 0?this4.high < 0?v:-1:this4.high >= 0?v:1) <= 0;
};
thx__$DateTime_DateTime_$Impl_$.greaterThan = function(this1,that) {
	return thx__$DateTime_DateTime_$Impl_$.compareTo(this1,that) > 0;
};
thx__$DateTime_DateTime_$Impl_$.greater = function(self,that) {
	return thx__$DateTime_DateTime_$Impl_$.compareTo(self,that) > 0;
};
thx__$DateTime_DateTime_$Impl_$.greaterEqualsTo = function(this1,that) {
	return thx__$DateTime_DateTime_$Impl_$.compareTo(this1,that) >= 0;
};
thx__$DateTime_DateTime_$Impl_$.greaterEquals = function(self,that) {
	return thx__$DateTime_DateTime_$Impl_$.compareTo(self,that) >= 0;
};
thx__$DateTime_DateTime_$Impl_$.lessTo = function(this1,that) {
	return thx__$DateTime_DateTime_$Impl_$.compareTo(this1,that) < 0;
};
thx__$DateTime_DateTime_$Impl_$.less = function(self,that) {
	return thx__$DateTime_DateTime_$Impl_$.compareTo(self,that) < 0;
};
thx__$DateTime_DateTime_$Impl_$.lessEqualsTo = function(this1,that) {
	return thx__$DateTime_DateTime_$Impl_$.compareTo(this1,that) <= 0;
};
thx__$DateTime_DateTime_$Impl_$.lessEquals = function(self,that) {
	return thx__$DateTime_DateTime_$Impl_$.compareTo(self,that) <= 0;
};
thx__$DateTime_DateTime_$Impl_$.changeOffset = function(this1,newoffset) {
	var this2 = this1[0];
	var this3 = this1[1];
	var high = this2.high + this3.high | 0;
	var low = this2.low + this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	var ticks = new haxe__$Int64__$_$_$Int64(high,low);
	var b = newoffset;
	var high1 = ticks.high - b.high | 0;
	var low1 = ticks.low - b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(ticks.low,b.low) < 0) {
		--high1;
		high1 = high1 | 0;
	}
	return [new haxe__$Int64__$_$_$Int64(high1,low1),newoffset];
};
thx__$DateTime_DateTime_$Impl_$.toUtc = function(this1) {
	return this1[0];
};
thx__$DateTime_DateTime_$Impl_$.clockDateTime = function(this1) {
	var this2 = this1[0];
	var this3 = this1[1];
	var high = this2.high + this3.high | 0;
	var low = this2.low + this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	return new haxe__$Int64__$_$_$Int64(high,low);
};
thx__$DateTime_DateTime_$Impl_$.toString = function(this1) {
	if(null == this1) {
		return "";
	}
	var abs = [thx_Int64s.abs(this1[0]),this1[1]];
	var decimals;
	var this2 = abs[0];
	var this3 = abs[1];
	var high = this2.high + this3.high | 0;
	var low = this2.low + this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	if(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_tickInSecond(new haxe__$Int64__$_$_$Int64(high,low)) != 0) {
		var this4 = abs[0];
		var this5 = abs[1];
		var high1 = this4.high + this5.high | 0;
		var low1 = this4.low + this5.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,this4.low) < 0) {
			++high1;
			high1 = high1 | 0;
		}
		decimals = "." + thx_Strings.trimCharsRight(thx_Ints.lpad(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_tickInSecond(new haxe__$Int64__$_$_$Int64(high1,low1)),"0",7),")");
	} else {
		decimals = "";
	}
	var this6 = this1[0];
	var b = thx_Int64s.zero;
	var v = this6.high - b.high | 0;
	if(v != 0) {
		v = v;
	} else {
		v = haxe__$Int32_Int32_$Impl_$.ucompare(this6.low,b.low);
	}
	var tmp = (this6.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) < 0?"-":"";
	var this7 = abs[0];
	var this8 = abs[1];
	var high2 = this7.high + this8.high | 0;
	var low2 = this7.low + this8.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,this7.low) < 0) {
		++high2;
		high2 = high2 | 0;
	}
	var tmp1 = "" + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high2,low2),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR) + "-";
	var this9 = abs[0];
	var this10 = abs[1];
	var high3 = this9.high + this10.high | 0;
	var low3 = this9.low + this10.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low3,this9.low) < 0) {
		++high3;
		high3 = high3 | 0;
	}
	var tmp2 = tmp1 + thx_Ints.lpad(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high3,low3),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH),"0",2) + "-";
	var this11 = abs[0];
	var this12 = abs[1];
	var high4 = this11.high + this12.high | 0;
	var low4 = this11.low + this12.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low4,this11.low) < 0) {
		++high4;
		high4 = high4 | 0;
	}
	var tmp3 = tmp2 + thx_Ints.lpad(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high4,low4),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY),"0",2) + "T";
	var this13 = abs[0];
	var this14 = abs[1];
	var high5 = this13.high + this14.high | 0;
	var low5 = this13.low + this14.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low5,this13.low) < 0) {
		++high5;
		high5 = high5 | 0;
	}
	var tmp4 = tmp3 + thx_Ints.lpad(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_hour(new haxe__$Int64__$_$_$Int64(high5,low5)),"0",2) + ":";
	var this15 = abs[0];
	var this16 = abs[1];
	var high6 = this15.high + this16.high | 0;
	var low6 = this15.low + this16.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low6,this15.low) < 0) {
		++high6;
		high6 = high6 | 0;
	}
	var tmp5 = tmp4 + thx_Ints.lpad(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_minute(new haxe__$Int64__$_$_$Int64(high6,low6)),"0",2) + ":";
	var this17 = abs[0];
	var this18 = abs[1];
	var high7 = this17.high + this18.high | 0;
	var low7 = this17.low + this18.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low7,this17.low) < 0) {
		++high7;
		high7 = high7 | 0;
	}
	return tmp + (tmp5 + thx_Ints.lpad(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_second(new haxe__$Int64__$_$_$Int64(high7,low7)),"0",2) + decimals + thx__$Time_Time_$Impl_$.toGmtString(this1[1]));
};
thx__$DateTime_DateTime_$Impl_$.get_utc = function(this1) {
	return this1[0];
};
thx__$DateTime_DateTime_$Impl_$.get_offset = function(this1) {
	return this1[1];
};
thx__$DateTime_DateTime_$Impl_$.get_year = function(this1) {
	var this2 = this1[0];
	var this3 = this1[1];
	var high = this2.high + this3.high | 0;
	var low = this2.low + this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high,low),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR);
};
thx__$DateTime_DateTime_$Impl_$.get_month = function(this1) {
	var this2 = this1[0];
	var this3 = this1[1];
	var high = this2.high + this3.high | 0;
	var low = this2.low + this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high,low),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH);
};
thx__$DateTime_DateTime_$Impl_$.get_day = function(this1) {
	var this2 = this1[0];
	var this3 = this1[1];
	var high = this2.high + this3.high | 0;
	var low = this2.low + this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high,low),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY);
};
thx__$DateTime_DateTime_$Impl_$.get_hour = function(this1) {
	var this2 = this1[0];
	var this3 = this1[1];
	var high = this2.high + this3.high | 0;
	var low = this2.low + this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_hour(new haxe__$Int64__$_$_$Int64(high,low));
};
thx__$DateTime_DateTime_$Impl_$.get_minute = function(this1) {
	var this2 = this1[0];
	var this3 = this1[1];
	var high = this2.high + this3.high | 0;
	var low = this2.low + this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_minute(new haxe__$Int64__$_$_$Int64(high,low));
};
thx__$DateTime_DateTime_$Impl_$.get_dayOfWeek = function(this1) {
	var this2 = this1[0];
	var this3 = this1[1];
	var high = this2.high + this3.high | 0;
	var low = this2.low + this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_dayOfWeek(new haxe__$Int64__$_$_$Int64(high,low));
};
thx__$DateTime_DateTime_$Impl_$.get_dayOfYear = function(this1) {
	var this2 = this1[0];
	var this3 = this1[1];
	var high = this2.high + this3.high | 0;
	var low = this2.low + this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high,low),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY_OF_YEAR);
};
thx__$DateTime_DateTime_$Impl_$.get_millisecond = function(this1) {
	var this2 = this1[0];
	var this3 = this1[1];
	var high = this2.high + this3.high | 0;
	var low = this2.low + this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_millisecond(new haxe__$Int64__$_$_$Int64(high,low));
};
thx__$DateTime_DateTime_$Impl_$.get_microsecond = function(this1) {
	var this2 = this1[0];
	var this3 = this1[1];
	var high = this2.high + this3.high | 0;
	var low = this2.low + this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_microsecond(new haxe__$Int64__$_$_$Int64(high,low));
};
thx__$DateTime_DateTime_$Impl_$.get_tickInSecond = function(this1) {
	var this2 = this1[0];
	var this3 = this1[1];
	var high = this2.high + this3.high | 0;
	var low = this2.low + this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_tickInSecond(new haxe__$Int64__$_$_$Int64(high,low));
};
thx__$DateTime_DateTime_$Impl_$.get_second = function(this1) {
	var this2 = this1[0];
	var this3 = this1[1];
	var high = this2.high + this3.high | 0;
	var low = this2.low + this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_second(new haxe__$Int64__$_$_$Int64(high,low));
};
thx__$DateTime_DateTime_$Impl_$.get_timeOfDay = function(this1) {
	var this2 = this1[0];
	var this3 = this1[1];
	var high = this2.high + this3.high | 0;
	var low = this2.low + this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	return haxe__$Int64_Int64_$Impl_$.divMod(new haxe__$Int64__$_$_$Int64(high,low),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerDayI64).modulus;
};
thx__$DateTime_DateTime_$Impl_$.get_isInLeapYear = function(this1) {
	var this2 = this1[0];
	var this3 = this1[1];
	var high = this2.high + this3.high | 0;
	var low = this2.low + this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.isLeapYear(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high,low),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR));
};
thx__$DateTime_DateTime_$Impl_$.get_monthDays = function(this1) {
	var this2 = this1[0];
	var this3 = this1[1];
	var high = this2.high + this3.high | 0;
	var low = this2.low + this3.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
		++high;
		high = high | 0;
	}
	var tmp = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high,low),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR);
	var this4 = this1[0];
	var this5 = this1[1];
	var high1 = this4.high + this5.high | 0;
	var low1 = this4.low + this5.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,this4.low) < 0) {
		++high1;
		high1 = high1 | 0;
	}
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysInMonth(tmp,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high1,low1),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH));
};
thx__$DateTime_DateTime_$Impl_$.self = function(this1) {
	return this1;
};
var thx__$DateTimeUtc_DateTimeUtc_$Impl_$ = {};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.__name__ = ["thx","_DateTimeUtc","DateTimeUtc_Impl_"];
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.now = function() {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromDate(new Date());
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64 = function(ticks) {
	return ticks;
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromDate = function(date) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromTime(date.getTime());
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromTime = function(timestamp) {
	var a = thx_Int64s.fromFloat(timestamp);
	var b = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMillisecondI64;
	var al = a.low & 65535;
	var ah = a.low >>> 16;
	var bl = b.low & 65535;
	var bh = b.low >>> 16;
	var p00 = haxe__$Int32_Int32_$Impl_$.mul(al,bl);
	var p10 = haxe__$Int32_Int32_$Impl_$.mul(ah,bl);
	var p01 = haxe__$Int32_Int32_$Impl_$.mul(al,bh);
	var p11 = haxe__$Int32_Int32_$Impl_$.mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 = p01 << 16;
	low = p00 + p01 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
		++high;
		high = high | 0;
	}
	p10 = p10 << 16;
	low = low + p10 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
		++high;
		high = high | 0;
	}
	high = high + (haxe__$Int32_Int32_$Impl_$.mul(a.low,b.high) + haxe__$Int32_Int32_$Impl_$.mul(a.high,b.low) | 0) | 0;
	var a1 = new haxe__$Int64__$_$_$Int64(high,low);
	var b1 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.unixEpochTicks;
	var high1 = a1.high + b1.high | 0;
	var low1 = a1.low + b1.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,a1.low) < 0) {
		++high1;
		high1 = high1 | 0;
	}
	return new haxe__$Int64__$_$_$Int64(high1,low1);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString = function(s) {
	return thx__$DateTime_DateTime_$Impl_$.fromString(s)[0];
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.compare = function(a,b) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.compareTo(a,b);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create = function(year,month,day,hour,minute,second,millisecond) {
	if(millisecond == null) {
		millisecond = 0;
	}
	if(second == null) {
		second = 0;
	}
	if(minute == null) {
		minute = 0;
	}
	if(hour == null) {
		hour = 0;
	}
	second += Math.floor(millisecond / 1000);
	millisecond %= 1000;
	if(millisecond < 0) {
		millisecond += 1000;
	}
	var a = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.dateToTicks(year,month,day);
	var b = thx__$Time_Time_$Impl_$.timeToTicks(hour,minute,second);
	var high = a.high + b.high | 0;
	var low = a.low + b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,a.low) < 0) {
		++high;
		high = high | 0;
	}
	var a1 = new haxe__$Int64__$_$_$Int64(high,low);
	var a2 = new haxe__$Int64__$_$_$Int64(millisecond >> 31,millisecond);
	var b1 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMillisecondI64;
	var al = a2.low & 65535;
	var ah = a2.low >>> 16;
	var bl = b1.low & 65535;
	var bh = b1.low >>> 16;
	var p00 = haxe__$Int32_Int32_$Impl_$.mul(al,bl);
	var p10 = haxe__$Int32_Int32_$Impl_$.mul(ah,bl);
	var p01 = haxe__$Int32_Int32_$Impl_$.mul(al,bh);
	var p11 = haxe__$Int32_Int32_$Impl_$.mul(ah,bh);
	var low1 = p00;
	var high1 = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 = p01 << 16;
	low1 = p00 + p01 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,p01) < 0) {
		++high1;
		high1 = high1 | 0;
	}
	p10 = p10 << 16;
	low1 = low1 + p10 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,p10) < 0) {
		++high1;
		high1 = high1 | 0;
	}
	high1 = high1 + (haxe__$Int32_Int32_$Impl_$.mul(a2.low,b1.high) + haxe__$Int32_Int32_$Impl_$.mul(a2.high,b1.low) | 0) | 0;
	var b2 = new haxe__$Int64__$_$_$Int64(high1,low1);
	var high2 = a1.high + b2.high | 0;
	var low2 = a1.low + b2.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,a1.low) < 0) {
		++high2;
		high2 = high2 | 0;
	}
	return new haxe__$Int64__$_$_$Int64(high2,low2);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.isLeapYear = function(year) {
	if(year % 4 == 0) {
		if(year % 100 == 0) {
			return year % 400 == 0;
		} else {
			return true;
		}
	} else {
		return false;
	}
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.dateToTicks = function(year,month,day) {
	var fixMonthYear = function() {
		if(month == 0) {
			--year;
			month = 12;
		} else if(month < 0) {
			month = -month;
			var years = Math.ceil(month / 12);
			year -= years;
			month = years * 12 - month;
		} else if(month > 12) {
			var years1 = Math.floor(month / 12);
			year += years1;
			month -= years1 * 12;
		}
	};
	while(day < 0) {
		--month;
		fixMonthYear();
		day += thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysInMonth(year,month);
	}
	fixMonthYear();
	var days;
	while(true) {
		days = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysInMonth(year,month);
		if(!(day > days)) {
			break;
		}
		++month;
		fixMonthYear();
		day -= days;
	}
	if(day == 0) {
		--month;
		fixMonthYear();
		day = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysInMonth(year,month);
	}
	fixMonthYear();
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.rawDateToTicks(year,month,day);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.rawDateToTicks = function(year,month,day) {
	var days = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.isLeapYear(year)?thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysToMonth366:thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysToMonth365;
	if(day >= 1 && day <= days[month] - days[month - 1]) {
		var y = year - 1;
		var n = y * 365 + (y / 4 | 0) - (y / 100 | 0) + (y / 400 | 0) + days[month - 1] + day - 1;
		var a = new haxe__$Int64__$_$_$Int64(n >> 31,n);
		var b = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerDayI64;
		var al = a.low & 65535;
		var ah = a.low >>> 16;
		var bl = b.low & 65535;
		var bh = b.low >>> 16;
		var p00 = haxe__$Int32_Int32_$Impl_$.mul(al,bl);
		var p10 = haxe__$Int32_Int32_$Impl_$.mul(ah,bl);
		var p01 = haxe__$Int32_Int32_$Impl_$.mul(al,bh);
		var p11 = haxe__$Int32_Int32_$Impl_$.mul(ah,bh);
		var low = p00;
		var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
		p01 = p01 << 16;
		low = p00 + p01 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
			++high;
			high = high | 0;
		}
		p10 = p10 << 16;
		low = low + p10 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
			++high;
			high = high | 0;
		}
		high = high + (haxe__$Int32_Int32_$Impl_$.mul(a.low,b.high) + haxe__$Int32_Int32_$Impl_$.mul(a.high,b.low) | 0) | 0;
		return new haxe__$Int64__$_$_$Int64(high,low);
	}
	throw new thx_Error("bad year/month/day " + year + "/" + month + "/" + day,null,{ fileName : "DateTimeUtc.hx", lineNumber : 167, className : "thx._DateTimeUtc.DateTimeUtc_Impl_", methodName : "rawDateToTicks"});
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysInMonth = function(year,month) {
	var days = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.isLeapYear(year)?thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysToMonth366:thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysToMonth365;
	return days[month] - days[month - 1];
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysRange = function(start,end) {
	var a = end;
	var b = start;
	var v = a.high - b.high | 0;
	if(v != 0) {
		v = v;
	} else {
		v = haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
	}
	if((a.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) < 0) {
		return [];
	}
	var days = [];
	while(!thx__$DateTimeUtc_DateTimeUtc_$Impl_$.sameDay(start,end)) {
		days.push(start);
		start = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.jump(start,thx_TimePeriod.Day,1);
	}
	days.push(end);
	return days;
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart = function(this1,part) {
	var x = haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerDayI64).quotient;
	if(x.high != x.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	var n = x.low;
	var y400 = n / thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysPer400Years | 0;
	n -= y400 * thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysPer400Years;
	var y100 = n / thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysPer100Years | 0;
	if(y100 == 4) {
		y100 = 3;
	}
	n -= y100 * thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysPer100Years;
	var y4 = n / thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysPer4Years | 0;
	n -= y4 * thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysPer4Years;
	var y1 = n / thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysPerYear | 0;
	if(y1 == 4) {
		y1 = 3;
	}
	if(part == thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR) {
		return y400 * 400 + y100 * 100 + y4 * 4 + y1 + 1;
	}
	n -= y1 * thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysPerYear;
	if(part == thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY_OF_YEAR) {
		return n + 1;
	}
	var days = y1 == 3 && (y4 != 24 || y100 == 3)?thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysToMonth366:thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysToMonth365;
	var m = n >> 6;
	while(n >= days[m]) ++m;
	if(part == thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH) {
		return m;
	}
	return n - days[m - 1] + 1;
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$._new = function(ticks) {
	return ticks;
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.min = function(this1,other) {
	if(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.compareTo(this1,other) <= 0) {
		return this1;
	} else {
		return other;
	}
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.max = function(this1,other) {
	if(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.compareTo(this1,other) >= 0) {
		return this1;
	} else {
		return other;
	}
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.jump = function(this1,period,amount) {
	var sec = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_second(this1);
	var min = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_minute(this1);
	var hr = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_hour(this1);
	var day = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY);
	var mon = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH);
	var yr = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR);
	switch(period[1]) {
	case 0:
		sec += amount;
		break;
	case 1:
		min += amount;
		break;
	case 2:
		hr += amount;
		break;
	case 3:
		day += amount;
		break;
	case 4:
		day += amount * 7;
		break;
	case 5:
		mon += amount;
		break;
	case 6:
		yr += amount;
		break;
	}
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(yr,mon,day,hr,min,sec,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_millisecond(this1));
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysInThisMonth = function(this1) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysInMonth(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH));
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.prevYear = function(this1) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.jump(this1,thx_TimePeriod.Year,-1);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.nextYear = function(this1) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.jump(this1,thx_TimePeriod.Year,1);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.prevMonth = function(this1) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.jump(this1,thx_TimePeriod.Month,-1);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.nextMonth = function(this1) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.jump(this1,thx_TimePeriod.Month,1);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.prevWeek = function(this1) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.jump(this1,thx_TimePeriod.Week,-1);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.nextWeek = function(this1) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.jump(this1,thx_TimePeriod.Week,1);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.prevDay = function(this1) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.jump(this1,thx_TimePeriod.Day,-1);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.nextDay = function(this1) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.jump(this1,thx_TimePeriod.Day,1);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.prevHour = function(this1) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.jump(this1,thx_TimePeriod.Hour,-1);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.nextHour = function(this1) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.jump(this1,thx_TimePeriod.Hour,1);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.prevMinute = function(this1) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.jump(this1,thx_TimePeriod.Minute,-1);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.nextMinute = function(this1) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.jump(this1,thx_TimePeriod.Minute,1);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.prevSecond = function(this1) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.jump(this1,thx_TimePeriod.Second,-1);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.nextSecond = function(this1) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.jump(this1,thx_TimePeriod.Second,1);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.snapToWeekDay = function(this1,weekday,firstDayOfWk) {
	if(firstDayOfWk == null) {
		firstDayOfWk = 0;
	}
	var d = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_dayOfWeek(this1);
	var s = weekday;
	if(s < firstDayOfWk) {
		s += 7;
	}
	if(d < firstDayOfWk) {
		d += 7;
	}
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.jump(this1,thx_TimePeriod.Day,s - d);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.snapNextWeekDay = function(this1,weekday) {
	var d = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_dayOfWeek(this1);
	var s = weekday;
	if(s < d) {
		s += 7;
	}
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.jump(this1,thx_TimePeriod.Day,s - d);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.snapPrevWeekDay = function(this1,weekday) {
	var d = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_dayOfWeek(this1);
	var s = weekday;
	if(s > d) {
		s -= 7;
	}
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.jump(this1,thx_TimePeriod.Day,s - d);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.snapNext = function(this1,period) {
	switch(period[1]) {
	case 0:
		var a = thx_Int64s.divCeil(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerSecondI64);
		var b = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerSecondI64;
		var al = a.low & 65535;
		var ah = a.low >>> 16;
		var bl = b.low & 65535;
		var bh = b.low >>> 16;
		var p00 = haxe__$Int32_Int32_$Impl_$.mul(al,bl);
		var p10 = haxe__$Int32_Int32_$Impl_$.mul(ah,bl);
		var p01 = haxe__$Int32_Int32_$Impl_$.mul(al,bh);
		var p11 = haxe__$Int32_Int32_$Impl_$.mul(ah,bh);
		var low = p00;
		var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
		p01 = p01 << 16;
		low = p00 + p01 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
			++high;
			high = high | 0;
		}
		p10 = p10 << 16;
		low = low + p10 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
			++high;
			high = high | 0;
		}
		high = high + (haxe__$Int32_Int32_$Impl_$.mul(a.low,b.high) + haxe__$Int32_Int32_$Impl_$.mul(a.high,b.low) | 0) | 0;
		return new haxe__$Int64__$_$_$Int64(high,low);
	case 1:
		var a1 = thx_Int64s.divCeil(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMinuteI64);
		var b1 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMinuteI64;
		var al1 = a1.low & 65535;
		var ah1 = a1.low >>> 16;
		var bl1 = b1.low & 65535;
		var bh1 = b1.low >>> 16;
		var p001 = haxe__$Int32_Int32_$Impl_$.mul(al1,bl1);
		var p101 = haxe__$Int32_Int32_$Impl_$.mul(ah1,bl1);
		var p011 = haxe__$Int32_Int32_$Impl_$.mul(al1,bh1);
		var p111 = haxe__$Int32_Int32_$Impl_$.mul(ah1,bh1);
		var low1 = p001;
		var high1 = (p111 + (p011 >>> 16) | 0) + (p101 >>> 16) | 0;
		p011 = p011 << 16;
		low1 = p001 + p011 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,p011) < 0) {
			++high1;
			high1 = high1 | 0;
		}
		p101 = p101 << 16;
		low1 = low1 + p101 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,p101) < 0) {
			++high1;
			high1 = high1 | 0;
		}
		high1 = high1 + (haxe__$Int32_Int32_$Impl_$.mul(a1.low,b1.high) + haxe__$Int32_Int32_$Impl_$.mul(a1.high,b1.low) | 0) | 0;
		return new haxe__$Int64__$_$_$Int64(high1,low1);
	case 2:
		var a2 = thx_Int64s.divCeil(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerHourI64);
		var b2 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerHourI64;
		var al2 = a2.low & 65535;
		var ah2 = a2.low >>> 16;
		var bl2 = b2.low & 65535;
		var bh2 = b2.low >>> 16;
		var p002 = haxe__$Int32_Int32_$Impl_$.mul(al2,bl2);
		var p102 = haxe__$Int32_Int32_$Impl_$.mul(ah2,bl2);
		var p012 = haxe__$Int32_Int32_$Impl_$.mul(al2,bh2);
		var p112 = haxe__$Int32_Int32_$Impl_$.mul(ah2,bh2);
		var low2 = p002;
		var high2 = (p112 + (p012 >>> 16) | 0) + (p102 >>> 16) | 0;
		p012 = p012 << 16;
		low2 = p002 + p012 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,p012) < 0) {
			++high2;
			high2 = high2 | 0;
		}
		p102 = p102 << 16;
		low2 = low2 + p102 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,p102) < 0) {
			++high2;
			high2 = high2 | 0;
		}
		high2 = high2 + (haxe__$Int32_Int32_$Impl_$.mul(a2.low,b2.high) + haxe__$Int32_Int32_$Impl_$.mul(a2.high,b2.low) | 0) | 0;
		return new haxe__$Int64__$_$_$Int64(high2,low2);
	case 3:
		return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY) + 1,0,0,0);
	case 4:
		var wd = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_dayOfWeek(this1);
		return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY) + 7 - wd,0,0,0);
	case 5:
		return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH) + 1,1,0,0,0);
	case 6:
		return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR) + 1,1,1,0,0,0);
	}
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.snapPrev = function(this1,period) {
	switch(period[1]) {
	case 0:
		var a = thx_Int64s.divFloor(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerSecondI64);
		var b = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerSecondI64;
		var al = a.low & 65535;
		var ah = a.low >>> 16;
		var bl = b.low & 65535;
		var bh = b.low >>> 16;
		var p00 = haxe__$Int32_Int32_$Impl_$.mul(al,bl);
		var p10 = haxe__$Int32_Int32_$Impl_$.mul(ah,bl);
		var p01 = haxe__$Int32_Int32_$Impl_$.mul(al,bh);
		var p11 = haxe__$Int32_Int32_$Impl_$.mul(ah,bh);
		var low = p00;
		var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
		p01 = p01 << 16;
		low = p00 + p01 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
			++high;
			high = high | 0;
		}
		p10 = p10 << 16;
		low = low + p10 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
			++high;
			high = high | 0;
		}
		high = high + (haxe__$Int32_Int32_$Impl_$.mul(a.low,b.high) + haxe__$Int32_Int32_$Impl_$.mul(a.high,b.low) | 0) | 0;
		return new haxe__$Int64__$_$_$Int64(high,low);
	case 1:
		var a1 = thx_Int64s.divFloor(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMinuteI64);
		var b1 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMinuteI64;
		var al1 = a1.low & 65535;
		var ah1 = a1.low >>> 16;
		var bl1 = b1.low & 65535;
		var bh1 = b1.low >>> 16;
		var p001 = haxe__$Int32_Int32_$Impl_$.mul(al1,bl1);
		var p101 = haxe__$Int32_Int32_$Impl_$.mul(ah1,bl1);
		var p011 = haxe__$Int32_Int32_$Impl_$.mul(al1,bh1);
		var p111 = haxe__$Int32_Int32_$Impl_$.mul(ah1,bh1);
		var low1 = p001;
		var high1 = (p111 + (p011 >>> 16) | 0) + (p101 >>> 16) | 0;
		p011 = p011 << 16;
		low1 = p001 + p011 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,p011) < 0) {
			++high1;
			high1 = high1 | 0;
		}
		p101 = p101 << 16;
		low1 = low1 + p101 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,p101) < 0) {
			++high1;
			high1 = high1 | 0;
		}
		high1 = high1 + (haxe__$Int32_Int32_$Impl_$.mul(a1.low,b1.high) + haxe__$Int32_Int32_$Impl_$.mul(a1.high,b1.low) | 0) | 0;
		return new haxe__$Int64__$_$_$Int64(high1,low1);
	case 2:
		var a2 = thx_Int64s.divFloor(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerHourI64);
		var b2 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerHourI64;
		var al2 = a2.low & 65535;
		var ah2 = a2.low >>> 16;
		var bl2 = b2.low & 65535;
		var bh2 = b2.low >>> 16;
		var p002 = haxe__$Int32_Int32_$Impl_$.mul(al2,bl2);
		var p102 = haxe__$Int32_Int32_$Impl_$.mul(ah2,bl2);
		var p012 = haxe__$Int32_Int32_$Impl_$.mul(al2,bh2);
		var p112 = haxe__$Int32_Int32_$Impl_$.mul(ah2,bh2);
		var low2 = p002;
		var high2 = (p112 + (p012 >>> 16) | 0) + (p102 >>> 16) | 0;
		p012 = p012 << 16;
		low2 = p002 + p012 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,p012) < 0) {
			++high2;
			high2 = high2 | 0;
		}
		p102 = p102 << 16;
		low2 = low2 + p102 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,p102) < 0) {
			++high2;
			high2 = high2 | 0;
		}
		high2 = high2 + (haxe__$Int32_Int32_$Impl_$.mul(a2.low,b2.high) + haxe__$Int32_Int32_$Impl_$.mul(a2.high,b2.low) | 0) | 0;
		return new haxe__$Int64__$_$_$Int64(high2,low2);
	case 3:
		return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY),0,0,0);
	case 4:
		var wd = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_dayOfWeek(this1);
		return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY) - wd,0,0,0);
	case 5:
		return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH),1,0,0,0);
	case 6:
		return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR),1,1,0,0,0);
	}
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.snapTo = function(this1,period) {
	switch(period[1]) {
	case 0:
		var a = thx_Int64s.divRound(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerSecondI64);
		var b = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerSecondI64;
		var al = a.low & 65535;
		var ah = a.low >>> 16;
		var bl = b.low & 65535;
		var bh = b.low >>> 16;
		var p00 = haxe__$Int32_Int32_$Impl_$.mul(al,bl);
		var p10 = haxe__$Int32_Int32_$Impl_$.mul(ah,bl);
		var p01 = haxe__$Int32_Int32_$Impl_$.mul(al,bh);
		var p11 = haxe__$Int32_Int32_$Impl_$.mul(ah,bh);
		var low = p00;
		var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
		p01 = p01 << 16;
		low = p00 + p01 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
			++high;
			high = high | 0;
		}
		p10 = p10 << 16;
		low = low + p10 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
			++high;
			high = high | 0;
		}
		high = high + (haxe__$Int32_Int32_$Impl_$.mul(a.low,b.high) + haxe__$Int32_Int32_$Impl_$.mul(a.high,b.low) | 0) | 0;
		return new haxe__$Int64__$_$_$Int64(high,low);
	case 1:
		var a1 = thx_Int64s.divRound(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMinuteI64);
		var b1 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMinuteI64;
		var al1 = a1.low & 65535;
		var ah1 = a1.low >>> 16;
		var bl1 = b1.low & 65535;
		var bh1 = b1.low >>> 16;
		var p001 = haxe__$Int32_Int32_$Impl_$.mul(al1,bl1);
		var p101 = haxe__$Int32_Int32_$Impl_$.mul(ah1,bl1);
		var p011 = haxe__$Int32_Int32_$Impl_$.mul(al1,bh1);
		var p111 = haxe__$Int32_Int32_$Impl_$.mul(ah1,bh1);
		var low1 = p001;
		var high1 = (p111 + (p011 >>> 16) | 0) + (p101 >>> 16) | 0;
		p011 = p011 << 16;
		low1 = p001 + p011 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,p011) < 0) {
			++high1;
			high1 = high1 | 0;
		}
		p101 = p101 << 16;
		low1 = low1 + p101 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,p101) < 0) {
			++high1;
			high1 = high1 | 0;
		}
		high1 = high1 + (haxe__$Int32_Int32_$Impl_$.mul(a1.low,b1.high) + haxe__$Int32_Int32_$Impl_$.mul(a1.high,b1.low) | 0) | 0;
		return new haxe__$Int64__$_$_$Int64(high1,low1);
	case 2:
		var a2 = thx_Int64s.divRound(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerHourI64);
		var b2 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerHourI64;
		var al2 = a2.low & 65535;
		var ah2 = a2.low >>> 16;
		var bl2 = b2.low & 65535;
		var bh2 = b2.low >>> 16;
		var p002 = haxe__$Int32_Int32_$Impl_$.mul(al2,bl2);
		var p102 = haxe__$Int32_Int32_$Impl_$.mul(ah2,bl2);
		var p012 = haxe__$Int32_Int32_$Impl_$.mul(al2,bh2);
		var p112 = haxe__$Int32_Int32_$Impl_$.mul(ah2,bh2);
		var low2 = p002;
		var high2 = (p112 + (p012 >>> 16) | 0) + (p102 >>> 16) | 0;
		p012 = p012 << 16;
		low2 = p002 + p012 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,p012) < 0) {
			++high2;
			high2 = high2 | 0;
		}
		p102 = p102 << 16;
		low2 = low2 + p102 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,p102) < 0) {
			++high2;
			high2 = high2 | 0;
		}
		high2 = high2 + (haxe__$Int32_Int32_$Impl_$.mul(a2.low,b2.high) + haxe__$Int32_Int32_$Impl_$.mul(a2.high,b2.low) | 0) | 0;
		return new haxe__$Int64__$_$_$Int64(high2,low2);
	case 3:
		var mod = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_hour(this1) >= 12?1:0;
		return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY) + mod,0,0,0);
	case 4:
		var wd = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_dayOfWeek(this1);
		var mod1 = wd < 3?-wd:wd > 3?7 - wd:thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_hour(this1) < 12?-wd:7 - wd;
		return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY) + mod1,0,0,0);
	case 5:
		var mod2 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY) > Math.round(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysInMonth(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH)) / 2)?1:0;
		return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH) + mod2,1,0,0,0);
	case 6:
		var mod3;
		var b3 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR),6,2,0,0,0);
		var v = this1.high - b3.high | 0;
		if(v != 0) {
			v = v;
		} else {
			v = haxe__$Int32_Int32_$Impl_$.ucompare(this1.low,b3.low);
		}
		if((this1.high < 0?b3.high < 0?v:-1:b3.high >= 0?v:1) > 0) {
			mod3 = 1;
		} else {
			mod3 = 0;
		}
		return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR) + mod3,1,1,0,0,0);
	}
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.sameYear = function(this1,other) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR) == thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(other,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.sameMonth = function(this1,other) {
	if(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.sameYear(this1,other)) {
		return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH) == thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(other,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH);
	} else {
		return false;
	}
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.sameDay = function(this1,other) {
	if(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.sameMonth(this1,other)) {
		return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY) == thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(other,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY);
	} else {
		return false;
	}
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.sameHour = function(this1,other) {
	if(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.sameDay(this1,other)) {
		return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_hour(this1) == thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_hour(other);
	} else {
		return false;
	}
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.sameMinute = function(this1,other) {
	if(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.sameHour(this1,other)) {
		return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_minute(this1) == thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_minute(other);
	} else {
		return false;
	}
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.sameSecond = function(this1,other) {
	if(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.sameMinute(this1,other)) {
		return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_second(this1) == thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_second(other);
	} else {
		return false;
	}
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.withYear = function(this1,year) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(year,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_hour(this1),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_minute(this1),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_second(this1),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_millisecond(this1));
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.withMonth = function(this1,month) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR),month,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_hour(this1),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_minute(this1),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_second(this1),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_millisecond(this1));
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.withDay = function(this1,day) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH),day,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_hour(this1),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_minute(this1),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_second(this1),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_millisecond(this1));
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.withHour = function(this1,hour) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY),hour,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_minute(this1),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_second(this1),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_millisecond(this1));
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.withMinute = function(this1,minute) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_hour(this1),minute,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_second(this1),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_millisecond(this1));
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.withSecond = function(this1,second) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_hour(this1),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_minute(this1),second,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_millisecond(this1));
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.withMillisecond = function(this1,millisecond) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_hour(this1),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_minute(this1),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_second(this1),millisecond);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.add = function(this1,time) {
	var b = time;
	var high = this1.high + b.high | 0;
	var low = this1.low + b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this1.low) < 0) {
		++high;
		high = high | 0;
	}
	return new haxe__$Int64__$_$_$Int64(high,low);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addTicks = function(this1,tickstoadd) {
	var high = this1.high + tickstoadd.high | 0;
	var low = this1.low + tickstoadd.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this1.low) < 0) {
		++high;
		high = high | 0;
	}
	return new haxe__$Int64__$_$_$Int64(high,low);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.subtract = function(this1,time) {
	var b = time;
	var high = this1.high - b.high | 0;
	var low = this1.low - b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(this1.low,b.low) < 0) {
		--high;
		high = high | 0;
	}
	return new haxe__$Int64__$_$_$Int64(high,low);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.subtractDate = function(this1,date) {
	var b = date;
	var high = this1.high - b.high | 0;
	var low = this1.low - b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(this1.low,b.low) < 0) {
		--high;
		high = high | 0;
	}
	return new haxe__$Int64__$_$_$Int64(high,low);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addScaled = function(this1,value,scale) {
	var x = value * scale + (value >= 0?0.5:-0.5) | 0;
	var millis = new haxe__$Int64__$_$_$Int64(x >> 31,x);
	var b = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMillisecondI64;
	var al = millis.low & 65535;
	var ah = millis.low >>> 16;
	var bl = b.low & 65535;
	var bh = b.low >>> 16;
	var p00 = haxe__$Int32_Int32_$Impl_$.mul(al,bl);
	var p10 = haxe__$Int32_Int32_$Impl_$.mul(ah,bl);
	var p01 = haxe__$Int32_Int32_$Impl_$.mul(al,bh);
	var p11 = haxe__$Int32_Int32_$Impl_$.mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 = p01 << 16;
	low = p00 + p01 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
		++high;
		high = high | 0;
	}
	p10 = p10 << 16;
	low = low + p10 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
		++high;
		high = high | 0;
	}
	high = high + (haxe__$Int32_Int32_$Impl_$.mul(millis.low,b.high) + haxe__$Int32_Int32_$Impl_$.mul(millis.high,b.low) | 0) | 0;
	var b1 = new haxe__$Int64__$_$_$Int64(high,low);
	var high1 = this1.high + b1.high | 0;
	var low1 = this1.low + b1.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,this1.low) < 0) {
		++high1;
		high1 = high1 | 0;
	}
	return new haxe__$Int64__$_$_$Int64(high1,low1);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addDays = function(this1,days) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addScaled(this1,days,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.millisPerDay);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addHours = function(this1,hours) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addScaled(this1,hours,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.millisPerHour);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addMilliseconds = function(this1,milliseconds) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addScaled(this1,milliseconds,1);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addMinutes = function(this1,minutes) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addScaled(this1,minutes,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.millisPerMinute);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addMonths = function(this1,months) {
	var y = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR);
	var m = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH);
	var d = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY);
	var i = m - 1 + months;
	if(i >= 0) {
		m = i % 12 + 1 | 0;
		y = y + i / 12 | 0;
	} else {
		m = 12 + (i + 1) % 12 | 0;
		y = y + (i - 11) / 12 | 0;
	}
	var days = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysInMonth(y,m);
	if(d > days) {
		d = days;
	}
	var a = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.dateToTicks(y,m,d);
	var b = haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerDayI64).modulus;
	var high = a.high + b.high | 0;
	var low = a.low + b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,a.low) < 0) {
		++high;
		high = high | 0;
	}
	return new haxe__$Int64__$_$_$Int64(high,low);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addSeconds = function(this1,seconds) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addScaled(this1,seconds,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.millisPerSecond);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addYears = function(this1,years) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addMonths(this1,years * 12);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.compareTo = function(this1,other) {
	if(null == other && this1 == null) {
		return 0;
	}
	if(null == this1) {
		return -1;
	} else if(null == other) {
		return 1;
	}
	return thx_Int64s.compare(this1,other);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.equalsTo = function(this1,that) {
	var b = that;
	if(this1.high == b.high) {
		return this1.low == b.low;
	} else {
		return false;
	}
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.equals = function(self,that) {
	var a = self;
	var b = that;
	if(a.high == b.high) {
		return a.low == b.low;
	} else {
		return false;
	}
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.notEqualsTo = function(this1,that) {
	var b = that;
	if(!(this1.high != b.high)) {
		return this1.low != b.low;
	} else {
		return true;
	}
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.notEquals = function(self,that) {
	var a = self;
	var b = that;
	if(!(a.high != b.high)) {
		return a.low != b.low;
	} else {
		return true;
	}
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.nearEqualsTo = function(this1,other,span) {
	var a = other;
	var high = a.high - this1.high | 0;
	var low = a.low - this1.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(a.low,this1.low) < 0) {
		--high;
		high = high | 0;
	}
	var ticks = thx_Int64s.abs(new haxe__$Int64__$_$_$Int64(high,low));
	var this2 = thx__$Time_Time_$Impl_$.abs(span);
	var v = ticks.high - this2.high | 0;
	if(v != 0) {
		v = v;
	} else {
		v = haxe__$Int32_Int32_$Impl_$.ucompare(ticks.low,this2.low);
	}
	return (ticks.high < 0?this2.high < 0?v:-1:this2.high >= 0?v:1) <= 0;
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.greaterThan = function(this1,that) {
	var b = that;
	var v = this1.high - b.high | 0;
	if(v != 0) {
		v = v;
	} else {
		v = haxe__$Int32_Int32_$Impl_$.ucompare(this1.low,b.low);
	}
	return (this1.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) > 0;
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.greater = function(self,that) {
	var a = self;
	var b = that;
	var v = a.high - b.high | 0;
	if(v != 0) {
		v = v;
	} else {
		v = haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
	}
	return (a.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) > 0;
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.greaterEqualsTo = function(this1,that) {
	var b = that;
	var v = this1.high - b.high | 0;
	if(v != 0) {
		v = v;
	} else {
		v = haxe__$Int32_Int32_$Impl_$.ucompare(this1.low,b.low);
	}
	return (this1.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) >= 0;
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.greaterEquals = function(self,that) {
	var a = self;
	var b = that;
	var v = a.high - b.high | 0;
	if(v != 0) {
		v = v;
	} else {
		v = haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
	}
	return (a.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) >= 0;
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.lessThan = function(this1,that) {
	var b = that;
	var v = this1.high - b.high | 0;
	if(v != 0) {
		v = v;
	} else {
		v = haxe__$Int32_Int32_$Impl_$.ucompare(this1.low,b.low);
	}
	return (this1.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) < 0;
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.less = function(self,that) {
	var a = self;
	var b = that;
	var v = a.high - b.high | 0;
	if(v != 0) {
		v = v;
	} else {
		v = haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
	}
	return (a.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) < 0;
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.lessEqualsTo = function(this1,that) {
	var b = that;
	var v = this1.high - b.high | 0;
	if(v != 0) {
		v = v;
	} else {
		v = haxe__$Int32_Int32_$Impl_$.ucompare(this1.low,b.low);
	}
	return (this1.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) <= 0;
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.lessEquals = function(self,that) {
	var a = self;
	var b = that;
	var v = a.high - b.high | 0;
	if(v != 0) {
		v = v;
	} else {
		v = haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
	}
	return (a.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) <= 0;
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toTime = function(this1) {
	var b = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.unixEpochTicks;
	var high = this1.high - b.high | 0;
	var low = this1.low - b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(this1.low,b.low) < 0) {
		--high;
		high = high | 0;
	}
	return thx_Int64s.toFloat(haxe__$Int64_Int64_$Impl_$.divMod(new haxe__$Int64__$_$_$Int64(high,low),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMillisecondI64).quotient);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toDate = function(this1) {
	var a = this1;
	var b = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.unixEpochTicks;
	var high = a.high - b.high | 0;
	var low = a.low - b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low) < 0) {
		var ret = high--;
		high = high | 0;
	}
	var t = thx_Int64s.toFloat(haxe__$Int64_Int64_$Impl_$.divMod(new haxe__$Int64__$_$_$Int64(high,low),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMillisecondI64).quotient);
	return new Date(t);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toDateTime = function(this1,offset) {
	return [this1,null == offset?thx__$Time_Time_$Impl_$.zero:offset];
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toLocalDateTime = function(this1) {
	return [this1,thx__$DateTime_DateTime_$Impl_$.localOffset()];
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString = function(this1) {
	if(null == this1) {
		return "";
	}
	var abs = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(thx_Int64s.abs(this1));
	var decimals = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_tickInSecond(abs) != 0?"." + thx_Strings.trimCharsRight(thx_Ints.lpad(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_tickInSecond(abs),"0",7),")"):"";
	var b = thx_Int64s.zero;
	var v = this1.high - b.high | 0;
	if(v != 0) {
		v = v;
	} else {
		v = haxe__$Int32_Int32_$Impl_$.ucompare(this1.low,b.low);
	}
	return ((this1.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) < 0?"-":"") + ("" + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(abs,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR) + "-" + thx_Ints.lpad(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(abs,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH),"0",2) + "-" + thx_Ints.lpad(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(abs,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY),"0",2) + "T" + thx_Ints.lpad(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_hour(abs),"0",2) + ":" + thx_Ints.lpad(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_minute(abs),"0",2) + ":" + thx_Ints.lpad(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_second(abs),"0",2) + decimals + "Z");
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_ticks = function(this1) {
	return this1;
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_year = function(this1) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_month = function(this1) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_day = function(this1) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_hour = function(this1) {
	var x = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerHourI64).quotient,new haxe__$Int64__$_$_$Int64(0,24)).modulus;
	if(x.high != x.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	return x.low;
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_minute = function(this1) {
	var x = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMinuteI64).quotient,new haxe__$Int64__$_$_$Int64(0,60)).modulus;
	if(x.high != x.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	return x.low;
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_dayOfWeek = function(this1) {
	var a = haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerDayI64).quotient;
	var b = new haxe__$Int64__$_$_$Int64(0,1);
	var high = a.high + b.high | 0;
	var low = a.low + b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,a.low) < 0) {
		++high;
		high = high | 0;
	}
	var x = haxe__$Int64_Int64_$Impl_$.divMod(new haxe__$Int64__$_$_$Int64(high,low),new haxe__$Int64__$_$_$Int64(0,7)).modulus;
	if(x.high != x.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	return x.low;
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_dayOfYear = function(this1) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY_OF_YEAR);
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_millisecond = function(this1) {
	var x = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMillisecondI64).quotient,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.thousandI64).modulus;
	if(x.high != x.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	return x.low;
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_microsecond = function(this1) {
	var x = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMicrosecondI64).quotient,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.millionI64).modulus;
	if(x.high != x.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	return x.low;
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_tickInSecond = function(this1) {
	var x = haxe__$Int64_Int64_$Impl_$.divMod(this1,new haxe__$Int64__$_$_$Int64(0,10000000)).modulus;
	if(x.high != x.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	return x.low;
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_second = function(this1) {
	var x = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerSecondI64).quotient,new haxe__$Int64__$_$_$Int64(0,60)).modulus;
	if(x.high != x.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	return x.low;
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_timeOfDay = function(this1) {
	return haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerDayI64).modulus;
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_isInLeapYear = function(this1) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.isLeapYear(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR));
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_monthDays = function(this1) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysInMonth(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH));
};
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.self = function(this1) {
	return this1;
};
var thx_Dates = function() { };
thx_Dates.__name__ = ["thx","Dates"];
thx_Dates.compare = function(a,b) {
	var a1 = a.getTime();
	var b1 = b.getTime();
	if(a1 < b1) {
		return -1;
	} else if(a1 > b1) {
		return 1;
	} else {
		return 0;
	}
};
thx_Dates.create = function(year,month,day,hour,minute,second) {
	if(second == null) {
		second = 0;
	}
	if(minute == null) {
		minute = 0;
	}
	if(hour == null) {
		hour = 0;
	}
	if(day == null) {
		day = 1;
	}
	if(month == null) {
		month = 0;
	}
	minute += Math.floor(second / 60);
	second %= 60;
	if(second < 0) {
		second += 60;
	}
	hour += Math.floor(minute / 60);
	minute %= 60;
	if(minute < 0) {
		minute += 60;
	}
	day += Math.floor(hour / 24);
	hour %= 24;
	if(hour < 0) {
		hour += 24;
	}
	if(day == 0) {
		--month;
		if(month < 0) {
			month = 11;
			--year;
		}
		day = thx_Dates.daysInMonth(year,month);
	}
	year += Math.floor(month / 12);
	month %= 12;
	if(month < 0) {
		month += 12;
	}
	var days = thx_Dates.daysInMonth(year,month);
	while(day > days) {
		if(day > days) {
			day -= days;
			++month;
		}
		if(month > 11) {
			month -= 12;
			++year;
		}
		days = thx_Dates.daysInMonth(year,month);
	}
	return new Date(year,month,day,hour,minute,second);
};
thx_Dates.daysRange = function(start,end) {
	if(thx_Dates.compare(end,start) < 0) {
		return [];
	}
	var days = [];
	while(!thx_Dates.sameDay(start,end)) {
		days.push(start);
		start = thx_Dates.jump(start,thx_TimePeriod.Day,1);
	}
	days.push(end);
	return days;
};
thx_Dates.equals = function(self,other) {
	return self.getTime() == other.getTime();
};
thx_Dates.nearEquals = function(self,other,units,period) {
	if(units == null) {
		units = 1;
	}
	if(null == period) {
		period = thx_TimePeriod.Second;
	}
	if(units < 0) {
		units = -units;
	}
	var min = thx_Dates.jump(self,period,-units);
	var max = thx_Dates.jump(self,period,units);
	if(thx_Dates.compare(min,other) <= 0) {
		return thx_Dates.compare(max,other) >= 0;
	} else {
		return false;
	}
};
thx_Dates.greater = function(self,other) {
	return thx_Dates.compare(self,other) > 0;
};
thx_Dates.more = function(self,other) {
	return thx_Dates.compare(self,other) > 0;
};
thx_Dates.less = function(self,other) {
	return thx_Dates.compare(self,other) < 0;
};
thx_Dates.greaterEquals = function(self,other) {
	return thx_Dates.compare(self,other) >= 0;
};
thx_Dates.moreEqual = function(self,other) {
	return thx_Dates.compare(self,other) >= 0;
};
thx_Dates.lessEquals = function(self,other) {
	return thx_Dates.compare(self,other) <= 0;
};
thx_Dates.lessEqual = function(self,other) {
	return thx_Dates.compare(self,other) <= 0;
};
thx_Dates.isLeapYear = function(year) {
	if(year % 4 != 0) {
		return false;
	}
	if(year % 100 == 0) {
		return year % 400 == 0;
	}
	return true;
};
thx_Dates.isInLeapYear = function(d) {
	return thx_Dates.isLeapYear(d.getFullYear());
};
thx_Dates.daysInMonth = function(year,month) {
	switch(month) {
	case 1:
		if(thx_Dates.isLeapYear(year)) {
			return 29;
		} else {
			return 28;
		}
		break;
	case 0:case 2:case 4:case 6:case 7:case 9:case 11:
		return 31;
	case 3:case 5:case 8:case 10:
		return 30;
	default:
		throw new js__$Boot_HaxeError("Invalid month \"" + month + "\".  Month should be a number, Jan=0, Dec=11");
	}
};
thx_Dates.numDaysInMonth = function(month,year) {
	return thx_Dates.daysInMonth(year,month);
};
thx_Dates.daysInThisMonth = function(d) {
	return thx_Dates.daysInMonth(d.getFullYear(),d.getMonth());
};
thx_Dates.numDaysInThisMonth = function(d) {
	return thx_Dates.daysInThisMonth(d);
};
thx_Dates.sameYear = function(self,other) {
	return self.getFullYear() == other.getFullYear();
};
thx_Dates.sameMonth = function(self,other) {
	if(thx_Dates.sameYear(self,other)) {
		return self.getMonth() == other.getMonth();
	} else {
		return false;
	}
};
thx_Dates.sameDay = function(self,other) {
	if(thx_Dates.sameMonth(self,other)) {
		return self.getDate() == other.getDate();
	} else {
		return false;
	}
};
thx_Dates.sameHour = function(self,other) {
	if(thx_Dates.sameDay(self,other)) {
		return self.getHours() == other.getHours();
	} else {
		return false;
	}
};
thx_Dates.sameMinute = function(self,other) {
	if(thx_Dates.sameHour(self,other)) {
		return self.getMinutes() == other.getMinutes();
	} else {
		return false;
	}
};
thx_Dates.snapNext = function(date,period) {
	var this1 = thx__$Timestamp_Timestamp_$Impl_$.snapNext(date.getTime(),period);
	return new Date(this1);
};
thx_Dates.snapPrev = function(date,period) {
	var this1 = thx__$Timestamp_Timestamp_$Impl_$.snapPrev(date.getTime(),period);
	return new Date(this1);
};
thx_Dates.snapTo = function(date,period) {
	var this1 = thx__$Timestamp_Timestamp_$Impl_$.snapTo(date.getTime(),period);
	return new Date(this1);
};
thx_Dates.jump = function(date,period,amount) {
	var sec = date.getSeconds();
	var min = date.getMinutes();
	var hour = date.getHours();
	var day = date.getDate();
	var month = date.getMonth();
	var year = date.getFullYear();
	switch(period[1]) {
	case 0:
		sec += amount;
		break;
	case 1:
		min += amount;
		break;
	case 2:
		hour += amount;
		break;
	case 3:
		day += amount;
		break;
	case 4:
		day += amount * 7;
		break;
	case 5:
		month += amount;
		break;
	case 6:
		year += amount;
		break;
	}
	return thx_Dates.create(year,month,day,hour,min,sec);
};
thx_Dates.max = function(self,other) {
	if(self.getTime() > other.getTime()) {
		return self;
	} else {
		return other;
	}
};
thx_Dates.min = function(self,other) {
	if(self.getTime() < other.getTime()) {
		return self;
	} else {
		return other;
	}
};
thx_Dates.snapToWeekDay = function(date,day,firstDayOfWk) {
	if(firstDayOfWk == null) {
		firstDayOfWk = 0;
	}
	var d = date.getDay();
	var s = day;
	if(s < firstDayOfWk) {
		s += 7;
	}
	if(d < firstDayOfWk) {
		d += 7;
	}
	return thx_Dates.jump(date,thx_TimePeriod.Day,s - d);
};
thx_Dates.snapNextWeekDay = function(date,day) {
	var d = date.getDay();
	var s = day;
	if(s < d) {
		s += 7;
	}
	return thx_Dates.jump(date,thx_TimePeriod.Day,s - d);
};
thx_Dates.snapPrevWeekDay = function(date,day) {
	var d = date.getDay();
	var s = day;
	if(s > d) {
		s -= 7;
	}
	return thx_Dates.jump(date,thx_TimePeriod.Day,s - d);
};
thx_Dates.prevYear = function(d) {
	return thx_Dates.jump(d,thx_TimePeriod.Year,-1);
};
thx_Dates.nextYear = function(d) {
	return thx_Dates.jump(d,thx_TimePeriod.Year,1);
};
thx_Dates.prevMonth = function(d) {
	return thx_Dates.jump(d,thx_TimePeriod.Month,-1);
};
thx_Dates.nextMonth = function(d) {
	return thx_Dates.jump(d,thx_TimePeriod.Month,1);
};
thx_Dates.prevWeek = function(d) {
	return thx_Dates.jump(d,thx_TimePeriod.Week,-1);
};
thx_Dates.nextWeek = function(d) {
	return thx_Dates.jump(d,thx_TimePeriod.Week,1);
};
thx_Dates.prevDay = function(d) {
	return thx_Dates.jump(d,thx_TimePeriod.Day,-1);
};
thx_Dates.nextDay = function(d) {
	return thx_Dates.jump(d,thx_TimePeriod.Day,1);
};
thx_Dates.prevHour = function(d) {
	return thx_Dates.jump(d,thx_TimePeriod.Hour,-1);
};
thx_Dates.nextHour = function(d) {
	return thx_Dates.jump(d,thx_TimePeriod.Hour,1);
};
thx_Dates.prevMinute = function(d) {
	return thx_Dates.jump(d,thx_TimePeriod.Minute,-1);
};
thx_Dates.nextMinute = function(d) {
	return thx_Dates.jump(d,thx_TimePeriod.Minute,1);
};
thx_Dates.prevSecond = function(d) {
	return thx_Dates.jump(d,thx_TimePeriod.Second,-1);
};
thx_Dates.nextSecond = function(d) {
	return thx_Dates.jump(d,thx_TimePeriod.Second,1);
};
thx_Dates.withYear = function(date,year) {
	return thx_Dates.create(year,date.getMonth(),date.getDate(),date.getHours(),date.getMinutes(),date.getSeconds());
};
thx_Dates.withMonth = function(date,month) {
	return thx_Dates.create(date.getFullYear(),month,date.getDate(),date.getHours(),date.getMinutes(),date.getSeconds());
};
thx_Dates.withDay = function(date,day) {
	return thx_Dates.create(date.getFullYear(),date.getMonth(),day,date.getHours(),date.getMinutes(),date.getSeconds());
};
thx_Dates.withHour = function(date,hour) {
	return thx_Dates.create(date.getFullYear(),date.getMonth(),date.getDate(),hour,date.getMinutes(),date.getSeconds());
};
thx_Dates.withMinute = function(date,minute) {
	return thx_Dates.create(date.getFullYear(),date.getMonth(),date.getDate(),date.getHours(),minute,date.getSeconds());
};
thx_Dates.withSecond = function(date,second) {
	return thx_Dates.create(date.getFullYear(),date.getMonth(),date.getDate(),date.getHours(),date.getMinutes(),second);
};
thx_Dates.parseDate = function(s) {
	try {
		return thx_Either.Right(HxOverrides.strDate(s));
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return thx_Either.Left("" + s + " could not be parsed to a valid Date value.");
	}
};
var thx_bigint_Decimals = function() { };
thx_bigint_Decimals.__name__ = ["thx","bigint","Decimals"];
thx_bigint_Decimals.fromInt = function(value) {
	return new thx_bigint_DecimalImpl(thx_bigint_Bigs.fromInt(value),0);
};
thx_bigint_Decimals.fromFloat = function(value) {
	if(!isFinite(value)) {
		throw new js__$Boot_HaxeError("Value is not a finite Float: " + value);
	}
	return thx_bigint_Decimals.parse("" + value);
};
thx_bigint_Decimals.parse = function(value) {
	value = value.toLowerCase();
	var pose = value.indexOf("e");
	if(pose > 0) {
		var isNeg = false;
		var f = value.substring(0,pose);
		var e = value.substring(pose + 1);
		if(e.substring(0,1) == "-") {
			isNeg = true;
			e = e.substring(1);
		}
		var m = thx_bigint_Small.ten.pow(thx_bigint_Bigs.parseBase(e,10));
		if(isNeg) {
			return thx_bigint_Decimals.parse(f).divideWithScale(thx__$Decimal_Decimal_$Impl_$.fromBigInt(m),Std.parseInt(e));
		} else {
			return thx_bigint_Decimals.parse(f).multiply(thx__$Decimal_Decimal_$Impl_$.fromBigInt(m));
		}
	}
	var pdec = value.indexOf(".");
	if(pdec < 0) {
		return new thx_bigint_DecimalImpl(thx_bigint_Bigs.parseBase(value,10),0);
	}
	return new thx_bigint_DecimalImpl(thx_bigint_Bigs.parseBase(value.substring(0,pdec) + value.substring(pdec + 1),10),value.length - pdec - 1);
};
var thx_bigint_Bigs = function() { };
thx_bigint_Bigs.__name__ = ["thx","bigint","Bigs"];
thx_bigint_Bigs.isPrecise = function(value) {
	if(-thx_bigint_Bigs.MAX_INT < value) {
		return value < thx_bigint_Bigs.MAX_INT;
	} else {
		return false;
	}
};
thx_bigint_Bigs.canMultiply = function(a,b) {
	if(a == 0 || b == 0) {
		return true;
	}
	var v = a * b;
	if(a != v / b) {
		return false;
	}
	return thx_bigint_Bigs.isPrecise(v);
};
thx_bigint_Bigs.canPower = function(a,b) {
	if(a == 0 || b == 0) {
		return true;
	}
	var a1 = Math.abs(a);
	var b1 = Math.abs(b);
	var v;
	try {
		v = Math.pow(a1,b1) | 0;
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return false;
	}
	if((Math.pow(v,1.0 / b1) | 0) != a1) {
		return false;
	}
	return thx_bigint_Bigs.isPrecise(v);
};
thx_bigint_Bigs.canAdd = function(a,b) {
	var v = a + b;
	if(a > 0 && b > 0 && v < 0) {
		return false;
	}
	return thx_bigint_Bigs.isPrecise(v);
};
thx_bigint_Bigs.smallToArray = function(n) {
	thx_Assert.isTrue(n >= 0,"Bigs.smallToArray should always be non-negative: " + n,{ fileName : "Bigs.hx", lineNumber : 57, className : "thx.bigint.Bigs", methodName : "smallToArray"});
	if(n < 10000000) {
		return [n];
	}
	if(n < 100000000000000.0) {
		return [n % 10000000,Math.floor(n / 10000000)];
	}
	return [n % 10000000,Math.floor(n / 10000000) % 10000000,Math.floor(n / 100000000000000.0)];
};
thx_bigint_Bigs.arrayToSmall = function(arr) {
	thx_bigint_Bigs.trim(arr);
	var length = arr.length;
	if(length < 4 && thx_bigint_Bigs.compareToAbs(arr,thx_bigint_Bigs.MAX_INT_ARR) < 0) {
		switch(length) {
		case 0:
			return 0;
		case 1:
			return arr[0];
		case 2:
			return arr[0] + arr[1] * 10000000;
		default:
			return arr[0] + (arr[1] + arr[2] * 10000000) * 10000000;
		}
	}
	return null;
};
thx_bigint_Bigs.trim = function(v) {
	while(v.length > 1) {
		if(v[v.length - 1] != 0) {
			break;
		}
		v.pop();
	}
};
thx_bigint_Bigs.createArray = function(length) {
	var x = new Array(length);
	var _g1 = 0;
	var _g = length;
	while(_g1 < _g) {
		var i = _g1++;
		x[i] = 0;
	}
	return x;
};
thx_bigint_Bigs.createFloatArray = function(length) {
	var x = new Array(length);
	var _g1 = 0;
	var _g = length;
	while(_g1 < _g) {
		var i = _g1++;
		x[i] = 0.0;
	}
	return x;
};
thx_bigint_Bigs.add = function(a,b) {
	var l_a = a.length;
	var l_b = b.length;
	var r = new Array(l_a);
	var carry = 0;
	var sum;
	var i = 0;
	while(i < l_b) {
		sum = a[i] + b[i] + carry;
		if(sum >= 10000000) {
			carry = 1;
		} else {
			carry = 0;
		}
		r[i++] = sum - carry * 10000000;
	}
	while(i < l_a) {
		sum = a[i] + carry;
		if(sum == 10000000) {
			carry = 1;
		} else {
			carry = 0;
		}
		r[i++] = sum - carry * 10000000;
	}
	if(carry > 0) {
		r.push(carry);
	}
	return r;
};
thx_bigint_Bigs.addAny = function(a,b) {
	if(a.length >= b.length) {
		return thx_bigint_Bigs.add(a,b);
	}
	return thx_bigint_Bigs.add(b,a);
};
thx_bigint_Bigs.addSmall = function(a,carry) {
	var l = a.length;
	var r = new Array(l);
	var sum;
	var i = 0;
	while(i < l) {
		sum = a[i] - 10000000 + carry;
		carry = Math.floor(sum / 10000000);
		r[i++] = sum - carry * 10000000;
		++carry;
	}
	while(carry > 0) {
		r[i++] = carry % 10000000;
		carry = Math.floor(carry / 10000000);
	}
	return r;
};
thx_bigint_Bigs.compareToAbs = function(a,b) {
	if(a.length != b.length) {
		if(a.length > b.length) {
			return 1;
		} else {
			return -1;
		}
	}
	var i = a.length;
	while(--i >= 0) if(a[i] != b[i]) {
		if(a[i] > b[i]) {
			return 1;
		} else {
			return -1;
		}
	}
	return 0;
};
thx_bigint_Bigs.subtract = function(a,b) {
	var a_l = a.length;
	var b_l = b.length;
	var r = new Array(a_l);
	var borrow = 0;
	var i = 0;
	var difference;
	while(i < b_l) {
		difference = a[i] - borrow - b[i];
		if(difference < 0) {
			difference += 10000000;
			borrow = 1;
		} else {
			borrow = 0;
		}
		r[i++] = difference;
	}
	while(i < a_l) {
		difference = a[i] - borrow;
		if(difference < 0) {
			difference += 10000000;
		} else {
			r[i++] = difference;
			break;
		}
		r[i++] = difference;
	}
	while(i < a_l) {
		r[i] = a[i];
		++i;
	}
	thx_bigint_Bigs.trim(r);
	return r;
};
thx_bigint_Bigs.subtractAny = function(a,b,sign) {
	var value;
	if(thx_bigint_Bigs.compareToAbs(a,b) >= 0) {
		value = thx_bigint_Bigs.subtract(a,b);
	} else {
		value = thx_bigint_Bigs.subtract(b,a);
		sign = !sign;
	}
	var n = thx_bigint_Bigs.arrayToSmall(value);
	if(null != n) {
		if(sign) {
			n = -n;
		}
		return new thx_bigint_Small(n);
	}
	return new thx_bigint_Big(value,sign);
};
thx_bigint_Bigs.subtractSmall = function(a,b,sign) {
	var l = a.length;
	var r = new Array(l);
	var carry = -b;
	var i;
	var difference;
	var _g1 = 0;
	var _g = l;
	while(_g1 < _g) {
		var i1 = _g1++;
		difference = a[i1] + carry;
		carry = Math.floor(difference / 10000000);
		r[i1] = difference < 0?difference % 10000000 + 10000000:difference;
	}
	var n = thx_bigint_Bigs.arrayToSmall(r);
	if(null != n) {
		if(sign) {
			n = -n;
		}
		return new thx_bigint_Small(n);
	}
	return new thx_bigint_Big(r,sign);
};
thx_bigint_Bigs.multiplyLong = function(a,b) {
	var a_l = a.length;
	var b_l = b.length;
	var r = thx_bigint_Bigs.createFloatArray(a_l + b_l);
	var product;
	var carry;
	var a_i;
	var b_j;
	var _g1 = 0;
	while(_g1 < a_l) {
		var i = _g1++;
		a_i = a[i];
		var _g3 = 0;
		while(_g3 < b_l) {
			var j = _g3++;
			b_j = b[j];
			product = a_i * b_j + r[i + j];
			var value = product / 10000000;
			if(value < 0.0) {
				carry = Math.ceil(value);
			} else {
				carry = Math.floor(value);
			}
			var tmp = i + j;
			var value1 = product - carry * 10000000;
			r[tmp] = value1 < 0.0?Math.ceil(value1):Math.floor(value1);
			r[i + j + 1] += carry;
		}
	}
	var arr = r.map(function(v) {
		return v | 0;
	});
	thx_bigint_Bigs.trim(arr);
	return arr;
};
thx_bigint_Bigs.multiplySmall = function(a,b) {
	var l = a.length;
	var r = new Array(l);
	var carry = 0.0;
	var product;
	var i = 0;
	var a_i;
	var bf = b;
	while(i < l) {
		a_i = a[i];
		product = carry + a[i] * bf;
		var value = product / 10000000;
		if(value < 0.0) {
			carry = Math.ceil(value);
		} else {
			carry = Math.floor(value);
		}
		r[i++] = product - carry * 10000000;
	}
	while(carry > 0) {
		r[i++] = carry % 10000000;
		var value1 = carry / 10000000;
		if(value1 < 0.0) {
			carry = Math.ceil(value1);
		} else {
			carry = Math.floor(value1);
		}
	}
	var arr = r.map(function(v) {
		return v | 0;
	});
	thx_bigint_Bigs.trim(arr);
	return arr;
};
thx_bigint_Bigs.shiftLeft = function(x,n) {
	var r = [];
	while(n-- > 0) r.push(0);
	return r.concat(x);
};
thx_bigint_Bigs.multiplyKaratsuba = function(x,y) {
	var a = x.length;
	var b = y.length;
	var n = a > b?a:b;
	if(n <= 400) {
		return thx_bigint_Bigs.multiplyLong(x,y);
	}
	n = Math.ceil(n / 2);
	var b1 = x.slice(n);
	var a1 = x.slice(0,n);
	var d = y.slice(n);
	var c = y.slice(0,n);
	var ac = thx_bigint_Bigs.multiplyKaratsuba(a1,c);
	var bd = thx_bigint_Bigs.multiplyKaratsuba(b1,d);
	return thx_bigint_Bigs.addAny(thx_bigint_Bigs.addAny(ac,thx_bigint_Bigs.shiftLeft(thx_bigint_Bigs.subtract(thx_bigint_Bigs.subtract(thx_bigint_Bigs.multiplyKaratsuba(thx_bigint_Bigs.addAny(a1,b1),thx_bigint_Bigs.addAny(c,d)),ac),bd),n)),thx_bigint_Bigs.shiftLeft(bd,2 * n));
};
thx_bigint_Bigs.fromInt = function(value) {
	var abs = value < 0?-value:value;
	if(abs < 10000000) {
		return new thx_bigint_Small(value);
	} else {
		return new thx_bigint_Big(thx_bigint_Bigs.smallToArray(abs),value < 0);
	}
};
thx_bigint_Bigs.fromInt64 = function(value) {
	return thx_bigint_Bigs.parseBase(haxe__$Int64_Int64_$Impl_$.toString(value),10);
};
thx_bigint_Bigs.toInt64 = function(value) {
	return thx_Int64s.parse(value.toString());
};
thx_bigint_Bigs.fromFloat = function(value) {
	if(isNaN(value) || !isFinite(value)) {
		throw new thx_Error("Conversion to BigInt failed. Number is NaN or Infinite",null,{ fileName : "Bigs.hx", lineNumber : 305, className : "thx.bigint.Bigs", methodName : "fromFloat"});
	}
	var noFractions = value - value % 1;
	var result = thx_bigint_Small.zero;
	var neg = noFractions < 0.0;
	var rest = neg?-noFractions:noFractions;
	var i = 0;
	var curr;
	while(rest >= 1) {
		curr = rest % 2;
		rest /= 2;
		if(curr >= 1) {
			result = result.add(thx_bigint_Small.one.shiftLeft(i));
		}
		++i;
	}
	if(neg) {
		return result.negate();
	} else {
		return result;
	}
};
thx_bigint_Bigs.square = function(a) {
	var l = a.length;
	var r = thx_bigint_Bigs.createFloatArray(l + l);
	var product;
	var carry;
	var a_i;
	var a_j;
	var _g1 = 0;
	while(_g1 < l) {
		var i = _g1++;
		a_i = a[i];
		var _g3 = 0;
		while(_g3 < l) {
			var j = _g3++;
			a_j = a[j];
			product = a_i * a_j + r[i + j];
			var value = product / 10000000;
			if(value < 0.0) {
				carry = Math.ceil(value);
			} else {
				carry = Math.floor(value);
			}
			var tmp = i + j;
			var value1 = product - carry * 10000000;
			r[tmp] = value1 < 0.0?Math.ceil(value1):Math.floor(value1);
			r[i + j + 1] += carry;
		}
	}
	var arr = r.map(function(v) {
		return v | 0;
	});
	thx_bigint_Bigs.trim(arr);
	return arr;
};
thx_bigint_Bigs.divMod1 = function(a,b) {
	var a_l = a.length;
	var b_l = b.length;
	var result = thx_bigint_Bigs.createFloatArray(b.length);
	var divisorMostSignificantDigit = b[b_l - 1];
	var lambda = Math.ceil(10000000 / (2 * divisorMostSignificantDigit));
	var remainder = thx_bigint_Bigs.multiplySmall(a,lambda).map(function(v) {
		return v;
	});
	var divisor = thx_bigint_Bigs.multiplySmall(b,lambda);
	var quotientDigit;
	var shift;
	var carry;
	var borrow;
	var l;
	var q;
	if(remainder.length <= a_l) {
		remainder.push(0.0);
	}
	divisor.push(0);
	divisorMostSignificantDigit = divisor[b_l - 1];
	shift = a_l - b_l;
	while(shift >= 0) {
		quotientDigit = 9999999.;
		quotientDigit = Math.floor((remainder[shift + b_l] * 10000000 + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);
		carry = 0.0;
		borrow = 0.0;
		l = divisor.length;
		var _g1 = 0;
		while(_g1 < l) {
			var i = _g1++;
			carry += quotientDigit * divisor[i];
			var value = carry / 10000000;
			if(value < 0.0) {
				q = Math.ceil(value);
			} else {
				q = Math.floor(value);
			}
			borrow += remainder[shift + i] - (carry - q * 10000000);
			carry = q;
			if(borrow < 0.0) {
				remainder[shift + i] = borrow + 10000000;
				borrow = -1.0;
			} else {
				remainder[shift + i] = borrow;
				borrow = 0.0;
			}
		}
		while(borrow != 0) {
			--quotientDigit;
			carry = 0;
			var _g11 = 0;
			while(_g11 < l) {
				var i1 = _g11++;
				carry += remainder[shift + i1] - 10000000 + divisor[i1];
				if(carry < 0) {
					remainder[shift + i1] = carry + 10000000;
					carry = 0;
				} else {
					remainder[shift + i1] = carry;
					carry = 1;
				}
			}
			borrow += carry;
		}
		result[shift] = quotientDigit;
		--shift;
	}
	var remainder1 = thx_bigint_Bigs.divModSmall(remainder.map(function(v1) {
		return v1 | 0;
	}),lambda).q;
	var arr = result.map(function(v2) {
		return v2 | 0;
	});
	thx_bigint_Bigs.trim(arr);
	return [{ small : thx_bigint_Bigs.arrayToSmall(arr), big : arr},{ small : thx_bigint_Bigs.arrayToSmall(remainder1), big : remainder1}];
};
thx_bigint_Bigs.divMod2 = function(a,b) {
	var a_l = a.length;
	var b_l = b.length;
	var result = [];
	var part = [];
	var guess;
	var xlen;
	var highx;
	var highy;
	var check;
	while(a_l != 0) {
		part.unshift(a[--a_l]);
		if(thx_bigint_Bigs.compareToAbs(part,b) < 0) {
			result.push(0);
			continue;
		}
		xlen = part.length;
		highx = part[xlen - 1] * 10000000 + part[xlen - 2];
		highy = b[b_l - 1] * 10000000 + b[b_l - 2];
		if(xlen > b_l) {
			highx = (highx + 1) * 10000000;
		}
		guess = Math.ceil(highx / highy);
		while(true) {
			check = thx_bigint_Bigs.multiplySmall(b,guess);
			if(thx_bigint_Bigs.compareToAbs(check,part) <= 0) {
				break;
			}
			--guess;
			if(!(guess != 0)) {
				break;
			}
		}
		result.push(guess);
		part = thx_bigint_Bigs.subtract(part,check);
	}
	result.reverse();
	return [{ small : thx_bigint_Bigs.arrayToSmall(result), big : result},{ small : thx_bigint_Bigs.arrayToSmall(part), big : part}];
};
thx_bigint_Bigs.divModSmall = function(value,lambda) {
	var length = value.length;
	var quotient = thx_bigint_Bigs.createArray(length);
	var i;
	var q;
	var remainder;
	var divisor;
	remainder = 0;
	i = length - 1;
	while(i >= 0) {
		divisor = remainder * 10000000 + value[i];
		var value1 = divisor / lambda;
		if(value1 < 0.0) {
			q = Math.ceil(value1);
		} else {
			q = Math.floor(value1);
		}
		remainder = divisor - q * lambda;
		quotient[i--] = q | 0;
	}
	return { q : quotient, r : remainder < 0.0?Math.ceil(remainder):Math.floor(remainder)};
};
thx_bigint_Bigs.parseBase = function(text,base) {
	var val = thx_bigint_Small.zero;
	var pow = thx_bigint_Small.one;
	var bigBase = new thx_bigint_Small(base);
	var isNegative = text.substring(0,1) == "-";
	if(2 > base || base > 36) {
		throw new thx_Error("base (" + base + ") must be a number between 2 ad 36",null,{ fileName : "Bigs.hx", lineNumber : 475, className : "thx.bigint.Bigs", methodName : "parseBase"});
	}
	if(isNegative) {
		text = text.substring(1);
	}
	text = thx_Strings.trimCharsLeft(text,"0").toLowerCase();
	if(text.length == 0) {
		text = "0";
	}
	var e;
	var tmp;
	if(base == 10) {
		e = text.indexOf("e");
		tmp = e > 0;
	} else {
		tmp = false;
	}
	if(tmp) {
		var sexp = text.substring(e + 1);
		text = text.substring(0,e);
		var exp = StringTools.startsWith(sexp,"+")?Std.parseInt(sexp.substring(1)):Std.parseInt(sexp);
		var decimalPlace = text.indexOf(".");
		if(decimalPlace >= 0) {
			exp -= text.length - decimalPlace;
			text = text.substring(0,decimalPlace) + text.substring(1 + decimalPlace);
		}
		text = thx_Strings.rpad(text,"0",text.length + exp);
	}
	var length = text.length;
	if(length <= thx_bigint_Bigs.LOG_MAX_INT / Math.log(base)) {
		return new thx_bigint_Small(thx_Ints.parse(text,base) * (isNegative?-1:1));
	}
	var digits = [];
	var _g1 = 0;
	while(_g1 < length) {
		var charCode = HxOverrides.cca(text,_g1++);
		if(48 <= charCode && charCode <= 57) {
			digits.push(new thx_bigint_Small(charCode - 48));
		} else if(97 <= charCode && charCode <= 122) {
			digits.push(new thx_bigint_Small(charCode - 87));
		} else {
			throw new thx_Error("" + text + " is not a valid string",null,{ fileName : "Bigs.hx", lineNumber : 509, className : "thx.bigint.Bigs", methodName : "parseBase"});
		}
	}
	digits.reverse();
	var mul;
	var _g11 = 0;
	var _g = digits.length;
	while(_g11 < _g) {
		mul = digits[_g11++].multiply(pow);
		val = val.add(mul);
		pow = pow.multiply(bigBase);
	}
	if(isNegative) {
		return val.negate();
	} else {
		return val;
	}
};
thx_bigint_Bigs.bitwise = function(x,y,fn) {
	var xSign = x.sign;
	var ySign = y.sign;
	var xRem = xSign?x.not():x;
	var yRem = ySign?y.not():y;
	var xBits = [];
	var yBits = [];
	var xStop = false;
	var yStop = false;
	while(!xStop || !yStop) {
		if(xRem.isZero()) {
			xStop = true;
			xBits.push(xSign?1:0);
		} else if(xSign) {
			xBits.push(xRem.isEven()?1:0);
		} else {
			xBits.push(xRem.isEven()?0:1);
		}
		if(yRem.isZero()) {
			yStop = true;
			yBits.push(ySign?1:0);
		} else if(ySign) {
			yBits.push(yRem.isEven()?1:0);
		} else {
			yBits.push(yRem.isEven()?0:1);
		}
		xRem = xRem.divide(thx_bigint_Small.two);
		yRem = yRem.divide(thx_bigint_Small.two);
	}
	var result = [];
	var _g1 = 0;
	var _g = xBits.length;
	while(_g1 < _g) {
		var i = _g1++;
		result.push(fn(xBits[i],yBits[i]));
	}
	var a = thx_bigint_Bigs.fromInt(result.pop());
	var p = thx_bigint_Small.two.pow(thx_bigint_Bigs.fromInt(result.length));
	var sum = a.negate().multiply(p);
	while(result.length > 0) {
		a = thx_bigint_Bigs.fromInt(result.pop());
		p = thx_bigint_Small.two.pow(thx_bigint_Bigs.fromInt(result.length));
		sum = sum.add(a.multiply(p));
	}
	return sum;
};
var thx_bigint_Big = function(value,sign) {
	this.sign = sign;
	this.value = value;
	this.isSmall = false;
};
thx_bigint_Big.__name__ = ["thx","bigint","Big"];
thx_bigint_Big.__interfaces__ = [thx_bigint_BigIntImpl];
thx_bigint_Big.prototype = {
	value: null
	,sign: null
	,isSmall: null
	,add: function(that) {
		if(that.isZero()) {
			return this;
		}
		if(this.isZero()) {
			return that;
		}
		if(this.sign != that.sign) {
			return this.subtract(that.negate());
		}
		if(that.isSmall) {
			return this.addSmall(that);
		} else {
			return this.addBig(that);
		}
	}
	,addSmall: function(small) {
		var v = small.value;
		return new thx_bigint_Big(thx_bigint_Bigs.addSmall(this.value,v < 0?-v:v),this.sign);
	}
	,addBig: function(big) {
		return new thx_bigint_Big(thx_bigint_Bigs.addAny(this.value,big.value),this.sign);
	}
	,subtract: function(that) {
		if(that.isZero()) {
			return this;
		}
		if(this.isZero()) {
			return that.negate();
		}
		if(this.sign != that.sign) {
			return this.add(that.negate());
		}
		if(that.isSmall) {
			return this.subtractSmall(that);
		} else {
			return this.subtractBig(that);
		}
	}
	,subtractSmall: function(small) {
		var v = small.value;
		return thx_bigint_Bigs.subtractSmall(this.value,v < 0?-v:v,this.sign);
	}
	,subtractBig: function(big) {
		return thx_bigint_Bigs.subtractAny(this.value,big.value,this.sign);
	}
	,divide: function(that) {
		return this.divMod(that).quotient;
	}
	,divMod: function(that) {
		if(that.isZero()) {
			throw new thx_Error("division by zero",null,{ fileName : "Big.hx", lineNumber : 55, className : "thx.bigint.Big", methodName : "divMod"});
		}
		if(that.isSmall) {
			return this.divModSmall(that);
		} else {
			return this.divModBig(that);
		}
	}
	,divModSmall: function(small) {
		var v = small.value;
		var values = thx_bigint_Bigs.divModSmall(this.value,v < 0?-v:v);
		var quotient = thx_bigint_Bigs.arrayToSmall(values.q);
		var remainder = values.r;
		if(this.sign) {
			remainder = -remainder;
		}
		if(null != quotient) {
			if(this.sign != small.sign) {
				quotient = -quotient;
			}
			return { quotient : new thx_bigint_Small(quotient), remainder : new thx_bigint_Small(remainder)};
		}
		return { quotient : new thx_bigint_Big(values.q,this.sign != small.sign), remainder : new thx_bigint_Small(remainder)};
	}
	,divModBig: function(big) {
		var comparison = thx_bigint_Bigs.compareToAbs(this.value,big.value);
		if(comparison == -1) {
			return { quotient : thx_bigint_Small.zero, remainder : this};
		}
		if(comparison == 0) {
			return { quotient : this.sign == big.sign?thx_bigint_Small.one:thx_bigint_Small.negativeOne, remainder : thx_bigint_Small.zero};
		}
		var values = this.value.length + big.value.length <= 200?thx_bigint_Bigs.divMod1(this.value,big.value):thx_bigint_Bigs.divMod2(this.value,big.value);
		var q = values[0].small;
		var quotient;
		var remainder;
		var qSign = this.sign != big.sign;
		var r = values[1].small;
		var mSign = this.sign;
		if(null != q) {
			if(qSign) {
				q = -q;
			}
			quotient = new thx_bigint_Small(q);
		} else {
			quotient = new thx_bigint_Big(values[0].big,qSign);
		}
		if(null != r) {
			if(mSign) {
				r = -r;
			}
			remainder = new thx_bigint_Small(r);
		} else {
			remainder = new thx_bigint_Big(values[1].big,mSign);
		}
		return { quotient : quotient, remainder : remainder};
	}
	,multiply: function(that) {
		if(that.isZero()) {
			return thx_bigint_Small.zero;
		}
		if(that.isSmall) {
			return this.multiplySmall(that);
		} else {
			return this.multiplyBig(that);
		}
	}
	,multiplySmall: function(small) {
		var v = small.value;
		return new thx_bigint_Big(thx_bigint_Bigs.multiplyLong(this.value,thx_bigint_Bigs.smallToArray(v < 0?-v:v)),this.sign != small.sign);
	}
	,multiplyBig: function(big) {
		if(this.value.length + big.value.length > 4000) {
			return new thx_bigint_Big(thx_bigint_Bigs.multiplyKaratsuba(this.value,big.value),this.sign != big.sign);
		}
		return new thx_bigint_Big(thx_bigint_Bigs.multiplyLong(this.value,big.value),this.sign != big.sign);
	}
	,modulo: function(that) {
		return this.divMod(that).remainder;
	}
	,random: function() {
		var length = this.value.length - 1;
		var result = [];
		var restricted = true;
		var i = length;
		var top;
		var digit;
		while(i >= 0) {
			if(restricted) {
				top = this.value[i];
			} else {
				top = 10000000;
			}
			var value = Math.random() * top;
			if(value < 0.0) {
				digit = Math.ceil(value);
			} else {
				digit = Math.floor(value);
			}
			result.unshift(digit);
			if(digit < top) {
				restricted = false;
			}
			--i;
		}
		var v = thx_bigint_Bigs.arrayToSmall(result);
		if(null != v) {
			return new thx_bigint_Small(v);
		} else {
			return new thx_bigint_Big(result,false);
		}
	}
	,abs: function() {
		return new thx_bigint_Big(this.value,false);
	}
	,negate: function() {
		return new thx_bigint_Big(this.value,!this.sign);
	}
	,next: function() {
		return this.add(thx_bigint_Small.one);
	}
	,prev: function() {
		return this.subtract(thx_bigint_Small.one);
	}
	,pow: function(exp) {
		if(this.isZero()) {
			if(exp.isZero()) {
				return thx_bigint_Small.one;
			} else {
				return this;
			}
		}
		if(this.isUnit()) {
			if(this.sign) {
				if(exp.isEven()) {
					return thx_bigint_Small.one;
				} else {
					return thx_bigint_Small.negativeOne;
				}
			} else {
				return thx_bigint_Small.one;
			}
		}
		if(exp.sign) {
			return thx_bigint_Small.zero;
		}
		if(!exp.isSmall) {
			throw new thx_Error("The exponent " + Std.string(exp) + " is too large.",null,{ fileName : "Big.hx", lineNumber : 174, className : "thx.bigint.Big", methodName : "pow"});
		}
		var b = exp.value;
		var x = this;
		var y = thx_bigint_Small.one;
		while(true) {
			if((b & 1) == 1) {
				y = y.multiply(x);
				--b;
			}
			if(b == 0) {
				break;
			}
			b = b / 2 | 0;
			x = x.square();
		}
		return y;
	}
	,shiftLeft: function(n) {
		if(n < 0) {
			return this.shiftRight(-n);
		}
		var result = this;
		while(n >= thx_bigint_Bigs.powers2Length) {
			result = result.multiply(thx_bigint_Bigs.bigHighestPower2);
			n -= thx_bigint_Bigs.powers2Length - 1;
		}
		return result.multiply(thx_bigint_Bigs.bigPowersOfTwo[n]);
	}
	,shiftRight: function(n) {
		if(n < 0) {
			return this.shiftLeft(-n);
		}
		var result = this;
		var remQuo;
		while(n >= thx_bigint_Bigs.powers2Length) {
			if(result.isZero()) {
				return result;
			}
			remQuo = result.divMod(thx_bigint_Bigs.bigHighestPower2);
			if(remQuo.remainder.sign) {
				result = remQuo.quotient.prev();
			} else {
				result = remQuo.quotient;
			}
			n -= thx_bigint_Bigs.powers2Length - 1;
		}
		remQuo = result.divMod(thx_bigint_Bigs.bigPowersOfTwo[n]);
		if(remQuo.remainder.sign) {
			return remQuo.quotient.prev();
		} else {
			return remQuo.quotient;
		}
	}
	,square: function() {
		return new thx_bigint_Big(thx_bigint_Bigs.square(this.value),false);
	}
	,isEven: function() {
		return (this.value[0] & 1) == 0;
	}
	,isOdd: function() {
		return (this.value[0] & 1) == 1;
	}
	,isZero: function() {
		return this.value.length == 0;
	}
	,isUnit: function() {
		return false;
	}
	,compareTo: function(that) {
		if(this.sign != that.sign) {
			if(this.sign) {
				return -1;
			} else {
				return 1;
			}
		}
		if(that.isSmall) {
			return this.compareToSmall(that);
		} else {
			return this.compareToBig(that);
		}
	}
	,compareToSmall: function(small) {
		var v = small.value;
		return thx_bigint_Bigs.compareToAbs(this.value,thx_bigint_Bigs.smallToArray(v < 0?-v:v)) * (this.sign?-1:1);
	}
	,compareToBig: function(big) {
		return thx_bigint_Bigs.compareToAbs(this.value,big.value) * (this.sign?-1:1);
	}
	,compareToAbs: function(that) {
		if(that.isSmall) {
			return this.compareToAbsSmall(that);
		} else {
			return this.compareToAbsBig(that);
		}
	}
	,compareToAbsSmall: function(small) {
		var v = small.value;
		return thx_bigint_Bigs.compareToAbs(this.value,thx_bigint_Bigs.smallToArray(v < 0?-v:v));
	}
	,compareToAbsBig: function(big) {
		return thx_bigint_Bigs.compareToAbs(this.value,big.value);
	}
	,not: function() {
		return this.negate().prev();
	}
	,and: function(that) {
		return thx_bigint_Bigs.bitwise(this,that,function(a,b) {
			return a & b;
		});
	}
	,or: function(that) {
		return thx_bigint_Bigs.bitwise(this,that,function(a,b) {
			return a | b;
		});
	}
	,xor: function(that) {
		return thx_bigint_Bigs.bitwise(this,that,function(a,b) {
			return a ^ b;
		});
	}
	,toFloat: function() {
		var x = this.toString();
		return parseFloat(x);
	}
	,toInt: function() {
		var v = thx_bigint_Bigs.arrayToSmall(this.value);
		if(null == v) {
			throw new thx_Error("overflow",null,{ fileName : "Big.hx", lineNumber : 274, className : "thx.bigint.Big", methodName : "toInt"});
		}
		return (this.sign?-1:1) * v;
	}
	,toString: function() {
		return this.toStringWithBase(10);
	}
	,toStringWithBase: function(base) {
		if(this.isZero()) {
			return "0";
		}
		if(base == 10) {
			var l = this.value.length;
			var out = "" + this.value[--l];
			var digit;
			while(--l >= 0) {
				digit = "" + this.value[l];
				out += "0000000".substring(digit.length) + digit;
			}
			return (this.sign?"-":"") + out;
		}
		var out1 = [];
		var baseBig = new thx_bigint_Small(base);
		var left = this;
		var divmod;
		while(left.sign || left.compareToAbs(baseBig) >= 0) {
			divmod = left.divMod(baseBig);
			left = divmod.quotient;
			var digit1 = divmod.remainder;
			if(digit1.sign) {
				digit1 = baseBig.subtract(digit1).abs();
				left = left.next();
			}
			out1.push(digit1.toStringWithBase(base));
		}
		out1.push(left.toStringWithBase(base));
		out1.reverse();
		return (this.sign?"-":"") + out1.join("");
	}
	,__class__: thx_bigint_Big
};
var thx_bigint_DecimalImpl = function(value,scale) {
	this.value = value;
	this.scale = scale;
};
thx_bigint_DecimalImpl.__name__ = ["thx","bigint","DecimalImpl"];
thx_bigint_DecimalImpl.randomBetween = function(a,b) {
	var lhs = a.matchScale(b);
	return new thx_bigint_DecimalImpl(thx__$BigInt_BigInt_$Impl_$.randomBetween(lhs.value,b.matchScale(a).value),lhs.scale);
};
thx_bigint_DecimalImpl.prototype = {
	value: null
	,scale: null
	,add: function(that) {
		var lhs = this.matchScale(that);
		return new thx_bigint_DecimalImpl(lhs.value.add(that.matchScale(this).value),lhs.scale);
	}
	,subtract: function(that) {
		var lhs = this.matchScale(that);
		return new thx_bigint_DecimalImpl(lhs.value.subtract(that.matchScale(this).value),lhs.scale);
	}
	,divide: function(that) {
		return this.divideWithScale(that,thx_bigint_Decimals.divisionExtraScale);
	}
	,divideWithScale: function(that,scale) {
		if(that.isZero()) {
			throw new thx_Error("division by zero",null,{ fileName : "DecimalImpl.hx", lineNumber : 42, className : "thx.bigint.DecimalImpl", methodName : "divideWithScale"});
		}
		var lhs = this.matchScale(that);
		var rhs = that.matchScale(this);
		var qr = lhs.value.multiply(thx_bigint_Small.ten.pow(thx_bigint_Bigs.fromInt(rhs.scale + scale))).divMod(rhs.value);
		var nscale = rhs.scale + scale;
		return new thx_bigint_DecimalImpl(qr.quotient,nscale).trim(nscale);
	}
	,moduloWithScale: function(that,scale) {
		if(that.isZero()) {
			throw new thx_Error("modulo by zero",null,{ fileName : "DecimalImpl.hx", lineNumber : 53, className : "thx.bigint.DecimalImpl", methodName : "moduloWithScale"});
		}
		var lhs = this.matchScale(that);
		var rhs = that.matchScale(this);
		var pow = thx_bigint_Small.ten.pow(thx_bigint_Bigs.fromInt(scale));
		var qr = lhs.value.multiply(pow).divMod(rhs.value.multiply(pow));
		var nscale = lhs.scale + scale;
		return new thx_bigint_DecimalImpl(qr.remainder,nscale).trim(nscale);
	}
	,multiply: function(that) {
		return new thx_bigint_DecimalImpl(this.value.multiply(that.value),this.scale + that.scale);
	}
	,modulo: function(that) {
		return this.moduloWithScale(that,thx_bigint_Decimals.divisionExtraScale);
	}
	,abs: function() {
		return new thx_bigint_DecimalImpl(this.value.abs(),this.scale);
	}
	,negate: function() {
		return new thx_bigint_DecimalImpl(this.value.negate(),this.scale);
	}
	,next: function() {
		return this.add(thx_bigint_DecimalImpl.one);
	}
	,prev: function() {
		return this.subtract(thx_bigint_DecimalImpl.one);
	}
	,pow: function(exp) {
		if(exp < 0) {
			return thx__$Decimal_Decimal_$Impl_$.one.divideWithScale(thx__$Decimal_Decimal_$Impl_$.fromBigInt(this.value.pow(thx_bigint_Bigs.fromInt(-exp))),(this.scale + 1) * -exp);
		} else {
			return new thx_bigint_DecimalImpl(this.value.pow(thx_bigint_Bigs.fromInt(exp)),this.scale * exp);
		}
	}
	,ceilTo: function(newscale) {
		if(this.isZero()) {
			return this;
		}
		var scaled = this.scaleTo(newscale);
		if((scaled.isZero()?thx_bigint_DecimalImpl.one:this.modulo(scaled)).multiply(thx_bigint_DecimalImpl.ten.pow(newscale)).toFloat() <= 0) {
			return scaled;
		} else {
			return new thx_bigint_DecimalImpl(scaled.value.add(thx_bigint_Small.one),scaled.scale);
		}
	}
	,floorTo: function(newscale) {
		return this.scaleTo(newscale);
	}
	,roundTo: function(newscale) {
		if(this.isZero()) {
			return this;
		}
		var scaled = this.scaleTo(newscale);
		if((scaled.isZero()?thx_bigint_DecimalImpl.one:this.modulo(scaled)).multiply(thx_bigint_DecimalImpl.ten.pow(newscale)).toFloat() < 0.5) {
			return scaled;
		} else {
			return new thx_bigint_DecimalImpl(scaled.value.add(thx_bigint_Small.one),scaled.scale);
		}
	}
	,scaleTo: function(newscale) {
		if(newscale == this.scale) {
			return this;
		}
		if(newscale > this.scale) {
			return new thx_bigint_DecimalImpl(this.value.multiply(thx_bigint_Small.ten.pow(thx_bigint_Bigs.fromInt(newscale - this.scale))),newscale);
		} else {
			return new thx_bigint_DecimalImpl(this.value.divide(thx_bigint_Small.ten.pow(thx_bigint_Bigs.fromInt(this.scale - newscale))),newscale);
		}
	}
	,square: function() {
		return this.multiply(this);
	}
	,isNegative: function() {
		return this.value.sign;
	}
	,isEven: function() {
		return this.value.isEven();
	}
	,isOdd: function() {
		return this.value.isOdd();
	}
	,isZero: function() {
		return this.value.isZero();
	}
	,compareTo: function(that) {
		return this.matchScale(that).value.compareTo(that.matchScale(this).value);
	}
	,compareToAbs: function(that) {
		return this.matchScale(that).value.compareToAbs(that.matchScale(this).value);
	}
	,trim: function(min) {
		if(min == null) {
			min = 0;
		}
		if(this.scale == 0) {
			return this;
		}
		var s = this.toString();
		var parts = s.split(".");
		var dec = thx_Strings.rpad(thx_Strings.trimCharsRight(parts[1],"0"),"0",min);
		if(dec.length > 0) {
			s = parts[0] + "." + dec;
		} else {
			s = parts[0];
		}
		return thx_bigint_Decimals.parse(s);
	}
	,toFloat: function() {
		var x = this.toString();
		return parseFloat(x);
	}
	,toInt: function() {
		return this.value.divide(thx_bigint_Small.ten.pow(thx_bigint_Bigs.fromInt(this.scale))).toInt();
	}
	,toString: function() {
		var sign = this.value.sign;
		var i = (sign?this.value.negate():this.value).toString();
		var l = i.length;
		if(this.scale == 0) {
			return (sign?"-":"") + i;
		} else if(i.length <= this.scale) {
			return (sign?"-":"") + "0." + thx_Strings.lpad(i,"0",this.scale);
		} else {
			return (sign?"-":"") + i.substring(0,l - this.scale) + "." + i.substring(l - this.scale);
		}
	}
	,matchScale: function(that) {
		if(this.scale >= that.scale) {
			return this;
		}
		return this.scaleTo(that.scale);
	}
	,__class__: thx_bigint_DecimalImpl
};
var thx__$Decimal_Decimal_$Impl_$ = {};
thx__$Decimal_Decimal_$Impl_$.__name__ = ["thx","_Decimal","Decimal_Impl_"];
thx__$Decimal_Decimal_$Impl_$.fromInt64 = function(value) {
	return new thx_bigint_DecimalImpl(thx_bigint_Bigs.fromInt64(value),0);
};
thx__$Decimal_Decimal_$Impl_$.fromBigInt = function(value) {
	return new thx_bigint_DecimalImpl(value,0);
};
thx__$Decimal_Decimal_$Impl_$.fromInt = function(value) {
	return thx_bigint_Decimals.fromInt(value);
};
thx__$Decimal_Decimal_$Impl_$.fromFloat = function(value) {
	return thx_bigint_Decimals.fromFloat(value);
};
thx__$Decimal_Decimal_$Impl_$.fromString = function(value) {
	return thx_bigint_Decimals.parse(value);
};
thx__$Decimal_Decimal_$Impl_$.randomBetween = function(a,b) {
	return thx_bigint_DecimalImpl.randomBetween(a,b);
};
thx__$Decimal_Decimal_$Impl_$.compare = function(a,b) {
	return a.compareTo(b);
};
thx__$Decimal_Decimal_$Impl_$.isZero = function(this1) {
	return this1.isZero();
};
thx__$Decimal_Decimal_$Impl_$.abs = function(this1) {
	return this1.abs();
};
thx__$Decimal_Decimal_$Impl_$.compareTo = function(this1,that) {
	return this1.compareTo(that);
};
thx__$Decimal_Decimal_$Impl_$.compareAbs = function(this1,that) {
	return this1.compareToAbs(that);
};
thx__$Decimal_Decimal_$Impl_$.next = function(this1) {
	return this1.next();
};
thx__$Decimal_Decimal_$Impl_$.prev = function(this1) {
	return this1.prev();
};
thx__$Decimal_Decimal_$Impl_$.square = function(this1) {
	return this1.square();
};
thx__$Decimal_Decimal_$Impl_$.pow = function(this1,exp) {
	return this1.pow(exp);
};
thx__$Decimal_Decimal_$Impl_$.isEven = function(this1) {
	return this1.isEven();
};
thx__$Decimal_Decimal_$Impl_$.isOdd = function(this1) {
	return this1.isOdd();
};
thx__$Decimal_Decimal_$Impl_$.isNegative = function(this1) {
	return this1.isNegative();
};
thx__$Decimal_Decimal_$Impl_$.isPositive = function(this1) {
	return this1.compareTo(thx__$Decimal_Decimal_$Impl_$.zero) > 0;
};
thx__$Decimal_Decimal_$Impl_$.max = function(this1,that) {
	if(thx__$Decimal_Decimal_$Impl_$.greater(this1,that)) {
		return this1;
	} else {
		return that;
	}
};
thx__$Decimal_Decimal_$Impl_$.min = function(this1,that) {
	if(thx__$Decimal_Decimal_$Impl_$.less(this1,that)) {
		return this1;
	} else {
		return that;
	}
};
thx__$Decimal_Decimal_$Impl_$.ceil = function(this1) {
	return this1.ceilTo(0);
};
thx__$Decimal_Decimal_$Impl_$.ceilTo = function(this1,decimals) {
	return this1.ceilTo(decimals);
};
thx__$Decimal_Decimal_$Impl_$.floor = function(this1) {
	return this1.floorTo(0);
};
thx__$Decimal_Decimal_$Impl_$.floorTo = function(this1,decimals) {
	return this1.floorTo(decimals);
};
thx__$Decimal_Decimal_$Impl_$.round = function(this1) {
	return this1.roundTo(0);
};
thx__$Decimal_Decimal_$Impl_$.roundTo = function(this1,decimals) {
	return this1.roundTo(decimals);
};
thx__$Decimal_Decimal_$Impl_$.scaleTo = function(this1,decimals) {
	return this1.scaleTo(decimals);
};
thx__$Decimal_Decimal_$Impl_$.trim = function(this1,mindecimals) {
	return this1.trim(mindecimals);
};
thx__$Decimal_Decimal_$Impl_$.greaterThan = function(this1,that) {
	return this1.compareTo(that) > 0;
};
thx__$Decimal_Decimal_$Impl_$.greater = function(self,that) {
	return self.compareTo(that) > 0;
};
thx__$Decimal_Decimal_$Impl_$.greaterEqualsTo = function(this1,that) {
	return this1.compareTo(that) >= 0;
};
thx__$Decimal_Decimal_$Impl_$.greaterEquals = function(self,that) {
	return self.compareTo(that) >= 0;
};
thx__$Decimal_Decimal_$Impl_$.lessThan = function(this1,that) {
	return this1.compareTo(that) < 0;
};
thx__$Decimal_Decimal_$Impl_$.less = function(self,that) {
	return self.compareTo(that) < 0;
};
thx__$Decimal_Decimal_$Impl_$.lessEqualsTo = function(this1,that) {
	return this1.compareTo(that) <= 0;
};
thx__$Decimal_Decimal_$Impl_$.lessEquals = function(self,that) {
	return self.compareTo(that) <= 0;
};
thx__$Decimal_Decimal_$Impl_$.equalsTo = function(this1,that) {
	return this1.compareTo(that) == 0;
};
thx__$Decimal_Decimal_$Impl_$.equals = function(self,that) {
	return self.compareTo(that) == 0;
};
thx__$Decimal_Decimal_$Impl_$.notEqualsTo = function(this1,that) {
	return this1.compareTo(that) != 0;
};
thx__$Decimal_Decimal_$Impl_$.notEquals = function(self,that) {
	return self.compareTo(that) != 0;
};
thx__$Decimal_Decimal_$Impl_$.add = function(this1,that) {
	return this1.add(that);
};
thx__$Decimal_Decimal_$Impl_$.subtract = function(this1,that) {
	return this1.subtract(that);
};
thx__$Decimal_Decimal_$Impl_$.negate = function(this1) {
	return this1.negate();
};
thx__$Decimal_Decimal_$Impl_$.preIncrement = function(this1) {
	this1 = this1.add(thx__$Decimal_Decimal_$Impl_$.one);
	return this1;
};
thx__$Decimal_Decimal_$Impl_$.postIncrement = function(this1) {
	var v = this1;
	this1 = this1.add(thx__$Decimal_Decimal_$Impl_$.one);
	return v;
};
thx__$Decimal_Decimal_$Impl_$.preDecrement = function(this1) {
	this1 = this1.subtract(thx__$Decimal_Decimal_$Impl_$.one);
	return this1;
};
thx__$Decimal_Decimal_$Impl_$.postDecrement = function(this1) {
	var v = this1;
	this1 = this1.subtract(thx__$Decimal_Decimal_$Impl_$.one);
	return v;
};
thx__$Decimal_Decimal_$Impl_$.multiply = function(this1,that) {
	return this1.multiply(that);
};
thx__$Decimal_Decimal_$Impl_$.divide = function(this1,that) {
	return this1.divide(that);
};
thx__$Decimal_Decimal_$Impl_$.modulo = function(this1,that) {
	return this1.modulo(that);
};
thx__$Decimal_Decimal_$Impl_$.toInt = function(this1) {
	return this1.toInt();
};
thx__$Decimal_Decimal_$Impl_$.toInt64 = function(this1) {
	return thx_bigint_Bigs.toInt64(thx__$Decimal_Decimal_$Impl_$.toBigInt(this1));
};
thx__$Decimal_Decimal_$Impl_$.toBigInt = function(this1) {
	return this1.value.divide(thx_bigint_Small.ten.pow(thx_bigint_Bigs.fromInt(this1.scale)));
};
thx__$Decimal_Decimal_$Impl_$.toFloat = function(this1) {
	return this1.toFloat();
};
thx__$Decimal_Decimal_$Impl_$.toString = function(this1) {
	return this1.toString();
};
thx__$Decimal_Decimal_$Impl_$.get_divisionScale = function() {
	return thx_bigint_Decimals.divisionExtraScale;
};
thx__$Decimal_Decimal_$Impl_$.set_divisionScale = function(v) {
	return thx_bigint_Decimals.divisionExtraScale = v;
};
var thx_Dynamics = function() { };
thx_Dynamics.__name__ = ["thx","Dynamics"];
thx_Dynamics.equals = function(a,b) {
	if(!thx_Types.sameType(a,b)) {
		return false;
	}
	if(a == b) {
		return true;
	}
	var _g = Type["typeof"](a);
	switch(_g[1]) {
	case 0:case 1:case 2:case 3:
		return false;
	case 4:
		var fa = Reflect.fields(a);
		var fb = Reflect.fields(b);
		var _g1 = 0;
		while(_g1 < fa.length) {
			var field = fa[_g1];
			++_g1;
			HxOverrides.remove(fb,field);
			if(!Object.prototype.hasOwnProperty.call(b,field)) {
				return false;
			}
			var va = Reflect.field(a,field);
			if(Reflect.isFunction(va)) {
				continue;
			}
			var vb = Reflect.field(b,field);
			if(!thx_Dynamics.equals(va,vb)) {
				return false;
			}
		}
		if(fb.length > 0) {
			return false;
		}
		var t = false;
		var tmp;
		t = thx_Iterators.isIterator(a);
		if(!t) {
			tmp = thx_Iterables.isIterable(a);
		} else {
			tmp = true;
		}
		if(tmp) {
			if(t && !thx_Iterators.isIterator(b)) {
				return false;
			}
			if(!t && !thx_Iterables.isIterable(b)) {
				return false;
			}
			var aa = t?thx_Iterators.toArray(a):thx_Iterators.toArray($iterator(a)());
			var ab = t?thx_Iterators.toArray(b):thx_Iterators.toArray($iterator(b)());
			if(aa.length != ab.length) {
				return false;
			}
			var _g11 = 0;
			var _g2 = aa.length;
			while(_g11 < _g2) {
				var i = _g11++;
				if(!thx_Dynamics.equals(aa[i],ab[i])) {
					return false;
				}
			}
			return true;
		}
		return true;
	case 5:
		return Reflect.compareMethods(a,b);
	case 6:
		var c = _g[2];
		var ca = Type.getClassName(c);
		var cb = Type.getClassName(b == null?null:js_Boot.getClass(b));
		if(ca != cb) {
			return false;
		}
		if(typeof(a) == "string") {
			return false;
		}
		if((a instanceof Array) && a.__enum__ == null) {
			var aa1 = a;
			var ab1 = b;
			if(aa1.length != ab1.length) {
				return false;
			}
			var _g12 = 0;
			var _g3 = aa1.length;
			while(_g12 < _g3) {
				var i1 = _g12++;
				if(!thx_Dynamics.equals(aa1[i1],ab1[i1])) {
					return false;
				}
			}
			return true;
		}
		if(js_Boot.__instanceof(a,Date)) {
			return a.getTime() == b.getTime();
		}
		if(js_Boot.__instanceof(a,haxe_IMap)) {
			var ha = a;
			var hb = b;
			var ka = thx_Iterators.toArray(ha.keys());
			var kb = thx_Iterators.toArray(hb.keys());
			if(ka.length != kb.length) {
				return false;
			}
			var _g4 = 0;
			while(_g4 < ka.length) {
				var key = ka[_g4];
				++_g4;
				if(!hb.exists(key) || !thx_Dynamics.equals(ha.get(key),hb.get(key))) {
					return false;
				}
			}
			return true;
		}
		var t1 = false;
		var tmp1;
		t1 = thx_Iterators.isIterator(a);
		if(!t1) {
			tmp1 = thx_Iterables.isIterable(a);
		} else {
			tmp1 = true;
		}
		if(tmp1) {
			var va1 = t1?thx_Iterators.toArray(a):thx_Iterators.toArray($iterator(a)());
			var vb1 = t1?thx_Iterators.toArray(b):thx_Iterators.toArray($iterator(b)());
			if(va1.length != vb1.length) {
				return false;
			}
			var _g13 = 0;
			var _g5 = va1.length;
			while(_g13 < _g5) {
				var i2 = _g13++;
				if(!thx_Dynamics.equals(va1[i2],vb1[i2])) {
					return false;
				}
			}
			return true;
		}
		var f = null;
		var tmp2;
		if(Object.prototype.hasOwnProperty.call(a,"equals")) {
			f = Reflect.field(a,"equals");
			tmp2 = Reflect.isFunction(f);
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			return f.apply(a,[b]);
		}
		var fields = Type.getInstanceFields(a == null?null:js_Boot.getClass(a));
		var _g6 = 0;
		while(_g6 < fields.length) {
			var field1 = fields[_g6];
			++_g6;
			var va2 = Reflect.field(a,field1);
			if(Reflect.isFunction(va2)) {
				continue;
			}
			var vb2 = Reflect.field(b,field1);
			if(!thx_Dynamics.equals(va2,vb2)) {
				return false;
			}
		}
		return true;
	case 7:
		var e = _g[2];
		var ea = Type.getEnumName(e);
		var teb = Type.getEnum(b);
		var eb = Type.getEnumName(teb);
		if(ea != eb) {
			return false;
		}
		if(a[1] != b[1]) {
			return false;
		}
		var pa = a.slice(2);
		var pb = b.slice(2);
		var _g14 = 0;
		var _g7 = pa.length;
		while(_g14 < _g7) {
			var i3 = _g14++;
			if(!thx_Dynamics.equals(pa[i3],pb[i3])) {
				return false;
			}
		}
		return true;
	case 8:
		throw new js__$Boot_HaxeError("Unable to compare two unknown types");
		break;
	}
};
thx_Dynamics.clone = function(v,cloneInstances) {
	if(cloneInstances == null) {
		cloneInstances = false;
	}
	var _g = Type["typeof"](v);
	switch(_g[1]) {
	case 0:
		return null;
	case 4:
		return thx_Objects.copyTo(v,{ });
	case 6:
		var c = _g[2];
		switch(Type.getClassName(c)) {
		case "Array":
			return v.map(function(v1) {
				return thx_Dynamics.clone(v1,cloneInstances);
			});
		case "Date":case "String":
			return v;
		default:
			if(cloneInstances) {
				var o = Type.createEmptyInstance(c);
				var _g1 = 0;
				var _g11 = Type.getInstanceFields(c);
				while(_g1 < _g11.length) {
					var field = _g11[_g1];
					++_g1;
					o[field] = thx_Dynamics.clone(Reflect.field(v,field),cloneInstances);
				}
				return o;
			} else {
				return v;
			}
		}
		break;
	case 1:case 2:case 3:case 5:case 7:case 8:
		return v;
	}
};
thx_Dynamics.compare = function(a,b) {
	if(null == a && null == b) {
		return 0;
	}
	if(null == a) {
		return -1;
	}
	if(null == b) {
		return 1;
	}
	if(!thx_Types.sameType(a,b)) {
		return haxe_Utf8.compare(thx_Types.toString(Type["typeof"](a)),thx_Types.toString(Type["typeof"](b)));
	}
	var _g = Type["typeof"](a);
	switch(_g[1]) {
	case 1:
		return a - b;
	case 2:
		var a1 = a;
		var b1 = b;
		if(a1 < b1) {
			return -1;
		} else if(a1 > b1) {
			return 1;
		} else {
			return 0;
		}
		break;
	case 3:
		return thx_Bools.compare(a,b);
	case 4:
		return thx_Objects.compare(a,b);
	case 6:
		switch(Type.getClassName(_g[2])) {
		case "Array":
			return thx_Arrays.compare(a,b);
		case "Date":
			return thx_Dates.compare(a,b);
		case "String":
			return haxe_Utf8.compare(a,b);
		default:
			if(Object.prototype.hasOwnProperty.call(a,"compare")) {
				return Reflect.field(a,"compare").apply(a,[b]);
			} else {
				return haxe_Utf8.compare(Std.string(a),Std.string(b));
			}
		}
		break;
	case 7:
		return thx_Enums.compare(a,b);
	default:
		return 0;
	}
};
thx_Dynamics.string = function(v) {
	var _g = Type["typeof"](v);
	switch(_g[1]) {
	case 0:
		return "null";
	case 1:case 2:case 3:
		return "" + Std.string(v);
	case 4:
		return thx_Objects.string(v);
	case 5:
		return "<function>";
	case 6:
		switch(Type.getClassName(_g[2])) {
		case "Array":
			return thx_Arrays.string(v);
		case "Date":
			return HxOverrides.dateStr(v);
		case "String":
			return v;
		default:
			if(js_Boot.__instanceof(v,haxe_IMap)) {
				return thx_Maps.string(v);
			} else {
				return Std.string(v);
			}
		}
		break;
	case 7:
		return thx_Enums.string(v);
	case 8:
		return "<unknown>";
	}
};
var thx_DynamicsT = function() { };
thx_DynamicsT.__name__ = ["thx","DynamicsT"];
thx_DynamicsT.isEmpty = function(o) {
	return Reflect.fields(o).length == 0;
};
thx_DynamicsT.exists = function(o,name) {
	return Object.prototype.hasOwnProperty.call(o,name);
};
thx_DynamicsT.fields = function(o) {
	return Reflect.fields(o);
};
thx_DynamicsT.merge = function(to,from,replacef) {
	if(null == replacef) {
		replacef = function(field,oldv,newv) {
			return newv;
		};
	}
	var _g = 0;
	var _g1 = Reflect.fields(from);
	while(_g < _g1.length) {
		var field1 = _g1[_g];
		++_g;
		var newv1 = Reflect.field(from,field1);
		if(Object.prototype.hasOwnProperty.call(to,field1)) {
			to[field1] = replacef(field1,Reflect.field(to,field1),newv1);
		} else {
			to[field1] = newv1;
		}
	}
	return to;
};
thx_DynamicsT.size = function(o) {
	return Reflect.fields(o).length;
};
thx_DynamicsT.values = function(o) {
	return Reflect.fields(o).map(function(key) {
		return Reflect.field(o,key);
	});
};
thx_DynamicsT.tuples = function(o) {
	return Reflect.fields(o).map(function(key) {
		return { _0 : key, _1 : Reflect.field(o,key)};
	});
};
var thx_ERegs = function() { };
thx_ERegs.__name__ = ["thx","ERegs"];
thx_ERegs.escape = function(text) {
	return thx_ERegs.ESCAPE_PATTERN.map(text,function(ereg) {
		return "\\" + ereg.matched(1);
	});
};
var thx_Effects = function() { };
thx_Effects.__name__ = ["thx","Effects"];
thx_Effects.tap = function(input,f) {
	f(input);
	return input;
};
thx_Effects.traced = function(input,f) {
	haxe_Log.trace(f(input),{ fileName : "Effects.hx", lineNumber : 14, className : "thx.Effects", methodName : "traced"});
	return input;
};
thx_Effects.log = function(input,pos) {
	var a2 = pos;
	(function(a1) {
		thx_Effects.logger(a1,a2);
	})(input);
	return input;
};
var thx_Either = { __ename__ : ["thx","Either"], __constructs__ : ["Left","Right"] };
thx_Either.Left = function(value) { var $x = ["Left",0,value]; $x.__enum__ = thx_Either; return $x; };
thx_Either.Right = function(value) { var $x = ["Right",1,value]; $x.__enum__ = thx_Either; return $x; };
var thx_Eithers = function() { };
thx_Eithers.__name__ = ["thx","Eithers"];
thx_Eithers.isLeft = function(either) {
	switch(either[1]) {
	case 0:
		return true;
	case 1:
		return false;
	}
};
thx_Eithers.isRight = function(either) {
	switch(either[1]) {
	case 0:
		return false;
	case 1:
		return true;
	}
};
thx_Eithers.toLeft = function(either) {
	switch(either[1]) {
	case 0:
		return haxe_ds_Option.Some(either[2]);
	case 1:
		return haxe_ds_Option.None;
	}
};
thx_Eithers.toRight = function(either) {
	switch(either[1]) {
	case 0:
		return haxe_ds_Option.None;
	case 1:
		return haxe_ds_Option.Some(either[2]);
	}
};
thx_Eithers.toLeftUnsafe = function(either) {
	switch(either[1]) {
	case 0:
		return either[2];
	case 1:
		return null;
	}
};
thx_Eithers.toRightUnsafe = function(either) {
	switch(either[1]) {
	case 0:
		return null;
	case 1:
		return either[2];
	}
};
thx_Eithers.map = function(either,f) {
	switch(either[1]) {
	case 0:
		return thx_Either.Left(either[2]);
	case 1:
		return thx_Either.Right(f(either[2]));
	}
};
thx_Eithers.flatMap = function(either,f) {
	switch(either[1]) {
	case 0:
		return thx_Either.Left(either[2]);
	case 1:
		return f(either[2]);
	}
};
thx_Eithers.leftMap = function(either,f) {
	switch(either[1]) {
	case 0:
		return thx_Either.Left(f(either[2]));
	case 1:
		return thx_Either.Right(either[2]);
	}
};
thx_Eithers.orThrow = function(either,message) {
	switch(either[1]) {
	case 0:
		throw new thx_Error("" + message + ": " + Std.string(either[2]),null,{ fileName : "Eithers.hx", lineNumber : 93, className : "thx.Eithers", methodName : "orThrow"});
		break;
	case 1:
		return either[2];
	}
};
thx_Eithers.toVNel = function(either) {
	switch(either[1]) {
	case 0:
		return thx_Either.Left(thx__$Nel_Nel_$Impl_$.pure(either[2]));
	case 1:
		return thx_Either.Right(either[2]);
	}
};
thx_Eithers.cata = function(either,l,r) {
	switch(either[1]) {
	case 0:
		return l(either[2]);
	case 1:
		return r(either[2]);
	}
};
var thx_Enums = function() { };
thx_Enums.__name__ = ["thx","Enums"];
thx_Enums.string = function(e) {
	var cons = e[0];
	var params = [];
	var _g = 0;
	var _g1 = e.slice(2);
	while(_g < _g1.length) {
		var param = _g1[_g];
		++_g;
		params.push(thx_Dynamics.string(param));
	}
	return cons + (params.length == 0?"":"(" + params.join(", ") + ")");
};
thx_Enums.compare = function(a,b) {
	var v = a[1] - b[1];
	if(v != 0) {
		return v;
	}
	return thx_Arrays.compare(a.slice(2),b.slice(2));
};
thx_Enums.sameConstructor = function(a,b) {
	return a[1] == b[1];
};
thx_Enums.min = function(a,b) {
	if(thx_Enums.compare(a,b) < 0) {
		return a;
	} else {
		return b;
	}
};
thx_Enums.max = function(a,b) {
	if(thx_Enums.compare(a,b) > 0) {
		return a;
	} else {
		return b;
	}
};
var thx_Error = function(message,stack,pos) {
	Error.call(this,message);
	this.message = message;
	if(null == stack) {
		try {
			stack = haxe_CallStack.exceptionStack();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			stack = [];
		}
		if(stack.length == 0) {
			try {
				stack = haxe_CallStack.callStack();
			} catch( e1 ) {
				haxe_CallStack.lastException = e1;
				stack = [];
			}
		}
	}
	this.stackItems = stack;
	this.pos = pos;
};
thx_Error.__name__ = ["thx","Error"];
thx_Error.fromDynamic = function(err,pos) {
	if(js_Boot.__instanceof(err,thx_Error)) {
		return err;
	}
	return new thx_error_ErrorWrapper("" + Std.string(err),err,null,pos);
};
thx_Error.__super__ = Error;
thx_Error.prototype = $extend(Error.prototype,{
	pos: null
	,stackItems: null
	,toString: function() {
		return this.message + "\nfrom: " + this.getPosition() + "\n\n" + this.stackToString();
	}
	,getPosition: function() {
		return this.pos.className + "." + this.pos.methodName + "() at " + this.pos.lineNumber;
	}
	,stackToString: function() {
		return haxe_CallStack.toString(this.stackItems);
	}
	,__class__: thx_Error
});
var thx__$Ord_Ord_$Impl_$ = {};
thx__$Ord_Ord_$Impl_$.__name__ = ["thx","_Ord","Ord_Impl_"];
thx__$Ord_Ord_$Impl_$.order = function(this1,a0,a1) {
	return this1(a0,a1);
};
thx__$Ord_Ord_$Impl_$.max = function(this1,a0,a1) {
	switch(this1(a0,a1)[1]) {
	case 1:
		return a0;
	case 0:case 2:
		return a1;
	}
};
thx__$Ord_Ord_$Impl_$.min = function(this1,a0,a1) {
	switch(this1(a0,a1)[1]) {
	case 1:
		return a1;
	case 0:case 2:
		return a0;
	}
};
thx__$Ord_Ord_$Impl_$.equal = function(this1,a0,a1) {
	return this1(a0,a1) == thx_OrderingImpl.EQ;
};
thx__$Ord_Ord_$Impl_$.contramap = function(this1,f) {
	return function(b0,b1) {
		return this1(f(b0),f(b1));
	};
};
thx__$Ord_Ord_$Impl_$.inverse = function(this1) {
	return function(a0,a1) {
		return this1(a1,a0);
	};
};
thx__$Ord_Ord_$Impl_$.intComparison = function(this1,a0,a1) {
	switch(this1(a0,a1)[1]) {
	case 0:
		return -1;
	case 1:
		return 1;
	case 2:
		return 0;
	}
};
thx__$Ord_Ord_$Impl_$.fromIntComparison = function(f) {
	return function(a,b) {
		return thx__$Ord_Ordering_$Impl_$.fromInt(f(a,b));
	};
};
thx__$Ord_Ord_$Impl_$.forComparable = function() {
	return function(a,b) {
		return thx__$Ord_Ordering_$Impl_$.fromInt(a.compareTo(b));
	};
};
thx__$Ord_Ord_$Impl_$.forComparableOrd = function() {
	return function(a,b) {
		return a.compareTo(b);
	};
};
var thx__$Ord_Ordering_$Impl_$ = {};
thx__$Ord_Ordering_$Impl_$.__name__ = ["thx","_Ord","Ordering_Impl_"];
thx__$Ord_Ordering_$Impl_$.fromInt = function(value) {
	if(value < 0) {
		return thx_OrderingImpl.LT;
	} else if(value > 0) {
		return thx_OrderingImpl.GT;
	} else {
		return thx_OrderingImpl.EQ;
	}
};
thx__$Ord_Ordering_$Impl_$.fromFloat = function(value) {
	if(value < 0) {
		return thx_OrderingImpl.LT;
	} else if(value > 0) {
		return thx_OrderingImpl.GT;
	} else {
		return thx_OrderingImpl.EQ;
	}
};
thx__$Ord_Ordering_$Impl_$.toInt = function(this1) {
	switch(this1[1]) {
	case 0:
		return -1;
	case 1:
		return 1;
	case 2:
		return 0;
	}
};
var thx_OrderingImpl = { __ename__ : ["thx","OrderingImpl"], __constructs__ : ["LT","GT","EQ"] };
thx_OrderingImpl.LT = ["LT",0];
thx_OrderingImpl.LT.__enum__ = thx_OrderingImpl;
thx_OrderingImpl.GT = ["GT",1];
thx_OrderingImpl.GT.__enum__ = thx_OrderingImpl;
thx_OrderingImpl.EQ = ["EQ",2];
thx_OrderingImpl.EQ.__enum__ = thx_OrderingImpl;
var thx_Floats = function() { };
thx_Floats.__name__ = ["thx","Floats"];
thx_Floats.angleDifference = function(a,b,turn) {
	if(turn == null) {
		turn = 360.0;
	}
	var r = (b - a) % turn;
	if(r < 0) {
		r += turn;
	}
	if(r > turn / 2) {
		r -= turn;
	}
	return r;
};
thx_Floats.ceilTo = function(f,decimals) {
	var p = Math.pow(10,decimals);
	return Math.ceil(f * p) / p;
};
thx_Floats.canParse = function(s) {
	return thx_Floats.pattern_parse.match(s);
};
thx_Floats.clamp = function(v,min,max) {
	if(v < min) {
		return min;
	} else if(v > max) {
		return max;
	} else {
		return v;
	}
};
thx_Floats.clampSym = function(v,max) {
	var min = -max;
	if(v < min) {
		return min;
	} else if(v > max) {
		return max;
	} else {
		return v;
	}
};
thx_Floats.compare = function(a,b) {
	if(a < b) {
		return -1;
	} else if(a > b) {
		return 1;
	} else {
		return 0;
	}
};
thx_Floats.floorTo = function(f,decimals) {
	var p = Math.pow(10,decimals);
	return Math.floor(f * p) / p;
};
thx_Floats.interpolate = function(f,a,b) {
	return (b - a) * f + a;
};
thx_Floats.interpolateAngle = function(f,a,b,turn) {
	if(turn == null) {
		turn = 360;
	}
	return thx_Floats.wrapCircular(thx_Floats.interpolate(f,a,a + thx_Floats.angleDifference(a,b,turn)),turn);
};
thx_Floats.interpolateAngleWidest = function(f,a,b,turn) {
	if(turn == null) {
		turn = 360;
	}
	return thx_Floats.wrapCircular(thx_Floats.interpolateAngle(f,a,b,turn) - turn / 2,turn);
};
thx_Floats.interpolateAngleCW = function(f,a,b,turn) {
	if(turn == null) {
		turn = 360;
	}
	a = thx_Floats.wrapCircular(a,turn);
	b = thx_Floats.wrapCircular(b,turn);
	if(b < a) {
		b += turn;
	}
	return thx_Floats.wrapCircular(thx_Floats.interpolate(f,a,b),turn);
};
thx_Floats.interpolateAngleCCW = function(f,a,b,turn) {
	if(turn == null) {
		turn = 360;
	}
	a = thx_Floats.wrapCircular(a,turn);
	b = thx_Floats.wrapCircular(b,turn);
	if(b > a) {
		b -= turn;
	}
	return thx_Floats.wrapCircular(thx_Floats.interpolate(f,a,b),turn);
};
thx_Floats.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
thx_Floats.min = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
thx_Floats.nearEquals = function(a,b,tollerance) {
	if(tollerance == null) {
		tollerance = 1e-9;
	}
	if(isFinite(a)) {
		return Math.abs(a - b) <= tollerance;
	}
	if(isNaN(a)) {
		return isNaN(b);
	}
	if(isNaN(b)) {
		return false;
	}
	if(!isFinite(b)) {
		return a > 0 == b > 0;
	}
	return false;
};
thx_Floats.nearEqualAngles = function(a,b,turn,tollerance) {
	if(tollerance == null) {
		tollerance = 1e-9;
	}
	if(turn == null) {
		turn = 360.0;
	}
	return Math.abs(thx_Floats.angleDifference(a,b,turn)) <= tollerance;
};
thx_Floats.nearZero = function(n,tollerance) {
	if(tollerance == null) {
		tollerance = 1e-9;
	}
	return Math.abs(n) <= tollerance;
};
thx_Floats.normalize = function(v) {
	if(v < 0) {
		return 0;
	} else if(v > 1) {
		return 1;
	} else {
		return v;
	}
};
thx_Floats.parse = function(s) {
	if(s.substring(0,1) == "+") {
		s = s.substring(1);
	}
	return parseFloat(s);
};
thx_Floats.root = function(base,index) {
	return Math.pow(base,1 / index);
};
thx_Floats.roundTo = function(f,decimals) {
	var p = Math.pow(10,decimals);
	return Math.round(f * p) / p;
};
thx_Floats.sign = function(value) {
	if(value < 0) {
		return -1;
	} else {
		return 1;
	}
};
thx_Floats.toString = function(v) {
	return "" + v;
};
thx_Floats.toFloat = function(s) {
	return thx_Floats.parse(s);
};
thx_Floats.trunc = function(value) {
	if(value < 0.0) {
		return Math.ceil(value);
	} else {
		return Math.floor(value);
	}
};
thx_Floats.ftrunc = function(value) {
	if(value < 0.0) {
		return Math.ceil(value);
	} else {
		return Math.floor(value);
	}
};
thx_Floats.wrap = function(v,min,max) {
	var range = max - min + 1;
	if(v < min) {
		v += range * ((min - v) / range + 1);
	}
	return min + (v - min) % range;
};
thx_Floats.wrapCircular = function(v,max) {
	v %= max;
	if(v < 0) {
		v += max;
	}
	return v;
};
var thx_Functions0 = function() { };
thx_Functions0.__name__ = ["thx","Functions0"];
thx_Functions0.after = function(callback,n) {
	return function() {
		if(--n == 0) {
			callback();
		}
	};
};
thx_Functions0.join = function(fa,fb) {
	return function() {
		fa();
		fb();
	};
};
thx_Functions0.once = function(f) {
	return function() {
		var t = f;
		f = thx_Functions.noop;
		t();
	};
};
thx_Functions0.negate = function(callback) {
	return function() {
		return !callback();
	};
};
thx_Functions0.times = function(n,callback) {
	return function() {
		return thx_Ints.range(n).map(function(_) {
			return callback();
		});
	};
};
thx_Functions0.timesi = function(n,callback) {
	return function() {
		return thx_Ints.range(n).map(function(i) {
			return callback(i);
		});
	};
};
var thx_Functions1 = function() { };
thx_Functions1.__name__ = ["thx","Functions1"];
thx_Functions1.compose = function(fa,fb) {
	return function(v) {
		return fa(fb(v));
	};
};
thx_Functions1.map = function(fab,fbc) {
	return function(a) {
		return fbc(fab(a));
	};
};
thx_Functions1.contramap = function(fbc,fab) {
	return function(a) {
		return fbc(fab(a));
	};
};
thx_Functions1.join = function(fa,fb) {
	return function(v) {
		fa(v);
		fb(v);
	};
};
thx_Functions1.memoize = function(callback,resolver) {
	if(null == resolver) {
		resolver = function(v) {
			return "" + Std.string(v);
		};
	}
	var map = new haxe_ds_StringMap();
	return function(v1) {
		var key = resolver(v1);
		if(__map_reserved[key] != null?map.existsReserved(key):map.h.hasOwnProperty(key)) {
			return __map_reserved[key] != null?map.getReserved(key):map.h[key];
		}
		var result = callback(v1);
		if(__map_reserved[key] != null) {
			map.setReserved(key,result);
		} else {
			map.h[key] = result;
		}
		return result;
	};
};
thx_Functions1.negate = function(callback) {
	return function(v) {
		return !callback(v);
	};
};
thx_Functions1.noop = function(_) {
};
thx_Functions1.times = function(n,callback) {
	return function(value) {
		return thx_Ints.range(n).map(function(_) {
			return callback(value);
		});
	};
};
thx_Functions1.timesi = function(n,callback) {
	return function(value) {
		return thx_Ints.range(n).map(function(i) {
			return callback(value,i);
		});
	};
};
thx_Functions1.swapArguments = function(callback) {
	return function(a2,a1) {
		return callback(a1,a2);
	};
};
var thx_Functions2 = function() { };
thx_Functions2.__name__ = ["thx","Functions2"];
thx_Functions2.memoize = function(callback,resolver) {
	if(null == resolver) {
		resolver = function(v1,v2) {
			return "" + Std.string(v1) + ":" + Std.string(v2);
		};
	}
	var map = new haxe_ds_StringMap();
	return function(v11,v21) {
		var key = resolver(v11,v21);
		if(__map_reserved[key] != null?map.existsReserved(key):map.h.hasOwnProperty(key)) {
			return __map_reserved[key] != null?map.getReserved(key):map.h[key];
		}
		var result = callback(v11,v21);
		if(__map_reserved[key] != null) {
			map.setReserved(key,result);
		} else {
			map.h[key] = result;
		}
		return result;
	};
};
thx_Functions2.curry = function(f) {
	return function(a) {
		return function(b) {
			return f(a,b);
		};
	};
};
thx_Functions2.negate = function(callback) {
	return function(v1,v2) {
		return !callback(v1,v2);
	};
};
var thx_Functions3 = function() { };
thx_Functions3.__name__ = ["thx","Functions3"];
thx_Functions3.memoize = function(callback,resolver) {
	if(null == resolver) {
		resolver = function(v1,v2,v3) {
			return "" + Std.string(v1) + ":" + Std.string(v2) + ":" + Std.string(v3);
		};
	}
	var map = new haxe_ds_StringMap();
	return function(v11,v21,v31) {
		var key = resolver(v11,v21,v31);
		if(__map_reserved[key] != null?map.existsReserved(key):map.h.hasOwnProperty(key)) {
			return __map_reserved[key] != null?map.getReserved(key):map.h[key];
		}
		var result = callback(v11,v21,v31);
		if(__map_reserved[key] != null) {
			map.setReserved(key,result);
		} else {
			map.h[key] = result;
		}
		return result;
	};
};
thx_Functions3.negate = function(callback) {
	return function(v1,v2,v3) {
		return !callback(v1,v2,v3);
	};
};
thx_Functions3.curry = function(f) {
	return function(a,b) {
		return function(c) {
			return f(a,b,c);
		};
	};
};
var thx_Functions4 = function() { };
thx_Functions4.__name__ = ["thx","Functions4"];
thx_Functions4.curry = function(f) {
	return function(a,b,c) {
		return function(d) {
			return f(a,b,c,d);
		};
	};
};
var thx_Functions5 = function() { };
thx_Functions5.__name__ = ["thx","Functions5"];
thx_Functions5.curry = function(f) {
	return function(a,b,c,d) {
		return function(e) {
			return f(a,b,c,d,e);
		};
	};
};
var thx_Functions6 = function() { };
thx_Functions6.__name__ = ["thx","Functions6"];
thx_Functions6.curry = function(f) {
	return function(a,b,c,d,e) {
		return function(f0) {
			return f(a,b,c,d,e,f0);
		};
	};
};
var thx_Functions7 = function() { };
thx_Functions7.__name__ = ["thx","Functions7"];
thx_Functions7.curry = function(f) {
	return function(a,b,c,d,e,f0) {
		return function(g) {
			return f(a,b,c,d,e,f0,g);
		};
	};
};
var thx_Functions8 = function() { };
thx_Functions8.__name__ = ["thx","Functions8"];
thx_Functions8.curry = function(f) {
	return function(a,b,c,d,e,f0,g) {
		return function(h) {
			return f(a,b,c,d,e,f0,g,h);
		};
	};
};
var thx_Functions9 = function() { };
thx_Functions9.__name__ = ["thx","Functions9"];
thx_Functions9.curry = function(f) {
	return function(a,b,c,d,e,f0,g,h) {
		return function(i) {
			return f(a,b,c,d,e,f0,g,h,i);
		};
	};
};
var thx__$Functions_Reader_$Impl_$ = {};
thx__$Functions_Reader_$Impl_$.__name__ = ["thx","_Functions","Reader_Impl_"];
thx__$Functions_Reader_$Impl_$.flatMap = function(this1,f) {
	return function(a) {
		return (f(this1(a)))(a);
	};
};
var thx_Functions = function() { };
thx_Functions.__name__ = ["thx","Functions"];
thx_Functions.equality = function(a,b) {
	return a == b;
};
thx_Functions.identity = function(value) {
	return value;
};
thx_Functions.noop = function() {
};
var thx__$HashSet_HashSet_$Impl_$ = {};
thx__$HashSet_HashSet_$Impl_$.__name__ = ["thx","_HashSet","HashSet_Impl_"];
thx__$HashSet_HashSet_$Impl_$._new = function(map) {
	return map;
};
thx__$HashSet_HashSet_$Impl_$.create = function(arr) {
	var hashSet = new haxe_ds__$HashMap_HashMapData();
	if(null != arr) {
		thx__$HashSet_HashSet_$Impl_$.pushMany(hashSet,arr);
	}
	return hashSet;
};
thx__$HashSet_HashSet_$Impl_$.add = function(this1,v) {
	var key = v.hashCode();
	if(this1.values.h.hasOwnProperty(key)) {
		return false;
	} else {
		var key1 = v.hashCode();
		this1.keys.h[key1] = v;
		var key2 = v.hashCode();
		this1.values.h[key2] = true;
		return true;
	}
};
thx__$HashSet_HashSet_$Impl_$.copy = function(this1) {
	var inst = thx__$HashSet_HashSet_$Impl_$.empty(this1);
	var tmp = this1.keys.iterator();
	while(tmp.hasNext()) {
		var k = tmp.next();
		var key = k.hashCode();
		inst.keys.h[key] = k;
		var key1 = k.hashCode();
		inst.values.h[key1] = true;
	}
	return inst;
};
thx__$HashSet_HashSet_$Impl_$.empty = function(this1) {
	return Type.createInstance(this1 == null?null:js_Boot.getClass(this1),[]);
};
thx__$HashSet_HashSet_$Impl_$.difference = function(this1,set) {
	var result = thx__$HashSet_HashSet_$Impl_$.copy(this1);
	var tmp = $iterator(thx__$HashSet_HashSet_$Impl_$)(set);
	while(tmp.hasNext()) {
		var item = tmp.next();
		result.values.remove(item.hashCode());
		result.keys.remove(item.hashCode());
	}
	return result;
};
thx__$HashSet_HashSet_$Impl_$.symmetricDifference = function(this1,set) {
	var self = thx__$HashSet_HashSet_$Impl_$.copy(this1);
	var newset = thx__$HashSet_HashSet_$Impl_$.copy(self);
	var tmp = $iterator(thx__$HashSet_HashSet_$Impl_$)(set);
	while(tmp.hasNext()) {
		var k = tmp.next();
		var key = k.hashCode();
		newset.keys.h[key] = k;
		var key1 = k.hashCode();
		newset.values.h[key1] = true;
	}
	var this2 = newset;
	var result = thx__$HashSet_HashSet_$Impl_$.empty(self);
	var tmp1 = $iterator(thx__$HashSet_HashSet_$Impl_$)(self);
	while(tmp1.hasNext()) {
		var item = tmp1.next();
		var key2 = item.hashCode();
		if(set.values.h.hasOwnProperty(key2)) {
			var key3 = item.hashCode();
			result.keys.h[key3] = item;
			var key4 = item.hashCode();
			result.values.h[key4] = true;
		}
	}
	var result1 = thx__$HashSet_HashSet_$Impl_$.copy(this2);
	var tmp2 = $iterator(thx__$HashSet_HashSet_$Impl_$)(result);
	while(tmp2.hasNext()) {
		var item1 = tmp2.next();
		result1.values.remove(item1.hashCode());
		result1.keys.remove(item1.hashCode());
	}
	return result1;
};
thx__$HashSet_HashSet_$Impl_$.exists = function(this1,v) {
	var key = v.hashCode();
	return this1.values.h.hasOwnProperty(key);
};
thx__$HashSet_HashSet_$Impl_$.remove = function(this1,v) {
	this1.values.remove(v.hashCode());
	return this1.keys.remove(v.hashCode());
};
thx__$HashSet_HashSet_$Impl_$.intersection = function(this1,set) {
	var result = thx__$HashSet_HashSet_$Impl_$.empty(this1);
	var tmp = $iterator(thx__$HashSet_HashSet_$Impl_$)(this1);
	while(tmp.hasNext()) {
		var item = tmp.next();
		var key = item.hashCode();
		if(set.values.h.hasOwnProperty(key)) {
			var key1 = item.hashCode();
			result.keys.h[key1] = item;
			var key2 = item.hashCode();
			result.values.h[key2] = true;
		}
	}
	return result;
};
thx__$HashSet_HashSet_$Impl_$.push = function(this1,v) {
	var key = v.hashCode();
	this1.keys.h[key] = v;
	var key1 = v.hashCode();
	this1.values.h[key1] = true;
};
thx__$HashSet_HashSet_$Impl_$.pushMany = function(this1,values) {
	var tmp = $iterator(values)();
	while(tmp.hasNext()) {
		var value = tmp.next();
		var key = value.hashCode();
		this1.keys.h[key] = value;
		var key1 = value.hashCode();
		this1.values.h[key1] = true;
	}
};
thx__$HashSet_HashSet_$Impl_$.iterator = function(this1) {
	return this1.keys.iterator();
};
thx__$HashSet_HashSet_$Impl_$.union = function(this1,set) {
	var newset = thx__$HashSet_HashSet_$Impl_$.copy(this1);
	var tmp = $iterator(thx__$HashSet_HashSet_$Impl_$)(set);
	while(tmp.hasNext()) {
		var k = tmp.next();
		var key = k.hashCode();
		newset.keys.h[key] = k;
		var key1 = k.hashCode();
		newset.values.h[key1] = true;
	}
	return newset;
};
thx__$HashSet_HashSet_$Impl_$.toArray = function(this1) {
	var arr = [];
	var tmp = this1.keys.iterator();
	while(tmp.hasNext()) arr.push(tmp.next());
	return arr;
};
thx__$HashSet_HashSet_$Impl_$.toString = function(this1) {
	return "{" + thx__$HashSet_HashSet_$Impl_$.toArray(this1).join(", ") + "}";
};
thx__$HashSet_HashSet_$Impl_$.get_length = function(this1) {
	var l = 0;
	var tmp = this1.values.iterator();
	while(tmp.hasNext()) {
		tmp.next();
		++l;
	}
	return l;
};
var thx_Int64s = function() { };
thx_Int64s.__name__ = ["thx","Int64s"];
thx_Int64s.abs = function(value) {
	var b = thx_Int64s.zero;
	var v = value.high - b.high | 0;
	if(v != 0) {
		v = v;
	} else {
		v = haxe__$Int32_Int32_$Impl_$.ucompare(value.low,b.low);
	}
	if((value.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) < 0) {
		var high = ~value.high;
		var low = -value.low;
		if(low == 0) {
			++high;
			high = high | 0;
		}
		return new haxe__$Int64__$_$_$Int64(high,low);
	} else {
		return value;
	}
};
thx_Int64s.compare = function(a,b) {
	var v = a.high - b.high | 0;
	if(v != 0) {
		v = v;
	} else {
		v = haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
	}
	if((a.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) > 0) {
		return 1;
	} else {
		var v1 = a.high - b.high | 0;
		if(v1 != 0) {
			v1 = v1;
		} else {
			v1 = haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
		}
		if((a.high < 0?b.high < 0?v1:-1:b.high >= 0?v1:1) < 0) {
			return -1;
		} else {
			return 0;
		}
	}
};
thx_Int64s.parse = function(s) {
	var sIsNegative = false;
	var multiplier = new haxe__$Int64__$_$_$Int64(0,1);
	var current = new haxe__$Int64__$_$_$Int64(0,0);
	if(s.charAt(0) == "-") {
		sIsNegative = true;
		s = s.substring(1,s.length);
	}
	var len = s.length;
	var _g1 = 0;
	while(_g1 < len) {
		var digitInt = HxOverrides.cca(s,len - 1 - _g1++) - 48;
		if(digitInt < 0 || digitInt > 9) {
			throw new thx_Error("String should only contain digits (and an optional - sign)",null,{ fileName : "Int64s.hx", lineNumber : 71, className : "thx.Int64s", methodName : "parse"});
		}
		var digit = new haxe__$Int64__$_$_$Int64(digitInt >> 31,digitInt);
		if(sIsNegative) {
			var al = multiplier.low & 65535;
			var ah = multiplier.low >>> 16;
			var bl = digit.low & 65535;
			var bh = digit.low >>> 16;
			var p00 = haxe__$Int32_Int32_$Impl_$.mul(al,bl);
			var p10 = haxe__$Int32_Int32_$Impl_$.mul(ah,bl);
			var p01 = haxe__$Int32_Int32_$Impl_$.mul(al,bh);
			var p11 = haxe__$Int32_Int32_$Impl_$.mul(ah,bh);
			var low = p00;
			var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
			p01 = p01 << 16;
			low = p00 + p01 | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
				++high;
				high = high | 0;
			}
			p10 = p10 << 16;
			low = low + p10 | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
				++high;
				high = high | 0;
			}
			high = high + (haxe__$Int32_Int32_$Impl_$.mul(multiplier.low,digit.high) + haxe__$Int32_Int32_$Impl_$.mul(multiplier.high,digit.low) | 0) | 0;
			var b = new haxe__$Int64__$_$_$Int64(high,low);
			var high1 = current.high - b.high | 0;
			var low1 = current.low - b.low | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(current.low,b.low) < 0) {
				--high1;
				high1 = high1 | 0;
			}
			current = new haxe__$Int64__$_$_$Int64(high1,low1);
			if(!(current.high < 0)) {
				throw new thx_Error("Int64 parsing error: Underflow",null,{ fileName : "Int64s.hx", lineNumber : 77, className : "thx.Int64s", methodName : "parse"});
			}
		} else {
			var al1 = multiplier.low & 65535;
			var ah1 = multiplier.low >>> 16;
			var bl1 = digit.low & 65535;
			var bh1 = digit.low >>> 16;
			var p001 = haxe__$Int32_Int32_$Impl_$.mul(al1,bl1);
			var p101 = haxe__$Int32_Int32_$Impl_$.mul(ah1,bl1);
			var p011 = haxe__$Int32_Int32_$Impl_$.mul(al1,bh1);
			var p111 = haxe__$Int32_Int32_$Impl_$.mul(ah1,bh1);
			var low2 = p001;
			var high2 = (p111 + (p011 >>> 16) | 0) + (p101 >>> 16) | 0;
			p011 = p011 << 16;
			low2 = p001 + p011 | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,p011) < 0) {
				++high2;
				high2 = high2 | 0;
			}
			p101 = p101 << 16;
			low2 = low2 + p101 | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,p101) < 0) {
				++high2;
				high2 = high2 | 0;
			}
			high2 = high2 + (haxe__$Int32_Int32_$Impl_$.mul(multiplier.low,digit.high) + haxe__$Int32_Int32_$Impl_$.mul(multiplier.high,digit.low) | 0) | 0;
			var b1 = new haxe__$Int64__$_$_$Int64(high2,low2);
			var high3 = current.high + b1.high | 0;
			var low3 = current.low + b1.low | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(low3,current.low) < 0) {
				++high3;
				high3 = high3 | 0;
			}
			current = new haxe__$Int64__$_$_$Int64(high3,low3);
			if(current.high < 0) {
				throw new thx_Error("Int64 parsing error: Overflow",null,{ fileName : "Int64s.hx", lineNumber : 81, className : "thx.Int64s", methodName : "parse"});
			}
		}
		var b2 = thx_Int64s.ten;
		var al2 = multiplier.low & 65535;
		var ah2 = multiplier.low >>> 16;
		var bl2 = b2.low & 65535;
		var bh2 = b2.low >>> 16;
		var p002 = haxe__$Int32_Int32_$Impl_$.mul(al2,bl2);
		var p102 = haxe__$Int32_Int32_$Impl_$.mul(ah2,bl2);
		var p012 = haxe__$Int32_Int32_$Impl_$.mul(al2,bh2);
		var p112 = haxe__$Int32_Int32_$Impl_$.mul(ah2,bh2);
		var low4 = p002;
		var high4 = (p112 + (p012 >>> 16) | 0) + (p102 >>> 16) | 0;
		p012 = p012 << 16;
		low4 = p002 + p012 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low4,p012) < 0) {
			++high4;
			high4 = high4 | 0;
		}
		p102 = p102 << 16;
		low4 = low4 + p102 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low4,p102) < 0) {
			++high4;
			high4 = high4 | 0;
		}
		high4 = high4 + (haxe__$Int32_Int32_$Impl_$.mul(multiplier.low,b2.high) + haxe__$Int32_Int32_$Impl_$.mul(multiplier.high,b2.low) | 0) | 0;
		multiplier = new haxe__$Int64__$_$_$Int64(high4,low4);
	}
	return current;
};
thx_Int64s.toInt64 = function(s) {
	return thx_Int64s.parse(s);
};
thx_Int64s.divRound = function(num,div) {
	var b = new haxe__$Int64__$_$_$Int64(0,0);
	if(num.high == b.high && num.low == b.low) {
		return thx_Int64s.zero;
	}
	var b1 = new haxe__$Int64__$_$_$Int64(0,0);
	if(div.high == b1.high && div.low == b1.low) {
		throw new thx_Error("Int64s.divRound division by zero",null,{ fileName : "Int64s.hx", lineNumber : 98, className : "thx.Int64s", methodName : "divRound"});
	}
	if(num.high < 0 == div.high < 0) {
		var b2 = haxe__$Int64_Int64_$Impl_$.divMod(div,thx_Int64s.two).quotient;
		var high = num.high + b2.high | 0;
		var low = num.low + b2.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,num.low) < 0) {
			++high;
			high = high | 0;
		}
		return haxe__$Int64_Int64_$Impl_$.divMod(new haxe__$Int64__$_$_$Int64(high,low),div).quotient;
	} else if(div.high < 0) {
		var high1 = ~num.high;
		var low1 = -num.low;
		if(low1 == 0) {
			++high1;
			high1 = high1 | 0;
		}
		var a = new haxe__$Int64__$_$_$Int64(high1,low1);
		var b3 = thx_Int64s.one;
		var high2 = a.high + b3.high | 0;
		var low2 = a.low + b3.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,a.low) < 0) {
			++high2;
			high2 = high2 | 0;
		}
		var a1 = new haxe__$Int64__$_$_$Int64(high2,low2);
		var b4 = haxe__$Int64_Int64_$Impl_$.divMod(div,thx_Int64s.two).quotient;
		var high3 = a1.high + b4.high | 0;
		var low3 = a1.low + b4.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low3,a1.low) < 0) {
			++high3;
			high3 = high3 | 0;
		}
		var a2 = new haxe__$Int64__$_$_$Int64(high3,low3);
		var high4 = ~div.high;
		var low4 = -div.low;
		if(low4 == 0) {
			++high4;
			high4 = high4 | 0;
		}
		return haxe__$Int64_Int64_$Impl_$.divMod(a2,new haxe__$Int64__$_$_$Int64(high4,low4)).quotient;
	} else {
		var b5 = thx_Int64s.one;
		var high5 = num.high + b5.high | 0;
		var low5 = num.low + b5.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low5,num.low) < 0) {
			++high5;
			high5 = high5 | 0;
		}
		var a3 = new haxe__$Int64__$_$_$Int64(high5,low5);
		var b6 = haxe__$Int64_Int64_$Impl_$.divMod(div,thx_Int64s.two).quotient;
		var high6 = a3.high - b6.high | 0;
		var low6 = a3.low - b6.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(a3.low,b6.low) < 0) {
			--high6;
			high6 = high6 | 0;
		}
		return haxe__$Int64_Int64_$Impl_$.divMod(new haxe__$Int64__$_$_$Int64(high6,low6),div).quotient;
	}
};
thx_Int64s.divFloor = function(num,div) {
	var b = new haxe__$Int64__$_$_$Int64(0,0);
	if(num.high == b.high && num.low == b.low) {
		return thx_Int64s.zero;
	}
	var b1 = new haxe__$Int64__$_$_$Int64(0,0);
	if(div.high == b1.high && div.low == b1.low) {
		throw new thx_Error("Int64s.divFloor division by zero",null,{ fileName : "Int64s.hx", lineNumber : 112, className : "thx.Int64s", methodName : "divFloor"});
	}
	var a = haxe__$Int64_Int64_$Impl_$.divMod(num,div).quotient;
	var x = num.high < 0 != div.high < 0?1:0;
	var b2 = new haxe__$Int64__$_$_$Int64(x >> 31,x);
	var high = a.high - b2.high | 0;
	var low = a.low - b2.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b2.low) < 0) {
		--high;
		high = high | 0;
	}
	return new haxe__$Int64__$_$_$Int64(high,low);
};
thx_Int64s.divCeil = function(num,div) {
	var b = new haxe__$Int64__$_$_$Int64(0,0);
	if(num.high == b.high && num.low == b.low) {
		return thx_Int64s.zero;
	}
	var b1 = new haxe__$Int64__$_$_$Int64(0,0);
	if(div.high == b1.high && div.low == b1.low) {
		throw new thx_Error("Int64s.divCeil division by zero",null,{ fileName : "Int64s.hx", lineNumber : 120, className : "thx.Int64s", methodName : "divCeil"});
	}
	var r = haxe__$Int64_Int64_$Impl_$.divMod(num,div);
	var q = r.quotient;
	var m = r.modulus;
	var tmp;
	if(num.high < 0 == div.high < 0) {
		var b2 = new haxe__$Int64__$_$_$Int64(0,0);
		tmp = !(m.high == b2.high && m.low == b2.low);
	} else {
		tmp = false;
	}
	if(tmp) {
		var b3 = thx_Int64s.one;
		var high = q.high + b3.high | 0;
		var low = q.low + b3.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,q.low) < 0) {
			++high;
			high = high | 0;
		}
		return new haxe__$Int64__$_$_$Int64(high,low);
	} else {
		return q;
	}
};
thx_Int64s.toFloat = function(i) {
	var isNegative = false;
	var b = new haxe__$Int64__$_$_$Int64(0,0);
	var v = i.high - b.high | 0;
	if(v != 0) {
		v = v;
	} else {
		v = haxe__$Int32_Int32_$Impl_$.ucompare(i.low,b.low);
	}
	if((i.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) < 0) {
		var b1 = thx_Int64s.min;
		var v1 = i.high - b1.high | 0;
		if(v1 != 0) {
			v1 = v1;
		} else {
			v1 = haxe__$Int32_Int32_$Impl_$.ucompare(i.low,b1.low);
		}
		if((i.high < 0?b1.high < 0?v1:-1:b1.high >= 0?v1:1) < 0) {
			return -9223372036854775808.0;
		}
		isNegative = true;
		var high = ~i.high;
		var low = -i.low;
		if(low == 0) {
			++high;
			high = high | 0;
		}
		i = new haxe__$Int64__$_$_$Int64(high,low);
	}
	var multiplier = 1.0;
	var ret = 0.0;
	var _g = 0;
	while(_g < 64) {
		++_g;
		var b2 = thx_Int64s.one;
		var a = new haxe__$Int64__$_$_$Int64(i.high & b2.high,i.low & b2.low);
		var b3 = thx_Int64s.zero;
		if(a.high != b3.high || a.low != b3.low) {
			ret += multiplier;
		}
		multiplier *= 2.0;
		i = new haxe__$Int64__$_$_$Int64(i.high >> 1,i.high << 31 | i.low >>> 1);
	}
	return (isNegative?-1:1) * ret;
};
thx_Int64s.fromFloat = function(f) {
	if(isNaN(f) || !isFinite(f)) {
		throw new thx_Error("Conversion to Int64 failed. Number is NaN or Infinite",null,{ fileName : "Int64s.hx", lineNumber : 163, className : "thx.Int64s", methodName : "fromFloat"});
	}
	var noFractions = f - f % 1;
	if(noFractions > 9007199254740991.0) {
		throw new thx_Error("Conversion to Int64 failed. Conversion overflow",null,{ fileName : "Int64s.hx", lineNumber : 169, className : "thx.Int64s", methodName : "fromFloat"});
	}
	if(noFractions < -9007199254740991.0) {
		throw new thx_Error("Conversion to Int64 failed. Conversion underflow",null,{ fileName : "Int64s.hx", lineNumber : 171, className : "thx.Int64s", methodName : "fromFloat"});
	}
	var result = thx_Int64s.zero;
	var neg = noFractions < 0.0;
	var rest = neg?-noFractions:noFractions;
	var i = 0;
	var curr;
	while(rest >= 1) {
		curr = rest % 2;
		rest /= 2;
		if(curr >= 1) {
			var a = new haxe__$Int64__$_$_$Int64(0,1);
			var b = i;
			b &= 63;
			var b1 = b == 0?new haxe__$Int64__$_$_$Int64(a.high,a.low):b < 32?new haxe__$Int64__$_$_$Int64(a.high << b | a.low >>> 32 - b,a.low << b):new haxe__$Int64__$_$_$Int64(a.low << b - 32,0);
			var high = result.high + b1.high | 0;
			var low = result.low + b1.low | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(low,result.low) < 0) {
				++high;
				high = high | 0;
			}
			result = new haxe__$Int64__$_$_$Int64(high,low);
		}
		++i;
	}
	if(neg) {
		var high1 = ~result.high;
		var low1 = -result.low;
		if(low1 == 0) {
			++high1;
			high1 = high1 | 0;
		}
		return new haxe__$Int64__$_$_$Int64(high1,low1);
	} else {
		return result;
	}
};
var thx_Ints = function() { };
thx_Ints.__name__ = ["thx","Ints"];
thx_Ints.abs = function(v) {
	if(v < 0) {
		return -v;
	} else {
		return v;
	}
};
thx_Ints.canParse = function(s) {
	return thx_Ints.pattern_parse.match(s);
};
thx_Ints.clamp = function(v,min,max) {
	if(v < min) {
		return min;
	} else if(v > max) {
		return max;
	} else {
		return v;
	}
};
thx_Ints.clampSym = function(v,max) {
	var min = -max;
	if(v < min) {
		return min;
	} else if(v > max) {
		return max;
	} else {
		return v;
	}
};
thx_Ints.compare = function(a,b) {
	return a - b;
};
thx_Ints.gcd = function(m,n) {
	if(m < 0) {
		m = -m;
	} else {
		m = m;
	}
	if(n < 0) {
		n = -n;
	} else {
		n = n;
	}
	if(n == 0) {
		return m;
	}
	return thx_Ints.gcd(n,m % n);
};
thx_Ints.interpolate = function(f,a,b) {
	return Math.round(a + (b - a) * f);
};
thx_Ints.isEven = function(v) {
	return v % 2 == 0;
};
thx_Ints.isOdd = function(v) {
	return v % 2 != 0;
};
thx_Ints.lpad = function(v,pad,len) {
	if(pad == null) {
		pad = "0";
	}
	var neg = false;
	if(v < 0) {
		neg = true;
		v = -v;
	}
	return (neg?"-":"") + StringTools.lpad("" + v,pad,len);
};
thx_Ints.lcm = function(m,n) {
	if(m < 0) {
		m = -m;
	} else {
		m = m;
	}
	if(n < 0) {
		n = -n;
	} else {
		n = n;
	}
	if(n == 0) {
		return m;
	}
	return m * (n / thx_Ints.gcd(m,n) | 0);
};
thx_Ints.rpad = function(v,pad,len) {
	if(pad == null) {
		pad = "0";
	}
	return StringTools.rpad("" + v,pad,len);
};
thx_Ints.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
thx_Ints.min = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
thx_Ints.parse = function(s,base) {
	if(null == base) {
		if(s.substring(0,2) == "0x") {
			base = 16;
		} else {
			base = 10;
		}
	}
	var v = parseInt(s,base);
	if(isNaN(v)) {
		return null;
	} else {
		return v;
	}
};
thx_Ints.random = function(min,max) {
	if(min == null) {
		min = 0;
	}
	return Std.random(max + 1) + min;
};
thx_Ints.range = function(start,stop,step) {
	if(step == null) {
		step = 1;
	}
	if(null == stop) {
		stop = start;
		start = 0;
	}
	if((stop - start) / step == Infinity) {
		throw new js__$Boot_HaxeError("infinite range");
	}
	var range = [];
	var i = -1;
	var j;
	if(step < 0) {
		while(true) {
			j = start + step * ++i;
			if(!(j > stop)) {
				break;
			}
			range.push(j);
		}
	} else {
		while(true) {
			j = start + step * ++i;
			if(!(j < stop)) {
				break;
			}
			range.push(j);
		}
	}
	return range;
};
thx_Ints.rangeIter = function(start,stop,step) {
	if(step == null) {
		step = 1;
	}
	return new thx_RangeIterator(start,stop,step);
};
thx_Ints.toString = function(value,base) {
	return value.toString(base);
};
thx_Ints.toBase = function(value,base) {
	return value.toString(base);
};
thx_Ints.toBool = function(v) {
	return v != 0;
};
thx_Ints.toInt = function(s,base) {
	return thx_Ints.parse(s,base);
};
thx_Ints.sign = function(value) {
	if(value < 0) {
		return -1;
	} else {
		return 1;
	}
};
thx_Ints.wrapCircular = function(v,max) {
	v %= max;
	if(v < 0) {
		v += max;
	}
	return v;
};
var thx_RangeIterator = function(start,stop,step) {
	if(step == null) {
		step = 1;
	}
	this.current = start;
	this.stop = stop;
	this.step = step;
};
thx_RangeIterator.__name__ = ["thx","RangeIterator"];
thx_RangeIterator.prototype = {
	current: null
	,stop: null
	,step: null
	,hasNext: function() {
		if(!(this.stop == null || this.step >= 0 && this.current < this.stop)) {
			if(this.step < 0) {
				return this.current > this.stop;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,next: function() {
		var result = this.current;
		this.current += this.step;
		return result;
	}
	,__class__: thx_RangeIterator
};
var thx_Iterables = function() { };
thx_Iterables.__name__ = ["thx","Iterables"];
thx_Iterables.all = function(it,predicate) {
	return thx_Iterators.all($iterator(it)(),predicate);
};
thx_Iterables.any = function(it,predicate) {
	return thx_Iterators.any($iterator(it)(),predicate);
};
thx_Iterables.eachPair = function(it,handler) {
	thx_Iterators.eachPair($iterator(it)(),handler);
	return;
};
thx_Iterables.equals = function(a,b,equality) {
	return thx_Iterators.equals($iterator(a)(),$iterator(b)(),equality);
};
thx_Iterables.filter = function(it,predicate) {
	return thx_Iterators.filter($iterator(it)(),predicate);
};
thx_Iterables.find = function(it,predicate) {
	return thx_Iterators.find($iterator(it)(),predicate);
};
thx_Iterables.findOption = function(it,predicate) {
	var value = thx_Iterators.find($iterator(it)(),predicate);
	if(null == value) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(value);
	}
};
thx_Iterables.first = function(it) {
	return thx_Iterators.first($iterator(it)());
};
thx_Iterables.get = function(it,index) {
	return thx_Iterators.get($iterator(it)(),index);
};
thx_Iterables.getOption = function(it,index) {
	var value = thx_Iterators.get($iterator(it)(),index);
	if(null == value) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(value);
	}
};
thx_Iterables.last = function(it) {
	return thx_Iterators.last($iterator(it)());
};
thx_Iterables.hasElements = function(it) {
	return $iterator(it)().hasNext();
};
thx_Iterables.indexOf = function(it,element) {
	return thx_Iterators.indexOf($iterator(it)(),element);
};
thx_Iterables.isEmpty = function(it) {
	return !$iterator(it)().hasNext();
};
thx_Iterables.isIterable = function(v) {
	if(!Lambda.has(Reflect.isObject(v) && null == (v == null?null:js_Boot.getClass(v))?Reflect.fields(v):Type.getInstanceFields(v == null?null:js_Boot.getClass(v)),"iterator")) {
		return false;
	}
	return Reflect.isFunction(Reflect.field(v,"iterator"));
};
thx_Iterables.map = function(it,f) {
	return thx_Iterators.map($iterator(it)(),f);
};
thx_Iterables.fmap = function(it,f) {
	return { iterator : function() {
		return thx_Iterators.fmap($iterator(it)(),f);
	}};
};
thx_Iterables.mapi = function(it,f) {
	return thx_Iterators.mapi($iterator(it)(),f);
};
thx_Iterables.fmapi = function(it,f) {
	return { iterator : function() {
		return thx_Iterators.fmapi($iterator(it)(),f);
	}};
};
thx_Iterables.order = function(it,sort) {
	return thx_Iterators.order($iterator(it)(),sort);
};
thx_Iterables.reduce = function(it,callback,initial) {
	return thx_Iterators.reduce($iterator(it)(),callback,initial);
};
thx_Iterables.reducei = function(it,callback,initial) {
	return thx_Iterators.reducei($iterator(it)(),callback,initial);
};
thx_Iterables.toArray = function(it) {
	return thx_Iterators.toArray($iterator(it)());
};
thx_Iterables.minBy = function(it,f,ord) {
	var found = haxe_ds_Option.None;
	var tmp = $iterator(it)();
	while(tmp.hasNext()) {
		var a = [tmp.next()];
		if(thx_Options.any(found,(function(a1) {
			return function(a0) {
				return ord(f(a0),f(a1[0])) == thx_OrderingImpl.LT;
			};
		})(a))) {
			found = found;
		} else {
			found = haxe_ds_Option.Some(a[0]);
		}
	}
	return found;
};
thx_Iterables.maxBy = function(it,f,ord) {
	return thx_Iterables.minBy(it,f,thx__$Ord_Ord_$Impl_$.inverse(ord));
};
thx_Iterables.min = function(it,ord) {
	return thx_Iterables.minBy(it,thx_Functions.identity,ord);
};
thx_Iterables.max = function(it,ord) {
	return thx_Iterables.minBy(it,thx_Functions.identity,thx__$Ord_Ord_$Impl_$.inverse(ord));
};
thx_Iterables.extremaBy = function(it,f,ord) {
	var found = haxe_ds_Option.None;
	var tmp = $iterator(it)();
	while(tmp.hasNext()) {
		var a = tmp.next();
		switch(found[1]) {
		case 0:
			var t = found[2];
			if(ord(f(a),f(t._0)) == thx_OrderingImpl.LT) {
				found = haxe_ds_Option.Some({ _0 : a, _1 : t._1});
			} else {
				var t1 = found[2];
				if(ord(f(a),f(t1._1)) == thx_OrderingImpl.GT) {
					found = haxe_ds_Option.Some({ _0 : t1._0, _1 : a});
				} else {
					found = found;
				}
			}
			break;
		case 1:
			found = haxe_ds_Option.Some({ _0 : a, _1 : a});
			break;
		default:
			found = found;
		}
	}
	return found;
};
thx_Iterables.extrema = function(it,ord) {
	return thx_Iterables.extremaBy(it,thx_Functions.identity,ord);
};
thx_Iterables.unzip = function(it) {
	return thx_Iterators.unzip($iterator(it)());
};
thx_Iterables.unzip3 = function(it) {
	return thx_Iterators.unzip3($iterator(it)());
};
thx_Iterables.unzip4 = function(it) {
	return thx_Iterators.unzip4($iterator(it)());
};
thx_Iterables.unzip5 = function(it) {
	return thx_Iterators.unzip5($iterator(it)());
};
thx_Iterables.zip = function(it1,it2) {
	return thx_Iterators.zip($iterator(it1)(),$iterator(it2)());
};
thx_Iterables.zip3 = function(it1,it2,it3) {
	return thx_Iterators.zip3($iterator(it1)(),$iterator(it2)(),$iterator(it3)());
};
thx_Iterables.zip4 = function(it1,it2,it3,it4) {
	return thx_Iterators.zip4($iterator(it1)(),$iterator(it2)(),$iterator(it3)(),$iterator(it4)());
};
thx_Iterables.zip5 = function(it1,it2,it3,it4,it5) {
	return thx_Iterators.zip5($iterator(it1)(),$iterator(it2)(),$iterator(it3)(),$iterator(it4)(),$iterator(it5)());
};
var thx_Iterators = function() { };
thx_Iterators.__name__ = ["thx","Iterators"];
thx_Iterators.all = function(it,predicate) {
	while(it.hasNext()) if(!predicate(it.next())) {
		return false;
	}
	return true;
};
thx_Iterators.any = function(it,predicate) {
	while(it.hasNext()) if(predicate(it.next())) {
		return true;
	}
	return false;
};
thx_Iterators.equals = function(a,b,equality) {
	if(null == equality) {
		equality = thx_Functions.equality;
	}
	var an;
	var bn;
	while(true) {
		an = a.hasNext();
		bn = b.hasNext();
		if(!an && !bn) {
			return true;
		}
		if(!an || !bn) {
			return false;
		}
		if(!equality(a.next(),b.next())) {
			return false;
		}
	}
};
thx_Iterators.get = function(it,index) {
	var pos = 0;
	while(it.hasNext()) {
		var i = it.next();
		if(pos++ == index) {
			return i;
		}
	}
	return null;
};
thx_Iterators.getOption = function(it,index) {
	var value = thx_Iterators.get(it,index);
	if(null == value) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(value);
	}
};
thx_Iterators.eachPair = function(it,handler) {
	thx_Arrays.eachPair(thx_Iterators.toArray(it),handler);
};
thx_Iterators.filter = function(it,predicate) {
	return thx_Iterators.reduce(it,function(acc,element) {
		if(predicate(element)) {
			acc.push(element);
		}
		return acc;
	},[]);
};
thx_Iterators.find = function(it,f) {
	while(it.hasNext()) {
		var element = it.next();
		if(f(element)) {
			return element;
		}
	}
	return null;
};
thx_Iterators.findOption = function(it,f) {
	var value = thx_Iterators.find(it,f);
	if(null == value) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(value);
	}
};
thx_Iterators.first = function(it) {
	if(it.hasNext()) {
		return it.next();
	} else {
		return null;
	}
};
thx_Iterators.hasElements = function(it) {
	return it.hasNext();
};
thx_Iterators.indexOf = function(it,element) {
	var pos = 0;
	while(it.hasNext()) {
		if(element == it.next()) {
			return pos;
		}
		++pos;
	}
	return -1;
};
thx_Iterators.isEmpty = function(it) {
	return !it.hasNext();
};
thx_Iterators.isIterator = function(v) {
	var fields = Reflect.isObject(v) && null == (v == null?null:js_Boot.getClass(v))?Reflect.fields(v):Type.getInstanceFields(v == null?null:js_Boot.getClass(v));
	if(!Lambda.has(fields,"next") || !Lambda.has(fields,"hasNext")) {
		return false;
	}
	if(Reflect.isFunction(Reflect.field(v,"next"))) {
		return Reflect.isFunction(Reflect.field(v,"hasNext"));
	} else {
		return false;
	}
};
thx_Iterators.last = function(it) {
	var buf = null;
	while(it.hasNext()) buf = it.next();
	return buf;
};
thx_Iterators.forEach = function(it,proc) {
	while(it.hasNext()) proc(it.next());
};
thx_Iterators.map = function(it,f) {
	var acc = [];
	while(it.hasNext()) acc.push(f(it.next()));
	return acc;
};
thx_Iterators.fmap = function(it,f) {
	return new thx_MapIterator(it,f);
};
thx_Iterators.mapi = function(it,f) {
	var acc = [];
	var i = 0;
	while(it.hasNext()) acc.push(f(it.next(),i++));
	return acc;
};
thx_Iterators.fmapi = function(it,f) {
	return new thx_MapIIterator(it,f);
};
thx_Iterators.order = function(it,sort) {
	var n = thx_Iterators.toArray(it);
	n.sort(sort);
	return n;
};
thx_Iterators.reduce = function(it,callback,initial) {
	var result = initial;
	while(it.hasNext()) result = callback(result,it.next());
	return result;
};
thx_Iterators.reducei = function(it,callback,initial) {
	thx_Iterators.mapi(it,function(v,i) {
		initial = callback(initial,v,i);
	});
	return initial;
};
thx_Iterators.foldLeft = function(it,zero,f) {
	return thx_Iterators.reduce(it,f,zero);
};
thx_Iterators.foldMap = function(it,f,m) {
	var tmp = thx_Iterators.fmap(it,f);
	var tmp1 = thx__$Monoid_Monoid_$Impl_$.get_zero(m);
	var _e = m;
	return thx_Iterators.foldLeft(tmp,tmp1,function(a0,a1) {
		return thx__$Monoid_Monoid_$Impl_$.append(_e,a0,a1);
	});
};
thx_Iterators.toArray = function(it) {
	var elements = [];
	while(it.hasNext()) elements.push(it.next());
	return elements;
};
thx_Iterators.unzip = function(it) {
	var a1 = [];
	var a2 = [];
	thx_Iterators.forEach(it,function(t) {
		a1.push(t._0);
		a2.push(t._1);
	});
	return { _0 : a1, _1 : a2};
};
thx_Iterators.unzip3 = function(it) {
	var a1 = [];
	var a2 = [];
	var a3 = [];
	thx_Iterators.forEach(it,function(t) {
		a1.push(t._0);
		a2.push(t._1);
		a3.push(t._2);
	});
	return { _0 : a1, _1 : a2, _2 : a3};
};
thx_Iterators.unzip4 = function(it) {
	var a1 = [];
	var a2 = [];
	var a3 = [];
	var a4 = [];
	thx_Iterators.forEach(it,function(t) {
		a1.push(t._0);
		a2.push(t._1);
		a3.push(t._2);
		a4.push(t._3);
	});
	return { _0 : a1, _1 : a2, _2 : a3, _3 : a4};
};
thx_Iterators.unzip5 = function(it) {
	var a1 = [];
	var a2 = [];
	var a3 = [];
	var a4 = [];
	var a5 = [];
	thx_Iterators.forEach(it,function(t) {
		a1.push(t._0);
		a2.push(t._1);
		a3.push(t._2);
		a4.push(t._3);
		a5.push(t._4);
	});
	return { _0 : a1, _1 : a2, _2 : a3, _3 : a4, _4 : a5};
};
thx_Iterators.zip = function(it1,it2) {
	var array = [];
	while(it1.hasNext() && it2.hasNext()) array.push({ _0 : it1.next(), _1 : it2.next()});
	return array;
};
thx_Iterators.zip3 = function(it1,it2,it3) {
	var array = [];
	while(it1.hasNext() && it2.hasNext() && it3.hasNext()) array.push({ _0 : it1.next(), _1 : it2.next(), _2 : it3.next()});
	return array;
};
thx_Iterators.zip4 = function(it1,it2,it3,it4) {
	var array = [];
	while(it1.hasNext() && it2.hasNext() && it3.hasNext() && it4.hasNext()) array.push({ _0 : it1.next(), _1 : it2.next(), _2 : it3.next(), _3 : it4.next()});
	return array;
};
thx_Iterators.zip5 = function(it1,it2,it3,it4,it5) {
	var array = [];
	while(it1.hasNext() && it2.hasNext() && it3.hasNext() && it4.hasNext() && it5.hasNext()) array.push({ _0 : it1.next(), _1 : it2.next(), _2 : it3.next(), _3 : it4.next(), _4 : it5.next()});
	return array;
};
var thx_MapIterator = function(base,f) {
	this.base = base;
	this.f = f;
};
thx_MapIterator.__name__ = ["thx","MapIterator"];
thx_MapIterator.prototype = {
	base: null
	,f: null
	,next: function() {
		return this.f(this.base.next());
	}
	,hasNext: function() {
		return this.base.hasNext();
	}
	,__class__: thx_MapIterator
};
var thx_MapIIterator = function(base,f) {
	this.i = 0;
	this.base = base;
	this.f = f;
};
thx_MapIIterator.__name__ = ["thx","MapIIterator"];
thx_MapIIterator.prototype = {
	base: null
	,f: null
	,i: null
	,next: function() {
		var result = this.f(this.base.next(),this.i);
		this.i++;
		return result;
	}
	,hasNext: function() {
		return this.base.hasNext();
	}
	,__class__: thx_MapIIterator
};
var thx__$LocalDate_LocalDate_$Impl_$ = {};
thx__$LocalDate_LocalDate_$Impl_$.__name__ = ["thx","_LocalDate","LocalDate_Impl_"];
thx__$LocalDate_LocalDate_$Impl_$.now = function() {
	return thx__$LocalDate_LocalDate_$Impl_$.fromDate(new Date());
};
thx__$LocalDate_LocalDate_$Impl_$.fromInt = function(days) {
	return days;
};
thx__$LocalDate_LocalDate_$Impl_$.fromDate = function(date) {
	return thx__$LocalDate_LocalDate_$Impl_$.fromTime(date.getTime());
};
thx__$LocalDate_LocalDate_$Impl_$.fromTime = function(timestamp) {
	return (timestamp / thx__$LocalDate_LocalDate_$Impl_$.millisPerDay | 0) + thx__$LocalDate_LocalDate_$Impl_$.unixEpochDays;
};
thx__$LocalDate_LocalDate_$Impl_$.fromString = function(s) {
	if(s == null) {
		throw new thx_Error("null String cannot be parsed to LocalDate",null,{ fileName : "LocalDate.hx", lineNumber : 66, className : "thx._LocalDate.LocalDate_Impl_", methodName : "fromString"});
	}
	var pattern = new EReg("^([-])?(\\d+)[-](\\d{2})[-](\\d{2})$","");
	if(!pattern.match(s)) {
		throw new thx_Error("unable to parse DateTime string: \"" + s + "\"",null,{ fileName : "LocalDate.hx", lineNumber : 69, className : "thx._LocalDate.LocalDate_Impl_", methodName : "fromString"});
	}
	var date = thx__$LocalDate_LocalDate_$Impl_$.create(Std.parseInt(pattern.matched(2)),Std.parseInt(pattern.matched(3)),Std.parseInt(pattern.matched(4)));
	if(pattern.matched(1) == "-") {
		return -date;
	}
	return date;
};
thx__$LocalDate_LocalDate_$Impl_$.compare = function(a,b) {
	return a - b;
};
thx__$LocalDate_LocalDate_$Impl_$.create = function(year,month,day) {
	return thx__$LocalDate_LocalDate_$Impl_$.dateToDays(year,month,day);
};
thx__$LocalDate_LocalDate_$Impl_$.dateToDays = function(year,month,day) {
	var fixMonthYear = function() {
		if(month == 0) {
			--year;
			month = 12;
		} else if(month < 0) {
			month = -month;
			var years = Math.ceil(month / 12);
			year -= years;
			month = years * 12 - month;
		} else if(month > 12) {
			var years1 = Math.floor(month / 12);
			year += years1;
			month -= years1 * 12;
		}
	};
	while(day < 0) {
		--month;
		fixMonthYear();
		day += thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysInMonth(year,month);
	}
	fixMonthYear();
	var days;
	while(true) {
		days = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysInMonth(year,month);
		if(!(day > days)) {
			break;
		}
		++month;
		fixMonthYear();
		day -= days;
	}
	if(day == 0) {
		--month;
		fixMonthYear();
		day = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysInMonth(year,month);
	}
	fixMonthYear();
	return thx__$LocalDate_LocalDate_$Impl_$.rawDateToDays(year,month,day);
};
thx__$LocalDate_LocalDate_$Impl_$.rawDateToDays = function(year,month,day) {
	var days = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.isLeapYear(year)?thx__$LocalDate_LocalDate_$Impl_$.daysToMonth366:thx__$LocalDate_LocalDate_$Impl_$.daysToMonth365;
	if(day >= 1 && day <= days[month] - days[month - 1]) {
		var y = year - 1;
		return y * 365 + (y / 4 | 0) - (y / 100 | 0) + (y / 400 | 0) + days[month - 1] + day - 1;
	}
	throw new thx_Error("bad year-month-day " + year + "-" + month + "-" + day,null,{ fileName : "LocalDate.hx", lineNumber : 141, className : "thx._LocalDate.LocalDate_Impl_", methodName : "rawDateToDays"});
};
thx__$LocalDate_LocalDate_$Impl_$.daysRange = function(start,end) {
	if(end - start < 0) {
		return [];
	}
	var days = [];
	while(start != end) {
		days.push(start);
		start = thx__$LocalDate_LocalDate_$Impl_$.jump(start,thx_TimePeriod.Day,1);
	}
	days.push(end);
	return days;
};
thx__$LocalDate_LocalDate_$Impl_$.getDatePart = function(this1,part) {
	var n = this1;
	var y400 = this1 / thx__$LocalDate_LocalDate_$Impl_$.daysPer400Years | 0;
	n = this1 - y400 * thx__$LocalDate_LocalDate_$Impl_$.daysPer400Years;
	var y100 = n / thx__$LocalDate_LocalDate_$Impl_$.daysPer100Years | 0;
	if(y100 == 4) {
		y100 = 3;
	}
	n -= y100 * thx__$LocalDate_LocalDate_$Impl_$.daysPer100Years;
	var y4 = n / thx__$LocalDate_LocalDate_$Impl_$.daysPer4Years | 0;
	n -= y4 * thx__$LocalDate_LocalDate_$Impl_$.daysPer4Years;
	var y1 = n / thx__$LocalDate_LocalDate_$Impl_$.daysPerYear | 0;
	if(y1 == 4) {
		y1 = 3;
	}
	if(part == thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_YEAR) {
		return y400 * 400 + y100 * 100 + y4 * 4 + y1 + 1;
	}
	n -= y1 * thx__$LocalDate_LocalDate_$Impl_$.daysPerYear;
	if(part == thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_DAY_OF_YEAR) {
		return n + 1;
	}
	var adays = y1 == 3 && (y4 != 24 || y100 == 3)?thx__$LocalDate_LocalDate_$Impl_$.daysToMonth366:thx__$LocalDate_LocalDate_$Impl_$.daysToMonth365;
	var m = n >> 6;
	while(n >= adays[m]) ++m;
	if(part == thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_MONTH) {
		return m;
	}
	return n - adays[m - 1] + 1;
};
thx__$LocalDate_LocalDate_$Impl_$._new = function(days) {
	return days;
};
thx__$LocalDate_LocalDate_$Impl_$.min = function(this1,other) {
	if(thx__$LocalDate_LocalDate_$Impl_$.compareTo(this1,other) <= 0) {
		return this1;
	} else {
		return other;
	}
};
thx__$LocalDate_LocalDate_$Impl_$.max = function(this1,other) {
	if(thx__$LocalDate_LocalDate_$Impl_$.compareTo(this1,other) >= 0) {
		return this1;
	} else {
		return other;
	}
};
thx__$LocalDate_LocalDate_$Impl_$.jump = function(this1,period,amount) {
	var sec = 0;
	var min = 0;
	var hr = 0;
	var day = thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_DAY);
	var mon = thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_MONTH);
	var yr = thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_YEAR);
	switch(period[1]) {
	case 0:
		sec = amount;
		break;
	case 1:
		min = amount;
		break;
	case 2:
		hr = amount;
		break;
	case 3:
		day += amount;
		break;
	case 4:
		day += amount * 7;
		break;
	case 5:
		mon += amount;
		break;
	case 6:
		yr += amount;
		break;
	}
	var x = haxe__$Int64_Int64_$Impl_$.divMod(thx__$Time_Time_$Impl_$.create(hr,min,sec),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerDayI64).quotient;
	if(x.high != x.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	return thx__$LocalDate_LocalDate_$Impl_$.create(yr,mon,day + Math.floor(x.low / 7));
};
thx__$LocalDate_LocalDate_$Impl_$.daysInThisMonth = function(this1) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysInMonth(thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_YEAR),thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_MONTH));
};
thx__$LocalDate_LocalDate_$Impl_$.prevYear = function(this1) {
	return thx__$LocalDate_LocalDate_$Impl_$.jump(this1,thx_TimePeriod.Year,-1);
};
thx__$LocalDate_LocalDate_$Impl_$.nextYear = function(this1) {
	return thx__$LocalDate_LocalDate_$Impl_$.jump(this1,thx_TimePeriod.Year,1);
};
thx__$LocalDate_LocalDate_$Impl_$.prevMonth = function(this1) {
	return thx__$LocalDate_LocalDate_$Impl_$.jump(this1,thx_TimePeriod.Month,-1);
};
thx__$LocalDate_LocalDate_$Impl_$.nextMonth = function(this1) {
	return thx__$LocalDate_LocalDate_$Impl_$.jump(this1,thx_TimePeriod.Month,1);
};
thx__$LocalDate_LocalDate_$Impl_$.prevWeek = function(this1) {
	return thx__$LocalDate_LocalDate_$Impl_$.jump(this1,thx_TimePeriod.Week,-1);
};
thx__$LocalDate_LocalDate_$Impl_$.nextWeek = function(this1) {
	return thx__$LocalDate_LocalDate_$Impl_$.jump(this1,thx_TimePeriod.Week,1);
};
thx__$LocalDate_LocalDate_$Impl_$.prevDay = function(this1) {
	return thx__$LocalDate_LocalDate_$Impl_$.jump(this1,thx_TimePeriod.Day,-1);
};
thx__$LocalDate_LocalDate_$Impl_$.nextDay = function(this1) {
	return thx__$LocalDate_LocalDate_$Impl_$.jump(this1,thx_TimePeriod.Day,1);
};
thx__$LocalDate_LocalDate_$Impl_$.snapToWeekDay = function(this1,weekday,firstDayOfWk) {
	if(firstDayOfWk == null) {
		firstDayOfWk = 0;
	}
	var d = thx__$LocalDate_LocalDate_$Impl_$.get_dayOfWeek(this1);
	var s = weekday;
	if(s < firstDayOfWk) {
		s += 7;
	}
	if(d < firstDayOfWk) {
		d += 7;
	}
	return thx__$LocalDate_LocalDate_$Impl_$.jump(this1,thx_TimePeriod.Day,s - d);
};
thx__$LocalDate_LocalDate_$Impl_$.snapNextWeekDay = function(this1,weekday) {
	var d = thx__$LocalDate_LocalDate_$Impl_$.get_dayOfWeek(this1);
	var s = weekday;
	if(s < d) {
		s += 7;
	}
	return thx__$LocalDate_LocalDate_$Impl_$.jump(this1,thx_TimePeriod.Day,s - d);
};
thx__$LocalDate_LocalDate_$Impl_$.snapPrevWeekDay = function(this1,weekday) {
	var d = thx__$LocalDate_LocalDate_$Impl_$.get_dayOfWeek(this1);
	var s = weekday;
	if(s > d) {
		s -= 7;
	}
	return thx__$LocalDate_LocalDate_$Impl_$.jump(this1,thx_TimePeriod.Day,s - d);
};
thx__$LocalDate_LocalDate_$Impl_$.snapNext = function(this1,period) {
	switch(period[1]) {
	case 0:case 1:case 2:
		return this1;
	case 3:
		return this1 + 1;
	case 4:
		var wd = thx__$LocalDate_LocalDate_$Impl_$.get_dayOfWeek(this1);
		return this1 + 7 - wd;
	case 5:
		return thx__$LocalDate_LocalDate_$Impl_$.create(thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_YEAR),thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_MONTH) + 1,1);
	case 6:
		return thx__$LocalDate_LocalDate_$Impl_$.create(thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_YEAR) + 1,1,1);
	}
};
thx__$LocalDate_LocalDate_$Impl_$.snapPrev = function(this1,period) {
	switch(period[1]) {
	case 0:case 1:case 2:case 3:
		return this1 - 1;
	case 4:
		var wd = thx__$LocalDate_LocalDate_$Impl_$.get_dayOfWeek(this1);
		return this1 - wd;
	case 5:
		return thx__$LocalDate_LocalDate_$Impl_$.create(thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_YEAR),thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_MONTH),1);
	case 6:
		return thx__$LocalDate_LocalDate_$Impl_$.create(thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_YEAR),1,1);
	}
};
thx__$LocalDate_LocalDate_$Impl_$.snapTo = function(this1,period) {
	switch(period[1]) {
	case 0:case 1:case 2:case 3:
		return this1;
	case 4:
		var wd = thx__$LocalDate_LocalDate_$Impl_$.get_dayOfWeek(this1);
		return thx__$LocalDate_LocalDate_$Impl_$.create(thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_YEAR),thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_MONTH),thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_DAY) + (wd <= 3?-wd:7 - wd));
	case 5:
		var mod = thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_DAY) > Math.round(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysInMonth(thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_YEAR),thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_MONTH)) / 2)?1:0;
		return thx__$LocalDate_LocalDate_$Impl_$.create(thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_YEAR),thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_MONTH) + mod,1);
	case 6:
		var mod1 = this1 - thx__$LocalDate_LocalDate_$Impl_$.create(thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_YEAR),6,2) > 0?1:0;
		return thx__$LocalDate_LocalDate_$Impl_$.create(thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_YEAR) + mod1,1,1);
	}
};
thx__$LocalDate_LocalDate_$Impl_$.sameYear = function(this1,other) {
	return thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_YEAR) == thx__$LocalDate_LocalDate_$Impl_$.getDatePart(other,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_YEAR);
};
thx__$LocalDate_LocalDate_$Impl_$.sameMonth = function(this1,other) {
	if(thx__$LocalDate_LocalDate_$Impl_$.sameYear(this1,other)) {
		return thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_MONTH) == thx__$LocalDate_LocalDate_$Impl_$.getDatePart(other,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_MONTH);
	} else {
		return false;
	}
};
thx__$LocalDate_LocalDate_$Impl_$.withYear = function(this1,year) {
	return thx__$LocalDate_LocalDate_$Impl_$.create(year,thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_MONTH),thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_DAY));
};
thx__$LocalDate_LocalDate_$Impl_$.withMonth = function(this1,month) {
	return thx__$LocalDate_LocalDate_$Impl_$.create(thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_YEAR),month,thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_DAY));
};
thx__$LocalDate_LocalDate_$Impl_$.withDay = function(this1,day) {
	return thx__$LocalDate_LocalDate_$Impl_$.create(thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_YEAR),thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_MONTH),day);
};
thx__$LocalDate_LocalDate_$Impl_$.add = function(this1,days) {
	return this1 + days;
};
thx__$LocalDate_LocalDate_$Impl_$.subtract = function(this1,days) {
	return this1 - days;
};
thx__$LocalDate_LocalDate_$Impl_$.subtractDate = function(this1,date) {
	return this1 - date;
};
thx__$LocalDate_LocalDate_$Impl_$.addDays = function(this1,days) {
	return this1 + days;
};
thx__$LocalDate_LocalDate_$Impl_$.addMonths = function(this1,months) {
	return thx__$LocalDate_LocalDate_$Impl_$.create(thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_YEAR),thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_MONTH) + months,thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_DAY));
};
thx__$LocalDate_LocalDate_$Impl_$.addYears = function(this1,years) {
	return thx__$LocalDate_LocalDate_$Impl_$.addMonths(this1,years * 12);
};
thx__$LocalDate_LocalDate_$Impl_$.compareTo = function(this1,other) {
	if(null == other && this1 == null) {
		return 0;
	}
	if(null == this1) {
		return -1;
	} else if(null == other) {
		return 1;
	}
	return this1 - other;
};
thx__$LocalDate_LocalDate_$Impl_$.equalsTo = function(this1,that) {
	return this1 == that;
};
thx__$LocalDate_LocalDate_$Impl_$.equals = function(self,that) {
	return self == that;
};
thx__$LocalDate_LocalDate_$Impl_$.notEqualsTo = function(this1,that) {
	return this1 != that;
};
thx__$LocalDate_LocalDate_$Impl_$.notEquals = function(self,that) {
	return self != that;
};
thx__$LocalDate_LocalDate_$Impl_$.nearEqualsTo = function(this1,other,span) {
	var v = other - this1;
	var days = v < 0?-v:v;
	var x = haxe__$Int64_Int64_$Impl_$.divMod(thx__$Time_Time_$Impl_$.abs(span),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerDayI64).quotient;
	if(x.high != x.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	return days <= x.low;
};
thx__$LocalDate_LocalDate_$Impl_$.greaterThan = function(this1,that) {
	return this1 - that > 0;
};
thx__$LocalDate_LocalDate_$Impl_$.greater = function(self,that) {
	return self - that > 0;
};
thx__$LocalDate_LocalDate_$Impl_$.greaterEqualsTo = function(this1,that) {
	return this1 - that >= 0;
};
thx__$LocalDate_LocalDate_$Impl_$.greaterEquals = function(self,that) {
	return self - that >= 0;
};
thx__$LocalDate_LocalDate_$Impl_$.lessThan = function(this1,that) {
	return this1 - that < 0;
};
thx__$LocalDate_LocalDate_$Impl_$.less = function(self,that) {
	return self - that < 0;
};
thx__$LocalDate_LocalDate_$Impl_$.lessEqualsTo = function(this1,that) {
	return this1 - that <= 0;
};
thx__$LocalDate_LocalDate_$Impl_$.lessEquals = function(self,that) {
	return self - that <= 0;
};
thx__$LocalDate_LocalDate_$Impl_$.toDate = function(this1) {
	return new Date(thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_YEAR),thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_MONTH) - 1,thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_DAY),0,0,0);
};
thx__$LocalDate_LocalDate_$Impl_$.toString = function(this1) {
	if(null == this1) {
		return "";
	}
	var abs = this1 < 0?-this1:this1;
	return (this1 < 0?"-":"") + ("" + thx__$LocalDate_LocalDate_$Impl_$.getDatePart(abs,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_YEAR) + "-" + thx_Ints.lpad(thx__$LocalDate_LocalDate_$Impl_$.getDatePart(abs,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_MONTH),"0",2) + "-" + thx_Ints.lpad(thx__$LocalDate_LocalDate_$Impl_$.getDatePart(abs,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_DAY),"0",2));
};
thx__$LocalDate_LocalDate_$Impl_$.get_days = function(this1) {
	return this1;
};
thx__$LocalDate_LocalDate_$Impl_$.get_year = function(this1) {
	return thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_YEAR);
};
thx__$LocalDate_LocalDate_$Impl_$.get_month = function(this1) {
	return thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_MONTH);
};
thx__$LocalDate_LocalDate_$Impl_$.get_day = function(this1) {
	return thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_DAY);
};
thx__$LocalDate_LocalDate_$Impl_$.get_dayOfWeek = function(this1) {
	return (this1 + 1) % 7;
};
thx__$LocalDate_LocalDate_$Impl_$.get_dayOfYear = function(this1) {
	return thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_DAY_OF_YEAR);
};
thx__$LocalDate_LocalDate_$Impl_$.get_isInLeapYear = function(this1) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.isLeapYear(thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_YEAR));
};
thx__$LocalDate_LocalDate_$Impl_$.get_monthDays = function(this1) {
	return thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysInMonth(thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_YEAR),thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_MONTH));
};
thx__$LocalDate_LocalDate_$Impl_$.self = function(this1) {
	return this1;
};
var thx_Make = function() { };
thx_Make.__name__ = ["thx","Make"];
var thx_Maps = function() { };
thx_Maps.__name__ = ["thx","Maps"];
thx_Maps.copyTo = function(src,dst) {
	var tmp = src.keys();
	while(tmp.hasNext()) {
		var key = tmp.next();
		dst.set(key,src.get(key));
	}
	return dst;
};
thx_Maps.tuples = function(map) {
	return thx_Iterators.map(map.keys(),function(key) {
		return { _0 : key, _1 : map.get(key)};
	});
};
thx_Maps.mapValues = function(map,f,acc) {
	return thx_Maps.reduce(map,function(m,t) {
		m.set(t._0,f(t._1));
		return m;
	},acc);
};
thx_Maps.reduce = function(map,f,acc) {
	return thx_Arrays.reduce(thx_Maps.tuples(map),f,acc);
};
thx_Maps.values = function(map) {
	return thx_Iterators.map(map.keys(),function(key) {
		return map.get(key);
	});
};
thx_Maps.getOption = function(map,key) {
	var value = map.get(key);
	if(null == value) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(value);
	}
};
thx_Maps.toObject = function(map) {
	return thx_Arrays.reduce(thx_Maps.tuples(map),function(o,t) {
		o[t._0] = t._1;
		return o;
	},{ });
};
thx_Maps.getAlt = function(map,key,alt) {
	var v = map.get(key);
	if(null == v) {
		return alt;
	} else {
		return v;
	}
};
thx_Maps.isMap = function(v) {
	return js_Boot.__instanceof(v,haxe_IMap);
};
thx_Maps.string = function(m) {
	return "[" + thx_Maps.tuples(m).map(function(t) {
		return thx_Dynamics.string(t._0) + " => " + thx_Dynamics.string(t._1);
	}).join(", ") + "]";
};
thx_Maps.merge = function(dest,sources) {
	return thx_Arrays.reduce(sources,function(result,source) {
		return thx_Iterators.reduce(source.keys(),function(result1,key) {
			result1.set(key,source.get(key));
			return result1;
		},result);
	},dest);
};
var thx__$Monoid_Monoid_$Impl_$ = {};
thx__$Monoid_Monoid_$Impl_$.__name__ = ["thx","_Monoid","Monoid_Impl_"];
thx__$Monoid_Monoid_$Impl_$.get_semigroup = function(this1) {
	return this1.append;
};
thx__$Monoid_Monoid_$Impl_$.get_zero = function(this1) {
	return this1.zero;
};
thx__$Monoid_Monoid_$Impl_$.append = function(this1,a0,a1) {
	return this1.append(a0,a1);
};
var thx__$Nel_Nel_$Impl_$ = {};
thx__$Nel_Nel_$Impl_$.__name__ = ["thx","_Nel","Nel_Impl_"];
thx__$Nel_Nel_$Impl_$.nel = function(hd,tl) {
	var _g = thx__$Nel_Nel_$Impl_$.fromArray(tl);
	switch(_g[1]) {
	case 0:
		return thx__$Nel_Nel_$Impl_$.cons(hd,_g[2]);
	case 1:
		return thx__$Nel_Nel_$Impl_$.pure(hd);
	}
};
thx__$Nel_Nel_$Impl_$.pure = function(a) {
	return thx_NonEmptyList.Single(a);
};
thx__$Nel_Nel_$Impl_$.cons = function(a,nl) {
	return thx_NonEmptyList.ConsNel(a,nl);
};
thx__$Nel_Nel_$Impl_$.fromArray = function(arr) {
	if(arr.length == 0) {
		return haxe_ds_Option.None;
	} else {
		var res = thx_NonEmptyList.Single(arr[arr.length - 1]);
		var tmp = thx_Ints.rangeIter(arr.length - 2,-1,-1);
		while(tmp.hasNext()) res = thx_NonEmptyList.ConsNel(arr[tmp.next()],res);
		return haxe_ds_Option.Some(res);
	}
};
thx__$Nel_Nel_$Impl_$.map = function(this1,f) {
	var fb = f;
	return thx__$Nel_Nel_$Impl_$.flatMap(this1,function(v) {
		return thx__$Nel_Nel_$Impl_$.pure(fb(v));
	});
};
thx__$Nel_Nel_$Impl_$.flatMap = function(this1,f) {
	switch(this1[1]) {
	case 0:
		return f(this1[2]);
	case 1:
		return thx__$Nel_Nel_$Impl_$.append(f(this1[2]),thx__$Nel_Nel_$Impl_$.flatMap(this1[3],f));
	}
};
thx__$Nel_Nel_$Impl_$.fold = function(this1,s) {
	switch(this1[1]) {
	case 0:
		return this1[2];
	case 1:
		return (thx__$Semigroup_Semigroup_$Impl_$.get_append(s))(this1[2],thx__$Nel_Nel_$Impl_$.fold(this1[3],s));
	}
};
thx__$Nel_Nel_$Impl_$.append = function(this1,nel) {
	switch(this1[1]) {
	case 0:
		return thx_NonEmptyList.ConsNel(this1[2],nel);
	case 1:
		return thx_NonEmptyList.ConsNel(this1[2],thx__$Nel_Nel_$Impl_$.append(this1[3],nel));
	}
};
thx__$Nel_Nel_$Impl_$.toArray = function(this1) {
	var go = null;
	go = function(acc,xs) {
		switch(xs[1]) {
		case 0:
			return thx_Arrays.append(acc,xs[2]);
		case 1:
			return go(thx_Arrays.append(acc,xs[2]),xs[3]);
		}
	};
	var result = go([],this1).slice();
	result.reverse();
	return result;
};
thx__$Nel_Nel_$Impl_$.semigroup = function() {
	return function(nl,nr) {
		return thx__$Nel_Nel_$Impl_$.append(nl,nr);
	};
};
var thx_NonEmptyList = { __ename__ : ["thx","NonEmptyList"], __constructs__ : ["Single","ConsNel"] };
thx_NonEmptyList.Single = function(x) { var $x = ["Single",0,x]; $x.__enum__ = thx_NonEmptyList; return $x; };
thx_NonEmptyList.ConsNel = function(x,xs) { var $x = ["ConsNel",1,x,xs]; $x.__enum__ = thx_NonEmptyList; return $x; };
var thx_Nil = { __ename__ : ["thx","Nil"], __constructs__ : ["nil"] };
thx_Nil.nil = ["nil",0];
thx_Nil.nil.__enum__ = thx_Nil;
var thx_Nulls = function() { };
thx_Nulls.__name__ = ["thx","Nulls"];
var thx_Objects = function() { };
thx_Objects.__name__ = ["thx","Objects"];
thx_Objects.compare = function(a,b) {
	var v;
	var fields = Reflect.fields(a);
	v = thx_Arrays.compare(fields,Reflect.fields(b));
	if(v != 0) {
		return v;
	}
	var _g = 0;
	while(_g < fields.length) {
		var field = fields[_g];
		++_g;
		v = thx_Dynamics.compare(Reflect.field(a,field),Reflect.field(b,field));
		if(v != 0) {
			return v;
		}
	}
	return 0;
};
thx_Objects.isEmpty = function(o) {
	return Reflect.fields(o).length == 0;
};
thx_Objects.exists = function(o,name) {
	return Object.prototype.hasOwnProperty.call(o,name);
};
thx_Objects.fields = function(o) {
	return Reflect.fields(o);
};
thx_Objects.combine = function(first,second) {
	var to = { };
	var _g = 0;
	var _g1 = Reflect.fields(first);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		to[field] = Reflect.field(first,field);
	}
	var _g2 = 0;
	var _g11 = Reflect.fields(second);
	while(_g2 < _g11.length) {
		var field1 = _g11[_g2];
		++_g2;
		to[field1] = Reflect.field(second,field1);
	}
	return to;
};
thx_Objects.assign = function(to,from,replacef) {
	if(null == replacef) {
		replacef = function(field,oldv,newv) {
			return newv;
		};
	}
	var _g = 0;
	var _g1 = Reflect.fields(from);
	while(_g < _g1.length) {
		var field1 = _g1[_g];
		++_g;
		var newv1 = Reflect.field(from,field1);
		if(Object.prototype.hasOwnProperty.call(to,field1)) {
			to[field1] = replacef(field1,Reflect.field(to,field1),newv1);
		} else {
			to[field1] = newv1;
		}
	}
	return to;
};
thx_Objects.copyTo = function(src,dst,cloneInstances) {
	if(cloneInstances == null) {
		cloneInstances = false;
	}
	var _g = 0;
	var _g1 = Reflect.fields(src);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		var sv = thx_Dynamics.clone(Reflect.field(src,field),cloneInstances);
		var dv = Reflect.field(dst,field);
		var tmp;
		var tmp1;
		if(Reflect.isObject(sv)) {
			var o = sv;
			tmp1 = null == (o == null?null:js_Boot.getClass(o));
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			if(Reflect.isObject(dv)) {
				var o1 = dv;
				tmp = null == (o1 == null?null:js_Boot.getClass(o1));
			} else {
				tmp = false;
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			thx_Objects.copyTo(sv,dv);
		} else {
			dst[field] = sv;
		}
	}
	return dst;
};
thx_Objects.clone = function(src,cloneInstances) {
	if(cloneInstances == null) {
		cloneInstances = false;
	}
	return thx_Dynamics.clone(src,cloneInstances);
};
thx_Objects.toMap = function(o) {
	return thx_Arrays.reduce(thx_Objects.tuples(o),function(map,t) {
		var value = t._1;
		var key = t._0;
		if(__map_reserved[key] != null) {
			map.setReserved(key,value);
		} else {
			map.h[key] = value;
		}
		return map;
	},new haxe_ds_StringMap());
};
thx_Objects.size = function(o) {
	return Reflect.fields(o).length;
};
thx_Objects.string = function(o) {
	return "{" + Reflect.fields(o).map(function(key) {
		var v = Reflect.field(o,key);
		return "" + key + " : " + (typeof(v) == "string"?thx_Strings.quote(v):thx_Dynamics.string(v));
	}).join(", ") + "}";
};
thx_Objects.stringImpl = function(o,cache) {
};
thx_Objects.values = function(o) {
	return Reflect.fields(o).map(function(key) {
		return Reflect.field(o,key);
	});
};
thx_Objects.tuples = function(o) {
	return Reflect.fields(o).map(function(key) {
		return { _0 : key, _1 : Reflect.field(o,key)};
	});
};
thx_Objects.hasPath = function(o,path) {
	var paths = path.split(".");
	var current = o;
	var _g = 0;
	while(_g < paths.length) {
		var currentPath = paths[_g];
		++_g;
		if(thx_Strings.DIGITS.match(currentPath)) {
			var index = Std.parseInt(currentPath);
			var value = current;
			var arr = (value instanceof Array)?value:null;
			if(null == arr || arr.length <= index) {
				return false;
			}
			current = arr[index];
		} else if(Object.prototype.hasOwnProperty.call(current,currentPath)) {
			current = Reflect.field(current,currentPath);
		} else {
			return false;
		}
	}
	return true;
};
thx_Objects.hasPathValue = function(o,path) {
	return thx_Objects.getPath(o,path) != null;
};
thx_Objects.getPath = function(o,path) {
	var paths = path.split(".");
	var current = o;
	var _g = 0;
	while(_g < paths.length) {
		var currentPath = paths[_g];
		++_g;
		if(thx_Strings.DIGITS.match(currentPath)) {
			var index = Std.parseInt(currentPath);
			var value = current;
			var arr = (value instanceof Array)?value:null;
			if(null == arr) {
				return null;
			}
			current = arr[index];
		} else if(Object.prototype.hasOwnProperty.call(current,currentPath)) {
			current = Reflect.field(current,currentPath);
		} else {
			return null;
		}
	}
	return current;
};
thx_Objects.getPathOption = function(o,path) {
	var value = thx_Objects.getPath(o,path);
	if(null == value) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(value);
	}
};
thx_Objects.getPathOr = function(o,path,alt) {
	var paths = path.split(".");
	var current = o;
	var _g = 0;
	while(_g < paths.length) {
		var currentPath = paths[_g];
		++_g;
		if(thx_Strings.DIGITS.match(currentPath)) {
			var index = Std.parseInt(currentPath);
			var value = current;
			var arr = (value instanceof Array)?value:null;
			if(null == arr) {
				return null;
			}
			current = arr[index];
		} else if(Object.prototype.hasOwnProperty.call(current,currentPath)) {
			current = Reflect.field(current,currentPath);
		} else {
			return alt;
		}
	}
	return current;
};
thx_Objects.setPath = function(o,path,val) {
	var paths = path.split(".");
	var current = o;
	var _g1 = 0;
	var _g = paths.length - 1;
	while(_g1 < _g) {
		var i = _g1++;
		var currentPath = paths[i];
		var nextPath = paths[i + 1];
		if(thx_Strings.DIGITS.match(currentPath) || currentPath == "*") {
			var index = currentPath == "*"?current.length:Std.parseInt(currentPath);
			if(current[index] == null) {
				if(thx_Strings.DIGITS.match(nextPath) || nextPath == "*") {
					current[index] = [];
				} else {
					current[index] = { };
				}
			}
			current = current[index];
		} else {
			if(!Object.prototype.hasOwnProperty.call(current,currentPath)) {
				if(thx_Strings.DIGITS.match(nextPath) || nextPath == "*") {
					current[currentPath] = [];
				} else {
					current[currentPath] = { };
				}
			}
			current = Reflect.field(current,currentPath);
		}
	}
	var tmp = paths[paths.length - 1];
	if(thx_Strings.DIGITS.match(tmp)) {
		current[Std.parseInt(tmp)] = val;
	} else if(tmp == "*") {
		current.push(val);
	} else {
		current[tmp] = val;
	}
	return o;
};
thx_Objects.removePath = function(o,path) {
	var paths = path.split(".");
	var target = paths.pop();
	try {
		var sub = thx_Arrays.reduce(paths,function(existing,nextPath) {
			if(nextPath == "*") {
				return existing.pop();
			} else if(thx_Strings.DIGITS.match(nextPath)) {
				return existing[Std.parseInt(nextPath)];
			} else {
				return Reflect.field(existing,nextPath);
			}
		},o);
		if(null != sub) {
			Reflect.deleteField(sub,target);
		}
	} catch( e ) {
		haxe_CallStack.lastException = e;
	}
	return o;
};
var thx_Options = function() { };
thx_Options.__name__ = ["thx","Options"];
thx_Options.ofValue = function(value) {
	if(null == value) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(value);
	}
};
thx_Options.maybe = function(value) {
	if(null == value) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(value);
	}
};
thx_Options.equals = function(a,b,eq) {
	switch(a[1]) {
	case 0:
		if(b[1] == 0) {
			var a1 = a[2];
			var b1 = b[2];
			if(null == eq) {
				eq = function(a2,b2) {
					return a2 == b2;
				};
			}
			return eq(a1,b1);
		} else {
			return false;
		}
		break;
	case 1:
		if(b[1] == 1) {
			return true;
		} else {
			return false;
		}
		break;
	}
};
thx_Options.equalsValue = function(a,b,eq) {
	return thx_Options.equals(a,null == b?haxe_ds_Option.None:haxe_ds_Option.Some(b),eq);
};
thx_Options.map = function(option,callback) {
	switch(option[1]) {
	case 0:
		return haxe_ds_Option.Some(callback(option[2]));
	case 1:
		return haxe_ds_Option.None;
	}
};
thx_Options.ap = function(option,fopt) {
	switch(option[1]) {
	case 0:
		var v = option[2];
		return thx_Options.map(fopt,function(f) {
			return f(v);
		});
	case 1:
		return haxe_ds_Option.None;
	}
};
thx_Options.flatMap = function(option,callback) {
	switch(option[1]) {
	case 0:
		return callback(option[2]);
	case 1:
		return haxe_ds_Option.None;
	}
};
thx_Options.join = function(option) {
	switch(option[1]) {
	case 0:
		return option[2];
	case 1:
		return haxe_ds_Option.None;
	}
};
thx_Options.cata = function(option,ifNone,f) {
	switch(option[1]) {
	case 0:
		return f(option[2]);
	case 1:
		return ifNone;
	}
};
thx_Options.foldLeft = function(option,b,f) {
	switch(option[1]) {
	case 0:
		return f(b,option[2]);
	case 1:
		return b;
	}
};
thx_Options.foldMap = function(option,f,m) {
	var tmp = thx_Options.map(option,f);
	var tmp1 = thx__$Monoid_Monoid_$Impl_$.get_zero(m);
	var _e = m;
	return thx_Options.foldLeft(tmp,tmp1,function(a0,a1) {
		return thx__$Monoid_Monoid_$Impl_$.append(_e,a0,a1);
	});
};
thx_Options.filter = function(option,f) {
	if(option[1] == 0) {
		if(f(option[2])) {
			return option;
		} else {
			return haxe_ds_Option.None;
		}
	} else {
		return haxe_ds_Option.None;
	}
};
thx_Options.toArray = function(option) {
	switch(option[1]) {
	case 0:
		return [option[2]];
	case 1:
		return [];
	}
};
thx_Options.toBool = function(option) {
	switch(option[1]) {
	case 0:
		return true;
	case 1:
		return false;
	}
};
thx_Options.isNone = function(option) {
	return !thx_Options.toBool(option);
};
thx_Options.toOption = function(value) {
	if(null == value) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(value);
	}
};
thx_Options.get = function(option) {
	switch(option[1]) {
	case 0:
		return option[2];
	case 1:
		return null;
	}
};
thx_Options.getOrElse = function(option,alt) {
	switch(option[1]) {
	case 0:
		return option[2];
	case 1:
		return alt;
	}
};
thx_Options.orElse = function(option,alt) {
	switch(option[1]) {
	case 0:
		return option;
	case 1:
		return alt;
	}
};
thx_Options.all = function(option,f) {
	switch(option[1]) {
	case 0:
		return f(option[2]);
	case 1:
		return true;
	}
};
thx_Options.any = function(option,f) {
	switch(option[1]) {
	case 0:
		return f(option[2]);
	case 1:
		return false;
	}
};
thx_Options.traverseValidation = function(option,f) {
	switch(option[1]) {
	case 0:
		return thx__$Validation_Validation_$Impl_$.ap(f(option[2]),thx_Either.Right(function(v) {
			return haxe_ds_Option.Some(v);
		}),function(e1,e2) {
			throw new js__$Boot_HaxeError("Unreachable");
		});
	case 1:
		return thx_Either.Right(haxe_ds_Option.None);
	}
};
thx_Options.toSuccess = function(option,error) {
	switch(option[1]) {
	case 0:
		return thx_Either.Right(option[2]);
	case 1:
		return thx_Either.Left(error);
	}
};
thx_Options.toSuccessNel = function(option,error) {
	switch(option[1]) {
	case 0:
		return thx_Either.Right(option[2]);
	case 1:
		return thx_Either.Left(thx__$Nel_Nel_$Impl_$.pure(error));
	}
};
thx_Options.toFailure = function(error,value) {
	switch(error[1]) {
	case 0:
		return thx_Either.Left(error[2]);
	case 1:
		return thx_Either.Right(value);
	}
};
thx_Options.toFailureNel = function(error,value) {
	switch(error[1]) {
	case 0:
		return thx_Either.Left(thx__$Nel_Nel_$Impl_$.pure(error[2]));
	case 1:
		return thx_Either.Right(value);
	}
};
thx_Options.ap2 = function(f,v1,v2) {
	return thx_Options.ap(v2,thx_Options.map(v1,thx_Functions2.curry(f)));
};
thx_Options.ap3 = function(f,v1,v2,v3) {
	var f1 = f;
	return thx_Options.ap(v3,thx_Options.ap(v2,thx_Options.map(v1,thx_Functions2.curry(function(a,b) {
		return function(c) {
			return f1(a,b,c);
		};
	}))));
};
thx_Options.ap4 = function(f,v1,v2,v3,v4) {
	var f1 = f;
	var f2 = function(a,b,c) {
		return function(d) {
			return f1(a,b,c,d);
		};
	};
	return thx_Options.ap(v4,thx_Options.ap(v3,thx_Options.ap(v2,thx_Options.map(v1,thx_Functions2.curry(function(a1,b1) {
		return function(c1) {
			return f2(a1,b1,c1);
		};
	})))));
};
thx_Options.ap5 = function(f,v1,v2,v3,v4,v5) {
	var f1 = f;
	var f2 = function(a,b,c,d) {
		return function(e) {
			return f1(a,b,c,d,e);
		};
	};
	var f3 = function(a1,b1,c1) {
		return function(d1) {
			return f2(a1,b1,c1,d1);
		};
	};
	return thx_Options.ap(v5,thx_Options.ap(v4,thx_Options.ap(v3,thx_Options.ap(v2,thx_Options.map(v1,thx_Functions2.curry(function(a2,b2) {
		return function(c2) {
			return f3(a2,b2,c2);
		};
	}))))));
};
thx_Options.ap6 = function(f,v1,v2,v3,v4,v5,v6) {
	var f1 = f;
	var f2 = function(a,b,c,d,e) {
		return function(f0) {
			return f1(a,b,c,d,e,f0);
		};
	};
	var f3 = function(a1,b1,c1,d1) {
		return function(e1) {
			return f2(a1,b1,c1,d1,e1);
		};
	};
	var f4 = function(a2,b2,c2) {
		return function(d2) {
			return f3(a2,b2,c2,d2);
		};
	};
	return thx_Options.ap(v6,thx_Options.ap(v5,thx_Options.ap(v4,thx_Options.ap(v3,thx_Options.ap(v2,thx_Options.map(v1,thx_Functions2.curry(function(a3,b3) {
		return function(c3) {
			return f4(a3,b3,c3);
		};
	})))))));
};
thx_Options.ap7 = function(f,v1,v2,v3,v4,v5,v6,v7) {
	var f1 = f;
	var f2 = function(a,b,c,d,e,f0) {
		return function(g) {
			return f1(a,b,c,d,e,f0,g);
		};
	};
	var f3 = function(a1,b1,c1,d1,e1) {
		return function(f01) {
			return f2(a1,b1,c1,d1,e1,f01);
		};
	};
	var f4 = function(a2,b2,c2,d2) {
		return function(e2) {
			return f3(a2,b2,c2,d2,e2);
		};
	};
	var f5 = function(a3,b3,c3) {
		return function(d3) {
			return f4(a3,b3,c3,d3);
		};
	};
	return thx_Options.ap(v7,thx_Options.ap(v6,thx_Options.ap(v5,thx_Options.ap(v4,thx_Options.ap(v3,thx_Options.ap(v2,thx_Options.map(v1,thx_Functions2.curry(function(a4,b4) {
		return function(c4) {
			return f5(a4,b4,c4);
		};
	}))))))));
};
thx_Options.ap8 = function(f,v1,v2,v3,v4,v5,v6,v7,v8) {
	var f1 = f;
	var f2 = function(a,b,c,d,e,f0,g) {
		return function(h) {
			return f1(a,b,c,d,e,f0,g,h);
		};
	};
	var f3 = function(a1,b1,c1,d1,e1,f01) {
		return function(g1) {
			return f2(a1,b1,c1,d1,e1,f01,g1);
		};
	};
	var f4 = function(a2,b2,c2,d2,e2) {
		return function(f02) {
			return f3(a2,b2,c2,d2,e2,f02);
		};
	};
	var f5 = function(a3,b3,c3,d3) {
		return function(e3) {
			return f4(a3,b3,c3,d3,e3);
		};
	};
	var f6 = function(a4,b4,c4) {
		return function(d4) {
			return f5(a4,b4,c4,d4);
		};
	};
	return thx_Options.ap(v8,thx_Options.ap(v7,thx_Options.ap(v6,thx_Options.ap(v5,thx_Options.ap(v4,thx_Options.ap(v3,thx_Options.ap(v2,thx_Options.map(v1,thx_Functions2.curry(function(a5,b5) {
		return function(c5) {
			return f6(a5,b5,c5);
		};
	})))))))));
};
var thx_Orderings = function() { };
thx_Orderings.__name__ = ["thx","Orderings"];
thx_Orderings.negate = function(o) {
	switch(o[1]) {
	case 0:
		return thx_OrderingImpl.GT;
	case 1:
		return thx_OrderingImpl.LT;
	case 2:
		return thx_OrderingImpl.EQ;
	}
};
var thx__$OrderedMap_OrderedMap_$Impl_$ = {};
thx__$OrderedMap_OrderedMap_$Impl_$.__name__ = ["thx","_OrderedMap","OrderedMap_Impl_"];
thx__$OrderedMap_OrderedMap_$Impl_$.createString = function() {
	return new thx_StringOrderedMap();
};
thx__$OrderedMap_OrderedMap_$Impl_$.createInt = function() {
	return new thx_IntOrderedMap();
};
thx__$OrderedMap_OrderedMap_$Impl_$.createObject = function() {
	return new thx_ObjectOrderedMap();
};
thx__$OrderedMap_OrderedMap_$Impl_$.createEnum = function() {
	return new thx_EnumValueOrderedMap();
};
thx__$OrderedMap_OrderedMap_$Impl_$._new = function(inst) {
	return inst;
};
thx__$OrderedMap_OrderedMap_$Impl_$.getOption = function(this1,key) {
	var value = this1.get(key);
	if(null == value) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(value);
	}
};
thx__$OrderedMap_OrderedMap_$Impl_$.empty = function(this1) {
	return this1.empty();
};
thx__$OrderedMap_OrderedMap_$Impl_$.copyTo = function(this1,that) {
	var tmp = this1.keys();
	while(tmp.hasNext()) {
		var key = tmp.next();
		that.set(key,this1.get(key));
	}
	return that;
};
thx__$OrderedMap_OrderedMap_$Impl_$.clone = function(this1) {
	var that = this1.empty();
	var tmp = this1.keys();
	while(tmp.hasNext()) {
		var key = tmp.next();
		that.set(key,this1.get(key));
	}
	return that;
};
thx__$OrderedMap_OrderedMap_$Impl_$.get = function(this1,key) {
	return this1.get(key);
};
thx__$OrderedMap_OrderedMap_$Impl_$.at = function(this1,index) {
	return this1.at(index);
};
thx__$OrderedMap_OrderedMap_$Impl_$.arrayWrite = function(this1,k,v) {
	return this1.setValue(k,v);
};
thx__$OrderedMap_OrderedMap_$Impl_$.self = function(this1) {
	return this1;
};
var thx_OrderedMapImpl = function(map) {
	this.map = map;
	this.arr = [];
	this.length = 0;
};
thx_OrderedMapImpl.__name__ = ["thx","OrderedMapImpl"];
thx_OrderedMapImpl.__interfaces__ = [haxe_IMap];
thx_OrderedMapImpl.prototype = {
	map: null
	,arr: null
	,length: null
	,get: function(k) {
		return this.map.get(k);
	}
	,keyAt: function(index) {
		return this.arr[index];
	}
	,keyIndex: function(k) {
		var _g1 = 0;
		var _g = this.arr.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.arr[i] == k) {
				return i;
			}
		}
		return -1;
	}
	,valueIndex: function(v) {
		var _g1 = 0;
		var _g = this.arr.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.map.get(this.arr[i]) == v) {
				return i;
			}
		}
		return -1;
	}
	,at: function(index) {
		return this.map.get(this.keyAt(index));
	}
	,set: function(k,v) {
		if(!this.map.exists(k)) {
			this.arr.push(k);
			this.length++;
		}
		this.map.set(k,v);
	}
	,empty: function() {
		throw new thx_error_AbstractMethod({ fileName : "OrderedMap.hx", lineNumber : 125, className : "thx.OrderedMapImpl", methodName : "empty"});
	}
	,setValue: function(k,v) {
		this.set(k,v);
		return v;
	}
	,insert: function(index,k,v) {
		this.remove(k);
		this.arr.splice(index,0,k);
		this.map.set(k,v);
		this.length++;
	}
	,exists: function(k) {
		return this.map.exists(k);
	}
	,remove: function(k) {
		if(!this.map.exists(k)) {
			return false;
		}
		this.map.remove(k);
		HxOverrides.remove(this.arr,k);
		this.length--;
		return true;
	}
	,removeAt: function(index) {
		var key = this.arr[index];
		if(key == null) {
			return false;
		}
		this.map.remove(key);
		HxOverrides.remove(this.arr,key);
		this.length--;
		return true;
	}
	,keys: function() {
		return HxOverrides.iter(this.arr);
	}
	,iterator: function() {
		return HxOverrides.iter(this.toArray());
	}
	,tuples: function() {
		var _gthis = this;
		return this.arr.map(function(key) {
			return { _0 : key, _1 : _gthis.map.get(key)};
		});
	}
	,toString: function() {
		var s = "";
		s = "[";
		var it = this.keys();
		while(it.hasNext()) {
			var k = it.next();
			s += Std.string(k);
			s += " => ";
			s += Std.string(this.map.get(k));
			if(it.hasNext()) {
				s += ", ";
			}
		}
		s += "]";
		return s;
	}
	,toArray: function() {
		var values = [];
		var _g = 0;
		var _g1 = this.arr;
		while(_g < _g1.length) {
			var k = _g1[_g];
			++_g;
			values.push(this.map.get(k));
		}
		return values;
	}
	,__class__: thx_OrderedMapImpl
};
var thx_EnumValueOrderedMap = function() {
	thx_OrderedMapImpl.call(this,new haxe_ds_EnumValueMap());
};
thx_EnumValueOrderedMap.__name__ = ["thx","EnumValueOrderedMap"];
thx_EnumValueOrderedMap.__super__ = thx_OrderedMapImpl;
thx_EnumValueOrderedMap.prototype = $extend(thx_OrderedMapImpl.prototype,{
	empty: function() {
		return new thx_EnumValueOrderedMap();
	}
	,__class__: thx_EnumValueOrderedMap
});
var thx_IntOrderedMap = function() {
	thx_OrderedMapImpl.call(this,new haxe_ds_IntMap());
};
thx_IntOrderedMap.__name__ = ["thx","IntOrderedMap"];
thx_IntOrderedMap.__super__ = thx_OrderedMapImpl;
thx_IntOrderedMap.prototype = $extend(thx_OrderedMapImpl.prototype,{
	empty: function() {
		return new thx_IntOrderedMap();
	}
	,__class__: thx_IntOrderedMap
});
var thx_ObjectOrderedMap = function() {
	thx_OrderedMapImpl.call(this,new haxe_ds_ObjectMap());
};
thx_ObjectOrderedMap.__name__ = ["thx","ObjectOrderedMap"];
thx_ObjectOrderedMap.__super__ = thx_OrderedMapImpl;
thx_ObjectOrderedMap.prototype = $extend(thx_OrderedMapImpl.prototype,{
	empty: function() {
		return new thx_ObjectOrderedMap();
	}
	,__class__: thx_ObjectOrderedMap
});
var thx_StringOrderedMap = function() {
	thx_OrderedMapImpl.call(this,new haxe_ds_StringMap());
};
thx_StringOrderedMap.__name__ = ["thx","StringOrderedMap"];
thx_StringOrderedMap.__super__ = thx_OrderedMapImpl;
thx_StringOrderedMap.prototype = $extend(thx_OrderedMapImpl.prototype,{
	empty: function() {
		return new thx_StringOrderedMap();
	}
	,__class__: thx_StringOrderedMap
});
var thx__$OrderedSet_OrderedSet_$Impl_$ = {};
thx__$OrderedSet_OrderedSet_$Impl_$.__name__ = ["thx","_OrderedSet","OrderedSet_Impl_"];
thx__$OrderedSet_OrderedSet_$Impl_$.toOrderedSet = function(arr) {
	var set = [];
	var _g = 0;
	while(_g < arr.length) {
		var v = arr[_g];
		++_g;
		thx__$OrderedSet_OrderedSet_$Impl_$.push(set,v);
	}
	return set;
};
thx__$OrderedSet_OrderedSet_$Impl_$.arrayToOrderedSet = function(arr) {
	return thx__$OrderedSet_OrderedSet_$Impl_$.toOrderedSet(arr);
};
thx__$OrderedSet_OrderedSet_$Impl_$.create = function(arr) {
	if(null == arr) {
		return [];
	} else {
		return thx__$OrderedSet_OrderedSet_$Impl_$.toOrderedSet(arr);
	}
};
thx__$OrderedSet_OrderedSet_$Impl_$._new = function(arr) {
	return arr;
};
thx__$OrderedSet_OrderedSet_$Impl_$.add = function(this1,v) {
	if(thx__$OrderedSet_OrderedSet_$Impl_$.exists(this1,v)) {
		return false;
	} else {
		this1.push(v);
		return true;
	}
};
thx__$OrderedSet_OrderedSet_$Impl_$.copy = function(this1) {
	return this1.slice();
};
thx__$OrderedSet_OrderedSet_$Impl_$.difference = function(this1,set) {
	var result = this1.slice();
	var tmp = HxOverrides.iter(set);
	while(tmp.hasNext()) HxOverrides.remove(result,tmp.next());
	return result;
};
thx__$OrderedSet_OrderedSet_$Impl_$.exists = function(this1,v) {
	var _g = 0;
	while(_g < this1.length) {
		var t = this1[_g];
		++_g;
		if(t == v) {
			return true;
		}
	}
	return false;
};
thx__$OrderedSet_OrderedSet_$Impl_$.get = function(this1,index) {
	return this1[index];
};
thx__$OrderedSet_OrderedSet_$Impl_$.intersection = function(this1,set) {
	var result = [];
	var _g = 0;
	while(_g < this1.length) {
		var item = this1[_g];
		++_g;
		if(thx__$OrderedSet_OrderedSet_$Impl_$.exists(set,item)) {
			result.push(item);
		}
	}
	return result;
};
thx__$OrderedSet_OrderedSet_$Impl_$.push = function(this1,v) {
	thx__$OrderedSet_OrderedSet_$Impl_$.add(this1,v);
};
thx__$OrderedSet_OrderedSet_$Impl_$.pushMany = function(this1,values) {
	var tmp = $iterator(values)();
	while(tmp.hasNext()) thx__$OrderedSet_OrderedSet_$Impl_$.push(this1,tmp.next());
};
thx__$OrderedSet_OrderedSet_$Impl_$.slice = function(this1,pos,end) {
	return this1.slice(pos,end);
};
thx__$OrderedSet_OrderedSet_$Impl_$.splice = function(this1,pos,len) {
	return this1.splice(pos,len);
};
thx__$OrderedSet_OrderedSet_$Impl_$.union = function(this1,set) {
	return thx__$OrderedSet_OrderedSet_$Impl_$.toOrderedSet(this1.concat(thx__$OrderedSet_OrderedSet_$Impl_$.toArray(set)));
};
thx__$OrderedSet_OrderedSet_$Impl_$.unionArray = function(this1,set) {
	return thx__$OrderedSet_OrderedSet_$Impl_$.toOrderedSet(this1.concat(set));
};
thx__$OrderedSet_OrderedSet_$Impl_$.toArray = function(this1) {
	return this1.slice();
};
thx__$OrderedSet_OrderedSet_$Impl_$.setToArray = function(this1) {
	return thx__$OrderedSet_OrderedSet_$Impl_$.toArray(this1);
};
thx__$OrderedSet_OrderedSet_$Impl_$.toString = function(this1) {
	return "{" + this1.join(", ") + "}";
};
var thx__$Path_Path_$Impl_$ = {};
thx__$Path_Path_$Impl_$.__name__ = ["thx","_Path","Path_Impl_"];
thx__$Path_Path_$Impl_$.isValidNix = function(path) {
	return thx_Arrays.any(path.slice(2),function(_) {
		return _.indexOf("/") < 0;
	});
};
thx__$Path_Path_$Impl_$.isValidWin32 = function(path) {
	return thx_Arrays.any(path.slice(2),function(_) {
		return !new EReg("[<>:/\\|?*\"]","g").match(_);
	});
};
thx__$Path_Path_$Impl_$.normalizeNix = function(path,replacement) {
	if(replacement == null) {
		replacement = "_";
	}
	return thx__$Path_Path_$Impl_$.map(path,function(_) {
		return StringTools.replace(_,"/",replacement);
	});
};
thx__$Path_Path_$Impl_$.normalizeWin32 = function(path,replacement) {
	if(replacement == null) {
		replacement = "_";
	}
	return thx__$Path_Path_$Impl_$.map(path,function(_) {
		return _.replace(new EReg("[<>:\"/\\|?*]","g").r,replacement);
	});
};
thx__$Path_Path_$Impl_$.fromString = function(s) {
	if(s.indexOf("\\") >= 0) {
		var re = new EReg("^([a-z]+[:][\\\\])","i");
		if(re.match(s)) {
			var root = re.matched(1);
			return ["\\",root].concat(thx__$Path_Path_$Impl_$.resolve(re.matchedRight().split("\\"),root != ""));
		} else {
			return ["\\",""].concat(thx__$Path_Path_$Impl_$.resolve(s.split("\\"),false));
		}
	} else {
		var root1 = StringTools.startsWith(s,"/")?"/":"";
		return ["/",root1].concat(thx__$Path_Path_$Impl_$.resolve(s.split("/"),root1 != ""));
	}
};
thx__$Path_Path_$Impl_$.resolve = function(path,isAbsolute) {
	path = thx_ArrayStrings.compact(path).filter(function(s) {
		return s != ".";
	});
	return thx_Arrays.reduce(path,function(acc,s1) {
		if(s1 == ".." && acc.length > 0 && acc[acc.length - 1] != "..") {
			return acc.slice(0,acc.length - 1);
		} else if(s1 == ".." && isAbsolute) {
			return acc;
		} else {
			return acc.concat([s1]);
		}
	},[]);
};
thx__$Path_Path_$Impl_$.create = function(root,path,sep) {
	return [sep,root].concat(thx__$Path_Path_$Impl_$.resolve(path,root != ""));
};
thx__$Path_Path_$Impl_$.raw = function(parts) {
	return parts;
};
thx__$Path_Path_$Impl_$._new = function(parts) {
	return parts;
};
thx__$Path_Path_$Impl_$.asAbsolute = function(this1,root) {
	if(root == null) {
		root = "C:\\";
	}
	var root1 = this1[0] == "/"?"/":root;
	return [this1[0],root1].concat(thx__$Path_Path_$Impl_$.resolve(this1.slice(2),root1 != ""));
};
thx__$Path_Path_$Impl_$.asRelative = function(this1) {
	return [this1[0],""].concat(thx__$Path_Path_$Impl_$.resolve(this1.slice(2),false));
};
thx__$Path_Path_$Impl_$.normalize = function(this1) {
	if(this1[0] == "\\") {
		return thx__$Path_Path_$Impl_$.normalizeWin32(this1);
	} else {
		return thx__$Path_Path_$Impl_$.normalizeNix(this1);
	}
};
thx__$Path_Path_$Impl_$.isAbsolute = function(this1) {
	return this1[1] != "";
};
thx__$Path_Path_$Impl_$.isRelative = function(this1) {
	return this1[1] == "";
};
thx__$Path_Path_$Impl_$.isRoot = function(this1) {
	if(this1[1] != "") {
		return this1.slice(2).length == 0;
	} else {
		return false;
	}
};
thx__$Path_Path_$Impl_$.isNix = function(this1) {
	return this1[0] == "/";
};
thx__$Path_Path_$Impl_$.isWin32 = function(this1) {
	return this1[0] == "\\";
};
thx__$Path_Path_$Impl_$.isValid = function(this1) {
	if(this1[0] == "\\") {
		return thx__$Path_Path_$Impl_$.isValidWin32(this1);
	} else {
		return thx__$Path_Path_$Impl_$.isValidNix(this1);
	}
};
thx__$Path_Path_$Impl_$.noext = function(this1) {
	var e = thx__$Path_Path_$Impl_$.ext(this1);
	if(e == "") {
		return thx__$Path_Path_$Impl_$.base(this1);
	} else {
		return thx__$Path_Path_$Impl_$.base(this1,"." + e);
	}
};
thx__$Path_Path_$Impl_$.base = function(this1,end) {
	if(this1.slice(2).length == 0) {
		return "";
	}
	var array = this1.slice(2);
	var name = array[array.length - 1];
	if(null != end && StringTools.endsWith(name,end)) {
		return name.substring(0,name.length - end.length);
	}
	return name;
};
thx__$Path_Path_$Impl_$.ext = function(this1) {
	if(this1.slice(2).length == 0) {
		return "";
	}
	var array = this1.slice(2);
	return thx_Strings.afterLast(array[array.length - 1],".");
};
thx__$Path_Path_$Impl_$.dir = function(this1) {
	return thx__$Path_Path_$Impl_$.toString(thx__$Path_Path_$Impl_$.up(this1));
};
thx__$Path_Path_$Impl_$.map = function(this1,handler) {
	var root = this1[1];
	return [this1[0],root].concat(thx__$Path_Path_$Impl_$.resolve(this1.slice(2).map(handler),root != ""));
};
thx__$Path_Path_$Impl_$.hierarchy = function(this1) {
	var base = [];
	return thx_Arrays.reduce(this1.slice(2),function(acc,cur) {
		base.push(cur);
		var root = this1[1];
		acc.push([this1[0],root].concat(thx__$Path_Path_$Impl_$.resolve(base.slice(),root != "")));
		return acc;
	},[]);
};
thx__$Path_Path_$Impl_$.iterator = function(this1) {
	return HxOverrides.iter(thx__$Path_Path_$Impl_$.hierarchy(this1));
};
thx__$Path_Path_$Impl_$.pathTo = function(this1,destination) {
	var _g = destination[1] != "";
	switch(this1[1] != "") {
	case false:
		switch(_g) {
		case false:
			return thx__$Path_Path_$Impl_$.join(this1,destination);
		case true:
			return destination;
		}
		break;
	case true:
		switch(_g) {
		case false:
			return thx__$Path_Path_$Impl_$.join(this1,destination);
		case true:
			if(this1[1] == destination[1]) {
				var opath = destination.slice(2);
				var common = thx_Arrays.commonsFromStart(this1.slice(2),opath);
				return [this1[0],""].concat(thx__$Path_Path_$Impl_$.resolve(this1.slice(2).slice(0,this1.slice(2).length - common.length).map(function(_) {
					return "..";
				}).concat(opath.slice(common.length)),false));
			} else {
				return destination;
			}
			break;
		}
		break;
	}
};
thx__$Path_Path_$Impl_$.sibling = function(this1,path) {
	return thx__$Path_Path_$Impl_$.join(thx__$Path_Path_$Impl_$.up(this1),path);
};
thx__$Path_Path_$Impl_$.toNix = function(this1) {
	if(this1[0] == "/") {
		return this1;
	} else {
		return ["/",this1[1] != ""?"/":""].concat(this1.slice(2));
	}
};
thx__$Path_Path_$Impl_$.toWin32 = function(this1,root) {
	if(root == null) {
		root = "C:\\";
	}
	if(this1[0] == "\\") {
		return this1;
	} else {
		return ["\\",this1[1] != ""?root:""].concat(this1.slice(2));
	}
};
thx__$Path_Path_$Impl_$.up = function(this1,n) {
	if(n == null) {
		n = 1;
	}
	if(thx__$Path_Path_$Impl_$.isRoot(this1)) {
		return this1;
	} else {
		return [this1[0],this1[1]].concat(this1.slice(2,this1.length - n));
	}
};
thx__$Path_Path_$Impl_$.withExt = function(this1,newextension) {
	var oext = thx__$Path_Path_$Impl_$.ext(this1);
	if(oext.length > 0) {
		oext = "." + oext;
	}
	if(newextension.substring(0,1) == ".") {
		newextension = newextension.substring(1);
	}
	return thx__$Path_Path_$Impl_$.sibling(this1,thx__$Path_Path_$Impl_$.fromString("" + thx__$Path_Path_$Impl_$.base(this1,oext) + "." + newextension));
};
thx__$Path_Path_$Impl_$.join = function(this1,other) {
	if(other[1] != "") {
		return other;
	}
	var root = this1[1];
	return [this1[0],root].concat(thx__$Path_Path_$Impl_$.resolve(this1.slice(2).concat(other.slice(2)),root != ""));
};
thx__$Path_Path_$Impl_$.toString = function(this1) {
	if(this1[1] == "" && this1.slice(2).length == 0) {
		return ".";
	} else {
		return this1[1] + this1.slice(2).join(this1[0]);
	}
};
thx__$Path_Path_$Impl_$.get_path = function(this1) {
	return this1.slice(2);
};
thx__$Path_Path_$Impl_$.get_root = function(this1) {
	return this1[1];
};
thx__$Path_Path_$Impl_$.get_sep = function(this1) {
	return this1[0];
};
thx__$Path_Path_$Impl_$.get_self = function(this1) {
	return this1;
};
var thx__$QueryString_QueryString_$Impl_$ = {};
thx__$QueryString_QueryString_$Impl_$.__name__ = ["thx","_QueryString","QueryString_Impl_"];
thx__$QueryString_QueryString_$Impl_$.encodeURIComponent = function(s) {
	return StringTools.replace(encodeURIComponent(s),"%20","+");
};
thx__$QueryString_QueryString_$Impl_$.decodeURIComponent = function(s) {
	return StringTools.replace(decodeURIComponent(s.split("+").join(" ")),"+"," ");
};
thx__$QueryString_QueryString_$Impl_$.empty = function() {
	return new haxe_ds_StringMap();
};
thx__$QueryString_QueryString_$Impl_$.parseWithSymbols = function(s,separator,assignment,decodeURIComponent) {
	if(null == s) {
		return new haxe_ds_StringMap();
	} else {
		if(null == decodeURIComponent) {
			decodeURIComponent = thx__$QueryString_QueryString_$Impl_$.decodeURIComponent;
		}
		if(StringTools.startsWith(s,"?") || StringTools.startsWith(s,"#")) {
			s = s.substring(1);
		}
		s = StringTools.ltrim(s);
		return thx_Arrays.reduce(s.split(separator),function(qs,v) {
			var parts = v.split(assignment);
			if(parts[0] != "") {
				thx__$QueryString_QueryString_$Impl_$.add(qs,decodeURIComponent(parts[0]),null == parts[1]?null:decodeURIComponent(parts[1]));
			}
			return qs;
		},new haxe_ds_StringMap());
	}
};
thx__$QueryString_QueryString_$Impl_$.parse = function(s) {
	return thx__$QueryString_QueryString_$Impl_$.parseWithSymbols(s,thx__$QueryString_QueryString_$Impl_$.separator,thx__$QueryString_QueryString_$Impl_$.assignment,thx__$QueryString_QueryString_$Impl_$.decodeURIComponent);
};
thx__$QueryString_QueryString_$Impl_$.fromObject = function(o) {
	var qs = new haxe_ds_StringMap();
	if(!Reflect.isObject(o)) {
		throw new js__$Boot_HaxeError("unable to convert " + Std.string(o) + " to QueryString");
	}
	thx_Objects.tuples(o).map(function(t) {
		if((t._1 instanceof Array) && t._1.__enum__ == null) {
			thx__$QueryString_QueryString_$Impl_$.setMany(qs,t._0,t._1.map(function(_) {
				return "" + _;
			}));
		} else {
			thx__$QueryString_QueryString_$Impl_$.set(qs,t._0,"" + Std.string(t._1));
		}
	});
	return qs;
};
thx__$QueryString_QueryString_$Impl_$.toObject = function(this1) {
	return thx_Iterators.reduce(this1.keys(),function(o,key) {
		var v = __map_reserved[key] != null?this1.getReserved(key):this1.h[key];
		if(v.length == 0) {
			o[key] = null;
		} else if(v.length == 1) {
			o[key] = v[0];
		} else {
			o[key] = v;
		}
		return o;
	},{ });
};
thx__$QueryString_QueryString_$Impl_$.isEmpty = function(this1) {
	return !new haxe_ds__$StringMap_StringMapIterator(this1,this1.arrayKeys()).hasNext();
};
thx__$QueryString_QueryString_$Impl_$.isEmptyOrMono = function(this1) {
	var arr = thx_Iterators.toArray(this1.keys());
	if(arr.length == 0) {
		return true;
	}
	if(arr.length != 1) {
		return false;
	}
	var key = arr[0];
	return (__map_reserved[key] != null?this1.getReserved(key):this1.h[key]).length == 0;
};
thx__$QueryString_QueryString_$Impl_$.exist = function(this1,name) {
	if(__map_reserved[name] != null) {
		return this1.existsReserved(name);
	} else {
		return this1.h.hasOwnProperty(name);
	}
};
thx__$QueryString_QueryString_$Impl_$.remove = function(this1,name) {
	return this1.remove(name);
};
thx__$QueryString_QueryString_$Impl_$.removeValue = function(this1,name,value) {
	if(!(__map_reserved[name] != null?this1.existsReserved(name):this1.h.hasOwnProperty(name))) {
		return false;
	}
	return HxOverrides.remove(__map_reserved[name] != null?this1.getReserved(name):this1.h[name],value);
};
thx__$QueryString_QueryString_$Impl_$.get = function(this1,name) {
	return __map_reserved[name] != null?this1.getReserved(name):this1.h[name];
};
thx__$QueryString_QueryString_$Impl_$.set = function(this1,name,value) {
	var value1 = [value];
	if(__map_reserved[name] != null) {
		this1.setReserved(name,value1);
	} else {
		this1.h[name] = value1;
	}
	return this1;
};
thx__$QueryString_QueryString_$Impl_$.add = function(this1,name,value) {
	var arr = __map_reserved[name] != null?this1.getReserved(name):this1.h[name];
	if(null == arr) {
		if(value == null) {
			arr = [];
		} else {
			arr = [value];
		}
		if(__map_reserved[name] != null) {
			this1.setReserved(name,arr);
		} else {
			this1.h[name] = arr;
		}
	} else if(null != value) {
		arr.push(value);
	}
	return this1;
};
thx__$QueryString_QueryString_$Impl_$.clone = function(this1) {
	if(null == this1) {
		return null;
	}
	var map = new haxe_ds_StringMap();
	var tmp = this1.keys();
	while(tmp.hasNext()) {
		var key = tmp.next();
		var value = (__map_reserved[key] != null?this1.getReserved(key):this1.h[key]).slice();
		if(__map_reserved[key] != null) {
			map.setReserved(key,value);
		} else {
			map.h[key] = value;
		}
	}
	return map;
};
thx__$QueryString_QueryString_$Impl_$.setMany = function(this1,name,values) {
	if(__map_reserved[name] != null) {
		this1.setReserved(name,values);
	} else {
		this1.h[name] = values;
	}
	return this1;
};
thx__$QueryString_QueryString_$Impl_$.toStringWithSymbols = function(this1,separator,assignment,encodeURIComponent) {
	if(null == this1) {
		return null;
	}
	if(null == encodeURIComponent) {
		encodeURIComponent = thx__$QueryString_QueryString_$Impl_$.encodeURIComponent;
	}
	var array = thx_Iterators.map(this1.keys(),function(k) {
		var vs = __map_reserved[k] != null?this1.getReserved(k):this1.h[k];
		var ek = encodeURIComponent(k);
		if(vs.length == 0) {
			return [ek];
		} else {
			return vs.map(function(_) {
				return "" + ek + assignment + encodeURIComponent(_);
			});
		}
	});
	return Array.prototype.concat.apply([],array).join(separator);
};
thx__$QueryString_QueryString_$Impl_$.equals = function(this1,other) {
	var tuples = thx_Maps.tuples(other);
	var tmp = this1.keys();
	while(tmp.hasNext()) {
		var key = [tmp.next()];
		var t = thx_Arrays.find(tuples,(function(key1) {
			return function(item) {
				return item._0 == key1[0];
			};
		})(key));
		if(null == t) {
			return false;
		}
		if(!thx_Arrays.equals(__map_reserved[key[0]] != null?this1.getReserved(key[0]):this1.h[key[0]],t._1)) {
			return false;
		}
		HxOverrides.remove(tuples,t);
	}
	return tuples.length == 0;
};
thx__$QueryString_QueryString_$Impl_$.toString = function(this1) {
	return thx__$QueryString_QueryString_$Impl_$.toStringWithSymbols(this1,thx__$QueryString_QueryString_$Impl_$.separator,thx__$QueryString_QueryString_$Impl_$.assignment,thx__$QueryString_QueryString_$Impl_$.encodeURIComponent);
};
var thx__$QueryString_QueryStringValue_$Impl_$ = {};
thx__$QueryString_QueryStringValue_$Impl_$.__name__ = ["thx","_QueryString","QueryStringValue_Impl_"];
thx__$QueryString_QueryStringValue_$Impl_$.toString = function(this1) {
	if(this1 == null || this1.length == 0) {
		return null;
	} else {
		return this1.join(",");
	}
};
var thx__$Rational_Rational_$Impl_$ = {};
thx__$Rational_Rational_$Impl_$.__name__ = ["thx","_Rational","Rational_Impl_"];
thx__$Rational_Rational_$Impl_$.fromString = function(s) {
	var parts = s.split("/").map(StringTools.trim);
	if(parts.length > 2) {
		throw new thx_Error("string \"" + s + "\" cannot be parsed to a Rational",null,{ fileName : "Rational.hx", lineNumber : 12, className : "thx._Rational.Rational_Impl_", methodName : "fromString"});
	}
	if(parts.length == 1) {
		return thx__$Rational_Rational_$Impl_$.create(thx_bigint_Bigs.parseBase(parts[0],10),thx__$BigInt_BigInt_$Impl_$.one);
	}
	return thx__$Rational_Rational_$Impl_$.create(thx_bigint_Bigs.parseBase(parts[0],10),thx_bigint_Bigs.parseBase(parts[1],10));
};
thx__$Rational_Rational_$Impl_$.fromBigInt = function(i) {
	return thx__$Rational_Rational_$Impl_$.create(i,thx__$BigInt_BigInt_$Impl_$.one);
};
thx__$Rational_Rational_$Impl_$.fromInt = function(i) {
	return thx__$Rational_Rational_$Impl_$.create(thx_bigint_Bigs.fromInt(i),thx__$BigInt_BigInt_$Impl_$.one);
};
thx__$Rational_Rational_$Impl_$.create = function(num,den) {
	if(thx__$BigInt_BigInt_$Impl_$.equals(den,thx_bigint_Bigs.fromInt(0))) {
		throw new thx_Error("division by zero",null,{ fileName : "Rational.hx", lineNumber : 26, className : "thx._Rational.Rational_Impl_", methodName : "create"});
	}
	var g = thx_Ints.gcd(num.toInt(),den.toInt());
	num = thx_bigint_Bigs.fromInt(num.divide(thx_bigint_Bigs.fromInt(g)).toInt() | 0);
	den = thx_bigint_Bigs.fromInt(den.divide(thx_bigint_Bigs.fromInt(g)).toInt() | 0);
	if(thx__$BigInt_BigInt_$Impl_$.less(den,thx_bigint_Bigs.fromInt(0))) {
		num = num.negate();
		den = den.negate();
	}
	if(thx__$BigInt_BigInt_$Impl_$.equals(num,thx_bigint_Bigs.fromInt(0))) {
		den = thx_bigint_Bigs.fromInt(1);
	}
	var num1 = num.toInt();
	var den1 = den.toInt();
	return { num : thx_bigint_Bigs.fromInt(num1), den : thx_bigint_Bigs.fromInt(den1)};
};
thx__$Rational_Rational_$Impl_$._new = function(num,den) {
	return { num : thx_bigint_Bigs.fromInt(num), den : thx_bigint_Bigs.fromInt(den)};
};
thx__$Rational_Rational_$Impl_$.abs = function(this1) {
	var num = this1.num.abs().toInt();
	var den = this1.den.toInt();
	return { num : thx_bigint_Bigs.fromInt(num), den : thx_bigint_Bigs.fromInt(den)};
};
thx__$Rational_Rational_$Impl_$.negate = function(this1) {
	var num = this1.num.negate().toInt();
	var den = this1.den.toInt();
	return { num : thx_bigint_Bigs.fromInt(num), den : thx_bigint_Bigs.fromInt(den)};
};
thx__$Rational_Rational_$Impl_$.add = function(this1,that) {
	if(thx__$Rational_Rational_$Impl_$.compareTo(this1,thx__$Rational_Rational_$Impl_$.zero) == 0) {
		return that;
	}
	if(thx__$Rational_Rational_$Impl_$.compareTo(that,thx__$Rational_Rational_$Impl_$.zero) == 0) {
		return this1;
	}
	var f = thx_Ints.gcd(this1.num.toInt(),that.num.toInt());
	var g = thx_Ints.gcd(this1.den.toInt(),that.den.toInt());
	var s = thx__$Rational_Rational_$Impl_$.create(thx_bigint_Bigs.fromInt((this1.num.divide(thx_bigint_Bigs.fromInt(f)).toInt() | 0) * (that.den.divide(thx_bigint_Bigs.fromInt(g)).toInt() | 0) + (that.num.divide(thx_bigint_Bigs.fromInt(f)).toInt() | 0) * (this1.den.divide(thx_bigint_Bigs.fromInt(g)).toInt() | 0)),thx_bigint_Bigs.fromInt(thx_Ints.lcm(this1.den.toInt(),that.den.toInt())));
	s.num = s.num.multiply(thx_bigint_Bigs.fromInt(f));
	return s;
};
thx__$Rational_Rational_$Impl_$.subtract = function(this1,that) {
	return thx__$Rational_Rational_$Impl_$.add(this1,thx__$Rational_Rational_$Impl_$.negate(that));
};
thx__$Rational_Rational_$Impl_$.multiply = function(this1,that) {
	var c = thx__$Rational_Rational_$Impl_$.create(this1.num,that.den);
	var d = thx__$Rational_Rational_$Impl_$.create(that.num,this1.den);
	return thx__$Rational_Rational_$Impl_$.create(c.num.multiply(d.num),c.den.multiply(d.den));
};
thx__$Rational_Rational_$Impl_$.divide = function(this1,that) {
	return thx__$Rational_Rational_$Impl_$.multiply(this1,thx__$Rational_Rational_$Impl_$.reciprocal(that));
};
thx__$Rational_Rational_$Impl_$.reciprocal = function(this1) {
	return thx__$Rational_Rational_$Impl_$.create(this1.den,this1.num);
};
thx__$Rational_Rational_$Impl_$.isZero = function(this1) {
	return this1.num.isZero();
};
thx__$Rational_Rational_$Impl_$.isNegative = function(this1) {
	return this1.num.sign;
};
thx__$Rational_Rational_$Impl_$.compareTo = function(this1,that) {
	return this1.num.multiply(that.den).compareTo(this1.den.multiply(that.num));
};
thx__$Rational_Rational_$Impl_$.greaterThan = function(this1,that) {
	return thx__$Rational_Rational_$Impl_$.compareTo(this1,that) > 0;
};
thx__$Rational_Rational_$Impl_$.greater = function(self,that) {
	return thx__$Rational_Rational_$Impl_$.compareTo(self,that) > 0;
};
thx__$Rational_Rational_$Impl_$.greaterEqualsTo = function(this1,that) {
	return thx__$Rational_Rational_$Impl_$.compareTo(this1,that) >= 0;
};
thx__$Rational_Rational_$Impl_$.greaterEquals = function(self,that) {
	return thx__$Rational_Rational_$Impl_$.compareTo(self,that) >= 0;
};
thx__$Rational_Rational_$Impl_$.lessThan = function(this1,that) {
	return thx__$Rational_Rational_$Impl_$.compareTo(this1,that) < 0;
};
thx__$Rational_Rational_$Impl_$.less = function(self,that) {
	return thx__$Rational_Rational_$Impl_$.compareTo(self,that) < 0;
};
thx__$Rational_Rational_$Impl_$.lessEqualsTo = function(this1,that) {
	return thx__$Rational_Rational_$Impl_$.compareTo(this1,that) <= 0;
};
thx__$Rational_Rational_$Impl_$.lessEquals = function(self,that) {
	return thx__$Rational_Rational_$Impl_$.compareTo(self,that) <= 0;
};
thx__$Rational_Rational_$Impl_$.equalsTo = function(this1,that) {
	return thx__$Rational_Rational_$Impl_$.compareTo(this1,that) == 0;
};
thx__$Rational_Rational_$Impl_$.equals = function(self,that) {
	return thx__$Rational_Rational_$Impl_$.compareTo(self,that) == 0;
};
thx__$Rational_Rational_$Impl_$.notEqualsTo = function(this1,that) {
	return thx__$Rational_Rational_$Impl_$.compareTo(this1,that) != 0;
};
thx__$Rational_Rational_$Impl_$.notEquals = function(self,that) {
	return thx__$Rational_Rational_$Impl_$.compareTo(self,that) != 0;
};
thx__$Rational_Rational_$Impl_$.toFloat = function(this1) {
	return this1.num.toFloat() / this1.den.toFloat();
};
thx__$Rational_Rational_$Impl_$.toDecimal = function(this1,extraScale) {
	if(extraScale == null) {
		extraScale = 0;
	}
	return thx__$Decimal_Decimal_$Impl_$.fromBigInt(this1.num).divide(thx__$Decimal_Decimal_$Impl_$.fromBigInt(this1.den));
};
thx__$Rational_Rational_$Impl_$.toString = function(this1) {
	if(thx__$BigInt_BigInt_$Impl_$.equals(this1.den,thx_bigint_Bigs.fromInt(1))) {
		return "" + this1.num.toString();
	} else {
		return "" + this1.num.toString() + "/" + this1.den.toString();
	}
};
thx__$Rational_Rational_$Impl_$.get_num = function(this1) {
	return this1.num;
};
thx__$Rational_Rational_$Impl_$.get_den = function(this1) {
	return this1.den;
};
var thx__$ReadonlyArray_ReadonlyArray_$Impl_$ = {};
thx__$ReadonlyArray_ReadonlyArray_$Impl_$.__name__ = ["thx","_ReadonlyArray","ReadonlyArray_Impl_"];
thx__$ReadonlyArray_ReadonlyArray_$Impl_$.empty = function() {
	return [];
};
thx__$ReadonlyArray_ReadonlyArray_$Impl_$.flatten = function(array) {
	return Array.prototype.concat.apply([],array);
};
thx__$ReadonlyArray_ReadonlyArray_$Impl_$.indexOf = function(this1,el,eq) {
	if(null == eq) {
		eq = thx_Functions.equality;
	}
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(eq(el,this1[i])) {
			return i;
		}
	}
	return -1;
};
thx__$ReadonlyArray_ReadonlyArray_$Impl_$.lastIndexOf = function(this1,el,eq) {
	if(null == eq) {
		eq = thx_Functions.equality;
	}
	var len = this1.length;
	var _g1 = 0;
	while(_g1 < len) {
		var i = _g1++;
		if(eq(el,this1[len - i - 1])) {
			return i;
		}
	}
	return -1;
};
thx__$ReadonlyArray_ReadonlyArray_$Impl_$.get = function(this1,index) {
	return this1[index];
};
thx__$ReadonlyArray_ReadonlyArray_$Impl_$.head = function(this1) {
	return this1[0];
};
thx__$ReadonlyArray_ReadonlyArray_$Impl_$.tail = function(this1) {
	return this1.slice(1);
};
thx__$ReadonlyArray_ReadonlyArray_$Impl_$.reduce = function(this1,arr,f,initial) {
	var _g = 0;
	while(_g < arr.length) {
		var v = arr[_g];
		++_g;
		initial = f(initial,v);
	}
	return initial;
};
thx__$ReadonlyArray_ReadonlyArray_$Impl_$.reducei = function(array,f,initial) {
	var _g1 = 0;
	var _g = array.length;
	while(_g1 < _g) {
		var i = _g1++;
		initial = f(initial,array[i],i);
	}
	return initial;
};
thx__$ReadonlyArray_ReadonlyArray_$Impl_$.reverse = function(this1) {
	var arr = this1.slice();
	arr.reverse();
	return arr;
};
thx__$ReadonlyArray_ReadonlyArray_$Impl_$.toArray = function(this1) {
	return this1.slice();
};
thx__$ReadonlyArray_ReadonlyArray_$Impl_$.unsafe = function(this1) {
	return this1;
};
thx__$ReadonlyArray_ReadonlyArray_$Impl_$.concat = function(this1,that) {
	return this1.concat(that);
};
thx__$ReadonlyArray_ReadonlyArray_$Impl_$.insertAt = function(this1,pos,el) {
	return this1.slice(0,pos).concat([el]).concat(this1.slice(pos));
};
thx__$ReadonlyArray_ReadonlyArray_$Impl_$.insertAfter = function(this1,ref,el,eq) {
	var pos = thx__$ReadonlyArray_ReadonlyArray_$Impl_$.indexOf(this1,ref,eq);
	if(pos < 0) {
		pos = this1.length - 1;
	}
	var pos1 = pos + 1;
	return this1.slice(0,pos1).concat([el]).concat(this1.slice(pos1));
};
thx__$ReadonlyArray_ReadonlyArray_$Impl_$.insertBefore = function(this1,ref,el,eq) {
	var pos = thx__$ReadonlyArray_ReadonlyArray_$Impl_$.indexOf(this1,ref,eq);
	return this1.slice(0,pos).concat([el]).concat(this1.slice(pos));
};
thx__$ReadonlyArray_ReadonlyArray_$Impl_$.replace = function(this1,ref,el,eq) {
	var pos = thx__$ReadonlyArray_ReadonlyArray_$Impl_$.indexOf(this1,ref,eq);
	if(pos < 0) {
		throw new thx_Error("unable to find reference element",null,{ fileName : "ReadonlyArray.hx", lineNumber : 91, className : "thx._ReadonlyArray.ReadonlyArray_Impl_", methodName : "replace"});
	}
	return this1.slice(0,pos).concat([el]).concat(this1.slice(pos + 1));
};
thx__$ReadonlyArray_ReadonlyArray_$Impl_$.replaceAt = function(this1,pos,el) {
	return this1.slice(0,pos).concat([el]).concat(this1.slice(pos + 1));
};
thx__$ReadonlyArray_ReadonlyArray_$Impl_$.remove = function(this1,el,eq) {
	var pos = thx__$ReadonlyArray_ReadonlyArray_$Impl_$.indexOf(this1,el,eq);
	return this1.slice(0,pos).concat(this1.slice(pos + 1));
};
thx__$ReadonlyArray_ReadonlyArray_$Impl_$.removeAt = function(this1,pos) {
	return this1.slice(0,pos).concat(this1.slice(pos + 1));
};
thx__$ReadonlyArray_ReadonlyArray_$Impl_$.prepend = function(this1,el) {
	return [el].concat(this1);
};
thx__$ReadonlyArray_ReadonlyArray_$Impl_$.append = function(this1,el) {
	return this1.concat([el]);
};
thx__$ReadonlyArray_ReadonlyArray_$Impl_$.unshift = function(this1,el) {
	return [el].concat(this1);
};
thx__$ReadonlyArray_ReadonlyArray_$Impl_$.shift = function(this1) {
	if(this1.length == 0) {
		return { _0 : null, _1 : this1};
	}
	return { _0 : this1[0], _1 : this1.slice(0,0).concat(this1.slice(1))};
};
thx__$ReadonlyArray_ReadonlyArray_$Impl_$.push = function(this1,el) {
	return this1.concat([el]);
};
thx__$ReadonlyArray_ReadonlyArray_$Impl_$.pop = function(this1) {
	if(this1.length == 0) {
		return { _0 : null, _1 : this1};
	}
	var value = this1[this1.length - 1];
	var pos = this1.length - 1;
	var array = this1.slice(0,pos).concat(this1.slice(pos + 1));
	return { _0 : value, _1 : array};
};
var thx__$Result_Result_$Impl_$ = {};
thx__$Result_Result_$Impl_$.__name__ = ["thx","_Result","Result_Impl_"];
thx__$Result_Result_$Impl_$.success = function(value) {
	return thx_Either.Right(value);
};
thx__$Result_Result_$Impl_$.failure = function(error) {
	return thx_Either.Left(error);
};
thx__$Result_Result_$Impl_$.optionValue = function(this1) {
	if(this1[1] == 1) {
		return haxe_ds_Option.Some(this1[2]);
	} else {
		return haxe_ds_Option.None;
	}
};
thx__$Result_Result_$Impl_$.optionError = function(this1) {
	if(this1[1] == 0) {
		return haxe_ds_Option.Some(this1[2]);
	} else {
		return haxe_ds_Option.None;
	}
};
thx__$Result_Result_$Impl_$.value = function(this1) {
	if(this1[1] == 1) {
		return this1[2];
	} else {
		return null;
	}
};
thx__$Result_Result_$Impl_$.error = function(this1) {
	if(this1[1] == 0) {
		return this1[2];
	} else {
		return null;
	}
};
thx__$Result_Result_$Impl_$.get_isSuccess = function(this1) {
	if(this1[1] == 1) {
		return true;
	} else {
		return false;
	}
};
thx__$Result_Result_$Impl_$.get_isFailure = function(this1) {
	if(this1[1] == 0) {
		return true;
	} else {
		return false;
	}
};
var thx__$Semigroup_Semigroup_$Impl_$ = {};
thx__$Semigroup_Semigroup_$Impl_$.__name__ = ["thx","_Semigroup","Semigroup_Impl_"];
thx__$Semigroup_Semigroup_$Impl_$.get_append = function(this1) {
	return this1;
};
var thx__$Set_Set_$Impl_$ = {};
thx__$Set_Set_$Impl_$.__name__ = ["thx","_Set","Set_Impl_"];
thx__$Set_Set_$Impl_$.createString = function(it) {
	var map = new haxe_ds_StringMap();
	var set = map;
	if(null != it) {
		thx__$Set_Set_$Impl_$.pushMany(set,it);
	}
	return set;
};
thx__$Set_Set_$Impl_$.createInt = function(it) {
	var map = new haxe_ds_IntMap();
	var set = map;
	if(null != it) {
		thx__$Set_Set_$Impl_$.pushMany(set,it);
	}
	return set;
};
thx__$Set_Set_$Impl_$.createObject = function(it) {
	var map = new haxe_ds_ObjectMap();
	var set = map;
	if(null != it) {
		thx__$Set_Set_$Impl_$.pushMany(set,it);
	}
	return set;
};
thx__$Set_Set_$Impl_$.createEnum = function(arr) {
	var map = new haxe_ds_EnumValueMap();
	var set = map;
	if(null != arr) {
		thx__$Set_Set_$Impl_$.pushMany(set,arr);
	}
	return set;
};
thx__$Set_Set_$Impl_$._new = function(map) {
	return map;
};
thx__$Set_Set_$Impl_$.add = function(this1,v) {
	if(this1.exists(v)) {
		return false;
	} else {
		this1.set(v,true);
		return true;
	}
};
thx__$Set_Set_$Impl_$.copy = function(this1) {
	var inst = thx__$Set_Set_$Impl_$.empty(this1);
	var tmp = this1.keys();
	while(tmp.hasNext()) inst.set(tmp.next(),true);
	return inst;
};
thx__$Set_Set_$Impl_$.empty = function(this1) {
	return Type.createInstance(this1 == null?null:js_Boot.getClass(this1),[]);
};
thx__$Set_Set_$Impl_$.difference = function(this1,set) {
	var result = thx__$Set_Set_$Impl_$.copy(this1);
	var tmp = $iterator(thx__$Set_Set_$Impl_$)(set);
	while(tmp.hasNext()) result.remove(tmp.next());
	return result;
};
thx__$Set_Set_$Impl_$.filter = function(this1,predicate) {
	var tmp = thx__$Set_Set_$Impl_$.empty(this1);
	return thx__$Set_Set_$Impl_$.reduce(this1,function(acc,v) {
		if(predicate(v)) {
			thx__$Set_Set_$Impl_$.add(acc,v);
		}
		return acc;
	},tmp);
};
thx__$Set_Set_$Impl_$.map = function(this1,f) {
	return thx__$Set_Set_$Impl_$.reduce(this1,function(acc,v) {
		acc.push(f(v));
		return acc;
	},[]);
};
thx__$Set_Set_$Impl_$.exists = function(this1,v) {
	return this1.exists(v);
};
thx__$Set_Set_$Impl_$.remove = function(this1,v) {
	return this1.remove(v);
};
thx__$Set_Set_$Impl_$.intersection = function(this1,set) {
	var result = thx__$Set_Set_$Impl_$.empty(this1);
	var tmp = $iterator(thx__$Set_Set_$Impl_$)(this1);
	while(tmp.hasNext()) {
		var item = tmp.next();
		if(set.exists(item)) {
			result.set(item,true);
		}
	}
	return result;
};
thx__$Set_Set_$Impl_$.push = function(this1,v) {
	this1.set(v,true);
};
thx__$Set_Set_$Impl_$.pushMany = function(this1,values) {
	var tmp = $iterator(values)();
	while(tmp.hasNext()) this1.set(tmp.next(),true);
};
thx__$Set_Set_$Impl_$.reduce = function(this1,handler,acc) {
	var tmp = $iterator(thx__$Set_Set_$Impl_$)(this1);
	while(tmp.hasNext()) acc = handler(acc,tmp.next());
	return acc;
};
thx__$Set_Set_$Impl_$.iterator = function(this1) {
	return this1.keys();
};
thx__$Set_Set_$Impl_$.union = function(this1,set) {
	var newset = thx__$Set_Set_$Impl_$.copy(this1);
	thx__$Set_Set_$Impl_$.pushMany(newset,thx__$Set_Set_$Impl_$.toArray(set));
	return newset;
};
thx__$Set_Set_$Impl_$.toArray = function(this1) {
	var arr = [];
	var tmp = this1.keys();
	while(tmp.hasNext()) arr.push(tmp.next());
	return arr;
};
thx__$Set_Set_$Impl_$.toString = function(this1) {
	return "{" + thx__$Set_Set_$Impl_$.toArray(this1).join(", ") + "}";
};
thx__$Set_Set_$Impl_$.get_length = function(this1) {
	var l = 0;
	var tmp = this1.iterator();
	while(tmp.hasNext()) {
		tmp.next();
		++l;
	}
	return l;
};
var thx_StaticResource = function() { };
thx_StaticResource.__name__ = ["thx","StaticResource"];
var thx_Strings = function() { };
thx_Strings.__name__ = ["thx","Strings"];
thx_Strings.after = function(value,searchFor) {
	var pos = value.indexOf(searchFor);
	if(pos < 0) {
		return "";
	} else {
		return value.substring(pos + searchFor.length);
	}
};
thx_Strings.afterLast = function(value,searchFor) {
	var pos = value.lastIndexOf(searchFor);
	if(pos < 0) {
		return "";
	} else {
		return value.substring(pos + searchFor.length);
	}
};
thx_Strings.capitalize = function(s) {
	return HxOverrides.substr(s,0,1).toUpperCase() + HxOverrides.substr(s,1,s.length - 1);
};
thx_Strings.capitalizeWords = function(value,whiteSpaceOnly) {
	if(whiteSpaceOnly == null) {
		whiteSpaceOnly = false;
	}
	if(whiteSpaceOnly) {
		return thx_Strings.UCWORDSWS.map(HxOverrides.substr(value,0,1).toUpperCase() + HxOverrides.substr(value,1,value.length - 1),thx_Strings.upperMatch);
	} else {
		return thx_Strings.UCWORDS.map(HxOverrides.substr(value,0,1).toUpperCase() + HxOverrides.substr(value,1,value.length - 1),thx_Strings.upperMatch);
	}
};
thx_Strings.canonicalizeNewlines = function(value) {
	return value.replace(thx_Strings.CANONICALIZE_LINES.r,"\n");
};
thx_Strings.caseInsensitiveCompare = function(a,b) {
	if(null == a && null == b) {
		return 0;
	}
	if(null == a) {
		return -1;
	} else if(null == b) {
		return 1;
	}
	return haxe_Utf8.compare(a.toLowerCase(),b.toLowerCase());
};
thx_Strings.caseInsensitiveEndsWith = function(s,end) {
	return StringTools.endsWith(s.toLowerCase(),end.toLowerCase());
};
thx_Strings.caseInsensitiveEndsWithAny = function(s,values) {
	return thx_Strings.endsWithAny(s.toLowerCase(),values.map(function(v) {
		return v.toLowerCase();
	}));
};
thx_Strings.caseInsensitiveStartsWith = function(s,start) {
	return StringTools.startsWith(s.toLowerCase(),start.toLowerCase());
};
thx_Strings.caseInsensitiveStartsWithAny = function(s,values) {
	return thx_Strings.startsWithAny(s.toLowerCase(),values.map(function(v) {
		return v.toLowerCase();
	}));
};
thx_Strings.collapse = function(value) {
	return StringTools.trim(value).replace(thx_Strings.WSG.r," ");
};
thx_Strings.compare = function(a,b) {
	return haxe_Utf8.compare(a,b);
};
thx_Strings.caseInsensitiveContains = function(s,test) {
	return s.toLowerCase().indexOf(test.toLowerCase()) >= 0;
};
thx_Strings.contains = function(s,test) {
	return s.indexOf(test) >= 0;
};
thx_Strings.count = function(s,test) {
	return s.split(test).length - 1;
};
thx_Strings.caseInsensitiveContainsAny = function(s,tests) {
	var s1 = s;
	return thx_Arrays.any(tests,function(a1) {
		return thx_Strings.caseInsensitiveContains(s1,a1);
	});
};
thx_Strings.containsAny = function(s,tests) {
	var s1 = s;
	return thx_Arrays.any(tests,function(a1) {
		return thx_Strings.contains(s1,a1);
	});
};
thx_Strings.dasherize = function(s) {
	return StringTools.replace(s,"_","-");
};
thx_Strings.diffAt = function(a,b) {
	var a1 = a.length;
	var b1 = b.length;
	var min = a1 < b1?a1:b1;
	var _g1 = 0;
	var _g = min;
	while(_g1 < _g) {
		var i = _g1++;
		if(a.substring(i,i + 1) != b.substring(i,i + 1)) {
			return i;
		}
	}
	return min;
};
thx_Strings.ellipsis = function(s,maxlen,symbol) {
	if(symbol == null) {
		symbol = "…";
	}
	if(maxlen == null) {
		maxlen = 20;
	}
	var sl = s.length;
	var symboll = symbol.length;
	if(sl > maxlen) {
		if(maxlen < symboll) {
			return HxOverrides.substr(symbol,symboll - maxlen,maxlen);
		} else {
			return HxOverrides.substr(s,0,maxlen - symboll) + symbol;
		}
	} else {
		return s;
	}
};
thx_Strings.ellipsisMiddle = function(s,maxlen,symbol) {
	if(symbol == null) {
		symbol = "…";
	}
	if(maxlen == null) {
		maxlen = 20;
	}
	var sl = s.length;
	var symboll = symbol.length;
	if(sl > maxlen) {
		if(maxlen <= symboll) {
			return thx_Strings.ellipsis(s,maxlen,symbol);
		}
		var hll = Math.ceil((maxlen - symboll) / 2);
		var hlr = Math.floor((maxlen - symboll) / 2);
		return HxOverrides.substr(s,0,hll) + symbol + HxOverrides.substr(s,sl - hlr,hlr);
	} else {
		return s;
	}
};
thx_Strings.endsWithAny = function(s,values) {
	return thx_Iterables.any(values,function(end) {
		return StringTools.endsWith(s,end);
	});
};
thx_Strings.filter = function(s,predicate) {
	return s.split("").filter(predicate).join("");
};
thx_Strings.filterCharcode = function(s,predicate) {
	return thx_Strings.map(s,function(s1) {
		return HxOverrides.cca(s1,0);
	}).filter(predicate).map(function(i) {
		return String.fromCharCode(i);
	}).join("");
};
thx_Strings.from = function(value,searchFor) {
	var pos = value.indexOf(searchFor);
	if(pos < 0) {
		return "";
	} else {
		return value.substring(pos);
	}
};
thx_Strings.hashCode = function(value) {
	var code = 0;
	var _g1 = 0;
	var _g = value.length;
	while(_g1 < _g) {
		var c = HxOverrides.cca(value,_g1++);
		code = (haxe__$Int32_Int32_$Impl_$.mul(thx_Strings.HASCODE_MUL,code) + c | 0) % thx_Strings.HASCODE_MAX;
	}
	return code;
};
thx_Strings.hasContent = function(value) {
	if(value != null) {
		return value.length > 0;
	} else {
		return false;
	}
};
thx_Strings.humanize = function(s) {
	return StringTools.replace(thx_Strings.underscore(s),"_"," ");
};
thx_Strings.isAlpha = function(s) {
	if(s.length > 0) {
		return !thx_Strings.IS_ALPHA.match(s);
	} else {
		return false;
	}
};
thx_Strings.isAlphaNum = function(value) {
	return thx_Strings.ALPHANUM.match(value);
};
thx_Strings.isBreakingWhitespace = function(value) {
	return !thx_Strings.IS_BREAKINGWHITESPACE.match(value);
};
thx_Strings.isLowerCase = function(value) {
	return value.toLowerCase() == value;
};
thx_Strings.isUpperCase = function(value) {
	return value.toUpperCase() == value;
};
thx_Strings.ifEmpty = function(value,alt) {
	if(null != value && "" != value) {
		return value;
	} else {
		return alt;
	}
};
thx_Strings.isDigitsOnly = function(value) {
	return thx_Strings.DIGITS.match(value);
};
thx_Strings.isEmpty = function(value) {
	if(value != null) {
		return value == "";
	} else {
		return true;
	}
};
thx_Strings.lowerCaseFirst = function(value) {
	return value.substring(0,1).toLowerCase() + value.substring(1);
};
thx_Strings.random = function(value,length) {
	if(length == null) {
		length = 1;
	}
	return HxOverrides.substr(value,Math.floor((value.length - length + 1) * Math.random()),length);
};
thx_Strings.randomSequence = function(seed,length) {
	return thx_Ints.range(0,length).map(function(_) {
		return thx_Strings.random(seed);
	}).join("");
};
thx_Strings.randomSequence64 = function(length) {
	return thx_Strings.randomSequence(haxe_crypto_Base64.CHARS,length);
};
thx_Strings.iterator = function(s) {
	return HxOverrides.iter(s.split(""));
};
thx_Strings.map = function(value,callback) {
	return value.split("").map(callback);
};
thx_Strings.remove = function(value,toremove) {
	return StringTools.replace(value,toremove,"");
};
thx_Strings.removeAfter = function(value,toremove) {
	if(StringTools.endsWith(value,toremove)) {
		return value.substring(0,value.length - toremove.length);
	} else {
		return value;
	}
};
thx_Strings.removeAt = function(value,index,length) {
	return value.substring(0,index) + value.substring(index + length);
};
thx_Strings.removeBefore = function(value,toremove) {
	if(StringTools.startsWith(value,toremove)) {
		return value.substring(toremove.length);
	} else {
		return value;
	}
};
thx_Strings.removeOne = function(value,toremove) {
	var pos = value.indexOf(toremove);
	if(pos < 0) {
		return value;
	}
	return value.substring(0,pos) + value.substring(pos + toremove.length);
};
thx_Strings.repeat = function(s,times) {
	var _g = [];
	var _g2 = 0;
	while(_g2 < times) {
		++_g2;
		_g.push(s);
	}
	return _g.join("");
};
thx_Strings.reverse = function(s) {
	var arr = s.split("");
	arr.reverse();
	return arr.join("");
};
thx_Strings.quote = function(s) {
	if(s.indexOf("\"") < 0) {
		return "\"" + s + "\"";
	} else if(s.indexOf("'") < 0) {
		return "'" + s + "'";
	} else {
		return "\"" + StringTools.replace(s,"\"","\\\"") + "\"";
	}
};
thx_Strings.splitOnce = function(s,separator) {
	var pos = s.indexOf(separator);
	if(pos < 0) {
		return [s];
	}
	return [s.substring(0,pos),s.substring(pos + separator.length)];
};
thx_Strings.startsWithAny = function(s,values) {
	return thx_Iterables.any(values,function(start) {
		return StringTools.startsWith(s,start);
	});
};
thx_Strings.stripTags = function(s) {
	return s.replace(thx_Strings.STRIPTAGS.r,"");
};
thx_Strings.surround = function(s,left,right) {
	return "" + left + s + (null == right?left:right);
};
thx_Strings.toArray = function(s) {
	return s.split("");
};
thx_Strings.toCharcodes = function(s) {
	return thx_Strings.map(s,function(s1) {
		return HxOverrides.cca(s1,0);
	});
};
thx_Strings.toChunks = function(s,len) {
	var chunks = [];
	while(s.length > 0) {
		chunks.push(HxOverrides.substr(s,0,len));
		s = HxOverrides.substr(s,len,s.length - len);
	}
	return chunks;
};
thx_Strings.toLines = function(s) {
	return thx_Strings.SPLIT_LINES.split(s);
};
thx_Strings.trimChars = function(value,charlist) {
	return thx_Strings.trimCharsRight(thx_Strings.trimCharsLeft(value,charlist),charlist);
};
thx_Strings.trimCharsLeft = function(value,charlist) {
	var pos = 0;
	var _g1 = 0;
	var _g = value.length;
	while(_g1 < _g) if(charlist.indexOf(value.charAt(_g1++)) >= 0) {
		++pos;
	} else {
		break;
	}
	return value.substring(pos);
};
thx_Strings.trimCharsRight = function(value,charlist) {
	var len = value.length;
	var pos = len;
	var i;
	var _g1 = 0;
	while(_g1 < len) {
		i = len - _g1++ - 1;
		if(charlist.indexOf(value.charAt(i)) >= 0) {
			pos = i;
		} else {
			break;
		}
	}
	return value.substring(0,pos);
};
thx_Strings.underscore = function(s) {
	s = s.replace(new EReg("::","g").r,"/");
	s = s.replace(new EReg("([A-Z]+)([A-Z][a-z])","g").r,"$1_$2");
	s = s.replace(new EReg("([a-z\\d])([A-Z])","g").r,"$1_$2");
	s = s.replace(new EReg("-","g").r,"_");
	return s.toLowerCase();
};
thx_Strings.upperCaseFirst = function(value) {
	return value.substring(0,1).toUpperCase() + value.substring(1);
};
thx_Strings.upTo = function(value,searchFor) {
	var pos = value.indexOf(searchFor);
	if(pos < 0) {
		return value;
	} else {
		return value.substring(0,pos);
	}
};
thx_Strings.wrapColumns = function(s,columns,indent,newline) {
	if(newline == null) {
		newline = "\n";
	}
	if(indent == null) {
		indent = "";
	}
	if(columns == null) {
		columns = 78;
	}
	return thx_Strings.SPLIT_LINES.split(s).map(function(part) {
		return thx_Strings.wrapLine(StringTools.trim(part.replace(thx_Strings.WSG.r," ")),columns,indent,newline);
	}).join(newline);
};
thx_Strings.upperMatch = function(re) {
	return re.matched(0).toUpperCase();
};
thx_Strings.wrapLine = function(s,columns,indent,newline) {
	var parts = [];
	var pos = 0;
	var len = s.length;
	var ilen = indent.length;
	columns -= ilen;
	while(true) {
		if(pos + columns >= len - ilen) {
			parts.push(s.substring(pos));
			break;
		}
		var i = 0;
		while(!StringTools.isSpace(s,pos + columns - i) && i < columns) ++i;
		if(i == columns) {
			i = 0;
			while(!StringTools.isSpace(s,pos + columns + i) && pos + columns + i < len) ++i;
			parts.push(s.substring(pos,pos + columns + i));
			pos += columns + i + 1;
		} else {
			parts.push(s.substring(pos,pos + columns - i));
			pos += columns - i + 1;
		}
	}
	return indent + parts.join(newline + indent);
};
thx_Strings.lpad = function(s,$char,length) {
	var diff = length - s.length;
	if(diff > 0) {
		return thx_Strings.repeat($char,diff) + s;
	} else {
		return s;
	}
};
thx_Strings.rpad = function(s,$char,length) {
	var diff = length - s.length;
	if(diff > 0) {
		return s + thx_Strings.repeat($char,diff);
	} else {
		return s;
	}
};
var thx_TestAnonymousMap = function() {
};
thx_TestAnonymousMap.__name__ = ["thx","TestAnonymousMap"];
thx_TestAnonymousMap.prototype = {
	testFeatures: function() {
		var map = new thx_AnonymousMap({ name : "thx", type : "library"});
		utest_Assert.equals("thx",map.get("name"),null,{ fileName : "TestAnonymousMap.hx", lineNumber : 19, className : "thx.TestAnonymousMap", methodName : "testFeatures"});
		utest_Assert.isTrue(map.exists("type"),null,{ fileName : "TestAnonymousMap.hx", lineNumber : 20, className : "thx.TestAnonymousMap", methodName : "testFeatures"});
		map.remove("type");
		utest_Assert.isFalse(map.exists("type"),null,{ fileName : "TestAnonymousMap.hx", lineNumber : 22, className : "thx.TestAnonymousMap", methodName : "testFeatures"});
		utest_Assert.same(["name"],thx_Iterators.toArray(map.keys()),null,null,null,{ fileName : "TestAnonymousMap.hx", lineNumber : 23, className : "thx.TestAnonymousMap", methodName : "testFeatures"});
		utest_Assert.same(["thx"],thx_Iterators.toArray(map.iterator()),null,null,null,{ fileName : "TestAnonymousMap.hx", lineNumber : 24, className : "thx.TestAnonymousMap", methodName : "testFeatures"});
	}
	,testGetOption: function() {
		var map = new thx_AnonymousMap({ key1 : 1});
		utest_Assert.same(thx_Options.get(map.getOption("key1")),1,null,null,null,{ fileName : "TestAnonymousMap.hx", lineNumber : 30, className : "thx.TestAnonymousMap", methodName : "testGetOption"});
		utest_Assert.same(thx_Options.toBool(map.getOption("key2")),false,null,null,null,{ fileName : "TestAnonymousMap.hx", lineNumber : 31, className : "thx.TestAnonymousMap", methodName : "testGetOption"});
	}
	,__class__: thx_TestAnonymousMap
};
var thx_TestArrays = function() {
};
thx_TestArrays.__name__ = ["thx","TestArrays"];
thx_TestArrays.prototype = {
	testApplyIndexes: function() {
		utest_Assert.same(["A","B","C"],thx_Arrays.applyIndexes(["B","C","A"],[1,2,0]),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 18, className : "thx.TestArrays", methodName : "testApplyIndexes"});
		utest_Assert.same([1,1,2,2,3],thx_Arrays.applyIndexes([1,3,2,1,2],[0,4,2,0,2],true),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 19, className : "thx.TestArrays", methodName : "testApplyIndexes"});
	}
	,testRank: function() {
		var tests = [{ test : [3,1,2], expected : [1,2,3]},{ test : [1,2,3], expected : [1,2,3]},{ test : [3,2,1], expected : [1,2,3]},{ test : [2,1], expected : [1,2]},{ test : [1,2], expected : [1,2]},{ test : [2], expected : [2]},{ test : [], expected : []},{ test : [1,3,2,1,2], expected : [1,1,2,2,3]}];
		var _g = 0;
		while(_g < tests.length) {
			var item = tests[_g];
			++_g;
			var ranks = thx_Arrays.rank(item.test,thx_Ints.compare);
			utest_Assert.same(item.expected,thx_Arrays.applyIndexes(item.test,ranks),null,"expected " + Std.string(item.expected) + " but it is " + Std.string(ranks),null,{ fileName : "TestArrays.hx", lineNumber : 37, className : "thx.TestArrays", methodName : "testRank"});
		}
	}
	,testWith: function() {
		var arr = [1];
		utest_Assert.isFalse(arr == arr.concat([2]),null,{ fileName : "TestArrays.hx", lineNumber : 43, className : "thx.TestArrays", methodName : "testWith"});
		utest_Assert.same([1,2,3],[1,2].concat([3]),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 45, className : "thx.TestArrays", methodName : "testWith"});
		utest_Assert.same([1,2,3],[1].concat([2,3]),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 46, className : "thx.TestArrays", methodName : "testWith"});
		utest_Assert.same([1,2,3],thx_Arrays.withInsert([1,3],2,1),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 47, className : "thx.TestArrays", methodName : "testWith"});
		utest_Assert.same([1,2,3,4,5],thx_Arrays.withSlice([1,2,3,4,5],[3,4],2,2),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 48, className : "thx.TestArrays", methodName : "testWith"});
		utest_Assert.same([1,2,3,4,5],thx_Arrays.withSlice([1,2,5],[3,4],2),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 49, className : "thx.TestArrays", methodName : "testWith"});
	}
	,testCreate: function() {
		utest_Assert.same([2,2,2],thx_Arrays.create(3,2),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 54, className : "thx.TestArrays", methodName : "testCreate"});
	}
	,testEach: function() {
		var arr = [4,5,6];
		var sum = 0;
		thx_Arrays.each(arr,function(item) {
			sum += item;
		});
		utest_Assert.same(15,sum,null,null,null,{ fileName : "TestArrays.hx", lineNumber : 63, className : "thx.TestArrays", methodName : "testEach"});
	}
	,testEachi: function() {
		var arr = [4,5,6];
		var sum = 0;
		var indices = [];
		thx_Arrays.eachi(arr,function(item,i) {
			sum += item;
			indices.push(i);
		});
		utest_Assert.same(15,sum,null,null,null,{ fileName : "TestArrays.hx", lineNumber : 74, className : "thx.TestArrays", methodName : "testEachi"});
		utest_Assert.same([0,1,2],indices,null,null,null,{ fileName : "TestArrays.hx", lineNumber : 75, className : "thx.TestArrays", methodName : "testEachi"});
	}
	,testMap: function() {
	}
	,testMapi: function() {
		var input = [4,5,6];
		var $is = [];
		utest_Assert.same([8,10,12],input.map(function(v,i) {
			$is.push(i);
			return v * 2;
		}),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 93, className : "thx.TestArrays", methodName : "testMapi"});
		utest_Assert.same([0,1,2],$is,null,null,null,{ fileName : "TestArrays.hx", lineNumber : 94, className : "thx.TestArrays", methodName : "testMapi"});
	}
	,testCrossMulti: function() {
		utest_Assert.same([[1,3,5],[2,3,5],[1,4,5],[2,4,5],[1,3,6],[2,3,6],[1,4,6],[2,4,6]],thx_Arrays.crossMulti([[1,2],[3,4],[5,6]]),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 99, className : "thx.TestArrays", methodName : "testCrossMulti"});
	}
	,testMapField: function() {
		utest_Assert.same([1,2,3],[{ a : 1},{ a : 2},{ a : 3}].map(function(_) {
			return _.a;
		}),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 105, className : "thx.TestArrays", methodName : "testMapField"});
	}
	,testMapFieldOnFunction: function() {
		utest_Assert.same([4,6,8],[new thx__$TestArrays_Sample(2),new thx__$TestArrays_Sample(3),new thx__$TestArrays_Sample(4)].map(function(_) {
			return _.multiply(2);
		}),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 114, className : "thx.TestArrays", methodName : "testMapFieldOnFunction"});
	}
	,testUsingMapField: function() {
		utest_Assert.same([1,2,3],[{ a : 1},{ a : 2},{ a : 3}].map(function(_) {
			return _.a;
		}),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 120, className : "thx.TestArrays", methodName : "testUsingMapField"});
	}
	,testUsingMapFieldiOnFunction: function() {
		var _e = [new thx__$TestArrays_Sample(2),new thx__$TestArrays_Sample(3),new thx__$TestArrays_Sample(4)];
		utest_Assert.same([0,3,8],(function(callback) {
			return _e.map(callback);
		})(function(_,_1) {
			return _.multiply(_1);
		}),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 124, className : "thx.TestArrays", methodName : "testUsingMapFieldiOnFunction"});
	}
	,testFilterFn: function() {
		utest_Assert.same([1,3,5],[1,2,3,4,5,6].filter(function(_) {
			return _ % 2 != 0;
		}),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 135, className : "thx.TestArrays", methodName : "testFilterFn"});
	}
	,testFind: function() {
		utest_Assert.equals(3,thx_Arrays.find([1,3,5,7,9],function(item) {
			return item % 3 == 0;
		}),null,{ fileName : "TestArrays.hx", lineNumber : 139, className : "thx.TestArrays", methodName : "testFind"});
	}
	,testFindOption: function() {
		utest_Assert.equals(3,thx_Arrays.findi([1,3,5,7,9],function(item,i) {
			return i == 1;
		}),null,{ fileName : "TestArrays.hx", lineNumber : 143, className : "thx.TestArrays", methodName : "testFindOption"});
	}
	,testFindLast: function() {
		utest_Assert.equals(9,thx_Arrays.findLast([1,3,5,7,9],function(item) {
			return item % 3 == 0;
		}),null,{ fileName : "TestArrays.hx", lineNumber : 147, className : "thx.TestArrays", methodName : "testFindLast"});
	}
	,testFindFn: function() {
		utest_Assert.equals(3,thx_Arrays.find([1,3,5,7,9],function(_) {
			return _ % 3 == 0;
		}),null,{ fileName : "TestArrays.hx", lineNumber : 151, className : "thx.TestArrays", methodName : "testFindFn"});
	}
	,testFindFnLast: function() {
		utest_Assert.equals(9,thx_Arrays.findLast([1,3,5,7,9],function(_) {
			return _ % 3 == 0;
		}),null,{ fileName : "TestArrays.hx", lineNumber : 155, className : "thx.TestArrays", methodName : "testFindFnLast"});
	}
	,testIntersperse: function() {
		utest_Assert.same([1,2,3,2,5],thx_Arrays.intersperse([1,3,5],2),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 159, className : "thx.TestArrays", methodName : "testIntersperse"});
		utest_Assert.same([1],thx_Arrays.intersperse([1],2),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 160, className : "thx.TestArrays", methodName : "testIntersperse"});
		utest_Assert.same([],thx_Arrays.intersperse([],2),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 161, className : "thx.TestArrays", methodName : "testIntersperse"});
	}
	,testFn: function() {
		utest_Assert.same([2,4,8],[1,2,4].map(function(_) {
			return _ * 2;
		}),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 165, className : "thx.TestArrays", methodName : "testFn"});
	}
	,testMinFloats: function() {
		utest_Assert.floatEquals(0.5,thx_ArrayFloats.min([1.5,0.5,1.0]),null,null,{ fileName : "TestArrays.hx", lineNumber : 169, className : "thx.TestArrays", methodName : "testMinFloats"});
	}
	,testMinInts: function() {
		utest_Assert.equals(1,thx_ArrayInts.min([2,5,1]),null,{ fileName : "TestArrays.hx", lineNumber : 173, className : "thx.TestArrays", methodName : "testMinInts"});
	}
	,testMaxFloats: function() {
		utest_Assert.floatEquals(1.5,thx_ArrayFloats.max([1.5,0.5,1.0]),null,null,{ fileName : "TestArrays.hx", lineNumber : 177, className : "thx.TestArrays", methodName : "testMaxFloats"});
	}
	,testMaxInts: function() {
		utest_Assert.equals(5,thx_ArrayInts.max([2,5,1]),null,{ fileName : "TestArrays.hx", lineNumber : 181, className : "thx.TestArrays", methodName : "testMaxInts"});
	}
	,testAverageFloats: function() {
		utest_Assert.floatEquals(1.0,thx_ArrayFloats.average([2.5,0.5,0.0]),null,null,{ fileName : "TestArrays.hx", lineNumber : 185, className : "thx.TestArrays", methodName : "testAverageFloats"});
	}
	,testAverageInts: function() {
		utest_Assert.equals(3.0,thx_ArrayInts.average([2,6,1]),null,{ fileName : "TestArrays.hx", lineNumber : 189, className : "thx.TestArrays", methodName : "testAverageInts"});
	}
	,testMinString: function() {
		utest_Assert.equals("A",thx_ArrayStrings.min(["B","C","A"]),null,{ fileName : "TestArrays.hx", lineNumber : 193, className : "thx.TestArrays", methodName : "testMinString"});
	}
	,testMaxStrings: function() {
		utest_Assert.equals("C",thx_ArrayStrings.max(["B","C","A"]),null,{ fileName : "TestArrays.hx", lineNumber : 197, className : "thx.TestArrays", methodName : "testMaxStrings"});
	}
	,testCompactFloats: function() {
		utest_Assert.same([1.5,0.5,1.0],thx_ArrayFloats.compact([NaN,1.5,null,0.5,1.0]),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 201, className : "thx.TestArrays", methodName : "testCompactFloats"});
	}
	,testCompactStrings: function() {
		utest_Assert.same(["B","C","A"],thx_ArrayStrings.compact(["B","","C",null,"A",""]),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 205, className : "thx.TestArrays", methodName : "testCompactStrings"});
	}
	,testFilterNullInt: function() {
		utest_Assert.same([1,0,2],thx_Arrays.filterNull([null,1,null,0,2]),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 209, className : "thx.TestArrays", methodName : "testFilterNullInt"});
	}
	,testOrder: function() {
		var arr = [2,3,1];
		utest_Assert.same([1,2,3],thx_Arrays.order(arr,function(_0,_1) {
			return _0 - _1;
		}),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 214, className : "thx.TestArrays", methodName : "testOrder"});
		utest_Assert.same([2,3,1],arr,null,null,null,{ fileName : "TestArrays.hx", lineNumber : 215, className : "thx.TestArrays", methodName : "testOrder"});
	}
	,testOrderFn: function() {
		var arr = [2,3,1];
		var _e = arr;
		utest_Assert.same([1,2,3],(function(sort) {
			return thx_Arrays.order(_e,sort);
		})(function(_0,_1) {
			return _0 - _1;
		}),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 220, className : "thx.TestArrays", methodName : "testOrderFn"});
		utest_Assert.same([2,3,1],arr,null,null,null,{ fileName : "TestArrays.hx", lineNumber : 221, className : "thx.TestArrays", methodName : "testOrderFn"});
	}
	,testOrderFnObjectOfInt: function() {
		var obj1 = { key : 1};
		var obj2 = { key : 2};
		var obj3 = { key : 3};
		var arr = [obj2,obj3,obj1];
		var _e = arr;
		utest_Assert.same([obj1,obj2,obj3],(function(sort) {
			return thx_Arrays.order(_e,sort);
		})(function(_0,_1) {
			return _0.key - _1.key;
		}),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 229, className : "thx.TestArrays", methodName : "testOrderFnObjectOfInt"});
		utest_Assert.same([obj2,obj3,obj1],arr,null,null,null,{ fileName : "TestArrays.hx", lineNumber : 230, className : "thx.TestArrays", methodName : "testOrderFnObjectOfInt"});
	}
	,testOrderFnObjectOfFloat: function() {
		var obj1 = { key : 1.0};
		var obj2 = { key : 2.0};
		var obj3 = { key : 3.0};
		var arr = [obj2,obj3,obj1];
		var _e = arr;
		utest_Assert.same([obj1,obj2,obj3],(function(sort) {
			return thx_Arrays.order(_e,sort);
		})(function(_0,_1) {
			var a = _0.key;
			var b = _1.key;
			if(a < b) {
				return -1;
			} else if(a > b) {
				return 1;
			} else {
				return 0;
			}
		}),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 238, className : "thx.TestArrays", methodName : "testOrderFnObjectOfFloat"});
		utest_Assert.same([obj2,obj3,obj1],arr,null,null,null,{ fileName : "TestArrays.hx", lineNumber : 239, className : "thx.TestArrays", methodName : "testOrderFnObjectOfFloat"});
	}
	,testSortFn: function() {
		var arr = [2,3,1];
		arr.sort(function(_0,_1) {
			return _0 - _1;
		});
		utest_Assert.same([1,2,3],arr,null,null,null,{ fileName : "TestArrays.hx", lineNumber : 246, className : "thx.TestArrays", methodName : "testSortFn"});
	}
	,testContains: function() {
		utest_Assert.isTrue(thx_Arrays.contains([1,2,3],2),null,{ fileName : "TestArrays.hx", lineNumber : 251, className : "thx.TestArrays", methodName : "testContains"});
		utest_Assert.isFalse(thx_Arrays.contains([1,2,3],4),null,{ fileName : "TestArrays.hx", lineNumber : 252, className : "thx.TestArrays", methodName : "testContains"});
	}
	,testContainsAll: function() {
		utest_Assert.isTrue(thx_Arrays.containsAll([1,2,3],[3,1,2]),null,{ fileName : "TestArrays.hx", lineNumber : 256, className : "thx.TestArrays", methodName : "testContainsAll"});
		utest_Assert.isFalse(thx_Arrays.containsAll([1,2,3],[3,1,2,4]),null,{ fileName : "TestArrays.hx", lineNumber : 257, className : "thx.TestArrays", methodName : "testContainsAll"});
	}
	,testContainsAny: function() {
		utest_Assert.isTrue(thx_Arrays.containsAny([1,2,3],[2,3,4]),null,{ fileName : "TestArrays.hx", lineNumber : 261, className : "thx.TestArrays", methodName : "testContainsAny"});
		utest_Assert.isFalse(thx_Arrays.containsAny([1,2,3],[4,5,6]),null,{ fileName : "TestArrays.hx", lineNumber : 262, className : "thx.TestArrays", methodName : "testContainsAny"});
	}
	,testCount: function() {
		var map = thx_Arrays.count_Int([2,3,2,1,4,2,3]);
		utest_Assert.equals(3,map.h[2],null,{ fileName : "TestArrays.hx", lineNumber : 268, className : "thx.TestArrays", methodName : "testCount"});
		utest_Assert.equals(2,map.h[3],null,{ fileName : "TestArrays.hx", lineNumber : 269, className : "thx.TestArrays", methodName : "testCount"});
		utest_Assert.equals(1,map.h[1],null,{ fileName : "TestArrays.hx", lineNumber : 270, className : "thx.TestArrays", methodName : "testCount"});
		utest_Assert.equals(1,map.h[4],null,{ fileName : "TestArrays.hx", lineNumber : 271, className : "thx.TestArrays", methodName : "testCount"});
	}
	,testGroupBy: function() {
		var map = thx_Arrays.groupBy_Int_Float([2.1,3.5,2.0,1.4,2.7,3.0],function(f) {
			return Math.floor(f);
		});
		utest_Assert.same([2.1,2.0,2.7],map.h[2],null,null,null,{ fileName : "TestArrays.hx", lineNumber : 277, className : "thx.TestArrays", methodName : "testGroupBy"});
		utest_Assert.same([3.5,3.0],map.h[3],null,null,null,{ fileName : "TestArrays.hx", lineNumber : 278, className : "thx.TestArrays", methodName : "testGroupBy"});
		utest_Assert.same([1.4],map.h[1],null,null,null,{ fileName : "TestArrays.hx", lineNumber : 279, className : "thx.TestArrays", methodName : "testGroupBy"});
	}
	,testGroupByArray: function() {
		var map = thx_Arrays.groupBy_Int_Array_Int([[0,1],[0,2],[1,1]],function(f) {
			return f[0];
		});
		var _g = new haxe_ds_IntMap();
		_g.h[0] = [[0,1],[0,2]];
		_g.h[1] = [[1,1]];
		utest_Assert.same(_g,map,null,null,null,{ fileName : "TestArrays.hx", lineNumber : 285, className : "thx.TestArrays", methodName : "testGroupByArray"});
	}
	,testGroupByInstance: function() {
		var map = thx_Arrays.groupBy_Int_thx__TestArrays_Sample([new thx__$TestArrays_Sample(1),new thx__$TestArrays_Sample(1),new thx__$TestArrays_Sample(2)],function(f) {
			return f.v;
		});
		var _g = new haxe_ds_IntMap();
		_g.h[1] = [new thx__$TestArrays_Sample(1),new thx__$TestArrays_Sample(1)];
		_g.h[2] = [new thx__$TestArrays_Sample(2)];
		utest_Assert.same(_g,map,null,null,null,{ fileName : "TestArrays.hx", lineNumber : 294, className : "thx.TestArrays", methodName : "testGroupByInstance"});
	}
	,testGroupByAnonymous: function() {
		var panels = [{ level : 1},{ level : 1},{ level : 2}];
		var map = new haxe_ds_IntMap();
		var results = thx_Arrays.groupByAppend(panels,function(el) {
			return el.level;
		},map);
		var _g = new haxe_ds_IntMap();
		_g.h[1] = [{ level : 1},{ level : 1}];
		_g.h[2] = [{ level : 2}];
		utest_Assert.same(_g,results,null,null,null,{ fileName : "TestArrays.hx", lineNumber : 305, className : "thx.TestArrays", methodName : "testGroupByAnonymous"});
	}
	,testMapRight: function() {
		utest_Assert.same([6,4,2],thx_Arrays.mapRight([1,2,3],function(v) {
			return v * 2;
		}),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 313, className : "thx.TestArrays", methodName : "testMapRight"});
	}
	,testFnRight: function() {
		utest_Assert.same([6,4,2],thx_Arrays.mapRight([1,2,3],function(_) {
			return _ * 2;
		}),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 317, className : "thx.TestArrays", methodName : "testFnRight"});
	}
	,testReduceRight: function() {
		var array = ["a","b","c"];
		var initial = "";
		var i = array.length;
		while(--i >= 0) initial += array[i].toUpperCase();
		utest_Assert.same("CBA",initial,null,null,null,{ fileName : "TestArrays.hx", lineNumber : 321, className : "thx.TestArrays", methodName : "testReduceRight"});
	}
	,testRotate: function() {
		utest_Assert.same([["a0","a1","a2"],["b0","b1","b2"]],thx_Arrays.rotate([["a0","b0"],["a1","b1"],["a2","b2"]]),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 325, className : "thx.TestArrays", methodName : "testRotate"});
	}
	,testDistinct: function() {
		utest_Assert.same([],thx_Arrays.distinct([]),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 333, className : "thx.TestArrays", methodName : "testDistinct"});
		utest_Assert.same([1],thx_Arrays.distinct([1]),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 334, className : "thx.TestArrays", methodName : "testDistinct"});
		utest_Assert.same(["one"],thx_Arrays.distinct(["one"]),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 335, className : "thx.TestArrays", methodName : "testDistinct"});
		utest_Assert.same([1],thx_Arrays.distinct([1,1]),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 336, className : "thx.TestArrays", methodName : "testDistinct"});
		utest_Assert.same([1,2],thx_Arrays.distinct([1,2]),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 337, className : "thx.TestArrays", methodName : "testDistinct"});
		utest_Assert.same(["one","two"],thx_Arrays.distinct(["one","two"]),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 338, className : "thx.TestArrays", methodName : "testDistinct"});
		utest_Assert.same([1,2,3,4,5,6,7,8],thx_Arrays.distinct([1,2,2,3,4,5,5,6,7,8,8]),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 339, className : "thx.TestArrays", methodName : "testDistinct"});
		utest_Assert.same([8,1,2,7,3,4,5,6],thx_Arrays.distinct([8,8,1,2,7,2,3,4,5,1,5,6,7,8,2,8]),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 340, className : "thx.TestArrays", methodName : "testDistinct"});
		utest_Assert.same(["one","two","three"],thx_Arrays.distinct(["one","two","one","two","three","one","two"]),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 341, className : "thx.TestArrays", methodName : "testDistinct"});
		utest_Assert.same([false,true],thx_Arrays.distinct([false,false,true,false,true,true]),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 342, className : "thx.TestArrays", methodName : "testDistinct"});
		utest_Assert.same([{ key : "one"},{ key : "two"},{ key : "three"}],thx_Arrays.distinct([{ key : "one"},{ key : "two"},{ key : "one"},{ key : "three"},{ key : "two"}],function(a,b) {
			return a.key == b.key;
		}),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 348, className : "thx.TestArrays", methodName : "testDistinct"});
	}
	,testSplit: function() {
		var arr = [1,2,3,4,5,6,7,8,9,0];
		utest_Assert.same([[1,2,3,4,5,6,7,8,9,0]],thx_Arrays.split(arr,1),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 353, className : "thx.TestArrays", methodName : "testSplit"});
		utest_Assert.same([[1,2,3,4,5],[6,7,8,9,0]],thx_Arrays.split(arr,2),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 354, className : "thx.TestArrays", methodName : "testSplit"});
		utest_Assert.same([[1,2,3,4],[5,6,7,8],[9,0]],thx_Arrays.split(arr,3),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 355, className : "thx.TestArrays", methodName : "testSplit"});
		utest_Assert.same([[1,2,3],[4,5,6],[7,8,9],[0]],thx_Arrays.split(arr,4),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 356, className : "thx.TestArrays", methodName : "testSplit"});
		utest_Assert.same([[1],[2],[3],[4],[5],[6],[7],[8],[9],[0]],thx_Arrays.split(arr,10),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 357, className : "thx.TestArrays", methodName : "testSplit"});
		utest_Assert.same([[1],[2],[3],[4],[5],[6],[7],[8],[9],[0]],thx_Arrays.split(arr,20),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 358, className : "thx.TestArrays", methodName : "testSplit"});
	}
	,testSplitBy: function() {
		var arr = [1,2,3,4,5,6,7,8,9,0];
		utest_Assert.same([[1],[2],[3],[4],[5],[6],[7],[8],[9],[0]],thx_Arrays.splitBy(arr,1),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 363, className : "thx.TestArrays", methodName : "testSplitBy"});
		utest_Assert.same([[1,2],[3,4],[5,6],[7,8],[9,0]],thx_Arrays.splitBy(arr,2),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 364, className : "thx.TestArrays", methodName : "testSplitBy"});
		utest_Assert.same([[1,2,3],[4,5,6],[7,8,9],[0]],thx_Arrays.splitBy(arr,3),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 365, className : "thx.TestArrays", methodName : "testSplitBy"});
		utest_Assert.same([[1,2,3,4],[5,6,7,8],[9,0]],thx_Arrays.splitBy(arr,4),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 366, className : "thx.TestArrays", methodName : "testSplitBy"});
		utest_Assert.same([[1,2,3,4,5,6,7,8,9,0]],thx_Arrays.splitBy(arr,10),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 367, className : "thx.TestArrays", methodName : "testSplitBy"});
		utest_Assert.same([[1,2,3,4,5,6,7,8,9,0]],thx_Arrays.splitBy(arr,20),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 368, className : "thx.TestArrays", methodName : "testSplitBy"});
	}
	,testSplitByPad: function() {
		var arr = [1,2,3,4,5,6,7,8,9,0];
		utest_Assert.same([[1],[2],[3],[4],[5],[6],[7],[8],[9],[0]],thx_Arrays.splitByPad(arr,1,0),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 373, className : "thx.TestArrays", methodName : "testSplitByPad"});
		utest_Assert.same([[1,2],[3,4],[5,6],[7,8],[9,0]],thx_Arrays.splitByPad(arr,2,0),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 374, className : "thx.TestArrays", methodName : "testSplitByPad"});
		utest_Assert.same([[1,2,3],[4,5,6],[7,8,9],[0,0,0]],thx_Arrays.splitByPad(arr,3,0),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 375, className : "thx.TestArrays", methodName : "testSplitByPad"});
		utest_Assert.same([[1,2,3,4],[5,6,7,8],[9,0,0,0]],thx_Arrays.splitByPad(arr,4,0),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 376, className : "thx.TestArrays", methodName : "testSplitByPad"});
		utest_Assert.same([[1,2,3,4,5,6,7,8,9,0]],thx_Arrays.splitByPad(arr,10,0),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 377, className : "thx.TestArrays", methodName : "testSplitByPad"});
		utest_Assert.same([[1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,0,0,0,0]],thx_Arrays.splitByPad(arr,20,0),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 378, className : "thx.TestArrays", methodName : "testSplitByPad"});
	}
	,testTraverseOption: function() {
		var arr = [1,2,3,4,5];
		utest_Assert.same(haxe_ds_Option.None,thx_Arrays.traverseOption(arr,function(i) {
			if(i % 2 == 0) {
				return haxe_ds_Option.Some(i);
			} else {
				return haxe_ds_Option.None;
			}
		}),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 385, className : "thx.TestArrays", methodName : "testTraverseOption"});
		utest_Assert.same(haxe_ds_Option.Some(arr),thx_Arrays.traverseOption(arr,function(v) {
			return haxe_ds_Option.Some(v);
		}),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 386, className : "thx.TestArrays", methodName : "testTraverseOption"});
	}
	,testTraverseValidation: function() {
		var arr = [1,2,3,4,5];
		var ff = function(i) {
			if(i % 2 == 0) {
				return thx_Either.Right(i);
			} else {
				return thx_Either.Left(thx__$Nel_Nel_$Impl_$.pure("oops: " + i));
			}
		};
		var fs = function(i1) {
			return thx_Either.Right(i1);
		};
		utest_Assert.same(thx_Either.Left(thx__$Nel_Nel_$Impl_$.nel("oops: 5",["oops: 3","oops: 1"])),thx_Arrays.traverseValidation(arr,ff,thx__$Nel_Nel_$Impl_$.semigroup()),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 394, className : "thx.TestArrays", methodName : "testTraverseValidation"});
		utest_Assert.same(thx_Either.Right(arr),thx_Arrays.traverseValidation(arr,fs,thx__$Nel_Nel_$Impl_$.semigroup()),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 395, className : "thx.TestArrays", methodName : "testTraverseValidation"});
	}
	,testZip5Ap: function() {
		utest_Assert.same(["a1x3true","b2y4false"],thx_Arrays.zip5Ap(function(s,i,t,j,b) {
			return "" + s + i + t + j + (b == null?"null":"" + b);
		},["a","b","c"],[1,2],["x","y","z"],[3,4],[true,false,true]),null,null,null,{ fileName : "TestArrays.hx", lineNumber : 406, className : "thx.TestArrays", methodName : "testZip5Ap"});
	}
	,__class__: thx_TestArrays
};
var thx__$TestArrays_Sample = function(v) {
	this.v = v;
};
thx__$TestArrays_Sample.__name__ = ["thx","_TestArrays","Sample"];
thx__$TestArrays_Sample.prototype = {
	v: null
	,multiply: function(by) {
		return this.v * by;
	}
	,__class__: thx__$TestArrays_Sample
};
var thx_TestAssert = function() {
};
thx_TestAssert.__name__ = ["thx","TestAssert"];
thx_TestAssert.prototype = {
	orig: null
	,behavior: null
	,setup: function() {
		this.orig = thx_Assert.behavior;
		thx_Assert.behavior = this.behavior = new thx_CollectBehavior();
	}
	,teardown: function() {
		thx_Assert.behavior = this.orig;
	}
	,testIsBool: function() {
		thx_Assert.isTrue(true,null,{ fileName : "TestAssert.hx", lineNumber : 22, className : "thx.TestAssert", methodName : "testIsBool"});
		thx_Assert.isTrue(false,null,{ fileName : "TestAssert.hx", lineNumber : 23, className : "thx.TestAssert", methodName : "testIsBool"});
		thx_Assert.isFalse(true,null,{ fileName : "TestAssert.hx", lineNumber : 24, className : "thx.TestAssert", methodName : "testIsBool"});
		thx_Assert.isFalse(false,null,{ fileName : "TestAssert.hx", lineNumber : 25, className : "thx.TestAssert", methodName : "testIsBool"});
		this.expect(2,2,null,{ fileName : "TestAssert.hx", lineNumber : 27, className : "thx.TestAssert", methodName : "testIsBool"});
	}
	,testIsNull: function() {
		thx_Assert.isNull(null,null,{ fileName : "TestAssert.hx", lineNumber : 31, className : "thx.TestAssert", methodName : "testIsNull"});
		thx_Assert.isNull(0,null,{ fileName : "TestAssert.hx", lineNumber : 32, className : "thx.TestAssert", methodName : "testIsNull"});
		thx_Assert.isNull(0.0,null,{ fileName : "TestAssert.hx", lineNumber : 33, className : "thx.TestAssert", methodName : "testIsNull"});
		thx_Assert.isNull(0.1,null,{ fileName : "TestAssert.hx", lineNumber : 34, className : "thx.TestAssert", methodName : "testIsNull"});
		thx_Assert.isNull(1,null,{ fileName : "TestAssert.hx", lineNumber : 35, className : "thx.TestAssert", methodName : "testIsNull"});
		thx_Assert.isNull("",null,{ fileName : "TestAssert.hx", lineNumber : 36, className : "thx.TestAssert", methodName : "testIsNull"});
		thx_Assert.isNull("a",null,{ fileName : "TestAssert.hx", lineNumber : 37, className : "thx.TestAssert", methodName : "testIsNull"});
		thx_Assert.isNull(NaN,null,{ fileName : "TestAssert.hx", lineNumber : 38, className : "thx.TestAssert", methodName : "testIsNull"});
		thx_Assert.isNull(Infinity,null,{ fileName : "TestAssert.hx", lineNumber : 39, className : "thx.TestAssert", methodName : "testIsNull"});
		thx_Assert.isNull(true,null,{ fileName : "TestAssert.hx", lineNumber : 40, className : "thx.TestAssert", methodName : "testIsNull"});
		thx_Assert.isNull(false,null,{ fileName : "TestAssert.hx", lineNumber : 41, className : "thx.TestAssert", methodName : "testIsNull"});
		this.expect(1,10,null,{ fileName : "TestAssert.hx", lineNumber : 42, className : "thx.TestAssert", methodName : "testIsNull"});
	}
	,testNotNull: function() {
		thx_Assert.notNull(null,null,{ fileName : "TestAssert.hx", lineNumber : 46, className : "thx.TestAssert", methodName : "testNotNull"});
		thx_Assert.notNull(0,null,{ fileName : "TestAssert.hx", lineNumber : 47, className : "thx.TestAssert", methodName : "testNotNull"});
		thx_Assert.notNull(0.0,null,{ fileName : "TestAssert.hx", lineNumber : 48, className : "thx.TestAssert", methodName : "testNotNull"});
		thx_Assert.notNull(0.1,null,{ fileName : "TestAssert.hx", lineNumber : 49, className : "thx.TestAssert", methodName : "testNotNull"});
		thx_Assert.notNull(1,null,{ fileName : "TestAssert.hx", lineNumber : 50, className : "thx.TestAssert", methodName : "testNotNull"});
		thx_Assert.notNull("",null,{ fileName : "TestAssert.hx", lineNumber : 51, className : "thx.TestAssert", methodName : "testNotNull"});
		thx_Assert.notNull("a",null,{ fileName : "TestAssert.hx", lineNumber : 52, className : "thx.TestAssert", methodName : "testNotNull"});
		thx_Assert.notNull(NaN,null,{ fileName : "TestAssert.hx", lineNumber : 53, className : "thx.TestAssert", methodName : "testNotNull"});
		thx_Assert.notNull(Infinity,null,{ fileName : "TestAssert.hx", lineNumber : 54, className : "thx.TestAssert", methodName : "testNotNull"});
		thx_Assert.notNull(true,null,{ fileName : "TestAssert.hx", lineNumber : 55, className : "thx.TestAssert", methodName : "testNotNull"});
		thx_Assert.notNull(false,null,{ fileName : "TestAssert.hx", lineNumber : 56, className : "thx.TestAssert", methodName : "testNotNull"});
		this.expect(10,1,null,{ fileName : "TestAssert.hx", lineNumber : 57, className : "thx.TestAssert", methodName : "testNotNull"});
	}
	,testRaisesSuccess: function() {
		var counter = 0;
		var tests = [{ exception : "e", catches : [String,Dynamic,null]},{ exception : 1, catches : [Int,Dynamic,null]},{ exception : 0.1, catches : [Float,Dynamic,null]},{ exception : new thx_TestAssert(), catches : [thx_TestAssert,Dynamic,null]},{ exception : [1], catches : [Array,Dynamic,null]}];
		var _g = 0;
		while(_g < tests.length) {
			var test = [tests[_g]];
			++_g;
			var _g1 = 0;
			var _g2 = test[0].catches;
			while(_g1 < _g2.length) {
				var catcher = _g2[_g1];
				++_g1;
				++counter;
				thx_Assert.raises((function(test1) {
					return function() {
						throw js__$Boot_HaxeError.wrap(test1[0].exception);
					};
				})(test),catcher,null,null,{ fileName : "TestAssert.hx", lineNumber : 72, className : "thx.TestAssert", methodName : "testRaisesSuccess"});
			}
		}
		this.expect(counter,0,null,{ fileName : "TestAssert.hx", lineNumber : 75, className : "thx.TestAssert", methodName : "testRaisesSuccess"});
	}
	,testRaisesFailure: function() {
		var counter = 0;
		var tests = [{ exception : "e", catches : [Int,Float,thx_TestAssert]},{ exception : 1, catches : [String,thx_TestAssert]},{ exception : 0.1, catches : [String,Int,thx_TestAssert]},{ exception : new thx_TestAssert(), catches : [Int,Float,String]},{ exception : [1], catches : [thx_TestAssert,Int,Float]}];
		var _g = 0;
		while(_g < tests.length) {
			var test = [tests[_g]];
			++_g;
			var _g1 = 0;
			var _g2 = test[0].catches;
			while(_g1 < _g2.length) {
				var catcher = _g2[_g1];
				++_g1;
				++counter;
				thx_Assert.raises((function(test1) {
					return function() {
						throw js__$Boot_HaxeError.wrap(test1[0].exception);
					};
				})(test),catcher,null,null,{ fileName : "TestAssert.hx", lineNumber : 90, className : "thx.TestAssert", methodName : "testRaisesFailure"});
			}
		}
		this.expect(0,counter,null,{ fileName : "TestAssert.hx", lineNumber : 93, className : "thx.TestAssert", methodName : "testRaisesFailure"});
	}
	,testIs: function() {
		var values = ["e",1,0.1,new thx_TestAssert(),{ },[1]];
		var types = [String,Int,Float,thx_TestAssert,Dynamic,Array];
		var i = 0;
		var _g = 0;
		while(_g < values.length) {
			var value = values[_g];
			++_g;
			var _g1 = 0;
			while(_g1 < types.length) {
				var type = types[_g1];
				++_g1;
				++i;
				thx_Assert["is"](value,type,null,{ fileName : "TestAssert.hx", lineNumber : 104, className : "thx.TestAssert", methodName : "testIs"});
			}
		}
		this.expect(12,i - 12,null,{ fileName : "TestAssert.hx", lineNumber : 106, className : "thx.TestAssert", methodName : "testIs"});
	}
	,testSamePrimitive: function() {
		thx_Assert.same(null,1,null,null,{ fileName : "TestAssert.hx", lineNumber : 110, className : "thx.TestAssert", methodName : "testSamePrimitive"});
		thx_Assert.same(1,1,null,null,{ fileName : "TestAssert.hx", lineNumber : 111, className : "thx.TestAssert", methodName : "testSamePrimitive"});
		thx_Assert.same(1,"1",null,null,{ fileName : "TestAssert.hx", lineNumber : 112, className : "thx.TestAssert", methodName : "testSamePrimitive"});
		thx_Assert.same("a","a",null,null,{ fileName : "TestAssert.hx", lineNumber : 113, className : "thx.TestAssert", methodName : "testSamePrimitive"});
		thx_Assert.same(null,"",null,null,{ fileName : "TestAssert.hx", lineNumber : 114, className : "thx.TestAssert", methodName : "testSamePrimitive"});
		thx_Assert.same(new Date(2000,0,1,0,0,0),null,null,null,{ fileName : "TestAssert.hx", lineNumber : 115, className : "thx.TestAssert", methodName : "testSamePrimitive"});
		var _g = new haxe_ds_IntMap();
		_g.h[1] = "a";
		_g.h[2] = "b";
		var _g1 = new haxe_ds_IntMap();
		_g1.h[1] = "a";
		_g1.h[2] = "b";
		thx_Assert.same(_g,_g1,null,null,{ fileName : "TestAssert.hx", lineNumber : 116, className : "thx.TestAssert", methodName : "testSamePrimitive"});
		var _g2 = new haxe_ds_StringMap();
		if(__map_reserved.a != null) {
			_g2.setReserved("a",1);
		} else {
			_g2.h["a"] = 1;
		}
		var _g3 = new haxe_ds_StringMap();
		if(__map_reserved.a != null) {
			_g3.setReserved("a",1);
		} else {
			_g3.h["a"] = 1;
		}
		thx_Assert.same(_g2,_g3,null,null,{ fileName : "TestAssert.hx", lineNumber : 117, className : "thx.TestAssert", methodName : "testSamePrimitive"});
		var _g4 = new haxe_ds_StringMap();
		if(__map_reserved.a != null) {
			_g4.setReserved("a",1);
		} else {
			_g4.h["a"] = 1;
		}
		var _g5 = new haxe_ds_IntMap();
		_g5.h[1] = 1;
		thx_Assert.same(_g4,_g5,null,null,{ fileName : "TestAssert.hx", lineNumber : 118, className : "thx.TestAssert", methodName : "testSamePrimitive"});
		var _g6 = new haxe_ds_IntMap();
		_g6.h[1] = "a";
		var _g7 = new haxe_ds_IntMap();
		_g7.h[1] = "a";
		_g7.h[2] = "b";
		thx_Assert.same(_g6,_g7,null,null,{ fileName : "TestAssert.hx", lineNumber : 119, className : "thx.TestAssert", methodName : "testSamePrimitive"});
		thx_Assert.same(new Date(2000,0,1,0,0,0),new Date(2000,0,1,0,0,0),null,null,{ fileName : "TestAssert.hx", lineNumber : 120, className : "thx.TestAssert", methodName : "testSamePrimitive"});
		this.expect(5,6,null,{ fileName : "TestAssert.hx", lineNumber : 122, className : "thx.TestAssert", methodName : "testSamePrimitive"});
	}
	,testSameType: function() {
		thx_Assert.same(null,{ },null,null,{ fileName : "TestAssert.hx", lineNumber : 126, className : "thx.TestAssert", methodName : "testSameType"});
		thx_Assert.same(null,null,null,null,{ fileName : "TestAssert.hx", lineNumber : 127, className : "thx.TestAssert", methodName : "testSameType"});
		thx_Assert.same({ },null,null,null,{ fileName : "TestAssert.hx", lineNumber : 128, className : "thx.TestAssert", methodName : "testSameType"});
		thx_Assert.same({ },1,null,null,{ fileName : "TestAssert.hx", lineNumber : 129, className : "thx.TestAssert", methodName : "testSameType"});
		thx_Assert.same({ },[],null,null,{ fileName : "TestAssert.hx", lineNumber : 130, className : "thx.TestAssert", methodName : "testSameType"});
		thx_Assert.same(null,thx__$TestAssert_Sample.None,null,null,{ fileName : "TestAssert.hx", lineNumber : 131, className : "thx.TestAssert", methodName : "testSameType"});
		thx_Assert.same(thx__$TestAssert_Sample.None,null,null,null,{ fileName : "TestAssert.hx", lineNumber : 132, className : "thx.TestAssert", methodName : "testSameType"});
		this.expect(1,6,null,{ fileName : "TestAssert.hx", lineNumber : 134, className : "thx.TestAssert", methodName : "testSameType"});
	}
	,testSameArray: function() {
		thx_Assert.same([],[],null,null,{ fileName : "TestAssert.hx", lineNumber : 138, className : "thx.TestAssert", methodName : "testSameArray"});
		thx_Assert.same([1],["1"],null,null,{ fileName : "TestAssert.hx", lineNumber : 139, className : "thx.TestAssert", methodName : "testSameArray"});
		thx_Assert.same([1,2,3],[1,2,3],null,null,{ fileName : "TestAssert.hx", lineNumber : 140, className : "thx.TestAssert", methodName : "testSameArray"});
		thx_Assert.same([1,2,3],[1,2],null,null,{ fileName : "TestAssert.hx", lineNumber : 141, className : "thx.TestAssert", methodName : "testSameArray"});
		thx_Assert.same([1,2],[1,2,3],null,null,{ fileName : "TestAssert.hx", lineNumber : 142, className : "thx.TestAssert", methodName : "testSameArray"});
		thx_Assert.same([1,[1,2]],[1,[1,2]],null,null,{ fileName : "TestAssert.hx", lineNumber : 143, className : "thx.TestAssert", methodName : "testSameArray"});
		thx_Assert.same([1,[1,2]],[1,[]],false,null,{ fileName : "TestAssert.hx", lineNumber : 144, className : "thx.TestAssert", methodName : "testSameArray"});
		thx_Assert.same([1,[1,2]],[1,[]],true,null,{ fileName : "TestAssert.hx", lineNumber : 145, className : "thx.TestAssert", methodName : "testSameArray"});
		this.expect(4,4,null,{ fileName : "TestAssert.hx", lineNumber : 147, className : "thx.TestAssert", methodName : "testSameArray"});
	}
	,testSameObject: function() {
		thx_Assert.same({ },{ },null,null,{ fileName : "TestAssert.hx", lineNumber : 151, className : "thx.TestAssert", methodName : "testSameObject"});
		thx_Assert.same({ a : 1},{ a : "1"},null,null,{ fileName : "TestAssert.hx", lineNumber : 152, className : "thx.TestAssert", methodName : "testSameObject"});
		thx_Assert.same({ a : 1, b : "c"},{ a : 1, b : "c"},null,null,{ fileName : "TestAssert.hx", lineNumber : 153, className : "thx.TestAssert", methodName : "testSameObject"});
		thx_Assert.same({ a : 1, b : "c"},{ a : 1, c : "c"},null,null,{ fileName : "TestAssert.hx", lineNumber : 154, className : "thx.TestAssert", methodName : "testSameObject"});
		thx_Assert.same({ a : 1, b : "c"},{ a : 1},null,null,{ fileName : "TestAssert.hx", lineNumber : 155, className : "thx.TestAssert", methodName : "testSameObject"});
		thx_Assert.same({ a : 1, b : { a : 1, c : "c"}},{ a : 1, b : { a : 1, c : "c"}},null,null,{ fileName : "TestAssert.hx", lineNumber : 156, className : "thx.TestAssert", methodName : "testSameObject"});
		thx_Assert.same({ a : 1, b : { a : 1, c : "c"}},{ a : 1, b : { }},false,null,{ fileName : "TestAssert.hx", lineNumber : 157, className : "thx.TestAssert", methodName : "testSameObject"});
		thx_Assert.same({ a : 1, b : { a : 1, c : "c"}},{ a : 1, b : { }},true,null,{ fileName : "TestAssert.hx", lineNumber : 158, className : "thx.TestAssert", methodName : "testSameObject"});
		this.expect(4,4,null,{ fileName : "TestAssert.hx", lineNumber : 160, className : "thx.TestAssert", methodName : "testSameObject"});
	}
	,value: null
	,sub: null
	,testSameInstance: function() {
		var c1 = new thx_TestAssert();
		c1.value = "a";
		var c2 = new thx_TestAssert();
		c2.value = "a";
		var c3 = new thx_TestAssert();
		var r1 = new thx_TestAssert();
		r1.sub = c1;
		var r2 = new thx_TestAssert();
		r2.sub = c2;
		var r3 = new thx_TestAssert();
		r3.sub = c3;
		thx_Assert.same(c1,c1,null,null,{ fileName : "TestAssert.hx", lineNumber : 180, className : "thx.TestAssert", methodName : "testSameInstance"});
		thx_Assert.same(c1,c2,null,null,{ fileName : "TestAssert.hx", lineNumber : 181, className : "thx.TestAssert", methodName : "testSameInstance"});
		thx_Assert.same(c1,c3,null,null,{ fileName : "TestAssert.hx", lineNumber : 182, className : "thx.TestAssert", methodName : "testSameInstance"});
		thx_Assert.same(r1,r2,null,null,{ fileName : "TestAssert.hx", lineNumber : 184, className : "thx.TestAssert", methodName : "testSameInstance"});
		thx_Assert.same(r1,r3,false,null,{ fileName : "TestAssert.hx", lineNumber : 185, className : "thx.TestAssert", methodName : "testSameInstance"});
		thx_Assert.same(r1,r3,true,null,{ fileName : "TestAssert.hx", lineNumber : 186, className : "thx.TestAssert", methodName : "testSameInstance"});
		this.expect(4,2,null,{ fileName : "TestAssert.hx", lineNumber : 188, className : "thx.TestAssert", methodName : "testSameInstance"});
	}
	,testSameIterable: function() {
		var list1 = new List();
		list1.add("a");
		list1.add(1);
		var s1 = new List();
		s1.add(2);
		list1.add(s1);
		var list2 = new List();
		list2.add("a");
		list2.add(1);
		list2.add(s1);
		var list3 = new List();
		list3.add("a");
		list3.add(1);
		list3.add(new List());
		thx_Assert.same(list1,list2,null,null,{ fileName : "TestAssert.hx", lineNumber : 207, className : "thx.TestAssert", methodName : "testSameIterable"});
		thx_Assert.same(list1,list3,false,null,{ fileName : "TestAssert.hx", lineNumber : 208, className : "thx.TestAssert", methodName : "testSameIterable"});
		thx_Assert.same(list1,list3,true,null,{ fileName : "TestAssert.hx", lineNumber : 209, className : "thx.TestAssert", methodName : "testSameIterable"});
		thx_Assert.same(new IntIterator(0,3),new IntIterator(0,3),null,null,{ fileName : "TestAssert.hx", lineNumber : 211, className : "thx.TestAssert", methodName : "testSameIterable"});
		thx_Assert.same(new IntIterator(0,3),new IntIterator(0,4),null,null,{ fileName : "TestAssert.hx", lineNumber : 212, className : "thx.TestAssert", methodName : "testSameIterable"});
		this.expect(3,2,null,{ fileName : "TestAssert.hx", lineNumber : 214, className : "thx.TestAssert", methodName : "testSameIterable"});
	}
	,testSameMap: function() {
		var h1 = new haxe_ds_StringMap();
		if(__map_reserved.a != null) {
			h1.setReserved("a","b");
		} else {
			h1.h["a"] = "b";
		}
		if(__map_reserved.c != null) {
			h1.setReserved("c","d");
		} else {
			h1.h["c"] = "d";
		}
		var h2 = new haxe_ds_StringMap();
		if(__map_reserved.a != null) {
			h2.setReserved("a","b");
		} else {
			h2.h["a"] = "b";
		}
		if(__map_reserved.c != null) {
			h2.setReserved("c","d");
		} else {
			h2.h["c"] = "d";
		}
		var h3 = new haxe_ds_StringMap();
		var h4 = new haxe_ds_StringMap();
		if(__map_reserved.c != null) {
			h4.setReserved("c","d");
		} else {
			h4.h["c"] = "d";
		}
		var i1 = new haxe_ds_IntMap();
		i1.h[2] = "b";
		var i2 = new haxe_ds_IntMap();
		i2.h[2] = "b";
		thx_Assert.same(h1,h2,null,null,{ fileName : "TestAssert.hx", lineNumber : 233, className : "thx.TestAssert", methodName : "testSameMap"});
		thx_Assert.same(h1,h3,null,null,{ fileName : "TestAssert.hx", lineNumber : 234, className : "thx.TestAssert", methodName : "testSameMap"});
		thx_Assert.same(h1,h4,null,null,{ fileName : "TestAssert.hx", lineNumber : 235, className : "thx.TestAssert", methodName : "testSameMap"});
		thx_Assert.same(i1,i2,null,null,{ fileName : "TestAssert.hx", lineNumber : 236, className : "thx.TestAssert", methodName : "testSameMap"});
		this.expect(2,2,null,{ fileName : "TestAssert.hx", lineNumber : 238, className : "thx.TestAssert", methodName : "testSameMap"});
	}
	,testSameEnums: function() {
		thx_Assert.same(thx__$TestAssert_Sample.None,thx__$TestAssert_Sample.None,null,null,{ fileName : "TestAssert.hx", lineNumber : 243, className : "thx.TestAssert", methodName : "testSameEnums"});
		thx_Assert.same(thx__$TestAssert_Sample.Some("a"),thx__$TestAssert_Sample.Some("a"),null,null,{ fileName : "TestAssert.hx", lineNumber : 244, className : "thx.TestAssert", methodName : "testSameEnums"});
		thx_Assert.same(thx__$TestAssert_Sample.Some("a"),thx__$TestAssert_Sample.Some("b"),true,null,{ fileName : "TestAssert.hx", lineNumber : 245, className : "thx.TestAssert", methodName : "testSameEnums"});
		thx_Assert.same(thx__$TestAssert_Sample.Some("a"),thx__$TestAssert_Sample.Some("b"),false,null,{ fileName : "TestAssert.hx", lineNumber : 246, className : "thx.TestAssert", methodName : "testSameEnums"});
		thx_Assert.same(thx__$TestAssert_Sample.Some("a"),thx__$TestAssert_Sample.None,null,null,{ fileName : "TestAssert.hx", lineNumber : 247, className : "thx.TestAssert", methodName : "testSameEnums"});
		thx_Assert.same(thx__$TestAssert_Sample.Rec(thx__$TestAssert_Sample.Rec(thx__$TestAssert_Sample.Some("a"))),thx__$TestAssert_Sample.Rec(thx__$TestAssert_Sample.Rec(thx__$TestAssert_Sample.Some("a"))),null,null,{ fileName : "TestAssert.hx", lineNumber : 248, className : "thx.TestAssert", methodName : "testSameEnums"});
		thx_Assert.same(thx__$TestAssert_Sample.Rec(thx__$TestAssert_Sample.Rec(thx__$TestAssert_Sample.Some("a"))),thx__$TestAssert_Sample.Rec(thx__$TestAssert_Sample.None),true,null,{ fileName : "TestAssert.hx", lineNumber : 249, className : "thx.TestAssert", methodName : "testSameEnums"});
		thx_Assert.same(thx__$TestAssert_Sample.Rec(thx__$TestAssert_Sample.Rec(thx__$TestAssert_Sample.Some("a"))),thx__$TestAssert_Sample.Rec(thx__$TestAssert_Sample.Rec(thx__$TestAssert_Sample.None)),false,null,{ fileName : "TestAssert.hx", lineNumber : 250, className : "thx.TestAssert", methodName : "testSameEnums"});
		this.expect(4,4,null,{ fileName : "TestAssert.hx", lineNumber : 252, className : "thx.TestAssert", methodName : "testSameEnums"});
	}
	,testEquals: function() {
		var values = ["e",1,0.1,{ }];
		var expecteds = ["e",1,0.1,{ }];
		var i = 0;
		var _g = 0;
		while(_g < expecteds.length) {
			var expected = expecteds[_g];
			++_g;
			var _g1 = 0;
			while(_g1 < values.length) {
				var value = values[_g1];
				++_g1;
				++i;
				thx_Assert.equals(expected,value,null,{ fileName : "TestAssert.hx", lineNumber : 263, className : "thx.TestAssert", methodName : "testEquals"});
			}
		}
		this.expect(3,i - 3,null,{ fileName : "TestAssert.hx", lineNumber : 265, className : "thx.TestAssert", methodName : "testEquals"});
	}
	,testNearEqualsSuccess: function() {
		var counter = 0;
		var tests = [{ expected : 0.1, tests : [0.1,0.100000000000000000000000000001,0.099999999999999999999999999999]},{ expected : 1, tests : [1,1.000000000000000000000000000001,0.999999999999999999999999999999]},{ expected : NaN, tests : [NaN]},{ expected : -Infinity, tests : [-Infinity]},{ expected : Infinity, tests : [Infinity]},{ expected : Math.PI, tests : [Math.PI]}];
		var _g = 0;
		while(_g < tests.length) {
			var test = tests[_g];
			++_g;
			var _g1 = 0;
			var _g2 = test.tests;
			while(_g1 < _g2.length) {
				var value = _g2[_g1];
				++_g1;
				++counter;
				thx_Assert.nearEquals(test.expected,value,null,null,{ fileName : "TestAssert.hx", lineNumber : 281, className : "thx.TestAssert", methodName : "testNearEqualsSuccess"});
			}
		}
		this.expect(counter,0,null,{ fileName : "TestAssert.hx", lineNumber : 284, className : "thx.TestAssert", methodName : "testNearEqualsSuccess"});
	}
	,testNearEqualsFail: function() {
		var counter = 0;
		var tests = [{ expected : 0.1, tests : [0.2,0.10000001,0.0999998,NaN,Infinity,-Infinity]},{ expected : NaN, tests : [2,1.1,0.9,Infinity,-Infinity]},{ expected : -Infinity, tests : [2,1.1,0.9,NaN,Infinity]},{ expected : Infinity, tests : [2,1.1,0.9,NaN,-Infinity]}];
		var _g = 0;
		while(_g < tests.length) {
			var test = tests[_g];
			++_g;
			var _g1 = 0;
			var _g2 = test.tests;
			while(_g1 < _g2.length) {
				var value = _g2[_g1];
				++_g1;
				++counter;
				thx_Assert.nearEquals(test.expected,value,null,null,{ fileName : "TestAssert.hx", lineNumber : 299, className : "thx.TestAssert", methodName : "testNearEqualsFail"});
			}
		}
		this.expect(0,counter,null,{ fileName : "TestAssert.hx", lineNumber : 302, className : "thx.TestAssert", methodName : "testNearEqualsFail"});
	}
	,testPass: function() {
		thx_Assert.pass(null,{ fileName : "TestAssert.hx", lineNumber : 306, className : "thx.TestAssert", methodName : "testPass"});
		this.expect(1,0,null,{ fileName : "TestAssert.hx", lineNumber : 307, className : "thx.TestAssert", methodName : "testPass"});
	}
	,testFail: function() {
		thx_Assert.fail(null,{ fileName : "TestAssert.hx", lineNumber : 311, className : "thx.TestAssert", methodName : "testFail"});
		this.expect(0,1,null,{ fileName : "TestAssert.hx", lineNumber : 312, className : "thx.TestAssert", methodName : "testFail"});
	}
	,testWarn: function() {
		thx_Assert.warn("",{ fileName : "TestAssert.hx", lineNumber : 316, className : "thx.TestAssert", methodName : "testWarn"});
		this.expect(0,0,1,{ fileName : "TestAssert.hx", lineNumber : 317, className : "thx.TestAssert", methodName : "testWarn"});
	}
	,expect: function(successes,failures,warnings,pos) {
		if(warnings == null) {
			warnings = 0;
		}
		utest_Assert.equals(successes,this.behavior.successes,"expected " + successes + " successes but they are " + this.behavior.successes,pos);
		utest_Assert.equals(failures,this.behavior.failures,"expected " + failures + " failures but they are " + this.behavior.failures,pos);
		utest_Assert.equals(warnings,this.behavior.warnings,"expected " + warnings + " warnings but they are " + this.behavior.warnings,pos);
	}
	,__class__: thx_TestAssert
};
var thx_CollectBehavior = function() {
	this.failures = 0;
	this.warnings = 0;
	this.successes = 0;
};
thx_CollectBehavior.__name__ = ["thx","CollectBehavior"];
thx_CollectBehavior.__interfaces__ = [thx_IAssertBehavior];
thx_CollectBehavior.prototype = {
	successes: null
	,warnings: null
	,failures: null
	,success: function(pos) {
		this.successes++;
	}
	,warn: function(message,pos) {
		this.warnings++;
	}
	,fail: function(message,pos) {
		this.failures++;
	}
	,__class__: thx_CollectBehavior
};
var thx__$TestAssert_Sample = { __ename__ : ["thx","_TestAssert","Sample"], __constructs__ : ["None","Some","Rec"] };
thx__$TestAssert_Sample.None = ["None",0];
thx__$TestAssert_Sample.None.__enum__ = thx__$TestAssert_Sample;
thx__$TestAssert_Sample.Some = function(s) { var $x = ["Some",1,s]; $x.__enum__ = thx__$TestAssert_Sample; return $x; };
thx__$TestAssert_Sample.Rec = function(s) { var $x = ["Rec",2,s]; $x.__enum__ = thx__$TestAssert_Sample; return $x; };
var thx_TestBigInt = function() {
};
thx_TestBigInt.__name__ = ["thx","TestBigInt"];
thx_TestBigInt.prototype = {
	testIssue82: function() {
		var s = thx_bigint_Bigs.fromInt(101);
		var b = new thx_bigint_Big(thx_bigint_Bigs.smallToArray(thx_bigint_Bigs.parseBase("100",10).toInt()),false);
		var r = s.subtract(b);
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(1),s.subtract(b)),"expected " + s.toString() + " - " + b.toString() + " to be equal 1 but it is " + r.toString(),{ fileName : "TestBigInt.hx", lineNumber : 15, className : "thx.TestBigInt", methodName : "testIssue82"});
		var s1 = thx_bigint_Bigs.fromInt(101);
		var b1 = thx_bigint_Bigs.fromInt(10);
		b1 = b1.pow(thx_bigint_Bigs.fromInt(2));
		var r1 = s1.subtract(b1);
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(1),s1.subtract(b1)),"expected " + s1.toString() + " - " + b1.toString() + " to be equal 1 but it is " + r1.toString(),{ fileName : "TestBigInt.hx", lineNumber : 21, className : "thx.TestBigInt", methodName : "testIssue82"});
	}
	,testFromInt64: function() {
		var values = [thx_Int64s.minValue,new haxe__$Int64__$_$_$Int64(-1,-1),new haxe__$Int64__$_$_$Int64(0,0),new haxe__$Int64__$_$_$Int64(0,1),thx_Int64s.maxValue];
		var _g = 0;
		while(_g < values.length) {
			var value = values[_g];
			++_g;
			var r = thx_bigint_Bigs.fromInt64(value);
			var i = thx_bigint_Bigs.toInt64(r);
			utest_Assert.isTrue(i.high == value.high && i.low == value.low,"Int64 parsed as " + r.toString() + " and converted to " + haxe__$Int64_Int64_$Impl_$.toString(i) + " but expected " + haxe__$Int64_Int64_$Impl_$.toString(value),{ fileName : "TestBigInt.hx", lineNumber : 29, className : "thx.TestBigInt", methodName : "testFromInt64"});
		}
	}
	,testLcmAndGcd: function() {
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx__$BigInt_BigInt_$Impl_$.lcm(thx_bigint_Bigs.fromInt(21),thx_bigint_Bigs.fromInt(6)),thx_bigint_Bigs.fromInt(42)),null,{ fileName : "TestBigInt.hx", lineNumber : 34, className : "thx.TestBigInt", methodName : "testLcmAndGcd"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx__$BigInt_BigInt_$Impl_$.gcd(thx_bigint_Bigs.fromInt(42),thx_bigint_Bigs.fromInt(56)),thx_bigint_Bigs.fromInt(14)),null,{ fileName : "TestBigInt.hx", lineNumber : 35, className : "thx.TestBigInt", methodName : "testLcmAndGcd"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx__$BigInt_BigInt_$Impl_$.gcd(thx_bigint_Bigs.fromInt(0),thx_bigint_Bigs.fromInt(56)),thx_bigint_Bigs.fromInt(56)),null,{ fileName : "TestBigInt.hx", lineNumber : 36, className : "thx.TestBigInt", methodName : "testLcmAndGcd"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx__$BigInt_BigInt_$Impl_$.gcd(thx_bigint_Bigs.fromInt(42),thx_bigint_Bigs.fromInt(0)),thx_bigint_Bigs.fromInt(42)),null,{ fileName : "TestBigInt.hx", lineNumber : 37, className : "thx.TestBigInt", methodName : "testLcmAndGcd"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx__$BigInt_BigInt_$Impl_$.gcd(thx_bigint_Bigs.fromInt(17),thx_bigint_Bigs.fromInt(103)),thx_bigint_Bigs.fromInt(1)),null,{ fileName : "TestBigInt.hx", lineNumber : 38, className : "thx.TestBigInt", methodName : "testLcmAndGcd"});
	}
	,testIncrements: function() {
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.zero.isZero(),null,{ fileName : "TestBigInt.hx", lineNumber : 42, className : "thx.TestBigInt", methodName : "testIncrements"});
		var a = thx__$BigInt_BigInt_$Impl_$.zero;
		a = a.add(thx_bigint_Small.one);
		var b = a;
		var v = a;
		a = a.add(thx_bigint_Small.one);
		var c = v;
		a = a.subtract(thx_bigint_Small.one);
		var d = a;
		var v1 = a;
		a = a.subtract(thx_bigint_Small.one);
		var e = v1;
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.zero.isZero(),null,{ fileName : "TestBigInt.hx", lineNumber : 48, className : "thx.TestBigInt", methodName : "testIncrements"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(b,thx_bigint_Bigs.fromInt(1)),null,{ fileName : "TestBigInt.hx", lineNumber : 49, className : "thx.TestBigInt", methodName : "testIncrements"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(c,thx_bigint_Bigs.fromInt(1)),null,{ fileName : "TestBigInt.hx", lineNumber : 50, className : "thx.TestBigInt", methodName : "testIncrements"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(d,thx_bigint_Bigs.fromInt(1)),null,{ fileName : "TestBigInt.hx", lineNumber : 51, className : "thx.TestBigInt", methodName : "testIncrements"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(e,thx_bigint_Bigs.fromInt(1)),null,{ fileName : "TestBigInt.hx", lineNumber : 52, className : "thx.TestBigInt", methodName : "testIncrements"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(a,thx_bigint_Bigs.fromInt(0)),null,{ fileName : "TestBigInt.hx", lineNumber : 53, className : "thx.TestBigInt", methodName : "testIncrements"});
	}
	,testCanHandleLargeNumbers: function() {
		var tenFactorial = thx_bigint_Bigs.parseBase("3628800",10);
		var hundredFactorial = thx_bigint_Bigs.parseBase("93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000",10);
		var threeToTenThousand = thx_bigint_Bigs.parseBase("16313501853426258743032567291811547168121324535825379939348203261918257308143190787480155630847848309673252045223235795433405582999177203852381479145368112501453192355166224391025423628843556686559659645012014177448275529990373274425446425751235537341867387607813619937225616872862016504805593174059909520461668500663118926911571773452255850626968526251879139867085080472539640933730243410152186914328917354576854457274195562218013337745628502470673059426999114202540773175988199842487276183685299388927825296786440252999444785694183675323521704432195785806270123388382931770198990841300861506996108944782065015163410344894945809337689156807686673462563038164792190665340124344133980763205594364754963451564072340502606377790585114123814919001637177034457385019939060232925194471114235892978565322415628344142184842892083466227875760501276009801530703037525839157893875741192497705300469691062454369926795975456340236777734354667139072601574969834312769653557184396147587071260443947944862235744459711204473062937764153770030210332183635531818173456618022745975055313212598514429587545547296534609597194836036546870491771927625214352957503454948403635822345728774885175809500158451837389413798095329711993092101417428406774326126450005467888736546254948658602484494535938888656542746977424368385335496083164921318601934977025095780370104307980276356857350349205866078371806065542393536101673402017980951598946980664330391505845803674248348878071010412918667335823849899623486215050304052577789848512410263834811719236949311423411823585316405085306164936671137456985394285677324771775046050970865520893596151687017153855755197348199659070192954771308347627111052471134476325986362838585959552209645382089055182871854866744633737533217524880118401787595094060855717010144087136495532418544241489437080074716158404895914136451802032446707961058757633345691696743293869623745410870051851590672859347061212573446572045088465460616826082579731686004585218284333452396157730036306379421822435818001505905203918209206969662326706952623512427380240468784114535101496733983401240219840048956733689309620321613793757156727562461651933397540266795963865921590913322060572673349849253303397874242381960775337182730037783698708748781738419747698880321601186310506332869704931303076839444790968339306301273371014087248060946851793697973114432706759288546077622831002526800554849696867710280945946603669593797354642136622231192695027321229511912952940320879763123151760555959496961163141455688278842949587288399100273691880018774147568892650186152065335219113072582417699616901995530249937735219099786758954892534365835235843156112799728164123461219817343904782402517111603206575330527850752564642995318064985900815557979945885931124351303252811255254295797082281946658798705979077492469849644183166585950844953164726896146168297808178398470451561320526180542310840744843107469368959707726836608471817060598771730170755446473440774031371227437651048421606224757527085958515947273151027400662948161111284777828103531499488913672800783167888051177155427285103861736658069404797695900758820465238673970882660162285107599221418743657006872537842677883708807515850397691812433880561772652364847297019508025848964833883225165668986935081274596293983121864046277268590401580209059988500511262470167150495261908136688693861324081559046336288963037090312033522400722360882494928182809075406914319957044927504420797278117837677431446979085756432990753582588102440240611039084516401089948868433353748444104639734074519165067632941419347985624435567342072815910754484123812917487312938280670403228188813003978384081332242484646571417574404852962675165616101527367425654869508712001788393846171780457455963045764943565964887518396481296159902471996735508854292964536796779404377230965723361625182030798297734785854606060323419091646711138678490928840107449923456834763763114226000770316931243666699425694828181155048843161380832067845480569758457751090640996007242018255400627276908188082601795520167054701327802366989747082835481105543878446889896230696091881643547476154998574015907396059478684978574180486798918438643164618541351689258379042326487669479733384712996754251703808037828636599654447727795924596382283226723503386540591321268603222892807562509801015765174359627788357881606366119032951829868274617539946921221330284257027058653162292482686679275266764009881985590648534544939224296689791195355783205968492422636277656735338488299104238060289209390654467316291591219712866052661347026855261289381236881063068219249064767086495184176816629077103667131505064964190910450196502178972477361881300608688593782509793781457170396897496908861893034634895715117114601514654381347139092345833472226493656930996045016355808162984965203661519182202145414866559662218796964329217241498105206552200001",10);
		var factorial = null;
		factorial = function(n) {
			if(thx__$BigInt_BigInt_$Impl_$.equals(n,thx_bigint_Bigs.fromInt(0)) || thx__$BigInt_BigInt_$Impl_$.equals(n,thx_bigint_Bigs.fromInt(1))) {
				return thx_bigint_Bigs.fromInt(1);
			}
			return factorial(n.prev()).multiply(n);
		};
		var factorial1 = factorial;
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(factorial1(thx_bigint_Bigs.fromInt(10)),tenFactorial),null,{ fileName : "TestBigInt.hx", lineNumber : 67, className : "thx.TestBigInt", methodName : "testCanHandleLargeNumbers"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(factorial1(thx_bigint_Bigs.fromInt(100)),hundredFactorial),null,{ fileName : "TestBigInt.hx", lineNumber : 68, className : "thx.TestBigInt", methodName : "testCanHandleLargeNumbers"});
		var pow = thx_bigint_Bigs.fromInt(3).pow(thx_bigint_Bigs.fromInt(10000));
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(pow,threeToTenThousand),"expected " + thx_bigint_Bigs.fromInt(3).toString() + ".pow(10000) == " + threeToTenThousand.toString() + " but got " + pow.toString(),{ fileName : "TestBigInt.hx", lineNumber : 73, className : "thx.TestBigInt", methodName : "testCanHandleLargeNumbers"});
	}
	,testIsImmutable: function() {
		var n = thx_bigint_Bigs.fromInt(14930352);
		n.add(thx_bigint_Bigs.fromInt(9227465));
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(n,thx_bigint_Bigs.fromInt(14930352)),null,{ fileName : "TestBigInt.hx", lineNumber : 83, className : "thx.TestBigInt", methodName : "testIsImmutable"});
		n.subtract(thx_bigint_Bigs.fromInt(123456));
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(n,thx_bigint_Bigs.fromInt(14930352)),null,{ fileName : "TestBigInt.hx", lineNumber : 85, className : "thx.TestBigInt", methodName : "testIsImmutable"});
	}
	,testInts: function() {
		var tests = [1,2,4,8,16,32,64,128,256,512,1024,2048,4096,10000,100000,1000000,10000000];
		var _g = 0;
		while(_g < tests.length) {
			var test = tests[_g];
			++_g;
			var out = thx_bigint_Bigs.fromInt(test);
			utest_Assert.equals(test,out.toInt(),"expected " + test + " but got " + out.toInt(),{ fileName : "TestBigInt.hx", lineNumber : 96, className : "thx.TestBigInt", methodName : "testInts"});
			var out1 = thx_bigint_Bigs.fromInt(-test);
			utest_Assert.equals(-test,out1.toInt(),"expected " + -test + " but got " + out1.toInt(),{ fileName : "TestBigInt.hx", lineNumber : 99, className : "thx.TestBigInt", methodName : "testInts"});
		}
	}
	,testFloats: function() {
		var tests = [0.0,1.0,5.0,1.2e20,1.2e40,1.234e63,5.432e80,0.00001,1.2345e-50];
		var _g = 0;
		while(_g < tests.length) {
			var test = tests[_g];
			++_g;
			var out = thx_bigint_Bigs.fromFloat(test);
			utest_Assert.floatEquals(thx_Floats.roundTo(test,0),out.toFloat(),null,"expected " + thx_Floats.roundTo(test,0) + " but got " + out.toFloat(),{ fileName : "TestBigInt.hx", lineNumber : 108, className : "thx.TestBigInt", methodName : "testFloats"});
			var out1 = thx_bigint_Bigs.fromFloat(-test);
			utest_Assert.floatEquals(thx_Floats.roundTo(-test,0),out1.toFloat(),null,"expected " + thx_Floats.roundTo(-test,0) + " but got " + out1.toFloat(),{ fileName : "TestBigInt.hx", lineNumber : 111, className : "thx.TestBigInt", methodName : "testFloats"});
		}
	}
	,testStrings: function() {
		var tests = ["0","3","20","12345678901234567890","999999999999999999"];
		var _g = 0;
		while(_g < tests.length) {
			var test = tests[_g];
			++_g;
			var out = thx_bigint_Bigs.parseBase(test,10);
			utest_Assert.equals(test,out.toString(),"expected " + test + " but got " + out.toString(),{ fileName : "TestBigInt.hx", lineNumber : 123, className : "thx.TestBigInt", methodName : "testStrings"});
			if(test == "0") {
				continue;
			}
			var out1 = thx_bigint_Bigs.parseBase("-" + test,10);
			utest_Assert.equals("-" + test,out1.toString(),"expected -" + test + " but got " + out1.toString(),{ fileName : "TestBigInt.hx", lineNumber : 129, className : "thx.TestBigInt", methodName : "testStrings"});
		}
	}
	,testEquals: function() {
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(0),thx_bigint_Bigs.fromInt(0)),null,{ fileName : "TestBigInt.hx", lineNumber : 134, className : "thx.TestBigInt", methodName : "testEquals"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(1),thx_bigint_Bigs.fromInt(1)),null,{ fileName : "TestBigInt.hx", lineNumber : 135, className : "thx.TestBigInt", methodName : "testEquals"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("12345678901234567890",10),thx_bigint_Bigs.parseBase("12345678901234567890",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 136, className : "thx.TestBigInt", methodName : "testEquals"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(-1),thx_bigint_Bigs.fromInt(-1)),null,{ fileName : "TestBigInt.hx", lineNumber : 137, className : "thx.TestBigInt", methodName : "testEquals"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("-12345678901234567890",10),thx_bigint_Bigs.parseBase("-12345678901234567890",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 138, className : "thx.TestBigInt", methodName : "testEquals"});
		utest_Assert.isFalse(thx__$BigInt_BigInt_$Impl_$.notEquals(thx_bigint_Bigs.fromInt(0),thx_bigint_Bigs.fromInt(0)),null,{ fileName : "TestBigInt.hx", lineNumber : 140, className : "thx.TestBigInt", methodName : "testEquals"});
		utest_Assert.isFalse(thx__$BigInt_BigInt_$Impl_$.notEquals(thx_bigint_Bigs.fromInt(1),thx_bigint_Bigs.fromInt(1)),null,{ fileName : "TestBigInt.hx", lineNumber : 141, className : "thx.TestBigInt", methodName : "testEquals"});
		utest_Assert.isFalse(thx__$BigInt_BigInt_$Impl_$.notEquals(thx_bigint_Bigs.parseBase("12345678901234567890",10),thx_bigint_Bigs.parseBase("12345678901234567890",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 142, className : "thx.TestBigInt", methodName : "testEquals"});
		utest_Assert.isFalse(thx__$BigInt_BigInt_$Impl_$.notEquals(thx_bigint_Bigs.fromInt(-1),thx_bigint_Bigs.fromInt(-1)),null,{ fileName : "TestBigInt.hx", lineNumber : 143, className : "thx.TestBigInt", methodName : "testEquals"});
		utest_Assert.isFalse(thx__$BigInt_BigInt_$Impl_$.notEquals(thx_bigint_Bigs.parseBase("-12345678901234567890",10),thx_bigint_Bigs.parseBase("-12345678901234567890",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 144, className : "thx.TestBigInt", methodName : "testEquals"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.notEquals(thx_bigint_Bigs.parseBase("-12345678901234567890",10),thx_bigint_Bigs.parseBase("12345678901234567890",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 145, className : "thx.TestBigInt", methodName : "testEquals"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.notEquals(thx_bigint_Bigs.fromInt(0),thx_bigint_Bigs.fromInt(1)),null,{ fileName : "TestBigInt.hx", lineNumber : 147, className : "thx.TestBigInt", methodName : "testEquals"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.notEquals(thx_bigint_Bigs.fromInt(1),thx_bigint_Bigs.fromInt(2)),null,{ fileName : "TestBigInt.hx", lineNumber : 148, className : "thx.TestBigInt", methodName : "testEquals"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.notEquals(thx_bigint_Bigs.parseBase("12345678901234567890",10),thx_bigint_Bigs.parseBase("12345678901234567891",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 149, className : "thx.TestBigInt", methodName : "testEquals"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.notEquals(thx_bigint_Bigs.fromInt(-1),thx_bigint_Bigs.fromInt(-2)),null,{ fileName : "TestBigInt.hx", lineNumber : 150, className : "thx.TestBigInt", methodName : "testEquals"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.notEquals(thx_bigint_Bigs.parseBase("-12345678901234567890",10),thx_bigint_Bigs.parseBase("-12345678901234567891",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 151, className : "thx.TestBigInt", methodName : "testEquals"});
		utest_Assert.isFalse(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(0),thx_bigint_Bigs.fromInt(1)),null,{ fileName : "TestBigInt.hx", lineNumber : 153, className : "thx.TestBigInt", methodName : "testEquals"});
		utest_Assert.isFalse(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(1),thx_bigint_Bigs.fromInt(2)),null,{ fileName : "TestBigInt.hx", lineNumber : 154, className : "thx.TestBigInt", methodName : "testEquals"});
		utest_Assert.isFalse(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("12345678901234567890",10),thx_bigint_Bigs.parseBase("12345678901234567891",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 155, className : "thx.TestBigInt", methodName : "testEquals"});
		utest_Assert.isFalse(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(-1),thx_bigint_Bigs.fromInt(-2)),null,{ fileName : "TestBigInt.hx", lineNumber : 156, className : "thx.TestBigInt", methodName : "testEquals"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.notEquals(thx_bigint_Bigs.fromInt(2),thx_bigint_Bigs.fromInt(-2)),null,{ fileName : "TestBigInt.hx", lineNumber : 157, className : "thx.TestBigInt", methodName : "testEquals"});
		utest_Assert.isFalse(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(2),thx_bigint_Bigs.fromInt(-2)),null,{ fileName : "TestBigInt.hx", lineNumber : 158, className : "thx.TestBigInt", methodName : "testEquals"});
		utest_Assert.isFalse(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("-12345678901234567890",10),thx_bigint_Bigs.parseBase("-12345678901234567891",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 159, className : "thx.TestBigInt", methodName : "testEquals"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(0),thx_bigint_Bigs.parseBase("-0",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 161, className : "thx.TestBigInt", methodName : "testEquals"});
	}
	,testIgnoreLeadingZeros: function() {
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("0000000000",10),thx_bigint_Bigs.parseBase("0",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 165, className : "thx.TestBigInt", methodName : "testIgnoreLeadingZeros"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("000000000000023",10),thx_bigint_Bigs.fromInt(23)),null,{ fileName : "TestBigInt.hx", lineNumber : 166, className : "thx.TestBigInt", methodName : "testIgnoreLeadingZeros"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("-0000000000000000000000123",10),thx_bigint_Bigs.fromInt(-123)),"expected " + thx_bigint_Bigs.parseBase("-0000000000000000000000123",10).toString() + " == " + thx_bigint_Bigs.fromInt(-123).toString() + " to be true",{ fileName : "TestBigInt.hx", lineNumber : 167, className : "thx.TestBigInt", methodName : "testIgnoreLeadingZeros"});
	}
	,testNumbersShouldBeTheSameWhenConstructedDifferently: function() {
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("12e5",10),thx_bigint_Bigs.fromFloat(12e5)),"expected " + thx_bigint_Bigs.parseBase("12e5",10).toString() + " == " + thx_bigint_Bigs.fromFloat(12e5).toString() + " to be true",{ fileName : "TestBigInt.hx", lineNumber : 171, className : "thx.TestBigInt", methodName : "testNumbersShouldBeTheSameWhenConstructedDifferently"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromFloat(12e5),thx_bigint_Bigs.parseBase("1200000",10)),"expected " + thx_bigint_Bigs.fromFloat(12e5).toString() + " == " + thx_bigint_Bigs.parseBase("1200000",10).toString() + " to be true",{ fileName : "TestBigInt.hx", lineNumber : 172, className : "thx.TestBigInt", methodName : "testNumbersShouldBeTheSameWhenConstructedDifferently"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("1",10),thx_bigint_Bigs.fromInt(1)),"expected " + thx_bigint_Bigs.parseBase("1",10).toString() + " == " + thx_bigint_Bigs.fromInt(1).toString() + " to be true",{ fileName : "TestBigInt.hx", lineNumber : 173, className : "thx.TestBigInt", methodName : "testNumbersShouldBeTheSameWhenConstructedDifferently"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(12345),thx_bigint_Bigs.parseBase("12345",10)),"expected " + thx_bigint_Bigs.fromInt(12345).toString() + " == " + thx_bigint_Bigs.parseBase("12345",10).toString() + " to be true",{ fileName : "TestBigInt.hx", lineNumber : 174, className : "thx.TestBigInt", methodName : "testNumbersShouldBeTheSameWhenConstructedDifferently"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("9876543210",10),thx_bigint_Bigs.fromFloat(9876543210.0)),"expected " + thx_bigint_Bigs.parseBase("9876543210",10).toString() + " == " + thx_bigint_Bigs.fromFloat(9876543210.0).toString() + " to be true",{ fileName : "TestBigInt.hx", lineNumber : 175, className : "thx.TestBigInt", methodName : "testNumbersShouldBeTheSameWhenConstructedDifferently"});
	}
	,testFibonacci: function() {
		var fibs = [thx_bigint_Bigs.parseBase("1",10),thx_bigint_Bigs.parseBase("1",10),thx_bigint_Bigs.parseBase("2",10),thx_bigint_Bigs.parseBase("3",10),thx_bigint_Bigs.parseBase("5",10),thx_bigint_Bigs.parseBase("8",10),thx_bigint_Bigs.parseBase("13",10),thx_bigint_Bigs.parseBase("21",10),thx_bigint_Bigs.parseBase("34",10),thx_bigint_Bigs.parseBase("55",10),thx_bigint_Bigs.parseBase("89",10),thx_bigint_Bigs.parseBase("144",10),thx_bigint_Bigs.parseBase("233",10),thx_bigint_Bigs.parseBase("377",10),thx_bigint_Bigs.parseBase("610",10),thx_bigint_Bigs.parseBase("987",10),thx_bigint_Bigs.parseBase("1597",10),thx_bigint_Bigs.parseBase("2584",10),thx_bigint_Bigs.parseBase("4181",10),thx_bigint_Bigs.parseBase("6765",10),thx_bigint_Bigs.parseBase("10946",10),thx_bigint_Bigs.parseBase("17711",10),thx_bigint_Bigs.parseBase("28657",10),thx_bigint_Bigs.parseBase("46368",10),thx_bigint_Bigs.parseBase("75025",10),thx_bigint_Bigs.parseBase("121393",10),thx_bigint_Bigs.parseBase("196418",10),thx_bigint_Bigs.parseBase("317811",10),thx_bigint_Bigs.parseBase("514229",10),thx_bigint_Bigs.parseBase("832040",10),thx_bigint_Bigs.parseBase("1346269",10),thx_bigint_Bigs.parseBase("2178309",10),thx_bigint_Bigs.parseBase("3524578",10),thx_bigint_Bigs.parseBase("5702887",10),thx_bigint_Bigs.parseBase("9227465",10),thx_bigint_Bigs.parseBase("14930352",10),thx_bigint_Bigs.parseBase("24157817",10),thx_bigint_Bigs.parseBase("39088169",10),thx_bigint_Bigs.parseBase("63245986",10),thx_bigint_Bigs.parseBase("102334155",10),thx_bigint_Bigs.parseBase("165580141",10),thx_bigint_Bigs.parseBase("267914296",10),thx_bigint_Bigs.parseBase("433494437",10),thx_bigint_Bigs.parseBase("701408733",10),thx_bigint_Bigs.parseBase("1134903170",10),thx_bigint_Bigs.parseBase("1836311903",10),thx_bigint_Bigs.parseBase("2971215073",10),thx_bigint_Bigs.parseBase("4807526976",10),thx_bigint_Bigs.parseBase("7778742049",10),thx_bigint_Bigs.parseBase("12586269025",10)];
		var number = thx_bigint_Bigs.fromInt(1);
		var last = thx_bigint_Bigs.fromInt(1);
		var _g = 2;
		while(_g < 50) {
			var i = _g++;
			number = number.add(last);
			last = number.subtract(last);
			utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(number,fibs[i]),null,{ fileName : "TestBigInt.hx", lineNumber : 186, className : "thx.TestBigInt", methodName : "testFibonacci"});
		}
	}
	,testCarriesOverCorrectly: function() {
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("9007199254740991",10).add(thx_bigint_Bigs.fromInt(1)),thx_bigint_Bigs.parseBase("9007199254740992",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 191, className : "thx.TestBigInt", methodName : "testCarriesOverCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("999999999999999999999000000000000000000000",10).add(thx_bigint_Bigs.parseBase("1000000000000000000000",10)),thx_bigint_Bigs.parseBase("1e42",10)),"expected " + thx_bigint_Bigs.parseBase("999999999999999999999000000000000000000000",10).toString() + " + " + thx_bigint_Bigs.parseBase("1000000000000000000000",10).toString() + " == " + thx_bigint_Bigs.parseBase("1e42",10).toString() + " but is " + thx_bigint_Bigs.parseBase("999999999999999999999000000000000000000000",10).add(thx_bigint_Bigs.parseBase("1000000000000000000000",10)).toString(),{ fileName : "TestBigInt.hx", lineNumber : 192, className : "thx.TestBigInt", methodName : "testCarriesOverCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("1e20",10).add(thx_bigint_Bigs.parseBase("9007199254740972",10)),thx_bigint_Bigs.parseBase("100009007199254740972",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 195, className : "thx.TestBigInt", methodName : "testCarriesOverCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("-9007199254740983",10).add(thx_bigint_Bigs.parseBase("-9999999999999998",10)),thx_bigint_Bigs.parseBase("-19007199254740981",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 196, className : "thx.TestBigInt", methodName : "testCarriesOverCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("100000000000000000000000000000000000",10).subtract(thx_bigint_Bigs.parseBase("999999999999999999",10)),thx_bigint_Bigs.parseBase("99999999999999999000000000000000001",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 197, className : "thx.TestBigInt", methodName : "testCarriesOverCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("50000005000000",10).multiply(thx_bigint_Bigs.parseBase("10000001",10)),thx_bigint_Bigs.parseBase("500000100000005000000",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 199, className : "thx.TestBigInt", methodName : "testCarriesOverCorrectly"});
	}
	,testMisc: function() {
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("10",10).add(thx_bigint_Bigs.fromInt(10)),thx_bigint_Bigs.parseBase("20",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 203, className : "thx.TestBigInt", methodName : "testMisc"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("-10000000000000000",10).add(thx_bigint_Bigs.parseBase("0",10)),thx_bigint_Bigs.parseBase("-10000000000000000",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 204, className : "thx.TestBigInt", methodName : "testMisc"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("0",10).add(thx_bigint_Bigs.parseBase("10000000000000000",10)),thx_bigint_Bigs.parseBase("10000000000000000",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 205, className : "thx.TestBigInt", methodName : "testMisc"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(9999999).add(thx_bigint_Bigs.fromInt(1)),thx_bigint_Bigs.fromInt(10000000)),"expected " + thx_bigint_Bigs.fromInt(9999999).toString() + " + " + thx_bigint_Bigs.fromInt(1).toString() + " == " + thx_bigint_Bigs.fromInt(10000000).toString() + " but got " + thx_bigint_Bigs.fromInt(9999999).add(thx_bigint_Bigs.fromInt(1)).toString(),{ fileName : "TestBigInt.hx", lineNumber : 206, className : "thx.TestBigInt", methodName : "testMisc"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(10000000).subtract(thx_bigint_Bigs.fromInt(1)),thx_bigint_Bigs.fromInt(9999999)),null,{ fileName : "TestBigInt.hx", lineNumber : 207, className : "thx.TestBigInt", methodName : "testMisc"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("-1000000000000000000000000000000000001",10).add(thx_bigint_Bigs.parseBase("1000000000000000000000000000000000000",10)),thx_bigint_Bigs.fromInt(-1)),null,{ fileName : "TestBigInt.hx", lineNumber : 208, className : "thx.TestBigInt", methodName : "testMisc"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("100000000000000000002222222222222222222",10).subtract(thx_bigint_Bigs.parseBase("100000000000000000001111111111111111111",10)),thx_bigint_Bigs.parseBase("1111111111111111111",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 209, className : "thx.TestBigInt", methodName : "testMisc"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("1",10).add(thx_bigint_Bigs.parseBase("0",10)),thx_bigint_Bigs.parseBase("1",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 210, className : "thx.TestBigInt", methodName : "testMisc"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("10",10).add(thx_bigint_Bigs.parseBase("10000000000000000",10)),thx_bigint_Bigs.parseBase("10000000000000010",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 211, className : "thx.TestBigInt", methodName : "testMisc"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("10000000000000000",10).add(thx_bigint_Bigs.parseBase("10",10)),thx_bigint_Bigs.parseBase("10000000000000010",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 212, className : "thx.TestBigInt", methodName : "testMisc"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("10000000000000000",10).add(thx_bigint_Bigs.parseBase("10000000000000000",10)),thx_bigint_Bigs.parseBase("20000000000000000",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 213, className : "thx.TestBigInt", methodName : "testMisc"});
	}
	,testMultiplyHandlesSignsCorectly: function() {
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(100).multiply(thx_bigint_Bigs.fromInt(100)),thx_bigint_Bigs.fromInt(10000)),null,{ fileName : "TestBigInt.hx", lineNumber : 217, className : "thx.TestBigInt", methodName : "testMultiplyHandlesSignsCorectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(100).multiply(thx_bigint_Bigs.fromInt(-100)),thx_bigint_Bigs.fromInt(-10000)),null,{ fileName : "TestBigInt.hx", lineNumber : 218, className : "thx.TestBigInt", methodName : "testMultiplyHandlesSignsCorectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(-100).multiply(thx_bigint_Bigs.fromInt(100)),thx_bigint_Bigs.fromInt(-10000)),null,{ fileName : "TestBigInt.hx", lineNumber : 219, className : "thx.TestBigInt", methodName : "testMultiplyHandlesSignsCorectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(-100).multiply(thx_bigint_Bigs.fromInt(-100)),thx_bigint_Bigs.fromInt(10000)),null,{ fileName : "TestBigInt.hx", lineNumber : 220, className : "thx.TestBigInt", methodName : "testMultiplyHandlesSignsCorectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(13579).multiply(thx_bigint_Bigs.parseBase("163500573666152634716420931676158",10)),thx_bigint_Bigs.parseBase("2220174289812686626814279831230549482",10)),"expected " + thx_bigint_Bigs.fromInt(13579).toString() + " * " + thx_bigint_Bigs.parseBase("163500573666152634716420931676158",10).toString() + " == " + thx_bigint_Bigs.parseBase("2220174289812686626814279831230549482",10).toString() + " but got " + thx_bigint_Bigs.fromInt(13579).multiply(thx_bigint_Bigs.parseBase("163500573666152634716420931676158",10)).toString(),{ fileName : "TestBigInt.hx", lineNumber : 222, className : "thx.TestBigInt", methodName : "testMultiplyHandlesSignsCorectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(13579).multiply(thx_bigint_Bigs.parseBase("-163500573666152634716420931676158",10)),thx_bigint_Bigs.parseBase("-2220174289812686626814279831230549482",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 227, className : "thx.TestBigInt", methodName : "testMultiplyHandlesSignsCorectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(-13579).multiply(thx_bigint_Bigs.parseBase("163500573666152634716420931676158",10)),thx_bigint_Bigs.parseBase("-2220174289812686626814279831230549482",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 228, className : "thx.TestBigInt", methodName : "testMultiplyHandlesSignsCorectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(-13579).multiply(thx_bigint_Bigs.parseBase("-163500573666152634716420931676158",10)),thx_bigint_Bigs.parseBase("2220174289812686626814279831230549482",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 229, className : "thx.TestBigInt", methodName : "testMultiplyHandlesSignsCorectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("163500573666152634716420931676158",10).multiply(thx_bigint_Bigs.fromInt(13579)),thx_bigint_Bigs.parseBase("2220174289812686626814279831230549482",10)),"expected " + thx_bigint_Bigs.parseBase("163500573666152634716420931676158",10).toString() + " * 13579 == " + thx_bigint_Bigs.parseBase("2220174289812686626814279831230549482",10).toString() + " but got " + thx_bigint_Bigs.parseBase("163500573666152634716420931676158",10).multiply(thx_bigint_Bigs.fromInt(13579)).toString(),{ fileName : "TestBigInt.hx", lineNumber : 230, className : "thx.TestBigInt", methodName : "testMultiplyHandlesSignsCorectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("163500573666152634716420931676158",10).multiply(thx_bigint_Bigs.fromInt(-13579)),thx_bigint_Bigs.parseBase("-2220174289812686626814279831230549482",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 234, className : "thx.TestBigInt", methodName : "testMultiplyHandlesSignsCorectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("-163500573666152634716420931676158",10).multiply(thx_bigint_Bigs.fromInt(13579)),thx_bigint_Bigs.parseBase("-2220174289812686626814279831230549482",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 235, className : "thx.TestBigInt", methodName : "testMultiplyHandlesSignsCorectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("-163500573666152634716420931676158",10).multiply(thx_bigint_Bigs.fromInt(-13579)),thx_bigint_Bigs.parseBase("2220174289812686626814279831230549482",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 236, className : "thx.TestBigInt", methodName : "testMultiplyHandlesSignsCorectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("163500573666152634716420931676158",10).multiply(thx_bigint_Bigs.fromInt(-1)),thx_bigint_Bigs.parseBase("-163500573666152634716420931676158",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 237, className : "thx.TestBigInt", methodName : "testMultiplyHandlesSignsCorectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("1234567890987654321",10).multiply(thx_bigint_Bigs.parseBase("132435465768798",10)),thx_bigint_Bigs.parseBase("163500573666152634716420931676158",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 238, className : "thx.TestBigInt", methodName : "testMultiplyHandlesSignsCorectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("1234567890987654321",10).multiply(thx_bigint_Bigs.parseBase("-132435465768798",10)),thx_bigint_Bigs.parseBase("-163500573666152634716420931676158",10)),"expected " + thx_bigint_Bigs.parseBase("1234567890987654321",10).toString() + " * " + thx_bigint_Bigs.parseBase("-132435465768798",10).toString() + " == " + thx_bigint_Bigs.parseBase("-163500573666152634716420931676158",10).toString() + " but got " + thx_bigint_Bigs.parseBase("1234567890987654321",10).multiply(thx_bigint_Bigs.parseBase("-132435465768798",10)).toString(),{ fileName : "TestBigInt.hx", lineNumber : 239, className : "thx.TestBigInt", methodName : "testMultiplyHandlesSignsCorectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("-1234567890987654321",10).multiply(thx_bigint_Bigs.parseBase("132435465768798",10)),thx_bigint_Bigs.parseBase("-163500573666152634716420931676158",10)),"expected " + thx_bigint_Bigs.parseBase("-1234567890987654321",10).toString() + " * " + thx_bigint_Bigs.parseBase("132435465768798",10).toString() + " == " + thx_bigint_Bigs.parseBase("-163500573666152634716420931676158",10).toString() + " but got " + thx_bigint_Bigs.parseBase("-1234567890987654321",10).multiply(thx_bigint_Bigs.parseBase("132435465768798",10)).toString(),{ fileName : "TestBigInt.hx", lineNumber : 240, className : "thx.TestBigInt", methodName : "testMultiplyHandlesSignsCorectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("-1234567890987654321",10).multiply(thx_bigint_Bigs.parseBase("-132435465768798",10)),thx_bigint_Bigs.parseBase("163500573666152634716420931676158",10)),"expected " + thx_bigint_Bigs.parseBase("-1234567890987654321",10).toString() + " * " + thx_bigint_Bigs.parseBase("-132435465768798",10).toString() + " == " + thx_bigint_Bigs.parseBase("163500573666152634716420931676158",10).toString() + " but got " + thx_bigint_Bigs.parseBase("-1234567890987654321",10).multiply(thx_bigint_Bigs.parseBase("-132435465768798",10)).toString(),{ fileName : "TestBigInt.hx", lineNumber : 241, className : "thx.TestBigInt", methodName : "testMultiplyHandlesSignsCorectly"});
	}
	,testDivisionBy1IsTheIdentity: function() {
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(1).divide(thx_bigint_Bigs.fromInt(1)),thx_bigint_Bigs.fromInt(1)),null,{ fileName : "TestBigInt.hx", lineNumber : 245, className : "thx.TestBigInt", methodName : "testDivisionBy1IsTheIdentity"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(-1).divide(thx_bigint_Bigs.fromInt(1)),thx_bigint_Bigs.fromInt(-1)),null,{ fileName : "TestBigInt.hx", lineNumber : 246, className : "thx.TestBigInt", methodName : "testDivisionBy1IsTheIdentity"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(1).divide(thx_bigint_Bigs.fromInt(-1)),thx_bigint_Bigs.fromInt(-1)),null,{ fileName : "TestBigInt.hx", lineNumber : 247, className : "thx.TestBigInt", methodName : "testDivisionBy1IsTheIdentity"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(153).divide(thx_bigint_Bigs.fromInt(1)),thx_bigint_Bigs.fromInt(153)),null,{ fileName : "TestBigInt.hx", lineNumber : 248, className : "thx.TestBigInt", methodName : "testDivisionBy1IsTheIdentity"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(-153).divide(thx_bigint_Bigs.fromInt(1)),thx_bigint_Bigs.fromInt(-153)),null,{ fileName : "TestBigInt.hx", lineNumber : 249, className : "thx.TestBigInt", methodName : "testDivisionBy1IsTheIdentity"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("9844190321790980841789",10).divide(thx_bigint_Bigs.fromInt(1)),thx_bigint_Bigs.parseBase("9844190321790980841789",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 250, className : "thx.TestBigInt", methodName : "testDivisionBy1IsTheIdentity"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("-9844190321790980841789",10).divide(thx_bigint_Bigs.fromInt(1)),thx_bigint_Bigs.parseBase("-9844190321790980841789",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 251, className : "thx.TestBigInt", methodName : "testDivisionBy1IsTheIdentity"});
	}
	,testDivisionBySelfIs1: function() {
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(5).divide(thx_bigint_Bigs.fromInt(5)),thx_bigint_Bigs.fromInt(1)),null,{ fileName : "TestBigInt.hx", lineNumber : 255, className : "thx.TestBigInt", methodName : "testDivisionBySelfIs1"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(-5).divide(thx_bigint_Bigs.fromInt(-5)),thx_bigint_Bigs.fromInt(1)),null,{ fileName : "TestBigInt.hx", lineNumber : 256, className : "thx.TestBigInt", methodName : "testDivisionBySelfIs1"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("20194965098495006574",10).divide(thx_bigint_Bigs.parseBase("20194965098495006574",10)),thx_bigint_Bigs.fromInt(1)),null,{ fileName : "TestBigInt.hx", lineNumber : 257, className : "thx.TestBigInt", methodName : "testDivisionBySelfIs1"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("-20194965098495006574",10).divide(thx_bigint_Bigs.parseBase("-20194965098495006574",10)),thx_bigint_Bigs.fromInt(1)),null,{ fileName : "TestBigInt.hx", lineNumber : 258, className : "thx.TestBigInt", methodName : "testDivisionBySelfIs1"});
	}
	,testDivisionOf0Equals0: function() {
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(0).divide(thx_bigint_Bigs.fromInt(1)),thx_bigint_Bigs.fromInt(0)),null,{ fileName : "TestBigInt.hx", lineNumber : 262, className : "thx.TestBigInt", methodName : "testDivisionOf0Equals0"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(0).divide(thx_bigint_Bigs.fromInt(1)),thx_bigint_Bigs.fromInt(0)),null,{ fileName : "TestBigInt.hx", lineNumber : 263, className : "thx.TestBigInt", methodName : "testDivisionOf0Equals0"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(0).divide(thx_bigint_Bigs.parseBase("1234567890987654321",10)),thx_bigint_Bigs.fromInt(0)),null,{ fileName : "TestBigInt.hx", lineNumber : 264, className : "thx.TestBigInt", methodName : "testDivisionOf0Equals0"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(0).divide(thx_bigint_Bigs.parseBase("-1234567890987654321",10)),thx_bigint_Bigs.fromInt(0)),null,{ fileName : "TestBigInt.hx", lineNumber : 265, className : "thx.TestBigInt", methodName : "testDivisionOf0Equals0"});
	}
	,testModulo0ThrowsError: function() {
		utest_Assert.raises(function() {
			thx_bigint_Bigs.fromInt(0).modulo(thx_bigint_Bigs.fromInt(0));
		},thx_Error,null,null,{ fileName : "TestBigInt.hx", lineNumber : 269, className : "thx.TestBigInt", methodName : "testModulo0ThrowsError"});
		utest_Assert.raises(function() {
			thx_bigint_Bigs.fromInt(0).modulo(thx_bigint_Bigs.fromInt(0));
		},thx_Error,null,null,{ fileName : "TestBigInt.hx", lineNumber : 270, className : "thx.TestBigInt", methodName : "testModulo0ThrowsError"});
		utest_Assert.raises(function() {
			thx_bigint_Bigs.fromInt(5).modulo(thx_bigint_Bigs.fromInt(0));
		},thx_Error,null,null,{ fileName : "TestBigInt.hx", lineNumber : 271, className : "thx.TestBigInt", methodName : "testModulo0ThrowsError"});
		utest_Assert.raises(function() {
			thx_bigint_Bigs.fromInt(-5).modulo(thx_bigint_Bigs.fromInt(0));
		},thx_Error,null,null,{ fileName : "TestBigInt.hx", lineNumber : 272, className : "thx.TestBigInt", methodName : "testModulo0ThrowsError"});
		utest_Assert.raises(function() {
			thx_bigint_Bigs.parseBase("9549841598749874951041",10).modulo(thx_bigint_Bigs.fromInt(0));
		},thx_Error,null,null,{ fileName : "TestBigInt.hx", lineNumber : 273, className : "thx.TestBigInt", methodName : "testModulo0ThrowsError"});
		utest_Assert.raises(function() {
			thx_bigint_Bigs.parseBase("-20964918940987496110974948",10).modulo(thx_bigint_Bigs.fromInt(0));
		},thx_Error,null,null,{ fileName : "TestBigInt.hx", lineNumber : 274, className : "thx.TestBigInt", methodName : "testModulo0ThrowsError"});
	}
	,testModuloHandlesSignsCorrectly: function() {
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(124234233).modulo(thx_bigint_Bigs.fromInt(2)),thx_bigint_Bigs.fromInt(1)),null,{ fileName : "TestBigInt.hx", lineNumber : 278, className : "thx.TestBigInt", methodName : "testModuloHandlesSignsCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(124234233).modulo(thx_bigint_Bigs.fromInt(-2)),thx_bigint_Bigs.fromInt(1)),null,{ fileName : "TestBigInt.hx", lineNumber : 279, className : "thx.TestBigInt", methodName : "testModuloHandlesSignsCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(-124234233).modulo(thx_bigint_Bigs.fromInt(2)),thx_bigint_Bigs.fromInt(-1)),null,{ fileName : "TestBigInt.hx", lineNumber : 280, className : "thx.TestBigInt", methodName : "testModuloHandlesSignsCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(-124234233).modulo(thx_bigint_Bigs.fromInt(-2)),thx_bigint_Bigs.fromInt(-1)),null,{ fileName : "TestBigInt.hx", lineNumber : 281, className : "thx.TestBigInt", methodName : "testModuloHandlesSignsCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(2).modulo(thx_bigint_Bigs.fromInt(-1243233)),thx_bigint_Bigs.fromInt(2)),"excpected " + thx_bigint_Bigs.fromInt(2).toString() + " % " + thx_bigint_Bigs.fromInt(-1243233).toString() + " == 2 but got " + thx_bigint_Bigs.fromInt(2).modulo(thx_bigint_Bigs.fromInt(-1243233)).toString(),{ fileName : "TestBigInt.hx", lineNumber : 282, className : "thx.TestBigInt", methodName : "testModuloHandlesSignsCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(-2).modulo(thx_bigint_Bigs.fromInt(-1243233)),thx_bigint_Bigs.fromInt(-2)),"excpected " + thx_bigint_Bigs.fromInt(-2).toString() + " % " + thx_bigint_Bigs.fromInt(-1243233).toString() + " == -2 but got " + thx_bigint_Bigs.fromInt(-2).modulo(thx_bigint_Bigs.fromInt(-1243233)).toString(),{ fileName : "TestBigInt.hx", lineNumber : 283, className : "thx.TestBigInt", methodName : "testModuloHandlesSignsCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("786456456335437356436",10).modulo(thx_bigint_Bigs.parseBase("-5423424653",10)),thx_bigint_Bigs.parseBase("2663036842",10)),"expected " + thx_bigint_Bigs.parseBase("786456456335437356436",10).toString() + " % " + thx_bigint_Bigs.parseBase("-5423424653",10).toString() + " == " + thx_bigint_Bigs.parseBase("2663036842",10).toString() + " but got " + thx_bigint_Bigs.parseBase("786456456335437356436",10).modulo(thx_bigint_Bigs.parseBase("-5423424653",10)).toString(),{ fileName : "TestBigInt.hx", lineNumber : 284, className : "thx.TestBigInt", methodName : "testModuloHandlesSignsCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("93453764643534523",10).modulo(thx_bigint_Bigs.fromInt(-2342)),thx_bigint_Bigs.fromInt(1119)),null,{ fileName : "TestBigInt.hx", lineNumber : 285, className : "thx.TestBigInt", methodName : "testModuloHandlesSignsCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(-32542543).modulo(thx_bigint_Bigs.fromInt(100000000)),thx_bigint_Bigs.fromInt(-32542543)),null,{ fileName : "TestBigInt.hx", lineNumber : 286, className : "thx.TestBigInt", methodName : "testModuloHandlesSignsCorrectly"});
	}
	,testPrevNext: function() {
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(546).prev(),thx_bigint_Bigs.fromInt(545)),"expected " + thx_bigint_Bigs.fromInt(546).toString() + ".prev() == 545 but got " + thx_bigint_Bigs.fromInt(546).prev().toString(),{ fileName : "TestBigInt.hx", lineNumber : 290, className : "thx.TestBigInt", methodName : "testPrevNext"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(1).prev(),thx_bigint_Bigs.fromInt(0)),null,{ fileName : "TestBigInt.hx", lineNumber : 291, className : "thx.TestBigInt", methodName : "testPrevNext"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(0).prev(),thx_bigint_Bigs.fromInt(-1)),null,{ fileName : "TestBigInt.hx", lineNumber : 292, className : "thx.TestBigInt", methodName : "testPrevNext"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(-1).prev(),thx_bigint_Bigs.fromInt(-2)),"expected " + thx_bigint_Bigs.fromInt(-1).toString() + ".prev() == -2 but got " + thx_bigint_Bigs.fromInt(-1).prev().toString(),{ fileName : "TestBigInt.hx", lineNumber : 293, className : "thx.TestBigInt", methodName : "testPrevNext"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(-1987).prev(),thx_bigint_Bigs.fromInt(-1988)),null,{ fileName : "TestBigInt.hx", lineNumber : 294, className : "thx.TestBigInt", methodName : "testPrevNext"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(546).next(),thx_bigint_Bigs.fromInt(547)),null,{ fileName : "TestBigInt.hx", lineNumber : 296, className : "thx.TestBigInt", methodName : "testPrevNext"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(1).next(),thx_bigint_Bigs.fromInt(2)),null,{ fileName : "TestBigInt.hx", lineNumber : 297, className : "thx.TestBigInt", methodName : "testPrevNext"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(0).next(),thx_bigint_Bigs.fromInt(1)),null,{ fileName : "TestBigInt.hx", lineNumber : 298, className : "thx.TestBigInt", methodName : "testPrevNext"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(-1).next(),thx_bigint_Bigs.fromInt(0)),null,{ fileName : "TestBigInt.hx", lineNumber : 299, className : "thx.TestBigInt", methodName : "testPrevNext"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(-1987).next(),thx_bigint_Bigs.fromInt(-1986)),null,{ fileName : "TestBigInt.hx", lineNumber : 300, className : "thx.TestBigInt", methodName : "testPrevNext"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(0).next(),thx_bigint_Bigs.fromInt(1)),null,{ fileName : "TestBigInt.hx", lineNumber : 302, className : "thx.TestBigInt", methodName : "testPrevNext"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(-1).next(),thx_bigint_Bigs.fromInt(0)),null,{ fileName : "TestBigInt.hx", lineNumber : 303, className : "thx.TestBigInt", methodName : "testPrevNext"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(34).next(),thx_bigint_Bigs.fromInt(35)),null,{ fileName : "TestBigInt.hx", lineNumber : 304, className : "thx.TestBigInt", methodName : "testPrevNext"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("9007199254740992",10).next(),thx_bigint_Bigs.parseBase("9007199254740993",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 305, className : "thx.TestBigInt", methodName : "testPrevNext"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("-9007199254740992",10).next(),thx_bigint_Bigs.parseBase("-9007199254740991",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 306, className : "thx.TestBigInt", methodName : "testPrevNext"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("9007199254740992999",10).next(),thx_bigint_Bigs.parseBase("9007199254740993000",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 307, className : "thx.TestBigInt", methodName : "testPrevNext"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("9007199254740991",10).next(),thx_bigint_Bigs.parseBase("9007199254740992",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 308, className : "thx.TestBigInt", methodName : "testPrevNext"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(0).prev(),thx_bigint_Bigs.fromInt(-1)),null,{ fileName : "TestBigInt.hx", lineNumber : 310, className : "thx.TestBigInt", methodName : "testPrevNext"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(-1).prev(),thx_bigint_Bigs.fromInt(-2)),null,{ fileName : "TestBigInt.hx", lineNumber : 311, className : "thx.TestBigInt", methodName : "testPrevNext"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(34).prev(),thx_bigint_Bigs.fromInt(33)),null,{ fileName : "TestBigInt.hx", lineNumber : 312, className : "thx.TestBigInt", methodName : "testPrevNext"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("9007199254740992",10).prev(),thx_bigint_Bigs.parseBase("9007199254740991",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 313, className : "thx.TestBigInt", methodName : "testPrevNext"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("-9007199254740992",10).prev(),thx_bigint_Bigs.parseBase("-9007199254740993",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 314, className : "thx.TestBigInt", methodName : "testPrevNext"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("9007199254740992999",10).prev(),thx_bigint_Bigs.parseBase("9007199254740992998",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 315, className : "thx.TestBigInt", methodName : "testPrevNext"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("-9007199254740991",10).prev(),thx_bigint_Bigs.parseBase("-9007199254740992",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 316, className : "thx.TestBigInt", methodName : "testPrevNext"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("109874981950949849811049",10).prev(),thx_bigint_Bigs.parseBase("109874981950949849811048",10)),"expected " + thx_bigint_Bigs.parseBase("109874981950949849811049",10).prev().toString() + " == " + thx_bigint_Bigs.parseBase("109874981950949849811048",10).toString(),{ fileName : "TestBigInt.hx", lineNumber : 318, className : "thx.TestBigInt", methodName : "testPrevNext"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("109874981950949849811049",10).next(),thx_bigint_Bigs.parseBase("109874981950949849811050",10)),"expected " + thx_bigint_Bigs.parseBase("109874981950949849811049",10).next().toString() + " == " + thx_bigint_Bigs.parseBase("109874981950949849811050",10).toString(),{ fileName : "TestBigInt.hx", lineNumber : 319, className : "thx.TestBigInt", methodName : "testPrevNext"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("-109874981950949849811049",10).prev(),thx_bigint_Bigs.parseBase("-109874981950949849811050",10)),"expected " + thx_bigint_Bigs.parseBase("-109874981950949849811049",10).prev().toString() + " == " + thx_bigint_Bigs.parseBase("-109874981950949849811050",10).toString(),{ fileName : "TestBigInt.hx", lineNumber : 320, className : "thx.TestBigInt", methodName : "testPrevNext"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("-109874981950949849811049",10).next(),thx_bigint_Bigs.parseBase("-109874981950949849811048",10)),"expected " + thx_bigint_Bigs.parseBase("-109874981950949849811049",10).next().toString() + " == " + thx_bigint_Bigs.parseBase("-109874981950949849811048",10).toString(),{ fileName : "TestBigInt.hx", lineNumber : 321, className : "thx.TestBigInt", methodName : "testPrevNext"});
	}
	,testPrevNextCarriesOverCorrectly: function() {
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(9999999).next(),thx_bigint_Bigs.fromInt(10000000)),null,{ fileName : "TestBigInt.hx", lineNumber : 325, className : "thx.TestBigInt", methodName : "testPrevNextCarriesOverCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(10000000).prev(),thx_bigint_Bigs.fromInt(9999999)),null,{ fileName : "TestBigInt.hx", lineNumber : 326, className : "thx.TestBigInt", methodName : "testPrevNextCarriesOverCorrectly"});
	}
	,testAbs: function() {
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(0).abs(),thx_bigint_Bigs.fromInt(0)),null,{ fileName : "TestBigInt.hx", lineNumber : 330, className : "thx.TestBigInt", methodName : "testAbs"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("-0",10).abs(),thx_bigint_Bigs.fromInt(0)),null,{ fileName : "TestBigInt.hx", lineNumber : 331, className : "thx.TestBigInt", methodName : "testAbs"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(54).abs(),thx_bigint_Bigs.fromInt(54)),null,{ fileName : "TestBigInt.hx", lineNumber : 332, className : "thx.TestBigInt", methodName : "testAbs"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(-54).abs(),thx_bigint_Bigs.fromInt(54)),null,{ fileName : "TestBigInt.hx", lineNumber : 333, className : "thx.TestBigInt", methodName : "testAbs"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("13412564654613034984065434",10).abs(),thx_bigint_Bigs.parseBase("13412564654613034984065434",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 334, className : "thx.TestBigInt", methodName : "testAbs"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("-13412564654613034984065434",10).abs(),thx_bigint_Bigs.parseBase("13412564654613034984065434",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 335, className : "thx.TestBigInt", methodName : "testAbs"});
	}
	,testIsPositiveAndIsNegative: function() {
		utest_Assert.isFalse(thx_bigint_Bigs.fromInt(0).compareTo(thx__$BigInt_BigInt_$Impl_$.zero) > 0,null,{ fileName : "TestBigInt.hx", lineNumber : 339, className : "thx.TestBigInt", methodName : "testIsPositiveAndIsNegative"});
		utest_Assert.isFalse(thx_bigint_Bigs.fromInt(0).sign,null,{ fileName : "TestBigInt.hx", lineNumber : 340, className : "thx.TestBigInt", methodName : "testIsPositiveAndIsNegative"});
		utest_Assert.isFalse(thx_bigint_Bigs.fromInt(0).compareTo(thx__$BigInt_BigInt_$Impl_$.zero) > 0,null,{ fileName : "TestBigInt.hx", lineNumber : 341, className : "thx.TestBigInt", methodName : "testIsPositiveAndIsNegative"});
		utest_Assert.isFalse(thx_bigint_Bigs.fromInt(0).sign,null,{ fileName : "TestBigInt.hx", lineNumber : 342, className : "thx.TestBigInt", methodName : "testIsPositiveAndIsNegative"});
	}
	,testIsPositiveAndIsNegativeWorkForSmallNumbers: function() {
		utest_Assert.isTrue(thx_bigint_Bigs.fromInt(1).compareTo(thx__$BigInt_BigInt_$Impl_$.zero) > 0,null,{ fileName : "TestBigInt.hx", lineNumber : 346, className : "thx.TestBigInt", methodName : "testIsPositiveAndIsNegativeWorkForSmallNumbers"});
		utest_Assert.isFalse(thx_bigint_Bigs.fromInt(543).sign,null,{ fileName : "TestBigInt.hx", lineNumber : 347, className : "thx.TestBigInt", methodName : "testIsPositiveAndIsNegativeWorkForSmallNumbers"});
		utest_Assert.isFalse(thx_bigint_Bigs.fromInt(-1).compareTo(thx__$BigInt_BigInt_$Impl_$.zero) > 0,null,{ fileName : "TestBigInt.hx", lineNumber : 348, className : "thx.TestBigInt", methodName : "testIsPositiveAndIsNegativeWorkForSmallNumbers"});
		utest_Assert.isTrue(thx_bigint_Bigs.fromInt(-765).sign,null,{ fileName : "TestBigInt.hx", lineNumber : 349, className : "thx.TestBigInt", methodName : "testIsPositiveAndIsNegativeWorkForSmallNumbers"});
	}
	,testIsPositiveAndIsNegativeWorkForBigNumbers: function() {
		utest_Assert.isTrue(thx_bigint_Bigs.parseBase("651987498619879841",10).compareTo(thx__$BigInt_BigInt_$Impl_$.zero) > 0,null,{ fileName : "TestBigInt.hx", lineNumber : 353, className : "thx.TestBigInt", methodName : "testIsPositiveAndIsNegativeWorkForBigNumbers"});
		utest_Assert.isFalse(thx_bigint_Bigs.parseBase("0054984980098460",10).sign,null,{ fileName : "TestBigInt.hx", lineNumber : 354, className : "thx.TestBigInt", methodName : "testIsPositiveAndIsNegativeWorkForBigNumbers"});
		utest_Assert.isFalse(thx_bigint_Bigs.parseBase("-1961987984109078496",10).compareTo(thx__$BigInt_BigInt_$Impl_$.zero) > 0,null,{ fileName : "TestBigInt.hx", lineNumber : 355, className : "thx.TestBigInt", methodName : "testIsPositiveAndIsNegativeWorkForBigNumbers"});
		utest_Assert.isTrue(thx_bigint_Bigs.parseBase("-98800984196109540984",10).sign,null,{ fileName : "TestBigInt.hx", lineNumber : 356, className : "thx.TestBigInt", methodName : "testIsPositiveAndIsNegativeWorkForBigNumbers"});
	}
	,testIsUnit: function() {
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.one.isUnit(),null,{ fileName : "TestBigInt.hx", lineNumber : 360, className : "thx.TestBigInt", methodName : "testIsUnit"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.negativeOne.isUnit(),null,{ fileName : "TestBigInt.hx", lineNumber : 361, className : "thx.TestBigInt", methodName : "testIsUnit"});
		utest_Assert.isFalse(thx__$BigInt_BigInt_$Impl_$.zero.isUnit(),null,{ fileName : "TestBigInt.hx", lineNumber : 362, className : "thx.TestBigInt", methodName : "testIsUnit"});
		utest_Assert.isFalse(thx_bigint_Bigs.fromInt(5).isUnit(),null,{ fileName : "TestBigInt.hx", lineNumber : 363, className : "thx.TestBigInt", methodName : "testIsUnit"});
		utest_Assert.isFalse(thx_bigint_Bigs.fromInt(-5).isUnit(),null,{ fileName : "TestBigInt.hx", lineNumber : 364, className : "thx.TestBigInt", methodName : "testIsUnit"});
		utest_Assert.isFalse(thx_bigint_Bigs.parseBase("654609649089416160",10).isUnit(),null,{ fileName : "TestBigInt.hx", lineNumber : 365, className : "thx.TestBigInt", methodName : "testIsUnit"});
		utest_Assert.isFalse(thx_bigint_Bigs.parseBase("-98410980984981094",10).isUnit(),null,{ fileName : "TestBigInt.hx", lineNumber : 366, className : "thx.TestBigInt", methodName : "testIsUnit"});
	}
	,testIsZero: function() {
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.zero.isZero(),null,{ fileName : "TestBigInt.hx", lineNumber : 370, className : "thx.TestBigInt", methodName : "testIsZero"});
		utest_Assert.isTrue(thx_bigint_Bigs.fromInt(0).isZero(),null,{ fileName : "TestBigInt.hx", lineNumber : 371, className : "thx.TestBigInt", methodName : "testIsZero"});
		utest_Assert.isTrue(thx_bigint_Bigs.parseBase("-0",10).isZero(),null,{ fileName : "TestBigInt.hx", lineNumber : 372, className : "thx.TestBigInt", methodName : "testIsZero"});
		utest_Assert.isFalse(thx_bigint_Bigs.fromInt(15).isZero(),null,{ fileName : "TestBigInt.hx", lineNumber : 373, className : "thx.TestBigInt", methodName : "testIsZero"});
		utest_Assert.isFalse(thx_bigint_Bigs.fromInt(-15).isZero(),null,{ fileName : "TestBigInt.hx", lineNumber : 374, className : "thx.TestBigInt", methodName : "testIsZero"});
		utest_Assert.isFalse(thx_bigint_Bigs.parseBase("63213098189462109840",10).isZero(),null,{ fileName : "TestBigInt.hx", lineNumber : 375, className : "thx.TestBigInt", methodName : "testIsZero"});
		utest_Assert.isFalse(thx_bigint_Bigs.parseBase("-64343745644564564563",10).isZero(),null,{ fileName : "TestBigInt.hx", lineNumber : 376, className : "thx.TestBigInt", methodName : "testIsZero"});
		utest_Assert.isTrue(thx_bigint_Bigs.fromInt(0).isZero(),null,{ fileName : "TestBigInt.hx", lineNumber : 377, className : "thx.TestBigInt", methodName : "testIsZero"});
	}
	,testSquare: function() {
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(0).square(),thx_bigint_Bigs.fromInt(0)),null,{ fileName : "TestBigInt.hx", lineNumber : 381, className : "thx.TestBigInt", methodName : "testSquare"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(16).square(),thx_bigint_Bigs.fromInt(256)),null,{ fileName : "TestBigInt.hx", lineNumber : 382, className : "thx.TestBigInt", methodName : "testSquare"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(-16).square(),thx_bigint_Bigs.fromInt(256)),null,{ fileName : "TestBigInt.hx", lineNumber : 383, className : "thx.TestBigInt", methodName : "testSquare"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("65536",10).square(),thx_bigint_Bigs.parseBase("4294967296",10)),"expected " + thx_bigint_Bigs.parseBase("65536",10).square().toString() + " == 4294967296",{ fileName : "TestBigInt.hx", lineNumber : 384, className : "thx.TestBigInt", methodName : "testSquare"});
	}
	,testPowerToNegativeNumbersIs0: function() {
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(0).pow(thx_bigint_Bigs.fromInt(-298)),thx_bigint_Bigs.fromInt(0)),null,{ fileName : "TestBigInt.hx", lineNumber : 388, className : "thx.TestBigInt", methodName : "testPowerToNegativeNumbersIs0"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(543).pow(thx_bigint_Bigs.fromInt(-2)),thx_bigint_Bigs.fromInt(0)),null,{ fileName : "TestBigInt.hx", lineNumber : 389, className : "thx.TestBigInt", methodName : "testPowerToNegativeNumbersIs0"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("323434643534523",10).pow(thx_bigint_Bigs.fromInt(-1)),thx_bigint_Bigs.fromInt(0)),null,{ fileName : "TestBigInt.hx", lineNumber : 390, className : "thx.TestBigInt", methodName : "testPowerToNegativeNumbersIs0"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(-54302).pow(thx_bigint_Bigs.parseBase("-543624724341214223562",10)),thx_bigint_Bigs.fromInt(0)),null,{ fileName : "TestBigInt.hx", lineNumber : 391, className : "thx.TestBigInt", methodName : "testPowerToNegativeNumbersIs0"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("-20199605604968",10).pow(thx_bigint_Bigs.fromInt(-99)),thx_bigint_Bigs.fromInt(0)),null,{ fileName : "TestBigInt.hx", lineNumber : 392, className : "thx.TestBigInt", methodName : "testPowerToNegativeNumbersIs0"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(1).pow(thx_bigint_Bigs.fromInt(-1)),thx_bigint_Bigs.fromInt(1)),null,{ fileName : "TestBigInt.hx", lineNumber : 394, className : "thx.TestBigInt", methodName : "testPowerToNegativeNumbersIs0"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(-1).pow(thx_bigint_Bigs.fromInt(-1)),thx_bigint_Bigs.fromInt(-1)),null,{ fileName : "TestBigInt.hx", lineNumber : 395, className : "thx.TestBigInt", methodName : "testPowerToNegativeNumbersIs0"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(-1).pow(thx_bigint_Bigs.fromInt(-2)),thx_bigint_Bigs.fromInt(1)),null,{ fileName : "TestBigInt.hx", lineNumber : 396, className : "thx.TestBigInt", methodName : "testPowerToNegativeNumbersIs0"});
	}
	,testPowerHandlesSignsCorrectly: function() {
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(2).pow(thx_bigint_Bigs.fromInt(3)),thx_bigint_Bigs.fromInt(8)),null,{ fileName : "TestBigInt.hx", lineNumber : 400, className : "thx.TestBigInt", methodName : "testPowerHandlesSignsCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(-2).pow(thx_bigint_Bigs.fromInt(3)),thx_bigint_Bigs.fromInt(-8)),"expected " + thx_bigint_Bigs.fromInt(-2).pow(thx_bigint_Bigs.fromInt(3)).toString() + " == -8",{ fileName : "TestBigInt.hx", lineNumber : 401, className : "thx.TestBigInt", methodName : "testPowerHandlesSignsCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("1036350201654",10).pow(thx_bigint_Bigs.fromInt(4)),thx_bigint_Bigs.parseBase("1153522698998527286707879497611725813209153232656",10)),"expected " + thx_bigint_Bigs.parseBase("1036350201654",10).pow(thx_bigint_Bigs.fromInt(4)).toString() + " == " + thx_bigint_Bigs.parseBase("1153522698998527286707879497611725813209153232656",10).toString(),{ fileName : "TestBigInt.hx", lineNumber : 402, className : "thx.TestBigInt", methodName : "testPowerHandlesSignsCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("-1036350201654",10).pow(thx_bigint_Bigs.fromInt(4)),thx_bigint_Bigs.parseBase("1153522698998527286707879497611725813209153232656",10)),"expected " + thx_bigint_Bigs.parseBase("-1036350201654",10).pow(thx_bigint_Bigs.fromInt(4)).toString() + " == " + thx_bigint_Bigs.parseBase("1153522698998527286707879497611725813209153232656",10).toString(),{ fileName : "TestBigInt.hx", lineNumber : 403, className : "thx.TestBigInt", methodName : "testPowerHandlesSignsCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("-154654987",10).pow(thx_bigint_Bigs.fromInt(3)),thx_bigint_Bigs.parseBase("-3699063497752861435082803",10)),"expected " + thx_bigint_Bigs.parseBase("-154654987",10).pow(thx_bigint_Bigs.fromInt(3)).toString() + " == " + thx_bigint_Bigs.parseBase("-3699063497752861435082803",10).toString(),{ fileName : "TestBigInt.hx", lineNumber : 404, className : "thx.TestBigInt", methodName : "testPowerHandlesSignsCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(1).pow(thx_bigint_Bigs.fromInt(1)),thx_bigint_Bigs.fromInt(1)),null,{ fileName : "TestBigInt.hx", lineNumber : 406, className : "thx.TestBigInt", methodName : "testPowerHandlesSignsCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(-1).pow(thx_bigint_Bigs.fromInt(1)),thx_bigint_Bigs.fromInt(-1)),null,{ fileName : "TestBigInt.hx", lineNumber : 407, className : "thx.TestBigInt", methodName : "testPowerHandlesSignsCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(-1).pow(thx_bigint_Bigs.fromInt(2)),thx_bigint_Bigs.fromInt(1)),null,{ fileName : "TestBigInt.hx", lineNumber : 408, className : "thx.TestBigInt", methodName : "testPowerHandlesSignsCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(1).pow(thx_bigint_Bigs.parseBase("1e100",10)),thx_bigint_Bigs.fromInt(1)),null,{ fileName : "TestBigInt.hx", lineNumber : 410, className : "thx.TestBigInt", methodName : "testPowerHandlesSignsCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(-1).pow(thx_bigint_Bigs.parseBase("1e100",10)),thx_bigint_Bigs.fromInt(1)),null,{ fileName : "TestBigInt.hx", lineNumber : 411, className : "thx.TestBigInt", methodName : "testPowerHandlesSignsCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(0).pow(thx_bigint_Bigs.parseBase("1e100",10)),thx_bigint_Bigs.fromInt(0)),null,{ fileName : "TestBigInt.hx", lineNumber : 412, className : "thx.TestBigInt", methodName : "testPowerHandlesSignsCorrectly"});
	}
	,testPower: function() {
		thx_bigint_Bigs.parseBase("102340001040000",10);
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("10000000000",10),thx_bigint_Bigs.fromInt(10).pow(thx_bigint_Bigs.fromInt(10))),null,{ fileName : "TestBigInt.hx", lineNumber : 417, className : "thx.TestBigInt", methodName : "testPower"});
	}
	,testPowerOf0to0is1: function() {
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(0).pow(thx_bigint_Bigs.fromInt(0)),thx_bigint_Bigs.fromInt(1)),null,{ fileName : "TestBigInt.hx", lineNumber : 421, className : "thx.TestBigInt", methodName : "testPowerOf0to0is1"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(0).pow(thx_bigint_Bigs.parseBase("-0",10)),thx_bigint_Bigs.fromInt(1)),null,{ fileName : "TestBigInt.hx", lineNumber : 422, className : "thx.TestBigInt", methodName : "testPowerOf0to0is1"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("-0",10).pow(thx_bigint_Bigs.fromInt(0)),thx_bigint_Bigs.fromInt(1)),null,{ fileName : "TestBigInt.hx", lineNumber : 423, className : "thx.TestBigInt", methodName : "testPowerOf0to0is1"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("-0",10).pow(thx_bigint_Bigs.parseBase("-0",10)),thx_bigint_Bigs.fromInt(1)),null,{ fileName : "TestBigInt.hx", lineNumber : 424, className : "thx.TestBigInt", methodName : "testPowerOf0to0is1"});
	}
	,testPowerCarriesOverCorrectly: function() {
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("16",10).pow(thx_bigint_Bigs.parseBase("13",10)),thx_bigint_Bigs.parseBase("4503599627370496",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 428, className : "thx.TestBigInt", methodName : "testPowerCarriesOverCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("123456789123456789",10).pow(thx_bigint_Bigs.fromInt(10)),thx_bigint_Bigs.parseBase("822526267372365207989468699031914332476569003445489153619518989325083908083922133639704420166045905346960117046949453426283086050487204639652635846010822673782217799736601",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 429, className : "thx.TestBigInt", methodName : "testPowerCarriesOverCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("2",10).pow(thx_bigint_Bigs.fromInt(63)),thx_bigint_Bigs.parseBase("9223372036854775808",10)),"expected 2.pow(63) == " + thx_bigint_Bigs.parseBase("9223372036854775808",10).toString() + " but got " + thx_bigint_Bigs.parseBase("2",10).pow(thx_bigint_Bigs.fromInt(63)).toString(),{ fileName : "TestBigInt.hx", lineNumber : 430, className : "thx.TestBigInt", methodName : "testPowerCarriesOverCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.notEquals(thx_bigint_Bigs.fromInt(100).pow(thx_bigint_Bigs.fromInt(56)),thx_bigint_Bigs.fromInt(0)),null,{ fileName : "TestBigInt.hx", lineNumber : 431, className : "thx.TestBigInt", methodName : "testPowerCarriesOverCorrectly"});
	}
	,testDivision: function() {
		utest_Assert.raises(function() {
			thx_bigint_Bigs.fromInt(1).divide(thx_bigint_Bigs.fromInt(0));
		},thx_Error,null,null,{ fileName : "TestBigInt.hx", lineNumber : 435, className : "thx.TestBigInt", methodName : "testDivision"});
		utest_Assert.raises(function() {
			thx_bigint_Bigs.fromInt(0).divide(thx_bigint_Bigs.fromInt(0));
		},thx_Error,null,null,{ fileName : "TestBigInt.hx", lineNumber : 438, className : "thx.TestBigInt", methodName : "testDivision"});
		var tests = [{ num : thx_bigint_Bigs.fromInt(10), div : thx_bigint_Bigs.fromInt(2), res : thx_bigint_Bigs.fromInt(5)},{ num : thx_bigint_Bigs.parseBase("102340001040000",10), div : thx_bigint_Bigs.parseBase("10000000000",10), res : thx_bigint_Bigs.fromInt(10234)},{ num : thx_bigint_Bigs.parseBase("1000000000000000000",10), div : thx_bigint_Bigs.fromInt(50), res : thx_bigint_Bigs.parseBase("20000000000000000",10)}];
		var _g = 0;
		while(_g < tests.length) {
			var test = tests[_g];
			++_g;
			utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(test.num.divide(test.div),test.res),"expected " + test.num.toString() + " / " + test.div.toString() + " == " + test.res.toString() + " and it was " + test.num.divide(test.div).toString(),{ fileName : "TestBigInt.hx", lineNumber : 448, className : "thx.TestBigInt", methodName : "testDivision"});
		}
	}
	,testAddition: function() {
		var m;
		var n;
		var o;
		var s;
		m = thx_bigint_Bigs.fromInt(123);
		n = thx_bigint_Bigs.fromInt(0);
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(m.add(n),m),null,{ fileName : "TestBigInt.hx", lineNumber : 460, className : "thx.TestBigInt", methodName : "testAddition"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(n.add(m),m),null,{ fileName : "TestBigInt.hx", lineNumber : 461, className : "thx.TestBigInt", methodName : "testAddition"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(m.subtract(n),m),null,{ fileName : "TestBigInt.hx", lineNumber : 463, className : "thx.TestBigInt", methodName : "testAddition"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(n.subtract(m),m.negate()),null,{ fileName : "TestBigInt.hx", lineNumber : 464, className : "thx.TestBigInt", methodName : "testAddition"});
		m = thx_bigint_Bigs.fromInt(123);
		n = thx_bigint_Bigs.fromInt(343);
		s = thx_bigint_Bigs.fromInt(466);
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(m.add(n),s),null,{ fileName : "TestBigInt.hx", lineNumber : 468, className : "thx.TestBigInt", methodName : "testAddition"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(n.add(m),s),null,{ fileName : "TestBigInt.hx", lineNumber : 469, className : "thx.TestBigInt", methodName : "testAddition"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(s.subtract(n),m),null,{ fileName : "TestBigInt.hx", lineNumber : 471, className : "thx.TestBigInt", methodName : "testAddition"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(n.subtract(s),m.negate()),null,{ fileName : "TestBigInt.hx", lineNumber : 472, className : "thx.TestBigInt", methodName : "testAddition"});
		m = thx_bigint_Bigs.fromInt(-234356);
		n = thx_bigint_Bigs.fromInt(355321);
		o = thx_bigint_Bigs.fromInt(234);
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(m.add(n).add(o),m.add(n.add(o))),null,{ fileName : "TestBigInt.hx", lineNumber : 476, className : "thx.TestBigInt", methodName : "testAddition"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(m.subtract(n).add(o),m.subtract(n.subtract(o))),null,{ fileName : "TestBigInt.hx", lineNumber : 478, className : "thx.TestBigInt", methodName : "testAddition"});
		m = thx_bigint_Bigs.fromInt(1);
		n = thx_bigint_Bigs.fromInt(-9999);
		s = thx_bigint_Bigs.fromInt(-9998);
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(m.add(n),s),null,{ fileName : "TestBigInt.hx", lineNumber : 481, className : "thx.TestBigInt", methodName : "testAddition"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(s.subtract(n),m),null,{ fileName : "TestBigInt.hx", lineNumber : 483, className : "thx.TestBigInt", methodName : "testAddition"});
		m = thx_bigint_Bigs.parseBase("11111111111111111111110111111111111111111111111111",10);
		n = m;
		s = thx_bigint_Bigs.parseBase("22222222222222222222220222222222222222222222222222",10);
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(m.add(n),s),"expected " + m.toString() + " + " + n.toString() + " == " + s.toString() + " but is " + m.add(n).toString(),{ fileName : "TestBigInt.hx", lineNumber : 488, className : "thx.TestBigInt", methodName : "testAddition"});
		utest_Assert.isTrue(m.subtract(n).isZero(),"expected " + m.toString() + "-" + n.toString() + "==0 but is " + m.subtract(n).toString(),{ fileName : "TestBigInt.hx", lineNumber : 490, className : "thx.TestBigInt", methodName : "testAddition"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(m.subtract(n),thx_bigint_Bigs.fromInt(0)),"expected " + m.toString() + " - " + n.toString() + "==0 but is " + m.subtract(n).toString(),{ fileName : "TestBigInt.hx", lineNumber : 491, className : "thx.TestBigInt", methodName : "testAddition"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(s.subtract(n),m),"expected " + s.toString() + " - " + n.toString() + " == " + m.toString() + " but is " + s.subtract(n).toString(),{ fileName : "TestBigInt.hx", lineNumber : 492, className : "thx.TestBigInt", methodName : "testAddition"});
		m = thx_bigint_Bigs.parseBase("99499494949383948405",10);
		n = thx_bigint_Bigs.parseBase("-472435789789045237084578078029457809342597808204538970",10);
		s = thx_bigint_Bigs.parseBase("-472435789789045237084578078029457709843102858820590565",10);
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(m.add(n),s),"expected " + m.toString() + " + " + n.toString() + " == " + s.toString() + " but got " + m.add(n).toString(),{ fileName : "TestBigInt.hx", lineNumber : 498, className : "thx.TestBigInt", methodName : "testAddition"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(s.subtract(n),m),"expected " + s.toString() + " - " + n.toString() + " == " + m.toString() + " but got " + s.subtract(n).toString(),{ fileName : "TestBigInt.hx", lineNumber : 500, className : "thx.TestBigInt", methodName : "testAddition"});
		m = thx_bigint_Bigs.parseBase("-1",10);
		n = thx_bigint_Bigs.parseBase("100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",10);
		s = thx_bigint_Bigs.parseBase("99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",10);
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(m.add(n),s),"expected " + m.toString() + " + " + n.toString() + " == " + s.toString() + " but got " + m.add(n).toString(),{ fileName : "TestBigInt.hx", lineNumber : 505, className : "thx.TestBigInt", methodName : "testAddition"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(s.subtract(n),m),"expected " + s.toString() + " - " + n.toString() + " == " + m.toString() + " but got " + s.subtract(n).toString(),{ fileName : "TestBigInt.hx", lineNumber : 506, className : "thx.TestBigInt", methodName : "testAddition"});
		m = thx_bigint_Bigs.parseBase("1",10);
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(m.add(s),n),"expected " + m.toString() + " + " + s.toString() + " == " + n.toString() + " but got " + m.add(s).toString(),{ fileName : "TestBigInt.hx", lineNumber : 509, className : "thx.TestBigInt", methodName : "testAddition"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(n.subtract(s),m),"expected " + n.toString() + " - " + s.toString() + " == " + m.toString() + " but got " + n.subtract(s).toString(),{ fileName : "TestBigInt.hx", lineNumber : 510, className : "thx.TestBigInt", methodName : "testAddition"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(n.subtract(m),s),"expected " + n.toString() + " - " + m.toString() + " == " + s.toString() + " but got " + n.subtract(m).toString(),{ fileName : "TestBigInt.hx", lineNumber : 511, className : "thx.TestBigInt", methodName : "testAddition"});
	}
	,testMultiplication: function() {
		var a;
		var b;
		var m;
		a = thx_bigint_Bigs.fromInt(12347);
		b = thx_bigint_Bigs.fromInt(0);
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(a.multiply(b),b),null,{ fileName : "TestBigInt.hx", lineNumber : 520, className : "thx.TestBigInt", methodName : "testMultiplication"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(b.multiply(a),b),null,{ fileName : "TestBigInt.hx", lineNumber : 521, className : "thx.TestBigInt", methodName : "testMultiplication"});
		a = thx_bigint_Bigs.fromInt(-99999);
		b = thx_bigint_Bigs.fromInt(1);
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(a.multiply(b),a),null,{ fileName : "TestBigInt.hx", lineNumber : 524, className : "thx.TestBigInt", methodName : "testMultiplication"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(b.multiply(a),a),null,{ fileName : "TestBigInt.hx", lineNumber : 525, className : "thx.TestBigInt", methodName : "testMultiplication"});
		a = thx_bigint_Bigs.fromInt(1235);
		b = thx_bigint_Bigs.fromInt(44);
		m = thx_bigint_Bigs.fromInt(54340);
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(a.multiply(b),m),null,{ fileName : "TestBigInt.hx", lineNumber : 528, className : "thx.TestBigInt", methodName : "testMultiplication"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(b.multiply(a),m),null,{ fileName : "TestBigInt.hx", lineNumber : 529, className : "thx.TestBigInt", methodName : "testMultiplication"});
		a = thx_bigint_Bigs.fromInt(-11);
		b = thx_bigint_Bigs.fromInt(-9);
		m = thx_bigint_Bigs.fromInt(99);
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(a.multiply(b),m),null,{ fileName : "TestBigInt.hx", lineNumber : 532, className : "thx.TestBigInt", methodName : "testMultiplication"});
		a = thx_bigint_Bigs.fromInt(55);
		b = thx_bigint_Bigs.fromInt(200395);
		m = thx_bigint_Bigs.fromInt(11021725);
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(a.multiply(b),m),null,{ fileName : "TestBigInt.hx", lineNumber : 535, className : "thx.TestBigInt", methodName : "testMultiplication"});
		a = thx_bigint_Bigs.parseBase("111111111111111111111111111111111111111",10);
		b = thx_bigint_Bigs.parseBase("-333333333333333333333",10);
		m = thx_bigint_Bigs.parseBase("-37037037037037037036999999999999999999962962962962962962963",10);
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(a.multiply(b),m),"expected " + a.toString() + " * " + b.toString() + " == " + m.toString() + " but got " + a.multiply(b).toString(),{ fileName : "TestBigInt.hx", lineNumber : 541, className : "thx.TestBigInt", methodName : "testMultiplication"});
	}
	,testComparison: function() {
		var a = thx_bigint_Bigs.fromInt(1);
		var b = thx_bigint_Bigs.fromInt(2);
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.less(a,b),null,{ fileName : "TestBigInt.hx", lineNumber : 547, className : "thx.TestBigInt", methodName : "testComparison"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.lessEquals(a,b),null,{ fileName : "TestBigInt.hx", lineNumber : 548, className : "thx.TestBigInt", methodName : "testComparison"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.lessEquals(a,a),null,{ fileName : "TestBigInt.hx", lineNumber : 549, className : "thx.TestBigInt", methodName : "testComparison"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.greater(b,a),null,{ fileName : "TestBigInt.hx", lineNumber : 551, className : "thx.TestBigInt", methodName : "testComparison"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.greaterEquals(b,a),null,{ fileName : "TestBigInt.hx", lineNumber : 552, className : "thx.TestBigInt", methodName : "testComparison"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.greaterEquals(b,b),null,{ fileName : "TestBigInt.hx", lineNumber : 553, className : "thx.TestBigInt", methodName : "testComparison"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.lessEquals(b,b),null,{ fileName : "TestBigInt.hx", lineNumber : 554, className : "thx.TestBigInt", methodName : "testComparison"});
		utest_Assert.equals(-1,a.compareTo(b),null,{ fileName : "TestBigInt.hx", lineNumber : 556, className : "thx.TestBigInt", methodName : "testComparison"});
		utest_Assert.equals(1,b.compareTo(a),null,{ fileName : "TestBigInt.hx", lineNumber : 557, className : "thx.TestBigInt", methodName : "testComparison"});
		utest_Assert.equals(0,b.compareTo(b),null,{ fileName : "TestBigInt.hx", lineNumber : 558, className : "thx.TestBigInt", methodName : "testComparison"});
		a = thx_bigint_Bigs.parseBase("-333333333333333333333",10);
		b = thx_bigint_Bigs.parseBase("111111111111111111111111111111111111111",10);
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.less(a,b),"expected " + a.toString() + " < " + b.toString() + " == true but it is " + Std.string(thx__$BigInt_BigInt_$Impl_$.less(a,b)),{ fileName : "TestBigInt.hx", lineNumber : 563, className : "thx.TestBigInt", methodName : "testComparison"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.lessEquals(a,b),"expected " + a.toString() + " <= " + b.toString() + " == true but it is " + Std.string(thx__$BigInt_BigInt_$Impl_$.lessEquals(a,b)),{ fileName : "TestBigInt.hx", lineNumber : 564, className : "thx.TestBigInt", methodName : "testComparison"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.lessEquals(a,a),null,{ fileName : "TestBigInt.hx", lineNumber : 565, className : "thx.TestBigInt", methodName : "testComparison"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.greater(b,a),null,{ fileName : "TestBigInt.hx", lineNumber : 567, className : "thx.TestBigInt", methodName : "testComparison"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.greaterEquals(b,a),null,{ fileName : "TestBigInt.hx", lineNumber : 568, className : "thx.TestBigInt", methodName : "testComparison"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.greaterEquals(b,b),null,{ fileName : "TestBigInt.hx", lineNumber : 569, className : "thx.TestBigInt", methodName : "testComparison"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.lessEquals(b,b),null,{ fileName : "TestBigInt.hx", lineNumber : 570, className : "thx.TestBigInt", methodName : "testComparison"});
		utest_Assert.equals(-1,a.compareTo(b),"expected " + a.toString() + ".compareTo(" + b.toString() + ") t0 be -1 but it is " + a.compareTo(b),{ fileName : "TestBigInt.hx", lineNumber : 572, className : "thx.TestBigInt", methodName : "testComparison"});
		utest_Assert.equals(1,b.compareTo(a),null,{ fileName : "TestBigInt.hx", lineNumber : 573, className : "thx.TestBigInt", methodName : "testComparison"});
		utest_Assert.equals(0,b.compareTo(b),null,{ fileName : "TestBigInt.hx", lineNumber : 574, className : "thx.TestBigInt", methodName : "testComparison"});
		a = thx_bigint_Bigs.parseBase("-37037037037037037036999999999999999999962962962962962962963",10);
		b = thx_bigint_Bigs.parseBase("-333333333333333333333",10);
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.less(a,b),null,{ fileName : "TestBigInt.hx", lineNumber : 579, className : "thx.TestBigInt", methodName : "testComparison"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.lessEquals(a,b),null,{ fileName : "TestBigInt.hx", lineNumber : 580, className : "thx.TestBigInt", methodName : "testComparison"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.lessEquals(a,a),null,{ fileName : "TestBigInt.hx", lineNumber : 581, className : "thx.TestBigInt", methodName : "testComparison"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.greater(b,a),null,{ fileName : "TestBigInt.hx", lineNumber : 583, className : "thx.TestBigInt", methodName : "testComparison"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.greaterEquals(b,a),null,{ fileName : "TestBigInt.hx", lineNumber : 584, className : "thx.TestBigInt", methodName : "testComparison"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.greaterEquals(b,b),null,{ fileName : "TestBigInt.hx", lineNumber : 585, className : "thx.TestBigInt", methodName : "testComparison"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.lessEquals(b,b),null,{ fileName : "TestBigInt.hx", lineNumber : 586, className : "thx.TestBigInt", methodName : "testComparison"});
		utest_Assert.equals(-1,a.compareTo(b),null,{ fileName : "TestBigInt.hx", lineNumber : 588, className : "thx.TestBigInt", methodName : "testComparison"});
		utest_Assert.equals(1,b.compareTo(a),null,{ fileName : "TestBigInt.hx", lineNumber : 589, className : "thx.TestBigInt", methodName : "testComparison"});
		utest_Assert.equals(0,a.compareTo(a),null,{ fileName : "TestBigInt.hx", lineNumber : 590, className : "thx.TestBigInt", methodName : "testComparison"});
		utest_Assert.equals(0,b.compareTo(b),null,{ fileName : "TestBigInt.hx", lineNumber : 591, className : "thx.TestBigInt", methodName : "testComparison"});
	}
	,testNegation: function() {
		var m;
		var n = thx_bigint_Bigs.fromInt(0);
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(n.negate(),n),"expected " + n.negate().toString() + " == " + n.toString(),{ fileName : "TestBigInt.hx", lineNumber : 600, className : "thx.TestBigInt", methodName : "testNegation"});
		n = thx_bigint_Bigs.fromInt(1);
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(n.negate(),thx_bigint_Bigs.fromInt(-1)),null,{ fileName : "TestBigInt.hx", lineNumber : 603, className : "thx.TestBigInt", methodName : "testNegation"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(n.negate().negate(),n),null,{ fileName : "TestBigInt.hx", lineNumber : 604, className : "thx.TestBigInt", methodName : "testNegation"});
		n = thx_bigint_Bigs.fromInt(-1234);
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(n.negate(),thx_bigint_Bigs.fromInt(1234)),null,{ fileName : "TestBigInt.hx", lineNumber : 607, className : "thx.TestBigInt", methodName : "testNegation"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(n.negate().negate(),n),null,{ fileName : "TestBigInt.hx", lineNumber : 608, className : "thx.TestBigInt", methodName : "testNegation"});
		m = thx_bigint_Bigs.parseBase("192395858359234934684359234",10);
		n = thx_bigint_Bigs.parseBase("-192395858359234934684359234",10);
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(m.negate(),n),null,{ fileName : "TestBigInt.hx", lineNumber : 612, className : "thx.TestBigInt", methodName : "testNegation"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(m,n.negate()),null,{ fileName : "TestBigInt.hx", lineNumber : 613, className : "thx.TestBigInt", methodName : "testNegation"});
	}
	,testBigIntParsesNumbersCorrectly: function() {
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("10",2),thx_bigint_Bigs.fromInt(2)),null,{ fileName : "TestBigInt.hx", lineNumber : 617, className : "thx.TestBigInt", methodName : "testBigIntParsesNumbersCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("FF",16),thx_bigint_Bigs.fromInt(255)),null,{ fileName : "TestBigInt.hx", lineNumber : 618, className : "thx.TestBigInt", methodName : "testBigIntParsesNumbersCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("111100001111",2),thx_bigint_Bigs.fromInt(3855)),"expected " + thx_bigint_Bigs.parseBase("111100001111",2).toString() + " == " + thx_bigint_Bigs.fromInt(3855).toString(),{ fileName : "TestBigInt.hx", lineNumber : 619, className : "thx.TestBigInt", methodName : "testBigIntParsesNumbersCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("-1",16),thx_bigint_Bigs.fromInt(-1)),null,{ fileName : "TestBigInt.hx", lineNumber : 621, className : "thx.TestBigInt", methodName : "testBigIntParsesNumbersCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000",10),thx_bigint_Bigs.parseBase("9822997e35bb99bcf103a64299aa92b8446ab93879fba53349f1626f3c8f78a4ee1d8d9e7562538f8e374fdf64c8eff7481c63cde5ca9821abfb3df6fb3e2489d2f85d34cf347f3e89191a19cc6b6b8072a976a8f1bcf68d20f18a1c0efb023252ba2d0961428a5c282d2645f3f7fa160f7f84aca88e40a74066c4a787bed7d0082f7e45b1ffee532715f56bd5f8168eaf7eaae112ed1316371f047692631e70e6b85b290ef063845b364dad7e10b9deb9fcfb708f83b7c3c6b82ce16eb0034c030b332a58d637a7b547fd0527051d7de9e5004db2ea2bd75f5c5a280a1a9b93c3c83373b6dcf1b65c01197096e97d13076b6613bc2ebf47c91fbe1aefeea966134bfbbf5f850320f0f0c2d88888bd82d118a6aaf8df2b092cf5456eff7e209feb476bf3c01d6d2e7ca0b9f40d83b107b4def92f2927cf0a1bb6190c67a4da91478709262ed1f1ecb77fbaf1197ac238c246a63a697f51e8d539f850e790137e7fce5f764896fdfb4fc3787520608f0400e72aeea5737c36304c6887ec1a174564ecec63a57b1e0946dc311dd3aea7bfae197ff9c7fcbf17c97d9db303d231702ef502dde1b53896196dc2e5d30b2b6ec58fc3744f4de08109eb99aa9f22ffe2f12f3953f516f91d35a8852aff4a19e250410fbd8dbcdae99f92f88e2f94341fc1ecdff32733d194c0541f708a72c5b4c03e5515e1086d0903addca0e172968ff1dee87bbd4fee679e2ee5a52975807ae7212cc2a33e0821e2d9b44eaa7dc29536a94c6597eda41bdd1e5e618e7b388b53d38ef9542523bce888738db46c6706c3ee82cbc3655408071e9e422a44d309e3cfd31ec2135ee0cba32b0c6721c8bee4d076543b71c35a06087a007c14e51d1f0c4d0aa9aa0751dfd3776d2357a010e6b147aca40c7b669291e6defbf5ca77505c960f14b330e6c90dc2539431329ef78a1e9f26b2ead7d28a622e6b586bcee22bd0a495442c6a1235588988252cbd4d36975560fb8e7e5c8cf06f29aeb68659c5cb4cf8d011375b00000000000000000000000000000000000000000000000000000000000000000000000000",16)),null,{ fileName : "TestBigInt.hx", lineNumber : 622, className : "thx.TestBigInt", methodName : "testBigIntParsesNumbersCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("9223372036854775808",10),thx_bigint_Bigs.parseBase("1000000000000000000000000000000000000000000000000000000000000000",2)),null,{ fileName : "TestBigInt.hx", lineNumber : 623, className : "thx.TestBigInt", methodName : "testBigIntParsesNumbersCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("324AFCCC342342333CCD239998881232324AFCCC342342333CCD239998881232",16),thx_bigint_Bigs.parseBase("22748133857356174891035811692236022265357659892433333914058690475216129757746",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 624, className : "thx.TestBigInt", methodName : "testBigIntParsesNumbersCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("234345345345",10),thx_bigint_Bigs.parseBase("3690123141",16)),null,{ fileName : "TestBigInt.hx", lineNumber : 625, className : "thx.TestBigInt", methodName : "testBigIntParsesNumbersCorrectly"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("-10",16),thx_bigint_Bigs.parseBase("-16",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 626, className : "thx.TestBigInt", methodName : "testBigIntParsesNumbersCorrectly"});
	}
	,testBigIntOutputsNumbersCorrectly: function() {
		utest_Assert.isTrue(thx_bigint_Bigs.parseBase("366900685503779409298642816707647664013657589336",10).toStringWithBase(16) == "4044654fce69424a651af2825b37124c25094658",null,{ fileName : "TestBigInt.hx", lineNumber : 630, className : "thx.TestBigInt", methodName : "testBigIntOutputsNumbersCorrectly"});
		utest_Assert.isTrue(thx_bigint_Bigs.parseBase("111111111111111111111111111111111111111111111111111111",2).toStringWithBase(2) == "111111111111111111111111111111111111111111111111111111",null,{ fileName : "TestBigInt.hx", lineNumber : 631, className : "thx.TestBigInt", methodName : "testBigIntOutputsNumbersCorrectly"});
		utest_Assert.isTrue(thx_bigint_Bigs.parseBase("secretmessage000",36).toStringWithBase(36) == "secretmessage000",null,{ fileName : "TestBigInt.hx", lineNumber : 632, className : "thx.TestBigInt", methodName : "testBigIntOutputsNumbersCorrectly"});
		utest_Assert.isTrue(thx_bigint_Bigs.fromInt(-256).toStringWithBase(16) == "-100",null,{ fileName : "TestBigInt.hx", lineNumber : 633, className : "thx.TestBigInt", methodName : "testBigIntOutputsNumbersCorrectly"});
	}
	,testShiftingLeftAndRight: function() {
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(-5).shiftRight(2),thx_bigint_Bigs.fromInt(-2)),null,{ fileName : "TestBigInt.hx", lineNumber : 637, className : "thx.TestBigInt", methodName : "testShiftingLeftAndRight"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(5).shiftRight(-2),thx_bigint_Bigs.fromInt(20)),"expected " + thx_bigint_Bigs.fromInt(5).shiftRight(-2).toString() + " == 20",{ fileName : "TestBigInt.hx", lineNumber : 638, className : "thx.TestBigInt", methodName : "testShiftingLeftAndRight"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(5).shiftLeft(-2),thx_bigint_Bigs.fromInt(1)),null,{ fileName : "TestBigInt.hx", lineNumber : 639, className : "thx.TestBigInt", methodName : "testShiftingLeftAndRight"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.fromInt(1024).shiftLeft(100),thx_bigint_Bigs.parseBase("1298074214633706907132624082305024",10)),"expected " + thx_bigint_Bigs.fromInt(1024).toString() + ".shiftLeft(100) == " + thx_bigint_Bigs.parseBase("1298074214633706907132624082305024",10).toString() + " but got " + thx_bigint_Bigs.fromInt(1024).shiftLeft(100).toString(),{ fileName : "TestBigInt.hx", lineNumber : 640, className : "thx.TestBigInt", methodName : "testShiftingLeftAndRight"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("2596148429267413814265248164610049",10).shiftRight(100),thx_bigint_Bigs.fromInt(2048)),null,{ fileName : "TestBigInt.hx", lineNumber : 641, className : "thx.TestBigInt", methodName : "testShiftingLeftAndRight"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("8589934592",10).shiftRight(-50),thx_bigint_Bigs.parseBase("9671406556917033397649408",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 642, className : "thx.TestBigInt", methodName : "testShiftingLeftAndRight"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("38685626227668133590597632",10).shiftLeft(-50),thx_bigint_Bigs.parseBase("34359738368",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 643, className : "thx.TestBigInt", methodName : "testShiftingLeftAndRight"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("-1",10).shiftRight(25),thx_bigint_Bigs.fromInt(-1)),null,{ fileName : "TestBigInt.hx", lineNumber : 644, className : "thx.TestBigInt", methodName : "testShiftingLeftAndRight"});
	}
	,testBitwiseOperations: function() {
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("435783453",10).and(thx_bigint_Bigs.parseBase("902345074",10)),thx_bigint_Bigs.parseBase("298352912",10)),"expected " + thx_bigint_Bigs.parseBase("435783453",10).and(thx_bigint_Bigs.parseBase("902345074",10)).toString() + " to be 298352912",{ fileName : "TestBigInt.hx", lineNumber : 648, className : "thx.TestBigInt", methodName : "testBitwiseOperations"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("435783453",10).or(thx_bigint_Bigs.parseBase("902345074",10)),thx_bigint_Bigs.parseBase("1039775615",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 649, className : "thx.TestBigInt", methodName : "testBitwiseOperations"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("435783453",10).xor(thx_bigint_Bigs.parseBase("902345074",10)),thx_bigint_Bigs.parseBase("741422703",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 650, className : "thx.TestBigInt", methodName : "testBitwiseOperations"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("94981987261387596",10).not(),thx_bigint_Bigs.parseBase("-94981987261387597",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 651, className : "thx.TestBigInt", methodName : "testBitwiseOperations"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("-6931047708307681506",10).xor(thx_bigint_Bigs.parseBase("25214903917",10)),thx_bigint_Bigs.parseBase("-6931047723896018573",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 652, className : "thx.TestBigInt", methodName : "testBitwiseOperations"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("-6931047723896018573",10).and(thx_bigint_Bigs.parseBase("281474976710655",10)),thx_bigint_Bigs.parseBase("273577603885427",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 653, className : "thx.TestBigInt", methodName : "testBitwiseOperations"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("-65",10).xor(thx_bigint_Bigs.parseBase("-42",10)),thx_bigint_Bigs.parseBase("105",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 654, className : "thx.TestBigInt", methodName : "testBitwiseOperations"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("6",10).and(thx_bigint_Bigs.parseBase("-3",10)),thx_bigint_Bigs.parseBase("4",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 655, className : "thx.TestBigInt", methodName : "testBitwiseOperations"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("0",10).not(),thx_bigint_Bigs.parseBase("-1",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 656, className : "thx.TestBigInt", methodName : "testBitwiseOperations"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("13",10).or(thx_bigint_Bigs.fromInt(-8)),thx_bigint_Bigs.parseBase("-3",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 657, className : "thx.TestBigInt", methodName : "testBitwiseOperations"});
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx_bigint_Bigs.parseBase("12",10).xor(thx_bigint_Bigs.fromInt(-5)),thx_bigint_Bigs.parseBase("-9",10)),null,{ fileName : "TestBigInt.hx", lineNumber : 658, className : "thx.TestBigInt", methodName : "testBitwiseOperations"});
	}
	,testIsEvenAndIsOdd: function() {
		utest_Assert.isTrue(thx_bigint_Bigs.fromInt(0).isEven(),null,{ fileName : "TestBigInt.hx", lineNumber : 662, className : "thx.TestBigInt", methodName : "testIsEvenAndIsOdd"});
		utest_Assert.isFalse(thx_bigint_Bigs.fromInt(0).isOdd(),null,{ fileName : "TestBigInt.hx", lineNumber : 663, className : "thx.TestBigInt", methodName : "testIsEvenAndIsOdd"});
		utest_Assert.isTrue(thx_bigint_Bigs.fromInt(654).isEven(),null,{ fileName : "TestBigInt.hx", lineNumber : 665, className : "thx.TestBigInt", methodName : "testIsEvenAndIsOdd"});
		utest_Assert.isFalse(thx_bigint_Bigs.fromInt(654).isOdd(),null,{ fileName : "TestBigInt.hx", lineNumber : 666, className : "thx.TestBigInt", methodName : "testIsEvenAndIsOdd"});
		utest_Assert.isTrue(thx_bigint_Bigs.fromInt(653).isOdd(),null,{ fileName : "TestBigInt.hx", lineNumber : 668, className : "thx.TestBigInt", methodName : "testIsEvenAndIsOdd"});
		utest_Assert.isFalse(thx_bigint_Bigs.fromInt(653).isEven(),null,{ fileName : "TestBigInt.hx", lineNumber : 669, className : "thx.TestBigInt", methodName : "testIsEvenAndIsOdd"});
		utest_Assert.isTrue(thx_bigint_Bigs.fromInt(-984).isEven(),null,{ fileName : "TestBigInt.hx", lineNumber : 671, className : "thx.TestBigInt", methodName : "testIsEvenAndIsOdd"});
		utest_Assert.isFalse(thx_bigint_Bigs.fromInt(-984).isOdd(),null,{ fileName : "TestBigInt.hx", lineNumber : 672, className : "thx.TestBigInt", methodName : "testIsEvenAndIsOdd"});
		utest_Assert.isTrue(thx_bigint_Bigs.fromInt(-987).isOdd(),null,{ fileName : "TestBigInt.hx", lineNumber : 674, className : "thx.TestBigInt", methodName : "testIsEvenAndIsOdd"});
		utest_Assert.isFalse(thx_bigint_Bigs.fromInt(-987).isEven(),null,{ fileName : "TestBigInt.hx", lineNumber : 675, className : "thx.TestBigInt", methodName : "testIsEvenAndIsOdd"});
		utest_Assert.isTrue(thx_bigint_Bigs.parseBase("9888651888888888",10).isEven(),null,{ fileName : "TestBigInt.hx", lineNumber : 677, className : "thx.TestBigInt", methodName : "testIsEvenAndIsOdd"});
		utest_Assert.isFalse(thx_bigint_Bigs.parseBase("9888651888888888",10).isOdd(),null,{ fileName : "TestBigInt.hx", lineNumber : 678, className : "thx.TestBigInt", methodName : "testIsEvenAndIsOdd"});
		utest_Assert.isTrue(thx_bigint_Bigs.parseBase("1026377777777777",10).isOdd(),null,{ fileName : "TestBigInt.hx", lineNumber : 680, className : "thx.TestBigInt", methodName : "testIsEvenAndIsOdd"});
		utest_Assert.isFalse(thx_bigint_Bigs.parseBase("1026377777777777",10).isEven(),null,{ fileName : "TestBigInt.hx", lineNumber : 681, className : "thx.TestBigInt", methodName : "testIsEvenAndIsOdd"});
		utest_Assert.isTrue(thx_bigint_Bigs.parseBase("-9888651888888888",10).isEven(),null,{ fileName : "TestBigInt.hx", lineNumber : 683, className : "thx.TestBigInt", methodName : "testIsEvenAndIsOdd"});
		utest_Assert.isFalse(thx_bigint_Bigs.parseBase("-9888651888888888",10).isOdd(),null,{ fileName : "TestBigInt.hx", lineNumber : 684, className : "thx.TestBigInt", methodName : "testIsEvenAndIsOdd"});
		utest_Assert.isTrue(thx_bigint_Bigs.parseBase("-1026377777777777",10).isOdd(),null,{ fileName : "TestBigInt.hx", lineNumber : 686, className : "thx.TestBigInt", methodName : "testIsEvenAndIsOdd"});
		utest_Assert.isFalse(thx_bigint_Bigs.parseBase("-1026377777777777",10).isEven(),null,{ fileName : "TestBigInt.hx", lineNumber : 687, className : "thx.TestBigInt", methodName : "testIsEvenAndIsOdd"});
	}
	,__class__: thx_TestBigInt
};
var thx_TestBitMatrix = function() {
};
thx_TestBitMatrix.__name__ = ["thx","TestBitMatrix"];
thx_TestBitMatrix.prototype = {
	testNew: function() {
		var bits = thx__$BitMatrix_BitMatrix_$Impl_$._new();
		utest_Assert.same(0,thx__$BitMatrix_BitMatrix_$Impl_$.get_bitSetCount(bits),null,null,null,{ fileName : "TestBitMatrix.hx", lineNumber : 10, className : "thx.TestBitMatrix", methodName : "testNew"});
		utest_Assert.same(0,thx__$BitMatrix_BitMatrix_$Impl_$.get_length(bits),null,null,null,{ fileName : "TestBitMatrix.hx", lineNumber : 11, className : "thx.TestBitMatrix", methodName : "testNew"});
		bits = thx__$BitMatrix_BitMatrix_$Impl_$._new(5,10);
		utest_Assert.same(5,thx__$BitMatrix_BitMatrix_$Impl_$.get_bitSetCount(bits),null,null,null,{ fileName : "TestBitMatrix.hx", lineNumber : 14, className : "thx.TestBitMatrix", methodName : "testNew"});
		utest_Assert.same(10,thx__$BitMatrix_BitMatrix_$Impl_$.get_length(bits),null,null,null,{ fileName : "TestBitMatrix.hx", lineNumber : 15, className : "thx.TestBitMatrix", methodName : "testNew"});
	}
	,testBitMatrix: function() {
		var bits = thx__$BitMatrix_BitMatrix_$Impl_$._new(3,3);
		thx__$BitMatrix_BitMatrix_$Impl_$.setBitAt(bits,0,0,true);
		thx__$BitMatrix_BitMatrix_$Impl_$.setBitAt(bits,0,1,true);
		thx__$BitMatrix_BitMatrix_$Impl_$.setBitAt(bits,0,2,true);
		thx__$BitMatrix_BitMatrix_$Impl_$.setBitAt(bits,1,0,false);
		thx__$BitMatrix_BitMatrix_$Impl_$.setBitAt(bits,1,1,false);
		thx__$BitMatrix_BitMatrix_$Impl_$.setBitAt(bits,1,2,false);
		thx__$BitMatrix_BitMatrix_$Impl_$.setBitAt(bits,2,0,true);
		thx__$BitMatrix_BitMatrix_$Impl_$.setBitAt(bits,2,1,false);
		thx__$BitMatrix_BitMatrix_$Impl_$.setBitAt(bits,2,2,true);
		utest_Assert.equals("111,000,101",thx__$BitMatrix_BitMatrix_$Impl_$.toString(bits),null,{ fileName : "TestBitMatrix.hx", lineNumber : 29, className : "thx.TestBitMatrix", methodName : "testBitMatrix"});
		utest_Assert.raises(function() {
			thx__$BitMatrix_BitMatrix_$Impl_$.setBitAt(bits,3,0,true);
		},null,null,null,{ fileName : "TestBitMatrix.hx", lineNumber : 32, className : "thx.TestBitMatrix", methodName : "testBitMatrix"});
		thx__$BitMatrix_BitMatrix_$Impl_$.setBitAt(bits,0,3,true);
		utest_Assert.equals("1111,0000,1010",thx__$BitMatrix_BitMatrix_$Impl_$.toString(bits),null,{ fileName : "TestBitMatrix.hx", lineNumber : 36, className : "thx.TestBitMatrix", methodName : "testBitMatrix"});
		utest_Assert.same(4,thx__$BitMatrix_BitMatrix_$Impl_$.get_length(bits),null,null,null,{ fileName : "TestBitMatrix.hx", lineNumber : 37, className : "thx.TestBitMatrix", methodName : "testBitMatrix"});
		thx__$BitMatrix_BitMatrix_$Impl_$.setBitAt(bits,1,4,true);
		utest_Assert.equals("11110,00001,10100",thx__$BitMatrix_BitMatrix_$Impl_$.toString(bits),null,{ fileName : "TestBitMatrix.hx", lineNumber : 40, className : "thx.TestBitMatrix", methodName : "testBitMatrix"});
		utest_Assert.same(5,thx__$BitMatrix_BitMatrix_$Impl_$.get_length(bits),null,null,null,{ fileName : "TestBitMatrix.hx", lineNumber : 41, className : "thx.TestBitMatrix", methodName : "testBitMatrix"});
		thx__$BitMatrix_BitMatrix_$Impl_$.setBitAt(bits,2,5,true);
		utest_Assert.equals("111100,000010,101001",thx__$BitMatrix_BitMatrix_$Impl_$.toString(bits),null,{ fileName : "TestBitMatrix.hx", lineNumber : 44, className : "thx.TestBitMatrix", methodName : "testBitMatrix"});
		utest_Assert.same(6,thx__$BitMatrix_BitMatrix_$Impl_$.get_length(bits),null,null,null,{ fileName : "TestBitMatrix.hx", lineNumber : 45, className : "thx.TestBitMatrix", methodName : "testBitMatrix"});
	}
	,testClone: function() {
		var bits = thx__$BitMatrix_BitMatrix_$Impl_$._new(2,3);
		thx__$BitMatrix_BitMatrix_$Impl_$.setBitAt(bits,0,0,true);
		thx__$BitMatrix_BitMatrix_$Impl_$.setBitAt(bits,0,1,true);
		thx__$BitMatrix_BitMatrix_$Impl_$.setBitAt(bits,0,2,true);
		thx__$BitMatrix_BitMatrix_$Impl_$.setBitAt(bits,1,0,false);
		thx__$BitMatrix_BitMatrix_$Impl_$.setBitAt(bits,1,1,false);
		thx__$BitMatrix_BitMatrix_$Impl_$.setBitAt(bits,1,2,false);
		var clone = thx__$BitMatrix_BitMatrix_$Impl_$.clone(bits);
		thx__$BitMatrix_BitMatrix_$Impl_$.setBitAt(clone,0,1,false);
		thx__$BitMatrix_BitMatrix_$Impl_$.setBitAt(clone,1,1,true);
		utest_Assert.same("111,000",thx__$BitMatrix_BitMatrix_$Impl_$.toString(bits),null,null,null,{ fileName : "TestBitMatrix.hx", lineNumber : 59, className : "thx.TestBitMatrix", methodName : "testClone"});
		utest_Assert.same("101,010",thx__$BitMatrix_BitMatrix_$Impl_$.toString(clone),null,null,null,{ fileName : "TestBitMatrix.hx", lineNumber : 60, className : "thx.TestBitMatrix", methodName : "testClone"});
	}
	,testFromToString: function() {
		utest_Assert.same("000,111,101,010",thx__$BitMatrix_BitMatrix_$Impl_$.toString(thx__$BitMatrix_BitMatrix_$Impl_$.fromString("000,111,101,010")),null,null,null,{ fileName : "TestBitMatrix.hx", lineNumber : 65, className : "thx.TestBitMatrix", methodName : "testFromToString"});
	}
	,testFromToBools: function() {
		utest_Assert.same([[true,true],[false,false],[true,false],[false,true]],thx__$BitMatrix_BitMatrix_$Impl_$.toBools(thx__$BitMatrix_BitMatrix_$Impl_$.fromBools([[true,true],[false,false],[true,false],[false,true]])),null,null,null,{ fileName : "TestBitMatrix.hx", lineNumber : 70, className : "thx.TestBitMatrix", methodName : "testFromToBools"});
	}
	,testConcat: function() {
		var b1 = thx__$BitMatrix_BitMatrix_$Impl_$.fromString("000,111,101,010");
		var b2 = thx__$BitMatrix_BitMatrix_$Impl_$.fromString("111,000,111,000");
		var b3 = thx__$BitMatrix_BitMatrix_$Impl_$.concat(b1,b2);
		utest_Assert.same("000,111,101,010",thx__$BitMatrix_BitMatrix_$Impl_$.toString(b1),null,null,null,{ fileName : "TestBitMatrix.hx", lineNumber : 77, className : "thx.TestBitMatrix", methodName : "testConcat"});
		utest_Assert.same("111,000,111,000",thx__$BitMatrix_BitMatrix_$Impl_$.toString(b2),null,null,null,{ fileName : "TestBitMatrix.hx", lineNumber : 78, className : "thx.TestBitMatrix", methodName : "testConcat"});
		utest_Assert.same("000111,111000,101111,010000",thx__$BitMatrix_BitMatrix_$Impl_$.toString(b3),null,null,null,{ fileName : "TestBitMatrix.hx", lineNumber : 79, className : "thx.TestBitMatrix", methodName : "testConcat"});
		utest_Assert.same(4,thx__$BitMatrix_BitMatrix_$Impl_$.get_bitSetCount(b1),null,null,null,{ fileName : "TestBitMatrix.hx", lineNumber : 80, className : "thx.TestBitMatrix", methodName : "testConcat"});
		utest_Assert.same(4,thx__$BitMatrix_BitMatrix_$Impl_$.get_bitSetCount(b2),null,null,null,{ fileName : "TestBitMatrix.hx", lineNumber : 81, className : "thx.TestBitMatrix", methodName : "testConcat"});
		utest_Assert.same(4,thx__$BitMatrix_BitMatrix_$Impl_$.get_bitSetCount(b3),null,null,null,{ fileName : "TestBitMatrix.hx", lineNumber : 82, className : "thx.TestBitMatrix", methodName : "testConcat"});
		utest_Assert.same(3,thx__$BitMatrix_BitMatrix_$Impl_$.get_length(b1),null,null,null,{ fileName : "TestBitMatrix.hx", lineNumber : 83, className : "thx.TestBitMatrix", methodName : "testConcat"});
		utest_Assert.same(3,thx__$BitMatrix_BitMatrix_$Impl_$.get_length(b2),null,null,null,{ fileName : "TestBitMatrix.hx", lineNumber : 84, className : "thx.TestBitMatrix", methodName : "testConcat"});
		utest_Assert.same(6,thx__$BitMatrix_BitMatrix_$Impl_$.get_length(b3),null,null,null,{ fileName : "TestBitMatrix.hx", lineNumber : 85, className : "thx.TestBitMatrix", methodName : "testConcat"});
		utest_Assert.raises(function() {
			thx__$BitMatrix_BitMatrix_$Impl_$.concat(thx__$BitMatrix_BitMatrix_$Impl_$.fromString("000,111"),thx__$BitMatrix_BitMatrix_$Impl_$.fromString("000,111,000"));
		},null,null,null,{ fileName : "TestBitMatrix.hx", lineNumber : 87, className : "thx.TestBitMatrix", methodName : "testConcat"});
	}
	,testExpand: function() {
		var b1 = thx__$BitMatrix_BitMatrix_$Impl_$.fromString("000,111,101,010");
		var b2 = thx__$BitMatrix_BitMatrix_$Impl_$.expand(b1,1);
		var b3 = thx__$BitMatrix_BitMatrix_$Impl_$.expand(b1,3);
		utest_Assert.same("000,111,101,010",thx__$BitMatrix_BitMatrix_$Impl_$.toString(b1),null,null,null,{ fileName : "TestBitMatrix.hx", lineNumber : 98, className : "thx.TestBitMatrix", methodName : "testExpand"});
		utest_Assert.same("000000,111111,110011,001100",thx__$BitMatrix_BitMatrix_$Impl_$.toString(b2),null,null,null,{ fileName : "TestBitMatrix.hx", lineNumber : 99, className : "thx.TestBitMatrix", methodName : "testExpand"});
		utest_Assert.same("000000000000,111111111111,111100001111,000011110000",thx__$BitMatrix_BitMatrix_$Impl_$.toString(b3),null,null,null,{ fileName : "TestBitMatrix.hx", lineNumber : 100, className : "thx.TestBitMatrix", methodName : "testExpand"});
	}
	,testAnd: function() {
		var actual = thx__$BitMatrix_BitMatrix_$Impl_$.and(thx__$BitMatrix_BitMatrix_$Impl_$.fromString("11,00"),thx__$BitMatrix_BitMatrix_$Impl_$.fromString("10,10"));
		utest_Assert.isTrue(thx__$BitMatrix_BitMatrix_$Impl_$.equals(thx__$BitMatrix_BitMatrix_$Impl_$.fromString("10,00"),actual),null,{ fileName : "TestBitMatrix.hx", lineNumber : 108, className : "thx.TestBitMatrix", methodName : "testAnd"});
	}
	,testOr: function() {
		var actual = thx__$BitMatrix_BitMatrix_$Impl_$.or(thx__$BitMatrix_BitMatrix_$Impl_$.fromString("11,00"),thx__$BitMatrix_BitMatrix_$Impl_$.fromString("10,10"));
		utest_Assert.isTrue(thx__$BitMatrix_BitMatrix_$Impl_$.equals(thx__$BitMatrix_BitMatrix_$Impl_$.fromString("11,10"),actual),null,{ fileName : "TestBitMatrix.hx", lineNumber : 116, className : "thx.TestBitMatrix", methodName : "testOr"});
	}
	,testXor: function() {
		var actual = thx__$BitMatrix_BitMatrix_$Impl_$.xor(thx__$BitMatrix_BitMatrix_$Impl_$.fromString("11,00"),thx__$BitMatrix_BitMatrix_$Impl_$.fromString("10,10"));
		utest_Assert.isTrue(thx__$BitMatrix_BitMatrix_$Impl_$.equals(thx__$BitMatrix_BitMatrix_$Impl_$.fromString("01,10"),actual),null,{ fileName : "TestBitMatrix.hx", lineNumber : 124, className : "thx.TestBitMatrix", methodName : "testXor"});
	}
	,testNegate: function() {
		var actual = thx__$BitMatrix_BitMatrix_$Impl_$.negate(thx__$BitMatrix_BitMatrix_$Impl_$.fromString("11,00"));
		utest_Assert.isTrue(thx__$BitMatrix_BitMatrix_$Impl_$.equals(thx__$BitMatrix_BitMatrix_$Impl_$.fromString("00,11"),actual),null,{ fileName : "TestBitMatrix.hx", lineNumber : 131, className : "thx.TestBitMatrix", methodName : "testNegate"});
	}
	,__class__: thx_TestBitMatrix
};
var thx_TestBitSet = function() {
};
thx_TestBitSet.__name__ = ["thx","TestBitSet"];
thx_TestBitSet.prototype = {
	testBitSet: function() {
		var bits = [0];
		utest_Assert.same(0,thx__$BitSet_BitSet_$Impl_$.get_length(bits),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 11, className : "thx.TestBitSet", methodName : "testBitSet"});
		utest_Assert.same("",thx__$BitSet_BitSet_$Impl_$.toString(bits),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 12, className : "thx.TestBitSet", methodName : "testBitSet"});
		utest_Assert.raises(function() {
			thx__$BitSet_BitSet_$Impl_$.at(bits,0);
		},null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 14, className : "thx.TestBitSet", methodName : "testBitSet"});
		utest_Assert.raises(function() {
			thx__$BitSet_BitSet_$Impl_$.at(bits,-1);
		},null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 15, className : "thx.TestBitSet", methodName : "testBitSet"});
		utest_Assert.raises(function() {
			thx__$BitSet_BitSet_$Impl_$.at(bits,1);
		},null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 16, className : "thx.TestBitSet", methodName : "testBitSet"});
		utest_Assert.raises(function() {
			thx__$BitSet_BitSet_$Impl_$.at(bits,4);
		},null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 17, className : "thx.TestBitSet", methodName : "testBitSet"});
		thx__$BitSet_BitSet_$Impl_$.setAt(bits,0,true);
		utest_Assert.same(1,thx__$BitSet_BitSet_$Impl_$.get_length(bits),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 20, className : "thx.TestBitSet", methodName : "testBitSet"});
		utest_Assert.same("1",thx__$BitSet_BitSet_$Impl_$.toString(bits),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 21, className : "thx.TestBitSet", methodName : "testBitSet"});
		thx__$BitSet_BitSet_$Impl_$.setAt(bits,1,true);
		utest_Assert.same(2,thx__$BitSet_BitSet_$Impl_$.get_length(bits),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 24, className : "thx.TestBitSet", methodName : "testBitSet"});
		utest_Assert.same("11",thx__$BitSet_BitSet_$Impl_$.toString(bits),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 25, className : "thx.TestBitSet", methodName : "testBitSet"});
		thx__$BitSet_BitSet_$Impl_$.setAt(bits,2,true);
		utest_Assert.same(3,thx__$BitSet_BitSet_$Impl_$.get_length(bits),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 28, className : "thx.TestBitSet", methodName : "testBitSet"});
		utest_Assert.same("111",thx__$BitSet_BitSet_$Impl_$.toString(bits),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 29, className : "thx.TestBitSet", methodName : "testBitSet"});
		thx__$BitSet_BitSet_$Impl_$.setAt(bits,1,false);
		utest_Assert.same(3,thx__$BitSet_BitSet_$Impl_$.get_length(bits),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 32, className : "thx.TestBitSet", methodName : "testBitSet"});
		utest_Assert.same("101",thx__$BitSet_BitSet_$Impl_$.toString(bits),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 33, className : "thx.TestBitSet", methodName : "testBitSet"});
		thx__$BitSet_BitSet_$Impl_$.setAt(bits,32,true);
		utest_Assert.same(33,thx__$BitSet_BitSet_$Impl_$.get_length(bits),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 37, className : "thx.TestBitSet", methodName : "testBitSet"});
		utest_Assert.same("101000000000000000000000000000001",thx__$BitSet_BitSet_$Impl_$.toString(bits),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 38, className : "thx.TestBitSet", methodName : "testBitSet"});
		var _g1 = 0;
		var _g = thx__$BitSet_BitSet_$Impl_$.get_length(bits);
		while(_g1 < _g) {
			var i = _g1++;
			if(thx_Arrays.contains([0,2,32],i)) {
				utest_Assert.isTrue(thx__$BitSet_BitSet_$Impl_$.at(bits,i),null,{ fileName : "TestBitSet.hx", lineNumber : 42, className : "thx.TestBitSet", methodName : "testBitSet"});
			} else {
				utest_Assert.isFalse(thx__$BitSet_BitSet_$Impl_$.at(bits,i),null,{ fileName : "TestBitSet.hx", lineNumber : 44, className : "thx.TestBitSet", methodName : "testBitSet"});
			}
		}
		utest_Assert.raises(function() {
			thx__$BitSet_BitSet_$Impl_$.at(bits,thx__$BitSet_BitSet_$Impl_$.get_length(bits) + 1 | 0);
		},null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 48, className : "thx.TestBitSet", methodName : "testBitSet"});
		var _g11 = 0;
		var _g2 = thx__$BitSet_BitSet_$Impl_$.get_length(bits);
		while(_g11 < _g2) thx__$BitSet_BitSet_$Impl_$.setAt(bits,_g11++,true);
		utest_Assert.same(33,thx__$BitSet_BitSet_$Impl_$.get_length(bits),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 51, className : "thx.TestBitSet", methodName : "testBitSet"});
		utest_Assert.same("111111111111111111111111111111111",thx__$BitSet_BitSet_$Impl_$.toString(bits),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 52, className : "thx.TestBitSet", methodName : "testBitSet"});
		var _g12 = 0;
		var _g3 = thx__$BitSet_BitSet_$Impl_$.get_length(bits);
		while(_g12 < _g3) thx__$BitSet_BitSet_$Impl_$.setAt(bits,_g12++,false);
		utest_Assert.same(33,thx__$BitSet_BitSet_$Impl_$.get_length(bits),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 55, className : "thx.TestBitSet", methodName : "testBitSet"});
		utest_Assert.same("000000000000000000000000000000000",thx__$BitSet_BitSet_$Impl_$.toString(bits),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 56, className : "thx.TestBitSet", methodName : "testBitSet"});
	}
	,testFromBools: function() {
		var bits = thx_Arrays.reducei([true,false,true,true],function(acc,value,i) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc,i,value);
			return acc;
		},[0]);
		utest_Assert.same(4,thx__$BitSet_BitSet_$Impl_$.get_length(bits),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 61, className : "thx.TestBitSet", methodName : "testFromBools"});
		utest_Assert.same(true,thx__$BitSet_BitSet_$Impl_$.at(bits,0),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 62, className : "thx.TestBitSet", methodName : "testFromBools"});
		utest_Assert.same(false,thx__$BitSet_BitSet_$Impl_$.at(bits,1),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 63, className : "thx.TestBitSet", methodName : "testFromBools"});
		utest_Assert.same(true,thx__$BitSet_BitSet_$Impl_$.at(bits,2),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 64, className : "thx.TestBitSet", methodName : "testFromBools"});
		utest_Assert.same(true,thx__$BitSet_BitSet_$Impl_$.at(bits,3),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 65, className : "thx.TestBitSet", methodName : "testFromBools"});
	}
	,testToBools: function() {
		var this1 = thx_Arrays.reducei("10101".split(""),function(acc,$char,i) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc,i,$char == "1");
			return acc;
		},[0]);
		utest_Assert.same([true,false,true,false,true],thx_Ints.range(thx__$BitSet_BitSet_$Impl_$.get_length(this1)).map(function(index) {
			return thx__$BitSet_BitSet_$Impl_$.at(this1,index);
		}),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 70, className : "thx.TestBitSet", methodName : "testToBools"});
	}
	,testToInt32s: function() {
		utest_Assert.same([21],thx_Arrays.reducei("10101".split(""),function(acc,$char,i) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc,i,$char == "1");
			return acc;
		},[0]).slice(1),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 76, className : "thx.TestBitSet", methodName : "testToInt32s"});
	}
	,testFromString: function() {
		var bits = thx_Arrays.reducei("1011".split(""),function(acc,$char,i) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc,i,$char == "1");
			return acc;
		},[0]);
		utest_Assert.same(4,thx__$BitSet_BitSet_$Impl_$.get_length(bits),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 81, className : "thx.TestBitSet", methodName : "testFromString"});
		utest_Assert.same(true,thx__$BitSet_BitSet_$Impl_$.at(bits,0),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 82, className : "thx.TestBitSet", methodName : "testFromString"});
		utest_Assert.same(false,thx__$BitSet_BitSet_$Impl_$.at(bits,1),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 83, className : "thx.TestBitSet", methodName : "testFromString"});
		utest_Assert.same(true,thx__$BitSet_BitSet_$Impl_$.at(bits,2),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 84, className : "thx.TestBitSet", methodName : "testFromString"});
		utest_Assert.same(true,thx__$BitSet_BitSet_$Impl_$.at(bits,3),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 85, className : "thx.TestBitSet", methodName : "testFromString"});
	}
	,testPresetLength: function() {
		var bits1 = [35];
		utest_Assert.same(35,thx__$BitSet_BitSet_$Impl_$.get_length(bits1),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 90, className : "thx.TestBitSet", methodName : "testPresetLength"});
		var _g = 0;
		while(_g < 35) utest_Assert.isFalse(thx__$BitSet_BitSet_$Impl_$.at(bits1,_g++),null,{ fileName : "TestBitSet.hx", lineNumber : 92, className : "thx.TestBitSet", methodName : "testPresetLength"});
		utest_Assert.raises(function() {
			thx__$BitSet_BitSet_$Impl_$.at(bits1,35);
		},null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 94, className : "thx.TestBitSet", methodName : "testPresetLength"});
		var this1 = [35];
		var _g1 = 0;
		var _g2 = thx__$BitSet_BitSet_$Impl_$.get_length(this1);
		while(_g1 < _g2) thx__$BitSet_BitSet_$Impl_$.setAt(this1,_g1++,true);
		var bits2 = this1;
		utest_Assert.same(35,thx__$BitSet_BitSet_$Impl_$.get_length(bits2),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 97, className : "thx.TestBitSet", methodName : "testPresetLength"});
		var _g3 = 0;
		while(_g3 < 35) utest_Assert.isTrue(thx__$BitSet_BitSet_$Impl_$.at(bits2,_g3++),null,{ fileName : "TestBitSet.hx", lineNumber : 99, className : "thx.TestBitSet", methodName : "testPresetLength"});
		utest_Assert.raises(function() {
			thx__$BitSet_BitSet_$Impl_$.at(bits2,35);
		},null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 101, className : "thx.TestBitSet", methodName : "testPresetLength"});
	}
	,testConcat: function() {
		var b1 = thx_Arrays.reducei("10101".split(""),function(acc,$char,i) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc,i,$char == "1");
			return acc;
		},[0]);
		var b2 = thx_Arrays.reducei("111".split(""),function(acc1,char1,i1) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc1,i1,char1 == "1");
			return acc1;
		},[0]);
		var result = [thx__$BitSet_BitSet_$Impl_$.get_length(b1) + thx__$BitSet_BitSet_$Impl_$.get_length(b2) | 0];
		var index = 0;
		var _g1 = 0;
		var _g = thx__$BitSet_BitSet_$Impl_$.get_length(b1);
		while(_g1 < _g) thx__$BitSet_BitSet_$Impl_$.setAt(result,index++,thx__$BitSet_BitSet_$Impl_$.at(b1,_g1++));
		var _g11 = 0;
		var _g2 = thx__$BitSet_BitSet_$Impl_$.get_length(b2);
		while(_g11 < _g2) thx__$BitSet_BitSet_$Impl_$.setAt(result,index++,thx__$BitSet_BitSet_$Impl_$.at(b2,_g11++));
		utest_Assert.same("10101",thx__$BitSet_BitSet_$Impl_$.toString(b1),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 108, className : "thx.TestBitSet", methodName : "testConcat"});
		utest_Assert.same("111",thx__$BitSet_BitSet_$Impl_$.toString(b2),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 109, className : "thx.TestBitSet", methodName : "testConcat"});
		utest_Assert.same("10101111",thx__$BitSet_BitSet_$Impl_$.toString(result),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 110, className : "thx.TestBitSet", methodName : "testConcat"});
		utest_Assert.same(5,thx__$BitSet_BitSet_$Impl_$.get_length(b1),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 111, className : "thx.TestBitSet", methodName : "testConcat"});
		utest_Assert.same(3,thx__$BitSet_BitSet_$Impl_$.get_length(b2),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 112, className : "thx.TestBitSet", methodName : "testConcat"});
		utest_Assert.same(8,thx__$BitSet_BitSet_$Impl_$.get_length(result),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 113, className : "thx.TestBitSet", methodName : "testConcat"});
	}
	,testExpand: function() {
		var b1 = thx_Arrays.reducei("1011".split(""),function(acc,$char,i) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc,i,$char == "1");
			return acc;
		},[0]);
		var b2 = thx__$BitSet_BitSet_$Impl_$.expand(b1,1);
		var b3 = thx__$BitSet_BitSet_$Impl_$.expand(b1,3);
		utest_Assert.same("1011",thx__$BitSet_BitSet_$Impl_$.toString(b1),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 120, className : "thx.TestBitSet", methodName : "testExpand"});
		utest_Assert.same("11001111",thx__$BitSet_BitSet_$Impl_$.toString(b2),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 121, className : "thx.TestBitSet", methodName : "testExpand"});
		utest_Assert.same("1111000011111111",thx__$BitSet_BitSet_$Impl_$.toString(b3),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 122, className : "thx.TestBitSet", methodName : "testExpand"});
	}
	,testEquals: function() {
		var b1 = thx_Arrays.reducei("10101100".split(""),function(acc,$char,i) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc,i,$char == "1");
			return acc;
		},[0]);
		var b2 = thx_Arrays.reducei("10101100".split(""),function(acc1,char1,i1) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc1,i1,char1 == "1");
			return acc1;
		},[0]);
		var b3 = thx_Arrays.reducei("101011001".split(""),function(acc2,char2,i2) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc2,i2,char2 == "1");
			return acc2;
		},[0]);
		var b4 = thx_Arrays.reducei("10101101".split(""),function(acc3,char3,i3) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc3,i3,char3 == "1");
			return acc3;
		},[0]);
		var b5 = thx_Arrays.reducei("1010110".split(""),function(acc4,char4,i4) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc4,i4,char4 == "1");
			return acc4;
		},[0]);
		utest_Assert.isTrue(thx__$BitSet_BitSet_$Impl_$.equals(b1,b2),null,{ fileName : "TestBitSet.hx", lineNumber : 131, className : "thx.TestBitSet", methodName : "testEquals"});
		utest_Assert.isFalse(thx__$BitSet_BitSet_$Impl_$.equals(b1,b3),null,{ fileName : "TestBitSet.hx", lineNumber : 132, className : "thx.TestBitSet", methodName : "testEquals"});
		utest_Assert.isFalse(thx__$BitSet_BitSet_$Impl_$.equals(b1,b4),null,{ fileName : "TestBitSet.hx", lineNumber : 133, className : "thx.TestBitSet", methodName : "testEquals"});
		utest_Assert.isFalse(thx__$BitSet_BitSet_$Impl_$.equals(b1,b5),null,{ fileName : "TestBitSet.hx", lineNumber : 134, className : "thx.TestBitSet", methodName : "testEquals"});
		utest_Assert.isTrue(thx__$BitSet_BitSet_$Impl_$.equals(b1,b2),null,{ fileName : "TestBitSet.hx", lineNumber : 135, className : "thx.TestBitSet", methodName : "testEquals"});
		utest_Assert.isFalse(thx__$BitSet_BitSet_$Impl_$.equals(b1,b3),null,{ fileName : "TestBitSet.hx", lineNumber : 136, className : "thx.TestBitSet", methodName : "testEquals"});
		utest_Assert.isFalse(thx__$BitSet_BitSet_$Impl_$.equals(b1,b4),null,{ fileName : "TestBitSet.hx", lineNumber : 137, className : "thx.TestBitSet", methodName : "testEquals"});
		utest_Assert.isFalse(thx__$BitSet_BitSet_$Impl_$.equals(b1,b5),null,{ fileName : "TestBitSet.hx", lineNumber : 138, className : "thx.TestBitSet", methodName : "testEquals"});
	}
	,testNotEquals: function() {
		var b1 = thx_Arrays.reducei("10101100".split(""),function(acc,$char,i) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc,i,$char == "1");
			return acc;
		},[0]);
		var b2 = thx_Arrays.reducei("10101100".split(""),function(acc1,char1,i1) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc1,i1,char1 == "1");
			return acc1;
		},[0]);
		var b3 = thx_Arrays.reducei("101011001".split(""),function(acc2,char2,i2) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc2,i2,char2 == "1");
			return acc2;
		},[0]);
		var b4 = thx_Arrays.reducei("10101101".split(""),function(acc3,char3,i3) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc3,i3,char3 == "1");
			return acc3;
		},[0]);
		var b5 = thx_Arrays.reducei("1010110".split(""),function(acc4,char4,i4) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc4,i4,char4 == "1");
			return acc4;
		},[0]);
		utest_Assert.isFalse(thx__$BitSet_BitSet_$Impl_$.notEquals(b1,b2),null,{ fileName : "TestBitSet.hx", lineNumber : 147, className : "thx.TestBitSet", methodName : "testNotEquals"});
		utest_Assert.isTrue(thx__$BitSet_BitSet_$Impl_$.notEquals(b1,b3),null,{ fileName : "TestBitSet.hx", lineNumber : 148, className : "thx.TestBitSet", methodName : "testNotEquals"});
		utest_Assert.isTrue(thx__$BitSet_BitSet_$Impl_$.notEquals(b1,b4),null,{ fileName : "TestBitSet.hx", lineNumber : 149, className : "thx.TestBitSet", methodName : "testNotEquals"});
		utest_Assert.isTrue(thx__$BitSet_BitSet_$Impl_$.notEquals(b1,b5),null,{ fileName : "TestBitSet.hx", lineNumber : 150, className : "thx.TestBitSet", methodName : "testNotEquals"});
		utest_Assert.isFalse(thx__$BitSet_BitSet_$Impl_$.notEquals(b1,b2),null,{ fileName : "TestBitSet.hx", lineNumber : 151, className : "thx.TestBitSet", methodName : "testNotEquals"});
		utest_Assert.isTrue(thx__$BitSet_BitSet_$Impl_$.notEquals(b1,b3),null,{ fileName : "TestBitSet.hx", lineNumber : 152, className : "thx.TestBitSet", methodName : "testNotEquals"});
		utest_Assert.isTrue(thx__$BitSet_BitSet_$Impl_$.notEquals(b1,b4),null,{ fileName : "TestBitSet.hx", lineNumber : 153, className : "thx.TestBitSet", methodName : "testNotEquals"});
		utest_Assert.isTrue(thx__$BitSet_BitSet_$Impl_$.notEquals(b1,b5),null,{ fileName : "TestBitSet.hx", lineNumber : 154, className : "thx.TestBitSet", methodName : "testNotEquals"});
	}
	,testAnd: function() {
		var b1 = thx_Arrays.reducei("10101100".split(""),function(acc,$char,i) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc,i,$char == "1");
			return acc;
		},[0]);
		var b2 = thx_Arrays.reducei("11111111".split(""),function(acc1,char1,i1) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc1,i1,char1 == "1");
			return acc1;
		},[0]);
		var b3 = thx_Arrays.reducei("00000000".split(""),function(acc2,char2,i2) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc2,i2,char2 == "1");
			return acc2;
		},[0]);
		var b4 = thx_Arrays.reducei("111".split(""),function(acc3,char3,i3) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc3,i3,char3 == "1");
			return acc3;
		},[0]);
		var b5 = thx_Arrays.reducei("000".split(""),function(acc4,char4,i4) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc4,i4,char4 == "1");
			return acc4;
		},[0]);
		utest_Assert.isTrue(thx__$BitSet_BitSet_$Impl_$.equals(thx_Arrays.reducei("10101100".split(""),function(acc5,char5,i5) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc5,i5,char5 == "1");
			return acc5;
		},[0]),thx__$BitSet_BitSet_$Impl_$.and(b1,b2)),null,{ fileName : "TestBitSet.hx", lineNumber : 163, className : "thx.TestBitSet", methodName : "testAnd"});
		utest_Assert.isTrue(thx__$BitSet_BitSet_$Impl_$.equals(thx_Arrays.reducei("00000000".split(""),function(acc6,char6,i6) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc6,i6,char6 == "1");
			return acc6;
		},[0]),thx__$BitSet_BitSet_$Impl_$.and(b1,b3)),null,{ fileName : "TestBitSet.hx", lineNumber : 164, className : "thx.TestBitSet", methodName : "testAnd"});
		utest_Assert.raises(function() {
			thx__$BitSet_BitSet_$Impl_$.and(b1,b4);
		},null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 165, className : "thx.TestBitSet", methodName : "testAnd"});
		utest_Assert.raises(function() {
			thx__$BitSet_BitSet_$Impl_$.and(b1,b5);
		},null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 166, className : "thx.TestBitSet", methodName : "testAnd"});
	}
	,testOr: function() {
		var b1 = thx_Arrays.reducei("10101100".split(""),function(acc,$char,i) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc,i,$char == "1");
			return acc;
		},[0]);
		var b2 = thx_Arrays.reducei("11111111".split(""),function(acc1,char1,i1) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc1,i1,char1 == "1");
			return acc1;
		},[0]);
		var b3 = thx_Arrays.reducei("00000000".split(""),function(acc2,char2,i2) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc2,i2,char2 == "1");
			return acc2;
		},[0]);
		var b4 = thx_Arrays.reducei("111".split(""),function(acc3,char3,i3) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc3,i3,char3 == "1");
			return acc3;
		},[0]);
		var b5 = thx_Arrays.reducei("000".split(""),function(acc4,char4,i4) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc4,i4,char4 == "1");
			return acc4;
		},[0]);
		utest_Assert.isTrue(thx__$BitSet_BitSet_$Impl_$.equals(thx_Arrays.reducei("11111111".split(""),function(acc5,char5,i5) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc5,i5,char5 == "1");
			return acc5;
		},[0]),thx__$BitSet_BitSet_$Impl_$.or(b1,b2)),null,{ fileName : "TestBitSet.hx", lineNumber : 175, className : "thx.TestBitSet", methodName : "testOr"});
		utest_Assert.isTrue(thx__$BitSet_BitSet_$Impl_$.equals(thx_Arrays.reducei("10101100".split(""),function(acc6,char6,i6) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc6,i6,char6 == "1");
			return acc6;
		},[0]),thx__$BitSet_BitSet_$Impl_$.or(b1,b3)),null,{ fileName : "TestBitSet.hx", lineNumber : 176, className : "thx.TestBitSet", methodName : "testOr"});
		utest_Assert.raises(function() {
			thx__$BitSet_BitSet_$Impl_$.or(b1,b4);
		},null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 177, className : "thx.TestBitSet", methodName : "testOr"});
		utest_Assert.raises(function() {
			thx__$BitSet_BitSet_$Impl_$.or(b1,b5);
		},null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 178, className : "thx.TestBitSet", methodName : "testOr"});
	}
	,testXor: function() {
		var b1 = thx_Arrays.reducei("10101100".split(""),function(acc,$char,i) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc,i,$char == "1");
			return acc;
		},[0]);
		var b2 = thx_Arrays.reducei("11111111".split(""),function(acc1,char1,i1) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc1,i1,char1 == "1");
			return acc1;
		},[0]);
		var b3 = thx_Arrays.reducei("00000000".split(""),function(acc2,char2,i2) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc2,i2,char2 == "1");
			return acc2;
		},[0]);
		var b4 = thx_Arrays.reducei("111".split(""),function(acc3,char3,i3) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc3,i3,char3 == "1");
			return acc3;
		},[0]);
		var b5 = thx_Arrays.reducei("000".split(""),function(acc4,char4,i4) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc4,i4,char4 == "1");
			return acc4;
		},[0]);
		utest_Assert.isTrue(thx__$BitSet_BitSet_$Impl_$.equals(thx_Arrays.reducei("01010011".split(""),function(acc5,char5,i5) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc5,i5,char5 == "1");
			return acc5;
		},[0]),thx__$BitSet_BitSet_$Impl_$.xor(b1,b2)),null,{ fileName : "TestBitSet.hx", lineNumber : 187, className : "thx.TestBitSet", methodName : "testXor"});
		utest_Assert.isTrue(thx__$BitSet_BitSet_$Impl_$.equals(thx_Arrays.reducei("10101100".split(""),function(acc6,char6,i6) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc6,i6,char6 == "1");
			return acc6;
		},[0]),thx__$BitSet_BitSet_$Impl_$.xor(b1,b3)),null,{ fileName : "TestBitSet.hx", lineNumber : 188, className : "thx.TestBitSet", methodName : "testXor"});
		utest_Assert.raises(function() {
			thx__$BitSet_BitSet_$Impl_$.xor(b1,b4);
		},null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 189, className : "thx.TestBitSet", methodName : "testXor"});
		utest_Assert.raises(function() {
			thx__$BitSet_BitSet_$Impl_$.xor(b1,b5);
		},null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 190, className : "thx.TestBitSet", methodName : "testXor"});
	}
	,testNegate: function() {
		utest_Assert.isTrue(thx__$BitSet_BitSet_$Impl_$.equals(thx_Arrays.reducei("00000000".split(""),function(acc,$char,i) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc,i,$char == "1");
			return acc;
		},[0]),thx__$BitSet_BitSet_$Impl_$.negate(thx_Arrays.reducei("11111111".split(""),function(acc1,char1,i1) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc1,i1,char1 == "1");
			return acc1;
		},[0]))),null,{ fileName : "TestBitSet.hx", lineNumber : 194, className : "thx.TestBitSet", methodName : "testNegate"});
		utest_Assert.isTrue(thx__$BitSet_BitSet_$Impl_$.equals(thx_Arrays.reducei("11111111".split(""),function(acc2,char2,i2) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc2,i2,char2 == "1");
			return acc2;
		},[0]),thx__$BitSet_BitSet_$Impl_$.negate(thx_Arrays.reducei("00000000".split(""),function(acc3,char3,i3) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc3,i3,char3 == "1");
			return acc3;
		},[0]))),null,{ fileName : "TestBitSet.hx", lineNumber : 195, className : "thx.TestBitSet", methodName : "testNegate"});
		utest_Assert.isTrue(thx__$BitSet_BitSet_$Impl_$.equals(thx_Arrays.reducei("01010011".split(""),function(acc4,char4,i4) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc4,i4,char4 == "1");
			return acc4;
		},[0]),thx__$BitSet_BitSet_$Impl_$.negate(thx_Arrays.reducei("10101100".split(""),function(acc5,char5,i5) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc5,i5,char5 == "1");
			return acc5;
		},[0]))),null,{ fileName : "TestBitSet.hx", lineNumber : 196, className : "thx.TestBitSet", methodName : "testNegate"});
	}
	,testClone: function() {
		var a = thx_Arrays.reducei("0101".split(""),function(acc,$char,i) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc,i,$char == "1");
			return acc;
		},[0]);
		var this1 = a;
		var b = thx_Arrays.reduce(thx_Ints.range(thx__$BitSet_BitSet_$Impl_$.get_length(this1)),function(acc1,i1) {
			thx__$BitSet_BitSet_$Impl_$.setAt(acc1,i1,thx__$BitSet_BitSet_$Impl_$.at(this1,i1));
			return acc1;
		},[0]);
		thx__$BitSet_BitSet_$Impl_$.setAt(b,0,true);
		utest_Assert.same("0101",thx__$BitSet_BitSet_$Impl_$.toString(a),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 203, className : "thx.TestBitSet", methodName : "testClone"});
		utest_Assert.same("1101",thx__$BitSet_BitSet_$Impl_$.toString(b),null,null,null,{ fileName : "TestBitSet.hx", lineNumber : 204, className : "thx.TestBitSet", methodName : "testClone"});
	}
	,__class__: thx_TestBitSet
};
var thx_TestChar = function() {
};
thx_TestChar.__name__ = ["thx","TestChar"];
thx_TestChar.prototype = {
	testChar: function() {
		thx_Assert.isTrue(true,"Char value should be greater than zero: " + 120,{ fileName : "Char.hx", lineNumber : 19, className : "thx._Char.Char_Impl_", methodName : "fromInt"});
		var $char = 120;
		utest_Assert.equals(120,$char,null,{ fileName : "TestChar.hx", lineNumber : 13, className : "thx.TestChar", methodName : "testChar"});
		String.fromCharCode($char);
		utest_Assert.equals("x","x",null,{ fileName : "TestChar.hx", lineNumber : 14, className : "thx.TestChar", methodName : "testChar"});
		var i = HxOverrides.cca("y",0);
		thx_Assert.isTrue(i >= 0,"Char value should be greater than zero: " + i,{ fileName : "Char.hx", lineNumber : 19, className : "thx._Char.Char_Impl_", methodName : "fromInt"});
		$char = i;
		utest_Assert.equals(121,$char,null,{ fileName : "TestChar.hx", lineNumber : 18, className : "thx.TestChar", methodName : "testChar"});
		utest_Assert.equals("y",String.fromCharCode($char),null,{ fileName : "TestChar.hx", lineNumber : 19, className : "thx.TestChar", methodName : "testChar"});
		utest_Assert.equals(89,thx__$Char_Char_$Impl_$.toUpperCase($char),null,{ fileName : "TestChar.hx", lineNumber : 21, className : "thx.TestChar", methodName : "testChar"});
		utest_Assert.equals("Y",String.fromCharCode(thx__$Char_Char_$Impl_$.toUpperCase($char)),null,{ fileName : "TestChar.hx", lineNumber : 22, className : "thx.TestChar", methodName : "testChar"});
		$char = thx__$Char_Char_$Impl_$.next($char);
		utest_Assert.equals(122,$char,null,{ fileName : "TestChar.hx", lineNumber : 26, className : "thx.TestChar", methodName : "testChar"});
		utest_Assert.equals("z",String.fromCharCode($char),null,{ fileName : "TestChar.hx", lineNumber : 27, className : "thx.TestChar", methodName : "testChar"});
		utest_Assert.equals(121,thx__$Char_Char_$Impl_$.prev($char),null,{ fileName : "TestChar.hx", lineNumber : 29, className : "thx.TestChar", methodName : "testChar"});
	}
	,testControl: function() {
		thx_Assert.isTrue(true,"Char value should be greater than zero: " + 7,{ fileName : "Char.hx", lineNumber : 19, className : "thx._Char.Char_Impl_", methodName : "fromInt"});
		utest_Assert.isTrue(thx__$Char_Char_$Impl_$.isControl(7),null,{ fileName : "TestChar.hx", lineNumber : 33, className : "thx.TestChar", methodName : "testControl"});
		var i = HxOverrides.cca("x",0);
		thx_Assert.isTrue(i >= 0,"Char value should be greater than zero: " + i,{ fileName : "Char.hx", lineNumber : 19, className : "thx._Char.Char_Impl_", methodName : "fromInt"});
		utest_Assert.isFalse(thx__$Char_Char_$Impl_$.isControl(i),null,{ fileName : "TestChar.hx", lineNumber : 34, className : "thx.TestChar", methodName : "testControl"});
	}
	,testUtf8: function() {
		var i = HxOverrides.cca("☺",0);
		thx_Assert.isTrue(i >= 0,"Char value should be greater than zero: " + i,{ fileName : "Char.hx", lineNumber : 19, className : "thx._Char.Char_Impl_", methodName : "fromInt"});
		utest_Assert.equals(9786,i,null,{ fileName : "TestChar.hx", lineNumber : 38, className : "thx.TestChar", methodName : "testUtf8"});
		thx_Assert.isTrue(true,"Char value should be greater than zero: " + 9786,{ fileName : "Char.hx", lineNumber : 19, className : "thx._Char.Char_Impl_", methodName : "fromInt"});
		utest_Assert.equals("☺",String.fromCharCode(9786),null,{ fileName : "TestChar.hx", lineNumber : 39, className : "thx.TestChar", methodName : "testUtf8"});
	}
	,testArrayToString: function() {
		thx_Assert.isTrue(true,"Char value should be greater than zero: " + 120,{ fileName : "Char.hx", lineNumber : 19, className : "thx._Char.Char_Impl_", methodName : "fromInt"});
		var tmp = 120;
		thx_Assert.isTrue(true,"Char value should be greater than zero: " + 121,{ fileName : "Char.hx", lineNumber : 19, className : "thx._Char.Char_Impl_", methodName : "fromInt"});
		var tmp1 = 121;
		thx_Assert.isTrue(true,"Char value should be greater than zero: " + 122,{ fileName : "Char.hx", lineNumber : 19, className : "thx._Char.Char_Impl_", methodName : "fromInt"});
		utest_Assert.equals("xyz",thx__$Char_Char_$Impl_$.arrayToString([tmp,tmp1,122]),null,{ fileName : "TestChar.hx", lineNumber : 44, className : "thx.TestChar", methodName : "testArrayToString"});
	}
	,__class__: thx_TestChar
};
var thx_TestChars = function() {
};
thx_TestChars.__name__ = ["thx","TestChars"];
thx_TestChars.prototype = {
	testChars: function() {
		var t = thx__$Chars_Chars_$Impl_$.fromString("a☺b☺☺c☺☺☺");
		utest_Assert.same([97,9786,98,9786,9786,99,9786,9786,9786],t,null,null,null,{ fileName : "TestChars.hx", lineNumber : 14, className : "thx.TestChars", methodName : "testChars"});
		utest_Assert.equals("a☺b☺☺c☺☺☺",thx__$Chars_Chars_$Impl_$.toString(t),null,{ fileName : "TestChars.hx", lineNumber : 15, className : "thx.TestChars", methodName : "testChars"});
	}
	,testArrayAccess: function() {
		var chars = thx__$Chars_Chars_$Impl_$.fromString("a☺b☺☺c☺☺☺");
		utest_Assert.equals(9786,chars[1],null,{ fileName : "TestChars.hx", lineNumber : 20, className : "thx.TestChars", methodName : "testArrayAccess"});
		utest_Assert.equals(99,chars[5],null,{ fileName : "TestChars.hx", lineNumber : 21, className : "thx.TestChars", methodName : "testArrayAccess"});
	}
	,__class__: thx_TestChars
};
var thx_TestConvert = function() {
};
thx_TestConvert.__name__ = ["thx","TestConvert"];
thx_TestConvert.prototype = {
	testString: function() {
		utest_Assert.equals("1",thx_Convert.toString(1),null,{ fileName : "TestConvert.hx", lineNumber : 9, className : "thx.TestConvert", methodName : "testString"});
		utest_Assert.equals("1",thx_Convert.toStringOr(null,"1"),null,{ fileName : "TestConvert.hx", lineNumber : 10, className : "thx.TestConvert", methodName : "testString"});
	}
	,testInt: function() {
		utest_Assert.equals(1,thx_Convert.toInt("1"),null,{ fileName : "TestConvert.hx", lineNumber : 14, className : "thx.TestConvert", methodName : "testInt"});
		utest_Assert.equals(1,thx_Convert.toInt(true),null,{ fileName : "TestConvert.hx", lineNumber : 15, className : "thx.TestConvert", methodName : "testInt"});
		utest_Assert.equals(0,thx_Convert.toInt(false),null,{ fileName : "TestConvert.hx", lineNumber : 16, className : "thx.TestConvert", methodName : "testInt"});
		utest_Assert.equals(1,thx_Convert.toInt(1.1),null,{ fileName : "TestConvert.hx", lineNumber : 17, className : "thx.TestConvert", methodName : "testInt"});
		utest_Assert.equals(1,thx_Convert.toIntOr("z",1),null,{ fileName : "TestConvert.hx", lineNumber : 19, className : "thx.TestConvert", methodName : "testInt"});
	}
	,testFloat: function() {
		utest_Assert.equals(1,thx_Convert.toFloat("1"),null,{ fileName : "TestConvert.hx", lineNumber : 23, className : "thx.TestConvert", methodName : "testFloat"});
		utest_Assert.equals(1,thx_Convert.toFloat(true),null,{ fileName : "TestConvert.hx", lineNumber : 24, className : "thx.TestConvert", methodName : "testFloat"});
		utest_Assert.equals(0,thx_Convert.toFloat(false),null,{ fileName : "TestConvert.hx", lineNumber : 25, className : "thx.TestConvert", methodName : "testFloat"});
		utest_Assert.equals(1.1,thx_Convert.toFloat(1.1),null,{ fileName : "TestConvert.hx", lineNumber : 26, className : "thx.TestConvert", methodName : "testFloat"});
		utest_Assert.equals(1.1,thx_Convert.toFloatOr("z",1.1),null,{ fileName : "TestConvert.hx", lineNumber : 28, className : "thx.TestConvert", methodName : "testFloat"});
	}
	,testBool: function() {
		utest_Assert.equals(true,thx_Convert.toBool("1"),null,{ fileName : "TestConvert.hx", lineNumber : 32, className : "thx.TestConvert", methodName : "testBool"});
		utest_Assert.equals(true,thx_Convert.toBool(true),null,{ fileName : "TestConvert.hx", lineNumber : 33, className : "thx.TestConvert", methodName : "testBool"});
		utest_Assert.equals(false,thx_Convert.toBool(false),null,{ fileName : "TestConvert.hx", lineNumber : 34, className : "thx.TestConvert", methodName : "testBool"});
		utest_Assert.equals(true,thx_Convert.toBool(1.1),null,{ fileName : "TestConvert.hx", lineNumber : 35, className : "thx.TestConvert", methodName : "testBool"});
		utest_Assert.equals(false,thx_Convert.toBool(0),null,{ fileName : "TestConvert.hx", lineNumber : 36, className : "thx.TestConvert", methodName : "testBool"});
		utest_Assert.equals(true,thx_Convert.toBoolOr("z",true),null,{ fileName : "TestConvert.hx", lineNumber : 38, className : "thx.TestConvert", methodName : "testBool"});
	}
	,testMap: function() {
		var objOfArrays = { 'foo' : ["bar"], 'baz' : ["qux"]};
		var objOfNumbers = { 'a' : 1, 'b' : 2, 'c' : 3};
		utest_Assert.equals("bar",thx_Convert.toMap(objOfArrays,function(val) {
			return thx_Convert.toArray(val,thx_Convert.toString);
		}).get("foo")[0],null,{ fileName : "TestConvert.hx", lineNumber : 45, className : "thx.TestConvert", methodName : "testMap"});
		utest_Assert.equals(2,thx_Convert.toMap(objOfNumbers,thx_Convert.toInt).get("b"),null,{ fileName : "TestConvert.hx", lineNumber : 49, className : "thx.TestConvert", methodName : "testMap"});
		utest_Assert.raises(function() {
			thx_Convert.toMap(3,thx_Convert.toString);
		},null,null,null,{ fileName : "TestConvert.hx", lineNumber : 51, className : "thx.TestConvert", methodName : "testMap"});
		utest_Assert.raises(function() {
			thx_Convert.toMap(objOfArrays,thx_Convert.toString);
		},null,null,null,{ fileName : "TestConvert.hx", lineNumber : 52, className : "thx.TestConvert", methodName : "testMap"});
	}
	,testDateTimeUtc: function() {
		var value = null;
		thx_Convert.toDateTimeUtc(value);
		utest_Assert.isNull(value,null,{ fileName : "TestConvert.hx", lineNumber : 58, className : "thx.TestConvert", methodName : "testDateTimeUtc"});
	}
	,__class__: thx_TestConvert
};
var thx_TestDateTime = function() {
	this.offset = thx__$Time_Time_$Impl_$.create(-6,0,0,0);
	var offset = this.offset;
	var this1 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(2015,7,26,21,40,30,0),offset];
	var this2 = this1[0];
	var b = offset;
	var high = this2.high - b.high | 0;
	var low = this2.low - b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(this2.low,b.low) < 0) {
		--high;
		high = high | 0;
	}
	this.date = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high,low)),this1[1]];
	var offset1 = this.offset;
	var this3 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(2015,7,27,16,40,30,0),offset1];
	var this4 = this3[0];
	var b1 = offset1;
	var high1 = this4.high - b1.high | 0;
	var low1 = this4.low - b1.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(this4.low,b1.low) < 0) {
		--high1;
		high1 = high1 | 0;
	}
	this.tomorrow = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high1,low1)),this3[1]];
	var offset2 = thx__$Time_Time_$Impl_$.zero;
	var this5 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(2015,7,27,3,40,30,0),offset2];
	var this6 = this5[0];
	var b2 = offset2;
	var high2 = this6.high - b2.high | 0;
	var low2 = this6.low - b2.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(this6.low,b2.low) < 0) {
		--high2;
		high2 = high2 | 0;
	}
	this.dateutc = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high2,low2)),this5[1]];
};
thx_TestDateTime.__name__ = ["thx","TestDateTime"];
thx_TestDateTime.prototype = {
	offset: null
	,date: null
	,tomorrow: null
	,dateutc: null
	,testCreate: function() {
		var this1 = this.date;
		var this2 = this1[0];
		var this3 = this1[1];
		var high = this2.high + this3.high | 0;
		var low = this2.low + this3.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
			++high;
			high = high | 0;
		}
		var tmp = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high,low),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR);
		var this4 = this.date;
		var this5 = this4[0];
		var this6 = this4[1];
		var high1 = this5.high + this6.high | 0;
		var low1 = this5.low + this6.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,this5.low) < 0) {
			++high1;
			high1 = high1 | 0;
		}
		utest_Assert.equals(2015,tmp,"expected 2015 but got " + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high1,low1),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR) + " for year",{ fileName : "TestDateTime.hx", lineNumber : 22, className : "thx.TestDateTime", methodName : "testCreate"});
		var this7 = this.date;
		var this8 = this7[0];
		var this9 = this7[1];
		var high2 = this8.high + this9.high | 0;
		var low2 = this8.low + this9.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,this8.low) < 0) {
			++high2;
			high2 = high2 | 0;
		}
		var tmp1 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high2,low2),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH);
		var this10 = this.date;
		var this11 = this10[0];
		var this12 = this10[1];
		var high3 = this11.high + this12.high | 0;
		var low3 = this11.low + this12.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low3,this11.low) < 0) {
			++high3;
			high3 = high3 | 0;
		}
		utest_Assert.equals(7,tmp1,"expected 7 but got " + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high3,low3),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH) + " for month",{ fileName : "TestDateTime.hx", lineNumber : 23, className : "thx.TestDateTime", methodName : "testCreate"});
		var this13 = this.date;
		var this14 = this13[0];
		var this15 = this13[1];
		var high4 = this14.high + this15.high | 0;
		var low4 = this14.low + this15.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low4,this14.low) < 0) {
			++high4;
			high4 = high4 | 0;
		}
		var tmp2 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high4,low4),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY);
		var this16 = this.date;
		var this17 = this16[0];
		var this18 = this16[1];
		var high5 = this17.high + this18.high | 0;
		var low5 = this17.low + this18.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low5,this17.low) < 0) {
			++high5;
			high5 = high5 | 0;
		}
		utest_Assert.equals(26,tmp2,"expected 26 but got " + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(new haxe__$Int64__$_$_$Int64(high5,low5),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY) + " for day",{ fileName : "TestDateTime.hx", lineNumber : 24, className : "thx.TestDateTime", methodName : "testCreate"});
		var this19 = this.date;
		var this20 = this19[0];
		var this21 = this19[1];
		var high6 = this20.high + this21.high | 0;
		var low6 = this20.low + this21.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low6,this20.low) < 0) {
			++high6;
			high6 = high6 | 0;
		}
		var tmp3 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_hour(new haxe__$Int64__$_$_$Int64(high6,low6));
		var this22 = this.date;
		var this23 = this22[0];
		var this24 = this22[1];
		var high7 = this23.high + this24.high | 0;
		var low7 = this23.low + this24.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low7,this23.low) < 0) {
			++high7;
			high7 = high7 | 0;
		}
		utest_Assert.equals(21,tmp3,"expected 21 but got " + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_hour(new haxe__$Int64__$_$_$Int64(high7,low7)) + " for hour",{ fileName : "TestDateTime.hx", lineNumber : 26, className : "thx.TestDateTime", methodName : "testCreate"});
		var this25 = this.date;
		var this26 = this25[0];
		var this27 = this25[1];
		var high8 = this26.high + this27.high | 0;
		var low8 = this26.low + this27.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low8,this26.low) < 0) {
			++high8;
			high8 = high8 | 0;
		}
		var tmp4 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_minute(new haxe__$Int64__$_$_$Int64(high8,low8));
		var this28 = this.date;
		var this29 = this28[0];
		var this30 = this28[1];
		var high9 = this29.high + this30.high | 0;
		var low9 = this29.low + this30.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low9,this29.low) < 0) {
			++high9;
			high9 = high9 | 0;
		}
		utest_Assert.equals(40,tmp4,"expected 40 but got " + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_minute(new haxe__$Int64__$_$_$Int64(high9,low9)) + " for minute",{ fileName : "TestDateTime.hx", lineNumber : 27, className : "thx.TestDateTime", methodName : "testCreate"});
		var this31 = this.date;
		var this32 = this31[0];
		var this33 = this31[1];
		var high10 = this32.high + this33.high | 0;
		var low10 = this32.low + this33.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low10,this32.low) < 0) {
			++high10;
			high10 = high10 | 0;
		}
		var tmp5 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_second(new haxe__$Int64__$_$_$Int64(high10,low10));
		var this34 = this.date;
		var this35 = this34[0];
		var this36 = this34[1];
		var high11 = this35.high + this36.high | 0;
		var low11 = this35.low + this36.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low11,this35.low) < 0) {
			++high11;
			high11 = high11 | 0;
		}
		utest_Assert.equals(30,tmp5,"expected 30 but got " + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_second(new haxe__$Int64__$_$_$Int64(high11,low11)) + " for second",{ fileName : "TestDateTime.hx", lineNumber : 28, className : "thx.TestDateTime", methodName : "testCreate"});
		var this37 = this.date;
		var this38 = this37[0];
		var this39 = this37[1];
		var high12 = this38.high + this39.high | 0;
		var low12 = this38.low + this39.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low12,this38.low) < 0) {
			++high12;
			high12 = high12 | 0;
		}
		utest_Assert.equals(0,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_dayOfWeek(new haxe__$Int64__$_$_$Int64(high12,low12)),null,{ fileName : "TestDateTime.hx", lineNumber : 30, className : "thx.TestDateTime", methodName : "testCreate"});
		var x = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(this.date[1],thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerHourI64).quotient,new haxe__$Int64__$_$_$Int64(0,24)).modulus;
		if(x.high != x.low >> 31) {
			throw new js__$Boot_HaxeError("Overflow");
		}
		utest_Assert.equals(-6,x.low,null,{ fileName : "TestDateTime.hx", lineNumber : 32, className : "thx.TestDateTime", methodName : "testCreate"});
	}
	,testEquals: function() {
		var this1 = this.date[0];
		var this2 = this.date[0];
		utest_Assert.isTrue(this1.high == this2.high && this1.low == this2.low,null,{ fileName : "TestDateTime.hx", lineNumber : 36, className : "thx.TestDateTime", methodName : "testEquals"});
		var this3 = this.date[0];
		var this4 = this.tomorrow[0];
		utest_Assert.isTrue(this3.high != this4.high || this3.low != this4.low,null,{ fileName : "TestDateTime.hx", lineNumber : 37, className : "thx.TestDateTime", methodName : "testEquals"});
		var this5 = this.date[0];
		var this6 = this.dateutc[0];
		utest_Assert.isTrue(this5.high == this6.high && this5.low == this6.low,null,{ fileName : "TestDateTime.hx", lineNumber : 38, className : "thx.TestDateTime", methodName : "testEquals"});
	}
	,testCompare: function() {
		utest_Assert.isFalse(thx__$DateTime_DateTime_$Impl_$.compareTo(this.date,this.date) > 0,null,{ fileName : "TestDateTime.hx", lineNumber : 42, className : "thx.TestDateTime", methodName : "testCompare"});
		utest_Assert.isTrue(thx__$DateTime_DateTime_$Impl_$.compareTo(this.date,this.date) >= 0,null,{ fileName : "TestDateTime.hx", lineNumber : 43, className : "thx.TestDateTime", methodName : "testCompare"});
		utest_Assert.isFalse(thx__$DateTime_DateTime_$Impl_$.compareTo(this.date,this.date) < 0,null,{ fileName : "TestDateTime.hx", lineNumber : 44, className : "thx.TestDateTime", methodName : "testCompare"});
		utest_Assert.isTrue(thx__$DateTime_DateTime_$Impl_$.compareTo(this.date,this.date) <= 0,null,{ fileName : "TestDateTime.hx", lineNumber : 45, className : "thx.TestDateTime", methodName : "testCompare"});
		utest_Assert.isFalse(thx__$DateTime_DateTime_$Impl_$.compareTo(this.date,this.tomorrow) > 0,null,{ fileName : "TestDateTime.hx", lineNumber : 47, className : "thx.TestDateTime", methodName : "testCompare"});
		utest_Assert.isFalse(thx__$DateTime_DateTime_$Impl_$.compareTo(this.date,this.tomorrow) >= 0,null,{ fileName : "TestDateTime.hx", lineNumber : 48, className : "thx.TestDateTime", methodName : "testCompare"});
		utest_Assert.isTrue(thx__$DateTime_DateTime_$Impl_$.compareTo(this.date,this.tomorrow) < 0,null,{ fileName : "TestDateTime.hx", lineNumber : 49, className : "thx.TestDateTime", methodName : "testCompare"});
		utest_Assert.isTrue(thx__$DateTime_DateTime_$Impl_$.compareTo(this.date,this.tomorrow) <= 0,null,{ fileName : "TestDateTime.hx", lineNumber : 50, className : "thx.TestDateTime", methodName : "testCompare"});
		utest_Assert.isTrue(thx__$DateTime_DateTime_$Impl_$.compareTo(this.tomorrow,this.date) > 0,null,{ fileName : "TestDateTime.hx", lineNumber : 52, className : "thx.TestDateTime", methodName : "testCompare"});
		utest_Assert.isTrue(thx__$DateTime_DateTime_$Impl_$.compareTo(this.tomorrow,this.date) >= 0,null,{ fileName : "TestDateTime.hx", lineNumber : 53, className : "thx.TestDateTime", methodName : "testCompare"});
		utest_Assert.isFalse(thx__$DateTime_DateTime_$Impl_$.compareTo(this.tomorrow,this.date) < 0,null,{ fileName : "TestDateTime.hx", lineNumber : 54, className : "thx.TestDateTime", methodName : "testCompare"});
		utest_Assert.isFalse(thx__$DateTime_DateTime_$Impl_$.compareTo(this.tomorrow,this.date) <= 0,null,{ fileName : "TestDateTime.hx", lineNumber : 55, className : "thx.TestDateTime", methodName : "testCompare"});
	}
	,testToString: function() {
		utest_Assert.equals("2015-07-26T21:40:30-06:00",thx__$DateTime_DateTime_$Impl_$.toString(this.date),null,{ fileName : "TestDateTime.hx", lineNumber : 60, className : "thx.TestDateTime", methodName : "testToString"});
	}
	,testAdd: function() {
		var this1 = this.date;
		var this2 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addMonths(this1[0],24),this1[1]];
		var this3 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addMonths(this2[0],9),this2[1]];
		var this4 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addScaled(this3[0],10,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.millisPerDay),this3[1]];
		var this5 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addScaled(this4[0],7,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.millisPerHour),this4[1]];
		var this6 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addScaled(this5[0],10,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.millisPerMinute),this5[1]];
		var this7 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addScaled(this6[0],7,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.millisPerSecond),this6[1]];
		var d = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addScaled(this7[0],7,1),this7[1]];
		var that = thx__$DateTime_DateTime_$Impl_$.fromString("2018-05-07T04:50:37.007-06:00");
		var this8 = d[0];
		var this9 = that[0];
		utest_Assert.isTrue(this8.high == this9.high && this8.low == this9.low,"expected " + "2018-05-07T04:50:37.007-06:00" + " but got " + thx__$DateTime_DateTime_$Impl_$.toString(d),{ fileName : "TestDateTime.hx", lineNumber : 73, className : "thx.TestDateTime", methodName : "testAdd"});
	}
	,testOffset: function() {
		var nyDate = [this.date[0],thx__$Time_Time_$Impl_$.create(-4,0,0,0)];
		utest_Assert.equals("2015-07-26T23:40:30-04:00",thx__$DateTime_DateTime_$Impl_$.toString(nyDate),null,{ fileName : "TestDateTime.hx", lineNumber : 78, className : "thx.TestDateTime", methodName : "testOffset"});
		var this1 = this.date;
		var newoffset = thx__$Time_Time_$Impl_$.create(-4,0,0,0);
		var this2 = this1[0];
		var this3 = this1[1];
		var high = this2.high + this3.high | 0;
		var low = this2.low + this3.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this2.low) < 0) {
			++high;
			high = high | 0;
		}
		var ticks = new haxe__$Int64__$_$_$Int64(high,low);
		var b = newoffset;
		var high1 = ticks.high - b.high | 0;
		var low1 = ticks.low - b.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(ticks.low,b.low) < 0) {
			--high1;
			high1 = high1 | 0;
		}
		nyDate = [new haxe__$Int64__$_$_$Int64(high1,low1),newoffset];
		utest_Assert.equals("2015-07-26T21:40:30-04:00",thx__$DateTime_DateTime_$Impl_$.toString(nyDate),null,{ fileName : "TestDateTime.hx", lineNumber : 80, className : "thx.TestDateTime", methodName : "testOffset"});
	}
	,testFromString: function() {
		var d = thx__$DateTime_DateTime_$Impl_$.fromString("2015-07-26T21:40:30-06:00");
		var this1 = this.date[0];
		var this2 = d[0];
		utest_Assert.isTrue(this1.high == this2.high && this1.low == this2.low,null,{ fileName : "TestDateTime.hx", lineNumber : 85, className : "thx.TestDateTime", methodName : "testFromString"});
		var d1 = thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01");
		var offset = thx__$Time_Time_$Impl_$.zero;
		var this3 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(2014,1,1,0,0,0,0),offset];
		var this4 = this3[0];
		var b = offset;
		var high = this4.high - b.high | 0;
		var low = this4.low - b.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(this4.low,b.low) < 0) {
			--high;
			high = high | 0;
		}
		var this5 = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(high,low)),this3[1]][0];
		var this6 = d1[0];
		utest_Assert.isTrue(this5.high == this6.high && this5.low == this6.low,null,{ fileName : "TestDateTime.hx", lineNumber : 88, className : "thx.TestDateTime", methodName : "testFromString"});
		utest_Assert.equals("-1-07-27T00:00:00+00:00",thx__$DateTime_DateTime_$Impl_$.toString(thx__$DateTime_DateTime_$Impl_$.fromString("0-06-07")),null,{ fileName : "TestDateTime.hx", lineNumber : 90, className : "thx.TestDateTime", methodName : "testFromString"});
		utest_Assert.equals("-1-06-07T00:00:00+00:00",thx__$DateTime_DateTime_$Impl_$.toString(thx__$DateTime_DateTime_$Impl_$.fromString("-1-06-07")),null,{ fileName : "TestDateTime.hx", lineNumber : 91, className : "thx.TestDateTime", methodName : "testFromString"});
		utest_Assert.equals("1-06-07T00:00:00+00:00",thx__$DateTime_DateTime_$Impl_$.toString(thx__$DateTime_DateTime_$Impl_$.fromString("1-06-07")),null,{ fileName : "TestDateTime.hx", lineNumber : 92, className : "thx.TestDateTime", methodName : "testFromString"});
		utest_Assert.equals("-2014-01-01T00:00:00+00:00",thx__$DateTime_DateTime_$Impl_$.toString(thx__$DateTime_DateTime_$Impl_$.fromString("-2014-01-01")),null,{ fileName : "TestDateTime.hx", lineNumber : 93, className : "thx.TestDateTime", methodName : "testFromString"});
	}
	,testLocalOffset: function() {
		var ref = thx__$Time_Time_$Impl_$.fromString("0:00:00");
		var delta = thx__$DateTime_DateTime_$Impl_$.localOffset();
		var a = ref;
		var b = delta;
		utest_Assert.isTrue(a.high == b.high && a.low == b.low,"expected " + thx__$Time_Time_$Impl_$.toString(ref) + " but got " + thx__$Time_Time_$Impl_$.toString(delta),{ fileName : "TestDateTime.hx", lineNumber : 100, className : "thx.TestDateTime", methodName : "testLocalOffset"});
	}
	,testNow: function() {
		var ref = thx__$DateTime_DateTime_$Impl_$.fromString("2016-05-24T09:03:02+00:00");
		var date = [thx__$DateTimeUtc_DateTimeUtc_$Impl_$.now(),thx__$DateTime_DateTime_$Impl_$.localOffset()];
		utest_Assert.isTrue(thx__$DateTime_DateTime_$Impl_$.nearEqualsTo(date,ref,thx__$Time_Time_$Impl_$.create(0,10,0,0)),"expected " + thx__$DateTime_DateTime_$Impl_$.toString(ref) + " but got " + thx__$DateTime_DateTime_$Impl_$.toString(date),{ fileName : "TestDateTime.hx", lineNumber : 107, className : "thx.TestDateTime", methodName : "testNow"});
	}
	,testSnapNext: function() {
		this.assertSnapNext(thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 10:07:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 10:06:10-06:00"),thx_TimePeriod.Minute,{ fileName : "TestDateTime.hx", lineNumber : 111, className : "thx.TestDateTime", methodName : "testSnapNext"});
		this.assertSnapNext(thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 10:06:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 10:05:50-06:00"),thx_TimePeriod.Minute,{ fileName : "TestDateTime.hx", lineNumber : 112, className : "thx.TestDateTime", methodName : "testSnapNext"});
		this.assertSnapNext(thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 11:00:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 10:10:10-06:00"),thx_TimePeriod.Hour,{ fileName : "TestDateTime.hx", lineNumber : 113, className : "thx.TestDateTime", methodName : "testSnapNext"});
		this.assertSnapNext(thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 10:00:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 09:50:10-06:00"),thx_TimePeriod.Hour,{ fileName : "TestDateTime.hx", lineNumber : 114, className : "thx.TestDateTime", methodName : "testSnapNext"});
		this.assertSnapNext(thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-02 00:00:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 10:00:00-06:00"),thx_TimePeriod.Day,{ fileName : "TestDateTime.hx", lineNumber : 115, className : "thx.TestDateTime", methodName : "testSnapNext"});
		this.assertSnapNext(thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 00:00:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2013-12-31 20:00:00-06:00"),thx_TimePeriod.Day,{ fileName : "TestDateTime.hx", lineNumber : 116, className : "thx.TestDateTime", methodName : "testSnapNext"});
		this.assertSnapNext(thx__$DateTime_DateTime_$Impl_$.fromString("2014-12-21 00:00:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-12-17 11:00:00-06:00"),thx_TimePeriod.Week,{ fileName : "TestDateTime.hx", lineNumber : 117, className : "thx.TestDateTime", methodName : "testSnapNext"});
		this.assertSnapNext(thx__$DateTime_DateTime_$Impl_$.fromString("2014-12-21 00:00:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-12-18 00:00:00-06:00"),thx_TimePeriod.Week,{ fileName : "TestDateTime.hx", lineNumber : 118, className : "thx.TestDateTime", methodName : "testSnapNext"});
		this.assertSnapNext(thx__$DateTime_DateTime_$Impl_$.fromString("2015-01-01 00:00:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-12-12 00:00:00-06:00"),thx_TimePeriod.Month,{ fileName : "TestDateTime.hx", lineNumber : 119, className : "thx.TestDateTime", methodName : "testSnapNext"});
		this.assertSnapNext(thx__$DateTime_DateTime_$Impl_$.fromString("2015-01-01 00:00:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-12-18 00:00:00-06:00"),thx_TimePeriod.Month,{ fileName : "TestDateTime.hx", lineNumber : 120, className : "thx.TestDateTime", methodName : "testSnapNext"});
		this.assertSnapNext(thx__$DateTime_DateTime_$Impl_$.fromString("2015-01-01 00:00:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-05-12 00:00:00-06:00"),thx_TimePeriod.Year,{ fileName : "TestDateTime.hx", lineNumber : 121, className : "thx.TestDateTime", methodName : "testSnapNext"});
		this.assertSnapNext(thx__$DateTime_DateTime_$Impl_$.fromString("2015-01-01 00:00:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-12-18 00:00:00-06:00"),thx_TimePeriod.Year,{ fileName : "TestDateTime.hx", lineNumber : 122, className : "thx.TestDateTime", methodName : "testSnapNext"});
	}
	,testSnapPrev: function() {
		this.assertSnapPrev(thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 10:06:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 10:06:10-06:00"),thx_TimePeriod.Minute,{ fileName : "TestDateTime.hx", lineNumber : 126, className : "thx.TestDateTime", methodName : "testSnapPrev"});
		this.assertSnapPrev(thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 10:05:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 10:05:50-06:00"),thx_TimePeriod.Minute,{ fileName : "TestDateTime.hx", lineNumber : 127, className : "thx.TestDateTime", methodName : "testSnapPrev"});
		this.assertSnapPrev(thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 10:00:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 10:10:10-06:00"),thx_TimePeriod.Hour,{ fileName : "TestDateTime.hx", lineNumber : 128, className : "thx.TestDateTime", methodName : "testSnapPrev"});
		this.assertSnapPrev(thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 09:00:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 09:50:10-06:00"),thx_TimePeriod.Hour,{ fileName : "TestDateTime.hx", lineNumber : 129, className : "thx.TestDateTime", methodName : "testSnapPrev"});
		this.assertSnapPrev(thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 00:00:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 10:00:00-06:00"),thx_TimePeriod.Day,{ fileName : "TestDateTime.hx", lineNumber : 130, className : "thx.TestDateTime", methodName : "testSnapPrev"});
		this.assertSnapPrev(thx__$DateTime_DateTime_$Impl_$.fromString("2013-12-31 00:00:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2013-12-31 20:00:00-06:00"),thx_TimePeriod.Day,{ fileName : "TestDateTime.hx", lineNumber : 131, className : "thx.TestDateTime", methodName : "testSnapPrev"});
		this.assertSnapPrev(thx__$DateTime_DateTime_$Impl_$.fromString("2014-12-14 00:00:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-12-17 11:00:00-06:00"),thx_TimePeriod.Week,{ fileName : "TestDateTime.hx", lineNumber : 132, className : "thx.TestDateTime", methodName : "testSnapPrev"});
		this.assertSnapPrev(thx__$DateTime_DateTime_$Impl_$.fromString("2014-12-14 00:00:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-12-18 00:00:00-06:00"),thx_TimePeriod.Week,{ fileName : "TestDateTime.hx", lineNumber : 133, className : "thx.TestDateTime", methodName : "testSnapPrev"});
		this.assertSnapPrev(thx__$DateTime_DateTime_$Impl_$.fromString("2014-12-01 00:00:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-12-12 00:00:00-06:00"),thx_TimePeriod.Month,{ fileName : "TestDateTime.hx", lineNumber : 134, className : "thx.TestDateTime", methodName : "testSnapPrev"});
		this.assertSnapPrev(thx__$DateTime_DateTime_$Impl_$.fromString("2014-12-01 00:00:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-12-18 00:00:00-06:00"),thx_TimePeriod.Month,{ fileName : "TestDateTime.hx", lineNumber : 135, className : "thx.TestDateTime", methodName : "testSnapPrev"});
		this.assertSnapPrev(thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 00:00:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-05-12 00:00:00-06:00"),thx_TimePeriod.Year,{ fileName : "TestDateTime.hx", lineNumber : 136, className : "thx.TestDateTime", methodName : "testSnapPrev"});
		this.assertSnapPrev(thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 00:00:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-12-18 00:00:00-06:00"),thx_TimePeriod.Year,{ fileName : "TestDateTime.hx", lineNumber : 137, className : "thx.TestDateTime", methodName : "testSnapPrev"});
	}
	,testSnapTo: function() {
		this.assertSnapTo(thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 10:06:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 10:06:10-06:00"),thx_TimePeriod.Minute,{ fileName : "TestDateTime.hx", lineNumber : 141, className : "thx.TestDateTime", methodName : "testSnapTo"});
		this.assertSnapTo(thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 10:06:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 10:05:50-06:00"),thx_TimePeriod.Minute,{ fileName : "TestDateTime.hx", lineNumber : 142, className : "thx.TestDateTime", methodName : "testSnapTo"});
		this.assertSnapTo(thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 10:00:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 10:10:10-06:00"),thx_TimePeriod.Hour,{ fileName : "TestDateTime.hx", lineNumber : 143, className : "thx.TestDateTime", methodName : "testSnapTo"});
		this.assertSnapTo(thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 10:00:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 09:50:10-06:00"),thx_TimePeriod.Hour,{ fileName : "TestDateTime.hx", lineNumber : 144, className : "thx.TestDateTime", methodName : "testSnapTo"});
		this.assertSnapTo(thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 00:00:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 10:00:00-06:00"),thx_TimePeriod.Day,{ fileName : "TestDateTime.hx", lineNumber : 145, className : "thx.TestDateTime", methodName : "testSnapTo"});
		this.assertSnapTo(thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 00:00:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2013-12-31 20:00:00-06:00"),thx_TimePeriod.Day,{ fileName : "TestDateTime.hx", lineNumber : 146, className : "thx.TestDateTime", methodName : "testSnapTo"});
		this.assertSnapTo(thx__$DateTime_DateTime_$Impl_$.fromString("2014-12-14 00:00:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-12-17 11:00:00-06:00"),thx_TimePeriod.Week,{ fileName : "TestDateTime.hx", lineNumber : 147, className : "thx.TestDateTime", methodName : "testSnapTo"});
		this.assertSnapTo(thx__$DateTime_DateTime_$Impl_$.fromString("2014-12-21 00:00:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-12-18 00:00:00-06:00"),thx_TimePeriod.Week,{ fileName : "TestDateTime.hx", lineNumber : 148, className : "thx.TestDateTime", methodName : "testSnapTo"});
		this.assertSnapTo(thx__$DateTime_DateTime_$Impl_$.fromString("2014-12-01 00:00:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-12-12 00:00:00-06:00"),thx_TimePeriod.Month,{ fileName : "TestDateTime.hx", lineNumber : 149, className : "thx.TestDateTime", methodName : "testSnapTo"});
		this.assertSnapTo(thx__$DateTime_DateTime_$Impl_$.fromString("2015-01-01 00:00:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-12-18 00:00:00-06:00"),thx_TimePeriod.Month,{ fileName : "TestDateTime.hx", lineNumber : 150, className : "thx.TestDateTime", methodName : "testSnapTo"});
		this.assertSnapTo(thx__$DateTime_DateTime_$Impl_$.fromString("2014-01-01 00:00:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-05-12 00:00:00-06:00"),thx_TimePeriod.Year,{ fileName : "TestDateTime.hx", lineNumber : 151, className : "thx.TestDateTime", methodName : "testSnapTo"});
		this.assertSnapTo(thx__$DateTime_DateTime_$Impl_$.fromString("2015-01-01 00:00:00-06:00"),thx__$DateTime_DateTime_$Impl_$.fromString("2014-12-18 00:00:00-06:00"),thx_TimePeriod.Year,{ fileName : "TestDateTime.hx", lineNumber : 152, className : "thx.TestDateTime", methodName : "testSnapTo"});
	}
	,assertSnapTo: function(expected,date,period,pos) {
		var t = thx__$DateTime_DateTime_$Impl_$.snapTo(date,period);
		var this1 = expected[0];
		var this2 = t[0];
		utest_Assert.isTrue(this1.high == this2.high && this1.low == this2.low,"expected " + thx__$DateTime_DateTime_$Impl_$.toString(date) + " to snap to " + thx__$DateTime_DateTime_$Impl_$.toString(expected) + " for " + Std.string(period) + " but it is " + thx__$DateTime_DateTime_$Impl_$.toString(t),pos);
	}
	,assertSnapPrev: function(expected,date,period,pos) {
		var t = thx__$DateTime_DateTime_$Impl_$.snapPrev(date,period);
		var this1 = expected[0];
		var this2 = t[0];
		utest_Assert.isTrue(this1.high == this2.high && this1.low == this2.low,"expected " + thx__$DateTime_DateTime_$Impl_$.toString(date) + " to snap before " + thx__$DateTime_DateTime_$Impl_$.toString(expected) + " for " + Std.string(period) + " but it is " + thx__$DateTime_DateTime_$Impl_$.toString(t),pos);
	}
	,assertSnapNext: function(expected,date,period,pos) {
		var t = thx__$DateTime_DateTime_$Impl_$.snapNext(date,period);
		var this1 = expected[0];
		var this2 = t[0];
		utest_Assert.isTrue(this1.high == this2.high && this1.low == this2.low,"expected " + thx__$DateTime_DateTime_$Impl_$.toString(date) + " to snap after " + thx__$DateTime_DateTime_$Impl_$.toString(expected) + " for " + Std.string(period) + " but it is " + thx__$DateTime_DateTime_$Impl_$.toString(t),pos);
	}
	,__class__: thx_TestDateTime
};
var thx_TestDateTimeUtc = function() {
	this.tomorrow = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(2015,7,27,21,40,30,123);
	this.date = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(2015,7,26,21,40,30,0);
};
thx_TestDateTimeUtc.__name__ = ["thx","TestDateTimeUtc"];
thx_TestDateTimeUtc.prototype = {
	date: null
	,tomorrow: null
	,testCreate: function() {
		utest_Assert.equals(2015,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this.date,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR),"expected 2015 but got " + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this.date,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR) + " for year",{ fileName : "TestDateTimeUtc.hx", lineNumber : 16, className : "thx.TestDateTimeUtc", methodName : "testCreate"});
		utest_Assert.equals(7,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this.date,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH),"expected 7 but got " + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this.date,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH) + " for month",{ fileName : "TestDateTimeUtc.hx", lineNumber : 17, className : "thx.TestDateTimeUtc", methodName : "testCreate"});
		utest_Assert.equals(26,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this.date,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY),"expected 26 but got " + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.getDatePart(this.date,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY) + " for day",{ fileName : "TestDateTimeUtc.hx", lineNumber : 18, className : "thx.TestDateTimeUtc", methodName : "testCreate"});
		utest_Assert.equals(21,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_hour(this.date),"expected 21 but got " + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_hour(this.date) + " for hour",{ fileName : "TestDateTimeUtc.hx", lineNumber : 20, className : "thx.TestDateTimeUtc", methodName : "testCreate"});
		utest_Assert.equals(40,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_minute(this.date),"expected 40 but got " + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_minute(this.date) + " for minute",{ fileName : "TestDateTimeUtc.hx", lineNumber : 21, className : "thx.TestDateTimeUtc", methodName : "testCreate"});
		utest_Assert.equals(30,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_second(this.date),"expected 30 but got " + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_second(this.date) + " for second",{ fileName : "TestDateTimeUtc.hx", lineNumber : 22, className : "thx.TestDateTimeUtc", methodName : "testCreate"});
		utest_Assert.equals(123,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_millisecond(this.tomorrow),"expected 123 but got " + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_millisecond(this.tomorrow) + " for millisecond",{ fileName : "TestDateTimeUtc.hx", lineNumber : 24, className : "thx.TestDateTimeUtc", methodName : "testCreate"});
		utest_Assert.equals(123000,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_microsecond(this.tomorrow),"expected 123 but got " + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_microsecond(this.tomorrow) + " for microsecond",{ fileName : "TestDateTimeUtc.hx", lineNumber : 25, className : "thx.TestDateTimeUtc", methodName : "testCreate"});
		utest_Assert.equals(1230000,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_tickInSecond(this.tomorrow),"expected 123 but got " + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_tickInSecond(this.tomorrow) + " for tickInSecond",{ fileName : "TestDateTimeUtc.hx", lineNumber : 26, className : "thx.TestDateTimeUtc", methodName : "testCreate"});
		utest_Assert.equals(0,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.get_dayOfWeek(this.date),null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 28, className : "thx.TestDateTimeUtc", methodName : "testCreate"});
	}
	,testToString: function() {
		utest_Assert.equals("2015-07-26T21:40:30Z",thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(this.date),null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 32, className : "thx.TestDateTimeUtc", methodName : "testToString"});
		utest_Assert.equals("1-01-01T00:00:00Z",thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromInt64(new haxe__$Int64__$_$_$Int64(0,0))),null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 33, className : "thx.TestDateTimeUtc", methodName : "testToString"});
	}
	,testOverflowing: function() {
		utest_Assert.equals("2014-12-01T00:00:00Z",thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(2014,12,1)),null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 37, className : "thx.TestDateTimeUtc", methodName : "testOverflowing"});
		utest_Assert.equals("2015-04-01T00:00:00Z",thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(2014,16,1)),null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 39, className : "thx.TestDateTimeUtc", methodName : "testOverflowing"});
		utest_Assert.equals("2013-10-01T00:00:00Z",thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(2014,-2,1)),null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 40, className : "thx.TestDateTimeUtc", methodName : "testOverflowing"});
		utest_Assert.equals("2014-03-04T00:00:00Z",thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(2014,2,32)),null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 43, className : "thx.TestDateTimeUtc", methodName : "testOverflowing"});
		utest_Assert.equals("2013-12-31T00:00:00Z",thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(2014,1,0)),null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 44, className : "thx.TestDateTimeUtc", methodName : "testOverflowing"});
		utest_Assert.equals("2014-02-02T02:00:00Z",thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(2014,2,1,26)),null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 47, className : "thx.TestDateTimeUtc", methodName : "testOverflowing"});
		utest_Assert.equals("2013-12-31T23:00:00Z",thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(2014,1,1,-1)),null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 48, className : "thx.TestDateTimeUtc", methodName : "testOverflowing"});
		utest_Assert.equals("2014-02-01T01:05:00Z",thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(2014,2,1,0,65)),null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 51, className : "thx.TestDateTimeUtc", methodName : "testOverflowing"});
		utest_Assert.equals("2013-12-31T23:59:00Z",thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(2014,1,1,0,-1)),null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 52, className : "thx.TestDateTimeUtc", methodName : "testOverflowing"});
		utest_Assert.equals("2014-02-01T00:01:05Z",thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(2014,2,1,0,0,65)),null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 55, className : "thx.TestDateTimeUtc", methodName : "testOverflowing"});
		utest_Assert.equals("2013-12-31T23:59:59Z",thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.create(2014,1,1,0,0,-1)),null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 56, className : "thx.TestDateTimeUtc", methodName : "testOverflowing"});
	}
	,testEquals: function() {
		var a = this.date;
		var b = this.date;
		utest_Assert.isTrue(a.high == b.high && a.low == b.low,null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 60, className : "thx.TestDateTimeUtc", methodName : "testEquals"});
		var a1 = this.date;
		var b1 = this.tomorrow;
		utest_Assert.isTrue(a1.high != b1.high || a1.low != b1.low,null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 61, className : "thx.TestDateTimeUtc", methodName : "testEquals"});
	}
	,testCompare: function() {
		var a = this.date;
		var b = this.date;
		var v = a.high - b.high | 0;
		if(v != 0) {
			v = v;
		} else {
			v = haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
		}
		utest_Assert.isFalse((a.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) > 0,null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 65, className : "thx.TestDateTimeUtc", methodName : "testCompare"});
		var a1 = this.date;
		var b1 = this.date;
		var v1 = a1.high - b1.high | 0;
		if(v1 != 0) {
			v1 = v1;
		} else {
			v1 = haxe__$Int32_Int32_$Impl_$.ucompare(a1.low,b1.low);
		}
		utest_Assert.isTrue((a1.high < 0?b1.high < 0?v1:-1:b1.high >= 0?v1:1) >= 0,null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 66, className : "thx.TestDateTimeUtc", methodName : "testCompare"});
		var a2 = this.date;
		var b2 = this.date;
		var v2 = a2.high - b2.high | 0;
		if(v2 != 0) {
			v2 = v2;
		} else {
			v2 = haxe__$Int32_Int32_$Impl_$.ucompare(a2.low,b2.low);
		}
		utest_Assert.isFalse((a2.high < 0?b2.high < 0?v2:-1:b2.high >= 0?v2:1) < 0,null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 67, className : "thx.TestDateTimeUtc", methodName : "testCompare"});
		var a3 = this.date;
		var b3 = this.date;
		var v3 = a3.high - b3.high | 0;
		if(v3 != 0) {
			v3 = v3;
		} else {
			v3 = haxe__$Int32_Int32_$Impl_$.ucompare(a3.low,b3.low);
		}
		utest_Assert.isTrue((a3.high < 0?b3.high < 0?v3:-1:b3.high >= 0?v3:1) <= 0,null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 68, className : "thx.TestDateTimeUtc", methodName : "testCompare"});
		var a4 = this.date;
		var b4 = this.tomorrow;
		var v4 = a4.high - b4.high | 0;
		if(v4 != 0) {
			v4 = v4;
		} else {
			v4 = haxe__$Int32_Int32_$Impl_$.ucompare(a4.low,b4.low);
		}
		utest_Assert.isFalse((a4.high < 0?b4.high < 0?v4:-1:b4.high >= 0?v4:1) > 0,null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 70, className : "thx.TestDateTimeUtc", methodName : "testCompare"});
		var a5 = this.date;
		var b5 = this.tomorrow;
		var v5 = a5.high - b5.high | 0;
		if(v5 != 0) {
			v5 = v5;
		} else {
			v5 = haxe__$Int32_Int32_$Impl_$.ucompare(a5.low,b5.low);
		}
		utest_Assert.isFalse((a5.high < 0?b5.high < 0?v5:-1:b5.high >= 0?v5:1) >= 0,null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 71, className : "thx.TestDateTimeUtc", methodName : "testCompare"});
		var a6 = this.date;
		var b6 = this.tomorrow;
		var v6 = a6.high - b6.high | 0;
		if(v6 != 0) {
			v6 = v6;
		} else {
			v6 = haxe__$Int32_Int32_$Impl_$.ucompare(a6.low,b6.low);
		}
		utest_Assert.isTrue((a6.high < 0?b6.high < 0?v6:-1:b6.high >= 0?v6:1) < 0,null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 72, className : "thx.TestDateTimeUtc", methodName : "testCompare"});
		var a7 = this.date;
		var b7 = this.tomorrow;
		var v7 = a7.high - b7.high | 0;
		if(v7 != 0) {
			v7 = v7;
		} else {
			v7 = haxe__$Int32_Int32_$Impl_$.ucompare(a7.low,b7.low);
		}
		utest_Assert.isTrue((a7.high < 0?b7.high < 0?v7:-1:b7.high >= 0?v7:1) <= 0,null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 73, className : "thx.TestDateTimeUtc", methodName : "testCompare"});
		var a8 = this.tomorrow;
		var b8 = this.date;
		var v8 = a8.high - b8.high | 0;
		if(v8 != 0) {
			v8 = v8;
		} else {
			v8 = haxe__$Int32_Int32_$Impl_$.ucompare(a8.low,b8.low);
		}
		utest_Assert.isTrue((a8.high < 0?b8.high < 0?v8:-1:b8.high >= 0?v8:1) > 0,null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 75, className : "thx.TestDateTimeUtc", methodName : "testCompare"});
		var a9 = this.tomorrow;
		var b9 = this.date;
		var v9 = a9.high - b9.high | 0;
		if(v9 != 0) {
			v9 = v9;
		} else {
			v9 = haxe__$Int32_Int32_$Impl_$.ucompare(a9.low,b9.low);
		}
		utest_Assert.isTrue((a9.high < 0?b9.high < 0?v9:-1:b9.high >= 0?v9:1) >= 0,null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 76, className : "thx.TestDateTimeUtc", methodName : "testCompare"});
		var a10 = this.tomorrow;
		var b10 = this.date;
		var v10 = a10.high - b10.high | 0;
		if(v10 != 0) {
			v10 = v10;
		} else {
			v10 = haxe__$Int32_Int32_$Impl_$.ucompare(a10.low,b10.low);
		}
		utest_Assert.isFalse((a10.high < 0?b10.high < 0?v10:-1:b10.high >= 0?v10:1) < 0,null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 77, className : "thx.TestDateTimeUtc", methodName : "testCompare"});
		var a11 = this.tomorrow;
		var b11 = this.date;
		var v11 = a11.high - b11.high | 0;
		if(v11 != 0) {
			v11 = v11;
		} else {
			v11 = haxe__$Int32_Int32_$Impl_$.ucompare(a11.low,b11.low);
		}
		utest_Assert.isFalse((a11.high < 0?b11.high < 0?v11:-1:b11.high >= 0?v11:1) <= 0,null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 78, className : "thx.TestDateTimeUtc", methodName : "testCompare"});
	}
	,testFromToDate: function() {
		var a = this.date;
		var b = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.unixEpochTicks;
		var high = a.high - b.high | 0;
		var low = a.low - b.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low) < 0) {
			var ret = high--;
			high = high | 0;
		}
		var t = thx_Int64s.toFloat(haxe__$Int64_Int64_$Impl_$.divMod(new haxe__$Int64__$_$_$Int64(high,low),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMillisecondI64).quotient);
		var d = new Date(t);
		var that = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromDate(d);
		var a1 = this.date;
		var b1 = that;
		utest_Assert.isTrue(a1.high == b1.high && a1.low == b1.low,"expected " + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(this.date) + " but got " + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromDate(d)),{ fileName : "TestDateTimeUtc.hx", lineNumber : 83, className : "thx.TestDateTimeUtc", methodName : "testFromToDate"});
	}
	,testFromToTime: function() {
		var a = this.date;
		var b = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.unixEpochTicks;
		var high = a.high - b.high | 0;
		var low = a.low - b.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low) < 0) {
			--high;
			high = high | 0;
		}
		var date2 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromTime(thx_Int64s.toFloat(haxe__$Int64_Int64_$Impl_$.divMod(new haxe__$Int64__$_$_$Int64(high,low),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMillisecondI64).quotient));
		var a1 = this.date;
		var b1 = date2;
		utest_Assert.isTrue(a1.high == b1.high && a1.low == b1.low,"expected " + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(this.date) + " but got " + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(date2),{ fileName : "TestDateTimeUtc.hx", lineNumber : 89, className : "thx.TestDateTimeUtc", methodName : "testFromToTime"});
	}
	,testFromToString: function() {
		var that = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(this.date));
		var a = this.date;
		var b = that;
		utest_Assert.isTrue(a.high == b.high && a.low == b.low,null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 94, className : "thx.TestDateTimeUtc", methodName : "testFromToString"});
		utest_Assert.equals("-1-07-27T00:00:00Z",thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("0-06-07")),null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 96, className : "thx.TestDateTimeUtc", methodName : "testFromToString"});
		utest_Assert.equals("-1-06-07T00:00:00Z",thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("-1-06-07")),null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 97, className : "thx.TestDateTimeUtc", methodName : "testFromToString"});
		utest_Assert.equals("1-06-07T00:00:00Z",thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("1-06-07")),null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 98, className : "thx.TestDateTimeUtc", methodName : "testFromToString"});
		utest_Assert.equals("-2014-01-01T00:00:00Z",thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("-2014-01-01")),null,{ fileName : "TestDateTimeUtc.hx", lineNumber : 99, className : "thx.TestDateTimeUtc", methodName : "testFromToString"});
	}
	,testAdd: function() {
		var d = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addScaled(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addScaled(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addScaled(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addScaled(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addScaled(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addMonths(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.addMonths(this.date,24),9),10,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.millisPerDay),7,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.millisPerHour),10,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.millisPerMinute),7,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.millisPerSecond),7,1);
		var that = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2018-05-07 04:50:37.007");
		var a = d;
		var b = that;
		utest_Assert.isTrue(a.high == b.high && a.low == b.low,"expected " + "2018-05-07 04:50:37.007" + " but got " + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(d),{ fileName : "TestDateTimeUtc.hx", lineNumber : 112, className : "thx.TestDateTimeUtc", methodName : "testAdd"});
	}
	,testNow: function() {
		var ref = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2016-05-24T09:03:02Z");
		var date = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.now();
		utest_Assert.isTrue(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.nearEqualsTo(date,ref,thx__$Time_Time_$Impl_$.create(0,10,0,0)),"expected " + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(ref) + " but got " + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(date),{ fileName : "TestDateTimeUtc.hx", lineNumber : 118, className : "thx.TestDateTimeUtc", methodName : "testNow"});
	}
	,testSnapNext: function() {
		this.assertSnapNext(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 10:07:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 10:06:10"),thx_TimePeriod.Minute,{ fileName : "TestDateTimeUtc.hx", lineNumber : 122, className : "thx.TestDateTimeUtc", methodName : "testSnapNext"});
		this.assertSnapNext(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 10:06:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 10:05:50"),thx_TimePeriod.Minute,{ fileName : "TestDateTimeUtc.hx", lineNumber : 123, className : "thx.TestDateTimeUtc", methodName : "testSnapNext"});
		this.assertSnapNext(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 11:00:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 10:10:10"),thx_TimePeriod.Hour,{ fileName : "TestDateTimeUtc.hx", lineNumber : 124, className : "thx.TestDateTimeUtc", methodName : "testSnapNext"});
		this.assertSnapNext(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 10:00:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 09:50:10"),thx_TimePeriod.Hour,{ fileName : "TestDateTimeUtc.hx", lineNumber : 125, className : "thx.TestDateTimeUtc", methodName : "testSnapNext"});
		this.assertSnapNext(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-02 00:00:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 10:00:00"),thx_TimePeriod.Day,{ fileName : "TestDateTimeUtc.hx", lineNumber : 126, className : "thx.TestDateTimeUtc", methodName : "testSnapNext"});
		this.assertSnapNext(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 00:00:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2013-12-31 20:00:00"),thx_TimePeriod.Day,{ fileName : "TestDateTimeUtc.hx", lineNumber : 127, className : "thx.TestDateTimeUtc", methodName : "testSnapNext"});
		this.assertSnapNext(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-12-21 00:00:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-12-17 11:00:00"),thx_TimePeriod.Week,{ fileName : "TestDateTimeUtc.hx", lineNumber : 128, className : "thx.TestDateTimeUtc", methodName : "testSnapNext"});
		this.assertSnapNext(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-12-21 00:00:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-12-18 00:00:00"),thx_TimePeriod.Week,{ fileName : "TestDateTimeUtc.hx", lineNumber : 129, className : "thx.TestDateTimeUtc", methodName : "testSnapNext"});
		this.assertSnapNext(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2015-01-01 00:00:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-12-12 00:00:00"),thx_TimePeriod.Month,{ fileName : "TestDateTimeUtc.hx", lineNumber : 130, className : "thx.TestDateTimeUtc", methodName : "testSnapNext"});
		this.assertSnapNext(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2015-01-01 00:00:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-12-18 00:00:00"),thx_TimePeriod.Month,{ fileName : "TestDateTimeUtc.hx", lineNumber : 131, className : "thx.TestDateTimeUtc", methodName : "testSnapNext"});
		this.assertSnapNext(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2015-01-01 00:00:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-05-12 00:00:00"),thx_TimePeriod.Year,{ fileName : "TestDateTimeUtc.hx", lineNumber : 132, className : "thx.TestDateTimeUtc", methodName : "testSnapNext"});
		this.assertSnapNext(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2015-01-01 00:00:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-12-18 00:00:00"),thx_TimePeriod.Year,{ fileName : "TestDateTimeUtc.hx", lineNumber : 133, className : "thx.TestDateTimeUtc", methodName : "testSnapNext"});
	}
	,testSnapPrev: function() {
		this.assertSnapPrev(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 10:06:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 10:06:10"),thx_TimePeriod.Minute,{ fileName : "TestDateTimeUtc.hx", lineNumber : 137, className : "thx.TestDateTimeUtc", methodName : "testSnapPrev"});
		this.assertSnapPrev(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 10:05:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 10:05:50"),thx_TimePeriod.Minute,{ fileName : "TestDateTimeUtc.hx", lineNumber : 138, className : "thx.TestDateTimeUtc", methodName : "testSnapPrev"});
		this.assertSnapPrev(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 10:00:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 10:10:10"),thx_TimePeriod.Hour,{ fileName : "TestDateTimeUtc.hx", lineNumber : 139, className : "thx.TestDateTimeUtc", methodName : "testSnapPrev"});
		this.assertSnapPrev(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 09:00:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 09:50:10"),thx_TimePeriod.Hour,{ fileName : "TestDateTimeUtc.hx", lineNumber : 140, className : "thx.TestDateTimeUtc", methodName : "testSnapPrev"});
		this.assertSnapPrev(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 00:00:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 10:00:00"),thx_TimePeriod.Day,{ fileName : "TestDateTimeUtc.hx", lineNumber : 141, className : "thx.TestDateTimeUtc", methodName : "testSnapPrev"});
		this.assertSnapPrev(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2013-12-31 00:00:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2013-12-31 20:00:00"),thx_TimePeriod.Day,{ fileName : "TestDateTimeUtc.hx", lineNumber : 142, className : "thx.TestDateTimeUtc", methodName : "testSnapPrev"});
		this.assertSnapPrev(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-12-14 00:00:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-12-17 11:00:00"),thx_TimePeriod.Week,{ fileName : "TestDateTimeUtc.hx", lineNumber : 143, className : "thx.TestDateTimeUtc", methodName : "testSnapPrev"});
		this.assertSnapPrev(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-12-14 00:00:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-12-18 00:00:00"),thx_TimePeriod.Week,{ fileName : "TestDateTimeUtc.hx", lineNumber : 144, className : "thx.TestDateTimeUtc", methodName : "testSnapPrev"});
		this.assertSnapPrev(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-12-01 00:00:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-12-12 00:00:00"),thx_TimePeriod.Month,{ fileName : "TestDateTimeUtc.hx", lineNumber : 145, className : "thx.TestDateTimeUtc", methodName : "testSnapPrev"});
		this.assertSnapPrev(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-12-01 00:00:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-12-18 00:00:00"),thx_TimePeriod.Month,{ fileName : "TestDateTimeUtc.hx", lineNumber : 146, className : "thx.TestDateTimeUtc", methodName : "testSnapPrev"});
		this.assertSnapPrev(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 00:00:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-05-12 00:00:00"),thx_TimePeriod.Year,{ fileName : "TestDateTimeUtc.hx", lineNumber : 147, className : "thx.TestDateTimeUtc", methodName : "testSnapPrev"});
		this.assertSnapPrev(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 00:00:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-12-18 00:00:00"),thx_TimePeriod.Year,{ fileName : "TestDateTimeUtc.hx", lineNumber : 148, className : "thx.TestDateTimeUtc", methodName : "testSnapPrev"});
	}
	,testSnapTo: function() {
		this.assertSnapTo(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 10:06:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 10:06:10"),thx_TimePeriod.Minute,{ fileName : "TestDateTimeUtc.hx", lineNumber : 152, className : "thx.TestDateTimeUtc", methodName : "testSnapTo"});
		this.assertSnapTo(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 10:06:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 10:05:50"),thx_TimePeriod.Minute,{ fileName : "TestDateTimeUtc.hx", lineNumber : 153, className : "thx.TestDateTimeUtc", methodName : "testSnapTo"});
		this.assertSnapTo(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 10:00:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 10:10:10"),thx_TimePeriod.Hour,{ fileName : "TestDateTimeUtc.hx", lineNumber : 154, className : "thx.TestDateTimeUtc", methodName : "testSnapTo"});
		this.assertSnapTo(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 10:00:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 09:50:10"),thx_TimePeriod.Hour,{ fileName : "TestDateTimeUtc.hx", lineNumber : 155, className : "thx.TestDateTimeUtc", methodName : "testSnapTo"});
		this.assertSnapTo(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 00:00:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 10:00:00"),thx_TimePeriod.Day,{ fileName : "TestDateTimeUtc.hx", lineNumber : 156, className : "thx.TestDateTimeUtc", methodName : "testSnapTo"});
		this.assertSnapTo(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 00:00:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2013-12-31 20:00:00"),thx_TimePeriod.Day,{ fileName : "TestDateTimeUtc.hx", lineNumber : 157, className : "thx.TestDateTimeUtc", methodName : "testSnapTo"});
		this.assertSnapTo(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-12-14 00:00:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-12-17 11:00:00"),thx_TimePeriod.Week,{ fileName : "TestDateTimeUtc.hx", lineNumber : 158, className : "thx.TestDateTimeUtc", methodName : "testSnapTo"});
		this.assertSnapTo(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-12-21 00:00:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-12-18 00:00:00"),thx_TimePeriod.Week,{ fileName : "TestDateTimeUtc.hx", lineNumber : 159, className : "thx.TestDateTimeUtc", methodName : "testSnapTo"});
		this.assertSnapTo(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-12-01 00:00:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-12-12 00:00:00"),thx_TimePeriod.Month,{ fileName : "TestDateTimeUtc.hx", lineNumber : 160, className : "thx.TestDateTimeUtc", methodName : "testSnapTo"});
		this.assertSnapTo(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2015-01-01 00:00:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-12-18 00:00:00"),thx_TimePeriod.Month,{ fileName : "TestDateTimeUtc.hx", lineNumber : 161, className : "thx.TestDateTimeUtc", methodName : "testSnapTo"});
		this.assertSnapTo(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-01-01 00:00:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-05-12 00:00:00"),thx_TimePeriod.Year,{ fileName : "TestDateTimeUtc.hx", lineNumber : 162, className : "thx.TestDateTimeUtc", methodName : "testSnapTo"});
		this.assertSnapTo(thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2015-01-01 00:00:00"),thx__$DateTimeUtc_DateTimeUtc_$Impl_$.fromString("2014-12-18 00:00:00"),thx_TimePeriod.Year,{ fileName : "TestDateTimeUtc.hx", lineNumber : 163, className : "thx.TestDateTimeUtc", methodName : "testSnapTo"});
	}
	,assertSnapTo: function(expected,date,period,pos) {
		var t = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.snapTo(date,period);
		var a = expected;
		var b = t;
		utest_Assert.isTrue(a.high == b.high && a.low == b.low,"expected " + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(date) + " to snap to " + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(expected) + " for " + Std.string(period) + " but it is " + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(t),pos);
	}
	,assertSnapPrev: function(expected,date,period,pos) {
		var t = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.snapPrev(date,period);
		var a = expected;
		var b = t;
		utest_Assert.isTrue(a.high == b.high && a.low == b.low,"expected " + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(date) + " to snap before " + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(expected) + " for " + Std.string(period) + " but it is " + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(t),pos);
	}
	,assertSnapNext: function(expected,date,period,pos) {
		var t = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.snapNext(date,period);
		var a = expected;
		var b = t;
		utest_Assert.isTrue(a.high == b.high && a.low == b.low,"expected " + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(date) + " to snap after " + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(expected) + " for " + Std.string(period) + " but it is " + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.toString(t),pos);
	}
	,__class__: thx_TestDateTimeUtc
};
var thx_TestDates = function() {
};
thx_TestDates.__name__ = ["thx","TestDates"];
thx_TestDates.prototype = {
	testCreate: function() {
		[{ expected : new Date(2014,11,1,0,0,0), test : thx_Dates.create(2014,11,1)},{ expected : new Date(2015,3,1,0,0,0), test : thx_Dates.create(2014,15,1)},{ expected : new Date(2013,11,1,0,0,0), test : thx_Dates.create(2014,-1,1)},{ expected : new Date(2014,2,4,0,0,0), test : thx_Dates.create(2014,1,32)},{ expected : new Date(2013,11,31,0,0,0), test : thx_Dates.create(2014,0,0)},{ expected : new Date(2014,1,2,2,0,0), test : thx_Dates.create(2014,1,1,26)},{ expected : new Date(2013,11,31,23,0,0), test : thx_Dates.create(2014,0,1,-1)},{ expected : new Date(2014,1,1,1,5,0), test : thx_Dates.create(2014,1,1,0,65)},{ expected : new Date(2013,11,31,23,59,0), test : thx_Dates.create(2014,0,1,0,-1)},{ expected : new Date(2014,1,1,0,1,5), test : thx_Dates.create(2014,1,1,0,0,65)},{ expected : new Date(2013,11,31,23,59,59), test : thx_Dates.create(2014,0,1,0,0,-1)}].map(function(o) {
			utest_Assert.floatEquals(o.expected.getTime(),o.test.getTime(),null,"expected " + HxOverrides.dateStr(o.expected) + " but was  " + HxOverrides.dateStr(o.test),{ fileName : "TestDates.hx", lineNumber : 36, className : "thx.TestDates", methodName : "testCreate"});
		});
	}
	,testSnapNext: function() {
		this.assertSnapNext("2014-01-01 10:07:00","2014-01-01 10:06:10",thx_TimePeriod.Minute,{ fileName : "TestDates.hx", lineNumber : 41, className : "thx.TestDates", methodName : "testSnapNext"});
		this.assertSnapNext("2014-01-01 10:06:00","2014-01-01 10:05:50",thx_TimePeriod.Minute,{ fileName : "TestDates.hx", lineNumber : 42, className : "thx.TestDates", methodName : "testSnapNext"});
		this.assertSnapNext("2014-01-01 11:00:00","2014-01-01 10:10:10",thx_TimePeriod.Hour,{ fileName : "TestDates.hx", lineNumber : 43, className : "thx.TestDates", methodName : "testSnapNext"});
		this.assertSnapNext("2014-01-01 10:00:00","2014-01-01 09:50:10",thx_TimePeriod.Hour,{ fileName : "TestDates.hx", lineNumber : 44, className : "thx.TestDates", methodName : "testSnapNext"});
		this.assertSnapNext("2014-01-02 00:00:00","2014-01-01 10:00:00",thx_TimePeriod.Day,{ fileName : "TestDates.hx", lineNumber : 45, className : "thx.TestDates", methodName : "testSnapNext"});
		this.assertSnapNext("2014-01-01 00:00:00","2013-12-31 20:00:00",thx_TimePeriod.Day,{ fileName : "TestDates.hx", lineNumber : 46, className : "thx.TestDates", methodName : "testSnapNext"});
		this.assertSnapNext("2014-12-21 00:00:00","2014-12-17 11:00:00",thx_TimePeriod.Week,{ fileName : "TestDates.hx", lineNumber : 47, className : "thx.TestDates", methodName : "testSnapNext"});
		this.assertSnapNext("2014-12-21 00:00:00","2014-12-18 00:00:00",thx_TimePeriod.Week,{ fileName : "TestDates.hx", lineNumber : 48, className : "thx.TestDates", methodName : "testSnapNext"});
		this.assertSnapNext("2015-01-01 00:00:00","2014-12-12 00:00:00",thx_TimePeriod.Month,{ fileName : "TestDates.hx", lineNumber : 49, className : "thx.TestDates", methodName : "testSnapNext"});
		this.assertSnapNext("2015-01-01 00:00:00","2014-12-18 00:00:00",thx_TimePeriod.Month,{ fileName : "TestDates.hx", lineNumber : 50, className : "thx.TestDates", methodName : "testSnapNext"});
		this.assertSnapNext("2015-01-01 00:00:00","2014-05-12 00:00:00",thx_TimePeriod.Year,{ fileName : "TestDates.hx", lineNumber : 51, className : "thx.TestDates", methodName : "testSnapNext"});
		this.assertSnapNext("2015-01-01 00:00:00","2014-12-18 00:00:00",thx_TimePeriod.Year,{ fileName : "TestDates.hx", lineNumber : 52, className : "thx.TestDates", methodName : "testSnapNext"});
	}
	,testSnapPrev: function() {
		this.assertSnapPrev("2014-01-01 10:06:00","2014-01-01 10:06:10",thx_TimePeriod.Minute,{ fileName : "TestDates.hx", lineNumber : 56, className : "thx.TestDates", methodName : "testSnapPrev"});
		this.assertSnapPrev("2014-01-01 10:05:00","2014-01-01 10:05:50",thx_TimePeriod.Minute,{ fileName : "TestDates.hx", lineNumber : 57, className : "thx.TestDates", methodName : "testSnapPrev"});
		this.assertSnapPrev("2014-01-01 10:00:00","2014-01-01 10:10:10",thx_TimePeriod.Hour,{ fileName : "TestDates.hx", lineNumber : 58, className : "thx.TestDates", methodName : "testSnapPrev"});
		this.assertSnapPrev("2014-01-01 09:00:00","2014-01-01 09:50:10",thx_TimePeriod.Hour,{ fileName : "TestDates.hx", lineNumber : 59, className : "thx.TestDates", methodName : "testSnapPrev"});
		this.assertSnapPrev("2014-01-01 00:00:00","2014-01-01 10:00:00",thx_TimePeriod.Day,{ fileName : "TestDates.hx", lineNumber : 60, className : "thx.TestDates", methodName : "testSnapPrev"});
		this.assertSnapPrev("2013-12-31 00:00:00","2013-12-31 20:00:00",thx_TimePeriod.Day,{ fileName : "TestDates.hx", lineNumber : 61, className : "thx.TestDates", methodName : "testSnapPrev"});
		this.assertSnapPrev("2014-12-14 00:00:00","2014-12-17 11:00:00",thx_TimePeriod.Week,{ fileName : "TestDates.hx", lineNumber : 62, className : "thx.TestDates", methodName : "testSnapPrev"});
		this.assertSnapPrev("2014-12-14 00:00:00","2014-12-18 00:00:00",thx_TimePeriod.Week,{ fileName : "TestDates.hx", lineNumber : 63, className : "thx.TestDates", methodName : "testSnapPrev"});
		this.assertSnapPrev("2014-12-01 00:00:00","2014-12-12 00:00:00",thx_TimePeriod.Month,{ fileName : "TestDates.hx", lineNumber : 64, className : "thx.TestDates", methodName : "testSnapPrev"});
		this.assertSnapPrev("2014-12-01 00:00:00","2014-12-18 00:00:00",thx_TimePeriod.Month,{ fileName : "TestDates.hx", lineNumber : 65, className : "thx.TestDates", methodName : "testSnapPrev"});
		this.assertSnapPrev("2014-01-01 00:00:00","2014-05-12 00:00:00",thx_TimePeriod.Year,{ fileName : "TestDates.hx", lineNumber : 66, className : "thx.TestDates", methodName : "testSnapPrev"});
		this.assertSnapPrev("2014-01-01 00:00:00","2014-12-18 00:00:00",thx_TimePeriod.Year,{ fileName : "TestDates.hx", lineNumber : 67, className : "thx.TestDates", methodName : "testSnapPrev"});
	}
	,testSnapTo: function() {
		this.assertSnapTo("2014-01-01 10:06:00","2014-01-01 10:06:10",thx_TimePeriod.Minute,{ fileName : "TestDates.hx", lineNumber : 71, className : "thx.TestDates", methodName : "testSnapTo"});
		this.assertSnapTo("2014-01-01 10:06:00","2014-01-01 10:05:50",thx_TimePeriod.Minute,{ fileName : "TestDates.hx", lineNumber : 72, className : "thx.TestDates", methodName : "testSnapTo"});
		this.assertSnapTo("2014-01-01 10:00:00","2014-01-01 10:10:10",thx_TimePeriod.Hour,{ fileName : "TestDates.hx", lineNumber : 73, className : "thx.TestDates", methodName : "testSnapTo"});
		this.assertSnapTo("2014-01-01 10:00:00","2014-01-01 09:50:10",thx_TimePeriod.Hour,{ fileName : "TestDates.hx", lineNumber : 74, className : "thx.TestDates", methodName : "testSnapTo"});
		this.assertSnapTo("2014-01-01 00:00:00","2014-01-01 10:00:00",thx_TimePeriod.Day,{ fileName : "TestDates.hx", lineNumber : 75, className : "thx.TestDates", methodName : "testSnapTo"});
		this.assertSnapTo("2014-01-01 00:00:00","2013-12-31 20:00:00",thx_TimePeriod.Day,{ fileName : "TestDates.hx", lineNumber : 76, className : "thx.TestDates", methodName : "testSnapTo"});
		this.assertSnapTo("2014-12-14 00:00:00","2014-12-17 11:00:00",thx_TimePeriod.Week,{ fileName : "TestDates.hx", lineNumber : 77, className : "thx.TestDates", methodName : "testSnapTo"});
		this.assertSnapTo("2014-12-21 00:00:00","2014-12-18 00:00:00",thx_TimePeriod.Week,{ fileName : "TestDates.hx", lineNumber : 78, className : "thx.TestDates", methodName : "testSnapTo"});
		this.assertSnapTo("2014-12-01 00:00:00","2014-12-12 00:00:00",thx_TimePeriod.Month,{ fileName : "TestDates.hx", lineNumber : 79, className : "thx.TestDates", methodName : "testSnapTo"});
		this.assertSnapTo("2015-01-01 00:00:00","2014-12-18 00:00:00",thx_TimePeriod.Month,{ fileName : "TestDates.hx", lineNumber : 80, className : "thx.TestDates", methodName : "testSnapTo"});
		this.assertSnapTo("2014-01-01 00:00:00","2014-05-12 00:00:00",thx_TimePeriod.Year,{ fileName : "TestDates.hx", lineNumber : 81, className : "thx.TestDates", methodName : "testSnapTo"});
		this.assertSnapTo("2015-01-01 00:00:00","2014-12-18 00:00:00",thx_TimePeriod.Year,{ fileName : "TestDates.hx", lineNumber : 82, className : "thx.TestDates", methodName : "testSnapTo"});
	}
	,assertSnapTo: function(expected,date,period,pos) {
		var this1 = thx__$Timestamp_Timestamp_$Impl_$.snapTo(HxOverrides.strDate(date).getTime(),period);
		var t = new Date(this1);
		utest_Assert.floatEquals(HxOverrides.strDate(expected).getTime(),t.getTime(),null,"expected " + date + " to snap to " + expected + " for " + Std.string(period) + " but it is " + HxOverrides.dateStr(t),pos);
	}
	,assertSnapPrev: function(expected,date,period,pos) {
		var this1 = thx__$Timestamp_Timestamp_$Impl_$.snapPrev(HxOverrides.strDate(date).getTime(),period);
		var t = new Date(this1);
		utest_Assert.floatEquals(HxOverrides.strDate(expected).getTime(),t.getTime(),null,"expected " + date + " to snap before " + expected + " for " + Std.string(period) + " but it is " + HxOverrides.dateStr(t),pos);
	}
	,assertSnapNext: function(expected,date,period,pos) {
		var this1 = thx__$Timestamp_Timestamp_$Impl_$.snapNext(HxOverrides.strDate(date).getTime(),period);
		var t = new Date(this1);
		utest_Assert.floatEquals(HxOverrides.strDate(expected).getTime(),t.getTime(),null,"expected " + date + " to snap after " + expected + " for " + Std.string(period) + " but it is " + HxOverrides.dateStr(t),pos);
	}
	,__class__: thx_TestDates
};
var thx_TestDecimal = function() {
};
thx_TestDecimal.__name__ = ["thx","TestDecimal"];
thx_TestDecimal.prototype = {
	divisionSize: null
	,setup: function() {
		this.divisionSize = thx_bigint_Decimals.divisionExtraScale;
		thx_bigint_Decimals.divisionExtraScale = 16;
	}
	,teardown: function() {
		thx_bigint_Decimals.divisionExtraScale = this.divisionSize;
	}
	,testToBigInt: function() {
		var v = thx_bigint_Decimals.parse("10234.0001040000");
		utest_Assert.isTrue(thx__$BigInt_BigInt_$Impl_$.equals(thx__$Decimal_Decimal_$Impl_$.toBigInt(v),thx_bigint_Bigs.parseBase("10234",10)),"expected 10234 but got " + thx__$Decimal_Decimal_$Impl_$.toBigInt(v).toString(),{ fileName : "TestDecimal.hx", lineNumber : 22, className : "thx.TestDecimal", methodName : "testToBigInt"});
	}
	,testTrim: function() {
		var v = thx_bigint_Decimals.parse("10234.0001040000");
		utest_Assert.isTrue(v.scale == 10,null,{ fileName : "TestDecimal.hx", lineNumber : 27, className : "thx.TestDecimal", methodName : "testTrim"});
		utest_Assert.isTrue(v.trim(null).scale == 6,null,{ fileName : "TestDecimal.hx", lineNumber : 28, className : "thx.TestDecimal", methodName : "testTrim"});
		utest_Assert.isTrue(v.trim(8).scale == 8,"expected " + v.trim(8).toString() + " to have a scale 8 but it is " + v.trim(8).scale,{ fileName : "TestDecimal.hx", lineNumber : 29, className : "thx.TestDecimal", methodName : "testTrim"});
		utest_Assert.isTrue(v.trim(2).scale == 6,"expected " + v.trim(2).toString() + " to have a scale 6 but it is " + v.trim(2).scale,{ fileName : "TestDecimal.hx", lineNumber : 30, className : "thx.TestDecimal", methodName : "testTrim"});
		v = thx_bigint_Decimals.parse("10234.00000000");
		utest_Assert.isTrue(v.trim(null).scale == 0,null,{ fileName : "TestDecimal.hx", lineNumber : 32, className : "thx.TestDecimal", methodName : "testTrim"});
		utest_Assert.isTrue(v.trim(2).scale == 2,"expected " + v.trim(2).toString() + ".scale == 2 but is " + v.trim(2).scale,{ fileName : "TestDecimal.hx", lineNumber : 33, className : "thx.TestDecimal", methodName : "testTrim"});
		v = thx_bigint_Decimals.parse("1.20000000");
		utest_Assert.isTrue(v.trim(null).scale == 1,"expected " + v.trim(null).toString() + ".scale == 1 but got " + v.trim(null).scale,{ fileName : "TestDecimal.hx", lineNumber : 35, className : "thx.TestDecimal", methodName : "testTrim"});
	}
	,testStringExp: function() {
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.parse("1.12345e-10"),thx_bigint_Decimals.parse("0.000000000112345")),"expected " + thx_bigint_Decimals.parse("0.000000000112345").toString() + " but got " + thx_bigint_Decimals.parse("1.12345e-10").toString(),{ fileName : "TestDecimal.hx", lineNumber : 39, className : "thx.TestDecimal", methodName : "testStringExp"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.parse("1.12345e+10"),thx_bigint_Decimals.parse("11234500000")),"expected " + thx_bigint_Decimals.parse("11234500000").toString() + " but got " + thx_bigint_Decimals.parse("1.12345e+10").toString(),{ fileName : "TestDecimal.hx", lineNumber : 40, className : "thx.TestDecimal", methodName : "testStringExp"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.parse("-1.12345e-10"),thx_bigint_Decimals.parse("-0.000000000112345")),"expected " + thx_bigint_Decimals.parse("-0.000000000112345").toString() + " but got " + thx_bigint_Decimals.parse("-1.12345e-10").toString(),{ fileName : "TestDecimal.hx", lineNumber : 41, className : "thx.TestDecimal", methodName : "testStringExp"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.parse("-1.12345e+10"),thx_bigint_Decimals.parse("-11234500000")),"expected " + thx_bigint_Decimals.parse("-11234500000").toString() + " but got " + thx_bigint_Decimals.parse("-1.12345e+10").toString(),{ fileName : "TestDecimal.hx", lineNumber : 42, className : "thx.TestDecimal", methodName : "testStringExp"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.parse("0E7"),thx_bigint_Decimals.parse("0")),"expected " + thx_bigint_Decimals.parse("0").toString() + " but got " + thx_bigint_Decimals.parse("0E7").toString(),{ fileName : "TestDecimal.hx", lineNumber : 43, className : "thx.TestDecimal", methodName : "testStringExp"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.fromFloat(1.234e-50),thx_bigint_Decimals.parse("1.234000e-050")),"expected " + thx_bigint_Decimals.fromFloat(1.234e-50).toString() + " == " + thx_bigint_Decimals.parse("1.234000e-050").toString(),{ fileName : "TestDecimal.hx", lineNumber : 44, className : "thx.TestDecimal", methodName : "testStringExp"});
	}
	,testModulo: function() {
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx__$Decimal_Decimal_$Impl_$.fromInt(10).modulo(thx__$Decimal_Decimal_$Impl_$.fromInt(3)),thx__$Decimal_Decimal_$Impl_$.fromInt(1)),null,{ fileName : "TestDecimal.hx", lineNumber : 48, className : "thx.TestDecimal", methodName : "testModulo"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.fromFloat(10.2).modulo(thx__$Decimal_Decimal_$Impl_$.fromInt(3)),thx_bigint_Decimals.fromFloat(1.2)),null,{ fileName : "TestDecimal.hx", lineNumber : 49, className : "thx.TestDecimal", methodName : "testModulo"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.parse("12345678900000000").modulo(thx_bigint_Decimals.parse("0.0000000012345678")),thx_bigint_Decimals.parse("0.0000000009832122")),null,{ fileName : "TestDecimal.hx", lineNumber : 50, className : "thx.TestDecimal", methodName : "testModulo"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.fromFloat(16.80).modulo(thx_bigint_Decimals.fromFloat(4.10)),thx_bigint_Decimals.parse("0.4")),null,{ fileName : "TestDecimal.hx", lineNumber : 51, className : "thx.TestDecimal", methodName : "testModulo"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx__$Decimal_Decimal_$Impl_$.fromInt(10).modulo(thx__$Decimal_Decimal_$Impl_$.fromInt(3)),thx__$Decimal_Decimal_$Impl_$.fromInt(1)),null,{ fileName : "TestDecimal.hx", lineNumber : 52, className : "thx.TestDecimal", methodName : "testModulo"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.fromFloat(10.2).modulo(thx__$Decimal_Decimal_$Impl_$.fromInt(3)),thx_bigint_Decimals.fromFloat(1.2)),null,{ fileName : "TestDecimal.hx", lineNumber : 53, className : "thx.TestDecimal", methodName : "testModulo"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx__$Decimal_Decimal_$Impl_$.fromInt(10).modulo(thx__$Decimal_Decimal_$Impl_$.fromInt(-3)),thx__$Decimal_Decimal_$Impl_$.fromInt(1)),null,{ fileName : "TestDecimal.hx", lineNumber : 55, className : "thx.TestDecimal", methodName : "testModulo"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx__$Decimal_Decimal_$Impl_$.fromInt(-10).modulo(thx__$Decimal_Decimal_$Impl_$.fromInt(-3)),thx__$Decimal_Decimal_$Impl_$.fromInt(-1)),null,{ fileName : "TestDecimal.hx", lineNumber : 56, className : "thx.TestDecimal", methodName : "testModulo"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx__$Decimal_Decimal_$Impl_$.fromInt(-10).modulo(thx__$Decimal_Decimal_$Impl_$.fromInt(3)),thx__$Decimal_Decimal_$Impl_$.fromInt(-1)),null,{ fileName : "TestDecimal.hx", lineNumber : 57, className : "thx.TestDecimal", methodName : "testModulo"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx__$Decimal_Decimal_$Impl_$.fromInt(0).modulo(thx__$Decimal_Decimal_$Impl_$.fromInt(3)),thx_bigint_Decimals.parse("0.0")),null,{ fileName : "TestDecimal.hx", lineNumber : 59, className : "thx.TestDecimal", methodName : "testModulo"});
		utest_Assert.raises(function() {
			thx__$Decimal_Decimal_$Impl_$.fromInt(1).modulo(thx__$Decimal_Decimal_$Impl_$.fromInt(0));
		},null,null,null,{ fileName : "TestDecimal.hx", lineNumber : 61, className : "thx.TestDecimal", methodName : "testModulo"});
	}
	,testDivision: function() {
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.parse("12345678900000000").divide(thx_bigint_Decimals.parse("0.0000000012345678")),thx_bigint_Decimals.parse("10000000729000059778004901.79640194730495967900669367854888")),null,{ fileName : "TestDecimal.hx", lineNumber : 65, className : "thx.TestDecimal", methodName : "testDivision"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.parse("12345678901234567890.12346789").divide(thx_bigint_Decimals.parse("987654321.987654321")),thx_bigint_Decimals.parse("12499999874.843750115314464248433558")),"expected " + thx_bigint_Decimals.parse("12345678901234567890.12346789").toString() + " / " + thx_bigint_Decimals.parse("987654321.987654321").toString() + " == " + thx_bigint_Decimals.parse("12499999874.843750115314464248433558").toString() + " but got " + thx_bigint_Decimals.parse("12345678901234567890.12346789").divide(thx_bigint_Decimals.parse("987654321.987654321")).toString(),{ fileName : "TestDecimal.hx", lineNumber : 66, className : "thx.TestDecimal", methodName : "testDivision"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.parse("12345678901234567890.12346789").divide(thx_bigint_Decimals.parse("-987654321.987654321")),thx_bigint_Decimals.parse("-12499999874.843750115314464248433558")),null,{ fileName : "TestDecimal.hx", lineNumber : 67, className : "thx.TestDecimal", methodName : "testDivision"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.parse("-12345678901234567890.12346789").divide(thx_bigint_Decimals.parse("-987654321.987654321")),thx_bigint_Decimals.parse("12499999874.843750115314464248433558")),null,{ fileName : "TestDecimal.hx", lineNumber : 68, className : "thx.TestDecimal", methodName : "testDivision"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.parse("-12345678901234567890.12346789").divide(thx_bigint_Decimals.parse("987654321.987654321")),thx_bigint_Decimals.parse("-12499999874.843750115314464248433558")),null,{ fileName : "TestDecimal.hx", lineNumber : 69, className : "thx.TestDecimal", methodName : "testDivision"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.parse("-12345678901234567890.12346789").divide(thx__$Decimal_Decimal_$Impl_$.fromInt(1)),thx_bigint_Decimals.parse("-12345678901234567890.12346789")),null,{ fileName : "TestDecimal.hx", lineNumber : 70, className : "thx.TestDecimal", methodName : "testDivision"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.parse("-12345678901234567890.12346789").divide(thx_bigint_Decimals.parse("-12345678901234567890.12346789")),thx__$Decimal_Decimal_$Impl_$.fromInt(1)),null,{ fileName : "TestDecimal.hx", lineNumber : 71, className : "thx.TestDecimal", methodName : "testDivision"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx__$Decimal_Decimal_$Impl_$.fromInt(10).divide(thx__$Decimal_Decimal_$Impl_$.fromInt(2)),thx__$Decimal_Decimal_$Impl_$.fromInt(5)),null,{ fileName : "TestDecimal.hx", lineNumber : 72, className : "thx.TestDecimal", methodName : "testDivision"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx__$Decimal_Decimal_$Impl_$.fromInt(10).divide(thx__$Decimal_Decimal_$Impl_$.fromInt(3)),thx_bigint_Decimals.parse("3.3333333333333333")),null,{ fileName : "TestDecimal.hx", lineNumber : 73, className : "thx.TestDecimal", methodName : "testDivision"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx__$Decimal_Decimal_$Impl_$.fromInt(1).divide(thx__$Decimal_Decimal_$Impl_$.fromInt(2)),thx_bigint_Decimals.fromFloat(0.5)),null,{ fileName : "TestDecimal.hx", lineNumber : 74, className : "thx.TestDecimal", methodName : "testDivision"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx__$Decimal_Decimal_$Impl_$.fromInt(1).divide(thx__$Decimal_Decimal_$Impl_$.fromInt(3)),thx_bigint_Decimals.parse("0.3333333333333333")),null,{ fileName : "TestDecimal.hx", lineNumber : 75, className : "thx.TestDecimal", methodName : "testDivision"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx__$Decimal_Decimal_$Impl_$.fromInt(0).divide(thx__$Decimal_Decimal_$Impl_$.fromInt(3)),thx_bigint_Decimals.parse("0.0")),null,{ fileName : "TestDecimal.hx", lineNumber : 77, className : "thx.TestDecimal", methodName : "testDivision"});
		utest_Assert.raises(function() {
			thx__$Decimal_Decimal_$Impl_$.fromInt(1).divide(thx__$Decimal_Decimal_$Impl_$.fromInt(0));
		},null,null,null,{ fileName : "TestDecimal.hx", lineNumber : 79, className : "thx.TestDecimal", methodName : "testDivision"});
	}
	,testMultiply: function() {
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.parse("12345678900000000").multiply(thx_bigint_Decimals.parse("0.0000000012345678")),thx_bigint_Decimals.parse("15241577.63907942")),null,{ fileName : "TestDecimal.hx", lineNumber : 83, className : "thx.TestDecimal", methodName : "testMultiply"});
	}
	,testInts: function() {
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx__$Decimal_Decimal_$Impl_$.fromInt(123),thx_bigint_Decimals.parse("123")),null,{ fileName : "TestDecimal.hx", lineNumber : 87, className : "thx.TestDecimal", methodName : "testInts"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx__$Decimal_Decimal_$Impl_$.fromInt(-123),thx_bigint_Decimals.parse("-123")),null,{ fileName : "TestDecimal.hx", lineNumber : 88, className : "thx.TestDecimal", methodName : "testInts"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx__$Decimal_Decimal_$Impl_$.fromInt(1234567890),thx_bigint_Decimals.parse("1234567890")),null,{ fileName : "TestDecimal.hx", lineNumber : 89, className : "thx.TestDecimal", methodName : "testInts"});
	}
	,testFloats: function() {
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.fromFloat(123.456),thx_bigint_Decimals.parse("123.456")),null,{ fileName : "TestDecimal.hx", lineNumber : 93, className : "thx.TestDecimal", methodName : "testFloats"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.fromFloat(-123.456),thx_bigint_Decimals.parse("-123.456")),null,{ fileName : "TestDecimal.hx", lineNumber : 94, className : "thx.TestDecimal", methodName : "testFloats"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.fromFloat(0.123456789),thx_bigint_Decimals.parse("0.123456789")),null,{ fileName : "TestDecimal.hx", lineNumber : 95, className : "thx.TestDecimal", methodName : "testFloats"});
	}
	,testEquality: function() {
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.parse("123.456"),thx_bigint_Decimals.parse("123.4560000")),null,{ fileName : "TestDecimal.hx", lineNumber : 99, className : "thx.TestDecimal", methodName : "testEquality"});
	}
	,testAddition: function() {
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.parse("123.456").add(thx_bigint_Decimals.parse("76.544000")),thx_bigint_Decimals.parse("200")),null,{ fileName : "TestDecimal.hx", lineNumber : 103, className : "thx.TestDecimal", methodName : "testAddition"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.parse("123.456").add(thx_bigint_Decimals.parse("0.004")),thx_bigint_Decimals.parse("123.46")),null,{ fileName : "TestDecimal.hx", lineNumber : 104, className : "thx.TestDecimal", methodName : "testAddition"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.parse("123.456").add(thx_bigint_Decimals.parse("-0.456")),thx_bigint_Decimals.parse("123")),null,{ fileName : "TestDecimal.hx", lineNumber : 105, className : "thx.TestDecimal", methodName : "testAddition"});
	}
	,testSubtraction: function() {
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.parse("123.456").subtract(thx_bigint_Decimals.parse("76.544000")),thx_bigint_Decimals.parse("46.912000")),null,{ fileName : "TestDecimal.hx", lineNumber : 109, className : "thx.TestDecimal", methodName : "testSubtraction"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.parse("123.456").subtract(thx_bigint_Decimals.parse("0.004")),thx_bigint_Decimals.parse("123.452")),null,{ fileName : "TestDecimal.hx", lineNumber : 110, className : "thx.TestDecimal", methodName : "testSubtraction"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.parse("123.456").subtract(thx_bigint_Decimals.parse("-0.456")),thx_bigint_Decimals.parse("123.912")),null,{ fileName : "TestDecimal.hx", lineNumber : 111, className : "thx.TestDecimal", methodName : "testSubtraction"});
	}
	,testComparison: function() {
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.greater(thx_bigint_Decimals.parse("1"),thx_bigint_Decimals.parse("0.11111")),null,{ fileName : "TestDecimal.hx", lineNumber : 115, className : "thx.TestDecimal", methodName : "testComparison"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.greater(thx_bigint_Decimals.parse("1"),thx__$Decimal_Decimal_$Impl_$.fromInt(-1)),null,{ fileName : "TestDecimal.hx", lineNumber : 116, className : "thx.TestDecimal", methodName : "testComparison"});
		utest_Assert.isFalse(thx__$Decimal_Decimal_$Impl_$.greater(thx_bigint_Decimals.parse("1"),thx__$Decimal_Decimal_$Impl_$.fromInt(1)),null,{ fileName : "TestDecimal.hx", lineNumber : 117, className : "thx.TestDecimal", methodName : "testComparison"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.greaterEquals(thx_bigint_Decimals.parse("1"),thx__$Decimal_Decimal_$Impl_$.fromInt(1)),null,{ fileName : "TestDecimal.hx", lineNumber : 118, className : "thx.TestDecimal", methodName : "testComparison"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.parse("1"),thx__$Decimal_Decimal_$Impl_$.fromInt(1)),null,{ fileName : "TestDecimal.hx", lineNumber : 119, className : "thx.TestDecimal", methodName : "testComparison"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.parse("1.01001"),thx_bigint_Decimals.parse("1.0100100")),null,{ fileName : "TestDecimal.hx", lineNumber : 120, className : "thx.TestDecimal", methodName : "testComparison"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.parse("0"),thx_bigint_Decimals.parse("0")),null,{ fileName : "TestDecimal.hx", lineNumber : 121, className : "thx.TestDecimal", methodName : "testComparison"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx_bigint_Decimals.parse("0.000"),thx__$Decimal_Decimal_$Impl_$.fromInt(0)),null,{ fileName : "TestDecimal.hx", lineNumber : 122, className : "thx.TestDecimal", methodName : "testComparison"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.greaterEquals(thx_bigint_Decimals.parse("-1.12345e+10"),thx_bigint_Decimals.parse("-11234500000")),null,{ fileName : "TestDecimal.hx", lineNumber : 123, className : "thx.TestDecimal", methodName : "testComparison"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.lessEquals(thx_bigint_Decimals.parse("-1.12345e+10"),thx_bigint_Decimals.parse("-11234500000")),null,{ fileName : "TestDecimal.hx", lineNumber : 124, className : "thx.TestDecimal", methodName : "testComparison"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.greaterEquals(thx_bigint_Decimals.parse("1.12345e+10"),thx_bigint_Decimals.parse("11234500000")),null,{ fileName : "TestDecimal.hx", lineNumber : 125, className : "thx.TestDecimal", methodName : "testComparison"});
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.lessEquals(thx_bigint_Decimals.parse("1.12345e+10"),thx_bigint_Decimals.parse("11234500000")),null,{ fileName : "TestDecimal.hx", lineNumber : 126, className : "thx.TestDecimal", methodName : "testComparison"});
	}
	,testString: function() {
		var tests = ["0","0.00000789","0.001","0.123","1.0","1","1.1","123456789.0123456789","123456789.012345678900000"];
		var dec;
		var _g = 0;
		while(_g < tests.length) {
			var test = tests[_g];
			++_g;
			dec = thx_bigint_Decimals.parse(test);
			utest_Assert.equals(test,dec.toString(),null,{ fileName : "TestDecimal.hx", lineNumber : 134, className : "thx.TestDecimal", methodName : "testString"});
			if(test == "0") {
				continue;
			}
			dec = thx_bigint_Decimals.parse("-" + test);
			utest_Assert.equals("-" + test,dec.toString(),null,{ fileName : "TestDecimal.hx", lineNumber : 139, className : "thx.TestDecimal", methodName : "testString"});
		}
	}
	,assertDecimalEquals: function(test,expected,pos) {
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(test,expected),"expected " + expected.toString() + " but got " + test.toString(),pos);
	}
	,testRound: function() {
		this.assertDecimalEquals(thx__$Decimal_Decimal_$Impl_$.fromInt(0).roundTo(0),thx__$Decimal_Decimal_$Impl_$.fromInt(0),{ fileName : "TestDecimal.hx", lineNumber : 148, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx__$Decimal_Decimal_$Impl_$.fromInt(0).ceilTo(0),thx__$Decimal_Decimal_$Impl_$.fromInt(0),{ fileName : "TestDecimal.hx", lineNumber : 149, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx__$Decimal_Decimal_$Impl_$.fromInt(0).floorTo(0),thx__$Decimal_Decimal_$Impl_$.fromInt(0),{ fileName : "TestDecimal.hx", lineNumber : 150, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx__$Decimal_Decimal_$Impl_$.fromInt(1).roundTo(0),thx__$Decimal_Decimal_$Impl_$.fromInt(1),{ fileName : "TestDecimal.hx", lineNumber : 152, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx__$Decimal_Decimal_$Impl_$.fromInt(-1).roundTo(0),thx__$Decimal_Decimal_$Impl_$.fromInt(-1),{ fileName : "TestDecimal.hx", lineNumber : 153, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx__$Decimal_Decimal_$Impl_$.fromInt(1).ceilTo(0),thx__$Decimal_Decimal_$Impl_$.fromInt(1),{ fileName : "TestDecimal.hx", lineNumber : 154, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx__$Decimal_Decimal_$Impl_$.fromInt(-1).ceilTo(0),thx__$Decimal_Decimal_$Impl_$.fromInt(-1),{ fileName : "TestDecimal.hx", lineNumber : 155, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx__$Decimal_Decimal_$Impl_$.fromInt(1).floorTo(0),thx__$Decimal_Decimal_$Impl_$.fromInt(1),{ fileName : "TestDecimal.hx", lineNumber : 156, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx__$Decimal_Decimal_$Impl_$.fromInt(-1).floorTo(0),thx__$Decimal_Decimal_$Impl_$.fromInt(-1),{ fileName : "TestDecimal.hx", lineNumber : 157, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx_bigint_Decimals.parse("1234567890.1234567890").roundTo(0),thx_bigint_Decimals.parse("1234567890"),{ fileName : "TestDecimal.hx", lineNumber : 159, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx_bigint_Decimals.parse("1234567890.1234567890").roundTo(3),thx_bigint_Decimals.parse("1234567890.123"),{ fileName : "TestDecimal.hx", lineNumber : 160, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx_bigint_Decimals.parse("1234567890.1234567890").roundTo(5),thx_bigint_Decimals.parse("1234567890.12346"),{ fileName : "TestDecimal.hx", lineNumber : 161, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx_bigint_Decimals.parse("1234567890.1234567890").roundTo(6),thx_bigint_Decimals.parse("1234567890.123457"),{ fileName : "TestDecimal.hx", lineNumber : 162, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx_bigint_Decimals.parse("-1234567890.1234567890").roundTo(0),thx_bigint_Decimals.parse("-1234567890"),{ fileName : "TestDecimal.hx", lineNumber : 164, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx_bigint_Decimals.parse("-1234567890.1234567890").roundTo(3),thx_bigint_Decimals.parse("-1234567890.123"),{ fileName : "TestDecimal.hx", lineNumber : 165, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx_bigint_Decimals.parse("-1234567890.1234567890").roundTo(5),thx_bigint_Decimals.parse("-1234567890.12345"),{ fileName : "TestDecimal.hx", lineNumber : 166, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx_bigint_Decimals.parse("-1234567890.1234567890").roundTo(6),thx_bigint_Decimals.parse("-1234567890.123456"),{ fileName : "TestDecimal.hx", lineNumber : 167, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx_bigint_Decimals.parse("1234567890.1234567890").ceilTo(0),thx_bigint_Decimals.parse("1234567891"),{ fileName : "TestDecimal.hx", lineNumber : 169, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx_bigint_Decimals.parse("1234567890.1234567890").ceilTo(3),thx_bigint_Decimals.parse("1234567890.124"),{ fileName : "TestDecimal.hx", lineNumber : 170, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx_bigint_Decimals.parse("1234567890.1234567890").ceilTo(5),thx_bigint_Decimals.parse("1234567890.12346"),{ fileName : "TestDecimal.hx", lineNumber : 171, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx_bigint_Decimals.parse("1234567890.1234567890").ceilTo(6),thx_bigint_Decimals.parse("1234567890.123457"),{ fileName : "TestDecimal.hx", lineNumber : 172, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx_bigint_Decimals.parse("-1234567890.1234567890").ceilTo(0),thx_bigint_Decimals.parse("-1234567890"),{ fileName : "TestDecimal.hx", lineNumber : 174, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx_bigint_Decimals.parse("-1234567890.1234567890").ceilTo(3),thx_bigint_Decimals.parse("-1234567890.123"),{ fileName : "TestDecimal.hx", lineNumber : 175, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx_bigint_Decimals.parse("-1234567890.1234567890").ceilTo(5),thx_bigint_Decimals.parse("-1234567890.12345"),{ fileName : "TestDecimal.hx", lineNumber : 176, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx_bigint_Decimals.parse("-1234567890.1234567890").ceilTo(6),thx_bigint_Decimals.parse("-1234567890.123456"),{ fileName : "TestDecimal.hx", lineNumber : 177, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx_bigint_Decimals.parse("1234567890.1234567890").floorTo(0),thx_bigint_Decimals.parse("1234567890"),{ fileName : "TestDecimal.hx", lineNumber : 179, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx_bigint_Decimals.parse("1234567890.1234567890").floorTo(3),thx_bigint_Decimals.parse("1234567890.123"),{ fileName : "TestDecimal.hx", lineNumber : 180, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx_bigint_Decimals.parse("1234567890.1234567890").floorTo(5),thx_bigint_Decimals.parse("1234567890.12345"),{ fileName : "TestDecimal.hx", lineNumber : 181, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx_bigint_Decimals.parse("1234567890.1234567890").floorTo(6),thx_bigint_Decimals.parse("1234567890.123456"),{ fileName : "TestDecimal.hx", lineNumber : 182, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx_bigint_Decimals.parse("-1234567890.1234567890").floorTo(0),thx_bigint_Decimals.parse("-1234567890"),{ fileName : "TestDecimal.hx", lineNumber : 184, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx_bigint_Decimals.parse("-1234567890.1234567890").floorTo(3),thx_bigint_Decimals.parse("-1234567890.123"),{ fileName : "TestDecimal.hx", lineNumber : 185, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx_bigint_Decimals.parse("-1234567890.1234567890").floorTo(5),thx_bigint_Decimals.parse("-1234567890.12345"),{ fileName : "TestDecimal.hx", lineNumber : 186, className : "thx.TestDecimal", methodName : "testRound"});
		this.assertDecimalEquals(thx_bigint_Decimals.parse("-1234567890.1234567890").floorTo(6),thx_bigint_Decimals.parse("-1234567890.123456"),{ fileName : "TestDecimal.hx", lineNumber : 187, className : "thx.TestDecimal", methodName : "testRound"});
	}
	,testScaleTo: function() {
		var tests = [{ src : "0", exp : "0", scale : 0},{ src : "0", exp : "0.00000", scale : 5},{ src : "0.1", exp : "0.100", scale : 3},{ src : "0.0123456", exp : "0.012", scale : 3},{ src : "1234567890.1234567890", exp : "1234567890.123", scale : 3},{ src : "1234567890.1234567890", exp : "1234567890.1234567890", scale : 10},{ src : "1234567890.1234567890", exp : "1234567890.123456789000", scale : 12}];
		var dec;
		var _g = 0;
		while(_g < tests.length) {
			var test = tests[_g];
			++_g;
			dec = thx_bigint_Decimals.parse(test.src);
			utest_Assert.equals(test.exp,dec.scaleTo(test.scale).toString(),"expected " + test.src + " to be " + test.exp + " when scaled to " + test.scale + " but got " + dec.scaleTo(test.scale).toString(),{ fileName : "TestDecimal.hx", lineNumber : 203, className : "thx.TestDecimal", methodName : "testScaleTo"});
			if(test.src == "0") {
				continue;
			}
			dec = thx_bigint_Decimals.parse("-" + test.src);
			utest_Assert.equals("-" + test.exp,dec.scaleTo(test.scale).toString(),"expected -" + test.src + " to be -" + test.exp + " when scaled to " + test.scale + " but got -" + dec.scaleTo(test.scale).toString(),{ fileName : "TestDecimal.hx", lineNumber : 208, className : "thx.TestDecimal", methodName : "testScaleTo"});
		}
	}
	,testNegativePow: function() {
		utest_Assert.isTrue(thx__$Decimal_Decimal_$Impl_$.equals(thx__$Decimal_Decimal_$Impl_$.fromInt(10).pow(-2),thx_bigint_Decimals.fromFloat(0.01)),null,{ fileName : "TestDecimal.hx", lineNumber : 213, className : "thx.TestDecimal", methodName : "testNegativePow"});
	}
	,__class__: thx_TestDecimal
};
var thx_TestDynamics = function() {
};
thx_TestDynamics.__name__ = ["thx","TestDynamics"];
thx_TestDynamics.prototype = {
	testDynamics: function() {
		utest_Assert.equals(null,thx_Dynamics.clone(null),null,{ fileName : "TestDynamics.hx", lineNumber : 11, className : "thx.TestDynamics", methodName : "testDynamics"});
		utest_Assert.equals(true,thx_Dynamics.clone(true),null,{ fileName : "TestDynamics.hx", lineNumber : 12, className : "thx.TestDynamics", methodName : "testDynamics"});
		utest_Assert.equals("hello",thx_Dynamics.clone("hello"),null,{ fileName : "TestDynamics.hx", lineNumber : 13, className : "thx.TestDynamics", methodName : "testDynamics"});
		utest_Assert.equals(3,thx_Dynamics.clone(3),null,{ fileName : "TestDynamics.hx", lineNumber : 14, className : "thx.TestDynamics", methodName : "testDynamics"});
		utest_Assert.equals(3.14,thx_Dynamics.clone(3.14),null,{ fileName : "TestDynamics.hx", lineNumber : 15, className : "thx.TestDynamics", methodName : "testDynamics"});
		utest_Assert.equals(ValueType.TBool,thx_Dynamics.clone(ValueType.TBool),null,{ fileName : "TestDynamics.hx", lineNumber : 16, className : "thx.TestDynamics", methodName : "testDynamics"});
		utest_Assert.isTrue(Type.enumEq(ValueType.TClass(thx_TestDynamics),thx_Dynamics.clone(ValueType.TClass(thx_TestDynamics))),null,{ fileName : "TestDynamics.hx", lineNumber : 17, className : "thx.TestDynamics", methodName : "testDynamics"});
		var date = new Date();
		utest_Assert.equals(date,thx_Dynamics.clone(date),null,{ fileName : "TestDynamics.hx", lineNumber : 19, className : "thx.TestDynamics", methodName : "testDynamics"});
		utest_Assert.same($bind(this,this.testDynamics),thx_Dynamics.clone($bind(this,this.testDynamics)),null,null,null,{ fileName : "TestDynamics.hx", lineNumber : 20, className : "thx.TestDynamics", methodName : "testDynamics"});
		var arr1 = [0,1,2];
		var arr2 = thx_Dynamics.clone(arr1);
		utest_Assert.notEquals(arr1,arr2,null,{ fileName : "TestDynamics.hx", lineNumber : 24, className : "thx.TestDynamics", methodName : "testDynamics"});
		utest_Assert.same(arr1,arr2,null,null,null,{ fileName : "TestDynamics.hx", lineNumber : 25, className : "thx.TestDynamics", methodName : "testDynamics"});
		var obj1 = { name : "Franco", number : 0};
		var obj2 = thx_Dynamics.clone(obj1);
		utest_Assert.notEquals(obj1,obj2,null,{ fileName : "TestDynamics.hx", lineNumber : 29, className : "thx.TestDynamics", methodName : "testDynamics"});
		utest_Assert.same(obj1,obj2,null,null,null,{ fileName : "TestDynamics.hx", lineNumber : 30, className : "thx.TestDynamics", methodName : "testDynamics"});
		var inst1 = new thx_Point(5,6);
		utest_Assert.equals(inst1,thx_Dynamics.clone(inst1),null,{ fileName : "TestDynamics.hx", lineNumber : 34, className : "thx.TestDynamics", methodName : "testDynamics"});
		var inst3 = thx_Dynamics.clone(inst1,true);
		utest_Assert.notEquals(inst1,inst3,null,{ fileName : "TestDynamics.hx", lineNumber : 36, className : "thx.TestDynamics", methodName : "testDynamics"});
		utest_Assert.same(inst1.x,inst3.x,null,null,null,{ fileName : "TestDynamics.hx", lineNumber : 37, className : "thx.TestDynamics", methodName : "testDynamics"});
	}
	,__class__: thx_TestDynamics
};
var thx_Point = function(x,y) {
	this.x = x;
	this.y = y;
};
thx_Point.__name__ = ["thx","Point"];
thx_Point.prototype = {
	x: null
	,y: null
	,__class__: thx_Point
};
var thx_TestERegs = function() {
};
thx_TestERegs.__name__ = ["thx","TestERegs"];
thx_TestERegs.prototype = {
	testEscape: function() {
		utest_Assert.equals("a\\.b",thx_ERegs.escape("a.b"),null,{ fileName : "TestERegs.hx", lineNumber : 17, className : "thx.TestERegs", methodName : "testEscape"});
		utest_Assert.equals("a\\.b\\.c",thx_ERegs.escape("a.b.c"),null,{ fileName : "TestERegs.hx", lineNumber : 18, className : "thx.TestERegs", methodName : "testEscape"});
		utest_Assert.equals("\\(\\[\\.\\]\\.\\)",thx_ERegs.escape("([.].)"),null,{ fileName : "TestERegs.hx", lineNumber : 19, className : "thx.TestERegs", methodName : "testEscape"});
	}
	,__class__: thx_TestERegs
};
var thx_TestEffects = function() {
};
thx_TestEffects.__name__ = ["thx","TestEffects"];
thx_TestEffects.prototype = {
	logged: null
	,oldLogger: null
	,logger: function(msg,infos) {
		this.logged = msg;
	}
	,setup: function() {
		this.logged = null;
		this.oldLogger = thx_Effects.logger;
		thx_Effects.logger = $bind(this,this.logger);
	}
	,teardown: function() {
		thx_Effects.logger = this.oldLogger;
	}
	,testEffectsLog: function() {
		utest_Assert.isNull(this.logged,null,{ fileName : "TestEffects.hx", lineNumber : 26, className : "thx.TestEffects", methodName : "testEffectsLog"});
		var a2 = { fileName : "TestEffects.hx", lineNumber : 28, className : "thx.TestEffects", methodName : "testEffectsLog"};
		(function(a1) {
			thx_Effects.logger(a1,a2);
		})(2);
		utest_Assert.equals(2,2,null,{ fileName : "TestEffects.hx", lineNumber : 29, className : "thx.TestEffects", methodName : "testEffectsLog"});
		utest_Assert.equals(2,this.logged,null,{ fileName : "TestEffects.hx", lineNumber : 30, className : "thx.TestEffects", methodName : "testEffectsLog"});
	}
	,__class__: thx_TestEffects
};
var thx_TestEithers = function() {
};
thx_TestEithers.__name__ = ["thx","TestEithers"];
thx_TestEithers.prototype = {
	testIsLeft: function() {
		utest_Assert.isTrue(thx_Eithers.isLeft(thx_Either.Left(123)),null,{ fileName : "TestEithers.hx", lineNumber : 11, className : "thx.TestEithers", methodName : "testIsLeft"});
		utest_Assert.isFalse(thx_Eithers.isLeft(thx_Either.Right(123)),null,{ fileName : "TestEithers.hx", lineNumber : 12, className : "thx.TestEithers", methodName : "testIsLeft"});
	}
	,testIsRight: function() {
		utest_Assert.isFalse(thx_Eithers.isRight(thx_Either.Left(123)),null,{ fileName : "TestEithers.hx", lineNumber : 16, className : "thx.TestEithers", methodName : "testIsRight"});
		utest_Assert.isTrue(thx_Eithers.isRight(thx_Either.Right(123)),null,{ fileName : "TestEithers.hx", lineNumber : 17, className : "thx.TestEithers", methodName : "testIsRight"});
	}
	,testToLeft: function() {
		var _g = thx_Eithers.toLeft(thx_Either.Left(123));
		var tmp;
		switch(_g[1]) {
		case 0:
			tmp = _g[2];
			break;
		case 1:
			tmp = null;
			break;
		}
		utest_Assert.same(123,tmp,null,null,null,{ fileName : "TestEithers.hx", lineNumber : 21, className : "thx.TestEithers", methodName : "testToLeft"});
		var _g1 = thx_Eithers.toLeft(thx_Either.Right(123));
		var tmp1;
		switch(_g1[1]) {
		case 0:
			tmp1 = _g1[2];
			break;
		case 1:
			tmp1 = null;
			break;
		}
		utest_Assert.isNull(tmp1,null,{ fileName : "TestEithers.hx", lineNumber : 26, className : "thx.TestEithers", methodName : "testToLeft"});
	}
	,testToRight: function() {
		var _g = thx_Eithers.toRight(thx_Either.Right(123));
		var tmp;
		switch(_g[1]) {
		case 0:
			tmp = _g[2];
			break;
		case 1:
			tmp = null;
			break;
		}
		utest_Assert.same(123,tmp,null,null,null,{ fileName : "TestEithers.hx", lineNumber : 33, className : "thx.TestEithers", methodName : "testToRight"});
		var _g1 = thx_Eithers.toRight(thx_Either.Left(123));
		var tmp1;
		switch(_g1[1]) {
		case 0:
			tmp1 = _g1[2];
			break;
		case 1:
			tmp1 = null;
			break;
		}
		utest_Assert.isNull(tmp1,null,{ fileName : "TestEithers.hx", lineNumber : 38, className : "thx.TestEithers", methodName : "testToRight"});
	}
	,testToLeftUnsafe: function() {
		utest_Assert.same(123,thx_Eithers.toLeftUnsafe(thx_Either.Left(123)),null,null,null,{ fileName : "TestEithers.hx", lineNumber : 45, className : "thx.TestEithers", methodName : "testToLeftUnsafe"});
		utest_Assert.same(null,thx_Eithers.toLeftUnsafe(thx_Either.Right(123)),null,null,null,{ fileName : "TestEithers.hx", lineNumber : 46, className : "thx.TestEithers", methodName : "testToLeftUnsafe"});
	}
	,testToRightUnsafe: function() {
		utest_Assert.same(123,thx_Eithers.toRightUnsafe(thx_Either.Right(123)),null,null,null,{ fileName : "TestEithers.hx", lineNumber : 50, className : "thx.TestEithers", methodName : "testToRightUnsafe"});
		utest_Assert.same(null,thx_Eithers.toRightUnsafe(thx_Either.Left(123)),null,null,null,{ fileName : "TestEithers.hx", lineNumber : 51, className : "thx.TestEithers", methodName : "testToRightUnsafe"});
	}
	,testFlatMap: function() {
		utest_Assert.same(5,thx_Eithers.toLeftUnsafe(thx_Eithers.flatMap(thx_Either.Left(5),function(r) {
			return thx_Either.Left(10);
		})),null,null,null,{ fileName : "TestEithers.hx", lineNumber : 55, className : "thx.TestEithers", methodName : "testFlatMap"});
		utest_Assert.same(5,thx_Eithers.toLeftUnsafe(thx_Eithers.flatMap(thx_Either.Left(5),function(r1) {
			return thx_Either.Right(10);
		})),null,null,null,{ fileName : "TestEithers.hx", lineNumber : 59, className : "thx.TestEithers", methodName : "testFlatMap"});
		utest_Assert.same(10,thx_Eithers.toLeftUnsafe(thx_Eithers.flatMap(thx_Either.Right(5),function(r2) {
			return thx_Either.Left(10);
		})),null,null,null,{ fileName : "TestEithers.hx", lineNumber : 63, className : "thx.TestEithers", methodName : "testFlatMap"});
		utest_Assert.same(null,thx_Eithers.toLeftUnsafe(thx_Eithers.flatMap(thx_Either.Right(5),function(r3) {
			return thx_Either.Right(10);
		})),null,null,null,{ fileName : "TestEithers.hx", lineNumber : 67, className : "thx.TestEithers", methodName : "testFlatMap"});
		utest_Assert.same(null,thx_Eithers.toRightUnsafe(thx_Eithers.flatMap(thx_Either.Left(5),function(r4) {
			return thx_Either.Left(10);
		})),null,null,null,{ fileName : "TestEithers.hx", lineNumber : 71, className : "thx.TestEithers", methodName : "testFlatMap"});
		utest_Assert.same(null,thx_Eithers.toRightUnsafe(thx_Eithers.flatMap(thx_Either.Left(5),function(r5) {
			return thx_Either.Right(10);
		})),null,null,null,{ fileName : "TestEithers.hx", lineNumber : 75, className : "thx.TestEithers", methodName : "testFlatMap"});
		utest_Assert.same(null,thx_Eithers.toRightUnsafe(thx_Eithers.flatMap(thx_Either.Right(5),function(r6) {
			return thx_Either.Left(10);
		})),null,null,null,{ fileName : "TestEithers.hx", lineNumber : 79, className : "thx.TestEithers", methodName : "testFlatMap"});
		utest_Assert.same(10,thx_Eithers.toRightUnsafe(thx_Eithers.flatMap(thx_Either.Right(5),function(r7) {
			return thx_Either.Right(10);
		})),null,null,null,{ fileName : "TestEithers.hx", lineNumber : 83, className : "thx.TestEithers", methodName : "testFlatMap"});
	}
	,testLeftMap: function() {
		var l = thx_Either.Left(1);
		var rt = thx_Either.Right(true);
		utest_Assert.same(thx_Either.Left(2),thx_Eithers.leftMap(l,function(i) {
			return i + 1;
		}),null,null,null,{ fileName : "TestEithers.hx", lineNumber : 92, className : "thx.TestEithers", methodName : "testLeftMap"});
		utest_Assert.same(rt,thx_Eithers.leftMap(rt,function(i1) {
			return i1 + 1;
		}),null,null,null,{ fileName : "TestEithers.hx", lineNumber : 93, className : "thx.TestEithers", methodName : "testLeftMap"});
	}
	,__class__: thx_TestEithers
};
var thx_TestEnums = function() {
};
thx_TestEnums.__name__ = ["thx","TestEnums"];
thx_TestEnums.prototype = {
	testIssue20151201: function() {
		var s = thx_Enums.string(thx_Enum20151201.Test({ oldId : "1", newId : "2"}));
		utest_Assert.stringContains("oldId : \"1\"",s,null,{ fileName : "TestEnums.hx", lineNumber : 16, className : "thx.TestEnums", methodName : "testIssue20151201"});
		utest_Assert.stringContains("newId : \"2\"",s,null,{ fileName : "TestEnums.hx", lineNumber : 17, className : "thx.TestEnums", methodName : "testIssue20151201"});
		utest_Assert.stringContains(", ",s,null,{ fileName : "TestEnums.hx", lineNumber : 18, className : "thx.TestEnums", methodName : "testIssue20151201"});
		utest_Assert.isTrue(StringTools.startsWith(s,"Test({"),null,{ fileName : "TestEnums.hx", lineNumber : 19, className : "thx.TestEnums", methodName : "testIssue20151201"});
		utest_Assert.isTrue(StringTools.endsWith(s,"})"),null,{ fileName : "TestEnums.hx", lineNumber : 20, className : "thx.TestEnums", methodName : "testIssue20151201"});
	}
	,testCompare: function() {
		utest_Assert.same([thx__$TestEnums_Sample.A,thx__$TestEnums_Sample.B(1),thx__$TestEnums_Sample.B(2)],thx_Arrays.order([thx__$TestEnums_Sample.B(2),thx__$TestEnums_Sample.A,thx__$TestEnums_Sample.B(1)],thx_Enums.compare),null,null,null,{ fileName : "TestEnums.hx", lineNumber : 24, className : "thx.TestEnums", methodName : "testCompare"});
	}
	,testString: function() {
		utest_Assert.equals("A",thx_Enums.string(thx__$TestEnums_Sample.A),null,{ fileName : "TestEnums.hx", lineNumber : 33, className : "thx.TestEnums", methodName : "testString"});
		utest_Assert.equals("B(1)",thx_Enums.string(thx__$TestEnums_Sample.B(1)),null,{ fileName : "TestEnums.hx", lineNumber : 34, className : "thx.TestEnums", methodName : "testString"});
	}
	,__class__: thx_TestEnums
};
var thx__$TestEnums_Sample = { __ename__ : ["thx","_TestEnums","Sample"], __constructs__ : ["A","B"] };
thx__$TestEnums_Sample.A = ["A",0];
thx__$TestEnums_Sample.A.__enum__ = thx__$TestEnums_Sample;
thx__$TestEnums_Sample.B = function(v) { var $x = ["B",1,v]; $x.__enum__ = thx__$TestEnums_Sample; return $x; };
var thx_Enum20151201 = { __ename__ : ["thx","Enum20151201"], __constructs__ : ["Test","None"] };
thx_Enum20151201.Test = function(obj) { var $x = ["Test",0,obj]; $x.__enum__ = thx_Enum20151201; return $x; };
thx_Enum20151201.None = ["None",1];
thx_Enum20151201.None.__enum__ = thx_Enum20151201;
var thx_TestError = function() {
};
thx_TestError.__name__ = ["thx","TestError"];
thx_TestError.prototype = {
	testAbstract: function() {
		var error = new thx_error_AbstractMethod({ fileName : "TestError.hx", lineNumber : 12, className : "thx.TestError", methodName : "testAbstract"});
		utest_Assert.notNull(error,null,{ fileName : "TestError.hx", lineNumber : 14, className : "thx.TestError", methodName : "testAbstract"});
		utest_Assert.stringContains("TestError",error.message,null,{ fileName : "TestError.hx", lineNumber : 15, className : "thx.TestError", methodName : "testAbstract"});
		utest_Assert.stringContains("testAbstract",error.message,null,{ fileName : "TestError.hx", lineNumber : 16, className : "thx.TestError", methodName : "testAbstract"});
		utest_Assert.stringContains("is abstract",error.message,null,{ fileName : "TestError.hx", lineNumber : 17, className : "thx.TestError", methodName : "testAbstract"});
	}
	,testNotImplemented: function() {
		var error = new thx_error_NotImplemented({ fileName : "TestError.hx", lineNumber : 21, className : "thx.TestError", methodName : "testNotImplemented"});
		utest_Assert.notNull(error,null,{ fileName : "TestError.hx", lineNumber : 23, className : "thx.TestError", methodName : "testNotImplemented"});
		utest_Assert.stringContains("TestError",error.message,null,{ fileName : "TestError.hx", lineNumber : 24, className : "thx.TestError", methodName : "testNotImplemented"});
		utest_Assert.stringContains("testNotImplemented",error.message,null,{ fileName : "TestError.hx", lineNumber : 25, className : "thx.TestError", methodName : "testNotImplemented"});
		utest_Assert.stringContains("needs to be implemented",error.message,null,{ fileName : "TestError.hx", lineNumber : 26, className : "thx.TestError", methodName : "testNotImplemented"});
	}
	,testNullArgument: function() {
		var _gthis = this;
		utest_Assert.raises(function() {
			_gthis.nullInt(null);
		},thx_error_NullArgument,null,null,{ fileName : "TestError.hx", lineNumber : 30, className : "thx.TestError", methodName : "testNullArgument"});
		this.nullInt(1);
	}
	,testNullArgumentUsing: function() {
		var _gthis = this;
		utest_Assert.raises(function() {
			_gthis.nullUsingInt(null);
		},thx_error_NullArgument,null,null,{ fileName : "TestError.hx", lineNumber : 35, className : "thx.TestError", methodName : "testNullArgumentUsing"});
		this.nullUsingInt(1);
	}
	,testEmptyArray: function() {
		var _gthis = this;
		utest_Assert.raises(function() {
			_gthis.emptyArray(null);
		},thx_error_NullArgument,null,null,{ fileName : "TestError.hx", lineNumber : 40, className : "thx.TestError", methodName : "testEmptyArray"});
		utest_Assert.raises(function() {
			_gthis.emptyArray([]);
		},thx_error_NullArgument,null,null,{ fileName : "TestError.hx", lineNumber : 41, className : "thx.TestError", methodName : "testEmptyArray"});
		this.emptyArray([1]);
	}
	,testEmptyString: function() {
		var _gthis = this;
		utest_Assert.raises(function() {
			_gthis.emptyString(null);
		},thx_error_NullArgument,null,null,{ fileName : "TestError.hx", lineNumber : 46, className : "thx.TestError", methodName : "testEmptyString"});
		utest_Assert.raises(function() {
			_gthis.emptyString("");
		},thx_error_NullArgument,null,null,{ fileName : "TestError.hx", lineNumber : 47, className : "thx.TestError", methodName : "testEmptyString"});
		this.emptyString("a");
	}
	,testEmptyIterator: function() {
		var _gthis = this;
		var it = new IntIterator(0,0);
		utest_Assert.raises(function() {
			_gthis.emptyIterator(null);
		},thx_error_NullArgument,null,null,{ fileName : "TestError.hx", lineNumber : 53, className : "thx.TestError", methodName : "testEmptyIterator"});
		utest_Assert.raises(function() {
			_gthis.emptyIterator(it);
		},thx_error_NullArgument,null,null,{ fileName : "TestError.hx", lineNumber : 54, className : "thx.TestError", methodName : "testEmptyIterator"});
		this.emptyIterator(new IntIterator(0,4));
	}
	,testEmptyIterable: function() {
		var _gthis = this;
		var it = { iterator : function() {
			return new IntIterator(0,0);
		}};
		utest_Assert.raises(function() {
			_gthis.emptyIterable(null);
		},thx_error_NullArgument,null,null,{ fileName : "TestError.hx", lineNumber : 61, className : "thx.TestError", methodName : "testEmptyIterable"});
		utest_Assert.raises(function() {
			_gthis.emptyIterable(it);
		},thx_error_NullArgument,null,null,{ fileName : "TestError.hx", lineNumber : 62, className : "thx.TestError", methodName : "testEmptyIterable"});
		this.emptyIterable({ iterator : function() {
			return new IntIterator(0,4);
		}});
	}
	,nullInt: function(i) {
		if(null == i) {
			throw new thx_error_NullArgument("argument \"i\" cannot be null",{ fileName : "NullArgument.hx", lineNumber : 32, className : "thx.TestError", methodName : "nullInt"});
		}
	}
	,nullUsingInt: function(i) {
		if(null == i) {
			throw new thx_error_NullArgument("argument \"this\" cannot be null",{ fileName : "NullArgument.hx", lineNumber : 32, className : "thx.TestError", methodName : "nullUsingInt"});
		}
	}
	,emptyArray: function(arr) {
		if(null == arr) {
			throw new thx_error_NullArgument("Array argument \"this\" cannot be null",{ fileName : "NullArgument.hx", lineNumber : 52, className : "thx.TestError", methodName : "emptyArray"});
		} else if(arr.length == 0) {
			throw new thx_error_NullArgument("Array argument \"this\" cannot be empty",{ fileName : "NullArgument.hx", lineNumber : 54, className : "thx.TestError", methodName : "emptyArray"});
		}
	}
	,emptyString: function(s) {
		if(null == s) {
			throw new thx_error_NullArgument("String argument \"this\" cannot be null",{ fileName : "NullArgument.hx", lineNumber : 58, className : "thx.TestError", methodName : "emptyString"});
		} else if(s == "") {
			throw new thx_error_NullArgument("String argument \"this\" cannot be empty",{ fileName : "NullArgument.hx", lineNumber : 60, className : "thx.TestError", methodName : "emptyString"});
		}
	}
	,emptyIterator: function(it) {
		if(null == it) {
			throw new thx_error_NullArgument("Iterator argument \"this\" cannot be null",{ fileName : "NullArgument.hx", lineNumber : 65, className : "thx.TestError", methodName : "emptyIterator"});
		} else if(!it.hasNext()) {
			throw new thx_error_NullArgument("Iterator argument \"this\" cannot be empty",{ fileName : "NullArgument.hx", lineNumber : 67, className : "thx.TestError", methodName : "emptyIterator"});
		}
	}
	,emptyIterable: function(it) {
		if(null == it) {
			throw new thx_error_NullArgument("Iterable argument \"this\" cannot be null",{ fileName : "NullArgument.hx", lineNumber : 73, className : "thx.TestError", methodName : "emptyIterable"});
		} else if(!$iterator(it)().hasNext()) {
			throw new thx_error_NullArgument("Iterable argument \"this\" cannot be empty",{ fileName : "NullArgument.hx", lineNumber : 75, className : "thx.TestError", methodName : "emptyIterable"});
		}
	}
	,__class__: thx_TestError
};
var thx_TestFloats = function() {
};
thx_TestFloats.__name__ = ["thx","TestFloats"];
thx_TestFloats.prototype = {
	testNormalize: function() {
		utest_Assert.floatEquals(0.0,0.0,null,null,{ fileName : "TestFloats.hx", lineNumber : 16, className : "thx.TestFloats", methodName : "testNormalize"});
		utest_Assert.floatEquals(1.0,1.0,null,null,{ fileName : "TestFloats.hx", lineNumber : 17, className : "thx.TestFloats", methodName : "testNormalize"});
		utest_Assert.floatEquals(0.5,0.5,null,null,{ fileName : "TestFloats.hx", lineNumber : 18, className : "thx.TestFloats", methodName : "testNormalize"});
		utest_Assert.floatEquals(0.0,0,null,null,{ fileName : "TestFloats.hx", lineNumber : 19, className : "thx.TestFloats", methodName : "testNormalize"});
		utest_Assert.floatEquals(1.0,1,null,null,{ fileName : "TestFloats.hx", lineNumber : 20, className : "thx.TestFloats", methodName : "testNormalize"});
	}
	,testClamp: function() {
		utest_Assert.floatEquals(10,10,null,null,{ fileName : "TestFloats.hx", lineNumber : 24, className : "thx.TestFloats", methodName : "testClamp"});
		utest_Assert.floatEquals(10,10,null,null,{ fileName : "TestFloats.hx", lineNumber : 25, className : "thx.TestFloats", methodName : "testClamp"});
		utest_Assert.floatEquals(50,50,null,null,{ fileName : "TestFloats.hx", lineNumber : 26, className : "thx.TestFloats", methodName : "testClamp"});
		utest_Assert.floatEquals(100,100,null,null,{ fileName : "TestFloats.hx", lineNumber : 27, className : "thx.TestFloats", methodName : "testClamp"});
		utest_Assert.floatEquals(100,100,null,null,{ fileName : "TestFloats.hx", lineNumber : 28, className : "thx.TestFloats", methodName : "testClamp"});
	}
	,testClampSym: function() {
		var min = -10;
		var tmp;
		tmp = min;
		utest_Assert.floatEquals(-10,tmp,null,null,{ fileName : "TestFloats.hx", lineNumber : 32, className : "thx.TestFloats", methodName : "testClampSym"});
		var min1 = -10;
		var tmp1;
		tmp1 = 10;
		utest_Assert.floatEquals(10,tmp1,null,null,{ fileName : "TestFloats.hx", lineNumber : 33, className : "thx.TestFloats", methodName : "testClampSym"});
		var min2 = -10;
		var tmp2;
		tmp2 = 0;
		utest_Assert.floatEquals(0,tmp2,null,null,{ fileName : "TestFloats.hx", lineNumber : 34, className : "thx.TestFloats", methodName : "testClampSym"});
	}
	,testCompare: function() {
		utest_Assert.equals(-1,-1,null,{ fileName : "TestFloats.hx", lineNumber : 38, className : "thx.TestFloats", methodName : "testCompare"});
		utest_Assert.equals(-1,-1,null,{ fileName : "TestFloats.hx", lineNumber : 39, className : "thx.TestFloats", methodName : "testCompare"});
		utest_Assert.equals(-1,-1,null,{ fileName : "TestFloats.hx", lineNumber : 40, className : "thx.TestFloats", methodName : "testCompare"});
		utest_Assert.equals(-1,-1,null,{ fileName : "TestFloats.hx", lineNumber : 41, className : "thx.TestFloats", methodName : "testCompare"});
		var a = -Math.PI;
		var b = Math.PI;
		utest_Assert.equals(-1,a < b?-1:a > b?1:0,null,{ fileName : "TestFloats.hx", lineNumber : 42, className : "thx.TestFloats", methodName : "testCompare"});
		utest_Assert.equals(0,0,null,{ fileName : "TestFloats.hx", lineNumber : 44, className : "thx.TestFloats", methodName : "testCompare"});
		utest_Assert.equals(0,0,null,{ fileName : "TestFloats.hx", lineNumber : 45, className : "thx.TestFloats", methodName : "testCompare"});
		utest_Assert.equals(0,0,null,{ fileName : "TestFloats.hx", lineNumber : 46, className : "thx.TestFloats", methodName : "testCompare"});
		var a1 = Math.PI;
		var b1 = Math.PI;
		utest_Assert.equals(0,a1 < b1?-1:a1 > b1?1:0,null,{ fileName : "TestFloats.hx", lineNumber : 47, className : "thx.TestFloats", methodName : "testCompare"});
		utest_Assert.equals(1,1,null,{ fileName : "TestFloats.hx", lineNumber : 49, className : "thx.TestFloats", methodName : "testCompare"});
		utest_Assert.equals(1,1,null,{ fileName : "TestFloats.hx", lineNumber : 50, className : "thx.TestFloats", methodName : "testCompare"});
		utest_Assert.equals(1,1,null,{ fileName : "TestFloats.hx", lineNumber : 51, className : "thx.TestFloats", methodName : "testCompare"});
		var a2 = Math.PI;
		var b2 = -Math.PI;
		utest_Assert.equals(1,a2 < b2?-1:a2 > b2?1:0,null,{ fileName : "TestFloats.hx", lineNumber : 52, className : "thx.TestFloats", methodName : "testCompare"});
	}
	,testRound: function() {
		utest_Assert.floatEquals(123.5,thx_Floats.roundTo(123.456,1),null,null,{ fileName : "TestFloats.hx", lineNumber : 57, className : "thx.TestFloats", methodName : "testRound"});
		utest_Assert.floatEquals(123.46,thx_Floats.roundTo(123.456,2),null,null,{ fileName : "TestFloats.hx", lineNumber : 58, className : "thx.TestFloats", methodName : "testRound"});
		utest_Assert.floatEquals(123.456,thx_Floats.roundTo(123.456,3),null,null,{ fileName : "TestFloats.hx", lineNumber : 59, className : "thx.TestFloats", methodName : "testRound"});
		utest_Assert.floatEquals(123.456,thx_Floats.roundTo(123.456,4),null,null,{ fileName : "TestFloats.hx", lineNumber : 60, className : "thx.TestFloats", methodName : "testRound"});
		utest_Assert.floatEquals(1234567890.1,thx_Floats.roundTo(1234567890.123456,1),null,null,{ fileName : "TestFloats.hx", lineNumber : 63, className : "thx.TestFloats", methodName : "testRound"});
		utest_Assert.floatEquals(1234567890.12,thx_Floats.roundTo(1234567890.123456,2),null,null,{ fileName : "TestFloats.hx", lineNumber : 64, className : "thx.TestFloats", methodName : "testRound"});
		utest_Assert.floatEquals(1234567890.123,thx_Floats.roundTo(1234567890.123456,3),null,null,{ fileName : "TestFloats.hx", lineNumber : 65, className : "thx.TestFloats", methodName : "testRound"});
		utest_Assert.floatEquals(1234567890.1235,thx_Floats.roundTo(1234567890.123456,4),null,null,{ fileName : "TestFloats.hx", lineNumber : 66, className : "thx.TestFloats", methodName : "testRound"});
	}
	,testAngleDifference: function() {
		var tests = [{ a : 30, b : 60, d : 30},{ a : 60, b : 30, d : -30},{ a : 0, b : 190, d : -170},{ a : 190, b : 0, d : 170},{ a : 400, b : 40, d : 0},{ a : 760, b : 40, d : 0}];
		var _g = 0;
		while(_g < tests.length) {
			var test = tests[_g];
			++_g;
			var d = thx_Floats.angleDifference(test.a,test.b);
			utest_Assert.equals(test.d,d,"expected distance between " + test.a + " and " + test.b + " to be " + test.d + " but it is " + d,{ fileName : "TestFloats.hx", lineNumber : 81, className : "thx.TestFloats", methodName : "testAngleDifference"});
		}
	}
	,testInterpolateAngle: function() {
		var tests = [{ a : 30, b : 330, s : 0, l : 180, cw : 180, ccw : 0},{ a : 330, b : 30, s : 0, l : 180, cw : 0, ccw : 180},{ a : 30, b : 120, s : 75, l : 255, cw : 75, ccw : 255},{ a : 120, b : 30, s : 75, l : 255, cw : 255, ccw : 75},{ a : 0, b : 180, s : 90, l : 270, cw : 90, ccw : 270},{ a : 180, b : 0, s : 270, l : 90, cw : 270, ccw : 90},{ a : 10, b : 200, s : 285, l : 105, cw : 105, ccw : 285},{ a : 200, b : 10, s : 285, l : 105, cw : 285, ccw : 105},{ a : 170, b : 340, s : 255, l : 75, cw : 255, ccw : 75},{ a : 340, b : 170, s : 255, l : 75, cw : 75, ccw : 255},{ a : 190, b : 350, s : 270, l : 90, cw : 270, ccw : 90},{ a : 350, b : 190, s : 270, l : 90, cw : 90, ccw : 270},{ a : 160, b : 350, s : 75, l : 255, cw : 255, ccw : 75},{ a : 350, b : 160, s : 75, l : 255, cw : 75, ccw : 255}];
		var _g = 0;
		while(_g < tests.length) {
			var test = tests[_g];
			++_g;
			var r = thx_Floats.interpolateAngle(0.5,test.a,test.b);
			utest_Assert.equals(test.s,r,"circular interpolation (shortest) at 50% between " + test.a + " and " + test.b + " should be " + test.s + " but it is " + r,{ fileName : "TestFloats.hx", lineNumber : 111, className : "thx.TestFloats", methodName : "testInterpolateAngle"});
			r = thx_Floats.interpolateAngleWidest(0.5,test.a,test.b);
			utest_Assert.equals(test.l,r,"circular interpolation (longest) at 50% between " + test.a + " and " + test.b + " should be " + test.l + " but it is " + r,{ fileName : "TestFloats.hx", lineNumber : 114, className : "thx.TestFloats", methodName : "testInterpolateAngle"});
			r = thx_Floats.interpolateAngleCW(0.5,test.a,test.b);
			utest_Assert.equals(test.cw,r,"circular interpolation CW at 50% between " + test.a + " and " + test.b + " should be " + test.cw + " but it is " + r,{ fileName : "TestFloats.hx", lineNumber : 117, className : "thx.TestFloats", methodName : "testInterpolateAngle"});
			r = thx_Floats.interpolateAngleCCW(0.5,test.a,test.b);
			utest_Assert.equals(test.ccw,r,"circular interpolation CCW at 50% between " + test.a + " and " + test.b + " should be " + test.ccw + " but it is " + r,{ fileName : "TestFloats.hx", lineNumber : 120, className : "thx.TestFloats", methodName : "testInterpolateAngle"});
		}
	}
	,__class__: thx_TestFloats
};
var thx_TestFunctions = function() {
};
thx_TestFunctions.__name__ = ["thx","TestFunctions"];
thx_TestFunctions.prototype = {
	testAfter: function() {
		var counter = 0;
		var callback = function() {
			utest_Assert.equals(1,++counter,null,{ fileName : "TestFunctions.hx", lineNumber : 11, className : "thx.TestFunctions", methodName : "testAfter"});
		};
		var n = 3;
		var manage = function() {
			if(--n == 0) {
				callback();
			}
		};
		utest_Assert.equals(0,counter,null,{ fileName : "TestFunctions.hx", lineNumber : 14, className : "thx.TestFunctions", methodName : "testAfter"});
		manage();
		utest_Assert.equals(0,counter,null,{ fileName : "TestFunctions.hx", lineNumber : 16, className : "thx.TestFunctions", methodName : "testAfter"});
		manage();
		utest_Assert.equals(0,counter,null,{ fileName : "TestFunctions.hx", lineNumber : 18, className : "thx.TestFunctions", methodName : "testAfter"});
		manage();
		utest_Assert.equals(1,counter,null,{ fileName : "TestFunctions.hx", lineNumber : 20, className : "thx.TestFunctions", methodName : "testAfter"});
		manage();
		utest_Assert.equals(1,counter,null,{ fileName : "TestFunctions.hx", lineNumber : 22, className : "thx.TestFunctions", methodName : "testAfter"});
	}
	,testOnce: function() {
		var counter = 0;
		var f = function() {
			utest_Assert.equals(1,++counter,null,{ fileName : "TestFunctions.hx", lineNumber : 27, className : "thx.TestFunctions", methodName : "testOnce"});
		};
		var manage = function() {
			var t = f;
			f = thx_Functions.noop;
			t();
		};
		utest_Assert.equals(0,counter,null,{ fileName : "TestFunctions.hx", lineNumber : 30, className : "thx.TestFunctions", methodName : "testOnce"});
		manage();
		utest_Assert.equals(1,counter,null,{ fileName : "TestFunctions.hx", lineNumber : 32, className : "thx.TestFunctions", methodName : "testOnce"});
		manage();
		utest_Assert.equals(1,counter,null,{ fileName : "TestFunctions.hx", lineNumber : 34, className : "thx.TestFunctions", methodName : "testOnce"});
	}
	,testMemoize: function() {
		var counter = 0;
		var manage = thx_Functions1.memoize(function(x) {
			++counter;
			return x * 10;
		});
		utest_Assert.equals(0,counter,null,{ fileName : "TestFunctions.hx", lineNumber : 45, className : "thx.TestFunctions", methodName : "testMemoize"});
		utest_Assert.equals(10,manage(1),null,{ fileName : "TestFunctions.hx", lineNumber : 46, className : "thx.TestFunctions", methodName : "testMemoize"});
		utest_Assert.equals(1,counter,null,{ fileName : "TestFunctions.hx", lineNumber : 47, className : "thx.TestFunctions", methodName : "testMemoize"});
		utest_Assert.equals(10,manage(1),null,{ fileName : "TestFunctions.hx", lineNumber : 48, className : "thx.TestFunctions", methodName : "testMemoize"});
		utest_Assert.equals(1,counter,null,{ fileName : "TestFunctions.hx", lineNumber : 49, className : "thx.TestFunctions", methodName : "testMemoize"});
		utest_Assert.equals(20,manage(2),null,{ fileName : "TestFunctions.hx", lineNumber : 50, className : "thx.TestFunctions", methodName : "testMemoize"});
		utest_Assert.equals(2,counter,null,{ fileName : "TestFunctions.hx", lineNumber : 51, className : "thx.TestFunctions", methodName : "testMemoize"});
	}
	,testNegate: function() {
		utest_Assert.isFalse(false,null,{ fileName : "TestFunctions.hx", lineNumber : 55, className : "thx.TestFunctions", methodName : "testNegate"});
	}
	,__class__: thx_TestFunctions
};
var thx_TestHashSet = function() {
};
thx_TestHashSet.__name__ = ["thx","TestHashSet"];
thx_TestHashSet.prototype = {
	testCreate: function() {
		var s = thx__$HashSet_HashSet_$Impl_$.create([new thx_TestItem(1),new thx_TestItem(3),new thx_TestItem(2),new thx_TestItem(3),new thx_TestItem(1)]);
		utest_Assert.same(3,thx__$HashSet_HashSet_$Impl_$.get_length(s),null,null,null,{ fileName : "TestHashSet.hx", lineNumber : 12, className : "thx.TestHashSet", methodName : "testCreate"});
		var key = new thx_TestItem(1).hashCode();
		utest_Assert.isTrue(s.values.h.hasOwnProperty(key),null,{ fileName : "TestHashSet.hx", lineNumber : 13, className : "thx.TestHashSet", methodName : "testCreate"});
	}
	,testEmpty: function() {
		var s1 = thx__$HashSet_HashSet_$Impl_$.create([new thx_TestItem(1)]);
		var s2 = thx__$HashSet_HashSet_$Impl_$.empty(s1);
		utest_Assert.same(1,thx__$HashSet_HashSet_$Impl_$.get_length(s1),null,null,null,{ fileName : "TestHashSet.hx", lineNumber : 19, className : "thx.TestHashSet", methodName : "testEmpty"});
		utest_Assert.same(0,thx__$HashSet_HashSet_$Impl_$.get_length(s2),null,null,null,{ fileName : "TestHashSet.hx", lineNumber : 20, className : "thx.TestHashSet", methodName : "testEmpty"});
	}
	,testExists: function() {
		var i1 = new thx_TestItem(1);
		var i2a = new thx_TestItem(2);
		var i2b = new thx_TestItem(2);
		var s = thx__$HashSet_HashSet_$Impl_$.create([i1,i2a,i2b]);
		utest_Assert.same(2,thx__$HashSet_HashSet_$Impl_$.get_length(s),null,null,null,{ fileName : "TestHashSet.hx", lineNumber : 28, className : "thx.TestHashSet", methodName : "testExists"});
		var key = i1.hashCode();
		utest_Assert.isTrue(s.values.h.hasOwnProperty(key),null,{ fileName : "TestHashSet.hx", lineNumber : 29, className : "thx.TestHashSet", methodName : "testExists"});
		var key1 = new thx_TestItem(1).hashCode();
		utest_Assert.isTrue(s.values.h.hasOwnProperty(key1),null,{ fileName : "TestHashSet.hx", lineNumber : 30, className : "thx.TestHashSet", methodName : "testExists"});
		var key2 = i2a.hashCode();
		utest_Assert.isTrue(s.values.h.hasOwnProperty(key2),null,{ fileName : "TestHashSet.hx", lineNumber : 31, className : "thx.TestHashSet", methodName : "testExists"});
		var key3 = i2b.hashCode();
		utest_Assert.isTrue(s.values.h.hasOwnProperty(key3),null,{ fileName : "TestHashSet.hx", lineNumber : 32, className : "thx.TestHashSet", methodName : "testExists"});
		var key4 = new thx_TestItem(2).hashCode();
		utest_Assert.isTrue(s.values.h.hasOwnProperty(key4),null,{ fileName : "TestHashSet.hx", lineNumber : 33, className : "thx.TestHashSet", methodName : "testExists"});
	}
	,testAdd: function() {
		var s = thx__$HashSet_HashSet_$Impl_$.create();
		utest_Assert.isTrue(thx__$HashSet_HashSet_$Impl_$.add(s,new thx_TestItem(1)),null,{ fileName : "TestHashSet.hx", lineNumber : 38, className : "thx.TestHashSet", methodName : "testAdd"});
		utest_Assert.isTrue(thx__$HashSet_HashSet_$Impl_$.add(s,new thx_TestItem(2)),null,{ fileName : "TestHashSet.hx", lineNumber : 39, className : "thx.TestHashSet", methodName : "testAdd"});
		utest_Assert.isFalse(thx__$HashSet_HashSet_$Impl_$.add(s,new thx_TestItem(2)),null,{ fileName : "TestHashSet.hx", lineNumber : 40, className : "thx.TestHashSet", methodName : "testAdd"});
		utest_Assert.isTrue(thx__$HashSet_HashSet_$Impl_$.add(s,new thx_TestItem(3)),null,{ fileName : "TestHashSet.hx", lineNumber : 41, className : "thx.TestHashSet", methodName : "testAdd"});
		utest_Assert.isFalse(thx__$HashSet_HashSet_$Impl_$.add(s,new thx_TestItem(3)),null,{ fileName : "TestHashSet.hx", lineNumber : 42, className : "thx.TestHashSet", methodName : "testAdd"});
		utest_Assert.same(3,thx__$HashSet_HashSet_$Impl_$.get_length(s),null,null,null,{ fileName : "TestHashSet.hx", lineNumber : 43, className : "thx.TestHashSet", methodName : "testAdd"});
	}
	,testPush: function() {
		var s = thx__$HashSet_HashSet_$Impl_$.create();
		thx__$HashSet_HashSet_$Impl_$.add(s,new thx_TestItem(1));
		thx__$HashSet_HashSet_$Impl_$.add(s,new thx_TestItem(2));
		thx__$HashSet_HashSet_$Impl_$.add(s,new thx_TestItem(2));
		thx__$HashSet_HashSet_$Impl_$.add(s,new thx_TestItem(3));
		thx__$HashSet_HashSet_$Impl_$.add(s,new thx_TestItem(3));
		utest_Assert.same(3,thx__$HashSet_HashSet_$Impl_$.get_length(s),null,null,null,{ fileName : "TestHashSet.hx", lineNumber : 53, className : "thx.TestHashSet", methodName : "testPush"});
	}
	,testRemove: function() {
		var i1 = new thx_TestItem(1);
		var s = thx__$HashSet_HashSet_$Impl_$.create([i1,new thx_TestItem(2)]);
		s.values.remove(i1.hashCode());
		s.keys.remove(i1.hashCode());
		utest_Assert.same(1,thx__$HashSet_HashSet_$Impl_$.get_length(s),null,null,null,{ fileName : "TestHashSet.hx", lineNumber : 61, className : "thx.TestHashSet", methodName : "testRemove"});
		var v = new thx_TestItem(2);
		s.values.remove(v.hashCode());
		s.keys.remove(v.hashCode());
		utest_Assert.same(0,thx__$HashSet_HashSet_$Impl_$.get_length(s),null,null,null,{ fileName : "TestHashSet.hx", lineNumber : 63, className : "thx.TestHashSet", methodName : "testRemove"});
	}
	,testCopy: function() {
		var i1 = new thx_TestItem(1);
		var s1 = thx__$HashSet_HashSet_$Impl_$.create([i1,new thx_TestItem(2)]);
		var s2 = thx__$HashSet_HashSet_$Impl_$.copy(s1);
		utest_Assert.same(2,thx__$HashSet_HashSet_$Impl_$.get_length(s1),null,null,null,{ fileName : "TestHashSet.hx", lineNumber : 71, className : "thx.TestHashSet", methodName : "testCopy"});
		utest_Assert.same(2,thx__$HashSet_HashSet_$Impl_$.get_length(s2),null,null,null,{ fileName : "TestHashSet.hx", lineNumber : 72, className : "thx.TestHashSet", methodName : "testCopy"});
		var key = i1.hashCode();
		utest_Assert.isTrue(s1.values.h.hasOwnProperty(key),null,{ fileName : "TestHashSet.hx", lineNumber : 73, className : "thx.TestHashSet", methodName : "testCopy"});
		var key1 = new thx_TestItem(2).hashCode();
		utest_Assert.isTrue(s1.values.h.hasOwnProperty(key1),null,{ fileName : "TestHashSet.hx", lineNumber : 74, className : "thx.TestHashSet", methodName : "testCopy"});
		var key2 = i1.hashCode();
		utest_Assert.isTrue(s2.values.h.hasOwnProperty(key2),null,{ fileName : "TestHashSet.hx", lineNumber : 75, className : "thx.TestHashSet", methodName : "testCopy"});
		var key3 = new thx_TestItem(2).hashCode();
		utest_Assert.isTrue(s2.values.h.hasOwnProperty(key3),null,{ fileName : "TestHashSet.hx", lineNumber : 76, className : "thx.TestHashSet", methodName : "testCopy"});
		thx__$HashSet_HashSet_$Impl_$.add(s1,new thx_TestItem(3));
		utest_Assert.same(3,thx__$HashSet_HashSet_$Impl_$.get_length(s1),null,null,null,{ fileName : "TestHashSet.hx", lineNumber : 78, className : "thx.TestHashSet", methodName : "testCopy"});
		utest_Assert.same(2,thx__$HashSet_HashSet_$Impl_$.get_length(s2),null,null,null,{ fileName : "TestHashSet.hx", lineNumber : 79, className : "thx.TestHashSet", methodName : "testCopy"});
	}
	,testUnion: function() {
		var s1 = thx__$HashSet_HashSet_$Impl_$.create([new thx_TestItem(1),new thx_TestItem(2),new thx_TestItem(3)]);
		var s2 = thx__$HashSet_HashSet_$Impl_$.create([new thx_TestItem(2),new thx_TestItem(3),new thx_TestItem(4),new thx_TestItem(5)]);
		var newset = thx__$HashSet_HashSet_$Impl_$.copy(s1);
		var tmp = $iterator(thx__$HashSet_HashSet_$Impl_$)(s2);
		while(tmp.hasNext()) {
			var k = tmp.next();
			var key = k.hashCode();
			newset.keys.h[key] = k;
			var key1 = k.hashCode();
			newset.values.h[key1] = true;
		}
		utest_Assert.same(3,thx__$HashSet_HashSet_$Impl_$.get_length(s1),null,null,null,{ fileName : "TestHashSet.hx", lineNumber : 86, className : "thx.TestHashSet", methodName : "testUnion"});
		utest_Assert.same(4,thx__$HashSet_HashSet_$Impl_$.get_length(s2),null,null,null,{ fileName : "TestHashSet.hx", lineNumber : 87, className : "thx.TestHashSet", methodName : "testUnion"});
		utest_Assert.same(5,thx__$HashSet_HashSet_$Impl_$.get_length(newset),null,null,null,{ fileName : "TestHashSet.hx", lineNumber : 88, className : "thx.TestHashSet", methodName : "testUnion"});
		var key2 = new thx_TestItem(1).hashCode();
		utest_Assert.isTrue(newset.values.h.hasOwnProperty(key2),null,{ fileName : "TestHashSet.hx", lineNumber : 89, className : "thx.TestHashSet", methodName : "testUnion"});
		var key3 = new thx_TestItem(2).hashCode();
		utest_Assert.isTrue(newset.values.h.hasOwnProperty(key3),null,{ fileName : "TestHashSet.hx", lineNumber : 90, className : "thx.TestHashSet", methodName : "testUnion"});
		var key4 = new thx_TestItem(3).hashCode();
		utest_Assert.isTrue(newset.values.h.hasOwnProperty(key4),null,{ fileName : "TestHashSet.hx", lineNumber : 91, className : "thx.TestHashSet", methodName : "testUnion"});
		var key5 = new thx_TestItem(4).hashCode();
		utest_Assert.isTrue(newset.values.h.hasOwnProperty(key5),null,{ fileName : "TestHashSet.hx", lineNumber : 92, className : "thx.TestHashSet", methodName : "testUnion"});
		var key6 = new thx_TestItem(5).hashCode();
		utest_Assert.isTrue(newset.values.h.hasOwnProperty(key6),null,{ fileName : "TestHashSet.hx", lineNumber : 93, className : "thx.TestHashSet", methodName : "testUnion"});
	}
	,testIntersection: function() {
		var s1 = thx__$HashSet_HashSet_$Impl_$.create([new thx_TestItem(1),new thx_TestItem(2),new thx_TestItem(3)]);
		var s2 = thx__$HashSet_HashSet_$Impl_$.create([new thx_TestItem(2),new thx_TestItem(3),new thx_TestItem(4),new thx_TestItem(5)]);
		var result = thx__$HashSet_HashSet_$Impl_$.empty(s1);
		var tmp = $iterator(thx__$HashSet_HashSet_$Impl_$)(s1);
		while(tmp.hasNext()) {
			var item = tmp.next();
			var key = item.hashCode();
			if(s2.values.h.hasOwnProperty(key)) {
				var key1 = item.hashCode();
				result.keys.h[key1] = item;
				var key2 = item.hashCode();
				result.values.h[key2] = true;
			}
		}
		utest_Assert.same(3,thx__$HashSet_HashSet_$Impl_$.get_length(s1),null,null,null,{ fileName : "TestHashSet.hx", lineNumber : 100, className : "thx.TestHashSet", methodName : "testIntersection"});
		utest_Assert.same(4,thx__$HashSet_HashSet_$Impl_$.get_length(s2),null,null,null,{ fileName : "TestHashSet.hx", lineNumber : 101, className : "thx.TestHashSet", methodName : "testIntersection"});
		utest_Assert.same(2,thx__$HashSet_HashSet_$Impl_$.get_length(result),null,null,null,{ fileName : "TestHashSet.hx", lineNumber : 102, className : "thx.TestHashSet", methodName : "testIntersection"});
		var key3 = new thx_TestItem(2).hashCode();
		utest_Assert.isTrue(result.values.h.hasOwnProperty(key3),null,{ fileName : "TestHashSet.hx", lineNumber : 103, className : "thx.TestHashSet", methodName : "testIntersection"});
		var key4 = new thx_TestItem(3).hashCode();
		utest_Assert.isTrue(result.values.h.hasOwnProperty(key4),null,{ fileName : "TestHashSet.hx", lineNumber : 104, className : "thx.TestHashSet", methodName : "testIntersection"});
	}
	,testDifference: function() {
		var s1 = thx__$HashSet_HashSet_$Impl_$.create([new thx_TestItem(1),new thx_TestItem(2),new thx_TestItem(3)]);
		var s2 = thx__$HashSet_HashSet_$Impl_$.create([new thx_TestItem(2),new thx_TestItem(3),new thx_TestItem(4),new thx_TestItem(5)]);
		var result = thx__$HashSet_HashSet_$Impl_$.copy(s1);
		var tmp = $iterator(thx__$HashSet_HashSet_$Impl_$)(s2);
		while(tmp.hasNext()) {
			var item = tmp.next();
			result.values.remove(item.hashCode());
			result.keys.remove(item.hashCode());
		}
		var result1 = thx__$HashSet_HashSet_$Impl_$.copy(s2);
		var tmp1 = $iterator(thx__$HashSet_HashSet_$Impl_$)(s1);
		while(tmp1.hasNext()) {
			var item1 = tmp1.next();
			result1.values.remove(item1.hashCode());
			result1.keys.remove(item1.hashCode());
		}
		utest_Assert.same(3,thx__$HashSet_HashSet_$Impl_$.get_length(s1),null,null,null,{ fileName : "TestHashSet.hx", lineNumber : 112, className : "thx.TestHashSet", methodName : "testDifference"});
		utest_Assert.same(4,thx__$HashSet_HashSet_$Impl_$.get_length(s2),null,null,null,{ fileName : "TestHashSet.hx", lineNumber : 113, className : "thx.TestHashSet", methodName : "testDifference"});
		utest_Assert.same(1,thx__$HashSet_HashSet_$Impl_$.get_length(result),null,null,null,{ fileName : "TestHashSet.hx", lineNumber : 114, className : "thx.TestHashSet", methodName : "testDifference"});
		utest_Assert.same(2,thx__$HashSet_HashSet_$Impl_$.get_length(result1),null,null,null,{ fileName : "TestHashSet.hx", lineNumber : 115, className : "thx.TestHashSet", methodName : "testDifference"});
		var key = new thx_TestItem(1).hashCode();
		utest_Assert.isTrue(result.values.h.hasOwnProperty(key),null,{ fileName : "TestHashSet.hx", lineNumber : 116, className : "thx.TestHashSet", methodName : "testDifference"});
		var key1 = new thx_TestItem(4).hashCode();
		utest_Assert.isTrue(result1.values.h.hasOwnProperty(key1),null,{ fileName : "TestHashSet.hx", lineNumber : 117, className : "thx.TestHashSet", methodName : "testDifference"});
		var key2 = new thx_TestItem(5).hashCode();
		utest_Assert.isTrue(result1.values.h.hasOwnProperty(key2),null,{ fileName : "TestHashSet.hx", lineNumber : 118, className : "thx.TestHashSet", methodName : "testDifference"});
	}
	,testSymmetricDifference: function() {
		var s1 = thx__$HashSet_HashSet_$Impl_$.create([new thx_TestItem(1),new thx_TestItem(2),new thx_TestItem(3)]);
		var s2 = thx__$HashSet_HashSet_$Impl_$.create([new thx_TestItem(2),new thx_TestItem(3),new thx_TestItem(4),new thx_TestItem(5)]);
		var self = thx__$HashSet_HashSet_$Impl_$.copy(s1);
		var newset = thx__$HashSet_HashSet_$Impl_$.copy(self);
		var tmp = $iterator(thx__$HashSet_HashSet_$Impl_$)(s2);
		while(tmp.hasNext()) {
			var k = tmp.next();
			var key = k.hashCode();
			newset.keys.h[key] = k;
			var key1 = k.hashCode();
			newset.values.h[key1] = true;
		}
		var this1 = newset;
		var result = thx__$HashSet_HashSet_$Impl_$.empty(self);
		var tmp1 = $iterator(thx__$HashSet_HashSet_$Impl_$)(self);
		while(tmp1.hasNext()) {
			var item = tmp1.next();
			var key2 = item.hashCode();
			if(s2.values.h.hasOwnProperty(key2)) {
				var key3 = item.hashCode();
				result.keys.h[key3] = item;
				var key4 = item.hashCode();
				result.values.h[key4] = true;
			}
		}
		var result1 = thx__$HashSet_HashSet_$Impl_$.copy(this1);
		var tmp2 = $iterator(thx__$HashSet_HashSet_$Impl_$)(result);
		while(tmp2.hasNext()) {
			var item1 = tmp2.next();
			result1.values.remove(item1.hashCode());
			result1.keys.remove(item1.hashCode());
		}
		var self1 = thx__$HashSet_HashSet_$Impl_$.copy(s2);
		var newset1 = thx__$HashSet_HashSet_$Impl_$.copy(self1);
		var tmp3 = $iterator(thx__$HashSet_HashSet_$Impl_$)(s1);
		while(tmp3.hasNext()) {
			var k1 = tmp3.next();
			var key5 = k1.hashCode();
			newset1.keys.h[key5] = k1;
			var key6 = k1.hashCode();
			newset1.values.h[key6] = true;
		}
		var this2 = newset1;
		var result2 = thx__$HashSet_HashSet_$Impl_$.empty(self1);
		var tmp4 = $iterator(thx__$HashSet_HashSet_$Impl_$)(self1);
		while(tmp4.hasNext()) {
			var item2 = tmp4.next();
			var key7 = item2.hashCode();
			if(s1.values.h.hasOwnProperty(key7)) {
				var key8 = item2.hashCode();
				result2.keys.h[key8] = item2;
				var key9 = item2.hashCode();
				result2.values.h[key9] = true;
			}
		}
		var result3 = thx__$HashSet_HashSet_$Impl_$.copy(this2);
		var tmp5 = $iterator(thx__$HashSet_HashSet_$Impl_$)(result2);
		while(tmp5.hasNext()) {
			var item3 = tmp5.next();
			result3.values.remove(item3.hashCode());
			result3.keys.remove(item3.hashCode());
		}
		utest_Assert.same(3,thx__$HashSet_HashSet_$Impl_$.get_length(s1),null,null,null,{ fileName : "TestHashSet.hx", lineNumber : 126, className : "thx.TestHashSet", methodName : "testSymmetricDifference"});
		utest_Assert.same(4,thx__$HashSet_HashSet_$Impl_$.get_length(s2),null,null,null,{ fileName : "TestHashSet.hx", lineNumber : 127, className : "thx.TestHashSet", methodName : "testSymmetricDifference"});
		utest_Assert.same(3,thx__$HashSet_HashSet_$Impl_$.get_length(result1),null,null,null,{ fileName : "TestHashSet.hx", lineNumber : 128, className : "thx.TestHashSet", methodName : "testSymmetricDifference"});
		utest_Assert.same(3,thx__$HashSet_HashSet_$Impl_$.get_length(result3),null,null,null,{ fileName : "TestHashSet.hx", lineNumber : 129, className : "thx.TestHashSet", methodName : "testSymmetricDifference"});
		var key10 = new thx_TestItem(1).hashCode();
		utest_Assert.isTrue(result1.values.h.hasOwnProperty(key10),null,{ fileName : "TestHashSet.hx", lineNumber : 130, className : "thx.TestHashSet", methodName : "testSymmetricDifference"});
		var key11 = new thx_TestItem(4).hashCode();
		utest_Assert.isTrue(result1.values.h.hasOwnProperty(key11),null,{ fileName : "TestHashSet.hx", lineNumber : 131, className : "thx.TestHashSet", methodName : "testSymmetricDifference"});
		var key12 = new thx_TestItem(5).hashCode();
		utest_Assert.isTrue(result1.values.h.hasOwnProperty(key12),null,{ fileName : "TestHashSet.hx", lineNumber : 132, className : "thx.TestHashSet", methodName : "testSymmetricDifference"});
		var key13 = new thx_TestItem(1).hashCode();
		utest_Assert.isTrue(result3.values.h.hasOwnProperty(key13),null,{ fileName : "TestHashSet.hx", lineNumber : 133, className : "thx.TestHashSet", methodName : "testSymmetricDifference"});
		var key14 = new thx_TestItem(4).hashCode();
		utest_Assert.isTrue(result3.values.h.hasOwnProperty(key14),null,{ fileName : "TestHashSet.hx", lineNumber : 134, className : "thx.TestHashSet", methodName : "testSymmetricDifference"});
		var key15 = new thx_TestItem(5).hashCode();
		utest_Assert.isTrue(result3.values.h.hasOwnProperty(key15),null,{ fileName : "TestHashSet.hx", lineNumber : 135, className : "thx.TestHashSet", methodName : "testSymmetricDifference"});
	}
	,testToArray: function() {
		var a = thx__$HashSet_HashSet_$Impl_$.toArray(thx__$HashSet_HashSet_$Impl_$.create([new thx_TestItem(1),new thx_TestItem(2)]));
		utest_Assert.same(2,a.length,null,null,null,{ fileName : "TestHashSet.hx", lineNumber : 141, className : "thx.TestHashSet", methodName : "testToArray"});
		var _e = a;
		utest_Assert.same(1,(function(predicate) {
			return thx_Arrays.find(_e,predicate);
		})(function(_) {
			return _.code == 1;
		}).code,null,null,null,{ fileName : "TestHashSet.hx", lineNumber : 142, className : "thx.TestHashSet", methodName : "testToArray"});
		var _e1 = a;
		utest_Assert.same(2,(function(predicate1) {
			return thx_Arrays.find(_e1,predicate1);
		})(function(_1) {
			return _1.code == 2;
		}).code,null,null,null,{ fileName : "TestHashSet.hx", lineNumber : 143, className : "thx.TestHashSet", methodName : "testToArray"});
	}
	,testToString: function() {
		var s = thx__$HashSet_HashSet_$Impl_$.create([new thx_TestItem(1),new thx_TestItem(2)]);
		utest_Assert.isTrue(new EReg("TestItem \\d, TestItem \\d}","").match(thx__$HashSet_HashSet_$Impl_$.toString(s)),null,{ fileName : "TestHashSet.hx", lineNumber : 148, className : "thx.TestHashSet", methodName : "testToString"});
	}
	,__class__: thx_TestHashSet
};
var thx_TestItem = function(code) {
	this.code = code;
};
thx_TestItem.__name__ = ["thx","TestItem"];
thx_TestItem.prototype = {
	code: null
	,hashCode: function() {
		return this.code;
	}
	,toString: function() {
		return "TestItem " + this.code;
	}
	,__class__: thx_TestItem
};
var thx_TestInt64s = function() {
};
thx_TestInt64s.__name__ = ["thx","TestInt64s"];
thx_TestInt64s.here = function(pos) {
	return pos;
};
thx_TestInt64s.prototype = {
	testRounding: function() {
		var tests = [{ roundUp : 3, roundDown : 2, round : 3, num : 5, div : 2, pos : { fileName : "TestInt64s.hx", lineNumber : 17, className : "thx.TestInt64s", methodName : "testRounding"}},{ roundUp : 0, roundDown : 0, round : 0, num : 0, div : 2, pos : { fileName : "TestInt64s.hx", lineNumber : 18, className : "thx.TestInt64s", methodName : "testRounding"}},{ roundUp : 1, roundDown : 0, round : 0, num : 1, div : 4, pos : { fileName : "TestInt64s.hx", lineNumber : 19, className : "thx.TestInt64s", methodName : "testRounding"}},{ roundUp : -2, roundDown : -3, round : -2, num : -5, div : 2, pos : { fileName : "TestInt64s.hx", lineNumber : 21, className : "thx.TestInt64s", methodName : "testRounding"}},{ roundUp : 0, roundDown : -1, round : 0, num : -1, div : 4, pos : { fileName : "TestInt64s.hx", lineNumber : 22, className : "thx.TestInt64s", methodName : "testRounding"}},{ roundUp : 0, roundDown : 0, round : 0, num : 0, div : -2, pos : { fileName : "TestInt64s.hx", lineNumber : 24, className : "thx.TestInt64s", methodName : "testRounding"}},{ roundUp : -2, roundDown : -3, round : -2, num : 5, div : -2, pos : { fileName : "TestInt64s.hx", lineNumber : 25, className : "thx.TestInt64s", methodName : "testRounding"}},{ roundUp : 0, roundDown : -1, round : 0, num : 1, div : -4, pos : { fileName : "TestInt64s.hx", lineNumber : 26, className : "thx.TestInt64s", methodName : "testRounding"}}];
		var up;
		var down;
		var round;
		var num;
		var div;
		var _g = 0;
		while(_g < tests.length) {
			var test = tests[_g];
			++_g;
			var x = test.roundUp;
			up = new haxe__$Int64__$_$_$Int64(x >> 31,x);
			var x1 = test.roundDown;
			down = new haxe__$Int64__$_$_$Int64(x1 >> 31,x1);
			var x2 = test.round;
			round = new haxe__$Int64__$_$_$Int64(x2 >> 31,x2);
			var x3 = test.num;
			num = new haxe__$Int64__$_$_$Int64(x3 >> 31,x3);
			var x4 = test.div;
			div = new haxe__$Int64__$_$_$Int64(x4 >> 31,x4);
			var b = thx_Int64s.divRound(num,div);
			utest_Assert.isTrue(round.high == b.high && round.low == b.low,"expected " + haxe__$Int64_Int64_$Impl_$.toString(round) + " but got " + haxe__$Int64_Int64_$Impl_$.toString(thx_Int64s.divRound(num,div)) + " from " + haxe__$Int64_Int64_$Impl_$.toString(num) + ".divRound(" + haxe__$Int64_Int64_$Impl_$.toString(div) + ")",test.pos);
			var b1 = thx_Int64s.divCeil(num,div);
			utest_Assert.isTrue(up.high == b1.high && up.low == b1.low,"expected " + haxe__$Int64_Int64_$Impl_$.toString(up) + " but got " + haxe__$Int64_Int64_$Impl_$.toString(thx_Int64s.divCeil(num,div)) + " from " + haxe__$Int64_Int64_$Impl_$.toString(num) + ".divCeil(" + haxe__$Int64_Int64_$Impl_$.toString(div) + ")",test.pos);
			var b2 = thx_Int64s.divFloor(num,div);
			utest_Assert.isTrue(down.high == b2.high && down.low == b2.low,"expected " + haxe__$Int64_Int64_$Impl_$.toString(down) + " but got " + haxe__$Int64_Int64_$Impl_$.toString(thx_Int64s.divFloor(num,div)) + " from " + haxe__$Int64_Int64_$Impl_$.toString(num) + ".divFloor(" + haxe__$Int64_Int64_$Impl_$.toString(div) + ")",test.pos);
		}
	}
	,__class__: thx_TestInt64s
};
var thx_TestInts = function() {
};
thx_TestInts.__name__ = ["thx","TestInts"];
thx_TestInts.prototype = {
	testRange: function() {
		var range = thx_Ints.range(2,7,1);
		utest_Assert.same([2,3,4,5,6],range,null,null,null,{ fileName : "TestInts.hx", lineNumber : 16, className : "thx.TestInts", methodName : "testRange"});
		range = thx_Ints.range(2,7,2);
		utest_Assert.same([2,4,6],range,null,null,null,{ fileName : "TestInts.hx", lineNumber : 18, className : "thx.TestInts", methodName : "testRange"});
		range = thx_Ints.range(2,7,3);
		utest_Assert.same([2,5],range,null,null,null,{ fileName : "TestInts.hx", lineNumber : 20, className : "thx.TestInts", methodName : "testRange"});
		range = thx_Ints.range(7,2,-2);
		utest_Assert.same([7,5,3],range,null,null,null,{ fileName : "TestInts.hx", lineNumber : 23, className : "thx.TestInts", methodName : "testRange"});
	}
	,testParse: function() {
		var tests = [{ e : -50, t : "-50", b : 10},{ e : 50, t : "50", b : 10},{ e : 1, t : "1", b : 10},{ e : 1, t : "+1", b : 10},{ e : -1, t : "-1", b : 10},{ e : 1, t : " 1 ", b : 10},{ e : 1, t : " 1,234", b : 10},{ e : 15, t : " 0xF", b : 16},{ e : 15, t : "17", b : 8},{ e : 15, t : "015", b : 10},{ e : 15, t : "1111", b : 2},{ e : 15, t : "15*3", b : 10},{ e : 15, t : "15e2", b : 10},{ e : 15, t : "15px", b : 10},{ e : 15, t : "12", b : 13},{ e : -15, t : "-0F", b : 16},{ e : -15, t : "-0XF", b : 16},{ e : -15, t : " -17", b : 8},{ e : -15, t : " -15", b : 10},{ e : -15, t : "-1111", b : 2},{ e : -15, t : "-15e1", b : 10},{ e : -15, t : "-12", b : 13},{ e : 224, t : "0e0", b : 16}];
		var _g = 0;
		while(_g < tests.length) {
			var test = tests[_g];
			++_g;
			utest_Assert.isTrue(thx_Ints.canParse(test.t),"Ints.parse should not be able to parse " + test.t,{ fileName : "TestInts.hx", lineNumber : 55, className : "thx.TestInts", methodName : "testParse"});
			utest_Assert.equals(test.e,thx_Ints.parse(test.t,test.b),"expected " + test.e + " converting \"" + test.t + "\" with base " + test.b + " but got " + thx_Ints.parse(test.t,test.b),{ fileName : "TestInts.hx", lineNumber : 56, className : "thx.TestInts", methodName : "testParse"});
		}
	}
	,testToString: function() {
		var tests = [{ e : "1010", t : 10, b : 2},{ e : "12", t : 10, b : 8},{ e : "10", t : 10, b : 10},{ e : "a", t : 10, b : 16}];
		var _g = 0;
		while(_g < tests.length) {
			var test = tests[_g];
			++_g;
			utest_Assert.equals(test.e,test.t.toString(test.b),null,{ fileName : "TestInts.hx", lineNumber : 69, className : "thx.TestInts", methodName : "testToString"});
		}
	}
	,__class__: thx_TestInts
};
var thx_TestIterables = function() {
};
thx_TestIterables.__name__ = ["thx","TestIterables"];
thx_TestIterables.prototype = {
	testMin: function() {
		utest_Assert.same(haxe_ds_Option.Some(1),thx_Iterables.minBy([3,1,2],thx_Functions.identity,thx_Ints.order),null,null,null,{ fileName : "TestIterables.hx", lineNumber : 14, className : "thx.TestIterables", methodName : "testMin"});
		utest_Assert.same(haxe_ds_Option.None,thx_Iterables.minBy([],thx_Functions.identity,thx_Ints.order),null,null,null,{ fileName : "TestIterables.hx", lineNumber : 15, className : "thx.TestIterables", methodName : "testMin"});
	}
	,testMinBy: function() {
		utest_Assert.same(haxe_ds_Option.Some({ a : 1}),thx_Iterables.minBy([{ a : 3},{ a : 1},{ a : 2}],function(o) {
			return o.a;
		},thx_Ints.order),null,null,null,{ fileName : "TestIterables.hx", lineNumber : 21, className : "thx.TestIterables", methodName : "testMinBy"});
		utest_Assert.same(haxe_ds_Option.None,thx_Iterables.minBy([],function(o1) {
			return o1.a;
		},thx_Ints.order),null,null,null,{ fileName : "TestIterables.hx", lineNumber : 22, className : "thx.TestIterables", methodName : "testMinBy"});
	}
	,__class__: thx_TestIterables
};
var thx_TestIterators = function() {
};
thx_TestIterators.__name__ = ["thx","TestIterators"];
thx_TestIterators.prototype = {
	testEquals: function() {
		var a = [1,2,3];
		var b = [1,2];
		var c = [1,2,4];
		utest_Assert.isTrue(thx_Iterators.equals(HxOverrides.iter(a),HxOverrides.iter(a)),null,{ fileName : "TestIterators.hx", lineNumber : 19, className : "thx.TestIterators", methodName : "testEquals"});
		utest_Assert.isFalse(thx_Iterators.equals(HxOverrides.iter(a),HxOverrides.iter(b)),null,{ fileName : "TestIterators.hx", lineNumber : 20, className : "thx.TestIterators", methodName : "testEquals"});
		utest_Assert.isFalse(thx_Iterators.equals(HxOverrides.iter(a),HxOverrides.iter(c)),null,{ fileName : "TestIterators.hx", lineNumber : 21, className : "thx.TestIterators", methodName : "testEquals"});
	}
	,testReduce: function() {
		utest_Assert.equals(17,thx_Iterators.reduce(HxOverrides.iter([2,3,5,7]),function(a,b) {
			return a + b;
		},0),null,{ fileName : "TestIterators.hx", lineNumber : 26, className : "thx.TestIterators", methodName : "testReduce"});
	}
	,__class__: thx_TestIterators
};
var thx_TestLambda = function() {
};
thx_TestLambda.__name__ = ["thx","TestLambda"];
thx_TestLambda.prototype = {
	testFunctions: function() {
		utest_Assert.same([2,3],[1,2].map(function(_) {
			return _ + 1;
		}),null,null,null,{ fileName : "TestLambda.hx", lineNumber : 10, className : "thx.TestLambda", methodName : "testFunctions"});
		utest_Assert.equals(0,0,null,{ fileName : "TestLambda.hx", lineNumber : 12, className : "thx.TestLambda", methodName : "testFunctions"});
		utest_Assert.equals(2,2,null,{ fileName : "TestLambda.hx", lineNumber : 13, className : "thx.TestLambda", methodName : "testFunctions"});
		utest_Assert.equals(3,3,null,{ fileName : "TestLambda.hx", lineNumber : 14, className : "thx.TestLambda", methodName : "testFunctions"});
		utest_Assert.equals(6,6,null,{ fileName : "TestLambda.hx", lineNumber : 15, className : "thx.TestLambda", methodName : "testFunctions"});
		utest_Assert.equals(10,10,null,{ fileName : "TestLambda.hx", lineNumber : 16, className : "thx.TestLambda", methodName : "testFunctions"});
		utest_Assert.equals(15,15,null,{ fileName : "TestLambda.hx", lineNumber : 17, className : "thx.TestLambda", methodName : "testFunctions"});
		utest_Assert.equals(1,Std.parseInt("1"),null,{ fileName : "TestLambda.hx", lineNumber : 19, className : "thx.TestLambda", methodName : "testFunctions"});
		utest_Assert.equals(1,Std.parseInt("1"),null,{ fileName : "TestLambda.hx", lineNumber : 20, className : "thx.TestLambda", methodName : "testFunctions"});
		utest_Assert.equals(1,1,null,{ fileName : "TestLambda.hx", lineNumber : 21, className : "thx.TestLambda", methodName : "testFunctions"});
		utest_Assert.equals(3,3,null,{ fileName : "TestLambda.hx", lineNumber : 22, className : "thx.TestLambda", methodName : "testFunctions"});
		utest_Assert.equals(6,6,null,{ fileName : "TestLambda.hx", lineNumber : 23, className : "thx.TestLambda", methodName : "testFunctions"});
		utest_Assert.equals(10,10,null,{ fileName : "TestLambda.hx", lineNumber : 24, className : "thx.TestLambda", methodName : "testFunctions"});
		utest_Assert.equals(15,15,null,{ fileName : "TestLambda.hx", lineNumber : 25, className : "thx.TestLambda", methodName : "testFunctions"});
		utest_Assert.equals(1,1,null,{ fileName : "TestLambda.hx", lineNumber : 27, className : "thx.TestLambda", methodName : "testFunctions"});
		utest_Assert.equals(3,3,null,{ fileName : "TestLambda.hx", lineNumber : 28, className : "thx.TestLambda", methodName : "testFunctions"});
		utest_Assert.equals(6,6,null,{ fileName : "TestLambda.hx", lineNumber : 29, className : "thx.TestLambda", methodName : "testFunctions"});
		utest_Assert.equals(10,10,null,{ fileName : "TestLambda.hx", lineNumber : 30, className : "thx.TestLambda", methodName : "testFunctions"});
		utest_Assert.equals(15,15,null,{ fileName : "TestLambda.hx", lineNumber : 31, className : "thx.TestLambda", methodName : "testFunctions"});
		utest_Assert.equals("Test 1","Test " + "1",null,{ fileName : "TestLambda.hx", lineNumber : 33, className : "thx.TestLambda", methodName : "testFunctions"});
		utest_Assert.equals("Test 1+2","Test " + "1" + "+" + "2",null,{ fileName : "TestLambda.hx", lineNumber : 34, className : "thx.TestLambda", methodName : "testFunctions"});
		utest_Assert.equals("BA","B" + "A",null,{ fileName : "TestLambda.hx", lineNumber : 35, className : "thx.TestLambda", methodName : "testFunctions"});
		utest_Assert.equals("21","" + 2 + "1",null,{ fileName : "TestLambda.hx", lineNumber : 36, className : "thx.TestLambda", methodName : "testFunctions"});
		utest_Assert.equals("$_1$_0","$_1$_0",null,{ fileName : "TestLambda.hx", lineNumber : 37, className : "thx.TestLambda", methodName : "testFunctions"});
		utest_Assert.equals("$_0","$" + "_0",null,{ fileName : "TestLambda.hx", lineNumber : 38, className : "thx.TestLambda", methodName : "testFunctions"});
	}
	,testForms: function() {
		utest_Assert.equals(1,1,null,{ fileName : "TestLambda.hx", lineNumber : 44, className : "thx.TestLambda", methodName : "testForms"});
		utest_Assert.equals(1,1,null,{ fileName : "TestLambda.hx", lineNumber : 48, className : "thx.TestLambda", methodName : "testForms"});
		utest_Assert.equals(1,1,null,{ fileName : "TestLambda.hx", lineNumber : 51, className : "thx.TestLambda", methodName : "testForms"});
		utest_Assert.equals(0,0,null,{ fileName : "TestLambda.hx", lineNumber : 58, className : "thx.TestLambda", methodName : "testForms"});
		utest_Assert.equals(1,1,null,{ fileName : "TestLambda.hx", lineNumber : 62, className : "thx.TestLambda", methodName : "testForms"});
		utest_Assert.equals(1,1,null,{ fileName : "TestLambda.hx", lineNumber : 65, className : "thx.TestLambda", methodName : "testForms"});
		utest_Assert.equals(1,1,null,{ fileName : "TestLambda.hx", lineNumber : 69, className : "thx.TestLambda", methodName : "testForms"});
		utest_Assert.equals(1,1,null,{ fileName : "TestLambda.hx", lineNumber : 72, className : "thx.TestLambda", methodName : "testForms"});
		utest_Assert.equals(1,1,null,{ fileName : "TestLambda.hx", lineNumber : 76, className : "thx.TestLambda", methodName : "testForms"});
		utest_Assert.equals(1,1,null,{ fileName : "TestLambda.hx", lineNumber : 79, className : "thx.TestLambda", methodName : "testForms"});
		utest_Assert.equals(false,false,null,{ fileName : "TestLambda.hx", lineNumber : 81, className : "thx.TestLambda", methodName : "testForms"});
		utest_Assert.equals(true,true,null,{ fileName : "TestLambda.hx", lineNumber : 82, className : "thx.TestLambda", methodName : "testForms"});
	}
	,__class__: thx_TestLambda
};
var thx_TestLambdaStaticExtension = function() {
};
thx_TestLambdaStaticExtension.__name__ = ["thx","TestLambdaStaticExtension"];
thx_TestLambdaStaticExtension.prototype = {
	testFunctions: function() {
		utest_Assert.same([2,3],[1,2].map(function(_) {
			return _ + 1;
		}),null,null,null,{ fileName : "TestLambdaStaticExtension.hx", lineNumber : 11, className : "thx.TestLambdaStaticExtension", methodName : "testFunctions"});
		utest_Assert.same([2,3],[1,2,3].filter(function(_1) {
			return _1 > 1;
		}),null,null,null,{ fileName : "TestLambdaStaticExtension.hx", lineNumber : 12, className : "thx.TestLambdaStaticExtension", methodName : "testFunctions"});
		utest_Assert.equals(16,thx_Arrays.reduce([1,2,3],function(_0,_11) {
			return _0 + _11;
		},10),null,{ fileName : "TestLambdaStaticExtension.hx", lineNumber : 13, className : "thx.TestLambdaStaticExtension", methodName : "testFunctions"});
		utest_Assert.same(["Test 1"],[1].map(function(_2) {
			return "Test " + _2;
		}),null,null,null,{ fileName : "TestLambdaStaticExtension.hx", lineNumber : 14, className : "thx.TestLambdaStaticExtension", methodName : "testFunctions"});
	}
	,testInStringInterpolation: function() {
		utest_Assert.same(["1","2"],[1,2].map(function(_) {
			return "" + _;
		}),null,null,null,{ fileName : "TestLambdaStaticExtension.hx", lineNumber : 18, className : "thx.TestLambdaStaticExtension", methodName : "testInStringInterpolation"});
		utest_Assert.same(["1","2"],[1,2].map(function(_1) {
			return "" + _1;
		}),null,null,null,{ fileName : "TestLambdaStaticExtension.hx", lineNumber : 19, className : "thx.TestLambdaStaticExtension", methodName : "testInStringInterpolation"});
		utest_Assert.same(["X1","X2"],[1,2].map(function(_2) {
			return "X" + _2;
		}),null,null,null,{ fileName : "TestLambdaStaticExtension.hx", lineNumber : 20, className : "thx.TestLambdaStaticExtension", methodName : "testInStringInterpolation"});
		utest_Assert.same(["1X","2X"],[1,2].map(function(_3) {
			return "" + _3 + "X";
		}),null,null,null,{ fileName : "TestLambdaStaticExtension.hx", lineNumber : 21, className : "thx.TestLambdaStaticExtension", methodName : "testInStringInterpolation"});
		utest_Assert.same(["X2X","X4X"],[1,2].map(function(_4) {
			return "X" + _4 * 2 + "X";
		}),null,null,null,{ fileName : "TestLambdaStaticExtension.hx", lineNumber : 22, className : "thx.TestLambdaStaticExtension", methodName : "testInStringInterpolation"});
	}
	,testFillEmpty: function() {
		utest_Assert.same([0,1,2],[1,2,3].map(function(_0,_1) {
			return _1;
		}),null,null,null,{ fileName : "TestLambdaStaticExtension.hx", lineNumber : 26, className : "thx.TestLambdaStaticExtension", methodName : "testFillEmpty"});
	}
	,testOptionalArgs: function() {
		var f = function(callback) {
			return callback(2,3);
		};
		utest_Assert.equals(6,f(function(_0,_1) {
			return _0 * 3;
		}),null,{ fileName : "TestLambdaStaticExtension.hx", lineNumber : 34, className : "thx.TestLambdaStaticExtension", methodName : "testOptionalArgs"});
		utest_Assert.equals(6,f(function(_01,_11) {
			return _01 * _11;
		}),null,{ fileName : "TestLambdaStaticExtension.hx", lineNumber : 35, className : "thx.TestLambdaStaticExtension", methodName : "testOptionalArgs"});
	}
	,__class__: thx_TestLambdaStaticExtension
};
var thx_TestLocalDate = function() {
	this.tomorrow = thx__$LocalDate_LocalDate_$Impl_$.create(2015,7,27);
	this.date = thx__$LocalDate_LocalDate_$Impl_$.create(2015,7,26);
};
thx_TestLocalDate.__name__ = ["thx","TestLocalDate"];
thx_TestLocalDate.prototype = {
	date: null
	,tomorrow: null
	,testCreate: function() {
		utest_Assert.equals(2015,thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this.date,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_YEAR),"expected 2015 but got " + thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this.date,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_YEAR) + " for year",{ fileName : "TestLocalDate.hx", lineNumber : 14, className : "thx.TestLocalDate", methodName : "testCreate"});
		utest_Assert.equals(7,thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this.date,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_MONTH),"expected 7 but got " + thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this.date,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_MONTH) + " for month",{ fileName : "TestLocalDate.hx", lineNumber : 15, className : "thx.TestLocalDate", methodName : "testCreate"});
		utest_Assert.equals(26,thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this.date,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_DAY),"expected 26 but got " + thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this.date,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_DAY) + " for day",{ fileName : "TestLocalDate.hx", lineNumber : 16, className : "thx.TestLocalDate", methodName : "testCreate"});
		utest_Assert.equals(0,thx__$LocalDate_LocalDate_$Impl_$.get_dayOfWeek(this.date),null,{ fileName : "TestLocalDate.hx", lineNumber : 18, className : "thx.TestLocalDate", methodName : "testCreate"});
		[{ expected : thx__$LocalDate_LocalDate_$Impl_$.fromString("2014-12-01"), test : thx__$LocalDate_LocalDate_$Impl_$.create(2014,12,1)},{ expected : thx__$LocalDate_LocalDate_$Impl_$.fromString("2015-03-01"), test : thx__$LocalDate_LocalDate_$Impl_$.create(2014,15,1)},{ expected : thx__$LocalDate_LocalDate_$Impl_$.fromString("2013-11-01"), test : thx__$LocalDate_LocalDate_$Impl_$.create(2014,-1,1)},{ expected : thx__$LocalDate_LocalDate_$Impl_$.fromString("2014-03-04"), test : thx__$LocalDate_LocalDate_$Impl_$.create(2014,2,32)},{ expected : thx__$LocalDate_LocalDate_$Impl_$.fromString("2013-12-31"), test : thx__$LocalDate_LocalDate_$Impl_$.create(2014,1,0)}].map(function(o) {
			utest_Assert.isTrue(o.expected == o.test,"expected " + thx__$LocalDate_LocalDate_$Impl_$.toString(o.expected) + " but was  " + thx__$LocalDate_LocalDate_$Impl_$.toString(o.test),{ fileName : "TestLocalDate.hx", lineNumber : 33, className : "thx.TestLocalDate", methodName : "testCreate"});
		});
	}
	,testToString: function() {
		utest_Assert.equals("2015-07-26",thx__$LocalDate_LocalDate_$Impl_$.toString(this.date),null,{ fileName : "TestLocalDate.hx", lineNumber : 38, className : "thx.TestLocalDate", methodName : "testToString"});
		utest_Assert.equals("1-01-01",thx__$LocalDate_LocalDate_$Impl_$.toString(0),null,{ fileName : "TestLocalDate.hx", lineNumber : 39, className : "thx.TestLocalDate", methodName : "testToString"});
	}
	,testEquals: function() {
		utest_Assert.isTrue(this.date == this.date,null,{ fileName : "TestLocalDate.hx", lineNumber : 43, className : "thx.TestLocalDate", methodName : "testEquals"});
		utest_Assert.isTrue(this.date != this.tomorrow,null,{ fileName : "TestLocalDate.hx", lineNumber : 44, className : "thx.TestLocalDate", methodName : "testEquals"});
	}
	,testCompare: function() {
		utest_Assert.isFalse(this.date - this.date > 0,null,{ fileName : "TestLocalDate.hx", lineNumber : 48, className : "thx.TestLocalDate", methodName : "testCompare"});
		utest_Assert.isTrue(this.date - this.date >= 0,null,{ fileName : "TestLocalDate.hx", lineNumber : 49, className : "thx.TestLocalDate", methodName : "testCompare"});
		utest_Assert.isFalse(this.date - this.date < 0,null,{ fileName : "TestLocalDate.hx", lineNumber : 50, className : "thx.TestLocalDate", methodName : "testCompare"});
		utest_Assert.isTrue(this.date - this.date <= 0,null,{ fileName : "TestLocalDate.hx", lineNumber : 51, className : "thx.TestLocalDate", methodName : "testCompare"});
		utest_Assert.isFalse(this.date - this.tomorrow > 0,null,{ fileName : "TestLocalDate.hx", lineNumber : 53, className : "thx.TestLocalDate", methodName : "testCompare"});
		utest_Assert.isFalse(this.date - this.tomorrow >= 0,null,{ fileName : "TestLocalDate.hx", lineNumber : 54, className : "thx.TestLocalDate", methodName : "testCompare"});
		utest_Assert.isTrue(this.date - this.tomorrow < 0,null,{ fileName : "TestLocalDate.hx", lineNumber : 55, className : "thx.TestLocalDate", methodName : "testCompare"});
		utest_Assert.isTrue(this.date - this.tomorrow <= 0,null,{ fileName : "TestLocalDate.hx", lineNumber : 56, className : "thx.TestLocalDate", methodName : "testCompare"});
		utest_Assert.isTrue(this.tomorrow - this.date > 0,null,{ fileName : "TestLocalDate.hx", lineNumber : 58, className : "thx.TestLocalDate", methodName : "testCompare"});
		utest_Assert.isTrue(this.tomorrow - this.date >= 0,null,{ fileName : "TestLocalDate.hx", lineNumber : 59, className : "thx.TestLocalDate", methodName : "testCompare"});
		utest_Assert.isFalse(this.tomorrow - this.date < 0,null,{ fileName : "TestLocalDate.hx", lineNumber : 60, className : "thx.TestLocalDate", methodName : "testCompare"});
		utest_Assert.isFalse(this.tomorrow - this.date <= 0,null,{ fileName : "TestLocalDate.hx", lineNumber : 61, className : "thx.TestLocalDate", methodName : "testCompare"});
	}
	,testFromToDate: function() {
		var this1 = this.date;
		var d = thx__$LocalDate_LocalDate_$Impl_$.fromDate(new Date(thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_YEAR),thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_MONTH) - 1,thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_DAY),0,0,0));
		utest_Assert.isTrue(this.date == d,"expected " + thx__$LocalDate_LocalDate_$Impl_$.toString(this.date) + " but got " + thx__$LocalDate_LocalDate_$Impl_$.toString(d),{ fileName : "TestLocalDate.hx", lineNumber : 68, className : "thx.TestLocalDate", methodName : "testFromToDate"});
	}
	,testFromToTime: function() {
		var this1 = this.date;
		var date2 = thx__$LocalDate_LocalDate_$Impl_$.fromTime(new Date(thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_YEAR),thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_MONTH) - 1,thx__$LocalDate_LocalDate_$Impl_$.getDatePart(this1,thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_DAY),0,0,0).getTime());
		utest_Assert.isTrue(this.date == date2,"expected " + thx__$LocalDate_LocalDate_$Impl_$.toString(this.date) + " but got " + thx__$LocalDate_LocalDate_$Impl_$.toString(date2),{ fileName : "TestLocalDate.hx", lineNumber : 73, className : "thx.TestLocalDate", methodName : "testFromToTime"});
	}
	,testFromToString: function() {
		utest_Assert.isTrue(this.date == thx__$LocalDate_LocalDate_$Impl_$.fromString(thx__$LocalDate_LocalDate_$Impl_$.toString(this.date)),null,{ fileName : "TestLocalDate.hx", lineNumber : 78, className : "thx.TestLocalDate", methodName : "testFromToString"});
		utest_Assert.equals("-1-07-27",thx__$LocalDate_LocalDate_$Impl_$.toString(thx__$LocalDate_LocalDate_$Impl_$.fromString("0-06-07")),null,{ fileName : "TestLocalDate.hx", lineNumber : 80, className : "thx.TestLocalDate", methodName : "testFromToString"});
		utest_Assert.equals("-1-06-07",thx__$LocalDate_LocalDate_$Impl_$.toString(thx__$LocalDate_LocalDate_$Impl_$.fromString("-1-06-07")),null,{ fileName : "TestLocalDate.hx", lineNumber : 81, className : "thx.TestLocalDate", methodName : "testFromToString"});
		utest_Assert.equals("1-06-07",thx__$LocalDate_LocalDate_$Impl_$.toString(thx__$LocalDate_LocalDate_$Impl_$.fromString("1-06-07")),null,{ fileName : "TestLocalDate.hx", lineNumber : 82, className : "thx.TestLocalDate", methodName : "testFromToString"});
		utest_Assert.equals("-2014-01-01",thx__$LocalDate_LocalDate_$Impl_$.toString(thx__$LocalDate_LocalDate_$Impl_$.fromString("-2014-01-01")),null,{ fileName : "TestLocalDate.hx", lineNumber : 83, className : "thx.TestLocalDate", methodName : "testFromToString"});
	}
	,testAdd: function() {
		var d = thx__$LocalDate_LocalDate_$Impl_$.addMonths(thx__$LocalDate_LocalDate_$Impl_$.addMonths(this.date,24),9) + 10;
		utest_Assert.isTrue(d == thx__$LocalDate_LocalDate_$Impl_$.fromString("2018-05-06"),"expected " + "2018-05-06" + " but got " + thx__$LocalDate_LocalDate_$Impl_$.toString(d),{ fileName : "TestLocalDate.hx", lineNumber : 92, className : "thx.TestLocalDate", methodName : "testAdd"});
	}
	,testAddMonth: function() {
		var tests = [{ t : thx__$LocalDate_LocalDate_$Impl_$.addMonths(this.date,1), e : thx__$LocalDate_LocalDate_$Impl_$.fromString("2015-08-26")},{ t : thx__$LocalDate_LocalDate_$Impl_$.addMonths(this.date,0), e : thx__$LocalDate_LocalDate_$Impl_$.fromString("2015-07-26")},{ t : thx__$LocalDate_LocalDate_$Impl_$.addMonths(this.date,-1), e : thx__$LocalDate_LocalDate_$Impl_$.fromString("2015-06-26")},{ t : thx__$LocalDate_LocalDate_$Impl_$.addMonths(this.date,7), e : thx__$LocalDate_LocalDate_$Impl_$.fromString("2016-02-26")},{ t : thx__$LocalDate_LocalDate_$Impl_$.addMonths(this.date,-7), e : thx__$LocalDate_LocalDate_$Impl_$.fromString("2014-12-26")},{ t : thx__$LocalDate_LocalDate_$Impl_$.addMonths(this.date,14), e : thx__$LocalDate_LocalDate_$Impl_$.fromString("2016-09-26")},{ t : thx__$LocalDate_LocalDate_$Impl_$.addMonths(this.date,-14), e : thx__$LocalDate_LocalDate_$Impl_$.fromString("2014-05-26")}];
		var _g = 0;
		while(_g < tests.length) {
			var test = tests[_g];
			++_g;
			utest_Assert.isTrue(test.t == test.e,"expexted " + thx__$LocalDate_LocalDate_$Impl_$.toString(test.e) + " but got " + thx__$LocalDate_LocalDate_$Impl_$.toString(test.t),{ fileName : "TestLocalDate.hx", lineNumber : 108, className : "thx.TestLocalDate", methodName : "testAddMonth"});
		}
	}
	,testSnapNext: function() {
		this.assertSnapNext("2014-01-01","2014-01-01",thx_TimePeriod.Minute,{ fileName : "TestLocalDate.hx", lineNumber : 113, className : "thx.TestLocalDate", methodName : "testSnapNext"});
		this.assertSnapNext("2014-01-01","2014-01-01",thx_TimePeriod.Hour,{ fileName : "TestLocalDate.hx", lineNumber : 114, className : "thx.TestLocalDate", methodName : "testSnapNext"});
		this.assertSnapNext("2014-01-02","2014-01-01",thx_TimePeriod.Day,{ fileName : "TestLocalDate.hx", lineNumber : 115, className : "thx.TestLocalDate", methodName : "testSnapNext"});
		this.assertSnapNext("2014-01-01","2013-12-31",thx_TimePeriod.Day,{ fileName : "TestLocalDate.hx", lineNumber : 116, className : "thx.TestLocalDate", methodName : "testSnapNext"});
		this.assertSnapNext("2014-12-21","2014-12-17",thx_TimePeriod.Week,{ fileName : "TestLocalDate.hx", lineNumber : 117, className : "thx.TestLocalDate", methodName : "testSnapNext"});
		this.assertSnapNext("2014-12-21","2014-12-18",thx_TimePeriod.Week,{ fileName : "TestLocalDate.hx", lineNumber : 118, className : "thx.TestLocalDate", methodName : "testSnapNext"});
		this.assertSnapNext("2015-01-01","2014-12-12",thx_TimePeriod.Month,{ fileName : "TestLocalDate.hx", lineNumber : 119, className : "thx.TestLocalDate", methodName : "testSnapNext"});
		this.assertSnapNext("2015-01-01","2014-12-18",thx_TimePeriod.Month,{ fileName : "TestLocalDate.hx", lineNumber : 120, className : "thx.TestLocalDate", methodName : "testSnapNext"});
		this.assertSnapNext("2015-01-01","2014-05-12",thx_TimePeriod.Year,{ fileName : "TestLocalDate.hx", lineNumber : 121, className : "thx.TestLocalDate", methodName : "testSnapNext"});
		this.assertSnapNext("2015-01-01","2014-12-18",thx_TimePeriod.Year,{ fileName : "TestLocalDate.hx", lineNumber : 122, className : "thx.TestLocalDate", methodName : "testSnapNext"});
	}
	,testSnapPrev: function() {
		this.assertSnapPrev("2013-12-31","2014-01-01",thx_TimePeriod.Minute,{ fileName : "TestLocalDate.hx", lineNumber : 126, className : "thx.TestLocalDate", methodName : "testSnapPrev"});
		this.assertSnapPrev("2013-12-31","2014-01-01",thx_TimePeriod.Hour,{ fileName : "TestLocalDate.hx", lineNumber : 127, className : "thx.TestLocalDate", methodName : "testSnapPrev"});
		this.assertSnapPrev("2013-12-31","2014-01-01",thx_TimePeriod.Day,{ fileName : "TestLocalDate.hx", lineNumber : 128, className : "thx.TestLocalDate", methodName : "testSnapPrev"});
		this.assertSnapPrev("2013-12-30","2013-12-31",thx_TimePeriod.Day,{ fileName : "TestLocalDate.hx", lineNumber : 129, className : "thx.TestLocalDate", methodName : "testSnapPrev"});
		this.assertSnapPrev("2014-12-14","2014-12-17",thx_TimePeriod.Week,{ fileName : "TestLocalDate.hx", lineNumber : 130, className : "thx.TestLocalDate", methodName : "testSnapPrev"});
		this.assertSnapPrev("2014-12-14","2014-12-18",thx_TimePeriod.Week,{ fileName : "TestLocalDate.hx", lineNumber : 131, className : "thx.TestLocalDate", methodName : "testSnapPrev"});
		this.assertSnapPrev("2014-12-01","2014-12-12",thx_TimePeriod.Month,{ fileName : "TestLocalDate.hx", lineNumber : 132, className : "thx.TestLocalDate", methodName : "testSnapPrev"});
		this.assertSnapPrev("2014-12-01","2014-12-01",thx_TimePeriod.Month,{ fileName : "TestLocalDate.hx", lineNumber : 133, className : "thx.TestLocalDate", methodName : "testSnapPrev"});
		this.assertSnapPrev("2014-12-01","2014-12-18",thx_TimePeriod.Month,{ fileName : "TestLocalDate.hx", lineNumber : 134, className : "thx.TestLocalDate", methodName : "testSnapPrev"});
		this.assertSnapPrev("2014-01-01","2014-05-12",thx_TimePeriod.Year,{ fileName : "TestLocalDate.hx", lineNumber : 135, className : "thx.TestLocalDate", methodName : "testSnapPrev"});
		this.assertSnapPrev("2014-01-01","2014-12-18",thx_TimePeriod.Year,{ fileName : "TestLocalDate.hx", lineNumber : 136, className : "thx.TestLocalDate", methodName : "testSnapPrev"});
	}
	,testSnapTo: function() {
		this.assertSnapTo("2014-01-01","2014-01-01",thx_TimePeriod.Minute,{ fileName : "TestLocalDate.hx", lineNumber : 140, className : "thx.TestLocalDate", methodName : "testSnapTo"});
		this.assertSnapTo("2014-01-01","2014-01-01",thx_TimePeriod.Hour,{ fileName : "TestLocalDate.hx", lineNumber : 141, className : "thx.TestLocalDate", methodName : "testSnapTo"});
		this.assertSnapTo("2014-01-01","2014-01-01",thx_TimePeriod.Day,{ fileName : "TestLocalDate.hx", lineNumber : 142, className : "thx.TestLocalDate", methodName : "testSnapTo"});
		this.assertSnapTo("2013-12-31","2013-12-31",thx_TimePeriod.Day,{ fileName : "TestLocalDate.hx", lineNumber : 143, className : "thx.TestLocalDate", methodName : "testSnapTo"});
		this.assertSnapTo("2014-12-14","2014-12-17",thx_TimePeriod.Week,{ fileName : "TestLocalDate.hx", lineNumber : 144, className : "thx.TestLocalDate", methodName : "testSnapTo"});
		this.assertSnapTo("2014-12-21","2014-12-18",thx_TimePeriod.Week,{ fileName : "TestLocalDate.hx", lineNumber : 145, className : "thx.TestLocalDate", methodName : "testSnapTo"});
		this.assertSnapTo("2014-12-01","2014-12-12",thx_TimePeriod.Month,{ fileName : "TestLocalDate.hx", lineNumber : 146, className : "thx.TestLocalDate", methodName : "testSnapTo"});
		this.assertSnapTo("2015-01-01","2014-12-18",thx_TimePeriod.Month,{ fileName : "TestLocalDate.hx", lineNumber : 147, className : "thx.TestLocalDate", methodName : "testSnapTo"});
		this.assertSnapTo("2014-01-01","2014-05-12",thx_TimePeriod.Year,{ fileName : "TestLocalDate.hx", lineNumber : 148, className : "thx.TestLocalDate", methodName : "testSnapTo"});
		this.assertSnapTo("2015-01-01","2014-12-18",thx_TimePeriod.Year,{ fileName : "TestLocalDate.hx", lineNumber : 149, className : "thx.TestLocalDate", methodName : "testSnapTo"});
	}
	,assertSnapTo: function(expected,date,period,pos) {
		var t = thx__$LocalDate_LocalDate_$Impl_$.snapTo(thx__$LocalDate_LocalDate_$Impl_$.fromString(date),period);
		utest_Assert.isTrue(thx__$LocalDate_LocalDate_$Impl_$.fromString(expected) == t,"expected " + date + " to snap to " + expected + " for " + Std.string(period) + " but it is " + thx__$LocalDate_LocalDate_$Impl_$.toString(t),pos);
	}
	,assertSnapPrev: function(expected,date,period,pos) {
		var t = thx__$LocalDate_LocalDate_$Impl_$.snapPrev(thx__$LocalDate_LocalDate_$Impl_$.fromString(date),period);
		utest_Assert.isTrue(thx__$LocalDate_LocalDate_$Impl_$.fromString(expected) == t,"expected " + date + " to snap before " + expected + " for " + Std.string(period) + " but it is " + thx__$LocalDate_LocalDate_$Impl_$.toString(t),pos);
	}
	,assertSnapNext: function(expected,date,period,pos) {
		var t = thx__$LocalDate_LocalDate_$Impl_$.snapNext(thx__$LocalDate_LocalDate_$Impl_$.fromString(date),period);
		utest_Assert.isTrue(thx__$LocalDate_LocalDate_$Impl_$.fromString(expected) == t,"expected " + date + " to snap after " + expected + " for " + Std.string(period) + " but it is " + thx__$LocalDate_LocalDate_$Impl_$.toString(t),pos);
	}
	,__class__: thx_TestLocalDate
};
var thx_TestMake = function() {
};
thx_TestMake.__name__ = ["thx","TestMake"];
thx_TestMake.prototype = {
	testConstructorLiteral: function() {
		utest_Assert.same({ c : "A", b : 1, a : 0.2, d : "D"},(function(c,b,a,d) {
			return { c : c, b : b, a : a, d : d};
		})("A",1,0.2,"D"),null,null,null,{ fileName : "TestMake.hx", lineNumber : 10, className : "thx.TestMake", methodName : "testConstructorLiteral"});
	}
	,testConstructorFromTypedef: function() {
		utest_Assert.same({ c : "A", b : 1, a : 0.2, d : "D"},(function(c,b,a,d) {
			var obj = { c : c, b : b, d : d};
			if(null != a) {
				obj.a = a;
			}
			return obj;
		})("A",1,0.2,"D"),null,null,null,{ fileName : "TestMake.hx", lineNumber : 20, className : "thx.TestMake", methodName : "testConstructorFromTypedef"});
	}
	,__class__: thx_TestMake
};
var thx_TestNulls = function() {
	this.ensureField = null;
	this.withValue = "A";
};
thx_TestNulls.__name__ = ["thx","TestNulls"];
thx_TestNulls.prototype = {
	withValue: null
	,withoutValue: null
	,getter: null
	,get_getter: function() {
		return "A";
	}
	,v: null
	,get_setter: function() {
		return this.v;
	}
	,set_setter: function(v) {
		return this.v = v;
	}
	,nested: null
	,empty: null
	,setup: function() {
		this.v = null;
		this.nested = { a : { b : "A"}};
		this.empty = null;
	}
	,testOr: function() {
		var _gthis = this;
		var s = null;
		var _0 = s;
		var t = null == _0?null:_0;
		utest_Assert.equals("B",t != null?t:"B",null,{ fileName : "TestNulls.hx", lineNumber : 31, className : "thx.TestNulls", methodName : "testOr"});
		s = "A";
		var t1 = false?null:"A";
		utest_Assert.equals("A",t1 != null?t1:"B",null,{ fileName : "TestNulls.hx", lineNumber : 33, className : "thx.TestNulls", methodName : "testOr"});
		var s1 = null;
		var _01 = s1;
		var t2 = null == _01?null:_01;
		utest_Assert.equals("B",t2 != null?t2:"B",null,{ fileName : "TestNulls.hx", lineNumber : 36, className : "thx.TestNulls", methodName : "testOr"});
		s1 = "A";
		var t3 = false?null:"A";
		utest_Assert.equals("A",t3 != null?t3:"B",null,{ fileName : "TestNulls.hx", lineNumber : 38, className : "thx.TestNulls", methodName : "testOr"});
		var t4;
		if(null == _gthis) {
			t4 = null;
		} else {
			var _1 = _gthis.withValue;
			if(null == _1) {
				t4 = null;
			} else {
				t4 = _1;
			}
		}
		utest_Assert.equals("A",t4 != null?t4:"B",null,{ fileName : "TestNulls.hx", lineNumber : 40, className : "thx.TestNulls", methodName : "testOr"});
		var t5;
		if(null == _gthis) {
			t5 = null;
		} else {
			var _11 = _gthis.withValue;
			if(null == _11) {
				t5 = null;
			} else {
				t5 = _11;
			}
		}
		utest_Assert.equals("A",t5 != null?t5:"B",null,{ fileName : "TestNulls.hx", lineNumber : 41, className : "thx.TestNulls", methodName : "testOr"});
		var t6;
		if(null == _gthis) {
			t6 = null;
		} else {
			var _12 = _gthis.withoutValue;
			if(null == _12) {
				t6 = null;
			} else {
				t6 = _12;
			}
		}
		utest_Assert.equals("B",t6 != null?t6:"B",null,{ fileName : "TestNulls.hx", lineNumber : 43, className : "thx.TestNulls", methodName : "testOr"});
		var t7;
		if(null == _gthis) {
			t7 = null;
		} else {
			var _13 = _gthis.withoutValue;
			if(null == _13) {
				t7 = null;
			} else {
				t7 = _13;
			}
		}
		utest_Assert.equals("B",t7 != null?t7:"B",null,{ fileName : "TestNulls.hx", lineNumber : 44, className : "thx.TestNulls", methodName : "testOr"});
		var o = { a : "A", b : null};
		var t8;
		if(null == o) {
			t8 = null;
		} else {
			var _14 = o.a;
			if(null == _14) {
				t8 = null;
			} else {
				t8 = _14;
			}
		}
		utest_Assert.equals("A",t8 != null?t8:"B",null,{ fileName : "TestNulls.hx", lineNumber : 48, className : "thx.TestNulls", methodName : "testOr"});
		var t9;
		if(null == o) {
			t9 = null;
		} else {
			var _15 = o.a;
			if(null == _15) {
				t9 = null;
			} else {
				t9 = _15;
			}
		}
		utest_Assert.equals("A",t9 != null?t9:"B",null,{ fileName : "TestNulls.hx", lineNumber : 49, className : "thx.TestNulls", methodName : "testOr"});
		var t10;
		if(null == o) {
			t10 = null;
		} else {
			var _16 = o.b;
			if(null == _16) {
				t10 = null;
			} else {
				t10 = _16;
			}
		}
		utest_Assert.equals("B",t10 != null?t10:"B",null,{ fileName : "TestNulls.hx", lineNumber : 51, className : "thx.TestNulls", methodName : "testOr"});
		var t11;
		if(null == o) {
			t11 = null;
		} else {
			var _17 = o.b;
			if(null == _17) {
				t11 = null;
			} else {
				t11 = _17;
			}
		}
		utest_Assert.equals("B",t11 != null?t11:"B",null,{ fileName : "TestNulls.hx", lineNumber : 52, className : "thx.TestNulls", methodName : "testOr"});
		var t12;
		if(null == _gthis) {
			t12 = null;
		} else {
			var _18 = _gthis.get_getter();
			if(null == _18) {
				t12 = null;
			} else {
				t12 = _18;
			}
		}
		utest_Assert.equals("A",t12 != null?t12:"B",null,{ fileName : "TestNulls.hx", lineNumber : 54, className : "thx.TestNulls", methodName : "testOr"});
		var t13;
		if(null == _gthis) {
			t13 = null;
		} else {
			var _19 = _gthis.get_getter();
			if(null == _19) {
				t13 = null;
			} else {
				t13 = _19;
			}
		}
		utest_Assert.equals("A",t13 != null?t13:"B",null,{ fileName : "TestNulls.hx", lineNumber : 55, className : "thx.TestNulls", methodName : "testOr"});
		var t14;
		if(null == _gthis) {
			t14 = null;
		} else {
			var _110 = _gthis.get_setter();
			if(null == _110) {
				t14 = null;
			} else {
				t14 = _110;
			}
		}
		utest_Assert.equals("B",t14 != null?t14:"B",null,{ fileName : "TestNulls.hx", lineNumber : 57, className : "thx.TestNulls", methodName : "testOr"});
		var t15;
		if(null == _gthis) {
			t15 = null;
		} else {
			var _111 = _gthis.get_setter();
			if(null == _111) {
				t15 = null;
			} else {
				t15 = _111;
			}
		}
		utest_Assert.equals("B",t15 != null?t15:"B",null,{ fileName : "TestNulls.hx", lineNumber : 58, className : "thx.TestNulls", methodName : "testOr"});
		this.set_setter("A");
		var t16;
		if(null == _gthis) {
			t16 = null;
		} else {
			var _112 = _gthis.get_setter();
			if(null == _112) {
				t16 = null;
			} else {
				t16 = _112;
			}
		}
		utest_Assert.equals("A",t16 != null?t16:"B",null,{ fileName : "TestNulls.hx", lineNumber : 61, className : "thx.TestNulls", methodName : "testOr"});
		var t17;
		if(null == _gthis) {
			t17 = null;
		} else {
			var _113 = _gthis.get_setter();
			if(null == _113) {
				t17 = null;
			} else {
				t17 = _113;
			}
		}
		utest_Assert.equals("A",t17 != null?t17:"B",null,{ fileName : "TestNulls.hx", lineNumber : 62, className : "thx.TestNulls", methodName : "testOr"});
	}
	,testOpt: function() {
		var _gthis = this;
		var o = null;
		var _0 = o;
		var tmp;
		if(null == _0) {
			tmp = null;
		} else {
			var _1 = _0.a;
			if(null == _1) {
				tmp = null;
			} else {
				var _2 = _1.b;
				if(null == _2) {
					tmp = null;
				} else {
					var _3 = _2.c;
					if(null == _3) {
						tmp = null;
					} else {
						tmp = _3;
					}
				}
			}
		}
		utest_Assert.isNull(tmp,null,{ fileName : "TestNulls.hx", lineNumber : 68, className : "thx.TestNulls", methodName : "testOpt"});
		var _01 = o;
		var tmp1;
		if(null == _01) {
			tmp1 = null;
		} else {
			var _11 = _01.a;
			if(null == _11) {
				tmp1 = null;
			} else {
				var _21 = _11.b;
				if(null == _21) {
					tmp1 = null;
				} else {
					var _31 = _21.c;
					if(null == _31) {
						tmp1 = null;
					} else {
						tmp1 = _31;
					}
				}
			}
		}
		utest_Assert.isNull(tmp1,null,{ fileName : "TestNulls.hx", lineNumber : 69, className : "thx.TestNulls", methodName : "testOpt"});
		var _02 = o;
		var tmp2;
		if(null == _02) {
			tmp2 = null;
		} else {
			var _12 = _02.a;
			if(null == _12) {
				tmp2 = null;
			} else {
				var _22 = _12.b;
				if(null == _22) {
					tmp2 = null;
				} else {
					var _32 = _22.c;
					if(null == _32) {
						tmp2 = null;
					} else {
						tmp2 = _32;
					}
				}
			}
		}
		utest_Assert.isNull(tmp2,null,{ fileName : "TestNulls.hx", lineNumber : 70, className : "thx.TestNulls", methodName : "testOpt"});
		var _03 = o;
		var tmp3;
		if(null == _03) {
			tmp3 = null;
		} else {
			var _13 = _03.a;
			if(null == _13) {
				tmp3 = null;
			} else {
				var _23 = _13.b;
				if(null == _23) {
					tmp3 = null;
				} else {
					var _33 = _23.c;
					if(null == _33) {
						tmp3 = null;
					} else {
						tmp3 = _33;
					}
				}
			}
		}
		utest_Assert.isNull(tmp3,null,{ fileName : "TestNulls.hx", lineNumber : 71, className : "thx.TestNulls", methodName : "testOpt"});
		var _04 = o;
		var t;
		if(null == _04) {
			t = null;
		} else {
			var _14 = _04.a;
			if(null == _14) {
				t = null;
			} else {
				var _24 = _14.b;
				if(null == _24) {
					t = null;
				} else {
					var _34 = _24.c;
					if(null == _34) {
						t = null;
					} else {
						t = _34;
					}
				}
			}
		}
		utest_Assert.equals("B",t != null?t:"B",null,{ fileName : "TestNulls.hx", lineNumber : 73, className : "thx.TestNulls", methodName : "testOpt"});
		o = { a : { b : { c : "A"}}};
		var _05 = o;
		var tmp4;
		if(null == _05) {
			tmp4 = null;
		} else {
			var _15 = _05.a;
			if(null == _15) {
				tmp4 = null;
			} else {
				var _25 = _15.b;
				if(null == _25) {
					tmp4 = null;
				} else {
					var _35 = _25.c;
					if(null == _35) {
						tmp4 = null;
					} else {
						tmp4 = _35;
					}
				}
			}
		}
		utest_Assert.equals("A",tmp4,null,{ fileName : "TestNulls.hx", lineNumber : 76, className : "thx.TestNulls", methodName : "testOpt"});
		var _06 = o;
		var t1;
		if(null == _06) {
			t1 = null;
		} else {
			var _16 = _06.a;
			if(null == _16) {
				t1 = null;
			} else {
				var _26 = _16.b;
				if(null == _26) {
					t1 = null;
				} else {
					var _36 = _26.c;
					if(null == _36) {
						t1 = null;
					} else {
						t1 = _36;
					}
				}
			}
		}
		utest_Assert.equals("A",t1 != null?t1:"B",null,{ fileName : "TestNulls.hx", lineNumber : 77, className : "thx.TestNulls", methodName : "testOpt"});
		var _07 = o;
		var tmp5;
		if(null == _07) {
			tmp5 = null;
		} else {
			var _17 = _07.a;
			if(null == _17) {
				tmp5 = null;
			} else {
				var _27 = _17.b;
				if(null == _27) {
					tmp5 = null;
				} else {
					tmp5 = _27;
				}
			}
		}
		utest_Assert.same({ c : "A"},tmp5,null,null,null,{ fileName : "TestNulls.hx", lineNumber : 79, className : "thx.TestNulls", methodName : "testOpt"});
		var _08 = o;
		var t2;
		if(null == _08) {
			t2 = null;
		} else {
			var _18 = _08.a;
			if(null == _18) {
				t2 = null;
			} else {
				var _28 = _18.b;
				if(null == _28) {
					t2 = null;
				} else {
					t2 = _28;
				}
			}
		}
		utest_Assert.same({ c : "A"},t2 != null?t2:{ c : "B"},null,null,null,{ fileName : "TestNulls.hx", lineNumber : 80, className : "thx.TestNulls", methodName : "testOpt"});
		o = { a : { b : null}};
		var _09 = o;
		var tmp6;
		if(null == _09) {
			tmp6 = null;
		} else {
			var _19 = _09.a;
			if(null == _19) {
				tmp6 = null;
			} else {
				var _29 = _19.b;
				if(null == _29) {
					tmp6 = null;
				} else {
					var _37 = _29.c;
					if(null == _37) {
						tmp6 = null;
					} else {
						tmp6 = _37;
					}
				}
			}
		}
		utest_Assert.isNull(tmp6,null,{ fileName : "TestNulls.hx", lineNumber : 83, className : "thx.TestNulls", methodName : "testOpt"});
		var _010 = o;
		var t3;
		if(null == _010) {
			t3 = null;
		} else {
			var _110 = _010.a;
			if(null == _110) {
				t3 = null;
			} else {
				var _210 = _110.b;
				if(null == _210) {
					t3 = null;
				} else {
					var _38 = _210.c;
					if(null == _38) {
						t3 = null;
					} else {
						t3 = _38;
					}
				}
			}
		}
		utest_Assert.equals("B",t3 != null?t3:"B",null,{ fileName : "TestNulls.hx", lineNumber : 84, className : "thx.TestNulls", methodName : "testOpt"});
		var _011 = o;
		var tmp7;
		if(null == _011) {
			tmp7 = null;
		} else {
			var _111 = _011.a;
			if(null == _111) {
				tmp7 = null;
			} else {
				var _211 = _111.b;
				if(null == _211) {
					tmp7 = null;
				} else {
					tmp7 = _211;
				}
			}
		}
		utest_Assert.isNull(tmp7,null,{ fileName : "TestNulls.hx", lineNumber : 86, className : "thx.TestNulls", methodName : "testOpt"});
		var _012 = o;
		var t4;
		if(null == _012) {
			t4 = null;
		} else {
			var _112 = _012.a;
			if(null == _112) {
				t4 = null;
			} else {
				var _212 = _112.b;
				if(null == _212) {
					t4 = null;
				} else {
					t4 = _212;
				}
			}
		}
		utest_Assert.same({ c : "B"},t4 != null?t4:{ c : "B"},null,null,null,{ fileName : "TestNulls.hx", lineNumber : 87, className : "thx.TestNulls", methodName : "testOpt"});
		var tmp8;
		if(null == _gthis) {
			tmp8 = null;
		} else {
			var _113 = _gthis.nested;
			if(null == _113) {
				tmp8 = null;
			} else {
				var _213 = _113.a;
				if(null == _213) {
					tmp8 = null;
				} else {
					var _39 = _213.b;
					if(null == _39) {
						tmp8 = null;
					} else {
						tmp8 = _39;
					}
				}
			}
		}
		utest_Assert.equals("A",tmp8,null,{ fileName : "TestNulls.hx", lineNumber : 89, className : "thx.TestNulls", methodName : "testOpt"});
		var tmp9;
		if(null == _gthis) {
			tmp9 = null;
		} else {
			var _114 = _gthis.nested;
			if(null == _114) {
				tmp9 = null;
			} else {
				var _214 = _114.a;
				if(null == _214) {
					tmp9 = null;
				} else {
					var _310 = _214.b;
					if(null == _310) {
						tmp9 = null;
					} else {
						tmp9 = _310;
					}
				}
			}
		}
		utest_Assert.equals("A",tmp9,null,{ fileName : "TestNulls.hx", lineNumber : 90, className : "thx.TestNulls", methodName : "testOpt"});
		var tmp10;
		if(null == _gthis) {
			tmp10 = null;
		} else {
			var _115 = _gthis.empty;
			if(null == _115) {
				tmp10 = null;
			} else {
				var _215 = _115.a;
				if(null == _215) {
					tmp10 = null;
				} else {
					var _311 = _215.b;
					if(null == _311) {
						tmp10 = null;
					} else {
						tmp10 = _311;
					}
				}
			}
		}
		utest_Assert.isNull(tmp10,null,{ fileName : "TestNulls.hx", lineNumber : 92, className : "thx.TestNulls", methodName : "testOpt"});
		var tmp11;
		if(null == _gthis) {
			tmp11 = null;
		} else {
			var _116 = _gthis.empty;
			if(null == _116) {
				tmp11 = null;
			} else {
				var _216 = _116.a;
				if(null == _216) {
					tmp11 = null;
				} else {
					var _312 = _216.b;
					if(null == _312) {
						tmp11 = null;
					} else {
						tmp11 = _312;
					}
				}
			}
		}
		utest_Assert.isNull(tmp11,null,{ fileName : "TestNulls.hx", lineNumber : 93, className : "thx.TestNulls", methodName : "testOpt"});
		var arr = null;
		var _013 = arr;
		var tmp12;
		if(null == _013) {
			tmp12 = null;
		} else {
			var _117 = _013.a;
			if(null == _117) {
				tmp12 = null;
			} else {
				var _217 = _117[0];
				if(null == _217) {
					tmp12 = null;
				} else {
					var _313 = _217.b;
					if(null == _313) {
						tmp12 = null;
					} else {
						tmp12 = _313;
					}
				}
			}
		}
		utest_Assert.isNull(tmp12,null,{ fileName : "TestNulls.hx", lineNumber : 96, className : "thx.TestNulls", methodName : "testOpt"});
		arr = { a : [{ b : "A"}]};
		var _014 = arr;
		var tmp13;
		if(null == _014) {
			tmp13 = null;
		} else {
			var _118 = _014.a;
			if(null == _118) {
				tmp13 = null;
			} else {
				var _218 = _118[1];
				if(null == _218) {
					tmp13 = null;
				} else {
					var _314 = _218.b;
					if(null == _314) {
						tmp13 = null;
					} else {
						tmp13 = _314;
					}
				}
			}
		}
		utest_Assert.isNull(tmp13,null,{ fileName : "TestNulls.hx", lineNumber : 98, className : "thx.TestNulls", methodName : "testOpt"});
		var _015 = arr;
		var tmp14;
		if(null == _015) {
			tmp14 = null;
		} else {
			var _119 = _015.a;
			if(null == _119) {
				tmp14 = null;
			} else {
				var _219 = _119[0];
				if(null == _219) {
					tmp14 = null;
				} else {
					var _315 = _219.b;
					if(null == _315) {
						tmp14 = null;
					} else {
						tmp14 = _315;
					}
				}
			}
		}
		utest_Assert.equals("A",tmp14,null,{ fileName : "TestNulls.hx", lineNumber : 99, className : "thx.TestNulls", methodName : "testOpt"});
		var arr1 = null;
		var _016 = arr1;
		var tmp15;
		if(null == _016) {
			tmp15 = null;
		} else {
			var _120 = _016[0];
			if(null == _120) {
				tmp15 = null;
			} else {
				tmp15 = _120;
			}
		}
		utest_Assert.isNull(tmp15,null,{ fileName : "TestNulls.hx", lineNumber : 102, className : "thx.TestNulls", methodName : "testOpt"});
		var _017 = arr1;
		var tmp16;
		if(null == _017) {
			tmp16 = null;
		} else {
			var _121 = _017[0];
			if(null == _121) {
				tmp16 = null;
			} else {
				var _220 = _121[1];
				if(null == _220) {
					tmp16 = null;
				} else {
					tmp16 = _220;
				}
			}
		}
		utest_Assert.isNull(tmp16,null,{ fileName : "TestNulls.hx", lineNumber : 103, className : "thx.TestNulls", methodName : "testOpt"});
		var _018 = arr1;
		var tmp17;
		if(null == _018) {
			tmp17 = null;
		} else {
			var _122 = _018[0];
			if(null == _122) {
				tmp17 = null;
			} else {
				var _221 = _122[1];
				if(null == _221) {
					tmp17 = null;
				} else {
					var _316 = _221[3];
					if(null == _316) {
						tmp17 = null;
					} else {
						tmp17 = _316;
					}
				}
			}
		}
		utest_Assert.isNull(tmp17,null,{ fileName : "TestNulls.hx", lineNumber : 104, className : "thx.TestNulls", methodName : "testOpt"});
		arr1 = [[[1,2,3],[4,5,6]]];
		var _019 = arr1;
		var tmp18;
		if(null == _019) {
			tmp18 = null;
		} else {
			var _123 = _019[0];
			if(null == _123) {
				tmp18 = null;
			} else {
				var _222 = _123[0];
				if(null == _222) {
					tmp18 = null;
				} else {
					var _317 = _222[0];
					if(null == _317) {
						tmp18 = null;
					} else {
						tmp18 = _317;
					}
				}
			}
		}
		utest_Assert.equals(1,tmp18,null,{ fileName : "TestNulls.hx", lineNumber : 107, className : "thx.TestNulls", methodName : "testOpt"});
		var _020 = arr1;
		var tmp19;
		if(null == _020) {
			tmp19 = null;
		} else {
			var _124 = _020[0];
			if(null == _124) {
				tmp19 = null;
			} else {
				var _223 = _124[1];
				if(null == _223) {
					tmp19 = null;
				} else {
					var _318 = _223[2];
					if(null == _318) {
						tmp19 = null;
					} else {
						tmp19 = _318;
					}
				}
			}
		}
		utest_Assert.equals(6,tmp19,null,{ fileName : "TestNulls.hx", lineNumber : 108, className : "thx.TestNulls", methodName : "testOpt"});
	}
	,testOrWithIndex: function() {
		var arr = null;
		var t;
		if(null == arr) {
			t = null;
		} else {
			var _1 = arr[0];
			if(null == _1) {
				t = null;
			} else {
				var _2 = _1[1];
				if(null == _2) {
					t = null;
				} else {
					var _3 = _2[3];
					if(null == _3) {
						t = null;
					} else {
						t = _3;
					}
				}
			}
		}
		utest_Assert.equals(7,t != null?t:7,null,{ fileName : "TestNulls.hx", lineNumber : 114, className : "thx.TestNulls", methodName : "testOrWithIndex"});
		var t1;
		if(null == arr) {
			t1 = null;
		} else {
			var _11 = arr[4];
			if(null == _11) {
				t1 = null;
			} else {
				var _21 = _11[1];
				if(null == _21) {
					t1 = null;
				} else {
					var _31 = _21[3];
					if(null == _31) {
						t1 = null;
					} else {
						t1 = _31;
					}
				}
			}
		}
		utest_Assert.equals(7,t1 != null?t1:7,null,{ fileName : "TestNulls.hx", lineNumber : 115, className : "thx.TestNulls", methodName : "testOrWithIndex"});
		var t2;
		if(null == arr) {
			t2 = null;
		} else {
			var _12 = arr[0];
			if(null == _12) {
				t2 = null;
			} else {
				var _22 = _12[4];
				if(null == _22) {
					t2 = null;
				} else {
					var _32 = _22[3];
					if(null == _32) {
						t2 = null;
					} else {
						t2 = _32;
					}
				}
			}
		}
		utest_Assert.equals(7,t2 != null?t2:7,null,{ fileName : "TestNulls.hx", lineNumber : 116, className : "thx.TestNulls", methodName : "testOrWithIndex"});
		var t3;
		if(null == arr) {
			t3 = null;
		} else {
			var _13 = arr[0];
			if(null == _13) {
				t3 = null;
			} else {
				var _23 = _13[1];
				if(null == _23) {
					t3 = null;
				} else {
					var _33 = _23[4];
					if(null == _33) {
						t3 = null;
					} else {
						t3 = _33;
					}
				}
			}
		}
		utest_Assert.equals(7,t3 != null?t3:7,null,{ fileName : "TestNulls.hx", lineNumber : 117, className : "thx.TestNulls", methodName : "testOrWithIndex"});
	}
	,m: null
	,m2: null
	,testOrMethod: function() {
		var _gthis = this;
		var t;
		if(null == _gthis) {
			t = null;
		} else {
			var _1 = _gthis.m;
			if(null == _1) {
				t = null;
			} else {
				var _2 = _1.f("Y");
				if(null == _2) {
					t = null;
				} else {
					var _3 = _2.change();
					if(null == _3) {
						t = null;
					} else {
						t = _3;
					}
				}
			}
		}
		utest_Assert.equals("x",t != null?t:"x",null,{ fileName : "TestNulls.hx", lineNumber : 129, className : "thx.TestNulls", methodName : "testOrMethod"});
		var first = true;
		this.m = { f : function(s) {
			if(first) {
				first = false;
				return { change : function() {
					return s.toLowerCase();
				}};
			} else {
				throw new js__$Boot_HaxeError("method called multiple times");
			}
		}};
		var t1;
		if(null == _gthis) {
			t1 = null;
		} else {
			var _11 = _gthis.m;
			if(null == _11) {
				t1 = null;
			} else {
				var _21 = _11.f("Y");
				if(null == _21) {
					t1 = null;
				} else {
					var _31 = _21.change();
					if(null == _31) {
						t1 = null;
					} else {
						t1 = _31;
					}
				}
			}
		}
		utest_Assert.equals("y",t1 != null?t1:"x",null,{ fileName : "TestNulls.hx", lineNumber : 144, className : "thx.TestNulls", methodName : "testOrMethod"});
		var t2;
		if(null == _gthis) {
			t2 = null;
		} else {
			var _12 = _gthis.m2;
			if(null == _12) {
				t2 = null;
			} else {
				var _22 = _12.f("Y");
				if(null == _22) {
					t2 = null;
				} else {
					var _32 = _22.toLowerCase();
					if(null == _32) {
						t2 = null;
					} else {
						t2 = _32;
					}
				}
			}
		}
		utest_Assert.equals("x",t2 != null?t2:"x",null,{ fileName : "TestNulls.hx", lineNumber : 146, className : "thx.TestNulls", methodName : "testOrMethod"});
	}
	,testIsNull: function() {
		var _gthis = this;
		var tmp;
		if(null == _gthis) {
			tmp = null;
		} else {
			var _1 = _gthis.empty;
			if(null == _1) {
				tmp = null;
			} else {
				tmp = _1;
			}
		}
		utest_Assert.isTrue(tmp == null,null,{ fileName : "TestNulls.hx", lineNumber : 151, className : "thx.TestNulls", methodName : "testIsNull"});
		var tmp1;
		if(null == _gthis) {
			tmp1 = null;
		} else {
			var _11 = _gthis.empty;
			if(null == _11) {
				tmp1 = null;
			} else {
				var _2 = _11.a;
				if(null == _2) {
					tmp1 = null;
				} else {
					tmp1 = _2;
				}
			}
		}
		utest_Assert.isTrue(tmp1 == null,null,{ fileName : "TestNulls.hx", lineNumber : 152, className : "thx.TestNulls", methodName : "testIsNull"});
		var tmp2;
		if(null == _gthis) {
			tmp2 = null;
		} else {
			var _12 = _gthis.empty;
			if(null == _12) {
				tmp2 = null;
			} else {
				var _21 = _12.a;
				if(null == _21) {
					tmp2 = null;
				} else {
					var _3 = _21.b;
					if(null == _3) {
						tmp2 = null;
					} else {
						tmp2 = _3;
					}
				}
			}
		}
		utest_Assert.isTrue(tmp2 == null,null,{ fileName : "TestNulls.hx", lineNumber : 153, className : "thx.TestNulls", methodName : "testIsNull"});
	}
	,testNotNull: function() {
		var _gthis = this;
		var tmp;
		if(null == _gthis) {
			tmp = null;
		} else {
			var _1 = _gthis.nested;
			if(null == _1) {
				tmp = null;
			} else {
				tmp = _1;
			}
		}
		utest_Assert.isTrue(tmp != null,null,{ fileName : "TestNulls.hx", lineNumber : 157, className : "thx.TestNulls", methodName : "testNotNull"});
		var tmp1;
		if(null == _gthis) {
			tmp1 = null;
		} else {
			var _11 = _gthis.nested;
			if(null == _11) {
				tmp1 = null;
			} else {
				var _2 = _11.a;
				if(null == _2) {
					tmp1 = null;
				} else {
					tmp1 = _2;
				}
			}
		}
		utest_Assert.isTrue(tmp1 != null,null,{ fileName : "TestNulls.hx", lineNumber : 158, className : "thx.TestNulls", methodName : "testNotNull"});
		var tmp2;
		if(null == _gthis) {
			tmp2 = null;
		} else {
			var _12 = _gthis.nested;
			if(null == _12) {
				tmp2 = null;
			} else {
				var _21 = _12.a;
				if(null == _21) {
					tmp2 = null;
				} else {
					var _3 = _21.b;
					if(null == _3) {
						tmp2 = null;
					} else {
						tmp2 = _3;
					}
				}
			}
		}
		utest_Assert.isTrue(tmp2 != null,null,{ fileName : "TestNulls.hx", lineNumber : 159, className : "thx.TestNulls", methodName : "testNotNull"});
	}
	,testEnsure: function() {
		var nops = null;
		var yups = "some content";
		utest_Assert.isNull(this.ensureField,null,{ fileName : "TestNulls.hx", lineNumber : 166, className : "thx.TestNulls", methodName : "testEnsure"});
		utest_Assert.isNull(thx_TestNulls.ensureStaticField,null,{ fileName : "TestNulls.hx", lineNumber : 167, className : "thx.TestNulls", methodName : "testEnsure"});
		if(null == nops) {
			nops = "alt";
		}
		if(false) {
			yups = "alt";
		}
		utest_Assert.equals("alt",nops,null,{ fileName : "TestNulls.hx", lineNumber : 172, className : "thx.TestNulls", methodName : "testEnsure"});
		utest_Assert.equals("some content",yups,null,{ fileName : "TestNulls.hx", lineNumber : 173, className : "thx.TestNulls", methodName : "testEnsure"});
		nops = null;
		if(null == nops) {
			nops = "alt";
		}
		if(null == yups) {
			yups = "alt";
		}
		utest_Assert.equals("alt",nops,null,{ fileName : "TestNulls.hx", lineNumber : 179, className : "thx.TestNulls", methodName : "testEnsure"});
		utest_Assert.equals("some content",yups,null,{ fileName : "TestNulls.hx", lineNumber : 180, className : "thx.TestNulls", methodName : "testEnsure"});
		if(null == this.ensureField) {
			this.ensureField = "alt";
		}
		if(null == thx_TestNulls.ensureStaticField) {
			thx_TestNulls.ensureStaticField = "alt";
		}
		if(null == this.ensureField) {
			this.ensureField = "alt";
		}
		if(null == thx_TestNulls.ensureStaticField) {
			thx_TestNulls.ensureStaticField = "alt";
		}
		this.ensureField = null;
		thx_TestNulls.ensureStaticField = null;
		if(null == this.ensureField) {
			this.ensureField = "alt";
		}
		if(null == thx_TestNulls.ensureStaticField) {
			thx_TestNulls.ensureStaticField = "alt";
		}
		if(null == this.ensureField) {
			this.ensureField = "alt";
		}
		if(null == thx_TestNulls.ensureStaticField) {
			thx_TestNulls.ensureStaticField = "alt";
		}
	}
	,ensureField: null
	,__class__: thx_TestNulls
};
var thx_TestObjects = function() {
};
thx_TestObjects.__name__ = ["thx","TestObjects"];
thx_TestObjects.prototype = {
	testIssue20151201: function() {
		var s = thx_Objects.string({ oldId : "1", newId : "2"});
		utest_Assert.stringContains("oldId : \"1\"",s,null,{ fileName : "TestObjects.hx", lineNumber : 18, className : "thx.TestObjects", methodName : "testIssue20151201"});
		utest_Assert.stringContains("newId : \"2\"",s,null,{ fileName : "TestObjects.hx", lineNumber : 19, className : "thx.TestObjects", methodName : "testIssue20151201"});
		utest_Assert.stringContains(", ",s,null,{ fileName : "TestObjects.hx", lineNumber : 20, className : "thx.TestObjects", methodName : "testIssue20151201"});
		utest_Assert.isTrue(StringTools.startsWith(s,"{"),null,{ fileName : "TestObjects.hx", lineNumber : 21, className : "thx.TestObjects", methodName : "testIssue20151201"});
		utest_Assert.isTrue(StringTools.endsWith(s,"}"),null,{ fileName : "TestObjects.hx", lineNumber : 22, className : "thx.TestObjects", methodName : "testIssue20151201"});
	}
	,testObjects: function() {
		var ob = { };
		utest_Assert.isTrue(Reflect.fields(ob).length == 0,null,{ fileName : "TestObjects.hx", lineNumber : 27, className : "thx.TestObjects", methodName : "testObjects"});
		utest_Assert.same([],Reflect.fields(ob),null,null,null,{ fileName : "TestObjects.hx", lineNumber : 28, className : "thx.TestObjects", methodName : "testObjects"});
		var ob1 = { a : "A", b : "B"};
		utest_Assert.isFalse(Reflect.fields(ob1).length == 0,null,{ fileName : "TestObjects.hx", lineNumber : 31, className : "thx.TestObjects", methodName : "testObjects"});
		var fields = Reflect.fields(ob1);
		utest_Assert.isTrue(HxOverrides.remove(fields,"a"),null,{ fileName : "TestObjects.hx", lineNumber : 34, className : "thx.TestObjects", methodName : "testObjects"});
		utest_Assert.isTrue(HxOverrides.remove(fields,"b"),null,{ fileName : "TestObjects.hx", lineNumber : 35, className : "thx.TestObjects", methodName : "testObjects"});
		utest_Assert.equals(0,fields.length,null,{ fileName : "TestObjects.hx", lineNumber : 36, className : "thx.TestObjects", methodName : "testObjects"});
		var o = ob1;
		var values = Reflect.fields(o).map(function(key) {
			return Reflect.field(o,key);
		});
		utest_Assert.isTrue(HxOverrides.remove(values,"A"),null,{ fileName : "TestObjects.hx", lineNumber : 39, className : "thx.TestObjects", methodName : "testObjects"});
		utest_Assert.isTrue(HxOverrides.remove(values,"B"),null,{ fileName : "TestObjects.hx", lineNumber : 40, className : "thx.TestObjects", methodName : "testObjects"});
		utest_Assert.equals(0,values.length,null,{ fileName : "TestObjects.hx", lineNumber : 41, className : "thx.TestObjects", methodName : "testObjects"});
		var tuples = thx_Objects.tuples(ob1);
		tuples.sort(function(a,b) {
			return haxe_Utf8.compare(a._0,b._0);
		});
		utest_Assert.same([{ _0 : "a", _1 : "A"},{ _0 : "b", _1 : "B"}],tuples,null,null,null,{ fileName : "TestObjects.hx", lineNumber : 47, className : "thx.TestObjects", methodName : "testObjects"});
	}
	,testAssign: function() {
		var o = { 'name' : "Franco", age : 19};
		var out = thx_Objects.assign(o,{ 'foo' : "bar", 'name' : "Michael", 'age' : "Two"});
		utest_Assert.same("Michael",out.name,null,null,null,{ fileName : "TestObjects.hx", lineNumber : 53, className : "thx.TestObjects", methodName : "testAssign"});
		utest_Assert.same("Two",out.age,null,null,null,{ fileName : "TestObjects.hx", lineNumber : 54, className : "thx.TestObjects", methodName : "testAssign"});
		utest_Assert.same("bar",out.foo,null,null,null,{ fileName : "TestObjects.hx", lineNumber : 55, className : "thx.TestObjects", methodName : "testAssign"});
		var _g = 0;
		var _g1 = Reflect.fields(out);
		while(_g < _g1.length) {
			var field = _g1[_g];
			++_g;
			utest_Assert.same(Reflect.field(out,field),Reflect.field(o,field),null,null,null,{ fileName : "TestObjects.hx", lineNumber : 58, className : "thx.TestObjects", methodName : "testAssign"});
		}
	}
	,testCombine: function() {
		var o = { 'name' : "Franco", age : 19};
		var out = thx_Objects.combine(o,{ 'foo' : "bar", 'name' : "Michael", 'age' : "Two"});
		utest_Assert.same("Michael",out.name,null,null,null,{ fileName : "TestObjects.hx", lineNumber : 66, className : "thx.TestObjects", methodName : "testCombine"});
		utest_Assert.same("Two",out.age,null,null,null,{ fileName : "TestObjects.hx", lineNumber : 67, className : "thx.TestObjects", methodName : "testCombine"});
		utest_Assert.same("bar",out.foo,null,null,null,{ fileName : "TestObjects.hx", lineNumber : 68, className : "thx.TestObjects", methodName : "testCombine"});
		utest_Assert.same("Franco",o.name,null,null,null,{ fileName : "TestObjects.hx", lineNumber : 69, className : "thx.TestObjects", methodName : "testCombine"});
	}
	,testMergeWithNullable: function() {
		utest_Assert.same("baz",thx_Objects.combine({ foo : "baz", bar : "qux"},{ }).foo,null,null,null,{ fileName : "TestObjects.hx", lineNumber : 81, className : "thx.TestObjects", methodName : "testMergeWithNullable"});
	}
	,testMergeWithTypedef: function() {
		var to = { bar : "qux"};
		var from = { foo : "baz", extra : "field"};
		var merged = thx_Objects.combine(to,from);
		utest_Assert.same(merged.foo,from.foo,null,null,null,{ fileName : "TestObjects.hx", lineNumber : 95, className : "thx.TestObjects", methodName : "testMergeWithTypedef"});
		utest_Assert.same(merged.bar,to.bar,null,null,null,{ fileName : "TestObjects.hx", lineNumber : 96, className : "thx.TestObjects", methodName : "testMergeWithTypedef"});
		utest_Assert.same(Reflect.field(merged,"extra"),"field",null,null,null,{ fileName : "TestObjects.hx", lineNumber : 97, className : "thx.TestObjects", methodName : "testMergeWithTypedef"});
	}
	,testHasPath: function() {
		var o = { key1 : { key2 : 123, key3 : "abc", key4 : ["one","two"], key5 : [{ key6 : "test1"},{ key6 : "test2"}], key6 : null}};
		utest_Assert.isTrue(thx_Objects.hasPath(o,"key1.key2"),null,{ fileName : "TestObjects.hx", lineNumber : 117, className : "thx.TestObjects", methodName : "testHasPath"});
		utest_Assert.isTrue(thx_Objects.hasPath(o,"key1.key4.1"),null,{ fileName : "TestObjects.hx", lineNumber : 118, className : "thx.TestObjects", methodName : "testHasPath"});
		utest_Assert.isTrue(thx_Objects.hasPath(o,"key1.key6"),null,{ fileName : "TestObjects.hx", lineNumber : 119, className : "thx.TestObjects", methodName : "testHasPath"});
		utest_Assert.isFalse(thx_Objects.hasPath(o,"key1.key4.2"),null,{ fileName : "TestObjects.hx", lineNumber : 121, className : "thx.TestObjects", methodName : "testHasPath"});
		utest_Assert.isFalse(thx_Objects.hasPath(o,"key1.key7"),null,{ fileName : "TestObjects.hx", lineNumber : 122, className : "thx.TestObjects", methodName : "testHasPath"});
	}
	,testHasPathValue: function() {
		var o = { key1 : { key2 : 123, key3 : "abc", key4 : ["one","two",null], key5 : [{ key6 : "test1"},{ key6 : "test2"}], key6 : null}};
		utest_Assert.isFalse(thx_Objects.hasPathValue(o,"key1.key6"),null,{ fileName : "TestObjects.hx", lineNumber : 143, className : "thx.TestObjects", methodName : "testHasPathValue"});
		utest_Assert.isFalse(thx_Objects.hasPathValue(o,"key1.key4.2"),null,{ fileName : "TestObjects.hx", lineNumber : 144, className : "thx.TestObjects", methodName : "testHasPathValue"});
		utest_Assert.isFalse(thx_Objects.hasPathValue(o,"key1.key7"),null,{ fileName : "TestObjects.hx", lineNumber : 145, className : "thx.TestObjects", methodName : "testHasPathValue"});
	}
	,testGetPath: function() {
		var o = { key1 : { key2 : 123, key3 : "abc", key4 : ["one","two"], key5 : [{ key6 : "test1"},{ key6 : "test2"}]}};
		utest_Assert.same(123,thx_Objects.getPath(o,"key1.key2"),null,null,null,{ fileName : "TestObjects.hx", lineNumber : 163, className : "thx.TestObjects", methodName : "testGetPath"});
		utest_Assert.same("abc",thx_Objects.getPath(o,"key1.key3"),null,null,null,{ fileName : "TestObjects.hx", lineNumber : 164, className : "thx.TestObjects", methodName : "testGetPath"});
		utest_Assert.same("one",thx_Objects.getPath(o,"key1.key4.0"),null,null,null,{ fileName : "TestObjects.hx", lineNumber : 165, className : "thx.TestObjects", methodName : "testGetPath"});
		utest_Assert.same("two",thx_Objects.getPath(o,"key1.key4.1"),null,null,null,{ fileName : "TestObjects.hx", lineNumber : 166, className : "thx.TestObjects", methodName : "testGetPath"});
		utest_Assert.same([{ key6 : "test1"},{ key6 : "test2"}],thx_Objects.getPath(o,"key1.key5"),null,null,null,{ fileName : "TestObjects.hx", lineNumber : 167, className : "thx.TestObjects", methodName : "testGetPath"});
		utest_Assert.same("test1",thx_Objects.getPath(o,"key1.key5.0.key6"),null,null,null,{ fileName : "TestObjects.hx", lineNumber : 168, className : "thx.TestObjects", methodName : "testGetPath"});
		utest_Assert.same("test2",thx_Objects.getPath(o,"key1.key5.1.key6"),null,null,null,{ fileName : "TestObjects.hx", lineNumber : 169, className : "thx.TestObjects", methodName : "testGetPath"});
		utest_Assert.isNull(thx_Objects.getPath(o,""),null,{ fileName : "TestObjects.hx", lineNumber : 171, className : "thx.TestObjects", methodName : "testGetPath"});
		utest_Assert.isNull(thx_Objects.getPath(o,"bad"),null,{ fileName : "TestObjects.hx", lineNumber : 172, className : "thx.TestObjects", methodName : "testGetPath"});
		utest_Assert.isNull(thx_Objects.getPath(o,"bad.key"),null,{ fileName : "TestObjects.hx", lineNumber : 173, className : "thx.TestObjects", methodName : "testGetPath"});
	}
	,testSetPath: function() {
		utest_Assert.same({ key : "val"},thx_Objects.setPath({ },"key","val"),null,null,null,{ fileName : "TestObjects.hx", lineNumber : 177, className : "thx.TestObjects", methodName : "testSetPath"});
		utest_Assert.same({ key1 : "val1", key2 : "val2"},thx_Objects.setPath(thx_Objects.setPath({ },"key1","val1"),"key2","val2"),null,null,null,{ fileName : "TestObjects.hx", lineNumber : 178, className : "thx.TestObjects", methodName : "testSetPath"});
		utest_Assert.same({ key1 : { key2 : "val"}},thx_Objects.setPath({ },"key1.key2","val"),null,null,null,{ fileName : "TestObjects.hx", lineNumber : 179, className : "thx.TestObjects", methodName : "testSetPath"});
		utest_Assert.same({ key1 : [{ key2 : "val"}]},thx_Objects.setPath({ },"key1.0.key2","val"),null,null,null,{ fileName : "TestObjects.hx", lineNumber : 180, className : "thx.TestObjects", methodName : "testSetPath"});
		utest_Assert.same({ key1 : [[[null,123]]]},thx_Objects.setPath({ },"key1.0.0.1",123),null,null,null,{ fileName : "TestObjects.hx", lineNumber : 181, className : "thx.TestObjects", methodName : "testSetPath"});
		utest_Assert.same({ key1 : [[[null,{ key2 : "val"}]]]},thx_Objects.setPath({ },"key1.0.0.1.key2","val"),null,null,null,{ fileName : "TestObjects.hx", lineNumber : 182, className : "thx.TestObjects", methodName : "testSetPath"});
		utest_Assert.same({ key : "val"},thx_Objects.setPath({ key : "before"},"key","val"),null,null,null,{ fileName : "TestObjects.hx", lineNumber : 184, className : "thx.TestObjects", methodName : "testSetPath"});
		utest_Assert.same({ key1 : { key2 : "val"}},thx_Objects.setPath({ key1 : { key2 : "before"}},"key1.key2","val"),null,null,null,{ fileName : "TestObjects.hx", lineNumber : 185, className : "thx.TestObjects", methodName : "testSetPath"});
		utest_Assert.same({ key1 : { key2 : [1,55,3]}},thx_Objects.setPath({ key1 : { key2 : [1,2,3]}},"key1.key2.1",55),null,null,null,{ fileName : "TestObjects.hx", lineNumber : 186, className : "thx.TestObjects", methodName : "testSetPath"});
		utest_Assert.same({ key1 : 123, newKey : "val"},thx_Objects.setPath({ key1 : 123},"newKey","val"),null,null,null,{ fileName : "TestObjects.hx", lineNumber : 187, className : "thx.TestObjects", methodName : "testSetPath"});
		utest_Assert.same([1,2],thx_Objects.setPath(thx_Objects.setPath([],"*",1),"*",2),null,null,null,{ fileName : "TestObjects.hx", lineNumber : 189, className : "thx.TestObjects", methodName : "testSetPath"});
		utest_Assert.same({ list : [1,2]},thx_Objects.setPath(thx_Objects.setPath({ },"list.*",1),"list.*",2),null,null,null,{ fileName : "TestObjects.hx", lineNumber : 190, className : "thx.TestObjects", methodName : "testSetPath"});
		utest_Assert.same([[1,2]],thx_Objects.setPath(thx_Objects.setPath([],"0.*",1),"0.*",2),null,null,null,{ fileName : "TestObjects.hx", lineNumber : 191, className : "thx.TestObjects", methodName : "testSetPath"});
		utest_Assert.same([[1],[2]],thx_Objects.setPath(thx_Objects.setPath([],"0.*",1),"*.*",2),null,null,null,{ fileName : "TestObjects.hx", lineNumber : 192, className : "thx.TestObjects", methodName : "testSetPath"});
	}
	,testRemovePath: function() {
		var simple = { foo : "bar"};
		var nested = { foo : { bar : { baz : "qux", other : "other"}}};
		var arr = { foo : [{ },{ bar : "baz"}]};
		utest_Assert.same({ },thx_Objects.removePath(simple,"foo"),null,null,null,{ fileName : "TestObjects.hx", lineNumber : 211, className : "thx.TestObjects", methodName : "testRemovePath"});
		utest_Assert.same({ },simple,null,null,null,{ fileName : "TestObjects.hx", lineNumber : 212, className : "thx.TestObjects", methodName : "testRemovePath"});
		utest_Assert.same(simple,thx_Objects.removePath(simple,"a.b.c.d"),null,null,null,{ fileName : "TestObjects.hx", lineNumber : 213, className : "thx.TestObjects", methodName : "testRemovePath"});
		utest_Assert.same({ foo : { bar : { baz : "qux"}}},thx_Objects.removePath(nested,"foo.bar.other"),null,null,null,{ fileName : "TestObjects.hx", lineNumber : 215, className : "thx.TestObjects", methodName : "testRemovePath"});
		utest_Assert.same(arr,thx_Objects.removePath(arr,"foo.0.bar"),null,null,null,{ fileName : "TestObjects.hx", lineNumber : 217, className : "thx.TestObjects", methodName : "testRemovePath"});
		utest_Assert.same({ foo : [{ },{ }]},thx_Objects.removePath(arr,"foo.1.bar"),null,null,null,{ fileName : "TestObjects.hx", lineNumber : 218, className : "thx.TestObjects", methodName : "testRemovePath"});
	}
	,__class__: thx_TestObjects
};
var thx_TestOrderedMap = function() {
};
thx_TestOrderedMap.__name__ = ["thx","TestOrderedMap"];
thx_TestOrderedMap.prototype = {
	testBasics: function() {
		var ml = new thx_StringOrderedMap();
		utest_Assert.equals(0,ml.length,null,{ fileName : "TestOrderedMap.hx", lineNumber : 15, className : "thx.TestOrderedMap", methodName : "testBasics"});
		utest_Assert.equals("[]",ml.toString(),null,{ fileName : "TestOrderedMap.hx", lineNumber : 16, className : "thx.TestOrderedMap", methodName : "testBasics"});
		ml.set("z","Z");
		ml.set("y","Y");
		ml.set("y","Y");
		ml.set("x","X");
		utest_Assert.equals(3,ml.length,null,{ fileName : "TestOrderedMap.hx", lineNumber : 23, className : "thx.TestOrderedMap", methodName : "testBasics"});
		utest_Assert.equals("[z => Z, y => Y, x => X]",ml.toString(),null,{ fileName : "TestOrderedMap.hx", lineNumber : 24, className : "thx.TestOrderedMap", methodName : "testBasics"});
		utest_Assert.isTrue(ml.remove("y"),null,{ fileName : "TestOrderedMap.hx", lineNumber : 26, className : "thx.TestOrderedMap", methodName : "testBasics"});
		utest_Assert.isFalse(ml.remove("y"),null,{ fileName : "TestOrderedMap.hx", lineNumber : 27, className : "thx.TestOrderedMap", methodName : "testBasics"});
		utest_Assert.equals(2,ml.length,null,{ fileName : "TestOrderedMap.hx", lineNumber : 29, className : "thx.TestOrderedMap", methodName : "testBasics"});
		utest_Assert.equals("[z => Z, x => X]",ml.toString(),null,{ fileName : "TestOrderedMap.hx", lineNumber : 30, className : "thx.TestOrderedMap", methodName : "testBasics"});
		ml.insert(1,"y","Y");
		utest_Assert.equals(3,ml.length,null,{ fileName : "TestOrderedMap.hx", lineNumber : 34, className : "thx.TestOrderedMap", methodName : "testBasics"});
		utest_Assert.equals("[z => Z, y => Y, x => X]",ml.toString(),null,{ fileName : "TestOrderedMap.hx", lineNumber : 35, className : "thx.TestOrderedMap", methodName : "testBasics"});
		utest_Assert.equals("y",ml.keyAt(1),null,{ fileName : "TestOrderedMap.hx", lineNumber : 37, className : "thx.TestOrderedMap", methodName : "testBasics"});
		utest_Assert.equals("Y",ml.at(1),null,{ fileName : "TestOrderedMap.hx", lineNumber : 38, className : "thx.TestOrderedMap", methodName : "testBasics"});
		utest_Assert.equals(1,ml.keyIndex("y"),null,{ fileName : "TestOrderedMap.hx", lineNumber : 40, className : "thx.TestOrderedMap", methodName : "testBasics"});
		utest_Assert.equals(1,ml.valueIndex("Y"),null,{ fileName : "TestOrderedMap.hx", lineNumber : 41, className : "thx.TestOrderedMap", methodName : "testBasics"});
		ml.removeAt(1);
		utest_Assert.equals(2,ml.length,null,{ fileName : "TestOrderedMap.hx", lineNumber : 45, className : "thx.TestOrderedMap", methodName : "testBasics"});
		utest_Assert.equals("[z => Z, x => X]",ml.toString(),null,{ fileName : "TestOrderedMap.hx", lineNumber : 46, className : "thx.TestOrderedMap", methodName : "testBasics"});
		utest_Assert.same(["Z","X"],ml.toArray(),null,null,null,{ fileName : "TestOrderedMap.hx", lineNumber : 48, className : "thx.TestOrderedMap", methodName : "testBasics"});
		utest_Assert.same(["z","x"],thx_Iterators.toArray(ml.keys()),null,null,null,{ fileName : "TestOrderedMap.hx", lineNumber : 49, className : "thx.TestOrderedMap", methodName : "testBasics"});
	}
	,testGetOption: function() {
		var m = new thx_StringOrderedMap();
		m.set("key1",1);
		var value = m.get("key1");
		utest_Assert.same(thx_Options.get(null == value?haxe_ds_Option.None:haxe_ds_Option.Some(value)),1,null,null,null,{ fileName : "TestOrderedMap.hx", lineNumber : 56, className : "thx.TestOrderedMap", methodName : "testGetOption"});
		var value1 = m.get("key2");
		utest_Assert.same(thx_Options.toBool(null == value1?haxe_ds_Option.None:haxe_ds_Option.Some(value1)),false,null,null,null,{ fileName : "TestOrderedMap.hx", lineNumber : 57, className : "thx.TestOrderedMap", methodName : "testGetOption"});
	}
	,testToTuples: function() {
		var m = new thx_StringOrderedMap();
		m.set("foo",10);
		m.set("bar",20);
		m.insert(2,"baz",30);
		var tuples = m.tuples();
		utest_Assert.same("foo",tuples[0]._0,null,null,null,{ fileName : "TestOrderedMap.hx", lineNumber : 68, className : "thx.TestOrderedMap", methodName : "testToTuples"});
		utest_Assert.same(20,tuples[1]._1,null,null,null,{ fileName : "TestOrderedMap.hx", lineNumber : 69, className : "thx.TestOrderedMap", methodName : "testToTuples"});
		utest_Assert.same("baz",tuples[2]._0,null,null,null,{ fileName : "TestOrderedMap.hx", lineNumber : 70, className : "thx.TestOrderedMap", methodName : "testToTuples"});
		utest_Assert.same(30,tuples[2]._1,null,null,null,{ fileName : "TestOrderedMap.hx", lineNumber : 71, className : "thx.TestOrderedMap", methodName : "testToTuples"});
	}
	,testAbstract: function() {
		var ml = new thx_StringOrderedMap();
		ml.setValue("k","value");
		utest_Assert.equals("value",ml.get("k"),null,{ fileName : "TestOrderedMap.hx", lineNumber : 77, className : "thx.TestOrderedMap", methodName : "testAbstract"});
		utest_Assert.equals("value",ml.at(0),null,{ fileName : "TestOrderedMap.hx", lineNumber : 78, className : "thx.TestOrderedMap", methodName : "testAbstract"});
		utest_Assert.equals("value",ml.at(0),null,{ fileName : "TestOrderedMap.hx", lineNumber : 79, className : "thx.TestOrderedMap", methodName : "testAbstract"});
		(function(m) {
			utest_Assert.equals("value",m.get("k"),null,{ fileName : "TestOrderedMap.hx", lineNumber : 82, className : "thx.TestOrderedMap", methodName : "testAbstract"});
		})(ml);
		utest_Assert.notNull(new thx_IntOrderedMap(),null,{ fileName : "TestOrderedMap.hx", lineNumber : 86, className : "thx.TestOrderedMap", methodName : "testAbstract"});
		utest_Assert.notNull(new thx_EnumValueOrderedMap(),null,{ fileName : "TestOrderedMap.hx", lineNumber : 87, className : "thx.TestOrderedMap", methodName : "testAbstract"});
		utest_Assert.notNull(new thx_ObjectOrderedMap(),null,{ fileName : "TestOrderedMap.hx", lineNumber : 88, className : "thx.TestOrderedMap", methodName : "testAbstract"});
	}
	,testEmpty: function() {
		var ml = new thx_StringOrderedMap();
		ml.setValue("k","value");
		utest_Assert.isNull(ml.empty().get("k"),null,{ fileName : "TestOrderedMap.hx", lineNumber : 95, className : "thx.TestOrderedMap", methodName : "testEmpty"});
	}
	,testCopyTo: function() {
		var ml = new thx_StringOrderedMap();
		ml.setValue("k","value");
		var e = ml.empty();
		var tmp = ml.keys();
		while(tmp.hasNext()) {
			var key = tmp.next();
			e.set(key,ml.get(key));
		}
		utest_Assert.equals("value",e.get("k"),null,{ fileName : "TestOrderedMap.hx", lineNumber : 103, className : "thx.TestOrderedMap", methodName : "testCopyTo"});
	}
	,testClone: function() {
		var ml = new thx_StringOrderedMap();
		ml.setValue("k","value");
		var that = ml.empty();
		var tmp = ml.keys();
		while(tmp.hasNext()) {
			var key = tmp.next();
			that.set(key,ml.get(key));
		}
		utest_Assert.equals("value",that.get("k"),null,{ fileName : "TestOrderedMap.hx", lineNumber : 110, className : "thx.TestOrderedMap", methodName : "testClone"});
	}
	,__class__: thx_TestOrderedMap
};
var thx_TestOrderedSet = function() {
};
thx_TestOrderedSet.__name__ = ["thx","TestOrderedSet"];
thx_TestOrderedSet.prototype = {
	testCreate: function() {
		var set = thx__$OrderedSet_OrderedSet_$Impl_$.create();
		utest_Assert.equals(0,set.length,null,{ fileName : "TestOrderedSet.hx", lineNumber : 10, className : "thx.TestOrderedSet", methodName : "testCreate"});
		thx__$OrderedSet_OrderedSet_$Impl_$.add(set,1);
		thx__$OrderedSet_OrderedSet_$Impl_$.add(set,1);
		utest_Assert.equals(1,set.length,null,{ fileName : "TestOrderedSet.hx", lineNumber : 13, className : "thx.TestOrderedSet", methodName : "testCreate"});
	}
	,testOrderedSet: function() {
		utest_Assert.same([1,2,3],thx__$OrderedSet_OrderedSet_$Impl_$.toArray(thx__$OrderedSet_OrderedSet_$Impl_$.toOrderedSet([1,2,2,2,3])),null,null,null,{ fileName : "TestOrderedSet.hx", lineNumber : 18, className : "thx.TestOrderedSet", methodName : "testOrderedSet"});
	}
	,testUnion: function() {
		utest_Assert.same([1,2,3,4],thx__$OrderedSet_OrderedSet_$Impl_$.toArray(thx__$OrderedSet_OrderedSet_$Impl_$.toOrderedSet(thx__$OrderedSet_OrderedSet_$Impl_$.toOrderedSet([1,2,3]).concat(thx__$OrderedSet_OrderedSet_$Impl_$.toArray(thx__$OrderedSet_OrderedSet_$Impl_$.toOrderedSet([2,2,4]))))),null,null,null,{ fileName : "TestOrderedSet.hx", lineNumber : 24, className : "thx.TestOrderedSet", methodName : "testUnion"});
	}
	,testDifference: function() {
		var s1 = thx__$OrderedSet_OrderedSet_$Impl_$.toOrderedSet([1,2,3]);
		var s2 = thx__$OrderedSet_OrderedSet_$Impl_$.toOrderedSet([2,2,4]);
		var result = s1.slice();
		var tmp = HxOverrides.iter(s2);
		while(tmp.hasNext()) HxOverrides.remove(result,tmp.next());
		utest_Assert.same([1,3],thx__$OrderedSet_OrderedSet_$Impl_$.toArray(result),null,null,null,{ fileName : "TestOrderedSet.hx", lineNumber : 30, className : "thx.TestOrderedSet", methodName : "testDifference"});
	}
	,testBooleans: function() {
		var this1 = thx__$OrderedSet_OrderedSet_$Impl_$.toOrderedSet(thx__$OrderedSet_OrderedSet_$Impl_$.toOrderedSet([1,2,3]).concat(thx__$OrderedSet_OrderedSet_$Impl_$.toArray(thx__$OrderedSet_OrderedSet_$Impl_$.toOrderedSet([2,3,4]))));
		var set = thx__$OrderedSet_OrderedSet_$Impl_$.toOrderedSet([2,3]);
		var result = this1.slice();
		var tmp = HxOverrides.iter(set);
		while(tmp.hasNext()) HxOverrides.remove(result,tmp.next());
		utest_Assert.same([1,4],result,null,null,null,{ fileName : "TestOrderedSet.hx", lineNumber : 35, className : "thx.TestOrderedSet", methodName : "testBooleans"});
	}
	,__class__: thx_TestOrderedSet
};
var thx_TestPath = function() {
};
thx_TestPath.__name__ = ["thx","TestPath"];
thx_TestPath.prototype = {
	testIsRelativeAndIsAbsolute: function() {
		var rel = thx__$Path_Path_$Impl_$.fromString("a/b");
		var abs = thx__$Path_Path_$Impl_$.fromString("/a/b");
		utest_Assert.isTrue(rel[1] == "",null,{ fileName : "TestPath.hx", lineNumber : 13, className : "thx.TestPath", methodName : "testIsRelativeAndIsAbsolute"});
		utest_Assert.isFalse(rel[1] != "",null,{ fileName : "TestPath.hx", lineNumber : 14, className : "thx.TestPath", methodName : "testIsRelativeAndIsAbsolute"});
		utest_Assert.isTrue(abs[1] != "",null,{ fileName : "TestPath.hx", lineNumber : 15, className : "thx.TestPath", methodName : "testIsRelativeAndIsAbsolute"});
		utest_Assert.isFalse(abs[1] == "",null,{ fileName : "TestPath.hx", lineNumber : 16, className : "thx.TestPath", methodName : "testIsRelativeAndIsAbsolute"});
	}
	,testPathTo: function() {
		var path1 = thx__$Path_Path_$Impl_$.fromString("/a/b/c");
		var path2 = thx__$Path_Path_$Impl_$.fromString("/a/d");
		var path3 = thx__$Path_Path_$Impl_$.fromString("/x/y/z");
		var path4 = thx__$Path_Path_$Impl_$.fromString("a/b/c");
		var path5 = thx__$Path_Path_$Impl_$.fromString("x/y/z");
		utest_Assert.equals("../../d",thx__$Path_Path_$Impl_$.toString(thx__$Path_Path_$Impl_$.pathTo(path1,path2)),null,{ fileName : "TestPath.hx", lineNumber : 25, className : "thx.TestPath", methodName : "testPathTo"});
		utest_Assert.equals("../../../x/y/z",thx__$Path_Path_$Impl_$.toString(thx__$Path_Path_$Impl_$.pathTo(path1,path3)),null,{ fileName : "TestPath.hx", lineNumber : 26, className : "thx.TestPath", methodName : "testPathTo"});
		utest_Assert.equals("../b/c",thx__$Path_Path_$Impl_$.toString(thx__$Path_Path_$Impl_$.pathTo(path2,path1)),null,{ fileName : "TestPath.hx", lineNumber : 27, className : "thx.TestPath", methodName : "testPathTo"});
		utest_Assert.equals("/a/b/c/a/b/c",thx__$Path_Path_$Impl_$.toString(thx__$Path_Path_$Impl_$.pathTo(path1,path4)),null,{ fileName : "TestPath.hx", lineNumber : 29, className : "thx.TestPath", methodName : "testPathTo"});
		utest_Assert.equals("/a/d",thx__$Path_Path_$Impl_$.toString(thx__$Path_Path_$Impl_$.pathTo(path5,path2)),null,{ fileName : "TestPath.hx", lineNumber : 30, className : "thx.TestPath", methodName : "testPathTo"});
		utest_Assert.equals("a/b/c/x/y/z",thx__$Path_Path_$Impl_$.toString(thx__$Path_Path_$Impl_$.pathTo(path4,path5)),null,{ fileName : "TestPath.hx", lineNumber : 31, className : "thx.TestPath", methodName : "testPathTo"});
	}
	,testUp: function() {
		utest_Assert.equals("/a/b",thx__$Path_Path_$Impl_$.toString(thx__$Path_Path_$Impl_$.up(thx__$Path_Path_$Impl_$.fromString("/a/b/c/"))),null,{ fileName : "TestPath.hx", lineNumber : 35, className : "thx.TestPath", methodName : "testUp"});
		utest_Assert.equals("/",thx__$Path_Path_$Impl_$.toString(thx__$Path_Path_$Impl_$.up(thx__$Path_Path_$Impl_$.fromString("/a"),2)),null,{ fileName : "TestPath.hx", lineNumber : 36, className : "thx.TestPath", methodName : "testUp"});
	}
	,testDir: function() {
		utest_Assert.equals("/a/b",thx__$Path_Path_$Impl_$.dir(thx__$Path_Path_$Impl_$.fromString("/a/b/c")),null,{ fileName : "TestPath.hx", lineNumber : 40, className : "thx.TestPath", methodName : "testDir"});
		utest_Assert.equals("a/b",thx__$Path_Path_$Impl_$.dir(thx__$Path_Path_$Impl_$.fromString("a/b/c")),null,{ fileName : "TestPath.hx", lineNumber : 41, className : "thx.TestPath", methodName : "testDir"});
		utest_Assert.equals(".",thx__$Path_Path_$Impl_$.dir(thx__$Path_Path_$Impl_$.fromString("a")),null,{ fileName : "TestPath.hx", lineNumber : 42, className : "thx.TestPath", methodName : "testDir"});
		utest_Assert.equals(".",thx__$Path_Path_$Impl_$.dir(thx__$Path_Path_$Impl_$.fromString("..")),null,{ fileName : "TestPath.hx", lineNumber : 43, className : "thx.TestPath", methodName : "testDir"});
	}
	,testBase: function() {
		var path = thx__$Path_Path_$Impl_$.fromString("/a/b.c");
		utest_Assert.equals("b.c",thx__$Path_Path_$Impl_$.base(path),null,{ fileName : "TestPath.hx", lineNumber : 48, className : "thx.TestPath", methodName : "testBase"});
		utest_Assert.equals("b",thx__$Path_Path_$Impl_$.base(path,".c"),null,{ fileName : "TestPath.hx", lineNumber : 49, className : "thx.TestPath", methodName : "testBase"});
		utest_Assert.equals("b.",thx__$Path_Path_$Impl_$.base(path,"c"),null,{ fileName : "TestPath.hx", lineNumber : 50, className : "thx.TestPath", methodName : "testBase"});
		utest_Assert.equals("b.c",thx__$Path_Path_$Impl_$.base(path,".d"),null,{ fileName : "TestPath.hx", lineNumber : 51, className : "thx.TestPath", methodName : "testBase"});
	}
	,testExt: function() {
		thx__$Path_Path_$Impl_$.fromString("");
		utest_Assert.equals("c",thx__$Path_Path_$Impl_$.ext(thx__$Path_Path_$Impl_$.fromString("/a/b.c")),null,{ fileName : "TestPath.hx", lineNumber : 56, className : "thx.TestPath", methodName : "testExt"});
		utest_Assert.equals("",thx__$Path_Path_$Impl_$.ext(thx__$Path_Path_$Impl_$.fromString("/a/b/c")),null,{ fileName : "TestPath.hx", lineNumber : 57, className : "thx.TestPath", methodName : "testExt"});
	}
	,testSep: function() {
		var path = thx__$Path_Path_$Impl_$.fromString("/path/to/file.png");
		var win = thx__$Path_Path_$Impl_$.toWin32(path,"C:");
		utest_Assert.equals("/",path[0],null,{ fileName : "TestPath.hx", lineNumber : 63, className : "thx.TestPath", methodName : "testSep"});
		utest_Assert.equals("\\",win[0],null,{ fileName : "TestPath.hx", lineNumber : 64, className : "thx.TestPath", methodName : "testSep"});
		utest_Assert.isTrue(path[0] == "/",null,{ fileName : "TestPath.hx", lineNumber : 65, className : "thx.TestPath", methodName : "testSep"});
		utest_Assert.isFalse(path[0] == "\\",null,{ fileName : "TestPath.hx", lineNumber : 66, className : "thx.TestPath", methodName : "testSep"});
		utest_Assert.isTrue(win[0] == "\\",null,{ fileName : "TestPath.hx", lineNumber : 67, className : "thx.TestPath", methodName : "testSep"});
		utest_Assert.isFalse(win[0] == "/",null,{ fileName : "TestPath.hx", lineNumber : 68, className : "thx.TestPath", methodName : "testSep"});
	}
	,testJoin: function() {
		utest_Assert.equals("/a/b/c",thx__$Path_Path_$Impl_$.toString(thx__$Path_Path_$Impl_$.join(thx__$Path_Path_$Impl_$.fromString("/a/x"),thx__$Path_Path_$Impl_$.fromString("../b/c"))),null,{ fileName : "TestPath.hx", lineNumber : 72, className : "thx.TestPath", methodName : "testJoin"});
		utest_Assert.equals("../b/c",thx__$Path_Path_$Impl_$.toString(thx__$Path_Path_$Impl_$.join(thx__$Path_Path_$Impl_$.fromString("../x"),thx__$Path_Path_$Impl_$.fromString("../b/c"))),null,{ fileName : "TestPath.hx", lineNumber : 73, className : "thx.TestPath", methodName : "testJoin"});
		utest_Assert.equals("/b/c",thx__$Path_Path_$Impl_$.toString(thx__$Path_Path_$Impl_$.join(thx__$Path_Path_$Impl_$.fromString("/a/x"),thx__$Path_Path_$Impl_$.fromString("/b/c"))),null,{ fileName : "TestPath.hx", lineNumber : 74, className : "thx.TestPath", methodName : "testJoin"});
	}
	,testJoinString: function() {
		utest_Assert.equals("/a/b/c",thx__$Path_Path_$Impl_$.toString(thx__$Path_Path_$Impl_$.join(thx__$Path_Path_$Impl_$.fromString("/a/b"),thx__$Path_Path_$Impl_$.fromString("c"))),null,{ fileName : "TestPath.hx", lineNumber : 78, className : "thx.TestPath", methodName : "testJoinString"});
		utest_Assert.equals("../d",thx__$Path_Path_$Impl_$.toString(thx__$Path_Path_$Impl_$.join(thx__$Path_Path_$Impl_$.fromString("../x"),thx__$Path_Path_$Impl_$.fromString("../d"))),null,{ fileName : "TestPath.hx", lineNumber : 79, className : "thx.TestPath", methodName : "testJoinString"});
	}
	,testToWin32ToNix: function() {
		var path = thx__$Path_Path_$Impl_$.fromString("/path/to/file.png");
		var win = thx__$Path_Path_$Impl_$.toWin32(path);
		utest_Assert.equals("C:\\path\\to\\file.png",thx__$Path_Path_$Impl_$.toString(win),null,{ fileName : "TestPath.hx", lineNumber : 85, className : "thx.TestPath", methodName : "testToWin32ToNix"});
		utest_Assert.equals("/path/to/file.png",thx__$Path_Path_$Impl_$.toString(thx__$Path_Path_$Impl_$.toNix(win)),null,{ fileName : "TestPath.hx", lineNumber : 86, className : "thx.TestPath", methodName : "testToWin32ToNix"});
		path = thx__$Path_Path_$Impl_$.fromString("path/to/file.png");
		win = thx__$Path_Path_$Impl_$.toWin32(path);
		utest_Assert.equals("path\\to\\file.png",thx__$Path_Path_$Impl_$.toString(win),null,{ fileName : "TestPath.hx", lineNumber : 90, className : "thx.TestPath", methodName : "testToWin32ToNix"});
		utest_Assert.equals("path/to/file.png",thx__$Path_Path_$Impl_$.toString(thx__$Path_Path_$Impl_$.toNix(win)),null,{ fileName : "TestPath.hx", lineNumber : 91, className : "thx.TestPath", methodName : "testToWin32ToNix"});
	}
	,testNormalization: function() {
		utest_Assert.equals("c",thx__$Path_Path_$Impl_$.toString(thx__$Path_Path_$Impl_$.fromString("a/.././b/../c/.")),null,{ fileName : "TestPath.hx", lineNumber : 95, className : "thx.TestPath", methodName : "testNormalization"});
		utest_Assert.equals("a/c",thx__$Path_Path_$Impl_$.toString(thx__$Path_Path_$Impl_$.fromString("a/./b/../c/.")),null,{ fileName : "TestPath.hx", lineNumber : 96, className : "thx.TestPath", methodName : "testNormalization"});
		utest_Assert.equals("/b/c",thx__$Path_Path_$Impl_$.toString(thx__$Path_Path_$Impl_$.fromString("/a/.././b/./c/.")),null,{ fileName : "TestPath.hx", lineNumber : 97, className : "thx.TestPath", methodName : "testNormalization"});
		utest_Assert.equals("../../c",thx__$Path_Path_$Impl_$.toString(thx__$Path_Path_$Impl_$.fromString("a/../../../b/../c/.")),null,{ fileName : "TestPath.hx", lineNumber : 98, className : "thx.TestPath", methodName : "testNormalization"});
	}
	,testToString: function() {
		utest_Assert.equals(".",thx__$Path_Path_$Impl_$.toString(thx__$Path_Path_$Impl_$.fromString(".")),null,{ fileName : "TestPath.hx", lineNumber : 102, className : "thx.TestPath", methodName : "testToString"});
		utest_Assert.equals("..",thx__$Path_Path_$Impl_$.toString(thx__$Path_Path_$Impl_$.fromString("..")),null,{ fileName : "TestPath.hx", lineNumber : 103, className : "thx.TestPath", methodName : "testToString"});
		utest_Assert.equals("..",thx__$Path_Path_$Impl_$.toString(thx__$Path_Path_$Impl_$.fromString("../")),null,{ fileName : "TestPath.hx", lineNumber : 104, className : "thx.TestPath", methodName : "testToString"});
		utest_Assert.equals("/",thx__$Path_Path_$Impl_$.toString(thx__$Path_Path_$Impl_$.fromString("/../")),null,{ fileName : "TestPath.hx", lineNumber : 105, className : "thx.TestPath", methodName : "testToString"});
		utest_Assert.equals("/",thx__$Path_Path_$Impl_$.toString(thx__$Path_Path_$Impl_$.fromString("/")),null,{ fileName : "TestPath.hx", lineNumber : 106, className : "thx.TestPath", methodName : "testToString"});
		utest_Assert.equals("/a/a",thx__$Path_Path_$Impl_$.toString(thx__$Path_Path_$Impl_$.fromString("/a///a")),null,{ fileName : "TestPath.hx", lineNumber : 107, className : "thx.TestPath", methodName : "testToString"});
		utest_Assert.equals("/a/a",thx__$Path_Path_$Impl_$.toString(thx__$Path_Path_$Impl_$.fromString("/a/a/")),null,{ fileName : "TestPath.hx", lineNumber : 108, className : "thx.TestPath", methodName : "testToString"});
		utest_Assert.equals(".",thx__$Path_Path_$Impl_$.toString(thx__$Path_Path_$Impl_$.fromString("a/..")),null,{ fileName : "TestPath.hx", lineNumber : 109, className : "thx.TestPath", methodName : "testToString"});
		utest_Assert.equals("a",thx__$Path_Path_$Impl_$.toString(thx__$Path_Path_$Impl_$.fromString("a")),null,{ fileName : "TestPath.hx", lineNumber : 110, className : "thx.TestPath", methodName : "testToString"});
	}
	,testNormalize: function() {
		var p = ["/","/","a/*>b"];
		utest_Assert.isFalse(thx__$Path_Path_$Impl_$.isValid(p),null,{ fileName : "TestPath.hx", lineNumber : 115, className : "thx.TestPath", methodName : "testNormalize"});
		p = thx__$Path_Path_$Impl_$.normalize(p);
		utest_Assert.isTrue(thx__$Path_Path_$Impl_$.isValid(p),null,{ fileName : "TestPath.hx", lineNumber : 117, className : "thx.TestPath", methodName : "testNormalize"});
		utest_Assert.equals("/a_*>b",thx__$Path_Path_$Impl_$.toString(p),null,{ fileName : "TestPath.hx", lineNumber : 118, className : "thx.TestPath", methodName : "testNormalize"});
		p = thx__$Path_Path_$Impl_$.toWin32(p);
		utest_Assert.isFalse(thx__$Path_Path_$Impl_$.isValid(p),null,{ fileName : "TestPath.hx", lineNumber : 120, className : "thx.TestPath", methodName : "testNormalize"});
		p = thx__$Path_Path_$Impl_$.normalize(p);
		utest_Assert.isTrue(thx__$Path_Path_$Impl_$.isValid(p),null,{ fileName : "TestPath.hx", lineNumber : 122, className : "thx.TestPath", methodName : "testNormalize"});
		utest_Assert.equals("C:\\a___b",thx__$Path_Path_$Impl_$.toString(p),null,{ fileName : "TestPath.hx", lineNumber : 123, className : "thx.TestPath", methodName : "testNormalize"});
	}
	,testRoot: function() {
		var root = thx__$Path_Path_$Impl_$.fromString("C:\\");
		utest_Assert.isFalse(root[0] == "/",null,{ fileName : "TestPath.hx", lineNumber : 128, className : "thx.TestPath", methodName : "testRoot"});
		utest_Assert.isTrue(root[0] == "\\",null,{ fileName : "TestPath.hx", lineNumber : 129, className : "thx.TestPath", methodName : "testRoot"});
		utest_Assert.isTrue(root[1] != "",null,{ fileName : "TestPath.hx", lineNumber : 130, className : "thx.TestPath", methodName : "testRoot"});
		utest_Assert.isFalse(root[1] == "",null,{ fileName : "TestPath.hx", lineNumber : 131, className : "thx.TestPath", methodName : "testRoot"});
		utest_Assert.isTrue(thx__$Path_Path_$Impl_$.isRoot(root),null,{ fileName : "TestPath.hx", lineNumber : 132, className : "thx.TestPath", methodName : "testRoot"});
		utest_Assert.equals("C:\\",thx__$Path_Path_$Impl_$.toString(root),null,{ fileName : "TestPath.hx", lineNumber : 133, className : "thx.TestPath", methodName : "testRoot"});
		utest_Assert.equals(".",thx__$Path_Path_$Impl_$.toString([root[0],""].concat(thx__$Path_Path_$Impl_$.resolve(root.slice(2),false))),null,{ fileName : "TestPath.hx", lineNumber : 134, className : "thx.TestPath", methodName : "testRoot"});
		root = thx__$Path_Path_$Impl_$.fromString("/");
		utest_Assert.isTrue(root[0] == "/",null,{ fileName : "TestPath.hx", lineNumber : 137, className : "thx.TestPath", methodName : "testRoot"});
		utest_Assert.isFalse(root[0] == "\\",null,{ fileName : "TestPath.hx", lineNumber : 138, className : "thx.TestPath", methodName : "testRoot"});
		utest_Assert.isTrue(root[1] != "",null,{ fileName : "TestPath.hx", lineNumber : 139, className : "thx.TestPath", methodName : "testRoot"});
		utest_Assert.isFalse(root[1] == "",null,{ fileName : "TestPath.hx", lineNumber : 140, className : "thx.TestPath", methodName : "testRoot"});
		utest_Assert.isTrue(thx__$Path_Path_$Impl_$.isRoot(root),null,{ fileName : "TestPath.hx", lineNumber : 141, className : "thx.TestPath", methodName : "testRoot"});
		utest_Assert.equals("/",thx__$Path_Path_$Impl_$.toString(root),null,{ fileName : "TestPath.hx", lineNumber : 142, className : "thx.TestPath", methodName : "testRoot"});
		utest_Assert.equals(".",thx__$Path_Path_$Impl_$.toString([root[0],""].concat(thx__$Path_Path_$Impl_$.resolve(root.slice(2),false))),null,{ fileName : "TestPath.hx", lineNumber : 143, className : "thx.TestPath", methodName : "testRoot"});
	}
	,__class__: thx_TestPath
};
var thx_TestQueryString = function() {
};
thx_TestQueryString.__name__ = ["thx","TestQueryString"];
thx_TestQueryString.prototype = {
	testBasics: function() {
		utest_Assert.same({ foo : "bar"},thx__$QueryString_QueryString_$Impl_$.toObject(thx__$QueryString_QueryString_$Impl_$.parseWithSymbols("?foo=bar",thx__$QueryString_QueryString_$Impl_$.separator,thx__$QueryString_QueryString_$Impl_$.assignment,thx__$QueryString_QueryString_$Impl_$.decodeURIComponent)),null,null,null,{ fileName : "TestQueryString.hx", lineNumber : 10, className : "thx.TestQueryString", methodName : "testBasics"});
		utest_Assert.same({ foo : "bar"},thx__$QueryString_QueryString_$Impl_$.toObject(thx__$QueryString_QueryString_$Impl_$.parseWithSymbols("#foo=bar",thx__$QueryString_QueryString_$Impl_$.separator,thx__$QueryString_QueryString_$Impl_$.assignment,thx__$QueryString_QueryString_$Impl_$.decodeURIComponent)),null,null,null,{ fileName : "TestQueryString.hx", lineNumber : 15, className : "thx.TestQueryString", methodName : "testBasics"});
		utest_Assert.same({ foo : "bar"},thx__$QueryString_QueryString_$Impl_$.toObject(thx__$QueryString_QueryString_$Impl_$.parseWithSymbols("foo=bar",thx__$QueryString_QueryString_$Impl_$.separator,thx__$QueryString_QueryString_$Impl_$.assignment,thx__$QueryString_QueryString_$Impl_$.decodeURIComponent)),null,null,null,{ fileName : "TestQueryString.hx", lineNumber : 20, className : "thx.TestQueryString", methodName : "testBasics"});
		utest_Assert.same({ foo : null},thx__$QueryString_QueryString_$Impl_$.toObject(thx__$QueryString_QueryString_$Impl_$.parseWithSymbols("foo",thx__$QueryString_QueryString_$Impl_$.separator,thx__$QueryString_QueryString_$Impl_$.assignment,thx__$QueryString_QueryString_$Impl_$.decodeURIComponent)),null,null,null,{ fileName : "TestQueryString.hx", lineNumber : 25, className : "thx.TestQueryString", methodName : "testBasics"});
		utest_Assert.equals("foo",thx__$QueryString_QueryString_$Impl_$.toStringWithSymbols(thx__$QueryString_QueryString_$Impl_$.parseWithSymbols("foo",thx__$QueryString_QueryString_$Impl_$.separator,thx__$QueryString_QueryString_$Impl_$.assignment,thx__$QueryString_QueryString_$Impl_$.decodeURIComponent),thx__$QueryString_QueryString_$Impl_$.separator,thx__$QueryString_QueryString_$Impl_$.assignment,thx__$QueryString_QueryString_$Impl_$.encodeURIComponent),null,{ fileName : "TestQueryString.hx", lineNumber : 30, className : "thx.TestQueryString", methodName : "testBasics"});
		utest_Assert.same({ foo : null, key : null},thx__$QueryString_QueryString_$Impl_$.toObject(thx__$QueryString_QueryString_$Impl_$.parseWithSymbols("foo&key",thx__$QueryString_QueryString_$Impl_$.separator,thx__$QueryString_QueryString_$Impl_$.assignment,thx__$QueryString_QueryString_$Impl_$.decodeURIComponent)),null,null,null,{ fileName : "TestQueryString.hx", lineNumber : 35, className : "thx.TestQueryString", methodName : "testBasics"});
		utest_Assert.same({ foo : "bar", key : null},thx__$QueryString_QueryString_$Impl_$.toObject(thx__$QueryString_QueryString_$Impl_$.parseWithSymbols("foo=bar&key",thx__$QueryString_QueryString_$Impl_$.separator,thx__$QueryString_QueryString_$Impl_$.assignment,thx__$QueryString_QueryString_$Impl_$.decodeURIComponent)),null,null,null,{ fileName : "TestQueryString.hx", lineNumber : 40, className : "thx.TestQueryString", methodName : "testBasics"});
		utest_Assert.same({ },thx__$QueryString_QueryString_$Impl_$.toObject(thx__$QueryString_QueryString_$Impl_$.parseWithSymbols("?",thx__$QueryString_QueryString_$Impl_$.separator,thx__$QueryString_QueryString_$Impl_$.assignment,thx__$QueryString_QueryString_$Impl_$.decodeURIComponent)),null,null,null,{ fileName : "TestQueryString.hx", lineNumber : 45, className : "thx.TestQueryString", methodName : "testBasics"});
		utest_Assert.same({ },thx__$QueryString_QueryString_$Impl_$.toObject(thx__$QueryString_QueryString_$Impl_$.parseWithSymbols("#",thx__$QueryString_QueryString_$Impl_$.separator,thx__$QueryString_QueryString_$Impl_$.assignment,thx__$QueryString_QueryString_$Impl_$.decodeURIComponent)),null,null,null,{ fileName : "TestQueryString.hx", lineNumber : 50, className : "thx.TestQueryString", methodName : "testBasics"});
		utest_Assert.same({ },thx__$QueryString_QueryString_$Impl_$.toObject(thx__$QueryString_QueryString_$Impl_$.parseWithSymbols(" ",thx__$QueryString_QueryString_$Impl_$.separator,thx__$QueryString_QueryString_$Impl_$.assignment,thx__$QueryString_QueryString_$Impl_$.decodeURIComponent)),null,null,null,{ fileName : "TestQueryString.hx", lineNumber : 55, className : "thx.TestQueryString", methodName : "testBasics"});
		utest_Assert.same({ foo : ["bar","baz"]},thx__$QueryString_QueryString_$Impl_$.toObject(thx__$QueryString_QueryString_$Impl_$.parseWithSymbols("foo=bar&foo=baz",thx__$QueryString_QueryString_$Impl_$.separator,thx__$QueryString_QueryString_$Impl_$.assignment,thx__$QueryString_QueryString_$Impl_$.decodeURIComponent)),null,null,null,{ fileName : "TestQueryString.hx", lineNumber : 60, className : "thx.TestQueryString", methodName : "testBasics"});
		utest_Assert.same({ 'foo faz' : "bar baz  "},thx__$QueryString_QueryString_$Impl_$.toObject(thx__$QueryString_QueryString_$Impl_$.parseWithSymbols("foo+faz=bar+baz++",thx__$QueryString_QueryString_$Impl_$.separator,thx__$QueryString_QueryString_$Impl_$.assignment,thx__$QueryString_QueryString_$Impl_$.decodeURIComponent)),null,null,null,{ fileName : "TestQueryString.hx", lineNumber : 65, className : "thx.TestQueryString", methodName : "testBasics"});
		utest_Assert.equals("foo=bar",thx__$QueryString_QueryString_$Impl_$.toStringWithSymbols(thx__$QueryString_QueryString_$Impl_$.fromObject({ foo : "bar"}),thx__$QueryString_QueryString_$Impl_$.separator,thx__$QueryString_QueryString_$Impl_$.assignment,thx__$QueryString_QueryString_$Impl_$.encodeURIComponent),null,{ fileName : "TestQueryString.hx", lineNumber : 70, className : "thx.TestQueryString", methodName : "testBasics"});
		var qs = thx__$QueryString_QueryString_$Impl_$.fromObject({ foo : "bar", bar : "baz"});
		var _this = qs;
		utest_Assert.same(["bar"],__map_reserved.foo != null?_this.getReserved("foo"):_this.h["foo"],null,null,null,{ fileName : "TestQueryString.hx", lineNumber : 76, className : "thx.TestQueryString", methodName : "testBasics"});
		var _this1 = qs;
		utest_Assert.same(["baz"],__map_reserved.bar != null?_this1.getReserved("bar"):_this1.h["bar"],null,null,null,{ fileName : "TestQueryString.hx", lineNumber : 77, className : "thx.TestQueryString", methodName : "testBasics"});
		var qs1 = thx__$QueryString_QueryString_$Impl_$.toStringWithSymbols(thx__$QueryString_QueryString_$Impl_$.fromObject({ 'foo bar' : "baz faz"}),thx__$QueryString_QueryString_$Impl_$.separator,thx__$QueryString_QueryString_$Impl_$.assignment,thx__$QueryString_QueryString_$Impl_$.encodeURIComponent);
		utest_Assert.isTrue("foo%20bar=baz%20faz" == qs1 || "foo+bar=baz+faz" == qs1,null,{ fileName : "TestQueryString.hx", lineNumber : 80, className : "thx.TestQueryString", methodName : "testBasics"});
		var qs2 = thx__$QueryString_QueryString_$Impl_$.toStringWithSymbols(thx__$QueryString_QueryString_$Impl_$.fromObject({ abc : "abc", foo : ["bar","baz"]}),thx__$QueryString_QueryString_$Impl_$.separator,thx__$QueryString_QueryString_$Impl_$.assignment,thx__$QueryString_QueryString_$Impl_$.encodeURIComponent);
		utest_Assert.isTrue("abc=abc&foo=bar&foo=baz" == qs2 || "foo=bar&abc=abc&foo=baz" == qs2 || "foo=bar&foo=baz&abc=abc" == qs2 || "abc=abc&foo=baz&foo=bar" == qs2 || "foo=bar&abc=abc&foo=baz" == qs2 || "foo=bar&foo=baz&abc=abc" == qs2,null,{ fileName : "TestQueryString.hx", lineNumber : 86, className : "thx.TestQueryString", methodName : "testBasics"});
		var qs3 = thx__$QueryString_QueryString_$Impl_$.toStringWithSymbols(thx__$QueryString_QueryString_$Impl_$.parseWithSymbols("a=b&c=d",thx__$QueryString_QueryString_$Impl_$.separator,thx__$QueryString_QueryString_$Impl_$.assignment,thx__$QueryString_QueryString_$Impl_$.decodeURIComponent),thx__$QueryString_QueryString_$Impl_$.separator,thx__$QueryString_QueryString_$Impl_$.assignment,thx__$QueryString_QueryString_$Impl_$.encodeURIComponent);
		utest_Assert.isTrue("a=b&c=d" == qs3 || "c=d&a=b" == qs3,null,{ fileName : "TestQueryString.hx", lineNumber : 96, className : "thx.TestQueryString", methodName : "testBasics"});
	}
	,__class__: thx_TestQueryString
};
var thx_TestRational = function() {
};
thx_TestRational.__name__ = ["thx","TestRational"];
thx_TestRational.prototype = {
	testOperations: function() {
		var x;
		var y;
		x = thx__$Rational_Rational_$Impl_$.create(thx_bigint_Bigs.fromInt(1),thx_bigint_Bigs.fromInt(2));
		y = thx__$Rational_Rational_$Impl_$.create(thx_bigint_Bigs.fromInt(1),thx_bigint_Bigs.fromInt(3));
		utest_Assert.equals("5/6",thx__$Rational_Rational_$Impl_$.toString(thx__$Rational_Rational_$Impl_$.add(x,y)),null,{ fileName : "TestRational.hx", lineNumber : 16, className : "thx.TestRational", methodName : "testOperations"});
		x = thx__$Rational_Rational_$Impl_$.create(thx_bigint_Bigs.fromInt(8),thx_bigint_Bigs.fromInt(9));
		y = thx__$Rational_Rational_$Impl_$.create(thx_bigint_Bigs.fromInt(1),thx_bigint_Bigs.fromInt(9));
		utest_Assert.equals("1",thx__$Rational_Rational_$Impl_$.toString(thx__$Rational_Rational_$Impl_$.add(x,y)),null,{ fileName : "TestRational.hx", lineNumber : 21, className : "thx.TestRational", methodName : "testOperations"});
		x = thx__$Rational_Rational_$Impl_$.create(thx_bigint_Bigs.fromInt(1),thx_bigint_Bigs.fromInt(200000000));
		y = thx__$Rational_Rational_$Impl_$.create(thx_bigint_Bigs.fromInt(1),thx_bigint_Bigs.fromInt(300000000));
		utest_Assert.equals("1/120000000",thx__$Rational_Rational_$Impl_$.toString(thx__$Rational_Rational_$Impl_$.add(x,y)),null,{ fileName : "TestRational.hx", lineNumber : 26, className : "thx.TestRational", methodName : "testOperations"});
		x = thx__$Rational_Rational_$Impl_$.create(thx_bigint_Bigs.fromInt(1073741789),thx_bigint_Bigs.fromInt(20));
		y = thx__$Rational_Rational_$Impl_$.create(thx_bigint_Bigs.fromInt(1073741789),thx_bigint_Bigs.fromInt(30));
		utest_Assert.equals("1073741789/12",thx__$Rational_Rational_$Impl_$.toString(thx__$Rational_Rational_$Impl_$.add(x,y)),null,{ fileName : "TestRational.hx", lineNumber : 31, className : "thx.TestRational", methodName : "testOperations"});
		x = thx__$Rational_Rational_$Impl_$.create(thx_bigint_Bigs.fromInt(4),thx_bigint_Bigs.fromInt(17));
		y = thx__$Rational_Rational_$Impl_$.create(thx_bigint_Bigs.fromInt(17),thx_bigint_Bigs.fromInt(4));
		utest_Assert.equals("1",thx__$Rational_Rational_$Impl_$.toString(thx__$Rational_Rational_$Impl_$.multiply(x,y)),null,{ fileName : "TestRational.hx", lineNumber : 36, className : "thx.TestRational", methodName : "testOperations"});
		x = thx__$Rational_Rational_$Impl_$.create(thx_bigint_Bigs.fromInt(3037141),thx_bigint_Bigs.fromInt(3247033));
		y = thx__$Rational_Rational_$Impl_$.create(thx_bigint_Bigs.fromInt(3037547),thx_bigint_Bigs.fromInt(3246599));
		utest_Assert.equals("841/961",thx__$Rational_Rational_$Impl_$.toString(thx__$Rational_Rational_$Impl_$.multiply(x,y)),null,{ fileName : "TestRational.hx", lineNumber : 41, className : "thx.TestRational", methodName : "testOperations"});
		utest_Assert.floatEquals(0.87513007284079,thx__$Rational_Rational_$Impl_$.toFloat(thx__$Rational_Rational_$Impl_$.multiply(x,y)),null,null,{ fileName : "TestRational.hx", lineNumber : 42, className : "thx.TestRational", methodName : "testOperations"});
		x = thx__$Rational_Rational_$Impl_$.create(thx_bigint_Bigs.fromInt(1),thx_bigint_Bigs.fromInt(6));
		y = thx__$Rational_Rational_$Impl_$.create(thx_bigint_Bigs.fromInt(-4),thx_bigint_Bigs.fromInt(-8));
		utest_Assert.equals("-1/3",thx__$Rational_Rational_$Impl_$.toString(thx__$Rational_Rational_$Impl_$.subtract(x,y)),null,{ fileName : "TestRational.hx", lineNumber : 47, className : "thx.TestRational", methodName : "testOperations"});
	}
	,testFromInt: function() {
		var r = thx__$Rational_Rational_$Impl_$.fromInt(3);
		utest_Assert.equals("3",thx__$Rational_Rational_$Impl_$.toString(r),null,{ fileName : "TestRational.hx", lineNumber : 52, className : "thx.TestRational", methodName : "testFromInt"});
		r = thx__$Rational_Rational_$Impl_$.divide(r,thx__$Rational_Rational_$Impl_$.fromInt(2));
		utest_Assert.equals("3/2",thx__$Rational_Rational_$Impl_$.toString(r),null,{ fileName : "TestRational.hx", lineNumber : 54, className : "thx.TestRational", methodName : "testFromInt"});
	}
	,__class__: thx_TestRational
};
var thx_TestReadonlyArray = function() {
};
thx_TestReadonlyArray.__name__ = ["thx","TestReadonlyArray"];
thx_TestReadonlyArray.prototype = {
	testInsertAt: function() {
		var a = [1,2,4];
		var b = a.slice(0,0).concat([0]).concat(a.slice(0));
		utest_Assert.isTrue(a != b,null,{ fileName : "TestReadonlyArray.hx", lineNumber : 16, className : "thx.TestReadonlyArray", methodName : "testInsertAt"});
		utest_Assert.same([0,1,2,4],b,null,null,null,{ fileName : "TestReadonlyArray.hx", lineNumber : 17, className : "thx.TestReadonlyArray", methodName : "testInsertAt"});
		b = a.slice(0,2).concat([3]).concat(a.slice(2));
		utest_Assert.same([1,2,3,4],b,null,null,null,{ fileName : "TestReadonlyArray.hx", lineNumber : 20, className : "thx.TestReadonlyArray", methodName : "testInsertAt"});
		b = a.slice(0,10).concat([5]).concat(a.slice(10));
		utest_Assert.same([1,2,4,5],b,null,null,null,{ fileName : "TestReadonlyArray.hx", lineNumber : 23, className : "thx.TestReadonlyArray", methodName : "testInsertAt"});
	}
	,testReplaceAt: function() {
		var a = [1,2,4];
		var b = a.slice(0,0).concat([0]).concat(a.slice(1));
		utest_Assert.isTrue(a != b,null,{ fileName : "TestReadonlyArray.hx", lineNumber : 29, className : "thx.TestReadonlyArray", methodName : "testReplaceAt"});
		utest_Assert.same([0,2,4],b,null,null,null,{ fileName : "TestReadonlyArray.hx", lineNumber : 30, className : "thx.TestReadonlyArray", methodName : "testReplaceAt"});
		b = a.slice(0,2).concat([3]).concat(a.slice(3));
		utest_Assert.same([1,2,3],b,null,null,null,{ fileName : "TestReadonlyArray.hx", lineNumber : 33, className : "thx.TestReadonlyArray", methodName : "testReplaceAt"});
		b = a.slice(0,10).concat([5]).concat(a.slice(11));
		utest_Assert.same([1,2,4,5],b,null,null,null,{ fileName : "TestReadonlyArray.hx", lineNumber : 36, className : "thx.TestReadonlyArray", methodName : "testReplaceAt"});
	}
	,testPush: function() {
		var a = [1,2,3];
		var b = a.concat([4]);
		utest_Assert.same([1,2,3],a,null,null,null,{ fileName : "TestReadonlyArray.hx", lineNumber : 42, className : "thx.TestReadonlyArray", methodName : "testPush"});
		utest_Assert.same([1,2,3,4],b,null,null,null,{ fileName : "TestReadonlyArray.hx", lineNumber : 43, className : "thx.TestReadonlyArray", methodName : "testPush"});
	}
	,testPop: function() {
		var a = [1,2];
		var result;
		if(a.length == 0) {
			result = { _0 : null, _1 : a};
		} else {
			var value = a[a.length - 1];
			var pos = a.length - 1;
			var array = a.slice(0,pos).concat(a.slice(pos + 1));
			result = { _0 : value, _1 : array};
		}
		utest_Assert.same(2,result._0,null,null,null,{ fileName : "TestReadonlyArray.hx", lineNumber : 50, className : "thx.TestReadonlyArray", methodName : "testPop"});
		utest_Assert.same([1],result._1,null,null,null,{ fileName : "TestReadonlyArray.hx", lineNumber : 51, className : "thx.TestReadonlyArray", methodName : "testPop"});
		var b = result._1;
		if(b.length == 0) {
			result = { _0 : null, _1 : b};
		} else {
			var value1 = b[b.length - 1];
			var pos1 = b.length - 1;
			var array1 = b.slice(0,pos1).concat(b.slice(pos1 + 1));
			result = { _0 : value1, _1 : array1};
		}
		utest_Assert.same(1,result._0,null,null,null,{ fileName : "TestReadonlyArray.hx", lineNumber : 55, className : "thx.TestReadonlyArray", methodName : "testPop"});
		utest_Assert.same([],result._1,null,null,null,{ fileName : "TestReadonlyArray.hx", lineNumber : 56, className : "thx.TestReadonlyArray", methodName : "testPop"});
		var c = result._1;
		if(c.length == 0) {
			result = { _0 : null, _1 : c};
		} else {
			var value2 = c[c.length - 1];
			var pos2 = c.length - 1;
			var array2 = c.slice(0,pos2).concat(c.slice(pos2 + 1));
			result = { _0 : value2, _1 : array2};
		}
		utest_Assert.isNull(result._0,null,{ fileName : "TestReadonlyArray.hx", lineNumber : 60, className : "thx.TestReadonlyArray", methodName : "testPop"});
		utest_Assert.same([],result._1,null,null,null,{ fileName : "TestReadonlyArray.hx", lineNumber : 61, className : "thx.TestReadonlyArray", methodName : "testPop"});
		utest_Assert.same([1,2],a,null,null,null,{ fileName : "TestReadonlyArray.hx", lineNumber : 63, className : "thx.TestReadonlyArray", methodName : "testPop"});
	}
	,testShift: function() {
		var a = [1,2];
		var result = thx__$ReadonlyArray_ReadonlyArray_$Impl_$.shift(a);
		utest_Assert.same(1,result._0,null,null,null,{ fileName : "TestReadonlyArray.hx", lineNumber : 70, className : "thx.TestReadonlyArray", methodName : "testShift"});
		utest_Assert.same([2],result._1,null,null,null,{ fileName : "TestReadonlyArray.hx", lineNumber : 71, className : "thx.TestReadonlyArray", methodName : "testShift"});
		result = thx__$ReadonlyArray_ReadonlyArray_$Impl_$.shift(result._1);
		utest_Assert.same(2,result._0,null,null,null,{ fileName : "TestReadonlyArray.hx", lineNumber : 75, className : "thx.TestReadonlyArray", methodName : "testShift"});
		utest_Assert.same([],result._1,null,null,null,{ fileName : "TestReadonlyArray.hx", lineNumber : 76, className : "thx.TestReadonlyArray", methodName : "testShift"});
		result = thx__$ReadonlyArray_ReadonlyArray_$Impl_$.shift(result._1);
		utest_Assert.isNull(result._0,null,{ fileName : "TestReadonlyArray.hx", lineNumber : 80, className : "thx.TestReadonlyArray", methodName : "testShift"});
		utest_Assert.same([],result._1,null,null,null,{ fileName : "TestReadonlyArray.hx", lineNumber : 81, className : "thx.TestReadonlyArray", methodName : "testShift"});
		utest_Assert.same([1,2],a,null,null,null,{ fileName : "TestReadonlyArray.hx", lineNumber : 83, className : "thx.TestReadonlyArray", methodName : "testShift"});
	}
	,testUnshift: function() {
		var a = [1,2,3];
		var b = [4].concat(a);
		utest_Assert.same([1,2,3],a,null,null,null,{ fileName : "TestReadonlyArray.hx", lineNumber : 89, className : "thx.TestReadonlyArray", methodName : "testUnshift"});
		utest_Assert.same([4,1,2,3],b,null,null,null,{ fileName : "TestReadonlyArray.hx", lineNumber : 90, className : "thx.TestReadonlyArray", methodName : "testUnshift"});
	}
	,__class__: thx_TestReadonlyArray
};
var thx_TestSet = function() {
};
thx_TestSet.__name__ = ["thx","TestSet"];
thx_TestSet.prototype = {
	testCreate: function() {
		var set = thx__$Set_Set_$Impl_$.createInt();
		utest_Assert.equals(0,thx__$Set_Set_$Impl_$.get_length(set),null,{ fileName : "TestSet.hx", lineNumber : 11, className : "thx.TestSet", methodName : "testCreate"});
		thx__$Set_Set_$Impl_$.add(set,1);
		thx__$Set_Set_$Impl_$.add(set,1);
		utest_Assert.equals(1,thx__$Set_Set_$Impl_$.get_length(set),null,{ fileName : "TestSet.hx", lineNumber : 14, className : "thx.TestSet", methodName : "testCreate"});
	}
	,testSet: function() {
		utest_Assert.same([1,2,3],thx_Arrays.order(thx__$Set_Set_$Impl_$.toArray(thx__$Set_Set_$Impl_$.createInt([1,2,2,2,3])),thx_Ints.compare),null,null,null,{ fileName : "TestSet.hx", lineNumber : 19, className : "thx.TestSet", methodName : "testSet"});
	}
	,testUnion: function() {
		var s1 = thx__$Set_Set_$Impl_$.createInt([1,2,3]);
		var s2 = thx__$Set_Set_$Impl_$.createInt([2,2,4]);
		var newset = thx__$Set_Set_$Impl_$.copy(s1);
		thx__$Set_Set_$Impl_$.pushMany(newset,thx__$Set_Set_$Impl_$.toArray(s2));
		utest_Assert.same([1,2,3,4],thx_Arrays.order(thx__$Set_Set_$Impl_$.toArray(newset),thx_Ints.compare),null,null,null,{ fileName : "TestSet.hx", lineNumber : 25, className : "thx.TestSet", methodName : "testUnion"});
	}
	,testDifference: function() {
		var s1 = thx__$Set_Set_$Impl_$.createInt([1,2,3]);
		var s2 = thx__$Set_Set_$Impl_$.createInt([2,2,4]);
		var result = thx__$Set_Set_$Impl_$.copy(s1);
		var tmp = $iterator(thx__$Set_Set_$Impl_$)(s2);
		while(tmp.hasNext()) result.remove(tmp.next());
		utest_Assert.same([1,3],thx_Arrays.order(thx__$Set_Set_$Impl_$.toArray(result),thx_Ints.compare),null,null,null,{ fileName : "TestSet.hx", lineNumber : 31, className : "thx.TestSet", methodName : "testDifference"});
	}
	,testBooleans: function() {
		var this1 = thx__$Set_Set_$Impl_$.createInt([1,2,3]);
		var set = thx__$Set_Set_$Impl_$.createInt([2,3,4]);
		var newset = thx__$Set_Set_$Impl_$.copy(this1);
		thx__$Set_Set_$Impl_$.pushMany(newset,thx__$Set_Set_$Impl_$.toArray(set));
		var this2 = newset;
		var set1 = thx__$Set_Set_$Impl_$.createInt([2,3]);
		var result = thx__$Set_Set_$Impl_$.copy(this2);
		var tmp = $iterator(thx__$Set_Set_$Impl_$)(set1);
		while(tmp.hasNext()) result.remove(tmp.next());
		utest_Assert.same([1,4],thx_Arrays.order(thx__$Set_Set_$Impl_$.toArray(result),thx_Ints.compare),null,null,null,{ fileName : "TestSet.hx", lineNumber : 38, className : "thx.TestSet", methodName : "testBooleans"});
	}
	,__class__: thx_TestSet
};
var thx_TestStaticResource = function() {
};
thx_TestStaticResource.__name__ = ["thx","TestStaticResource"];
thx_TestStaticResource.prototype = {
	testBasics: function() {
		utest_Assert.equals(1,thx_ResourceTest.a,null,{ fileName : "TestStaticResource.hx", lineNumber : 9, className : "thx.TestStaticResource", methodName : "testBasics"});
		utest_Assert.notNull(thx_ResourceTest.b,null,{ fileName : "TestStaticResource.hx", lineNumber : 10, className : "thx.TestStaticResource", methodName : "testBasics"});
		utest_Assert.equals("thx",thx_ResourceTest.b.s,null,{ fileName : "TestStaticResource.hx", lineNumber : 11, className : "thx.TestStaticResource", methodName : "testBasics"});
		utest_Assert.isTrue(thx_ResourceTest.c,null,{ fileName : "TestStaticResource.hx", lineNumber : 12, className : "thx.TestStaticResource", methodName : "testBasics"});
		utest_Assert.equals("haxe",thx_ResourceTest.d,null,{ fileName : "TestStaticResource.hx", lineNumber : 13, className : "thx.TestStaticResource", methodName : "testBasics"});
		utest_Assert.equals("value",thx_ResourceTest.fileJson.some,null,{ fileName : "TestStaticResource.hx", lineNumber : 14, className : "thx.TestStaticResource", methodName : "testBasics"});
		utest_Assert.equals("some text\n",thx_ResourceTest.fileText,null,{ fileName : "TestStaticResource.hx", lineNumber : 15, className : "thx.TestStaticResource", methodName : "testBasics"});
	}
	,testDir: function() {
		utest_Assert.equals("some text\n",thx_ResourceDir.text,null,{ fileName : "TestStaticResource.hx", lineNumber : 19, className : "thx.TestStaticResource", methodName : "testDir"});
		utest_Assert.equals("value",thx_ResourceDir.object.some,null,{ fileName : "TestStaticResource.hx", lineNumber : 20, className : "thx.TestStaticResource", methodName : "testDir"});
	}
	,__class__: thx_TestStaticResource
};
var thx_ResourceTest = function() { };
thx_ResourceTest.__name__ = ["thx","ResourceTest"];
thx_ResourceTest.__interfaces__ = [thx_StaticResource];
var thx_ResourceDir = function() { };
thx_ResourceDir.__name__ = ["thx","ResourceDir"];
thx_ResourceDir.__interfaces__ = [thx_StaticResource];
var thx_TestStrings = function() {
};
thx_TestStrings.__name__ = ["thx","TestStrings"];
thx_TestStrings.prototype = {
	testLowerUpperCaseFirst: function() {
		utest_Assert.equals("aBC",thx_Strings.lowerCaseFirst("ABC"),null,{ fileName : "TestStrings.hx", lineNumber : 16, className : "thx.TestStrings", methodName : "testLowerUpperCaseFirst"});
		utest_Assert.equals("Abc",thx_Strings.upperCaseFirst("abc"),null,{ fileName : "TestStrings.hx", lineNumber : 17, className : "thx.TestStrings", methodName : "testLowerUpperCaseFirst"});
	}
	,testContains: function() {
		utest_Assert.isTrue("test".indexOf("") >= 0,null,{ fileName : "TestStrings.hx", lineNumber : 21, className : "thx.TestStrings", methodName : "testContains"});
		utest_Assert.isTrue("test".indexOf("t") >= 0,null,{ fileName : "TestStrings.hx", lineNumber : 22, className : "thx.TestStrings", methodName : "testContains"});
		utest_Assert.isTrue("test".indexOf("te") >= 0,null,{ fileName : "TestStrings.hx", lineNumber : 23, className : "thx.TestStrings", methodName : "testContains"});
		utest_Assert.isTrue("test".indexOf("tes") >= 0,null,{ fileName : "TestStrings.hx", lineNumber : 24, className : "thx.TestStrings", methodName : "testContains"});
		utest_Assert.isTrue("test".indexOf("test") >= 0,null,{ fileName : "TestStrings.hx", lineNumber : 25, className : "thx.TestStrings", methodName : "testContains"});
		utest_Assert.isTrue("one two three".indexOf("one") >= 0,null,{ fileName : "TestStrings.hx", lineNumber : 26, className : "thx.TestStrings", methodName : "testContains"});
		utest_Assert.isTrue("one two three".indexOf("two") >= 0,null,{ fileName : "TestStrings.hx", lineNumber : 27, className : "thx.TestStrings", methodName : "testContains"});
		utest_Assert.isTrue("one two three".indexOf("three") >= 0,null,{ fileName : "TestStrings.hx", lineNumber : 28, className : "thx.TestStrings", methodName : "testContains"});
		utest_Assert.isFalse("test".indexOf("test ") >= 0,null,{ fileName : "TestStrings.hx", lineNumber : 29, className : "thx.TestStrings", methodName : "testContains"});
		utest_Assert.isFalse("test".indexOf(" test") >= 0,null,{ fileName : "TestStrings.hx", lineNumber : 30, className : "thx.TestStrings", methodName : "testContains"});
		utest_Assert.isFalse("test".indexOf("tes ") >= 0,null,{ fileName : "TestStrings.hx", lineNumber : 31, className : "thx.TestStrings", methodName : "testContains"});
	}
	,testCount: function() {
		utest_Assert.equals(3,thx_Strings.count("one two three four five six seven eight nine ten","o"),null,{ fileName : "TestStrings.hx", lineNumber : 35, className : "thx.TestStrings", methodName : "testCount"});
		utest_Assert.equals(2,thx_Strings.count("one two three four five six seven eight nine ten","en"),null,{ fileName : "TestStrings.hx", lineNumber : 36, className : "thx.TestStrings", methodName : "testCount"});
		utest_Assert.equals(3,thx_Strings.count("one two three four five six seven eight nine ten"," t"),null,{ fileName : "TestStrings.hx", lineNumber : 37, className : "thx.TestStrings", methodName : "testCount"});
		utest_Assert.equals(2,thx_Strings.count("one two three four five six seven eight nine ten","ve"),null,{ fileName : "TestStrings.hx", lineNumber : 38, className : "thx.TestStrings", methodName : "testCount"});
		utest_Assert.equals(0,thx_Strings.count("xxxxxx","y"),null,{ fileName : "TestStrings.hx", lineNumber : 39, className : "thx.TestStrings", methodName : "testCount"});
		utest_Assert.equals(6,thx_Strings.count("xxxxxx","x"),null,{ fileName : "TestStrings.hx", lineNumber : 40, className : "thx.TestStrings", methodName : "testCount"});
		utest_Assert.equals(3,thx_Strings.count("xxxxxx","xx"),null,{ fileName : "TestStrings.hx", lineNumber : 41, className : "thx.TestStrings", methodName : "testCount"});
		utest_Assert.equals(2,thx_Strings.count("xxxxxx","xxx"),null,{ fileName : "TestStrings.hx", lineNumber : 42, className : "thx.TestStrings", methodName : "testCount"});
		utest_Assert.equals(1,thx_Strings.count("xxxxxx","xxxx"),null,{ fileName : "TestStrings.hx", lineNumber : 43, className : "thx.TestStrings", methodName : "testCount"});
		utest_Assert.equals(0,thx_Strings.count("x","xx"),null,{ fileName : "TestStrings.hx", lineNumber : 44, className : "thx.TestStrings", methodName : "testCount"});
	}
	,testContainsAny: function() {
		utest_Assert.isTrue(thx_Arrays.any(["t","x","y"],function(a1) {
			return thx_Strings.contains("test",a1);
		}),null,{ fileName : "TestStrings.hx", lineNumber : 48, className : "thx.TestStrings", methodName : "testContainsAny"});
		utest_Assert.isTrue(thx_Arrays.any(["e","x","y"],function(a11) {
			return thx_Strings.contains("test",a11);
		}),null,{ fileName : "TestStrings.hx", lineNumber : 49, className : "thx.TestStrings", methodName : "testContainsAny"});
		utest_Assert.isTrue(thx_Arrays.any(["s","x","y"],function(a12) {
			return thx_Strings.contains("test",a12);
		}),null,{ fileName : "TestStrings.hx", lineNumber : 50, className : "thx.TestStrings", methodName : "testContainsAny"});
		utest_Assert.isTrue(thx_Arrays.any(["x","t","y"],function(a13) {
			return thx_Strings.contains("test",a13);
		}),null,{ fileName : "TestStrings.hx", lineNumber : 51, className : "thx.TestStrings", methodName : "testContainsAny"});
		utest_Assert.isTrue(thx_Arrays.any(["x","e","y"],function(a14) {
			return thx_Strings.contains("test",a14);
		}),null,{ fileName : "TestStrings.hx", lineNumber : 52, className : "thx.TestStrings", methodName : "testContainsAny"});
		utest_Assert.isTrue(thx_Arrays.any(["x","s","y"],function(a15) {
			return thx_Strings.contains("test",a15);
		}),null,{ fileName : "TestStrings.hx", lineNumber : 53, className : "thx.TestStrings", methodName : "testContainsAny"});
		utest_Assert.isTrue(thx_Arrays.any(["x","y","t"],function(a16) {
			return thx_Strings.contains("test",a16);
		}),null,{ fileName : "TestStrings.hx", lineNumber : 54, className : "thx.TestStrings", methodName : "testContainsAny"});
		utest_Assert.isTrue(thx_Arrays.any(["x","y","e"],function(a17) {
			return thx_Strings.contains("test",a17);
		}),null,{ fileName : "TestStrings.hx", lineNumber : 55, className : "thx.TestStrings", methodName : "testContainsAny"});
		utest_Assert.isTrue(thx_Arrays.any(["x","y","s"],function(a18) {
			return thx_Strings.contains("test",a18);
		}),null,{ fileName : "TestStrings.hx", lineNumber : 56, className : "thx.TestStrings", methodName : "testContainsAny"});
		utest_Assert.isTrue(thx_Arrays.any(["zero","one","two"],function(a19) {
			return thx_Strings.contains("one two three",a19);
		}),null,{ fileName : "TestStrings.hx", lineNumber : 57, className : "thx.TestStrings", methodName : "testContainsAny"});
		utest_Assert.isTrue(thx_Arrays.any(["one","two","three"],function(a110) {
			return thx_Strings.contains("one two three",a110);
		}),null,{ fileName : "TestStrings.hx", lineNumber : 58, className : "thx.TestStrings", methodName : "testContainsAny"});
		utest_Assert.isTrue(thx_Arrays.any(["one two","x","three"],function(a111) {
			return thx_Strings.contains("one two three",a111);
		}),null,{ fileName : "TestStrings.hx", lineNumber : 59, className : "thx.TestStrings", methodName : "testContainsAny"});
	}
	,testHashCode: function() {
		utest_Assert.equals(97,thx_Strings.hashCode("a"),null,{ fileName : "TestStrings.hx", lineNumber : 63, className : "thx.TestStrings", methodName : "testHashCode"});
		utest_Assert.equals(96354,thx_Strings.hashCode("abc"),null,{ fileName : "TestStrings.hx", lineNumber : 64, className : "thx.TestStrings", methodName : "testHashCode"});
		utest_Assert.equals(898829415,thx_Strings.hashCode("abcdefghijklm"),null,{ fileName : "TestStrings.hx", lineNumber : 65, className : "thx.TestStrings", methodName : "testHashCode"});
		utest_Assert.equals(410520826,thx_Strings.hashCode("abcdefghijklmabcdefghijklmabcdefghijklmabcdefghijklmabcdefghijklm!!!"),null,{ fileName : "TestStrings.hx", lineNumber : 66, className : "thx.TestStrings", methodName : "testHashCode"});
	}
	,testUcwordsws: function() {
		var tests = [{ expected : "Test", test : "test"},{ expected : "Test Test", test : "test test"},{ expected : " Test Test  Test ", test : " test test  test "},{ expected : "Test\nTest", test : "test\ntest"},{ expected : "Test\tTest", test : "test\ttest"}];
		var _g = 0;
		while(_g < tests.length) {
			var item = tests[_g];
			++_g;
			utest_Assert.equals(item.expected,thx_Strings.capitalizeWords(item.test,true),null,{ fileName : "TestStrings.hx", lineNumber : 78, className : "thx.TestStrings", methodName : "testUcwordsws"});
		}
	}
	,testDifferAt: function() {
		utest_Assert.equals(3,thx_Strings.diffAt("abcdef","abc123"),null,{ fileName : "TestStrings.hx", lineNumber : 82, className : "thx.TestStrings", methodName : "testDifferAt"});
		utest_Assert.equals(0,thx_Strings.diffAt("","abc123"),null,{ fileName : "TestStrings.hx", lineNumber : 83, className : "thx.TestStrings", methodName : "testDifferAt"});
		utest_Assert.equals(1,thx_Strings.diffAt("a","abc123"),null,{ fileName : "TestStrings.hx", lineNumber : 84, className : "thx.TestStrings", methodName : "testDifferAt"});
		utest_Assert.equals(0,thx_Strings.diffAt("abc123",""),null,{ fileName : "TestStrings.hx", lineNumber : 85, className : "thx.TestStrings", methodName : "testDifferAt"});
		utest_Assert.equals(1,thx_Strings.diffAt("abc123","a"),null,{ fileName : "TestStrings.hx", lineNumber : 86, className : "thx.TestStrings", methodName : "testDifferAt"});
	}
	,testEllipsis: function() {
		var tests = [{ expected : "abcdefghijkl", len : null, symbol : null},{ expected : "abcdefghijkl", len : 100, symbol : null},{ expected : "abcd…", len : 5, symbol : null},{ expected : "a ...", len : 5, symbol : " ..."},{ expected : "..", len : 2, symbol : " ..."},{ expected : "abcdef ...", len : 10, symbol : " ..."}];
		var _g = 0;
		while(_g < tests.length) {
			var item = tests[_g];
			++_g;
			utest_Assert.equals(item.expected,thx_Strings.ellipsis("abcdefghijkl",item.len,item.symbol),null,{ fileName : "TestStrings.hx", lineNumber : 100, className : "thx.TestStrings", methodName : "testEllipsis"});
		}
	}
	,testEllipsisMiddle: function() {
		var tests = [{ expected : "abcdefghijkl", len : null, symbol : null},{ expected : "abcdefghijkl", len : 100, symbol : null},{ expected : "ab…kl", len : 5, symbol : null},{ expected : "a ...", len : 5, symbol : " ..."},{ expected : "..", len : 2, symbol : " ..."},{ expected : "abc ...jkl", len : 10, symbol : " ..."}];
		var _g = 0;
		while(_g < tests.length) {
			var item = tests[_g];
			++_g;
			utest_Assert.equals(item.expected,thx_Strings.ellipsisMiddle("abcdefghijkl",item.len,item.symbol),null,{ fileName : "TestStrings.hx", lineNumber : 114, className : "thx.TestStrings", methodName : "testEllipsisMiddle"});
		}
	}
	,testUcwords: function() {
		var tests = [{ expected : "Test", test : "test"},{ expected : "Test Test", test : "test test"},{ expected : " Test-Test:Test_Test : Test ", test : " test-test:test_test : test "},{ expected : "Test\nTest", test : "test\ntest"},{ expected : "Test\tTest", test : "test\ttest"}];
		var _g = 0;
		while(_g < tests.length) {
			var item = tests[_g];
			++_g;
			utest_Assert.equals(item.expected,thx_Strings.capitalizeWords(item.test),null,{ fileName : "TestStrings.hx", lineNumber : 126, className : "thx.TestStrings", methodName : "testUcwords"});
		}
	}
	,testAlphaNum: function() {
		var tests = [{ expected : true, test : "a"},{ expected : true, test : "1a"},{ expected : false, test : " a"},{ expected : false, test : " "},{ expected : false, test : ""}];
		var _g = 0;
		while(_g < tests.length) {
			var item = tests[_g];
			++_g;
			utest_Assert.equals(item.expected,thx_Strings.ALPHANUM.match(item.test),null,{ fileName : "TestStrings.hx", lineNumber : 138, className : "thx.TestStrings", methodName : "testAlphaNum"});
		}
	}
	,testHumanize: function() {
		utest_Assert.equals("hello world",thx_Strings.humanize("helloWorld"),null,{ fileName : "TestStrings.hx", lineNumber : 142, className : "thx.TestStrings", methodName : "testHumanize"});
		utest_Assert.equals("my long string",thx_Strings.humanize("my_long_string"),null,{ fileName : "TestStrings.hx", lineNumber : 143, className : "thx.TestStrings", methodName : "testHumanize"});
		utest_Assert.equals("ignore many",thx_Strings.humanize("ignoreMANY"),null,{ fileName : "TestStrings.hx", lineNumber : 144, className : "thx.TestStrings", methodName : "testHumanize"});
	}
	,testWrapColumn: function() {
		utest_Assert.equals("Lorem ipsum dolor\nsit amet,\nconsectetur\nadipisicing elit,\nsed do eiusmod\ntempor incididunt ut\nlabore et dolore\nmagna aliqua. Ut\nenim ad minim\nveniam, quis nostrud\nexercitation ullamco\nlaboris nisi ut\naliquip ex ea\ncommodo consequat.",thx_Strings.wrapColumns("Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",20),null,{ fileName : "TestStrings.hx", lineNumber : 150, className : "thx.TestStrings", methodName : "testWrapColumn"});
		utest_Assert.equals("    Lorem ipsum\n    dolor sit amet,\n    consectetur\n    adipisicing\n    elit, sed do\n    eiusmod tempor\n    incididunt ut\n    labore et dolore\n    magna aliqua. Ut\n    enim ad minim\n    veniam, quis\n    nostrud\n    exercitation\n    ullamco laboris\n    nisi ut aliquip\n    ex ea commodo\n    consequat.",thx_Strings.wrapColumns("Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",20,"    "),null,{ fileName : "TestStrings.hx", lineNumber : 167, className : "thx.TestStrings", methodName : "testWrapColumn"});
	}
	,testWrapColumnPreserveNewLines: function() {
		utest_Assert.equals("Lorem ipsum dolor\nsit amet,\n\nconsectetur\nadipisicing elit",thx_Strings.wrapColumns("Lorem ipsum dolor sit amet,\n\nconsectetur adipisicing elit",18),null,{ fileName : "TestStrings.hx", lineNumber : 191, className : "thx.TestStrings", methodName : "testWrapColumnPreserveNewLines"});
	}
	,testWrapColumnLong: function() {
		utest_Assert.equals("aaaaaaaaaa\naaaa\naaa aa",thx_Strings.wrapColumns("aaaaaaaaaa aaaa aaa aa",6),null,{ fileName : "TestStrings.hx", lineNumber : 198, className : "thx.TestStrings", methodName : "testWrapColumnLong"});
	}
	,testRepeat: function() {
		utest_Assert.equals("XyXyXy",thx_Strings.repeat("Xy",3),null,{ fileName : "TestStrings.hx", lineNumber : 205, className : "thx.TestStrings", methodName : "testRepeat"});
	}
	,testUpTo: function() {
		utest_Assert.equals("abcdef",thx_Strings.upTo("abcdef","x"),null,{ fileName : "TestStrings.hx", lineNumber : 209, className : "thx.TestStrings", methodName : "testUpTo"});
		utest_Assert.equals("ab",thx_Strings.upTo("abcdef","cd"),null,{ fileName : "TestStrings.hx", lineNumber : 210, className : "thx.TestStrings", methodName : "testUpTo"});
	}
	,testFrom: function() {
		utest_Assert.equals("",thx_Strings.from("abcdef","x"),null,{ fileName : "TestStrings.hx", lineNumber : 214, className : "thx.TestStrings", methodName : "testFrom"});
		utest_Assert.equals("cdef",thx_Strings.from("abcdef","cd"),null,{ fileName : "TestStrings.hx", lineNumber : 215, className : "thx.TestStrings", methodName : "testFrom"});
	}
	,testAfter: function() {
		utest_Assert.equals("",thx_Strings.after("abcdef","x"),null,{ fileName : "TestStrings.hx", lineNumber : 219, className : "thx.TestStrings", methodName : "testAfter"});
		utest_Assert.equals("ef",thx_Strings.after("abcdef","cd"),null,{ fileName : "TestStrings.hx", lineNumber : 220, className : "thx.TestStrings", methodName : "testAfter"});
	}
	,testStripTags: function() {
		utest_Assert.equals("a code; x",thx_Strings.stripTags("a<br/> <script src=\"aaa\">code;</script> x"),null,{ fileName : "TestStrings.hx", lineNumber : 224, className : "thx.TestStrings", methodName : "testStripTags"});
	}
	,testLtrim: function() {
		utest_Assert.equals("abcde",thx_Strings.trimCharsLeft("abcde","x"),null,{ fileName : "TestStrings.hx", lineNumber : 228, className : "thx.TestStrings", methodName : "testLtrim"});
		utest_Assert.equals("de",thx_Strings.trimCharsLeft("abcde","cba"),null,{ fileName : "TestStrings.hx", lineNumber : 229, className : "thx.TestStrings", methodName : "testLtrim"});
		utest_Assert.equals("abcde",thx_Strings.trimCharsLeft("abcde","b"),null,{ fileName : "TestStrings.hx", lineNumber : 230, className : "thx.TestStrings", methodName : "testLtrim"});
		utest_Assert.equals("",thx_Strings.trimCharsLeft("/","/"),null,{ fileName : "TestStrings.hx", lineNumber : 232, className : "thx.TestStrings", methodName : "testLtrim"});
	}
	,testRtrim: function() {
		utest_Assert.equals("abcde",thx_Strings.trimCharsRight("abcde","x"),null,{ fileName : "TestStrings.hx", lineNumber : 236, className : "thx.TestStrings", methodName : "testRtrim"});
		utest_Assert.equals("ab",thx_Strings.trimCharsRight("abcde","ced"),null,{ fileName : "TestStrings.hx", lineNumber : 237, className : "thx.TestStrings", methodName : "testRtrim"});
		utest_Assert.equals("abcde",thx_Strings.trimCharsRight("abcde","d"),null,{ fileName : "TestStrings.hx", lineNumber : 238, className : "thx.TestStrings", methodName : "testRtrim"});
		utest_Assert.equals("",thx_Strings.trimCharsRight("/","/"),null,{ fileName : "TestStrings.hx", lineNumber : 240, className : "thx.TestStrings", methodName : "testRtrim"});
	}
	,testTrim: function() {
		utest_Assert.equals("abcde",thx_Strings.trimCharsRight(thx_Strings.trimCharsLeft("abcde","x"),"x"),null,{ fileName : "TestStrings.hx", lineNumber : 244, className : "thx.TestStrings", methodName : "testTrim"});
		utest_Assert.equals("cd",thx_Strings.trimCharsRight(thx_Strings.trimCharsLeft("abcde","abe"),"abe"),null,{ fileName : "TestStrings.hx", lineNumber : 245, className : "thx.TestStrings", methodName : "testTrim"});
		utest_Assert.equals("abcde",thx_Strings.trimCharsRight(thx_Strings.trimCharsLeft("abcde","bd"),"bd"),null,{ fileName : "TestStrings.hx", lineNumber : 246, className : "thx.TestStrings", methodName : "testTrim"});
		utest_Assert.equals("",thx_Strings.trimCharsRight(thx_Strings.trimCharsLeft("/","/"),"/"),null,{ fileName : "TestStrings.hx", lineNumber : 248, className : "thx.TestStrings", methodName : "testTrim"});
	}
	,testToArray: function() {
		utest_Assert.same(["a","☺","b","☺","☺","c","☺","☺","☺"],"a☺b☺☺c☺☺☺".split(""),null,null,null,{ fileName : "TestStrings.hx", lineNumber : 254, className : "thx.TestStrings", methodName : "testToArray"});
	}
	,testToLines: function() {
		utest_Assert.same(["Split","to","lines"],thx_Strings.SPLIT_LINES.split("Split\nto\nlines"),null,null,null,{ fileName : "TestStrings.hx", lineNumber : 261, className : "thx.TestStrings", methodName : "testToLines"});
	}
	,testReverse: function() {
		utest_Assert.same("☺☺☺c☺☺b☺a",thx_Strings.reverse("a☺b☺☺c☺☺☺"),null,null,null,{ fileName : "TestStrings.hx", lineNumber : 267, className : "thx.TestStrings", methodName : "testReverse"});
	}
	,testOrder: function() {
		utest_Assert.equals(thx_OrderingImpl.EQ,thx__$Ord_Ord_$Impl_$.order(thx_Strings.order,"companyId","companyId"),null,{ fileName : "TestStrings.hx", lineNumber : 271, className : "thx.TestStrings", methodName : "testOrder"});
		utest_Assert.equals(thx_OrderingImpl.LT,thx__$Ord_Ord_$Impl_$.order(thx_Strings.order,"companyIc","companyId"),null,{ fileName : "TestStrings.hx", lineNumber : 272, className : "thx.TestStrings", methodName : "testOrder"});
		utest_Assert.equals(thx_OrderingImpl.GT,thx__$Ord_Ord_$Impl_$.order(thx_Strings.order,"companyId","companyIc"),null,{ fileName : "TestStrings.hx", lineNumber : 273, className : "thx.TestStrings", methodName : "testOrder"});
	}
	,__class__: thx_TestStrings
};
var thx_TestThx = function() {
};
thx_TestThx.__name__ = ["thx","TestThx"];
thx_TestThx.prototype = {
	testUsing: function() {
		utest_Assert.equals("thx using",thx_Strings.humanize("ThxUsing"),null,{ fileName : "TestThx.hx", lineNumber : 10, className : "thx.TestThx", methodName : "testUsing"});
	}
	,__class__: thx_TestThx
};
var thx_TestTime = function() {
};
thx_TestTime.__name__ = ["thx","TestTime"];
thx_TestTime.prototype = {
	testBasics: function() {
		var time = thx__$Time_Time_$Impl_$.create(249,8,7,6);
		var x = haxe__$Int64_Int64_$Impl_$.divMod(time,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerDayI64).quotient;
		if(x.high != x.low >> 31) {
			throw new js__$Boot_HaxeError("Overflow");
		}
		utest_Assert.equals(10,x.low,null,{ fileName : "TestTime.hx", lineNumber : 12, className : "thx.TestTime", methodName : "testBasics"});
		var x1 = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(time,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerHourI64).quotient,new haxe__$Int64__$_$_$Int64(0,24)).modulus;
		if(x1.high != x1.low >> 31) {
			throw new js__$Boot_HaxeError("Overflow");
		}
		utest_Assert.equals(9,x1.low,null,{ fileName : "TestTime.hx", lineNumber : 13, className : "thx.TestTime", methodName : "testBasics"});
		var x2 = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(time,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMinuteI64).quotient,new haxe__$Int64__$_$_$Int64(0,60)).modulus;
		if(x2.high != x2.low >> 31) {
			throw new js__$Boot_HaxeError("Overflow");
		}
		utest_Assert.equals(8,x2.low,null,{ fileName : "TestTime.hx", lineNumber : 14, className : "thx.TestTime", methodName : "testBasics"});
		var x3 = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(time,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerSecondI64).quotient,new haxe__$Int64__$_$_$Int64(0,60)).modulus;
		if(x3.high != x3.low >> 31) {
			throw new js__$Boot_HaxeError("Overflow");
		}
		utest_Assert.equals(7,x3.low,null,{ fileName : "TestTime.hx", lineNumber : 15, className : "thx.TestTime", methodName : "testBasics"});
		var x4 = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(time,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMillisecondI64).quotient,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.thousandI64).modulus;
		if(x4.high != x4.low >> 31) {
			throw new js__$Boot_HaxeError("Overflow");
		}
		utest_Assert.equals(6,x4.low,null,{ fileName : "TestTime.hx", lineNumber : 16, className : "thx.TestTime", methodName : "testBasics"});
		var x5 = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(time,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMicrosecondI64).quotient,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.tenThousandI64).modulus;
		if(x5.high != x5.low >> 31) {
			throw new js__$Boot_HaxeError("Overflow");
		}
		utest_Assert.equals(6000,x5.low,null,{ fileName : "TestTime.hx", lineNumber : 17, className : "thx.TestTime", methodName : "testBasics"});
		var x6 = haxe__$Int64_Int64_$Impl_$.divMod(time,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerSecondI64).modulus;
		if(x6.high != x6.low >> 31) {
			throw new js__$Boot_HaxeError("Overflow");
		}
		utest_Assert.equals(60000,x6.low,null,{ fileName : "TestTime.hx", lineNumber : 18, className : "thx.TestTime", methodName : "testBasics"});
		var x7 = haxe__$Int64_Int64_$Impl_$.divMod(time,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerDayI64).quotient;
		if(x7.high != x7.low >> 31) {
			throw new js__$Boot_HaxeError("Overflow");
		}
		utest_Assert.equals(10,x7.low,null,{ fileName : "TestTime.hx", lineNumber : 20, className : "thx.TestTime", methodName : "testBasics"});
		var x8 = haxe__$Int64_Int64_$Impl_$.divMod(time,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerHourI64).quotient;
		if(x8.high != x8.low >> 31) {
			throw new js__$Boot_HaxeError("Overflow");
		}
		utest_Assert.equals(249,x8.low,null,{ fileName : "TestTime.hx", lineNumber : 21, className : "thx.TestTime", methodName : "testBasics"});
		var x9 = haxe__$Int64_Int64_$Impl_$.divMod(time,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMinuteI64).quotient;
		if(x9.high != x9.low >> 31) {
			throw new js__$Boot_HaxeError("Overflow");
		}
		utest_Assert.equals(14948,x9.low,null,{ fileName : "TestTime.hx", lineNumber : 22, className : "thx.TestTime", methodName : "testBasics"});
		var x10 = haxe__$Int64_Int64_$Impl_$.divMod(time,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerSecondI64).quotient;
		if(x10.high != x10.low >> 31) {
			throw new js__$Boot_HaxeError("Overflow");
		}
		utest_Assert.equals(896887,x10.low,null,{ fileName : "TestTime.hx", lineNumber : 23, className : "thx.TestTime", methodName : "testBasics"});
		var x11 = haxe__$Int64_Int64_$Impl_$.divMod(time,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMillisecondI64).quotient;
		if(x11.high != x11.low >> 31) {
			throw new js__$Boot_HaxeError("Overflow");
		}
		utest_Assert.equals(896887006,x11.low,null,{ fileName : "TestTime.hx", lineNumber : 24, className : "thx.TestTime", methodName : "testBasics"});
		utest_Assert.equals("896887006000",haxe__$Int64_Int64_$Impl_$.toString(haxe__$Int64_Int64_$Impl_$.divMod(time,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMicrosecondI64).quotient),null,{ fileName : "TestTime.hx", lineNumber : 25, className : "thx.TestTime", methodName : "testBasics"});
	}
	,testFromString: function() {
		var time = thx__$Time_Time_$Impl_$.fromString("125:55:45.123");
		var x = haxe__$Int64_Int64_$Impl_$.divMod(time,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerDayI64).quotient;
		if(x.high != x.low >> 31) {
			throw new js__$Boot_HaxeError("Overflow");
		}
		utest_Assert.equals(5,x.low,null,{ fileName : "TestTime.hx", lineNumber : 30, className : "thx.TestTime", methodName : "testFromString"});
		utest_Assert.equals("125",haxe__$Int64_Int64_$Impl_$.toString(haxe__$Int64_Int64_$Impl_$.divMod(time,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerHourI64).quotient),null,{ fileName : "TestTime.hx", lineNumber : 31, className : "thx.TestTime", methodName : "testFromString"});
		var x1 = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(time,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerHourI64).quotient,new haxe__$Int64__$_$_$Int64(0,24)).modulus;
		if(x1.high != x1.low >> 31) {
			throw new js__$Boot_HaxeError("Overflow");
		}
		utest_Assert.equals(5,x1.low,null,{ fileName : "TestTime.hx", lineNumber : 32, className : "thx.TestTime", methodName : "testFromString"});
		var x2 = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(time,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMinuteI64).quotient,new haxe__$Int64__$_$_$Int64(0,60)).modulus;
		if(x2.high != x2.low >> 31) {
			throw new js__$Boot_HaxeError("Overflow");
		}
		utest_Assert.equals(55,x2.low,null,{ fileName : "TestTime.hx", lineNumber : 33, className : "thx.TestTime", methodName : "testFromString"});
		var x3 = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(time,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerSecondI64).quotient,new haxe__$Int64__$_$_$Int64(0,60)).modulus;
		if(x3.high != x3.low >> 31) {
			throw new js__$Boot_HaxeError("Overflow");
		}
		utest_Assert.equals(45,x3.low,null,{ fileName : "TestTime.hx", lineNumber : 34, className : "thx.TestTime", methodName : "testFromString"});
		var x4 = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(time,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMillisecondI64).quotient,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.thousandI64).modulus;
		if(x4.high != x4.low >> 31) {
			throw new js__$Boot_HaxeError("Overflow");
		}
		utest_Assert.equals(123,x4.low,null,{ fileName : "TestTime.hx", lineNumber : 35, className : "thx.TestTime", methodName : "testFromString"});
		utest_Assert.equals("125:55:45.123",thx__$Time_Time_$Impl_$.toString(time),null,{ fileName : "TestTime.hx", lineNumber : 37, className : "thx.TestTime", methodName : "testFromString"});
		utest_Assert.equals("89:25:30.005",thx__$Time_Time_$Impl_$.toString(thx__$Time_Time_$Impl_$.fromString("3.17:25:30.005")),null,{ fileName : "TestTime.hx", lineNumber : 38, className : "thx.TestTime", methodName : "testFromString"});
		utest_Assert.equals("-89:25:30.05",thx__$Time_Time_$Impl_$.toString(thx__$Time_Time_$Impl_$.fromString("-3.17:25:30.05")),null,{ fileName : "TestTime.hx", lineNumber : 39, className : "thx.TestTime", methodName : "testFromString"});
	}
	,__class__: thx_TestTime
};
var thx_TestTimer = function() {
};
thx_TestTimer.__name__ = ["thx","TestTimer"];
thx_TestTimer.prototype = {
	assertTime: function(expected,test,pos) {
		var tollerance = expected * .5;
		utest_Assert.isTrue(test >= expected - tollerance && test <= expected + tollerance,"" + test + " is not in range of +/-" + tollerance + " from " + expected,pos);
	}
	,testResolution: function() {
		utest_Assert.isTrue(thx_Timer.resolution() > 0,null,{ fileName : "TestTimer.hx", lineNumber : 21, className : "thx.TestTimer", methodName : "testResolution"});
	}
	,testRepeat: function() {
		var _gthis = this;
		var done = utest_Assert.createAsync(null,1000);
		var delay = 100;
		var start = new Date().getTime();
		var counter = 5;
		var cancel = null;
		cancel = thx_Timer.repeat(function() {
			--counter;
			if(counter == 0) {
				_gthis.assertTime(500,new Date().getTime() - start,{ fileName : "TestTimer.hx", lineNumber : 34, className : "thx.TestTimer", methodName : "testRepeat"});
				cancel();
				done();
			}
		},delay);
	}
	,testDelay: function() {
		var _gthis = this;
		var done = utest_Assert.createAsync();
		var delay = 100;
		var start = new Date().getTime();
		thx_Timer.delay(function() {
			_gthis.assertTime(delay,new Date().getTime() - start,{ fileName : "TestTimer.hx", lineNumber : 47, className : "thx.TestTimer", methodName : "testDelay"});
			done();
		},delay);
	}
	,testCancelDelay: function() {
		var done = utest_Assert.createAsync(null,1000);
		var cancel = thx_Timer.delay(function() {
			utest_Assert.fail("should never reach here",{ fileName : "TestTimer.hx", lineNumber : 57, className : "thx.TestTimer", methodName : "testCancelDelay"});
		},100);
		thx_Timer.delay(function() {
			cancel();
		},50);
		thx_Timer.delay(function() {
			utest_Assert.isTrue(true,null,{ fileName : "TestTimer.hx", lineNumber : 65, className : "thx.TestTimer", methodName : "testCancelDelay"});
			done();
		},150);
	}
	,__class__: thx_TestTimer
};
var thx_TestTuple = function() {
};
thx_TestTuple.__name__ = ["thx","TestTuple"];
thx_TestTuple.prototype = {
	testTuple0: function() {
		utest_Assert.equals(thx_Nil.nil,thx_Nil.nil,null,{ fileName : "TestTuple.hx", lineNumber : 12, className : "thx.TestTuple", methodName : "testTuple0"});
	}
	,testTuple1: function() {
		utest_Assert.equals("thx","thx",null,{ fileName : "TestTuple.hx", lineNumber : 17, className : "thx.TestTuple", methodName : "testTuple1"});
	}
	,testTuple2: function() {
		var t = { _0 : "thx", _1 : 7};
		utest_Assert.equals("thx",t._0,null,{ fileName : "TestTuple.hx", lineNumber : 22, className : "thx.TestTuple", methodName : "testTuple2"});
		utest_Assert.equals(7,t._1,null,{ fileName : "TestTuple.hx", lineNumber : 23, className : "thx.TestTuple", methodName : "testTuple2"});
		utest_Assert.equals("thx",t._0,null,{ fileName : "TestTuple.hx", lineNumber : 24, className : "thx.TestTuple", methodName : "testTuple2"});
		utest_Assert.equals(7,t._1,null,{ fileName : "TestTuple.hx", lineNumber : 25, className : "thx.TestTuple", methodName : "testTuple2"});
	}
	,__class__: thx_TestTuple
};
var thx_TestUrl = function() {
};
thx_TestUrl.__name__ = ["thx","TestUrl"];
thx_TestUrl.prototype = {
	testBasics: function() {
		var url = thx__$Url_Url_$Impl_$.fromString("http://user:password@www.example.com:8888/some/path/name.ext?a=b&c=d#hashtag/is/here");
		utest_Assert.equals("http",url.protocol,null,{ fileName : "TestUrl.hx", lineNumber : 11, className : "thx.TestUrl", methodName : "testBasics"});
		utest_Assert.equals("user:password",url.auth,null,{ fileName : "TestUrl.hx", lineNumber : 12, className : "thx.TestUrl", methodName : "testBasics"});
		utest_Assert.equals("www.example.com:8888",url.hostName + (url.port != null?":" + url.port:""),null,{ fileName : "TestUrl.hx", lineNumber : 13, className : "thx.TestUrl", methodName : "testBasics"});
		utest_Assert.equals("www.example.com",url.hostName,null,{ fileName : "TestUrl.hx", lineNumber : 14, className : "thx.TestUrl", methodName : "testBasics"});
		var tmp;
		var tmp1;
		var tmp2;
		if(url.search == null) {
			if(url.queryString != null) {
				var _this = url.queryString;
				tmp2 = !(!new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys()).hasNext());
			} else {
				tmp2 = false;
			}
		} else {
			tmp2 = true;
		}
		if(tmp2) {
			tmp1 = "?" + thx__$Url_Url_$Impl_$.get_search(url);
		} else {
			tmp1 = "";
		}
		if("/some/path/name.ext?a=b&c=d" != url.pathName + tmp1) {
			var tmp3;
			var tmp4;
			if(url.search == null) {
				if(url.queryString != null) {
					var _this1 = url.queryString;
					tmp4 = !(!new haxe_ds__$StringMap_StringMapIterator(_this1,_this1.arrayKeys()).hasNext());
				} else {
					tmp4 = false;
				}
			} else {
				tmp4 = true;
			}
			if(tmp4) {
				tmp3 = "?" + thx__$Url_Url_$Impl_$.get_search(url);
			} else {
				tmp3 = "";
			}
			tmp = "/some/path/name.ext?c=d&a=b" == url.pathName + tmp3;
		} else {
			tmp = true;
		}
		utest_Assert.isTrue(tmp,null,{ fileName : "TestUrl.hx", lineNumber : 16, className : "thx.TestUrl", methodName : "testBasics"});
		utest_Assert.equals("/some/path/name.ext",url.pathName,null,{ fileName : "TestUrl.hx", lineNumber : 20, className : "thx.TestUrl", methodName : "testBasics"});
		utest_Assert.equals("hashtag/is/here",url.hash,null,{ fileName : "TestUrl.hx", lineNumber : 21, className : "thx.TestUrl", methodName : "testBasics"});
	}
	,testToString: function() {
		var urls = ["http://user:password@www.example.com:8888/some/path/name.ext?a=b#hashtag/is/here","http://example.com","irc://irc.example.com/channel","www.example.com/foo","news:rec.gardens.roses","ldap://[2001:db8::7]/c=GB?objectClass?one","mailto:John.Doe@example.com","telnet://192.0.2.16:80/","ldap://ldap.example.com/dc=example,dc=com","ldap://ldap.example.com/cn=Barbara%20Jensen,dc=example,dc=com?cn,mail,telephoneNumber"];
		var _g = 0;
		while(_g < urls.length) {
			var url = urls[_g];
			++_g;
			utest_Assert.equals(url,thx__$Url_Url_$Impl_$.toString(thx__$Url_Url_$Impl_$.parse(url,false)),null,{ fileName : "TestUrl.hx", lineNumber : 38, className : "thx.TestUrl", methodName : "testToString"});
		}
	}
	,testAbsolute: function() {
		var url = thx__$Url_Url_$Impl_$.fromString("http://example.com");
		utest_Assert.isTrue(url.hostName != null,null,{ fileName : "TestUrl.hx", lineNumber : 43, className : "thx.TestUrl", methodName : "testAbsolute"});
		utest_Assert.isFalse(url.hostName == null,null,{ fileName : "TestUrl.hx", lineNumber : 44, className : "thx.TestUrl", methodName : "testAbsolute"});
		url = thx__$Url_Url_$Impl_$.fromString("example.com");
		utest_Assert.isTrue(url.hostName != null,null,{ fileName : "TestUrl.hx", lineNumber : 47, className : "thx.TestUrl", methodName : "testAbsolute"});
		utest_Assert.isFalse(url.hostName == null,null,{ fileName : "TestUrl.hx", lineNumber : 48, className : "thx.TestUrl", methodName : "testAbsolute"});
		url = thx__$Url_Url_$Impl_$.fromString("/some/path");
		utest_Assert.isFalse(url.hostName != null,null,{ fileName : "TestUrl.hx", lineNumber : 51, className : "thx.TestUrl", methodName : "testAbsolute"});
		utest_Assert.isTrue(url.hostName == null,null,{ fileName : "TestUrl.hx", lineNumber : 52, className : "thx.TestUrl", methodName : "testAbsolute"});
	}
	,__class__: thx_TestUrl
};
var thx_TestValidation = function() {
};
thx_TestValidation.__name__ = ["thx","TestValidation"];
thx_TestValidation.prototype = {
	or4: function(b1,b2,b3,b4) {
		if(!(b1 || b2 || b3)) {
			return b4;
		} else {
			return true;
		}
	}
	,add: function(a,b) {
		return a + b;
	}
	,testAp: function() {
		var l1 = thx_Either.Left(1);
		var rt = thx_Either.Right(true);
		var rbi = thx_Either.Right(function(b) {
			if(b) {
				return 1;
			} else {
				return 0;
			}
		});
		utest_Assert.same(l1,thx__$Validation_Validation_$Impl_$.ap(l1,rbi,$bind(this,this.add)),null,null,null,{ fileName : "TestValidation.hx", lineNumber : 29, className : "thx.TestValidation", methodName : "testAp"});
		utest_Assert.same(thx_Either.Right(1),thx__$Validation_Validation_$Impl_$.ap(rt,rbi,$bind(this,this.add)),null,null,null,{ fileName : "TestValidation.hx", lineNumber : 30, className : "thx.TestValidation", methodName : "testAp"});
	}
	,testVal4: function() {
		var t = thx_Either.Right(true);
		var f = thx_Either.Right(false);
		var err = thx_Either.Left(1);
		var s = $bind(this,this.add);
		var f1 = $bind(this,this.or4);
		var f2 = function(a,b,c) {
			return function(d) {
				return f1(a,b,c,d);
			};
		};
		utest_Assert.same(t,thx__$Validation_Validation_$Impl_$.ap(f,thx__$Validation_Validation_$Impl_$.ap(f,thx__$Validation_Validation_$Impl_$.ap(f,thx__$Validation_Validation_$Impl_$.ap(t,thx_Either.Right(thx_Functions2.curry(function(a1,b1) {
			return function(c1) {
				return f2(a1,b1,c1);
			};
		})),function(e1,e2) {
			throw new js__$Boot_HaxeError("Unreachable");
		}),s),s),s),null,null,null,{ fileName : "TestValidation.hx", lineNumber : 40, className : "thx.TestValidation", methodName : "testVal4"});
		var tmp = thx_Either.Left(2);
		var s1 = $bind(this,this.add);
		var f3 = $bind(this,this.or4);
		var f4 = function(a2,b2,c2) {
			return function(d1) {
				return f3(a2,b2,c2,d1);
			};
		};
		utest_Assert.same(tmp,thx__$Validation_Validation_$Impl_$.ap(err,thx__$Validation_Validation_$Impl_$.ap(err,thx__$Validation_Validation_$Impl_$.ap(f,thx__$Validation_Validation_$Impl_$.ap(t,thx_Either.Right(thx_Functions2.curry(function(a3,b3) {
			return function(c3) {
				return f4(a3,b3,c3);
			};
		})),function(e11,e21) {
			throw new js__$Boot_HaxeError("Unreachable");
		}),s1),s1),s1),null,null,null,{ fileName : "TestValidation.hx", lineNumber : 41, className : "thx.TestValidation", methodName : "testVal4"});
	}
	,testVal4Nel: function() {
		var t = thx_Either.Right(true);
		var err = thx_Either.Left(thx__$Nel_Nel_$Impl_$.pure(1));
		var tmp = thx_Either.Left(thx__$Nel_Nel_$Impl_$.cons(1,thx__$Nel_Nel_$Impl_$.pure(1)));
		var s = thx__$Nel_Nel_$Impl_$.semigroup();
		var f = $bind(this,this.or4);
		var f1 = function(a,b,c) {
			return function(d) {
				return f(a,b,c,d);
			};
		};
		utest_Assert.same(tmp,thx__$Validation_Validation_$Impl_$.ap(err,thx__$Validation_Validation_$Impl_$.ap(err,thx__$Validation_Validation_$Impl_$.ap(t,thx__$Validation_Validation_$Impl_$.ap(t,thx_Either.Right(thx_Functions2.curry(function(a1,b1) {
			return function(c1) {
				return f1(a1,b1,c1);
			};
		})),function(e1,e2) {
			throw new js__$Boot_HaxeError("Unreachable");
		}),s),s),s),null,null,null,{ fileName : "TestValidation.hx", lineNumber : 48, className : "thx.TestValidation", methodName : "testVal4Nel"});
	}
	,__class__: thx_TestValidation
};
var thx__$Time_Time_$Impl_$ = {};
thx__$Time_Time_$Impl_$.__name__ = ["thx","_Time","Time_Impl_"];
thx__$Time_Time_$Impl_$.fromDays = function(days) {
	return thx__$Time_Time_$Impl_$.create(24 * days,0,0,0);
};
thx__$Time_Time_$Impl_$.fromHours = function(hours) {
	return thx__$Time_Time_$Impl_$.create(hours,0,0,0);
};
thx__$Time_Time_$Impl_$.fromMinutes = function(minutes) {
	return thx__$Time_Time_$Impl_$.create(0,minutes,0,0);
};
thx__$Time_Time_$Impl_$.fromSeconds = function(seconds) {
	return thx__$Time_Time_$Impl_$.create(0,0,seconds,0);
};
thx__$Time_Time_$Impl_$.fromMilliseconds = function(milliseconds) {
	return thx__$Time_Time_$Impl_$.create(0,0,0,milliseconds);
};
thx__$Time_Time_$Impl_$.timeToTicks = function(hours,minutes,seconds) {
	var x = hours * 3600;
	var a = new haxe__$Int64__$_$_$Int64(x >> 31,x);
	var x1 = minutes * 60;
	var b = new haxe__$Int64__$_$_$Int64(x1 >> 31,x1);
	var high = a.high + b.high | 0;
	var low = a.low + b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,a.low) < 0) {
		++high;
		high = high | 0;
	}
	var a1 = new haxe__$Int64__$_$_$Int64(high,low);
	var b1 = new haxe__$Int64__$_$_$Int64(seconds >> 31,seconds);
	var high1 = a1.high + b1.high | 0;
	var low1 = a1.low + b1.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,a1.low) < 0) {
		++high1;
		high1 = high1 | 0;
	}
	var totalSeconds = new haxe__$Int64__$_$_$Int64(high1,low1);
	var b2 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerSecondI64;
	var al = totalSeconds.low & 65535;
	var ah = totalSeconds.low >>> 16;
	var bl = b2.low & 65535;
	var bh = b2.low >>> 16;
	var p00 = haxe__$Int32_Int32_$Impl_$.mul(al,bl);
	var p10 = haxe__$Int32_Int32_$Impl_$.mul(ah,bl);
	var p01 = haxe__$Int32_Int32_$Impl_$.mul(al,bh);
	var p11 = haxe__$Int32_Int32_$Impl_$.mul(ah,bh);
	var low2 = p00;
	var high2 = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 = p01 << 16;
	low2 = p00 + p01 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,p01) < 0) {
		++high2;
		high2 = high2 | 0;
	}
	p10 = p10 << 16;
	low2 = low2 + p10 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,p10) < 0) {
		++high2;
		high2 = high2 | 0;
	}
	high2 = high2 + (haxe__$Int32_Int32_$Impl_$.mul(totalSeconds.low,b2.high) + haxe__$Int32_Int32_$Impl_$.mul(totalSeconds.high,b2.low) | 0) | 0;
	return new haxe__$Int64__$_$_$Int64(high2,low2);
};
thx__$Time_Time_$Impl_$.fromString = function(s) {
	var pattern = new EReg("^([-+])?(?:(\\d+)[.](\\d{1,2})|(\\d+))[:](\\d{2})(?:[:](\\d{2})(?:\\.(\\d+))?)?$","");
	if(!pattern.match(s)) {
		throw new thx_Error("unable to parse Time string: \"" + s + "\"",null,{ fileName : "Time.hx", lineNumber : 32, className : "thx._Time.Time_Impl_", methodName : "fromString"});
	}
	var smticks = pattern.matched(7);
	var mticks = 0;
	if(null != smticks) {
		smticks = "1" + thx_Strings.rpad(smticks,"0",7).substring(0,7);
		mticks = Std.parseInt(smticks) - 10000000;
	}
	var days = 0;
	var hours = 0;
	var minutes = Std.parseInt(pattern.matched(5));
	var seconds = Std.parseInt(pattern.matched(6));
	if(null != pattern.matched(2)) {
		days = Std.parseInt(pattern.matched(2));
		hours = Std.parseInt(pattern.matched(3));
	} else {
		hours = Std.parseInt(pattern.matched(4));
	}
	var this1 = thx__$Time_Time_$Impl_$.create(days * 24 + hours,minutes,seconds);
	var that = new haxe__$Int64__$_$_$Int64(mticks >> 31,mticks);
	var high = this1.high + that.high | 0;
	var low = this1.low + that.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this1.low) < 0) {
		++high;
		high = high | 0;
	}
	var time = new haxe__$Int64__$_$_$Int64(high,low);
	if(pattern.matched(1) == "-") {
		var x = time;
		var high1 = ~x.high;
		var low1 = -x.low;
		if(low1 == 0) {
			++high1;
			high1 = high1 | 0;
		}
		return new haxe__$Int64__$_$_$Int64(high1,low1);
	} else {
		return time;
	}
};
thx__$Time_Time_$Impl_$.compare = function(a,b) {
	return thx_Int64s.compare(a,b);
};
thx__$Time_Time_$Impl_$.create = function(hours,minutes,seconds,milliseconds) {
	if(milliseconds == null) {
		milliseconds = 0;
	}
	if(seconds == null) {
		seconds = 0;
	}
	if(minutes == null) {
		minutes = 0;
	}
	var a = thx__$Time_Time_$Impl_$.timeToTicks(hours,minutes,seconds);
	var a1 = new haxe__$Int64__$_$_$Int64(milliseconds >> 31,milliseconds);
	var b = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMillisecondI64;
	var al = a1.low & 65535;
	var ah = a1.low >>> 16;
	var bl = b.low & 65535;
	var bh = b.low >>> 16;
	var p00 = haxe__$Int32_Int32_$Impl_$.mul(al,bl);
	var p10 = haxe__$Int32_Int32_$Impl_$.mul(ah,bl);
	var p01 = haxe__$Int32_Int32_$Impl_$.mul(al,bh);
	var p11 = haxe__$Int32_Int32_$Impl_$.mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 = p01 << 16;
	low = p00 + p01 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
		++high;
		high = high | 0;
	}
	p10 = p10 << 16;
	low = low + p10 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
		++high;
		high = high | 0;
	}
	high = high + (haxe__$Int32_Int32_$Impl_$.mul(a1.low,b.high) + haxe__$Int32_Int32_$Impl_$.mul(a1.high,b.low) | 0) | 0;
	var b1 = new haxe__$Int64__$_$_$Int64(high,low);
	var high1 = a.high + b1.high | 0;
	var low1 = a.low + b1.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low1,a.low) < 0) {
		++high1;
		high1 = high1 | 0;
	}
	return new haxe__$Int64__$_$_$Int64(high1,low1);
};
thx__$Time_Time_$Impl_$.createDays = function(days,hours,minutes,seconds,milliseconds) {
	if(milliseconds == null) {
		milliseconds = 0;
	}
	if(seconds == null) {
		seconds = 0;
	}
	if(minutes == null) {
		minutes = 0;
	}
	if(hours == null) {
		hours = 0;
	}
	return thx__$Time_Time_$Impl_$.create(days * 24 + hours,minutes,seconds,milliseconds);
};
thx__$Time_Time_$Impl_$._new = function(ticks) {
	return ticks;
};
thx__$Time_Time_$Impl_$.abs = function(this1) {
	var b = new haxe__$Int64__$_$_$Int64(0,0);
	var v = this1.high - b.high | 0;
	if(v != 0) {
		v = v;
	} else {
		v = haxe__$Int32_Int32_$Impl_$.ucompare(this1.low,b.low);
	}
	if((this1.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) < 0) {
		var high = ~this1.high;
		var low = -this1.low;
		if(low == 0) {
			++high;
			high = high | 0;
		}
		return new haxe__$Int64__$_$_$Int64(high,low);
	} else {
		return this1;
	}
};
thx__$Time_Time_$Impl_$.withHours = function(this1,hours) {
	var x = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMinuteI64).quotient,new haxe__$Int64__$_$_$Int64(0,60)).modulus;
	if(x.high != x.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	var tmp = x.low;
	var x1 = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerSecondI64).quotient,new haxe__$Int64__$_$_$Int64(0,60)).modulus;
	if(x1.high != x1.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	var tmp1 = x1.low;
	var x2 = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMillisecondI64).quotient,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.thousandI64).modulus;
	if(x2.high != x2.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	return thx__$Time_Time_$Impl_$.create(hours,tmp,tmp1,x2.low);
};
thx__$Time_Time_$Impl_$.withMinutes = function(this1,minutes) {
	var x = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerHourI64).quotient,new haxe__$Int64__$_$_$Int64(0,24)).modulus;
	if(x.high != x.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	var tmp = x.low;
	var x1 = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerSecondI64).quotient,new haxe__$Int64__$_$_$Int64(0,60)).modulus;
	if(x1.high != x1.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	var tmp1 = x1.low;
	var x2 = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMillisecondI64).quotient,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.thousandI64).modulus;
	if(x2.high != x2.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	return thx__$Time_Time_$Impl_$.create(tmp,minutes,tmp1,x2.low);
};
thx__$Time_Time_$Impl_$.withSeconds = function(this1,seconds) {
	var x = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerHourI64).quotient,new haxe__$Int64__$_$_$Int64(0,24)).modulus;
	if(x.high != x.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	var tmp = x.low;
	var x1 = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMinuteI64).quotient,new haxe__$Int64__$_$_$Int64(0,60)).modulus;
	if(x1.high != x1.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	var tmp1 = x1.low;
	var x2 = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMillisecondI64).quotient,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.thousandI64).modulus;
	if(x2.high != x2.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	return thx__$Time_Time_$Impl_$.create(tmp,tmp1,seconds,x2.low);
};
thx__$Time_Time_$Impl_$.withMilliseconds = function(this1,milliseconds) {
	var x = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerHourI64).quotient,new haxe__$Int64__$_$_$Int64(0,24)).modulus;
	if(x.high != x.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	var tmp = x.low;
	var x1 = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMinuteI64).quotient,new haxe__$Int64__$_$_$Int64(0,60)).modulus;
	if(x1.high != x1.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	var tmp1 = x1.low;
	var x2 = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerSecondI64).quotient,new haxe__$Int64__$_$_$Int64(0,60)).modulus;
	if(x2.high != x2.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	return thx__$Time_Time_$Impl_$.create(tmp,tmp1,x2.low,milliseconds);
};
thx__$Time_Time_$Impl_$.negate = function(this1) {
	var high = ~this1.high;
	var low = -this1.low;
	if(low == 0) {
		++high;
		high = high | 0;
	}
	return new haxe__$Int64__$_$_$Int64(high,low);
};
thx__$Time_Time_$Impl_$.add = function(this1,that) {
	var b = that;
	var high = this1.high + b.high | 0;
	var low = this1.low + b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this1.low) < 0) {
		++high;
		high = high | 0;
	}
	return new haxe__$Int64__$_$_$Int64(high,low);
};
thx__$Time_Time_$Impl_$.addTicks = function(this1,that) {
	var high = this1.high + that.high | 0;
	var low = this1.low + that.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,this1.low) < 0) {
		++high;
		high = high | 0;
	}
	return new haxe__$Int64__$_$_$Int64(high,low);
};
thx__$Time_Time_$Impl_$.subtract = function(this1,that) {
	var b = that;
	var high = this1.high - b.high | 0;
	var low = this1.low - b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(this1.low,b.low) < 0) {
		--high;
		high = high | 0;
	}
	return new haxe__$Int64__$_$_$Int64(high,low);
};
thx__$Time_Time_$Impl_$.compareTo = function(this1,that) {
	return thx_Int64s.compare(this1,that);
};
thx__$Time_Time_$Impl_$.equalsTo = function(this1,that) {
	var b = that;
	if(this1.high == b.high) {
		return this1.low == b.low;
	} else {
		return false;
	}
};
thx__$Time_Time_$Impl_$.equals = function(self,that) {
	var a = self;
	var b = that;
	if(a.high == b.high) {
		return a.low == b.low;
	} else {
		return false;
	}
};
thx__$Time_Time_$Impl_$.notEqualsTo = function(self,that) {
	var a = self;
	var b = that;
	if(!(a.high != b.high)) {
		return a.low != b.low;
	} else {
		return true;
	}
};
thx__$Time_Time_$Impl_$.notEquals = function(this1,that) {
	var b = that;
	if(!(this1.high != b.high)) {
		return this1.low != b.low;
	} else {
		return true;
	}
};
thx__$Time_Time_$Impl_$.greaterThan = function(self,that) {
	var a = self;
	var b = that;
	var v = a.high - b.high | 0;
	if(v != 0) {
		v = v;
	} else {
		v = haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
	}
	return (a.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) > 0;
};
thx__$Time_Time_$Impl_$.greater = function(this1,that) {
	var b = that;
	var v = this1.high - b.high | 0;
	if(v != 0) {
		v = v;
	} else {
		v = haxe__$Int32_Int32_$Impl_$.ucompare(this1.low,b.low);
	}
	return (this1.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) > 0;
};
thx__$Time_Time_$Impl_$.greaterEqualsTo = function(self,that) {
	var a = self;
	var b = that;
	var v = a.high - b.high | 0;
	if(v != 0) {
		v = v;
	} else {
		v = haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
	}
	return (a.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) >= 0;
};
thx__$Time_Time_$Impl_$.greaterEquals = function(this1,that) {
	var b = that;
	var v = this1.high - b.high | 0;
	if(v != 0) {
		v = v;
	} else {
		v = haxe__$Int32_Int32_$Impl_$.ucompare(this1.low,b.low);
	}
	return (this1.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) >= 0;
};
thx__$Time_Time_$Impl_$.lessThan = function(self,that) {
	var a = self;
	var b = that;
	var v = a.high - b.high | 0;
	if(v != 0) {
		v = v;
	} else {
		v = haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
	}
	return (a.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) < 0;
};
thx__$Time_Time_$Impl_$.less = function(this1,that) {
	var b = that;
	var v = this1.high - b.high | 0;
	if(v != 0) {
		v = v;
	} else {
		v = haxe__$Int32_Int32_$Impl_$.ucompare(this1.low,b.low);
	}
	return (this1.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) < 0;
};
thx__$Time_Time_$Impl_$.lessEqualsTo = function(self,that) {
	var a = self;
	var b = that;
	var v = a.high - b.high | 0;
	if(v != 0) {
		v = v;
	} else {
		v = haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
	}
	return (a.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) <= 0;
};
thx__$Time_Time_$Impl_$.lessEquals = function(this1,that) {
	var b = that;
	var v = this1.high - b.high | 0;
	if(v != 0) {
		v = v;
	} else {
		v = haxe__$Int32_Int32_$Impl_$.ucompare(this1.low,b.low);
	}
	return (this1.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) <= 0;
};
thx__$Time_Time_$Impl_$.toDateTimeUtc = function(this1) {
	return this1;
};
thx__$Time_Time_$Impl_$.toString = function(this1) {
	var timeAbs = thx__$Time_Time_$Impl_$.abs(this1);
	var x = haxe__$Int64_Int64_$Impl_$.divMod(timeAbs,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerSecondI64).modulus;
	if(x.high != x.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	var ticksInSecondAbs = x.low;
	var decimals = ticksInSecondAbs != 0?"." + thx_Strings.trimCharsRight(thx_Ints.lpad(ticksInSecondAbs,"0",7),"0"):"";
	var tmp;
	var b = new haxe__$Int64__$_$_$Int64(0,0);
	var v = this1.high - b.high | 0;
	if(v != 0) {
		v = v;
	} else {
		v = haxe__$Int32_Int32_$Impl_$.ucompare(this1.low,b.low);
	}
	if((this1.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) < 0) {
		tmp = "-";
	} else {
		tmp = "";
	}
	var tmp1 = "" + haxe__$Int64_Int64_$Impl_$.toString(haxe__$Int64_Int64_$Impl_$.divMod(timeAbs,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerHourI64).quotient) + ":";
	var x1 = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(timeAbs,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMinuteI64).quotient,new haxe__$Int64__$_$_$Int64(0,60)).modulus;
	if(x1.high != x1.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	var tmp2 = tmp1 + thx_Ints.lpad(x1.low,"0",2) + ":";
	var x2 = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(timeAbs,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerSecondI64).quotient,new haxe__$Int64__$_$_$Int64(0,60)).modulus;
	if(x2.high != x2.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	return tmp + (tmp2 + thx_Ints.lpad(x2.low,"0",2)) + decimals;
};
thx__$Time_Time_$Impl_$.toGmtString = function(this1) {
	var x = haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerHourI64).quotient;
	if(x.high != x.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	var h = thx_Ints.lpad(x.low,"0",2);
	var b = new haxe__$Int64__$_$_$Int64(0,0);
	var v = this1.high - b.high | 0;
	if(v != 0) {
		v = v;
	} else {
		v = haxe__$Int32_Int32_$Impl_$.ucompare(this1.low,b.low);
	}
	if((this1.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) >= 0) {
		h = "+" + h;
	}
	var tmp = "" + h + ":";
	var x1 = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMinuteI64).quotient,new haxe__$Int64__$_$_$Int64(0,60)).modulus;
	if(x1.high != x1.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	return tmp + thx_Ints.lpad(x1.low,"0",2);
};
thx__$Time_Time_$Impl_$.get_ticks = function(this1) {
	return this1;
};
thx__$Time_Time_$Impl_$.get_days = function(this1) {
	var x = haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerDayI64).quotient;
	if(x.high != x.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	return x.low;
};
thx__$Time_Time_$Impl_$.get_hours = function(this1) {
	var x = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerHourI64).quotient,new haxe__$Int64__$_$_$Int64(0,24)).modulus;
	if(x.high != x.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	return x.low;
};
thx__$Time_Time_$Impl_$.get_minutes = function(this1) {
	var x = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMinuteI64).quotient,new haxe__$Int64__$_$_$Int64(0,60)).modulus;
	if(x.high != x.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	return x.low;
};
thx__$Time_Time_$Impl_$.get_seconds = function(this1) {
	var x = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerSecondI64).quotient,new haxe__$Int64__$_$_$Int64(0,60)).modulus;
	if(x.high != x.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	return x.low;
};
thx__$Time_Time_$Impl_$.get_milliseconds = function(this1) {
	var x = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMillisecondI64).quotient,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.thousandI64).modulus;
	if(x.high != x.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	return x.low;
};
thx__$Time_Time_$Impl_$.get_microseconds = function(this1) {
	var x = haxe__$Int64_Int64_$Impl_$.divMod(haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMicrosecondI64).quotient,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.tenThousandI64).modulus;
	if(x.high != x.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	return x.low;
};
thx__$Time_Time_$Impl_$.get_ticksInSecond = function(this1) {
	var x = haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerSecondI64).modulus;
	if(x.high != x.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	return x.low;
};
thx__$Time_Time_$Impl_$.get_totalDays = function(this1) {
	return haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerDayI64).quotient;
};
thx__$Time_Time_$Impl_$.get_totalHours = function(this1) {
	return haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerHourI64).quotient;
};
thx__$Time_Time_$Impl_$.get_totalMinutes = function(this1) {
	return haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMinuteI64).quotient;
};
thx__$Time_Time_$Impl_$.get_totalSeconds = function(this1) {
	return haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerSecondI64).quotient;
};
thx__$Time_Time_$Impl_$.get_totalMilliseconds = function(this1) {
	return haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMillisecondI64).quotient;
};
thx__$Time_Time_$Impl_$.get_totalMicroseconds = function(this1) {
	return haxe__$Int64_Int64_$Impl_$.divMod(this1,thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMicrosecondI64).quotient;
};
thx__$Time_Time_$Impl_$.get_isNegative = function(this1) {
	var b = new haxe__$Int64__$_$_$Int64(0,0);
	var v = this1.high - b.high | 0;
	if(v != 0) {
		v = v;
	} else {
		v = haxe__$Int32_Int32_$Impl_$.ucompare(this1.low,b.low);
	}
	return (this1.high < 0?b.high < 0?v:-1:b.high >= 0?v:1) < 0;
};
var thx_TimePeriod = { __ename__ : ["thx","TimePeriod"], __constructs__ : ["Second","Minute","Hour","Day","Week","Month","Year"] };
thx_TimePeriod.Second = ["Second",0];
thx_TimePeriod.Second.__enum__ = thx_TimePeriod;
thx_TimePeriod.Minute = ["Minute",1];
thx_TimePeriod.Minute.__enum__ = thx_TimePeriod;
thx_TimePeriod.Hour = ["Hour",2];
thx_TimePeriod.Hour.__enum__ = thx_TimePeriod;
thx_TimePeriod.Day = ["Day",3];
thx_TimePeriod.Day.__enum__ = thx_TimePeriod;
thx_TimePeriod.Week = ["Week",4];
thx_TimePeriod.Week.__enum__ = thx_TimePeriod;
thx_TimePeriod.Month = ["Month",5];
thx_TimePeriod.Month.__enum__ = thx_TimePeriod;
thx_TimePeriod.Year = ["Year",6];
thx_TimePeriod.Year.__enum__ = thx_TimePeriod;
var thx_Timer = function() { };
thx_Timer.__name__ = ["thx","Timer"];
thx_Timer.debounce = function(callback,delayms,leading) {
	if(leading == null) {
		leading = false;
	}
	var cancel = thx_Functions.noop;
	var poll = function() {
		cancel();
		cancel = thx_Timer.delay(callback,delayms);
	};
	return function() {
		if(leading) {
			leading = false;
			callback();
		}
		poll();
	};
};
thx_Timer.throttle = function(callback,delayms,leading) {
	if(leading == null) {
		leading = false;
	}
	var waiting = false;
	var poll = function() {
		waiting = true;
		thx_Timer.delay(callback,delayms);
	};
	return function() {
		if(leading) {
			leading = false;
			callback();
			return;
		}
		if(waiting) {
			return;
		}
		poll();
	};
};
thx_Timer.repeat = function(callback,delayms) {
	var id = setInterval(callback,delayms);
	return function() {
		thx_Timer.clear(id);
	};
};
thx_Timer.delay = function(callback,delayms) {
	var id = setTimeout(callback,delayms);
	return function() {
		thx_Timer.clear(id);
	};
};
thx_Timer.frame = function(callback) {
	var cancelled = false;
	var f = thx_Functions.noop;
	var current = performance.now();
	var next;
	f = function() {
		if(cancelled) {
			return;
		}
		next = performance.now();
		callback(next - current);
		current = next;
		requestAnimationFrame(f);
	};
	requestAnimationFrame(f);
	return function() {
		cancelled = true;
	};
};
thx_Timer.nextFrame = function(callback) {
	var id = requestAnimationFrame(callback);
	return function() {
		cancelAnimationFrame(id);
	};
};
thx_Timer.immediate = function(callback) {
	var id = setImmediate(callback);
	return function() {
		thx_Timer.clear(id);
	};
};
thx_Timer.clear = function(id) {
	clearTimeout(id);
	return;
};
thx_Timer.time = function() {
	return performance.now();
};
thx_Timer.resolution = function() {
	if(null != thx_Timer._resolution) {
		return thx_Timer._resolution;
	}
	var start = performance.now();
	var end;
	while(true) {
		end = performance.now();
		if(!(end - start == 0)) {
			break;
		}
	}
	return thx_Timer._resolution = end - start;
};
var thx__$Timestamp_Timestamp_$Impl_$ = {};
thx__$Timestamp_Timestamp_$Impl_$.__name__ = ["thx","_Timestamp","Timestamp_Impl_"];
thx__$Timestamp_Timestamp_$Impl_$.create = function(year,month,day,hour,minute,second) {
	return thx_Dates.create(year,month,day,hour,minute,second).getTime();
};
thx__$Timestamp_Timestamp_$Impl_$.now = function() {
	return new Date().getTime();
};
thx__$Timestamp_Timestamp_$Impl_$.fromDate = function(d) {
	return d.getTime();
};
thx__$Timestamp_Timestamp_$Impl_$.fromString = function(s) {
	return HxOverrides.strDate(s).getTime();
};
thx__$Timestamp_Timestamp_$Impl_$.toDate = function(this1) {
	return new Date(this1);
};
thx__$Timestamp_Timestamp_$Impl_$.toString = function(this1) {
	return HxOverrides.dateStr(new Date(this1));
};
thx__$Timestamp_Timestamp_$Impl_$.snapNext = function(this1,period) {
	switch(period[1]) {
	case 0:
		return Math.ceil(this1 / 1000.0) * 1000.0;
	case 1:
		return Math.ceil(this1 / 60000.0) * 60000.0;
	case 2:
		return Math.ceil(this1 / 3600000.0) * 3600000.0;
	case 3:
		var d = new Date(this1);
		return thx_Dates.create(d.getFullYear(),d.getMonth(),d.getDate() + 1,0,0,0).getTime();
	case 4:
		var d1 = new Date(this1);
		var wd = d1.getDay();
		return thx_Dates.create(d1.getFullYear(),d1.getMonth(),d1.getDate() + 7 - wd,0,0,0).getTime();
	case 5:
		var d2 = new Date(this1);
		return thx_Dates.create(d2.getFullYear(),d2.getMonth() + 1,1,0,0,0).getTime();
	case 6:
		return thx_Dates.create(new Date(this1).getFullYear() + 1,0,1,0,0,0).getTime();
	}
};
thx__$Timestamp_Timestamp_$Impl_$.snapPrev = function(this1,period) {
	switch(period[1]) {
	case 0:
		return Math.floor(this1 / 1000.0) * 1000.0;
	case 1:
		return Math.floor(this1 / 60000.0) * 60000.0;
	case 2:
		return Math.floor(this1 / 3600000.0) * 3600000.0;
	case 3:
		var d = new Date(this1);
		return thx_Dates.create(d.getFullYear(),d.getMonth(),d.getDate(),0,0,0).getTime();
	case 4:
		var d1 = new Date(this1);
		var wd = d1.getDay();
		return thx_Dates.create(d1.getFullYear(),d1.getMonth(),d1.getDate() - wd,0,0,0).getTime();
	case 5:
		var d2 = new Date(this1);
		return thx_Dates.create(d2.getFullYear(),d2.getMonth(),1,0,0,0).getTime();
	case 6:
		return thx_Dates.create(new Date(this1).getFullYear(),0,1,0,0,0).getTime();
	}
};
thx__$Timestamp_Timestamp_$Impl_$.snapTo = function(this1,period) {
	switch(period[1]) {
	case 0:
		return Math.round(this1 / 1000.0) * 1000.0;
	case 1:
		return Math.round(this1 / 60000.0) * 60000.0;
	case 2:
		return Math.round(this1 / 3600000.0) * 3600000.0;
	case 3:
		var d = new Date(this1);
		var mod = d.getHours() >= 12?1:0;
		return thx_Dates.create(d.getFullYear(),d.getMonth(),d.getDate() + mod,0,0,0).getTime();
	case 4:
		var d1 = new Date(this1);
		var wd = d1.getDay();
		var mod1 = wd < 3?-wd:wd > 3?7 - wd:d1.getHours() < 12?-wd:7 - wd;
		return thx_Dates.create(d1.getFullYear(),d1.getMonth(),d1.getDate() + mod1,0,0,0).getTime();
	case 5:
		var d2 = new Date(this1);
		var mod2 = d2.getDate() > Math.round(DateTools.getMonthDays(d2) / 2)?1:0;
		return thx_Dates.create(d2.getFullYear(),d2.getMonth() + mod2,1,0,0,0).getTime();
	case 6:
		var d3 = new Date(this1);
		var mod3 = this1 > new Date(d3.getFullYear(),6,2,0,0,0).getTime()?1:0;
		return thx_Dates.create(d3.getFullYear() + mod3,0,1,0,0,0).getTime();
	}
};
thx__$Timestamp_Timestamp_$Impl_$.r = function(t,v) {
	return Math.round(t / v) * v;
};
thx__$Timestamp_Timestamp_$Impl_$.f = function(t,v) {
	return Math.floor(t / v) * v;
};
thx__$Timestamp_Timestamp_$Impl_$.c = function(t,v) {
	return Math.ceil(t / v) * v;
};
var thx__$Tuple_Tuple0_$Impl_$ = {};
thx__$Tuple_Tuple0_$Impl_$.__name__ = ["thx","_Tuple","Tuple0_Impl_"];
thx__$Tuple_Tuple0_$Impl_$._new = function() {
	return thx_Nil.nil;
};
thx__$Tuple_Tuple0_$Impl_$["with"] = function(this1,v) {
	return v;
};
thx__$Tuple_Tuple0_$Impl_$.toString = function(this1) {
	return "Tuple0()";
};
thx__$Tuple_Tuple0_$Impl_$.toNil = function(this1) {
	return this1;
};
thx__$Tuple_Tuple0_$Impl_$.nilToTuple = function(v) {
	return thx_Nil.nil;
};
var thx__$Tuple_Tuple1_$Impl_$ = {};
thx__$Tuple_Tuple1_$Impl_$.__name__ = ["thx","_Tuple","Tuple1_Impl_"];
thx__$Tuple_Tuple1_$Impl_$._new = function(_0) {
	return _0;
};
thx__$Tuple_Tuple1_$Impl_$.get__0 = function(this1) {
	return this1;
};
thx__$Tuple_Tuple1_$Impl_$["with"] = function(this1,v) {
	return { _0 : this1, _1 : v};
};
thx__$Tuple_Tuple1_$Impl_$.toString = function(this1) {
	return "Tuple1(" + Std.string(this1) + ")";
};
thx__$Tuple_Tuple1_$Impl_$.arrayToTuple = function(v) {
	return v[0];
};
var thx__$Tuple_Tuple2_$Impl_$ = {};
thx__$Tuple_Tuple2_$Impl_$.__name__ = ["thx","_Tuple","Tuple2_Impl_"];
thx__$Tuple_Tuple2_$Impl_$.of = function(_0,_1) {
	return { _0 : _0, _1 : _1};
};
thx__$Tuple_Tuple2_$Impl_$._new = function(_0,_1) {
	return { _0 : _0, _1 : _1};
};
thx__$Tuple_Tuple2_$Impl_$.get_left = function(this1) {
	return this1._0;
};
thx__$Tuple_Tuple2_$Impl_$.get_right = function(this1) {
	return this1._1;
};
thx__$Tuple_Tuple2_$Impl_$.flip = function(this1) {
	return { _0 : this1._1, _1 : this1._0};
};
thx__$Tuple_Tuple2_$Impl_$.dropLeft = function(this1) {
	return this1._1;
};
thx__$Tuple_Tuple2_$Impl_$.dropRight = function(this1) {
	return this1._0;
};
thx__$Tuple_Tuple2_$Impl_$["with"] = function(this1,v) {
	return { _0 : this1._0, _1 : this1._1, _2 : v};
};
thx__$Tuple_Tuple2_$Impl_$.toString = function(this1) {
	return "Tuple2(" + Std.string(this1._0) + "," + Std.string(this1._1) + ")";
};
thx__$Tuple_Tuple2_$Impl_$.map = function(this1,f) {
	return { _0 : this1._0, _1 : f(this1._1)};
};
thx__$Tuple_Tuple2_$Impl_$.arrayToTuple2 = function(v) {
	return { _0 : v[0], _1 : v[1]};
};
var thx__$Tuple_Tuple3_$Impl_$ = {};
thx__$Tuple_Tuple3_$Impl_$.__name__ = ["thx","_Tuple","Tuple3_Impl_"];
thx__$Tuple_Tuple3_$Impl_$.of = function(_0,_1,_2) {
	return { _0 : _0, _1 : _1, _2 : _2};
};
thx__$Tuple_Tuple3_$Impl_$._new = function(_0,_1,_2) {
	return { _0 : _0, _1 : _1, _2 : _2};
};
thx__$Tuple_Tuple3_$Impl_$.flip = function(this1) {
	return { _0 : this1._2, _1 : this1._1, _2 : this1._0};
};
thx__$Tuple_Tuple3_$Impl_$.dropLeft = function(this1) {
	return { _0 : this1._1, _1 : this1._2};
};
thx__$Tuple_Tuple3_$Impl_$.dropRight = function(this1) {
	return { _0 : this1._0, _1 : this1._1};
};
thx__$Tuple_Tuple3_$Impl_$["with"] = function(this1,v) {
	return { _0 : this1._0, _1 : this1._1, _2 : this1._2, _3 : v};
};
thx__$Tuple_Tuple3_$Impl_$.toString = function(this1) {
	return "Tuple3(" + Std.string(this1._0) + "," + Std.string(this1._1) + "," + Std.string(this1._2) + ")";
};
thx__$Tuple_Tuple3_$Impl_$.arrayToTuple3 = function(v) {
	return { _0 : v[0], _1 : v[1], _2 : v[2]};
};
thx__$Tuple_Tuple3_$Impl_$.map = function(this1,f) {
	return { _0 : this1._0, _1 : this1._1, _2 : f(this1._2)};
};
var thx__$Tuple_Tuple4_$Impl_$ = {};
thx__$Tuple_Tuple4_$Impl_$.__name__ = ["thx","_Tuple","Tuple4_Impl_"];
thx__$Tuple_Tuple4_$Impl_$.of = function(_0,_1,_2,_3) {
	return { _0 : _0, _1 : _1, _2 : _2, _3 : _3};
};
thx__$Tuple_Tuple4_$Impl_$._new = function(_0,_1,_2,_3) {
	return { _0 : _0, _1 : _1, _2 : _2, _3 : _3};
};
thx__$Tuple_Tuple4_$Impl_$.flip = function(this1) {
	return { _0 : this1._3, _1 : this1._2, _2 : this1._1, _3 : this1._0};
};
thx__$Tuple_Tuple4_$Impl_$.dropLeft = function(this1) {
	return { _0 : this1._1, _1 : this1._2, _2 : this1._3};
};
thx__$Tuple_Tuple4_$Impl_$.dropRight = function(this1) {
	return { _0 : this1._0, _1 : this1._1, _2 : this1._2};
};
thx__$Tuple_Tuple4_$Impl_$["with"] = function(this1,v) {
	return { _0 : this1._0, _1 : this1._1, _2 : this1._2, _3 : this1._3, _4 : v};
};
thx__$Tuple_Tuple4_$Impl_$.toString = function(this1) {
	return "Tuple4(" + Std.string(this1._0) + "," + Std.string(this1._1) + "," + Std.string(this1._2) + "," + Std.string(this1._3) + ")";
};
thx__$Tuple_Tuple4_$Impl_$.arrayToTuple4 = function(v) {
	return { _0 : v[0], _1 : v[1], _2 : v[2], _3 : v[3]};
};
var thx__$Tuple_Tuple5_$Impl_$ = {};
thx__$Tuple_Tuple5_$Impl_$.__name__ = ["thx","_Tuple","Tuple5_Impl_"];
thx__$Tuple_Tuple5_$Impl_$.of = function(_0,_1,_2,_3,_4) {
	return { _0 : _0, _1 : _1, _2 : _2, _3 : _3, _4 : _4};
};
thx__$Tuple_Tuple5_$Impl_$._new = function(_0,_1,_2,_3,_4) {
	return { _0 : _0, _1 : _1, _2 : _2, _3 : _3, _4 : _4};
};
thx__$Tuple_Tuple5_$Impl_$.flip = function(this1) {
	return { _0 : this1._4, _1 : this1._3, _2 : this1._2, _3 : this1._1, _4 : this1._0};
};
thx__$Tuple_Tuple5_$Impl_$.dropLeft = function(this1) {
	return { _0 : this1._1, _1 : this1._2, _2 : this1._3, _3 : this1._4};
};
thx__$Tuple_Tuple5_$Impl_$.dropRight = function(this1) {
	return { _0 : this1._0, _1 : this1._1, _2 : this1._2, _3 : this1._3};
};
thx__$Tuple_Tuple5_$Impl_$["with"] = function(this1,v) {
	return { _0 : this1._0, _1 : this1._1, _2 : this1._2, _3 : this1._3, _4 : this1._4, _5 : v};
};
thx__$Tuple_Tuple5_$Impl_$.toString = function(this1) {
	return "Tuple5(" + Std.string(this1._0) + "," + Std.string(this1._1) + "," + Std.string(this1._2) + "," + Std.string(this1._3) + "," + Std.string(this1._4) + ")";
};
thx__$Tuple_Tuple5_$Impl_$.arrayToTuple5 = function(v) {
	return { _0 : v[0], _1 : v[1], _2 : v[2], _3 : v[3], _4 : v[4]};
};
var thx__$Tuple_Tuple6_$Impl_$ = {};
thx__$Tuple_Tuple6_$Impl_$.__name__ = ["thx","_Tuple","Tuple6_Impl_"];
thx__$Tuple_Tuple6_$Impl_$.of = function(_0,_1,_2,_3,_4,_5) {
	return { _0 : _0, _1 : _1, _2 : _2, _3 : _3, _4 : _4, _5 : _5};
};
thx__$Tuple_Tuple6_$Impl_$._new = function(_0,_1,_2,_3,_4,_5) {
	return { _0 : _0, _1 : _1, _2 : _2, _3 : _3, _4 : _4, _5 : _5};
};
thx__$Tuple_Tuple6_$Impl_$.flip = function(this1) {
	return { _0 : this1._5, _1 : this1._4, _2 : this1._3, _3 : this1._2, _4 : this1._1, _5 : this1._0};
};
thx__$Tuple_Tuple6_$Impl_$.dropLeft = function(this1) {
	return { _0 : this1._1, _1 : this1._2, _2 : this1._3, _3 : this1._4, _4 : this1._5};
};
thx__$Tuple_Tuple6_$Impl_$.dropRight = function(this1) {
	return { _0 : this1._0, _1 : this1._1, _2 : this1._2, _3 : this1._3, _4 : this1._4};
};
thx__$Tuple_Tuple6_$Impl_$.toString = function(this1) {
	return "Tuple6(" + Std.string(this1._0) + "," + Std.string(this1._1) + "," + Std.string(this1._2) + "," + Std.string(this1._3) + "," + Std.string(this1._4) + "," + Std.string(this1._5) + ")";
};
thx__$Tuple_Tuple6_$Impl_$.arrayToTuple6 = function(v) {
	return { _0 : v[0], _1 : v[1], _2 : v[2], _3 : v[3], _4 : v[4], _5 : v[5]};
};
var thx_Types = function() { };
thx_Types.__name__ = ["thx","Types"];
thx_Types.isAnonymousObject = function(v) {
	if(Reflect.isObject(v)) {
		return null == (v == null?null:js_Boot.getClass(v));
	} else {
		return false;
	}
};
thx_Types.isPrimitive = function(v) {
	var _g = Type["typeof"](v);
	switch(_g[1]) {
	case 1:case 2:case 3:
		return true;
	case 6:
		return Type.getClassName(_g[2]) == "String";
	case 0:case 4:case 5:case 7:case 8:
		return false;
	}
};
thx_Types.isEnumValue = function(v) {
	if(Type["typeof"](v)[1] == 7) {
		return true;
	} else {
		return false;
	}
};
thx_Types.hasSuperClass = function(cls,sup) {
	while(null != cls) {
		if(cls == sup) {
			return true;
		}
		cls = Type.getSuperClass(cls);
	}
	return false;
};
thx_Types.sameType = function(a,b) {
	return thx_Types.toString(Type["typeof"](a)) == thx_Types.toString(Type["typeof"](b));
};
thx_Types.typeInheritance = function(type) {
	switch(type[1]) {
	case 1:
		return ["Int"];
	case 2:
		return ["Float"];
	case 3:
		return ["Bool"];
	case 4:
		return ["{}"];
	case 5:
		return ["Function"];
	case 6:
		var c = type[2];
		var classes = [];
		while(null != c) {
			classes.push(c);
			c = Type.getSuperClass(c);
		}
		return classes.map(Type.getClassName);
	case 7:
		return [Type.getEnumName(type[2])];
	default:
		throw new js__$Boot_HaxeError("invalid type " + Std.string(type));
	}
};
thx_Types.toString = function(type) {
	switch(type[1]) {
	case 0:
		return "Null";
	case 1:
		return "Int";
	case 2:
		return "Float";
	case 3:
		return "Bool";
	case 4:
		return "{}";
	case 5:
		return "Function";
	case 6:
		return Type.getClassName(type[2]);
	case 7:
		return Type.getEnumName(type[2]);
	default:
		throw new js__$Boot_HaxeError("invalid type " + Std.string(type));
	}
};
thx_Types.valueTypeInheritance = function(value) {
	return thx_Types.typeInheritance(Type["typeof"](value));
};
thx_Types.valueTypeToString = function(value) {
	return thx_Types.toString(Type["typeof"](value));
};
thx_Types.anyValueToString = function(value) {
	if(js_Boot.__instanceof(value,ValueType)) {
		return thx_Types.toString(value);
	}
	if(js_Boot.__instanceof(value,Class)) {
		return Type.getClassName(value);
	}
	if(js_Boot.__instanceof(value,Enum)) {
		return Type.getEnumName(value);
	}
	return thx_Types.toString(Type["typeof"](value));
};
var thx_Unit = { __ename__ : ["thx","Unit"], __constructs__ : ["unit"] };
thx_Unit.unit = ["unit",0];
thx_Unit.unit.__enum__ = thx_Unit;
var thx__$Url_Url_$Impl_$ = {};
thx__$Url_Url_$Impl_$.__name__ = ["thx","_Url","Url_Impl_"];
thx__$Url_Url_$Impl_$.fromString = function(s) {
	return thx__$Url_Url_$Impl_$.parse(s,true);
};
thx__$Url_Url_$Impl_$.parse = function(s,parseQueryString) {
	if(!thx__$Url_Url_$Impl_$.pattern.match(s)) {
		throw new thx_Error("unable to parse \"" + s + "\" to Url",null,{ fileName : "Url.hx", lineNumber : 21, className : "thx._Url.Url_Impl_", methodName : "parse"});
	}
	var port = thx__$Url_Url_$Impl_$.pattern.matched(12);
	var o = { protocol : thx__$Url_Url_$Impl_$.pattern.matched(4), slashes : thx__$Url_Url_$Impl_$.pattern.matched(5) == "//", auth : thx__$Url_Url_$Impl_$.pattern.matched(7), hostName : thx__$Url_Url_$Impl_$.pattern.matched(11), port : null == port?null:Std.parseInt(port), pathName : thx__$Url_Url_$Impl_$.pattern.matched(13), queryString : null, search : null, hash : thx__$Url_Url_$Impl_$.pattern.matched(17)};
	thx__$Url_Url_$Impl_$.set_search(o,thx__$Url_Url_$Impl_$.pattern.matched(16));
	return o;
};
thx__$Url_Url_$Impl_$.equals = function(self,that) {
	return thx__$Url_Url_$Impl_$.equalsTo(self,that);
};
thx__$Url_Url_$Impl_$.equalsTo = function(this1,that) {
	if(this1.protocol == that.protocol && this1.slashes == that.slashes && this1.auth == that.auth && this1.hostName == that.hostName && this1.port == that.port && this1.pathName == that.pathName && thx__$QueryString_QueryString_$Impl_$.equals(this1.queryString,that.queryString) && this1.search == thx__$Url_Url_$Impl_$.get_search(that)) {
		return this1.hash == that.hash;
	} else {
		return false;
	}
};
thx__$Url_Url_$Impl_$.concatString = function(this1,that) {
	var copy = thx__$Url_Url_$Impl_$.clone(this1);
	if(thx_Strings.isEmpty(this1.pathName)) {
		if(!StringTools.startsWith(that,"/")) {
			that = "/" + that;
		}
		copy.pathName = that;
	} else {
		if(StringTools.startsWith(that,"/")) {
			that = that.substring(1);
		}
		if(StringTools.endsWith(this1.pathName,"/")) {
			copy.pathName = copy.pathName + that;
		} else {
			copy.pathName = copy.pathName + "/" + that;
		}
	}
	return copy;
};
thx__$Url_Url_$Impl_$.toString = function(this1) {
	if(this1.hostName != null) {
		var tmp = "" + (this1.protocol != null?this1.protocol + ":":"") + (this1.slashes?"//":"") + (this1.auth != null?this1.auth + "@":"") + (this1.hostName + (this1.port != null?":" + this1.port:""));
		var tmp1;
		var tmp2;
		if(this1.search == null) {
			if(this1.queryString != null) {
				var _this = this1.queryString;
				tmp2 = !(!new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys()).hasNext());
			} else {
				tmp2 = false;
			}
		} else {
			tmp2 = true;
		}
		if(tmp2) {
			tmp1 = "?" + thx__$Url_Url_$Impl_$.get_search(this1);
		} else {
			tmp1 = "";
		}
		return tmp + (this1.pathName + tmp1) + (this1.hash != null?"#" + this1.hash:"");
	} else {
		var tmp3;
		var tmp4;
		if(this1.search == null) {
			if(this1.queryString != null) {
				var _this1 = this1.queryString;
				tmp4 = !(!new haxe_ds__$StringMap_StringMapIterator(_this1,_this1.arrayKeys()).hasNext());
			} else {
				tmp4 = false;
			}
		} else {
			tmp4 = true;
		}
		if(tmp4) {
			tmp3 = "?" + thx__$Url_Url_$Impl_$.get_search(this1);
		} else {
			tmp3 = "";
		}
		return "" + (this1.pathName + tmp3) + (this1.hash != null?"#" + this1.hash:"");
	}
};
thx__$Url_Url_$Impl_$.clone = function(this1) {
	return { protocol : this1.protocol, slashes : this1.slashes, auth : this1.auth, hostName : this1.hostName, port : this1.port, pathName : this1.pathName, queryString : thx__$QueryString_QueryString_$Impl_$.clone(this1.queryString), search : thx__$Url_Url_$Impl_$.get_search(this1), hash : this1.hash};
};
thx__$Url_Url_$Impl_$.ensureQueryString = function(this1) {
	if(this1.queryString != null) {
		return this1.queryString;
	} else {
		var value = new haxe_ds_StringMap();
		if(null != value) {
			this1.search = null;
		}
		return this1.queryString = value;
	}
};
thx__$Url_Url_$Impl_$.get_auth = function(this1) {
	return this1.auth;
};
thx__$Url_Url_$Impl_$.set_auth = function(this1,value) {
	return this1.auth = value;
};
thx__$Url_Url_$Impl_$.get_hasAuth = function(this1) {
	return this1.auth != null;
};
thx__$Url_Url_$Impl_$.get_hasHash = function(this1) {
	return this1.hash != null;
};
thx__$Url_Url_$Impl_$.get_hasPort = function(this1) {
	return this1.port != null;
};
thx__$Url_Url_$Impl_$.get_hasProtocol = function(this1) {
	return this1.protocol != null;
};
thx__$Url_Url_$Impl_$.get_hasQueryString = function(this1) {
	if(this1.queryString != null) {
		var _this = this1.queryString;
		return !(!new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys()).hasNext());
	} else {
		return false;
	}
};
thx__$Url_Url_$Impl_$.get_hasSearch = function(this1) {
	if(this1.search == null) {
		if(this1.queryString != null) {
			var _this = this1.queryString;
			return !(!new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys()).hasNext());
		} else {
			return false;
		}
	} else {
		return true;
	}
};
thx__$Url_Url_$Impl_$.get_host = function(this1) {
	return this1.hostName + (this1.port != null?":" + this1.port:"");
};
thx__$Url_Url_$Impl_$.set_host = function(this1,host) {
	var p = host.indexOf(":");
	if(p < 0) {
		this1.hostName = host;
		this1.port = null;
	} else {
		this1.hostName = host.substring(0,p);
		this1.port = Std.parseInt(host.substring(p + 1));
	}
	return host;
};
thx__$Url_Url_$Impl_$.get_hostName = function(this1) {
	return this1.hostName;
};
thx__$Url_Url_$Impl_$.set_hostName = function(this1,hostName) {
	return this1.hostName = hostName;
};
thx__$Url_Url_$Impl_$.get_href = function(this1) {
	return thx__$Url_Url_$Impl_$.toString(this1);
};
thx__$Url_Url_$Impl_$.set_href = function(this1,value) {
	this1 = thx__$Url_Url_$Impl_$.parse(value,true);
	return value;
};
thx__$Url_Url_$Impl_$.get_isAbsolute = function(this1) {
	return this1.hostName != null;
};
thx__$Url_Url_$Impl_$.get_isRelative = function(this1) {
	return this1.hostName == null;
};
thx__$Url_Url_$Impl_$.get_path = function(this1) {
	var tmp;
	var tmp1;
	if(this1.search == null) {
		if(this1.queryString != null) {
			var _this = this1.queryString;
			tmp1 = !(!new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys()).hasNext());
		} else {
			tmp1 = false;
		}
	} else {
		tmp1 = true;
	}
	if(tmp1) {
		tmp = "?" + thx__$Url_Url_$Impl_$.get_search(this1);
	} else {
		tmp = "";
	}
	return this1.pathName + tmp;
};
thx__$Url_Url_$Impl_$.set_path = function(this1,value) {
	var p = value.indexOf("?");
	if(p < 0) {
		this1.pathName = value;
		this1.search = null;
		this1.queryString = null;
	} else {
		this1.pathName = value.substring(0,p);
		thx__$Url_Url_$Impl_$.set_search(this1,value.substring(p + 1));
	}
	return value;
};
thx__$Url_Url_$Impl_$.get_pathName = function(this1) {
	return this1.pathName;
};
thx__$Url_Url_$Impl_$.set_pathName = function(this1,value) {
	return this1.pathName = value;
};
thx__$Url_Url_$Impl_$.get_port = function(this1) {
	return this1.port;
};
thx__$Url_Url_$Impl_$.set_port = function(this1,value) {
	return this1.port = value;
};
thx__$Url_Url_$Impl_$.get_protocol = function(this1) {
	return this1.protocol;
};
thx__$Url_Url_$Impl_$.set_protocol = function(this1,value) {
	return this1.protocol = null == value?null:value.toLowerCase();
};
thx__$Url_Url_$Impl_$.get_hash = function(this1) {
	return this1.hash;
};
thx__$Url_Url_$Impl_$.set_hash = function(this1,value) {
	return this1.hash = value;
};
thx__$Url_Url_$Impl_$.get_slashes = function(this1) {
	return this1.slashes;
};
thx__$Url_Url_$Impl_$.set_slashes = function(this1,value) {
	return this1.slashes = value;
};
thx__$Url_Url_$Impl_$.get_queryString = function(this1) {
	return this1.queryString;
};
thx__$Url_Url_$Impl_$.set_queryString = function(this1,value) {
	if(null != value) {
		this1.search = null;
	}
	return this1.queryString = value;
};
thx__$Url_Url_$Impl_$.get_search = function(this1) {
	if(null != this1.search && "" != this1.search) {
		return this1.search;
	} else {
		return thx__$QueryString_QueryString_$Impl_$.toStringWithSymbols(this1.queryString,thx__$QueryString_QueryString_$Impl_$.separator,thx__$QueryString_QueryString_$Impl_$.assignment,thx__$QueryString_QueryString_$Impl_$.encodeURIComponent);
	}
};
thx__$Url_Url_$Impl_$.set_search = function(this1,value) {
	var qs;
	try {
		qs = thx__$QueryString_QueryString_$Impl_$.parseWithSymbols(value,thx__$QueryString_QueryString_$Impl_$.separator,thx__$QueryString_QueryString_$Impl_$.assignment,thx__$QueryString_QueryString_$Impl_$.decodeURIComponent);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		qs = null;
	}
	var tmp;
	if(qs != null) {
		var arr = thx_Iterators.toArray(qs.keys());
		if(arr.length == 0) {
			tmp = true;
		} else if(arr.length != 1) {
			tmp = false;
		} else {
			var _this = qs;
			var key = arr[0];
			tmp = (__map_reserved[key] != null?_this.getReserved(key):_this.h[key]).length == 0;
		}
	} else {
		tmp = true;
	}
	if(tmp) {
		this1.search = value;
		this1.queryString = null;
	} else {
		this1.queryString = qs;
		this1.search = null;
	}
	return value;
};
var thx_Uuid = function() { };
thx_Uuid.__name__ = ["thx","Uuid"];
thx_Uuid.random = function() {
	return Math.floor(Math.random() * 16);
};
thx_Uuid.srandom = function() {
	return "0123456789ABCDEF".charAt(Math.floor(Math.random() * 16));
};
thx_Uuid.create = function() {
	var s = [];
	var _g = 0;
	while(_g < 8) s[_g++] = "0123456789ABCDEF".charAt(Math.floor(Math.random() * 16));
	s[8] = "-";
	var _g1 = 9;
	while(_g1 < 13) s[_g1++] = "0123456789ABCDEF".charAt(Math.floor(Math.random() * 16));
	s[13] = "-";
	s[14] = "4";
	var _g2 = 15;
	while(_g2 < 18) s[_g2++] = "0123456789ABCDEF".charAt(Math.floor(Math.random() * 16));
	s[18] = "-";
	s[19] = "89AB".charAt(Math.floor(Math.random() * 16) & 3);
	var _g3 = 20;
	while(_g3 < 23) s[_g3++] = "0123456789ABCDEF".charAt(Math.floor(Math.random() * 16));
	s[23] = "-";
	var _g4 = 24;
	while(_g4 < 36) s[_g4++] = "0123456789ABCDEF".charAt(Math.floor(Math.random() * 16));
	return s.join("");
};
var thx__$Validation_Validation_$Impl_$ = {};
thx__$Validation_Validation_$Impl_$.__name__ = ["thx","_Validation","Validation_Impl_"];
thx__$Validation_Validation_$Impl_$.validation = function(e) {
	return e;
};
thx__$Validation_Validation_$Impl_$.vnel = function(e) {
	return e;
};
thx__$Validation_Validation_$Impl_$.pure = function(a) {
	return thx_Either.Right(a);
};
thx__$Validation_Validation_$Impl_$.success = function(a) {
	return thx_Either.Right(a);
};
thx__$Validation_Validation_$Impl_$.failure = function(e) {
	return thx_Either.Left(e);
};
thx__$Validation_Validation_$Impl_$.nn = function(a,e) {
	if(a == null) {
		return thx_Either.Left(e);
	} else {
		return thx_Either.Right(a);
	}
};
thx__$Validation_Validation_$Impl_$.successNel = function(a) {
	return thx_Either.Right(a);
};
thx__$Validation_Validation_$Impl_$.failureNel = function(e) {
	return thx_Either.Left(thx__$Nel_Nel_$Impl_$.pure(e));
};
thx__$Validation_Validation_$Impl_$.nnNel = function(a,e) {
	if(a == null) {
		return thx_Either.Left(thx__$Nel_Nel_$Impl_$.pure(e));
	} else {
		return thx_Either.Right(a);
	}
};
thx__$Validation_Validation_$Impl_$.get_either = function(this1) {
	return this1;
};
thx__$Validation_Validation_$Impl_$.map = function(this1,f) {
	return thx__$Validation_Validation_$Impl_$.ap(this1,thx_Either.Right(f),function(e1,e2) {
		throw new js__$Boot_HaxeError("Unreachable");
	});
};
thx__$Validation_Validation_$Impl_$.foldLeft = function(this1,b,f) {
	switch(this1[1]) {
	case 0:
		return b;
	case 1:
		return f(b,this1[2]);
	}
};
thx__$Validation_Validation_$Impl_$.foldMap = function(this1,f,m) {
	var tmp = thx_Eithers.map(this1,f);
	var tmp1 = thx__$Monoid_Monoid_$Impl_$.get_zero(m);
	var _e = m;
	return thx__$Validation_Validation_$Impl_$.foldLeft(tmp,tmp1,function(a0,a1) {
		return thx__$Monoid_Monoid_$Impl_$.append(_e,a0,a1);
	});
};
thx__$Validation_Validation_$Impl_$.ap = function(this1,v,s) {
	switch(this1[1]) {
	case 0:
		var e0 = this1[2];
		var _g = v;
		switch(_g[1]) {
		case 0:
			return thx_Either.Left((thx__$Semigroup_Semigroup_$Impl_$.get_append(s))(e0,_g[2]));
		case 1:
			return thx_Either.Left(e0);
		}
		break;
	case 1:
		var a = this1[2];
		var _g1 = v;
		switch(_g1[1]) {
		case 0:
			return thx_Either.Left(_g1[2]);
		case 1:
			return thx_Either.Right(_g1[2](a));
		}
		break;
	}
};
thx__$Validation_Validation_$Impl_$.zip = function(this1,v,s) {
	return thx__$Validation_Validation_$Impl_$.ap(this1,thx_Eithers.map(v,function(b) {
		var _1 = b;
		return function(_0) {
			return thx__$Tuple_Tuple2_$Impl_$.of(_0,_1);
		};
	}),s);
};
thx__$Validation_Validation_$Impl_$.leftMap = function(this1,f) {
	return thx_Eithers.leftMap(this1,f);
};
thx__$Validation_Validation_$Impl_$.wrapNel = function(this1) {
	return thx_Eithers.leftMap(this1,thx__$Nel_Nel_$Impl_$.pure);
};
thx__$Validation_Validation_$Impl_$.ensure = function(this1,p,error) {
	if(this1[1] == 1) {
		if(p(this1[2])) {
			return this1;
		} else {
			return thx_Either.Left(error);
		}
	} else {
		return this1;
	}
};
thx__$Validation_Validation_$Impl_$.flatMapV = function(this1,f) {
	switch(this1[1]) {
	case 0:
		return thx_Either.Left(this1[2]);
	case 1:
		return f(this1[2]);
	}
};
thx__$Validation_Validation_$Impl_$.val2 = function(f,v1,v2,s) {
	return thx__$Validation_Validation_$Impl_$.ap(v2,thx__$Validation_Validation_$Impl_$.ap(v1,thx_Either.Right(thx_Functions2.curry(f)),function(e1,e2) {
		throw new js__$Boot_HaxeError("Unreachable");
	}),s);
};
thx__$Validation_Validation_$Impl_$.val3 = function(f,v1,v2,v3,s) {
	var f1 = f;
	return thx__$Validation_Validation_$Impl_$.ap(v3,thx__$Validation_Validation_$Impl_$.ap(v2,thx__$Validation_Validation_$Impl_$.ap(v1,thx_Either.Right(thx_Functions2.curry(function(a,b) {
		return function(c) {
			return f1(a,b,c);
		};
	})),function(e1,e2) {
		throw new js__$Boot_HaxeError("Unreachable");
	}),s),s);
};
thx__$Validation_Validation_$Impl_$.val4 = function(f,v1,v2,v3,v4,s) {
	var f1 = f;
	var f2 = function(a,b,c) {
		return function(d) {
			return f1(a,b,c,d);
		};
	};
	return thx__$Validation_Validation_$Impl_$.ap(v4,thx__$Validation_Validation_$Impl_$.ap(v3,thx__$Validation_Validation_$Impl_$.ap(v2,thx__$Validation_Validation_$Impl_$.ap(v1,thx_Either.Right(thx_Functions2.curry(function(a1,b1) {
		return function(c1) {
			return f2(a1,b1,c1);
		};
	})),function(e1,e2) {
		throw new js__$Boot_HaxeError("Unreachable");
	}),s),s),s);
};
thx__$Validation_Validation_$Impl_$.val5 = function(f,v1,v2,v3,v4,v5,s) {
	var f1 = f;
	var f2 = function(a,b,c,d) {
		return function(e) {
			return f1(a,b,c,d,e);
		};
	};
	var f3 = function(a1,b1,c1) {
		return function(d1) {
			return f2(a1,b1,c1,d1);
		};
	};
	return thx__$Validation_Validation_$Impl_$.ap(v5,thx__$Validation_Validation_$Impl_$.ap(v4,thx__$Validation_Validation_$Impl_$.ap(v3,thx__$Validation_Validation_$Impl_$.ap(v2,thx__$Validation_Validation_$Impl_$.ap(v1,thx_Either.Right(thx_Functions2.curry(function(a2,b2) {
		return function(c2) {
			return f3(a2,b2,c2);
		};
	})),function(e1,e2) {
		throw new js__$Boot_HaxeError("Unreachable");
	}),s),s),s),s);
};
thx__$Validation_Validation_$Impl_$.val6 = function(f,v1,v2,v3,v4,v5,v6,s) {
	var f1 = f;
	var f2 = function(a,b,c,d,e) {
		return function(f0) {
			return f1(a,b,c,d,e,f0);
		};
	};
	var f3 = function(a1,b1,c1,d1) {
		return function(e1) {
			return f2(a1,b1,c1,d1,e1);
		};
	};
	var f4 = function(a2,b2,c2) {
		return function(d2) {
			return f3(a2,b2,c2,d2);
		};
	};
	return thx__$Validation_Validation_$Impl_$.ap(v6,thx__$Validation_Validation_$Impl_$.ap(v5,thx__$Validation_Validation_$Impl_$.ap(v4,thx__$Validation_Validation_$Impl_$.ap(v3,thx__$Validation_Validation_$Impl_$.ap(v2,thx__$Validation_Validation_$Impl_$.ap(v1,thx_Either.Right(thx_Functions2.curry(function(a3,b3) {
		return function(c3) {
			return f4(a3,b3,c3);
		};
	})),function(e11,e2) {
		throw new js__$Boot_HaxeError("Unreachable");
	}),s),s),s),s),s);
};
thx__$Validation_Validation_$Impl_$.val7 = function(f,v1,v2,v3,v4,v5,v6,v7,s) {
	var f1 = f;
	var f2 = function(a,b,c,d,e,f0) {
		return function(g) {
			return f1(a,b,c,d,e,f0,g);
		};
	};
	var f3 = function(a1,b1,c1,d1,e1) {
		return function(f01) {
			return f2(a1,b1,c1,d1,e1,f01);
		};
	};
	var f4 = function(a2,b2,c2,d2) {
		return function(e2) {
			return f3(a2,b2,c2,d2,e2);
		};
	};
	var f5 = function(a3,b3,c3) {
		return function(d3) {
			return f4(a3,b3,c3,d3);
		};
	};
	return thx__$Validation_Validation_$Impl_$.ap(v7,thx__$Validation_Validation_$Impl_$.ap(v6,thx__$Validation_Validation_$Impl_$.ap(v5,thx__$Validation_Validation_$Impl_$.ap(v4,thx__$Validation_Validation_$Impl_$.ap(v3,thx__$Validation_Validation_$Impl_$.ap(v2,thx__$Validation_Validation_$Impl_$.ap(v1,thx_Either.Right(thx_Functions2.curry(function(a4,b4) {
		return function(c4) {
			return f5(a4,b4,c4);
		};
	})),function(e11,e21) {
		throw new js__$Boot_HaxeError("Unreachable");
	}),s),s),s),s),s),s);
};
thx__$Validation_Validation_$Impl_$.val8 = function(f,v1,v2,v3,v4,v5,v6,v7,v8,s) {
	var f1 = f;
	var f2 = function(a,b,c,d,e,f0,g) {
		return function(h) {
			return f1(a,b,c,d,e,f0,g,h);
		};
	};
	var f3 = function(a1,b1,c1,d1,e1,f01) {
		return function(g1) {
			return f2(a1,b1,c1,d1,e1,f01,g1);
		};
	};
	var f4 = function(a2,b2,c2,d2,e2) {
		return function(f02) {
			return f3(a2,b2,c2,d2,e2,f02);
		};
	};
	var f5 = function(a3,b3,c3,d3) {
		return function(e3) {
			return f4(a3,b3,c3,d3,e3);
		};
	};
	var f6 = function(a4,b4,c4) {
		return function(d4) {
			return f5(a4,b4,c4,d4);
		};
	};
	return thx__$Validation_Validation_$Impl_$.ap(v8,thx__$Validation_Validation_$Impl_$.ap(v7,thx__$Validation_Validation_$Impl_$.ap(v6,thx__$Validation_Validation_$Impl_$.ap(v5,thx__$Validation_Validation_$Impl_$.ap(v4,thx__$Validation_Validation_$Impl_$.ap(v3,thx__$Validation_Validation_$Impl_$.ap(v2,thx__$Validation_Validation_$Impl_$.ap(v1,thx_Either.Right(thx_Functions2.curry(function(a5,b5) {
		return function(c5) {
			return f6(a5,b5,c5);
		};
	})),function(e11,e21) {
		throw new js__$Boot_HaxeError("Unreachable");
	}),s),s),s),s),s),s),s);
};
var thx_ValidationExtensions = function() { };
thx_ValidationExtensions.__name__ = ["thx","ValidationExtensions"];
thx_ValidationExtensions.leftMapNel = function(n,f) {
	return thx_Eithers.leftMap(n,function(n1) {
		return thx__$Nel_Nel_$Impl_$.map(n1,f);
	});
};
thx_ValidationExtensions.ensureNel = function(v,p,error) {
	if(v[1] == 1) {
		var a = v[2];
		if(p(a)) {
			return v;
		} else {
			return thx_Either.Left(thx__$Nel_Nel_$Impl_$.pure(error));
		}
	} else {
		return v;
	}
};
var thx_error_AbstractMethod = function(posInfo) {
	thx_Error.call(this,"method " + posInfo.className + "." + posInfo.methodName + "() is abstract",null,posInfo);
};
thx_error_AbstractMethod.__name__ = ["thx","error","AbstractMethod"];
thx_error_AbstractMethod.__super__ = thx_Error;
thx_error_AbstractMethod.prototype = $extend(thx_Error.prototype,{
	__class__: thx_error_AbstractMethod
});
var thx_error_AssertError = function(msg,pos) {
	if(null == msg) {
		msg = "expected true";
	}
	thx_Error.call(this,msg,null,pos);
};
thx_error_AssertError.__name__ = ["thx","error","AssertError"];
thx_error_AssertError.__super__ = thx_Error;
thx_error_AssertError.prototype = $extend(thx_Error.prototype,{
	__class__: thx_error_AssertError
});
var thx_error_ErrorWrapper = function(message,innerError,stack,pos) {
	thx_Error.call(this,message,stack,pos);
	this.innerError = innerError;
};
thx_error_ErrorWrapper.__name__ = ["thx","error","ErrorWrapper"];
thx_error_ErrorWrapper.__super__ = thx_Error;
thx_error_ErrorWrapper.prototype = $extend(thx_Error.prototype,{
	innerError: null
	,__class__: thx_error_ErrorWrapper
});
var thx_error_NotImplemented = function(posInfo) {
	thx_Error.call(this,"method " + posInfo.className + "." + posInfo.methodName + "() needs to be implemented",null,posInfo);
};
thx_error_NotImplemented.__name__ = ["thx","error","NotImplemented"];
thx_error_NotImplemented.__super__ = thx_Error;
thx_error_NotImplemented.prototype = $extend(thx_Error.prototype,{
	__class__: thx_error_NotImplemented
});
var thx_error_NullArgument = function(message,posInfo) {
	thx_Error.call(this,message,null,posInfo);
};
thx_error_NullArgument.__name__ = ["thx","error","NullArgument"];
thx_error_NullArgument.__super__ = thx_Error;
thx_error_NullArgument.prototype = $extend(thx_Error.prototype,{
	__class__: thx_error_NullArgument
});
var thx_fp_Functions = function() { };
thx_fp_Functions.__name__ = ["thx","fp","Functions"];
thx_fp_Functions["const"] = function(b) {
	return function(a) {
		return b;
	};
};
thx_fp_Functions.flip = function(f) {
	return function(b) {
		return function(a) {
			return (f(a))(b);
		};
	};
};
var thx_fp__$List_List_$Impl_$ = {};
thx_fp__$List_List_$Impl_$.__name__ = ["thx","fp","_List","List_Impl_"];
thx_fp__$List_List_$Impl_$.empty = function() {
	return thx_fp_ListImpl.Nil;
};
thx_fp__$List_List_$Impl_$.bin = function(x,xs) {
	return thx_fp_ListImpl.Cons(x,xs);
};
thx_fp__$List_List_$Impl_$.singleton = function(x) {
	return thx_fp_ListImpl.Cons(x,thx_fp_ListImpl.Nil);
};
thx_fp__$List_List_$Impl_$.fromArray = function(arr) {
	var _e = arr;
	return (function(f,initial) {
		var initial1 = initial;
		var i = _e.length;
		while(--i >= 0) initial1 = f(initial1,_e[i]);
		return initial1;
	})(function(_0,_1) {
		return thx_fp_ListImpl.Cons(_1,_0);
	},thx_fp_ListImpl.Nil);
};
thx_fp__$List_List_$Impl_$.foldLeft = function(this1,b,f) {
	switch(this1[1]) {
	case 0:
		return b;
	case 1:
		return thx_fp__$List_List_$Impl_$.foldLeft(this1[3],f(b,this1[2]),f);
	}
};
thx_fp__$List_List_$Impl_$.foldMap = function(this1,f,m) {
	var tmp = thx_fp__$List_List_$Impl_$.map(this1,f);
	var tmp1 = thx__$Monoid_Monoid_$Impl_$.get_zero(m);
	var _e = m;
	return thx_fp__$List_List_$Impl_$.foldLeft(tmp,tmp1,function(a0,a1) {
		return thx__$Monoid_Monoid_$Impl_$.append(_e,a0,a1);
	});
};
thx_fp__$List_List_$Impl_$.flatMap = function(this1,f) {
	switch(this1[1]) {
	case 0:
		return thx_fp_ListImpl.Nil;
	case 1:
		return thx_fp__$List_List_$Impl_$.concat(f(this1[2]),thx_fp__$List_List_$Impl_$.flatMap(this1[3],f));
	}
};
thx_fp__$List_List_$Impl_$.concat = function(this1,that) {
	switch(this1[1]) {
	case 0:
		if(that[1] == 0) {
			return thx_fp_ListImpl.Nil;
		} else {
			return that;
		}
		break;
	case 1:
		if(that[1] == 0) {
			var l = this1;
			return l;
		} else if(this1[3][1] == 0) {
			return thx_fp_ListImpl.Cons(this1[2],that);
		} else {
			return thx_fp_ListImpl.Cons(this1[2],thx_fp__$List_List_$Impl_$.concat(this1[3],that));
		}
		break;
	}
};
thx_fp__$List_List_$Impl_$.prepend = function(this1,x) {
	return thx_fp_ListImpl.Cons(x,this1);
};
thx_fp__$List_List_$Impl_$.toArray = function(this1) {
	return thx_fp__$List_List_$Impl_$.foldLeft(this1,[],function(acc,a) {
		acc.push(a);
		return acc;
	});
};
thx_fp__$List_List_$Impl_$.intersperse = function(this1,a) {
	var go = null;
	go = function(ls) {
		switch(ls[1]) {
		case 0:
			return thx_fp_ListImpl.Nil;
		case 1:
			return thx_fp_ListImpl.Cons(a,thx_fp_ListImpl.Cons(ls[2],go(ls[3])));
		}
	};
	var go1 = go;
	switch(this1[1]) {
	case 0:
		return thx_fp_ListImpl.Nil;
	case 1:
		return thx_fp_ListImpl.Cons(this1[2],go1(this1[3]));
	}
};
thx_fp__$List_List_$Impl_$.map = function(this1,f) {
	switch(this1[1]) {
	case 0:
		return thx_fp_ListImpl.Nil;
	case 1:
		return thx_fp_ListImpl.Cons(f(this1[2]),thx_fp__$List_List_$Impl_$.map(this1[3],f));
	}
};
thx_fp__$List_List_$Impl_$.zipAp = function(this1,other) {
	switch(this1[1]) {
	case 0:
		return thx_fp_ListImpl.Nil;
	case 1:
		var xs = this1[3];
		var x = this1[2];
		switch(other[1]) {
		case 0:
			return thx_fp_ListImpl.Nil;
		case 1:
			var ys = other[3];
			var y = other[2];
			return thx_fp_ListImpl.Cons(y(x),thx_fp__$List_List_$Impl_$.zipAp(xs,ys));
		}
		break;
	}
};
thx_fp__$List_List_$Impl_$.zip2Ap = function(f,ax,bx) {
	return thx_fp__$List_List_$Impl_$.zipAp(bx,thx_fp__$List_List_$Impl_$.map(ax,thx_Functions2.curry(f)));
};
thx_fp__$List_List_$Impl_$.zip3Ap = function(f,ax,bx,cx) {
	var f1 = f;
	return thx_fp__$List_List_$Impl_$.zipAp(cx,thx_fp__$List_List_$Impl_$.zip2Ap(function(a,b) {
		return function(c) {
			return f1(a,b,c);
		};
	},ax,bx));
};
thx_fp__$List_List_$Impl_$.zip4Ap = function(f,ax,bx,cx,dx) {
	var f1 = f;
	return thx_fp__$List_List_$Impl_$.zipAp(dx,thx_fp__$List_List_$Impl_$.zip3Ap(function(a,b,c) {
		return function(d) {
			return f1(a,b,c,d);
		};
	},ax,bx,cx));
};
thx_fp__$List_List_$Impl_$.zip5Ap = function(f,ax,bx,cx,dx,ex) {
	var f1 = f;
	return thx_fp__$List_List_$Impl_$.zipAp(ex,thx_fp__$List_List_$Impl_$.zip4Ap(function(a,b,c,d) {
		return function(e) {
			return f1(a,b,c,d,e);
		};
	},ax,bx,cx,dx));
};
thx_fp__$List_List_$Impl_$.toStringWithShow = function(this1,show) {
	return "[" + thx_fp__$List_List_$Impl_$.foldLeft(thx_fp__$List_List_$Impl_$.intersperse(thx_fp__$List_List_$Impl_$.map(this1,show),","),"",function(_0,_1) {
		return _0 + _1;
	}) + "]";
};
var thx_fp_ListImpl = { __ename__ : ["thx","fp","ListImpl"], __constructs__ : ["Nil","Cons"] };
thx_fp_ListImpl.Nil = ["Nil",0];
thx_fp_ListImpl.Nil.__enum__ = thx_fp_ListImpl;
thx_fp_ListImpl.Cons = function(x,xs) { var $x = ["Cons",1,x,xs]; $x.__enum__ = thx_fp_ListImpl; return $x; };
var thx_fp_StringList = function() { };
thx_fp_StringList.__name__ = ["thx","fp","StringList"];
thx_fp_StringList.toString = function(l) {
	return "[" + thx_fp__$List_List_$Impl_$.foldLeft(thx_fp__$List_List_$Impl_$.intersperse(l,","),"",function(_0,_1) {
		return _0 + _1;
	}) + "]";
};
var thx_fp_FloatList = function() { };
thx_fp_FloatList.__name__ = ["thx","fp","FloatList"];
thx_fp_FloatList.toString = function(l) {
	return thx_fp__$List_List_$Impl_$.toStringWithShow(l,thx_Floats.toString);
};
var thx_fp_IntList = function() { };
thx_fp_IntList.__name__ = ["thx","fp","IntList"];
thx_fp_IntList.toString = function(l) {
	return thx_fp__$List_List_$Impl_$.toStringWithShow(l,function(a1) {
		return thx_Ints.toString(a1,10);
	});
};
var thx_fp_ObjectList = function() { };
thx_fp_ObjectList.__name__ = ["thx","fp","ObjectList"];
thx_fp_ObjectList.toString = function(l) {
	return thx_fp__$List_List_$Impl_$.toStringWithShow(l,function(o) {
		return o.toString();
	});
};
var thx_fp__$Map_Map_$Impl_$ = {};
thx_fp__$Map_Map_$Impl_$.__name__ = ["thx","fp","_Map","Map_Impl_"];
thx_fp__$Map_Map_$Impl_$.empty = function() {
	return thx_fp_MapImpl.Tip;
};
thx_fp__$Map_Map_$Impl_$.singleton = function(k,v) {
	return thx_fp_MapImpl.Bin(1,k,v,thx_fp_MapImpl.Tip,thx_fp_MapImpl.Tip);
};
thx_fp__$Map_Map_$Impl_$.bin = function(k,v,lhs,rhs) {
	return thx_fp_MapImpl.Bin(thx_fp__$Map_Map_$Impl_$.size(lhs) + thx_fp__$Map_Map_$Impl_$.size(rhs) + 1,k,v,lhs,rhs);
};
thx_fp__$Map_Map_$Impl_$.fromNative = function(map,comparator) {
	var r = thx_fp_MapImpl.Tip;
	var tmp = map.keys();
	while(tmp.hasNext()) {
		var key = tmp.next();
		r = thx_fp__$Map_Map_$Impl_$.insert(r,key,map.get(key),comparator);
	}
	return r;
};
thx_fp__$Map_Map_$Impl_$.lookup = function(this1,key,comparator) {
	switch(this1[1]) {
	case 0:
		return haxe_ds_Option.None;
	case 1:
		var rhs = this1[6];
		var lhs = this1[5];
		var xvalue = this1[4];
		switch(comparator(key,this1[3])[1]) {
		case 0:
			return thx_fp__$Map_Map_$Impl_$.lookup(lhs,key,comparator);
		case 1:
			return thx_fp__$Map_Map_$Impl_$.lookup(rhs,key,comparator);
		case 2:
			return haxe_ds_Option.Some(xvalue);
		}
		break;
	}
};
thx_fp__$Map_Map_$Impl_$.lookupTuple = function(this1,key,comparator) {
	switch(this1[1]) {
	case 0:
		return haxe_ds_Option.None;
	case 1:
		var rhs = this1[6];
		var lhs = this1[5];
		var xvalue = this1[4];
		var xkey = this1[3];
		switch(comparator(key,xkey)[1]) {
		case 0:
			return thx_fp__$Map_Map_$Impl_$.lookupTuple(lhs,key,comparator);
		case 1:
			return thx_fp__$Map_Map_$Impl_$.lookupTuple(rhs,key,comparator);
		case 2:
			return haxe_ds_Option.Some({ _0 : xkey, _1 : xvalue});
		}
		break;
	}
};
thx_fp__$Map_Map_$Impl_$["delete"] = function(this1,key,comparator) {
	switch(this1[1]) {
	case 0:
		return thx_fp_MapImpl.Tip;
	case 1:
		var rhs = this1[6];
		var lhs = this1[5];
		var x = this1[4];
		var kx = this1[3];
		switch(comparator(key,kx)[1]) {
		case 0:
			return thx_fp__$Map_Map_$Impl_$.balance(kx,x,thx_fp__$Map_Map_$Impl_$["delete"](lhs,key,comparator),rhs);
		case 1:
			return thx_fp__$Map_Map_$Impl_$.balance(kx,x,lhs,thx_fp__$Map_Map_$Impl_$["delete"](rhs,key,comparator));
		case 2:
			return thx_fp__$Map_Map_$Impl_$.glue(lhs,rhs);
		}
		break;
	}
};
thx_fp__$Map_Map_$Impl_$.insert = function(this1,kx,x,comparator) {
	switch(this1[1]) {
	case 0:
		return thx_fp_MapImpl.Bin(1,kx,x,thx_fp_MapImpl.Tip,thx_fp_MapImpl.Tip);
	case 1:
		var rhs = this1[6];
		var lhs = this1[5];
		var y = this1[4];
		var ky = this1[3];
		var sz = this1[2];
		switch(comparator(kx,ky)[1]) {
		case 0:
			return thx_fp__$Map_Map_$Impl_$.balance(ky,y,thx_fp__$Map_Map_$Impl_$.insert(lhs,kx,x,comparator),rhs);
		case 1:
			return thx_fp__$Map_Map_$Impl_$.balance(ky,y,lhs,thx_fp__$Map_Map_$Impl_$.insert(rhs,kx,x,comparator));
		case 2:
			return thx_fp_MapImpl.Bin(sz,kx,x,lhs,rhs);
		}
		break;
	}
};
thx_fp__$Map_Map_$Impl_$.foldLeft = function(this1,b,f) {
	switch(this1[1]) {
	case 0:
		return b;
	case 1:
		return thx_fp__$Map_Map_$Impl_$.foldLeft(this1[6],thx_fp__$Map_Map_$Impl_$.foldLeft(this1[5],f(b,this1[4]),f),f);
	}
};
thx_fp__$Map_Map_$Impl_$.map = function(this1,f) {
	switch(this1[1]) {
	case 0:
		return thx_fp_MapImpl.Tip;
	case 1:
		return thx_fp_MapImpl.Bin(this1[2],this1[3],f(this1[4]),thx_fp__$Map_Map_$Impl_$.map(this1[5],f),thx_fp__$Map_Map_$Impl_$.map(this1[6],f));
	}
};
thx_fp__$Map_Map_$Impl_$.values = function(this1) {
	return thx_fp__$Map_Map_$Impl_$.foldLeft(this1,[],function(acc,v) {
		acc.push(v);
		return acc;
	});
};
thx_fp__$Map_Map_$Impl_$.foldLeftKeys = function(this1,b,f) {
	switch(this1[1]) {
	case 0:
		return b;
	case 1:
		return thx_fp__$Map_Map_$Impl_$.foldLeftKeys(this1[6],thx_fp__$Map_Map_$Impl_$.foldLeftKeys(this1[5],f(b,this1[3]),f),f);
	}
};
thx_fp__$Map_Map_$Impl_$.foldLeftAll = function(this1,b,f) {
	switch(this1[1]) {
	case 0:
		return b;
	case 1:
		return thx_fp__$Map_Map_$Impl_$.foldLeftAll(this1[6],thx_fp__$Map_Map_$Impl_$.foldLeftAll(this1[5],f(b,this1[3],this1[4]),f),f);
	}
};
thx_fp__$Map_Map_$Impl_$.foldLeftTuples = function(this1,b,f) {
	switch(this1[1]) {
	case 0:
		return b;
	case 1:
		return thx_fp__$Map_Map_$Impl_$.foldLeftTuples(this1[6],thx_fp__$Map_Map_$Impl_$.foldLeftTuples(this1[5],f(b,{ _0 : this1[3], _1 : this1[4]}),f),f);
	}
};
thx_fp__$Map_Map_$Impl_$.size = function(this1) {
	switch(this1[1]) {
	case 0:
		return 0;
	case 1:
		return this1[2];
	}
};
thx_fp__$Map_Map_$Impl_$.balance = function(k,x,lhs,rhs) {
	var ls = thx_fp__$Map_Map_$Impl_$.size(lhs);
	var rs = thx_fp__$Map_Map_$Impl_$.size(rhs);
	var xs = ls + rs + 1;
	if(ls + rs <= 1) {
		return thx_fp_MapImpl.Bin(xs,k,x,lhs,rhs);
	} else if(rs >= 5 * ls) {
		return thx_fp__$Map_Map_$Impl_$.rotateLeft(k,x,lhs,rhs);
	} else if(ls >= 5 * rs) {
		return thx_fp__$Map_Map_$Impl_$.rotateRight(k,x,lhs,rhs);
	} else {
		return thx_fp_MapImpl.Bin(xs,k,x,lhs,rhs);
	}
};
thx_fp__$Map_Map_$Impl_$.glue = function(this1,that) {
	if(this1[1] == 0) {
		return that;
	} else if(that[1] == 0) {
		return this1;
	} else if(thx_fp__$Map_Map_$Impl_$.size(this1) > thx_fp__$Map_Map_$Impl_$.size(that)) {
		var t = thx_fp__$Map_Map_$Impl_$.deleteFindMax(this1);
		return thx_fp__$Map_Map_$Impl_$.balance(t.k,t.x,t.t,that);
	} else {
		var t1 = thx_fp__$Map_Map_$Impl_$.deleteFindMin(that);
		return thx_fp__$Map_Map_$Impl_$.balance(t1.k,t1.x,this1,t1.t);
	}
};
thx_fp__$Map_Map_$Impl_$.deleteFindMin = function(map) {
	switch(map[1]) {
	case 0:
		throw new thx_Error("can not return the minimal element of an empty map",null,{ fileName : "Map.hx", lineNumber : 161, className : "thx.fp._Map.Map_Impl_", methodName : "deleteFindMin"});
		break;
	case 1:
		if(map[5][1] == 0) {
			var r = map[6];
			var k = map[3];
			var x = map[4];
			return { k : k, x : x, t : r};
		} else {
			var r1 = map[6];
			var k1 = map[3];
			var x1 = map[4];
			var l = map[5];
			var t = thx_fp__$Map_Map_$Impl_$.deleteFindMin(l);
			return { k : t.k, x : t.x, t : thx_fp__$Map_Map_$Impl_$.balance(k1,x1,t.t,r1)};
		}
		break;
	}
};
thx_fp__$Map_Map_$Impl_$.deleteFindMax = function(map) {
	switch(map[1]) {
	case 0:
		throw new thx_Error("can not return the maximal element of an empty map",null,{ fileName : "Map.hx", lineNumber : 171, className : "thx.fp._Map.Map_Impl_", methodName : "deleteFindMax"});
		break;
	case 1:
		if(map[6][1] == 0) {
			var k = map[3];
			var x = map[4];
			var l = map[5];
			return { k : k, x : x, t : l};
		} else {
			var k1 = map[3];
			var x1 = map[4];
			var l1 = map[5];
			var r = map[6];
			var t = thx_fp__$Map_Map_$Impl_$.deleteFindMax(r);
			return { k : t.k, x : t.x, t : thx_fp__$Map_Map_$Impl_$.balance(k1,x1,l1,t.t)};
		}
		break;
	}
};
thx_fp__$Map_Map_$Impl_$.rotateLeft = function(k,x,lhs,rhs) {
	if(rhs[1] == 1) {
		var ry = rhs[6];
		var ly = rhs[5];
		if(thx_fp__$Map_Map_$Impl_$.size(ly) < 2 * thx_fp__$Map_Map_$Impl_$.size(ry)) {
			return thx_fp__$Map_Map_$Impl_$.singleLeft(k,x,lhs,rhs);
		} else {
			return thx_fp__$Map_Map_$Impl_$.doubleLeft(k,x,lhs,rhs);
		}
	} else {
		return thx_fp__$Map_Map_$Impl_$.doubleLeft(k,x,lhs,rhs);
	}
};
thx_fp__$Map_Map_$Impl_$.rotateRight = function(k,x,lhs,rhs) {
	if(lhs[1] == 1) {
		var ry = lhs[6];
		var ly = lhs[5];
		if(thx_fp__$Map_Map_$Impl_$.size(ry) < 2 * thx_fp__$Map_Map_$Impl_$.size(ly)) {
			return thx_fp__$Map_Map_$Impl_$.singleRight(k,x,lhs,rhs);
		} else {
			return thx_fp__$Map_Map_$Impl_$.doubleRight(k,x,lhs,rhs);
		}
	} else {
		return thx_fp__$Map_Map_$Impl_$.doubleRight(k,x,lhs,rhs);
	}
};
thx_fp__$Map_Map_$Impl_$.singleLeft = function(k1,x1,t1,rhs) {
	if(rhs[1] == 1) {
		var t3 = rhs[6];
		var t2 = rhs[5];
		var x2 = rhs[4];
		var k2 = rhs[3];
		var lhs = thx_fp_MapImpl.Bin(thx_fp__$Map_Map_$Impl_$.size(t1) + thx_fp__$Map_Map_$Impl_$.size(t2) + 1,k1,x1,t1,t2);
		return thx_fp_MapImpl.Bin(thx_fp__$Map_Map_$Impl_$.size(lhs) + thx_fp__$Map_Map_$Impl_$.size(t3) + 1,k2,x2,lhs,t3);
	} else {
		throw new thx_Error("damn it, this should never happen",null,{ fileName : "Map.hx", lineNumber : 193, className : "thx.fp._Map.Map_Impl_", methodName : "singleLeft"});
	}
};
thx_fp__$Map_Map_$Impl_$.singleRight = function(k1,x1,lhs,t3) {
	if(lhs[1] == 1) {
		var t2 = lhs[6];
		var t1 = lhs[5];
		var x2 = lhs[4];
		var k2 = lhs[3];
		var rhs = thx_fp_MapImpl.Bin(thx_fp__$Map_Map_$Impl_$.size(t2) + thx_fp__$Map_Map_$Impl_$.size(t3) + 1,k1,x1,t2,t3);
		return thx_fp_MapImpl.Bin(thx_fp__$Map_Map_$Impl_$.size(t1) + thx_fp__$Map_Map_$Impl_$.size(rhs) + 1,k2,x2,t1,rhs);
	} else {
		throw new thx_Error("damn it, this should never happen",null,{ fileName : "Map.hx", lineNumber : 199, className : "thx.fp._Map.Map_Impl_", methodName : "singleRight"});
	}
};
thx_fp__$Map_Map_$Impl_$.doubleLeft = function(k1,x1,t1,rhs) {
	if(rhs[1] == 1) {
		if(rhs[5][1] == 1) {
			var t4 = rhs[6];
			var k2 = rhs[3];
			var x2 = rhs[4];
			var t3 = rhs[5][6];
			var t2 = rhs[5][5];
			var x3 = rhs[5][4];
			var k3 = rhs[5][3];
			var lhs = thx_fp_MapImpl.Bin(thx_fp__$Map_Map_$Impl_$.size(t1) + thx_fp__$Map_Map_$Impl_$.size(t2) + 1,k1,x1,t1,t2);
			var rhs1 = thx_fp_MapImpl.Bin(thx_fp__$Map_Map_$Impl_$.size(t3) + thx_fp__$Map_Map_$Impl_$.size(t4) + 1,k2,x2,t3,t4);
			return thx_fp_MapImpl.Bin(thx_fp__$Map_Map_$Impl_$.size(lhs) + thx_fp__$Map_Map_$Impl_$.size(rhs1) + 1,k3,x3,lhs,rhs1);
		} else {
			throw new thx_Error("damn it, this should never happen",null,{ fileName : "Map.hx", lineNumber : 206, className : "thx.fp._Map.Map_Impl_", methodName : "doubleLeft"});
		}
	} else {
		throw new thx_Error("damn it, this should never happen",null,{ fileName : "Map.hx", lineNumber : 206, className : "thx.fp._Map.Map_Impl_", methodName : "doubleLeft"});
	}
};
thx_fp__$Map_Map_$Impl_$.doubleRight = function(k1,x1,lhs,t4) {
	if(lhs[1] == 1) {
		if(lhs[6][1] == 1) {
			var k2 = lhs[3];
			var x2 = lhs[4];
			var t1 = lhs[5];
			var t3 = lhs[6][6];
			var t2 = lhs[6][5];
			var x3 = lhs[6][4];
			var k3 = lhs[6][3];
			var lhs1 = thx_fp_MapImpl.Bin(thx_fp__$Map_Map_$Impl_$.size(t1) + thx_fp__$Map_Map_$Impl_$.size(t2) + 1,k2,x2,t1,t2);
			var rhs = thx_fp_MapImpl.Bin(thx_fp__$Map_Map_$Impl_$.size(t3) + thx_fp__$Map_Map_$Impl_$.size(t4) + 1,k1,x1,t3,t4);
			return thx_fp_MapImpl.Bin(thx_fp__$Map_Map_$Impl_$.size(lhs1) + thx_fp__$Map_Map_$Impl_$.size(rhs) + 1,k3,x3,lhs1,rhs);
		} else {
			throw new thx_Error("damn it, this should never happen",null,{ fileName : "Map.hx", lineNumber : 213, className : "thx.fp._Map.Map_Impl_", methodName : "doubleRight"});
		}
	} else {
		throw new thx_Error("damn it, this should never happen",null,{ fileName : "Map.hx", lineNumber : 213, className : "thx.fp._Map.Map_Impl_", methodName : "doubleRight"});
	}
};
var thx_fp_MapImpl = { __ename__ : ["thx","fp","MapImpl"], __constructs__ : ["Tip","Bin"] };
thx_fp_MapImpl.Tip = ["Tip",0];
thx_fp_MapImpl.Tip.__enum__ = thx_fp_MapImpl;
thx_fp_MapImpl.Bin = function(size,key,value,lhs,rhs) { var $x = ["Bin",1,size,key,value,lhs,rhs]; $x.__enum__ = thx_fp_MapImpl; return $x; };
var thx_fp_StringMap = function() { };
thx_fp_StringMap.__name__ = ["thx","fp","StringMap"];
thx_fp_StringMap.exists = function(map,key) {
	return thx_Options.toBool(thx_fp__$Map_Map_$Impl_$.lookup(map,key,thx_Strings.order));
};
thx_fp_StringMap.get = function(map,key) {
	return thx_fp__$Map_Map_$Impl_$.lookup(map,key,thx_Strings.order);
};
thx_fp_StringMap.getAlt = function(map,key,alt) {
	return thx_Options.getOrElse(thx_fp__$Map_Map_$Impl_$.lookup(map,key,thx_Strings.order),alt);
};
thx_fp_StringMap.set = function(map,key,value) {
	return thx_fp__$Map_Map_$Impl_$.insert(map,key,value,thx_Strings.order);
};
thx_fp_StringMap.remove = function(map,key) {
	return thx_fp__$Map_Map_$Impl_$["delete"](map,key,thx_Strings.order);
};
thx_fp_StringMap.fromNative = function(map) {
	return thx_fp__$Map_Map_$Impl_$.fromNative(map,thx_Strings.order);
};
thx_fp_StringMap.toNative = function(map) {
	return thx_fp__$Map_Map_$Impl_$.foldLeftTuples(map,new haxe_ds_StringMap(),function(acc,t) {
		var key = t._0;
		var value = t._1;
		if(__map_reserved[key] != null) {
			acc.setReserved(key,value);
		} else {
			acc.h[key] = value;
		}
		return acc;
	});
};
thx_fp_StringMap.merge = function(a,b) {
	return thx_fp__$Map_Map_$Impl_$.foldLeftTuples(b,a,function(acc,t) {
		return thx_fp__$Map_Map_$Impl_$.insert(acc,t._0,t._1,thx_Strings.order);
	});
};
var thx_fp_FloatMap = function() { };
thx_fp_FloatMap.__name__ = ["thx","fp","FloatMap"];
thx_fp_FloatMap.exists = function(map,key) {
	return thx_Options.toBool(thx_fp__$Map_Map_$Impl_$.lookup(map,key,thx_Floats.order));
};
thx_fp_FloatMap.get = function(map,key) {
	return thx_fp__$Map_Map_$Impl_$.lookup(map,key,thx_Floats.order);
};
thx_fp_FloatMap.getAlt = function(map,key,alt) {
	return thx_Options.getOrElse(thx_fp__$Map_Map_$Impl_$.lookup(map,key,thx_Floats.order),alt);
};
thx_fp_FloatMap.set = function(map,key,value) {
	return thx_fp__$Map_Map_$Impl_$.insert(map,key,value,thx_Floats.order);
};
thx_fp_FloatMap.remove = function(map,key) {
	return thx_fp__$Map_Map_$Impl_$["delete"](map,key,thx_Floats.order);
};
thx_fp_FloatMap.merge = function(a,b) {
	return thx_fp__$Map_Map_$Impl_$.foldLeftTuples(b,a,function(acc,t) {
		return thx_fp__$Map_Map_$Impl_$.insert(acc,t._0,t._1,thx_Floats.order);
	});
};
var thx_fp_IntMap = function() { };
thx_fp_IntMap.__name__ = ["thx","fp","IntMap"];
thx_fp_IntMap.exists = function(map,key) {
	return thx_Options.toBool(thx_fp__$Map_Map_$Impl_$.lookup(map,key,thx_Ints.order));
};
thx_fp_IntMap.get = function(map,key) {
	return thx_fp__$Map_Map_$Impl_$.lookup(map,key,thx_Ints.order);
};
thx_fp_IntMap.getAlt = function(map,key,alt) {
	return thx_Options.getOrElse(thx_fp__$Map_Map_$Impl_$.lookup(map,key,thx_Ints.order),alt);
};
thx_fp_IntMap.set = function(map,key,value) {
	return thx_fp__$Map_Map_$Impl_$.insert(map,key,value,thx_Ints.order);
};
thx_fp_IntMap.remove = function(map,key) {
	return thx_fp__$Map_Map_$Impl_$["delete"](map,key,thx_Ints.order);
};
thx_fp_IntMap.fromNative = function(map) {
	return thx_fp__$Map_Map_$Impl_$.fromNative(map,thx_Ints.order);
};
thx_fp_IntMap.toNative = function(map) {
	return thx_fp__$Map_Map_$Impl_$.foldLeftTuples(map,new haxe_ds_IntMap(),function(acc,t) {
		acc.h[t._0] = t._1;
		return acc;
	});
};
thx_fp_IntMap.merge = function(a,b) {
	return thx_fp__$Map_Map_$Impl_$.foldLeftTuples(b,a,function(acc,t) {
		return thx_fp__$Map_Map_$Impl_$.insert(acc,t._0,t._1,thx_Ints.order);
	});
};
var thx_fp_ComparableOrdMap = function() { };
thx_fp_ComparableOrdMap.__name__ = ["thx","fp","ComparableOrdMap"];
thx_fp_ComparableOrdMap.exists = function(map,key) {
	return thx_Options.toBool(thx_fp__$Map_Map_$Impl_$.lookup(map,key,thx__$Ord_Ord_$Impl_$.forComparableOrd()));
};
thx_fp_ComparableOrdMap.get = function(map,key) {
	return thx_fp__$Map_Map_$Impl_$.lookup(map,key,thx__$Ord_Ord_$Impl_$.forComparableOrd());
};
thx_fp_ComparableOrdMap.getAlt = function(map,key,alt) {
	return thx_Options.getOrElse(thx_fp__$Map_Map_$Impl_$.lookup(map,key,thx__$Ord_Ord_$Impl_$.forComparableOrd()),alt);
};
thx_fp_ComparableOrdMap.set = function(map,key,value) {
	return thx_fp__$Map_Map_$Impl_$.insert(map,key,value,thx__$Ord_Ord_$Impl_$.forComparableOrd());
};
thx_fp_ComparableOrdMap.remove = function(map,key) {
	return thx_fp__$Map_Map_$Impl_$["delete"](map,key,thx__$Ord_Ord_$Impl_$.forComparableOrd());
};
thx_fp_ComparableOrdMap.fromNative = function(map) {
	return thx_fp__$Map_Map_$Impl_$.fromNative(map,thx__$Ord_Ord_$Impl_$.forComparableOrd());
};
thx_fp_ComparableOrdMap.merge = function(a,b) {
	return thx_fp__$Map_Map_$Impl_$.foldLeftTuples(b,a,function(acc,t) {
		return thx_fp__$Map_Map_$Impl_$.insert(acc,t._0,t._1,thx__$Ord_Ord_$Impl_$.forComparableOrd());
	});
};
var thx_fp_ComparableMap = function() { };
thx_fp_ComparableMap.__name__ = ["thx","fp","ComparableMap"];
thx_fp_ComparableMap.exists = function(map,key) {
	return thx_Options.toBool(thx_fp__$Map_Map_$Impl_$.lookup(map,key,thx__$Ord_Ord_$Impl_$.forComparable()));
};
thx_fp_ComparableMap.get = function(map,key) {
	return thx_fp__$Map_Map_$Impl_$.lookup(map,key,thx__$Ord_Ord_$Impl_$.forComparable());
};
thx_fp_ComparableMap.getAlt = function(map,key,alt) {
	return thx_Options.getOrElse(thx_fp__$Map_Map_$Impl_$.lookup(map,key,thx__$Ord_Ord_$Impl_$.forComparable()),alt);
};
thx_fp_ComparableMap.set = function(map,key,value) {
	return thx_fp__$Map_Map_$Impl_$.insert(map,key,value,thx__$Ord_Ord_$Impl_$.forComparable());
};
thx_fp_ComparableMap.remove = function(map,key) {
	return thx_fp__$Map_Map_$Impl_$["delete"](map,key,thx__$Ord_Ord_$Impl_$.forComparable());
};
thx_fp_ComparableMap.fromNative = function(map) {
	return thx_fp__$Map_Map_$Impl_$.fromNative(map,thx__$Ord_Ord_$Impl_$.forComparable());
};
thx_fp_ComparableMap.merge = function(a,b) {
	return thx_fp__$Map_Map_$Impl_$.foldLeftTuples(b,a,function(acc,t) {
		return thx_fp__$Map_Map_$Impl_$.insert(acc,t._0,t._1,thx__$Ord_Ord_$Impl_$.forComparable());
	});
};
var thx_fp__$Set_Set_$Impl_$ = {};
thx_fp__$Set_Set_$Impl_$.__name__ = ["thx","fp","_Set","Set_Impl_"];
thx_fp__$Set_Set_$Impl_$.empty = function() {
	return thx_fp_SetImpl.Tip;
};
thx_fp__$Set_Set_$Impl_$.singleton = function(x) {
	return thx_fp_SetImpl.Bin(1,x,thx_fp_SetImpl.Tip,thx_fp_SetImpl.Tip);
};
thx_fp__$Set_Set_$Impl_$.bin = function(x,l,r) {
	return thx_fp_SetImpl.Bin(thx_fp__$Set_Set_$Impl_$.size(l) + thx_fp__$Set_Set_$Impl_$.size(r) + 1,x,l,r);
};
thx_fp__$Set_Set_$Impl_$.isEmpty = function(this1) {
	switch(this1[1]) {
	case 0:
		return true;
	case 1:
		return false;
	}
};
thx_fp__$Set_Set_$Impl_$.size = function(this1) {
	switch(this1[1]) {
	case 0:
		return 0;
	case 1:
		return this1[2];
	}
};
thx_fp__$Set_Set_$Impl_$.member = function(this1,x,comparator) {
	switch(this1[1]) {
	case 0:
		return false;
	case 1:
		var r = this1[5];
		var l = this1[4];
		switch(comparator(x,this1[3])[1]) {
		case 0:
			return thx_fp__$Set_Set_$Impl_$.member(l,x,comparator);
		case 1:
			return thx_fp__$Set_Set_$Impl_$.member(r,x,comparator);
		case 2:
			return true;
		}
		break;
	}
};
thx_fp__$Set_Set_$Impl_$.foldLeft = function(this1,b,f) {
	switch(this1[1]) {
	case 0:
		return b;
	case 1:
		return thx_fp__$Set_Set_$Impl_$.foldLeft(this1[5],thx_fp__$Set_Set_$Impl_$.foldLeft(this1[4],f(b,this1[3]),f),f);
	}
};
thx_fp__$Set_Set_$Impl_$.insert = function(this1,x,comparator) {
	switch(this1[1]) {
	case 0:
		return thx_fp_SetImpl.Bin(1,x,thx_fp_SetImpl.Tip,thx_fp_SetImpl.Tip);
	case 1:
		var r = this1[5];
		var l = this1[4];
		var y = this1[3];
		var sz = this1[2];
		switch(comparator(x,y)[1]) {
		case 0:
			return thx_fp__$Set_Set_$Impl_$.balance(l,y,thx_fp__$Set_Set_$Impl_$.insert(l,x,comparator),r);
		case 1:
			return thx_fp__$Set_Set_$Impl_$.balance(r,y,l,thx_fp__$Set_Set_$Impl_$.insert(r,x,comparator));
		case 2:
			return thx_fp_SetImpl.Bin(sz,x,l,r);
		}
		break;
	}
};
thx_fp__$Set_Set_$Impl_$.mapList = function(this1,f) {
	switch(this1[1]) {
	case 0:
		return thx_fp_ListImpl.Nil;
	case 1:
		return thx_fp_ListImpl.Cons(f(this1[3]),thx_fp__$List_List_$Impl_$.concat(thx_fp__$Set_Set_$Impl_$.mapList(this1[4],f),thx_fp__$Set_Set_$Impl_$.mapList(this1[5],f)));
	}
};
thx_fp__$Set_Set_$Impl_$.balance = function(this1,x,l,r) {
	var sl = thx_fp__$Set_Set_$Impl_$.size(l);
	var sr = thx_fp__$Set_Set_$Impl_$.size(r);
	var sx = sl + sr + 1;
	if(sl + sr <= 1) {
		return thx_fp_SetImpl.Bin(sx,x,l,r);
	} else if(sr >= 4 * sl) {
		return thx_fp__$Set_Set_$Impl_$.rotateLeft(x,l,r);
	} else if(sl >= 4 * sr) {
		return thx_fp__$Set_Set_$Impl_$.rotateRight(x,l,r);
	} else {
		return thx_fp_SetImpl.Bin(sx,x,l,r);
	}
};
thx_fp__$Set_Set_$Impl_$.rotateLeft = function(x,l,r) {
	if(r[1] == 1) {
		var ry = r[5];
		var ly = r[4];
		if(thx_fp__$Set_Set_$Impl_$.size(ly) < 4 * thx_fp__$Set_Set_$Impl_$.size(ry)) {
			return thx_fp__$Set_Set_$Impl_$.singleLeft(x,l,r);
		} else {
			return thx_fp__$Set_Set_$Impl_$.doubleLeft(x,l,r);
		}
	} else {
		return thx_fp__$Set_Set_$Impl_$.doubleLeft(x,l,r);
	}
};
thx_fp__$Set_Set_$Impl_$.rotateRight = function(x,l,r) {
	if(l[1] == 1) {
		var ry = l[5];
		var ly = l[4];
		if(thx_fp__$Set_Set_$Impl_$.size(ry) < 4 * thx_fp__$Set_Set_$Impl_$.size(ly)) {
			return thx_fp__$Set_Set_$Impl_$.singleRight(x,l,r);
		} else {
			return thx_fp__$Set_Set_$Impl_$.doubleRight(x,l,r);
		}
	} else {
		return thx_fp__$Set_Set_$Impl_$.doubleRight(x,l,r);
	}
};
thx_fp__$Set_Set_$Impl_$.singleLeft = function(x1,t1,r) {
	if(r[1] == 1) {
		var t3 = r[5];
		var t2 = r[4];
		var x2 = r[3];
		var l = thx_fp_SetImpl.Bin(thx_fp__$Set_Set_$Impl_$.size(t1) + thx_fp__$Set_Set_$Impl_$.size(t2) + 1,x1,t1,t2);
		return thx_fp_SetImpl.Bin(thx_fp__$Set_Set_$Impl_$.size(l) + thx_fp__$Set_Set_$Impl_$.size(t3) + 1,x2,l,t3);
	} else {
		throw new thx_Error("damn it, this should never happen",null,{ fileName : "Set.hx", lineNumber : 91, className : "thx.fp._Set.Set_Impl_", methodName : "singleLeft"});
	}
};
thx_fp__$Set_Set_$Impl_$.singleRight = function(x1,l,t3) {
	if(l[1] == 1) {
		var t2 = l[5];
		var t1 = l[4];
		var x2 = l[3];
		var r = thx_fp_SetImpl.Bin(thx_fp__$Set_Set_$Impl_$.size(t2) + thx_fp__$Set_Set_$Impl_$.size(t3) + 1,x1,t2,t3);
		return thx_fp_SetImpl.Bin(thx_fp__$Set_Set_$Impl_$.size(t1) + thx_fp__$Set_Set_$Impl_$.size(r) + 1,x2,t1,r);
	} else {
		throw new thx_Error("damn it, this should never happen",null,{ fileName : "Set.hx", lineNumber : 97, className : "thx.fp._Set.Set_Impl_", methodName : "singleRight"});
	}
};
thx_fp__$Set_Set_$Impl_$.doubleLeft = function(x1,t1,r) {
	if(r[1] == 1) {
		if(r[4][1] == 1) {
			var t4 = r[5];
			var x2 = r[3];
			var t3 = r[4][5];
			var t2 = r[4][4];
			var x3 = r[4][3];
			var l = thx_fp_SetImpl.Bin(thx_fp__$Set_Set_$Impl_$.size(t1) + thx_fp__$Set_Set_$Impl_$.size(t2) + 1,x1,t1,t2);
			var r1 = thx_fp_SetImpl.Bin(thx_fp__$Set_Set_$Impl_$.size(t3) + thx_fp__$Set_Set_$Impl_$.size(t4) + 1,x2,t3,t4);
			return thx_fp_SetImpl.Bin(thx_fp__$Set_Set_$Impl_$.size(l) + thx_fp__$Set_Set_$Impl_$.size(r1) + 1,x3,l,r1);
		} else {
			throw new thx_Error("damn it, this should never happen",null,{ fileName : "Set.hx", lineNumber : 104, className : "thx.fp._Set.Set_Impl_", methodName : "doubleLeft"});
		}
	} else {
		throw new thx_Error("damn it, this should never happen",null,{ fileName : "Set.hx", lineNumber : 104, className : "thx.fp._Set.Set_Impl_", methodName : "doubleLeft"});
	}
};
thx_fp__$Set_Set_$Impl_$.doubleRight = function(x1,l,t4) {
	if(l[1] == 1) {
		if(l[5][1] == 1) {
			var x2 = l[3];
			var t1 = l[4];
			var t3 = l[5][5];
			var t2 = l[5][4];
			var x3 = l[5][3];
			var l1 = thx_fp_SetImpl.Bin(thx_fp__$Set_Set_$Impl_$.size(t1) + thx_fp__$Set_Set_$Impl_$.size(t2) + 1,x2,t1,t2);
			var r = thx_fp_SetImpl.Bin(thx_fp__$Set_Set_$Impl_$.size(t3) + thx_fp__$Set_Set_$Impl_$.size(t4) + 1,x1,t3,t4);
			return thx_fp_SetImpl.Bin(thx_fp__$Set_Set_$Impl_$.size(l1) + thx_fp__$Set_Set_$Impl_$.size(r) + 1,x3,l1,r);
		} else {
			throw new thx_Error("damn it, this should never happen",null,{ fileName : "Set.hx", lineNumber : 111, className : "thx.fp._Set.Set_Impl_", methodName : "doubleRight"});
		}
	} else {
		throw new thx_Error("damn it, this should never happen",null,{ fileName : "Set.hx", lineNumber : 111, className : "thx.fp._Set.Set_Impl_", methodName : "doubleRight"});
	}
};
thx_fp__$Set_Set_$Impl_$.toList = function(this1) {
	switch(this1[1]) {
	case 0:
		return thx_fp_ListImpl.Nil;
	case 1:
		return thx_fp_ListImpl.Cons(this1[3],thx_fp__$List_List_$Impl_$.concat(thx_fp__$Set_Set_$Impl_$.toList(this1[4]),thx_fp__$Set_Set_$Impl_$.toList(this1[5])));
	}
};
var thx_fp_SetImpl = { __ename__ : ["thx","fp","SetImpl"], __constructs__ : ["Tip","Bin"] };
thx_fp_SetImpl.Tip = ["Tip",0];
thx_fp_SetImpl.Tip.__enum__ = thx_fp_SetImpl;
thx_fp_SetImpl.Bin = function(size,x,l,r) { var $x = ["Bin",1,size,x,l,r]; $x.__enum__ = thx_fp_SetImpl; return $x; };
var thx_fp_StringSet = function() { };
thx_fp_StringSet.__name__ = ["thx","fp","StringSet"];
thx_fp_StringSet.exists = function(set,value) {
	return thx_fp__$Set_Set_$Impl_$.member(set,value,thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Strings.compare));
};
thx_fp_StringSet.set = function(set,value) {
	return thx_fp__$Set_Set_$Impl_$.insert(set,value,thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Strings.compare));
};
var thx_fp_FloatSet = function() { };
thx_fp_FloatSet.__name__ = ["thx","fp","FloatSet"];
thx_fp_FloatSet.exists = function(set,value) {
	return thx_fp__$Set_Set_$Impl_$.member(set,value,thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Floats.compare));
};
thx_fp_FloatSet.set = function(set,value) {
	return thx_fp__$Set_Set_$Impl_$.insert(set,value,thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Floats.compare));
};
var thx_fp_IntSet = function() { };
thx_fp_IntSet.__name__ = ["thx","fp","IntSet"];
thx_fp_IntSet.exists = function(set,value) {
	return thx_fp__$Set_Set_$Impl_$.member(set,value,thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Ints.compare));
};
thx_fp_IntSet.set = function(set,value) {
	return thx_fp__$Set_Set_$Impl_$.insert(set,value,thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Ints.compare));
};
var thx_fp_ComparableOrdSet = function() { };
thx_fp_ComparableOrdSet.__name__ = ["thx","fp","ComparableOrdSet"];
thx_fp_ComparableOrdSet.exists = function(set,value) {
	return thx_fp__$Set_Set_$Impl_$.member(set,value,function(a,b) {
		return a.compareTo(b);
	});
};
thx_fp_ComparableOrdSet.set = function(set,value) {
	return thx_fp__$Set_Set_$Impl_$.insert(set,value,function(a,b) {
		return a.compareTo(b);
	});
};
var thx_fp_ComparableSet = function() { };
thx_fp_ComparableSet.__name__ = ["thx","fp","ComparableSet"];
thx_fp_ComparableSet.exists = function(set,value) {
	return thx_fp__$Set_Set_$Impl_$.member(set,value,function(a,b) {
		return thx__$Ord_Ordering_$Impl_$.fromInt(a.compareTo(b));
	});
};
thx_fp_ComparableSet.set = function(set,value) {
	return thx_fp__$Set_Set_$Impl_$.insert(set,value,function(a,b) {
		return thx__$Ord_Ordering_$Impl_$.fromInt(a.compareTo(b));
	});
};
var thx_fp__$State_State_$Impl_$ = {};
thx_fp__$State_State_$Impl_$.__name__ = ["thx","fp","_State","State_Impl_"];
thx_fp__$State_State_$Impl_$["void"] = function() {
	return thx_fp__$State_State_$Impl_$.pure(null);
};
thx_fp__$State_State_$Impl_$.pure = function(a) {
	return function(s) {
		return { _0 : s, _1 : a};
	};
};
thx_fp__$State_State_$Impl_$.getState = function() {
	return function(s) {
		return { _0 : s, _1 : s};
	};
};
thx_fp__$State_State_$Impl_$.putState = function(s) {
	return function(_) {
		return { _0 : s, _1 : null};
	};
};
thx_fp__$State_State_$Impl_$.map = function(this1,f) {
	return function(s) {
		return thx__$Tuple_Tuple2_$Impl_$.map(this1(s),f);
	};
};
thx_fp__$State_State_$Impl_$.ap = function(this1,s2) {
	return thx_fp__$State_State_$Impl_$.flatMap(this1,function(a) {
		var this2 = s2;
		var f = function(f1) {
			return f1(a);
		};
		return function(s) {
			return thx__$Tuple_Tuple2_$Impl_$.map(this2(s),f);
		};
	});
};
thx_fp__$State_State_$Impl_$.flatMap = function(this1,f) {
	return function(s) {
		var res0 = this1(s);
		return (f(res0._1))(res0._0);
	};
};
thx_fp__$State_State_$Impl_$.voided = function(this1) {
	var fab = this1;
	return function(a) {
		fab(a);
		return null;
	};
};
thx_fp__$State_State_$Impl_$.then = function(this1,next) {
	return function(s) {
		return next(this1(s)._0);
	};
};
thx_fp__$State_State_$Impl_$.foreachM = function(this1,f) {
	return function(s) {
		var res0 = this1(s);
		var tmp = (f(res0._1))(res0._0);
		var b = res0._1;
		return thx__$Tuple_Tuple2_$Impl_$.map(tmp,function(a) {
			return b;
		});
	};
};
thx_fp__$State_State_$Impl_$.modify = function(this1,f) {
	return function(s) {
		return this1(f(s));
	};
};
thx_fp__$State_State_$Impl_$.run = function(this1,s) {
	return this1(s)._1;
};
thx_fp__$State_State_$Impl_$.runState = function(this1,s) {
	return this1(s)._0;
};
thx_fp__$State_State_$Impl_$.ap2 = function(f,s1,s2) {
	var this1 = s1;
	var f1 = thx_Functions2.curry(f);
	return thx_fp__$State_State_$Impl_$.ap(s2,function(s) {
		return thx__$Tuple_Tuple2_$Impl_$.map(this1(s),f1);
	});
};
thx_fp__$State_State_$Impl_$.ap3 = function(f,s1,s2,s3) {
	var this1 = s1;
	var f1 = f;
	var f2 = thx_Functions2.curry(function(a,b) {
		return function(c) {
			return f1(a,b,c);
		};
	});
	return thx_fp__$State_State_$Impl_$.ap(s3,thx_fp__$State_State_$Impl_$.ap(s2,function(s) {
		return thx__$Tuple_Tuple2_$Impl_$.map(this1(s),f2);
	}));
};
thx_fp__$State_State_$Impl_$.ap4 = function(f,s1,s2,s3,s4) {
	var this1 = s1;
	var f1 = f;
	var f2 = function(a,b,c) {
		return function(d) {
			return f1(a,b,c,d);
		};
	};
	var f3 = thx_Functions2.curry(function(a1,b1) {
		return function(c1) {
			return f2(a1,b1,c1);
		};
	});
	return thx_fp__$State_State_$Impl_$.ap(s4,thx_fp__$State_State_$Impl_$.ap(s3,thx_fp__$State_State_$Impl_$.ap(s2,function(s) {
		return thx__$Tuple_Tuple2_$Impl_$.map(this1(s),f3);
	})));
};
thx_fp__$State_State_$Impl_$.ap5 = function(f,s1,s2,s3,s4,s5) {
	var this1 = s1;
	var f1 = f;
	var f2 = function(a,b,c,d) {
		return function(e) {
			return f1(a,b,c,d,e);
		};
	};
	var f3 = function(a1,b1,c1) {
		return function(d1) {
			return f2(a1,b1,c1,d1);
		};
	};
	var f4 = thx_Functions2.curry(function(a2,b2) {
		return function(c2) {
			return f3(a2,b2,c2);
		};
	});
	return thx_fp__$State_State_$Impl_$.ap(s5,thx_fp__$State_State_$Impl_$.ap(s4,thx_fp__$State_State_$Impl_$.ap(s3,thx_fp__$State_State_$Impl_$.ap(s2,function(s) {
		return thx__$Tuple_Tuple2_$Impl_$.map(this1(s),f4);
	}))));
};
thx_fp__$State_State_$Impl_$.ap6 = function(f,s1,s2,s3,s4,s5,s6) {
	var this1 = s1;
	var f1 = f;
	var f2 = function(a,b,c,d,e) {
		return function(f0) {
			return f1(a,b,c,d,e,f0);
		};
	};
	var f3 = function(a1,b1,c1,d1) {
		return function(e1) {
			return f2(a1,b1,c1,d1,e1);
		};
	};
	var f4 = function(a2,b2,c2) {
		return function(d2) {
			return f3(a2,b2,c2,d2);
		};
	};
	var f5 = thx_Functions2.curry(function(a3,b3) {
		return function(c3) {
			return f4(a3,b3,c3);
		};
	});
	return thx_fp__$State_State_$Impl_$.ap(s6,thx_fp__$State_State_$Impl_$.ap(s5,thx_fp__$State_State_$Impl_$.ap(s4,thx_fp__$State_State_$Impl_$.ap(s3,thx_fp__$State_State_$Impl_$.ap(s2,function(s) {
		return thx__$Tuple_Tuple2_$Impl_$.map(this1(s),f5);
	})))));
};
thx_fp__$State_State_$Impl_$.ap7 = function(f,s1,s2,s3,s4,s5,s6,s7) {
	var this1 = s1;
	var f1 = f;
	var f2 = function(a,b,c,d,e,f0) {
		return function(g) {
			return f1(a,b,c,d,e,f0,g);
		};
	};
	var f3 = function(a1,b1,c1,d1,e1) {
		return function(f01) {
			return f2(a1,b1,c1,d1,e1,f01);
		};
	};
	var f4 = function(a2,b2,c2,d2) {
		return function(e2) {
			return f3(a2,b2,c2,d2,e2);
		};
	};
	var f5 = function(a3,b3,c3) {
		return function(d3) {
			return f4(a3,b3,c3,d3);
		};
	};
	var f6 = thx_Functions2.curry(function(a4,b4) {
		return function(c4) {
			return f5(a4,b4,c4);
		};
	});
	return thx_fp__$State_State_$Impl_$.ap(s7,thx_fp__$State_State_$Impl_$.ap(s6,thx_fp__$State_State_$Impl_$.ap(s5,thx_fp__$State_State_$Impl_$.ap(s4,thx_fp__$State_State_$Impl_$.ap(s3,thx_fp__$State_State_$Impl_$.ap(s2,function(s) {
		return thx__$Tuple_Tuple2_$Impl_$.map(this1(s),f6);
	}))))));
};
thx_fp__$State_State_$Impl_$.ap8 = function(f,s1,s2,s3,s4,s5,s6,s7,s8) {
	var this1 = s1;
	var f1 = f;
	var f2 = function(a,b,c,d,e,f0,g) {
		return function(h) {
			return f1(a,b,c,d,e,f0,g,h);
		};
	};
	var f3 = function(a1,b1,c1,d1,e1,f01) {
		return function(g1) {
			return f2(a1,b1,c1,d1,e1,f01,g1);
		};
	};
	var f4 = function(a2,b2,c2,d2,e2) {
		return function(f02) {
			return f3(a2,b2,c2,d2,e2,f02);
		};
	};
	var f5 = function(a3,b3,c3,d3) {
		return function(e3) {
			return f4(a3,b3,c3,d3,e3);
		};
	};
	var f6 = function(a4,b4,c4) {
		return function(d4) {
			return f5(a4,b4,c4,d4);
		};
	};
	var f7 = thx_Functions2.curry(function(a5,b5) {
		return function(c5) {
			return f6(a5,b5,c5);
		};
	});
	return thx_fp__$State_State_$Impl_$.ap(s8,thx_fp__$State_State_$Impl_$.ap(s7,thx_fp__$State_State_$Impl_$.ap(s6,thx_fp__$State_State_$Impl_$.ap(s5,thx_fp__$State_State_$Impl_$.ap(s4,thx_fp__$State_State_$Impl_$.ap(s3,thx_fp__$State_State_$Impl_$.ap(s2,function(s) {
		return thx__$Tuple_Tuple2_$Impl_$.map(this1(s),f7);
	})))))));
};
var thx_fp_TestList = function() {
};
thx_fp_TestList.__name__ = ["thx","fp","TestList"];
thx_fp_TestList.prototype = {
	testFoldLeft: function() {
		var list = thx_fp_ListImpl.Cons(1,thx_fp_ListImpl.Cons(2,thx_fp_ListImpl.Cons(3,thx_fp_ListImpl.Nil)));
		utest_Assert.equals(6,thx_fp__$List_List_$Impl_$.foldLeft(list,0,function(_0,_1) {
			return _0 + _1;
		}),null,{ fileName : "TestList.hx", lineNumber : 13, className : "thx.fp.TestList", methodName : "testFoldLeft"});
		utest_Assert.same([1,2,3],thx_fp__$List_List_$Impl_$.foldLeft(list,[],function(acc,v) {
			acc.push(v);
			return acc;
		}),null,null,null,{ fileName : "TestList.hx", lineNumber : 15, className : "thx.fp.TestList", methodName : "testFoldLeft"});
	}
	,testToArray: function() {
		var list = thx_fp_ListImpl.Cons(1,thx_fp_ListImpl.Cons(2,thx_fp_ListImpl.Cons(3,thx_fp_ListImpl.Nil)));
		utest_Assert.same([1,2,3],thx_fp__$List_List_$Impl_$.foldLeft(list,[],function(acc,a) {
			acc.push(a);
			return acc;
		}),null,null,null,{ fileName : "TestList.hx", lineNumber : 23, className : "thx.fp.TestList", methodName : "testToArray"});
	}
	,testIntersperse: function() {
		var list = thx_fp_ListImpl.Cons(1,thx_fp_ListImpl.Cons(2,thx_fp_ListImpl.Cons(3,thx_fp_ListImpl.Nil)));
		var interspersed = thx_fp__$List_List_$Impl_$.intersperse(list,0);
		utest_Assert.same(thx_fp_ListImpl.Cons(1,thx_fp_ListImpl.Cons(0,thx_fp_ListImpl.Cons(2,thx_fp_ListImpl.Cons(0,thx_fp_ListImpl.Cons(3,thx_fp_ListImpl.Nil))))),interspersed,null,null,null,{ fileName : "TestList.hx", lineNumber : 29, className : "thx.fp.TestList", methodName : "testIntersperse"});
	}
	,testFromArray: function() {
		var arr = [1,2,3,4];
		var _e = arr;
		utest_Assert.same(arr,thx_fp__$List_List_$Impl_$.foldLeft((function(f,initial) {
			var initial1 = initial;
			var i = _e.length;
			while(--i >= 0) initial1 = f(initial1,_e[i]);
			return initial1;
		})(function(_0,_1) {
			return thx_fp_ListImpl.Cons(_1,_0);
		},thx_fp_ListImpl.Nil),[],function(acc,a) {
			acc.push(a);
			return acc;
		}),null,null,null,{ fileName : "TestList.hx", lineNumber : 34, className : "thx.fp.TestList", methodName : "testFromArray"});
	}
	,testConcat: function() {
		var l1 = thx_fp_ListImpl.Cons(1,thx_fp_ListImpl.Cons(2,thx_fp_ListImpl.Nil));
		var l2 = thx_fp_ListImpl.Cons(3,thx_fp_ListImpl.Cons(4,thx_fp_ListImpl.Nil));
		var l = thx_fp__$List_List_$Impl_$.concat(l1,l2);
		utest_Assert.same(thx_fp_ListImpl.Cons(1,thx_fp_ListImpl.Cons(2,thx_fp_ListImpl.Cons(3,thx_fp_ListImpl.Cons(4,thx_fp_ListImpl.Nil)))),l,null,null,null,{ fileName : "TestList.hx", lineNumber : 41, className : "thx.fp.TestList", methodName : "testConcat"});
	}
	,testToString: function() {
		var list = thx_fp_ListImpl.Cons(1,thx_fp_ListImpl.Cons(2,thx_fp_ListImpl.Cons(3,thx_fp_ListImpl.Nil)));
		utest_Assert.same("[1,2,3]",thx_fp__$List_List_$Impl_$.toStringWithShow(list,function(a1) {
			return thx_Ints.toString(a1,10);
		}),null,null,null,{ fileName : "TestList.hx", lineNumber : 46, className : "thx.fp.TestList", methodName : "testToString"});
		var list1 = thx_fp_ListImpl.Cons("1",thx_fp_ListImpl.Cons("2",thx_fp_ListImpl.Cons("3",thx_fp_ListImpl.Nil)));
		utest_Assert.same("[1,2,3]","[" + thx_fp__$List_List_$Impl_$.foldLeft(thx_fp__$List_List_$Impl_$.intersperse(list1,","),"",function(_0,_1) {
			return _0 + _1;
		}) + "]",null,null,null,{ fileName : "TestList.hx", lineNumber : 49, className : "thx.fp.TestList", methodName : "testToString"});
	}
	,testMap: function() {
		var list = thx_fp_ListImpl.Cons(1,thx_fp_ListImpl.Cons(2,thx_fp_ListImpl.Cons(3,thx_fp_ListImpl.Nil)));
		utest_Assert.same(thx_fp_ListImpl.Cons(2,thx_fp_ListImpl.Cons(4,thx_fp_ListImpl.Cons(6,thx_fp_ListImpl.Nil))),thx_fp__$List_List_$Impl_$.map(list,function(v) {
			return v * 2;
		}),null,null,null,{ fileName : "TestList.hx", lineNumber : 54, className : "thx.fp.TestList", methodName : "testMap"});
	}
	,testFlatMap: function() {
		var list = thx_fp_ListImpl.Cons(1,thx_fp_ListImpl.Cons(2,thx_fp_ListImpl.Cons(3,thx_fp_ListImpl.Nil)));
		var map = null;
		map = function(v) {
			if(v == 0) {
				return thx_fp_ListImpl.Nil;
			} else {
				return thx_fp_ListImpl.Cons(v,map(v - 1));
			}
		};
		var slist = thx_fp__$List_List_$Impl_$.flatMap(list,map);
		utest_Assert.same(thx_fp_ListImpl.Cons(1,thx_fp_ListImpl.Cons(2,thx_fp_ListImpl.Cons(1,thx_fp_ListImpl.Cons(3,thx_fp_ListImpl.Cons(2,thx_fp_ListImpl.Cons(1,thx_fp_ListImpl.Nil)))))),slist,null,null,null,{ fileName : "TestList.hx", lineNumber : 66, className : "thx.fp.TestList", methodName : "testFlatMap"});
	}
	,testZip5Ap: function() {
		var _e = ["a","b","c"];
		var sx = (function(f,initial) {
			var initial1 = initial;
			var i = _e.length;
			while(--i >= 0) initial1 = f(initial1,_e[i]);
			return initial1;
		})(function(_0,_1) {
			return thx_fp_ListImpl.Cons(_1,_0);
		},thx_fp_ListImpl.Nil);
		var _e1 = [1,2];
		var ix = (function(f1,initial2) {
			var initial3 = initial2;
			var i1 = _e1.length;
			while(--i1 >= 0) initial3 = f1(initial3,_e1[i1]);
			return initial3;
		})(function(_01,_11) {
			return thx_fp_ListImpl.Cons(_11,_01);
		},thx_fp_ListImpl.Nil);
		var _e2 = ["x","y","z"];
		var tx = (function(f2,initial4) {
			var initial5 = initial4;
			var i2 = _e2.length;
			while(--i2 >= 0) initial5 = f2(initial5,_e2[i2]);
			return initial5;
		})(function(_02,_12) {
			return thx_fp_ListImpl.Cons(_12,_02);
		},thx_fp_ListImpl.Nil);
		var _e3 = [3,4];
		var jx = (function(f3,initial6) {
			var initial7 = initial6;
			var i3 = _e3.length;
			while(--i3 >= 0) initial7 = f3(initial7,_e3[i3]);
			return initial7;
		})(function(_03,_13) {
			return thx_fp_ListImpl.Cons(_13,_03);
		},thx_fp_ListImpl.Nil);
		var _e4 = [true,false,true];
		var bx = (function(f4,initial8) {
			var initial9 = initial8;
			var i4 = _e4.length;
			while(--i4 >= 0) initial9 = f4(initial9,_e4[i4]);
			return initial9;
		})(function(_04,_14) {
			return thx_fp_ListImpl.Cons(_14,_04);
		},thx_fp_ListImpl.Nil);
		var _e5 = ["a1x3true","b2y4false"];
		utest_Assert.same((function(f5,initial10) {
			var initial11 = initial10;
			var i5 = _e5.length;
			while(--i5 >= 0) initial11 = f5(initial11,_e5[i5]);
			return initial11;
		})(function(_05,_15) {
			return thx_fp_ListImpl.Cons(_15,_05);
		},thx_fp_ListImpl.Nil),thx_fp__$List_List_$Impl_$.zip5Ap(function(s,i6,t,j,b) {
			return "" + s + i6 + t + j + (b == null?"null":"" + b);
		},sx,ix,tx,jx,bx),null,null,null,{ fileName : "TestList.hx", lineNumber : 77, className : "thx.fp.TestList", methodName : "testZip5Ap"});
	}
	,__class__: thx_fp_TestList
};
var thx_fp_TestMap = function() {
};
thx_fp_TestMap.__name__ = ["thx","fp","TestMap"];
thx_fp_TestMap.prototype = {
	testRemove: function() {
		var m = thx_fp__$Map_Map_$Impl_$["delete"](thx_fp__$Map_Map_$Impl_$.insert(thx_fp__$Map_Map_$Impl_$.insert(thx_fp_MapImpl.Bin(1,"Y",1,thx_fp_MapImpl.Tip,thx_fp_MapImpl.Tip),"X",2,thx_Strings.order),"Z",3,thx_Strings.order),"X",thx_Strings.order);
		utest_Assert.same(haxe_ds_Option.Some(1),thx_fp__$Map_Map_$Impl_$.lookup(m,"Y",thx_Strings.order),null,null,null,{ fileName : "TestMap.hx", lineNumber : 18, className : "thx.fp.TestMap", methodName : "testRemove"});
		utest_Assert.same(haxe_ds_Option.Some(3),thx_fp__$Map_Map_$Impl_$.lookup(m,"Z",thx_Strings.order),null,null,null,{ fileName : "TestMap.hx", lineNumber : 19, className : "thx.fp.TestMap", methodName : "testRemove"});
		utest_Assert.equals(2,thx_fp__$Map_Map_$Impl_$.size(m),null,{ fileName : "TestMap.hx", lineNumber : 20, className : "thx.fp.TestMap", methodName : "testRemove"});
	}
	,testEmpty: function() {
		var m = thx_fp_MapImpl.Tip;
		utest_Assert.same(haxe_ds_Option.None,thx_fp__$Map_Map_$Impl_$.lookup(m,"some",thx_Strings.order),null,null,null,{ fileName : "TestMap.hx", lineNumber : 25, className : "thx.fp.TestMap", methodName : "testEmpty"});
		utest_Assert.equals(0,thx_fp__$Map_Map_$Impl_$.size(m),null,{ fileName : "TestMap.hx", lineNumber : 26, className : "thx.fp.TestMap", methodName : "testEmpty"});
	}
	,testSizes: function() {
		utest_Assert.equals(3,thx_fp__$Map_Map_$Impl_$.size(thx_fp__$Map_Map_$Impl_$.insert(thx_fp__$Map_Map_$Impl_$.insert(thx_fp_MapImpl.Bin(1,"B",1,thx_fp_MapImpl.Tip,thx_fp_MapImpl.Tip),"A",1,thx_Strings.order),"C",1,thx_Strings.order)),null,{ fileName : "TestMap.hx", lineNumber : 30, className : "thx.fp.TestMap", methodName : "testSizes"});
		utest_Assert.equals(3,thx_fp__$Map_Map_$Impl_$.size(thx_fp__$Map_Map_$Impl_$.insert(thx_fp__$Map_Map_$Impl_$.insert(thx_fp_MapImpl.Bin(1,"A",1,thx_fp_MapImpl.Tip,thx_fp_MapImpl.Tip),"B",1,thx_Strings.order),"C",1,thx_Strings.order)),null,{ fileName : "TestMap.hx", lineNumber : 31, className : "thx.fp.TestMap", methodName : "testSizes"});
		utest_Assert.equals(3,thx_fp__$Map_Map_$Impl_$.size(thx_fp__$Map_Map_$Impl_$.insert(thx_fp__$Map_Map_$Impl_$.insert(thx_fp_MapImpl.Bin(1,"C",1,thx_fp_MapImpl.Tip,thx_fp_MapImpl.Tip),"B",1,thx_Strings.order),"A",1,thx_Strings.order)),null,{ fileName : "TestMap.hx", lineNumber : 32, className : "thx.fp.TestMap", methodName : "testSizes"});
		utest_Assert.equals(3,thx_fp__$Map_Map_$Impl_$.size(thx_fp__$Map_Map_$Impl_$.insert(thx_fp__$Map_Map_$Impl_$.insert(thx_fp_MapImpl.Bin(1,"B",1,thx_fp_MapImpl.Tip,thx_fp_MapImpl.Tip),"C",1,thx_Strings.order),"A",1,thx_Strings.order)),null,{ fileName : "TestMap.hx", lineNumber : 33, className : "thx.fp.TestMap", methodName : "testSizes"});
		utest_Assert.equals(3,thx_fp__$Map_Map_$Impl_$.size(thx_fp__$Map_Map_$Impl_$.insert(thx_fp__$Map_Map_$Impl_$.insert(thx_fp_MapImpl.Bin(1,"C",1,thx_fp_MapImpl.Tip,thx_fp_MapImpl.Tip),"A",1,thx_Strings.order),"B",1,thx_Strings.order)),null,{ fileName : "TestMap.hx", lineNumber : 34, className : "thx.fp.TestMap", methodName : "testSizes"});
		utest_Assert.equals(3,thx_fp__$Map_Map_$Impl_$.size(thx_fp__$Map_Map_$Impl_$.insert(thx_fp__$Map_Map_$Impl_$.insert(thx_fp_MapImpl.Bin(1,"A",1,thx_fp_MapImpl.Tip,thx_fp_MapImpl.Tip),"C",1,thx_Strings.order),"B",1,thx_Strings.order)),null,{ fileName : "TestMap.hx", lineNumber : 35, className : "thx.fp.TestMap", methodName : "testSizes"});
		utest_Assert.equals(1,thx_fp__$Map_Map_$Impl_$.size(thx_fp__$Map_Map_$Impl_$.insert(thx_fp__$Map_Map_$Impl_$.insert(thx_fp_MapImpl.Bin(1,"A",1,thx_fp_MapImpl.Tip,thx_fp_MapImpl.Tip),"A",1,thx_Strings.order),"A",1,thx_Strings.order)),null,{ fileName : "TestMap.hx", lineNumber : 37, className : "thx.fp.TestMap", methodName : "testSizes"});
	}
	,testFoldLeft: function() {
		utest_Assert.same([1,2,3],thx_Arrays.order(thx_fp__$Map_Map_$Impl_$.foldLeft(thx_fp__$Map_Map_$Impl_$.insert(thx_fp__$Map_Map_$Impl_$.insert(thx_fp_MapImpl.Bin(1,"A",1,thx_fp_MapImpl.Tip,thx_fp_MapImpl.Tip),"B",2,thx_Strings.order),"C",3,thx_Strings.order),[],function(arr,v) {
			arr.push(v);
			return arr;
		}),thx_Ints.compare),null,null,null,{ fileName : "TestMap.hx", lineNumber : 46, className : "thx.fp.TestMap", methodName : "testFoldLeft"});
	}
	,testFoldLeftKeys: function() {
		utest_Assert.same(["A","B","C"],thx_Arrays.order(thx_fp__$Map_Map_$Impl_$.foldLeftKeys(thx_fp__$Map_Map_$Impl_$.insert(thx_fp__$Map_Map_$Impl_$.insert(thx_fp_MapImpl.Bin(1,"A",1,thx_fp_MapImpl.Tip,thx_fp_MapImpl.Tip),"B",2,thx_Strings.order),"C",3,thx_Strings.order),[],function(arr,k) {
			arr.push(k);
			return arr;
		}),thx_Strings.compare),null,null,null,{ fileName : "TestMap.hx", lineNumber : 55, className : "thx.fp.TestMap", methodName : "testFoldLeftKeys"});
	}
	,testSet: function() {
		var m = thx_fp__$Map_Map_$Impl_$.insert(thx_fp__$Map_Map_$Impl_$.insert(thx_fp_MapImpl.Bin(1,"Y",1,thx_fp_MapImpl.Tip,thx_fp_MapImpl.Tip),"X",2,thx_Strings.order),"Z",3,thx_Strings.order);
		utest_Assert.same(haxe_ds_Option.Some(2),thx_fp__$Map_Map_$Impl_$.lookup(m,"X",thx_Strings.order),null,null,null,{ fileName : "TestMap.hx", lineNumber : 60, className : "thx.fp.TestMap", methodName : "testSet"});
		utest_Assert.same(haxe_ds_Option.Some(1),thx_fp__$Map_Map_$Impl_$.lookup(m,"Y",thx_Strings.order),null,null,null,{ fileName : "TestMap.hx", lineNumber : 61, className : "thx.fp.TestMap", methodName : "testSet"});
		utest_Assert.same(haxe_ds_Option.Some(3),thx_fp__$Map_Map_$Impl_$.lookup(m,"Z",thx_Strings.order),null,null,null,{ fileName : "TestMap.hx", lineNumber : 62, className : "thx.fp.TestMap", methodName : "testSet"});
		utest_Assert.equals(3,thx_fp__$Map_Map_$Impl_$.size(m),null,{ fileName : "TestMap.hx", lineNumber : 63, className : "thx.fp.TestMap", methodName : "testSet"});
	}
	,testObjectSet: function() {
		var a = new thx_fp_CO("a");
		var b = new thx_fp_CO("b");
		var c = new thx_fp_CO("c");
		var m = thx_fp__$Map_Map_$Impl_$.insert(thx_fp__$Map_Map_$Impl_$.insert(thx_fp_MapImpl.Bin(1,a,1,thx_fp_MapImpl.Tip,thx_fp_MapImpl.Tip),b,2,thx__$Ord_Ord_$Impl_$.forComparableOrd()),c,3,thx__$Ord_Ord_$Impl_$.forComparableOrd());
		utest_Assert.same(haxe_ds_Option.Some(1),thx_fp__$Map_Map_$Impl_$.lookup(m,a,thx__$Ord_Ord_$Impl_$.forComparableOrd()),null,null,null,{ fileName : "TestMap.hx", lineNumber : 74, className : "thx.fp.TestMap", methodName : "testObjectSet"});
		utest_Assert.same(haxe_ds_Option.Some(2),thx_fp__$Map_Map_$Impl_$.lookup(m,b,thx__$Ord_Ord_$Impl_$.forComparableOrd()),null,null,null,{ fileName : "TestMap.hx", lineNumber : 75, className : "thx.fp.TestMap", methodName : "testObjectSet"});
		utest_Assert.same(haxe_ds_Option.Some(3),thx_fp__$Map_Map_$Impl_$.lookup(m,c,thx__$Ord_Ord_$Impl_$.forComparableOrd()),null,null,null,{ fileName : "TestMap.hx", lineNumber : 76, className : "thx.fp.TestMap", methodName : "testObjectSet"});
		utest_Assert.equals(3,thx_fp__$Map_Map_$Impl_$.size(m),null,{ fileName : "TestMap.hx", lineNumber : 77, className : "thx.fp.TestMap", methodName : "testObjectSet"});
	}
	,testObjectSet2: function() {
		var a = new thx_fp_CO2("a");
		var b = new thx_fp_CO2("b");
		var c = new thx_fp_CO2("c");
		var m = thx_fp__$Map_Map_$Impl_$.insert(thx_fp__$Map_Map_$Impl_$.insert(thx_fp_MapImpl.Bin(1,a,1,thx_fp_MapImpl.Tip,thx_fp_MapImpl.Tip),b,2,thx__$Ord_Ord_$Impl_$.forComparable()),c,3,thx__$Ord_Ord_$Impl_$.forComparable());
		utest_Assert.same(haxe_ds_Option.Some(1),thx_fp__$Map_Map_$Impl_$.lookup(m,a,thx__$Ord_Ord_$Impl_$.forComparable()),null,null,null,{ fileName : "TestMap.hx", lineNumber : 88, className : "thx.fp.TestMap", methodName : "testObjectSet2"});
		utest_Assert.same(haxe_ds_Option.Some(2),thx_fp__$Map_Map_$Impl_$.lookup(m,b,thx__$Ord_Ord_$Impl_$.forComparable()),null,null,null,{ fileName : "TestMap.hx", lineNumber : 89, className : "thx.fp.TestMap", methodName : "testObjectSet2"});
		utest_Assert.same(haxe_ds_Option.Some(3),thx_fp__$Map_Map_$Impl_$.lookup(m,c,thx__$Ord_Ord_$Impl_$.forComparable()),null,null,null,{ fileName : "TestMap.hx", lineNumber : 90, className : "thx.fp.TestMap", methodName : "testObjectSet2"});
		utest_Assert.equals(3,thx_fp__$Map_Map_$Impl_$.size(m),null,{ fileName : "TestMap.hx", lineNumber : 91, className : "thx.fp.TestMap", methodName : "testObjectSet2"});
	}
	,testFromNative: function() {
		var _g = new haxe_ds_StringMap();
		if(__map_reserved.a != null) {
			_g.setReserved("a",1);
		} else {
			_g.h["a"] = 1;
		}
		if(__map_reserved.b != null) {
			_g.setReserved("b",2);
		} else {
			_g.h["b"] = 2;
		}
		var map = thx_fp_StringMap.fromNative(_g);
		utest_Assert.equals(2,thx_fp__$Map_Map_$Impl_$.size(map),null,{ fileName : "TestMap.hx", lineNumber : 97, className : "thx.fp.TestMap", methodName : "testFromNative"});
		utest_Assert.isTrue(thx_Options.toBool(thx_fp__$Map_Map_$Impl_$.lookup(map,"a",thx_Strings.order)),null,{ fileName : "TestMap.hx", lineNumber : 98, className : "thx.fp.TestMap", methodName : "testFromNative"});
		utest_Assert.isTrue(thx_Options.toBool(thx_fp__$Map_Map_$Impl_$.lookup(map,"b",thx_Strings.order)),null,{ fileName : "TestMap.hx", lineNumber : 99, className : "thx.fp.TestMap", methodName : "testFromNative"});
	}
	,__class__: thx_fp_TestMap
};
var thx_fp_CO = function(v) {
	this.v = v;
};
thx_fp_CO.__name__ = ["thx","fp","CO"];
thx_fp_CO.prototype = {
	v: null
	,compareTo: function(that) {
		return thx__$Ord_Ordering_$Impl_$.fromInt(haxe_Utf8.compare(this.v,that.v));
	}
	,__class__: thx_fp_CO
};
var thx_fp_CO2 = function(v) {
	this.v = v;
};
thx_fp_CO2.__name__ = ["thx","fp","CO2"];
thx_fp_CO2.prototype = {
	v: null
	,compareTo: function(that) {
		return haxe_Utf8.compare(this.v,that.v);
	}
	,__class__: thx_fp_CO2
};
var thx_fp_TestSet = function() {
};
thx_fp_TestSet.__name__ = ["thx","fp","TestSet"];
thx_fp_TestSet.prototype = {
	testEmpty: function() {
		var set = thx_fp_SetImpl.Tip;
		utest_Assert.isFalse(thx_fp__$Set_Set_$Impl_$.member(set,"some",thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Strings.compare)),null,{ fileName : "TestSet.hx", lineNumber : 12, className : "thx.fp.TestSet", methodName : "testEmpty"});
		utest_Assert.equals(0,thx_fp__$Set_Set_$Impl_$.size(set),null,{ fileName : "TestSet.hx", lineNumber : 13, className : "thx.fp.TestSet", methodName : "testEmpty"});
	}
	,testSizes: function() {
		utest_Assert.equals(3,thx_fp__$Set_Set_$Impl_$.size(thx_fp__$Set_Set_$Impl_$.insert(thx_fp__$Set_Set_$Impl_$.insert(thx_fp_SetImpl.Bin(1,"B",thx_fp_SetImpl.Tip,thx_fp_SetImpl.Tip),"A",thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Strings.compare)),"C",thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Strings.compare))),null,{ fileName : "TestSet.hx", lineNumber : 17, className : "thx.fp.TestSet", methodName : "testSizes"});
		utest_Assert.equals(3,thx_fp__$Set_Set_$Impl_$.size(thx_fp__$Set_Set_$Impl_$.insert(thx_fp__$Set_Set_$Impl_$.insert(thx_fp_SetImpl.Bin(1,"A",thx_fp_SetImpl.Tip,thx_fp_SetImpl.Tip),"B",thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Strings.compare)),"C",thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Strings.compare))),null,{ fileName : "TestSet.hx", lineNumber : 18, className : "thx.fp.TestSet", methodName : "testSizes"});
		utest_Assert.equals(3,thx_fp__$Set_Set_$Impl_$.size(thx_fp__$Set_Set_$Impl_$.insert(thx_fp__$Set_Set_$Impl_$.insert(thx_fp_SetImpl.Bin(1,"C",thx_fp_SetImpl.Tip,thx_fp_SetImpl.Tip),"B",thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Strings.compare)),"A",thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Strings.compare))),null,{ fileName : "TestSet.hx", lineNumber : 19, className : "thx.fp.TestSet", methodName : "testSizes"});
		utest_Assert.equals(3,thx_fp__$Set_Set_$Impl_$.size(thx_fp__$Set_Set_$Impl_$.insert(thx_fp__$Set_Set_$Impl_$.insert(thx_fp_SetImpl.Bin(1,"B",thx_fp_SetImpl.Tip,thx_fp_SetImpl.Tip),"C",thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Strings.compare)),"A",thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Strings.compare))),null,{ fileName : "TestSet.hx", lineNumber : 20, className : "thx.fp.TestSet", methodName : "testSizes"});
		utest_Assert.equals(3,thx_fp__$Set_Set_$Impl_$.size(thx_fp__$Set_Set_$Impl_$.insert(thx_fp__$Set_Set_$Impl_$.insert(thx_fp_SetImpl.Bin(1,"C",thx_fp_SetImpl.Tip,thx_fp_SetImpl.Tip),"A",thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Strings.compare)),"B",thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Strings.compare))),null,{ fileName : "TestSet.hx", lineNumber : 21, className : "thx.fp.TestSet", methodName : "testSizes"});
		utest_Assert.equals(3,thx_fp__$Set_Set_$Impl_$.size(thx_fp__$Set_Set_$Impl_$.insert(thx_fp__$Set_Set_$Impl_$.insert(thx_fp_SetImpl.Bin(1,"A",thx_fp_SetImpl.Tip,thx_fp_SetImpl.Tip),"C",thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Strings.compare)),"B",thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Strings.compare))),null,{ fileName : "TestSet.hx", lineNumber : 22, className : "thx.fp.TestSet", methodName : "testSizes"});
		utest_Assert.equals(1,thx_fp__$Set_Set_$Impl_$.size(thx_fp__$Set_Set_$Impl_$.insert(thx_fp__$Set_Set_$Impl_$.insert(thx_fp_SetImpl.Bin(1,"A",thx_fp_SetImpl.Tip,thx_fp_SetImpl.Tip),"A",thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Strings.compare)),"A",thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Strings.compare))),null,{ fileName : "TestSet.hx", lineNumber : 24, className : "thx.fp.TestSet", methodName : "testSizes"});
	}
	,testSet: function() {
		var m = thx_fp__$Set_Set_$Impl_$.insert(thx_fp__$Set_Set_$Impl_$.insert(thx_fp__$Set_Set_$Impl_$.insert(thx_fp__$Set_Set_$Impl_$.insert(thx_fp_SetImpl.Bin(1,"Y",thx_fp_SetImpl.Tip,thx_fp_SetImpl.Tip),"X",thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Strings.compare)),"Y",thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Strings.compare)),"Z",thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Strings.compare)),"Z",thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Strings.compare));
		utest_Assert.isTrue(thx_fp__$Set_Set_$Impl_$.member(m,"X",thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Strings.compare)),null,{ fileName : "TestSet.hx", lineNumber : 29, className : "thx.fp.TestSet", methodName : "testSet"});
		utest_Assert.isTrue(thx_fp__$Set_Set_$Impl_$.member(m,"Y",thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Strings.compare)),null,{ fileName : "TestSet.hx", lineNumber : 30, className : "thx.fp.TestSet", methodName : "testSet"});
		utest_Assert.isTrue(thx_fp__$Set_Set_$Impl_$.member(m,"Z",thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Strings.compare)),null,{ fileName : "TestSet.hx", lineNumber : 31, className : "thx.fp.TestSet", methodName : "testSet"});
		utest_Assert.isFalse(thx_fp__$Set_Set_$Impl_$.member(m,"W",thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Strings.compare)),null,{ fileName : "TestSet.hx", lineNumber : 32, className : "thx.fp.TestSet", methodName : "testSet"});
		utest_Assert.equals(3,thx_fp__$Set_Set_$Impl_$.size(m),null,{ fileName : "TestSet.hx", lineNumber : 33, className : "thx.fp.TestSet", methodName : "testSet"});
	}
	,testMapList: function() {
		utest_Assert.same(["x","y","z"],thx_Arrays.order(thx_fp__$List_List_$Impl_$.foldLeft(thx_fp__$Set_Set_$Impl_$.mapList(thx_fp__$Set_Set_$Impl_$.insert(thx_fp__$Set_Set_$Impl_$.insert(thx_fp_SetImpl.Bin(1,"Y",thx_fp_SetImpl.Tip,thx_fp_SetImpl.Tip),"X",thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Strings.compare)),"Z",thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Strings.compare)),function(v) {
			return v.toLowerCase();
		}),[],function(acc,a) {
			acc.push(a);
			return acc;
		}),thx_Strings.compare),null,null,null,{ fileName : "TestSet.hx", lineNumber : 40, className : "thx.fp.TestSet", methodName : "testMapList"});
	}
	,testFoldLeft: function() {
		utest_Assert.same([1,2,3],thx_Arrays.order(thx_fp__$Set_Set_$Impl_$.foldLeft(thx_fp__$Set_Set_$Impl_$.insert(thx_fp__$Set_Set_$Impl_$.insert(thx_fp_SetImpl.Bin(1,1,thx_fp_SetImpl.Tip,thx_fp_SetImpl.Tip),2,thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Ints.compare)),3,thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Ints.compare)),[],function(acc,v) {
			acc.push(v);
			return acc;
		}),thx_Ints.compare),null,null,null,{ fileName : "TestSet.hx", lineNumber : 45, className : "thx.fp.TestSet", methodName : "testFoldLeft"});
	}
	,testToList: function() {
		utest_Assert.same(["X","Y","Z"],thx_Arrays.order(thx_fp__$List_List_$Impl_$.foldLeft(thx_fp__$Set_Set_$Impl_$.toList(thx_fp__$Set_Set_$Impl_$.insert(thx_fp__$Set_Set_$Impl_$.insert(thx_fp_SetImpl.Bin(1,"Y",thx_fp_SetImpl.Tip,thx_fp_SetImpl.Tip),"X",thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Strings.compare)),"Z",thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Strings.compare))),[],function(acc,a) {
			acc.push(a);
			return acc;
		}),thx_Strings.compare),null,null,null,{ fileName : "TestSet.hx", lineNumber : 55, className : "thx.fp.TestSet", methodName : "testToList"});
	}
	,__class__: thx_fp_TestSet
};
var thx_fp_TestState = function() {
};
thx_fp_TestState.__name__ = ["thx","fp","TestState"];
thx_fp_TestState.prototype = {
	testMap: function() {
		var this1 = thx_fp__$State_State_$Impl_$.pure(1);
		var f = function(v) {
			return v + 1;
		};
		var s = function(s1) {
			return thx__$Tuple_Tuple2_$Impl_$.map(this1(s1),f);
		};
		utest_Assert.same({ _0 : "a", _1 : 2},s("a"),null,null,null,{ fileName : "TestState.hx", lineNumber : 13, className : "thx.fp.TestState", methodName : "testMap"});
	}
	,testFlatMap: function() {
		var s = thx_fp__$State_State_$Impl_$.pure(1);
		utest_Assert.same({ _0 : "ab", _1 : 2},(thx_fp__$State_State_$Impl_$.flatMap(s,function(i) {
			var this1 = thx_fp__$State_State_$Impl_$.modify(s,function(v) {
				return v + "b";
			});
			var f = function(v1) {
				return v1 + i;
			};
			return function(s1) {
				return thx__$Tuple_Tuple2_$Impl_$.map(this1(s1),f);
			};
		}))("a"),null,null,null,{ fileName : "TestState.hx", lineNumber : 23, className : "thx.fp.TestState", methodName : "testFlatMap"});
	}
	,__class__: thx_fp_TestState
};
var thx_fp_TreeBagImpl = { __ename__ : ["thx","fp","TreeBagImpl"], __constructs__ : ["Empty","Cons","Branch"] };
thx_fp_TreeBagImpl.Empty = ["Empty",0];
thx_fp_TreeBagImpl.Empty.__enum__ = thx_fp_TreeBagImpl;
thx_fp_TreeBagImpl.Cons = function(x,xs) { var $x = ["Cons",1,x,xs]; $x.__enum__ = thx_fp_TreeBagImpl; return $x; };
thx_fp_TreeBagImpl.Branch = function(left,right) { var $x = ["Branch",2,left,right]; $x.__enum__ = thx_fp_TreeBagImpl; return $x; };
var thx_fp_TestTreeBag = function() {
};
thx_fp_TestTreeBag.__name__ = ["thx","fp","TestTreeBag"];
thx_fp_TestTreeBag.prototype = {
	plusOneBag: function(i) {
		return thx_fp_TreeBagImpl.Cons(i + 1,thx_fp_TestTreeBag.t0);
	}
	,plusTwoBags: function(i) {
		return thx_fp__$TreeBag_TreeBag_$Impl_$.map(thx_fp_TestTreeBag.t1,function(i0) {
			return i + i0;
		});
	}
	,testMap: function() {
		utest_Assert.same(thx_fp_TestTreeBag.t0,thx_fp__$TreeBag_TreeBag_$Impl_$.map(thx_fp_TestTreeBag.t0,thx_Functions.identity),null,null,null,{ fileName : "TestTreeBag.hx", lineNumber : 24, className : "thx.fp.TestTreeBag", methodName : "testMap"});
		utest_Assert.same(thx_fp_TestTreeBag.t2,thx_fp__$TreeBag_TreeBag_$Impl_$.map(thx_fp_TestTreeBag.t1,function(i) {
			return i + 1;
		}),null,null,null,{ fileName : "TestTreeBag.hx", lineNumber : 25, className : "thx.fp.TestTreeBag", methodName : "testMap"});
	}
	,testToArray: function() {
		utest_Assert.same([1,2],thx_fp__$TreeBag_TreeBag_$Impl_$.toArray(thx_fp_TestTreeBag.t1),null,null,null,{ fileName : "TestTreeBag.hx", lineNumber : 29, className : "thx.fp.TestTreeBag", methodName : "testToArray"});
	}
	,testFlatMap: function() {
		utest_Assert.same(thx_fp__$TreeBag_TreeBag_$Impl_$.toArray(thx_fp_TestTreeBag.t2),thx_fp__$TreeBag_TreeBag_$Impl_$.toArray(thx_fp__$TreeBag_TreeBag_$Impl_$.flatMap(thx_fp_TestTreeBag.t1,$bind(this,this.plusOneBag))),null,null,null,{ fileName : "TestTreeBag.hx", lineNumber : 33, className : "thx.fp.TestTreeBag", methodName : "testFlatMap"});
		var this1 = thx_fp_TreeBagImpl.Cons(2,thx_fp_TreeBagImpl.Cons(3,thx_fp_TestTreeBag.t0));
		var this2 = thx_fp_TreeBagImpl.Cons(3,thx_fp_TreeBagImpl.Cons(4,thx_fp_TestTreeBag.t0));
		var other = thx_fp_TestTreeBag.t0;
		var other1;
		if(other[1] == 0) {
			other1 = this2;
		} else if(this2[3][1] == 0) {
			other1 = thx_fp_TreeBagImpl.Cons(3,other);
		} else {
			other1 = thx_fp_TreeBagImpl.Branch(this2,other);
		}
		var tmp;
		if(other1[1] == 0) {
			tmp = this1;
		} else if(this1[3][1] == 0) {
			tmp = thx_fp_TreeBagImpl.Cons(2,other1);
		} else {
			tmp = thx_fp_TreeBagImpl.Branch(this1,other1);
		}
		utest_Assert.same(tmp,thx_fp__$TreeBag_TreeBag_$Impl_$.flatMap(thx_fp_TestTreeBag.t1,$bind(this,this.plusTwoBags)),null,null,null,{ fileName : "TestTreeBag.hx", lineNumber : 34, className : "thx.fp.TestTreeBag", methodName : "testFlatMap"});
	}
	,__class__: thx_fp_TestTreeBag
};
var thx_fp_TestWriter = function() {
};
thx_fp_TestWriter.__name__ = ["thx","fp","TestWriter"];
thx_fp_TestWriter.prototype = {
	testMap: function() {
		var mw = thx_Strings.monoid;
		utest_Assert.same({ _0 : "", _1 : 2},thx_fp__$Writer_Writer_$Impl_$.run(thx_fp__$Writer_Writer_$Impl_$._new(thx__$Tuple_Tuple3_$Impl_$.map(thx_fp__$Writer_Writer_$Impl_$._new({ _0 : mw, _1 : thx__$Monoid_Monoid_$Impl_$.get_zero(mw), _2 : 1}),function(v) {
			return v + 1;
		}))),null,null,null,{ fileName : "TestWriter.hx", lineNumber : 15, className : "thx.fp.TestWriter", methodName : "testMap"});
	}
	,testFlatMap: function() {
		var s = thx_fp__$Writer_Writer_$Impl_$._new(thx__$Tuple_Tuple3_$Impl_$.map(thx_fp__$Writer_Writer_$Impl_$._new({ _0 : thx_Strings.monoid, _1 : "a", _2 : thx_Unit.unit}),function(a) {
			return 1;
		}));
		utest_Assert.same({ _0 : "aab", _1 : 2},thx_fp__$Writer_Writer_$Impl_$.run(thx_fp__$Writer_Writer_$Impl_$.flatMap(s,function(i) {
			return thx_fp__$Writer_Writer_$Impl_$._new(thx__$Tuple_Tuple3_$Impl_$.map(thx_fp__$Writer_Writer_$Impl_$.log(s,"b"),function(v) {
				return i + v;
			}));
		})),null,null,null,{ fileName : "TestWriter.hx", lineNumber : 25, className : "thx.fp.TestWriter", methodName : "testFlatMap"});
	}
	,__class__: thx_fp_TestWriter
};
var thx_fp__$TreeBag_TreeBag_$Impl_$ = {};
thx_fp__$TreeBag_TreeBag_$Impl_$.__name__ = ["thx","fp","_TreeBag","TreeBag_Impl_"];
thx_fp__$TreeBag_TreeBag_$Impl_$.empty = function() {
	return thx_fp_TreeBagImpl.Empty;
};
thx_fp__$TreeBag_TreeBag_$Impl_$.singleton = function(a) {
	return thx_fp_TreeBagImpl.Cons(a,thx_fp_TreeBagImpl.Empty);
};
thx_fp__$TreeBag_TreeBag_$Impl_$.cons = function(x,xs) {
	return thx_fp_TreeBagImpl.Cons(x,xs);
};
thx_fp__$TreeBag_TreeBag_$Impl_$.fromArray = function(xs) {
	return thx_Arrays.reduce(xs,function(acc,x) {
		return thx_fp_TreeBagImpl.Cons(x,acc);
	},thx_fp_TreeBagImpl.Empty);
};
thx_fp__$TreeBag_TreeBag_$Impl_$.flatten = function(xs) {
	return thx_fp__$TreeBag_TreeBag_$Impl_$.flatMap(xs,thx_Functions.identity);
};
thx_fp__$TreeBag_TreeBag_$Impl_$.prepend = function(this1,x) {
	return thx_fp_TreeBagImpl.Cons(x,this1);
};
thx_fp__$TreeBag_TreeBag_$Impl_$.append = function(this1,other) {
	switch(this1[1]) {
	case 0:
		if(other[1] == 0) {
			return thx_fp_TreeBagImpl.Empty;
		} else {
			return other;
		}
		break;
	case 1:
		if(other[1] == 0) {
			return this1;
		} else if(this1[3][1] == 0) {
			return thx_fp_TreeBagImpl.Cons(this1[2],other);
		} else {
			return thx_fp_TreeBagImpl.Branch(this1,other);
		}
		break;
	default:
		if(other[1] == 0) {
			return this1;
		} else {
			return thx_fp_TreeBagImpl.Branch(this1,other);
		}
	}
};
thx_fp__$TreeBag_TreeBag_$Impl_$.prependAll = function(this1,xs) {
	return thx_Arrays.reduce(xs,function(acc,x) {
		return thx_fp_TreeBagImpl.Cons(x,acc);
	},this1);
};
thx_fp__$TreeBag_TreeBag_$Impl_$.map = function(this1,f) {
	switch(this1[1]) {
	case 0:
		return thx_fp_TreeBagImpl.Empty;
	case 1:
		return thx_fp_TreeBagImpl.Cons(f(this1[2]),thx_fp__$TreeBag_TreeBag_$Impl_$.map(this1[3],f));
	case 2:
		return thx_fp_TreeBagImpl.Branch(thx_fp__$TreeBag_TreeBag_$Impl_$.map(this1[2],f),thx_fp__$TreeBag_TreeBag_$Impl_$.map(this1[3],f));
	}
};
thx_fp__$TreeBag_TreeBag_$Impl_$.flatMap = function(this1,f) {
	switch(this1[1]) {
	case 0:
		return thx_fp_TreeBagImpl.Empty;
	case 1:
		var xs = this1[3];
		var this2 = f(this1[2]);
		var other = thx_fp__$TreeBag_TreeBag_$Impl_$.flatMap(xs,f);
		switch(this2[1]) {
		case 0:
			if(other[1] == 0) {
				return thx_fp_TreeBagImpl.Empty;
			} else {
				return other;
			}
			break;
		case 1:
			if(other[1] == 0) {
				return this2;
			} else if(this2[3][1] == 0) {
				return thx_fp_TreeBagImpl.Cons(this2[2],other);
			} else {
				return thx_fp_TreeBagImpl.Branch(this2,other);
			}
			break;
		default:
			if(other[1] == 0) {
				return this2;
			} else {
				return thx_fp_TreeBagImpl.Branch(this2,other);
			}
		}
		break;
	case 2:
		var r = this1[3];
		var this3 = thx_fp__$TreeBag_TreeBag_$Impl_$.flatMap(this1[2],f);
		var other1 = thx_fp__$TreeBag_TreeBag_$Impl_$.flatMap(r,f);
		switch(this3[1]) {
		case 0:
			if(other1[1] == 0) {
				return thx_fp_TreeBagImpl.Empty;
			} else {
				return other1;
			}
			break;
		case 1:
			if(other1[1] == 0) {
				return this3;
			} else if(this3[3][1] == 0) {
				return thx_fp_TreeBagImpl.Cons(this3[2],other1);
			} else {
				return thx_fp_TreeBagImpl.Branch(this3,other1);
			}
			break;
		default:
			if(other1[1] == 0) {
				return this3;
			} else {
				return thx_fp_TreeBagImpl.Branch(this3,other1);
			}
		}
		break;
	}
};
thx_fp__$TreeBag_TreeBag_$Impl_$.foldLeft = function(this1,b,f) {
	var acc = b;
	var nodes = thx_fp_ListImpl.Cons(this1,thx_fp_ListImpl.Nil);
	while(true) switch(nodes[1]) {
	case 0:
		return acc;
	case 1:
		var ys = nodes[3];
		var y = nodes[2];
		switch(y[1]) {
		case 0:
			nodes = ys;
			break;
		case 1:
			acc = f(acc,y[2]);
			nodes = thx_fp_ListImpl.Cons(y[3],ys);
			break;
		case 2:
			nodes = thx_fp_ListImpl.Cons(y[2],thx_fp_ListImpl.Cons(y[3],ys));
			break;
		}
		break;
	}
};
thx_fp__$TreeBag_TreeBag_$Impl_$.$length = function(this1) {
	return thx_fp__$TreeBag_TreeBag_$Impl_$.foldLeft(this1,0,function(c,a) {
		return c + 1;
	});
};
thx_fp__$TreeBag_TreeBag_$Impl_$.toArray = function(this1) {
	return thx_fp__$TreeBag_TreeBag_$Impl_$.foldLeft(this1,[],function(b,a) {
		b.push(a);
		return b;
	});
};
thx_fp__$TreeBag_TreeBag_$Impl_$.monoid = function() {
	return { zero : thx_fp_TreeBagImpl.Empty, append : function(l,r) {
		switch(l[1]) {
		case 0:
			if(r[1] == 0) {
				return thx_fp_TreeBagImpl.Empty;
			} else {
				return r;
			}
			break;
		case 1:
			if(r[1] == 0) {
				return l;
			} else if(l[3][1] == 0) {
				return thx_fp_TreeBagImpl.Cons(l[2],r);
			} else {
				return thx_fp_TreeBagImpl.Branch(l,r);
			}
			break;
		default:
			if(r[1] == 0) {
				return l;
			} else {
				return thx_fp_TreeBagImpl.Branch(l,r);
			}
		}
	}};
};
var thx_fp__$Writer_Writer_$Impl_$ = {};
thx_fp__$Writer_Writer_$Impl_$.__name__ = ["thx","fp","_Writer","Writer_Impl_"];
thx_fp__$Writer_Writer_$Impl_$._new = function(t3) {
	return t3;
};
thx_fp__$Writer_Writer_$Impl_$.repr = function(this1) {
	return this1;
};
thx_fp__$Writer_Writer_$Impl_$["void"] = function(mw) {
	return thx_fp__$Writer_Writer_$Impl_$._new({ _0 : mw, _1 : thx__$Monoid_Monoid_$Impl_$.get_zero(mw), _2 : thx_Unit.unit});
};
thx_fp__$Writer_Writer_$Impl_$.pure = function(a,mw) {
	return thx_fp__$Writer_Writer_$Impl_$._new({ _0 : mw, _1 : thx__$Monoid_Monoid_$Impl_$.get_zero(mw), _2 : a});
};
thx_fp__$Writer_Writer_$Impl_$.tell = function(w,mw) {
	return thx_fp__$Writer_Writer_$Impl_$._new({ _0 : mw, _1 : w, _2 : thx_Unit.unit});
};
thx_fp__$Writer_Writer_$Impl_$.map = function(this1,f) {
	return thx_fp__$Writer_Writer_$Impl_$._new(thx__$Tuple_Tuple3_$Impl_$.map(this1,f));
};
thx_fp__$Writer_Writer_$Impl_$.ap = function(this1,s2) {
	return thx_fp__$Writer_Writer_$Impl_$.flatMap(this1,function(a) {
		return thx_fp__$Writer_Writer_$Impl_$._new(thx__$Tuple_Tuple3_$Impl_$.map(s2,function(f) {
			return f(a);
		}));
	});
};
thx_fp__$Writer_Writer_$Impl_$.flatMap = function(this1,f) {
	var this2 = f(this1._2);
	return thx_fp__$Writer_Writer_$Impl_$._new({ _0 : this1._0, _1 : thx__$Monoid_Monoid_$Impl_$.append(this1._0,this1._1,this2._1), _2 : this2._2});
};
thx_fp__$Writer_Writer_$Impl_$.log = function(this1,w) {
	return thx_fp__$Writer_Writer_$Impl_$._new({ _0 : this1._0, _1 : thx__$Monoid_Monoid_$Impl_$.append(this1._0,this1._1,w), _2 : this1._2});
};
thx_fp__$Writer_Writer_$Impl_$.then = function(this1,next) {
	var b = next;
	return thx_fp__$Writer_Writer_$Impl_$.flatMap(this1,function(a) {
		return b;
	});
};
thx_fp__$Writer_Writer_$Impl_$.foreachM = function(this1,f) {
	return thx_fp__$Writer_Writer_$Impl_$._new({ _0 : this1._0, _1 : thx_fp__$Writer_Writer_$Impl_$.flatMap(this1,f)._1, _2 : this1._2});
};
thx_fp__$Writer_Writer_$Impl_$.voided = function(this1) {
	return thx_fp__$Writer_Writer_$Impl_$._new(thx__$Tuple_Tuple3_$Impl_$.map(this1,function(a) {
		return thx_Unit.unit;
	}));
};
thx_fp__$Writer_Writer_$Impl_$.run = function(this1) {
	return { _0 : this1._1, _1 : this1._2};
};
thx_fp__$Writer_Writer_$Impl_$.runLog = function(this1) {
	return this1._1;
};
thx_fp__$Writer_Writer_$Impl_$.ap2 = function(f,s1,s2) {
	var s21 = thx_fp__$Writer_Writer_$Impl_$._new(thx__$Tuple_Tuple3_$Impl_$.map(s1,thx_Functions2.curry(f)));
	return thx_fp__$Writer_Writer_$Impl_$.flatMap(s2,function(a) {
		return thx_fp__$Writer_Writer_$Impl_$._new(thx__$Tuple_Tuple3_$Impl_$.map(s21,function(f1) {
			return f1(a);
		}));
	});
};
thx_fp__$Writer_Writer_$Impl_$.ap3 = function(f,s1,s2,s3) {
	var f1 = f;
	return thx_fp__$Writer_Writer_$Impl_$.ap(s3,thx_fp__$Writer_Writer_$Impl_$.ap2(function(a,b) {
		return function(c) {
			return f1(a,b,c);
		};
	},s1,s2));
};
thx_fp__$Writer_Writer_$Impl_$.ap4 = function(f,s1,s2,s3,s4) {
	var f1 = f;
	var f2 = function(a,b,c) {
		return function(d) {
			return f1(a,b,c,d);
		};
	};
	return thx_fp__$Writer_Writer_$Impl_$.ap(s4,thx_fp__$Writer_Writer_$Impl_$.ap(s3,thx_fp__$Writer_Writer_$Impl_$.ap2(function(a1,b1) {
		return function(c1) {
			return f2(a1,b1,c1);
		};
	},s1,s2)));
};
thx_fp__$Writer_Writer_$Impl_$.ap5 = function(f,s1,s2,s3,s4,s5) {
	var f1 = f;
	var f2 = function(a,b,c,d) {
		return function(e) {
			return f1(a,b,c,d,e);
		};
	};
	var f3 = function(a1,b1,c1) {
		return function(d1) {
			return f2(a1,b1,c1,d1);
		};
	};
	return thx_fp__$Writer_Writer_$Impl_$.ap(s5,thx_fp__$Writer_Writer_$Impl_$.ap(s4,thx_fp__$Writer_Writer_$Impl_$.ap(s3,thx_fp__$Writer_Writer_$Impl_$.ap2(function(a2,b2) {
		return function(c2) {
			return f3(a2,b2,c2);
		};
	},s1,s2))));
};
thx_fp__$Writer_Writer_$Impl_$.ap6 = function(f,s1,s2,s3,s4,s5,s6) {
	var f1 = f;
	var f2 = function(a,b,c,d,e) {
		return function(f0) {
			return f1(a,b,c,d,e,f0);
		};
	};
	var f3 = function(a1,b1,c1,d1) {
		return function(e1) {
			return f2(a1,b1,c1,d1,e1);
		};
	};
	var f4 = function(a2,b2,c2) {
		return function(d2) {
			return f3(a2,b2,c2,d2);
		};
	};
	return thx_fp__$Writer_Writer_$Impl_$.ap(s6,thx_fp__$Writer_Writer_$Impl_$.ap(s5,thx_fp__$Writer_Writer_$Impl_$.ap(s4,thx_fp__$Writer_Writer_$Impl_$.ap(s3,thx_fp__$Writer_Writer_$Impl_$.ap2(function(a3,b3) {
		return function(c3) {
			return f4(a3,b3,c3);
		};
	},s1,s2)))));
};
thx_fp__$Writer_Writer_$Impl_$.ap7 = function(f,s1,s2,s3,s4,s5,s6,s7) {
	var f1 = f;
	var f2 = function(a,b,c,d,e,f0) {
		return function(g) {
			return f1(a,b,c,d,e,f0,g);
		};
	};
	var f3 = function(a1,b1,c1,d1,e1) {
		return function(f01) {
			return f2(a1,b1,c1,d1,e1,f01);
		};
	};
	var f4 = function(a2,b2,c2,d2) {
		return function(e2) {
			return f3(a2,b2,c2,d2,e2);
		};
	};
	var f5 = function(a3,b3,c3) {
		return function(d3) {
			return f4(a3,b3,c3,d3);
		};
	};
	return thx_fp__$Writer_Writer_$Impl_$.ap(s7,thx_fp__$Writer_Writer_$Impl_$.ap(s6,thx_fp__$Writer_Writer_$Impl_$.ap(s5,thx_fp__$Writer_Writer_$Impl_$.ap(s4,thx_fp__$Writer_Writer_$Impl_$.ap(s3,thx_fp__$Writer_Writer_$Impl_$.ap2(function(a4,b4) {
		return function(c4) {
			return f5(a4,b4,c4);
		};
	},s1,s2))))));
};
thx_fp__$Writer_Writer_$Impl_$.ap8 = function(f,s1,s2,s3,s4,s5,s6,s7,s8) {
	var f1 = f;
	var f2 = function(a,b,c,d,e,f0,g) {
		return function(h) {
			return f1(a,b,c,d,e,f0,g,h);
		};
	};
	var f3 = function(a1,b1,c1,d1,e1,f01) {
		return function(g1) {
			return f2(a1,b1,c1,d1,e1,f01,g1);
		};
	};
	var f4 = function(a2,b2,c2,d2,e2) {
		return function(f02) {
			return f3(a2,b2,c2,d2,e2,f02);
		};
	};
	var f5 = function(a3,b3,c3,d3) {
		return function(e3) {
			return f4(a3,b3,c3,d3,e3);
		};
	};
	var f6 = function(a4,b4,c4) {
		return function(d4) {
			return f5(a4,b4,c4,d4);
		};
	};
	return thx_fp__$Writer_Writer_$Impl_$.ap(s8,thx_fp__$Writer_Writer_$Impl_$.ap(s7,thx_fp__$Writer_Writer_$Impl_$.ap(s6,thx_fp__$Writer_Writer_$Impl_$.ap(s5,thx_fp__$Writer_Writer_$Impl_$.ap(s4,thx_fp__$Writer_Writer_$Impl_$.ap(s3,thx_fp__$Writer_Writer_$Impl_$.ap2(function(a5,b5) {
		return function(c5) {
			return f6(a5,b5,c5);
		};
	},s1,s2)))))));
};
var utest_Assert = function() { };
utest_Assert.__name__ = ["utest","Assert"];
utest_Assert.isTrue = function(cond,msg,pos) {
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert.results is not currently bound to any assert context");
	}
	if(null == msg) {
		msg = "expected true";
	}
	if(cond) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg,pos));
	}
};
utest_Assert.isFalse = function(value,msg,pos) {
	if(null == msg) {
		msg = "expected false";
	}
	utest_Assert.isTrue(value == false,msg,pos);
};
utest_Assert.isNull = function(value,msg,pos) {
	if(msg == null) {
		msg = "expected null but it is " + utest_Assert.q(value);
	}
	utest_Assert.isTrue(value == null,msg,pos);
};
utest_Assert.notNull = function(value,msg,pos) {
	if(null == msg) {
		msg = "expected not null";
	}
	utest_Assert.isTrue(value != null,msg,pos);
};
utest_Assert["is"] = function(value,type,msg,pos) {
	if(msg == null) {
		msg = "expected type " + utest_Assert.typeToString(type) + " but it is " + utest_Assert.typeToString(value);
	}
	utest_Assert.isTrue(js_Boot.__instanceof(value,type),msg,pos);
};
utest_Assert.notEquals = function(expected,value,msg,pos) {
	if(msg == null) {
		msg = "expected " + utest_Assert.q(expected) + " and test value " + utest_Assert.q(value) + " should be different";
	}
	utest_Assert.isFalse(expected == value,msg,pos);
};
utest_Assert.equals = function(expected,value,msg,pos) {
	if(msg == null) {
		msg = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value);
	}
	utest_Assert.isTrue(expected == value,msg,pos);
};
utest_Assert.match = function(pattern,value,msg,pos) {
	if(msg == null) {
		msg = "the value " + utest_Assert.q(value) + " does not match the provided pattern";
	}
	utest_Assert.isTrue(pattern.match(value),msg,pos);
};
utest_Assert.floatEquals = function(expected,value,approx,msg,pos) {
	if(msg == null) {
		msg = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value);
	}
	utest_Assert.isTrue(utest_Assert._floatEquals(expected,value,approx),msg,pos);
	return;
};
utest_Assert._floatEquals = function(expected,value,approx) {
	if(isNaN(expected)) {
		return isNaN(value);
	} else if(isNaN(value)) {
		return false;
	} else if(!isFinite(expected) && !isFinite(value)) {
		return expected > 0 == value > 0;
	}
	if(null == approx) {
		approx = 1e-5;
	}
	return Math.abs(value - expected) <= approx;
};
utest_Assert.getTypeName = function(v) {
	var _g = Type["typeof"](v);
	switch(_g[1]) {
	case 0:
		return "`null`";
	case 1:
		return "Int";
	case 2:
		return "Float";
	case 3:
		return "Bool";
	case 4:
		return "Object";
	case 5:
		return "function";
	case 6:
		return Type.getClassName(_g[2]);
	case 7:
		return Type.getEnumName(_g[2]);
	case 8:
		return "`Unknown`";
	}
};
utest_Assert.isIterable = function(v,isAnonym) {
	if(!Lambda.has(isAnonym?Reflect.fields(v):Type.getInstanceFields(v == null?null:js_Boot.getClass(v)),"iterator")) {
		return false;
	}
	return Reflect.isFunction(Reflect.field(v,"iterator"));
};
utest_Assert.isIterator = function(v,isAnonym) {
	var fields = isAnonym?Reflect.fields(v):Type.getInstanceFields(v == null?null:js_Boot.getClass(v));
	if(!Lambda.has(fields,"next") || !Lambda.has(fields,"hasNext")) {
		return false;
	}
	if(Reflect.isFunction(Reflect.field(v,"next"))) {
		return Reflect.isFunction(Reflect.field(v,"hasNext"));
	} else {
		return false;
	}
};
utest_Assert.sameAs = function(expected,value,status,approx) {
	var texpected = utest_Assert.getTypeName(expected);
	var tvalue = utest_Assert.getTypeName(value);
	if(texpected != tvalue && !(texpected == "Int" && tvalue == "Float" || texpected == "Float" && tvalue == "Int")) {
		status.error = "expected type " + texpected + " but it is " + tvalue + (status.path == ""?"":" for field " + status.path);
		return false;
	}
	var _g = Type["typeof"](expected);
	switch(_g[1]) {
	case 0:case 3:
		if(expected != value) {
			status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == ""?"":" for field " + status.path);
			return false;
		}
		return true;
	case 1:case 2:
		if(!utest_Assert._floatEquals(expected,value,approx)) {
			status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == ""?"":" for field " + status.path);
			return false;
		}
		return true;
	case 4:
		if(status.recursive || status.path == "") {
			var tfields = Reflect.fields(value);
			var fields = Reflect.fields(expected);
			var path = status.path;
			var _g1 = 0;
			while(_g1 < fields.length) {
				var field = fields[_g1];
				++_g1;
				HxOverrides.remove(tfields,field);
				status.path = path == ""?field:path + "." + field;
				if(!Object.prototype.hasOwnProperty.call(value,field)) {
					status.error = "expected field " + status.path + " does not exist in " + utest_Assert.q(value);
					return false;
				}
				var e = Reflect.field(expected,field);
				if(Reflect.isFunction(e)) {
					continue;
				}
				if(!utest_Assert.sameAs(e,Reflect.field(value,field),status,approx)) {
					return false;
				}
			}
			if(tfields.length > 0) {
				status.error = "the tested object has extra field(s) (" + tfields.join(", ") + ") not included in the expected ones";
				return false;
			}
		}
		if(utest_Assert.isIterator(expected,true)) {
			if(!utest_Assert.isIterator(value,true)) {
				status.error = "expected Iterable but it is not " + (status.path == ""?"":" for field " + status.path);
				return false;
			}
			if(status.recursive || status.path == "") {
				var evalues = Lambda.array({ iterator : function() {
					return expected;
				}});
				var vvalues = Lambda.array({ iterator : function() {
					return value;
				}});
				if(evalues.length != vvalues.length) {
					status.error = "expected " + evalues.length + " values in Iterator but they are " + vvalues.length + (status.path == ""?"":" for field " + status.path);
					return false;
				}
				var path1 = status.path;
				var _g11 = 0;
				var _g2 = evalues.length;
				while(_g11 < _g2) {
					var i = _g11++;
					status.path = path1 == ""?"iterator[" + i + "]":path1 + "[" + i + "]";
					if(!utest_Assert.sameAs(evalues[i],vvalues[i],status,approx)) {
						status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == ""?"":" for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(utest_Assert.isIterable(expected,true)) {
			if(!utest_Assert.isIterable(value,true)) {
				status.error = "expected Iterator but it is not " + (status.path == ""?"":" for field " + status.path);
				return false;
			}
			if(status.recursive || status.path == "") {
				var evalues1 = Lambda.array(expected);
				var vvalues1 = Lambda.array(value);
				if(evalues1.length != vvalues1.length) {
					status.error = "expected " + evalues1.length + " values in Iterable but they are " + vvalues1.length + (status.path == ""?"":" for field " + status.path);
					return false;
				}
				var path2 = status.path;
				var _g12 = 0;
				var _g3 = evalues1.length;
				while(_g12 < _g3) {
					var i1 = _g12++;
					status.path = path2 == ""?"iterable[" + i1 + "]":path2 + "[" + i1 + "]";
					if(!utest_Assert.sameAs(evalues1[i1],vvalues1[i1],status,approx)) {
						return false;
					}
				}
			}
			return true;
		}
		return true;
	case 5:
		if(!Reflect.compareMethods(expected,value)) {
			status.error = "expected same function reference" + (status.path == ""?"":" for field " + status.path);
			return false;
		}
		return true;
	case 6:
		var cexpected = Type.getClassName(_g[2]);
		var o = value;
		var cvalue = Type.getClassName(o == null?null:js_Boot.getClass(o));
		if(cexpected != cvalue) {
			status.error = "expected instance of " + utest_Assert.q(cexpected) + " but it is " + utest_Assert.q(cvalue) + (status.path == ""?"":" for field " + status.path);
			return false;
		}
		if(typeof(expected) == "string" && expected != value) {
			status.error = "expected '" + Std.string(expected) + "' but it is '" + Std.string(value) + "'";
			return false;
		}
		if((expected instanceof Array) && expected.__enum__ == null) {
			if(status.recursive || status.path == "") {
				if(expected.length != value.length) {
					status.error = "expected " + Std.string(expected.length) + " elements but they are " + Std.string(value.length) + (status.path == ""?"":" for field " + status.path);
					return false;
				}
				var path3 = status.path;
				var _g13 = 0;
				var _g4 = expected.length;
				while(_g13 < _g4) {
					var i2 = _g13++;
					status.path = path3 == ""?"array[" + i2 + "]":path3 + "[" + i2 + "]";
					if(!utest_Assert.sameAs(expected[i2],value[i2],status,approx)) {
						status.error = "expected " + utest_Assert.q(expected[i2]) + " but it is " + utest_Assert.q(value[i2]) + (status.path == ""?"":" for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(js_Boot.__instanceof(expected,Date)) {
			if(expected.getTime() != value.getTime()) {
				status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == ""?"":" for field " + status.path);
				return false;
			}
			return true;
		}
		if(js_Boot.__instanceof(expected,haxe_io_Bytes)) {
			if(status.recursive || status.path == "") {
				var ebytes = expected;
				var vbytes = value;
				if(ebytes.length != vbytes.length) {
					return false;
				}
				var _g14 = 0;
				var _g5 = ebytes.length;
				while(_g14 < _g5) {
					var i3 = _g14++;
					if(ebytes.b[i3] != vbytes.b[i3]) {
						status.error = "expected byte " + ebytes.b[i3] + " but it is " + vbytes.b[i3] + (status.path == ""?"":" for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(js_Boot.__instanceof(expected,haxe_IMap)) {
			if(status.recursive || status.path == "") {
				var map = js_Boot.__cast(expected , haxe_IMap);
				var vmap = js_Boot.__cast(value , haxe_IMap);
				var _g6 = [];
				var tmp = map.keys();
				while(tmp.hasNext()) _g6.push(tmp.next());
				var keys = _g6;
				var _g15 = [];
				var tmp1 = vmap.keys();
				while(tmp1.hasNext()) _g15.push(tmp1.next());
				var vkeys = _g15;
				if(keys.length != vkeys.length) {
					status.error = "expected " + keys.length + " keys but they are " + vkeys.length + (status.path == ""?"":" for field " + status.path);
					return false;
				}
				var path4 = status.path;
				var _g21 = 0;
				while(_g21 < keys.length) {
					var key = keys[_g21];
					++_g21;
					status.path = path4 == ""?"hash[" + Std.string(key) + "]":path4 + "[" + Std.string(key) + "]";
					if(!utest_Assert.sameAs(map.get(key),vmap.get(key),status,approx)) {
						status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == ""?"":" for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(utest_Assert.isIterator(expected,false)) {
			if(status.recursive || status.path == "") {
				var evalues2 = Lambda.array({ iterator : function() {
					return expected;
				}});
				var vvalues2 = Lambda.array({ iterator : function() {
					return value;
				}});
				if(evalues2.length != vvalues2.length) {
					status.error = "expected " + evalues2.length + " values in Iterator but they are " + vvalues2.length + (status.path == ""?"":" for field " + status.path);
					return false;
				}
				var path5 = status.path;
				var _g16 = 0;
				var _g7 = evalues2.length;
				while(_g16 < _g7) {
					var i4 = _g16++;
					status.path = path5 == ""?"iterator[" + i4 + "]":path5 + "[" + i4 + "]";
					if(!utest_Assert.sameAs(evalues2[i4],vvalues2[i4],status,approx)) {
						status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == ""?"":" for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(utest_Assert.isIterable(expected,false)) {
			if(status.recursive || status.path == "") {
				var evalues3 = Lambda.array(expected);
				var vvalues3 = Lambda.array(value);
				if(evalues3.length != vvalues3.length) {
					status.error = "expected " + evalues3.length + " values in Iterable but they are " + vvalues3.length + (status.path == ""?"":" for field " + status.path);
					return false;
				}
				var path6 = status.path;
				var _g17 = 0;
				var _g8 = evalues3.length;
				while(_g17 < _g8) {
					var i5 = _g17++;
					status.path = path6 == ""?"iterable[" + i5 + "]":path6 + "[" + i5 + "]";
					if(!utest_Assert.sameAs(evalues3[i5],vvalues3[i5],status,approx)) {
						return false;
					}
				}
			}
			return true;
		}
		if(status.recursive || status.path == "") {
			var o1 = expected;
			var fields1 = Type.getInstanceFields(o1 == null?null:js_Boot.getClass(o1));
			var path7 = status.path;
			var _g9 = 0;
			while(_g9 < fields1.length) {
				var field1 = fields1[_g9];
				++_g9;
				status.path = path7 == ""?field1:path7 + "." + field1;
				var e1 = Reflect.field(expected,field1);
				if(Reflect.isFunction(e1)) {
					continue;
				}
				if(!utest_Assert.sameAs(e1,Reflect.field(value,field1),status,approx)) {
					return false;
				}
			}
		}
		return true;
	case 7:
		var eexpected = Type.getEnumName(_g[2]);
		var evalue = Type.getEnumName(Type.getEnum(value));
		if(eexpected != evalue) {
			status.error = "expected enumeration of " + utest_Assert.q(eexpected) + " but it is " + utest_Assert.q(evalue) + (status.path == ""?"":" for field " + status.path);
			return false;
		}
		if(status.recursive || status.path == "") {
			if(expected[1] != value[1]) {
				status.error = "expected " + utest_Assert.q(expected[0]) + " but it is " + utest_Assert.q(value[0]) + (status.path == ""?"":" for field " + status.path);
				return false;
			}
			var eparams = expected.slice(2);
			var vparams = value.slice(2);
			var path8 = status.path;
			var _g18 = 0;
			var _g10 = eparams.length;
			while(_g18 < _g10) {
				var i6 = _g18++;
				status.path = path8 == ""?"enum[" + i6 + "]":path8 + "[" + i6 + "]";
				if(!utest_Assert.sameAs(eparams[i6],vparams[i6],status,approx)) {
					status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == ""?"":" for field " + status.path);
					return false;
				}
			}
		}
		return true;
	case 8:
		throw new js__$Boot_HaxeError("Unable to compare two unknown types");
		break;
	}
};
utest_Assert.q = function(v) {
	if(typeof(v) == "string") {
		return "\"" + StringTools.replace(v,"\"","\\\"") + "\"";
	} else {
		return Std.string(v);
	}
};
utest_Assert.same = function(expected,value,recursive,msg,approx,pos) {
	if(null == approx) {
		approx = 1e-5;
	}
	var status = { recursive : null == recursive?true:recursive, path : "", error : null};
	if(utest_Assert.sameAs(expected,value,status,approx)) {
		utest_Assert.pass(msg,pos);
	} else {
		utest_Assert.fail(msg == null?status.error:msg,pos);
	}
};
utest_Assert.raises = function(method,type,msgNotThrown,msgWrongType,pos) {
	try {
		method();
		var name = Type.getClassName(type);
		if(name == null) {
			name = "Dynamic";
		}
		if(null == msgNotThrown) {
			msgNotThrown = "exception of type " + name + " not raised";
		}
		utest_Assert.fail(msgNotThrown,pos);
	} catch( ex ) {
		haxe_CallStack.lastException = ex;
		if (ex instanceof js__$Boot_HaxeError) ex = ex.val;
		if(null == type) {
			utest_Assert.pass(null,pos);
		} else {
			var name1 = Type.getClassName(type);
			if(null == msgWrongType) {
				msgWrongType = "expected throw of type " + name1 + " but it is " + Std.string(ex);
			}
			utest_Assert.isTrue(js_Boot.__instanceof(ex,type),msgWrongType,pos);
		}
	}
};
utest_Assert.allows = function(possibilities,value,msg,pos) {
	if(Lambda.has(possibilities,value)) {
		utest_Assert.isTrue(true,msg,pos);
	} else {
		utest_Assert.fail(msg == null?"value " + utest_Assert.q(value) + " not found in the expected possibilities " + Std.string(possibilities):msg,pos);
	}
};
utest_Assert.contains = function(match,values,msg,pos) {
	if(Lambda.has(values,match)) {
		utest_Assert.isTrue(true,msg,pos);
	} else {
		utest_Assert.fail(msg == null?"values " + utest_Assert.q(values) + " do not contain " + Std.string(match):msg,pos);
	}
};
utest_Assert.notContains = function(match,values,msg,pos) {
	if(!Lambda.has(values,match)) {
		utest_Assert.isTrue(true,msg,pos);
	} else {
		utest_Assert.fail(msg == null?"values " + utest_Assert.q(values) + " do contain " + Std.string(match):msg,pos);
	}
};
utest_Assert.stringContains = function(match,value,msg,pos) {
	if(value != null && value.indexOf(match) >= 0) {
		utest_Assert.isTrue(true,msg,pos);
	} else {
		utest_Assert.fail(msg == null?"value " + utest_Assert.q(value) + " does not contain " + utest_Assert.q(match):msg,pos);
	}
};
utest_Assert.stringSequence = function(sequence,value,msg,pos) {
	if(null == value) {
		utest_Assert.fail(msg == null?"null argument value":msg,pos);
		return;
	}
	var p = 0;
	var _g = 0;
	while(_g < sequence.length) {
		var s = sequence[_g];
		++_g;
		var p2 = value.indexOf(s,p);
		if(p2 < 0) {
			if(msg == null) {
				msg = "expected '" + s + "' after ";
				if(p > 0) {
					var cut = HxOverrides.substr(value,0,p);
					if(cut.length > 30) {
						cut = "..." + HxOverrides.substr(cut,-27,null);
					}
					msg += " '" + cut + "'";
				} else {
					msg += " begin";
				}
			}
			utest_Assert.fail(msg,pos);
			return;
		}
		p = p2 + s.length;
	}
	utest_Assert.isTrue(true,msg,pos);
};
utest_Assert.pass = function(msg,pos) {
	if(msg == null) {
		msg = "pass expected";
	}
	utest_Assert.isTrue(true,msg,pos);
};
utest_Assert.fail = function(msg,pos) {
	if(msg == null) {
		msg = "failure expected";
	}
	utest_Assert.isTrue(false,msg,pos);
};
utest_Assert.warn = function(msg) {
	utest_Assert.results.add(utest_Assertation.Warning(msg));
};
utest_Assert.createAsync = function(f,timeout) {
	return function() {
	};
};
utest_Assert.createEvent = function(f,timeout) {
	return function(e) {
	};
};
utest_Assert.typeToString = function(t) {
	try {
		var o = t;
		var _t = o == null?null:js_Boot.getClass(o);
		if(_t != null) {
			t = _t;
		}
	} catch( e ) {
		haxe_CallStack.lastException = e;
	}
	try {
		return Type.getClassName(t);
	} catch( e1 ) {
		haxe_CallStack.lastException = e1;
	}
	try {
		var _t1 = Type.getEnum(t);
		if(_t1 != null) {
			t = _t1;
		}
	} catch( e2 ) {
		haxe_CallStack.lastException = e2;
	}
	try {
		return Type.getEnumName(t);
	} catch( e3 ) {
		haxe_CallStack.lastException = e3;
	}
	try {
		return Std.string(Type["typeof"](t));
	} catch( e4 ) {
		haxe_CallStack.lastException = e4;
	}
	try {
		return Std.string(t);
	} catch( e5 ) {
		haxe_CallStack.lastException = e5;
	}
	return "<unable to retrieve type name>";
};
var utest_Assertation = { __ename__ : ["utest","Assertation"], __constructs__ : ["Success","Failure","Error","SetupError","TeardownError","TimeoutError","AsyncError","Warning"] };
utest_Assertation.Success = function(pos) { var $x = ["Success",0,pos]; $x.__enum__ = utest_Assertation; return $x; };
utest_Assertation.Failure = function(msg,pos) { var $x = ["Failure",1,msg,pos]; $x.__enum__ = utest_Assertation; return $x; };
utest_Assertation.Error = function(e,stack) { var $x = ["Error",2,e,stack]; $x.__enum__ = utest_Assertation; return $x; };
utest_Assertation.SetupError = function(e,stack) { var $x = ["SetupError",3,e,stack]; $x.__enum__ = utest_Assertation; return $x; };
utest_Assertation.TeardownError = function(e,stack) { var $x = ["TeardownError",4,e,stack]; $x.__enum__ = utest_Assertation; return $x; };
utest_Assertation.TimeoutError = function(missedAsyncs,stack) { var $x = ["TimeoutError",5,missedAsyncs,stack]; $x.__enum__ = utest_Assertation; return $x; };
utest_Assertation.AsyncError = function(e,stack) { var $x = ["AsyncError",6,e,stack]; $x.__enum__ = utest_Assertation; return $x; };
utest_Assertation.Warning = function(msg) { var $x = ["Warning",7,msg]; $x.__enum__ = utest_Assertation; return $x; };
var utest__$Dispatcher_EventException = { __ename__ : ["utest","_Dispatcher","EventException"], __constructs__ : ["StopPropagation"] };
utest__$Dispatcher_EventException.StopPropagation = ["StopPropagation",0];
utest__$Dispatcher_EventException.StopPropagation.__enum__ = utest__$Dispatcher_EventException;
var utest_Dispatcher = function() {
	this.handlers = [];
};
utest_Dispatcher.__name__ = ["utest","Dispatcher"];
utest_Dispatcher.stop = function() {
	throw new js__$Boot_HaxeError(utest__$Dispatcher_EventException.StopPropagation);
};
utest_Dispatcher.prototype = {
	handlers: null
	,add: function(h) {
		this.handlers.push(h);
		return h;
	}
	,remove: function(h) {
		var _g1 = 0;
		var _g = this.handlers.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(Reflect.compareMethods(this.handlers[i],h)) {
				return this.handlers.splice(i,1)[0];
			}
		}
		return null;
	}
	,clear: function() {
		this.handlers = [];
	}
	,dispatch: function(e) {
		try {
			var list = this.handlers.slice();
			var _g = 0;
			while(_g < list.length) {
				var l = list[_g];
				++_g;
				l(e);
			}
			return true;
		} catch( exc ) {
			haxe_CallStack.lastException = exc;
			if (exc instanceof js__$Boot_HaxeError) exc = exc.val;
			if( js_Boot.__instanceof(exc,utest__$Dispatcher_EventException) ) {
				return false;
			} else throw(exc);
		}
	}
	,has: function() {
		return this.handlers.length > 0;
	}
	,__class__: utest_Dispatcher
};
var utest_Notifier = function() {
	this.handlers = [];
};
utest_Notifier.__name__ = ["utest","Notifier"];
utest_Notifier.stop = function() {
	throw new js__$Boot_HaxeError(utest__$Dispatcher_EventException.StopPropagation);
};
utest_Notifier.prototype = {
	handlers: null
	,add: function(h) {
		this.handlers.push(h);
		return h;
	}
	,remove: function(h) {
		var _g1 = 0;
		var _g = this.handlers.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(Reflect.compareMethods(this.handlers[i],h)) {
				return this.handlers.splice(i,1)[0];
			}
		}
		return null;
	}
	,clear: function() {
		this.handlers = [];
	}
	,dispatch: function() {
		try {
			var list = this.handlers.slice();
			var _g = 0;
			while(_g < list.length) {
				var l = list[_g];
				++_g;
				l();
			}
			return true;
		} catch( exc ) {
			haxe_CallStack.lastException = exc;
			if (exc instanceof js__$Boot_HaxeError) exc = exc.val;
			if( js_Boot.__instanceof(exc,utest__$Dispatcher_EventException) ) {
				return false;
			} else throw(exc);
		}
	}
	,has: function() {
		return this.handlers.length > 0;
	}
	,__class__: utest_Notifier
};
var utest_Runner = function() {
	this.globalPattern = null;
	this.fixtures = [];
	this.onProgress = new utest_Dispatcher();
	this.onStart = new utest_Dispatcher();
	this.onComplete = new utest_Dispatcher();
	this.onPrecheck = new utest_Dispatcher();
	this.onTestStart = new utest_Dispatcher();
	this.onTestComplete = new utest_Dispatcher();
	this.length = 0;
};
utest_Runner.__name__ = ["utest","Runner"];
utest_Runner.prototype = {
	fixtures: null
	,onProgress: null
	,onStart: null
	,onComplete: null
	,onPrecheck: null
	,onTestStart: null
	,onTestComplete: null
	,length: null
	,globalPattern: null
	,addCase: function(test,setup,teardown,prefix,pattern) {
		if(prefix == null) {
			prefix = "test";
		}
		if(teardown == null) {
			teardown = "teardown";
		}
		if(setup == null) {
			setup = "setup";
		}
		if(!Reflect.isObject(test)) {
			throw new js__$Boot_HaxeError("can't add a null object as a test case");
		}
		if(!this.isMethod(test,setup)) {
			setup = null;
		}
		if(!this.isMethod(test,teardown)) {
			teardown = null;
		}
		var fields = Type.getInstanceFields(test == null?null:js_Boot.getClass(test));
		if(this.globalPattern == null && pattern == null) {
			var _g = 0;
			while(_g < fields.length) {
				var field = fields[_g];
				++_g;
				if(!StringTools.startsWith(field,prefix)) {
					continue;
				}
				if(!this.isMethod(test,field)) {
					continue;
				}
				this.addFixture(new utest_TestFixture(test,field,setup,teardown));
			}
		} else {
			if(this.globalPattern != null) {
				pattern = this.globalPattern;
			} else {
				pattern = pattern;
			}
			var _g1 = 0;
			while(_g1 < fields.length) {
				var field1 = fields[_g1];
				++_g1;
				if(!pattern.match(field1)) {
					continue;
				}
				if(!this.isMethod(test,field1)) {
					continue;
				}
				this.addFixture(new utest_TestFixture(test,field1,setup,teardown));
			}
		}
	}
	,addFixture: function(fixture) {
		this.fixtures.push(fixture);
		this.length++;
	}
	,getFixture: function(index) {
		return this.fixtures[index];
	}
	,isMethod: function(test,name) {
		try {
			return Reflect.isFunction(Reflect.field(test,name));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return false;
		}
	}
	,pos: null
	,run: function() {
		this.pos = 0;
		this.onStart.dispatch(this);
		this.runNext();
	}
	,runNext: function() {
		if(this.fixtures.length > this.pos) {
			this.runFixture(this.fixtures[this.pos++]);
		} else {
			this.onComplete.dispatch(this);
		}
	}
	,runFixture: function(fixture) {
		var handler = new utest_TestHandler(fixture);
		handler.onComplete.add($bind(this,this.testComplete));
		handler.onPrecheck.add(($_=this.onPrecheck,$bind($_,$_.dispatch)));
		this.onTestStart.dispatch(handler);
		handler.execute();
	}
	,testComplete: function(h) {
		this.onTestComplete.dispatch(h);
		this.onProgress.dispatch({ result : utest_TestResult.ofHandler(h), done : this.pos, totals : this.length});
		this.runNext();
	}
	,__class__: utest_Runner
};
var utest_TestFixture = function(target,method,setup,teardown) {
	this.target = target;
	this.method = method;
	this.setup = setup;
	this.teardown = teardown;
};
utest_TestFixture.__name__ = ["utest","TestFixture"];
utest_TestFixture.prototype = {
	target: null
	,method: null
	,setup: null
	,teardown: null
	,checkMethod: function(name,arg) {
		var field = Reflect.field(this.target,name);
		if(field == null) {
			throw new js__$Boot_HaxeError(arg + " function " + name + " is not a field of target");
		}
		if(!Reflect.isFunction(field)) {
			throw new js__$Boot_HaxeError(arg + " function " + name + " is not a function");
		}
	}
	,__class__: utest_TestFixture
};
var utest_TestHandler = function(fixture) {
	if(fixture == null) {
		throw new js__$Boot_HaxeError("fixture argument is null");
	}
	this.fixture = fixture;
	this.results = new List();
	this.asyncStack = new List();
	this.onTested = new utest_Dispatcher();
	this.onTimeout = new utest_Dispatcher();
	this.onComplete = new utest_Dispatcher();
	this.onPrecheck = new utest_Dispatcher();
};
utest_TestHandler.__name__ = ["utest","TestHandler"];
utest_TestHandler.exceptionStack = function(pops) {
	if(pops == null) {
		pops = 2;
	}
	var stack = haxe_CallStack.exceptionStack();
	while(pops-- > 0) stack.pop();
	return stack;
};
utest_TestHandler.prototype = {
	results: null
	,fixture: null
	,asyncStack: null
	,onTested: null
	,onTimeout: null
	,onComplete: null
	,onPrecheck: null
	,precheck: null
	,execute: function() {
		try {
			this.executeMethod(this.fixture.setup);
			try {
				this.executeMethod(this.fixture.method);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				this.results.add(utest_Assertation.Error(e,utest_TestHandler.exceptionStack()));
			}
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
			this.results.add(utest_Assertation.SetupError(e1,utest_TestHandler.exceptionStack()));
		}
		this.onPrecheck.dispatch(this);
		this.checkTested();
	}
	,checkTested: function() {
		if(this.expireson == null || this.asyncStack.length == 0) {
			this.tested();
		} else if(haxe_Timer.stamp() > this.expireson) {
			this.timeout();
		} else {
			haxe_Timer.delay($bind(this,this.checkTested),10);
		}
	}
	,expireson: null
	,setTimeout: function(timeout) {
		var newexpire = haxe_Timer.stamp() + timeout / 1000;
		this.expireson = this.expireson == null?newexpire:newexpire > this.expireson?newexpire:this.expireson;
	}
	,bindHandler: function() {
		utest_Assert.results = this.results;
		utest_Assert.createAsync = $bind(this,this.addAsync);
		utest_Assert.createEvent = $bind(this,this.addEvent);
	}
	,unbindHandler: function() {
		utest_Assert.results = null;
		utest_Assert.createAsync = function(f,t) {
			return function() {
			};
		};
		utest_Assert.createEvent = function(f1,t1) {
			return function(e) {
			};
		};
	}
	,addAsync: function(f,timeout) {
		if(timeout == null) {
			timeout = 250;
		}
		if(null == f) {
			f = function() {
			};
		}
		this.asyncStack.add(f);
		var handler = this;
		this.setTimeout(timeout);
		return function() {
			if(!handler.asyncStack.remove(f)) {
				handler.results.add(utest_Assertation.AsyncError("async function already executed",[]));
				return;
			}
			try {
				handler.bindHandler();
				f();
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				handler.results.add(utest_Assertation.AsyncError(e,utest_TestHandler.exceptionStack(0)));
			}
		};
	}
	,addEvent: function(f,timeout) {
		if(timeout == null) {
			timeout = 250;
		}
		this.asyncStack.add(f);
		var handler = this;
		this.setTimeout(timeout);
		return function(e) {
			if(!handler.asyncStack.remove(f)) {
				handler.results.add(utest_Assertation.AsyncError("event already executed",[]));
				return;
			}
			try {
				handler.bindHandler();
				f(e);
			} catch( e1 ) {
				haxe_CallStack.lastException = e1;
				if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
				handler.results.add(utest_Assertation.AsyncError(e1,utest_TestHandler.exceptionStack(0)));
			}
		};
	}
	,executeMethod: function(name) {
		if(name == null) {
			return;
		}
		this.bindHandler();
		Reflect.field(this.fixture.target,name).apply(this.fixture.target,[]);
	}
	,tested: function() {
		if(this.results.length == 0) {
			this.results.add(utest_Assertation.Warning("no assertions"));
		}
		this.onTested.dispatch(this);
		this.completed();
	}
	,timeout: function() {
		this.results.add(utest_Assertation.TimeoutError(this.asyncStack.length,[]));
		this.onTimeout.dispatch(this);
		this.completed();
	}
	,completed: function() {
		try {
			this.executeMethod(this.fixture.teardown);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.results.add(utest_Assertation.TeardownError(e,utest_TestHandler.exceptionStack(2)));
		}
		this.unbindHandler();
		this.onComplete.dispatch(this);
	}
	,__class__: utest_TestHandler
};
var utest_TestResult = function() {
};
utest_TestResult.__name__ = ["utest","TestResult"];
utest_TestResult.ofHandler = function(handler) {
	var r = new utest_TestResult();
	var o = handler.fixture.target;
	var path = Type.getClassName(o == null?null:js_Boot.getClass(o)).split(".");
	r.cls = path.pop();
	r.pack = path.join(".");
	r.method = handler.fixture.method;
	r.setup = handler.fixture.setup;
	r.teardown = handler.fixture.teardown;
	r.assertations = handler.results;
	return r;
};
utest_TestResult.prototype = {
	pack: null
	,cls: null
	,method: null
	,setup: null
	,teardown: null
	,assertations: null
	,allOk: function() {
		var _g_head = this.assertations.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			if(val[1] == 0) {
				break;
			} else {
				return false;
			}
		}
		return true;
	}
	,__class__: utest_TestResult
};
var utest_ui_Report = function() { };
utest_ui_Report.__name__ = ["utest","ui","Report"];
utest_ui_Report.create = function(runner,displaySuccessResults,headerDisplayMode) {
	var report = typeof window != 'undefined'?new utest_ui_text_HtmlReport(runner,null,true):new utest_ui_text_PrintReport(runner);
	if(null == displaySuccessResults) {
		report.displaySuccessResults = utest_ui_common_SuccessResultsDisplayMode.ShowSuccessResultsWithNoErrors;
	} else {
		report.displaySuccessResults = displaySuccessResults;
	}
	if(null == headerDisplayMode) {
		report.displayHeader = utest_ui_common_HeaderDisplayMode.ShowHeaderWithResults;
	} else {
		report.displayHeader = headerDisplayMode;
	}
	return report;
};
var utest_ui_common_ClassResult = function(className,setupName,teardownName) {
	this.fixtures = new haxe_ds_StringMap();
	this.className = className;
	this.setupName = setupName;
	this.hasSetup = setupName != null;
	this.teardownName = teardownName;
	this.hasTeardown = teardownName != null;
	this.methods = 0;
	this.stats = new utest_ui_common_ResultStats();
};
utest_ui_common_ClassResult.__name__ = ["utest","ui","common","ClassResult"];
utest_ui_common_ClassResult.prototype = {
	fixtures: null
	,className: null
	,setupName: null
	,teardownName: null
	,hasSetup: null
	,hasTeardown: null
	,methods: null
	,stats: null
	,add: function(result) {
		var _this = this.fixtures;
		var key = result.methodName;
		if(__map_reserved[key] != null?_this.existsReserved(key):_this.h.hasOwnProperty(key)) {
			throw new js__$Boot_HaxeError("invalid duplicated fixture result");
		}
		this.stats.wire(result.stats);
		this.methods++;
		var _this1 = this.fixtures;
		var key1 = result.methodName;
		if(__map_reserved[key1] != null) {
			_this1.setReserved(key1,result);
		} else {
			_this1.h[key1] = result;
		}
	}
	,get: function(method) {
		var _this = this.fixtures;
		return __map_reserved[method] != null?_this.getReserved(method):_this.h[method];
	}
	,exists: function(method) {
		var _this = this.fixtures;
		if(__map_reserved[method] != null) {
			return _this.existsReserved(method);
		} else {
			return _this.h.hasOwnProperty(method);
		}
	}
	,methodNames: function(errorsHavePriority) {
		if(errorsHavePriority == null) {
			errorsHavePriority = true;
		}
		var names = [];
		var tmp = this.fixtures.keys();
		while(tmp.hasNext()) names.push(tmp.next());
		if(errorsHavePriority) {
			var me = this;
			names.sort(function(a,b) {
				var $as = me.get(a).stats;
				var bs = me.get(b).stats;
				if($as.hasErrors) {
					if(!bs.hasErrors) {
						return -1;
					} else if($as.errors == bs.errors) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare($as.errors,bs.errors);
					}
				} else if(bs.hasErrors) {
					return 1;
				} else if($as.hasFailures) {
					if(!bs.hasFailures) {
						return -1;
					} else if($as.failures == bs.failures) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare($as.failures,bs.failures);
					}
				} else if(bs.hasFailures) {
					return 1;
				} else if($as.hasWarnings) {
					if(!bs.hasWarnings) {
						return -1;
					} else if($as.warnings == bs.warnings) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare($as.warnings,bs.warnings);
					}
				} else if(bs.hasWarnings) {
					return 1;
				} else {
					return Reflect.compare(a,b);
				}
			});
		} else {
			names.sort(function(a1,b1) {
				return Reflect.compare(a1,b1);
			});
		}
		return names;
	}
	,__class__: utest_ui_common_ClassResult
};
var utest_ui_common_FixtureResult = function(methodName) {
	this.methodName = methodName;
	this.list = new List();
	this.hasTestError = false;
	this.hasSetupError = false;
	this.hasTeardownError = false;
	this.hasTimeoutError = false;
	this.hasAsyncError = false;
	this.stats = new utest_ui_common_ResultStats();
};
utest_ui_common_FixtureResult.__name__ = ["utest","ui","common","FixtureResult"];
utest_ui_common_FixtureResult.prototype = {
	methodName: null
	,hasTestError: null
	,hasSetupError: null
	,hasTeardownError: null
	,hasTimeoutError: null
	,hasAsyncError: null
	,stats: null
	,list: null
	,iterator: function() {
		return new _$List_ListIterator(this.list.h);
	}
	,add: function(assertation) {
		this.list.add(assertation);
		switch(assertation[1]) {
		case 0:
			this.stats.addSuccesses(1);
			break;
		case 1:
			this.stats.addFailures(1);
			break;
		case 2:
			this.stats.addErrors(1);
			break;
		case 3:
			this.stats.addErrors(1);
			this.hasSetupError = true;
			break;
		case 4:
			this.stats.addErrors(1);
			this.hasTeardownError = true;
			break;
		case 5:
			this.stats.addErrors(1);
			this.hasTimeoutError = true;
			break;
		case 6:
			this.stats.addErrors(1);
			this.hasAsyncError = true;
			break;
		case 7:
			this.stats.addWarnings(1);
			break;
		}
	}
	,__class__: utest_ui_common_FixtureResult
};
var utest_ui_common_HeaderDisplayMode = { __ename__ : ["utest","ui","common","HeaderDisplayMode"], __constructs__ : ["AlwaysShowHeader","NeverShowHeader","ShowHeaderWithResults"] };
utest_ui_common_HeaderDisplayMode.AlwaysShowHeader = ["AlwaysShowHeader",0];
utest_ui_common_HeaderDisplayMode.AlwaysShowHeader.__enum__ = utest_ui_common_HeaderDisplayMode;
utest_ui_common_HeaderDisplayMode.NeverShowHeader = ["NeverShowHeader",1];
utest_ui_common_HeaderDisplayMode.NeverShowHeader.__enum__ = utest_ui_common_HeaderDisplayMode;
utest_ui_common_HeaderDisplayMode.ShowHeaderWithResults = ["ShowHeaderWithResults",2];
utest_ui_common_HeaderDisplayMode.ShowHeaderWithResults.__enum__ = utest_ui_common_HeaderDisplayMode;
var utest_ui_common_SuccessResultsDisplayMode = { __ename__ : ["utest","ui","common","SuccessResultsDisplayMode"], __constructs__ : ["AlwaysShowSuccessResults","NeverShowSuccessResults","ShowSuccessResultsWithNoErrors"] };
utest_ui_common_SuccessResultsDisplayMode.AlwaysShowSuccessResults = ["AlwaysShowSuccessResults",0];
utest_ui_common_SuccessResultsDisplayMode.AlwaysShowSuccessResults.__enum__ = utest_ui_common_SuccessResultsDisplayMode;
utest_ui_common_SuccessResultsDisplayMode.NeverShowSuccessResults = ["NeverShowSuccessResults",1];
utest_ui_common_SuccessResultsDisplayMode.NeverShowSuccessResults.__enum__ = utest_ui_common_SuccessResultsDisplayMode;
utest_ui_common_SuccessResultsDisplayMode.ShowSuccessResultsWithNoErrors = ["ShowSuccessResultsWithNoErrors",2];
utest_ui_common_SuccessResultsDisplayMode.ShowSuccessResultsWithNoErrors.__enum__ = utest_ui_common_SuccessResultsDisplayMode;
var utest_ui_common_IReport = function() { };
utest_ui_common_IReport.__name__ = ["utest","ui","common","IReport"];
utest_ui_common_IReport.prototype = {
	displaySuccessResults: null
	,displayHeader: null
	,setHandler: null
	,__class__: utest_ui_common_IReport
};
var utest_ui_common_PackageResult = function(packageName) {
	this.packageName = packageName;
	this.classes = new haxe_ds_StringMap();
	this.packages = new haxe_ds_StringMap();
	this.stats = new utest_ui_common_ResultStats();
};
utest_ui_common_PackageResult.__name__ = ["utest","ui","common","PackageResult"];
utest_ui_common_PackageResult.prototype = {
	packageName: null
	,classes: null
	,packages: null
	,stats: null
	,addResult: function(result,flattenPackage) {
		this.getOrCreateClass(this.getOrCreatePackage(result.pack,flattenPackage,this),result.cls,result.setup,result.teardown).add(this.createFixture(result.method,result.assertations));
	}
	,addClass: function(result) {
		var _this = this.classes;
		var key = result.className;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,result);
		} else {
			_this.h[key] = result;
		}
		this.stats.wire(result.stats);
	}
	,addPackage: function(result) {
		var _this = this.packages;
		var key = result.packageName;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,result);
		} else {
			_this.h[key] = result;
		}
		this.stats.wire(result.stats);
	}
	,existsPackage: function(name) {
		var _this = this.packages;
		if(__map_reserved[name] != null) {
			return _this.existsReserved(name);
		} else {
			return _this.h.hasOwnProperty(name);
		}
	}
	,existsClass: function(name) {
		var _this = this.classes;
		if(__map_reserved[name] != null) {
			return _this.existsReserved(name);
		} else {
			return _this.h.hasOwnProperty(name);
		}
	}
	,getPackage: function(name) {
		if(this.packageName == null && name == "") {
			return this;
		}
		var _this = this.packages;
		return __map_reserved[name] != null?_this.getReserved(name):_this.h[name];
	}
	,getClass: function(name) {
		var _this = this.classes;
		return __map_reserved[name] != null?_this.getReserved(name):_this.h[name];
	}
	,classNames: function(errorsHavePriority) {
		if(errorsHavePriority == null) {
			errorsHavePriority = true;
		}
		var names = [];
		var tmp = this.classes.keys();
		while(tmp.hasNext()) names.push(tmp.next());
		if(errorsHavePriority) {
			var me = this;
			names.sort(function(a,b) {
				var $as = me.getClass(a).stats;
				var bs = me.getClass(b).stats;
				if($as.hasErrors) {
					if(!bs.hasErrors) {
						return -1;
					} else if($as.errors == bs.errors) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare($as.errors,bs.errors);
					}
				} else if(bs.hasErrors) {
					return 1;
				} else if($as.hasFailures) {
					if(!bs.hasFailures) {
						return -1;
					} else if($as.failures == bs.failures) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare($as.failures,bs.failures);
					}
				} else if(bs.hasFailures) {
					return 1;
				} else if($as.hasWarnings) {
					if(!bs.hasWarnings) {
						return -1;
					} else if($as.warnings == bs.warnings) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare($as.warnings,bs.warnings);
					}
				} else if(bs.hasWarnings) {
					return 1;
				} else {
					return Reflect.compare(a,b);
				}
			});
		} else {
			names.sort(function(a1,b1) {
				return Reflect.compare(a1,b1);
			});
		}
		return names;
	}
	,packageNames: function(errorsHavePriority) {
		if(errorsHavePriority == null) {
			errorsHavePriority = true;
		}
		var names = [];
		if(this.packageName == null) {
			names.push("");
		}
		var tmp = this.packages.keys();
		while(tmp.hasNext()) names.push(tmp.next());
		if(errorsHavePriority) {
			var me = this;
			names.sort(function(a,b) {
				var $as = me.getPackage(a).stats;
				var bs = me.getPackage(b).stats;
				if($as.hasErrors) {
					if(!bs.hasErrors) {
						return -1;
					} else if($as.errors == bs.errors) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare($as.errors,bs.errors);
					}
				} else if(bs.hasErrors) {
					return 1;
				} else if($as.hasFailures) {
					if(!bs.hasFailures) {
						return -1;
					} else if($as.failures == bs.failures) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare($as.failures,bs.failures);
					}
				} else if(bs.hasFailures) {
					return 1;
				} else if($as.hasWarnings) {
					if(!bs.hasWarnings) {
						return -1;
					} else if($as.warnings == bs.warnings) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare($as.warnings,bs.warnings);
					}
				} else if(bs.hasWarnings) {
					return 1;
				} else {
					return Reflect.compare(a,b);
				}
			});
		} else {
			names.sort(function(a1,b1) {
				return Reflect.compare(a1,b1);
			});
		}
		return names;
	}
	,createFixture: function(method,assertations) {
		var f = new utest_ui_common_FixtureResult(method);
		var tmp = $iterator(assertations)();
		while(tmp.hasNext()) f.add(tmp.next());
		return f;
	}
	,getOrCreateClass: function(pack,cls,setup,teardown) {
		if(pack.existsClass(cls)) {
			return pack.getClass(cls);
		}
		var c = new utest_ui_common_ClassResult(cls,setup,teardown);
		pack.addClass(c);
		return c;
	}
	,getOrCreatePackage: function(pack,flat,ref) {
		if(pack == null || pack == "") {
			return ref;
		}
		if(flat) {
			if(ref.existsPackage(pack)) {
				return ref.getPackage(pack);
			}
			var p = new utest_ui_common_PackageResult(pack);
			ref.addPackage(p);
			return p;
		} else {
			var parts = pack.split(".");
			var _g = 0;
			while(_g < parts.length) {
				var part = parts[_g];
				++_g;
				ref = this.getOrCreatePackage(part,true,ref);
			}
			return ref;
		}
	}
	,__class__: utest_ui_common_PackageResult
};
var utest_ui_common_ReportTools = function() { };
utest_ui_common_ReportTools.__name__ = ["utest","ui","common","ReportTools"];
utest_ui_common_ReportTools.hasHeader = function(report,stats) {
	switch(report.displayHeader[1]) {
	case 0:
		return true;
	case 1:
		return false;
	case 2:
		if(!stats.isOk) {
			return true;
		}
		switch(report.displaySuccessResults[1]) {
		case 0:case 2:
			return true;
		case 1:
			return false;
		}
		break;
	}
};
utest_ui_common_ReportTools.skipResult = function(report,stats,isOk) {
	if(!stats.isOk) {
		return false;
	}
	switch(report.displaySuccessResults[1]) {
	case 0:
		return false;
	case 1:
		return true;
	case 2:
		return !isOk;
	}
};
utest_ui_common_ReportTools.hasOutput = function(report,stats) {
	if(!stats.isOk) {
		return true;
	}
	return utest_ui_common_ReportTools.hasHeader(report,stats);
};
var utest_ui_common_ResultAggregator = function(runner,flattenPackage) {
	if(flattenPackage == null) {
		flattenPackage = false;
	}
	if(runner == null) {
		throw new js__$Boot_HaxeError("runner argument is null");
	}
	this.flattenPackage = flattenPackage;
	this.runner = runner;
	runner.onStart.add($bind(this,this.start));
	runner.onProgress.add($bind(this,this.progress));
	runner.onComplete.add($bind(this,this.complete));
	this.onStart = new utest_Notifier();
	this.onComplete = new utest_Dispatcher();
	this.onProgress = new utest_Dispatcher();
};
utest_ui_common_ResultAggregator.__name__ = ["utest","ui","common","ResultAggregator"];
utest_ui_common_ResultAggregator.prototype = {
	runner: null
	,flattenPackage: null
	,root: null
	,onStart: null
	,onComplete: null
	,onProgress: null
	,start: function(runner) {
		this.root = new utest_ui_common_PackageResult(null);
		this.onStart.dispatch();
	}
	,getOrCreatePackage: function(pack,flat,ref) {
		if(ref == null) {
			ref = this.root;
		}
		if(pack == null || pack == "") {
			return ref;
		}
		if(flat) {
			if(ref.existsPackage(pack)) {
				return ref.getPackage(pack);
			}
			var p = new utest_ui_common_PackageResult(pack);
			ref.addPackage(p);
			return p;
		} else {
			var parts = pack.split(".");
			var _g = 0;
			while(_g < parts.length) {
				var part = parts[_g];
				++_g;
				ref = this.getOrCreatePackage(part,true,ref);
			}
			return ref;
		}
	}
	,getOrCreateClass: function(pack,cls,setup,teardown) {
		if(pack.existsClass(cls)) {
			return pack.getClass(cls);
		}
		var c = new utest_ui_common_ClassResult(cls,setup,teardown);
		pack.addClass(c);
		return c;
	}
	,createFixture: function(result) {
		var f = new utest_ui_common_FixtureResult(result.method);
		var _g_head = result.assertations.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			f.add(val);
		}
		return f;
	}
	,progress: function(e) {
		this.root.addResult(e.result,this.flattenPackage);
		this.onProgress.dispatch(e);
	}
	,complete: function(runner) {
		this.onComplete.dispatch(this.root);
	}
	,__class__: utest_ui_common_ResultAggregator
};
var utest_ui_common_ResultStats = function() {
	this.assertations = 0;
	this.successes = 0;
	this.failures = 0;
	this.errors = 0;
	this.warnings = 0;
	this.isOk = true;
	this.hasFailures = false;
	this.hasErrors = false;
	this.hasWarnings = false;
	this.onAddSuccesses = new utest_Dispatcher();
	this.onAddFailures = new utest_Dispatcher();
	this.onAddErrors = new utest_Dispatcher();
	this.onAddWarnings = new utest_Dispatcher();
};
utest_ui_common_ResultStats.__name__ = ["utest","ui","common","ResultStats"];
utest_ui_common_ResultStats.prototype = {
	assertations: null
	,successes: null
	,failures: null
	,errors: null
	,warnings: null
	,onAddSuccesses: null
	,onAddFailures: null
	,onAddErrors: null
	,onAddWarnings: null
	,isOk: null
	,hasFailures: null
	,hasErrors: null
	,hasWarnings: null
	,addSuccesses: function(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.successes += v;
		this.onAddSuccesses.dispatch(v);
	}
	,addFailures: function(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.failures += v;
		this.hasFailures = this.failures > 0;
		this.isOk = !(this.hasFailures || this.hasErrors || this.hasWarnings);
		this.onAddFailures.dispatch(v);
	}
	,addErrors: function(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.errors += v;
		this.hasErrors = this.errors > 0;
		this.isOk = !(this.hasFailures || this.hasErrors || this.hasWarnings);
		this.onAddErrors.dispatch(v);
	}
	,addWarnings: function(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.warnings += v;
		this.hasWarnings = this.warnings > 0;
		this.isOk = !(this.hasFailures || this.hasErrors || this.hasWarnings);
		this.onAddWarnings.dispatch(v);
	}
	,sum: function(other) {
		this.addSuccesses(other.successes);
		this.addFailures(other.failures);
		this.addErrors(other.errors);
		this.addWarnings(other.warnings);
	}
	,subtract: function(other) {
		this.addSuccesses(-other.successes);
		this.addFailures(-other.failures);
		this.addErrors(-other.errors);
		this.addWarnings(-other.warnings);
	}
	,wire: function(dependant) {
		dependant.onAddSuccesses.add($bind(this,this.addSuccesses));
		dependant.onAddFailures.add($bind(this,this.addFailures));
		dependant.onAddErrors.add($bind(this,this.addErrors));
		dependant.onAddWarnings.add($bind(this,this.addWarnings));
		this.sum(dependant);
	}
	,unwire: function(dependant) {
		dependant.onAddSuccesses.remove($bind(this,this.addSuccesses));
		dependant.onAddFailures.remove($bind(this,this.addFailures));
		dependant.onAddErrors.remove($bind(this,this.addErrors));
		dependant.onAddWarnings.remove($bind(this,this.addWarnings));
		this.subtract(dependant);
	}
	,__class__: utest_ui_common_ResultStats
};
var utest_ui_text_HtmlReport = function(runner,outputHandler,traceRedirected) {
	if(traceRedirected == null) {
		traceRedirected = true;
	}
	this.aggregator = new utest_ui_common_ResultAggregator(runner,true);
	runner.onStart.add($bind(this,this.start));
	this.aggregator.onComplete.add($bind(this,this.complete));
	if(null == outputHandler) {
		this.setHandler($bind(this,this._handler));
	} else {
		this.setHandler(outputHandler);
	}
	if(traceRedirected) {
		this.redirectTrace();
	}
	this.displaySuccessResults = utest_ui_common_SuccessResultsDisplayMode.AlwaysShowSuccessResults;
	this.displayHeader = utest_ui_common_HeaderDisplayMode.AlwaysShowHeader;
};
utest_ui_text_HtmlReport.__name__ = ["utest","ui","text","HtmlReport"];
utest_ui_text_HtmlReport.__interfaces__ = [utest_ui_common_IReport];
utest_ui_text_HtmlReport.prototype = {
	traceRedirected: null
	,displaySuccessResults: null
	,displayHeader: null
	,handler: null
	,aggregator: null
	,oldTrace: null
	,_traces: null
	,setHandler: function(handler) {
		this.handler = handler;
	}
	,redirectTrace: function() {
		if(this.traceRedirected) {
			return;
		}
		this._traces = [];
		this.oldTrace = haxe_Log.trace;
		haxe_Log.trace = $bind(this,this._trace);
	}
	,restoreTrace: function() {
		if(!this.traceRedirected) {
			return;
		}
		haxe_Log.trace = this.oldTrace;
	}
	,_traceTime: null
	,_trace: function(v,infos) {
		var time = haxe_Timer.stamp();
		var delta = this._traceTime == null?0:time - this._traceTime;
		this._traces.push({ msg : StringTools.htmlEscape(Std.string(v)), infos : infos, time : time - this.startTime, delta : delta, stack : haxe_CallStack.callStack()});
		this._traceTime = haxe_Timer.stamp();
	}
	,startTime: null
	,start: function(e) {
		this.startTime = haxe_Timer.stamp();
	}
	,cls: function(stats) {
		if(stats.hasErrors) {
			return "error";
		} else if(stats.hasFailures) {
			return "failure";
		} else if(stats.hasWarnings) {
			return "warn";
		} else {
			return "ok";
		}
	}
	,resultNumbers: function(buf,stats) {
		var numbers = [];
		if(stats.assertations == 1) {
			numbers.push("<strong>1</strong> test");
		} else {
			numbers.push("<strong>" + stats.assertations + "</strong> tests");
		}
		if(stats.successes != stats.assertations) {
			if(stats.successes == 1) {
				numbers.push("<strong>1</strong> pass");
			} else if(stats.successes > 0) {
				numbers.push("<strong>" + stats.successes + "</strong> passes");
			}
		}
		if(stats.errors == 1) {
			numbers.push("<strong>1</strong> error");
		} else if(stats.errors > 0) {
			numbers.push("<strong>" + stats.errors + "</strong> errors");
		}
		if(stats.failures == 1) {
			numbers.push("<strong>1</strong> failure");
		} else if(stats.failures > 0) {
			numbers.push("<strong>" + stats.failures + "</strong> failures");
		}
		if(stats.warnings == 1) {
			numbers.push("<strong>1</strong> warning");
		} else if(stats.warnings > 0) {
			numbers.push("<strong>" + stats.warnings + "</strong> warnings");
		}
		buf.b += Std.string(numbers.join(", "));
	}
	,blockNumbers: function(buf,stats) {
		buf.b += Std.string("<div class=\"" + this.cls(stats) + "bg statnumbers\">");
		this.resultNumbers(buf,stats);
		buf.b += "</div>";
	}
	,formatStack: function(stack,addNL) {
		if(addNL == null) {
			addNL = true;
		}
		var parts = [];
		var nl = addNL?"\n":"";
		var last = null;
		var count = 1;
		var _g = 0;
		var _g1 = haxe_CallStack.toString(stack).split("\n");
		while(_g < _g1.length) {
			var part = _g1[_g];
			++_g;
			if(StringTools.trim(part) == "") {
				continue;
			}
			if(-1 < part.indexOf("Called from utest.")) {
				continue;
			}
			if(part == last) {
				parts[parts.length - 1] = part + " (#" + ++count + ")";
			} else {
				count = 1;
				last = part;
				parts.push(part);
			}
		}
		return "<div>" + ("<ul><li>" + parts.join("</li>" + nl + "<li>") + "</li></ul>" + nl) + "</div>" + nl;
	}
	,addFixture: function(buf,result,name,isOk) {
		if(utest_ui_common_ReportTools.skipResult(this,result.stats,isOk)) {
			return;
		}
		buf.b += "<li class=\"fixture\"><div class=\"li\">";
		buf.b += Std.string("<span class=\"" + this.cls(result.stats) + "bg fixtureresult\">");
		if(result.stats.isOk) {
			buf.b += "OK ";
		} else if(result.stats.hasErrors) {
			buf.b += "ERROR ";
		} else if(result.stats.hasFailures) {
			buf.b += "FAILURE ";
		} else if(result.stats.hasWarnings) {
			buf.b += "WARNING ";
		}
		buf.b += "</span>";
		buf.b += "<div class=\"fixturedetails\">";
		buf.b += Std.string("<strong>" + name + "</strong>");
		buf.b += ": ";
		this.resultNumbers(buf,result.stats);
		var messages = [];
		var _g = result.iterator();
		while(_g.head != null) {
			var val = _g.head.item;
			_g.head = _g.head.next;
			switch(val[1]) {
			case 0:
				break;
			case 1:
				messages.push("<strong>line " + val[3].lineNumber + "</strong>: <em>" + StringTools.htmlEscape(val[2]) + "</em>");
				break;
			case 2:
				var s = val[3];
				var e = val[2];
				messages.push("<strong>error</strong>: <em>" + this.getErrorDescription(e) + "</em>\n<br/><strong>stack</strong>:" + this.getErrorStack(s,e));
				break;
			case 3:
				var s1 = val[3];
				var e1 = val[2];
				messages.push("<strong>setup error</strong>: " + this.getErrorDescription(e1) + "\n<br/><strong>stack</strong>:" + this.getErrorStack(s1,e1));
				break;
			case 4:
				var s2 = val[3];
				var e2 = val[2];
				messages.push("<strong>tear-down error</strong>: " + this.getErrorDescription(e2) + "\n<br/><strong>stack</strong>:" + this.getErrorStack(s2,e2));
				break;
			case 5:
				messages.push("<strong>missed async call(s)</strong>: " + val[2]);
				break;
			case 6:
				var s3 = val[3];
				var e3 = val[2];
				messages.push("<strong>async error</strong>: " + this.getErrorDescription(e3) + "\n<br/><strong>stack</strong>:" + this.getErrorStack(s3,e3));
				break;
			case 7:
				messages.push(StringTools.htmlEscape(val[2]));
				break;
			}
		}
		if(messages.length > 0) {
			buf.b += "<div class=\"testoutput\">";
			buf.b += Std.string(messages.join("<br/>"));
			buf.b += "</div>\n";
		}
		buf.b += "</div>\n";
		buf.b += "</div></li>\n";
	}
	,getErrorDescription: function(e) {
		return Std.string(e);
	}
	,getErrorStack: function(s,e) {
		return this.formatStack(s);
	}
	,addClass: function(buf,result,name,isOk) {
		if(utest_ui_common_ReportTools.skipResult(this,result.stats,isOk)) {
			return;
		}
		buf.b += "<li>";
		buf.b += Std.string("<h2 class=\"classname\">" + name + "</h2>");
		this.blockNumbers(buf,result.stats);
		buf.b += "<ul>\n";
		var _g = 0;
		var _g1 = result.methodNames();
		while(_g < _g1.length) {
			var mname = _g1[_g];
			++_g;
			this.addFixture(buf,result.get(mname),mname,isOk);
		}
		buf.b += "</ul>\n";
		buf.b += "</li>\n";
	}
	,addPackages: function(buf,result,isOk) {
		if(utest_ui_common_ReportTools.skipResult(this,result.stats,isOk)) {
			return;
		}
		buf.b += "<ul id=\"utest-results-packages\">\n";
		var _g = 0;
		var _g1 = result.packageNames(false);
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			this.addPackage(buf,result.getPackage(name),name,isOk);
		}
		buf.b += "</ul>\n";
	}
	,addPackage: function(buf,result,name,isOk) {
		if(utest_ui_common_ReportTools.skipResult(this,result.stats,isOk)) {
			return;
		}
		if(name == "" && result.classNames().length == 0) {
			return;
		}
		buf.b += "<li>";
		buf.b += Std.string("<h2>" + name + "</h2>");
		this.blockNumbers(buf,result.stats);
		buf.b += "<ul>\n";
		var _g = 0;
		var _g1 = result.classNames();
		while(_g < _g1.length) {
			var cname = _g1[_g];
			++_g;
			this.addClass(buf,result.getClass(cname),cname,isOk);
		}
		buf.b += "</ul>\n";
		buf.b += "</li>\n";
	}
	,getTextResults: function() {
		var newline = "\n";
		var indents = function(count) {
			var _g = [];
			var _g2 = 0;
			while(_g2 < count) {
				++_g2;
				_g.push("  ");
			}
			return _g.join("");
		};
		var dumpStack = function(stack) {
			if(stack.length == 0) {
				return "";
			}
			var parts = haxe_CallStack.toString(stack).split("\n");
			var r = [];
			var _g1 = 0;
			while(_g1 < parts.length) {
				var part = parts[_g1];
				++_g1;
				if(part.indexOf(" utest.") >= 0) {
					continue;
				}
				r.push(part);
			}
			return r.join(newline);
		};
		var buf_b = "";
		var _g3 = 0;
		var _g11 = this.result.packageNames();
		while(_g3 < _g11.length) {
			var pname = _g11[_g3];
			++_g3;
			var pack = this.result.getPackage(pname);
			if(utest_ui_common_ReportTools.skipResult(this,pack.stats,this.result.stats.isOk)) {
				continue;
			}
			var _g21 = 0;
			var _g31 = pack.classNames();
			while(_g21 < _g31.length) {
				var cname = _g31[_g21];
				++_g21;
				var cls = pack.getClass(cname);
				if(utest_ui_common_ReportTools.skipResult(this,cls.stats,this.result.stats.isOk)) {
					continue;
				}
				buf_b += Std.string((pname == ""?"":pname + ".") + cname + newline);
				var _g4 = 0;
				var _g5 = cls.methodNames();
				while(_g4 < _g5.length) {
					var mname = _g5[_g4];
					++_g4;
					var fix = cls.get(mname);
					if(utest_ui_common_ReportTools.skipResult(this,fix.stats,this.result.stats.isOk)) {
						continue;
					}
					buf_b += Std.string(indents(1) + mname + ": ");
					if(fix.stats.isOk) {
						buf_b += "OK ";
					} else if(fix.stats.hasErrors) {
						buf_b += "ERROR ";
					} else if(fix.stats.hasFailures) {
						buf_b += "FAILURE ";
					} else if(fix.stats.hasWarnings) {
						buf_b += "WARNING ";
					}
					var messages = "";
					var _g6 = fix.iterator();
					while(_g6.head != null) {
						var val = _g6.head.item;
						_g6.head = _g6.head.next;
						switch(val[1]) {
						case 0:
							buf_b += ".";
							break;
						case 1:
							buf_b += "F";
							messages += indents(2) + "line: " + val[3].lineNumber + ", " + val[2] + newline;
							break;
						case 2:
							buf_b += "E";
							messages += indents(2) + Std.string(val[2]) + dumpStack(val[3]) + newline;
							break;
						case 3:
							buf_b += "S";
							messages += indents(2) + Std.string(val[2]) + dumpStack(val[3]) + newline;
							break;
						case 4:
							buf_b += "T";
							messages += indents(2) + Std.string(val[2]) + dumpStack(val[3]) + newline;
							break;
						case 5:
							buf_b += "O";
							messages += indents(2) + "missed async calls: " + val[2] + dumpStack(val[3]) + newline;
							break;
						case 6:
							buf_b += "A";
							messages += indents(2) + Std.string(val[2]) + dumpStack(val[3]) + newline;
							break;
						case 7:
							buf_b += "W";
							messages += indents(2) + val[2] + newline;
							break;
						}
					}
					buf_b += newline == null?"null":"" + newline;
					buf_b += messages == null?"null":"" + messages;
				}
			}
		}
		return buf_b;
	}
	,getHeader: function() {
		var buf = new StringBuf();
		if(!utest_ui_common_ReportTools.hasHeader(this,this.result.stats)) {
			return "";
		}
		var time = ((haxe_Timer.stamp() - this.startTime) * 1000 | 0) / 1000;
		var msg = "TEST OK";
		if(this.result.stats.hasErrors) {
			msg = "TEST ERRORS";
		} else if(this.result.stats.hasFailures) {
			msg = "TEST FAILED";
		} else if(this.result.stats.hasWarnings) {
			msg = "WARNING REPORTED";
		}
		buf.b += Std.string("<h1 class=\"" + this.cls(this.result.stats) + "bg header\">" + msg + "</h1>\n");
		buf.b += "<div class=\"headerinfo\">";
		this.resultNumbers(buf,this.result.stats);
		buf.b += Std.string(" performed on <strong>" + utest_ui_text_HtmlReport.platform + "</strong>, executed in <strong> " + time + " sec. </strong></div >\n ");
		return buf.b;
	}
	,getTrace: function() {
		var buf_b = "";
		if(this._traces == null || this._traces.length == 0) {
			return "";
		}
		buf_b = "<div class=\"trace\"><h2>traces</h2><ol>";
		var _g = 0;
		var _g1 = this._traces;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			buf_b += "<li><div class=\"li\">";
			var stack = StringTools.replace(this.formatStack(t.stack,false),"'","\\'");
			var method = "<span class=\"tracepackage\">" + t.infos.className + "</span><br/>" + t.infos.methodName + "(" + t.infos.lineNumber + ")";
			buf_b += Std.string("<span class=\"tracepos\" onmouseover=\"utestTooltip(this.parentNode, '" + stack + "')\" onmouseout=\"utestRemoveTooltip()\">");
			buf_b += method == null?"null":"" + method;
			buf_b += "</span><span class=\"tracetime\">";
			buf_b += Std.string("@ " + this.formatTime(t.time));
			if(Math.round(t.delta * 1000) > 0) {
				buf_b += Std.string(", ~" + this.formatTime(t.delta));
			}
			buf_b += "</span><span class=\"tracemsg\">";
			buf_b += Std.string(StringTools.replace(StringTools.trim(t.msg),"\n","<br/>\n"));
			buf_b += "</span><div class=\"clr\"></div></div></li>";
		}
		buf_b += "</ol></div>";
		return buf_b;
	}
	,getResults: function() {
		var buf = new StringBuf();
		this.addPackages(buf,this.result,this.result.stats.isOk);
		return buf.b;
	}
	,getAll: function() {
		if(!utest_ui_common_ReportTools.hasOutput(this,this.result.stats)) {
			return "";
		} else {
			return this.getHeader() + this.getTrace() + this.getResults();
		}
	}
	,getHtml: function(title) {
		if(null == title) {
			title = "utest: " + utest_ui_text_HtmlReport.platform;
		}
		var s = this.getAll();
		if("" == s) {
			return "";
		} else {
			return this.wrapHtml(title,s);
		}
	}
	,result: null
	,complete: function(result) {
		this.result = result;
		this.handler(this);
		this.restoreTrace();
		var exposedResult = { isOk : result.stats.isOk, message : this.getTextResults()};
		if('undefined' != typeof window) {
			window.utest_result = exposedResult;
		}
	}
	,formatTime: function(t) {
		return Math.round(t * 1000) + " ms";
	}
	,cssStyle: function() {
		return "body, dd, dt {\n  font-family: Verdana, Arial, Sans-serif;\n  font-size: 12px;\n}\ndl {\n  width: 180px;\n}\ndd, dt {\n  margin : 0;\n  padding : 2px 5px;\n  border-top: 1px solid #f0f0f0;\n  border-left: 1px solid #f0f0f0;\n  border-right: 1px solid #CCCCCC;\n  border-bottom: 1px solid #CCCCCC;\n}\ndd.value {\n  text-align: center;\n  background-color: #eeeeee;\n}\ndt {\n  text-align: left;\n  background-color: #e6e6e6;\n  float: left;\n  width: 100px;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  margin: 0;\n  padding: 0;\n}\n\nh1 {\n  text-align: center;\n  font-weight: bold;\n  padding: 5px 0 4px 0;\n  font-family: Arial, Sans-serif;\n  font-size: 18px;\n  border-top: 1px solid #f0f0f0;\n  border-left: 1px solid #f0f0f0;\n  border-right: 1px solid #CCCCCC;\n  border-bottom: 1px solid #CCCCCC;\n  margin: 0 2px 0px 2px;\n}\n\nh2 {\n  font-weight: bold;\n  padding: 2px 0 2px 8px;\n  font-family: Arial, Sans-serif;\n  font-size: 13px;\n  border-top: 1px solid #f0f0f0;\n  border-left: 1px solid #f0f0f0;\n  border-right: 1px solid #CCCCCC;\n  border-bottom: 1px solid #CCCCCC;\n  margin: 0 0 0px 0;\n  background-color: #FFFFFF;\n  color: #777777;\n}\n\nh2.classname {\n  color: #000000;\n}\n\n.okbg {\n  background-color: #66FF55;\n}\n.errorbg {\n  background-color: #CC1100;\n}\n.failurebg {\n  background-color: #EE3322;\n}\n.warnbg {\n  background-color: #FFCC99;\n}\n.headerinfo {\n  text-align: right;\n  font-size: 11px;\n  font - color: 0xCCCCCC;\n  margin: 0 2px 5px 2px;\n  border-left: 1px solid #f0f0f0;\n  border-right: 1px solid #CCCCCC;\n  border-bottom: 1px solid #CCCCCC;\n  padding: 2px;\n}\n\nli {\n  padding: 4px;\n  margin: 2px;\n  border-top: 1px solid #f0f0f0;\n  border-left: 1px solid #f0f0f0;\n  border-right: 1px solid #CCCCCC;\n  border-bottom: 1px solid #CCCCCC;\n  background-color: #e6e6e6;\n}\n\nli.fixture {\n  background-color: #f6f6f6;\n  padding-bottom: 6px;\n}\n\ndiv.fixturedetails {\n  padding-left: 108px;\n}\n\nul {\n  padding: 0;\n  margin: 6px 0 0 0;\n  list-style-type: none;\n}\n\nol {\n  padding: 0 0 0 28px;\n  margin: 0px 0 0 0;\n}\n\n.statnumbers {\n  padding: 2px 8px;\n}\n\n.fixtureresult {\n  width: 100px;\n  text-align: center;\n  display: block;\n  float: left;\n  font-weight: bold;\n  padding: 1px;\n  margin: 0 0 0 0;\n}\n\n.testoutput {\n  border: 1px dashed #CCCCCC;\n  margin: 4px 0 0 0;\n  padding: 4px 8px;\n  background-color: #eeeeee;\n}\n\nspan.tracepos, span.traceposempty {\n  display: block;\n  float: left;\n  font-weight: bold;\n  font-size: 9px;\n  width: 170px;\n  margin: 2px 0 0 2px;\n}\n\nspan.tracepos:hover {\n  cursor : pointer;\n  background-color: #ffff99;\n}\n\nspan.tracemsg {\n  display: block;\n  margin-left: 180px;\n  background-color: #eeeeee;\n  padding: 7px;\n}\n\nspan.tracetime {\n  display: block;\n  float: right;\n  margin: 2px;\n  font-size: 9px;\n  color: #777777;\n}\n\n\ndiv.trace ol {\n  padding: 0 0 0 40px;\n  color: #777777;\n}\n\ndiv.trace li {\n  padding: 0;\n}\n\ndiv.trace li div.li {\n  color: #000000;\n}\n\ndiv.trace h2 {\n  margin: 0 2px 0px 2px;\n  padding-left: 4px;\n}\n\n.tracepackage {\n  color: #777777;\n  font-weight: normal;\n}\n\n.clr {\n  clear: both;\n}\n\n#utesttip {\n  margin-top: -3px;\n  margin-left: 170px;\n  font-size: 9px;\n}\n\n#utesttip li {\n  margin: 0;\n  background-color: #ffff99;\n  padding: 2px 4px;\n  border: 0;\n  border-bottom: 1px dashed #ffff33;\n}";
	}
	,jsScript: function() {
		return "function utestTooltip(ref, text) {\n  var el = document.getElementById(\"utesttip\");\n  if(!el) {\n    var el = document.createElement(\"div\")\n    el.id = \"utesttip\";\n    el.style.position = \"absolute\";\n    document.body.appendChild(el)\n  }\n  var p = utestFindPos(ref);\n  el.style.left = (4 + p[0]) + \"px\";\n  el.style.top = (p[1] - 1) + \"px\";\n  el.innerHTML =  text;\n}\n\nfunction utestFindPos(el) {\n  var left = 0;\n  var top = 0;\n  do {\n    left += el.offsetLeft;\n    top += el.offsetTop;\n  } while(el = el.offsetParent)\n  return [left, top];\n}\n\nfunction utestRemoveTooltip() {\n  var el = document.getElementById(\"utesttip\")\n  if(el)\n    document.body.removeChild(el)\n}";
	}
	,wrapHtml: function(title,s) {
		return "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\" />\n<title>" + title + "</title>\n      <style type=\"text/css\">" + this.cssStyle() + "</style>\n      <script type=\"text/javascript\">\n" + this.jsScript() + "\n</" + "script>\n</head>\n      <body>\n" + s + "\n</body>\n</html>";
	}
	,_handler: function(report) {
		var isDef = function(v) {
			return typeof v != 'undefined';
		};
		var hasProcess = typeof process != 'undefined';
		if(hasProcess) {
			process.stdout.write(report.getHtml());
			return;
		}
		var head = window.document.getElementsByTagName("head")[0];
		var script = window.document.createElement("script");
		script.type = "text/javascript";
		var sjs = report.jsScript();
		if(isDef(script.text)) {
			script.text = sjs;
		} else {
			script.innerHTML = sjs;
		}
		head.appendChild(script);
		var style = window.document.createElement("style");
		style.type = "text/css";
		var scss = report.cssStyle();
		if(isDef(style.styleSheet)) {
			style.styleSheet.cssText = scss;
		} else if(isDef(style.cssText)) {
			style.cssText = scss;
		} else if(isDef(style.innerText)) {
			style.innerText = scss;
		} else {
			style.innerHTML = scss;
		}
		head.appendChild(style);
		var el = window.document.getElementById("utest-results");
		if(null == el) {
			el = window.document.createElement("div");
			el.id = "utest-results";
			window.document.body.appendChild(el);
		}
		el.innerHTML = report.getAll();
	}
	,__class__: utest_ui_text_HtmlReport
};
var utest_ui_text_PlainTextReport = function(runner,outputHandler) {
	this.aggregator = new utest_ui_common_ResultAggregator(runner,true);
	runner.onStart.add($bind(this,this.start));
	this.aggregator.onComplete.add($bind(this,this.complete));
	if(null != outputHandler) {
		this.setHandler(outputHandler);
	}
	this.displaySuccessResults = utest_ui_common_SuccessResultsDisplayMode.AlwaysShowSuccessResults;
	this.displayHeader = utest_ui_common_HeaderDisplayMode.AlwaysShowHeader;
};
utest_ui_text_PlainTextReport.__name__ = ["utest","ui","text","PlainTextReport"];
utest_ui_text_PlainTextReport.__interfaces__ = [utest_ui_common_IReport];
utest_ui_text_PlainTextReport.prototype = {
	displaySuccessResults: null
	,displayHeader: null
	,handler: null
	,aggregator: null
	,newline: null
	,indent: null
	,setHandler: function(handler) {
		this.handler = handler;
	}
	,startTime: null
	,start: function(e) {
		this.startTime = this.getTime();
	}
	,getTime: function() {
		return haxe_Timer.stamp();
	}
	,indents: function(c) {
		var s = "";
		var _g1 = 0;
		while(_g1 < c) {
			++_g1;
			s += this.indent;
		}
		return s;
	}
	,dumpStack: function(stack) {
		if(stack.length == 0) {
			return "";
		}
		var parts = haxe_CallStack.toString(stack).split("\n");
		var r = [];
		var _g = 0;
		while(_g < parts.length) {
			var part = parts[_g];
			++_g;
			if(part.indexOf(" utest.") >= 0) {
				continue;
			}
			r.push(part);
		}
		return r.join(this.newline);
	}
	,addHeader: function(buf,result) {
		if(!utest_ui_common_ReportTools.hasHeader(this,result.stats)) {
			return;
		}
		var time = ((this.getTime() - this.startTime) * 1000 | 0) / 1000;
		buf.b += Std.string("\nassertations: " + result.stats.assertations + this.newline);
		buf.b += Std.string("successes: " + result.stats.successes + this.newline);
		buf.b += Std.string("errors: " + result.stats.errors + this.newline);
		buf.b += Std.string("failures: " + result.stats.failures + this.newline);
		buf.b += Std.string("warnings: " + result.stats.warnings + this.newline);
		buf.b += Std.string("execution time: " + time + this.newline);
		buf.b += Std.string(this.newline);
		buf.b += Std.string("results: " + (result.stats.isOk?"ALL TESTS OK (success: true)":"SOME TESTS FAILURES (success: false)"));
		buf.b += Std.string(this.newline);
	}
	,result: null
	,getResults: function() {
		var buf = new StringBuf();
		this.addHeader(buf,this.result);
		var _g = 0;
		var _g1 = this.result.packageNames();
		while(_g < _g1.length) {
			var pname = _g1[_g];
			++_g;
			var pack = this.result.getPackage(pname);
			if(utest_ui_common_ReportTools.skipResult(this,pack.stats,this.result.stats.isOk)) {
				continue;
			}
			var _g2 = 0;
			var _g3 = pack.classNames();
			while(_g2 < _g3.length) {
				var cname = _g3[_g2];
				++_g2;
				var cls = pack.getClass(cname);
				if(utest_ui_common_ReportTools.skipResult(this,cls.stats,this.result.stats.isOk)) {
					continue;
				}
				buf.b += Std.string((pname == ""?"":pname + ".") + cname + this.newline);
				var _g4 = 0;
				var _g5 = cls.methodNames();
				while(_g4 < _g5.length) {
					var mname = _g5[_g4];
					++_g4;
					var fix = cls.get(mname);
					if(utest_ui_common_ReportTools.skipResult(this,fix.stats,this.result.stats.isOk)) {
						continue;
					}
					buf.b += Std.string(this.indents(1) + mname + ": ");
					if(fix.stats.isOk) {
						buf.b += "OK ";
					} else if(fix.stats.hasErrors) {
						buf.b += "ERROR ";
					} else if(fix.stats.hasFailures) {
						buf.b += "FAILURE ";
					} else if(fix.stats.hasWarnings) {
						buf.b += "WARNING ";
					}
					var messages = "";
					var _g6 = fix.iterator();
					while(_g6.head != null) {
						var val = _g6.head.item;
						_g6.head = _g6.head.next;
						switch(val[1]) {
						case 0:
							buf.b += ".";
							break;
						case 1:
							buf.b += "F";
							messages += this.indents(2) + "line: " + val[3].lineNumber + ", " + val[2] + this.newline;
							break;
						case 2:
							buf.b += "E";
							messages += this.indents(2) + Std.string(val[2]) + this.dumpStack(val[3]) + this.newline;
							break;
						case 3:
							buf.b += "S";
							messages += this.indents(2) + Std.string(val[2]) + this.dumpStack(val[3]) + this.newline;
							break;
						case 4:
							buf.b += "T";
							messages += this.indents(2) + Std.string(val[2]) + this.dumpStack(val[3]) + this.newline;
							break;
						case 5:
							buf.b += "O";
							messages += this.indents(2) + "missed async calls: " + val[2] + this.dumpStack(val[3]) + this.newline;
							break;
						case 6:
							buf.b += "A";
							messages += this.indents(2) + Std.string(val[2]) + this.dumpStack(val[3]) + this.newline;
							break;
						case 7:
							buf.b += "W";
							messages += this.indents(2) + val[2] + this.newline;
							break;
						}
					}
					buf.b += Std.string(this.newline);
					buf.b += messages == null?"null":"" + messages;
				}
			}
		}
		return buf.b;
	}
	,complete: function(result) {
		this.result = result;
		this.handler(this);
		if(typeof process != "undefined") {
			process.exit(result.stats.isOk?0:1);
		}
		if(typeof phantom != "undefined") {
			phantom.exit(result.stats.isOk?0:1);
		}
	}
	,__class__: utest_ui_text_PlainTextReport
};
var utest_ui_text_PrintReport = function(runner) {
	utest_ui_text_PlainTextReport.call(this,runner,$bind(this,this._handler));
	this.newline = "\n";
	this.indent = "  ";
};
utest_ui_text_PrintReport.__name__ = ["utest","ui","text","PrintReport"];
utest_ui_text_PrintReport.__super__ = utest_ui_text_PlainTextReport;
utest_ui_text_PrintReport.prototype = $extend(utest_ui_text_PlainTextReport.prototype,{
	_handler: function(report) {
		this._trace(report.getResults());
	}
	,_trace: function(s) {
		s = StringTools.replace(s,"  ",this.indent);
		s = StringTools.replace(s,"\n",this.newline);
		haxe_Log.trace(s,{ fileName : "PrintReport.hx", lineNumber : 57, className : "utest.ui.text.PrintReport", methodName : "_trace"});
	}
	,__class__: utest_ui_text_PrintReport
});
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = ["String"];
Array.__name__ = ["Array"];
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
if(Math.imul != null) {
	haxe__$Int32_Int32_$Impl_$.mul = Math.imul;
}
var __map_reserved = {}
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
var scope = ("undefined" !== typeof window && window) || ("undefined" !== typeof global && global) || Function("return this")();
if(!scope.setImmediate) {
	scope.setImmediate = function(callback) {
		scope.setTimeout(callback,0);
	};
}
var lastTime = 0;
var vendors = ["webkit","moz"];
var x = 0;
while(x < vendors.length && !scope.requestAnimationFrame) {
	scope.requestAnimationFrame = scope[vendors[x] + "RequestAnimationFrame"];
	scope.cancelAnimationFrame = scope[vendors[x] + "CancelAnimationFrame"] || scope[vendors[x] + "CancelRequestAnimationFrame"];
	++x;
}
if(!scope.requestAnimationFrame) {
	scope.requestAnimationFrame = function(callback1) {
		var currTime = new Date().getTime();
		var timeToCall = Math.max(0,16 - (currTime - lastTime));
		var id = scope.setTimeout(function() {
			callback1(currTime + timeToCall);
		},timeToCall);
		lastTime = currTime + timeToCall;
		return id;
	};
}
if(!scope.cancelAnimationFrame) {
	scope.cancelAnimationFrame = function(id1) {
		scope.clearTimeout(id1);
	};
}
if(typeof(scope.performance) == "undefined") {
	scope.performance = { };
}
if(typeof(scope.performance.now) == "undefined") {
	var nowOffset = new Date().getTime();
	if(scope.performance.timing && scope.performance.timing.navigationStart) {
		nowOffset = scope.performance.timing.navigationStart;
	}
	var now = function() {
		return new Date() - nowOffset;
	};
	scope.performance.now = now;
}
DateTools.DAYS_OF_MONTH = [31,28,31,30,31,30,31,31,30,31,30,31];
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = { }.toString;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
thx_Assert.behavior = new thx_DefaultAssertBehavior();
thx_bigint_Small.zero = new thx_bigint_Small(0);
thx_bigint_Small.one = new thx_bigint_Small(1);
thx_bigint_Small.two = new thx_bigint_Small(2);
thx_bigint_Small.ten = new thx_bigint_Small(10);
thx_bigint_Small.negativeOne = new thx_bigint_Small(-1);
thx__$BigInt_BigInt_$Impl_$.zero = thx_bigint_Small.zero;
thx__$BigInt_BigInt_$Impl_$.one = thx_bigint_Small.one;
thx__$BigInt_BigInt_$Impl_$.two = thx_bigint_Small.two;
thx__$BigInt_BigInt_$Impl_$.negativeOne = thx_bigint_Small.negativeOne;
thx__$BitSet_BitSet_$Impl_$.blockSize = 32;
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.millisPerSecond = 1000;
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.millisPerMinute = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.millisPerSecond * 60;
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.millisPerHour = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.millisPerMinute * 60;
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.millisPerDay = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.millisPerHour * 24;
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.tenI64 = new haxe__$Int64__$_$_$Int64(0,10);
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.hundredI64 = new haxe__$Int64__$_$_$Int64(0,100);
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.thousandI64 = new haxe__$Int64__$_$_$Int64(0,1000);
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.tenThousandI64 = new haxe__$Int64__$_$_$Int64(0,10000);
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.millionI64 = new haxe__$Int64__$_$_$Int64(0,1000000);
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMicrosecondI64 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.tenI64;
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMillisecond = 10000;
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMillisecondI64 = (function($this) {
	var $r;
	var x = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMillisecond;
	$r = new haxe__$Int64__$_$_$Int64(x >> 31,x);
	return $r;
}(this));
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerSecondI64 = (function($this) {
	var $r;
	var a = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMillisecondI64;
	var b = new haxe__$Int64__$_$_$Int64(0,1000);
	var al = a.low & 65535;
	var ah = a.low >>> 16;
	var bl = b.low & 65535;
	var bh = b.low >>> 16;
	var p00 = haxe__$Int32_Int32_$Impl_$.mul(al,bl);
	var p10 = haxe__$Int32_Int32_$Impl_$.mul(ah,bl);
	var p01 = haxe__$Int32_Int32_$Impl_$.mul(al,bh);
	var p11 = haxe__$Int32_Int32_$Impl_$.mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 = p01 << 16;
	low = p00 + p01 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
		++high;
		high = high | 0;
	}
	p10 = p10 << 16;
	low = low + p10 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
		++high;
		high = high | 0;
	}
	high = high + (haxe__$Int32_Int32_$Impl_$.mul(a.low,b.high) + haxe__$Int32_Int32_$Impl_$.mul(a.high,b.low) | 0) | 0;
	$r = new haxe__$Int64__$_$_$Int64(high,low);
	return $r;
}(this));
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMinuteI64 = (function($this) {
	var $r;
	var a = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerSecondI64;
	var b = new haxe__$Int64__$_$_$Int64(0,60);
	var al = a.low & 65535;
	var ah = a.low >>> 16;
	var bl = b.low & 65535;
	var bh = b.low >>> 16;
	var p00 = haxe__$Int32_Int32_$Impl_$.mul(al,bl);
	var p10 = haxe__$Int32_Int32_$Impl_$.mul(ah,bl);
	var p01 = haxe__$Int32_Int32_$Impl_$.mul(al,bh);
	var p11 = haxe__$Int32_Int32_$Impl_$.mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 = p01 << 16;
	low = p00 + p01 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
		++high;
		high = high | 0;
	}
	p10 = p10 << 16;
	low = low + p10 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
		++high;
		high = high | 0;
	}
	high = high + (haxe__$Int32_Int32_$Impl_$.mul(a.low,b.high) + haxe__$Int32_Int32_$Impl_$.mul(a.high,b.low) | 0) | 0;
	$r = new haxe__$Int64__$_$_$Int64(high,low);
	return $r;
}(this));
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerHourI64 = (function($this) {
	var $r;
	var a = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerMinuteI64;
	var b = new haxe__$Int64__$_$_$Int64(0,60);
	var al = a.low & 65535;
	var ah = a.low >>> 16;
	var bl = b.low & 65535;
	var bh = b.low >>> 16;
	var p00 = haxe__$Int32_Int32_$Impl_$.mul(al,bl);
	var p10 = haxe__$Int32_Int32_$Impl_$.mul(ah,bl);
	var p01 = haxe__$Int32_Int32_$Impl_$.mul(al,bh);
	var p11 = haxe__$Int32_Int32_$Impl_$.mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 = p01 << 16;
	low = p00 + p01 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
		++high;
		high = high | 0;
	}
	p10 = p10 << 16;
	low = low + p10 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
		++high;
		high = high | 0;
	}
	high = high + (haxe__$Int32_Int32_$Impl_$.mul(a.low,b.high) + haxe__$Int32_Int32_$Impl_$.mul(a.high,b.low) | 0) | 0;
	$r = new haxe__$Int64__$_$_$Int64(high,low);
	return $r;
}(this));
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerDayI64 = (function($this) {
	var $r;
	var a = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerHourI64;
	var b = new haxe__$Int64__$_$_$Int64(0,24);
	var al = a.low & 65535;
	var ah = a.low >>> 16;
	var bl = b.low & 65535;
	var bh = b.low >>> 16;
	var p00 = haxe__$Int32_Int32_$Impl_$.mul(al,bl);
	var p10 = haxe__$Int32_Int32_$Impl_$.mul(ah,bl);
	var p01 = haxe__$Int32_Int32_$Impl_$.mul(al,bh);
	var p11 = haxe__$Int32_Int32_$Impl_$.mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 = p01 << 16;
	low = p00 + p01 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
		++high;
		high = high | 0;
	}
	p10 = p10 << 16;
	low = low + p10 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
		++high;
		high = high | 0;
	}
	high = high + (haxe__$Int32_Int32_$Impl_$.mul(a.low,b.high) + haxe__$Int32_Int32_$Impl_$.mul(a.high,b.low) | 0) | 0;
	$r = new haxe__$Int64__$_$_$Int64(high,low);
	return $r;
}(this));
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysPerYear = 365;
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysPer4Years = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysPerYear * 4 + 1;
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysPer100Years = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysPer4Years * 25 - 1;
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysPer400Years = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysPer100Years * 4 + 1;
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysTo1970 = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysPer400Years * 4 + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysPer100Years * 3 + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysPer4Years * 17 + thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysPerYear;
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.unixEpochTicks = (function($this) {
	var $r;
	var a = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.ticksPerDayI64;
	var x = thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysTo1970;
	var b = new haxe__$Int64__$_$_$Int64(x >> 31,x);
	var al = a.low & 65535;
	var ah = a.low >>> 16;
	var bl = b.low & 65535;
	var bh = b.low >>> 16;
	var p00 = haxe__$Int32_Int32_$Impl_$.mul(al,bl);
	var p10 = haxe__$Int32_Int32_$Impl_$.mul(ah,bl);
	var p01 = haxe__$Int32_Int32_$Impl_$.mul(al,bh);
	var p11 = haxe__$Int32_Int32_$Impl_$.mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 = p01 << 16;
	low = p00 + p01 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
		++high;
		high = high | 0;
	}
	p10 = p10 << 16;
	low = low + p10 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
		++high;
		high = high | 0;
	}
	high = high + (haxe__$Int32_Int32_$Impl_$.mul(a.low,b.high) + haxe__$Int32_Int32_$Impl_$.mul(a.high,b.low) | 0) | 0;
	$r = new haxe__$Int64__$_$_$Int64(high,low);
	return $r;
}(this));
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_YEAR = 0;
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY_OF_YEAR = 1;
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_MONTH = 2;
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.DATE_PART_DAY = 3;
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysToMonth365 = [0,31,59,90,120,151,181,212,243,273,304,334,365];
thx__$DateTimeUtc_DateTimeUtc_$Impl_$.daysToMonth366 = [0,31,60,91,121,152,182,213,244,274,305,335,366];
thx_bigint_Decimals.divisionExtraScale = 4;
thx_bigint_Bigs.BASE = 10000000;
thx_bigint_Bigs.DOUBLE_BASE = 100000000000000.0;
thx_bigint_Bigs.LOG_BASE = 7;
thx_bigint_Bigs.MAX_INT = 9007199254740992;
thx_bigint_Bigs.MAX_INT_ARR = thx_bigint_Bigs.smallToArray(thx_bigint_Bigs.MAX_INT);
thx_bigint_Bigs.LOG_MAX_INT = Math.log(thx_bigint_Bigs.MAX_INT);
thx_bigint_Bigs.powersOfTwo = (function($this) {
	var $r;
	var powers = [1];
	while(powers[powers.length - 1] <= 10000000) powers.push(2 * powers[powers.length - 1]);
	$r = powers;
	return $r;
}(this));
thx_bigint_Bigs.bigPowersOfTwo = thx_bigint_Bigs.powersOfTwo.map(function(v) {
	return new thx_bigint_Small(v);
});
thx_bigint_Bigs.powers2Length = thx_bigint_Bigs.powersOfTwo.length;
thx_bigint_Bigs.highestPower2 = thx_bigint_Bigs.powersOfTwo[thx_bigint_Bigs.powers2Length - 1];
thx_bigint_Bigs.bigHighestPower2 = new thx_bigint_Small(thx_bigint_Bigs.highestPower2);
thx_bigint_DecimalImpl.zero = thx_bigint_Decimals.fromInt(0);
thx_bigint_DecimalImpl.one = thx_bigint_Decimals.fromInt(1);
thx_bigint_DecimalImpl.ten = thx_bigint_Decimals.fromInt(10);
thx__$Decimal_Decimal_$Impl_$.zero = thx_bigint_DecimalImpl.zero;
thx__$Decimal_Decimal_$Impl_$.one = thx_bigint_DecimalImpl.one;
thx_ERegs.ESCAPE_PATTERN = new EReg("([-\\[\\]{}()*+?\\.,\\\\^$|# \t\r\n])","g");
thx_Effects.logger = haxe_Log.trace;
thx_Floats.TOLERANCE = 10e-5;
thx_Floats.EPSILON = 1e-9;
thx_Floats.pattern_parse = new EReg("^(\\+|-)?\\d+(\\.\\d+)?(e-?\\d+)?$","");
thx_Floats.order = thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Floats.compare);
thx_Floats.monoid = { zero : 0.0, append : function(a,b) {
	return a + b;
}};
thx_Int64s.one = new haxe__$Int64__$_$_$Int64(0,1);
thx_Int64s.two = new haxe__$Int64__$_$_$Int64(0,2);
thx_Int64s.zero = new haxe__$Int64__$_$_$Int64(0,0);
thx_Int64s.ten = new haxe__$Int64__$_$_$Int64(0,10);
thx_Int64s.maxValue = new haxe__$Int64__$_$_$Int64(2147483647,-1);
thx_Int64s.minValue = new haxe__$Int64__$_$_$Int64(-2147483648,1);
thx_Int64s.min = new haxe__$Int64__$_$_$Int64(-2147483648,0);
thx_Ints.pattern_parse = new EReg("^[ \t\r\n]*[+-]?(\\d+|0x[0-9A-F]+)","i");
thx_Ints.BASE = "0123456789abcdefghijklmnopqrstuvwxyz";
thx_Ints.order = function(i0,i1) {
	if(i0 > i1) {
		return thx_OrderingImpl.GT;
	} else if(i0 == i1) {
		return thx_OrderingImpl.EQ;
	} else {
		return thx_OrderingImpl.LT;
	}
};
thx_Ints.monoid = { zero : 0, append : function(a,b) {
	return a + b;
}};
thx__$LocalDate_LocalDate_$Impl_$.millisPerSecond = 1000;
thx__$LocalDate_LocalDate_$Impl_$.millisPerMinute = thx__$LocalDate_LocalDate_$Impl_$.millisPerSecond * 60;
thx__$LocalDate_LocalDate_$Impl_$.millisPerHour = thx__$LocalDate_LocalDate_$Impl_$.millisPerMinute * 60;
thx__$LocalDate_LocalDate_$Impl_$.millisPerDay = thx__$LocalDate_LocalDate_$Impl_$.millisPerHour * 24;
thx__$LocalDate_LocalDate_$Impl_$.daysPerYear = 365;
thx__$LocalDate_LocalDate_$Impl_$.daysPer4Years = thx__$LocalDate_LocalDate_$Impl_$.daysPerYear * 4 + 1;
thx__$LocalDate_LocalDate_$Impl_$.daysPer100Years = thx__$LocalDate_LocalDate_$Impl_$.daysPer4Years * 25 - 1;
thx__$LocalDate_LocalDate_$Impl_$.daysPer400Years = thx__$LocalDate_LocalDate_$Impl_$.daysPer100Years * 4 + 1;
thx__$LocalDate_LocalDate_$Impl_$.unixEpochDays = thx__$LocalDate_LocalDate_$Impl_$.daysPer400Years * 4 + thx__$LocalDate_LocalDate_$Impl_$.daysPer100Years * 3 + thx__$LocalDate_LocalDate_$Impl_$.daysPer4Years * 17 + thx__$LocalDate_LocalDate_$Impl_$.daysPerYear;
thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_YEAR = 0;
thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_DAY_OF_YEAR = 1;
thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_MONTH = 2;
thx__$LocalDate_LocalDate_$Impl_$.DATE_PART_DAY = 3;
thx__$LocalDate_LocalDate_$Impl_$.daysToMonth365 = [0,31,59,90,120,151,181,212,243,273,304,334,365];
thx__$LocalDate_LocalDate_$Impl_$.daysToMonth366 = [0,31,60,91,121,152,182,213,244,274,305,335,366];
thx_Orderings.monoid = { zero : thx_OrderingImpl.EQ, append : function(o0,o1) {
	switch(o0[1]) {
	case 0:
		return thx_OrderingImpl.LT;
	case 1:
		return thx_OrderingImpl.GT;
	case 2:
		return o1;
	}
}};
thx__$Path_Path_$Impl_$.nixSeparator = "/";
thx__$Path_Path_$Impl_$.win32Separator = "\\";
thx__$QueryString_QueryString_$Impl_$.separator = "&";
thx__$QueryString_QueryString_$Impl_$.assignment = "=";
thx__$Rational_Rational_$Impl_$.zero = { num : thx__$BigInt_BigInt_$Impl_$.one, den : thx__$BigInt_BigInt_$Impl_$.zero};
thx_Strings.order = thx__$Ord_Ord_$Impl_$.fromIntComparison(thx_Strings.compare);
thx_Strings.HASCODE_MAX = 2147483647;
thx_Strings.HASCODE_MUL = 31;
thx_Strings.monoid = { zero : "", append : function(a,b) {
	return a + b;
}};
thx_Strings.UCWORDS = new EReg("[^a-zA-Z]([a-z])","g");
thx_Strings.IS_BREAKINGWHITESPACE = new EReg("[^\t\n\r ]","");
thx_Strings.IS_ALPHA = new EReg("[^a-zA-Z]","");
thx_Strings.UCWORDSWS = new EReg("[ \t\r\n][a-z]","g");
thx_Strings.ALPHANUM = new EReg("^[a-z0-9]+$","i");
thx_Strings.DIGITS = new EReg("^[0-9]+$","");
thx_Strings.STRIPTAGS = new EReg("</?[a-z]+[^>]*>","gi");
thx_Strings.WSG = new EReg("[ \t\r\n]+","g");
thx_Strings.SPLIT_LINES = new EReg("\r\n|\n\r|\n|\r","g");
thx_Strings.CANONICALIZE_LINES = new EReg("\r\n|\n\r|\r","g");
thx_ResourceTest.fileJson = { some : "value"};
thx_ResourceTest.fileText = "some text\n";
thx_ResourceTest.a = 1;
thx_ResourceTest.b = { s : "thx"};
thx_ResourceTest.c = true;
thx_ResourceTest.d = "haxe";
thx_ResourceDir.text = "some text\n";
thx_ResourceDir.object = { some : "value"};
thx__$Time_Time_$Impl_$.zero = new haxe__$Int64__$_$_$Int64(0,0);
thx__$Time_Time_$Impl_$.oneDay = new haxe__$Int64__$_$_$Int64(0,24);
thx_Timer.FRAME_RATE = Math.round(16.6666666666666679);
thx__$Url_Url_$Impl_$.pattern = new EReg("^((((?:([^:/#\\?]+):)?(?:(//)?((?:(([^:@/#\\?]+)(?:[:]([^:@/#\\?]+))?)@)?(([^:/#\\?\\]\\[]+|\\[[^/\\]@#?]+\\])(?:[:]([0-9]+))?))?)?)?((/?(?:[^/\\?#]+/+)*)([^\\?#]*)))?(?:\\?([^#]+))?)(?:#(.*))?","");
thx_fp__$Map_Map_$Impl_$.delta = 5;
thx_fp__$Map_Map_$Impl_$.ratio = 2;
thx_fp__$Set_Set_$Impl_$.delta = 4;
thx_fp__$Set_Set_$Impl_$.ratio = 4;
thx_fp_TestTreeBag.t0 = thx_fp_TreeBagImpl.Empty;
thx_fp_TestTreeBag.t1 = thx_fp_TreeBagImpl.Cons(1,thx_fp_TreeBagImpl.Cons(2,thx_fp_TestTreeBag.t0));
thx_fp_TestTreeBag.t2 = thx_fp_TreeBagImpl.Cons(2,thx_fp_TreeBagImpl.Cons(3,thx_fp_TestTreeBag.t0));
utest_TestHandler.POLLING_TIME = 10;
utest_ui_text_HtmlReport.platform = "javascript";
TestAll.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
