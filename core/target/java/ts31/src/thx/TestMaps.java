// Generated by Haxe 3.3.0
package thx;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestMaps extends haxe.lang.HxObject
{
	public TestMaps(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestMaps(int i)
	{
		//line 11 "/shared/core/test/thx/TestMaps.hx"
		thx.TestMaps.__hx_ctor_thx_TestMaps(this, i);
	}
	
	
	public static void __hx_ctor_thx_TestMaps(thx.TestMaps __temp_me111, int i)
	{
		//line 12 "/shared/core/test/thx/TestMaps.hx"
		__temp_me111.x = i;
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 9 "/shared/core/test/thx/TestMaps.hx"
		return new thx.TestMaps(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 9 "/shared/core/test/thx/TestMaps.hx"
		return new thx.TestMaps(((int) (haxe.lang.Runtime.toInt(arr.__get(0))) ));
	}
	
	
	public int x;
	
	public void testTuples()
	{
		//line 15 "/shared/core/test/thx/TestMaps.hx"
		int _g1 = 0;
		//line 15 "/shared/core/test/thx/TestMaps.hx"
		int _g = this.x;
		//line 15 "/shared/core/test/thx/TestMaps.hx"
		while (( _g1 < _g ))
		{
			//line 15 "/shared/core/test/thx/TestMaps.hx"
			 ++ _g1;
			//line 16 "/shared/core/test/thx/TestMaps.hx"
			haxe.ds.StringMap<java.lang.Object> _g2 = new haxe.ds.StringMap<java.lang.Object>();
			//line 16 "/shared/core/test/thx/TestMaps.hx"
			_g2.set("key1", 1);
			//line 16 "/shared/core/test/thx/TestMaps.hx"
			_g2.set("key2", 2);
			//line 21 "/shared/core/test/thx/TestMaps.hx"
			haxe.root.Array<java.lang.Object> tuples = ((haxe.root.Array<java.lang.Object>) (thx.Maps.tuples(((haxe.IMap<java.lang.String, java.lang.Object>) (((haxe.IMap) (((haxe.IMap<java.lang.String, java.lang.Object>) (_g2) )) )) ))) );
			//line 22 "/shared/core/test/thx/TestMaps.hx"
			tuples.sort(( (( thx.TestMaps_testTuples_22__Fun.__hx_current != null )) ? (thx.TestMaps_testTuples_22__Fun.__hx_current) : (thx.TestMaps_testTuples_22__Fun.__hx_current = ((thx.TestMaps_testTuples_22__Fun) (new thx.TestMaps_testTuples_22__Fun()) )) ));
			//line 24 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.equals(2, tuples.length, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testTuples"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (24) )) )}));
			//line 25 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.equals(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(tuples.__get(0), "_0", true)), "key1", null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testTuples"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (25) )) )}));
			//line 26 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.equals(((int) (haxe.lang.Runtime.getField_f(tuples.__get(0), "_1", true)) ), 1, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testTuples"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (26) )) )}));
			//line 27 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.equals(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(tuples.__get(1), "_0", true)), "key2", null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testTuples"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (27) )) )}));
			//line 28 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.equals(((int) (haxe.lang.Runtime.getField_f(tuples.__get(1), "_1", true)) ), 2, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testTuples"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (28) )) )}));
		}
		
	}
	
	
	public void testValues()
	{
		//line 32 "/shared/core/test/thx/TestMaps.hx"
		int _g1 = 0;
		//line 32 "/shared/core/test/thx/TestMaps.hx"
		int _g = this.x;
		//line 32 "/shared/core/test/thx/TestMaps.hx"
		while (( _g1 < _g ))
		{
			//line 32 "/shared/core/test/thx/TestMaps.hx"
			 ++ _g1;
			//line 33 "/shared/core/test/thx/TestMaps.hx"
			haxe.ds.StringMap<java.lang.Object> _g2 = new haxe.ds.StringMap<java.lang.Object>();
			//line 33 "/shared/core/test/thx/TestMaps.hx"
			_g2.set("key1", 1);
			//line 33 "/shared/core/test/thx/TestMaps.hx"
			_g2.set("key2", 2);
			//line 33 "/shared/core/test/thx/TestMaps.hx"
			_g2.set("key3", 3);
			//line 38 "/shared/core/test/thx/TestMaps.hx"
			haxe.root.Array<java.lang.Object> values = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.Arrays.order(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.Maps.values(((haxe.IMap<java.lang.String, java.lang.Object>) (((haxe.IMap) (((haxe.IMap<java.lang.String, java.lang.Object>) (_g2) )) )) ))) )) )) )) ), ((haxe.lang.Function) (new haxe.lang.Closure(thx.Ints.class, "compare")) ))) )) );
			//line 39 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2, 3}), values, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testValues"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (39) )) )}));
		}
		
	}
	
	
	public void testGetOption()
	{
		//line 43 "/shared/core/test/thx/TestMaps.hx"
		int _g1 = 0;
		//line 43 "/shared/core/test/thx/TestMaps.hx"
		int _g = this.x;
		//line 43 "/shared/core/test/thx/TestMaps.hx"
		while (( _g1 < _g ))
		{
			//line 43 "/shared/core/test/thx/TestMaps.hx"
			 ++ _g1;
			//line 44 "/shared/core/test/thx/TestMaps.hx"
			haxe.ds.StringMap<java.lang.Object> _g2 = new haxe.ds.StringMap<java.lang.Object>();
			//line 44 "/shared/core/test/thx/TestMaps.hx"
			_g2.set("key1", 1);
			//line 46 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.same(((java.lang.Object) (thx.Options.get(((haxe.ds.Option) (thx.Maps.getOption(((haxe.IMap<java.lang.String, java.lang.Object>) (((haxe.IMap) (((haxe.IMap<java.lang.String, java.lang.Object>) (_g2) )) )) ), haxe.lang.Runtime.toString("key1"))) ))) ), 1, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testGetOption"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (46) )) )}));
			//line 47 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.same(((boolean) (thx.Options.toBool(((haxe.ds.Option) (thx.Maps.getOption(((haxe.IMap<java.lang.String, java.lang.Object>) (((haxe.IMap) (((haxe.IMap<java.lang.String, java.lang.Object>) (_g2) )) )) ), haxe.lang.Runtime.toString("key2"))) ))) ), false, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testGetOption"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (47) )) )}));
		}
		
	}
	
	
	public void testMerge()
	{
		//line 51 "/shared/core/test/thx/TestMaps.hx"
		int _g1 = 0;
		//line 51 "/shared/core/test/thx/TestMaps.hx"
		int _g = this.x;
		//line 51 "/shared/core/test/thx/TestMaps.hx"
		while (( _g1 < _g ))
		{
			//line 51 "/shared/core/test/thx/TestMaps.hx"
			 ++ _g1;
			//line 52 "/shared/core/test/thx/TestMaps.hx"
			haxe.ds.StringMap<java.lang.Object> _g2 = new haxe.ds.StringMap<java.lang.Object>();
			//line 52 "/shared/core/test/thx/TestMaps.hx"
			_g2.set("key1", 1);
			//line 52 "/shared/core/test/thx/TestMaps.hx"
			_g2.set("key2", 1);
			//line 52 "/shared/core/test/thx/TestMaps.hx"
			_g2.set("key3", 1);
			//line 57 "/shared/core/test/thx/TestMaps.hx"
			haxe.ds.StringMap<java.lang.Object> _g3 = new haxe.ds.StringMap<java.lang.Object>();
			//line 57 "/shared/core/test/thx/TestMaps.hx"
			_g3.set("key2", 2);
			//line 57 "/shared/core/test/thx/TestMaps.hx"
			_g3.set("key3", 2);
			//line 61 "/shared/core/test/thx/TestMaps.hx"
			haxe.ds.StringMap<java.lang.Object> _g4 = new haxe.ds.StringMap<java.lang.Object>();
			//line 61 "/shared/core/test/thx/TestMaps.hx"
			_g4.set("key3", 3);
			//line 65 "/shared/core/test/thx/TestMaps.hx"
			haxe.IMap<java.lang.String, java.lang.Object> result1 = ((haxe.IMap<java.lang.String, java.lang.Object>) (((haxe.IMap) (thx.Maps.merge(((haxe.IMap<java.lang.String, java.lang.Object>) (((haxe.IMap) (((haxe.IMap<java.lang.String, java.lang.Object>) (new haxe.ds.StringMap<java.lang.Object>()) )) )) ), ((haxe.root.Array<haxe.IMap<java.lang.String, java.lang.Object>>) (((haxe.root.Array) (new haxe.root.Array<haxe.IMap<java.lang.String, java.lang.Object>>(new haxe.IMap[]{((haxe.IMap<java.lang.String, java.lang.Object>) (_g2) ), ((haxe.IMap<java.lang.String, java.lang.Object>) (_g3) ), ((haxe.IMap<java.lang.String, java.lang.Object>) (_g4) )})) )) ))) )) );
			//line 66 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.same(3, ((haxe.root.Array<java.lang.String>) (((haxe.root.Array) (thx.Iterators.toArray(((java.lang.Object) (result1.keys()) ))) )) ).length, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testMerge"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (66) )) )}));
			//line 67 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.same(1, result1.get("key1"), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testMerge"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (67) )) )}));
			//line 68 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.same(2, result1.get("key2"), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testMerge"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (68) )) )}));
			//line 69 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.same(3, result1.get("key3"), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testMerge"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (69) )) )}));
			//line 72 "/shared/core/test/thx/TestMaps.hx"
			haxe.ds.StringMap<java.lang.Object> _g5 = new haxe.ds.StringMap<java.lang.Object>();
			//line 72 "/shared/core/test/thx/TestMaps.hx"
			_g5.set("mykey", 5);
			//line 72 "/shared/core/test/thx/TestMaps.hx"
			haxe.IMap<java.lang.String, java.lang.Object> result2 = ((haxe.IMap<java.lang.String, java.lang.Object>) (((haxe.IMap) (thx.Maps.merge(((haxe.IMap<java.lang.String, java.lang.Object>) (((haxe.IMap) (((haxe.IMap<java.lang.String, java.lang.Object>) (_g5) )) )) ), ((haxe.root.Array<haxe.IMap<java.lang.String, java.lang.Object>>) (((haxe.root.Array) (new haxe.root.Array<haxe.IMap<java.lang.String, java.lang.Object>>(new haxe.IMap[]{})) )) ))) )) );
			//line 73 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.same(1, ((haxe.root.Array<java.lang.String>) (((haxe.root.Array) (thx.Iterators.toArray(((java.lang.Object) (result2.keys()) ))) )) ).length, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testMerge"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (73) )) )}));
			//line 74 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.same(5, result2.get("mykey"), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testMerge"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (74) )) )}));
			//line 77 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.same(3, ((haxe.root.Array<java.lang.String>) (((haxe.root.Array) (thx.Iterators.toArray(((java.lang.Object) (_g2.keys()) ))) )) ).length, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testMerge"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (77) )) )}));
			//line 78 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.same(1, ((java.lang.Object) (_g2.get("key1")) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testMerge"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (78) )) )}));
			//line 79 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.same(1, ((java.lang.Object) (_g2.get("key2")) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testMerge"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (79) )) )}));
			//line 80 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.same(1, ((java.lang.Object) (_g2.get("key3")) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testMerge"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (80) )) )}));
			//line 81 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.same(2, ((haxe.root.Array<java.lang.String>) (((haxe.root.Array) (thx.Iterators.toArray(((java.lang.Object) (_g3.keys()) ))) )) ).length, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testMerge"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (81) )) )}));
			//line 82 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.same(2, ((java.lang.Object) (_g3.get("key2")) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testMerge"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (82) )) )}));
			//line 83 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.same(2, ((java.lang.Object) (_g3.get("key3")) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testMerge"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (83) )) )}));
			//line 84 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.same(1, ((haxe.root.Array<java.lang.String>) (((haxe.root.Array) (thx.Iterators.toArray(((java.lang.Object) (_g4.keys()) ))) )) ).length, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testMerge"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (84) )) )}));
			//line 85 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.same(3, ((java.lang.Object) (_g4.get("key3")) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testMerge"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (85) )) )}));
			//line 89 "/shared/core/test/thx/TestMaps.hx"
			haxe.IMap<java.lang.String, java.lang.Object> result3 = ((haxe.IMap<java.lang.String, java.lang.Object>) (((haxe.IMap) (thx.Maps.merge(((haxe.IMap<java.lang.String, java.lang.Object>) (((haxe.IMap) (((haxe.IMap<java.lang.String, java.lang.Object>) (_g2) )) )) ), ((haxe.root.Array<haxe.IMap<java.lang.String, java.lang.Object>>) (((haxe.root.Array) (new haxe.root.Array<haxe.IMap<java.lang.String, java.lang.Object>>(new haxe.IMap[]{((haxe.IMap<java.lang.String, java.lang.Object>) (_g3) ), ((haxe.IMap<java.lang.String, java.lang.Object>) (_g4) )})) )) ))) )) );
			//line 90 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.same(3, ((haxe.root.Array<java.lang.String>) (((haxe.root.Array) (thx.Iterators.toArray(((java.lang.Object) (result3.keys()) ))) )) ).length, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testMerge"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (90) )) )}));
			//line 91 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.same(1, result3.get("key1"), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testMerge"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (91) )) )}));
			//line 92 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.same(2, result3.get("key2"), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testMerge"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (92) )) )}));
			//line 93 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.same(3, result3.get("key3"), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testMerge"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (93) )) )}));
			//line 94 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.same(3, ((haxe.root.Array<java.lang.String>) (((haxe.root.Array) (thx.Iterators.toArray(((java.lang.Object) (_g2.keys()) ))) )) ).length, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testMerge"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (94) )) )}));
			//line 95 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.same(1, ((java.lang.Object) (_g2.get("key1")) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testMerge"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (95) )) )}));
			//line 96 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.same(2, ((java.lang.Object) (_g2.get("key2")) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testMerge"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (96) )) )}));
			//line 97 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.same(3, ((java.lang.Object) (_g2.get("key3")) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testMerge"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (97) )) )}));
			//line 98 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.same(2, ((haxe.root.Array<java.lang.String>) (((haxe.root.Array) (thx.Iterators.toArray(((java.lang.Object) (_g3.keys()) ))) )) ).length, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testMerge"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (98) )) )}));
			//line 99 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.same(2, ((java.lang.Object) (_g3.get("key2")) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testMerge"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (99) )) )}));
			//line 100 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.same(2, ((java.lang.Object) (_g3.get("key3")) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testMerge"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (100) )) )}));
			//line 101 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.same(1, ((haxe.root.Array<java.lang.String>) (((haxe.root.Array) (thx.Iterators.toArray(((java.lang.Object) (_g4.keys()) ))) )) ).length, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testMerge"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (101) )) )}));
			//line 102 "/shared/core/test/thx/TestMaps.hx"
			utest.Assert.same(3, ((java.lang.Object) (_g4.get("key3")) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestMaps", "TestMaps.hx", "testMerge"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (102) )) )}));
		}
		
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 9 "/shared/core/test/thx/TestMaps.hx"
		{
			//line 9 "/shared/core/test/thx/TestMaps.hx"
			boolean __temp_executeDef1 = true;
			//line 9 "/shared/core/test/thx/TestMaps.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 9 "/shared/core/test/thx/TestMaps.hx"
					if (field.equals("x")) 
					{
						//line 9 "/shared/core/test/thx/TestMaps.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestMaps.hx"
						this.x = ((int) (value) );
						//line 9 "/shared/core/test/thx/TestMaps.hx"
						return value;
					}
					
					//line 9 "/shared/core/test/thx/TestMaps.hx"
					break;
				}
				
				
			}
			
			//line 9 "/shared/core/test/thx/TestMaps.hx"
			if (__temp_executeDef1) 
			{
				//line 9 "/shared/core/test/thx/TestMaps.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 9 "/shared/core/test/thx/TestMaps.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 9 "/shared/core/test/thx/TestMaps.hx"
		{
			//line 9 "/shared/core/test/thx/TestMaps.hx"
			boolean __temp_executeDef1 = true;
			//line 9 "/shared/core/test/thx/TestMaps.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 9 "/shared/core/test/thx/TestMaps.hx"
					if (field.equals("x")) 
					{
						//line 9 "/shared/core/test/thx/TestMaps.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestMaps.hx"
						this.x = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 9 "/shared/core/test/thx/TestMaps.hx"
						return value;
					}
					
					//line 9 "/shared/core/test/thx/TestMaps.hx"
					break;
				}
				
				
			}
			
			//line 9 "/shared/core/test/thx/TestMaps.hx"
			if (__temp_executeDef1) 
			{
				//line 9 "/shared/core/test/thx/TestMaps.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 9 "/shared/core/test/thx/TestMaps.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 9 "/shared/core/test/thx/TestMaps.hx"
		{
			//line 9 "/shared/core/test/thx/TestMaps.hx"
			boolean __temp_executeDef1 = true;
			//line 9 "/shared/core/test/thx/TestMaps.hx"
			switch (field.hashCode())
			{
				case -1197180218:
				{
					//line 9 "/shared/core/test/thx/TestMaps.hx"
					if (field.equals("testMerge")) 
					{
						//line 9 "/shared/core/test/thx/TestMaps.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestMaps.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testMerge")) );
					}
					
					//line 9 "/shared/core/test/thx/TestMaps.hx"
					break;
				}
				
				
				case 120:
				{
					//line 9 "/shared/core/test/thx/TestMaps.hx"
					if (field.equals("x")) 
					{
						//line 9 "/shared/core/test/thx/TestMaps.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestMaps.hx"
						return this.x;
					}
					
					//line 9 "/shared/core/test/thx/TestMaps.hx"
					break;
				}
				
				
				case 1355582201:
				{
					//line 9 "/shared/core/test/thx/TestMaps.hx"
					if (field.equals("testGetOption")) 
					{
						//line 9 "/shared/core/test/thx/TestMaps.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestMaps.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testGetOption")) );
					}
					
					//line 9 "/shared/core/test/thx/TestMaps.hx"
					break;
				}
				
				
				case 1757244637:
				{
					//line 9 "/shared/core/test/thx/TestMaps.hx"
					if (field.equals("testTuples")) 
					{
						//line 9 "/shared/core/test/thx/TestMaps.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestMaps.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testTuples")) );
					}
					
					//line 9 "/shared/core/test/thx/TestMaps.hx"
					break;
				}
				
				
				case 1795922004:
				{
					//line 9 "/shared/core/test/thx/TestMaps.hx"
					if (field.equals("testValues")) 
					{
						//line 9 "/shared/core/test/thx/TestMaps.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestMaps.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testValues")) );
					}
					
					//line 9 "/shared/core/test/thx/TestMaps.hx"
					break;
				}
				
				
			}
			
			//line 9 "/shared/core/test/thx/TestMaps.hx"
			if (__temp_executeDef1) 
			{
				//line 9 "/shared/core/test/thx/TestMaps.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 9 "/shared/core/test/thx/TestMaps.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 9 "/shared/core/test/thx/TestMaps.hx"
		{
			//line 9 "/shared/core/test/thx/TestMaps.hx"
			boolean __temp_executeDef1 = true;
			//line 9 "/shared/core/test/thx/TestMaps.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 9 "/shared/core/test/thx/TestMaps.hx"
					if (field.equals("x")) 
					{
						//line 9 "/shared/core/test/thx/TestMaps.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestMaps.hx"
						return ((double) (this.x) );
					}
					
					//line 9 "/shared/core/test/thx/TestMaps.hx"
					break;
				}
				
				
			}
			
			//line 9 "/shared/core/test/thx/TestMaps.hx"
			if (__temp_executeDef1) 
			{
				//line 9 "/shared/core/test/thx/TestMaps.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 9 "/shared/core/test/thx/TestMaps.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 9 "/shared/core/test/thx/TestMaps.hx"
		{
			//line 9 "/shared/core/test/thx/TestMaps.hx"
			boolean __temp_executeDef1 = true;
			//line 9 "/shared/core/test/thx/TestMaps.hx"
			switch (field.hashCode())
			{
				case -1197180218:
				{
					//line 9 "/shared/core/test/thx/TestMaps.hx"
					if (field.equals("testMerge")) 
					{
						//line 9 "/shared/core/test/thx/TestMaps.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestMaps.hx"
						this.testMerge();
					}
					
					//line 9 "/shared/core/test/thx/TestMaps.hx"
					break;
				}
				
				
				case 1757244637:
				{
					//line 9 "/shared/core/test/thx/TestMaps.hx"
					if (field.equals("testTuples")) 
					{
						//line 9 "/shared/core/test/thx/TestMaps.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestMaps.hx"
						this.testTuples();
					}
					
					//line 9 "/shared/core/test/thx/TestMaps.hx"
					break;
				}
				
				
				case 1355582201:
				{
					//line 9 "/shared/core/test/thx/TestMaps.hx"
					if (field.equals("testGetOption")) 
					{
						//line 9 "/shared/core/test/thx/TestMaps.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestMaps.hx"
						this.testGetOption();
					}
					
					//line 9 "/shared/core/test/thx/TestMaps.hx"
					break;
				}
				
				
				case 1795922004:
				{
					//line 9 "/shared/core/test/thx/TestMaps.hx"
					if (field.equals("testValues")) 
					{
						//line 9 "/shared/core/test/thx/TestMaps.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestMaps.hx"
						this.testValues();
					}
					
					//line 9 "/shared/core/test/thx/TestMaps.hx"
					break;
				}
				
				
			}
			
			//line 9 "/shared/core/test/thx/TestMaps.hx"
			if (__temp_executeDef1) 
			{
				//line 9 "/shared/core/test/thx/TestMaps.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 9 "/shared/core/test/thx/TestMaps.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 9 "/shared/core/test/thx/TestMaps.hx"
		baseArr.push("x");
		//line 9 "/shared/core/test/thx/TestMaps.hx"
		{
			//line 9 "/shared/core/test/thx/TestMaps.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


