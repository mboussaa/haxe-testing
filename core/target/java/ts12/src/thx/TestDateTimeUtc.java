// Generated by Haxe 3.3.0
package thx;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestDateTimeUtc extends haxe.lang.HxObject
{
	public TestDateTimeUtc(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestDateTimeUtc(int i)
	{
		//line 14 "/shared/core/test/thx/TestDateTimeUtc.hx"
		thx.TestDateTimeUtc.__hx_ctor_thx_TestDateTimeUtc(this, i);
	}
	
	
	public static void __hx_ctor_thx_TestDateTimeUtc(thx.TestDateTimeUtc __temp_me122, int i)
	{
		//line 11 "/shared/core/test/thx/TestDateTimeUtc.hx"
		__temp_me122.tomorrow = thx._DateTimeUtc.DateTimeUtc_Impl_.create(2015, 7, 27, 21, 40, 30, 123);
		//line 10 "/shared/core/test/thx/TestDateTimeUtc.hx"
		__temp_me122.date = thx._DateTimeUtc.DateTimeUtc_Impl_.create(2015, 7, 26, 21, 40, 30, 0);
		//line 15 "/shared/core/test/thx/TestDateTimeUtc.hx"
		__temp_me122.x = i;
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
		return new thx.TestDateTimeUtc(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
		return new thx.TestDateTimeUtc(((int) (haxe.lang.Runtime.toInt(arr.__get(0))) ));
	}
	
	
	public long date;
	
	public long tomorrow;
	
	public int x;
	
	public void testCreate()
	{
		//line 19 "/shared/core/test/thx/TestDateTimeUtc.hx"
		int _g1 = 0;
		//line 19 "/shared/core/test/thx/TestDateTimeUtc.hx"
		int _g = this.x;
		//line 19 "/shared/core/test/thx/TestDateTimeUtc.hx"
		while (( _g1 < _g ))
		{
			//line 19 "/shared/core/test/thx/TestDateTimeUtc.hx"
			 ++ _g1;
			//line 20 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.equals(2015, thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this.date) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), ( ( "expected 2015 but got " + thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this.date) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR) ) + " for year" ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testCreate"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (20) )) )}));
			//line 21 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.equals(7, thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this.date) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH), ( ( "expected 7 but got " + thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this.date) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH) ) + " for month" ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testCreate"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (21) )) )}));
			//line 22 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.equals(26, thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this.date) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY), ( ( "expected 26 but got " + thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this.date) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY) ) + " for day" ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testCreate"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (22) )) )}));
			//line 24 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.equals(21, thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(this.date), ( ( "expected 21 but got " + thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(this.date) ) + " for hour" ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testCreate"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (24) )) )}));
			//line 25 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.equals(40, thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(this.date), ( ( "expected 40 but got " + thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(this.date) ) + " for minute" ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testCreate"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (25) )) )}));
			//line 26 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.equals(30, thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(this.date), ( ( "expected 30 but got " + thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(this.date) ) + " for second" ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testCreate"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (26) )) )}));
			//line 28 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.equals(123, thx._DateTimeUtc.DateTimeUtc_Impl_.get_millisecond(this.tomorrow), ( ( "expected 123 but got " + thx._DateTimeUtc.DateTimeUtc_Impl_.get_millisecond(this.tomorrow) ) + " for millisecond" ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testCreate"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (28) )) )}));
			//line 29 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.equals(123000, thx._DateTimeUtc.DateTimeUtc_Impl_.get_microsecond(this.tomorrow), ( ( "expected 123 but got " + thx._DateTimeUtc.DateTimeUtc_Impl_.get_microsecond(this.tomorrow) ) + " for microsecond" ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testCreate"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (29) )) )}));
			//line 30 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.equals(1230000, thx._DateTimeUtc.DateTimeUtc_Impl_.get_tickInSecond(this.tomorrow), ( ( "expected 123 but got " + thx._DateTimeUtc.DateTimeUtc_Impl_.get_tickInSecond(this.tomorrow) ) + " for tickInSecond" ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testCreate"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (30) )) )}));
			//line 32 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.equals(((int) (0) ), thx._DateTimeUtc.DateTimeUtc_Impl_.get_dayOfWeek(this.date), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testCreate"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (32) )) )}));
		}
		
	}
	
	
	public void testOverflowing()
	{
		//line 36 "/shared/core/test/thx/TestDateTimeUtc.hx"
		int _g1 = 0;
		//line 36 "/shared/core/test/thx/TestDateTimeUtc.hx"
		int _g = this.x;
		//line 36 "/shared/core/test/thx/TestDateTimeUtc.hx"
		while (( _g1 < _g ))
		{
			//line 36 "/shared/core/test/thx/TestDateTimeUtc.hx"
			 ++ _g1;
			//line 37 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.equals("2014-12-01T00:00:00Z", thx._DateTimeUtc.DateTimeUtc_Impl_.toString(thx._DateTimeUtc.DateTimeUtc_Impl_.create(2014, 12, 1, null, null, null, null)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testOverflowing"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (37) )) )}));
			//line 39 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.equals("2015-04-01T00:00:00Z", thx._DateTimeUtc.DateTimeUtc_Impl_.toString(thx._DateTimeUtc.DateTimeUtc_Impl_.create(2014, 16, 1, null, null, null, null)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testOverflowing"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (39) )) )}));
			//line 40 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.equals("2013-10-01T00:00:00Z", thx._DateTimeUtc.DateTimeUtc_Impl_.toString(thx._DateTimeUtc.DateTimeUtc_Impl_.create(2014, -2, 1, null, null, null, null)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testOverflowing"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (40) )) )}));
			//line 43 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.equals("2014-03-04T00:00:00Z", thx._DateTimeUtc.DateTimeUtc_Impl_.toString(thx._DateTimeUtc.DateTimeUtc_Impl_.create(2014, 2, 32, null, null, null, null)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testOverflowing"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (43) )) )}));
			//line 44 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.equals("2013-12-31T00:00:00Z", thx._DateTimeUtc.DateTimeUtc_Impl_.toString(thx._DateTimeUtc.DateTimeUtc_Impl_.create(2014, 1, 0, null, null, null, null)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testOverflowing"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (44) )) )}));
			//line 47 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.equals("2014-02-02T02:00:00Z", thx._DateTimeUtc.DateTimeUtc_Impl_.toString(thx._DateTimeUtc.DateTimeUtc_Impl_.create(2014, 2, 1, 26, null, null, null)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testOverflowing"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (47) )) )}));
			//line 48 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.equals("2013-12-31T23:00:00Z", thx._DateTimeUtc.DateTimeUtc_Impl_.toString(thx._DateTimeUtc.DateTimeUtc_Impl_.create(2014, 1, 1, -1, null, null, null)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testOverflowing"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (48) )) )}));
			//line 51 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.equals("2014-02-01T01:05:00Z", thx._DateTimeUtc.DateTimeUtc_Impl_.toString(thx._DateTimeUtc.DateTimeUtc_Impl_.create(2014, 2, 1, 0, 65, null, null)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testOverflowing"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (51) )) )}));
			//line 52 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.equals("2013-12-31T23:59:00Z", thx._DateTimeUtc.DateTimeUtc_Impl_.toString(thx._DateTimeUtc.DateTimeUtc_Impl_.create(2014, 1, 1, 0, -1, null, null)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testOverflowing"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (52) )) )}));
			//line 55 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.equals("2014-02-01T00:01:05Z", thx._DateTimeUtc.DateTimeUtc_Impl_.toString(thx._DateTimeUtc.DateTimeUtc_Impl_.create(2014, 2, 1, 0, 0, 65, null)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testOverflowing"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (55) )) )}));
			//line 56 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.equals("2013-12-31T23:59:59Z", thx._DateTimeUtc.DateTimeUtc_Impl_.toString(thx._DateTimeUtc.DateTimeUtc_Impl_.create(2014, 1, 1, 0, 0, -1, null)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testOverflowing"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (56) )) )}));
		}
		
	}
	
	
	public void testEquals()
	{
		//line 60 "/shared/core/test/thx/TestDateTimeUtc.hx"
		int _g1 = 0;
		//line 60 "/shared/core/test/thx/TestDateTimeUtc.hx"
		int _g = this.x;
		//line 60 "/shared/core/test/thx/TestDateTimeUtc.hx"
		while (( _g1 < _g ))
		{
			//line 60 "/shared/core/test/thx/TestDateTimeUtc.hx"
			 ++ _g1;
			//line 61 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.isTrue(( ((long) (this.date) ) == ((long) (this.date) ) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (61) )) )}));
			//line 62 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.isTrue(( ((long) (this.date) ) != ((long) (this.tomorrow) ) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (62) )) )}));
		}
		
	}
	
	
	public void testCompare()
	{
		//line 66 "/shared/core/test/thx/TestDateTimeUtc.hx"
		int _g1 = 0;
		//line 66 "/shared/core/test/thx/TestDateTimeUtc.hx"
		int _g = this.x;
		//line 66 "/shared/core/test/thx/TestDateTimeUtc.hx"
		while (( _g1 < _g ))
		{
			//line 66 "/shared/core/test/thx/TestDateTimeUtc.hx"
			 ++ _g1;
			//line 67 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long self = this.date;
			//line 67 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long that = this.date;
			//line 67 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long a = ((long) (self) );
			//line 67 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long b = ((long) (that) );
			//line 67 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.isFalse(( (( (((boolean) (( ((long) (a) ) < ((long) (b) ) )) )) ? (-1) : (( (((boolean) (( ((long) (a) ) > ((long) (b) ) )) )) ? (1) : (0) )) )) > 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (67) )) )}));
			//line 68 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long self1 = this.date;
			//line 68 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long that1 = this.date;
			//line 68 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long a1 = ((long) (self1) );
			//line 68 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long b1 = ((long) (that1) );
			//line 68 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.isTrue(( (( (((boolean) (( ((long) (a1) ) < ((long) (b1) ) )) )) ? (-1) : (( (((boolean) (( ((long) (a1) ) > ((long) (b1) ) )) )) ? (1) : (0) )) )) >= 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (68) )) )}));
			//line 69 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long self2 = this.date;
			//line 69 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long that2 = this.date;
			//line 69 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long a2 = ((long) (self2) );
			//line 69 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long b2 = ((long) (that2) );
			//line 69 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.isFalse(( (( (((boolean) (( ((long) (a2) ) < ((long) (b2) ) )) )) ? (-1) : (( (((boolean) (( ((long) (a2) ) > ((long) (b2) ) )) )) ? (1) : (0) )) )) < 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (69) )) )}));
			//line 70 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long self3 = this.date;
			//line 70 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long that3 = this.date;
			//line 70 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long a3 = ((long) (self3) );
			//line 70 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long b3 = ((long) (that3) );
			//line 70 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.isTrue(( (( (((boolean) (( ((long) (a3) ) < ((long) (b3) ) )) )) ? (-1) : (( (((boolean) (( ((long) (a3) ) > ((long) (b3) ) )) )) ? (1) : (0) )) )) <= 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (70) )) )}));
			//line 72 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long self4 = this.date;
			//line 72 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long that4 = this.tomorrow;
			//line 72 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long a4 = ((long) (self4) );
			//line 72 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long b4 = ((long) (that4) );
			//line 72 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.isFalse(( (( (((boolean) (( ((long) (a4) ) < ((long) (b4) ) )) )) ? (-1) : (( (((boolean) (( ((long) (a4) ) > ((long) (b4) ) )) )) ? (1) : (0) )) )) > 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (72) )) )}));
			//line 73 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long self5 = this.date;
			//line 73 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long that5 = this.tomorrow;
			//line 73 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long a5 = ((long) (self5) );
			//line 73 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long b5 = ((long) (that5) );
			//line 73 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.isFalse(( (( (((boolean) (( ((long) (a5) ) < ((long) (b5) ) )) )) ? (-1) : (( (((boolean) (( ((long) (a5) ) > ((long) (b5) ) )) )) ? (1) : (0) )) )) >= 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (73) )) )}));
			//line 74 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long self6 = this.date;
			//line 74 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long that6 = this.tomorrow;
			//line 74 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long a6 = ((long) (self6) );
			//line 74 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long b6 = ((long) (that6) );
			//line 74 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.isTrue(( (( (((boolean) (( ((long) (a6) ) < ((long) (b6) ) )) )) ? (-1) : (( (((boolean) (( ((long) (a6) ) > ((long) (b6) ) )) )) ? (1) : (0) )) )) < 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (74) )) )}));
			//line 75 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long self7 = this.date;
			//line 75 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long that7 = this.tomorrow;
			//line 75 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long a7 = ((long) (self7) );
			//line 75 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long b7 = ((long) (that7) );
			//line 75 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.isTrue(( (( (((boolean) (( ((long) (a7) ) < ((long) (b7) ) )) )) ? (-1) : (( (((boolean) (( ((long) (a7) ) > ((long) (b7) ) )) )) ? (1) : (0) )) )) <= 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (75) )) )}));
			//line 77 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long self8 = this.tomorrow;
			//line 77 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long that8 = this.date;
			//line 77 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long a8 = ((long) (self8) );
			//line 77 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long b8 = ((long) (that8) );
			//line 77 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.isTrue(( (( (((boolean) (( ((long) (a8) ) < ((long) (b8) ) )) )) ? (-1) : (( (((boolean) (( ((long) (a8) ) > ((long) (b8) ) )) )) ? (1) : (0) )) )) > 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (77) )) )}));
			//line 78 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long self9 = this.tomorrow;
			//line 78 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long that9 = this.date;
			//line 78 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long a9 = ((long) (self9) );
			//line 78 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long b9 = ((long) (that9) );
			//line 78 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.isTrue(( (( (((boolean) (( ((long) (a9) ) < ((long) (b9) ) )) )) ? (-1) : (( (((boolean) (( ((long) (a9) ) > ((long) (b9) ) )) )) ? (1) : (0) )) )) >= 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (78) )) )}));
			//line 79 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long self10 = this.tomorrow;
			//line 79 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long that10 = this.date;
			//line 79 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long a10 = ((long) (self10) );
			//line 79 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long b10 = ((long) (that10) );
			//line 79 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.isFalse(( (( (((boolean) (( ((long) (a10) ) < ((long) (b10) ) )) )) ? (-1) : (( (((boolean) (( ((long) (a10) ) > ((long) (b10) ) )) )) ? (1) : (0) )) )) < 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (79) )) )}));
			//line 80 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long self11 = this.tomorrow;
			//line 80 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long that11 = this.date;
			//line 80 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long a11 = ((long) (self11) );
			//line 80 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long b11 = ((long) (that11) );
			//line 80 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.isFalse(( (( (((boolean) (( ((long) (a11) ) < ((long) (b11) ) )) )) ? (-1) : (( (((boolean) (( ((long) (a11) ) > ((long) (b11) ) )) )) ? (1) : (0) )) )) <= 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (80) )) )}));
		}
		
	}
	
	
	public void testFromToDate()
	{
		//line 84 "/shared/core/test/thx/TestDateTimeUtc.hx"
		int _g1 = 0;
		//line 84 "/shared/core/test/thx/TestDateTimeUtc.hx"
		int _g = this.x;
		//line 84 "/shared/core/test/thx/TestDateTimeUtc.hx"
		while (( _g1 < _g ))
		{
			//line 84 "/shared/core/test/thx/TestDateTimeUtc.hx"
			 ++ _g1;
			//line 85 "/shared/core/test/thx/TestDateTimeUtc.hx"
			haxe.root.Date d = haxe.root.Date.fromTime(thx.Int64s.toFloat(((long) (( (((long) (( ((long) (this.date) ) - ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.unixEpochTicks) ) )) )) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) )) )));
			//line 86 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.isTrue(( ((long) (this.date) ) == ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.fromDate(d)) ) ), ( ( ( "expected " + thx._DateTimeUtc.DateTimeUtc_Impl_.toString(this.date) ) + " but got " ) + thx._DateTimeUtc.DateTimeUtc_Impl_.toString(thx._DateTimeUtc.DateTimeUtc_Impl_.fromDate(d)) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testFromToDate"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (86) )) )}));
		}
		
	}
	
	
	public void testFromToTime()
	{
		//line 90 "/shared/core/test/thx/TestDateTimeUtc.hx"
		int _g1 = 0;
		//line 90 "/shared/core/test/thx/TestDateTimeUtc.hx"
		int _g = this.x;
		//line 90 "/shared/core/test/thx/TestDateTimeUtc.hx"
		while (( _g1 < _g ))
		{
			//line 90 "/shared/core/test/thx/TestDateTimeUtc.hx"
			 ++ _g1;
			//line 91 "/shared/core/test/thx/TestDateTimeUtc.hx"
			double d = thx.Int64s.toFloat(((long) (( (((long) (( ((long) (this.date) ) - ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.unixEpochTicks) ) )) )) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) )) ));
			//line 91 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long date2 = thx._DateTimeUtc.DateTimeUtc_Impl_.fromTime(d);
			//line 93 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.isTrue(( ((long) (this.date) ) == ((long) (date2) ) ), ( ( ( "expected " + thx._DateTimeUtc.DateTimeUtc_Impl_.toString(this.date) ) + " but got " ) + thx._DateTimeUtc.DateTimeUtc_Impl_.toString(date2) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testFromToTime"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (93) )) )}));
		}
		
	}
	
	
	public void testFromToString()
	{
		//line 97 "/shared/core/test/thx/TestDateTimeUtc.hx"
		int _g1 = 0;
		//line 97 "/shared/core/test/thx/TestDateTimeUtc.hx"
		int _g = this.x;
		//line 97 "/shared/core/test/thx/TestDateTimeUtc.hx"
		while (( _g1 < _g ))
		{
			//line 97 "/shared/core/test/thx/TestDateTimeUtc.hx"
			 ++ _g1;
			//line 98 "/shared/core/test/thx/TestDateTimeUtc.hx"
			java.lang.String d = thx._DateTimeUtc.DateTimeUtc_Impl_.toString(this.date);
			//line 99 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.isTrue(( ((long) (this.date) ) == ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.fromString(d)) ) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testFromToString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (99) )) )}));
			//line 101 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.equals("-1-07-27T00:00:00Z", thx._DateTimeUtc.DateTimeUtc_Impl_.toString(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("0-06-07")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testFromToString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (101) )) )}));
			//line 102 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.equals("-1-06-07T00:00:00Z", thx._DateTimeUtc.DateTimeUtc_Impl_.toString(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("-1-06-07")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testFromToString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (102) )) )}));
			//line 103 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.equals("1-06-07T00:00:00Z", thx._DateTimeUtc.DateTimeUtc_Impl_.toString(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("1-06-07")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testFromToString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (103) )) )}));
			//line 104 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.equals("-2014-01-01T00:00:00Z", thx._DateTimeUtc.DateTimeUtc_Impl_.toString(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("-2014-01-01")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testFromToString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (104) )) )}));
		}
		
	}
	
	
	public void testAdd()
	{
		//line 108 "/shared/core/test/thx/TestDateTimeUtc.hx"
		int _g1 = 0;
		//line 108 "/shared/core/test/thx/TestDateTimeUtc.hx"
		int _g = this.x;
		//line 108 "/shared/core/test/thx/TestDateTimeUtc.hx"
		while (( _g1 < _g ))
		{
			//line 108 "/shared/core/test/thx/TestDateTimeUtc.hx"
			 ++ _g1;
			//line 109 "/shared/core/test/thx/TestDateTimeUtc.hx"
			long d = thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.addMonths(thx._DateTimeUtc.DateTimeUtc_Impl_.addMonths(((long) (this.date) ), 24), 9)) ), ((double) (10) ), thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerDay)) ), ((double) (7) ), thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerHour)) ), ((double) (10) ), thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerMinute)) ), ((double) (7) ), thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerSecond)) ), ((double) (7) ), 1);
			//line 118 "/shared/core/test/thx/TestDateTimeUtc.hx"
			utest.Assert.isTrue(( ((long) (d) ) == ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2018-05-07 04:50:37.007")) ) ), ( ( ( "expected " + "2018-05-07 04:50:37.007" ) + " but got " ) + thx._DateTimeUtc.DateTimeUtc_Impl_.toString(d) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testAdd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (118) )) )}));
		}
		
	}
	
	
	public void testSnapNext()
	{
		//line 122 "/shared/core/test/thx/TestDateTimeUtc.hx"
		int _g1 = 0;
		//line 122 "/shared/core/test/thx/TestDateTimeUtc.hx"
		int _g = this.x;
		//line 122 "/shared/core/test/thx/TestDateTimeUtc.hx"
		while (( _g1 < _g ))
		{
			//line 122 "/shared/core/test/thx/TestDateTimeUtc.hx"
			 ++ _g1;
			//line 123 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapNext(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:07:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:06:10"), thx.TimePeriod.Minute, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (123) )) )}));
			//line 124 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapNext(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:06:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:05:50"), thx.TimePeriod.Minute, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (124) )) )}));
			//line 125 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapNext(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 11:00:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:10:10"), thx.TimePeriod.Hour, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (125) )) )}));
			//line 126 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapNext(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:00:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 09:50:10"), thx.TimePeriod.Hour, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (126) )) )}));
			//line 127 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapNext(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-02 00:00:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:00:00"), thx.TimePeriod.Day, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (127) )) )}));
			//line 128 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapNext(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 00:00:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2013-12-31 20:00:00"), thx.TimePeriod.Day, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (128) )) )}));
			//line 129 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapNext(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-21 00:00:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-17 11:00:00"), thx.TimePeriod.Week, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (129) )) )}));
			//line 130 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapNext(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-21 00:00:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-18 00:00:00"), thx.TimePeriod.Week, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (130) )) )}));
			//line 131 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapNext(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2015-01-01 00:00:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-12 00:00:00"), thx.TimePeriod.Month, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (131) )) )}));
			//line 132 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapNext(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2015-01-01 00:00:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-18 00:00:00"), thx.TimePeriod.Month, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (132) )) )}));
			//line 133 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapNext(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2015-01-01 00:00:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-05-12 00:00:00"), thx.TimePeriod.Year, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (133) )) )}));
			//line 134 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapNext(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2015-01-01 00:00:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-18 00:00:00"), thx.TimePeriod.Year, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (134) )) )}));
		}
		
	}
	
	
	public void testSnapPrev()
	{
		//line 138 "/shared/core/test/thx/TestDateTimeUtc.hx"
		int _g1 = 0;
		//line 138 "/shared/core/test/thx/TestDateTimeUtc.hx"
		int _g = this.x;
		//line 138 "/shared/core/test/thx/TestDateTimeUtc.hx"
		while (( _g1 < _g ))
		{
			//line 138 "/shared/core/test/thx/TestDateTimeUtc.hx"
			 ++ _g1;
			//line 139 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapPrev(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:06:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:06:10"), thx.TimePeriod.Minute, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (139) )) )}));
			//line 140 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapPrev(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:05:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:05:50"), thx.TimePeriod.Minute, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (140) )) )}));
			//line 141 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapPrev(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:00:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:10:10"), thx.TimePeriod.Hour, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (141) )) )}));
			//line 142 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapPrev(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 09:00:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 09:50:10"), thx.TimePeriod.Hour, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (142) )) )}));
			//line 143 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapPrev(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 00:00:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:00:00"), thx.TimePeriod.Day, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (143) )) )}));
			//line 144 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapPrev(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2013-12-31 00:00:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2013-12-31 20:00:00"), thx.TimePeriod.Day, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (144) )) )}));
			//line 145 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapPrev(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-14 00:00:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-17 11:00:00"), thx.TimePeriod.Week, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (145) )) )}));
			//line 146 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapPrev(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-14 00:00:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-18 00:00:00"), thx.TimePeriod.Week, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (146) )) )}));
			//line 147 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapPrev(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-01 00:00:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-12 00:00:00"), thx.TimePeriod.Month, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (147) )) )}));
			//line 148 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapPrev(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-01 00:00:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-18 00:00:00"), thx.TimePeriod.Month, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (148) )) )}));
			//line 149 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapPrev(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 00:00:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-05-12 00:00:00"), thx.TimePeriod.Year, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (149) )) )}));
			//line 150 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapPrev(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 00:00:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-18 00:00:00"), thx.TimePeriod.Year, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (150) )) )}));
		}
		
	}
	
	
	public void testSnapTo()
	{
		//line 154 "/shared/core/test/thx/TestDateTimeUtc.hx"
		int _g1 = 0;
		//line 154 "/shared/core/test/thx/TestDateTimeUtc.hx"
		int _g = this.x;
		//line 154 "/shared/core/test/thx/TestDateTimeUtc.hx"
		while (( _g1 < _g ))
		{
			//line 154 "/shared/core/test/thx/TestDateTimeUtc.hx"
			 ++ _g1;
			//line 155 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapTo(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:06:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:06:10"), thx.TimePeriod.Minute, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (155) )) )}));
			//line 156 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapTo(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:06:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:05:50"), thx.TimePeriod.Minute, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (156) )) )}));
			//line 157 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapTo(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:00:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:10:10"), thx.TimePeriod.Hour, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (157) )) )}));
			//line 158 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapTo(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:00:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 09:50:10"), thx.TimePeriod.Hour, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (158) )) )}));
			//line 159 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapTo(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 00:00:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:00:00"), thx.TimePeriod.Day, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (159) )) )}));
			//line 160 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapTo(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 00:00:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2013-12-31 20:00:00"), thx.TimePeriod.Day, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (160) )) )}));
			//line 161 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapTo(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-14 00:00:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-17 11:00:00"), thx.TimePeriod.Week, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (161) )) )}));
			//line 162 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapTo(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-21 00:00:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-18 00:00:00"), thx.TimePeriod.Week, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (162) )) )}));
			//line 163 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapTo(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-01 00:00:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-12 00:00:00"), thx.TimePeriod.Month, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (163) )) )}));
			//line 164 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapTo(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2015-01-01 00:00:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-18 00:00:00"), thx.TimePeriod.Month, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (164) )) )}));
			//line 165 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapTo(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 00:00:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-05-12 00:00:00"), thx.TimePeriod.Year, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (165) )) )}));
			//line 166 "/shared/core/test/thx/TestDateTimeUtc.hx"
			this.assertSnapTo(thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2015-01-01 00:00:00"), thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-18 00:00:00"), thx.TimePeriod.Year, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTimeUtc", "TestDateTimeUtc.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (166) )) )}));
		}
		
	}
	
	
	public void assertSnapTo(long expected, long date, thx.TimePeriod period, java.lang.Object pos)
	{
		//line 170 "/shared/core/test/thx/TestDateTimeUtc.hx"
		long t = thx._DateTimeUtc.DateTimeUtc_Impl_.snapTo(date, period);
		//line 171 "/shared/core/test/thx/TestDateTimeUtc.hx"
		utest.Assert.isTrue(( ((long) (expected) ) == ((long) (t) ) ), ( ( ( ( ( ( ( "expected " + thx._DateTimeUtc.DateTimeUtc_Impl_.toString(date) ) + " to snap to " ) + thx._DateTimeUtc.DateTimeUtc_Impl_.toString(expected) ) + " for " ) + haxe.root.Std.string(period) ) + " but it is " ) + thx._DateTimeUtc.DateTimeUtc_Impl_.toString(t) ), pos);
	}
	
	
	public void assertSnapPrev(long expected, long date, thx.TimePeriod period, java.lang.Object pos)
	{
		//line 179 "/shared/core/test/thx/TestDateTimeUtc.hx"
		long t = thx._DateTimeUtc.DateTimeUtc_Impl_.snapPrev(date, period);
		//line 180 "/shared/core/test/thx/TestDateTimeUtc.hx"
		utest.Assert.isTrue(( ((long) (expected) ) == ((long) (t) ) ), ( ( ( ( ( ( ( "expected " + thx._DateTimeUtc.DateTimeUtc_Impl_.toString(date) ) + " to snap before " ) + thx._DateTimeUtc.DateTimeUtc_Impl_.toString(expected) ) + " for " ) + haxe.root.Std.string(period) ) + " but it is " ) + thx._DateTimeUtc.DateTimeUtc_Impl_.toString(t) ), pos);
	}
	
	
	public void assertSnapNext(long expected, long date, thx.TimePeriod period, java.lang.Object pos)
	{
		//line 188 "/shared/core/test/thx/TestDateTimeUtc.hx"
		long t = thx._DateTimeUtc.DateTimeUtc_Impl_.snapNext(date, period);
		//line 189 "/shared/core/test/thx/TestDateTimeUtc.hx"
		utest.Assert.isTrue(( ((long) (expected) ) == ((long) (t) ) ), ( ( ( ( ( ( ( "expected " + thx._DateTimeUtc.DateTimeUtc_Impl_.toString(date) ) + " to snap after " ) + thx._DateTimeUtc.DateTimeUtc_Impl_.toString(expected) ) + " for " ) + haxe.root.Std.string(period) ) + " but it is " ) + thx._DateTimeUtc.DateTimeUtc_Impl_.toString(t) ), pos);
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
		{
			//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
			boolean __temp_executeDef1 = true;
			//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("x")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						this.x = ((int) (value) );
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						return value;
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
			}
			
			//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
			if (__temp_executeDef1) 
			{
				//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
		{
			//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
			boolean __temp_executeDef1 = true;
			//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("x")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						this.x = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						return value;
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
				case 3076014:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("date")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						this.date = haxe.lang.Runtime.toLong(value);
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						return value;
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
				case -1037172987:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("tomorrow")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						this.tomorrow = haxe.lang.Runtime.toLong(value);
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						return value;
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
			}
			
			//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
			if (__temp_executeDef1) 
			{
				//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
		{
			//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
			boolean __temp_executeDef1 = true;
			//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
			switch (field.hashCode())
			{
				case -110613693:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("assertSnapNext")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "assertSnapNext")) );
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
				case 3076014:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("date")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						return this.date;
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
				case -110542205:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("assertSnapPrev")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "assertSnapPrev")) );
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
				case -1037172987:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("tomorrow")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						return this.tomorrow;
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
				case -679443765:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("assertSnapTo")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "assertSnapTo")) );
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
				case 120:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("x")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						return this.x;
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
				case 1721707287:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("testSnapTo")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSnapTo")) );
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
				case 1267440686:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("testCreate")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCreate")) );
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
				case 998180815:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("testSnapPrev")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSnapPrev")) );
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
				case -1789558610:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("testOverflowing")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testOverflowing")) );
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
				case 998109327:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("testSnapNext")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSnapNext")) );
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
				case 1324251889:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("testEquals")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testEquals")) );
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
				case -1422484817:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("testAdd")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testAdd")) );
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
				case 557885427:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("testCompare")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCompare")) );
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
				case 1124127208:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("testFromToString")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFromToString")) );
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
				case 1466624837:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("testFromToDate")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFromToDate")) );
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
				case 1467108964:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("testFromToTime")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFromToTime")) );
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
			}
			
			//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
			if (__temp_executeDef1) 
			{
				//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
		{
			//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
			boolean __temp_executeDef1 = true;
			//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("x")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						return ((double) (this.x) );
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
			}
			
			//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
			if (__temp_executeDef1) 
			{
				//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
		{
			//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
			boolean __temp_executeDef1 = true;
			//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
			switch (field.hashCode())
			{
				case -110613693:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("assertSnapNext")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						this.assertSnapNext(haxe.lang.Runtime.toLong(dynargs.__get(0)), haxe.lang.Runtime.toLong(dynargs.__get(1)), ((thx.TimePeriod) (dynargs.__get(2)) ), dynargs.__get(3));
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
				case 1267440686:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("testCreate")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						this.testCreate();
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
				case -110542205:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("assertSnapPrev")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						this.assertSnapPrev(haxe.lang.Runtime.toLong(dynargs.__get(0)), haxe.lang.Runtime.toLong(dynargs.__get(1)), ((thx.TimePeriod) (dynargs.__get(2)) ), dynargs.__get(3));
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
				case -1789558610:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("testOverflowing")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						this.testOverflowing();
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
				case -679443765:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("assertSnapTo")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						this.assertSnapTo(haxe.lang.Runtime.toLong(dynargs.__get(0)), haxe.lang.Runtime.toLong(dynargs.__get(1)), ((thx.TimePeriod) (dynargs.__get(2)) ), dynargs.__get(3));
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
				case 1324251889:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("testEquals")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						this.testEquals();
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
				case 1721707287:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("testSnapTo")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						this.testSnapTo();
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
				case 557885427:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("testCompare")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						this.testCompare();
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
				case 998180815:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("testSnapPrev")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						this.testSnapPrev();
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
				case 1466624837:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("testFromToDate")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						this.testFromToDate();
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
				case 998109327:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("testSnapNext")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						this.testSnapNext();
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
				case 1467108964:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("testFromToTime")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						this.testFromToTime();
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
				case -1422484817:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("testAdd")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						this.testAdd();
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
				case 1124127208:
				{
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					if (field.equals("testFromToString")) 
					{
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
						this.testFromToString();
					}
					
					//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
					break;
				}
				
				
			}
			
			//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
			if (__temp_executeDef1) 
			{
				//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
		baseArr.push("x");
		//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
		baseArr.push("tomorrow");
		//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
		baseArr.push("date");
		//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
		{
			//line 9 "/shared/core/test/thx/TestDateTimeUtc.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


