// Generated by Haxe 3.3.0
package thx;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Strings extends haxe.lang.HxObject
{
	static
	{
		//line 128 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		thx.Strings.order = ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) );
		//line 270 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		thx.Strings.HASCODE_MAX = ((int) (2147483647) );
		//line 271 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		thx.Strings.HASCODE_MUL = ((int) (31) );
		//line 668 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		java.lang.Object __temp_stmt2 = null;
		//line 668 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		{
			//line 668 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			haxe.lang.Function __temp_odecl1 = ( (( thx.Strings_Anon_668__Fun.__hx_current != null )) ? (thx.Strings_Anon_668__Fun.__hx_current) : (thx.Strings_Anon_668__Fun.__hx_current = ((thx.Strings_Anon_668__Fun) (new thx.Strings_Anon_668__Fun()) )) );
			//line 668 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			__temp_stmt2 = new haxe.lang.DynamicObject(new java.lang.String[]{"append", "zero"}, new java.lang.Object[]{__temp_odecl1, ""}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 667 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		thx.Strings.monoid = ((java.lang.Object) (__temp_stmt2) );
		//line 670 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		thx.Strings.UCWORDS = new haxe.root.EReg("[^a-zA-Z]([a-z])", "g");
		//line 671 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		thx.Strings.IS_BREAKINGWHITESPACE = new haxe.root.EReg("[^\t\n\r ]", "");
		//line 672 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		thx.Strings.IS_ALPHA = new haxe.root.EReg("[^a-zA-Z]", "");
		//line 674 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		thx.Strings.UCWORDSWS = new haxe.root.EReg("[ \t\r\n][a-z]", "g");
		//line 675 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		thx.Strings.ALPHANUM = new haxe.root.EReg("^[a-z0-9]+$", "i");
		//line 676 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		thx.Strings.DIGITS = new haxe.root.EReg("^[0-9]+$", "");
		//line 677 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		thx.Strings.STRIPTAGS = new haxe.root.EReg("</?[a-z]+[^>]*>", "gi");
		//line 679 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		thx.Strings.WSG = new haxe.root.EReg("[ \t\r\n]+", "g");
		//line 680 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		thx.Strings.SPLIT_LINES = new haxe.root.EReg("\r\n|\n\r|\n|\r", "g");
		//line 681 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		thx.Strings.CANONICALIZE_LINES = new haxe.root.EReg("\r\n|\n\r|\r", "g");
	}
	
	public Strings(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Strings()
	{
		//line 14 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		thx.Strings.__hx_ctor_thx_Strings(this);
	}
	
	
	public static void __hx_ctor_thx_Strings(thx.Strings __temp_me113)
	{
	}
	
	
	public static java.lang.String after(java.lang.String value, java.lang.String searchFor)
	{
		//line 21 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		int pos = haxe.lang.StringExt.indexOf(value, searchFor, null);
		//line 22 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		if (( pos < 0 )) 
		{
			//line 23 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return "";
		}
		else
		{
			//line 25 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return haxe.lang.StringExt.substring(value, ( pos + searchFor.length() ), null);
		}
		
	}
	
	
	public static java.lang.String afterLast(java.lang.String value, java.lang.String searchFor)
	{
		//line 34 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		int pos = haxe.lang.StringExt.lastIndexOf(value, searchFor, null);
		//line 35 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		if (( pos < 0 )) 
		{
			//line 36 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return "";
		}
		else
		{
			//line 38 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return haxe.lang.StringExt.substring(value, ( pos + searchFor.length() ), null);
		}
		
	}
	
	
	public static java.lang.String capitalize(java.lang.String s)
	{
		//line 45 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return ( haxe.lang.StringExt.substr(s, 0, 1).toUpperCase() + haxe.lang.StringExt.substr(s, 1, ( s.length() - 1 )) );
	}
	
	
	public static java.lang.String capitalizeWords(java.lang.String value, java.lang.Object whiteSpaceOnly)
	{
		//line 52 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		java.lang.Object __temp_whiteSpaceOnly108 = ( (haxe.lang.Runtime.eq(whiteSpaceOnly, null)) ? (((java.lang.Object) (false) )) : (whiteSpaceOnly) );
		//line 52 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		if (haxe.lang.Runtime.toBool((__temp_whiteSpaceOnly108))) 
		{
			//line 56 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return thx.Strings.UCWORDSWS.map(( haxe.lang.StringExt.substr(value, 0, 1).toUpperCase() + haxe.lang.StringExt.substr(value, 1, ( value.length() - 1 )) ), ((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "upperMatch")) ));
		}
		else
		{
			//line 59 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return thx.Strings.UCWORDS.map(( haxe.lang.StringExt.substr(value, 0, 1).toUpperCase() + haxe.lang.StringExt.substr(value, 1, ( value.length() - 1 )) ), ((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "upperMatch")) ));
		}
		
	}
	
	
	public static java.lang.String canonicalizeNewlines(java.lang.String value)
	{
		//line 67 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return thx.Strings.CANONICALIZE_LINES.replace(value, "\n");
	}
	
	
	public static int caseInsensitiveCompare(java.lang.String a, java.lang.String b)
	{
		//line 73 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		if (( ( null == a ) && ( null == b ) )) 
		{
			//line 74 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return 0;
		}
		
		//line 75 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		if (( null == a )) 
		{
			//line 76 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return -1;
		}
		else
		{
			//line 77 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			if (( null == b )) 
			{
				//line 78 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
				return 1;
			}
			
		}
		
		//line 79 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return haxe.Utf8.compare(a.toLowerCase(), b.toLowerCase());
	}
	
	
	public static boolean caseInsensitiveEndsWith(java.lang.String s, java.lang.String end)
	{
		//line 86 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return s.toLowerCase().endsWith(end.toLowerCase());
	}
	
	
	public static boolean caseInsensitiveEndsWithAny(java.lang.String s, haxe.root.Array<java.lang.String> values)
	{
		//line 92 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return thx.Strings.endsWithAny(s.toLowerCase(), ((haxe.root.Array<java.lang.String>) (((haxe.root.Array) (values.map(((haxe.lang.Function) (( (( thx.Strings_caseInsensitiveEndsWithAny_92__Fun.__hx_current != null )) ? (thx.Strings_caseInsensitiveEndsWithAny_92__Fun.__hx_current) : (thx.Strings_caseInsensitiveEndsWithAny_92__Fun.__hx_current = ((thx.Strings_caseInsensitiveEndsWithAny_92__Fun) (new thx.Strings_caseInsensitiveEndsWithAny_92__Fun()) )) )) ))) )) ));
	}
	
	
	public static boolean caseInsensitiveStartsWith(java.lang.String s, java.lang.String start)
	{
		//line 98 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return s.toLowerCase().startsWith(start.toLowerCase());
	}
	
	
	public static boolean caseInsensitiveStartsWithAny(java.lang.String s, haxe.root.Array<java.lang.String> values)
	{
		//line 104 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return thx.Strings.startsWithAny(s.toLowerCase(), ((haxe.root.Array<java.lang.String>) (((haxe.root.Array) (values.map(((haxe.lang.Function) (( (( thx.Strings_caseInsensitiveStartsWithAny_104__Fun.__hx_current != null )) ? (thx.Strings_caseInsensitiveStartsWithAny_104__Fun.__hx_current) : (thx.Strings_caseInsensitiveStartsWithAny_104__Fun.__hx_current = ((thx.Strings_caseInsensitiveStartsWithAny_104__Fun) (new thx.Strings_caseInsensitiveStartsWithAny_104__Fun()) )) )) ))) )) ));
	}
	
	
	public static java.lang.String collapse(java.lang.String value)
	{
		//line 115 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return thx.Strings.WSG.replace(value.trim(), " ");
	}
	
	
	public static int compare(java.lang.String a, java.lang.String b)
	{
		//line 125 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return haxe.Utf8.compare(a, b);
	}
	
	
	public static haxe.lang.Function order;
	
	public static boolean caseInsensitiveContains(java.lang.String s, java.lang.String test)
	{
		//line 137 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return ( haxe.lang.StringExt.indexOf(s.toLowerCase(), test.toLowerCase(), null) >= 0 );
	}
	
	
	public static boolean contains(java.lang.String s, java.lang.String test)
	{
		//line 147 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return ( haxe.lang.StringExt.indexOf(s, test, null) >= 0 );
	}
	
	
	public static int count(java.lang.String s, java.lang.String test)
	{
		//line 154 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return ( haxe.lang.StringExt.split(s, test).length - 1 );
	}
	
	
	public static boolean caseInsensitiveContainsAny(java.lang.String s, haxe.root.Array<java.lang.String> tests)
	{
		//line 160 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		java.lang.String s1 = s;
		//line 160 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return ((boolean) (thx.Arrays.any(((haxe.root.Array<java.lang.String>) (tests) ), ((haxe.lang.Function) (new thx.Strings_caseInsensitiveContainsAny_160__Fun(s1)) ))) );
	}
	
	
	public static boolean containsAny(java.lang.String s, haxe.root.Array<java.lang.String> tests)
	{
		//line 166 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		java.lang.String s1 = s;
		//line 166 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return ((boolean) (thx.Arrays.any(((haxe.root.Array<java.lang.String>) (tests) ), ((haxe.lang.Function) (new thx.Strings_containsAny_166__Fun(s1)) ))) );
	}
	
	
	public static java.lang.String dasherize(java.lang.String s)
	{
		//line 173 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return haxe.root.StringTools.replace(s, "_", "-");
	}
	
	
	public static int diffAt(java.lang.String a, java.lang.String b)
	{
		//line 183 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		int a1 = a.length();
		//line 183 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		int b1 = b.length();
		//line 183 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		int min = ( (( a1 < b1 )) ? (a1) : (b1) );
		//line 184 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		{
			//line 184 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			int _g1 = 0;
			//line 184 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			int _g = min;
			//line 184 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			while (( _g1 < _g ))
			{
				//line 184 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
				int i = _g1++;
				//line 185 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
				if ( ! (haxe.lang.Runtime.valEq(haxe.lang.StringExt.substring(a, i, ( i + 1 )), haxe.lang.StringExt.substring(b, i, ( i + 1 )))) ) 
				{
					//line 186 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
					return i;
				}
				
			}
			
		}
		
		//line 187 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return min;
	}
	
	
	public static java.lang.String ellipsis(java.lang.String s, java.lang.Object maxlen, java.lang.String symbol)
	{
		//line 198 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		if (( symbol == null )) 
		{
			//line 198 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			symbol = "\u2026";
		}
		
		//line 198 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		java.lang.Object __temp_maxlen109 = ( (haxe.lang.Runtime.eq(maxlen, null)) ? (((java.lang.Object) (20) )) : (maxlen) );
		//line 199 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		int sl = s.length();
		//line 199 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		int symboll = symbol.length();
		//line 201 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		if (( haxe.lang.Runtime.compare(sl, __temp_maxlen109) > 0 )) 
		{
			//line 202 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			if (( haxe.lang.Runtime.compare(__temp_maxlen109, symboll) < 0 )) 
			{
				//line 203 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
				return haxe.lang.StringExt.substr(symbol, ( ((int) (symboll) ) - ((int) (haxe.lang.Runtime.toInt(__temp_maxlen109)) ) ), __temp_maxlen109);
			}
			else
			{
				//line 205 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
				return ( haxe.lang.StringExt.substr(s, 0, ( ((int) (haxe.lang.Runtime.toInt(__temp_maxlen109)) ) - ((int) (symboll) ) )) + symbol );
			}
			
		}
		else
		{
			//line 208 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return s;
		}
		
	}
	
	
	public static java.lang.String ellipsisMiddle(java.lang.String s, java.lang.Object maxlen, java.lang.String symbol)
	{
		//line 218 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		if (( symbol == null )) 
		{
			//line 218 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			symbol = "\u2026";
		}
		
		//line 218 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		java.lang.Object __temp_maxlen110 = ( (haxe.lang.Runtime.eq(maxlen, null)) ? (((java.lang.Object) (20) )) : (maxlen) );
		//line 219 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		int sl = s.length();
		//line 219 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		int symboll = symbol.length();
		//line 221 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		if (( haxe.lang.Runtime.compare(sl, __temp_maxlen110) > 0 )) 
		{
			//line 222 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			if (( haxe.lang.Runtime.compare(__temp_maxlen110, symboll) <= 0 )) 
			{
				//line 223 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
				return thx.Strings.ellipsis(s, __temp_maxlen110, symbol);
			}
			
			//line 225 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			int hll = ((int) (java.lang.Math.ceil(( ((double) ((( ((int) (haxe.lang.Runtime.toInt(__temp_maxlen110)) ) - ((int) (symboll) ) ))) ) / 2 ))) );
			//line 225 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			int hlr = ((int) (java.lang.Math.floor(( ((double) ((( ((int) (haxe.lang.Runtime.toInt(__temp_maxlen110)) ) - ((int) (symboll) ) ))) ) / 2 ))) );
			//line 227 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return ( ( haxe.lang.StringExt.substr(s, 0, hll) + symbol ) + haxe.lang.StringExt.substr(s, ( sl - hlr ), hlr) );
		}
		else
		{
			//line 229 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return s;
		}
		
	}
	
	
	public static boolean endsWithAny(java.lang.String s, java.lang.Object values)
	{
		//line 236 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return ((boolean) (thx.Iterables.any(((java.lang.Object) (values) ), ((haxe.lang.Function) (new thx.Strings_endsWithAny_236__Fun(s)) ))) );
	}
	
	
	public static java.lang.String filter(java.lang.String s, haxe.lang.Function predicate)
	{
		//line 243 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return haxe.lang.StringExt.split(s, "").filter(predicate).join("");
	}
	
	
	public static java.lang.String filterCharcode(java.lang.String s, haxe.lang.Function predicate)
	{
		//line 251 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		haxe.root.Array<java.lang.Object> codes = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.Strings.map(haxe.lang.Runtime.toString(s), ((haxe.lang.Function) (( (( thx.Strings_filterCharcode_251__Fun.__hx_current != null )) ? (thx.Strings_filterCharcode_251__Fun.__hx_current) : (thx.Strings_filterCharcode_251__Fun.__hx_current = ((thx.Strings_filterCharcode_251__Fun) (new thx.Strings_filterCharcode_251__Fun()) )) )) ))) )) ).filter(predicate)) )) );
		//line 252 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return ((haxe.root.Array<java.lang.String>) (((haxe.root.Array) (codes.map(((haxe.lang.Function) (( (( thx.Strings_filterCharcode_253__Fun.__hx_current != null )) ? (thx.Strings_filterCharcode_253__Fun.__hx_current) : (thx.Strings_filterCharcode_253__Fun.__hx_current = ((thx.Strings_filterCharcode_253__Fun) (new thx.Strings_filterCharcode_253__Fun()) )) )) ))) )) ).join("");
	}
	
	
	public static java.lang.String from(java.lang.String value, java.lang.String searchFor)
	{
		//line 263 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		int pos = haxe.lang.StringExt.indexOf(value, searchFor, null);
		//line 264 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		if (( pos < 0 )) 
		{
			//line 265 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return "";
		}
		else
		{
			//line 267 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return haxe.lang.StringExt.substring(value, pos, null);
		}
		
	}
	
	
	public static int HASCODE_MAX;
	
	public static int HASCODE_MUL;
	
	public static int hashCode(java.lang.String value)
	{
		//line 273 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		int code = 0;
		//line 274 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		{
			//line 274 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			int _g1 = 0;
			//line 274 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			int _g = value.length();
			//line 274 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			while (( _g1 < _g ))
			{
				//line 274 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
				int i = _g1++;
				//line 275 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
				int c = ((int) (haxe.lang.Runtime.toInt(haxe.lang.StringExt.charCodeAt(value, i))) );
				//line 276 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
				code = ((int) (( (( ((int) (( thx.Strings.HASCODE_MUL * code )) ) + ((int) (c) ) )) % thx.Strings.HASCODE_MAX )) );
			}
			
		}
		
		//line 278 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return ((int) (code) );
	}
	
	
	public static boolean hasContent(java.lang.String value)
	{
		//line 285 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		if (( value != null )) 
		{
			//line 285 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return ( value.length() > 0 );
		}
		else
		{
			//line 285 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return false;
		}
		
	}
	
	
	public static java.lang.String humanize(java.lang.String s)
	{
		//line 291 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return haxe.root.StringTools.replace(thx.Strings.underscore(s), "_", " ");
	}
	
	
	public static boolean isAlpha(java.lang.String s)
	{
		//line 297 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		if (( s.length() > 0 )) 
		{
			//line 297 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return  ! (thx.Strings.IS_ALPHA.match(s)) ;
		}
		else
		{
			//line 297 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return false;
		}
		
	}
	
	
	public static boolean isAlphaNum(java.lang.String value)
	{
		//line 306 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return thx.Strings.ALPHANUM.match(value);
	}
	
	
	public static boolean isBreakingWhitespace(java.lang.String value)
	{
		//line 310 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return  ! (thx.Strings.IS_BREAKINGWHITESPACE.match(value)) ;
	}
	
	
	public static boolean isLowerCase(java.lang.String value)
	{
		//line 317 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return haxe.lang.Runtime.valEq(value.toLowerCase(), value);
	}
	
	
	public static boolean isUpperCase(java.lang.String value)
	{
		//line 324 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return haxe.lang.Runtime.valEq(value.toUpperCase(), value);
	}
	
	
	public static java.lang.String ifEmpty(java.lang.String value, java.lang.String alt)
	{
		//line 330 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		if (( ( null != value ) &&  ! (haxe.lang.Runtime.valEq("", value))  )) 
		{
			//line 330 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return value;
		}
		else
		{
			//line 330 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return alt;
		}
		
	}
	
	
	public static boolean isDigitsOnly(java.lang.String value)
	{
		//line 339 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return thx.Strings.DIGITS.match(value);
	}
	
	
	public static boolean isEmpty(java.lang.String value)
	{
		//line 346 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		if (( value != null )) 
		{
			//line 346 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return haxe.lang.Runtime.valEq(value, "");
		}
		else
		{
			//line 346 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return true;
		}
		
	}
	
	
	public static java.lang.String lowerCaseFirst(java.lang.String value)
	{
		//line 352 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return ( haxe.lang.StringExt.substring(value, 0, 1).toLowerCase() + haxe.lang.StringExt.substring(value, 1, null) );
	}
	
	
	public static java.lang.String random(java.lang.String value, java.lang.Object length)
	{
		//line 358 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		int __temp_length111 = ( (haxe.lang.Runtime.eq(length, null)) ? (1) : (((int) (haxe.lang.Runtime.toInt(length)) )) );
		//line 358 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return haxe.lang.StringExt.substr(value, ((int) (java.lang.Math.floor(( (( ( value.length() - __temp_length111 ) + 1 )) * java.lang.Math.random() ))) ), __temp_length111);
	}
	
	
	public static java.lang.String randomSequence(java.lang.String seed, int length)
	{
		//line 364 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return ((haxe.root.Array<java.lang.String>) (((haxe.root.Array) (thx.Ints.range(0, length, null).map(((haxe.lang.Function) (new thx.Strings_randomSequence_364__Fun(seed)) ))) )) ).join("");
	}
	
	
	public static java.lang.String randomSequence64(int length)
	{
		//line 371 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return thx.Strings.randomSequence(haxe.crypto.Base64.CHARS, length);
	}
	
	
	public static java.lang.Object iterator(java.lang.String s)
	{
		//line 377 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return new _Array.ArrayIterator<java.lang.String>(((haxe.root.Array<java.lang.String>) (haxe.lang.StringExt.split(s, "")) ));
	}
	
	
	public static <T> haxe.root.Array<T> map(java.lang.String value, haxe.lang.Function callback)
	{
		//line 383 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return ((haxe.root.Array<T>) (((haxe.root.Array) (haxe.lang.StringExt.split(value, "").map(((haxe.lang.Function) (callback) ))) )) );
	}
	
	
	public static java.lang.String remove(java.lang.String value, java.lang.String toremove)
	{
		//line 389 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return haxe.root.StringTools.replace(value, toremove, "");
	}
	
	
	public static java.lang.String removeAfter(java.lang.String value, java.lang.String toremove)
	{
		//line 395 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		if (value.endsWith(toremove)) 
		{
			//line 395 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return haxe.lang.StringExt.substring(value, 0, ( value.length() - toremove.length() ));
		}
		else
		{
			//line 395 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return value;
		}
		
	}
	
	
	public static java.lang.String removeAt(java.lang.String value, int index, int length)
	{
		//line 401 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return ( haxe.lang.StringExt.substring(value, 0, index) + haxe.lang.StringExt.substring(value, ( index + length ), null) );
	}
	
	
	public static java.lang.String removeBefore(java.lang.String value, java.lang.String toremove)
	{
		//line 407 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		if (value.startsWith(toremove)) 
		{
			//line 407 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return haxe.lang.StringExt.substring(value, toremove.length(), null);
		}
		else
		{
			//line 407 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return value;
		}
		
	}
	
	
	public static java.lang.String removeOne(java.lang.String value, java.lang.String toremove)
	{
		//line 413 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		int pos = haxe.lang.StringExt.indexOf(value, toremove, null);
		//line 414 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		if (( pos < 0 )) 
		{
			//line 415 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return value;
		}
		
		//line 416 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return ( haxe.lang.StringExt.substring(value, 0, pos) + haxe.lang.StringExt.substring(value, ( pos + toremove.length() ), null) );
	}
	
	
	public static java.lang.String repeat(java.lang.String s, int times)
	{
		//line 427 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		haxe.root.Array<java.lang.String> _g = new haxe.root.Array<java.lang.String>(new java.lang.String[]{});
		//line 427 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		{
			//line 427 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			int _g2 = 0;
			//line 427 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			while (( _g2 < times ))
			{
				//line 427 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
				 ++ _g2;
				//line 427 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
				_g.push(s);
			}
			
		}
		
		//line 427 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return _g.join("");
	}
	
	
	public static java.lang.String reverse(java.lang.String s)
	{
		//line 433 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		haxe.root.Array<java.lang.String> arr = haxe.lang.StringExt.split(s, "");
		//line 434 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		arr.reverse();
		//line 435 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return arr.join("");
	}
	
	
	public static java.lang.String quote(java.lang.String s)
	{
		//line 442 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		if (( haxe.lang.StringExt.indexOf(s, "\"", null) < 0 )) 
		{
			//line 443 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return ( ( "\"" + s ) + "\"" );
		}
		else
		{
			//line 444 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			if (( haxe.lang.StringExt.indexOf(s, "\'", null) < 0 )) 
			{
				//line 445 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
				return ( ( "\'" + s ) + "\'" );
			}
			else
			{
				//line 447 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
				return ( ( "\"" + haxe.root.StringTools.replace(s, "\"", "\\\"") ) + "\"" );
			}
			
		}
		
	}
	
	
	public static haxe.root.Array<java.lang.String> splitOnce(java.lang.String s, java.lang.String separator)
	{
		//line 454 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		int pos = haxe.lang.StringExt.indexOf(s, separator, null);
		//line 455 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		if (( pos < 0 )) 
		{
			//line 456 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return new haxe.root.Array<java.lang.String>(new java.lang.String[]{s});
		}
		
		//line 457 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return new haxe.root.Array<java.lang.String>(new java.lang.String[]{haxe.lang.StringExt.substring(s, 0, pos), haxe.lang.StringExt.substring(s, ( pos + separator.length() ), null)});
	}
	
	
	public static boolean startsWithAny(java.lang.String s, java.lang.Object values)
	{
		//line 464 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return ((boolean) (thx.Iterables.any(((java.lang.Object) (values) ), ((haxe.lang.Function) (new thx.Strings_startsWithAny_464__Fun(s)) ))) );
	}
	
	
	public static java.lang.String stripTags(java.lang.String s)
	{
		//line 474 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return thx.Strings.STRIPTAGS.replace(s, "");
	}
	
	
	public static java.lang.String surround(java.lang.String s, java.lang.String left, java.lang.String right)
	{
		//line 482 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return ( ( ( "" + left ) + s ) + (( (( null == right )) ? (left) : (right) )) );
	}
	
	
	public static haxe.root.Array<java.lang.String> toArray(java.lang.String s)
	{
		//line 494 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return haxe.lang.StringExt.split(s, "");
	}
	
	
	public static haxe.root.Array<java.lang.Object> toCharcodes(java.lang.String s)
	{
		//line 502 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.Strings.map(haxe.lang.Runtime.toString(s), ((haxe.lang.Function) (( (( thx.Strings_toCharcodes_502__Fun.__hx_current != null )) ? (thx.Strings_toCharcodes_502__Fun.__hx_current) : (thx.Strings_toCharcodes_502__Fun.__hx_current = ((thx.Strings_toCharcodes_502__Fun) (new thx.Strings_toCharcodes_502__Fun()) )) )) ))) )) );
	}
	
	
	public static haxe.root.Array<java.lang.String> toChunks(java.lang.String s, int len)
	{
		//line 510 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		haxe.root.Array<java.lang.String> chunks = new haxe.root.Array<java.lang.String>(new java.lang.String[]{});
		//line 511 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		while (( s.length() > 0 ))
		{
			//line 512 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			chunks.push(haxe.lang.StringExt.substr(s, 0, len));
			//line 513 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			s = haxe.lang.StringExt.substr(s, len, ( s.length() - len ));
		}
		
		//line 515 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return chunks;
	}
	
	
	public static haxe.root.Array<java.lang.String> toLines(java.lang.String s)
	{
		//line 522 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return thx.Strings.SPLIT_LINES.split(s);
	}
	
	
	public static java.lang.String trimChars(java.lang.String value, java.lang.String charlist)
	{
		//line 531 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return thx.Strings.trimCharsRight(thx.Strings.trimCharsLeft(value, charlist), charlist);
	}
	
	
	public static java.lang.String trimCharsLeft(java.lang.String value, java.lang.String charlist)
	{
		//line 541 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		int pos = 0;
		//line 542 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		{
			//line 542 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			int _g1 = 0;
			//line 542 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			int _g = value.length();
			//line 542 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			while (( _g1 < _g ))
			{
				//line 542 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
				int i = _g1++;
				//line 543 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
				if (( haxe.lang.StringExt.indexOf(charlist, haxe.lang.StringExt.charAt(value, i), null) >= 0 )) 
				{
					//line 544 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
					 ++ pos;
				}
				else
				{
					//line 546 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
					break;
				}
				
			}
			
		}
		
		//line 547 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return haxe.lang.StringExt.substring(value, pos, null);
	}
	
	
	public static java.lang.String trimCharsRight(java.lang.String value, java.lang.String charlist)
	{
		//line 558 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		int len = value.length();
		//line 558 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		int pos = len;
		//line 558 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		int i = 0;
		//line 561 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		{
			//line 561 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			int _g1 = 0;
			//line 561 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			while (( _g1 < len ))
			{
				//line 561 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
				int j = _g1++;
				//line 562 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
				i = ( ( len - j ) - 1 );
				//line 563 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
				if (( haxe.lang.StringExt.indexOf(charlist, haxe.lang.StringExt.charAt(value, i), null) >= 0 )) 
				{
					//line 564 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
					pos = i;
				}
				else
				{
					//line 566 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
					break;
				}
				
			}
			
		}
		
		//line 568 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return haxe.lang.StringExt.substring(value, 0, pos);
	}
	
	
	public static java.lang.String underscore(java.lang.String s)
	{
		//line 577 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		s = new haxe.root.EReg("::", "g").replace(s, "/");
		//line 578 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		s = new haxe.root.EReg("([A-Z]+)([A-Z][a-z])", "g").replace(s, "$1_$2");
		//line 579 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		s = new haxe.root.EReg("([a-z\\d])([A-Z])", "g").replace(s, "$1_$2");
		//line 580 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		s = new haxe.root.EReg("-", "g").replace(s, "_");
		//line 581 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return s.toLowerCase();
	}
	
	
	public static java.lang.String upperCaseFirst(java.lang.String value)
	{
		//line 588 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return ( haxe.lang.StringExt.substring(value, 0, 1).toUpperCase() + haxe.lang.StringExt.substring(value, 1, null) );
	}
	
	
	public static java.lang.String upTo(java.lang.String value, java.lang.String searchFor)
	{
		//line 596 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		int pos = haxe.lang.StringExt.indexOf(value, searchFor, null);
		//line 597 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		if (( pos < 0 )) 
		{
			//line 598 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return value;
		}
		else
		{
			//line 600 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return haxe.lang.StringExt.substring(value, 0, pos);
		}
		
	}
	
	
	public static java.lang.String wrapColumns(java.lang.String s, java.lang.Object columns, java.lang.String indent, java.lang.String newline)
	{
		//line 609 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		if (( newline == null )) 
		{
			//line 609 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			newline = "\n";
		}
		
		//line 609 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		if (( indent == null )) 
		{
			//line 609 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			indent = "";
		}
		
		//line 609 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		int __temp_columns112 = ( (haxe.lang.Runtime.eq(columns, null)) ? (78) : (((int) (haxe.lang.Runtime.toInt(columns)) )) );
		//line 609 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return ((haxe.root.Array<java.lang.String>) (((haxe.root.Array) (thx.Strings.SPLIT_LINES.split(s).map(((haxe.lang.Function) (new thx.Strings_wrapColumns_609__Fun(newline, indent, __temp_columns112)) ))) )) ).join(newline);
	}
	
	
	public static java.lang.String upperMatch(haxe.root.EReg re)
	{
		//line 616 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return re.matched(0).toUpperCase();
	}
	
	
	public static java.lang.String wrapLine(java.lang.String s, int columns, java.lang.String indent, java.lang.String newline)
	{
		//line 619 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		haxe.root.Array<java.lang.String> parts = new haxe.root.Array<java.lang.String>(new java.lang.String[]{});
		//line 619 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		int pos = 0;
		//line 619 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		int len = s.length();
		//line 619 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		int ilen = indent.length();
		//line 623 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		columns -= ilen;
		//line 624 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		while (true)
		{
			//line 625 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			if (( ( pos + columns ) >= ( len - ilen ) )) 
			{
				//line 626 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
				parts.push(haxe.lang.StringExt.substring(s, pos, null));
				//line 627 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
				break;
			}
			
			//line 630 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			int i = 0;
			//line 631 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			while ((  ! (haxe.root.StringTools.isSpace(s, ( ( pos + columns ) - i )))  && ( i < columns ) ))
			{
				//line 632 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
				 ++ i;
			}
			
			//line 633 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			if (( i == columns )) 
			{
				//line 635 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
				i = 0;
				//line 636 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
				while ((  ! (haxe.root.StringTools.isSpace(s, ( ( pos + columns ) + i )))  && ( ( ( pos + columns ) + i ) < len ) ))
				{
					//line 637 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
					 ++ i;
				}
				
				//line 638 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
				parts.push(haxe.lang.StringExt.substring(s, pos, ( ( pos + columns ) + i )));
				//line 639 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
				pos += ( ( columns + i ) + 1 );
			}
			else
			{
				//line 641 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
				parts.push(haxe.lang.StringExt.substring(s, pos, ( ( pos + columns ) - i )));
				//line 642 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
				pos += ( ( columns - i ) + 1 );
			}
			
		}
		
		//line 646 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return ( indent + parts.join(( newline + indent )) );
	}
	
	
	public static java.lang.String lpad(java.lang.String s, java.lang.String _char, int length)
	{
		//line 650 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		int diff = ( length - s.length() );
		//line 651 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		if (( diff > 0 )) 
		{
			//line 652 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return ( thx.Strings.repeat(_char, diff) + s );
		}
		else
		{
			//line 654 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return s;
		}
		
	}
	
	
	public static java.lang.String rpad(java.lang.String s, java.lang.String _char, int length)
	{
		//line 659 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		int diff = ( length - s.length() );
		//line 660 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		if (( diff > 0 )) 
		{
			//line 661 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return ( s + thx.Strings.repeat(_char, diff) );
		}
		else
		{
			//line 663 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
			return s;
		}
		
	}
	
	
	public static java.lang.Object monoid;
	
	public static haxe.root.EReg UCWORDS;
	
	public static haxe.root.EReg IS_BREAKINGWHITESPACE;
	
	public static haxe.root.EReg IS_ALPHA;
	
	public static haxe.root.EReg UCWORDSWS;
	
	public static haxe.root.EReg ALPHANUM;
	
	public static haxe.root.EReg DIGITS;
	
	public static haxe.root.EReg STRIPTAGS;
	
	public static haxe.root.EReg WSG;
	
	public static haxe.root.EReg SPLIT_LINES;
	
	public static haxe.root.EReg CANONICALIZE_LINES;
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 14 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return new thx.Strings(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 14 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Strings.hx"
		return new thx.Strings();
	}
	
	
}


