// Generated by Haxe 3.3.0
package thx._Timestamp;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public final class Timestamp_Impl_
{
	public static double create(int year, java.lang.Object month, java.lang.Object day, java.lang.Object hour, java.lang.Object minute, java.lang.Object second)
	{
		//line 24 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
		return ((double) (thx.Dates.create(year, month, day, hour, minute, second).date.getTime()) );
	}
	
	
	public static double now()
	{
		//line 27 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
		return ((double) (haxe.root.Date.now().date.getTime()) );
	}
	
	
	public static double fromDate(haxe.root.Date d)
	{
		//line 30 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
		return ((double) (d.date.getTime()) );
	}
	
	
	public static double fromString(java.lang.String s)
	{
		//line 33 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
		return ((double) (haxe.root.Date.fromString(s).date.getTime()) );
	}
	
	
	public static haxe.root.Date toDate(double this1)
	{
		//line 36 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
		return haxe.root.Date.fromTime(this1);
	}
	
	
	public static java.lang.String toString(double this1)
	{
		//line 39 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
		return haxe.root.Date.fromTime(((double) (this1) )).toString();
	}
	
	
	public static double snapNext(double this1, thx.TimePeriod period)
	{
		//line 49 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
		switch (period)
		{
			case Second:
			{
				//line 49 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				return ( java.lang.Math.ceil(( this1 / 1000.0 )) * 1000.0 );
			}
			
			
			case Minute:
			{
				//line 49 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				return ( java.lang.Math.ceil(( this1 / 60000.0 )) * 60000.0 );
			}
			
			
			case Hour:
			{
				//line 49 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				return ( java.lang.Math.ceil(( this1 / 3600000.0 )) * 3600000.0 );
			}
			
			
			case Day:
			{
				//line 57 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				haxe.root.Date d = haxe.root.Date.fromTime(((double) (this1) ));
				//line 49 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				return ((double) (thx.Dates.create(( d.date.getYear() + 1900 ), d.date.getMonth(), ( d.date.getDate() + 1 ), 0, 0, 0).date.getTime()) );
			}
			
			
			case Week:
			{
				//line 60 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				haxe.root.Date d1 = haxe.root.Date.fromTime(((double) (this1) ));
				//line 60 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				int wd = d1.date.getDay();
				//line 49 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				return ((double) (thx.Dates.create(( d1.date.getYear() + 1900 ), d1.date.getMonth(), ( ( d1.date.getDate() + 7 ) - wd ), 0, 0, 0).date.getTime()) );
			}
			
			
			case Month:
			{
				//line 64 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				haxe.root.Date d2 = haxe.root.Date.fromTime(((double) (this1) ));
				//line 49 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				return ((double) (thx.Dates.create(( d2.date.getYear() + 1900 ), ( d2.date.getMonth() + 1 ), 1, 0, 0, 0).date.getTime()) );
			}
			
			
			case Year:
			{
				//line 67 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				haxe.root.Date d3 = haxe.root.Date.fromTime(((double) (this1) ));
				//line 49 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				return ((double) (thx.Dates.create(( ( d3.date.getYear() + 1900 ) + 1 ), 0, 1, 0, 0, 0).date.getTime()) );
			}
			
			
		}
		
		//line 48 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
		return 0.0;
	}
	
	
	public static double snapPrev(double this1, thx.TimePeriod period)
	{
		//line 79 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
		switch (period)
		{
			case Second:
			{
				//line 79 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				return ( java.lang.Math.floor(( this1 / 1000.0 )) * 1000.0 );
			}
			
			
			case Minute:
			{
				//line 79 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				return ( java.lang.Math.floor(( this1 / 60000.0 )) * 60000.0 );
			}
			
			
			case Hour:
			{
				//line 79 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				return ( java.lang.Math.floor(( this1 / 3600000.0 )) * 3600000.0 );
			}
			
			
			case Day:
			{
				//line 87 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				haxe.root.Date d = haxe.root.Date.fromTime(((double) (this1) ));
				//line 79 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				return ((double) (thx.Dates.create(( d.date.getYear() + 1900 ), d.date.getMonth(), d.date.getDate(), 0, 0, 0).date.getTime()) );
			}
			
			
			case Week:
			{
				//line 90 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				haxe.root.Date d1 = haxe.root.Date.fromTime(((double) (this1) ));
				//line 90 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				int wd = d1.date.getDay();
				//line 79 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				return ((double) (thx.Dates.create(( d1.date.getYear() + 1900 ), d1.date.getMonth(), ( d1.date.getDate() - wd ), 0, 0, 0).date.getTime()) );
			}
			
			
			case Month:
			{
				//line 94 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				haxe.root.Date d2 = haxe.root.Date.fromTime(((double) (this1) ));
				//line 79 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				return ((double) (thx.Dates.create(( d2.date.getYear() + 1900 ), d2.date.getMonth(), 1, 0, 0, 0).date.getTime()) );
			}
			
			
			case Year:
			{
				//line 97 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				haxe.root.Date d3 = haxe.root.Date.fromTime(((double) (this1) ));
				//line 79 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				return ((double) (thx.Dates.create(( d3.date.getYear() + 1900 ), 0, 1, 0, 0, 0).date.getTime()) );
			}
			
			
		}
		
		//line 78 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
		return 0.0;
	}
	
	
	public static double snapTo(double this1, thx.TimePeriod period)
	{
		//line 107 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
		switch (period)
		{
			case Second:
			{
				//line 107 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				return ( java.lang.Math.floor(( ( this1 / 1000.0 ) + 0.5 )) * 1000.0 );
			}
			
			
			case Minute:
			{
				//line 107 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				return ( java.lang.Math.floor(( ( this1 / 60000.0 ) + 0.5 )) * 60000.0 );
			}
			
			
			case Hour:
			{
				//line 107 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				return ( java.lang.Math.floor(( ( this1 / 3600000.0 ) + 0.5 )) * 3600000.0 );
			}
			
			
			case Day:
			{
				//line 115 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				haxe.root.Date d = haxe.root.Date.fromTime(((double) (this1) ));
				//line 115 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				int mod = ( (( d.date.getHours() >= 12 )) ? (1) : (0) );
				//line 107 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				return ((double) (thx.Dates.create(( d.date.getYear() + 1900 ), d.date.getMonth(), ( d.date.getDate() + mod ), 0, 0, 0).date.getTime()) );
			}
			
			
			case Week:
			{
				//line 119 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				haxe.root.Date d1 = haxe.root.Date.fromTime(((double) (this1) ));
				//line 119 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				int wd = d1.date.getDay();
				//line 119 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				int mod1 = ( (( wd < 3 )) ? ( - (wd) ) : (( (( wd > 3 )) ? (( 7 - wd )) : (( (( d1.date.getHours() < 12 )) ? ( - (wd) ) : (( 7 - wd )) )) )) );
				//line 107 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				return ((double) (thx.Dates.create(( d1.date.getYear() + 1900 ), d1.date.getMonth(), ( d1.date.getDate() + mod1 ), 0, 0, 0).date.getTime()) );
			}
			
			
			case Month:
			{
				//line 124 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				haxe.root.Date d2 = haxe.root.Date.fromTime(((double) (this1) ));
				//line 124 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				int mod2 = ( (( d2.date.getDate() > ((int) (java.lang.Math.round(( ((double) (haxe.root.DateTools.getMonthDays(d2)) ) / 2 ))) ) )) ? (1) : (0) );
				//line 107 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				return ((double) (thx.Dates.create(( d2.date.getYear() + 1900 ), ( d2.date.getMonth() + mod2 ), 1, 0, 0, 0).date.getTime()) );
			}
			
			
			case Year:
			{
				//line 128 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				haxe.root.Date d3 = haxe.root.Date.fromTime(((double) (this1) ));
				//line 128 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				int mod3 = ( (( this1 > ((double) (new haxe.root.Date(( d3.date.getYear() + 1900 ), 6, 2, 0, 0, 0).date.getTime()) ) )) ? (1) : (0) );
				//line 107 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
				return ((double) (thx.Dates.create(( ( d3.date.getYear() + 1900 ) + mod3 ), 0, 1, 0, 0, 0).date.getTime()) );
			}
			
			
		}
		
		//line 106 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
		return 0.0;
	}
	
	
	public static double r(double t, double v)
	{
		//line 134 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
		return ( java.lang.Math.floor(( ( t / v ) + 0.5 )) * v );
	}
	
	
	public static double f(double t, double v)
	{
		//line 136 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
		return ( java.lang.Math.floor(( t / v )) * v );
	}
	
	
	public static double c(double t, double v)
	{
		//line 138 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Timestamp.hx"
		return ( java.lang.Math.ceil(( t / v )) * v );
	}
	
	
}


