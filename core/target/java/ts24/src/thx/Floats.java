// Generated by Haxe 3.3.0
package thx;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Floats extends haxe.lang.HxObject
{
	static
	{
		//line 7 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		thx.Floats.TOLERANCE = 10e-5;
		//line 11 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		thx.Floats.EPSILON = 1e-9;
		//line 13 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		thx.Floats.pattern_parse = new haxe.root.EReg("^(\\+|-)?\\d+(\\.\\d+)?(e-?\\d+)?$", "");
		//line 245 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		thx.Floats.order = ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Floats.class, "compare")) ))) );
		//line 248 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		java.lang.Object __temp_stmt2 = null;
		//line 248 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		{
			//line 248 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			haxe.lang.Function __temp_odecl1 = ( (( thx.Floats_Anon_248__Fun.__hx_current != null )) ? (thx.Floats_Anon_248__Fun.__hx_current) : (thx.Floats_Anon_248__Fun.__hx_current = ((thx.Floats_Anon_248__Fun) (new thx.Floats_Anon_248__Fun()) )) );
			//line 248 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			__temp_stmt2 = new haxe.lang.DynamicObject(new java.lang.String[]{"append"}, new java.lang.Object[]{__temp_odecl1}, new java.lang.String[]{"zero"}, new double[]{((double) (0.0) )});
		}
		
		//line 247 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		thx.Floats.monoid = ((java.lang.Object) (__temp_stmt2) );
	}
	
	public Floats(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Floats()
	{
		//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		thx.Floats.__hx_ctor_thx_Floats(this);
	}
	
	
	public static void __hx_ctor_thx_Floats(thx.Floats __temp_me77)
	{
	}
	
	
	public static double TOLERANCE;
	
	public static double EPSILON;
	
	public static haxe.root.EReg pattern_parse;
	
	public static double angleDifference(double a, double b, java.lang.Object turn)
	{
		//line 18 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		java.lang.Object __temp_turn68 = ( (haxe.lang.Runtime.eq(turn, null)) ? (((java.lang.Object) (360.0) )) : (turn) );
		//line 19 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		double r = ( ((double) ((( b - a ))) ) % ((double) (haxe.lang.Runtime.toDouble(__temp_turn68)) ) );
		//line 20 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		if (( r < 0 )) 
		{
			//line 21 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			r = ((double) (haxe.lang.Runtime.toDouble(haxe.lang.Runtime.plus(r, __temp_turn68))) );
		}
		
		//line 22 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		if (( r > ( ((double) (haxe.lang.Runtime.toDouble(__temp_turn68)) ) / ((double) (2) ) ) )) 
		{
			//line 23 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			r = ( ((double) (r) ) - ((double) (haxe.lang.Runtime.toDouble(__temp_turn68)) ) );
		}
		
		//line 24 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		return r;
	}
	
	
	public static double ceilTo(double f, int decimals)
	{
		//line 31 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		double p = java.lang.Math.pow(((double) (10) ), ((double) (decimals) ));
		//line 32 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		return ( java.lang.Math.ceil(( f * p )) / p );
	}
	
	
	public static boolean canParse(java.lang.String s)
	{
		//line 39 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		return thx.Floats.pattern_parse.match(s);
	}
	
	
	public static double clamp(double v, double min, double max)
	{
		//line 51 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		if (( v < min )) 
		{
			//line 51 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			return min;
		}
		else
		{
			//line 51 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			if (( v > max )) 
			{
				//line 51 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
				return max;
			}
			else
			{
				//line 51 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
				return v;
			}
			
		}
		
	}
	
	
	public static double clampSym(double v, double max)
	{
		//line 58 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		double min =  - (max) ;
		//line 58 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		if (( v < min )) 
		{
			//line 58 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			return min;
		}
		else
		{
			//line 58 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			if (( v > max )) 
			{
				//line 58 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
				return max;
			}
			else
			{
				//line 58 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
				return v;
			}
			
		}
		
	}
	
	
	public static int compare(double a, double b)
	{
		//line 64 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		if (( a < b )) 
		{
			//line 64 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			return -1;
		}
		else
		{
			//line 64 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			if (( a > b )) 
			{
				//line 64 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
				return 1;
			}
			else
			{
				//line 64 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
				return 0;
			}
			
		}
		
	}
	
	
	public static double floorTo(double f, int decimals)
	{
		//line 70 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		double p = java.lang.Math.pow(((double) (10) ), ((double) (decimals) ));
		//line 71 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		return ( java.lang.Math.floor(( f * p )) / p );
	}
	
	
	public static double interpolate(double f, double a, double b)
	{
		//line 78 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		return ( ( (( b - a )) * f ) + a );
	}
	
	
	public static double interpolateAngle(double f, double a, double b, java.lang.Object turn)
	{
		//line 86 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		double __temp_turn69 = ( (haxe.lang.Runtime.eq(turn, null)) ? (((double) (360) )) : (((double) (haxe.lang.Runtime.toDouble(turn)) )) );
		//line 86 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		return thx.Floats.wrapCircular(thx.Floats.interpolate(f, a, ( a + thx.Floats.angleDifference(a, b, __temp_turn69) )), __temp_turn69);
	}
	
	
	public static double interpolateAngleWidest(double f, double a, double b, java.lang.Object turn)
	{
		//line 94 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		double __temp_turn70 = ( (haxe.lang.Runtime.eq(turn, null)) ? (((double) (360) )) : (((double) (haxe.lang.Runtime.toDouble(turn)) )) );
		//line 94 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		return thx.Floats.wrapCircular(( thx.Floats.interpolateAngle(f, a, b, __temp_turn70) - ( __temp_turn70 / 2 ) ), __temp_turn70);
	}
	
	
	public static double interpolateAngleCW(double f, double a, double b, java.lang.Object turn)
	{
		//line 100 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		double __temp_turn71 = ( (haxe.lang.Runtime.eq(turn, null)) ? (((double) (360) )) : (((double) (haxe.lang.Runtime.toDouble(turn)) )) );
		//line 101 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		a = thx.Floats.wrapCircular(a, __temp_turn71);
		//line 102 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		b = thx.Floats.wrapCircular(b, __temp_turn71);
		//line 103 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		if (( b < a )) 
		{
			//line 104 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			b += __temp_turn71;
		}
		
		//line 105 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		return thx.Floats.wrapCircular(thx.Floats.interpolate(f, a, b), __temp_turn71);
	}
	
	
	public static double interpolateAngleCCW(double f, double a, double b, java.lang.Object turn)
	{
		//line 111 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		double __temp_turn72 = ( (haxe.lang.Runtime.eq(turn, null)) ? (((double) (360) )) : (((double) (haxe.lang.Runtime.toDouble(turn)) )) );
		//line 112 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		a = thx.Floats.wrapCircular(a, __temp_turn72);
		//line 113 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		b = thx.Floats.wrapCircular(b, __temp_turn72);
		//line 114 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		if (( b > a )) 
		{
			//line 115 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			b -= __temp_turn72;
		}
		
		//line 116 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		return thx.Floats.wrapCircular(thx.Floats.interpolate(f, a, b), __temp_turn72);
	}
	
	
	public static <T> T max(T a, T b)
	{
		//line 123 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		if (( haxe.lang.Runtime.compare(a, b) > 0 )) 
		{
			//line 123 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			return a;
		}
		else
		{
			//line 123 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			return b;
		}
		
	}
	
	
	public static <T> T min(T a, T b)
	{
		//line 129 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		if (( haxe.lang.Runtime.compare(a, b) < 0 )) 
		{
			//line 129 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			return a;
		}
		else
		{
			//line 129 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			return b;
		}
		
	}
	
	
	public static boolean nearEquals(double a, double b, java.lang.Object tollerance)
	{
		//line 136 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		java.lang.Object __temp_tollerance73 = ( (haxe.lang.Runtime.eq(tollerance, null)) ? (((java.lang.Object) (1e-9) )) : (tollerance) );
		//line 137 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		if (haxe.lang.Runtime.isFinite(a)) 
		{
			//line 139 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			if ( ! (haxe.lang.Runtime.isFinite(b)) ) 
			{
				//line 140 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
				return false;
			}
			
			//line 142 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			return ( haxe.lang.Runtime.compare(java.lang.Math.abs(( a - b )), __temp_tollerance73) <= 0 );
		}
		
		//line 144 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		if (java.lang.Double.isNaN(a)) 
		{
			//line 145 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			return java.lang.Double.isNaN(b);
		}
		
		//line 146 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		if (java.lang.Double.isNaN(b)) 
		{
			//line 147 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			return false;
		}
		
		//line 148 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		if ( ! (haxe.lang.Runtime.isFinite(b)) ) 
		{
			//line 149 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			return ( ( a > 0 ) == ( b > 0 ) );
		}
		
		//line 151 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		return false;
	}
	
	
	public static boolean nearEqualAngles(double a, double b, java.lang.Object turn, java.lang.Object tollerance)
	{
		//line 161 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		java.lang.Object __temp_tollerance75 = ( (haxe.lang.Runtime.eq(tollerance, null)) ? (((java.lang.Object) (1e-9) )) : (tollerance) );
		//line 161 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		java.lang.Object __temp_turn74 = ( (haxe.lang.Runtime.eq(turn, null)) ? (((java.lang.Object) (360.0) )) : (turn) );
		//line 161 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		return ( haxe.lang.Runtime.compare(java.lang.Math.abs(thx.Floats.angleDifference(a, b, __temp_turn74)), __temp_tollerance75) <= 0 );
	}
	
	
	public static boolean nearZero(double n, java.lang.Object tollerance)
	{
		//line 168 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		java.lang.Object __temp_tollerance76 = ( (haxe.lang.Runtime.eq(tollerance, null)) ? (((java.lang.Object) (1e-9) )) : (tollerance) );
		//line 168 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		return ( haxe.lang.Runtime.compare(java.lang.Math.abs(n), __temp_tollerance76) <= 0 );
	}
	
	
	public static double normalize(double v)
	{
		//line 174 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		if (( v < 0 )) 
		{
			//line 174 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			return ((double) (0) );
		}
		else
		{
			//line 174 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			if (( v > 1 )) 
			{
				//line 174 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
				return ((double) (1) );
			}
			else
			{
				//line 174 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
				return v;
			}
			
		}
		
	}
	
	
	public static double parse(java.lang.String s)
	{
		//line 180 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		if (haxe.lang.Runtime.valEq(haxe.lang.StringExt.substring(s, 0, 1), "+")) 
		{
			//line 181 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			s = haxe.lang.StringExt.substring(s, 1, null);
		}
		
		//line 182 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		return haxe.root.Std.parseFloat(s);
	}
	
	
	public static double root(double base, double index)
	{
		//line 189 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		return java.lang.Math.pow(base, ( 1 / index ));
	}
	
	
	public static double roundTo(double f, int decimals)
	{
		//line 195 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		double p = java.lang.Math.pow(((double) (10) ), ((double) (decimals) ));
		//line 196 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		return ( java.lang.Math.floor(( ( f * p ) + 0.5 )) / p );
	}
	
	
	public static <T> int sign(T value)
	{
		//line 203 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		if (( haxe.lang.Runtime.compare(value, 0) < 0 )) 
		{
			//line 203 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			return -1;
		}
		else
		{
			//line 203 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			return 1;
		}
		
	}
	
	
	public static java.lang.String toString(double v)
	{
		//line 206 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		return ( "" + haxe.lang.Runtime.toString(v) );
	}
	
	
	public static double toFloat(java.lang.String s)
	{
		//line 212 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		return thx.Floats.parse(s);
	}
	
	
	public static int trunc(double value)
	{
		//line 215 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		if (( value < 0.0 )) 
		{
			//line 215 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			return ((int) (java.lang.Math.ceil(value)) );
		}
		else
		{
			//line 215 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			return ((int) (java.lang.Math.floor(value)) );
		}
		
	}
	
	
	public static double ftrunc(double value)
	{
		//line 218 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		if (( value < 0.0 )) 
		{
			//line 218 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			return java.lang.Math.ceil(value);
		}
		else
		{
			//line 218 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			return java.lang.Math.floor(value);
		}
		
	}
	
	
	public static double wrap(double v, double min, double max)
	{
		//line 227 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		double range = ( ( max - min ) + 1 );
		//line 228 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		if (( v < min )) 
		{
			//line 228 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			v += ( range * (( ( (( min - v )) / range ) + 1 )) );
		}
		
		//line 229 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		return ( min + ( (( v - min )) % range ) );
	}
	
	
	public static double wrapCircular(double v, double max)
	{
		//line 236 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		v %= max;
		//line 237 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		if (( v < 0 )) 
		{
			//line 238 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
			v += max;
		}
		
		//line 239 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		return v;
	}
	
	
	public static haxe.lang.Function order;
	
	public static java.lang.Object monoid;
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		return new thx.Floats(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Floats.hx"
		return new thx.Floats();
	}
	
	
}


