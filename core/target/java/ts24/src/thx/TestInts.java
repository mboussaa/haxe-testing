// Generated by Haxe 3.3.0
package thx;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestInts extends haxe.lang.HxObject
{
	public TestInts(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestInts(int i)
	{
		//line 13 "/shared/core/test/thx/TestInts.hx"
		thx.TestInts.__hx_ctor_thx_TestInts(this, i);
	}
	
	
	public static void __hx_ctor_thx_TestInts(thx.TestInts __temp_me111, int i)
	{
		//line 14 "/shared/core/test/thx/TestInts.hx"
		__temp_me111.x = i;
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 11 "/shared/core/test/thx/TestInts.hx"
		return new thx.TestInts(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 11 "/shared/core/test/thx/TestInts.hx"
		return new thx.TestInts(((int) (haxe.lang.Runtime.toInt(arr.__get(0))) ));
	}
	
	
	public int x;
	
	public void testRange()
	{
		//line 18 "/shared/core/test/thx/TestInts.hx"
		int _g1 = 0;
		//line 18 "/shared/core/test/thx/TestInts.hx"
		int _g = this.x;
		//line 18 "/shared/core/test/thx/TestInts.hx"
		while (( _g1 < _g ))
		{
			//line 18 "/shared/core/test/thx/TestInts.hx"
			 ++ _g1;
			//line 19 "/shared/core/test/thx/TestInts.hx"
			haxe.root.Array<java.lang.Object> range = thx.Ints.range(2, 7, 1);
			//line 20 "/shared/core/test/thx/TestInts.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{2, 3, 4, 5, 6}), range, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestInts", "TestInts.hx", "testRange"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (20) )) )}));
			//line 21 "/shared/core/test/thx/TestInts.hx"
			range = thx.Ints.range(2, 7, 2);
			//line 22 "/shared/core/test/thx/TestInts.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{2, 4, 6}), range, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestInts", "TestInts.hx", "testRange"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (22) )) )}));
			//line 23 "/shared/core/test/thx/TestInts.hx"
			range = thx.Ints.range(2, 7, 3);
			//line 24 "/shared/core/test/thx/TestInts.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{2, 5}), range, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestInts", "TestInts.hx", "testRange"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (24) )) )}));
			//line 26 "/shared/core/test/thx/TestInts.hx"
			range = thx.Ints.range(7, 2, -2);
			//line 27 "/shared/core/test/thx/TestInts.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{7, 5, 3}), range, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestInts", "TestInts.hx", "testRange"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (27) )) )}));
		}
		
	}
	
	
	public void testParse()
	{
		//line 31 "/shared/core/test/thx/TestInts.hx"
		int _g1 = 0;
		//line 31 "/shared/core/test/thx/TestInts.hx"
		int _g = this.x;
		//line 31 "/shared/core/test/thx/TestInts.hx"
		while (( _g1 < _g ))
		{
			//line 31 "/shared/core/test/thx/TestInts.hx"
			 ++ _g1;
			//line 32 "/shared/core/test/thx/TestInts.hx"
			haxe.root.Array<java.lang.Object> tests = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{"-50"}, new java.lang.String[]{"b", "e"}, new double[]{((double) (((double) (10) )) ), ((double) (((double) (-50) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{"50"}, new java.lang.String[]{"b", "e"}, new double[]{((double) (((double) (10) )) ), ((double) (((double) (50) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{"1"}, new java.lang.String[]{"b", "e"}, new double[]{((double) (((double) (10) )) ), ((double) (((double) (1) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{"+1"}, new java.lang.String[]{"b", "e"}, new double[]{((double) (((double) (10) )) ), ((double) (((double) (1) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{"-1"}, new java.lang.String[]{"b", "e"}, new double[]{((double) (((double) (10) )) ), ((double) (((double) (-1) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{" 1 "}, new java.lang.String[]{"b", "e"}, new double[]{((double) (((double) (10) )) ), ((double) (((double) (1) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{" 1,234"}, new java.lang.String[]{"b", "e"}, new double[]{((double) (((double) (10) )) ), ((double) (((double) (1) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{" 0xF"}, new java.lang.String[]{"b", "e"}, new double[]{((double) (((double) (16) )) ), ((double) (((double) (15) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{"17"}, new java.lang.String[]{"b", "e"}, new double[]{((double) (((double) (8) )) ), ((double) (((double) (15) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{"015"}, new java.lang.String[]{"b", "e"}, new double[]{((double) (((double) (10) )) ), ((double) (((double) (15) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{"1111"}, new java.lang.String[]{"b", "e"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (15) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{"15*3"}, new java.lang.String[]{"b", "e"}, new double[]{((double) (((double) (10) )) ), ((double) (((double) (15) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{"15e2"}, new java.lang.String[]{"b", "e"}, new double[]{((double) (((double) (10) )) ), ((double) (((double) (15) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{"15px"}, new java.lang.String[]{"b", "e"}, new double[]{((double) (((double) (10) )) ), ((double) (((double) (15) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{"12"}, new java.lang.String[]{"b", "e"}, new double[]{((double) (((double) (13) )) ), ((double) (((double) (15) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{"-0F"}, new java.lang.String[]{"b", "e"}, new double[]{((double) (((double) (16) )) ), ((double) (((double) (-15) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{"-0XF"}, new java.lang.String[]{"b", "e"}, new double[]{((double) (((double) (16) )) ), ((double) (((double) (-15) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{" -17"}, new java.lang.String[]{"b", "e"}, new double[]{((double) (((double) (8) )) ), ((double) (((double) (-15) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{" -15"}, new java.lang.String[]{"b", "e"}, new double[]{((double) (((double) (10) )) ), ((double) (((double) (-15) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{"-1111"}, new java.lang.String[]{"b", "e"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (-15) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{"-15e1"}, new java.lang.String[]{"b", "e"}, new double[]{((double) (((double) (10) )) ), ((double) (((double) (-15) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{"-12"}, new java.lang.String[]{"b", "e"}, new double[]{((double) (((double) (13) )) ), ((double) (((double) (-15) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"t"}, new java.lang.Object[]{"0e0"}, new java.lang.String[]{"b", "e"}, new double[]{((double) (((double) (16) )) ), ((double) (((double) (224) )) )})});
			//line 59 "/shared/core/test/thx/TestInts.hx"
			{
				//line 59 "/shared/core/test/thx/TestInts.hx"
				int _g2 = 0;
				//line 59 "/shared/core/test/thx/TestInts.hx"
				while (( _g2 < tests.length ))
				{
					//line 59 "/shared/core/test/thx/TestInts.hx"
					java.lang.Object test = tests.__get(_g2);
					//line 59 "/shared/core/test/thx/TestInts.hx"
					 ++ _g2;
					//line 60 "/shared/core/test/thx/TestInts.hx"
					utest.Assert.isTrue(thx.Ints.canParse(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(test, "t", true))), ( "Ints.parse should not be able to parse " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(test, "t", true)) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestInts", "TestInts.hx", "testParse"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (60) )) )}));
					//line 61 "/shared/core/test/thx/TestInts.hx"
					utest.Assert.equals(((int) (haxe.lang.Runtime.getField_f(test, "e", true)) ), thx.Ints.parse(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(test, "t", true)), ((int) (haxe.lang.Runtime.getField_f(test, "b", true)) )), ( haxe.lang.Runtime.toString(( ( ( ( ( ( "expected " + ((int) (haxe.lang.Runtime.getField_f(test, "e", true)) ) ) + " converting \"" ) + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(test, "t", true)) ) + "\" with base " ) + ((int) (haxe.lang.Runtime.getField_f(test, "b", true)) ) ) + " but got " )) + haxe.lang.Runtime.toString(thx.Ints.parse(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(test, "t", true)), ((int) (haxe.lang.Runtime.getField_f(test, "b", true)) ))) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestInts", "TestInts.hx", "testParse"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (61) )) )}));
				}
				
			}
			
		}
		
	}
	
	
	public void testToString()
	{
		//line 66 "/shared/core/test/thx/TestInts.hx"
		int _g1 = 0;
		//line 66 "/shared/core/test/thx/TestInts.hx"
		int _g = this.x;
		//line 66 "/shared/core/test/thx/TestInts.hx"
		while (( _g1 < _g ))
		{
			//line 66 "/shared/core/test/thx/TestInts.hx"
			 ++ _g1;
			//line 67 "/shared/core/test/thx/TestInts.hx"
			haxe.root.Array<java.lang.Object> tests = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{new haxe.lang.DynamicObject(new java.lang.String[]{"e"}, new java.lang.Object[]{"1010"}, new java.lang.String[]{"b", "t"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (10) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"e"}, new java.lang.Object[]{"12"}, new java.lang.String[]{"b", "t"}, new double[]{((double) (((double) (8) )) ), ((double) (((double) (10) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"e"}, new java.lang.Object[]{"10"}, new java.lang.String[]{"b", "t"}, new double[]{((double) (((double) (10) )) ), ((double) (((double) (10) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"e"}, new java.lang.Object[]{"a"}, new java.lang.String[]{"b", "t"}, new double[]{((double) (((double) (16) )) ), ((double) (((double) (10) )) )})});
			//line 74 "/shared/core/test/thx/TestInts.hx"
			{
				//line 74 "/shared/core/test/thx/TestInts.hx"
				int _g2 = 0;
				//line 74 "/shared/core/test/thx/TestInts.hx"
				while (( _g2 < tests.length ))
				{
					//line 74 "/shared/core/test/thx/TestInts.hx"
					java.lang.Object test = tests.__get(_g2);
					//line 74 "/shared/core/test/thx/TestInts.hx"
					 ++ _g2;
					//line 75 "/shared/core/test/thx/TestInts.hx"
					utest.Assert.equals(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(test, "e", true)), thx.Ints.toString(((int) (haxe.lang.Runtime.getField_f(test, "t", true)) ), ((int) (haxe.lang.Runtime.getField_f(test, "b", true)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestInts", "TestInts.hx", "testToString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (75) )) )}));
				}
				
			}
			
		}
		
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 11 "/shared/core/test/thx/TestInts.hx"
		{
			//line 11 "/shared/core/test/thx/TestInts.hx"
			boolean __temp_executeDef1 = true;
			//line 11 "/shared/core/test/thx/TestInts.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 11 "/shared/core/test/thx/TestInts.hx"
					if (field.equals("x")) 
					{
						//line 11 "/shared/core/test/thx/TestInts.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/core/test/thx/TestInts.hx"
						this.x = ((int) (value) );
						//line 11 "/shared/core/test/thx/TestInts.hx"
						return value;
					}
					
					//line 11 "/shared/core/test/thx/TestInts.hx"
					break;
				}
				
				
			}
			
			//line 11 "/shared/core/test/thx/TestInts.hx"
			if (__temp_executeDef1) 
			{
				//line 11 "/shared/core/test/thx/TestInts.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 11 "/shared/core/test/thx/TestInts.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 11 "/shared/core/test/thx/TestInts.hx"
		{
			//line 11 "/shared/core/test/thx/TestInts.hx"
			boolean __temp_executeDef1 = true;
			//line 11 "/shared/core/test/thx/TestInts.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 11 "/shared/core/test/thx/TestInts.hx"
					if (field.equals("x")) 
					{
						//line 11 "/shared/core/test/thx/TestInts.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/core/test/thx/TestInts.hx"
						this.x = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 11 "/shared/core/test/thx/TestInts.hx"
						return value;
					}
					
					//line 11 "/shared/core/test/thx/TestInts.hx"
					break;
				}
				
				
			}
			
			//line 11 "/shared/core/test/thx/TestInts.hx"
			if (__temp_executeDef1) 
			{
				//line 11 "/shared/core/test/thx/TestInts.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 11 "/shared/core/test/thx/TestInts.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 11 "/shared/core/test/thx/TestInts.hx"
		{
			//line 11 "/shared/core/test/thx/TestInts.hx"
			boolean __temp_executeDef1 = true;
			//line 11 "/shared/core/test/thx/TestInts.hx"
			switch (field.hashCode())
			{
				case -1062581986:
				{
					//line 11 "/shared/core/test/thx/TestInts.hx"
					if (field.equals("testToString")) 
					{
						//line 11 "/shared/core/test/thx/TestInts.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/core/test/thx/TestInts.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testToString")) );
					}
					
					//line 11 "/shared/core/test/thx/TestInts.hx"
					break;
				}
				
				
				case 120:
				{
					//line 11 "/shared/core/test/thx/TestInts.hx"
					if (field.equals("x")) 
					{
						//line 11 "/shared/core/test/thx/TestInts.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/core/test/thx/TestInts.hx"
						return this.x;
					}
					
					//line 11 "/shared/core/test/thx/TestInts.hx"
					break;
				}
				
				
				case -1194528447:
				{
					//line 11 "/shared/core/test/thx/TestInts.hx"
					if (field.equals("testParse")) 
					{
						//line 11 "/shared/core/test/thx/TestInts.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/core/test/thx/TestInts.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testParse")) );
					}
					
					//line 11 "/shared/core/test/thx/TestInts.hx"
					break;
				}
				
				
				case -1192685621:
				{
					//line 11 "/shared/core/test/thx/TestInts.hx"
					if (field.equals("testRange")) 
					{
						//line 11 "/shared/core/test/thx/TestInts.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/core/test/thx/TestInts.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testRange")) );
					}
					
					//line 11 "/shared/core/test/thx/TestInts.hx"
					break;
				}
				
				
			}
			
			//line 11 "/shared/core/test/thx/TestInts.hx"
			if (__temp_executeDef1) 
			{
				//line 11 "/shared/core/test/thx/TestInts.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 11 "/shared/core/test/thx/TestInts.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 11 "/shared/core/test/thx/TestInts.hx"
		{
			//line 11 "/shared/core/test/thx/TestInts.hx"
			boolean __temp_executeDef1 = true;
			//line 11 "/shared/core/test/thx/TestInts.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 11 "/shared/core/test/thx/TestInts.hx"
					if (field.equals("x")) 
					{
						//line 11 "/shared/core/test/thx/TestInts.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/core/test/thx/TestInts.hx"
						return ((double) (this.x) );
					}
					
					//line 11 "/shared/core/test/thx/TestInts.hx"
					break;
				}
				
				
			}
			
			//line 11 "/shared/core/test/thx/TestInts.hx"
			if (__temp_executeDef1) 
			{
				//line 11 "/shared/core/test/thx/TestInts.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 11 "/shared/core/test/thx/TestInts.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 11 "/shared/core/test/thx/TestInts.hx"
		{
			//line 11 "/shared/core/test/thx/TestInts.hx"
			boolean __temp_executeDef1 = true;
			//line 11 "/shared/core/test/thx/TestInts.hx"
			switch (field.hashCode())
			{
				case -1062581986:
				{
					//line 11 "/shared/core/test/thx/TestInts.hx"
					if (field.equals("testToString")) 
					{
						//line 11 "/shared/core/test/thx/TestInts.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/core/test/thx/TestInts.hx"
						this.testToString();
					}
					
					//line 11 "/shared/core/test/thx/TestInts.hx"
					break;
				}
				
				
				case -1192685621:
				{
					//line 11 "/shared/core/test/thx/TestInts.hx"
					if (field.equals("testRange")) 
					{
						//line 11 "/shared/core/test/thx/TestInts.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/core/test/thx/TestInts.hx"
						this.testRange();
					}
					
					//line 11 "/shared/core/test/thx/TestInts.hx"
					break;
				}
				
				
				case -1194528447:
				{
					//line 11 "/shared/core/test/thx/TestInts.hx"
					if (field.equals("testParse")) 
					{
						//line 11 "/shared/core/test/thx/TestInts.hx"
						__temp_executeDef1 = false;
						//line 11 "/shared/core/test/thx/TestInts.hx"
						this.testParse();
					}
					
					//line 11 "/shared/core/test/thx/TestInts.hx"
					break;
				}
				
				
			}
			
			//line 11 "/shared/core/test/thx/TestInts.hx"
			if (__temp_executeDef1) 
			{
				//line 11 "/shared/core/test/thx/TestInts.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 11 "/shared/core/test/thx/TestInts.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 11 "/shared/core/test/thx/TestInts.hx"
		baseArr.push("x");
		//line 11 "/shared/core/test/thx/TestInts.hx"
		{
			//line 11 "/shared/core/test/thx/TestInts.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


