// Generated by Haxe 3.3.0
package thx;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestChar extends haxe.lang.HxObject
{
	public TestChar(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestChar(int i)
	{
		//line 9 "/shared/core/test/thx/TestChar.hx"
		thx.TestChar.__hx_ctor_thx_TestChar(this, i);
	}
	
	
	public static void __hx_ctor_thx_TestChar(thx.TestChar __temp_me114, int i)
	{
		//line 10 "/shared/core/test/thx/TestChar.hx"
		__temp_me114.x = i;
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 7 "/shared/core/test/thx/TestChar.hx"
		return new thx.TestChar(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 7 "/shared/core/test/thx/TestChar.hx"
		return new thx.TestChar(((int) (haxe.lang.Runtime.toInt(arr.__get(0))) ));
	}
	
	
	public int x;
	
	public void testChar()
	{
		//line 14 "/shared/core/test/thx/TestChar.hx"
		int _g1 = 0;
		//line 14 "/shared/core/test/thx/TestChar.hx"
		int _g = this.x;
		//line 14 "/shared/core/test/thx/TestChar.hx"
		while (( _g1 < _g ))
		{
			//line 14 "/shared/core/test/thx/TestChar.hx"
			 ++ _g1;
			//line 15 "/shared/core/test/thx/TestChar.hx"
			thx.Assert.isTrue(true, ( "Char value should be greater than zero: " + 120 ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx._Char.Char_Impl_", "Char.hx", "fromInt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (19) )) )}));
			//line 15 "/shared/core/test/thx/TestChar.hx"
			int _char = ((int) (120) );
			//line 17 "/shared/core/test/thx/TestChar.hx"
			utest.Assert.equals(120, _char, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestChar", "TestChar.hx", "testChar"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (17) )) )}));
			//line 18 "/shared/core/test/thx/TestChar.hx"
			Character.toString((char) ((int) (_char) ));
			//line 18 "/shared/core/test/thx/TestChar.hx"
			utest.Assert.equals("x", "x", null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestChar", "TestChar.hx", "testChar"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (18) )) )}));
			//line 20 "/shared/core/test/thx/TestChar.hx"
			int i = ((int) (haxe.lang.Runtime.toInt(haxe.lang.StringExt.charCodeAt("y", 0))) );
			//line 20 "/shared/core/test/thx/TestChar.hx"
			thx.Assert.isTrue(( i >= 0 ), ( "Char value should be greater than zero: " + i ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx._Char.Char_Impl_", "Char.hx", "fromInt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (19) )) )}));
			//line 20 "/shared/core/test/thx/TestChar.hx"
			_char = ((int) (i) );
			//line 22 "/shared/core/test/thx/TestChar.hx"
			utest.Assert.equals(121, _char, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestChar", "TestChar.hx", "testChar"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (22) )) )}));
			//line 23 "/shared/core/test/thx/TestChar.hx"
			utest.Assert.equals("y", Character.toString((char) ((int) (_char) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestChar", "TestChar.hx", "testChar"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (23) )) )}));
			//line 25 "/shared/core/test/thx/TestChar.hx"
			utest.Assert.equals(89, thx._Char.Char_Impl_.toUpperCase(_char), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestChar", "TestChar.hx", "testChar"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (25) )) )}));
			//line 26 "/shared/core/test/thx/TestChar.hx"
			utest.Assert.equals("Y", Character.toString((char) ((int) (thx._Char.Char_Impl_.toUpperCase(_char)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestChar", "TestChar.hx", "testChar"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (26) )) )}));
			//line 28 "/shared/core/test/thx/TestChar.hx"
			_char = thx._Char.Char_Impl_.next(_char);
			//line 30 "/shared/core/test/thx/TestChar.hx"
			utest.Assert.equals(122, _char, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestChar", "TestChar.hx", "testChar"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (30) )) )}));
			//line 31 "/shared/core/test/thx/TestChar.hx"
			utest.Assert.equals("z", Character.toString((char) ((int) (_char) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestChar", "TestChar.hx", "testChar"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (31) )) )}));
			//line 33 "/shared/core/test/thx/TestChar.hx"
			utest.Assert.equals(121, thx._Char.Char_Impl_.prev(_char), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestChar", "TestChar.hx", "testChar"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (33) )) )}));
		}
		
	}
	
	
	public void testControl()
	{
		//line 37 "/shared/core/test/thx/TestChar.hx"
		int _g1 = 0;
		//line 37 "/shared/core/test/thx/TestChar.hx"
		int _g = this.x;
		//line 37 "/shared/core/test/thx/TestChar.hx"
		while (( _g1 < _g ))
		{
			//line 37 "/shared/core/test/thx/TestChar.hx"
			 ++ _g1;
			//line 38 "/shared/core/test/thx/TestChar.hx"
			thx.Assert.isTrue(true, ( "Char value should be greater than zero: " + 7 ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx._Char.Char_Impl_", "Char.hx", "fromInt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (19) )) )}));
			//line 38 "/shared/core/test/thx/TestChar.hx"
			utest.Assert.isTrue(thx._Char.Char_Impl_.isControl(((int) (7) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestChar", "TestChar.hx", "testControl"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (38) )) )}));
			//line 39 "/shared/core/test/thx/TestChar.hx"
			int i = ((int) (haxe.lang.Runtime.toInt(haxe.lang.StringExt.charCodeAt("x", 0))) );
			//line 39 "/shared/core/test/thx/TestChar.hx"
			thx.Assert.isTrue(( i >= 0 ), ( "Char value should be greater than zero: " + i ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx._Char.Char_Impl_", "Char.hx", "fromInt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (19) )) )}));
			//line 39 "/shared/core/test/thx/TestChar.hx"
			utest.Assert.isFalse(thx._Char.Char_Impl_.isControl(((int) (i) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestChar", "TestChar.hx", "testControl"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (39) )) )}));
		}
		
	}
	
	
	public void testUtf8()
	{
		//line 43 "/shared/core/test/thx/TestChar.hx"
		int _g1 = 0;
		//line 43 "/shared/core/test/thx/TestChar.hx"
		int _g = this.x;
		//line 43 "/shared/core/test/thx/TestChar.hx"
		while (( _g1 < _g ))
		{
			//line 43 "/shared/core/test/thx/TestChar.hx"
			 ++ _g1;
			//line 44 "/shared/core/test/thx/TestChar.hx"
			int i = ((int) (haxe.lang.Runtime.toInt(haxe.lang.StringExt.charCodeAt("\u263a", 0))) );
			//line 44 "/shared/core/test/thx/TestChar.hx"
			thx.Assert.isTrue(( i >= 0 ), ( "Char value should be greater than zero: " + i ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx._Char.Char_Impl_", "Char.hx", "fromInt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (19) )) )}));
			//line 44 "/shared/core/test/thx/TestChar.hx"
			utest.Assert.equals(9786, ((int) (i) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestChar", "TestChar.hx", "testUtf8"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (44) )) )}));
			//line 45 "/shared/core/test/thx/TestChar.hx"
			thx.Assert.isTrue(true, ( "Char value should be greater than zero: " + 9786 ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx._Char.Char_Impl_", "Char.hx", "fromInt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (19) )) )}));
			//line 45 "/shared/core/test/thx/TestChar.hx"
			utest.Assert.equals("\u263a", Character.toString((char) ((int) (9786) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestChar", "TestChar.hx", "testUtf8"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (45) )) )}));
		}
		
	}
	
	
	public void testArrayToString()
	{
		//line 49 "/shared/core/test/thx/TestChar.hx"
		int _g1 = 0;
		//line 49 "/shared/core/test/thx/TestChar.hx"
		int _g = this.x;
		//line 49 "/shared/core/test/thx/TestChar.hx"
		while (( _g1 < _g ))
		{
			//line 49 "/shared/core/test/thx/TestChar.hx"
			 ++ _g1;
			//line 50 "/shared/core/test/thx/TestChar.hx"
			thx.Assert.isTrue(true, ( "Char value should be greater than zero: " + 120 ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx._Char.Char_Impl_", "Char.hx", "fromInt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (19) )) )}));
			//line 50 "/shared/core/test/thx/TestChar.hx"
			int tmp = ((int) (120) );
			//line 50 "/shared/core/test/thx/TestChar.hx"
			thx.Assert.isTrue(true, ( "Char value should be greater than zero: " + 121 ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx._Char.Char_Impl_", "Char.hx", "fromInt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (19) )) )}));
			//line 50 "/shared/core/test/thx/TestChar.hx"
			int tmp1 = ((int) (121) );
			//line 50 "/shared/core/test/thx/TestChar.hx"
			thx.Assert.isTrue(true, ( "Char value should be greater than zero: " + 122 ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx._Char.Char_Impl_", "Char.hx", "fromInt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (19) )) )}));
			//line 50 "/shared/core/test/thx/TestChar.hx"
			haxe.root.Array<java.lang.Object> chars = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{tmp, tmp1, ((int) (122) )});
			//line 51 "/shared/core/test/thx/TestChar.hx"
			utest.Assert.equals("xyz", thx._Char.Char_Impl_.arrayToString(chars), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestChar", "TestChar.hx", "testArrayToString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (51) )) )}));
		}
		
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 7 "/shared/core/test/thx/TestChar.hx"
		{
			//line 7 "/shared/core/test/thx/TestChar.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/core/test/thx/TestChar.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 7 "/shared/core/test/thx/TestChar.hx"
					if (field.equals("x")) 
					{
						//line 7 "/shared/core/test/thx/TestChar.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/TestChar.hx"
						this.x = ((int) (value) );
						//line 7 "/shared/core/test/thx/TestChar.hx"
						return value;
					}
					
					//line 7 "/shared/core/test/thx/TestChar.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/core/test/thx/TestChar.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/core/test/thx/TestChar.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 7 "/shared/core/test/thx/TestChar.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 7 "/shared/core/test/thx/TestChar.hx"
		{
			//line 7 "/shared/core/test/thx/TestChar.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/core/test/thx/TestChar.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 7 "/shared/core/test/thx/TestChar.hx"
					if (field.equals("x")) 
					{
						//line 7 "/shared/core/test/thx/TestChar.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/TestChar.hx"
						this.x = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 7 "/shared/core/test/thx/TestChar.hx"
						return value;
					}
					
					//line 7 "/shared/core/test/thx/TestChar.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/core/test/thx/TestChar.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/core/test/thx/TestChar.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 7 "/shared/core/test/thx/TestChar.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 7 "/shared/core/test/thx/TestChar.hx"
		{
			//line 7 "/shared/core/test/thx/TestChar.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/core/test/thx/TestChar.hx"
			switch (field.hashCode())
			{
				case -907401101:
				{
					//line 7 "/shared/core/test/thx/TestChar.hx"
					if (field.equals("testArrayToString")) 
					{
						//line 7 "/shared/core/test/thx/TestChar.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/TestChar.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testArrayToString")) );
					}
					
					//line 7 "/shared/core/test/thx/TestChar.hx"
					break;
				}
				
				
				case 120:
				{
					//line 7 "/shared/core/test/thx/TestChar.hx"
					if (field.equals("x")) 
					{
						//line 7 "/shared/core/test/thx/TestChar.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/TestChar.hx"
						return this.x;
					}
					
					//line 7 "/shared/core/test/thx/TestChar.hx"
					break;
				}
				
				
				case -1146745053:
				{
					//line 7 "/shared/core/test/thx/TestChar.hx"
					if (field.equals("testUtf8")) 
					{
						//line 7 "/shared/core/test/thx/TestChar.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/TestChar.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testUtf8")) );
					}
					
					//line 7 "/shared/core/test/thx/TestChar.hx"
					break;
				}
				
				
				case -1147292920:
				{
					//line 7 "/shared/core/test/thx/TestChar.hx"
					if (field.equals("testChar")) 
					{
						//line 7 "/shared/core/test/thx/TestChar.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/TestChar.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testChar")) );
					}
					
					//line 7 "/shared/core/test/thx/TestChar.hx"
					break;
				}
				
				
				case 558944363:
				{
					//line 7 "/shared/core/test/thx/TestChar.hx"
					if (field.equals("testControl")) 
					{
						//line 7 "/shared/core/test/thx/TestChar.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/TestChar.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testControl")) );
					}
					
					//line 7 "/shared/core/test/thx/TestChar.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/core/test/thx/TestChar.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/core/test/thx/TestChar.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 7 "/shared/core/test/thx/TestChar.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 7 "/shared/core/test/thx/TestChar.hx"
		{
			//line 7 "/shared/core/test/thx/TestChar.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/core/test/thx/TestChar.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 7 "/shared/core/test/thx/TestChar.hx"
					if (field.equals("x")) 
					{
						//line 7 "/shared/core/test/thx/TestChar.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/TestChar.hx"
						return ((double) (this.x) );
					}
					
					//line 7 "/shared/core/test/thx/TestChar.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/core/test/thx/TestChar.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/core/test/thx/TestChar.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 7 "/shared/core/test/thx/TestChar.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 7 "/shared/core/test/thx/TestChar.hx"
		{
			//line 7 "/shared/core/test/thx/TestChar.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/core/test/thx/TestChar.hx"
			switch (field.hashCode())
			{
				case -907401101:
				{
					//line 7 "/shared/core/test/thx/TestChar.hx"
					if (field.equals("testArrayToString")) 
					{
						//line 7 "/shared/core/test/thx/TestChar.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/TestChar.hx"
						this.testArrayToString();
					}
					
					//line 7 "/shared/core/test/thx/TestChar.hx"
					break;
				}
				
				
				case -1147292920:
				{
					//line 7 "/shared/core/test/thx/TestChar.hx"
					if (field.equals("testChar")) 
					{
						//line 7 "/shared/core/test/thx/TestChar.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/TestChar.hx"
						this.testChar();
					}
					
					//line 7 "/shared/core/test/thx/TestChar.hx"
					break;
				}
				
				
				case -1146745053:
				{
					//line 7 "/shared/core/test/thx/TestChar.hx"
					if (field.equals("testUtf8")) 
					{
						//line 7 "/shared/core/test/thx/TestChar.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/TestChar.hx"
						this.testUtf8();
					}
					
					//line 7 "/shared/core/test/thx/TestChar.hx"
					break;
				}
				
				
				case 558944363:
				{
					//line 7 "/shared/core/test/thx/TestChar.hx"
					if (field.equals("testControl")) 
					{
						//line 7 "/shared/core/test/thx/TestChar.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/TestChar.hx"
						this.testControl();
					}
					
					//line 7 "/shared/core/test/thx/TestChar.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/core/test/thx/TestChar.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/core/test/thx/TestChar.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 7 "/shared/core/test/thx/TestChar.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 7 "/shared/core/test/thx/TestChar.hx"
		baseArr.push("x");
		//line 7 "/shared/core/test/thx/TestChar.hx"
		{
			//line 7 "/shared/core/test/thx/TestChar.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


