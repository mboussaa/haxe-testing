// Generated by Haxe 3.3.0
package thx;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestFloats extends haxe.lang.HxObject
{
	public TestFloats(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestFloats(int i)
	{
		//line 14 "/shared/core/test/thx/TestFloats.hx"
		thx.TestFloats.__hx_ctor_thx_TestFloats(this, i);
	}
	
	
	public static void __hx_ctor_thx_TestFloats(thx.TestFloats __temp_me43, int i)
	{
		//line 15 "/shared/core/test/thx/TestFloats.hx"
		__temp_me43.x = i;
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 12 "/shared/core/test/thx/TestFloats.hx"
		return new thx.TestFloats(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 12 "/shared/core/test/thx/TestFloats.hx"
		return new thx.TestFloats(((int) (haxe.lang.Runtime.toInt(arr.__get(0))) ));
	}
	
	
	public int x;
	
	public void testNormalize()
	{
		//line 19 "/shared/core/test/thx/TestFloats.hx"
		int _g1 = 0;
		//line 19 "/shared/core/test/thx/TestFloats.hx"
		int _g = this.x;
		//line 19 "/shared/core/test/thx/TestFloats.hx"
		while (( _g1 < _g ))
		{
			//line 19 "/shared/core/test/thx/TestFloats.hx"
			 ++ _g1;
			//line 20 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.floatEquals(0.0, 0.0, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testNormalize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (20) )) )}));
			//line 21 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.floatEquals(1.0, 1.0, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testNormalize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (21) )) )}));
			//line 22 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.floatEquals(0.5, 0.5, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testNormalize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (22) )) )}));
			//line 23 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.floatEquals(0.0, ((double) (0) ), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testNormalize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (23) )) )}));
			//line 24 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.floatEquals(1.0, ((double) (1) ), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testNormalize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (24) )) )}));
		}
		
	}
	
	
	public void testClamp()
	{
		//line 28 "/shared/core/test/thx/TestFloats.hx"
		int _g1 = 0;
		//line 28 "/shared/core/test/thx/TestFloats.hx"
		int _g = this.x;
		//line 28 "/shared/core/test/thx/TestFloats.hx"
		while (( _g1 < _g ))
		{
			//line 28 "/shared/core/test/thx/TestFloats.hx"
			 ++ _g1;
			//line 29 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.floatEquals(((double) (10) ), ((double) (10) ), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testClamp"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (29) )) )}));
			//line 30 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.floatEquals(((double) (10) ), ((double) (10) ), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testClamp"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (30) )) )}));
			//line 31 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.floatEquals(((double) (50) ), ((double) (50) ), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testClamp"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (31) )) )}));
			//line 32 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.floatEquals(((double) (100) ), ((double) (100) ), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testClamp"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (32) )) )}));
			//line 33 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.floatEquals(((double) (100) ), ((double) (100) ), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testClamp"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (33) )) )}));
		}
		
	}
	
	
	public void testClampSym()
	{
		//line 37 "/shared/core/test/thx/TestFloats.hx"
		int _g1 = 0;
		//line 37 "/shared/core/test/thx/TestFloats.hx"
		int _g = this.x;
		//line 37 "/shared/core/test/thx/TestFloats.hx"
		while (( _g1 < _g ))
		{
			//line 37 "/shared/core/test/thx/TestFloats.hx"
			 ++ _g1;
			//line 38 "/shared/core/test/thx/TestFloats.hx"
			double min = ((double) (-10) );
			//line 38 "/shared/core/test/thx/TestFloats.hx"
			double tmp = 0.0;
			//line 38 "/shared/core/test/thx/TestFloats.hx"
			tmp = min;
			//line 38 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.floatEquals(((double) (-10) ), tmp, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testClampSym"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (38) )) )}));
			//line 39 "/shared/core/test/thx/TestFloats.hx"
			double min1 = ((double) (-10) );
			//line 39 "/shared/core/test/thx/TestFloats.hx"
			double tmp1 = 0.0;
			//line 39 "/shared/core/test/thx/TestFloats.hx"
			tmp1 = ((double) (10) );
			//line 39 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.floatEquals(((double) (10) ), tmp1, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testClampSym"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (39) )) )}));
			//line 40 "/shared/core/test/thx/TestFloats.hx"
			double min2 = ((double) (-10) );
			//line 40 "/shared/core/test/thx/TestFloats.hx"
			double tmp2 = 0.0;
			//line 40 "/shared/core/test/thx/TestFloats.hx"
			tmp2 = ((double) (0) );
			//line 40 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.floatEquals(((double) (0) ), tmp2, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testClampSym"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (40) )) )}));
		}
		
	}
	
	
	public void testCompare()
	{
		//line 44 "/shared/core/test/thx/TestFloats.hx"
		int _g1 = 0;
		//line 44 "/shared/core/test/thx/TestFloats.hx"
		int _g = this.x;
		//line 44 "/shared/core/test/thx/TestFloats.hx"
		while (( _g1 < _g ))
		{
			//line 44 "/shared/core/test/thx/TestFloats.hx"
			 ++ _g1;
			//line 45 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.equals(-1, -1, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (45) )) )}));
			//line 46 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.equals(-1, -1, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (46) )) )}));
			//line 47 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.equals(-1, -1, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (47) )) )}));
			//line 48 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.equals(-1, -1, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (48) )) )}));
			//line 49 "/shared/core/test/thx/TestFloats.hx"
			double a =  - (java.lang.Math.PI) ;
			//line 49 "/shared/core/test/thx/TestFloats.hx"
			double b = java.lang.Math.PI;
			//line 49 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.equals(-1, ( (( a < b )) ? (-1) : (( (( a > b )) ? (1) : (0) )) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (49) )) )}));
			//line 51 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.equals(0, 0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (51) )) )}));
			//line 52 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.equals(0, 0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (52) )) )}));
			//line 53 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.equals(0, 0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (53) )) )}));
			//line 54 "/shared/core/test/thx/TestFloats.hx"
			double a1 = java.lang.Math.PI;
			//line 54 "/shared/core/test/thx/TestFloats.hx"
			double b1 = java.lang.Math.PI;
			//line 54 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.equals(0, ( (( a1 < b1 )) ? (-1) : (( (( a1 > b1 )) ? (1) : (0) )) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (54) )) )}));
			//line 56 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.equals(1, 1, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (56) )) )}));
			//line 57 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.equals(1, 1, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (57) )) )}));
			//line 58 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.equals(1, 1, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (58) )) )}));
			//line 59 "/shared/core/test/thx/TestFloats.hx"
			double a2 = java.lang.Math.PI;
			//line 59 "/shared/core/test/thx/TestFloats.hx"
			double b2 =  - (java.lang.Math.PI) ;
			//line 59 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.equals(1, ( (( a2 < b2 )) ? (-1) : (( (( a2 > b2 )) ? (1) : (0) )) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (59) )) )}));
		}
		
	}
	
	
	public void testRound()
	{
		//line 63 "/shared/core/test/thx/TestFloats.hx"
		int _g1 = 0;
		//line 63 "/shared/core/test/thx/TestFloats.hx"
		int _g = this.x;
		//line 63 "/shared/core/test/thx/TestFloats.hx"
		while (( _g1 < _g ))
		{
			//line 63 "/shared/core/test/thx/TestFloats.hx"
			 ++ _g1;
			//line 65 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.floatEquals(123.5, thx.Floats.roundTo(123.456, 1), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (65) )) )}));
			//line 66 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.floatEquals(123.46, thx.Floats.roundTo(123.456, 2), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (66) )) )}));
			//line 67 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.floatEquals(123.456, thx.Floats.roundTo(123.456, 3), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (67) )) )}));
			//line 68 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.floatEquals(123.456, thx.Floats.roundTo(123.456, 4), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (68) )) )}));
			//line 71 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.floatEquals(1234567890.1, thx.Floats.roundTo(1234567890.123456, 1), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (71) )) )}));
			//line 72 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.floatEquals(1234567890.12, thx.Floats.roundTo(1234567890.123456, 2), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (72) )) )}));
			//line 73 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.floatEquals(1234567890.123, thx.Floats.roundTo(1234567890.123456, 3), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (73) )) )}));
			//line 74 "/shared/core/test/thx/TestFloats.hx"
			utest.Assert.floatEquals(1234567890.1235, thx.Floats.roundTo(1234567890.123456, 4), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (74) )) )}));
		}
		
	}
	
	
	public void testAngleDifference()
	{
		//line 78 "/shared/core/test/thx/TestFloats.hx"
		int _g1 = 0;
		//line 78 "/shared/core/test/thx/TestFloats.hx"
		int _g = this.x;
		//line 78 "/shared/core/test/thx/TestFloats.hx"
		while (( _g1 < _g ))
		{
			//line 78 "/shared/core/test/thx/TestFloats.hx"
			 ++ _g1;
			//line 79 "/shared/core/test/thx/TestFloats.hx"
			haxe.root.Array<java.lang.Object> tests = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "d"}, new double[]{((double) (((double) (30) )) ), ((double) (((double) (60) )) ), ((double) (((double) (30) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "d"}, new double[]{((double) (((double) (60) )) ), ((double) (((double) (30) )) ), ((double) (((double) (-30) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "d"}, new double[]{((double) (((double) (0) )) ), ((double) (((double) (190) )) ), ((double) (((double) (-170) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "d"}, new double[]{((double) (((double) (190) )) ), ((double) (((double) (0) )) ), ((double) (((double) (170) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "d"}, new double[]{((double) (((double) (400) )) ), ((double) (((double) (40) )) ), ((double) (((double) (0) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "d"}, new double[]{((double) (((double) (760) )) ), ((double) (((double) (40) )) ), ((double) (((double) (0) )) )})});
			//line 88 "/shared/core/test/thx/TestFloats.hx"
			{
				//line 88 "/shared/core/test/thx/TestFloats.hx"
				int _g2 = 0;
				//line 88 "/shared/core/test/thx/TestFloats.hx"
				while (( _g2 < tests.length ))
				{
					//line 88 "/shared/core/test/thx/TestFloats.hx"
					java.lang.Object test = tests.__get(_g2);
					//line 88 "/shared/core/test/thx/TestFloats.hx"
					 ++ _g2;
					//line 89 "/shared/core/test/thx/TestFloats.hx"
					double d = thx.Floats.angleDifference(((double) (((int) (haxe.lang.Runtime.getField_f(test, "a", true)) )) ), ((double) (((int) (haxe.lang.Runtime.getField_f(test, "b", true)) )) ), null);
					//line 90 "/shared/core/test/thx/TestFloats.hx"
					utest.Assert.equals(((int) (haxe.lang.Runtime.getField_f(test, "d", true)) ), d, ( ( ( ( ( ( ( "expected distance between " + ((int) (haxe.lang.Runtime.getField_f(test, "a", true)) ) ) + " and " ) + ((int) (haxe.lang.Runtime.getField_f(test, "b", true)) ) ) + " to be " ) + ((int) (haxe.lang.Runtime.getField_f(test, "d", true)) ) ) + " but it is " ) + haxe.lang.Runtime.toString(d) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testAngleDifference"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (90) )) )}));
				}
				
			}
			
		}
		
	}
	
	
	public void testInterpolateAngle()
	{
		//line 95 "/shared/core/test/thx/TestFloats.hx"
		int _g1 = 0;
		//line 95 "/shared/core/test/thx/TestFloats.hx"
		int _g = this.x;
		//line 95 "/shared/core/test/thx/TestFloats.hx"
		while (( _g1 < _g ))
		{
			//line 95 "/shared/core/test/thx/TestFloats.hx"
			 ++ _g1;
			//line 96 "/shared/core/test/thx/TestFloats.hx"
			haxe.root.Array<java.lang.Object> tests = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "ccw", "cw", "l", "s"}, new double[]{((double) (((double) (30) )) ), ((double) (((double) (330) )) ), ((double) (((double) (0) )) ), ((double) (((double) (180) )) ), ((double) (((double) (180) )) ), ((double) (((double) (0) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "ccw", "cw", "l", "s"}, new double[]{((double) (((double) (330) )) ), ((double) (((double) (30) )) ), ((double) (((double) (180) )) ), ((double) (((double) (0) )) ), ((double) (((double) (180) )) ), ((double) (((double) (0) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "ccw", "cw", "l", "s"}, new double[]{((double) (((double) (30) )) ), ((double) (((double) (120) )) ), ((double) (((double) (255) )) ), ((double) (((double) (75) )) ), ((double) (((double) (255) )) ), ((double) (((double) (75) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "ccw", "cw", "l", "s"}, new double[]{((double) (((double) (120) )) ), ((double) (((double) (30) )) ), ((double) (((double) (75) )) ), ((double) (((double) (255) )) ), ((double) (((double) (255) )) ), ((double) (((double) (75) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "ccw", "cw", "l", "s"}, new double[]{((double) (((double) (0) )) ), ((double) (((double) (180) )) ), ((double) (((double) (270) )) ), ((double) (((double) (90) )) ), ((double) (((double) (270) )) ), ((double) (((double) (90) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "ccw", "cw", "l", "s"}, new double[]{((double) (((double) (180) )) ), ((double) (((double) (0) )) ), ((double) (((double) (90) )) ), ((double) (((double) (270) )) ), ((double) (((double) (90) )) ), ((double) (((double) (270) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "ccw", "cw", "l", "s"}, new double[]{((double) (((double) (10) )) ), ((double) (((double) (200) )) ), ((double) (((double) (285) )) ), ((double) (((double) (105) )) ), ((double) (((double) (105) )) ), ((double) (((double) (285) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "ccw", "cw", "l", "s"}, new double[]{((double) (((double) (200) )) ), ((double) (((double) (10) )) ), ((double) (((double) (105) )) ), ((double) (((double) (285) )) ), ((double) (((double) (105) )) ), ((double) (((double) (285) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "ccw", "cw", "l", "s"}, new double[]{((double) (((double) (170) )) ), ((double) (((double) (340) )) ), ((double) (((double) (75) )) ), ((double) (((double) (255) )) ), ((double) (((double) (75) )) ), ((double) (((double) (255) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "ccw", "cw", "l", "s"}, new double[]{((double) (((double) (340) )) ), ((double) (((double) (170) )) ), ((double) (((double) (255) )) ), ((double) (((double) (75) )) ), ((double) (((double) (75) )) ), ((double) (((double) (255) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "ccw", "cw", "l", "s"}, new double[]{((double) (((double) (190) )) ), ((double) (((double) (350) )) ), ((double) (((double) (90) )) ), ((double) (((double) (270) )) ), ((double) (((double) (90) )) ), ((double) (((double) (270) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "ccw", "cw", "l", "s"}, new double[]{((double) (((double) (350) )) ), ((double) (((double) (190) )) ), ((double) (((double) (270) )) ), ((double) (((double) (90) )) ), ((double) (((double) (90) )) ), ((double) (((double) (270) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "ccw", "cw", "l", "s"}, new double[]{((double) (((double) (160) )) ), ((double) (((double) (350) )) ), ((double) (((double) (75) )) ), ((double) (((double) (255) )) ), ((double) (((double) (255) )) ), ((double) (((double) (75) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "ccw", "cw", "l", "s"}, new double[]{((double) (((double) (350) )) ), ((double) (((double) (160) )) ), ((double) (((double) (255) )) ), ((double) (((double) (75) )) ), ((double) (((double) (255) )) ), ((double) (((double) (75) )) )})});
			//line 119 "/shared/core/test/thx/TestFloats.hx"
			{
				//line 119 "/shared/core/test/thx/TestFloats.hx"
				int _g2 = 0;
				//line 119 "/shared/core/test/thx/TestFloats.hx"
				while (( _g2 < tests.length ))
				{
					//line 119 "/shared/core/test/thx/TestFloats.hx"
					java.lang.Object test = tests.__get(_g2);
					//line 119 "/shared/core/test/thx/TestFloats.hx"
					 ++ _g2;
					//line 120 "/shared/core/test/thx/TestFloats.hx"
					double r = thx.Floats.interpolateAngle(0.5, ((double) (((int) (haxe.lang.Runtime.getField_f(test, "a", true)) )) ), ((double) (((int) (haxe.lang.Runtime.getField_f(test, "b", true)) )) ), null);
					//line 121 "/shared/core/test/thx/TestFloats.hx"
					utest.Assert.equals(((int) (haxe.lang.Runtime.getField_f(test, "s", true)) ), r, ( ( ( ( ( ( ( "circular interpolation (shortest) at 50% between " + ((int) (haxe.lang.Runtime.getField_f(test, "a", true)) ) ) + " and " ) + ((int) (haxe.lang.Runtime.getField_f(test, "b", true)) ) ) + " should be " ) + ((int) (haxe.lang.Runtime.getField_f(test, "s", true)) ) ) + " but it is " ) + haxe.lang.Runtime.toString(r) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testInterpolateAngle"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (121) )) )}));
					//line 123 "/shared/core/test/thx/TestFloats.hx"
					r = thx.Floats.interpolateAngleWidest(0.5, ((double) (((int) (haxe.lang.Runtime.getField_f(test, "a", true)) )) ), ((double) (((int) (haxe.lang.Runtime.getField_f(test, "b", true)) )) ), null);
					//line 124 "/shared/core/test/thx/TestFloats.hx"
					utest.Assert.equals(((int) (haxe.lang.Runtime.getField_f(test, "l", true)) ), r, ( ( ( ( ( ( ( "circular interpolation (longest) at 50% between " + ((int) (haxe.lang.Runtime.getField_f(test, "a", true)) ) ) + " and " ) + ((int) (haxe.lang.Runtime.getField_f(test, "b", true)) ) ) + " should be " ) + ((int) (haxe.lang.Runtime.getField_f(test, "l", true)) ) ) + " but it is " ) + haxe.lang.Runtime.toString(r) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testInterpolateAngle"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (124) )) )}));
					//line 126 "/shared/core/test/thx/TestFloats.hx"
					r = thx.Floats.interpolateAngleCW(0.5, ((double) (((int) (haxe.lang.Runtime.getField_f(test, "a", true)) )) ), ((double) (((int) (haxe.lang.Runtime.getField_f(test, "b", true)) )) ), null);
					//line 127 "/shared/core/test/thx/TestFloats.hx"
					utest.Assert.equals(((int) (haxe.lang.Runtime.getField_f(test, "cw", true)) ), r, ( ( ( ( ( ( ( "circular interpolation CW at 50% between " + ((int) (haxe.lang.Runtime.getField_f(test, "a", true)) ) ) + " and " ) + ((int) (haxe.lang.Runtime.getField_f(test, "b", true)) ) ) + " should be " ) + ((int) (haxe.lang.Runtime.getField_f(test, "cw", true)) ) ) + " but it is " ) + haxe.lang.Runtime.toString(r) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testInterpolateAngle"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (127) )) )}));
					//line 129 "/shared/core/test/thx/TestFloats.hx"
					r = thx.Floats.interpolateAngleCCW(0.5, ((double) (((int) (haxe.lang.Runtime.getField_f(test, "a", true)) )) ), ((double) (((int) (haxe.lang.Runtime.getField_f(test, "b", true)) )) ), null);
					//line 130 "/shared/core/test/thx/TestFloats.hx"
					utest.Assert.equals(((int) (haxe.lang.Runtime.getField_f(test, "ccw", true)) ), r, ( ( ( ( ( ( ( "circular interpolation CCW at 50% between " + ((int) (haxe.lang.Runtime.getField_f(test, "a", true)) ) ) + " and " ) + ((int) (haxe.lang.Runtime.getField_f(test, "b", true)) ) ) + " should be " ) + ((int) (haxe.lang.Runtime.getField_f(test, "ccw", true)) ) ) + " but it is " ) + haxe.lang.Runtime.toString(r) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testInterpolateAngle"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (130) )) )}));
				}
				
			}
			
		}
		
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 12 "/shared/core/test/thx/TestFloats.hx"
		{
			//line 12 "/shared/core/test/thx/TestFloats.hx"
			boolean __temp_executeDef1 = true;
			//line 12 "/shared/core/test/thx/TestFloats.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					if (field.equals("x")) 
					{
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						this.x = ((int) (value) );
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						return value;
					}
					
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					break;
				}
				
				
			}
			
			//line 12 "/shared/core/test/thx/TestFloats.hx"
			if (__temp_executeDef1) 
			{
				//line 12 "/shared/core/test/thx/TestFloats.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 12 "/shared/core/test/thx/TestFloats.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 12 "/shared/core/test/thx/TestFloats.hx"
		{
			//line 12 "/shared/core/test/thx/TestFloats.hx"
			boolean __temp_executeDef1 = true;
			//line 12 "/shared/core/test/thx/TestFloats.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					if (field.equals("x")) 
					{
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						this.x = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						return value;
					}
					
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					break;
				}
				
				
			}
			
			//line 12 "/shared/core/test/thx/TestFloats.hx"
			if (__temp_executeDef1) 
			{
				//line 12 "/shared/core/test/thx/TestFloats.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 12 "/shared/core/test/thx/TestFloats.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 12 "/shared/core/test/thx/TestFloats.hx"
		{
			//line 12 "/shared/core/test/thx/TestFloats.hx"
			boolean __temp_executeDef1 = true;
			//line 12 "/shared/core/test/thx/TestFloats.hx"
			switch (field.hashCode())
			{
				case 1673940228:
				{
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					if (field.equals("testInterpolateAngle")) 
					{
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testInterpolateAngle")) );
					}
					
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					break;
				}
				
				
				case 120:
				{
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					if (field.equals("x")) 
					{
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						return this.x;
					}
					
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					break;
				}
				
				
				case -521741442:
				{
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					if (field.equals("testAngleDifference")) 
					{
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testAngleDifference")) );
					}
					
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					break;
				}
				
				
				case 906313371:
				{
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					if (field.equals("testNormalize")) 
					{
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testNormalize")) );
					}
					
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					break;
				}
				
				
				case -1192261604:
				{
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					if (field.equals("testRound")) 
					{
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testRound")) );
					}
					
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					break;
				}
				
				
				case -1206223031:
				{
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					if (field.equals("testClamp")) 
					{
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testClamp")) );
					}
					
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					break;
				}
				
				
				case 557885427:
				{
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					if (field.equals("testCompare")) 
					{
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCompare")) );
					}
					
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					break;
				}
				
				
				case 1401132734:
				{
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					if (field.equals("testClampSym")) 
					{
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testClampSym")) );
					}
					
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					break;
				}
				
				
			}
			
			//line 12 "/shared/core/test/thx/TestFloats.hx"
			if (__temp_executeDef1) 
			{
				//line 12 "/shared/core/test/thx/TestFloats.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 12 "/shared/core/test/thx/TestFloats.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 12 "/shared/core/test/thx/TestFloats.hx"
		{
			//line 12 "/shared/core/test/thx/TestFloats.hx"
			boolean __temp_executeDef1 = true;
			//line 12 "/shared/core/test/thx/TestFloats.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					if (field.equals("x")) 
					{
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						return ((double) (this.x) );
					}
					
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					break;
				}
				
				
			}
			
			//line 12 "/shared/core/test/thx/TestFloats.hx"
			if (__temp_executeDef1) 
			{
				//line 12 "/shared/core/test/thx/TestFloats.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 12 "/shared/core/test/thx/TestFloats.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 12 "/shared/core/test/thx/TestFloats.hx"
		{
			//line 12 "/shared/core/test/thx/TestFloats.hx"
			boolean __temp_executeDef1 = true;
			//line 12 "/shared/core/test/thx/TestFloats.hx"
			switch (field.hashCode())
			{
				case 1673940228:
				{
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					if (field.equals("testInterpolateAngle")) 
					{
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						this.testInterpolateAngle();
					}
					
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					break;
				}
				
				
				case 906313371:
				{
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					if (field.equals("testNormalize")) 
					{
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						this.testNormalize();
					}
					
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					break;
				}
				
				
				case -521741442:
				{
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					if (field.equals("testAngleDifference")) 
					{
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						this.testAngleDifference();
					}
					
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					break;
				}
				
				
				case -1206223031:
				{
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					if (field.equals("testClamp")) 
					{
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						this.testClamp();
					}
					
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					break;
				}
				
				
				case -1192261604:
				{
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					if (field.equals("testRound")) 
					{
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						this.testRound();
					}
					
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					break;
				}
				
				
				case 1401132734:
				{
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					if (field.equals("testClampSym")) 
					{
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						this.testClampSym();
					}
					
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					break;
				}
				
				
				case 557885427:
				{
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					if (field.equals("testCompare")) 
					{
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/test/thx/TestFloats.hx"
						this.testCompare();
					}
					
					//line 12 "/shared/core/test/thx/TestFloats.hx"
					break;
				}
				
				
			}
			
			//line 12 "/shared/core/test/thx/TestFloats.hx"
			if (__temp_executeDef1) 
			{
				//line 12 "/shared/core/test/thx/TestFloats.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 12 "/shared/core/test/thx/TestFloats.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 12 "/shared/core/test/thx/TestFloats.hx"
		baseArr.push("x");
		//line 12 "/shared/core/test/thx/TestFloats.hx"
		{
			//line 12 "/shared/core/test/thx/TestFloats.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


