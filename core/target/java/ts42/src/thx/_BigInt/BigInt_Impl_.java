// Generated by Haxe 3.3.0
package thx._BigInt;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public final class BigInt_Impl_
{
	static
	{
		//line 11 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		thx._BigInt.BigInt_Impl_.zero = ((thx.bigint.BigIntImpl) (thx.bigint.Small.zero) );
		//line 12 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		thx._BigInt.BigInt_Impl_.one = ((thx.bigint.BigIntImpl) (thx.bigint.Small.one) );
		//line 13 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		thx._BigInt.BigInt_Impl_.two = ((thx.bigint.BigIntImpl) (thx.bigint.Small.two) );
		//line 14 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		thx._BigInt.BigInt_Impl_.negativeOne = ((thx.bigint.BigIntImpl) (thx.bigint.Small.negativeOne) );
	}
	
	public static thx.bigint.BigIntImpl zero;
	
	public static thx.bigint.BigIntImpl one;
	
	public static thx.bigint.BigIntImpl two;
	
	public static thx.bigint.BigIntImpl negativeOne;
	
	public static thx.bigint.BigIntImpl fromInt(int value)
	{
		//line 17 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return thx.bigint.Bigs.fromInt(value);
	}
	
	
	public static thx.bigint.BigIntImpl fromFloat(double value)
	{
		//line 20 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return thx.bigint.Bigs.fromFloat(value);
	}
	
	
	public static thx.bigint.BigIntImpl fromInt64(long value)
	{
		//line 23 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return thx.bigint.Bigs.fromInt64(value);
	}
	
	
	public static thx.bigint.BigIntImpl fromString(java.lang.String value)
	{
		//line 26 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return thx.bigint.Bigs.parseBase(value, 10);
	}
	
	
	public static thx.bigint.BigIntImpl fromStringWithBase(java.lang.String value, int base)
	{
		//line 29 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return thx.bigint.Bigs.parseBase(value, base);
	}
	
	
	public static thx.bigint.BigIntImpl randomBetween(thx.bigint.BigIntImpl a, thx.bigint.BigIntImpl b)
	{
		//line 32 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		thx.bigint.BigIntImpl low = ((thx.bigint.BigIntImpl) (( (thx._BigInt.BigInt_Impl_.less(((thx.bigint.BigIntImpl) (a) ), b)) ? (((thx.bigint.BigIntImpl) (a) )) : (b) )) );
		//line 32 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		thx.bigint.BigIntImpl high = ((thx.bigint.BigIntImpl) (( (thx._BigInt.BigInt_Impl_.greater(((thx.bigint.BigIntImpl) (a) ), b)) ? (((thx.bigint.BigIntImpl) (a) )) : (b) )) );
		//line 32 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		thx.bigint.BigIntImpl range = ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (high) ).subtract(low)) );
		//line 35 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return ((thx.bigint.BigIntImpl) (low) ).add(range.random());
	}
	
	
	public static int compare(thx.bigint.BigIntImpl a, thx.bigint.BigIntImpl b)
	{
		//line 39 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return ((thx.bigint.BigIntImpl) (a) ).compareTo(b);
	}
	
	
	public static boolean isZero(thx.bigint.BigIntImpl this1)
	{
		//line 42 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return this1.isZero();
	}
	
	
	public static thx.bigint.BigIntImpl abs(thx.bigint.BigIntImpl this1)
	{
		//line 45 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return this1.abs();
	}
	
	
	public static int compareTo(thx.bigint.BigIntImpl this1, thx.bigint.BigIntImpl that)
	{
		//line 48 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return this1.compareTo(that);
	}
	
	
	public static int compareToAbs(thx.bigint.BigIntImpl this1, thx.bigint.BigIntImpl that)
	{
		//line 51 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return this1.compareToAbs(that);
	}
	
	
	public static thx.bigint.BigIntImpl next(thx.bigint.BigIntImpl this1)
	{
		//line 54 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return this1.next();
	}
	
	
	public static thx.bigint.BigIntImpl prev(thx.bigint.BigIntImpl this1)
	{
		//line 57 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return this1.prev();
	}
	
	
	public static thx.bigint.BigIntImpl square(thx.bigint.BigIntImpl this1)
	{
		//line 60 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return this1.square();
	}
	
	
	public static thx.bigint.BigIntImpl pow(thx.bigint.BigIntImpl this1, thx.bigint.BigIntImpl exp)
	{
		//line 63 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return this1.pow(exp);
	}
	
	
	public static boolean isEven(thx.bigint.BigIntImpl this1)
	{
		//line 66 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return this1.isEven();
	}
	
	
	public static boolean isOdd(thx.bigint.BigIntImpl this1)
	{
		//line 69 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return this1.isOdd();
	}
	
	
	public static boolean isNegative(thx.bigint.BigIntImpl this1)
	{
		//line 72 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(this1, "sign", true));
	}
	
	
	public static boolean isPositive(thx.bigint.BigIntImpl this1)
	{
		//line 75 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return ( this1.compareTo(thx._BigInt.BigInt_Impl_.zero) > 0 );
	}
	
	
	public static boolean isUnit(thx.bigint.BigIntImpl this1)
	{
		//line 78 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return this1.isUnit();
	}
	
	
	public static boolean isDivisibleBy(thx.bigint.BigIntImpl this1, thx.bigint.BigIntImpl that)
	{
		//line 81 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		if (((thx.bigint.BigIntImpl) (that) ).isZero()) 
		{
			//line 82 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
			return false;
		}
		
		//line 83 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		if (((thx.bigint.BigIntImpl) (that) ).isUnit()) 
		{
			//line 84 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
			return true;
		}
		
		//line 85 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		if (thx._BigInt.BigInt_Impl_.equals(that, thx._BigInt.BigInt_Impl_.two)) 
		{
			//line 86 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
			return ((thx.bigint.BigIntImpl) (this1) ).isEven();
		}
		
		//line 87 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (this1) ).modulo(that)) ).isZero();
	}
	
	
	public static boolean isPrime(thx.bigint.BigIntImpl this1)
	{
		//line 91 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		thx.bigint.BigIntImpl n = ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (this1) ).abs()) );
		//line 91 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		thx.bigint.BigIntImpl nPrev = ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (n) ).prev()) );
		//line 93 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		if (((thx.bigint.BigIntImpl) (n) ).isUnit()) 
		{
			//line 94 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
			return false;
		}
		
		//line 95 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		if (( ( thx._BigInt.BigInt_Impl_.equals(n, ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(2)) )) || thx._BigInt.BigInt_Impl_.equals(n, ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(3)) )) ) || thx._BigInt.BigInt_Impl_.equals(n, ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(5)) )) )) 
		{
			//line 96 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
			return true;
		}
		
		//line 97 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		if (( ( ((thx.bigint.BigIntImpl) (n) ).isEven() || thx._BigInt.BigInt_Impl_.isDivisibleBy(n, ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(3)) )) ) || thx._BigInt.BigInt_Impl_.isDivisibleBy(n, ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(5)) )) )) 
		{
			//line 98 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
			return false;
		}
		
		//line 99 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		if (thx._BigInt.BigInt_Impl_.less(n, ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(25)) ))) 
		{
			//line 100 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
			return true;
		}
		
		//line 101 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		haxe.root.Array<java.lang.Object> a = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{2, 3, 5, 7, 11, 13, 17, 19});
		//line 101 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		thx.bigint.BigIntImpl b = nPrev;
		//line 101 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		thx.bigint.BigIntImpl d = null;
		//line 101 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		boolean t = false;
		//line 101 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		thx.bigint.BigIntImpl x = null;
		//line 104 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		while (((thx.bigint.BigIntImpl) (b) ).isEven())
		{
			//line 105 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
			b = ((thx.bigint.BigIntImpl) (b) ).divide(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(2)) ));
		}
		
		//line 106 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		{
			//line 106 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
			int _g1 = 0;
			//line 106 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
			int _g = a.length;
			//line 106 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
			while (( _g1 < _g ))
			{
				//line 106 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
				int i = _g1++;
				//line 107 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
				x = thx._BigInt.BigInt_Impl_.modPow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(((int) (haxe.lang.Runtime.toInt(a.__get(i))) ))) ), b, n);
				//line 108 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
				if (( thx._BigInt.BigInt_Impl_.equals(x, thx._BigInt.BigInt_Impl_.one) || thx._BigInt.BigInt_Impl_.equals(x, nPrev) )) 
				{
					//line 109 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
					continue;
				}
				
				//line 110 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
				t = true;
				//line 111 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
				d = b;
				//line 112 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
				while (( t && thx._BigInt.BigInt_Impl_.less(d, nPrev) ))
				{
					//line 113 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
					x = ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (x) ).square()) ).modulo(n);
					//line 114 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
					if (thx._BigInt.BigInt_Impl_.equals(x, nPrev)) 
					{
						//line 115 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
						t = false;
					}
					
					//line 116 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
					d = ((thx.bigint.BigIntImpl) (d) ).multiply(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(2)) ));
				}
				
				//line 118 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
				if (t) 
				{
					//line 119 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
					return false;
				}
				
			}
			
		}
		
		//line 121 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return false;
	}
	
	
	public static thx.bigint.BigIntImpl modPow(thx.bigint.BigIntImpl this1, thx.bigint.BigIntImpl exp, thx.bigint.BigIntImpl mod)
	{
		//line 125 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		if (((thx.bigint.BigIntImpl) (mod) ).isZero()) 
		{
			//line 126 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
			throw haxe.lang.HaxeException.wrap(new thx.Error("Cannot take modPow with modulus 0", null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx._BigInt.BigInt_Impl_", "BigInt.hx", "modPow"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (126) )) )})));
		}
		
		//line 128 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		thx.bigint.BigIntImpl r = thx.bigint.Small.one;
		//line 128 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		thx.bigint.BigIntImpl base = ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (this1) ).modulo(mod)) );
		//line 131 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		if (((thx.bigint.BigIntImpl) (base) ).isZero()) 
		{
			//line 132 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
			return thx.bigint.Small.zero;
		}
		
		//line 134 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		while (( ((thx.bigint.BigIntImpl) (exp) ).compareTo(thx._BigInt.BigInt_Impl_.zero) > 0 ))
		{
			//line 135 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
			if (((thx.bigint.BigIntImpl) (exp) ).isOdd()) 
			{
				//line 136 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
				r = r.multiply(base).modulo(mod);
			}
			
			//line 137 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
			exp = ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (exp) ).divide(thx.bigint.Small.two)) );
			//line 138 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
			base = ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (base) ).square()) ).modulo(mod);
		}
		
		//line 140 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return r;
	}
	
	
	public static thx.bigint.BigIntImpl euclideanModPow(thx.bigint.BigIntImpl this1, thx.bigint.BigIntImpl exp, thx.bigint.BigIntImpl mod)
	{
		//line 144 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		thx.bigint.BigIntImpl x = thx._BigInt.BigInt_Impl_.modPow(this1, exp, mod);
		//line 145 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		if (haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(((thx.bigint.BigIntImpl) (x) ), "sign", true))) 
		{
			//line 145 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
			return ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (x) ).add(mod)) );
		}
		else
		{
			//line 145 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
			return x;
		}
		
	}
	
	
	public static thx.bigint.BigIntImpl max(thx.bigint.BigIntImpl this1, thx.bigint.BigIntImpl that)
	{
		//line 149 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		if (thx._BigInt.BigInt_Impl_.greater(this1, that)) 
		{
			//line 149 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
			return this1;
		}
		else
		{
			//line 149 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
			return that;
		}
		
	}
	
	
	public static thx.bigint.BigIntImpl min(thx.bigint.BigIntImpl this1, thx.bigint.BigIntImpl that)
	{
		//line 152 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		if (thx._BigInt.BigInt_Impl_.less(this1, that)) 
		{
			//line 152 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
			return this1;
		}
		else
		{
			//line 152 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
			return that;
		}
		
	}
	
	
	public static thx.bigint.BigIntImpl gcd(thx.bigint.BigIntImpl this1, thx.bigint.BigIntImpl that)
	{
		//line 155 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		thx.bigint.BigIntImpl a = ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (this1) ).abs()) );
		//line 155 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		thx.bigint.BigIntImpl b = ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (that) ).abs()) );
		//line 157 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		if (( thx._BigInt.BigInt_Impl_.equals(a, b) || ((thx.bigint.BigIntImpl) (a) ).isZero() )) 
		{
			//line 158 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
			return b;
		}
		
		//line 159 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		if (((thx.bigint.BigIntImpl) (b) ).isZero()) 
		{
			//line 160 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
			return a;
		}
		
		//line 161 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		if (((thx.bigint.BigIntImpl) (a) ).isEven()) 
		{
			//line 162 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
			if (((thx.bigint.BigIntImpl) (b) ).isOdd()) 
			{
				//line 163 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
				return thx._BigInt.BigInt_Impl_.gcd(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (a) ).divide(thx.bigint.Small.two)) ), b);
			}
			
			//line 165 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
			return ((thx.bigint.BigIntImpl) (thx._BigInt.BigInt_Impl_.gcd(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (a) ).divide(thx.bigint.Small.two)) ), ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (b) ).divide(thx.bigint.Small.two)) ))) ).multiply(thx.bigint.Small.two);
		}
		
		//line 167 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		if (((thx.bigint.BigIntImpl) (b) ).isEven()) 
		{
			//line 168 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
			return thx._BigInt.BigInt_Impl_.gcd(a, ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (b) ).divide(thx.bigint.Small.two)) ));
		}
		
		//line 170 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		if (thx._BigInt.BigInt_Impl_.greater(a, b)) 
		{
			//line 171 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
			return thx._BigInt.BigInt_Impl_.gcd(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (a) ).subtract(b)) ).divide(thx.bigint.Small.two), b);
		}
		
		//line 173 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return thx._BigInt.BigInt_Impl_.gcd(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (b) ).subtract(a)) ).divide(thx.bigint.Small.two), a);
	}
	
	
	public static thx.bigint.BigIntImpl lcm(thx.bigint.BigIntImpl this1, thx.bigint.BigIntImpl that)
	{
		//line 177 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		thx.bigint.BigIntImpl a = ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (this1) ).abs()) );
		//line 177 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		thx.bigint.BigIntImpl b = ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (that) ).abs()) );
		//line 179 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (a) ).multiply(b)) ).divide(thx._BigInt.BigInt_Impl_.gcd(a, b));
	}
	
	
	public static boolean greaterThan(thx.bigint.BigIntImpl this1, thx.bigint.BigIntImpl that)
	{
		//line 183 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return ( ((thx.bigint.BigIntImpl) (this1) ).compareTo(that) > 0 );
	}
	
	
	public static boolean greater(thx.bigint.BigIntImpl self, thx.bigint.BigIntImpl that)
	{
		//line 187 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return ( ((thx.bigint.BigIntImpl) (self) ).compareTo(that) > 0 );
	}
	
	
	public static boolean greaterEqualsTo(thx.bigint.BigIntImpl this1, thx.bigint.BigIntImpl that)
	{
		//line 190 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return ( ((thx.bigint.BigIntImpl) (this1) ).compareTo(that) >= 0 );
	}
	
	
	public static boolean greaterEquals(thx.bigint.BigIntImpl self, thx.bigint.BigIntImpl that)
	{
		//line 194 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return ( ((thx.bigint.BigIntImpl) (self) ).compareTo(that) >= 0 );
	}
	
	
	public static boolean lessThan(thx.bigint.BigIntImpl this1, thx.bigint.BigIntImpl that)
	{
		//line 197 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return ( ((thx.bigint.BigIntImpl) (this1) ).compareTo(that) < 0 );
	}
	
	
	public static boolean less(thx.bigint.BigIntImpl self, thx.bigint.BigIntImpl that)
	{
		//line 201 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return ( ((thx.bigint.BigIntImpl) (self) ).compareTo(that) < 0 );
	}
	
	
	public static boolean lessEqualsTo(thx.bigint.BigIntImpl this1, thx.bigint.BigIntImpl that)
	{
		//line 204 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return ( ((thx.bigint.BigIntImpl) (this1) ).compareTo(that) <= 0 );
	}
	
	
	public static boolean lessEquals(thx.bigint.BigIntImpl self, thx.bigint.BigIntImpl that)
	{
		//line 208 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return ( ((thx.bigint.BigIntImpl) (self) ).compareTo(that) <= 0 );
	}
	
	
	public static boolean equalsTo(thx.bigint.BigIntImpl this1, thx.bigint.BigIntImpl that)
	{
		//line 211 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return ( ((thx.bigint.BigIntImpl) (this1) ).compareTo(that) == 0 );
	}
	
	
	public static boolean equals(thx.bigint.BigIntImpl self, thx.bigint.BigIntImpl that)
	{
		//line 215 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return ( ((thx.bigint.BigIntImpl) (self) ).compareTo(that) == 0 );
	}
	
	
	public static boolean notEqualsTo(thx.bigint.BigIntImpl this1, thx.bigint.BigIntImpl that)
	{
		//line 218 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return ( ((thx.bigint.BigIntImpl) (this1) ).compareTo(that) != 0 );
	}
	
	
	public static boolean notEquals(thx.bigint.BigIntImpl self, thx.bigint.BigIntImpl that)
	{
		//line 222 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return ( ((thx.bigint.BigIntImpl) (self) ).compareTo(that) != 0 );
	}
	
	
	public static thx.bigint.BigIntImpl add(thx.bigint.BigIntImpl this1, thx.bigint.BigIntImpl that)
	{
		//line 226 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return this1.add(that);
	}
	
	
	public static thx.bigint.BigIntImpl subtract(thx.bigint.BigIntImpl this1, thx.bigint.BigIntImpl that)
	{
		//line 230 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return this1.subtract(that);
	}
	
	
	public static thx.bigint.BigIntImpl preIncrement(thx.bigint.BigIntImpl this1)
	{
		//line 234 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		this1 = ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (this1) ).add(thx.bigint.Small.one)) );
		//line 234 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return this1;
	}
	
	
	public static thx.bigint.BigIntImpl postIncrement(thx.bigint.BigIntImpl this1)
	{
		//line 238 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		thx.bigint.BigIntImpl v = this1;
		//line 239 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		this1 = ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (this1) ).add(thx.bigint.Small.one)) );
		//line 240 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return v;
	}
	
	
	public static thx.bigint.BigIntImpl preDecrement(thx.bigint.BigIntImpl this1)
	{
		//line 245 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		this1 = ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (this1) ).subtract(thx.bigint.Small.one)) );
		//line 245 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return this1;
	}
	
	
	public static thx.bigint.BigIntImpl postDecrement(thx.bigint.BigIntImpl this1)
	{
		//line 249 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		thx.bigint.BigIntImpl v = this1;
		//line 250 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		this1 = ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (this1) ).subtract(thx.bigint.Small.one)) );
		//line 251 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return v;
	}
	
	
	public static thx.bigint.BigIntImpl negate(thx.bigint.BigIntImpl this1)
	{
		//line 256 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return this1.negate();
	}
	
	
	public static thx.bigint.BigIntImpl multiply(thx.bigint.BigIntImpl this1, thx.bigint.BigIntImpl that)
	{
		//line 260 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return this1.multiply(that);
	}
	
	
	public static thx.bigint.BigIntImpl divide(thx.bigint.BigIntImpl this1, thx.bigint.BigIntImpl that)
	{
		//line 264 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return this1.divide(that);
	}
	
	
	public static thx.bigint.BigIntImpl modulo(thx.bigint.BigIntImpl this1, thx.bigint.BigIntImpl that)
	{
		//line 268 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return this1.modulo(that);
	}
	
	
	public static thx.bigint.BigIntImpl shiftLeft(thx.bigint.BigIntImpl this1, int that)
	{
		//line 272 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return this1.shiftLeft(that);
	}
	
	
	public static thx.bigint.BigIntImpl shiftRight(thx.bigint.BigIntImpl this1, int that)
	{
		//line 276 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return this1.shiftRight(that);
	}
	
	
	public static thx.bigint.BigIntImpl not(thx.bigint.BigIntImpl this1)
	{
		//line 280 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return this1.not();
	}
	
	
	public static thx.bigint.BigIntImpl and(thx.bigint.BigIntImpl this1, thx.bigint.BigIntImpl that)
	{
		//line 284 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return this1.and(that);
	}
	
	
	public static thx.bigint.BigIntImpl or(thx.bigint.BigIntImpl this1, thx.bigint.BigIntImpl that)
	{
		//line 288 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return this1.or(that);
	}
	
	
	public static thx.bigint.BigIntImpl xor(thx.bigint.BigIntImpl this1, thx.bigint.BigIntImpl that)
	{
		//line 292 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return this1.xor(that);
	}
	
	
	public static java.lang.Object divMod(thx.bigint.BigIntImpl this1, thx.bigint.BigIntImpl that)
	{
		//line 295 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return this1.divMod(that);
	}
	
	
	public static int toInt(thx.bigint.BigIntImpl this1)
	{
		//line 298 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return this1.toInt();
	}
	
	
	public static double toFloat(thx.bigint.BigIntImpl this1)
	{
		//line 301 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return this1.toFloat();
	}
	
	
	public static long toInt64(thx.bigint.BigIntImpl this1)
	{
		//line 304 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return thx.bigint.Bigs.toInt64(this1);
	}
	
	
	public static java.lang.String toString(thx.bigint.BigIntImpl this1)
	{
		//line 307 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return this1.toString();
	}
	
	
	public static java.lang.String toStringWithBase(thx.bigint.BigIntImpl this1, int base)
	{
		//line 310 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BigInt.hx"
		return this1.toStringWithBase(base);
	}
	
	
}


