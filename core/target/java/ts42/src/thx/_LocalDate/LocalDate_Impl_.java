// Generated by Haxe 3.3.0
package thx._LocalDate;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public final class LocalDate_Impl_
{
	static
	{
		//line 13 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		thx._LocalDate.LocalDate_Impl_.millisPerSecond = ((double) (((int) (1000.0) )) );
		//line 14 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		thx._LocalDate.LocalDate_Impl_.millisPerMinute = ( thx._LocalDate.LocalDate_Impl_.millisPerSecond * 60 );
		//line 15 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		thx._LocalDate.LocalDate_Impl_.millisPerHour = ( thx._LocalDate.LocalDate_Impl_.millisPerMinute * 60 );
		//line 16 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		thx._LocalDate.LocalDate_Impl_.millisPerDay = ( thx._LocalDate.LocalDate_Impl_.millisPerHour * 24 );
		//line 18 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		thx._LocalDate.LocalDate_Impl_.daysPerYear = 365;
		//line 19 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		thx._LocalDate.LocalDate_Impl_.daysPer4Years = ( ( thx._LocalDate.LocalDate_Impl_.daysPerYear * 4 ) + 1 );
		//line 20 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		thx._LocalDate.LocalDate_Impl_.daysPer100Years = ( ( thx._LocalDate.LocalDate_Impl_.daysPer4Years * 25 ) - 1 );
		//line 21 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		thx._LocalDate.LocalDate_Impl_.daysPer400Years = ( ( thx._LocalDate.LocalDate_Impl_.daysPer100Years * 4 ) + 1 );
		//line 23 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		thx._LocalDate.LocalDate_Impl_.unixEpochDays = ( ( ( ( thx._LocalDate.LocalDate_Impl_.daysPer400Years * 4 ) + ( thx._LocalDate.LocalDate_Impl_.daysPer100Years * 3 ) ) + ( thx._LocalDate.LocalDate_Impl_.daysPer4Years * 17 ) ) + thx._LocalDate.LocalDate_Impl_.daysPerYear );
		//line 25 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR = 0;
		//line 26 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY_OF_YEAR = 1;
		//line 27 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH = 2;
		//line 28 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY = 3;
		//line 30 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		thx._LocalDate.LocalDate_Impl_.daysToMonth365 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365});
		//line 31 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		thx._LocalDate.LocalDate_Impl_.daysToMonth366 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366});
	}
	
	public static double millisPerSecond;
	
	public static double millisPerMinute;
	
	public static double millisPerHour;
	
	public static double millisPerDay;
	
	public static int daysPerYear;
	
	public static int daysPer4Years;
	
	public static int daysPer100Years;
	
	public static int daysPer400Years;
	
	public static int unixEpochDays;
	
	public static int DATE_PART_YEAR;
	
	public static int DATE_PART_DAY_OF_YEAR;
	
	public static int DATE_PART_MONTH;
	
	public static int DATE_PART_DAY;
	
	public static haxe.root.Array<java.lang.Object> daysToMonth365;
	
	public static haxe.root.Array<java.lang.Object> daysToMonth366;
	
	public static int now()
	{
		//line 37 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return thx._LocalDate.LocalDate_Impl_.fromDate(haxe.root.Date.now());
	}
	
	
	public static int fromInt(int days)
	{
		//line 44 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return ((int) (days) );
	}
	
	
	public static int fromDate(haxe.root.Date date)
	{
		//line 50 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return thx._LocalDate.LocalDate_Impl_.fromTime(((double) (date.date.getTime()) ));
	}
	
	
	public static int fromTime(double timestamp)
	{
		//line 56 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return ((int) (( ((int) (( timestamp / thx._LocalDate.LocalDate_Impl_.millisPerDay )) ) + thx._LocalDate.LocalDate_Impl_.unixEpochDays )) );
	}
	
	
	public static int fromString(java.lang.String s)
	{
		//line 65 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		if (( s == null )) 
		{
			//line 66 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			throw haxe.lang.HaxeException.wrap(new thx.Error("null String cannot be parsed to LocalDate", null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx._LocalDate.LocalDate_Impl_", "LocalDate.hx", "fromString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (66) )) )})));
		}
		
		//line 67 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		haxe.root.EReg pattern = new haxe.root.EReg("^([-])?(\\d+)[-](\\d{2})[-](\\d{2})$", "");
		//line 68 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		if ( ! (pattern.match(s)) ) 
		{
			//line 69 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			throw haxe.lang.HaxeException.wrap(new thx.Error(( ( "unable to parse DateTime string: \"" + s ) + "\"" ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx._LocalDate.LocalDate_Impl_", "LocalDate.hx", "fromString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (69) )) )})));
		}
		
		//line 71 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		int date = thx._LocalDate.LocalDate_Impl_.create(((int) (haxe.lang.Runtime.toInt(haxe.root.Std.parseInt(pattern.matched(2)))) ), ((int) (haxe.lang.Runtime.toInt(haxe.root.Std.parseInt(pattern.matched(3)))) ), ((int) (haxe.lang.Runtime.toInt(haxe.root.Std.parseInt(pattern.matched(4)))) ));
		//line 76 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		if (haxe.lang.Runtime.valEq(pattern.matched(1), "-")) 
		{
			//line 77 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			int this1 =  - (((int) (date) )) ;
			//line 77 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			return ((int) (this1) );
		}
		
		//line 78 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return date;
	}
	
	
	public static int compare(int a, int b)
	{
		//line 82 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return ( ((int) (a) ) - ((int) (b) ) );
	}
	
	
	public static int create(int year, int month, int day)
	{
		//line 88 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		int days = thx._LocalDate.LocalDate_Impl_.dateToDays(year, month, day);
		//line 89 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return ((int) (days) );
	}
	
	
	public static int dateToDays(int year, int month, int day)
	{
		//line 92 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		int[] month1 = new int[]{month};
		//line 92 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		int[] year1 = new int[]{year};
		//line 93 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		haxe.lang.Function fixMonthYear = new thx._LocalDate.LocalDate_Impl__dateToDays_93__Fun(year1, month1);
		//line 109 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		while (( day < 0 ))
		{
			//line 110 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			month1[0]--;
			//line 111 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			fixMonthYear.__hx_invoke0_o();
			//line 112 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			day += thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(year1[0], month1[0]);
		}
		
		//line 115 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		fixMonthYear.__hx_invoke0_o();
		//line 116 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		int days = 0;
		//line 117 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		while (true)
		{
			//line 117 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			days = thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(year1[0], month1[0]);
			//line 117 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			if ( ! ((( day > days ))) ) 
			{
				//line 117 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				break;
			}
			
			//line 118 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			month1[0]++;
			//line 119 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			fixMonthYear.__hx_invoke0_o();
			//line 120 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			day -= days;
		}
		
		//line 123 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		if (( day == 0 )) 
		{
			//line 124 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			month1[0] -= 1;
			//line 125 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			fixMonthYear.__hx_invoke0_o();
			//line 126 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			day = thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(year1[0], month1[0]);
		}
		
		//line 129 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		fixMonthYear.__hx_invoke0_o();
		//line 131 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return thx._LocalDate.LocalDate_Impl_.rawDateToDays(year1[0], month1[0], day);
	}
	
	
	public static int rawDateToDays(int year, int month, int day)
	{
		//line 135 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		haxe.root.Array<java.lang.Object> days = ( (thx._DateTimeUtc.DateTimeUtc_Impl_.isLeapYear(year)) ? (thx._LocalDate.LocalDate_Impl_.daysToMonth366) : (thx._LocalDate.LocalDate_Impl_.daysToMonth365) );
		//line 136 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		if (( ( day >= 1 ) && ( day <= ( ((int) (haxe.lang.Runtime.toInt(days.__get(month))) ) - ((int) (haxe.lang.Runtime.toInt(days.__get(( month - 1 )))) ) ) ) )) 
		{
			//line 137 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			int y = ( year - 1 );
			//line 138 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			int n = ( ( ( ( ( ( ( y * 365 ) + ((int) (( y / 4 )) ) ) - ((int) (( y / 100 )) ) ) + ((int) (( y / 400 )) ) ) + ((int) (haxe.lang.Runtime.toInt(days.__get(( month - 1 )))) ) ) + day ) - 1 );
			//line 139 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			return n;
		}
		
		//line 141 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		throw haxe.lang.HaxeException.wrap(new thx.Error(( ( ( ( ( "bad year-month-day " + year ) + "-" ) + month ) + "-" ) + day ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx._LocalDate.LocalDate_Impl_", "LocalDate.hx", "rawDateToDays"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (141) )) )})));
	}
	
	
	public static haxe.root.Array<java.lang.Object> daysRange(int start, int end)
	{
		//line 150 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		if (( ( ((int) (end) ) - ((int) (start) ) ) < 0 )) 
		{
			//line 150 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			return new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		}
		
		//line 151 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		haxe.root.Array<java.lang.Object> days = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		//line 152 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		while (( ((int) (start) ) != ((int) (end) ) ))
		{
			//line 153 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			days.push(start);
			//line 154 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			start = thx._LocalDate.LocalDate_Impl_.jump(((int) (start) ), thx.TimePeriod.Day, 1);
		}
		
		//line 156 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		days.push(end);
		//line 157 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return days;
	}
	
	
	public static int getDatePart(int this1, int part)
	{
		//line 161 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		int n = ((int) (this1) );
		//line 162 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		int y400 = ((int) (( this1 / thx._LocalDate.LocalDate_Impl_.daysPer400Years )) );
		//line 163 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		n = ( this1 - ( y400 * thx._LocalDate.LocalDate_Impl_.daysPer400Years ) );
		//line 164 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		int y100 = ((int) (( n / thx._LocalDate.LocalDate_Impl_.daysPer100Years )) );
		//line 165 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		if (( y100 == 4 )) 
		{
			//line 166 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			y100 = 3;
		}
		
		//line 167 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		n -= ( y100 * thx._LocalDate.LocalDate_Impl_.daysPer100Years );
		//line 168 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		int y4 = ((int) (( n / thx._LocalDate.LocalDate_Impl_.daysPer4Years )) );
		//line 169 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		n -= ( y4 * thx._LocalDate.LocalDate_Impl_.daysPer4Years );
		//line 170 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		int y1 = ((int) (( n / thx._LocalDate.LocalDate_Impl_.daysPerYear )) );
		//line 171 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		if (( y1 == 4 )) 
		{
			//line 172 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			y1 = 3;
		}
		
		//line 173 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		if (( part == thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR )) 
		{
			//line 174 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			return ( ( ( ( ( y400 * 400 ) + ( y100 * 100 ) ) + ( y4 * 4 ) ) + y1 ) + 1 );
		}
		
		//line 176 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		n -= ( y1 * thx._LocalDate.LocalDate_Impl_.daysPerYear );
		//line 177 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		if (( part == thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY_OF_YEAR )) 
		{
			//line 178 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			return ( n + 1 );
		}
		
		//line 179 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		boolean leapYear = ( ( y1 == 3 ) && (( ( y4 != 24 ) || ( y100 == 3 ) )) );
		//line 179 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		haxe.root.Array<java.lang.Object> adays = ( (leapYear) ? (thx._LocalDate.LocalDate_Impl_.daysToMonth366) : (thx._LocalDate.LocalDate_Impl_.daysToMonth365) );
		//line 179 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		int m = ( n >> 6 );
		//line 182 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		while (( n >= ((int) (haxe.lang.Runtime.toInt(adays.__get(m))) ) ))
		{
			//line 183 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			 ++ m;
		}
		
		//line 184 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		if (( part == thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH )) 
		{
			//line 185 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			return m;
		}
		
		//line 186 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return ( ( n - ((int) (haxe.lang.Runtime.toInt(adays.__get(( m - 1 )))) ) ) + 1 );
	}
	
	
	public static int _new(int days)
	{
		//line 189 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return ((int) (days) );
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	public static int min(int this1, int other)
	{
		//line 204 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		if (( thx._LocalDate.LocalDate_Impl_.compareTo(this1, other) <= 0 )) 
		{
			//line 204 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			return ((int) (this1) );
		}
		else
		{
			//line 204 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			return other;
		}
		
	}
	
	
	public static int max(int this1, int other)
	{
		//line 207 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		if (( thx._LocalDate.LocalDate_Impl_.compareTo(this1, other) >= 0 )) 
		{
			//line 207 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			return ((int) (this1) );
		}
		else
		{
			//line 207 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			return other;
		}
		
	}
	
	
	public static int jump(int this1, thx.TimePeriod period, int amount)
	{
		//line 218 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		int sec = 0;
		//line 218 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		int min = 0;
		//line 218 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		int hr = 0;
		//line 218 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		int day = thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY);
		//line 218 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		int mon = thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH);
		//line 218 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		int yr = thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR);
		//line 225 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		switch (period)
		{
			case Second:
			{
				//line 226 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				sec = amount;
				//line 226 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				break;
			}
			
			
			case Minute:
			{
				//line 227 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				min = amount;
				//line 227 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				break;
			}
			
			
			case Hour:
			{
				//line 228 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				hr = amount;
				//line 228 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				break;
			}
			
			
			case Day:
			{
				//line 229 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				day += amount;
				//line 229 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				break;
			}
			
			
			case Week:
			{
				//line 230 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				day += ( amount * 7 );
				//line 230 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				break;
			}
			
			
			case Month:
			{
				//line 231 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				mon += amount;
				//line 231 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				break;
			}
			
			
			case Year:
			{
				//line 232 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				yr += amount;
				//line 232 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				break;
			}
			
			
		}
		
		//line 234 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		long time = thx._Time.Time_Impl_.create(hr, min, sec, null);
		//line 235 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		long x = ((long) (( ((long) (time) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
		//line 235 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
		{
			//line 235 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 234 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		int extraDays = ((int) (java.lang.Math.floor(( ((double) (((int) (((long) (x) )) )) ) / 7 ))) );
		//line 237 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return thx._LocalDate.LocalDate_Impl_.create(yr, mon, ( day + extraDays ));
	}
	
	
	public static int daysInThisMonth(int this1)
	{
		//line 246 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH));
	}
	
	
	public static int prevYear(int this1)
	{
		//line 252 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return thx._LocalDate.LocalDate_Impl_.jump(this1, thx.TimePeriod.Year, -1);
	}
	
	
	public static int nextYear(int this1)
	{
		//line 258 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return thx._LocalDate.LocalDate_Impl_.jump(this1, thx.TimePeriod.Year, 1);
	}
	
	
	public static int prevMonth(int this1)
	{
		//line 264 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return thx._LocalDate.LocalDate_Impl_.jump(this1, thx.TimePeriod.Month, -1);
	}
	
	
	public static int nextMonth(int this1)
	{
		//line 270 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return thx._LocalDate.LocalDate_Impl_.jump(this1, thx.TimePeriod.Month, 1);
	}
	
	
	public static int prevWeek(int this1)
	{
		//line 276 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return thx._LocalDate.LocalDate_Impl_.jump(this1, thx.TimePeriod.Week, -1);
	}
	
	
	public static int nextWeek(int this1)
	{
		//line 282 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return thx._LocalDate.LocalDate_Impl_.jump(this1, thx.TimePeriod.Week, 1);
	}
	
	
	public static int prevDay(int this1)
	{
		//line 288 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return thx._LocalDate.LocalDate_Impl_.jump(this1, thx.TimePeriod.Day, -1);
	}
	
	
	public static int nextDay(int this1)
	{
		//line 294 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return thx._LocalDate.LocalDate_Impl_.jump(this1, thx.TimePeriod.Day, 1);
	}
	
	
	public static int snapToWeekDay(int this1, int weekday, java.lang.Object firstDayOfWk)
	{
		//line 305 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		java.lang.Object __temp_firstDayOfWk123 = ( (haxe.lang.Runtime.eq(firstDayOfWk, null)) ? (((java.lang.Object) (0) )) : (firstDayOfWk) );
		//line 306 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		int d = thx._LocalDate.LocalDate_Impl_.get_dayOfWeek(this1);
		//line 306 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		int s = weekday;
		//line 310 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		if (( s < ((int) (haxe.lang.Runtime.toInt(__temp_firstDayOfWk123)) ) )) 
		{
			//line 310 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			s += 7;
		}
		
		//line 311 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		if (( d < ((int) (haxe.lang.Runtime.toInt(__temp_firstDayOfWk123)) ) )) 
		{
			//line 311 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			d += 7;
		}
		
		//line 312 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return thx._LocalDate.LocalDate_Impl_.jump(this1, thx.TimePeriod.Day, ( s - d ));
	}
	
	
	public static int snapNextWeekDay(int this1, int weekday)
	{
		//line 323 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		int d = thx._LocalDate.LocalDate_Impl_.get_dayOfWeek(this1);
		//line 323 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		int s = weekday;
		//line 327 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		if (( s < d )) 
		{
			//line 327 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			s += 7;
		}
		
		//line 328 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return thx._LocalDate.LocalDate_Impl_.jump(this1, thx.TimePeriod.Day, ( s - d ));
	}
	
	
	public static int snapPrevWeekDay(int this1, int weekday)
	{
		//line 339 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		int d = thx._LocalDate.LocalDate_Impl_.get_dayOfWeek(this1);
		//line 339 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		int s = weekday;
		//line 343 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		if (( s > d )) 
		{
			//line 343 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			s -= 7;
		}
		
		//line 344 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return thx._LocalDate.LocalDate_Impl_.jump(this1, thx.TimePeriod.Day, ( s - d ));
	}
	
	
	public static int snapNext(int this1, thx.TimePeriod period)
	{
		//line 353 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		switch (period)
		{
			case Second:
			case Minute:
			case Hour:
			{
				//line 353 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				return ((int) (this1) );
			}
			
			
			case Day:
			{
				//line 357 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				int this2 = ( ((int) (this1) ) + 1 );
				//line 353 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				return ((int) (this2) );
			}
			
			
			case Week:
			{
				//line 359 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				int wd = thx._LocalDate.LocalDate_Impl_.get_dayOfWeek(this1);
				//line 360 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				int this3 = ( ( ((int) (this1) ) + 7 ) - wd );
				//line 353 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				return ((int) (this3) );
			}
			
			
			case Month:
			{
				//line 353 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				return thx._LocalDate.LocalDate_Impl_.create(thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), ( thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH) + 1 ), 1);
			}
			
			
			case Year:
			{
				//line 353 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				return thx._LocalDate.LocalDate_Impl_.create(( thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR) + 1 ), 1, 1);
			}
			
			
		}
		
		//line 352 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return 0;
	}
	
	
	public static int snapPrev(int this1, thx.TimePeriod period)
	{
		//line 373 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		switch (period)
		{
			case Second:
			case Minute:
			case Hour:
			case Day:
			{
				//line 375 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				int this2 = ( ((int) (this1) ) - 1 );
				//line 373 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				return ((int) (this2) );
			}
			
			
			case Week:
			{
				//line 377 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				int wd = thx._LocalDate.LocalDate_Impl_.get_dayOfWeek(this1);
				//line 378 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				int this3 = ( ((int) (this1) ) - wd );
				//line 373 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				return ((int) (this3) );
			}
			
			
			case Month:
			{
				//line 373 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				return thx._LocalDate.LocalDate_Impl_.create(thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH), 1);
			}
			
			
			case Year:
			{
				//line 373 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				return thx._LocalDate.LocalDate_Impl_.create(thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), 1, 1);
			}
			
			
		}
		
		//line 372 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return 0;
	}
	
	
	public static int snapTo(int this1, thx.TimePeriod period)
	{
		//line 391 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		switch (period)
		{
			case Second:
			case Minute:
			case Hour:
			case Day:
			{
				//line 391 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				return ((int) (this1) );
			}
			
			
			case Week:
			{
				//line 395 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				int wd = thx._LocalDate.LocalDate_Impl_.get_dayOfWeek(this1);
				//line 395 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				int mod = ( (( wd <= 3 )) ? ( - (wd) ) : (( 7 - wd )) );
				//line 391 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				return thx._LocalDate.LocalDate_Impl_.create(thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH), ( thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY) + mod ));
			}
			
			
			case Month:
			{
				//line 399 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				int mod1 = ( (( thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY) > ((int) (java.lang.Math.round(( ((double) (thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH))) ) / 2 ))) ) )) ? (1) : (0) );
				//line 391 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				return thx._LocalDate.LocalDate_Impl_.create(thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), ( thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH) + mod1 ), 1);
			}
			
			
			case Year:
			{
				//line 402 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				int mod2 = ( (( ( ((int) (this1) ) - ((int) (thx._LocalDate.LocalDate_Impl_.create(thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), 6, 2)) ) ) > 0 )) ? (1) : (0) );
				//line 391 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
				return thx._LocalDate.LocalDate_Impl_.create(( thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR) + mod2 ), 1, 1);
			}
			
			
		}
		
		//line 390 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return 0;
	}
	
	
	public static boolean sameYear(int this1, int other)
	{
		//line 410 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return ( thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR) == thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (other) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR) );
	}
	
	
	public static boolean sameMonth(int this1, int other)
	{
		//line 416 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		if (thx._LocalDate.LocalDate_Impl_.sameYear(this1, other)) 
		{
			//line 416 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			return ( thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH) == thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (other) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH) );
		}
		else
		{
			//line 416 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			return false;
		}
		
	}
	
	
	public static int withYear(int this1, int year)
	{
		//line 419 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return thx._LocalDate.LocalDate_Impl_.create(year, thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH), thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY));
	}
	
	
	public static int withMonth(int this1, int month)
	{
		//line 422 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return thx._LocalDate.LocalDate_Impl_.create(thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), month, thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY));
	}
	
	
	public static int withDay(int this1, int day)
	{
		//line 425 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return thx._LocalDate.LocalDate_Impl_.create(thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH), day);
	}
	
	
	public static int add(int this1, int days)
	{
		//line 428 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		int this2 = ( this1 + days );
		//line 428 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return ((int) (this2) );
	}
	
	
	public static int subtract(int this1, int days)
	{
		//line 431 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		int this2 = ( this1 - days );
		//line 431 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return ((int) (this2) );
	}
	
	
	public static int subtractDate(int this1, int date)
	{
		//line 434 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return ( ((int) (this1) ) - ((int) (date) ) );
	}
	
	
	public static int addDays(int this1, int days)
	{
		//line 437 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		int this2 = ( this1 + days );
		//line 437 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return ((int) (this2) );
	}
	
	
	public static int addMonths(int this1, int months)
	{
		//line 440 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return thx._LocalDate.LocalDate_Impl_.create(thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), ( thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH) + months ), thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY));
	}
	
	
	public static int addYears(int this1, int years)
	{
		//line 444 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return thx._LocalDate.LocalDate_Impl_.addMonths(this1, ( years * 12 ));
	}
	
	
	public static int compareTo(int this1, int other)
	{
		//line 452 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return ( ((int) (this1) ) - ((int) (other) ) );
	}
	
	
	public static boolean equalsTo(int this1, int that)
	{
		//line 456 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return ( ((int) (this1) ) == ((int) (that) ) );
	}
	
	
	public static boolean equals(int self, int that)
	{
		//line 460 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return ( ((int) (self) ) == ((int) (that) ) );
	}
	
	
	public static boolean notEqualsTo(int this1, int that)
	{
		//line 463 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return ( ((int) (this1) ) != ((int) (that) ) );
	}
	
	
	public static boolean notEquals(int self, int that)
	{
		//line 467 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return ( ((int) (self) ) != ((int) (that) ) );
	}
	
	
	public static boolean nearEqualsTo(int this1, int other, long span)
	{
		//line 470 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		int v = ( ((int) (other) ) - ((int) (this1) ) );
		//line 470 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		int days = ( (( v < 0 )) ? ( - (v) ) : (v) );
		//line 471 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		long x = ((long) (( ((long) (thx._Time.Time_Impl_.abs(span)) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
		//line 471 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
		{
			//line 471 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 471 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return ( days <= ((int) (((long) (x) )) ) );
	}
	
	
	public static boolean greaterThan(int this1, int that)
	{
		//line 475 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return ( ( ((int) (this1) ) - ((int) (that) ) ) > 0 );
	}
	
	
	public static boolean greater(int self, int that)
	{
		//line 479 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return ( ( ((int) (self) ) - ((int) (that) ) ) > 0 );
	}
	
	
	public static boolean greaterEqualsTo(int this1, int that)
	{
		//line 482 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return ( ( ((int) (this1) ) - ((int) (that) ) ) >= 0 );
	}
	
	
	public static boolean greaterEquals(int self, int that)
	{
		//line 486 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return ( ( ((int) (self) ) - ((int) (that) ) ) >= 0 );
	}
	
	
	public static boolean lessThan(int this1, int that)
	{
		//line 489 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return ( ( ((int) (this1) ) - ((int) (that) ) ) < 0 );
	}
	
	
	public static boolean less(int self, int that)
	{
		//line 493 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return ( ( ((int) (self) ) - ((int) (that) ) ) < 0 );
	}
	
	
	public static boolean lessEqualsTo(int this1, int that)
	{
		//line 496 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return ( ( ((int) (this1) ) - ((int) (that) ) ) <= 0 );
	}
	
	
	public static boolean lessEquals(int self, int that)
	{
		//line 500 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return ( ( ((int) (self) ) - ((int) (that) ) ) <= 0 );
	}
	
	
	public static haxe.root.Date toDate(int this1)
	{
		//line 503 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return new haxe.root.Date(thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), ( thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH) - 1 ), thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY), 0, 0, 0);
	}
	
	
	public static java.lang.String toString(int this1)
	{
		//line 511 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		int this2 = ( (( this1 < 0 )) ? ( - (this1) ) : (this1) );
		//line 511 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		int abs = ((int) (this2) );
		//line 512 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		boolean isneg = ( ((int) (this1) ) < 0 );
		//line 513 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return ( (( (isneg) ? ("-") : ("") )) + (( ( ( ( ( "" + thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (abs) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR) ) + "-" ) + thx.Ints.lpad(thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (abs) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH), "0", 2) ) + "-" ) + thx.Ints.lpad(thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (abs) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY), "0", 2) )) );
	}
	
	
	public static int get_days(int this1)
	{
		//line 517 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return this1;
	}
	
	
	public static int get_year(int this1)
	{
		//line 520 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return thx._LocalDate.LocalDate_Impl_.getDatePart(this1, thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR);
	}
	
	
	public static int get_month(int this1)
	{
		//line 523 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return thx._LocalDate.LocalDate_Impl_.getDatePart(this1, thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH);
	}
	
	
	public static int get_day(int this1)
	{
		//line 526 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return thx._LocalDate.LocalDate_Impl_.getDatePart(this1, thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY);
	}
	
	
	public static int get_dayOfWeek(int this1)
	{
		//line 529 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return ( (( ((int) (this1) ) + 1 )) % 7 );
	}
	
	
	public static int get_dayOfYear(int this1)
	{
		//line 532 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return thx._LocalDate.LocalDate_Impl_.getDatePart(this1, thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY_OF_YEAR);
	}
	
	
	public static boolean get_isInLeapYear(int this1)
	{
		//line 535 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.isLeapYear(thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR));
	}
	
	
	public static int get_monthDays(int this1)
	{
		//line 538 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH));
	}
	
	
	public static int self(int this1)
	{
		//line 541 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/LocalDate.hx"
		return ((int) (this1) );
	}
	
	
}


