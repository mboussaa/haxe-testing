// Generated by Haxe 3.3.0
package thx.bigint;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Bigs extends haxe.lang.HxObject
{
	static
	{
		//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		thx.bigint.Bigs.BASE = 10000000;
		//line 7 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		thx.bigint.Bigs.DOUBLE_BASE = 100000000000000.0;
		//line 8 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		thx.bigint.Bigs.LOG_BASE = 7;
		//line 9 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		thx.bigint.Bigs.MAX_INT = 2147483647;
		//line 10 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		thx.bigint.Bigs.MAX_INT_ARR = thx.bigint.Bigs.smallToArray(thx.bigint.Bigs.MAX_INT);
		//line 11 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		thx.bigint.Bigs.LOG_MAX_INT = java.lang.Math.log(((double) (thx.bigint.Bigs.MAX_INT) ));
		//line 13 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		java.lang.Object __temp_stmt1 = null;
		//line 13 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		{
			//line 14 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			haxe.root.Array<java.lang.Object> powers = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1});
			//line 15 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			while (( ((int) (haxe.lang.Runtime.toInt(powers.__get(( powers.length - 1 )))) ) <= 10000000 ))
			{
				//line 16 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				powers.push(( 2 * ((int) (haxe.lang.Runtime.toInt(powers.__get(( powers.length - 1 )))) ) ));
			}
			
			//line 17 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			__temp_stmt1 = powers;
		}
		
		//line 13 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		thx.bigint.Bigs.powersOfTwo = ((haxe.root.Array<java.lang.Object>) (__temp_stmt1) );
		//line 19 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		thx.bigint.Bigs.bigPowersOfTwo = ((haxe.root.Array<thx.bigint.BigIntImpl>) (((haxe.root.Array) (thx.bigint.Bigs.powersOfTwo.map(((haxe.lang.Function) (( (( thx.bigint.Bigs_Anon_19__Fun.__hx_current != null )) ? (thx.bigint.Bigs_Anon_19__Fun.__hx_current) : (thx.bigint.Bigs_Anon_19__Fun.__hx_current = ((thx.bigint.Bigs_Anon_19__Fun) (new thx.bigint.Bigs_Anon_19__Fun()) )) )) ))) )) );
		//line 20 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		thx.bigint.Bigs.powers2Length = thx.bigint.Bigs.powersOfTwo.length;
		//line 21 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		thx.bigint.Bigs.highestPower2 = ((int) (haxe.lang.Runtime.toInt(thx.bigint.Bigs.powersOfTwo.__get(( thx.bigint.Bigs.powers2Length - 1 )))) );
		//line 22 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		thx.bigint.Bigs.bigHighestPower2 = ((thx.bigint.BigIntImpl) (new thx.bigint.Small(((int) (thx.bigint.Bigs.highestPower2) ))) );
	}
	
	public Bigs(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Bigs()
	{
		//line 5 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		thx.bigint.Bigs.__hx_ctor_thx_bigint_Bigs(this);
	}
	
	
	public static void __hx_ctor_thx_bigint_Bigs(thx.bigint.Bigs __temp_me80)
	{
	}
	
	
	public static int BASE;
	
	public static double DOUBLE_BASE;
	
	public static int LOG_BASE;
	
	public static int MAX_INT;
	
	public static haxe.root.Array<java.lang.Object> MAX_INT_ARR;
	
	public static double LOG_MAX_INT;
	
	public static haxe.root.Array<java.lang.Object> powersOfTwo;
	
	public static haxe.root.Array<thx.bigint.BigIntImpl> bigPowersOfTwo;
	
	public static int powers2Length;
	
	public static int highestPower2;
	
	public static thx.bigint.BigIntImpl bigHighestPower2;
	
	public static boolean isPrecise(int value)
	{
		//line 25 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		if ((  - (thx.bigint.Bigs.MAX_INT)  < value )) 
		{
			//line 25 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			return ( value < thx.bigint.Bigs.MAX_INT );
		}
		else
		{
			//line 25 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			return false;
		}
		
	}
	
	
	public static boolean canMultiply(int a, int b)
	{
		//line 28 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		if (( ( a == 0 ) || ( b == 0 ) )) 
		{
			//line 28 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			return true;
		}
		
		//line 29 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int v = ( a * b );
		//line 30 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		if (( a != ( ((double) (v) ) / b ) )) 
		{
			//line 30 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			return false;
		}
		
		//line 31 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		return thx.bigint.Bigs.isPrecise(v);
	}
	
	
	public static boolean canPower(int a, int b)
	{
		//line 35 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		if (( ( a == 0 ) || ( b == 0 ) )) 
		{
			//line 35 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			return true;
		}
		
		//line 36 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		double a1 = java.lang.Math.abs(((double) (a) ));
		//line 37 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		double b1 = java.lang.Math.abs(((double) (b) ));
		//line 38 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int v = 0;
		//line 40 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		try 
		{
			//line 40 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			v = ((int) (java.lang.Math.pow(a1, b1)) );
		}
		catch (java.lang.Throwable __temp_catchallException1)
		{
			//line 40 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			haxe.lang.Exceptions.setException(__temp_catchallException1);
			//line 42 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			java.lang.Object __temp_catchall2 = __temp_catchallException1;
			//line 42 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			if (( __temp_catchall2 instanceof haxe.lang.HaxeException )) 
			{
				//line 42 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				__temp_catchall2 = ((haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
			}
			
			//line 42 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			{
				//line 42 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				java.lang.Object e = __temp_catchall2;
				//line 42 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				return false;
			}
			
		}
		
		
		//line 44 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		if (( ((int) (java.lang.Math.pow(((double) (v) ), ( 1.0 / b1 ))) ) != a1 )) 
		{
			//line 45 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			return false;
		}
		
		//line 46 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		return thx.bigint.Bigs.isPrecise(v);
	}
	
	
	public static boolean canAdd(int a, int b)
	{
		//line 50 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int v = ( a + b );
		//line 51 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		if (( ( ( a > 0 ) && ( b > 0 ) ) && ( v < 0 ) )) 
		{
			//line 52 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			return false;
		}
		
		//line 53 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		return thx.bigint.Bigs.isPrecise(v);
	}
	
	
	public static haxe.root.Array<java.lang.Object> smallToArray(int n)
	{
		//line 57 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		thx.Assert.isTrue(( n >= 0 ), ( "Bigs.smallToArray should always be non-negative: " + n ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.bigint.Bigs", "Bigs.hx", "smallToArray"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (57) )) )}));
		//line 58 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		if (( n < 10000000 )) 
		{
			//line 59 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			return new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{n});
		}
		
		//line 60 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		if (( n < 100000000000000.0 )) 
		{
			//line 61 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			return new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{( n % 10000000 ), ((int) (java.lang.Math.floor(( ((double) (n) ) / 10000000 ))) )});
		}
		
		//line 62 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		return new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{( n % 10000000 ), ( ((int) (java.lang.Math.floor(( ((double) (n) ) / 10000000 ))) ) % 10000000 ), ((int) (java.lang.Math.floor(( n / 100000000000000.0 ))) )});
	}
	
	
	public static java.lang.Object arrayToSmall(haxe.root.Array<java.lang.Object> arr)
	{
		//line 66 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		thx.bigint.Bigs.trim(arr);
		//line 67 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int length = arr.length;
		//line 68 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		if (( ( length < 4 ) && ( thx.bigint.Bigs.compareToAbs(arr, thx.bigint.Bigs.MAX_INT_ARR) < 0 ) )) 
		{
			//line 69 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			switch (length)
			{
				case 0:
				{
					//line 70 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
					return 0;
				}
				
				
				case 1:
				{
					//line 71 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
					return ((int) (haxe.lang.Runtime.toInt(arr.__get(0))) );
				}
				
				
				case 2:
				{
					//line 72 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
					return ( ((int) (haxe.lang.Runtime.toInt(arr.__get(0))) ) + ( ((int) (haxe.lang.Runtime.toInt(arr.__get(1))) ) * 10000000 ) );
				}
				
				
				default:
				{
					//line 73 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
					return ( ((int) (haxe.lang.Runtime.toInt(arr.__get(0))) ) + ( (( ((int) (haxe.lang.Runtime.toInt(arr.__get(1))) ) + ( ((int) (haxe.lang.Runtime.toInt(arr.__get(2))) ) * 10000000 ) )) * 10000000 ) );
				}
				
			}
			
		}
		
		//line 76 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		return null;
	}
	
	
	public static void trim(haxe.root.Array<java.lang.Object> v)
	{
		//line 80 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		while (( v.length > 1 ))
		{
			//line 81 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			if (( ((int) (haxe.lang.Runtime.toInt(v.__get(( v.length - 1 )))) ) != 0 )) 
			{
				//line 82 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				break;
			}
			
			//line 83 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			v.pop();
		}
		
	}
	
	
	public static haxe.root.Array<java.lang.Object> createArray(int length)
	{
		//line 88 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> x = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		//line 89 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		{
			//line 89 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			int _g1 = 0;
			//line 89 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			while (( _g1 < length ))
			{
				//line 89 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				int i = _g1++;
				//line 90 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				x.__set(i, 0);
			}
			
		}
		
		//line 91 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		return x;
	}
	
	
	public static haxe.root.Array<java.lang.Object> createFloatArray(int length)
	{
		//line 95 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> x = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		//line 96 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		{
			//line 96 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			int _g1 = 0;
			//line 96 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			while (( _g1 < length ))
			{
				//line 96 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				int i = _g1++;
				//line 97 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				x.__set(i, 0.0);
			}
			
		}
		
		//line 98 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		return x;
	}
	
	
	public static haxe.root.Array<java.lang.Object> add(haxe.root.Array<java.lang.Object> a, haxe.root.Array<java.lang.Object> b)
	{
		//line 102 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int l_a = a.length;
		//line 102 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int l_b = b.length;
		//line 102 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> r = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		//line 102 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int carry = 0;
		//line 102 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int sum = 0;
		//line 102 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int i = 0;
		//line 107 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		while (( i < l_b ))
		{
			//line 108 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			sum = ( ( ((int) (haxe.lang.Runtime.toInt(a.__get(i))) ) + ((int) (haxe.lang.Runtime.toInt(b.__get(i))) ) ) + carry );
			//line 109 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			if (( sum >= 10000000 )) 
			{
				//line 109 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				carry = 1;
			}
			else
			{
				//line 109 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				carry = 0;
			}
			
			//line 110 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			r.__set(i++, ( sum - ( carry * 10000000 ) ));
		}
		
		//line 112 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		while (( i < l_a ))
		{
			//line 113 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			sum = ( ((int) (haxe.lang.Runtime.toInt(a.__get(i))) ) + carry );
			//line 114 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			if (( sum == 10000000 )) 
			{
				//line 114 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				carry = 1;
			}
			else
			{
				//line 114 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				carry = 0;
			}
			
			//line 115 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			r.__set(i++, ( sum - ( carry * 10000000 ) ));
		}
		
		//line 117 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		if (( carry > 0 )) 
		{
			//line 117 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			r.push(carry);
		}
		
		//line 118 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		return r;
	}
	
	
	public static haxe.root.Array<java.lang.Object> addAny(haxe.root.Array<java.lang.Object> a, haxe.root.Array<java.lang.Object> b)
	{
		//line 122 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		if (( a.length >= b.length )) 
		{
			//line 122 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			return thx.bigint.Bigs.add(a, b);
		}
		
		//line 123 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		return thx.bigint.Bigs.add(b, a);
	}
	
	
	public static haxe.root.Array<java.lang.Object> addSmall(haxe.root.Array<java.lang.Object> a, int carry)
	{
		//line 127 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int l = a.length;
		//line 127 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> r = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		//line 127 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int sum = 0;
		//line 127 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int i = 0;
		//line 130 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		while (( i < l ))
		{
			//line 131 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			sum = ( ( ((int) (haxe.lang.Runtime.toInt(a.__get(i))) ) - 10000000 ) + carry );
			//line 132 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			carry = ((int) (java.lang.Math.floor(( ((double) (sum) ) / 10000000 ))) );
			//line 133 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			r.__set(i++, ( sum - ( carry * 10000000 ) ));
			//line 134 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			 ++ carry;
		}
		
		//line 136 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		while (( carry > 0 ))
		{
			//line 137 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			r.__set(i++, ( carry % 10000000 ));
			//line 138 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			carry = ((int) (java.lang.Math.floor(( ((double) (carry) ) / 10000000 ))) );
		}
		
		//line 140 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		return r;
	}
	
	
	public static int compareToAbs(haxe.root.Array<java.lang.Object> a, haxe.root.Array<java.lang.Object> b)
	{
		//line 144 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		if (( a.length != b.length )) 
		{
			//line 145 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			if (( a.length > b.length )) 
			{
				//line 145 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				return 1;
			}
			else
			{
				//line 145 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				return -1;
			}
			
		}
		
		//line 146 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int i = a.length;
		//line 147 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		while ((  -- i >= 0 ))
		{
			//line 148 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			if (( ((int) (haxe.lang.Runtime.toInt(a.__get(i))) ) != ((int) (haxe.lang.Runtime.toInt(b.__get(i))) ) )) 
			{
				//line 148 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				if (( ((int) (haxe.lang.Runtime.toInt(a.__get(i))) ) > ((int) (haxe.lang.Runtime.toInt(b.__get(i))) ) )) 
				{
					//line 148 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
					return 1;
				}
				else
				{
					//line 148 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
					return -1;
				}
				
			}
			
		}
		
		//line 149 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		return 0;
	}
	
	
	public static haxe.root.Array<java.lang.Object> subtract(haxe.root.Array<java.lang.Object> a, haxe.root.Array<java.lang.Object> b)
	{
		//line 153 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int a_l = a.length;
		//line 153 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int b_l = b.length;
		//line 153 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> r = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		//line 153 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int borrow = 0;
		//line 153 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int i = 0;
		//line 153 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int difference = 0;
		//line 158 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		while (( i < b_l ))
		{
			//line 159 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			difference = ( ( ((int) (haxe.lang.Runtime.toInt(a.__get(i))) ) - borrow ) - ((int) (haxe.lang.Runtime.toInt(b.__get(i))) ) );
			//line 160 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			if (( difference < 0 )) 
			{
				//line 161 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				difference += 10000000;
				//line 162 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				borrow = 1;
			}
			else
			{
				//line 163 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				borrow = 0;
			}
			
			//line 164 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			r.__set(i++, difference);
		}
		
		//line 166 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		while (( i < a_l ))
		{
			//line 167 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			difference = ( ((int) (haxe.lang.Runtime.toInt(a.__get(i))) ) - borrow );
			//line 168 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			if (( difference < 0 )) 
			{
				//line 168 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				difference += 10000000;
			}
			else
			{
				//line 170 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				r.__set(i++, difference);
				//line 171 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				break;
			}
			
			//line 173 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			r.__set(i++, difference);
		}
		
		//line 175 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		while (( i < a_l ))
		{
			//line 176 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			r.__set(i, ((int) (haxe.lang.Runtime.toInt(a.__get(i))) ));
			//line 177 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			 ++ i;
		}
		
		//line 179 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		thx.bigint.Bigs.trim(r);
		//line 180 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		return r;
	}
	
	
	public static thx.bigint.BigIntImpl subtractAny(haxe.root.Array<java.lang.Object> a, haxe.root.Array<java.lang.Object> b, boolean sign)
	{
		//line 184 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> value = null;
		//line 185 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		if (( thx.bigint.Bigs.compareToAbs(a, b) >= 0 )) 
		{
			//line 186 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			value = thx.bigint.Bigs.subtract(a, b);
		}
		else
		{
			//line 188 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			value = thx.bigint.Bigs.subtract(b, a);
			//line 189 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			sign =  ! (sign) ;
		}
		
		//line 191 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		java.lang.Object n = thx.bigint.Bigs.arrayToSmall(value);
		//line 192 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		if (( ! (( null == n )) )) 
		{
			//line 193 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			if (sign) 
			{
				//line 193 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				n = ( - (((int) (haxe.lang.Runtime.toInt(n)) )) );
			}
			
			//line 194 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			return new thx.bigint.Small(((int) (haxe.lang.Runtime.toInt(n)) ));
		}
		
		//line 196 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		return new thx.bigint.Big(value, sign);
	}
	
	
	public static thx.bigint.BigIntImpl subtractSmall(haxe.root.Array<java.lang.Object> a, int b, boolean sign)
	{
		//line 200 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int l = a.length;
		//line 200 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> r = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		//line 200 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int carry =  - (b) ;
		//line 200 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int difference = 0;
		//line 204 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		{
			//line 204 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			int _g1 = 0;
			//line 204 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			while (( _g1 < l ))
			{
				//line 204 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				int i = _g1++;
				//line 205 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				difference = ( ((int) (haxe.lang.Runtime.toInt(a.__get(i))) ) + carry );
				//line 206 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				carry = ((int) (java.lang.Math.floor(( ((double) (difference) ) / 10000000 ))) );
				//line 207 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				r.__set(i, ( (( difference < 0 )) ? (( ( difference % 10000000 ) + 10000000 )) : (difference) ));
			}
			
		}
		
		//line 209 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		java.lang.Object n = thx.bigint.Bigs.arrayToSmall(r);
		//line 210 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		if (( ! (( null == n )) )) 
		{
			//line 211 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			if (sign) 
			{
				//line 211 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				n = ( - (((int) (haxe.lang.Runtime.toInt(n)) )) );
			}
			
			//line 212 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			return new thx.bigint.Small(((int) (haxe.lang.Runtime.toInt(n)) ));
		}
		
		//line 214 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		return new thx.bigint.Big(r, sign);
	}
	
	
	public static haxe.root.Array<java.lang.Object> multiplyLong(haxe.root.Array<java.lang.Object> a, haxe.root.Array<java.lang.Object> b)
	{
		//line 220 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int a_l = a.length;
		//line 220 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int b_l = b.length;
		//line 220 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int l = ( a_l + b_l );
		//line 220 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> r = thx.bigint.Bigs.createFloatArray(l);
		//line 220 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		double product = 0.0;
		//line 220 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		double carry = 0.0;
		//line 220 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		double a_i = 0.0;
		//line 220 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		double b_j = 0.0;
		//line 225 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		{
			//line 225 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			int _g1 = 0;
			//line 225 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			while (( _g1 < a_l ))
			{
				//line 225 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				int i = _g1++;
				//line 226 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				a_i = ((double) (((int) (haxe.lang.Runtime.toInt(a.__get(i))) )) );
				//line 227 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				{
					//line 227 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
					int _g3 = 0;
					//line 227 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
					while (( _g3 < b_l ))
					{
						//line 227 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
						int j = _g3++;
						//line 228 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
						b_j = ((double) (((int) (haxe.lang.Runtime.toInt(b.__get(j))) )) );
						//line 229 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
						product = ( ( a_i * b_j ) + ((double) (haxe.lang.Runtime.toDouble(r.__get(( i + j )))) ) );
						//line 230 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
						double value = ( product / 10000000 );
						//line 230 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
						if (( value < 0.0 )) 
						{
							//line 230 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
							carry = java.lang.Math.ceil(value);
						}
						else
						{
							//line 230 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
							carry = java.lang.Math.floor(value);
						}
						
						//line 231 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
						int tmp = ( i + j );
						//line 231 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
						double value1 = ( product - ( carry * 10000000 ) );
						//line 231 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
						r.__set(tmp, ( (( value1 < 0.0 )) ? (java.lang.Math.ceil(value1)) : (java.lang.Math.floor(value1)) ));
						//line 232 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
						{
							//line 232 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
							int __temp_index1 = ( ( i + j ) + 1 );
							//line 232 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
							r.__set(__temp_index1, ( ((double) (haxe.lang.Runtime.toDouble(r.__get(__temp_index1))) ) + carry ));
						}
						
					}
					
				}
				
			}
			
		}
		
		//line 235 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> arr = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (r.map(((haxe.lang.Function) (( (( thx.bigint.Bigs_multiplyLong_235__Fun.__hx_current != null )) ? (thx.bigint.Bigs_multiplyLong_235__Fun.__hx_current) : (thx.bigint.Bigs_multiplyLong_235__Fun.__hx_current = ((thx.bigint.Bigs_multiplyLong_235__Fun) (new thx.bigint.Bigs_multiplyLong_235__Fun()) )) )) ))) )) );
		//line 236 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		thx.bigint.Bigs.trim(arr);
		//line 237 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		return arr;
	}
	
	
	public static haxe.root.Array<java.lang.Object> multiplySmall(haxe.root.Array<java.lang.Object> a, int b)
	{
		//line 241 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int l = a.length;
		//line 241 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> r = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		//line 241 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		double carry = 0.0;
		//line 241 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		double product = 0.0;
		//line 241 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int i = 0;
		//line 241 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		double bf = ((double) (b) );
		//line 247 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		while (( i < l ))
		{
			//line 249 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			product = ( carry + ( ((int) (haxe.lang.Runtime.toInt(a.__get(i))) ) * bf ) );
			//line 250 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			double value = ( product / 10000000 );
			//line 250 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			if (( value < 0.0 )) 
			{
				//line 250 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				carry = java.lang.Math.ceil(value);
			}
			else
			{
				//line 250 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				carry = java.lang.Math.floor(value);
			}
			
			//line 251 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			r.__set(i++, ( product - ( carry * 10000000 ) ));
		}
		
		//line 253 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		while (( carry > 0 ))
		{
			//line 254 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			r.__set(i++, ( carry % 10000000 ));
			//line 255 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			double value1 = ( carry / 10000000 );
			//line 255 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			if (( value1 < 0.0 )) 
			{
				//line 255 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				carry = java.lang.Math.ceil(value1);
			}
			else
			{
				//line 255 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				carry = java.lang.Math.floor(value1);
			}
			
		}
		
		//line 257 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> arr = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (r.map(((haxe.lang.Function) (( (( thx.bigint.Bigs_multiplySmall_257__Fun.__hx_current != null )) ? (thx.bigint.Bigs_multiplySmall_257__Fun.__hx_current) : (thx.bigint.Bigs_multiplySmall_257__Fun.__hx_current = ((thx.bigint.Bigs_multiplySmall_257__Fun) (new thx.bigint.Bigs_multiplySmall_257__Fun()) )) )) ))) )) );
		//line 258 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		thx.bigint.Bigs.trim(arr);
		//line 259 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		return arr;
	}
	
	
	public static haxe.root.Array<java.lang.Object> shiftLeft(haxe.root.Array<java.lang.Object> x, int n)
	{
		//line 263 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> r = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		//line 264 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		while (( n-- > 0 ))
		{
			//line 264 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			r.push(0);
		}
		
		//line 265 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		return ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (r.concat(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (x) )) ))) )) );
	}
	
	
	public static haxe.root.Array<java.lang.Object> multiplyKaratsuba(haxe.root.Array<java.lang.Object> x, haxe.root.Array<java.lang.Object> y)
	{
		//line 269 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int a = x.length;
		//line 269 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int b = y.length;
		//line 269 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int n = ( (( a > b )) ? (a) : (b) );
		//line 271 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		if (( n <= 400 )) 
		{
			//line 272 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			return thx.bigint.Bigs.multiplyLong(x, y);
		}
		
		//line 273 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		n = ((int) (java.lang.Math.ceil(( ((double) (n) ) / 2 ))) );
		//line 275 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> b1 = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (x.slice(n, null)) )) );
		//line 275 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> a1 = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (x.slice(0, n)) )) );
		//line 275 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> d = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (y.slice(n, null)) )) );
		//line 275 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> c = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (y.slice(0, n)) )) );
		//line 280 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> ac = thx.bigint.Bigs.multiplyKaratsuba(a1, c);
		//line 280 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> bd = thx.bigint.Bigs.multiplyKaratsuba(b1, d);
		//line 280 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> abcd = thx.bigint.Bigs.multiplyKaratsuba(thx.bigint.Bigs.addAny(a1, b1), thx.bigint.Bigs.addAny(c, d));
		//line 284 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		return thx.bigint.Bigs.addAny(thx.bigint.Bigs.addAny(ac, thx.bigint.Bigs.shiftLeft(thx.bigint.Bigs.subtract(thx.bigint.Bigs.subtract(abcd, ac), bd), n)), thx.bigint.Bigs.shiftLeft(bd, ( 2 * n )));
	}
	
	
	public static thx.bigint.BigIntImpl fromInt(int value)
	{
		//line 288 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int abs = ( (( value < 0 )) ? ( - (value) ) : (value) );
		//line 289 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		if (( abs < 10000000 )) 
		{
			//line 290 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			return new thx.bigint.Small(((int) (value) ));
		}
		else
		{
			//line 292 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			return new thx.bigint.Big(thx.bigint.Bigs.smallToArray(abs), ( value < 0 ));
		}
		
	}
	
	
	public static thx.bigint.BigIntImpl fromInt64(long value)
	{
		//line 297 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		return thx.bigint.Bigs.parseBase(( "" + haxe.root.Std.string(((long) (value) )) ), 10);
	}
	
	
	public static long toInt64(thx.bigint.BigIntImpl value)
	{
		//line 301 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		return thx.Int64s.parse(value.toString());
	}
	
	
	public static thx.bigint.BigIntImpl fromFloat(double value)
	{
		//line 304 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		if (( java.lang.Double.isNaN(value) ||  ! (haxe.lang.Runtime.isFinite(value))  )) 
		{
			//line 305 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			throw haxe.lang.HaxeException.wrap(new thx.Error("Conversion to BigInt failed. Number is NaN or Infinite", null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.bigint.Bigs", "Bigs.hx", "fromFloat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (305) )) )})));
		}
		
		//line 307 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		double noFractions = ( value - ( value % 1 ) );
		//line 307 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		thx.bigint.BigIntImpl result = thx.bigint.Small.zero;
		//line 307 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		boolean neg = ( noFractions < 0.0 );
		//line 307 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		double rest = ( (neg) ? ( - (noFractions) ) : (noFractions) );
		//line 307 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int i = 0;
		//line 307 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		double curr = 0.0;
		//line 312 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		while (( rest >= 1 ))
		{
			//line 313 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			curr = ( rest % 2 );
			//line 314 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			rest /= ((double) (2) );
			//line 315 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			if (( curr >= 1 )) 
			{
				//line 316 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				result = result.add(thx.bigint.Small.one.shiftLeft(i));
			}
			
			//line 317 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			 ++ i;
		}
		
		//line 320 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		if (neg) 
		{
			//line 321 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			return result.negate();
		}
		else
		{
			//line 323 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			return result;
		}
		
	}
	
	
	public static haxe.root.Array<java.lang.Object> square(haxe.root.Array<java.lang.Object> a)
	{
		//line 329 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int l = a.length;
		//line 329 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> r = thx.bigint.Bigs.createFloatArray(( l + l ));
		//line 329 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		double product = 0.0;
		//line 329 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		double carry = 0.0;
		//line 329 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		double a_i = 0.0;
		//line 329 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		double a_j = 0.0;
		//line 332 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		{
			//line 332 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			int _g1 = 0;
			//line 332 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			while (( _g1 < l ))
			{
				//line 332 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				int i = _g1++;
				//line 333 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				a_i = ((double) (((int) (haxe.lang.Runtime.toInt(a.__get(i))) )) );
				//line 334 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				{
					//line 334 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
					int _g3 = 0;
					//line 334 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
					while (( _g3 < l ))
					{
						//line 334 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
						int j = _g3++;
						//line 335 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
						a_j = ((double) (((int) (haxe.lang.Runtime.toInt(a.__get(j))) )) );
						//line 336 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
						product = ( ( a_i * a_j ) + ((double) (haxe.lang.Runtime.toDouble(r.__get(( i + j )))) ) );
						//line 337 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
						double value = ( product / 10000000 );
						//line 337 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
						if (( value < 0.0 )) 
						{
							//line 337 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
							carry = java.lang.Math.ceil(value);
						}
						else
						{
							//line 337 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
							carry = java.lang.Math.floor(value);
						}
						
						//line 338 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
						int tmp = ( i + j );
						//line 338 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
						double value1 = ( product - ( carry * 10000000 ) );
						//line 338 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
						r.__set(tmp, ( (( value1 < 0.0 )) ? (java.lang.Math.ceil(value1)) : (java.lang.Math.floor(value1)) ));
						//line 339 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
						{
							//line 339 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
							int __temp_index1 = ( ( i + j ) + 1 );
							//line 339 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
							r.__set(__temp_index1, ( ((double) (haxe.lang.Runtime.toDouble(r.__get(__temp_index1))) ) + carry ));
						}
						
					}
					
				}
				
			}
			
		}
		
		//line 342 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> arr = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (r.map(((haxe.lang.Function) (( (( thx.bigint.Bigs_square_342__Fun.__hx_current != null )) ? (thx.bigint.Bigs_square_342__Fun.__hx_current) : (thx.bigint.Bigs_square_342__Fun.__hx_current = ((thx.bigint.Bigs_square_342__Fun) (new thx.bigint.Bigs_square_342__Fun()) )) )) ))) )) );
		//line 343 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		thx.bigint.Bigs.trim(arr);
		//line 344 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		return arr;
	}
	
	
	public static haxe.root.Array<java.lang.Object> divMod1(haxe.root.Array<java.lang.Object> a, haxe.root.Array<java.lang.Object> b)
	{
		//line 348 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int a_l = a.length;
		//line 348 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int b_l = b.length;
		//line 348 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> result = thx.bigint.Bigs.createFloatArray(b.length);
		//line 348 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		double divisorMostSignificantDigit = ((double) (((int) (haxe.lang.Runtime.toInt(b.__get(( b_l - 1 )))) )) );
		//line 348 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int lambda = ((int) (java.lang.Math.ceil(( 10000000 / (( 2 * divisorMostSignificantDigit )) ))) );
		//line 348 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> remainder = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.bigint.Bigs.multiplySmall(a, lambda).map(((haxe.lang.Function) (( (( thx.bigint.Bigs_divMod1_354__Fun.__hx_current != null )) ? (thx.bigint.Bigs_divMod1_354__Fun.__hx_current) : (thx.bigint.Bigs_divMod1_354__Fun.__hx_current = ((thx.bigint.Bigs_divMod1_354__Fun) (new thx.bigint.Bigs_divMod1_354__Fun()) )) )) ))) )) );
		//line 348 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> divisor = thx.bigint.Bigs.multiplySmall(b, lambda);
		//line 348 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		double quotientDigit = 0.0;
		//line 348 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int shift = 0;
		//line 348 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		double carry = 0.0;
		//line 348 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		double borrow = 0.0;
		//line 348 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int l = 0;
		//line 348 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		double q = 0.0;
		//line 357 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		if (( remainder.length <= a_l )) 
		{
			//line 358 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			remainder.push(0.0);
		}
		
		//line 359 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		divisor.push(0);
		//line 360 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		divisorMostSignificantDigit = ((double) (((int) (haxe.lang.Runtime.toInt(divisor.__get(( b_l - 1 )))) )) );
		//line 361 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		shift = ( a_l - b_l );
		//line 362 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		while (( shift >= 0 ))
		{
			//line 363 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			quotientDigit = 9999999.;
			//line 364 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			quotientDigit = java.lang.Math.floor(( (( ( ((double) (haxe.lang.Runtime.toDouble(remainder.__get(( shift + b_l )))) ) * 10000000 ) + ((double) (haxe.lang.Runtime.toDouble(remainder.__get(( ( shift + b_l ) - 1 )))) ) )) / divisorMostSignificantDigit ));
			//line 365 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			carry = 0.0;
			//line 366 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			borrow = 0.0;
			//line 367 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			l = divisor.length;
			//line 368 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			{
				//line 368 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				int _g1 = 0;
				//line 368 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				while (( _g1 < l ))
				{
					//line 368 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
					int i = _g1++;
					//line 369 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
					carry += ( quotientDigit * ((double) (((int) (haxe.lang.Runtime.toInt(divisor.__get(i))) )) ) );
					//line 370 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
					double value = ( carry / 10000000 );
					//line 370 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
					if (( value < 0.0 )) 
					{
						//line 370 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
						q = java.lang.Math.ceil(value);
					}
					else
					{
						//line 370 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
						q = java.lang.Math.floor(value);
					}
					
					//line 371 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
					borrow += ( ((double) (haxe.lang.Runtime.toDouble(remainder.__get(( shift + i )))) ) - (( carry - ( q * 10000000 ) )) );
					//line 372 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
					carry = q;
					//line 373 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
					if (( borrow < 0.0 )) 
					{
						//line 374 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
						remainder.__set(( shift + i ), ( borrow + 10000000 ));
						//line 375 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
						borrow = -1.0;
					}
					else
					{
						//line 377 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
						remainder.__set(( shift + i ), borrow);
						//line 378 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
						borrow = 0.0;
					}
					
				}
				
			}
			
			//line 381 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			while (( borrow != 0 ))
			{
				//line 382 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				 -- quotientDigit;
				//line 383 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				carry = ((double) (0) );
				//line 384 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				{
					//line 384 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
					int _g11 = 0;
					//line 384 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
					while (( _g11 < l ))
					{
						//line 384 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
						int i1 = _g11++;
						//line 385 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
						carry += ( ( ((double) (haxe.lang.Runtime.toDouble(remainder.__get(( shift + i1 )))) ) - 10000000 ) + ((int) (haxe.lang.Runtime.toInt(divisor.__get(i1))) ) );
						//line 386 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
						if (( carry < 0 )) 
						{
							//line 387 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
							remainder.__set(( shift + i1 ), ( carry + 10000000 ));
							//line 388 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
							carry = ((double) (0) );
						}
						else
						{
							//line 390 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
							remainder.__set(( shift + i1 ), carry);
							//line 391 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
							carry = ((double) (1) );
						}
						
					}
					
				}
				
				//line 394 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				borrow += carry;
			}
			
			//line 396 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			result.__set(shift, quotientDigit);
			//line 397 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			 -- shift;
		}
		
		//line 400 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> arr = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (remainder.map(((haxe.lang.Function) (( (( thx.bigint.Bigs_divMod1_400__Fun.__hx_current != null )) ? (thx.bigint.Bigs_divMod1_400__Fun.__hx_current) : (thx.bigint.Bigs_divMod1_400__Fun.__hx_current = ((thx.bigint.Bigs_divMod1_400__Fun) (new thx.bigint.Bigs_divMod1_400__Fun()) )) )) ))) )) );
		//line 401 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> remainder1 = ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(thx.bigint.Bigs.divModSmall(arr, lambda), "q", true)) );
		//line 402 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> arr1 = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (result.map(((haxe.lang.Function) (( (( thx.bigint.Bigs_divMod1_402__Fun.__hx_current != null )) ? (thx.bigint.Bigs_divMod1_402__Fun.__hx_current) : (thx.bigint.Bigs_divMod1_402__Fun.__hx_current = ((thx.bigint.Bigs_divMod1_402__Fun) (new thx.bigint.Bigs_divMod1_402__Fun()) )) )) ))) )) );
		//line 403 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		thx.bigint.Bigs.trim(arr1);
		//line 405 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		java.lang.Object q1 = null;
		//line 405 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		{
			//line 406 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			java.lang.Object __temp_odecl1 = thx.bigint.Bigs.arrayToSmall(arr1);
			//line 405 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			q1 = new haxe.lang.DynamicObject(new java.lang.String[]{"big", "small"}, new java.lang.Object[]{arr1, __temp_odecl1}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 405 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		java.lang.Object r = null;
		//line 409 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		{
			//line 410 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			java.lang.Object __temp_odecl2 = thx.bigint.Bigs.arrayToSmall(remainder1);
			//line 409 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			r = new haxe.lang.DynamicObject(new java.lang.String[]{"big", "small"}, new java.lang.Object[]{remainder1, __temp_odecl2}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 413 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		return new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{q1, r});
	}
	
	
	public static haxe.root.Array<java.lang.Object> divMod2(haxe.root.Array<java.lang.Object> a, haxe.root.Array<java.lang.Object> b)
	{
		//line 418 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int a_l = a.length;
		//line 418 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int b_l = b.length;
		//line 418 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> result = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		//line 418 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> part = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		//line 418 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int guess = 0;
		//line 418 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int xlen = 0;
		//line 418 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int highx = 0;
		//line 418 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int highy = 0;
		//line 418 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> check = null;
		//line 423 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		while (( a_l != 0 ))
		{
			//line 424 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			part.unshift(((int) (haxe.lang.Runtime.toInt(a.__get( -- a_l))) ));
			//line 425 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			if (( thx.bigint.Bigs.compareToAbs(part, b) < 0 )) 
			{
				//line 426 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				result.push(0);
				//line 427 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				continue;
			}
			
			//line 429 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			xlen = part.length;
			//line 430 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			highx = ( ( ((int) (haxe.lang.Runtime.toInt(part.__get(( xlen - 1 )))) ) * 10000000 ) + ((int) (haxe.lang.Runtime.toInt(part.__get(( xlen - 2 )))) ) );
			//line 431 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			highy = ( ( ((int) (haxe.lang.Runtime.toInt(b.__get(( b_l - 1 )))) ) * 10000000 ) + ((int) (haxe.lang.Runtime.toInt(b.__get(( b_l - 2 )))) ) );
			//line 432 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			if (( xlen > b_l )) 
			{
				//line 433 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				highx = ( (( highx + 1 )) * 10000000 );
			}
			
			//line 435 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			guess = ((int) (java.lang.Math.ceil(( ((double) (highx) ) / highy ))) );
			//line 436 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			while (true)
			{
				//line 437 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				check = thx.bigint.Bigs.multiplySmall(b, guess);
				//line 438 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				if (( thx.bigint.Bigs.compareToAbs(check, part) <= 0 )) 
				{
					//line 438 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
					break;
				}
				
				//line 439 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				 -- guess;
				//line 436 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				if ( ! ((( guess != 0 ))) ) 
				{
					//line 436 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
					break;
				}
				
			}
			
			//line 441 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			result.push(guess);
			//line 442 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			part = thx.bigint.Bigs.subtract(part, check);
		}
		
		//line 444 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		result.reverse();
		//line 445 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		java.lang.Object __temp_stmt3 = null;
		//line 445 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		{
			//line 446 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			java.lang.Object __temp_odecl1 = thx.bigint.Bigs.arrayToSmall(result);
			//line 445 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			__temp_stmt3 = new haxe.lang.DynamicObject(new java.lang.String[]{"big", "small"}, new java.lang.Object[]{result, __temp_odecl1}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 448 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		java.lang.Object __temp_stmt4 = null;
		//line 448 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		{
			//line 449 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			java.lang.Object __temp_odecl2 = thx.bigint.Bigs.arrayToSmall(part);
			//line 448 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			__temp_stmt4 = new haxe.lang.DynamicObject(new java.lang.String[]{"big", "small"}, new java.lang.Object[]{part, __temp_odecl2}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 445 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		return new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{__temp_stmt3, __temp_stmt4});
	}
	
	
	public static java.lang.Object divModSmall(haxe.root.Array<java.lang.Object> value, int lambda)
	{
		//line 455 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int length = value.length;
		//line 455 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> quotient = thx.bigint.Bigs.createArray(length);
		//line 455 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int i = 0;
		//line 455 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		double q = 0.0;
		//line 455 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		double remainder = 0.0;
		//line 455 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		double divisor = 0.0;
		//line 458 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		remainder = ((double) (0) );
		//line 459 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		i = ( length - 1 );
		//line 460 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		while (( i >= 0 ))
		{
			//line 461 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			divisor = ( ( remainder * 10000000 ) + ((int) (haxe.lang.Runtime.toInt(value.__get(i))) ) );
			//line 462 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			double value1 = ( divisor / lambda );
			//line 462 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			if (( value1 < 0.0 )) 
			{
				//line 462 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				q = java.lang.Math.ceil(value1);
			}
			else
			{
				//line 462 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				q = java.lang.Math.floor(value1);
			}
			
			//line 463 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			remainder = ( divisor - ( q * lambda ) );
			//line 464 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			quotient.__set(i--, ((int) (q) ));
		}
		
		//line 466 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		{
			//line 466 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			int __temp_odecl1 = ( (( remainder < 0.0 )) ? (((int) (java.lang.Math.ceil(remainder)) )) : (((int) (java.lang.Math.floor(remainder)) )) );
			//line 466 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			return new haxe.lang.DynamicObject(new java.lang.String[]{"q"}, new java.lang.Object[]{quotient}, new java.lang.String[]{"r"}, new double[]{((double) (((double) (__temp_odecl1) )) )});
		}
		
	}
	
	
	public static thx.bigint.BigIntImpl parseBase(java.lang.String text, int base)
	{
		//line 470 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		thx.bigint.BigIntImpl val = thx.bigint.Small.zero;
		//line 470 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		thx.bigint.BigIntImpl pow = thx.bigint.Small.one;
		//line 470 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		thx.bigint.Small bigBase = new thx.bigint.Small(((int) (base) ));
		//line 470 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		boolean isNegative = haxe.lang.Runtime.valEq(haxe.lang.StringExt.substring(text, 0, 1), "-");
		//line 474 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		if (( ( 2 > base ) || ( base > 36 ) )) 
		{
			//line 475 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			throw haxe.lang.HaxeException.wrap(new thx.Error(( ( "base (" + base ) + ") must be a number between 2 ad 36" ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.bigint.Bigs", "Bigs.hx", "parseBase"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (475) )) )})));
		}
		
		//line 476 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		if (isNegative) 
		{
			//line 477 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			text = haxe.lang.StringExt.substring(text, 1, null);
		}
		
		//line 479 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		text = thx.Strings.trimCharsLeft(text, "0").toLowerCase();
		//line 480 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		if (( text.length() == 0 )) 
		{
			//line 481 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			text = "0";
		}
		
		//line 483 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int e = 0;
		//line 484 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		boolean tmp = false;
		//line 484 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		if (( base == 10 )) 
		{
			//line 484 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			e = haxe.lang.StringExt.indexOf(text, "e", null);
			//line 484 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			tmp = ( e > 0 );
		}
		else
		{
			//line 484 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			tmp = false;
		}
		
		//line 484 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		if (tmp) 
		{
			//line 485 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			java.lang.String sexp = haxe.lang.StringExt.substring(text, ( e + 1 ), null);
			//line 486 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			text = haxe.lang.StringExt.substring(text, 0, e);
			//line 487 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			java.lang.Object exp = ( (sexp.startsWith("+")) ? (haxe.root.Std.parseInt(haxe.lang.StringExt.substring(sexp, 1, null))) : (haxe.root.Std.parseInt(sexp)) );
			//line 488 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			int decimalPlace = haxe.lang.StringExt.indexOf(text, ".", null);
			//line 489 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			if (( decimalPlace >= 0 )) 
			{
				//line 490 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				exp = ( ((int) (haxe.lang.Runtime.toInt(exp)) ) - ((int) (( text.length() - decimalPlace )) ) );
				//line 491 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				text = ( haxe.lang.StringExt.substring(text, 0, decimalPlace) + haxe.lang.StringExt.substring(text, ( 1 + decimalPlace ), null) );
			}
			
			//line 495 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			text = thx.Strings.rpad(text, "0", ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.plus(text.length(), exp))) ));
		}
		
		//line 497 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		int length = text.length();
		//line 499 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		if (( length <= ( thx.bigint.Bigs.LOG_MAX_INT / java.lang.Math.log(((double) (base) )) ) )) 
		{
			//line 500 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			return new thx.bigint.Small(((int) (( ((int) (haxe.lang.Runtime.toInt(thx.Ints.parse(text, base))) ) * ((int) ((( (isNegative) ? (-1) : (1) ))) ) )) ));
		}
		
		//line 502 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<thx.bigint.Small> digits = new haxe.root.Array<thx.bigint.Small>(new thx.bigint.Small[]{});
		//line 503 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		{
			//line 503 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			int _g1 = 0;
			//line 503 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			while (( _g1 < length ))
			{
				//line 503 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				int i = _g1++;
				//line 504 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				java.lang.Object charCode = haxe.lang.StringExt.charCodeAt(text, i);
				//line 505 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				if (( ( haxe.lang.Runtime.compare(48, charCode) <= 0 ) && ( haxe.lang.Runtime.compare(charCode, 57) <= 0 ) )) 
				{
					//line 506 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
					digits.push(new thx.bigint.Small(((int) (( ((int) (haxe.lang.Runtime.toInt(charCode)) ) - ((int) (48) ) )) )));
				}
				else
				{
					//line 507 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
					if (( ( haxe.lang.Runtime.compare(97, charCode) <= 0 ) && ( haxe.lang.Runtime.compare(charCode, 122) <= 0 ) )) 
					{
						//line 508 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
						digits.push(new thx.bigint.Small(((int) (( ((int) (haxe.lang.Runtime.toInt(charCode)) ) - ((int) (87) ) )) )));
					}
					else
					{
						//line 509 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
						throw haxe.lang.HaxeException.wrap(new thx.Error(( ( "" + text ) + " is not a valid string" ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.bigint.Bigs", "Bigs.hx", "parseBase"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (509) )) )})));
					}
					
				}
				
			}
			
		}
		
		//line 511 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		digits.reverse();
		//line 512 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		thx.bigint.BigIntImpl mul = null;
		//line 513 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		{
			//line 513 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			int _g11 = 0;
			//line 513 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			int _g = digits.length;
			//line 513 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			while (( _g11 < _g ))
			{
				//line 513 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				int i1 = _g11++;
				//line 514 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				mul = digits.__get(i1).multiply(pow);
				//line 515 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				val = val.add(mul);
				//line 516 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				pow = pow.multiply(bigBase);
			}
			
		}
		
		//line 518 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		if (isNegative) 
		{
			//line 518 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			return val.negate();
		}
		else
		{
			//line 518 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			return val;
		}
		
	}
	
	
	public static thx.bigint.BigIntImpl bitwise(thx.bigint.BigIntImpl x, thx.bigint.BigIntImpl y, haxe.lang.Function fn)
	{
		//line 522 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		boolean xSign = haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(x, "sign", true));
		//line 522 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		boolean ySign = haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(y, "sign", true));
		//line 524 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		thx.bigint.BigIntImpl xRem = ( (xSign) ? (x.not()) : (x) );
		//line 524 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		thx.bigint.BigIntImpl yRem = ( (ySign) ? (y.not()) : (y) );
		//line 526 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> xBits = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		//line 526 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> yBits = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		//line 528 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		boolean xStop = false;
		//line 528 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		boolean yStop = false;
		//line 530 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		while ((  ! (xStop)  ||  ! (yStop)  ))
		{
			//line 531 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			if (xRem.isZero()) 
			{
				//line 532 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				xStop = true;
				//line 533 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				xBits.push(( (xSign) ? (1) : (0) ));
			}
			else
			{
				//line 534 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				if (xSign) 
				{
					//line 535 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
					xBits.push(( (xRem.isEven()) ? (1) : (0) ));
				}
				else
				{
					//line 537 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
					xBits.push(( (xRem.isEven()) ? (0) : (1) ));
				}
				
			}
			
			//line 539 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			if (yRem.isZero()) 
			{
				//line 540 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				yStop = true;
				//line 541 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				yBits.push(( (ySign) ? (1) : (0) ));
			}
			else
			{
				//line 542 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				if (ySign) 
				{
					//line 543 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
					yBits.push(( (yRem.isEven()) ? (1) : (0) ));
				}
				else
				{
					//line 545 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
					yBits.push(( (yRem.isEven()) ? (0) : (1) ));
				}
				
			}
			
			//line 547 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			xRem = xRem.divide(thx.bigint.Small.two);
			//line 548 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			yRem = yRem.divide(thx.bigint.Small.two);
		}
		
		//line 550 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		haxe.root.Array<java.lang.Object> result = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		//line 551 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		{
			//line 551 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			int _g1 = 0;
			//line 551 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			int _g = xBits.length;
			//line 551 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			while (( _g1 < _g ))
			{
				//line 551 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				int i = _g1++;
				//line 552 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
				result.push(((int) (fn.__hx_invoke2_f(((double) (((int) (haxe.lang.Runtime.toInt(xBits.__get(i))) )) ), haxe.lang.Runtime.undefined, ((double) (((int) (haxe.lang.Runtime.toInt(yBits.__get(i))) )) ), haxe.lang.Runtime.undefined)) ));
			}
			
		}
		
		//line 554 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		thx.bigint.BigIntImpl a = thx.bigint.Bigs.fromInt(((int) (haxe.lang.Runtime.toInt(result.pop())) ));
		//line 554 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		thx.bigint.BigIntImpl p = thx.bigint.Small.two.pow(thx.bigint.Bigs.fromInt(result.length));
		//line 554 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		thx.bigint.BigIntImpl sum = a.negate().multiply(p);
		//line 557 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		while (( result.length > 0 ))
		{
			//line 558 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			a = thx.bigint.Bigs.fromInt(((int) (haxe.lang.Runtime.toInt(result.pop())) ));
			//line 559 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			p = thx.bigint.Small.two.pow(thx.bigint.Bigs.fromInt(result.length));
			//line 560 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
			sum = sum.add(a.multiply(p));
		}
		
		//line 562 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		return sum;
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 5 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		return new thx.bigint.Bigs(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 5 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Bigs.hx"
		return new thx.bigint.Bigs();
	}
	
	
}


