// Generated by Haxe 3.3.0
package thx.bigint;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Small extends haxe.lang.HxObject implements thx.bigint.BigIntImpl
{
	static
	{
		//line 4 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		thx.bigint.Small.zero = new thx.bigint.Small(((int) (0) ));
		//line 5 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		thx.bigint.Small.one = new thx.bigint.Small(((int) (1) ));
		//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		thx.bigint.Small.two = new thx.bigint.Small(((int) (2) ));
		//line 7 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		thx.bigint.Small.ten = new thx.bigint.Small(((int) (10) ));
		//line 8 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		thx.bigint.Small.negativeOne = new thx.bigint.Small(((int) (-1) ));
	}
	
	public Small(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Small(int value)
	{
		//line 14 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		thx.bigint.Small.__hx_ctor_thx_bigint_Small(this, value);
	}
	
	
	public static void __hx_ctor_thx_bigint_Small(thx.bigint.Small __temp_me58, int value)
	{
		//line 15 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		__temp_me58.sign = ( value < 0 );
		//line 16 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		__temp_me58.value = value;
		//line 17 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		__temp_me58.isSmall = true;
	}
	
	
	public static thx.bigint.Small zero;
	
	public static thx.bigint.Small one;
	
	public static thx.bigint.Small two;
	
	public static thx.bigint.Small ten;
	
	public static thx.bigint.Small negativeOne;
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return new thx.bigint.Small(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return new thx.bigint.Small(((int) (haxe.lang.Runtime.toInt(arr.__get(0))) ));
	}
	
	
	public int value;
	
	public boolean sign;
	
	public boolean isSmall;
	
	public thx.bigint.BigIntImpl add(thx.bigint.BigIntImpl that)
	{
		//line 21 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		if (this.isZero()) 
		{
			//line 22 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return that;
		}
		
		//line 23 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		if (that.isZero()) 
		{
			//line 24 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return this;
		}
		
		//line 25 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		if (( this.sign != haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(that, "sign", true)) )) 
		{
			//line 26 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return this.subtract(that.negate());
		}
		
		//line 27 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		if (haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(that, "isSmall", true))) 
		{
			//line 27 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return this.addSmall(((thx.bigint.Small) (that) ));
		}
		else
		{
			//line 27 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return this.addBig(((thx.bigint.Big) (that) ));
		}
		
	}
	
	
	public thx.bigint.BigIntImpl addSmall(thx.bigint.Small small)
	{
		//line 32 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		if (thx.bigint.Bigs.canAdd(this.value, small.value)) 
		{
			//line 37 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return new thx.bigint.Small(((int) (( this.value + small.value )) ));
		}
		else
		{
			//line 40 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			int v = small.value;
			//line 40 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			haxe.root.Array<java.lang.Object> tmp = thx.bigint.Bigs.smallToArray(( (( v < 0 )) ? ( - (v) ) : (v) ));
			//line 41 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			int v1 = this.value;
			//line 39 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return new thx.bigint.Big(thx.bigint.Bigs.addSmall(tmp, ( (( v1 < 0 )) ? ( - (v1) ) : (v1) )), this.sign);
		}
		
	}
	
	
	public thx.bigint.BigIntImpl addBig(thx.bigint.Big big)
	{
		//line 49 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		int v = this.value;
		//line 48 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return new thx.bigint.Big(thx.bigint.Bigs.addSmall(big.value, ( (( v < 0 )) ? ( - (v) ) : (v) )), this.sign);
	}
	
	
	public thx.bigint.BigIntImpl subtract(thx.bigint.BigIntImpl that)
	{
		//line 54 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		if (this.isZero()) 
		{
			//line 55 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return that.negate();
		}
		
		//line 56 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		if (that.isZero()) 
		{
			//line 57 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return this;
		}
		
		//line 58 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		if (( this.sign != haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(that, "sign", true)) )) 
		{
			//line 59 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return this.add(that.negate());
		}
		
		//line 60 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		if (haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(that, "isSmall", true))) 
		{
			//line 60 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return this.subtractSmall(((thx.bigint.Small) (that) ));
		}
		else
		{
			//line 60 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return this.subtractBig(((thx.bigint.Big) (that) ));
		}
		
	}
	
	
	public thx.bigint.BigIntImpl subtractSmall(thx.bigint.Small small)
	{
		//line 64 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return new thx.bigint.Small(((int) (( this.value - small.value )) ));
	}
	
	
	public thx.bigint.BigIntImpl subtractBig(thx.bigint.Big big)
	{
		//line 67 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		if (( big.compareToAbsSmall(this) < 0 )) 
		{
			//line 68 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return new thx.bigint.Small(((int) (( this.value - big.toInt() )) ));
		}
		
		//line 69 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		int v = this.value;
		//line 69 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return thx.bigint.Bigs.subtractSmall(big.value, ( (( v < 0 )) ? ( - (v) ) : (v) ), ( this.value >= 0 ));
	}
	
	
	public thx.bigint.BigIntImpl divide(thx.bigint.BigIntImpl that)
	{
		//line 73 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return ((thx.bigint.BigIntImpl) (haxe.lang.Runtime.getField(this.divMod(that), "quotient", true)) );
	}
	
	
	public java.lang.Object divMod(thx.bigint.BigIntImpl that)
	{
		//line 76 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		if (that.isZero()) 
		{
			//line 77 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			throw haxe.lang.HaxeException.wrap(new thx.Error("division by zero", null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.bigint.Small", "Small.hx", "divMod"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (77) )) )})));
		}
		
		//line 78 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		if (haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(that, "isSmall", true))) 
		{
			//line 78 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return this.divModSmall(((thx.bigint.Small) (that) ));
		}
		else
		{
			//line 78 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return this.divModBig(((thx.bigint.Big) (that) ));
		}
		
	}
	
	
	public java.lang.Object divModSmall(thx.bigint.Small small)
	{
		//line 83 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		double value = ( ((double) (this.value) ) / small.value );
		//line 82 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		{
			//line 83 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			thx.bigint.BigIntImpl __temp_odecl1 = ((thx.bigint.BigIntImpl) (new thx.bigint.Small(((int) (( (( value < 0.0 )) ? (((int) (java.lang.Math.ceil(value)) )) : (((int) (java.lang.Math.floor(value)) )) )) ))) );
			//line 84 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			thx.bigint.BigIntImpl __temp_odecl2 = ((thx.bigint.BigIntImpl) (new thx.bigint.Small(((int) (( this.value % small.value )) ))) );
			//line 82 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return new haxe.lang.DynamicObject(new java.lang.String[]{"quotient", "remainder"}, new java.lang.Object[]{__temp_odecl1, __temp_odecl2}, new java.lang.String[]{}, new double[]{});
		}
		
	}
	
	
	public java.lang.Object divModBig(thx.bigint.Big big)
	{
		//line 88 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		int v = this.value;
		//line 88 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return new thx.bigint.Big(thx.bigint.Bigs.smallToArray(( (( v < 0 )) ? ( - (v) ) : (v) )), ( this.value < 0 )).divModBig(big);
	}
	
	
	public thx.bigint.BigIntImpl multiply(thx.bigint.BigIntImpl that)
	{
		//line 91 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		if (haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(that, "isSmall", true))) 
		{
			//line 91 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return this.multiplySmall(((thx.bigint.Small) (that) ));
		}
		else
		{
			//line 91 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return this.multiplyBig(((thx.bigint.Big) (that) ));
		}
		
	}
	
	
	public thx.bigint.BigIntImpl multiplySmall(thx.bigint.Small small)
	{
		//line 95 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		if (thx.bigint.Bigs.canMultiply(this.value, small.value)) 
		{
			//line 99 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return new thx.bigint.Small(((int) (( this.value * small.value )) ));
		}
		
		//line 100 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		int v = small.value;
		//line 100 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		haxe.root.Array<java.lang.Object> arr = thx.bigint.Bigs.smallToArray(( (( v < 0 )) ? ( - (v) ) : (v) ));
		//line 101 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		int v1 = this.value;
		//line 101 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		int abs = ( (( v1 < 0 )) ? ( - (v1) ) : (v1) );
		//line 102 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		if (( abs < 10000000 )) 
		{
			//line 103 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return new thx.bigint.Big(thx.bigint.Bigs.multiplySmall(arr, abs), ( this.sign != small.sign ));
		}
		else
		{
			//line 105 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return new thx.bigint.Big(thx.bigint.Bigs.multiplyLong(arr, thx.bigint.Bigs.smallToArray(abs)), ( this.sign != small.sign ));
		}
		
	}
	
	
	public thx.bigint.BigIntImpl multiplyBig(thx.bigint.Big big)
	{
		//line 110 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		int v = this.value;
		//line 110 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return new thx.bigint.Big(thx.bigint.Bigs.multiplyLong(big.value, thx.bigint.Bigs.smallToArray(( (( v < 0 )) ? ( - (v) ) : (v) ))), ( this.sign != big.sign ));
	}
	
	
	public thx.bigint.BigIntImpl modulo(thx.bigint.BigIntImpl that)
	{
		//line 114 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return ((thx.bigint.BigIntImpl) (haxe.lang.Runtime.getField(this.divMod(that), "remainder", true)) );
	}
	
	
	public thx.bigint.BigIntImpl random()
	{
		//line 117 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return thx.bigint.Bigs.fromInt(((int) (( java.lang.Math.random() * this.value )) ));
	}
	
	
	public thx.bigint.BigIntImpl abs()
	{
		//line 120 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		int v = this.value;
		//line 120 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return new thx.bigint.Small(((int) (( (( v < 0 )) ? ( - (v) ) : (v) )) ));
	}
	
	
	public thx.bigint.BigIntImpl negate()
	{
		//line 123 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return new thx.bigint.Small(((int) ( - (this.value) ) ));
	}
	
	
	public thx.bigint.BigIntImpl next()
	{
		//line 126 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return this.addSmall(thx.bigint.Small.one);
	}
	
	
	public thx.bigint.BigIntImpl prev()
	{
		//line 129 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return this.addSmall(thx.bigint.Small.negativeOne);
	}
	
	
	public thx.bigint.BigIntImpl pow(thx.bigint.BigIntImpl exp)
	{
		//line 132 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		if (this.isZero()) 
		{
			//line 133 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			if (exp.isZero()) 
			{
				//line 133 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
				return thx.bigint.Small.one;
			}
			else
			{
				//line 133 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
				return this;
			}
			
		}
		
		//line 134 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		if (this.isUnit()) 
		{
			//line 135 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			if (this.sign) 
			{
				//line 136 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
				if (exp.isEven()) 
				{
					//line 135 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					return thx.bigint.Small.one;
				}
				else
				{
					//line 135 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					return thx.bigint.Small.negativeOne;
				}
				
			}
			else
			{
				//line 135 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
				return thx.bigint.Small.one;
			}
			
		}
		
		//line 138 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		if (haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(exp, "sign", true))) 
		{
			//line 139 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return thx.bigint.Small.zero;
		}
		
		//line 140 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		if (( ! (haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(exp, "isSmall", true))) )) 
		{
			//line 141 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			throw haxe.lang.HaxeException.wrap(new thx.Error(( ( "The exponent " + haxe.root.Std.string(exp) ) + " is too large." ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.bigint.Small", "Small.hx", "pow"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (141) )) )})));
		}
		
		//line 142 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		int b = ((thx.bigint.Small) (exp) ).value;
		//line 143 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		if (thx.bigint.Bigs.canPower(this.value, b)) 
		{
			//line 144 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return new thx.bigint.Small(((int) (java.lang.Math.pow(((double) (this.value) ), ((double) (b) ))) ));
		}
		
		//line 145 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		int v = this.value;
		//line 145 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return new thx.bigint.Big(thx.bigint.Bigs.smallToArray(( (( v < 0 )) ? ( - (v) ) : (v) )), this.sign).pow(exp);
	}
	
	
	public thx.bigint.BigIntImpl shiftLeft(int n)
	{
		//line 149 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		if (( n < 0 )) 
		{
			//line 150 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return this.shiftRight( - (n) );
		}
		
		//line 151 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		if (( (( (( n < 0 )) ? ( - (n) ) : (n) )) > 10000000 )) 
		{
			//line 152 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return this.multiply(thx.bigint.Small.two.pow(thx.bigint.Bigs.fromInt(n)));
		}
		
		//line 154 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		thx.bigint.BigIntImpl result = this;
		//line 155 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		while (( n >= thx.bigint.Bigs.powers2Length ))
		{
			//line 156 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			result = result.multiply(thx.bigint.Bigs.bigHighestPower2);
			//line 157 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			n -= ( thx.bigint.Bigs.powers2Length - 1 );
		}
		
		//line 159 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return result.multiply(thx.bigint.Bigs.bigPowersOfTwo.__get(n));
	}
	
	
	public thx.bigint.BigIntImpl shiftRight(int n)
	{
		//line 163 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		if (( n < 0 )) 
		{
			//line 164 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return this.shiftLeft( - (n) );
		}
		
		//line 165 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		java.lang.Object remQuo = null;
		//line 166 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		if (( (( (( n < 0 )) ? ( - (n) ) : (n) )) > 10000000 )) 
		{
			//line 167 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			remQuo = this.divMod(thx.bigint.Small.two.pow(thx.bigint.Bigs.fromInt(n)));
			//line 168 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			if (haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(((thx.bigint.BigIntImpl) (haxe.lang.Runtime.getField(remQuo, "remainder", true)) ), "sign", true))) 
			{
				//line 168 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
				return ((thx.bigint.BigIntImpl) (haxe.lang.Runtime.getField(remQuo, "quotient", true)) ).prev();
			}
			else
			{
				//line 168 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
				return ((thx.bigint.BigIntImpl) (haxe.lang.Runtime.getField(remQuo, "quotient", true)) );
			}
			
		}
		
		//line 170 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		thx.bigint.BigIntImpl result = this;
		//line 171 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		while (( n >= thx.bigint.Bigs.powers2Length ))
		{
			//line 172 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			if (result.isZero()) 
			{
				//line 173 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
				return result;
			}
			
			//line 174 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			remQuo = result.divMod(thx.bigint.Bigs.bigHighestPower2);
			//line 175 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			if (haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(((thx.bigint.BigIntImpl) (haxe.lang.Runtime.getField(remQuo, "remainder", true)) ), "sign", true))) 
			{
				//line 175 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
				result = ((thx.bigint.BigIntImpl) (haxe.lang.Runtime.getField(remQuo, "quotient", true)) ).prev();
			}
			else
			{
				//line 175 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
				result = ((thx.bigint.BigIntImpl) (haxe.lang.Runtime.getField(remQuo, "quotient", true)) );
			}
			
			//line 176 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			n -= ( thx.bigint.Bigs.powers2Length - 1 );
		}
		
		//line 178 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		remQuo = result.divMod(thx.bigint.Bigs.bigPowersOfTwo.__get(n));
		//line 179 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		if (haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(((thx.bigint.BigIntImpl) (haxe.lang.Runtime.getField(remQuo, "remainder", true)) ), "sign", true))) 
		{
			//line 179 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return ((thx.bigint.BigIntImpl) (haxe.lang.Runtime.getField(remQuo, "quotient", true)) ).prev();
		}
		else
		{
			//line 179 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return ((thx.bigint.BigIntImpl) (haxe.lang.Runtime.getField(remQuo, "quotient", true)) );
		}
		
	}
	
	
	public thx.bigint.BigIntImpl square()
	{
		//line 184 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		if (thx.bigint.Bigs.canMultiply(this.value, this.value)) 
		{
			//line 188 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return new thx.bigint.Small(((int) (( this.value * this.value )) ));
		}
		
		//line 189 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		int v = this.value;
		//line 189 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return new thx.bigint.Big(thx.bigint.Bigs.square(thx.bigint.Bigs.smallToArray(( (( v < 0 )) ? ( - (v) ) : (v) ))), false);
	}
	
	
	public boolean isEven()
	{
		//line 193 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return ( (( this.value & 1 )) == 0 );
	}
	
	
	public boolean isOdd()
	{
		//line 196 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return ( (( this.value & 1 )) == 1 );
	}
	
	
	public boolean isZero()
	{
		//line 199 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return ( this.value == 0 );
	}
	
	
	public boolean isUnit()
	{
		//line 202 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		int v = this.value;
		//line 202 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return ( (( (( v < 0 )) ? ( - (v) ) : (v) )) == 1 );
	}
	
	
	public int compareTo(thx.bigint.BigIntImpl that)
	{
		//line 205 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		if (( this.sign != haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(that, "sign", true)) )) 
		{
			//line 206 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			if (this.sign) 
			{
				//line 206 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
				return -1;
			}
			else
			{
				//line 206 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
				return 1;
			}
			
		}
		
		//line 207 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		if (haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(that, "isSmall", true))) 
		{
			//line 207 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return this.compareToSmall(((thx.bigint.Small) (that) ));
		}
		else
		{
			//line 207 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return this.compareToBig(((thx.bigint.Big) (that) ));
		}
		
	}
	
	
	public int compareToSmall(thx.bigint.Small small)
	{
		//line 211 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return ( this.value - small.value );
	}
	
	
	public int compareToBig(thx.bigint.Big big)
	{
		//line 214 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		int v = this.value;
		//line 214 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return ( thx.bigint.Bigs.compareToAbs(thx.bigint.Bigs.smallToArray(( (( v < 0 )) ? ( - (v) ) : (v) )), big.value) * (( (this.sign) ? (-1) : (1) )) );
	}
	
	
	public int compareToAbs(thx.bigint.BigIntImpl that)
	{
		//line 217 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		if (haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(that, "isSmall", true))) 
		{
			//line 218 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return this.compareToAbsSmall(((thx.bigint.Small) (that) ));
		}
		else
		{
			//line 220 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			return this.compareToAbsBig(((thx.bigint.Big) (that) ));
		}
		
	}
	
	
	public int compareToAbsSmall(thx.bigint.Small small)
	{
		//line 224 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		int v = this.value;
		//line 224 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		int a = ( (( v < 0 )) ? ( - (v) ) : (v) );
		//line 224 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		int v1 = small.value;
		//line 224 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return ( a - (( (( v1 < 0 )) ? ( - (v1) ) : (v1) )) );
	}
	
	
	public int compareToAbsBig(thx.bigint.Big big)
	{
		//line 227 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		int v = this.value;
		//line 227 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return thx.bigint.Bigs.compareToAbs(thx.bigint.Bigs.smallToArray(( (( v < 0 )) ? ( - (v) ) : (v) )), big.value);
	}
	
	
	public thx.bigint.BigIntImpl not()
	{
		//line 230 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return this.negate().prev();
	}
	
	
	public thx.bigint.BigIntImpl and(thx.bigint.BigIntImpl that)
	{
		//line 233 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return thx.bigint.Bigs.bitwise(this, that, ( (( thx.bigint.Small_and_233__Fun.__hx_current != null )) ? (thx.bigint.Small_and_233__Fun.__hx_current) : (thx.bigint.Small_and_233__Fun.__hx_current = ((thx.bigint.Small_and_233__Fun) (new thx.bigint.Small_and_233__Fun()) )) ));
	}
	
	
	public thx.bigint.BigIntImpl or(thx.bigint.BigIntImpl that)
	{
		//line 236 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return thx.bigint.Bigs.bitwise(this, that, ( (( thx.bigint.Small_or_236__Fun.__hx_current != null )) ? (thx.bigint.Small_or_236__Fun.__hx_current) : (thx.bigint.Small_or_236__Fun.__hx_current = ((thx.bigint.Small_or_236__Fun) (new thx.bigint.Small_or_236__Fun()) )) ));
	}
	
	
	public thx.bigint.BigIntImpl xor(thx.bigint.BigIntImpl that)
	{
		//line 239 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return thx.bigint.Bigs.bitwise(this, that, ( (( thx.bigint.Small_xor_239__Fun.__hx_current != null )) ? (thx.bigint.Small_xor_239__Fun.__hx_current) : (thx.bigint.Small_xor_239__Fun.__hx_current = ((thx.bigint.Small_xor_239__Fun) (new thx.bigint.Small_xor_239__Fun()) )) ));
	}
	
	
	public double toFloat()
	{
		//line 242 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return ((double) (this.value) );
	}
	
	
	public int toInt()
	{
		//line 245 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return this.value;
	}
	
	
	@Override public java.lang.String toString()
	{
		//line 248 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return ( "" + this.value );
	}
	
	
	public java.lang.String toStringWithBase(int base)
	{
		//line 251 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		return thx.Ints.toString(this.value, base);
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		{
			//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			boolean __temp_executeDef1 = true;
			//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			switch (field.hashCode())
			{
				case 111972721:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("value")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						this.value = ((int) (value) );
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
			}
			
			//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			if (__temp_executeDef1) 
			{
				//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		{
			//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			boolean __temp_executeDef1 = true;
			//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			switch (field.hashCode())
			{
				case 2070954493:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("isSmall")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						this.isSmall = haxe.lang.Runtime.toBool(value);
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 111972721:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("value")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						this.value = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 3530173:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("sign")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						this.sign = haxe.lang.Runtime.toBool(value);
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
			}
			
			//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			if (__temp_executeDef1) 
			{
				//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		{
			//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			boolean __temp_executeDef1 = true;
			//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			switch (field.hashCode())
			{
				case 1682105155:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("toStringWithBase")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "toStringWithBase")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 111972721:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("value")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -1776922004:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("toString")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "toString")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 3530173:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("sign")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.sign;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 110508916:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("toInt")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "toInt")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 2070954493:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("isSmall")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.isSmall;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -1177945951:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("toFloat")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "toFloat")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 96417:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("add")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "add")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 118875:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("xor")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "xor")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -1247123226:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("addSmall")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "addSmall")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 3555:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("or")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "or")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -1422541665:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("addBig")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "addBig")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 96727:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("and")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "and")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -2060248300:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("subtract")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "subtract")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 109267:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("not")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "not")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -60074413:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("subtractSmall")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "subtractSmall")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -954319474:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("compareToAbsBig")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "compareToAbsBig")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -1774378676:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("subtractBig")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "subtractBig")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 2037803541:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("compareToAbsSmall")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "compareToAbsSmall")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -1331463047:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("divide")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "divide")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 102184466:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("compareToAbs")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "compareToAbs")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -1331489615:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("divMod")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "divMod")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 102185632:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("compareToBig")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "compareToBig")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -1862805802:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("divModSmall")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "divModSmall")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -568038745:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("compareToSmall")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "compareToSmall")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 1910892175:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("divModBig")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "divModBig")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -1412718016:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("compareTo")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "compareTo")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 653829668:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("multiply")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "multiply")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -1180060210:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("isUnit")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "isUnit")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -88984253:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("multiplySmall")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "multiplySmall")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -1179919630:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("isZero")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "isZero")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 563018812:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("multiplyBig")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "multiplyBig")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 100474789:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("isOdd")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "isOdd")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -1068784010:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("modulo")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "modulo")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -1180529308:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("isEven")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "isEven")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -938285885:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("random")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "random")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -894674659:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("square")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "square")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 96370:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("abs")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "abs")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 1921574586:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("shiftRight")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "shiftRight")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -1049319678:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("negate")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "negate")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 893087657:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("shiftLeft")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "shiftLeft")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 3377907:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("next")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "next")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 111192:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("pow")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "pow")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 3449395:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("prev")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "prev")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
			}
			
			//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			if (__temp_executeDef1) 
			{
				//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		{
			//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			boolean __temp_executeDef1 = true;
			//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			switch (field.hashCode())
			{
				case 111972721:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("value")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return ((double) (this.value) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
			}
			
			//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			if (__temp_executeDef1) 
			{
				//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		{
			//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			boolean __temp_executeDef1 = true;
			//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			switch (field.hashCode())
			{
				case 1682105155:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("toStringWithBase")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.toStringWithBase(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ));
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 96417:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("add")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.add(((thx.bigint.BigIntImpl) (dynargs.__get(0)) ));
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -1776922004:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("toString")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.toString();
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -1247123226:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("addSmall")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.addSmall(((thx.bigint.Small) (dynargs.__get(0)) ));
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 110508916:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("toInt")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.toInt();
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -1422541665:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("addBig")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.addBig(((thx.bigint.Big) (dynargs.__get(0)) ));
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -1177945951:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("toFloat")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.toFloat();
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -2060248300:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("subtract")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.subtract(((thx.bigint.BigIntImpl) (dynargs.__get(0)) ));
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 118875:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("xor")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.xor(((thx.bigint.BigIntImpl) (dynargs.__get(0)) ));
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -60074413:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("subtractSmall")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.subtractSmall(((thx.bigint.Small) (dynargs.__get(0)) ));
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 3555:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("or")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.or(((thx.bigint.BigIntImpl) (dynargs.__get(0)) ));
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -1774378676:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("subtractBig")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.subtractBig(((thx.bigint.Big) (dynargs.__get(0)) ));
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 96727:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("and")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.and(((thx.bigint.BigIntImpl) (dynargs.__get(0)) ));
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -1331463047:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("divide")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.divide(((thx.bigint.BigIntImpl) (dynargs.__get(0)) ));
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 109267:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("not")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.not();
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -1331489615:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("divMod")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.divMod(((thx.bigint.BigIntImpl) (dynargs.__get(0)) ));
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -954319474:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("compareToAbsBig")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.compareToAbsBig(((thx.bigint.Big) (dynargs.__get(0)) ));
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -1862805802:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("divModSmall")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.divModSmall(((thx.bigint.Small) (dynargs.__get(0)) ));
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 2037803541:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("compareToAbsSmall")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.compareToAbsSmall(((thx.bigint.Small) (dynargs.__get(0)) ));
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 1910892175:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("divModBig")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.divModBig(((thx.bigint.Big) (dynargs.__get(0)) ));
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 102184466:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("compareToAbs")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.compareToAbs(((thx.bigint.BigIntImpl) (dynargs.__get(0)) ));
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 653829668:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("multiply")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.multiply(((thx.bigint.BigIntImpl) (dynargs.__get(0)) ));
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 102185632:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("compareToBig")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.compareToBig(((thx.bigint.Big) (dynargs.__get(0)) ));
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -88984253:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("multiplySmall")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.multiplySmall(((thx.bigint.Small) (dynargs.__get(0)) ));
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -568038745:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("compareToSmall")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.compareToSmall(((thx.bigint.Small) (dynargs.__get(0)) ));
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 563018812:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("multiplyBig")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.multiplyBig(((thx.bigint.Big) (dynargs.__get(0)) ));
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -1412718016:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("compareTo")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.compareTo(((thx.bigint.BigIntImpl) (dynargs.__get(0)) ));
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -1068784010:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("modulo")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.modulo(((thx.bigint.BigIntImpl) (dynargs.__get(0)) ));
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -1180060210:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("isUnit")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.isUnit();
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -938285885:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("random")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.random();
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -1179919630:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("isZero")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.isZero();
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 96370:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("abs")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.abs();
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 100474789:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("isOdd")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.isOdd();
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -1049319678:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("negate")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.negate();
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -1180529308:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("isEven")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.isEven();
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 3377907:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("next")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.next();
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case -894674659:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("square")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.square();
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 3449395:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("prev")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.prev();
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 1921574586:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("shiftRight")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.shiftRight(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ));
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 111192:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("pow")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.pow(((thx.bigint.BigIntImpl) (dynargs.__get(0)) ));
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
				case 893087657:
				{
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					if (field.equals("shiftLeft")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
						return this.shiftLeft(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ));
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
					break;
				}
				
				
			}
			
			//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			if (__temp_executeDef1) 
			{
				//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			else
			{
				//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		baseArr.push("isSmall");
		//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		baseArr.push("sign");
		//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		baseArr.push("value");
		//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
		{
			//line 3 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Small.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


