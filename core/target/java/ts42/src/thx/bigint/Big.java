// Generated by Haxe 3.3.0
package thx.bigint;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Big extends haxe.lang.HxObject implements thx.bigint.BigIntImpl
{
	public Big(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Big(haxe.root.Array<java.lang.Object> value, boolean sign)
	{
		//line 11 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		thx.bigint.Big.__hx_ctor_thx_bigint_Big(this, value, sign);
	}
	
	
	public static void __hx_ctor_thx_bigint_Big(thx.bigint.Big __temp_me81, haxe.root.Array<java.lang.Object> value, boolean sign)
	{
		//line 12 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		__temp_me81.sign = sign;
		//line 13 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		__temp_me81.value = value;
		//line 14 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		__temp_me81.isSmall = false;
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return new thx.bigint.Big(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return new thx.bigint.Big(((haxe.root.Array<java.lang.Object>) (arr.__get(0)) ), haxe.lang.Runtime.toBool(arr.__get(1)));
	}
	
	
	public haxe.root.Array<java.lang.Object> value;
	
	public boolean sign;
	
	public boolean isSmall;
	
	public thx.bigint.BigIntImpl add(thx.bigint.BigIntImpl that)
	{
		//line 18 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (that.isZero()) 
		{
			//line 19 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return this;
		}
		
		//line 20 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (this.isZero()) 
		{
			//line 21 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return that;
		}
		
		//line 22 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (( this.sign != haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(that, "sign", true)) )) 
		{
			//line 23 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return this.subtract(that.negate());
		}
		
		//line 24 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(that, "isSmall", true))) 
		{
			//line 24 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return this.addSmall(((thx.bigint.Small) (that) ));
		}
		else
		{
			//line 24 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return this.addBig(((thx.bigint.Big) (that) ));
		}
		
	}
	
	
	public thx.bigint.BigIntImpl addSmall(thx.bigint.Small small)
	{
		//line 28 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		int v = small.value;
		//line 28 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return new thx.bigint.Big(thx.bigint.Bigs.addSmall(this.value, ( (( v < 0 )) ? ( - (v) ) : (v) )), this.sign);
	}
	
	
	public thx.bigint.BigIntImpl addBig(thx.bigint.Big big)
	{
		//line 31 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return new thx.bigint.Big(thx.bigint.Bigs.addAny(this.value, big.value), this.sign);
	}
	
	
	public thx.bigint.BigIntImpl subtract(thx.bigint.BigIntImpl that)
	{
		//line 34 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (that.isZero()) 
		{
			//line 35 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return this;
		}
		
		//line 36 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (this.isZero()) 
		{
			//line 37 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return that.negate();
		}
		
		//line 38 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (( this.sign != haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(that, "sign", true)) )) 
		{
			//line 39 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return this.add(that.negate());
		}
		
		//line 40 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(that, "isSmall", true))) 
		{
			//line 40 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return this.subtractSmall(((thx.bigint.Small) (that) ));
		}
		else
		{
			//line 40 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return this.subtractBig(((thx.bigint.Big) (that) ));
		}
		
	}
	
	
	public thx.bigint.BigIntImpl subtractSmall(thx.bigint.Small small)
	{
		//line 44 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		int v = small.value;
		//line 44 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return thx.bigint.Bigs.subtractSmall(this.value, ( (( v < 0 )) ? ( - (v) ) : (v) ), this.sign);
	}
	
	
	public thx.bigint.BigIntImpl subtractBig(thx.bigint.Big big)
	{
		//line 47 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return thx.bigint.Bigs.subtractAny(this.value, big.value, this.sign);
	}
	
	
	public thx.bigint.BigIntImpl divide(thx.bigint.BigIntImpl that)
	{
		//line 51 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return ((thx.bigint.BigIntImpl) (haxe.lang.Runtime.getField(this.divMod(that), "quotient", true)) );
	}
	
	
	public java.lang.Object divMod(thx.bigint.BigIntImpl that)
	{
		//line 54 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (that.isZero()) 
		{
			//line 55 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			throw haxe.lang.HaxeException.wrap(new thx.Error("division by zero", null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.bigint.Big", "Big.hx", "divMod"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (55) )) )})));
		}
		
		//line 56 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(that, "isSmall", true))) 
		{
			//line 56 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return this.divModSmall(((thx.bigint.Small) (that) ));
		}
		else
		{
			//line 56 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return this.divModBig(((thx.bigint.Big) (that) ));
		}
		
	}
	
	
	public java.lang.Object divModSmall(thx.bigint.Small small)
	{
		//line 60 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		int v = small.value;
		//line 60 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		java.lang.Object values = thx.bigint.Bigs.divModSmall(this.value, ( (( v < 0 )) ? ( - (v) ) : (v) ));
		//line 61 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		java.lang.Object quotient = thx.bigint.Bigs.arrayToSmall(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(values, "q", true)) ));
		//line 62 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		int remainder = ((int) (haxe.lang.Runtime.getField_f(values, "r", true)) );
		//line 63 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (this.sign) 
		{
			//line 63 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			remainder =  - (remainder) ;
		}
		
		//line 64 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (( ! (( null == quotient )) )) 
		{
			//line 65 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			if (( this.sign != small.sign )) 
			{
				//line 66 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				quotient = ( - (((int) (haxe.lang.Runtime.toInt(quotient)) )) );
			}
			
			//line 67 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			{
				//line 68 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				thx.bigint.BigIntImpl __temp_odecl1 = ((thx.bigint.BigIntImpl) (new thx.bigint.Small(((int) (haxe.lang.Runtime.toInt(quotient)) ))) );
				//line 69 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				thx.bigint.BigIntImpl __temp_odecl2 = ((thx.bigint.BigIntImpl) (new thx.bigint.Small(((int) (remainder) ))) );
				//line 67 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				return new haxe.lang.DynamicObject(new java.lang.String[]{"quotient", "remainder"}, new java.lang.Object[]{__temp_odecl1, __temp_odecl2}, new java.lang.String[]{}, new double[]{});
			}
			
		}
		
		//line 72 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		{
			//line 73 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			thx.bigint.BigIntImpl __temp_odecl3 = ((thx.bigint.BigIntImpl) (new thx.bigint.Big(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(values, "q", true)) ), ( this.sign != small.sign ))) );
			//line 74 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			thx.bigint.BigIntImpl __temp_odecl4 = ((thx.bigint.BigIntImpl) (new thx.bigint.Small(((int) (remainder) ))) );
			//line 72 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return new haxe.lang.DynamicObject(new java.lang.String[]{"quotient", "remainder"}, new java.lang.Object[]{__temp_odecl3, __temp_odecl4}, new java.lang.String[]{}, new double[]{});
		}
		
	}
	
	
	public java.lang.Object divModBig(thx.bigint.Big big)
	{
		//line 79 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		int comparison = thx.bigint.Bigs.compareToAbs(this.value, big.value);
		//line 80 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (( comparison == -1 )) 
		{
			//line 80 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return new haxe.lang.DynamicObject(new java.lang.String[]{"quotient", "remainder"}, new java.lang.Object[]{((thx.bigint.BigIntImpl) (thx.bigint.Small.zero) ), ((thx.bigint.BigIntImpl) (this) )}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 84 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (( comparison == 0 )) 
		{
			//line 84 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return new haxe.lang.DynamicObject(new java.lang.String[]{"quotient", "remainder"}, new java.lang.Object[]{( (( this.sign == big.sign )) ? (thx.bigint.Small.one) : (thx.bigint.Small.negativeOne) ), ((thx.bigint.BigIntImpl) (thx.bigint.Small.zero) )}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 90 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		haxe.root.Array<java.lang.Object> values = ( (( ( this.value.length + big.value.length ) <= 200 )) ? (thx.bigint.Bigs.divMod1(this.value, big.value)) : (thx.bigint.Bigs.divMod2(this.value, big.value)) );
		//line 91 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		java.lang.Object q = haxe.lang.Runtime.getField(values.__get(0), "small", true);
		//line 92 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		thx.bigint.BigIntImpl quotient = null;
		//line 92 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		thx.bigint.BigIntImpl remainder = null;
		//line 93 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		boolean qSign = ( this.sign != big.sign );
		//line 93 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		java.lang.Object r = haxe.lang.Runtime.getField(values.__get(1), "small", true);
		//line 93 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		boolean mSign = this.sign;
		//line 96 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (( ! (( null == q )) )) 
		{
			//line 97 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			if (qSign) 
			{
				//line 97 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				q = ( - (((int) (haxe.lang.Runtime.toInt(q)) )) );
			}
			
			//line 98 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			quotient = new thx.bigint.Small(((int) (haxe.lang.Runtime.toInt(q)) ));
		}
		else
		{
			//line 100 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			quotient = new thx.bigint.Big(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(values.__get(0), "big", true)) ), qSign);
		}
		
		//line 101 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (( ! (( null == r )) )) 
		{
			//line 102 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			if (mSign) 
			{
				//line 102 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				r = ( - (((int) (haxe.lang.Runtime.toInt(r)) )) );
			}
			
			//line 103 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			remainder = new thx.bigint.Small(((int) (haxe.lang.Runtime.toInt(r)) ));
		}
		else
		{
			//line 105 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			remainder = new thx.bigint.Big(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(values.__get(1), "big", true)) ), mSign);
		}
		
		//line 106 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return new haxe.lang.DynamicObject(new java.lang.String[]{"quotient", "remainder"}, new java.lang.Object[]{quotient, remainder}, new java.lang.String[]{}, new double[]{});
	}
	
	
	public thx.bigint.BigIntImpl multiply(thx.bigint.BigIntImpl that)
	{
		//line 113 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (that.isZero()) 
		{
			//line 114 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return thx.bigint.Small.zero;
		}
		
		//line 115 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(that, "isSmall", true))) 
		{
			//line 115 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return this.multiplySmall(((thx.bigint.Small) (that) ));
		}
		else
		{
			//line 115 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return this.multiplyBig(((thx.bigint.Big) (that) ));
		}
		
	}
	
	
	public thx.bigint.BigIntImpl multiplySmall(thx.bigint.Small small)
	{
		//line 119 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		int v = small.value;
		//line 119 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return new thx.bigint.Big(thx.bigint.Bigs.multiplyLong(this.value, thx.bigint.Bigs.smallToArray(( (( v < 0 )) ? ( - (v) ) : (v) ))), ( this.sign != small.sign ));
	}
	
	
	public thx.bigint.BigIntImpl multiplyBig(thx.bigint.Big big)
	{
		//line 123 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (( ( this.value.length + big.value.length ) > 4000 )) 
		{
			//line 124 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return new thx.bigint.Big(thx.bigint.Bigs.multiplyKaratsuba(this.value, big.value), ( this.sign != big.sign ));
		}
		
		//line 125 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return new thx.bigint.Big(thx.bigint.Bigs.multiplyLong(this.value, big.value), ( this.sign != big.sign ));
	}
	
	
	public thx.bigint.BigIntImpl modulo(thx.bigint.BigIntImpl that)
	{
		//line 129 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return ((thx.bigint.BigIntImpl) (haxe.lang.Runtime.getField(this.divMod(that), "remainder", true)) );
	}
	
	
	public thx.bigint.BigIntImpl random()
	{
		//line 132 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		int length = ( this.value.length - 1 );
		//line 132 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		haxe.root.Array<java.lang.Object> result = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		//line 132 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		boolean restricted = true;
		//line 132 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		int i = length;
		//line 132 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		int top = 0;
		//line 132 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		int digit = 0;
		//line 137 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		while (( i >= 0 ))
		{
			//line 138 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			if (restricted) 
			{
				//line 138 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				top = ((int) (haxe.lang.Runtime.toInt(this.value.__get(i))) );
			}
			else
			{
				//line 138 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				top = 10000000;
			}
			
			//line 139 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			double value = ( java.lang.Math.random() * top );
			//line 139 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			if (( value < 0.0 )) 
			{
				//line 139 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				digit = ((int) (java.lang.Math.ceil(value)) );
			}
			else
			{
				//line 139 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				digit = ((int) (java.lang.Math.floor(value)) );
			}
			
			//line 140 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			result.unshift(digit);
			//line 141 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			if (( digit < top )) 
			{
				//line 142 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				restricted = false;
			}
			
			//line 143 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			 -- i;
		}
		
		//line 145 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		java.lang.Object v = thx.bigint.Bigs.arrayToSmall(result);
		//line 146 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (( ! (( null == v )) )) 
		{
			//line 147 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return new thx.bigint.Small(((int) (haxe.lang.Runtime.toInt(v)) ));
		}
		else
		{
			//line 149 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return new thx.bigint.Big(result, false);
		}
		
	}
	
	
	public thx.bigint.BigIntImpl abs()
	{
		//line 153 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return new thx.bigint.Big(this.value, false);
	}
	
	
	public thx.bigint.BigIntImpl negate()
	{
		//line 156 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return new thx.bigint.Big(this.value,  ! (this.sign) );
	}
	
	
	public thx.bigint.BigIntImpl next()
	{
		//line 159 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return this.add(thx.bigint.Small.one);
	}
	
	
	public thx.bigint.BigIntImpl prev()
	{
		//line 162 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return this.subtract(thx.bigint.Small.one);
	}
	
	
	public thx.bigint.BigIntImpl pow(thx.bigint.BigIntImpl exp)
	{
		//line 165 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (this.isZero()) 
		{
			//line 166 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			if (exp.isZero()) 
			{
				//line 166 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				return thx.bigint.Small.one;
			}
			else
			{
				//line 166 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				return this;
			}
			
		}
		
		//line 167 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (this.isUnit()) 
		{
			//line 168 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			if (this.sign) 
			{
				//line 169 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				if (exp.isEven()) 
				{
					//line 168 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					return thx.bigint.Small.one;
				}
				else
				{
					//line 168 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					return thx.bigint.Small.negativeOne;
				}
				
			}
			else
			{
				//line 168 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				return thx.bigint.Small.one;
			}
			
		}
		
		//line 171 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(exp, "sign", true))) 
		{
			//line 172 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return thx.bigint.Small.zero;
		}
		
		//line 173 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (( ! (haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(exp, "isSmall", true))) )) 
		{
			//line 174 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			throw haxe.lang.HaxeException.wrap(new thx.Error(( ( "The exponent " + haxe.root.Std.string(exp) ) + " is too large." ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.bigint.Big", "Big.hx", "pow"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (174) )) )})));
		}
		
		//line 175 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		int b = ((thx.bigint.Small) (exp) ).value;
		//line 175 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		thx.bigint.BigIntImpl x = this;
		//line 175 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		thx.bigint.BigIntImpl y = thx.bigint.Small.one;
		//line 178 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		while (true)
		{
			//line 179 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			if (( (( b & 1 )) == 1 )) 
			{
				//line 180 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				y = y.multiply(x);
				//line 181 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				 -- b;
			}
			
			//line 183 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			if (( b == 0 )) 
			{
				//line 183 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				break;
			}
			
			//line 184 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			b = ((int) (( b / 2 )) );
			//line 185 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			x = x.square();
		}
		
		//line 187 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return y;
	}
	
	
	public thx.bigint.BigIntImpl shiftLeft(int n)
	{
		//line 191 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (( n < 0 )) 
		{
			//line 192 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return this.shiftRight( - (n) );
		}
		
		//line 193 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		thx.bigint.BigIntImpl result = this;
		//line 194 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		while (( n >= thx.bigint.Bigs.powers2Length ))
		{
			//line 195 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			result = result.multiply(thx.bigint.Bigs.bigHighestPower2);
			//line 196 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			n -= ( thx.bigint.Bigs.powers2Length - 1 );
		}
		
		//line 198 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return result.multiply(thx.bigint.Bigs.bigPowersOfTwo.__get(n));
	}
	
	
	public thx.bigint.BigIntImpl shiftRight(int n)
	{
		//line 202 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (( n < 0 )) 
		{
			//line 203 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return this.shiftLeft( - (n) );
		}
		
		//line 204 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		thx.bigint.BigIntImpl result = this;
		//line 204 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		java.lang.Object remQuo = null;
		//line 206 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		while (( n >= thx.bigint.Bigs.powers2Length ))
		{
			//line 207 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			if (result.isZero()) 
			{
				//line 208 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				return result;
			}
			
			//line 209 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			remQuo = result.divMod(thx.bigint.Bigs.bigHighestPower2);
			//line 210 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			if (haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(((thx.bigint.BigIntImpl) (haxe.lang.Runtime.getField(remQuo, "remainder", true)) ), "sign", true))) 
			{
				//line 210 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				result = ((thx.bigint.BigIntImpl) (haxe.lang.Runtime.getField(remQuo, "quotient", true)) ).prev();
			}
			else
			{
				//line 210 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				result = ((thx.bigint.BigIntImpl) (haxe.lang.Runtime.getField(remQuo, "quotient", true)) );
			}
			
			//line 211 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			n -= ( thx.bigint.Bigs.powers2Length - 1 );
		}
		
		//line 213 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		remQuo = result.divMod(thx.bigint.Bigs.bigPowersOfTwo.__get(n));
		//line 214 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(((thx.bigint.BigIntImpl) (haxe.lang.Runtime.getField(remQuo, "remainder", true)) ), "sign", true))) 
		{
			//line 214 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return ((thx.bigint.BigIntImpl) (haxe.lang.Runtime.getField(remQuo, "quotient", true)) ).prev();
		}
		else
		{
			//line 214 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return ((thx.bigint.BigIntImpl) (haxe.lang.Runtime.getField(remQuo, "quotient", true)) );
		}
		
	}
	
	
	public thx.bigint.BigIntImpl square()
	{
		//line 218 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return new thx.bigint.Big(thx.bigint.Bigs.square(this.value), false);
	}
	
	
	public boolean isEven()
	{
		//line 221 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return ( (( ((int) (haxe.lang.Runtime.toInt(this.value.__get(0))) ) & 1 )) == 0 );
	}
	
	
	public boolean isOdd()
	{
		//line 224 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return ( (( ((int) (haxe.lang.Runtime.toInt(this.value.__get(0))) ) & 1 )) == 1 );
	}
	
	
	public boolean isZero()
	{
		//line 227 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return ( this.value.length == 0 );
	}
	
	
	public boolean isUnit()
	{
		//line 230 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return false;
	}
	
	
	public int compareTo(thx.bigint.BigIntImpl that)
	{
		//line 233 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (( this.sign != haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(that, "sign", true)) )) 
		{
			//line 234 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			if (this.sign) 
			{
				//line 234 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				return -1;
			}
			else
			{
				//line 234 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				return 1;
			}
			
		}
		
		//line 235 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(that, "isSmall", true))) 
		{
			//line 235 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return this.compareToSmall(((thx.bigint.Small) (that) ));
		}
		else
		{
			//line 235 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return this.compareToBig(((thx.bigint.Big) (that) ));
		}
		
	}
	
	
	public int compareToSmall(thx.bigint.Small small)
	{
		//line 239 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		int v = small.value;
		//line 239 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return ( thx.bigint.Bigs.compareToAbs(this.value, thx.bigint.Bigs.smallToArray(( (( v < 0 )) ? ( - (v) ) : (v) ))) * (( (this.sign) ? (-1) : (1) )) );
	}
	
	
	public int compareToBig(thx.bigint.Big big)
	{
		//line 242 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return ( thx.bigint.Bigs.compareToAbs(this.value, big.value) * (( (this.sign) ? (-1) : (1) )) );
	}
	
	
	public int compareToAbs(thx.bigint.BigIntImpl that)
	{
		//line 245 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(that, "isSmall", true))) 
		{
			//line 246 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return this.compareToAbsSmall(((thx.bigint.Small) (that) ));
		}
		else
		{
			//line 248 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return this.compareToAbsBig(((thx.bigint.Big) (that) ));
		}
		
	}
	
	
	public int compareToAbsSmall(thx.bigint.Small small)
	{
		//line 252 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		int v = small.value;
		//line 252 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return thx.bigint.Bigs.compareToAbs(this.value, thx.bigint.Bigs.smallToArray(( (( v < 0 )) ? ( - (v) ) : (v) )));
	}
	
	
	public int compareToAbsBig(thx.bigint.Big big)
	{
		//line 255 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return thx.bigint.Bigs.compareToAbs(this.value, big.value);
	}
	
	
	public thx.bigint.BigIntImpl not()
	{
		//line 258 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return this.negate().prev();
	}
	
	
	public thx.bigint.BigIntImpl and(thx.bigint.BigIntImpl that)
	{
		//line 261 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return thx.bigint.Bigs.bitwise(this, that, ( (( thx.bigint.Big_and_261__Fun.__hx_current != null )) ? (thx.bigint.Big_and_261__Fun.__hx_current) : (thx.bigint.Big_and_261__Fun.__hx_current = ((thx.bigint.Big_and_261__Fun) (new thx.bigint.Big_and_261__Fun()) )) ));
	}
	
	
	public thx.bigint.BigIntImpl or(thx.bigint.BigIntImpl that)
	{
		//line 264 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return thx.bigint.Bigs.bitwise(this, that, ( (( thx.bigint.Big_or_264__Fun.__hx_current != null )) ? (thx.bigint.Big_or_264__Fun.__hx_current) : (thx.bigint.Big_or_264__Fun.__hx_current = ((thx.bigint.Big_or_264__Fun) (new thx.bigint.Big_or_264__Fun()) )) ));
	}
	
	
	public thx.bigint.BigIntImpl xor(thx.bigint.BigIntImpl that)
	{
		//line 267 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return thx.bigint.Bigs.bitwise(this, that, ( (( thx.bigint.Big_xor_267__Fun.__hx_current != null )) ? (thx.bigint.Big_xor_267__Fun.__hx_current) : (thx.bigint.Big_xor_267__Fun.__hx_current = ((thx.bigint.Big_xor_267__Fun) (new thx.bigint.Big_xor_267__Fun()) )) ));
	}
	
	
	public double toFloat()
	{
		//line 270 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return haxe.root.Std.parseFloat(this.toString());
	}
	
	
	public int toInt()
	{
		//line 273 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		java.lang.Object v = thx.bigint.Bigs.arrayToSmall(this.value);
		//line 274 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (( null == v )) 
		{
			//line 274 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			throw haxe.lang.HaxeException.wrap(new thx.Error("overflow", null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.bigint.Big", "Big.hx", "toInt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (274) )) )})));
		}
		
		//line 275 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return ( ((int) ((( (this.sign) ? (-1) : (1) ))) ) * ((int) (haxe.lang.Runtime.toInt(v)) ) );
	}
	
	
	@Override public java.lang.String toString()
	{
		//line 279 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return this.toStringWithBase(10);
	}
	
	
	public java.lang.String toStringWithBase(int base)
	{
		//line 282 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (this.isZero()) 
		{
			//line 283 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return "0";
		}
		
		//line 284 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		if (( base == 10 )) 
		{
			//line 285 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			int l = this.value.length;
			//line 285 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			java.lang.String out = ( "" + ((int) (haxe.lang.Runtime.toInt(this.value.__get( -- l))) ) );
			//line 285 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			java.lang.String digit = null;
			//line 289 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			while ((  -- l >= 0 ))
			{
				//line 290 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				digit = ( "" + ((int) (haxe.lang.Runtime.toInt(this.value.__get(l))) ) );
				//line 291 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				out += ( haxe.lang.StringExt.substring("0000000", digit.length(), null) + digit );
			}
			
			//line 293 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			return ( (( (this.sign) ? ("-") : ("") )) + out );
		}
		
		//line 296 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		haxe.root.Array<java.lang.String> out1 = new haxe.root.Array<java.lang.String>(new java.lang.String[]{});
		//line 297 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		thx.bigint.Small baseBig = new thx.bigint.Small(((int) (base) ));
		//line 298 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		thx.bigint.BigIntImpl left = this;
		//line 298 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		java.lang.Object divmod = null;
		//line 299 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		while (( haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(left, "sign", true)) || ((boolean) (( left.compareToAbs(baseBig) >= 0 )) ) ))
		{
			//line 300 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			divmod = left.divMod(baseBig);
			//line 301 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			left = ((thx.bigint.BigIntImpl) (haxe.lang.Runtime.getField(divmod, "quotient", true)) );
			//line 302 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			thx.bigint.BigIntImpl digit1 = ((thx.bigint.BigIntImpl) (haxe.lang.Runtime.getField(divmod, "remainder", true)) );
			//line 303 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			if (haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(digit1, "sign", true))) 
			{
				//line 304 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				digit1 = baseBig.subtract(digit1).abs();
				//line 305 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				left = left.next();
			}
			
			//line 307 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			out1.push(digit1.toStringWithBase(base));
		}
		
		//line 309 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		out1.push(left.toStringWithBase(base));
		//line 310 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		out1.reverse();
		//line 311 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		return ( (( (this.sign) ? ("-") : ("") )) + out1.join("") );
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		{
			//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			boolean __temp_executeDef1 = true;
			//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			switch (field.hashCode())
			{
				case 2070954493:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("isSmall")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						this.isSmall = haxe.lang.Runtime.toBool(value);
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return value;
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 111972721:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("value")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						this.value = ((haxe.root.Array<java.lang.Object>) (value) );
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return value;
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 3530173:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("sign")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						this.sign = haxe.lang.Runtime.toBool(value);
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return value;
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
			}
			
			//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			if (__temp_executeDef1) 
			{
				//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		{
			//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			boolean __temp_executeDef1 = true;
			//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			switch (field.hashCode())
			{
				case 1682105155:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("toStringWithBase")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "toStringWithBase")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 111972721:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("value")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.value;
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -1776922004:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("toString")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "toString")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 3530173:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("sign")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.sign;
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 110508916:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("toInt")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "toInt")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 2070954493:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("isSmall")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.isSmall;
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -1177945951:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("toFloat")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "toFloat")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 96417:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("add")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "add")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 118875:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("xor")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "xor")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -1247123226:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("addSmall")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "addSmall")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 3555:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("or")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "or")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -1422541665:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("addBig")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "addBig")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 96727:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("and")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "and")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -2060248300:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("subtract")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "subtract")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 109267:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("not")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "not")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -60074413:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("subtractSmall")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "subtractSmall")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -954319474:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("compareToAbsBig")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "compareToAbsBig")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -1774378676:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("subtractBig")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "subtractBig")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 2037803541:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("compareToAbsSmall")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "compareToAbsSmall")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -1331463047:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("divide")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "divide")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 102184466:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("compareToAbs")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "compareToAbs")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -1331489615:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("divMod")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "divMod")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 102185632:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("compareToBig")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "compareToBig")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -1862805802:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("divModSmall")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "divModSmall")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -568038745:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("compareToSmall")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "compareToSmall")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 1910892175:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("divModBig")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "divModBig")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -1412718016:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("compareTo")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "compareTo")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 653829668:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("multiply")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "multiply")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -1180060210:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("isUnit")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "isUnit")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -88984253:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("multiplySmall")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "multiplySmall")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -1179919630:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("isZero")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "isZero")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 563018812:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("multiplyBig")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "multiplyBig")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 100474789:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("isOdd")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "isOdd")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -1068784010:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("modulo")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "modulo")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -1180529308:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("isEven")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "isEven")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -938285885:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("random")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "random")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -894674659:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("square")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "square")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 96370:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("abs")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "abs")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 1921574586:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("shiftRight")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "shiftRight")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -1049319678:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("negate")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "negate")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 893087657:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("shiftLeft")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "shiftLeft")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 3377907:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("next")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "next")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 111192:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("pow")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "pow")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 3449395:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("prev")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "prev")) );
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
			}
			
			//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			if (__temp_executeDef1) 
			{
				//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		{
			//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			boolean __temp_executeDef1 = true;
			//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			switch (field.hashCode())
			{
				case 1682105155:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("toStringWithBase")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.toStringWithBase(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ));
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 96417:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("add")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.add(((thx.bigint.BigIntImpl) (dynargs.__get(0)) ));
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -1776922004:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("toString")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.toString();
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -1247123226:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("addSmall")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.addSmall(((thx.bigint.Small) (dynargs.__get(0)) ));
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 110508916:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("toInt")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.toInt();
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -1422541665:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("addBig")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.addBig(((thx.bigint.Big) (dynargs.__get(0)) ));
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -1177945951:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("toFloat")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.toFloat();
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -2060248300:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("subtract")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.subtract(((thx.bigint.BigIntImpl) (dynargs.__get(0)) ));
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 118875:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("xor")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.xor(((thx.bigint.BigIntImpl) (dynargs.__get(0)) ));
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -60074413:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("subtractSmall")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.subtractSmall(((thx.bigint.Small) (dynargs.__get(0)) ));
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 3555:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("or")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.or(((thx.bigint.BigIntImpl) (dynargs.__get(0)) ));
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -1774378676:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("subtractBig")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.subtractBig(((thx.bigint.Big) (dynargs.__get(0)) ));
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 96727:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("and")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.and(((thx.bigint.BigIntImpl) (dynargs.__get(0)) ));
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -1331463047:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("divide")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.divide(((thx.bigint.BigIntImpl) (dynargs.__get(0)) ));
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 109267:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("not")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.not();
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -1331489615:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("divMod")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.divMod(((thx.bigint.BigIntImpl) (dynargs.__get(0)) ));
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -954319474:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("compareToAbsBig")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.compareToAbsBig(((thx.bigint.Big) (dynargs.__get(0)) ));
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -1862805802:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("divModSmall")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.divModSmall(((thx.bigint.Small) (dynargs.__get(0)) ));
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 2037803541:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("compareToAbsSmall")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.compareToAbsSmall(((thx.bigint.Small) (dynargs.__get(0)) ));
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 1910892175:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("divModBig")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.divModBig(((thx.bigint.Big) (dynargs.__get(0)) ));
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 102184466:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("compareToAbs")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.compareToAbs(((thx.bigint.BigIntImpl) (dynargs.__get(0)) ));
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 653829668:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("multiply")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.multiply(((thx.bigint.BigIntImpl) (dynargs.__get(0)) ));
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 102185632:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("compareToBig")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.compareToBig(((thx.bigint.Big) (dynargs.__get(0)) ));
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -88984253:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("multiplySmall")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.multiplySmall(((thx.bigint.Small) (dynargs.__get(0)) ));
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -568038745:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("compareToSmall")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.compareToSmall(((thx.bigint.Small) (dynargs.__get(0)) ));
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 563018812:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("multiplyBig")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.multiplyBig(((thx.bigint.Big) (dynargs.__get(0)) ));
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -1412718016:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("compareTo")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.compareTo(((thx.bigint.BigIntImpl) (dynargs.__get(0)) ));
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -1068784010:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("modulo")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.modulo(((thx.bigint.BigIntImpl) (dynargs.__get(0)) ));
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -1180060210:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("isUnit")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.isUnit();
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -938285885:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("random")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.random();
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -1179919630:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("isZero")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.isZero();
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 96370:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("abs")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.abs();
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 100474789:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("isOdd")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.isOdd();
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -1049319678:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("negate")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.negate();
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -1180529308:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("isEven")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.isEven();
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 3377907:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("next")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.next();
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case -894674659:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("square")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.square();
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 3449395:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("prev")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.prev();
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 1921574586:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("shiftRight")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.shiftRight(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ));
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 111192:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("pow")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.pow(((thx.bigint.BigIntImpl) (dynargs.__get(0)) ));
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
				case 893087657:
				{
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					if (field.equals("shiftLeft")) 
					{
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						__temp_executeDef1 = false;
						//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
						return this.shiftLeft(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ));
					}
					
					//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
					break;
				}
				
				
			}
			
			//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			if (__temp_executeDef1) 
			{
				//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			else
			{
				//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		baseArr.push("isSmall");
		//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		baseArr.push("sign");
		//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		baseArr.push("value");
		//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
		{
			//line 6 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/bigint/Big.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


