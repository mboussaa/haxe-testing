// Generated by Haxe 3.3.0
package thx;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Int64s extends haxe.lang.HxObject
{
	static
	{
		//line 38 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		java.lang.Object __temp_stmt1 = null;
		//line 38 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		{
			//line 38 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			long this1 = ((long) (( ((long) (( ((long) (0) ) << 32 )) ) | ((long) (( ((long) (1) ) & 0xffffffffL )) ) )) );
			//line 38 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			__temp_stmt1 = ((long) (this1) );
		}
		
		//line 38 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		thx.Int64s.one = haxe.lang.Runtime.toLong(__temp_stmt1);
		//line 39 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		thx.Int64s.two = ((long) (2) );
		//line 40 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		java.lang.Object __temp_stmt2 = null;
		//line 40 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		{
			//line 40 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			long this1 = ((long) (( ((long) (( ((long) (0) ) << 32 )) ) | ((long) (( ((long) (0) ) & 0xffffffffL )) ) )) );
			//line 40 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			__temp_stmt2 = ((long) (this1) );
		}
		
		//line 40 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		thx.Int64s.zero = haxe.lang.Runtime.toLong(__temp_stmt2);
		//line 41 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		thx.Int64s.ten = ((long) (10) );
		//line 43 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		java.lang.Object __temp_stmt3 = null;
		//line 43 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		{
			//line 43 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			long this1 = ((long) (( ((long) (( ((long) (2147483647) ) << 32 )) ) | ((long) (( ((long) (-1) ) & 0xffffffffL )) ) )) );
			//line 43 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			__temp_stmt3 = ((long) (this1) );
		}
		
		//line 43 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		thx.Int64s.maxValue = haxe.lang.Runtime.toLong(__temp_stmt3);
		//line 44 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		java.lang.Object __temp_stmt4 = null;
		//line 44 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		{
			//line 44 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			long this1 = ((long) (( ((long) (( ((long) (-2147483648) ) << 32 )) ) | ((long) (( ((long) (1) ) & 0xffffffffL )) ) )) );
			//line 44 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			__temp_stmt4 = ((long) (this1) );
		}
		
		//line 44 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		thx.Int64s.minValue = haxe.lang.Runtime.toLong(__temp_stmt4);
		//line 135 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		java.lang.Object __temp_stmt5 = null;
		//line 135 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		{
			//line 135 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			long this1 = ((long) (( ((long) (( ((long) (-2147483648) ) << 32 )) ) | ((long) (( ((long) (0) ) & 0xffffffffL )) ) )) );
			//line 135 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			__temp_stmt5 = ((long) (this1) );
		}
		
		//line 135 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		thx.Int64s.min = haxe.lang.Runtime.toLong(__temp_stmt5);
	}
	
	public Int64s(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Int64s()
	{
		//line 37 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		thx.Int64s.__hx_ctor_thx_Int64s(this);
	}
	
	
	public static void __hx_ctor_thx_Int64s(thx.Int64s __temp_me89)
	{
	}
	
	
	public static long one;
	
	public static long two;
	
	public static long zero;
	
	public static long ten;
	
	public static long maxValue;
	
	public static long minValue;
	
	public static long abs(long value)
	{
		//line 47 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		if (((boolean) (( ((long) (value) ) < ((long) (thx.Int64s.zero) ) )) )) 
		{
			//line 47 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			return haxe._Int64.Int64_Impl_.neg(value);
		}
		else
		{
			//line 47 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			return value;
		}
		
	}
	
	
	public static int compare(long a, long b)
	{
		//line 50 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		if (((boolean) (( ((long) (a) ) > ((long) (b) ) )) )) 
		{
			//line 51 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			return 1;
		}
		else
		{
			//line 52 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			if (((boolean) (( ((long) (a) ) < ((long) (b) ) )) )) 
			{
				//line 53 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
				return -1;
			}
			else
			{
				//line 55 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
				return 0;
			}
			
		}
		
	}
	
	
	public static long parse(java.lang.String s)
	{
		//line 58 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		boolean sIsNegative = false;
		//line 58 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		long multiplier = ((long) (1) );
		//line 58 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		long current = ((long) (0) );
		//line 61 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		if (haxe.lang.Runtime.valEq(haxe.lang.StringExt.charAt(s, 0), "-")) 
		{
			//line 62 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			sIsNegative = true;
			//line 63 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			s = haxe.lang.StringExt.substring(s, 1, s.length());
		}
		
		//line 65 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		int len = s.length();
		//line 67 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		{
			//line 67 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			int _g1 = 0;
			//line 67 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			while (( _g1 < len ))
			{
				//line 67 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
				int i = _g1++;
				//line 68 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
				int digitInt = ( ((int) (haxe.lang.Runtime.toInt(haxe.lang.StringExt.charCodeAt(s, ( ( len - 1 ) - i )))) ) - ((int) (48) ) );
				//line 70 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
				if (( ( digitInt < 0 ) || ( digitInt > 9 ) )) 
				{
					//line 71 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
					throw haxe.lang.HaxeException.wrap(new thx.Error("String should only contain digits (and an optional - sign)", null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.Int64s", "Int64s.hx", "parse"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (71) )) )})));
				}
				
				//line 73 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
				long digit = ((long) (digitInt) );
				//line 74 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
				if (sIsNegative) 
				{
					//line 75 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
					current = ((long) (( ((long) (current) ) - ((long) (( ((long) (multiplier) ) * ((long) (digit) ) )) ) )) );
					//line 76 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
					if ( ! ((((boolean) (( ((long) (current) ) < 0 )) ))) ) 
					{
						//line 77 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
						throw haxe.lang.HaxeException.wrap(new thx.Error("Int64 parsing error: Underflow", null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.Int64s", "Int64s.hx", "parse"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (77) )) )})));
					}
					
				}
				else
				{
					//line 79 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
					current = ((long) (( ((long) (current) ) + ((long) (( ((long) (multiplier) ) * ((long) (digit) ) )) ) )) );
					//line 80 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
					if (((boolean) (( ((long) (current) ) < 0 )) )) 
					{
						//line 81 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
						throw haxe.lang.HaxeException.wrap(new thx.Error("Int64 parsing error: Overflow", null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.Int64s", "Int64s.hx", "parse"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (81) )) )})));
					}
					
				}
				
				//line 83 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
				multiplier = ((long) (( ((long) (multiplier) ) * ((long) (thx.Int64s.ten) ) )) );
			}
			
		}
		
		//line 85 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		return current;
	}
	
	
	public static long toInt64(java.lang.String s)
	{
		//line 92 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		return thx.Int64s.parse(s);
	}
	
	
	public static long divRound(long num, long div)
	{
		//line 95 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		if (( ((long) (num) ) == 0 )) 
		{
			//line 96 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			return thx.Int64s.zero;
		}
		
		//line 97 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		if (( ((long) (div) ) == 0 )) 
		{
			//line 98 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			throw haxe.lang.HaxeException.wrap(new thx.Error("Int64s.divRound division by zero", null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.Int64s", "Int64s.hx", "divRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (98) )) )})));
		}
		
		//line 99 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		if (( ((boolean) (( ((long) (num) ) < 0 )) ) == ((boolean) (( ((long) (div) ) < 0 )) ) )) 
		{
			//line 100 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			return ((long) (( (((long) (( ((long) (num) ) + ((long) (( ((long) (div) ) / ((long) (thx.Int64s.two) ) )) ) )) )) / ((long) (div) ) )) );
		}
		else
		{
			//line 101 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			if (((boolean) (( ((long) (div) ) < 0 )) )) 
			{
				//line 102 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
				return ((long) (( (((long) (( ((long) (( ((long) (haxe._Int64.Int64_Impl_.neg(num)) ) + ((long) (thx.Int64s.one) ) )) ) + ((long) (( ((long) (div) ) / ((long) (thx.Int64s.two) ) )) ) )) )) / ((long) (haxe._Int64.Int64_Impl_.neg(div)) ) )) );
			}
			else
			{
				//line 104 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
				return ((long) (( (((long) (( ((long) (( ((long) (num) ) + ((long) (thx.Int64s.one) ) )) ) - ((long) (( ((long) (div) ) / ((long) (thx.Int64s.two) ) )) ) )) )) / ((long) (div) ) )) );
			}
			
		}
		
	}
	
	
	public static long divFloor(long num, long div)
	{
		//line 109 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		if (( ((long) (num) ) == 0 )) 
		{
			//line 110 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			return thx.Int64s.zero;
		}
		
		//line 111 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		if (( ((long) (div) ) == 0 )) 
		{
			//line 112 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			throw haxe.lang.HaxeException.wrap(new thx.Error("Int64s.divFloor division by zero", null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.Int64s", "Int64s.hx", "divFloor"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (112) )) )})));
		}
		
		//line 113 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		return ((long) (( ((long) (( ((long) (num) ) / ((long) (div) ) )) ) - ((long) (( (( ((boolean) (( ((long) (num) ) < 0 )) ) != ((boolean) (( ((long) (div) ) < 0 )) ) )) ? (1) : (0) )) ) )) );
	}
	
	
	public static long divCeil(long num, long div)
	{
		//line 117 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		if (( ((long) (num) ) == 0 )) 
		{
			//line 118 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			return thx.Int64s.zero;
		}
		
		//line 119 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		if (( ((long) (div) ) == 0 )) 
		{
			//line 120 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			throw haxe.lang.HaxeException.wrap(new thx.Error("Int64s.divCeil division by zero", null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.Int64s", "Int64s.hx", "divCeil"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (120) )) )})));
		}
		
		//line 116 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		long r_quotient = ((long) (( ((long) (num) ) / ((long) (div) ) )) );
		//line 116 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		long r_modulus = ((long) (( ((long) (num) ) % ((long) (div) ) )) );
		//line 129 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		if (( ( ((boolean) (( ((long) (num) ) < 0 )) ) == ((boolean) (( ((long) (div) ) < 0 )) ) ) && ( ((long) (r_modulus) ) != 0 ) )) 
		{
			//line 130 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			return ((long) (( ((long) (r_quotient) ) + ((long) (thx.Int64s.one) ) )) );
		}
		else
		{
			//line 132 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			return r_quotient;
		}
		
	}
	
	
	public static long min;
	
	public static double toFloat(long i)
	{
		//line 143 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		boolean isNegative = false;
		//line 144 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		if (((boolean) (( ((long) (i) ) < ((long) (0) ) )) )) 
		{
			//line 145 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			if (((boolean) (( ((long) (i) ) < ((long) (thx.Int64s.min) ) )) )) 
			{
				//line 146 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
				return -9223372036854775808.0;
			}
			
			//line 147 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			isNegative = true;
			//line 148 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			i = haxe._Int64.Int64_Impl_.neg(i);
		}
		
		//line 150 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		double multiplier = 1.0;
		//line 150 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		double ret = 0.0;
		//line 152 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		{
			//line 152 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			int _g = 0;
			//line 152 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			while (( _g < 64 ))
			{
				//line 152 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
				 ++ _g;
				//line 153 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
				if (( (((long) (( ((long) (i) ) & ((long) (thx.Int64s.one) ) )) )) != ((long) (thx.Int64s.zero) ) )) 
				{
					//line 154 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
					ret += multiplier;
				}
				
				//line 155 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
				multiplier *= 2.0;
				//line 156 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
				i = ((long) (( ((long) (i) ) >> 1 )) );
			}
			
		}
		
		//line 158 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		return ( (( (isNegative) ? (-1) : (1) )) * ret );
	}
	
	
	public static long fromFloat(double f)
	{
		//line 162 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		if (( java.lang.Double.isNaN(f) ||  ! (haxe.lang.Runtime.isFinite(f))  )) 
		{
			//line 163 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			throw haxe.lang.HaxeException.wrap(new thx.Error("Conversion to Int64 failed. Number is NaN or Infinite", null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.Int64s", "Int64s.hx", "fromFloat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (163) )) )})));
		}
		
		//line 165 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		double noFractions = ( f - ( f % 1 ) );
		//line 168 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		if (( noFractions > 9007199254740991.0 )) 
		{
			//line 169 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			throw haxe.lang.HaxeException.wrap(new thx.Error("Conversion to Int64 failed. Conversion overflow", null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.Int64s", "Int64s.hx", "fromFloat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (169) )) )})));
		}
		
		//line 170 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		if (( noFractions < -9007199254740991.0 )) 
		{
			//line 171 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			throw haxe.lang.HaxeException.wrap(new thx.Error("Conversion to Int64 failed. Conversion underflow", null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.Int64s", "Int64s.hx", "fromFloat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (171) )) )})));
		}
		
		//line 173 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		long result = thx.Int64s.zero;
		//line 173 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		boolean neg = ( noFractions < 0.0 );
		//line 173 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		double rest = ( (neg) ? ( - (noFractions) ) : (noFractions) );
		//line 177 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		int i = 0;
		//line 177 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		double curr = 0.0;
		//line 178 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		while (( rest >= 1 ))
		{
			//line 179 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			curr = ( rest % 2 );
			//line 180 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			rest /= ((double) (2) );
			//line 181 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			if (( curr >= 1 )) 
			{
				//line 182 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
				result = ((long) (( ((long) (result) ) + (((long) (( ((long) (1) ) << i )) )) )) );
			}
			
			//line 183 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			 ++ i;
		}
		
		//line 186 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		if (neg) 
		{
			//line 187 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			return haxe._Int64.Int64_Impl_.neg(result);
		}
		else
		{
			//line 189 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
			return result;
		}
		
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 37 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		return new thx.Int64s(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 37 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Int64s.hx"
		return new thx.Int64s();
	}
	
	
}


