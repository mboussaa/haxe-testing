// Generated by Haxe 3.3.0
package thx._QueryString;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public final class QueryString_Impl_
{
	static
	{
		//line 14 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		thx._QueryString.QueryString_Impl_.separator = "&";
		//line 15 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		thx._QueryString.QueryString_Impl_.assignment = "=";
		//line 16 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		thx._QueryString.QueryString_Impl_.encodeURIComponent = ( (( thx._QueryString.QueryString_Impl__Anon_16__Fun.__hx_current != null )) ? (thx._QueryString.QueryString_Impl__Anon_16__Fun.__hx_current) : (thx._QueryString.QueryString_Impl__Anon_16__Fun.__hx_current = ((thx._QueryString.QueryString_Impl__Anon_16__Fun) (new thx._QueryString.QueryString_Impl__Anon_16__Fun()) )) );
		//line 17 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		thx._QueryString.QueryString_Impl_.decodeURIComponent = ( (( thx._QueryString.QueryString_Impl__Anon_17__Fun.__hx_current != null )) ? (thx._QueryString.QueryString_Impl__Anon_17__Fun.__hx_current) : (thx._QueryString.QueryString_Impl__Anon_17__Fun.__hx_current = ((thx._QueryString.QueryString_Impl__Anon_17__Fun) (new thx._QueryString.QueryString_Impl__Anon_17__Fun()) )) );
	}
	
	public static java.lang.String separator;
	
	public static java.lang.String assignment;
	
	public static haxe.lang.Function encodeURIComponent;
	
	public static haxe.lang.Function decodeURIComponent;
	
	public static haxe.ds.StringMap<haxe.root.Array<java.lang.String>> empty()
	{
		//line 20 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		return new haxe.ds.StringMap<haxe.root.Array<java.lang.String>>();
	}
	
	
	public static haxe.ds.StringMap<haxe.root.Array<java.lang.String>> parseWithSymbols(java.lang.String s, java.lang.String separator, java.lang.String assignment, haxe.lang.Function decodeURIComponent)
	{
		//line 23 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		if (( null == s )) 
		{
			//line 23 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
			return new haxe.ds.StringMap<haxe.root.Array<java.lang.String>>();
		}
		else
		{
			//line 26 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
			if (( null == decodeURIComponent )) 
			{
				//line 27 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
				decodeURIComponent = thx._QueryString.QueryString_Impl_.decodeURIComponent;
			}
			
			//line 28 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
			if (( s.startsWith("?") || s.startsWith("#") )) 
			{
				//line 29 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
				s = haxe.lang.StringExt.substring(s, 1, null);
			}
			
			//line 30 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
			s = haxe.root.StringTools.ltrim(s);
			//line 23 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
			return ((haxe.ds.StringMap<haxe.root.Array<java.lang.String>>) (thx.Arrays.reduce(((haxe.root.Array<java.lang.String>) (haxe.lang.StringExt.split(s, separator)) ), ((haxe.lang.Function) (new thx._QueryString.QueryString_Impl__parseWithSymbols_32__Fun(decodeURIComponent, assignment)) ), ((java.lang.Object) (new haxe.ds.StringMap<haxe.root.Array<java.lang.String>>()) ))) );
		}
		
	}
	
	
	public static haxe.ds.StringMap<haxe.root.Array<java.lang.String>> parse(java.lang.String s)
	{
		//line 42 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		return thx._QueryString.QueryString_Impl_.parseWithSymbols(s, thx._QueryString.QueryString_Impl_.separator, thx._QueryString.QueryString_Impl_.assignment, thx._QueryString.QueryString_Impl_.decodeURIComponent);
	}
	
	
	public static haxe.ds.StringMap<haxe.root.Array<java.lang.String>> fromObject(java.lang.Object o)
	{
		//line 45 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		haxe.ds.StringMap<haxe.root.Array<java.lang.String>> qs = new haxe.ds.StringMap<haxe.root.Array<java.lang.String>>();
		//line 46 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		if ( ! (haxe.root.Reflect.isObject(o)) ) 
		{
			//line 46 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
			throw haxe.lang.HaxeException.wrap(( ( "unable to convert " + haxe.root.Std.string(o) ) + " to QueryString" ));
		}
		
		//line 47 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		thx.Objects.tuples(o).map(((haxe.lang.Function) (new thx._QueryString.QueryString_Impl__fromObject_47__Fun(qs)) ));
		//line 54 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		return qs;
	}
	
	
	public static java.lang.Object toObject(haxe.ds.StringMap<haxe.root.Array<java.lang.String>> this1)
	{
		//line 58 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		return ((java.lang.Object) (thx.Iterators.reduce(((java.lang.Object) (this1.keys()) ), ((haxe.lang.Function) (new thx._QueryString.QueryString_Impl__toObject_58__Fun(this1)) ), ((java.lang.Object) (new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{}, new double[]{})) ))) );
	}
	
	
	public static boolean isEmpty(haxe.ds.StringMap<haxe.root.Array<java.lang.String>> this1)
	{
		//line 71 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		return  ! (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(this1.iterator(), "hasNext", null))) ;
	}
	
	
	public static boolean isEmptyOrMono(haxe.ds.StringMap<haxe.root.Array<java.lang.String>> this1)
	{
		//line 74 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		haxe.root.Array<java.lang.String> arr = ((haxe.root.Array<java.lang.String>) (((haxe.root.Array) (thx.Iterators.toArray(((java.lang.Object) (this1.keys()) ))) )) );
		//line 75 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		if (( arr.length == 0 )) 
		{
			//line 76 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
			return true;
		}
		
		//line 77 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		if (( arr.length != 1 )) 
		{
			//line 78 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
			return false;
		}
		
		//line 79 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		return ( ((haxe.root.Array<java.lang.String>) (this1.get(arr.__get(0))) ).length == 0 );
	}
	
	
	public static boolean exist(haxe.ds.StringMap<haxe.root.Array<java.lang.String>> this1, java.lang.String name)
	{
		//line 83 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		return this1.exists(name);
	}
	
	
	public static boolean remove(haxe.ds.StringMap<haxe.root.Array<java.lang.String>> this1, java.lang.String name)
	{
		//line 86 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		return this1.remove(name);
	}
	
	
	public static boolean removeValue(haxe.ds.StringMap<haxe.root.Array<java.lang.String>> this1, java.lang.String name, java.lang.String value)
	{
		//line 89 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		if ( ! (this1.exists(name)) ) 
		{
			//line 90 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
			return false;
		}
		
		//line 91 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		return ((haxe.root.Array<java.lang.String>) (this1.get(name)) ).remove(value);
	}
	
	
	public static haxe.root.Array<java.lang.String> get(haxe.ds.StringMap<haxe.root.Array<java.lang.String>> this1, java.lang.String name)
	{
		//line 95 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		return ((haxe.root.Array<java.lang.String>) (this1.get(name)) );
	}
	
	
	public static haxe.ds.StringMap<haxe.root.Array<java.lang.String>> set(haxe.ds.StringMap<haxe.root.Array<java.lang.String>> this1, java.lang.String name, java.lang.String value)
	{
		//line 98 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		this1.set(name, new haxe.root.Array<java.lang.String>(new java.lang.String[]{value}));
		//line 99 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		return this1;
	}
	
	
	public static haxe.ds.StringMap<haxe.root.Array<java.lang.String>> add(haxe.ds.StringMap<haxe.root.Array<java.lang.String>> this1, java.lang.String name, java.lang.String value)
	{
		//line 103 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		haxe.root.Array<java.lang.String> arr = ((haxe.root.Array<java.lang.String>) (this1.get(name)) );
		//line 104 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		if (( null == arr )) 
		{
			//line 105 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
			if (( value == null )) 
			{
				//line 105 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
				arr = new haxe.root.Array<java.lang.String>(new java.lang.String[]{});
			}
			else
			{
				//line 105 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
				arr = new haxe.root.Array<java.lang.String>(new java.lang.String[]{value});
			}
			
			//line 106 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
			this1.set(name, arr);
		}
		else
		{
			//line 107 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
			if (( null != value )) 
			{
				//line 108 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
				arr.push(value);
			}
			
		}
		
		//line 110 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		return this1;
	}
	
	
	public static haxe.ds.StringMap<haxe.root.Array<java.lang.String>> clone(haxe.ds.StringMap<haxe.root.Array<java.lang.String>> this1)
	{
		//line 114 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		if (( null == this1 )) 
		{
			//line 114 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
			return null;
		}
		
		//line 115 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		haxe.ds.StringMap<haxe.root.Array<java.lang.String>> map = new haxe.ds.StringMap<haxe.root.Array<java.lang.String>>();
		//line 116 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		{
			//line 116 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
			java.lang.Object tmp = this1.keys();
			//line 116 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
			while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(tmp, "hasNext", null)))
			{
				//line 116 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
				java.lang.String key = haxe.lang.Runtime.toString(haxe.lang.Runtime.callField(tmp, "next", null));
				//line 117 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
				map.set(key, ((haxe.root.Array<java.lang.String>) (((haxe.root.Array<java.lang.String>) (this1.get(key)) ).copy()) ));
			}
			
		}
		
		//line 118 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		return map;
	}
	
	
	public static haxe.ds.StringMap<haxe.root.Array<java.lang.String>> setMany(haxe.ds.StringMap<haxe.root.Array<java.lang.String>> this1, java.lang.String name, haxe.root.Array<java.lang.String> values)
	{
		//line 122 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		this1.set(name, values);
		//line 123 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		return this1;
	}
	
	
	public static java.lang.String toStringWithSymbols(haxe.ds.StringMap<haxe.root.Array<java.lang.String>> this1, java.lang.String separator, java.lang.String assignment, haxe.lang.Function encodeURIComponent)
	{
		//line 127 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		if (( null == this1 )) 
		{
			//line 128 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
			return null;
		}
		
		//line 129 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		if (( null == encodeURIComponent )) 
		{
			//line 130 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
			encodeURIComponent = thx._QueryString.QueryString_Impl_.encodeURIComponent;
		}
		
		//line 131 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		return ((haxe.root.Array<java.lang.String>) (thx.Arrays.flatten(((haxe.root.Array<haxe.root.Array<java.lang.String>>) (((haxe.root.Array) (thx.Iterators.map(((java.lang.Object) (this1.keys()) ), ((haxe.lang.Function) (new thx._QueryString.QueryString_Impl__toStringWithSymbols_131__Fun(this1, encodeURIComponent, assignment)) ))) )) ))) ).join(separator);
	}
	
	
	public static boolean equals(haxe.ds.StringMap<haxe.root.Array<java.lang.String>> this1, haxe.ds.StringMap<haxe.root.Array<java.lang.String>> other)
	{
		//line 143 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		haxe.root.Array<java.lang.Object> tuples = ((haxe.root.Array<java.lang.Object>) (thx.Maps.tuples(((haxe.IMap<java.lang.String, haxe.root.Array<java.lang.String>>) (other) ))) );
		//line 144 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		{
			//line 144 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
			java.lang.Object tmp = this1.keys();
			//line 144 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
			while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(tmp, "hasNext", null)))
			{
				//line 144 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
				java.lang.String key = haxe.lang.Runtime.toString(haxe.lang.Runtime.callField(tmp, "next", null));
				//line 145 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
				java.lang.Object t = ((java.lang.Object) (thx.Arrays.find(((haxe.root.Array<java.lang.Object>) (tuples) ), ((haxe.lang.Function) (new thx._QueryString.QueryString_Impl__equals_145__Fun(key)) ))) );
				//line 146 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
				if (( null == t )) 
				{
					//line 147 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
					return false;
				}
				
				//line 148 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
				if ( ! (((boolean) (thx.Arrays.equals(((haxe.root.Array<java.lang.String>) (this1.get(key)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(((java.lang.Object) (t) ), "_1", true)) ), ((haxe.lang.Function) (null) ))) )) ) 
				{
					//line 149 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
					return false;
				}
				
				//line 150 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
				tuples.remove(t);
			}
			
		}
		
		//line 152 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		return ( tuples.length == 0 );
	}
	
	
	public static java.lang.String toString(haxe.ds.StringMap<haxe.root.Array<java.lang.String>> this1)
	{
		//line 156 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/QueryString.hx"
		return thx._QueryString.QueryString_Impl_.toStringWithSymbols(this1, thx._QueryString.QueryString_Impl_.separator, thx._QueryString.QueryString_Impl_.assignment, thx._QueryString.QueryString_Impl_.encodeURIComponent);
	}
	
	
}


