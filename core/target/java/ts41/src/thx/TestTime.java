// Generated by Haxe 3.3.0
package thx;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestTime extends haxe.lang.HxObject
{
	public TestTime(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestTime(int i)
	{
		//line 9 "/shared/core/test/thx/TestTime.hx"
		thx.TestTime.__hx_ctor_thx_TestTime(this, i);
	}
	
	
	public static void __hx_ctor_thx_TestTime(thx.TestTime __temp_me122, int i)
	{
		//line 10 "/shared/core/test/thx/TestTime.hx"
		__temp_me122.x = i;
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 7 "/shared/core/test/thx/TestTime.hx"
		return new thx.TestTime(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 7 "/shared/core/test/thx/TestTime.hx"
		return new thx.TestTime(((int) (haxe.lang.Runtime.toInt(arr.__get(0))) ));
	}
	
	
	public int x;
	
	public void testBasics()
	{
		//line 14 "/shared/core/test/thx/TestTime.hx"
		int _g1 = 0;
		//line 14 "/shared/core/test/thx/TestTime.hx"
		int _g = this.x;
		//line 14 "/shared/core/test/thx/TestTime.hx"
		while (( _g1 < _g ))
		{
			//line 14 "/shared/core/test/thx/TestTime.hx"
			 ++ _g1;
			//line 15 "/shared/core/test/thx/TestTime.hx"
			long time = thx._Time.Time_Impl_.create(249, 8, 7, 6);
			//line 16 "/shared/core/test/thx/TestTime.hx"
			long x = ((long) (( ((long) (time) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
			//line 16 "/shared/core/test/thx/TestTime.hx"
			if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
			{
				//line 16 "/shared/core/test/thx/TestTime.hx"
				throw haxe.lang.HaxeException.wrap("Overflow");
			}
			
			//line 16 "/shared/core/test/thx/TestTime.hx"
			utest.Assert.equals(10, ((int) (((long) (x) )) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestTime", "TestTime.hx", "testBasics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (16) )) )}));
			//line 17 "/shared/core/test/thx/TestTime.hx"
			long x1 = ((long) (( ((long) (( ((long) (time) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ) % ((long) (24) ) )) );
			//line 17 "/shared/core/test/thx/TestTime.hx"
			if (( ((boolean) (( ((long) (x1) ) < -2147483648 )) ) || ((boolean) (( ((long) (x1) ) > 2147483647 )) ) )) 
			{
				//line 17 "/shared/core/test/thx/TestTime.hx"
				throw haxe.lang.HaxeException.wrap("Overflow");
			}
			
			//line 17 "/shared/core/test/thx/TestTime.hx"
			utest.Assert.equals(9, ((int) (((long) (x1) )) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestTime", "TestTime.hx", "testBasics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (17) )) )}));
			//line 18 "/shared/core/test/thx/TestTime.hx"
			long x2 = ((long) (( ((long) (( ((long) (time) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) ) % ((long) (60) ) )) );
			//line 18 "/shared/core/test/thx/TestTime.hx"
			if (( ((boolean) (( ((long) (x2) ) < -2147483648 )) ) || ((boolean) (( ((long) (x2) ) > 2147483647 )) ) )) 
			{
				//line 18 "/shared/core/test/thx/TestTime.hx"
				throw haxe.lang.HaxeException.wrap("Overflow");
			}
			
			//line 18 "/shared/core/test/thx/TestTime.hx"
			utest.Assert.equals(8, ((int) (((long) (x2) )) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestTime", "TestTime.hx", "testBasics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (18) )) )}));
			//line 19 "/shared/core/test/thx/TestTime.hx"
			long x3 = ((long) (( ((long) (( ((long) (time) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) ) % ((long) (60) ) )) );
			//line 19 "/shared/core/test/thx/TestTime.hx"
			if (( ((boolean) (( ((long) (x3) ) < -2147483648 )) ) || ((boolean) (( ((long) (x3) ) > 2147483647 )) ) )) 
			{
				//line 19 "/shared/core/test/thx/TestTime.hx"
				throw haxe.lang.HaxeException.wrap("Overflow");
			}
			
			//line 19 "/shared/core/test/thx/TestTime.hx"
			utest.Assert.equals(7, ((int) (((long) (x3) )) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestTime", "TestTime.hx", "testBasics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (19) )) )}));
			//line 20 "/shared/core/test/thx/TestTime.hx"
			long x4 = ((long) (( ((long) (( ((long) (time) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) )) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.thousandI64) ) )) );
			//line 20 "/shared/core/test/thx/TestTime.hx"
			if (( ((boolean) (( ((long) (x4) ) < -2147483648 )) ) || ((boolean) (( ((long) (x4) ) > 2147483647 )) ) )) 
			{
				//line 20 "/shared/core/test/thx/TestTime.hx"
				throw haxe.lang.HaxeException.wrap("Overflow");
			}
			
			//line 20 "/shared/core/test/thx/TestTime.hx"
			utest.Assert.equals(6, ((int) (((long) (x4) )) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestTime", "TestTime.hx", "testBasics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (20) )) )}));
			//line 21 "/shared/core/test/thx/TestTime.hx"
			long x5 = ((long) (( ((long) (( ((long) (time) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMicrosecondI64) ) )) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.tenThousandI64) ) )) );
			//line 21 "/shared/core/test/thx/TestTime.hx"
			if (( ((boolean) (( ((long) (x5) ) < -2147483648 )) ) || ((boolean) (( ((long) (x5) ) > 2147483647 )) ) )) 
			{
				//line 21 "/shared/core/test/thx/TestTime.hx"
				throw haxe.lang.HaxeException.wrap("Overflow");
			}
			
			//line 21 "/shared/core/test/thx/TestTime.hx"
			utest.Assert.equals(6000, ((int) (((long) (x5) )) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestTime", "TestTime.hx", "testBasics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (21) )) )}));
			//line 22 "/shared/core/test/thx/TestTime.hx"
			long x6 = ((long) (( ((long) (time) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
			//line 22 "/shared/core/test/thx/TestTime.hx"
			if (( ((boolean) (( ((long) (x6) ) < -2147483648 )) ) || ((boolean) (( ((long) (x6) ) > 2147483647 )) ) )) 
			{
				//line 22 "/shared/core/test/thx/TestTime.hx"
				throw haxe.lang.HaxeException.wrap("Overflow");
			}
			
			//line 22 "/shared/core/test/thx/TestTime.hx"
			utest.Assert.equals(60000, ((int) (((long) (x6) )) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestTime", "TestTime.hx", "testBasics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (22) )) )}));
			//line 24 "/shared/core/test/thx/TestTime.hx"
			long x7 = ((long) (( ((long) (time) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
			//line 24 "/shared/core/test/thx/TestTime.hx"
			if (( ((boolean) (( ((long) (x7) ) < -2147483648 )) ) || ((boolean) (( ((long) (x7) ) > 2147483647 )) ) )) 
			{
				//line 24 "/shared/core/test/thx/TestTime.hx"
				throw haxe.lang.HaxeException.wrap("Overflow");
			}
			
			//line 24 "/shared/core/test/thx/TestTime.hx"
			utest.Assert.equals(10, ((int) (((long) (x7) )) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestTime", "TestTime.hx", "testBasics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (24) )) )}));
			//line 25 "/shared/core/test/thx/TestTime.hx"
			long x8 = ((long) (( ((long) (time) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) );
			//line 25 "/shared/core/test/thx/TestTime.hx"
			if (( ((boolean) (( ((long) (x8) ) < -2147483648 )) ) || ((boolean) (( ((long) (x8) ) > 2147483647 )) ) )) 
			{
				//line 25 "/shared/core/test/thx/TestTime.hx"
				throw haxe.lang.HaxeException.wrap("Overflow");
			}
			
			//line 25 "/shared/core/test/thx/TestTime.hx"
			utest.Assert.equals(249, ((int) (((long) (x8) )) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestTime", "TestTime.hx", "testBasics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (25) )) )}));
			//line 26 "/shared/core/test/thx/TestTime.hx"
			long x9 = ((long) (( ((long) (time) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) );
			//line 26 "/shared/core/test/thx/TestTime.hx"
			if (( ((boolean) (( ((long) (x9) ) < -2147483648 )) ) || ((boolean) (( ((long) (x9) ) > 2147483647 )) ) )) 
			{
				//line 26 "/shared/core/test/thx/TestTime.hx"
				throw haxe.lang.HaxeException.wrap("Overflow");
			}
			
			//line 26 "/shared/core/test/thx/TestTime.hx"
			utest.Assert.equals(14948, ((int) (((long) (x9) )) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestTime", "TestTime.hx", "testBasics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (26) )) )}));
			//line 27 "/shared/core/test/thx/TestTime.hx"
			long x10 = ((long) (( ((long) (time) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
			//line 27 "/shared/core/test/thx/TestTime.hx"
			if (( ((boolean) (( ((long) (x10) ) < -2147483648 )) ) || ((boolean) (( ((long) (x10) ) > 2147483647 )) ) )) 
			{
				//line 27 "/shared/core/test/thx/TestTime.hx"
				throw haxe.lang.HaxeException.wrap("Overflow");
			}
			
			//line 27 "/shared/core/test/thx/TestTime.hx"
			utest.Assert.equals(896887, ((int) (((long) (x10) )) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestTime", "TestTime.hx", "testBasics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (27) )) )}));
			//line 28 "/shared/core/test/thx/TestTime.hx"
			long x11 = ((long) (( ((long) (time) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) )) );
			//line 28 "/shared/core/test/thx/TestTime.hx"
			if (( ((boolean) (( ((long) (x11) ) < -2147483648 )) ) || ((boolean) (( ((long) (x11) ) > 2147483647 )) ) )) 
			{
				//line 28 "/shared/core/test/thx/TestTime.hx"
				throw haxe.lang.HaxeException.wrap("Overflow");
			}
			
			//line 28 "/shared/core/test/thx/TestTime.hx"
			utest.Assert.equals(896887006, ((int) (((long) (x11) )) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestTime", "TestTime.hx", "testBasics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (28) )) )}));
			//line 29 "/shared/core/test/thx/TestTime.hx"
			utest.Assert.equals("896887006000", ( "" + haxe.root.Std.string(((long) (( ((long) (time) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMicrosecondI64) ) )) )) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestTime", "TestTime.hx", "testBasics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (29) )) )}));
		}
		
	}
	
	
	public void testFromString()
	{
		//line 33 "/shared/core/test/thx/TestTime.hx"
		int _g1 = 0;
		//line 33 "/shared/core/test/thx/TestTime.hx"
		int _g = this.x;
		//line 33 "/shared/core/test/thx/TestTime.hx"
		while (( _g1 < _g ))
		{
			//line 33 "/shared/core/test/thx/TestTime.hx"
			 ++ _g1;
			//line 34 "/shared/core/test/thx/TestTime.hx"
			long time = thx._Time.Time_Impl_.fromString("125:55:45.123");
			//line 35 "/shared/core/test/thx/TestTime.hx"
			long x = ((long) (( ((long) (time) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
			//line 35 "/shared/core/test/thx/TestTime.hx"
			if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
			{
				//line 35 "/shared/core/test/thx/TestTime.hx"
				throw haxe.lang.HaxeException.wrap("Overflow");
			}
			
			//line 35 "/shared/core/test/thx/TestTime.hx"
			utest.Assert.equals(5, ((int) (((long) (x) )) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestTime", "TestTime.hx", "testFromString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (35) )) )}));
			//line 36 "/shared/core/test/thx/TestTime.hx"
			utest.Assert.equals("125", ( "" + haxe.root.Std.string(((long) (( ((long) (time) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) )) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestTime", "TestTime.hx", "testFromString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (36) )) )}));
			//line 37 "/shared/core/test/thx/TestTime.hx"
			long x1 = ((long) (( ((long) (( ((long) (time) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ) % ((long) (24) ) )) );
			//line 37 "/shared/core/test/thx/TestTime.hx"
			if (( ((boolean) (( ((long) (x1) ) < -2147483648 )) ) || ((boolean) (( ((long) (x1) ) > 2147483647 )) ) )) 
			{
				//line 37 "/shared/core/test/thx/TestTime.hx"
				throw haxe.lang.HaxeException.wrap("Overflow");
			}
			
			//line 37 "/shared/core/test/thx/TestTime.hx"
			utest.Assert.equals(5, ((int) (((long) (x1) )) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestTime", "TestTime.hx", "testFromString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (37) )) )}));
			//line 38 "/shared/core/test/thx/TestTime.hx"
			long x2 = ((long) (( ((long) (( ((long) (time) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) ) % ((long) (60) ) )) );
			//line 38 "/shared/core/test/thx/TestTime.hx"
			if (( ((boolean) (( ((long) (x2) ) < -2147483648 )) ) || ((boolean) (( ((long) (x2) ) > 2147483647 )) ) )) 
			{
				//line 38 "/shared/core/test/thx/TestTime.hx"
				throw haxe.lang.HaxeException.wrap("Overflow");
			}
			
			//line 38 "/shared/core/test/thx/TestTime.hx"
			utest.Assert.equals(55, ((int) (((long) (x2) )) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestTime", "TestTime.hx", "testFromString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (38) )) )}));
			//line 39 "/shared/core/test/thx/TestTime.hx"
			long x3 = ((long) (( ((long) (( ((long) (time) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) ) % ((long) (60) ) )) );
			//line 39 "/shared/core/test/thx/TestTime.hx"
			if (( ((boolean) (( ((long) (x3) ) < -2147483648 )) ) || ((boolean) (( ((long) (x3) ) > 2147483647 )) ) )) 
			{
				//line 39 "/shared/core/test/thx/TestTime.hx"
				throw haxe.lang.HaxeException.wrap("Overflow");
			}
			
			//line 39 "/shared/core/test/thx/TestTime.hx"
			utest.Assert.equals(45, ((int) (((long) (x3) )) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestTime", "TestTime.hx", "testFromString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (39) )) )}));
			//line 40 "/shared/core/test/thx/TestTime.hx"
			long x4 = ((long) (( ((long) (( ((long) (time) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) )) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.thousandI64) ) )) );
			//line 40 "/shared/core/test/thx/TestTime.hx"
			if (( ((boolean) (( ((long) (x4) ) < -2147483648 )) ) || ((boolean) (( ((long) (x4) ) > 2147483647 )) ) )) 
			{
				//line 40 "/shared/core/test/thx/TestTime.hx"
				throw haxe.lang.HaxeException.wrap("Overflow");
			}
			
			//line 40 "/shared/core/test/thx/TestTime.hx"
			utest.Assert.equals(123, ((int) (((long) (x4) )) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestTime", "TestTime.hx", "testFromString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (40) )) )}));
			//line 42 "/shared/core/test/thx/TestTime.hx"
			utest.Assert.equals("125:55:45.123", thx._Time.Time_Impl_.toString(time), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestTime", "TestTime.hx", "testFromString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (42) )) )}));
			//line 43 "/shared/core/test/thx/TestTime.hx"
			utest.Assert.equals("89:25:30.005", thx._Time.Time_Impl_.toString(thx._Time.Time_Impl_.fromString("3.17:25:30.005")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestTime", "TestTime.hx", "testFromString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (43) )) )}));
			//line 44 "/shared/core/test/thx/TestTime.hx"
			utest.Assert.equals("-89:25:30.05", thx._Time.Time_Impl_.toString(thx._Time.Time_Impl_.fromString("-3.17:25:30.05")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestTime", "TestTime.hx", "testFromString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (44) )) )}));
		}
		
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 7 "/shared/core/test/thx/TestTime.hx"
		{
			//line 7 "/shared/core/test/thx/TestTime.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/core/test/thx/TestTime.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 7 "/shared/core/test/thx/TestTime.hx"
					if (field.equals("x")) 
					{
						//line 7 "/shared/core/test/thx/TestTime.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/TestTime.hx"
						this.x = ((int) (value) );
						//line 7 "/shared/core/test/thx/TestTime.hx"
						return value;
					}
					
					//line 7 "/shared/core/test/thx/TestTime.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/core/test/thx/TestTime.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/core/test/thx/TestTime.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 7 "/shared/core/test/thx/TestTime.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 7 "/shared/core/test/thx/TestTime.hx"
		{
			//line 7 "/shared/core/test/thx/TestTime.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/core/test/thx/TestTime.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 7 "/shared/core/test/thx/TestTime.hx"
					if (field.equals("x")) 
					{
						//line 7 "/shared/core/test/thx/TestTime.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/TestTime.hx"
						this.x = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 7 "/shared/core/test/thx/TestTime.hx"
						return value;
					}
					
					//line 7 "/shared/core/test/thx/TestTime.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/core/test/thx/TestTime.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/core/test/thx/TestTime.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 7 "/shared/core/test/thx/TestTime.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 7 "/shared/core/test/thx/TestTime.hx"
		{
			//line 7 "/shared/core/test/thx/TestTime.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/core/test/thx/TestTime.hx"
			switch (field.hashCode())
			{
				case 1443991181:
				{
					//line 7 "/shared/core/test/thx/TestTime.hx"
					if (field.equals("testFromString")) 
					{
						//line 7 "/shared/core/test/thx/TestTime.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/TestTime.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFromString")) );
					}
					
					//line 7 "/shared/core/test/thx/TestTime.hx"
					break;
				}
				
				
				case 120:
				{
					//line 7 "/shared/core/test/thx/TestTime.hx"
					if (field.equals("x")) 
					{
						//line 7 "/shared/core/test/thx/TestTime.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/TestTime.hx"
						return this.x;
					}
					
					//line 7 "/shared/core/test/thx/TestTime.hx"
					break;
				}
				
				
				case 1223535927:
				{
					//line 7 "/shared/core/test/thx/TestTime.hx"
					if (field.equals("testBasics")) 
					{
						//line 7 "/shared/core/test/thx/TestTime.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/TestTime.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testBasics")) );
					}
					
					//line 7 "/shared/core/test/thx/TestTime.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/core/test/thx/TestTime.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/core/test/thx/TestTime.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 7 "/shared/core/test/thx/TestTime.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 7 "/shared/core/test/thx/TestTime.hx"
		{
			//line 7 "/shared/core/test/thx/TestTime.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/core/test/thx/TestTime.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 7 "/shared/core/test/thx/TestTime.hx"
					if (field.equals("x")) 
					{
						//line 7 "/shared/core/test/thx/TestTime.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/TestTime.hx"
						return ((double) (this.x) );
					}
					
					//line 7 "/shared/core/test/thx/TestTime.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/core/test/thx/TestTime.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/core/test/thx/TestTime.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 7 "/shared/core/test/thx/TestTime.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 7 "/shared/core/test/thx/TestTime.hx"
		{
			//line 7 "/shared/core/test/thx/TestTime.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/core/test/thx/TestTime.hx"
			switch (field.hashCode())
			{
				case 1443991181:
				{
					//line 7 "/shared/core/test/thx/TestTime.hx"
					if (field.equals("testFromString")) 
					{
						//line 7 "/shared/core/test/thx/TestTime.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/TestTime.hx"
						this.testFromString();
					}
					
					//line 7 "/shared/core/test/thx/TestTime.hx"
					break;
				}
				
				
				case 1223535927:
				{
					//line 7 "/shared/core/test/thx/TestTime.hx"
					if (field.equals("testBasics")) 
					{
						//line 7 "/shared/core/test/thx/TestTime.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/TestTime.hx"
						this.testBasics();
					}
					
					//line 7 "/shared/core/test/thx/TestTime.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/core/test/thx/TestTime.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/core/test/thx/TestTime.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 7 "/shared/core/test/thx/TestTime.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 7 "/shared/core/test/thx/TestTime.hx"
		baseArr.push("x");
		//line 7 "/shared/core/test/thx/TestTime.hx"
		{
			//line 7 "/shared/core/test/thx/TestTime.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


