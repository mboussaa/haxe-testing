// Generated by Haxe 3.3.0
package thx._BitMatrix;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public final class BitMatrix_Impl_
{
	
	
	
	
	public static haxe.root.Array<haxe.root.Array<java.lang.Object>> _new(java.lang.Object bitSetCount, java.lang.Object length)
	{
		//line 14 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		java.lang.Object __temp_length54 = ( (haxe.lang.Runtime.eq(length, null)) ? (((java.lang.Object) (0) )) : (length) );
		//line 14 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		java.lang.Object __temp_bitSetCount53 = ( (haxe.lang.Runtime.eq(bitSetCount, null)) ? (((java.lang.Object) (0) )) : (bitSetCount) );
		//line 14 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		return thx._BitMatrix.BitMatrix_Impl_.empty(__temp_bitSetCount53, __temp_length54);
	}
	
	
	public static haxe.root.Array<haxe.root.Array<java.lang.Object>> empty(java.lang.Object bitSetCount, java.lang.Object length)
	{
		//line 17 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		java.lang.Object __temp_length56 = ( (haxe.lang.Runtime.eq(length, null)) ? (((java.lang.Object) (0) )) : (length) );
		//line 17 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		java.lang.Object __temp_bitSetCount55 = ( (haxe.lang.Runtime.eq(bitSetCount, null)) ? (((java.lang.Object) (0) )) : (bitSetCount) );
		//line 18 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> bitMatrix = new haxe.root.Array<haxe.root.Array<java.lang.Object>>(new haxe.root.Array[]{});
		//line 19 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		{
			//line 19 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
			int _g1 = 0;
			//line 19 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
			int _g = ((int) (haxe.lang.Runtime.toInt(__temp_bitSetCount55)) );
			//line 19 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
			while (( _g1 < _g ))
			{
				//line 19 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
				int bitSetIndex = _g1++;
				//line 20 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
				int length1 = ((int) (haxe.lang.Runtime.toInt(__temp_length56)) );
				//line 20 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
				haxe.root.Array<java.lang.Object> this1 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{length1});
				//line 20 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
				int size = ( ((int) (( length1 / 32 )) ) + 1 );
				//line 20 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
				thx.Arrays.resize(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (this1) )) ), ((int) (( size + 1 )) ), ((java.lang.Object) (0) ));
				//line 20 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
				thx._BitMatrix.BitMatrix_Impl_.setBitSetAt(bitMatrix, bitSetIndex, ((haxe.root.Array<java.lang.Object>) (this1) ));
			}
			
		}
		
		//line 22 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		return bitMatrix;
	}
	
	
	public static haxe.root.Array<haxe.root.Array<java.lang.Object>> fromBitSets(haxe.root.Array<haxe.root.Array<java.lang.Object>> bitSets)
	{
		//line 26 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> bitMatrix = thx._BitMatrix.BitMatrix_Impl_._new(null, null);
		//line 27 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		{
			//line 27 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
			int _g1 = 0;
			//line 27 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
			int _g = bitSets.length;
			//line 27 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
			while (( _g1 < _g ))
			{
				//line 27 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
				int bitSetIndex = _g1++;
				//line 28 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
				thx._BitMatrix.BitMatrix_Impl_.setBitSetAt(bitMatrix, bitSetIndex, bitSets.__get(bitSetIndex));
			}
			
		}
		
		//line 30 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		return bitMatrix;
	}
	
	
	public static haxe.root.Array<haxe.root.Array<java.lang.Object>> fromBools(haxe.root.Array<haxe.root.Array<java.lang.Object>> input)
	{
		//line 35 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> bitSets = ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (((haxe.root.Array) (input.map(((haxe.lang.Function) (( (( thx._BitMatrix.BitMatrix_Impl__fromBools_35__Fun.__hx_current != null )) ? (thx._BitMatrix.BitMatrix_Impl__fromBools_35__Fun.__hx_current) : (thx._BitMatrix.BitMatrix_Impl__fromBools_35__Fun.__hx_current = ((thx._BitMatrix.BitMatrix_Impl__fromBools_35__Fun) (new thx._BitMatrix.BitMatrix_Impl__fromBools_35__Fun()) )) )) ))) )) );
		//line 36 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		return thx._BitMatrix.BitMatrix_Impl_.fromBitSets(bitSets);
	}
	
	
	public static haxe.root.Array<haxe.root.Array<java.lang.Object>> fromString(java.lang.String input, java.lang.String delimiter)
	{
		//line 39 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		if (( delimiter == null )) 
		{
			//line 39 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
			delimiter = ",";
		}
		
		//line 40 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		haxe.root.Array<java.lang.String> bitSetStrings = haxe.lang.StringExt.split(input, delimiter);
		//line 41 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> bitSets = ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (((haxe.root.Array) (bitSetStrings.map(((haxe.lang.Function) (new haxe.lang.Closure(thx._BitSet.BitSet_Impl_.class, "fromString")) ))) )) );
		//line 42 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		return thx._BitMatrix.BitMatrix_Impl_.fromBitSets(bitSets);
	}
	
	
	public static haxe.root.Array<haxe.root.Array<java.lang.Object>> toBools(haxe.root.Array<haxe.root.Array<java.lang.Object>> this1)
	{
		//line 47 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		return ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (((haxe.root.Array) (this1.map(((haxe.lang.Function) (( (( thx._BitMatrix.BitMatrix_Impl__toBools_47__Fun.__hx_current != null )) ? (thx._BitMatrix.BitMatrix_Impl__toBools_47__Fun.__hx_current) : (thx._BitMatrix.BitMatrix_Impl__toBools_47__Fun.__hx_current = ((thx._BitMatrix.BitMatrix_Impl__toBools_47__Fun) (new thx._BitMatrix.BitMatrix_Impl__toBools_47__Fun()) )) )) ))) )) );
	}
	
	
	public static boolean bitAt(haxe.root.Array<haxe.root.Array<java.lang.Object>> this1, int bitSetIndex, int bitIndex)
	{
		//line 53 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		haxe.root.Array<java.lang.Object> bitSet = thx._BitMatrix.BitMatrix_Impl_.bitSetAt(this1, bitSetIndex);
		//line 54 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		return thx._BitSet.BitSet_Impl_.at(bitSet, bitIndex);
	}
	
	
	public static boolean setBitAt(haxe.root.Array<haxe.root.Array<java.lang.Object>> this1, int bitSetIndex, int bitIndex, boolean value)
	{
		//line 58 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		if (( bitIndex >= thx._BitMatrix.BitMatrix_Impl_.get_length(this1) )) 
		{
			//line 59 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
			int _g = 0;
			//line 59 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
			while (( _g < this1.length ))
			{
				//line 59 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
				haxe.root.Array<java.lang.Object> bitSet = this1.__get(_g);
				//line 59 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
				 ++ _g;
				//line 60 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
				thx._BitSet.BitSet_Impl_.setAt(bitSet, bitIndex, false);
			}
			
		}
		
		//line 63 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		haxe.root.Array<java.lang.Object> bitSet1 = thx._BitMatrix.BitMatrix_Impl_.bitSetAt(this1, bitSetIndex);
		//line 64 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		return thx._BitSet.BitSet_Impl_.setAt(bitSet1, bitIndex, value);
	}
	
	
	public static haxe.root.Array<haxe.root.Array<java.lang.Object>> clone(haxe.root.Array<haxe.root.Array<java.lang.Object>> this1)
	{
		//line 68 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		haxe.root.Array<java.lang.Object> tmp = thx.Ints.range(thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(this1), null, null);
		//line 71 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> tmp1 = thx._BitMatrix.BitMatrix_Impl_._new(null, null);
		//line 68 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		return ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (thx.Arrays.reduce(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (tmp) )) ), ((haxe.lang.Function) (new thx._BitMatrix.BitMatrix_Impl__clone_68__Fun(this1)) ), ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (tmp1) ))) );
	}
	
	
	public static haxe.root.Array<haxe.root.Array<java.lang.Object>> concat(haxe.root.Array<haxe.root.Array<java.lang.Object>> this1, haxe.root.Array<haxe.root.Array<java.lang.Object>> right)
	{
		//line 75 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> left = this1;
		//line 76 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		if (( thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(left) != thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(right) )) 
		{
			//line 77 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
			throw haxe.lang.HaxeException.wrap(new thx.Error("cannot concat bit matrices with different bit set counts", null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx._BitMatrix.BitMatrix_Impl_", "BitMatrix.hx", "concat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (77) )) )})));
		}
		
		//line 79 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> bitSets = ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (thx.Arrays.reduce(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.Ints.range(thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(left), null, null)) )) ), ((haxe.lang.Function) (new thx._BitMatrix.BitMatrix_Impl__concat_79__Fun(right, left)) ), ((java.lang.Object) (new haxe.root.Array<haxe.root.Array<java.lang.Object>>(new haxe.root.Array[]{})) ))) );
		//line 83 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		return thx._BitMatrix.BitMatrix_Impl_.fromBitSets(bitSets);
	}
	
	
	public static haxe.root.Array<haxe.root.Array<java.lang.Object>> expand(haxe.root.Array<haxe.root.Array<java.lang.Object>> this1, int count)
	{
		//line 87 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		return thx._BitMatrix.BitMatrix_Impl_.fromBitSets(((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (((haxe.root.Array) (this1.map(((haxe.lang.Function) (new thx._BitMatrix.BitMatrix_Impl__expand_87__Fun(count)) ))) )) ));
	}
	
	
	public static java.lang.String toString(haxe.root.Array<haxe.root.Array<java.lang.Object>> this1, java.lang.String delimiter)
	{
		//line 93 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		if (( delimiter == null )) 
		{
			//line 93 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
			delimiter = ",";
		}
		
		//line 93 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		return ((haxe.root.Array<java.lang.String>) (((haxe.root.Array) (this1.map(((haxe.lang.Function) (( (( thx._BitMatrix.BitMatrix_Impl__toString_93__Fun.__hx_current != null )) ? (thx._BitMatrix.BitMatrix_Impl__toString_93__Fun.__hx_current) : (thx._BitMatrix.BitMatrix_Impl__toString_93__Fun.__hx_current = ((thx._BitMatrix.BitMatrix_Impl__toString_93__Fun) (new thx._BitMatrix.BitMatrix_Impl__toString_93__Fun()) )) )) ))) )) ).join(delimiter);
	}
	
	
	public static haxe.root.Array<haxe.root.Array<java.lang.Object>> and(haxe.root.Array<haxe.root.Array<java.lang.Object>> this1, haxe.root.Array<haxe.root.Array<java.lang.Object>> right)
	{
		//line 102 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		return thx._BitMatrix.BitMatrix_Impl_.combine(this1, right, ( (( thx._BitMatrix.BitMatrix_Impl__and_102__Fun.__hx_current != null )) ? (thx._BitMatrix.BitMatrix_Impl__and_102__Fun.__hx_current) : (thx._BitMatrix.BitMatrix_Impl__and_102__Fun.__hx_current = ((thx._BitMatrix.BitMatrix_Impl__and_102__Fun) (new thx._BitMatrix.BitMatrix_Impl__and_102__Fun()) )) ));
	}
	
	
	public static haxe.root.Array<haxe.root.Array<java.lang.Object>> or(haxe.root.Array<haxe.root.Array<java.lang.Object>> this1, haxe.root.Array<haxe.root.Array<java.lang.Object>> right)
	{
		//line 111 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		return thx._BitMatrix.BitMatrix_Impl_.combine(this1, right, ( (( thx._BitMatrix.BitMatrix_Impl__or_111__Fun.__hx_current != null )) ? (thx._BitMatrix.BitMatrix_Impl__or_111__Fun.__hx_current) : (thx._BitMatrix.BitMatrix_Impl__or_111__Fun.__hx_current = ((thx._BitMatrix.BitMatrix_Impl__or_111__Fun) (new thx._BitMatrix.BitMatrix_Impl__or_111__Fun()) )) ));
	}
	
	
	public static haxe.root.Array<haxe.root.Array<java.lang.Object>> xor(haxe.root.Array<haxe.root.Array<java.lang.Object>> this1, haxe.root.Array<haxe.root.Array<java.lang.Object>> right)
	{
		//line 120 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		return thx._BitMatrix.BitMatrix_Impl_.combine(this1, right, ( (( thx._BitMatrix.BitMatrix_Impl__xor_120__Fun.__hx_current != null )) ? (thx._BitMatrix.BitMatrix_Impl__xor_120__Fun.__hx_current) : (thx._BitMatrix.BitMatrix_Impl__xor_120__Fun.__hx_current = ((thx._BitMatrix.BitMatrix_Impl__xor_120__Fun) (new thx._BitMatrix.BitMatrix_Impl__xor_120__Fun()) )) ));
	}
	
	
	public static haxe.root.Array<haxe.root.Array<java.lang.Object>> negate(haxe.root.Array<haxe.root.Array<java.lang.Object>> this1)
	{
		//line 129 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> bits = this1;
		//line 130 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		haxe.root.Array<java.lang.Object> tmp = thx.Ints.range(thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(this1), null, null);
		//line 135 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> tmp1 = thx._BitMatrix.BitMatrix_Impl_._new(thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(this1), thx._BitMatrix.BitMatrix_Impl_.get_length(this1));
		//line 130 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		return ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (thx.Arrays.reduce(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (tmp) )) ), ((haxe.lang.Function) (new thx._BitMatrix.BitMatrix_Impl__negate_130__Fun(this1, bits)) ), ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (tmp1) ))) );
	}
	
	
	public static boolean equals(haxe.root.Array<haxe.root.Array<java.lang.Object>> this1, haxe.root.Array<haxe.root.Array<java.lang.Object>> right)
	{
		//line 140 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> left = this1;
		//line 141 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		if (( thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(left) != thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(right) )) 
		{
			//line 141 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
			return false;
		}
		
		//line 142 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		if (( thx._BitMatrix.BitMatrix_Impl_.get_length(left) != thx._BitMatrix.BitMatrix_Impl_.get_length(right) )) 
		{
			//line 142 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
			return false;
		}
		
		//line 143 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		{
			//line 143 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
			int _g1 = 0;
			//line 143 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
			int _g = thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(this1);
			//line 143 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
			while (( _g1 < _g ))
			{
				//line 143 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
				int i = _g1++;
				//line 144 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
				if ( ! (thx._BitSet.BitSet_Impl_.equals(thx._BitMatrix.BitMatrix_Impl_.bitSetAt(left, i), thx._BitMatrix.BitMatrix_Impl_.bitSetAt(right, i))) ) 
				{
					//line 144 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
					return false;
				}
				
			}
			
		}
		
		//line 146 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		return true;
	}
	
	
	public static boolean notEquals(haxe.root.Array<haxe.root.Array<java.lang.Object>> this1, haxe.root.Array<haxe.root.Array<java.lang.Object>> right)
	{
		//line 151 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> left = this1;
		//line 152 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		return  ! (thx._BitMatrix.BitMatrix_Impl_.equals(left, right)) ;
	}
	
	
	public static int get_bitSetCount(haxe.root.Array<haxe.root.Array<java.lang.Object>> this1)
	{
		//line 156 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		return this1.length;
	}
	
	
	public static int get_length(haxe.root.Array<haxe.root.Array<java.lang.Object>> this1)
	{
		//line 160 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		if (( thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(this1) == 0 )) 
		{
			//line 160 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
			return 0;
		}
		
		//line 161 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		return thx._BitSet.BitSet_Impl_.get_length(this1.__get(0));
	}
	
	
	public static haxe.root.Array<java.lang.Object> bitSetAt(haxe.root.Array<haxe.root.Array<java.lang.Object>> this1, int index)
	{
		//line 165 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		if (( ( index < 0 ) || ( index >= thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(this1) ) )) 
		{
			//line 166 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
			throw haxe.lang.HaxeException.wrap(new thx.Error(( ( "BitMatrix: index " + index ) + " is out of bounds" ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx._BitMatrix.BitMatrix_Impl_", "BitMatrix.hx", "bitSetAt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (166) )) )})));
		}
		
		//line 168 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		return this1.__get(index);
	}
	
	
	public static haxe.root.Array<java.lang.Object> setBitSetAt(haxe.root.Array<haxe.root.Array<java.lang.Object>> this1, int index, haxe.root.Array<java.lang.Object> bitSet)
	{
		//line 172 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		if (( ( thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(this1) > 0 ) && ((boolean) (( thx._BitMatrix.BitMatrix_Impl_.get_length(this1) != thx._BitSet.BitSet_Impl_.get_length(bitSet) )) ) )) 
		{
			//line 173 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
			throw haxe.lang.HaxeException.wrap(new thx.Error(( "BitMatrix: added BitSet must have same length as BitMatrix length " + thx._BitMatrix.BitMatrix_Impl_.get_length(this1) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx._BitMatrix.BitMatrix_Impl_", "BitMatrix.hx", "setBitSetAt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (173) )) )})));
		}
		
		//line 175 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		return this1.__set(index, bitSet);
	}
	
	
	public static haxe.root.Array<haxe.root.Array<java.lang.Object>> combine(haxe.root.Array<haxe.root.Array<java.lang.Object>> this1, haxe.root.Array<haxe.root.Array<java.lang.Object>> right, haxe.lang.Function combiner)
	{
		//line 179 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> left = this1;
		//line 180 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		if (( thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(left) != thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(right) )) 
		{
			//line 180 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
			throw haxe.lang.HaxeException.wrap(new thx.Error("cannot \"and\" BitMatrices of different BitSet counts", null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx._BitMatrix.BitMatrix_Impl_", "BitMatrix.hx", "combine"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (180) )) )})));
		}
		
		//line 181 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		if (( thx._BitMatrix.BitMatrix_Impl_.get_length(left) != thx._BitMatrix.BitMatrix_Impl_.get_length(right) )) 
		{
			//line 181 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
			throw haxe.lang.HaxeException.wrap(new thx.Error("cannot \"and\" BitMatrices of different lengths", null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx._BitMatrix.BitMatrix_Impl_", "BitMatrix.hx", "combine"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (181) )) )})));
		}
		
		//line 182 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		haxe.root.Array<java.lang.Object> tmp = thx.Ints.range(thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(this1), null, null);
		//line 187 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> tmp1 = thx._BitMatrix.BitMatrix_Impl_._new(thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(left), thx._BitMatrix.BitMatrix_Impl_.get_length(left));
		//line 182 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/BitMatrix.hx"
		return ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (thx.Arrays.reduce(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (tmp) )) ), ((haxe.lang.Function) (new thx._BitMatrix.BitMatrix_Impl__combine_182__Fun(this1, right, left, combiner)) ), ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (tmp1) ))) );
	}
	
	
}


