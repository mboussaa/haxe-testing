// Generated by Haxe 3.3.0
package thx;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestDecimal extends haxe.lang.HxObject
{
	public TestDecimal(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestDecimal(int i)
	{
		//line 8 "/shared/core/test/thx/TestDecimal.hx"
		thx.TestDecimal.__hx_ctor_thx_TestDecimal(this, i);
	}
	
	
	public static void __hx_ctor_thx_TestDecimal(thx.TestDecimal __temp_me121, int i)
	{
		//line 9 "/shared/core/test/thx/TestDecimal.hx"
		__temp_me121.x = i;
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 6 "/shared/core/test/thx/TestDecimal.hx"
		return new thx.TestDecimal(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 6 "/shared/core/test/thx/TestDecimal.hx"
		return new thx.TestDecimal(((int) (haxe.lang.Runtime.toInt(arr.__get(0))) ));
	}
	
	
	public int x;
	
	public int divisionSize;
	
	public void setup()
	{
		//line 15 "/shared/core/test/thx/TestDecimal.hx"
		this.divisionSize = thx.bigint.Decimals.divisionExtraScale;
		//line 16 "/shared/core/test/thx/TestDecimal.hx"
		thx.bigint.Decimals.divisionExtraScale = 16;
	}
	
	
	public void teardown()
	{
		//line 20 "/shared/core/test/thx/TestDecimal.hx"
		thx.bigint.Decimals.divisionExtraScale = this.divisionSize;
	}
	
	
	public void testToBigInt()
	{
		//line 24 "/shared/core/test/thx/TestDecimal.hx"
		int _g1 = 0;
		//line 24 "/shared/core/test/thx/TestDecimal.hx"
		int _g = this.x;
		//line 24 "/shared/core/test/thx/TestDecimal.hx"
		while (( _g1 < _g ))
		{
			//line 24 "/shared/core/test/thx/TestDecimal.hx"
			 ++ _g1;
			//line 25 "/shared/core/test/thx/TestDecimal.hx"
			thx.bigint.DecimalImpl v = ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("10234.0001040000")) );
			//line 26 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(thx._Decimal.Decimal_Impl_.toBigInt(v), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("10234", 10)) )), ( "expected 10234 but got " + ((thx.bigint.BigIntImpl) (thx._Decimal.Decimal_Impl_.toBigInt(v)) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testToBigInt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (26) )) )}));
		}
		
	}
	
	
	public void testTrim()
	{
		//line 30 "/shared/core/test/thx/TestDecimal.hx"
		int _g1 = 0;
		//line 30 "/shared/core/test/thx/TestDecimal.hx"
		int _g = this.x;
		//line 30 "/shared/core/test/thx/TestDecimal.hx"
		while (( _g1 < _g ))
		{
			//line 30 "/shared/core/test/thx/TestDecimal.hx"
			 ++ _g1;
			//line 31 "/shared/core/test/thx/TestDecimal.hx"
			thx.bigint.DecimalImpl v = ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("10234.0001040000")) );
			//line 32 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(( v.scale == 10 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testTrim"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (32) )) )}));
			//line 33 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(( ((thx.bigint.DecimalImpl) (((thx.bigint.DecimalImpl) (v) ).trim(null)) ).scale == 6 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testTrim"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (33) )) )}));
			//line 34 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(( ((thx.bigint.DecimalImpl) (((thx.bigint.DecimalImpl) (v) ).trim(8)) ).scale == 8 ), ( ( ( "expected " + ((thx.bigint.DecimalImpl) (((thx.bigint.DecimalImpl) (v) ).trim(8)) ).toString() ) + " to have a scale 8 but it is " ) + ((thx.bigint.DecimalImpl) (((thx.bigint.DecimalImpl) (v) ).trim(8)) ).scale ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testTrim"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (34) )) )}));
			//line 35 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(( ((thx.bigint.DecimalImpl) (((thx.bigint.DecimalImpl) (v) ).trim(2)) ).scale == 6 ), ( ( ( "expected " + ((thx.bigint.DecimalImpl) (((thx.bigint.DecimalImpl) (v) ).trim(2)) ).toString() ) + " to have a scale 6 but it is " ) + ((thx.bigint.DecimalImpl) (((thx.bigint.DecimalImpl) (v) ).trim(2)) ).scale ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testTrim"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (35) )) )}));
			//line 36 "/shared/core/test/thx/TestDecimal.hx"
			v = ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("10234.00000000")) );
			//line 37 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(( ((thx.bigint.DecimalImpl) (((thx.bigint.DecimalImpl) (v) ).trim(null)) ).scale == 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testTrim"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (37) )) )}));
			//line 38 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(( ((thx.bigint.DecimalImpl) (((thx.bigint.DecimalImpl) (v) ).trim(2)) ).scale == 2 ), ( ( ( "expected " + ((thx.bigint.DecimalImpl) (((thx.bigint.DecimalImpl) (v) ).trim(2)) ).toString() ) + ".scale == 2 but is " ) + ((thx.bigint.DecimalImpl) (((thx.bigint.DecimalImpl) (v) ).trim(2)) ).scale ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testTrim"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (38) )) )}));
			//line 39 "/shared/core/test/thx/TestDecimal.hx"
			v = ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1.20000000")) );
			//line 40 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(( ((thx.bigint.DecimalImpl) (((thx.bigint.DecimalImpl) (v) ).trim(null)) ).scale == 1 ), ( ( ( "expected " + ((thx.bigint.DecimalImpl) (((thx.bigint.DecimalImpl) (v) ).trim(null)) ).toString() ) + ".scale == 1 but got " ) + ((thx.bigint.DecimalImpl) (((thx.bigint.DecimalImpl) (v) ).trim(null)) ).scale ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testTrim"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (40) )) )}));
		}
		
	}
	
	
	public void testStringExp()
	{
		//line 44 "/shared/core/test/thx/TestDecimal.hx"
		int _g1 = 0;
		//line 44 "/shared/core/test/thx/TestDecimal.hx"
		int _g = this.x;
		//line 44 "/shared/core/test/thx/TestDecimal.hx"
		while (( _g1 < _g ))
		{
			//line 44 "/shared/core/test/thx/TestDecimal.hx"
			 ++ _g1;
			//line 45 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1.12345e-10")) ), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("0.000000000112345")) )), ( ( ( "expected " + ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("0.000000000112345")) ).toString() ) + " but got " ) + ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1.12345e-10")) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testStringExp"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (45) )) )}));
			//line 46 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1.12345e+10")) ), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("11234500000")) )), ( ( ( "expected " + ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("11234500000")) ).toString() ) + " but got " ) + ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1.12345e+10")) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testStringExp"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (46) )) )}));
			//line 47 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-1.12345e-10")) ), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-0.000000000112345")) )), ( ( ( "expected " + ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-0.000000000112345")) ).toString() ) + " but got " ) + ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-1.12345e-10")) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testStringExp"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (47) )) )}));
			//line 48 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-1.12345e+10")) ), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-11234500000")) )), ( ( ( "expected " + ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-11234500000")) ).toString() ) + " but got " ) + ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-1.12345e+10")) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testStringExp"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (48) )) )}));
			//line 49 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("0E7")) ), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("0")) )), ( ( ( "expected " + ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("0")) ).toString() ) + " but got " ) + ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("0E7")) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testStringExp"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (49) )) )}));
			//line 50 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(1.234e-50)) ), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1.234000e-050")) )), ( ( ( "expected " + ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(1.234e-50)) ).toString() ) + " == " ) + ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1.234000e-050")) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testStringExp"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (50) )) )}));
		}
		
	}
	
	
	public void testModulo()
	{
		//line 54 "/shared/core/test/thx/TestDecimal.hx"
		int _g1 = 0;
		//line 54 "/shared/core/test/thx/TestDecimal.hx"
		int _g = this.x;
		//line 54 "/shared/core/test/thx/TestDecimal.hx"
		while (( _g1 < _g ))
		{
			//line 54 "/shared/core/test/thx/TestDecimal.hx"
			 ++ _g1;
			//line 55 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx._Decimal.Decimal_Impl_.fromInt(10)) ).modulo(thx._Decimal.Decimal_Impl_.fromInt(3)), thx._Decimal.Decimal_Impl_.fromInt(1)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testModulo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (55) )) )}));
			//line 56 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(10.2)) ).modulo(thx._Decimal.Decimal_Impl_.fromInt(3)), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(1.2)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testModulo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (56) )) )}));
			//line 57 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("12345678900000000")) ).modulo(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("0.0000000012345678")) )), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("0.0000000009832122")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testModulo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (57) )) )}));
			//line 58 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(16.80)) ).modulo(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(4.10)) )), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("0.4")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testModulo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (58) )) )}));
			//line 59 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx._Decimal.Decimal_Impl_.fromInt(10)) ).modulo(thx._Decimal.Decimal_Impl_.fromInt(3)), thx._Decimal.Decimal_Impl_.fromInt(1)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testModulo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (59) )) )}));
			//line 60 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(10.2)) ).modulo(thx._Decimal.Decimal_Impl_.fromInt(3)), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(1.2)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testModulo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (60) )) )}));
			//line 62 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx._Decimal.Decimal_Impl_.fromInt(10)) ).modulo(thx._Decimal.Decimal_Impl_.fromInt(-3)), thx._Decimal.Decimal_Impl_.fromInt(1)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testModulo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (62) )) )}));
			//line 63 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx._Decimal.Decimal_Impl_.fromInt(-10)) ).modulo(thx._Decimal.Decimal_Impl_.fromInt(-3)), thx._Decimal.Decimal_Impl_.fromInt(-1)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testModulo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (63) )) )}));
			//line 64 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx._Decimal.Decimal_Impl_.fromInt(-10)) ).modulo(thx._Decimal.Decimal_Impl_.fromInt(3)), thx._Decimal.Decimal_Impl_.fromInt(-1)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testModulo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (64) )) )}));
			//line 66 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx._Decimal.Decimal_Impl_.fromInt(0)) ).modulo(thx._Decimal.Decimal_Impl_.fromInt(3)), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("0.0")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testModulo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (66) )) )}));
			//line 68 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.raises(( (( thx.TestDecimal_testModulo_68__Fun.__hx_current != null )) ? (thx.TestDecimal_testModulo_68__Fun.__hx_current) : (thx.TestDecimal_testModulo_68__Fun.__hx_current = ((thx.TestDecimal_testModulo_68__Fun) (new thx.TestDecimal_testModulo_68__Fun()) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testModulo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (68) )) )}));
		}
		
	}
	
	
	public void testDivision()
	{
		//line 72 "/shared/core/test/thx/TestDecimal.hx"
		int _g1 = 0;
		//line 72 "/shared/core/test/thx/TestDecimal.hx"
		int _g = this.x;
		//line 72 "/shared/core/test/thx/TestDecimal.hx"
		while (( _g1 < _g ))
		{
			//line 72 "/shared/core/test/thx/TestDecimal.hx"
			 ++ _g1;
			//line 73 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("12345678900000000")) ).divide(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("0.0000000012345678")) )), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("10000000729000059778004901.79640194730495967900669367854888")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testDivision"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (73) )) )}));
			//line 74 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("12345678901234567890.12346789")) ).divide(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("987654321.987654321")) )), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("12499999874.843750115314464248433558")) )), ( ( ( ( ( ( ( "expected " + ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("12345678901234567890.12346789")) ).toString() ) + " / " ) + ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("987654321.987654321")) ).toString() ) + " == " ) + ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("12499999874.843750115314464248433558")) ).toString() ) + " but got " ) + ((thx.bigint.DecimalImpl) (((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("12345678901234567890.12346789")) ).divide(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("987654321.987654321")) ))) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testDivision"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (74) )) )}));
			//line 75 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("12345678901234567890.12346789")) ).divide(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-987654321.987654321")) )), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-12499999874.843750115314464248433558")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testDivision"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (75) )) )}));
			//line 76 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-12345678901234567890.12346789")) ).divide(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-987654321.987654321")) )), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("12499999874.843750115314464248433558")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testDivision"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (76) )) )}));
			//line 77 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-12345678901234567890.12346789")) ).divide(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("987654321.987654321")) )), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-12499999874.843750115314464248433558")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testDivision"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (77) )) )}));
			//line 78 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-12345678901234567890.12346789")) ).divide(thx._Decimal.Decimal_Impl_.fromInt(1)), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-12345678901234567890.12346789")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testDivision"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (78) )) )}));
			//line 79 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-12345678901234567890.12346789")) ).divide(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-12345678901234567890.12346789")) )), thx._Decimal.Decimal_Impl_.fromInt(1)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testDivision"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (79) )) )}));
			//line 80 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx._Decimal.Decimal_Impl_.fromInt(10)) ).divide(thx._Decimal.Decimal_Impl_.fromInt(2)), thx._Decimal.Decimal_Impl_.fromInt(5)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testDivision"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (80) )) )}));
			//line 81 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx._Decimal.Decimal_Impl_.fromInt(10)) ).divide(thx._Decimal.Decimal_Impl_.fromInt(3)), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("3.3333333333333333")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testDivision"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (81) )) )}));
			//line 82 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx._Decimal.Decimal_Impl_.fromInt(1)) ).divide(thx._Decimal.Decimal_Impl_.fromInt(2)), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(0.5)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testDivision"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (82) )) )}));
			//line 83 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx._Decimal.Decimal_Impl_.fromInt(1)) ).divide(thx._Decimal.Decimal_Impl_.fromInt(3)), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("0.3333333333333333")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testDivision"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (83) )) )}));
			//line 85 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx._Decimal.Decimal_Impl_.fromInt(0)) ).divide(thx._Decimal.Decimal_Impl_.fromInt(3)), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("0.0")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testDivision"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (85) )) )}));
			//line 87 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.raises(( (( thx.TestDecimal_testDivision_87__Fun.__hx_current != null )) ? (thx.TestDecimal_testDivision_87__Fun.__hx_current) : (thx.TestDecimal_testDivision_87__Fun.__hx_current = ((thx.TestDecimal_testDivision_87__Fun) (new thx.TestDecimal_testDivision_87__Fun()) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testDivision"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (87) )) )}));
		}
		
	}
	
	
	public void testMultiply()
	{
		//line 91 "/shared/core/test/thx/TestDecimal.hx"
		int _g1 = 0;
		//line 91 "/shared/core/test/thx/TestDecimal.hx"
		int _g = this.x;
		//line 91 "/shared/core/test/thx/TestDecimal.hx"
		while (( _g1 < _g ))
		{
			//line 91 "/shared/core/test/thx/TestDecimal.hx"
			 ++ _g1;
			//line 92 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("12345678900000000")) ).multiply(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("0.0000000012345678")) )), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("15241577.63907942")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testMultiply"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (92) )) )}));
		}
		
	}
	
	
	public void testInts()
	{
		//line 96 "/shared/core/test/thx/TestDecimal.hx"
		int _g1 = 0;
		//line 96 "/shared/core/test/thx/TestDecimal.hx"
		int _g = this.x;
		//line 96 "/shared/core/test/thx/TestDecimal.hx"
		while (( _g1 < _g ))
		{
			//line 96 "/shared/core/test/thx/TestDecimal.hx"
			 ++ _g1;
			//line 97 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(thx._Decimal.Decimal_Impl_.fromInt(123), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("123")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testInts"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (97) )) )}));
			//line 98 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(thx._Decimal.Decimal_Impl_.fromInt(-123), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-123")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testInts"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (98) )) )}));
			//line 99 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(thx._Decimal.Decimal_Impl_.fromInt(1234567890), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1234567890")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testInts"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (99) )) )}));
		}
		
	}
	
	
	public void testFloats()
	{
		//line 103 "/shared/core/test/thx/TestDecimal.hx"
		int _g1 = 0;
		//line 103 "/shared/core/test/thx/TestDecimal.hx"
		int _g = this.x;
		//line 103 "/shared/core/test/thx/TestDecimal.hx"
		while (( _g1 < _g ))
		{
			//line 103 "/shared/core/test/thx/TestDecimal.hx"
			 ++ _g1;
			//line 104 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(123.456)) ), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("123.456")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testFloats"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (104) )) )}));
			//line 105 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(-123.456)) ), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-123.456")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testFloats"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (105) )) )}));
			//line 106 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(0.123456789)) ), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("0.123456789")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testFloats"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (106) )) )}));
		}
		
	}
	
	
	public void testEquality()
	{
		//line 110 "/shared/core/test/thx/TestDecimal.hx"
		int _g1 = 0;
		//line 110 "/shared/core/test/thx/TestDecimal.hx"
		int _g = this.x;
		//line 110 "/shared/core/test/thx/TestDecimal.hx"
		while (( _g1 < _g ))
		{
			//line 110 "/shared/core/test/thx/TestDecimal.hx"
			 ++ _g1;
			//line 111 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("123.456")) ), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("123.4560000")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testEquality"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (111) )) )}));
		}
		
	}
	
	
	public void testAddition()
	{
		//line 115 "/shared/core/test/thx/TestDecimal.hx"
		int _g1 = 0;
		//line 115 "/shared/core/test/thx/TestDecimal.hx"
		int _g = this.x;
		//line 115 "/shared/core/test/thx/TestDecimal.hx"
		while (( _g1 < _g ))
		{
			//line 115 "/shared/core/test/thx/TestDecimal.hx"
			 ++ _g1;
			//line 116 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("123.456")) ).add(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("76.544000")) )), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("200")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testAddition"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (116) )) )}));
			//line 117 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("123.456")) ).add(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("0.004")) )), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("123.46")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testAddition"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (117) )) )}));
			//line 118 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("123.456")) ).add(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-0.456")) )), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("123")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testAddition"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (118) )) )}));
		}
		
	}
	
	
	public void testSubtraction()
	{
		//line 122 "/shared/core/test/thx/TestDecimal.hx"
		int _g1 = 0;
		//line 122 "/shared/core/test/thx/TestDecimal.hx"
		int _g = this.x;
		//line 122 "/shared/core/test/thx/TestDecimal.hx"
		while (( _g1 < _g ))
		{
			//line 122 "/shared/core/test/thx/TestDecimal.hx"
			 ++ _g1;
			//line 123 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("123.456")) ).subtract(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("76.544000")) )), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("46.912000")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testSubtraction"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (123) )) )}));
			//line 124 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("123.456")) ).subtract(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("0.004")) )), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("123.452")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testSubtraction"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (124) )) )}));
			//line 125 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("123.456")) ).subtract(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-0.456")) )), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("123.912")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testSubtraction"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (125) )) )}));
		}
		
	}
	
	
	public void testComparison()
	{
		//line 129 "/shared/core/test/thx/TestDecimal.hx"
		int _g1 = 0;
		//line 129 "/shared/core/test/thx/TestDecimal.hx"
		int _g = this.x;
		//line 129 "/shared/core/test/thx/TestDecimal.hx"
		while (( _g1 < _g ))
		{
			//line 129 "/shared/core/test/thx/TestDecimal.hx"
			 ++ _g1;
			//line 130 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.greater(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1")) ), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("0.11111")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (130) )) )}));
			//line 131 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.greater(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1")) ), thx._Decimal.Decimal_Impl_.fromInt(-1)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (131) )) )}));
			//line 132 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isFalse(thx._Decimal.Decimal_Impl_.greater(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1")) ), thx._Decimal.Decimal_Impl_.fromInt(1)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (132) )) )}));
			//line 133 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.greaterEquals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1")) ), thx._Decimal.Decimal_Impl_.fromInt(1)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (133) )) )}));
			//line 134 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1")) ), thx._Decimal.Decimal_Impl_.fromInt(1)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (134) )) )}));
			//line 135 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1.01001")) ), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1.0100100")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (135) )) )}));
			//line 136 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("0")) ), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("0")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (136) )) )}));
			//line 137 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("0.000")) ), thx._Decimal.Decimal_Impl_.fromInt(0)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (137) )) )}));
			//line 138 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.greaterEquals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-1.12345e+10")) ), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-11234500000")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (138) )) )}));
			//line 139 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.lessEquals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-1.12345e+10")) ), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-11234500000")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (139) )) )}));
			//line 140 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.greaterEquals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1.12345e+10")) ), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("11234500000")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (140) )) )}));
			//line 141 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.lessEquals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1.12345e+10")) ), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("11234500000")) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (141) )) )}));
		}
		
	}
	
	
	public void testString()
	{
		//line 145 "/shared/core/test/thx/TestDecimal.hx"
		int _g1 = 0;
		//line 145 "/shared/core/test/thx/TestDecimal.hx"
		int _g = this.x;
		//line 145 "/shared/core/test/thx/TestDecimal.hx"
		while (( _g1 < _g ))
		{
			//line 145 "/shared/core/test/thx/TestDecimal.hx"
			 ++ _g1;
			//line 146 "/shared/core/test/thx/TestDecimal.hx"
			haxe.root.Array<java.lang.String> tests = new haxe.root.Array<java.lang.String>(new java.lang.String[]{"0", "0.00000789", "0.001", "0.123", "1.0", "1", "1.1", "123456789.0123456789", "123456789.012345678900000"});
			//line 146 "/shared/core/test/thx/TestDecimal.hx"
			thx.bigint.DecimalImpl dec = null;
			//line 148 "/shared/core/test/thx/TestDecimal.hx"
			{
				//line 148 "/shared/core/test/thx/TestDecimal.hx"
				int _g2 = 0;
				//line 148 "/shared/core/test/thx/TestDecimal.hx"
				while (( _g2 < tests.length ))
				{
					//line 148 "/shared/core/test/thx/TestDecimal.hx"
					java.lang.String test = tests.__get(_g2);
					//line 148 "/shared/core/test/thx/TestDecimal.hx"
					 ++ _g2;
					//line 149 "/shared/core/test/thx/TestDecimal.hx"
					dec = ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse(test)) );
					//line 150 "/shared/core/test/thx/TestDecimal.hx"
					utest.Assert.equals(test, ((thx.bigint.DecimalImpl) (dec) ).toString(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (150) )) )}));
					//line 152 "/shared/core/test/thx/TestDecimal.hx"
					if (haxe.lang.Runtime.valEq(test, "0")) 
					{
						//line 152 "/shared/core/test/thx/TestDecimal.hx"
						continue;
					}
					
					//line 154 "/shared/core/test/thx/TestDecimal.hx"
					dec = ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse(( "-" + test ))) );
					//line 155 "/shared/core/test/thx/TestDecimal.hx"
					utest.Assert.equals(( "-" + test ), ((thx.bigint.DecimalImpl) (dec) ).toString(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (155) )) )}));
				}
				
			}
			
		}
		
	}
	
	
	public void assertDecimalEquals(thx.bigint.DecimalImpl test, thx.bigint.DecimalImpl expected, java.lang.Object pos)
	{
		//line 160 "/shared/core/test/thx/TestDecimal.hx"
		utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(test, expected), ( ( ( "expected " + ((thx.bigint.DecimalImpl) (expected) ).toString() ) + " but got " ) + ((thx.bigint.DecimalImpl) (test) ).toString() ), pos);
	}
	
	
	public void testRound()
	{
		//line 164 "/shared/core/test/thx/TestDecimal.hx"
		int _g1 = 0;
		//line 164 "/shared/core/test/thx/TestDecimal.hx"
		int _g = this.x;
		//line 164 "/shared/core/test/thx/TestDecimal.hx"
		while (( _g1 < _g ))
		{
			//line 164 "/shared/core/test/thx/TestDecimal.hx"
			 ++ _g1;
			//line 165 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx._Decimal.Decimal_Impl_.fromInt(0)) ).roundTo(0), thx._Decimal.Decimal_Impl_.fromInt(0), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (165) )) )}));
			//line 166 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx._Decimal.Decimal_Impl_.fromInt(0)) ).ceilTo(0), thx._Decimal.Decimal_Impl_.fromInt(0), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (166) )) )}));
			//line 167 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx._Decimal.Decimal_Impl_.fromInt(0)) ).floorTo(0), thx._Decimal.Decimal_Impl_.fromInt(0), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (167) )) )}));
			//line 169 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx._Decimal.Decimal_Impl_.fromInt(1)) ).roundTo(0), thx._Decimal.Decimal_Impl_.fromInt(1), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (169) )) )}));
			//line 170 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx._Decimal.Decimal_Impl_.fromInt(-1)) ).roundTo(0), thx._Decimal.Decimal_Impl_.fromInt(-1), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (170) )) )}));
			//line 171 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx._Decimal.Decimal_Impl_.fromInt(1)) ).ceilTo(0), thx._Decimal.Decimal_Impl_.fromInt(1), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (171) )) )}));
			//line 172 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx._Decimal.Decimal_Impl_.fromInt(-1)) ).ceilTo(0), thx._Decimal.Decimal_Impl_.fromInt(-1), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (172) )) )}));
			//line 173 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx._Decimal.Decimal_Impl_.fromInt(1)) ).floorTo(0), thx._Decimal.Decimal_Impl_.fromInt(1), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (173) )) )}));
			//line 174 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx._Decimal.Decimal_Impl_.fromInt(-1)) ).floorTo(0), thx._Decimal.Decimal_Impl_.fromInt(-1), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (174) )) )}));
			//line 176 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1234567890.1234567890")) ).roundTo(0), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1234567890")) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (176) )) )}));
			//line 177 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1234567890.1234567890")) ).roundTo(3), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1234567890.123")) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (177) )) )}));
			//line 178 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1234567890.1234567890")) ).roundTo(5), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1234567890.12346")) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (178) )) )}));
			//line 179 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1234567890.1234567890")) ).roundTo(6), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1234567890.123457")) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (179) )) )}));
			//line 181 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-1234567890.1234567890")) ).roundTo(0), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-1234567890")) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (181) )) )}));
			//line 182 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-1234567890.1234567890")) ).roundTo(3), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-1234567890.123")) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (182) )) )}));
			//line 183 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-1234567890.1234567890")) ).roundTo(5), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-1234567890.12345")) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (183) )) )}));
			//line 184 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-1234567890.1234567890")) ).roundTo(6), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-1234567890.123456")) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (184) )) )}));
			//line 186 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1234567890.1234567890")) ).ceilTo(0), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1234567891")) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (186) )) )}));
			//line 187 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1234567890.1234567890")) ).ceilTo(3), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1234567890.124")) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (187) )) )}));
			//line 188 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1234567890.1234567890")) ).ceilTo(5), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1234567890.12346")) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (188) )) )}));
			//line 189 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1234567890.1234567890")) ).ceilTo(6), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1234567890.123457")) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (189) )) )}));
			//line 191 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-1234567890.1234567890")) ).ceilTo(0), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-1234567890")) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (191) )) )}));
			//line 192 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-1234567890.1234567890")) ).ceilTo(3), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-1234567890.123")) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (192) )) )}));
			//line 193 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-1234567890.1234567890")) ).ceilTo(5), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-1234567890.12345")) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (193) )) )}));
			//line 194 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-1234567890.1234567890")) ).ceilTo(6), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-1234567890.123456")) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (194) )) )}));
			//line 196 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1234567890.1234567890")) ).floorTo(0), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1234567890")) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (196) )) )}));
			//line 197 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1234567890.1234567890")) ).floorTo(3), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1234567890.123")) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (197) )) )}));
			//line 198 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1234567890.1234567890")) ).floorTo(5), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1234567890.12345")) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (198) )) )}));
			//line 199 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1234567890.1234567890")) ).floorTo(6), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1234567890.123456")) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (199) )) )}));
			//line 201 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-1234567890.1234567890")) ).floorTo(0), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-1234567890")) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (201) )) )}));
			//line 202 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-1234567890.1234567890")) ).floorTo(3), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-1234567890.123")) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (202) )) )}));
			//line 203 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-1234567890.1234567890")) ).floorTo(5), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-1234567890.12345")) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (203) )) )}));
			//line 204 "/shared/core/test/thx/TestDecimal.hx"
			this.assertDecimalEquals(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-1234567890.1234567890")) ).floorTo(6), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("-1234567890.123456")) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (204) )) )}));
		}
		
	}
	
	
	public void testScaleTo()
	{
		//line 208 "/shared/core/test/thx/TestDecimal.hx"
		int _g1 = 0;
		//line 208 "/shared/core/test/thx/TestDecimal.hx"
		int _g = this.x;
		//line 208 "/shared/core/test/thx/TestDecimal.hx"
		while (( _g1 < _g ))
		{
			//line 208 "/shared/core/test/thx/TestDecimal.hx"
			 ++ _g1;
			//line 209 "/shared/core/test/thx/TestDecimal.hx"
			haxe.root.Array<java.lang.Object> tests = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{new haxe.lang.DynamicObject(new java.lang.String[]{"exp", "src"}, new java.lang.Object[]{"0", "0"}, new java.lang.String[]{"scale"}, new double[]{((double) (((double) (0) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"exp", "src"}, new java.lang.Object[]{"0.00000", "0"}, new java.lang.String[]{"scale"}, new double[]{((double) (((double) (5) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"exp", "src"}, new java.lang.Object[]{"0.100", "0.1"}, new java.lang.String[]{"scale"}, new double[]{((double) (((double) (3) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"exp", "src"}, new java.lang.Object[]{"0.012", "0.0123456"}, new java.lang.String[]{"scale"}, new double[]{((double) (((double) (3) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"exp", "src"}, new java.lang.Object[]{"1234567890.123", "1234567890.1234567890"}, new java.lang.String[]{"scale"}, new double[]{((double) (((double) (3) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"exp", "src"}, new java.lang.Object[]{"1234567890.1234567890", "1234567890.1234567890"}, new java.lang.String[]{"scale"}, new double[]{((double) (((double) (10) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"exp", "src"}, new java.lang.Object[]{"1234567890.123456789000", "1234567890.1234567890"}, new java.lang.String[]{"scale"}, new double[]{((double) (((double) (12) )) )})});
			//line 209 "/shared/core/test/thx/TestDecimal.hx"
			thx.bigint.DecimalImpl dec = null;
			//line 219 "/shared/core/test/thx/TestDecimal.hx"
			{
				//line 219 "/shared/core/test/thx/TestDecimal.hx"
				int _g2 = 0;
				//line 219 "/shared/core/test/thx/TestDecimal.hx"
				while (( _g2 < tests.length ))
				{
					//line 219 "/shared/core/test/thx/TestDecimal.hx"
					java.lang.Object test = tests.__get(_g2);
					//line 219 "/shared/core/test/thx/TestDecimal.hx"
					 ++ _g2;
					//line 220 "/shared/core/test/thx/TestDecimal.hx"
					dec = ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(test, "src", true)))) );
					//line 221 "/shared/core/test/thx/TestDecimal.hx"
					utest.Assert.equals(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(test, "exp", true)), ((thx.bigint.DecimalImpl) (((thx.bigint.DecimalImpl) (dec) ).scaleTo(((int) (haxe.lang.Runtime.getField_f(test, "scale", true)) ))) ).toString(), ( ( ( ( ( ( ( "expected " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(test, "src", true)) ) + " to be " ) + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(test, "exp", true)) ) + " when scaled to " ) + ((int) (haxe.lang.Runtime.getField_f(test, "scale", true)) ) ) + " but got " ) + ((thx.bigint.DecimalImpl) (((thx.bigint.DecimalImpl) (dec) ).scaleTo(((int) (haxe.lang.Runtime.getField_f(test, "scale", true)) ))) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testScaleTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (221) )) )}));
					//line 223 "/shared/core/test/thx/TestDecimal.hx"
					if (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(test, "src", true)), "0")) 
					{
						//line 223 "/shared/core/test/thx/TestDecimal.hx"
						continue;
					}
					
					//line 225 "/shared/core/test/thx/TestDecimal.hx"
					dec = ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse(( "-" + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(test, "src", true)) ))) );
					//line 226 "/shared/core/test/thx/TestDecimal.hx"
					utest.Assert.equals(( "-" + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(test, "exp", true)) ), ((thx.bigint.DecimalImpl) (((thx.bigint.DecimalImpl) (dec) ).scaleTo(((int) (haxe.lang.Runtime.getField_f(test, "scale", true)) ))) ).toString(), ( ( ( ( ( ( ( "expected -" + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(test, "src", true)) ) + " to be -" ) + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(test, "exp", true)) ) + " when scaled to " ) + ((int) (haxe.lang.Runtime.getField_f(test, "scale", true)) ) ) + " but got -" ) + ((thx.bigint.DecimalImpl) (((thx.bigint.DecimalImpl) (dec) ).scaleTo(((int) (haxe.lang.Runtime.getField_f(test, "scale", true)) ))) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testScaleTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (226) )) )}));
				}
				
			}
			
		}
		
	}
	
	
	public void testNegativePow()
	{
		//line 231 "/shared/core/test/thx/TestDecimal.hx"
		int _g1 = 0;
		//line 231 "/shared/core/test/thx/TestDecimal.hx"
		int _g = this.x;
		//line 231 "/shared/core/test/thx/TestDecimal.hx"
		while (( _g1 < _g ))
		{
			//line 231 "/shared/core/test/thx/TestDecimal.hx"
			 ++ _g1;
			//line 232 "/shared/core/test/thx/TestDecimal.hx"
			utest.Assert.isTrue(thx._Decimal.Decimal_Impl_.equals(((thx.bigint.DecimalImpl) (thx._Decimal.Decimal_Impl_.fromInt(10)) ).pow(-2), ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(0.01)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDecimal", "TestDecimal.hx", "testNegativePow"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (232) )) )}));
		}
		
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 6 "/shared/core/test/thx/TestDecimal.hx"
		{
			//line 6 "/shared/core/test/thx/TestDecimal.hx"
			boolean __temp_executeDef1 = true;
			//line 6 "/shared/core/test/thx/TestDecimal.hx"
			switch (field.hashCode())
			{
				case -1655544242:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("divisionSize")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						this.divisionSize = ((int) (value) );
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						return value;
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case 120:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("x")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						this.x = ((int) (value) );
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						return value;
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
			}
			
			//line 6 "/shared/core/test/thx/TestDecimal.hx"
			if (__temp_executeDef1) 
			{
				//line 6 "/shared/core/test/thx/TestDecimal.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 6 "/shared/core/test/thx/TestDecimal.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 6 "/shared/core/test/thx/TestDecimal.hx"
		{
			//line 6 "/shared/core/test/thx/TestDecimal.hx"
			boolean __temp_executeDef1 = true;
			//line 6 "/shared/core/test/thx/TestDecimal.hx"
			switch (field.hashCode())
			{
				case -1655544242:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("divisionSize")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						this.divisionSize = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						return value;
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case 120:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("x")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						this.x = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						return value;
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
			}
			
			//line 6 "/shared/core/test/thx/TestDecimal.hx"
			if (__temp_executeDef1) 
			{
				//line 6 "/shared/core/test/thx/TestDecimal.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 6 "/shared/core/test/thx/TestDecimal.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 6 "/shared/core/test/thx/TestDecimal.hx"
		{
			//line 6 "/shared/core/test/thx/TestDecimal.hx"
			boolean __temp_executeDef1 = true;
			//line 6 "/shared/core/test/thx/TestDecimal.hx"
			switch (field.hashCode())
			{
				case -369624591:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testNegativePow")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testNegativePow")) );
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case 120:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("x")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						return this.x;
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case 1518294131:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testScaleTo")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testScaleTo")) );
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case -1655544242:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("divisionSize")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						return this.divisionSize;
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case -1192261604:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testRound")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testRound")) );
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case 109329021:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("setup")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "setup")) );
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case 1197456586:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("assertDecimalEquals")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "assertDecimalEquals")) );
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case -1663474172:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("teardown")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "teardown")) );
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case 1727748931:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testString")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testString")) );
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case -1559794724:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testToBigInt")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testToBigInt")) );
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case -1558446533:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testComparison")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testComparison")) );
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case -1146776620:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testTrim")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testTrim")) );
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case 1861150850:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testSubtraction")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSubtraction")) );
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case 480398298:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testStringExp")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testStringExp")) );
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case -512249426:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testAddition")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testAddition")) );
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case 1550950824:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testModulo")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testModulo")) );
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case 1295739820:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testEquality")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testEquality")) );
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case 1079060319:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testDivision")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testDivision")) );
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case 1348084937:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testFloats")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFloats")) );
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case 1368169686:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testMultiply")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testMultiply")) );
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case -1147107818:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testInts")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testInts")) );
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
			}
			
			//line 6 "/shared/core/test/thx/TestDecimal.hx"
			if (__temp_executeDef1) 
			{
				//line 6 "/shared/core/test/thx/TestDecimal.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 6 "/shared/core/test/thx/TestDecimal.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 6 "/shared/core/test/thx/TestDecimal.hx"
		{
			//line 6 "/shared/core/test/thx/TestDecimal.hx"
			boolean __temp_executeDef1 = true;
			//line 6 "/shared/core/test/thx/TestDecimal.hx"
			switch (field.hashCode())
			{
				case -1655544242:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("divisionSize")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						return ((double) (this.divisionSize) );
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case 120:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("x")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						return ((double) (this.x) );
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
			}
			
			//line 6 "/shared/core/test/thx/TestDecimal.hx"
			if (__temp_executeDef1) 
			{
				//line 6 "/shared/core/test/thx/TestDecimal.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 6 "/shared/core/test/thx/TestDecimal.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 6 "/shared/core/test/thx/TestDecimal.hx"
		{
			//line 6 "/shared/core/test/thx/TestDecimal.hx"
			boolean __temp_executeDef1 = true;
			//line 6 "/shared/core/test/thx/TestDecimal.hx"
			switch (field.hashCode())
			{
				case -369624591:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testNegativePow")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						this.testNegativePow();
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case 109329021:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("setup")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						this.setup();
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case 1518294131:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testScaleTo")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						this.testScaleTo();
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case -1663474172:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("teardown")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						this.teardown();
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case -1192261604:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testRound")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						this.testRound();
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case -1559794724:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testToBigInt")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						this.testToBigInt();
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case 1197456586:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("assertDecimalEquals")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						this.assertDecimalEquals(((thx.bigint.DecimalImpl) (dynargs.__get(0)) ), ((thx.bigint.DecimalImpl) (dynargs.__get(1)) ), dynargs.__get(2));
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case -1146776620:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testTrim")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						this.testTrim();
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case 1727748931:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testString")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						this.testString();
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case 480398298:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testStringExp")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						this.testStringExp();
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case -1558446533:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testComparison")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						this.testComparison();
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case 1550950824:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testModulo")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						this.testModulo();
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case 1861150850:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testSubtraction")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						this.testSubtraction();
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case 1079060319:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testDivision")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						this.testDivision();
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case -512249426:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testAddition")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						this.testAddition();
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case 1368169686:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testMultiply")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						this.testMultiply();
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case 1295739820:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testEquality")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						this.testEquality();
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case -1147107818:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testInts")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						this.testInts();
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
				case 1348084937:
				{
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					if (field.equals("testFloats")) 
					{
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/core/test/thx/TestDecimal.hx"
						this.testFloats();
					}
					
					//line 6 "/shared/core/test/thx/TestDecimal.hx"
					break;
				}
				
				
			}
			
			//line 6 "/shared/core/test/thx/TestDecimal.hx"
			if (__temp_executeDef1) 
			{
				//line 6 "/shared/core/test/thx/TestDecimal.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 6 "/shared/core/test/thx/TestDecimal.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 6 "/shared/core/test/thx/TestDecimal.hx"
		baseArr.push("divisionSize");
		//line 6 "/shared/core/test/thx/TestDecimal.hx"
		baseArr.push("x");
		//line 6 "/shared/core/test/thx/TestDecimal.hx"
		{
			//line 6 "/shared/core/test/thx/TestDecimal.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


