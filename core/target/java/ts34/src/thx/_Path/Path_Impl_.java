// Generated by Haxe 3.3.0
package thx._Path;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public final class Path_Impl_
{
	static
	{
		//line 25 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		thx._Path.Path_Impl_.nixSeparator = "/";
		//line 26 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		thx._Path.Path_Impl_.win32Separator = "\\";
	}
	
	public static java.lang.String nixSeparator;
	
	public static java.lang.String win32Separator;
	
	public static boolean isValidNix(haxe.root.Array<java.lang.String> path)
	{
		//line 29 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		return ((boolean) (thx.Arrays.any(((haxe.root.Array<java.lang.String>) (((haxe.root.Array<java.lang.String>) (path) ).slice(2, null)) ), ((haxe.lang.Function) (( (( thx._Path.Path_Impl__isValidNix_29__Fun.__hx_current != null )) ? (thx._Path.Path_Impl__isValidNix_29__Fun.__hx_current) : (thx._Path.Path_Impl__isValidNix_29__Fun.__hx_current = ((thx._Path.Path_Impl__isValidNix_29__Fun) (new thx._Path.Path_Impl__isValidNix_29__Fun()) )) )) ))) );
	}
	
	
	public static boolean isValidWin32(haxe.root.Array<java.lang.String> path)
	{
		//line 32 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		return ((boolean) (thx.Arrays.any(((haxe.root.Array<java.lang.String>) (((haxe.root.Array<java.lang.String>) (path) ).slice(2, null)) ), ((haxe.lang.Function) (( (( thx._Path.Path_Impl__isValidWin32_32__Fun.__hx_current != null )) ? (thx._Path.Path_Impl__isValidWin32_32__Fun.__hx_current) : (thx._Path.Path_Impl__isValidWin32_32__Fun.__hx_current = ((thx._Path.Path_Impl__isValidWin32_32__Fun) (new thx._Path.Path_Impl__isValidWin32_32__Fun()) )) )) ))) );
	}
	
	
	public static haxe.root.Array<java.lang.String> normalizeNix(haxe.root.Array<java.lang.String> path, java.lang.String replacement)
	{
		//line 35 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		if (( replacement == null )) 
		{
			//line 35 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			replacement = "_";
		}
		
		//line 35 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		return thx._Path.Path_Impl_.map(path, new thx._Path.Path_Impl__normalizeNix_35__Fun(replacement));
	}
	
	
	public static haxe.root.Array<java.lang.String> normalizeWin32(haxe.root.Array<java.lang.String> path, java.lang.String replacement)
	{
		//line 38 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		if (( replacement == null )) 
		{
			//line 38 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			replacement = "_";
		}
		
		//line 38 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		return thx._Path.Path_Impl_.map(path, new thx._Path.Path_Impl__normalizeWin32_38__Fun(replacement));
	}
	
	
	public static haxe.root.Array<java.lang.String> fromString(java.lang.String s)
	{
		//line 45 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		if (( haxe.lang.StringExt.indexOf(s, "\\", null) >= 0 )) 
		{
			//line 46 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			haxe.root.EReg re = new haxe.root.EReg("^([a-z]+[:][\\\\])", "i");
			//line 47 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			if (re.match(s)) 
			{
				//line 48 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
				java.lang.String root = re.matched(1);
				//line 48 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
				haxe.root.Array<java.lang.String> path = haxe.lang.StringExt.split(re.matchedRight(), "\\");
				//line 48 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
				haxe.root.Array<java.lang.String> path1 = path;
				//line 48 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
				boolean isAbsolute =  ! (haxe.lang.Runtime.valEq(root, "")) ;
				//line 48 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
				path1 = thx.ArrayStrings.compact(path).filter(( (( thx._Path.Path_Impl__fromString_48__Fun_0.__hx_current != null )) ? (thx._Path.Path_Impl__fromString_48__Fun_0.__hx_current) : (thx._Path.Path_Impl__fromString_48__Fun_0.__hx_current = ((thx._Path.Path_Impl__fromString_48__Fun_0) (new thx._Path.Path_Impl__fromString_48__Fun_0()) )) ));
				//line 48 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
				return ((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\\", root}).concat(((haxe.root.Array<java.lang.String>) (thx.Arrays.reduce(((haxe.root.Array<java.lang.String>) (path1) ), ((haxe.lang.Function) (new thx._Path.Path_Impl__fromString_48__Fun(isAbsolute)) ), ((java.lang.Object) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{})) ))) ))) );
			}
			else
			{
				//line 53 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
				haxe.root.Array<java.lang.String> path2 = haxe.lang.StringExt.split(s, "\\");
				//line 53 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
				haxe.root.Array<java.lang.String> path3 = path2;
				//line 53 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
				boolean isAbsolute1 = false;
				//line 53 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
				path3 = thx.ArrayStrings.compact(path2).filter(( (( thx._Path.Path_Impl__fromString_53__Fun_0.__hx_current != null )) ? (thx._Path.Path_Impl__fromString_53__Fun_0.__hx_current) : (thx._Path.Path_Impl__fromString_53__Fun_0.__hx_current = ((thx._Path.Path_Impl__fromString_53__Fun_0) (new thx._Path.Path_Impl__fromString_53__Fun_0()) )) ));
				//line 53 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
				return ((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\\", ""}).concat(((haxe.root.Array<java.lang.String>) (thx.Arrays.reduce(((haxe.root.Array<java.lang.String>) (path3) ), ((haxe.lang.Function) (new thx._Path.Path_Impl__fromString_53__Fun(isAbsolute1)) ), ((java.lang.Object) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{})) ))) ))) );
			}
			
		}
		else
		{
			//line 56 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			java.lang.String root1 = ( (s.startsWith("/")) ? ("/") : ("") );
			//line 56 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			haxe.root.Array<java.lang.String> path4 = haxe.lang.StringExt.split(s, "/");
			//line 56 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			haxe.root.Array<java.lang.String> path5 = path4;
			//line 56 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			boolean isAbsolute2 =  ! (haxe.lang.Runtime.valEq(root1, "")) ;
			//line 56 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			path5 = thx.ArrayStrings.compact(path4).filter(( (( thx._Path.Path_Impl__fromString_56__Fun_0.__hx_current != null )) ? (thx._Path.Path_Impl__fromString_56__Fun_0.__hx_current) : (thx._Path.Path_Impl__fromString_56__Fun_0.__hx_current = ((thx._Path.Path_Impl__fromString_56__Fun_0) (new thx._Path.Path_Impl__fromString_56__Fun_0()) )) ));
			//line 56 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			return ((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{"/", root1}).concat(((haxe.root.Array<java.lang.String>) (thx.Arrays.reduce(((haxe.root.Array<java.lang.String>) (path5) ), ((haxe.lang.Function) (new thx._Path.Path_Impl__fromString_56__Fun(isAbsolute2)) ), ((java.lang.Object) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{})) ))) ))) );
		}
		
	}
	
	
	
	
	
	
	
	
	public static haxe.root.Array<java.lang.String> resolve(haxe.root.Array<java.lang.String> path, boolean isAbsolute)
	{
		//line 70 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		path = thx.ArrayStrings.compact(path).filter(( (( thx._Path.Path_Impl__resolve_70__Fun.__hx_current != null )) ? (thx._Path.Path_Impl__resolve_70__Fun.__hx_current) : (thx._Path.Path_Impl__resolve_70__Fun.__hx_current = ((thx._Path.Path_Impl__resolve_70__Fun) (new thx._Path.Path_Impl__resolve_70__Fun()) )) ));
		//line 72 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		return ((haxe.root.Array<java.lang.String>) (thx.Arrays.reduce(((haxe.root.Array<java.lang.String>) (path) ), ((haxe.lang.Function) (new thx._Path.Path_Impl__resolve_72__Fun(isAbsolute)) ), ((java.lang.Object) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{})) ))) );
	}
	
	
	public static haxe.root.Array<java.lang.String> create(java.lang.String root, haxe.root.Array<java.lang.String> path, java.lang.String sep)
	{
		//line 84 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		haxe.root.Array<java.lang.String> path1 = path;
		//line 84 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		boolean isAbsolute =  ! (haxe.lang.Runtime.valEq(root, "")) ;
		//line 84 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		path1 = thx.ArrayStrings.compact(path).filter(( (( thx._Path.Path_Impl__create_84__Fun_0.__hx_current != null )) ? (thx._Path.Path_Impl__create_84__Fun_0.__hx_current) : (thx._Path.Path_Impl__create_84__Fun_0.__hx_current = ((thx._Path.Path_Impl__create_84__Fun_0) (new thx._Path.Path_Impl__create_84__Fun_0()) )) ));
		//line 84 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		return ((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{sep, root}).concat(((haxe.root.Array<java.lang.String>) (thx.Arrays.reduce(((haxe.root.Array<java.lang.String>) (path1) ), ((haxe.lang.Function) (new thx._Path.Path_Impl__create_84__Fun(isAbsolute)) ), ((java.lang.Object) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{})) ))) ))) );
	}
	
	
	public static haxe.root.Array<java.lang.String> raw(haxe.root.Array<java.lang.String> parts)
	{
		//line 87 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		return ((haxe.root.Array<java.lang.String>) (parts) );
	}
	
	
	public static haxe.root.Array<java.lang.String> _new(haxe.root.Array<java.lang.String> parts)
	{
		//line 89 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		return ((haxe.root.Array<java.lang.String>) (parts) );
	}
	
	
	public static haxe.root.Array<java.lang.String> asAbsolute(haxe.root.Array<java.lang.String> this1, java.lang.String root)
	{
		//line 93 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		if (( root == null )) 
		{
			//line 93 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			root = "C:\\";
		}
		
		//line 93 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		java.lang.String root1 = ( (haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (this1) ).__get(0), "/")) ? ("/") : (root) );
		//line 93 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		haxe.root.Array<java.lang.String> path = ((haxe.root.Array<java.lang.String>) (this1) ).slice(2, null);
		//line 96 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		java.lang.String tmp = ((haxe.root.Array<java.lang.String>) (this1) ).__get(0);
		//line 93 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		haxe.root.Array<java.lang.String> path1 = path;
		//line 93 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		boolean isAbsolute =  ! (haxe.lang.Runtime.valEq(root1, "")) ;
		//line 93 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		path1 = thx.ArrayStrings.compact(path).filter(( (( thx._Path.Path_Impl__asAbsolute_93__Fun_0.__hx_current != null )) ? (thx._Path.Path_Impl__asAbsolute_93__Fun_0.__hx_current) : (thx._Path.Path_Impl__asAbsolute_93__Fun_0.__hx_current = ((thx._Path.Path_Impl__asAbsolute_93__Fun_0) (new thx._Path.Path_Impl__asAbsolute_93__Fun_0()) )) ));
		//line 93 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		return ((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{tmp, root1}).concat(((haxe.root.Array<java.lang.String>) (thx.Arrays.reduce(((haxe.root.Array<java.lang.String>) (path1) ), ((haxe.lang.Function) (new thx._Path.Path_Impl__asAbsolute_93__Fun(isAbsolute)) ), ((java.lang.Object) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{})) ))) ))) );
	}
	
	
	public static haxe.root.Array<java.lang.String> asRelative(haxe.root.Array<java.lang.String> this1)
	{
		//line 100 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		haxe.root.Array<java.lang.String> path = ((haxe.root.Array<java.lang.String>) (this1) ).slice(2, null);
		//line 100 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		java.lang.String tmp = ((haxe.root.Array<java.lang.String>) (this1) ).__get(0);
		//line 100 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		haxe.root.Array<java.lang.String> path1 = path;
		//line 100 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		boolean isAbsolute = false;
		//line 100 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		path1 = thx.ArrayStrings.compact(path).filter(( (( thx._Path.Path_Impl__asRelative_100__Fun_0.__hx_current != null )) ? (thx._Path.Path_Impl__asRelative_100__Fun_0.__hx_current) : (thx._Path.Path_Impl__asRelative_100__Fun_0.__hx_current = ((thx._Path.Path_Impl__asRelative_100__Fun_0) (new thx._Path.Path_Impl__asRelative_100__Fun_0()) )) ));
		//line 100 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		return ((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{tmp, ""}).concat(((haxe.root.Array<java.lang.String>) (thx.Arrays.reduce(((haxe.root.Array<java.lang.String>) (path1) ), ((haxe.lang.Function) (new thx._Path.Path_Impl__asRelative_100__Fun(isAbsolute)) ), ((java.lang.Object) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{})) ))) ))) );
	}
	
	
	public static haxe.root.Array<java.lang.String> normalize(haxe.root.Array<java.lang.String> this1)
	{
		//line 103 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		if (haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (this1) ).__get(0), "\\")) 
		{
			//line 103 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			return thx._Path.Path_Impl_.normalizeWin32(((haxe.root.Array<java.lang.String>) (this1) ), null);
		}
		else
		{
			//line 103 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			return thx._Path.Path_Impl_.normalizeNix(((haxe.root.Array<java.lang.String>) (this1) ), null);
		}
		
	}
	
	
	public static boolean isAbsolute(haxe.root.Array<java.lang.String> this1)
	{
		//line 106 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		return  ! (haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (this1) ).__get(1), "")) ;
	}
	
	
	public static boolean isRelative(haxe.root.Array<java.lang.String> this1)
	{
		//line 109 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		return haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (this1) ).__get(1), "");
	}
	
	
	public static boolean isRoot(haxe.root.Array<java.lang.String> this1)
	{
		//line 112 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		if ( ! (haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (this1) ).__get(1), "")) ) 
		{
			//line 112 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			return ( ((haxe.root.Array<java.lang.String>) (this1) ).slice(2, null).length == 0 );
		}
		else
		{
			//line 112 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			return false;
		}
		
	}
	
	
	public static boolean isNix(haxe.root.Array<java.lang.String> this1)
	{
		//line 115 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		return haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (this1) ).__get(0), "/");
	}
	
	
	public static boolean isWin32(haxe.root.Array<java.lang.String> this1)
	{
		//line 118 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		return haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (this1) ).__get(0), "\\");
	}
	
	
	public static boolean isValid(haxe.root.Array<java.lang.String> this1)
	{
		//line 121 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		if (haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (this1) ).__get(0), "\\")) 
		{
			//line 121 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			return thx._Path.Path_Impl_.isValidWin32(((haxe.root.Array<java.lang.String>) (this1) ));
		}
		else
		{
			//line 121 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			return thx._Path.Path_Impl_.isValidNix(((haxe.root.Array<java.lang.String>) (this1) ));
		}
		
	}
	
	
	public static java.lang.String noext(haxe.root.Array<java.lang.String> this1)
	{
		//line 124 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		java.lang.String e = thx._Path.Path_Impl_.ext(this1);
		//line 125 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		if (haxe.lang.Runtime.valEq(e, "")) 
		{
			//line 126 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			return thx._Path.Path_Impl_.base(this1, null);
		}
		else
		{
			//line 128 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			return thx._Path.Path_Impl_.base(this1, ( "." + e ));
		}
		
	}
	
	
	public static java.lang.String base(haxe.root.Array<java.lang.String> this1, java.lang.String end)
	{
		//line 132 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		if (( ((haxe.root.Array<java.lang.String>) (this1) ).slice(2, null).length == 0 )) 
		{
			//line 133 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			return "";
		}
		
		//line 134 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		haxe.root.Array<java.lang.String> array = ((haxe.root.Array<java.lang.String>) (this1) ).slice(2, null);
		//line 134 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		java.lang.String name = ((haxe.root.Array<java.lang.String>) (array) ).__get(( array.length - 1 ));
		//line 135 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		if (( ( null != end ) && name.endsWith(end) )) 
		{
			//line 136 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			return haxe.lang.StringExt.substring(name, 0, ( name.length() - end.length() ));
		}
		
		//line 137 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		return name;
	}
	
	
	public static java.lang.String ext(haxe.root.Array<java.lang.String> this1)
	{
		//line 141 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		if (( ((haxe.root.Array<java.lang.String>) (this1) ).slice(2, null).length == 0 )) 
		{
			//line 142 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			return "";
		}
		
		//line 143 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		haxe.root.Array<java.lang.String> array = ((haxe.root.Array<java.lang.String>) (this1) ).slice(2, null);
		//line 143 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		return thx.Strings.afterLast(((haxe.root.Array<java.lang.String>) (array) ).__get(( array.length - 1 )), ".");
	}
	
	
	public static java.lang.String dir(haxe.root.Array<java.lang.String> this1)
	{
		//line 147 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		return thx._Path.Path_Impl_.toString(thx._Path.Path_Impl_.up(this1, null));
	}
	
	
	public static haxe.root.Array<java.lang.String> map(haxe.root.Array<java.lang.String> this1, haxe.lang.Function handler)
	{
		//line 150 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		java.lang.String root = ((haxe.root.Array<java.lang.String>) (this1) ).__get(1);
		//line 150 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		haxe.root.Array<java.lang.String> path = ((haxe.root.Array<java.lang.String>) (((haxe.root.Array) (((haxe.root.Array<java.lang.String>) (this1) ).slice(2, null).map(((haxe.lang.Function) (handler) ))) )) );
		//line 153 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		java.lang.String tmp = ((haxe.root.Array<java.lang.String>) (this1) ).__get(0);
		//line 150 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		haxe.root.Array<java.lang.String> path1 = path;
		//line 150 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		boolean isAbsolute =  ! (haxe.lang.Runtime.valEq(root, "")) ;
		//line 150 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		path1 = thx.ArrayStrings.compact(path).filter(( (( thx._Path.Path_Impl__map_150__Fun_0.__hx_current != null )) ? (thx._Path.Path_Impl__map_150__Fun_0.__hx_current) : (thx._Path.Path_Impl__map_150__Fun_0.__hx_current = ((thx._Path.Path_Impl__map_150__Fun_0) (new thx._Path.Path_Impl__map_150__Fun_0()) )) ));
		//line 150 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		return ((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{tmp, root}).concat(((haxe.root.Array<java.lang.String>) (thx.Arrays.reduce(((haxe.root.Array<java.lang.String>) (path1) ), ((haxe.lang.Function) (new thx._Path.Path_Impl__map_150__Fun(isAbsolute)) ), ((java.lang.Object) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{})) ))) ))) );
	}
	
	
	public static haxe.root.Array<haxe.root.Array<java.lang.String>> hierarchy(haxe.root.Array<java.lang.String> this1)
	{
		//line 157 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		haxe.root.Array<java.lang.String> base = new haxe.root.Array<java.lang.String>(new java.lang.String[]{});
		//line 158 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		return ((haxe.root.Array<haxe.root.Array<java.lang.String>>) (thx.Arrays.reduce(((haxe.root.Array<java.lang.String>) (((haxe.root.Array<java.lang.String>) (this1) ).slice(2, null)) ), ((haxe.lang.Function) (new thx._Path.Path_Impl__hierarchy_158__Fun(this1, base)) ), ((java.lang.Object) (new haxe.root.Array<haxe.root.Array<java.lang.String>>(new haxe.root.Array[]{})) ))) );
	}
	
	
	public static java.lang.Object iterator(haxe.root.Array<java.lang.String> this1)
	{
		//line 166 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		return new _Array.ArrayIterator<haxe.root.Array<java.lang.String>>(((haxe.root.Array<haxe.root.Array<java.lang.String>>) (thx._Path.Path_Impl_.hierarchy(this1)) ));
	}
	
	
	public static haxe.root.Array<java.lang.String> pathTo(haxe.root.Array<java.lang.String> this1, haxe.root.Array<java.lang.String> destination)
	{
		//line 169 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		boolean _g =  ! (haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (destination) ).__get(1), "")) ;
		//line 169 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		boolean _g1 =  ! (haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (this1) ).__get(1), "")) ;
		//line 169 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		{
			//line 169 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			boolean __temp_switch1 = (_g1);
			//line 169 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			if (( __temp_switch1 == false )) 
			{
				//line 169 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
				{
					//line 169 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
					boolean __temp_switch3 = (_g);
					//line 181 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
					if (( __temp_switch3 == false )) 
					{
						//line 181 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
						return thx._Path.Path_Impl_.join(this1, destination);
					}
					else
					{
						//line 179 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
						if (( __temp_switch3 == true )) 
						{
							//line 179 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
							return destination;
						}
						
					}
					
				}
				
			}
			else
			{
				//line 169 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
				if (( __temp_switch1 == true )) 
				{
					//line 169 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
					{
						//line 169 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
						boolean __temp_switch2 = (_g);
						//line 181 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
						if (( __temp_switch2 == false )) 
						{
							//line 181 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
							return thx._Path.Path_Impl_.join(this1, destination);
						}
						else
						{
							//line 170 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
							if (( __temp_switch2 == true )) 
							{
								//line 170 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
								if (haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (this1) ).__get(1), ((haxe.root.Array<java.lang.String>) (destination) ).__get(1))) 
								{
									//line 171 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
									haxe.root.Array<java.lang.String> opath = ((haxe.root.Array<java.lang.String>) (destination) ).slice(2, null);
									//line 171 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
									haxe.root.Array<java.lang.String> common = ((haxe.root.Array<java.lang.String>) (thx.Arrays.commonsFromStart(((haxe.root.Array<java.lang.String>) (((haxe.root.Array<java.lang.String>) (this1) ).slice(2, null)) ), ((haxe.root.Array<java.lang.String>) (opath) ), ((haxe.lang.Function) (null) ))) );
									//line 173 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
									haxe.root.Array<java.lang.String> path = ((haxe.root.Array<java.lang.String>) (((haxe.root.Array) (((haxe.root.Array<java.lang.String>) (this1) ).slice(2, null).slice(0, ( ((haxe.root.Array<java.lang.String>) (this1) ).slice(2, null).length - common.length )).map(((haxe.lang.Function) (( (( thx._Path.Path_Impl__pathTo_175__Fun.__hx_current != null )) ? (thx._Path.Path_Impl__pathTo_175__Fun.__hx_current) : (thx._Path.Path_Impl__pathTo_175__Fun.__hx_current = ((thx._Path.Path_Impl__pathTo_175__Fun) (new thx._Path.Path_Impl__pathTo_175__Fun()) )) )) ))) )) ).concat(opath.slice(common.length, null));
									//line 177 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
									java.lang.String tmp = ((haxe.root.Array<java.lang.String>) (this1) ).__get(0);
									//line 173 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
									haxe.root.Array<java.lang.String> path1 = path;
									//line 173 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
									boolean isAbsolute = false;
									//line 173 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
									path1 = thx.ArrayStrings.compact(path).filter(( (( thx._Path.Path_Impl__pathTo_173__Fun_0.__hx_current != null )) ? (thx._Path.Path_Impl__pathTo_173__Fun_0.__hx_current) : (thx._Path.Path_Impl__pathTo_173__Fun_0.__hx_current = ((thx._Path.Path_Impl__pathTo_173__Fun_0) (new thx._Path.Path_Impl__pathTo_173__Fun_0()) )) ));
									//line 173 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
									return ((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{tmp, ""}).concat(((haxe.root.Array<java.lang.String>) (thx.Arrays.reduce(((haxe.root.Array<java.lang.String>) (path1) ), ((haxe.lang.Function) (new thx._Path.Path_Impl__pathTo_173__Fun(isAbsolute)) ), ((java.lang.Object) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{})) ))) ))) );
								}
								else
								{
									//line 179 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
									return destination;
								}
								
							}
							
						}
						
					}
					
				}
				
			}
			
		}
		
		//line 168 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		return null;
	}
	
	
	public static haxe.root.Array<java.lang.String> sibling(haxe.root.Array<java.lang.String> this1, haxe.root.Array<java.lang.String> path)
	{
		//line 186 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		return thx._Path.Path_Impl_.join(thx._Path.Path_Impl_.up(this1, null), path);
	}
	
	
	public static haxe.root.Array<java.lang.String> toNix(haxe.root.Array<java.lang.String> this1)
	{
		//line 189 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		if (haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (this1) ).__get(0), "/")) 
		{
			//line 189 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			return ((haxe.root.Array<java.lang.String>) (this1) );
		}
		else
		{
			//line 189 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			return ((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{"/", ( ( ! (haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (this1) ).__get(1), "")) ) ? ("/") : ("") )}).concat(((haxe.root.Array<java.lang.String>) (this1) ).slice(2, null))) );
		}
		
	}
	
	
	public static haxe.root.Array<java.lang.String> toWin32(haxe.root.Array<java.lang.String> this1, java.lang.String root)
	{
		//line 194 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		if (( root == null )) 
		{
			//line 194 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			root = "C:\\";
		}
		
		//line 194 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		if (haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (this1) ).__get(0), "\\")) 
		{
			//line 194 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			return ((haxe.root.Array<java.lang.String>) (this1) );
		}
		else
		{
			//line 194 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			return ((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\\", ( ( ! (haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (this1) ).__get(1), "")) ) ? (root) : ("") )}).concat(((haxe.root.Array<java.lang.String>) (this1) ).slice(2, null))) );
		}
		
	}
	
	
	public static haxe.root.Array<java.lang.String> up(haxe.root.Array<java.lang.String> this1, java.lang.Object n)
	{
		//line 199 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		java.lang.Object __temp_n105 = ( (haxe.lang.Runtime.eq(n, null)) ? (((java.lang.Object) (1) )) : (n) );
		//line 199 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		if (thx._Path.Path_Impl_.isRoot(this1)) 
		{
			//line 199 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			return ((haxe.root.Array<java.lang.String>) (this1) );
		}
		else
		{
			//line 199 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			return ((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{((haxe.root.Array<java.lang.String>) (this1) ).__get(0), ((haxe.root.Array<java.lang.String>) (this1) ).__get(1)}).concat(this1.slice(2, ( ((int) (this1.length) ) - ((int) (haxe.lang.Runtime.toInt(__temp_n105)) ) )))) );
		}
		
	}
	
	
	public static haxe.root.Array<java.lang.String> withExt(haxe.root.Array<java.lang.String> this1, java.lang.String newextension)
	{
		//line 204 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		java.lang.String oext = thx._Path.Path_Impl_.ext(this1);
		//line 205 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		if (( oext.length() > 0 )) 
		{
			//line 206 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			oext = ( "." + oext );
		}
		
		//line 207 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		if (haxe.lang.Runtime.valEq(haxe.lang.StringExt.substring(newextension, 0, 1), ".")) 
		{
			//line 208 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			newextension = haxe.lang.StringExt.substring(newextension, 1, null);
		}
		
		//line 209 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		return thx._Path.Path_Impl_.sibling(this1, thx._Path.Path_Impl_.fromString(( ( ( "" + thx._Path.Path_Impl_.base(this1, oext) ) + "." ) + newextension )));
	}
	
	
	public static haxe.root.Array<java.lang.String> join(haxe.root.Array<java.lang.String> this1, haxe.root.Array<java.lang.String> other)
	{
		//line 213 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		if ( ! (haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (other) ).__get(1), "")) ) 
		{
			//line 214 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			return other;
		}
		
		//line 215 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		java.lang.String root = ((haxe.root.Array<java.lang.String>) (this1) ).__get(1);
		//line 215 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		haxe.root.Array<java.lang.String> path = ((haxe.root.Array<java.lang.String>) (this1) ).slice(2, null).concat(((haxe.root.Array<java.lang.String>) (other) ).slice(2, null));
		//line 215 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		java.lang.String tmp = ((haxe.root.Array<java.lang.String>) (this1) ).__get(0);
		//line 215 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		haxe.root.Array<java.lang.String> path1 = path;
		//line 215 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		boolean isAbsolute =  ! (haxe.lang.Runtime.valEq(root, "")) ;
		//line 215 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		path1 = thx.ArrayStrings.compact(path).filter(( (( thx._Path.Path_Impl__join_215__Fun_0.__hx_current != null )) ? (thx._Path.Path_Impl__join_215__Fun_0.__hx_current) : (thx._Path.Path_Impl__join_215__Fun_0.__hx_current = ((thx._Path.Path_Impl__join_215__Fun_0) (new thx._Path.Path_Impl__join_215__Fun_0()) )) ));
		//line 215 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		return ((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{tmp, root}).concat(((haxe.root.Array<java.lang.String>) (thx.Arrays.reduce(((haxe.root.Array<java.lang.String>) (path1) ), ((haxe.lang.Function) (new thx._Path.Path_Impl__join_215__Fun(isAbsolute)) ), ((java.lang.Object) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{})) ))) ))) );
	}
	
	
	public static java.lang.String toString(haxe.root.Array<java.lang.String> this1)
	{
		//line 219 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		if (( haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (this1) ).__get(1), "") && ( ((haxe.root.Array<java.lang.String>) (this1) ).slice(2, null).length == 0 ) )) 
		{
			//line 219 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			return ".";
		}
		else
		{
			//line 219 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
			return ( ((haxe.root.Array<java.lang.String>) (this1) ).__get(1) + ((haxe.root.Array<java.lang.String>) (this1) ).slice(2, null).join(((haxe.root.Array<java.lang.String>) (this1) ).__get(0)) );
		}
		
	}
	
	
	public static haxe.root.Array<java.lang.String> get_path(haxe.root.Array<java.lang.String> this1)
	{
		//line 222 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		return this1.slice(2, null);
	}
	
	
	public static java.lang.String get_root(haxe.root.Array<java.lang.String> this1)
	{
		//line 225 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		return this1.__get(1);
	}
	
	
	public static java.lang.String get_sep(haxe.root.Array<java.lang.String> this1)
	{
		//line 228 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		return this1.__get(0);
	}
	
	
	public static haxe.root.Array<java.lang.String> get_self(haxe.root.Array<java.lang.String> this1)
	{
		//line 231 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		return ((haxe.root.Array<java.lang.String>) (this1) );
	}
	
	
}


