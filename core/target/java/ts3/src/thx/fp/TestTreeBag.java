// Generated by Haxe 3.3.0
package thx.fp;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestTreeBag extends haxe.lang.HxObject
{
	static
	{
		//line 14 "/shared/core/test/thx/fp/TestTreeBag.hx"
		thx.fp.TestTreeBag.t0 = ((thx.fp.TreeBagImpl) (thx.fp.TreeBagImpl.Empty) );
		//line 15 "/shared/core/test/thx/fp/TestTreeBag.hx"
		thx.fp.TestTreeBag.t1 = thx.fp.TreeBagImpl.Cons(1, ((thx.fp.TreeBagImpl) (thx.fp.TreeBagImpl.Cons(2, thx.fp.TestTreeBag.t0)) ));
		//line 16 "/shared/core/test/thx/fp/TestTreeBag.hx"
		thx.fp.TestTreeBag.t2 = thx.fp.TreeBagImpl.Cons(2, ((thx.fp.TreeBagImpl) (thx.fp.TreeBagImpl.Cons(3, thx.fp.TestTreeBag.t0)) ));
	}
	
	public TestTreeBag(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestTreeBag(int i)
	{
		//line 10 "/shared/core/test/thx/fp/TestTreeBag.hx"
		thx.fp.TestTreeBag.__hx_ctor_thx_fp_TestTreeBag(this, i);
	}
	
	
	public static void __hx_ctor_thx_fp_TestTreeBag(thx.fp.TestTreeBag __temp_me118, int i)
	{
		//line 11 "/shared/core/test/thx/fp/TestTreeBag.hx"
		__temp_me118.x = i;
	}
	
	
	public static thx.fp.TreeBagImpl t0;
	
	public static thx.fp.TreeBagImpl t1;
	
	public static thx.fp.TreeBagImpl t2;
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
		return new thx.fp.TestTreeBag(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
		return new thx.fp.TestTreeBag(((int) (haxe.lang.Runtime.toInt(arr.__get(0))) ));
	}
	
	
	public int x;
	
	public thx.fp.TreeBagImpl plusOneBag(int i)
	{
		//line 19 "/shared/core/test/thx/fp/TestTreeBag.hx"
		return ((thx.fp.TreeBagImpl) (thx.fp.TreeBagImpl.Cons(( i + 1 ), thx.fp.TestTreeBag.t0)) );
	}
	
	
	public thx.fp.TreeBagImpl plusTwoBags(int i)
	{
		//line 23 "/shared/core/test/thx/fp/TestTreeBag.hx"
		return ((thx.fp.TreeBagImpl) (thx.fp._TreeBag.TreeBag_Impl_.map(((thx.fp.TreeBagImpl) (thx.fp.TestTreeBag.t1) ), ((haxe.lang.Function) (new thx.fp.TestTreeBag_plusTwoBags_23__Fun(i)) ))) );
	}
	
	
	public void testMap()
	{
		//line 27 "/shared/core/test/thx/fp/TestTreeBag.hx"
		int _g1 = 0;
		//line 27 "/shared/core/test/thx/fp/TestTreeBag.hx"
		int _g = this.x;
		//line 27 "/shared/core/test/thx/fp/TestTreeBag.hx"
		while (( _g1 < _g ))
		{
			//line 27 "/shared/core/test/thx/fp/TestTreeBag.hx"
			 ++ _g1;
			//line 28 "/shared/core/test/thx/fp/TestTreeBag.hx"
			utest.Assert.same(thx.fp.TestTreeBag.t0, ((thx.fp.TreeBagImpl) (thx.fp._TreeBag.TreeBag_Impl_.map(((thx.fp.TreeBagImpl) (thx.fp.TestTreeBag.t0) ), ((haxe.lang.Function) (new haxe.lang.Closure(thx.Functions.class, "identity")) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestTreeBag", "TestTreeBag.hx", "testMap"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (28) )) )}));
			//line 29 "/shared/core/test/thx/fp/TestTreeBag.hx"
			utest.Assert.same(thx.fp.TestTreeBag.t2, ((thx.fp.TreeBagImpl) (thx.fp._TreeBag.TreeBag_Impl_.map(((thx.fp.TreeBagImpl) (thx.fp.TestTreeBag.t1) ), ((haxe.lang.Function) (( (( thx.fp.TestTreeBag_testMap_29__Fun.__hx_current != null )) ? (thx.fp.TestTreeBag_testMap_29__Fun.__hx_current) : (thx.fp.TestTreeBag_testMap_29__Fun.__hx_current = ((thx.fp.TestTreeBag_testMap_29__Fun) (new thx.fp.TestTreeBag_testMap_29__Fun()) )) )) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestTreeBag", "TestTreeBag.hx", "testMap"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (29) )) )}));
		}
		
	}
	
	
	public void testToArray()
	{
		//line 33 "/shared/core/test/thx/fp/TestTreeBag.hx"
		int _g1 = 0;
		//line 33 "/shared/core/test/thx/fp/TestTreeBag.hx"
		int _g = this.x;
		//line 33 "/shared/core/test/thx/fp/TestTreeBag.hx"
		while (( _g1 < _g ))
		{
			//line 33 "/shared/core/test/thx/fp/TestTreeBag.hx"
			 ++ _g1;
			//line 34 "/shared/core/test/thx/fp/TestTreeBag.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2}), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.fp._TreeBag.TreeBag_Impl_.toArray(((thx.fp.TreeBagImpl) (thx.fp.TestTreeBag.t1) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestTreeBag", "TestTreeBag.hx", "testToArray"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (34) )) )}));
		}
		
	}
	
	
	public void testFlatMap()
	{
		//line 38 "/shared/core/test/thx/fp/TestTreeBag.hx"
		int _g1 = 0;
		//line 38 "/shared/core/test/thx/fp/TestTreeBag.hx"
		int _g = this.x;
		//line 38 "/shared/core/test/thx/fp/TestTreeBag.hx"
		while (( _g1 < _g ))
		{
			//line 38 "/shared/core/test/thx/fp/TestTreeBag.hx"
			 ++ _g1;
			//line 39 "/shared/core/test/thx/fp/TestTreeBag.hx"
			utest.Assert.same(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.fp._TreeBag.TreeBag_Impl_.toArray(((thx.fp.TreeBagImpl) (thx.fp.TestTreeBag.t2) ))) )) ), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.fp._TreeBag.TreeBag_Impl_.toArray(((thx.fp.TreeBagImpl) (thx.fp._TreeBag.TreeBag_Impl_.flatMap(((thx.fp.TreeBagImpl) (thx.fp.TestTreeBag.t1) ), ((haxe.lang.Function) (new haxe.lang.Closure(this, "plusOneBag")) ))) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestTreeBag", "TestTreeBag.hx", "testFlatMap"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (39) )) )}));
			//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
			thx.fp.TreeBagImpl this1 = thx.fp.TreeBagImpl.Cons(2, ((thx.fp.TreeBagImpl) (thx.fp.TreeBagImpl.Cons(3, thx.fp.TestTreeBag.t0)) ));
			//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
			thx.fp.TreeBagImpl this2 = thx.fp.TreeBagImpl.Cons(3, ((thx.fp.TreeBagImpl) (thx.fp.TreeBagImpl.Cons(4, thx.fp.TestTreeBag.t0)) ));
			//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
			thx.fp.TreeBagImpl other = thx.fp.TestTreeBag.t0;
			//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
			thx.fp.TreeBagImpl other1 = null;
			//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
			switch (((thx.fp.TreeBagImpl) (this2) ).index)
			{
				case 0:
				{
					//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
					switch (other.index)
					{
						case 0:
						{
							//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
							other1 = thx.fp.TreeBagImpl.Empty;
							//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
							break;
						}
						
						
						default:
						{
							//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
							other1 = other;
							//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
							break;
						}
						
					}
					
					//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
					break;
				}
				
				
				case 1:
				{
					//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
					switch (other.index)
					{
						case 0:
						{
							//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
							other1 = ((thx.fp.TreeBagImpl) (this2) );
							//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
							break;
						}
						
						
						default:
						{
							//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
							switch (((thx.fp.TreeBagImpl) (((thx.fp.TreeBagImpl) (this2) ).params[1]) ).index)
							{
								case 0:
								{
									//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
									other1 = thx.fp.TreeBagImpl.Cons(3, other);
									//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
									break;
								}
								
								
								default:
								{
									//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
									other1 = thx.fp.TreeBagImpl.Branch(((thx.fp.TreeBagImpl) (this2) ), other);
									//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
									break;
								}
								
							}
							
							//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
							break;
						}
						
					}
					
					//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
					break;
				}
				
				
				default:
				{
					//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
					switch (other.index)
					{
						case 0:
						{
							//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
							other1 = ((thx.fp.TreeBagImpl) (this2) );
							//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
							break;
						}
						
						
						default:
						{
							//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
							other1 = thx.fp.TreeBagImpl.Branch(((thx.fp.TreeBagImpl) (this2) ), other);
							//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
							break;
						}
						
					}
					
					//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
					break;
				}
				
			}
			
			//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
			thx.fp.TreeBagImpl tmp = null;
			//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
			switch (((thx.fp.TreeBagImpl) (this1) ).index)
			{
				case 0:
				{
					//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
					switch (other1.index)
					{
						case 0:
						{
							//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
							tmp = thx.fp.TreeBagImpl.Empty;
							//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
							break;
						}
						
						
						default:
						{
							//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
							tmp = other1;
							//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
							break;
						}
						
					}
					
					//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
					break;
				}
				
				
				case 1:
				{
					//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
					switch (other1.index)
					{
						case 0:
						{
							//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
							tmp = ((thx.fp.TreeBagImpl) (this1) );
							//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
							break;
						}
						
						
						default:
						{
							//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
							switch (((thx.fp.TreeBagImpl) (((thx.fp.TreeBagImpl) (this1) ).params[1]) ).index)
							{
								case 0:
								{
									//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
									tmp = thx.fp.TreeBagImpl.Cons(2, other1);
									//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
									break;
								}
								
								
								default:
								{
									//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
									tmp = thx.fp.TreeBagImpl.Branch(((thx.fp.TreeBagImpl) (this1) ), other1);
									//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
									break;
								}
								
							}
							
							//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
							break;
						}
						
					}
					
					//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
					break;
				}
				
				
				default:
				{
					//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
					switch (other1.index)
					{
						case 0:
						{
							//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
							tmp = ((thx.fp.TreeBagImpl) (this1) );
							//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
							break;
						}
						
						
						default:
						{
							//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
							tmp = thx.fp.TreeBagImpl.Branch(((thx.fp.TreeBagImpl) (this1) ), other1);
							//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
							break;
						}
						
					}
					
					//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
					break;
				}
				
			}
			
			//line 40 "/shared/core/test/thx/fp/TestTreeBag.hx"
			utest.Assert.same(tmp, ((thx.fp.TreeBagImpl) (thx.fp._TreeBag.TreeBag_Impl_.flatMap(((thx.fp.TreeBagImpl) (thx.fp.TestTreeBag.t1) ), ((haxe.lang.Function) (new haxe.lang.Closure(this, "plusTwoBags")) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestTreeBag", "TestTreeBag.hx", "testFlatMap"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (40) )) )}));
		}
		
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
		{
			//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
			boolean __temp_executeDef1 = true;
			//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
					if (field.equals("x")) 
					{
						//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
						this.x = ((int) (value) );
						//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
						return value;
					}
					
					//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
					break;
				}
				
				
			}
			
			//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
			if (__temp_executeDef1) 
			{
				//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
		{
			//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
			boolean __temp_executeDef1 = true;
			//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
					if (field.equals("x")) 
					{
						//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
						this.x = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
						return value;
					}
					
					//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
					break;
				}
				
				
			}
			
			//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
			if (__temp_executeDef1) 
			{
				//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
		{
			//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
			boolean __temp_executeDef1 = true;
			//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
			switch (field.hashCode())
			{
				case -1171441103:
				{
					//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
					if (field.equals("testFlatMap")) 
					{
						//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFlatMap")) );
					}
					
					//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
					break;
				}
				
				
				case 120:
				{
					//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
					if (field.equals("x")) 
					{
						//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
						return this.x;
					}
					
					//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
					break;
				}
				
				
				case -1574980692:
				{
					//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
					if (field.equals("testToArray")) 
					{
						//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testToArray")) );
					}
					
					//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
					break;
				}
				
				
				case 929190396:
				{
					//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
					if (field.equals("plusOneBag")) 
					{
						//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "plusOneBag")) );
					}
					
					//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
					break;
				}
				
				
				case -1422473366:
				{
					//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
					if (field.equals("testMap")) 
					{
						//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testMap")) );
					}
					
					//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
					break;
				}
				
				
				case -850420003:
				{
					//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
					if (field.equals("plusTwoBags")) 
					{
						//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "plusTwoBags")) );
					}
					
					//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
					break;
				}
				
				
			}
			
			//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
			if (__temp_executeDef1) 
			{
				//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
		{
			//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
			boolean __temp_executeDef1 = true;
			//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
					if (field.equals("x")) 
					{
						//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
						return ((double) (this.x) );
					}
					
					//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
					break;
				}
				
				
			}
			
			//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
			if (__temp_executeDef1) 
			{
				//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
		{
			//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
			boolean __temp_executeDef1 = true;
			//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
			switch (field.hashCode())
			{
				case -1171441103:
				{
					//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
					if (field.equals("testFlatMap")) 
					{
						//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
						this.testFlatMap();
					}
					
					//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
					break;
				}
				
				
				case 929190396:
				{
					//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
					if (field.equals("plusOneBag")) 
					{
						//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
						return this.plusOneBag(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ));
					}
					
					//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
					break;
				}
				
				
				case -1574980692:
				{
					//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
					if (field.equals("testToArray")) 
					{
						//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
						this.testToArray();
					}
					
					//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
					break;
				}
				
				
				case -850420003:
				{
					//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
					if (field.equals("plusTwoBags")) 
					{
						//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
						return this.plusTwoBags(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ));
					}
					
					//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
					break;
				}
				
				
				case -1422473366:
				{
					//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
					if (field.equals("testMap")) 
					{
						//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
						this.testMap();
					}
					
					//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
					break;
				}
				
				
			}
			
			//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
			if (__temp_executeDef1) 
			{
				//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
		baseArr.push("x");
		//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
		{
			//line 8 "/shared/core/test/thx/fp/TestTreeBag.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


