// Generated by Haxe 3.3.0
package thx.fp;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestSet extends haxe.lang.HxObject
{
	public TestSet(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestSet(int i)
	{
		//line 9 "/shared/core/test/thx/fp/TestSet.hx"
		thx.fp.TestSet.__hx_ctor_thx_fp_TestSet(this, i);
	}
	
	
	public static void __hx_ctor_thx_fp_TestSet(thx.fp.TestSet __temp_me123, int i)
	{
		//line 10 "/shared/core/test/thx/fp/TestSet.hx"
		__temp_me123.x = i;
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 7 "/shared/core/test/thx/fp/TestSet.hx"
		return new thx.fp.TestSet(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 7 "/shared/core/test/thx/fp/TestSet.hx"
		return new thx.fp.TestSet(((int) (haxe.lang.Runtime.toInt(arr.__get(0))) ));
	}
	
	
	public int x;
	
	public void testEmpty()
	{
		//line 14 "/shared/core/test/thx/fp/TestSet.hx"
		int _g1 = 0;
		//line 14 "/shared/core/test/thx/fp/TestSet.hx"
		int _g = this.x;
		//line 14 "/shared/core/test/thx/fp/TestSet.hx"
		while (( _g1 < _g ))
		{
			//line 14 "/shared/core/test/thx/fp/TestSet.hx"
			 ++ _g1;
			//line 15 "/shared/core/test/thx/fp/TestSet.hx"
			thx.fp.SetImpl set = ((thx.fp.SetImpl) (thx.fp.SetImpl.Tip) );
			//line 16 "/shared/core/test/thx/fp/TestSet.hx"
			utest.Assert.isFalse(((boolean) (thx.fp._Set.Set_Impl_.member(((thx.fp.SetImpl) (set) ), haxe.lang.Runtime.toString("some"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testEmpty"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (16) )) )}));
			//line 17 "/shared/core/test/thx/fp/TestSet.hx"
			utest.Assert.equals(0, ((int) (thx.fp._Set.Set_Impl_.size(((thx.fp.SetImpl) (set) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testEmpty"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (17) )) )}));
		}
		
	}
	
	
	public void testSizes()
	{
		//line 21 "/shared/core/test/thx/fp/TestSet.hx"
		int _g1 = 0;
		//line 21 "/shared/core/test/thx/fp/TestSet.hx"
		int _g = this.x;
		//line 21 "/shared/core/test/thx/fp/TestSet.hx"
		while (( _g1 < _g ))
		{
			//line 21 "/shared/core/test/thx/fp/TestSet.hx"
			 ++ _g1;
			//line 22 "/shared/core/test/thx/fp/TestSet.hx"
			utest.Assert.equals(3, ((int) (thx.fp._Set.Set_Impl_.size(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp.SetImpl.Bin(1, "B", thx.fp.SetImpl.Tip, thx.fp.SetImpl.Tip)) ), haxe.lang.Runtime.toString("A"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), haxe.lang.Runtime.toString("C"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testSizes"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (22) )) )}));
			//line 23 "/shared/core/test/thx/fp/TestSet.hx"
			utest.Assert.equals(3, ((int) (thx.fp._Set.Set_Impl_.size(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp.SetImpl.Bin(1, "A", thx.fp.SetImpl.Tip, thx.fp.SetImpl.Tip)) ), haxe.lang.Runtime.toString("B"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), haxe.lang.Runtime.toString("C"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testSizes"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (23) )) )}));
			//line 24 "/shared/core/test/thx/fp/TestSet.hx"
			utest.Assert.equals(3, ((int) (thx.fp._Set.Set_Impl_.size(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp.SetImpl.Bin(1, "C", thx.fp.SetImpl.Tip, thx.fp.SetImpl.Tip)) ), haxe.lang.Runtime.toString("B"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), haxe.lang.Runtime.toString("A"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testSizes"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (24) )) )}));
			//line 25 "/shared/core/test/thx/fp/TestSet.hx"
			utest.Assert.equals(3, ((int) (thx.fp._Set.Set_Impl_.size(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp.SetImpl.Bin(1, "B", thx.fp.SetImpl.Tip, thx.fp.SetImpl.Tip)) ), haxe.lang.Runtime.toString("C"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), haxe.lang.Runtime.toString("A"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testSizes"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (25) )) )}));
			//line 26 "/shared/core/test/thx/fp/TestSet.hx"
			utest.Assert.equals(3, ((int) (thx.fp._Set.Set_Impl_.size(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp.SetImpl.Bin(1, "C", thx.fp.SetImpl.Tip, thx.fp.SetImpl.Tip)) ), haxe.lang.Runtime.toString("A"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), haxe.lang.Runtime.toString("B"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testSizes"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (26) )) )}));
			//line 27 "/shared/core/test/thx/fp/TestSet.hx"
			utest.Assert.equals(3, ((int) (thx.fp._Set.Set_Impl_.size(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp.SetImpl.Bin(1, "A", thx.fp.SetImpl.Tip, thx.fp.SetImpl.Tip)) ), haxe.lang.Runtime.toString("C"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), haxe.lang.Runtime.toString("B"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testSizes"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (27) )) )}));
			//line 29 "/shared/core/test/thx/fp/TestSet.hx"
			utest.Assert.equals(1, ((int) (thx.fp._Set.Set_Impl_.size(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp.SetImpl.Bin(1, "A", thx.fp.SetImpl.Tip, thx.fp.SetImpl.Tip)) ), haxe.lang.Runtime.toString("A"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), haxe.lang.Runtime.toString("A"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testSizes"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (29) )) )}));
		}
		
	}
	
	
	public void testSet()
	{
		//line 33 "/shared/core/test/thx/fp/TestSet.hx"
		int _g1 = 0;
		//line 33 "/shared/core/test/thx/fp/TestSet.hx"
		int _g = this.x;
		//line 33 "/shared/core/test/thx/fp/TestSet.hx"
		while (( _g1 < _g ))
		{
			//line 33 "/shared/core/test/thx/fp/TestSet.hx"
			 ++ _g1;
			//line 34 "/shared/core/test/thx/fp/TestSet.hx"
			thx.fp.SetImpl m = ((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp.SetImpl.Bin(1, "Y", thx.fp.SetImpl.Tip, thx.fp.SetImpl.Tip)) ), haxe.lang.Runtime.toString("X"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), haxe.lang.Runtime.toString("Y"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), haxe.lang.Runtime.toString("Z"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), haxe.lang.Runtime.toString("Z"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) );
			//line 35 "/shared/core/test/thx/fp/TestSet.hx"
			utest.Assert.isTrue(((boolean) (thx.fp._Set.Set_Impl_.member(((thx.fp.SetImpl) (m) ), haxe.lang.Runtime.toString("X"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testSet"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (35) )) )}));
			//line 36 "/shared/core/test/thx/fp/TestSet.hx"
			utest.Assert.isTrue(((boolean) (thx.fp._Set.Set_Impl_.member(((thx.fp.SetImpl) (m) ), haxe.lang.Runtime.toString("Y"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testSet"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (36) )) )}));
			//line 37 "/shared/core/test/thx/fp/TestSet.hx"
			utest.Assert.isTrue(((boolean) (thx.fp._Set.Set_Impl_.member(((thx.fp.SetImpl) (m) ), haxe.lang.Runtime.toString("Z"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testSet"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (37) )) )}));
			//line 38 "/shared/core/test/thx/fp/TestSet.hx"
			utest.Assert.isFalse(((boolean) (thx.fp._Set.Set_Impl_.member(((thx.fp.SetImpl) (m) ), haxe.lang.Runtime.toString("W"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testSet"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (38) )) )}));
			//line 39 "/shared/core/test/thx/fp/TestSet.hx"
			utest.Assert.equals(3, ((int) (thx.fp._Set.Set_Impl_.size(((thx.fp.SetImpl) (m) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testSet"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (39) )) )}));
		}
		
	}
	
	
	public void testMapList()
	{
		//line 43 "/shared/core/test/thx/fp/TestSet.hx"
		int _g1 = 0;
		//line 43 "/shared/core/test/thx/fp/TestSet.hx"
		int _g = this.x;
		//line 43 "/shared/core/test/thx/fp/TestSet.hx"
		while (( _g1 < _g ))
		{
			//line 43 "/shared/core/test/thx/fp/TestSet.hx"
			 ++ _g1;
			//line 44 "/shared/core/test/thx/fp/TestSet.hx"
			thx.fp.SetImpl m = ((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp.SetImpl.Bin(1, "Y", thx.fp.SetImpl.Tip, thx.fp.SetImpl.Tip)) ), haxe.lang.Runtime.toString("X"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), haxe.lang.Runtime.toString("Z"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) );
			//line 44 "/shared/core/test/thx/fp/TestSet.hx"
			thx.fp.ListImpl l = ((thx.fp.ListImpl) (thx.fp._Set.Set_Impl_.mapList(((thx.fp.SetImpl) (m) ), ((haxe.lang.Function) (( (( thx.fp.TestSet_testMapList_45__Fun.__hx_current != null )) ? (thx.fp.TestSet_testMapList_45__Fun.__hx_current) : (thx.fp.TestSet_testMapList_45__Fun.__hx_current = ((thx.fp.TestSet_testMapList_45__Fun) (new thx.fp.TestSet_testMapList_45__Fun()) )) )) ))) );
			//line 47 "/shared/core/test/thx/fp/TestSet.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{"x", "y", "z"}), ((haxe.root.Array<java.lang.String>) (thx.Arrays.order(((haxe.root.Array<java.lang.String>) (thx.fp._List.List_Impl_.foldLeft(((thx.fp.ListImpl) (l) ), ((java.lang.Object) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{})) ), ((haxe.lang.Function) (( (( thx.fp.TestSet_testMapList_47__Fun.__hx_current != null )) ? (thx.fp.TestSet_testMapList_47__Fun.__hx_current) : (thx.fp.TestSet_testMapList_47__Fun.__hx_current = ((thx.fp.TestSet_testMapList_47__Fun) (new thx.fp.TestSet_testMapList_47__Fun()) )) )) ))) ), ((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testMapList"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (47) )) )}));
		}
		
	}
	
	
	public void testFoldLeft()
	{
		//line 51 "/shared/core/test/thx/fp/TestSet.hx"
		int _g1 = 0;
		//line 51 "/shared/core/test/thx/fp/TestSet.hx"
		int _g = this.x;
		//line 51 "/shared/core/test/thx/fp/TestSet.hx"
		while (( _g1 < _g ))
		{
			//line 51 "/shared/core/test/thx/fp/TestSet.hx"
			 ++ _g1;
			//line 52 "/shared/core/test/thx/fp/TestSet.hx"
			thx.fp.SetImpl set = ((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp.SetImpl.Bin(1, 1, thx.fp.SetImpl.Tip, thx.fp.SetImpl.Tip)) ), ((java.lang.Object) (2) ), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Ints.class, "compare")) ))) ))) ), ((java.lang.Object) (3) ), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Ints.class, "compare")) ))) ))) );
			//line 53 "/shared/core/test/thx/fp/TestSet.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2, 3}), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.Arrays.order(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (thx.fp._Set.Set_Impl_.foldLeft(((thx.fp.SetImpl) (set) ), ((java.lang.Object) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{})) ), ((haxe.lang.Function) (( (( thx.fp.TestSet_testFoldLeft_53__Fun.__hx_current != null )) ? (thx.fp.TestSet_testFoldLeft_53__Fun.__hx_current) : (thx.fp.TestSet_testFoldLeft_53__Fun.__hx_current = ((thx.fp.TestSet_testFoldLeft_53__Fun) (new thx.fp.TestSet_testFoldLeft_53__Fun()) )) )) ))) )) )) ), ((haxe.lang.Function) (new haxe.lang.Closure(thx.Ints.class, "compare")) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testFoldLeft"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (53) )) )}));
		}
		
	}
	
	
	public void testToList()
	{
		//line 60 "/shared/core/test/thx/fp/TestSet.hx"
		int _g1 = 0;
		//line 60 "/shared/core/test/thx/fp/TestSet.hx"
		int _g = this.x;
		//line 60 "/shared/core/test/thx/fp/TestSet.hx"
		while (( _g1 < _g ))
		{
			//line 60 "/shared/core/test/thx/fp/TestSet.hx"
			 ++ _g1;
			//line 61 "/shared/core/test/thx/fp/TestSet.hx"
			thx.fp.SetImpl m = ((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp.SetImpl.Bin(1, "Y", thx.fp.SetImpl.Tip, thx.fp.SetImpl.Tip)) ), haxe.lang.Runtime.toString("X"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), haxe.lang.Runtime.toString("Z"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) );
			//line 61 "/shared/core/test/thx/fp/TestSet.hx"
			thx.fp.ListImpl l = ((thx.fp.ListImpl) (thx.fp._Set.Set_Impl_.toList(((thx.fp.SetImpl) (m) ))) );
			//line 64 "/shared/core/test/thx/fp/TestSet.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{"X", "Y", "Z"}), ((haxe.root.Array<java.lang.String>) (thx.Arrays.order(((haxe.root.Array<java.lang.String>) (thx.fp._List.List_Impl_.foldLeft(((thx.fp.ListImpl) (l) ), ((java.lang.Object) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{})) ), ((haxe.lang.Function) (( (( thx.fp.TestSet_testToList_64__Fun.__hx_current != null )) ? (thx.fp.TestSet_testToList_64__Fun.__hx_current) : (thx.fp.TestSet_testToList_64__Fun.__hx_current = ((thx.fp.TestSet_testToList_64__Fun) (new thx.fp.TestSet_testToList_64__Fun()) )) )) ))) ), ((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testToList"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (64) )) )}));
		}
		
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 7 "/shared/core/test/thx/fp/TestSet.hx"
		{
			//line 7 "/shared/core/test/thx/fp/TestSet.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/core/test/thx/fp/TestSet.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					if (field.equals("x")) 
					{
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						this.x = ((int) (value) );
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						return value;
					}
					
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/core/test/thx/fp/TestSet.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/core/test/thx/fp/TestSet.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 7 "/shared/core/test/thx/fp/TestSet.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 7 "/shared/core/test/thx/fp/TestSet.hx"
		{
			//line 7 "/shared/core/test/thx/fp/TestSet.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/core/test/thx/fp/TestSet.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					if (field.equals("x")) 
					{
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						this.x = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						return value;
					}
					
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/core/test/thx/fp/TestSet.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/core/test/thx/fp/TestSet.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 7 "/shared/core/test/thx/fp/TestSet.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 7 "/shared/core/test/thx/fp/TestSet.hx"
		{
			//line 7 "/shared/core/test/thx/fp/TestSet.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/core/test/thx/fp/TestSet.hx"
			switch (field.hashCode())
			{
				case 1750628587:
				{
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					if (field.equals("testToList")) 
					{
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testToList")) );
					}
					
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					break;
				}
				
				
				case 120:
				{
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					if (field.equals("x")) 
					{
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						return this.x;
					}
					
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					break;
				}
				
				
				case 1007693402:
				{
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					if (field.equals("testFoldLeft")) 
					{
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFoldLeft")) );
					}
					
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					break;
				}
				
				
				case -1204331557:
				{
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					if (field.equals("testEmpty")) 
					{
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testEmpty")) );
					}
					
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					break;
				}
				
				
				case 443885352:
				{
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					if (field.equals("testMapList")) 
					{
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testMapList")) );
					}
					
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					break;
				}
				
				
				case -1191512288:
				{
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					if (field.equals("testSizes")) 
					{
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSizes")) );
					}
					
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					break;
				}
				
				
				case -1422467472:
				{
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					if (field.equals("testSet")) 
					{
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSet")) );
					}
					
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/core/test/thx/fp/TestSet.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/core/test/thx/fp/TestSet.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 7 "/shared/core/test/thx/fp/TestSet.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 7 "/shared/core/test/thx/fp/TestSet.hx"
		{
			//line 7 "/shared/core/test/thx/fp/TestSet.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/core/test/thx/fp/TestSet.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					if (field.equals("x")) 
					{
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						return ((double) (this.x) );
					}
					
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/core/test/thx/fp/TestSet.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/core/test/thx/fp/TestSet.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 7 "/shared/core/test/thx/fp/TestSet.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 7 "/shared/core/test/thx/fp/TestSet.hx"
		{
			//line 7 "/shared/core/test/thx/fp/TestSet.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/core/test/thx/fp/TestSet.hx"
			switch (field.hashCode())
			{
				case 1750628587:
				{
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					if (field.equals("testToList")) 
					{
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						this.testToList();
					}
					
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					break;
				}
				
				
				case -1204331557:
				{
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					if (field.equals("testEmpty")) 
					{
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						this.testEmpty();
					}
					
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					break;
				}
				
				
				case 1007693402:
				{
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					if (field.equals("testFoldLeft")) 
					{
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						this.testFoldLeft();
					}
					
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					break;
				}
				
				
				case -1191512288:
				{
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					if (field.equals("testSizes")) 
					{
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						this.testSizes();
					}
					
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					break;
				}
				
				
				case 443885352:
				{
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					if (field.equals("testMapList")) 
					{
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						this.testMapList();
					}
					
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					break;
				}
				
				
				case -1422467472:
				{
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					if (field.equals("testSet")) 
					{
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/test/thx/fp/TestSet.hx"
						this.testSet();
					}
					
					//line 7 "/shared/core/test/thx/fp/TestSet.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/core/test/thx/fp/TestSet.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/core/test/thx/fp/TestSet.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 7 "/shared/core/test/thx/fp/TestSet.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 7 "/shared/core/test/thx/fp/TestSet.hx"
		baseArr.push("x");
		//line 7 "/shared/core/test/thx/fp/TestSet.hx"
		{
			//line 7 "/shared/core/test/thx/fp/TestSet.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


