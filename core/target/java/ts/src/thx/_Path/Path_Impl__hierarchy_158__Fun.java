// Generated by Haxe 3.3.0
package thx._Path;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Path_Impl__hierarchy_158__Fun extends haxe.lang.Function
{
	public Path_Impl__hierarchy_158__Fun(haxe.root.Array<java.lang.String> this1, haxe.root.Array<java.lang.String> base)
	{
		//line 158 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		super(2, 0);
		//line 158 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		this.this1 = this1;
		//line 158 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		this.base = base;
	}
	
	
	@Override public java.lang.Object __hx_invoke2_o(double __fn_float1, java.lang.Object __fn_dyn1, double __fn_float2, java.lang.Object __fn_dyn2)
	{
		//line 158 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		java.lang.String cur = ( (( __fn_dyn2 == haxe.lang.Runtime.undefined )) ? (haxe.lang.Runtime.toString(__fn_float2)) : (haxe.lang.Runtime.toString(__fn_dyn2)) );
		//line 158 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		haxe.root.Array<haxe.root.Array<java.lang.String>> acc = ( (( __fn_dyn1 == haxe.lang.Runtime.undefined )) ? (((haxe.root.Array<haxe.root.Array<java.lang.String>>) (((java.lang.Object) (__fn_float1) )) )) : (((haxe.root.Array<haxe.root.Array<java.lang.String>>) (__fn_dyn1) )) );
		//line 159 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		this.base.push(cur);
		//line 160 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		java.lang.String root = ((haxe.root.Array<java.lang.String>) (this.this1) ).__get(1);
		//line 160 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		haxe.root.Array<java.lang.String> path = this.base.copy();
		//line 160 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		java.lang.String tmp = ((haxe.root.Array<java.lang.String>) (this.this1) ).__get(0);
		//line 160 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		haxe.root.Array<java.lang.String> path1 = path;
		//line 160 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		boolean isAbsolute =  ! (haxe.lang.Runtime.valEq(root, "")) ;
		//line 160 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		path1 = thx.ArrayStrings.compact(path).filter(( (( thx._Path.Path_Impl__hierarchy_160__Fun_0.__hx_current != null )) ? (thx._Path.Path_Impl__hierarchy_160__Fun_0.__hx_current) : (thx._Path.Path_Impl__hierarchy_160__Fun_0.__hx_current = ((thx._Path.Path_Impl__hierarchy_160__Fun_0) (new thx._Path.Path_Impl__hierarchy_160__Fun_0()) )) ));
		//line 160 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		acc.push(((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{tmp, root}).concat(((haxe.root.Array<java.lang.String>) (thx.Arrays.reduce(((haxe.root.Array<java.lang.String>) (path1) ), ((haxe.lang.Function) (new thx._Path.Path_Impl__hierarchy_160__Fun(isAbsolute)) ), ((java.lang.Object) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{})) ))) ))) ));
		//line 161 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Path.hx"
		return acc;
	}
	
	
	public haxe.root.Array<java.lang.String> this1;
	
	public haxe.root.Array<java.lang.String> base;
	
}


