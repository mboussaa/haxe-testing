// Generated by Haxe 3.3.0
package thx;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestArrays extends haxe.lang.HxObject
{
	public TestArrays(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestArrays()
	{
		//line 15 "/shared/core/thx/TestArrays.hx"
		thx.TestArrays.__hx_ctor_thx_TestArrays(this);
	}
	
	
	public static void __hx_ctor_thx_TestArrays(thx.TestArrays __temp_me158)
	{
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 14 "/shared/core/thx/TestArrays.hx"
		return new thx.TestArrays(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 14 "/shared/core/thx/TestArrays.hx"
		return new thx.TestArrays();
	}
	
	
	public void testApplyIndexes()
	{
		//line 18 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{"A", "B", "C"}), ((haxe.root.Array<java.lang.String>) (thx.Arrays.applyIndexes(((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{"B", "C", "A"})) ), ((haxe.root.Array<java.lang.Object>) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2, 0})) ), ((java.lang.Object) (null) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testApplyIndexes"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (18) )) )}));
		//line 19 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 1, 2, 2, 3}), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.Arrays.applyIndexes(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 3, 2, 1, 2})) )) ), ((haxe.root.Array<java.lang.Object>) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0, 4, 2, 0, 2})) ), ((java.lang.Object) (true) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testApplyIndexes"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (19) )) )}));
	}
	
	
	public void testRank()
	{
		//line 23 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> tests = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2, 3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3, 1, 2})}, new java.lang.String[]{}, new double[]{}), new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2, 3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2, 3})}, new java.lang.String[]{}, new double[]{}), new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2, 3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3, 2, 1})}, new java.lang.String[]{}, new double[]{}), new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{2, 1})}, new java.lang.String[]{}, new double[]{}), new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2})}, new java.lang.String[]{}, new double[]{}), new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{2}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{2})}, new java.lang.String[]{}, new double[]{}), new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{})}, new java.lang.String[]{}, new double[]{}), new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 1, 2, 2, 3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 3, 2, 1, 2})}, new java.lang.String[]{}, new double[]{})});
		//line 34 "/shared/core/thx/TestArrays.hx"
		{
			//line 34 "/shared/core/thx/TestArrays.hx"
			int _g = 0;
			//line 34 "/shared/core/thx/TestArrays.hx"
			while (( _g < tests.length ))
			{
				//line 34 "/shared/core/thx/TestArrays.hx"
				java.lang.Object item = tests.__get(_g);
				//line 34 "/shared/core/thx/TestArrays.hx"
				 ++ _g;
				//line 35 "/shared/core/thx/TestArrays.hx"
				haxe.root.Array<java.lang.Object> ranks = ((haxe.root.Array<java.lang.Object>) (thx.Arrays.rank(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(item, "test", true)) )) )) ), ((haxe.lang.Function) (new haxe.lang.Closure(thx.Ints.class, "compare")) ), ((java.lang.Object) (null) ))) );
				//line 36 "/shared/core/thx/TestArrays.hx"
				haxe.root.Array<java.lang.Object> applied = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.Arrays.applyIndexes(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(item, "test", true)) )) )) ), ((haxe.root.Array<java.lang.Object>) (ranks) ), ((java.lang.Object) (null) ))) )) );
				//line 37 "/shared/core/thx/TestArrays.hx"
				utest.Assert.same(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(item, "expected", true)) ), applied, null, ( ( ( "expected " + haxe.root.Std.string(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(item, "expected", true)) )) ) + " but it is " ) + haxe.root.Std.string(ranks) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testRank"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (37) )) )}));
			}
			
		}
		
	}
	
	
	public void testWith()
	{
		//line 42 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> arr = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1});
		//line 43 "/shared/core/thx/TestArrays.hx"
		utest.Assert.isFalse(( arr == ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (arr) ).concat(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{2})) )) )) ))) )) ) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testWith"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (43) )) )}));
		//line 45 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2, 3}), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2})) ).concat(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3})) )) )) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testWith"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (45) )) )}));
		//line 46 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2, 3}), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1}).concat(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{2, 3})) )) )) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testWith"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (46) )) )}));
		//line 47 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2, 3}), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.Arrays.withInsert(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 3})) )) ), ((java.lang.Object) (2) ), ((int) (1) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testWith"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (47) )) )}));
		//line 48 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2, 3, 4, 5}), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.Arrays.withSlice(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2, 3, 4, 5})) )) ), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3, 4})) )) ), ((int) (2) ), ((java.lang.Object) (2) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testWith"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (48) )) )}));
		//line 49 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2, 3, 4, 5}), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.Arrays.withSlice(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2, 5})) )) ), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3, 4})) )) ), ((int) (2) ), ((java.lang.Object) (null) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testWith"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (49) )) )}));
	}
	
	
	public void testCreate()
	{
		//line 53 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> arr = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.Arrays.create(((int) (3) ), ((java.lang.Object) (2) ))) )) );
		//line 54 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{2, 2, 2}), arr, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testCreate"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (54) )) )}));
	}
	
	
	public void testEach()
	{
		//line 58 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> arr = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{4, 5, 6});
		//line 59 "/shared/core/thx/TestArrays.hx"
		int[] sum = new int[]{0};
		//line 60 "/shared/core/thx/TestArrays.hx"
		thx.Arrays.each(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (arr) )) ), ((haxe.lang.Function) (new thx.TestArrays_testEach_60__Fun(sum)) ));
		//line 63 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(15, sum[0], null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testEach"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (63) )) )}));
	}
	
	
	public void testEachi()
	{
		//line 67 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> arr = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{4, 5, 6});
		//line 68 "/shared/core/thx/TestArrays.hx"
		int[] sum = new int[]{0};
		//line 69 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> indices = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		//line 70 "/shared/core/thx/TestArrays.hx"
		thx.Arrays.eachi(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (arr) )) ), ((haxe.lang.Function) (new thx.TestArrays_testEachi_70__Fun(sum, indices)) ));
		//line 74 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(15, sum[0], null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testEachi"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (74) )) )}));
		//line 75 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{0, 1, 2}), indices, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testEachi"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (75) )) )}));
	}
	
	
	public void testMap()
	{
	}
	
	
	public void testMapi()
	{
		//line 87 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> input = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{4, 5, 6});
		//line 88 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> is = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		//line 89 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> actual = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.Arrays.mapi(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (input) )) ), ((haxe.lang.Function) (new thx.TestArrays_testMapi_89__Fun(is)) ))) )) );
		//line 93 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{8, 10, 12}), actual, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testMapi"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (93) )) )}));
		//line 94 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{0, 1, 2}), is, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testMapi"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (94) )) )}));
	}
	
	
	public void testCrossMulti()
	{
		//line 98 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> r = ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (((haxe.root.Array) (thx.Arrays.crossMulti(((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (((haxe.root.Array) (new haxe.root.Array<haxe.root.Array<java.lang.Object>>(new haxe.root.Array[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3, 4}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{5, 6})})) )) ))) )) );
		//line 99 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{1, 3, 5}), new haxe.root.Array(new java.lang.Object[]{2, 3, 5}), new haxe.root.Array(new java.lang.Object[]{1, 4, 5}), new haxe.root.Array(new java.lang.Object[]{2, 4, 5}), new haxe.root.Array(new java.lang.Object[]{1, 3, 6}), new haxe.root.Array(new java.lang.Object[]{2, 3, 6}), new haxe.root.Array(new java.lang.Object[]{1, 4, 6}), new haxe.root.Array(new java.lang.Object[]{2, 4, 6})}), r, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testCrossMulti"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (99) )) )}));
	}
	
	
	public void testMapField()
	{
		//line 103 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> arr = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (2) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (3) )) )})});
		//line 103 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> test = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (arr.map(((haxe.lang.Function) (( (( thx.TestArrays_testMapField_104__Fun.__hx_current != null )) ? (thx.TestArrays_testMapField_104__Fun.__hx_current) : (thx.TestArrays_testMapField_104__Fun.__hx_current = ((thx.TestArrays_testMapField_104__Fun) (new thx.TestArrays_testMapField_104__Fun()) )) )) ))) )) );
		//line 105 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2, 3}), test, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testMapField"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (105) )) )}));
	}
	
	
	public void testMapFieldOnFunction()
	{
		//line 109 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> test = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<thx._TestArrays.Sample>(new thx._TestArrays.Sample[]{new thx._TestArrays.Sample(((int) (2) )), new thx._TestArrays.Sample(((int) (3) )), new thx._TestArrays.Sample(((int) (4) ))}).map(((haxe.lang.Function) (( (( thx.TestArrays_testMapFieldOnFunction_113__Fun.__hx_current != null )) ? (thx.TestArrays_testMapFieldOnFunction_113__Fun.__hx_current) : (thx.TestArrays_testMapFieldOnFunction_113__Fun.__hx_current = ((thx.TestArrays_testMapFieldOnFunction_113__Fun) (new thx.TestArrays_testMapFieldOnFunction_113__Fun()) )) )) ))) )) );
		//line 114 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{4, 6, 8}), test, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testMapFieldOnFunction"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (114) )) )}));
	}
	
	
	public void testUsingMapField()
	{
		//line 118 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> arr = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (2) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (3) )) )})});
		//line 118 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> test = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (arr.map(((haxe.lang.Function) (( (( thx.TestArrays_testUsingMapField_119__Fun.__hx_current != null )) ? (thx.TestArrays_testUsingMapField_119__Fun.__hx_current) : (thx.TestArrays_testUsingMapField_119__Fun.__hx_current = ((thx.TestArrays_testUsingMapField_119__Fun) (new thx.TestArrays_testUsingMapField_119__Fun()) )) )) ))) )) );
		//line 120 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2, 3}), test, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testUsingMapField"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (120) )) )}));
	}
	
	
	public void testUsingMapFieldiOnFunction()
	{
		//line 126 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<thx._TestArrays.Sample> _e = new haxe.root.Array<thx._TestArrays.Sample>(new thx._TestArrays.Sample[]{new thx._TestArrays.Sample(((int) (2) )), new thx._TestArrays.Sample(((int) (3) )), new thx._TestArrays.Sample(((int) (4) ))});
		//line 124 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{0, 3, 8}), ((haxe.root.Array<java.lang.Object>) ((new thx.TestArrays_testUsingMapFieldiOnFunction_126__Fun(_e)).__hx_invoke1_o(0.0, ( (( thx.TestArrays_testUsingMapFieldiOnFunction_130__Fun.__hx_current != null )) ? (thx.TestArrays_testUsingMapFieldiOnFunction_130__Fun.__hx_current) : (thx.TestArrays_testUsingMapFieldiOnFunction_130__Fun.__hx_current = ((thx.TestArrays_testUsingMapFieldiOnFunction_130__Fun) (new thx.TestArrays_testUsingMapFieldiOnFunction_130__Fun()) )) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testUsingMapFieldiOnFunction"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (124) )) )}));
	}
	
	
	public void testFilterFn()
	{
		//line 135 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 3, 5}), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2, 3, 4, 5, 6}).filter(( (( thx.TestArrays_testFilterFn_135__Fun.__hx_current != null )) ? (thx.TestArrays_testFilterFn_135__Fun.__hx_current) : (thx.TestArrays_testFilterFn_135__Fun.__hx_current = ((thx.TestArrays_testFilterFn_135__Fun) (new thx.TestArrays_testFilterFn_135__Fun()) )) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testFilterFn"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (135) )) )}));
	}
	
	
	public void testFind()
	{
		//line 139 "/shared/core/thx/TestArrays.hx"
		utest.Assert.equals(3, ((java.lang.Object) (thx.Arrays.find(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 3, 5, 7, 9})) )) ), ((haxe.lang.Function) (( (( thx.TestArrays_testFind_139__Fun.__hx_current != null )) ? (thx.TestArrays_testFind_139__Fun.__hx_current) : (thx.TestArrays_testFind_139__Fun.__hx_current = ((thx.TestArrays_testFind_139__Fun) (new thx.TestArrays_testFind_139__Fun()) )) )) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testFind"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (139) )) )}));
	}
	
	
	public void testFindOption()
	{
		//line 143 "/shared/core/thx/TestArrays.hx"
		utest.Assert.equals(3, ((java.lang.Object) (thx.Arrays.findi(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 3, 5, 7, 9})) )) ), ((haxe.lang.Function) (( (( thx.TestArrays_testFindOption_143__Fun.__hx_current != null )) ? (thx.TestArrays_testFindOption_143__Fun.__hx_current) : (thx.TestArrays_testFindOption_143__Fun.__hx_current = ((thx.TestArrays_testFindOption_143__Fun) (new thx.TestArrays_testFindOption_143__Fun()) )) )) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testFindOption"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (143) )) )}));
	}
	
	
	public void testFindLast()
	{
		//line 147 "/shared/core/thx/TestArrays.hx"
		utest.Assert.equals(9, ((java.lang.Object) (thx.Arrays.findLast(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 3, 5, 7, 9})) )) ), ((haxe.lang.Function) (( (( thx.TestArrays_testFindLast_147__Fun.__hx_current != null )) ? (thx.TestArrays_testFindLast_147__Fun.__hx_current) : (thx.TestArrays_testFindLast_147__Fun.__hx_current = ((thx.TestArrays_testFindLast_147__Fun) (new thx.TestArrays_testFindLast_147__Fun()) )) )) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testFindLast"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (147) )) )}));
	}
	
	
	public void testFindFn()
	{
		//line 151 "/shared/core/thx/TestArrays.hx"
		utest.Assert.equals(3, ((java.lang.Object) (thx.Arrays.find(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 3, 5, 7, 9})) )) ), ((haxe.lang.Function) (( (( thx.TestArrays_testFindFn_151__Fun.__hx_current != null )) ? (thx.TestArrays_testFindFn_151__Fun.__hx_current) : (thx.TestArrays_testFindFn_151__Fun.__hx_current = ((thx.TestArrays_testFindFn_151__Fun) (new thx.TestArrays_testFindFn_151__Fun()) )) )) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testFindFn"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (151) )) )}));
	}
	
	
	public void testFindFnLast()
	{
		//line 155 "/shared/core/thx/TestArrays.hx"
		utest.Assert.equals(9, ((java.lang.Object) (thx.Arrays.findLast(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 3, 5, 7, 9})) )) ), ((haxe.lang.Function) (( (( thx.TestArrays_testFindFnLast_155__Fun.__hx_current != null )) ? (thx.TestArrays_testFindFnLast_155__Fun.__hx_current) : (thx.TestArrays_testFindFnLast_155__Fun.__hx_current = ((thx.TestArrays_testFindFnLast_155__Fun) (new thx.TestArrays_testFindFnLast_155__Fun()) )) )) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testFindFnLast"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (155) )) )}));
	}
	
	
	public void testIntersperse()
	{
		//line 159 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2, 3, 2, 5}), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.Arrays.intersperse(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 3, 5})) )) ), ((java.lang.Object) (2) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testIntersperse"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (159) )) )}));
		//line 160 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1}), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.Arrays.intersperse(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1})) )) ), ((java.lang.Object) (2) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testIntersperse"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (160) )) )}));
		//line 161 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{}), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.Arrays.intersperse(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{})) )) ), ((java.lang.Object) (2) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testIntersperse"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (161) )) )}));
	}
	
	
	public void testFn()
	{
		//line 165 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{2, 4, 8}), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2, 4}).map(((haxe.lang.Function) (( (( thx.TestArrays_testFn_165__Fun.__hx_current != null )) ? (thx.TestArrays_testFn_165__Fun.__hx_current) : (thx.TestArrays_testFn_165__Fun.__hx_current = ((thx.TestArrays_testFn_165__Fun) (new thx.TestArrays_testFn_165__Fun()) )) )) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testFn"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (165) )) )}));
	}
	
	
	public void testMinFloats()
	{
		//line 169 "/shared/core/thx/TestArrays.hx"
		utest.Assert.floatEquals(0.5, ((double) (haxe.lang.Runtime.toDouble(thx.ArrayFloats.min(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (1.5) ), ((java.lang.Object) (0.5) ), ((java.lang.Object) (1.0) )})))) ), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testMinFloats"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (169) )) )}));
	}
	
	
	public void testMinInts()
	{
		//line 173 "/shared/core/thx/TestArrays.hx"
		utest.Assert.equals(1, thx.ArrayInts.min(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{2, 5, 1})), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testMinInts"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (173) )) )}));
	}
	
	
	public void testMaxFloats()
	{
		//line 177 "/shared/core/thx/TestArrays.hx"
		utest.Assert.floatEquals(1.5, ((double) (haxe.lang.Runtime.toDouble(thx.ArrayFloats.max(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (1.5) ), ((java.lang.Object) (0.5) ), ((java.lang.Object) (1.0) )})))) ), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testMaxFloats"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (177) )) )}));
	}
	
	
	public void testMaxInts()
	{
		//line 181 "/shared/core/thx/TestArrays.hx"
		utest.Assert.equals(5, thx.ArrayInts.max(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{2, 5, 1})), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testMaxInts"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (181) )) )}));
	}
	
	
	public void testAverageFloats()
	{
		//line 185 "/shared/core/thx/TestArrays.hx"
		utest.Assert.floatEquals(1.0, thx.ArrayFloats.average(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (2.5) ), ((java.lang.Object) (0.5) ), ((java.lang.Object) (0.0) )})), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testAverageFloats"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (185) )) )}));
	}
	
	
	public void testAverageInts()
	{
		//line 189 "/shared/core/thx/TestArrays.hx"
		utest.Assert.equals(3.0, thx.ArrayInts.average(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{2, 6, 1})), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testAverageInts"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (189) )) )}));
	}
	
	
	public void testMinString()
	{
		//line 193 "/shared/core/thx/TestArrays.hx"
		utest.Assert.equals("A", thx.ArrayStrings.min(new haxe.root.Array<java.lang.String>(new java.lang.String[]{"B", "C", "A"})), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testMinString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (193) )) )}));
	}
	
	
	public void testMaxStrings()
	{
		//line 197 "/shared/core/thx/TestArrays.hx"
		utest.Assert.equals("C", thx.ArrayStrings.max(new haxe.root.Array<java.lang.String>(new java.lang.String[]{"B", "C", "A"})), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testMaxStrings"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (197) )) )}));
	}
	
	
	public void testCompactFloats()
	{
		//line 201 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1.5, 0.5, 1.0}), thx.ArrayFloats.compact(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (java.lang.Double.NaN) ), ((java.lang.Object) (1.5) ), ((java.lang.Object) (null) ), ((java.lang.Object) (0.5) ), ((java.lang.Object) (1.0) )})), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testCompactFloats"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (201) )) )}));
	}
	
	
	public void testCompactStrings()
	{
		//line 205 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{"B", "C", "A"}), thx.ArrayStrings.compact(new haxe.root.Array<java.lang.String>(new java.lang.String[]{"B", "", "C", null, "A", ""})), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testCompactStrings"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (205) )) )}));
	}
	
	
	public void testFilterNullInt()
	{
		//line 209 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 0, 2}), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.Arrays.filterNull(((haxe.root.Array<java.lang.Object>) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{null, 1, null, 0, 2})) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testFilterNullInt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (209) )) )}));
	}
	
	
	public void testOrder()
	{
		//line 213 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> arr = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{2, 3, 1});
		//line 214 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2, 3}), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.Arrays.order(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (arr) )) ), ((haxe.lang.Function) (( (( thx.TestArrays_testOrder_214__Fun.__hx_current != null )) ? (thx.TestArrays_testOrder_214__Fun.__hx_current) : (thx.TestArrays_testOrder_214__Fun.__hx_current = ((thx.TestArrays_testOrder_214__Fun) (new thx.TestArrays_testOrder_214__Fun()) )) )) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testOrder"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (214) )) )}));
		//line 215 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{2, 3, 1}), arr, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testOrder"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (215) )) )}));
	}
	
	
	public void testOrderFn()
	{
		//line 219 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> arr = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{2, 3, 1});
		//line 220 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> _e = arr;
		//line 220 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2, 3}), ((haxe.root.Array<java.lang.Object>) ((new thx.TestArrays_testOrderFn_220__Fun(_e)).__hx_invoke1_o(0.0, ( (( thx.TestArrays_testOrderFn_220__Fun_0.__hx_current != null )) ? (thx.TestArrays_testOrderFn_220__Fun_0.__hx_current) : (thx.TestArrays_testOrderFn_220__Fun_0.__hx_current = ((thx.TestArrays_testOrderFn_220__Fun_0) (new thx.TestArrays_testOrderFn_220__Fun_0()) )) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testOrderFn"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (220) )) )}));
		//line 221 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{2, 3, 1}), arr, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testOrderFn"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (221) )) )}));
	}
	
	
	public void testOrderFnObjectOfInt()
	{
		//line 225 "/shared/core/thx/TestArrays.hx"
		java.lang.Object obj1 = new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"key"}, new double[]{((double) (((double) (1) )) )});
		//line 226 "/shared/core/thx/TestArrays.hx"
		java.lang.Object obj2 = new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"key"}, new double[]{((double) (((double) (2) )) )});
		//line 227 "/shared/core/thx/TestArrays.hx"
		java.lang.Object obj3 = new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"key"}, new double[]{((double) (((double) (3) )) )});
		//line 228 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> arr = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{obj2, obj3, obj1});
		//line 229 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> _e = arr;
		//line 229 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{obj1, obj2, obj3}), ((haxe.root.Array<java.lang.Object>) ((new thx.TestArrays_testOrderFnObjectOfInt_229__Fun(_e)).__hx_invoke1_o(0.0, ( (( thx.TestArrays_testOrderFnObjectOfInt_229__Fun_0.__hx_current != null )) ? (thx.TestArrays_testOrderFnObjectOfInt_229__Fun_0.__hx_current) : (thx.TestArrays_testOrderFnObjectOfInt_229__Fun_0.__hx_current = ((thx.TestArrays_testOrderFnObjectOfInt_229__Fun_0) (new thx.TestArrays_testOrderFnObjectOfInt_229__Fun_0()) )) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testOrderFnObjectOfInt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (229) )) )}));
		//line 230 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{obj2, obj3, obj1}), arr, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testOrderFnObjectOfInt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (230) )) )}));
	}
	
	
	public void testOrderFnObjectOfFloat()
	{
		//line 234 "/shared/core/thx/TestArrays.hx"
		java.lang.Object obj1 = new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"key"}, new double[]{((double) (1.0) )});
		//line 235 "/shared/core/thx/TestArrays.hx"
		java.lang.Object obj2 = new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"key"}, new double[]{((double) (2.0) )});
		//line 236 "/shared/core/thx/TestArrays.hx"
		java.lang.Object obj3 = new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"key"}, new double[]{((double) (3.0) )});
		//line 237 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> arr = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{obj2, obj3, obj1});
		//line 238 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> _e = arr;
		//line 238 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{obj1, obj2, obj3}), ((haxe.root.Array<java.lang.Object>) ((new thx.TestArrays_testOrderFnObjectOfFloat_238__Fun(_e)).__hx_invoke1_o(0.0, ( (( thx.TestArrays_testOrderFnObjectOfFloat_238__Fun_0.__hx_current != null )) ? (thx.TestArrays_testOrderFnObjectOfFloat_238__Fun_0.__hx_current) : (thx.TestArrays_testOrderFnObjectOfFloat_238__Fun_0.__hx_current = ((thx.TestArrays_testOrderFnObjectOfFloat_238__Fun_0) (new thx.TestArrays_testOrderFnObjectOfFloat_238__Fun_0()) )) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testOrderFnObjectOfFloat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (238) )) )}));
		//line 239 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{obj2, obj3, obj1}), arr, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testOrderFnObjectOfFloat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (239) )) )}));
	}
	
	
	public void testSortFn()
	{
		//line 244 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> arr = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{2, 3, 1});
		//line 245 "/shared/core/thx/TestArrays.hx"
		arr.sort(( (( thx.TestArrays_testSortFn_245__Fun.__hx_current != null )) ? (thx.TestArrays_testSortFn_245__Fun.__hx_current) : (thx.TestArrays_testSortFn_245__Fun.__hx_current = ((thx.TestArrays_testSortFn_245__Fun) (new thx.TestArrays_testSortFn_245__Fun()) )) ));
		//line 246 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2, 3}), arr, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testSortFn"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (246) )) )}));
	}
	
	
	public void testContains()
	{
		//line 251 "/shared/core/thx/TestArrays.hx"
		utest.Assert.isTrue(((boolean) (thx.Arrays.contains(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2, 3})) )) ), ((java.lang.Object) (2) ), ((haxe.lang.Function) (null) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testContains"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (251) )) )}));
		//line 252 "/shared/core/thx/TestArrays.hx"
		utest.Assert.isFalse(((boolean) (thx.Arrays.contains(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2, 3})) )) ), ((java.lang.Object) (4) ), ((haxe.lang.Function) (null) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testContains"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (252) )) )}));
	}
	
	
	public void testContainsAll()
	{
		//line 256 "/shared/core/thx/TestArrays.hx"
		utest.Assert.isTrue(((boolean) (thx.Arrays.containsAll(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2, 3})) )) ), ((java.lang.Object) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3, 1, 2})) ), ((haxe.lang.Function) (null) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testContainsAll"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (256) )) )}));
		//line 257 "/shared/core/thx/TestArrays.hx"
		utest.Assert.isFalse(((boolean) (thx.Arrays.containsAll(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2, 3})) )) ), ((java.lang.Object) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3, 1, 2, 4})) ), ((haxe.lang.Function) (null) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testContainsAll"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (257) )) )}));
	}
	
	
	public void testContainsAny()
	{
		//line 261 "/shared/core/thx/TestArrays.hx"
		utest.Assert.isTrue(((boolean) (thx.Arrays.containsAny(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2, 3})) )) ), ((java.lang.Object) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{2, 3, 4})) ), ((haxe.lang.Function) (null) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testContainsAny"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (261) )) )}));
		//line 262 "/shared/core/thx/TestArrays.hx"
		utest.Assert.isFalse(((boolean) (thx.Arrays.containsAny(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2, 3})) )) ), ((java.lang.Object) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{4, 5, 6})) ), ((haxe.lang.Function) (null) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testContainsAny"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (262) )) )}));
	}
	
	
	public void testCount()
	{
		//line 266 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> arr = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{2, 3, 2, 1, 4, 2, 3});
		//line 266 "/shared/core/thx/TestArrays.hx"
		haxe.ds.IntMap<java.lang.Object> map = thx.Arrays.count_Int(arr);
		//line 268 "/shared/core/thx/TestArrays.hx"
		utest.Assert.equals(3, ((java.lang.Object) (map.get(((int) (2) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testCount"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (268) )) )}));
		//line 269 "/shared/core/thx/TestArrays.hx"
		utest.Assert.equals(2, ((java.lang.Object) (map.get(((int) (3) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testCount"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (269) )) )}));
		//line 270 "/shared/core/thx/TestArrays.hx"
		utest.Assert.equals(1, ((java.lang.Object) (map.get(((int) (1) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testCount"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (270) )) )}));
		//line 271 "/shared/core/thx/TestArrays.hx"
		utest.Assert.equals(1, ((java.lang.Object) (map.get(((int) (4) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testCount"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (271) )) )}));
	}
	
	
	public void testGroupBy()
	{
		//line 275 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> arr = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (2.1) ), ((java.lang.Object) (3.5) ), ((java.lang.Object) (2.0) ), ((java.lang.Object) (1.4) ), ((java.lang.Object) (2.7) ), ((java.lang.Object) (3.0) )});
		//line 275 "/shared/core/thx/TestArrays.hx"
		haxe.ds.IntMap<haxe.root.Array<java.lang.Object>> map = thx.Arrays.groupBy_Int_Float(arr, ( (( thx.TestArrays_testGroupBy_276__Fun.__hx_current != null )) ? (thx.TestArrays_testGroupBy_276__Fun.__hx_current) : (thx.TestArrays_testGroupBy_276__Fun.__hx_current = ((thx.TestArrays_testGroupBy_276__Fun) (new thx.TestArrays_testGroupBy_276__Fun()) )) ));
		//line 277 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{2.1, 2.0, 2.7}), ((haxe.root.Array<java.lang.Object>) (map.get(((int) (2) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testGroupBy"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (277) )) )}));
		//line 278 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{3.5, 3.0}), ((haxe.root.Array<java.lang.Object>) (map.get(((int) (3) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testGroupBy"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (278) )) )}));
		//line 279 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1.4}), ((haxe.root.Array<java.lang.Object>) (map.get(((int) (1) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testGroupBy"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (279) )) )}));
	}
	
	
	public void testGroupByArray()
	{
		//line 283 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> arr = new haxe.root.Array<haxe.root.Array<java.lang.Object>>(new haxe.root.Array[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0, 1}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0, 2}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 1})});
		//line 283 "/shared/core/thx/TestArrays.hx"
		haxe.ds.IntMap<haxe.root.Array<haxe.root.Array<java.lang.Object>>> map = thx.Arrays.groupBy_Int_Array_Int(arr, ( (( thx.TestArrays_testGroupByArray_284__Fun.__hx_current != null )) ? (thx.TestArrays_testGroupByArray_284__Fun.__hx_current) : (thx.TestArrays_testGroupByArray_284__Fun.__hx_current = ((thx.TestArrays_testGroupByArray_284__Fun) (new thx.TestArrays_testGroupByArray_284__Fun()) )) ));
		//line 285 "/shared/core/thx/TestArrays.hx"
		haxe.ds.IntMap<haxe.root.Array<haxe.root.Array<java.lang.Object>>> _g = new haxe.ds.IntMap<haxe.root.Array<haxe.root.Array<java.lang.Object>>>();
		//line 285 "/shared/core/thx/TestArrays.hx"
		_g.set(((int) (0) ), ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (new haxe.root.Array<haxe.root.Array<java.lang.Object>>(new haxe.root.Array[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0, 1}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0, 2})})) ));
		//line 285 "/shared/core/thx/TestArrays.hx"
		_g.set(((int) (1) ), ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (new haxe.root.Array<haxe.root.Array<java.lang.Object>>(new haxe.root.Array[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 1})})) ));
		//line 285 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(_g, map, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testGroupByArray"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (285) )) )}));
	}
	
	
	public void testGroupByInstance()
	{
		//line 292 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<thx._TestArrays.Sample> arr = new haxe.root.Array<thx._TestArrays.Sample>(new thx._TestArrays.Sample[]{new thx._TestArrays.Sample(((int) (1) )), new thx._TestArrays.Sample(((int) (1) )), new thx._TestArrays.Sample(((int) (2) ))});
		//line 292 "/shared/core/thx/TestArrays.hx"
		haxe.ds.IntMap<haxe.root.Array<thx._TestArrays.Sample>> map = thx.Arrays.groupBy_Int_thx__TestArrays_Sample(arr, ( (( thx.TestArrays_testGroupByInstance_293__Fun.__hx_current != null )) ? (thx.TestArrays_testGroupByInstance_293__Fun.__hx_current) : (thx.TestArrays_testGroupByInstance_293__Fun.__hx_current = ((thx.TestArrays_testGroupByInstance_293__Fun) (new thx.TestArrays_testGroupByInstance_293__Fun()) )) ));
		//line 294 "/shared/core/thx/TestArrays.hx"
		haxe.ds.IntMap<haxe.root.Array<thx._TestArrays.Sample>> _g = new haxe.ds.IntMap<haxe.root.Array<thx._TestArrays.Sample>>();
		//line 294 "/shared/core/thx/TestArrays.hx"
		_g.set(((int) (1) ), ((haxe.root.Array<thx._TestArrays.Sample>) (new haxe.root.Array<thx._TestArrays.Sample>(new thx._TestArrays.Sample[]{new thx._TestArrays.Sample(((int) (1) )), new thx._TestArrays.Sample(((int) (1) ))})) ));
		//line 294 "/shared/core/thx/TestArrays.hx"
		_g.set(((int) (2) ), ((haxe.root.Array<thx._TestArrays.Sample>) (new haxe.root.Array<thx._TestArrays.Sample>(new thx._TestArrays.Sample[]{new thx._TestArrays.Sample(((int) (2) ))})) ));
		//line 294 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(_g, map, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testGroupByInstance"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (294) )) )}));
	}
	
	
	public void testGroupByAnonymous()
	{
		//line 302 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> panels = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"level"}, new double[]{((double) (((double) (1) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"level"}, new double[]{((double) (((double) (1) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"level"}, new double[]{((double) (((double) (2) )) )})});
		//line 303 "/shared/core/thx/TestArrays.hx"
		haxe.ds.IntMap<haxe.root.Array<java.lang.Object>> map = new haxe.ds.IntMap<haxe.root.Array<java.lang.Object>>();
		//line 304 "/shared/core/thx/TestArrays.hx"
		haxe.ds.IntMap<haxe.root.Array<java.lang.Object>> results = ((haxe.ds.IntMap<haxe.root.Array<java.lang.Object>>) (thx.Arrays.groupByAppend(((haxe.root.Array<java.lang.Object>) (panels) ), ((haxe.lang.Function) (( (( thx.TestArrays_testGroupByAnonymous_304__Fun.__hx_current != null )) ? (thx.TestArrays_testGroupByAnonymous_304__Fun.__hx_current) : (thx.TestArrays_testGroupByAnonymous_304__Fun.__hx_current = ((thx.TestArrays_testGroupByAnonymous_304__Fun) (new thx.TestArrays_testGroupByAnonymous_304__Fun()) )) )) ), ((haxe.IMap<java.lang.Object, haxe.root.Array<java.lang.Object>>) (((haxe.IMap) (map) )) ))) );
		//line 305 "/shared/core/thx/TestArrays.hx"
		haxe.ds.IntMap<haxe.root.Array<java.lang.Object>> _g = new haxe.ds.IntMap<haxe.root.Array<java.lang.Object>>();
		//line 305 "/shared/core/thx/TestArrays.hx"
		_g.set(((int) (1) ), ((haxe.root.Array<java.lang.Object>) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"level"}, new double[]{((double) (((double) (1) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"level"}, new double[]{((double) (((double) (1) )) )})})) ));
		//line 305 "/shared/core/thx/TestArrays.hx"
		_g.set(((int) (2) ), ((haxe.root.Array<java.lang.Object>) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"level"}, new double[]{((double) (((double) (2) )) )})})) ));
		//line 305 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(_g, results, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testGroupByAnonymous"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (305) )) )}));
	}
	
	
	public void testMapRight()
	{
		//line 313 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{6, 4, 2}), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.Arrays.mapRight(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2, 3})) )) ), ((haxe.lang.Function) (( (( thx.TestArrays_testMapRight_313__Fun.__hx_current != null )) ? (thx.TestArrays_testMapRight_313__Fun.__hx_current) : (thx.TestArrays_testMapRight_313__Fun.__hx_current = ((thx.TestArrays_testMapRight_313__Fun) (new thx.TestArrays_testMapRight_313__Fun()) )) )) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testMapRight"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (313) )) )}));
	}
	
	
	public void testFnRight()
	{
		//line 317 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{6, 4, 2}), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.Arrays.mapRight(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2, 3})) )) ), ((haxe.lang.Function) (( (( thx.TestArrays_testFnRight_317__Fun.__hx_current != null )) ? (thx.TestArrays_testFnRight_317__Fun.__hx_current) : (thx.TestArrays_testFnRight_317__Fun.__hx_current = ((thx.TestArrays_testFnRight_317__Fun) (new thx.TestArrays_testFnRight_317__Fun()) )) )) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testFnRight"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (317) )) )}));
	}
	
	
	public void testReduceRight()
	{
		//line 321 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.String> array = new haxe.root.Array<java.lang.String>(new java.lang.String[]{"a", "b", "c"});
		//line 321 "/shared/core/thx/TestArrays.hx"
		java.lang.String initial = "";
		//line 321 "/shared/core/thx/TestArrays.hx"
		int i = array.length;
		//line 321 "/shared/core/thx/TestArrays.hx"
		while ((  -- i >= 0 ))
		{
			//line 321 "/shared/core/thx/TestArrays.hx"
			initial += haxe.lang.Runtime.toString(((haxe.root.Array<java.lang.String>) (array) ).__get(i)).toUpperCase();
		}
		
		//line 321 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same("CBA", initial, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testReduceRight"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (321) )) )}));
	}
	
	
	public void testRotate()
	{
		//line 325 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"a0", "a1", "a2"}), new haxe.root.Array(new java.lang.Object[]{"b0", "b1", "b2"})}), ((haxe.root.Array<haxe.root.Array<java.lang.String>>) (thx.Arrays.rotate(((haxe.root.Array<haxe.root.Array<java.lang.String>>) (new haxe.root.Array<haxe.root.Array<java.lang.String>>(new haxe.root.Array[]{new haxe.root.Array<java.lang.String>(new java.lang.String[]{"a0", "b0"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"a1", "b1"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"a2", "b2"})})) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testRotate"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (325) )) )}));
	}
	
	
	public void testDistinct()
	{
		//line 333 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{}), ((haxe.root.Array<java.lang.Object>) (thx.Arrays.distinct(((haxe.root.Array<java.lang.Object>) (new haxe.root.Array(new java.lang.Object[]{})) ), ((haxe.lang.Function) (null) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testDistinct"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (333) )) )}));
		//line 334 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1}), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.Arrays.distinct(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1})) )) ), ((haxe.lang.Function) (null) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testDistinct"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (334) )) )}));
		//line 335 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{"one"}), ((haxe.root.Array<java.lang.String>) (thx.Arrays.distinct(((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{"one"})) ), ((haxe.lang.Function) (null) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testDistinct"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (335) )) )}));
		//line 336 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1}), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.Arrays.distinct(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 1})) )) ), ((haxe.lang.Function) (null) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testDistinct"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (336) )) )}));
		//line 337 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2}), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.Arrays.distinct(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2})) )) ), ((haxe.lang.Function) (null) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testDistinct"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (337) )) )}));
		//line 338 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{"one", "two"}), ((haxe.root.Array<java.lang.String>) (thx.Arrays.distinct(((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{"one", "two"})) ), ((haxe.lang.Function) (null) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testDistinct"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (338) )) )}));
		//line 339 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2, 3, 4, 5, 6, 7, 8}), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.Arrays.distinct(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8})) )) ), ((haxe.lang.Function) (null) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testDistinct"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (339) )) )}));
		//line 340 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{8, 1, 2, 7, 3, 4, 5, 6}), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.Arrays.distinct(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{8, 8, 1, 2, 7, 2, 3, 4, 5, 1, 5, 6, 7, 8, 2, 8})) )) ), ((haxe.lang.Function) (null) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testDistinct"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (340) )) )}));
		//line 341 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{"one", "two", "three"}), ((haxe.root.Array<java.lang.String>) (thx.Arrays.distinct(((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{"one", "two", "one", "two", "three", "one", "two"})) ), ((haxe.lang.Function) (null) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testDistinct"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (341) )) )}));
		//line 342 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{false, true}), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.Arrays.distinct(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{false, false, true, false, true, true})) )) ), ((haxe.lang.Function) (null) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testDistinct"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (342) )) )}));
		//line 344 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> array = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{new haxe.lang.DynamicObject(new java.lang.String[]{"key"}, new java.lang.Object[]{"one"}, new java.lang.String[]{}, new double[]{}), new haxe.lang.DynamicObject(new java.lang.String[]{"key"}, new java.lang.Object[]{"two"}, new java.lang.String[]{}, new double[]{}), new haxe.lang.DynamicObject(new java.lang.String[]{"key"}, new java.lang.Object[]{"one"}, new java.lang.String[]{}, new double[]{}), new haxe.lang.DynamicObject(new java.lang.String[]{"key"}, new java.lang.Object[]{"three"}, new java.lang.String[]{}, new double[]{}), new haxe.lang.DynamicObject(new java.lang.String[]{"key"}, new java.lang.Object[]{"two"}, new java.lang.String[]{}, new double[]{})});
		//line 345 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> result = ((haxe.root.Array<java.lang.Object>) (thx.Arrays.distinct(((haxe.root.Array<java.lang.Object>) (array) ), ((haxe.lang.Function) (( (( thx.TestArrays_testDistinct_345__Fun.__hx_current != null )) ? (thx.TestArrays_testDistinct_345__Fun.__hx_current) : (thx.TestArrays_testDistinct_345__Fun.__hx_current = ((thx.TestArrays_testDistinct_345__Fun) (new thx.TestArrays_testDistinct_345__Fun()) )) )) ))) );
		//line 348 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.lang.DynamicObject(new java.lang.String[]{"key"}, new java.lang.Object[]{"one"}, new java.lang.String[]{}, new double[]{}), new haxe.lang.DynamicObject(new java.lang.String[]{"key"}, new java.lang.Object[]{"two"}, new java.lang.String[]{}, new double[]{}), new haxe.lang.DynamicObject(new java.lang.String[]{"key"}, new java.lang.Object[]{"three"}, new java.lang.String[]{}, new double[]{})}), result, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testDistinct"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (348) )) )}));
	}
	
	
	public void testSplit()
	{
		//line 352 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> arr = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 0});
		//line 353 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 0})}), ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (((haxe.root.Array) (thx.Arrays.split(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (arr) )) ), ((int) (1) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testSplit"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (353) )) )}));
		//line 354 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{1, 2, 3, 4, 5}), new haxe.root.Array(new java.lang.Object[]{6, 7, 8, 9, 0})}), ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (((haxe.root.Array) (thx.Arrays.split(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (arr) )) ), ((int) (2) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testSplit"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (354) )) )}));
		//line 355 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{1, 2, 3, 4}), new haxe.root.Array(new java.lang.Object[]{5, 6, 7, 8}), new haxe.root.Array(new java.lang.Object[]{9, 0})}), ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (((haxe.root.Array) (thx.Arrays.split(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (arr) )) ), ((int) (3) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testSplit"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (355) )) )}));
		//line 356 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{1, 2, 3}), new haxe.root.Array(new java.lang.Object[]{4, 5, 6}), new haxe.root.Array(new java.lang.Object[]{7, 8, 9}), new haxe.root.Array(new java.lang.Object[]{0})}), ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (((haxe.root.Array) (thx.Arrays.split(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (arr) )) ), ((int) (4) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testSplit"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (356) )) )}));
		//line 357 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{1}), new haxe.root.Array(new java.lang.Object[]{2}), new haxe.root.Array(new java.lang.Object[]{3}), new haxe.root.Array(new java.lang.Object[]{4}), new haxe.root.Array(new java.lang.Object[]{5}), new haxe.root.Array(new java.lang.Object[]{6}), new haxe.root.Array(new java.lang.Object[]{7}), new haxe.root.Array(new java.lang.Object[]{8}), new haxe.root.Array(new java.lang.Object[]{9}), new haxe.root.Array(new java.lang.Object[]{0})}), ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (((haxe.root.Array) (thx.Arrays.split(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (arr) )) ), ((int) (10) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testSplit"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (357) )) )}));
		//line 358 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{1}), new haxe.root.Array(new java.lang.Object[]{2}), new haxe.root.Array(new java.lang.Object[]{3}), new haxe.root.Array(new java.lang.Object[]{4}), new haxe.root.Array(new java.lang.Object[]{5}), new haxe.root.Array(new java.lang.Object[]{6}), new haxe.root.Array(new java.lang.Object[]{7}), new haxe.root.Array(new java.lang.Object[]{8}), new haxe.root.Array(new java.lang.Object[]{9}), new haxe.root.Array(new java.lang.Object[]{0})}), ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (((haxe.root.Array) (thx.Arrays.split(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (arr) )) ), ((int) (20) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testSplit"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (358) )) )}));
	}
	
	
	public void testSplitBy()
	{
		//line 362 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> arr = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 0});
		//line 363 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{1}), new haxe.root.Array(new java.lang.Object[]{2}), new haxe.root.Array(new java.lang.Object[]{3}), new haxe.root.Array(new java.lang.Object[]{4}), new haxe.root.Array(new java.lang.Object[]{5}), new haxe.root.Array(new java.lang.Object[]{6}), new haxe.root.Array(new java.lang.Object[]{7}), new haxe.root.Array(new java.lang.Object[]{8}), new haxe.root.Array(new java.lang.Object[]{9}), new haxe.root.Array(new java.lang.Object[]{0})}), ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (((haxe.root.Array) (thx.Arrays.splitBy(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (arr) )) ), ((int) (1) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testSplitBy"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (363) )) )}));
		//line 364 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{1, 2}), new haxe.root.Array(new java.lang.Object[]{3, 4}), new haxe.root.Array(new java.lang.Object[]{5, 6}), new haxe.root.Array(new java.lang.Object[]{7, 8}), new haxe.root.Array(new java.lang.Object[]{9, 0})}), ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (((haxe.root.Array) (thx.Arrays.splitBy(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (arr) )) ), ((int) (2) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testSplitBy"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (364) )) )}));
		//line 365 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{1, 2, 3}), new haxe.root.Array(new java.lang.Object[]{4, 5, 6}), new haxe.root.Array(new java.lang.Object[]{7, 8, 9}), new haxe.root.Array(new java.lang.Object[]{0})}), ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (((haxe.root.Array) (thx.Arrays.splitBy(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (arr) )) ), ((int) (3) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testSplitBy"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (365) )) )}));
		//line 366 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{1, 2, 3, 4}), new haxe.root.Array(new java.lang.Object[]{5, 6, 7, 8}), new haxe.root.Array(new java.lang.Object[]{9, 0})}), ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (((haxe.root.Array) (thx.Arrays.splitBy(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (arr) )) ), ((int) (4) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testSplitBy"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (366) )) )}));
		//line 367 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 0})}), ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (((haxe.root.Array) (thx.Arrays.splitBy(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (arr) )) ), ((int) (10) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testSplitBy"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (367) )) )}));
		//line 368 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 0})}), ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (((haxe.root.Array) (thx.Arrays.splitBy(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (arr) )) ), ((int) (20) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testSplitBy"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (368) )) )}));
	}
	
	
	public void testSplitByPad()
	{
		//line 372 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> arr = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 0});
		//line 373 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{1}), new haxe.root.Array(new java.lang.Object[]{2}), new haxe.root.Array(new java.lang.Object[]{3}), new haxe.root.Array(new java.lang.Object[]{4}), new haxe.root.Array(new java.lang.Object[]{5}), new haxe.root.Array(new java.lang.Object[]{6}), new haxe.root.Array(new java.lang.Object[]{7}), new haxe.root.Array(new java.lang.Object[]{8}), new haxe.root.Array(new java.lang.Object[]{9}), new haxe.root.Array(new java.lang.Object[]{0})}), ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (((haxe.root.Array) (thx.Arrays.splitByPad(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (arr) )) ), ((int) (1) ), ((java.lang.Object) (0) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testSplitByPad"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (373) )) )}));
		//line 374 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{1, 2}), new haxe.root.Array(new java.lang.Object[]{3, 4}), new haxe.root.Array(new java.lang.Object[]{5, 6}), new haxe.root.Array(new java.lang.Object[]{7, 8}), new haxe.root.Array(new java.lang.Object[]{9, 0})}), ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (((haxe.root.Array) (thx.Arrays.splitByPad(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (arr) )) ), ((int) (2) ), ((java.lang.Object) (0) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testSplitByPad"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (374) )) )}));
		//line 375 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{1, 2, 3}), new haxe.root.Array(new java.lang.Object[]{4, 5, 6}), new haxe.root.Array(new java.lang.Object[]{7, 8, 9}), new haxe.root.Array(new java.lang.Object[]{0, 0, 0})}), ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (((haxe.root.Array) (thx.Arrays.splitByPad(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (arr) )) ), ((int) (3) ), ((java.lang.Object) (0) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testSplitByPad"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (375) )) )}));
		//line 376 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{1, 2, 3, 4}), new haxe.root.Array(new java.lang.Object[]{5, 6, 7, 8}), new haxe.root.Array(new java.lang.Object[]{9, 0, 0, 0})}), ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (((haxe.root.Array) (thx.Arrays.splitByPad(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (arr) )) ), ((int) (4) ), ((java.lang.Object) (0) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testSplitByPad"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (376) )) )}));
		//line 377 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 0})}), ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (((haxe.root.Array) (thx.Arrays.splitByPad(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (arr) )) ), ((int) (10) ), ((java.lang.Object) (0) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testSplitByPad"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (377) )) )}));
		//line 378 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0})}), ((haxe.root.Array<haxe.root.Array<java.lang.Object>>) (((haxe.root.Array) (thx.Arrays.splitByPad(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (arr) )) ), ((int) (20) ), ((java.lang.Object) (0) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testSplitByPad"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (378) )) )}));
	}
	
	
	public void testTraverseOption()
	{
		//line 382 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> arr = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2, 3, 4, 5});
		//line 383 "/shared/core/thx/TestArrays.hx"
		haxe.lang.Function f = ( (( thx.TestArrays_testTraverseOption_383__Fun.__hx_current != null )) ? (thx.TestArrays_testTraverseOption_383__Fun.__hx_current) : (thx.TestArrays_testTraverseOption_383__Fun.__hx_current = ((thx.TestArrays_testTraverseOption_383__Fun) (new thx.TestArrays_testTraverseOption_383__Fun()) )) );
		//line 385 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(haxe.ds.Option.None, ((haxe.ds.Option) (thx.Arrays.traverseOption(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (arr) )) ), ((haxe.lang.Function) (f) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testTraverseOption"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (385) )) )}));
		//line 386 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(haxe.ds.Option.Some(arr), ((haxe.ds.Option) (thx.Arrays.traverseOption(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (arr) )) ), ((haxe.lang.Function) (( (( thx.TestArrays_testTraverseOption_386__Fun.__hx_current != null )) ? (thx.TestArrays_testTraverseOption_386__Fun.__hx_current) : (thx.TestArrays_testTraverseOption_386__Fun.__hx_current = ((thx.TestArrays_testTraverseOption_386__Fun) (new thx.TestArrays_testTraverseOption_386__Fun()) )) )) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testTraverseOption"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (386) )) )}));
	}
	
	
	public void testTraverseValidation()
	{
		//line 390 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> arr = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2, 3, 4, 5});
		//line 391 "/shared/core/thx/TestArrays.hx"
		haxe.lang.Function ff = ( (( thx.TestArrays_testTraverseValidation_391__Fun.__hx_current != null )) ? (thx.TestArrays_testTraverseValidation_391__Fun.__hx_current) : (thx.TestArrays_testTraverseValidation_391__Fun.__hx_current = ((thx.TestArrays_testTraverseValidation_391__Fun) (new thx.TestArrays_testTraverseValidation_391__Fun()) )) );
		//line 392 "/shared/core/thx/TestArrays.hx"
		haxe.lang.Function fs = ( (( thx.TestArrays_testTraverseValidation_392__Fun.__hx_current != null )) ? (thx.TestArrays_testTraverseValidation_392__Fun.__hx_current) : (thx.TestArrays_testTraverseValidation_392__Fun.__hx_current = ((thx.TestArrays_testTraverseValidation_392__Fun) (new thx.TestArrays_testTraverseValidation_392__Fun()) )) );
		//line 394 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(thx.Either.Left(((thx.NonEmptyList) (thx._Nel.Nel_Impl_.nel(haxe.lang.Runtime.toString("oops: 5"), ((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{"oops: 3", "oops: 1"})) ))) )), ((thx.Either) (thx.Arrays.traverseValidation(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (arr) )) ), ((haxe.lang.Function) (ff) ), ((haxe.lang.Function) (thx._Nel.Nel_Impl_.semigroup()) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testTraverseValidation"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (394) )) )}));
		//line 395 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(((thx.Either) (thx.Either.Right(arr)) ), ((thx.Either) (thx.Arrays.traverseValidation(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (arr) )) ), ((haxe.lang.Function) (fs) ), ((haxe.lang.Function) (thx._Nel.Nel_Impl_.semigroup()) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testTraverseValidation"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (395) )) )}));
	}
	
	
	public void testZip5Ap()
	{
		//line 400 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.String> sx = new haxe.root.Array<java.lang.String>(new java.lang.String[]{"a", "b", "c"});
		//line 401 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> ix = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2});
		//line 402 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.String> tx = new haxe.root.Array<java.lang.String>(new java.lang.String[]{"x", "y", "z"});
		//line 403 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> jx = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3, 4});
		//line 404 "/shared/core/thx/TestArrays.hx"
		haxe.root.Array<java.lang.Object> bx = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{true, false, true});
		//line 406 "/shared/core/thx/TestArrays.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{"a1x3true", "b2y4false"}), ((haxe.root.Array<java.lang.String>) (((haxe.root.Array) (thx.Arrays.zip5Ap(((haxe.lang.Function) (( (( thx.TestArrays_testZip5Ap_406__Fun.__hx_current != null )) ? (thx.TestArrays_testZip5Ap_406__Fun.__hx_current) : (thx.TestArrays_testZip5Ap_406__Fun.__hx_current = ((thx.TestArrays_testZip5Ap_406__Fun) (new thx.TestArrays_testZip5Ap_406__Fun()) )) )) ), ((haxe.root.Array<java.lang.String>) (sx) ), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (ix) )) ), ((haxe.root.Array<java.lang.String>) (tx) ), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (jx) )) ), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (bx) )) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestArrays", "TestArrays.hx", "testZip5Ap"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (406) )) )}));
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 14 "/shared/core/thx/TestArrays.hx"
		{
			//line 14 "/shared/core/thx/TestArrays.hx"
			boolean __temp_executeDef1 = true;
			//line 14 "/shared/core/thx/TestArrays.hx"
			switch (field.hashCode())
			{
				case 1917883317:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testZip5Ap")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testZip5Ap")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1454468252:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testApplyIndexes")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testApplyIndexes")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 1960739773:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testTraverseValidation")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testTraverseValidation")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1146852386:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testRank")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testRank")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 1300891065:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testTraverseOption")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testTraverseOption")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1146695560:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testWith")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testWith")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1080483852:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testSplitByPad")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSplitByPad")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 1267440686:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testCreate")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCreate")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 1900556319:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testSplitBy")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSplitBy")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1147240013:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testEach")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testEach")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1191317080:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testSplit")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSplit")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1204701930:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testEachi")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testEachi")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 1003038126:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testDistinct")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testDistinct")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1422473366:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testMap")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testMap")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 1694554253:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testRotate")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testRotate")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1147001281:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testMapi")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testMapi")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 306085988:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testReduceRight")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testReduceRight")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -351172853:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testCrossMulti")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCrossMulti")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1128338110:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testFnRight")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFnRight")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 869989296:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testMapField")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testMapField")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 881073362:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testMapRight")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testMapRight")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1307340121:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testMapFieldOnFunction")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testMapFieldOnFunction")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1439655287:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testGroupByAnonymous")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testGroupByAnonymous")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1511413200:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testUsingMapField")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testUsingMapField")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -116442375:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testGroupByInstance")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testGroupByInstance")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1482695696:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testUsingMapFieldiOnFunction")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testUsingMapFieldiOnFunction")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 990381685:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testGroupByArray")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testGroupByArray")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -6828782:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testFilterFn")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFilterFn")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -99170748:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testGroupBy")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testGroupBy")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1147202197:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testFind")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFind")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1206114403:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testCount")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCount")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -727347776:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testFindOption")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFindOption")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -451471525:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testContainsAny")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testContainsAny")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 34893473:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testFindLast")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFindLast")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -451471600:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testContainsAll")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testContainsAll")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 1345286035:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testFindFn")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFindFn")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 146894033:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testContains")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testContains")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -988056375:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testFindFnLast")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFindFnLast")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 1723140664:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testSortFn")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSortFn")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 1711521670:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testIntersperse")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testIntersperse")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 1518166306:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testOrderFnObjectOfFloat")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testOrderFnObjectOfFloat")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -877170438:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testFn")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFn")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -2107912139:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testOrderFnObjectOfInt")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testOrderFnObjectOfInt")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 485496343:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testMinFloats")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testMinFloats")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1599709244:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testOrderFn")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testOrderFn")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 670986980:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testMinInts")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testMinInts")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1194959396:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testOrder")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testOrder")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -286982231:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testMaxFloats")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testMaxFloats")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -801147170:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testFilterNullInt")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFilterNullInt")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 451188982:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testMaxInts")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testMaxInts")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -821990639:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testCompactStrings")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCompactStrings")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 966824610:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testAverageFloats")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testAverageFloats")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 425104168:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testCompactFloats")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCompactFloats")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 1596626479:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testAverageInts")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testAverageInts")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1421832528:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testMaxStrings")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testMaxStrings")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 865160337:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testMinString")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testMinString")) );
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
			}
			
			//line 14 "/shared/core/thx/TestArrays.hx"
			if (__temp_executeDef1) 
			{
				//line 14 "/shared/core/thx/TestArrays.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 14 "/shared/core/thx/TestArrays.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 14 "/shared/core/thx/TestArrays.hx"
		{
			//line 14 "/shared/core/thx/TestArrays.hx"
			boolean __temp_executeDef1 = true;
			//line 14 "/shared/core/thx/TestArrays.hx"
			switch (field.hashCode())
			{
				case 1917883317:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testZip5Ap")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testZip5Ap();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1454468252:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testApplyIndexes")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testApplyIndexes();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 1960739773:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testTraverseValidation")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testTraverseValidation();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1146852386:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testRank")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testRank();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 1300891065:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testTraverseOption")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testTraverseOption();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1146695560:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testWith")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testWith();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1080483852:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testSplitByPad")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testSplitByPad();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 1267440686:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testCreate")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testCreate();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 1900556319:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testSplitBy")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testSplitBy();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1147240013:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testEach")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testEach();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1191317080:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testSplit")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testSplit();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1204701930:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testEachi")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testEachi();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 1003038126:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testDistinct")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testDistinct();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1422473366:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testMap")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testMap();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 1694554253:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testRotate")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testRotate();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1147001281:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testMapi")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testMapi();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 306085988:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testReduceRight")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testReduceRight();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -351172853:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testCrossMulti")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testCrossMulti();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1128338110:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testFnRight")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testFnRight();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 869989296:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testMapField")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testMapField();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 881073362:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testMapRight")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testMapRight();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1307340121:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testMapFieldOnFunction")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testMapFieldOnFunction();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1439655287:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testGroupByAnonymous")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testGroupByAnonymous();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1511413200:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testUsingMapField")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testUsingMapField();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -116442375:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testGroupByInstance")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testGroupByInstance();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1482695696:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testUsingMapFieldiOnFunction")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testUsingMapFieldiOnFunction();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 990381685:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testGroupByArray")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testGroupByArray();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -6828782:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testFilterFn")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testFilterFn();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -99170748:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testGroupBy")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testGroupBy();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1147202197:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testFind")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testFind();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1206114403:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testCount")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testCount();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -727347776:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testFindOption")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testFindOption();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -451471525:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testContainsAny")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testContainsAny();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 34893473:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testFindLast")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testFindLast();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -451471600:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testContainsAll")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testContainsAll();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 1345286035:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testFindFn")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testFindFn();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 146894033:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testContains")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testContains();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -988056375:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testFindFnLast")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testFindFnLast();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 1723140664:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testSortFn")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testSortFn();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 1711521670:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testIntersperse")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testIntersperse();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 1518166306:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testOrderFnObjectOfFloat")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testOrderFnObjectOfFloat();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -877170438:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testFn")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testFn();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -2107912139:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testOrderFnObjectOfInt")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testOrderFnObjectOfInt();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 485496343:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testMinFloats")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testMinFloats();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1599709244:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testOrderFn")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testOrderFn();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 670986980:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testMinInts")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testMinInts();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1194959396:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testOrder")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testOrder();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -286982231:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testMaxFloats")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testMaxFloats();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -801147170:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testFilterNullInt")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testFilterNullInt();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 451188982:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testMaxInts")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testMaxInts();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -821990639:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testCompactStrings")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testCompactStrings();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 966824610:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testAverageFloats")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testAverageFloats();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 425104168:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testCompactFloats")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testCompactFloats();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 1596626479:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testAverageInts")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testAverageInts();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case -1421832528:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testMaxStrings")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testMaxStrings();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
				case 865160337:
				{
					//line 14 "/shared/core/thx/TestArrays.hx"
					if (field.equals("testMinString")) 
					{
						//line 14 "/shared/core/thx/TestArrays.hx"
						__temp_executeDef1 = false;
						//line 14 "/shared/core/thx/TestArrays.hx"
						this.testMinString();
					}
					
					//line 14 "/shared/core/thx/TestArrays.hx"
					break;
				}
				
				
			}
			
			//line 14 "/shared/core/thx/TestArrays.hx"
			if (__temp_executeDef1) 
			{
				//line 14 "/shared/core/thx/TestArrays.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 14 "/shared/core/thx/TestArrays.hx"
		return null;
	}
	
	
}


