// Generated by Haxe 3.3.0
package thx;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestFloats extends haxe.lang.HxObject
{
	public TestFloats(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestFloats()
	{
		//line 13 "/shared/core/thx/TestFloats.hx"
		thx.TestFloats.__hx_ctor_thx_TestFloats(this);
	}
	
	
	public static void __hx_ctor_thx_TestFloats(thx.TestFloats __temp_me180)
	{
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 12 "/shared/core/thx/TestFloats.hx"
		return new thx.TestFloats(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 12 "/shared/core/thx/TestFloats.hx"
		return new thx.TestFloats();
	}
	
	
	public void testNormalize()
	{
		//line 16 "/shared/core/thx/TestFloats.hx"
		utest.Assert.floatEquals(0.0, 0.0, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testNormalize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (16) )) )}));
		//line 17 "/shared/core/thx/TestFloats.hx"
		utest.Assert.floatEquals(1.0, 1.0, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testNormalize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (17) )) )}));
		//line 18 "/shared/core/thx/TestFloats.hx"
		utest.Assert.floatEquals(0.5, 0.5, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testNormalize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (18) )) )}));
		//line 19 "/shared/core/thx/TestFloats.hx"
		utest.Assert.floatEquals(0.0, ((double) (0) ), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testNormalize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (19) )) )}));
		//line 20 "/shared/core/thx/TestFloats.hx"
		utest.Assert.floatEquals(1.0, ((double) (1) ), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testNormalize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (20) )) )}));
	}
	
	
	public void testClamp()
	{
		//line 24 "/shared/core/thx/TestFloats.hx"
		utest.Assert.floatEquals(((double) (10) ), ((double) (10) ), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testClamp"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (24) )) )}));
		//line 25 "/shared/core/thx/TestFloats.hx"
		utest.Assert.floatEquals(((double) (10) ), ((double) (10) ), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testClamp"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (25) )) )}));
		//line 26 "/shared/core/thx/TestFloats.hx"
		utest.Assert.floatEquals(((double) (50) ), ((double) (50) ), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testClamp"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (26) )) )}));
		//line 27 "/shared/core/thx/TestFloats.hx"
		utest.Assert.floatEquals(((double) (100) ), ((double) (100) ), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testClamp"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (27) )) )}));
		//line 28 "/shared/core/thx/TestFloats.hx"
		utest.Assert.floatEquals(((double) (100) ), ((double) (100) ), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testClamp"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (28) )) )}));
	}
	
	
	public void testClampSym()
	{
		//line 32 "/shared/core/thx/TestFloats.hx"
		double min = ((double) (-10) );
		//line 32 "/shared/core/thx/TestFloats.hx"
		double tmp = 0.0;
		//line 32 "/shared/core/thx/TestFloats.hx"
		tmp = min;
		//line 32 "/shared/core/thx/TestFloats.hx"
		utest.Assert.floatEquals(((double) (-10) ), tmp, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testClampSym"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (32) )) )}));
		//line 33 "/shared/core/thx/TestFloats.hx"
		double min1 = ((double) (-10) );
		//line 33 "/shared/core/thx/TestFloats.hx"
		double tmp1 = 0.0;
		//line 33 "/shared/core/thx/TestFloats.hx"
		tmp1 = ((double) (10) );
		//line 33 "/shared/core/thx/TestFloats.hx"
		utest.Assert.floatEquals(((double) (10) ), tmp1, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testClampSym"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (33) )) )}));
		//line 34 "/shared/core/thx/TestFloats.hx"
		double min2 = ((double) (-10) );
		//line 34 "/shared/core/thx/TestFloats.hx"
		double tmp2 = 0.0;
		//line 34 "/shared/core/thx/TestFloats.hx"
		tmp2 = ((double) (0) );
		//line 34 "/shared/core/thx/TestFloats.hx"
		utest.Assert.floatEquals(((double) (0) ), tmp2, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testClampSym"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (34) )) )}));
	}
	
	
	public void testCompare()
	{
		//line 38 "/shared/core/thx/TestFloats.hx"
		utest.Assert.equals(-1, -1, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (38) )) )}));
		//line 39 "/shared/core/thx/TestFloats.hx"
		utest.Assert.equals(-1, -1, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (39) )) )}));
		//line 40 "/shared/core/thx/TestFloats.hx"
		utest.Assert.equals(-1, -1, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (40) )) )}));
		//line 41 "/shared/core/thx/TestFloats.hx"
		utest.Assert.equals(-1, -1, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (41) )) )}));
		//line 42 "/shared/core/thx/TestFloats.hx"
		double a =  - (java.lang.Math.PI) ;
		//line 42 "/shared/core/thx/TestFloats.hx"
		double b = java.lang.Math.PI;
		//line 42 "/shared/core/thx/TestFloats.hx"
		utest.Assert.equals(-1, ( (( a < b )) ? (-1) : (( (( a > b )) ? (1) : (0) )) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (42) )) )}));
		//line 44 "/shared/core/thx/TestFloats.hx"
		utest.Assert.equals(0, 0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (44) )) )}));
		//line 45 "/shared/core/thx/TestFloats.hx"
		utest.Assert.equals(0, 0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (45) )) )}));
		//line 46 "/shared/core/thx/TestFloats.hx"
		utest.Assert.equals(0, 0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (46) )) )}));
		//line 47 "/shared/core/thx/TestFloats.hx"
		double a1 = java.lang.Math.PI;
		//line 47 "/shared/core/thx/TestFloats.hx"
		double b1 = java.lang.Math.PI;
		//line 47 "/shared/core/thx/TestFloats.hx"
		utest.Assert.equals(0, ( (( a1 < b1 )) ? (-1) : (( (( a1 > b1 )) ? (1) : (0) )) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (47) )) )}));
		//line 49 "/shared/core/thx/TestFloats.hx"
		utest.Assert.equals(1, 1, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (49) )) )}));
		//line 50 "/shared/core/thx/TestFloats.hx"
		utest.Assert.equals(1, 1, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (50) )) )}));
		//line 51 "/shared/core/thx/TestFloats.hx"
		utest.Assert.equals(1, 1, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (51) )) )}));
		//line 52 "/shared/core/thx/TestFloats.hx"
		double a2 = java.lang.Math.PI;
		//line 52 "/shared/core/thx/TestFloats.hx"
		double b2 =  - (java.lang.Math.PI) ;
		//line 52 "/shared/core/thx/TestFloats.hx"
		utest.Assert.equals(1, ( (( a2 < b2 )) ? (-1) : (( (( a2 > b2 )) ? (1) : (0) )) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (52) )) )}));
	}
	
	
	public void testRound()
	{
		//line 57 "/shared/core/thx/TestFloats.hx"
		utest.Assert.floatEquals(123.5, thx.Floats.roundTo(123.456, 1), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (57) )) )}));
		//line 58 "/shared/core/thx/TestFloats.hx"
		utest.Assert.floatEquals(123.46, thx.Floats.roundTo(123.456, 2), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (58) )) )}));
		//line 59 "/shared/core/thx/TestFloats.hx"
		utest.Assert.floatEquals(123.456, thx.Floats.roundTo(123.456, 3), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (59) )) )}));
		//line 60 "/shared/core/thx/TestFloats.hx"
		utest.Assert.floatEquals(123.456, thx.Floats.roundTo(123.456, 4), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (60) )) )}));
		//line 63 "/shared/core/thx/TestFloats.hx"
		utest.Assert.floatEquals(1234567890.1, thx.Floats.roundTo(1234567890.123456, 1), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (63) )) )}));
		//line 64 "/shared/core/thx/TestFloats.hx"
		utest.Assert.floatEquals(1234567890.12, thx.Floats.roundTo(1234567890.123456, 2), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (64) )) )}));
		//line 65 "/shared/core/thx/TestFloats.hx"
		utest.Assert.floatEquals(1234567890.123, thx.Floats.roundTo(1234567890.123456, 3), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (65) )) )}));
		//line 66 "/shared/core/thx/TestFloats.hx"
		utest.Assert.floatEquals(1234567890.1235, thx.Floats.roundTo(1234567890.123456, 4), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testRound"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (66) )) )}));
	}
	
	
	public void testAngleDifference()
	{
		//line 70 "/shared/core/thx/TestFloats.hx"
		haxe.root.Array<java.lang.Object> tests = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "d"}, new double[]{((double) (((double) (30) )) ), ((double) (((double) (60) )) ), ((double) (((double) (30) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "d"}, new double[]{((double) (((double) (60) )) ), ((double) (((double) (30) )) ), ((double) (((double) (-30) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "d"}, new double[]{((double) (((double) (0) )) ), ((double) (((double) (190) )) ), ((double) (((double) (-170) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "d"}, new double[]{((double) (((double) (190) )) ), ((double) (((double) (0) )) ), ((double) (((double) (170) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "d"}, new double[]{((double) (((double) (400) )) ), ((double) (((double) (40) )) ), ((double) (((double) (0) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "d"}, new double[]{((double) (((double) (760) )) ), ((double) (((double) (40) )) ), ((double) (((double) (0) )) )})});
		//line 79 "/shared/core/thx/TestFloats.hx"
		{
			//line 79 "/shared/core/thx/TestFloats.hx"
			int _g = 0;
			//line 79 "/shared/core/thx/TestFloats.hx"
			while (( _g < tests.length ))
			{
				//line 79 "/shared/core/thx/TestFloats.hx"
				java.lang.Object test = tests.__get(_g);
				//line 79 "/shared/core/thx/TestFloats.hx"
				 ++ _g;
				//line 80 "/shared/core/thx/TestFloats.hx"
				double d = thx.Floats.angleDifference(((double) (((int) (haxe.lang.Runtime.getField_f(test, "a", true)) )) ), ((double) (((int) (haxe.lang.Runtime.getField_f(test, "b", true)) )) ), null);
				//line 81 "/shared/core/thx/TestFloats.hx"
				utest.Assert.equals(((int) (haxe.lang.Runtime.getField_f(test, "d", true)) ), d, ( ( ( ( ( ( ( "expected distance between " + ((int) (haxe.lang.Runtime.getField_f(test, "a", true)) ) ) + " and " ) + ((int) (haxe.lang.Runtime.getField_f(test, "b", true)) ) ) + " to be " ) + ((int) (haxe.lang.Runtime.getField_f(test, "d", true)) ) ) + " but it is " ) + haxe.lang.Runtime.toString(d) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testAngleDifference"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (81) )) )}));
			}
			
		}
		
	}
	
	
	public void testInterpolateAngle()
	{
		//line 86 "/shared/core/thx/TestFloats.hx"
		haxe.root.Array<java.lang.Object> tests = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "ccw", "cw", "l", "s"}, new double[]{((double) (((double) (30) )) ), ((double) (((double) (330) )) ), ((double) (((double) (0) )) ), ((double) (((double) (180) )) ), ((double) (((double) (180) )) ), ((double) (((double) (0) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "ccw", "cw", "l", "s"}, new double[]{((double) (((double) (330) )) ), ((double) (((double) (30) )) ), ((double) (((double) (180) )) ), ((double) (((double) (0) )) ), ((double) (((double) (180) )) ), ((double) (((double) (0) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "ccw", "cw", "l", "s"}, new double[]{((double) (((double) (30) )) ), ((double) (((double) (120) )) ), ((double) (((double) (255) )) ), ((double) (((double) (75) )) ), ((double) (((double) (255) )) ), ((double) (((double) (75) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "ccw", "cw", "l", "s"}, new double[]{((double) (((double) (120) )) ), ((double) (((double) (30) )) ), ((double) (((double) (75) )) ), ((double) (((double) (255) )) ), ((double) (((double) (255) )) ), ((double) (((double) (75) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "ccw", "cw", "l", "s"}, new double[]{((double) (((double) (0) )) ), ((double) (((double) (180) )) ), ((double) (((double) (270) )) ), ((double) (((double) (90) )) ), ((double) (((double) (270) )) ), ((double) (((double) (90) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "ccw", "cw", "l", "s"}, new double[]{((double) (((double) (180) )) ), ((double) (((double) (0) )) ), ((double) (((double) (90) )) ), ((double) (((double) (270) )) ), ((double) (((double) (90) )) ), ((double) (((double) (270) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "ccw", "cw", "l", "s"}, new double[]{((double) (((double) (10) )) ), ((double) (((double) (200) )) ), ((double) (((double) (285) )) ), ((double) (((double) (105) )) ), ((double) (((double) (105) )) ), ((double) (((double) (285) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "ccw", "cw", "l", "s"}, new double[]{((double) (((double) (200) )) ), ((double) (((double) (10) )) ), ((double) (((double) (105) )) ), ((double) (((double) (285) )) ), ((double) (((double) (105) )) ), ((double) (((double) (285) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "ccw", "cw", "l", "s"}, new double[]{((double) (((double) (170) )) ), ((double) (((double) (340) )) ), ((double) (((double) (75) )) ), ((double) (((double) (255) )) ), ((double) (((double) (75) )) ), ((double) (((double) (255) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "ccw", "cw", "l", "s"}, new double[]{((double) (((double) (340) )) ), ((double) (((double) (170) )) ), ((double) (((double) (255) )) ), ((double) (((double) (75) )) ), ((double) (((double) (75) )) ), ((double) (((double) (255) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "ccw", "cw", "l", "s"}, new double[]{((double) (((double) (190) )) ), ((double) (((double) (350) )) ), ((double) (((double) (90) )) ), ((double) (((double) (270) )) ), ((double) (((double) (90) )) ), ((double) (((double) (270) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "ccw", "cw", "l", "s"}, new double[]{((double) (((double) (350) )) ), ((double) (((double) (190) )) ), ((double) (((double) (270) )) ), ((double) (((double) (90) )) ), ((double) (((double) (90) )) ), ((double) (((double) (270) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "ccw", "cw", "l", "s"}, new double[]{((double) (((double) (160) )) ), ((double) (((double) (350) )) ), ((double) (((double) (75) )) ), ((double) (((double) (255) )) ), ((double) (((double) (255) )) ), ((double) (((double) (75) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "ccw", "cw", "l", "s"}, new double[]{((double) (((double) (350) )) ), ((double) (((double) (160) )) ), ((double) (((double) (255) )) ), ((double) (((double) (75) )) ), ((double) (((double) (255) )) ), ((double) (((double) (75) )) )})});
		//line 109 "/shared/core/thx/TestFloats.hx"
		{
			//line 109 "/shared/core/thx/TestFloats.hx"
			int _g = 0;
			//line 109 "/shared/core/thx/TestFloats.hx"
			while (( _g < tests.length ))
			{
				//line 109 "/shared/core/thx/TestFloats.hx"
				java.lang.Object test = tests.__get(_g);
				//line 109 "/shared/core/thx/TestFloats.hx"
				 ++ _g;
				//line 110 "/shared/core/thx/TestFloats.hx"
				double r = thx.Floats.interpolateAngle(0.5, ((double) (((int) (haxe.lang.Runtime.getField_f(test, "a", true)) )) ), ((double) (((int) (haxe.lang.Runtime.getField_f(test, "b", true)) )) ), null);
				//line 111 "/shared/core/thx/TestFloats.hx"
				utest.Assert.equals(((int) (haxe.lang.Runtime.getField_f(test, "s", true)) ), r, ( ( ( ( ( ( ( "circular interpolation (shortest) at 50% between " + ((int) (haxe.lang.Runtime.getField_f(test, "a", true)) ) ) + " and " ) + ((int) (haxe.lang.Runtime.getField_f(test, "b", true)) ) ) + " should be " ) + ((int) (haxe.lang.Runtime.getField_f(test, "s", true)) ) ) + " but it is " ) + haxe.lang.Runtime.toString(r) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testInterpolateAngle"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (111) )) )}));
				//line 113 "/shared/core/thx/TestFloats.hx"
				r = thx.Floats.interpolateAngleWidest(0.5, ((double) (((int) (haxe.lang.Runtime.getField_f(test, "a", true)) )) ), ((double) (((int) (haxe.lang.Runtime.getField_f(test, "b", true)) )) ), null);
				//line 114 "/shared/core/thx/TestFloats.hx"
				utest.Assert.equals(((int) (haxe.lang.Runtime.getField_f(test, "l", true)) ), r, ( ( ( ( ( ( ( "circular interpolation (longest) at 50% between " + ((int) (haxe.lang.Runtime.getField_f(test, "a", true)) ) ) + " and " ) + ((int) (haxe.lang.Runtime.getField_f(test, "b", true)) ) ) + " should be " ) + ((int) (haxe.lang.Runtime.getField_f(test, "l", true)) ) ) + " but it is " ) + haxe.lang.Runtime.toString(r) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testInterpolateAngle"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (114) )) )}));
				//line 116 "/shared/core/thx/TestFloats.hx"
				r = thx.Floats.interpolateAngleCW(0.5, ((double) (((int) (haxe.lang.Runtime.getField_f(test, "a", true)) )) ), ((double) (((int) (haxe.lang.Runtime.getField_f(test, "b", true)) )) ), null);
				//line 117 "/shared/core/thx/TestFloats.hx"
				utest.Assert.equals(((int) (haxe.lang.Runtime.getField_f(test, "cw", true)) ), r, ( ( ( ( ( ( ( "circular interpolation CW at 50% between " + ((int) (haxe.lang.Runtime.getField_f(test, "a", true)) ) ) + " and " ) + ((int) (haxe.lang.Runtime.getField_f(test, "b", true)) ) ) + " should be " ) + ((int) (haxe.lang.Runtime.getField_f(test, "cw", true)) ) ) + " but it is " ) + haxe.lang.Runtime.toString(r) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testInterpolateAngle"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (117) )) )}));
				//line 119 "/shared/core/thx/TestFloats.hx"
				r = thx.Floats.interpolateAngleCCW(0.5, ((double) (((int) (haxe.lang.Runtime.getField_f(test, "a", true)) )) ), ((double) (((int) (haxe.lang.Runtime.getField_f(test, "b", true)) )) ), null);
				//line 120 "/shared/core/thx/TestFloats.hx"
				utest.Assert.equals(((int) (haxe.lang.Runtime.getField_f(test, "ccw", true)) ), r, ( ( ( ( ( ( ( "circular interpolation CCW at 50% between " + ((int) (haxe.lang.Runtime.getField_f(test, "a", true)) ) ) + " and " ) + ((int) (haxe.lang.Runtime.getField_f(test, "b", true)) ) ) + " should be " ) + ((int) (haxe.lang.Runtime.getField_f(test, "ccw", true)) ) ) + " but it is " ) + haxe.lang.Runtime.toString(r) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestFloats", "TestFloats.hx", "testInterpolateAngle"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (120) )) )}));
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 12 "/shared/core/thx/TestFloats.hx"
		{
			//line 12 "/shared/core/thx/TestFloats.hx"
			boolean __temp_executeDef1 = true;
			//line 12 "/shared/core/thx/TestFloats.hx"
			switch (field.hashCode())
			{
				case 1673940228:
				{
					//line 12 "/shared/core/thx/TestFloats.hx"
					if (field.equals("testInterpolateAngle")) 
					{
						//line 12 "/shared/core/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestFloats.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testInterpolateAngle")) );
					}
					
					//line 12 "/shared/core/thx/TestFloats.hx"
					break;
				}
				
				
				case 906313371:
				{
					//line 12 "/shared/core/thx/TestFloats.hx"
					if (field.equals("testNormalize")) 
					{
						//line 12 "/shared/core/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestFloats.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testNormalize")) );
					}
					
					//line 12 "/shared/core/thx/TestFloats.hx"
					break;
				}
				
				
				case -521741442:
				{
					//line 12 "/shared/core/thx/TestFloats.hx"
					if (field.equals("testAngleDifference")) 
					{
						//line 12 "/shared/core/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestFloats.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testAngleDifference")) );
					}
					
					//line 12 "/shared/core/thx/TestFloats.hx"
					break;
				}
				
				
				case -1206223031:
				{
					//line 12 "/shared/core/thx/TestFloats.hx"
					if (field.equals("testClamp")) 
					{
						//line 12 "/shared/core/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestFloats.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testClamp")) );
					}
					
					//line 12 "/shared/core/thx/TestFloats.hx"
					break;
				}
				
				
				case -1192261604:
				{
					//line 12 "/shared/core/thx/TestFloats.hx"
					if (field.equals("testRound")) 
					{
						//line 12 "/shared/core/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestFloats.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testRound")) );
					}
					
					//line 12 "/shared/core/thx/TestFloats.hx"
					break;
				}
				
				
				case 1401132734:
				{
					//line 12 "/shared/core/thx/TestFloats.hx"
					if (field.equals("testClampSym")) 
					{
						//line 12 "/shared/core/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestFloats.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testClampSym")) );
					}
					
					//line 12 "/shared/core/thx/TestFloats.hx"
					break;
				}
				
				
				case 557885427:
				{
					//line 12 "/shared/core/thx/TestFloats.hx"
					if (field.equals("testCompare")) 
					{
						//line 12 "/shared/core/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestFloats.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCompare")) );
					}
					
					//line 12 "/shared/core/thx/TestFloats.hx"
					break;
				}
				
				
			}
			
			//line 12 "/shared/core/thx/TestFloats.hx"
			if (__temp_executeDef1) 
			{
				//line 12 "/shared/core/thx/TestFloats.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 12 "/shared/core/thx/TestFloats.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 12 "/shared/core/thx/TestFloats.hx"
		{
			//line 12 "/shared/core/thx/TestFloats.hx"
			boolean __temp_executeDef1 = true;
			//line 12 "/shared/core/thx/TestFloats.hx"
			switch (field.hashCode())
			{
				case 1673940228:
				{
					//line 12 "/shared/core/thx/TestFloats.hx"
					if (field.equals("testInterpolateAngle")) 
					{
						//line 12 "/shared/core/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestFloats.hx"
						this.testInterpolateAngle();
					}
					
					//line 12 "/shared/core/thx/TestFloats.hx"
					break;
				}
				
				
				case 906313371:
				{
					//line 12 "/shared/core/thx/TestFloats.hx"
					if (field.equals("testNormalize")) 
					{
						//line 12 "/shared/core/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestFloats.hx"
						this.testNormalize();
					}
					
					//line 12 "/shared/core/thx/TestFloats.hx"
					break;
				}
				
				
				case -521741442:
				{
					//line 12 "/shared/core/thx/TestFloats.hx"
					if (field.equals("testAngleDifference")) 
					{
						//line 12 "/shared/core/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestFloats.hx"
						this.testAngleDifference();
					}
					
					//line 12 "/shared/core/thx/TestFloats.hx"
					break;
				}
				
				
				case -1206223031:
				{
					//line 12 "/shared/core/thx/TestFloats.hx"
					if (field.equals("testClamp")) 
					{
						//line 12 "/shared/core/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestFloats.hx"
						this.testClamp();
					}
					
					//line 12 "/shared/core/thx/TestFloats.hx"
					break;
				}
				
				
				case -1192261604:
				{
					//line 12 "/shared/core/thx/TestFloats.hx"
					if (field.equals("testRound")) 
					{
						//line 12 "/shared/core/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestFloats.hx"
						this.testRound();
					}
					
					//line 12 "/shared/core/thx/TestFloats.hx"
					break;
				}
				
				
				case 1401132734:
				{
					//line 12 "/shared/core/thx/TestFloats.hx"
					if (field.equals("testClampSym")) 
					{
						//line 12 "/shared/core/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestFloats.hx"
						this.testClampSym();
					}
					
					//line 12 "/shared/core/thx/TestFloats.hx"
					break;
				}
				
				
				case 557885427:
				{
					//line 12 "/shared/core/thx/TestFloats.hx"
					if (field.equals("testCompare")) 
					{
						//line 12 "/shared/core/thx/TestFloats.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestFloats.hx"
						this.testCompare();
					}
					
					//line 12 "/shared/core/thx/TestFloats.hx"
					break;
				}
				
				
			}
			
			//line 12 "/shared/core/thx/TestFloats.hx"
			if (__temp_executeDef1) 
			{
				//line 12 "/shared/core/thx/TestFloats.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 12 "/shared/core/thx/TestFloats.hx"
		return null;
	}
	
	
}


