// Generated by Haxe 3.3.0
package thx;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestConvert extends haxe.lang.HxObject
{
	public TestConvert(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestConvert()
	{
		//line 6 "/shared/core/thx/TestConvert.hx"
		thx.TestConvert.__hx_ctor_thx_TestConvert(this);
	}
	
	
	public static void __hx_ctor_thx_TestConvert(thx.TestConvert __temp_me168)
	{
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 5 "/shared/core/thx/TestConvert.hx"
		return new thx.TestConvert(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 5 "/shared/core/thx/TestConvert.hx"
		return new thx.TestConvert();
	}
	
	
	public void testString()
	{
		//line 9 "/shared/core/thx/TestConvert.hx"
		utest.Assert.equals("1", thx.Convert.toString(1), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestConvert", "TestConvert.hx", "testString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (9) )) )}));
		//line 10 "/shared/core/thx/TestConvert.hx"
		utest.Assert.equals("1", thx.Convert.toStringOr(null, "1"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestConvert", "TestConvert.hx", "testString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (10) )) )}));
	}
	
	
	public void testInt()
	{
		//line 14 "/shared/core/thx/TestConvert.hx"
		utest.Assert.equals(1, thx.Convert.toInt("1"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestConvert", "TestConvert.hx", "testInt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (14) )) )}));
		//line 15 "/shared/core/thx/TestConvert.hx"
		utest.Assert.equals(1, thx.Convert.toInt(true), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestConvert", "TestConvert.hx", "testInt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (15) )) )}));
		//line 16 "/shared/core/thx/TestConvert.hx"
		utest.Assert.equals(0, thx.Convert.toInt(false), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestConvert", "TestConvert.hx", "testInt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (16) )) )}));
		//line 17 "/shared/core/thx/TestConvert.hx"
		utest.Assert.equals(1, thx.Convert.toInt(1.1), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestConvert", "TestConvert.hx", "testInt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (17) )) )}));
		//line 19 "/shared/core/thx/TestConvert.hx"
		utest.Assert.equals(1, thx.Convert.toIntOr("z", 1), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestConvert", "TestConvert.hx", "testInt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (19) )) )}));
	}
	
	
	public void testFloat()
	{
		//line 23 "/shared/core/thx/TestConvert.hx"
		utest.Assert.equals(1, thx.Convert.toFloat("1"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestConvert", "TestConvert.hx", "testFloat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (23) )) )}));
		//line 24 "/shared/core/thx/TestConvert.hx"
		utest.Assert.equals(1, thx.Convert.toFloat(true), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestConvert", "TestConvert.hx", "testFloat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (24) )) )}));
		//line 25 "/shared/core/thx/TestConvert.hx"
		utest.Assert.equals(0, thx.Convert.toFloat(false), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestConvert", "TestConvert.hx", "testFloat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (25) )) )}));
		//line 26 "/shared/core/thx/TestConvert.hx"
		utest.Assert.equals(1.1, thx.Convert.toFloat(1.1), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestConvert", "TestConvert.hx", "testFloat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (26) )) )}));
		//line 28 "/shared/core/thx/TestConvert.hx"
		utest.Assert.equals(1.1, thx.Convert.toFloatOr("z", 1.1), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestConvert", "TestConvert.hx", "testFloat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (28) )) )}));
	}
	
	
	public void testBool()
	{
		//line 32 "/shared/core/thx/TestConvert.hx"
		utest.Assert.equals(true, thx.Convert.toBool("1"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestConvert", "TestConvert.hx", "testBool"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (32) )) )}));
		//line 33 "/shared/core/thx/TestConvert.hx"
		utest.Assert.equals(true, thx.Convert.toBool(true), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestConvert", "TestConvert.hx", "testBool"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (33) )) )}));
		//line 34 "/shared/core/thx/TestConvert.hx"
		utest.Assert.equals(false, thx.Convert.toBool(false), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestConvert", "TestConvert.hx", "testBool"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (34) )) )}));
		//line 35 "/shared/core/thx/TestConvert.hx"
		utest.Assert.equals(true, thx.Convert.toBool(1.1), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestConvert", "TestConvert.hx", "testBool"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (35) )) )}));
		//line 36 "/shared/core/thx/TestConvert.hx"
		utest.Assert.equals(false, thx.Convert.toBool(0), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestConvert", "TestConvert.hx", "testBool"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (36) )) )}));
		//line 38 "/shared/core/thx/TestConvert.hx"
		utest.Assert.equals(true, thx.Convert.toBoolOr("z", true), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestConvert", "TestConvert.hx", "testBool"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (38) )) )}));
	}
	
	
	public void testMap()
	{
		//line 42 "/shared/core/thx/TestConvert.hx"
		java.lang.Object objOfArrays = new haxe.lang.DynamicObject(new java.lang.String[]{"baz", "foo"}, new java.lang.Object[]{new haxe.root.Array<java.lang.String>(new java.lang.String[]{"qux"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"bar"})}, new java.lang.String[]{}, new double[]{});
		//line 42 "/shared/core/thx/TestConvert.hx"
		java.lang.Object objOfNumbers = new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a", "b", "c"}, new double[]{((double) (((double) (1) )) ), ((double) (((double) (2) )) ), ((double) (((double) (3) )) )});
		//line 45 "/shared/core/thx/TestConvert.hx"
		utest.Assert.equals("bar", ((haxe.root.Array<java.lang.String>) (((haxe.IMap<java.lang.String, haxe.root.Array<java.lang.String>>) (((haxe.ds.StringMap) (thx.Convert.toMap(((java.lang.Object) (objOfArrays) ), ((haxe.lang.Function) (( (( thx.TestConvert_testMap_45__Fun.__hx_current != null )) ? (thx.TestConvert_testMap_45__Fun.__hx_current) : (thx.TestConvert_testMap_45__Fun.__hx_current = ((thx.TestConvert_testMap_45__Fun) (new thx.TestConvert_testMap_45__Fun()) )) )) ))) )) ).get("foo")) ).__get(0), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestConvert", "TestConvert.hx", "testMap"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (45) )) )}));
		//line 49 "/shared/core/thx/TestConvert.hx"
		utest.Assert.equals(2, ((haxe.IMap<java.lang.String, java.lang.Object>) (((haxe.ds.StringMap) (thx.Convert.toMap(((java.lang.Object) (objOfNumbers) ), ((haxe.lang.Function) (new haxe.lang.Closure(thx.Convert.class, "toInt")) ))) )) ).get("b"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestConvert", "TestConvert.hx", "testMap"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (49) )) )}));
		//line 51 "/shared/core/thx/TestConvert.hx"
		utest.Assert.raises(( (( thx.TestConvert_testMap_51__Fun.__hx_current != null )) ? (thx.TestConvert_testMap_51__Fun.__hx_current) : (thx.TestConvert_testMap_51__Fun.__hx_current = ((thx.TestConvert_testMap_51__Fun) (new thx.TestConvert_testMap_51__Fun()) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestConvert", "TestConvert.hx", "testMap"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (51) )) )}));
		//line 52 "/shared/core/thx/TestConvert.hx"
		utest.Assert.raises(new thx.TestConvert_testMap_52__Fun(objOfArrays), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestConvert", "TestConvert.hx", "testMap"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (52) )) )}));
	}
	
	
	public void testDateTimeUtc()
	{
		//line 56 "/shared/core/thx/TestConvert.hx"
		java.lang.Object value = null;
		//line 57 "/shared/core/thx/TestConvert.hx"
		thx.Convert.toDateTimeUtc(value);
		//line 58 "/shared/core/thx/TestConvert.hx"
		utest.Assert.isNull(value, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestConvert", "TestConvert.hx", "testDateTimeUtc"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (58) )) )}));
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 5 "/shared/core/thx/TestConvert.hx"
		{
			//line 5 "/shared/core/thx/TestConvert.hx"
			boolean __temp_executeDef1 = true;
			//line 5 "/shared/core/thx/TestConvert.hx"
			switch (field.hashCode())
			{
				case -778344425:
				{
					//line 5 "/shared/core/thx/TestConvert.hx"
					if (field.equals("testDateTimeUtc")) 
					{
						//line 5 "/shared/core/thx/TestConvert.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestConvert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testDateTimeUtc")) );
					}
					
					//line 5 "/shared/core/thx/TestConvert.hx"
					break;
				}
				
				
				case 1727748931:
				{
					//line 5 "/shared/core/thx/TestConvert.hx"
					if (field.equals("testString")) 
					{
						//line 5 "/shared/core/thx/TestConvert.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestConvert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testString")) );
					}
					
					//line 5 "/shared/core/thx/TestConvert.hx"
					break;
				}
				
				
				case -1422473366:
				{
					//line 5 "/shared/core/thx/TestConvert.hx"
					if (field.equals("testMap")) 
					{
						//line 5 "/shared/core/thx/TestConvert.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestConvert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testMap")) );
					}
					
					//line 5 "/shared/core/thx/TestConvert.hx"
					break;
				}
				
				
				case -1422476803:
				{
					//line 5 "/shared/core/thx/TestConvert.hx"
					if (field.equals("testInt")) 
					{
						//line 5 "/shared/core/thx/TestConvert.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestConvert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testInt")) );
					}
					
					//line 5 "/shared/core/thx/TestConvert.hx"
					break;
				}
				
				
				case -1147315556:
				{
					//line 5 "/shared/core/thx/TestConvert.hx"
					if (field.equals("testBool")) 
					{
						//line 5 "/shared/core/thx/TestConvert.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestConvert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testBool")) );
					}
					
					//line 5 "/shared/core/thx/TestConvert.hx"
					break;
				}
				
				
				case -1203439382:
				{
					//line 5 "/shared/core/thx/TestConvert.hx"
					if (field.equals("testFloat")) 
					{
						//line 5 "/shared/core/thx/TestConvert.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestConvert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFloat")) );
					}
					
					//line 5 "/shared/core/thx/TestConvert.hx"
					break;
				}
				
				
			}
			
			//line 5 "/shared/core/thx/TestConvert.hx"
			if (__temp_executeDef1) 
			{
				//line 5 "/shared/core/thx/TestConvert.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 5 "/shared/core/thx/TestConvert.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 5 "/shared/core/thx/TestConvert.hx"
		{
			//line 5 "/shared/core/thx/TestConvert.hx"
			boolean __temp_executeDef1 = true;
			//line 5 "/shared/core/thx/TestConvert.hx"
			switch (field.hashCode())
			{
				case -778344425:
				{
					//line 5 "/shared/core/thx/TestConvert.hx"
					if (field.equals("testDateTimeUtc")) 
					{
						//line 5 "/shared/core/thx/TestConvert.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestConvert.hx"
						this.testDateTimeUtc();
					}
					
					//line 5 "/shared/core/thx/TestConvert.hx"
					break;
				}
				
				
				case 1727748931:
				{
					//line 5 "/shared/core/thx/TestConvert.hx"
					if (field.equals("testString")) 
					{
						//line 5 "/shared/core/thx/TestConvert.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestConvert.hx"
						this.testString();
					}
					
					//line 5 "/shared/core/thx/TestConvert.hx"
					break;
				}
				
				
				case -1422473366:
				{
					//line 5 "/shared/core/thx/TestConvert.hx"
					if (field.equals("testMap")) 
					{
						//line 5 "/shared/core/thx/TestConvert.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestConvert.hx"
						this.testMap();
					}
					
					//line 5 "/shared/core/thx/TestConvert.hx"
					break;
				}
				
				
				case -1422476803:
				{
					//line 5 "/shared/core/thx/TestConvert.hx"
					if (field.equals("testInt")) 
					{
						//line 5 "/shared/core/thx/TestConvert.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestConvert.hx"
						this.testInt();
					}
					
					//line 5 "/shared/core/thx/TestConvert.hx"
					break;
				}
				
				
				case -1147315556:
				{
					//line 5 "/shared/core/thx/TestConvert.hx"
					if (field.equals("testBool")) 
					{
						//line 5 "/shared/core/thx/TestConvert.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestConvert.hx"
						this.testBool();
					}
					
					//line 5 "/shared/core/thx/TestConvert.hx"
					break;
				}
				
				
				case -1203439382:
				{
					//line 5 "/shared/core/thx/TestConvert.hx"
					if (field.equals("testFloat")) 
					{
						//line 5 "/shared/core/thx/TestConvert.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestConvert.hx"
						this.testFloat();
					}
					
					//line 5 "/shared/core/thx/TestConvert.hx"
					break;
				}
				
				
			}
			
			//line 5 "/shared/core/thx/TestConvert.hx"
			if (__temp_executeDef1) 
			{
				//line 5 "/shared/core/thx/TestConvert.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 5 "/shared/core/thx/TestConvert.hx"
		return null;
	}
	
	
}


