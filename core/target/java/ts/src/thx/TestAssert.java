// Generated by Haxe 3.3.0
package thx;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestAssert extends haxe.lang.HxObject
{
	public TestAssert(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestAssert()
	{
		//line 8 "/shared/core/thx/TestAssert.hx"
		thx.TestAssert.__hx_ctor_thx_TestAssert(this);
	}
	
	
	public static void __hx_ctor_thx_TestAssert(thx.TestAssert __temp_me161)
	{
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 7 "/shared/core/thx/TestAssert.hx"
		return new thx.TestAssert(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 7 "/shared/core/thx/TestAssert.hx"
		return new thx.TestAssert();
	}
	
	
	public thx.IAssertBehavior orig;
	
	public thx.CollectBehavior behavior;
	
	public void setup()
	{
		//line 13 "/shared/core/thx/TestAssert.hx"
		this.orig = thx.Assert.behavior;
		//line 14 "/shared/core/thx/TestAssert.hx"
		thx.Assert.behavior = this.behavior = new thx.CollectBehavior();
	}
	
	
	public void teardown()
	{
		//line 18 "/shared/core/thx/TestAssert.hx"
		thx.Assert.behavior = this.orig;
	}
	
	
	public void testIsBool()
	{
		//line 22 "/shared/core/thx/TestAssert.hx"
		thx.Assert.isTrue(true, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testIsBool"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (22) )) )}));
		//line 23 "/shared/core/thx/TestAssert.hx"
		thx.Assert.isTrue(false, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testIsBool"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (23) )) )}));
		//line 24 "/shared/core/thx/TestAssert.hx"
		thx.Assert.isFalse(true, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testIsBool"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (24) )) )}));
		//line 25 "/shared/core/thx/TestAssert.hx"
		thx.Assert.isFalse(false, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testIsBool"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (25) )) )}));
		//line 27 "/shared/core/thx/TestAssert.hx"
		this.expect(2, 2, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testIsBool"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (27) )) )}));
	}
	
	
	public void testIsNull()
	{
		//line 31 "/shared/core/thx/TestAssert.hx"
		thx.Assert.isNull(null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testIsNull"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (31) )) )}));
		//line 32 "/shared/core/thx/TestAssert.hx"
		thx.Assert.isNull(0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testIsNull"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (32) )) )}));
		//line 33 "/shared/core/thx/TestAssert.hx"
		thx.Assert.isNull(0.0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testIsNull"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (33) )) )}));
		//line 34 "/shared/core/thx/TestAssert.hx"
		thx.Assert.isNull(0.1, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testIsNull"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (34) )) )}));
		//line 35 "/shared/core/thx/TestAssert.hx"
		thx.Assert.isNull(1, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testIsNull"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (35) )) )}));
		//line 36 "/shared/core/thx/TestAssert.hx"
		thx.Assert.isNull("", null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testIsNull"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (36) )) )}));
		//line 37 "/shared/core/thx/TestAssert.hx"
		thx.Assert.isNull("a", null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testIsNull"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (37) )) )}));
		//line 38 "/shared/core/thx/TestAssert.hx"
		thx.Assert.isNull(java.lang.Double.NaN, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testIsNull"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (38) )) )}));
		//line 39 "/shared/core/thx/TestAssert.hx"
		thx.Assert.isNull(java.lang.Double.POSITIVE_INFINITY, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testIsNull"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (39) )) )}));
		//line 40 "/shared/core/thx/TestAssert.hx"
		thx.Assert.isNull(true, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testIsNull"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (40) )) )}));
		//line 41 "/shared/core/thx/TestAssert.hx"
		thx.Assert.isNull(false, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testIsNull"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (41) )) )}));
		//line 42 "/shared/core/thx/TestAssert.hx"
		this.expect(1, 10, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testIsNull"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (42) )) )}));
	}
	
	
	public void testNotNull()
	{
		//line 46 "/shared/core/thx/TestAssert.hx"
		thx.Assert.notNull(null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testNotNull"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (46) )) )}));
		//line 47 "/shared/core/thx/TestAssert.hx"
		thx.Assert.notNull(0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testNotNull"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (47) )) )}));
		//line 48 "/shared/core/thx/TestAssert.hx"
		thx.Assert.notNull(0.0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testNotNull"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (48) )) )}));
		//line 49 "/shared/core/thx/TestAssert.hx"
		thx.Assert.notNull(0.1, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testNotNull"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (49) )) )}));
		//line 50 "/shared/core/thx/TestAssert.hx"
		thx.Assert.notNull(1, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testNotNull"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (50) )) )}));
		//line 51 "/shared/core/thx/TestAssert.hx"
		thx.Assert.notNull("", null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testNotNull"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (51) )) )}));
		//line 52 "/shared/core/thx/TestAssert.hx"
		thx.Assert.notNull("a", null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testNotNull"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (52) )) )}));
		//line 53 "/shared/core/thx/TestAssert.hx"
		thx.Assert.notNull(java.lang.Double.NaN, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testNotNull"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (53) )) )}));
		//line 54 "/shared/core/thx/TestAssert.hx"
		thx.Assert.notNull(java.lang.Double.POSITIVE_INFINITY, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testNotNull"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (54) )) )}));
		//line 55 "/shared/core/thx/TestAssert.hx"
		thx.Assert.notNull(true, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testNotNull"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (55) )) )}));
		//line 56 "/shared/core/thx/TestAssert.hx"
		thx.Assert.notNull(false, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testNotNull"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (56) )) )}));
		//line 57 "/shared/core/thx/TestAssert.hx"
		this.expect(10, 1, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testNotNull"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (57) )) )}));
	}
	
	
	public void testRaisesSuccess()
	{
		//line 61 "/shared/core/thx/TestAssert.hx"
		int counter = 0;
		//line 63 "/shared/core/thx/TestAssert.hx"
		java.lang.Object __temp_stmt7 = null;
		//line 63 "/shared/core/thx/TestAssert.hx"
		{
			//line 63 "/shared/core/thx/TestAssert.hx"
			haxe.root.Array __temp_odecl1 = ((haxe.root.Array) (new haxe.root.Array(new java.lang.Object[]{java.lang.String.class, java.lang.Object.class, null})) );
			//line 63 "/shared/core/thx/TestAssert.hx"
			__temp_stmt7 = new haxe.lang.DynamicObject(new java.lang.String[]{"catches", "exception"}, new java.lang.Object[]{__temp_odecl1, ((java.lang.Object) ("e") )}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 64 "/shared/core/thx/TestAssert.hx"
		java.lang.Object __temp_stmt8 = null;
		//line 64 "/shared/core/thx/TestAssert.hx"
		{
			//line 64 "/shared/core/thx/TestAssert.hx"
			haxe.root.Array __temp_odecl2 = ((haxe.root.Array) (new haxe.root.Array(new java.lang.Object[]{int.class, java.lang.Object.class, null})) );
			//line 64 "/shared/core/thx/TestAssert.hx"
			__temp_stmt8 = new haxe.lang.DynamicObject(new java.lang.String[]{"catches", "exception"}, new java.lang.Object[]{__temp_odecl2, ((java.lang.Object) (1) )}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 65 "/shared/core/thx/TestAssert.hx"
		java.lang.Object __temp_stmt9 = null;
		//line 65 "/shared/core/thx/TestAssert.hx"
		{
			//line 65 "/shared/core/thx/TestAssert.hx"
			haxe.root.Array __temp_odecl3 = ((haxe.root.Array) (new haxe.root.Array(new java.lang.Object[]{double.class, java.lang.Object.class, null})) );
			//line 65 "/shared/core/thx/TestAssert.hx"
			__temp_stmt9 = new haxe.lang.DynamicObject(new java.lang.String[]{"catches", "exception"}, new java.lang.Object[]{__temp_odecl3, ((java.lang.Object) (0.1) )}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 66 "/shared/core/thx/TestAssert.hx"
		java.lang.Object __temp_stmt10 = null;
		//line 66 "/shared/core/thx/TestAssert.hx"
		{
			//line 66 "/shared/core/thx/TestAssert.hx"
			java.lang.Object __temp_odecl4 = ((java.lang.Object) (new thx.TestAssert()) );
			//line 66 "/shared/core/thx/TestAssert.hx"
			haxe.root.Array __temp_odecl5 = ((haxe.root.Array) (new haxe.root.Array(new java.lang.Object[]{thx.TestAssert.class, java.lang.Object.class, null})) );
			//line 66 "/shared/core/thx/TestAssert.hx"
			__temp_stmt10 = new haxe.lang.DynamicObject(new java.lang.String[]{"catches", "exception"}, new java.lang.Object[]{__temp_odecl5, __temp_odecl4}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 67 "/shared/core/thx/TestAssert.hx"
		java.lang.Object __temp_stmt11 = null;
		//line 67 "/shared/core/thx/TestAssert.hx"
		{
			//line 67 "/shared/core/thx/TestAssert.hx"
			haxe.root.Array __temp_odecl6 = ((haxe.root.Array) (new haxe.root.Array(new java.lang.Object[]{haxe.root.Array.class, java.lang.Object.class, null})) );
			//line 67 "/shared/core/thx/TestAssert.hx"
			__temp_stmt11 = new haxe.lang.DynamicObject(new java.lang.String[]{"catches", "exception"}, new java.lang.Object[]{__temp_odecl6, ((java.lang.Object) (new haxe.root.Array(new java.lang.Object[]{1})) )}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 61 "/shared/core/thx/TestAssert.hx"
		haxe.root.Array<java.lang.Object> tests = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{__temp_stmt7, __temp_stmt8, __temp_stmt9, __temp_stmt10, __temp_stmt11});
		//line 69 "/shared/core/thx/TestAssert.hx"
		{
			//line 69 "/shared/core/thx/TestAssert.hx"
			int _g = 0;
			//line 69 "/shared/core/thx/TestAssert.hx"
			while (( _g < tests.length ))
			{
				//line 69 "/shared/core/thx/TestAssert.hx"
				java.lang.Object test = tests.__get(_g);
				//line 69 "/shared/core/thx/TestAssert.hx"
				 ++ _g;
				//line 70 "/shared/core/thx/TestAssert.hx"
				{
					//line 70 "/shared/core/thx/TestAssert.hx"
					int _g1 = 0;
					//line 70 "/shared/core/thx/TestAssert.hx"
					haxe.root.Array _g2 = ((haxe.root.Array) (haxe.lang.Runtime.getField(test, "catches", true)) );
					//line 70 "/shared/core/thx/TestAssert.hx"
					while (( _g1 < _g2.length ))
					{
						//line 70 "/shared/core/thx/TestAssert.hx"
						java.lang.Object catcher = _g2.__get(_g1);
						//line 70 "/shared/core/thx/TestAssert.hx"
						 ++ _g1;
						//line 71 "/shared/core/thx/TestAssert.hx"
						 ++ counter;
						//line 72 "/shared/core/thx/TestAssert.hx"
						thx.Assert.raises(new thx.TestAssert_testRaisesSuccess_72__Fun(test), catcher, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testRaisesSuccess"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (72) )) )}));
					}
					
				}
				
			}
			
		}
		
		//line 75 "/shared/core/thx/TestAssert.hx"
		this.expect(counter, 0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testRaisesSuccess"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (75) )) )}));
	}
	
	
	public void testRaisesFailure()
	{
		//line 79 "/shared/core/thx/TestAssert.hx"
		int counter = 0;
		//line 81 "/shared/core/thx/TestAssert.hx"
		java.lang.Object __temp_stmt7 = null;
		//line 81 "/shared/core/thx/TestAssert.hx"
		{
			//line 81 "/shared/core/thx/TestAssert.hx"
			haxe.root.Array __temp_odecl1 = ((haxe.root.Array) (new haxe.root.Array(new java.lang.Object[]{int.class, double.class, thx.TestAssert.class})) );
			//line 81 "/shared/core/thx/TestAssert.hx"
			__temp_stmt7 = new haxe.lang.DynamicObject(new java.lang.String[]{"catches", "exception"}, new java.lang.Object[]{__temp_odecl1, ((java.lang.Object) ("e") )}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 82 "/shared/core/thx/TestAssert.hx"
		java.lang.Object __temp_stmt8 = null;
		//line 82 "/shared/core/thx/TestAssert.hx"
		{
			//line 82 "/shared/core/thx/TestAssert.hx"
			haxe.root.Array __temp_odecl2 = ((haxe.root.Array) (new haxe.root.Array(new java.lang.Object[]{java.lang.String.class, thx.TestAssert.class})) );
			//line 82 "/shared/core/thx/TestAssert.hx"
			__temp_stmt8 = new haxe.lang.DynamicObject(new java.lang.String[]{"catches", "exception"}, new java.lang.Object[]{__temp_odecl2, ((java.lang.Object) (1) )}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 83 "/shared/core/thx/TestAssert.hx"
		java.lang.Object __temp_stmt9 = null;
		//line 83 "/shared/core/thx/TestAssert.hx"
		{
			//line 83 "/shared/core/thx/TestAssert.hx"
			haxe.root.Array __temp_odecl3 = ((haxe.root.Array) (new haxe.root.Array(new java.lang.Object[]{java.lang.String.class, int.class, thx.TestAssert.class})) );
			//line 83 "/shared/core/thx/TestAssert.hx"
			__temp_stmt9 = new haxe.lang.DynamicObject(new java.lang.String[]{"catches", "exception"}, new java.lang.Object[]{__temp_odecl3, ((java.lang.Object) (0.1) )}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 84 "/shared/core/thx/TestAssert.hx"
		java.lang.Object __temp_stmt10 = null;
		//line 84 "/shared/core/thx/TestAssert.hx"
		{
			//line 84 "/shared/core/thx/TestAssert.hx"
			java.lang.Object __temp_odecl4 = ((java.lang.Object) (new thx.TestAssert()) );
			//line 84 "/shared/core/thx/TestAssert.hx"
			haxe.root.Array __temp_odecl5 = ((haxe.root.Array) (new haxe.root.Array(new java.lang.Object[]{int.class, double.class, java.lang.String.class})) );
			//line 84 "/shared/core/thx/TestAssert.hx"
			__temp_stmt10 = new haxe.lang.DynamicObject(new java.lang.String[]{"catches", "exception"}, new java.lang.Object[]{__temp_odecl5, __temp_odecl4}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 85 "/shared/core/thx/TestAssert.hx"
		java.lang.Object __temp_stmt11 = null;
		//line 85 "/shared/core/thx/TestAssert.hx"
		{
			//line 85 "/shared/core/thx/TestAssert.hx"
			haxe.root.Array __temp_odecl6 = ((haxe.root.Array) (new haxe.root.Array(new java.lang.Object[]{thx.TestAssert.class, int.class, double.class})) );
			//line 85 "/shared/core/thx/TestAssert.hx"
			__temp_stmt11 = new haxe.lang.DynamicObject(new java.lang.String[]{"catches", "exception"}, new java.lang.Object[]{__temp_odecl6, ((java.lang.Object) (new haxe.root.Array(new java.lang.Object[]{1})) )}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 79 "/shared/core/thx/TestAssert.hx"
		haxe.root.Array<java.lang.Object> tests = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{__temp_stmt7, __temp_stmt8, __temp_stmt9, __temp_stmt10, __temp_stmt11});
		//line 87 "/shared/core/thx/TestAssert.hx"
		{
			//line 87 "/shared/core/thx/TestAssert.hx"
			int _g = 0;
			//line 87 "/shared/core/thx/TestAssert.hx"
			while (( _g < tests.length ))
			{
				//line 87 "/shared/core/thx/TestAssert.hx"
				java.lang.Object test = tests.__get(_g);
				//line 87 "/shared/core/thx/TestAssert.hx"
				 ++ _g;
				//line 88 "/shared/core/thx/TestAssert.hx"
				{
					//line 88 "/shared/core/thx/TestAssert.hx"
					int _g1 = 0;
					//line 88 "/shared/core/thx/TestAssert.hx"
					haxe.root.Array _g2 = ((haxe.root.Array) (haxe.lang.Runtime.getField(test, "catches", true)) );
					//line 88 "/shared/core/thx/TestAssert.hx"
					while (( _g1 < _g2.length ))
					{
						//line 88 "/shared/core/thx/TestAssert.hx"
						java.lang.Object catcher = _g2.__get(_g1);
						//line 88 "/shared/core/thx/TestAssert.hx"
						 ++ _g1;
						//line 89 "/shared/core/thx/TestAssert.hx"
						 ++ counter;
						//line 90 "/shared/core/thx/TestAssert.hx"
						thx.Assert.raises(new thx.TestAssert_testRaisesFailure_90__Fun(test), catcher, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testRaisesFailure"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (90) )) )}));
					}
					
				}
				
			}
			
		}
		
		//line 93 "/shared/core/thx/TestAssert.hx"
		this.expect(0, counter, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testRaisesFailure"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (93) )) )}));
	}
	
	
	public void testIs()
	{
		//line 97 "/shared/core/thx/TestAssert.hx"
		haxe.root.Array values = new haxe.root.Array(new java.lang.Object[]{"e", 1, 0.1, new thx.TestAssert(), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{}, new double[]{}), new haxe.root.Array(new java.lang.Object[]{1})});
		//line 98 "/shared/core/thx/TestAssert.hx"
		haxe.root.Array types = new haxe.root.Array(new java.lang.Object[]{java.lang.String.class, int.class, double.class, thx.TestAssert.class, java.lang.Object.class, haxe.root.Array.class});
		//line 99 "/shared/core/thx/TestAssert.hx"
		int i = 0;
		//line 101 "/shared/core/thx/TestAssert.hx"
		{
			//line 101 "/shared/core/thx/TestAssert.hx"
			int _g = 0;
			//line 101 "/shared/core/thx/TestAssert.hx"
			while (( _g < values.length ))
			{
				//line 101 "/shared/core/thx/TestAssert.hx"
				java.lang.Object value = values.__get(_g);
				//line 101 "/shared/core/thx/TestAssert.hx"
				 ++ _g;
				//line 102 "/shared/core/thx/TestAssert.hx"
				{
					//line 102 "/shared/core/thx/TestAssert.hx"
					int _g1 = 0;
					//line 102 "/shared/core/thx/TestAssert.hx"
					while (( _g1 < types.length ))
					{
						//line 102 "/shared/core/thx/TestAssert.hx"
						java.lang.Object type = types.__get(_g1);
						//line 102 "/shared/core/thx/TestAssert.hx"
						 ++ _g1;
						//line 103 "/shared/core/thx/TestAssert.hx"
						 ++ i;
						//line 104 "/shared/core/thx/TestAssert.hx"
						thx.Assert.is(value, type, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testIs"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (104) )) )}));
					}
					
				}
				
			}
			
		}
		
		//line 106 "/shared/core/thx/TestAssert.hx"
		this.expect(12, ( i - 12 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testIs"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (106) )) )}));
	}
	
	
	public void testSamePrimitive()
	{
		//line 110 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(null, 1, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSamePrimitive"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (110) )) )}));
		//line 111 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(1, 1, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSamePrimitive"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (111) )) )}));
		//line 112 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(1, "1", null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSamePrimitive"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (112) )) )}));
		//line 113 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same("a", "a", null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSamePrimitive"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (113) )) )}));
		//line 114 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(null, "", null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSamePrimitive"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (114) )) )}));
		//line 115 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(new haxe.root.Date(2000, 0, 1, 0, 0, 0), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSamePrimitive"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (115) )) )}));
		//line 116 "/shared/core/thx/TestAssert.hx"
		haxe.ds.IntMap<java.lang.String> _g = new haxe.ds.IntMap<java.lang.String>();
		//line 116 "/shared/core/thx/TestAssert.hx"
		_g.set(((int) (1) ), haxe.lang.Runtime.toString("a"));
		//line 116 "/shared/core/thx/TestAssert.hx"
		_g.set(((int) (2) ), haxe.lang.Runtime.toString("b"));
		//line 116 "/shared/core/thx/TestAssert.hx"
		haxe.ds.IntMap<java.lang.String> _g1 = new haxe.ds.IntMap<java.lang.String>();
		//line 116 "/shared/core/thx/TestAssert.hx"
		_g1.set(((int) (1) ), haxe.lang.Runtime.toString("a"));
		//line 116 "/shared/core/thx/TestAssert.hx"
		_g1.set(((int) (2) ), haxe.lang.Runtime.toString("b"));
		//line 116 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(_g, _g1, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSamePrimitive"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (116) )) )}));
		//line 117 "/shared/core/thx/TestAssert.hx"
		haxe.ds.StringMap<java.lang.Object> _g2 = new haxe.ds.StringMap<java.lang.Object>();
		//line 117 "/shared/core/thx/TestAssert.hx"
		_g2.set("a", 1);
		//line 117 "/shared/core/thx/TestAssert.hx"
		haxe.ds.StringMap<java.lang.Object> _g3 = new haxe.ds.StringMap<java.lang.Object>();
		//line 117 "/shared/core/thx/TestAssert.hx"
		_g3.set("a", 1);
		//line 117 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(_g2, _g3, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSamePrimitive"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (117) )) )}));
		//line 118 "/shared/core/thx/TestAssert.hx"
		haxe.ds.StringMap<java.lang.Object> _g4 = new haxe.ds.StringMap<java.lang.Object>();
		//line 118 "/shared/core/thx/TestAssert.hx"
		_g4.set("a", 1);
		//line 118 "/shared/core/thx/TestAssert.hx"
		haxe.ds.IntMap<java.lang.Object> _g5 = new haxe.ds.IntMap<java.lang.Object>();
		//line 118 "/shared/core/thx/TestAssert.hx"
		_g5.set(((int) (1) ), ((java.lang.Object) (1) ));
		//line 118 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(_g4, _g5, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSamePrimitive"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (118) )) )}));
		//line 119 "/shared/core/thx/TestAssert.hx"
		haxe.ds.IntMap<java.lang.String> _g6 = new haxe.ds.IntMap<java.lang.String>();
		//line 119 "/shared/core/thx/TestAssert.hx"
		_g6.set(((int) (1) ), haxe.lang.Runtime.toString("a"));
		//line 119 "/shared/core/thx/TestAssert.hx"
		haxe.ds.IntMap<java.lang.String> _g7 = new haxe.ds.IntMap<java.lang.String>();
		//line 119 "/shared/core/thx/TestAssert.hx"
		_g7.set(((int) (1) ), haxe.lang.Runtime.toString("a"));
		//line 119 "/shared/core/thx/TestAssert.hx"
		_g7.set(((int) (2) ), haxe.lang.Runtime.toString("b"));
		//line 119 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(_g6, _g7, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSamePrimitive"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (119) )) )}));
		//line 120 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(new haxe.root.Date(2000, 0, 1, 0, 0, 0), new haxe.root.Date(2000, 0, 1, 0, 0, 0), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSamePrimitive"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (120) )) )}));
		//line 122 "/shared/core/thx/TestAssert.hx"
		this.expect(5, 6, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSamePrimitive"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (122) )) )}));
	}
	
	
	public void testSameType()
	{
		//line 126 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(null, new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{}, new double[]{}), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameType"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (126) )) )}));
		//line 127 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(null, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameType"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (127) )) )}));
		//line 128 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{}, new double[]{}), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameType"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (128) )) )}));
		//line 129 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{}, new double[]{}), 1, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameType"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (129) )) )}));
		//line 130 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{}, new double[]{}), new haxe.root.Array(new java.lang.Object[]{}), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameType"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (130) )) )}));
		//line 131 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(null, thx._TestAssert.Sample.None, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameType"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (131) )) )}));
		//line 132 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(thx._TestAssert.Sample.None, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameType"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (132) )) )}));
		//line 134 "/shared/core/thx/TestAssert.hx"
		this.expect(1, 6, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameType"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (134) )) )}));
	}
	
	
	public void testSameArray()
	{
		//line 138 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(new haxe.root.Array(new java.lang.Object[]{}), new haxe.root.Array(new java.lang.Object[]{}), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameArray"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (138) )) )}));
		//line 139 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(new haxe.root.Array(new java.lang.Object[]{1}), new haxe.root.Array(new java.lang.Object[]{"1"}), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameArray"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (139) )) )}));
		//line 140 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2, 3}), new haxe.root.Array(new java.lang.Object[]{1, 2, 3}), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameArray"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (140) )) )}));
		//line 141 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2, 3}), new haxe.root.Array(new java.lang.Object[]{1, 2}), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameArray"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (141) )) )}));
		//line 142 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2}), new haxe.root.Array(new java.lang.Object[]{1, 2, 3}), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameArray"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (142) )) )}));
		//line 143 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, new haxe.root.Array(new java.lang.Object[]{1, 2})}), new haxe.root.Array(new java.lang.Object[]{1, new haxe.root.Array(new java.lang.Object[]{1, 2})}), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameArray"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (143) )) )}));
		//line 144 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, new haxe.root.Array(new java.lang.Object[]{1, 2})}), new haxe.root.Array(new java.lang.Object[]{1, new haxe.root.Array(new java.lang.Object[]{})}), false, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameArray"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (144) )) )}));
		//line 145 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, new haxe.root.Array(new java.lang.Object[]{1, 2})}), new haxe.root.Array(new java.lang.Object[]{1, new haxe.root.Array(new java.lang.Object[]{})}), true, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameArray"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (145) )) )}));
		//line 147 "/shared/core/thx/TestAssert.hx"
		this.expect(4, 4, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameArray"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (147) )) )}));
	}
	
	
	public void testSameObject()
	{
		//line 151 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{}, new double[]{}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{}, new double[]{}), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameObject"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (151) )) )}));
		//line 152 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"a"}, new java.lang.Object[]{"1"}, new java.lang.String[]{}, new double[]{}), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameObject"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (152) )) )}));
		//line 153 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(new haxe.lang.DynamicObject(new java.lang.String[]{"b"}, new java.lang.Object[]{"c"}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"b"}, new java.lang.Object[]{"c"}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )}), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameObject"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (153) )) )}));
		//line 154 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(new haxe.lang.DynamicObject(new java.lang.String[]{"b"}, new java.lang.Object[]{"c"}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"c"}, new java.lang.Object[]{"c"}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )}), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameObject"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (154) )) )}));
		//line 155 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(new haxe.lang.DynamicObject(new java.lang.String[]{"b"}, new java.lang.Object[]{"c"}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )}), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameObject"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (155) )) )}));
		//line 156 "/shared/core/thx/TestAssert.hx"
		java.lang.Object __temp_stmt7 = null;
		//line 156 "/shared/core/thx/TestAssert.hx"
		{
			//line 156 "/shared/core/thx/TestAssert.hx"
			java.lang.Object __temp_odecl1 = new haxe.lang.DynamicObject(new java.lang.String[]{"c"}, new java.lang.Object[]{"c"}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )});
			//line 156 "/shared/core/thx/TestAssert.hx"
			__temp_stmt7 = new haxe.lang.DynamicObject(new java.lang.String[]{"b"}, new java.lang.Object[]{__temp_odecl1}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )});
		}
		
		//line 156 "/shared/core/thx/TestAssert.hx"
		java.lang.Object __temp_stmt8 = null;
		//line 156 "/shared/core/thx/TestAssert.hx"
		{
			//line 156 "/shared/core/thx/TestAssert.hx"
			java.lang.Object __temp_odecl2 = new haxe.lang.DynamicObject(new java.lang.String[]{"c"}, new java.lang.Object[]{"c"}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )});
			//line 156 "/shared/core/thx/TestAssert.hx"
			__temp_stmt8 = new haxe.lang.DynamicObject(new java.lang.String[]{"b"}, new java.lang.Object[]{__temp_odecl2}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )});
		}
		
		//line 156 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(__temp_stmt7, __temp_stmt8, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameObject"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (156) )) )}));
		//line 157 "/shared/core/thx/TestAssert.hx"
		java.lang.Object __temp_stmt9 = null;
		//line 157 "/shared/core/thx/TestAssert.hx"
		{
			//line 157 "/shared/core/thx/TestAssert.hx"
			java.lang.Object __temp_odecl3 = new haxe.lang.DynamicObject(new java.lang.String[]{"c"}, new java.lang.Object[]{"c"}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )});
			//line 157 "/shared/core/thx/TestAssert.hx"
			__temp_stmt9 = new haxe.lang.DynamicObject(new java.lang.String[]{"b"}, new java.lang.Object[]{__temp_odecl3}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )});
		}
		
		//line 157 "/shared/core/thx/TestAssert.hx"
		java.lang.Object __temp_stmt10 = null;
		//line 157 "/shared/core/thx/TestAssert.hx"
		{
			//line 157 "/shared/core/thx/TestAssert.hx"
			java.lang.Object __temp_odecl4 = new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{}, new double[]{});
			//line 157 "/shared/core/thx/TestAssert.hx"
			__temp_stmt10 = new haxe.lang.DynamicObject(new java.lang.String[]{"b"}, new java.lang.Object[]{__temp_odecl4}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )});
		}
		
		//line 157 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(__temp_stmt9, __temp_stmt10, false, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameObject"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (157) )) )}));
		//line 158 "/shared/core/thx/TestAssert.hx"
		java.lang.Object __temp_stmt11 = null;
		//line 158 "/shared/core/thx/TestAssert.hx"
		{
			//line 158 "/shared/core/thx/TestAssert.hx"
			java.lang.Object __temp_odecl5 = new haxe.lang.DynamicObject(new java.lang.String[]{"c"}, new java.lang.Object[]{"c"}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )});
			//line 158 "/shared/core/thx/TestAssert.hx"
			__temp_stmt11 = new haxe.lang.DynamicObject(new java.lang.String[]{"b"}, new java.lang.Object[]{__temp_odecl5}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )});
		}
		
		//line 158 "/shared/core/thx/TestAssert.hx"
		java.lang.Object __temp_stmt12 = null;
		//line 158 "/shared/core/thx/TestAssert.hx"
		{
			//line 158 "/shared/core/thx/TestAssert.hx"
			java.lang.Object __temp_odecl6 = new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{}, new double[]{});
			//line 158 "/shared/core/thx/TestAssert.hx"
			__temp_stmt12 = new haxe.lang.DynamicObject(new java.lang.String[]{"b"}, new java.lang.Object[]{__temp_odecl6}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )});
		}
		
		//line 158 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(__temp_stmt11, __temp_stmt12, true, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameObject"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (158) )) )}));
		//line 160 "/shared/core/thx/TestAssert.hx"
		this.expect(4, 4, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameObject"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (160) )) )}));
	}
	
	
	public java.lang.String value;
	
	public thx.TestAssert sub;
	
	public void testSameInstance()
	{
		//line 166 "/shared/core/thx/TestAssert.hx"
		thx.TestAssert c1 = new thx.TestAssert();
		//line 167 "/shared/core/thx/TestAssert.hx"
		c1.value = "a";
		//line 168 "/shared/core/thx/TestAssert.hx"
		thx.TestAssert c2 = new thx.TestAssert();
		//line 169 "/shared/core/thx/TestAssert.hx"
		c2.value = "a";
		//line 170 "/shared/core/thx/TestAssert.hx"
		thx.TestAssert c3 = new thx.TestAssert();
		//line 172 "/shared/core/thx/TestAssert.hx"
		thx.TestAssert r1 = new thx.TestAssert();
		//line 173 "/shared/core/thx/TestAssert.hx"
		r1.sub = c1;
		//line 174 "/shared/core/thx/TestAssert.hx"
		thx.TestAssert r2 = new thx.TestAssert();
		//line 175 "/shared/core/thx/TestAssert.hx"
		r2.sub = c2;
		//line 176 "/shared/core/thx/TestAssert.hx"
		thx.TestAssert r3 = new thx.TestAssert();
		//line 177 "/shared/core/thx/TestAssert.hx"
		r3.sub = c3;
		//line 180 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(c1, c1, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameInstance"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (180) )) )}));
		//line 181 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(c1, c2, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameInstance"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (181) )) )}));
		//line 182 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(c1, c3, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameInstance"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (182) )) )}));
		//line 184 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(r1, r2, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameInstance"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (184) )) )}));
		//line 185 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(r1, r3, false, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameInstance"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (185) )) )}));
		//line 186 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(r1, r3, true, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameInstance"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (186) )) )}));
		//line 188 "/shared/core/thx/TestAssert.hx"
		this.expect(4, 2, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameInstance"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (188) )) )}));
	}
	
	
	public void testSameIterable()
	{
		//line 192 "/shared/core/thx/TestAssert.hx"
		haxe.root.List list1 = new haxe.root.List();
		//line 193 "/shared/core/thx/TestAssert.hx"
		list1.add("a");
		//line 194 "/shared/core/thx/TestAssert.hx"
		list1.add(1);
		//line 195 "/shared/core/thx/TestAssert.hx"
		haxe.root.List<java.lang.Object> s1 = new haxe.root.List<java.lang.Object>();
		//line 196 "/shared/core/thx/TestAssert.hx"
		s1.add(2);
		//line 197 "/shared/core/thx/TestAssert.hx"
		list1.add(s1);
		//line 198 "/shared/core/thx/TestAssert.hx"
		haxe.root.List list2 = new haxe.root.List();
		//line 199 "/shared/core/thx/TestAssert.hx"
		list2.add("a");
		//line 200 "/shared/core/thx/TestAssert.hx"
		list2.add(1);
		//line 201 "/shared/core/thx/TestAssert.hx"
		list2.add(s1);
		//line 202 "/shared/core/thx/TestAssert.hx"
		haxe.root.List list3 = new haxe.root.List();
		//line 203 "/shared/core/thx/TestAssert.hx"
		list3.add("a");
		//line 204 "/shared/core/thx/TestAssert.hx"
		list3.add(1);
		//line 205 "/shared/core/thx/TestAssert.hx"
		list3.add(new haxe.root.List());
		//line 207 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(list1, list2, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameIterable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (207) )) )}));
		//line 208 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(list1, list3, false, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameIterable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (208) )) )}));
		//line 209 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(list1, list3, true, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameIterable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (209) )) )}));
		//line 211 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(new haxe.root.IntIterator(0, 3), new haxe.root.IntIterator(0, 3), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameIterable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (211) )) )}));
		//line 212 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(new haxe.root.IntIterator(0, 3), new haxe.root.IntIterator(0, 4), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameIterable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (212) )) )}));
		//line 214 "/shared/core/thx/TestAssert.hx"
		this.expect(3, 2, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameIterable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (214) )) )}));
	}
	
	
	public void testSameMap()
	{
		//line 218 "/shared/core/thx/TestAssert.hx"
		haxe.ds.StringMap<java.lang.String> h1 = new haxe.ds.StringMap<java.lang.String>();
		//line 219 "/shared/core/thx/TestAssert.hx"
		h1.set("a", "b");
		//line 220 "/shared/core/thx/TestAssert.hx"
		h1.set("c", "d");
		//line 221 "/shared/core/thx/TestAssert.hx"
		haxe.ds.StringMap<java.lang.String> h2 = new haxe.ds.StringMap<java.lang.String>();
		//line 222 "/shared/core/thx/TestAssert.hx"
		h2.set("a", "b");
		//line 223 "/shared/core/thx/TestAssert.hx"
		h2.set("c", "d");
		//line 224 "/shared/core/thx/TestAssert.hx"
		haxe.ds.StringMap h3 = new haxe.ds.StringMap();
		//line 225 "/shared/core/thx/TestAssert.hx"
		haxe.ds.StringMap<java.lang.String> h4 = new haxe.ds.StringMap<java.lang.String>();
		//line 226 "/shared/core/thx/TestAssert.hx"
		h4.set("c", "d");
		//line 228 "/shared/core/thx/TestAssert.hx"
		haxe.ds.IntMap<java.lang.String> i1 = new haxe.ds.IntMap<java.lang.String>();
		//line 229 "/shared/core/thx/TestAssert.hx"
		i1.set(((int) (2) ), haxe.lang.Runtime.toString("b"));
		//line 230 "/shared/core/thx/TestAssert.hx"
		haxe.ds.IntMap<java.lang.String> i2 = new haxe.ds.IntMap<java.lang.String>();
		//line 231 "/shared/core/thx/TestAssert.hx"
		i2.set(((int) (2) ), haxe.lang.Runtime.toString("b"));
		//line 233 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(h1, h2, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameMap"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (233) )) )}));
		//line 234 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(h1, h3, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameMap"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (234) )) )}));
		//line 235 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(h1, h4, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameMap"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (235) )) )}));
		//line 236 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(i1, i2, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameMap"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (236) )) )}));
		//line 238 "/shared/core/thx/TestAssert.hx"
		this.expect(2, 2, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameMap"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (238) )) )}));
	}
	
	
	public void testSameEnums()
	{
		//line 243 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(thx._TestAssert.Sample.None, thx._TestAssert.Sample.None, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameEnums"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (243) )) )}));
		//line 244 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(thx._TestAssert.Sample.Some("a"), thx._TestAssert.Sample.Some("a"), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameEnums"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (244) )) )}));
		//line 245 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(thx._TestAssert.Sample.Some("a"), thx._TestAssert.Sample.Some("b"), true, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameEnums"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (245) )) )}));
		//line 246 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(thx._TestAssert.Sample.Some("a"), thx._TestAssert.Sample.Some("b"), false, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameEnums"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (246) )) )}));
		//line 247 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(thx._TestAssert.Sample.Some("a"), thx._TestAssert.Sample.None, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameEnums"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (247) )) )}));
		//line 248 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(thx._TestAssert.Sample.Rec(thx._TestAssert.Sample.Rec(thx._TestAssert.Sample.Some("a"))), thx._TestAssert.Sample.Rec(thx._TestAssert.Sample.Rec(thx._TestAssert.Sample.Some("a"))), null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameEnums"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (248) )) )}));
		//line 249 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(thx._TestAssert.Sample.Rec(thx._TestAssert.Sample.Rec(thx._TestAssert.Sample.Some("a"))), thx._TestAssert.Sample.Rec(thx._TestAssert.Sample.None), true, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameEnums"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (249) )) )}));
		//line 250 "/shared/core/thx/TestAssert.hx"
		thx.Assert.same(thx._TestAssert.Sample.Rec(thx._TestAssert.Sample.Rec(thx._TestAssert.Sample.Some("a"))), thx._TestAssert.Sample.Rec(thx._TestAssert.Sample.Rec(thx._TestAssert.Sample.None)), false, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameEnums"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (250) )) )}));
		//line 252 "/shared/core/thx/TestAssert.hx"
		this.expect(4, 4, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testSameEnums"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (252) )) )}));
	}
	
	
	public void testEquals()
	{
		//line 256 "/shared/core/thx/TestAssert.hx"
		haxe.root.Array values = new haxe.root.Array(new java.lang.Object[]{"e", 1, 0.1, new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{}, new double[]{})});
		//line 257 "/shared/core/thx/TestAssert.hx"
		haxe.root.Array expecteds = new haxe.root.Array(new java.lang.Object[]{"e", 1, 0.1, new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{}, new double[]{})});
		//line 258 "/shared/core/thx/TestAssert.hx"
		int i = 0;
		//line 260 "/shared/core/thx/TestAssert.hx"
		{
			//line 260 "/shared/core/thx/TestAssert.hx"
			int _g = 0;
			//line 260 "/shared/core/thx/TestAssert.hx"
			while (( _g < expecteds.length ))
			{
				//line 260 "/shared/core/thx/TestAssert.hx"
				java.lang.Object expected = expecteds.__get(_g);
				//line 260 "/shared/core/thx/TestAssert.hx"
				 ++ _g;
				//line 261 "/shared/core/thx/TestAssert.hx"
				{
					//line 261 "/shared/core/thx/TestAssert.hx"
					int _g1 = 0;
					//line 261 "/shared/core/thx/TestAssert.hx"
					while (( _g1 < values.length ))
					{
						//line 261 "/shared/core/thx/TestAssert.hx"
						java.lang.Object value = values.__get(_g1);
						//line 261 "/shared/core/thx/TestAssert.hx"
						 ++ _g1;
						//line 262 "/shared/core/thx/TestAssert.hx"
						 ++ i;
						//line 263 "/shared/core/thx/TestAssert.hx"
						thx.Assert.equals(expected, value, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (263) )) )}));
					}
					
				}
				
			}
			
		}
		
		//line 265 "/shared/core/thx/TestAssert.hx"
		this.expect(3, ( i - 3 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (265) )) )}));
	}
	
	
	public void testNearEqualsSuccess()
	{
		//line 269 "/shared/core/thx/TestAssert.hx"
		int counter = 0;
		//line 269 "/shared/core/thx/TestAssert.hx"
		haxe.root.Array<java.lang.Object> tests = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{new haxe.lang.DynamicObject(new java.lang.String[]{"tests"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.1) ), ((java.lang.Object) (0.100000000000000000000000000001) ), ((java.lang.Object) (0.099999999999999999999999999999) )})}, new java.lang.String[]{"expected"}, new double[]{((double) (0.1) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"tests"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (1) ), ((java.lang.Object) (1.000000000000000000000000000001) ), ((java.lang.Object) (0.999999999999999999999999999999) )})}, new java.lang.String[]{"expected"}, new double[]{((double) (((double) (1) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"tests"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (java.lang.Double.NaN) )})}, new java.lang.String[]{"expected"}, new double[]{((double) (java.lang.Double.NaN) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"tests"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (java.lang.Double.NEGATIVE_INFINITY) )})}, new java.lang.String[]{"expected"}, new double[]{((double) (java.lang.Double.NEGATIVE_INFINITY) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"tests"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (java.lang.Double.POSITIVE_INFINITY) )})}, new java.lang.String[]{"expected"}, new double[]{((double) (java.lang.Double.POSITIVE_INFINITY) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"tests"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (java.lang.Math.PI) )})}, new java.lang.String[]{"expected"}, new double[]{((double) (java.lang.Math.PI) )})});
		//line 278 "/shared/core/thx/TestAssert.hx"
		{
			//line 278 "/shared/core/thx/TestAssert.hx"
			int _g = 0;
			//line 278 "/shared/core/thx/TestAssert.hx"
			while (( _g < tests.length ))
			{
				//line 278 "/shared/core/thx/TestAssert.hx"
				java.lang.Object test = tests.__get(_g);
				//line 278 "/shared/core/thx/TestAssert.hx"
				 ++ _g;
				//line 279 "/shared/core/thx/TestAssert.hx"
				{
					//line 279 "/shared/core/thx/TestAssert.hx"
					int _g1 = 0;
					//line 279 "/shared/core/thx/TestAssert.hx"
					haxe.root.Array<java.lang.Object> _g2 = ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(test, "tests", true)) );
					//line 279 "/shared/core/thx/TestAssert.hx"
					while (( _g1 < _g2.length ))
					{
						//line 279 "/shared/core/thx/TestAssert.hx"
						double value = ((double) (haxe.lang.Runtime.toDouble(_g2.__get(_g1))) );
						//line 279 "/shared/core/thx/TestAssert.hx"
						 ++ _g1;
						//line 280 "/shared/core/thx/TestAssert.hx"
						 ++ counter;
						//line 281 "/shared/core/thx/TestAssert.hx"
						thx.Assert.nearEquals(haxe.lang.Runtime.getField_f(test, "expected", true), value, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testNearEqualsSuccess"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (281) )) )}));
					}
					
				}
				
			}
			
		}
		
		//line 284 "/shared/core/thx/TestAssert.hx"
		this.expect(counter, 0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testNearEqualsSuccess"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (284) )) )}));
	}
	
	
	public void testNearEqualsFail()
	{
		//line 288 "/shared/core/thx/TestAssert.hx"
		int counter = 0;
		//line 288 "/shared/core/thx/TestAssert.hx"
		haxe.root.Array<java.lang.Object> tests = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{new haxe.lang.DynamicObject(new java.lang.String[]{"tests"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.2) ), ((java.lang.Object) (0.10000001) ), ((java.lang.Object) (0.0999998) ), ((java.lang.Object) (java.lang.Double.NaN) ), ((java.lang.Object) (java.lang.Double.POSITIVE_INFINITY) ), ((java.lang.Object) (java.lang.Double.NEGATIVE_INFINITY) )})}, new java.lang.String[]{"expected"}, new double[]{((double) (0.1) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"tests"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (2) ), ((java.lang.Object) (1.1) ), ((java.lang.Object) (0.9) ), ((java.lang.Object) (java.lang.Double.POSITIVE_INFINITY) ), ((java.lang.Object) (java.lang.Double.NEGATIVE_INFINITY) )})}, new java.lang.String[]{"expected"}, new double[]{((double) (java.lang.Double.NaN) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"tests"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (2) ), ((java.lang.Object) (1.1) ), ((java.lang.Object) (0.9) ), ((java.lang.Object) (java.lang.Double.NaN) ), ((java.lang.Object) (java.lang.Double.POSITIVE_INFINITY) )})}, new java.lang.String[]{"expected"}, new double[]{((double) (java.lang.Double.NEGATIVE_INFINITY) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"tests"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (2) ), ((java.lang.Object) (1.1) ), ((java.lang.Object) (0.9) ), ((java.lang.Object) (java.lang.Double.NaN) ), ((java.lang.Object) (java.lang.Double.NEGATIVE_INFINITY) )})}, new java.lang.String[]{"expected"}, new double[]{((double) (java.lang.Double.POSITIVE_INFINITY) )})});
		//line 296 "/shared/core/thx/TestAssert.hx"
		{
			//line 296 "/shared/core/thx/TestAssert.hx"
			int _g = 0;
			//line 296 "/shared/core/thx/TestAssert.hx"
			while (( _g < tests.length ))
			{
				//line 296 "/shared/core/thx/TestAssert.hx"
				java.lang.Object test = tests.__get(_g);
				//line 296 "/shared/core/thx/TestAssert.hx"
				 ++ _g;
				//line 297 "/shared/core/thx/TestAssert.hx"
				{
					//line 297 "/shared/core/thx/TestAssert.hx"
					int _g1 = 0;
					//line 297 "/shared/core/thx/TestAssert.hx"
					haxe.root.Array<java.lang.Object> _g2 = ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(test, "tests", true)) );
					//line 297 "/shared/core/thx/TestAssert.hx"
					while (( _g1 < _g2.length ))
					{
						//line 297 "/shared/core/thx/TestAssert.hx"
						double value = ((double) (haxe.lang.Runtime.toDouble(_g2.__get(_g1))) );
						//line 297 "/shared/core/thx/TestAssert.hx"
						 ++ _g1;
						//line 298 "/shared/core/thx/TestAssert.hx"
						 ++ counter;
						//line 299 "/shared/core/thx/TestAssert.hx"
						thx.Assert.nearEquals(haxe.lang.Runtime.getField_f(test, "expected", true), value, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testNearEqualsFail"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (299) )) )}));
					}
					
				}
				
			}
			
		}
		
		//line 302 "/shared/core/thx/TestAssert.hx"
		this.expect(0, counter, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testNearEqualsFail"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (302) )) )}));
	}
	
	
	public void testPass()
	{
		//line 306 "/shared/core/thx/TestAssert.hx"
		thx.Assert.pass(null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testPass"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (306) )) )}));
		//line 307 "/shared/core/thx/TestAssert.hx"
		this.expect(1, 0, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testPass"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (307) )) )}));
	}
	
	
	public void testFail()
	{
		//line 311 "/shared/core/thx/TestAssert.hx"
		thx.Assert.fail(null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testFail"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (311) )) )}));
		//line 312 "/shared/core/thx/TestAssert.hx"
		this.expect(0, 1, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testFail"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (312) )) )}));
	}
	
	
	public void testWarn()
	{
		//line 316 "/shared/core/thx/TestAssert.hx"
		thx.Assert.warn("", new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testWarn"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (316) )) )}));
		//line 317 "/shared/core/thx/TestAssert.hx"
		this.expect(0, 0, 1, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestAssert", "TestAssert.hx", "testWarn"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (317) )) )}));
	}
	
	
	public void expect(int successes, int failures, java.lang.Object warnings, java.lang.Object pos)
	{
		//line 320 "/shared/core/thx/TestAssert.hx"
		int __temp_warnings160 = ( (haxe.lang.Runtime.eq(warnings, null)) ? (0) : (((int) (haxe.lang.Runtime.toInt(warnings)) )) );
		//line 321 "/shared/core/thx/TestAssert.hx"
		utest.Assert.equals(successes, this.behavior.successes, ( ( ( "expected " + successes ) + " successes but they are " ) + this.behavior.successes ), pos);
		//line 322 "/shared/core/thx/TestAssert.hx"
		utest.Assert.equals(failures, this.behavior.failures, ( ( ( "expected " + failures ) + " failures but they are " ) + this.behavior.failures ), pos);
		//line 323 "/shared/core/thx/TestAssert.hx"
		utest.Assert.equals(__temp_warnings160, this.behavior.warnings, ( ( ( "expected " + __temp_warnings160 ) + " warnings but they are " ) + this.behavior.warnings ), pos);
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 7 "/shared/core/thx/TestAssert.hx"
		{
			//line 7 "/shared/core/thx/TestAssert.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/core/thx/TestAssert.hx"
			switch (field.hashCode())
			{
				case 114240:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("sub")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						this.sub = ((thx.TestAssert) (value) );
						//line 7 "/shared/core/thx/TestAssert.hx"
						return value;
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case 3419713:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("orig")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						this.orig = ((thx.IAssertBehavior) (value) );
						//line 7 "/shared/core/thx/TestAssert.hx"
						return value;
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case 111972721:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("value")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						this.value = haxe.lang.Runtime.toString(value);
						//line 7 "/shared/core/thx/TestAssert.hx"
						return value;
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case 1510912594:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("behavior")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						this.behavior = ((thx.CollectBehavior) (value) );
						//line 7 "/shared/core/thx/TestAssert.hx"
						return value;
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/core/thx/TestAssert.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/core/thx/TestAssert.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 7 "/shared/core/thx/TestAssert.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 7 "/shared/core/thx/TestAssert.hx"
		{
			//line 7 "/shared/core/thx/TestAssert.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/core/thx/TestAssert.hx"
			switch (field.hashCode())
			{
				case -1289163687:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("expect")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "expect")) );
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case 3419713:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("orig")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						return this.orig;
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case -1146703304:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testWarn")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testWarn")) );
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case 1510912594:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("behavior")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						return this.behavior;
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case -1147210032:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testFail")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFail")) );
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case 109329021:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("setup")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "setup")) );
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case -1146911805:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testPass")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testPass")) );
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case -1663474172:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("teardown")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "teardown")) );
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case -1570386185:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testNearEqualsFail")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testNearEqualsFail")) );
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case 1439109734:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testIsBool")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testIsBool")) );
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case 923438474:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testNearEqualsSuccess")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testNearEqualsSuccess")) );
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case 1439472899:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testIsNull")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testIsNull")) );
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case 1324251889:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testEquals")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testEquals")) );
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case 1735962120:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testNotNull")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testNotNull")) );
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case 1432062554:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testSameEnums")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSameEnums")) );
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case 2109531274:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testRaisesSuccess")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testRaisesSuccess")) );
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case 1471886884:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testSameMap")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSameMap")) );
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case -1404840431:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testRaisesFailure")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testRaisesFailure")) );
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case -377130838:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testSameIterable")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSameIterable")) );
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case -877170340:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testIs")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testIs")) );
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case -1004519219:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testSameInstance")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSameInstance")) );
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case 1355737007:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testSamePrimitive")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSamePrimitive")) );
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case 114240:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("sub")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						return this.sub;
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case -1615915150:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testSameType")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSameType")) );
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case 111972721:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("value")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						return this.value;
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case 1428484385:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testSameArray")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSameArray")) );
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case 1719139703:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testSameObject")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSameObject")) );
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/core/thx/TestAssert.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/core/thx/TestAssert.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 7 "/shared/core/thx/TestAssert.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 7 "/shared/core/thx/TestAssert.hx"
		{
			//line 7 "/shared/core/thx/TestAssert.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/core/thx/TestAssert.hx"
			switch (field.hashCode())
			{
				case -1289163687:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("expect")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						this.expect(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ), ((int) (haxe.lang.Runtime.toInt(dynargs.__get(1))) ), dynargs.__get(2), dynargs.__get(3));
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case 109329021:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("setup")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						this.setup();
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case -1146703304:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testWarn")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						this.testWarn();
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case -1663474172:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("teardown")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						this.teardown();
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case -1147210032:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testFail")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						this.testFail();
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case 1439109734:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testIsBool")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						this.testIsBool();
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case -1146911805:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testPass")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						this.testPass();
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case 1439472899:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testIsNull")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						this.testIsNull();
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case -1570386185:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testNearEqualsFail")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						this.testNearEqualsFail();
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case 1735962120:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testNotNull")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						this.testNotNull();
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case 923438474:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testNearEqualsSuccess")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						this.testNearEqualsSuccess();
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case 2109531274:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testRaisesSuccess")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						this.testRaisesSuccess();
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case 1324251889:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testEquals")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						this.testEquals();
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case -1404840431:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testRaisesFailure")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						this.testRaisesFailure();
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case 1432062554:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testSameEnums")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						this.testSameEnums();
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case -877170340:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testIs")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						this.testIs();
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case 1471886884:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testSameMap")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						this.testSameMap();
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case 1355737007:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testSamePrimitive")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						this.testSamePrimitive();
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case -377130838:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testSameIterable")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						this.testSameIterable();
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case -1615915150:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testSameType")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						this.testSameType();
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case -1004519219:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testSameInstance")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						this.testSameInstance();
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case 1428484385:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testSameArray")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						this.testSameArray();
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
				case 1719139703:
				{
					//line 7 "/shared/core/thx/TestAssert.hx"
					if (field.equals("testSameObject")) 
					{
						//line 7 "/shared/core/thx/TestAssert.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestAssert.hx"
						this.testSameObject();
					}
					
					//line 7 "/shared/core/thx/TestAssert.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/core/thx/TestAssert.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/core/thx/TestAssert.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 7 "/shared/core/thx/TestAssert.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 7 "/shared/core/thx/TestAssert.hx"
		baseArr.push("sub");
		//line 7 "/shared/core/thx/TestAssert.hx"
		baseArr.push("value");
		//line 7 "/shared/core/thx/TestAssert.hx"
		baseArr.push("behavior");
		//line 7 "/shared/core/thx/TestAssert.hx"
		baseArr.push("orig");
		//line 7 "/shared/core/thx/TestAssert.hx"
		{
			//line 7 "/shared/core/thx/TestAssert.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


