// Generated by Haxe 3.3.0
package thx;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestLocalDate extends haxe.lang.HxObject
{
	public TestLocalDate(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestLocalDate()
	{
		//line 8 "/shared/core/thx/TestLocalDate.hx"
		thx.TestLocalDate.__hx_ctor_thx_TestLocalDate(this);
	}
	
	
	public static void __hx_ctor_thx_TestLocalDate(thx.TestLocalDate __temp_me190)
	{
		//line 10 "/shared/core/thx/TestLocalDate.hx"
		__temp_me190.tomorrow = thx._LocalDate.LocalDate_Impl_.create(2015, 7, 27);
		//line 9 "/shared/core/thx/TestLocalDate.hx"
		__temp_me190.date = thx._LocalDate.LocalDate_Impl_.create(2015, 7, 26);
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 7 "/shared/core/thx/TestLocalDate.hx"
		return new thx.TestLocalDate(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 7 "/shared/core/thx/TestLocalDate.hx"
		return new thx.TestLocalDate();
	}
	
	
	public int date;
	
	public int tomorrow;
	
	public void testCreate()
	{
		//line 14 "/shared/core/thx/TestLocalDate.hx"
		utest.Assert.equals(2015, thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this.date) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), ( ( "expected 2015 but got " + thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this.date) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR) ) + " for year" ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testCreate"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (14) )) )}));
		//line 15 "/shared/core/thx/TestLocalDate.hx"
		utest.Assert.equals(7, thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this.date) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH), ( ( "expected 7 but got " + thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this.date) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH) ) + " for month" ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testCreate"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (15) )) )}));
		//line 16 "/shared/core/thx/TestLocalDate.hx"
		utest.Assert.equals(26, thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this.date) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY), ( ( "expected 26 but got " + thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this.date) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY) ) + " for day" ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testCreate"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (16) )) )}));
		//line 18 "/shared/core/thx/TestLocalDate.hx"
		utest.Assert.equals(((int) (0) ), thx._LocalDate.LocalDate_Impl_.get_dayOfWeek(this.date), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testCreate"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (18) )) )}));
		//line 22 "/shared/core/thx/TestLocalDate.hx"
		java.lang.Object __temp_stmt11 = null;
		//line 22 "/shared/core/thx/TestLocalDate.hx"
		{
			//line 22 "/shared/core/thx/TestLocalDate.hx"
			int __temp_odecl1 = thx._LocalDate.LocalDate_Impl_.fromString("2014-12-01");
			//line 22 "/shared/core/thx/TestLocalDate.hx"
			int __temp_odecl2 = thx._LocalDate.LocalDate_Impl_.create(2014, 12, 1);
			//line 22 "/shared/core/thx/TestLocalDate.hx"
			__temp_stmt11 = new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"expected", "test"}, new double[]{((double) (((double) (__temp_odecl1) )) ), ((double) (((double) (__temp_odecl2) )) )});
		}
		
		//line 24 "/shared/core/thx/TestLocalDate.hx"
		java.lang.Object __temp_stmt12 = null;
		//line 24 "/shared/core/thx/TestLocalDate.hx"
		{
			//line 24 "/shared/core/thx/TestLocalDate.hx"
			int __temp_odecl3 = thx._LocalDate.LocalDate_Impl_.fromString("2015-03-01");
			//line 24 "/shared/core/thx/TestLocalDate.hx"
			int __temp_odecl4 = thx._LocalDate.LocalDate_Impl_.create(2014, 15, 1);
			//line 24 "/shared/core/thx/TestLocalDate.hx"
			__temp_stmt12 = new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"expected", "test"}, new double[]{((double) (((double) (__temp_odecl3) )) ), ((double) (((double) (__temp_odecl4) )) )});
		}
		
		//line 25 "/shared/core/thx/TestLocalDate.hx"
		java.lang.Object __temp_stmt13 = null;
		//line 25 "/shared/core/thx/TestLocalDate.hx"
		{
			//line 25 "/shared/core/thx/TestLocalDate.hx"
			int __temp_odecl5 = thx._LocalDate.LocalDate_Impl_.fromString("2013-11-01");
			//line 25 "/shared/core/thx/TestLocalDate.hx"
			int __temp_odecl6 = thx._LocalDate.LocalDate_Impl_.create(2014, -1, 1);
			//line 25 "/shared/core/thx/TestLocalDate.hx"
			__temp_stmt13 = new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"expected", "test"}, new double[]{((double) (((double) (__temp_odecl5) )) ), ((double) (((double) (__temp_odecl6) )) )});
		}
		
		//line 28 "/shared/core/thx/TestLocalDate.hx"
		java.lang.Object __temp_stmt14 = null;
		//line 28 "/shared/core/thx/TestLocalDate.hx"
		{
			//line 28 "/shared/core/thx/TestLocalDate.hx"
			int __temp_odecl7 = thx._LocalDate.LocalDate_Impl_.fromString("2014-03-04");
			//line 28 "/shared/core/thx/TestLocalDate.hx"
			int __temp_odecl8 = thx._LocalDate.LocalDate_Impl_.create(2014, 2, 32);
			//line 28 "/shared/core/thx/TestLocalDate.hx"
			__temp_stmt14 = new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"expected", "test"}, new double[]{((double) (((double) (__temp_odecl7) )) ), ((double) (((double) (__temp_odecl8) )) )});
		}
		
		//line 29 "/shared/core/thx/TestLocalDate.hx"
		java.lang.Object __temp_stmt15 = null;
		//line 29 "/shared/core/thx/TestLocalDate.hx"
		{
			//line 29 "/shared/core/thx/TestLocalDate.hx"
			int __temp_odecl9 = thx._LocalDate.LocalDate_Impl_.fromString("2013-12-31");
			//line 29 "/shared/core/thx/TestLocalDate.hx"
			int __temp_odecl10 = thx._LocalDate.LocalDate_Impl_.create(2014, 1, 0);
			//line 29 "/shared/core/thx/TestLocalDate.hx"
			__temp_stmt15 = new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"expected", "test"}, new double[]{((double) (((double) (__temp_odecl9) )) ), ((double) (((double) (__temp_odecl10) )) )});
		}
		
		//line 20 "/shared/core/thx/TestLocalDate.hx"
		haxe.root.Array<java.lang.Object> expectations = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{__temp_stmt11, __temp_stmt12, __temp_stmt13, __temp_stmt14, __temp_stmt15});
		//line 32 "/shared/core/thx/TestLocalDate.hx"
		expectations.map(((haxe.lang.Function) (( (( thx.TestLocalDate_testCreate_32__Fun.__hx_current != null )) ? (thx.TestLocalDate_testCreate_32__Fun.__hx_current) : (thx.TestLocalDate_testCreate_32__Fun.__hx_current = ((thx.TestLocalDate_testCreate_32__Fun) (new thx.TestLocalDate_testCreate_32__Fun()) )) )) ));
	}
	
	
	public void testToString()
	{
		//line 38 "/shared/core/thx/TestLocalDate.hx"
		utest.Assert.equals("2015-07-26", thx._LocalDate.LocalDate_Impl_.toString(this.date), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testToString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (38) )) )}));
		//line 39 "/shared/core/thx/TestLocalDate.hx"
		utest.Assert.equals("1-01-01", thx._LocalDate.LocalDate_Impl_.toString(((int) (0) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testToString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (39) )) )}));
	}
	
	
	public void testEquals()
	{
		//line 43 "/shared/core/thx/TestLocalDate.hx"
		utest.Assert.isTrue(( ((int) (this.date) ) == ((int) (this.date) ) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (43) )) )}));
		//line 44 "/shared/core/thx/TestLocalDate.hx"
		utest.Assert.isTrue(( ((int) (this.date) ) != ((int) (this.tomorrow) ) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (44) )) )}));
	}
	
	
	public void testCompare()
	{
		//line 48 "/shared/core/thx/TestLocalDate.hx"
		utest.Assert.isFalse(( ( ((int) (this.date) ) - ((int) (this.date) ) ) > 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (48) )) )}));
		//line 49 "/shared/core/thx/TestLocalDate.hx"
		utest.Assert.isTrue(( ( ((int) (this.date) ) - ((int) (this.date) ) ) >= 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (49) )) )}));
		//line 50 "/shared/core/thx/TestLocalDate.hx"
		utest.Assert.isFalse(( ( ((int) (this.date) ) - ((int) (this.date) ) ) < 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (50) )) )}));
		//line 51 "/shared/core/thx/TestLocalDate.hx"
		utest.Assert.isTrue(( ( ((int) (this.date) ) - ((int) (this.date) ) ) <= 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (51) )) )}));
		//line 53 "/shared/core/thx/TestLocalDate.hx"
		utest.Assert.isFalse(( ( ((int) (this.date) ) - ((int) (this.tomorrow) ) ) > 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (53) )) )}));
		//line 54 "/shared/core/thx/TestLocalDate.hx"
		utest.Assert.isFalse(( ( ((int) (this.date) ) - ((int) (this.tomorrow) ) ) >= 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (54) )) )}));
		//line 55 "/shared/core/thx/TestLocalDate.hx"
		utest.Assert.isTrue(( ( ((int) (this.date) ) - ((int) (this.tomorrow) ) ) < 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (55) )) )}));
		//line 56 "/shared/core/thx/TestLocalDate.hx"
		utest.Assert.isTrue(( ( ((int) (this.date) ) - ((int) (this.tomorrow) ) ) <= 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (56) )) )}));
		//line 58 "/shared/core/thx/TestLocalDate.hx"
		utest.Assert.isTrue(( ( ((int) (this.tomorrow) ) - ((int) (this.date) ) ) > 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (58) )) )}));
		//line 59 "/shared/core/thx/TestLocalDate.hx"
		utest.Assert.isTrue(( ( ((int) (this.tomorrow) ) - ((int) (this.date) ) ) >= 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (59) )) )}));
		//line 60 "/shared/core/thx/TestLocalDate.hx"
		utest.Assert.isFalse(( ( ((int) (this.tomorrow) ) - ((int) (this.date) ) ) < 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (60) )) )}));
		//line 61 "/shared/core/thx/TestLocalDate.hx"
		utest.Assert.isFalse(( ( ((int) (this.tomorrow) ) - ((int) (this.date) ) ) <= 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (61) )) )}));
	}
	
	
	public void testFromToDate()
	{
		//line 67 "/shared/core/thx/TestLocalDate.hx"
		int this1 = this.date;
		//line 67 "/shared/core/thx/TestLocalDate.hx"
		int d = thx._LocalDate.LocalDate_Impl_.fromDate(new haxe.root.Date(thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), ( thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH) - 1 ), thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY), 0, 0, 0));
		//line 68 "/shared/core/thx/TestLocalDate.hx"
		utest.Assert.isTrue(( ((int) (this.date) ) == ((int) (d) ) ), ( ( ( "expected " + thx._LocalDate.LocalDate_Impl_.toString(this.date) ) + " but got " ) + thx._LocalDate.LocalDate_Impl_.toString(((int) (d) )) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testFromToDate"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (68) )) )}));
	}
	
	
	public void testFromToTime()
	{
		//line 72 "/shared/core/thx/TestLocalDate.hx"
		int this1 = this.date;
		//line 72 "/shared/core/thx/TestLocalDate.hx"
		int date2 = thx._LocalDate.LocalDate_Impl_.fromTime(((double) (new haxe.root.Date(thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), ( thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH) - 1 ), thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY), 0, 0, 0).date.getTime()) ));
		//line 73 "/shared/core/thx/TestLocalDate.hx"
		utest.Assert.isTrue(( ((int) (this.date) ) == ((int) (date2) ) ), ( ( ( "expected " + thx._LocalDate.LocalDate_Impl_.toString(this.date) ) + " but got " ) + thx._LocalDate.LocalDate_Impl_.toString(date2) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testFromToTime"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (73) )) )}));
	}
	
	
	public void testFromToString()
	{
		//line 78 "/shared/core/thx/TestLocalDate.hx"
		utest.Assert.isTrue(( ((int) (this.date) ) == ((int) (thx._LocalDate.LocalDate_Impl_.fromString(thx._LocalDate.LocalDate_Impl_.toString(this.date))) ) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testFromToString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (78) )) )}));
		//line 80 "/shared/core/thx/TestLocalDate.hx"
		utest.Assert.equals("-1-07-27", thx._LocalDate.LocalDate_Impl_.toString(thx._LocalDate.LocalDate_Impl_.fromString("0-06-07")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testFromToString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (80) )) )}));
		//line 81 "/shared/core/thx/TestLocalDate.hx"
		utest.Assert.equals("-1-06-07", thx._LocalDate.LocalDate_Impl_.toString(thx._LocalDate.LocalDate_Impl_.fromString("-1-06-07")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testFromToString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (81) )) )}));
		//line 82 "/shared/core/thx/TestLocalDate.hx"
		utest.Assert.equals("1-06-07", thx._LocalDate.LocalDate_Impl_.toString(thx._LocalDate.LocalDate_Impl_.fromString("1-06-07")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testFromToString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (82) )) )}));
		//line 83 "/shared/core/thx/TestLocalDate.hx"
		utest.Assert.equals("-2014-01-01", thx._LocalDate.LocalDate_Impl_.toString(thx._LocalDate.LocalDate_Impl_.fromString("-2014-01-01")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testFromToString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (83) )) )}));
	}
	
	
	public void testAdd()
	{
		//line 87 "/shared/core/thx/TestLocalDate.hx"
		int this1 = ( ((int) (thx._LocalDate.LocalDate_Impl_.addMonths(thx._LocalDate.LocalDate_Impl_.addMonths(((int) (this.date) ), 24), 9)) ) + 10 );
		//line 87 "/shared/core/thx/TestLocalDate.hx"
		int d = ((int) (this1) );
		//line 92 "/shared/core/thx/TestLocalDate.hx"
		utest.Assert.isTrue(( ((int) (d) ) == ((int) (thx._LocalDate.LocalDate_Impl_.fromString("2018-05-06")) ) ), ( ( ( "expected " + "2018-05-06" ) + " but got " ) + thx._LocalDate.LocalDate_Impl_.toString(d) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testAdd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (92) )) )}));
	}
	
	
	public void testAddMonth()
	{
		//line 97 "/shared/core/thx/TestLocalDate.hx"
		java.lang.Object __temp_stmt15 = null;
		//line 97 "/shared/core/thx/TestLocalDate.hx"
		{
			//line 97 "/shared/core/thx/TestLocalDate.hx"
			int __temp_odecl1 = thx._LocalDate.LocalDate_Impl_.addMonths(this.date, 1);
			//line 97 "/shared/core/thx/TestLocalDate.hx"
			int __temp_odecl2 = thx._LocalDate.LocalDate_Impl_.fromString("2015-08-26");
			//line 97 "/shared/core/thx/TestLocalDate.hx"
			__temp_stmt15 = new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"e", "t"}, new double[]{((double) (((double) (__temp_odecl2) )) ), ((double) (((double) (__temp_odecl1) )) )});
		}
		
		//line 98 "/shared/core/thx/TestLocalDate.hx"
		java.lang.Object __temp_stmt16 = null;
		//line 98 "/shared/core/thx/TestLocalDate.hx"
		{
			//line 98 "/shared/core/thx/TestLocalDate.hx"
			int __temp_odecl3 = thx._LocalDate.LocalDate_Impl_.addMonths(this.date, 0);
			//line 98 "/shared/core/thx/TestLocalDate.hx"
			int __temp_odecl4 = thx._LocalDate.LocalDate_Impl_.fromString("2015-07-26");
			//line 98 "/shared/core/thx/TestLocalDate.hx"
			__temp_stmt16 = new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"e", "t"}, new double[]{((double) (((double) (__temp_odecl4) )) ), ((double) (((double) (__temp_odecl3) )) )});
		}
		
		//line 99 "/shared/core/thx/TestLocalDate.hx"
		java.lang.Object __temp_stmt17 = null;
		//line 99 "/shared/core/thx/TestLocalDate.hx"
		{
			//line 99 "/shared/core/thx/TestLocalDate.hx"
			int __temp_odecl5 = thx._LocalDate.LocalDate_Impl_.addMonths(this.date, -1);
			//line 99 "/shared/core/thx/TestLocalDate.hx"
			int __temp_odecl6 = thx._LocalDate.LocalDate_Impl_.fromString("2015-06-26");
			//line 99 "/shared/core/thx/TestLocalDate.hx"
			__temp_stmt17 = new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"e", "t"}, new double[]{((double) (((double) (__temp_odecl6) )) ), ((double) (((double) (__temp_odecl5) )) )});
		}
		
		//line 101 "/shared/core/thx/TestLocalDate.hx"
		java.lang.Object __temp_stmt18 = null;
		//line 101 "/shared/core/thx/TestLocalDate.hx"
		{
			//line 101 "/shared/core/thx/TestLocalDate.hx"
			int __temp_odecl7 = thx._LocalDate.LocalDate_Impl_.addMonths(this.date, 7);
			//line 101 "/shared/core/thx/TestLocalDate.hx"
			int __temp_odecl8 = thx._LocalDate.LocalDate_Impl_.fromString("2016-02-26");
			//line 101 "/shared/core/thx/TestLocalDate.hx"
			__temp_stmt18 = new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"e", "t"}, new double[]{((double) (((double) (__temp_odecl8) )) ), ((double) (((double) (__temp_odecl7) )) )});
		}
		
		//line 102 "/shared/core/thx/TestLocalDate.hx"
		java.lang.Object __temp_stmt19 = null;
		//line 102 "/shared/core/thx/TestLocalDate.hx"
		{
			//line 102 "/shared/core/thx/TestLocalDate.hx"
			int __temp_odecl9 = thx._LocalDate.LocalDate_Impl_.addMonths(this.date, -7);
			//line 102 "/shared/core/thx/TestLocalDate.hx"
			int __temp_odecl10 = thx._LocalDate.LocalDate_Impl_.fromString("2014-12-26");
			//line 102 "/shared/core/thx/TestLocalDate.hx"
			__temp_stmt19 = new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"e", "t"}, new double[]{((double) (((double) (__temp_odecl10) )) ), ((double) (((double) (__temp_odecl9) )) )});
		}
		
		//line 104 "/shared/core/thx/TestLocalDate.hx"
		java.lang.Object __temp_stmt20 = null;
		//line 104 "/shared/core/thx/TestLocalDate.hx"
		{
			//line 104 "/shared/core/thx/TestLocalDate.hx"
			int __temp_odecl11 = thx._LocalDate.LocalDate_Impl_.addMonths(this.date, 14);
			//line 104 "/shared/core/thx/TestLocalDate.hx"
			int __temp_odecl12 = thx._LocalDate.LocalDate_Impl_.fromString("2016-09-26");
			//line 104 "/shared/core/thx/TestLocalDate.hx"
			__temp_stmt20 = new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"e", "t"}, new double[]{((double) (((double) (__temp_odecl12) )) ), ((double) (((double) (__temp_odecl11) )) )});
		}
		
		//line 105 "/shared/core/thx/TestLocalDate.hx"
		java.lang.Object __temp_stmt21 = null;
		//line 105 "/shared/core/thx/TestLocalDate.hx"
		{
			//line 105 "/shared/core/thx/TestLocalDate.hx"
			int __temp_odecl13 = thx._LocalDate.LocalDate_Impl_.addMonths(this.date, -14);
			//line 105 "/shared/core/thx/TestLocalDate.hx"
			int __temp_odecl14 = thx._LocalDate.LocalDate_Impl_.fromString("2014-05-26");
			//line 105 "/shared/core/thx/TestLocalDate.hx"
			__temp_stmt21 = new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"e", "t"}, new double[]{((double) (((double) (__temp_odecl14) )) ), ((double) (((double) (__temp_odecl13) )) )});
		}
		
		//line 96 "/shared/core/thx/TestLocalDate.hx"
		haxe.root.Array<java.lang.Object> tests = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{__temp_stmt15, __temp_stmt16, __temp_stmt17, __temp_stmt18, __temp_stmt19, __temp_stmt20, __temp_stmt21});
		//line 107 "/shared/core/thx/TestLocalDate.hx"
		{
			//line 107 "/shared/core/thx/TestLocalDate.hx"
			int _g = 0;
			//line 107 "/shared/core/thx/TestLocalDate.hx"
			while (( _g < tests.length ))
			{
				//line 107 "/shared/core/thx/TestLocalDate.hx"
				java.lang.Object test = tests.__get(_g);
				//line 107 "/shared/core/thx/TestLocalDate.hx"
				 ++ _g;
				//line 108 "/shared/core/thx/TestLocalDate.hx"
				utest.Assert.isTrue(( ((int) (haxe.lang.Runtime.getField_f(test, "t", true)) ) == ((int) (haxe.lang.Runtime.getField_f(test, "e", true)) ) ), ( ( ( "expexted " + thx._LocalDate.LocalDate_Impl_.toString(((int) (haxe.lang.Runtime.getField_f(test, "e", true)) )) ) + " but got " ) + thx._LocalDate.LocalDate_Impl_.toString(((int) (haxe.lang.Runtime.getField_f(test, "t", true)) )) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testAddMonth"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (108) )) )}));
			}
			
		}
		
	}
	
	
	public void testSnapNext()
	{
		//line 113 "/shared/core/thx/TestLocalDate.hx"
		this.assertSnapNext("2014-01-01", "2014-01-01", thx.TimePeriod.Minute, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (113) )) )}));
		//line 114 "/shared/core/thx/TestLocalDate.hx"
		this.assertSnapNext("2014-01-01", "2014-01-01", thx.TimePeriod.Hour, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (114) )) )}));
		//line 115 "/shared/core/thx/TestLocalDate.hx"
		this.assertSnapNext("2014-01-02", "2014-01-01", thx.TimePeriod.Day, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (115) )) )}));
		//line 116 "/shared/core/thx/TestLocalDate.hx"
		this.assertSnapNext("2014-01-01", "2013-12-31", thx.TimePeriod.Day, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (116) )) )}));
		//line 117 "/shared/core/thx/TestLocalDate.hx"
		this.assertSnapNext("2014-12-21", "2014-12-17", thx.TimePeriod.Week, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (117) )) )}));
		//line 118 "/shared/core/thx/TestLocalDate.hx"
		this.assertSnapNext("2014-12-21", "2014-12-18", thx.TimePeriod.Week, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (118) )) )}));
		//line 119 "/shared/core/thx/TestLocalDate.hx"
		this.assertSnapNext("2015-01-01", "2014-12-12", thx.TimePeriod.Month, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (119) )) )}));
		//line 120 "/shared/core/thx/TestLocalDate.hx"
		this.assertSnapNext("2015-01-01", "2014-12-18", thx.TimePeriod.Month, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (120) )) )}));
		//line 121 "/shared/core/thx/TestLocalDate.hx"
		this.assertSnapNext("2015-01-01", "2014-05-12", thx.TimePeriod.Year, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (121) )) )}));
		//line 122 "/shared/core/thx/TestLocalDate.hx"
		this.assertSnapNext("2015-01-01", "2014-12-18", thx.TimePeriod.Year, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (122) )) )}));
	}
	
	
	public void testSnapPrev()
	{
		//line 126 "/shared/core/thx/TestLocalDate.hx"
		this.assertSnapPrev("2013-12-31", "2014-01-01", thx.TimePeriod.Minute, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (126) )) )}));
		//line 127 "/shared/core/thx/TestLocalDate.hx"
		this.assertSnapPrev("2013-12-31", "2014-01-01", thx.TimePeriod.Hour, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (127) )) )}));
		//line 128 "/shared/core/thx/TestLocalDate.hx"
		this.assertSnapPrev("2013-12-31", "2014-01-01", thx.TimePeriod.Day, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (128) )) )}));
		//line 129 "/shared/core/thx/TestLocalDate.hx"
		this.assertSnapPrev("2013-12-30", "2013-12-31", thx.TimePeriod.Day, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (129) )) )}));
		//line 130 "/shared/core/thx/TestLocalDate.hx"
		this.assertSnapPrev("2014-12-14", "2014-12-17", thx.TimePeriod.Week, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (130) )) )}));
		//line 131 "/shared/core/thx/TestLocalDate.hx"
		this.assertSnapPrev("2014-12-14", "2014-12-18", thx.TimePeriod.Week, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (131) )) )}));
		//line 132 "/shared/core/thx/TestLocalDate.hx"
		this.assertSnapPrev("2014-12-01", "2014-12-12", thx.TimePeriod.Month, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (132) )) )}));
		//line 133 "/shared/core/thx/TestLocalDate.hx"
		this.assertSnapPrev("2014-12-01", "2014-12-01", thx.TimePeriod.Month, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (133) )) )}));
		//line 134 "/shared/core/thx/TestLocalDate.hx"
		this.assertSnapPrev("2014-12-01", "2014-12-18", thx.TimePeriod.Month, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (134) )) )}));
		//line 135 "/shared/core/thx/TestLocalDate.hx"
		this.assertSnapPrev("2014-01-01", "2014-05-12", thx.TimePeriod.Year, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (135) )) )}));
		//line 136 "/shared/core/thx/TestLocalDate.hx"
		this.assertSnapPrev("2014-01-01", "2014-12-18", thx.TimePeriod.Year, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (136) )) )}));
	}
	
	
	public void testSnapTo()
	{
		//line 140 "/shared/core/thx/TestLocalDate.hx"
		this.assertSnapTo("2014-01-01", "2014-01-01", thx.TimePeriod.Minute, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (140) )) )}));
		//line 141 "/shared/core/thx/TestLocalDate.hx"
		this.assertSnapTo("2014-01-01", "2014-01-01", thx.TimePeriod.Hour, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (141) )) )}));
		//line 142 "/shared/core/thx/TestLocalDate.hx"
		this.assertSnapTo("2014-01-01", "2014-01-01", thx.TimePeriod.Day, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (142) )) )}));
		//line 143 "/shared/core/thx/TestLocalDate.hx"
		this.assertSnapTo("2013-12-31", "2013-12-31", thx.TimePeriod.Day, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (143) )) )}));
		//line 144 "/shared/core/thx/TestLocalDate.hx"
		this.assertSnapTo("2014-12-14", "2014-12-17", thx.TimePeriod.Week, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (144) )) )}));
		//line 145 "/shared/core/thx/TestLocalDate.hx"
		this.assertSnapTo("2014-12-21", "2014-12-18", thx.TimePeriod.Week, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (145) )) )}));
		//line 146 "/shared/core/thx/TestLocalDate.hx"
		this.assertSnapTo("2014-12-01", "2014-12-12", thx.TimePeriod.Month, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (146) )) )}));
		//line 147 "/shared/core/thx/TestLocalDate.hx"
		this.assertSnapTo("2015-01-01", "2014-12-18", thx.TimePeriod.Month, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (147) )) )}));
		//line 148 "/shared/core/thx/TestLocalDate.hx"
		this.assertSnapTo("2014-01-01", "2014-05-12", thx.TimePeriod.Year, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (148) )) )}));
		//line 149 "/shared/core/thx/TestLocalDate.hx"
		this.assertSnapTo("2015-01-01", "2014-12-18", thx.TimePeriod.Year, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestLocalDate", "TestLocalDate.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (149) )) )}));
	}
	
	
	public void assertSnapTo(java.lang.String expected, java.lang.String date, thx.TimePeriod period, java.lang.Object pos)
	{
		//line 153 "/shared/core/thx/TestLocalDate.hx"
		int t = thx._LocalDate.LocalDate_Impl_.snapTo(thx._LocalDate.LocalDate_Impl_.fromString(date), period);
		//line 154 "/shared/core/thx/TestLocalDate.hx"
		utest.Assert.isTrue(( ((int) (thx._LocalDate.LocalDate_Impl_.fromString(expected)) ) == ((int) (t) ) ), ( ( ( ( ( ( ( "expected " + date ) + " to snap to " ) + expected ) + " for " ) + haxe.root.Std.string(period) ) + " but it is " ) + thx._LocalDate.LocalDate_Impl_.toString(t) ), pos);
	}
	
	
	public void assertSnapPrev(java.lang.String expected, java.lang.String date, thx.TimePeriod period, java.lang.Object pos)
	{
		//line 162 "/shared/core/thx/TestLocalDate.hx"
		int t = thx._LocalDate.LocalDate_Impl_.snapPrev(thx._LocalDate.LocalDate_Impl_.fromString(date), period);
		//line 163 "/shared/core/thx/TestLocalDate.hx"
		utest.Assert.isTrue(( ((int) (thx._LocalDate.LocalDate_Impl_.fromString(expected)) ) == ((int) (t) ) ), ( ( ( ( ( ( ( "expected " + date ) + " to snap before " ) + expected ) + " for " ) + haxe.root.Std.string(period) ) + " but it is " ) + thx._LocalDate.LocalDate_Impl_.toString(t) ), pos);
	}
	
	
	public void assertSnapNext(java.lang.String expected, java.lang.String date, thx.TimePeriod period, java.lang.Object pos)
	{
		//line 171 "/shared/core/thx/TestLocalDate.hx"
		int t = thx._LocalDate.LocalDate_Impl_.snapNext(thx._LocalDate.LocalDate_Impl_.fromString(date), period);
		//line 172 "/shared/core/thx/TestLocalDate.hx"
		utest.Assert.isTrue(( ((int) (thx._LocalDate.LocalDate_Impl_.fromString(expected)) ) == ((int) (t) ) ), ( ( ( ( ( ( ( "expected " + date ) + " to snap after " ) + expected ) + " for " ) + haxe.root.Std.string(period) ) + " but it is " ) + thx._LocalDate.LocalDate_Impl_.toString(t) ), pos);
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 7 "/shared/core/thx/TestLocalDate.hx"
		{
			//line 7 "/shared/core/thx/TestLocalDate.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/core/thx/TestLocalDate.hx"
			switch (field.hashCode())
			{
				case -1037172987:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("tomorrow")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						this.tomorrow = ((int) (value) );
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						return value;
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case 3076014:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("date")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						this.date = ((int) (value) );
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						return value;
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/core/thx/TestLocalDate.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/core/thx/TestLocalDate.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 7 "/shared/core/thx/TestLocalDate.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 7 "/shared/core/thx/TestLocalDate.hx"
		{
			//line 7 "/shared/core/thx/TestLocalDate.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/core/thx/TestLocalDate.hx"
			switch (field.hashCode())
			{
				case -1037172987:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("tomorrow")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						this.tomorrow = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						return value;
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case 3076014:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("date")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						this.date = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						return value;
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/core/thx/TestLocalDate.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/core/thx/TestLocalDate.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 7 "/shared/core/thx/TestLocalDate.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 7 "/shared/core/thx/TestLocalDate.hx"
		{
			//line 7 "/shared/core/thx/TestLocalDate.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/core/thx/TestLocalDate.hx"
			switch (field.hashCode())
			{
				case -110613693:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("assertSnapNext")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "assertSnapNext")) );
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case 3076014:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("date")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						return this.date;
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case -110542205:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("assertSnapPrev")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "assertSnapPrev")) );
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case -1037172987:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("tomorrow")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						return this.tomorrow;
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case -679443765:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("assertSnapTo")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "assertSnapTo")) );
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case 1267440686:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("testCreate")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCreate")) );
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case 1721707287:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("testSnapTo")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSnapTo")) );
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case -1062581986:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("testToString")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testToString")) );
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case 998180815:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("testSnapPrev")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSnapPrev")) );
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case 1324251889:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("testEquals")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testEquals")) );
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case 998109327:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("testSnapNext")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSnapNext")) );
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case 557885427:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("testCompare")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCompare")) );
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case -538252015:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("testAddMonth")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testAddMonth")) );
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case 1466624837:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("testFromToDate")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFromToDate")) );
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case -1422484817:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("testAdd")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testAdd")) );
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case 1467108964:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("testFromToTime")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFromToTime")) );
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case 1124127208:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("testFromToString")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFromToString")) );
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/core/thx/TestLocalDate.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/core/thx/TestLocalDate.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 7 "/shared/core/thx/TestLocalDate.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 7 "/shared/core/thx/TestLocalDate.hx"
		{
			//line 7 "/shared/core/thx/TestLocalDate.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/core/thx/TestLocalDate.hx"
			switch (field.hashCode())
			{
				case -1037172987:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("tomorrow")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						return ((double) (this.tomorrow) );
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case 3076014:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("date")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						return ((double) (this.date) );
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/core/thx/TestLocalDate.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/core/thx/TestLocalDate.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 7 "/shared/core/thx/TestLocalDate.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 7 "/shared/core/thx/TestLocalDate.hx"
		{
			//line 7 "/shared/core/thx/TestLocalDate.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/core/thx/TestLocalDate.hx"
			switch (field.hashCode())
			{
				case -110613693:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("assertSnapNext")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						this.assertSnapNext(haxe.lang.Runtime.toString(dynargs.__get(0)), haxe.lang.Runtime.toString(dynargs.__get(1)), ((thx.TimePeriod) (dynargs.__get(2)) ), dynargs.__get(3));
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case 1267440686:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("testCreate")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						this.testCreate();
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case -110542205:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("assertSnapPrev")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						this.assertSnapPrev(haxe.lang.Runtime.toString(dynargs.__get(0)), haxe.lang.Runtime.toString(dynargs.__get(1)), ((thx.TimePeriod) (dynargs.__get(2)) ), dynargs.__get(3));
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case -1062581986:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("testToString")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						this.testToString();
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case -679443765:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("assertSnapTo")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						this.assertSnapTo(haxe.lang.Runtime.toString(dynargs.__get(0)), haxe.lang.Runtime.toString(dynargs.__get(1)), ((thx.TimePeriod) (dynargs.__get(2)) ), dynargs.__get(3));
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case 1324251889:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("testEquals")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						this.testEquals();
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case 1721707287:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("testSnapTo")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						this.testSnapTo();
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case 557885427:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("testCompare")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						this.testCompare();
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case 998180815:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("testSnapPrev")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						this.testSnapPrev();
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case 1466624837:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("testFromToDate")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						this.testFromToDate();
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case 998109327:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("testSnapNext")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						this.testSnapNext();
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case 1467108964:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("testFromToTime")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						this.testFromToTime();
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case -538252015:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("testAddMonth")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						this.testAddMonth();
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case 1124127208:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("testFromToString")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						this.testFromToString();
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
				case -1422484817:
				{
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					if (field.equals("testAdd")) 
					{
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestLocalDate.hx"
						this.testAdd();
					}
					
					//line 7 "/shared/core/thx/TestLocalDate.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/core/thx/TestLocalDate.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/core/thx/TestLocalDate.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 7 "/shared/core/thx/TestLocalDate.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 7 "/shared/core/thx/TestLocalDate.hx"
		baseArr.push("tomorrow");
		//line 7 "/shared/core/thx/TestLocalDate.hx"
		baseArr.push("date");
		//line 7 "/shared/core/thx/TestLocalDate.hx"
		{
			//line 7 "/shared/core/thx/TestLocalDate.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


