// Generated by Haxe 3.3.0
package thx;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestDynamics extends haxe.lang.HxObject
{
	public TestDynamics(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestDynamics()
	{
		//line 8 "/shared/core/thx/TestDynamics.hx"
		thx.TestDynamics.__hx_ctor_thx_TestDynamics(this);
	}
	
	
	public static void __hx_ctor_thx_TestDynamics(thx.TestDynamics __temp_me173)
	{
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 7 "/shared/core/thx/TestDynamics.hx"
		return new thx.TestDynamics(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 7 "/shared/core/thx/TestDynamics.hx"
		return new thx.TestDynamics();
	}
	
	
	public void testDynamics()
	{
		//line 11 "/shared/core/thx/TestDynamics.hx"
		utest.Assert.equals(null, thx.Dynamics.clone(null, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDynamics", "TestDynamics.hx", "testDynamics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (11) )) )}));
		//line 12 "/shared/core/thx/TestDynamics.hx"
		utest.Assert.equals(true, thx.Dynamics.clone(true, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDynamics", "TestDynamics.hx", "testDynamics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (12) )) )}));
		//line 13 "/shared/core/thx/TestDynamics.hx"
		utest.Assert.equals("hello", thx.Dynamics.clone("hello", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDynamics", "TestDynamics.hx", "testDynamics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (13) )) )}));
		//line 14 "/shared/core/thx/TestDynamics.hx"
		utest.Assert.equals(3, thx.Dynamics.clone(3, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDynamics", "TestDynamics.hx", "testDynamics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (14) )) )}));
		//line 15 "/shared/core/thx/TestDynamics.hx"
		utest.Assert.equals(3.14, thx.Dynamics.clone(3.14, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDynamics", "TestDynamics.hx", "testDynamics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (15) )) )}));
		//line 16 "/shared/core/thx/TestDynamics.hx"
		utest.Assert.equals(haxe.root.ValueType.TBool, thx.Dynamics.clone(haxe.root.ValueType.TBool, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDynamics", "TestDynamics.hx", "testDynamics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (16) )) )}));
		//line 17 "/shared/core/thx/TestDynamics.hx"
		utest.Assert.isTrue(((boolean) (haxe.root.Type.enumEq(((haxe.root.ValueType) (haxe.root.ValueType.TClass(thx.TestDynamics.class)) ), ((haxe.root.ValueType) (thx.Dynamics.clone(haxe.root.ValueType.TClass(thx.TestDynamics.class), null)) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDynamics", "TestDynamics.hx", "testDynamics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (17) )) )}));
		//line 18 "/shared/core/thx/TestDynamics.hx"
		haxe.root.Date date = haxe.root.Date.now();
		//line 19 "/shared/core/thx/TestDynamics.hx"
		utest.Assert.equals(date, thx.Dynamics.clone(date, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDynamics", "TestDynamics.hx", "testDynamics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (19) )) )}));
		//line 20 "/shared/core/thx/TestDynamics.hx"
		utest.Assert.same(((haxe.lang.Function) (new haxe.lang.Closure(this, "testDynamics")) ), thx.Dynamics.clone(((haxe.lang.Function) (new haxe.lang.Closure(this, "testDynamics")) ), null), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDynamics", "TestDynamics.hx", "testDynamics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (20) )) )}));
		//line 22 "/shared/core/thx/TestDynamics.hx"
		haxe.root.Array<java.lang.Object> arr1 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0, 1, 2});
		//line 23 "/shared/core/thx/TestDynamics.hx"
		java.lang.Object arr2 = thx.Dynamics.clone(arr1, null);
		//line 24 "/shared/core/thx/TestDynamics.hx"
		utest.Assert.notEquals(arr1, arr2, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDynamics", "TestDynamics.hx", "testDynamics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (24) )) )}));
		//line 25 "/shared/core/thx/TestDynamics.hx"
		utest.Assert.same(arr1, arr2, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDynamics", "TestDynamics.hx", "testDynamics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (25) )) )}));
		//line 27 "/shared/core/thx/TestDynamics.hx"
		java.lang.Object obj1 = new haxe.lang.DynamicObject(new java.lang.String[]{"name"}, new java.lang.Object[]{"Franco"}, new java.lang.String[]{"number"}, new double[]{((double) (((double) (0) )) )});
		//line 28 "/shared/core/thx/TestDynamics.hx"
		java.lang.Object obj2 = thx.Dynamics.clone(obj1, null);
		//line 29 "/shared/core/thx/TestDynamics.hx"
		utest.Assert.notEquals(obj1, obj2, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDynamics", "TestDynamics.hx", "testDynamics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (29) )) )}));
		//line 30 "/shared/core/thx/TestDynamics.hx"
		utest.Assert.same(obj1, obj2, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDynamics", "TestDynamics.hx", "testDynamics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (30) )) )}));
		//line 32 "/shared/core/thx/TestDynamics.hx"
		thx.Point inst1 = new thx.Point(5, 6);
		//line 33 "/shared/core/thx/TestDynamics.hx"
		java.lang.Object inst2 = thx.Dynamics.clone(inst1, null);
		//line 34 "/shared/core/thx/TestDynamics.hx"
		utest.Assert.equals(inst1, inst2, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDynamics", "TestDynamics.hx", "testDynamics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (34) )) )}));
		//line 35 "/shared/core/thx/TestDynamics.hx"
		java.lang.Object inst3 = thx.Dynamics.clone(inst1, true);
		//line 36 "/shared/core/thx/TestDynamics.hx"
		utest.Assert.notEquals(inst1, inst3, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDynamics", "TestDynamics.hx", "testDynamics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (36) )) )}));
		//line 37 "/shared/core/thx/TestDynamics.hx"
		utest.Assert.same(inst1.x, haxe.lang.Runtime.getField(inst3, "x", true), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDynamics", "TestDynamics.hx", "testDynamics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (37) )) )}));
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 7 "/shared/core/thx/TestDynamics.hx"
		{
			//line 7 "/shared/core/thx/TestDynamics.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/core/thx/TestDynamics.hx"
			switch (field.hashCode())
			{
				case -2137350458:
				{
					//line 7 "/shared/core/thx/TestDynamics.hx"
					if (field.equals("testDynamics")) 
					{
						//line 7 "/shared/core/thx/TestDynamics.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestDynamics.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testDynamics")) );
					}
					
					//line 7 "/shared/core/thx/TestDynamics.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/core/thx/TestDynamics.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/core/thx/TestDynamics.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 7 "/shared/core/thx/TestDynamics.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 7 "/shared/core/thx/TestDynamics.hx"
		{
			//line 7 "/shared/core/thx/TestDynamics.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/core/thx/TestDynamics.hx"
			switch (field.hashCode())
			{
				case -2137350458:
				{
					//line 7 "/shared/core/thx/TestDynamics.hx"
					if (field.equals("testDynamics")) 
					{
						//line 7 "/shared/core/thx/TestDynamics.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestDynamics.hx"
						this.testDynamics();
					}
					
					//line 7 "/shared/core/thx/TestDynamics.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/core/thx/TestDynamics.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/core/thx/TestDynamics.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 7 "/shared/core/thx/TestDynamics.hx"
		return null;
	}
	
	
}


