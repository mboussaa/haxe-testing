// Generated by Haxe 3.3.0
package thx._Char;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public final class Char_Impl_
{
	public static int at(java.lang.String s, int index)
	{
		//line 13 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		int i = ((int) (haxe.lang.Runtime.toInt(haxe.lang.StringExt.charCodeAt(s, index))) );
		//line 13 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		thx.Assert.isTrue(( i >= 0 ), ( "Char value should be greater than zero: " + i ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx._Char.Char_Impl_", "Char.hx", "fromInt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (19) )) )}));
		//line 13 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		return ((int) (i) );
	}
	
	
	public static int fromInt(int i)
	{
		//line 19 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		thx.Assert.isTrue(( i >= 0 ), ( "Char value should be greater than zero: " + i ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx._Char.Char_Impl_", "Char.hx", "fromInt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (19) )) )}));
		//line 20 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		return ((int) (i) );
	}
	
	
	public static int fromString(java.lang.String s)
	{
		//line 28 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		int i = ((int) (haxe.lang.Runtime.toInt(haxe.lang.StringExt.charCodeAt(s, 0))) );
		//line 28 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		thx.Assert.isTrue(( i >= 0 ), ( "Char value should be greater than zero: " + i ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx._Char.Char_Impl_", "Char.hx", "fromInt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (19) )) )}));
		//line 28 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		return ((int) (i) );
	}
	
	
	public static int compare(int a, int b)
	{
		//line 31 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		return haxe.Utf8.compare(Character.toString((char) ((int) (a) )), Character.toString((char) ((int) (b) )));
	}
	
	
	public static int _new(int i)
	{
		//line 33 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		return ((int) (i) );
	}
	
	
	public static int compareTo(int this1, int other)
	{
		//line 40 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		return haxe.Utf8.compare(Character.toString((char) ((int) (this1) )), Character.toString((char) ((int) (other) )));
	}
	
	
	public static boolean isBreakingWhitespace(int this1)
	{
		//line 46 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		if ( ! ((( ( ( this1 == 32 ) || ( this1 == 9 ) ) || ( this1 == 10 ) ))) ) 
		{
			//line 46 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
			return ( this1 == 13 );
		}
		else
		{
			//line 46 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
			return true;
		}
		
	}
	
	
	public static boolean isControl(int this1)
	{
		//line 52 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		if ( ! ((( ( ( this1 >= 0 ) && ( this1 <= 31 ) ) || ( this1 == 127 ) ))) ) 
		{
			//line 52 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
			if (( this1 >= 128 )) 
			{
				//line 52 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
				return ( this1 <= 159 );
			}
			else
			{
				//line 52 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
				return false;
			}
			
		}
		else
		{
			//line 52 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
			return true;
		}
		
	}
	
	
	public static boolean isUnicode(int this1)
	{
		//line 58 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		return ( this1 <= 65533 );
	}
	
	
	public static int next(int this1)
	{
		//line 64 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		int i = ( this1 + 1 );
		//line 64 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		thx.Assert.isTrue(( i >= 0 ), ( "Char value should be greater than zero: " + i ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx._Char.Char_Impl_", "Char.hx", "fromInt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (19) )) )}));
		//line 64 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		return ((int) (i) );
	}
	
	
	public static int prev(int this1)
	{
		//line 70 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		int i = ( this1 - 1 );
		//line 70 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		thx.Assert.isTrue(( i >= 0 ), ( "Char value should be greater than zero: " + i ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx._Char.Char_Impl_", "Char.hx", "fromInt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (19) )) )}));
		//line 70 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		return ((int) (i) );
	}
	
	
	public static int toUpperCase(int this1)
	{
		//line 76 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		int i = ((int) (haxe.lang.Runtime.toInt(haxe.lang.StringExt.charCodeAt(Character.toString((char) ((int) (this1) )).toUpperCase(), 0))) );
		//line 76 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		thx.Assert.isTrue(( i >= 0 ), ( "Char value should be greater than zero: " + i ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx._Char.Char_Impl_", "Char.hx", "fromInt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (19) )) )}));
		//line 76 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		return ((int) (i) );
	}
	
	
	public static int toLowerCase(int this1)
	{
		//line 82 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		int i = ((int) (haxe.lang.Runtime.toInt(haxe.lang.StringExt.charCodeAt(Character.toString((char) ((int) (this1) )).toLowerCase(), 0))) );
		//line 82 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		thx.Assert.isTrue(( i >= 0 ), ( "Char value should be greater than zero: " + i ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx._Char.Char_Impl_", "Char.hx", "fromInt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (19) )) )}));
		//line 82 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		return ((int) (i) );
	}
	
	
	public static boolean equalsTo(int this1, int other)
	{
		//line 88 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		return ( haxe.Utf8.compare(Character.toString((char) ((int) (this1) )), Character.toString((char) ((int) (other) ))) == 0 );
	}
	
	
	public static boolean equals(int self, int other)
	{
		//line 92 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		return ( haxe.Utf8.compare(Character.toString((char) ((int) (self) )), Character.toString((char) ((int) (other) ))) == 0 );
	}
	
	
	public static boolean greaterThan(int this1, int other)
	{
		//line 95 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		return ( haxe.Utf8.compare(Character.toString((char) ((int) (this1) )), Character.toString((char) ((int) (other) ))) > 0 );
	}
	
	
	public static boolean greater(int self, int other)
	{
		//line 99 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		return ( haxe.Utf8.compare(Character.toString((char) ((int) (self) )), Character.toString((char) ((int) (other) ))) > 0 );
	}
	
	
	public static boolean greaterEqualsThan(int this1, int other)
	{
		//line 102 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		return ( haxe.Utf8.compare(Character.toString((char) ((int) (this1) )), Character.toString((char) ((int) (other) ))) >= 0 );
	}
	
	
	public static boolean greaterEquals(int self, int other)
	{
		//line 106 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		return ( haxe.Utf8.compare(Character.toString((char) ((int) (self) )), Character.toString((char) ((int) (other) ))) >= 0 );
	}
	
	
	public static boolean lessEqualsTo(int this1, int other)
	{
		//line 109 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		return ( haxe.Utf8.compare(Character.toString((char) ((int) (this1) )), Character.toString((char) ((int) (other) ))) <= 0 );
	}
	
	
	public static boolean lessEquals(int self, int other)
	{
		//line 113 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		return ( haxe.Utf8.compare(Character.toString((char) ((int) (self) )), Character.toString((char) ((int) (other) ))) <= 0 );
	}
	
	
	public static boolean lessThan(int this1, int other)
	{
		//line 116 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		return ( haxe.Utf8.compare(Character.toString((char) ((int) (this1) )), Character.toString((char) ((int) (other) ))) < 0 );
	}
	
	
	public static boolean less(int self, int other)
	{
		//line 120 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		return ( haxe.Utf8.compare(Character.toString((char) ((int) (self) )), Character.toString((char) ((int) (other) ))) < 0 );
	}
	
	
	public static int toInt(int this1)
	{
		//line 127 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		return this1;
	}
	
	
	public static java.lang.String toString(int this1)
	{
		//line 138 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		return Character.toString((char) this1);
	}
	
	
	public static java.lang.String arrayToString(haxe.root.Array<java.lang.Object> arr)
	{
		//line 146 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Char.hx"
		return ((haxe.root.Array<java.lang.String>) (((haxe.root.Array) (arr.map(((haxe.lang.Function) (( (( thx._Char.Char_Impl__arrayToString_146__Fun.__hx_current != null )) ? (thx._Char.Char_Impl__arrayToString_146__Fun.__hx_current) : (thx._Char.Char_Impl__arrayToString_146__Fun.__hx_current = ((thx._Char.Char_Impl__arrayToString_146__Fun) (new thx._Char.Char_Impl__arrayToString_146__Fun()) )) )) ))) )) ).join("");
	}
	
	
}


