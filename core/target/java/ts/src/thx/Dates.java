// Generated by Haxe 3.3.0
package thx;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Dates extends haxe.lang.HxObject
{
	public Dates(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Dates()
	{
		//line 15 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		thx.Dates.__hx_ctor_thx_Dates(this);
	}
	
	
	public static void __hx_ctor_thx_Dates(thx.Dates __temp_me89)
	{
	}
	
	
	public static int compare(haxe.root.Date a, haxe.root.Date b)
	{
		//line 20 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		double a1 = ((double) (a.date.getTime()) );
		//line 20 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		double b1 = ((double) (b.date.getTime()) );
		//line 20 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		if (( a1 < b1 )) 
		{
			//line 20 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			return -1;
		}
		else
		{
			//line 20 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			if (( a1 > b1 )) 
			{
				//line 20 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
				return 1;
			}
			else
			{
				//line 20 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
				return 0;
			}
			
		}
		
	}
	
	
	public static haxe.root.Date create(int year, java.lang.Object month, java.lang.Object day, java.lang.Object hour, java.lang.Object minute, java.lang.Object second)
	{
		//line 29 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		java.lang.Object __temp_second86 = ( (haxe.lang.Runtime.eq(second, null)) ? (((java.lang.Object) (0) )) : (second) );
		//line 29 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		java.lang.Object __temp_minute85 = ( (haxe.lang.Runtime.eq(minute, null)) ? (((java.lang.Object) (0) )) : (minute) );
		//line 29 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		java.lang.Object __temp_hour84 = ( (haxe.lang.Runtime.eq(hour, null)) ? (((java.lang.Object) (0) )) : (hour) );
		//line 29 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		java.lang.Object __temp_day83 = ( (haxe.lang.Runtime.eq(day, null)) ? (((java.lang.Object) (1) )) : (day) );
		//line 29 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		java.lang.Object __temp_month82 = ( (haxe.lang.Runtime.eq(month, null)) ? (((java.lang.Object) (0) )) : (month) );
		//line 31 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		__temp_minute85 = ((java.lang.Object) (haxe.lang.Runtime.plus(__temp_minute85, ((int) (java.lang.Math.floor(( ((double) (haxe.lang.Runtime.toDouble(__temp_second86)) ) / ((double) (60) ) ))) ))) );
		//line 32 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		__temp_second86 = ( ((int) (haxe.lang.Runtime.toInt(__temp_second86)) ) % ((int) (60) ) );
		//line 33 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		if (( haxe.lang.Runtime.compare(__temp_second86, 0) < 0 )) 
		{
			//line 33 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			__temp_second86 = ((java.lang.Object) (haxe.lang.Runtime.plus(__temp_second86, 60)) );
		}
		
		//line 35 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		__temp_hour84 = ((java.lang.Object) (haxe.lang.Runtime.plus(__temp_hour84, ((int) (java.lang.Math.floor(( ((double) (haxe.lang.Runtime.toDouble(__temp_minute85)) ) / ((double) (60) ) ))) ))) );
		//line 36 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		__temp_minute85 = ( ((int) (haxe.lang.Runtime.toInt(__temp_minute85)) ) % ((int) (60) ) );
		//line 37 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		if (( haxe.lang.Runtime.compare(__temp_minute85, 0) < 0 )) 
		{
			//line 37 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			__temp_minute85 = ((java.lang.Object) (haxe.lang.Runtime.plus(__temp_minute85, 60)) );
		}
		
		//line 39 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		__temp_day83 = ((java.lang.Object) (haxe.lang.Runtime.plus(__temp_day83, ((int) (java.lang.Math.floor(( ((double) (haxe.lang.Runtime.toDouble(__temp_hour84)) ) / ((double) (24) ) ))) ))) );
		//line 40 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		__temp_hour84 = ( ((int) (haxe.lang.Runtime.toInt(__temp_hour84)) ) % ((int) (24) ) );
		//line 41 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		if (( haxe.lang.Runtime.compare(__temp_hour84, 0) < 0 )) 
		{
			//line 41 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			__temp_hour84 = ((java.lang.Object) (haxe.lang.Runtime.plus(__temp_hour84, 24)) );
		}
		
		//line 43 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		if (haxe.lang.Runtime.eq(__temp_day83, 0)) 
		{
			//line 44 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			{
				//line 44 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
				__temp_month82 = ( ((int) (haxe.lang.Runtime.toInt(__temp_month82)) ) - 1 );
			}
			
			//line 45 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			if (( haxe.lang.Runtime.compare(__temp_month82, 0) < 0 )) 
			{
				//line 46 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
				__temp_month82 = 11;
				//line 47 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
				 -- year;
			}
			
			//line 49 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			__temp_day83 = thx.Dates.daysInMonth(year, ((int) (haxe.lang.Runtime.toInt(__temp_month82)) ));
		}
		
		//line 52 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		year += ((int) (java.lang.Math.floor(( ((double) (haxe.lang.Runtime.toDouble(__temp_month82)) ) / ((double) (12) ) ))) );
		//line 53 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		__temp_month82 = ( ((int) (haxe.lang.Runtime.toInt(__temp_month82)) ) % ((int) (12) ) );
		//line 54 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		if (( haxe.lang.Runtime.compare(__temp_month82, 0) < 0 )) 
		{
			//line 54 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			__temp_month82 = ((java.lang.Object) (haxe.lang.Runtime.plus(__temp_month82, 12)) );
		}
		
		//line 56 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		int days = thx.Dates.daysInMonth(year, ((int) (haxe.lang.Runtime.toInt(__temp_month82)) ));
		//line 57 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		while (( haxe.lang.Runtime.compare(__temp_day83, days) > 0 ))
		{
			//line 58 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			if (( haxe.lang.Runtime.compare(__temp_day83, days) > 0 )) 
			{
				//line 59 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
				__temp_day83 = ( ((int) (haxe.lang.Runtime.toInt(__temp_day83)) ) - ((int) (days) ) );
				//line 60 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
				{
					//line 60 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
					__temp_month82 = ( ((int) (haxe.lang.Runtime.toInt(__temp_month82)) ) + 1 );
				}
				
			}
			
			//line 62 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			if (( haxe.lang.Runtime.compare(__temp_month82, 11) > 0 )) 
			{
				//line 63 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
				__temp_month82 = ( ((int) (haxe.lang.Runtime.toInt(__temp_month82)) ) - ((int) (12) ) );
				//line 64 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
				 ++ year;
			}
			
			//line 66 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			days = thx.Dates.daysInMonth(year, ((int) (haxe.lang.Runtime.toInt(__temp_month82)) ));
		}
		
		//line 69 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return new haxe.root.Date(year, ((int) (haxe.lang.Runtime.toInt(__temp_month82)) ), ((int) (haxe.lang.Runtime.toInt(__temp_day83)) ), ((int) (haxe.lang.Runtime.toInt(__temp_hour84)) ), ((int) (haxe.lang.Runtime.toInt(__temp_minute85)) ), ((int) (haxe.lang.Runtime.toInt(__temp_second86)) ));
	}
	
	
	public static haxe.root.Array<haxe.root.Date> daysRange(haxe.root.Date start, haxe.root.Date end)
	{
		//line 79 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		if (( thx.Dates.compare(end, start) < 0 )) 
		{
			//line 79 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			return new haxe.root.Array<haxe.root.Date>(new haxe.root.Date[]{});
		}
		
		//line 80 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		haxe.root.Array<haxe.root.Date> days = new haxe.root.Array<haxe.root.Date>(new haxe.root.Date[]{});
		//line 81 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		while ( ! (thx.Dates.sameDay(start, end)) )
		{
			//line 82 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			days.push(start);
			//line 83 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			start = thx.Dates.jump(start, thx.TimePeriod.Day, 1);
		}
		
		//line 85 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		days.push(end);
		//line 86 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return days;
	}
	
	
	public static boolean equals(haxe.root.Date self, haxe.root.Date other)
	{
		//line 93 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return ( ((double) (self.date.getTime()) ) == ((double) (other.date.getTime()) ) );
	}
	
	
	public static boolean nearEquals(haxe.root.Date self, haxe.root.Date other, java.lang.Object units, thx.TimePeriod period)
	{
		//line 102 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		java.lang.Object __temp_units87 = ( (haxe.lang.Runtime.eq(units, null)) ? (((java.lang.Object) (1) )) : (units) );
		//line 103 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		if (( null == period )) 
		{
			//line 104 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			period = thx.TimePeriod.Second;
		}
		
		//line 105 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		if (( haxe.lang.Runtime.compare(__temp_units87, 0) < 0 )) 
		{
			//line 106 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			__temp_units87 = ( - (((int) (haxe.lang.Runtime.toInt(__temp_units87)) )) );
		}
		
		//line 107 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		haxe.root.Date min = thx.Dates.jump(self, period, ( - (((int) (haxe.lang.Runtime.toInt(__temp_units87)) )) ));
		//line 107 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		haxe.root.Date max = thx.Dates.jump(self, period, ((int) (haxe.lang.Runtime.toInt(__temp_units87)) ));
		//line 109 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		if (( thx.Dates.compare(min, other) <= 0 )) 
		{
			//line 109 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			return ( thx.Dates.compare(max, other) >= 0 );
		}
		else
		{
			//line 109 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			return false;
		}
		
	}
	
	
	public static boolean greater(haxe.root.Date self, haxe.root.Date other)
	{
		//line 116 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return ( thx.Dates.compare(self, other) > 0 );
	}
	
	
	public static boolean more(haxe.root.Date self, haxe.root.Date other)
	{
		//line 120 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return ( thx.Dates.compare(self, other) > 0 );
	}
	
	
	public static boolean less(haxe.root.Date self, haxe.root.Date other)
	{
		//line 126 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return ( thx.Dates.compare(self, other) < 0 );
	}
	
	
	public static boolean greaterEquals(haxe.root.Date self, haxe.root.Date other)
	{
		//line 132 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return ( thx.Dates.compare(self, other) >= 0 );
	}
	
	
	public static boolean moreEqual(haxe.root.Date self, haxe.root.Date other)
	{
		//line 136 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return ( thx.Dates.compare(self, other) >= 0 );
	}
	
	
	public static boolean lessEquals(haxe.root.Date self, haxe.root.Date other)
	{
		//line 142 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return ( thx.Dates.compare(self, other) <= 0 );
	}
	
	
	public static boolean lessEqual(haxe.root.Date self, haxe.root.Date other)
	{
		//line 146 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return ( thx.Dates.compare(self, other) <= 0 );
	}
	
	
	public static boolean isLeapYear(int year)
	{
		//line 156 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		if (( ( year % 4 ) != 0 )) 
		{
			//line 156 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			return false;
		}
		
		//line 158 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		if (( ( year % 100 ) == 0 )) 
		{
			//line 159 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			return ( ( year % 400 ) == 0 );
		}
		
		//line 161 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return true;
	}
	
	
	public static boolean isInLeapYear(haxe.root.Date d)
	{
		//line 170 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return thx.Dates.isLeapYear(( d.date.getYear() + 1900 ));
	}
	
	
	public static int daysInMonth(int year, int month)
	{
		//line 184 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		switch (month)
		{
			case 1:
			{
				//line 187 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
				if (thx.Dates.isLeapYear(year)) 
				{
					//line 184 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
					return 29;
				}
				else
				{
					//line 184 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
					return 28;
				}
				
			}
			
			
			case 0:
			case 2:
			case 4:
			case 6:
			case 7:
			case 9:
			case 11:
			{
				//line 184 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
				return 31;
			}
			
			
			case 3:
			case 5:
			case 8:
			case 10:
			{
				//line 184 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
				return 30;
			}
			
			
			default:
			{
				//line 188 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
				throw haxe.lang.HaxeException.wrap(( ( "Invalid month \"" + month ) + "\".  Month should be a number, Jan=0, Dec=11" ));
			}
			
		}
		
	}
	
	
	public static int numDaysInMonth(int month, int year)
	{
		//line 193 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return thx.Dates.daysInMonth(year, month);
	}
	
	
	public static int daysInThisMonth(haxe.root.Date d)
	{
		//line 202 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return thx.Dates.daysInMonth(( d.date.getYear() + 1900 ), d.date.getMonth());
	}
	
	
	public static int numDaysInThisMonth(haxe.root.Date d)
	{
		//line 206 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return thx.Dates.daysInThisMonth(d);
	}
	
	
	public static boolean sameYear(haxe.root.Date self, haxe.root.Date other)
	{
		//line 212 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return ( ( self.date.getYear() + 1900 ) == ( other.date.getYear() + 1900 ) );
	}
	
	
	public static boolean sameMonth(haxe.root.Date self, haxe.root.Date other)
	{
		//line 218 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		if (thx.Dates.sameYear(self, other)) 
		{
			//line 218 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			return ( self.date.getMonth() == other.date.getMonth() );
		}
		else
		{
			//line 218 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			return false;
		}
		
	}
	
	
	public static boolean sameDay(haxe.root.Date self, haxe.root.Date other)
	{
		//line 224 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		if (thx.Dates.sameMonth(self, other)) 
		{
			//line 224 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			return ( self.date.getDate() == other.date.getDate() );
		}
		else
		{
			//line 224 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			return false;
		}
		
	}
	
	
	public static boolean sameHour(haxe.root.Date self, haxe.root.Date other)
	{
		//line 230 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		if (thx.Dates.sameDay(self, other)) 
		{
			//line 230 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			return ( self.date.getHours() == other.date.getHours() );
		}
		else
		{
			//line 230 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			return false;
		}
		
	}
	
	
	public static boolean sameMinute(haxe.root.Date self, haxe.root.Date other)
	{
		//line 236 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		if (thx.Dates.sameHour(self, other)) 
		{
			//line 236 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			return ( self.date.getMinutes() == other.date.getMinutes() );
		}
		else
		{
			//line 236 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			return false;
		}
		
	}
	
	
	public static haxe.root.Date snapNext(haxe.root.Date date, thx.TimePeriod period)
	{
		//line 246 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return haxe.root.Date.fromTime(((double) (thx._Timestamp.Timestamp_Impl_.snapNext(((double) (date.date.getTime()) ), period)) ));
	}
	
	
	public static haxe.root.Date snapPrev(haxe.root.Date date, thx.TimePeriod period)
	{
		//line 256 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return haxe.root.Date.fromTime(((double) (thx._Timestamp.Timestamp_Impl_.snapPrev(((double) (date.date.getTime()) ), period)) ));
	}
	
	
	public static haxe.root.Date snapTo(haxe.root.Date date, thx.TimePeriod period)
	{
		//line 266 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return haxe.root.Date.fromTime(((double) (thx._Timestamp.Timestamp_Impl_.snapTo(((double) (date.date.getTime()) ), period)) ));
	}
	
	
	public static haxe.root.Date jump(haxe.root.Date date, thx.TimePeriod period, int amount)
	{
		//line 280 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		int sec = date.date.getSeconds();
		//line 280 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		int min = date.date.getMinutes();
		//line 280 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		int hour = date.date.getHours();
		//line 280 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		int day = date.date.getDate();
		//line 280 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		int month = date.date.getMonth();
		//line 280 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		int year = ( date.date.getYear() + 1900 );
		//line 287 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		switch (period)
		{
			case Second:
			{
				//line 288 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
				sec += amount;
				//line 288 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
				break;
			}
			
			
			case Minute:
			{
				//line 289 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
				min += amount;
				//line 289 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
				break;
			}
			
			
			case Hour:
			{
				//line 290 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
				hour += amount;
				//line 290 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
				break;
			}
			
			
			case Day:
			{
				//line 291 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
				day += amount;
				//line 291 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
				break;
			}
			
			
			case Week:
			{
				//line 292 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
				day += ( amount * 7 );
				//line 292 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
				break;
			}
			
			
			case Month:
			{
				//line 293 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
				month += amount;
				//line 293 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
				break;
			}
			
			
			case Year:
			{
				//line 294 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
				year += amount;
				//line 294 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
				break;
			}
			
			
		}
		
		//line 297 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return thx.Dates.create(year, month, day, hour, min, sec);
	}
	
	
	public static haxe.root.Date max(haxe.root.Date self, haxe.root.Date other)
	{
		//line 304 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		if (( ((double) (self.date.getTime()) ) > ((double) (other.date.getTime()) ) )) 
		{
			//line 304 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			return self;
		}
		else
		{
			//line 304 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			return other;
		}
		
	}
	
	
	public static haxe.root.Date min(haxe.root.Date self, haxe.root.Date other)
	{
		//line 310 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		if (( ((double) (self.date.getTime()) ) < ((double) (other.date.getTime()) ) )) 
		{
			//line 310 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			return self;
		}
		else
		{
			//line 310 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			return other;
		}
		
	}
	
	
	public static haxe.root.Date snapToWeekDay(haxe.root.Date date, int day, java.lang.Object firstDayOfWk)
	{
		//line 322 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		java.lang.Object __temp_firstDayOfWk88 = ( (haxe.lang.Runtime.eq(firstDayOfWk, null)) ? (((java.lang.Object) (0) )) : (firstDayOfWk) );
		//line 323 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		int d = date.date.getDay();
		//line 323 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		int s = day;
		//line 327 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		if (( s < ((int) (haxe.lang.Runtime.toInt(__temp_firstDayOfWk88)) ) )) 
		{
			//line 327 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			s += 7;
		}
		
		//line 328 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		if (( d < ((int) (haxe.lang.Runtime.toInt(__temp_firstDayOfWk88)) ) )) 
		{
			//line 328 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			d += 7;
		}
		
		//line 329 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return thx.Dates.jump(date, thx.TimePeriod.Day, ( s - d ));
	}
	
	
	public static haxe.root.Date snapNextWeekDay(haxe.root.Date date, int day)
	{
		//line 342 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		int d = date.date.getDay();
		//line 342 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		int s = day;
		//line 346 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		if (( s < d )) 
		{
			//line 346 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			s += 7;
		}
		
		//line 347 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return thx.Dates.jump(date, thx.TimePeriod.Day, ( s - d ));
	}
	
	
	public static haxe.root.Date snapPrevWeekDay(haxe.root.Date date, int day)
	{
		//line 360 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		int d = date.date.getDay();
		//line 360 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		int s = day;
		//line 364 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		if (( s > d )) 
		{
			//line 364 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			s -= 7;
		}
		
		//line 365 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return thx.Dates.jump(date, thx.TimePeriod.Day, ( s - d ));
	}
	
	
	public static haxe.root.Date prevYear(haxe.root.Date d)
	{
		//line 372 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return thx.Dates.jump(d, thx.TimePeriod.Year, -1);
	}
	
	
	public static haxe.root.Date nextYear(haxe.root.Date d)
	{
		//line 378 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return thx.Dates.jump(d, thx.TimePeriod.Year, 1);
	}
	
	
	public static haxe.root.Date prevMonth(haxe.root.Date d)
	{
		//line 384 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return thx.Dates.jump(d, thx.TimePeriod.Month, -1);
	}
	
	
	public static haxe.root.Date nextMonth(haxe.root.Date d)
	{
		//line 390 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return thx.Dates.jump(d, thx.TimePeriod.Month, 1);
	}
	
	
	public static haxe.root.Date prevWeek(haxe.root.Date d)
	{
		//line 396 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return thx.Dates.jump(d, thx.TimePeriod.Week, -1);
	}
	
	
	public static haxe.root.Date nextWeek(haxe.root.Date d)
	{
		//line 402 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return thx.Dates.jump(d, thx.TimePeriod.Week, 1);
	}
	
	
	public static haxe.root.Date prevDay(haxe.root.Date d)
	{
		//line 408 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return thx.Dates.jump(d, thx.TimePeriod.Day, -1);
	}
	
	
	public static haxe.root.Date nextDay(haxe.root.Date d)
	{
		//line 414 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return thx.Dates.jump(d, thx.TimePeriod.Day, 1);
	}
	
	
	public static haxe.root.Date prevHour(haxe.root.Date d)
	{
		//line 420 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return thx.Dates.jump(d, thx.TimePeriod.Hour, -1);
	}
	
	
	public static haxe.root.Date nextHour(haxe.root.Date d)
	{
		//line 426 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return thx.Dates.jump(d, thx.TimePeriod.Hour, 1);
	}
	
	
	public static haxe.root.Date prevMinute(haxe.root.Date d)
	{
		//line 432 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return thx.Dates.jump(d, thx.TimePeriod.Minute, -1);
	}
	
	
	public static haxe.root.Date nextMinute(haxe.root.Date d)
	{
		//line 438 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return thx.Dates.jump(d, thx.TimePeriod.Minute, 1);
	}
	
	
	public static haxe.root.Date prevSecond(haxe.root.Date d)
	{
		//line 444 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return thx.Dates.jump(d, thx.TimePeriod.Second, -1);
	}
	
	
	public static haxe.root.Date nextSecond(haxe.root.Date d)
	{
		//line 450 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return thx.Dates.jump(d, thx.TimePeriod.Second, 1);
	}
	
	
	public static haxe.root.Date withYear(haxe.root.Date date, int year)
	{
		//line 456 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return thx.Dates.create(year, date.date.getMonth(), date.date.getDate(), date.date.getHours(), date.date.getMinutes(), date.date.getSeconds());
	}
	
	
	public static haxe.root.Date withMonth(haxe.root.Date date, int month)
	{
		//line 462 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return thx.Dates.create(( date.date.getYear() + 1900 ), month, date.date.getDate(), date.date.getHours(), date.date.getMinutes(), date.date.getSeconds());
	}
	
	
	public static haxe.root.Date withDay(haxe.root.Date date, int day)
	{
		//line 468 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return thx.Dates.create(( date.date.getYear() + 1900 ), date.date.getMonth(), day, date.date.getHours(), date.date.getMinutes(), date.date.getSeconds());
	}
	
	
	public static haxe.root.Date withHour(haxe.root.Date date, int hour)
	{
		//line 474 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return thx.Dates.create(( date.date.getYear() + 1900 ), date.date.getMonth(), date.date.getDate(), hour, date.date.getMinutes(), date.date.getSeconds());
	}
	
	
	public static haxe.root.Date withMinute(haxe.root.Date date, int minute)
	{
		//line 480 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return thx.Dates.create(( date.date.getYear() + 1900 ), date.date.getMonth(), date.date.getDate(), date.date.getHours(), minute, date.date.getSeconds());
	}
	
	
	public static haxe.root.Date withSecond(haxe.root.Date date, int second)
	{
		//line 486 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return thx.Dates.create(( date.date.getYear() + 1900 ), date.date.getMonth(), date.date.getDate(), date.date.getHours(), date.date.getMinutes(), second);
	}
	
	
	public static thx.Either parseDate(java.lang.String s)
	{
		//line 493 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		try 
		{
			//line 493 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			return thx.Either.Right(haxe.root.Date.fromString(s));
		}
		catch (java.lang.Throwable __temp_catchallException1)
		{
			//line 493 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			haxe.lang.Exceptions.setException(__temp_catchallException1);
			//line 495 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			java.lang.Object __temp_catchall2 = __temp_catchallException1;
			//line 495 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			if (( __temp_catchall2 instanceof haxe.lang.HaxeException )) 
			{
				//line 495 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
				__temp_catchall2 = ((haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
			}
			
			//line 495 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
			{
				//line 495 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
				java.lang.Object e = __temp_catchall2;
				//line 495 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
				return thx.Either.Left(( ( "" + s ) + " could not be parsed to a valid Date value." ));
			}
			
		}
		
		
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 15 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return new thx.Dates(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 15 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Dates.hx"
		return new thx.Dates();
	}
	
	
}


