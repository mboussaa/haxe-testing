// Generated by Haxe 3.3.0
package thx;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestDates extends haxe.lang.HxObject
{
	public TestDates(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestDates()
	{
		//line 8 "/shared/core/thx/TestDates.hx"
		thx.TestDates.__hx_ctor_thx_TestDates(this);
	}
	
	
	public static void __hx_ctor_thx_TestDates(thx.TestDates __temp_me171)
	{
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 7 "/shared/core/thx/TestDates.hx"
		return new thx.TestDates(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 7 "/shared/core/thx/TestDates.hx"
		return new thx.TestDates();
	}
	
	
	public void testCreate()
	{
		//line 13 "/shared/core/thx/TestDates.hx"
		java.lang.Object __temp_stmt23 = null;
		//line 13 "/shared/core/thx/TestDates.hx"
		{
			//line 13 "/shared/core/thx/TestDates.hx"
			haxe.root.Date __temp_odecl1 = new haxe.root.Date(2014, 11, 1, 0, 0, 0);
			//line 13 "/shared/core/thx/TestDates.hx"
			haxe.root.Date __temp_odecl2 = thx.Dates.create(2014, 11, 1, null, null, null);
			//line 13 "/shared/core/thx/TestDates.hx"
			__temp_stmt23 = new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{__temp_odecl1, __temp_odecl2}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 15 "/shared/core/thx/TestDates.hx"
		java.lang.Object __temp_stmt24 = null;
		//line 15 "/shared/core/thx/TestDates.hx"
		{
			//line 15 "/shared/core/thx/TestDates.hx"
			haxe.root.Date __temp_odecl3 = new haxe.root.Date(2015, 3, 1, 0, 0, 0);
			//line 15 "/shared/core/thx/TestDates.hx"
			haxe.root.Date __temp_odecl4 = thx.Dates.create(2014, 15, 1, null, null, null);
			//line 15 "/shared/core/thx/TestDates.hx"
			__temp_stmt24 = new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{__temp_odecl3, __temp_odecl4}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 16 "/shared/core/thx/TestDates.hx"
		java.lang.Object __temp_stmt25 = null;
		//line 16 "/shared/core/thx/TestDates.hx"
		{
			//line 16 "/shared/core/thx/TestDates.hx"
			haxe.root.Date __temp_odecl5 = new haxe.root.Date(2013, 11, 1, 0, 0, 0);
			//line 16 "/shared/core/thx/TestDates.hx"
			haxe.root.Date __temp_odecl6 = thx.Dates.create(2014, -1, 1, null, null, null);
			//line 16 "/shared/core/thx/TestDates.hx"
			__temp_stmt25 = new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{__temp_odecl5, __temp_odecl6}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 19 "/shared/core/thx/TestDates.hx"
		java.lang.Object __temp_stmt26 = null;
		//line 19 "/shared/core/thx/TestDates.hx"
		{
			//line 19 "/shared/core/thx/TestDates.hx"
			haxe.root.Date __temp_odecl7 = new haxe.root.Date(2014, 2, 4, 0, 0, 0);
			//line 19 "/shared/core/thx/TestDates.hx"
			haxe.root.Date __temp_odecl8 = thx.Dates.create(2014, 1, 32, null, null, null);
			//line 19 "/shared/core/thx/TestDates.hx"
			__temp_stmt26 = new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{__temp_odecl7, __temp_odecl8}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 20 "/shared/core/thx/TestDates.hx"
		java.lang.Object __temp_stmt27 = null;
		//line 20 "/shared/core/thx/TestDates.hx"
		{
			//line 20 "/shared/core/thx/TestDates.hx"
			haxe.root.Date __temp_odecl9 = new haxe.root.Date(2013, 11, 31, 0, 0, 0);
			//line 20 "/shared/core/thx/TestDates.hx"
			haxe.root.Date __temp_odecl10 = thx.Dates.create(2014, 0, 0, null, null, null);
			//line 20 "/shared/core/thx/TestDates.hx"
			__temp_stmt27 = new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{__temp_odecl9, __temp_odecl10}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 23 "/shared/core/thx/TestDates.hx"
		java.lang.Object __temp_stmt28 = null;
		//line 23 "/shared/core/thx/TestDates.hx"
		{
			//line 23 "/shared/core/thx/TestDates.hx"
			haxe.root.Date __temp_odecl11 = new haxe.root.Date(2014, 1, 2, 2, 0, 0);
			//line 23 "/shared/core/thx/TestDates.hx"
			haxe.root.Date __temp_odecl12 = thx.Dates.create(2014, 1, 1, 26, null, null);
			//line 23 "/shared/core/thx/TestDates.hx"
			__temp_stmt28 = new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{__temp_odecl11, __temp_odecl12}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 24 "/shared/core/thx/TestDates.hx"
		java.lang.Object __temp_stmt29 = null;
		//line 24 "/shared/core/thx/TestDates.hx"
		{
			//line 24 "/shared/core/thx/TestDates.hx"
			haxe.root.Date __temp_odecl13 = new haxe.root.Date(2013, 11, 31, 23, 0, 0);
			//line 24 "/shared/core/thx/TestDates.hx"
			haxe.root.Date __temp_odecl14 = thx.Dates.create(2014, 0, 1, -1, null, null);
			//line 24 "/shared/core/thx/TestDates.hx"
			__temp_stmt29 = new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{__temp_odecl13, __temp_odecl14}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 27 "/shared/core/thx/TestDates.hx"
		java.lang.Object __temp_stmt30 = null;
		//line 27 "/shared/core/thx/TestDates.hx"
		{
			//line 27 "/shared/core/thx/TestDates.hx"
			haxe.root.Date __temp_odecl15 = new haxe.root.Date(2014, 1, 1, 1, 5, 0);
			//line 27 "/shared/core/thx/TestDates.hx"
			haxe.root.Date __temp_odecl16 = thx.Dates.create(2014, 1, 1, 0, 65, null);
			//line 27 "/shared/core/thx/TestDates.hx"
			__temp_stmt30 = new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{__temp_odecl15, __temp_odecl16}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 28 "/shared/core/thx/TestDates.hx"
		java.lang.Object __temp_stmt31 = null;
		//line 28 "/shared/core/thx/TestDates.hx"
		{
			//line 28 "/shared/core/thx/TestDates.hx"
			haxe.root.Date __temp_odecl17 = new haxe.root.Date(2013, 11, 31, 23, 59, 0);
			//line 28 "/shared/core/thx/TestDates.hx"
			haxe.root.Date __temp_odecl18 = thx.Dates.create(2014, 0, 1, 0, -1, null);
			//line 28 "/shared/core/thx/TestDates.hx"
			__temp_stmt31 = new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{__temp_odecl17, __temp_odecl18}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 31 "/shared/core/thx/TestDates.hx"
		java.lang.Object __temp_stmt32 = null;
		//line 31 "/shared/core/thx/TestDates.hx"
		{
			//line 31 "/shared/core/thx/TestDates.hx"
			haxe.root.Date __temp_odecl19 = new haxe.root.Date(2014, 1, 1, 0, 1, 5);
			//line 31 "/shared/core/thx/TestDates.hx"
			haxe.root.Date __temp_odecl20 = thx.Dates.create(2014, 1, 1, 0, 0, 65);
			//line 31 "/shared/core/thx/TestDates.hx"
			__temp_stmt32 = new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{__temp_odecl19, __temp_odecl20}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 32 "/shared/core/thx/TestDates.hx"
		java.lang.Object __temp_stmt33 = null;
		//line 32 "/shared/core/thx/TestDates.hx"
		{
			//line 32 "/shared/core/thx/TestDates.hx"
			haxe.root.Date __temp_odecl21 = new haxe.root.Date(2013, 11, 31, 23, 59, 59);
			//line 32 "/shared/core/thx/TestDates.hx"
			haxe.root.Date __temp_odecl22 = thx.Dates.create(2014, 0, 1, 0, 0, -1);
			//line 32 "/shared/core/thx/TestDates.hx"
			__temp_stmt33 = new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{__temp_odecl21, __temp_odecl22}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 11 "/shared/core/thx/TestDates.hx"
		haxe.root.Array<java.lang.Object> expectations = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{__temp_stmt23, __temp_stmt24, __temp_stmt25, __temp_stmt26, __temp_stmt27, __temp_stmt28, __temp_stmt29, __temp_stmt30, __temp_stmt31, __temp_stmt32, __temp_stmt33});
		//line 35 "/shared/core/thx/TestDates.hx"
		expectations.map(((haxe.lang.Function) (( (( thx.TestDates_testCreate_35__Fun.__hx_current != null )) ? (thx.TestDates_testCreate_35__Fun.__hx_current) : (thx.TestDates_testCreate_35__Fun.__hx_current = ((thx.TestDates_testCreate_35__Fun) (new thx.TestDates_testCreate_35__Fun()) )) )) ));
	}
	
	
	public void testSnapNext()
	{
		//line 41 "/shared/core/thx/TestDates.hx"
		this.assertSnapNext("2014-01-01 10:07:00", "2014-01-01 10:06:10", thx.TimePeriod.Minute, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (41) )) )}));
		//line 42 "/shared/core/thx/TestDates.hx"
		this.assertSnapNext("2014-01-01 10:06:00", "2014-01-01 10:05:50", thx.TimePeriod.Minute, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (42) )) )}));
		//line 43 "/shared/core/thx/TestDates.hx"
		this.assertSnapNext("2014-01-01 11:00:00", "2014-01-01 10:10:10", thx.TimePeriod.Hour, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (43) )) )}));
		//line 44 "/shared/core/thx/TestDates.hx"
		this.assertSnapNext("2014-01-01 10:00:00", "2014-01-01 09:50:10", thx.TimePeriod.Hour, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (44) )) )}));
		//line 45 "/shared/core/thx/TestDates.hx"
		this.assertSnapNext("2014-01-02 00:00:00", "2014-01-01 10:00:00", thx.TimePeriod.Day, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (45) )) )}));
		//line 46 "/shared/core/thx/TestDates.hx"
		this.assertSnapNext("2014-01-01 00:00:00", "2013-12-31 20:00:00", thx.TimePeriod.Day, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (46) )) )}));
		//line 47 "/shared/core/thx/TestDates.hx"
		this.assertSnapNext("2014-12-21 00:00:00", "2014-12-17 11:00:00", thx.TimePeriod.Week, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (47) )) )}));
		//line 48 "/shared/core/thx/TestDates.hx"
		this.assertSnapNext("2014-12-21 00:00:00", "2014-12-18 00:00:00", thx.TimePeriod.Week, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (48) )) )}));
		//line 49 "/shared/core/thx/TestDates.hx"
		this.assertSnapNext("2015-01-01 00:00:00", "2014-12-12 00:00:00", thx.TimePeriod.Month, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (49) )) )}));
		//line 50 "/shared/core/thx/TestDates.hx"
		this.assertSnapNext("2015-01-01 00:00:00", "2014-12-18 00:00:00", thx.TimePeriod.Month, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (50) )) )}));
		//line 51 "/shared/core/thx/TestDates.hx"
		this.assertSnapNext("2015-01-01 00:00:00", "2014-05-12 00:00:00", thx.TimePeriod.Year, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (51) )) )}));
		//line 52 "/shared/core/thx/TestDates.hx"
		this.assertSnapNext("2015-01-01 00:00:00", "2014-12-18 00:00:00", thx.TimePeriod.Year, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (52) )) )}));
	}
	
	
	public void testSnapPrev()
	{
		//line 56 "/shared/core/thx/TestDates.hx"
		this.assertSnapPrev("2014-01-01 10:06:00", "2014-01-01 10:06:10", thx.TimePeriod.Minute, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (56) )) )}));
		//line 57 "/shared/core/thx/TestDates.hx"
		this.assertSnapPrev("2014-01-01 10:05:00", "2014-01-01 10:05:50", thx.TimePeriod.Minute, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (57) )) )}));
		//line 58 "/shared/core/thx/TestDates.hx"
		this.assertSnapPrev("2014-01-01 10:00:00", "2014-01-01 10:10:10", thx.TimePeriod.Hour, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (58) )) )}));
		//line 59 "/shared/core/thx/TestDates.hx"
		this.assertSnapPrev("2014-01-01 09:00:00", "2014-01-01 09:50:10", thx.TimePeriod.Hour, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (59) )) )}));
		//line 60 "/shared/core/thx/TestDates.hx"
		this.assertSnapPrev("2014-01-01 00:00:00", "2014-01-01 10:00:00", thx.TimePeriod.Day, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (60) )) )}));
		//line 61 "/shared/core/thx/TestDates.hx"
		this.assertSnapPrev("2013-12-31 00:00:00", "2013-12-31 20:00:00", thx.TimePeriod.Day, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (61) )) )}));
		//line 62 "/shared/core/thx/TestDates.hx"
		this.assertSnapPrev("2014-12-14 00:00:00", "2014-12-17 11:00:00", thx.TimePeriod.Week, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (62) )) )}));
		//line 63 "/shared/core/thx/TestDates.hx"
		this.assertSnapPrev("2014-12-14 00:00:00", "2014-12-18 00:00:00", thx.TimePeriod.Week, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (63) )) )}));
		//line 64 "/shared/core/thx/TestDates.hx"
		this.assertSnapPrev("2014-12-01 00:00:00", "2014-12-12 00:00:00", thx.TimePeriod.Month, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (64) )) )}));
		//line 65 "/shared/core/thx/TestDates.hx"
		this.assertSnapPrev("2014-12-01 00:00:00", "2014-12-18 00:00:00", thx.TimePeriod.Month, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (65) )) )}));
		//line 66 "/shared/core/thx/TestDates.hx"
		this.assertSnapPrev("2014-01-01 00:00:00", "2014-05-12 00:00:00", thx.TimePeriod.Year, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (66) )) )}));
		//line 67 "/shared/core/thx/TestDates.hx"
		this.assertSnapPrev("2014-01-01 00:00:00", "2014-12-18 00:00:00", thx.TimePeriod.Year, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (67) )) )}));
	}
	
	
	public void testSnapTo()
	{
		//line 71 "/shared/core/thx/TestDates.hx"
		this.assertSnapTo("2014-01-01 10:06:00", "2014-01-01 10:06:10", thx.TimePeriod.Minute, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (71) )) )}));
		//line 72 "/shared/core/thx/TestDates.hx"
		this.assertSnapTo("2014-01-01 10:06:00", "2014-01-01 10:05:50", thx.TimePeriod.Minute, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (72) )) )}));
		//line 73 "/shared/core/thx/TestDates.hx"
		this.assertSnapTo("2014-01-01 10:00:00", "2014-01-01 10:10:10", thx.TimePeriod.Hour, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (73) )) )}));
		//line 74 "/shared/core/thx/TestDates.hx"
		this.assertSnapTo("2014-01-01 10:00:00", "2014-01-01 09:50:10", thx.TimePeriod.Hour, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (74) )) )}));
		//line 75 "/shared/core/thx/TestDates.hx"
		this.assertSnapTo("2014-01-01 00:00:00", "2014-01-01 10:00:00", thx.TimePeriod.Day, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (75) )) )}));
		//line 76 "/shared/core/thx/TestDates.hx"
		this.assertSnapTo("2014-01-01 00:00:00", "2013-12-31 20:00:00", thx.TimePeriod.Day, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (76) )) )}));
		//line 77 "/shared/core/thx/TestDates.hx"
		this.assertSnapTo("2014-12-14 00:00:00", "2014-12-17 11:00:00", thx.TimePeriod.Week, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (77) )) )}));
		//line 78 "/shared/core/thx/TestDates.hx"
		this.assertSnapTo("2014-12-21 00:00:00", "2014-12-18 00:00:00", thx.TimePeriod.Week, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (78) )) )}));
		//line 79 "/shared/core/thx/TestDates.hx"
		this.assertSnapTo("2014-12-01 00:00:00", "2014-12-12 00:00:00", thx.TimePeriod.Month, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (79) )) )}));
		//line 80 "/shared/core/thx/TestDates.hx"
		this.assertSnapTo("2015-01-01 00:00:00", "2014-12-18 00:00:00", thx.TimePeriod.Month, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (80) )) )}));
		//line 81 "/shared/core/thx/TestDates.hx"
		this.assertSnapTo("2014-01-01 00:00:00", "2014-05-12 00:00:00", thx.TimePeriod.Year, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (81) )) )}));
		//line 82 "/shared/core/thx/TestDates.hx"
		this.assertSnapTo("2015-01-01 00:00:00", "2014-12-18 00:00:00", thx.TimePeriod.Year, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDates", "TestDates.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (82) )) )}));
	}
	
	
	public void assertSnapTo(java.lang.String expected, java.lang.String date, thx.TimePeriod period, java.lang.Object pos)
	{
		//line 86 "/shared/core/thx/TestDates.hx"
		haxe.root.Date t = haxe.root.Date.fromTime(((double) (thx._Timestamp.Timestamp_Impl_.snapTo(((double) (haxe.root.Date.fromString(date).date.getTime()) ), period)) ));
		//line 87 "/shared/core/thx/TestDates.hx"
		utest.Assert.floatEquals(((double) (haxe.root.Date.fromString(expected).date.getTime()) ), ((double) (t.date.getTime()) ), null, ( ( ( ( ( ( ( "expected " + date ) + " to snap to " ) + expected ) + " for " ) + haxe.root.Std.string(period) ) + " but it is " ) + t.toString() ), pos);
	}
	
	
	public void assertSnapPrev(java.lang.String expected, java.lang.String date, thx.TimePeriod period, java.lang.Object pos)
	{
		//line 96 "/shared/core/thx/TestDates.hx"
		haxe.root.Date t = haxe.root.Date.fromTime(((double) (thx._Timestamp.Timestamp_Impl_.snapPrev(((double) (haxe.root.Date.fromString(date).date.getTime()) ), period)) ));
		//line 97 "/shared/core/thx/TestDates.hx"
		utest.Assert.floatEquals(((double) (haxe.root.Date.fromString(expected).date.getTime()) ), ((double) (t.date.getTime()) ), null, ( ( ( ( ( ( ( "expected " + date ) + " to snap before " ) + expected ) + " for " ) + haxe.root.Std.string(period) ) + " but it is " ) + t.toString() ), pos);
	}
	
	
	public void assertSnapNext(java.lang.String expected, java.lang.String date, thx.TimePeriod period, java.lang.Object pos)
	{
		//line 106 "/shared/core/thx/TestDates.hx"
		haxe.root.Date t = haxe.root.Date.fromTime(((double) (thx._Timestamp.Timestamp_Impl_.snapNext(((double) (haxe.root.Date.fromString(date).date.getTime()) ), period)) ));
		//line 107 "/shared/core/thx/TestDates.hx"
		utest.Assert.floatEquals(((double) (haxe.root.Date.fromString(expected).date.getTime()) ), ((double) (t.date.getTime()) ), null, ( ( ( ( ( ( ( "expected " + date ) + " to snap after " ) + expected ) + " for " ) + haxe.root.Std.string(period) ) + " but it is " ) + t.toString() ), pos);
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 7 "/shared/core/thx/TestDates.hx"
		{
			//line 7 "/shared/core/thx/TestDates.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/core/thx/TestDates.hx"
			switch (field.hashCode())
			{
				case -110613693:
				{
					//line 7 "/shared/core/thx/TestDates.hx"
					if (field.equals("assertSnapNext")) 
					{
						//line 7 "/shared/core/thx/TestDates.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestDates.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "assertSnapNext")) );
					}
					
					//line 7 "/shared/core/thx/TestDates.hx"
					break;
				}
				
				
				case 1267440686:
				{
					//line 7 "/shared/core/thx/TestDates.hx"
					if (field.equals("testCreate")) 
					{
						//line 7 "/shared/core/thx/TestDates.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestDates.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCreate")) );
					}
					
					//line 7 "/shared/core/thx/TestDates.hx"
					break;
				}
				
				
				case -110542205:
				{
					//line 7 "/shared/core/thx/TestDates.hx"
					if (field.equals("assertSnapPrev")) 
					{
						//line 7 "/shared/core/thx/TestDates.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestDates.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "assertSnapPrev")) );
					}
					
					//line 7 "/shared/core/thx/TestDates.hx"
					break;
				}
				
				
				case 998109327:
				{
					//line 7 "/shared/core/thx/TestDates.hx"
					if (field.equals("testSnapNext")) 
					{
						//line 7 "/shared/core/thx/TestDates.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestDates.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSnapNext")) );
					}
					
					//line 7 "/shared/core/thx/TestDates.hx"
					break;
				}
				
				
				case -679443765:
				{
					//line 7 "/shared/core/thx/TestDates.hx"
					if (field.equals("assertSnapTo")) 
					{
						//line 7 "/shared/core/thx/TestDates.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestDates.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "assertSnapTo")) );
					}
					
					//line 7 "/shared/core/thx/TestDates.hx"
					break;
				}
				
				
				case 998180815:
				{
					//line 7 "/shared/core/thx/TestDates.hx"
					if (field.equals("testSnapPrev")) 
					{
						//line 7 "/shared/core/thx/TestDates.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestDates.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSnapPrev")) );
					}
					
					//line 7 "/shared/core/thx/TestDates.hx"
					break;
				}
				
				
				case 1721707287:
				{
					//line 7 "/shared/core/thx/TestDates.hx"
					if (field.equals("testSnapTo")) 
					{
						//line 7 "/shared/core/thx/TestDates.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestDates.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSnapTo")) );
					}
					
					//line 7 "/shared/core/thx/TestDates.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/core/thx/TestDates.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/core/thx/TestDates.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 7 "/shared/core/thx/TestDates.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 7 "/shared/core/thx/TestDates.hx"
		{
			//line 7 "/shared/core/thx/TestDates.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/core/thx/TestDates.hx"
			switch (field.hashCode())
			{
				case -110613693:
				{
					//line 7 "/shared/core/thx/TestDates.hx"
					if (field.equals("assertSnapNext")) 
					{
						//line 7 "/shared/core/thx/TestDates.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestDates.hx"
						this.assertSnapNext(haxe.lang.Runtime.toString(dynargs.__get(0)), haxe.lang.Runtime.toString(dynargs.__get(1)), ((thx.TimePeriod) (dynargs.__get(2)) ), dynargs.__get(3));
					}
					
					//line 7 "/shared/core/thx/TestDates.hx"
					break;
				}
				
				
				case 1267440686:
				{
					//line 7 "/shared/core/thx/TestDates.hx"
					if (field.equals("testCreate")) 
					{
						//line 7 "/shared/core/thx/TestDates.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestDates.hx"
						this.testCreate();
					}
					
					//line 7 "/shared/core/thx/TestDates.hx"
					break;
				}
				
				
				case -110542205:
				{
					//line 7 "/shared/core/thx/TestDates.hx"
					if (field.equals("assertSnapPrev")) 
					{
						//line 7 "/shared/core/thx/TestDates.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestDates.hx"
						this.assertSnapPrev(haxe.lang.Runtime.toString(dynargs.__get(0)), haxe.lang.Runtime.toString(dynargs.__get(1)), ((thx.TimePeriod) (dynargs.__get(2)) ), dynargs.__get(3));
					}
					
					//line 7 "/shared/core/thx/TestDates.hx"
					break;
				}
				
				
				case 998109327:
				{
					//line 7 "/shared/core/thx/TestDates.hx"
					if (field.equals("testSnapNext")) 
					{
						//line 7 "/shared/core/thx/TestDates.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestDates.hx"
						this.testSnapNext();
					}
					
					//line 7 "/shared/core/thx/TestDates.hx"
					break;
				}
				
				
				case -679443765:
				{
					//line 7 "/shared/core/thx/TestDates.hx"
					if (field.equals("assertSnapTo")) 
					{
						//line 7 "/shared/core/thx/TestDates.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestDates.hx"
						this.assertSnapTo(haxe.lang.Runtime.toString(dynargs.__get(0)), haxe.lang.Runtime.toString(dynargs.__get(1)), ((thx.TimePeriod) (dynargs.__get(2)) ), dynargs.__get(3));
					}
					
					//line 7 "/shared/core/thx/TestDates.hx"
					break;
				}
				
				
				case 998180815:
				{
					//line 7 "/shared/core/thx/TestDates.hx"
					if (field.equals("testSnapPrev")) 
					{
						//line 7 "/shared/core/thx/TestDates.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestDates.hx"
						this.testSnapPrev();
					}
					
					//line 7 "/shared/core/thx/TestDates.hx"
					break;
				}
				
				
				case 1721707287:
				{
					//line 7 "/shared/core/thx/TestDates.hx"
					if (field.equals("testSnapTo")) 
					{
						//line 7 "/shared/core/thx/TestDates.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestDates.hx"
						this.testSnapTo();
					}
					
					//line 7 "/shared/core/thx/TestDates.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/core/thx/TestDates.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/core/thx/TestDates.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 7 "/shared/core/thx/TestDates.hx"
		return null;
	}
	
	
}


