// Generated by Haxe 3.3.0
package thx;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestPath extends haxe.lang.HxObject
{
	public TestPath(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestPath()
	{
		//line 8 "/shared/core/thx/TestPath.hx"
		thx.TestPath.__hx_ctor_thx_TestPath(this);
	}
	
	
	public static void __hx_ctor_thx_TestPath(thx.TestPath __temp_me196)
	{
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 7 "/shared/core/thx/TestPath.hx"
		return new thx.TestPath(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 7 "/shared/core/thx/TestPath.hx"
		return new thx.TestPath();
	}
	
	
	public void testIsRelativeAndIsAbsolute()
	{
		//line 11 "/shared/core/thx/TestPath.hx"
		haxe.root.Array<java.lang.String> rel = thx._Path.Path_Impl_.fromString("a/b");
		//line 11 "/shared/core/thx/TestPath.hx"
		haxe.root.Array<java.lang.String> abs = thx._Path.Path_Impl_.fromString("/a/b");
		//line 13 "/shared/core/thx/TestPath.hx"
		utest.Assert.isTrue(haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (rel) ).__get(1), ""), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testIsRelativeAndIsAbsolute"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (13) )) )}));
		//line 14 "/shared/core/thx/TestPath.hx"
		utest.Assert.isFalse( ! (haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (rel) ).__get(1), "")) , null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testIsRelativeAndIsAbsolute"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (14) )) )}));
		//line 15 "/shared/core/thx/TestPath.hx"
		utest.Assert.isTrue( ! (haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (abs) ).__get(1), "")) , null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testIsRelativeAndIsAbsolute"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (15) )) )}));
		//line 16 "/shared/core/thx/TestPath.hx"
		utest.Assert.isFalse(haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (abs) ).__get(1), ""), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testIsRelativeAndIsAbsolute"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (16) )) )}));
	}
	
	
	public void testPathTo()
	{
		//line 20 "/shared/core/thx/TestPath.hx"
		haxe.root.Array<java.lang.String> path1 = thx._Path.Path_Impl_.fromString("/a/b/c");
		//line 20 "/shared/core/thx/TestPath.hx"
		haxe.root.Array<java.lang.String> path2 = thx._Path.Path_Impl_.fromString("/a/d");
		//line 20 "/shared/core/thx/TestPath.hx"
		haxe.root.Array<java.lang.String> path3 = thx._Path.Path_Impl_.fromString("/x/y/z");
		//line 20 "/shared/core/thx/TestPath.hx"
		haxe.root.Array<java.lang.String> path4 = thx._Path.Path_Impl_.fromString("a/b/c");
		//line 20 "/shared/core/thx/TestPath.hx"
		haxe.root.Array<java.lang.String> path5 = thx._Path.Path_Impl_.fromString("x/y/z");
		//line 25 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("../../d", thx._Path.Path_Impl_.toString(thx._Path.Path_Impl_.pathTo(path1, path2)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testPathTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (25) )) )}));
		//line 26 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("../../../x/y/z", thx._Path.Path_Impl_.toString(thx._Path.Path_Impl_.pathTo(path1, path3)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testPathTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (26) )) )}));
		//line 27 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("../b/c", thx._Path.Path_Impl_.toString(thx._Path.Path_Impl_.pathTo(path2, path1)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testPathTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (27) )) )}));
		//line 29 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("/a/b/c/a/b/c", thx._Path.Path_Impl_.toString(thx._Path.Path_Impl_.pathTo(path1, path4)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testPathTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (29) )) )}));
		//line 30 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("/a/d", thx._Path.Path_Impl_.toString(thx._Path.Path_Impl_.pathTo(path5, path2)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testPathTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (30) )) )}));
		//line 31 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("a/b/c/x/y/z", thx._Path.Path_Impl_.toString(thx._Path.Path_Impl_.pathTo(path4, path5)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testPathTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (31) )) )}));
	}
	
	
	public void testUp()
	{
		//line 35 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("/a/b", thx._Path.Path_Impl_.toString(thx._Path.Path_Impl_.up(thx._Path.Path_Impl_.fromString("/a/b/c/"), null)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testUp"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (35) )) )}));
		//line 36 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("/", thx._Path.Path_Impl_.toString(thx._Path.Path_Impl_.up(thx._Path.Path_Impl_.fromString("/a"), 2)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testUp"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (36) )) )}));
	}
	
	
	public void testDir()
	{
		//line 40 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("/a/b", thx._Path.Path_Impl_.dir(thx._Path.Path_Impl_.fromString("/a/b/c")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testDir"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (40) )) )}));
		//line 41 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("a/b", thx._Path.Path_Impl_.dir(thx._Path.Path_Impl_.fromString("a/b/c")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testDir"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (41) )) )}));
		//line 42 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals(".", thx._Path.Path_Impl_.dir(thx._Path.Path_Impl_.fromString("a")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testDir"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (42) )) )}));
		//line 43 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals(".", thx._Path.Path_Impl_.dir(thx._Path.Path_Impl_.fromString("..")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testDir"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (43) )) )}));
	}
	
	
	public void testBase()
	{
		//line 47 "/shared/core/thx/TestPath.hx"
		haxe.root.Array<java.lang.String> path = thx._Path.Path_Impl_.fromString("/a/b.c");
		//line 48 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("b.c", thx._Path.Path_Impl_.base(path, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testBase"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (48) )) )}));
		//line 49 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("b", thx._Path.Path_Impl_.base(path, ".c"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testBase"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (49) )) )}));
		//line 50 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("b.", thx._Path.Path_Impl_.base(path, "c"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testBase"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (50) )) )}));
		//line 51 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("b.c", thx._Path.Path_Impl_.base(path, ".d"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testBase"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (51) )) )}));
	}
	
	
	public void testExt()
	{
		//line 55 "/shared/core/thx/TestPath.hx"
		thx._Path.Path_Impl_.fromString("");
		//line 56 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("c", thx._Path.Path_Impl_.ext(thx._Path.Path_Impl_.fromString("/a/b.c")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testExt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (56) )) )}));
		//line 57 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("", thx._Path.Path_Impl_.ext(thx._Path.Path_Impl_.fromString("/a/b/c")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testExt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (57) )) )}));
	}
	
	
	public void testSep()
	{
		//line 61 "/shared/core/thx/TestPath.hx"
		haxe.root.Array<java.lang.String> path = thx._Path.Path_Impl_.fromString("/path/to/file.png");
		//line 61 "/shared/core/thx/TestPath.hx"
		haxe.root.Array<java.lang.String> win = thx._Path.Path_Impl_.toWin32(path, "C:");
		//line 63 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("/", ((haxe.root.Array<java.lang.String>) (path) ).__get(0), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testSep"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (63) )) )}));
		//line 64 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("\\", ((haxe.root.Array<java.lang.String>) (win) ).__get(0), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testSep"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (64) )) )}));
		//line 65 "/shared/core/thx/TestPath.hx"
		utest.Assert.isTrue(haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (path) ).__get(0), "/"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testSep"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (65) )) )}));
		//line 66 "/shared/core/thx/TestPath.hx"
		utest.Assert.isFalse(haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (path) ).__get(0), "\\"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testSep"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (66) )) )}));
		//line 67 "/shared/core/thx/TestPath.hx"
		utest.Assert.isTrue(haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (win) ).__get(0), "\\"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testSep"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (67) )) )}));
		//line 68 "/shared/core/thx/TestPath.hx"
		utest.Assert.isFalse(haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (win) ).__get(0), "/"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testSep"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (68) )) )}));
	}
	
	
	public void testJoin()
	{
		//line 72 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("/a/b/c", thx._Path.Path_Impl_.toString(thx._Path.Path_Impl_.join(thx._Path.Path_Impl_.fromString("/a/x"), thx._Path.Path_Impl_.fromString("../b/c"))), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testJoin"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (72) )) )}));
		//line 73 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("../b/c", thx._Path.Path_Impl_.toString(thx._Path.Path_Impl_.join(thx._Path.Path_Impl_.fromString("../x"), thx._Path.Path_Impl_.fromString("../b/c"))), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testJoin"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (73) )) )}));
		//line 74 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("/b/c", thx._Path.Path_Impl_.toString(thx._Path.Path_Impl_.join(thx._Path.Path_Impl_.fromString("/a/x"), thx._Path.Path_Impl_.fromString("/b/c"))), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testJoin"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (74) )) )}));
	}
	
	
	public void testJoinString()
	{
		//line 78 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("/a/b/c", thx._Path.Path_Impl_.toString(thx._Path.Path_Impl_.join(thx._Path.Path_Impl_.fromString("/a/b"), thx._Path.Path_Impl_.fromString("c"))), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testJoinString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (78) )) )}));
		//line 79 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("../d", thx._Path.Path_Impl_.toString(thx._Path.Path_Impl_.join(thx._Path.Path_Impl_.fromString("../x"), thx._Path.Path_Impl_.fromString("../d"))), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testJoinString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (79) )) )}));
	}
	
	
	public void testToWin32ToNix()
	{
		//line 83 "/shared/core/thx/TestPath.hx"
		haxe.root.Array<java.lang.String> path = thx._Path.Path_Impl_.fromString("/path/to/file.png");
		//line 83 "/shared/core/thx/TestPath.hx"
		haxe.root.Array<java.lang.String> win = thx._Path.Path_Impl_.toWin32(path, null);
		//line 85 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("C:\\path\\to\\file.png", thx._Path.Path_Impl_.toString(win), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testToWin32ToNix"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (85) )) )}));
		//line 86 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("/path/to/file.png", thx._Path.Path_Impl_.toString(thx._Path.Path_Impl_.toNix(win)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testToWin32ToNix"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (86) )) )}));
		//line 88 "/shared/core/thx/TestPath.hx"
		path = thx._Path.Path_Impl_.fromString("path/to/file.png");
		//line 89 "/shared/core/thx/TestPath.hx"
		win = thx._Path.Path_Impl_.toWin32(path, null);
		//line 90 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("path\\to\\file.png", thx._Path.Path_Impl_.toString(win), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testToWin32ToNix"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (90) )) )}));
		//line 91 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("path/to/file.png", thx._Path.Path_Impl_.toString(thx._Path.Path_Impl_.toNix(win)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testToWin32ToNix"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (91) )) )}));
	}
	
	
	public void testNormalization()
	{
		//line 95 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("c", thx._Path.Path_Impl_.toString(thx._Path.Path_Impl_.fromString("a/.././b/../c/.")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testNormalization"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (95) )) )}));
		//line 96 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("a/c", thx._Path.Path_Impl_.toString(thx._Path.Path_Impl_.fromString("a/./b/../c/.")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testNormalization"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (96) )) )}));
		//line 97 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("/b/c", thx._Path.Path_Impl_.toString(thx._Path.Path_Impl_.fromString("/a/.././b/./c/.")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testNormalization"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (97) )) )}));
		//line 98 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("../../c", thx._Path.Path_Impl_.toString(thx._Path.Path_Impl_.fromString("a/../../../b/../c/.")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testNormalization"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (98) )) )}));
	}
	
	
	public void testToString()
	{
		//line 102 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals(".", thx._Path.Path_Impl_.toString(thx._Path.Path_Impl_.fromString(".")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testToString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (102) )) )}));
		//line 103 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("..", thx._Path.Path_Impl_.toString(thx._Path.Path_Impl_.fromString("..")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testToString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (103) )) )}));
		//line 104 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("..", thx._Path.Path_Impl_.toString(thx._Path.Path_Impl_.fromString("../")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testToString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (104) )) )}));
		//line 105 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("/", thx._Path.Path_Impl_.toString(thx._Path.Path_Impl_.fromString("/../")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testToString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (105) )) )}));
		//line 106 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("/", thx._Path.Path_Impl_.toString(thx._Path.Path_Impl_.fromString("/")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testToString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (106) )) )}));
		//line 107 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("/a/a", thx._Path.Path_Impl_.toString(thx._Path.Path_Impl_.fromString("/a///a")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testToString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (107) )) )}));
		//line 108 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("/a/a", thx._Path.Path_Impl_.toString(thx._Path.Path_Impl_.fromString("/a/a/")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testToString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (108) )) )}));
		//line 109 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals(".", thx._Path.Path_Impl_.toString(thx._Path.Path_Impl_.fromString("a/..")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testToString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (109) )) )}));
		//line 110 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("a", thx._Path.Path_Impl_.toString(thx._Path.Path_Impl_.fromString("a")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testToString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (110) )) )}));
	}
	
	
	public void testNormalize()
	{
		//line 114 "/shared/core/thx/TestPath.hx"
		haxe.root.Array<java.lang.String> this1 = new haxe.root.Array<java.lang.String>(new java.lang.String[]{"/", "/", "a/*>b"});
		//line 114 "/shared/core/thx/TestPath.hx"
		haxe.root.Array<java.lang.String> p = ((haxe.root.Array<java.lang.String>) (this1) );
		//line 115 "/shared/core/thx/TestPath.hx"
		utest.Assert.isFalse(thx._Path.Path_Impl_.isValid(p), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testNormalize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (115) )) )}));
		//line 116 "/shared/core/thx/TestPath.hx"
		p = thx._Path.Path_Impl_.normalize(p);
		//line 117 "/shared/core/thx/TestPath.hx"
		utest.Assert.isTrue(thx._Path.Path_Impl_.isValid(p), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testNormalize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (117) )) )}));
		//line 118 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("/a_*>b", thx._Path.Path_Impl_.toString(p), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testNormalize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (118) )) )}));
		//line 119 "/shared/core/thx/TestPath.hx"
		p = thx._Path.Path_Impl_.toWin32(p, null);
		//line 120 "/shared/core/thx/TestPath.hx"
		utest.Assert.isFalse(thx._Path.Path_Impl_.isValid(p), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testNormalize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (120) )) )}));
		//line 121 "/shared/core/thx/TestPath.hx"
		p = thx._Path.Path_Impl_.normalize(p);
		//line 122 "/shared/core/thx/TestPath.hx"
		utest.Assert.isTrue(thx._Path.Path_Impl_.isValid(p), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testNormalize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (122) )) )}));
		//line 123 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("C:\\a___b", thx._Path.Path_Impl_.toString(p), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testNormalize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (123) )) )}));
	}
	
	
	public void testRoot()
	{
		//line 127 "/shared/core/thx/TestPath.hx"
		haxe.root.Array<java.lang.String> root = thx._Path.Path_Impl_.fromString("C:\\");
		//line 128 "/shared/core/thx/TestPath.hx"
		utest.Assert.isFalse(haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (root) ).__get(0), "/"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testRoot"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (128) )) )}));
		//line 129 "/shared/core/thx/TestPath.hx"
		utest.Assert.isTrue(haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (root) ).__get(0), "\\"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testRoot"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (129) )) )}));
		//line 130 "/shared/core/thx/TestPath.hx"
		utest.Assert.isTrue( ! (haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (root) ).__get(1), "")) , null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testRoot"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (130) )) )}));
		//line 131 "/shared/core/thx/TestPath.hx"
		utest.Assert.isFalse(haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (root) ).__get(1), ""), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testRoot"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (131) )) )}));
		//line 132 "/shared/core/thx/TestPath.hx"
		utest.Assert.isTrue(thx._Path.Path_Impl_.isRoot(root), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testRoot"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (132) )) )}));
		//line 133 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("C:\\", thx._Path.Path_Impl_.toString(root), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testRoot"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (133) )) )}));
		//line 134 "/shared/core/thx/TestPath.hx"
		haxe.root.Array<java.lang.String> path = ((haxe.root.Array<java.lang.String>) (root) ).slice(2, null);
		//line 134 "/shared/core/thx/TestPath.hx"
		java.lang.String tmp = ((haxe.root.Array<java.lang.String>) (root) ).__get(0);
		//line 134 "/shared/core/thx/TestPath.hx"
		haxe.root.Array<java.lang.String> path1 = path;
		//line 134 "/shared/core/thx/TestPath.hx"
		boolean isAbsolute = false;
		//line 134 "/shared/core/thx/TestPath.hx"
		path1 = thx.ArrayStrings.compact(path).filter(( (( thx.TestPath_testRoot_134__Fun_0.__hx_current != null )) ? (thx.TestPath_testRoot_134__Fun_0.__hx_current) : (thx.TestPath_testRoot_134__Fun_0.__hx_current = ((thx.TestPath_testRoot_134__Fun_0) (new thx.TestPath_testRoot_134__Fun_0()) )) ));
		//line 134 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals(".", thx._Path.Path_Impl_.toString(((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{tmp, ""}).concat(((haxe.root.Array<java.lang.String>) (thx.Arrays.reduce(((haxe.root.Array<java.lang.String>) (path1) ), ((haxe.lang.Function) (new thx.TestPath_testRoot_134__Fun(isAbsolute)) ), ((java.lang.Object) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{})) ))) ))) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testRoot"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (134) )) )}));
		//line 136 "/shared/core/thx/TestPath.hx"
		root = thx._Path.Path_Impl_.fromString("/");
		//line 137 "/shared/core/thx/TestPath.hx"
		utest.Assert.isTrue(haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (root) ).__get(0), "/"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testRoot"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (137) )) )}));
		//line 138 "/shared/core/thx/TestPath.hx"
		utest.Assert.isFalse(haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (root) ).__get(0), "\\"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testRoot"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (138) )) )}));
		//line 139 "/shared/core/thx/TestPath.hx"
		utest.Assert.isTrue( ! (haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (root) ).__get(1), "")) , null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testRoot"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (139) )) )}));
		//line 140 "/shared/core/thx/TestPath.hx"
		utest.Assert.isFalse(haxe.lang.Runtime.valEq(((haxe.root.Array<java.lang.String>) (root) ).__get(1), ""), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testRoot"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (140) )) )}));
		//line 141 "/shared/core/thx/TestPath.hx"
		utest.Assert.isTrue(thx._Path.Path_Impl_.isRoot(root), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testRoot"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (141) )) )}));
		//line 142 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals("/", thx._Path.Path_Impl_.toString(root), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testRoot"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (142) )) )}));
		//line 143 "/shared/core/thx/TestPath.hx"
		haxe.root.Array<java.lang.String> path2 = ((haxe.root.Array<java.lang.String>) (root) ).slice(2, null);
		//line 143 "/shared/core/thx/TestPath.hx"
		java.lang.String tmp1 = ((haxe.root.Array<java.lang.String>) (root) ).__get(0);
		//line 143 "/shared/core/thx/TestPath.hx"
		haxe.root.Array<java.lang.String> path3 = path2;
		//line 143 "/shared/core/thx/TestPath.hx"
		boolean isAbsolute1 = false;
		//line 143 "/shared/core/thx/TestPath.hx"
		path3 = thx.ArrayStrings.compact(path2).filter(( (( thx.TestPath_testRoot_143__Fun_0.__hx_current != null )) ? (thx.TestPath_testRoot_143__Fun_0.__hx_current) : (thx.TestPath_testRoot_143__Fun_0.__hx_current = ((thx.TestPath_testRoot_143__Fun_0) (new thx.TestPath_testRoot_143__Fun_0()) )) ));
		//line 143 "/shared/core/thx/TestPath.hx"
		utest.Assert.equals(".", thx._Path.Path_Impl_.toString(((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{tmp1, ""}).concat(((haxe.root.Array<java.lang.String>) (thx.Arrays.reduce(((haxe.root.Array<java.lang.String>) (path3) ), ((haxe.lang.Function) (new thx.TestPath_testRoot_143__Fun(isAbsolute1)) ), ((java.lang.Object) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{})) ))) ))) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestPath", "TestPath.hx", "testRoot"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (143) )) )}));
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 7 "/shared/core/thx/TestPath.hx"
		{
			//line 7 "/shared/core/thx/TestPath.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/core/thx/TestPath.hx"
			switch (field.hashCode())
			{
				case -1146838892:
				{
					//line 7 "/shared/core/thx/TestPath.hx"
					if (field.equals("testRoot")) 
					{
						//line 7 "/shared/core/thx/TestPath.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestPath.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testRoot")) );
					}
					
					//line 7 "/shared/core/thx/TestPath.hx"
					break;
				}
				
				
				case -704472432:
				{
					//line 7 "/shared/core/thx/TestPath.hx"
					if (field.equals("testIsRelativeAndIsAbsolute")) 
					{
						//line 7 "/shared/core/thx/TestPath.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestPath.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testIsRelativeAndIsAbsolute")) );
					}
					
					//line 7 "/shared/core/thx/TestPath.hx"
					break;
				}
				
				
				case 906313371:
				{
					//line 7 "/shared/core/thx/TestPath.hx"
					if (field.equals("testNormalize")) 
					{
						//line 7 "/shared/core/thx/TestPath.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestPath.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testNormalize")) );
					}
					
					//line 7 "/shared/core/thx/TestPath.hx"
					break;
				}
				
				
				case 1624372402:
				{
					//line 7 "/shared/core/thx/TestPath.hx"
					if (field.equals("testPathTo")) 
					{
						//line 7 "/shared/core/thx/TestPath.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestPath.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testPathTo")) );
					}
					
					//line 7 "/shared/core/thx/TestPath.hx"
					break;
				}
				
				
				case -1062581986:
				{
					//line 7 "/shared/core/thx/TestPath.hx"
					if (field.equals("testToString")) 
					{
						//line 7 "/shared/core/thx/TestPath.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestPath.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testToString")) );
					}
					
					//line 7 "/shared/core/thx/TestPath.hx"
					break;
				}
				
				
				case -877169971:
				{
					//line 7 "/shared/core/thx/TestPath.hx"
					if (field.equals("testUp")) 
					{
						//line 7 "/shared/core/thx/TestPath.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestPath.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testUp")) );
					}
					
					//line 7 "/shared/core/thx/TestPath.hx"
					break;
				}
				
				
				case 498888235:
				{
					//line 7 "/shared/core/thx/TestPath.hx"
					if (field.equals("testNormalization")) 
					{
						//line 7 "/shared/core/thx/TestPath.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestPath.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testNormalization")) );
					}
					
					//line 7 "/shared/core/thx/TestPath.hx"
					break;
				}
				
				
				case -1422481765:
				{
					//line 7 "/shared/core/thx/TestPath.hx"
					if (field.equals("testDir")) 
					{
						//line 7 "/shared/core/thx/TestPath.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestPath.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testDir")) );
					}
					
					//line 7 "/shared/core/thx/TestPath.hx"
					break;
				}
				
				
				case -1528202828:
				{
					//line 7 "/shared/core/thx/TestPath.hx"
					if (field.equals("testToWin32ToNix")) 
					{
						//line 7 "/shared/core/thx/TestPath.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestPath.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testToWin32ToNix")) );
					}
					
					//line 7 "/shared/core/thx/TestPath.hx"
					break;
				}
				
				
				case -1147328893:
				{
					//line 7 "/shared/core/thx/TestPath.hx"
					if (field.equals("testBase")) 
					{
						//line 7 "/shared/core/thx/TestPath.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestPath.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testBase")) );
					}
					
					//line 7 "/shared/core/thx/TestPath.hx"
					break;
				}
				
				
				case 805909517:
				{
					//line 7 "/shared/core/thx/TestPath.hx"
					if (field.equals("testJoinString")) 
					{
						//line 7 "/shared/core/thx/TestPath.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestPath.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testJoinString")) );
					}
					
					//line 7 "/shared/core/thx/TestPath.hx"
					break;
				}
				
				
				case -1422480337:
				{
					//line 7 "/shared/core/thx/TestPath.hx"
					if (field.equals("testExt")) 
					{
						//line 7 "/shared/core/thx/TestPath.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestPath.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testExt")) );
					}
					
					//line 7 "/shared/core/thx/TestPath.hx"
					break;
				}
				
				
				case -1147077412:
				{
					//line 7 "/shared/core/thx/TestPath.hx"
					if (field.equals("testJoin")) 
					{
						//line 7 "/shared/core/thx/TestPath.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestPath.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testJoin")) );
					}
					
					//line 7 "/shared/core/thx/TestPath.hx"
					break;
				}
				
				
				case -1422467476:
				{
					//line 7 "/shared/core/thx/TestPath.hx"
					if (field.equals("testSep")) 
					{
						//line 7 "/shared/core/thx/TestPath.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestPath.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSep")) );
					}
					
					//line 7 "/shared/core/thx/TestPath.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/core/thx/TestPath.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/core/thx/TestPath.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 7 "/shared/core/thx/TestPath.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 7 "/shared/core/thx/TestPath.hx"
		{
			//line 7 "/shared/core/thx/TestPath.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/core/thx/TestPath.hx"
			switch (field.hashCode())
			{
				case -1146838892:
				{
					//line 7 "/shared/core/thx/TestPath.hx"
					if (field.equals("testRoot")) 
					{
						//line 7 "/shared/core/thx/TestPath.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestPath.hx"
						this.testRoot();
					}
					
					//line 7 "/shared/core/thx/TestPath.hx"
					break;
				}
				
				
				case -704472432:
				{
					//line 7 "/shared/core/thx/TestPath.hx"
					if (field.equals("testIsRelativeAndIsAbsolute")) 
					{
						//line 7 "/shared/core/thx/TestPath.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestPath.hx"
						this.testIsRelativeAndIsAbsolute();
					}
					
					//line 7 "/shared/core/thx/TestPath.hx"
					break;
				}
				
				
				case 906313371:
				{
					//line 7 "/shared/core/thx/TestPath.hx"
					if (field.equals("testNormalize")) 
					{
						//line 7 "/shared/core/thx/TestPath.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestPath.hx"
						this.testNormalize();
					}
					
					//line 7 "/shared/core/thx/TestPath.hx"
					break;
				}
				
				
				case 1624372402:
				{
					//line 7 "/shared/core/thx/TestPath.hx"
					if (field.equals("testPathTo")) 
					{
						//line 7 "/shared/core/thx/TestPath.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestPath.hx"
						this.testPathTo();
					}
					
					//line 7 "/shared/core/thx/TestPath.hx"
					break;
				}
				
				
				case -1062581986:
				{
					//line 7 "/shared/core/thx/TestPath.hx"
					if (field.equals("testToString")) 
					{
						//line 7 "/shared/core/thx/TestPath.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestPath.hx"
						this.testToString();
					}
					
					//line 7 "/shared/core/thx/TestPath.hx"
					break;
				}
				
				
				case -877169971:
				{
					//line 7 "/shared/core/thx/TestPath.hx"
					if (field.equals("testUp")) 
					{
						//line 7 "/shared/core/thx/TestPath.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestPath.hx"
						this.testUp();
					}
					
					//line 7 "/shared/core/thx/TestPath.hx"
					break;
				}
				
				
				case 498888235:
				{
					//line 7 "/shared/core/thx/TestPath.hx"
					if (field.equals("testNormalization")) 
					{
						//line 7 "/shared/core/thx/TestPath.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestPath.hx"
						this.testNormalization();
					}
					
					//line 7 "/shared/core/thx/TestPath.hx"
					break;
				}
				
				
				case -1422481765:
				{
					//line 7 "/shared/core/thx/TestPath.hx"
					if (field.equals("testDir")) 
					{
						//line 7 "/shared/core/thx/TestPath.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestPath.hx"
						this.testDir();
					}
					
					//line 7 "/shared/core/thx/TestPath.hx"
					break;
				}
				
				
				case -1528202828:
				{
					//line 7 "/shared/core/thx/TestPath.hx"
					if (field.equals("testToWin32ToNix")) 
					{
						//line 7 "/shared/core/thx/TestPath.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestPath.hx"
						this.testToWin32ToNix();
					}
					
					//line 7 "/shared/core/thx/TestPath.hx"
					break;
				}
				
				
				case -1147328893:
				{
					//line 7 "/shared/core/thx/TestPath.hx"
					if (field.equals("testBase")) 
					{
						//line 7 "/shared/core/thx/TestPath.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestPath.hx"
						this.testBase();
					}
					
					//line 7 "/shared/core/thx/TestPath.hx"
					break;
				}
				
				
				case 805909517:
				{
					//line 7 "/shared/core/thx/TestPath.hx"
					if (field.equals("testJoinString")) 
					{
						//line 7 "/shared/core/thx/TestPath.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestPath.hx"
						this.testJoinString();
					}
					
					//line 7 "/shared/core/thx/TestPath.hx"
					break;
				}
				
				
				case -1422480337:
				{
					//line 7 "/shared/core/thx/TestPath.hx"
					if (field.equals("testExt")) 
					{
						//line 7 "/shared/core/thx/TestPath.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestPath.hx"
						this.testExt();
					}
					
					//line 7 "/shared/core/thx/TestPath.hx"
					break;
				}
				
				
				case -1147077412:
				{
					//line 7 "/shared/core/thx/TestPath.hx"
					if (field.equals("testJoin")) 
					{
						//line 7 "/shared/core/thx/TestPath.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestPath.hx"
						this.testJoin();
					}
					
					//line 7 "/shared/core/thx/TestPath.hx"
					break;
				}
				
				
				case -1422467476:
				{
					//line 7 "/shared/core/thx/TestPath.hx"
					if (field.equals("testSep")) 
					{
						//line 7 "/shared/core/thx/TestPath.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/TestPath.hx"
						this.testSep();
					}
					
					//line 7 "/shared/core/thx/TestPath.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/core/thx/TestPath.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/core/thx/TestPath.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 7 "/shared/core/thx/TestPath.hx"
		return null;
	}
	
	
}


