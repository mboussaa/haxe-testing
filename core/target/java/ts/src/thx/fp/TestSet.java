// Generated by Haxe 3.3.0
package thx.fp;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestSet extends haxe.lang.HxObject
{
	public TestSet(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestSet()
	{
		//line 8 "/shared/core/thx/fp/TestSet.hx"
		thx.fp.TestSet.__hx_ctor_thx_fp_TestSet(this);
	}
	
	
	public static void __hx_ctor_thx_fp_TestSet(thx.fp.TestSet __temp_me247)
	{
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 7 "/shared/core/thx/fp/TestSet.hx"
		return new thx.fp.TestSet(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 7 "/shared/core/thx/fp/TestSet.hx"
		return new thx.fp.TestSet();
	}
	
	
	public void testEmpty()
	{
		//line 11 "/shared/core/thx/fp/TestSet.hx"
		thx.fp.SetImpl set = ((thx.fp.SetImpl) (thx.fp.SetImpl.Tip) );
		//line 12 "/shared/core/thx/fp/TestSet.hx"
		utest.Assert.isFalse(((boolean) (thx.fp._Set.Set_Impl_.member(((thx.fp.SetImpl) (set) ), haxe.lang.Runtime.toString("some"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testEmpty"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (12) )) )}));
		//line 13 "/shared/core/thx/fp/TestSet.hx"
		utest.Assert.equals(0, ((int) (thx.fp._Set.Set_Impl_.size(((thx.fp.SetImpl) (set) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testEmpty"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (13) )) )}));
	}
	
	
	public void testSizes()
	{
		//line 17 "/shared/core/thx/fp/TestSet.hx"
		utest.Assert.equals(3, ((int) (thx.fp._Set.Set_Impl_.size(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp.SetImpl.Bin(1, "B", thx.fp.SetImpl.Tip, thx.fp.SetImpl.Tip)) ), haxe.lang.Runtime.toString("A"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), haxe.lang.Runtime.toString("C"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testSizes"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (17) )) )}));
		//line 18 "/shared/core/thx/fp/TestSet.hx"
		utest.Assert.equals(3, ((int) (thx.fp._Set.Set_Impl_.size(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp.SetImpl.Bin(1, "A", thx.fp.SetImpl.Tip, thx.fp.SetImpl.Tip)) ), haxe.lang.Runtime.toString("B"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), haxe.lang.Runtime.toString("C"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testSizes"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (18) )) )}));
		//line 19 "/shared/core/thx/fp/TestSet.hx"
		utest.Assert.equals(3, ((int) (thx.fp._Set.Set_Impl_.size(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp.SetImpl.Bin(1, "C", thx.fp.SetImpl.Tip, thx.fp.SetImpl.Tip)) ), haxe.lang.Runtime.toString("B"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), haxe.lang.Runtime.toString("A"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testSizes"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (19) )) )}));
		//line 20 "/shared/core/thx/fp/TestSet.hx"
		utest.Assert.equals(3, ((int) (thx.fp._Set.Set_Impl_.size(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp.SetImpl.Bin(1, "B", thx.fp.SetImpl.Tip, thx.fp.SetImpl.Tip)) ), haxe.lang.Runtime.toString("C"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), haxe.lang.Runtime.toString("A"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testSizes"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (20) )) )}));
		//line 21 "/shared/core/thx/fp/TestSet.hx"
		utest.Assert.equals(3, ((int) (thx.fp._Set.Set_Impl_.size(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp.SetImpl.Bin(1, "C", thx.fp.SetImpl.Tip, thx.fp.SetImpl.Tip)) ), haxe.lang.Runtime.toString("A"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), haxe.lang.Runtime.toString("B"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testSizes"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (21) )) )}));
		//line 22 "/shared/core/thx/fp/TestSet.hx"
		utest.Assert.equals(3, ((int) (thx.fp._Set.Set_Impl_.size(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp.SetImpl.Bin(1, "A", thx.fp.SetImpl.Tip, thx.fp.SetImpl.Tip)) ), haxe.lang.Runtime.toString("C"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), haxe.lang.Runtime.toString("B"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testSizes"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (22) )) )}));
		//line 24 "/shared/core/thx/fp/TestSet.hx"
		utest.Assert.equals(1, ((int) (thx.fp._Set.Set_Impl_.size(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp.SetImpl.Bin(1, "A", thx.fp.SetImpl.Tip, thx.fp.SetImpl.Tip)) ), haxe.lang.Runtime.toString("A"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), haxe.lang.Runtime.toString("A"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testSizes"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (24) )) )}));
	}
	
	
	public void testSet()
	{
		//line 28 "/shared/core/thx/fp/TestSet.hx"
		thx.fp.SetImpl m = ((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp.SetImpl.Bin(1, "Y", thx.fp.SetImpl.Tip, thx.fp.SetImpl.Tip)) ), haxe.lang.Runtime.toString("X"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), haxe.lang.Runtime.toString("Y"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), haxe.lang.Runtime.toString("Z"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), haxe.lang.Runtime.toString("Z"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) );
		//line 29 "/shared/core/thx/fp/TestSet.hx"
		utest.Assert.isTrue(((boolean) (thx.fp._Set.Set_Impl_.member(((thx.fp.SetImpl) (m) ), haxe.lang.Runtime.toString("X"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testSet"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (29) )) )}));
		//line 30 "/shared/core/thx/fp/TestSet.hx"
		utest.Assert.isTrue(((boolean) (thx.fp._Set.Set_Impl_.member(((thx.fp.SetImpl) (m) ), haxe.lang.Runtime.toString("Y"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testSet"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (30) )) )}));
		//line 31 "/shared/core/thx/fp/TestSet.hx"
		utest.Assert.isTrue(((boolean) (thx.fp._Set.Set_Impl_.member(((thx.fp.SetImpl) (m) ), haxe.lang.Runtime.toString("Z"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testSet"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (31) )) )}));
		//line 32 "/shared/core/thx/fp/TestSet.hx"
		utest.Assert.isFalse(((boolean) (thx.fp._Set.Set_Impl_.member(((thx.fp.SetImpl) (m) ), haxe.lang.Runtime.toString("W"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testSet"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (32) )) )}));
		//line 33 "/shared/core/thx/fp/TestSet.hx"
		utest.Assert.equals(3, ((int) (thx.fp._Set.Set_Impl_.size(((thx.fp.SetImpl) (m) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testSet"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (33) )) )}));
	}
	
	
	public void testMapList()
	{
		//line 37 "/shared/core/thx/fp/TestSet.hx"
		thx.fp.SetImpl m = ((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp.SetImpl.Bin(1, "Y", thx.fp.SetImpl.Tip, thx.fp.SetImpl.Tip)) ), haxe.lang.Runtime.toString("X"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), haxe.lang.Runtime.toString("Z"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) );
		//line 37 "/shared/core/thx/fp/TestSet.hx"
		thx.fp.ListImpl l = ((thx.fp.ListImpl) (thx.fp._Set.Set_Impl_.mapList(((thx.fp.SetImpl) (m) ), ((haxe.lang.Function) (( (( thx.fp.TestSet_testMapList_38__Fun.__hx_current != null )) ? (thx.fp.TestSet_testMapList_38__Fun.__hx_current) : (thx.fp.TestSet_testMapList_38__Fun.__hx_current = ((thx.fp.TestSet_testMapList_38__Fun) (new thx.fp.TestSet_testMapList_38__Fun()) )) )) ))) );
		//line 40 "/shared/core/thx/fp/TestSet.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{"x", "y", "z"}), ((haxe.root.Array<java.lang.String>) (thx.Arrays.order(((haxe.root.Array<java.lang.String>) (thx.fp._List.List_Impl_.foldLeft(((thx.fp.ListImpl) (l) ), ((java.lang.Object) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{})) ), ((haxe.lang.Function) (( (( thx.fp.TestSet_testMapList_40__Fun.__hx_current != null )) ? (thx.fp.TestSet_testMapList_40__Fun.__hx_current) : (thx.fp.TestSet_testMapList_40__Fun.__hx_current = ((thx.fp.TestSet_testMapList_40__Fun) (new thx.fp.TestSet_testMapList_40__Fun()) )) )) ))) ), ((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testMapList"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (40) )) )}));
	}
	
	
	public void testFoldLeft()
	{
		//line 44 "/shared/core/thx/fp/TestSet.hx"
		thx.fp.SetImpl set = ((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp.SetImpl.Bin(1, 1, thx.fp.SetImpl.Tip, thx.fp.SetImpl.Tip)) ), ((java.lang.Object) (2) ), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Ints.class, "compare")) ))) ))) ), ((java.lang.Object) (3) ), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Ints.class, "compare")) ))) ))) );
		//line 45 "/shared/core/thx/fp/TestSet.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2, 3}), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.Arrays.order(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (thx.fp._Set.Set_Impl_.foldLeft(((thx.fp.SetImpl) (set) ), ((java.lang.Object) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{})) ), ((haxe.lang.Function) (( (( thx.fp.TestSet_testFoldLeft_45__Fun.__hx_current != null )) ? (thx.fp.TestSet_testFoldLeft_45__Fun.__hx_current) : (thx.fp.TestSet_testFoldLeft_45__Fun.__hx_current = ((thx.fp.TestSet_testFoldLeft_45__Fun) (new thx.fp.TestSet_testFoldLeft_45__Fun()) )) )) ))) )) )) ), ((haxe.lang.Function) (new haxe.lang.Closure(thx.Ints.class, "compare")) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testFoldLeft"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (45) )) )}));
	}
	
	
	public void testToList()
	{
		//line 52 "/shared/core/thx/fp/TestSet.hx"
		thx.fp.SetImpl m = ((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp._Set.Set_Impl_.insert(((thx.fp.SetImpl) (thx.fp.SetImpl.Bin(1, "Y", thx.fp.SetImpl.Tip, thx.fp.SetImpl.Tip)) ), haxe.lang.Runtime.toString("X"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) ), haxe.lang.Runtime.toString("Z"), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.fromIntComparison(((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ))) );
		//line 52 "/shared/core/thx/fp/TestSet.hx"
		thx.fp.ListImpl l = ((thx.fp.ListImpl) (thx.fp._Set.Set_Impl_.toList(((thx.fp.SetImpl) (m) ))) );
		//line 55 "/shared/core/thx/fp/TestSet.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{"X", "Y", "Z"}), ((haxe.root.Array<java.lang.String>) (thx.Arrays.order(((haxe.root.Array<java.lang.String>) (thx.fp._List.List_Impl_.foldLeft(((thx.fp.ListImpl) (l) ), ((java.lang.Object) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{})) ), ((haxe.lang.Function) (( (( thx.fp.TestSet_testToList_55__Fun.__hx_current != null )) ? (thx.fp.TestSet_testToList_55__Fun.__hx_current) : (thx.fp.TestSet_testToList_55__Fun.__hx_current = ((thx.fp.TestSet_testToList_55__Fun) (new thx.fp.TestSet_testToList_55__Fun()) )) )) ))) ), ((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestSet", "TestSet.hx", "testToList"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (55) )) )}));
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 7 "/shared/core/thx/fp/TestSet.hx"
		{
			//line 7 "/shared/core/thx/fp/TestSet.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/core/thx/fp/TestSet.hx"
			switch (field.hashCode())
			{
				case 1750628587:
				{
					//line 7 "/shared/core/thx/fp/TestSet.hx"
					if (field.equals("testToList")) 
					{
						//line 7 "/shared/core/thx/fp/TestSet.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/fp/TestSet.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testToList")) );
					}
					
					//line 7 "/shared/core/thx/fp/TestSet.hx"
					break;
				}
				
				
				case -1204331557:
				{
					//line 7 "/shared/core/thx/fp/TestSet.hx"
					if (field.equals("testEmpty")) 
					{
						//line 7 "/shared/core/thx/fp/TestSet.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/fp/TestSet.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testEmpty")) );
					}
					
					//line 7 "/shared/core/thx/fp/TestSet.hx"
					break;
				}
				
				
				case 1007693402:
				{
					//line 7 "/shared/core/thx/fp/TestSet.hx"
					if (field.equals("testFoldLeft")) 
					{
						//line 7 "/shared/core/thx/fp/TestSet.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/fp/TestSet.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFoldLeft")) );
					}
					
					//line 7 "/shared/core/thx/fp/TestSet.hx"
					break;
				}
				
				
				case -1191512288:
				{
					//line 7 "/shared/core/thx/fp/TestSet.hx"
					if (field.equals("testSizes")) 
					{
						//line 7 "/shared/core/thx/fp/TestSet.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/fp/TestSet.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSizes")) );
					}
					
					//line 7 "/shared/core/thx/fp/TestSet.hx"
					break;
				}
				
				
				case 443885352:
				{
					//line 7 "/shared/core/thx/fp/TestSet.hx"
					if (field.equals("testMapList")) 
					{
						//line 7 "/shared/core/thx/fp/TestSet.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/fp/TestSet.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testMapList")) );
					}
					
					//line 7 "/shared/core/thx/fp/TestSet.hx"
					break;
				}
				
				
				case -1422467472:
				{
					//line 7 "/shared/core/thx/fp/TestSet.hx"
					if (field.equals("testSet")) 
					{
						//line 7 "/shared/core/thx/fp/TestSet.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/fp/TestSet.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSet")) );
					}
					
					//line 7 "/shared/core/thx/fp/TestSet.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/core/thx/fp/TestSet.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/core/thx/fp/TestSet.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 7 "/shared/core/thx/fp/TestSet.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 7 "/shared/core/thx/fp/TestSet.hx"
		{
			//line 7 "/shared/core/thx/fp/TestSet.hx"
			boolean __temp_executeDef1 = true;
			//line 7 "/shared/core/thx/fp/TestSet.hx"
			switch (field.hashCode())
			{
				case 1750628587:
				{
					//line 7 "/shared/core/thx/fp/TestSet.hx"
					if (field.equals("testToList")) 
					{
						//line 7 "/shared/core/thx/fp/TestSet.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/fp/TestSet.hx"
						this.testToList();
					}
					
					//line 7 "/shared/core/thx/fp/TestSet.hx"
					break;
				}
				
				
				case -1204331557:
				{
					//line 7 "/shared/core/thx/fp/TestSet.hx"
					if (field.equals("testEmpty")) 
					{
						//line 7 "/shared/core/thx/fp/TestSet.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/fp/TestSet.hx"
						this.testEmpty();
					}
					
					//line 7 "/shared/core/thx/fp/TestSet.hx"
					break;
				}
				
				
				case 1007693402:
				{
					//line 7 "/shared/core/thx/fp/TestSet.hx"
					if (field.equals("testFoldLeft")) 
					{
						//line 7 "/shared/core/thx/fp/TestSet.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/fp/TestSet.hx"
						this.testFoldLeft();
					}
					
					//line 7 "/shared/core/thx/fp/TestSet.hx"
					break;
				}
				
				
				case -1191512288:
				{
					//line 7 "/shared/core/thx/fp/TestSet.hx"
					if (field.equals("testSizes")) 
					{
						//line 7 "/shared/core/thx/fp/TestSet.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/fp/TestSet.hx"
						this.testSizes();
					}
					
					//line 7 "/shared/core/thx/fp/TestSet.hx"
					break;
				}
				
				
				case 443885352:
				{
					//line 7 "/shared/core/thx/fp/TestSet.hx"
					if (field.equals("testMapList")) 
					{
						//line 7 "/shared/core/thx/fp/TestSet.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/fp/TestSet.hx"
						this.testMapList();
					}
					
					//line 7 "/shared/core/thx/fp/TestSet.hx"
					break;
				}
				
				
				case -1422467472:
				{
					//line 7 "/shared/core/thx/fp/TestSet.hx"
					if (field.equals("testSet")) 
					{
						//line 7 "/shared/core/thx/fp/TestSet.hx"
						__temp_executeDef1 = false;
						//line 7 "/shared/core/thx/fp/TestSet.hx"
						this.testSet();
					}
					
					//line 7 "/shared/core/thx/fp/TestSet.hx"
					break;
				}
				
				
			}
			
			//line 7 "/shared/core/thx/fp/TestSet.hx"
			if (__temp_executeDef1) 
			{
				//line 7 "/shared/core/thx/fp/TestSet.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 7 "/shared/core/thx/fp/TestSet.hx"
		return null;
	}
	
	
}


