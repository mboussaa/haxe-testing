// Generated by Haxe 3.3.0
package thx.fp;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestMap extends haxe.lang.HxObject
{
	public TestMap(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestMap()
	{
		//line 11 "/shared/core/thx/fp/TestMap.hx"
		thx.fp.TestMap.__hx_ctor_thx_fp_TestMap(this);
	}
	
	
	public static void __hx_ctor_thx_fp_TestMap(thx.fp.TestMap __temp_me244)
	{
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 10 "/shared/core/thx/fp/TestMap.hx"
		return new thx.fp.TestMap(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 10 "/shared/core/thx/fp/TestMap.hx"
		return new thx.fp.TestMap();
	}
	
	
	public void testRemove()
	{
		//line 14 "/shared/core/thx/fp/TestMap.hx"
		thx.fp.MapImpl m = ((thx.fp.MapImpl) (thx.fp._Map.Map_Impl_.delete(((thx.fp.MapImpl) (thx.fp._Map.Map_Impl_.insert(((thx.fp.MapImpl) (thx.fp._Map.Map_Impl_.insert(((thx.fp.MapImpl) (thx.fp.MapImpl.Bin(1, "Y", 1, thx.fp.MapImpl.Tip, thx.fp.MapImpl.Tip)) ), haxe.lang.Runtime.toString("X"), ((java.lang.Object) (2) ), ((haxe.lang.Function) (thx.Strings.order) ))) ), haxe.lang.Runtime.toString("Z"), ((java.lang.Object) (3) ), ((haxe.lang.Function) (thx.Strings.order) ))) ), haxe.lang.Runtime.toString("X"), ((haxe.lang.Function) (thx.Strings.order) ))) );
		//line 18 "/shared/core/thx/fp/TestMap.hx"
		utest.Assert.same(haxe.ds.Option.Some(1), ((haxe.ds.Option) (thx.fp._Map.Map_Impl_.lookup(((thx.fp.MapImpl) (m) ), haxe.lang.Runtime.toString("Y"), ((haxe.lang.Function) (thx.Strings.order) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestMap", "TestMap.hx", "testRemove"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (18) )) )}));
		//line 19 "/shared/core/thx/fp/TestMap.hx"
		utest.Assert.same(haxe.ds.Option.Some(3), ((haxe.ds.Option) (thx.fp._Map.Map_Impl_.lookup(((thx.fp.MapImpl) (m) ), haxe.lang.Runtime.toString("Z"), ((haxe.lang.Function) (thx.Strings.order) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestMap", "TestMap.hx", "testRemove"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (19) )) )}));
		//line 20 "/shared/core/thx/fp/TestMap.hx"
		utest.Assert.equals(2, ((int) (thx.fp._Map.Map_Impl_.size(((thx.fp.MapImpl) (m) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestMap", "TestMap.hx", "testRemove"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (20) )) )}));
	}
	
	
	public void testEmpty()
	{
		//line 24 "/shared/core/thx/fp/TestMap.hx"
		thx.fp.MapImpl m = ((thx.fp.MapImpl) (thx.fp.MapImpl.Tip) );
		//line 25 "/shared/core/thx/fp/TestMap.hx"
		utest.Assert.same(haxe.ds.Option.None, ((haxe.ds.Option) (thx.fp._Map.Map_Impl_.lookup(((thx.fp.MapImpl) (m) ), haxe.lang.Runtime.toString("some"), ((haxe.lang.Function) (thx.Strings.order) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestMap", "TestMap.hx", "testEmpty"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (25) )) )}));
		//line 26 "/shared/core/thx/fp/TestMap.hx"
		utest.Assert.equals(0, ((int) (thx.fp._Map.Map_Impl_.size(((thx.fp.MapImpl) (m) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestMap", "TestMap.hx", "testEmpty"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (26) )) )}));
	}
	
	
	public void testSizes()
	{
		//line 30 "/shared/core/thx/fp/TestMap.hx"
		utest.Assert.equals(3, ((int) (thx.fp._Map.Map_Impl_.size(((thx.fp.MapImpl) (thx.fp._Map.Map_Impl_.insert(((thx.fp.MapImpl) (thx.fp._Map.Map_Impl_.insert(((thx.fp.MapImpl) (thx.fp.MapImpl.Bin(1, "B", 1, thx.fp.MapImpl.Tip, thx.fp.MapImpl.Tip)) ), haxe.lang.Runtime.toString("A"), ((java.lang.Object) (1) ), ((haxe.lang.Function) (thx.Strings.order) ))) ), haxe.lang.Runtime.toString("C"), ((java.lang.Object) (1) ), ((haxe.lang.Function) (thx.Strings.order) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestMap", "TestMap.hx", "testSizes"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (30) )) )}));
		//line 31 "/shared/core/thx/fp/TestMap.hx"
		utest.Assert.equals(3, ((int) (thx.fp._Map.Map_Impl_.size(((thx.fp.MapImpl) (thx.fp._Map.Map_Impl_.insert(((thx.fp.MapImpl) (thx.fp._Map.Map_Impl_.insert(((thx.fp.MapImpl) (thx.fp.MapImpl.Bin(1, "A", 1, thx.fp.MapImpl.Tip, thx.fp.MapImpl.Tip)) ), haxe.lang.Runtime.toString("B"), ((java.lang.Object) (1) ), ((haxe.lang.Function) (thx.Strings.order) ))) ), haxe.lang.Runtime.toString("C"), ((java.lang.Object) (1) ), ((haxe.lang.Function) (thx.Strings.order) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestMap", "TestMap.hx", "testSizes"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (31) )) )}));
		//line 32 "/shared/core/thx/fp/TestMap.hx"
		utest.Assert.equals(3, ((int) (thx.fp._Map.Map_Impl_.size(((thx.fp.MapImpl) (thx.fp._Map.Map_Impl_.insert(((thx.fp.MapImpl) (thx.fp._Map.Map_Impl_.insert(((thx.fp.MapImpl) (thx.fp.MapImpl.Bin(1, "C", 1, thx.fp.MapImpl.Tip, thx.fp.MapImpl.Tip)) ), haxe.lang.Runtime.toString("B"), ((java.lang.Object) (1) ), ((haxe.lang.Function) (thx.Strings.order) ))) ), haxe.lang.Runtime.toString("A"), ((java.lang.Object) (1) ), ((haxe.lang.Function) (thx.Strings.order) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestMap", "TestMap.hx", "testSizes"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (32) )) )}));
		//line 33 "/shared/core/thx/fp/TestMap.hx"
		utest.Assert.equals(3, ((int) (thx.fp._Map.Map_Impl_.size(((thx.fp.MapImpl) (thx.fp._Map.Map_Impl_.insert(((thx.fp.MapImpl) (thx.fp._Map.Map_Impl_.insert(((thx.fp.MapImpl) (thx.fp.MapImpl.Bin(1, "B", 1, thx.fp.MapImpl.Tip, thx.fp.MapImpl.Tip)) ), haxe.lang.Runtime.toString("C"), ((java.lang.Object) (1) ), ((haxe.lang.Function) (thx.Strings.order) ))) ), haxe.lang.Runtime.toString("A"), ((java.lang.Object) (1) ), ((haxe.lang.Function) (thx.Strings.order) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestMap", "TestMap.hx", "testSizes"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (33) )) )}));
		//line 34 "/shared/core/thx/fp/TestMap.hx"
		utest.Assert.equals(3, ((int) (thx.fp._Map.Map_Impl_.size(((thx.fp.MapImpl) (thx.fp._Map.Map_Impl_.insert(((thx.fp.MapImpl) (thx.fp._Map.Map_Impl_.insert(((thx.fp.MapImpl) (thx.fp.MapImpl.Bin(1, "C", 1, thx.fp.MapImpl.Tip, thx.fp.MapImpl.Tip)) ), haxe.lang.Runtime.toString("A"), ((java.lang.Object) (1) ), ((haxe.lang.Function) (thx.Strings.order) ))) ), haxe.lang.Runtime.toString("B"), ((java.lang.Object) (1) ), ((haxe.lang.Function) (thx.Strings.order) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestMap", "TestMap.hx", "testSizes"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (34) )) )}));
		//line 35 "/shared/core/thx/fp/TestMap.hx"
		utest.Assert.equals(3, ((int) (thx.fp._Map.Map_Impl_.size(((thx.fp.MapImpl) (thx.fp._Map.Map_Impl_.insert(((thx.fp.MapImpl) (thx.fp._Map.Map_Impl_.insert(((thx.fp.MapImpl) (thx.fp.MapImpl.Bin(1, "A", 1, thx.fp.MapImpl.Tip, thx.fp.MapImpl.Tip)) ), haxe.lang.Runtime.toString("C"), ((java.lang.Object) (1) ), ((haxe.lang.Function) (thx.Strings.order) ))) ), haxe.lang.Runtime.toString("B"), ((java.lang.Object) (1) ), ((haxe.lang.Function) (thx.Strings.order) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestMap", "TestMap.hx", "testSizes"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (35) )) )}));
		//line 37 "/shared/core/thx/fp/TestMap.hx"
		utest.Assert.equals(1, ((int) (thx.fp._Map.Map_Impl_.size(((thx.fp.MapImpl) (thx.fp._Map.Map_Impl_.insert(((thx.fp.MapImpl) (thx.fp._Map.Map_Impl_.insert(((thx.fp.MapImpl) (thx.fp.MapImpl.Bin(1, "A", 1, thx.fp.MapImpl.Tip, thx.fp.MapImpl.Tip)) ), haxe.lang.Runtime.toString("A"), ((java.lang.Object) (1) ), ((haxe.lang.Function) (thx.Strings.order) ))) ), haxe.lang.Runtime.toString("A"), ((java.lang.Object) (1) ), ((haxe.lang.Function) (thx.Strings.order) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestMap", "TestMap.hx", "testSizes"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (37) )) )}));
	}
	
	
	public void testFoldLeft()
	{
		//line 41 "/shared/core/thx/fp/TestMap.hx"
		thx.fp.MapImpl map = ((thx.fp.MapImpl) (thx.fp._Map.Map_Impl_.insert(((thx.fp.MapImpl) (thx.fp._Map.Map_Impl_.insert(((thx.fp.MapImpl) (thx.fp.MapImpl.Bin(1, "A", 1, thx.fp.MapImpl.Tip, thx.fp.MapImpl.Tip)) ), haxe.lang.Runtime.toString("B"), ((java.lang.Object) (2) ), ((haxe.lang.Function) (thx.Strings.order) ))) ), haxe.lang.Runtime.toString("C"), ((java.lang.Object) (3) ), ((haxe.lang.Function) (thx.Strings.order) ))) );
		//line 42 "/shared/core/thx/fp/TestMap.hx"
		haxe.root.Array<java.lang.Object> arr = ((haxe.root.Array<java.lang.Object>) (thx.fp._Map.Map_Impl_.foldLeft(((thx.fp.MapImpl) (map) ), ((java.lang.Object) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{})) ), ((haxe.lang.Function) (( (( thx.fp.TestMap_testFoldLeft_42__Fun.__hx_current != null )) ? (thx.fp.TestMap_testFoldLeft_42__Fun.__hx_current) : (thx.fp.TestMap_testFoldLeft_42__Fun.__hx_current = ((thx.fp.TestMap_testFoldLeft_42__Fun) (new thx.fp.TestMap_testFoldLeft_42__Fun()) )) )) ))) );
		//line 46 "/shared/core/thx/fp/TestMap.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2, 3}), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.Arrays.order(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (arr) )) ), ((haxe.lang.Function) (new haxe.lang.Closure(thx.Ints.class, "compare")) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestMap", "TestMap.hx", "testFoldLeft"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (46) )) )}));
	}
	
	
	public void testFoldLeftKeys()
	{
		//line 50 "/shared/core/thx/fp/TestMap.hx"
		thx.fp.MapImpl map = ((thx.fp.MapImpl) (thx.fp._Map.Map_Impl_.insert(((thx.fp.MapImpl) (thx.fp._Map.Map_Impl_.insert(((thx.fp.MapImpl) (thx.fp.MapImpl.Bin(1, "A", 1, thx.fp.MapImpl.Tip, thx.fp.MapImpl.Tip)) ), haxe.lang.Runtime.toString("B"), ((java.lang.Object) (2) ), ((haxe.lang.Function) (thx.Strings.order) ))) ), haxe.lang.Runtime.toString("C"), ((java.lang.Object) (3) ), ((haxe.lang.Function) (thx.Strings.order) ))) );
		//line 51 "/shared/core/thx/fp/TestMap.hx"
		haxe.root.Array<java.lang.String> arr = ((haxe.root.Array<java.lang.String>) (thx.fp._Map.Map_Impl_.foldLeftKeys(((thx.fp.MapImpl) (map) ), ((java.lang.Object) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{})) ), ((haxe.lang.Function) (( (( thx.fp.TestMap_testFoldLeftKeys_51__Fun.__hx_current != null )) ? (thx.fp.TestMap_testFoldLeftKeys_51__Fun.__hx_current) : (thx.fp.TestMap_testFoldLeftKeys_51__Fun.__hx_current = ((thx.fp.TestMap_testFoldLeftKeys_51__Fun) (new thx.fp.TestMap_testFoldLeftKeys_51__Fun()) )) )) ))) );
		//line 55 "/shared/core/thx/fp/TestMap.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{"A", "B", "C"}), ((haxe.root.Array<java.lang.String>) (thx.Arrays.order(((haxe.root.Array<java.lang.String>) (arr) ), ((haxe.lang.Function) (new haxe.lang.Closure(thx.Strings.class, "compare")) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestMap", "TestMap.hx", "testFoldLeftKeys"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (55) )) )}));
	}
	
	
	public void testSet()
	{
		//line 59 "/shared/core/thx/fp/TestMap.hx"
		thx.fp.MapImpl m = ((thx.fp.MapImpl) (thx.fp._Map.Map_Impl_.insert(((thx.fp.MapImpl) (thx.fp._Map.Map_Impl_.insert(((thx.fp.MapImpl) (thx.fp.MapImpl.Bin(1, "Y", 1, thx.fp.MapImpl.Tip, thx.fp.MapImpl.Tip)) ), haxe.lang.Runtime.toString("X"), ((java.lang.Object) (2) ), ((haxe.lang.Function) (thx.Strings.order) ))) ), haxe.lang.Runtime.toString("Z"), ((java.lang.Object) (3) ), ((haxe.lang.Function) (thx.Strings.order) ))) );
		//line 60 "/shared/core/thx/fp/TestMap.hx"
		utest.Assert.same(haxe.ds.Option.Some(2), ((haxe.ds.Option) (thx.fp._Map.Map_Impl_.lookup(((thx.fp.MapImpl) (m) ), haxe.lang.Runtime.toString("X"), ((haxe.lang.Function) (thx.Strings.order) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestMap", "TestMap.hx", "testSet"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (60) )) )}));
		//line 61 "/shared/core/thx/fp/TestMap.hx"
		utest.Assert.same(haxe.ds.Option.Some(1), ((haxe.ds.Option) (thx.fp._Map.Map_Impl_.lookup(((thx.fp.MapImpl) (m) ), haxe.lang.Runtime.toString("Y"), ((haxe.lang.Function) (thx.Strings.order) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestMap", "TestMap.hx", "testSet"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (61) )) )}));
		//line 62 "/shared/core/thx/fp/TestMap.hx"
		utest.Assert.same(haxe.ds.Option.Some(3), ((haxe.ds.Option) (thx.fp._Map.Map_Impl_.lookup(((thx.fp.MapImpl) (m) ), haxe.lang.Runtime.toString("Z"), ((haxe.lang.Function) (thx.Strings.order) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestMap", "TestMap.hx", "testSet"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (62) )) )}));
		//line 63 "/shared/core/thx/fp/TestMap.hx"
		utest.Assert.equals(3, ((int) (thx.fp._Map.Map_Impl_.size(((thx.fp.MapImpl) (m) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestMap", "TestMap.hx", "testSet"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (63) )) )}));
	}
	
	
	public void testObjectSet()
	{
		//line 67 "/shared/core/thx/fp/TestMap.hx"
		thx.fp.CO a = new thx.fp.CO(haxe.lang.Runtime.toString("a"));
		//line 67 "/shared/core/thx/fp/TestMap.hx"
		thx.fp.CO b = new thx.fp.CO(haxe.lang.Runtime.toString("b"));
		//line 67 "/shared/core/thx/fp/TestMap.hx"
		thx.fp.CO c = new thx.fp.CO(haxe.lang.Runtime.toString("c"));
		//line 67 "/shared/core/thx/fp/TestMap.hx"
		thx.fp.MapImpl m = ((thx.fp.MapImpl) (thx.fp._Map.Map_Impl_.insert(((thx.fp.MapImpl) (thx.fp._Map.Map_Impl_.insert(((thx.fp.MapImpl) (thx.fp.MapImpl.Bin(1, a, 1, thx.fp.MapImpl.Tip, thx.fp.MapImpl.Tip)) ), ((thx.fp.CO) (b) ), ((java.lang.Object) (2) ), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.forComparableOrd()) ))) ), ((thx.fp.CO) (c) ), ((java.lang.Object) (3) ), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.forComparableOrd()) ))) );
		//line 74 "/shared/core/thx/fp/TestMap.hx"
		utest.Assert.same(haxe.ds.Option.Some(1), ((haxe.ds.Option) (thx.fp._Map.Map_Impl_.lookup(((thx.fp.MapImpl) (m) ), ((thx.fp.CO) (a) ), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.forComparableOrd()) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestMap", "TestMap.hx", "testObjectSet"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (74) )) )}));
		//line 75 "/shared/core/thx/fp/TestMap.hx"
		utest.Assert.same(haxe.ds.Option.Some(2), ((haxe.ds.Option) (thx.fp._Map.Map_Impl_.lookup(((thx.fp.MapImpl) (m) ), ((thx.fp.CO) (b) ), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.forComparableOrd()) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestMap", "TestMap.hx", "testObjectSet"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (75) )) )}));
		//line 76 "/shared/core/thx/fp/TestMap.hx"
		utest.Assert.same(haxe.ds.Option.Some(3), ((haxe.ds.Option) (thx.fp._Map.Map_Impl_.lookup(((thx.fp.MapImpl) (m) ), ((thx.fp.CO) (c) ), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.forComparableOrd()) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestMap", "TestMap.hx", "testObjectSet"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (76) )) )}));
		//line 77 "/shared/core/thx/fp/TestMap.hx"
		utest.Assert.equals(3, ((int) (thx.fp._Map.Map_Impl_.size(((thx.fp.MapImpl) (m) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestMap", "TestMap.hx", "testObjectSet"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (77) )) )}));
	}
	
	
	public void testObjectSet2()
	{
		//line 81 "/shared/core/thx/fp/TestMap.hx"
		thx.fp.CO2 a = new thx.fp.CO2(haxe.lang.Runtime.toString("a"));
		//line 81 "/shared/core/thx/fp/TestMap.hx"
		thx.fp.CO2 b = new thx.fp.CO2(haxe.lang.Runtime.toString("b"));
		//line 81 "/shared/core/thx/fp/TestMap.hx"
		thx.fp.CO2 c = new thx.fp.CO2(haxe.lang.Runtime.toString("c"));
		//line 81 "/shared/core/thx/fp/TestMap.hx"
		thx.fp.MapImpl m = ((thx.fp.MapImpl) (thx.fp._Map.Map_Impl_.insert(((thx.fp.MapImpl) (thx.fp._Map.Map_Impl_.insert(((thx.fp.MapImpl) (thx.fp.MapImpl.Bin(1, a, 1, thx.fp.MapImpl.Tip, thx.fp.MapImpl.Tip)) ), ((thx.fp.CO2) (b) ), ((java.lang.Object) (2) ), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.forComparable()) ))) ), ((thx.fp.CO2) (c) ), ((java.lang.Object) (3) ), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.forComparable()) ))) );
		//line 88 "/shared/core/thx/fp/TestMap.hx"
		utest.Assert.same(haxe.ds.Option.Some(1), ((haxe.ds.Option) (thx.fp._Map.Map_Impl_.lookup(((thx.fp.MapImpl) (m) ), ((thx.fp.CO2) (a) ), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.forComparable()) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestMap", "TestMap.hx", "testObjectSet2"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (88) )) )}));
		//line 89 "/shared/core/thx/fp/TestMap.hx"
		utest.Assert.same(haxe.ds.Option.Some(2), ((haxe.ds.Option) (thx.fp._Map.Map_Impl_.lookup(((thx.fp.MapImpl) (m) ), ((thx.fp.CO2) (b) ), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.forComparable()) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestMap", "TestMap.hx", "testObjectSet2"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (89) )) )}));
		//line 90 "/shared/core/thx/fp/TestMap.hx"
		utest.Assert.same(haxe.ds.Option.Some(3), ((haxe.ds.Option) (thx.fp._Map.Map_Impl_.lookup(((thx.fp.MapImpl) (m) ), ((thx.fp.CO2) (c) ), ((haxe.lang.Function) (thx._Ord.Ord_Impl_.forComparable()) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestMap", "TestMap.hx", "testObjectSet2"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (90) )) )}));
		//line 91 "/shared/core/thx/fp/TestMap.hx"
		utest.Assert.equals(3, ((int) (thx.fp._Map.Map_Impl_.size(((thx.fp.MapImpl) (m) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestMap", "TestMap.hx", "testObjectSet2"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (91) )) )}));
	}
	
	
	public void testFromNative()
	{
		//line 95 "/shared/core/thx/fp/TestMap.hx"
		haxe.ds.StringMap<java.lang.Object> _g = new haxe.ds.StringMap<java.lang.Object>();
		//line 95 "/shared/core/thx/fp/TestMap.hx"
		_g.set("a", 1);
		//line 95 "/shared/core/thx/fp/TestMap.hx"
		_g.set("b", 2);
		//line 95 "/shared/core/thx/fp/TestMap.hx"
		thx.fp.MapImpl map = ((thx.fp.MapImpl) (thx.fp.StringMap.fromNative(((haxe.IMap<java.lang.String, java.lang.Object>) (((haxe.IMap) (((haxe.IMap<java.lang.String, java.lang.Object>) (_g) )) )) ))) );
		//line 97 "/shared/core/thx/fp/TestMap.hx"
		utest.Assert.equals(2, ((int) (thx.fp._Map.Map_Impl_.size(((thx.fp.MapImpl) (map) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestMap", "TestMap.hx", "testFromNative"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (97) )) )}));
		//line 98 "/shared/core/thx/fp/TestMap.hx"
		utest.Assert.isTrue(((boolean) (thx.Options.toBool(((haxe.ds.Option) (thx.fp._Map.Map_Impl_.lookup(((thx.fp.MapImpl) (map) ), haxe.lang.Runtime.toString("a"), ((haxe.lang.Function) (thx.Strings.order) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestMap", "TestMap.hx", "testFromNative"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (98) )) )}));
		//line 99 "/shared/core/thx/fp/TestMap.hx"
		utest.Assert.isTrue(((boolean) (thx.Options.toBool(((haxe.ds.Option) (thx.fp._Map.Map_Impl_.lookup(((thx.fp.MapImpl) (map) ), haxe.lang.Runtime.toString("b"), ((haxe.lang.Function) (thx.Strings.order) ))) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestMap", "TestMap.hx", "testFromNative"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (99) )) )}));
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 10 "/shared/core/thx/fp/TestMap.hx"
		{
			//line 10 "/shared/core/thx/fp/TestMap.hx"
			boolean __temp_executeDef1 = true;
			//line 10 "/shared/core/thx/fp/TestMap.hx"
			switch (field.hashCode())
			{
				case 1283358355:
				{
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					if (field.equals("testFromNative")) 
					{
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFromNative")) );
					}
					
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					break;
				}
				
				
				case 1685124022:
				{
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					if (field.equals("testRemove")) 
					{
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testRemove")) );
					}
					
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					break;
				}
				
				
				case 352797217:
				{
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					if (field.equals("testObjectSet2")) 
					{
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testObjectSet2")) );
					}
					
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					break;
				}
				
				
				case -1204331557:
				{
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					if (field.equals("testEmpty")) 
					{
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testEmpty")) );
					}
					
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					break;
				}
				
				
				case -819903439:
				{
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					if (field.equals("testObjectSet")) 
					{
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testObjectSet")) );
					}
					
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					break;
				}
				
				
				case -1191512288:
				{
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					if (field.equals("testSizes")) 
					{
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSizes")) );
					}
					
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					break;
				}
				
				
				case -1422467472:
				{
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					if (field.equals("testSet")) 
					{
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSet")) );
					}
					
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					break;
				}
				
				
				case 1007693402:
				{
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					if (field.equals("testFoldLeft")) 
					{
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFoldLeft")) );
					}
					
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					break;
				}
				
				
				case 1096881006:
				{
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					if (field.equals("testFoldLeftKeys")) 
					{
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFoldLeftKeys")) );
					}
					
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					break;
				}
				
				
			}
			
			//line 10 "/shared/core/thx/fp/TestMap.hx"
			if (__temp_executeDef1) 
			{
				//line 10 "/shared/core/thx/fp/TestMap.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 10 "/shared/core/thx/fp/TestMap.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 10 "/shared/core/thx/fp/TestMap.hx"
		{
			//line 10 "/shared/core/thx/fp/TestMap.hx"
			boolean __temp_executeDef1 = true;
			//line 10 "/shared/core/thx/fp/TestMap.hx"
			switch (field.hashCode())
			{
				case 1283358355:
				{
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					if (field.equals("testFromNative")) 
					{
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						this.testFromNative();
					}
					
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					break;
				}
				
				
				case 1685124022:
				{
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					if (field.equals("testRemove")) 
					{
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						this.testRemove();
					}
					
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					break;
				}
				
				
				case 352797217:
				{
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					if (field.equals("testObjectSet2")) 
					{
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						this.testObjectSet2();
					}
					
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					break;
				}
				
				
				case -1204331557:
				{
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					if (field.equals("testEmpty")) 
					{
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						this.testEmpty();
					}
					
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					break;
				}
				
				
				case -819903439:
				{
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					if (field.equals("testObjectSet")) 
					{
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						this.testObjectSet();
					}
					
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					break;
				}
				
				
				case -1191512288:
				{
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					if (field.equals("testSizes")) 
					{
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						this.testSizes();
					}
					
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					break;
				}
				
				
				case -1422467472:
				{
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					if (field.equals("testSet")) 
					{
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						this.testSet();
					}
					
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					break;
				}
				
				
				case 1007693402:
				{
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					if (field.equals("testFoldLeft")) 
					{
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						this.testFoldLeft();
					}
					
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					break;
				}
				
				
				case 1096881006:
				{
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					if (field.equals("testFoldLeftKeys")) 
					{
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/thx/fp/TestMap.hx"
						this.testFoldLeftKeys();
					}
					
					//line 10 "/shared/core/thx/fp/TestMap.hx"
					break;
				}
				
				
			}
			
			//line 10 "/shared/core/thx/fp/TestMap.hx"
			if (__temp_executeDef1) 
			{
				//line 10 "/shared/core/thx/fp/TestMap.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 10 "/shared/core/thx/fp/TestMap.hx"
		return null;
	}
	
	
}


