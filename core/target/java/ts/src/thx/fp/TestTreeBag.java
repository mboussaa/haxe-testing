// Generated by Haxe 3.3.0
package thx.fp;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestTreeBag extends haxe.lang.HxObject
{
	static
	{
		//line 11 "/shared/core/thx/fp/TestTreeBag.hx"
		thx.fp.TestTreeBag.t0 = ((thx.fp.TreeBagImpl) (thx.fp.TreeBagImpl.Empty) );
		//line 12 "/shared/core/thx/fp/TestTreeBag.hx"
		thx.fp.TestTreeBag.t1 = thx.fp.TreeBagImpl.Cons(1, ((thx.fp.TreeBagImpl) (thx.fp.TreeBagImpl.Cons(2, thx.fp.TestTreeBag.t0)) ));
		//line 13 "/shared/core/thx/fp/TestTreeBag.hx"
		thx.fp.TestTreeBag.t2 = thx.fp.TreeBagImpl.Cons(2, ((thx.fp.TreeBagImpl) (thx.fp.TreeBagImpl.Cons(3, thx.fp.TestTreeBag.t0)) ));
	}
	
	public TestTreeBag(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestTreeBag()
	{
		//line 9 "/shared/core/thx/fp/TestTreeBag.hx"
		thx.fp.TestTreeBag.__hx_ctor_thx_fp_TestTreeBag(this);
	}
	
	
	public static void __hx_ctor_thx_fp_TestTreeBag(thx.fp.TestTreeBag __temp_me249)
	{
	}
	
	
	public static thx.fp.TreeBagImpl t0;
	
	public static thx.fp.TreeBagImpl t1;
	
	public static thx.fp.TreeBagImpl t2;
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
		return new thx.fp.TestTreeBag(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
		return new thx.fp.TestTreeBag();
	}
	
	
	public thx.fp.TreeBagImpl plusOneBag(int i)
	{
		//line 16 "/shared/core/thx/fp/TestTreeBag.hx"
		return ((thx.fp.TreeBagImpl) (thx.fp.TreeBagImpl.Cons(( i + 1 ), thx.fp.TestTreeBag.t0)) );
	}
	
	
	public thx.fp.TreeBagImpl plusTwoBags(int i)
	{
		//line 20 "/shared/core/thx/fp/TestTreeBag.hx"
		return ((thx.fp.TreeBagImpl) (thx.fp._TreeBag.TreeBag_Impl_.map(((thx.fp.TreeBagImpl) (thx.fp.TestTreeBag.t1) ), ((haxe.lang.Function) (new thx.fp.TestTreeBag_plusTwoBags_20__Fun(i)) ))) );
	}
	
	
	public void testMap()
	{
		//line 24 "/shared/core/thx/fp/TestTreeBag.hx"
		utest.Assert.same(thx.fp.TestTreeBag.t0, ((thx.fp.TreeBagImpl) (thx.fp._TreeBag.TreeBag_Impl_.map(((thx.fp.TreeBagImpl) (thx.fp.TestTreeBag.t0) ), ((haxe.lang.Function) (new haxe.lang.Closure(thx.Functions.class, "identity")) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestTreeBag", "TestTreeBag.hx", "testMap"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (24) )) )}));
		//line 25 "/shared/core/thx/fp/TestTreeBag.hx"
		utest.Assert.same(thx.fp.TestTreeBag.t2, ((thx.fp.TreeBagImpl) (thx.fp._TreeBag.TreeBag_Impl_.map(((thx.fp.TreeBagImpl) (thx.fp.TestTreeBag.t1) ), ((haxe.lang.Function) (( (( thx.fp.TestTreeBag_testMap_25__Fun.__hx_current != null )) ? (thx.fp.TestTreeBag_testMap_25__Fun.__hx_current) : (thx.fp.TestTreeBag_testMap_25__Fun.__hx_current = ((thx.fp.TestTreeBag_testMap_25__Fun) (new thx.fp.TestTreeBag_testMap_25__Fun()) )) )) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestTreeBag", "TestTreeBag.hx", "testMap"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (25) )) )}));
	}
	
	
	public void testToArray()
	{
		//line 29 "/shared/core/thx/fp/TestTreeBag.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2}), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.fp._TreeBag.TreeBag_Impl_.toArray(((thx.fp.TreeBagImpl) (thx.fp.TestTreeBag.t1) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestTreeBag", "TestTreeBag.hx", "testToArray"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (29) )) )}));
	}
	
	
	public void testFlatMap()
	{
		//line 33 "/shared/core/thx/fp/TestTreeBag.hx"
		utest.Assert.same(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.fp._TreeBag.TreeBag_Impl_.toArray(((thx.fp.TreeBagImpl) (thx.fp.TestTreeBag.t2) ))) )) ), ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (thx.fp._TreeBag.TreeBag_Impl_.toArray(((thx.fp.TreeBagImpl) (thx.fp._TreeBag.TreeBag_Impl_.flatMap(((thx.fp.TreeBagImpl) (thx.fp.TestTreeBag.t1) ), ((haxe.lang.Function) (new haxe.lang.Closure(this, "plusOneBag")) ))) ))) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestTreeBag", "TestTreeBag.hx", "testFlatMap"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (33) )) )}));
		//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
		thx.fp.TreeBagImpl this1 = thx.fp.TreeBagImpl.Cons(2, ((thx.fp.TreeBagImpl) (thx.fp.TreeBagImpl.Cons(3, thx.fp.TestTreeBag.t0)) ));
		//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
		thx.fp.TreeBagImpl this2 = thx.fp.TreeBagImpl.Cons(3, ((thx.fp.TreeBagImpl) (thx.fp.TreeBagImpl.Cons(4, thx.fp.TestTreeBag.t0)) ));
		//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
		thx.fp.TreeBagImpl other = thx.fp.TestTreeBag.t0;
		//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
		thx.fp.TreeBagImpl other1 = null;
		//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
		switch (((thx.fp.TreeBagImpl) (this2) ).index)
		{
			case 0:
			{
				//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
				switch (other.index)
				{
					case 0:
					{
						//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
						other1 = thx.fp.TreeBagImpl.Empty;
						//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
						break;
					}
					
					
					default:
					{
						//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
						other1 = other;
						//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
						break;
					}
					
				}
				
				//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
				break;
			}
			
			
			case 1:
			{
				//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
				switch (other.index)
				{
					case 0:
					{
						//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
						other1 = ((thx.fp.TreeBagImpl) (this2) );
						//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
						break;
					}
					
					
					default:
					{
						//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
						switch (((thx.fp.TreeBagImpl) (((thx.fp.TreeBagImpl) (this2) ).params[1]) ).index)
						{
							case 0:
							{
								//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
								other1 = thx.fp.TreeBagImpl.Cons(3, other);
								//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
								break;
							}
							
							
							default:
							{
								//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
								other1 = thx.fp.TreeBagImpl.Branch(((thx.fp.TreeBagImpl) (this2) ), other);
								//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
								break;
							}
							
						}
						
						//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
						break;
					}
					
				}
				
				//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
				break;
			}
			
			
			default:
			{
				//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
				switch (other.index)
				{
					case 0:
					{
						//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
						other1 = ((thx.fp.TreeBagImpl) (this2) );
						//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
						break;
					}
					
					
					default:
					{
						//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
						other1 = thx.fp.TreeBagImpl.Branch(((thx.fp.TreeBagImpl) (this2) ), other);
						//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
						break;
					}
					
				}
				
				//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
				break;
			}
			
		}
		
		//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
		thx.fp.TreeBagImpl tmp = null;
		//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
		switch (((thx.fp.TreeBagImpl) (this1) ).index)
		{
			case 0:
			{
				//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
				switch (other1.index)
				{
					case 0:
					{
						//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
						tmp = thx.fp.TreeBagImpl.Empty;
						//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
						break;
					}
					
					
					default:
					{
						//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
						tmp = other1;
						//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
						break;
					}
					
				}
				
				//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
				break;
			}
			
			
			case 1:
			{
				//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
				switch (other1.index)
				{
					case 0:
					{
						//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
						tmp = ((thx.fp.TreeBagImpl) (this1) );
						//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
						break;
					}
					
					
					default:
					{
						//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
						switch (((thx.fp.TreeBagImpl) (((thx.fp.TreeBagImpl) (this1) ).params[1]) ).index)
						{
							case 0:
							{
								//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
								tmp = thx.fp.TreeBagImpl.Cons(2, other1);
								//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
								break;
							}
							
							
							default:
							{
								//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
								tmp = thx.fp.TreeBagImpl.Branch(((thx.fp.TreeBagImpl) (this1) ), other1);
								//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
								break;
							}
							
						}
						
						//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
						break;
					}
					
				}
				
				//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
				break;
			}
			
			
			default:
			{
				//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
				switch (other1.index)
				{
					case 0:
					{
						//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
						tmp = ((thx.fp.TreeBagImpl) (this1) );
						//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
						break;
					}
					
					
					default:
					{
						//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
						tmp = thx.fp.TreeBagImpl.Branch(((thx.fp.TreeBagImpl) (this1) ), other1);
						//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
						break;
					}
					
				}
				
				//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
				break;
			}
			
		}
		
		//line 34 "/shared/core/thx/fp/TestTreeBag.hx"
		utest.Assert.same(tmp, ((thx.fp.TreeBagImpl) (thx.fp._TreeBag.TreeBag_Impl_.flatMap(((thx.fp.TreeBagImpl) (thx.fp.TestTreeBag.t1) ), ((haxe.lang.Function) (new haxe.lang.Closure(this, "plusTwoBags")) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.fp.TestTreeBag", "TestTreeBag.hx", "testFlatMap"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (34) )) )}));
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
		{
			//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
			boolean __temp_executeDef1 = true;
			//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
			switch (field.hashCode())
			{
				case -1171441103:
				{
					//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
					if (field.equals("testFlatMap")) 
					{
						//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFlatMap")) );
					}
					
					//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
					break;
				}
				
				
				case 929190396:
				{
					//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
					if (field.equals("plusOneBag")) 
					{
						//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "plusOneBag")) );
					}
					
					//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
					break;
				}
				
				
				case -1574980692:
				{
					//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
					if (field.equals("testToArray")) 
					{
						//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testToArray")) );
					}
					
					//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
					break;
				}
				
				
				case -850420003:
				{
					//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
					if (field.equals("plusTwoBags")) 
					{
						//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "plusTwoBags")) );
					}
					
					//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
					break;
				}
				
				
				case -1422473366:
				{
					//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
					if (field.equals("testMap")) 
					{
						//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testMap")) );
					}
					
					//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
					break;
				}
				
				
			}
			
			//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
			if (__temp_executeDef1) 
			{
				//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
		{
			//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
			boolean __temp_executeDef1 = true;
			//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
			switch (field.hashCode())
			{
				case -1171441103:
				{
					//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
					if (field.equals("testFlatMap")) 
					{
						//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
						this.testFlatMap();
					}
					
					//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
					break;
				}
				
				
				case 929190396:
				{
					//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
					if (field.equals("plusOneBag")) 
					{
						//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
						return this.plusOneBag(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ));
					}
					
					//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
					break;
				}
				
				
				case -1574980692:
				{
					//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
					if (field.equals("testToArray")) 
					{
						//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
						this.testToArray();
					}
					
					//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
					break;
				}
				
				
				case -850420003:
				{
					//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
					if (field.equals("plusTwoBags")) 
					{
						//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
						return this.plusTwoBags(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ));
					}
					
					//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
					break;
				}
				
				
				case -1422473366:
				{
					//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
					if (field.equals("testMap")) 
					{
						//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
						this.testMap();
					}
					
					//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
					break;
				}
				
				
			}
			
			//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
			if (__temp_executeDef1) 
			{
				//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 8 "/shared/core/thx/fp/TestTreeBag.hx"
		return null;
	}
	
	
}


