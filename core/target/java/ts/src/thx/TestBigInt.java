// Generated by Haxe 3.3.0
package thx;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestBigInt extends haxe.lang.HxObject
{
	public TestBigInt(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestBigInt()
	{
		//line 9 "/shared/core/thx/TestBigInt.hx"
		thx.TestBigInt.__hx_ctor_thx_TestBigInt(this);
	}
	
	
	public static void __hx_ctor_thx_TestBigInt(thx.TestBigInt __temp_me163)
	{
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 8 "/shared/core/thx/TestBigInt.hx"
		return new thx.TestBigInt(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 8 "/shared/core/thx/TestBigInt.hx"
		return new thx.TestBigInt();
	}
	
	
	public void testIssue82()
	{
		//line 12 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.BigIntImpl s = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(101)) );
		//line 13 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.BigIntImpl b = new thx.bigint.Big(thx.bigint.Bigs.smallToArray(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("100", 10)) ).toInt()), false);
		//line 14 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.BigIntImpl r = ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (s) ).subtract(b)) );
		//line 15 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) ), ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (s) ).subtract(b)) )), ( ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (s) ).toString() ) + " - " ) + ((thx.bigint.BigIntImpl) (b) ).toString() ) + " to be equal 1 but it is " ) + ((thx.bigint.BigIntImpl) (r) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIssue82"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (15) )) )}));
		//line 17 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.BigIntImpl s1 = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(101)) );
		//line 18 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.BigIntImpl b1 = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(10)) );
		//line 19 "/shared/core/thx/TestBigInt.hx"
		b1 = ((thx.bigint.BigIntImpl) (b1) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(2)) ));
		//line 20 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.BigIntImpl r1 = ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (s1) ).subtract(b1)) );
		//line 21 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) ), ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (s1) ).subtract(b1)) )), ( ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (s1) ).toString() ) + " - " ) + ((thx.bigint.BigIntImpl) (b1) ).toString() ) + " to be equal 1 but it is " ) + ((thx.bigint.BigIntImpl) (r1) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIssue82"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (21) )) )}));
	}
	
	
	public void testFromInt64()
	{
		//line 25 "/shared/core/thx/TestBigInt.hx"
		haxe.root.Array<java.lang.Object> values = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{thx.Int64s.minValue, ((long) (-1) ), ((long) (0) ), ((long) (1) ), thx.Int64s.maxValue});
		//line 26 "/shared/core/thx/TestBigInt.hx"
		{
			//line 26 "/shared/core/thx/TestBigInt.hx"
			int _g = 0;
			//line 26 "/shared/core/thx/TestBigInt.hx"
			while (( _g < values.length ))
			{
				//line 26 "/shared/core/thx/TestBigInt.hx"
				long value = haxe.lang.Runtime.toLong(values.__get(_g));
				//line 26 "/shared/core/thx/TestBigInt.hx"
				 ++ _g;
				//line 27 "/shared/core/thx/TestBigInt.hx"
				thx.bigint.BigIntImpl r = thx.bigint.Bigs.fromInt64(value);
				//line 27 "/shared/core/thx/TestBigInt.hx"
				long i = thx.bigint.Bigs.toInt64(((thx.bigint.BigIntImpl) (r) ));
				//line 29 "/shared/core/thx/TestBigInt.hx"
				utest.Assert.isTrue(( ((long) (i) ) == ((long) (value) ) ), ( ( ( ( ( "Int64 parsed as " + ((thx.bigint.BigIntImpl) (r) ).toString() ) + " and converted to " ) + (( "" + haxe.root.Std.string(((long) (i) )) )) ) + " but expected " ) + (( "" + haxe.root.Std.string(((long) (value) )) )) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testFromInt64"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (29) )) )}));
			}
			
		}
		
	}
	
	
	public void testLcmAndGcd()
	{
		//line 34 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(thx._BigInt.BigInt_Impl_.lcm(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(21)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(6)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(42)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testLcmAndGcd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (34) )) )}));
		//line 35 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(thx._BigInt.BigInt_Impl_.gcd(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(42)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(56)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(14)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testLcmAndGcd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (35) )) )}));
		//line 36 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(thx._BigInt.BigInt_Impl_.gcd(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(56)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(56)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testLcmAndGcd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (36) )) )}));
		//line 37 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(thx._BigInt.BigInt_Impl_.gcd(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(42)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(42)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testLcmAndGcd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (37) )) )}));
		//line 38 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(thx._BigInt.BigInt_Impl_.gcd(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(17)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(103)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testLcmAndGcd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (38) )) )}));
	}
	
	
	public void testIncrements()
	{
		//line 42 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(((thx.bigint.BigIntImpl) (thx._BigInt.BigInt_Impl_.zero) ).isZero(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIncrements"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (42) )) )}));
		//line 43 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.BigIntImpl a = thx._BigInt.BigInt_Impl_.zero;
		//line 44 "/shared/core/thx/TestBigInt.hx"
		a = ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (a) ).add(thx.bigint.Small.one)) );
		//line 43 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.BigIntImpl b = ((thx.bigint.BigIntImpl) (a) );
		//line 45 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.BigIntImpl v = ((thx.bigint.BigIntImpl) (a) );
		//line 45 "/shared/core/thx/TestBigInt.hx"
		a = ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (a) ).add(thx.bigint.Small.one)) );
		//line 43 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.BigIntImpl c = ((thx.bigint.BigIntImpl) (v) );
		//line 46 "/shared/core/thx/TestBigInt.hx"
		a = ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (a) ).subtract(thx.bigint.Small.one)) );
		//line 43 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.BigIntImpl d = ((thx.bigint.BigIntImpl) (a) );
		//line 47 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.BigIntImpl v1 = ((thx.bigint.BigIntImpl) (a) );
		//line 47 "/shared/core/thx/TestBigInt.hx"
		a = ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (a) ).subtract(thx.bigint.Small.one)) );
		//line 43 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.BigIntImpl e = ((thx.bigint.BigIntImpl) (v1) );
		//line 48 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(((thx.bigint.BigIntImpl) (thx._BigInt.BigInt_Impl_.zero) ).isZero(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIncrements"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (48) )) )}));
		//line 49 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(b, ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIncrements"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (49) )) )}));
		//line 50 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(c, ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIncrements"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (50) )) )}));
		//line 51 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(d, ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIncrements"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (51) )) )}));
		//line 52 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(e, ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIncrements"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (52) )) )}));
		//line 53 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(a, ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIncrements"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (53) )) )}));
	}
	
	
	public void testCanHandleLargeNumbers()
	{
		//line 57 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.BigIntImpl tenFactorial = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("3628800", 10)) );
		//line 57 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.BigIntImpl hundredFactorial = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000", 10)) );
		//line 57 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.BigIntImpl threeToTenThousand = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("16313501853426258743032567291811547168121324535825379939348203261918257308143190787480155630847848309673252045223235795433405582999177203852381479145368112501453192355166224391025423628843556686559659645012014177448275529990373274425446425751235537341867387607813619937225616872862016504805593174059909520461668500663118926911571773452255850626968526251879139867085080472539640933730243410152186914328917354576854457274195562218013337745628502470673059426999114202540773175988199842487276183685299388927825296786440252999444785694183675323521704432195785806270123388382931770198990841300861506996108944782065015163410344894945809337689156807686673462563038164792190665340124344133980763205594364754963451564072340502606377790585114123814919001637177034457385019939060232925194471114235892978565322415628344142184842892083466227875760501276009801530703037525839157893875741192497705300469691062454369926795975456340236777734354667139072601574969834312769653557184396147587071260443947944862235744459711204473062937764153770030210332183635531818173456618022745975055313212598514429587545547296534609597194836036546870491771927625214352957503454948403635822345728774885175809500158451837389413798095329711993092101417428406774326126450005467888736546254948658602484494535938888656542746977424368385335496083164921318601934977025095780370104307980276356857350349205866078371806065542393536101673402017980951598946980664330391505845803674248348878071010412918667335823849899623486215050304052577789848512410263834811719236949311423411823585316405085306164936671137456985394285677324771775046050970865520893596151687017153855755197348199659070192954771308347627111052471134476325986362838585959552209645382089055182871854866744633737533217524880118401787595094060855717010144087136495532418544241489437080074716158404895914136451802032446707961058757633345691696743293869623745410870051851590672859347061212573446572045088465460616826082579731686004585218284333452396157730036306379421822435818001505905203918209206969662326706952623512427380240468784114535101496733983401240219840048956733689309620321613793757156727562461651933397540266795963865921590913322060572673349849253303397874242381960775337182730037783698708748781738419747698880321601186310506332869704931303076839444790968339306301273371014087248060946851793697973114432706759288546077622831002526800554849696867710280945946603669593797354642136622231192695027321229511912952940320879763123151760555959496961163141455688278842949587288399100273691880018774147568892650186152065335219113072582417699616901995530249937735219099786758954892534365835235843156112799728164123461219817343904782402517111603206575330527850752564642995318064985900815557979945885931124351303252811255254295797082281946658798705979077492469849644183166585950844953164726896146168297808178398470451561320526180542310840744843107469368959707726836608471817060598771730170755446473440774031371227437651048421606224757527085958515947273151027400662948161111284777828103531499488913672800783167888051177155427285103861736658069404797695900758820465238673970882660162285107599221418743657006872537842677883708807515850397691812433880561772652364847297019508025848964833883225165668986935081274596293983121864046277268590401580209059988500511262470167150495261908136688693861324081559046336288963037090312033522400722360882494928182809075406914319957044927504420797278117837677431446979085756432990753582588102440240611039084516401089948868433353748444104639734074519165067632941419347985624435567342072815910754484123812917487312938280670403228188813003978384081332242484646571417574404852962675165616101527367425654869508712001788393846171780457455963045764943565964887518396481296159902471996735508854292964536796779404377230965723361625182030798297734785854606060323419091646711138678490928840107449923456834763763114226000770316931243666699425694828181155048843161380832067845480569758457751090640996007242018255400627276908188082601795520167054701327802366989747082835481105543878446889896230696091881643547476154998574015907396059478684978574180486798918438643164618541351689258379042326487669479733384712996754251703808037828636599654447727795924596382283226723503386540591321268603222892807562509801015765174359627788357881606366119032951829868274617539946921221330284257027058653162292482686679275266764009881985590648534544939224296689791195355783205968492422636277656735338488299104238060289209390654467316291591219712866052661347026855261289381236881063068219249064767086495184176816629077103667131505064964190910450196502178972477361881300608688593782509793781457170396897496908861893034634895715117114601514654381347139092345833472226493656930996045016355808162984965203661519182202145414866559662218796964329217241498105206552200001", 10)) );
		//line 60 "/shared/core/thx/TestBigInt.hx"
		haxe.lang.Function[] factorial = new haxe.lang.Function[]{null};
		//line 60 "/shared/core/thx/TestBigInt.hx"
		factorial[0] = new thx.TestBigInt_testCanHandleLargeNumbers_60__Fun(factorial);
		//line 60 "/shared/core/thx/TestBigInt.hx"
		haxe.lang.Function factorial1 = factorial[0];
		//line 67 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (factorial1.__hx_invoke1_o(0.0, ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(10)) ))) ), tenFactorial), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testCanHandleLargeNumbers"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (67) )) )}));
		//line 68 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (factorial1.__hx_invoke1_o(0.0, ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(100)) ))) ), hundredFactorial), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testCanHandleLargeNumbers"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (68) )) )}));
		//line 71 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.BigIntImpl pow = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(3)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(10000)) ));
		//line 73 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(pow, threeToTenThousand), ( ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(3)) ).toString() ) + ".pow(10000) == " ) + ((thx.bigint.BigIntImpl) (threeToTenThousand) ).toString() ) + " but got " ) + ((thx.bigint.BigIntImpl) (pow) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testCanHandleLargeNumbers"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (73) )) )}));
	}
	
	
	public void testIsImmutable()
	{
		//line 81 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.BigIntImpl n = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(14930352)) );
		//line 82 "/shared/core/thx/TestBigInt.hx"
		((thx.bigint.BigIntImpl) (n) ).add(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(9227465)) ));
		//line 83 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(n, ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(14930352)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsImmutable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (83) )) )}));
		//line 84 "/shared/core/thx/TestBigInt.hx"
		((thx.bigint.BigIntImpl) (n) ).subtract(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(123456)) ));
		//line 85 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(n, ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(14930352)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsImmutable"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (85) )) )}));
	}
	
	
	public void testInts()
	{
		//line 89 "/shared/core/thx/TestBigInt.hx"
		haxe.root.Array<java.lang.Object> tests = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 10000, 100000, 1000000, 10000000});
		//line 94 "/shared/core/thx/TestBigInt.hx"
		{
			//line 94 "/shared/core/thx/TestBigInt.hx"
			int _g = 0;
			//line 94 "/shared/core/thx/TestBigInt.hx"
			while (( _g < tests.length ))
			{
				//line 94 "/shared/core/thx/TestBigInt.hx"
				int test = ((int) (haxe.lang.Runtime.toInt(tests.__get(_g))) );
				//line 94 "/shared/core/thx/TestBigInt.hx"
				 ++ _g;
				//line 95 "/shared/core/thx/TestBigInt.hx"
				thx.bigint.BigIntImpl out = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(test)) );
				//line 96 "/shared/core/thx/TestBigInt.hx"
				utest.Assert.equals(test, ((thx.bigint.BigIntImpl) (out) ).toInt(), ( ( ( "expected " + test ) + " but got " ) + ((thx.bigint.BigIntImpl) (out) ).toInt() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testInts"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (96) )) )}));
				//line 98 "/shared/core/thx/TestBigInt.hx"
				thx.bigint.BigIntImpl out1 = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt( - (test) )) );
				//line 99 "/shared/core/thx/TestBigInt.hx"
				utest.Assert.equals( - (test) , ((thx.bigint.BigIntImpl) (out1) ).toInt(), ( ( ( "expected " +  - (test)  ) + " but got " ) + ((thx.bigint.BigIntImpl) (out1) ).toInt() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testInts"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (99) )) )}));
			}
			
		}
		
	}
	
	
	public void testFloats()
	{
		//line 104 "/shared/core/thx/TestBigInt.hx"
		haxe.root.Array<java.lang.Object> tests = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.0) ), ((java.lang.Object) (1.0) ), ((java.lang.Object) (5.0) ), ((java.lang.Object) (1.2e20) ), ((java.lang.Object) (1.2e40) ), ((java.lang.Object) (1.234e63) ), ((java.lang.Object) (5.432e80) ), ((java.lang.Object) (0.00001) ), ((java.lang.Object) (1.2345e-50) )});
		//line 106 "/shared/core/thx/TestBigInt.hx"
		{
			//line 106 "/shared/core/thx/TestBigInt.hx"
			int _g = 0;
			//line 106 "/shared/core/thx/TestBigInt.hx"
			while (( _g < tests.length ))
			{
				//line 106 "/shared/core/thx/TestBigInt.hx"
				double test = ((double) (haxe.lang.Runtime.toDouble(tests.__get(_g))) );
				//line 106 "/shared/core/thx/TestBigInt.hx"
				 ++ _g;
				//line 107 "/shared/core/thx/TestBigInt.hx"
				thx.bigint.BigIntImpl out = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromFloat(test)) );
				//line 108 "/shared/core/thx/TestBigInt.hx"
				utest.Assert.floatEquals(thx.Floats.roundTo(test, 0), ((thx.bigint.BigIntImpl) (out) ).toFloat(), null, ( ( ( "expected " + haxe.lang.Runtime.toString(thx.Floats.roundTo(test, 0)) ) + " but got " ) + haxe.lang.Runtime.toString(((thx.bigint.BigIntImpl) (out) ).toFloat()) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testFloats"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (108) )) )}));
				//line 110 "/shared/core/thx/TestBigInt.hx"
				thx.bigint.BigIntImpl out1 = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromFloat( - (test) )) );
				//line 111 "/shared/core/thx/TestBigInt.hx"
				utest.Assert.floatEquals(thx.Floats.roundTo( - (test) , 0), ((thx.bigint.BigIntImpl) (out1) ).toFloat(), null, ( ( ( "expected " + haxe.lang.Runtime.toString(thx.Floats.roundTo( - (test) , 0)) ) + " but got " ) + haxe.lang.Runtime.toString(((thx.bigint.BigIntImpl) (out1) ).toFloat()) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testFloats"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (111) )) )}));
			}
			
		}
		
	}
	
	
	public void testStrings()
	{
		//line 116 "/shared/core/thx/TestBigInt.hx"
		haxe.root.Array<java.lang.String> tests = new haxe.root.Array<java.lang.String>(new java.lang.String[]{"0", "3", "20", "12345678901234567890", "999999999999999999"});
		//line 121 "/shared/core/thx/TestBigInt.hx"
		{
			//line 121 "/shared/core/thx/TestBigInt.hx"
			int _g = 0;
			//line 121 "/shared/core/thx/TestBigInt.hx"
			while (( _g < tests.length ))
			{
				//line 121 "/shared/core/thx/TestBigInt.hx"
				java.lang.String test = tests.__get(_g);
				//line 121 "/shared/core/thx/TestBigInt.hx"
				 ++ _g;
				//line 122 "/shared/core/thx/TestBigInt.hx"
				thx.bigint.BigIntImpl out = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase(test, 10)) );
				//line 123 "/shared/core/thx/TestBigInt.hx"
				utest.Assert.equals(test, ((thx.bigint.BigIntImpl) (out) ).toString(), ( ( ( "expected " + test ) + " but got " ) + ((thx.bigint.BigIntImpl) (out) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testStrings"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (123) )) )}));
				//line 125 "/shared/core/thx/TestBigInt.hx"
				if (haxe.lang.Runtime.valEq(test, "0")) 
				{
					//line 126 "/shared/core/thx/TestBigInt.hx"
					continue;
				}
				
				//line 128 "/shared/core/thx/TestBigInt.hx"
				thx.bigint.BigIntImpl out1 = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase(( "-" + test ), 10)) );
				//line 129 "/shared/core/thx/TestBigInt.hx"
				utest.Assert.equals(( "-" + test ), ((thx.bigint.BigIntImpl) (out1) ).toString(), ( ( ( "expected -" + test ) + " but got " ) + ((thx.bigint.BigIntImpl) (out1) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testStrings"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (129) )) )}));
			}
			
		}
		
	}
	
	
	public void testEquals()
	{
		//line 134 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (134) )) )}));
		//line 135 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (135) )) )}));
		//line 136 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("12345678901234567890", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("12345678901234567890", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (136) )) )}));
		//line 137 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (137) )) )}));
		//line 138 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-12345678901234567890", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-12345678901234567890", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (138) )) )}));
		//line 140 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(thx._BigInt.BigInt_Impl_.notEquals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (140) )) )}));
		//line 141 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(thx._BigInt.BigInt_Impl_.notEquals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (141) )) )}));
		//line 142 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(thx._BigInt.BigInt_Impl_.notEquals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("12345678901234567890", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("12345678901234567890", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (142) )) )}));
		//line 143 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(thx._BigInt.BigInt_Impl_.notEquals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (143) )) )}));
		//line 144 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(thx._BigInt.BigInt_Impl_.notEquals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-12345678901234567890", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-12345678901234567890", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (144) )) )}));
		//line 145 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.notEquals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-12345678901234567890", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("12345678901234567890", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (145) )) )}));
		//line 147 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.notEquals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (147) )) )}));
		//line 148 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.notEquals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(2)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (148) )) )}));
		//line 149 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.notEquals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("12345678901234567890", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("12345678901234567891", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (149) )) )}));
		//line 150 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.notEquals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-2)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (150) )) )}));
		//line 151 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.notEquals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-12345678901234567890", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-12345678901234567891", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (151) )) )}));
		//line 153 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (153) )) )}));
		//line 154 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(2)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (154) )) )}));
		//line 155 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("12345678901234567890", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("12345678901234567891", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (155) )) )}));
		//line 156 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-2)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (156) )) )}));
		//line 157 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.notEquals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(2)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-2)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (157) )) )}));
		//line 158 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(2)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-2)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (158) )) )}));
		//line 159 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-12345678901234567890", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-12345678901234567891", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (159) )) )}));
		//line 161 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-0", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (161) )) )}));
	}
	
	
	public void testIgnoreLeadingZeros()
	{
		//line 165 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("0000000000", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("0", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIgnoreLeadingZeros"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (165) )) )}));
		//line 166 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("000000000000023", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(23)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIgnoreLeadingZeros"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (166) )) )}));
		//line 167 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-0000000000000000000000123", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-123)) )), ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-0000000000000000000000123", 10)) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-123)) ).toString() ) + " to be true" ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIgnoreLeadingZeros"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (167) )) )}));
	}
	
	
	public void testNumbersShouldBeTheSameWhenConstructedDifferently()
	{
		//line 171 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("12e5", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromFloat(12e5)) )), ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("12e5", 10)) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromFloat(12e5)) ).toString() ) + " to be true" ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testNumbersShouldBeTheSameWhenConstructedDifferently"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (171) )) )}));
		//line 172 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromFloat(12e5)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1200000", 10)) )), ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromFloat(12e5)) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1200000", 10)) ).toString() ) + " to be true" ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testNumbersShouldBeTheSameWhenConstructedDifferently"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (172) )) )}));
		//line 173 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1", 10)) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) ).toString() ) + " to be true" ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testNumbersShouldBeTheSameWhenConstructedDifferently"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (173) )) )}));
		//line 174 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(12345)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("12345", 10)) )), ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(12345)) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("12345", 10)) ).toString() ) + " to be true" ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testNumbersShouldBeTheSameWhenConstructedDifferently"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (174) )) )}));
		//line 175 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("9876543210", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromFloat(9876543210.0)) )), ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("9876543210", 10)) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromFloat(9876543210.0)) ).toString() ) + " to be true" ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testNumbersShouldBeTheSameWhenConstructedDifferently"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (175) )) )}));
	}
	
	
	public void testFibonacci()
	{
		//line 179 "/shared/core/thx/TestBigInt.hx"
		haxe.root.Array<thx.bigint.BigIntImpl> fibs = new haxe.root.Array<thx.bigint.BigIntImpl>(new thx.bigint.BigIntImpl[]{((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("2", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("3", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("5", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("8", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("13", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("21", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("34", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("55", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("89", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("144", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("233", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("377", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("610", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("987", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1597", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("2584", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("4181", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("6765", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("10946", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("17711", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("28657", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("46368", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("75025", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("121393", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("196418", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("317811", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("514229", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("832040", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1346269", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("2178309", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("3524578", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("5702887", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("9227465", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("14930352", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("24157817", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("39088169", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("63245986", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("102334155", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("165580141", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("267914296", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("433494437", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("701408733", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1134903170", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1836311903", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("2971215073", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("4807526976", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("7778742049", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("12586269025", 10)) )});
		//line 180 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.BigIntImpl number = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) );
		//line 181 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.BigIntImpl last = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) );
		//line 183 "/shared/core/thx/TestBigInt.hx"
		{
			//line 183 "/shared/core/thx/TestBigInt.hx"
			int _g = 2;
			//line 183 "/shared/core/thx/TestBigInt.hx"
			while (( _g < 50 ))
			{
				//line 183 "/shared/core/thx/TestBigInt.hx"
				int i = _g++;
				//line 184 "/shared/core/thx/TestBigInt.hx"
				number = ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (number) ).add(last)) );
				//line 185 "/shared/core/thx/TestBigInt.hx"
				last = ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (number) ).subtract(last)) );
				//line 186 "/shared/core/thx/TestBigInt.hx"
				utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(number, fibs.__get(i)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testFibonacci"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (186) )) )}));
			}
			
		}
		
	}
	
	
	public void testCarriesOverCorrectly()
	{
		//line 191 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("9007199254740991", 10)) ).add(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("9007199254740992", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testCarriesOverCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (191) )) )}));
		//line 192 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("999999999999999999999000000000000000000000", 10)) ).add(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1000000000000000000000", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1e42", 10)) )), ( ( ( ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("999999999999999999999000000000000000000000", 10)) ).toString() ) + " + " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1000000000000000000000", 10)) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1e42", 10)) ).toString() ) + " but is " ) + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("999999999999999999999000000000000000000000", 10)) ).add(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1000000000000000000000", 10)) ))) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testCarriesOverCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (192) )) )}));
		//line 195 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1e20", 10)) ).add(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("9007199254740972", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("100009007199254740972", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testCarriesOverCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (195) )) )}));
		//line 196 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-9007199254740983", 10)) ).add(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-9999999999999998", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-19007199254740981", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testCarriesOverCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (196) )) )}));
		//line 197 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("100000000000000000000000000000000000", 10)) ).subtract(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("999999999999999999", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("99999999999999999000000000000000001", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testCarriesOverCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (197) )) )}));
		//line 199 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("50000005000000", 10)) ).multiply(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("10000001", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("500000100000005000000", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testCarriesOverCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (199) )) )}));
	}
	
	
	public void testMisc()
	{
		//line 203 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("10", 10)) ).add(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("20", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMisc"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (203) )) )}));
		//line 204 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-10000000000000000", 10)) ).add(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("0", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-10000000000000000", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMisc"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (204) )) )}));
		//line 205 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("0", 10)) ).add(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("10000000000000000", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("10000000000000000", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMisc"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (205) )) )}));
		//line 206 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(9999999)) ).add(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(10000000)) )), ( ( ( ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(9999999)) ).toString() ) + " + " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(10000000)) ).toString() ) + " but got " ) + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(9999999)) ).add(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) ))) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMisc"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (206) )) )}));
		//line 207 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(10000000)) ).subtract(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(9999999)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMisc"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (207) )) )}));
		//line 208 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-1000000000000000000000000000000000001", 10)) ).add(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1000000000000000000000000000000000000", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMisc"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (208) )) )}));
		//line 209 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("100000000000000000002222222222222222222", 10)) ).subtract(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("100000000000000000001111111111111111111", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1111111111111111111", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMisc"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (209) )) )}));
		//line 210 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1", 10)) ).add(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("0", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMisc"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (210) )) )}));
		//line 211 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("10", 10)) ).add(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("10000000000000000", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("10000000000000010", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMisc"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (211) )) )}));
		//line 212 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("10000000000000000", 10)) ).add(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("10", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("10000000000000010", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMisc"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (212) )) )}));
		//line 213 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("10000000000000000", 10)) ).add(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("10000000000000000", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("20000000000000000", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMisc"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (213) )) )}));
	}
	
	
	public void testMultiplyHandlesSignsCorectly()
	{
		//line 217 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(100)) ).multiply(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(100)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(10000)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMultiplyHandlesSignsCorectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (217) )) )}));
		//line 218 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(100)) ).multiply(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-100)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-10000)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMultiplyHandlesSignsCorectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (218) )) )}));
		//line 219 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-100)) ).multiply(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(100)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-10000)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMultiplyHandlesSignsCorectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (219) )) )}));
		//line 220 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-100)) ).multiply(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-100)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(10000)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMultiplyHandlesSignsCorectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (220) )) )}));
		//line 222 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(13579)) ).multiply(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("163500573666152634716420931676158", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("2220174289812686626814279831230549482", 10)) )), ( ( ( ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(13579)) ).toString() ) + " * " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("163500573666152634716420931676158", 10)) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("2220174289812686626814279831230549482", 10)) ).toString() ) + " but got " ) + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(13579)) ).multiply(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("163500573666152634716420931676158", 10)) ))) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMultiplyHandlesSignsCorectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (222) )) )}));
		//line 227 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(13579)) ).multiply(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-163500573666152634716420931676158", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-2220174289812686626814279831230549482", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMultiplyHandlesSignsCorectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (227) )) )}));
		//line 228 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-13579)) ).multiply(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("163500573666152634716420931676158", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-2220174289812686626814279831230549482", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMultiplyHandlesSignsCorectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (228) )) )}));
		//line 229 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-13579)) ).multiply(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-163500573666152634716420931676158", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("2220174289812686626814279831230549482", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMultiplyHandlesSignsCorectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (229) )) )}));
		//line 230 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("163500573666152634716420931676158", 10)) ).multiply(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(13579)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("2220174289812686626814279831230549482", 10)) )), ( ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("163500573666152634716420931676158", 10)) ).toString() ) + " * 13579 == " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("2220174289812686626814279831230549482", 10)) ).toString() ) + " but got " ) + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("163500573666152634716420931676158", 10)) ).multiply(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(13579)) ))) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMultiplyHandlesSignsCorectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (230) )) )}));
		//line 234 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("163500573666152634716420931676158", 10)) ).multiply(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-13579)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-2220174289812686626814279831230549482", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMultiplyHandlesSignsCorectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (234) )) )}));
		//line 235 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-163500573666152634716420931676158", 10)) ).multiply(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(13579)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-2220174289812686626814279831230549482", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMultiplyHandlesSignsCorectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (235) )) )}));
		//line 236 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-163500573666152634716420931676158", 10)) ).multiply(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-13579)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("2220174289812686626814279831230549482", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMultiplyHandlesSignsCorectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (236) )) )}));
		//line 237 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("163500573666152634716420931676158", 10)) ).multiply(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-163500573666152634716420931676158", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMultiplyHandlesSignsCorectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (237) )) )}));
		//line 238 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1234567890987654321", 10)) ).multiply(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("132435465768798", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("163500573666152634716420931676158", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMultiplyHandlesSignsCorectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (238) )) )}));
		//line 239 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1234567890987654321", 10)) ).multiply(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-132435465768798", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-163500573666152634716420931676158", 10)) )), ( ( ( ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1234567890987654321", 10)) ).toString() ) + " * " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-132435465768798", 10)) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-163500573666152634716420931676158", 10)) ).toString() ) + " but got " ) + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1234567890987654321", 10)) ).multiply(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-132435465768798", 10)) ))) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMultiplyHandlesSignsCorectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (239) )) )}));
		//line 240 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-1234567890987654321", 10)) ).multiply(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("132435465768798", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-163500573666152634716420931676158", 10)) )), ( ( ( ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-1234567890987654321", 10)) ).toString() ) + " * " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("132435465768798", 10)) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-163500573666152634716420931676158", 10)) ).toString() ) + " but got " ) + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-1234567890987654321", 10)) ).multiply(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("132435465768798", 10)) ))) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMultiplyHandlesSignsCorectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (240) )) )}));
		//line 241 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-1234567890987654321", 10)) ).multiply(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-132435465768798", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("163500573666152634716420931676158", 10)) )), ( ( ( ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-1234567890987654321", 10)) ).toString() ) + " * " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-132435465768798", 10)) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("163500573666152634716420931676158", 10)) ).toString() ) + " but got " ) + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-1234567890987654321", 10)) ).multiply(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-132435465768798", 10)) ))) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMultiplyHandlesSignsCorectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (241) )) )}));
	}
	
	
	public void testDivisionBy1IsTheIdentity()
	{
		//line 245 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) ).divide(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testDivisionBy1IsTheIdentity"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (245) )) )}));
		//line 246 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) ).divide(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testDivisionBy1IsTheIdentity"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (246) )) )}));
		//line 247 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) ).divide(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testDivisionBy1IsTheIdentity"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (247) )) )}));
		//line 248 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(153)) ).divide(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(153)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testDivisionBy1IsTheIdentity"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (248) )) )}));
		//line 249 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-153)) ).divide(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-153)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testDivisionBy1IsTheIdentity"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (249) )) )}));
		//line 250 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("9844190321790980841789", 10)) ).divide(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("9844190321790980841789", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testDivisionBy1IsTheIdentity"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (250) )) )}));
		//line 251 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-9844190321790980841789", 10)) ).divide(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-9844190321790980841789", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testDivisionBy1IsTheIdentity"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (251) )) )}));
	}
	
	
	public void testDivisionBySelfIs1()
	{
		//line 255 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(5)) ).divide(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(5)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testDivisionBySelfIs1"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (255) )) )}));
		//line 256 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-5)) ).divide(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-5)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testDivisionBySelfIs1"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (256) )) )}));
		//line 257 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("20194965098495006574", 10)) ).divide(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("20194965098495006574", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testDivisionBySelfIs1"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (257) )) )}));
		//line 258 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-20194965098495006574", 10)) ).divide(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-20194965098495006574", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testDivisionBySelfIs1"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (258) )) )}));
	}
	
	
	public void testDivisionOf0Equals0()
	{
		//line 262 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) ).divide(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testDivisionOf0Equals0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (262) )) )}));
		//line 263 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) ).divide(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testDivisionOf0Equals0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (263) )) )}));
		//line 264 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) ).divide(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1234567890987654321", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testDivisionOf0Equals0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (264) )) )}));
		//line 265 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) ).divide(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-1234567890987654321", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testDivisionOf0Equals0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (265) )) )}));
	}
	
	
	public void testModulo0ThrowsError()
	{
		//line 269 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.raises(( (( thx.TestBigInt_testModulo0ThrowsError_269__Fun.__hx_current != null )) ? (thx.TestBigInt_testModulo0ThrowsError_269__Fun.__hx_current) : (thx.TestBigInt_testModulo0ThrowsError_269__Fun.__hx_current = ((thx.TestBigInt_testModulo0ThrowsError_269__Fun) (new thx.TestBigInt_testModulo0ThrowsError_269__Fun()) )) ), thx.Error.class, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testModulo0ThrowsError"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (269) )) )}));
		//line 270 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.raises(( (( thx.TestBigInt_testModulo0ThrowsError_270__Fun.__hx_current != null )) ? (thx.TestBigInt_testModulo0ThrowsError_270__Fun.__hx_current) : (thx.TestBigInt_testModulo0ThrowsError_270__Fun.__hx_current = ((thx.TestBigInt_testModulo0ThrowsError_270__Fun) (new thx.TestBigInt_testModulo0ThrowsError_270__Fun()) )) ), thx.Error.class, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testModulo0ThrowsError"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (270) )) )}));
		//line 271 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.raises(( (( thx.TestBigInt_testModulo0ThrowsError_271__Fun.__hx_current != null )) ? (thx.TestBigInt_testModulo0ThrowsError_271__Fun.__hx_current) : (thx.TestBigInt_testModulo0ThrowsError_271__Fun.__hx_current = ((thx.TestBigInt_testModulo0ThrowsError_271__Fun) (new thx.TestBigInt_testModulo0ThrowsError_271__Fun()) )) ), thx.Error.class, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testModulo0ThrowsError"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (271) )) )}));
		//line 272 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.raises(( (( thx.TestBigInt_testModulo0ThrowsError_272__Fun.__hx_current != null )) ? (thx.TestBigInt_testModulo0ThrowsError_272__Fun.__hx_current) : (thx.TestBigInt_testModulo0ThrowsError_272__Fun.__hx_current = ((thx.TestBigInt_testModulo0ThrowsError_272__Fun) (new thx.TestBigInt_testModulo0ThrowsError_272__Fun()) )) ), thx.Error.class, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testModulo0ThrowsError"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (272) )) )}));
		//line 273 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.raises(( (( thx.TestBigInt_testModulo0ThrowsError_273__Fun.__hx_current != null )) ? (thx.TestBigInt_testModulo0ThrowsError_273__Fun.__hx_current) : (thx.TestBigInt_testModulo0ThrowsError_273__Fun.__hx_current = ((thx.TestBigInt_testModulo0ThrowsError_273__Fun) (new thx.TestBigInt_testModulo0ThrowsError_273__Fun()) )) ), thx.Error.class, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testModulo0ThrowsError"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (273) )) )}));
		//line 274 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.raises(( (( thx.TestBigInt_testModulo0ThrowsError_274__Fun.__hx_current != null )) ? (thx.TestBigInt_testModulo0ThrowsError_274__Fun.__hx_current) : (thx.TestBigInt_testModulo0ThrowsError_274__Fun.__hx_current = ((thx.TestBigInt_testModulo0ThrowsError_274__Fun) (new thx.TestBigInt_testModulo0ThrowsError_274__Fun()) )) ), thx.Error.class, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testModulo0ThrowsError"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (274) )) )}));
	}
	
	
	public void testModuloHandlesSignsCorrectly()
	{
		//line 278 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(124234233)) ).modulo(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(2)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testModuloHandlesSignsCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (278) )) )}));
		//line 279 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(124234233)) ).modulo(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-2)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testModuloHandlesSignsCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (279) )) )}));
		//line 280 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-124234233)) ).modulo(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(2)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testModuloHandlesSignsCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (280) )) )}));
		//line 281 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-124234233)) ).modulo(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-2)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testModuloHandlesSignsCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (281) )) )}));
		//line 282 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(2)) ).modulo(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1243233)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(2)) )), ( ( ( ( ( "excpected " + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(2)) ).toString() ) + " % " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1243233)) ).toString() ) + " == 2 but got " ) + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(2)) ).modulo(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1243233)) ))) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testModuloHandlesSignsCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (282) )) )}));
		//line 283 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-2)) ).modulo(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1243233)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-2)) )), ( ( ( ( ( "excpected " + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-2)) ).toString() ) + " % " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1243233)) ).toString() ) + " == -2 but got " ) + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-2)) ).modulo(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1243233)) ))) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testModuloHandlesSignsCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (283) )) )}));
		//line 284 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("786456456335437356436", 10)) ).modulo(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-5423424653", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("2663036842", 10)) )), ( ( ( ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("786456456335437356436", 10)) ).toString() ) + " % " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-5423424653", 10)) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("2663036842", 10)) ).toString() ) + " but got " ) + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("786456456335437356436", 10)) ).modulo(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-5423424653", 10)) ))) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testModuloHandlesSignsCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (284) )) )}));
		//line 285 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("93453764643534523", 10)) ).modulo(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-2342)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1119)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testModuloHandlesSignsCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (285) )) )}));
		//line 286 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-32542543)) ).modulo(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(100000000)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-32542543)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testModuloHandlesSignsCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (286) )) )}));
	}
	
	
	public void testPrevNext()
	{
		//line 290 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(546)) ).prev(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(545)) )), ( ( ( "expected " + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(546)) ).toString() ) + ".prev() == 545 but got " ) + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(546)) ).prev()) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPrevNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (290) )) )}));
		//line 291 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) ).prev(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPrevNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (291) )) )}));
		//line 292 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) ).prev(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPrevNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (292) )) )}));
		//line 293 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) ).prev(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-2)) )), ( ( ( "expected " + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) ).toString() ) + ".prev() == -2 but got " ) + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) ).prev()) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPrevNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (293) )) )}));
		//line 294 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1987)) ).prev(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1988)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPrevNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (294) )) )}));
		//line 296 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(546)) ).next(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(547)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPrevNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (296) )) )}));
		//line 297 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) ).next(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(2)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPrevNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (297) )) )}));
		//line 298 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) ).next(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPrevNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (298) )) )}));
		//line 299 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) ).next(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPrevNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (299) )) )}));
		//line 300 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1987)) ).next(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1986)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPrevNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (300) )) )}));
		//line 302 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) ).next(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPrevNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (302) )) )}));
		//line 303 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) ).next(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPrevNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (303) )) )}));
		//line 304 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(34)) ).next(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(35)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPrevNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (304) )) )}));
		//line 305 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("9007199254740992", 10)) ).next(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("9007199254740993", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPrevNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (305) )) )}));
		//line 306 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-9007199254740992", 10)) ).next(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-9007199254740991", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPrevNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (306) )) )}));
		//line 307 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("9007199254740992999", 10)) ).next(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("9007199254740993000", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPrevNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (307) )) )}));
		//line 308 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("9007199254740991", 10)) ).next(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("9007199254740992", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPrevNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (308) )) )}));
		//line 310 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) ).prev(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPrevNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (310) )) )}));
		//line 311 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) ).prev(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-2)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPrevNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (311) )) )}));
		//line 312 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(34)) ).prev(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(33)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPrevNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (312) )) )}));
		//line 313 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("9007199254740992", 10)) ).prev(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("9007199254740991", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPrevNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (313) )) )}));
		//line 314 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-9007199254740992", 10)) ).prev(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-9007199254740993", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPrevNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (314) )) )}));
		//line 315 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("9007199254740992999", 10)) ).prev(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("9007199254740992998", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPrevNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (315) )) )}));
		//line 316 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-9007199254740991", 10)) ).prev(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-9007199254740992", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPrevNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (316) )) )}));
		//line 318 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("109874981950949849811049", 10)) ).prev(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("109874981950949849811048", 10)) )), ( ( ( "expected " + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("109874981950949849811049", 10)) ).prev()) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("109874981950949849811048", 10)) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPrevNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (318) )) )}));
		//line 319 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("109874981950949849811049", 10)) ).next(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("109874981950949849811050", 10)) )), ( ( ( "expected " + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("109874981950949849811049", 10)) ).next()) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("109874981950949849811050", 10)) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPrevNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (319) )) )}));
		//line 320 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-109874981950949849811049", 10)) ).prev(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-109874981950949849811050", 10)) )), ( ( ( "expected " + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-109874981950949849811049", 10)) ).prev()) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-109874981950949849811050", 10)) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPrevNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (320) )) )}));
		//line 321 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-109874981950949849811049", 10)) ).next(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-109874981950949849811048", 10)) )), ( ( ( "expected " + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-109874981950949849811049", 10)) ).next()) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-109874981950949849811048", 10)) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPrevNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (321) )) )}));
	}
	
	
	public void testPrevNextCarriesOverCorrectly()
	{
		//line 325 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(9999999)) ).next(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(10000000)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPrevNextCarriesOverCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (325) )) )}));
		//line 326 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(10000000)) ).prev(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(9999999)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPrevNextCarriesOverCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (326) )) )}));
	}
	
	
	public void testAbs()
	{
		//line 330 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) ).abs(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testAbs"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (330) )) )}));
		//line 331 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-0", 10)) ).abs(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testAbs"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (331) )) )}));
		//line 332 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(54)) ).abs(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(54)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testAbs"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (332) )) )}));
		//line 333 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-54)) ).abs(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(54)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testAbs"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (333) )) )}));
		//line 334 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("13412564654613034984065434", 10)) ).abs(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("13412564654613034984065434", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testAbs"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (334) )) )}));
		//line 335 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-13412564654613034984065434", 10)) ).abs(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("13412564654613034984065434", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testAbs"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (335) )) )}));
	}
	
	
	public void testIsPositiveAndIsNegative()
	{
		//line 339 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(( ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) ).compareTo(thx._BigInt.BigInt_Impl_.zero) > 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsPositiveAndIsNegative"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (339) )) )}));
		//line 340 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) ), "sign", true)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsPositiveAndIsNegative"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (340) )) )}));
		//line 341 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(( ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) ).compareTo(thx._BigInt.BigInt_Impl_.zero) > 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsPositiveAndIsNegative"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (341) )) )}));
		//line 342 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) ), "sign", true)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsPositiveAndIsNegative"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (342) )) )}));
	}
	
	
	public void testIsPositiveAndIsNegativeWorkForSmallNumbers()
	{
		//line 346 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(( ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) ).compareTo(thx._BigInt.BigInt_Impl_.zero) > 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsPositiveAndIsNegativeWorkForSmallNumbers"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (346) )) )}));
		//line 347 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(543)) ), "sign", true)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsPositiveAndIsNegativeWorkForSmallNumbers"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (347) )) )}));
		//line 348 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(( ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) ).compareTo(thx._BigInt.BigInt_Impl_.zero) > 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsPositiveAndIsNegativeWorkForSmallNumbers"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (348) )) )}));
		//line 349 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-765)) ), "sign", true)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsPositiveAndIsNegativeWorkForSmallNumbers"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (349) )) )}));
	}
	
	
	public void testIsPositiveAndIsNegativeWorkForBigNumbers()
	{
		//line 353 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(( ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("651987498619879841", 10)) ).compareTo(thx._BigInt.BigInt_Impl_.zero) > 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsPositiveAndIsNegativeWorkForBigNumbers"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (353) )) )}));
		//line 354 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("0054984980098460", 10)) ), "sign", true)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsPositiveAndIsNegativeWorkForBigNumbers"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (354) )) )}));
		//line 355 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(( ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-1961987984109078496", 10)) ).compareTo(thx._BigInt.BigInt_Impl_.zero) > 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsPositiveAndIsNegativeWorkForBigNumbers"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (355) )) )}));
		//line 356 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-98800984196109540984", 10)) ), "sign", true)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsPositiveAndIsNegativeWorkForBigNumbers"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (356) )) )}));
	}
	
	
	public void testIsUnit()
	{
		//line 360 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(((thx.bigint.BigIntImpl) (thx._BigInt.BigInt_Impl_.one) ).isUnit(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsUnit"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (360) )) )}));
		//line 361 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(((thx.bigint.BigIntImpl) (thx._BigInt.BigInt_Impl_.negativeOne) ).isUnit(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsUnit"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (361) )) )}));
		//line 362 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(((thx.bigint.BigIntImpl) (thx._BigInt.BigInt_Impl_.zero) ).isUnit(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsUnit"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (362) )) )}));
		//line 363 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(5)) ).isUnit(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsUnit"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (363) )) )}));
		//line 364 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-5)) ).isUnit(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsUnit"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (364) )) )}));
		//line 365 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("654609649089416160", 10)) ).isUnit(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsUnit"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (365) )) )}));
		//line 366 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-98410980984981094", 10)) ).isUnit(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsUnit"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (366) )) )}));
	}
	
	
	public void testIsZero()
	{
		//line 370 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(((thx.bigint.BigIntImpl) (thx._BigInt.BigInt_Impl_.zero) ).isZero(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsZero"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (370) )) )}));
		//line 371 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) ).isZero(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsZero"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (371) )) )}));
		//line 372 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-0", 10)) ).isZero(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsZero"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (372) )) )}));
		//line 373 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(15)) ).isZero(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsZero"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (373) )) )}));
		//line 374 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-15)) ).isZero(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsZero"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (374) )) )}));
		//line 375 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("63213098189462109840", 10)) ).isZero(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsZero"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (375) )) )}));
		//line 376 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-64343745644564564563", 10)) ).isZero(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsZero"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (376) )) )}));
		//line 377 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) ).isZero(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsZero"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (377) )) )}));
	}
	
	
	public void testSquare()
	{
		//line 381 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) ).square(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testSquare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (381) )) )}));
		//line 382 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(16)) ).square(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(256)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testSquare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (382) )) )}));
		//line 383 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-16)) ).square(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(256)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testSquare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (383) )) )}));
		//line 384 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("65536", 10)) ).square(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("4294967296", 10)) )), ( ( "expected " + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("65536", 10)) ).square()) ).toString() ) + " == 4294967296" ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testSquare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (384) )) )}));
	}
	
	
	public void testPowerToNegativeNumbersIs0()
	{
		//line 388 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-298)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPowerToNegativeNumbersIs0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (388) )) )}));
		//line 389 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(543)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-2)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPowerToNegativeNumbersIs0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (389) )) )}));
		//line 390 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("323434643534523", 10)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPowerToNegativeNumbersIs0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (390) )) )}));
		//line 391 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-54302)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-543624724341214223562", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPowerToNegativeNumbersIs0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (391) )) )}));
		//line 392 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-20199605604968", 10)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-99)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPowerToNegativeNumbersIs0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (392) )) )}));
		//line 394 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPowerToNegativeNumbersIs0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (394) )) )}));
		//line 395 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPowerToNegativeNumbersIs0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (395) )) )}));
		//line 396 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-2)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPowerToNegativeNumbersIs0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (396) )) )}));
	}
	
	
	public void testPowerHandlesSignsCorrectly()
	{
		//line 400 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(2)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(3)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(8)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPowerHandlesSignsCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (400) )) )}));
		//line 401 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-2)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(3)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-8)) )), ( ( "expected " + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-2)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(3)) ))) ).toString() ) + " == -8" ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPowerHandlesSignsCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (401) )) )}));
		//line 402 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1036350201654", 10)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(4)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1153522698998527286707879497611725813209153232656", 10)) )), ( ( ( "expected " + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1036350201654", 10)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(4)) ))) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1153522698998527286707879497611725813209153232656", 10)) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPowerHandlesSignsCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (402) )) )}));
		//line 403 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-1036350201654", 10)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(4)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1153522698998527286707879497611725813209153232656", 10)) )), ( ( ( "expected " + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-1036350201654", 10)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(4)) ))) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1153522698998527286707879497611725813209153232656", 10)) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPowerHandlesSignsCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (403) )) )}));
		//line 404 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-154654987", 10)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(3)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-3699063497752861435082803", 10)) )), ( ( ( "expected " + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-154654987", 10)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(3)) ))) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-3699063497752861435082803", 10)) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPowerHandlesSignsCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (404) )) )}));
		//line 406 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPowerHandlesSignsCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (406) )) )}));
		//line 407 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPowerHandlesSignsCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (407) )) )}));
		//line 408 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(2)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPowerHandlesSignsCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (408) )) )}));
		//line 410 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1e100", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPowerHandlesSignsCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (410) )) )}));
		//line 411 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1e100", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPowerHandlesSignsCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (411) )) )}));
		//line 412 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1e100", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPowerHandlesSignsCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (412) )) )}));
	}
	
	
	public void testPower()
	{
		//line 416 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.Bigs.parseBase("102340001040000", 10);
		//line 417 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("10000000000", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(10)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(10)) ))), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPower"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (417) )) )}));
	}
	
	
	public void testPowerOf0to0is1()
	{
		//line 421 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPowerOf0to0is1"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (421) )) )}));
		//line 422 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-0", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPowerOf0to0is1"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (422) )) )}));
		//line 423 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-0", 10)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPowerOf0to0is1"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (423) )) )}));
		//line 424 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-0", 10)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-0", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPowerOf0to0is1"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (424) )) )}));
	}
	
	
	public void testPowerCarriesOverCorrectly()
	{
		//line 428 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("16", 10)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("13", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("4503599627370496", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPowerCarriesOverCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (428) )) )}));
		//line 429 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("123456789123456789", 10)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("822526267372365207989468699031914332476569003445489153619518989325083908083922133639704420166045905346960117046949453426283086050487204639652635846010822673782217799736601", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPowerCarriesOverCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (429) )) )}));
		//line 430 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("2", 10)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(63)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("9223372036854775808", 10)) )), ( ( ( "expected 2.pow(63) == " + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("9223372036854775808", 10)) ).toString() ) + " but got " ) + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("2", 10)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(63)) ))) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPowerCarriesOverCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (430) )) )}));
		//line 431 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.notEquals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(100)) ).pow(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(56)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testPowerCarriesOverCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (431) )) )}));
	}
	
	
	public void testDivision()
	{
		//line 435 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.raises(( (( thx.TestBigInt_testDivision_435__Fun.__hx_current != null )) ? (thx.TestBigInt_testDivision_435__Fun.__hx_current) : (thx.TestBigInt_testDivision_435__Fun.__hx_current = ((thx.TestBigInt_testDivision_435__Fun) (new thx.TestBigInt_testDivision_435__Fun()) )) ), thx.Error.class, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testDivision"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (435) )) )}));
		//line 438 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.raises(( (( thx.TestBigInt_testDivision_438__Fun.__hx_current != null )) ? (thx.TestBigInt_testDivision_438__Fun.__hx_current) : (thx.TestBigInt_testDivision_438__Fun.__hx_current = ((thx.TestBigInt_testDivision_438__Fun) (new thx.TestBigInt_testDivision_438__Fun()) )) ), thx.Error.class, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testDivision"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (438) )) )}));
		//line 443 "/shared/core/thx/TestBigInt.hx"
		java.lang.Object __temp_stmt10 = null;
		//line 443 "/shared/core/thx/TestBigInt.hx"
		{
			//line 443 "/shared/core/thx/TestBigInt.hx"
			thx.bigint.BigIntImpl __temp_odecl1 = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(10)) );
			//line 443 "/shared/core/thx/TestBigInt.hx"
			thx.bigint.BigIntImpl __temp_odecl2 = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(2)) );
			//line 443 "/shared/core/thx/TestBigInt.hx"
			thx.bigint.BigIntImpl __temp_odecl3 = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(5)) );
			//line 443 "/shared/core/thx/TestBigInt.hx"
			__temp_stmt10 = new haxe.lang.DynamicObject(new java.lang.String[]{"div", "num", "res"}, new java.lang.Object[]{__temp_odecl2, __temp_odecl1, __temp_odecl3}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 444 "/shared/core/thx/TestBigInt.hx"
		java.lang.Object __temp_stmt11 = null;
		//line 444 "/shared/core/thx/TestBigInt.hx"
		{
			//line 444 "/shared/core/thx/TestBigInt.hx"
			thx.bigint.BigIntImpl __temp_odecl4 = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("102340001040000", 10)) );
			//line 444 "/shared/core/thx/TestBigInt.hx"
			thx.bigint.BigIntImpl __temp_odecl5 = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("10000000000", 10)) );
			//line 444 "/shared/core/thx/TestBigInt.hx"
			thx.bigint.BigIntImpl __temp_odecl6 = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(10234)) );
			//line 444 "/shared/core/thx/TestBigInt.hx"
			__temp_stmt11 = new haxe.lang.DynamicObject(new java.lang.String[]{"div", "num", "res"}, new java.lang.Object[]{__temp_odecl5, __temp_odecl4, __temp_odecl6}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 445 "/shared/core/thx/TestBigInt.hx"
		java.lang.Object __temp_stmt12 = null;
		//line 445 "/shared/core/thx/TestBigInt.hx"
		{
			//line 445 "/shared/core/thx/TestBigInt.hx"
			thx.bigint.BigIntImpl __temp_odecl7 = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1000000000000000000", 10)) );
			//line 445 "/shared/core/thx/TestBigInt.hx"
			thx.bigint.BigIntImpl __temp_odecl8 = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(50)) );
			//line 445 "/shared/core/thx/TestBigInt.hx"
			thx.bigint.BigIntImpl __temp_odecl9 = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("20000000000000000", 10)) );
			//line 445 "/shared/core/thx/TestBigInt.hx"
			__temp_stmt12 = new haxe.lang.DynamicObject(new java.lang.String[]{"div", "num", "res"}, new java.lang.Object[]{__temp_odecl8, __temp_odecl7, __temp_odecl9}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 442 "/shared/core/thx/TestBigInt.hx"
		haxe.root.Array<java.lang.Object> tests = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{__temp_stmt10, __temp_stmt11, __temp_stmt12});
		//line 447 "/shared/core/thx/TestBigInt.hx"
		{
			//line 447 "/shared/core/thx/TestBigInt.hx"
			int _g = 0;
			//line 447 "/shared/core/thx/TestBigInt.hx"
			while (( _g < tests.length ))
			{
				//line 447 "/shared/core/thx/TestBigInt.hx"
				java.lang.Object test = tests.__get(_g);
				//line 447 "/shared/core/thx/TestBigInt.hx"
				 ++ _g;
				//line 448 "/shared/core/thx/TestBigInt.hx"
				utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (haxe.lang.Runtime.getField(test, "num", true)) ).divide(((thx.bigint.BigIntImpl) (haxe.lang.Runtime.getField(test, "div", true)) ))) ), ((thx.bigint.BigIntImpl) (haxe.lang.Runtime.getField(test, "res", true)) )), ( ( ( ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (haxe.lang.Runtime.getField(test, "num", true)) ).toString() ) + " / " ) + ((thx.bigint.BigIntImpl) (haxe.lang.Runtime.getField(test, "div", true)) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (haxe.lang.Runtime.getField(test, "res", true)) ).toString() ) + " and it was " ) + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (haxe.lang.Runtime.getField(test, "num", true)) ).divide(((thx.bigint.BigIntImpl) (haxe.lang.Runtime.getField(test, "div", true)) ))) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testDivision"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (448) )) )}));
			}
			
		}
		
	}
	
	
	public void testAddition()
	{
		//line 453 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.BigIntImpl m = null;
		//line 454 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.BigIntImpl n = null;
		//line 455 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.BigIntImpl o = null;
		//line 456 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.BigIntImpl s = null;
		//line 459 "/shared/core/thx/TestBigInt.hx"
		m = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(123)) );
		//line 459 "/shared/core/thx/TestBigInt.hx"
		n = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) );
		//line 460 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (m) ).add(n)) ), m), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testAddition"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (460) )) )}));
		//line 461 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (n) ).add(m)) ), m), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testAddition"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (461) )) )}));
		//line 463 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (m) ).subtract(n)) ), m), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testAddition"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (463) )) )}));
		//line 464 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (n) ).subtract(m)) ), ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (m) ).negate()) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testAddition"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (464) )) )}));
		//line 467 "/shared/core/thx/TestBigInt.hx"
		m = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(123)) );
		//line 467 "/shared/core/thx/TestBigInt.hx"
		n = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(343)) );
		//line 467 "/shared/core/thx/TestBigInt.hx"
		s = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(466)) );
		//line 468 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (m) ).add(n)) ), s), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testAddition"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (468) )) )}));
		//line 469 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (n) ).add(m)) ), s), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testAddition"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (469) )) )}));
		//line 471 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (s) ).subtract(n)) ), m), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testAddition"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (471) )) )}));
		//line 472 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (n) ).subtract(s)) ), ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (m) ).negate()) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testAddition"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (472) )) )}));
		//line 475 "/shared/core/thx/TestBigInt.hx"
		m = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-234356)) );
		//line 475 "/shared/core/thx/TestBigInt.hx"
		n = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(355321)) );
		//line 475 "/shared/core/thx/TestBigInt.hx"
		o = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(234)) );
		//line 476 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (m) ).add(n)) ).add(o), ((thx.bigint.BigIntImpl) (m) ).add(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (n) ).add(o)) ))), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testAddition"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (476) )) )}));
		//line 478 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (m) ).subtract(n)) ).add(o), ((thx.bigint.BigIntImpl) (m) ).subtract(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (n) ).subtract(o)) ))), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testAddition"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (478) )) )}));
		//line 480 "/shared/core/thx/TestBigInt.hx"
		m = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) );
		//line 480 "/shared/core/thx/TestBigInt.hx"
		n = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-9999)) );
		//line 480 "/shared/core/thx/TestBigInt.hx"
		s = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-9998)) );
		//line 481 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (m) ).add(n)) ), s), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testAddition"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (481) )) )}));
		//line 483 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (s) ).subtract(n)) ), m), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testAddition"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (483) )) )}));
		//line 485 "/shared/core/thx/TestBigInt.hx"
		m = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("11111111111111111111110111111111111111111111111111", 10)) );
		//line 486 "/shared/core/thx/TestBigInt.hx"
		n = m;
		//line 487 "/shared/core/thx/TestBigInt.hx"
		s = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("22222222222222222222220222222222222222222222222222", 10)) );
		//line 488 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (m) ).add(n)) ), s), ( ( ( ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (m) ).toString() ) + " + " ) + ((thx.bigint.BigIntImpl) (n) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (s) ).toString() ) + " but is " ) + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (m) ).add(n)) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testAddition"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (488) )) )}));
		//line 490 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (m) ).subtract(n)) ).isZero(), ( ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (m) ).toString() ) + "-" ) + ((thx.bigint.BigIntImpl) (n) ).toString() ) + "==0 but is " ) + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (m) ).subtract(n)) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testAddition"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (490) )) )}));
		//line 491 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (m) ).subtract(n)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) )), ( ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (m) ).toString() ) + " - " ) + ((thx.bigint.BigIntImpl) (n) ).toString() ) + "==0 but is " ) + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (m) ).subtract(n)) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testAddition"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (491) )) )}));
		//line 492 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (s) ).subtract(n)) ), m), ( ( ( ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (s) ).toString() ) + " - " ) + ((thx.bigint.BigIntImpl) (n) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (m) ).toString() ) + " but is " ) + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (s) ).subtract(n)) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testAddition"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (492) )) )}));
		//line 494 "/shared/core/thx/TestBigInt.hx"
		m = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("99499494949383948405", 10)) );
		//line 495 "/shared/core/thx/TestBigInt.hx"
		n = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-472435789789045237084578078029457809342597808204538970", 10)) );
		//line 496 "/shared/core/thx/TestBigInt.hx"
		s = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-472435789789045237084578078029457709843102858820590565", 10)) );
		//line 498 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (m) ).add(n)) ), s), ( ( ( ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (m) ).toString() ) + " + " ) + ((thx.bigint.BigIntImpl) (n) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (s) ).toString() ) + " but got " ) + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (m) ).add(n)) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testAddition"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (498) )) )}));
		//line 500 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (s) ).subtract(n)) ), m), ( ( ( ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (s) ).toString() ) + " - " ) + ((thx.bigint.BigIntImpl) (n) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (m) ).toString() ) + " but got " ) + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (s) ).subtract(n)) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testAddition"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (500) )) )}));
		//line 502 "/shared/core/thx/TestBigInt.hx"
		m = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-1", 10)) );
		//line 503 "/shared/core/thx/TestBigInt.hx"
		n = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 10)) );
		//line 504 "/shared/core/thx/TestBigInt.hx"
		s = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", 10)) );
		//line 505 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (m) ).add(n)) ), s), ( ( ( ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (m) ).toString() ) + " + " ) + ((thx.bigint.BigIntImpl) (n) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (s) ).toString() ) + " but got " ) + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (m) ).add(n)) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testAddition"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (505) )) )}));
		//line 506 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (s) ).subtract(n)) ), m), ( ( ( ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (s) ).toString() ) + " - " ) + ((thx.bigint.BigIntImpl) (n) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (m) ).toString() ) + " but got " ) + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (s) ).subtract(n)) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testAddition"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (506) )) )}));
		//line 508 "/shared/core/thx/TestBigInt.hx"
		m = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1", 10)) );
		//line 509 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (m) ).add(s)) ), n), ( ( ( ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (m) ).toString() ) + " + " ) + ((thx.bigint.BigIntImpl) (s) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (n) ).toString() ) + " but got " ) + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (m) ).add(s)) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testAddition"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (509) )) )}));
		//line 510 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (n) ).subtract(s)) ), m), ( ( ( ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (n) ).toString() ) + " - " ) + ((thx.bigint.BigIntImpl) (s) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (m) ).toString() ) + " but got " ) + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (n) ).subtract(s)) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testAddition"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (510) )) )}));
		//line 511 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (n) ).subtract(m)) ), s), ( ( ( ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (n) ).toString() ) + " - " ) + ((thx.bigint.BigIntImpl) (m) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (s) ).toString() ) + " but got " ) + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (n) ).subtract(m)) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testAddition"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (511) )) )}));
	}
	
	
	public void testMultiplication()
	{
		//line 515 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.BigIntImpl a = null;
		//line 516 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.BigIntImpl b = null;
		//line 517 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.BigIntImpl m = null;
		//line 519 "/shared/core/thx/TestBigInt.hx"
		a = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(12347)) );
		//line 519 "/shared/core/thx/TestBigInt.hx"
		b = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) );
		//line 520 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (a) ).multiply(b)) ), b), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMultiplication"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (520) )) )}));
		//line 521 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (b) ).multiply(a)) ), b), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMultiplication"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (521) )) )}));
		//line 523 "/shared/core/thx/TestBigInt.hx"
		a = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-99999)) );
		//line 523 "/shared/core/thx/TestBigInt.hx"
		b = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) );
		//line 524 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (a) ).multiply(b)) ), a), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMultiplication"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (524) )) )}));
		//line 525 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (b) ).multiply(a)) ), a), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMultiplication"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (525) )) )}));
		//line 527 "/shared/core/thx/TestBigInt.hx"
		a = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1235)) );
		//line 527 "/shared/core/thx/TestBigInt.hx"
		b = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(44)) );
		//line 527 "/shared/core/thx/TestBigInt.hx"
		m = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(54340)) );
		//line 528 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (a) ).multiply(b)) ), m), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMultiplication"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (528) )) )}));
		//line 529 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (b) ).multiply(a)) ), m), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMultiplication"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (529) )) )}));
		//line 531 "/shared/core/thx/TestBigInt.hx"
		a = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-11)) );
		//line 531 "/shared/core/thx/TestBigInt.hx"
		b = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-9)) );
		//line 531 "/shared/core/thx/TestBigInt.hx"
		m = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(99)) );
		//line 532 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (a) ).multiply(b)) ), m), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMultiplication"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (532) )) )}));
		//line 534 "/shared/core/thx/TestBigInt.hx"
		a = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(55)) );
		//line 534 "/shared/core/thx/TestBigInt.hx"
		b = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(200395)) );
		//line 534 "/shared/core/thx/TestBigInt.hx"
		m = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(11021725)) );
		//line 535 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (a) ).multiply(b)) ), m), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMultiplication"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (535) )) )}));
		//line 537 "/shared/core/thx/TestBigInt.hx"
		a = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("111111111111111111111111111111111111111", 10)) );
		//line 538 "/shared/core/thx/TestBigInt.hx"
		b = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-333333333333333333333", 10)) );
		//line 539 "/shared/core/thx/TestBigInt.hx"
		m = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-37037037037037037036999999999999999999962962962962962962963", 10)) );
		//line 541 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (a) ).multiply(b)) ), m), ( ( ( ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (a) ).toString() ) + " * " ) + ((thx.bigint.BigIntImpl) (b) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (m) ).toString() ) + " but got " ) + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (a) ).multiply(b)) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testMultiplication"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (541) )) )}));
	}
	
	
	public void testComparison()
	{
		//line 545 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.BigIntImpl a = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) );
		//line 545 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.BigIntImpl b = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(2)) );
		//line 547 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.less(a, b), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (547) )) )}));
		//line 548 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.lessEquals(a, b), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (548) )) )}));
		//line 549 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.lessEquals(a, a), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (549) )) )}));
		//line 551 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.greater(b, a), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (551) )) )}));
		//line 552 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.greaterEquals(b, a), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (552) )) )}));
		//line 553 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.greaterEquals(b, b), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (553) )) )}));
		//line 554 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.lessEquals(b, b), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (554) )) )}));
		//line 556 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.equals(-1, ((thx.bigint.BigIntImpl) (a) ).compareTo(b), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (556) )) )}));
		//line 557 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.equals(1, ((thx.bigint.BigIntImpl) (b) ).compareTo(a), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (557) )) )}));
		//line 558 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.equals(0, ((thx.bigint.BigIntImpl) (b) ).compareTo(b), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (558) )) )}));
		//line 560 "/shared/core/thx/TestBigInt.hx"
		a = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-333333333333333333333", 10)) );
		//line 561 "/shared/core/thx/TestBigInt.hx"
		b = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("111111111111111111111111111111111111111", 10)) );
		//line 563 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.less(a, b), ( ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (a) ).toString() ) + " < " ) + ((thx.bigint.BigIntImpl) (b) ).toString() ) + " == true but it is " ) + haxe.root.Std.string(thx._BigInt.BigInt_Impl_.less(a, b)) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (563) )) )}));
		//line 564 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.lessEquals(a, b), ( ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (a) ).toString() ) + " <= " ) + ((thx.bigint.BigIntImpl) (b) ).toString() ) + " == true but it is " ) + haxe.root.Std.string(thx._BigInt.BigInt_Impl_.lessEquals(a, b)) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (564) )) )}));
		//line 565 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.lessEquals(a, a), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (565) )) )}));
		//line 567 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.greater(b, a), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (567) )) )}));
		//line 568 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.greaterEquals(b, a), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (568) )) )}));
		//line 569 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.greaterEquals(b, b), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (569) )) )}));
		//line 570 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.lessEquals(b, b), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (570) )) )}));
		//line 572 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.equals(-1, ((thx.bigint.BigIntImpl) (a) ).compareTo(b), ( ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (a) ).toString() ) + ".compareTo(" ) + ((thx.bigint.BigIntImpl) (b) ).toString() ) + ") t0 be -1 but it is " ) + ((thx.bigint.BigIntImpl) (a) ).compareTo(b) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (572) )) )}));
		//line 573 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.equals(1, ((thx.bigint.BigIntImpl) (b) ).compareTo(a), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (573) )) )}));
		//line 574 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.equals(0, ((thx.bigint.BigIntImpl) (b) ).compareTo(b), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (574) )) )}));
		//line 576 "/shared/core/thx/TestBigInt.hx"
		a = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-37037037037037037036999999999999999999962962962962962962963", 10)) );
		//line 577 "/shared/core/thx/TestBigInt.hx"
		b = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-333333333333333333333", 10)) );
		//line 579 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.less(a, b), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (579) )) )}));
		//line 580 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.lessEquals(a, b), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (580) )) )}));
		//line 581 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.lessEquals(a, a), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (581) )) )}));
		//line 583 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.greater(b, a), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (583) )) )}));
		//line 584 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.greaterEquals(b, a), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (584) )) )}));
		//line 585 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.greaterEquals(b, b), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (585) )) )}));
		//line 586 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.lessEquals(b, b), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (586) )) )}));
		//line 588 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.equals(-1, ((thx.bigint.BigIntImpl) (a) ).compareTo(b), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (588) )) )}));
		//line 589 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.equals(1, ((thx.bigint.BigIntImpl) (b) ).compareTo(a), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (589) )) )}));
		//line 590 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.equals(0, ((thx.bigint.BigIntImpl) (a) ).compareTo(a), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (590) )) )}));
		//line 591 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.equals(0, ((thx.bigint.BigIntImpl) (b) ).compareTo(b), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testComparison"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (591) )) )}));
	}
	
	
	public void testNegation()
	{
		//line 595 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.BigIntImpl m = null;
		//line 596 "/shared/core/thx/TestBigInt.hx"
		thx.bigint.BigIntImpl n = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) );
		//line 600 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (n) ).negate()) ), n), ( ( ( "expected " + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (n) ).negate()) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (n) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testNegation"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (600) )) )}));
		//line 602 "/shared/core/thx/TestBigInt.hx"
		n = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) );
		//line 603 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (n) ).negate()) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testNegation"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (603) )) )}));
		//line 604 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (n) ).negate()) ).negate(), n), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testNegation"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (604) )) )}));
		//line 606 "/shared/core/thx/TestBigInt.hx"
		n = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1234)) );
		//line 607 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (n) ).negate()) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1234)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testNegation"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (607) )) )}));
		//line 608 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (n) ).negate()) ).negate(), n), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testNegation"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (608) )) )}));
		//line 610 "/shared/core/thx/TestBigInt.hx"
		m = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("192395858359234934684359234", 10)) );
		//line 611 "/shared/core/thx/TestBigInt.hx"
		n = ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-192395858359234934684359234", 10)) );
		//line 612 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (m) ).negate()) ), n), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testNegation"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (612) )) )}));
		//line 613 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(m, ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (n) ).negate()) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testNegation"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (613) )) )}));
	}
	
	
	public void testBigIntParsesNumbersCorrectly()
	{
		//line 617 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("10", 2)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(2)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testBigIntParsesNumbersCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (617) )) )}));
		//line 618 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("FF", 16)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(255)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testBigIntParsesNumbersCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (618) )) )}));
		//line 619 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("111100001111", 2)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(3855)) )), ( ( ( "expected " + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("111100001111", 2)) ).toString() ) + " == " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(3855)) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testBigIntParsesNumbersCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (619) )) )}));
		//line 621 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-1", 16)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testBigIntParsesNumbersCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (621) )) )}));
		//line 622 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("9822997e35bb99bcf103a64299aa92b8446ab93879fba53349f1626f3c8f78a4ee1d8d9e7562538f8e374fdf64c8eff7481c63cde5ca9821abfb3df6fb3e2489d2f85d34cf347f3e89191a19cc6b6b8072a976a8f1bcf68d20f18a1c0efb023252ba2d0961428a5c282d2645f3f7fa160f7f84aca88e40a74066c4a787bed7d0082f7e45b1ffee532715f56bd5f8168eaf7eaae112ed1316371f047692631e70e6b85b290ef063845b364dad7e10b9deb9fcfb708f83b7c3c6b82ce16eb0034c030b332a58d637a7b547fd0527051d7de9e5004db2ea2bd75f5c5a280a1a9b93c3c83373b6dcf1b65c01197096e97d13076b6613bc2ebf47c91fbe1aefeea966134bfbbf5f850320f0f0c2d88888bd82d118a6aaf8df2b092cf5456eff7e209feb476bf3c01d6d2e7ca0b9f40d83b107b4def92f2927cf0a1bb6190c67a4da91478709262ed1f1ecb77fbaf1197ac238c246a63a697f51e8d539f850e790137e7fce5f764896fdfb4fc3787520608f0400e72aeea5737c36304c6887ec1a174564ecec63a57b1e0946dc311dd3aea7bfae197ff9c7fcbf17c97d9db303d231702ef502dde1b53896196dc2e5d30b2b6ec58fc3744f4de08109eb99aa9f22ffe2f12f3953f516f91d35a8852aff4a19e250410fbd8dbcdae99f92f88e2f94341fc1ecdff32733d194c0541f708a72c5b4c03e5515e1086d0903addca0e172968ff1dee87bbd4fee679e2ee5a52975807ae7212cc2a33e0821e2d9b44eaa7dc29536a94c6597eda41bdd1e5e618e7b388b53d38ef9542523bce888738db46c6706c3ee82cbc3655408071e9e422a44d309e3cfd31ec2135ee0cba32b0c6721c8bee4d076543b71c35a06087a007c14e51d1f0c4d0aa9aa0751dfd3776d2357a010e6b147aca40c7b669291e6defbf5ca77505c960f14b330e6c90dc2539431329ef78a1e9f26b2ead7d28a622e6b586bcee22bd0a495442c6a1235588988252cbd4d36975560fb8e7e5c8cf06f29aeb68659c5cb4cf8d011375b00000000000000000000000000000000000000000000000000000000000000000000000000", 16)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testBigIntParsesNumbersCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (622) )) )}));
		//line 623 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("9223372036854775808", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1000000000000000000000000000000000000000000000000000000000000000", 2)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testBigIntParsesNumbersCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (623) )) )}));
		//line 624 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("324AFCCC342342333CCD239998881232324AFCCC342342333CCD239998881232", 16)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("22748133857356174891035811692236022265357659892433333914058690475216129757746", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testBigIntParsesNumbersCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (624) )) )}));
		//line 625 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("234345345345", 10)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("3690123141", 16)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testBigIntParsesNumbersCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (625) )) )}));
		//line 626 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-10", 16)) ), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-16", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testBigIntParsesNumbersCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (626) )) )}));
	}
	
	
	public void testBigIntOutputsNumbersCorrectly()
	{
		//line 630 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(haxe.lang.Runtime.valEq(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("366900685503779409298642816707647664013657589336", 10)) ).toStringWithBase(16), "4044654fce69424a651af2825b37124c25094658"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testBigIntOutputsNumbersCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (630) )) )}));
		//line 631 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(haxe.lang.Runtime.valEq(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("111111111111111111111111111111111111111111111111111111", 2)) ).toStringWithBase(2), "111111111111111111111111111111111111111111111111111111"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testBigIntOutputsNumbersCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (631) )) )}));
		//line 632 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(haxe.lang.Runtime.valEq(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("secretmessage000", 36)) ).toStringWithBase(36), "secretmessage000"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testBigIntOutputsNumbersCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (632) )) )}));
		//line 633 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(haxe.lang.Runtime.valEq(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-256)) ).toStringWithBase(16), "-100"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testBigIntOutputsNumbersCorrectly"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (633) )) )}));
	}
	
	
	public void testShiftingLeftAndRight()
	{
		//line 637 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-5)) ).shiftRight(2), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-2)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testShiftingLeftAndRight"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (637) )) )}));
		//line 638 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(5)) ).shiftRight(-2), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(20)) )), ( ( "expected " + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(5)) ).shiftRight(-2)) ).toString() ) + " == 20" ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testShiftingLeftAndRight"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (638) )) )}));
		//line 639 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(5)) ).shiftLeft(-2), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testShiftingLeftAndRight"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (639) )) )}));
		//line 640 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1024)) ).shiftLeft(100), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1298074214633706907132624082305024", 10)) )), ( ( ( ( ( "expected " + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1024)) ).toString() ) + ".shiftLeft(100) == " ) + ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1298074214633706907132624082305024", 10)) ).toString() ) + " but got " ) + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(1024)) ).shiftLeft(100)) ).toString() ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testShiftingLeftAndRight"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (640) )) )}));
		//line 641 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("2596148429267413814265248164610049", 10)) ).shiftRight(100), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(2048)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testShiftingLeftAndRight"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (641) )) )}));
		//line 642 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("8589934592", 10)) ).shiftRight(-50), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("9671406556917033397649408", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testShiftingLeftAndRight"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (642) )) )}));
		//line 643 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("38685626227668133590597632", 10)) ).shiftLeft(-50), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("34359738368", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testShiftingLeftAndRight"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (643) )) )}));
		//line 644 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-1", 10)) ).shiftRight(25), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-1)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testShiftingLeftAndRight"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (644) )) )}));
	}
	
	
	public void testBitwiseOperations()
	{
		//line 648 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("435783453", 10)) ).and(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("902345074", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("298352912", 10)) )), ( ( "expected " + ((thx.bigint.BigIntImpl) (((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("435783453", 10)) ).and(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("902345074", 10)) ))) ).toString() ) + " to be 298352912" ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testBitwiseOperations"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (648) )) )}));
		//line 649 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("435783453", 10)) ).or(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("902345074", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1039775615", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testBitwiseOperations"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (649) )) )}));
		//line 650 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("435783453", 10)) ).xor(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("902345074", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("741422703", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testBitwiseOperations"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (650) )) )}));
		//line 651 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("94981987261387596", 10)) ).not(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-94981987261387597", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testBitwiseOperations"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (651) )) )}));
		//line 652 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-6931047708307681506", 10)) ).xor(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("25214903917", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-6931047723896018573", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testBitwiseOperations"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (652) )) )}));
		//line 653 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-6931047723896018573", 10)) ).and(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("281474976710655", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("273577603885427", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testBitwiseOperations"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (653) )) )}));
		//line 654 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-65", 10)) ).xor(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-42", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("105", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testBitwiseOperations"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (654) )) )}));
		//line 655 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("6", 10)) ).and(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-3", 10)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("4", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testBitwiseOperations"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (655) )) )}));
		//line 656 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("0", 10)) ).not(), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-1", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testBitwiseOperations"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (656) )) )}));
		//line 657 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("13", 10)) ).or(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-8)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-3", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testBitwiseOperations"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (657) )) )}));
		//line 658 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(thx._BigInt.BigInt_Impl_.equals(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("12", 10)) ).xor(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-5)) )), ((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-9", 10)) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testBitwiseOperations"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (658) )) )}));
	}
	
	
	public void testIsEvenAndIsOdd()
	{
		//line 662 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) ).isEven(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsEvenAndIsOdd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (662) )) )}));
		//line 663 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(0)) ).isOdd(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsEvenAndIsOdd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (663) )) )}));
		//line 665 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(654)) ).isEven(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsEvenAndIsOdd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (665) )) )}));
		//line 666 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(654)) ).isOdd(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsEvenAndIsOdd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (666) )) )}));
		//line 668 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(653)) ).isOdd(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsEvenAndIsOdd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (668) )) )}));
		//line 669 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(653)) ).isEven(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsEvenAndIsOdd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (669) )) )}));
		//line 671 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-984)) ).isEven(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsEvenAndIsOdd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (671) )) )}));
		//line 672 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-984)) ).isOdd(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsEvenAndIsOdd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (672) )) )}));
		//line 674 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-987)) ).isOdd(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsEvenAndIsOdd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (674) )) )}));
		//line 675 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-987)) ).isEven(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsEvenAndIsOdd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (675) )) )}));
		//line 677 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("9888651888888888", 10)) ).isEven(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsEvenAndIsOdd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (677) )) )}));
		//line 678 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("9888651888888888", 10)) ).isOdd(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsEvenAndIsOdd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (678) )) )}));
		//line 680 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1026377777777777", 10)) ).isOdd(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsEvenAndIsOdd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (680) )) )}));
		//line 681 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("1026377777777777", 10)) ).isEven(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsEvenAndIsOdd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (681) )) )}));
		//line 683 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-9888651888888888", 10)) ).isEven(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsEvenAndIsOdd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (683) )) )}));
		//line 684 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-9888651888888888", 10)) ).isOdd(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsEvenAndIsOdd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (684) )) )}));
		//line 686 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isTrue(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-1026377777777777", 10)) ).isOdd(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsEvenAndIsOdd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (686) )) )}));
		//line 687 "/shared/core/thx/TestBigInt.hx"
		utest.Assert.isFalse(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.parseBase("-1026377777777777", 10)) ).isEven(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBigInt", "TestBigInt.hx", "testIsEvenAndIsOdd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (687) )) )}));
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 8 "/shared/core/thx/TestBigInt.hx"
		{
			//line 8 "/shared/core/thx/TestBigInt.hx"
			boolean __temp_executeDef1 = true;
			//line 8 "/shared/core/thx/TestBigInt.hx"
			switch (field.hashCode())
			{
				case 315767492:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testIsEvenAndIsOdd")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testIsEvenAndIsOdd")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 1708148897:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testIssue82")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testIssue82")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 298351499:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testBitwiseOperations")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testBitwiseOperations")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 729903345:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testFromInt64")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFromInt64")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 1856526238:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testShiftingLeftAndRight")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testShiftingLeftAndRight")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -603132235:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testLcmAndGcd")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testLcmAndGcd")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -1235134274:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testBigIntOutputsNumbersCorrectly")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testBigIntOutputsNumbersCorrectly")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 706475286:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testIncrements")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testIncrements")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -1765553170:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testBigIntParsesNumbersCorrectly")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testBigIntParsesNumbersCorrectly")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 1500449621:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testCanHandleLargeNumbers")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCanHandleLargeNumbers")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 1635451415:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testNegation")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testNegation")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 2115932038:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testIsImmutable")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testIsImmutable")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -1558446533:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testComparison")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testComparison")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -1147107818:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testInts")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testInts")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -583634760:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testMultiplication")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testMultiplication")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 1348084937:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testFloats")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFloats")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -512249426:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testAddition")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testAddition")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 2020609424:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testStrings")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testStrings")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 1079060319:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testDivision")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testDivision")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 1324251889:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testEquals")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testEquals")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 1567067837:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testPowerCarriesOverCorrectly")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testPowerCarriesOverCorrectly")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -876128631:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testIgnoreLeadingZeros")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testIgnoreLeadingZeros")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -405113032:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testPowerOf0to0is1")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testPowerOf0to0is1")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -1044189325:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testNumbersShouldBeTheSameWhenConstructedDifferently")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testNumbersShouldBeTheSameWhenConstructedDifferently")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -1194106989:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testPower")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testPower")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -632107340:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testFibonacci")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFibonacci")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -517781479:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testPowerHandlesSignsCorrectly")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testPowerHandlesSignsCorrectly")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -422773188:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testCarriesOverCorrectly")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCarriesOverCorrectly")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -1721651777:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testPowerToNegativeNumbersIs0")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testPowerToNegativeNumbersIs0")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -1146993506:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testMisc")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testMisc")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 1725060175:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testSquare")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSquare")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -812751170:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testMultiplyHandlesSignsCorectly")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testMultiplyHandlesSignsCorectly")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 1439815204:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testIsZero")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testIsZero")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 901639594:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testDivisionBy1IsTheIdentity")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testDivisionBy1IsTheIdentity")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 1439674624:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testIsUnit")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testIsUnit")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -1904305051:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testDivisionBySelfIs1")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testDivisionBySelfIs1")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 1673672193:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testIsPositiveAndIsNegativeWorkForBigNumbers")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testIsPositiveAndIsNegativeWorkForBigNumbers")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -523150953:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testDivisionOf0Equals0")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testDivisionOf0Equals0")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 180452954:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testIsPositiveAndIsNegativeWorkForSmallNumbers")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testIsPositiveAndIsNegativeWorkForSmallNumbers")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 580166419:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testModulo0ThrowsError")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testModulo0ThrowsError")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 1564527425:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testIsPositiveAndIsNegative")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testIsPositiveAndIsNegative")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -816147164:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testModuloHandlesSignsCorrectly")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testModuloHandlesSignsCorrectly")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -1422484864:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testAbs")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testAbs")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -560249224:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testPrevNext")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testPrevNext")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -1961619166:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testPrevNextCarriesOverCorrectly")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testPrevNextCarriesOverCorrectly")) );
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
			}
			
			//line 8 "/shared/core/thx/TestBigInt.hx"
			if (__temp_executeDef1) 
			{
				//line 8 "/shared/core/thx/TestBigInt.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 8 "/shared/core/thx/TestBigInt.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 8 "/shared/core/thx/TestBigInt.hx"
		{
			//line 8 "/shared/core/thx/TestBigInt.hx"
			boolean __temp_executeDef1 = true;
			//line 8 "/shared/core/thx/TestBigInt.hx"
			switch (field.hashCode())
			{
				case 315767492:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testIsEvenAndIsOdd")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testIsEvenAndIsOdd();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 1708148897:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testIssue82")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testIssue82();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 298351499:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testBitwiseOperations")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testBitwiseOperations();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 729903345:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testFromInt64")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testFromInt64();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 1856526238:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testShiftingLeftAndRight")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testShiftingLeftAndRight();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -603132235:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testLcmAndGcd")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testLcmAndGcd();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -1235134274:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testBigIntOutputsNumbersCorrectly")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testBigIntOutputsNumbersCorrectly();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 706475286:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testIncrements")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testIncrements();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -1765553170:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testBigIntParsesNumbersCorrectly")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testBigIntParsesNumbersCorrectly();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 1500449621:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testCanHandleLargeNumbers")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testCanHandleLargeNumbers();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 1635451415:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testNegation")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testNegation();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 2115932038:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testIsImmutable")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testIsImmutable();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -1558446533:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testComparison")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testComparison();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -1147107818:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testInts")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testInts();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -583634760:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testMultiplication")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testMultiplication();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 1348084937:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testFloats")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testFloats();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -512249426:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testAddition")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testAddition();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 2020609424:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testStrings")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testStrings();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 1079060319:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testDivision")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testDivision();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 1324251889:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testEquals")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testEquals();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 1567067837:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testPowerCarriesOverCorrectly")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testPowerCarriesOverCorrectly();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -876128631:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testIgnoreLeadingZeros")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testIgnoreLeadingZeros();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -405113032:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testPowerOf0to0is1")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testPowerOf0to0is1();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -1044189325:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testNumbersShouldBeTheSameWhenConstructedDifferently")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testNumbersShouldBeTheSameWhenConstructedDifferently();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -1194106989:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testPower")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testPower();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -632107340:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testFibonacci")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testFibonacci();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -517781479:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testPowerHandlesSignsCorrectly")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testPowerHandlesSignsCorrectly();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -422773188:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testCarriesOverCorrectly")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testCarriesOverCorrectly();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -1721651777:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testPowerToNegativeNumbersIs0")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testPowerToNegativeNumbersIs0();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -1146993506:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testMisc")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testMisc();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 1725060175:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testSquare")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testSquare();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -812751170:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testMultiplyHandlesSignsCorectly")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testMultiplyHandlesSignsCorectly();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 1439815204:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testIsZero")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testIsZero();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 901639594:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testDivisionBy1IsTheIdentity")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testDivisionBy1IsTheIdentity();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 1439674624:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testIsUnit")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testIsUnit();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -1904305051:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testDivisionBySelfIs1")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testDivisionBySelfIs1();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 1673672193:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testIsPositiveAndIsNegativeWorkForBigNumbers")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testIsPositiveAndIsNegativeWorkForBigNumbers();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -523150953:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testDivisionOf0Equals0")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testDivisionOf0Equals0();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 180452954:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testIsPositiveAndIsNegativeWorkForSmallNumbers")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testIsPositiveAndIsNegativeWorkForSmallNumbers();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 580166419:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testModulo0ThrowsError")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testModulo0ThrowsError();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case 1564527425:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testIsPositiveAndIsNegative")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testIsPositiveAndIsNegative();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -816147164:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testModuloHandlesSignsCorrectly")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testModuloHandlesSignsCorrectly();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -1422484864:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testAbs")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testAbs();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -560249224:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testPrevNext")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testPrevNext();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
				case -1961619166:
				{
					//line 8 "/shared/core/thx/TestBigInt.hx"
					if (field.equals("testPrevNextCarriesOverCorrectly")) 
					{
						//line 8 "/shared/core/thx/TestBigInt.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestBigInt.hx"
						this.testPrevNextCarriesOverCorrectly();
					}
					
					//line 8 "/shared/core/thx/TestBigInt.hx"
					break;
				}
				
				
			}
			
			//line 8 "/shared/core/thx/TestBigInt.hx"
			if (__temp_executeDef1) 
			{
				//line 8 "/shared/core/thx/TestBigInt.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 8 "/shared/core/thx/TestBigInt.hx"
		return null;
	}
	
	
}


