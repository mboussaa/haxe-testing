// Generated by Haxe 3.3.0
package thx;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestIterables extends haxe.lang.HxObject
{
	public TestIterables(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestIterables()
	{
		//line 9 "/shared/core/thx/TestIterables.hx"
		thx.TestIterables.__hx_ctor_thx_TestIterables(this);
	}
	
	
	public static void __hx_ctor_thx_TestIterables(thx.TestIterables __temp_me186)
	{
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 8 "/shared/core/thx/TestIterables.hx"
		return new thx.TestIterables(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 8 "/shared/core/thx/TestIterables.hx"
		return new thx.TestIterables();
	}
	
	
	public void testMin()
	{
		//line 12 "/shared/core/thx/TestIterables.hx"
		haxe.root.Array<java.lang.Object> a = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3, 1, 2});
		//line 14 "/shared/core/thx/TestIterables.hx"
		utest.Assert.same(haxe.ds.Option.Some(1), ((haxe.ds.Option) (thx.Iterables.minBy(((java.lang.Object) (a) ), ((haxe.lang.Function) (new haxe.lang.Closure(thx.Functions.class, "identity")) ), ((haxe.lang.Function) (thx.Ints.order) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestIterables", "TestIterables.hx", "testMin"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (14) )) )}));
		//line 15 "/shared/core/thx/TestIterables.hx"
		utest.Assert.same(haxe.ds.Option.None, ((haxe.ds.Option) (thx.Iterables.minBy(((java.lang.Object) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{})) ), ((haxe.lang.Function) (new haxe.lang.Closure(thx.Functions.class, "identity")) ), ((haxe.lang.Function) (thx.Ints.order) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestIterables", "TestIterables.hx", "testMin"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (15) )) )}));
	}
	
	
	public void testMinBy()
	{
		//line 19 "/shared/core/thx/TestIterables.hx"
		haxe.root.Array<java.lang.Object> a = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (3) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (2) )) )})});
		//line 21 "/shared/core/thx/TestIterables.hx"
		utest.Assert.same(haxe.ds.Option.Some(new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"a"}, new double[]{((double) (((double) (1) )) )})), ((haxe.ds.Option) (thx.Iterables.minBy(((java.lang.Object) (a) ), ((haxe.lang.Function) (( (( thx.TestIterables_testMinBy_21__Fun.__hx_current != null )) ? (thx.TestIterables_testMinBy_21__Fun.__hx_current) : (thx.TestIterables_testMinBy_21__Fun.__hx_current = ((thx.TestIterables_testMinBy_21__Fun) (new thx.TestIterables_testMinBy_21__Fun()) )) )) ), ((haxe.lang.Function) (thx.Ints.order) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestIterables", "TestIterables.hx", "testMinBy"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (21) )) )}));
		//line 22 "/shared/core/thx/TestIterables.hx"
		utest.Assert.same(haxe.ds.Option.None, ((haxe.ds.Option) (thx.Iterables.minBy(((java.lang.Object) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{})) ), ((haxe.lang.Function) (( (( thx.TestIterables_testMinBy_22__Fun.__hx_current != null )) ? (thx.TestIterables_testMinBy_22__Fun.__hx_current) : (thx.TestIterables_testMinBy_22__Fun.__hx_current = ((thx.TestIterables_testMinBy_22__Fun) (new thx.TestIterables_testMinBy_22__Fun()) )) )) ), ((haxe.lang.Function) (thx.Ints.order) ))) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestIterables", "TestIterables.hx", "testMinBy"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (22) )) )}));
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 8 "/shared/core/thx/TestIterables.hx"
		{
			//line 8 "/shared/core/thx/TestIterables.hx"
			boolean __temp_executeDef1 = true;
			//line 8 "/shared/core/thx/TestIterables.hx"
			switch (field.hashCode())
			{
				case -1197066025:
				{
					//line 8 "/shared/core/thx/TestIterables.hx"
					if (field.equals("testMinBy")) 
					{
						//line 8 "/shared/core/thx/TestIterables.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestIterables.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testMinBy")) );
					}
					
					//line 8 "/shared/core/thx/TestIterables.hx"
					break;
				}
				
				
				case -1422473120:
				{
					//line 8 "/shared/core/thx/TestIterables.hx"
					if (field.equals("testMin")) 
					{
						//line 8 "/shared/core/thx/TestIterables.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestIterables.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testMin")) );
					}
					
					//line 8 "/shared/core/thx/TestIterables.hx"
					break;
				}
				
				
			}
			
			//line 8 "/shared/core/thx/TestIterables.hx"
			if (__temp_executeDef1) 
			{
				//line 8 "/shared/core/thx/TestIterables.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 8 "/shared/core/thx/TestIterables.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 8 "/shared/core/thx/TestIterables.hx"
		{
			//line 8 "/shared/core/thx/TestIterables.hx"
			boolean __temp_executeDef1 = true;
			//line 8 "/shared/core/thx/TestIterables.hx"
			switch (field.hashCode())
			{
				case -1197066025:
				{
					//line 8 "/shared/core/thx/TestIterables.hx"
					if (field.equals("testMinBy")) 
					{
						//line 8 "/shared/core/thx/TestIterables.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestIterables.hx"
						this.testMinBy();
					}
					
					//line 8 "/shared/core/thx/TestIterables.hx"
					break;
				}
				
				
				case -1422473120:
				{
					//line 8 "/shared/core/thx/TestIterables.hx"
					if (field.equals("testMin")) 
					{
						//line 8 "/shared/core/thx/TestIterables.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestIterables.hx"
						this.testMin();
					}
					
					//line 8 "/shared/core/thx/TestIterables.hx"
					break;
				}
				
				
			}
			
			//line 8 "/shared/core/thx/TestIterables.hx"
			if (__temp_executeDef1) 
			{
				//line 8 "/shared/core/thx/TestIterables.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 8 "/shared/core/thx/TestIterables.hx"
		return null;
	}
	
	
}


