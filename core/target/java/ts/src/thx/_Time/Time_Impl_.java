// Generated by Haxe 3.3.0
package thx._Time;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public final class Time_Impl_
{
	static
	{
		//line 10 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		java.lang.Object __temp_stmt1 = null;
		//line 10 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		{
			//line 10 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			long this1 = ((long) (0) );
			//line 10 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			__temp_stmt1 = ((long) (this1) );
		}
		
		//line 10 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		thx._Time.Time_Impl_.zero = haxe.lang.Runtime.toLong(__temp_stmt1);
		//line 11 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		java.lang.Object __temp_stmt2 = null;
		//line 11 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		{
			//line 11 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			long this1 = ((long) (24) );
			//line 11 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			__temp_stmt2 = ((long) (this1) );
		}
		
		//line 11 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		thx._Time.Time_Impl_.oneDay = haxe.lang.Runtime.toLong(__temp_stmt2);
	}
	
	public static long zero;
	
	public static long oneDay;
	
	public static long fromDays(int days)
	{
		//line 14 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return thx._Time.Time_Impl_.create(( 24 * days ), 0, 0, 0);
	}
	
	
	public static long fromHours(int hours)
	{
		//line 16 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return thx._Time.Time_Impl_.create(hours, 0, 0, 0);
	}
	
	
	public static long fromMinutes(int minutes)
	{
		//line 18 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return thx._Time.Time_Impl_.create(0, minutes, 0, 0);
	}
	
	
	public static long fromSeconds(int seconds)
	{
		//line 20 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return thx._Time.Time_Impl_.create(0, 0, seconds, 0);
	}
	
	
	public static long fromMilliseconds(int milliseconds)
	{
		//line 22 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return thx._Time.Time_Impl_.create(0, 0, 0, milliseconds);
	}
	
	
	public static long timeToTicks(int hours, int minutes, int seconds)
	{
		//line 25 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long totalSeconds = ((long) (( ((long) (( ((long) (( hours * 3600 )) ) + ((long) (( minutes * 60 )) ) )) ) + ((long) (seconds) ) )) );
		//line 26 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ((long) (( ((long) (totalSeconds) ) * ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
	}
	
	
	public static long fromString(java.lang.String s)
	{
		//line 30 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		haxe.root.EReg pattern = new haxe.root.EReg("^([-+])?(?:(\\d+)[.](\\d{1,2})|(\\d+))[:](\\d{2})(?:[:](\\d{2})(?:\\.(\\d+))?)?$", "");
		//line 31 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		if ( ! (pattern.match(s)) ) 
		{
			//line 32 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			throw haxe.lang.HaxeException.wrap(new thx.Error(( ( "unable to parse Time string: \"" + s ) + "\"" ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx._Time.Time_Impl_", "Time.hx", "fromString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (32) )) )})));
		}
		
		//line 33 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		java.lang.String smticks = pattern.matched(7);
		//line 33 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		int mticks = 0;
		//line 35 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		if (( null != smticks )) 
		{
			//line 36 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			smticks = ( "1" + haxe.lang.StringExt.substring(thx.Strings.rpad(smticks, "0", 7), 0, 7) );
			//line 37 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			mticks = ( ((int) (haxe.lang.Runtime.toInt(haxe.root.Std.parseInt(smticks))) ) - ((int) (10000000) ) );
		}
		
		//line 40 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		int days = 0;
		//line 40 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		int hours = 0;
		//line 40 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		java.lang.Object minutes = haxe.root.Std.parseInt(pattern.matched(5));
		//line 40 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		java.lang.Object seconds = haxe.root.Std.parseInt(pattern.matched(6));
		//line 44 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		if (( null != pattern.matched(2) )) 
		{
			//line 45 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			days = ((int) (haxe.lang.Runtime.toInt(haxe.root.Std.parseInt(pattern.matched(2)))) );
			//line 46 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			hours = ((int) (haxe.lang.Runtime.toInt(haxe.root.Std.parseInt(pattern.matched(3)))) );
		}
		else
		{
			//line 48 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			hours = ((int) (haxe.lang.Runtime.toInt(haxe.root.Std.parseInt(pattern.matched(4)))) );
		}
		
		//line 51 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long this1 = ((long) (( ((long) (thx._Time.Time_Impl_.create(( ( days * 24 ) + hours ), minutes, seconds, null)) ) + ((long) (mticks) ) )) );
		//line 51 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long time = ((long) (this1) );
		//line 57 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		if (haxe.lang.Runtime.valEq(pattern.matched(1), "-")) 
		{
			//line 58 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			return ((long) (haxe._Int64.Int64_Impl_.neg(((long) (time) ))) );
		}
		else
		{
			//line 60 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			return time;
		}
		
	}
	
	
	public static int compare(long a, long b)
	{
		//line 65 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return thx.Int64s.compare(((long) (a) ), ((long) (b) ));
	}
	
	
	public static long create(int hours, java.lang.Object minutes, java.lang.Object seconds, java.lang.Object milliseconds)
	{
		//line 68 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		java.lang.Object __temp_milliseconds212 = ( (haxe.lang.Runtime.eq(milliseconds, null)) ? (((java.lang.Object) (0) )) : (milliseconds) );
		//line 68 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		java.lang.Object __temp_seconds211 = ( (haxe.lang.Runtime.eq(seconds, null)) ? (((java.lang.Object) (0) )) : (seconds) );
		//line 68 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		java.lang.Object __temp_minutes210 = ( (haxe.lang.Runtime.eq(minutes, null)) ? (((java.lang.Object) (0) )) : (minutes) );
		//line 68 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ((long) (( ((long) (thx._Time.Time_Impl_.timeToTicks(hours, ((int) (haxe.lang.Runtime.toInt(__temp_minutes210)) ), ((int) (haxe.lang.Runtime.toInt(__temp_seconds211)) ))) ) + ((long) (( haxe.lang.Runtime.toLong(__temp_milliseconds212) * ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) )) ) )) );
	}
	
	
	public static long createDays(int days, java.lang.Object hours, java.lang.Object minutes, java.lang.Object seconds, java.lang.Object milliseconds)
	{
		//line 71 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		java.lang.Object __temp_milliseconds216 = ( (haxe.lang.Runtime.eq(milliseconds, null)) ? (((java.lang.Object) (0) )) : (milliseconds) );
		//line 71 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		java.lang.Object __temp_seconds215 = ( (haxe.lang.Runtime.eq(seconds, null)) ? (((java.lang.Object) (0) )) : (seconds) );
		//line 71 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		java.lang.Object __temp_minutes214 = ( (haxe.lang.Runtime.eq(minutes, null)) ? (((java.lang.Object) (0) )) : (minutes) );
		//line 71 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		java.lang.Object __temp_hours213 = ( (haxe.lang.Runtime.eq(hours, null)) ? (((java.lang.Object) (0) )) : (hours) );
		//line 71 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return thx._Time.Time_Impl_.create(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.plus(( days * 24 ), __temp_hours213))) ), __temp_minutes214, __temp_seconds215, __temp_milliseconds216);
	}
	
	
	public static long _new(long ticks)
	{
		//line 73 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ((long) (ticks) );
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	public static long abs(long this1)
	{
		//line 94 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		if (((boolean) (( ((long) (this1) ) < ((long) (0) ) )) )) 
		{
			//line 94 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			return ((long) (haxe._Int64.Int64_Impl_.neg(((long) (this1) ))) );
		}
		else
		{
			//line 94 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			return ((long) (this1) );
		}
		
	}
	
	
	public static long withHours(long this1, int hours)
	{
		//line 97 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long x = ((long) (( ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) ) % ((long) (60) ) )) );
		//line 97 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
		{
			//line 97 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 97 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		int tmp = ((int) (((long) (x) )) );
		//line 97 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long x1 = ((long) (( ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) ) % ((long) (60) ) )) );
		//line 97 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		if (( ((boolean) (( ((long) (x1) ) < -2147483648 )) ) || ((boolean) (( ((long) (x1) ) > 2147483647 )) ) )) 
		{
			//line 97 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 97 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		int tmp1 = ((int) (((long) (x1) )) );
		//line 97 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long x2 = ((long) (( ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) )) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.thousandI64) ) )) );
		//line 97 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		if (( ((boolean) (( ((long) (x2) ) < -2147483648 )) ) || ((boolean) (( ((long) (x2) ) > 2147483647 )) ) )) 
		{
			//line 97 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 97 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return thx._Time.Time_Impl_.create(hours, tmp, tmp1, ((int) (((long) (x2) )) ));
	}
	
	
	public static long withMinutes(long this1, int minutes)
	{
		//line 100 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long x = ((long) (( ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ) % ((long) (24) ) )) );
		//line 100 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
		{
			//line 100 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 100 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		int tmp = ((int) (((long) (x) )) );
		//line 100 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long x1 = ((long) (( ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) ) % ((long) (60) ) )) );
		//line 100 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		if (( ((boolean) (( ((long) (x1) ) < -2147483648 )) ) || ((boolean) (( ((long) (x1) ) > 2147483647 )) ) )) 
		{
			//line 100 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 100 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		int tmp1 = ((int) (((long) (x1) )) );
		//line 100 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long x2 = ((long) (( ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) )) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.thousandI64) ) )) );
		//line 100 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		if (( ((boolean) (( ((long) (x2) ) < -2147483648 )) ) || ((boolean) (( ((long) (x2) ) > 2147483647 )) ) )) 
		{
			//line 100 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 100 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return thx._Time.Time_Impl_.create(tmp, minutes, tmp1, ((int) (((long) (x2) )) ));
	}
	
	
	public static long withSeconds(long this1, int seconds)
	{
		//line 103 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long x = ((long) (( ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ) % ((long) (24) ) )) );
		//line 103 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
		{
			//line 103 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 103 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		int tmp = ((int) (((long) (x) )) );
		//line 103 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long x1 = ((long) (( ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) ) % ((long) (60) ) )) );
		//line 103 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		if (( ((boolean) (( ((long) (x1) ) < -2147483648 )) ) || ((boolean) (( ((long) (x1) ) > 2147483647 )) ) )) 
		{
			//line 103 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 103 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		int tmp1 = ((int) (((long) (x1) )) );
		//line 103 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long x2 = ((long) (( ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) )) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.thousandI64) ) )) );
		//line 103 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		if (( ((boolean) (( ((long) (x2) ) < -2147483648 )) ) || ((boolean) (( ((long) (x2) ) > 2147483647 )) ) )) 
		{
			//line 103 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 103 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return thx._Time.Time_Impl_.create(tmp, tmp1, seconds, ((int) (((long) (x2) )) ));
	}
	
	
	public static long withMilliseconds(long this1, int milliseconds)
	{
		//line 106 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long x = ((long) (( ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ) % ((long) (24) ) )) );
		//line 106 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
		{
			//line 106 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 106 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		int tmp = ((int) (((long) (x) )) );
		//line 106 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long x1 = ((long) (( ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) ) % ((long) (60) ) )) );
		//line 106 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		if (( ((boolean) (( ((long) (x1) ) < -2147483648 )) ) || ((boolean) (( ((long) (x1) ) > 2147483647 )) ) )) 
		{
			//line 106 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 106 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		int tmp1 = ((int) (((long) (x1) )) );
		//line 106 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long x2 = ((long) (( ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) ) % ((long) (60) ) )) );
		//line 106 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		if (( ((boolean) (( ((long) (x2) ) < -2147483648 )) ) || ((boolean) (( ((long) (x2) ) > 2147483647 )) ) )) 
		{
			//line 106 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 106 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return thx._Time.Time_Impl_.create(tmp, tmp1, ((int) (((long) (x2) )) ), milliseconds);
	}
	
	
	public static long negate(long this1)
	{
		//line 109 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ((long) (haxe._Int64.Int64_Impl_.neg(((long) (this1) ))) );
	}
	
	
	public static long add(long this1, long that)
	{
		//line 112 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long this2 = ((long) (( ((long) (this1) ) + ((long) (that) ) )) );
		//line 112 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ((long) (this2) );
	}
	
	
	public static long addTicks(long this1, long that)
	{
		//line 115 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long this2 = ((long) (( ((long) (this1) ) + ((long) (that) ) )) );
		//line 115 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ((long) (this2) );
	}
	
	
	public static long subtract(long this1, long that)
	{
		//line 118 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long this2 = ((long) (( ((long) (this1) ) - ((long) (that) ) )) );
		//line 118 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ((long) (this2) );
	}
	
	
	public static int compareTo(long this1, long that)
	{
		//line 121 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return thx.Int64s.compare(((long) (this1) ), ((long) (that) ));
	}
	
	
	public static boolean equalsTo(long this1, long that)
	{
		//line 124 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ( ((long) (this1) ) == ((long) (that) ) );
	}
	
	
	public static boolean equals(long self, long that)
	{
		//line 128 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ( ((long) (self) ) == ((long) (that) ) );
	}
	
	
	public static boolean notEqualsTo(long self, long that)
	{
		//line 132 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ( ((long) (self) ) != ((long) (that) ) );
	}
	
	
	public static boolean notEquals(long this1, long that)
	{
		//line 135 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ( ((long) (this1) ) != ((long) (that) ) );
	}
	
	
	public static boolean greaterThan(long self, long that)
	{
		//line 139 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long a = ((long) (self) );
		//line 139 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long b = ((long) (that) );
		//line 139 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ( (( (((boolean) (( ((long) (a) ) < ((long) (b) ) )) )) ? (-1) : (( (((boolean) (( ((long) (a) ) > ((long) (b) ) )) )) ? (1) : (0) )) )) > 0 );
	}
	
	
	public static boolean greater(long this1, long that)
	{
		//line 142 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long b = ((long) (that) );
		//line 142 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ( (( (((boolean) (( ((long) (this1) ) < ((long) (b) ) )) )) ? (-1) : (( (((boolean) (( ((long) (this1) ) > ((long) (b) ) )) )) ? (1) : (0) )) )) > 0 );
	}
	
	
	public static boolean greaterEqualsTo(long self, long that)
	{
		//line 146 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long a = ((long) (self) );
		//line 146 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long b = ((long) (that) );
		//line 146 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ( (( (((boolean) (( ((long) (a) ) < ((long) (b) ) )) )) ? (-1) : (( (((boolean) (( ((long) (a) ) > ((long) (b) ) )) )) ? (1) : (0) )) )) >= 0 );
	}
	
	
	public static boolean greaterEquals(long this1, long that)
	{
		//line 149 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long b = ((long) (that) );
		//line 149 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ( (( (((boolean) (( ((long) (this1) ) < ((long) (b) ) )) )) ? (-1) : (( (((boolean) (( ((long) (this1) ) > ((long) (b) ) )) )) ? (1) : (0) )) )) >= 0 );
	}
	
	
	public static boolean lessThan(long self, long that)
	{
		//line 153 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long a = ((long) (self) );
		//line 153 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long b = ((long) (that) );
		//line 153 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ( (( (((boolean) (( ((long) (a) ) < ((long) (b) ) )) )) ? (-1) : (( (((boolean) (( ((long) (a) ) > ((long) (b) ) )) )) ? (1) : (0) )) )) < 0 );
	}
	
	
	public static boolean less(long this1, long that)
	{
		//line 156 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long b = ((long) (that) );
		//line 156 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ( (( (((boolean) (( ((long) (this1) ) < ((long) (b) ) )) )) ? (-1) : (( (((boolean) (( ((long) (this1) ) > ((long) (b) ) )) )) ? (1) : (0) )) )) < 0 );
	}
	
	
	public static boolean lessEqualsTo(long self, long that)
	{
		//line 160 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long a = ((long) (self) );
		//line 160 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long b = ((long) (that) );
		//line 160 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ( (( (((boolean) (( ((long) (a) ) < ((long) (b) ) )) )) ? (-1) : (( (((boolean) (( ((long) (a) ) > ((long) (b) ) )) )) ? (1) : (0) )) )) <= 0 );
	}
	
	
	public static boolean lessEquals(long this1, long that)
	{
		//line 163 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long b = ((long) (that) );
		//line 163 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ( (( (((boolean) (( ((long) (this1) ) < ((long) (b) ) )) )) ? (-1) : (( (((boolean) (( ((long) (this1) ) > ((long) (b) ) )) )) ? (1) : (0) )) )) <= 0 );
	}
	
	
	public static long toDateTimeUtc(long this1)
	{
		//line 166 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ((long) (this1) );
	}
	
	
	public static java.lang.String toString(long this1)
	{
		//line 169 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long timeAbs = thx._Time.Time_Impl_.abs(this1);
		//line 170 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long x = ((long) (( ((long) (timeAbs) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
		//line 170 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
		{
			//line 170 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 169 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		int ticksInSecondAbs = ((int) (((long) (x) )) );
		//line 169 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		java.lang.String decimals = ( (( ticksInSecondAbs != 0 )) ? (( "." + thx.Strings.trimCharsRight(thx.Ints.lpad(ticksInSecondAbs, "0", 7), "0") )) : ("") );
		//line 173 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		java.lang.String tmp = ( (((boolean) (( ((long) (this1) ) < ((long) (0) ) )) )) ? ("-") : ("") );
		//line 174 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		java.lang.String tmp1 = ( ( "" + (( "" + haxe.root.Std.string(((long) (( ((long) (timeAbs) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) )) )) ) + ":" );
		//line 174 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long x1 = ((long) (( ((long) (( ((long) (timeAbs) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) ) % ((long) (60) ) )) );
		//line 174 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		if (( ((boolean) (( ((long) (x1) ) < -2147483648 )) ) || ((boolean) (( ((long) (x1) ) > 2147483647 )) ) )) 
		{
			//line 174 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 174 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		java.lang.String tmp2 = ( ( tmp1 + thx.Ints.lpad(((int) (((long) (x1) )) ), "0", 2) ) + ":" );
		//line 174 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long x2 = ((long) (( ((long) (( ((long) (timeAbs) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) ) % ((long) (60) ) )) );
		//line 174 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		if (( ((boolean) (( ((long) (x2) ) < -2147483648 )) ) || ((boolean) (( ((long) (x2) ) > 2147483647 )) ) )) 
		{
			//line 174 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 173 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ( ( tmp + (( tmp2 + thx.Ints.lpad(((int) (((long) (x2) )) ), "0", 2) )) ) + decimals );
	}
	
	
	public static java.lang.String toGmtString(long this1)
	{
		//line 179 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long x = ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) );
		//line 179 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
		{
			//line 179 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 179 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		java.lang.String h = thx.Ints.lpad(((int) (((long) (x) )) ), "0", 2);
		//line 180 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		if (((boolean) (( ((long) (this1) ) >= ((long) (0) ) )) )) 
		{
			//line 181 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			h = ( "+" + h );
		}
		
		//line 182 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		java.lang.String tmp = ( ( "" + h ) + ":" );
		//line 182 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long x1 = ((long) (( ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) ) % ((long) (60) ) )) );
		//line 182 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		if (( ((boolean) (( ((long) (x1) ) < -2147483648 )) ) || ((boolean) (( ((long) (x1) ) > 2147483647 )) ) )) 
		{
			//line 182 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 182 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ( tmp + thx.Ints.lpad(((int) (((long) (x1) )) ), "0", 2) );
	}
	
	
	public static long get_ticks(long this1)
	{
		//line 186 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return this1;
	}
	
	
	public static int get_days(long this1)
	{
		//line 189 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long x = ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
		//line 189 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
		{
			//line 189 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 189 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ((int) (((long) (x) )) );
	}
	
	
	public static int get_hours(long this1)
	{
		//line 192 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long x = ((long) (( ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ) % ((long) (24) ) )) );
		//line 192 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
		{
			//line 192 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 192 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ((int) (((long) (x) )) );
	}
	
	
	public static int get_minutes(long this1)
	{
		//line 195 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long x = ((long) (( ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) ) % ((long) (60) ) )) );
		//line 195 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
		{
			//line 195 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 195 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ((int) (((long) (x) )) );
	}
	
	
	public static int get_seconds(long this1)
	{
		//line 198 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long x = ((long) (( ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) ) % ((long) (60) ) )) );
		//line 198 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
		{
			//line 198 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 198 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ((int) (((long) (x) )) );
	}
	
	
	public static int get_milliseconds(long this1)
	{
		//line 201 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long x = ((long) (( ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) )) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.thousandI64) ) )) );
		//line 201 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
		{
			//line 201 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 201 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ((int) (((long) (x) )) );
	}
	
	
	public static int get_microseconds(long this1)
	{
		//line 204 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long x = ((long) (( ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMicrosecondI64) ) )) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.tenThousandI64) ) )) );
		//line 204 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
		{
			//line 204 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 204 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ((int) (((long) (x) )) );
	}
	
	
	public static int get_ticksInSecond(long this1)
	{
		//line 207 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		long x = ((long) (( ((long) (this1) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
		//line 207 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
		{
			//line 207 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 207 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ((int) (((long) (x) )) );
	}
	
	
	public static long get_totalDays(long this1)
	{
		//line 210 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
	}
	
	
	public static long get_totalHours(long this1)
	{
		//line 213 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) );
	}
	
	
	public static long get_totalMinutes(long this1)
	{
		//line 216 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) );
	}
	
	
	public static long get_totalSeconds(long this1)
	{
		//line 219 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
	}
	
	
	public static long get_totalMilliseconds(long this1)
	{
		//line 222 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) )) );
	}
	
	
	public static long get_totalMicroseconds(long this1)
	{
		//line 225 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMicrosecondI64) ) )) );
	}
	
	
	public static boolean get_isNegative(long this1)
	{
		//line 228 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Time.hx"
		return ((boolean) (( ((long) (this1) ) < ((long) (0) ) )) );
	}
	
	
}


