// Generated by Haxe 3.3.0
package thx;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestStrings extends haxe.lang.HxObject
{
	public TestStrings(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestStrings()
	{
		//line 13 "/shared/core/thx/TestStrings.hx"
		thx.TestStrings.__hx_ctor_thx_TestStrings(this);
	}
	
	
	public static void __hx_ctor_thx_TestStrings(thx.TestStrings __temp_me204)
	{
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 12 "/shared/core/thx/TestStrings.hx"
		return new thx.TestStrings(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 12 "/shared/core/thx/TestStrings.hx"
		return new thx.TestStrings();
	}
	
	
	public void testLowerUpperCaseFirst()
	{
		//line 16 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals("aBC", thx.Strings.lowerCaseFirst("ABC"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testLowerUpperCaseFirst"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (16) )) )}));
		//line 17 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals("Abc", thx.Strings.upperCaseFirst("abc"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testLowerUpperCaseFirst"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (17) )) )}));
	}
	
	
	public void testContains()
	{
		//line 21 "/shared/core/thx/TestStrings.hx"
		utest.Assert.isTrue(( haxe.lang.StringExt.indexOf("test", "", null) >= 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testContains"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (21) )) )}));
		//line 22 "/shared/core/thx/TestStrings.hx"
		utest.Assert.isTrue(( haxe.lang.StringExt.indexOf("test", "t", null) >= 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testContains"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (22) )) )}));
		//line 23 "/shared/core/thx/TestStrings.hx"
		utest.Assert.isTrue(( haxe.lang.StringExt.indexOf("test", "te", null) >= 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testContains"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (23) )) )}));
		//line 24 "/shared/core/thx/TestStrings.hx"
		utest.Assert.isTrue(( haxe.lang.StringExt.indexOf("test", "tes", null) >= 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testContains"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (24) )) )}));
		//line 25 "/shared/core/thx/TestStrings.hx"
		utest.Assert.isTrue(( haxe.lang.StringExt.indexOf("test", "test", null) >= 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testContains"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (25) )) )}));
		//line 26 "/shared/core/thx/TestStrings.hx"
		utest.Assert.isTrue(( haxe.lang.StringExt.indexOf("one two three", "one", null) >= 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testContains"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (26) )) )}));
		//line 27 "/shared/core/thx/TestStrings.hx"
		utest.Assert.isTrue(( haxe.lang.StringExt.indexOf("one two three", "two", null) >= 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testContains"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (27) )) )}));
		//line 28 "/shared/core/thx/TestStrings.hx"
		utest.Assert.isTrue(( haxe.lang.StringExt.indexOf("one two three", "three", null) >= 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testContains"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (28) )) )}));
		//line 29 "/shared/core/thx/TestStrings.hx"
		utest.Assert.isFalse(( haxe.lang.StringExt.indexOf("test", "test ", null) >= 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testContains"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (29) )) )}));
		//line 30 "/shared/core/thx/TestStrings.hx"
		utest.Assert.isFalse(( haxe.lang.StringExt.indexOf("test", " test", null) >= 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testContains"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (30) )) )}));
		//line 31 "/shared/core/thx/TestStrings.hx"
		utest.Assert.isFalse(( haxe.lang.StringExt.indexOf("test", "tes ", null) >= 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testContains"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (31) )) )}));
	}
	
	
	public void testCount()
	{
		//line 35 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals(3, thx.Strings.count("one two three four five six seven eight nine ten", "o"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testCount"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (35) )) )}));
		//line 36 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals(2, thx.Strings.count("one two three four five six seven eight nine ten", "en"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testCount"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (36) )) )}));
		//line 37 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals(3, thx.Strings.count("one two three four five six seven eight nine ten", " t"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testCount"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (37) )) )}));
		//line 38 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals(2, thx.Strings.count("one two three four five six seven eight nine ten", "ve"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testCount"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (38) )) )}));
		//line 39 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals(0, thx.Strings.count("xxxxxx", "y"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testCount"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (39) )) )}));
		//line 40 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals(6, thx.Strings.count("xxxxxx", "x"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testCount"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (40) )) )}));
		//line 41 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals(3, thx.Strings.count("xxxxxx", "xx"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testCount"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (41) )) )}));
		//line 42 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals(2, thx.Strings.count("xxxxxx", "xxx"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testCount"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (42) )) )}));
		//line 43 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals(1, thx.Strings.count("xxxxxx", "xxxx"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testCount"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (43) )) )}));
		//line 44 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals(0, thx.Strings.count("x", "xx"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testCount"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (44) )) )}));
	}
	
	
	public void testContainsAny()
	{
		//line 48 "/shared/core/thx/TestStrings.hx"
		utest.Assert.isTrue(((boolean) (thx.Arrays.any(((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{"t", "x", "y"})) ), ((haxe.lang.Function) (( (( thx.TestStrings_testContainsAny_48__Fun.__hx_current != null )) ? (thx.TestStrings_testContainsAny_48__Fun.__hx_current) : (thx.TestStrings_testContainsAny_48__Fun.__hx_current = ((thx.TestStrings_testContainsAny_48__Fun) (new thx.TestStrings_testContainsAny_48__Fun()) )) )) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testContainsAny"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (48) )) )}));
		//line 49 "/shared/core/thx/TestStrings.hx"
		utest.Assert.isTrue(((boolean) (thx.Arrays.any(((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{"e", "x", "y"})) ), ((haxe.lang.Function) (( (( thx.TestStrings_testContainsAny_49__Fun.__hx_current != null )) ? (thx.TestStrings_testContainsAny_49__Fun.__hx_current) : (thx.TestStrings_testContainsAny_49__Fun.__hx_current = ((thx.TestStrings_testContainsAny_49__Fun) (new thx.TestStrings_testContainsAny_49__Fun()) )) )) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testContainsAny"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (49) )) )}));
		//line 50 "/shared/core/thx/TestStrings.hx"
		utest.Assert.isTrue(((boolean) (thx.Arrays.any(((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{"s", "x", "y"})) ), ((haxe.lang.Function) (( (( thx.TestStrings_testContainsAny_50__Fun.__hx_current != null )) ? (thx.TestStrings_testContainsAny_50__Fun.__hx_current) : (thx.TestStrings_testContainsAny_50__Fun.__hx_current = ((thx.TestStrings_testContainsAny_50__Fun) (new thx.TestStrings_testContainsAny_50__Fun()) )) )) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testContainsAny"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (50) )) )}));
		//line 51 "/shared/core/thx/TestStrings.hx"
		utest.Assert.isTrue(((boolean) (thx.Arrays.any(((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{"x", "t", "y"})) ), ((haxe.lang.Function) (( (( thx.TestStrings_testContainsAny_51__Fun.__hx_current != null )) ? (thx.TestStrings_testContainsAny_51__Fun.__hx_current) : (thx.TestStrings_testContainsAny_51__Fun.__hx_current = ((thx.TestStrings_testContainsAny_51__Fun) (new thx.TestStrings_testContainsAny_51__Fun()) )) )) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testContainsAny"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (51) )) )}));
		//line 52 "/shared/core/thx/TestStrings.hx"
		utest.Assert.isTrue(((boolean) (thx.Arrays.any(((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{"x", "e", "y"})) ), ((haxe.lang.Function) (( (( thx.TestStrings_testContainsAny_52__Fun.__hx_current != null )) ? (thx.TestStrings_testContainsAny_52__Fun.__hx_current) : (thx.TestStrings_testContainsAny_52__Fun.__hx_current = ((thx.TestStrings_testContainsAny_52__Fun) (new thx.TestStrings_testContainsAny_52__Fun()) )) )) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testContainsAny"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (52) )) )}));
		//line 53 "/shared/core/thx/TestStrings.hx"
		utest.Assert.isTrue(((boolean) (thx.Arrays.any(((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{"x", "s", "y"})) ), ((haxe.lang.Function) (( (( thx.TestStrings_testContainsAny_53__Fun.__hx_current != null )) ? (thx.TestStrings_testContainsAny_53__Fun.__hx_current) : (thx.TestStrings_testContainsAny_53__Fun.__hx_current = ((thx.TestStrings_testContainsAny_53__Fun) (new thx.TestStrings_testContainsAny_53__Fun()) )) )) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testContainsAny"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (53) )) )}));
		//line 54 "/shared/core/thx/TestStrings.hx"
		utest.Assert.isTrue(((boolean) (thx.Arrays.any(((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{"x", "y", "t"})) ), ((haxe.lang.Function) (( (( thx.TestStrings_testContainsAny_54__Fun.__hx_current != null )) ? (thx.TestStrings_testContainsAny_54__Fun.__hx_current) : (thx.TestStrings_testContainsAny_54__Fun.__hx_current = ((thx.TestStrings_testContainsAny_54__Fun) (new thx.TestStrings_testContainsAny_54__Fun()) )) )) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testContainsAny"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (54) )) )}));
		//line 55 "/shared/core/thx/TestStrings.hx"
		utest.Assert.isTrue(((boolean) (thx.Arrays.any(((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{"x", "y", "e"})) ), ((haxe.lang.Function) (( (( thx.TestStrings_testContainsAny_55__Fun.__hx_current != null )) ? (thx.TestStrings_testContainsAny_55__Fun.__hx_current) : (thx.TestStrings_testContainsAny_55__Fun.__hx_current = ((thx.TestStrings_testContainsAny_55__Fun) (new thx.TestStrings_testContainsAny_55__Fun()) )) )) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testContainsAny"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (55) )) )}));
		//line 56 "/shared/core/thx/TestStrings.hx"
		utest.Assert.isTrue(((boolean) (thx.Arrays.any(((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{"x", "y", "s"})) ), ((haxe.lang.Function) (( (( thx.TestStrings_testContainsAny_56__Fun.__hx_current != null )) ? (thx.TestStrings_testContainsAny_56__Fun.__hx_current) : (thx.TestStrings_testContainsAny_56__Fun.__hx_current = ((thx.TestStrings_testContainsAny_56__Fun) (new thx.TestStrings_testContainsAny_56__Fun()) )) )) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testContainsAny"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (56) )) )}));
		//line 57 "/shared/core/thx/TestStrings.hx"
		utest.Assert.isTrue(((boolean) (thx.Arrays.any(((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{"zero", "one", "two"})) ), ((haxe.lang.Function) (( (( thx.TestStrings_testContainsAny_57__Fun.__hx_current != null )) ? (thx.TestStrings_testContainsAny_57__Fun.__hx_current) : (thx.TestStrings_testContainsAny_57__Fun.__hx_current = ((thx.TestStrings_testContainsAny_57__Fun) (new thx.TestStrings_testContainsAny_57__Fun()) )) )) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testContainsAny"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (57) )) )}));
		//line 58 "/shared/core/thx/TestStrings.hx"
		utest.Assert.isTrue(((boolean) (thx.Arrays.any(((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{"one", "two", "three"})) ), ((haxe.lang.Function) (( (( thx.TestStrings_testContainsAny_58__Fun.__hx_current != null )) ? (thx.TestStrings_testContainsAny_58__Fun.__hx_current) : (thx.TestStrings_testContainsAny_58__Fun.__hx_current = ((thx.TestStrings_testContainsAny_58__Fun) (new thx.TestStrings_testContainsAny_58__Fun()) )) )) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testContainsAny"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (58) )) )}));
		//line 59 "/shared/core/thx/TestStrings.hx"
		utest.Assert.isTrue(((boolean) (thx.Arrays.any(((haxe.root.Array<java.lang.String>) (new haxe.root.Array<java.lang.String>(new java.lang.String[]{"one two", "x", "three"})) ), ((haxe.lang.Function) (( (( thx.TestStrings_testContainsAny_59__Fun.__hx_current != null )) ? (thx.TestStrings_testContainsAny_59__Fun.__hx_current) : (thx.TestStrings_testContainsAny_59__Fun.__hx_current = ((thx.TestStrings_testContainsAny_59__Fun) (new thx.TestStrings_testContainsAny_59__Fun()) )) )) ))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testContainsAny"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (59) )) )}));
	}
	
	
	public void testHashCode()
	{
		//line 63 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals(97, thx.Strings.hashCode("a"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testHashCode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (63) )) )}));
		//line 64 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals(96354, thx.Strings.hashCode("abc"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testHashCode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (64) )) )}));
		//line 65 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals(898829415, thx.Strings.hashCode("abcdefghijklm"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testHashCode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (65) )) )}));
		//line 66 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals(410520826, thx.Strings.hashCode("abcdefghijklmabcdefghijklmabcdefghijklmabcdefghijklmabcdefghijklm!!!"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testHashCode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (66) )) )}));
	}
	
	
	public void testUcwordsws()
	{
		//line 70 "/shared/core/thx/TestStrings.hx"
		haxe.root.Array<java.lang.Object> tests = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{"Test", "test"}, new java.lang.String[]{}, new double[]{}), new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{"Test Test", "test test"}, new java.lang.String[]{}, new double[]{}), new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{" Test Test  Test ", " test test  test "}, new java.lang.String[]{}, new double[]{}), new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{"Test\nTest", "test\ntest"}, new java.lang.String[]{}, new double[]{}), new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{"Test\tTest", "test\ttest"}, new java.lang.String[]{}, new double[]{})});
		//line 77 "/shared/core/thx/TestStrings.hx"
		{
			//line 77 "/shared/core/thx/TestStrings.hx"
			int _g = 0;
			//line 77 "/shared/core/thx/TestStrings.hx"
			while (( _g < tests.length ))
			{
				//line 77 "/shared/core/thx/TestStrings.hx"
				java.lang.Object item = tests.__get(_g);
				//line 77 "/shared/core/thx/TestStrings.hx"
				 ++ _g;
				//line 78 "/shared/core/thx/TestStrings.hx"
				utest.Assert.equals(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(item, "expected", true)), thx.Strings.capitalizeWords(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(item, "test", true)), true), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testUcwordsws"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (78) )) )}));
			}
			
		}
		
	}
	
	
	public void testDifferAt()
	{
		//line 82 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals(3, thx.Strings.diffAt("abcdef", "abc123"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testDifferAt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (82) )) )}));
		//line 83 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals(0, thx.Strings.diffAt("", "abc123"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testDifferAt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (83) )) )}));
		//line 84 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals(1, thx.Strings.diffAt("a", "abc123"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testDifferAt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (84) )) )}));
		//line 85 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals(0, thx.Strings.diffAt("abc123", ""), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testDifferAt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (85) )) )}));
		//line 86 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals(1, thx.Strings.diffAt("abc123", "a"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testDifferAt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (86) )) )}));
	}
	
	
	public void testEllipsis()
	{
		//line 90 "/shared/core/thx/TestStrings.hx"
		haxe.root.Array<java.lang.Object> tests = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "len", "symbol"}, new java.lang.Object[]{"abcdefghijkl", null, null}, new java.lang.String[]{}, new double[]{}), new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "symbol"}, new java.lang.Object[]{"abcdefghijkl", null}, new java.lang.String[]{"len"}, new double[]{((double) (((double) (100) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "symbol"}, new java.lang.Object[]{"abcd\u2026", null}, new java.lang.String[]{"len"}, new double[]{((double) (((double) (5) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "symbol"}, new java.lang.Object[]{"a ...", " ..."}, new java.lang.String[]{"len"}, new double[]{((double) (((double) (5) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "symbol"}, new java.lang.Object[]{"..", " ..."}, new java.lang.String[]{"len"}, new double[]{((double) (((double) (2) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "symbol"}, new java.lang.Object[]{"abcdef ...", " ..."}, new java.lang.String[]{"len"}, new double[]{((double) (((double) (10) )) )})});
		//line 99 "/shared/core/thx/TestStrings.hx"
		{
			//line 99 "/shared/core/thx/TestStrings.hx"
			int _g = 0;
			//line 99 "/shared/core/thx/TestStrings.hx"
			while (( _g < tests.length ))
			{
				//line 99 "/shared/core/thx/TestStrings.hx"
				java.lang.Object item = tests.__get(_g);
				//line 99 "/shared/core/thx/TestStrings.hx"
				 ++ _g;
				//line 100 "/shared/core/thx/TestStrings.hx"
				utest.Assert.equals(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(item, "expected", true)), thx.Strings.ellipsis("abcdefghijkl", haxe.lang.Runtime.getField(item, "len", true), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(item, "symbol", true))), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testEllipsis"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (100) )) )}));
			}
			
		}
		
	}
	
	
	public void testEllipsisMiddle()
	{
		//line 104 "/shared/core/thx/TestStrings.hx"
		haxe.root.Array<java.lang.Object> tests = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "len", "symbol"}, new java.lang.Object[]{"abcdefghijkl", null, null}, new java.lang.String[]{}, new double[]{}), new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "symbol"}, new java.lang.Object[]{"abcdefghijkl", null}, new java.lang.String[]{"len"}, new double[]{((double) (((double) (100) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "symbol"}, new java.lang.Object[]{"ab\u2026kl", null}, new java.lang.String[]{"len"}, new double[]{((double) (((double) (5) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "symbol"}, new java.lang.Object[]{"a ...", " ..."}, new java.lang.String[]{"len"}, new double[]{((double) (((double) (5) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "symbol"}, new java.lang.Object[]{"..", " ..."}, new java.lang.String[]{"len"}, new double[]{((double) (((double) (2) )) )}), new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "symbol"}, new java.lang.Object[]{"abc ...jkl", " ..."}, new java.lang.String[]{"len"}, new double[]{((double) (((double) (10) )) )})});
		//line 113 "/shared/core/thx/TestStrings.hx"
		{
			//line 113 "/shared/core/thx/TestStrings.hx"
			int _g = 0;
			//line 113 "/shared/core/thx/TestStrings.hx"
			while (( _g < tests.length ))
			{
				//line 113 "/shared/core/thx/TestStrings.hx"
				java.lang.Object item = tests.__get(_g);
				//line 113 "/shared/core/thx/TestStrings.hx"
				 ++ _g;
				//line 114 "/shared/core/thx/TestStrings.hx"
				utest.Assert.equals(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(item, "expected", true)), thx.Strings.ellipsisMiddle("abcdefghijkl", haxe.lang.Runtime.getField(item, "len", true), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(item, "symbol", true))), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testEllipsisMiddle"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (114) )) )}));
			}
			
		}
		
	}
	
	
	public void testUcwords()
	{
		//line 118 "/shared/core/thx/TestStrings.hx"
		haxe.root.Array<java.lang.Object> tests = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{"Test", "test"}, new java.lang.String[]{}, new double[]{}), new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{"Test Test", "test test"}, new java.lang.String[]{}, new double[]{}), new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{" Test-Test:Test_Test : Test ", " test-test:test_test : test "}, new java.lang.String[]{}, new double[]{}), new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{"Test\nTest", "test\ntest"}, new java.lang.String[]{}, new double[]{}), new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{"Test\tTest", "test\ttest"}, new java.lang.String[]{}, new double[]{})});
		//line 125 "/shared/core/thx/TestStrings.hx"
		{
			//line 125 "/shared/core/thx/TestStrings.hx"
			int _g = 0;
			//line 125 "/shared/core/thx/TestStrings.hx"
			while (( _g < tests.length ))
			{
				//line 125 "/shared/core/thx/TestStrings.hx"
				java.lang.Object item = tests.__get(_g);
				//line 125 "/shared/core/thx/TestStrings.hx"
				 ++ _g;
				//line 126 "/shared/core/thx/TestStrings.hx"
				utest.Assert.equals(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(item, "expected", true)), thx.Strings.capitalizeWords(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(item, "test", true)), null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testUcwords"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (126) )) )}));
			}
			
		}
		
	}
	
	
	public void testAlphaNum()
	{
		//line 130 "/shared/core/thx/TestStrings.hx"
		haxe.root.Array<java.lang.Object> tests = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{true, "a"}, new java.lang.String[]{}, new double[]{}), new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{true, "1a"}, new java.lang.String[]{}, new double[]{}), new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{false, " a"}, new java.lang.String[]{}, new double[]{}), new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{false, " "}, new java.lang.String[]{}, new double[]{}), new haxe.lang.DynamicObject(new java.lang.String[]{"expected", "test"}, new java.lang.Object[]{false, ""}, new java.lang.String[]{}, new double[]{})});
		//line 137 "/shared/core/thx/TestStrings.hx"
		{
			//line 137 "/shared/core/thx/TestStrings.hx"
			int _g = 0;
			//line 137 "/shared/core/thx/TestStrings.hx"
			while (( _g < tests.length ))
			{
				//line 137 "/shared/core/thx/TestStrings.hx"
				java.lang.Object item = tests.__get(_g);
				//line 137 "/shared/core/thx/TestStrings.hx"
				 ++ _g;
				//line 138 "/shared/core/thx/TestStrings.hx"
				utest.Assert.equals(haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(item, "expected", true)), thx.Strings.ALPHANUM.match(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(item, "test", true))), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testAlphaNum"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (138) )) )}));
			}
			
		}
		
	}
	
	
	public void testHumanize()
	{
		//line 142 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals("hello world", thx.Strings.humanize("helloWorld"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testHumanize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (142) )) )}));
		//line 143 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals("my long string", thx.Strings.humanize("my_long_string"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testHumanize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (143) )) )}));
		//line 144 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals("ignore many", thx.Strings.humanize("ignoreMANY"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testHumanize"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (144) )) )}));
	}
	
	
	public void testWrapColumn()
	{
		//line 150 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals("Lorem ipsum dolor\nsit amet,\nconsectetur\nadipisicing elit,\nsed do eiusmod\ntempor incididunt ut\nlabore et dolore\nmagna aliqua. Ut\nenim ad minim\nveniam, quis nostrud\nexercitation ullamco\nlaboris nisi ut\naliquip ex ea\ncommodo consequat.", thx.Strings.wrapColumns("Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.", 20, null, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testWrapColumn"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (150) )) )}));
		//line 167 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals("    Lorem ipsum\n    dolor sit amet,\n    consectetur\n    adipisicing\n    elit, sed do\n    eiusmod tempor\n    incididunt ut\n    labore et dolore\n    magna aliqua. Ut\n    enim ad minim\n    veniam, quis\n    nostrud\n    exercitation\n    ullamco laboris\n    nisi ut aliquip\n    ex ea commodo\n    consequat.", thx.Strings.wrapColumns("Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.", 20, "    ", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testWrapColumn"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (167) )) )}));
	}
	
	
	public void testWrapColumnPreserveNewLines()
	{
		//line 191 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals("Lorem ipsum dolor\nsit amet,\n\nconsectetur\nadipisicing elit", thx.Strings.wrapColumns("Lorem ipsum dolor sit amet,\n\nconsectetur adipisicing elit", 18, null, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testWrapColumnPreserveNewLines"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (191) )) )}));
	}
	
	
	public void testWrapColumnLong()
	{
		//line 198 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals("aaaaaaaaaa\naaaa\naaa aa", thx.Strings.wrapColumns("aaaaaaaaaa aaaa aaa aa", 6, null, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testWrapColumnLong"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (198) )) )}));
	}
	
	
	public void testRepeat()
	{
		//line 205 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals("XyXyXy", thx.Strings.repeat("Xy", 3), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testRepeat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (205) )) )}));
	}
	
	
	public void testUpTo()
	{
		//line 209 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals("abcdef", thx.Strings.upTo("abcdef", "x"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testUpTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (209) )) )}));
		//line 210 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals("ab", thx.Strings.upTo("abcdef", "cd"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testUpTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (210) )) )}));
	}
	
	
	public void testFrom()
	{
		//line 214 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals("", thx.Strings.from("abcdef", "x"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testFrom"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (214) )) )}));
		//line 215 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals("cdef", thx.Strings.from("abcdef", "cd"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testFrom"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (215) )) )}));
	}
	
	
	public void testAfter()
	{
		//line 219 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals("", thx.Strings.after("abcdef", "x"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testAfter"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (219) )) )}));
		//line 220 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals("ef", thx.Strings.after("abcdef", "cd"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testAfter"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (220) )) )}));
	}
	
	
	public void testStripTags()
	{
		//line 224 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals("a code; x", thx.Strings.stripTags("a<br/> <script src=\"aaa\">code;</script> x"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testStripTags"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (224) )) )}));
	}
	
	
	public void testLtrim()
	{
		//line 228 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals("abcde", thx.Strings.trimCharsLeft("abcde", "x"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testLtrim"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (228) )) )}));
		//line 229 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals("de", thx.Strings.trimCharsLeft("abcde", "cba"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testLtrim"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (229) )) )}));
		//line 230 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals("abcde", thx.Strings.trimCharsLeft("abcde", "b"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testLtrim"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (230) )) )}));
		//line 232 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals("", thx.Strings.trimCharsLeft("/", "/"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testLtrim"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (232) )) )}));
	}
	
	
	public void testRtrim()
	{
		//line 236 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals("abcde", thx.Strings.trimCharsRight("abcde", "x"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testRtrim"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (236) )) )}));
		//line 237 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals("ab", thx.Strings.trimCharsRight("abcde", "ced"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testRtrim"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (237) )) )}));
		//line 238 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals("abcde", thx.Strings.trimCharsRight("abcde", "d"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testRtrim"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (238) )) )}));
		//line 240 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals("", thx.Strings.trimCharsRight("/", "/"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testRtrim"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (240) )) )}));
	}
	
	
	public void testTrim()
	{
		//line 244 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals("abcde", thx.Strings.trimCharsRight(thx.Strings.trimCharsLeft("abcde", "x"), "x"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testTrim"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (244) )) )}));
		//line 245 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals("cd", thx.Strings.trimCharsRight(thx.Strings.trimCharsLeft("abcde", "abe"), "abe"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testTrim"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (245) )) )}));
		//line 246 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals("abcde", thx.Strings.trimCharsRight(thx.Strings.trimCharsLeft("abcde", "bd"), "bd"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testTrim"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (246) )) )}));
		//line 248 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals("", thx.Strings.trimCharsRight(thx.Strings.trimCharsLeft("/", "/"), "/"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testTrim"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (248) )) )}));
	}
	
	
	public void testToArray()
	{
		//line 252 "/shared/core/thx/TestStrings.hx"
		haxe.root.Array<java.lang.String> e = new haxe.root.Array<java.lang.String>(new java.lang.String[]{"a", "\u263a", "b", "\u263a", "\u263a", "c", "\u263a", "\u263a", "\u263a"});
		//line 254 "/shared/core/thx/TestStrings.hx"
		utest.Assert.same(e, haxe.lang.StringExt.split("a\u263ab\u263a\u263ac\u263a\u263a\u263a", ""), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testToArray"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (254) )) )}));
	}
	
	
	public void testToLines()
	{
		//line 261 "/shared/core/thx/TestStrings.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{"Split", "to", "lines"}), thx.Strings.SPLIT_LINES.split("Split\nto\nlines"), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testToLines"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (261) )) )}));
	}
	
	
	public void testReverse()
	{
		//line 267 "/shared/core/thx/TestStrings.hx"
		utest.Assert.same("\u263a\u263a\u263ac\u263a\u263ab\u263aa", thx.Strings.reverse("a\u263ab\u263a\u263ac\u263a\u263a\u263a"), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testReverse"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (267) )) )}));
	}
	
	
	public void testOrder()
	{
		//line 271 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals(thx.OrderingImpl.EQ, ((thx.OrderingImpl) (thx._Ord.Ord_Impl_.order(((haxe.lang.Function) (thx.Strings.order) ), haxe.lang.Runtime.toString("companyId"), haxe.lang.Runtime.toString("companyId"))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testOrder"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (271) )) )}));
		//line 272 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals(thx.OrderingImpl.LT, ((thx.OrderingImpl) (thx._Ord.Ord_Impl_.order(((haxe.lang.Function) (thx.Strings.order) ), haxe.lang.Runtime.toString("companyIc"), haxe.lang.Runtime.toString("companyId"))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testOrder"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (272) )) )}));
		//line 273 "/shared/core/thx/TestStrings.hx"
		utest.Assert.equals(thx.OrderingImpl.GT, ((thx.OrderingImpl) (thx._Ord.Ord_Impl_.order(((haxe.lang.Function) (thx.Strings.order) ), haxe.lang.Runtime.toString("companyId"), haxe.lang.Runtime.toString("companyIc"))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestStrings", "TestStrings.hx", "testOrder"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (273) )) )}));
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 12 "/shared/core/thx/TestStrings.hx"
		{
			//line 12 "/shared/core/thx/TestStrings.hx"
			boolean __temp_executeDef1 = true;
			//line 12 "/shared/core/thx/TestStrings.hx"
			switch (field.hashCode())
			{
				case -1194959396:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testOrder")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testOrder")) );
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case -184505779:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testLowerUpperCaseFirst")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testLowerUpperCaseFirst")) );
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case 707247600:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testReverse")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testReverse")) );
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case 146894033:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testContains")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testContains")) );
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case -1565093806:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testToLines")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testToLines")) );
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case -1206114403:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testCount")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCount")) );
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case -1574980692:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testToArray")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testToArray")) );
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case -451471525:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testContainsAny")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testContainsAny")) );
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case -1146776620:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testTrim")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testTrim")) );
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case 862036685:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testHashCode")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testHashCode")) );
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case -1192115678:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testRtrim")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testRtrim")) );
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case 1915426949:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testUcwordsws")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testUcwordsws")) );
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case -1197656804:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testLtrim")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testLtrim")) );
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case 617813495:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testDifferAt")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testDifferAt")) );
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case 481705695:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testStripTags")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testStripTags")) );
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case 903042947:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testEllipsis")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testEllipsis")) );
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case -1208230806:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testAfter")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testAfter")) );
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case 618802936:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testEllipsisMiddle")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testEllipsisMiddle")) );
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case -1147193508:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testFrom")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFrom")) );
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case -981245975:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testUcwords")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testUcwords")) );
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case -1146749400:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testUpTo")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testUpTo")) );
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case -1660120070:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testAlphaNum")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testAlphaNum")) );
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case 1685203149:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testRepeat")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testRepeat")) );
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case 1255277497:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testHumanize")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testHumanize")) );
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case -243829746:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testWrapColumnLong")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testWrapColumnLong")) );
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case 1673380466:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testWrapColumn")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testWrapColumn")) );
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case 1995416125:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testWrapColumnPreserveNewLines")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testWrapColumnPreserveNewLines")) );
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
			}
			
			//line 12 "/shared/core/thx/TestStrings.hx"
			if (__temp_executeDef1) 
			{
				//line 12 "/shared/core/thx/TestStrings.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 12 "/shared/core/thx/TestStrings.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 12 "/shared/core/thx/TestStrings.hx"
		{
			//line 12 "/shared/core/thx/TestStrings.hx"
			boolean __temp_executeDef1 = true;
			//line 12 "/shared/core/thx/TestStrings.hx"
			switch (field.hashCode())
			{
				case -1194959396:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testOrder")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						this.testOrder();
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case -184505779:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testLowerUpperCaseFirst")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						this.testLowerUpperCaseFirst();
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case 707247600:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testReverse")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						this.testReverse();
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case 146894033:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testContains")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						this.testContains();
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case -1565093806:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testToLines")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						this.testToLines();
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case -1206114403:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testCount")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						this.testCount();
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case -1574980692:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testToArray")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						this.testToArray();
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case -451471525:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testContainsAny")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						this.testContainsAny();
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case -1146776620:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testTrim")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						this.testTrim();
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case 862036685:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testHashCode")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						this.testHashCode();
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case -1192115678:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testRtrim")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						this.testRtrim();
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case 1915426949:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testUcwordsws")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						this.testUcwordsws();
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case -1197656804:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testLtrim")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						this.testLtrim();
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case 617813495:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testDifferAt")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						this.testDifferAt();
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case 481705695:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testStripTags")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						this.testStripTags();
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case 903042947:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testEllipsis")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						this.testEllipsis();
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case -1208230806:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testAfter")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						this.testAfter();
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case 618802936:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testEllipsisMiddle")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						this.testEllipsisMiddle();
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case -1147193508:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testFrom")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						this.testFrom();
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case -981245975:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testUcwords")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						this.testUcwords();
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case -1146749400:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testUpTo")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						this.testUpTo();
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case -1660120070:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testAlphaNum")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						this.testAlphaNum();
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case 1685203149:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testRepeat")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						this.testRepeat();
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case 1255277497:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testHumanize")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						this.testHumanize();
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case -243829746:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testWrapColumnLong")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						this.testWrapColumnLong();
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case 1673380466:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testWrapColumn")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						this.testWrapColumn();
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
				case 1995416125:
				{
					//line 12 "/shared/core/thx/TestStrings.hx"
					if (field.equals("testWrapColumnPreserveNewLines")) 
					{
						//line 12 "/shared/core/thx/TestStrings.hx"
						__temp_executeDef1 = false;
						//line 12 "/shared/core/thx/TestStrings.hx"
						this.testWrapColumnPreserveNewLines();
					}
					
					//line 12 "/shared/core/thx/TestStrings.hx"
					break;
				}
				
				
			}
			
			//line 12 "/shared/core/thx/TestStrings.hx"
			if (__temp_executeDef1) 
			{
				//line 12 "/shared/core/thx/TestStrings.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 12 "/shared/core/thx/TestStrings.hx"
		return null;
	}
	
	
}


