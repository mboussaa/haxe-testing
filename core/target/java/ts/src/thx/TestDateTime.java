// Generated by Haxe 3.3.0
package thx;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestDateTime extends haxe.lang.HxObject
{
	public TestDateTime(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestDateTime()
	{
		//line 14 "/shared/core/thx/TestDateTime.hx"
		thx.TestDateTime.__hx_ctor_thx_TestDateTime(this);
	}
	
	
	public static void __hx_ctor_thx_TestDateTime(thx.TestDateTime __temp_me169)
	{
		//line 15 "/shared/core/thx/TestDateTime.hx"
		__temp_me169.offset = thx._Time.Time_Impl_.create(-6, 0, 0, 0);
		//line 16 "/shared/core/thx/TestDateTime.hx"
		long offset = __temp_me169.offset;
		//line 16 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this1 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.create(2015, 7, 26, 21, 40, 30, 0)) ), ((long) (offset) )});
		//line 16 "/shared/core/thx/TestDateTime.hx"
		long this2 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this1) ).__get(0));
		//line 16 "/shared/core/thx/TestDateTime.hx"
		long dateTime = thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (this2) ) - ((long) (offset) ) )) ));
		//line 16 "/shared/core/thx/TestDateTime.hx"
		long this3 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this1) ).__get(1));
		//line 16 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this4 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((long) (dateTime) ), ((long) (this3) )});
		//line 16 "/shared/core/thx/TestDateTime.hx"
		__temp_me169.date = ((haxe.root.Array<java.lang.Object>) (this4) );
		//line 17 "/shared/core/thx/TestDateTime.hx"
		long offset1 = __temp_me169.offset;
		//line 17 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this5 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.create(2015, 7, 27, 16, 40, 30, 0)) ), ((long) (offset1) )});
		//line 17 "/shared/core/thx/TestDateTime.hx"
		long this6 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this5) ).__get(0));
		//line 17 "/shared/core/thx/TestDateTime.hx"
		long dateTime1 = thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (this6) ) - ((long) (offset1) ) )) ));
		//line 17 "/shared/core/thx/TestDateTime.hx"
		long this7 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this5) ).__get(1));
		//line 17 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this8 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((long) (dateTime1) ), ((long) (this7) )});
		//line 17 "/shared/core/thx/TestDateTime.hx"
		__temp_me169.tomorrow = ((haxe.root.Array<java.lang.Object>) (this8) );
		//line 18 "/shared/core/thx/TestDateTime.hx"
		long offset2 = thx._Time.Time_Impl_.zero;
		//line 18 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this9 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.create(2015, 7, 27, 3, 40, 30, 0)) ), ((long) (offset2) )});
		//line 18 "/shared/core/thx/TestDateTime.hx"
		long this10 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this9) ).__get(0));
		//line 18 "/shared/core/thx/TestDateTime.hx"
		long dateTime2 = thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (this10) ) - ((long) (offset2) ) )) ));
		//line 18 "/shared/core/thx/TestDateTime.hx"
		long this11 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this9) ).__get(1));
		//line 18 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this12 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((long) (dateTime2) ), ((long) (this11) )});
		//line 18 "/shared/core/thx/TestDateTime.hx"
		__temp_me169.dateutc = ((haxe.root.Array<java.lang.Object>) (this12) );
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 8 "/shared/core/thx/TestDateTime.hx"
		return new thx.TestDateTime(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 8 "/shared/core/thx/TestDateTime.hx"
		return new thx.TestDateTime();
	}
	
	
	public long offset;
	
	public haxe.root.Array<java.lang.Object> date;
	
	public haxe.root.Array<java.lang.Object> tomorrow;
	
	public haxe.root.Array<java.lang.Object> dateutc;
	
	public void testCreate()
	{
		//line 22 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this1 = this.date;
		//line 22 "/shared/core/thx/TestDateTime.hx"
		long this2 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this1) ).__get(0));
		//line 22 "/shared/core/thx/TestDateTime.hx"
		long this3 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this1) ).__get(1));
		//line 22 "/shared/core/thx/TestDateTime.hx"
		int tmp = thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (this2) ) + ((long) (this3) ) )) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR);
		//line 22 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this4 = this.date;
		//line 22 "/shared/core/thx/TestDateTime.hx"
		long this5 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this4) ).__get(0));
		//line 22 "/shared/core/thx/TestDateTime.hx"
		long this6 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this4) ).__get(1));
		//line 22 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.equals(2015, tmp, ( ( "expected 2015 but got " + thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (this5) ) + ((long) (this6) ) )) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR) ) + " for year" ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testCreate"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (22) )) )}));
		//line 23 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this7 = this.date;
		//line 23 "/shared/core/thx/TestDateTime.hx"
		long this8 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this7) ).__get(0));
		//line 23 "/shared/core/thx/TestDateTime.hx"
		long this9 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this7) ).__get(1));
		//line 23 "/shared/core/thx/TestDateTime.hx"
		int tmp1 = thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (this8) ) + ((long) (this9) ) )) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH);
		//line 23 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this10 = this.date;
		//line 23 "/shared/core/thx/TestDateTime.hx"
		long this11 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this10) ).__get(0));
		//line 23 "/shared/core/thx/TestDateTime.hx"
		long this12 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this10) ).__get(1));
		//line 23 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.equals(7, tmp1, ( ( "expected 7 but got " + thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (this11) ) + ((long) (this12) ) )) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH) ) + " for month" ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testCreate"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (23) )) )}));
		//line 24 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this13 = this.date;
		//line 24 "/shared/core/thx/TestDateTime.hx"
		long this14 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this13) ).__get(0));
		//line 24 "/shared/core/thx/TestDateTime.hx"
		long this15 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this13) ).__get(1));
		//line 24 "/shared/core/thx/TestDateTime.hx"
		int tmp2 = thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (this14) ) + ((long) (this15) ) )) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY);
		//line 24 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this16 = this.date;
		//line 24 "/shared/core/thx/TestDateTime.hx"
		long this17 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this16) ).__get(0));
		//line 24 "/shared/core/thx/TestDateTime.hx"
		long this18 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this16) ).__get(1));
		//line 24 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.equals(26, tmp2, ( ( "expected 26 but got " + thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (this17) ) + ((long) (this18) ) )) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY) ) + " for day" ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testCreate"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (24) )) )}));
		//line 26 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this19 = this.date;
		//line 26 "/shared/core/thx/TestDateTime.hx"
		long this20 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this19) ).__get(0));
		//line 26 "/shared/core/thx/TestDateTime.hx"
		long this21 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this19) ).__get(1));
		//line 26 "/shared/core/thx/TestDateTime.hx"
		int tmp3 = thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(((long) (( ((long) (this20) ) + ((long) (this21) ) )) ));
		//line 26 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this22 = this.date;
		//line 26 "/shared/core/thx/TestDateTime.hx"
		long this23 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this22) ).__get(0));
		//line 26 "/shared/core/thx/TestDateTime.hx"
		long this24 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this22) ).__get(1));
		//line 26 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.equals(21, tmp3, ( ( "expected 21 but got " + thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(((long) (( ((long) (this23) ) + ((long) (this24) ) )) )) ) + " for hour" ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testCreate"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (26) )) )}));
		//line 27 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this25 = this.date;
		//line 27 "/shared/core/thx/TestDateTime.hx"
		long this26 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this25) ).__get(0));
		//line 27 "/shared/core/thx/TestDateTime.hx"
		long this27 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this25) ).__get(1));
		//line 27 "/shared/core/thx/TestDateTime.hx"
		int tmp4 = thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(((long) (( ((long) (this26) ) + ((long) (this27) ) )) ));
		//line 27 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this28 = this.date;
		//line 27 "/shared/core/thx/TestDateTime.hx"
		long this29 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this28) ).__get(0));
		//line 27 "/shared/core/thx/TestDateTime.hx"
		long this30 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this28) ).__get(1));
		//line 27 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.equals(40, tmp4, ( ( "expected 40 but got " + thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(((long) (( ((long) (this29) ) + ((long) (this30) ) )) )) ) + " for minute" ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testCreate"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (27) )) )}));
		//line 28 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this31 = this.date;
		//line 28 "/shared/core/thx/TestDateTime.hx"
		long this32 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this31) ).__get(0));
		//line 28 "/shared/core/thx/TestDateTime.hx"
		long this33 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this31) ).__get(1));
		//line 28 "/shared/core/thx/TestDateTime.hx"
		int tmp5 = thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(((long) (( ((long) (this32) ) + ((long) (this33) ) )) ));
		//line 28 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this34 = this.date;
		//line 28 "/shared/core/thx/TestDateTime.hx"
		long this35 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this34) ).__get(0));
		//line 28 "/shared/core/thx/TestDateTime.hx"
		long this36 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this34) ).__get(1));
		//line 28 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.equals(30, tmp5, ( ( "expected 30 but got " + thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(((long) (( ((long) (this35) ) + ((long) (this36) ) )) )) ) + " for second" ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testCreate"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (28) )) )}));
		//line 30 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this37 = this.date;
		//line 30 "/shared/core/thx/TestDateTime.hx"
		long this38 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this37) ).__get(0));
		//line 30 "/shared/core/thx/TestDateTime.hx"
		long this39 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this37) ).__get(1));
		//line 30 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.equals(((int) (0) ), thx._DateTimeUtc.DateTimeUtc_Impl_.get_dayOfWeek(((long) (( ((long) (this38) ) + ((long) (this39) ) )) )), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testCreate"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (30) )) )}));
		//line 32 "/shared/core/thx/TestDateTime.hx"
		long this40 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this.date) ).__get(1));
		//line 32 "/shared/core/thx/TestDateTime.hx"
		long x = ((long) (( ((long) (( ((long) (this40) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ) % ((long) (24) ) )) );
		//line 32 "/shared/core/thx/TestDateTime.hx"
		if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
		{
			//line 32 "/shared/core/thx/TestDateTime.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 32 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.equals(-6, ((int) (((long) (x) )) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testCreate"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (32) )) )}));
	}
	
	
	public void testEquals()
	{
		//line 36 "/shared/core/thx/TestDateTime.hx"
		long this1 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this.date) ).__get(0));
		//line 36 "/shared/core/thx/TestDateTime.hx"
		long this2 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this.date) ).__get(0));
		//line 36 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.isTrue(( ((long) (this1) ) == ((long) (this2) ) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (36) )) )}));
		//line 37 "/shared/core/thx/TestDateTime.hx"
		long this3 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this.date) ).__get(0));
		//line 37 "/shared/core/thx/TestDateTime.hx"
		long this4 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this.tomorrow) ).__get(0));
		//line 37 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.isTrue(( ((long) (this3) ) != ((long) (this4) ) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (37) )) )}));
		//line 38 "/shared/core/thx/TestDateTime.hx"
		long this5 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this.date) ).__get(0));
		//line 38 "/shared/core/thx/TestDateTime.hx"
		long this6 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this.dateutc) ).__get(0));
		//line 38 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.isTrue(( ((long) (this5) ) == ((long) (this6) ) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testEquals"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (38) )) )}));
	}
	
	
	public void testCompare()
	{
		//line 42 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.isFalse(( thx._DateTime.DateTime_Impl_.compareTo(this.date, this.date) > 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (42) )) )}));
		//line 43 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.isTrue(( thx._DateTime.DateTime_Impl_.compareTo(this.date, this.date) >= 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (43) )) )}));
		//line 44 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.isFalse(( thx._DateTime.DateTime_Impl_.compareTo(this.date, this.date) < 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (44) )) )}));
		//line 45 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.isTrue(( thx._DateTime.DateTime_Impl_.compareTo(this.date, this.date) <= 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (45) )) )}));
		//line 47 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.isFalse(( thx._DateTime.DateTime_Impl_.compareTo(this.date, this.tomorrow) > 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (47) )) )}));
		//line 48 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.isFalse(( thx._DateTime.DateTime_Impl_.compareTo(this.date, this.tomorrow) >= 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (48) )) )}));
		//line 49 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.isTrue(( thx._DateTime.DateTime_Impl_.compareTo(this.date, this.tomorrow) < 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (49) )) )}));
		//line 50 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.isTrue(( thx._DateTime.DateTime_Impl_.compareTo(this.date, this.tomorrow) <= 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (50) )) )}));
		//line 52 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.isTrue(( thx._DateTime.DateTime_Impl_.compareTo(this.tomorrow, this.date) > 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (52) )) )}));
		//line 53 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.isTrue(( thx._DateTime.DateTime_Impl_.compareTo(this.tomorrow, this.date) >= 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (53) )) )}));
		//line 54 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.isFalse(( thx._DateTime.DateTime_Impl_.compareTo(this.tomorrow, this.date) < 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (54) )) )}));
		//line 55 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.isFalse(( thx._DateTime.DateTime_Impl_.compareTo(this.tomorrow, this.date) <= 0 ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testCompare"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (55) )) )}));
	}
	
	
	public void testToString()
	{
		//line 59 "/shared/core/thx/TestDateTime.hx"
		java.lang.String d = thx._DateTime.DateTime_Impl_.toString(this.date);
		//line 60 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.equals("2015-07-26T21:40:30-06:00", d, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testToString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (60) )) )}));
	}
	
	
	public void testAdd()
	{
		//line 64 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this1 = this.date;
		//line 64 "/shared/core/thx/TestDateTime.hx"
		long this2 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this1) ).__get(0));
		//line 64 "/shared/core/thx/TestDateTime.hx"
		long dateTime = thx._DateTimeUtc.DateTimeUtc_Impl_.addMonths(((long) (this2) ), 24);
		//line 64 "/shared/core/thx/TestDateTime.hx"
		long this3 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this1) ).__get(1));
		//line 64 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this4 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((long) (dateTime) ), ((long) (this3) )});
		//line 64 "/shared/core/thx/TestDateTime.hx"
		long this5 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this4) ).__get(0));
		//line 64 "/shared/core/thx/TestDateTime.hx"
		long dateTime1 = thx._DateTimeUtc.DateTimeUtc_Impl_.addMonths(((long) (this5) ), 9);
		//line 64 "/shared/core/thx/TestDateTime.hx"
		long this6 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this4) ).__get(1));
		//line 64 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this7 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((long) (dateTime1) ), ((long) (this6) )});
		//line 64 "/shared/core/thx/TestDateTime.hx"
		long this8 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this7) ).__get(0));
		//line 64 "/shared/core/thx/TestDateTime.hx"
		long dateTime2 = thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(((long) (this8) ), ((double) (10) ), thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerDay);
		//line 64 "/shared/core/thx/TestDateTime.hx"
		long this9 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this7) ).__get(1));
		//line 64 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this10 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((long) (dateTime2) ), ((long) (this9) )});
		//line 64 "/shared/core/thx/TestDateTime.hx"
		long this11 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this10) ).__get(0));
		//line 64 "/shared/core/thx/TestDateTime.hx"
		long dateTime3 = thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(((long) (this11) ), ((double) (7) ), thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerHour);
		//line 64 "/shared/core/thx/TestDateTime.hx"
		long this12 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this10) ).__get(1));
		//line 64 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this13 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((long) (dateTime3) ), ((long) (this12) )});
		//line 64 "/shared/core/thx/TestDateTime.hx"
		long this14 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this13) ).__get(0));
		//line 64 "/shared/core/thx/TestDateTime.hx"
		long dateTime4 = thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(((long) (this14) ), ((double) (10) ), thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerMinute);
		//line 64 "/shared/core/thx/TestDateTime.hx"
		long this15 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this13) ).__get(1));
		//line 64 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this16 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((long) (dateTime4) ), ((long) (this15) )});
		//line 64 "/shared/core/thx/TestDateTime.hx"
		long this17 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this16) ).__get(0));
		//line 64 "/shared/core/thx/TestDateTime.hx"
		long dateTime5 = thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(((long) (this17) ), ((double) (7) ), thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerSecond);
		//line 64 "/shared/core/thx/TestDateTime.hx"
		long this18 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this16) ).__get(1));
		//line 64 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this19 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((long) (dateTime5) ), ((long) (this18) )});
		//line 64 "/shared/core/thx/TestDateTime.hx"
		long this20 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this19) ).__get(0));
		//line 64 "/shared/core/thx/TestDateTime.hx"
		long dateTime6 = thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(((long) (this20) ), ((double) (7) ), 1);
		//line 64 "/shared/core/thx/TestDateTime.hx"
		long this21 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this19) ).__get(1));
		//line 64 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this22 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((long) (dateTime6) ), ((long) (this21) )});
		//line 64 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> d = ((haxe.root.Array<java.lang.Object>) (this22) );
		//line 73 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> that = thx._DateTime.DateTime_Impl_.fromString("2018-05-07T04:50:37.007-06:00");
		//line 73 "/shared/core/thx/TestDateTime.hx"
		long this23 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (d) ).__get(0));
		//line 73 "/shared/core/thx/TestDateTime.hx"
		long this24 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (that) ).__get(0));
		//line 73 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.isTrue(( ((long) (this23) ) == ((long) (this24) ) ), ( ( ( "expected " + "2018-05-07T04:50:37.007-06:00" ) + " but got " ) + thx._DateTime.DateTime_Impl_.toString(d) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testAdd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (73) )) )}));
	}
	
	
	public void testOffset()
	{
		//line 77 "/shared/core/thx/TestDateTime.hx"
		long offset = thx._Time.Time_Impl_.create(-4, 0, 0, 0);
		//line 77 "/shared/core/thx/TestDateTime.hx"
		long this1 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this.date) ).__get(0));
		//line 77 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this2 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((long) (this1) ), ((long) (offset) )});
		//line 77 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> nyDate = ((haxe.root.Array<java.lang.Object>) (this2) );
		//line 78 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.equals("2015-07-26T23:40:30-04:00", thx._DateTime.DateTime_Impl_.toString(nyDate), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testOffset"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (78) )) )}));
		//line 79 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this3 = this.date;
		//line 79 "/shared/core/thx/TestDateTime.hx"
		long newoffset = thx._Time.Time_Impl_.create(-4, 0, 0, 0);
		//line 79 "/shared/core/thx/TestDateTime.hx"
		long this4 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this3) ).__get(0));
		//line 79 "/shared/core/thx/TestDateTime.hx"
		long this5 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this3) ).__get(1));
		//line 79 "/shared/core/thx/TestDateTime.hx"
		long this6 = ((long) (( ((long) (( ((long) (this4) ) + ((long) (this5) ) )) ) - ((long) (newoffset) ) )) );
		//line 79 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this7 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((long) (this6) ), ((long) (newoffset) )});
		//line 79 "/shared/core/thx/TestDateTime.hx"
		nyDate = ((haxe.root.Array<java.lang.Object>) (this7) );
		//line 80 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.equals("2015-07-26T21:40:30-04:00", thx._DateTime.DateTime_Impl_.toString(nyDate), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testOffset"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (80) )) )}));
	}
	
	
	public void testFromString()
	{
		//line 84 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> d = thx._DateTime.DateTime_Impl_.fromString("2015-07-26T21:40:30-06:00");
		//line 85 "/shared/core/thx/TestDateTime.hx"
		long this1 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this.date) ).__get(0));
		//line 85 "/shared/core/thx/TestDateTime.hx"
		long this2 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (d) ).__get(0));
		//line 85 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.isTrue(( ((long) (this1) ) == ((long) (this2) ) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testFromString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (85) )) )}));
		//line 86 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> d1 = thx._DateTime.DateTime_Impl_.fromString("2014-01-01");
		//line 87 "/shared/core/thx/TestDateTime.hx"
		long offset = thx._Time.Time_Impl_.zero;
		//line 87 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this3 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.create(2014, 1, 1, 0, 0, 0, 0)) ), ((long) (offset) )});
		//line 87 "/shared/core/thx/TestDateTime.hx"
		long this4 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this3) ).__get(0));
		//line 87 "/shared/core/thx/TestDateTime.hx"
		long dateTime = thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (this4) ) - ((long) (offset) ) )) ));
		//line 87 "/shared/core/thx/TestDateTime.hx"
		long this5 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (this3) ).__get(1));
		//line 87 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this6 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((long) (dateTime) ), ((long) (this5) )});
		//line 86 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> d2 = ((haxe.root.Array<java.lang.Object>) (this6) );
		//line 88 "/shared/core/thx/TestDateTime.hx"
		long this7 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (d2) ).__get(0));
		//line 88 "/shared/core/thx/TestDateTime.hx"
		long this8 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (d1) ).__get(0));
		//line 88 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.isTrue(( ((long) (this7) ) == ((long) (this8) ) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testFromString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (88) )) )}));
		//line 90 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.equals("-1-07-27T00:00:00+00:00", thx._DateTime.DateTime_Impl_.toString(thx._DateTime.DateTime_Impl_.fromString("0-06-07")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testFromString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (90) )) )}));
		//line 91 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.equals("-1-06-07T00:00:00+00:00", thx._DateTime.DateTime_Impl_.toString(thx._DateTime.DateTime_Impl_.fromString("-1-06-07")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testFromString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (91) )) )}));
		//line 92 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.equals("1-06-07T00:00:00+00:00", thx._DateTime.DateTime_Impl_.toString(thx._DateTime.DateTime_Impl_.fromString("1-06-07")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testFromString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (92) )) )}));
		//line 93 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.equals("-2014-01-01T00:00:00+00:00", thx._DateTime.DateTime_Impl_.toString(thx._DateTime.DateTime_Impl_.fromString("-2014-01-01")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testFromString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (93) )) )}));
	}
	
	
	public void testLocalOffset()
	{
		//line 98 "/shared/core/thx/TestDateTime.hx"
		long ref = thx._Time.Time_Impl_.fromString("0:00:00");
		//line 98 "/shared/core/thx/TestDateTime.hx"
		long delta = thx._DateTime.DateTime_Impl_.localOffset();
		//line 100 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.isTrue(( ((long) (ref) ) == ((long) (delta) ) ), ( ( ( "expected " + thx._Time.Time_Impl_.toString(ref) ) + " but got " ) + thx._Time.Time_Impl_.toString(delta) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testLocalOffset"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (100) )) )}));
	}
	
	
	public void testNow()
	{
		//line 105 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> ref = thx._DateTime.DateTime_Impl_.fromString("2016-05-24T09:02:28+00:00");
		//line 106 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> this1 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.now()) ), ((long) (thx._DateTime.DateTime_Impl_.localOffset()) )});
		//line 105 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> date = ((haxe.root.Array<java.lang.Object>) (this1) );
		//line 107 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.isTrue(thx._DateTime.DateTime_Impl_.nearEqualsTo(date, ref, thx._Time.Time_Impl_.create(0, 10, 0, 0)), ( ( ( "expected " + thx._DateTime.DateTime_Impl_.toString(ref) ) + " but got " ) + thx._DateTime.DateTime_Impl_.toString(date) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testNow"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (107) )) )}));
	}
	
	
	public void testSnapNext()
	{
		//line 111 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapNext(thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:07:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:06:10-06:00"), thx.TimePeriod.Minute, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (111) )) )}));
		//line 112 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapNext(thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:06:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:05:50-06:00"), thx.TimePeriod.Minute, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (112) )) )}));
		//line 113 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapNext(thx._DateTime.DateTime_Impl_.fromString("2014-01-01 11:00:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:10:10-06:00"), thx.TimePeriod.Hour, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (113) )) )}));
		//line 114 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapNext(thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:00:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-01-01 09:50:10-06:00"), thx.TimePeriod.Hour, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (114) )) )}));
		//line 115 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapNext(thx._DateTime.DateTime_Impl_.fromString("2014-01-02 00:00:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:00:00-06:00"), thx.TimePeriod.Day, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (115) )) )}));
		//line 116 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapNext(thx._DateTime.DateTime_Impl_.fromString("2014-01-01 00:00:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2013-12-31 20:00:00-06:00"), thx.TimePeriod.Day, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (116) )) )}));
		//line 117 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapNext(thx._DateTime.DateTime_Impl_.fromString("2014-12-21 00:00:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-12-17 11:00:00-06:00"), thx.TimePeriod.Week, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (117) )) )}));
		//line 118 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapNext(thx._DateTime.DateTime_Impl_.fromString("2014-12-21 00:00:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-12-18 00:00:00-06:00"), thx.TimePeriod.Week, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (118) )) )}));
		//line 119 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapNext(thx._DateTime.DateTime_Impl_.fromString("2015-01-01 00:00:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-12-12 00:00:00-06:00"), thx.TimePeriod.Month, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (119) )) )}));
		//line 120 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapNext(thx._DateTime.DateTime_Impl_.fromString("2015-01-01 00:00:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-12-18 00:00:00-06:00"), thx.TimePeriod.Month, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (120) )) )}));
		//line 121 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapNext(thx._DateTime.DateTime_Impl_.fromString("2015-01-01 00:00:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-05-12 00:00:00-06:00"), thx.TimePeriod.Year, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (121) )) )}));
		//line 122 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapNext(thx._DateTime.DateTime_Impl_.fromString("2015-01-01 00:00:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-12-18 00:00:00-06:00"), thx.TimePeriod.Year, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapNext"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (122) )) )}));
	}
	
	
	public void testSnapPrev()
	{
		//line 126 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapPrev(thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:06:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:06:10-06:00"), thx.TimePeriod.Minute, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (126) )) )}));
		//line 127 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapPrev(thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:05:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:05:50-06:00"), thx.TimePeriod.Minute, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (127) )) )}));
		//line 128 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapPrev(thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:00:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:10:10-06:00"), thx.TimePeriod.Hour, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (128) )) )}));
		//line 129 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapPrev(thx._DateTime.DateTime_Impl_.fromString("2014-01-01 09:00:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-01-01 09:50:10-06:00"), thx.TimePeriod.Hour, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (129) )) )}));
		//line 130 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapPrev(thx._DateTime.DateTime_Impl_.fromString("2014-01-01 00:00:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:00:00-06:00"), thx.TimePeriod.Day, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (130) )) )}));
		//line 131 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapPrev(thx._DateTime.DateTime_Impl_.fromString("2013-12-31 00:00:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2013-12-31 20:00:00-06:00"), thx.TimePeriod.Day, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (131) )) )}));
		//line 132 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapPrev(thx._DateTime.DateTime_Impl_.fromString("2014-12-14 00:00:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-12-17 11:00:00-06:00"), thx.TimePeriod.Week, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (132) )) )}));
		//line 133 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapPrev(thx._DateTime.DateTime_Impl_.fromString("2014-12-14 00:00:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-12-18 00:00:00-06:00"), thx.TimePeriod.Week, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (133) )) )}));
		//line 134 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapPrev(thx._DateTime.DateTime_Impl_.fromString("2014-12-01 00:00:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-12-12 00:00:00-06:00"), thx.TimePeriod.Month, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (134) )) )}));
		//line 135 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapPrev(thx._DateTime.DateTime_Impl_.fromString("2014-12-01 00:00:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-12-18 00:00:00-06:00"), thx.TimePeriod.Month, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (135) )) )}));
		//line 136 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapPrev(thx._DateTime.DateTime_Impl_.fromString("2014-01-01 00:00:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-05-12 00:00:00-06:00"), thx.TimePeriod.Year, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (136) )) )}));
		//line 137 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapPrev(thx._DateTime.DateTime_Impl_.fromString("2014-01-01 00:00:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-12-18 00:00:00-06:00"), thx.TimePeriod.Year, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapPrev"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (137) )) )}));
	}
	
	
	public void testSnapTo()
	{
		//line 141 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapTo(thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:06:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:06:10-06:00"), thx.TimePeriod.Minute, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (141) )) )}));
		//line 142 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapTo(thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:06:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:05:50-06:00"), thx.TimePeriod.Minute, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (142) )) )}));
		//line 143 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapTo(thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:00:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:10:10-06:00"), thx.TimePeriod.Hour, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (143) )) )}));
		//line 144 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapTo(thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:00:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-01-01 09:50:10-06:00"), thx.TimePeriod.Hour, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (144) )) )}));
		//line 145 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapTo(thx._DateTime.DateTime_Impl_.fromString("2014-01-01 00:00:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:00:00-06:00"), thx.TimePeriod.Day, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (145) )) )}));
		//line 146 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapTo(thx._DateTime.DateTime_Impl_.fromString("2014-01-01 00:00:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2013-12-31 20:00:00-06:00"), thx.TimePeriod.Day, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (146) )) )}));
		//line 147 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapTo(thx._DateTime.DateTime_Impl_.fromString("2014-12-14 00:00:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-12-17 11:00:00-06:00"), thx.TimePeriod.Week, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (147) )) )}));
		//line 148 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapTo(thx._DateTime.DateTime_Impl_.fromString("2014-12-21 00:00:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-12-18 00:00:00-06:00"), thx.TimePeriod.Week, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (148) )) )}));
		//line 149 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapTo(thx._DateTime.DateTime_Impl_.fromString("2014-12-01 00:00:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-12-12 00:00:00-06:00"), thx.TimePeriod.Month, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (149) )) )}));
		//line 150 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapTo(thx._DateTime.DateTime_Impl_.fromString("2015-01-01 00:00:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-12-18 00:00:00-06:00"), thx.TimePeriod.Month, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (150) )) )}));
		//line 151 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapTo(thx._DateTime.DateTime_Impl_.fromString("2014-01-01 00:00:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-05-12 00:00:00-06:00"), thx.TimePeriod.Year, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (151) )) )}));
		//line 152 "/shared/core/thx/TestDateTime.hx"
		this.assertSnapTo(thx._DateTime.DateTime_Impl_.fromString("2015-01-01 00:00:00-06:00"), thx._DateTime.DateTime_Impl_.fromString("2014-12-18 00:00:00-06:00"), thx.TimePeriod.Year, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestDateTime", "TestDateTime.hx", "testSnapTo"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (152) )) )}));
	}
	
	
	public void assertSnapTo(haxe.root.Array<java.lang.Object> expected, haxe.root.Array<java.lang.Object> date, thx.TimePeriod period, java.lang.Object pos)
	{
		//line 156 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> t = thx._DateTime.DateTime_Impl_.snapTo(date, period);
		//line 158 "/shared/core/thx/TestDateTime.hx"
		long this1 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (expected) ).__get(0));
		//line 158 "/shared/core/thx/TestDateTime.hx"
		long this2 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (t) ).__get(0));
		//line 157 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.isTrue(( ((long) (this1) ) == ((long) (this2) ) ), ( ( ( ( ( ( ( "expected " + thx._DateTime.DateTime_Impl_.toString(date) ) + " to snap to " ) + thx._DateTime.DateTime_Impl_.toString(expected) ) + " for " ) + haxe.root.Std.string(period) ) + " but it is " ) + thx._DateTime.DateTime_Impl_.toString(t) ), pos);
	}
	
	
	public void assertSnapPrev(haxe.root.Array<java.lang.Object> expected, haxe.root.Array<java.lang.Object> date, thx.TimePeriod period, java.lang.Object pos)
	{
		//line 165 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> t = thx._DateTime.DateTime_Impl_.snapPrev(date, period);
		//line 167 "/shared/core/thx/TestDateTime.hx"
		long this1 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (expected) ).__get(0));
		//line 167 "/shared/core/thx/TestDateTime.hx"
		long this2 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (t) ).__get(0));
		//line 166 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.isTrue(( ((long) (this1) ) == ((long) (this2) ) ), ( ( ( ( ( ( ( "expected " + thx._DateTime.DateTime_Impl_.toString(date) ) + " to snap before " ) + thx._DateTime.DateTime_Impl_.toString(expected) ) + " for " ) + haxe.root.Std.string(period) ) + " but it is " ) + thx._DateTime.DateTime_Impl_.toString(t) ), pos);
	}
	
	
	public void assertSnapNext(haxe.root.Array<java.lang.Object> expected, haxe.root.Array<java.lang.Object> date, thx.TimePeriod period, java.lang.Object pos)
	{
		//line 174 "/shared/core/thx/TestDateTime.hx"
		haxe.root.Array<java.lang.Object> t = thx._DateTime.DateTime_Impl_.snapNext(date, period);
		//line 176 "/shared/core/thx/TestDateTime.hx"
		long this1 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (expected) ).__get(0));
		//line 176 "/shared/core/thx/TestDateTime.hx"
		long this2 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (t) ).__get(0));
		//line 175 "/shared/core/thx/TestDateTime.hx"
		utest.Assert.isTrue(( ((long) (this1) ) == ((long) (this2) ) ), ( ( ( ( ( ( ( "expected " + thx._DateTime.DateTime_Impl_.toString(date) ) + " to snap after " ) + thx._DateTime.DateTime_Impl_.toString(expected) ) + " for " ) + haxe.root.Std.string(period) ) + " but it is " ) + thx._DateTime.DateTime_Impl_.toString(t) ), pos);
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 8 "/shared/core/thx/TestDateTime.hx"
		{
			//line 8 "/shared/core/thx/TestDateTime.hx"
			boolean __temp_executeDef1 = true;
			//line 8 "/shared/core/thx/TestDateTime.hx"
			switch (field.hashCode())
			{
				case 1443335990:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("dateutc")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						this.dateutc = ((haxe.root.Array<java.lang.Object>) (value) );
						//line 8 "/shared/core/thx/TestDateTime.hx"
						return value;
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case -1019779949:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("offset")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						this.offset = haxe.lang.Runtime.toLong(value);
						//line 8 "/shared/core/thx/TestDateTime.hx"
						return value;
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case -1037172987:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("tomorrow")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						this.tomorrow = ((haxe.root.Array<java.lang.Object>) (value) );
						//line 8 "/shared/core/thx/TestDateTime.hx"
						return value;
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case 3076014:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("date")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						this.date = ((haxe.root.Array<java.lang.Object>) (value) );
						//line 8 "/shared/core/thx/TestDateTime.hx"
						return value;
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
			}
			
			//line 8 "/shared/core/thx/TestDateTime.hx"
			if (__temp_executeDef1) 
			{
				//line 8 "/shared/core/thx/TestDateTime.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 8 "/shared/core/thx/TestDateTime.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 8 "/shared/core/thx/TestDateTime.hx"
		{
			//line 8 "/shared/core/thx/TestDateTime.hx"
			boolean __temp_executeDef1 = true;
			//line 8 "/shared/core/thx/TestDateTime.hx"
			switch (field.hashCode())
			{
				case -110613693:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("assertSnapNext")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "assertSnapNext")) );
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case -1019779949:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("offset")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						return this.offset;
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case -110542205:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("assertSnapPrev")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "assertSnapPrev")) );
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case 3076014:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("date")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						return this.date;
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case -679443765:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("assertSnapTo")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "assertSnapTo")) );
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case -1037172987:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("tomorrow")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						return this.tomorrow;
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case 1721707287:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("testSnapTo")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSnapTo")) );
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case 1443335990:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("dateutc")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						return this.dateutc;
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case 998180815:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("testSnapPrev")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSnapPrev")) );
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case 1267440686:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("testCreate")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCreate")) );
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case 998109327:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("testSnapNext")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSnapNext")) );
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case 1324251889:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("testEquals")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testEquals")) );
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case -1422471964:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("testNow")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testNow")) );
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case 557885427:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("testCompare")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCompare")) );
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case 629860332:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("testLocalOffset")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testLocalOffset")) );
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case -1062581986:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("testToString")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testToString")) );
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case 1443991181:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("testFromString")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFromString")) );
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case -1422484817:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("testAdd")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testAdd")) );
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case 1599954885:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("testOffset")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testOffset")) );
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
			}
			
			//line 8 "/shared/core/thx/TestDateTime.hx"
			if (__temp_executeDef1) 
			{
				//line 8 "/shared/core/thx/TestDateTime.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 8 "/shared/core/thx/TestDateTime.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 8 "/shared/core/thx/TestDateTime.hx"
		{
			//line 8 "/shared/core/thx/TestDateTime.hx"
			boolean __temp_executeDef1 = true;
			//line 8 "/shared/core/thx/TestDateTime.hx"
			switch (field.hashCode())
			{
				case -110613693:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("assertSnapNext")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						this.assertSnapNext(((haxe.root.Array<java.lang.Object>) (dynargs.__get(0)) ), ((haxe.root.Array<java.lang.Object>) (dynargs.__get(1)) ), ((thx.TimePeriod) (dynargs.__get(2)) ), dynargs.__get(3));
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case 1267440686:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("testCreate")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						this.testCreate();
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case -110542205:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("assertSnapPrev")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						this.assertSnapPrev(((haxe.root.Array<java.lang.Object>) (dynargs.__get(0)) ), ((haxe.root.Array<java.lang.Object>) (dynargs.__get(1)) ), ((thx.TimePeriod) (dynargs.__get(2)) ), dynargs.__get(3));
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case 1324251889:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("testEquals")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						this.testEquals();
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case -679443765:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("assertSnapTo")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						this.assertSnapTo(((haxe.root.Array<java.lang.Object>) (dynargs.__get(0)) ), ((haxe.root.Array<java.lang.Object>) (dynargs.__get(1)) ), ((thx.TimePeriod) (dynargs.__get(2)) ), dynargs.__get(3));
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case 557885427:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("testCompare")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						this.testCompare();
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case 1721707287:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("testSnapTo")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						this.testSnapTo();
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case -1062581986:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("testToString")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						this.testToString();
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case 998180815:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("testSnapPrev")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						this.testSnapPrev();
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case -1422484817:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("testAdd")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						this.testAdd();
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case 998109327:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("testSnapNext")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						this.testSnapNext();
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case 1599954885:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("testOffset")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						this.testOffset();
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case -1422471964:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("testNow")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						this.testNow();
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case 1443991181:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("testFromString")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						this.testFromString();
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
				case 629860332:
				{
					//line 8 "/shared/core/thx/TestDateTime.hx"
					if (field.equals("testLocalOffset")) 
					{
						//line 8 "/shared/core/thx/TestDateTime.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/core/thx/TestDateTime.hx"
						this.testLocalOffset();
					}
					
					//line 8 "/shared/core/thx/TestDateTime.hx"
					break;
				}
				
				
			}
			
			//line 8 "/shared/core/thx/TestDateTime.hx"
			if (__temp_executeDef1) 
			{
				//line 8 "/shared/core/thx/TestDateTime.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 8 "/shared/core/thx/TestDateTime.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 8 "/shared/core/thx/TestDateTime.hx"
		baseArr.push("dateutc");
		//line 8 "/shared/core/thx/TestDateTime.hx"
		baseArr.push("tomorrow");
		//line 8 "/shared/core/thx/TestDateTime.hx"
		baseArr.push("date");
		//line 8 "/shared/core/thx/TestDateTime.hx"
		baseArr.push("offset");
		//line 8 "/shared/core/thx/TestDateTime.hx"
		{
			//line 8 "/shared/core/thx/TestDateTime.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


