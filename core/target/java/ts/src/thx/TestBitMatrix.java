// Generated by Haxe 3.3.0
package thx;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestBitMatrix extends haxe.lang.HxObject
{
	public TestBitMatrix(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestBitMatrix()
	{
		//line 6 "/shared/core/thx/TestBitMatrix.hx"
		thx.TestBitMatrix.__hx_ctor_thx_TestBitMatrix(this);
	}
	
	
	public static void __hx_ctor_thx_TestBitMatrix(thx.TestBitMatrix __temp_me164)
	{
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 5 "/shared/core/thx/TestBitMatrix.hx"
		return new thx.TestBitMatrix(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 5 "/shared/core/thx/TestBitMatrix.hx"
		return new thx.TestBitMatrix();
	}
	
	
	public void testNew()
	{
		//line 9 "/shared/core/thx/TestBitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> bits = thx._BitMatrix.BitMatrix_Impl_._new(null, null);
		//line 10 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.same(0, thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(bits), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testNew"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (10) )) )}));
		//line 11 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.same(0, thx._BitMatrix.BitMatrix_Impl_.get_length(bits), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testNew"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (11) )) )}));
		//line 13 "/shared/core/thx/TestBitMatrix.hx"
		bits = thx._BitMatrix.BitMatrix_Impl_._new(5, 10);
		//line 14 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.same(5, thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(bits), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testNew"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (14) )) )}));
		//line 15 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.same(10, thx._BitMatrix.BitMatrix_Impl_.get_length(bits), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testNew"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (15) )) )}));
	}
	
	
	public void testBitMatrix()
	{
		//line 19 "/shared/core/thx/TestBitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> bits = thx._BitMatrix.BitMatrix_Impl_._new(3, 3);
		//line 20 "/shared/core/thx/TestBitMatrix.hx"
		thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 0, 0, true);
		//line 21 "/shared/core/thx/TestBitMatrix.hx"
		thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 0, 1, true);
		//line 22 "/shared/core/thx/TestBitMatrix.hx"
		thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 0, 2, true);
		//line 23 "/shared/core/thx/TestBitMatrix.hx"
		thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 1, 0, false);
		//line 24 "/shared/core/thx/TestBitMatrix.hx"
		thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 1, 1, false);
		//line 25 "/shared/core/thx/TestBitMatrix.hx"
		thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 1, 2, false);
		//line 26 "/shared/core/thx/TestBitMatrix.hx"
		thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 2, 0, true);
		//line 27 "/shared/core/thx/TestBitMatrix.hx"
		thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 2, 1, false);
		//line 28 "/shared/core/thx/TestBitMatrix.hx"
		thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 2, 2, true);
		//line 29 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.equals("111,000,101", thx._BitMatrix.BitMatrix_Impl_.toString(bits, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testBitMatrix"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (29) )) )}));
		//line 32 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.raises(new thx.TestBitMatrix_testBitMatrix_32__Fun(bits), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testBitMatrix"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (32) )) )}));
		//line 35 "/shared/core/thx/TestBitMatrix.hx"
		thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 0, 3, true);
		//line 36 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.equals("1111,0000,1010", thx._BitMatrix.BitMatrix_Impl_.toString(bits, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testBitMatrix"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (36) )) )}));
		//line 37 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.same(4, thx._BitMatrix.BitMatrix_Impl_.get_length(bits), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testBitMatrix"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (37) )) )}));
		//line 39 "/shared/core/thx/TestBitMatrix.hx"
		thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 1, 4, true);
		//line 40 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.equals("11110,00001,10100", thx._BitMatrix.BitMatrix_Impl_.toString(bits, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testBitMatrix"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (40) )) )}));
		//line 41 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.same(5, thx._BitMatrix.BitMatrix_Impl_.get_length(bits), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testBitMatrix"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (41) )) )}));
		//line 43 "/shared/core/thx/TestBitMatrix.hx"
		thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 2, 5, true);
		//line 44 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.equals("111100,000010,101001", thx._BitMatrix.BitMatrix_Impl_.toString(bits, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testBitMatrix"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (44) )) )}));
		//line 45 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.same(6, thx._BitMatrix.BitMatrix_Impl_.get_length(bits), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testBitMatrix"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (45) )) )}));
	}
	
	
	public void testClone()
	{
		//line 49 "/shared/core/thx/TestBitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> bits = thx._BitMatrix.BitMatrix_Impl_._new(2, 3);
		//line 50 "/shared/core/thx/TestBitMatrix.hx"
		thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 0, 0, true);
		//line 51 "/shared/core/thx/TestBitMatrix.hx"
		thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 0, 1, true);
		//line 52 "/shared/core/thx/TestBitMatrix.hx"
		thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 0, 2, true);
		//line 53 "/shared/core/thx/TestBitMatrix.hx"
		thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 1, 0, false);
		//line 54 "/shared/core/thx/TestBitMatrix.hx"
		thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 1, 1, false);
		//line 55 "/shared/core/thx/TestBitMatrix.hx"
		thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 1, 2, false);
		//line 56 "/shared/core/thx/TestBitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> clone = thx._BitMatrix.BitMatrix_Impl_.clone(bits);
		//line 57 "/shared/core/thx/TestBitMatrix.hx"
		thx._BitMatrix.BitMatrix_Impl_.setBitAt(clone, 0, 1, false);
		//line 58 "/shared/core/thx/TestBitMatrix.hx"
		thx._BitMatrix.BitMatrix_Impl_.setBitAt(clone, 1, 1, true);
		//line 59 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.same("111,000", thx._BitMatrix.BitMatrix_Impl_.toString(bits, null), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testClone"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (59) )) )}));
		//line 60 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.same("101,010", thx._BitMatrix.BitMatrix_Impl_.toString(clone, null), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testClone"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (60) )) )}));
	}
	
	
	public void testFromToString()
	{
		//line 64 "/shared/core/thx/TestBitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> bits = thx._BitMatrix.BitMatrix_Impl_.fromString("000,111,101,010", null);
		//line 65 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.same("000,111,101,010", thx._BitMatrix.BitMatrix_Impl_.toString(bits, null), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testFromToString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (65) )) )}));
	}
	
	
	public void testFromToBools()
	{
		//line 69 "/shared/core/thx/TestBitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> bits = thx._BitMatrix.BitMatrix_Impl_.fromBools(new haxe.root.Array<haxe.root.Array<java.lang.Object>>(new haxe.root.Array[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{true, true}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{false, false}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{true, false}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{false, true})}));
		//line 70 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{true, true}), new haxe.root.Array(new java.lang.Object[]{false, false}), new haxe.root.Array(new java.lang.Object[]{true, false}), new haxe.root.Array(new java.lang.Object[]{false, true})}), thx._BitMatrix.BitMatrix_Impl_.toBools(bits), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testFromToBools"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (70) )) )}));
	}
	
	
	public void testConcat()
	{
		//line 74 "/shared/core/thx/TestBitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> b1 = thx._BitMatrix.BitMatrix_Impl_.fromString("000,111,101,010", null);
		//line 75 "/shared/core/thx/TestBitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> b2 = thx._BitMatrix.BitMatrix_Impl_.fromString("111,000,111,000", null);
		//line 76 "/shared/core/thx/TestBitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> b3 = thx._BitMatrix.BitMatrix_Impl_.concat(b1, b2);
		//line 77 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.same("000,111,101,010", thx._BitMatrix.BitMatrix_Impl_.toString(b1, null), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testConcat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (77) )) )}));
		//line 78 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.same("111,000,111,000", thx._BitMatrix.BitMatrix_Impl_.toString(b2, null), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testConcat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (78) )) )}));
		//line 79 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.same("000111,111000,101111,010000", thx._BitMatrix.BitMatrix_Impl_.toString(b3, null), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testConcat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (79) )) )}));
		//line 80 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.same(4, thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(b1), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testConcat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (80) )) )}));
		//line 81 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.same(4, thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(b2), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testConcat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (81) )) )}));
		//line 82 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.same(4, thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(b3), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testConcat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (82) )) )}));
		//line 83 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.same(3, thx._BitMatrix.BitMatrix_Impl_.get_length(b1), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testConcat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (83) )) )}));
		//line 84 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.same(3, thx._BitMatrix.BitMatrix_Impl_.get_length(b2), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testConcat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (84) )) )}));
		//line 85 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.same(6, thx._BitMatrix.BitMatrix_Impl_.get_length(b3), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testConcat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (85) )) )}));
		//line 87 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.raises(( (( thx.TestBitMatrix_testConcat_87__Fun.__hx_current != null )) ? (thx.TestBitMatrix_testConcat_87__Fun.__hx_current) : (thx.TestBitMatrix_testConcat_87__Fun.__hx_current = ((thx.TestBitMatrix_testConcat_87__Fun) (new thx.TestBitMatrix_testConcat_87__Fun()) )) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testConcat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (87) )) )}));
	}
	
	
	public void testExpand()
	{
		//line 95 "/shared/core/thx/TestBitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> b1 = thx._BitMatrix.BitMatrix_Impl_.fromString("000,111,101,010", null);
		//line 96 "/shared/core/thx/TestBitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> b2 = thx._BitMatrix.BitMatrix_Impl_.expand(b1, 1);
		//line 97 "/shared/core/thx/TestBitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> b3 = thx._BitMatrix.BitMatrix_Impl_.expand(b1, 3);
		//line 98 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.same("000,111,101,010", thx._BitMatrix.BitMatrix_Impl_.toString(b1, null), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testExpand"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (98) )) )}));
		//line 99 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.same("000000,111111,110011,001100", thx._BitMatrix.BitMatrix_Impl_.toString(b2, null), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testExpand"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (99) )) )}));
		//line 100 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.same("000000000000,111111111111,111100001111,000011110000", thx._BitMatrix.BitMatrix_Impl_.toString(b3, null), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testExpand"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (100) )) )}));
	}
	
	
	public void testAnd()
	{
		//line 104 "/shared/core/thx/TestBitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> b1 = thx._BitMatrix.BitMatrix_Impl_.fromString("11,00", null);
		//line 105 "/shared/core/thx/TestBitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> b2 = thx._BitMatrix.BitMatrix_Impl_.fromString("10,10", null);
		//line 106 "/shared/core/thx/TestBitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> actual = thx._BitMatrix.BitMatrix_Impl_.and(b1, b2);
		//line 107 "/shared/core/thx/TestBitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> expected = thx._BitMatrix.BitMatrix_Impl_.fromString("10,00", null);
		//line 108 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.isTrue(thx._BitMatrix.BitMatrix_Impl_.equals(expected, actual), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testAnd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (108) )) )}));
	}
	
	
	public void testOr()
	{
		//line 112 "/shared/core/thx/TestBitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> b1 = thx._BitMatrix.BitMatrix_Impl_.fromString("11,00", null);
		//line 113 "/shared/core/thx/TestBitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> b2 = thx._BitMatrix.BitMatrix_Impl_.fromString("10,10", null);
		//line 114 "/shared/core/thx/TestBitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> actual = thx._BitMatrix.BitMatrix_Impl_.or(b1, b2);
		//line 115 "/shared/core/thx/TestBitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> expected = thx._BitMatrix.BitMatrix_Impl_.fromString("11,10", null);
		//line 116 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.isTrue(thx._BitMatrix.BitMatrix_Impl_.equals(expected, actual), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testOr"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (116) )) )}));
	}
	
	
	public void testXor()
	{
		//line 120 "/shared/core/thx/TestBitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> b1 = thx._BitMatrix.BitMatrix_Impl_.fromString("11,00", null);
		//line 121 "/shared/core/thx/TestBitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> b2 = thx._BitMatrix.BitMatrix_Impl_.fromString("10,10", null);
		//line 122 "/shared/core/thx/TestBitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> actual = thx._BitMatrix.BitMatrix_Impl_.xor(b1, b2);
		//line 123 "/shared/core/thx/TestBitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> expected = thx._BitMatrix.BitMatrix_Impl_.fromString("01,10", null);
		//line 124 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.isTrue(thx._BitMatrix.BitMatrix_Impl_.equals(expected, actual), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testXor"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (124) )) )}));
	}
	
	
	public void testNegate()
	{
		//line 128 "/shared/core/thx/TestBitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> b1 = thx._BitMatrix.BitMatrix_Impl_.fromString("11,00", null);
		//line 129 "/shared/core/thx/TestBitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> actual = thx._BitMatrix.BitMatrix_Impl_.negate(b1);
		//line 130 "/shared/core/thx/TestBitMatrix.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> expected = thx._BitMatrix.BitMatrix_Impl_.fromString("00,11", null);
		//line 131 "/shared/core/thx/TestBitMatrix.hx"
		utest.Assert.isTrue(thx._BitMatrix.BitMatrix_Impl_.equals(expected, actual), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestBitMatrix", "TestBitMatrix.hx", "testNegate"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (131) )) )}));
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 5 "/shared/core/thx/TestBitMatrix.hx"
		{
			//line 5 "/shared/core/thx/TestBitMatrix.hx"
			boolean __temp_executeDef1 = true;
			//line 5 "/shared/core/thx/TestBitMatrix.hx"
			switch (field.hashCode())
			{
				case 1570415156:
				{
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					if (field.equals("testNegate")) 
					{
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testNegate")) );
					}
					
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					break;
				}
				
				
				case -1422472274:
				{
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					if (field.equals("testNew")) 
					{
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testNew")) );
					}
					
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					break;
				}
				
				
				case -1422462359:
				{
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					if (field.equals("testXor")) 
					{
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testXor")) );
					}
					
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					break;
				}
				
				
				case 113124028:
				{
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					if (field.equals("testBitMatrix")) 
					{
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testBitMatrix")) );
					}
					
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					break;
				}
				
				
				case -877170155:
				{
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					if (field.equals("testOr")) 
					{
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testOr")) );
					}
					
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					break;
				}
				
				
				case -1206209557:
				{
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					if (field.equals("testClone")) 
					{
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testClone")) );
					}
					
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					break;
				}
				
				
				case -1422484507:
				{
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					if (field.equals("testAnd")) 
					{
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testAnd")) );
					}
					
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					break;
				}
				
				
				case 1124127208:
				{
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					if (field.equals("testFromToString")) 
					{
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFromToString")) );
					}
					
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					break;
				}
				
				
				case 1330567628:
				{
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					if (field.equals("testExpand")) 
					{
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testExpand")) );
					}
					
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					break;
				}
				
				
				case -1780704750:
				{
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					if (field.equals("testFromToBools")) 
					{
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFromToBools")) );
					}
					
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					break;
				}
				
				
				case 1264939590:
				{
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					if (field.equals("testConcat")) 
					{
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testConcat")) );
					}
					
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					break;
				}
				
				
			}
			
			//line 5 "/shared/core/thx/TestBitMatrix.hx"
			if (__temp_executeDef1) 
			{
				//line 5 "/shared/core/thx/TestBitMatrix.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 5 "/shared/core/thx/TestBitMatrix.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 5 "/shared/core/thx/TestBitMatrix.hx"
		{
			//line 5 "/shared/core/thx/TestBitMatrix.hx"
			boolean __temp_executeDef1 = true;
			//line 5 "/shared/core/thx/TestBitMatrix.hx"
			switch (field.hashCode())
			{
				case 1570415156:
				{
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					if (field.equals("testNegate")) 
					{
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						this.testNegate();
					}
					
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					break;
				}
				
				
				case -1422472274:
				{
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					if (field.equals("testNew")) 
					{
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						this.testNew();
					}
					
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					break;
				}
				
				
				case -1422462359:
				{
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					if (field.equals("testXor")) 
					{
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						this.testXor();
					}
					
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					break;
				}
				
				
				case 113124028:
				{
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					if (field.equals("testBitMatrix")) 
					{
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						this.testBitMatrix();
					}
					
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					break;
				}
				
				
				case -877170155:
				{
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					if (field.equals("testOr")) 
					{
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						this.testOr();
					}
					
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					break;
				}
				
				
				case -1206209557:
				{
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					if (field.equals("testClone")) 
					{
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						this.testClone();
					}
					
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					break;
				}
				
				
				case -1422484507:
				{
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					if (field.equals("testAnd")) 
					{
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						this.testAnd();
					}
					
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					break;
				}
				
				
				case 1124127208:
				{
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					if (field.equals("testFromToString")) 
					{
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						this.testFromToString();
					}
					
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					break;
				}
				
				
				case 1330567628:
				{
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					if (field.equals("testExpand")) 
					{
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						this.testExpand();
					}
					
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					break;
				}
				
				
				case -1780704750:
				{
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					if (field.equals("testFromToBools")) 
					{
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						this.testFromToBools();
					}
					
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					break;
				}
				
				
				case 1264939590:
				{
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					if (field.equals("testConcat")) 
					{
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/core/thx/TestBitMatrix.hx"
						this.testConcat();
					}
					
					//line 5 "/shared/core/thx/TestBitMatrix.hx"
					break;
				}
				
				
			}
			
			//line 5 "/shared/core/thx/TestBitMatrix.hx"
			if (__temp_executeDef1) 
			{
				//line 5 "/shared/core/thx/TestBitMatrix.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 5 "/shared/core/thx/TestBitMatrix.hx"
		return null;
	}
	
	
}


