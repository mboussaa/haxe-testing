// Generated by Haxe 3.3.0
package thx;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestReadonlyArray extends haxe.lang.HxObject
{
	public TestReadonlyArray(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestReadonlyArray(int i)
	{
		//line 12 "/shared/core/test/thx/TestReadonlyArray.hx"
		thx.TestReadonlyArray.__hx_ctor_thx_TestReadonlyArray(this, i);
	}
	
	
	public static void __hx_ctor_thx_TestReadonlyArray(thx.TestReadonlyArray __temp_me111, int i)
	{
		//line 13 "/shared/core/test/thx/TestReadonlyArray.hx"
		__temp_me111.x = i;
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
		return new thx.TestReadonlyArray(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
		return new thx.TestReadonlyArray(((int) (haxe.lang.Runtime.toInt(arr.__get(0))) ));
	}
	
	
	public int x;
	
	public void testInsertAt()
	{
		//line 17 "/shared/core/test/thx/TestReadonlyArray.hx"
		int _g1 = 0;
		//line 17 "/shared/core/test/thx/TestReadonlyArray.hx"
		int _g = this.x;
		//line 17 "/shared/core/test/thx/TestReadonlyArray.hx"
		while (( _g1 < _g ))
		{
			//line 17 "/shared/core/test/thx/TestReadonlyArray.hx"
			 ++ _g1;
			//line 18 "/shared/core/test/thx/TestReadonlyArray.hx"
			haxe.root.Array<java.lang.Object> a = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2, 4});
			//line 18 "/shared/core/test/thx/TestReadonlyArray.hx"
			haxe.root.Array<java.lang.Object> b = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (a) ).slice(0, 0)) )) ).concat(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0})) )) ))) )) ).concat(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (a) ).slice(0, null)) )) )) )) ))) )) );
			//line 20 "/shared/core/test/thx/TestReadonlyArray.hx"
			utest.Assert.isTrue(( a != b ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestReadonlyArray", "TestReadonlyArray.hx", "testInsertAt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (20) )) )}));
			//line 21 "/shared/core/test/thx/TestReadonlyArray.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{0, 1, 2, 4}), b, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestReadonlyArray", "TestReadonlyArray.hx", "testInsertAt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (21) )) )}));
			//line 23 "/shared/core/test/thx/TestReadonlyArray.hx"
			b = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (a) ).slice(0, 2)) )) ).concat(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3})) )) ))) )) ).concat(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (a) ).slice(2, null)) )) )) )) ))) )) );
			//line 24 "/shared/core/test/thx/TestReadonlyArray.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2, 3, 4}), b, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestReadonlyArray", "TestReadonlyArray.hx", "testInsertAt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (24) )) )}));
			//line 26 "/shared/core/test/thx/TestReadonlyArray.hx"
			b = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (a) ).slice(0, 10)) )) ).concat(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{5})) )) ))) )) ).concat(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (a) ).slice(10, null)) )) )) )) ))) )) );
			//line 27 "/shared/core/test/thx/TestReadonlyArray.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2, 4, 5}), b, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestReadonlyArray", "TestReadonlyArray.hx", "testInsertAt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (27) )) )}));
		}
		
	}
	
	
	public void testReplaceAt()
	{
		//line 31 "/shared/core/test/thx/TestReadonlyArray.hx"
		int _g1 = 0;
		//line 31 "/shared/core/test/thx/TestReadonlyArray.hx"
		int _g = this.x;
		//line 31 "/shared/core/test/thx/TestReadonlyArray.hx"
		while (( _g1 < _g ))
		{
			//line 31 "/shared/core/test/thx/TestReadonlyArray.hx"
			 ++ _g1;
			//line 32 "/shared/core/test/thx/TestReadonlyArray.hx"
			haxe.root.Array<java.lang.Object> a = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2, 4});
			//line 32 "/shared/core/test/thx/TestReadonlyArray.hx"
			haxe.root.Array<java.lang.Object> b = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (a) ).slice(0, 0)) )) ).concat(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0})) )) ))) )) ).concat(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (a) ).slice(1, null)) )) )) )) ))) )) );
			//line 34 "/shared/core/test/thx/TestReadonlyArray.hx"
			utest.Assert.isTrue(( a != b ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestReadonlyArray", "TestReadonlyArray.hx", "testReplaceAt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (34) )) )}));
			//line 35 "/shared/core/test/thx/TestReadonlyArray.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{0, 2, 4}), b, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestReadonlyArray", "TestReadonlyArray.hx", "testReplaceAt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (35) )) )}));
			//line 37 "/shared/core/test/thx/TestReadonlyArray.hx"
			b = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (a) ).slice(0, 2)) )) ).concat(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3})) )) ))) )) ).concat(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (a) ).slice(3, null)) )) )) )) ))) )) );
			//line 38 "/shared/core/test/thx/TestReadonlyArray.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2, 3}), b, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestReadonlyArray", "TestReadonlyArray.hx", "testReplaceAt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (38) )) )}));
			//line 40 "/shared/core/test/thx/TestReadonlyArray.hx"
			b = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (a) ).slice(0, 10)) )) ).concat(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{5})) )) ))) )) ).concat(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (a) ).slice(11, null)) )) )) )) ))) )) );
			//line 41 "/shared/core/test/thx/TestReadonlyArray.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2, 4, 5}), b, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestReadonlyArray", "TestReadonlyArray.hx", "testReplaceAt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (41) )) )}));
		}
		
	}
	
	
	public void testPush()
	{
		//line 45 "/shared/core/test/thx/TestReadonlyArray.hx"
		int _g1 = 0;
		//line 45 "/shared/core/test/thx/TestReadonlyArray.hx"
		int _g = this.x;
		//line 45 "/shared/core/test/thx/TestReadonlyArray.hx"
		while (( _g1 < _g ))
		{
			//line 45 "/shared/core/test/thx/TestReadonlyArray.hx"
			 ++ _g1;
			//line 46 "/shared/core/test/thx/TestReadonlyArray.hx"
			haxe.root.Array<java.lang.Object> a = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2, 3});
			//line 47 "/shared/core/test/thx/TestReadonlyArray.hx"
			haxe.root.Array<java.lang.Object> b = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (a) ).concat(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{4})) )) ))) )) );
			//line 48 "/shared/core/test/thx/TestReadonlyArray.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2, 3}), a, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestReadonlyArray", "TestReadonlyArray.hx", "testPush"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (48) )) )}));
			//line 49 "/shared/core/test/thx/TestReadonlyArray.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2, 3, 4}), b, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestReadonlyArray", "TestReadonlyArray.hx", "testPush"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (49) )) )}));
		}
		
	}
	
	
	public void testPop()
	{
		//line 53 "/shared/core/test/thx/TestReadonlyArray.hx"
		int _g1 = 0;
		//line 53 "/shared/core/test/thx/TestReadonlyArray.hx"
		int _g = this.x;
		//line 53 "/shared/core/test/thx/TestReadonlyArray.hx"
		while (( _g1 < _g ))
		{
			//line 53 "/shared/core/test/thx/TestReadonlyArray.hx"
			 ++ _g1;
			//line 54 "/shared/core/test/thx/TestReadonlyArray.hx"
			haxe.root.Array<java.lang.Object> a = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2});
			//line 56 "/shared/core/test/thx/TestReadonlyArray.hx"
			java.lang.Object tmp = null;
			//line 56 "/shared/core/test/thx/TestReadonlyArray.hx"
			if (( ((haxe.root.Array<java.lang.Object>) (a) ).length == 0 )) 
			{
				//line 56 "/shared/core/test/thx/TestReadonlyArray.hx"
				java.lang.Object this1 = new haxe.lang.DynamicObject(new java.lang.String[]{"_0", "_1"}, new java.lang.Object[]{null, ((haxe.root.Array<java.lang.Object>) (a) )}, new java.lang.String[]{}, new double[]{});
				//line 56 "/shared/core/test/thx/TestReadonlyArray.hx"
				tmp = ((java.lang.Object) (this1) );
			}
			else
			{
				//line 56 "/shared/core/test/thx/TestReadonlyArray.hx"
				int value = ((int) (haxe.lang.Runtime.toInt(((haxe.root.Array<java.lang.Object>) (a) ).__get(( ((haxe.root.Array<java.lang.Object>) (a) ).length - 1 )))) );
				//line 56 "/shared/core/test/thx/TestReadonlyArray.hx"
				int pos = ( ((haxe.root.Array<java.lang.Object>) (a) ).length - 1 );
				//line 56 "/shared/core/test/thx/TestReadonlyArray.hx"
				haxe.root.Array<java.lang.Object> array = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (a) ).slice(0, pos)) )) ).concat(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (a) ).slice(( pos + 1 ), null)) )) )) )) ))) )) );
				//line 56 "/shared/core/test/thx/TestReadonlyArray.hx"
				java.lang.Object this2 = new haxe.lang.DynamicObject(new java.lang.String[]{"_1"}, new java.lang.Object[]{array}, new java.lang.String[]{"_0"}, new double[]{((double) (((double) (value) )) )});
				//line 56 "/shared/core/test/thx/TestReadonlyArray.hx"
				tmp = ((java.lang.Object) (this2) );
			}
			
			//line 56 "/shared/core/test/thx/TestReadonlyArray.hx"
			java.lang.Object result = ((java.lang.Object) (tmp) );
			//line 57 "/shared/core/test/thx/TestReadonlyArray.hx"
			utest.Assert.same(2, haxe.lang.Runtime.getField(result, "_0", true), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestReadonlyArray", "TestReadonlyArray.hx", "testPop"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (57) )) )}));
			//line 58 "/shared/core/test/thx/TestReadonlyArray.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1}), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(result, "_1", true)) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestReadonlyArray", "TestReadonlyArray.hx", "testPop"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (58) )) )}));
			//line 59 "/shared/core/test/thx/TestReadonlyArray.hx"
			haxe.root.Array<java.lang.Object> b = ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(result, "_1", true)) );
			//line 61 "/shared/core/test/thx/TestReadonlyArray.hx"
			java.lang.Object tmp1 = null;
			//line 61 "/shared/core/test/thx/TestReadonlyArray.hx"
			if (( ((haxe.root.Array<java.lang.Object>) (b) ).length == 0 )) 
			{
				//line 61 "/shared/core/test/thx/TestReadonlyArray.hx"
				java.lang.Object this3 = new haxe.lang.DynamicObject(new java.lang.String[]{"_0", "_1"}, new java.lang.Object[]{null, ((haxe.root.Array<java.lang.Object>) (b) )}, new java.lang.String[]{}, new double[]{});
				//line 61 "/shared/core/test/thx/TestReadonlyArray.hx"
				tmp1 = ((java.lang.Object) (this3) );
			}
			else
			{
				//line 61 "/shared/core/test/thx/TestReadonlyArray.hx"
				int value1 = ((int) (haxe.lang.Runtime.toInt(((haxe.root.Array<java.lang.Object>) (b) ).__get(( ((haxe.root.Array<java.lang.Object>) (b) ).length - 1 )))) );
				//line 61 "/shared/core/test/thx/TestReadonlyArray.hx"
				int pos1 = ( ((haxe.root.Array<java.lang.Object>) (b) ).length - 1 );
				//line 61 "/shared/core/test/thx/TestReadonlyArray.hx"
				haxe.root.Array<java.lang.Object> array1 = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (b) ).slice(0, pos1)) )) ).concat(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (b) ).slice(( pos1 + 1 ), null)) )) )) )) ))) )) );
				//line 61 "/shared/core/test/thx/TestReadonlyArray.hx"
				java.lang.Object this4 = new haxe.lang.DynamicObject(new java.lang.String[]{"_1"}, new java.lang.Object[]{array1}, new java.lang.String[]{"_0"}, new double[]{((double) (((double) (value1) )) )});
				//line 61 "/shared/core/test/thx/TestReadonlyArray.hx"
				tmp1 = ((java.lang.Object) (this4) );
			}
			
			//line 61 "/shared/core/test/thx/TestReadonlyArray.hx"
			result = ((java.lang.Object) (tmp1) );
			//line 62 "/shared/core/test/thx/TestReadonlyArray.hx"
			utest.Assert.same(1, haxe.lang.Runtime.getField(result, "_0", true), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestReadonlyArray", "TestReadonlyArray.hx", "testPop"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (62) )) )}));
			//line 63 "/shared/core/test/thx/TestReadonlyArray.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{}), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(result, "_1", true)) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestReadonlyArray", "TestReadonlyArray.hx", "testPop"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (63) )) )}));
			//line 64 "/shared/core/test/thx/TestReadonlyArray.hx"
			haxe.root.Array<java.lang.Object> c = ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(result, "_1", true)) );
			//line 66 "/shared/core/test/thx/TestReadonlyArray.hx"
			java.lang.Object tmp2 = null;
			//line 66 "/shared/core/test/thx/TestReadonlyArray.hx"
			if (( ((haxe.root.Array<java.lang.Object>) (c) ).length == 0 )) 
			{
				//line 66 "/shared/core/test/thx/TestReadonlyArray.hx"
				java.lang.Object this5 = new haxe.lang.DynamicObject(new java.lang.String[]{"_0", "_1"}, new java.lang.Object[]{null, ((haxe.root.Array<java.lang.Object>) (c) )}, new java.lang.String[]{}, new double[]{});
				//line 66 "/shared/core/test/thx/TestReadonlyArray.hx"
				tmp2 = ((java.lang.Object) (this5) );
			}
			else
			{
				//line 66 "/shared/core/test/thx/TestReadonlyArray.hx"
				int value2 = ((int) (haxe.lang.Runtime.toInt(((haxe.root.Array<java.lang.Object>) (c) ).__get(( ((haxe.root.Array<java.lang.Object>) (c) ).length - 1 )))) );
				//line 66 "/shared/core/test/thx/TestReadonlyArray.hx"
				int pos2 = ( ((haxe.root.Array<java.lang.Object>) (c) ).length - 1 );
				//line 66 "/shared/core/test/thx/TestReadonlyArray.hx"
				haxe.root.Array<java.lang.Object> array2 = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (c) ).slice(0, pos2)) )) ).concat(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (c) ).slice(( pos2 + 1 ), null)) )) )) )) ))) )) );
				//line 66 "/shared/core/test/thx/TestReadonlyArray.hx"
				java.lang.Object this6 = new haxe.lang.DynamicObject(new java.lang.String[]{"_1"}, new java.lang.Object[]{array2}, new java.lang.String[]{"_0"}, new double[]{((double) (((double) (value2) )) )});
				//line 66 "/shared/core/test/thx/TestReadonlyArray.hx"
				tmp2 = ((java.lang.Object) (this6) );
			}
			
			//line 66 "/shared/core/test/thx/TestReadonlyArray.hx"
			result = ((java.lang.Object) (tmp2) );
			//line 67 "/shared/core/test/thx/TestReadonlyArray.hx"
			utest.Assert.isNull(haxe.lang.Runtime.getField(result, "_0", true), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestReadonlyArray", "TestReadonlyArray.hx", "testPop"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (67) )) )}));
			//line 68 "/shared/core/test/thx/TestReadonlyArray.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{}), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(result, "_1", true)) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestReadonlyArray", "TestReadonlyArray.hx", "testPop"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (68) )) )}));
			//line 70 "/shared/core/test/thx/TestReadonlyArray.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2}), a, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestReadonlyArray", "TestReadonlyArray.hx", "testPop"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (70) )) )}));
		}
		
	}
	
	
	public void testShift()
	{
		//line 74 "/shared/core/test/thx/TestReadonlyArray.hx"
		int _g1 = 0;
		//line 74 "/shared/core/test/thx/TestReadonlyArray.hx"
		int _g = this.x;
		//line 74 "/shared/core/test/thx/TestReadonlyArray.hx"
		while (( _g1 < _g ))
		{
			//line 74 "/shared/core/test/thx/TestReadonlyArray.hx"
			 ++ _g1;
			//line 75 "/shared/core/test/thx/TestReadonlyArray.hx"
			haxe.root.Array<java.lang.Object> a = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2});
			//line 77 "/shared/core/test/thx/TestReadonlyArray.hx"
			java.lang.Object result = ((java.lang.Object) (thx._ReadonlyArray.ReadonlyArray_Impl_.shift(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (a) )) ))) );
			//line 78 "/shared/core/test/thx/TestReadonlyArray.hx"
			utest.Assert.same(1, haxe.lang.Runtime.getField(result, "_0", true), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestReadonlyArray", "TestReadonlyArray.hx", "testShift"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (78) )) )}));
			//line 79 "/shared/core/test/thx/TestReadonlyArray.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{2}), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(result, "_1", true)) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestReadonlyArray", "TestReadonlyArray.hx", "testShift"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (79) )) )}));
			//line 80 "/shared/core/test/thx/TestReadonlyArray.hx"
			haxe.root.Array<java.lang.Object> b = ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(result, "_1", true)) );
			//line 82 "/shared/core/test/thx/TestReadonlyArray.hx"
			result = ((java.lang.Object) (thx._ReadonlyArray.ReadonlyArray_Impl_.shift(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (b) )) ))) );
			//line 83 "/shared/core/test/thx/TestReadonlyArray.hx"
			utest.Assert.same(2, haxe.lang.Runtime.getField(result, "_0", true), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestReadonlyArray", "TestReadonlyArray.hx", "testShift"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (83) )) )}));
			//line 84 "/shared/core/test/thx/TestReadonlyArray.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{}), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(result, "_1", true)) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestReadonlyArray", "TestReadonlyArray.hx", "testShift"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (84) )) )}));
			//line 85 "/shared/core/test/thx/TestReadonlyArray.hx"
			haxe.root.Array<java.lang.Object> c = ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(result, "_1", true)) );
			//line 87 "/shared/core/test/thx/TestReadonlyArray.hx"
			result = ((java.lang.Object) (thx._ReadonlyArray.ReadonlyArray_Impl_.shift(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (c) )) ))) );
			//line 88 "/shared/core/test/thx/TestReadonlyArray.hx"
			utest.Assert.isNull(haxe.lang.Runtime.getField(result, "_0", true), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestReadonlyArray", "TestReadonlyArray.hx", "testShift"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (88) )) )}));
			//line 89 "/shared/core/test/thx/TestReadonlyArray.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{}), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(result, "_1", true)) ), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestReadonlyArray", "TestReadonlyArray.hx", "testShift"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (89) )) )}));
			//line 91 "/shared/core/test/thx/TestReadonlyArray.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2}), a, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestReadonlyArray", "TestReadonlyArray.hx", "testShift"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (91) )) )}));
		}
		
	}
	
	
	public void testUnshift()
	{
		//line 95 "/shared/core/test/thx/TestReadonlyArray.hx"
		int _g1 = 0;
		//line 95 "/shared/core/test/thx/TestReadonlyArray.hx"
		int _g = this.x;
		//line 95 "/shared/core/test/thx/TestReadonlyArray.hx"
		while (( _g1 < _g ))
		{
			//line 95 "/shared/core/test/thx/TestReadonlyArray.hx"
			 ++ _g1;
			//line 96 "/shared/core/test/thx/TestReadonlyArray.hx"
			haxe.root.Array<java.lang.Object> a = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{1, 2, 3});
			//line 97 "/shared/core/test/thx/TestReadonlyArray.hx"
			haxe.root.Array<java.lang.Object> b = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{4}).concat(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (a) )) )) ))) )) );
			//line 98 "/shared/core/test/thx/TestReadonlyArray.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{1, 2, 3}), a, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestReadonlyArray", "TestReadonlyArray.hx", "testUnshift"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (98) )) )}));
			//line 99 "/shared/core/test/thx/TestReadonlyArray.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{4, 1, 2, 3}), b, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.TestReadonlyArray", "TestReadonlyArray.hx", "testUnshift"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (99) )) )}));
		}
		
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
		{
			//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
			boolean __temp_executeDef1 = true;
			//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					if (field.equals("x")) 
					{
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						this.x = ((int) (value) );
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						return value;
					}
					
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					break;
				}
				
				
			}
			
			//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
			if (__temp_executeDef1) 
			{
				//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
		{
			//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
			boolean __temp_executeDef1 = true;
			//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					if (field.equals("x")) 
					{
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						this.x = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						return value;
					}
					
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					break;
				}
				
				
			}
			
			//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
			if (__temp_executeDef1) 
			{
				//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
		{
			//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
			boolean __temp_executeDef1 = true;
			//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
			switch (field.hashCode())
			{
				case -670236521:
				{
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					if (field.equals("testUnshift")) 
					{
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testUnshift")) );
					}
					
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					break;
				}
				
				
				case 120:
				{
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					if (field.equals("x")) 
					{
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						return this.x;
					}
					
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					break;
				}
				
				
				case -1191558384:
				{
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					if (field.equals("testShift")) 
					{
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testShift")) );
					}
					
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					break;
				}
				
				
				case 1256126334:
				{
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					if (field.equals("testInsertAt")) 
					{
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testInsertAt")) );
					}
					
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					break;
				}
				
				
				case -1422470049:
				{
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					if (field.equals("testPop")) 
					{
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testPop")) );
					}
					
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					break;
				}
				
				
				case 214285717:
				{
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					if (field.equals("testReplaceAt")) 
					{
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testReplaceAt")) );
					}
					
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					break;
				}
				
				
				case -1146892596:
				{
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					if (field.equals("testPush")) 
					{
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testPush")) );
					}
					
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					break;
				}
				
				
			}
			
			//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
			if (__temp_executeDef1) 
			{
				//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
		{
			//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
			boolean __temp_executeDef1 = true;
			//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					if (field.equals("x")) 
					{
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						return ((double) (this.x) );
					}
					
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					break;
				}
				
				
			}
			
			//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
			if (__temp_executeDef1) 
			{
				//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
		{
			//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
			boolean __temp_executeDef1 = true;
			//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
			switch (field.hashCode())
			{
				case -670236521:
				{
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					if (field.equals("testUnshift")) 
					{
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						this.testUnshift();
					}
					
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					break;
				}
				
				
				case 1256126334:
				{
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					if (field.equals("testInsertAt")) 
					{
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						this.testInsertAt();
					}
					
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					break;
				}
				
				
				case -1191558384:
				{
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					if (field.equals("testShift")) 
					{
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						this.testShift();
					}
					
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					break;
				}
				
				
				case 214285717:
				{
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					if (field.equals("testReplaceAt")) 
					{
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						this.testReplaceAt();
					}
					
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					break;
				}
				
				
				case -1422470049:
				{
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					if (field.equals("testPop")) 
					{
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						this.testPop();
					}
					
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					break;
				}
				
				
				case -1146892596:
				{
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					if (field.equals("testPush")) 
					{
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						__temp_executeDef1 = false;
						//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
						this.testPush();
					}
					
					//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
					break;
				}
				
				
			}
			
			//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
			if (__temp_executeDef1) 
			{
				//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
		baseArr.push("x");
		//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
		{
			//line 10 "/shared/core/test/thx/TestReadonlyArray.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


