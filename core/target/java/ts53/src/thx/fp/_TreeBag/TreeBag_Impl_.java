// Generated by Haxe 3.3.0
package thx.fp._TreeBag;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public final class TreeBag_Impl_
{
	public static <A> thx.fp.TreeBagImpl empty()
	{
		//line 14 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
		return thx.fp.TreeBagImpl.Empty;
	}
	
	
	public static <A> thx.fp.TreeBagImpl singleton(A a)
	{
		//line 17 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
		return thx.fp.TreeBagImpl.Cons(a, thx.fp.TreeBagImpl.Empty);
	}
	
	
	public static <A> thx.fp.TreeBagImpl cons(A x, thx.fp.TreeBagImpl xs)
	{
		//line 20 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
		return thx.fp.TreeBagImpl.Cons(x, xs);
	}
	
	
	public static <A> thx.fp.TreeBagImpl fromArray(haxe.root.Array<A> xs)
	{
		//line 23 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
		return ((thx.fp.TreeBagImpl) (thx.Arrays.reduce(((haxe.root.Array<A>) (xs) ), ((haxe.lang.Function) (new thx.fp._TreeBag.TreeBag_Impl__fromArray_23__Fun<A>()) ), ((java.lang.Object) (thx.fp.TreeBagImpl.Empty) ))) );
	}
	
	
	public static <A> thx.fp.TreeBagImpl flatten(thx.fp.TreeBagImpl xs)
	{
		//line 26 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
		return ((thx.fp.TreeBagImpl) (thx.fp._TreeBag.TreeBag_Impl_.flatMap(((thx.fp.TreeBagImpl) (xs) ), ((haxe.lang.Function) (new haxe.lang.Closure(thx.Functions.class, "identity")) ))) );
	}
	
	
	public static <A1> thx.fp.TreeBagImpl prepend(thx.fp.TreeBagImpl this1, A1 x)
	{
		//line 29 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
		return thx.fp.TreeBagImpl.Cons(x, this1);
	}
	
	
	public static <A1> thx.fp.TreeBagImpl append(thx.fp.TreeBagImpl this1, thx.fp.TreeBagImpl other)
	{
		//line 33 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
		switch (this1.index)
		{
			case 0:
			{
				//line 33 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
				switch (other.index)
				{
					case 0:
					{
						//line 33 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
						return thx.fp.TreeBagImpl.Empty;
					}
					
					
					default:
					{
						//line 33 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
						return other;
					}
					
				}
				
			}
			
			
			case 1:
			{
				//line 33 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
				switch (other.index)
				{
					case 0:
					{
						//line 33 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
						return this1;
					}
					
					
					default:
					{
						//line 33 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
						switch (((thx.fp.TreeBagImpl) (this1.params[1]) ).index)
						{
							case 0:
							{
								//line 37 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
								A1 x = ((A1) (this1.params[0]) );
								//line 33 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
								return thx.fp.TreeBagImpl.Cons(x, other);
							}
							
							
							default:
							{
								//line 33 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
								return thx.fp.TreeBagImpl.Branch(this1, other);
							}
							
						}
						
					}
					
				}
				
			}
			
			
			default:
			{
				//line 33 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
				switch (other.index)
				{
					case 0:
					{
						//line 33 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
						return this1;
					}
					
					
					default:
					{
						//line 33 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
						return thx.fp.TreeBagImpl.Branch(this1, other);
					}
					
				}
				
			}
			
		}
		
	}
	
	
	public static <A1> thx.fp.TreeBagImpl prependAll(thx.fp.TreeBagImpl this1, haxe.root.Array<A1> xs)
	{
		//line 43 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
		return ((thx.fp.TreeBagImpl) (thx.Arrays.reduce(((haxe.root.Array<A1>) (xs) ), ((haxe.lang.Function) (new thx.fp._TreeBag.TreeBag_Impl__prependAll_43__Fun<A1>()) ), ((java.lang.Object) (this1) ))) );
	}
	
	
	public static <A, B, A1> thx.fp.TreeBagImpl map(thx.fp.TreeBagImpl this1, haxe.lang.Function f)
	{
		//line 47 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
		switch (this1.index)
		{
			case 0:
			{
				//line 47 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
				return thx.fp.TreeBagImpl.Empty;
			}
			
			
			case 1:
			{
				//line 49 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
				thx.fp.TreeBagImpl xs = ((thx.fp.TreeBagImpl) (this1.params[1]) );
				//line 49 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
				A x = ((A) (this1.params[0]) );
				//line 47 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
				return thx.fp.TreeBagImpl.Cons(((B) (f.__hx_invoke1_o(0.0, x)) ), ((thx.fp.TreeBagImpl) (thx.fp._TreeBag.TreeBag_Impl_.map(((thx.fp.TreeBagImpl) (xs) ), ((haxe.lang.Function) (f) ))) ));
			}
			
			
			case 2:
			{
				//line 50 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
				thx.fp.TreeBagImpl r = ((thx.fp.TreeBagImpl) (this1.params[1]) );
				//line 50 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
				thx.fp.TreeBagImpl l = ((thx.fp.TreeBagImpl) (this1.params[0]) );
				//line 47 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
				return thx.fp.TreeBagImpl.Branch(((thx.fp.TreeBagImpl) (thx.fp._TreeBag.TreeBag_Impl_.map(((thx.fp.TreeBagImpl) (l) ), ((haxe.lang.Function) (f) ))) ), ((thx.fp.TreeBagImpl) (thx.fp._TreeBag.TreeBag_Impl_.map(((thx.fp.TreeBagImpl) (r) ), ((haxe.lang.Function) (f) ))) ));
			}
			
			
		}
		
		//line 46 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
		return null;
	}
	
	
	public static <A, B, A1> thx.fp.TreeBagImpl flatMap(thx.fp.TreeBagImpl this1, haxe.lang.Function f)
	{
		//line 55 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
		switch (this1.index)
		{
			case 0:
			{
				//line 55 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
				return thx.fp.TreeBagImpl.Empty;
			}
			
			
			case 1:
			{
				//line 57 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
				thx.fp.TreeBagImpl xs = ((thx.fp.TreeBagImpl) (this1.params[1]) );
				//line 57 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
				A x = ((A) (this1.params[0]) );
				//line 57 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
				thx.fp.TreeBagImpl this2 = ((thx.fp.TreeBagImpl) (f.__hx_invoke1_o(0.0, x)) );
				//line 57 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
				thx.fp.TreeBagImpl other = ((thx.fp.TreeBagImpl) (thx.fp._TreeBag.TreeBag_Impl_.flatMap(((thx.fp.TreeBagImpl) (xs) ), ((haxe.lang.Function) (f) ))) );
				//line 57 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
				switch (((thx.fp.TreeBagImpl) (this2) ).index)
				{
					case 0:
					{
						//line 57 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
						switch (other.index)
						{
							case 0:
							{
								//line 55 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
								return thx.fp.TreeBagImpl.Empty;
							}
							
							
							default:
							{
								//line 55 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
								return other;
							}
							
						}
						
					}
					
					
					case 1:
					{
						//line 57 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
						switch (other.index)
						{
							case 0:
							{
								//line 55 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
								return ((thx.fp.TreeBagImpl) (this2) );
							}
							
							
							default:
							{
								//line 57 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
								switch (((thx.fp.TreeBagImpl) (((thx.fp.TreeBagImpl) (this2) ).params[1]) ).index)
								{
									case 0:
									{
										//line 57 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
										B x1 = ((B) (((thx.fp.TreeBagImpl) (this2) ).params[0]) );
										//line 55 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
										return thx.fp.TreeBagImpl.Cons(x1, other);
									}
									
									
									default:
									{
										//line 55 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
										return thx.fp.TreeBagImpl.Branch(((thx.fp.TreeBagImpl) (this2) ), other);
									}
									
								}
								
							}
							
						}
						
					}
					
					
					default:
					{
						//line 57 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
						switch (other.index)
						{
							case 0:
							{
								//line 55 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
								return ((thx.fp.TreeBagImpl) (this2) );
							}
							
							
							default:
							{
								//line 55 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
								return thx.fp.TreeBagImpl.Branch(((thx.fp.TreeBagImpl) (this2) ), other);
							}
							
						}
						
					}
					
				}
				
			}
			
			
			case 2:
			{
				//line 58 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
				thx.fp.TreeBagImpl r = ((thx.fp.TreeBagImpl) (this1.params[1]) );
				//line 58 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
				thx.fp.TreeBagImpl l = ((thx.fp.TreeBagImpl) (this1.params[0]) );
				//line 58 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
				thx.fp.TreeBagImpl this3 = ((thx.fp.TreeBagImpl) (thx.fp._TreeBag.TreeBag_Impl_.flatMap(((thx.fp.TreeBagImpl) (l) ), ((haxe.lang.Function) (f) ))) );
				//line 58 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
				thx.fp.TreeBagImpl other1 = ((thx.fp.TreeBagImpl) (thx.fp._TreeBag.TreeBag_Impl_.flatMap(((thx.fp.TreeBagImpl) (r) ), ((haxe.lang.Function) (f) ))) );
				//line 58 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
				switch (((thx.fp.TreeBagImpl) (this3) ).index)
				{
					case 0:
					{
						//line 58 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
						switch (other1.index)
						{
							case 0:
							{
								//line 55 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
								return thx.fp.TreeBagImpl.Empty;
							}
							
							
							default:
							{
								//line 55 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
								return other1;
							}
							
						}
						
					}
					
					
					case 1:
					{
						//line 58 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
						switch (other1.index)
						{
							case 0:
							{
								//line 55 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
								return ((thx.fp.TreeBagImpl) (this3) );
							}
							
							
							default:
							{
								//line 58 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
								switch (((thx.fp.TreeBagImpl) (((thx.fp.TreeBagImpl) (this3) ).params[1]) ).index)
								{
									case 0:
									{
										//line 58 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
										B x2 = ((B) (((thx.fp.TreeBagImpl) (this3) ).params[0]) );
										//line 55 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
										return thx.fp.TreeBagImpl.Cons(x2, other1);
									}
									
									
									default:
									{
										//line 55 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
										return thx.fp.TreeBagImpl.Branch(((thx.fp.TreeBagImpl) (this3) ), other1);
									}
									
								}
								
							}
							
						}
						
					}
					
					
					default:
					{
						//line 58 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
						switch (other1.index)
						{
							case 0:
							{
								//line 55 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
								return ((thx.fp.TreeBagImpl) (this3) );
							}
							
							
							default:
							{
								//line 55 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
								return thx.fp.TreeBagImpl.Branch(((thx.fp.TreeBagImpl) (this3) ), other1);
							}
							
						}
						
					}
					
				}
				
			}
			
			
		}
		
		//line 54 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
		return null;
	}
	
	
	public static <A, B, A1> B foldLeft(thx.fp.TreeBagImpl this1, B b, haxe.lang.Function f)
	{
		//line 63 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
		B acc = b;
		//line 64 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
		thx.fp.ListImpl nodes = ((thx.fp.ListImpl) (thx.fp.ListImpl.Cons(this1, thx.fp.ListImpl.Nil)) );
		//line 65 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
		while (true)
		{
			//line 66 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
			switch (nodes.index)
			{
				case 0:
				{
					//line 67 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
					return acc;
				}
				
				
				case 1:
				{
					//line 68 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
					thx.fp.ListImpl ys = ((thx.fp.ListImpl) (((thx.fp.ListImpl) (nodes) ).params[1]) );
					//line 68 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
					thx.fp.TreeBagImpl y = ((thx.fp.TreeBagImpl) (((thx.fp.ListImpl) (nodes) ).params[0]) );
					//line 69 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
					switch (y.index)
					{
						case 0:
						{
							//line 71 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
							nodes = ys;
							//line 71 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
							break;
						}
						
						
						case 1:
						{
							//line 72 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
							thx.fp.TreeBagImpl xs = ((thx.fp.TreeBagImpl) (y.params[1]) );
							//line 72 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
							A x = ((A) (y.params[0]) );
							//line 72 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
							{
								//line 73 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
								acc = ((B) (f.__hx_invoke2_o(0.0, acc, 0.0, x)) );
								//line 74 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
								nodes = ((thx.fp.ListImpl) (thx.fp.ListImpl.Cons(xs, ((thx.fp.ListImpl) (ys) ))) );
							}
							
							//line 72 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
							break;
						}
						
						
						case 2:
						{
							//line 75 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
							thx.fp.TreeBagImpl r = ((thx.fp.TreeBagImpl) (y.params[1]) );
							//line 75 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
							thx.fp.TreeBagImpl l = ((thx.fp.TreeBagImpl) (y.params[0]) );
							//line 76 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
							nodes = thx.fp.ListImpl.Cons(l, ((thx.fp.ListImpl) (thx.fp.ListImpl.Cons(r, ((thx.fp.ListImpl) (ys) ))) ));
							//line 75 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
							break;
						}
						
						
					}
					
					//line 68 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
					break;
				}
				
				
			}
			
		}
		
	}
	
	
	public static <A1> int length(thx.fp.TreeBagImpl this1)
	{
		//line 83 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
		return ((int) (haxe.lang.Runtime.toInt(thx.fp._TreeBag.TreeBag_Impl_.foldLeft(((thx.fp.TreeBagImpl) (this1) ), ((java.lang.Object) (0) ), ((haxe.lang.Function) (new thx.fp._TreeBag.TreeBag_Impl__length_83__Fun<A1>()) )))) );
	}
	
	
	public static <A1> haxe.root.Array<A1> toArray(thx.fp.TreeBagImpl this1)
	{
		//line 86 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
		return ((haxe.root.Array<A1>) (thx.fp._TreeBag.TreeBag_Impl_.foldLeft(((thx.fp.TreeBagImpl) (this1) ), ((java.lang.Object) (new haxe.root.Array<A1>(( (A1[]) (new java.lang.Object[] {}) ))) ), ((haxe.lang.Function) (new thx.fp._TreeBag.TreeBag_Impl__toArray_86__Fun<A1>()) ))) );
	}
	
	
	public static <A> java.lang.Object monoid()
	{
		//line 90 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
		{
			//line 92 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
			haxe.lang.Function __temp_odecl1 = new thx.fp._TreeBag.TreeBag_Impl__monoid_92__Fun<A>();
			//line 90 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/fp/TreeBag.hx"
			return new haxe.lang.DynamicObject(new java.lang.String[]{"append", "zero"}, new java.lang.Object[]{__temp_odecl1, ((thx.fp.TreeBagImpl) (thx.fp.TreeBagImpl.Empty) )}, new java.lang.String[]{}, new double[]{});
		}
		
	}
	
	
}


