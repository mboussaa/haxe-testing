// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_Option
#include <haxe/ds/Option.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_thx_Arrays
#include <thx/Arrays.h>
#endif
#ifndef INCLUDED_thx_Ints
#include <thx/Ints.h>
#endif
#ifndef INCLUDED_thx_Options
#include <thx/Options.h>
#endif
#ifndef INCLUDED_thx_OrderingImpl
#include <thx/OrderingImpl.h>
#endif
#ifndef INCLUDED_thx_Strings
#include <thx/Strings.h>
#endif
#ifndef INCLUDED_thx__Ord_Ord_Impl_
#include <thx/_Ord/Ord_Impl_.h>
#endif
#ifndef INCLUDED_thx_fp_CO
#include <thx/fp/CO.h>
#endif
#ifndef INCLUDED_thx_fp_CO2
#include <thx/fp/CO2.h>
#endif
#ifndef INCLUDED_thx_fp_MapImpl
#include <thx/fp/MapImpl.h>
#endif
#ifndef INCLUDED_thx_fp_StringMap
#include <thx/fp/StringMap.h>
#endif
#ifndef INCLUDED_thx_fp_TestMap
#include <thx/fp/TestMap.h>
#endif
#ifndef INCLUDED_thx_fp__Map_Map_Impl_
#include <thx/fp/_Map/Map_Impl_.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace fp{

void TestMap_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.fp.TestMap","new",0x4ba50ac2,"thx.fp.TestMap.new","thx/fp/TestMap.hx",13,0xd5adc18e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(  13)		this->x = i;
            	}

Dynamic TestMap_obj::__CreateEmpty() { return new TestMap_obj; }

hx::ObjectPtr< TestMap_obj > TestMap_obj::__new(Int i)
{
	hx::ObjectPtr< TestMap_obj > _hx_result = new TestMap_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestMap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestMap_obj > _hx_result = new TestMap_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestMap_obj::testRemove(){
            	HX_STACK_FRAME("thx.fp.TestMap","testRemove",0xa1769814,"thx.fp.TestMap.testRemove","thx/fp/TestMap.hx",17,0xd5adc18e)
            	HX_STACK_THIS(this)
HXLINE(  17)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  17)		HX_VARI( Int,_g) = this->x;
HXDLIN(  17)		while((_g1 < _g)){
HXLINE(  17)			++_g1;
HXLINE(  18)			HX_VARI( ::hx::EnumBase,map) = ::thx::fp::MapImpl_obj::Bin((int)1,HX_("Y",59,00,00,00),(int)1,::thx::fp::MapImpl_obj::Tip_dyn(),::thx::fp::MapImpl_obj::Tip_dyn());
HXDLIN(  18)			HX_VARI_NAME( ::hx::EnumBase,map1,"map") = ::thx::fp::_Map::Map_Impl__obj::insert(map,HX_("X",58,00,00,00),(int)2,::thx::Strings_obj::order);
HXDLIN(  18)			HX_VARI_NAME( ::hx::EnumBase,map2,"map") = ::thx::fp::_Map::Map_Impl__obj::insert(map1,HX_("Z",5a,00,00,00),(int)3,::thx::Strings_obj::order);
HXDLIN(  18)			HX_VARI( ::hx::EnumBase,m) = ::thx::fp::_Map::Map_Impl__obj::_hx_delete(map2,HX_("X",58,00,00,00),::thx::Strings_obj::order);
HXLINE(  22)			::hx::EnumBase _hx_tmp = ::haxe::ds::Option_obj::Some((int)1);
HXDLIN(  22)			::hx::EnumBase _hx_tmp1 = ::thx::fp::_Map::Map_Impl__obj::lookup(m,HX_("Y",59,00,00,00),::thx::Strings_obj::order);
HXDLIN(  22)			::utest::Assert_obj::same(_hx_tmp,_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestMap.hx",b4,0b,95,c8),22,HX_("thx.fp.TestMap",d0,41,dc,3f),HX_("testRemove",36,e2,7c,1d)));
HXLINE(  23)			::hx::EnumBase _hx_tmp2 = ::haxe::ds::Option_obj::Some((int)3);
HXDLIN(  23)			::hx::EnumBase _hx_tmp3 = ::thx::fp::_Map::Map_Impl__obj::lookup(m,HX_("Z",5a,00,00,00),::thx::Strings_obj::order);
HXDLIN(  23)			::utest::Assert_obj::same(_hx_tmp2,_hx_tmp3,null(),null(),null(),hx::SourceInfo(HX_("TestMap.hx",b4,0b,95,c8),23,HX_("thx.fp.TestMap",d0,41,dc,3f),HX_("testRemove",36,e2,7c,1d)));
HXLINE(  24)			Int _hx_tmp4 = ::thx::fp::_Map::Map_Impl__obj::size(m);
HXDLIN(  24)			::utest::Assert_obj::equals((int)2,_hx_tmp4,null(),hx::SourceInfo(HX_("TestMap.hx",b4,0b,95,c8),24,HX_("thx.fp.TestMap",d0,41,dc,3f),HX_("testRemove",36,e2,7c,1d)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestMap_obj,testRemove,(void))

void TestMap_obj::testEmpty(){
            	HX_STACK_FRAME("thx.fp.TestMap","testEmpty",0x1f0ca8bd,"thx.fp.TestMap.testEmpty","thx/fp/TestMap.hx",28,0xd5adc18e)
            	HX_STACK_THIS(this)
HXLINE(  28)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  28)		HX_VARI( Int,_g) = this->x;
HXDLIN(  28)		while((_g1 < _g)){
HXLINE(  28)			++_g1;
HXLINE(  29)			HX_VARI( ::hx::EnumBase,m) = ::thx::fp::MapImpl_obj::Tip_dyn();
HXLINE(  30)			::hx::EnumBase _hx_tmp = ::thx::fp::_Map::Map_Impl__obj::lookup(m,HX_("some",f4,22,58,4c),::thx::Strings_obj::order);
HXDLIN(  30)			::utest::Assert_obj::same(::haxe::ds::Option_obj::None_dyn(),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestMap.hx",b4,0b,95,c8),30,HX_("thx.fp.TestMap",d0,41,dc,3f),HX_("testEmpty",db,78,dc,38)));
HXLINE(  31)			Int _hx_tmp1 = ::thx::fp::_Map::Map_Impl__obj::size(m);
HXDLIN(  31)			::utest::Assert_obj::equals((int)0,_hx_tmp1,null(),hx::SourceInfo(HX_("TestMap.hx",b4,0b,95,c8),31,HX_("thx.fp.TestMap",d0,41,dc,3f),HX_("testEmpty",db,78,dc,38)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestMap_obj,testEmpty,(void))

void TestMap_obj::testSizes(){
            	HX_STACK_FRAME("thx.fp.TestMap","testSizes",0x2c0b76c2,"thx.fp.TestMap.testSizes","thx/fp/TestMap.hx",35,0xd5adc18e)
            	HX_STACK_THIS(this)
HXLINE(  35)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  35)		HX_VARI( Int,_g) = this->x;
HXDLIN(  35)		while((_g1 < _g)){
HXLINE(  35)			++_g1;
HXLINE(  36)			HX_VARI( ::hx::EnumBase,map) = ::thx::fp::MapImpl_obj::Bin((int)1,HX_("B",42,00,00,00),(int)1,::thx::fp::MapImpl_obj::Tip_dyn(),::thx::fp::MapImpl_obj::Tip_dyn());
HXDLIN(  36)			HX_VARI_NAME( ::hx::EnumBase,map1,"map") = ::thx::fp::_Map::Map_Impl__obj::insert(map,HX_("A",41,00,00,00),(int)1,::thx::Strings_obj::order);
HXDLIN(  36)			::hx::EnumBase _hx_tmp = ::thx::fp::_Map::Map_Impl__obj::insert(map1,HX_("C",43,00,00,00),(int)1,::thx::Strings_obj::order);
HXDLIN(  36)			Int _hx_tmp1 = ::thx::fp::_Map::Map_Impl__obj::size(_hx_tmp);
HXDLIN(  36)			::utest::Assert_obj::equals((int)3,_hx_tmp1,null(),hx::SourceInfo(HX_("TestMap.hx",b4,0b,95,c8),36,HX_("thx.fp.TestMap",d0,41,dc,3f),HX_("testSizes",e0,46,db,45)));
HXLINE(  37)			HX_VARI_NAME( ::hx::EnumBase,map2,"map") = ::thx::fp::MapImpl_obj::Bin((int)1,HX_("A",41,00,00,00),(int)1,::thx::fp::MapImpl_obj::Tip_dyn(),::thx::fp::MapImpl_obj::Tip_dyn());
HXDLIN(  37)			HX_VARI_NAME( ::hx::EnumBase,map3,"map") = ::thx::fp::_Map::Map_Impl__obj::insert(map2,HX_("B",42,00,00,00),(int)1,::thx::Strings_obj::order);
HXDLIN(  37)			::hx::EnumBase _hx_tmp2 = ::thx::fp::_Map::Map_Impl__obj::insert(map3,HX_("C",43,00,00,00),(int)1,::thx::Strings_obj::order);
HXDLIN(  37)			Int _hx_tmp3 = ::thx::fp::_Map::Map_Impl__obj::size(_hx_tmp2);
HXDLIN(  37)			::utest::Assert_obj::equals((int)3,_hx_tmp3,null(),hx::SourceInfo(HX_("TestMap.hx",b4,0b,95,c8),37,HX_("thx.fp.TestMap",d0,41,dc,3f),HX_("testSizes",e0,46,db,45)));
HXLINE(  38)			HX_VARI_NAME( ::hx::EnumBase,map4,"map") = ::thx::fp::MapImpl_obj::Bin((int)1,HX_("C",43,00,00,00),(int)1,::thx::fp::MapImpl_obj::Tip_dyn(),::thx::fp::MapImpl_obj::Tip_dyn());
HXDLIN(  38)			HX_VARI_NAME( ::hx::EnumBase,map5,"map") = ::thx::fp::_Map::Map_Impl__obj::insert(map4,HX_("B",42,00,00,00),(int)1,::thx::Strings_obj::order);
HXDLIN(  38)			::hx::EnumBase _hx_tmp4 = ::thx::fp::_Map::Map_Impl__obj::insert(map5,HX_("A",41,00,00,00),(int)1,::thx::Strings_obj::order);
HXDLIN(  38)			Int _hx_tmp5 = ::thx::fp::_Map::Map_Impl__obj::size(_hx_tmp4);
HXDLIN(  38)			::utest::Assert_obj::equals((int)3,_hx_tmp5,null(),hx::SourceInfo(HX_("TestMap.hx",b4,0b,95,c8),38,HX_("thx.fp.TestMap",d0,41,dc,3f),HX_("testSizes",e0,46,db,45)));
HXLINE(  39)			HX_VARI_NAME( ::hx::EnumBase,map6,"map") = ::thx::fp::MapImpl_obj::Bin((int)1,HX_("B",42,00,00,00),(int)1,::thx::fp::MapImpl_obj::Tip_dyn(),::thx::fp::MapImpl_obj::Tip_dyn());
HXDLIN(  39)			HX_VARI_NAME( ::hx::EnumBase,map7,"map") = ::thx::fp::_Map::Map_Impl__obj::insert(map6,HX_("C",43,00,00,00),(int)1,::thx::Strings_obj::order);
HXDLIN(  39)			::hx::EnumBase _hx_tmp6 = ::thx::fp::_Map::Map_Impl__obj::insert(map7,HX_("A",41,00,00,00),(int)1,::thx::Strings_obj::order);
HXDLIN(  39)			Int _hx_tmp7 = ::thx::fp::_Map::Map_Impl__obj::size(_hx_tmp6);
HXDLIN(  39)			::utest::Assert_obj::equals((int)3,_hx_tmp7,null(),hx::SourceInfo(HX_("TestMap.hx",b4,0b,95,c8),39,HX_("thx.fp.TestMap",d0,41,dc,3f),HX_("testSizes",e0,46,db,45)));
HXLINE(  40)			HX_VARI_NAME( ::hx::EnumBase,map8,"map") = ::thx::fp::MapImpl_obj::Bin((int)1,HX_("C",43,00,00,00),(int)1,::thx::fp::MapImpl_obj::Tip_dyn(),::thx::fp::MapImpl_obj::Tip_dyn());
HXDLIN(  40)			HX_VARI_NAME( ::hx::EnumBase,map9,"map") = ::thx::fp::_Map::Map_Impl__obj::insert(map8,HX_("A",41,00,00,00),(int)1,::thx::Strings_obj::order);
HXDLIN(  40)			::hx::EnumBase _hx_tmp8 = ::thx::fp::_Map::Map_Impl__obj::insert(map9,HX_("B",42,00,00,00),(int)1,::thx::Strings_obj::order);
HXDLIN(  40)			Int _hx_tmp9 = ::thx::fp::_Map::Map_Impl__obj::size(_hx_tmp8);
HXDLIN(  40)			::utest::Assert_obj::equals((int)3,_hx_tmp9,null(),hx::SourceInfo(HX_("TestMap.hx",b4,0b,95,c8),40,HX_("thx.fp.TestMap",d0,41,dc,3f),HX_("testSizes",e0,46,db,45)));
HXLINE(  41)			HX_VARI_NAME( ::hx::EnumBase,map10,"map") = ::thx::fp::MapImpl_obj::Bin((int)1,HX_("A",41,00,00,00),(int)1,::thx::fp::MapImpl_obj::Tip_dyn(),::thx::fp::MapImpl_obj::Tip_dyn());
HXDLIN(  41)			HX_VARI_NAME( ::hx::EnumBase,map11,"map") = ::thx::fp::_Map::Map_Impl__obj::insert(map10,HX_("C",43,00,00,00),(int)1,::thx::Strings_obj::order);
HXDLIN(  41)			::hx::EnumBase _hx_tmp10 = ::thx::fp::_Map::Map_Impl__obj::insert(map11,HX_("B",42,00,00,00),(int)1,::thx::Strings_obj::order);
HXDLIN(  41)			Int _hx_tmp11 = ::thx::fp::_Map::Map_Impl__obj::size(_hx_tmp10);
HXDLIN(  41)			::utest::Assert_obj::equals((int)3,_hx_tmp11,null(),hx::SourceInfo(HX_("TestMap.hx",b4,0b,95,c8),41,HX_("thx.fp.TestMap",d0,41,dc,3f),HX_("testSizes",e0,46,db,45)));
HXLINE(  43)			HX_VARI_NAME( ::hx::EnumBase,map12,"map") = ::thx::fp::MapImpl_obj::Bin((int)1,HX_("A",41,00,00,00),(int)1,::thx::fp::MapImpl_obj::Tip_dyn(),::thx::fp::MapImpl_obj::Tip_dyn());
HXDLIN(  43)			HX_VARI_NAME( ::hx::EnumBase,map13,"map") = ::thx::fp::_Map::Map_Impl__obj::insert(map12,HX_("A",41,00,00,00),(int)1,::thx::Strings_obj::order);
HXDLIN(  43)			::hx::EnumBase _hx_tmp12 = ::thx::fp::_Map::Map_Impl__obj::insert(map13,HX_("A",41,00,00,00),(int)1,::thx::Strings_obj::order);
HXDLIN(  43)			Int _hx_tmp13 = ::thx::fp::_Map::Map_Impl__obj::size(_hx_tmp12);
HXDLIN(  43)			::utest::Assert_obj::equals((int)1,_hx_tmp13,null(),hx::SourceInfo(HX_("TestMap.hx",b4,0b,95,c8),43,HX_("thx.fp.TestMap",d0,41,dc,3f),HX_("testSizes",e0,46,db,45)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestMap_obj,testSizes,(void))

void TestMap_obj::testFoldLeft(){
            	HX_STACK_FRAME("thx.fp.TestMap","testFoldLeft",0xf84eb478,"thx.fp.TestMap.testFoldLeft","thx/fp/TestMap.hx",47,0xd5adc18e)
            	HX_STACK_THIS(this)
HXLINE(  47)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  47)		HX_VARI( Int,_g) = this->x;
HXDLIN(  47)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            			::Array< Int > _hx_run(::Array< Int > arr1,Int v){
            				HX_STACK_FRAME("thx.fp.TestMap","testFoldLeft",0xf84eb478,"thx.fp.TestMap.testFoldLeft","thx/fp/TestMap.hx",49,0xd5adc18e)
            				HX_STACK_ARG(arr1,"arr1")
            				HX_STACK_ARG(v,"v")
HXLINE(  50)				arr1->push(v);
HXLINE(  51)				return arr1;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(  47)			++_g1;
HXLINE(  48)			HX_VARI( ::hx::EnumBase,map) = ::thx::fp::MapImpl_obj::Bin((int)1,HX_("A",41,00,00,00),(int)1,::thx::fp::MapImpl_obj::Tip_dyn(),::thx::fp::MapImpl_obj::Tip_dyn());
HXDLIN(  48)			HX_VARI_NAME( ::hx::EnumBase,map1,"map") = ::thx::fp::_Map::Map_Impl__obj::insert(map,HX_("B",42,00,00,00),(int)2,::thx::Strings_obj::order);
HXDLIN(  48)			HX_VARI_NAME( ::hx::EnumBase,map2,"map") = ::thx::fp::_Map::Map_Impl__obj::insert(map1,HX_("C",43,00,00,00),(int)3,::thx::Strings_obj::order);
HXLINE(  49)			HX_VARI( ::Array< Int >,arr) = ( (::Array< Int >)(::thx::fp::_Map::Map_Impl__obj::foldLeft(map2,::Array_obj< Int >::__new(0), ::Dynamic(new _hx_Closure_0()))) );
HXLINE(  53)			::Array< Int > _hx_tmp = ::thx::Arrays_obj::order(arr,::thx::Ints_obj::compare_dyn());
HXDLIN(  53)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestMap.hx",b4,0b,95,c8),53,HX_("thx.fp.TestMap",d0,41,dc,3f),HX_("testFoldLeft",1a,4b,15,3a)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestMap_obj,testFoldLeft,(void))

void TestMap_obj::testFoldLeftKeys(){
            	HX_STACK_FRAME("thx.fp.TestMap","testFoldLeftKeys",0xa1ae5e8c,"thx.fp.TestMap.testFoldLeftKeys","thx/fp/TestMap.hx",57,0xd5adc18e)
            	HX_STACK_THIS(this)
HXLINE(  57)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  57)		HX_VARI( Int,_g) = this->x;
HXDLIN(  57)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            			::Array< ::String > _hx_run(::Array< ::String > arr1,::String k){
            				HX_STACK_FRAME("thx.fp.TestMap","testFoldLeftKeys",0xa1ae5e8c,"thx.fp.TestMap.testFoldLeftKeys","thx/fp/TestMap.hx",59,0xd5adc18e)
            				HX_STACK_ARG(arr1,"arr1")
            				HX_STACK_ARG(k,"k")
HXLINE(  60)				arr1->push(k);
HXLINE(  61)				return arr1;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(  57)			++_g1;
HXLINE(  58)			HX_VARI( ::hx::EnumBase,map) = ::thx::fp::MapImpl_obj::Bin((int)1,HX_("A",41,00,00,00),(int)1,::thx::fp::MapImpl_obj::Tip_dyn(),::thx::fp::MapImpl_obj::Tip_dyn());
HXDLIN(  58)			HX_VARI_NAME( ::hx::EnumBase,map1,"map") = ::thx::fp::_Map::Map_Impl__obj::insert(map,HX_("B",42,00,00,00),(int)2,::thx::Strings_obj::order);
HXDLIN(  58)			HX_VARI_NAME( ::hx::EnumBase,map2,"map") = ::thx::fp::_Map::Map_Impl__obj::insert(map1,HX_("C",43,00,00,00),(int)3,::thx::Strings_obj::order);
HXLINE(  59)			HX_VARI( ::Array< ::String >,arr) = ( (::Array< ::String >)(::thx::fp::_Map::Map_Impl__obj::foldLeftKeys(map2,::Array_obj< ::String >::__new(0), ::Dynamic(new _hx_Closure_0()))) );
HXLINE(  63)			::Array< ::String > _hx_tmp = ::thx::Arrays_obj::order(arr,::thx::Strings_obj::compare_dyn());
HXDLIN(  63)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,HX_("A",41,00,00,00))->init(1,HX_("B",42,00,00,00))->init(2,HX_("C",43,00,00,00)),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestMap.hx",b4,0b,95,c8),63,HX_("thx.fp.TestMap",d0,41,dc,3f),HX_("testFoldLeftKeys",2e,ee,61,a0)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestMap_obj,testFoldLeftKeys,(void))

void TestMap_obj::testSet(){
            	HX_STACK_FRAME("thx.fp.TestMap","testSet",0x30811dd2,"thx.fp.TestMap.testSet","thx/fp/TestMap.hx",67,0xd5adc18e)
            	HX_STACK_THIS(this)
HXLINE(  67)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  67)		HX_VARI( Int,_g) = this->x;
HXDLIN(  67)		while((_g1 < _g)){
HXLINE(  67)			++_g1;
HXLINE(  68)			HX_VARI( ::hx::EnumBase,map) = ::thx::fp::MapImpl_obj::Bin((int)1,HX_("Y",59,00,00,00),(int)1,::thx::fp::MapImpl_obj::Tip_dyn(),::thx::fp::MapImpl_obj::Tip_dyn());
HXDLIN(  68)			HX_VARI_NAME( ::hx::EnumBase,map1,"map") = ::thx::fp::_Map::Map_Impl__obj::insert(map,HX_("X",58,00,00,00),(int)2,::thx::Strings_obj::order);
HXDLIN(  68)			HX_VARI( ::hx::EnumBase,m) = ::thx::fp::_Map::Map_Impl__obj::insert(map1,HX_("Z",5a,00,00,00),(int)3,::thx::Strings_obj::order);
HXLINE(  69)			::hx::EnumBase _hx_tmp = ::haxe::ds::Option_obj::Some((int)2);
HXDLIN(  69)			::hx::EnumBase _hx_tmp1 = ::thx::fp::_Map::Map_Impl__obj::lookup(m,HX_("X",58,00,00,00),::thx::Strings_obj::order);
HXDLIN(  69)			::utest::Assert_obj::same(_hx_tmp,_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestMap.hx",b4,0b,95,c8),69,HX_("thx.fp.TestMap",d0,41,dc,3f),HX_("testSet",70,0a,c6,bd)));
HXLINE(  70)			::hx::EnumBase _hx_tmp2 = ::haxe::ds::Option_obj::Some((int)1);
HXDLIN(  70)			::hx::EnumBase _hx_tmp3 = ::thx::fp::_Map::Map_Impl__obj::lookup(m,HX_("Y",59,00,00,00),::thx::Strings_obj::order);
HXDLIN(  70)			::utest::Assert_obj::same(_hx_tmp2,_hx_tmp3,null(),null(),null(),hx::SourceInfo(HX_("TestMap.hx",b4,0b,95,c8),70,HX_("thx.fp.TestMap",d0,41,dc,3f),HX_("testSet",70,0a,c6,bd)));
HXLINE(  71)			::hx::EnumBase _hx_tmp4 = ::haxe::ds::Option_obj::Some((int)3);
HXDLIN(  71)			::hx::EnumBase _hx_tmp5 = ::thx::fp::_Map::Map_Impl__obj::lookup(m,HX_("Z",5a,00,00,00),::thx::Strings_obj::order);
HXDLIN(  71)			::utest::Assert_obj::same(_hx_tmp4,_hx_tmp5,null(),null(),null(),hx::SourceInfo(HX_("TestMap.hx",b4,0b,95,c8),71,HX_("thx.fp.TestMap",d0,41,dc,3f),HX_("testSet",70,0a,c6,bd)));
HXLINE(  72)			Int _hx_tmp6 = ::thx::fp::_Map::Map_Impl__obj::size(m);
HXDLIN(  72)			::utest::Assert_obj::equals((int)3,_hx_tmp6,null(),hx::SourceInfo(HX_("TestMap.hx",b4,0b,95,c8),72,HX_("thx.fp.TestMap",d0,41,dc,3f),HX_("testSet",70,0a,c6,bd)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestMap_obj,testSet,(void))

void TestMap_obj::testObjectSet(){
            	HX_STACK_FRAME("thx.fp.TestMap","testObjectSet",0x2abf9c53,"thx.fp.TestMap.testObjectSet","thx/fp/TestMap.hx",76,0xd5adc18e)
            	HX_STACK_THIS(this)
HXLINE(  76)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  76)		HX_VARI( Int,_g) = this->x;
HXDLIN(  76)		while((_g1 < _g)){
HXLINE(  76)			++_g1;
HXLINE(  77)			HX_VARI(  ::thx::fp::CO,a) =  ::thx::fp::CO_obj::__new(HX_("a",61,00,00,00));
HXDLIN(  77)			HX_VARI(  ::thx::fp::CO,b) =  ::thx::fp::CO_obj::__new(HX_("b",62,00,00,00));
HXDLIN(  77)			HX_VARI(  ::thx::fp::CO,c) =  ::thx::fp::CO_obj::__new(HX_("c",63,00,00,00));
HXLINE(  80)			HX_VARI( ::hx::EnumBase,map) = ::thx::fp::MapImpl_obj::Bin((int)1,a,(int)1,::thx::fp::MapImpl_obj::Tip_dyn(),::thx::fp::MapImpl_obj::Tip_dyn());
HXDLIN(  80)			 ::Dynamic _hx_tmp = ::thx::_Ord::Ord_Impl__obj::forComparableOrd();
HXDLIN(  80)			HX_VARI_NAME( ::hx::EnumBase,map1,"map") = ::thx::fp::_Map::Map_Impl__obj::insert(map,b,(int)2,_hx_tmp);
HXDLIN(  80)			 ::Dynamic _hx_tmp1 = ::thx::_Ord::Ord_Impl__obj::forComparableOrd();
HXLINE(  77)			HX_VARI( ::hx::EnumBase,m) = ::thx::fp::_Map::Map_Impl__obj::insert(map1,c,(int)3,_hx_tmp1);
HXLINE(  84)			::hx::EnumBase _hx_tmp2 = ::haxe::ds::Option_obj::Some((int)1);
HXDLIN(  84)			 ::Dynamic _hx_tmp3 = ::thx::_Ord::Ord_Impl__obj::forComparableOrd();
HXDLIN(  84)			::hx::EnumBase _hx_tmp4 = ::thx::fp::_Map::Map_Impl__obj::lookup(m,a,_hx_tmp3);
HXDLIN(  84)			::utest::Assert_obj::same(_hx_tmp2,_hx_tmp4,null(),null(),null(),hx::SourceInfo(HX_("TestMap.hx",b4,0b,95,c8),84,HX_("thx.fp.TestMap",d0,41,dc,3f),HX_("testObjectSet",71,d3,bc,76)));
HXLINE(  85)			::hx::EnumBase _hx_tmp5 = ::haxe::ds::Option_obj::Some((int)2);
HXDLIN(  85)			 ::Dynamic _hx_tmp6 = ::thx::_Ord::Ord_Impl__obj::forComparableOrd();
HXDLIN(  85)			::hx::EnumBase _hx_tmp7 = ::thx::fp::_Map::Map_Impl__obj::lookup(m,b,_hx_tmp6);
HXDLIN(  85)			::utest::Assert_obj::same(_hx_tmp5,_hx_tmp7,null(),null(),null(),hx::SourceInfo(HX_("TestMap.hx",b4,0b,95,c8),85,HX_("thx.fp.TestMap",d0,41,dc,3f),HX_("testObjectSet",71,d3,bc,76)));
HXLINE(  86)			::hx::EnumBase _hx_tmp8 = ::haxe::ds::Option_obj::Some((int)3);
HXDLIN(  86)			 ::Dynamic _hx_tmp9 = ::thx::_Ord::Ord_Impl__obj::forComparableOrd();
HXDLIN(  86)			::hx::EnumBase _hx_tmp10 = ::thx::fp::_Map::Map_Impl__obj::lookup(m,c,_hx_tmp9);
HXDLIN(  86)			::utest::Assert_obj::same(_hx_tmp8,_hx_tmp10,null(),null(),null(),hx::SourceInfo(HX_("TestMap.hx",b4,0b,95,c8),86,HX_("thx.fp.TestMap",d0,41,dc,3f),HX_("testObjectSet",71,d3,bc,76)));
HXLINE(  87)			Int _hx_tmp11 = ::thx::fp::_Map::Map_Impl__obj::size(m);
HXDLIN(  87)			::utest::Assert_obj::equals((int)3,_hx_tmp11,null(),hx::SourceInfo(HX_("TestMap.hx",b4,0b,95,c8),87,HX_("thx.fp.TestMap",d0,41,dc,3f),HX_("testObjectSet",71,d3,bc,76)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestMap_obj,testObjectSet,(void))

void TestMap_obj::testObjectSet2(){
            	HX_STACK_FRAME("thx.fp.TestMap","testObjectSet2",0x3ce92c7f,"thx.fp.TestMap.testObjectSet2","thx/fp/TestMap.hx",91,0xd5adc18e)
            	HX_STACK_THIS(this)
HXLINE(  91)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  91)		HX_VARI( Int,_g) = this->x;
HXDLIN(  91)		while((_g1 < _g)){
HXLINE(  91)			++_g1;
HXLINE(  92)			HX_VARI(  ::thx::fp::CO2,a) =  ::thx::fp::CO2_obj::__new(HX_("a",61,00,00,00));
HXDLIN(  92)			HX_VARI(  ::thx::fp::CO2,b) =  ::thx::fp::CO2_obj::__new(HX_("b",62,00,00,00));
HXDLIN(  92)			HX_VARI(  ::thx::fp::CO2,c) =  ::thx::fp::CO2_obj::__new(HX_("c",63,00,00,00));
HXLINE(  95)			HX_VARI( ::hx::EnumBase,map) = ::thx::fp::MapImpl_obj::Bin((int)1,a,(int)1,::thx::fp::MapImpl_obj::Tip_dyn(),::thx::fp::MapImpl_obj::Tip_dyn());
HXDLIN(  95)			 ::Dynamic _hx_tmp = ::thx::_Ord::Ord_Impl__obj::forComparable();
HXDLIN(  95)			HX_VARI_NAME( ::hx::EnumBase,map1,"map") = ::thx::fp::_Map::Map_Impl__obj::insert(map,b,(int)2,_hx_tmp);
HXDLIN(  95)			 ::Dynamic _hx_tmp1 = ::thx::_Ord::Ord_Impl__obj::forComparable();
HXLINE(  92)			HX_VARI( ::hx::EnumBase,m) = ::thx::fp::_Map::Map_Impl__obj::insert(map1,c,(int)3,_hx_tmp1);
HXLINE(  99)			::hx::EnumBase _hx_tmp2 = ::haxe::ds::Option_obj::Some((int)1);
HXDLIN(  99)			 ::Dynamic _hx_tmp3 = ::thx::_Ord::Ord_Impl__obj::forComparable();
HXDLIN(  99)			::hx::EnumBase _hx_tmp4 = ::thx::fp::_Map::Map_Impl__obj::lookup(m,a,_hx_tmp3);
HXDLIN(  99)			::utest::Assert_obj::same(_hx_tmp2,_hx_tmp4,null(),null(),null(),hx::SourceInfo(HX_("TestMap.hx",b4,0b,95,c8),99,HX_("thx.fp.TestMap",d0,41,dc,3f),HX_("testObjectSet2",a1,2f,7c,6e)));
HXLINE( 100)			::hx::EnumBase _hx_tmp5 = ::haxe::ds::Option_obj::Some((int)2);
HXDLIN( 100)			 ::Dynamic _hx_tmp6 = ::thx::_Ord::Ord_Impl__obj::forComparable();
HXDLIN( 100)			::hx::EnumBase _hx_tmp7 = ::thx::fp::_Map::Map_Impl__obj::lookup(m,b,_hx_tmp6);
HXDLIN( 100)			::utest::Assert_obj::same(_hx_tmp5,_hx_tmp7,null(),null(),null(),hx::SourceInfo(HX_("TestMap.hx",b4,0b,95,c8),100,HX_("thx.fp.TestMap",d0,41,dc,3f),HX_("testObjectSet2",a1,2f,7c,6e)));
HXLINE( 101)			::hx::EnumBase _hx_tmp8 = ::haxe::ds::Option_obj::Some((int)3);
HXDLIN( 101)			 ::Dynamic _hx_tmp9 = ::thx::_Ord::Ord_Impl__obj::forComparable();
HXDLIN( 101)			::hx::EnumBase _hx_tmp10 = ::thx::fp::_Map::Map_Impl__obj::lookup(m,c,_hx_tmp9);
HXDLIN( 101)			::utest::Assert_obj::same(_hx_tmp8,_hx_tmp10,null(),null(),null(),hx::SourceInfo(HX_("TestMap.hx",b4,0b,95,c8),101,HX_("thx.fp.TestMap",d0,41,dc,3f),HX_("testObjectSet2",a1,2f,7c,6e)));
HXLINE( 102)			Int _hx_tmp11 = ::thx::fp::_Map::Map_Impl__obj::size(m);
HXDLIN( 102)			::utest::Assert_obj::equals((int)3,_hx_tmp11,null(),hx::SourceInfo(HX_("TestMap.hx",b4,0b,95,c8),102,HX_("thx.fp.TestMap",d0,41,dc,3f),HX_("testObjectSet2",a1,2f,7c,6e)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestMap_obj,testObjectSet2,(void))

void TestMap_obj::testFromNative(){
            	HX_STACK_FRAME("thx.fp.TestMap","testFromNative",0xd3c0f271,"thx.fp.TestMap.testFromNative","thx/fp/TestMap.hx",106,0xd5adc18e)
            	HX_STACK_THIS(this)
HXLINE( 106)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 106)		HX_VARI( Int,_g) = this->x;
HXDLIN( 106)		while((_g1 < _g)){
HXLINE( 106)			++_g1;
HXLINE( 107)			HX_VARI(  ::haxe::ds::StringMap,_g2) =  ::haxe::ds::StringMap_obj::__new();
HXDLIN( 107)			_g2->set(HX_("a",61,00,00,00),(int)1);
HXDLIN( 107)			_g2->set(HX_("b",62,00,00,00),(int)2);
HXDLIN( 107)			HX_VARI( ::hx::EnumBase,map) = ::thx::fp::StringMap_obj::fromNative(_g2);
HXLINE( 109)			Int _hx_tmp = ::thx::fp::_Map::Map_Impl__obj::size(map);
HXDLIN( 109)			::utest::Assert_obj::equals((int)2,_hx_tmp,null(),hx::SourceInfo(HX_("TestMap.hx",b4,0b,95,c8),109,HX_("thx.fp.TestMap",d0,41,dc,3f),HX_("testFromNative",93,f5,53,05)));
HXLINE( 110)			::hx::EnumBase _hx_tmp1 = ::thx::fp::_Map::Map_Impl__obj::lookup(map,HX_("a",61,00,00,00),::thx::Strings_obj::order);
HXDLIN( 110)			Bool _hx_tmp2 = ::thx::Options_obj::toBool(_hx_tmp1);
HXDLIN( 110)			::utest::Assert_obj::isTrue(_hx_tmp2,null(),hx::SourceInfo(HX_("TestMap.hx",b4,0b,95,c8),110,HX_("thx.fp.TestMap",d0,41,dc,3f),HX_("testFromNative",93,f5,53,05)));
HXLINE( 111)			::hx::EnumBase _hx_tmp3 = ::thx::fp::_Map::Map_Impl__obj::lookup(map,HX_("b",62,00,00,00),::thx::Strings_obj::order);
HXDLIN( 111)			Bool _hx_tmp4 = ::thx::Options_obj::toBool(_hx_tmp3);
HXDLIN( 111)			::utest::Assert_obj::isTrue(_hx_tmp4,null(),hx::SourceInfo(HX_("TestMap.hx",b4,0b,95,c8),111,HX_("thx.fp.TestMap",d0,41,dc,3f),HX_("testFromNative",93,f5,53,05)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestMap_obj,testFromNative,(void))


TestMap_obj::TestMap_obj()
{
}

hx::Val TestMap_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"testSet") ) { return hx::Val( testSet_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"testEmpty") ) { return hx::Val( testEmpty_dyn()); }
		if (HX_FIELD_EQ(inName,"testSizes") ) { return hx::Val( testSizes_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testRemove") ) { return hx::Val( testRemove_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testFoldLeft") ) { return hx::Val( testFoldLeft_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"testObjectSet") ) { return hx::Val( testObjectSet_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testObjectSet2") ) { return hx::Val( testObjectSet2_dyn()); }
		if (HX_FIELD_EQ(inName,"testFromNative") ) { return hx::Val( testFromNative_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"testFoldLeftKeys") ) { return hx::Val( testFoldLeftKeys_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestMap_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestMap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestMap_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestMap_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestMap_obj_sStaticStorageInfo = 0;
#endif

static ::String TestMap_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testRemove","\x36","\xe2","\x7c","\x1d"),
	HX_HCSTRING("testEmpty","\xdb","\x78","\xdc","\x38"),
	HX_HCSTRING("testSizes","\xe0","\x46","\xdb","\x45"),
	HX_HCSTRING("testFoldLeft","\x1a","\x4b","\x15","\x3a"),
	HX_HCSTRING("testFoldLeftKeys","\x2e","\xee","\x61","\xa0"),
	HX_HCSTRING("testSet","\x70","\x0a","\xc6","\xbd"),
	HX_HCSTRING("testObjectSet","\x71","\xd3","\xbc","\x76"),
	HX_HCSTRING("testObjectSet2","\xa1","\x2f","\x7c","\x6e"),
	HX_HCSTRING("testFromNative","\x93","\xf5","\x53","\x05"),
	::String(null()) };

static void TestMap_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestMap_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestMap_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestMap_obj::__mClass,"__mClass");
};

#endif

hx::Class TestMap_obj::__mClass;

void TestMap_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.fp.TestMap","\xd0","\x41","\xdc","\x3f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestMap_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestMap_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestMap_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestMap_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestMap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestMap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace fp
