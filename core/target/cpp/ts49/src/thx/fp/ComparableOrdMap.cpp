// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_Option
#include <haxe/ds/Option.h>
#endif
#ifndef INCLUDED_thx_Options
#include <thx/Options.h>
#endif
#ifndef INCLUDED_thx_OrderingImpl
#include <thx/OrderingImpl.h>
#endif
#ifndef INCLUDED_thx__Ord_Ord_Impl_
#include <thx/_Ord/Ord_Impl_.h>
#endif
#ifndef INCLUDED_thx_fp_ComparableOrdMap
#include <thx/fp/ComparableOrdMap.h>
#endif
#ifndef INCLUDED_thx_fp_MapImpl
#include <thx/fp/MapImpl.h>
#endif
#ifndef INCLUDED_thx_fp__Map_Map_Impl_
#include <thx/fp/_Map/Map_Impl_.h>
#endif

namespace thx{
namespace fp{

void ComparableOrdMap_obj::__construct() { }

Dynamic ComparableOrdMap_obj::__CreateEmpty() { return new ComparableOrdMap_obj; }

hx::ObjectPtr< ComparableOrdMap_obj > ComparableOrdMap_obj::__new()
{
	hx::ObjectPtr< ComparableOrdMap_obj > _hx_result = new ComparableOrdMap_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic ComparableOrdMap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ComparableOrdMap_obj > _hx_result = new ComparableOrdMap_obj();
	_hx_result->__construct();
	return _hx_result;
}

Bool ComparableOrdMap_obj::exists(::hx::EnumBase map, ::Dynamic key){
            	HX_STACK_FRAME("thx.fp.ComparableOrdMap","exists",0x6bed515b,"thx.fp.ComparableOrdMap.exists","thx/fp/Maps.hx",93,0x8274fa8d)
            	HX_STACK_ARG(map,"map")
            	HX_STACK_ARG(key,"key")
HXLINE(  93)		 ::Dynamic _hx_tmp = ::thx::_Ord::Ord_Impl__obj::forComparableOrd();
HXDLIN(  93)		::hx::EnumBase _hx_tmp1 = ::thx::fp::_Map::Map_Impl__obj::lookup(map,key,_hx_tmp);
HXDLIN(  93)		return ::thx::Options_obj::toBool(_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ComparableOrdMap_obj,exists,return )

::hx::EnumBase ComparableOrdMap_obj::get(::hx::EnumBase map, ::Dynamic key){
            	HX_STACK_FRAME("thx.fp.ComparableOrdMap","get",0xfa2db7b7,"thx.fp.ComparableOrdMap.get","thx/fp/Maps.hx",96,0x8274fa8d)
            	HX_STACK_ARG(map,"map")
            	HX_STACK_ARG(key,"key")
HXLINE(  96)		 ::Dynamic _hx_tmp = ::thx::_Ord::Ord_Impl__obj::forComparableOrd();
HXDLIN(  96)		return ::thx::fp::_Map::Map_Impl__obj::lookup(map,key,_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ComparableOrdMap_obj,get,return )

 ::Dynamic ComparableOrdMap_obj::getAlt(::hx::EnumBase map, ::Dynamic key, ::Dynamic alt){
            	HX_STACK_FRAME("thx.fp.ComparableOrdMap","getAlt",0x4f2665b2,"thx.fp.ComparableOrdMap.getAlt","thx/fp/Maps.hx",99,0x8274fa8d)
            	HX_STACK_ARG(map,"map")
            	HX_STACK_ARG(key,"key")
            	HX_STACK_ARG(alt,"alt")
HXLINE(  99)		 ::Dynamic _hx_tmp = ::thx::_Ord::Ord_Impl__obj::forComparableOrd();
HXDLIN(  99)		::hx::EnumBase _hx_tmp1 = ::thx::fp::_Map::Map_Impl__obj::lookup(map,key,_hx_tmp);
HXDLIN(  99)		return ::thx::Options_obj::getOrElse(_hx_tmp1,alt);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ComparableOrdMap_obj,getAlt,return )

::hx::EnumBase ComparableOrdMap_obj::set(::hx::EnumBase map, ::Dynamic key, ::Dynamic value){
            	HX_STACK_FRAME("thx.fp.ComparableOrdMap","set",0xfa36d2c3,"thx.fp.ComparableOrdMap.set","thx/fp/Maps.hx",102,0x8274fa8d)
            	HX_STACK_ARG(map,"map")
            	HX_STACK_ARG(key,"key")
            	HX_STACK_ARG(value,"value")
HXLINE( 102)		 ::Dynamic _hx_tmp = ::thx::_Ord::Ord_Impl__obj::forComparableOrd();
HXDLIN( 102)		return ::thx::fp::_Map::Map_Impl__obj::insert(map,key,value,_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ComparableOrdMap_obj,set,return )

::hx::EnumBase ComparableOrdMap_obj::remove(::hx::EnumBase map, ::Dynamic key){
            	HX_STACK_FRAME("thx.fp.ComparableOrdMap","remove",0xb095cfc3,"thx.fp.ComparableOrdMap.remove","thx/fp/Maps.hx",105,0x8274fa8d)
            	HX_STACK_ARG(map,"map")
            	HX_STACK_ARG(key,"key")
HXLINE( 105)		 ::Dynamic _hx_tmp = ::thx::_Ord::Ord_Impl__obj::forComparableOrd();
HXDLIN( 105)		return ::thx::fp::_Map::Map_Impl__obj::_hx_delete(map,key,_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ComparableOrdMap_obj,remove,return )

::hx::EnumBase ComparableOrdMap_obj::fromNative(::Dynamic map){
            	HX_STACK_FRAME("thx.fp.ComparableOrdMap","fromNative",0x2b672da0,"thx.fp.ComparableOrdMap.fromNative","thx/fp/Maps.hx",108,0x8274fa8d)
            	HX_STACK_ARG(map,"map")
HXLINE( 108)		 ::Dynamic _hx_tmp = ::thx::_Ord::Ord_Impl__obj::forComparableOrd();
HXDLIN( 108)		return ::thx::fp::_Map::Map_Impl__obj::fromNative(map,_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ComparableOrdMap_obj,fromNative,return )

::hx::EnumBase ComparableOrdMap_obj::merge(::hx::EnumBase a,::hx::EnumBase b){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		::hx::EnumBase _hx_run(::hx::EnumBase acc, ::Dynamic t){
            			HX_STACK_FRAME("thx.fp.ComparableOrdMap","merge",0x9f3aa419,"thx.fp.ComparableOrdMap.merge","thx/fp/Maps.hx",111,0x8274fa8d)
            			HX_STACK_ARG(acc,"acc")
            			HX_STACK_ARG(t,"t")
HXLINE( 111)			 ::Dynamic _hx_tmp = ::thx::_Ord::Ord_Impl__obj::forComparableOrd();
HXDLIN( 111)			return ::thx::fp::_Map::Map_Impl__obj::insert(acc, ::Dynamic(t->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)), ::Dynamic(t->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)),_hx_tmp);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.fp.ComparableOrdMap","merge",0x9f3aa419,"thx.fp.ComparableOrdMap.merge","thx/fp/Maps.hx",111,0x8274fa8d)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 111)		return ::thx::fp::_Map::Map_Impl__obj::foldLeftTuples(b,a, ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ComparableOrdMap_obj,merge,return )


ComparableOrdMap_obj::ComparableOrdMap_obj()
{
}

bool ComparableOrdMap_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"merge") ) { outValue = merge_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { outValue = exists_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getAlt") ) { outValue = getAlt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"remove") ) { outValue = remove_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromNative") ) { outValue = fromNative_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ComparableOrdMap_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ComparableOrdMap_obj_sStaticStorageInfo = 0;
#endif

static void ComparableOrdMap_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ComparableOrdMap_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ComparableOrdMap_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ComparableOrdMap_obj::__mClass,"__mClass");
};

#endif

hx::Class ComparableOrdMap_obj::__mClass;

static ::String ComparableOrdMap_obj_sStaticFields[] = {
	HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("getAlt","\x33","\x32","\x19","\xa3"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("fromNative","\xa1","\xce","\x60","\x65"),
	HX_HCSTRING("merge","\xb8","\xa2","\xc6","\x05"),
	::String(null())
};

void ComparableOrdMap_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.fp.ComparableOrdMap","\x0f","\x33","\x5f","\x2d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ComparableOrdMap_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ComparableOrdMap_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ComparableOrdMap_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ComparableOrdMap_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ComparableOrdMap_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ComparableOrdMap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ComparableOrdMap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace fp
