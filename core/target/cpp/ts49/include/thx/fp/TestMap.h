// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_fp_TestMap
#define INCLUDED_thx_fp_TestMap

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(thx,fp,TestMap)

namespace thx{
namespace fp{


class HXCPP_CLASS_ATTRIBUTES TestMap_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TestMap_obj OBJ_;
		TestMap_obj();

	public:
		void __construct(Int i);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.fp.TestMap")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.fp.TestMap"); }
		static hx::ObjectPtr< TestMap_obj > __new(Int i);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestMap_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("TestMap","\x4a","\xa1","\x12","\x8b"); }

		Int x;
		void testRemove();
		::Dynamic testRemove_dyn();

		void testEmpty();
		::Dynamic testEmpty_dyn();

		void testSizes();
		::Dynamic testSizes_dyn();

		void testFoldLeft();
		::Dynamic testFoldLeft_dyn();

		void testFoldLeftKeys();
		::Dynamic testFoldLeftKeys_dyn();

		void testSet();
		::Dynamic testSet_dyn();

		void testObjectSet();
		::Dynamic testObjectSet_dyn();

		void testObjectSet2();
		::Dynamic testObjectSet2_dyn();

		void testFromNative();
		::Dynamic testFromNative_dyn();

};

} // end namespace thx
} // end namespace fp

#endif /* INCLUDED_thx_fp_TestMap */ 
