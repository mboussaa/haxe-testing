// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_thx_Arrays
#include <thx/Arrays.h>
#endif
#ifndef INCLUDED_thx_Ints
#include <thx/Ints.h>
#endif
#ifndef INCLUDED_thx_TestBitSet
#include <thx/TestBitSet.h>
#endif
#ifndef INCLUDED_thx__BitSet_BitSet_Impl_
#include <thx/_BitSet/BitSet_Impl_.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestBitSet_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.TestBitSet","new",0xc981cc03,"thx.TestBitSet.new","thx/TestBitSet.hx",9,0x02b8382c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(   9)		this->x = i;
            	}

Dynamic TestBitSet_obj::__CreateEmpty() { return new TestBitSet_obj; }

hx::ObjectPtr< TestBitSet_obj > TestBitSet_obj::__new(Int i)
{
	hx::ObjectPtr< TestBitSet_obj > _hx_result = new TestBitSet_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestBitSet_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestBitSet_obj > _hx_result = new TestBitSet_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestBitSet_obj::testBitSet(){
            	HX_STACK_FRAME("thx.TestBitSet","testBitSet",0x5162ad84,"thx.TestBitSet.testBitSet","thx/TestBitSet.hx",13,0x02b8382c)
            	HX_STACK_THIS(this)
HXLINE(  13)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  13)		HX_VARI( Int,_g) = this->x;
HXDLIN(  13)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< Int >,bits) HXARGC(0)
            			void _hx_run(){
            				HX_STACK_FRAME("thx.TestBitSet","testBitSet",0x5162ad84,"thx.TestBitSet.testBitSet","thx/TestBitSet.hx",18,0x02b8382c)
HXLINE(  18)				::thx::_BitSet::BitSet_Impl__obj::at(bits,(int)0);
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1,::Array< Int >,bits) HXARGC(0)
            			void _hx_run(){
            				HX_STACK_FRAME("thx.TestBitSet","testBitSet",0x5162ad84,"thx.TestBitSet.testBitSet","thx/TestBitSet.hx",19,0x02b8382c)
HXLINE(  19)				::thx::_BitSet::BitSet_Impl__obj::at(bits,(int)-1);
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2,::Array< Int >,bits) HXARGC(0)
            			void _hx_run(){
            				HX_STACK_FRAME("thx.TestBitSet","testBitSet",0x5162ad84,"thx.TestBitSet.testBitSet","thx/TestBitSet.hx",20,0x02b8382c)
HXLINE(  20)				::thx::_BitSet::BitSet_Impl__obj::at(bits,(int)1);
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_3,::Array< Int >,bits) HXARGC(0)
            			void _hx_run(){
            				HX_STACK_FRAME("thx.TestBitSet","testBitSet",0x5162ad84,"thx.TestBitSet.testBitSet","thx/TestBitSet.hx",21,0x02b8382c)
HXLINE(  21)				::thx::_BitSet::BitSet_Impl__obj::at(bits,(int)4);
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_4,::Array< Int >,bits) HXARGC(0)
            			void _hx_run(){
            				HX_STACK_FRAME("thx.TestBitSet","testBitSet",0x5162ad84,"thx.TestBitSet.testBitSet","thx/TestBitSet.hx",52,0x02b8382c)
HXLINE(  52)				::thx::_BitSet::BitSet_Impl__obj::at(bits,(::thx::_BitSet::BitSet_Impl__obj::get_length(bits) + (int)1));
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE(  13)			++_g1;
HXLINE(  14)			HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN(  14)			::thx::Arrays_obj::resize(this1,(int)2,(int)0);
HXDLIN(  14)			HX_VARI( ::Array< Int >,bits) = this1;
HXLINE(  15)			::utest::Assert_obj::same((int)0,::thx::_BitSet::BitSet_Impl__obj::get_length(bits),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),15,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  16)			::String _hx_tmp = ::thx::_BitSet::BitSet_Impl__obj::toString(bits);
HXDLIN(  16)			::utest::Assert_obj::same(HX_("",00,00,00,00),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),16,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  18)			::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_0(bits)),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),18,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  19)			::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_1(bits)),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),19,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  20)			::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_2(bits)),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),20,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  21)			::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_3(bits)),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),21,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  23)			::thx::_BitSet::BitSet_Impl__obj::setAt(bits,(int)0,true);
HXLINE(  24)			::utest::Assert_obj::same((int)1,::thx::_BitSet::BitSet_Impl__obj::get_length(bits),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),24,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  25)			::String _hx_tmp1 = ::thx::_BitSet::BitSet_Impl__obj::toString(bits);
HXDLIN(  25)			::utest::Assert_obj::same(HX_("1",31,00,00,00),_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),25,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  27)			::thx::_BitSet::BitSet_Impl__obj::setAt(bits,(int)1,true);
HXLINE(  28)			::utest::Assert_obj::same((int)2,::thx::_BitSet::BitSet_Impl__obj::get_length(bits),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),28,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  29)			::String _hx_tmp2 = ::thx::_BitSet::BitSet_Impl__obj::toString(bits);
HXDLIN(  29)			::utest::Assert_obj::same(HX_("11",e0,2a,00,00),_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),29,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  31)			::thx::_BitSet::BitSet_Impl__obj::setAt(bits,(int)2,true);
HXLINE(  32)			::utest::Assert_obj::same((int)3,::thx::_BitSet::BitSet_Impl__obj::get_length(bits),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),32,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  33)			::String _hx_tmp3 = ::thx::_BitSet::BitSet_Impl__obj::toString(bits);
HXDLIN(  33)			::utest::Assert_obj::same(HX_("111",51,59,25,00),_hx_tmp3,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),33,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  35)			::thx::_BitSet::BitSet_Impl__obj::setAt(bits,(int)1,false);
HXLINE(  36)			::utest::Assert_obj::same((int)3,::thx::_BitSet::BitSet_Impl__obj::get_length(bits),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),36,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  37)			::String _hx_tmp4 = ::thx::_BitSet::BitSet_Impl__obj::toString(bits);
HXDLIN(  37)			::utest::Assert_obj::same(HX_("101",72,58,25,00),_hx_tmp4,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),37,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  40)			::thx::_BitSet::BitSet_Impl__obj::setAt(bits,(int)32,true);
HXLINE(  41)			::utest::Assert_obj::same((int)33,::thx::_BitSet::BitSet_Impl__obj::get_length(bits),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),41,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  42)			::String _hx_tmp5 = ::thx::_BitSet::BitSet_Impl__obj::toString(bits);
HXDLIN(  42)			::utest::Assert_obj::same(HX_("101000000000000000000000000000001",f3,f5,e3,18),_hx_tmp5,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),42,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  44)			{
HXLINE(  44)				HX_VARI( Int,_g3) = (int)0;
HXDLIN(  44)				HX_VARI( Int,_g2) = ::thx::_BitSet::BitSet_Impl__obj::get_length(bits);
HXDLIN(  44)				while((_g3 < _g2)){
HXLINE(  44)					HX_VARI( Int,i) = _g3++;
HXLINE(  45)					Bool _hx_tmp6 = ::thx::Arrays_obj::contains(::Array_obj< Int >::__new(3)->init(0,(int)0)->init(1,(int)2)->init(2,(int)32),i,null());
HXDLIN(  45)					if (_hx_tmp6) {
HXLINE(  46)						Bool _hx_tmp7 = ::thx::_BitSet::BitSet_Impl__obj::at(bits,i);
HXDLIN(  46)						::utest::Assert_obj::isTrue(_hx_tmp7,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),46,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
            					}
            					else {
HXLINE(  48)						Bool _hx_tmp8 = ::thx::_BitSet::BitSet_Impl__obj::at(bits,i);
HXDLIN(  48)						::utest::Assert_obj::isFalse(_hx_tmp8,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),48,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
            					}
            				}
            			}
HXLINE(  52)			::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_4(bits)),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),52,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  54)			{
HXLINE(  54)				HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN(  54)				HX_VARI_NAME( Int,_g4,"_g") = ::thx::_BitSet::BitSet_Impl__obj::get_length(bits);
HXDLIN(  54)				while((_g11 < _g4)){
HXLINE(  54)					HX_VARI_NAME( Int,i1,"i") = _g11++;
HXDLIN(  54)					::thx::_BitSet::BitSet_Impl__obj::setAt(bits,i1,true);
            				}
            			}
HXLINE(  55)			::utest::Assert_obj::same((int)33,::thx::_BitSet::BitSet_Impl__obj::get_length(bits),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),55,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  56)			::String _hx_tmp9 = ::thx::_BitSet::BitSet_Impl__obj::toString(bits);
HXDLIN(  56)			::utest::Assert_obj::same(HX_("111111111111111111111111111111111",31,52,f5,c6),_hx_tmp9,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),56,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  58)			{
HXLINE(  58)				HX_VARI_NAME( Int,_g12,"_g1") = (int)0;
HXDLIN(  58)				HX_VARI_NAME( Int,_g5,"_g") = ::thx::_BitSet::BitSet_Impl__obj::get_length(bits);
HXDLIN(  58)				while((_g12 < _g5)){
HXLINE(  58)					HX_VARI_NAME( Int,i2,"i") = _g12++;
HXDLIN(  58)					::thx::_BitSet::BitSet_Impl__obj::setAt(bits,i2,false);
            				}
            			}
HXLINE(  59)			::utest::Assert_obj::same((int)33,::thx::_BitSet::BitSet_Impl__obj::get_length(bits),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),59,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  60)			::String _hx_tmp10 = ::thx::_BitSet::BitSet_Impl__obj::toString(bits);
HXDLIN(  60)			::utest::Assert_obj::same(HX_("000000000000000000000000000000000",30,60,7d,16),_hx_tmp10,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),60,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBitSet_obj,testBitSet,(void))

void TestBitSet_obj::testFromBools(){
            	HX_STACK_FRAME("thx.TestBitSet","testFromBools",0xa2ef8df0,"thx.TestBitSet.testFromBools","thx/TestBitSet.hx",64,0x02b8382c)
            	HX_STACK_THIS(this)
HXLINE(  64)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  64)		HX_VARI( Int,_g) = this->x;
HXDLIN(  64)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc,Bool value,Int i){
            				HX_STACK_FRAME("thx.TestBitSet","testFromBools",0xa2ef8df0,"thx.TestBitSet.testFromBools","thx/TestBitSet.hx",65,0x02b8382c)
            				HX_STACK_ARG(acc,"acc")
            				HX_STACK_ARG(value,"value")
            				HX_STACK_ARG(i,"i")
HXLINE(  65)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc,i,value);
HXDLIN(  65)				return acc;
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE(  64)			++_g1;
HXLINE(  65)			HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN(  65)			::thx::Arrays_obj::resize(this1,(int)2,(int)0);
HXDLIN(  65)			HX_VARI( ::Array< Int >,bits) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(::Array_obj< Bool >::__new(4)->init(0,true)->init(1,false)->init(2,true)->init(3,true), ::Dynamic(new _hx_Closure_0()),this1)) );
HXLINE(  66)			::utest::Assert_obj::same((int)4,::thx::_BitSet::BitSet_Impl__obj::get_length(bits),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),66,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testFromBools",8d,88,bb,9e)));
HXLINE(  67)			Bool _hx_tmp = ::thx::_BitSet::BitSet_Impl__obj::at(bits,(int)0);
HXDLIN(  67)			::utest::Assert_obj::same(true,_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),67,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testFromBools",8d,88,bb,9e)));
HXLINE(  68)			Bool _hx_tmp1 = ::thx::_BitSet::BitSet_Impl__obj::at(bits,(int)1);
HXDLIN(  68)			::utest::Assert_obj::same(false,_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),68,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testFromBools",8d,88,bb,9e)));
HXLINE(  69)			Bool _hx_tmp2 = ::thx::_BitSet::BitSet_Impl__obj::at(bits,(int)2);
HXDLIN(  69)			::utest::Assert_obj::same(true,_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),69,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testFromBools",8d,88,bb,9e)));
HXLINE(  70)			Bool _hx_tmp3 = ::thx::_BitSet::BitSet_Impl__obj::at(bits,(int)3);
HXDLIN(  70)			::utest::Assert_obj::same(true,_hx_tmp3,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),70,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testFromBools",8d,88,bb,9e)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBitSet_obj,testFromBools,(void))

void TestBitSet_obj::testToBools(){
            	HX_STACK_FRAME("thx.TestBitSet","testToBools",0x801c31ff,"thx.TestBitSet.testToBools","thx/TestBitSet.hx",74,0x02b8382c)
            	HX_STACK_THIS(this)
HXLINE(  74)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  74)		HX_VARI( Int,_g) = this->x;
HXDLIN(  74)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc,::String _hx_char,Int i){
            				HX_STACK_FRAME("thx.TestBitSet","testToBools",0x801c31ff,"thx.TestBitSet.testToBools","thx/TestBitSet.hx",75,0x02b8382c)
            				HX_STACK_ARG(acc,"acc")
            				HX_STACK_ARG(_hx_char,"_hx_char")
            				HX_STACK_ARG(i,"i")
HXLINE(  75)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc,i,(_hx_char == HX_("1",31,00,00,00)));
HXDLIN(  75)				return acc;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1,::Array< Int >,this2) HXARGC(1)
            			Bool _hx_run(Int index){
            				HX_STACK_FRAME("thx.TestBitSet","testToBools",0x801c31ff,"thx.TestBitSet.testToBools","thx/TestBitSet.hx",76,0x02b8382c)
            				HX_STACK_ARG(index,"index")
HXLINE(  76)				return ::thx::_BitSet::BitSet_Impl__obj::at(this2,index);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(  74)			++_g1;
HXLINE(  75)			HX_VARI( ::Array< ::String >,chars) = HX_("10101",f3,02,82,56).split(HX_("",00,00,00,00));
HXDLIN(  75)			HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN(  75)			::thx::Arrays_obj::resize(this1,(int)2,(int)0);
HXDLIN(  75)			HX_VARI( ::Array< Int >,bits) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars, ::Dynamic(new _hx_Closure_0()),this1)) );
HXLINE(  76)			HX_VARI_NAME( ::Array< Int >,this2,"this") = bits;
HXDLIN(  76)			::Array< Bool > _hx_tmp = ::thx::Ints_obj::range(::thx::_BitSet::BitSet_Impl__obj::get_length(this2),null(),null())->map( ::Dynamic(new _hx_Closure_1(this2)));
HXDLIN(  76)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(5)->init(0,true)->init(1,false)->init(2,true)->init(3,false)->init(4,true),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),76,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testToBools",5c,5b,45,40)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBitSet_obj,testToBools,(void))

void TestBitSet_obj::testToInt32s(){
            	HX_STACK_FRAME("thx.TestBitSet","testToInt32s",0xd4cb17af,"thx.TestBitSet.testToInt32s","thx/TestBitSet.hx",80,0x02b8382c)
            	HX_STACK_THIS(this)
HXLINE(  80)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  80)		HX_VARI( Int,_g) = this->x;
HXDLIN(  80)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc,::String _hx_char,Int i){
            				HX_STACK_FRAME("thx.TestBitSet","testToInt32s",0xd4cb17af,"thx.TestBitSet.testToInt32s","thx/TestBitSet.hx",81,0x02b8382c)
            				HX_STACK_ARG(acc,"acc")
            				HX_STACK_ARG(_hx_char,"_hx_char")
            				HX_STACK_ARG(i,"i")
HXLINE(  81)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc,i,(_hx_char == HX_("1",31,00,00,00)));
HXDLIN(  81)				return acc;
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE(  80)			++_g1;
HXLINE(  81)			HX_VARI( ::Array< ::String >,chars) = HX_("10101",f3,02,82,56).split(HX_("",00,00,00,00));
HXDLIN(  81)			HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN(  81)			::thx::Arrays_obj::resize(this1,(int)2,(int)0);
HXDLIN(  81)			HX_VARI( ::Array< Int >,bits) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars, ::Dynamic(new _hx_Closure_0()),this1)) );
HXLINE(  82)			HX_VARI( ::Array< Int >,parts) = bits->slice((int)1,null());
HXLINE(  83)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,(int)21),parts,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),83,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testToInt32s",b2,1f,a6,38)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBitSet_obj,testToInt32s,(void))

void TestBitSet_obj::testFromString(){
            	HX_STACK_FRAME("thx.TestBitSet","testFromString",0x9db8060a,"thx.TestBitSet.testFromString","thx/TestBitSet.hx",87,0x02b8382c)
            	HX_STACK_THIS(this)
HXLINE(  87)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  87)		HX_VARI( Int,_g) = this->x;
HXDLIN(  87)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc,::String _hx_char,Int i){
            				HX_STACK_FRAME("thx.TestBitSet","testFromString",0x9db8060a,"thx.TestBitSet.testFromString","thx/TestBitSet.hx",88,0x02b8382c)
            				HX_STACK_ARG(acc,"acc")
            				HX_STACK_ARG(_hx_char,"_hx_char")
            				HX_STACK_ARG(i,"i")
HXLINE(  88)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc,i,(_hx_char == HX_("1",31,00,00,00)));
HXDLIN(  88)				return acc;
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE(  87)			++_g1;
HXLINE(  88)			HX_VARI( ::Array< ::String >,chars) = HX_("1011",7f,0b,88,20).split(HX_("",00,00,00,00));
HXDLIN(  88)			HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN(  88)			::thx::Arrays_obj::resize(this1,(int)2,(int)0);
HXDLIN(  88)			HX_VARI( ::Array< Int >,bits) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars, ::Dynamic(new _hx_Closure_0()),this1)) );
HXLINE(  89)			::utest::Assert_obj::same((int)4,::thx::_BitSet::BitSet_Impl__obj::get_length(bits),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),89,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testFromString",cd,54,67,f4)));
HXLINE(  90)			Bool _hx_tmp = ::thx::_BitSet::BitSet_Impl__obj::at(bits,(int)0);
HXDLIN(  90)			::utest::Assert_obj::same(true,_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),90,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testFromString",cd,54,67,f4)));
HXLINE(  91)			Bool _hx_tmp1 = ::thx::_BitSet::BitSet_Impl__obj::at(bits,(int)1);
HXDLIN(  91)			::utest::Assert_obj::same(false,_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),91,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testFromString",cd,54,67,f4)));
HXLINE(  92)			Bool _hx_tmp2 = ::thx::_BitSet::BitSet_Impl__obj::at(bits,(int)2);
HXDLIN(  92)			::utest::Assert_obj::same(true,_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),92,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testFromString",cd,54,67,f4)));
HXLINE(  93)			Bool _hx_tmp3 = ::thx::_BitSet::BitSet_Impl__obj::at(bits,(int)3);
HXDLIN(  93)			::utest::Assert_obj::same(true,_hx_tmp3,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),93,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testFromString",cd,54,67,f4)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBitSet_obj,testFromString,(void))

void TestBitSet_obj::testPresetLength(){
            	HX_STACK_FRAME("thx.TestBitSet","testPresetLength",0x06e98f94,"thx.TestBitSet.testPresetLength","thx/TestBitSet.hx",97,0x02b8382c)
            	HX_STACK_THIS(this)
HXLINE(  97)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  97)		HX_VARI( Int,_g) = this->x;
HXDLIN(  97)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< Int >,bits1) HXARGC(0)
            			void _hx_run(){
            				HX_STACK_FRAME("thx.TestBitSet","testPresetLength",0x06e98f94,"thx.TestBitSet.testPresetLength","thx/TestBitSet.hx",103,0x02b8382c)
HXLINE( 103)				::thx::_BitSet::BitSet_Impl__obj::at(bits1,(int)35);
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1,::Array< Int >,bits2) HXARGC(0)
            			void _hx_run(){
            				HX_STACK_FRAME("thx.TestBitSet","testPresetLength",0x06e98f94,"thx.TestBitSet.testPresetLength","thx/TestBitSet.hx",110,0x02b8382c)
HXLINE( 110)				::thx::_BitSet::BitSet_Impl__obj::at(bits2,(int)35);
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE(  97)			++_g1;
HXLINE(  98)			HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)35);
HXDLIN(  98)			::thx::Arrays_obj::resize(this1,(int)3,(int)0);
HXDLIN(  98)			HX_VARI( ::Array< Int >,bits1) = this1;
HXLINE(  99)			::utest::Assert_obj::same((int)35,::thx::_BitSet::BitSet_Impl__obj::get_length(bits1),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),99,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testPresetLength",17,55,1c,e3)));
HXLINE( 100)			{
HXLINE( 100)				HX_VARI( Int,_g2) = (int)0;
HXDLIN( 100)				while((_g2 < (int)35)){
HXLINE( 100)					HX_VARI( Int,i) = _g2++;
HXLINE( 101)					Bool _hx_tmp = ::thx::_BitSet::BitSet_Impl__obj::at(bits1,i);
HXDLIN( 101)					::utest::Assert_obj::isFalse(_hx_tmp,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),101,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testPresetLength",17,55,1c,e3)));
            				}
            			}
HXLINE( 103)			::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_0(bits1)),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),103,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testPresetLength",17,55,1c,e3)));
HXLINE( 105)			HX_VARI_NAME( ::Array< Int >,this2,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)35);
HXDLIN( 105)			::thx::Arrays_obj::resize(this2,(int)3,(int)0);
HXDLIN( 105)			{
HXLINE( 105)				HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 105)				HX_VARI_NAME( Int,_g3,"_g") = ::thx::_BitSet::BitSet_Impl__obj::get_length(this2);
HXDLIN( 105)				while((_g11 < _g3)){
HXLINE( 105)					HX_VARI_NAME( Int,i1,"i") = _g11++;
HXDLIN( 105)					::thx::_BitSet::BitSet_Impl__obj::setAt(this2,i1,true);
            				}
            			}
HXDLIN( 105)			HX_VARI( ::Array< Int >,bits2) = this2;
HXLINE( 106)			::utest::Assert_obj::same((int)35,::thx::_BitSet::BitSet_Impl__obj::get_length(bits2),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),106,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testPresetLength",17,55,1c,e3)));
HXLINE( 107)			{
HXLINE( 107)				HX_VARI_NAME( Int,_g21,"_g2") = (int)0;
HXDLIN( 107)				while((_g21 < (int)35)){
HXLINE( 107)					HX_VARI_NAME( Int,i2,"i") = _g21++;
HXLINE( 108)					Bool _hx_tmp1 = ::thx::_BitSet::BitSet_Impl__obj::at(bits2,i2);
HXDLIN( 108)					::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),108,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testPresetLength",17,55,1c,e3)));
            				}
            			}
HXLINE( 110)			::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_1(bits2)),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),110,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testPresetLength",17,55,1c,e3)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBitSet_obj,testPresetLength,(void))

void TestBitSet_obj::testConcat(){
            	HX_STACK_FRAME("thx.TestBitSet","testConcat",0x283a5dc3,"thx.TestBitSet.testConcat","thx/TestBitSet.hx",114,0x02b8382c)
            	HX_STACK_THIS(this)
HXLINE( 114)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 114)		HX_VARI( Int,_g) = this->x;
HXDLIN( 114)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc,::String _hx_char,Int i){
            				HX_STACK_FRAME("thx.TestBitSet","testConcat",0x283a5dc3,"thx.TestBitSet.testConcat","thx/TestBitSet.hx",115,0x02b8382c)
            				HX_STACK_ARG(acc,"acc")
            				HX_STACK_ARG(_hx_char,"_hx_char")
            				HX_STACK_ARG(i,"i")
HXLINE( 115)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc,i,(_hx_char == HX_("1",31,00,00,00)));
HXDLIN( 115)				return acc;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc1,::String char1,Int i1){
            				HX_STACK_FRAME("thx.TestBitSet","testConcat",0x283a5dc3,"thx.TestBitSet.testConcat","thx/TestBitSet.hx",116,0x02b8382c)
            				HX_STACK_ARG(acc1,"acc1")
            				HX_STACK_ARG(char1,"char1")
            				HX_STACK_ARG(i1,"i1")
HXLINE( 116)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc1,i1,(char1 == HX_("1",31,00,00,00)));
HXDLIN( 116)				return acc1;
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE( 114)			++_g1;
HXLINE( 115)			HX_VARI( ::Array< ::String >,chars) = HX_("10101",f3,02,82,56).split(HX_("",00,00,00,00));
HXDLIN( 115)			HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 115)			::thx::Arrays_obj::resize(this1,(int)2,(int)0);
HXDLIN( 115)			HX_VARI( ::Array< Int >,b1) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars, ::Dynamic(new _hx_Closure_0()),this1)) );
HXLINE( 116)			HX_VARI_NAME( ::Array< ::String >,chars1,"chars") = HX_("111",51,59,25,00).split(HX_("",00,00,00,00));
HXDLIN( 116)			HX_VARI_NAME( ::Array< Int >,this2,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 116)			::thx::Arrays_obj::resize(this2,(int)2,(int)0);
HXDLIN( 116)			HX_VARI( ::Array< Int >,b2) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars1, ::Dynamic(new _hx_Closure_1()),this2)) );
HXLINE( 117)			HX_VARI( Int,length) = (::thx::_BitSet::BitSet_Impl__obj::get_length(b1) + ::thx::_BitSet::BitSet_Impl__obj::get_length(b2));
HXDLIN( 117)			HX_VARI_NAME( ::Array< Int >,this3,"this") = ::Array_obj< Int >::__new(1)->init(0,length);
HXDLIN( 117)			Int _hx_tmp = ::Std_obj::_hx_int(((Float)length / (Float)(int)32));
HXDLIN( 117)			::thx::Arrays_obj::resize(this3,((_hx_tmp + (int)1) + (int)1),(int)0);
HXDLIN( 117)			HX_VARI( ::Array< Int >,result) = this3;
HXDLIN( 117)			HX_VARI( Int,index) = (int)0;
HXDLIN( 117)			{
HXLINE( 117)				HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 117)				HX_VARI_NAME( Int,_g2,"_g") = ::thx::_BitSet::BitSet_Impl__obj::get_length(b1);
HXDLIN( 117)				while((_g11 < _g2)){
HXLINE( 117)					HX_VARI( Int,leftIndex) = _g11++;
HXDLIN( 117)					Int _hx_tmp1 = index++;
HXDLIN( 117)					Bool _hx_tmp2 = ::thx::_BitSet::BitSet_Impl__obj::at(b1,leftIndex);
HXDLIN( 117)					::thx::_BitSet::BitSet_Impl__obj::setAt(result,_hx_tmp1,_hx_tmp2);
            				}
            			}
HXDLIN( 117)			{
HXLINE( 117)				HX_VARI_NAME( Int,_g12,"_g1") = (int)0;
HXDLIN( 117)				HX_VARI_NAME( Int,_g3,"_g") = ::thx::_BitSet::BitSet_Impl__obj::get_length(b2);
HXDLIN( 117)				while((_g12 < _g3)){
HXLINE( 117)					HX_VARI( Int,rightIndex) = _g12++;
HXDLIN( 117)					Int _hx_tmp3 = index++;
HXDLIN( 117)					Bool _hx_tmp4 = ::thx::_BitSet::BitSet_Impl__obj::at(b2,rightIndex);
HXDLIN( 117)					::thx::_BitSet::BitSet_Impl__obj::setAt(result,_hx_tmp3,_hx_tmp4);
            				}
            			}
HXLINE( 118)			::String _hx_tmp5 = ::thx::_BitSet::BitSet_Impl__obj::toString(b1);
HXDLIN( 118)			::utest::Assert_obj::same(HX_("10101",f3,02,82,56),_hx_tmp5,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),118,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testConcat",06,4f,c4,e0)));
HXLINE( 119)			::String _hx_tmp6 = ::thx::_BitSet::BitSet_Impl__obj::toString(b2);
HXDLIN( 119)			::utest::Assert_obj::same(HX_("111",51,59,25,00),_hx_tmp6,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),119,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testConcat",06,4f,c4,e0)));
HXLINE( 120)			::String _hx_tmp7 = ::thx::_BitSet::BitSet_Impl__obj::toString(result);
HXDLIN( 120)			::utest::Assert_obj::same(HX_("10101111",3e,70,ef,19),_hx_tmp7,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),120,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testConcat",06,4f,c4,e0)));
HXLINE( 121)			::utest::Assert_obj::same((int)5,::thx::_BitSet::BitSet_Impl__obj::get_length(b1),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),121,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testConcat",06,4f,c4,e0)));
HXLINE( 122)			::utest::Assert_obj::same((int)3,::thx::_BitSet::BitSet_Impl__obj::get_length(b2),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),122,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testConcat",06,4f,c4,e0)));
HXLINE( 123)			::utest::Assert_obj::same((int)8,::thx::_BitSet::BitSet_Impl__obj::get_length(result),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),123,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testConcat",06,4f,c4,e0)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBitSet_obj,testConcat,(void))

void TestBitSet_obj::testExpand(){
            	HX_STACK_FRAME("thx.TestBitSet","testExpand",0x24dd4309,"thx.TestBitSet.testExpand","thx/TestBitSet.hx",127,0x02b8382c)
            	HX_STACK_THIS(this)
HXLINE( 127)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 127)		HX_VARI( Int,_g) = this->x;
HXDLIN( 127)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc,::String _hx_char,Int i){
            				HX_STACK_FRAME("thx.TestBitSet","testExpand",0x24dd4309,"thx.TestBitSet.testExpand","thx/TestBitSet.hx",128,0x02b8382c)
            				HX_STACK_ARG(acc,"acc")
            				HX_STACK_ARG(_hx_char,"_hx_char")
            				HX_STACK_ARG(i,"i")
HXLINE( 128)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc,i,(_hx_char == HX_("1",31,00,00,00)));
HXDLIN( 128)				return acc;
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE( 127)			++_g1;
HXLINE( 128)			HX_VARI( ::Array< ::String >,chars) = HX_("1011",7f,0b,88,20).split(HX_("",00,00,00,00));
HXDLIN( 128)			HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 128)			::thx::Arrays_obj::resize(this1,(int)2,(int)0);
HXDLIN( 128)			HX_VARI( ::Array< Int >,b1) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars, ::Dynamic(new _hx_Closure_0()),this1)) );
HXLINE( 129)			HX_VARI( ::Array< Int >,b2) = ::thx::_BitSet::BitSet_Impl__obj::expand(b1,(int)1);
HXLINE( 130)			HX_VARI( ::Array< Int >,b3) = ::thx::_BitSet::BitSet_Impl__obj::expand(b1,(int)3);
HXLINE( 131)			::String _hx_tmp = ::thx::_BitSet::BitSet_Impl__obj::toString(b1);
HXDLIN( 131)			::utest::Assert_obj::same(HX_("1011",7f,0b,88,20),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),131,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testExpand",4c,34,67,dd)));
HXLINE( 132)			::String _hx_tmp1 = ::thx::_BitSet::BitSet_Impl__obj::toString(b2);
HXDLIN( 132)			::utest::Assert_obj::same(HX_("11001111",a0,8a,29,dd),_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),132,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testExpand",4c,34,67,dd)));
HXLINE( 133)			::String _hx_tmp2 = ::thx::_BitSet::BitSet_Impl__obj::toString(b3);
HXDLIN( 133)			::utest::Assert_obj::same(HX_("1111000011111111",40,bd,24,31),_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),133,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testExpand",4c,34,67,dd)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBitSet_obj,testExpand,(void))

void TestBitSet_obj::testEquals(){
            	HX_STACK_FRAME("thx.TestBitSet","testEquals",0x205d42ee,"thx.TestBitSet.testEquals","thx/TestBitSet.hx",137,0x02b8382c)
            	HX_STACK_THIS(this)
HXLINE( 137)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 137)		HX_VARI( Int,_g) = this->x;
HXDLIN( 137)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc,::String _hx_char,Int i){
            				HX_STACK_FRAME("thx.TestBitSet","testEquals",0x205d42ee,"thx.TestBitSet.testEquals","thx/TestBitSet.hx",138,0x02b8382c)
            				HX_STACK_ARG(acc,"acc")
            				HX_STACK_ARG(_hx_char,"_hx_char")
            				HX_STACK_ARG(i,"i")
HXLINE( 138)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc,i,(_hx_char == HX_("1",31,00,00,00)));
HXDLIN( 138)				return acc;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc1,::String char1,Int i1){
            				HX_STACK_FRAME("thx.TestBitSet","testEquals",0x205d42ee,"thx.TestBitSet.testEquals","thx/TestBitSet.hx",139,0x02b8382c)
            				HX_STACK_ARG(acc1,"acc1")
            				HX_STACK_ARG(char1,"char1")
            				HX_STACK_ARG(i1,"i1")
HXLINE( 139)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc1,i1,(char1 == HX_("1",31,00,00,00)));
HXDLIN( 139)				return acc1;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_2) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc2,::String char2,Int i2){
            				HX_STACK_FRAME("thx.TestBitSet","testEquals",0x205d42ee,"thx.TestBitSet.testEquals","thx/TestBitSet.hx",140,0x02b8382c)
            				HX_STACK_ARG(acc2,"acc2")
            				HX_STACK_ARG(char2,"char2")
            				HX_STACK_ARG(i2,"i2")
HXLINE( 140)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc2,i2,(char2 == HX_("1",31,00,00,00)));
HXDLIN( 140)				return acc2;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_3) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc3,::String char3,Int i3){
            				HX_STACK_FRAME("thx.TestBitSet","testEquals",0x205d42ee,"thx.TestBitSet.testEquals","thx/TestBitSet.hx",141,0x02b8382c)
            				HX_STACK_ARG(acc3,"acc3")
            				HX_STACK_ARG(char3,"char3")
            				HX_STACK_ARG(i3,"i3")
HXLINE( 141)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc3,i3,(char3 == HX_("1",31,00,00,00)));
HXDLIN( 141)				return acc3;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_4) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc4,::String char4,Int i4){
            				HX_STACK_FRAME("thx.TestBitSet","testEquals",0x205d42ee,"thx.TestBitSet.testEquals","thx/TestBitSet.hx",142,0x02b8382c)
            				HX_STACK_ARG(acc4,"acc4")
            				HX_STACK_ARG(char4,"char4")
            				HX_STACK_ARG(i4,"i4")
HXLINE( 142)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc4,i4,(char4 == HX_("1",31,00,00,00)));
HXDLIN( 142)				return acc4;
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE( 137)			++_g1;
HXLINE( 138)			HX_VARI( ::Array< ::String >,chars) = HX_("10101100",5e,6f,ef,19).split(HX_("",00,00,00,00));
HXDLIN( 138)			HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 138)			::thx::Arrays_obj::resize(this1,(int)2,(int)0);
HXDLIN( 138)			HX_VARI( ::Array< Int >,b1) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars, ::Dynamic(new _hx_Closure_0()),this1)) );
HXLINE( 139)			HX_VARI_NAME( ::Array< ::String >,chars1,"chars") = HX_("10101100",5e,6f,ef,19).split(HX_("",00,00,00,00));
HXDLIN( 139)			HX_VARI_NAME( ::Array< Int >,this2,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 139)			::thx::Arrays_obj::resize(this2,(int)2,(int)0);
HXDLIN( 139)			HX_VARI( ::Array< Int >,b2) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars1, ::Dynamic(new _hx_Closure_1()),this2)) );
HXLINE( 140)			HX_VARI_NAME( ::Array< ::String >,chars2,"chars") = HX_("101011001",13,03,92,97).split(HX_("",00,00,00,00));
HXDLIN( 140)			HX_VARI_NAME( ::Array< Int >,this3,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 140)			::thx::Arrays_obj::resize(this3,(int)2,(int)0);
HXDLIN( 140)			HX_VARI( ::Array< Int >,b3) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars2, ::Dynamic(new _hx_Closure_2()),this3)) );
HXLINE( 141)			HX_VARI_NAME( ::Array< ::String >,chars3,"chars") = HX_("10101101",5f,6f,ef,19).split(HX_("",00,00,00,00));
HXDLIN( 141)			HX_VARI_NAME( ::Array< Int >,this4,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 141)			::thx::Arrays_obj::resize(this4,(int)2,(int)0);
HXDLIN( 141)			HX_VARI( ::Array< Int >,b4) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars3, ::Dynamic(new _hx_Closure_3()),this4)) );
HXLINE( 142)			HX_VARI_NAME( ::Array< ::String >,chars4,"chars") = HX_("1010110",92,10,3f,7d).split(HX_("",00,00,00,00));
HXDLIN( 142)			HX_VARI_NAME( ::Array< Int >,this5,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 142)			::thx::Arrays_obj::resize(this5,(int)2,(int)0);
HXDLIN( 142)			HX_VARI( ::Array< Int >,b5) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars4, ::Dynamic(new _hx_Closure_4()),this5)) );
HXLINE( 143)			Bool _hx_tmp = ::thx::_BitSet::BitSet_Impl__obj::equals(b1,b2);
HXDLIN( 143)			::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),143,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testEquals",31,34,e7,d8)));
HXLINE( 144)			Bool _hx_tmp1 = ::thx::_BitSet::BitSet_Impl__obj::equals(b1,b3);
HXDLIN( 144)			::utest::Assert_obj::isFalse(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),144,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testEquals",31,34,e7,d8)));
HXLINE( 145)			Bool _hx_tmp2 = ::thx::_BitSet::BitSet_Impl__obj::equals(b1,b4);
HXDLIN( 145)			::utest::Assert_obj::isFalse(_hx_tmp2,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),145,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testEquals",31,34,e7,d8)));
HXLINE( 146)			Bool _hx_tmp3 = ::thx::_BitSet::BitSet_Impl__obj::equals(b1,b5);
HXDLIN( 146)			::utest::Assert_obj::isFalse(_hx_tmp3,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),146,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testEquals",31,34,e7,d8)));
HXLINE( 147)			Bool _hx_tmp4 = ::thx::_BitSet::BitSet_Impl__obj::equals(b1,b2);
HXDLIN( 147)			::utest::Assert_obj::isTrue(_hx_tmp4,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),147,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testEquals",31,34,e7,d8)));
HXLINE( 148)			Bool _hx_tmp5 = ::thx::_BitSet::BitSet_Impl__obj::equals(b1,b3);
HXDLIN( 148)			::utest::Assert_obj::isFalse(_hx_tmp5,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),148,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testEquals",31,34,e7,d8)));
HXLINE( 149)			Bool _hx_tmp6 = ::thx::_BitSet::BitSet_Impl__obj::equals(b1,b4);
HXDLIN( 149)			::utest::Assert_obj::isFalse(_hx_tmp6,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),149,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testEquals",31,34,e7,d8)));
HXLINE( 150)			Bool _hx_tmp7 = ::thx::_BitSet::BitSet_Impl__obj::equals(b1,b5);
HXDLIN( 150)			::utest::Assert_obj::isFalse(_hx_tmp7,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),150,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testEquals",31,34,e7,d8)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBitSet_obj,testEquals,(void))

void TestBitSet_obj::testNotEquals(){
            	HX_STACK_FRAME("thx.TestBitSet","testNotEquals",0x744a4e63,"thx.TestBitSet.testNotEquals","thx/TestBitSet.hx",154,0x02b8382c)
            	HX_STACK_THIS(this)
HXLINE( 154)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 154)		HX_VARI( Int,_g) = this->x;
HXDLIN( 154)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc,::String _hx_char,Int i){
            				HX_STACK_FRAME("thx.TestBitSet","testNotEquals",0x744a4e63,"thx.TestBitSet.testNotEquals","thx/TestBitSet.hx",155,0x02b8382c)
            				HX_STACK_ARG(acc,"acc")
            				HX_STACK_ARG(_hx_char,"_hx_char")
            				HX_STACK_ARG(i,"i")
HXLINE( 155)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc,i,(_hx_char == HX_("1",31,00,00,00)));
HXDLIN( 155)				return acc;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc1,::String char1,Int i1){
            				HX_STACK_FRAME("thx.TestBitSet","testNotEquals",0x744a4e63,"thx.TestBitSet.testNotEquals","thx/TestBitSet.hx",156,0x02b8382c)
            				HX_STACK_ARG(acc1,"acc1")
            				HX_STACK_ARG(char1,"char1")
            				HX_STACK_ARG(i1,"i1")
HXLINE( 156)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc1,i1,(char1 == HX_("1",31,00,00,00)));
HXDLIN( 156)				return acc1;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_2) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc2,::String char2,Int i2){
            				HX_STACK_FRAME("thx.TestBitSet","testNotEquals",0x744a4e63,"thx.TestBitSet.testNotEquals","thx/TestBitSet.hx",157,0x02b8382c)
            				HX_STACK_ARG(acc2,"acc2")
            				HX_STACK_ARG(char2,"char2")
            				HX_STACK_ARG(i2,"i2")
HXLINE( 157)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc2,i2,(char2 == HX_("1",31,00,00,00)));
HXDLIN( 157)				return acc2;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_3) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc3,::String char3,Int i3){
            				HX_STACK_FRAME("thx.TestBitSet","testNotEquals",0x744a4e63,"thx.TestBitSet.testNotEquals","thx/TestBitSet.hx",158,0x02b8382c)
            				HX_STACK_ARG(acc3,"acc3")
            				HX_STACK_ARG(char3,"char3")
            				HX_STACK_ARG(i3,"i3")
HXLINE( 158)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc3,i3,(char3 == HX_("1",31,00,00,00)));
HXDLIN( 158)				return acc3;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_4) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc4,::String char4,Int i4){
            				HX_STACK_FRAME("thx.TestBitSet","testNotEquals",0x744a4e63,"thx.TestBitSet.testNotEquals","thx/TestBitSet.hx",159,0x02b8382c)
            				HX_STACK_ARG(acc4,"acc4")
            				HX_STACK_ARG(char4,"char4")
            				HX_STACK_ARG(i4,"i4")
HXLINE( 159)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc4,i4,(char4 == HX_("1",31,00,00,00)));
HXDLIN( 159)				return acc4;
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE( 154)			++_g1;
HXLINE( 155)			HX_VARI( ::Array< ::String >,chars) = HX_("10101100",5e,6f,ef,19).split(HX_("",00,00,00,00));
HXDLIN( 155)			HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 155)			::thx::Arrays_obj::resize(this1,(int)2,(int)0);
HXDLIN( 155)			HX_VARI( ::Array< Int >,b1) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars, ::Dynamic(new _hx_Closure_0()),this1)) );
HXLINE( 156)			HX_VARI_NAME( ::Array< ::String >,chars1,"chars") = HX_("10101100",5e,6f,ef,19).split(HX_("",00,00,00,00));
HXDLIN( 156)			HX_VARI_NAME( ::Array< Int >,this2,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 156)			::thx::Arrays_obj::resize(this2,(int)2,(int)0);
HXDLIN( 156)			HX_VARI( ::Array< Int >,b2) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars1, ::Dynamic(new _hx_Closure_1()),this2)) );
HXLINE( 157)			HX_VARI_NAME( ::Array< ::String >,chars2,"chars") = HX_("101011001",13,03,92,97).split(HX_("",00,00,00,00));
HXDLIN( 157)			HX_VARI_NAME( ::Array< Int >,this3,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 157)			::thx::Arrays_obj::resize(this3,(int)2,(int)0);
HXDLIN( 157)			HX_VARI( ::Array< Int >,b3) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars2, ::Dynamic(new _hx_Closure_2()),this3)) );
HXLINE( 158)			HX_VARI_NAME( ::Array< ::String >,chars3,"chars") = HX_("10101101",5f,6f,ef,19).split(HX_("",00,00,00,00));
HXDLIN( 158)			HX_VARI_NAME( ::Array< Int >,this4,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 158)			::thx::Arrays_obj::resize(this4,(int)2,(int)0);
HXDLIN( 158)			HX_VARI( ::Array< Int >,b4) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars3, ::Dynamic(new _hx_Closure_3()),this4)) );
HXLINE( 159)			HX_VARI_NAME( ::Array< ::String >,chars4,"chars") = HX_("1010110",92,10,3f,7d).split(HX_("",00,00,00,00));
HXDLIN( 159)			HX_VARI_NAME( ::Array< Int >,this5,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 159)			::thx::Arrays_obj::resize(this5,(int)2,(int)0);
HXDLIN( 159)			HX_VARI( ::Array< Int >,b5) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars4, ::Dynamic(new _hx_Closure_4()),this5)) );
HXLINE( 160)			Bool _hx_tmp = ::thx::_BitSet::BitSet_Impl__obj::notEquals(b1,b2);
HXDLIN( 160)			::utest::Assert_obj::isFalse(_hx_tmp,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),160,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testNotEquals",00,49,16,70)));
HXLINE( 161)			Bool _hx_tmp1 = ::thx::_BitSet::BitSet_Impl__obj::notEquals(b1,b3);
HXDLIN( 161)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),161,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testNotEquals",00,49,16,70)));
HXLINE( 162)			Bool _hx_tmp2 = ::thx::_BitSet::BitSet_Impl__obj::notEquals(b1,b4);
HXDLIN( 162)			::utest::Assert_obj::isTrue(_hx_tmp2,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),162,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testNotEquals",00,49,16,70)));
HXLINE( 163)			Bool _hx_tmp3 = ::thx::_BitSet::BitSet_Impl__obj::notEquals(b1,b5);
HXDLIN( 163)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),163,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testNotEquals",00,49,16,70)));
HXLINE( 164)			Bool _hx_tmp4 = ::thx::_BitSet::BitSet_Impl__obj::notEquals(b1,b2);
HXDLIN( 164)			::utest::Assert_obj::isFalse(_hx_tmp4,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),164,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testNotEquals",00,49,16,70)));
HXLINE( 165)			Bool _hx_tmp5 = ::thx::_BitSet::BitSet_Impl__obj::notEquals(b1,b3);
HXDLIN( 165)			::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),165,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testNotEquals",00,49,16,70)));
HXLINE( 166)			Bool _hx_tmp6 = ::thx::_BitSet::BitSet_Impl__obj::notEquals(b1,b4);
HXDLIN( 166)			::utest::Assert_obj::isTrue(_hx_tmp6,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),166,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testNotEquals",00,49,16,70)));
HXLINE( 167)			Bool _hx_tmp7 = ::thx::_BitSet::BitSet_Impl__obj::notEquals(b1,b5);
HXDLIN( 167)			::utest::Assert_obj::isTrue(_hx_tmp7,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),167,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testNotEquals",00,49,16,70)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBitSet_obj,testNotEquals,(void))

void TestBitSet_obj::testAnd(){
            	HX_STACK_FRAME("thx.TestBitSet","testAnd",0x8f5072c8,"thx.TestBitSet.testAnd","thx/TestBitSet.hx",171,0x02b8382c)
            	HX_STACK_THIS(this)
HXLINE( 171)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 171)		HX_VARI( Int,_g) = this->x;
HXDLIN( 171)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc,::String _hx_char,Int i){
            				HX_STACK_FRAME("thx.TestBitSet","testAnd",0x8f5072c8,"thx.TestBitSet.testAnd","thx/TestBitSet.hx",172,0x02b8382c)
            				HX_STACK_ARG(acc,"acc")
            				HX_STACK_ARG(_hx_char,"_hx_char")
            				HX_STACK_ARG(i,"i")
HXLINE( 172)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc,i,(_hx_char == HX_("1",31,00,00,00)));
HXDLIN( 172)				return acc;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc1,::String char1,Int i1){
            				HX_STACK_FRAME("thx.TestBitSet","testAnd",0x8f5072c8,"thx.TestBitSet.testAnd","thx/TestBitSet.hx",173,0x02b8382c)
            				HX_STACK_ARG(acc1,"acc1")
            				HX_STACK_ARG(char1,"char1")
            				HX_STACK_ARG(i1,"i1")
HXLINE( 173)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc1,i1,(char1 == HX_("1",31,00,00,00)));
HXDLIN( 173)				return acc1;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_2) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc2,::String char2,Int i2){
            				HX_STACK_FRAME("thx.TestBitSet","testAnd",0x8f5072c8,"thx.TestBitSet.testAnd","thx/TestBitSet.hx",174,0x02b8382c)
            				HX_STACK_ARG(acc2,"acc2")
            				HX_STACK_ARG(char2,"char2")
            				HX_STACK_ARG(i2,"i2")
HXLINE( 174)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc2,i2,(char2 == HX_("1",31,00,00,00)));
HXDLIN( 174)				return acc2;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_3) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc3,::String char3,Int i3){
            				HX_STACK_FRAME("thx.TestBitSet","testAnd",0x8f5072c8,"thx.TestBitSet.testAnd","thx/TestBitSet.hx",175,0x02b8382c)
            				HX_STACK_ARG(acc3,"acc3")
            				HX_STACK_ARG(char3,"char3")
            				HX_STACK_ARG(i3,"i3")
HXLINE( 175)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc3,i3,(char3 == HX_("1",31,00,00,00)));
HXDLIN( 175)				return acc3;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_4) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc4,::String char4,Int i4){
            				HX_STACK_FRAME("thx.TestBitSet","testAnd",0x8f5072c8,"thx.TestBitSet.testAnd","thx/TestBitSet.hx",176,0x02b8382c)
            				HX_STACK_ARG(acc4,"acc4")
            				HX_STACK_ARG(char4,"char4")
            				HX_STACK_ARG(i4,"i4")
HXLINE( 176)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc4,i4,(char4 == HX_("1",31,00,00,00)));
HXDLIN( 176)				return acc4;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_5) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc5,::String char5,Int i5){
            				HX_STACK_FRAME("thx.TestBitSet","testAnd",0x8f5072c8,"thx.TestBitSet.testAnd","thx/TestBitSet.hx",177,0x02b8382c)
            				HX_STACK_ARG(acc5,"acc5")
            				HX_STACK_ARG(char5,"char5")
            				HX_STACK_ARG(i5,"i5")
HXLINE( 177)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc5,i5,(char5 == HX_("1",31,00,00,00)));
HXDLIN( 177)				return acc5;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_6) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc6,::String char6,Int i6){
            				HX_STACK_FRAME("thx.TestBitSet","testAnd",0x8f5072c8,"thx.TestBitSet.testAnd","thx/TestBitSet.hx",178,0x02b8382c)
            				HX_STACK_ARG(acc6,"acc6")
            				HX_STACK_ARG(char6,"char6")
            				HX_STACK_ARG(i6,"i6")
HXLINE( 178)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc6,i6,(char6 == HX_("1",31,00,00,00)));
HXDLIN( 178)				return acc6;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_7,::Array< Int >,b1,::Array< Int >,b4) HXARGC(0)
            			void _hx_run(){
            				HX_STACK_FRAME("thx.TestBitSet","testAnd",0x8f5072c8,"thx.TestBitSet.testAnd","thx/TestBitSet.hx",179,0x02b8382c)
HXLINE( 179)				::thx::_BitSet::BitSet_Impl__obj::_hx_and(b1,b4);
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_8,::Array< Int >,b1,::Array< Int >,b5) HXARGC(0)
            			void _hx_run(){
            				HX_STACK_FRAME("thx.TestBitSet","testAnd",0x8f5072c8,"thx.TestBitSet.testAnd","thx/TestBitSet.hx",180,0x02b8382c)
HXLINE( 180)				::thx::_BitSet::BitSet_Impl__obj::_hx_and(b1,b5);
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 171)			++_g1;
HXLINE( 172)			HX_VARI( ::Array< ::String >,chars) = HX_("10101100",5e,6f,ef,19).split(HX_("",00,00,00,00));
HXDLIN( 172)			HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 172)			::thx::Arrays_obj::resize(this1,(int)2,(int)0);
HXDLIN( 172)			HX_VARI( ::Array< Int >,b1) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars, ::Dynamic(new _hx_Closure_0()),this1)) );
HXLINE( 173)			HX_VARI_NAME( ::Array< ::String >,chars1,"chars") = HX_("11111111",80,7b,eb,d6).split(HX_("",00,00,00,00));
HXDLIN( 173)			HX_VARI_NAME( ::Array< Int >,this2,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 173)			::thx::Arrays_obj::resize(this2,(int)2,(int)0);
HXDLIN( 173)			HX_VARI( ::Array< Int >,b2) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars1, ::Dynamic(new _hx_Closure_1()),this2)) );
HXLINE( 174)			HX_VARI_NAME( ::Array< ::String >,chars2,"chars") = HX_("00000000",00,a8,b7,79).split(HX_("",00,00,00,00));
HXDLIN( 174)			HX_VARI_NAME( ::Array< Int >,this3,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 174)			::thx::Arrays_obj::resize(this3,(int)2,(int)0);
HXDLIN( 174)			HX_VARI( ::Array< Int >,b3) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars2, ::Dynamic(new _hx_Closure_2()),this3)) );
HXLINE( 175)			HX_VARI_NAME( ::Array< ::String >,chars3,"chars") = HX_("111",51,59,25,00).split(HX_("",00,00,00,00));
HXDLIN( 175)			HX_VARI_NAME( ::Array< Int >,this4,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 175)			::thx::Arrays_obj::resize(this4,(int)2,(int)0);
HXDLIN( 175)			HX_VARI( ::Array< Int >,b4) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars3, ::Dynamic(new _hx_Closure_3()),this4)) );
HXLINE( 176)			HX_VARI_NAME( ::Array< ::String >,chars4,"chars") = HX_("000",30,96,24,00).split(HX_("",00,00,00,00));
HXDLIN( 176)			HX_VARI_NAME( ::Array< Int >,this5,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 176)			::thx::Arrays_obj::resize(this5,(int)2,(int)0);
HXDLIN( 176)			HX_VARI( ::Array< Int >,b5) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars4, ::Dynamic(new _hx_Closure_4()),this5)) );
HXLINE( 177)			HX_VARI_NAME( ::Array< ::String >,chars5,"chars") = HX_("10101100",5e,6f,ef,19).split(HX_("",00,00,00,00));
HXDLIN( 177)			HX_VARI_NAME( ::Array< Int >,this6,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 177)			::thx::Arrays_obj::resize(this6,(int)2,(int)0);
HXDLIN( 177)			::Array< Int > _hx_tmp = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars5, ::Dynamic(new _hx_Closure_5()),this6)) );
HXDLIN( 177)			::Array< Int > _hx_tmp1 = ::thx::_BitSet::BitSet_Impl__obj::_hx_and(b1,b2);
HXDLIN( 177)			Bool _hx_tmp2 = ::thx::_BitSet::BitSet_Impl__obj::equals(_hx_tmp,_hx_tmp1);
HXDLIN( 177)			::utest::Assert_obj::isTrue(_hx_tmp2,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),177,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testAnd",a5,69,b8,bd)));
HXLINE( 178)			HX_VARI_NAME( ::Array< ::String >,chars6,"chars") = HX_("00000000",00,a8,b7,79).split(HX_("",00,00,00,00));
HXDLIN( 178)			HX_VARI_NAME( ::Array< Int >,this7,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 178)			::thx::Arrays_obj::resize(this7,(int)2,(int)0);
HXDLIN( 178)			::Array< Int > _hx_tmp3 = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars6, ::Dynamic(new _hx_Closure_6()),this7)) );
HXDLIN( 178)			::Array< Int > _hx_tmp4 = ::thx::_BitSet::BitSet_Impl__obj::_hx_and(b1,b3);
HXDLIN( 178)			Bool _hx_tmp5 = ::thx::_BitSet::BitSet_Impl__obj::equals(_hx_tmp3,_hx_tmp4);
HXDLIN( 178)			::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),178,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testAnd",a5,69,b8,bd)));
HXLINE( 179)			::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_7(b1,b4)),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),179,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testAnd",a5,69,b8,bd)));
HXLINE( 180)			::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_8(b1,b5)),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),180,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testAnd",a5,69,b8,bd)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBitSet_obj,testAnd,(void))

void TestBitSet_obj::testOr(){
            	HX_STACK_FRAME("thx.TestBitSet","testOr",0x9a78f252,"thx.TestBitSet.testOr","thx/TestBitSet.hx",184,0x02b8382c)
            	HX_STACK_THIS(this)
HXLINE( 184)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 184)		HX_VARI( Int,_g) = this->x;
HXDLIN( 184)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc,::String _hx_char,Int i){
            				HX_STACK_FRAME("thx.TestBitSet","testOr",0x9a78f252,"thx.TestBitSet.testOr","thx/TestBitSet.hx",185,0x02b8382c)
            				HX_STACK_ARG(acc,"acc")
            				HX_STACK_ARG(_hx_char,"_hx_char")
            				HX_STACK_ARG(i,"i")
HXLINE( 185)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc,i,(_hx_char == HX_("1",31,00,00,00)));
HXDLIN( 185)				return acc;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc1,::String char1,Int i1){
            				HX_STACK_FRAME("thx.TestBitSet","testOr",0x9a78f252,"thx.TestBitSet.testOr","thx/TestBitSet.hx",186,0x02b8382c)
            				HX_STACK_ARG(acc1,"acc1")
            				HX_STACK_ARG(char1,"char1")
            				HX_STACK_ARG(i1,"i1")
HXLINE( 186)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc1,i1,(char1 == HX_("1",31,00,00,00)));
HXDLIN( 186)				return acc1;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_2) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc2,::String char2,Int i2){
            				HX_STACK_FRAME("thx.TestBitSet","testOr",0x9a78f252,"thx.TestBitSet.testOr","thx/TestBitSet.hx",187,0x02b8382c)
            				HX_STACK_ARG(acc2,"acc2")
            				HX_STACK_ARG(char2,"char2")
            				HX_STACK_ARG(i2,"i2")
HXLINE( 187)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc2,i2,(char2 == HX_("1",31,00,00,00)));
HXDLIN( 187)				return acc2;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_3) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc3,::String char3,Int i3){
            				HX_STACK_FRAME("thx.TestBitSet","testOr",0x9a78f252,"thx.TestBitSet.testOr","thx/TestBitSet.hx",188,0x02b8382c)
            				HX_STACK_ARG(acc3,"acc3")
            				HX_STACK_ARG(char3,"char3")
            				HX_STACK_ARG(i3,"i3")
HXLINE( 188)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc3,i3,(char3 == HX_("1",31,00,00,00)));
HXDLIN( 188)				return acc3;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_4) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc4,::String char4,Int i4){
            				HX_STACK_FRAME("thx.TestBitSet","testOr",0x9a78f252,"thx.TestBitSet.testOr","thx/TestBitSet.hx",189,0x02b8382c)
            				HX_STACK_ARG(acc4,"acc4")
            				HX_STACK_ARG(char4,"char4")
            				HX_STACK_ARG(i4,"i4")
HXLINE( 189)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc4,i4,(char4 == HX_("1",31,00,00,00)));
HXDLIN( 189)				return acc4;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_5) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc5,::String char5,Int i5){
            				HX_STACK_FRAME("thx.TestBitSet","testOr",0x9a78f252,"thx.TestBitSet.testOr","thx/TestBitSet.hx",190,0x02b8382c)
            				HX_STACK_ARG(acc5,"acc5")
            				HX_STACK_ARG(char5,"char5")
            				HX_STACK_ARG(i5,"i5")
HXLINE( 190)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc5,i5,(char5 == HX_("1",31,00,00,00)));
HXDLIN( 190)				return acc5;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_6) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc6,::String char6,Int i6){
            				HX_STACK_FRAME("thx.TestBitSet","testOr",0x9a78f252,"thx.TestBitSet.testOr","thx/TestBitSet.hx",191,0x02b8382c)
            				HX_STACK_ARG(acc6,"acc6")
            				HX_STACK_ARG(char6,"char6")
            				HX_STACK_ARG(i6,"i6")
HXLINE( 191)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc6,i6,(char6 == HX_("1",31,00,00,00)));
HXDLIN( 191)				return acc6;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_7,::Array< Int >,b1,::Array< Int >,b4) HXARGC(0)
            			void _hx_run(){
            				HX_STACK_FRAME("thx.TestBitSet","testOr",0x9a78f252,"thx.TestBitSet.testOr","thx/TestBitSet.hx",192,0x02b8382c)
HXLINE( 192)				::thx::_BitSet::BitSet_Impl__obj::_hx_or(b1,b4);
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_8,::Array< Int >,b1,::Array< Int >,b5) HXARGC(0)
            			void _hx_run(){
            				HX_STACK_FRAME("thx.TestBitSet","testOr",0x9a78f252,"thx.TestBitSet.testOr","thx/TestBitSet.hx",193,0x02b8382c)
HXLINE( 193)				::thx::_BitSet::BitSet_Impl__obj::_hx_or(b1,b5);
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 184)			++_g1;
HXLINE( 185)			HX_VARI( ::Array< ::String >,chars) = HX_("10101100",5e,6f,ef,19).split(HX_("",00,00,00,00));
HXDLIN( 185)			HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 185)			::thx::Arrays_obj::resize(this1,(int)2,(int)0);
HXDLIN( 185)			HX_VARI( ::Array< Int >,b1) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars, ::Dynamic(new _hx_Closure_0()),this1)) );
HXLINE( 186)			HX_VARI_NAME( ::Array< ::String >,chars1,"chars") = HX_("11111111",80,7b,eb,d6).split(HX_("",00,00,00,00));
HXDLIN( 186)			HX_VARI_NAME( ::Array< Int >,this2,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 186)			::thx::Arrays_obj::resize(this2,(int)2,(int)0);
HXDLIN( 186)			HX_VARI( ::Array< Int >,b2) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars1, ::Dynamic(new _hx_Closure_1()),this2)) );
HXLINE( 187)			HX_VARI_NAME( ::Array< ::String >,chars2,"chars") = HX_("00000000",00,a8,b7,79).split(HX_("",00,00,00,00));
HXDLIN( 187)			HX_VARI_NAME( ::Array< Int >,this3,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 187)			::thx::Arrays_obj::resize(this3,(int)2,(int)0);
HXDLIN( 187)			HX_VARI( ::Array< Int >,b3) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars2, ::Dynamic(new _hx_Closure_2()),this3)) );
HXLINE( 188)			HX_VARI_NAME( ::Array< ::String >,chars3,"chars") = HX_("111",51,59,25,00).split(HX_("",00,00,00,00));
HXDLIN( 188)			HX_VARI_NAME( ::Array< Int >,this4,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 188)			::thx::Arrays_obj::resize(this4,(int)2,(int)0);
HXDLIN( 188)			HX_VARI( ::Array< Int >,b4) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars3, ::Dynamic(new _hx_Closure_3()),this4)) );
HXLINE( 189)			HX_VARI_NAME( ::Array< ::String >,chars4,"chars") = HX_("000",30,96,24,00).split(HX_("",00,00,00,00));
HXDLIN( 189)			HX_VARI_NAME( ::Array< Int >,this5,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 189)			::thx::Arrays_obj::resize(this5,(int)2,(int)0);
HXDLIN( 189)			HX_VARI( ::Array< Int >,b5) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars4, ::Dynamic(new _hx_Closure_4()),this5)) );
HXLINE( 190)			HX_VARI_NAME( ::Array< ::String >,chars5,"chars") = HX_("11111111",80,7b,eb,d6).split(HX_("",00,00,00,00));
HXDLIN( 190)			HX_VARI_NAME( ::Array< Int >,this6,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 190)			::thx::Arrays_obj::resize(this6,(int)2,(int)0);
HXDLIN( 190)			::Array< Int > _hx_tmp = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars5, ::Dynamic(new _hx_Closure_5()),this6)) );
HXDLIN( 190)			::Array< Int > _hx_tmp1 = ::thx::_BitSet::BitSet_Impl__obj::_hx_or(b1,b2);
HXDLIN( 190)			Bool _hx_tmp2 = ::thx::_BitSet::BitSet_Impl__obj::equals(_hx_tmp,_hx_tmp1);
HXDLIN( 190)			::utest::Assert_obj::isTrue(_hx_tmp2,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),190,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testOr",15,46,3a,d5)));
HXLINE( 191)			HX_VARI_NAME( ::Array< ::String >,chars6,"chars") = HX_("10101100",5e,6f,ef,19).split(HX_("",00,00,00,00));
HXDLIN( 191)			HX_VARI_NAME( ::Array< Int >,this7,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 191)			::thx::Arrays_obj::resize(this7,(int)2,(int)0);
HXDLIN( 191)			::Array< Int > _hx_tmp3 = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars6, ::Dynamic(new _hx_Closure_6()),this7)) );
HXDLIN( 191)			::Array< Int > _hx_tmp4 = ::thx::_BitSet::BitSet_Impl__obj::_hx_or(b1,b3);
HXDLIN( 191)			Bool _hx_tmp5 = ::thx::_BitSet::BitSet_Impl__obj::equals(_hx_tmp3,_hx_tmp4);
HXDLIN( 191)			::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),191,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testOr",15,46,3a,d5)));
HXLINE( 192)			::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_7(b1,b4)),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),192,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testOr",15,46,3a,d5)));
HXLINE( 193)			::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_8(b1,b5)),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),193,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testOr",15,46,3a,d5)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBitSet_obj,testOr,(void))

void TestBitSet_obj::testXor(){
            	HX_STACK_FRAME("thx.TestBitSet","testXor",0x8f61e78c,"thx.TestBitSet.testXor","thx/TestBitSet.hx",197,0x02b8382c)
            	HX_STACK_THIS(this)
HXLINE( 197)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 197)		HX_VARI( Int,_g) = this->x;
HXDLIN( 197)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc,::String _hx_char,Int i){
            				HX_STACK_FRAME("thx.TestBitSet","testXor",0x8f61e78c,"thx.TestBitSet.testXor","thx/TestBitSet.hx",198,0x02b8382c)
            				HX_STACK_ARG(acc,"acc")
            				HX_STACK_ARG(_hx_char,"_hx_char")
            				HX_STACK_ARG(i,"i")
HXLINE( 198)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc,i,(_hx_char == HX_("1",31,00,00,00)));
HXDLIN( 198)				return acc;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc1,::String char1,Int i1){
            				HX_STACK_FRAME("thx.TestBitSet","testXor",0x8f61e78c,"thx.TestBitSet.testXor","thx/TestBitSet.hx",199,0x02b8382c)
            				HX_STACK_ARG(acc1,"acc1")
            				HX_STACK_ARG(char1,"char1")
            				HX_STACK_ARG(i1,"i1")
HXLINE( 199)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc1,i1,(char1 == HX_("1",31,00,00,00)));
HXDLIN( 199)				return acc1;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_2) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc2,::String char2,Int i2){
            				HX_STACK_FRAME("thx.TestBitSet","testXor",0x8f61e78c,"thx.TestBitSet.testXor","thx/TestBitSet.hx",200,0x02b8382c)
            				HX_STACK_ARG(acc2,"acc2")
            				HX_STACK_ARG(char2,"char2")
            				HX_STACK_ARG(i2,"i2")
HXLINE( 200)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc2,i2,(char2 == HX_("1",31,00,00,00)));
HXDLIN( 200)				return acc2;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_3) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc3,::String char3,Int i3){
            				HX_STACK_FRAME("thx.TestBitSet","testXor",0x8f61e78c,"thx.TestBitSet.testXor","thx/TestBitSet.hx",201,0x02b8382c)
            				HX_STACK_ARG(acc3,"acc3")
            				HX_STACK_ARG(char3,"char3")
            				HX_STACK_ARG(i3,"i3")
HXLINE( 201)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc3,i3,(char3 == HX_("1",31,00,00,00)));
HXDLIN( 201)				return acc3;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_4) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc4,::String char4,Int i4){
            				HX_STACK_FRAME("thx.TestBitSet","testXor",0x8f61e78c,"thx.TestBitSet.testXor","thx/TestBitSet.hx",202,0x02b8382c)
            				HX_STACK_ARG(acc4,"acc4")
            				HX_STACK_ARG(char4,"char4")
            				HX_STACK_ARG(i4,"i4")
HXLINE( 202)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc4,i4,(char4 == HX_("1",31,00,00,00)));
HXDLIN( 202)				return acc4;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_5) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc5,::String char5,Int i5){
            				HX_STACK_FRAME("thx.TestBitSet","testXor",0x8f61e78c,"thx.TestBitSet.testXor","thx/TestBitSet.hx",203,0x02b8382c)
            				HX_STACK_ARG(acc5,"acc5")
            				HX_STACK_ARG(char5,"char5")
            				HX_STACK_ARG(i5,"i5")
HXLINE( 203)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc5,i5,(char5 == HX_("1",31,00,00,00)));
HXDLIN( 203)				return acc5;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_6) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc6,::String char6,Int i6){
            				HX_STACK_FRAME("thx.TestBitSet","testXor",0x8f61e78c,"thx.TestBitSet.testXor","thx/TestBitSet.hx",204,0x02b8382c)
            				HX_STACK_ARG(acc6,"acc6")
            				HX_STACK_ARG(char6,"char6")
            				HX_STACK_ARG(i6,"i6")
HXLINE( 204)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc6,i6,(char6 == HX_("1",31,00,00,00)));
HXDLIN( 204)				return acc6;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_7,::Array< Int >,b1,::Array< Int >,b4) HXARGC(0)
            			void _hx_run(){
            				HX_STACK_FRAME("thx.TestBitSet","testXor",0x8f61e78c,"thx.TestBitSet.testXor","thx/TestBitSet.hx",205,0x02b8382c)
HXLINE( 205)				::thx::_BitSet::BitSet_Impl__obj::_hx_xor(b1,b4);
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_8,::Array< Int >,b1,::Array< Int >,b5) HXARGC(0)
            			void _hx_run(){
            				HX_STACK_FRAME("thx.TestBitSet","testXor",0x8f61e78c,"thx.TestBitSet.testXor","thx/TestBitSet.hx",206,0x02b8382c)
HXLINE( 206)				::thx::_BitSet::BitSet_Impl__obj::_hx_xor(b1,b5);
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 197)			++_g1;
HXLINE( 198)			HX_VARI( ::Array< ::String >,chars) = HX_("10101100",5e,6f,ef,19).split(HX_("",00,00,00,00));
HXDLIN( 198)			HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 198)			::thx::Arrays_obj::resize(this1,(int)2,(int)0);
HXDLIN( 198)			HX_VARI( ::Array< Int >,b1) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars, ::Dynamic(new _hx_Closure_0()),this1)) );
HXLINE( 199)			HX_VARI_NAME( ::Array< ::String >,chars1,"chars") = HX_("11111111",80,7b,eb,d6).split(HX_("",00,00,00,00));
HXDLIN( 199)			HX_VARI_NAME( ::Array< Int >,this2,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 199)			::thx::Arrays_obj::resize(this2,(int)2,(int)0);
HXDLIN( 199)			HX_VARI( ::Array< Int >,b2) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars1, ::Dynamic(new _hx_Closure_1()),this2)) );
HXLINE( 200)			HX_VARI_NAME( ::Array< ::String >,chars2,"chars") = HX_("00000000",00,a8,b7,79).split(HX_("",00,00,00,00));
HXDLIN( 200)			HX_VARI_NAME( ::Array< Int >,this3,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 200)			::thx::Arrays_obj::resize(this3,(int)2,(int)0);
HXDLIN( 200)			HX_VARI( ::Array< Int >,b3) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars2, ::Dynamic(new _hx_Closure_2()),this3)) );
HXLINE( 201)			HX_VARI_NAME( ::Array< ::String >,chars3,"chars") = HX_("111",51,59,25,00).split(HX_("",00,00,00,00));
HXDLIN( 201)			HX_VARI_NAME( ::Array< Int >,this4,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 201)			::thx::Arrays_obj::resize(this4,(int)2,(int)0);
HXDLIN( 201)			HX_VARI( ::Array< Int >,b4) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars3, ::Dynamic(new _hx_Closure_3()),this4)) );
HXLINE( 202)			HX_VARI_NAME( ::Array< ::String >,chars4,"chars") = HX_("000",30,96,24,00).split(HX_("",00,00,00,00));
HXDLIN( 202)			HX_VARI_NAME( ::Array< Int >,this5,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 202)			::thx::Arrays_obj::resize(this5,(int)2,(int)0);
HXDLIN( 202)			HX_VARI( ::Array< Int >,b5) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars4, ::Dynamic(new _hx_Closure_4()),this5)) );
HXLINE( 203)			HX_VARI_NAME( ::Array< ::String >,chars5,"chars") = HX_("01010011",22,b4,b3,36).split(HX_("",00,00,00,00));
HXDLIN( 203)			HX_VARI_NAME( ::Array< Int >,this6,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 203)			::thx::Arrays_obj::resize(this6,(int)2,(int)0);
HXDLIN( 203)			::Array< Int > _hx_tmp = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars5, ::Dynamic(new _hx_Closure_5()),this6)) );
HXDLIN( 203)			::Array< Int > _hx_tmp1 = ::thx::_BitSet::BitSet_Impl__obj::_hx_xor(b1,b2);
HXDLIN( 203)			Bool _hx_tmp2 = ::thx::_BitSet::BitSet_Impl__obj::equals(_hx_tmp,_hx_tmp1);
HXDLIN( 203)			::utest::Assert_obj::isTrue(_hx_tmp2,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),203,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testXor",69,de,c9,bd)));
HXLINE( 204)			HX_VARI_NAME( ::Array< ::String >,chars6,"chars") = HX_("10101100",5e,6f,ef,19).split(HX_("",00,00,00,00));
HXDLIN( 204)			HX_VARI_NAME( ::Array< Int >,this7,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 204)			::thx::Arrays_obj::resize(this7,(int)2,(int)0);
HXDLIN( 204)			::Array< Int > _hx_tmp3 = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars6, ::Dynamic(new _hx_Closure_6()),this7)) );
HXDLIN( 204)			::Array< Int > _hx_tmp4 = ::thx::_BitSet::BitSet_Impl__obj::_hx_xor(b1,b3);
HXDLIN( 204)			Bool _hx_tmp5 = ::thx::_BitSet::BitSet_Impl__obj::equals(_hx_tmp3,_hx_tmp4);
HXDLIN( 204)			::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),204,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testXor",69,de,c9,bd)));
HXLINE( 205)			::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_7(b1,b4)),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),205,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testXor",69,de,c9,bd)));
HXLINE( 206)			::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_8(b1,b5)),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),206,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testXor",69,de,c9,bd)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBitSet_obj,testXor,(void))

void TestBitSet_obj::testNegate(){
            	HX_STACK_FRAME("thx.TestBitSet","testNegate",0xc7839671,"thx.TestBitSet.testNegate","thx/TestBitSet.hx",210,0x02b8382c)
            	HX_STACK_THIS(this)
HXLINE( 210)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 210)		HX_VARI( Int,_g) = this->x;
HXDLIN( 210)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc,::String _hx_char,Int i){
            				HX_STACK_FRAME("thx.TestBitSet","testNegate",0xc7839671,"thx.TestBitSet.testNegate","thx/TestBitSet.hx",211,0x02b8382c)
            				HX_STACK_ARG(acc,"acc")
            				HX_STACK_ARG(_hx_char,"_hx_char")
            				HX_STACK_ARG(i,"i")
HXLINE( 211)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc,i,(_hx_char == HX_("1",31,00,00,00)));
HXDLIN( 211)				return acc;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc1,::String char1,Int i1){
            				HX_STACK_FRAME("thx.TestBitSet","testNegate",0xc7839671,"thx.TestBitSet.testNegate","thx/TestBitSet.hx",211,0x02b8382c)
            				HX_STACK_ARG(acc1,"acc1")
            				HX_STACK_ARG(char1,"char1")
            				HX_STACK_ARG(i1,"i1")
HXLINE( 211)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc1,i1,(char1 == HX_("1",31,00,00,00)));
HXDLIN( 211)				return acc1;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_2) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc2,::String char2,Int i2){
            				HX_STACK_FRAME("thx.TestBitSet","testNegate",0xc7839671,"thx.TestBitSet.testNegate","thx/TestBitSet.hx",212,0x02b8382c)
            				HX_STACK_ARG(acc2,"acc2")
            				HX_STACK_ARG(char2,"char2")
            				HX_STACK_ARG(i2,"i2")
HXLINE( 212)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc2,i2,(char2 == HX_("1",31,00,00,00)));
HXDLIN( 212)				return acc2;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_3) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc3,::String char3,Int i3){
            				HX_STACK_FRAME("thx.TestBitSet","testNegate",0xc7839671,"thx.TestBitSet.testNegate","thx/TestBitSet.hx",212,0x02b8382c)
            				HX_STACK_ARG(acc3,"acc3")
            				HX_STACK_ARG(char3,"char3")
            				HX_STACK_ARG(i3,"i3")
HXLINE( 212)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc3,i3,(char3 == HX_("1",31,00,00,00)));
HXDLIN( 212)				return acc3;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_4) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc4,::String char4,Int i4){
            				HX_STACK_FRAME("thx.TestBitSet","testNegate",0xc7839671,"thx.TestBitSet.testNegate","thx/TestBitSet.hx",213,0x02b8382c)
            				HX_STACK_ARG(acc4,"acc4")
            				HX_STACK_ARG(char4,"char4")
            				HX_STACK_ARG(i4,"i4")
HXLINE( 213)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc4,i4,(char4 == HX_("1",31,00,00,00)));
HXDLIN( 213)				return acc4;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_5) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc5,::String char5,Int i5){
            				HX_STACK_FRAME("thx.TestBitSet","testNegate",0xc7839671,"thx.TestBitSet.testNegate","thx/TestBitSet.hx",213,0x02b8382c)
            				HX_STACK_ARG(acc5,"acc5")
            				HX_STACK_ARG(char5,"char5")
            				HX_STACK_ARG(i5,"i5")
HXLINE( 213)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc5,i5,(char5 == HX_("1",31,00,00,00)));
HXDLIN( 213)				return acc5;
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE( 210)			++_g1;
HXLINE( 211)			HX_VARI( ::Array< ::String >,chars) = HX_("00000000",00,a8,b7,79).split(HX_("",00,00,00,00));
HXDLIN( 211)			HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 211)			::thx::Arrays_obj::resize(this1,(int)2,(int)0);
HXDLIN( 211)			::Array< Int > _hx_tmp = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars, ::Dynamic(new _hx_Closure_0()),this1)) );
HXDLIN( 211)			HX_VARI_NAME( ::Array< ::String >,chars1,"chars") = HX_("11111111",80,7b,eb,d6).split(HX_("",00,00,00,00));
HXDLIN( 211)			HX_VARI_NAME( ::Array< Int >,this2,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 211)			::thx::Arrays_obj::resize(this2,(int)2,(int)0);
HXDLIN( 211)			::Array< Int > _hx_tmp1 = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars1, ::Dynamic(new _hx_Closure_1()),this2)) );
HXDLIN( 211)			::Array< Int > _hx_tmp2 = ::thx::_BitSet::BitSet_Impl__obj::negate(_hx_tmp1);
HXDLIN( 211)			Bool _hx_tmp3 = ::thx::_BitSet::BitSet_Impl__obj::equals(_hx_tmp,_hx_tmp2);
HXDLIN( 211)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),211,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testNegate",b4,87,0d,80)));
HXLINE( 212)			HX_VARI_NAME( ::Array< ::String >,chars2,"chars") = HX_("11111111",80,7b,eb,d6).split(HX_("",00,00,00,00));
HXDLIN( 212)			HX_VARI_NAME( ::Array< Int >,this3,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 212)			::thx::Arrays_obj::resize(this3,(int)2,(int)0);
HXDLIN( 212)			::Array< Int > _hx_tmp4 = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars2, ::Dynamic(new _hx_Closure_2()),this3)) );
HXDLIN( 212)			HX_VARI_NAME( ::Array< ::String >,chars3,"chars") = HX_("00000000",00,a8,b7,79).split(HX_("",00,00,00,00));
HXDLIN( 212)			HX_VARI_NAME( ::Array< Int >,this4,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 212)			::thx::Arrays_obj::resize(this4,(int)2,(int)0);
HXDLIN( 212)			::Array< Int > _hx_tmp5 = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars3, ::Dynamic(new _hx_Closure_3()),this4)) );
HXDLIN( 212)			::Array< Int > _hx_tmp6 = ::thx::_BitSet::BitSet_Impl__obj::negate(_hx_tmp5);
HXDLIN( 212)			Bool _hx_tmp7 = ::thx::_BitSet::BitSet_Impl__obj::equals(_hx_tmp4,_hx_tmp6);
HXDLIN( 212)			::utest::Assert_obj::isTrue(_hx_tmp7,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),212,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testNegate",b4,87,0d,80)));
HXLINE( 213)			HX_VARI_NAME( ::Array< ::String >,chars4,"chars") = HX_("01010011",22,b4,b3,36).split(HX_("",00,00,00,00));
HXDLIN( 213)			HX_VARI_NAME( ::Array< Int >,this5,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 213)			::thx::Arrays_obj::resize(this5,(int)2,(int)0);
HXDLIN( 213)			::Array< Int > _hx_tmp8 = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars4, ::Dynamic(new _hx_Closure_4()),this5)) );
HXDLIN( 213)			HX_VARI_NAME( ::Array< ::String >,chars5,"chars") = HX_("10101100",5e,6f,ef,19).split(HX_("",00,00,00,00));
HXDLIN( 213)			HX_VARI_NAME( ::Array< Int >,this6,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 213)			::thx::Arrays_obj::resize(this6,(int)2,(int)0);
HXDLIN( 213)			::Array< Int > _hx_tmp9 = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars5, ::Dynamic(new _hx_Closure_5()),this6)) );
HXDLIN( 213)			::Array< Int > _hx_tmp10 = ::thx::_BitSet::BitSet_Impl__obj::negate(_hx_tmp9);
HXDLIN( 213)			Bool _hx_tmp11 = ::thx::_BitSet::BitSet_Impl__obj::equals(_hx_tmp8,_hx_tmp10);
HXDLIN( 213)			::utest::Assert_obj::isTrue(_hx_tmp11,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),213,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testNegate",b4,87,0d,80)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBitSet_obj,testNegate,(void))

void TestBitSet_obj::testClone(){
            	HX_STACK_FRAME("thx.TestBitSet","testClone",0x7fec298e,"thx.TestBitSet.testClone","thx/TestBitSet.hx",217,0x02b8382c)
            	HX_STACK_THIS(this)
HXLINE( 217)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 217)		HX_VARI( Int,_g) = this->x;
HXDLIN( 217)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            			::Array< Int > _hx_run(::Array< Int > acc,::String _hx_char,Int i){
            				HX_STACK_FRAME("thx.TestBitSet","testClone",0x7fec298e,"thx.TestBitSet.testClone","thx/TestBitSet.hx",218,0x02b8382c)
            				HX_STACK_ARG(acc,"acc")
            				HX_STACK_ARG(_hx_char,"_hx_char")
            				HX_STACK_ARG(i,"i")
HXLINE( 218)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc,i,(_hx_char == HX_("1",31,00,00,00)));
HXDLIN( 218)				return acc;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1,::Array< Int >,this2) HXARGC(2)
            			::Array< Int > _hx_run(::Array< Int > acc1,Int i1){
            				HX_STACK_FRAME("thx.TestBitSet","testClone",0x7fec298e,"thx.TestBitSet.testClone","thx/TestBitSet.hx",219,0x02b8382c)
            				HX_STACK_ARG(acc1,"acc1")
            				HX_STACK_ARG(i1,"i1")
HXLINE( 219)				Bool _hx_tmp1 = ::thx::_BitSet::BitSet_Impl__obj::at(this2,i1);
HXDLIN( 219)				::thx::_BitSet::BitSet_Impl__obj::setAt(acc1,i1,_hx_tmp1);
HXDLIN( 219)				return acc1;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 217)			++_g1;
HXLINE( 218)			HX_VARI( ::Array< ::String >,chars) = HX_("0101",42,96,df,1f).split(HX_("",00,00,00,00));
HXDLIN( 218)			HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 218)			::thx::Arrays_obj::resize(this1,(int)2,(int)0);
HXDLIN( 218)			HX_VARI( ::Array< Int >,a) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars, ::Dynamic(new _hx_Closure_0()),this1)) );
HXLINE( 219)			HX_VARI_NAME( ::Array< Int >,this2,"this") = a;
HXDLIN( 219)			::Array< Int > _hx_tmp = ::thx::Ints_obj::range(::thx::_BitSet::BitSet_Impl__obj::get_length(this2),null(),null());
HXDLIN( 219)			HX_VARI_NAME( ::Array< Int >,this3,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 219)			::thx::Arrays_obj::resize(this3,(int)2,(int)0);
HXDLIN( 219)			HX_VARI( ::Array< Int >,b) = ( (::Array< Int >)(::thx::Arrays_obj::reduce(_hx_tmp, ::Dynamic(new _hx_Closure_1(this2)),this3)) );
HXLINE( 220)			::thx::_BitSet::BitSet_Impl__obj::setAt(b,(int)0,true);
HXLINE( 221)			::String _hx_tmp2 = ::thx::_BitSet::BitSet_Impl__obj::toString(a);
HXDLIN( 221)			::utest::Assert_obj::same(HX_("0101",42,96,df,1f),_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),221,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testClone",ab,51,65,11)));
HXLINE( 222)			::String _hx_tmp3 = ::thx::_BitSet::BitSet_Impl__obj::toString(b);
HXDLIN( 222)			::utest::Assert_obj::same(HX_("1101",e1,cc,88,20),_hx_tmp3,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),222,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testClone",ab,51,65,11)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBitSet_obj,testClone,(void))


TestBitSet_obj::TestBitSet_obj()
{
}

hx::Val TestBitSet_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"testOr") ) { return hx::Val( testOr_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"testAnd") ) { return hx::Val( testAnd_dyn()); }
		if (HX_FIELD_EQ(inName,"testXor") ) { return hx::Val( testXor_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"testClone") ) { return hx::Val( testClone_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testBitSet") ) { return hx::Val( testBitSet_dyn()); }
		if (HX_FIELD_EQ(inName,"testConcat") ) { return hx::Val( testConcat_dyn()); }
		if (HX_FIELD_EQ(inName,"testExpand") ) { return hx::Val( testExpand_dyn()); }
		if (HX_FIELD_EQ(inName,"testEquals") ) { return hx::Val( testEquals_dyn()); }
		if (HX_FIELD_EQ(inName,"testNegate") ) { return hx::Val( testNegate_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testToBools") ) { return hx::Val( testToBools_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testToInt32s") ) { return hx::Val( testToInt32s_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"testFromBools") ) { return hx::Val( testFromBools_dyn()); }
		if (HX_FIELD_EQ(inName,"testNotEquals") ) { return hx::Val( testNotEquals_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testFromString") ) { return hx::Val( testFromString_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"testPresetLength") ) { return hx::Val( testPresetLength_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestBitSet_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestBitSet_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestBitSet_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestBitSet_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestBitSet_obj_sStaticStorageInfo = 0;
#endif

static ::String TestBitSet_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testBitSet","\xc7","\x9e","\xec","\x09"),
	HX_HCSTRING("testFromBools","\x8d","\x88","\xbb","\x9e"),
	HX_HCSTRING("testToBools","\x5c","\x5b","\x45","\x40"),
	HX_HCSTRING("testToInt32s","\xb2","\x1f","\xa6","\x38"),
	HX_HCSTRING("testFromString","\xcd","\x54","\x67","\xf4"),
	HX_HCSTRING("testPresetLength","\x17","\x55","\x1c","\xe3"),
	HX_HCSTRING("testConcat","\x06","\x4f","\xc4","\xe0"),
	HX_HCSTRING("testExpand","\x4c","\x34","\x67","\xdd"),
	HX_HCSTRING("testEquals","\x31","\x34","\xe7","\xd8"),
	HX_HCSTRING("testNotEquals","\x00","\x49","\x16","\x70"),
	HX_HCSTRING("testAnd","\xa5","\x69","\xb8","\xbd"),
	HX_HCSTRING("testOr","\x15","\x46","\x3a","\xd5"),
	HX_HCSTRING("testXor","\x69","\xde","\xc9","\xbd"),
	HX_HCSTRING("testNegate","\xb4","\x87","\x0d","\x80"),
	HX_HCSTRING("testClone","\xab","\x51","\x65","\x11"),
	::String(null()) };

static void TestBitSet_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestBitSet_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestBitSet_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestBitSet_obj::__mClass,"__mClass");
};

#endif

hx::Class TestBitSet_obj::__mClass;

void TestBitSet_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestBitSet","\x91","\x0e","\x0d","\x87");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestBitSet_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestBitSet_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestBitSet_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestBitSet_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestBitSet_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestBitSet_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
