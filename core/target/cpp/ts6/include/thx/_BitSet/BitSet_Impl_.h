// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx__BitSet_BitSet_Impl_
#define INCLUDED_thx__BitSet_BitSet_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(thx,_BitSet,BitSet_Impl_)

namespace thx{
namespace _BitSet{


class HXCPP_CLASS_ATTRIBUTES BitSet_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef BitSet_Impl__obj OBJ_;
		BitSet_Impl__obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx._BitSet.BitSet_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx._BitSet.BitSet_Impl_"); }
		static hx::ObjectPtr< BitSet_Impl__obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~BitSet_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("BitSet_Impl_","\x55","\xaf","\xc1","\x09"); }

		static void __boot();
		static Int blockSize;
		static ::Array< Int > _new(Int length);
		static ::Dynamic _new_dyn();

		static ::Array< Int > empty( ::Dynamic length);
		static ::Dynamic empty_dyn();

		static ::Array< Int > fromBools(::Array< Bool > values);
		static ::Dynamic fromBools_dyn();

		static ::Array< Int > fromString(::String str);
		static ::Dynamic fromString_dyn();

		static ::Array< Bool > toBools(::Array< Int > this1);
		static ::Dynamic toBools_dyn();

		static ::Array< Int > toInt32s(::Array< Int > this1);
		static ::Dynamic toInt32s_dyn();

		static Bool at(::Array< Int > this1,Int index);
		static ::Dynamic at_dyn();

		static Bool setAt(::Array< Int > this1,Int index,Bool value);
		static ::Dynamic setAt_dyn();

		static ::Array< Int > clone(::Array< Int > this1);
		static ::Dynamic clone_dyn();

		static ::Array< Int > setAll(::Array< Int > this1, ::Dynamic value);
		static ::Dynamic setAll_dyn();

		static ::Array< Int > clearAll(::Array< Int > this1);
		static ::Dynamic clearAll_dyn();

		static ::Array< Int > concat(::Array< Int > this1,::Array< Int > right);
		static ::Dynamic concat_dyn();

		static ::Array< Int > expand(::Array< Int > this1,Int count);
		static ::Dynamic expand_dyn();

		static ::String toString(::Array< Int > this1);
		static ::Dynamic toString_dyn();

		static ::Array< Int > _hx_and(::Array< Int > this1,::Array< Int > right);
		static ::Dynamic _hx_and_dyn();

		static ::Array< Int > _hx_or(::Array< Int > this1,::Array< Int > right);
		static ::Dynamic _hx_or_dyn();

		static ::Array< Int > _hx_xor(::Array< Int > this1,::Array< Int > right);
		static ::Dynamic _hx_xor_dyn();

		static ::Array< Int > negate(::Array< Int > this1);
		static ::Dynamic negate_dyn();

		static Bool equals(::Array< Int > this1,::Array< Int > other);
		static ::Dynamic equals_dyn();

		static Bool notEquals(::Array< Int > this1,::Array< Int > other);
		static ::Dynamic notEquals_dyn();

		static ::Array< Int > combine(::Array< Int > this1,::Array< Int > right, ::Dynamic combiner);
		static ::Dynamic combine_dyn();

		static Int get_length(::Array< Int > this1);
		static ::Dynamic get_length_dyn();

};

} // end namespace thx
} // end namespace _BitSet

#endif /* INCLUDED_thx__BitSet_BitSet_Impl_ */ 
