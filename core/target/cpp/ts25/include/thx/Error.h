// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_Error
#define INCLUDED_thx_Error

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,StackItem)
HX_DECLARE_CLASS1(thx,Error)

namespace thx{


class HXCPP_CLASS_ATTRIBUTES Error_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Error_obj OBJ_;
		Error_obj();

	public:
		void __construct(::String message,::Array< ::Dynamic> stack, ::Dynamic pos);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="thx.Error")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"thx.Error"); }
		static hx::ObjectPtr< Error_obj > __new(::String message,::Array< ::Dynamic> stack, ::Dynamic pos);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Error_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("Error","\xa8","\x3b","\x57","\x06"); }

		static  ::thx::Error fromDynamic( ::Dynamic err, ::Dynamic pos);
		static ::Dynamic fromDynamic_dyn();

		::String message;
		 ::Dynamic pos;
		::Array< ::Dynamic> stackItems;
		virtual ::String toString();
		::Dynamic toString_dyn();

		::String getPosition();
		::Dynamic getPosition_dyn();

		::String stackToString();
		::Dynamic stackToString_dyn();

};

} // end namespace thx

#endif /* INCLUDED_thx_Error */ 
