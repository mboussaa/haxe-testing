// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_fp__Set_Set_Impl_
#define INCLUDED_thx_fp__Set_Set_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(thx,OrderingImpl)
HX_DECLARE_CLASS2(thx,fp,ListImpl)
HX_DECLARE_CLASS2(thx,fp,SetImpl)
HX_DECLARE_CLASS3(thx,fp,_Set,Set_Impl_)

namespace thx{
namespace fp{
namespace _Set{


class HXCPP_CLASS_ATTRIBUTES Set_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Set_Impl__obj OBJ_;
		Set_Impl__obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.fp._Set.Set_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.fp._Set.Set_Impl_"); }
		static hx::ObjectPtr< Set_Impl__obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Set_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Set_Impl_","\xa2","\x1d","\x6f","\x19"); }

		static void __boot();
		static ::hx::EnumBase empty();
		static ::Dynamic empty_dyn();

		static ::hx::EnumBase singleton( ::Dynamic x);
		static ::Dynamic singleton_dyn();

		static ::hx::EnumBase bin( ::Dynamic x,::hx::EnumBase l,::hx::EnumBase r);
		static ::Dynamic bin_dyn();

		static Bool isEmpty(::hx::EnumBase this1);
		static ::Dynamic isEmpty_dyn();

		static Int size(::hx::EnumBase this1);
		static ::Dynamic size_dyn();

		static Bool member(::hx::EnumBase this1, ::Dynamic x, ::Dynamic comparator);
		static ::Dynamic member_dyn();

		static  ::Dynamic foldLeft(::hx::EnumBase this1, ::Dynamic b, ::Dynamic f);
		static ::Dynamic foldLeft_dyn();

		static ::hx::EnumBase insert(::hx::EnumBase this1, ::Dynamic x, ::Dynamic comparator);
		static ::Dynamic insert_dyn();

		static ::hx::EnumBase mapList(::hx::EnumBase this1, ::Dynamic f);
		static ::Dynamic mapList_dyn();

		static Int delta;
		static Int ratio;
		static ::hx::EnumBase balance(::hx::EnumBase this1, ::Dynamic x,::hx::EnumBase l,::hx::EnumBase r);
		static ::Dynamic balance_dyn();

		static ::hx::EnumBase rotateLeft( ::Dynamic x,::hx::EnumBase l,::hx::EnumBase r);
		static ::Dynamic rotateLeft_dyn();

		static ::hx::EnumBase rotateRight( ::Dynamic x,::hx::EnumBase l,::hx::EnumBase r);
		static ::Dynamic rotateRight_dyn();

		static ::hx::EnumBase singleLeft( ::Dynamic x1,::hx::EnumBase t1,::hx::EnumBase r);
		static ::Dynamic singleLeft_dyn();

		static ::hx::EnumBase singleRight( ::Dynamic x1,::hx::EnumBase l,::hx::EnumBase t3);
		static ::Dynamic singleRight_dyn();

		static ::hx::EnumBase doubleLeft( ::Dynamic x1,::hx::EnumBase t1,::hx::EnumBase r);
		static ::Dynamic doubleLeft_dyn();

		static ::hx::EnumBase doubleRight( ::Dynamic x1,::hx::EnumBase l,::hx::EnumBase t4);
		static ::Dynamic doubleRight_dyn();

		static ::hx::EnumBase toList(::hx::EnumBase this1);
		static ::Dynamic toList_dyn();

};

} // end namespace thx
} // end namespace fp
} // end namespace _Set

#endif /* INCLUDED_thx_fp__Set_Set_Impl_ */ 
