// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_OrderingImpl
#include <thx/OrderingImpl.h>
#endif
#ifndef INCLUDED_thx_fp_ComparableOrdSet
#include <thx/fp/ComparableOrdSet.h>
#endif
#ifndef INCLUDED_thx_fp_SetImpl
#include <thx/fp/SetImpl.h>
#endif
#ifndef INCLUDED_thx_fp__Set_Set_Impl_
#include <thx/fp/_Set/Set_Impl_.h>
#endif

namespace thx{
namespace fp{

void ComparableOrdSet_obj::__construct() { }

Dynamic ComparableOrdSet_obj::__CreateEmpty() { return new ComparableOrdSet_obj; }

hx::ObjectPtr< ComparableOrdSet_obj > ComparableOrdSet_obj::__new()
{
	hx::ObjectPtr< ComparableOrdSet_obj > _hx_result = new ComparableOrdSet_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic ComparableOrdSet_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ComparableOrdSet_obj > _hx_result = new ComparableOrdSet_obj();
	_hx_result->__construct();
	return _hx_result;
}

Bool ComparableOrdSet_obj::exists(::hx::EnumBase set, ::Dynamic value){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		::hx::EnumBase _hx_run( ::Dynamic a, ::Dynamic b){
            			HX_STACK_FRAME("thx.fp.ComparableOrdSet","exists",0x1e3b8d15,"thx.fp.ComparableOrdSet.exists","thx/fp/Sets.hx",31,0x62fd8693)
            			HX_STACK_ARG(a,"a")
            			HX_STACK_ARG(b,"b")
HXLINE(  31)			return  ::Dynamic(a->__Field(HX_("compareTo",80,95,5c,02),hx::paccDynamic))(b);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.fp.ComparableOrdSet","exists",0x1e3b8d15,"thx.fp.ComparableOrdSet.exists","thx/fp/Sets.hx",31,0x62fd8693)
            	HX_STACK_ARG(set,"set")
            	HX_STACK_ARG(value,"value")
HXLINE(  31)		return ::thx::fp::_Set::Set_Impl__obj::member(set,value, ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ComparableOrdSet_obj,exists,return )

::hx::EnumBase ComparableOrdSet_obj::set(::hx::EnumBase set, ::Dynamic value){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		::hx::EnumBase _hx_run( ::Dynamic a, ::Dynamic b){
            			HX_STACK_FRAME("thx.fp.ComparableOrdSet","set",0xdabf5ec9,"thx.fp.ComparableOrdSet.set","thx/fp/Sets.hx",34,0x62fd8693)
            			HX_STACK_ARG(a,"a")
            			HX_STACK_ARG(b,"b")
HXLINE(  34)			return  ::Dynamic(a->__Field(HX_("compareTo",80,95,5c,02),hx::paccDynamic))(b);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.fp.ComparableOrdSet","set",0xdabf5ec9,"thx.fp.ComparableOrdSet.set","thx/fp/Sets.hx",34,0x62fd8693)
            	HX_STACK_ARG(set,"set")
            	HX_STACK_ARG(value,"value")
HXLINE(  34)		return ::thx::fp::_Set::Set_Impl__obj::insert(set,value, ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ComparableOrdSet_obj,set,return )


ComparableOrdSet_obj::ComparableOrdSet_obj()
{
}

bool ComparableOrdSet_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { outValue = exists_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ComparableOrdSet_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ComparableOrdSet_obj_sStaticStorageInfo = 0;
#endif

static void ComparableOrdSet_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ComparableOrdSet_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ComparableOrdSet_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ComparableOrdSet_obj::__mClass,"__mClass");
};

#endif

hx::Class ComparableOrdSet_obj::__mClass;

static ::String ComparableOrdSet_obj_sStaticFields[] = {
	HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	::String(null())
};

void ComparableOrdSet_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.fp.ComparableOrdSet","\x15","\xc4","\x63","\x2d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ComparableOrdSet_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ComparableOrdSet_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ComparableOrdSet_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ComparableOrdSet_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ComparableOrdSet_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ComparableOrdSet_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ComparableOrdSet_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace fp
