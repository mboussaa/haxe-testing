// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_Ints
#include <thx/Ints.h>
#endif
#ifndef INCLUDED_thx_OrderingImpl
#include <thx/OrderingImpl.h>
#endif
#ifndef INCLUDED_thx__Ord_Ord_Impl_
#include <thx/_Ord/Ord_Impl_.h>
#endif
#ifndef INCLUDED_thx_fp_IntSet
#include <thx/fp/IntSet.h>
#endif
#ifndef INCLUDED_thx_fp_SetImpl
#include <thx/fp/SetImpl.h>
#endif
#ifndef INCLUDED_thx_fp__Set_Set_Impl_
#include <thx/fp/_Set/Set_Impl_.h>
#endif

namespace thx{
namespace fp{

void IntSet_obj::__construct() { }

Dynamic IntSet_obj::__CreateEmpty() { return new IntSet_obj; }

hx::ObjectPtr< IntSet_obj > IntSet_obj::__new()
{
	hx::ObjectPtr< IntSet_obj > _hx_result = new IntSet_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic IntSet_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< IntSet_obj > _hx_result = new IntSet_obj();
	_hx_result->__construct();
	return _hx_result;
}

Bool IntSet_obj::exists(::hx::EnumBase set,Int value){
            	HX_STACK_FRAME("thx.fp.IntSet","exists",0x5de5bbdd,"thx.fp.IntSet.exists","thx/fp/Sets.hx",23,0x62fd8693)
            	HX_STACK_ARG(set,"set")
            	HX_STACK_ARG(value,"value")
HXLINE(  23)		 ::Dynamic _hx_tmp = ::thx::_Ord::Ord_Impl__obj::fromIntComparison(::thx::Ints_obj::compare_dyn());
HXDLIN(  23)		return ::thx::fp::_Set::Set_Impl__obj::member(set,value,_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(IntSet_obj,exists,return )

::hx::EnumBase IntSet_obj::set(::hx::EnumBase set,Int value){
            	HX_STACK_FRAME("thx.fp.IntSet","set",0xf41ba301,"thx.fp.IntSet.set","thx/fp/Sets.hx",26,0x62fd8693)
            	HX_STACK_ARG(set,"set")
            	HX_STACK_ARG(value,"value")
HXLINE(  26)		 ::Dynamic _hx_tmp = ::thx::_Ord::Ord_Impl__obj::fromIntComparison(::thx::Ints_obj::compare_dyn());
HXDLIN(  26)		return ::thx::fp::_Set::Set_Impl__obj::insert(set,value,_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(IntSet_obj,set,return )


IntSet_obj::IntSet_obj()
{
}

bool IntSet_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { outValue = exists_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *IntSet_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *IntSet_obj_sStaticStorageInfo = 0;
#endif

static void IntSet_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(IntSet_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void IntSet_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(IntSet_obj::__mClass,"__mClass");
};

#endif

hx::Class IntSet_obj::__mClass;

static ::String IntSet_obj_sStaticFields[] = {
	HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	::String(null())
};

void IntSet_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.fp.IntSet","\x4d","\x8c","\xcb","\xa4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &IntSet_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = IntSet_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(IntSet_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< IntSet_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = IntSet_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IntSet_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IntSet_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace fp
